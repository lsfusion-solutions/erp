MODULE Equipment;

REQUIRE Service, MachineryPriceTransaction, DefaultData;

NAMESPACE Machinery;

//---------------------------- Сервера управления оборудования ----------------------------//

CLASS EquipmentServer 'Сервер оборудования';
TABLE equipmentServer (EquipmentServer);

inactive 'Неактивный' = DATA BOOLEAN (EquipmentServer);
name 'Наименование' = DATA ISTRING[50](EquipmentServer) IN id;
timeId 'Включать в код чека время' = DATA BOOLEAN(EquipmentServer);

sid 'Идентификатор' = DATA STRING[20] (EquipmentServer) IN id;
sidTo(equipmentServer) = GROUP AGGR EquipmentServer eequipmentServer WHERE eequipmentServer IS EquipmentServer BY sid (eequipmentServer);
timeFrom 'Начало работы' = DATA TIME (EquipmentServer) IN base;
timeTo 'Окончание работы' = DATA TIME (EquipmentServer) IN base;
delay 'Период обновления (в миллисекундах)' = DATA INTEGER (EquipmentServer) IN base;
numberAtATime 'Макс. кол-во строк чеков за раз' = DATA INTEGER (EquipmentServer) IN base;
maxThreads 'Макс. кол-во потоков' = DATA INTEGER (EquipmentServer) IN base;
sendSalesDelay 'Запуск приёма реализации каждые X раз' = DATA INTEGER (EquipmentServer) IN base;
skipTroublesDelay 'Загрузка транзакций проблемных групп каждые X раз' = DATA INTEGER (EquipmentServer) IN base;
minutesTroubleMachineryGroup 'Минимальный возраст проблемной транзакции (минут)' = DATA INTEGER (EquipmentServer) IN base;
selectTop 'Кол-во считываемых транзакций' = DATA INTEGER (EquipmentServer) IN base;
ignoreReceiptsAfterDocumentsClosedDate 'Не принимать реализацию по закрытым документам' = DATA BOOLEAN (EquipmentServer) IN base;
ignoreReceiptsAfterDocumentsClosedDate(STRING[100] sid) = ignoreReceiptsAfterDocumentsClosedDate(sidTo(sid));
logStackTrace 'Логировать Stack Trace' = DATA BOOLEAN (EquipmentServer) IN base;
overrideCashiers 'Перезаписывать имена кассиров при приёме реализации' = DATA BOOLEAN (EquipmentServer) IN base;
skipGiftCardKeys 'Не создавать подарочные сертификаты при приёме реализации' = DATA BOOLEAN (EquipmentServer) IN base;
useNewIds 'Использовать новые ID' = DATA BOOLEAN (EquipmentServer);
overValue 'Перегруженное значение свойства для приёма реализации' = DATA STRING[100] (EquipmentServer, Setting);
skipReceiveSales 'Не принимать реализацию' = DATA BOOLEAN (EquipmentServer);
receiveVATSales 'Принимать сумму НДС' = DATA BOOLEAN (EquipmentServer);
ignoreConstraints 'Игнорировать ограничения при приеме' = DATA BOOLEAN (EquipmentServer);
doNotReplaceZReportDateTime 'Не замещать время Z-отчета' = DATA BOOLEAN (EquipmentServer);

encodingId = DATA LOCAL STRING (LONG);
timeInId = DATA LOCAL BOOLEAN ();
encodeIds INTERNAL 'equ.srv.EncodeIdsAction' ();

restartEquipmentServer 'Перезапустить Equipment Server' INTERNAL 'equ.srv.RestartEquipmentServerAction'();

EXTEND FORM options PROPERTIES() restartEquipmentServer;

DESIGN options {
    machinery {
        MOVE PROPERTY (restartEquipmentServer());
    }
}

//---------------------------- Ошибки сервера оборудования ----------------------------//

CLASS EquipmentServerError 'Ошибки';
TABLE equipmentServerError (EquipmentServerError);

data 'Сообщение об ошибке' = DATA STRING[200] (EquipmentServerError) IN base;
extraData 'Дополнительная информация' = DATA STRING[200] (EquipmentServerError) IN base;
erTrace 'След ошибки' = DATA TEXT (EquipmentServerError) IN base;
date 'Время возникновения' = DATA DATETIME (EquipmentServerError) IN base;
toDate 'Дата возникновения' = DATE(date(EquipmentServerError e));
equipmentServer 'Сервер оборудования (ID)' = DATA EquipmentServer(EquipmentServerError) IN base;

@defineLog (EquipmentServerError, 'ошибок сервера оборудования', log, toDate);

//---------------------------- Лог сервера оборудования ----------------------------//

CLASS EquipmentServerLog 'Лог';
TABLE equipmentServerLog (EquipmentServerLog);

data 'Сообщение' = DATA TEXT (EquipmentServerLog) IN base;
date 'Время' = DATA DATETIME (EquipmentServerLog) IN base;
toDate 'Дата' = DATE(date(EquipmentServerLog l));
equipmentServer 'Сервер оборудования (ID)' = DATA EquipmentServer(EquipmentServerLog) IN base;

@defineLog (EquipmentServerLog, 'сервера оборудования', log, toDate);

//---------------------------- Монитор процессов сервера оборудования ----------------------------//

needLogProcesses = DATA BOOLEAN (EquipmentServer);
needLogProcesses(STRING[100] sid) = needLogProcesses(sidTo(sid));
logProcesses 'Записать в лог текущие процессы' (EquipmentServer e)  { 
    NEWSESSION { needLogProcesses(e) <- TRUE; apply();}
} TOOLBAR;

needInterruptTransactions = DATA STRING (EquipmentServer);
interrupt 'Прервать транзакцию' (EquipmentServer e, MachineryPriceTransaction t) {
    NEWSESSION {
        needInterruptTransactions(e) <- CONCAT ',', needInterruptTransactions(e), t;
        apply();
    }
}

processMonitorTaskJSON(STRING sid) = JSON FROM 'interruptTransactions' = needInterruptTransactions(sidTo(sid)), 'logProcesses' = needLogProcesses(sidTo(sid));

finishProcessMonitorTask(STRING sidEquipmentServer, STRING json) {
    stringToFile(json);
    LOCAL logProcessesData = TEXT();
    LOCAL interruptedTransactions = BOOLEAN();
    IMPORT JSON FROM resultFile() TO() logProcessesData, interruptedTransactions;

    IF(logProcessesData()) THEN {
        NEW esl = EquipmentServerLog {
            equipmentServer(esl) <- sidTo(sidEquipmentServer);
            data(esl) <- logProcessesData();
            date(esl) <- currentDateTime();
        }
        needLogProcesses(sidTo(sidEquipmentServer)) <- NULL;
    }
    
    IF(interruptedTransactions()) THEN
        needInterruptTransactions(sidTo(sidEquipmentServer)) <- NULL;
}

//---------------------------- Формы для серверов оборудования ----------------------------//

FORM equipmentServer 'Сервер оборудования'
    OBJECTS es = EquipmentServer PANEL, s = Setting
    PROPERTIES(es) name, timeId, sid, timeFrom, timeTo, delay, numberAtATime, maxThreads,
                   sendSalesDelay, skipTroublesDelay, minutesTroubleMachineryGroup, selectTop,
                   ignoreReceiptsAfterDocumentsClosedDate, logStackTrace, overrideCashiers,
                   skipGiftCardKeys, useNewIds, skipReceiveSales, receiveVATSales, ignoreConstraints, doNotReplaceZReportDateTime, inactive
    PROPERTIES(s) READONLY name, defaultValue, baseValue
    PROPERTIES(es, s) overValue               
    
    EDIT EquipmentServer OBJECT es
;

FORM dialogEquipmentServer 'Серверы оборудования'
    OBJECTS es = EquipmentServer
    PROPERTIES(es) READONLY name, timeId, sid, timeFrom, timeTo, delay, numberAtATime, maxThreads,
                            sendSalesDelay, skipTroublesDelay, minutesTroubleMachineryGroup, selectTop,
                            ignoreReceiptsAfterDocumentsClosedDate, logStackTrace, overrideCashiers,
                            skipGiftCardKeys, useNewIds, inactive
    
    LIST EquipmentServer OBJECT es
;

FORM equipmentServers 'Серверы оборудования'
    OBJECTS es = EquipmentServer
    PROPERTIES(es)  READONLY name, timeId, sid, timeFrom, timeTo, delay, numberAtATime, maxThreads,
                             sendSalesDelay, skipTroublesDelay, minutesTroubleMachineryGroup, selectTop,
                             ignoreReceiptsAfterDocumentsClosedDate, logStackTrace, overrideCashiers,
                             skipGiftCardKeys, useNewIds, inactive
    PROPERTIES(es)  NEWSESSION NEW, EDIT, DELETE 

    OBJECTS e = EquipmentServerError LAST 
    PROPERTIES(e) READONLY data, extraData, date
    PROPERTIES(e) READONLY PANEL erTrace

    OBJECTS l = EquipmentServerLog LAST 
    PROPERTIES(l) READONLY data, date
    
    PROPERTIES(es) logProcesses DRAW l

    FILTERS equipmentServer (e) == es
    FILTERS equipmentServer (l) == es
;

DESIGN equipmentServers {
    BOX {
        NEW topContainer {
            fill = 1;
            type = SPLITV;

            MOVE BOX(es);
            NEW specContainer {
                type = TABBED;
                fill = 2;

                NEW errorContainer {
                    fill = 1;
                    caption = 'Ошибки';
                    MOVE BOX(e);
                    MOVE PROPERTY(erTrace(e)) {
                        fill = 1;
                        panelCaptionVertical = TRUE;
                    }
                }
                MOVE BOX(l);
            }
        }
        MOVE TOOLBARBOX;
    }
}

NAVIGATOR {
    machineryMasterData {
        NEW equipmentServers;
    }
}

// ------------------ Ссылка на сервер оборудования для группы оборудования --------------- //

equipmentServer = DATA EquipmentServer (GroupMachinery);
nameEquipmentServer 'Сервер оборудования' (GroupMachinery groupMachinery) = name(equipmentServer(groupMachinery));
sidEquipmentServer 'ИД сервера оборудования' (GroupMachinery groupMachinery) = sid(equipmentServer(groupMachinery));
hasMachinery (RequestExchange r, EquipmentServer e) = 
    GROUP SUM 1 IF equipmentServer(groupMachinery(Machinery m)) == e AND active(groupMachinery(m)) AND (stock(m) == stock(r) OR in(stock(m), r));
machineries 'Оборудование' (EquipmentServer e, RequestExchange r) = GROUP SUM 1 IF equipmentServer(groupMachinery(Machinery m)) == e AND dataIn(m, r);      
in (EquipmentServer e, Machinery m, RequestExchange r) = equipmentServer(groupMachinery(m)) == e AND (dataIn(m, r) OR NOT machineries(e, r));
    
//пока здесь чтобы не делать лишние зависимости
CONSTRAINT handlerModel(GroupMachinery g) = 'lsf.machinery.scales.rbs.KS4010' AND equipmentServer(g)
    MESSAGE 'Для данной модели запрещено использовать сервер оборудования'; 
    
filter(STRING sidEquipmentServer, Machinery m) = sidEquipmentServer == sidEquipmentServer(groupMachinery(m)) AND handlerModel(m) AND overDirectory(m) AND active(groupMachinery(m));    

// ------------------ Подключение к загрузке прайса в оборудование ------------------- //

equipmentServer (MachineryPriceTransaction transaction) = equipmentServer(groupMachinery(transaction));
sidEquipmentServer (MachineryPriceTransaction transaction) = sid(equipmentServer (transaction));

cashRegister (npp, equipmentServer) = GROUP NAGGR Machinery cashRegister BY npp (cashRegister), sid(equipmentServer(groupMachinery(cashRegister))); 
logStackTrace(MachineryPriceTransaction mpt) = logStackTrace(equipmentServer(mpt));

// ------------------ Запросы обмена данными и сервер оборудования ------------------- //

succeeded 'Выгружен' = DATA BOOLEAN (RequestExchange, EquipmentServer);
dateTimeSucceeded 'Время выгрузки' = DATA DATETIME (RequestExchange, EquipmentServer);
overSucceeded(RequestExchange r, EquipmentServer e) = succeeded(r) AND succeeded(r, e);
notOverSucceeded(RequestExchange r, EquipmentServer e) = NOT overSucceeded(r, e) AND r IS RequestExchange;
overSucceeded(RequestExchange r, STRING sidEquipmentServer) = overSucceeded(r, sidTo(sidEquipmentServer));

equipmentServerCount(RequestExchange r) = GROUP SUM 1 IF NOT inactive(EquipmentServer e) AND hasMachinery(r, e);
succededEquipmentServerCount(RequestExchange r) = GROUP SUM 1 IF NOT inactive(EquipmentServer e) AND hasMachinery(r, e) AND overSucceeded(r, e);

allSucceeded(RequestExchange r) = succeeded(r) AND succededEquipmentServerCount(r) = equipmentServerCount(r);
partiallySucceeded(RequestExchange r) = succededEquipmentServerCount(r) AND succededEquipmentServerCount(r) < equipmentServerCount(r);
statusSucceeded 'Статус загрузки' (RequestExchange r) = CASE 
    WHEN allSucceeded(r) THEN 'Успешно загружен'
    WHEN partiallySucceeded(r) THEN 'Частично загружен'
    ELSE 'Не загружен' CHARWIDTH 10;

backgroundStatusSucceeded(RequestExchange r) = CASE 
    WHEN allSucceeded(r) THEN RGB(212,255,212)
    WHEN partiallySucceeded(r) THEN RGB(255,238,165)    
    ELSE RGB(255,255,255);

quantityRequestExchangeError 'Количество ошибок' (RequestExchange r) = GROUP SUM 1 IF requestExchange(RequestExchangeError e) == r;

migratedSucceeded = DATA BOOLEAN();
onStarted() + {
    IF NOT migratedSucceeded() THEN {
        NEWSESSION {
            migratedSucceeded() <- TRUE;
            succeeded(RequestExchange r, EquipmentServer e) <- succeeded(r);
            dateTimeSucceeded(RequestExchange r, EquipmentServer e) <- dateTimeSucceeded(r);
            APPLY; 
        }
    }
}

EXTEND FORM requestExchanges
    PROPERTIES (r) AFTER dateTimeSucceeded(r) statusSucceeded BACKGROUND backgroundStatusSucceeded(r), quantityRequestExchangeError BACKGROUND quantityRequestExchangeError(r)
    
    OBJECTS es = EquipmentServer 
    PROPERTIES(es) name, sid
    PROPERTIES(r, es) succeeded, dateTimeSucceeded
    FILTERS hasMachinery(r, es)  
    
    OBJECTS m = Machinery 
    PROPERTIES(m, r) READONLY dataIn
    PROPERTIES(m) READONLY npp, nameModel, shortDescription, description, objectClassName
    FILTERS stock(m) == stock(r), NOT inactive(m) 
    FILTERS equipmentServer(groupMachinery(m)) == es
; 

DESIGN requestExchanges {
    tabbedContainer {
        NEW machineryTab {
            fill = 1;
            caption = 'Оборудование';
            MOVE BOX(es);
            MOVE BOX(m);
        }
    }
}

EXTEND FORM requestExchange
    PROPERTIES(r) AFTER succeeded(r) statusSucceeded
    OBJECTS es = EquipmentServer BEFORE m
    PROPERTIES(es) name, sid
    PROPERTIES(r, es) succeeded, dateTimeSucceeded
    FILTERS hasMachinery(r, es)
    
    PROPERTIES(m) nameModel AFTER npp(m)
    FILTERS equipmentServer(groupMachinery(m)) == es
; 

DESIGN requestExchange {
    secondRow {
        MOVE PROPERTY(statusSucceeded(r)) AFTER PROPERTY(succeeded(r));
    }
    tabbedPanel {
        NEW machineryTab {
            fill = 1;
            caption = 'Оборудование';
            MOVE BOX(es);
            MOVE BOX(m);
        }
    }
}