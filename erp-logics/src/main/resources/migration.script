V2.0.0 {
    CLASS PromotionDashboard.Promotion -> PriceList.Promotion
    TABLE PromotionDashboard.promotion -> PriceList.promotion
    STORED PROPERTY PromotionDashboard.name[PromotionDashboard.Promotion] -> PriceList.name[PriceList.Promotion]
    PROPERTY PromotionDashboard.promotionName[PromotionDashboard.Promotion] -> PriceList.promotionName[PriceList.Promotion]
    STORED PROPERTY PromotionDashboard.inactive[PromotionDashboard.Promotion] -> PriceList.inactive[PriceList.Promotion]
    PROPERTY PromotionDashboard.active[PromotionDashboard.Promotion] -> PriceList.active[PriceList.Promotion]
    STORED PROPERTY PromotionDashboard.promotion[PriceList.PriceList] -> PriceList.promotion[PriceList.PriceList]
    STORED PROPERTY PromotionDashboard.promotion[PriceList.UserPriceList] -> PriceList.promotion[PriceList.UserPriceList]
    STORED PROPERTY PromotionDashboard.namePromotion[PriceList.PriceList] -> PriceList.namePromotion[PriceList.PriceList]
    PROPERTY PromotionDashboard.namePromotion[PriceList.UserPriceList] -> PriceList.namePromotion[PriceList.UserPriceList]
    PROPERTY PromotionDashboard.namePromotion[PriceList.PriceListDetail] -> PriceList.namePromotion[PriceList.PriceListDetail]
    STORED PROPERTY PromotionDashboard.showPromotionPrice[PriceList.Operation] -> PriceList.showPromotionPrice[PriceList.Operation]
    PROPERTY PromotionDashboard.showPromotionPrice[PriceList.UserPriceList] -> PriceList.showPromotionPrice[PriceList.UserPriceList]
}

V2.1.0 {    
    STORED PROPERTY Reflection.navigatorElement[Reflection.GroupObject] -> Reflection.form[Reflection.GroupObject]
    PROPERTY Reflection.canonicalNameNavigatorElement[Reflection.GroupObject] -> Reflection.canonicalNameForm[Reflection.GroupObject]
    PROPERTY Reflection.captionNavigatorElement[Reflection.GroupObject] -> Reflection.captionForm[Reflection.GroupObject]
    PROPERTY Reflection.groupSIDNavigatorElementGroupObject[STRING,STRING] -> Reflection.groupSIDFormGroupObject[STRING,STRING]
    PROPERTY Reflection.propertyDrawSIDNavigatorElementNamePropertyDraw[STRING,STRING] -> Reflection.propertyDrawSIDFormNamePropertyDraw[STRING,STRING]
    PROPERTY Reflection.propertyDrawSIDFormNamePropertyDraw[STRING,STRING] -> Reflection.propertyDrawByFormNameAndPropertyDrawSid[STRING,STRING]
    STORED PROPERTY SystemEvents.navigatorElement[SystemEvents.Session] -> SystemEvents.form[SystemEvents.Session]
    PROPERTY SystemEvents.captionNavigatorElement[SystemEvents.Session] -> SystemEvents.captionForm[SystemEvents.Session]
    FORM PROPERTY SystemEvents.connections.captionNavigatorElement(s) -> SystemEvents.connections.captionForm(s)
    FORM PROPERTY SystemEvents.changes.captionNavigatorElement(s) -> SystemEvents.changes.captionForm(s)
}

V2.1.1 {
    STORED PROPERTY PriceList.showNotCompanyStocksUser[PriceList.PriceList] -> PriceList.showNotCompanyStocks[PriceList.UserPriceList]
}

V2.1.2 {
    FORM PROPERTY PriceList.userPriceList.showNotCompanyStocksUser(p) -> PriceList.userPriceList.showNotCompanyStocks(p)
}

V2.1.3 {
    STORED PROPERTY Contact.firstName[Contact.Contact] -> Authentication.firstName[Authentication.Contact]
    STORED PROPERTY Contact.lastName[Contact.Contact] -> Authentication.lastName[Authentication.Contact]
    STORED PROPERTY Contact.phone[Contact.Contact] -> Authentication.phone[Authentication.Contact]
    STORED PROPERTY Contact.postAddress[Contact.Contact] -> Authentication.postAddress[Authentication.Contact]
    STORED PROPERTY Contact.birthday[Contact.Contact] -> Authentication.birthday[Authentication.Contact]
    STORED PROPERTY Contact.email[Contact.Contact] -> Authentication.email[Authentication.Contact]
    STORED PROPERTY Employee.initialsEmployee[Contact.Contact] -> Employee.initialsEmployee[Authentication.Contact]
}

V2.1.4 {
    CLASS Service.ReflectionProperty -> Service.Setting
    TABLE Service.reflectionProperty -> Service.setting
    TABLE Service.reflectionPropertyUserRole -> Service.settingUserRole
    PROPERTY Service.reflectionProperty[STRING] -> Service.setting[STRING]
    STORED PROPERTY Service.name[Service.ReflectionProperty] -> Service.name[Service.Setting]
    STORED PROPERTY Service.baseValue[Service.ReflectionProperty] -> Service.baseValue[Service.Setting]
    STORED PROPERTY Service.baseValue[Service.ReflectionProperty,Security.UserRole] -> Service.baseValue[Service.Setting,Security.UserRole]
    STORED PROPERTY Service.defaultValue[Service.ReflectionProperty] -> Service.defaultValue[Service.Setting]
}

V2.1.5 {
    NAVIGATOR System.systemEvents -> System.logs
    NAVIGATOR System.configuration -> System.system
}

V2.1.6 {
    STORED PROPERTY Authentication.useDiscountCardReader[Authentication.Computer] -> DiscountCardDaemon.useDiscountCardReader[Authentication.Computer]
    STORED PROPERTY Authentication.scannerComPort[Authentication.Computer] -> ScannerDaemon.scannerComPort[Authentication.Computer]
    STORED PROPERTY Authentication.scannerSingleRead[Authentication.Computer] -> ScannerDaemon.scannerSingleRead[Authentication.Computer]
    STORED PROPERTY Authentication.scalesComPort[Authentication.Computer] -> WeightDaemon.scalesComPort[Authentication.Computer]
}

V2.1.7 {
    STORED PROPERTY ZReport.skip[ZReport.Receipt] -> ZReport.dataSkip[ZReport.Receipt]
}

V2.1.8 {
    CLASS Scheduler.ScheduledTask -> Scheduler.UserScheduledTask
    STORED PROPERTY Scheduler.name[Scheduler.ScheduledTask] -> Scheduler.name[Scheduler.UserScheduledTask]
    STORED PROPERTY Scheduler.runAtStart[Scheduler.ScheduledTask] -> Scheduler.runAtStart[Scheduler.UserScheduledTask]
    STORED PROPERTY Scheduler.timeFrom[Scheduler.ScheduledTask] -> Scheduler.timeFrom[Scheduler.UserScheduledTask]
    STORED PROPERTY Scheduler.timeTo[Scheduler.ScheduledTask] -> Scheduler.timeTo[Scheduler.UserScheduledTask]
    STORED PROPERTY Scheduler.startDate[Scheduler.ScheduledTask] -> Scheduler.startDate[Scheduler.UserScheduledTask]
    STORED PROPERTY Scheduler.period[Scheduler.ScheduledTask] -> Scheduler.period[Scheduler.UserScheduledTask]
    STORED PROPERTY Scheduler.schedulerStartType[Scheduler.ScheduledTask] -> Scheduler.schedulerStartType[Scheduler.UserScheduledTask]
    STORED PROPERTY Scheduler.active[Scheduler.ScheduledTask] -> Scheduler.active[Scheduler.UserScheduledTask]
    STORED PROPERTY Scheduler.daysOfMonth[Scheduler.ScheduledTask] -> Scheduler.daysOfMonth[Scheduler.UserScheduledTask]
    STORED PROPERTY Scheduler.in[Time.DOW,Scheduler.ScheduledTask] -> Scheduler.in[Time.DOW,Scheduler.UserScheduledTask]
    CLASS Scheduler.ScheduledTaskDetail -> Scheduler.UserScheduledTaskDetail
    STORED PROPERTY Scheduler.active[Scheduler.ScheduledTaskDetail] -> Scheduler.active[Scheduler.UserScheduledTaskDetail]
    STORED PROPERTY Scheduler.order[Scheduler.ScheduledTaskDetail] -> Scheduler.order[Scheduler.UserScheduledTaskDetail]
    STORED PROPERTY Scheduler.script[Scheduler.ScheduledTaskDetail] -> Scheduler.script[Scheduler.UserScheduledTaskDetail]
    STORED PROPERTY Scheduler.scheduledTask[Scheduler.ScheduledTaskDetail] -> Scheduler.scheduledTask[Scheduler.UserScheduledTaskDetail]
    STORED PROPERTY Scheduler.action[Scheduler.ScheduledTaskDetail] -> Scheduler.action[Scheduler.UserScheduledTaskDetail]
    STORED PROPERTY Scheduler.parameter[Scheduler.ScheduledTaskDetail] -> Scheduler.parameter[Scheduler.UserScheduledTaskDetail]
    STORED PROPERTY Scheduler.timeout[Scheduler.ScheduledTaskDetail] -> Scheduler.timeout[Scheduler.UserScheduledTaskDetail]
    STORED PROPERTY Scheduler.ignoreExceptions[Scheduler.ScheduledTaskDetail] -> Scheduler.ignoreExceptions[Scheduler.UserScheduledTaskDetail]
}

V2.1.9 {
    PROPERTY Purchase.status[Purchase.Order] -> Purchase.nameStatus[Purchase.Order]
    FORM PROPERTY Purchase.orders.status(o) -> Purchase.orders.nameStatus(o)
    FORM PROPERTY Purchase.scheduleOrderDetails.status(o) -> Purchase.scheduleOrderDetails.nameStatus(o)
}

V2.1.10 {
    CLASS TerminalHandler.TerminaFlags -> TerminalHandler.TerminalFlags
    TABLE TerminalHandler.terminaFlags -> TerminalHandler.terminalFlags
}

V2.1.11 {
    PROPERTY Stock.accountDelta[Stock.Sku,Stock.Stock] -> Stock.accountDeltaQuantity[Stock.Sku,Stock.Stock]
}

V2.1.12 {
    PROPERTY Stock.accountDelta[Stock.Sku,Stock.Stock,DATE,DATE] -> Stock.accountDeltaQuantity[Stock.Sku,Stock.Stock,DATE,DATE]
}

V2.1.13 {
    PROPERTY Stock.accountDeltaB[Stock.Sku,Stock.Stock,DATETIME] -> Stock.accountDeltaBQuantity[Stock.Sku,Stock.Stock,DATETIME]
    PROPERTY Stock.accountBalance[Stock.Sku,Stock.Stock] -> Stock.accountBalanceQuantity[Stock.Sku,Stock.Stock]
    PROPERTY Stock.prevAccountBalance[Stock.Sku,Stock.Stock] -> Stock.prevAccountBalanceQuantity[Stock.Sku,Stock.Stock]
    PROPERTY Stock.accountBalanceB[Stock.Sku,Stock.Stock,DATETIME] -> Stock.accountBalanceBQuantity[Stock.Sku,Stock.Stock,DATETIME]
    PROPERTY Stock.prevAccountBalanceB[Stock.Sku,Stock.Stock,DATETIME] -> Stock.prevAccountBalanceBQuantity[Stock.Sku,Stock.Stock,DATETIME]
}

V2.1.14 {
    STORED PROPERTY CashRegister.departmentStore[CashRegister.GroupCashRegister] -> CashRegister.stock[CashRegister.GroupCashRegister]
}

V2.1.15 {
    PROPERTY CashRegister.departmentStore[CashRegister.CashRegister] -> CashRegister.stock[CashRegister.CashRegister]
}

V2.1.16 {
    PROPERTY CashRegister.nameDepartmentStore[CashRegister.CashRegister] -> CashRegister.nameStock[CashRegister.CashRegister]
    FORM PROPERTY CashRegister.dialogCashRegister.nameDepartmentStore(c) -> CashRegister.dialogCashRegister.nameStock(c)
}

V2.1.17 {
    PROPERTY CashRegister.departmentStoreCurrentCashRegister[] -> CashRegister.stockCurrentCashRegister[]
}

V2.1.18 {
    PROPERTY CashRegister.idDepartmentStore[CashRegister.GroupCashRegister] -> CashRegister.idStock[CashRegister.GroupCashRegister]
}

V2.1.19 {
    STORED PROPERTY Item.weigth[Barcode.Barcode] -> Item.weight[Barcode.Barcode]
    FORM PROPERTY Item.item.weigth(b) -> Item.item.weight(b)
}

V2.1.20 {
    STORED PROPERTY Marketing.inStock[Marketing.MarketingCondition,Store.DepartmentStore] -> Marketing.inStock[Marketing.MarketingCondition,Stock.Stock]
    STORED PROPERTY Marketing.in[Store.DepartmentStore,Marketing.StockGroupMarketing] -> Marketing.in[Stock.Stock,Marketing.StockGroupMarketing]
}

V2.1.21 {
    STORED PROPERTY StockDocument.excludeComission[] -> StockDocument.excludeCommission[]
    FORM PROPERTY System.options.excludeComission() -> System.options.excludeCommission()
}

V2.1.22 {
}