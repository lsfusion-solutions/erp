MODULE RetailPriceDashboard;

REQUIRE PriceListStore, PriceListDashboard, PriceListPromotion;

NAMESPACE PriceList;
// -------------------------- Текущие цены -------------------- //
filterRetailCalc = GROUP SUM 1 BY retailCalcPriceListType (DepartmentStore d); 
filterRetail (LedgerPriceListType lt) = GROUP SUM 1 IF overIn(retailPriceListType (DepartmentStore d), lt); 
filterBase = GROUP SUM 1 BY basePriceListType(retailCalcPriceListType (DepartmentStore d)); 
   
currentCalc 'РЦ, над.' (CalcPriceListType type, Sku sku, Stock stock, DATETIME dt) = priceA(type, sku, stock, dt);

currentMarkupM 'Надбавка, упр., %' (LedgerPriceListType rt, LedgerPriceListType st, Sku sku, Stock stock, DATETIME dt) = 
    [ round2(min(((X/Z*100/(100+Y))-1)*100,99999))](
                               priceA(rt, sku, stock, dt),
                               priceA(st, sku, stock, dt),
                               valueVAT(sku, stock));
currentCalcM 'РЦ, упр.' (LedgerPriceListType type, Sku sku, Stock stock, DATETIME dt) = priceA(type, sku, stock, dt);
companyCalcM (LedgerPriceListType type, Sku sku, Stock stock, DATETIME dt) = companyA(type, sku, stock, dt);
nameCompanyCalcM (LedgerPriceListType type, Sku sku, Stock stock, DATETIME dt) = name(companyA(type, sku, stock, dt));

changeDataMarkup (CalcPriceListType pt1, Sku sk)  { 
    INPUT n = NUMERIC[8,2] DO
        dataMarkup(pt1, sk) <- n;
}
changeDataMarkupALL (CalcPriceListType pt1, Sku sk)  { 
    NEWSESSION SHOW calcPriceListType OBJECTS c = pt1, s=sk;
}
backgroundCalc (LedgerPriceListType type, Stock stock) = CASE
    WHEN basePriceListType(retailCalcPriceListType (stock)) == type THEN RGB(255, 218, 205)
    WHEN type IS  LedgerPriceListType AND stock IS Stock THEN RGB(255, 244, 240);
    
backgroundRetail (LedgerPriceListType type, Stock stock) = CASE
    WHEN ledgerPriceListType(retailPriceListType (stock))== type THEN RGB(186, 248, 255)
    WHEN type IS LedgerPriceListType AND stock IS Stock THEN RGB(237, 253, 255);

backgroundRetailPrice (LedgerPriceListType type, Stock stock) = CASE
    WHEN ledgerPriceListType(retailPriceListType(stock)) == type THEN RGB(186, 248, 255)
    WHEN type IS LedgerPriceListType AND stock IS Stock THEN RGB(227, 243, 255);

backgroundMarkupSku (CalcPriceListType type, Sku sku, Stock stock) = CASE 
    WHEN CHANGED(dataMarkup(type,sku)) AND stock IS Stock THEN RGB(204,255,204)
    WHEN retailCalcPriceListType (stock) == type AND sku IS Sku THEN RGB(255, 250, 205);

markupGroup '% ТН, группа' (CalcPriceListType type, Sku sku) = markup(type, skuGroup(sku));   
backgroundMarkupSkuGroup (CalcPriceListType type, Sku sku, Stock stock) = CASE 
    //WHEN CHANGED(markupGroup(type,sku)) AND stock IS Stock THEN RGB(204,255,204)
    WHEN retailCalcPriceListType (stock) == type AND sku IS Sku THEN RGB(255, 250, 205);
    
backgroundMarkupSkuGroupOver (CalcPriceListType type, Sku sku, Stock stock) = CASE 
    WHEN CHANGED(markup(type,sku)) AND stock IS Stock THEN RGB(204,255,204)
    WHEN retailCalcPriceListType (stock) == type AND sku IS Sku THEN RGB(255, 250, 195)
    ELSE RGB(255,255,245);

defaultRetailOperation  = DATA PriceList.Operation();
nameDefaultRetailOperation 'Операция для создания розничного прайса на форме "Розничные цены"' () = name(defaultRetailOperation());

EXTEND FORM options
    PROPERTIES () nameDefaultRetailOperation
;
DESIGN options {
    price {
        MOVE PROPERTY (nameDefaultRetailOperation());
    }
}

overCreate  ABSTRACT LIST ( UserPriceListDetail);

createPriceList 'Создать прайс (отм.)' (DATETIME dt)  { 
    IF defaultRetailOperation() THEN {
        IF (GROUP SUM 1 IF select(Sku s)) THEN NEWSESSION {
            NEW p = UserPriceList {
                operation(p) <- defaultRetailOperation();
                fromDate(p) <- DATE(dt);
                fromTime(p) <- TIME(dt);
                
                FOR select(Sku s)  NEW d = UserPriceListDetail DO {
                    userPriceList(d) <- p;
                    sku(d) <- s;
                    overCreate(d);
                }
                DIALOG userPriceList OBJECTS p = p DOCKED NOCANCEL DO {
                    select(Sku s) <- NULL;
                }                
            }
        } ELSE {
            MESSAGE 'Вначале необходимо отметить товары';
        }
    } ELSE {
        MESSAGE 'Не задана операция по умолчанию Администрирование/Настройки/Цены';
    }
}
backgroundPromotion(Sku sku, Stock stock, DATETIME dt) =  RGB(216,224,255) IF promotionPriceListDetailA(sku, stock, dt);

currentOwn (Sku sk, Stock d, DATETIME dt) = OVERRIDE currentCalcM(ledgerPriceListType(retailPriceListType(d)), sk, d,dt), currentCalc(retailCalcPriceListType(d), sk, d, dt);

filter0= DATA LOCAL NESTED BOOLEAN (LedgerPriceListType);   
filter1 = DATA LOCAL NESTED BOOLEAN (CalcPriceListType);
filter2 = DATA LOCAL NESTED BOOLEAN (LedgerPriceListType);

overFillDefault()  ABSTRACT LIST ( );
fillDefault ()  {    
    filter0(LedgerPriceListType p) <- NULL;
    filter1(CalcPriceListType p) <- NULL;
    filter2(LedgerPriceListType p) <- NULL;

    filter0(LedgerPriceListType p) <- TRUE WHERE filterBase(p);
    filter1(CalcPriceListType p) <- TRUE WHERE filterRetailCalc(p);
    filter2(LedgerPriceListType p) <- TRUE WHERE filterRetail(p);
    
    overFillDefault();
}

changeRetailPriceM (LedgerPriceListType type, Sku sk, Stock d, DATETIME dt)  { 
    NEWSESSION SHOW userPriceList OBJECTS p = userPriceList(lastPriceListLedger(type,sk,d,dt)), d=userPriceListDetail(userPriceList(lastPriceListLedger(type,sk,d,dt)), sk);  
}

FORM retailPriceDashboard 'Розничные цены'
    OBJECTS dt = DATETIME PANEL
    PROPERTIES(dt) VALUE
    
    OBJECTS d = DepartmentStore PANEL
    PROPERTIES(d) SELECTOR name
      
    TREE skuTree sg = SkuGroup PARENT parent(sg)
    PROPERTIES READONLY order(sg), skuTreeName = name(sg)
    ORDERS order(sg), skuTreeName
    FILTERGROUP inactive FILTER 'Активные' active(sg) DEFAULT
    
    OBJECTS pt0 = LedgerPriceListType GRID
    FILTERS filter0(pt0)
    OBJECTS pt1 = CalcPriceListType GRID
    FILTERS filter1(pt1)
    OBJECTS pt2 = LedgerPriceListType GRID
    FILTERS filter2(pt2)
       
    OBJECTS sk=Sku
    PROPERTIES (sk) READONLY image PANEL SHOWIF hasImage(sk)
    PROPERTIES (sk) select//, hasRetailPrice
    PROPERTIES (sk) READONLY name BACKGROUND backgroundPromotion(sk,d,dt) ON CONTEXTMENU showMovementSku(sk, d) ON CONTEXTMENU showMovementPriceSku(sk, d), id, idBarcode, nameCountry
    PROPERTIES  READONLY currentBalance(sk,d), valueVAT(sk)
    //-- входная цена
    PROPERTIES READONLY nameCompanyCalcM(pt0,sk,d,dt) COLUMNS (pt0)  HEADER ('Поставщик '+name(pt0)) BACKGROUND backgroundCalc(pt0,d)
    PROPERTIES READONLY currentCalcM(pt0,sk,d,dt) COLUMNS (pt0)  HEADER ('Вход. цена '+name(pt0)) BACKGROUND backgroundCalc(pt0,d)
    //-- надбавка  
    PROPERTIES dataMarkup(pt1,sk) COLUMNS 'f'  (pt1) HEADER ('% ТН, товар '+name(pt1))  ON CHANGE changeDataMarkup (pt1,sk) BACKGROUND backgroundMarkupSku(pt1,sk,d)
    PROPERTIES markupGroup(pt1,sk) COLUMNS 'f' (pt1) HEADER ('% ТН, группа '+name(pt1)) ON CHANGE changeDataMarkupALL(pt1,sk)  BACKGROUND backgroundMarkupSkuGroup(pt1,sk,d)              
    PROPERTIES READONLY currentCalc(pt1,sk,d,dt) COLUMNS 'f'  (pt1) HEADER ('РЦ, над. '+name(pt1)) BACKGROUND backgroundMarkupSkuGroupOver(pt1,sk,d)        
    //-- розничная (упр.)
    PROPERTIES currentMarkupM(pt2,pt0,sk,d,dt) COLUMNS 'g'  (pt2) HEADER ('Надбавка, упр., % '+name(pt2)) BACKGROUND backgroundRetail(pt2,d)
    PROPERTIES currentCalcM(pt2,sk,d,dt) COLUMNS 'g'  (pt2) HEADER ('РЦ, упр. '+name(pt2)) ON CHANGE changeRetailPriceM(pt2,sk,d,dt) BACKGROUND backgroundRetailPrice(pt2,d)
    
    PROPERTIES (sk)  editSk = EDIT NEWSESSION
    PROPERTIES createPriceList(dt) TOOLBAR DRAW sk
    ORDERS name(sk)
    FILTERS isParent(sg, sk)
    
    FILTERGROUP promotion
        FILTER 'В акции' promotionPriceListDetailA(sk, d, dt)
    FILTERGROUP supplier
        FILTER 'Есть входная цена' currentCalcM(basePriceListType(retailCalcPriceListType(d)),sk,d,dt)  
            
    FILTERGROUP processing
//        FILTER 'С остатками  и без цен' availableQuantity(sk, s) > 0 AND NOT localHasRetailPrice(sk)
        FILTER 'С остатками' balanceB(sk, d, dt) > 0
//        FILTER 'С ценами  и без остатков' localHasRetailPrice(sk) AND NOT availableQuantity(sk, s) > 0
//        FILTER 'Текущий прайс' localHasRetailPrice(sk) DEFAULT
//        FILTER 'С разной себестоимостью' warehouseCostPriceListLedgerB(sk, toDateTime(dt)) != calcWarehousePrice(sk)

    FILTERGROUP activeSku FILTER 'Активные' active(sk) DEFAULT 

    PROPERTIES() filterPriceListDateFrom, filterPriceListDateTo, nameFilterPriceListCompany    
    
    OBJECTS p = PriceList LAST
    PROPERTIES(p) READONLY BACKGROUND background(p)
           isPosted , number, series, date, time,
           fromDate, fromTime, toDate, toTime, nameOperation, 
           nameCurrency, nameCompany, nameCompanyStock, priceListTypes, stocks,
           note
    PROPERTIES (p) NEWSESSION NEW[UserPriceList], editP = EDIT SHOWIF showChange(p), DELETE SHOWIF (is[UserPriceList](p) AND showChange(p))
    FILTERGROUP inactivePriceList
        FILTER 'Текущие' isActive(p,dt) 'F10'            
        FILTER 'Активные' isActive(p,dt) OR (fromDateTime(p) > dt) 'F10' DEFAULT
    
    FILTERS filterDateFrom(p), 
            filterDateTo(p),
            filterCompany(p),
            (GROUP  SUM 1 IF in[PriceList, DataPriceListType](p,DataPriceListType dpt2) AND filter2(dpt2))            
        
    OBJECTS ct = CalcPriceListType
    PROPERTIES(ct) READONLY id, name
    PROPERTIES(ct) NEWSESSION NEW, EDIT, DELETE
    
    EVENTS ON INIT fillDefault()
;
@extendFormFilterStockAccess(d, retailPriceDashboard);

DESIGN retailPriceDashboard {
     NEW pane {
         fill = 1;
         NEW firstContainer{
            alignment = STRETCH;
            NEW topContainer{
                horizontal = TRUE;
                alignment = STRETCH;
                MOVE BOX(d) {
                    fill = 1;
                    MOVE PROPERTY(name(d)) {
                        alignment = STRETCH;
                    }
                }
                MOVE BOX(dt){
                    caption = 'Дата/время';
                }
            }
         }
         NEW rightContainer {
             fill = 1;
             tabbed = TRUE;
             NEW skus {
                 caption = 'Товары';
                 horizontal = TRUE;
                 fill = 1;
                 //MOVE BOX(TREE skuTree);
                 NEW itemImage {
                     width = 0;
                     fill = 1;
                     MOVE BOX(TREE skuTree) { caption = 'Группы';}               
                     MOVE PROPERTY (image(sk)) {
                         fill = 1;
                         caption = '';
                         focusable = FALSE;
                     }
                 }
                 MOVE BOX(sk) {
                    GRID(sk) {
                        headerHeight = 60;
                    }
                    fill = 3;                               
                 }            
             }
             NEW price {
                fill = 1;
                caption = 'Прайсы';
                NEW topFilter {
                    horizontal = TRUE;
                    caption = 'Фильтры';
                    MOVE PROPERTY(filterPriceListDateFrom());
                    MOVE PROPERTY(filterPriceListDateTo());
                    MOVE PROPERTY(nameFilterPriceListCompany());
                } 
                MOVE BOX(p);   
             }
             NEW markup {
                fill = 1;
                caption = 'Надбавки';
                MOVE BOX(ct);
             }
         }
        
     }
     MOVE TOOLBARBOX;
}

NAVIGATOR {
    priceListDashboardNavigator {
        NEW retailPriceDashboard;
    }
}
