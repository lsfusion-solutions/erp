MODULE RangeBalance;

REQUIRE Range, StockDaysChange;

NAMESPACE Range;

CLASS RangeDocument 'Исполнение ассортимента';
TABLE rangeDocument(RangeDocument);

@defineDocumentHeaderTime(RangeDocument);
@defineDocumentHeaderNote(RangeDocument);
@defineDocumentHeaderCreated(RangeDocument);
@deriveDocumentHeaderTimePrefix(RangeDocument, );
@defineDocumentHeaderNumber(RangeDocument, BPSTRING[2]);
@defineNumeratedDefault(RangeDocument, 'Исполнение ассортимента', 'ИА');
@defineDocumentHeaderDescription (RangeDocument, 'Исполнение ассортимента');

fromDate 'Дата с' = DATA DATE (RangeDocument) IN documentHeader;
toDate 'Дата по' = DATA DATE (RangeDocument) IN documentHeader;

WHEN LOCAL SET(RangeDocument o IS RangeDocument) DO {
    IF o IS RangeDocument AND NOT fromDate(o) THEN fromDate(o) <- currentDate();
    IF o IS RangeDocument AND NOT toDate(o) THEN toDate(o) <- currentDate();
};

averageSoldStoreType 'Среднедневные продажи по формату магазина' = DATA BOOLEAN (RangeDocument) IN documentPrm;
averageSoldChainStores 'Среднедневные продажи по торговой сети' = DATA BOOLEAN (RangeDocument) IN documentPrm;

//-- Выбор складов
allStoreInclude 'Вкл' = DATA BOOLEAN (RangeDocument);

TABLE rangeDocumentChainStores (RangeDocument,ChainStores);
dataInclude 'Вкл' = DATA BOOLEAN (RangeDocument,ChainStores); 
include 'Вкл' (RangeDocument d, ChainStores c) = OVERRIDE dataInclude(d,c), (allStoreInclude(d) IF c IS ChainStores);

TABLE rangeDocumentStoreType (RangeDocument,StoreType);
dataInclude 'Вкл' = DATA BOOLEAN (RangeDocument,StoreType);
include 'Вкл' (RangeDocument d, StoreType t) = OVERRIDE dataInclude(d,t), include(d, chainStores(t));

TABLE rangeDocumentStore (RangeDocument,Store);
dataInclude 'Вкл' = DATA BOOLEAN (RangeDocument,Store);
include 'Вкл' (RangeDocument d, Store s) = OVERRIDE dataInclude(d,s), include(d, storeType(s));

include 'Вкл' (RangeDocument d, DepartmentStore s) = include(d, store(s)) AND stockGroup(s) = store(s) MATERIALIZED; // исключаем склады пекарни и кулинарии

backgroundInclude 'Цвет' (RangeDocument d) = RGB(0,0,0) IF allStoreInclude(d);
backgroundInclude 'Цвет' (RangeDocument d, ChainStores c) = IF dataInclude(d,c) THEN RGB(0,0,0)
    ELSE RGB(203,203,203) IF (GROUP SUM 1 IF include(d, StoreType t) AND chainStores(t) == c);
backgroundInclude 'Цвет' (RangeDocument d, StoreType t) = IF dataInclude(d,t) THEN RGB(0,0,0)
    ELSE RGB(203,203,203) IF (GROUP SUM 1 IF include(d, Store s) AND storeType(s) == t);
backgroundInclude 'Цвет' (RangeDocument d, Store s) = IF dataInclude(d,s) THEN RGB(0,0,0)
    ELSE RGB(203,203,203) IF include(d, storeType(s));

nameIncludeStores 'Магазины' (RangeDocument d)= CONCAT ', ',
    'Все' IF allStoreInclude(d),
    (GROUP CONCAT name(ChainStores c) IF dataInclude(d,c), ', ' ORDER name(c), c),
    (GROUP CONCAT name(StoreType t) IF dataInclude(d,t), ', ' ORDER name(t), t),
    (GROUP CONCAT name(Store s) IF dataInclude(d,s), ', ' ORDER name(s), s)
    CHARWIDTH 20 MATERIALIZED;
    
//-- Выбор групп товара  
TABLE rangeDocumentSkuGroup (RangeDocument,SkuGroup);
dataInclude 'Вкл' = DATA BOOLEAN (RangeDocument,SkuGroup);

levelParentInclude (RangeDocument d, SkuGroup g) = GROUP MIN level(g, SkuGroup p) IF dataInclude(d,p) MATERIALIZED;    
nearestParentInclude (RangeDocument d, SkuGroup g) = skuGroup(g, levelParentInclude(d,g));
nearestInclude (RangeDocument d, SkuGroup g) = dataInclude(d, nearestParentInclude(d,g));
include 'Вкл' (RangeDocument d, SkuGroup g) = OVERRIDE dataInclude(d,g), nearestInclude(d,g) MATERIALIZED;

include 'Вкл' (RangeDocument d, Sku s) = include(d,skuGroup(s));

backgroundInclude 'Цвет' (RangeDocument d, SkuGroup g) = IF dataInclude(d,g) THEN RGB(0,0,0)
    ELSE RGB(203,203,203) IF (GROUP SUM 1 IF include(d, SkuGroup c) AND isParent(c,g));

nameIncludeSkuGroups 'Группы товаров' (RangeDocument d)= GROUP CONCAT name(SkuGroup g) IF dataInclude(d, g), ', ' ORDER name(g), g CHARWIDTH 20 MATERIALIZED;

TABLE skuDepartmentStoreRangeDocument (Sku,DepartmentStore,RangeDocument);
daysOnStock 'Дней на складе' = DATA INTEGER (Sku,DepartmentStore,RangeDocument);
daysOnRange 'Дней в ассортименте' = DATA INTEGER (Sku,DepartmentStore,RangeDocument);
daysOfAbsence 'Дней отсутствия' (Sku s, DepartmentStore d, RangeDocument r) =
    daysOnRange(s, d, r) - (OVERRIDE daysOnStock(s, d, r), 0.0); 

quantitySold 'Продано (кол-во)' = DATA NUMERIC[16,5] (Sku,DepartmentStore,RangeDocument);
markupSumSold 'Продано (надбавка, руб)' = DATA NUMERIC[18,4] (Sku,DepartmentStore,RangeDocument);
sumSold 'Продано (сумма)' = DATA NUMERIC[18,4] (Sku,DepartmentStore,RangeDocument);

countNotSold = GROUP SUM 1 IF include(RangeDocument r, DepartmentStore d) AND NOT quantitySold(Sku s, d, r) BY s, storeType(d), r;
countNotSold = GROUP SUM 1 IF include(RangeDocument r, DepartmentStore d) AND NOT quantitySold(Sku s, d, r) BY s, chainStores(d), r;

averageQuantitySold 'Среднедневные продажи (кол-во)' = DATA NUMERIC[16,5] (Sku,DepartmentStore,RangeDocument);
averageMarkupSumSold 'Среднедневные продажи (надбавка)' = DATA NUMERIC[18,4] (Sku,DepartmentStore,RangeDocument);
averageSumSold 'Среднедневные продажи (сумма)' = DATA NUMERIC[18,4] (Sku,DepartmentStore,RangeDocument);

lostQuantitySold 'Упущенная прибыль (кол-во)' = DATA NUMERIC[16,5] (Sku,DepartmentStore,RangeDocument);
lostMarkupSumSold 'Упущенная прибыль (надбавка)' = DATA NUMERIC[18,4] (Sku,DepartmentStore,RangeDocument);
lostSumSold 'Упущенная прибыль (сумма)' = DATA NUMERIC[18,4] (Sku,DepartmentStore,RangeDocument);

TABLE skuStoreTypeRangeDocument (Sku,StoreType,RangeDocument);
averageQuantitySold 'Среднедневные продажи (кол-во)' = DATA NUMERIC[16,5] (Sku,StoreType,RangeDocument);
averageMarkupSumSold 'Среднедневные продажи (надбавка)' = DATA NUMERIC[18,4] (Sku,StoreType,RangeDocument);
averageSumSold 'Среднедневные продажи (сумма)' = DATA NUMERIC[18,4] (Sku,StoreType,RangeDocument);

TABLE skuChainStoresRangeDocument (Sku,ChainStores,RangeDocument);
averageQuantitySold 'Среднедневные продажи (кол-во)' = DATA NUMERIC[16,5] (Sku,ChainStores,RangeDocument);
averageMarkupSumSold 'Среднедневные продажи (надбавка)' = DATA NUMERIC[18,4] (Sku,ChainStores,RangeDocument);
averageSumSold 'Среднедневные продажи (сумма)' = DATA NUMERIC[18,4] (Sku,ChainStores,RangeDocument);

overAverageQuantitySold 'Среднедневные продажи (кол-во)' (Sku sk, DepartmentStore ds, RangeDocument d) = OVERRIDE averageQuantitySold(sk,ds,d), averageQuantitySold(sk,storeType(ds),d), averageQuantitySold(sk,chainStores(ds),d);
overAverageMarkupSumSold 'Среднедневные продажи (надбавка)' (Sku sk, DepartmentStore ds, RangeDocument d) = OVERRIDE averageMarkupSumSold(sk,ds,d), averageMarkupSumSold(sk,storeType(ds),d), averageMarkupSumSold(sk,chainStores(ds),d);
overAverageSumSold 'Среднедневные продажи (сумма)' (Sku sk, DepartmentStore ds, RangeDocument d) = OVERRIDE averageSumSold(sk,ds,d), averageSumSold(sk,storeType(ds),d), averageSumSold(sk,chainStores(ds),d);

skipShow = ABSTRACT VALUE BOOLEAN (Sku);

lostQuantitySold 'Упущенная прибыль (кол-во)' (Store s, RangeDocument d) = GROUP SUM lostQuantitySold(Sku sk, DepartmentStore ds, d) IF store(ds) == s AND NOT skipShow(sk);
lostMarkupSumSold 'Упущенная прибыль (надбавка)' (Store s, RangeDocument d) = GROUP SUM lostMarkupSumSold(Sku sk, DepartmentStore ds, d) IF store(ds) == s AND NOT skipShow(sk);
lostSumSold 'Упущенная прибыль (сумма)' (Store s, RangeDocument d) = GROUP SUM lostSumSold(Sku sk, DepartmentStore ds, d) IF store(ds) == s AND NOT skipShow(sk);

lostQuantitySold 'Упущенная прибыль (кол-во)' (StoreType t, RangeDocument d) = GROUP SUM lostQuantitySold(Sku sk, DepartmentStore ds, d) IF storeType(ds) == t AND NOT skipShow(sk);
lostMarkupSumSold 'Упущенная прибыль (надбавка)' (StoreType t, RangeDocument d) = GROUP SUM lostMarkupSumSold(Sku sk, DepartmentStore ds, d) IF storeType(ds) == t AND NOT skipShow(sk);
lostSumSold 'Упущенная прибыль (сумма)' (StoreType t, RangeDocument d) = GROUP SUM lostSumSold(Sku sk, DepartmentStore ds, d) IF storeType(ds) == t AND NOT skipShow(sk);

lostQuantitySold 'Упущенная прибыль (кол-во)' (ChainStores c, RangeDocument d) = GROUP SUM lostQuantitySold(Sku sk, DepartmentStore ds, d) IF chainStores(ds) == c AND NOT skipShow(sk);
lostMarkupSumSold 'Упущенная прибыль (надбавка)' (ChainStores c, RangeDocument d) = GROUP SUM lostMarkupSumSold(Sku sk, DepartmentStore ds, d) IF chainStores(ds) == c AND NOT skipShow(sk);
lostSumSold 'Упущенная прибыль (сумма)' (ChainStores c, RangeDocument d) = GROUP SUM lostSumSold(Sku sk, DepartmentStore ds, d) IF chainStores(ds) == c AND NOT skipShow(sk);

lostQuantitySold 'Упущенная прибыль (кол-во)' (RangeDocument d) = GROUP SUM lostQuantitySold(Sku sk, DepartmentStore ds, d) IF NOT skipShow(sk);
lostMarkupSumSold 'Упущенная прибыль (надбавка)' (RangeDocument d) = GROUP SUM lostMarkupSumSold(Sku sk, DepartmentStore ds, d) IF NOT skipShow(sk);
lostSumSold 'Упущенная прибыль (сумма)' (RangeDocument d) = GROUP SUM lostSumSold(Sku sk, DepartmentStore ds, d) IF NOT skipShow(sk);

lostQuantitySold 'Упущенная прибыль (кол-во)' (SkuGroup g, RangeDocument d) = GROUP SUM lostQuantitySold(Sku sk, DepartmentStore ds, d) IF isParent(g,sk) AND NOT skipShow(sk);
lostMarkupSumSold 'Упущенная прибыль (надбавка)' (SkuGroup g, RangeDocument d) = GROUP SUM lostMarkupSumSold(Sku sk, DepartmentStore ds, d) IF isParent(g,sk) AND NOT skipShow(sk);
lostSumSold 'Упущенная прибыль (сумма)' (SkuGroup g, RangeDocument d) = GROUP SUM lostSumSold(Sku sk, DepartmentStore ds, d) IF isParent(g,sk) AND NOT skipShow(sk);

quantityOnStock 'На складе и нет в ассортименте (кол-во)' (Store s, RangeDocument d) = GROUP SUM 1 IF daysOnStock(Sku sk, DepartmentStore ds, d) AND NOT daysOnRange(sk,ds,d) AND store(ds) == s AND NOT skipShow(sk);
quantityOnRange 'В ассортименте и нет на складе (кол-во)' (Store s, RangeDocument d) = GROUP SUM 1 IF daysOnRange(Sku sk, DepartmentStore ds, d) AND NOT daysOnStock(sk,ds,d) AND store(ds) == s AND NOT skipShow(sk);
quantityOnStockRangeAll 'На складе и в ассортименте за весь период (кол-во)' (Store s, RangeDocument d) = GROUP SUM 1 IF daysOnRange(Sku sk, DepartmentStore ds, d) == daysOnStock(sk,ds,d) AND store(ds) == s AND NOT skipShow(sk);
quantityOnStockRange 'На складе и в ассортименте (кол-во)' (Store s, RangeDocument d) = GROUP SUM 1 IF daysOnRange(Sku sk, DepartmentStore ds, d) AND daysOnStock(sk,ds,d) AND NOT daysOnRange(sk,ds,d) == daysOnStock(sk,ds,d) AND store(ds) == s AND NOT skipShow(sk);

quantityOnStock 'На складе и нет в ассортименте (кол-во)' (StoreType t, RangeDocument d) = GROUP SUM 1 IF daysOnStock(Sku sk, DepartmentStore ds, d) AND NOT daysOnRange(sk,ds,d) AND storeType(ds) == t AND NOT skipShow(sk);
quantityOnRange 'В ассортименте и нет на складе (кол-во)' (StoreType t, RangeDocument d) = GROUP SUM 1 IF daysOnRange(Sku sk, DepartmentStore ds, d) AND NOT daysOnStock(sk,ds,d) AND storeType(ds) == t AND NOT skipShow(sk);
quantityOnStockRangeAll 'На складе и в ассортименте за весь период (кол-во)' (StoreType t, RangeDocument d) = GROUP SUM 1 IF daysOnRange(Sku sk, DepartmentStore ds, d) == daysOnStock(sk,ds,d) AND storeType(ds) == t AND NOT skipShow(sk);
quantityOnStockRange 'На складе и в ассортименте (кол-во)' (StoreType t, RangeDocument d) = GROUP SUM 1 IF daysOnRange(Sku sk, DepartmentStore ds, d) AND daysOnStock(sk,ds,d) AND NOT daysOnRange(sk,ds,d) == daysOnStock(sk,ds,d) AND storeType(ds) == t AND NOT skipShow(sk);

quantityOnStock 'На складе и нет в ассортименте (кол-во)' (ChainStores c, RangeDocument d) = GROUP SUM 1 IF daysOnStock(Sku sk, DepartmentStore ds, d) AND NOT daysOnRange(sk,ds,d) AND chainStores(ds) == c AND NOT skipShow(sk);
quantityOnRange 'В ассортименте и нет на складе (кол-во)' (ChainStores c, RangeDocument d) = GROUP SUM 1 IF daysOnRange(Sku sk, DepartmentStore ds, d) AND NOT daysOnStock(sk,ds,d) AND chainStores(ds) == c AND NOT skipShow(sk);
quantityOnStockRangeAll 'На складе и в ассортименте за весь период (кол-во)' (ChainStores c, RangeDocument d) = GROUP SUM 1 IF daysOnRange(Sku sk, DepartmentStore ds, d) == daysOnStock(sk,ds,d) AND chainStores(ds) == c AND NOT skipShow(sk);
quantityOnStockRange 'На складе и в ассортименте (кол-во)' (ChainStores c, RangeDocument d) = GROUP SUM 1 IF daysOnRange(Sku sk, DepartmentStore ds, d) AND daysOnStock(sk,ds,d) AND NOT daysOnRange(sk,ds,d) == daysOnStock(sk,ds,d) AND chainStores(ds) == c AND NOT skipShow(sk);

quantityOnStock 'На складе и нет в ассортименте (кол-во)' (RangeDocument d) = GROUP SUM 1 IF daysOnStock(Sku sk, DepartmentStore ds, d) AND NOT daysOnRange(sk,ds,d) AND NOT skipShow(sk);
quantityOnRange 'В ассортименте и нет на складе (кол-во)' (RangeDocument d) = GROUP SUM 1 IF daysOnRange(Sku sk, DepartmentStore ds, d) AND NOT daysOnStock(sk,ds,d) AND NOT skipShow(sk);
quantityOnStockRangeAll 'На складе и в ассортименте за весь период (кол-во)' (RangeDocument d) = GROUP SUM 1 IF daysOnRange(Sku sk, DepartmentStore ds, d) == daysOnStock(sk,ds,d) AND NOT skipShow(sk);
quantityOnStockRange 'На складе и в ассортименте (кол-во)' (RangeDocument d) = GROUP SUM 1 IF daysOnRange(Sku sk, DepartmentStore ds, d) AND daysOnStock(sk,ds,d) AND NOT daysOnRange(sk,ds,d) == daysOnStock(sk,ds,d) AND NOT skipShow(sk);


quantityOnStock 'На складе и нет в ассортименте (кол-во)' (SkuGroup g, RangeDocument d) = GROUP SUM 1 IF daysOnStock(Sku sk, DepartmentStore ds, d) AND NOT daysOnRange(sk,ds,d) AND isParent(g,sk) AND NOT skipShow(sk);
quantityOnRange 'В ассортименте и нет на складе (кол-во)' (SkuGroup g, RangeDocument d) = GROUP SUM 1 IF daysOnRange(Sku sk, DepartmentStore ds, d) AND NOT daysOnStock(sk,ds,d) AND isParent(g,sk) AND NOT skipShow(sk);
quantityOnStockRangeAll 'На складе и в ассортименте за весь период (кол-во)' (SkuGroup g, RangeDocument d) = GROUP SUM 1 IF daysOnRange(Sku sk, DepartmentStore ds, d) == daysOnStock(sk,ds,d) AND isParent(g,sk) AND NOT skipShow(sk);
quantityOnStockRange 'На складе и в ассортименте (кол-во)' (SkuGroup g, RangeDocument d) = GROUP SUM 1 IF daysOnRange(Sku sk, DepartmentStore ds, d) AND daysOnStock(sk,ds,d) AND NOT daysOnRange(sk,ds,d) == daysOnStock(sk,ds,d) AND isParent(g,sk) AND NOT skipShow(sk);

fillSku 'Заполнить данные'(RangeDocument d) {
    LOCAL message = TEXT ();
    IF NOT fromDate(d) OR NOT toDate(d) THEN {
        message() <- CONCAT '\n', message(), 'Не задан период.';
    }
    IF NOT nameIncludeStores(d) THEN {
        message() <- CONCAT '\n', message(), 'Не заданы магазины.';
    }
    IF NOT nameIncludeSkuGroups(d) THEN {
        message() <- CONCAT '\n', message(), 'Не заданы товарные группы.';
    }
    IF message() THEN {
        MESSAGE message() NOWAIT;
    }
    ELSE FOR DATE df == fromDate(d) AND DATE dt == toDate(d) DO {
        daysOnStock(Sku sk, DepartmentStore ds, d) <- NULL;
        daysOnRange(Sku sk, DepartmentStore ds, d) <- NULL;
        
        quantitySold(Sku sk, DepartmentStore ds, d) <- NULL;
        markupSumSold(Sku sk, DepartmentStore ds, d) <- NULL;
        sumSold(Sku sk, DepartmentStore ds, d) <- NULL;
        
        averageQuantitySold(Sku sk, DepartmentStore ds, d) <- NULL;
        averageMarkupSumSold(Sku sk, DepartmentStore ds, d) <- NULL;
        averageSumSold(Sku sk, DepartmentStore ds, d) <- NULL;
        
        lostQuantitySold(Sku sk, DepartmentStore ds, d) <- NULL;
        lostMarkupSumSold(Sku sk, DepartmentStore ds, d) <- NULL;
        lostSumSold(Sku sk, DepartmentStore ds, d) <- NULL;
        
        averageQuantitySold(Sku sk, StoreType t, d) <- NULL;
        averageMarkupSumSold(Sku sk, StoreType t, d) <- NULL;
        averageSumSold(Sku sk, StoreType t, d) <- NULL;
        
        averageQuantitySold(Sku sk, ChainStores c, d) <- NULL;
        averageMarkupSumSold(Sku sk, ChainStores c, d) <- NULL;
        averageSumSold(Sku sk, ChainStores c, d) <- NULL;
        
        APPLY;
        
        //LOCAL include = BOOLEAN (DepartmentStore);
        //include(DepartmentStore ds) <- TRUE WHERE include(d,ds);
        //include(DepartmentStore ds) <- TRUE WHERE averageSoldStoreType(d) AND (GROUP SUM 1 IF (GROUP SUM 1 IF include(d, Store s) AND storeType(s) == storeType(ds)));
        //include(DepartmentStore ds) <- TRUE WHERE averageSoldChainStores(d) AND (GROUP SUM 1 IF (GROUP SUM 1 IF include(d, StoreType t) AND chainStores(t) == chainStores(ds)));
        
        IF useDaysChange() THEN {
            daysOnStock(Sku sk, DepartmentStore ds, d) <- daysOnStock(sk,ds,df,dt) WHERE include(d,ds) AND include(d,sk) AND daysOnStock(sk,ds,df,dt);
        } ELSE {
            LOCAL daysOn = INTEGER (Sku,DepartmentStore);
            LOCAL quantity = NUMERIC[16,5] (Sku,DepartmentStore);
            LOCAL dateCur = DATE();    
        
            dateCur() <- df;
            quantity(Sku sk, DepartmentStore ds) <- balanceB(sk,ds,df) WHERE include(d,ds) AND include(d,sk) AND balanceB(sk,ds,df);
            daysOn(Sku sk, DepartmentStore ds) <- NULL;
            
            WHILE dateCur() <= dt DO {
                daysOn(Sku sk, DepartmentStore ds) <- daysOn(sk,ds) (+) (1 IF ((quantity(sk,ds) > 0) OR (quantity(sk,ds,dateCur()) > 0))) 
                           WHERE include(d,ds) AND include(d,sk) AND (daysOn(sk,ds) (+) (1 IF ((quantity(sk,ds) > 0) OR (quantity(sk, ds, dateCur()) > 0))));
                quantity(Sku sk, DepartmentStore ds) <- quantity(sk,ds) (+) signedQuantity(sk, ds, dateCur()) 
                           WHERE include(d,ds) AND include(d,sk) AND signedQuantity(sk, ds, dateCur());    
                dateCur() <- sum(dateCur(), 1);
            }
        
            daysOnStock(Sku sk, DepartmentStore ds, d) <- daysOn(sk,ds);
        }
        
        quantitySold(Sku sk, DepartmentStore ds, d) <- quantitySold(sk, ds, df, dt) IF include(d,ds) AND include(d,sk);
        markupSumSold(Sku sk, DepartmentStore ds, d) <- markupSumSold(sk, ds, df, dt) IF include(d,ds) AND include(d,sk);
        sumSold(Sku sk, DepartmentStore ds, d) <- sumSold(sk, ds, df, dt) IF include(d,ds) AND include(d,sk);
        
        averageQuantitySold(Sku sk, DepartmentStore ds, d) <- quantitySold(sk,ds,d) / daysOnStock(sk,ds,d) IF include(d,ds) AND include(d,sk);
        averageMarkupSumSold(Sku sk, DepartmentStore ds, d) <- markupSumSold(sk,ds,d) / daysOnStock(sk,ds,d) IF include(d,ds) AND include(d,sk);
        averageSumSold(Sku sk, DepartmentStore ds, d) <- sumSold(sk,ds,d) / daysOnStock(sk,ds,d) IF include(d,ds) AND include(d,sk);
        
        IF averageSoldStoreType(d) THEN {
            LOCAL daysOnStock = INTEGER (Sku, StoreType);
            LOCAL quantitySold = NUMERIC[16,5] (Sku, StoreType);
            LOCAL markupSumSold = NUMERIC[18,4] (Sku, StoreType);
            LOCAL sumSold = NUMERIC[18,4] (Sku, StoreType);
            FOR include(d, Sku sk) AND StoreType t IS StoreType AND countNotSold(sk, t, d) DO {
                daysOnStock(sk, t) <- GROUP SUM daysOnStock(sk, DepartmentStore ds, d) IF storeType(ds) == t;
                quantitySold(sk, t) <- GROUP SUM quantitySold(sk, DepartmentStore ds, d) IF storeType(ds) == t;
                markupSumSold(sk, t) <- GROUP SUM markupSumSold(sk, DepartmentStore ds, d) IF storeType(ds) == t;
                sumSold(sk, t) <- GROUP SUM sumSold(sk, DepartmentStore ds, d) IF storeType(ds) == t;
                
                averageQuantitySold(sk, t, d) <- (quantitySold(sk,t) / daysOnStock(sk,t));
                averageMarkupSumSold(sk, t, d) <- (markupSumSold(sk,t) / daysOnStock(sk,t));
                averageSumSold(sk, t, d) <- (sumSold(sk,t) / daysOnStock(sk,t));    
            }
        }
        
        IF averageSoldChainStores(d) THEN {
            LOCAL daysOnStock = INTEGER (Sku, ChainStores);
            LOCAL quantitySold = NUMERIC[16,5] (Sku, ChainStores);
            LOCAL markupSumSold = NUMERIC[18,4] (Sku, ChainStores);
            LOCAL sumSold = NUMERIC[18,4] (Sku, ChainStores);
            FOR include(d, Sku sk)  AND ChainStores c IS ChainStores AND countNotSold(sk, c, d) DO {
                daysOnStock(sk, c) <- GROUP SUM daysOnStock(sk, DepartmentStore ds, d) IF chainStores(ds) == c;
                quantitySold(sk, c) <- GROUP SUM quantitySold(sk, DepartmentStore ds, d) IF chainStores(ds) == c;
                markupSumSold(sk, c) <- GROUP SUM markupSumSold(sk, DepartmentStore ds, d) IF chainStores(ds) == c;
                sumSold(sk, c) <- GROUP SUM sumSold(sk, DepartmentStore ds, d) IF chainStores(ds) == c;
                
                averageQuantitySold(sk, c, d) <- quantitySold(sk,c) / daysOnStock(sk,c);
                averageMarkupSumSold(sk, c, d) <- markupSumSold(sk,c) / daysOnStock(sk,c);
                averageSumSold(sk, c, d) <- sumSold(sk,c) / daysOnStock(sk,c);
            }
        }
        
        FOR iterate(DATE date,df,dt) DO {
            daysOnRange(Sku sk, DepartmentStore ds, d) <- daysOnRange(sk,ds,d) (+) 1 WHERE countRange(sk,ds,date) AND include(d,ds) AND include(d,sk);
        }
               
        lostQuantitySold(Sku sk, DepartmentStore ds, d) <- daysOfAbsence(sk,ds,d) * overAverageQuantitySold(sk,ds,d);
        lostMarkupSumSold(Sku sk, DepartmentStore ds, d) <- daysOfAbsence(sk,ds,d) * overAverageMarkupSumSold(sk,ds,d);
        lostSumSold(Sku sk, DepartmentStore ds, d) <- daysOfAbsence(sk,ds,d) * overAverageSumSold(sk,ds,d);
        
        APPLY;
    }
}

//TABLE RangeDocumentStoreDate(RangeDocument, Store, DATE);
//
////--
//countSku 'Кол-во позиций в ассортименте' = DATA INTEGER (RangeDocument, Store, DATE);     
//calcCountSku (Store st, DATE d) =  GROUP SUM 1 IF countRange(Sku s, st, d);
//
//countAverageSku 'Кол-во позиций с остатком меньше ср.дн. р-ии' = DATA INTEGER (RangeDocument, Store, DATE); 
//averageSold 'Продаж в день' (Sku sku, store) = GROUP SUM averageSold(sku, DepartmentStore stock) BY store(stock);
//calcCountAverageSku (Store st, DATE d)= GROUP          
//        SUM 1 IF countRange(Sku s, st, d) AND NOT
//    (balanceB(s, st, d) >= averageSold(s, st)) AND averageSold(s, st);  
//        
//percAverageSku '% в ассортименте с остатком меньше ср.дн. р-ии' (RangeDocument document, Store store, DATE date)= 
//    NUMERIC[12,4](countAverageSku(document, store, date)) / 
//    (countSku(document, store, date) IF countSku(document, store, date) != 0) *  
//    100.00;       
//        
//countLessSku 'Кол-во позиций без остатка или  с остатком меньше либо равным 0' = DATA INTEGER (RangeDocument, Store, DATE); 
//calcLessAverageSku (Store st, DATE d)= GROUP          
//        SUM 1 IF countRange(Sku s, st, d) AND  NOT (balanceB(s, st, d) >0);   
//percLessSku '% в ассортименте с остатком меньше либо равным 0' (RangeDocument document, Store store, DATE date)= 
//    NUMERIC[12,4](countLessSku(document, store, date)) / 
//    (countSku(document, store, date) IF countSku(document, store, date) != 0) * 
//    100.00;    
//       
//countNotSku 'Кол-во позиций с остатком без ассортимента' = DATA INTEGER (RangeDocument, Store, DATE); 
//calcCountNotSku (Store st, DATE d)= GROUP        
//        SUM 1 IF balanceB(Sku s, st, d) >0 AND NOT countRange(s, st, d);       
//             
//fillSku 'Заполнить данные по ассортименту'(RangeDocument document, Store store, DATE date)  {         
//    countSku(document, store, date) <-  calcCountSku(store, date);  
//    countAverageSku(document, store, date) <-  calcCountAverageSku(store, date);
//    countLessSku(document, store, date) <-  calcLessAverageSku(store, date);
//    countNotSku(document, store, date) <-  calcCountNotSku(store, date);              
//}  
//
//fillSkuFromTo 'Заполнить данные по ассортименту'(RangeDocument document, DATE dateFrom, DATE dateTo)  {       
//    LOCAL dateCur = DATE();               
//      
//    FOR isCompany(Store store) DO {   
//        dateCur() <- dateFrom;
//        WHILE dateCur() <= dateTo DO {      
//            fillSku(document, store, dateCur()); 
//            dateCur() <- sum(dateCur(), 1);
//        }
//    }
//} 
//fillSku 'Заполнить данные по ассортименту' (RangeDocument document)  { fillSkuFromTo(document, fromDate(document), toDate(document)); }
//
//// -- 
// 
////in 'В ассортименте' (Sku s, Range range, Store st, DATE d) = level(range, storeType(st), d) >= level(range, s, d);  
//
//TABLE RangeDocumentRangeStoreDate(RangeDocument, Range, Store, DATE);
//
//countSku 'Кол-во позиций в ассортименте' = DATA INTEGER (RangeDocument, Range, Store, DATE);    
//calcCountSku (Range range, Store store, DATE date) =  GROUP SUM 1 IF in(Sku sku, range, store, date);
//
//countAverageSku 'Кол-во позиций с остатком меньше ср.дн. р-ии' = DATA INTEGER (RangeDocument, Range, Store, DATE); 
//calcCountAverageSku (Range r, Store st, DATE d)= GROUP          
//        SUM 1 IF in(Sku s, r, st, d) AND NOT
//    (balanceB(s, st, d) >= averageSold(s, st)) AND averageSold(s, st);  
//        
//percAverageSku '% в ассортименте с остатком меньше ср.дн. р-ии' (RangeDocument document, Range range, Store store, DATE date)= 
//    NUMERIC[12,4](countAverageSku(document, range, store, date)) / 
//    (countSku(document, range, store, date) IF countSku(document, range, store, date) != 0) *  
//    100.00;       
//        
//countLessSku 'Кол-во позиций без остатка или  с остатком меньше либо равным 0' = DATA INTEGER (RangeDocument, Range, Store, DATE); 
//calcCountLessSku (Range r, Store st, DATE d) = GROUP          
//        SUM 1 IF in(Sku s, r, st, d) AND  NOT (balanceB(s, st, d) >0);   
//percLessSku '% в ассортименте с остатком меньше либо равным 0' (RangeDocument document, Range range, Store store, DATE date)= 
//    NUMERIC[12,4](countLessSku(document, range, store, date)) / 
//    (countSku(document, range, store, date) IF countSku(document, range, store, date) != 0) * 
//    100.00;    
//       
//countNotSku 'Кол-во позиций с остатком без ассортимента' = DATA INTEGER (RangeDocument, Range, Store, DATE); 
//calcCountNotRangeIn (Range r, Store st, DATE d)= GROUP        
//        SUM 1 IF balanceB(Sku s, st, d) >0 AND r IS Range AND NOT in(s, r, st, d);       
//             
//fillSku 'Заполнить данные по ассортименту'(RangeDocument document, Range range, Store store, DATE date)  {         
//    countSku(document, range, store, date) <-  calcCountSku(range, store, date);  
//    countAverageSku(document, range, store, date) <-  calcCountAverageSku(range, store, date);
//    countLessSku(document, range, store, date) <-  calcCountLessSku(range, store, date);
//    countNotSku(document, range, store, date) <-  calcCountNotRangeIn(range, store, date);              
//}  
//
//fillRangeDocumentFromTo 'Заполнить данные по ассортименту'(RangeDocument document, DATE dateFrom, DATE dateTo)  {       
//    LOCAL dateCur = DATE();               
//      
//    FOR isCompany(Store store) AND Range range IS Range DO {   
//        dateCur() <- dateFrom;
//        WHILE dateCur() <= dateTo DO {      
//            fillSku(document, range, store, dateCur());
//            dateCur() <- sum(dateCur(), 1);
//        }
//    }
//}  
// 
//fillSkuRange 'Заполнить данные по ассортименту' (RangeDocument document)  { fillRangeDocumentFromTo(document, fromDate(document), toDate(document)); }
 
FORM rangeBalance 'Исполнение ассортимента'

    OBJECTS r = RangeDocument PANEL
    PROPERTIES (r) nameNumerator, number, series, date, time,
                   note, fromDate, toDate,
                   averageSoldStoreType, averageSoldChainStores
   
    TREE treeStore a=BPSTRING[3], c=ChainStores, t=StoreType, s=Store
    PROPERTIES allStoreInclude(r) DRAW a BACKGROUND backgroundInclude(r), include(r,c) BACKGROUND backgroundInclude(r,c),
               include(r,t) BACKGROUND backgroundInclude(r,t), include(r,s) BACKGROUND backgroundInclude(r,s)
    PROPERTIES READONLY VALUE(a), name(c), name(t), name(s),
                        lostQuantitySold(r) DRAW a, lostQuantitySold(c,r), lostQuantitySold(t,r), lostQuantitySold(s,r),
                        lostMarkupSumSold(r) DRAW a, lostMarkupSumSold(c,r), lostMarkupSumSold(t,r), lostMarkupSumSold(s,r),
                        lostSumSold(r) DRAW a, lostSumSold(c,r), lostSumSold(t,r), lostSumSold(s,r),
                        quantityOnStock(r) DRAW a, quantityOnStock(c,r), quantityOnStock(t,r), quantityOnStock(s,r),
                        quantityOnRange(r) DRAW a, quantityOnRange(c,r), quantityOnRange(t,r), quantityOnRange(s,r),
                        quantityOnStockRangeAll(r) DRAW a, quantityOnStockRangeAll(c,r), quantityOnStockRangeAll(t,r), quantityOnStockRangeAll(s,r),
                        quantityOnStockRange(r) DRAW a, quantityOnStockRange(c,r), quantityOnStockRange(t,r), quantityOnStockRange(s,r)

    FILTERS stringEqualsAll(a),
            in(c,t),
            in(t,s)

//    OBJECTS dts = (d = DATE, ts = Store) GRID
//    PROPERTIES READONLY dataD = VALUE(d)
//    PROPERTIES(ts) SELECTOR name
//    PROPERTIES(ts) READONLY address, nameLegalEntity
//    FILTERS  d >= fromDate(r), d <= toDate(r),
//             countSku(r,ts,d)
//             
//    ORDER dataD, name(ts) 
//
//    FILTERS in(t, st, ts),
//            isCompany(ts)        
// 
//    PROPERTIES(r, ts, d) countSku, countLessSku, percLessSku,
//                    countAverageSku, percAverageSku, 
//                    countNotSku      
//    
    TREE skuTree sg = SkuGroup PARENT parent(sg)
    PROPERTIES include(r,sg) BACKGROUND backgroundInclude(r,sg)
    PROPERTIES READONLY order(sg), skuGroupName = name(sg), lostQuantitySold(sg,r), lostMarkupSumSold(sg,r), lostSumSold(sg,r),
                        quantityOnStock(sg,r), quantityOnRange(sg,r), quantityOnStockRangeAll(sg,r), quantityOnStockRange(sg,r)
    ORDERS order(sg), skuGroupName

    FILTERGROUP inactive FILTER 'Активные' active(sg) 'F6' DEFAULT
    
    OBJECTS d = (ds = DepartmentStore, sk = Sku) GRID
    PROPERTIES READONLY name(ds), idBarcode(sk), name(sk), nameUOM(sk), currentBalance(sk, ds), nameSupplierLastOrderBatch(sk, ds),
                        daysOnStock(sk,ds,r), daysOnRange(sk,ds,r), daysOfAbsence(sk,ds,r),
                        quantitySold(sk,ds,r), markupSumSold(sk,ds,r), sumSold(sk,ds,r),
                        overAverageQuantitySold(sk,ds,r), overAverageMarkupSumSold(sk,ds,r), overAverageSumSold(sk,ds,r),
                        lostQuantitySold(sk,ds,r), lostMarkupSumSold(sk,ds,r), lostSumSold(sk,ds,r)
    PROPERTIES fillSku(r) TOOLBAR DRAW d
    ORDERS name(ds), name(sk)
    FILTERS in(c,t,s,ds), isParent(sg,sk)
    FILTERS daysOnStock(sk,ds,r) OR daysOnRange(sk,ds,r)
//    
//    OBJECTS s = Sku
//    PROPERTIES(s) READONLY idBarcode, name, nameUOM
//    PROPERTIES READONLY balanceB(s, ts, d), averageSold(s, ts)
//    
//    FILTERGROUP rangeSku 
//        FILTER 'Позиции в ассортименте' countRange(s, ts, d) 'F11'  
//        FILTER 'Позиции с остатком <= 0' countRange(s, ts, d) AND  NOT (balanceB(s, ts, d) >0) 'F9' 
//        FILTER 'Позиции с остатком < ср.дн. р-ии' countRange(s, ts, d) AND NOT (balanceB(s, ts, d) >= averageSold(s, ts)) AND averageSold(s, ts) 'F10'               
//        FILTER 'Позиции с остатком без ассортимента' balanceB(s, ts, d) >0 AND NOT countRange(s, ts, d) 'F8' 
//    FILTERS isParent(sg,s)
//    
// 
//    PROPERTIES(r) fillSkuRange     
//    
//    OBJECTS ddtst = (dd = DATE, tst = Store, rn = Range) GRID
//    PROPERTIES READONLY dataDe = VALUE(dd)
//    PROPERTIES(tst) SELECTOR name
//    PROPERTIES(tst) READONLY address, nameLegalEntity
//    PROPERTIES(rn) SELECTOR name
//    FILTERS  dd >= fromDate(r), dd <= toDate(r),
//             countSku(r,rn,tst,dd)
//    FILTERS inParent(rn, sg) OR NOT countSkuGroup(rn)         
//    ORDERS dataDe, name(tst), name(rn)  
//
//    FILTERS in(t, st, tst),
//            isCompany(tst)
//
//    PROPERTIES(r, rn, ts, d) countSku, countLessSku, percLessSku,
//                    countAverageSku, percAverageSku, 
//                    countNotSku       
//                    
//    OBJECTS ss = Sku
//    PROPERTIES(ss) READONLY idBarcode, name, nameUOM
//    PROPERTIES READONLY balanceB(ss, tst, d), averageSold(ss, tst)
//    
//    FILTERGROUP rangeSku1 
//        FILTER 'Позиции в ассортименте' in(ss, rn, tst, dd) 'F11'  
//        FILTER 'Позиции с остатком <= 0' in(ss, rn, tst, dd) AND  NOT (balanceB(ss, tst, dd) >0) 'F9' 
//        FILTER 'Позиции с остатком < ср.дн. р-ии' in(ss, rn, tst, dd) AND NOT (balanceB(ss, tst, dd) >= averageSold(ss, tst)) AND averageSold(ss, tst) 'F10'               
//        FILTER 'Позиции с остатком без ассортимента' balanceB(ss, tst, dd) >0 AND NOT in(ss, rn, tst, dd) 'F8'
//    FILTERS isParent(sg,ss)                    

    EDIT RangeDocument OBJECT r       
;

DESIGN rangeBalance {
    size = (1024, 768);
    MOVE BOX(r) {
        horizontal = FALSE;
        NEW top1 {
            horizontal = TRUE;
            MOVE GROUP(numbered,r); 
            NEW date {
                caption = 'Период';
                horizontal = TRUE;
                MOVE PROPERTY (fromDate(r));
                MOVE PROPERTY (toDate(r));
            }
        }
        NEW top2 {
            horizontal = TRUE;
            MOVE GROUP(documentHeader,r);                   
            MOVE GROUP(documentPrm,r);
        }       
    };
    NEW pane {
        fill = 1;
        horizontal = TRUE;
        NEW leftPane {
            fill = 1;
            MOVE BOX(TREE treeStore){caption='Магазины';}
            MOVE BOX(TREE skuTree){caption='Группы товаров';}
        }
        NEW rightPane{
            tabbed = TRUE;
            fill = 2;
            MOVE BOX(d) {
                GRID(d) {
                    headerHeight = 60;
                }
            }
//            NEW rightPane1 {
//                caption = 'Магазин';
//                fill = 1;   
//                NEW rightPane11{
//                    MOVE PROPERTY(fillSku(r));    
//                };               
//                NEW rightPane12{
//                    fill = 1;
//                    MOVE BOX(dts);                     
//                    MOVE BOX(s);
//                }    
//            } 
//            NEW rightPane2 {
//                caption = 'Магазин / ассортимент';
//                fill = 1;   
//                NEW rightPane21{
//                    MOVE PROPERTY(fillSkuRange(r));    
//                };               
//                NEW rightPane22{
//                    fill = 1;
//                    MOVE BOX(ddtst);                     
//                    MOVE BOX(ss);
//                }    
//            }            
        }    
    }
    MOVE TOOLBARBOX;
}   
          
FORM rangeBalances 'Исполнения ассортимента'
    OBJECTS r = RangeDocument
    PROPERTIES (r) READONLY number, series, date, time, fromDate, toDate,
                            nameIncludeStores, nameIncludeSkuGroups, note 
    PROPERTIES (r) NEWSESSION NEW, EDIT, deleter=DELETE   
                        
    LIST RangeDocument OBJECT r          
;
              
NAVIGATOR {
    retailRangeNavigator {
        NEW rangeBalances;
    }
}
