MODULE RangeLevel;

REQUIRE Range, ItemDescription;

NAMESPACE Range;

depth 'Глубина матрицы' = DATA INTEGER (Range);
EXTEND FORM range
    PROPERTIES (r) depth BEFORE daysToRevision(r)
;
EXTEND FORM ranges
    PROPERTIES (r)  READONLY depth
;

CLASS RangeLevel 'Уровень ассортимента';
TABLE rangeLevel(RangeLevel);
name 'Название' = DATA ISTRING[10] (RangeLevel) CHARWIDTH 3 NOFLEX IN id;
rangeLevel (name) = GROUP AGGR (RangeLevel level) BY name (level);
 
prevLevel (RangeLevel level) = PARTITION PREV level IF level IS RangeLevel ORDER level ;
namePrevLevel 'Пред. уровень' (RangeLevel level) = name(prevLevel(level));

nextLevel (RangeLevel level) = PARTITION PREV level  IF level IS RangeLevel ORDER DESC level;
nameNextLevel 'След. уровень.' (RangeLevel level) = name(nextLevel(level));

FORM rangeLevel 'Уровень ассортимента'
    OBJECTS l = RangeLevel PANEL
    PROPERTIES(l) name

    EDIT RangeLevel OBJECT l
;

FORM rangeLevels 'Уровни ассортимента'
    OBJECTS l = RangeLevel
    PROPERTIES(l) READONLY name
    PROPERTIES(l) NEWSESSION NEW, EDIT, DELETE 
;

DESIGN rangeLevels{
    PROPERTY (name(l)){flex = 1;}
}

FORM dialogRangeLevels 'Уровни ассортимента'
    OBJECTS l = RangeLevel
    PROPERTIES(l) READONLY name
    
    LIST RangeLevel OBJECT l
;

DESIGN dialogRangeLevels{
    PROPERTY (name(l)){flex = 1;}
}

NAVIGATOR {

    retailRangeNavigator {
        NEW rangeLevels;
    }

}

TABLE rangeRangeLevel(Range, RangeLevel);
in 'Вкл' = DATA BOOLEAN (Range, RangeLevel);
depth 'Глубина матрицы' = DATA INTEGER (Range, RangeLevel);
depth 'Глубина матрицы' (RangeRev v, RangeLevel l)= depth(range(v),l);

EXTEND FORM range 
    OBJECTS l = RangeLevel
    PROPERTIES(l) READONLY name
    PROPERTIES(r, l) in, depth
;

DESIGN range {
    options {
        type = SPLITH;
        MOVE BOX(l);
        MOVE BOX(TREE skuTree) {
            fill = 4;
        }
    }
}

TABLE rangeRevSku(RangeRev, Sku);
level = DATA RangeLevel(RangeRev, Sku);
nameLevel 'Уровень' (RangeRev r, Sku s)= name(level(r, s));

level(Range r, Sku s, DATE d) = level(rangeRev(r, d), s);
nameLevel 'Уровень' (Range r, Sku s, DATE d) = name(level(r, s, d));

in 'Вкл' = in(range(RangeRev v), RangeLevel l);

CONSTRAINT level(RangeRev r, Sku s) AND NOT in(r, level(r, s))
    CHECKED BY level[RangeRev,Sku] 
    MESSAGE 'Уровень ассортимента для товара не соответствует допустимым уровням ассортимента';
    
countSku 'Кол-во товаров' (RangeRev r) = GROUP SUM 1 IF level(r, Sku s);   

notCheckDepthRange 'Не проверять глубину матрицы при изменении значения глубины' = DATA BOOLEAN ();
notCheckDepth 'Не проверять глубину матрицы' = DATA BOOLEAN ();
notCheckDepthLoc 'Не проверять глубину матрицы' = DATA LOCAL BOOLEAN ();
useCountRecSku 'Использовать накопительное кол-во товаров при проверке глубины матрицы' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES () notCheckDepthRange, notCheckDepth, useCountRecSku
;
DESIGN options {
    range {
        MOVE PROPERTY (notCheckDepthRange());
        MOVE PROPERTY (notCheckDepth());
        MOVE PROPERTY (useCountRecSku());
    }
}  

CONSTRAINT CHANGED(countSku(RangeRev v)) AND depth(range(v)) < countSku(v) AND NOT (notCheckDepth() OR notCheckDepthLoc())
    MESSAGE 'Превышено максимально количество товаров по матрице';
//CONSTRAINT CHANGED(countSku(RangeRev v)) AND depth(range(v)) < countSku(v) AND NOT (PREV(countSku(v)) >= countSku(v) )
//    MESSAGE 'Превышено максимально количество товаров по матрице';  

    
CONSTRAINT CHANGED(depth(range(RangeRev v))) AND rangeRev(range(v), currentDate()) == v AND  depth(range(v)) < countSku(v) AND NOT (notCheckDepthRange() OR notCheckDepthLoc())
    MESSAGE 'Превышено максимально количество товаров по матрице для действующей версии';

overOrder = ABSTRACT NUMERIC[5,1] (RangeLevel);
sortOrder 'Порядок' (RangeLevel l) = OVERRIDE overOrder(l), NUMERIC[16,0](l AS RangeLevel) MATERIALIZED;

countSku 'Кол-во товаров' = GROUP SUM 1 BY RangeRev r, level(r, Sku s);

countRecSku 'Кол-во товаров' (RangeRev r, RangeLevel level) = GROUP SUM countSku(r, RangeLevel l) IF sortOrder(l) <= sortOrder(level);

countSku 'Кол-во товаров' (Range r, DATE d) = countSku(rangeRev(r, d));
countSku 'Кол-во товаров' (Range r, RangeLevel l, DATE d)= countSku(rangeRev(r, d), l);
countRecSku 'Кол-во товаров' (Range r, RangeLevel l, DATE d)= countRecSku(rangeRev(r, d), l);

countSkus 'Кол-во наименований' = GROUP SUM 1 BY RangeRev v, level(v,Sku sku);

CONSTRAINT (CHANGED(countSku(RangeRev v, RangeLevel l)) OR CHANGED(countRecSku(v,l))) AND depth(range(v), l) < (OVERRIDE countRecSku(v,l) IF useCountRecSku(), countSku(v,l)) AND NOT (notCheckDepth() OR notCheckDepthLoc())
    MESSAGE 'Превышено максимально количество товаров по матрице для уровня';
//CONSTRAINT CHANGED(countSku(RangeRev v, RangeLevel l)) AND depth(range(v), l) < countSku(v,l) AND NOT (PREV(countSku(v,l)) >= countSku(v,l) )
//    MESSAGE 'Превышено максимально количество товаров по матрице для уровня';

CONSTRAINT CHANGED(depth(range(RangeRev v), RangeLevel l)) AND rangeRev(range(v), currentDate()) == v AND  depth(range(v), l) < (OVERRIDE countRecSku(v,l) IF useCountRecSku(), countSku(v,l)) AND NOT (notCheckDepthRange() OR notCheckDepthLoc())
    MESSAGE 'Превышено максимально количество товаров по матрице для действующей версии';

countSkus 'Кол-во наименований (всего)' (RangeRev v, supplier, LedgerPriceListType pt, Stock d) = GROUP SUM 1 IF level(v, Sku sku)
    BY companyA(pt, sku, d, dateTime(v));
    
countSkus 'Кол-во наименований' (RangeRev v,l,supplier,LedgerPriceListType pt,Stock d) = GROUP SUM 1
    BY level(v, Sku sku), companyA(pt, sku, d, dateTime(v));
countRecSkus 'Кол-во наименований' (RangeRev v, RangeLevel l,LegalEntity supplier,LedgerPriceListType pt,Stock d) = GROUP SUM 1
    IF sortOrder(level(v, Sku sku)) <= sortOrder(l) AND companyA(pt, sku, d, dateTime(v)) == supplier AND in(v,l);
    
TABLE rangeRevRangeLevelSku (RangeRev, RangeLevel, Sku);

nameQuantity (RangeLevel rl) = CONCAT ' / ', '('+name(rl)+')', 'к-во на полке'; 

changedLevel (RangeRev v, Sku s) = (level(v, s) OR level(prevRangeRev(v), s)) AND NOT level(v, s) == level(prevRangeRev(v), s);
backgroundLevel (RangeRev v, Sku s) = IF changedLevel(v, s) THEN RGB(192,192,255) ELSE RGB(232,232,255);

EXTEND FORM rangeRev
    OBJECTS rl = RangeLevel AFTER dates  
    FILTERS in(v, rl)     
                               
    PROPERTIES(v, s) nameLevel AFTER markupA(pt, s, d, v) BACKGROUND backgroundLevel(v, s)
    PROPERTIES (v) READONLY dateTimePrevRangeRev
    
    FILTERGROUP filters
        FILTER 'Включен' level(v, s) DEFAULT
        FILTER 'Без поставщиков' level(v, s) AND NOT priceA(pt, s, d, dateTime(v))  
        FILTER 'Новинка' [GROUP SUM 1 IF (date(UserPriceListDetail pd) >= DATE df) AND price(pd, pt) BY sku(pd), df](s, dFrom) AND NOT level(prevRangeRev(v), s)
        FILTER 'Изменившиеся' changedLevel(v, s)
        
    OBJECTS l = RangeLevel AFTER store
    PROPERTIES READONLY name(l), depth(v,l), countSkus(v,l)  
    FILTERS in(v, l)  
   
    OBJECTS l2 = RangeLevel GRID AFTER store
    FILTERS in(v, l2)  
    
    OBJECTS su = LegalEntity
    PROPERTIES READONLY name(su), countSkus(v, su, pt, d),
                        countSkus(v, l2, su, pt, d) COLUMNS (l2) HEADER name(l2) SHOWIF NOT useCountRecSku(),
                        countRecSkus(v, l2, su, pt, d) COLUMNS (l2) HEADER name(l2) SHOWIF useCountRecSku()
    ORDERS name(su)
    FILTERS countSkus(v, su, pt, d)      
;
overCopy(RangeRev r, RangeRev pr) + { 
    level(r, Sku s) <- level(pr, s);
}

DESIGN rangeRev {
    GROUP (,v) {
        columns = 1;    
        type = CONTAINERV;
    }
}

EXTEND FORM range
    OBJECTS vl = RangeLevel GRID BEFORE v
    FILTERS in(r, vl)
    
    PROPERTIES READONLY countSku(v) AFTER dateTime(v),
                        countSku(v, vl) COLUMNS (vl) HEADER name(vl) SHOWIF NOT useCountRecSku(),
                        countRecSku(v, vl) COLUMNS (vl) HEADER name(vl) SHOWIF useCountRecSku()
;

countSkuNotSupplier 'Кол-во товаров без поставщика' (DataPriceListType pt, DepartmentStore d, RangeRev v) = GROUP 
        SUM 1 IF level(v, Sku sku) AND pt IS DataPriceListType AND d IS DepartmentStore 
    AND NOT priceA(pt, sku, d, currentDateTime()); 
calcCountSkuNotSupplier 'Кол-во товаров без поставщика' (DataPriceListType pt, DepartmentStore d, Range r, DATE dt) = countSkuNotSupplier(pt, d , rangeRev(r, dt));

countSkuNotSupplier 'Кол-во товаров без поставщика' = DATA LOCAL INTEGER (DataPriceListType, DepartmentStore, Range, DATE);

fillCountSkuNotSupplier 'Обновить'(DataPriceListType pt, DepartmentStore d, DATE dt)  { 
    countSkuNotSupplier(pt, d, Range r, dt) <- calcCountSkuNotSupplier(pt, d, r, dt) WHERE r IS Range;   
}
EXTEND FORM ranges
    OBJECTS vl = RangeLevel GRID BEFORE r

    PROPERTIES READONLY countSku(r, d)
    PROPERTIES READONLY countSku(r, vl, d) DRAW r COLUMNS (vl) HEADER name(vl) SHOWIF NOT useCountRecSku(),
                        countRecSku(r, vl, d) DRAW r COLUMNS (vl) HEADER name(vl) SHOWIF useCountRecSku()
    
    PROPERTIES READONLY countSkuNotSupplier(pt,ds,r1,d)
    PROPERTIES fillCountSkuNotSupplier(pt, ds, d) DRAW r1 TOOLBAR BEFORE createRangeRev(r1,d) 
    
    FILTERGROUP notSupplier
        FILTER 'Без поставщиков' countSkuNotSupplier(pt, ds, r1, d) DEFAULT 
;
TABLE rangeStoreTypeDate(Range, StoreType, DATE);
excludeLevel = DATA BOOLEAN (Range, StoreType, DATE);
dataLevel = DATA RangeLevel (Range, StoreType, DATE);
dateTime 'Дата/время' = DATA DATETIME (Range, StoreType, DATE);
user = DATA User (Range, StoreType, DATE);
nameUser 'Пользователь' (Range r, StoreType s, DATE d) = name(user(r, s, d));
hasLevel (Range r, StoreType s, DATE d) = dataLevel(r, s, d) OR excludeLevel(r, s, d) MATERIALIZED;

CONSTRAINT dataLevel(Range r, StoreType t, DATE d) AND NOT in(r, dataLevel(r, t, d))
    CHECKED BY dataLevel[Range,StoreType,DATE]
    MESSAGE 'Уровень ассортимента для формата магазина не соответствует допустимым уровням ассортимента';

level (Range range, StoreType storeType, DATE date) = GROUP
                                              LAST dataLevel(range, storeType, DATE dateIn)
                                              ORDER dateIn
                                              WHERE hasLevel(range, storeType, dateIn) AND dateIn <= (date AS DATE) COMPLEX; 

date (Range range, StoreType storeType, DATE date) = GROUP
                                              LAST DATE dateIn
                                              ORDER dateIn
                                              WHERE dataLevel(range, storeType, dateIn) AND dateIn <= (date AS DATE); 
                                              
nameLevel 'Уровень' (Range r, StoreType t, DATE d)= name(level(r, t, d)); 

changeLevel (Range r, StoreType t, DATE d) { 
    DIALOG dialogRangeLevels OBJECTS l = dataLevel(r, t, d) CHANGE LIST name(l) DO {
        excludeLevel (r, t, d) <- NOT l;
        dateTime(r, t, d) <- currentDateTime();
        user(r, t, d) <- currentUser();
    }
}
changeWYSLevel (Range r, StoreType t, DATE d) { 
    INPUT s = ISTRING[10] DO 
        IF s THEN {
            dataLevel (r, t, d) <- [ GROUP MAX RangeLevel l BY name(l)](s);
            excludeLevel (r, t, d) <- NULL;
        } ELSE {
            dataLevel (r, t, d) <- NULL;
            excludeLevel (r, t, d) <- TRUE;
        }
}    

backgroundLevel(Range range, StoreType storeType, DATE dateIn) = (dataLevel(range, storeType, dateIn) OR excludeLevel(range, storeType, dateIn));

countSku 'Кол-во товаров' (Range r, StoreType t, DATE d) = countRecSku(rangeRev(r, d), level(r, t, d));       

TABLE rangeStoreDate(Range, Store, DATE);
dataLevel = DATA RangeLevel (Range, Store, DATE);
excludeLevel = DATA BOOLEAN (Range, Store, DATE);
hasLevel (Range r, Store s, DATE d) = dataLevel(r, s, d) OR excludeLevel(r, s, d) MATERIALIZED;

dateTime 'Дата/время' = DATA DATETIME (Range, Store, DATE);
dateTime(Range r, Store s, DATE d) <- currentDateTime() WHEN SET(hasLevel(r, s, d));

user = DATA User (Range, Store, DATE);
nameUser 'Пользователь' (Range r, Store s, DATE d) = name(user(r, s, d));
user(Range r, Store s, DATE d) <- currentUser() WHEN SET(hasLevel(r, s, d));
   
CONSTRAINT dataLevel(Range r, Store st, DATE d) AND NOT in(r, dataLevel(r, st, d))
    CHECKED BY dataLevel[Range,Store,DATE]
    MESSAGE 'Уровень ассортимента для магазина не соответствует допустимым уровням ассортимента';

level (Range range, Store st, DATE date) = GROUP
                                              LAST dataLevel(range, st, DATE dateIn)
                                              ORDER dateIn
                                              WHERE hasLevel(range, st, dateIn) AND dateIn <= (date AS DATE) COMPLEX; 

date (Range range, Store st, DATE date) = GROUP
                                              LAST DATE dateIn
                                              ORDER dateIn
                                              WHERE dataLevel(range, st, dateIn) AND dateIn <= (date AS DATE); 

changeLevel (Range r, Store st, DATE d) { 
    DIALOG dialogRangeLevels OBJECTS l = dataLevel(r, st, d) CHANGE LIST name(l) DO {
        excludeLevel (r, st, d) <- NOT l;
    }
}              

changeWYSLevel (Range r, Store st, DATE d) { 
    INPUT s = ISTRING[10] DO 
        IF s THEN {
            dataLevel (r, st, d) <- [ GROUP MAX RangeLevel l BY name(l)](s);
            excludeLevel (r, st, d) <- NULL;
        } ELSE {
            dataLevel (r, st, d) <- NULL;
            excludeLevel (r, st, d) <- TRUE;
        }
}              
backgroundLevel(Range range, Store store, DATE dateIn) = (dataLevel(range, store, dateIn) OR excludeLevel(range, store, dateIn));

countRange 'В ассортименте' (Sku s, StoreType t, DATE d) = GROUP SUM 1 IF level(Range range, t, d) >= level(range, s, d);

overLevel(Range r, Store st, DATE d) = OVERRIDE level(r, st, d), level(r, storeType(st), d);  
overDate 'Дата включения' (Range r, Store st, DATE d) = OVERRIDE date(r, st, d), date(r, storeType(st), d);  
nameOverLevel 'Уровень (перегруженный)' (Range r, Store st, DATE d)= name(overLevel(r, st, d));               
nameLevel 'Уровень' (Range r, Store st, DATE d)= name(level(r, st, d));
overUser (Range r, Store st, DATE d) = OVERRIDE user(r, st, d), user(r, storeType(st), d);
nameOverUser 'Пользователь' (Range r, Store st, DATE d) = name(overUser(r, st, d));
overDateTime 'Дата/время' (Range r, Store st, DATE d) = OVERRIDE dateTime(r, st, d), dateTime(r, storeType(st), d);

countSku 'Кол-во товаров' (Range r, Store st, DATE d) = countRecSku(rangeRev(r, d), overLevel(r, st, d));

countRange 'В ассортименте' (Sku s, Range r, Store st, DATE d) =  overLevel(r, st, d) >= level(r, s, d);

skipRange = ABSTRACT BOOLEAN (Sku, Store);

in (Sku s, Range r, Store st, DATE d) += overLevel(r, st, d) >= level(r, s, d) AND NOT skipRange(s,st);

countRange (Store st, Sku sk, DATE d) = GROUP SUM 1 IF level(Range r, st, d) >= level(r, sk, d);
countTypeRange (Store st, Sku sk, DATE d) = GROUP SUM 1 IF level(Range r, storeType(st), d) >= level(r, sk, d);

statusRange 'Вид ассортимента' (Store st, Sku s, DATE d) = CASE WHEN countRange(st, s, d) THEN 'Магазин'
    WHEN countTypeRange(st, s, d) THEN 'Формат';
    

oneLevel 'Один уровень ассортиментной матрицы' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES () oneLevel
;
DESIGN options {
    range{
        MOVE PROPERTY (oneLevel());
    }
}
    
addCommaStoreId 'Список магазинов (код)' = DATA LOCAL ISTRING[4000]() CHARWIDTH 30 NOFLEX;
addCommaRangeLevel = DATA LOCAL RangeLevel(Range);//123
nameAddCommaRangeLevel 'Уровень' (Range r) = name(addCommaRangeLevel(r));

CONSTRAINT addCommaRangeLevel(Range range) AND NOT in(range, addCommaRangeLevel(range))
    CHECKED BY addCommaRangeLevel[Range]
    MESSAGE 'Уровень ассортимента для группового задания не соответствует допустимым уровням ассортимента';

addCommaStoreId 'Заполнить' (Range r, DATE dt)  { 
    IF addCommaStoreId() THEN { 
        IF oneLevel() THEN {
            dataLevel (r, Store st, dt) <-  (GROUP MIN RangeLevel l IF l IS RangeLevel) WHERE isWordInCSV(id(st), replace(addCommaStoreId(),' ',','));
            addCommaStoreId() <- NULL; 
        } ELSE {
            IF NOT nameAddCommaRangeLevel(r) THEN {
                MESSAGE 'Не выбран уровень';                
            } ELSE {
                dataLevel (r, Store st, dt) <-  addCommaRangeLevel(r) WHERE isWordInCSV(id(st), replace(addCommaStoreId(),' ',','));
                addCommaStoreId() <- NULL;        
            }                
        }   
    } ELSE {
        MESSAGE 'Не задан список магазинов';
    }
}
deleteCommaStoreId 'Сбросить' (Range r, DATE dt)  { 
    IF addCommaStoreId() THEN { 
        excludeLevel (r, Store st, dt) <-  TRUE WHERE isWordInCSV(id(st), replace(addCommaStoreId(),' ',','));
        addCommaStoreId() <- NULL;        
    } ELSE {
        MESSAGE 'Не задан список магазинов';
    }
}   
 
EXTEND FORM range
    OBJECTS td = DATE PANEL 
    PROPERTIES valTd = VALUE(td)
    PROPERTIES addCommaStoreId(), nameAddCommaRangeLevel(r) SHOWIF (NOT oneLevel()), addCommaStoreId(r,td), deleteCommaStoreId(r,td)
    OBJECTS ss = Store
    PROPERTIES (ss) READONLY id, name
    PROPERTIES overDate(r, ss, td), nameOverLevel(r, ss, td) BACKGROUND backgroundLevel(r, ss, td) ON CHANGE changeLevel(r, ss, td) ON CHANGEWYS changeWYSLevel(r, ss, td)   
//    PROPERTIES (r, ss, td) dataLevel, excludeLevel
;    
DESIGN range{
    tabs {
        NEW storeRange {
            caption = 'Ассортимент магазинов';
            fill = 1;
            NEW topR {
                type = CONTAINERH;
                
                MOVE BOX(td);
                NEW filterR {
                    type = CONTAINERH; 
                    caption = 'Привязка к магазину';  
                    MOVE PROPERTY (addCommaStoreId());
                    MOVE PROPERTY (nameAddCommaRangeLevel(r));
                    MOVE PROPERTY (addCommaStoreId(r,td));
                    MOVE PROPERTY (deleteCommaStoreId(r,td));
                }
            };
            MOVE BOX(ss);
        }
    }
}
    
EXTEND FORM storeRange 
    OBJECTS c = ChainStores PANEL AFTER d
    PROPERTIES(c) SELECTOR name


    // По форматам
    OBJECTS t = StoreType GRID
    FILTERS chainStores(t) == c, active(t)

    OBJECTS r = Range
    PROPERTIES(r) READONLY name
    PROPERTIES(r, t, d) nameLevel COLUMNS (t) HEADER name(t) BACKGROUND backgroundLevel(r, t, d) ON CHANGE changeLevel(r, t, d) ON CHANGEWYS changeWYSLevel(r, t, d),
                        countSku COLUMNS(t) HEADER name(t)
    FILTERS inParent(r, sg) OR NOT countSkuGroup(r)
    FILTERGROUP activeRange FILTER 'Активные' NOT inactive(r) DEFAULT
    ORDERS name(r)

    OBJECTS s = Sku GRID 
    PROPERTIES(s) READONLY BACKGROUND backgroundRange(s) idBarcode, name, nameUOM
    PROPERTIES(s, t, d) READONLY countRange COLUMNS (t) HEADER name(t)
    FILTERS level(r, s, d)

    // По магазинам

    PROPERTIES nameOverLevel(sr, st, d) BACKGROUND backgroundLevel(sr, st, d) ON CHANGE changeLevel(sr, st, d) ON CHANGEWYS changeWYSLevel(sr, st, d) COLUMNS (st) HEADER name(st) + ' (уровень)'
    PROPERTIES countSku(sr, st, d) COLUMNS (st) HEADER name(st) + ' (кол-во позиций)'
    ORDERS name(sr)
    FILTERS inParent(sr, sg) OR NOT countSkuGroup(sr)

    PROPERTIES READONLY nameLevel(sr, ss, d)
    ORDERS nameLevel(sr, ss, d), name(ss)
    FILTERS level(sr, ss, d)

    // -------------- Ассортимент магазина ------------------ //

    PROPERTIES statusRange(ds, sk, d) BACKGROUND backgroundStoreRange(sk, depStore)

    PROPERTIES READONLY AFTER name(rn) nameLevel(rn, sk, d), overDate(rn, st, d)
    FILTERS countRange (sk, rn, ds, d)
;

DESIGN storeRange {
    filters{        
        MOVE BOX(c);
    }
    setPane {
        fill = 2;
        type = TABBED;
        NEW formatPane {
            fill = 1;
            type = SPLITV;
            caption = 'По форматам';
            MOVE BOX(r) {
                fill = 2;
                PROPERTY(countSku(r, t, d)) {
                }
                    background = #FFEEFF;
            }
            MOVE BOX(s);
        }
        MOVE storePane; 
        
    }                 
    MOVE TOOLBARBOX;
}


countFilterRange  = GROUP SUM 1 IF (currentBalance(Sku sku,DepartmentStore stock) OR dateTimeLastMoved(sku, stock) > DATETIME(DATE dateFrom AS DATE)) AND active(store(stock))
    BY sku, store(stock), dateFrom;

    
countFilter 'Кол-во магазинов' (Range range, Sku sku, DATE dateFrom) = GROUP
    SUM 1 IF countFilterRange(sku, Store store, dateFrom) 
    AND inChild(range, sku);

count 'Количество товара' = DATA LOCAL INTEGER (RangeLevel);
countRangeLevels (Range r) = GROUP SUM  count(RangeLevel l) IF in(r,l);

indexGroup 'Порядок' (RangeRev v, Sku sku, DATE dateFrom, LedgerPriceListType pt, Stock stock) =
    PARTITION SUM 1 IF countFilter(range(v), sku, dateFrom) AND companyA(pt, sku, stock, dateTime(v))
    ORDER DESC countFilter(range(v), sku, dateFrom), sku
    BY v, dateFrom, pt, stock;

countFilter 'Кол-во магазинов' (RangeRev v, Sku sku, DATE dateFrom) = countFilter(range(v), sku, dateFrom);

total 'Накоплено' (Range range, RangeLevel level) =
    PARTITION SUM count(level) IF in(range,level)
    ORDER  level
    BY range;
total 'Накоплено' = total(range(RangeRev v), RangeLevel level);      
    
level (Sku sku, RangeRev v, DATE dateFrom, LedgerPriceListType pt, Stock stock) = 
    GROUP
          MIN RangeLevel level IF indexGroup(v, sku, dateFrom, pt, stock) <= total(range(v), level);

indexGroupSale 'Порядок' (RangeRev v, Sku sku, DATE dateFrom, DATE dateTo) =
    PARTITION SUM 1
    ORDER DESC (OVERRIDE sumSoldDepartments(sku, dateFrom, dateTo), 0) IF level(v, sku), sku
    BY v, dateFrom, dateTo; 

totalSkus 'Накоплено' (RangeRev v, RangeLevel level) =
    PARTITION SUM countSkus(v, level) 
    ORDER  level
    BY v;
    
levelFact (Sku sku, RangeRev v, DATE dateFrom, DATE dateTo) = 
    GROUP
          MIN RangeLevel level IF indexGroupSale(v, sku, dateFrom, dateTo) <= totalSkus(v, level);

levelFact (Sku sk) = DATA LOCAL RangeLevel (Sku); 

fill 'Заполнить' (RangeRev r, DATE df, DATE dt)  {
    levelFact(Sku s) <- levelFact(s, r, df, dt) WHERE level(r, s);
};
          
nameLevelFact 'Уровень фактический за период' (Sku sku) = name(levelFact(sku));

EXTEND FORM rangeRev PROPERTIES READONLY nameLevelFact(s) AFTER nameLevel(v, s) BACKGROUND RGB(255,224,224) IF levelFact(s) != level(v, s) ON CONTEXTMENU fill(v, dFrom, dTo);

countFilter 'Кол-во с продажей или остатком' (Range range, Store store, DATE dateFrom) = GROUP
        SUM 1 IF countFilterRange(Sku sku, store, dateFrom) 
    AND inChild(range, sku);

countFilter 'Кол-во с продажей или остатком' (RangeRev v, Store store, DATE dateFrom) = countFilter(range(v), store, dateFrom);

currentBalance 'Остаток (ассортимент)' (Range range, store) = GROUP SUM currentBalance(Sku sku,DepartmentStore stock) IF inChild(range, sku)
        BY store(stock);

currentBalance 'Остаток (ассортимент)' (RangeRev v, Store store) = currentBalance(range(v),store);

nameLevel 'Уровень' (RangeRev v, StoreType t)= nameLevel(range(v), t, date(v));
nameLevel 'Уровень' (RangeRev v, Store s) = nameLevel(range(v), s, date(v));

countSku 'Кол-во наименований' (RangeRev v,StoreType t) = countSku(range(v), t, date(v));

EXTEND FORM rangeRev
    PROPERTIES READONLY countFilter(v, s, dFrom)
    
    OBJECTS t = StoreType GRID
    PROPERTIES READONLY name(t)
    PROPERTIES(v, t) nameLevel, countSku
    FILTERGROUP activeStoreType
        FILTER 'Активные' active(t) DEFAULT 
    
    OBJECTS st = Store GRID
    PROPERTIES READONLY name(st), nameLevel(v, st), countFilter(v, st, dFrom), currentBalance(v, st)
    FILTERS active(st)
    
    PROPERTIES READONLY nameLevel(v, store) AFTER name(store)
    
    FILTERGROUP type
        FILTER 'По форматам' storeType(st) == t DEFAULT 
;
DESIGN rangeRev {
    rev {
        REMOVE BOX(rl);
    
        top2 {
            MOVE BOX(l) BEFORE BOX(store){ 
                caption = 'Итого по уровням';
                fill = 1;
                REMOVE TOOLBARBOX(l);
            }   
        }                   
        header {
            type = TABBED;
            NEW summary {
                caption = 'Итоги';
                fill = 1;
                type = TABBED;
                NEW store1 {
                    type = SPLITH; 
                caption = 'По магазинам'; 
                    fill = 1;
                    MOVE BOX(t);
                    MOVE BOX(st);            
                }               
                NEW supplier1 {
                    fill = 1;
                    caption = 'По поставщикам';
                    MOVE BOX(su);
                    REMOVE BOX(l2);
                }
            }            
        }
    }
    MOVE TOOLBARBOX;
}

META defineRangeRevSummaryType (nameType, captionTab)
    countSkus 'Кол-во наименований (всего)' (RangeRev v, ###nameType nameType) =
        GROUP SUM 1 IF level(v, Sku sk) BY nameType(sk);
        
    countSkus 'Кол-во наименований (всего)' (RangeRev v, RangeLevel l, ###nameType nameType) = 
        GROUP SUM 1 IF level(v, Sku sk) BY level(v, sk), nameType(sk);   
        
    EXTEND FORM rangeRev
        OBJECTS nameType##Level = RangeLevel GRID AFTER store
        FILTERS in(v, nameType##Level)  
        
        OBJECTS nameType = ###nameType
        PROPERTIES READONLY name(nameType), countSkus(v, nameType), countSkus(v, nameType##Level, nameType) COLUMNS (nameType##Level) HEADER name(nameType##Level)
        FILTERS countSkus(v, nameType)
    ;
    
    DESIGN rangeRev {
        summary {
            NEW nameType {
                caption = captionTab;
                MOVE BOX (nameType);
            }
        }
    }
END

@defineRangeRevSummaryType (priceSegment, 'По ценовым сегментам');

@defineRangeRevSummaryType (brand, 'По брендам');

@defineRangeRevSummaryType (packType, 'По упаковкам');

@defineRangeRevSummaryType (pack, 'По фасовкам');

FORM param 'Параметры заполнения ассортиментной матрицы'
    OBJECTS v = RangeRev PANEL 

    OBJECTS l = RangeLevel
    PROPERTIES(l) name READONLY, count 
    FILTERS in(v, l)
    
;

fill 'Заполнить матрицу по остаткам и продажам'(RangeRev rangeRev, DATE dateFrom, LedgerPriceListType pt, Stock stock)  { 
    DIALOG param OBJECTS v = rangeRev DO { 
        IF countRangeLevels(range(rangeRev)) THEN {
            level(rangeRev,Sku sku) <- level (sku, rangeRev, dateFrom, pt, stock) WHERE level (sku, rangeRev, dateFrom, pt, stock) ;
        } ELSE {
            MESSAGE 'Не задано количество товара ни для одного уровня ассортиментной матрицы.';
        }
    
    }
} TOOLBAR ;

EXTEND FORM rangeRev
    PROPERTIES (v, dFrom, pt, d) fill DRAW s
    FILTERGROUP levelFact FILTER 'Не соответствует уровень' level(v, s) AND NOT levelFact(s) == level(v, s)
;

DESIGN rangeRev {
    FILTERGROUPS (s) {
        MOVE FILTERGROUP (levelFact) FIRST;
    }
}

ranges 'Ассортиментные матрицы' (Sku s, DATE d) = GROUP CONCAT name(Range r) IF level(r, s, d) ,', ' CHARWIDTH 30; 
ranges 'Ассортиментные матрицы' (Sku s, DepartmentStore ds, DATE d) = GROUP CONCAT name(Range r) IF in(s, r, store(ds), d) ,', ' CHARWIDTH 30; 

EXTEND FORM ranges 
    PROPERTIES READONLY nameLevel(r, s, d), ranges(s, d)
    ORDERS nameLevel(r, s, d), name(s)
    FILTERGROUP filterSku
        FILTER 'По матрице' level(r, s, d) DEFAULT
        FILTER 'По группе' ranges(s, d) AND isParent(sg, s)
        
;


WHEN autoSetGroupAttribute(mainRole(currentUser())) AND CHANGED(itemGroup(Sku s)) AND level(RangeRev v, s) AND NOT inChild(range(v), s) DO {
    inData(Range r, SkuGroup g) <- TRUE WHERE r == range(v) AND g == skuGroup(s);
}

CONSTRAINT level(RangeRev v, Sku s) AND NOT inChild(range(v), s) MESSAGE 'Товар не соответствует выбранным группам для ассортимента';


nameOverLevel 'Уровень (перегруженный)' (Store st, Range r, DATE d) = nameOverLevel(r, st, d);  

filterStoreType2  = DATA LOCAL StoreType();
nameFilterStoreType2 'Формат' = name(filterStoreType2());          
filterStoreType2 (Store st) = storeType(st) == filterStoreType2() OR NOT filterStoreType2();       

EXTEND FORM storeRange 
    PROPERTIES() nameFilterStoreType2          

    OBJECTS store = Store GRID 
    PROPERTIES READONLY name(store)
    PROPERTIES nameOverLevel(store, sr, d) BACKGROUND backgroundLevel(sr, store, d) ON CHANGE changeLevel(sr, store, d) ON CHANGEWYS changeWYSLevel(sr, store, d) COLUMNS (sr) HEADER name(sr)
    FILTERS active(store),
            filterStoreType2(store)   
;

DESIGN storeRange{
    setPane {
        NEW rangePane {
            fill = 1;
            caption = 'По матрицам';
            MOVE PROPERTY (nameFilterStoreType2());          
            MOVE BOX(store);
        }   
    }
}

// ---------- Импорт версии матрицы

importXls 'Импорт' (RangeRev v)  { 
    INPUT f = EXCELFILE DO {
        LOCAL barcode = STRING[15] (INTEGER);
        LOCAL name = STRING[255] (INTEGER);
        LOCAL level = STRING[10] (INTEGER);
        
        LOCAL message = TEXT ();
        IMPORT XLS NOHEADER FROM f TO barcode = A, name = B, level = C;
        FOR imported(INTEGER i) DO {
            IF NOT oneLevel() THEN {
                level(v, Sku s) <- rangeLevel(level(i)) WHERE sku(barcode(barcode(i), currentDate())) == s AND inChild(range(v),skuGroup(s)); 
            } ELSE {
                level(v, Sku s) <- (GROUP MIN RangeLevel l IF l IS RangeLevel) WHERE sku(barcode(barcode(i), currentDate())) == s AND inChild(range(v),skuGroup(s));  
            }            
        }
        IF (GROUP SUM 1 IF imported(INTEGER i) AND (barcode(i) OR name(i)) AND NOT barcode(barcode(i), currentDate())) THEN {
             message() <- 'Не найдены следующие штрих-коды:\n' + (GROUP CONCAT (CONCAT ' : ', barcode(INTEGER i), name(i)) IF imported(i) AND (barcode(i) OR name(i)) AND NOT barcode(barcode(i), currentDate()), '\n');        
        }
        LOCAL inImport = BOOLEAN (SkuGroup);
        inImport(SkuGroup g) <- TRUE WHERE [GROUP SUM 1 IF imported(INTEGER i) BY  skuGroup(sku(barcode(barcode(i), currentDate()))) ](g) AND NOT inChild(range(v),g);
        IF (GROUP SUM 1 IF inImport(SkuGroup g)) THEN {
            message() <- CONCAT '\n', message(), 'Товары из следующих групп не были импортированы, т.к. они не включены в матрицу:', (GROUP CONCAT name(SkuGroup g) IF inImport(g),'\n') ;
        }
        IF message() THEN {
            MESSAGE message();
        }        
    }
}

changeXls 'Импорт (замена)' (RangeRev v)  { 
    INPUT f = EXCELFILE DO {
        LOCAL barcode = STRING[15] (INTEGER);
        LOCAL name = STRING[255] (INTEGER);
        LOCAL level = STRING[10] (INTEGER);
        
        LOCAL message = TEXT ();
        IMPORT XLS NOHEADER FROM f TO barcode = A, name = B, level = C;
        FOR imported(INTEGER i) DO {
            IF NOT oneLevel() THEN {
                level(v, Sku s) <- rangeLevel(level(i)) WHERE sku(barcode(barcode(i), currentDate())) == s AND level(v,s); 
            } ELSE {
                level(v, Sku s) <- (GROUP MIN RangeLevel l IF l IS RangeLevel) WHERE sku(barcode(barcode(i), currentDate())) == s AND level(v,s);  
            }            
        }        
    }
}


EXTEND FORM rangeRev
    PROPERTIES(v) importXls DRAW s TOOLBAR
;

//----фильтр по магазину
filterStore = DATA LOCAL Store();
nameFilterStore 'Магазин' = name(filterStore());

CONSTRAINT filterStore() AND NOT [GROUP SUM 1 IF accessCompany(currentUser(), DepartmentStore ds) BY store(ds)](filterStore())
    CHECKED BY filterStore[]
    MESSAGE 'В фильтре выбран Магазин, к которому нет доступа';
    
EXTEND FORM ranges
    PROPERTIES nameFilterStore()
    
    FILTERS overLevel(r,filterStore(),d) OR NOT filterStore()
;  

DESIGN ranges {
    NEW filters BEFORE pane {
        type = CONTAINERH;
        MOVE PROPERTY(date);
        MOVE PROPERTY(nameFilterStore());
    }
}

allowChangePast 'Разрешить изменять уровни за прошедшие дни' = DATA BOOLEAN();

EXTEND FORM options PROPERTIES allowChangePast();

DESIGN options {
    range {
        MOVE PROPERTY (allowChangePast());
    }
}

CONSTRAINT (CHANGED (dataLevel(Range r, Store s, DATE d)) OR  CHANGED (dataLevel(r, storeType(s), d))) AND NOT CHANGED (storeType(s)) AND r IS Range AND s IS Store
    AND NOT allowChangePast() AND d < currentDate() MESSAGE 'Запрещено изменять уровень для прошедшего дня';

FORM rangeLevelLog 'Лог изменений уровня'
    OBJECTS r = Range PANEL 
    PROPERTIES READONLY name(r)
    
    OBJECTS sd = (s = Store, st = StoreType, d = DATE)
    
    PROPERTIES READONLY vd = VALUE (d), name(s), nameOverLevel(r, s, d), name(st), nameLevel(r, st, d), dateTime(r, s, d), nameUser(r, s, d)
    ORDERS vd, name(s)
    FILTERS hasLevel(r, s, d) OR hasLevel(r, st, d), storeType(s) == st
;

showRangeLevelLog 'Лог изменения уровня' (Range r)  { 
    SHOW rangeLevelLog OBJECTS r = r;
} ASON CONTEXTMENU name[Range];

FORM rangeLevelStoreLog 'Лог изменений уровня'
    
    OBJECTS r = Range PANEL 
    PROPERTIES READONLY name(r)
    
    OBJECTS s = Store PANEL 
    PROPERTIES READONLY name(s)
    
    OBJECTS d = DATE
    
    PROPERTIES READONLY vd = VALUE (d), nameOverLevel(r, s, d), overDateTime(r, s, d), nameOverUser(r, s, d)
    ORDERS vd, name(s)
    FILTERS hasLevel(r, s, d) OR hasLevel(r, storeType(s), d)
;

showRangeLevelStoreLog 'Лог изменения уровня' (Range r, Store s)  { 
    SHOW rangeLevelStoreLog OBJECTS r = r, s = s;
} ASON CONTEXTMENU nameOverLevel[Range, Store, DATE];


FORM rangeLevelStoreTypeLog 'Лог изменений уровня'
    
    OBJECTS r = Range PANEL 
    PROPERTIES READONLY name(r)
    
    OBJECTS s = StoreType PANEL 
    PROPERTIES READONLY name(s)
    
    OBJECTS d = DATE
    
    PROPERTIES READONLY vd = VALUE (d), nameLevel(r, s, d), dateTime(r, s, d), nameUser(r, s, d)
    ORDERS vd, name(s)
    FILTERS hasLevel(r, s, d)
;

showRangeLevelStoreTypeLog 'Лог изменения уровня' (Range r, StoreType s)  { 
    SHOW rangeLevelStoreTypeLog OBJECTS r = r, s = s;
} ASON CONTEXTMENU nameLevel[Range, StoreType, DATE];

//----------------------------------
overCreateNewTopLevel ABSTRACT LIST (RangeLevel, RangeLevel);

createNewTopLevel 'Добавить верхний уровень'()  { 
    NEWSESSION {
       
        NEW l = RangeLevel;
        
        LOCAL level = RangeLevel();
        
        FOR RangeLevel l IS RangeLevel ORDER DESC l DO {
            IF level() THEN {
                dataLevel(Range.Range r, Store s, DATE d) <- level() WHERE dataLevel(r, s, d) == l;
                dataLevel(Range.Range r, StoreType s, DATE d) <- level() WHERE dataLevel(r, s, d) == l;
                in(Range.Range r, RangeLevel ln) <- TRUE WHERE ln == level() AND in(r, l);
                in(Range.Range r, l) <- NULL;
                level(RangeRev v, Sku s) <- level() WHERE level(v, s) == l;
                name(RangeLevel ln) <- name(l) WHERE ln == level();
                name(l) <- NULL;
                depth(Range.Range r, RangeLevel ln) <- depth(r, l)  WHERE ln == level();
                depth(Range.Range r, l) <- NULL;
                overCreateNewTopLevel(level(), l);
            }
            level() <- l;
        }
        IF NOT allowChangePast() THEN {
            allowChangePast() <- TRUE;
            APPLY;
            allowChangePast() <- NULL;
        }
        APPLY;
    }
} CONFIRM TOOLBAR;

EXTEND FORM rangeLevels PROPERTIES createNewTopLevel() DRAW l;   

countFilterRangeRev 'Количество версий в фильтре' = DATA INTEGER ();

EXTEND FORM options
    PROPERTIES () countFilterRangeRev
;
DESIGN options {
    range {
        MOVE PROPERTY (countFilterRangeRev());
    }
}

index 'Номер' (RangeRev v) = PARTITION SUM 1 ORDER DESC dateTime(v) BY range(v);

EXTEND FORM range
    FILTERGROUP index
        FILTER 'Показывать последние N версий' index(v) <= countFilterRangeRev() OR NOT countFilterRangeRev() DEFAULT
;

dataInStore = GROUP SUM 1 IF dataLevel(Range r, Store ss, DATE dt) BY r, dataLevel(r,ss,dt);

moveUpLevel 'Сместить на уровень вверх' (Range r) {
    IF NOT ( GROUP SUM 1 IF (countSku(r, RangeLevel l, currentDate()) OR dataInStore(r,l)) AND NOT nextLevel(l))  THEN {
        NEWSESSION {
            LOCAL NESTED ok =  BOOLEAN ();
            ok() <- allowChangePast();
            FOR range(RangeRev v) == r DO {
                FOR countSku(v, RangeLevel level) ORDER DESC level DO {
                    level (v, Sku s) <- nextLevel(level(v,s)) WHERE level(v,s) == level;
                }
            } 
            in(r,RangeLevel level) <- TRUE WHERE  (GROUP SUM countSku(RangeRev v,level) IF range(v)==r);  
//            in(r,RangeLevel level) <- NULL WHERE  NOT (GROUP SUM countSku(RangeRev v,level) IF range(v)==r);  
            dataLevel(r, Store ss, DATE dt) <- nextLevel(dataLevel(r, ss, dt)) WHERE dataLevel(r, ss, dt);
            in(r,RangeLevel level) <- TRUE WHERE  (GROUP SUM 1 IF dataLevel(r,Store ss, DATE dt) == level );  
            IF NOT ok() THEN {
                 allowChangePast() <- TRUE;
                 APPLY;
                 allowChangePast() <- NULL;
                 APPLY;                 
            
            } ELSE {
                APPLY;
            }
            
        }    
    } ELSE {
        MESSAGE 'Нет следующего уровня в программе';
    }      
} CONFIRM;

FORM dialogMoveDownLevel 'Сместить на уровень вниз'
    OBJECTS lvl = RangeLevel PANEL 
    PROPERTIES level 'С какого уровня сместить' = name(lvl) SELECTOR 
    
    EVENTS ON INIT {
        SEEK dialogMoveDownLevel.lvl = GROUP MAX RangeLevel l IF l IS RangeLevel;
    }
;

DESIGN dialogMoveDownLevel {
    OBJECTS {
        MOVE PROPERTY(level) { alignment = STRETCH; }
    }
}

moveDownLevel 'Сместить на уровень вниз' (Range r) {
    DIALOG dialogMoveDownLevel OBJECTS lvl INPUT DO {
        IF NOT ( GROUP SUM 1 IF (countSku(r, RangeLevel l, currentDate()) OR dataInStore(r,l)) AND NOT prevLevel(l)) THEN {
            NEWSESSION {
                LOCAL NESTED ok =  BOOLEAN ();
                ok() <- allowChangePast();       
                FOR range(RangeRev v) == r  DO {
                    FOR  countSku(v, RangeLevel level) AND level <= lvl ORDER level DO {
                        level (v, Sku s) <- prevLevel(level(v,s)) WHERE level(v,s) == level;
                    }
                } 
                in(r,RangeLevel level) <- TRUE WHERE  (GROUP SUM countSku(RangeRev v,level) IF range(v)==r);  
                //in(r,RangeLevel level) <- NULL WHERE  NOT (GROUP SUM countSku(RangeRev v,level) IF range(v)==r); 
                dataLevel(r, Store ss, DATE dt) <- prevLevel(dataLevel(r, ss, dt)) WHERE dataLevel(r, ss, dt); 
                in(r,RangeLevel level) <- TRUE WHERE  (GROUP SUM 1 IF dataLevel(r,Store ss, DATE dt) == level );              
                IF NOT ok() THEN {
                     allowChangePast() <- TRUE;
                     APPLY;
                     allowChangePast() <- NULL;
                     APPLY;                             
                } ELSE {
                    APPLY;
                }
            }
        } ELSE {
             MESSAGE 'Нет предыдущего уровня в программе.';
        }
    }
};

EXTEND FORM ranges 
    PROPERTIES (r) moveUpLevel, moveDownLevel
;
DESIGN ranges {
    range{
        NEW tabPane {
            fill = 1;
            type = TABBED;
            MOVE BOX(s);
            NEW actionPane {
                caption = 'Действия';  
                fill = 1;  
                MOVE PROPERTY (moveUpLevel(r));
                MOVE PROPERTY (moveDownLevel(r));
            }
        }        
    }
}