MODULE ReceiptSkuLedger;

REQUIRE ZReport,SkuLedger;

overDate = ABSTRACT DATE (ZReport);
ledgerDate (ZReport z) = OVERRIDE overDate(z), date(z);  
   
//---------------------- Продажа ----------------//
CLASS ReceiptSaleSkuLedger 'Продажа за день (общ.)' : OutFIFOSkuLedger, SaleLedger; //-- агрегированный объект
TABLE ReceiptSaleSkuLedger (ReceiptSaleSkuLedger);
TABLE departmentStoreSkuDatePrice(DepartmentStore, Sku, DATE, NUMERIC[18,6]);

ledgerDate(ReceiptSaleDetail d) = ledgerDate(zReport(receipt(d)));

quantityReceiptSaleDetail 'Кол-во' (department, sku, date, price) = GROUP SUM quantity(ReceiptSaleDetail d) IF isPosted(d)
    BY departmentStore(d), sku(d), ledgerDate(d), NUMERIC[18,6](price(d)) MATERIALIZED;
sumReceiptSaleDetail 'Сумма' (department, sku, date, price) = GROUP SUM sum(ReceiptSaleDetail d) IF isPosted(d)
    BY departmentStore(d), sku(d), ledgerDate(d), NUMERIC[18,6](price(d)) MATERIALIZED;
discountSumReceiptSaleDetail 'Сумма скидки' (department, sku, date, price) = GROUP SUM discountSum(ReceiptSaleDetail d) IF isPosted(d)
    BY departmentStore(d), sku(d), ledgerDate(d), NUMERIC[18,6](price(d)) MATERIALIZED;
countReceiptSaleDetail (department, sku, date, price) = GROUP SUM 1 IF isPosted(ReceiptSaleDetail d)
    BY departmentStore(d), sku(d), ledgerDate(d), NUMERIC[18,6](price(d)) MATERIALIZED;

VATReceiptSaleDetail = DATA Range (DepartmentStore, Sku, DATE, NUMERIC[18,6]);
WHEN SET(quantityReceiptSaleDetail(DepartmentStore department, Sku sku, DATE date, NUMERIC[16,4] price)) DO {
    VATReceiptSaleDetail (department, sku, date, price) <- VAT (sku, country(department));
}

extraDiscountSum = ABSTRACT NUMERIC[18,4](ReceiptSaleSkuLedger); 

departmentStore = DATA DepartmentStore (ReceiptSaleSkuLedger) INDEXED;
sku = DATA Sku (ReceiptSaleSkuLedger);
date = DATA DATE (ReceiptSaleSkuLedger);
price = DATA NUMERIC[16,4] (ReceiptSaleSkuLedger);

receiptSaleSkuLedger (departmentStore, sku, date, price) =
    GROUP NAGGR ReceiptSaleSkuLedger receiptSaleSkuLedger 
    WHERE receiptSaleSkuLedger IS ReceiptSaleSkuLedger BY departmentStore(receiptSaleSkuLedger), sku(receiptSaleSkuLedger), date(receiptSaleSkuLedger), price(receiptSaleSkuLedger);// MATERIALIZED INDEXED;

countReceiptSaleDetail(DepartmentStore departmentStore, Sku sku, DATE date, NUMERIC[16,4] price) => receiptSaleSkuLedger(departmentStore, sku, date, price) RESOLVE LEFT;

is(ReceiptSaleSkuLedger receiptSaleSkuLedger) = receiptSaleSkuLedger IS ReceiptSaleSkuLedger;
is(ReceiptSaleSkuLedger receiptSaleSkuLedger) => countReceiptSaleDetail(departmentStore(receiptSaleSkuLedger), sku(receiptSaleSkuLedger), date(receiptSaleSkuLedger), price(receiptSaleSkuLedger)) RESOLVE RIGHT;

INDEX sku(ReceiptSaleSkuLedger o), departmentStore(o);
INDEX date(ReceiptSaleSkuLedger o), departmentStore(o), sku(o), price(o);

dateTime[DataSkuLedger] (ReceiptSaleSkuLedger ledger) += dateTimeToDateTime(date(ledger), 23:59);
isPosted[DataSkuLedger] (ReceiptSaleSkuLedger ledger) += ledger IS ReceiptSaleSkuLedger;
isClosed[DataSkuLedger] (ReceiptSaleSkuLedger ledger) += ledger IS ReceiptSaleSkuLedger;
sku[DataSkuLedger] (ReceiptSaleSkuLedger ledger) += sku(ledger);
stock[DataSkuLedger] (ReceiptSaleSkuLedger ledger) += departmentStore(ledger);
description[DataSkuLedger] (ReceiptSaleSkuLedger ledger) += STRING[200]('Продажа за день')IF ledger IS ReceiptSaleSkuLedger;

overSkip = ABSTRACT BOOLEAN (ReceiptSaleSkuLedger);

skip[SkuLedger] (ReceiptSaleSkuLedger ledger) += date(ledger) < startDateGroupCashRegister(departmentStore(ledger)) OR
                           skuType(sku(ledger)) == SkuType.skuTypeCharge OR overSkip(ledger);

quantity[OutFIFOSkuLedger] (ReceiptSaleSkuLedger ledger) += NUMERIC[14,3](quantityReceiptSaleDetail(departmentStore(ledger), sku(ledger), date(ledger), price(ledger)));

//---------------------- SaleLedger ----------------//

dateTime[SaleLedger] (ReceiptSaleSkuLedger ledger) += toDateTime(date(ledger));
isPosted[SaleLedger] (ReceiptSaleSkuLedger ledger) += ledger IS ReceiptSaleSkuLedger;
isClosed[SaleLedger] (ReceiptSaleSkuLedger ledger) += ledger IS ReceiptSaleSkuLedger;
sku[SaleLedger] (ReceiptSaleSkuLedger ledger) += sku(ledger);
stock[SaleLedger] (ReceiptSaleSkuLedger ledger) += departmentStore(ledger);
description[SaleLedger] (ReceiptSaleSkuLedger ledger) += STRING[200]('Продажа за день')IF ledger IS ReceiptSaleSkuLedger;

cost(ReceiptSaleSkuLedger ledger, Batch batch) +=  cost[SkuLedger,Batch](ledger, batch) IF ledger IS ReceiptSaleSkuLedger;
quantity[SaleLedger] (ReceiptSaleSkuLedger ledger) += NUMERIC[14,3](quantityReceiptSaleDetail(departmentStore(ledger), sku(ledger), date(ledger), price(ledger)));
VAT (ReceiptSaleSkuLedger ledger) += VATReceiptSaleDetail(departmentStore(ledger), sku(ledger), date(ledger), price(ledger));
sum[SaleLedger] (ReceiptSaleSkuLedger ledger) += NUMERIC[18,4](sumReceiptSaleDetail(departmentStore(ledger), sku(ledger), date(ledger), price(ledger)));
price (ReceiptSaleSkuLedger ledger) += price(ledger);

discountSum (ReceiptSaleSkuLedger ledger) += NUMERIC[18,4](discountSumReceiptSaleDetail(departmentStore(ledger), sku(ledger), date(ledger), price(ledger))) (+) extraDiscountSum(ledger);

//-----------------------

@extendClassSaleZReportSkuLedger(ReceiptSaleSkuLedger);

//---------------------- Возврат ----------------//

CLASS ReceiptReturnSkuLedger 'Возврат за день (общ.)' : InLIFOSkuLedger, SaleLedger; //-- агрегированный объект
TABLE ReceiptReturnSkuLedger (ReceiptReturnSkuLedger);

ledgerDate(ReceiptReturnDetail d) = ledgerDate(zReport(receipt(d)));

quantityReceiptReturnDetail 'Кол-во' (department, sku, date, price) = GROUP SUM quantity(ReceiptReturnDetail d) IF isPosted(d)
    BY departmentStore(d), sku(d), ledgerDate(d), NUMERIC[18,6](price(d)) MATERIALIZED;
sumReceiptReturnDetail 'Сумма' (department, sku, date, price) = GROUP SUM sum(ReceiptReturnDetail d) IF isPosted(d)
    BY departmentStore(d), sku(d), ledgerDate(d), NUMERIC[18,6](price(d)) MATERIALIZED;
discountSumReceiptReturnDetail 'Сумма скидки' (department, sku, date, price) = GROUP SUM discountSum(ReceiptReturnDetail d) IF isPosted(d)
    BY departmentStore(d), sku(d), ledgerDate(d), NUMERIC[18,6](price(d)) MATERIALIZED;
countReceiptReturnDetail  (department, sku, date, price) = GROUP SUM 1 IF isPosted(ReceiptReturnDetail d)
    BY departmentStore(d), sku(d), ledgerDate(d), NUMERIC[18,6](price(d)) MATERIALIZED;

VATReceiptReturnDetail = DATA Range (DepartmentStore, Sku, DATE, NUMERIC[18,6]);
WHEN SET(quantityReceiptReturnDetail(DepartmentStore department, Sku sku, DATE date, NUMERIC[16,4] price)) DO {
    VATReceiptReturnDetail (department, sku, date, price) <- VAT (sku, country(department));
}

extraDiscountSum = ABSTRACT NUMERIC[18,4](ReceiptReturnSkuLedger); 

receiptReturnSkuLedger = AGGR ReceiptReturnSkuLedger WHERE countReceiptReturnDetail(DepartmentStore departmentStore, Sku sku, DATE date, NUMERIC[16,4] price);// MATERIALIZED;
//INDEX receiptReturnSkuLedger(DepartmentStore departmentStore, Sku sku, DATE date, NUMERIC[16,4] price);
//INDEX departmentStore(ReceiptReturnSkuLedger o);
INDEX sku(ReceiptReturnSkuLedger o), departmentStore(o);
INDEX date(ReceiptReturnSkuLedger o), departmentStore(o), sku(o), price(o);

dateTime[DataSkuLedger] (ReceiptReturnSkuLedger ledger) += dateTimeToDateTime(date(ledger), 23:59);
isPosted[DataSkuLedger] (ReceiptReturnSkuLedger ledger) += ledger IS ReceiptReturnSkuLedger;
isClosed[DataSkuLedger] (ReceiptReturnSkuLedger ledger) += ledger IS ReceiptReturnSkuLedger;
sku[DataSkuLedger] (ReceiptReturnSkuLedger ledger) += sku(ledger);
stock[DataSkuLedger] (ReceiptReturnSkuLedger ledger) += departmentStore(ledger);
description[DataSkuLedger] (ReceiptReturnSkuLedger ledger) += STRING[200]('Возврат за день')IF ledger IS ReceiptReturnSkuLedger;

overSkip = ABSTRACT BOOLEAN (ReceiptReturnSkuLedger);

skip[SkuLedger] (ReceiptReturnSkuLedger ledger) += date(ledger) < startDateGroupCashRegister(departmentStore(ledger)) OR
                            skuType(sku(ledger)) == SkuType.skuTypeCharge OR overSkip(ledger);

quantity[InLIFOSkuLedger] (ReceiptReturnSkuLedger ledger) += NUMERIC[14,3](quantityReceiptReturnDetail(departmentStore(ledger), sku(ledger), date(ledger), price(ledger)));

//---------------------- SaleLedger ----------------//

dateTime[SaleLedger] (ReceiptReturnSkuLedger ledger) += toDateTime(date(ledger));
isPosted[SaleLedger] (ReceiptReturnSkuLedger ledger) += ledger IS ReceiptReturnSkuLedger;
isClosed[SaleLedger] (ReceiptReturnSkuLedger ledger) += ledger IS ReceiptReturnSkuLedger;
sku[SaleLedger] (ReceiptReturnSkuLedger ledger) += sku(ledger);
stock[SaleLedger] (ReceiptReturnSkuLedger ledger) += departmentStore(ledger);
description[SaleLedger] (ReceiptReturnSkuLedger ledger) += STRING[200]('Возврат за день')IF ledger IS ReceiptReturnSkuLedger;

cost(ReceiptReturnSkuLedger ledger, Batch batch) += -cost[SkuLedger,Batch](ledger, batch) IF ledger IS ReceiptReturnSkuLedger;
quantity[SaleLedger] (ReceiptReturnSkuLedger ledger) += -NUMERIC[14,3](quantityReceiptReturnDetail(departmentStore(ledger), sku(ledger), date(ledger), price(ledger)));
VAT (ReceiptReturnSkuLedger ledger) += VATReceiptReturnDetail(departmentStore(ledger), sku(ledger), date(ledger), price(ledger));
price (ReceiptReturnSkuLedger ledger) += price(ledger);
sum[SaleLedger] (ReceiptReturnSkuLedger ledger) += -NUMERIC[18,4](sumReceiptReturnDetail(departmentStore(ledger), sku(ledger), date(ledger), price(ledger)));
discountSum (ReceiptReturnSkuLedger ledger) += -NUMERIC[18,4](discountSumReceiptReturnDetail(departmentStore(ledger), sku(ledger), date(ledger), price(ledger))) (+) -extraDiscountSum(ledger);

//-------------

@extendClassReturnZReportSkuLedger(ReceiptReturnSkuLedger);

//-------------

isReceiptDetail (SaleLedger d) = d IS ReceiptSaleSkuLedger OR d IS ReceiptReturnSkuLedger;