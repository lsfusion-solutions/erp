MODULE ZReportRetailBonus;

REQUIRE ZReportBonus, RetailBonus;

NAMESPACE ZReport;

sipShowBonus() += NOT useBonus();

//blockDate 'Заблокированы бонусы до' = DATA DATE (ReceiptSaleDetail);
//
//EXTEND FORM zReport
//    PROPERTIES(d) SHOWIF NOT sipShowBonus() blockDate
//;
//EXTEND FORM zReports
//    PROPERTIES(d) READONLY SHOWIF NOT sipShowBonus() blockDate
//;
//
//migrateBlockDates = DATA BOOLEAN ();
//onStarted()+{
//    IF NOT migrateBlockDates() THEN {
//        blockDate(ReceiptSaleDetail d) <- sum(date(d), blockDaysBonus()) WHERE bonusSum(d);
//        migrateBlockDates() <- TRUE;
//    }
//}
//
//WHEN SET(bonusSum(ReceiptSaleDetail d)) DO {
//    blockDate(d) <- sum(date(d), blockDaysBonus());
//}

returnBonusSum = GROUP SUM bonusSum(ReceiptReturnDetail rrd) BY receiptSaleDetail(rrd) MATERIALIZED;
blockedBonuses 'Заблокировано бонусов' (DiscountCard dc) = 
    GROUP SUM (bonusSum(ReceiptSaleDetail rsd) (-) returnBonusSum(rsd)) IF date(rsd) > subtract(currentDate(), blockDaysBonus()) BY discountCard(rsd);
//    GROUP SUM (bonusSum(ReceiptSaleDetail rsd) (-) returnBonusSum(rsd)) IF blockDate(rsd) >  currentDate() BY discountCard(rsd);
externalBlockedBonuses 'Дополнительные заблокированные бонусы' = ABSTRACT NUMERIC[18,4] (DiscountCard);  
totalBlockedBonuses 'Всего заблокировано бонусов' (DiscountCard dc)= blockedBonuses(dc) (+) externalBlockedBonuses(dc);

overAvailableBonuses(DiscountCard dc) += sumBonusLedger(dc) (-) totalBlockedBonuses(dc);

EXTEND FORM discountCard
    PROPERTIES(d) READONLY SHOWIF NOT sipShowBonus() blockedBonuses, externalBlockedBonuses, totalBlockedBonuses
;

DESIGN discountCard {
    row5 {
        MOVE PROPERTY(blockedBonuses(d)) BEFORE PROPERTY (paidBonuses(d));
        MOVE PROPERTY(sumBonusLedger(d)) BEFORE PROPERTY (availableBonuses(d));
    }
}

EXTEND FORM discountCards
    PROPERTIES(d) READONLY SHOWIF useBonus() blockedBonuses, externalBlockedBonuses, totalBlockedBonuses
;

// Перевод бонусов

skipTransferBonusLedger = ABSTRACT BOOLEAN (DiscountCard);

CONSTRAINT [GROUP SUM 1 BY discountCard(BonusLedger l), transferCard(l)](DiscountCard new, DiscountCard old) > 1 AND NOT skipTransferBonusLedger(new)
    MESSAGE 'Запрещено добавлять второй перевод с одной и той же карты';

WHEN LOCAL FORMS discountCard SETCHANGED(transferCard(BonusLedger l)) AND NOT skipTransferBonusLedger(discountCard(l)) DO {
    sum(l) <- prevTotalBonuses(transferCard(l));
}

WHEN SETCHANGED(discountCard(DiscountCard d)) AND NOT transferBonusLedger(d) AND NOT skipTransferBonusLedger(d) DO {
    NEW l = BonusLedger {
        discountCard(l) <- discountCard(d);
        typeBonusLedger(l) <- TypeBonusLedger.transfer;
        transferCard(l) <- d;
    }
}

WHEN (CHANGED(totalBonuses(DiscountCard d)) OR CHANGED(discountCard(d))) AND discountCard(d) AND BonusLedger l == transferBonusLedger(d) AND NOT skipTransferBonusLedger(discountCard(l)) DO {
    sum(l) <- prevTotalBonuses(d);
}

bonusPaid (ReceiptReturnDetail detail) <- round2(quantity(detail) * bonusPaid(receiptSaleDetail(detail)) / quantity(receiptSaleDetail(detail))) IF receiptSaleDetail(detail)
                                           WHEN CHANGED(quantity(detail)) OR
                                                CHANGED(receiptSaleDetail(detail));
bonusSum (ReceiptReturnDetail detail) <- round2(quantity(detail) * bonusSum(receiptSaleDetail(detail)) / quantity(receiptSaleDetail(detail))) IF receiptSaleDetail(detail)
                                           WHEN CHANGED(quantity(detail)) OR
                                                CHANGED(receiptSaleDetail(detail));
