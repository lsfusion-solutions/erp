MODULE ReceiptDetailSkuLedger;

REQUIRE ZReportBatch, SkuLedger;

NAMESPACE ZReport;

// -------------Проведение по регистрам --------------------- //

overTotalSum = ABSTRACT NUMERIC[18,4] (ReceiptDetail);
overDiscountSum = ABSTRACT NUMERIC[18,4] (ReceiptDetail);

@implementSaleLedger(ReceiptSale, sku, departmentStore);
numberDocument[SaleLedger] (ReceiptSaleDetail ledger) += number(zReport(ledger));
cost(ReceiptSaleDetail ledger, Batch batch) +=  cost[SkuLedger,Batch](ledger, batch) IF ledger IS ReceiptSaleDetail; //quantityReceiptSaleDetail(ledger) IF  batchReceiptSaleDetail(ledger)== batch;
quantity[SaleLedger] (ReceiptSaleDetail ledger) += quantity(ledger);
VAT[SaleLedger] (ReceiptSaleDetail ledger) += VAT(ledger);
price[SaleLedger] (ReceiptSaleDetail ledger) += price(ledger);
sum[SaleLedger] (ReceiptSaleDetail ledger) += OVERRIDE overTotalSum(ledger), sum(ledger);
discountSum[SaleLedger] (ReceiptSaleDetail ledger) += OVERRIDE overDiscountSum(ledger), (discountSum(ledger) (+) addDiscountSum(ledger));
skip[SaleLedger](ReceiptSaleDetail ledger) += WHEN ledger IS ReceiptSaleDetail THEN skip(receipt(ledger));

@implementSaleLedger(ReceiptReturn, sku, departmentStore);
numberDocument[SaleLedger] (ReceiptReturnDetail ledger) += number(zReport(ledger));
cost(ReceiptReturnDetail ledger, Batch batch) += -cost[SkuLedger,Batch](ledger, batch) IF ledger IS ReceiptReturnDetail;//quantityReceiptReturnDetail(ledger) IF  batchReceiptReturnDetail(ledger)== batch;
quantity[SaleLedger] (ReceiptReturnDetail ledger) += -quantity(ledger);
VAT[SaleLedger] (ReceiptReturnDetail ledger) += VAT(ledger);
sum[SaleLedger] (ReceiptReturnDetail ledger) += OVERRIDE -overTotalSum(ledger), -sum(ledger);
price[SaleLedger] (ReceiptReturnDetail ledger) += price(ledger);
discountSum[SaleLedger] (ReceiptReturnDetail ledger) += OVERRIDE -overDiscountSum(ledger), (-discountSum(ledger) (-) addDiscountSum(receiptSaleDetail(ledger)));
skip[SaleLedger](ReceiptReturnDetail ledger) += WHEN ledger IS ReceiptReturnDetail THEN skip(receipt(ledger));

// -------------Проведение по регистрам --------------------- //

extraSum 'Сумма' (ledger) = ABSTRACT NUMERIC[18,4] (ReceiptReturnDetail);
extraSum 'Сумма' (ledger) = ABSTRACT NUMERIC[18,4] (ReceiptSaleDetail);

@implementSkuLedgerOutFIFO(ReceiptSaleDetail, sku, departmentStore);
quantity[OutFIFOSkuLedger] (ReceiptSaleDetail ledger) += quantity(ledger);
batch[SkuLedger](ReceiptSaleDetail ledger) += batch(ledger);
@implementSkuLedgerOutFIFOBatchBalance(receiptSaleDetail, departmentStore);

skip[SkuLedger](ReceiptSaleDetail ledger) += skip(ledger);

@implementSkuLedgerInLIFO(ReceiptReturnDetail, sku, departmentStore);
quantity[InLIFOSkuLedger] (ReceiptReturnDetail ledger) += quantity(ledger);
batch[SkuLedger](ReceiptReturnDetail ledger) += batch(ledger);
@implementSkuLedgerInLIFOBatchBalance(receiptReturnDetail, departmentStore);

skip[SkuLedger](ReceiptReturnDetail ledger) += skip(ledger);

show[SkuLedger](ReceiptReturnDetail d) + {  show(d); }
show[SkuLedger](ReceiptSaleDetail d) + {  show(d); }

EXTEND FORM zReports
    PROPERTIES (d) READONLY costSum[SkuLedger] AFTER price(d)
;

//----------------

@extendClassReturnZReportSkuLedger(ReceiptReturnDetail);

@extendClassSaleZReportSkuLedger(ReceiptSaleDetail);

//
zReportLedgerType() += 'ReceiptDetailSkuLedger';