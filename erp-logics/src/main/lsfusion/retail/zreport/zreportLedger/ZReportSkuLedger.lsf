MODULE ZReportSkuLedger;

REQUIRE ZReport, SkuLedger;

NAMESPACE ZReport;
   
//---------------------- Продажа ----------------//
CLASS ZReportSaleSkuLedger 'Продажа за день (общ.)' : OutFIFOSkuLedger, SaleLedger; //-- агрегированный объект
TABLE zReportSaleSkuLedger (ZReportSaleSkuLedger);
TABLE zReportSkuPrice(ZReport, Sku, NUMERIC[16,4]);

quantityReceiptSaleDetail 'Кол-во' = GROUP SUM quantity(ReceiptSaleDetail d) IF isPosted(d)
    BY zReport(d), sku(d), price(d) MATERIALIZED;
sumReceiptSaleDetail 'Сумма' = GROUP SUM sum(ReceiptSaleDetail d) IF isPosted(d)
    BY zReport(d), sku(d), price(d) MATERIALIZED;
discountSumReceiptSaleDetail 'Сумма скидки' = GROUP SUM discountSum(ReceiptSaleDetail d) IF isPosted(d)
    BY zReport(d), sku(d), price(d) MATERIALIZED;
countReceiptSaleDetail = GROUP SUM 1 IF isPosted(ReceiptSaleDetail d)
    BY zReport(d), sku(d), price(d) MATERIALIZED;

extraDiscountSum = ABSTRACT NUMERIC[18,4](ZReportSaleSkuLedger); 

VATReceiptSaleDetail = DATA Range (ZReport, Sku, NUMERIC[16,4]);
WHEN SET(quantityReceiptSaleDetail(ZReport zr, Sku sku, NUMERIC[16,4] price)) DO {
    VATReceiptSaleDetail (zr, sku, price) <- VAT (sku, country(zr));
}

ZReportSaleSkuLedger = AGGR ZReportSaleSkuLedger WHERE countReceiptSaleDetail(ZReport zReport, Sku sku, NUMERIC[16,4] price) MATERIALIZED;
INDEX sku(ZReportSaleSkuLedger ledger);
INDEX price(ZReportSaleSkuLedger ledger);
INDEX ZReportSaleSkuLedger(ZReport zReport, Sku sku, NUMERIC[16,4] price);
INDEX zReport(ZReportSaleSkuLedger o), sku(o), price(o);

inFixTime 'Проводить продажи по SkuLedger в 23:59'() = DATA BOOLEAN () PREREAD;
inFixTimeReturn 'Проводить возвраты по SkuLedger в 23:59'() = DATA BOOLEAN () PREREAD;

EXTEND FORM options
    PROPERTIES () inFixTime, inFixTimeReturn
;
    
DESIGN options {
    zReport {
        MOVE PROPERTY(inFixTime());
        MOVE PROPERTY(inFixTimeReturn());
    }    
}   

overDateTime (ZReportSaleSkuLedger ledger) = OVERRIDE dateTimeToDateTime(date(zReport(ledger)),'23:59' IF inFixTime()) ,dateTime(zReport(ledger));
dateTime[DataSkuLedger] (ZReportSaleSkuLedger ledger) += overDateTime(ledger);
isPosted[DataSkuLedger] (ZReportSaleSkuLedger ledger) += isPosted(zReport(ledger));
isClosed[DataSkuLedger] (ZReportSaleSkuLedger ledger) += isClosed(zReport(ledger));
sku[DataSkuLedger] (ZReportSaleSkuLedger ledger) += sku(ledger);
stock[DataSkuLedger] (ZReportSaleSkuLedger ledger) += departmentStore(zReport(ledger));
description[DataSkuLedger] (ZReportSaleSkuLedger ledger) += STRING[200]('Продажа № ' + number(zReport(ledger)) + ' от ' + dateTime(zReport(ledger)));

skip[SkuLedger] (ZReportSaleSkuLedger ledger) += date(zReport(ledger)) < startDateGroupCashRegister(departmentStore(zReport(ledger))) OR
                           skuType(sku(ledger)) == SkuType.skuTypeCharge;

quantity[OutFIFOSkuLedger] (ZReportSaleSkuLedger ledger) += quantityReceiptSaleDetail(zReport(ledger), sku(ledger), price(ledger));
//sum[OutSkuLedger] (ZReportSaleSkuLedger ledger) += sumReceiptSaleDetail(zReport(ledger), sku(ledger), price(ledger))
//    (+) discountSumReceiptSaleDetail(zReport(ledger), sku(ledger), price(ledger));
    
edit(ZReportSaleSkuLedger d) + {  edit(zReport(d)); }
show[SkuLedger](ZReportSaleSkuLedger d) + {  show(zReport(d)); }

//---------------------- SaleLedger ----------------//

dateTime[SaleLedger] (ZReportSaleSkuLedger ledger) += dateTime(zReport(ledger));
isPosted[SaleLedger] (ZReportSaleSkuLedger ledger) += isPosted(zReport(ledger));
isClosed[SaleLedger] (ZReportSaleSkuLedger ledger) += isClosed(zReport(ledger));
sku[SaleLedger] (ZReportSaleSkuLedger ledger) += sku(ledger);
stock[SaleLedger] (ZReportSaleSkuLedger ledger) += departmentStore(zReport(ledger));
description[SaleLedger] (ZReportSaleSkuLedger ledger) += STRING[200]('Продажа № ' + number(zReport(ledger)) + ' от ' + dateTime(zReport(ledger)));

cost(ZReportSaleSkuLedger ledger, Batch batch) +=  cost[SkuLedger, Batch](ledger, batch) IF ledger IS ZReportSaleSkuLedger;
quantity[SaleLedger] (ZReportSaleSkuLedger ledger) += quantityReceiptSaleDetail(zReport(ledger), sku(ledger), price(ledger));
VAT (ZReportSaleSkuLedger ledger) += VATReceiptSaleDetail(zReport(ledger), sku(ledger), price(ledger));
sum[SaleLedger] (ZReportSaleSkuLedger ledger) += sumReceiptSaleDetail(zReport(ledger), sku(ledger), price(ledger));
price (ZReportSaleSkuLedger ledger) += price(ledger);

discountSum (ZReportSaleSkuLedger ledger) += discountSumReceiptSaleDetail(zReport(ledger), sku(ledger), price(ledger));

costSum (ZReportSaleSkuLedger ledger) += WHEN ledger IS ZReportSaleSkuLedger THEN costSum[SkuLedger](ledger);
show[SaleLedger](ZReportSaleSkuLedger d) + {  show(zReport(d)); }
//--------------------------

@extendClassSaleZReportSkuLedger(ZReportSaleSkuLedger);

//---------------------- Возврат ----------------//

CLASS ZReportReturnSkuLedger 'Возврат за день (общ.)' : InLIFOSkuLedger, SaleLedger; //-- агрегированный объект
TABLE zReportReturnSkuLedger (ZReportReturnSkuLedger);

quantityReceiptReturnDetail 'Кол-во' = GROUP SUM quantity(ReceiptReturnDetail d) IF isPosted(d)
    BY zReport(d), sku(d), price(d) MATERIALIZED;
sumReceiptReturnDetail 'Сумма' = GROUP SUM sum(ReceiptReturnDetail d) IF isPosted(d)
    BY zReport(d), sku(d), price(d) MATERIALIZED;
discountSumReceiptReturnDetail 'Сумма скидки' = GROUP SUM discountSum(ReceiptReturnDetail d) IF isPosted(d)
    BY zReport(d), sku(d), price(d) MATERIALIZED;
countReceiptReturnDetail = GROUP SUM 1 IF isPosted(ReceiptReturnDetail d)
    BY zReport(d), sku(d), price(d) MATERIALIZED;

extraDiscountSum = ABSTRACT NUMERIC[18,4](ZReportReturnSkuLedger); 

VATReceiptReturnDetail = DATA Range (ZReport, Sku, NUMERIC[16,4]);
WHEN SET(quantityReceiptReturnDetail(ZReport zr, Sku sku, NUMERIC[16,4] price)) DO {
    VATReceiptReturnDetail (zr, sku, price) <- VAT(sku, country(zr));
}

ZReportReturnSkuLedger = AGGR ZReportReturnSkuLedger WHERE countReceiptReturnDetail(ZReport zReport, Sku sku, NUMERIC[16,4] price) MATERIALIZED;
INDEX sku(ZReportReturnSkuLedger ledger);
INDEX price(ZReportReturnSkuLedger ledger);
INDEX ZReportReturnSkuLedger(ZReport zReport, Sku sku, NUMERIC[16,4] price);
INDEX zReport(ZReportReturnSkuLedger o), sku(o), price(o);

overDateTime (ZReportReturnSkuLedger ledger) = OVERRIDE dateTimeToDateTime(date(zReport(ledger)),'23:59' IF inFixTimeReturn()), dateTime(zReport(ledger));
dateTime[DataSkuLedger] (ZReportReturnSkuLedger ledger) += overDateTime(ledger);
isPosted[DataSkuLedger] (ZReportReturnSkuLedger ledger) += isPosted(zReport(ledger));
isClosed[DataSkuLedger] (ZReportReturnSkuLedger ledger) += isClosed(zReport(ledger));
sku[DataSkuLedger] (ZReportReturnSkuLedger ledger) += sku(ledger);
stock[DataSkuLedger] (ZReportReturnSkuLedger ledger) += departmentStore(zReport(ledger));
description[DataSkuLedger] (ZReportReturnSkuLedger ledger) += STRING[200]('Возврат № ' + number(zReport(ledger)) + ' от ' + dateTime(zReport(ledger)));

skip[SkuLedger] (ZReportReturnSkuLedger ledger) += date(zReport(ledger)) < startDateGroupCashRegister(departmentStore(zReport(ledger))) OR
                                                  skuType(sku(ledger)) == SkuType.skuTypeCharge;

quantity[InLIFOSkuLedger] (ZReportReturnSkuLedger ledger) += quantityReceiptReturnDetail(zReport(ledger), sku(ledger), price(ledger));
//sum[InSkuLedger] (ZReportReturnSkuLedger ledger) += sumReceiptReturnDetail(zReport(ledger), sku(ledger), price(ledger))
//    (+) discountSumReceiptReturnDetail(zReport(ledger), sku(ledger), price(ledger));
    
edit(ZReportReturnSkuLedger d) + {  edit(zReport(d)); }
show[SkuLedger](ZReportReturnSkuLedger d) + {  show(zReport(d)); }

//---------------------- SaleLedger ----------------//

dateTime[SaleLedger] (ZReportReturnSkuLedger ledger) += dateTime(zReport(ledger));
isPosted[SaleLedger] (ZReportReturnSkuLedger ledger) += isPosted(zReport(ledger));
isClosed[SaleLedger] (ZReportReturnSkuLedger ledger) += isClosed(zReport(ledger));
sku[SaleLedger] (ZReportReturnSkuLedger ledger) += sku(ledger);
stock[SaleLedger] (ZReportReturnSkuLedger ledger) += departmentStore(zReport(ledger));
description[SaleLedger] (ZReportReturnSkuLedger ledger) += STRING[200]('Возврат № ' + number(zReport(ledger)) + ' от ' + dateTime(zReport(ledger)));

cost(ZReportReturnSkuLedger ledger, Batch batch) += -cost[SkuLedger, Batch](ledger, batch) IF ledger IS ZReportReturnSkuLedger;
quantity[SaleLedger] (ZReportReturnSkuLedger ledger) += -quantityReceiptReturnDetail(zReport(ledger), sku(ledger), price(ledger));
VAT (ZReportReturnSkuLedger ledger) += VATReceiptReturnDetail(zReport(ledger), sku(ledger), price(ledger));
price (ZReportReturnSkuLedger ledger) += price(ledger);
sum[SaleLedger] (ZReportReturnSkuLedger ledger) += -sumReceiptReturnDetail(zReport(ledger), sku(ledger), price(ledger));
discountSum (ZReportReturnSkuLedger ledger) += -discountSumReceiptReturnDetail(zReport(ledger), sku(ledger), price(ledger));
costSum (ZReportReturnSkuLedger ledger) += WHEN ledger IS ZReportReturnSkuLedger THEN -costSum[SkuLedger](ledger);
show[SaleLedger](ZReportReturnSkuLedger d) + {  show(zReport(d)); }
//------------------------

@extendClassReturnZReportSkuLedger(ZReportReturnSkuLedger);