MODULE DateSkuLedger;

REQUIRE ZReport, SkuLedger;

NAMESPACE ZReport;

//---------------------- Продажа ----------------//
CLASS DateSaleSkuLedger 'Продажа за день (общ.)' : OutFIFOSkuLedger, SaleLedger; //-- агрегированный объект
TABLE DateSaleSkuLedger (DateSaleSkuLedger);

quantityReceiptSaleDetail 'Кол-во' (department, sku, date) = GROUP SUM quantity(ReceiptDetail d) IF isPosted(d) AND d IS ReceiptSaleDetail
    BY departmentStore(d), sku(d), date(d);
sumReceiptSaleDetail 'Сумма' (department, sku, date) = GROUP SUM sum(ReceiptDetail d) IF isPosted(d) AND d IS ReceiptSaleDetail
    BY departmentStore(d), sku(d), date(d);
discountSumReceiptSaleDetail 'Сумма скидки' (department, sku, date) = GROUP SUM discountSum(ReceiptDetail d) IF isPosted(d) AND d IS ReceiptSaleDetail
    BY departmentStore(d), sku(d), date(d);
countReceiptSaleDetail (department, sku, date) = GROUP SUM 1 IF isPosted(ReceiptDetail d) AND d IS ReceiptSaleDetail
    BY departmentStore(d), sku(d), date(d);

dateSaleSkuLedger = AGGR DateSaleSkuLedger WHERE countReceiptSaleDetail(DepartmentStore departmentStore, Sku sku, DATE date);// MATERIALIZED;
INDEX departmentStore(DateSaleSkuLedger o);
INDEX sku(DateSaleSkuLedger o), departmentStore(o);
INDEX date(DateSaleSkuLedger o), departmentStore(o), sku(o);

dateTime[DataSkuLedger] (DateSaleSkuLedger ledger) += dateTimeToDateTime(date(ledger), 23:59);
isPosted[DataSkuLedger] (DateSaleSkuLedger ledger) += ledger IS DateSaleSkuLedger;
isClosed[DataSkuLedger] (DateSaleSkuLedger ledger) += ledger IS DateSaleSkuLedger;
sku[DataSkuLedger] (DateSaleSkuLedger ledger) += sku(ledger);
stock[DataSkuLedger] (DateSaleSkuLedger ledger) += departmentStore(ledger);
description[DataSkuLedger] (DateSaleSkuLedger ledger) += STRING[200]('Продажа за день')IF ledger IS DateSaleSkuLedger;

skip[SkuLedger] (DateSaleSkuLedger ledger) += date(ledger) < startDateGroupCashRegister(departmentStore(ledger)) OR
                           skuType(sku(ledger)) == SkuType.skuTypeCharge;

quantity[OutFIFOSkuLedger] (DateSaleSkuLedger ledger) += NUMERIC[14,3](quantityReceiptSaleDetail(departmentStore(ledger), sku(ledger), date(ledger)));

//---------------------- SaleLedger ----------------//

overVAT = ABSTRACT Range(DepartmentStore, Sku);

VAT = DATA Range(DateSaleSkuLedger);
WHEN SET(DateSaleSkuLedger l IS DateSaleSkuLedger) DO {
    VAT(l) <- OVERRIDE overVAT(departmentStore(l), sku(l)), VAT(sku(l), country(departmentStore(l)));
}

// to delete
VATReceiptSaleDetail = DATA Range (DepartmentStore, Sku, DATE);

migratedVATSale = DATA BOOLEAN();
onStarted() + {
    IF NOT migratedVATSale() THEN NEWSESSION {
        APPLY {
            VAT(DateSaleSkuLedger l) <- VATReceiptSaleDetail(departmentStore(l), sku(l), date(l));
            migratedVATSale() <- TRUE;
        }
    }
}

dateTime[SaleLedger] (DateSaleSkuLedger ledger) += toDateTime(date(ledger));
isPosted[SaleLedger] (DateSaleSkuLedger ledger) += ledger IS DateSaleSkuLedger;
isClosed[SaleLedger] (DateSaleSkuLedger ledger) += ledger IS DateSaleSkuLedger;
sku[SaleLedger] (DateSaleSkuLedger ledger) += sku(ledger);
stock[SaleLedger] (DateSaleSkuLedger ledger) += departmentStore(ledger);
description[SaleLedger] (DateSaleSkuLedger ledger) += STRING[200]('Продажа за день')IF ledger IS DateSaleSkuLedger;

cost(DateSaleSkuLedger ledger, Batch batch) +=  cost[SkuLedger,Batch](ledger, batch) IF ledger IS DateSaleSkuLedger;
quantity[SaleLedger] (DateSaleSkuLedger ledger) += NUMERIC[14,3](quantityReceiptSaleDetail(departmentStore(ledger), sku(ledger), date(ledger)));
VAT (DateSaleSkuLedger ledger) += VAT(ledger);
sum[SaleLedger] (DateSaleSkuLedger ledger) += NUMERIC[18,4](sumReceiptSaleDetail(departmentStore(ledger), sku(ledger), date(ledger)));

discountSum (DateSaleSkuLedger ledger) += NUMERIC[18,4](discountSumReceiptSaleDetail(departmentStore(ledger), sku(ledger), date(ledger)));

//-----------------------

@extendClassSaleZReportSkuLedger(DateSaleSkuLedger);

//---------------------- Возврат ----------------//

CLASS DateReturnSkuLedger 'Возврат за день (общ.)' : InLIFOSkuLedger, SaleLedger; //-- агрегированный объект
TABLE DateReturnSkuLedger (DateReturnSkuLedger);

quantityReceiptReturnDetail 'Кол-во' (department, sku, date) = GROUP SUM quantity(ReceiptReturnDetail d) IF isPosted(d)
    BY departmentStore(d), sku(d), date(d);
sumReceiptReturnDetail 'Сумма' (department, sku, date) = GROUP SUM sum(ReceiptReturnDetail d) IF isPosted(d)
    BY departmentStore(d), sku(d), date(d);
discountSumReceiptReturnDetail 'Сумма скидки' (department, sku, date) = GROUP SUM discountSum(ReceiptReturnDetail d) IF isPosted(d)
    BY departmentStore(d), sku(d), date(d);
countReceiptReturnDetail  (department, sku, date) = GROUP SUM 1 IF isPosted(ReceiptReturnDetail d)
    BY departmentStore(d), sku(d), date(d);

dateReturnSkuLedger = AGGR DateReturnSkuLedger WHERE countReceiptReturnDetail(DepartmentStore departmentStore, Sku sku, DATE date);// MATERIALIZED;
INDEX sku(DateReturnSkuLedger o), departmentStore(o);
INDEX date(DateReturnSkuLedger o), departmentStore(o), sku(o);

dateTime[DataSkuLedger] (DateReturnSkuLedger ledger) += dateTimeToDateTime(date(ledger), 23:59);
isPosted[DataSkuLedger] (DateReturnSkuLedger ledger) += ledger IS DateReturnSkuLedger;
isClosed[DataSkuLedger] (DateReturnSkuLedger ledger) += ledger IS DateReturnSkuLedger;
sku[DataSkuLedger] (DateReturnSkuLedger ledger) += sku(ledger);
stock[DataSkuLedger] (DateReturnSkuLedger ledger) += departmentStore(ledger);
description[DataSkuLedger] (DateReturnSkuLedger ledger) += STRING[200]('Возврат за день')IF ledger IS DateReturnSkuLedger;

skip[SkuLedger] (DateReturnSkuLedger ledger) += date(ledger) < startDateGroupCashRegister(departmentStore(ledger)) OR
                            skuType(sku(ledger)) == SkuType.skuTypeCharge;

quantity[InLIFOSkuLedger] (DateReturnSkuLedger ledger) += NUMERIC[14,3](quantityReceiptReturnDetail(departmentStore(ledger), sku(ledger), date(ledger)));

//---------------------- SaleLedger ----------------//

VAT = DATA Range(DateReturnSkuLedger);
WHEN SET(DateReturnSkuLedger l IS DateReturnSkuLedger) DO {
    VAT(l) <- OVERRIDE overVAT(departmentStore(l), sku(l)), VAT(sku(l), country(departmentStore(l)));
}

// to delete
VATReceiptReturnDetail = DATA Range (DepartmentStore, Sku, DATE);

migratedVATReturn = DATA BOOLEAN();
onStarted() + {
    IF NOT migratedVATReturn() THEN NEWSESSION {
        APPLY {
            VAT(DateReturnSkuLedger l) <- VATReceiptReturnDetail(departmentStore(l), sku(l), date(l));
            migratedVATReturn() <- TRUE;
        }
    }
}

dateTime[SaleLedger] (DateReturnSkuLedger ledger) += toDateTime(date(ledger));
isPosted[SaleLedger] (DateReturnSkuLedger ledger) += ledger IS DateReturnSkuLedger;
isClosed[SaleLedger] (DateReturnSkuLedger ledger) += ledger IS DateReturnSkuLedger;
sku[SaleLedger] (DateReturnSkuLedger ledger) += sku(ledger);
stock[SaleLedger] (DateReturnSkuLedger ledger) += departmentStore(ledger);
description[SaleLedger] (DateReturnSkuLedger ledger) += STRING[200]('Возврат за день')IF ledger IS DateReturnSkuLedger;

cost(DateReturnSkuLedger ledger, Batch batch) += -cost[SkuLedger,Batch](ledger, batch) IF ledger IS DateReturnSkuLedger;
quantity[SaleLedger] (DateReturnSkuLedger ledger) += -NUMERIC[14,3](quantityReceiptReturnDetail(departmentStore(ledger), sku(ledger), date(ledger)));
VAT (DateReturnSkuLedger ledger) += VAT(ledger);
sum[SaleLedger] (DateReturnSkuLedger ledger) += -NUMERIC[18,4](sumReceiptReturnDetail(departmentStore(ledger), sku(ledger), date(ledger)));
discountSum (DateReturnSkuLedger ledger) += -NUMERIC[18,4](discountSumReceiptReturnDetail(departmentStore(ledger), sku(ledger), date(ledger)));

//-------------

@extendClassReturnZReportSkuLedger(DateReturnSkuLedger);