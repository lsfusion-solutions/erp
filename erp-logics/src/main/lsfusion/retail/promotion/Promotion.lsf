MODULE Promotion;

REQUIRE ItemManager, PriceListDashboard, PriceListPromotion, PurchaseOrder, Store, SaleLedger;

NAMESPACE Promotion;

CLASS Promotion 'Акция';
TABLE promotion (Promotion);

CLASS PromotionDetail 'Строка акции';
TABLE promotionDetail (PromotionDetail);

@defineNumbered(Promotion, BPSTRING[2]);

@defineNumerated(Promotion);

docDefaultNumeratorPromotion = DATA Numerator ();
nameDocDefaultNumeratorPromotion 'Акции' = name(docDefaultNumeratorPromotion()) IN defaultNumerator;

numerator(Promotion o) <- docDefaultNumeratorPromotion() WHEN SET(o IS Promotion);

EXTEND FORM defaultNumerators
    PROPERTIES() nameDocDefaultNumeratorPromotion = nameDocDefaultNumeratorPromotion
;

loadDefaultNumerators() + { 
    NEW n = Numerator {
        name(n) <- 'Акции (документы)';
        series(n) <- '';
        minValue(n) <- 1L;
        maxValue(n) <- 99999L;
        stringLength(n) <- 5;

        docDefaultNumeratorPromotion() <- n;
    }
}

changedTime 'Время последнего изменения'= DATA DATETIME (PromotionDetail);
changedTime (PromotionDetail detail) <- currentDateTime() WHEN CHANGED(detail IS PromotionDetail);
    
changedUser = DATA CustomUser (PromotionDetail);
changedNameUser 'Изменен пользователем' (PromotionDetail detail) = name[Contact](changedUser(detail)) CHARWIDTH 10;
changedUser (PromotionDetail detail) <- currentUser() WHEN CHANGED (detail IS PromotionDetail);
    
changedComputer = DATA Computer (PromotionDetail);
changedHostnameComputer 'Изменен на компьютере' (PromotionDetail detail) = hostname(changedComputer(detail)) CHARWIDTH 10;
changedComputer (PromotionDetail detail) <- currentComputer() WHEN CHANGED(detail IS PromotionDetail);

promotion 'Акция' = DATA Promotion (PromotionDetail) INDEXED NONULL DELETE;
countPromotionDetail 'Кол-во строк' (Promotion p) = GROUP SUM 1 BY promotion(PromotionDetail d);

name 'Наименование' = DATA ISTRING[100] (Promotion) CHARWIDTH 30;
fromDate 'Дата с' = DATA DATE (Promotion);
toDate 'Дата по' = DATA DATE (Promotion);

series 'Серия' (PromotionDetail detail) = series(promotion(detail)) IN id;
number 'Номер' (PromotionDetail detail) = number(promotion(detail)) IN id;

name 'Наименование' (PromotionDetail detail) = name(promotion(detail)) IN id;
fromDate 'Дата с' (PromotionDetail detail) = fromDate(promotion(detail)) IN id;
toDate 'Дата по' (PromotionDetail detail) = toDate(promotion(detail)) IN id;

//склады
TABLE promotionStockGroup (Promotion, StockGroup);
TABLE promotionStock (Promotion, Stock);

allStocks 'Отм' = DATA BOOLEAN (Promotion);
dataIn 'Отм' = DATA BOOLEAN (Promotion, StockGroup);
dataIn 'Отм' = DATA BOOLEAN (Promotion, Stock);

levelParent (Promotion promotion, StockGroup stockGroup) = GROUP MIN level(stockGroup, StockGroup parent) IF dataIn(promotion, parent) MATERIALIZED;
inParent (Promotion promotion, StockGroup stockGroup) = TRUE IF levelParent(promotion, stockGroup) MATERIALIZED;
in 'Отм' (Promotion promotion, StockGroup stockGroup) = OVERRIDE
    dataIn(promotion, stockGroup),
    inParent (promotion, stockGroup),
    allStocks(promotion) AND stockGroup IS StockGroup;
in 'Отм' (Promotion promotion, Stock stock) =
    OVERRIDE dataIn(promotion, stock),
             (in(promotion, stockGroup(stock)) AND active(stock) AND isCompany(stock)) MATERIALIZED;

@defineBackgroundNearestBoolean(allStocks, in, promotion, stock, inParent, isCompany);

stocks 'Склады' (Promotion promotion) = ISTRING[2000](GROUP
                                       CONCAT ISTRING[250] (name(Stock stock)) IF in(promotion, stock) , ', '
                                       ORDER stock) CHARWIDTH 20 MATERIALIZED;
stocks 'Склады' (PromotionDetail d) = stocks(promotion(d));


CLASS PromotionType 'Тип акции';
TABLE promotionType (PromotionType);

id 'Код' = DATA ISTRING[100] (PromotionType) IN base;
promotionType(id) = GROUP AGGR (PromotionType type) BY id(type);

name 'Наименование' = DATA ISTRING[100] (PromotionType) IN base CHARWIDTH 20;

FORM promotionType 'Тип акции'
    OBJECTS o = PromotionType PANEL
    PROPERTIES(o) name, id SHOWIF showIDs()
    
    EDIT PromotionType OBJECT o
;

FORM promotionTypes 'Тип акции'
    OBJECTS o = PromotionType
    PROPERTIES(o) READONLY name, id SHOWIF showIDs()
    PROPERTIES(o) NEWSESSION NEW, EDIT, DELETE
;

FORM dialogPromotionTypes 'Тип акции'
    OBJECTS o = PromotionType
    PROPERTIES(o) READONLY name
    
    LIST PromotionType OBJECT o
;

NAVIGATOR {
    priceListMasterData {
        NEW promotionTypes;
    }
}

promotionType 'Тип акции' = DATA PromotionType (Promotion);
namePromotionType 'Тип акции' (Promotion promotion) = name(promotionType(promotion));

promotionType 'Тип акции' = DATA PromotionType (PromotionDetail);
namePromotionType 'Тип акции' (PromotionDetail detail) = name(promotionType(detail));
overPromotionType 'Тип акции' (PromotionDetail detail) = OVERRIDE promotionType(detail), promotionType(promotion(detail));
nameOverPromotionType 'Тип акции' (PromotionDetail detail) = name(overPromotionType(detail));

CLASS ExtraPromotionType 'Тип подакции';
TABLE extraPromotionType (ExtraPromotionType);

id 'Код' = DATA STRING[100] (ExtraPromotionType) IN id CHARWIDTH 5;
extraPromotionType(id) = GROUP AGGR (ExtraPromotionType type) BY id(type);

name 'Наименование' = DATA ISTRING[100] (ExtraPromotionType) IN id CHARWIDTH 20;

FORM extraPromotionType 'Тип подакции'
    OBJECTS o = ExtraPromotionType PANEL
    PROPERTIES(o) id, name
    
    EDIT ExtraPromotionType OBJECT o
;

FORM extraPromotionTypes 'Тип подакции'
    OBJECTS o = ExtraPromotionType
    PROPERTIES(o) READONLY id, name
    PROPERTIES(o) NEWSESSION NEW, EDIT, DELETE
;

FORM dialogExtraPromotionTypes 'Тип подакции'
    OBJECTS o = ExtraPromotionType
    PROPERTIES(o) READONLY id, name
    
    LIST ExtraPromotionType OBJECT o
;

NAVIGATOR {
    masterData {
        NEW extraPromotionTypes;
    }
}

extraPromotionType 'Тип подакции' = DATA ExtraPromotionType (Promotion);
nameExtraPromotionType 'Тип подакции' (Promotion promotion) = name(extraPromotionType(promotion));

extraPromotionType 'Тип подакции' = DATA ExtraPromotionType (PromotionDetail);
nameExtraPromotionType 'Тип подакции' (PromotionDetail detail) = name(extraPromotionType(detail));
overExtraPromotionType 'Тип подакции' (PromotionDetail detail) = OVERRIDE extraPromotionType(detail), extraPromotionType(promotion(detail));
nameOverExtraPromotionType 'Тип подакции' (PromotionDetail detail) = name(overExtraPromotionType(detail));

sku 'Товар' = DATA Sku (PromotionDetail) INDEXED;

idBarcodeSku 'Штрихкод' (PromotionDetail detail) = idBarcode(sku(detail)) IN id;
nameSkuGroup2 'Направление' (PromotionDetail detail) = nameSkuGroup2(sku(detail));
nameSkuGroup3 'Группа' (PromotionDetail detail) = nameSkuGroup3(sku(detail));
nameSkuGroup4 'Подгруппа' (PromotionDetail detail) = nameSkuGroup4(sku(detail));
nameBrand 'Бренд' (PromotionDetail detail) = nameBrand(sku(detail));
nameCustomUser 'Категорийный менеджер' (PromotionDetail detail) = nameCustomUser(skuGroup(sku(detail)));
nameSku 'Товар' (PromotionDetail detail) = name(sku(detail)) IN id;
idSku 'Код' (PromotionDetail detail) = id(sku(detail)) IN id;

TABLE promotionDetailLegalEntity (PromotionDetail, LegalEntity);
countStocks 'Количество складов компании' = DATA INTEGER (PromotionDetail, LegalEntity);
nameSuppliers 'Поставщики' (PromotionDetail detail) = GROUP CONCAT name(LegalEntity company) IF countStocks(detail, company), ', ' ORDER company CHARWIDTH 30;
in (Promotion p, LegalEntity c) = TRUE IF [ GROUP SUM countStocks(PromotionDetail detail, c) BY promotion(detail)](p);

recalculateCountStocks (PromotionDetail d)  { 
    countStocks(d, LegalEntity company) <- (GROUP SUM 1 IF prevPriceA(defaultPriceListType(),sku(d), Stock stock, company, toDateTime(fromDate(d))));
}

CLASS Flyer 'Листовка';
TABLE flyer (Flyer);

id 'Код' = DATA STRING[100] (Flyer) IN id CHARWIDTH 5;
flyer(id) = GROUP AGGR (Flyer flyer) BY id(flyer);

name 'Наименование' = DATA ISTRING[100] (Flyer) IN id CHARWIDTH 20;

FORM flyer 'Листовка'
    OBJECTS o = Flyer PANEL
    PROPERTIES(o) id, name
    
    EDIT Flyer OBJECT o
;

FORM flyers 'Листовки'
    OBJECTS o = Flyer
    PROPERTIES(o) READONLY id, name
    PROPERTIES(o) NEWSESSION NEW, EDIT, DELETE
;

FORM dialogFlyers 'Листовки'
    OBJECTS o = Flyer
    PROPERTIES(o) READONLY id, name
    
    LIST Flyer OBJECT o
;

NAVIGATOR {
    priceListMasterData {
        NEW flyers;
    }
}

flyer 'Листовка' = DATA Flyer (Promotion);
nameFlyer 'Листовка' (Promotion promotion) = name(flyer(promotion));

flyer 'Листовка' = DATA Flyer (PromotionDetail);
nameFlyer 'Листовка' (PromotionDetail detail) = name(flyer(detail));
overFlyer 'Листовка' (PromotionDetail detail) = OVERRIDE flyer(detail), flyer(promotion(detail));
nameOverFlyer 'Листовка' (PromotionDetail detail) = name(overFlyer(detail));

paymentForFlyer 'Оплата участия в листовке' = DATA BOOLEAN (PromotionDetail);

supplierPromotionDiscount 'Скидка поставщика в Акцию' = DATA NUMERIC[8,3] (PromotionDetail);

valueVAT 'Ставка НДС' = DATA NUMERIC[10,5] (PromotionDetail);
recalculateValueVAT (PromotionDetail d)  { 
    valueVAT(d) <- valueVAT(sku(d));
}

price 'Стандартная цена без НДС' = DATA NUMERIC[16,4] (PromotionDetail);

overPrice = ABSTRACT NUMERIC[16,4] (PromotionDetail);
recalculatePrice (PromotionDetail d)  { 
    price(d) <- OVERRIDE overPrice(d), (GROUP MAX prevPriceA(defaultPriceListType(), sku(d), Stock stock, toDateTime(fromDate(d)))) WHERE NOT CHANGED(price(d));
}

markup 'Стандартная наценка' = DATA NUMERIC[8,3] (PromotionDetail);
retailPrice 'Розничная цена стандартная' = DATA NUMERIC[16,4] (PromotionDetail);

promotionPrice 'Цена для акции без НДС' = DATA NUMERIC[16,4] (PromotionDetail);
promotionVATPrice 'Цена для акции с НДС' = DATA NUMERIC[16,4] (PromotionDetail);
promotionMarkup 'Акционная наценка' = DATA NUMERIC[8,3] (PromotionDetail);
proposedPromotionPrice 'Предлагаемая акционная цена' = DATA NUMERIC[16,4] (PromotionDetail);
promotionMarkupSum 'Сумма акционной наценки' = DATA NUMERIC[16,4] (PromotionDetail);
discount 'Акционная скидка' = DATA NUMERIC[8,3] (PromotionDetail);

CLASS PromoType 'Тип промо';
TABLE promoType (PromoType);

id 'Код' = DATA STRING[100] (PromoType) IN id CHARWIDTH 5;
promoType(id) = GROUP AGGR (PromoType type) BY id(type);

name 'Наименование' = DATA ISTRING[100] (PromoType) IN id CHARWIDTH 20;

FORM promoType 'Тип промо'
    OBJECTS o = PromoType PANEL
    PROPERTIES(o) id, name
    
    EDIT PromoType OBJECT o
;

FORM promoTypes 'Тип промо'
    OBJECTS o = PromoType
    PROPERTIES(o) READONLY id, name
    PROPERTIES(o) NEWSESSION NEW, EDIT, DELETE
;

FORM dialogPromoTypes 'Тип промо'
    OBJECTS o = PromoType
    PROPERTIES(o) READONLY id, name
    
    LIST PromoType OBJECT o
;

NAVIGATOR {
    masterData {
        NEW promoTypes;
    }
}

promoType 'Тип промо' = DATA PromoType (Promotion);
namePromoType 'Тип промо' (Promotion promotion)= name(promoType(promotion));
 
promoType 'Тип промо' = DATA PromoType (PromotionDetail);
namePromoType 'Тип промо' (PromotionDetail detail) = name(promoType(detail));
overPromoType 'Тип промо' (PromotionDetail detail) = OVERRIDE promoType(detail), promoType(promotion(detail));
nameOverPromoType 'Тип промо' (PromotionDetail detail) = name(overPromoType(detail)); 

CLASS DiscountType 'Тип скидки';
TABLE discountType (DiscountType);

id 'Код' = DATA STRING[100] (DiscountType) IN base;
discountType(id) = GROUP AGGR (DiscountType type) BY id(type);

name 'Наименование' = DATA ISTRING[100] (DiscountType) IN base CHARWIDTH 10;

discountType 'Тип скидки' = DATA DiscountType (PromotionDetail);
nameDiscountType 'Тип скидки' (PromotionDetail detail) = name(discountType(detail));

CLASS DiscountingType 'Тип начисления скидки';
TABLE discountingType (DiscountingType);

id 'Код' = DATA STRING[100] (DiscountingType) IN base;
discountingType(id) = GROUP AGGR (DiscountingType type) BY id(type);

name 'Наименование' = DATA ISTRING[100] (DiscountingType) IN base CHARWIDTH 10;

discountingType 'Тип начисления скидки/бонуса' = DATA DiscountingType (PromotionDetail);
nameDiscountingType 'Тип начисления скидки/бонуса' (PromotionDetail detail) = name(discountingType(detail));

//актуальные виды акции
subway 'Метро' = DATA BOOLEAN (PromotionDetail);
radio 'Радио' = DATA BOOLEAN (PromotionDetail);
billboard 'Билборд' = DATA BOOLEAN (PromotionDetail);
TVcommercial 'ТВ реклама' = DATA BOOLEAN (PromotionDetail);
stockTVcommercial 'ТВ реклама в магазинах' = DATA BOOLEAN (PromotionDetail);
elevator 'Лифты' = DATA BOOLEAN (PromotionDetail);
sms 'СМС рассылка' = DATA BOOLEAN (PromotionDetail);
email 'E-mail рассылка' = DATA BOOLEAN (PromotionDetail);

comment 'Замечания' = DATA ISTRING[255] (PromotionDetail) CHARWIDTH 50;

approved 'Утвержден' = DATA BOOLEAN (PromotionDetail);

notUseApprovedPromotion 'Не использовать признак Утвержден' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES () notUseApprovedPromotion
;

DESIGN options { 
    price {
        NEW promotionPrice {
            caption = 'Акции';
            MOVE PROPERTY(notUseApprovedPromotion());        
        }
    } 
}

//политика безопасности
proposeDate 'Дата предложения' = DATA DATE (Promotion);
approveDate 'Дата утверждения'= DATA DATE (Promotion);

@addRoleApplicationSetting(allowEditProposedPromotionDetail, 'Разрешить редактировать строки акции после даты предложения', BOOLEAN);
@addRoleApplicationSetting(allowEditApprovedPromotionDetail, 'Разрешить редактировать строки акции после даты утверждения', BOOLEAN);

showApproved (PromotionDetail detail) = currentDate() >= proposeDate(promotion(detail)) AND NOT notUseApprovedPromotion();
showExcluded (PromotionDetail detail) = currentDate() >= approveDate(promotion(detail));

CONSTRAINT DROPPED(PromotionDetail detail IS PromotionDetail) AND 
    ((currentDate() >= proposeDate(PREV(promotion(detail))) AND NOT allowEditProposedPromotionDetail(mainRole(currentUser()))) OR  
     (currentDate() >= approveDate(PREV(promotion(detail))) AND NOT allowEditApprovedPromotionDetail(mainRole(currentUser()))) )
        MESSAGE 'Запрещено удалять строки акции после наступления даты предложения (утверждения)';
CONSTRAINT SET(PromotionDetail detail IS PromotionDetail) AND    
    ((currentDate() >= proposeDate((promotion(detail))) AND NOT allowEditProposedPromotionDetail(mainRole(currentUser()))) OR  
     (currentDate() >= approveDate((promotion(detail))) AND NOT allowEditApprovedPromotionDetail(mainRole(currentUser()))) )
        MESSAGE 'Запрещено добавлять строки акции после наступления даты предложения (утверждения)';
CONSTRAINT DROPCHANGED(sku(PromotionDetail detail)) AND 
   ((currentDate() >= proposeDate((promotion(detail))) AND NOT allowEditProposedPromotionDetail(mainRole(currentUser()))) OR  
    (currentDate() >= approveDate((promotion(detail))) AND NOT allowEditApprovedPromotionDetail(mainRole(currentUser()))) )
        MESSAGE 'Запрещено изменять товар после наступления даты предложения (утверждения)';

//CONSTRAINT DROPCHANGED(PromotionDetail detail) AND currentDate() >= approveDate(promotion(detail)) AND NOT allowEditApprovedPromotionDetail(mainRole(currentUser()))
    //MESSAGE 'Запрещено удалять строки акции после даты утверждения';
CONSTRAINT (CHANGED(price(PromotionDetail detail)) OR CHANGED(retailPrice(detail)) OR CHANGED(approved(detail))) AND 
    currentDate() >= approveDate(PREV(promotion(detail))) AND NOT allowEditApprovedPromotionDetail(mainRole(currentUser()))
        MESSAGE 'Запрещено изменять в строке акции Стандартную цену без НДС, Розничную цену и Утверждение';

CONSTRAINT CHANGED (approveDate(Promotion p)) AND (PREV (approveDate(p)) <= currentDate() OR approveDate(p) <= currentDate())
    AND NOT allowEditApprovedPromotionDetail(mainRole(currentUser()))
    MESSAGE 'Запрещено изменять дату утверждения после ее наступления';

//расчетные данные
backgroundCur 'Цвет' (PromotionDetail detail) = RGB(218,255,196) IF detail IS PromotionDetail;
backgroundAfter 'Цвет' (PromotionDetail detail) = RGB(255,203,197) IF detail IS PromotionDetail;
backgroundPromo 'Цвет' (PromotionDetail detail) = RGB(255,157,146) IF detail IS PromotionDetail;

@defineMovementSku(promotionDetail); //-- показываем по нажатию правой клавиши движение товара
@defineBalancesSku(promotionDetail); //-- показываем по нажатию правой клавиши остатки товара

@defineBarcodeSku(promotionDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара

@defineMovementPriceSku(promotionDetail); //-- показываем по нажатию правой клавиши изменение цены товара

@defineInfoSku(promotionDetail); //-- показываем по нажатию правой клавиши информацию по товару

lastPromotionPrice 'Время последней акции' (PromotionDetail d)= fromDateTime(lastPromotionPriceListDetailB(sku(d), toDateTime(fromDate(d))));

backgroundDetail = ABSTRACT CASE COLOR (PromotionDetail);

isReadOnly = ABSTRACT CASE BOOLEAN (PromotionDetail);

FORM promotion 'Акция'
    OBJECTS p = Promotion PANEL 
    PROPERTIES(p) nameNumerator, series, number, name, fromDate, toDate, namePromotionType, nameExtraPromotionType, 
                  namePromoType, nameFlyer, proposeDate, approveDate
    
    OBJECTS d = PromotionDetail
    PROPERTIES(d) READONLYIF isReadOnly(d) BACKGROUND backgroundDetail(d) idBarcodeSku, nameSkuGroup2, nameSkuGroup3, nameSkuGroup4, nameCustomUser, 
                  nameBrand, nameSku, valueVAT, nameSuppliers, paymentForFlyer, supplierPromotionDiscount
    PROPERTIES(d) READONLYIF isReadOnly(d) BACKGROUND backgroundCur(d) price, markup, retailPrice
    PROPERTIES(d) READONLYIF isReadOnly(d) BACKGROUND backgroundAfter(d) promotionPrice BACKGROUND backgroundPromo(d), promotionVATPrice, promotionMarkup,
                  proposedPromotionPrice BACKGROUND backgroundPromo(d), promotionMarkupSum, discount
    PROPERTIES(d) READONLY lastPromotionPrice
    PROPERTIES(d) READONLYIF isReadOnly(d) nameOverPromotionType, nameOverFlyer, comment, approved SHOWIF showApproved(d), NEW, deleted = DELETE GRID
    FILTERS promotion(d) == p,
            accessManager(currentUser(), sku(d)) OR NOT sku(d)
            
    OBJECTS dd = PromotionDetail
    PROPERTIES(dd) READONLYIF isReadOnly(d) idBarcodeSku, nameSku, nameOverExtraPromotionType, nameOverPromoType, nameDiscountType, nameDiscountingType, 
                   subway, radio, billboard, TVcommercial, stockTVcommercial, elevator, sms, email, 
                   changedTime, changedNameUser, changedHostnameComputer
    ORDERS nameSku(dd)
    FILTERS promotion(dd) == p,
            accessManager(currentUser(), sku(dd)) OR NOT sku(dd)
    
    TREE stockTree a=BPSTRING[3], sg = StockGroup PARENT parent(sg)
    PROPERTIES READONLY VALUE(a), sgTreeName = name(sg)
    PROPERTIES(p) allStocks[Promotion] DRAW a BACKGROUND backgroundAllStocks(p)
    PROPERTIES(p, sg) in BACKGROUND backgroundIn(p,sg)
    ORDERS sgTreeName
    FILTERS stringEqualsAll(a)
    FILTERS countCompanyStock(sg)
    
    OBJECTS ts = Stock
    PROPERTIES READONLY  name(ts), nameLegalEntity(ts)
    PROPERTIES(p, ts)    in BACKGROUND backgroundIn(p,ts)
    FILTERS ts IS Stock AND NOT sg IS StockGroup OR isParent(sg, ts),
                isCompany(ts)
    FILTERGROUP filters2
                FILTER 'Выбранные склады' in(p, ts) 'F10'
    FILTERGROUP inactiveStock FILTER 'Активный' active(ts) 'ctrl F10' DEFAULT
                 
    EDIT Promotion OBJECT p
;

DESIGN promotion {
    NEW top {
        horizontal = TRUE;
        NEW headContainer {
            caption = 'Шапка документа';       
            type = CONTAINERV;
            MOVE GROUP (numbered, p);
            NEW first {
                horizontal = TRUE;
                MOVE PROPERTY(name(p));                
            }
            NEW second {
                horizontal = TRUE;
                MOVE PROPERTY(namePromotionType(p));
                MOVE PROPERTY(nameExtraPromotionType(p));  
            }
            NEW third {
                horizontal = TRUE;
                 MOVE PROPERTY(namePromoType(p));
                 MOVE PROPERTY(nameFlyer(p));
            }
            NEW fourth {
                caption = 'Период действия';
                horizontal = TRUE;
                MOVE PROPERTY(fromDate(p));
                MOVE PROPERTY(toDate(p));
            }
            NEW fifth {
                caption = 'Даты закрытия доступа';
                horizontal = TRUE;
                MOVE PROPERTY(proposeDate(p));
                MOVE PROPERTY(approveDate(p));
            }
        }
    }
    NEW detailContainer {
        fill = 1;
        tabbed = TRUE;
        MOVE BOX(d);
        MOVE BOX(dd) { caption = 'Строка акции (доп.)'; }
        NEW stocks {
            fill = 1;
            caption = 'Склады';
            horizontal = TRUE;
            NEW stockGroups {
                fill = 1;
                MOVE BOX(TREE stockTree) {
                    caption = 'Группы складов';
                }
            }
            MOVE BOX(ts) {
                fill = 2;
            }
        }
    }
    MOVE TOOLBARBOX;
}

isActive(Promotion promotion, DATE date) = (fromDate(promotion) <= (date AS DATE) AND toDate(promotion) >= date) OR
                                                 (fromDate(promotion) <= (date AS DATE) AND NOT toDate(promotion));
isActive(Promotion promotion) = isActive(promotion, currentDate());

FORM promotions 'Акции'
    OBJECTS p = Promotion
    PROPERTIES(p) READONLY series, number, seriesNumber, name, fromDate, toDate, namePromotionType, nameExtraPromotionType, 
                           namePromoType, nameFlyer, proposeDate, approveDate, stocks
    PROPERTIES(p) NEWSESSION NEW, EDIT, DELETE
    ORDERS fromDate(p), name(p) 
    
    OBJECTS d = PromotionDetail
    PROPERTIES(d) READONLY BACKGROUND backgroundDetail(d) idBarcodeSku, nameSkuGroup2, nameSkuGroup3, nameSkuGroup4, nameCustomUser, nameBrand, 
                  nameSku, nameOverPromotionType, nameOverExtraPromotionType, nameSuppliers, nameOverFlyer, paymentForFlyer, supplierPromotionDiscount, valueVAT
    PROPERTIES(d) READONLY BACKGROUND backgroundCur(d) price, markup, retailPrice
    PROPERTIES(d) READONLY BACKGROUND backgroundAfter(d) promotionPrice BACKGROUND backgroundPromo(d), promotionVATPrice, promotionMarkup,
                  proposedPromotionPrice BACKGROUND backgroundPromo(d), promotionMarkupSum, discount
    PROPERTIES(d) READONLY nameOverPromoType, nameDiscountType, nameDiscountingType, changedTime, 
                  changedNameUser, changedHostnameComputer, approved SHOWIF showApproved(d)
    ORDERS nameSku(d)
    FILTERS promotion(d) == p,
            accessManager(currentUser(), sku(d)) OR NOT sku(d)
    
    FILTERGROUP active
                FILTER 'Текущие' isActive(p) 'F11'
                FILTER 'Активные' isActive(p) OR (fromDate(p) > currentDate()) 'F10' DEFAULT
    
    LIST Promotion OBJECT p
;

DESIGN promotions {
    NEW documentContainer BEFORE TOOLBARBOX {
        fill = 1;
        horizontal = FALSE;
        MOVE BOX(p);
        NEW detailContainer {
            tabbed = TRUE;
            fill = 1;
            MOVE BOX(d);
        }
    }
}

recalculatePrices (PromotionDetail d)  { 
    recalculateValueVAT(d);
    recalculatePrice(d);
    
    recalculateCountStocks (d);
}

recalculatePrices 'Пересчитать цены поставщиков' ()  { 
    FOR [ FILTER promotion.d](PromotionDetail d) DO
        recalculatePrices(d);
} CONFIRM;

EXTEND FORM promotion
    PROPERTIES recalculatePrices() DRAW d TOOLBAR
;

retailPriceListType = DATA LedgerPriceListType ();
nameRetailPriceListType 'Вид стандартной цены для акции' () = name(retailPriceListType());
EXTEND FORM options PROPERTIES nameRetailPriceListType();

DESIGN options { 
    promotionPrice {
        MOVE PROPERTY(nameRetailPriceListType());        
    }
}

WHEN LOCAL (CHANGED(sku(PromotionDetail detail)) OR CHANGED(fromDate(detail))) DO {
    recalculatePrices(detail);
    retailPrice(detail) <- (GROUP MAX prevPriceA(retailPriceListType(), sku(detail), Stock stock, toDateTime(fromDate(detail))) IF in(promotion(detail), stock)) WHERE NOT CHANGED(retailPrice(detail));
}
WHEN LOCAL (CHANGED(promotionPrice(PromotionDetail detail)) OR CHANGED(price(detail))) AND price(detail) > 0.0 DO {
    supplierPromotionDiscount(detail) <- NUMERIC[8,3]((1.0 - promotionPrice(detail)/price(detail)) * 100.0);
}
WHEN LOCAL (CHANGED(retailPrice(PromotionDetail detail)) OR CHANGED(valueVAT(detail)) OR CHANGED(price(detail))) AND price(detail) > 0.0 DO {
    markup(detail) <- NUMERIC[8,3]((((retailPrice(detail)/(1.0+valueVAT(detail)/100.0))-price(detail))/price(detail)) * 100.0);
}
WHEN LOCAL (CHANGED(promotionPrice(PromotionDetail detail)) OR CHANGED(valueVAT(detail))) DO {
    promotionVATPrice(detail) <- NUMERIC[16,4](round2(promotionPrice(detail)*(1.0+valueVAT(detail)/100.0)));
}
WHEN LOCAL (CHANGED(promotionMarkupSum(PromotionDetail detail)) OR CHANGED(promotionPrice(detail))) AND promotionPrice(detail) > 0.0 DO {
    promotionMarkup(detail) <- NUMERIC[8,3]((promotionMarkupSum(detail)/promotionPrice(detail)) * 100.0);
}

WHEN LOCAL (CHANGED(proposedPromotionPrice(PromotionDetail detail)) OR CHANGED(retailPrice(detail))) AND retailPrice(detail) > 0.0 DO {
    discount(detail) <- NUMERIC[8,3]((1.0-proposedPromotionPrice(detail)/retailPrice(detail)) * 100.0);
}
WHEN LOCAL (CHANGED(discount(PromotionDetail detail)) AND NOT CHANGED (proposedPromotionPrice(detail))) DO {
    proposedPromotionPrice(detail) <- NUMERIC[16,4] (round2(retailPrice(detail) * (1.0 - discount(detail) / 100)));
}
WHEN LOCAL (CHANGED(promotionMarkup(PromotionDetail detail))) AND promotionPrice(detail) > 0.0 DO {
    proposedPromotionPrice(detail) <- NUMERIC[16,4] (round2((promotionPrice(detail) * (1.0 (+) promotionMarkup(detail) / 100))*(1.0+valueVAT(detail)/100.0)));;
}
WHEN LOCAL GOAFTER proposedPromotionPrice[PromotionDetail] (CHANGED(proposedPromotionPrice(PromotionDetail detail)) OR CHANGED(valueVAT(detail)) OR CHANGED(promotionPrice(detail)) OR CHANGED(promotionMarkup(detail))) DO {
    promotionMarkupSum(detail) <- NUMERIC[16,4]((proposedPromotionPrice(detail)/(1.0+valueVAT(detail)/100.0))-promotionPrice(detail));
}

supplier 'Поставщик' (Stock stock, PromotionDetail detail) = companyA(defaultPriceListType(), sku(detail), stock, toDateTime(fromDate(detail)));
nameSupplier 'Поставщик' (Stock stock, PromotionDetail detail) = name(supplier(stock,detail));

currentBalance 'Текущий остаток' (Stock stock, PromotionDetail detail) = currentBalance(sku(detail),stock);
averageSold 'Продаж в день' (Stock stock, PromotionDetail detail) = averageSold(sku(detail),stock);

createOrder 'Создать заказ' (Stock stock, PromotionDetail detail)  { 
    NEWSESSION {
        NEW o = Purchase.UserOrder {
            customer(o) <- legalEntity(stock);
            customerStock(o) <- stock;
            supplier(o) <- supplier(stock,detail);
            
            NEW d = Purchase.UserOrderDetail {
                order(d) <- o;
                sku(d) <- sku(detail);
            }
            
            SHOW userOrder OBJECTS o = o DOCKED;
        }
    }
} TOOLBAR;

FORM promotionsStock 'Акции (магазин)'
    OBJECTS s = Stock PANEL
    PROPERTIES(s) name SELECTOR
    FILTERS isCompany(s),
            accessCompany(s)

    OBJECTS p = Promotion
    PROPERTIES(p) READONLY name, fromDate, toDate, proposeDate, approveDate, stocks
    ORDERS toDate(p) DESC, name(p)
    FILTERS in(p,s) OR NOT stocks(p)
    FILTERGROUP current
        FILTER 'Действующие' currentDate() >= fromDate(p) AND currentDate() <= toDate(p) DEFAULT
    
    OBJECTS d = PromotionDetail
    PROPERTIES(d) READONLY idBarcodeSku, nameSku, nameOverPromotionType, nameOverExtraPromotionType, nameOverFlyer
    PROPERTIES(s,d) currentBalance, averageSold
    PROPERTIES(d) READONLY BACKGROUND backgroundPromo(d) promotionPrice, proposedPromotionPrice
    PROPERTIES(d) READONLY nameOverPromoType, nameDiscountType, nameDiscountingType, comment
    ORDERS nameSku(d)
    FILTERS promotion(d) == p,
            accessManager(currentUser(), sku(d)) OR NOT sku(d),
            IF notUseApprovedPromotion() THEN d IS PromotionDetail ELSE approved(d) 
    PROPERTIES nameSupplier(s,d) AFTER nameOverExtraPromotionType(d), createOrder(s,d)
;

DESIGN promotionsStock {
    NEW documentContainer BEFORE TOOLBARBOX {
        fill = 1;
        horizontal = FALSE;
        
        NEW filtersBox {                       
            fill = 1;
            MOVE BOX(s);
            
            MOVE BOX(p) {
                fill = 1;
            }
        }
        MOVE BOX(d) {
            fill = 2;
        }
    }
}

NAVIGATOR {
    priceListDocuments {
        NEW promotions;
        NEW promotionsStock;
    }
}

createOrderSupplier 'Создать заказ по поставщику' (Stock stock, PromotionDetail detail)  { 
    LOCAL NESTED in = BOOLEAN (PromotionDetail);
    in(PromotionDetail d) <-  [ FILTER promotionsStock.d](d);
    NEWSESSION {
        NEW o = Purchase.UserOrder {
            customer(o) <- legalEntity(stock);
            customerStock(o) <- stock;
            supplier(o) <- supplier(stock,detail);
            
            FOR in(PromotionDetail d) AND supplier(stock,d) == supplier(stock,detail) NEW od = Purchase.UserOrderDetail DO {
                order(od) <- o;
                sku(od) <- sku(d);
            }
            
            SHOW userOrder OBJECTS o = o DOCKED;
        }
    }
} TOOLBAR;

EXTEND FORM promotionsStock
    PROPERTIES createOrderSupplier(s,d)
;

//-------------------Создание прайсов------------------

promotion = DATA Promotion (UserPriceList);
namePromotion 'Акция' (UserPriceList p)= name(promotion(p)) IN documentPrm ;

// Операция по умолчанию для поставщиков
defaultSupplierOperation = DATA PriceList.Operation();
nameDefaultSupplierOperation 'Операция для протокола согласования цен по акции' = name(defaultSupplierOperation());
EXTEND FORM options
    PROPERTIES() nameDefaultSupplierOperation
;
DESIGN options {
    promotionPrice {
        MOVE PROPERTY(nameDefaultSupplierOperation());
    }
}

overCreatePriceList  ABSTRACT LIST (Promotion, UserPriceList);
overCreatePriceListDetail  ABSTRACT LIST (PromotionDetail, UserPriceListDetail);

createPriceListMain (Promotion p) {
    NEW priceList = UserPriceList {
        isPosted(priceList) <- TRUE;
        fromDate(priceList) <- fromDate(p);
        fromTime(priceList) <- 00:00;
        fromPriceBeforeDate(priceList) <- subtract(fromDate(p), 1);
        toDate(priceList) <- toDate(p);
        operation(priceList) <- (GROUP LAST PriceList.Operation o IF isPromotion(o) ORDER o);
        IF NOT skipConstraintPriceBefore(operation(priceList)) THEN {
            fromPriceBeforeTime(priceList) <- 00:00;
            toPriceBeforeDate(priceList) <- sum(toDate(p), 1);
            toPriceBeforeTime(priceList) <- 23:59;
        }
        company(priceList) <- dataLegalEntity(operation(priceList));
        currency(priceList) <- defaultCurrency(operation(priceList));
        note(priceList) <- name(p);
        
        allStocks(priceList) <- allStocks(p);
        dataIn(priceList, StockGroup stockGroup) <- dataIn(p,stockGroup);
        dataIn(priceList, Stock stock) <- dataIn(p,stock);
    
        in(priceList, DataPriceListType type) <- change(type, operation(priceList));
        show(priceList, DataPriceListType type) <- show(type, operation(priceList));
        
        overCreatePriceList(p,priceList);
        
        FOR promotion(PromotionDetail pd) == p NEW detail = UserPriceListDetail DO {
            priceList(detail) <- priceList;
            sku(detail) <- sku(pd);
            price(detail, DataPriceListType type) <- proposedPromotionPrice(pd) WHERE in(priceList, type);
            priceBefore(detail) <- retailPrice(pd);
            
            overCreatePriceListDetail(pd,detail);
        }
        promotion(priceList) <- p;
    }
}

createPriceList 'Создать прайсы' (Promotion p, BOOLEAN skipCompany)  { 
    IF NOT stocks(p) THEN {
        MESSAGE 'Не выбран ни один склад. Прайсы не созданы';
        RETURN;
    }
    NEWSESSION {
        createPriceListMain(p);
        
        IF NOT skipCompany THEN {
            FOR in(p, LegalEntity company) AND (GROUP SUM 1 IF promotion(PromotionDetail pd) == p AND countStocks(pd,company) AND NOT price(pd) = promotionPrice(pd)) NEW priceList = UserPriceList DO {
                isPosted(priceList) <- TRUE;
                fromDate(priceList) <- fromDate(p);
                fromTime(priceList) <- 00:00;
                toDate(priceList) <- toDate(p);
                operation(priceList) <- defaultSupplierOperation();
                company(priceList) <- company;
                currency(priceList) <- defaultCurrency(operation(priceList));
                note(priceList) <- name(p);
                
                dataIn(priceList, Stock stock) <- TRUE IF [ GROUP SUM 1 IF prevPriceA(defaultPriceListType(), sku(PromotionDetail d), stock, company, DATETIME dateTime) AND in(promotion(d),stock) BY promotion(d), dateTime](p, toDateTime(fromDate(p))) ;
                
                in(priceList, DataPriceListType type) <- TRUE WHERE type == defaultPriceListType();
                show(priceList, DataPriceListType type) <- TRUE WHERE type == defaultPriceListType();
                
                overCreatePriceList(p,priceList);
                
                FOR promotion(PromotionDetail pd) == p AND countStocks(pd,company) AND NOT price(pd) = promotionPrice(pd) NEW detail = UserPriceListDetail DO {
                    priceList(detail) <- priceList;
                    sku(detail) <- sku(pd);
                    price(detail, DataPriceListType type) <- promotionPrice(pd) WHERE in(priceList, type);
                    
                    overCreatePriceListDetail(pd,detail);
                }
                promotion(priceList) <- p;
            }
        }
        APPLY;
    }
} CONFIRM;

createPriceList 'Создать прайсы' (Promotion p)  { createPriceList(p, NULL); }

EXTEND FORM promotions
    PROPERTIES(p) createPriceList TOOLBAR
    
    OBJECTS pl = UserPriceList
    PROPERTIES(pl) READONLY isPosted, number, series, date, time, fromDate, fromTime, toDate, toTime, countPriceListDetail,
                            nameOperation, nameCurrency, nameCompany, nameCompanyStock, priceListTypes, stocks, note
    PROPERTIES(pl) NEWSESSION EDIT, DELETE
    FILTERS promotion(pl) == p
;

DESIGN promotions {
    detailContainer {
        MOVE BOX(pl);
    }
}

//----------------------- Запрет на участие товара в двух акциях -------------------------------
banSkuMultiPromotion 'Запретить участие товара в нескольких акциях' = DATA BOOLEAN () COMPLEX;
EXTEND FORM options PROPERTIES banSkuMultiPromotion();
DESIGN options { 
    items {
        MOVE PROPERTY(banSkuMultiPromotion()) BEFORE PROPERTY(replaceSpacesInItemId());        
    } 
}

countCommonStocks (PromotionDetail d1, PromotionDetail d2) = GROUP SUM 1 IF in(promotion(d1), DepartmentStore ds) AND in(promotion(d2), ds);

CONSTRAINT banSkuMultiPromotion() AND (SETCHANGED(sku(PromotionDetail d)) OR SETCHANGED(fromDate(d)) OR SETCHANGED(toDate(d)) OR CHANGED(stocks(d))) AND
    sku(PromotionDetail dd) == sku(d) AND dd != d AND fromDate(d) <= toDate(dd) AND toDate(d) >= fromDate(dd) AND countCommonStocks(d,dd)
            MESSAGE 'Товару запрещено участвовать в нескольких акциях';
            
EXTEND FORM itemInfo
    OBJECTS pd = PromotionDetail
    PROPERTIES(pd) READONLY series, number, name, fromDate, toDate, namePromotionType, nameExtraPromotionType, namePromoType, nameOverFlyer
    PROPERTIES  READONLY proposeDate 'Дата предложения' = proposeDate(promotion(pd)), approveDate 'Дата утверждения' = approveDate(promotion(pd)) 
    
    PROPERTIES(pd) READONLY BACKGROUND backgroundCur(pd) price, markup, retailPrice
    PROPERTIES(pd) READONLY BACKGROUND backgroundAfter(pd) promotionPrice BACKGROUND backgroundPromo(pd), promotionVATPrice, promotionMarkup,
                  proposedPromotionPrice BACKGROUND backgroundPromo(pd), promotionMarkupSum, discount
    PROPERTIES(pd) READONLY nameOverPromoType, nameDiscountType, nameDiscountingType, changedTime, 
                  changedNameUser, changedHostnameComputer, approved SHOWIF showApproved(pd)
    PROPERTIES  READONLY stocks 'Склады' = stocks(promotion(pd))         
    FILTERS sku(pd)==s, 
            approved(pd)
    FILTERGROUP stockPromo
        FILTER 'По складу' in(promotion(pd),st1)        
;
DESIGN itemInfo{
    bottomContainer{
        MOVE BOX(pd){
            caption='По акциям';
        }
    }
}