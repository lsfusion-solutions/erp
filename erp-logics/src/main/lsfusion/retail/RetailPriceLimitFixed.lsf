MODULE RetailPriceLimitFixed;

REQUIRE PricingPurchase, PriceList, RepricingPriceList, ItemManager, PriceListDashboard, PricingProductionOutput, PriceListPromotion;//, PriceListOver;

NAMESPACE RetailPriceLimitFixed;

TABLE retailPrice(Sku,Stock);
maxLimitRetailPrice 'Максимальная розничная цена' = DATA NUMERIC[16,4] (Sku, Stock) TABLE retailPrice;
dateTimeLimitRetailPrice 'Дата/время контроля' = DATA DATETIME () PREREAD;

dataStepPercLimitRetailPrice '% Доступного отклонения' = DATA NUMERIC[8,3] () PREREAD;
stepPercLimitRetailPrice '% Доступного отклонения' = OVERRIDE dataStepPercLimitRetailPrice(), 0.0;
checkRetailPrice 'Контроль розничных цен' = DATA BOOLEAN () PREREAD;

//-- Процент за месяц будем задавать на первое число месяца. Для удобства расчета
dataStepPercLimitRetailPrice '% Доступного отклонения' = DATA NUMERIC[8,3] (DATE) PREREAD;
stepPercLimitRetailPrice '% Доступного отклонения' (DATE dt) = OVERRIDE dataStepPercLimitRetailPrice(dt), 0.0;
stepPercLimitRetailPriceCurrent '% Доступного отклонения (текущий)' () = stepPercLimitRetailPrice(firstDayOfMonth(currentDate()));

//--С 1 января 2022 г. каждое последующее изменение цены может осуществляться с учетом ее допустимого повышения за предыдущий период календарного года. 
dateFromPerc 'Дата отсчета' = DATA DATE() PREREAD; //C 1 января 2022 новая схема. Зафиксируем дату 31 декабря 2021 года
usePercMonth 'Использовать накопленный процент' = DATA BOOLEAN () PREREAD;

TABLE retailPriceMonth(Sku,Stock,DATE);
prevRetailPrice 'МРЦ предыдущего месяца' = DATA NUMERIC[16,4](Sku,Stock,DATE) TABLE retailPriceMonth;//На последний день предыдующего месяца
cumPercLimit'Накопленный процент' = DATA NUMERIC[8,3](Sku,Stock,DATE) TABLE retailPriceMonth;

cumStepPercLimit 'Накопленный процент'(Sku s, Stock st, DATE date) = OVERRIDE 
    cumPercLimit(s,st,firstDayOfMonth(date)) IF usePercMonth(),     
    dataStepPercLimitRetailPrice(firstDayOfMonth(date)) IF s IS Sku AND st IS Stock;
    
//cumStepPercLimit 'Накопленный процент'(Sku s, Stock st, DATE date) = OVERRIDE 
//                (GROUP SUM dataStepPercLimitRetailPrice(DATE dt) IF dt > lastDatePurchase(s, st) AND dt > dateFromPerc() AND dt <= (date AS DATE)) IF usePercMonth(),     
//                 dataStepPercLimitRetailPrice(firstDayOfMonth(date)) IF s IS Sku AND st IS Stock;
        
cumStepPercLimit 'Накопленный процент (текущий)'(Sku s, Stock st) = cumStepPercLimit(s,st,currentDate());


migrateStepPerc= DATA BOOLEAN ();
onStarted() + {
    IF NOT migrateStepPerc() THEN NEWSESSION {
        dateFromPerc() <- 2021_12_31; 
        dataStepPercLimitRetailPrice(2021_12_01)<- 0.9; 
        dataStepPercLimitRetailPrice(2022_01_01)<- 0.9; 
        dataStepPercLimitRetailPrice(2022_02_01)<- 0.9;   
        dataStepPercLimitRetailPrice(2022_03_01)<- 0.3;     
        dataStepPercLimitRetailPrice(2022_04_01)<- 1.2; 
        dataStepPercLimitRetailPrice(2022_05_01)<- 1.2;         
        dataStepPercLimitRetailPrice(2022_06_01)<- 1.2;                 
        dataStepPercLimitRetailPrice(2022_07_01)<- 1.2; 
        dataStepPercLimitRetailPrice(2022_08_01)<- 1.2;         
        dataStepPercLimitRetailPrice(2022_09_01)<- 1.2;    
        dataStepPercLimitRetailPrice(2022_10_01)<- 1.2; 
        dataStepPercLimitRetailPrice(2022_11_01)<- 1.2; 
        dataStepPercLimitRetailPrice(2022_12_01)<- 1.2;                                
        migrateStepPerc() <- TRUE;
        APPLY;
    }
}


maxLimitRetailPriceCustom 'МРЦ' = DATA NUMERIC[16,4] (Sku, Stock) TABLE retailPrice; // Для разовых поднятий
useCustomRetailPrice 'Использовать пользовательскую МРЦ' = DATA BOOLEAN () PREREAD;

maxLimitRetailPricePerc 'Максимальная розничная цена (шаг) текущая' (Sku s, Stock st) = OVERRIDE maxLimitRetailPriceCustom(s,st) IF useCustomRetailPrice(), 
    NUMERIC[16,4](floor(maxLimitRetailPrice(s,st)* (100.0+cumStepPercLimit(s,st, currentDate())))/100.0);

maxLimitRetailPricePerc 'Максимальная розничная цена (шаг)' (Sku s, Stock st, DATE dt) = OVERRIDE maxLimitRetailPriceCustom(s,st) IF useCustomRetailPrice(), 
    NUMERIC[16,4](floor(maxLimitRetailPrice(s,st)* (100.0+cumStepPercLimit(s,st,dt)))/100.0);

EXTEND FORM options
    PROPERTIES () checkRetailPrice, stepPercLimitRetailPrice,  useCustomRetailPrice, usePercMonth
;
DESIGN options {
    pricings {
        MOVE PROPERTY (checkRetailPrice());
        MOVE PROPERTY (stepPercLimitRetailPrice());
        MOVE PROPERTY (useCustomRetailPrice());
        MOVE PROPERTY (usePercMonth());
    }
}


@defineItemGroupValueGrid(checkLimitRetailPrice, 'Включить в контроль розничных цен', BOOLEAN) ;

dataCheckLimitRetailPrice 'Включить в контроль розничных цен' = DATA BOOLEAN (Sku);
checkLimitRetailPrice 'Включить в контроль розничных цен' (Item i) = OVERRIDE dataCheckLimitRetailPrice(i), checkLimitRetailPrice(itemGroup(i)) IN itemBase;

@defineItemGroupValueGrid(skipCheckRetailPrice, 'Исключить из контроля розничных цен', BOOLEAN) ;

dataSkipCheckRetailPrice 'Исключить из контроля розничных цен' = DATA BOOLEAN (Item);
skipCheckRetailPrice 'Исключить из контроля розничных цен' (Item i) = OVERRIDE dataSkipCheckRetailPrice(i), skipCheckRetailPrice(itemGroup(i)) IN itemBase;

EXTEND FORM item
    PROPERTIES(i) checkLimitRetailPrice, skipCheckRetailPrice
;
EXTEND FORM items
    PROPERTIES(i) READONLYIF isReadonly() checkLimitRetailPrice, skipCheckRetailPrice
;

calcCheckLimitRetailForm 'Контроль розничных цен (перегруженный)' (Item s) = checkLimitRetailPrice(s) AND NOT skipCheckRetailPrice(s);
calcCheckLimitRetailPrice 'Контроль розничных цен' (Item s) = checkRetailPrice() AND calcCheckLimitRetailForm(s);

firstPriceNotPromotion (LedgerPriceListType type, Sku sku, Stock stock, DATETIME dateTime) =
    GROUP LAST price(PriceListLedger ledger, type, stock)
          ORDER DESC fromDateTime(ledger, type, stock), ledger
          WHERE fromDateTime(ledger, type, stock) > dateTime AND NOT promotionPriceListDetailA(sku,stock,fromDateTime(ledger, type, stock))
          AND sku(ledger, type, stock) == sku;

priceANotPromotion 'Цена' (LedgerPriceListType type, Sku sku, Stock stock, DATETIME dateTime) =
    GROUP LAST price(PriceListLedger ledger, type, stock)
          ORDER fromDateTime(ledger, type, stock), ledger
          WHERE fromDateTime(ledger, type, stock) <= dateTime AND NOT toDateTime(ledger, type, stock) < dateTime AND NOT promotionPriceListDetailA(sku,stock,fromDateTime(ledger, type, stock)) 
          AND sku(ledger, type, stock)==sku COMPLEX CHARWIDTH 7;

countDaysMovedLimitRetail 'За сколько дней проверять движение' = DATA INTEGER ();
positiveBalanceLimitRetail 'Проверять наличие остатка' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES () countDaysMovedLimitRetail, positiveBalanceLimitRetail 
;
DESIGN options {
    pricings {
        NEW maxRP{
            type = CONTAINERH;
            caption = 'Параметры заполенения Максимальной РЦ (не обязательно)';
            MOVE PROPERTY (countDaysMovedLimitRetail());
            MOVE PROPERTY (positiveBalanceLimitRetail());        
        }

    }
}
useMaxLimitRetailPriceCustom  = ABSTRACT BOOLEAN();
fillMaxLimitRetailPriceCustom  ABSTRACT (DATETIME);
fillMaxLimitRetailPriceOver ABSTRACT LIST (DATETIME);

movedLimit (Sku item, Stock departmentStore, DATETIME dateTime, LONG period) =
    dateTimeLastMoved(item, departmentStore,dateTime) >= toDateTime(subtract(toDate(dateTime), period));

lastDatePurchaseCalc (stock, sku, DATETIME dateTime) = 
    GROUP LAST date(PurchaseLedger ledger)
        ORDER dateTime(ledger), ledger
        WHERE active(ledger) AND dateTime(ledger) <= dateTime
        BY stock(ledger), sku(ledger);

usePeriod 'Пересчитать за весь период' = DATA LOCAL NESTED BOOLEAN ();
fillMaxLimitRetailPriceCustom  ABSTRACT (DATETIME,DepartmentStore);

fillMaxLimitRetailPrice 'Заполнить максимальную розничную цену' (DATETIME dt,DepartmentStore stock) {
    NEWSESSION {
        dateTimeLimitRetailPrice() <- dt;    
        LOCAL inn = BOOLEAN (Sku);
        inn(Sku sku) <- calcCheckLimitRetailForm(sku);           
                           
        IF (countDaysMovedLimitRetail() OR positiveBalanceLimitRetail()) THEN {
            inn(Sku sku)<- NULL WHERE inn(sku) AND 
                                ((positiveBalanceLimitRetail() AND NOT balanceB(sku,stock,dt)>0) OR( sku IS Sku AND NOT positiveBalanceLimitRetail())) AND
                                ((countDaysMovedLimitRetail() AND NOT movedLimit (sku, stock, dt, countDaysMovedLimitRetail())) OR (sku IS Sku AND NOT countDaysMovedLimitRetail())); 
        }    
                                
        maxLimitRetailPrice(Sku sku, stock)<- NULL WHERE sku IS Sku AND NOT inn(sku);                
        maxLimitRetailPrice(Sku sku, stock) <- priceA(SystemLedgerPriceListType.retailPricingPriceListType, sku, stock, dt) 
                                                        WHERE inn(sku) AND priceA(SystemLedgerPriceListType.retailPricingPriceListType, sku, stock, dt);   
        
        //-- Фиксируем цену и накопленный %                                                                                               
        LOCAL in = BOOLEAN (DATE);  
        LOCAL cumP = NUMERIC[8,3] (Sku);                
          
        IF usePeriod() THEN {
            in(DATE dd)<- TRUE WHERE iterate(dd,dateFromPerc(),firstDayOfMonth(sumMonth(DATE(dt),1))) AND firstDayOfMonth(dd)==dd;
            cumPercLimit(Sku sku,stock,  DATE date) <- NULL;
            prevRetailPrice(Sku sku,stock,  DATE date) <- NULL;    
            cumP(Sku s)<- 0.0 WHERE inn(s);                        
        } ELSE {
            in(DATE dd)<- dd=firstDayOfMonth(sumMonth(DATE(dt),1));      
            cumPercLimit(Sku sku,stock,  DATE date) <- NULL WHERE in(date);
            prevRetailPrice(Sku sku,stock,  DATE date) <- NULL WHERE in(date);      
            cumP(Sku s)<- cumPercLimit(s,stock,firstDayOfMonth(DATE(dt))) WHERE inn(s);                            
        }               
               
        FOR in(DATE date) AND DATETIME time ==sumSeconds(DATETIME(date),-1) ORDER date DO {                              
            prevRetailPrice(Sku sku,stock,  date) <-  priceA(SystemLedgerPriceListType.retailPricingPriceListType, sku, stock, time) 
                            WHERE inn(sku);
            cumP(Sku s)<- IF prevRetailPrice(s,stock,date)<= prevRetailPrice(s,stock,sumMonth(date,-1))
                            THEN (cumP(s)(+)stepPercLimitRetailPrice(date))
                            ELSE stepPercLimitRetailPrice(date)
                WHERE inn(s);                
                            
            cumPercLimit(Sku sku,stock, date)<- cumP(sku)
                            WHERE inn(sku);
                            
        }                                       
        APPLY;    
    }
}

stockGroupFilter = ABSTRACT CASE BOOLEAN (DepartmentStore);
stockGroupFilter(DepartmentStore ds) += WHEN stockGroup(ds) IS Store THEN TRUE;

fillMaxLimitRetailPrice 'Заполнить максимальную розничную цену' (DATETIME dt) {
    IF stepPercLimitRetailPrice(firstDayOfMonth(sumMonth(DATE(dt),1))) THEN {
        IF useMaxLimitRetailPriceCustom() THEN {
            fillMaxLimitRetailPriceCustom(dt);
        } ELSE {
            LOCAL NESTED incl = BOOLEAN (DepartmentStore);
            incl(DepartmentStore ds)<- ds IS DepartmentStore AND stockGroupFilter(ds);
        
            FOR incl(DepartmentStore stock) DO {
                fillMaxLimitRetailPrice(dt,stock);
            }
            NEWSESSION {
                fillMaxLimitRetailPriceOver(dt);      
                APPLY;
            }
        }
    } ELSE {
        MESSAGE 'Не задан "% Доступного отклонения" на следующий месяц. Вначале надо заполнить это поле.';
    } 
}

FORM dialogDateT 'Выбор даты/время'
    OBJECTS d = DATETIME PANEL
    PROPERTIES(d) objValue = VALUE
    PROPERTIES usePeriod()
;

DESIGN dialogDateT {
    NEW date BEFORE TOOLBARBOX {
        fill = 1;
        MOVE PROPERTY(usePeriod());
        MOVE PROPERTY (objValue) {
            fill = 1;
            caption = 'Введите дата/время';
            font = 'bold 64';
            panelCaptionVertical = TRUE;
        }
        
    }
}

fillMaxLimitRetailPrice 'Заполнить максимальную розничную цену (все магазины)' () {
    usePeriod()<- NULL;
    DIALOG dialogDateT OBJECTS d INPUT DO{
        fillMaxLimitRetailPrice(d);
        usePeriod()<- NULL;
    }
}

FORM dialogDateTS 'Выбор даты/время'
    OBJECTS d = DATETIME PANEL
    PROPERTIES(d) objValue = VALUE
    PROPERTIES usePeriod()
    OBJECTS st = DepartmentStore PANEL 
    PROPERTIES (st) SELECTOR name
    FILTERS active(st), stockGroupFilter(st)
;

DESIGN dialogDateTS {
    NEW date BEFORE TOOLBARBOX {
        fill = 1;
        type = CONTAINERH; 
        MOVE PROPERTY(usePeriod());
        MOVE PROPERTY (objValue) {
            caption = 'Введите дата/время';
        }
        MOVE PROPERTY(name(st));
    }
}
fillMaxLimitRetailPriceStock 'Заполнить максимальную розничную цену (магазин)' () {
    usePeriod()<- NULL;
    DIALOG dialogDateTS OBJECTS d INPUT, st INPUT DO{
        IF useMaxLimitRetailPriceCustom() THEN {
            fillMaxLimitRetailPriceCustom(d,st);
        } ELSE {
            fillMaxLimitRetailPrice(d,st);        
        }

        usePeriod()<- NULL;
    }
}

addSkuListsLimit 'Отметить по спискам SKU' () {
    DIALOG dialogAddLists DO {        
        FOR [GROUP SUM 1 IF in(list(ListDetail d)) BY sku(d)](Sku sk) DO {
            dataCheckLimitRetailPrice(sk)<-TRUE;
            dataSkipCheckRetailPrice(sk)<-NULL; 
        }               
    }
}

skipFillNewPrice 'Не заполнять "Максимальная розничная цена" при появлении впервые цены' = DATA BOOLEAN ();
EXTEND FORM options
    PROPERTIES () skipFillNewPrice
;
DESIGN options {
    pricings {
        MOVE PROPERTY (skipFillNewPrice());
    }
}

WHEN SET(currentRetailPricingPrice(Sku sku, Stock stock)) AND NOT maxLimitRetailPrice(sku,stock) AND calcCheckLimitRetailPrice(sku) AND NOT skipFillNewPrice() DO {
    maxLimitRetailPrice(sku,stock) <- currentRetailPricingPrice(sku,stock) WHERE NOT promotionPriceListDetailA(sku,stock,currentDate());
}

skipMaxLimitRetailPricePerc = ABSTRACT VALUE BOOLEAN (UserInvoiceDetail);
WHEN LOCAL FORMS userInvoice GOAFTER retailPrice[UserInvoiceDetail] 
            SETCHANGED(retailPrice(UserInvoiceDetail d)) AND calcCheckLimitRetailPrice(sku(d))
            AND maxLimitRetailPricePerc(sku(d), customerStock(d),DATE(pricingDateTime(d))) < retailPrice(d) AND NOT skipMaxLimitRetailPricePerc(d) DO {
    retailPrice(d) <- maxLimitRetailPricePerc(sku(d), customerStock(d),DATE(pricingDateTime(d)));
    retailMarkup(d) <- calcRetailMarkup(d);
}

overSetManagementRetailPrice(DepartmentStore d, DATETIME dt) + {
    LOCAL limitPrice = NUMERIC[16,4] (Sku);
    limitPrice(Sku sku) <- maxLimitRetailPricePerc(sku,d,DATE(dt)) WHERE managementRetailPrice(sku) AND calcCheckLimitRetailPrice(sku);
    managementRetailPrice (Sku sku) <- limitPrice(sku) WHERE limitPrice(sku) < managementRetailPrice (sku) AND calcCheckLimitRetailPrice(sku);
}

calculateDescriptionPricing (Sku sku, DepartmentStore d, DATETIME dt) + {
    descriptionPricing (sku, 'Максимальная розничная цена (шаг)') <- STRING(maxLimitRetailPricePerc(sku,d,DATE(dt)));   
}

//------------------------ Логирование --------------------------//

CLASS LimitRetailPriceLog 'Запись лога максимальная РЦ';
TABLE limitRetailPriceLog(LimitRetailPriceLog);

disableLimitRetailPriceLog 'Отключить запись лога максимальная РЦ' = DATA BOOLEAN ();
enableLimitRetailPriceLog = TRUE AND NOT disableLimitRetailPriceLog();

EXTEND FORM options
    PROPERTIES() disableLimitRetailPriceLog
;

DESIGN options { 
    log { 
        MOVE PROPERTY(disableLimitRetailPriceLog()) FIRST;   
    } 
}

dateTimeLimitRetailPrice 'Дата/время контроля' = DATA DATETIME (LimitRetailPriceLog);
stepPercLimitRetailPrice '% Доступного отклонения' = DATA NUMERIC[8,3] (LimitRetailPriceLog);

checkLimitRetailPrice 'Контроль розничных цен' = DATA BOOLEAN (LimitRetailPriceLog);

sku = DATA Sku (LimitRetailPriceLog) INDEXED;
nameSku 'Товар' (LimitRetailPriceLog l) = name(sku(l));
idSku 'Товар' (LimitRetailPriceLog l) = id(sku(l));
idBarcodeSku 'Товар' (LimitRetailPriceLog l) = idBarcode(sku(l));

stock = DATA Stock (LimitRetailPriceLog) INDEXED;
nameStock 'Склад' (LimitRetailPriceLog l) = name(stock(l));

price 'Максимальная РЦ' = DATA NUMERIC[16,4] (LimitRetailPriceLog) ;
prevPrice 'Максимальная РЦ, до' = DATA NUMERIC[16,4] (LimitRetailPriceLog) ;

priceCustom 'МРЦ' = DATA NUMERIC[16,4] (LimitRetailPriceLog) ;
prevPriceCustom 'МРЦ, до' = DATA NUMERIC[16,4] (LimitRetailPriceLog) ;

hostnameComputer 'Имя компьютера' = DATA ISTRING[100] (LimitRetailPriceLog); 
userLogin 'Логин пользователя' = DATA STRING[100] (LimitRetailPriceLog); 
nameContact 'Имя пользователя' =  DATA STRING[100] (LimitRetailPriceLog) IN id;
dateTimeSession 'Время' = DATA DATETIME (LimitRetailPriceLog) IN id;
dateSession 'Дата' (LimitRetailPriceLog d) = DATE(dateTimeSession(d));


@defineLog (LimitRetailPriceLog, 'максимальной РЦ', log, dateSession);


CLASS TypeChange 'Тип изменения' {
    add 'Добавление',
    addC 'Добавление МРЦ',    
    delete 'Удаление',
    deleteC 'Удаление МРЦ',    
    changeC 'Изменение МРЦ',
    change 'Изменение',    
    flagAdd 'Признак добавлен',
    flagDelete 'Признак удален',
    changeExtra 'Прочее (%, приход)'
}

typeChange= DATA TypeChange (LimitRetailPriceLog);
nameTypeChange 'Тип изменения' (LimitRetailPriceLog l) = staticCaption(typeChange(l)) IN id;

WHEN (SETCHANGED(maxLimitRetailPrice(Sku s,Stock st)) OR (SETCHANGED(maxLimitRetailPriceCustom(s,st)) IF useCustomRetailPrice())) IF NOT disableLimitRetailPriceLog() DO {
    NEW d = LimitRetailPriceLog {        
        sku(d) <- s ;
        stock(d) <- st;
        dateTimeLimitRetailPrice(d)<-dateTimeLimitRetailPrice();
        stepPercLimitRetailPrice(d)<- stepPercLimitRetailPrice();
        checkLimitRetailPrice(d) <- calcCheckLimitRetailPrice(s);
        
        prevPrice(d)<-PREV(maxLimitRetailPrice(s,st));
        price(d)<-maxLimitRetailPrice(s,st);        
        prevPriceCustom(d)<-PREV(maxLimitRetailPriceCustom(s,st));
        priceCustom(d)<-maxLimitRetailPriceCustom(s,st);               
                        
        typeChange(d) <- CASE
                        WHEN SET(maxLimitRetailPrice(s,st)) THEN TypeChange.add
                        WHEN CHANGED(maxLimitRetailPrice(s,st)) THEN TypeChange.change
                        WHEN SET(maxLimitRetailPriceCustom(s,st)) THEN TypeChange.addC
                        WHEN CHANGED(maxLimitRetailPriceCustom(s,st)) THEN TypeChange.changeC
                        ELSE TypeChange.changeExtra;

        hostnameComputer(d) <- hostnameCurrentComputer();
        userLogin(d) <- login(currentUser()); 
        nameContact(d) <- STRING[100](name(currentUser()));
        dateTimeSession(d) <- currentDateTime();                      
    }
}
WHEN (DROPPED(maxLimitRetailPrice(Sku s,Stock st)) OR (DROPPED(maxLimitRetailPriceCustom(s,st) IF useCustomRetailPrice()))) IF NOT disableLimitRetailPriceLog() AND NOT (DROPPED(s IS Sku) OR DROPPED(st IS Stock)) DO {
    NEW d = LimitRetailPriceLog {   
        sku(d) <- s;
        stock(d) <- st;
        dateTimeLimitRetailPrice(d)<-dateTimeLimitRetailPrice();
        stepPercLimitRetailPrice(d)<- stepPercLimitRetailPrice();
        checkLimitRetailPrice(d) <- calcCheckLimitRetailPrice(s);
        
        prevPrice(d)<-PREV(maxLimitRetailPrice(s,st));
        price(d)<-maxLimitRetailPrice(s,st);
        prevPriceCustom(d)<-PREV(maxLimitRetailPriceCustom(s,st));
        priceCustom(d)<-maxLimitRetailPriceCustom(s,st);           
                        
        typeChange(d) <- IF DROPPED(maxLimitRetailPrice(s, st)) THEN TypeChange.delete ELSE TypeChange.deleteC;
        hostnameComputer(d) <- hostnameCurrentComputer();
        userLogin(d) <- login(currentUser()); 
        nameContact(d) <- STRING[100](name(currentUser()));
        dateTimeSession(d) <- currentDateTime();             
    }
}

WHEN SET(calcCheckLimitRetailPrice(Sku s)) IF NOT disableLimitRetailPriceLog() DO {
    NEW d = LimitRetailPriceLog {        
        sku(d) <- s ;
        dateTimeLimitRetailPrice(d)<-dateTimeLimitRetailPrice();
        stepPercLimitRetailPrice(d)<- stepPercLimitRetailPrice();
        checkLimitRetailPrice(d) <- calcCheckLimitRetailPrice(s);

        typeChange(d) <- TypeChange.flagAdd;
        hostnameComputer(d) <- hostnameCurrentComputer();
        userLogin(d) <- login(currentUser()); 
        nameContact(d) <- STRING[100](name(currentUser()));
        dateTimeSession(d) <- currentDateTime();                  
    }
}
WHEN DROPPED(calcCheckLimitRetailPrice(Sku s)) IF NOT disableLimitRetailPriceLog() AND NOT DROPPED(s IS Sku) DO {
    NEW d = LimitRetailPriceLog {        
        sku(d) <- s ;
        dateTimeLimitRetailPrice(d)<-dateTimeLimitRetailPrice();
        stepPercLimitRetailPrice(d)<- stepPercLimitRetailPrice();
        checkLimitRetailPrice(d) <- calcCheckLimitRetailPrice(s);

        typeChange(d) <- TypeChange.flagDelete;
        hostnameComputer(d) <- hostnameCurrentComputer();
        userLogin(d) <- login(currentUser()); 
        nameContact(d) <- STRING[100](name(currentUser()));
        dateTimeSession(d) <- currentDateTime();                     
    }
}

fillAllStocks 'Выбрать для всех магазинов' (Sku s,Stock st){
    DIALOG dialogNumeric OBJECTS n = maxLimitRetailPrice(s,st) INPUT DO {
        maxLimitRetailPrice(s,Stock ds)<- NUMERIC[16,4](n) WHERE ds IS DepartmentStore AND stockGroupFilter(ds); 
    }
}
useAllStocks 'Применить ко всем магазинам' (Sku s,Stock st){
    maxLimitRetailPrice(s,Stock ds)<- maxLimitRetailPrice(s,st) WHERE ds IS DepartmentStore AND stockGroupFilter(ds); 
}
fillAllStocksCustom 'Выбрать для всех магазинов' (Sku s,Stock st){
    DIALOG dialogNumeric OBJECTS n = maxLimitRetailPriceCustom(s,st) INPUT DO {
        maxLimitRetailPriceCustom(s,Stock ds)<- NUMERIC[16,4](n) WHERE ds IS DepartmentStore AND stockGroupFilter(ds); 
    }
}
useAllStocksCustom 'Применить ко всем магазинам' (Sku s,Stock st){
    maxLimitRetailPriceCustom(s,Stock ds)<- maxLimitRetailPriceCustom(s,st) WHERE ds IS DepartmentStore AND stockGroupFilter(ds); 
}

backgroundRetailPrice = ABSTRACT CASE COLOR(Sku);

inLimit 'Отм.' = DATA LOCAL NESTED BOOLEAN (Stock);
countInLimitStock = GROUP SUM 1 IF inLimit(Stock Stock);
stocksInLimit 'Отделы' () =
    GROUP CONCAT name(Stock st) IF inLimit(st) ,', ' ORDER name(st) CHARWIDTH 20;
    
FORM departmentStoresLimit 'Отдел магазина'
    TREE treeStore a = BPSTRING[3], sg = StockGroup PARENT parent(sg)
    PROPERTIES READONLY VALUE(a), sgTreeName = name(sg)
    ORDERS sgTreeName
    FILTERS stringEqualsAll(a), (sg IS ChainStores OR sg IS StoreType OR sg IS StoreGroup OR sg IS Store)
    FILTERGROUP activeStore FILTER 'Активный' (active[Store](sg) OR NOT sg IS Store) 'ctrl F10' DEFAULT

    OBJECTS d=DepartmentStore
    PROPERTIES (d) inLimit
    PROPERTIES(d) READONLY id SHOWIF showIDs(), depName = name, fullName

    FILTERS isParent(sg, d) OR (d IS Stock AND NOT sg) 

    FILTERGROUP activeDS FILTER 'Активный' active(d) 'F10' DEFAULT

;

DESIGN departmentStoresLimit {
    BOX {
        size = (1024, 768);

        NEW topContainer {
            fill = 1;
            type = SPLITH;

            MOVE BOX(TREE treeStore) {
                caption = 'Склады';
            }

            MOVE BOX(d) {
                fill = 3;
                GRID(d) {
                    defaultComponent = TRUE;
                }
            }
        }

        MOVE TOOLBARBOX;
    }
}
@extendFormFilterStockAccess(d, departmentStoresLimit, company);

changeStocksReport()  { 
    LOCAL prev = BOOLEAN (Stock);
    prev(Stock sd)<- inLimit(sd);
    inLimit(Stock sd) <- NULL;
    DIALOG departmentStoresLimit OBJECTS d INPUT DO{
        IF NOT countInLimitStock() THEN {
            inLimit(d) <- TRUE;
        } 
    } ELSE {
        inLimit(Stock sd) <- prev(sd);
    }
    formRefresh();
}

extraFilter = ABSTRACT BOOLEAN(LimitRetailPriceLog);

changeStep = ABSTRACT BOOLEAN ();
skipChangeStep () = TRUE IF NOT changeStep();


changeStepPercLimit(){
    INPUT n = stepPercLimitRetailPriceCurrent() DO {
        dataStepPercLimitRetailPrice(DATE dt) <- n WHERE dt==firstDayOfMonth(currentDate());   
    }
}

firstDayOfYear(DATE date) = [FORMULA DATE PG 'date_trunc(\'year\', $1)'](date AS DATE);
lastDayOfYear(DATE date) = [FORMULA DATE PG '(date_trunc(\'year\', $1) + INTERVAL \'1 year - 1 day\')::date'](date AS DATE);

FORM maxLimitRetailPrice 'Максимальные розничные цены'
    PROPERTIES ()  dateTimeLimitRetailPrice READONLY, stepPercLimitRetailPriceCurrent READONLYIF skipChangeStep() ON CHANGE changeStepPercLimit()
    PROPERTIES () stocksInLimit ON CHANGE changeStocksReport()
    
    TREE skuTree sk = SkuGroup PARENT parent(sk)
    PROPERTIES READONLY order(sk), skuTreeName = name(sk)
    ORDERS order(sk), skuTreeName
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F5' DEFAULT

    OBJECTS   sts=(st=Stock, s=Sku)
    PROPERTIES (s) BACKGROUND backgroundRetailPrice(s) READONLY ON CONTEXTMENU showMovementSku(s,st) ON CONTEXTMENU showBalancePriceSku(s,st) name, id, idBarcode, nameUOM
    PROPERTIES  BACKGROUND backgroundRetailPrice(s) READONLY name(st) 
//    PROPERTIES  lastDatePurchase(s,st) READONLYIF isReadonly()
    PROPERTIES BACKGROUND RGB(214,234,248) maxLimitRetailPriceCustom (s,st) SHOWIF useCustomRetailPrice() READONLYIF isReadonly() ON CONTEXTMENU fillAllStocksCustom(s,st) ON CONTEXTMENU useAllStocksCustom(s,st)
    PROPERTIES cumStepPercLimit(s,st) READONLY,
               maxLimitRetailPrice(s,st) READONLYIF isReadonly() ON CONTEXTMENU fillAllStocks(s,st) ON CONTEXTMENU useAllStocks(s,st), 
               maxLimitRetailPricePerc(s,st) READONLY, 
               currentRetailPricingPrice(s,st)  READONLY
    ORDERS name(s)
    FILTERGROUP max
        FILTER 'С максимальной РЦ' maxLimitRetailPrice(s,st) OR maxLimitRetailPriceCustom(s,st) 'F9' DEFAULT
    
    OBJECTS d = LimitRetailPriceLog
    PROPERTIES(d) READONLY  dateTimeLimitRetailPrice, checkLimitRetailPrice, nameStock, nameSku, idSku, idBarcodeSku
    PROPERTIES(d) READONLY SHOWIF useCustomRetailPrice() BACKGROUND RGB(214,234,248) prevPriceCustom, priceCustom
    PROPERTIES(d) READONLY prevPrice, price, nameTypeChange, 
                  hostnameComputer, userLogin, nameContact, dateTimeSession, dateSession, stepPercLimitRetailPrice
    FILTERS sku(d)==s,
            stock(d)==st OR extraFilter(d) OR (typeChange(d)==TypeChange.flagAdd OR typeChange(d)==TypeChange.flagDelete) 
    PROPERTIES fillMaxLimitRetailPrice() DRAW sts TOOLBAR
               
    FILTERS  isParent(sk, s),
             inLimit(st)
    ORDERS   name(s)
    FILTERGROUP inactiveStock 
        FILTER 'Активный' active(st) AND active(s) 'ctrl F10' DEFAULT
        FILTER 'Неактивный' inactive(s) 'shift F10'
 
    OBJECTS dates = (df = DATE, dt = DATE) PANEL     
    OBJECTS date = DATE 
    PROPERTIES TOOLBAR DRAW  date 'Дата с' = VALUE (df), 'Дата по' = VALUE (dt)
    PROPERTIES  fillMaxLimitRetailPriceStock() DRAW date TOOLBAR 
    PROPERTIES READONLY extractMonthName(date), extractYear 'Год' = extractYear(date)
    PROPERTIES READONLYIF NOT (isEditable() AND sid(mainRole(currentUser()))=='admin') dataStepPercLimitRetailPrice(date), cumPercLimit(s,st,date), prevRetailPrice(s,st,date)
    FILTERS firstDayOfMonth(date)==date, 
            iterate(date, df,dt)
 
        
    EVENTS ON INIT {
        inLimit(Stock ss)<- TRUE IF ss == [GROUP MIN Stock ff IF accessCompany(currentUser(), ff) AND ff IS DepartmentStore AND stockGroupFilter(ff)]();         
        SEEK maxLimitRetailPrice.dates OBJECTS df=firstDayOfYear(currentDate()), dt = lastDayOfYear(currentDate());
    }
;
DESIGN maxLimitRetailPrice {
    OBJECTS {  
        NEW filter {
            alignment = STRETCH;
            type = CONTAINERH;
            MOVE PROPERTY (stocksInLimit());
            MOVE PROPERTY (dateTimeLimitRetailPrice());
            MOVE PROPERTY (stepPercLimitRetailPriceCurrent());            
        }    
        NEW topContainer {
            fill = 1;
            type = SPLITH;

            NEW firstBottom {
                fill = 1;
                MOVE BOX(TREE skuTree) { caption = 'Группы'; }
            }
            NEW skuBox {
                fill = 3;
                type = SPLITV;
                MOVE BOX(sts) {
                    fill = 3;
                }
                NEW specification{
                    fill = 1;
                    type = TABBED;
                    MOVE BOX(d); 
                    MOVE BOX(date){
                        caption = 'История';                       
                        
                    } 
                }
                
            }
        }               
    }
}


@extendFormFilterStockAccess(st, maxLimitRetailPrice, company);
@extendFormEditable(maxLimitRetailPrice);



FORM maxLimitRetailPriceParams 'Максимальные розничные цены (параметры)'
    OBJECTS dates = (df = DATE, dt = DATE) PANEL 
    PROPERTIES 'Дата с' = VALUE (df), 'Дата по' = VALUE (dt)
    
    OBJECTS date = DATE 
    PROPERTIES READONLY extractMonthName(date), extractYear 'Год' = extractYear(date)
    PROPERTIES (date) stepPercLimitRetailPrice
    FILTERS firstDayOfMonth(date)==date, 
            iterate(date, df,dt)

    TREE skuTree g = ItemGroup PARENT parent(g)
    PROPERTIES(g) READONLY order, name, id
    PROPERTIES checkLimitRetailPrice(g), skipCheckRetailPrice(g)
    FILTERGROUP inactive FILTER 'Активные' active(g) 'F5' DEFAULT
    ORDERS order(g), name(g)
    
    OBJECTS i = Item
    PROPERTIES (i) READONLY name, id, idBarcode
    PROPERTIES checkLimitRetailPrice(i), skipCheckRetailPrice(i) 
    PROPERTIES READONLY calcCheckLimitRetailForm(i) BACKGROUND RGB(127,199,255)
    PROPERTIES addSkuListsLimit() TOOLBAR DRAW i
    ORDERS name(i)
    FILTERGROUP inactive1 FILTER 'Активные' active(i) 'F5' DEFAULT    
    FILTERGROUP check FILTER 'Контроль' calcCheckLimitRetailForm(i) 'F9' DEFAULT    
    FILTERS isParent(g,i)
    
    EVENTS ON INIT {
        SEEK maxLimitRetailPriceParams.dates OBJECTS df=firstDayOfYear(currentDate()), dt = lastDayOfYear(currentDate());
    }
;
DESIGN maxLimitRetailPriceParams{
    OBJECTS {
        NEW tab{
            fill = 1;
            type = TABBED;
            NEW top{
                caption = 'Праметры';
                fill = 1;
                type = SPLITH;
                MOVE BOX(TREE skuTree);
                MOVE BOX(i){fill = 2;}
            }
            NEW dd{
                caption = 'Проценты';
                fill = 1;
                MOVE BOX(dates);
                MOVE BOX(date);
            }            
        }

    }
}

NAVIGATOR {
    priceListDashboardNavigator {
        NEW maxLimitRetailPrice;
        NEW maxLimitRetailPriceParams;
    }
}