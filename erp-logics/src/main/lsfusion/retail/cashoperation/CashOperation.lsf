MODULE CashOperation;

REQUIRE CashDrawer, CashRegisterStore, Numerator;

// ----------------------------- Кассовые документы ---------------------------- //
CLASS ABSTRACT IncomeCashOrder 'ПКО': CashDocument;
CLASS ABSTRACT OutcomeCashOrder 'РКО': CashDocument;

sumCash 'Сумма' = ABSTRACT NUMERIC[18,4] (IncomeCashOrder) IN documentSum;
isPrinted 'Напечатан' = DATA BOOLEAN (IncomeCashOrder);
isNotPrinted 'Не распечатан' (IncomeCashOrder incomeCashOrder) =
    incomeCashOrder IS IncomeCashOrder  AND NOT isPrinted(incomeCashOrder);

isPrinted 'Напечатан' = DATA BOOLEAN (OutcomeCashOrder);
isNotPrinted 'Не распечатан' (OutcomeCashOrder outcomeCashOrder) =
    outcomeCashOrder IS OutcomeCashOrder  AND NOT isPrinted(outcomeCashOrder);

curSumIncomeCashOrder 'Текущая сумма ПКО' (departmentStore) =
    GROUP SUM sumCash(IncomeCashOrder incomeCashOrder) IF isPosted(incomeCashOrder)
    BY departmentStore(incomeCashOrder);

sumAIncomeCashOrder 'Сумма ПКО после даты/время' (departmentStore, DATETIME date) =
    GROUP SUM sumCash(IncomeCashOrder incomeCashOrder) IF isPosted(incomeCashOrder) AND
              dateTime(incomeCashOrder) > date
    BY departmentStore(incomeCashOrder);

sumIncomeCashOrder 'Сумма ПКО на дату/время' (DepartmentStore departmentStore, DATETIME date) =
    curSumIncomeCashOrder(departmentStore) (-)
    sumAIncomeCashOrder(departmentStore, date);

sumCash 'Сумма' = ABSTRACT NUMERIC[18,4] (OutcomeCashOrder) IN documentSum;

curSumOutcomeCashOrder 'Текущая сумма РКО' (departmentStore) =
    GROUP SUM sumCash(OutcomeCashOrder outcomeCashOrder) IF isPosted(outcomeCashOrder)
    BY departmentStore(outcomeCashOrder);

sumAOutcomeCashOrder 'Сумма РКО после даты/время' (departmentStore, DATETIME date) =
    GROUP SUM sumCash(OutcomeCashOrder outcomeCashOrder) IF isPosted(outcomeCashOrder) AND
              dateTime(outcomeCashOrder) > date
    BY departmentStore(outcomeCashOrder);

sumOutcomeCashOrder 'Сумма РКО на дату/время' (DepartmentStore departmentStore, DATETIME date) =
    curSumOutcomeCashOrder(departmentStore) (-)
    sumAOutcomeCashOrder(departmentStore, date);

curSumCash 'Текущая сумма наличных в центральной кассе' (DepartmentStore departmentStore) =
    curSumIncomeCashOrder(departmentStore) (-) curSumOutcomeCashOrder(departmentStore);

sumCash 'Сумма наличных в центральной кассе на дату/время' (DepartmentStore departmentStore, DATETIME date) =
    sumIncomeCashOrder(departmentStore, date) (-) sumOutcomeCashOrder(departmentStore, date);

//---------------------------- Операции с фискальным регистратором ---------------------------------------//

fiscalXReport 'X-отчёт'  ABSTRACT LIST( );
fiscalAdvancePaper 'Прогон ленты'  ABSTRACT LIST( );
fiscalCutReceipt 'Отрезать чек'  ABSTRACT LIST( );
fiscalPrintCopyReceipt 'Копия чека'()  ABSTRACT LIST ( );
fiscalCashSum 'Наличных в кассе'()  ABSTRACT LIST ( );

//---------------------------- Внесение денег ----------------------------------------------------------------//

EXTEND CLASS IncomeCashOperation : OutcomeCashOrder;

date[CashDocument](IncomeCashOperation incomeCashOperation) += date(incomeCashOperation);
time[CashDocument](IncomeCashOperation incomeCashOperation) += time(incomeCashOperation);
number[CashDocument](IncomeCashOperation incomeCashOperation) += seriesNumber(incomeCashOperation);
departmentStore[CashDocument](IncomeCashOperation incomeCashOperation) += departmentStore(incomeCashOperation);
basis[CashDocument](IncomeCashOperation incomeCashOperation) += STRING[100](basis(incomeCashOperation));
cashRegister[CashDocument](IncomeCashOperation incomeCashOperation) += cashRegister(incomeCashOperation);
isPosted[CashDocument](IncomeCashOperation incomeCashOperation) += incomeCashOperation IS IncomeCashOperation;
employee[CashDocument](IncomeCashOperation incomeCashOperation) += employee(incomeCashOperation);

sumCash[OutcomeCashOrder](IncomeCashOperation incomeCashOperation) += sumCash(incomeCashOperation);

//------------------------------ Изъятие денег -----------------------------------------------------------//

EXTEND CLASS OutcomeCashOperation : IncomeCashOrder;

date[CashDocument](OutcomeCashOperation outcomeCashOperation) += date(outcomeCashOperation);
time[CashDocument](OutcomeCashOperation outcomeCashOperation) += time(outcomeCashOperation);
number[CashDocument](OutcomeCashOperation outcomeCashOperation) += seriesNumber(outcomeCashOperation);
departmentStore[CashDocument](OutcomeCashOperation outcomeCashOperation) += departmentStore(outcomeCashOperation);
basis[CashDocument](OutcomeCashOperation outcomeCashOperation) += STRING[100](basis(outcomeCashOperation));
cashRegister[CashDocument](OutcomeCashOperation outcomeCashOperation) += cashRegister(outcomeCashOperation);
isPosted(OutcomeCashOperation outcomeCashOperation) += outcomeCashOperation IS OutcomeCashOperation;
employee(OutcomeCashOperation outcomeCashOperation) += employee(outcomeCashOperation);

sumCash(OutcomeCashOperation outcomeCashOperation) += sumCash(outcomeCashOperation);

//------------------------------ Формы ---------------------------------------------------------------------------//

sumCashForIncomeOperation 'Сумма внесения денег' = DATA LOCAL NUMERIC[18,4] (CashRegister);
doNotFiscalisation 'Не фискализировать' = DATA LOCAL BOOLEAN (CashRegister);

FORM addIncomeCashOperation 'Внесение денег'

    OBJECTS dt = DATE PANEL
    PROPERTIES(dt) date = VALUE

    OBJECTS t = TIME PANEL
    PROPERTIES(t) time = VALUE

    OBJECTS d = DepartmentStore PANEL
    PROPERTIES(d) name SELECTOR

    OBJECTS c = CashRegister
    PROPERTIES(c) READONLY npp
    PROPERTIES(c) sumCashForIncomeOperation, doNotFiscalisation

    FILTERS stock(c) == d
    FILTERGROUP filtersCashRegister
        FILTER 'Только для текущей кассы' c==currentCashRegister() 'F9' DEFAULT;

;

DESIGN addIncomeCashOperation {
    NEW topContainer {
        fill = 1;
        NEW firstCase {
            type = CONTAINERH;
            NEW dateTimeContainer{
                caption = 'Дата/время';
                MOVE PROPERTY(date);
                MOVE PROPERTY(time);
            }
            MOVE BOX(d);
        }

        MOVE BOX(c);
    }
    MOVE TOOLBARBOX;
}

overAddIncomeCashOperation ABSTRACT LIST (CashRegister,IncomeCashOperation);

addIncomeCashOperationForm 'Внесение денег' ()  { 
	NEWSESSION {
	
	    DIALOG addIncomeCashOperation OBJECTS d = stock(currentCashRegister()) NULL NOMANAGESESSION DO {
	        LOCAL fail = BOOLEAN();
	        FOR sumCashForIncomeOperation(CashRegister cashRegister) DO {
	            NEW c = IncomeCashOperation {
	                cashRegister(c) <- cashRegister;
	                sumCash(c) <- sumCashForIncomeOperation(cashRegister);
	                overAddIncomeCashOperation(cashRegister,c);
	                generateSeriesNumber(c);
	                IF NOT doNotFiscalisation(cashRegister) THEN {
	                    fiscalServiceCashRegister(c);                                    
	                }
	                IF cashRegisterModel(groupCashRegister(cashRegister)) AND NOT isComplete(c) THEN
	                    fail() <- TRUE;
	            }
	        }
	        IF NOT fail() THEN
	            apply();
	    }
	}
} TOOLBAR;

dontUseCurrentCashRegister 'Не использовать текущую кассу на форме центральная касса' = DATA BOOLEAN ();
setDateTimeCashDocument 'Задавать дату и время документов изъятий и внесений на форме центральная касса' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES dontUseCurrentCashRegister(), setDateTimeCashDocument()
;

DESIGN options{
    zReport{
        NEW cashDocuments {
            caption = 'Внесения/изъятия';
            MOVE PROPERTY(dontUseCurrentCashRegister());        
            MOVE PROPERTY(setDateTimeCashDocument());        
        }
    }
}

addIncomeCashOperationForm 'Внесение денег' (DepartmentStore dep)  { 
	NEWSESSION {
	    LOCAL departmentStore = DepartmentStore();
	    IF dontUseCurrentCashRegister() THEN 
	        departmentStore() <- dep;
	    ELSE departmentStore() <- stock(currentCashRegister());        
	    DIALOG addIncomeCashOperation OBJECTS d = departmentStore() NULL, dt INPUT, t INPUT NOMANAGESESSION DO {
	        LOCAL fail = BOOLEAN();
	        FOR sumCashForIncomeOperation(CashRegister cashRegister) DO {
	            NEW c = IncomeCashOperation {
	                cashRegister(c) <- cashRegister;
	                sumCash(c) <- sumCashForIncomeOperation(cashRegister);
	                IF setDateTimeCashDocument() THEN {
	                    date(c) <- dt;
	                    time(c) <- t;
	                }
	                overAddIncomeCashOperation(cashRegister,c);
	                generateSeriesNumber(c);
	                IF NOT doNotFiscalisation(cashRegister) THEN {
	                    fiscalServiceCashRegister(c);                                    
	                }
	                IF cashRegisterModel(groupCashRegister(cashRegister)) AND NOT isComplete(c) THEN
	                    fail() <- TRUE;
	            }
	        }
	        IF NOT fail() THEN
	            apply();
	    }
	}
} TOOLBAR;

sumCashForOutcomeOperation 'Сумма изъятия денег' = DATA LOCAL NUMERIC[18,4] (CashRegister);

FORM addOutcomeCashOperation 'Изъятие денег'

    OBJECTS dt = DATE PANEL
    PROPERTIES(dt) date = VALUE

    OBJECTS t = TIME PANEL
    PROPERTIES(t) time = VALUE

    OBJECTS d = DepartmentStore PANEL
    PROPERTIES(d) name SELECTOR

    OBJECTS c = CashRegister
    PROPERTIES(c) READONLY npp
    PROPERTIES(c) sumCashForOutcomeOperation, doNotFiscalisation

    FILTERS stock(c) == d
    FILTERGROUP filtersCashRegister
        FILTER 'Только для текущей кассы' c==currentCashRegister() 'F9' DEFAULT;

;

DESIGN addOutcomeCashOperation {
    NEW topContainer {
        fill = 1;
        NEW firstCase {
            type = CONTAINERH;
            NEW dateTimeContainer{
                caption = 'Дата/время';
                MOVE PROPERTY(date);
                MOVE PROPERTY(time);
            }
            MOVE BOX(d);
        }
        MOVE BOX(c);
    }
    MOVE TOOLBARBOX;
}

overAddOutcomeCashOperation ABSTRACT LIST (CashRegister,OutcomeCashOperation);

addOutcomeCashOperationForm 'Изъятие денег' ()  { 
	NEWSESSION {
	    DIALOG addOutcomeCashOperation OBJECTS d = stock(currentCashRegister()) NULL NOMANAGESESSION DO {
	        LOCAL fail = BOOLEAN();
	        FOR sumCashForOutcomeOperation(CashRegister cashRegister) NEW c = OutcomeCashOperation DO {
	            cashRegister(c) <- cashRegister;
	            sumCash(c) <- sumCashForOutcomeOperation(cashRegister);	            
	            overAddOutcomeCashOperation(cashRegister,c);
	            generateSeriesNumber(c);
	            IF NOT doNotFiscalisation(cashRegister) THEN {            
	                fiscalServiceCashRegister(c);
	            }    
	            IF cashRegisterModel(groupCashRegister(cashRegister)) AND NOT isComplete(c) THEN
	                fail() <- TRUE;
	        }
	         IF NOT fail() THEN
	            apply();
	    }
	}
} TOOLBAR;

addOutcomeCashOperationForm 'Изъятие денег' (DepartmentStore dep)  { 
	NEWSESSION {
	    LOCAL departmentStore = DepartmentStore();
	    IF dontUseCurrentCashRegister() THEN 
	        departmentStore() <- dep;
	    ELSE departmentStore() <- stock(currentCashRegister());    	
	    DIALOG addOutcomeCashOperation OBJECTS d = departmentStore() NULL, dt INPUT, t INPUT NOMANAGESESSION DO {
	        LOCAL fail = BOOLEAN();
	        FOR sumCashForOutcomeOperation(CashRegister cashRegister) NEW c = OutcomeCashOperation DO {
	            cashRegister(c) <- cashRegister;
	            sumCash(c) <- sumCashForOutcomeOperation(cashRegister);
                IF setDateTimeCashDocument() THEN {
                    date(c) <- dt;
                    time(c) <- t;
                }	            
	            overAddOutcomeCashOperation(cashRegister,c);
	            generateSeriesNumber(c);
	            IF NOT doNotFiscalisation(cashRegister) THEN {            
	                fiscalServiceCashRegister(c);
	            }    
	            IF cashRegisterModel(groupCashRegister(cashRegister)) AND NOT isComplete(c) THEN
	                fail() <- TRUE;
	        }
	         IF NOT fail() THEN
	            apply();
	    }
	}
} TOOLBAR;

EXTEND FORM operationCashRegister
    PROPERTIES fiscalXReport() SHOWIF currentCashRegister()
;

DESIGN operationCashRegister {
    NEW actions {
        caption = 'Действия с кассой';
        type = CONTAINERV;
        NEW firstRowActions{
            type = CONTAINERH;
            MOVE PROPERTY(fiscalXReport()) { font = '24'; }            
        }
        NEW secondRowActions{
            type = CONTAINERH;
        }        
    }
    MOVE BOX(c);
    MOVE TOOLBARBOX;
}

DESIGN addIncomeCashOperation {
    height = 600;
    width = 800;
}

DESIGN addOutcomeCashOperation {
    height = 600;
    width = 800;
}
