MODULE GiftCardPurchase;

REQUIRE GiftCardItem;

NAMESPACE GiftCard;

prefixGiftCard 'Префикс генерации подарочных сертификатов' = DATA STRING[10] ();
lengthGiftCard 'Длина номера при генерации подарочных сертификатов' = DATA INTEGER ();

EXTEND FORM options PROPERTIES() prefixGiftCard, lengthGiftCard;
DESIGN options {
    giftCards {
        MOVE PROPERTY(prefixGiftCard());
        MOVE PROPERTY(lengthGiftCard());
    }
}


CLASS GiftCardPurchase 'Поступление подарочных сертификатов';
CLASS GiftCardPurchaseDetail 'Поступление подарочных сертификатов';

@defineDocument(giftCardPurchase);
@defineDocumentHeaderNumber(GiftCardPurchase, BPSTRING[2]);
//@defineDocumentDataStock(giftCardPurchase, departmentStore, 'Склад',);
departmentStore = DATA Stock(GiftCardPurchase);
nameDepartmentStore 'Склад' (GiftCardPurchase giftCardPurchase) = name(departmentStore(giftCardPurchase)) IN documentHeader
        CHARWIDTH 20;
fullNameDepartmentStore 'Склад' (GiftCardPurchase giftCardPurchase) = fullName(departmentStore(giftCardPurchase)) IN documentHeader
        CHARWIDTH 20;
replace(DepartmentStore s, DepartmentStore o) + { departmentStore(GiftCardPurchase giftCardPurchase) <- o WHERE departmentStore(giftCardPurchase) == s;}             
        
legalEntityStock (GiftCardPurchase giftCardPurchase) = legalEntity(departmentStore(giftCardPurchase));
nameLegalEntityStock 'Компания (Склад)' (GiftCardPurchase giftCardPurchase) = name(legalEntityStock (giftCardPurchase));
fullNameLegalEntityStock 'Компания (Склад) полное наим-ие' (GiftCardPurchase giftCardPurchase) = fullName(legalEntityStock (giftCardPurchase));       
addressLegalEntityStock 'Адрес компании (Склад)' (GiftCardPurchase giftCardPurchase) = address(legalEntityStock (giftCardPurchase));

addressStock 'Адрес (Склад)' (GiftCardPurchase giftCardPurchase) = address(departmentStore(giftCardPurchase));

country (GiftCardPurchase giftCardPurchase) = country(departmentStore(giftCardPurchase));

//для CONSTRAINT 
nameDepartmentStoreId 'Склад' (GiftCardPurchase giftCardPurchase) = name(departmentStore(giftCardPurchase)) IN id;

departmentStore (GiftCardPurchaseDetail idetail) = departmentStore(giftCardPurchase(idetail)) MATERIALIZED;
nameDepartmentStore 'Склад' (GiftCardPurchaseDetail idetail) = name(departmentStore(idetail)) CHARWIDTH 10;
fullNameDepartmentStore 'Склад' (GiftCardPurchaseDetail idetail) = fullName(departmentStore(idetail)) CHARWIDTH 10;         
countryDepartmentStore (GiftCardPurchaseDetail idetail) = country(departmentStore(idetail));
legalEntityDepartmentStore (GiftCardPurchaseDetail idetail) = legalEntity(departmentStore(idetail));
nameLegalEntityDepartmentStore 'Компания (Склад)' (GiftCardPurchaseDetail idetail) = name(legalEntityDepartmentStore (idetail));
fullNameLegalEntityDepartmentStore 'Компания (Склад) полное наим-ие' (GiftCardPurchaseDetail idetail) = fullName(legalEntityDepartmentStore (idetail));

CONSTRAINT departmentStore(GiftCardPurchase p) AND NOT isCompany(departmentStore(p))
    CHECKED BY departmentStore[GiftCardPurchase]
    MESSAGE 'Выбран склад, который не принадлежит компании';

@deriveDocumentHeaderTimePrefix(GiftCardPurchase, );

@defineDocumentDetailNumber(giftCardPurchase, GiftCardPurchaseDetail);

sku = DATA Sku (GiftCardPurchaseDetail) INDEXED;
idSku 'Код'(GiftCardPurchaseDetail p) = id(sku(p));
nameSku 'Номинал'(GiftCardPurchaseDetail p) = name(sku(p));

changeSku 'Заменить товар' (GiftCardPurchaseDetail p )  { 
    
    DIALOG itemsGift OBJECTS i INPUT DO {
        sku(p) <- i;
    }    
}

expiryDays 'Срок действия (дней)' (GiftCardPurchaseDetail d) = expireDaysGiftCard(sku(d));
price 'Номинал' (GiftCardPurchaseDetail d) = priceGiftCard(sku(d));

fromGiftCard 'Номер с' = DATA LONG (GiftCardPurchaseDetail);
toGiftCard 'Номер по' = DATA LONG (GiftCardPurchaseDetail);

giftCardPurchaseDetail = DATA GiftCardPurchaseDetail (GiftCard) NONULL DELETE INDEXED;
giftCardPurchase(GiftCard g) = giftCardPurchase(giftCardPurchaseDetail(g));

departmentStore (GiftCard g) = DATA Stock (GiftCard);
nameDepartmentStore 'Где выпущен' (GiftCard g) = name(departmentStore(g)) IN id;

deleteGiftCard 'Очистить'(GiftCardPurchase o)  { 
    DELETE GiftCard d WHERE giftCardPurchase(d) == o;
} IN documentPrm TOOLBAR CONFIRM;

WHEN SETCHANGED(departmentStore(giftCardPurchaseDetail(GiftCard g))) DO {
    departmentStore(g) <- departmentStore(giftCardPurchaseDetail(g));
}

CONSTRAINT departmentStore(GiftCard g) AND NOT isCompany(departmentStore(g))
    CHECKED BY departmentStore[GiftCard]
    MESSAGE 'Выбран склад, который не принадлежит компании';

generateGiftCards 'Сгенерировать подарочные сертификаты'(GiftCardPurchase p)  { 
    DELETE GiftCard d WHERE giftCardPurchase (d) == p;
    
    FOR p == giftCardPurchase(GiftCardPurchaseDetail d) DO {
        LOCAL num = LONG();
        num() <- fromGiftCard(d);
        WHILE num() <= toGiftCard(d) DO {
            NEW g = GiftCard {
                giftCardPurchaseDetail(g) <- d;
                number(g) <- (OVERRIDE prefixGiftCard(), STRING[10]('') ) + (OVERRIDE lpadStringWithZero(num(), lengthGiftCard()) , STRING[48](num()));
                id(g) <- number(g);
                departmentStore(g) <- departmentStore(d);
                sku(g) <- sku(d);
                price(g) <- price(d);
                date(g) <- date(p);                
                expiryDays(g) <- expiryDays(d);
            }
    
            num() <- num() + 1;
        }
    }
} IN documentPrm TOOLBAR CONFIRM;

WHEN CHANGED (sku(GiftCardPurchaseDetail d)) AND giftCardPurchaseDetail(GiftCard g) == d DO {
    sku(g) <- sku(d);
    price(g) <- price(d);
}

CONSTRAINT SET (GiftCardPurchaseDetail d IS GiftCardPurchaseDetail) AND NOT [GROUP SUM 1 BY giftCardPurchaseDetail(GiftCard g)](d)
    MESSAGE 'Сгенерируйте номера сертификатов';

numberReport 'Номер' (GiftCard g) = OVERRIDE 
    LONG(right(number(g), lengthGiftCard())),
    LONG(substrFrom(number(g),(length(prefixGiftCard())+1))) IF prefixGiftCard() AND substr(number(g),1,length(prefixGiftCard())) == prefixGiftCard(),
    LONG(number(g));

    
select 'Отм.' = DATA LOCAL BOOLEAN (GiftCard); 

relation = GROUP SUM 1 IF select(GiftCard g) BY sku(g), numberReport(g);
relation = GROUP SUM 1 IF select(GiftCard g) BY sku(g);

fromN 'Номер с' = DATA LOCAL LONG (Sku); 
toN 'Номер по' = DATA LOCAL LONG (Sku); 

FORM selectGiftCards 'Выбор ПС'
    OBJECTS s = Sku
    PROPERTIES (s) READONLY idBarcode, name,  fromN CHANGEABLE , toN CHANGEABLE
    FILTERS [GROUP SUM 1 BY sku(GiftCard gg)](s)
    
    OBJECTS g = GiftCard
    PROPERTIES (g) select
    PROPERTIES(g) READONLY nameSku, idBarcode, number, series, nameDepartmentStore, id SHOWIF showIDs(), date, dateSold, 
                  nameDepartmentStoreSold, numberReceiptSold, expiryDays, price
    ORDERS nameSku(g), number(g)

    FILTERGROUP sku FILTER 'По номиналу' sku(g) == s 'F9' DEFAULT 
    FILTERGROUP select FILTER 'Отмеченные' select(g) 'F10'
;

DESIGN selectGiftCards {
    BOX {
        size = (1024, 768);
        NEW body {
            type = SPLITV;
            fill = 1;
            MOVE BOX(s) {
                PROPERTY (fromN(s)) {background = #BDE3FF;}
                PROPERTY (toN(s)) {background = #BDE3FF;}
            }
            MOVE BOX (g) { 
                fill = 2;
                PROPERTY (number(g)) {charWidth = 10;}
            }
        }
    }
    MOVE TOOLBARBOX;
}
    
moveGiftCards 'Переместить подарочные сертификаты'(GiftCardPurchase p)  {    
    
    IF countGiftCardPurchaseDetail(p) THEN {
        ASK 'Очистить строки?' DO {
            DELETE GiftCardPurchaseDetail d WHERE giftCardPurchase (d) == p;
        }
    } 
    DIALOG  selectGiftCards NOMANAGESESSION DO {
        FOR fromN(Sku s) AND toN(s) DO {
            select(GiftCard g) <- TRUE WHERE iterate(LONG(numberReport(g)),fromN(s), toN(s)) AND sku(g) == s;  
        }           
        IF (GROUP SUM 1 IF select(GiftCard g)) THEN {
            FOR relation(Sku s) DO {
                LOCAL int =  LONG ();       
                LOCAL include =  BOOLEAN (LONG);
                LOCAL from =  LONG (LONG);
                LOCAL to =  LONG (LONG);
                int() <- 1;      
                
                include(LONG number) <- TRUE WHERE relation(s,number);
                FOR include(LONG number)  ORDER  number DO {
                    IF to(int()) THEN {
                        int() <- int()+1 ;  
                    }    
                    from(LONG in) <- number WHERE in == int() AND NOT include(number-1);            
                    to(LONG in) <- number WHERE in == int() AND NOT include(number+1);                
                }
                FOR from(LONG in)   NEW d =  GiftCardPurchaseDetail DO {
                    giftCardPurchase(d) <- p;    
                    sku(d) <- s;
                    fromGiftCard(d) <- from(in);
                    toGiftCard(d) <- to(in);                    
                    
                    giftCardPurchaseDetail(GiftCard g) <- d WHERE iterate(numberReport(g),fromGiftCard(d), toGiftCard(d)) AND sku(d) == sku(g) AND select(g);  
                    departmentStore(GiftCard g) <- departmentStore(p) WHERE iterate(numberReport(g),fromGiftCard(d), toGiftCard(d)) AND sku(d) == sku(g) AND select(g); 
                    date(GiftCard g) <- date(p) WHERE iterate(numberReport(g),fromGiftCard(d), toGiftCard(d)) AND sku(d) == sku(g) AND select(g); 
                }
            } 
            select(GiftCard g) <- NULL;
            fromN(Sku g) <- NULL;
            toN(Sku g) <- NULL;
            
        } ELSE {
          MESSAGE 'Надо выбрать сертификаты';
        }              
    }
      
}TOOLBAR;
    
skipInterval = ABSTRACT BOOLEAN (GiftCardPurchase);

FORM giftCardPurchase 'Поступление подарочных сертификатов'

    OBJECTS p = GiftCardPurchase PANEL
    PROPERTIES (p) date, time, series, number, nameDepartmentStore, note
    
    OBJECTS d = GiftCardPurchaseDetail
    PROPERTIES (d) index 
    PROPERTIES (d) ON CHANGE changeSku(d) idSku, nameSku, price, expiryDays
    PROPERTIES (d) SHOWIF NOT skipInterval(p) fromGiftCard, toGiftCard
    PROPERTIES (d) NEW, deleteid=DELETE GRID
    FILTERS giftCardPurchase(d) == p
    
    PROPERTIES(p) DRAW d deleteGiftCard, generateGiftCards SHOWIF NOT skipInterval(p), moveGiftCards SHOWIF NOT skipInterval(p)
    ORDERS index(d)

    OBJECTS g = GiftCard
    PROPERTIES (g) READONLY number

    FILTERS giftCardPurchaseDetail(g) == d

    EDIT GiftCardPurchase OBJECT p
;

DESIGN giftCardPurchase {
    size = (1024, 768);
    NEW headerBox {
        type = CONTAINERH;

        NEW headerParams {
            fill = 1;
            type = CONTAINERV;
            MOVE GROUP(documentHeader,p) {
                lines = 1;
                type = CONTAINERV;
                NEW first {
                    type = CONTAINERH;
                    MOVE PROPERTY(number(p));
                    MOVE PROPERTY(series(p));
                    MOVE PROPERTY(date(p));
                    MOVE PROPERTY(time(p));                 
                }
                NEW second { 
                    type = CONTAINERH;
                    MOVE PROPERTY(nameDepartmentStore(p));  
                    MOVE PROPERTY(note(p));  
                }                                                                                                                       
            }
        }
    }
    NEW specificationBox {
        fill = 1;
        type = SPLITH;
        MOVE BOX(d) {
            caption = 'Спецификация';
            fill = 2;
        }
        MOVE BOX(g) {
            caption = 'Сертификаты';
            fill = 1;
        }
    }
    PROPERTY(formOk()) {
        caption = 'Провести';
    }
    MOVE TOOLBARBOX;

}

fromNumberFilter 'Номер с' = DATA LOCAL STRING[50]();
toNumberFilter 'Номер по' = DATA LOCAL STRING[50]();
filterDepartmentStore 'Магазин' = DATA LOCAL DepartmentStore();
nameStoreFilter 'Магазин (выпущен)' = name(filterDepartmentStore());

//numberFilter(GiftCard g) = (toInteger(right(number(g), lengthGiftCard())) >= toInteger(right(fromNumberFilter(), lengthGiftCard())) OR NOT fromNumberFilter())
//                                        AND (toInteger(right(number(g), lengthGiftCard())) <= toInteger(right(toNumberFilter(), lengthGiftCard())) OR NOT toNumberFilter());
numberReport 'Номер' (STRING[50] number) = OVERRIDE 
    toInteger(right(number, lengthGiftCard())),
    toInteger(number);
numberFilter(GiftCard g) = (numberReport(g) >= numberReport(fromNumberFilter()) OR NOT fromNumberFilter())
                                        AND (numberReport(g) <= numberReport(toNumberFilter()) OR NOT toNumberFilter());

FORM giftCardsDashboard 'Подарочные сертификаты'
    PROPERTIES () fromNumberFilter, toNumberFilter, nameStoreFilter 
    
    OBJECTS g = GiftCard
    PROPERTIES (g) READONLY number, series, date, nameDepartmentStore, expiryDays, price, dateSold, nameDepartmentStoreSold, 
                    dateUsed, nameDepartmentStoreUsed
    FILTERS numberFilter(g), (departmentStore(g) == filterDepartmentStore() OR NOT filterDepartmentStore())
    
    FILTERGROUP filter1
        FILTER 'Просрочен' expireDate(g) < currentDate() 'F10'
        FILTER 'Не просрочен' sold(g) AND NOT (expireDate(g) < currentDate()) 'F9'
 
        
    FILTERGROUP filter2
        FILTER 'Погашен' used(g) 'F8' 
        FILTER 'Погашен полностью' isUsedTotal(g)  
        FILTER 'Погашен частично' used(g) AND NOT isUsedTotal(g) 
        FILTER 'Не погашен' sold(g) AND NOT used(g) 'F7'     
    
    OBJECTS i = Item
    PROPERTIES (i) READONLY caption, id, priceGiftCard, expireDaysGiftCard
    PROPERTIES TOOLBAR addGift() DRAW i, editGift(i), DELETE(i) NEWSESSION
    FILTERS skuType(i) == SkuType.skuTypeGiftCard
    
    OBJECTS p = GiftCardPurchase
    PROPERTIES (p) READONLY number, series, date, time, nameDepartmentStore, note
    PROPERTIES (p) TOOLBAR NEWSESSION NEW, EDIT, DELETE 
    
    OBJECTS gp = GiftCard
    PROPERTIES(gp) READONLY number, idBarcode, nameSku, expiryDays, price
    FILTERS giftCardPurchase(gp) == p
;

@extendFormFilterAccessStock(, g, giftCardsDashboard, departmentStore, company);
@extendFormFilterAccessStock(, p, giftCardsDashboard, departmentStore, company);

DESIGN giftCardsDashboard {
    NEW tabs {
        fill = 1;
        type = TABBED;
        NEW sale{
            caption = 'Сертификаты';
            NEW filters {
                caption = 'Фильтр';
                type = CONTAINERH ;
                MOVE PROPERTY (fromNumberFilter());
                MOVE PROPERTY (toNumberFilter());
                MOVE PROPERTY (nameStoreFilter());
            }
            MOVE BOX(g);
        }
        NEW purchase {
            caption = 'Поступление сертификатов';
            MOVE BOX(p);
            MOVE BOX(gp);
        }
        NEW other{
            caption = 'Номиналы';
            MOVE BOX(i);
        }
    }
    MOVE TOOLBARBOX;
}

NAVIGATOR {
    retailDashboardNavigator{
        NEW giftCardsDashboard;
    }
}
