MODULE GiftCard;

REQUIRE ZReport;

//подарочные сертификаты
CLASS GiftCard 'Подарочный сертификат';
TABLE giftCard(GiftCard);
TABLE sessionGiftCard(Session, GiftCard);

id 'Код' = DATA STRING[100] (GiftCard) IN id INDEXED CHARWIDTH 10;
giftCard (id) = GROUP MAX (GiftCard giftCard) BY id (giftCard);
countGiftCard = GROUP SUM 1 BY id (GiftCard giftCard);

CONSTRAINT GiftCard giftCard IS GiftCard AND countGiftCard(id(giftCard)) >1
    MESSAGE 'Нарушена уникальность свойства "Код" для подарочного сертификата' ;

@defineNumbered(GiftCard, BPSTRING[2]);

@defineNumeratedDefault(GiftCard, 'Подарочные сертификаты', 'ПС');

inactive 'Неактивный' = DATA BOOLEAN (GiftCard);
active 'Активный' (GiftCard g) = g IS GiftCard AND NOT inactive(g);

// Уникальность
giftCardSeriesNumber (string) =
    GROUP AGGR GiftCard giftCard WHERE giftCard IS GiftCard
        BY seriesNumber(giftCard);


date 'Дата' = DATA DATE(GiftCard);
expiryDays 'Срок действия (дней)' = DATA INTEGER(GiftCard);
extraExpiryDays = ABSTRACT INTEGER ();

price 'Цена' = DATA NUMERIC[16,4] (GiftCard) IN id;

//регистр движений подарочного сертификата
CLASS ABSTRACT GiftCardLedger 'Движение подарочных сертификатов';
TABLE giftCardLedger(GiftCardLedger) FULL;

giftCard = ABSTRACT GiftCard (GiftCardLedger) MATERIALIZED INDEXED;
dateTime 'Дата/время' = ABSTRACT DATETIME (GiftCardLedger) MATERIALIZED;
date 'Дата' (GiftCardLedger ledger) = DATE(dateTime( ledger)) MATERIALIZED;
time 'Время' (GiftCardLedger ledger) = TIME(dateTime(ledger));
seriesNumber 'Серия/Номер' (GiftCardLedger l) = seriesNumber(giftCard(l)) IN id;
sum 'Сумма' = ABSTRACT NUMERIC[18,4] (GiftCardLedger) MATERIALIZED;
signedSum 'Сумма' (GiftCardLedger ledger) = IF ledger IS UseGiftCard THEN -sum(ledger) ELSE sum(ledger);
description 'Описание' = ABSTRACT STRING[100] (GiftCardLedger) MATERIALIZED;
numberDocument 'Документ' = ABSTRACT STRING[50](GiftCardLedger) MATERIALIZED;
departmentStore = ABSTRACT DepartmentStore (GiftCardLedger) MATERIALIZED;
nameDepartmentStore 'Отдел магазина' (GiftCardLedger g) = name(departmentStore(g));
nameLegalEntity 'Компания' (GiftCardLedger g) = name(legalEntity(departmentStore(g))) CHARWIDTH 10;
show 'Просмотреть'  ABSTRACT LIST ( GiftCardLedger) TOOLBAR;

namePaymentType 'Тип платежа' = ABSTRACT ISTRING[110] (GiftCardLedger) MATERIALIZED;

INDEX date(GiftCardLedger l), departmentStore(l), l; 

currentBalance 'Текущий остаток' = GROUP SUM signedSum(GiftCardLedger ledger) BY giftCard(ledger);

// без учета текущей даты/времени
balanceB 'Остаток (до)'  = GROUP SUM signedSum(GiftCardLedger ledger) IF dateTime(ledger) < DATETIME dateTime BY giftCard(ledger), dateTime CHARWIDTH 7;
prevBalanceB 'Остаток (до)' (GiftCard g, DATETIME dateTime) = PREV(balanceB(g, dateTime) IF dateTime IS DATETIME);

// с учетом текущей даты/времени
balanceA 'Остаток (после)' = GROUP SUM signedSum(GiftCardLedger ledger) IF dateTime(ledger) <= DATETIME dateTime BY giftCard(ledger), dateTime CHARWIDTH 7;
prevBalanceA 'Остаток (после)' (GiftCard g, DATETIME dateTime) = PREV(balanceA(g, dateTime) IF dateTime IS DATETIME);

balanceB 'Остаток (до)' (GiftCardLedger l) = balanceB(giftCard(l),dateTime(l));
balanceA 'Остаток (после)' (GiftCardLedger l) = balanceA(giftCard(l),dateTime(l));

//--
// без учета текущей даты/времени
balanceB 'Остаток (до)' = GROUP SUM signedSum(GiftCardLedger ledger) IF date(ledger) < DATE date BY giftCard(ledger), date CHARWIDTH 7;
prevBalanceB 'Остаток (до)' (GiftCard g, DATE date) = PREV(balanceB(g, date) IF date IS DATE);

// с учетом текущей даты/времени
balanceA 'Остаток (после)'= GROUP SUM signedSum(GiftCardLedger ledger) IF date(ledger) <= DATE date BY giftCard(ledger), date CHARWIDTH 7;
prevBalanceA 'Остаток (после)' (GiftCard g, DATE date) = PREV(balanceA(g, date) IF date IS DATE);


allowNegativeBalance 'Разрешить расписывание в минус' = ABSTRACT BOOLEAN (GiftCard);

CONSTRAINT SET(currentBalance(GiftCard g) < 0.0) AND NOT isSumPaymentReceipt() AND NOT allowNegativeBalance(g)
    MESSAGE 'Сумма платежей сертификатом больше его номинала';

//продажа подарочных сертификатов
CLASS ABSTRACT SaleGiftCard 'Продажа подарочных сертификатов' : GiftCardLedger;

isSold 'Продан' = ABSTRACT BOOLEAN (SaleGiftCard);
isReturn 'Возвращен' = ABSTRACT BOOLEAN (SaleGiftCard);

lastSaleGiftCard = GROUP LAST SaleGiftCard detail AS SaleGiftCard ORDER dateTime(detail), detail BY giftCard(detail) MATERIALIZED;

sold = GROUP LAST SaleGiftCard detail ORDER dateTime(detail), detail WHERE isSold(detail) AND NOT isReturn(detail)
        BY giftCard(detail) MATERIALIZED;
soldReturn = GROUP LAST SaleGiftCard detail ORDER dateTime(detail), detail WHERE isSold(detail) AND isReturn(detail)
        BY giftCard(detail) MATERIALIZED;
isSold 'Продан' (GiftCard g) = isSold(sold(g));

isReturn 'Возвращён' (GiftCard g) = isReturn(lastSaleGiftCard(g));  // по-хорошему и isSold так сделать

skipSoldConstraint = ABSTRACT BOOLEAN (GiftCard);

CONSTRAINT DROPPED (GiftCard g IS GiftCard) AND PREV (isSold(g)) AND NOT PREV(skipSoldConstraint(g))
    MESSAGE 'Запрещено удалять проданные сертификаты';
    
dateSold 'Дата продажи' (GiftCard g) = date(sold(g)) MATERIALIZED;
dateSoldReturn 'Дата возврата' (GiftCard g) = date(soldReturn(g)) MATERIALIZED;
departmentStoreSold 'Где продан' (GiftCard g) = departmentStore(sold(g));
nameDepartmentStoreSold 'Где продан' (GiftCard g) = nameDepartmentStore(sold(g));
numberReceiptSold 'Номер чека (продажа)' (GiftCard g) = numberDocument(sold(g));

CLASS ReceiptGiftCardSaleDetail 'Строка продажи сертификата' : ReceiptDetail, SaleGiftCard;
TABLE receiptGiftCardSaleDetail (ReceiptGiftCardSaleDetail);

@defineExternalizable(receiptGiftCardSaleDetail, STRING[100]);

giftCard = DATA GiftCard (ReceiptGiftCardSaleDetail) INDEXED;

isReceiptGiftCardSaleDetail (ReceiptGiftCardSaleDetail d) = TRUE IF d IS ReceiptGiftCardSaleDetail;
seriesNumberGiftCard 'Серия/Номер сертификата' (ReceiptGiftCardSaleDetail detail) = seriesNumber(giftCard(detail));

EXTEND FORM zReport
    PROPERTIES(d) seriesNumberGiftCard SHOWIF isReceiptGiftCardSaleDetail(d) AFTER valueVAT(d)
;
EXTEND FORM zReports
    PROPERTIES(d) READONLY seriesNumberGiftCard SHOWIF isReceiptGiftCardSaleDetail(d) 
;

receipt = DATA Receipt (ReceiptGiftCardSaleDetail) NONULL DELETE INDEXED AGGR;
receipt(ReceiptGiftCardSaleDetail detail) += receipt(detail);
zReport(ReceiptGiftCardSaleDetail d) = zReport(receipt(d)); 

@defineDocumentDetailPosted(receipt, ReceiptGiftCardSaleDetail);
isPosted(ReceiptGiftCardSaleDetail d) += isPosted(d); 

@defineDocumentDetailClosed(receipt, ReceiptGiftCardSaleDetail);
isClosed(ReceiptGiftCardSaleDetail d) += isPosted(d); 

@defineDocumentDetailDepartmentStoreCustom(receipt, receiptGiftCardSaleDetail);

@defineDocumentDetailTime(receipt, ReceiptGiftCardSaleDetail);
dateTime[ReceiptDetail](ReceiptGiftCardSaleDetail detail) += dateTime(detail);
date[ReceiptDetail](ReceiptGiftCardSaleDetail detail) += date(detail);

departmentStore[ReceiptDetail](ReceiptGiftCardSaleDetail detail) += departmentStore(detail);
type(ReceiptGiftCardSaleDetail detail) += BPSTRING[10]('Сертификат') IF detail IS ReceiptGiftCardSaleDetail;
quantity(ReceiptGiftCardSaleDetail detail) += 1.0 IF detail IS ReceiptGiftCardSaleDetail;

price 'Цена' = DATA NUMERIC[16,4] (ReceiptGiftCardSaleDetail);
price(ReceiptGiftCardSaleDetail detail) += price(detail);

extraSum = ABSTRACT NUMERIC[18,4] (ReceiptGiftCardSaleDetail);
sum 'Сумма' = DATA NUMERIC[18,4] (ReceiptGiftCardSaleDetail);
sum[ReceiptDetail](ReceiptGiftCardSaleDetail detail) += sum(detail);
signedSum(ReceiptGiftCardSaleDetail detail) += sum(detail);

isReturn 'Возвратный' = DATA BOOLEAN (ReceiptGiftCardSaleDetail);

sumReceiptDetailGiftCard 'Сумма проданных сертификатов' (receiptDetail) = GROUP SUM sum(ReceiptGiftCardSaleDetail d) BY receipt(d);
sumReceiptDetailGiftCard 'Сумма проданных сертификатов' (zReport)= GROUP SUM sum(ReceiptGiftCardSaleDetail d) BY zReport(d) IN documentSum;

namePaymentType 'Тип платежа' (ReceiptGiftCardSaleDetail d) = [ GROUP CONCAT namePaymentType(Payment p), ', ' ORDER p BY receipt(p)](receipt(d));

//имплемент в GiftCardLedger
isSold(ReceiptGiftCardSaleDetail detail) += detail IS ReceiptGiftCardSaleDetail;
giftCard(ReceiptGiftCardSaleDetail detail) += giftCard(detail);
dateTime(ReceiptGiftCardSaleDetail detail) += dateTime(receipt(detail));
sum(ReceiptGiftCardSaleDetail detail) += sum(detail) (+) extraSum(detail);
description(ReceiptGiftCardSaleDetail detail) += STRING[100](OVERRIDE 'Возврат' IF isReturn(detail), 'Продажа' IF detail IS ReceiptGiftCardSaleDetail);
numberDocument(ReceiptGiftCardSaleDetail detail) += STRING[50](number(receipt(detail)));
departmentStore(ReceiptGiftCardSaleDetail detail) += departmentStore(receipt(detail));
isReturn(ReceiptGiftCardSaleDetail detail) += isReturn(detail);
namePaymentType(ReceiptGiftCardSaleDetail detail) += ISTRING[110](namePaymentType(detail));

edit (ReceiptGiftCardSaleDetail d) + {  DIALOG zReport OBJECTS z = zReport(d), b = receipt(d), d = d DOCKED; }

show(ReceiptGiftCardSaleDetail d)  { 
	NEWSESSION {
	    SHOW zReport OBJECTS z = zReport(d), b = receipt(d), d = d DOCKED READONLY;
	}
}

show(ReceiptGiftCardSaleDetail d) + {  show(d); }  


//генерация подарочных сертификатов
FORM generationGiftCards 'Генерация подарочных сертификатов'
    OBJECTS n=Numerator  PANEL
    PROPERTIES(n) name SELECTOR , curValue

    OBJECTS quantityCards=INTEGER PANEL
    PROPERTIES(quantityCards) intValueQuantityCards = VALUE

    OBJECTS priceCards=NUMERIC[16,4] PANEL
    PROPERTIES(priceCards) valuePriceCards = VALUE
    
    OBJECTS dt=DATE PANEL
    PROPERTIES(dt) valueDt = VALUE   
     
    OBJECTS d=INTEGER PANEL
    PROPERTIES(d) valueD = VALUE   
    
;

DESIGN generationGiftCards {
    BOX {
        NEW topContainer{
            caption = 'Параметры';
            NEW numerator{
                type = CONTAINERH;
                MOVE PROPERTY(name(n)) {caption = 'Нумератор';}; 
                MOVE PROPERTY(curValue(n));     
            }
            MOVE PROPERTY(intValueQuantityCards) {caption = 'Количество подарочных сертификатов';}
            MOVE PROPERTY(valuePriceCards) {caption = 'Цена подарочных сертификатов';}
            MOVE PROPERTY(valueDt) {caption = 'Дата';}
            MOVE PROPERTY(valueD) {caption = 'Срок действия (дней)';}            
        }
        MOVE TOOLBARBOX;
    }
}

overGenerateGiftCards  ABSTRACT LIST ( GiftCard);
iterateLong(LONG i, LONG from, LONG to) = RECURSION i==from AND from IS LONG AND to IS LONG STEP i==$i+1 AND i<=to CYCLES IMPOSSIBLE;

generateGiftCards 'Сгенерировать ПС'()  { 
    NEWSESSION {
        DIALOG generationGiftCards OBJECTS n = defaultNumeratorGiftCard() INPUT, 
                                       quantityCards INPUT, priceCards INPUT, dt INPUT, d INPUT NOMANAGESESSION DO {
            LOCAL from = LONG ();
            LOCAL to = LONG ();
            
            APPLY NESTED LOCAL {
                from() <- curValue(n);
                to() <- curValue(n) + quantityCards - 1;
                curValue(n) <- curValue(n) + quantityCards;
            }
            
            FOR iterateLong(LONG i, from(), to()) NEW g = GiftCard DO {
                numerator(g) <- n;
                number(g) <- lpadStringWithZero(i, stringLength(n));
                series(g) <- series(g);
                id(g) <- CONCAT '', series(g), lpadStringWithZero(i, stringLength(n));
                price(g) <- priceCards;
                date(g) <- dt;                
                expiryDays(g) <- d;
                
                overGenerateGiftCards(g);
            }
            APPLY;
        }
    }
} TOOLBAR;

//формы
FORM giftCard 'Подарочный сертификат'
    OBJECTS g = GiftCard PANEL
    PROPERTIES(g) nameNumerator, number, series, id SHOWIF showIDs(), date, price, expiryDays, inactive

    EDIT GiftCard OBJECT g
;

DESIGN giftCard {
    NEW topContainer{
        caption = 'Подарочный сертификат';
        MOVE PROPERTY(nameNumerator(g));
        MOVE PROPERTY(number(g));
        MOVE PROPERTY(series(g));
        MOVE PROPERTY(id(g));
        MOVE PROPERTY(date(g));
        MOVE PROPERTY(expiryDays(g));
        MOVE PROPERTY(price(g));
        MOVE PROPERTY(inactive(g));
    }
    MOVE TOOLBARBOX;
}

allowPartiallyPayGiftCard 'Разрешить погашать сертификат частично' = DATA BOOLEAN ();
dateSoldStartMultiPayment 'Дата продажи сертификатов, с которой их можно использовать несколько раз' = DATA DATE();

FORM giftCards 'Подарочные сертификаты'
    OBJECTS g = GiftCard LAST
    PROPERTIES(g) READONLYIF isReadonly() inactive, number, series, id SHOWIF showIDs(), date, dateSold,  nameDepartmentStoreSold, numberReceiptSold, expiryDays, price
    PROPERTIES(g) READONLY currentBalance SHOWIF allowPartiallyPayGiftCard() 
    PROPERTIES generateGiftCards() DRAW g 
    PROPERTIES(g) NEWSESSION newGiftCard=NEW, editGiftCard=EDIT, deleteGiftCard=DELETE TOOLBAR 

    OBJECTS l = GiftCardLedger
    PROPERTIES(l) READONLY dateTime, seriesNumber, sum, description, numberDocument, nameDepartmentStore, nameLegalEntity, namePaymentType
    PROPERTIES (l) show //edit                    
                    
    ORDERS dateTime(l)
    FILTERS giftCard(l) == g
    
    FILTERGROUP filter0
        FILTER 'Активные' active(g) 'F5' DEFAULT 

;

NAVIGATOR {
    retailMasterData {
        NEW giftCards;
    }
}

@extendFormEditable(giftCards);

CLASS ABSTRACT UseGiftCard 'Гашение подарочных сертификатов' : GiftCardLedger;

used = GROUP LAST UseGiftCard ledger  ORDER dateTime(ledger), ledger WHERE ledger IS UseGiftCard AND sum(ledger) > 0
        BY giftCard(ledger) MATERIALIZED;
isUsed 'Погашен' (GiftCard giftCard) = TRUE IF used(giftCard);
dateUsed 'Дата последнего использования'(GiftCard g) = date(used(g));
nameDepartmentStoreUsed 'Где использован последний раз' (GiftCard g) = nameDepartmentStore(used(g));
nameLegalEntityUsed 'Компания (последнее использование)' (GiftCard g) = name(legalEntity(departmentStore(used(g)))) CHARWIDTH 10;
numberReceiptUsed 'Номер чека (последнее использование)' (GiftCard g) = numberDocument(used(g));

WHEN SETCHANGED(giftCard(UseGiftCard l)) AND [GROUP SUM 1 IF UseGiftCard ledger IS UseGiftCard BY giftCard(ledger)](giftCard(l))>1 AND l IS UseGiftCard AND NOT isSumPaymentReceipt() 
    AND (NOT allowPartiallyPayGiftCard() OR (allowPartiallyPayGiftCard() AND dateSold(giftCard(l)) < dateSoldStartMultiPayment())) DO {
    MESSAGE 'Нельзя повторно использовать сертификат' NOWAIT;
    cancel();
}    

isUsedTotal 'Погашен полностью' (GiftCard giftCard) = TRUE IF used(giftCard) AND NOT currentBalance(giftCard) > 0.0;

//использование подарочных сертификатов при оплате
CLASS PaymentGiftCard : Payment, UseGiftCard;
TABLE paymentGiftCard(PaymentGiftCard);

giftCard = DATA GiftCard (PaymentGiftCard) INDEXED;
seriesNumberGiftCard 'Серия/номер' (PaymentGiftCard payment) = seriesNumber(giftCard(payment));

receiptPayment(PaymentGiftCard pgc) = receipt[Payment](pgc) IF pgc IS PaymentGiftCard MATERIALIZED INDEXED;

//имплемент в GiftCardLedger
giftCard(PaymentGiftCard payment) += giftCard(payment);
dateTime(PaymentGiftCard payment) += dateTime(receiptPayment(payment)) IF payment IS PaymentGiftCard;
sum(PaymentGiftCard payment) += sum[Payment](payment) IF payment IS PaymentGiftCard;
description(PaymentGiftCard payment) += STRING[100]('Погашение') IF payment IS PaymentGiftCard;
numberDocument(PaymentGiftCard payment) += STRING[50](number(receiptPayment(payment))) IF payment IS PaymentGiftCard;
departmentStore(PaymentGiftCard payment) += departmentStore(receiptPayment(payment)) IF payment IS PaymentGiftCard;

edit(PaymentGiftCard d) + { 
    IF d IS PaymentGiftCard THEN {
        DIALOG zReport OBJECTS z = zReport(receipt(d)), b = receipt(d), p = d DOCKED;
    }
}

show(PaymentGiftCard d)  { 
	NEWSESSION {
	    IF d IS PaymentGiftCard THEN {
	        SHOW zReport OBJECTS z = zReport(receipt(d)), b = receipt(d), p = d DOCKED READONLY;
	    }
	}
}
show(PaymentGiftCard d) + {  show(d); }  

sumGiftCard 'Сумма подарочных сертификатов в чеке' (receipt) =
    GROUP SUM sum[Payment](PaymentGiftCard payment) IF payment IS PaymentGiftCard
    BY receipt(payment);
    
//CONSTRAINT sumGiftCard(Receipt receipt) > sumReceiptDetail(receipt) AND NOT allowPartiallyPayGiftCard()
//    CHECKED BY sumGiftCard[Receipt] MESSAGE 'Сумма сертификатов не может превышать суммы всего чека';

EXTEND FORM options
    PROPERTIES allowPartiallyPayGiftCard(), dateSoldStartMultiPayment()
;

DESIGN options {
    pane{
        NEW giftCards {
            caption = 'Подарочные сертификаты';
            MOVE PROPERTY(allowPartiallyPayGiftCard());
            MOVE PROPERTY(dateSoldStartMultiPayment());
        }
    }
}

CONSTRAINT giftCard(PaymentGiftCard p) AND p IS PaymentGiftCard AND NOT (price(giftCard(p)) == sum[Payment](p)) AND NOT allowPartiallyPayGiftCard() 
    MESSAGE 'Сумма оплаты сертификатом должна быть равна цене сертификата';

expireDate 'Дата истечения' (GiftCard giftCard) = sum(dateSold(giftCard), expiryDays(giftCard) (+) extraExpiryDays()) MATERIALIZED INDEXED;
isExpiredDate 'Истек срок' (GiftCard giftCard) = expireDate(giftCard) < currentDate(); 

changeExpireDate (GiftCard giftCard) {
    INPUT d = DATE DO {
        expiryDays(giftCard) <- daysBetweenDates(d, dateSold(giftCard)) (-) extraExpiryDays();
    }
}

EXTEND FORM giftCards
    PROPERTIES(g) READONLYIF isReadonly() BEFORE expiryDays(g) dateUsed, nameDepartmentStoreUsed, nameLegalEntityUsed,
                  numberReceiptUsed 
    PROPERTIES(g) READONLYIF isReadonly() AFTER expiryDays(g) expireDate ON CHANGE changeExpireDate(g)

    FILTERGROUP filter1
        FILTER 'Просрочен' expireDate(g) < currentDate() 'F10'
        FILTER 'Не просрочен' sold(g) AND NOT (expireDate(g) < currentDate()) 'F9'
 
        
    FILTERGROUP filter2
        FILTER 'Погашен' used(g) 'F8' 
        FILTER 'Погашен полностью' isUsedTotal(g)  
        FILTER 'Погашен частично' used(g) AND NOT isUsedTotal(g) 
        FILTER 'Не погашен' sold(g) AND NOT used(g) 'F7'                                                      
;

EXTEND CLASS PaymentMeans { paymentMeansGiftCard 'Подарочный сертификат'}
order(PaymentMeans p) += WHEN p == PaymentMeans.paymentMeansGiftCard THEN 3;

overLoadDefaultPaymentTypes() + { 
    loadDefaultType('Подарочный сертификат', PaymentMeans.paymentMeansGiftCard, 'giftcard');
}

sumGiftCardPayment 'Сумма продаж (сертификат)' (receipt) = GROUP SUM sum(Payment payment) IF paymentMeans(payment) == PaymentMeans.paymentMeansGiftCard BY receipt(payment);
sumGiftCardPayment 'Сумма продаж (сертификат)' (zReport) = GROUP SUM sumGiftCardPayment(Receipt r) BY zReport(r) MATERIALIZED IN documentSum;

minGiftCardPaymentType() = GROUP MIN PaymentType paymentType IF paymentMeans(paymentType) == PaymentMeans.paymentMeansGiftCard;

EXTEND FORM zReport
    PROPERTIES (z) READONLY BEFORE sumNegativeCashPayment(z) sumGiftCardPayment
    PROPERTIES (z) READONLY  sumReceiptDetailGiftCard
    PROPERTIES (b) READONLY  sumReceiptDetailGiftCard AFTER sumCardPayment(b)
    PROPERTIES (b) READONLY AFTER sumCardPayment(b) sumGiftCardPayment
;

EXTEND FORM zReports
    PROPERTIES (z) READONLY BEFORE sumNegativeCashPayment(z) sumGiftCardPayment
    PROPERTIES (z) READONLY  sumReceiptDetailGiftCard
    PROPERTIES (b) READONLY  sumReceiptDetailGiftCard
    PROPERTIES (b) READONLY AFTER sumCardPayment(b) sumGiftCardPayment    
;

addGiftCardpayment 'Добавить ПС' (Receipt r)  { 
    NEW p = PaymentGiftCard {
        receipt(p) <- r; 
        paymentType(p)<-(GROUP MAX PaymentType t IF paymentMeans(t)==PaymentMeans.paymentMeansGiftCard);
    }
} 

EXTEND FORM zReport
    PROPERTIES (b)  addGiftCardpayment TOOLBAR DRAW p
    PROPERTIES (p) seriesNumber[GiftCardLedger] BEFORE del;

EXTEND FORM zReports
    PROPERTIES (p) READONLY seriesNumber[GiftCardLedger];

overCopy(ReceiptGiftCardSaleDetail detail,Receipt r) + { 
    IF detail IS ReceiptGiftCardSaleDetail THEN {
        NEW d=ReceiptGiftCardSaleDetail {
            receipt(d) <- r;
            giftCard(d) <- giftCard(detail);
            price(d) <- price(detail);            
            sum(d) <- sum(detail);
            overCopy(d, detail);
        }
    }
}