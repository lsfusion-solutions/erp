MODULE GiftCardSaleInvoice;

REQUIRE GiftCardItem, SaleShipment, InvoicePrint;

NAMESPACE GiftCard;


CLASS InvoiceGiftCardSaleDetail 'Строка продажи сертификата' : SaleGiftCard;
TABLE invoiceGiftCardSaleDetail (InvoiceGiftCardSaleDetail);

giftCard = DATA GiftCard (InvoiceGiftCardSaleDetail) INDEXED;

invoice = DATA Sale.Invoice (InvoiceGiftCardSaleDetail) NONULL DELETE INDEXED;

//имплемент в GiftCardLedger
isSold(InvoiceGiftCardSaleDetail detail) +=  isPosted(invoice(detail)) AND createShipment(invoice(detail));
giftCard(InvoiceGiftCardSaleDetail detail) += giftCard(detail); 
dateTime(InvoiceGiftCardSaleDetail detail) += OVERRIDE shipmentDateTime(invoice(detail)), dateTime(invoice(detail));
sum(InvoiceGiftCardSaleDetail detail) += price(giftCard(detail));
description(InvoiceGiftCardSaleDetail detail) += STRING[100]('Безнал') IF detail IS InvoiceGiftCardSaleDetail;
numberDocument(InvoiceGiftCardSaleDetail detail) += seriesNumber(invoice(detail));
departmentStore(InvoiceGiftCardSaleDetail detail) += supplierStock(invoice(detail)) AS DepartmentStore;
namePaymentType(InvoiceGiftCardSaleDetail detail) += STRING[110]('Безнал') IF detail IS InvoiceGiftCardSaleDetail;

isGiftCard 'Подарочные сертификаты' = DATA BOOLEAN (Sale.Operation);

EXTEND FORM Sale.operation
    PROPERTIES(o) isGiftCard
;
DESIGN Sale.operation {
    showContainer {
        MOVE PROPERTY(isGiftCard(o));
    }
}

isGiftCard(Sale.Invoice i) = isGiftCard(operation(i));

in 'Отм' = DATA LOCAL BOOLEAN (GiftCard);
quantityInvoiceGiftCardSaleDetail 'Кол-во сертификатов в документе'  = 
    GROUP SUM NUMERIC[16,5](1) IF giftCard(InvoiceGiftCardSaleDetail gd)
          BY  sku(giftCard(gd)), invoice(gd);
toShip 'Подобрать' (Sku i, Sale.Invoice o) = quantityInvoiceDetail(i, o)(-) 
                                                                (NUMERIC[16,5]([GROUP SUM 1 IF in(GiftCard c) BY sku(c)](i)) IF o IS Sale.Invoice) (-)
                                                                quantityInvoiceGiftCardSaleDetail(i,o);

toShip 'Подобрать' (Sale.Invoice o) = GROUP SUM toShip(Sku i, o);                                                               
                                                                
backgroundToShip (Sku i, Sale.Invoice o) = CASE
    WHEN toShip(i,o) <0 THEN RGB (255,0,0)  
    WHEN toShip(i,o) >0 THEN RGB(255, 250, 205)  
;

FORM dialogGiftCard 'Подбор подарочных сертификатов'
    OBJECTS o = Sale.Invoice PANEL
    
    OBJECTS i = Item
    PROPERTIES(i) READONLY caption, id
    PROPERTIES(i, o) READONLY toShip BACKGROUND backgroundToShip(i,o)   
    FILTERS isGiftCard(i), 
            quantityInvoiceDetail(i,o)            
    
    OBJECTS g=GiftCard                                 
    PROPERTIES (g) in
    PROPERTIES (g) READONLY number, date, idBarcode, nameSku

    FILTERS NOT isSold(g) OR isReturn(g)
    
    FILTERGROUP sku FILTER 'По номиналу' sku(g) == i 'F10' DEFAULT
;

DESIGN dialogGiftCard {
    size = (1024, 768);
    NEW filters {
        caption = 'Фильтр';
        horizontal = TRUE;
    }
    NEW body {
        fill = 1;
        MOVE BOX(i) { caption = 'Номинал';}
        MOVE BOX(g){ fill = 2;}
        
    }
    MOVE TOOLBARBOX;
}

fillDetailDialogSkuGiftCard 'Подбор сертификатов'(Sale.Invoice invoice)  { 
    in(GiftCard g) <- NULL;
    DIALOG dialogGiftCard OBJECTS o = invoice NOMANAGESESSION DO {
        FOR in(GiftCard g) NEW gd = InvoiceGiftCardSaleDetail DO {
            invoice(gd) <- invoice;
            giftCard(gd) <- g;
        }    
    }   
} TOOLBAR;

skipGiftCardSaleDetailSku 'Не проверять товары в сертификатах выписки' = DATA BOOLEAN ();

CONSTRAINT SET(isPosted(Sale.Invoice o)) AND isGiftCard(o) AND (quantityInvoiceGiftCardSaleDetail(Sku i,o) OR quantityInvoiceDetail(i,o)) AND 
    createShipment(o) AND NOT (skipGiftCardSaleDetailSku() OR (quantityInvoiceDetail(i,o) == quantityInvoiceGiftCardSaleDetail(i,o))) 
        MESSAGE 'Количество товара не соответствует количеству сертификатов';

//CONSTRAINT isGiftCard(Sale.Invoice o) AND isPosted(o) AND quantityInvoiceDetail(Sku i,o) AND createShipment(o) AND NOT 
//    (quantityInvoiceDetail(i,o) == quantityInvoiceGiftCardSaleDetail(i,o)) 
//        MESSAGE 'Количество товара не соответствует количеству сертификатов';        
overSkipEditGiftCard = ABSTRACT CASE BOOLEAN (Sale.Invoice);

EXTEND FORM Sale.userInvoice
    OBJECTS gd = InvoiceGiftCardSaleDetail GRID 
    PROPERTIES (gd) SHOWIF isGiftCard(i) READONLY seriesNumber, sum, DELETE CHANGEABLE GRID SHOWIF NOT overSkipEditGiftCard(i)
    FILTERS invoice(gd) == i
    
    PROPERTIES (i) SHOWIF isGiftCard(i) AND NOT overSkipEditGiftCard(i) fillDetailDialogSkuGiftCard DRAW gd 
;

DESIGN Sale.userInvoice {
    specificationBox {
        MOVE BOX(gd);
    }
}


edit(InvoiceGiftCardSaleDetail d) + {  DIALOG Sale.userInvoice OBJECTS i = invoice(d), gd = d DOCKED; }

show(InvoiceGiftCardSaleDetail d)  { 
	NEWSESSION {
	    SHOW Sale.userInvoice OBJECTS i = invoice(d), gd = d DOCKED READONLY;
	}
}
show(InvoiceGiftCardSaleDetail d) + {  show(d); }  

//рабочий стол

giftCardLegalEntityGroup = DATA LegalEntityGroup ();
nameGiftCardLegalEntityGroup 'Группа организаций для покупателей сертификатов' = name(giftCardLegalEntityGroup());

EXTEND FORM options PROPERTIES() nameGiftCardLegalEntityGroup;
DESIGN options { giftCards { MOVE PROPERTY(nameGiftCardLegalEntityGroup()); } }

beforeApplyCustomer(LegalEntity l)  { 
    fullName(l) <- name(l);
}

changeAddress (LegalEntity l)  { 
    INPUT s = STRING[150] DO
        dataAddress(l, DATE d) <- s WHERE d == 2001_01_01;
}

changePhone (LegalEntity l)  { 
    INPUT s = STRING[100] DO
        dataPhone(l, DATE d) <- s WHERE d == 2001_01_01;
}


changeAccount (LegalEntity l)  { 
    INPUT s = STRING[50] DO
        IF NOT account(l) THEN {
            NEW a = Bank.Account {
                number(a) <- s;
                legalEntity(a) <- l;
                userAccount(l) <- a;
            }
        } ELSE 
            number(Bank.Account a) <- s WHERE a == account(l);
}

changeBank (LegalEntity l)  { 
    DIALOG dialogBanks OBJECTS b INPUT DO {
        IF NOT account(l) THEN {
            NEW a = Bank.Account {
                bank(a) <- b;
                legalEntity(a) <- l;
                userAccount(l) <- a;
            }
        } ELSE 
            bank(Bank.Account a) <- b WHERE a == account(l);
    }
}

defaultContract(LegalEntity l) = defaultContractSkuSupplierCustomer(defaultCompany(), l, currentDate());

dateFromContract 'Дата'(LegalEntity l) = dateFrom(defaultContract(l));
changeDateFromContract (LegalEntity l)  { 
    INPUT d = DATE DO
        dateFrom(UserContractSku c) <- d WHERE c == defaultContract(l);
}

numberContract 'Номер'(LegalEntity l) = number(defaultContract(l));
changeNumberContract(LegalEntity l)  { 
    INPUT s = ISTRING[28] DO
        number(UserContractSku c) <- s WHERE c == defaultContract(l);
}

FORM giftCardSaleCustomer 'Покупатель'
    OBJECTS l=LegalEntity PANEL
    PROPERTIES(l) name
    PROPERTIES(l) address ON CHANGE changeAddress(l), phone ON CHANGE changePhone(l)
    PROPERTIES(l) numberAccount ON CHANGE changeAccount(l), nameBank ON CHANGE changeBank(l)
    PROPERTIES (l)dateFromContract ON CHANGE changeDateFromContract(l), numberContract ON CHANGE changeNumberContract(l)
    
    EVENTS 
        ON APPLY BEFORE beforeApplyCustomer(l)
;

DESIGN giftCardSaleCustomer{
    MOVE PROPERTY (name(l));
    MOVE PROPERTY (address(l));
    MOVE PROPERTY (phone(l));
    MOVE PROPERTY (numberAccount(l));
    MOVE PROPERTY (nameBank(l));
    NEW contract {
        caption = 'Договор';
        MOVE PROPERTY (dateFromContract(l));
        MOVE PROPERTY (numberContract(l));
    }
    MOVE TOOLBARBOX;
}

addCustomer 'Добавить'()  { 
	NEWSESSION {
	    NEW  l = LegalEntity {
	        legalEntityGroup(l) <- giftCardLegalEntityGroup();
	        isCustomer(l) <- TRUE;
	        
	        NEW uc = UserContractSku {
	            supplier(uc) <- defaultCompany();
	            customer(uc) <- l;
	            currency(uc) <- defaultCurrency();
	            dateFrom(uc) <- currentDate();
	            isDataDefault(uc) <- TRUE ;
	        }
	        
	        SHOW giftCardSaleCustomer OBJECTS l = l NOCANCEL;
	    }
	    
	}
} IMAGE 'add.png' CHANGEKEY 'INSERT' HIDE TOOLBAR;

editCustomer 'Редактировать' (LegalEntity l)  { 
	NEWSESSION {
	        SHOW giftCardSaleCustomer OBJECTS l = l NOCANCEL;
	}
} IMAGE 'edit.png' CHANGEKEY 'BACK_SPACE' HIDE TOOLBAR;

FORM giftCardLegalEntitys 'Покупатели'
    OBJECTS l=LegalEntity
    PROPERTIES(l) READONLY name, address, phone, numberAccount, nameBank, dateFromContract, numberContract
    PROPERTIES addCustomer() DRAW l, editCustomer(l)
    ORDERS name(l)
    
    FILTERS giftCardLegalEntityGroup() == legalEntityGroup(l)
;

quantity 'Кол-во' = DATA LOCAL NESTED NUMERIC[16,5] (Item);

customer = DATA LOCAL NESTED LegalEntity ();
nameCustomer 'Покупатель'= name(customer());

changeCustomer()  { 
    DIALOG giftCardLegalEntitys OBJECTS l = customer() INPUT NULL DO
        customer() <- l;
}

supplierStock = DATA LOCAL NESTED Stock ();
nameSupplierStock 'Склад'= name(supplierStock());
useAccessCompany 'Использовать фильтр' = ABSTRACT BOOLEAN ();
changeSupplierStock()  { 
    DIALOG stocksCompany OBJECTS s = supplierStock() INPUT FILTERS (IF useAccessCompany() THEN accessCompany(currentUser(),s) ELSE s IS Stock) DO {
        supplierStock() <- s;         
    }
}

FORM skuGift 'Номиналы подарочных сертификатов'
    PROPERTIES () nameCustomer ON CHANGE changeCustomer(), nameSupplierStock ON CHANGE changeSupplierStock()

    OBJECTS i = Item
    PROPERTIES(i) READONLY caption, id
    PROPERTIES(i) quantity
    
    FILTERS isGiftCard(i)
;

DESIGN skuGift { 
    size = (600, 400);
    NEW topContainer {
        horizontal = TRUE;
        MOVE PROPERTY (nameCustomer());
        MOVE PROPERTY (nameSupplierStock());
    }
    MOVE BOX(i);
    MOVE TOOLBARBOX;
}


addGiftCardInvoice 'Продажа сертификатов'()  { 
	NEWSESSION {
	    quantity(Item i) <- NULL;
	    supplierStock() <- stock(currentUser());
	       
	    DIALOG skuGift DO {
	        NEW o = Sale.UserInvoice {
	            operation(o) <- (GROUP MIN Sale.Operation so IF isGiftCard(so));
	//            supplier(o) <- defaultSupplier(operation(o)) WHERE countSupplier(operation(o)) == 1;
	//            supplierStock(o) <- defaultCompanyStock(currentUser(), supplier(o))
	//                IF countAccessCompanyStock (currentUser(), supplier(o)) == 1;
	            supplierStock(o) <- supplierStock();
	            supplier(o) <- legalEntity(supplierStock());
	
	            customer(o) <- customer();
	            
	            priceListType(o) <- defaultPriceListType(operation(o)) 
	                        IF defaultPriceListType(operation(o));
	                                                         
	             date(o) <- currentDate();
	             time(o) <- currentTime();
	                        
	            FOR quantity(Item i) NEW d = Sale.UserInvoiceDetail DO {
	                userInvoice(d) <- o;
	                sku(d) <- i;
	                quantity(d) <- quantity(i);
	                priceListType(d) <- priceListType(o);
	                      
	                price(d) <- round2(prevList(priceListType(d), d) );
	                invoicePrice(d) <- round2(prevList(priceListType(d), d) );
	    
	            }  
	            SHOW Sale.userInvoice OBJECTS i=o DOCKED NOCANCEL; 
	        }
	    }    
	}
} TOOLBAR IMAGE 'add.png';


shiped 'Отпуск сертификатов покупателю'(Sale.UserInvoice invoice)  { 
	NEWSESSION {
	    createShipment(invoice) <- TRUE;
	    shipmentDate(invoice) <- currentDate();
	    shipmentTime(invoice) <- currentTime();
	    
	    fillDetailDialogSkuGiftCard(invoice);
	    
	    APPLY;
	}
} TOOLBAR;

statusShipment 'Статус выписки' = CASE 
    WHEN createShipment(Sale.Invoice i) AND isPosted(i) THEN 'Выписана' 
    WHEN isPosted(i) THEN 'Не выписана'
    WHEN i IS Sale.Invoice THEN 'В обработке' CHARWIDTH 10;
    
backgroundShipment 'Цвет' (Sale.Invoice o)= RGB(212,255,212) IF isPosted(o) AND createShipment(o);  

overFilterGiftCard = ABSTRACT BOOLEAN (Sale.Invoice);
filterGiftCard (Sale.Invoice i) = isGiftCard(i) OR overFilterGiftCard(i);

hideShiped = ABSTRACT BOOLEAN (Sale.Invoice);
showShiped (Sale.Invoice i) = toShip(i) AND NOT hideShiped(i);

relation   = 
    GROUP SUM 1 BY giftCard(InvoiceGiftCardSaleDetail gd), invoice(gd);

FORM saleGiftCardDashboard 'Выписка подарочных сертификатов' 
    OBJECTS i = Sale.Invoice LAST
    PROPERTIES (i) READONLY isClosed 
                            
    PROPERTIES (i) READONLY BACKGROUND background(i) isPosted, number, series, date, time    
    PROPERTIES (i) READONLY statusShipment BACKGROUND backgroundShipment(i)
    PROPERTIES (i) READONLY nameSupplier, nameSupplierStock, nameCustomer, nameCustomerStock, nameCurrency
    PROPERTIES (i) READONLY countInvoiceDetail, quantityInvoiceDetail, sumInvoiceDetail, VATSumInvoiceDetail, invoiceSumInvoiceDetail
    PROPERTIES (i) READONLY note
    PROPERTIES (i) READONLY isOpened

    PROPERTIES ()  addGiftCardInvoice DRAW i
    PROPERTIES (i) close[UserInvoice] SHOWIF showClose(i), open SHOWIF showOpen(i)
    PROPERTIES (i) NEWSESSION EDIT SHOWIF overShowEdit(i), DELETE
    PROPERTIES (i)            copy, shiped SHOWIF showShiped(i)
    
    PROPERTIES (i) print

    OBJECTS d = Sale.InvoiceDetail
    PROPERTIES (d) READONLY index
    PROPERTIES (d) READONLY BACKGROUND backgroundSkuDetail(d) idBarcodeSku, idSku SHOWIF showIDs(), nameSku, shortNameUOMSku
    PROPERTIES (d) READONLY quantity, namePriceListType, price, sum,
                   numberVAT, valueVAT, VATSum, invoiceSum
    ORDERS index(d)

    FILTERS invoice(d) == i
    FILTERS filterGiftCard(i)
    
    OBJECTS l=LegalEntity
    PROPERTIES(l) READONLY name, address, phone, numberAccount, nameBank, dateFromContract, numberContract
    PROPERTIES addCustomer() DRAW l, editCustomer(l)
    ORDERS name(l)
    
    FILTERS giftCardLegalEntityGroup() == legalEntityGroup(l)
    
    OBJECTS g = GiftCard
    PROPERTIES (g) READONLY number, price
    FILTERS relation(g,i)
    FILTERGROUP price FILTER 'По номиналу' sku(g) == sku(d) 'F7' DEFAULT 
;

DESIGN saleGiftCardDashboard {
    NEW documentContainer BEFORE TOOLBARBOX {
        fill = 1;
        NEW header{
            fill = 1;
            tabbed = TRUE;
            MOVE BOX(i){caption = 'Счета-фактуры';};
            MOVE BOX(l){caption = 'Покупатели';};
        }
        
        NEW documentDetail {
            fill = 1;
            tabbed = TRUE;
            NEW docDet {
                fill = 1;
                horizontal = TRUE;
                caption = 'Спецификация';
                MOVE BOX(d) {
                    fill = 2.5;
                    caption = 'Спецификация';
                }
                MOVE BOX (g);
            }
            NEW printTab {
                caption = 'Печатные формы';
            }            
            NEW actionContainer {
                caption = 'Действия';
            }
        }
    }
}
@defineFilterIsOpened (invoice, saleGiftCardDashboard, i);
NAVIGATOR {
    retailDashboardNavigator{
        NEW saleGiftCardDashboard;
    }
}