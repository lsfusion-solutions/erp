MODULE RetailCRM;

REQUIRE System,
        Time,
        Retail,
        Stock,
        Barcode,
        Store,
        Numerator,
        LegalEntity,
        Document,
        DiscountCard,
        PriceListLedger;

PRIORITY Stock;

// ---- Добавляем отдельную вкладку на форму Настройки
DESIGN options {
    pane {
        NEW retailCRM {
            caption = 'Акции';
        }
    }
}

priceListType = DATA LedgerPriceListType (DiscountCard);
namePriceListType 'Вид цен для дисконтных карт' (DiscountCard DiscountCard) = name(priceListType(DiscountCard));

EXTEND FORM discountCard 
    PROPERTIES(d) namePriceListType
;

DESIGN discountCard {
    PANEL(d) {
        NEW retailCRM {
            caption = 'Акции';
            MOVE PROPERTY(namePriceListType(d));
        }
    }
}

EXTEND FORM discountCardDialog
    PROPERTIES(d) READONLY namePriceListType
;

EXTEND FORM discountCards 
    PROPERTIES(d) READONLYIF isReadonly() namePriceListType
;

//-------------------------- Группы акций ----------------------------------------//

CLASS PromotionGroup 'Группа акций';
TABLE promotionGroup (PromotionGroup);

@defineExternalizable(promotionGroup, STRING[100]);
name 'Наименование' = DATA ISTRING[100](PromotionGroup) IN id;
inactive 'Неактивная' = DATA BOOLEAN (PromotionGroup);
active 'Активная' (PromotionGroup g) = g IS PromotionGroup AND NOT inactive(g);

//--------------------------Акции----------------------------------------//

CLASS Promotion 'Акция';
TABLE promotion (Promotion);

@defineCreated(Promotion);

@defineExternalizable(promotion, STRING[100]);
@defineNumbered(Promotion, BPSTRING[2]);

@defineNumeratedDefault(Promotion, 'Акции', 'АК');

name 'Наименование' = DATA ISTRING[100](Promotion) IN id CHARWIDTH 20;

promotionGroup (promotion) = DATA PromotionGroup(Promotion) AUTOSET NONULL;
namePromotionGroup 'Группа акций' (Promotion promotion) = name(promotionGroup(promotion)) IN base;

userOrder 'Порядок' (promotion) = DATA INTEGER (Promotion);
userOrderPromotion 'Порядок' = DATA INTEGER () CHARWIDTH 20 NOFLEX;

order 'Порядок' (Promotion promotion) = OVERRIDE userOrder(promotion), userOrderPromotion() IF promotion IS Promotion , 1 IF promotion IS Promotion MATERIALIZED;

userSet 'Задается кассиром' (promotion) = DATA BOOLEAN (Promotion);

CLASS OrderPromotionType 'Порядок применения акции' { 
    ascending 'Начать с самой дешевой',
    descending 'Начать с самой дорогой',
    index 'В порядке позиций в чеке'    
}
TABLE orderPromotionType (OrderPromotionType);

orderPromotionType (promotion) = DATA OrderPromotionType(Promotion);
nameOrderPromotionType 'Порядок применения акции' = staticCaption(orderPromotionType(Promotion promotion)) CHARWIDTH 15;

EXTEND FORM options PROPERTIES() userOrderPromotion;

DESIGN options {
    retailCRM {
        MOVE PROPERTY(userOrderPromotion());
    }
}
DESIGN integrationData{

}
FORM orderPromotionTypies 'Порядок применения акции'
    OBJECTS d = OrderPromotionType
    PROPERTIES(d) READONLY staticCaption
    LIST OrderPromotionType OBJECT d
;

useAllQuantity 'В акции участвует весь товар, подходящий под условие' = DATA BOOLEAN (Promotion); 

// ----------------------------- Условия акций ------------------------ //

CLASS PromotionCondition 'Условие акции';
TABLE promotionCondition (PromotionCondition);

GROUP retailCRM 'Реквизиты' : id;

@defineExternalizable(promotionCondition, STRING[100]);

name 'Наименование' = DATA ISTRING[2000](PromotionCondition) CHARWIDTH 20;

dateFrom 'ДАТА ОТ:' = DATA DATE (Promotion) IN retailCRM NONULL;
dateTo 'ДАТА ДО:' = DATA DATE (Promotion) IN retailCRM NONULL;

timeOfFrom 'ВРЕМЯ ОТ:' =  DATA TIME (Promotion) IN retailCRM;
timeOfTo 'ВРЕМЯ ДО:' =  DATA TIME (Promotion) IN retailCRM;

TABLE promotionDOW (Promotion, DOW);
skip 'Исключить' = DATA BOOLEAN (Promotion, DOW);

allStores 'В акции' = DATA BOOLEAN (Promotion);
allStores(Promotion promotion) <- TRUE WHEN SET(promotion IS Promotion);

TABLE promotionChainStores(Promotion, ChainStores);
dataIn 'В акции' = DATA BOOLEAN (Promotion, ChainStores);

TABLE promotionStoreType(Promotion, StoreType);
dataIn 'В акции' = DATA BOOLEAN (Promotion, StoreType);

TABLE promotionStore(Promotion, Store);
dataIn 'В акции' = DATA BOOLEAN (Promotion, Store);

in 'В акции' (Promotion promotion, ChainStores chainStores) = OVERRIDE
    dataIn(promotion, chainStores),
    allStores(promotion) AND chainStores IS ChainStores MATERIALIZED;

in 'В акции' (Promotion promotion, StoreType storeType) = OVERRIDE
    dataIn(promotion, storeType),
    in(promotion, chainStores(storeType)) MATERIALIZED;

in 'В акции' (Promotion promotion, Store store) =
    (OVERRIDE dataIn(promotion, store),
              in(promotion, storeType(store)))
    AND isCompany(store) MATERIALIZED;

stores 'Магазины' (Promotion promotion) = GROUP
                                              CONCAT Store.name(Store store) IF in(promotion, store), ', '
                                              ORDER store MATERIALIZED CHARWIDTH 20;

minSumBill 'Сумма чека (от)' (promotion) = DATA NUMERIC[16,4] (Promotion);
maxSumBill 'Сумма чека (до)' (promotion) = DATA NUMERIC[16,4] (Promotion);

hasDiscountCard 'Есть дисконтная карта' = DATA BOOLEAN (Promotion);
noDiscountCard 'Нет дисконтной карты' = DATA BOOLEAN (Promotion);
allDiscountCard 'Любая дисконтная карта' = DATA BOOLEAN (Promotion);

TABLE promotionDiscountCard (Promotion, DiscountCard);
inData 'В акции' = DATA BOOLEAN (Promotion, DiscountCard);

in 'В акции' (Promotion promotion, DiscountCard discountCard) = OVERRIDE inData(promotion, discountCard),
                                                                       allDiscountCard(promotion) AND discountCard IS DiscountCard;

minCumulativeSum 'Накоп. сумма (от)' (promotion) = DATA NUMERIC[16,4] (Promotion);
maxCumulativeSum 'Накоп. сумма (до)' (promotion) = DATA NUMERIC[16,4] (Promotion);

useCurrentReceipt 'Учитывать текущий чек' (promotion) = DATA BOOLEAN (Promotion);

minCumulativeSum(Promotion promotion) => hasDiscountCard (promotion) RESOLVE RIGHT;
maxCumulativeSum(Promotion promotion) => hasDiscountCard (promotion) RESOLVE RIGHT;
allDiscountCard(Promotion promotion) => hasDiscountCard (promotion) RESOLVE RIGHT;

promotion = DATA Promotion (PromotionCondition) NONULL DELETE INDEXED;
namePromotion 'Акция' (PromotionCondition promotionCondition) = name(promotion(promotionCondition));
dateFrom 'Действует (от)' (PromotionCondition promotionCondition) = dateFrom(promotion(promotionCondition));
dateTo 'Действует (до)' (PromotionCondition promotionCondition) = dateTo(promotion(promotionCondition));

orderPromotionType = orderPromotionType(promotion(PromotionCondition condition));
nameOrderPromotionType 'Порядок применения акции' = staticCaption(orderPromotionType(PromotionCondition condition));

countPromotionCondition 'Кол-во условий' (Promotion promotion) = GROUP SUM 1 IF promotion(PromotionCondition promotionCondition) == promotion MATERIALIZED;

minQuantity 'Количество (от)' = DATA NUMERIC[14,3] (PromotionCondition); //кол-во товара для которого сработает один повтор акции
CONSTRAINT minQuantity(PromotionCondition promotionCondition) <= 0.0 MESSAGE 'Количество в условии акции должно быть строго больше 0';

minSum 'Сумма (от)' = DATA NUMERIC[18,4] (PromotionCondition);
CONSTRAINT minSum(PromotionCondition promotionCondition) <= 0.0 MESSAGE 'Сумма в условии акции должна быть строго больше 0';

quantityDiscount 'Кол-во товаров со скидкой' = DATA NUMERIC[14,3] (PromotionCondition);//quantityDiscount(p)<=minQuantity(p), кол-во из minQuantity для которого применится Процент скидки акции
percent 'Процент скидки'  = DATA NUMERIC[8,3] (PromotionCondition);
resultPrice 'Цена со скидкой' = DATA NUMERIC[16,4] (PromotionCondition);
resultPrice 'Цена со скидкой' = DATA NUMERIC[16,4] (PromotionCondition, Sku);
sumDiscount 'Сумма скидки' (promotionCondition) = DATA NUMERIC[16,4] (PromotionCondition);
sumReceipt 'Сумма чека' (promotionCondition) = DATA NUMERIC[16,4] (PromotionCondition);
sumReceiptDiscount 'Сумма скидки с чека' = DATA NUMERIC[16,4] (PromotionCondition);

priceListType 'Вид цены' (promotionCondition) = DATA PriceListType (PromotionCondition);
namePriceListType 'Вид цены' (PromotionCondition promotionCondition) = name(priceListType(promotionCondition));

userSet 'Задается кассиром' (PromotionCondition promotionCondition) = userSet(promotion(promotionCondition));

// skuGroup
TABLE promotionConditionSkuGroup (PromotionCondition, SkuGroup);

dataExcluded 'Исключить из условия' = DATA BOOLEAN (PromotionCondition, SkuGroup);
inParentExcluded (PromotionCondition promotionCondition, SkuGroup child) =
    GROUP SUM 1 IF dataExcluded(promotionCondition, SkuGroup parent) AND isParent(child, parent) MATERIALIZED;
excluded 'Исключить из условия' = OVERRIDE dataExcluded(PromotionCondition  promotionCondition, SkuGroup skuGroup), TRUE IF inParentExcluded(promotionCondition, skuGroup);

inData 'В условии' = DATA BOOLEAN (PromotionCondition, SkuGroup);
inParent (PromotionCondition promotionCondition, SkuGroup child) = 
    GROUP SUM 1 IF inData(promotionCondition, SkuGroup parent) AND isParent(child, parent) MATERIALIZED;
in 'В условии' =
    (OVERRIDE inData(PromotionCondition  promotionCondition, SkuGroup skuGroup), TRUE IF inParent(promotionCondition, skuGroup)) AND NOT 
        excluded(promotionCondition, skuGroup);

// sku
TABLE promotionConditionSku (PromotionCondition, Sku);

inData 'В условии' = DATA BOOLEAN (PromotionCondition, Sku);
dataExcluded 'Исключить из условия' = DATA BOOLEAN (PromotionCondition, Sku);

overIn 'В условии' = ABSTRACT BOOLEAN (PromotionCondition, Sku);
overExcluded 'Исключить из условия' = ABSTRACT BOOLEAN (PromotionCondition, Sku);

excluded 'Исключить из условия' = OVERRIDE dataExcluded(PromotionCondition c, Sku sku), overExcluded(c, sku), TRUE IF inParentExcluded(c, skuGroup(sku));

in 'В условии' (PromotionCondition c, Sku sku) = 
    (OVERRIDE inData(c, sku), overIn(c, sku), TRUE IF inParent(c, skuGroup(sku))) 
        AND NOT excluded(c, sku);

notHasDiscountCard (Promotion p) = NOT hasDiscountCard(p);
notNoDiscountCard (Promotion p) = NOT noDiscountCard(p);

FORM promotionConditions 'Условия Акций'
    OBJECTS sg=PromotionCondition
    PROPERTIES(sg)     READONLY id SHOWIF showIDs(), namePromotion, name, 
                       dateFrom, dateTo,
                       minQuantity, minSum, quantityDiscount, percent,
                       namePriceListType, resultPrice, sumDiscount, sumReceipt, sumReceiptDiscount
    FILTERGROUP filter1
        FILTER 'Текущие и будущие' dateTo(sg) >= currentDate() 'F6' DEFAULT                      
        FILTER 'Прошедшие' dateTo(sg) < currentDate() 'F6'                       
    LIST PromotionCondition OBJECT sg                       
;

FORM promotion 'Акция'
    OBJECTS sh=Promotion   PANEL
    PROPERTIES(sh)     name, namePromotionGroup, nameOrderPromotionType, useAllQuantity, id SHOWIF showIDs(), userSet,
                       nameNumerator, number, series,
                       dateFrom, dateTo, timeOfFrom, timeOfTo,
                       minSumBill, maxSumBill
    PROPERTIES(sh) SHOWIF notNoDiscountCard(sh)  hasDiscountCard 
    PROPERTIES(sh) SHOWIF notHasDiscountCard(sh) noDiscountCard 
    PROPERTIES(sh) SHOWIF hasDiscountCard(sh)    minCumulativeSum, maxCumulativeSum, useCurrentReceipt, allDiscountCard
    OBJECTS d=DOW
    PROPERTIES(d)     READONLY staticCaption
    PROPERTIES(sh, d)  skip
    FILTERGROUP filterDOW
        FILTER 'Только отмеченные' skip(sh, d) 'F11'

    OBJECTS sg=PromotionCondition
    PROPERTIES(sg)     id SHOWIF showIDs(), name, minQuantity, minSum, quantityDiscount, percent,
                       namePriceListType, resultPrice, sumDiscount, sumReceipt, sumReceiptDiscount, NEW, DELETE GRID

    FILTERS            promotion(sg)==sh

    TREE skuTree skg = SkuGroup PARENT parent(skg)
    PROPERTIES READONLY order(skg), skuTreeName = name(skg)
    ORDERS order(skg), skuTreeName
    PROPERTIES(sg, skg) in, excluded
    FILTERGROUP inactive FILTER 'Активные' active(skg) 'F6' DEFAULT

    OBJECTS sk = Sku
    PROPERTIES(sk)    READONLY idBarcode, name
    FILTERS           isParent(skg, sk)
    PROPERTIES(sg, sk)   resultPrice, in, excluded

    FILTERGROUP filterSku
        FILTER 'Только отмеченные' in(sg, sk) 'F10'

    TREE treeStore a=BPSTRING[3], t=ChainStores, st=StoreType
    PROPERTIES READONLY VALUE(a), Store.name(t), Store.name(st)

    FILTERS stringEqualsAll(a),
            in (t, st)

    OBJECTS s=Store
    PROPERTIES(s) READONLY Store.name, address, nameLegalEntity

    FILTERS in(t, st, s),
            isCompany(s)

    PROPERTIES(sh) allStores DRAW a 
    PROPERTIES(sh, t) in
    PROPERTIES(sh, st) in
    PROPERTIES(sh, s) in
    FILTERGROUP filterStore
        FILTER 'Только отмеченные' in(sh, s) 'F9'

    OBJECTS dis= DiscountCard
    PROPERTIES(dis) READONLY number, series, nameLegalEntity, nameDiscountCardType
    PROPERTIES(sh, dis) in
    FILTERGROUP filterDiscountCard
        FILTER 'Только отмеченные' in(sh, dis) 'F8'

    EDIT Promotion OBJECT sh
;

DESIGN promotion {
    BOX {
        size = (1024, 768);
        
        NEW pane {
            tabbed = TRUE;
            fill = 1;
            
            NEW params {
                caption = 'Параметры';
                MOVE BOX(sh) {
                    horizontal = TRUE;
                    fill = 0;
                    NEW row01 {
                        caption = 'Название';
                        MOVE PROPERTY(id(sh));
                        MOVE PROPERTY(name(sh)) {
                            charWidth = 30;
        
                        }
                        MOVE PROPERTY(namePromotionGroup(sh));
                        MOVE PROPERTY(nameOrderPromotionType(sh));
                        MOVE PROPERTY(useAllQuantity(sh));
                        MOVE PROPERTY(userSet(sh));
                    }
                    MOVE GROUP(numbered,sh) {
                        lines = 1;
                    }
                    NEW row11 {
                        caption = 'Диапазон дат';
                        MOVE PROPERTY(dateFrom(sh));
                        MOVE PROPERTY(dateTo(sh));
                    }
                    NEW row12 {
                        caption = 'Часы';
                        MOVE PROPERTY(timeOfFrom(sh));
                        MOVE PROPERTY(timeOfTo(sh));
                    }
                    NEW row13 {
                        caption = 'Суммы';
                        MOVE PROPERTY(minSumBill(sh));
                        MOVE PROPERTY(maxSumBill(sh));
                    }
                    NEW row14 {
                        caption = 'Дисконтные карты';
                        MOVE PROPERTY(hasDiscountCard(sh));
                        MOVE PROPERTY(noDiscountCard(sh));
                        MOVE PROPERTY(minCumulativeSum(sh));
                        MOVE PROPERTY(maxCumulativeSum(sh));
                        MOVE PROPERTY(useCurrentReceipt(sh));
                        MOVE PROPERTY(allDiscountCard(sh));
                    }
                }
                NEW paramsPane {
                    tabbed = TRUE;
                    fill = 1;
                    
                    NEW row22 {
                        fill = 1;
                        horizontal = TRUE;
                        caption = 'Магазины';
        
                        MOVE BOX(TREE treeStore);
                        MOVE BOX(s) {
                            fill = 3;
                        }
                    }
                    MOVE BOX(dis);
                    MOVE BOX(d);
                }
            }

            NEW conditions {
                caption = 'Условия';
                fill = 1;

                MOVE BOX(sg) {
                    GRID(sg) { height = 100; }
                }

                NEW row212 {
                    fill = 3;
                    horizontal = TRUE;
                    caption = 'Товары';

                    MOVE BOX(TREE skuTree);
                    NEW skuPane {
                        fill = 4;
                        tabbed = TRUE;
                        MOVE BOX(sk);
                    }
                }
            }
        }

        MOVE TOOLBARBOX;
    }
}
copyProperties  ABSTRACT ( PromotionCondition, PromotionCondition);

copyItems = DATA LOCAL BOOLEAN ();

copy 'Копировать'(Promotion promotion)  { 
	NEWSESSION {
	    NEW p = Promotion {
	        promotionGroup(p) <- promotionGroup(promotion);
	        orderPromotionType(p) <- orderPromotionType(promotion);
	        dateFrom(p) <- dateFrom(promotion);
	        dateTo(p) <- dateTo(promotion);
	        timeOfFrom(p) <- timeOfFrom(promotion);
	        timeOfTo(p) <- timeOfTo(promotion);
	        minSumBill(p) <- minSumBill(promotion);
	        maxSumBill(p) <-  maxSumBill(promotion);
	        hasDiscountCard(p) <- hasDiscountCard(promotion);
	        noDiscountCard(p) <- noDiscountCard(promotion);
	        minCumulativeSum(p) <- minCumulativeSum(promotion);
	        maxCumulativeSum(p) <- maxCumulativeSum(promotion);
	        useCurrentReceipt(p) <- useCurrentReceipt(promotion);
	        allDiscountCard(p) <- allDiscountCard(promotion);
	        inData(p, DiscountCard dicsountCard) <- inData(promotion, dicsountCard);
	        allStores(p) <- allStores(promotion);
	        dataIn(p, Store s) <- dataIn(promotion, s);
	        dataIn(p, ChainStores cs) <- dataIn(promotion, cs);
	        dataIn(p, StoreType st) <- dataIn(promotion, st);
	
	        FOR promotion(PromotionCondition promotionCondition) == promotion NEW pc = PromotionCondition DO {
	            promotion(pc) <- p;
	            name(pc) <- name(promotionCondition);
	            minQuantity(pc) <- minQuantity(promotionCondition);
	            minSum(pc) <- minSum(promotionCondition);
	            quantityDiscount(pc) <- quantityDiscount(promotionCondition);
	            percent(pc) <- percent(promotionCondition);
	            priceListType(pc) <- priceListType(promotionCondition);
	            resultPrice(pc) <- resultPrice(promotionCondition);
	            resultPrice(pc, Sku sku) <- resultPrice(promotionCondition, sku);
	            sumDiscount(pc) <- sumDiscount(promotionCondition);
	            sumReceipt(pc) <- sumReceipt(promotionCondition);
	            sumReceiptDiscount(pc) <- sumReceiptDiscount(promotionCondition);
	
	            ASK 'Копировать товары, учавствующие в акции ?' DO
	                copyItems() <- TRUE;
	            
	            IF copyItems() THEN {
	                inData(pc, SkuGroup skuGroup) <- inData(promotionCondition, skuGroup);
	                inData(pc, Sku sku) <- inData(promotionCondition, sku);
	            }
	            copyProperties(pc, promotionCondition);
	        }
	
	        SHOW promotion OBJECTS sh = p DOCKED;
	    }
	}
} TOOLBAR;

background 'Цвет' (Promotion promotion) = CASE WHEN dateFrom(promotion) > currentDate() THEN RGB(224,255,224)
                                              WHEN dateTo(promotion) < currentDate() THEN RGB(255,224,224);

FORM promotions 'Акции'
    OBJECTS sh=Promotion
    PROPERTIES(sh)  READONLY BACKGROUND background(sh) 
                    order, name, number, series, dateFrom, dateTo, nameOrderPromotionType, stores,
                    timeOfFrom, timeOfTo, minSumBill, maxSumBill,
                    hasDiscountCard, noDiscountCard, minCumulativeSum, maxCumulativeSum,
                    useCurrentReceipt, allDiscountCard
    PROPERTIES(sh)             copy 
    PROPERTIES(sh)  NEWSESSION NEW, EDIT, DELETE 
    ORDERS        order(sh)

    PROPERTIES (sh) READONLY PANEL createdNameUser, createdTime, createdHostnameComputer
    
    FILTERGROUP inactivePromotion 
        FILTER 'Текущие' dateFrom(sh)<= currentDate() AND dateTo(sh) >= currentDate() 'F11'
        FILTER 'Активные' (dateFrom(sh)<= currentDate() AND dateTo(sh) >= currentDate()) OR (dateFrom(sh) > currentDate()) 'F10' DEFAULT      

;

userOrder 'Порядок' (promotion) = DATA INTEGER (PromotionGroup);
order 'Порядок' (PromotionGroup promotion) = OVERRIDE userOrder(promotion), 1 IF promotion IS PromotionGroup MATERIALIZED;

FORM promotionGroup 'Группа акций'
    OBJECTS st=PromotionGroup PANEL
    PROPERTIES(st)     name, userOrder, inactive

    OBJECTS sh=Promotion
    PROPERTIES(sh)     order
    PROPERTIES(sh)     READONLY name, series, number, dateFrom, dateTo, stores,
                                timeOfFrom, timeOfTo, minSumBill, maxSumBill,
                                hasDiscountCard, noDiscountCard, minCumulativeSum, maxCumulativeSum,
                                useCurrentReceipt, allDiscountCard
    PROPERTIES(sh)                copy 
    PROPERTIES(sh)     NEWSESSION NEW, EDIT, DELETE 
    ORDERS order(sh)

    FILTERS promotionGroup(sh)==st

    FILTERGROUP inactivePromotion 
        FILTER 'Текущие' dateFrom(sh)<= currentDate() AND dateTo(sh) >= currentDate() 'F11'
        FILTER 'Активные' (dateFrom(sh)<= currentDate() AND dateTo(sh) >= currentDate()) OR (dateFrom(sh) > currentDate()) 'F10' DEFAULT      

    EDIT PromotionGroup OBJECT st
;

FORM promotionGroups 'Группы акций'
    OBJECTS st=PromotionGroup
    PROPERTIES(st)     READONLY order, name
    PROPERTIES(st)     NEWSESSION NEW, EDIT, DELETE 

    FILTERGROUP activeGroup
        FILTER 'Активные' active(st) DEFAULT

    OBJECTS sh=Promotion
    PROPERTIES(sh)     READONLY order
    PROPERTIES(sh)     READONLY name, series, number, dateFrom, dateTo, stores,
                                timeOfFrom, timeOfTo, minSumBill, maxSumBill,
                                hasDiscountCard, noDiscountCard, minCumulativeSum, maxCumulativeSum,
                                useCurrentReceipt, allDiscountCard
    PROPERTIES(sh)     NEWSESSION NEW, EDIT, DELETE 
    ORDERS order(sh)

    FILTERS promotionGroup(sh)==st

    FILTERGROUP inactivePromotion 
        FILTER 'Текущие' dateFrom(sh)<= currentDate() AND dateTo(sh) >= currentDate() 'F11'
        FILTER 'Активные' (dateFrom(sh)<= currentDate() AND dateTo(sh) >= currentDate()) OR (dateFrom(sh) > currentDate()) 'F10' DEFAULT      

    LIST PromotionGroup OBJECT st
;

EXTEND FORM discountCard
    OBJECTS p=Promotion
    PROPERTIES(p, d) in
    PROPERTIES(p) READONLY name, number, series, dateFrom, dateTo, stores,
                           timeOfFrom, timeOfTo, minSumBill, maxSumBill,
                           hasDiscountCard, noDiscountCard, minCumulativeSum, maxCumulativeSum,
                           useCurrentReceipt, allDiscountCard
    FILTERS hasDiscountCard(p)
;

DESIGN discountCard {
    tabContainer{
        MOVE BOX(p);
    }
}

NAVIGATOR {
    retailNavigator {
        NEW FOLDER retailCRMNavigator 'CRM' BEFORE retailMasterData {
            NEW promotions;
            NEW promotionGroups;
        }
    }
}