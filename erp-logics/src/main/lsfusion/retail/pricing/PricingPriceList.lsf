MODULE PricingPriceList;

REQUIRE Pricing;

NAMESPACE Repricing; // пока Repricing для обратной совместимости - потом правильнее перекинуть на Pricing с миграцией

//Авто изменение цены
dataAutoPricing 'Авто изменение цены' = DATA BOOLEAN (CalcPriceListType, Group);

levelParentAutoPricing (CalcPriceListType calcPriceListType, Group group) = GROUP
                                                              MIN level(group, Group parent) IF dataAutoPricing(calcPriceListType, parent) MATERIALIZED;
nearestParentAutoPricing (CalcPriceListType calcPriceListType, Group group) = group(group, levelParentAutoPricing(calcPriceListType, group));
nearestAutoPricing 'Авто изменение цены' (CalcPriceListType calcPriceListType, Group group) =
    dataAutoPricing(calcPriceListType, nearestParentAutoPricing(calcPriceListType, group)) MATERIALIZED;

autoPricing 'Авто изменение цены' (CalcPriceListType calcPriceListType, Group group) = OVERRIDE dataAutoPricing(calcPriceListType,group), nearestAutoPricing(calcPriceListType,group);

quantityChildWithAutoPricing(CalcPriceListType calcPriceListType, Group group) = GROUP SUM 1 IF dataAutoPricing(calcPriceListType, ItemGroup childItemGroup) AND isParent(childItemGroup, group) MATERIALIZED;
quantityParentWithAutoPricing(CalcPriceListType calcPriceListType, Group group) = GROUP SUM 1 IF dataAutoPricing(calcPriceListType, ItemGroup parentItemGroup) AND isParent(group, parentItemGroup) MATERIALIZED;

backgroundShowAutoPricing (CalcPriceListType calcPriceListType, Group group) =
    IF dataAutoPricing(calcPriceListType, group) THEN
        RGB(0,0,0) IF group IS Group
    ELSE
        RGB(203,203,206) IF quantityChildWithAutoPricing (calcPriceListType, group) != descendantNumber(group)
                         AND NOT quantityParentWithAutoPricing (calcPriceListType,group);

@defineOption(showAutoPricingOption, 'Всегда показывать колонку Авто изменение цены в расчётном виде цены', pricings);

EXTEND FORM calcPriceListType
    PROPERTIES(c,g) SHOWIF (g IS SkuGroup OR showAutoPricingOption()) autoPricing BACKGROUND backgroundShowAutoPricing(c,g)
; 

skipRepricing = ABSTRACT BOOLEAN (Sku, Stock);

onStockPriceListRepricing 'Переоценивать товары без остатка' = DATA BOOLEAN ();
withoutCurrentRetailPrice 'Формировать цену, если нет текущих розничных цен' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES() onStockPriceListRepricing, withoutCurrentRetailPrice 
;

DESIGN options {
    pricings {
        MOVE PROPERTY(onStockPriceListRepricing());
        MOVE PROPERTY(withoutCurrentRetailPrice());
    }
}

managementRetailPrice 'Цена (управленческая)' = DATA LOCAL NESTED NUMERIC[16,4] (Sku);
managementPriceListPrice = DATA LOCAL NESTED NUMERIC[16,4] (Sku); 
inDashboardRepricing 'Вкл' = DATA LOCAL NESTED BOOLEAN (Sku); 
info = DATA LOCAL NESTED TEXT (Sku);

skipManagementPriceList = ABSTRACT BOOLEAN (PriceListType, Sku, Stock, DATETIME); 

overSetMarkupManagementRetailPrice  ABSTRACT LIST( DepartmentStore, DATETIME);
overSetMarkupManagementRetailPrice  ABSTRACT LIST(CalcPriceListType, DepartmentStore, DATETIME);
overSetManagementRetailPriceFirstAct  ABSTRACT LIST ( DepartmentStore, DATETIME);  // реализовано в Sosedi
overSetManagementRetailPrice  ABSTRACT LIST ( DepartmentStore, DATETIME); 
overSetManagementRetailPrice  ABSTRACT LIST (PriceListType, DepartmentStore, DATETIME); 

overSetManagementRetailPrice(DepartmentStore d, DATETIME dt) + { overSetManagementRetailPriceFirstAct(d, dt); }

includeExtraDashboardRepricing  ABSTRACT ( DepartmentStore, PriceListType, DATETIME);

skipDialog = DATA LOCAL BOOLEAN ();
calculateAllGroups = DATA LOCAL BOOLEAN () COMPLEX;

afterSetManagementRetailPrice(DepartmentStore d, PriceListType pt, DATETIME dt) {
    overSetManagementRetailPrice(d, dt);  // контроль мин. и макс. фиксиров. цен, мин. цен на алкоголь, предельных надбавок
    overSetManagementRetailPrice(pt, d, dt); 
    
    IF withoutCurrentRetailPrice() THEN //Формировать цену, если нет текущих розничных цен
        inDashboardRepricing(Sku sku) <- managementRetailPrice(sku) AND NOT managementRetailPrice(sku) == prevRetailPricingPriceA(sku, d, dt) AND NOT skipRepricing(sku, d);
    ELSE
        inDashboardRepricing(Sku sku) <- managementRetailPrice(sku) != prevRetailPricingPriceA(sku, d, dt) AND NOT skipRepricing(sku, d);
    
    includeExtraDashboardRepricing(d, pt, dt);
    
    formRefresh();
}

calculateDashboardRepricing 'По группам'(DepartmentStore d, CalcPriceListType ct, PriceListType pt, DATETIME dt)  { 
    requestCanceled() <- NULL;
    IF NOT skipDialog() THEN {
        DIALOG dialogSkuGroup;
    }
    info(Sku s) <- NULL;
    IF NOT requestCanceled() THEN {
        IF onStockPriceListRepricing() THEN {  // переоценивать товары без остатка, настройка в options pricings (Акты расценки?)
            managementRetailPrice (Sku sku) <- priceA(ct, sku, d, dt) 
                IF NOT skipManagementPriceList(pt, sku, d, dt) AND inSession(skuGroup(sku));
            overSetMarkupManagementRetailPrice(d, dt);
            overSetMarkupManagementRetailPrice(ct, d, dt);
            managementPriceListPrice (Sku sku) <- prevPriceA(pt, sku, d, dt)
                IF NOT skipManagementPriceList(pt, sku, d, dt) AND (inSession(skuGroup(sku)) OR calculateAllGroups());
        } ELSE {
            managementRetailPrice (Sku sku) <- priceA(ct, sku, d, dt)
                IF currentBalance(sku, d) > 0 AND NOT skipManagementPriceList(ct, sku, d, dt) AND inSession(skuGroup(sku));                
            overSetMarkupManagementRetailPrice(d, dt);
            overSetMarkupManagementRetailPrice(ct, d, dt);
            managementPriceListPrice (Sku sku) <- prevPriceA(pt,sku, d, dt)
                IF currentBalance(sku, d) > 0 AND NOT skipManagementPriceList(pt, sku, d, dt) AND (inSession(skuGroup(sku)) OR calculateAllGroups());
        }
        managementRetailPrice(Sku sku) <- managementPriceListPrice(sku) WHERE managementPriceListPrice(sku);

        afterSetManagementRetailPrice(d, pt, dt);    
    }
}
calculateDashboardAutoRepricing 'По надбавкам и прайсам'(DepartmentStore d, CalcPriceListType ct, PriceListType pt, DATETIME dt)  { 
    skipDialog() <- TRUE;
    calculateAllGroups() <- TRUE;
    inSession(SkuGroup g) <- autoPricing(ct,g);
    calculateDashboardRepricing(d,ct,pt,dt);
    inSession(SkuGroup g) <- NULL;
    calculateAllGroups() <- NULL;
    skipDialog() <- NULL;
}

customerManagementRepricing = DATA LOCAL BOOLEAN ();
customerManagementRepricing  ABSTRACT LIST ( DepartmentStore, PriceListType, DATETIME );

calculateDashboardManagementRepricingExtra  ABSTRACT LIST ( DepartmentStore, PriceListType, DATETIME );
calculateDashboardManagementRepricing 'По прайсам'(DepartmentStore d, PriceListType pt, DATETIME dt)  {
    managementRetailPrice(Sku sku) <- NULL;
    info(Sku s) <- NULL;
    IF NOT customerManagementRepricing() THEN {   // используется в Fancy у остальных NULL
        IF onStockPriceListRepricing() THEN {  // переоценивать товары без остатка, настройка в options pricings 
            managementPriceListPrice (Sku sku) <- prevPriceA(pt, sku, d, dt)
                IF NOT skipManagementPriceList(pt, sku, d, dt);  // запрет на установление цены из прайс-листа
        } ELSE {
            managementPriceListPrice (Sku sku) <- prevPriceA(pt, sku, d, dt) 
                IF currentBalance(sku, d) > 0 AND NOT skipManagementPriceList(pt, sku, d, dt);
            
        }
        calculateDashboardManagementRepricingExtra(d,pt,dt); // в RepricingWare добавляем цену соответствующей тары к managementRetailPrice
    } ELSE {
        customerManagementRepricing(d,pt,dt);  // реализовано в Fancy
    }
    managementRetailPrice(Sku sku) <- managementPriceListPrice(sku) WHERE managementPriceListPrice(sku) AND skuType(sku) != SkuType.skuTypeContainer;  //тару не берем  
    
    afterSetManagementRetailPrice(d, pt, dt);    
}

clearDashboardRepricing()  { 
    inDashboardRepricing(Sku sk) <- NULL;
    managementRetailPrice(Sku sk) <- NULL;
    managementPriceListPrice(Sku sk) <- NULL;
    
    formRefresh();
}

orderRepricingDetail = ABSTRACT INTEGER (Sku);

descriptionPricing = DATA LOCAL STRING (Sku, STRING[100]);
calculateDescriptionPricing 'Рассчитать' ABSTRACT LIST (Sku, DepartmentStore, DATETIME);