MODULE PricingInvoice;

REQUIRE Pricing, Invoice;

NAMESPACE Pricing;

dateBanRetailPrice 'Дата запрета приемки накладных без розничных цен'  = DATA DATE (DepartmentStore); 

EXTEND FORM departmentStore
    PROPERTIES (d) dateBanRetailPrice 
;

DESIGN departmentStore {
    headerExtraParams {
        MOVE PROPERTY(dateBanRetailPrice(d));   
    }
}

EXTEND FORM options

    TREE stockTreep ap = BPSTRING[3], sgp = StockGroup PARENT parent(sg)
    PROPERTIES READONLY VALUE(ap), sgTreeName = name(sgp)
    ORDERS sgTreeName
    FILTERS stringEqualsAll(ap)

    OBJECTS ds = DepartmentStore
    PROPERTIES(ds) READONLY id SHOWIF showIDs(), name, nameLegalEntity[Stock], dateBanRetailPrice CHANGEABLE 
    ORDERS name(ds)
    
    FILTERS isParent(sgp, ds) OR (ds IS DepartmentStore AND NOT sgp),
            isCompany(ds)
    FILTERGROUP inactiveStockp FILTER 'Активный' active(ds) 'ctrl F10' DEFAULT     
    
;
DESIGN options {
    invoices {
        NEW topContainerp {
            horizontal = TRUE;
            fill = 1;            
            
            MOVE BOX(TREE stockTreep) {
                caption = 'Группы складов';
            }
            MOVE BOX(ds) {
                fill = 3;
                GRID(ds) {
                    defaultComponent = TRUE;
                }
            }
        }
    }
}



META defineInvoicePricingAggregation(concrete, concreteClass, sign, captionPre, captionPost, stockProp, prefix)

    // Кол-во расценено
    @defineDocumentInterfaceDetailQuantityPrefix (invoice, pricing, ' (расценено)');

    // Кол-во, которое изменяет расцененное количество
    extraPricingQuantity = ABSTRACT NUMERIC[16,5] (UserInvoiceDetail);
    overPricingQuantity = ABSTRACT NUMERIC[16,5] (UserInvoiceDetail) MATERIALIZED;
    overQuantity = OVERRIDE overPricingQuantity(User###concrete##Detail detail), quantity(detail);
    pricingQuantity(User###concrete##Detail detail) <- overQuantity(detail) (+) extraPricingQuantity(detail)
        WHEN CHANGED(overQuantity(detail)) OR CHANGED(extraPricingQuantity(detail));

    // Базовая цена
    overPricingPrice = ABSTRACT VALUE NUMERIC[16,4] (InvoiceDetail) MATERIALIZED;
    overPricingPrice = ABSTRACT VALUE NUMERIC[16,4] (UserInvoiceDetail) MATERIALIZED;
    overPricingPrice (User###concrete##Detail detail) += overPricingPrice(detail);
    
    extraPricingPrice = ABSTRACT NUMERIC[16,4] (InvoiceDetail);
    extraPricingPrice = ABSTRACT NUMERIC[16,4] (UserInvoiceDetail);
    extraPricingPrice (User###concrete##Detail detail) += extraPricingPrice(detail);    

    pricingPrice 'Цена входная' (User###concrete##Detail detail) = (OVERRIDE overPricingPrice(detail), price(detail)) (+) extraPricingPrice(detail) CHARWIDTH 7 MATERIALIZED;
    pricingPrice 'Цена входная' (###concrete##Detail detail) = (OVERRIDE overPricingPrice(detail), price(detail)) (+) extraPricingPrice(detail) CHARWIDTH 7 MATERIALIZED;

    // Надбавка
    @defineDocumentInterfaceDetailMarkupPrefix (invoice, retail, );

    // НДС
    @defineDocumentInterfaceDetailVAT(invoice, country###stockProp###stock, retail, ' розничный');
    // Не проставляется НДС, поскольку для прихода он равен НДС поставщика
    @deriveDocumentDetailValueVAT(userInvoice, retail);

    // Розничная
    @defineDocumentInterfaceDetailPricePrefix(invoice, retail, ' розничная');
    extraRetailPrice = ABSTRACT NUMERIC[16,4] (InvoiceDetail) CHARWIDTH 7 MATERIALIZED;
    retailExtraPrice 'Цена (полная)' = retailPrice(###concrete##Detail d) + OVERRIDE extraRetailPrice(d), 0 CHARWIDTH 7; 
    
    CONSTRAINT stockProp##Stock(User###concrete##Detail d) IS DepartmentStore AND date(d) >= dateBanRetailPrice(stockProp##Stock(d)) AND isPosted(d) AND isItem(sku(d)) AND NOT retailPrice(d)
        MESSAGE 'Не задана розничная цена в строке накладной'##sign;

    // Объявление действий, которые будут срабатывать по изменению надбавки и розничной цены
    @changeDocumentDetailMarkupCustomPrefix(userInvoiceDetail, retail, pricing, retail, retail);
    @changeDocumentDetailPriceCustomPrefix(userInvoiceDetail, retail, pricing, retail, retail);

    // Создание акта расценки
    @defineDocumentInterfaceProperty (invoice, createPricing, 'Создать акт расценки');

    showCreatePricing (###concrete invoice) = stockProp##Stock(invoice) IS DepartmentStore; //AND NOT costLedger(stockProp##Stock(invoice)); пока уберем из-за модульности
       
    backgroundRetail 'Цвет' (###concrete invoice) = RGB(224, 255, 255) IF invoice IS Invoice;
    backgroundRetailMarkup = ABSTRACT VALUE COLOR (User###concrete##Detail);
    backgroundRetailMarkup (User###concrete##Detail uid) += backgroundRetail(invoice(uid));

    backgroundRetailVAT = ABSTRACT VALUE COLOR (User###concrete##Detail);
    backgroundRetailVAT (User###concrete##Detail uid) += backgroundRetail(invoice(uid));
    backgroundRetailVAT (User###concrete##Detail uid) += RGB(255,0,0) IF
        valueVAT(sku(uid)) AND NOT valueRetailVAT(uid) == valueVAT(sku(uid)) AND NOT skipCheckVAT();
        
    EXTEND FORM userInvoice
        PROPERTIES(i) SHOWIF showCreatePricing(i) BACKGROUND backgroundRetail(i) createPricing
                      
        OBJECTS pd = UserInvoiceDetail GRID
        PROPERTIES (pd) READONLY SHOWIF createPricing[###concrete](i) index
        PROPERTIES (pd) READONLY SHOWIF createPricing[###concrete](i)  BACKGROUND backgroundBarcode(pd) idBarcodeSku 
        PROPERTIES (pd) READONLY SHOWIF createPricing[###concrete](i)  BACKGROUND backgroundSku(pd) idSku, nameSku, shortNameUOMSku //ON EDIT editSku(pd)
        PROPERTIES (pd) READONLYIF readonlyQuantity(d) quantity SHOWIF createPricing[###concrete](i), 
                        pricingPrice SHOWIF createPricing[###concrete](i)              
                       
        PROPERTIES(pd) SHOWIF createPricing[###concrete](i) BACKGROUND backgroundRetail(i)
                      retailMarkup ON CHANGE changeRetailMarkup(pd) BACKGROUND backgroundRetailMarkup(pd), numberRetailVAT BACKGROUND backgroundRetailVAT(pd),
                      valueRetailVAT BACKGROUND backgroundRetailVAT(pd),
                      retailPrice ON CHANGE changeRetailPrice(pd)
        ORDERS index(pd)                      
        FILTERS user###concrete(pd) == i             
    ;
    
    seekPricing (User###concrete##Detail d)  { 
        SEEK userInvoice.pd = d;
    }

    EXTEND FORM userInvoice
        EVENTS
            ON CHANGE d seekPricing(d) 
    ;
    
    DESIGN userInvoice {
        headerCreateDocuments {
            NEW createHeaderPricing {
                caption = 'Расценка';
                MOVE PROPERTY(createPricing(i));                
            }
        }
        specificationBox {
            NEW pricing {
                fill = 1;
                caption = 'Расценка';
                NEW headerCreatePricing {
                    lines = 4;                   
                    
                }
                MOVE BOX(pd);
            }
        }
    }
    EXTEND FORM invoices
        PROPERTIES(d) READONLY BEFORE expiryDate(d) SHOWIF createPricing(i) BACKGROUND backgroundRetail(i)
                      retailMarkup, 
                      numberRetailVAT, valueRetailVAT, 
                      retailPrice
    ;
    
    overCopy[User###concrete##Detail,User###concrete##Detail](User###concrete##Detail d, User###concrete##Detail detail) + {       
        retailPrice(d) <- retailPrice(detail);          
        retailMarkup(d) <- retailMarkup(detail);            
    }  

    CLASS concreteClass###pricing captionPre###sign : Pricing;
    CLASS concreteClass###pricingDetail captionPre###sign : PricingDetail;

    @defineDocumentTables(concrete###pricing);

    needToPricing (###concrete##Detail invoiceDetail) = createPricing(invoiceDetail) AND isStockSku(invoiceDetail) MATERIALIZED;

    needToPricing (invoice)= GROUP SUM 1 IF needToPricing(###concrete##Detail invoiceDetail)
        BY concrete(concrete##Detail) MATERIALIZED;

    @defineDocumentAggregation(invoice, concrete###pricing, needToPricing);

    pricing(###concrete##PricingDetail detail) += concrete##Pricing(detail);
    index(###concrete##PricingDetail detail) += index(detail);
    
    pricingDate(###concrete invoice) = OVERRIDE shipmentDate(concrete), date (concrete);
    pricingTime(###concrete invoice) = OVERRIDE shipmentTime(concrete), time (concrete);
    pricingDateTime(###concrete invoice) = dateTimeToDateTime(pricingDate(invoice), pricingTime(invoice));
    
    pricingDate(User###concrete invoice) = OVERRIDE shipmentDate(concrete), date (concrete);
    pricingTime(User###concrete invoice) = OVERRIDE shipmentTime(concrete), time (concrete);
    pricingDateTime(User###concrete invoice) = dateTimeToDateTime(pricingDate(invoice), pricingTime(invoice));

    pricingDateTime(###concrete##Detail d) = pricingDateTime(concrete(d)) MATERIALIZED;
    pricingDateTime(User###concrete##Detail d) = pricingDateTime(user###concrete(d)) MATERIALIZED;
    
    date(###concrete##Pricing pricing) += pricingDate(concrete(pricing)) ;
    time(###concrete##Pricing pricing) += pricingTime(concrete(pricing));

    @defineDocumentAggregationStockPrefix(invoice, concrete###pricing, stockProp, 'Склад', , );
    departmentStore(###concrete##Pricing pricing) += stockProp##Stock(pricing) AS DepartmentStore;

    @defineDocumentAggregationLegalEntityPrefix(invoice, concrete###pricing, supplier, 'Поставщик', , );
    supplier(###concrete##Pricing pricing) += supplier(pricing);

    @defineDocumentAggregationPosted(invoice, concrete###pricing);
    isPosted(###concrete##Pricing pricing) += isPosted(pricing);
    
    @defineDocumentAggregationClosed(invoice, concrete###pricing);
    isClosed(###concrete##Pricing pricing) += isClosed(pricing); 

    number 'Номер документа' (###concrete##Pricing concrete###pricing) = number(concrete(concrete###pricing));
    number(###concrete##Pricing pricing) += number(pricing);

    series 'Серия документа' (###concrete##Pricing concrete###pricing) = series(concrete(concrete###pricing));
    series(###concrete##Pricing pricing) += series(pricing);

    seriesNumber 'Серия/номер документа' (###concrete##Pricing concrete###pricing) = seriesNumber(concrete(concrete###pricing));

    note###concrete 'Примечание' (###concrete##Pricing concrete###pricing) = note(concrete(concrete###pricing));
    note(###concrete##Pricing pricing) += note###concrete(pricing);

    currency  (###concrete##Pricing concrete###pricing) = currency(concrete(concrete###pricing));
    currency (###concrete##Pricing pricing) += currency(pricing);
    
    edit(###concrete##Pricing pricing) + {  edit(concrete(pricing)); }

//    operationPricing(pricing) += operationInvoice(invoice###concrete###pricing(pricing));

//    @defineDocumentDescription(concrete###pricing, ###concrete###pricingDetail, captionPre###sign);
    description 'Название документа' (###concrete##Pricing o) =
        'Расценка № ' + seriesNumber(o) + ' от ' + pricingDate(concrete(o)) CHARWIDTH 30;
    description (###concrete##Pricing pricing) += STRING[200](description(pricing));

    @defineDocumentAggregationDetailSku(invoice, concrete###pricing, sku);
    sku(###concrete##PricingDetail pricingDetail) +=  sku(pricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, prefix###price, 'Цена поставщика');
    price(###concrete##PricingDetail pricingDetail) += NUMERIC[16,4](OVERRIDE (overPrice(pricingDetail) IF pricingDetail IS concreteClass###PricingDetail), prefix###price(pricingDetail));

    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, retailMarkup, 'Надбавка');
    retailMarkup(###concrete##PricingDetail pricingDetail) += retailMarkup(pricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, retailVAT, 'НДС');
    retailVAT(###concrete##PricingDetail pricingDetail) += retailVAT(pricingDetail);
    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, valueRetailVAT, 'НДС, %');
    valueRetailVAT(###concrete##PricingDetail pricingDetail) += valueRetailVAT(pricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, retailPrice, 'Розничная цена');
    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, extraRetailPrice, 'Розничная цена (доп.)');
    retailPrice(###concrete##PricingDetail pricingDetail) += retailPrice(pricingDetail) + OVERRIDE extraRetailPrice(pricingDetail), 0;
    show[PricingDetail](###concrete##PricingDetail d) + {  show(concrete###Detail(d)); }
END