MODULE PricingSumInvoice;

REQUIRE PricingInvoice, PricingSum;

NAMESPACE Pricing;

@defineDocumentAbstractHeaderProperty (invoice, createPricing, 'Создать акт расценки');

invoiceDetail = ABSTRACT InvoiceDetail (PricingDetail) MATERIALIZED INDEXED;

backgroundRetail 'Цвет' (Invoice invoice) = RGB(224, 255, 255) IF invoice IS Invoice;

retailMarkup 'Надбавка, %' = ABSTRACT NUMERIC[8,3] (InvoiceDetail);
retailMarkupSum 'Сумма надбавки' = ABSTRACT NUMERIC[18,4] (InvoiceDetail);

retailVAT(invoiceDetail) = ABSTRACT Range (InvoiceDetail);
numberRetailVAT 'НДС, номер розничный' (InvoiceDetail invoiceDetail) = number(retailVAT(invoiceDetail));
valueRetailVAT 'НДС, % розничный' (invoiceDetail) = ABSTRACT NUMERIC[10,5] (InvoiceDetail);
calcValueRetailVAT 'НДС (перегруженный), % розничный' (invoiceDetail) = ABSTRACT NUMERIC[10,5] (InvoiceDetail);

retailVATSum 'Сумма НДС розничная' = ABSTRACT NUMERIC[18,4] (InvoiceDetail);

retailPrice 'Цена розничная' = ABSTRACT NUMERIC[16,4] (InvoiceDetail) MATERIALIZED;

retailSum 'Сумма розничная' = ABSTRACT NUMERIC[18,4] (InvoiceDetail) MATERIALIZED;

pricingQuantity 'Кол-во (расценено)' = ABSTRACT NUMERIC[16,5] (InvoiceDetail);

retailSumInvoiceDetail 'Сумма розничная' (invoice) = GROUP SUM retailSum(InvoiceDetail idetail) BY invoice(idetail) IN documentSum;

META defineInvoicePricingAggregationSum(concrete, concreteClass, sign, captionPre, captionPost, stockProp, prefix)

    // Комиссия
    @defineDocumentInterfaceHeaderPricingCommittee(invoice, stockProp###stock);

    // -- Суммы по строкам

    // Надбавка
    @defineDocumentInterfaceDetailMarkupSumPrefix (invoice, retail);

    // НДС
    @defineDocumentInterfaceDetailVATDataSumPrefix (invoice, retail, ' розничная');
    extraRetailVATSum = ABSTRACT NUMERIC[18,4] (InvoiceDetail) MATERIALIZED;
    // Выходная
    @defineDocumentInterfaceDetailDataSumPrefix (invoice, retail, ' розничная');
    extraRetailSum = ABSTRACT NUMERIC[18,4] (InvoiceDetail) MATERIALIZED;
    
    createPricing[###concrete.###concrete](###concrete i) += createPricing(i);
    retailMarkup[###concrete.###concrete##Detail](###concrete##Detail d) += retailMarkup(d);
    retailMarkupSum[###concrete.###concrete##Detail](###concrete##Detail d) += retailMarkupSum(d);
    retailVAT[###concrete.###concrete##Detail](###concrete##Detail d) += retailVAT(d);
    valueRetailVAT[###concrete.###concrete##Detail](###concrete##Detail d) += valueRetailVAT(d); 
    retailVATSum[###concrete.###concrete##Detail](###concrete##Detail d) += retailVATSum(d);
    retailPrice[###concrete.###concrete##Detail](###concrete##Detail d) += retailPrice(d);
    retailSum[###concrete.###concrete##Detail](###concrete##Detail d) += retailSum(d);
    pricingQuantity[###concrete.###concrete##Detail](###concrete##Detail d) += pricingQuantity(d);

    // Расчет сумм обратным счетом
    //поменять price на pricingPrice
    @deriveDocumentDetailSumCustomRoundPrefix(userInvoiceDetail, retail, currency, pricingQuantity, homePriceRound);
    pricingSum = ABSTRACT VALUE NUMERIC[18,4] (User###concrete##Detail);
    pricingSum[User###concrete##Detail](User###concrete##Detail d) += NUMERIC[18,4](Utils.round(pricingQuantity(d) * price(d), homePriceRound(d)));
    pricingSum = ABSTRACT VALUE NUMERIC[18,4] (###concrete##Detail);
    pricingSum[###concrete##Detail](###concrete##Detail d) += NUMERIC[18,4](Utils.round(pricingQuantity(d) * price(d), homePriceRound(d)));
    
    @deriveDocumentDetailReverseVATSumRoundPrefix(userInvoice, retail, retail, homePriceRound);
    @deriveDocumentDetailMarkupSumPrefix(userInvoice, retail, retail, pricing);

    // -- Суммы по документу
    @defineDocumentInterfaceHeaderSumPrefix (invoice, retail, ' розничная');
    @defineDocumentInterfaceHeaderSumPrefix (invoice, retailVAT, ' НДС розничная');
    @defineDocumentInterfaceHeaderSumPrefix (invoice, retailMarkup, ' надбавки розничная');
    @defineDocumentInterfaceHeaderItemSumDouble (invoice, range, retailMarkup, retailMarkup, , retailVAT);
    @defineDocumentInterfaceHeaderItemSumDouble (invoice, range, retailVAT, retailVAT, , retailVAT);
    @defineDocumentInterfaceHeaderItemSumDouble (invoice, range, retail, retail, , retailVAT);
    @defineDocumentHeaderItemSumCustom(invoice, invoiceDetail, retail, retail);
    
    showPricing (###concrete invoice) = showCreatePricing (invoice) AND NOT createPricing(invoice);
    toShowPricing (###concrete invoice) = showCreatePricing (invoice) AND createPricing(invoice);

    //Расценка поставленного количества
    @defineDocumentInterfaceProperty (invoice, useShipmentQuantity, 'Расценивать поставленное кол-во'); 
          
    overPricingQuantity(User###concrete##Detail detail) += (OVERRIDE shipmentQuantity(detail), 0.0 IF detail IS User###concrete##Detail) IF useShipmentQuantity(detail);

    EXTEND FORM userInvoice
        PROPERTIES(i) SHOWIF createPricing(i) BACKGROUND backgroundRetail(i) namePricingCommittee,
                      retailSumUser###concrete##Detail

        PROPERTIES(i) SHOWIF createPricing(i) BACKGROUND backgroundRetail(i)
            nameFormedMan, nameCheckedMan, nameLabeledMan, nameAccountantMan, nameHeadMan   

        PROPERTIES (pd) pricingQuantity SHOWIF toShowPricing(i) BACKGROUND backgroundRetail(i) AFTER quantity(pd) 

        PROPERTIES(pd) SHOWIF createPricing[###concrete](i) BACKGROUND backgroundRetail(i)
                      retailMarkupSum AFTER retailMarkup(pd),
                      retailVATSum AFTER valueRetailVAT(pd),
                      retailSum AFTER retailPrice(pd)
    ;
    
    DESIGN userInvoice {
        PROPERTY(retailSumUser###concrete##Detail(i)) { charWidth = 13;}
        pricing {
            NEW bottomCreatePricing{  
                caption = 'Комиссия для расценки';              
                type = COLUMNS;
                columns = 6;   
                MOVE PROPERTY(namePricingCommittee(i));                 
                MOVE PROPERTY(nameFormedMan(i));
                MOVE PROPERTY(nameCheckedMan(i));
                MOVE PROPERTY(nameLabeledMan(i));
                MOVE PROPERTY(nameAccountantMan(i));
                MOVE PROPERTY(nameHeadMan(i));
            }
        }   
    }
    
    EXTEND FORM invoices
        PROPERTIES(i) BACKGROUND backgroundRetail(i) retailSum###concrete##Detail READONLY BEFORE orders(i)
        PROPERTIES(d) READONLY SHOWIF createPricing(i) BACKGROUND backgroundRetail(i)
                      retailMarkupSum AFTER retailMarkup(d), 
                      retailVATSum AFTER valueRetailVAT(d),
                      retailSum AFTER retailPrice(d)
        PROPERTIES(d) READONLY BACKGROUND backgroundRetail(i) pricingQuantity AFTER quantity(d)  SHOWIF toShowPricing(i)
    ;

    printPricing 'Акт расценки' (###concrete invoice)  { print(concrete##Pricing(invoice)); } IMAGE 'print.png' IN print;
    EXTEND FORM invoices
        PROPERTIES(i)  printPricing SHOWIF createPricing(i)
    ;
    DESIGN invoices { 
        printTab { 
            MOVE GROUP(print,i) { 
                align = START; 
                PROPERTY(printPricing(i)) { alignment = STRETCH; } 
            } 
        } 
    }

    Pricing.concrete##Detail(###concrete##PricingDetail detail) += concrete##Detail(detail);

    pricingCommittee(###concrete##Pricing pricing) += pricingCommittee(concrete(pricing));
    dataFormedMan (###concrete##Pricing pricing) += dataFormedMan(concrete(pricing));
    dataCheckedMan (###concrete##Pricing pricing) += dataCheckedMan(concrete(pricing));
    dataLabeledMan (###concrete##Pricing pricing) += dataLabeledMan(concrete(pricing));
    dataAccountantMan (###concrete##Pricing pricing) += dataAccountantMan(concrete(pricing));
    dataHeadMan (###concrete##Pricing pricing) += dataHeadMan(concrete(pricing));             

    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, pricingQuantity, 'Кол-во (расценено)');
    quantity(###concrete##PricingDetail pricingDetail) += pricingQuantity(pricingDetail);

    is###concrete(###concrete##Pricing pricing) += TRUE IF concrete(pricing);    

    extraRetailPrice(###concrete##PricingDetail pricingDetail) += extraRetailPrice(pricingDetail);

    // -- Суммы по строкам

    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, pricingSum, 'Сумма поставщика');
    overSum = ABSTRACT VALUE NUMERIC[18,4](###concrete##PricingDetail);
    overSum(###concrete##PricingDetail pricingDetail) += pricingSum(pricingDetail);
    overSum(###concrete##PricingDetail pricingDetail) += NUMERIC[18,4](round(overPrice(pricingDetail)*quantity(pricingDetail), homePriceRound(concrete##Detail(pricingDetail))));
       
    sum(###concrete##PricingDetail pricingDetail) += overSum(pricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, retailMarkupSum, 'Сумма надбавки');
    retailMarkupSum(###concrete##PricingDetail pricingDetail) += retailMarkupSum(pricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, retailVATSum, 'Сумма НДС');
    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, extraRetailVATSum, 'Сумма НДС (доп.)');
    extraRetailVATSum(###concrete##PricingDetail pricingDetail) += extraRetailVATSum(pricingDetail);
    retailVATSum(###concrete##PricingDetail pricingDetail) += retailVATSum(pricingDetail) (+) extraRetailVATSum(pricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, retailSum, 'Сумма розничная');
    @defineDocumentAggregationDetailProperty (invoice, concrete###pricing, extraRetailSum, 'Сумма розничная (доп.)');
    extraRetailSum(###concrete##PricingDetail pricingDetail) += extraRetailSum(pricingDetail);
    retailSum(###concrete##PricingDetail pricingDetail) += retailSum(pricingDetail) (+) extraRetailSum(pricingDetail);

END

//--  Связь накладной и расценки
META defineInvoicePricingRelation(sign, stockProp)

    invoiceDetail = ABSTRACT InvoiceDetail (PricingDetail) MATERIALIZED INDEXED;
    invoiceDetail = DATA InvoiceDetail (UserPricingDetail);
    invoiceDetail(UserPricingDetail pricingDetail) += invoiceDetail(pricingDetail);

    CONSTRAINT supplier[PricingDetail](UserPricingDetail detail) != supplier(invoiceDetail(detail)) OR
               departmentStore[PricingDetail](detail) != stockProp(invoiceDetail(detail)) OR
               sku(detail) != sku(invoiceDetail(detail))
        CHECKED BY invoiceDetail[UserPricingDetail]
            MESSAGE 'Поставщик, покупатель и товар в накладной и акте расценки должны соответствовать друг другу';

    descriptionIndexInvoiceDetail 'Строка накладной' (PricingDetail detail) = descriptionIndex(invoiceDetail(detail));
    descriptionIndexInvoiceDetail 'Строка накладной' (UserPricingDetail detail) = descriptionIndex(invoiceDetail(detail));

    quantityPricingDetail (invoice, pricing) = GROUP SUM quantity(PricingDetail pricingDetail) BY invoice(invoiceDetail(pricingDetail)), pricing(pricingDetail);

    invoices 'Накладные'(Pricing pricing)  = GROUP
                                                    CONCAT STRING[255](description(Invoice invoice)) IF quantityPricingDetail(invoice, pricing) , ', '
                                                    ORDER invoice IN invoice CHARWIDTH 30 MATERIALIZED;

    pricing 'Кол-во (расценено)' (invoiceDetail) = GROUP SUM quantity(PricingDetail pricingDetail) IF isPosted(pricingDetail)
                                                                       BY invoiceDetail(pricingDetail) MATERIALIZED;

    toPricing 'Не расценено' (InvoiceDetail invoiceDetail) = quantity (invoiceDetail) (-) pricing(invoiceDetail);

    toPricingInvoiceDetail 'Не расценено по отделу' (stock, invoice) =
        GROUP SUM toPricing(InvoiceDetail invoiceDetail) IF toPricing(invoiceDetail) > 0
              BY stockProp(invoiceDetail), invoice(invoiceDetail);

    // Создание расценки на основе инвойса //

    FORM pricingInvoices 'Накладные'###sign
        OBJECTS s = LegalEntity PANEL
        PROPERTIES (s) READONLY name
        OBJECTS c = Stock PANEL
        PROPERTIES (c) READONLY name

        OBJECTS i = Invoice
        PROPERTIES (i) READONLY isPosted, number, series, date, time,
                                nameSupplier, nameSupplierStock, nameCustomer, name###stockProp, nameCurrency,
                                seriesNumberContractSku, isCommission,
                                countInvoiceDetail, quantityInvoiceDetail, sumInvoiceDetail,
                                VATSumInvoiceDetail, invoiceSumInvoiceDetail, orders,
                                note
        FILTERS supplier(i) == s,
                stockProp(i) == c,
                isPosted(i)
        FILTERGROUP invoice
            FILTER 'Накладные с нерасцененными товарами' toPricingInvoiceDetail(c,i) 'F10' DEFAULT
            FILTER 'Накладные со склада' countInvoiceDetail(c,i) 'F9'

        OBJECTS d = InvoiceDetail
        PROPERTIES (d) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku,
                       quantity, pricing, price, sum,
                       name###stockProp, descriptionOrder, toPricing
        FILTERS invoice(d) == i
        FILTERGROUP invoiceDetail
            FILTER 'Строки с нерасцененными товарами' stockProp(d) == c AND toPricing(d) > 0 'F10' DEFAULT
            FILTER 'Строки со склада' stockProp(d) == c 'F9'

    ;

    DESIGN pricingInvoices {
        BOX {
            size = (1024, 768);
            NEW documentContainer BEFORE TOOLBARBOX {
                fill = 1;
                type = CONTAINERV;

                NEW headerBox {
                    type = CONTAINERH;
                    MOVE BOX(s) { caption = 'Поставщик';}
                    MOVE BOX(c) { caption = 'Склад';}
                }
                MOVE BOX(i);
                NEW documentDetail {
                    fill = 1;
                    type = TABBED;

                    MOVE BOX(d) {
                        caption = 'Спецификация';
                    }
                    NEW printTab {
                        fill = 1;
                        caption = 'Печатные формы';
                        NEW printContainer {
                            caption = 'Печать';
                            type = CONTAINERV;
                        }
                    }
                }
            }
            PROPERTY(toPricing(d)) { background = #FFFFCC; }
        }
    }

    fillInvoice 'Заполнить на основе накладной'(UserPricing userPricing)   { 
        DIALOG pricingInvoices OBJECTS s = supplier(userPricing), c = departmentStore(userPricing), i INPUT DO {
            FOR invoice(InvoiceDetail invoiceDetail) == i AND
                stockProp(invoiceDetail) == departmentStore(userPricing) AND
                toPricing(invoiceDetail) > 0
                NEW d = UserPricingDetail DO {
                userPricing(d) <- userPricing;
                invoiceDetail(d) <- invoiceDetail;

                sku(d) <- sku(invoiceDetail);
                quantity (d) <- toPricing(invoiceDetail);
                price (d) <- price(invoiceDetail);

                retailVAT(d) <- VAT(invoiceDetail);
                valueRetailVAT(d) <- valueVAT(invoiceDetail);
                batch(d) <- batch(invoiceDetail);
            }
        }
    } IN invoice;

    EXTEND FORM userPricing
        PROPERTIES(p) fillInvoice, invoices READONLY
        PROPERTIES(d) descriptionIndexInvoiceDetail BEFORE deletepd
    ;
    DESIGN userPricing { params { MOVE GROUP(invoice,p); } }

    EXTEND FORM pricings
        PROPERTIES(p) READONLY invoices, descriptionDocument
        PROPERTIES(d) READONLY descriptionIndexInvoiceDetail
    ;

    EXTEND FORM userInvoice
            PROPERTIES(d) READONLY pricing AFTER quantity(d) SHOWIF showPricing(i) BACKGROUND backgroundRetail(i)
    ;
    EXTEND FORM invoices
            PROPERTIES(d) READONLY BACKGROUND backgroundRetail(i) pricing AFTER quantity(d)  SHOWIF showPricing(i)
    ;
    EXTEND FORM pricingInvoices
        PROPERTIES(i) READONLY createPricing, retailSumInvoiceDetail BEFORE orders(i)
        PROPERTIES(d) READONLY BEFORE name###stockProp(d) SHOWIF createPricing(i)
                      retailMarkup, retailMarkupSum, numberRetailVAT,
                      valueRetailVAT, retailVATSum,
                      retailPrice, retailSum
    ;

    invoiceDetail(InvoicePricingDetail pricingDetail) += invoiceDetail(pricingDetail);
    descriptionDocument(Pricing pricing) += STRING[255](invoices(pricing));
END
