MODULE PricingSalePurchase;

REQUIRE PricingSumPurchase, SalePurchaseInvoice, SalePurchaseInvoiceShipment, PriceListStore;

NAMESPACE Sale;

//----------------------------------------------------------------------------//

@defineDocumentInterfaceHeaderPricingCommittee(invoice, customerStock, purchase);

// Кол-во
@defineDocumentInterfaceDetailQuantityPrefix (invoice, purchasePricing, ' расценено (закупка)');

// Изменененно кол-во для расценки (пока нигде не используется)
extraPurchasePricingQuantity = ABSTRACT NUMERIC[14,3] (UserInvoiceDetail);
overPurchasePricingQuantity = ABSTRACT NUMERIC[16,5] (UserInvoiceDetail);
overPurchaseQuantity(UserInvoiceDetail detail) = OVERRIDE overPurchasePricingQuantity(detail), quantity(detail);
purchasePricingQuantity(UserInvoiceDetail detail) <- overPurchaseQuantity(detail) (+) extraPurchasePricingQuantity(detail)
    WHEN CHANGED(overPurchaseQuantity(detail)) OR CHANGED(extraPurchasePricingQuantity(detail));

// Виды цен

@defineDocumentInterfaceHeaderPriceListType (invoice, calcPriceListType, calcPurchaseRetail, ' (надбавка)');
@defineDocumentDetailPriceListTypePrefix (invoice, invoiceDetail, calcPriceListType, calcPurchaseRetail, ' (надбавка)');
@defineDocumentDetailPriceListTypePrefix (userInvoice, userInvoiceDetail, calcPriceListType, calcPurchaseRetail, ' (надбавка)');
@defineDocumentInterfaceHeaderPriceListType (invoice, priceListType, calcPurchaseRetail, ' (управленческий)');
@defineDocumentDetailPriceListTypePrefix (invoice, invoiceDetail, priceListType, calcPurchaseRetail, ' (управленческий)');
@defineDocumentDetailPriceListTypePrefix (userInvoice, userInvoiceDetail, priceListType, calcPurchaseRetail, ' (управленческий)');

@defineDocumentInterfaceDetailPriceListType (invoice, priceListType, purchaseRetail, ' (розничная)');

@defineDocumentInterfaceHeaderProperty (invoice, useSupplierStock, 'Использовать склад поставщика');


CONSTRAINT currency(UserInvoice invoice) != currency[PriceListType](calcPurchaseRetailCalcPriceListType(invoice))
           CHECKED BY calcPurchaseRetailCalcPriceListType[UserInvoice]
           MESSAGE 'Валюта документа должна совпадать с валютой вида цены (расценка)';
CONSTRAINT currency(UserInvoice invoice) != currency(calcPurchaseRetailPriceListType(invoice))
           CHECKED BY calcPurchaseRetailPriceListType[UserInvoice]
           MESSAGE 'Валюта документа должна совпадать с валютой вида цены (расценка)';

CONSTRAINT currency(UserInvoiceDetail detail) != currency(purchaseRetailPriceListType(detail))
           CHECKED BY purchaseRetailPriceListType[UserInvoiceDetail]
           MESSAGE 'Валюта документа должна совпадать с валютой вида цены (расценка)';

overRetailStock = ABSTRACT Stock (UserInvoiceDetail);
retailStock (UserInvoiceDetail d) = OVERRIDE 
    overRetailStock(d), 
    (IF useSupplierStock(userInvoice(d)) THEN supplierStock(d) ELSE customerStock(d));

useSupplierStock 'Использовать склад поставщика' (invoice) = ABSTRACT BOOLEAN(Purchase.Invoice) MATERIALIZED IN documentPrm;
useSupplierStock 'Использовать склад поставщика' (userInvoice) = DATA BOOLEAN(Purchase.UserInvoice) IN documentPrm;
useSupplierStock (Purchase.UserInvoice invoice) += useSupplierStock(invoice);

useSupplierStock (Purchase.UserInvoice invoice) <- useSupplierStock(pricingOperation(invoice))   
        WHEN CHANGED(pricingOperation(invoice));        
   
retailStock (Purchase.UserInvoiceDetail d) += WHEN useSupplierStock(userInvoice(d)) THEN supplierStock(d);    

WHEN LOCAL // цены берем на начало сессии, а не этого event'а
   (CHANGED(calcPurchaseRetailPriceListType(UserInvoiceDetail detail)) OR
    CHANGED(calcPurchaseRetailCalcPriceListType(detail)) OR
    CHANGED(sku(detail)) OR
    CHANGED(customerStock(detail)) OR
    CHANGED(dateTime(detail))) AND PriceListType pt == calcPurchaseRetailPriceListType(detail) NOINLINE (pt) DO
    purchaseRetailPriceListType(detail) <- IF (IF batch(detail) 
                                                        THEN prevPriceA(pt,batch(detail),retailStock(detail),dateTime(detail))
                                                        ELSE prevPriceA(pt, sku(detail), retailStock(detail), dateTime(detail)))
                                                THEN pt
                                                ELSE calcPurchaseRetailCalcPriceListType(detail);

// если не задана управленческая цена
WHEN LOCAL // цены берем на начало сессии, а не этого event'а
   (CHANGED(calcPurchaseRetailPriceListType(UserInvoiceDetail detail)) OR
    CHANGED(calcPurchaseRetailCalcPriceListType(detail)) OR
    CHANGED(sku(detail)) OR
    CHANGED(customerStock(detail)) OR
    CHANGED(dateTime(detail))) 
    AND calcPurchaseRetailCalcPriceListType(detail) AND NOT calcPurchaseRetailPriceListType(detail) DO
    purchaseRetailPriceListType(detail) <- calcPurchaseRetailCalcPriceListType(detail);


// Базовая цена
overPurchasePricingPrice = ABSTRACT NUMERIC[16,4] (InvoiceDetail) MATERIALIZED;
overPurchasePricingPrice = ABSTRACT NUMERIC[16,4] (UserInvoiceDetail) MATERIALIZED;
overPurchasePricingPrice (UserInvoiceDetail detail) += overPurchasePricingPrice(detail);

purchasePricingPrice 'Цена входная закупка' (UserInvoiceDetail detail) = OVERRIDE overPurchasePricingPrice(detail), price(detail) MATERIALIZED;
purchasePricingPrice 'Цена входная закупка' (InvoiceDetail detail) = OVERRIDE overPurchasePricingPrice(detail), price(detail) MATERIALIZED;

@defineDocumentInterfaceDetailMarkupPrefix (invoice, purchaseRetail, ' (закупка)');

@defineDocumentInterfaceDetailVAT(invoice, countryCustomerStock, purchaseRetail, ' розничный (закупка)');

@defineDocumentInterfaceDetailPricePrefix(invoice, purchaseRetail, ' розничная (закупка)');

// Действия по измению цен и надбавок на форме
//purchaseRoundConditionUserInvoiceDetail(userInvoiceDetail) =
//    IF roundConditionPriceListType(purchaseRetailPriceListTypeUserInvoiceDetail(userInvoiceDetail))
//        THEN roundConditionPriceListType(purchaseRetailPriceListTypeUserInvoiceDetail(userInvoiceDetail))
//        ELSE roundConditionDepartmentStore(customerStockUserInvoiceDetail(userInvoiceDetail));

overPurchaseRoundCondition (UserInvoiceDetail d) = IF purchaseRetailPriceListType(d) IS CalcPriceListType 
    THEN roundCondition(purchaseRetailPriceListType(d), sku(d)) 
    ELSE roundCondition(purchaseRetailPriceListType(d));

purchaseRoundCondition(UserInvoiceDetail d) =  IF overPurchaseRoundCondition(d)
        THEN overPurchaseRoundCondition(d)              
        ELSE roundCondition(customerStock(d));
        
        

@changeDocumentDetailMarkupCustomPrefix(userInvoiceDetail, purchaseRetail, purchasePricing, purchaseRetail, purchaseRetail);
@changeDocumentDetailPriceCustomPrefix(userInvoiceDetail, purchaseRetail, purchasePricing, purchaseRetail, purchaseRetail, purchase);

// Проставление цены по виду цен
@deriveDocumentDetailBatchOnSessionPriceListType(UserInvoiceDetail, purchaseRetail, purchasePricing, retailStock, userInvoice, );
@recalculateDocumentDetailBatchOnSessionPriceListType(UserInvoiceDetail, purchaseRetail, purchasePricing, retailStock, userInvoice, ,' закупка',d);

// -- Суммы по строкам

@defineDocumentInterfaceDetailMarkupSumPrefix (invoice, purchaseRetail, ' (закупка)');
@defineDocumentInterfaceDetailVATDataSumPrefix (invoice, purchaseRetail, ' розничная (закупка)');
@defineDocumentInterfaceDetailDataSumPrefix (invoice, purchaseRetail, ' розничная (закупка)');

// -- Суммы по документу
@defineDocumentInterfaceHeaderSumPrefix (invoice, purchaseRetail, ' розничная (закупка)');

@defineDocumentInterfaceHeaderSumPrefix (invoice, purchaseRetailVAT, ' НДС розничная (закупка)');
@defineDocumentInterfaceHeaderSumPrefix (invoice, purchaseRetailMarkup, ' надбавки (закупка)');

// Галочка по созданию акта расценки на закупке
createPurchasePricing 'Создать акт расценки (закупка)' (invoice) = ABSTRACT BOOLEAN(Invoice) MATERIALIZED IN documentPrm;
createPurchasePricing 'Создать акт расценки (закупка)' (userInvoice) = DATA BOOLEAN(UserInvoice) PREREAD IN documentPrm;
createPurchasePricing (UserInvoice invoice) += createPurchasePricing(invoice);
@defineDocumentInterfaceDetailProperty (invoice, createPurchasePricing, 'Создать акт расценки (закупка)');

// -- Операции
@defineOperationProperty(createPurchasePricing, 'Акт расценки (закупка)', purchaseContainer);
@deriveDocumentOperationProperty(UserInvoice, createPurchasePricing);

WHEN LOCAL (CHANGED(sku(UserInvoiceDetail d)) OR CHANGED (customerStock(d)) OR CHANGED(createPurchasePricing(d))) 
            AND createPurchasePricing(d) DO
    purchaseRetailVAT(d) <- VAT (sku(d), country(customerStock(d)));
    
overSetValuePurchaseRetailVAT (userInvoiceDetail) = ABSTRACT VALUE NUMERIC[10,5] (UserInvoiceDetail);     
calcSetValuePurchaseRetailVAT (UserInvoiceDetail userInvoiceDetail) = 
    OVERRIDE overSetValuePurchaseRetailVAT(userInvoiceDetail), (valueRate(purchaseRetailVAT(userInvoiceDetail), date(userInvoiceDetail)) IF purchaseRetailVAT(userInvoiceDetail)); 

WHEN LOCAL GOAFTER purchaseRetailVAT[UserInvoiceDetail]
    (CHANGED(purchaseRetailVAT(UserInvoiceDetail d)) OR (CHANGED (dateTime(d)) AND NOT isPosted(d)) OR CHANGED(createPurchasePricing(d))) AND 
     v == calcSetValuePurchaseRetailVAT (d) AND NOT CHANGED(valuePurchaseRetailVAT (d)) AND createPurchasePricing(d) DO {
        valuePurchaseRetailVAT (d) <- v;
    }

// Расчет сумм обратным счетом
WHEN LOCAL (CHANGED(purchasePricingQuantity(UserInvoiceDetail d)) OR CHANGED (purchaseRetailPrice(d)) OR CHANGED(currency(d)) OR SET(createPurchasePricing(d))) 
            AND createPurchasePricing(d) DO {
    purchaseRetailSum(d) <- NUMERIC[18,4](round(purchasePricingQuantity(d) * purchaseRetailPrice(d), currency(d)));
} 

WHEN LOCAL (CHANGED(purchaseRetailSum(UserInvoiceDetail d)) OR CHANGED (calcValuePurchaseRetailVAT(d)) OR CHANGED (currency(d)) OR SET(createPurchasePricing(d)))
            AND createPurchasePricing(d) DO {
    purchaseRetailVATSum(d) <- round([ X*Y/(100+Y)](purchaseRetailSum(d), calcValuePurchaseRetailVAT(d)), currency(d));
}

purchasePricingSum = ABSTRACT VALUE NUMERIC[18,4] (UserInvoiceDetail);
purchasePricingSum[UserInvoiceDetail](UserInvoiceDetail d) += sum(d);

WHEN LOCAL (CHANGED(purchaseRetailSum(UserInvoiceDetail d)) OR CHANGED (purchaseRetailVATSum(d)) OR CHANGED (purchasePricingSum(d)) OR SET(createPurchasePricing(d))) 
            AND createPurchasePricing(d) DO {
    purchaseRetailMarkupSum(d) <- purchaseRetailSum(d) (-) purchaseRetailVATSum (d) (-) purchasePricingSum(d);
}

//// Вид цены для акта расценки (закупка)
//purchaseRetailPriceListTypeOperation = DATA PriceListType (Operation);
//namePurchaseRetailPriceListTypeOperation 'Вид цен акт расценки управленческий (закупка) ' (operation) = namePriceListType(purchaseRetailPriceListTypeOperation(operation));
//
//purchaseRetailCalcPriceListTypeOperation = DATA CalcPriceListType (Operation);
//namePurchaseRetailCalcPriceListTypeOperation 'Вид цен акт расценки надбавка (закупка)' (operation) = namePriceListType(purchaseRetailCalcPriceListTypeOperation(operation));
//
//EXTEND FORM operation
//    PROPERTIES(o) namePurchaseRetailPriceListTypeOperation, namePurchaseRetailCalcPriceListTypeOperation
//;
//
//DESIGN operation{
//    createContainer {
//        NEW PROPERTY(namePurchaseRetailPriceListTypeOperation);
//        NEW PROPERTY(namePurchaseRetailCalcPriceListTypeOperation);
//    }
//}
//
//calcPurchaseRetailPriceListTypeUserInvoice (invoice) <- purchaseRetailPriceListTypeOperation(operationUserInvoice(invoice))
//    WHEN CHANGED(operationUserInvoice(invoice));
//
//calcPurchaseRetailCalcPriceListTypeUserInvoice (invoice) <- purchaseRetailCalcPriceListTypeOperation(operationUserInvoice(invoice))
//    WHEN CHANGED(operationUserInvoice(invoice));

// Операция расценки
@defineDocumentInterfaceOperationPrefix (invoice, purchasePricing, Pricing, ' расценка (закупка)');

purchasePricingOperation  = DATA Pricing.Operation (Operation);
namePurchasePricingOperation 'Операция расценка (закупка)' (Operation operation)= name(purchasePricingOperation(operation));

purchasePricingOperation (UserInvoice invoice) <- purchasePricingOperation(operation(invoice))
    WHEN CHANGED(operation(invoice));

overPurchasePricingQuantity(UserInvoiceDetail detail) += (OVERRIDE purchaseShipmentQuantity(detail), 0.0 IF detail IS UserInvoiceDetail) IF useShipmentQuantity(purchasePricingOperation(detail));
// Записываем тип цены по умолчанию из операции

calcPurchaseRetailPriceListType (UserInvoice invoice) <- IF pricingPriceListType(purchasePricingOperation(invoice)) 
    THEN pricingPriceListType(purchasePricingOperation(invoice))
    ELSE (retailPriceListType(customerStock(invoice)) IF NOT skipSetPriceListTypesDepartmentStore(purchasePricingOperation(invoice)))
        WHEN CHANGED(purchasePricingOperation(invoice)) OR CHANGED(customerStock(invoice));
    
calcPurchaseRetailCalcPriceListType (UserInvoice invoice) <- IF pricingCalcPriceListType(purchasePricingOperation(invoice))
    THEN pricingCalcPriceListType(purchasePricingOperation(invoice))
    ELSE (retailCalcPriceListType(customerStock(invoice)) IF NOT skipSetPriceListTypesDepartmentStore(purchasePricingOperation(invoice)))
        WHEN CHANGED(purchasePricingOperation(invoice)) OR CHANGED(customerStock(invoice));
        
useSupplierStock (UserInvoice invoice) <- useSupplierStock(purchasePricingOperation(invoice))   
        WHEN CHANGED(purchasePricingOperation(invoice));              

EXTEND FORM operation
    PROPERTIES(o) namePurchasePricingOperation
;
DESIGN operation {
    purchaseContainer {
        MOVE PROPERTY(namePurchasePricingOperation(o)) AFTER PROPERTY(createPurchasePricing(o));
    }
}

showCreatePurchasePricing (Invoice invoice) = customerStock(invoice) IS DepartmentStore AND createPurchaseInvoice(invoice) AND NOT costLedger(customerStock(invoice));
showPurchasePricing (Invoice invoice) = showCreatePurchasePricing (invoice) AND NOT createPurchasePricing(invoice);
toShowPurchasePricing (Invoice invoice) = showCreatePurchasePricing (invoice) AND createPurchasePricing(invoice);

backgroundPurchaseRetail 'Цвет' (Invoice invoice) = RGB(255, 255, 190) IF invoice IS Invoice;

printSalePurchasePricing 'Акт расценки (закупка)' (Invoice invoice)  { printPricing(purchaseInvoice(invoice)); } IMAGE 'print.png' IN print;

EXTEND FORM userInvoice
    PROPERTIES(i) SHOWIF showCreatePurchasePricing(i) BACKGROUND backgroundPurchaseRetail(i) createPurchasePricing
    PROPERTIES(i) SHOWIF createPurchasePricing(i) BACKGROUND backgroundPurchaseRetail(i)
                  namePurchasePricingOperation, namePurchasePricingCommittee,
                  nameCalcPurchaseRetailPriceListType, nameCalcPurchaseRetailCalcPriceListType,
                  useSupplierStock,
                  purchaseRetailSumUserInvoiceDetail BEFORE purchaseShipmentSumUserInvoiceDetail(i)
                  
    OBJECTS sd = UserInvoiceDetail GRID
    PROPERTIES (sd) READONLY SHOWIF createPurchasePricing(i) index
    PROPERTIES (sd) READONLY SHOWIF createPurchasePricing(i)  BACKGROUND backgroundSku(sd) idBarcodeSku, 
                  idSku, nameSku, shortNameUOMSku

    PROPERTIES(sd) purchasePricingQuantity SHOWIF toShowPurchasePricing(i) BACKGROUND backgroundPurchaseRetail(i)
    
    PROPERTIES(sd) SHOWIF createPurchasePricing(i) BACKGROUND backgroundPurchaseRetail(i)
                  namePurchaseRetailPriceListType,
                  purchaseRetailMarkup ON CHANGE changePurchaseRetailMarkup(sd), purchaseRetailMarkupSum, numberPurchaseRetailVAT,
                  valuePurchaseRetailVAT, purchaseRetailVATSum,
                  purchaseRetailPrice ON CHANGE changePurchaseRetailPrice(sd),
                  purchaseRetailSum
    
    FILTERS userInvoice(sd) == i

//    HINTTABLE LIST purchaseRetailMarkupUserInvoiceDetail, valuePurchaseRetailVATUserInvoiceDetail, purchaseRetailPriceUserInvoiceDetail
;
DESIGN userInvoice {
    headerCreateDocuments {
        NEW headerCreateSalePricing  {
            caption = 'Расценка на закупке';
            MOVE PROPERTY(createPurchasePricing(i));
        }
    }
    specificationBox {
        NEW purchasePricingContainer {
            caption = 'Расценка (закупка)';
            NEW purchasePricingHeader {
                type = CONTAINERH;
                alignment = STRETCH;
                MOVE PROPERTY(namePurchasePricingOperation(i));
                MOVE PROPERTY(namePurchasePricingCommittee(i));
                MOVE PROPERTY(nameCalcPurchaseRetailPriceListType(i));
                MOVE PROPERTY(nameCalcPurchaseRetailCalcPriceListType(i));
                MOVE PROPERTY(useSupplierStock(i));
            }
            MOVE BOX (sd);
        }
    }
}


EXTEND FORM invoices
    PROPERTIES(i) BACKGROUND backgroundPurchaseRetail(i) READONLY BEFORE orders(i) purchaseRetailVATSumInvoiceDetail, purchaseRetailSumInvoiceDetail
    PROPERTIES (i)  printSalePurchasePricing
    PROPERTIES(d) READONLY BEFORE purchaseExpiryDate(d) SHOWIF createPurchasePricing(i) BACKGROUND backgroundPurchaseRetail(i)
                  namePurchaseRetailPriceListType,
                  purchaseRetailMarkup, purchaseRetailMarkupSum, numberPurchaseRetailVAT,
                  valuePurchaseRetailVAT, purchaseRetailVATSum,
                  purchaseRetailPrice, purchaseRetailSum
    PROPERTIES(d) READONLY BACKGROUND backgroundPurchaseRetail(i) purchasePricingQuantity AFTER quantity(d)  SHOWIF toShowPurchasePricing(i)
;


DESIGN invoices {
    printTab {
        NEW printPricing {
            type = CONTAINERH;
            caption = 'Расценка (приход)';  
            MOVE PROPERTY(printSalePurchasePricing(i));                
        }
    }
}
// --- Заполнение атрибутов приходной накладной ---- //

createPricing(PurchaseInvoice invoice) += createPurchasePricing(invoice(invoice));
pricingCommittee(PurchaseInvoice invoice) += purchasePricingCommittee(invoice(invoice));

// Операция расценки закупка
pricingOperation(PurchaseInvoice invoice) += purchasePricingOperation(invoice(invoice));

// Вид цены
retailPriceListType(PurchaseInvoiceDetail invoiceDetail) += purchaseRetailPriceListType(invoiceDetail(invoiceDetail));

// Кол-во
pricingQuantity(PurchaseInvoiceDetail invoiceDetail) += purchasePricingQuantity(invoiceDetail(invoiceDetail));

// Надбавка
retailMarkup(PurchaseInvoiceDetail invoiceDetail) += purchaseRetailMarkup(invoiceDetail(invoiceDetail));

// НДС
retailVAT(PurchaseInvoiceDetail invoiceDetail) += purchaseRetailVAT(invoiceDetail(invoiceDetail));
valueRetailVAT(PurchaseInvoiceDetail invoiceDetail) += valuePurchaseRetailVAT(invoiceDetail(invoiceDetail));

// Розничная цена
retailPrice(PurchaseInvoiceDetail invoiceDetail) += purchaseRetailPrice(invoiceDetail(invoiceDetail));

// Суммы
retailMarkupSum(PurchaseInvoiceDetail invoiceDetail) += purchaseRetailMarkupSum(invoiceDetail(invoiceDetail));
retailVATSum(PurchaseInvoiceDetail invoiceDetail) += purchaseRetailVATSum(invoiceDetail(invoiceDetail));
retailSum(PurchaseInvoiceDetail invoiceDetail) += purchaseRetailSum(invoiceDetail(invoiceDetail));

// Добавляем на форму цену розничную (до)
purchaseRetailPriceB 'Розничная цена (до) (закупка)' (UserInvoiceDetail d) = prevRetailPricingPriceB(sku(d), customerStock(d), dateTime(d));
purchaseBalanceB 'Остаток (до) (закупка)' (UserInvoiceDetail d) = prevBalanceB(sku(d), customerStock(d), dateTime(d));
//purchaseRetailPriceB 'Розничная цена (до)' (Purchase.InvoicePricingDetail o) = purchaseRetailPriceB(invoiceDetail(invoiceDetail(o)));
//retailPriceB(InvoicePricingDetail d) += purchaseRetailPriceB(invoiceDetail(invoiceDetail(d))); //purchaseRetailPriceB(d);

backgroundPurchaseRetailPriceB (UserInvoiceDetail d) = CASE 
    WHEN purchaseRetailPriceB(d) > purchaseRetailPrice(d) THEN RGB(250,150,150)
    WHEN purchaseRetailPriceB(d) < purchaseRetailPrice(d) THEN RGB(150,250,200);

EXTEND FORM userInvoice
    PROPERTIES(sd) READONLY SHOWIF createPurchasePricing(i) purchaseRetailPriceB BACKGROUND backgroundPurchaseRetail(i) AFTER purchaseRetailSum(sd)
;
