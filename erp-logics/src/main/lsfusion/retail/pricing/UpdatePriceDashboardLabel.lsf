MODULE UpdatePriceDashboardLabel;

REQUIRE UpdatePriceDashboard, PriceList, PriceListStore;

NAMESPACE PriceList;

select 'Отм.' = DATA LOCAL BOOLEAN (PriceListDetail);
countSelectPriceListDetail 'Кол-во строк'  = GROUP SUM 1 IF select(PriceListDetail d) BY sku(d), priceList(d);
countSelectPriceListDetail 'Кол-во строк'  = GROUP SUM 1 IF select(PriceListDetail d) BY priceList(d);

createSnapshotUpdateLabelTransactionDepartmentStore 'Перепечатать ценники'(DepartmentStore departmentStore,  PriceList priceList, PriceListType dpt)  { 
    select(Sku s)<- NULL;
    
    IF NOT countSelectPriceListDetail(priceList) THEN {
        select(Sku s)<- TRUE WHERE countPriceListDetail(s,priceList);
    } ELSE {
        select(Sku s)<- TRUE WHERE countSelectPriceListDetail(s,priceList);
    }
    
    IF countSelectSkus() THEN  NEWSESSION NESTED (select[Sku]) {
        DIALOG selectLabelTypes OBJECTS ds = departmentStore, l INPUT NOMANAGESESSION DO { 

            IF NOT countSelectType() THEN {
                select(l) <- TRUE;
            }            
            FOR select(LabelType type) DO {
                NEW t = LabelTransaction {
                    departmentStore(t) <- departmentStore;
                    priceListType(t) <- dpt;    
                    date(t) <- fromDate(priceList);      
                    time(t) <- fromTime(priceList);
                    labelType(t) <- type;
            
                    FOR select(Sku sku) AND NOT exclude(type, sku) AND PriceListType pt == overPriceListType(t) NOINLINE (pt) NEW d = LabelTransactionDetail DO {
                        labelTransaction(d) <- t;
                        sku(d) <- sku;
            
                        name(d) <- name(sku(d));
                        documentQuantity(d) <- currentBalance(sku, departmentStore); 
            
                        createAttribute(d);                      
               
                        price(d) <- OVERRIDE documentPrice(d), calcPrice(pt, d);
                        retailPrice(d) <- overRetailPrice(d) WHERE overRetailPrice(d);   
                                                                                                                                                                                           
                        quantity(d) <- IF NOT countLabel(departmentStore) 
                                                                 THEN (IF include(labelType(d), sku(d)) 
                                                                    THEN INTEGER(documentQuantity(d))
                                                                     ELSE count(labelType(d), sku(d)))
                                                                 ELSE countLabel(departmentStore);                                                                                                                                                                                              
                                                                                                                                                                                           
                    }
                    
                    IF change(departmentStore) THEN {
                        LOCAL printed = BOOLEAN();
                        printed() <- NULL;
                        DIALOG customLabelTransaction OBJECTS l = t NOMANAGESESSION DO {    
                            print(t);
                            printed() <- TRUE;
                        }             
                        IF NOT printed() THEN {
                            cancel();
                        }             
                    } ELSE {
                        print(t);
                    }
                }
            }                     
        }                 
        apply();        
    }
    select(PriceListDetail detail) <- NULL;
} TOOLBAR;

skitFilterPriceLiist = ABSTRACT BOOLEAN ();

EXTEND FORM updatePriceDashboard
    OBJECTS pt = DataPriceListType PANEL 
    PROPERTIES (pt) SELECTOR name
    
    OBJECTS psc = PriceList LAST
    PROPERTIES(psc) READONLY BACKGROUND background(psc)
           isPosted , number, series, date, time,
           fromDate, fromTime, toDate, toTime, countPriceListDetail,
           nameCurrency, nameCompany, nameCompanyStock, priceListTypes, stocks,
           note
    FILTERS in(psc,d),
            in(psc,pt) OR psc IS PriceList AND skitFilterPriceLiist()
    FILTERGROUP inactivePriceList
        FILTER 'Текущие' isActive(psc) 'F11'            
        FILTER 'Активные' isActive(psc) OR (fromDateTime(psc) > currentDateTime()) 'F10' DEFAULT        
            
    OBJECTS t = DataPriceListType GRID

    OBJECTS dd = PriceListDetail
    PROPERTIES (dd) select
    PROPERTIES(dd) READONLY BACKGROUND background(dd) index, idBarcodeSku, idSku SHOWIF showIDs(),nameSku,
                           shortNameUOMSku, nameBatch, nameCompany
    PROPERTIES(dd) READONLY AFTER nameSku(dd) originalIdBarcodeSku SHOWIF showOriginalIdBarcodeSku(psc), originalNameSku SHOWIF showOriginalNameSku(psc)
    
    ORDERS index(dd)

    PROPERTIES(dd, t) READONLY BACKGROUND background(dd) price COLUMNS (t) HEADER name(t)
    FILTERS priceList(dd) == psc,
            in(psc, t)
    
    PROPERTIES (d,psc,pt)  createSnapshotUpdateLabelTransactionDepartmentStore     
;
DESIGN updatePriceDashboard {
    pane{

        NEW psc {
            caption = 'Печать ценников';
            fill = 1;
            MOVE BOX(pt);
            NEW spec {
                fill = 1;
                MOVE BOX(psc);   
                MOVE BOX(dd);
            }
        }
    }
}

