MODULE PricingPurchase;

REQUIRE PricingInvoice, PurchaseInvoice, PurchaseShipment, PurchaseOperation;

NAMESPACE Purchase;

//----------------------------------------------- Акт расценки ---------------------------------------------------//

// Объявляем вид цены для надбавки, автоматически проставляем
@defineDocumentInterfaceHeaderPriceListType (invoice, calcPriceListType, calcRetail, ' (надбавка)');
@defineDocumentDetailPriceListTypePrefix (invoice, invoiceDetail, calcPriceListType, calcRetail, ' (надбавка)');
@defineDocumentDetailPriceListTypePrefix (userInvoice, userInvoiceDetail, calcPriceListType, calcRetail, ' (надбавка)');

// Объявляем вид цены управленческий
@defineDocumentInterfaceHeaderPriceListType (invoice, priceListType, calcRetail, ' (управленческий)');
@defineDocumentDetailPriceListTypePrefix (invoice, invoiceDetail, priceListType, calcRetail, ' (управленческий)');
@defineDocumentDetailPriceListTypePrefix (userInvoice, userInvoiceDetail, priceListType, calcRetail, ' (управленческий)');

@defineDocumentInterfaceDetailPriceListType (invoice, priceListType, retail, ' (розничная)');

CONSTRAINT currency(UserInvoice invoice) != currency[PriceListType](calcRetailCalcPriceListType(invoice))
           CHECKED BY calcRetailCalcPriceListType[UserInvoice]
           MESSAGE 'Валюта документа должна совпадать с валютой вида цены (расценка)';
CONSTRAINT currency(UserInvoice invoice) != currency(calcRetailPriceListType(invoice))
           CHECKED BY calcRetailPriceListType[UserInvoice]
           MESSAGE 'Валюта документа должна совпадать с валютой вида цены (расценка)';

CONSTRAINT currency(UserInvoiceDetail detail) != currency(retailPriceListType(detail))
           CHECKED BY retailPriceListType[UserInvoiceDetail]
           MESSAGE 'Валюта документа должна совпадать с валютой вида цены (расценка)';

    
//fillRetailPriceListTypeUserInvoiceDetailAll 'Пересчитать цену для всех'  = (detail) { // нужно чтобы еще сработали SESSION потом, которые изменяют цену и надбавку
//    retailPriceListTypeUserInvoiceDetail(d) <-NULL WHERE userInvoiceUserInvoiceDetail(detail) == userInvoiceUserInvoiceDetail(d);
//    retailPriceListTypeUserInvoiceDetail(d) <- (IF prevPriceBPriceListTypeSkuStockDateTime(calcRetailPriceListTypeUserInvoiceDetail(d),
//                                                                                            skuUserInvoiceDetail(d),
//                                                                                            customerStockUserInvoiceDetail(d),
//                                                                                            dateTimeUserInvoiceDetail(d)
//                                                                                            )
//        THEN calcRetailPriceListTypeUserInvoiceDetail(d)
//        ELSE calcRetailCalcPriceListTypeUserInvoiceDetail(d)) WHERE userInvoiceUserInvoiceDetail(detail) == userInvoiceUserInvoiceDetail(d);    
//} ASON CONTEXTMENU nameRetailPriceListTypeUserInvoiceDetail;


// Округление розничной цен (если указан расчетный вид цены, то от него, иначе от склада)                
//roundConditionUserInvoiceDetail(userInvoiceDetail) =
//    IF roundConditionPriceListType(retailPriceListTypeUserInvoiceDetail(userInvoiceDetail))
//        THEN roundConditionPriceListType(retailPriceListTypeUserInvoiceDetail(userInvoiceDetail))
//        ELSE roundConditionDepartmentStore(customerStockUserInvoiceDetail(userInvoiceDetail));             

overRoundCondition (UserInvoiceDetail d) = IF retailPriceListType(d) IS CalcPriceListType 
    THEN roundCondition(retailPriceListType(d), sku(d)) 
    ELSE roundCondition(retailPriceListType(d));

roundCondition(UserInvoiceDetail d) = OVERRIDE overRoundCondition(d), roundCondition(customerStock(d));

@defineInvoicePricingAggregation(invoice, Invoice, ' (закупка)', 'Акт расценки на основе накладной', 'Проведенный акт расценки на основе накладной', customer, );

// Записываем в вид цены управленческий вид цены, если по нему есть цена, иначе - надбавку
extraCalcRetailCalcPriceListType = ABSTRACT CASE CalcPriceListType (UserInvoiceDetail);

retailStock = ABSTRACT CASE Stock (UserInvoiceDetail);
retailStock (UserInvoiceDetail d) += WHEN d IS UserInvoiceDetail THEN customerStock(d);
    
skipSetRetailPriceListType = ABSTRACT BOOLEAN (UserInvoiceDetail);
WHEN LOCAL FORMS userInvoice
    (CHANGED(calcRetailPriceListType(UserInvoiceDetail detail)) OR
     CHANGED(calcRetailCalcPriceListType(detail)) OR
     CHANGED(sku(detail)) OR
     CHANGED(retailStock(detail)) OR
     (CHANGED(pricingDateTime(detail)) AND NOT isPosted(detail))) 
     AND PriceListType pt == calcRetailPriceListType(detail)
     AND NOT skipSetRetailPriceListType(detail) NOINLINE (pt) DO
     retailPriceListType(detail) <- IF prevPriceA(pt, sku(detail), retailStock(detail), pricingDateTime(detail))
                                        THEN pt
                                        ELSE OVERRIDE extraCalcRetailCalcPriceListType(detail), calcRetailCalcPriceListType(detail);

WHEN LOCAL FORMS userInvoice
    (CHANGED(calcRetailPriceListType(UserInvoiceDetail detail)) OR
     CHANGED(calcRetailCalcPriceListType(detail)) OR
     CHANGED(sku(detail)) OR
     CHANGED(retailStock(detail)) OR
     (CHANGED(pricingDateTime(detail)) AND NOT isPosted(detail))) 
     AND NOT calcRetailPriceListType(detail)
     AND NOT skipSetRetailPriceListType(detail) DO
     retailPriceListType(detail) <- OVERRIDE extraCalcRetailCalcPriceListType(detail), calcRetailCalcPriceListType(detail);     

edit (InvoicePricingDetail d)+ {  edit(invoiceDetail(d)); }

retailPriceListType(InvoicePricingDetail pricingDetail) += retailPriceListType(invoiceDetail(pricingDetail));

// -- Операция
@defineOperationProperty(createPricing, 'Акт расценки', createContainer);
@deriveDocumentOperationProperty(UserInvoice, createPricing);
// Операция расценки
@defineDocumentInterfaceOperationPrefix (invoice, pricing, Pricing, ' (расценка)');

pricingOperation  = DATA Pricing.Operation (Operation);
namePricingOperation 'Операция (расценка)' (Operation operation)= name(pricingOperation(operation));

pricingOperation (UserInvoice invoice) <- pricingOperation(operation(invoice))
    WHEN CHANGED(operation(invoice));

operation(InvoicePricing pricing) += pricingOperation(invoice(pricing));

// Записываем тип цены по умолчанию из операции
calcRetailPriceListType (UserInvoice invoice) <- IF pricingPriceListType(pricingOperation(invoice)) 
                THEN pricingPriceListType(pricingOperation(invoice))
                ELSE (retailPriceListType(customerStock(invoice)) IF NOT skipSetPriceListTypesDepartmentStore(pricingOperation(invoice)))
                    WHEN (CHANGED(pricingOperation(invoice)) OR CHANGED(customerStock(invoice))) AND pricingOperation(invoice);

calcRetailCalcPriceListType (UserInvoice invoice) <- IF pricingCalcPriceListType(pricingOperation(invoice)) 
                THEN pricingCalcPriceListType(pricingOperation(invoice))
                ELSE (retailCalcPriceListType(customerStock(invoice)) IF NOT skipSetPriceListTypesDepartmentStore(pricingOperation(invoice)))
                    WHEN (CHANGED(pricingOperation(invoice)) OR CHANGED(customerStock(invoice))) AND pricingOperation(invoice);

EXTEND FORM operation
    PROPERTIES(o) namePricingOperation
;
DESIGN operation {
    createContainer {
        MOVE PROPERTY(namePricingOperation(o)) AFTER PROPERTY(createPricing(o));
    }
}

// Добавляем вид цены на форму
EXTEND FORM userInvoice
    PROPERTIES(i) SHOWIF createPricing(i) BACKGROUND backgroundRetail(i)
                  namePricingOperation, nameCalcRetailPriceListType, nameCalcRetailCalcPriceListType
    PROPERTIES(pd) SHOWIF createPricing(i) BACKGROUND backgroundRetail(i) nameRetailPriceListType BEFORE retailMarkup(pd)
;
DESIGN userInvoice {
    headerCreatePricing {
        MOVE PROPERTY(namePricingOperation(i));
        MOVE PROPERTY(nameCalcRetailPriceListType(i)) AFTER PROPERTY(namePricingOperation(i));
        MOVE PROPERTY(nameCalcRetailCalcPriceListType(i)) AFTER PROPERTY(nameCalcRetailPriceListType(i));
    }
}

EXTEND FORM invoices PROPERTIES(d) SHOWIF createPricing[UserInvoice](i) BACKGROUND backgroundRetail(i) READONLY nameRetailPriceListType BEFORE retailMarkup(d);

// расчет надбавок и цены при изменении priceListType
//вынесено из метакода из-за порядка событий в Santa
skipChangePrice = ABSTRACT CASE BOOLEAN (UserInvoiceDetail);

overSetRetailPrice ABSTRACT LIST (PriceListType, UserInvoiceDetail);

WHEN LOCAL GOAFTER retailPriceListType[UserInvoiceDetail], price[UserInvoiceDetail]
    (CHANGED(retailPriceListType(UserInvoiceDetail detail)) OR
     CHANGED(pricingPrice(detail)) OR
     CHANGED(sku(detail)) OR
     CHANGED(retailStock(detail)) OR
    (CHANGED(pricingDateTime(detail)) AND NOT isPosted(detail)) OR
     CHANGED(valueRetailVAT(detail)))
    AND sku(detail) AND CalcPriceListType priceListType == retailPriceListType(detail) AND RoundCondition roundCondition == roundCondition(retailPriceListType(detail), sku(detail))
    AND NOT CHANGED(retailPrice(detail)) AND NOT skipChangePrice(detail)
    AND pricingDocument(priceListType) NOINLINE (priceListType, roundCondition) INLINE DO {
        retailMarkup(detail) <- markup(priceListType, sku(detail))
                                                     WHERE retailPriceListType(detail) == priceListType;
        retailPrice(detail) <- round([ X*(Y+100)*(Z+100)/10000](
                                                                pricingPrice(detail),
                                                                retailMarkup(detail),
                                                                valueRetailVAT(detail)), roundCondition)
                                                     WHERE retailPriceListType(detail) == priceListType;

        overSetRetailPrice(priceListType, detail);
    }
    
WHEN LOCAL GOAFTER retailPriceListType[UserInvoiceDetail]
    (CHANGED(retailPriceListType(UserInvoiceDetail detail)) OR
     CHANGED(pricingPrice(detail)) OR
     CHANGED(sku(detail)) OR
     CHANGED(retailStock(detail)) OR
    (CHANGED(pricingDateTime(detail)) AND NOT isPosted(detail)) OR
     CHANGED(batch(detail)) OR
     CHANGED(valueRetailVAT(detail)))
    AND NOT CHANGED(retailPrice(detail)) AND NOT skipChangePrice(detail)
    AND sku(detail) AND PriceListType priceListType == retailPriceListType(detail) AND NOT pricingDocument(priceListType) NOINLINE (priceListType) INLINE DO {

        retailPrice(detail) <- IF batch(detail) THEN prevPriceA(priceListType, batch(detail), retailStock(detail), pricingDateTime(detail))
                                                  ELSE prevPriceA(priceListType, sku(detail), retailStock(detail), pricingDateTime(detail))
                                                     WHERE retailPriceListType(detail) == priceListType;

        overSetRetailPrice(priceListType, detail);
        
        retailMarkup(detail) <- [ round2(min(((X/Z*100/(100+Y))-1)*100,99999))](
                                                           retailPrice(detail),
                                                           pricingPrice(detail),
                                                           valueRetailVAT(detail))
                                                     WHERE retailPriceListType(detail) == priceListType;
    }
skipMarkup = ABSTRACT CASE BOOLEAN (UserInvoiceDetail);
recalculateRetailMarkup (UserInvoiceDetail detail)  { 
    retailMarkup(detail) <- [ round2(min(((X/Z*100/(100+Y))-1)*100,99999))](
                                                       retailPrice(detail),
                                                       pricingPrice(detail),
                                                       valueRetailVAT(detail));
}
WHEN LOCAL
    (CHANGED(pricingPrice(UserInvoiceDetail detail)) OR
     CHANGED(valueRetailVAT(detail)))
    AND NOT retailPriceListType(detail) AND NOT skipMarkup(detail) INLINE DO {
        recalculateRetailMarkup(detail);
}

@recalculateDocumentDetailBatchOnSessionPriceListType (UserInvoiceDetail, retail, pricing, retailStock, userInvoice, pricing, '', pd);

recalculateRetailPriceAndType 'Пересчитать вид цен и розничную цену' ()  { 
    FOR sku(UserInvoiceDetail detail) AND PriceListType pt == calcRetailPriceListType(detail)
        AND NOT skipSetRetailPriceListType(detail) 
        AND [ FILTER userInvoice.pd](detail) NOINLINE (pt) INLINE DO {
        
        retailPriceListType(detail) <- IF prevPriceA(pt, sku(detail), retailStock(detail), pricingDateTime(detail))
                                       THEN pt
                                       ELSE OVERRIDE extraCalcRetailCalcPriceListType(detail), calcRetailCalcPriceListType(detail);
    } 
       
    FOR sku(UserInvoiceDetail detail) AND NOT calcRetailPriceListType(detail)
        AND NOT skipSetRetailPriceListType(detail) 
        AND [ FILTER userInvoice.pd](detail) DO {
        
        retailPriceListType(detail) <- OVERRIDE extraCalcRetailCalcPriceListType(detail), calcRetailCalcPriceListType(detail);    
    } 
    recalculateRetailPrice();
} 

EXTEND FORM userInvoice
    PROPERTIES() SHOWIF createPricing[Invoice](i) recalculateRetailPriceAndType DRAW pd TOOLBAR  
;

// Проставляем НДС розничный, равный НДС входному
skipSetSkuVAT = ABSTRACT BOOLEAN (UserInvoiceDetail);

setVAT = ABSTRACT CASE Range (UserInvoiceDetail);
setVAT (UserInvoiceDetail detail) += WHEN detail IS UserInvoiceDetail THEN VAT(detail);

WHEN LOCAL CHANGED(VAT(UserInvoiceDetail detail)) OR CHANGED(valueVAT(detail)) DO {
    retailVAT(detail) <- IF valueVAT(detail) == 0 AND NOT skipSetSkuVAT(detail) THEN
                                               VAT (sku(detail), country(supplierStock(detail)))
                                          ELSE setVAT(detail);
}

// Добавляем на форму цену розничную (до)
retailPriceB 'Розничная цена (до)' (UserInvoiceDetail d) = prevRetailPricingPriceB(sku(d), customerStock(d), dateTime(d));
retailPriceB 'Розничная цена (до)' (InvoicePricingDetail o) = retailPriceB(invoiceDetail(o));
retailPriceB(InvoicePricingDetail d) += retailPriceB(d);

backgroundRetailPriceB (UserInvoiceDetail d) = CASE 
    WHEN retailPriceB(d) > retailExtraPrice(d) THEN RGB(250,150,150)
    WHEN retailPriceB(d) < retailExtraPrice(d) THEN RGB(150,250,200);

EXTEND FORM userInvoice
    PROPERTIES(pd) READONLY SHOWIF createPricing(i) retailExtraPrice, balanceB, retailPriceB BACKGROUND backgroundRetailPriceB(pd)

    FILTERGROUP prices 
        FILTER 'Цена (до) больше' retailPriceB(pd) > retailExtraPrice(pd)
        FILTER 'Цена (до) меньше' retailPriceB(pd) < retailExtraPrice(pd)
        FILTER 'Разные цены' retailPriceB(pd) != retailExtraPrice(pd)
;

// Копирование документа
overCopy(UserInvoice s, UserInvoice d) + { 
    createPricing(d) <- createPricing(s);
    pricingOperation(d) <- pricingOperation(s);
    calcRetailPriceListType(d) <- calcRetailPriceListType(s);
    calcRetailCalcPriceListType(d) <- calcRetailCalcPriceListType(s);
}

//Добавляем на форму Текущие остатки НДС и наценку

valueRetailVAT 'НДС, % розничный' (Batch batch) = valueRetailVAT(invoiceDetail(batch));
retailMarkup 'Надбавка, %' (Batch batch) = retailMarkup(invoiceDetail(batch));

EXTEND FORM currentBalanceSkuStock
    PROPERTIES(bt) READONLY BACKGROUND RGB(224, 255, 255) valueRetailVAT, retailMarkup    
;

//не пересчитываем розничную цену при объединении товаров и замене товара у партии
skipChangePrice (UserInvoiceDetail detail) += WHEN retailPrice(detail) AND allowReplaceItem() THEN TRUE;