MODULE PricingPurchaseReturn;

REQUIRE PricingSumInvoice, PurchaseReturnInvoice, PurchaseReturnShipment, PricingPurchase, PriceListLedger;

NAMESPACE PurchaseReturn;

// ------------------------------------- Автоматическое создание расценки для документа -------------------- //

roundCondition(UserInvoiceDetail userInvoiceDetail) = roundCondition(customerStock(userInvoiceDetail));
@defineInvoicePricingAggregation(invoice, Invoice, ' (закупка-возврат)', 'Акт расценки при возврате', 'Проведенный акт расценки при возврате', customer, );
@defineInvoicePricingAggregationSum(invoice, Invoice, ' (закупка-возврат)', 'Акт расценки при возврате', 'Проведенный акт расценки при возврате', customer, );
batch(InvoicePricingDetail detail) += batch(invoiceDetail(detail));
edit (InvoicePricingDetail d)+ {  edit(invoiceDetail(d)); }


// Автоматическое проставление свойств
retailMarkup(UserInvoiceDetail userInvoiceDetail)  <- [ round2((((X - X*Y/(100+Y))/Z)-1)*100)](
    retailPrice(userInvoiceDetail),
    valueRetailVAT(userInvoiceDetail),
    pricingPrice(userInvoiceDetail))
    WHEN CHANGED(retailPrice(userInvoiceDetail)) OR
         CHANGED(retailVAT(userInvoiceDetail)) OR
         CHANGED(pricingPrice(userInvoiceDetail));

//@deriveDocumentDetailVAT(userInvoice, retail, date, sku, customerStock);

// Проставляем НДС розничный, равный НДС входному
setVAT = ABSTRACT CASE Range (UserInvoiceDetail);
setVAT (UserInvoiceDetail detail) += WHEN detail IS UserInvoiceDetail THEN VAT(detail);

WHEN LOCAL CHANGED(VAT(UserInvoiceDetail detail)) OR CHANGED(valueVAT(detail)) DO {
    retailVAT(detail) <- IF valueVAT(detail) == 0 THEN
                                               VAT (sku(detail), country(supplierStock(detail)))
                                          ELSE setVAT(detail);
}

disableUpdateRetailPrice = ABSTRACT BOOLEAN (UserInvoiceDetail);

extraRetailPrice = ABSTRACT NUMERIC[16,4] (UserInvoiceDetail); 
WHEN LOCAL (CHANGED(customerStock(UserInvoiceDetail detail)) OR
              (CHANGED(dateTime(detail)) AND NOT isPosted(detail)) OR
              CHANGED(batch(detail))) AND customerStock(detail) IS DepartmentStore AND batch(detail) AND NOT skipUpdatePriceAccount() AND NOT disableUpdateRetailPrice(detail) DO {
    retailPrice (detail)  <- prevPriceB(SystemLedgerPriceListType.retailPricingPriceListType,
                                                                                                       batch(detail),
                                                                                                       customerStock(detail),
                                                                                                       dateTime(detail)) (-) extraRetailPrice(detail);
}

WHEN LOCAL (CHANGED(customerStock(UserInvoiceDetail detail)) OR
              (CHANGED(dateTime(detail)) AND NOT isPosted(detail)) OR
              DROPPED(batch(detail)) OR
              CHANGED(sku(detail))) AND customerStock(detail) IS DepartmentStore AND NOT batch(detail) AND NOT skipUpdatePriceAccount() AND NOT disableUpdateRetailPrice(detail) DO {
    retailPrice (detail)  <- prevPriceB(SystemLedgerPriceListType.retailPricingPriceListType,
                                                                                      sku(detail),
                                                                                      customerStock(detail),
                                                                                      dateTime(detail)) (-) extraRetailPrice(detail);
}

// Не изменять цену и является обратным
skipChangeLedger(InvoicePricingDetail d) += d IS InvoicePricingDetail;
isReturn(InvoicePricing pricing) +=  pricing IS InvoicePricing;

// Автоматическое проставление галочки создания акта расценки
@deriveDocumentOperationProperty(UserInvoice, createPricing);
// Операция расценки
@defineDocumentInterfaceOperationPrefix (invoice, pricing, Pricing, ' (расценка)');
pricingOperation (UserInvoice invoice) <- pricingOperation(operation(invoice))
    WHEN CHANGED(operation(invoice));
operation(InvoicePricing pricing) += pricingOperation(invoice(pricing));

// Добавляем операцию расценки на форму
EXTEND FORM userInvoice
    PROPERTIES(i) SHOWIF createPricing(i) BACKGROUND backgroundRetail(i) namePricingOperation, 
                                                                                            useShipmentQuantity
;
DESIGN userInvoice {
    headerCreatePricing {
        MOVE PROPERTY(namePricingOperation(i));// BEFORE PROPERTY(namePricingCommitteeUserInvoice(i));
        MOVE PROPERTY(useShipmentQuantity(i));// AFTER PROPERTY(namePricingCommitteeUserInvoice(i));
    }
}

//Проставляем свойство расценки поставленного количества 
useShipmentQuantity (UserInvoice invoice) <- useShipmentQuantity(pricingOperation(operation(invoice)))
                                                        WHEN CHANGED(operation(invoice));
