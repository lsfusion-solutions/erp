MODULE UpdatePriceDashboard;

REQUIRE Barcode, Pricing, Label, MachineryPriceTransaction;

NAMESPACE Pricing;

FORM priceLabelTransactionDetails 'Цена на ценниках' 
    
    OBJECTS s = Sku PANEL 
    PROPERTIES READONLY name(s)
    OBJECTS st = Stock PANEL     
    
    OBJECTS d = LabelTransactionDetail GRID
    PROPERTIES READONLY date(d), time(d), nameLabelType(d), price(d)
    ORDERS date(d), time(d)
    FILTERS sku(d) == s,
            departmentStore(d) == st
;
showPriceLabelTransactionDetail 'Показать изменение цены' (Sku sku, Stock stock)  { SHOW priceLabelTransactionDetails OBJECTS s = sku, st = stock; }  ASON CONTEXTMENU prevPriceLabelTransactionDetail[Sku,DepartmentStore];

FORM priceMachineryPriceTransactionBarcode 'Цена в оборудовании' 
    
    OBJECTS b = Barcode PANEL 
    PROPERTIES READONLY nameSku(b)
    OBJECTS st = Stock PANEL     
    
    OBJECTS t= MachineryPriceTransaction GRID
    PROPERTIES READONLY date(t), time(t), nameGroupMachinery(t), name(t,b), price(t,b)
    ORDERS date(t), time(t)
    
    FILTERS stock(groupMachinery(t)) == st,
            in(t,b),
            NOT canceled(t)
;
showPriceMachineryPriceTransaction 'Показать изменение цены' (Sku sku, Stock stock)  { SHOW priceMachineryPriceTransactionBarcode OBJECTS b = barcode(sku), st = stock; }  ASON CONTEXTMENU transactionPrice[Sku,Stock];

useCurrentPriceUpdatePriceDashboard 'Использовать текущие цены в обновлении цен' = DATA BOOLEAN ();
EXTEND FORM options
    PROPERTIES() useCurrentPriceUpdatePriceDashboard
;

DESIGN options {
    pricings {
        MOVE PROPERTY(useCurrentPriceUpdatePriceDashboard());
    }
}

useCurrentPrice = DATA LOCAL BOOLEAN();
initUseCurrentPrice()  { 
    useCurrentPrice() <- useCurrentPriceUpdatePriceDashboard();
}
updatePrice 'Розничная цена' (Sku sku, Stock stock) = IF useCurrentPrice() THEN currentRetailPricingPrice(sku, stock) ELSE retailPricingPriceA(sku, stock);   
updateDescription 'Описание' (Sku sku, Stock stock) = IF useCurrentPrice() THEN currentRetailPricingDescription(sku, stock) ELSE retailPricingDescriptionA(sku, stock);   
updateFromDateTime 'Дата/время с' (Sku sku, Stock stock) = IF useCurrentPrice() THEN currentRetailPricingFromDateTime(sku, stock) ELSE retailPricingFromDateTimeA(sku, stock);   

showMovementPriceSkuStocks 'Показать изменение цены товара' (Sku sku, Stock stock)  { 
    dialogPriceListType() <- SystemLedgerPriceListType.retailPricingPriceListType;
    SHOW movementPriceSkuStock OBJECTS s = sku, st = stock ;
} ASON CONTEXTMENU updatePrice[Sku,Stock];

backgroundUpdate  = ABSTRACT CASE COLOR (Sku, Stock);

FORM updatePriceDashboard 'Обновление розничных цен'
    OBJECTS d = DepartmentStore PANEL
    PROPERTIES(d) name SELECTOR
    FILTERS isCompany(d)
    
    TREE skuGroupTree sg=SkuGroup PARENT parent(sg)
    PROPERTIES READONLY order(sg), name(sg)
    ORDERS order(sg), name(sg)
    FILTERGROUP sginactive FILTER 'Активные' active(sg) 'F5' DEFAULT

    OBJECTS sk = Sku
    PROPERTIES(sk) select
    PROPERTIES(sk) BACKGROUND backgroundUpdate(sk,d) READONLY idBarcode, id, name ON CONTEXTMENU showMovementSku(sk, d) ON CONTEXTMENU showMovementPriceSku(sk, d), shortNameUOM
    PROPERTIES(sk, d) READONLY currentBalance, updateDescription, updateFromDateTime, updatePrice, 
                      prevPriceLabelTransactionDetail,  transactionPrice BACKGROUND backgroundLastTransaction(sk, d)
    PROPERTIES(d) DRAW sk printSelectedSkuLabelTransaction, printSelectedSkuSnapshotLabelTransactionDepartmentStore, createSelectedSkuPriceTransactionDocument
    FILTERS isParent(sg, sk),
            isItem(sk)
    ORDERS name(sk)
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F5' DEFAULT
    FILTERGROUP diffPrice
        FILTER 'Ценники' updatePrice(sk, d) AND NOT updatePrice(sk, d) == prevPriceLabelTransactionDetail(sk, d) 'F11' 
        FILTER 'Оборудование' updatePrice(sk, d) AND barcode(sk) AND NOT updatePrice(sk, d) == transactionPrice(sk, d) 'F10'
        FILTER 'Ценники и оборуд.' updatePrice(sk, d) 
                                                            AND (NOT (updatePrice(sk, d) == prevPriceLabelTransactionDetail(sk, d)) OR 
                                                                 (barcode(sk) AND NOT updatePrice(sk, d) == transactionPrice(sk, d))) 'F9' DEFAULT 
                                                                 
    FILTERGROUP error
        FILTER 'С ошибками' quantityMachineryPriceTransactionError(lastTransaction(barcode(sk), d)) AND NOT
                                succeeded(lastTransaction(barcode(sk), d)) 'F6'                                                                  
                                                                 
    PROPERTIES() READONLY countSelectSkus SHOWIF countSelectSkus() DRAW sk
    
    OBJECTS p = Machinery.PriceTransactionDocument LAST
    PROPERTIES (p) READONLY isClosed, isPosted, date, time, series, number,
                nameLegalEntity, nameOperation, description, statusMachinery, statusLabel 
    PROPERTIES (p) SHOWIF showCreateMachineryPriceTransaction(p) createMachineryPriceTransaction, createSnapshotMachineryPriceTransaction
    PROPERTIES (p) SHOWIF  showPrintLabelTransaction(p) createLabelTransaction, createSnapshotLabelTransaction
    FILTERS d == stock(p)
    ORDERS date(p), time(p)
    FILTERGROUP succeeded
        FILTER 'Ценники' NOT skip(p) AND NOT printed(p) 'F11'
        FILTER 'Оборудование' NOT succeeded(p) AND NOT skip(p) 'F10'
        FILTER 'Ценники и оборуд.' (NOT succeeded(p) AND NOT skip(p) ) OR 
                (NOT skip(p) AND NOT printed(p)) 'F9' DEFAULT
    FILTERGROUP opened
        FILTER 'Открыт' NOT isClosed(p) DEFAULT
    FILTERGROUP posted
        FILTER 'Проведен' NOT isDraft(p) DEFAULT
    
    OBJECTS pd = Machinery.PriceTransactionDocumentDetail
    PROPERTIES (pd) READONLY idBarcodeSku, nameSku, quantity, price
    FILTERS priceTransactionDocument(pd) == p
                                                                                     
    EVENTS
        ON INIT initUseCurrentPrice()
;

@extendFormFilterStockAccess(d, updatePriceDashboard);

DESIGN updatePriceDashboard {
    NEW header {
        type = CONTAINERH;
        alignment = STRETCH;
        MOVE BOX(d) {
            MOVE PROPERTY(name(d));
            fill = 1;
        }
    }
    
    NEW pane{
        fill = 1;
        type = TABBED;
        NEW skuPane {
            caption = 'Товары';
            fill = 1;
            type = SPLITH;
            MOVE BOX(TREE skuGroupTree){
                width = 100;
            };
            MOVE BOX(sk) {
                width = 300;
                fill = 3;
            }
        }
        NEW docPane {
            caption = 'Документы';
            fill = 1;
            NEW docTop{
                fill = 1;
                MOVE BOX(p); 
            }
            NEW docBott{
                fill = 1;
                type = TABBED;
                NEW specif{
                    caption = 'Спецификация';
                    MOVE BOX(pd);
                }
                NEW action{
                    caption = 'Действия';
                    type =CONTAINERH;
                    
                    NEW machinery {                 
                        caption = 'Загрузки' ;
                        type = CONTAINERV;    
                                
                        MOVE PROPERTY (createMachineryPriceTransaction(p));
                        MOVE PROPERTY (createSnapshotMachineryPriceTransaction(p));
                    }
                    NEW label {
                        caption = 'Ценники' ;
                        type = CONTAINERV;
                        
                        MOVE PROPERTY (createLabelTransaction(p));
                        MOVE PROPERTY (createSnapshotLabelTransaction(p));
                    }
                }
            }
        }
    }
    MOVE TOOLBARBOX;
}
filterSupplier = DATA LOCAL LegalEntity (DepartmentStore);
nameFilterSupplier 'Поставщик' (DepartmentStore departmentStore) = name(filterSupplier(departmentStore));
filterSupplier (DepartmentStore departmentStore, Sku sku) = prevInSupplier(filterSupplier(departmentStore), sku) OR
                                              (sku IS Sku AND NOT filterSupplier(departmentStore));

EXTEND FORM updatePriceDashboard
    PROPERTIES nameFilterSupplier(d) 
    FILTERS    filterSupplier(d, sk)
    FILTERS legalEntity(p) == filterSupplier(d) OR NOT filterSupplier(d)
;
DESIGN updatePriceDashboard {
    header {
        
        NEW header1 {
            type = CONTAINERH;
            caption = 'Фильтр';
            MOVE PROPERTY (nameFilterSupplier(d));
        } 
    }    
}

NAVIGATOR { 
    purchaseDashboardNavigator {
        NEW updatePriceDashboard;
    }
}
