MODULE RetailPriceDashboardCompetitor;

REQUIRE Competitor, RetailPriceDashboard, Pricing;

NAMESPACE Competitor;

backgroundCompare (Competitor c, Sku sk, Stock d, DATETIME dt) = CASE
    WHEN currentOwn(sk,d,dt) <= price(c, sk, DATE (dt)) THEN RGB(204,255,204)
    WHEN currentOwn(sk,d,dt) > price(c, sk, DATE (dt)) THEN RGB(255,117,117);
    
showPromotionPrice 'Отображать акционную цену' = DATA BOOLEAN (Competitor);
EXTEND FORM competitor PROPERTIES showPromotionPrice(c);

header(Competitor c) = CONCAT '-', name(c), (GROUP MAX date(PriceList p) IF in(p, c) AND (GROUP SUM 1 IF p == priceList(PriceListDetail d))) ;

EXTEND FORM retailPriceDashboard
    
    OBJECTS c = Competitor
    PROPERTIES (c) SHOWIF NULL name, order 
    PROPERTIES price = price(c, sk, DATE (dt)) COLUMNS 'a' (c) HEADER header(c) BACKGROUND backgroundCompare(c, sk, d, dt)
    PROPERTIES promotionPrice = promotionPrice(c, sk, DATE (dt)) COLUMNS 'a' (c) HEADER header(c) + ' (акция)' SHOWIF showPromotionPrice(c)
    ORDERS order(c), name(c)
;

dateLastMoved 'Дата последнего движения' = DATA LOCAL DATE ();
step 'Шаг процента отклонения' = DATA LOCAL NUMERIC[5,2]();

price 'Цена' = DATA LOCAL NUMERIC[16,5](Sku);
price 'Цена конкурента' = DATA LOCAL NUMERIC[16,5](Sku, Competitor);

fillPrices 'Рассчитать' (DATE d, Stock st) {
    FOR Sku sk IS Sku AND (DATE (dateTimeLastMoved(sk, st)) <= dateLastMoved() OR NOT dateLastMoved()) AND step() DO {
        price(sk) <- retailPricingPriceA(sk, st, DATETIME (d));
        price(sk, Competitor c) <- price(c, sk, d);
    }
}

diffPercent 'Процент отклонения' (Competitor c, Sku sk) = round2((price(sk, c) - price(sk))/price(sk) * 100);

quantity (Competitor c, INTEGER i) = GROUP SUM 1 BY round0(diffPercent(c, Sku sk) / step());
quantity (INTEGER i) = GROUP SUM 1 IF quantity(Competitor c, i);

FORM competitorPriceAnalyze 'Анализ цен конкурентов'
    
    OBJECTS d = DATE PANEL, st = DepartmentStore PANEL
    PROPERTIES date 'Дата' = VALUE (d), name(st) SELECTOR, dateLastMoved(), fillPrices(d, st), step()
    
    OBJECTS i = INTEGER 
    FILTERS quantity(i)
    
    OBJECTS c = Competitor
    PROPERTIES READONLY name(c), quantity(c, i) COLUMNS (i) HEADER TEXT (step() * i) + '%'
    
    OBJECTS cc = Competitor
    OBJECTS sk = Sku
    PROPERTIES READONLY id(sk), idBarcode(sk), name(sk), price(sk), price(sk, cc) COLUMNS 'a' (cc) HEADER 'Цена ' + name(cc), 
                                             diffPercent(cc, sk) COLUMNS 'a' (cc) HEADER '% отклонения  ' + name(cc)
    FILTERS price(sk) OR (GROUP SUM 1 IF price(sk, Competitor r))
;

DESIGN competitorPriceAnalyze {
    OBJECTS {
        NEW header FIRST {
            caption = 'Параметры';
            horizontal = TRUE;
            MOVE PROPERTY (date) { alignment = CENTER; }
            MOVE PROPERTY (name(st)) { caption = 'Отдел магазина'; alignment = CENTER; }
            MOVE PROPERTY (dateLastMoved()) { alignment = CENTER; }
            MOVE PROPERTY (step()) { alignment = CENTER; }
            MOVE PROPERTY (fillPrices(d, st));
        }
        NEW boxes {
            horizontal = TRUE;
            fill = 1;
            MOVE BOX (c);
            MOVE BOX (sk);
        }
    }
}

NAVIGATOR {
    competitorPrices {
        NEW competitorPriceAnalyze;
    }
}