MODULE POS;

REQUIRE ZReportRetailCRM, ZReportRetailBonus, Dashboard, PaymentTerminal, CashOperationZReport, CashOperationCashRegister, ZReportBatch;

// ----------------------------- Расширяем форму отдела магазина нужными нам параметрами --------------------- //

usePriceList 'Использовать в POS вид цены напрямую' = DATA BOOLEAN (GroupCashRegister);
EXTEND FORM groupCashRegister
    PROPERTIES(grc) usePriceList
;

DESIGN groupCashRegister{
    topContainer{
        MOVE PROPERTY(usePriceList(grc));
    }
}
overCopy(GroupCashRegister old, GroupCashRegister new ) + {  usePriceList(new) <- usePriceList(old); }

// ----------------------------- Кассовый модуль ---------------- //

// Действия ФР
fiscalAdvancePaper 'Прогон ленты'  ABSTRACT LIST( );
fiscalCutReceipt 'Отрезать чек'  ABSTRACT LIST( );
fiscalPrintCopyReceipt 'Копия чека'()  ABSTRACT LIST ( );
fiscalCashSum 'Наличных в кассе'()  ABSTRACT LIST ( );

fiscalSkip 'Отключить ФР' (receipt) = DATA BOOLEAN (Receipt);

EXTEND FORM zReports PROPERTIES(b) READONLY fiscalSkip;

POSPriceListType (Receipt receipt) = OVERRIDE priceListType(discountCard(receipt)), priceListType(groupCashRegister(receipt)) COMPLEX;

cashDepartmentStore (Receipt r) = departmentStore(zReport(r)) PREREAD;

overPrice = ABSTRACT NUMERIC[16,4] (Sku, Receipt, DATETIME);

usePriceList (Receipt receipt) = usePriceList(groupCashRegister(receipt)) COMPLEX;
POSPrice 'Цена в кассе' (Sku sku, Receipt receipt, DATETIME dateTime) =
    IF usePriceList(receipt) THEN
        prevPriceA(POSPriceListType(receipt), sku, cashDepartmentStore(receipt), dateTime)
    ELSE
        overPrice(sku, receipt, dateTime);
currentPOSPrice 'Текущая цена' (Sku sku, Receipt receipt) = POSPrice(sku, receipt, currentDateTime());

overPrice = ABSTRACT NUMERIC[16,4] (Batch, Receipt, DATETIME);

POSPrice 'Цена в кассе' (Batch batch, Receipt receipt, DATETIME dateTime) =
    IF usePriceList(receipt) THEN
        prevPriceA(POSPriceListType(receipt), batch, cashDepartmentStore(receipt), dateTime)
    ELSE
        overPrice(batch, receipt, dateTime);
currentPOSPrice 'Текущая цена' (Batch batch, Receipt receipt) = POSPrice(batch, receipt, currentDateTime());
currentPOSPrice 'Текущая цена' (Batch batch, ReceiptDetail receiptDetail) = POSPrice(batch, receipt(receiptDetail), currentDateTime());

zReport = DATA ZReport (CashRegister);
numberZReport 'Текущий Z-отчет' (CashRegister r) = number(zReport(r));

EXTEND FORM groupCashRegister
    PROPERTIES(c) numberZReport
;

GROUP receiptZReport 'Z-отчет' : public;

currentZReport() = zReport(currentCashRegister());
zReport(Receipt r) <- currentZReport() WHEN SET(r IS Receipt);

numberCurrentZReport 'Номер текущего Z-отчета' () = number(currentZReport()) IN receiptZReport;

closedCurrentZReport() = NOT currentZReport();

// --------------------------------- Применение акций ----------------------------- //

// Накопленные суммы // Перенесены в модуль ZReportDiscountCard
//
//posSumDiscountCard 'Сумма продаж' (discountCard) = GROUP SUM sumReceiptDetailReceipt (receipt) BY discountCardReceipt(receipt) MATERIALIZED;
//posReturnSumDiscountCard 'Сумма возвратов' (discountCard) = GROUP SUM sumReceiptReturnDetail(d) IF NOT discountCardReceiptDetail(d) BY discountCardReceipt(receiptSaleReceiptReturnDetail(d)) MATERIALIZED; 
//cumulativeSumDiscountCard 'Накопленная сумма (основная)' (discountCard) = initialSumDiscountCard(discountCard) (+) posSumDiscountCard(discountCard) (-) posReturnSumDiscountCard(discountCard) MATERIALIZED;
//
//externalSumDiscountCard 'Дополнительные накопления' (discountCard) = ABSTRACT NUMERIC[18,4] (DiscountCard) MATERIALIZED;
//totalSumDiscountCard 'Накопленная сумма' (d) = cumulativeSumDiscountCard(d) (+) externalSumDiscountCard(d); 
//
//EXTEND FORM discountCards
//    PROPERTIES(d) READONLY AFTER initialSumDiscountCard(d) posSumDiscountCard, posReturnSumDiscountCard, cumulativeSumDiscountCard, externalSumDiscountCard, totalSumDiscountCard
//;
//
//prevTotalSumReceipt 'Накопленная сумма' (receipt) = OVERRIDE 0 IF receipt IS Receipt, [ PREV(totalSumDiscountCard(discountCard))](discountCardReceipt(receipt));
//totalSumReceiptPromotion (receipt, promotion) = IF useCurrentReceiptPromotion(promotion) THEN totalSumDiscountCard(discountCardReceipt(receipt))
//                                                                                         ELSE prevTotalSumReceipt (receipt);
// Расчет сумм скидок

setUserPromotion (receipt) = GROUP SUM 1 IF setUserPromotion (ReceiptSaleDetail receiptSaleDetail, PromotionCondition promotionCondition)  BY receipt (receiptSaleDetail);

promotionSum (ReceiptSaleDetail detail) = GROUP
    SUM promotionSum(detail, PromotionCondition condition) IF NOT useBonus(condition);

promotionDiscountSum (ReceiptSaleDetail detail) = GROUP
    SUM promotionSum(detail, PromotionCondition condition) IF NOT useBonus(condition);
promotionBonusSum (ReceiptSaleDetail detail) = GROUP
    SUM promotionSum(detail, PromotionCondition condition) IF useBonus(condition);

dataDate 'Дата документа' = DATA DATE (Receipt);
dataTime 'Время документа' = DATA TIME (Receipt);
dataDateTime 'Дата/время документа' (Receipt o) = dateTimeToDateTime(dataDate(o), dataTime(o));

overDate 'Дата документа' (Receipt r) = OVERRIDE dataDate(r), date(r);
overTime 'Время документа' (Receipt r) = OVERRIDE dataTime(r), time(r);
overDateTime 'Дата/время документа' (Receipt r) = OVERRIDE dataDateTime(r), dateTime(r);

overDate 'Дата документа' (ReceiptDetail d) = overDate(receipt(d));
overTime 'Время документа' (ReceiptDetail d) = overTime(receipt(d));
overDateTime 'Дата/время документа' (ReceiptDetail d) = overDateTime(receipt(d));

promotionSumReceipt = DATA LOCAL NUMERIC[16,4] () PREREAD;

skip (Promotion promotion) = DATA LOCAL BOOLEAN (Promotion);
inCalc (Receipt receipt, Promotion promotion) = in(promotion, store(receipt)) AND
    overDate(receipt) >= dateFrom(promotion) AND overDate(receipt) <= dateTo(promotion) AND
    NOT time(receipt) < timeOfFrom(promotion) AND NOT time(receipt) > timeOfTo(promotion) AND
    NOT (sumReceiptDetail(receipt) - (OVERRIDE promotionSumReceipt(), 0.0) + (OVERRIDE bonusPaidReceiptDetail(receipt), 0.0))  < minSumBill(promotion) AND NOT (sumReceiptDetail(receipt) - (OVERRIDE promotionSumReceipt(), 0.0) + (OVERRIDE bonusPaidReceiptDetail(receipt), 0.0)) > maxSumBill(promotion)
    AND NOT skip(promotion, extractDOW(overDate(receipt)))
    AND NOT totalSum (receipt, promotion) < minCumulativeSum(promotion) AND NOT totalSum (receipt, promotion) > maxCumulativeSum(promotion)
    AND NOT (hasDiscountCard(promotion) AND NOT in(promotion, discountCard(receipt)))
    AND NOT (noDiscountCard(promotion) AND discountCard(receipt)) COMPLEX;

in (Receipt receipt, Promotion promotion) = inCalc(receipt, promotion) AND NOT skip(promotion);

inReceiptSale (ReceiptDetail receiptDetail, PromotionCondition promotionCondition) =
    in(receipt(receiptDetail), promotion(promotionCondition))
        AND in(promotionCondition, receiptDetail);

//maxSalePriceReceiptSku (receipt, sku) = GROUP MAX priceReceiptSaleDetail(detail) BY receiptReceiptSaleDetail(detail), skuReceiptSaleDetail(detail);

skipAllPromotion 'Запретить скидки' = ABSTRACT BOOLEAN (ReceiptSaleDetail);

isAppliedPromotion 'Акция применяется' (ReceiptSaleDetail receiptSaleDetail, PromotionCondition promotionCondition) =
    CASE WHEN promotionCondition IS PromotionCondition AND skipAllPromotion(receiptSaleDetail) THEN NULL
        WHEN userSet(promotionCondition) THEN setUserPromotion(receiptSaleDetail, promotionCondition)
        ELSE receiptSaleDetail IS ReceiptSaleDetail AND promotionCondition IS PromotionCondition;

// оптимизация
possible = GROUP SUM 1 IF in(PromotionCondition promotionCondition, ReceiptSaleDetail detail) IF quantity(detail) BY receipt(detail), promotion(promotionCondition);

beforeCalculatePromotions  ABSTRACT LIST ( Receipt);
overCalculatePromotions  ABSTRACT LIST ( Receipt);
overCalculatePromotion  ABSTRACT LIST (ReceiptSaleDetail,PromotionCondition,NUMERIC[14,3],NUMERIC[16,3]);
calculatePromotions 'Рассчитать акции'(Receipt receipt)  {

    quantity(ReceiptSaleDetail detail, PromotionCondition condition) <- NULL WHERE receipt(detail) == receipt;
    promotionSum(ReceiptSaleDetail detail, PromotionCondition condition) <- NULL WHERE receipt(detail) == receipt;
    discountSum(ReceiptSaleDetail detail) <- NULL WHERE receipt(detail) == receipt;

    //    LOCAL maxSalePriceSku = NUMERIC[16,4] (Sku);
    //    maxSalePriceSku(sku) <- maxSalePriceReceiptSku(receipt, sku);

    beforeCalculatePromotions(receipt);

    FOR PromotionGroup promotionGroup IS PromotionGroup AND active(promotionGroup) ORDER order (promotionGroup) DO {
        //        LOCAL leftSku = NUMERIC[14,3] (Sku);
        //        leftSku(sku) <- quantityReceiptSaleDetailSkuReceipt (sku, receipt);   //'Кол-во товара в документе'
        promotionSumReceipt() <- GROUP SUM promotionSum(ReceiptSaleDetail rd) IF receipt(rd) = receipt;
        LOCAL leftQuantity = NUMERIC[14,3] (ReceiptSaleDetail);
        leftQuantity(ReceiptSaleDetail detail) <- quantity(detail) WHERE receipt(detail) == receipt;

        LOCAL leftSum = NUMERIC[16,3] (ReceiptSaleDetail);
        leftSum(ReceiptSaleDetail detail) <- (priceSum(detail) (-) promotionSum(detail)) WHERE receipt(detail) == receipt;

        FOR promotionGroup(Promotion promotion) == promotionGroup AND in(receipt, promotion) AND possible(receipt, promotion) ORDER order(promotion) DO {
            LOCAL quantity = NUMERIC[14,3] (PromotionCondition);
            quantity(PromotionCondition promotionCondition) <- (GROUP
                SUM leftQuantity(ReceiptSaleDetail detail)
                    IF in(promotionCondition, detail)) IF
                promotion(promotionCondition) == promotion;

            LOCAL sum = NUMERIC[20,5] (PromotionCondition);
            sum(PromotionCondition promotionCondition) <- (GROUP
                SUM leftQuantity(ReceiptSaleDetail detail) * price(detail)
                    IF in(promotionCondition, detail)) IF
                promotion(promotionCondition) == promotion;

            LOCAL count = NUMERIC[14,3] (PromotionCondition);
            count(PromotionCondition promotionCondition) <- INTEGER (MIN floor(NUMERIC[14,3](quantity (promotionCondition) / minQuantity (promotionCondition))),
                floor(NUMERIC[14,3](sum(promotionCondition) / minSum(promotionCondition))));

            LOCAL countPromotion = INTEGER ();
            countPromotion () <- (GROUP MIN count(PromotionCondition promotionCondition));

            // Если все условия сработали хотя бы один раз
            IF countPromotion() > 0 AND (GROUP SUM 1 IF count(PromotionCondition promotionCondition) > 0) == countPromotionCondition(promotion) THEN {
                //
                // Считаем сколько раз должны применить условие
                LOCAL taken = NUMERIC[14,3] (PromotionCondition);
                taken(PromotionCondition promotionCondition) <- IF quantityDiscount(promotionCondition) THEN
                                                                  min(countPromotion() * quantityDiscount(promotionCondition), quantity(promotionCondition))
                    ELSE
                    quantity(promotionCondition);

                LOCAL use = NUMERIC[14,3] (PromotionCondition);
                IF useAllQuantity(promotion) THEN {
                    use(PromotionCondition promotionCondition) <- min(countPromotion() * minQuantity(promotionCondition), quantity(promotionCondition));
                }

                // Размазываем его по "Sku"
                //                LOCAL takenSkuPromotionCondition = NUMERIC[14,3] (Sku, PromotionCondition);
                //                takenSkuPromotionCondition(sku, promotionCondition) <- [ PARTITION UNGROUP takenPromotionCondition
                //                                                                                  LIMIT leftSku (sku)
                //                                                                                        IF inPromotionConditionSku(promotionCondition, sku)
                //                                                                                  BY promotionCondition
                //                                                                                  ORDER maxSalePriceSku(sku), sku] (sku, promotionCondition);

                // Размазываем его по строкам чека
                LOCAL taken = NUMERIC[14,3] (ReceiptSaleDetail, PromotionCondition);
                LOCAL use = NUMERIC[14,3] (ReceiptSaleDetail, PromotionCondition);

                CASE
                    //-- начиная с самой дешевой и по умолчанию                                                                                  
                    WHEN orderPromotionType(promotion) == OrderPromotionType.ascending OR (promotion IS Promotion AND NOT orderPromotionType(promotion)) THEN {

                        taken (ReceiptSaleDetail detail, PromotionCondition condition) <- (PARTITION UNGROUP taken
                            LIMIT leftQuantity(detail)
                                IF in(condition, detail)
                                    AND isAppliedPromotion(detail, condition)
                            ORDER leftSum(detail)/quantity(detail), detail
                            BY condition);
                        IF useAllQuantity(promotion) THEN {
                            use (ReceiptSaleDetail detail, PromotionCondition condition) <- (PARTITION UNGROUP use
                                LIMIT leftQuantity(detail)
                                    IF in(condition, detail)
                                        AND isAppliedPromotion(detail, condition)
                                ORDER leftSum(detail)/quantity(detail), detail
                                BY condition);
                        }
                    }
                    //-- начиная с самой дорогой
                    WHEN orderPromotionType(promotion) == OrderPromotionType.descending  THEN {
                        taken (ReceiptSaleDetail detail, PromotionCondition condition) <- (PARTITION UNGROUP taken
                            LIMIT leftQuantity(detail)
                                IF in(condition, detail)
                                    AND isAppliedPromotion(detail, condition)
                            ORDER DESC leftSum(detail)/quantity(detail), detail
                            BY condition);
                        IF useAllQuantity(promotion) THEN {
                            use (ReceiptSaleDetail detail, PromotionCondition condition) <- (PARTITION UNGROUP use
                                LIMIT leftQuantity(detail)
                                    IF in(condition, detail)
                                        AND isAppliedPromotion(detail, condition)
                                ORDER DESC leftSum(detail)/quantity(detail), detail
                                BY condition);
                        }
                    }
                    //-- по позиции в чеке
                    WHEN orderPromotionType(promotion) == OrderPromotionType.index THEN {
                        taken (ReceiptSaleDetail detail, PromotionCondition condition) <- (PARTITION UNGROUP taken
                            LIMIT leftQuantity(detail)
                                IF in(condition, detail)
                                    AND isAppliedPromotion(detail, condition)
                            ORDER detail
                            BY condition);
                        IF useAllQuantity(promotion) THEN {
                            use (ReceiptSaleDetail detail, PromotionCondition condition) <- (PARTITION UNGROUP use
                                LIMIT leftQuantity(detail)
                                    IF in(condition, detail)
                                        AND isAppliedPromotion(detail, condition)
                                ORDER detail
                                BY condition);
                        }
                    }
                // Считаем сколько товара использовали из каждой строки чека
                LOCAL taken = NUMERIC[14,3] (ReceiptSaleDetail);
                IF useAllQuantity(promotion) THEN {
                    taken(ReceiptSaleDetail detail) <- (GROUP SUM use(detail, PromotionCondition condition));
                } ELSE {
                    FOR promotion(PromotionCondition condition) == promotion AND PriceListType pt == priceListType(condition) NOINLINE (pt) DO {
                        taken(ReceiptSaleDetail detail, condition) <- NULL WHERE priceListType(condition) == pt AND NOT prevPriceA(pt, sku(detail), departmentStore(detail), overDateTime(detail)) != price(detail);
                    }
                    taken(ReceiptSaleDetail detail) <- (GROUP SUM taken(detail, PromotionCondition condition));
                }

                // Считаем сколько использовали каждый товар
                //                LOCAL takenSku = NUMERIC[14,3] (Sku);
                //                takenSku(sku) <- [ GROUP SUM takenReceiptSaleDetail(detail) BY skuReceiptSaleDetail(detail)] (sku);

                IF useAllQuantity(promotion) THEN
                    quantity(ReceiptSaleDetail detail, PromotionCondition condition) <- use(detail, condition)
                        WHERE use(detail, condition);
                ELSE
                    quantity(ReceiptSaleDetail detail, PromotionCondition condition) <- taken(detail, condition)
                        WHERE taken(detail, condition);


                // считаем остатки суммы по скидки на чек
                LOCAL leftSum = NUMERIC[16,3] (PromotionCondition);
                leftSum(PromotionCondition c) <- OVERRIDE sumReceiptDiscount(c), (GROUP SUM leftSum(ReceiptSaleDetail detail) * taken(detail, c) / leftQuantity(detail)) - sumReceipt(c) * count(c);
                leftSum(PromotionCondition c) <- NULL WHERE leftSum(c) <= 0.0;

                promotionSum (ReceiptSaleDetail detail, PromotionCondition condition) <-
                    PARTITION UNGROUP leftSum
                        PROPORTION STRICT ROUND(2) leftSum(detail) IF taken(detail, condition)
                        ORDER detail
                        BY condition
                    WHERE taken(detail, condition) AND (sumReceipt(condition) OR sumReceiptDiscount(condition));

                promotionSum (ReceiptSaleDetail detail, PromotionCondition condition) <-
                    CASE WHEN sumDiscount(condition) THEN taken(detail, condition) * sumDiscount(condition)
                        WHEN resultPrice(condition, sku(detail)) THEN taken(detail, condition) * (leftSum(detail) / quantity(detail) - resultPrice(condition, sku(detail)))
                        WHEN resultPrice(condition) THEN taken(detail, condition) * (leftSum(detail) / quantity(detail) - resultPrice(condition))
                        WHEN priceListType(condition) THEN taken(detail, condition) * (price(detail) - prevPriceA(priceListType(condition), sku(detail), departmentStore(detail), overDateTime(detail)))
                        WHEN condition IS PromotionCondition THEN taken(detail, condition) * ((leftSum(detail) (-) (bonusPaid(detail) IF useBonus(condition))) / quantity(detail) * percent(condition) / 100)
                    WHERE taken(detail, condition) AND NOT sumReceipt(condition) AND NOT sumReceiptDiscount(condition);

                FOR taken(ReceiptSaleDetail detail, PromotionCondition condition) AND NOT sumReceipt(condition) AND NOT sumReceiptDiscount(condition) DO
                    overCalculatePromotion(detail, condition,taken(detail, condition),leftSum(detail));

                // Отнимаем использованные
                leftQuantity(ReceiptSaleDetail detail) <- leftQuantity(detail) (-) taken(detail);
                //                leftSku(sku) <- leftSku(sku) (-) takenSku(sku);
            }
        }
        promotionSumReceipt() <- NULL;
    }

    discountSum(ReceiptSaleDetail detail) <- round(promotionDiscountSum(detail), roundDiscountCondition(departmentStore(detail))) WHERE receipt(detail) == receipt;
    discountSum(ReceiptSaleDetail detail) <- calcDiscountSum(detail) WHERE detail IS ReceiptSaleDetail AND receipt(detail) == receipt AND discountPercent(detail) AND NOT promotionSum(detail);

    IF useBonus() THEN
        bonusSum(ReceiptSaleDetail detail) <- round(promotionBonusSum(detail), roundDiscountCondition(departmentStore(detail))) WHERE receipt(detail) == receipt;

    overCalculatePromotions(receipt);
}

WHEN LOCAL FORMS zReport
    CHANGED(discountCard(Receipt r)) DO {
    calculatePromotions(r);
    //        bonusSum(ReceiptSaleDetail detail) <- round(promotionBonusSum(detail), roundDiscountCondition(departmentStore(detail))) WHERE receipt(detail) == r AND useBonus();    
    bonusSum(ReceiptReturnDetail detail) <- bonusSum(overReceiptSaleDetail(detail)) WHERE receipt(detail) == r AND useBonus();
}

// Операции с чеками

createCurrentReceipt 'Создать новый чек'()  {
    NEW r = Receipt {
        seek(r);
        number(r) <- maxNumberReceipt(currentZReport()) (+) 1;
    }
}

// Вывод на дисплей

fiscalDisplayText 'Вывести текст на дисплей'(receiptDetail)  ABSTRACT LIST ( ReceiptDetail);

//Отмена чека

fiscalCancel 'Отменить чек'  ABSTRACT LIST( Receipt);

// Проведение чека

allowZeroSumReceipt 'Печатать чеки с 0 суммой' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES () allowZeroSumReceipt
;
DESIGN options {
    pane {
        NEW pos {
            caption = 'POS';
            MOVE PROPERTY (allowZeroSumReceipt());
        }
    }
}

GROUP receiptAction 'Оплата' : public;

postPrint 'Напечатать фискальный чек'  ABSTRACT LIST ( Receipt);
noFiscalPostPrint 'Создать чек (без фискального регистратора)'(Receipt receipt)  {
    IF receipt IS Receipt THEN {
        apply();
        IF NOT canceled() THEN
            createCurrentReceipt();
    }
}
postPrint(Receipt receipt) + {  IF NOT sidCashRegisterModel(receipt) THEN noFiscalPostPrint(receipt); }

// Оплата через платежный терминал
paymentTerminalModel (Receipt receipt) = paymentTerminalModel(cashRegister(receipt));
sidPaymentTerminalModel 'Код модели' (Receipt receipt) = sid(paymentTerminalModel(receipt));

postPaymentTerminal 'Оплата через платёжный терминал'  ABSTRACT LIST ( Receipt);
postPaymentTerminalReceiptResult = DATA LOCAL STRING[100] ();

FORM postReceiptPayment 'Оплата по чеку'
    OBJECTS r = Receipt PANEL
    PROPERTIES(r) READONLY sumReceiptDetail, changePayment

    OBJECTS p = Payment GRID
    PROPERTIES(p) sum, namePaymentType READONLY
    FILTERS receipt(p) == r
;

DESIGN postReceiptPayment {

    MOVE BOX(p) {
        fill = 1;
        GRID(p) {
            defaultComponent = TRUE;
            height = 220;
        }
        PROPERTY(sum(p)) { pattern = '#,##0.00'; font = 'bold 36'; }
        PROPERTY(namePaymentType(p)) { charWidth = 12; focusable = FALSE; font = 'bold 36'; }
        REMOVE TOOLBARLEFT(p);
    }
    NEW south {
        alignment = STRETCH;
        horizontal = TRUE;
        MOVE PROPERTY(sumReceiptDetail(r)) { pattern = '#,##0.00'; charWidth = 8; panelCaptionVertical = TRUE; focusable = FALSE; font = 'bold 64'; }
        MOVE PROPERTY(changePayment(r)) { pattern = '#,##0.00'; charWidth = 8; panelCaptionVertical = TRUE; focusable = FALSE; font = 'bold 64'; }
        MOVE TOOLBARRIGHT {
            fill = 1;
            horizontal = FALSE;
            PROPERTY(formOk()) {
                fill = 1;
                font = 'bold 28';
            }
            PROPERTY(formClose()) {
                fill = 1;
                font = 'bold 28';
            }
        }
    }
    REMOVE TOOLBARLEFT;
    REMOVE PROPERTY(formRefresh());
}

allowPaymentGiftCard = DATA LOCAL BOOLEAN();

prePost(Receipt receipt)  {
    allowPaymentGiftCard() <- TRUE;
    DELETE Payment payment WHERE receipt(payment) == receipt;
    date(receipt) <- currentDate();
    time(receipt) <- currentTime();
}

incorrectReceipt = ABSTRACT CASE TEXT (Receipt);

overPostCash  ABSTRACT LIST ( Receipt);
overPostCard  ABSTRACT LIST ( Receipt);
prePostPrint  ABSTRACT LIST ( Receipt);
afterPostPrint  ABSTRACT LIST ( Receipt);
overCreatePayment ABSTRACT LIST ( Receipt);
returnPost = DATA LOCAL BOOLEAN();

post 'Смешанная'(Receipt receipt)  {
    returnPost()<- NULL;
    IF (bonusPaid(receipt) OR bonusSum(receipt)) AND NOT discountCard(receipt) AND NOT [GROUP SUM 1 IF discountCard(ReceiptReturnDetail d) BY receipt(d)](receipt) THEN {
        MESSAGE 'Выберите дисконтную карту';
        RETURN;
    }
    IF signedBonusPaid(receipt) AND NOT (OVERRIDE totalBonuses(receipt), 0.0) >= signedBonusPaid(receipt) THEN {
        MESSAGE 'Нельзя оплачивать бонусами больше, чем доступно бонусов на дисконтной карте';
        RETURN;
    }
    IF incorrectReceipt(receipt) THEN {
        MESSAGE incorrectReceipt(receipt);
        RETURN;
    }
    prePost(receipt);
    overPostCash(receipt);
    IF returnPost() THEN RETURN;

    IF sumReceiptDetail(receipt) OR (allowZeroSumReceipt() AND quantityReceiptDetail(receipt)) THEN {
        NEW p = Payment {
            receipt(p) <- receipt;
            paymentType(p) <- minCashPaymentType();
        }
        NEW p = Payment {
            receipt(p) <- receipt;
            paymentType(p) <- minCardPaymentType();
        }
        overCreatePayment(receipt);
        LOCAL printed = BOOLEAN();
        printed() <- NULL;
        DIALOG postReceiptPayment OBJECTS r = receipt CHECK DO {
            postPaymentTerminal(receipt);
            IF NOT postPaymentTerminalReceiptResult() THEN {
                prePostPrint(receipt);
                IF returnPost() THEN RETURN;
                postPrint(receipt);
                afterPostPrint(receipt);
                printed() <- TRUE;
            } ELSE {
                MESSAGE postPaymentTerminalReceiptResult();
            }
        }
        IF NOT printed() THEN {
            DELETE Payment p WHERE receipt(p) == receipt;
        }
    }
} CHANGEKEY 'F9' IN receiptAction;

postCard 'Карточкой'(Receipt receipt)  {
    returnPost()<- NULL;
    IF (bonusPaid(receipt) OR bonusSum(receipt)) AND NOT discountCard(receipt) AND NOT [GROUP SUM 1 IF discountCard(ReceiptReturnDetail d) BY receipt(d)](receipt) THEN {
        MESSAGE 'Выберите дисконтную карту';
        RETURN;
    }
    IF signedBonusPaid(receipt) > 0 AND NOT (OVERRIDE totalBonuses(receipt), 0.0) >= signedBonusPaid(receipt) THEN {
        MESSAGE 'Нельзя оплачивать бонусами больше, чем доступно бонусов на дисконтной карте';
        RETURN;
    }
    IF incorrectReceipt(receipt) THEN {
        MESSAGE incorrectReceipt(receipt);
        RETURN;
    }

    prePost(receipt);
    overPostCard(receipt);
    IF returnPost() THEN RETURN;

    IF sumReceiptDetail(receipt) OR (allowZeroSumReceipt() AND quantityReceiptDetail(receipt)) THEN {
        NEW p = Payment {
            receipt(p) <- receipt;
            paymentType(p) <- minCardPaymentType();
            sum(p) <- OVERRIDE sumReceiptDetail(receipt), 0.0;
        }
        postPaymentTerminal(receipt);
        IF NOT postPaymentTerminalReceiptResult() THEN {
            prePostPrint(receipt);
            postPrint(receipt);
            afterPostPrint(receipt);
        } ELSE {
            MESSAGE postPaymentTerminalReceiptResult();
        }
    }

} CHANGEKEY 'F10' CONFIRM IN receiptAction;

postCash 'Наличными'(Receipt receipt)  {
    returnPost()<- NULL;
    IF (bonusPaid(receipt) OR bonusSum(receipt)) AND NOT discountCard(receipt) AND NOT [GROUP SUM 1 IF discountCard(ReceiptReturnDetail d) BY receipt(d)](receipt) THEN {
        MESSAGE 'Выберите дисконтную карту';
        RETURN;
    }
    IF signedBonusPaid(receipt) AND NOT (OVERRIDE totalBonuses(receipt), 0.0) >= signedBonusPaid(receipt) THEN {
        MESSAGE 'Нельзя оплачивать бонусами больше, чем доступно бонусов на дисконтной карте';
        RETURN;
    }
    IF incorrectReceipt(receipt) THEN {
        MESSAGE incorrectReceipt(receipt);
        RETURN;
    }

    prePost(receipt);
    overPostCash(receipt);
    IF returnPost() THEN RETURN;

    IF sumReceiptDetail(receipt) OR (allowZeroSumReceipt() AND quantityReceiptDetail(receipt)) THEN {
        NEW p = Payment {
            receipt(p) <- receipt;
            paymentType(p) <- minCashPaymentType();
            sum(p) <- OVERRIDE sumReceiptDetail(receipt), 0.0;
        }
        LOCAL printed = BOOLEAN();
        printed() <- NULL;
        DIALOG postReceiptPayment OBJECTS r = receipt CHECK DO {
            prePostPrint(receipt);
            postPrint(receipt);
            afterPostPrint(receipt);
            printed() <- TRUE;
        }
        IF NOT printed() THEN
            DELETE Payment p WHERE receipt(p) == receipt;
    }
} CHANGEKEY 'F11' IN receiptAction;

//Оплата бонусами

toPayBonuses 'Оплатить бонусами' = DATA LOCAL NUMERIC[18,4] (Receipt);

changeToPayBonuses (Receipt r)  {
    INPUT n = NUMERIC[18,4] DO
        IF n THEN {
            bonusPaid(ReceiptSaleDetail detail) <- NULL WHERE receipt(detail) == r;
            CASE WHEN n < 0.0 THEN
            MESSAGE 'Сумма бонусов не может быть отрицательной';
                WHEN sumReceiptDetail(r) (-) minBonusSum() * countReceiptDetail(r) < round(n, roundCondition(departmentStore(r))) THEN
                MESSAGE 'Сумма бонусов должна быть меньше или ровна сумме чека';
                WHEN NOT round(n, roundCondition(departmentStore(r))) <= prevTotalBonuses(discountCard(r)) THEN
                MESSAGE 'Сумма используемых бонусов не может превышать суммы накопленных';
                ELSE toPayBonuses(r) <- round(n, roundCondition(departmentStore(r)));
        } ELSE {
            toPayBonuses(r) <- NULL;
        }
}

sumBonusFIFOReceiptSaleDetail (ReceiptSaleDetail detail) =
    PARTITION UNGROUP toPayBonuses
        PROPORTION STRICT ROUND(2) min((sum(detail) (-) minBonusSum()), ((sum(detail) (-) minBonusSum())/(sumReceiptDetail(detail) (-) minBonusSum()*countReceiptDetail(receipt(detail))))) IF sum(detail) > minBonusSum()
        ORDER detail
        BY receipt(detail);
//    PARTITION UNGROUP toPayBonuses
//        LIMIT min((sum(detail) (-) minBonusSum()), round(toPayBonuses(receipt(detail)) * sum(detail) / sumReceiptDetail(detail), roundCondition(departmentStore(receipt(detail)))))
//        BY receipt(detail)
//        ORDER detail; 

bonusBackground (DiscountCard d) = RGB(255,128,128) IF NOT totalBonuses(d) >= 0.0;

FORM bonusPayment 'Оплата бонусами'
    OBJECTS r = Receipt PANEL
    PROPERTIES(r) toPayBonuses ON CHANGE changeToPayBonuses(r)

    OBJECTS d = DiscountCard PANEL
    PROPERTIES(d) READONLY BACKGROUND bonusBackground(d) prevTotalBonuses DRAW r
;

DESIGN bonusPayment {
    NEW topContainer {
        horizontal = TRUE;
        MOVE PROPERTY(toPayBonuses(r)){
            pattern = '#,##0.00';
            font = 'bold 48';
            panelCaptionVertical = TRUE;
        }
        MOVE PROPERTY(prevTotalBonuses(d)){
            pattern = '#,##0.00';
            font = 'bold 48';
            panelCaptionVertical = TRUE;
        }
    }
    REMOVE BOX(d);
    MOVE TOOLBARBOX;
}

overPostBonus  ABSTRACT LIST( Receipt);
overPostBonusExtra  ABSTRACT LIST ( Receipt);
postBonus 'Бонусами'(Receipt receipt) {
    returnPost()<- NULL;
    overPostBonusExtra(receipt);
    IF returnPost() THEN RETURN;

    IF sumReceiptDetail(receipt) AND countReceiptDetail(receipt) AND NOT countReceiptReturnDetail(receipt) THEN {
        DIALOG bonusPayment OBJECTS d = discountCard(receipt), r = receipt NOMANAGESESSION DO {
            bonusPaid(ReceiptSaleDetail detail) <- NULL WHERE receipt(detail) == receipt;
            bonusPaid(ReceiptSaleDetail detail) <- sumBonusFIFOReceiptSaleDetail(detail) WHERE receipt(detail) == receipt;
            overPostBonus(receipt);
        }
    }
} CHANGEKEY 'F8' IN receiptAction;

resetBoard 'Сбросить текст на дисплее'  ABSTRACT LIST( Receipt);
overCancelReceipt = ABSTRACT CASE BOOLEAN (Receipt);

overCancel ABSTRACT (Receipt);
cancel 'Обнулить'(Receipt receipt)  {
    resetBoard(receipt);
    overCancel(receipt);
    IF sumReceiptDetail(receipt) OR quantityReceiptDetail(receipt) OR overCancelReceipt(receipt) THEN {
        cancel();
        createCurrentReceipt();
    }
    fiscalCancel(receipt);
} CHANGEKEY 'shift F11' CONFIRM IN receiptAction;

// Операции по добавлению строк в чек

// Продажи
FORM chooseBatchReceipt 'Выбор партии'
    OBJECTS st = DepartmentStore PANEL
    OBJECTS d = ReceiptDetail PANEL

    OBJECTS bt = Batch
    PROPERTIES(bt) READONLY dateTime, documentNameSku, name
    PROPERTIES(bt, st) READONLY prevCurrentBalance
    PROPERTIES(bt, d) READONLY currentPOSPrice
    ORDERS dateTime(bt) DESC
    FILTERS sku(bt) == sku(d),
        currentPOSPrice(bt, d)
    FILTERGROUP balance
        FILTER 'Партии с остатком' prevCurrentBalance(bt, st) 'F10' DEFAULT

;

overChangeBatch  ABSTRACT LIST ( ReceiptDetail);
overCreateSaleDetail ABSTRACT LIST ( ReceiptDetail);
changeBatch 'Изменить партию строки чека'(ReceiptDetail detail)  {
    IF explicitBatchLedger(receipt(detail)) THEN {
        DIALOG chooseBatchReceipt OBJECTS st = departmentStore(detail), d = detail, bt = batch(detail) INPUT NULL DO{
            batch(detail) <- bt;
            price[ReceiptSaleDetail](detail) <- currentPOSPrice[Batch,Receipt](bt, receipt(detail));
        }
        overChangeBatch(detail);
    }
}

focusQuantity  ABSTRACT LIST ( ReceiptDetail);

createSaleDetail 'Добавить строку продажи'(Receipt receipt, Batch batch, STRING[30] barcode)  {
    NEW d = ReceiptSaleDetail {
        receipt(d) <- receipt;
        idBarcode(d) <- barcode;
        sku(d) <- sku(batch);
        quantity(d) <- 1.0;
        //        VATReceiptSaleDetail(d) <- VATSkuStockDate(skuBatch(batch), departmentStoreReceipt(receipt), currentDate());
        batch(d) <- batch;
        price(d) <- currentPOSPrice(batch, receipt);
        focusQuantity(d);
        overCreateSaleDetail(d);
    }
}

countBatch (sk, Stock st, Receipt r) = GROUP SUM 1
    IF (currentBalance(Batch batch, st) (-)
        [ GROUP SUM quantity(ReceiptSaleDetail d)
        BY batch(d), receipt(d)] (batch, r)) > 0
BY sku(batch);
defaultBatch 'Партия по умолчанию' (sku, Stock stock, Receipt receipt) =
    GROUP MIN Batch batch IF (currentBalance(batch, stock) (-)
        [ GROUP SUM quantity(ReceiptSaleDetail d)
        BY batch(d), receipt(d)] (batch, receipt)) > 0
    BY sku(batch);

setSaleDetailBatch (ReceiptSaleDetail d, Receipt receipt) {
    IF countBatch(sku(d), departmentStore(receipt(d)), receipt) == 1 THEN {
        batch(d) <- defaultBatch(sku(d), departmentStore(receipt(d)), receipt);
        price(d) <- currentPOSPrice(batch(d), receipt[ReceiptDetail](d));
    } ELSE {
        LOCAL created = BOOLEAN();
        created() <- NULL;
        DIALOG chooseBatchReceipt OBJECTS st = departmentStore[ReceiptDetail](d), d = d, bt INPUT DO {
            batch(d) <- bt;
            price(d) <- currentPOSPrice[Batch,Receipt](bt, receipt[ReceiptDetail](d));
            calculatePromotions(receipt);
            created() <- TRUE;
        }
        IF NOT created() THEN
            DELETE d;
    }
}

createSaleDetail 'Добавить строку продажи'(Receipt receipt, Sku sku, STRING[30] barcode)  {
    NEW d = ReceiptSaleDetail {
        receipt(d) <- receipt;
        idBarcode(d) <- barcode;
        sku(d) <- sku;
        quantity(d) <- 1.0;
        price(d) <- currentPOSPrice(sku, receipt);
        //        VATReceiptSaleDetail(d) <- VATSkuStockDate(sku, departmentStoreReceipt(receipt), currentDate());
        focusQuantity(d);
        IF explicitBatchLedger(receipt(d)) AND NOT skuType(sku(d)) = SkuType.skuTypeCharge THEN {
            setSaleDetailBatch(d, receipt);
        }
        overCreateSaleDetail(d);
        overChangeBatch(d);
    }
}

GROUP receiptSaleAction 'Продажа' : public;

// По штрихкоду
initialBarcode = DATA LOCAL STRING[200] ();

consumedChangeBarcodeSaleReceipt = DATA LOCAL BOOLEAN();
preProcessBarcode  ABSTRACT LIST (STRING[200], Receipt);
overChangeBarcodeSale  ABSTRACT LIST FIRST (STRING[200], Receipt);

recordLogScanPos 'Записывать лог скана в POS' = DATA BOOLEAN ();//временно

changeBarcodeSale(Receipt receipt)  {
    INPUT s = STRING[200] DO {
        IF recordLogScanPos() THEN{
            printToLog(CONCAT ' ', 'POSLogScan: ', s);
        }
        consumedChangeBarcodeSaleReceipt() <- NULL;
        LOCAL barcode = STRING[30] ();
        barcode() <- processedBarcode(s);
        initialBarcode() <- s;
        preProcessBarcode(barcode(), receipt);
        overChangeBarcodeSale(barcode(), receipt);
        IF NOT consumedChangeBarcodeSaleReceipt() THEN{
            LOCAL dialogBarcodeSku = Sku();
            dialogBarcodeSku() <- skuBarcode(barcode(), currentDate());
            IF dialogBarcodeSku() IS Sku THEN {
                IF active(dialogBarcodeSku()) THEN {
                    createSaleDetail(receipt, dialogBarcodeSku(), barcode());
                } ELSE {
                    MESSAGE CONCAT ' ', name(dialogBarcodeSku()), '(' + barcode() + ')', ' запрещен к продаже';
                }

            } ELSE
                MESSAGE CONCAT ' ', 'Не найден штрихкод', barcode(), '(' + s + ')';
        }
    }
}

overFilterSearch = ABSTRACT BOOLEAN (Sku, Stock);

filterSearchSale = prevCurrentBalance(Sku s, Stock st)
    OR (currentPOSPrice(s, Receipt r) AND skuType[Item](s) == SkuType.skuTypeCharge)
    OR overFilterSearch(s, st);

// Поиск подбором SKU
FORM searchSkuSaleReceipt 'Поиск SKU'
    OBJECTS st = DepartmentStore PANEL
    OBJECTS r = Receipt PANEL

    TREE skuTree sk = SkuGroup PARENT parent(sk)
    PROPERTIES READONLY skuTreeName = name(sk, st)
    ORDERS skuTreeName
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F6' DEFAULT

    OBJECTS           s = Sku GRID
    PROPERTIES        READONLY name(s)
    PROPERTIES(s, st) READONLY prevCurrentBalance
    PROPERTIES(s, r)  READONLY currentPOSPrice
    PROPERTIES        READONLY idBarcode(s)
    FILTERS           isParent(sk, s),
        name(s)
    ORDERS          name(s)

    FILTERGROUP filters
        FILTER 'Доступные для продажи' filterSearchSale(s, st, r) 'F10' DEFAULT

    FILTERGROUP inactiveSku FILTER 'Активные' active(s) 'F11' DEFAULT

;

DESIGN searchSkuSaleReceipt {
    BOX {
        size = (1280, 768);
        NEW top BEFORE TOOLBARBOX {
            fill = 1;
            horizontal = TRUE;
            NEW itemImage {
                fill = 1;
                MOVE BOX(TREE skuTree) { caption = 'Группы'; }
            }
            MOVE BOX(s) {
                fill = 4;
                GRID(s) {
                    defaultComponent = TRUE;
                }
            }
            PROPERTY(name(s)) { font = '16'; charWidth = 20;}
            PROPERTY(prevCurrentBalance(s, st)) { font = '16'; charWidth = 3;}
            PROPERTY(currentPOSPrice(s, r)) { font = '16'; }
            PROPERTY(idBarcode(s)) { font = '16'; charWidth = 14;}
        }
    }
}

searchSkuSale 'Поиск'(Receipt receipt)  {
    DIALOG searchSkuSaleReceipt OBJECTS st = departmentStore(receipt), r = receipt, s INPUT DO {
        createSaleDetail[Receipt,Sku,BPSTRING[15]](receipt, s, idBarcode[Sku](s));
    }
} CHANGEKEY 'F3' IN receiptSaleAction;

// Поиск подбором Batch
FORM searchBatchSaleReceipt 'Поиск партии'
    OBJECTS st = DepartmentStore PANEL
    OBJECTS r = Receipt PANEL

    TREE skuTree sk = SkuGroup PARENT parent(sk)
    PROPERTIES READONLY skuTreeName = name(sk, st)
    ORDERS skuTreeName
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F6' DEFAULT

    OBJECTS           b = Batch GRID
    PROPERTIES        READONLY documentNameSku(b)

    PROPERTIES(b, st) READONLY prevCurrentBalance
    PROPERTIES(b, r)  READONLY currentPOSPrice

    PROPERTIES        READONLY idBarcodeSku(b), name(b)
    FILTERS           isParent(sk, sku(b))
    ORDERS          documentNameSku(b)

    FILTERGROUP filters
        FILTER 'Партии с остатком' prevCurrentBalance(b, st) 'F10' DEFAULT
        FILTER 'Партии с движением' countLedger(b, st) 'F9'

;

DESIGN searchBatchSaleReceipt {
    BOX {
        size = (1280, 768);
        NEW top BEFORE TOOLBARBOX {
            fill = 1;
            horizontal = TRUE;
            MOVE BOX(TREE skuTree) { caption = 'Группы'; }
            MOVE BOX(b) {
                fill = 4;
                GRID(b) {
                    defaultComponent = TRUE;
                }
            }
            PROPERTY(documentNameSku(b)) { font = '16'; charWidth = 20;}
            PROPERTY(prevCurrentBalance(b, st)) { font = '16'; charWidth = 3;}
            PROPERTY(currentPOSPrice(b, r)) { font = '16'; }
            PROPERTY(idBarcodeSku(b)) { font = '16'; charWidth = 14;}
            PROPERTY(name(b)) { font = '16'; charWidth = 20;}
        }
    }
}

searchBatchSale 'Поиск'(Receipt receipt)  {
    DIALOG searchBatchSaleReceipt OBJECTS st = departmentStore(receipt), r = receipt, b INPUT DO {
        createSaleDetail[Receipt,Batch,BPSTRING[15]](receipt, b, idBarcodeSku[Batch](b));
    }
} CHANGEKEY 'F3' IN receiptSaleAction;


// Возвраты

allReceiptReturn 'Возврат чека целиком' = DATA BOOLEAN ();
selectiveReturn = TRUE AND NOT allReceiptReturn();

EXTEND FORM options
    PROPERTIES () allReceiptReturn
;
DESIGN options {
    pos {
        caption = 'POS';
        MOVE PROPERTY (allReceiptReturn());
    }
}

returnQuantity 'Количество возврата' (receiptDetail) = ABSTRACT NUMERIC[16,5] (ReceiptReturnDetail);

overCreateReturn  ABSTRACT LIST ( ReceiptReturnDetail);

createReturn 'Добавить строку возврата'(Receipt receipt, ReceiptSaleDetail receiptSaleDetail, STRING[30] barcode)  {
    NEW d = ReceiptReturnDetail {
        receipt(d) <- receipt;
        idBarcode(d) <- barcode;
        receiptSaleDetail(d) <- receiptSaleDetail;
        sku(d) <- sku(receiptSaleDetail);
        quantity(d) <- OVERRIDE returnQuantity(d), 1.0;
        price(d) <- price(receiptSaleDetail);
        VAT(d) <- VAT(receiptSaleDetail);
        batch(d) <- batch(receiptSaleDetail);
        discountCard(receipt) <- discountCard(receiptSaleDetail);
        focusQuantity(d);
        overCreateReturn(d);
    }
}

overCreateReturn  ABSTRACT LIST ( ReceiptReturnDetail, ReceiptSaleDetail);
createReturn 'Добавить строки возврата'(Receipt receipt, Receipt receiptReturn)  {
    FOR receipt(ReceiptSaleDetail receiptSaleDetail) == receiptReturn NEW d = ReceiptReturnDetail DO {
        receipt(d) <- receipt;
        idBarcode(d) <- idBarcode(sku(receiptSaleDetail));
        receiptSaleDetail(d) <- receiptSaleDetail;
        sku(d) <- sku(receiptSaleDetail);
        quantity(d) <- quantity(receiptSaleDetail);
        price(d) <- price(receiptSaleDetail);
        VAT(d) <- VAT(receiptSaleDetail);
        batch(d) <- batch(receiptSaleDetail);
        discountCard(receipt) <- discountCard(receiptSaleDetail);
        overCreateReturn(d,receiptSaleDetail);
    }
}

GROUP receiptReturnAction 'Возврат' : public;

// По штрихкоду
FORM scanBarcodeReturnReceipt 'Выбор строки возврата'
    OBJECTS d = DepartmentStore PANEL

    OBJECTS s = Sku PANEL
    PROPERTIES idBarcode(s) READONLY, name(s)

    OBJECTS r = ReceiptSaleDetail GRID
    PROPERTIES(r) READONLY numberReceipt, dateTime, nameBatch SHOWIF explicitBatchLedger(d),
        numberDiscountCard, nameLegalEntityDiscountCard, sumReceiptDetail, sumCashPayment, sumCardPayment,
        index, quantity[ReceiptDetail], quantityReturned, price[ReceiptDetail],
        sum[ReceiptDetail], discountPercent , discountSum[ReceiptDetail]
    FILTERS departmentStore(r) == d,
        sku(r) == s

    FILTERGROUP filter
        FILTER 'Невозвращенные'  quantity[ReceiptDetail](r) (-) quantityReturned(r) > 0.0 DEFAULT
;

DESIGN scanBarcodeReturnReceipt {
    PROPERTY(idBarcode(s)) {
        focusable = FALSE;
    }
    PROPERTY(name(s)) {
        focusable = FALSE;
    }
}

changeDescriptionSale(ReceiptReturnDetail d) + {
    DIALOG scanBarcodeReturnReceipt OBJECTS d = departmentStore(d), s = sku(d), r = receiptSaleDetail(d) CHANGE;
}

forbidNullSaleDetail 'Запретить возврат не по чеку' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES () forbidNullSaleDetail
;

DESIGN options {
    pos {
        MOVE PROPERTY(forbidNullSaleDetail());
    }
}

barcodeConsumed = DATA LOCAL BOOLEAN ();
overBarcodeInput ABSTRACT LIST (Receipt);

overChangeBarcodeReturn ABSTRACT LIST FIRST (STRING[200], Receipt);

scanBarcodeReturn 'Ввести штрихкод'(Receipt receipt)  {
    DIALOG barcodeInput DO {
        LOCAL dialogBarcodeSku = Sku();
        dialogBarcodeSku() <- skuBarcode(barcodeInput(), currentDate());

        IF dialogBarcodeSku() IS Sku THEN {

            barcodeConsumed() <- NULL;
            overChangeBarcodeReturn(initialBarcodeInput(), receipt);
            
            IF NOT barcodeConsumed() THEN {
                LOCAL created = BOOLEAN();
                created() <- NULL;
                DIALOG scanBarcodeReturnReceipt OBJECTS d = departmentStore(receipt), s = dialogBarcodeSku(), r INPUT DO {
                    createReturn(receipt, r, barcodeInput());
                    created() <- TRUE;
                }
                IF NOT created() THEN {
                    IF NOT forbidNullSaleDetail() THEN {
                        NEW d = ReceiptReturnDetail {
                            receipt(d) <- receipt;
                            idBarcode(d) <- barcodeInput();
                            sku(d) <- dialogBarcodeSku();
                            quantity(d) <- 1.0;
                            price(d) <- currentPOSPrice(dialogBarcodeSku(), receipt);
                            VAT(d) <- VAT(dialogBarcodeSku(), departmentStore(receipt));
                            focusQuantity(d);
                            IF explicitBatchLedger(receipt) THEN {
                                created() <- NULL;
                                DIALOG chooseBatchReceipt OBJECTS st = departmentStore[ReceiptDetail](d), d = d, bt INPUT DO{
                                    batch(d) <- bt;
                                    price(d) <- currentPOSPrice[Batch,Receipt](bt, receipt[ReceiptDetail](d));
                                    created() <- TRUE;
                                }
                                IF NOT created() THEN
                                    DELETE d;
                            }
                        }
                    } ELSE {
                        MESSAGE 'Выберите чек для возврата';
                    }
                }
            }
        } ELSE {
            barcodeConsumed() <- NULL;
            overBarcodeInput(receipt);

            IF NOT barcodeConsumed() THEN
                MESSAGE CONCAT ' ', 'Не найден штрихкод', barcodeInput();
        }
    }
} CHANGEKEY 'F7' IN receiptReturnAction;

// Поиск

unreturned (ReceiptSaleDetail d) = quantity[ReceiptDetail](d) (-) quantityReturned(d);
unreturned (Receipt) = GROUP SUM 1 IF unreturned (ReceiptSaleDetail d) > 0.0 BY receipt(d);

FORM searchSkuReturnReceipt 'Поиск строки возврата'
    OBJECTS st = DepartmentStore PANEL
    OBJECTS c = CashRegister PANEL

    OBJECTS s = Receipt GRID LAST
    PROPERTIES(s) READONLY  number, date, time, nameEmployee,
        numberDiscountCard, nameLegalEntityDiscountCard, sumReceiptDetail, discountSumReceiptDetail,
        countReceiptDetail, quantityReceiptDetail
    FILTERS departmentStore(s) == st,
        countReceiptSaleDetail(s)
    FILTERGROUP filter
        FILTER 'Невозвращенные' unreturned(s)

    OBJECTS r = ReceiptSaleDetail GRID
    PROPERTIES(r) READONLY  idBarcode, nameSku[ReceiptDetail], nameBatch SHOWIF explicitBatchLedger(st),
        quantity[ReceiptDetail], quantityReturned, price[ReceiptDetail],
        sum[ReceiptDetail], discountPercent, discountSum[ReceiptDetail]
    PROPERTIES(r) READONLY SHOWIF useBonus() bonusPaid, bonusSum
    FILTERS receipt(r) == s
    FILTERGROUP filterDetail
        FILTER 'Невозвращенные' unreturned(r) > 0.0 DEFAULT
;
DESIGN searchSkuReturnReceipt {
    size = (1024, 768);
}

createReturn (Receipt receipt, Receipt receiptReturn, ReceiptSaleDetail d)  {
    IF receiptReturn IS Receipt AND d IS ReceiptSaleDetail THEN {
        IF selectiveReturn() THEN {
            createReturn(receipt, d, idBarcode(sku[ReceiptSaleDetail](d)));
        } ELSE {
            createReturn(receipt, receiptReturn);
        }
    }
}

searchSkuReturn 'Поиск'(Receipt receipt)  {
    DIALOG searchSkuReturnReceipt OBJECTS st = departmentStore(receipt), c = cashRegister(receipt), s INPUT, r INPUT DO
        createReturn(receipt, s, r);
} CHANGEKEY 'F6' IN receiptReturnAction;

// Дисконтные карты

overChangeBarcodeDiscountCard(STRING[30] string, Receipt receipt)  {
    IF discountString(string) AND receipt IS Receipt AND string IS STRING[30] AND NOT consumedChangeBarcodeSaleReceipt() THEN {
        IF dateTo(discountString(string)) < date(receipt) THEN
            MESSAGE 'Закончился срок действия карты';
        ELSE
            discountCard(receipt) <- discountString(string);
        consumedChangeBarcodeSaleReceipt() <- TRUE;
    }
} TOOLBAR;

overChangeBarcodeSale(STRING[30] string, Receipt receipt) + {  overChangeBarcodeDiscountCard(string, receipt); }

FORM inputDiscountCardNumberReceipt 'Ввод номера дисконтной карты'
    OBJECTS (n = STRING[48], s = BPSTRING[2]) PANEL
    PROPERTIES number = VALUE(n), series = VALUE(s)
;

DESIGN inputDiscountCardNumberReceipt {
    NEW centerContainer BEFORE TOOLBARBOX {
        horizontal = TRUE;
        MOVE PROPERTY(number) { changeKey = 'F4'; caption = 'Номер'; font = 'bold 72'; }
        MOVE PROPERTY(series) { charWidth = 3; caption = 'Серия'; font = 'bold 72'; }
    }
}

inputDiscountCardNumber 'Ввести номер'(Receipt receipt)  {
    DIALOG inputDiscountCardNumberReceipt OBJECTS s INPUT, n INPUT DO {
        LOCAL discountCard = DiscountCard();
        discountCard() <- discountString(CONCAT '', s, n);
        IF discountCard() THEN {
            IF dateTo(discountCard()) < date(receipt) THEN
                MESSAGE 'Закончился срок действия карты';
            ELSE
                discountCard(receipt) <- discountCard();
        } ELSE
            MESSAGE 'Дисконтная карта с такой серией и номером не найдена';
    }
} IN receiptDiscount CHANGEKEY 'F6';

clearDiscountCard 'Сбросить'(Receipt receipt)  {
    discountCard(receipt) <- NULL;
} IN receiptDiscount CHANGEKEY 'shift F5';

// Операции с Z-отчетами

openZReport 'Открыть Z-отчет' (CashRegister cashRegister)  {
    NEW z = ZReport {
        isPosted(z) <- TRUE;
        number(z) <- BPSTRING[255](z);
        cashRegister(z) <- cashRegister;
        departmentStore(z) <- stock(cashRegister); // todo : приходится ставить из-за того, что на NEW срабатывает resolveAdd
        zReport(cashRegister) <- z;
        apply();
    }
} IN receiptZReport;

fiscalCheckOpenZReport 'Проверка перед открытием Z-отчета'  ABSTRACT LIST ( ZReport);
fiscalOpenZReport 'Открыть Z-отчет' ()  ABSTRACT LIST ( );

overOpen  ABSTRACT LIST ( ZReport);

openCurrentZReport 'Открыть Z-отчет'()  {
    NEW z = ZReport {
        isPosted(z) <- TRUE;
        number(z) <- BPSTRING[255](z);
        cashRegister(z) <- currentCashRegister();
        departmentStore(z) <- stock(currentCashRegister()); // todo : приходится ставить из-за того, что на NEW срабатывает resolveAdd
        zReport(CashRegister cashRegister) <- z WHERE cashRegister == currentCashRegister();
        fiscalCheckOpenZReport(z);
        overOpen(z);
        apply();
    }
    fiscalOpenZReport();
} CONFIRM IN receiptZReport;

overClose  ABSTRACT LIST ( ZReport);

closeZReport 'Закрыть Z-отчет' (CashRegister cashRegister)  {
    cancel();
    FOR ZReport z == zReport(cashRegister) DO {
        time(z) <- currentTime();
        //dateZReport(z) <- currentDate();
        overClose(z);
    }
    zReport(cashRegister) <- NULL;
    apply();
} CONFIRM IN receiptZReport;

fiscalNumber = DATA LOCAL STRING[48] (ZReport);
closeCurrentZReport 'Закрыть Z-отчет'()  {
    CANCEL NESTED(fiscalNumber[ZReport]);
    time(ZReport z) <- currentTime() WHERE z == currentZReport();
    //dateZReport(z) <- currentDate() WHERE z == currentZReport();
    IF fiscalNumber(currentZReport()) THEN
        number(ZReport z) <- fiscalNumber(z) WHERE z == currentZReport();
    overClose(currentZReport());
    zReport(CashRegister cashRegister) <- NULL WHERE cashRegister == currentCashRegister();
    apply();
} CONFIRM IN receiptZReport;

// Форма POS-терминала

prevCurrentBalance (Sku sku, Receipt receipt) = prevCurrentBalance(sku, departmentStore(receipt));
prevCurrentBalanceSku 'Тек. остаток' (ReceiptDetail receiptDetail) = prevCurrentBalance(sku(receiptDetail), receipt(receiptDetail));
prevCurrentBalanceSku 'Тек. остаток' (ReceiptDetail receiptDetail, Stock stock) = prevCurrentBalance(sku(receiptDetail), stock);

prevCurrentBalance 'Тек. остаток' (Batch batch, Receipt receipt) = prevCurrentBalance(batch, departmentStore(receipt));
prevCurrentBalanceBatch 'Тек. остаток' (ReceiptDetail receiptDetail) = prevCurrentBalance(batch(receiptDetail), receipt(receiptDetail));

closedCurrentZReportMessage '' = 'Не открыт Z-отчет';

posExplicitBatchLedger(Receipt r) = explicitBatchLedger(r) AND currentZReport();
posNotExplicitBatchLedger(Receipt r) = notExplicitBatchLedger(r) AND currentZReport();

backgroundQuantity = ABSTRACT COLOR (ReceiptDetail);

changeQuantity 'Изменить кол-во строки чека'  ABSTRACT CASE OVERRIDE FIRST ( ReceiptDetail);

changeQuantity(ReceiptDetail detail) + WHEN detail IS ReceiptDetail THEN{
    INPUT n = NUMERIC[16,5] DO
        IF n THEN
            quantity(detail) <- n;
        ELSE
            DELETE detail;
}

notBackgroundPOS 'Не подсвечивать форму POS' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES () notBackgroundPOS
;
DESIGN options {
    pos {
        MOVE PROPERTY (notBackgroundPOS());
    }
}

//background(Receipt r, ReceiptDetail d) = RGB(255, 128, 128) 
//    IF ((posNotExplicitBatchLedger(r) AND prevCurrentBalanceSku(d) < quantity(d)) OR 
//       (posExplicitBatchLedger(r) AND prevCurrentBalanceBatch(d) < quantity(d))) AND NOT notBackgroundPOS();

background = ABSTRACT VALUE COLOR (Receipt, ReceiptSaleDetail);
background(Receipt r, ReceiptSaleDetail d) += RGB(255, 128, 128) IF d IS ReceiptSaleDetail AND ((posNotExplicitBatchLedger(r) AND NOT prevCurrentBalanceSku(d) >= quantity(d)) OR
    (posExplicitBatchLedger(r) AND NOT prevCurrentBalanceBatch(d) >= quantity(d))) AND NOT notBackgroundPOS();

currentZReportUseBonus() = currentZReport() AND useBonus();

bonusBackground (Receipt r) = RGB(255,128,128) IF totalBonuses(r) < 0.0 OR (bonusPaid(r) AND NOT bonusPaid(r) <= totalBonuses(r));

changeBonusPaid (ReceiptDetail d)  {
    INPUT n = NUMERIC[18,4] DO
        IF n THEN {
            CASE WHEN n < 0.0 THEN
            MESSAGE 'Сумма бонусов не может быть отрицательной';
                WHEN sum(d) < round(n, roundCondition(departmentStore(d))) THEN
                MESSAGE 'Сумма бонусов должна быть меньше или равна сумме строки чека';
                WHEN sum(d) (-) minBonusSum() < round(n, roundCondition(departmentStore(d))) THEN
                MESSAGE 'Сумма платежа по строке чека должна быть больше минимальной';
                ELSE bonusPaid(d) <- round(n, roundCondition(departmentStore(d)));
        } ELSE {
            bonusPaid(d) <- NULL;
        }
}

//задание акций кассиром для всего чека

setUserPromotionReceipt 'Применить для чека' (Receipt receipt, PromotionCondition pc)  {
    setUserPromotion(ReceiptSaleDetail detail, pc) <- TRUE WHERE receipt(detail) == receipt;
}

dropUserPromotionReceipt 'Сбросить для чека' (Receipt receipt, PromotionCondition pc)  {
    setUserPromotion(ReceiptSaleDetail detail, pc) <- NULL WHERE receipt(detail) == receipt;
}

//скидка на весь чек

useDiscountSumReceipt 'Предоставлять скидку на весь чек' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES() useDiscountSumReceipt
;

DESIGN options {
    pos{
        MOVE PROPERTY(useDiscountSumReceipt());
    }
}

readonlyDiscountSumReceipt() = NOT useDiscountSumReceipt();

changeDiscountSumReceipt (Receipt receipt)  {
    IF useDiscountSumReceipt() THEN {
        INPUT n = NUMERIC[18,4] DO{
            LOCAL input = NUMERIC[18,4](Receipt);
            input(receipt) <- n;
            FOR receipt(ReceiptSaleDetail detail) == receipt DO {
                discountSum(detail) <- PARTITION UNGROUP input PROPORTION STRICT ROUND(2) quantity(detail)*price(detail) ORDER index(detail), detail BY receipt(detail);
            }
        }
    }
}
skipShowBonus  = ABSTRACT BOOLEAN (Receipt);

showBonus() = currentZReport() AND useBonus();

FORM POS
    PROPERTIES() READONLY hostnameCurrentComputer, currentDateTime, currentUserName

    PROPERTIES() READONLY SHOWIF closedCurrentZReport() closedCurrentZReportMessage

    OBJECTS r = Receipt PANEL
    PROPERTIES(r) SHOWIF currentZReport() discountSumReceiptDetail ON CHANGE changeDiscountSumReceipt(r) READONLYIF readonlyDiscountSumReceipt(),
        sumReceiptDetail, searchSkuSale SHOWIF posNotExplicitBatchLedger(r),
        searchBatchSale SHOWIF posExplicitBatchLedger(r),
        searchSkuReturn, scanBarcodeReturn,
        post, postCard, postCash, postBonus SHOWIF (showBonus() AND NOT skipShowBonus(r)), cancel,
        clearDiscountCard, fiscalSkip
    PROPERTIES SHOWIF currentZReport() transferDiscountCards() DRAW r TOOLBAR
    PROPERTIES(r) READONLY SHOWIF currentZReport() numberDiscountCard, nameLegalEntityDiscountCard, prevTotalSum, bonusPaid BACKGROUND bonusBackground(r) SHOWIF showBonus()
    PROPERTIES(r) READONLY SHOWIF currentZReportUseBonus() BACKGROUND bonusBackground(r) totalBonuses AFTER prevTotalSum(r)

    OBJECTS d = ReceiptDetail GRID
    PROPERTIES(d) SHOWIF currentZReport() READONLY BACKGROUND background(r, d)
    index, type, idBarcodeGrid = idBarcode, nameSkuGrid = nameSku,
        prevCurrentBalanceSku SHOWIF posNotExplicitBatchLedger(r),
        prevCurrentBalanceBatch SHOWIF posExplicitBatchLedger(r)
    PROPERTIES(d) SHOWIF currentZReport() BACKGROUND background(r, d)
    quantityGrid = quantity ON CHANGE changeQuantity(d) BACKGROUND backgroundQuantity(d), priceGrid = price, sumGrid = sum, discountPercent,
        discountSum, valueVAT, calcSumVAT//, numberVATReceiptDetail,
    PROPERTIES(d) SHOWIF currentZReport() READONLY PANEL BACKGROUND background(r, d)
    idBarcodePanel = idBarcode,
        nameSkuPanel = nameSku,
        quantityPanel = quantity CHANGEABLE EVENTID 'SCALES',
        shortNameUOMSkuPanel = shortNameUOMSku,
        pricePanel = price,
        sumPanel = sum
    PROPERTIES(d) SHOWIF currentZReportUseBonus() BACKGROUND background(r, d) bonusPaid ON CHANGE changeBonusPaid(d) READONLYIF is[ReceiptReturnDetail](d), bonusSum READONLY
    PROPERTIES(d) SHOWIF currentZReport() PANEL BACKGROUND background(r, d)
    nameBatchPanel = nameBatch ON CHANGE changeBatch(d) SHOWIF posExplicitBatchLedger(r)
    FILTERS receipt(d) == r

    OBJECTS bs = STRING[30] PANEL
    PROPERTIES(bs) SHOWIF currentZReport() barcodeSale = VALUE ON CHANGE changeBarcodeSale(r) EVENTID 'SCANNER'

    OBJECTS pc = PromotionCondition GRID
    PROPERTIES(pc) SHOWIF currentZReport() READONLY namePromotion, name, dateFrom, dateTo, percent
    PROPERTIES(d, pc) SHOWIF currentZReport() quantity, promotionSum
    FILTERS quantity(d, pc) AND NOT userSet(pc)

    OBJECTS pcu = PromotionCondition GRID
    PROPERTIES(pcu) SHOWIF currentZReport() READONLY namePromotion, name, dateFrom, dateTo, percent
    PROPERTIES(d, pcu) SHOWIF currentZReport() quantity, promotionSum, setUserPromotion ON CONTEXTMENU setUserPromotionReceipt(r, pcu) ON CONTEXTMENU dropUserPromotionReceipt(r, pcu)
    PROPERTIES(r, pcu) PANEL setUserPromotionReceipt, dropUserPromotionReceipt
    FILTERS userSet(pcu) AND (inReceiptSale(d, pcu) OR setUserPromotion(d,pcu))

    PROPERTIES() fiscalPrintCopyReceipt READONLYIF fiscalSkip(r), fiscalAdvancePaper READONLYIF fiscalSkip(r),
        fiscalCutReceipt READONLYIF fiscalSkip(r), fiscalCashSum READONLYIF fiscalSkip(r)

    OBJECTS s = DepartmentStore GRID
    PROPERTIES(s) READONLY SHOWIF currentZReport() nameStore
    PROPERTIES READONLY SHOWIF currentZReport() prevCurrentBalanceSku(d, s)

    FILTERS accessCompany(currentUser(), s),
        prevCurrentBalanceSku(d, s)

    EVENTS
        ON INIT createCurrentReceipt()

;

DESIGN POS {
    NEW north {
        horizontal = TRUE;
        alignment = STRETCH;

        MOVE GROUP(receiptSaleAction,r) {
            lines = 1;
            alignment = STRETCH;
            MOVE PROPERTY(searchSkuSale(r)) { alignment = STRETCH; focusable = FALSE; font = 'bold 22';}
            MOVE PROPERTY(searchBatchSale(r)) { alignment = STRETCH; focusable = FALSE; font = 'bold 22'; }
            MOVE PROPERTY(barcodeSale) { caption = 'Ввести штрихкод'; panelCaptionVertical = TRUE; focusable = FALSE; font = 'bold 22'; changeKey = 'F4'; }
        }
        MOVE GROUP(receiptReturnAction,r) {
            lines = 1;
            alignment = STRETCH;
            MOVE PROPERTY(searchSkuReturn(r)) { fill = 1; focusable = FALSE; font = 'bold 22'; }
            MOVE PROPERTY(scanBarcodeReturn(r)) { fill = 1; focusable = FALSE; font = 'bold 22'; }
        }
        MOVE GROUP(receiptDiscount,r) {
            fill = 1;
            lines = 1;
            MOVE PROPERTY(nameLegalEntityDiscountCard(r)) { alignment = STRETCH; caption = 'Держатель'; focusable = FALSE; font = 'bold 22'; }
            NEW receiptDiscountRow2 {
                fill = 1;
                horizontal = TRUE;
                MOVE PROPERTY(numberDiscountCard(r)) { alignment = STRETCH; caption = 'Номер'; focusable = FALSE; font = 'bold 22'; }
                MOVE PROPERTY(prevTotalSum(r)) { alignment = STRETCH; caption = 'Сумма'; focusable = FALSE; font = 'bold 22'; pattern = '#,##0.00'; }
                MOVE PROPERTY(totalBonuses(r)) { alignment = STRETCH; caption = 'Доступно бонусов'; focusable = FALSE; font = 'bold 22'; pattern = '#,##0.00'; }
            }
            NEW receiptDiscountRow3 {
                fill = 1;
                horizontal = TRUE;
                MOVE PROPERTY(clearDiscountCard(r)) { alignment = STRETCH; focusable = FALSE; font = 'bold 22'; }
                MOVE PROPERTY(transferDiscountCards()) { alignment = STRETCH; focusable = FALSE; font = 'bold 22'; }
            }
        }
        MOVE PROPERTY(closedCurrentZReportMessage()) {
            focusable = TRUE;
            font = '100';
            flex = 1;
        }
    }
    MOVE BOX(d) {
        GRID(d) { height = 110; }
        fill = 1;
        PROPERTY(index(d)) { caption = '№'; focusable = FALSE; font = '18'; charWidth = 2;}
        PROPERTY(type(d)) { focusable = FALSE; font = '18'; charWidth = 7;}
        PROPERTY(idBarcodeGrid) { focusable = FALSE; font = '18'; }
        PROPERTY(nameSkuGrid) { focusable = FALSE; font = '18'; charWidth = 20; }
        PROPERTY(prevCurrentBalanceSku(d)) { focusable = FALSE; font = '18'; charWidth = 3;}
        PROPERTY(prevCurrentBalanceBatch(d)) { focusable = FALSE; font = '18'; charWidth = 3;}
        PROPERTY(quantityGrid) { caption = 'К-во'; font = '18'; charWidth = 2;}
        PROPERTY(priceGrid) { font = '18'; pattern = '#,##0.00'; }
        PROPERTY(sumGrid) { font = '18'; pattern = '#,##0.00'; }
        PROPERTY(discountPercent(d)) { font = '18'; charWidth = 3;}
        PROPERTY(discountSum(d)) { font = '18'; pattern = '#,##0.00'; }
        //        PROPERTY(numberVATReceiptDetail(d)) { font = '18'; charWidth = 3; }
        PROPERTY(valueVAT(d)) { font = '18'; charWidth = 3;}
        PROPERTY(calcSumVAT(d)) { font = '18'; pattern = '#,##0.00';}
        PROPERTY(bonusPaid(d)) { font = '18'; pattern = '#,##0.00';}
        PROPERTY(bonusSum(d)) { font = '18'; pattern = '#,##0.00';}
        //        PROPERTY(deleted) { focusable = FALSE; font = '18'; }
        REMOVE TOOLBARLEFT(d);
    }
    NEW center {
        alignment = STRETCH;
        horizontal = TRUE;
        NEW imageContainer;
        NEW details {
            fill = 1;
            //            size = ( -1, 100);
            MOVE PANEL(d) {
                MOVE PROPERTY(nameSkuPanel) {
                    alignment = STRETCH;
                    panelCaptionVertical = TRUE; focusable = FALSE; font = 'bold 24';
                }
                MOVE PROPERTY(nameBatchPanel) {
                    alignment = STRETCH;
                    panelCaptionVertical = TRUE; focusable = FALSE; font = 'bold 24';
                }
                NEW skuDetail {
                    alignment = STRETCH;
                    horizontal = TRUE;
                    MOVE PROPERTY(idBarcodePanel) { panelCaptionVertical = TRUE; focusable = FALSE; font = 'bold 24'; }
                    NEW priceDetail {
                        fill = 1;
                        horizontal = TRUE;
                        childrenAlignment = END;
                        MOVE PROPERTY(quantityPanel) {
                            panelCaptionVertical = TRUE; focusable = FALSE; font = 'bold 24';
                            charWidth = 5;
                        }
                        MOVE PROPERTY(shortNameUOMSkuPanel) {
                            panelCaptionVertical = TRUE; focusable = FALSE; font = 'bold 24';
                        }
                        MOVE PROPERTY(pricePanel) {
                            panelCaptionVertical = TRUE; focusable = FALSE; font = 'bold 24'; pattern = '#,##0.00';
                        }
                        MOVE PROPERTY(sumPanel) {
                            panelCaptionVertical = TRUE; focusable = FALSE; font = 'bold 24'; pattern = '#,##0.00';
                        }
                    }
                }
            }
            FILTERS(d) {
                visible = FALSE;
            }
            NEW pane {
                fill = 1;
                tabbed = TRUE;
                MOVE BOX(pc) {
                    REMOVE TOOLBARLEFT(pc);
                    PROPERTY(promotionSum(d, pc)) {pattern = '#,##0.00';}
                }
                NEW manualPromotions {
                    fill = 1;
                    caption = 'Возможные акции';
                    horizontal = TRUE;
                    MOVE BOX(pcu) {
                        REMOVE TOOLBARLEFT(pcu);
                        caption = '';
                    }
                    NEW manualPromotionActions {
                        alignment = STRETCH;
                        MOVE PROPERTY(setUserPromotionReceipt(r, pcu)) { fill = 1; }
                        MOVE PROPERTY(dropUserPromotionReceipt(r, pcu)) { fill = 1; }
                    }
                }
                MOVE BOX(s){
                    caption = 'Остатки в других магазинах';
                }
            }
            NEW misc {
                horizontal = TRUE;
                alignment = STRETCH;
                MOVE PROPERTY(formRefresh()) {
                    fill = 1;
                    focusable = FALSE;
                }
                NEW currentContainer {
                    alignment = STRETCH;
                    caption = 'Текущие значения';
                    MOVE PROPERTY(hostnameCurrentComputer()) {
                        caption = 'Компьютер';
                        charWidth = 20;
                        alignment = STRETCH;
                        focusable = FALSE;
                    }
                    NEW currentRow2 {
                        alignment = STRETCH;
                        horizontal = TRUE;
                        MOVE PROPERTY(currentDateTime()) { charWidth = 12; caption = 'Время'; focusable = FALSE; }
                        MOVE PROPERTY(currentUserName()) { charWidth = 15; caption = 'Пользователь'; focusable = FALSE; }
                    }
                }
                NEW actionsContainer {
                    caption = 'Действия с кассой';
                    horizontal = TRUE;
                    alignment = STRETCH;
                    MOVE PROPERTY(fiscalSkip(r)) { alignment = STRETCH; panelCaptionVertical = TRUE; };
                    MOVE PROPERTY(fiscalPrintCopyReceipt()) { alignment = STRETCH; focusable = FALSE; }
                    MOVE PROPERTY(fiscalAdvancePaper()) { alignment = STRETCH; focusable = FALSE; }
                    MOVE PROPERTY(fiscalCutReceipt()) { alignment = STRETCH; focusable = FALSE; }
                    MOVE PROPERTY(fiscalCashSum()) { alignment = STRETCH; focusable = FALSE; }
                }
            }
        }
        NEW east {
            alignment = STRETCH;
            MOVE GROUP(receiptAction,r) {
                lines = 1;
                alignment = STRETCH;
                MOVE PROPERTY(postBonus(r)) { alignment = STRETCH; focusable = FALSE; font = 'bold 22'; }
                MOVE PROPERTY(post(r)) { alignment = STRETCH; focusable = FALSE; font = 'bold 22'; }
                MOVE PROPERTY(postCard(r)) { alignment = STRETCH; focusable = FALSE; font = 'bold 22'; }
                MOVE PROPERTY(postCash(r)) { alignment = STRETCH; focusable = FALSE; font = 'bold 22'; }
                MOVE PROPERTY(cancel(r)) { alignment = STRETCH; focusable = FALSE; font = 'bold 22'; }
            }
            NEW receiptSums {
                alignment = STRETCH;
                caption = 'Итого';
                MOVE PROPERTY(bonusPaid(r)) { alignment = STRETCH; panelCaptionVertical = TRUE; focusable = FALSE; font = 'bold 32'; pattern = '#,##0.00';}
                MOVE PROPERTY(discountSumReceiptDetail(r)) { alignment = STRETCH; panelCaptionVertical = TRUE; focusable = FALSE; font = 'bold 32'; pattern = '#,##0.00';}
                MOVE PROPERTY(sumReceiptDetail(r)) { alignment = STRETCH; panelCaptionVertical = TRUE; focusable = FALSE; font = 'bold 32'; pattern = '#,##0.00';}
            }
        }
    }
    REMOVE TOOLBARBOX;
}

focusQuantity(ReceiptDetail d) + {
    ACTIVATE PROPERTY POS.quantityGrid;
    SEEK POS.d = d;
};

recalculatedPrice 'Пересчитать цены чека'(Receipt receipt)  {
    FOR receipt(ReceiptSaleDetail detail) == receipt DO {
        IF posNotExplicitBatchLedger(receipt) THEN
            price(detail) <- currentPOSPrice(sku(detail), receipt);
        ELSE
            price(detail) <- currentPOSPrice(batch(detail), receipt);
    }
}

WHEN LOCAL FORMS POS CHANGED(quantityReceiptDetail(Receipt receipt)) OR
    CHANGED(discountCard(receipt)) OR
    CHANGED(setUserPromotion(receipt)) OR
    CHANGED(discountPercent(receipt)) OR
    CHANGED(signedBonusPaid(receipt))
    DO calculatePromotions(receipt);

WHEN LOCAL FORMS POS CHANGED(quantity(ReceiptDetail receiptDetail)) OR CHANGED(sum(receiptDetail)) DO
    fiscalDisplayText(receiptDetail);

WHEN LOCAL FORMS POS CHANGED(discountCard(Receipt receipt)) DO recalculatedPrice(receipt);

WHEN LOCAL FORMS POS CHANGED(VAT(ReceiptDetail d)) OR CHANGED(date(d)) OR CHANGED (batch(d)) DO {
    valueVAT(d) <- overValueVAT(d);
}

NAVIGATOR {
    retailDashboardNavigator {
        NEW POS;
    }
}

onlyPossitivePriceReceipDetail 'Требовать, чтобы цены в строке чека были больше нуля' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES () onlyPossitivePriceReceipDetail
;
DESIGN options {
    pos {
        MOVE PROPERTY (onlyPossitivePriceReceipDetail());
    }
}

CONSTRAINT onlyPossitivePriceReceipDetail() AND ReceiptDetail detail IS ReceiptDetail AND NOT price(detail) > 0.0
    MESSAGE 'Цена для строки чека должна быть задана и быть больше 0';

onlyPossitiveQuantityReceipSaleDetail 'Требовать, чтобы количество в продаже было больше нуля' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES () onlyPossitiveQuantityReceipSaleDetail
;
DESIGN options {
    pos {
        MOVE PROPERTY (onlyPossitiveQuantityReceipSaleDetail());
    }
}

CONSTRAINT onlyPossitiveQuantityReceipSaleDetail() AND ReceiptSaleDetail detail IS ReceiptSaleDetail AND NOT quantity(detail) >= 0.0
    MESSAGE 'Количество товаров для продажи должно быть больше 0';

// ----------------------------------------- Кассовые операции ---------------------------------------------- //

fiscalXReport 'X-отчёт'  ABSTRACT LIST( );
fiscalZReport 'Закрыть Z-отчет'  ABSTRACT LIST ( ) CONFIRM;
fiscalZReport() + {  IF NOT sidModelCurrentCashRegister() THEN closeCurrentZReport(); }

currentZReportDepartmentStore() = currentZReport() IF stockCurrentCashRegister();
closedCurrentZReportDepartmentStore() = closedCurrentZReport() IF stockCurrentCashRegister();

fiscalElectronicJournal 'Печать контрольной ленты'  ABSTRACT LIST ( ) CONFIRM;
fiscalElectronicJournalToFile 'Печать контрольной ленты в файл'  ABSTRACT LIST ( ) CONFIRM;

showifElectronicJournal = ABSTRACT BOOLEAN ();

resetted 'Аннулирован' = DATA BOOLEAN (Receipt);

EXTEND FORM searchSkuReturnReceipt
    FILTERS NOT resetted(s)
;

EXTEND FORM scanBarcodeReturnReceipt
    FILTERS NOT resetted(receipt(r))
;

FORM zReportDialog 'Z-отчет'
    OBJECTS z = ZReport PANEL
    OBJECTS b = Receipt
    PROPERTIES(b) READONLY number, date, time, nameEmployee, sumReceiptDetail, discountSumReceiptDetail,
        countReceiptDetail, quantityReceiptDetail, sumCashPayment, sumCardPayment
    FILTERS zReport(b) == z
    OBJECTS d = ReceiptDetail
    PROPERTIES(d) READONLY idBarcode, nameSku, nameBatch, quantity, price, sum, discountSum
    FILTERS receipt(d) == b,
        NOT resetted(b)
;

DESIGN zReportDialog{
    BOX {
        size = (800, 600);
    }
}

fiscalResetReceiptCashRegister  ABSTRACT LIST ( Receipt) CONFIRM;
fiscalResetReceipt 'Аннулировать чек' ()  {
    ASK 'Данное действие аннулирует последний чек. Продолжить?' DO {
        fiscalResetReceiptCashRegister(GROUP MAX Receipt r IF zReport(r) == currentZReportDepartmentStore());
    }
} CONFIRM;

showifFiscalResetReceipt = ABSTRACT VALUE BOOLEAN ();

EXTEND FORM operationCashRegister
    PROPERTIES SHOWIF currentCashRegister() READONLY curSumCurrentCashRegister() DRAW interval
    PROPERTIES() READONLY numberCurrentZReport SHOWIF (stockCurrentCashRegister() AND currentZReport())
    PROPERTIES() fiscalXReport SHOWIF currentCashRegister()
    PROPERTIES() fiscalZReport SHOWIF currentZReportDepartmentStore()
    PROPERTIES() openCurrentZReport SHOWIF closedCurrentZReportDepartmentStore()
    PROPERTIES() SHOWIF (currentZReportDepartmentStore() AND showifElectronicJournal()) fiscalElectronicJournal, fiscalElectronicJournalToFile
    PROPERTIES() fiscalResetReceipt SHOWIF (currentZReportDepartmentStore() AND showifFiscalResetReceipt())

    PROPERTIES addIncomeCashOperationForm() DRAW c TOOLBAR  SHOWIF currentZReportDepartmentStore()
    PROPERTIES addOutcomeCashOperationForm() DRAW c TOOLBAR SHOWIF currentZReportDepartmentStore()

    OBJECTS z = ZReport
    PROPERTIES(z) READONLY isPosted, number, date, time, nameDepartmentStore,
        overNumberCashRegister, sumCash, sumReceiptDetail, basis
    ORDERS date(z), time(z)
    FILTERS date(z) >= dFrom,
        date(z) <= dTo,
        cashRegister(z) == currentCashRegister()
;

DESIGN operationCashRegister {
    BOX {
        NEW actions FIRST {
            caption = 'Действия с кассой';
            NEW firstRowActions{
                horizontal = TRUE;
                MOVE PROPERTY(fiscalXReport()) { font = '24'; }
                MOVE PROPERTY(fiscalZReport()) { font = '24'; }
                MOVE PROPERTY(openCurrentZReport()) { font = '24'; };
                MOVE PROPERTY(fiscalElectronicJournal()) { font = '24'; }
                MOVE PROPERTY(fiscalElectronicJournalToFile()) { font = '24'; }
            }
            NEW secondRowActions{
                MOVE PROPERTY(fiscalResetReceipt()) { font = '24'; }
                MOVE PROPERTY(numberCurrentZReport()) { font = '24'; };
            }
        }
        MOVE BOX(z) BEFORE TOOLBARBOX;
    }
}

// Update data
fiscalUpdateData 'Загрузить информацию'  ABSTRACT LIST ( );
fiscalUpdateDataShowIf = stockCurrentCashRegister() IF closedCurrentZReportDepartmentStore();

EXTEND FORM operationCashRegister
    PROPERTIES() SHOWIF fiscalUpdateDataShowIf() fiscalUpdateData
;

DESIGN operationCashRegister{
    firstRowActions {
        MOVE PROPERTY(fiscalUpdateData()) BEFORE PROPERTY(fiscalXReport()) { font = '24'; }
    }
}

//-- 
changeUserPromotion(ReceiptSaleDetail d, PromotionCondition pcu) {
    INPUT b = BOOLEAN DO {
        setUserPromotion(d, pcu) <- b;
        quantity(d, pcu) <- quantity(d) IF b;
    }
}

EXTEND FORM zReport

    OBJECTS pcu = PromotionCondition GRID
    PROPERTIES(pcu) READONLY  namePromotion, name, dateFrom,
        dateTo, percent
    PROPERTIES(d, pcu)  quantity,
        promotionSum,
        setUserPromotion ON CHANGE changeUserPromotion(d, pcu)
    FILTERS userSet(pcu) AND inReceiptSale(d, pcu)
;

DESIGN zReport {
    secondCase{
        NEW prom AFTER BOX(d) {
            fill = 1;
            tabbed = TRUE;
            MOVE BOX(p);
            MOVE BOX(pcu) {
                caption = 'Возможные акции';
                PROPERTY (namePromotion(pcu)) { charWidth = 15;}
                PROPERTY (name(pcu)) { charWidth = 15;}
            }
        }
    }
}

EXTEND FORM zReports

    OBJECTS pcu = PromotionCondition GRID
    PROPERTIES(pcu) READONLY  namePromotion, name, dateFrom, dateTo, percent
    PROPERTIES(d, pcu) READONLY  quantity, promotionSum, setUserPromotion
    FILTERS quantity(d, pcu)
;

DESIGN zReports {
    secondCase{
        NEW prom AFTER BOX(d) {
            fill = 1;
            tabbed = TRUE;
            MOVE BOX(p);
            MOVE BOX(pcu) {
                caption = 'Акции, применённые для строки чека';
                PROPERTY (namePromotion(pcu)) { charWidth = 15;}
                PROPERTY (name(pcu)) { charWidth = 15;}
            }
        }
    }
}

// ограничение на максимальную сумму чека

maxSumPaymentReceipt 'Максимальная сумма платежа по чеку' = DATA NUMERIC[18,4] ();

EXTEND FORM options
    PROPERTIES () maxSumPaymentReceipt
;
DESIGN options {
    pane {
        pos {
            MOVE PROPERTY (maxSumPaymentReceipt());
        }
    }
}

CONSTRAINT maxSumPaymentReceipt() AND sumPayment(Receipt r) > maxSumPaymentReceipt() AND date(r) >= 2016_07_01
    MESSAGE 'Нельзя вводить сумму платежа по чеку больше разрешенной';

WHEN LOCAL FORMS POS SETCHANGED(countReceiptDetail(Receipt receipt)) DO {
    time(receipt) <- currentTime();
}    