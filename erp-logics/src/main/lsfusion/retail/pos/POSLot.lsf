MODULE POSLot;

REQUIRE POS, ZReportLot;

NAMESPACE POS;

dropLot 'Сбросить' (ReceiptDetail d) {
    lot(d) <- NULL;
}
EXTEND FORM POS
    PROPERTIES(d) READONLY idLot SHOWIF lotType(sku(d)) BACKGROUND RGB(255,224,224) IF NOT lot(d) PANEL
    PROPERTIES(d) SHOWIF d IS ReceiptReturnDetail dropLot
;

DESIGN POS {
    PANEL(d) {
        NEW batchContainer AFTER PROPERTY(nameSkuPanel) {
            horizontal = TRUE;
            alignment = STRETCH;
            MOVE PROPERTY(nameBatchPanel);
            MOVE PROPERTY(idLot(d)) {
                panelCaptionVertical = TRUE; focusable = FALSE; font = 'bold 24';
            }
            MOVE PROPERTY(dropLot(d)) { focusable = FALSE; font = 'bold 24'; }
        }
    }
}

price = ABSTRACT VALUE NUMERIC[16,4] (Lot, Receipt);
price (Lot l, Receipt r) += currentPOSPrice(sku(l), r);

skipCheckPosLot 'Не проверять обязательность сканирования марки на POS' = DATA BOOLEAN ();

EXTEND FORM options PROPERTIES skipCheckPosLot();

DESIGN options {
    sale {
        MOVE PROPERTY(skipCheckPosLot());
    }
}

skipCreateLotOnChangeBarcode = ABSTRACT BOOLEAN ();

checkLot ABSTRACT LIST (Lot, DepartmentStore);
createDetail = DATA LOCAL BOOLEAN ();

overExplicitLot = ABSTRACT VALUE BOOLEAN (Sku, DepartmentStore);

overChangeBarcodeSale(STRING[200] b, Receipt r) + {
    IF length(initialBarcode()) >= OVERRIDE lotMinLength(), 20 THEN {
        IF skuBarcode(idToGtin(initialBarcode())) AND NOT lot(barcodeToId(initialBarcode())) AND NOT skipCreateLotOnChangeBarcode() THEN NEW l = Lot {
            id(l) <- barcodeToId(initialBarcode());
            tail(l) <- barcodeToTail(initialBarcode());
            sku(l) <- skuBarcode(idToGtin(initialBarcode()));
        }
        FOR Lot l = lot(barcodeToId(initialBarcode())) AND Sku s = sku(l) DO {
            createDetail() <- TRUE;
            checkLot(l, departmentStore(r));
            IF createDetail() THEN {
                NEW d = ReceiptSaleDetail {
                    receipt(d) <- r;
                    idBarcode(d) <- idBarcode(s);
                    sku(d) <- s;
                    quantity(d) <- 1.0;
                    price(d) <- price(l, r);
                    lot(d) <- l;
                    IF explicitBatchLedger(r) THEN {
                        IF batch(l) THEN
                            batch(d) <- batch(l);
                        ELSE
                            setSaleDetailBatch(d, r);
                    }
                    focusQuantity(d);
                    overCreateSaleDetail(d);//возможно нужно будет отключить
                }
            }
            consumedChangeBarcodeSaleReceipt() <- TRUE;
        } 
    } ELSE {
        FOR Sku sk = skuBarcode(b, currentDate()) AND DepartmentStore dt = departmentStore(r) DO {
            IF (explicitLot(sk) OR overExplicitLot(sk, dt)) AND NOT skipCheckPosLot()  THEN {
                MESSAGE 'Товар подлежит обязательной маркировке. Просканируйте контрольную марку вместо штрихкода'; 
                consumedChangeBarcodeSaleReceipt() <- TRUE;
            }
        }
    }
}

overChangeBarcodeReturn(STRING[200] b, Receipt r) + {
    IF length(b) >= OVERRIDE lotMinLength(), 20 THEN
        FOR Lot l = lot(barcodeToId(b)) AND Sku s = sku(l) DO {
            barcodeConsumed() <- TRUE;
            IF currentBalance(l) > 0 THEN {
                MESSAGE 'Контрольная марка присутствует на остатках. Ее возврат невозможен.';
            } ELSE {
                IF lastReceiptSaleDetail(l) THEN {
                    createReturn(r, lastReceiptSaleDetail(l), barcodeInput());
                } ELSE {
                    NEW d = ReceiptReturnDetail {
                        receipt(d) <- r;
                        idBarcode(d) <- idBarcode(s);
                        sku(d) <- s;
                        quantity(d) <- 1.0;
                        price(d) <- price(l, r);
                        VAT(d) <- VAT(s, departmentStore(r));
                        lot(d) <- l;
                        IF explicitBatchLedger(r) THEN {
                            IF batch(l) THEN {
                                batch(d) <- batch(l);
                                price(d) <- currentPOSPrice[Batch, Receipt](batch(l), r);
                            }
                            //                        ELSE
                            //                            setSaleDetailBatch(d, r);
                        }
                        focusQuantity(d);
                    }
                }
            }
        }
}

WHEN LOCAL FORMS POS CHANGED(receiptSaleDetail(ReceiptReturnDetail d)) AND NOT CHANGED (lot(d)) DO {
    lot(d) <- lot(receiptSaleDetail(d));
}
