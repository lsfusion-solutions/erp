MODULE POSGiftCard;

REQUIRE GiftCard, POS;

NAMESPACE POS;

giftCardAsNotPayment 'Не пробивать сертификат как оплату' = DATA BOOLEAN (GroupCashRegister) IN base;
giftCardAsNotPaymentCurrentCashRegister 'Не пробивать сертификат как оплату' = giftCardAsNotPayment(groupCashRegister(currentCashRegister()));
giftCardAsNotPaymentText 'Текст между товарным чеком и кассовым чеком (VMK)' = ABSTRACT TEXT (Receipt);
giftCardAsNotPaymentTextAbsolut 'Текст между товарным чеком и кассовым чеком (Absolut)' = ABSTRACT TEXT (Receipt);

giftCardDepartment 'Отдел продажи сертификата' = DATA INTEGER (GroupCashRegister) IN base;
giftCardDepartmentCurrentCashRegister 'Отдел продажи сертификата' = giftCardDepartment(groupCashRegister(currentCashRegister()));
giftCardPaymentType 'Тип оплаты сертификатом' = DATA INTEGER (GroupCashRegister) IN base;
giftCardPaymentTypeCurrentCashRegister 'Отдел продажи сертификата' = giftCardPaymentType(groupCashRegister(currentCashRegister()));

//продажа подарочных сертификатов
overChangeBarcodeGiftCard(STRING[30] string, Receipt receipt)  { 
    IF giftCardSeriesNumber(string) AND receipt IS Receipt AND string IS STRING[30] THEN {
        LOCAL giftCard = GiftCard();
        giftCard() <- giftCardSeriesNumber(string);

        IF isSold(giftCard()) AND NOT isReturn(giftCard()) THEN {
            MESSAGE 'Сертификат ' + seriesNumber(giftCard()) +' уже был продан';
        } ELSE {
            NEW d = ReceiptGiftCardSaleDetail {
                receipt(d) <- receipt;
                giftCard(d) <- giftCard();
                idBarcode(d) <- string;
                price(d) <- price(giftCard());
                sum(d) <- price(giftCard());
                seek(d);
            }
        }
        consumedChangeBarcodeSaleReceipt() <- TRUE;
    }
} TOOLBAR;

overChangeBarcodeSale(STRING[30] string, Receipt receipt) + {  overChangeBarcodeGiftCard(string, receipt); }

// Оплата сертификатом

isBan = ABSTRACT BOOLEAN (GiftCard);
banMessage = ABSTRACT TEXT (GiftCard);

addPaymentGiftCard 'Оплатить сертификатом'(Receipt receipt)  { 
    DIALOG barcodeInput DO
        IF isSold(giftCardSeriesNumber(barcodeInput())) AND barcodeInput() IS STRING[15] AND 
           NOT isExpiredDate(giftCardSeriesNumber(barcodeInput())) AND NOT isUsedTotal(giftCardSeriesNumber(barcodeInput())) THEN {
            IF isBan(giftCardSeriesNumber(barcodeInput())) THEN {
                MESSAGE banMessage(giftCardSeriesNumber(barcodeInput()));
            } ELSE {
                IF [GROUP LAST giftCard(PaymentGiftCard pg) IF giftCardSeriesNumber(barcodeInput())==giftCard(pg) ORDER pg BY receipt(pg)](receipt) THEN {
                    MESSAGE 'Сертификат уже отсканирован';
                } ELSE {
                    NEW pg = PaymentGiftCard {
                        LOCAL giftCard = GiftCard();
                        giftCard() <- giftCardSeriesNumber(barcodeInput());
                        giftCard(pg) <- giftCard();
                        receipt(pg) <- receipt;
                        paymentType(pg) <- minGiftCardPaymentType();
                        sum[Payment](pg) <- MIN NUMERIC[18,4](currentBalance(giftCard())), NUMERIC[18,4](price(giftCard())), (sumReceiptDetail(receipt) (-) sumGiftCardPayment(receipt));
                    }
                }    
            }
        } ELSE
            MESSAGE 'Сертификат не найден, истек или использован';
}

EXTEND FORM groupCashRegister PROPERTIES(grc) giftCardAsNotPayment, giftCardDepartment, giftCardPaymentType;

DESIGN groupCashRegister{
    topContainer{
        MOVE PROPERTY(giftCardAsNotPayment(grc));
        MOVE PROPERTY(giftCardDepartment(grc));
        MOVE PROPERTY(giftCardPaymentType(grc));
    }
}

EXTEND FORM groupsCashRegister PROPERTIES(grc) READONLY giftCardAsNotPayment, giftCardDepartment, giftCardPaymentType;

overCopy(GroupCashRegister old, GroupCashRegister new ) + {
    giftCardAsNotPayment(new) <- giftCardAsNotPayment(old);
    giftCardDepartment(new) <- giftCardDepartment(old);
    giftCardPaymentType(new) <- giftCardPaymentType(old);
} 

EXTEND FORM postReceiptPayment
    PROPERTIES addPaymentGiftCard(r) DRAW p SHOWIF allowPaymentGiftCard()
;

DESIGN postReceiptPayment {
    TOOLBARRIGHT{
        MOVE PROPERTY(addPaymentGiftCard(r)) BEFORE PROPERTY(formOk()){
            fill = 1;
            font = 'bold 28';
        }
    }
}

bonusPaid 'Оплачено бонусами' = DATA NUMERIC[18,4] (ReceiptGiftCardSaleDetail);
bonusPaid(ReceiptGiftCardSaleDetail d) += bonusPaid(d);
signedBonusPaid(ReceiptGiftCardSaleDetail d) += bonusPaid(d);

priceSum 'Сумма без скидки' = round(quantity(ReceiptGiftCardSaleDetail detail) * price(detail), roundCondition(departmentStore(detail)));
extraDiscountSum = ABSTRACT NUMERIC[18,4] (ReceiptGiftCardSaleDetail);
extraDiscountSum(ReceiptGiftCardSaleDetail d) += bonusPaid(d);
calcSum (ReceiptGiftCardSaleDetail detail) = priceSum(detail) (-) extraDiscountSum(detail);

WHEN LOCAL (CHANGED (quantity(ReceiptGiftCardSaleDetail detail)) OR CHANGED (price(detail)) OR CHANGED (extraDiscountSum(detail)) OR CHANGED (departmentStore(detail)))
    AND bonusPaid(detail) DO {
    sum (detail) <- calcSum(detail);   
}


sumBonusFIFOReceiptGiftCardSaleDetail (ReceiptGiftCardSaleDetail detail) =
    PARTITION UNGROUP toPayBonuses 
        PROPORTION STRICT ROUND(2) (sum(detail) (-) minBonusSum())/(sumReceiptDetail(detail) (-) minBonusSum()*countReceiptDetail(receipt(detail)))
        ORDER detail 
        BY receipt(detail);       
//    PARTITION UNGROUP toPayBonuses
//        LIMIT round(toPayBonuses(receipt(detail)) * sum(detail) / sumReceiptDetail(detail), roundCondition(departmentStore(receipt(detail))))
//        BY receipt(detail)
//        ORDER detail;       
        
overPostBonus(Receipt r) + { 
    bonusPaid(ReceiptGiftCardSaleDetail detail) <- sumBonusFIFOReceiptGiftCardSaleDetail(detail) WHERE receipt(detail) == r;
}      

extraSum(ReceiptGiftCardSaleDetail d) += bonusPaid(d); 