MODULE POSInvoice;

REQUIRE POS, SaleInvoice, SaleReturnInvoice, ContractPayment, SaleShipment, ZReportPayment, Warehouse, FiscalVMKInvoicePayment, FiscalSentoInvoicePayment;

NAMESPACE Sale;

passportPartyB 'Паспорт' = passportNumber(partyB(Contract contract));
shortNameOwnershipPartyB 'Форма собственности (сокр.)' = shortNameOwnership(partyB(Contract contract));
balanceACurrentDate 'Задолженность' = balanceA(Contract contract, currentDate());
lastPayment 'Платеж' = GROUP LAST Payment.Payment payment ORDER payment WHERE isCosted(payment) BY contract(payment);

defaultCurrencyPaymentInstallments = DATA Currency (); 
nameDefaultCurrencyPaymentInstallmentsy 'Валюта рассрочки' = name(defaultCurrencyPaymentInstallments()) CHARWIDTH 30;

defaultTypeExchangePaymentInstallments  = DATA TypeExchange ();
nameDefaultTypeExchangePaymentInstallments 'Тип обмена рассрочки' = name(defaultTypeExchangePaymentInstallments());

defaultTypeExchangeRepaymentInstallments  = DATA TypeExchange ();
nameDefaultTypeExchangeReaymentInstallments 'Тип обмена погашения' = name(defaultTypeExchangeRepaymentInstallments());

defaultOperationPaymentInstallments = DATA Operation ();
nameDefaultOperationPaymentInstallments 'Операция рассрочки' = name(defaultOperationPaymentInstallments()); 

EXTEND FORM options
    PROPERTIES() nameDefaultCurrencyPaymentInstallmentsy, nameDefaultTypeExchangePaymentInstallments, nameDefaultTypeExchangeReaymentInstallments,
                 nameDefaultOperationPaymentInstallments
;

DESIGN options {
    pane {
        NEW paymentInstallmentsy {
            caption = 'Рассрочка';
            MOVE PROPERTY(nameDefaultOperationPaymentInstallments());
            MOVE PROPERTY(nameDefaultCurrencyPaymentInstallmentsy());
            MOVE PROPERTY(nameDefaultTypeExchangePaymentInstallments());
            MOVE PROPERTY(nameDefaultTypeExchangeReaymentInstallments());
        }    
    }
}

setPassportLegalEntity  ABSTRACT ( ); 
setNameEmployee  ABSTRACT ( ); 

isReadonly() = DATA LOCAL BOOLEAN ();

nameLegalEntity = DATA LOCAL BPSTRING[150] ();     
passportNumberLegalEntity = DATA LOCAL BPSTRING[10] ();
phoneContact = DATA LOCAL BPSTRING[100] ();
postAddressContact = DATA LOCAL BPSTRING[100] ();  
noteInvoice = DATA LOCAL BPSTRING[255] ();  
idEmployee = DATA STRING[100] ();
nameEmployee = DATA ISTRING[60] ();

FORM paymentInstallments 'Рассрочка'
    PROPERTIES idEmployee() ON CHANGE setNameEmployee()  
    PROPERTIES READONLY nameEmployee()  
    
    PROPERTIES READONLYIF isReadonly() nameLegalEntity()     
        
    PROPERTIES READONLYIF isReadonly() passportNumberLegalEntity() ON CHANGE setPassportLegalEntity()
     
    PROPERTIES READONLYIF isReadonly() phoneContact()
    
    PROPERTIES READONLYIF isReadonly() postAddressContact()    
    
    PROPERTIES noteInvoice()        
    
    OBJECTS n = NUMERIC[18,4] PANEL
    PROPERTIES(n) sumPayment = VALUE
    
    OBJECTS pt = PaymentType PANEL 
    PROPERTIES(pt) SELECTOR name
    
    OBJECTS pc = PaymentCondition PANEL
    PROPERTIES(pc) SELECTOR description    
;

DESIGN paymentInstallments {
    NEW topContainer{
        horizontal = TRUE;
        NEW leftContainer {
            fill = 1;
            NEW supplierContainer {
                caption = 'Продавец';
                horizontal = TRUE;
                alignment = STRETCH; 
                MOVE PROPERTY(idEmployee()) {
                    caption = 'Код продавца';
                    fontSize = 24;
                    charWidth = 5;                    
                    panelCaptionVertical = TRUE;   
                    notNull = TRUE;                    
                }  
                MOVE PROPERTY(nameEmployee()) {
                    caption = 'ФИО продавца';
                    fontSize = 24;
                    panelCaptionVertical = TRUE;   
                    alignment = STRETCH;   
                    charWidth = 48;                      
                    notNull = TRUE;
                }                              
            }
            NEW customerContainer {
                caption = 'Покупатель';        
                MOVE PROPERTY(passportNumberLegalEntity()) {
                    caption = 'Паспорт';
                    fontSize = 24;
                    panelCaptionVertical = TRUE;   
                    alignment = STRETCH;   
                    notNull = TRUE;
                }
                MOVE PROPERTY(nameLegalEntity()) {
                    caption = 'ФИО';
                    fontSize = 24;
                    panelCaptionVertical = TRUE;
                    notNull = TRUE;
                }
                MOVE PROPERTY(postAddressContact()) {
                    caption = 'Адрес';
                    fontSize = 24;
                    panelCaptionVertical = TRUE;      
                    alignment = STRETCH;
                    notNull = TRUE;
                }   
                MOVE PROPERTY(phoneContact()) {
                    caption = 'Телефон';
                    fontSize = 24;
                    panelCaptionVertical = TRUE;      
                    alignment = STRETCH;
                    notNull = TRUE;
                }                                    
            }            
        }
        NEW sumContainer {
            caption = 'Платеж';
            MOVE PROPERTY(description(pc)) {
                caption = 'Условия рассрочки';
                fontSize = 32;   
                panelCaptionVertical = TRUE;
                charWidth = 15;
            }              
            MOVE PROPERTY(name(pt)) {
                caption = 'Тип платежа';
                fontSize = 32;   
                panelCaptionVertical = TRUE;
                charWidth = 15;
            }                
            MOVE PROPERTY(sumPayment) {
                caption = 'Сумма первоначального платежа';
                fontSize = 32;   
                panelCaptionVertical = TRUE;
                alignment = STRETCH;
            }         
        }
    }
    NEW bottomContainer {
        caption = 'Примечание';
        MOVE PROPERTY(noteInvoice()) {
            caption = '';
            fontSize = 24;
            panelCaptionVertical = TRUE;
            charWidth = 76;
        }        
    }
    MOVE TOOLBARBOX;
    REMOVE TOOLBARLEFT;
    REMOVE PROPERTY(formRefresh());
}

setPassportLegalEntity () + { 
    INPUT s = BPSTRING[10] DO {
        passportNumberLegalEntity() <- s; 
        FOR passportNumber(LegalEntity l) == s AND NOT isReadonly() DO {
            nameLegalEntity() <- name(l);
            phoneContact() <- phone[Contact](l);
            postAddressContact() <- postAddress[Contact](l);
            isReadonly() <- TRUE;
        }
    }
}

setNameEmployee () + { 
    INPUT s = STRING[100] DO
        FOR id(Employee e) == s DO {
            idEmployee() <- s;    
            nameEmployee() <- shortName(e);
        } 
}

createInvoice(Receipt receipt, LegalEntity customer, CustomUser employee, NUMERIC[18,4] sum, PaymentType paymentType, PaymentCondition paymentCondition, STRING[100] note)   {       
    NEW i = UserInvoice {
        operation(i) <- defaultOperationPaymentInstallments();
        supplierStock(i) <- departmentStore(receipt);
        supplier(i) <- legalEntity[Stock](departmentStore(receipt));
        customer(i) <- customer;
        customerStock(i) <- defaultStock(customer);
        date(i) <- date(receipt);
        time(i) <- time(receipt);
        paymentCondition(i) <- paymentCondition;
        priceListType(i) <- defaultPriceListType(operation(i));
        note(i) <- note;
        createShipment(i) <- TRUE;
        isPosted(i) <- TRUE;
        createdUser(i) <- employee;
        postedUser(i) <- employee;
        NEW c = UserContractSku {
            supplier(c) <- legalEntity[Stock](departmentStore(receipt));
            customer(c) <- customer;
            dateFrom(c) <- date(receipt);
            currency(c) <- defaultCurrencyPaymentInstallments();
            type(c) <- ContractSkuType.sale;
            paymentCondition(c) <- paymentCondition;
            typeExchange(c) <- defaultTypeExchangePaymentInstallments();
            contractSku(i) <- c;            
        }
        
        FOR receipt(ReceiptDetail detail) == receipt NEW d = UserInvoiceDetail DO {
            userInvoice(d) <- i;
            sku(d) <- sku(detail);
            quantity(d) <- quantity(detail);
            invoiceSum(d) <- sum(detail);
            shipmentSum(d) <- sum(detail);
            VAT(d) <- VAT(detail);
            valueVAT(d) <- valueVAT(detail);
            invoicePrice(d) <- price(detail);
            price(d) <- invoicePrice (d) * 100/(100 + valueVAT(d));
        }
        
        NEW p = Payment.Payment {
            operation(p) <- defaultPaymentOperation();        
            date(p) <- date(receipt);
            time(p) <- time(receipt); 
            payer(p) <- customer;
            beneficiary(p) <- legalEntity[Stock](departmentStore(receipt));
            sum(p) <- sum;
            contract(p) <- contractSku(i);
            isPosted(p) <- TRUE;
            IF debt(i) >= sumContract(p) THEN {
                cost(p, i) <- sumContract(p);    
            } ELSE IF debt(i) < sumContract(p) THEN{
                cost(p, i) <- debt(i);     
            } 
            dataFiscalType(p) <- IF sid(paymentType) == 'card' THEN 1 ELSE 0;
            type(p) <- IF sid(paymentType) == 'card' THEN 1 ELSE 0;
            
            DELETE ReceiptDetail detail WHERE receipt(detail) == receipt;                                   
            DELETE receipt;
            
            IF model(groupCashRegister(currentCashRegister())) AND NOT fiscalSkip(receipt) THEN {
                check();
                IF NOT canceled() THEN {
                    printReceipt(i, p); 
                    IF printReceiptResult() THEN {
                        zReport(p) <- currentZReport();             
                        apply();
                        createCurrentReceipt();
                    }   
                } 
            }                 
            ELSE {         
                apply();
                createCurrentReceipt(); 
            }
        }
    }
}

createPaymentInstallments 'Рассрочка'(Receipt receipt)  { 
    IF quantityReceiptDetail(receipt) THEN {
        passportNumberLegalEntity() <- NULL;
        nameLegalEntity() <- NULL;
        phoneContact() <- NULL;
        postAddressContact() <- NULL;
        noteInvoice() <- NULL;
        idEmployee() <- NULL;
        nameEmployee() <- NULL;        
        DIALOG paymentInstallments OBJECTS n INPUT, pt INPUT, pc INPUT DO {
            FOR passportNumber(LegalEntity l) == passportNumberLegalEntity() AND id(Employee e) == idEmployee() DO { 
                createInvoice(receipt, l, e, n, pt, pc, noteInvoice());
            } ELSE {
                FOR id(Employee e) == idEmployee() NEW l = LegalEntity DO {
                    name[LegalEntity](l) <- nameLegalEntity();
                    passportNumber(l) <- passportNumberLegalEntity();
                    phone[Contact](l) <- phoneContact();
                    postAddress[Contact](l) <- postAddressContact();
                    isCustomer[LegalEntity](l) <- TRUE;
                    FOR shortName(Ownership ownership) == 'Ф.Л.' DO {
                        ownership(l) <- ownership;
                    }
                    FOR name(LegalEntityGroup group) == 'Покупатели' DO {
                        legalEntityGroup(l) <- group;
                    }
                    NEW s = Warehouse {
                        name(s) <- nameLegalEntity();
                        legalEntity(s) <- l;
                        FOR name(WarehouseGroup gr) == 'Склады контрагентов' DO {
                            warehouseGroup(s) <- gr;
                        }
                    }
                    createInvoice(receipt, l, e, n, pt, pc, noteInvoice());
                }
            }    
        }
        isReadonly() <- NULL;
    }         
}

background (Contract contract, Receipt receipt)= RGB(255,75,75) IF (balanceACurrentDate(contract) (+) sumReceiptDetail(receipt) > 0.0); 

FORM prePayment 'Предоплата'
    OBJECTS r = Receipt PANEL 
    OBJECTS c = Contract
    PROPERTIES(c) READONLY BACKGROUND background(c, r) namePartyB, passportPartyB, balanceACurrentDate
    FILTERS balanceACurrentDate(c) < 0,
            shortNameOwnershipPartyB(c) == 'Ф.Л.',
            legalEntity[Stock](departmentStore(r)) == partyA(c)
    
    PROPERTIES noteInvoice()
;

DESIGN prePayment {
    REMOVE BOX(r);
    MOVE BOX(c) {
        PROPERTY(namePartyB(c)){
            caption = 'ФИО';    
        }   
    }
    NEW bottomContainer {
        caption = 'Примечание';
        MOVE PROPERTY(noteInvoice()) {
            caption = '';
            fontSize = 24;
            panelCaptionVertical = TRUE;
            charWidth = 76;
        }        
    }
    MOVE TOOLBARBOX;
}

createInvoicePrePayment 'Предоплата'(Receipt receipt)   { 
    IF quantityReceiptDetail(receipt) THEN {
        noteInvoice() <- NULL;
        DIALOG prePayment OBJECTS r = receipt, c INPUT DO {
            NEW i = UserInvoice {
                operation(i) <- defaultOperationPaymentInstallments();
                supplierStock(i) <- departmentStore(receipt);
                supplier(i) <- legalEntity[Stock](departmentStore(receipt));
                customer(i) <- partyB(c);
                customerStock(i) <- Stock.defaultStock[LegalEntity](partyB(c));
                date(i) <- date(receipt);
                time(i) <- time(receipt);
                contractSku(i) <- c;
                paymentCondition(i) <- paymentCondition[Contract](c);
                priceListType(i) <- defaultPriceListType(operation(i));                
                note(i) <- noteInvoice();
                createShipment(i) <- TRUE;
                isPosted(i) <- TRUE;
                FOR Payment.Payment p == lastPayment(c) DO {
                    IF isCosted(p) < sumReceiptDetail(receipt) THEN {
                        cost(p, i) <- isCosted(p);    
                    } ELSE {
                        cost(p, i) <- sumReceiptDetail(receipt);                     
                    }
                }
                FOR receipt(ReceiptDetail detail) == receipt NEW d = UserInvoiceDetail DO {
                    userInvoice(d) <- i;
                    sku(d) <- sku(detail);
                    quantity(d) <- quantity(detail);
                    invoiceSum(d) <- sum(detail);
                    shipmentSum(d) <- sum(detail);
                    VAT(d) <- VAT(detail);
                    valueVAT(d) <- valueVAT(detail);
                    invoicePrice(d) <- price(detail);
                    price(d) <- invoicePrice (d) * 100/(100 + valueVAT(d));
                }
            }
            DELETE ReceiptDetail detail WHERE receipt(detail) == receipt;                                   
            DELETE receipt;            
            apply();
            createCurrentReceipt();             
        }
    }   
}


EXTEND FORM POS
    PROPERTIES(r) SHOWIF currentZReport() createPaymentInstallments, createInvoicePrePayment
;
DESIGN POS {
    misc {
        NEW invoice {
            alignment = STRETCH;
            caption = 'Накладная';
            MOVE PROPERTY(createPaymentInstallments(r)) {alignment = STRETCH; focusable = FALSE; font = 'bold 24';  }
            MOVE PROPERTY(createInvoicePrePayment(r)) {alignment = STRETCH; focusable = FALSE; font = 'bold 24';  }
        }
    }
}