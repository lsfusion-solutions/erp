MODULE RepricingPriceList;

REQUIRE PricingPriceList, Repricing, PriceListLedger;

NAMESPACE Repricing;

minManagementQuantityToRepricing 'Минимальное количество для управленческой переоценки' = DATA NUMERIC[14,4] ();
updateDateTime 'Обновлять дату/время после создания пероценки (Рабочий стол / Переоценка)'  = DATA BOOLEAN ();

EXTEND FORM options 
    PROPERTIES () minManagementQuantityToRepricing, updateDateTime
;
DESIGN options {
    rPanel {
        MOVE PROPERTY(minManagementQuantityToRepricing());
        MOVE PROPERTY(updateDateTime());
    }
}

overPriceListUser  ABSTRACT LIST ( RepricingDetail);

calculateDashboardRepricing 'По группам'(DepartmentStore d, Operation o, DATETIME dt)  { 
    calculateDashboardRepricing(d, (OVERRIDE calcPriceListType(o), retailCalcPriceListType(d)), (OVERRIDE priceListType(o), retailPriceListType(d)), dt);
} TOOLBAR;

calculateDashboardAutoRepricing 'По надбавкам и прайсам'(DepartmentStore d, Operation o, DATETIME dt)  { 
    calculateDashboardAutoRepricing(d, (OVERRIDE calcPriceListType(o), retailCalcPriceListType(d)), (OVERRIDE priceListType(o), retailPriceListType(d)), dt);
} TOOLBAR;

calculateDashboardManagementRepricing 'По прайсам'(DepartmentStore d, Operation o, DATETIME dt)  { 
    calculateDashboardManagementRepricing(d, (OVERRIDE priceListType(o), retailPriceListType(d)), dt);
}

calculateDashboardManagementRepricingForm 'По прайсам'(DepartmentStore d, Operation o, DATETIME dt)  { 
    calculateDashboardManagementRepricing(d, o, dt);
    formRefresh();
} TOOLBAR;

inRepForm =  DATA LOCAL BOOLEAN (UserRepricing);  

overCreateDashboardRepricingNotForm  ABSTRACT LIST ( UserRepricing);

createDashboardRepricingNotForm 'Создать переоценку'(Stock d, Operation o, DATETIME dt)  { 
    IF (GROUP SUM 1 IF inDashboardRepricing(Sku sku)) THEN {
        NEW r = UserRepricing {
            departmentStore(r) <- d;
            operation(r) <- o;
            date(r) <- toDate(dt);
            time(r) <- toTime(dt);  
            isPosted(r) <- TRUE;
            
            incrementValue(defaultNumeratorUserRepricing());
            number(r) <- incrementedValue();
            series(r) <- series(defaultNumeratorUserRepricing());
    
            FOR inDashboardRepricing(Sku sku) AND NOT skipRepricing(sku, d) ORDER orderRepricingDetail(sku) NEW rd = UserRepricingDetail DO {
                userRepricing(rd) <- r;
                sku(rd) <- sku;
                quantity(rd) <- currentBalance(sku, d) IF currentBalance(sku, d) > 0;
                quantity(rd) <- NULL  WHERE quantity(rd) < minManagementQuantityToRepricing();
                retailPrice(rd) <- managementRetailPrice(sku);
                curRetailPrice(rd) <- prevRetailPricingPriceB(sku, d, dt);
                price(rd) <- round2(prevPriceA(SystemLedgerPriceListType.supplierPricingPriceListType, sku, d, dt));
                overPriceListUser(rd);
            }
            overCreateDashboardRepricingNotForm(r);            
            inRepForm(r) <- TRUE;
        }
    }
} TOOLBAR;



skipManagementRepricing = ABSTRACT BOOLEAN (DepartmentStore);

toManagementRepricingOperation  = DATA Repricing.Operation ();
nameToManagementRepricingOperation 'Операция для переоценки упр.' = name(toManagementRepricingOperation());

createOverManagementRepricing  ABSTRACT LIST ( Stock);

createManagementRepricingAll 'Создать автоматическую переоценку упр.'(DepartmentStore department)  { 
    NEWSESSION {
        calculateDashboardManagementRepricing(department, toManagementRepricingOperation(), currentDateTime());
        createDashboardRepricingNotForm(department, toManagementRepricingOperation(), currentDateTime()); 
        createOverManagementRepricing(department);
        APPLY;
    }
}

createManagementRepricingAllStocks 'Создать автоматическую переоценку упр.'()  { 
    FOR active(DepartmentStore department) AND isCompany(department) AND NOT skipManagementRepricing(department)  DO {
    	createManagementRepricingAll(department);
	}
}

dataCountTreadsRepricingAllStocks = DATA INTEGER ();
countTreadsRepricingAllStocks 'Количество потоков для создания переоценок'() = OVERRIDE dataCountTreadsRepricingAllStocks(), 4;

createManagementRepricingAllStocksMultithread 'Создать автоматическую переоценку упр. (Многопоточно)'()  { 
    NEWEXECUTOR 
        FOR active(DepartmentStore department) AND isCompany(department) AND NOT skipManagementRepricing(department)  DO 
            NEWTHREAD NEWSESSION NEWSQL {
                createManagementRepricingAll(department);
            } 
	THREADS countTreadsRepricingAllStocks();
}

createAutoRepricingAll 'Создать автоматическую переоценку по надбавкам и прайсам'(DepartmentStore department)  { 
    NEWSESSION {
        calculateDashboardAutoRepricing(department, toManagementRepricingOperation(), currentDateTime());
        createDashboardRepricingNotForm(department, toManagementRepricingOperation(), currentDateTime()); 
        createOverManagementRepricing(department);
        APPLY;
    }
}

createAutoRepricingAllStocks 'Создать автоматическую переоценку по надбавкам и прайсам'()  { 
    FOR active(DepartmentStore department) AND isCompany(department) AND NOT skipManagementRepricing(department)  DO {
    	createAutoRepricingAll(department);
	}
}

createAutoRepricingAllStocksMultithread 'Создать автоматическую переоценку по надбавкам и прайсам (Многопоточно)'()  { 
    NEWEXECUTOR 
        FOR active(DepartmentStore department) AND isCompany(department) AND NOT skipManagementRepricing(department)  DO 
            NEWTHREAD NEWSESSION NEWSQL {
                createAutoRepricingAll(department);
            } 
	THREADS countTreadsRepricingAllStocks();
}

EXTEND FORM options
    PROPERTIES() nameToManagementRepricingOperation, createManagementRepricingAllStocks, createAutoRepricingAllStocks, countTreadsRepricingAllStocks, 
                 createManagementRepricingAllStocksMultithread, createAutoRepricingAllStocksMultithread
;
DESIGN options {
    rPanel {
        NEW managementRepricing {
            caption = 'Автоматическая переоценка упр.';
            MOVE PROPERTY(nameToManagementRepricingOperation());
            MOVE PROPERTY(createManagementRepricingAllStocks());
            MOVE PROPERTY(createAutoRepricingAllStocks());
            MOVE PROPERTY(countTreadsRepricingAllStocks());
            MOVE PROPERTY(createManagementRepricingAllStocksMultithread());
            MOVE PROPERTY(createAutoRepricingAllStocksMultithread());
        }
    }
}