MODULE RepricingPurchaseInvoiceExtra;

REQUIRE RepricingPurchaseInvoice;

PRIORITY Purchase;

NAMESPACE Repricing;

EXTEND FORM repricings
    PROPERTIES (p) READONLY descriptionInvoice
;

EXTEND FORM invoices
    PROPERTIES (i) READONLY descriptionRepricing
;


//-- Одна дооценка к одной накладной

createExtraValuationNotFormExtra 'Создать дооценку'(Stock department, DATETIME timeFrom, DATETIME timeTo, Operation operation)  { 
    LOCAL in = BOOLEAN (Invoice);
    in(Invoice invoice) <- filterToRepricingDate (invoice, department, timeFrom, timeTo);
    IF (GROUP SUM 1 IF in(Invoice invoice)) THEN {
        
        LOCAL repricingQuantity =  NUMERIC[16,5] (InvoiceDetail);
        repricingQuantity(InvoiceDetail detail) <- NULL;
        
        positive(InvoiceDetail detail) <- NULL;
        positive(InvoiceDetail detail) <- in(invoice(detail));
        positive(InvoiceDetail detail) <- NULL WHERE positive(detail) AND skipRepricing(skuGroup(sku(detail)));        
        positive(InvoiceDetail detail) <- prevRetailPricingPriceB(detail) != retailExtraPrice(detail) WHERE positive(detail);
        repricingQuantity(InvoiceDetail detail) <- toRepricingQuantityTo(detail, timeTo) WHERE positive(detail);
        positive(InvoiceDetail detail) <- repricingQuantity(detail) > 0 AND isStockSku(detail) WHERE positive(detail);
        positive(InvoiceDetail detail) <- maxInvoiceDetail(sku(detail), invoice(detail)) == detail WHERE positive(detail);
        positive(InvoiceDetail detail) <- NULL WHERE skipExtraValuation(sku(detail), department) AND positive(detail);                     
        positive(InvoiceDetail detail) <- NULL WHERE positive(detail) AND NOT price(detail);
        IF minQuantityToRepricing() THEN {
            positive(InvoiceDetail detail) <- NULL WHERE repricingQuantity(detail) < minQuantityToRepricing() AND positive(detail);
        }
          
        FOR positive(InvoiceDetail detail) DO {
            overPositive(detail);
        }              
    
        IF NOT skipNegativeRepricing() THEN {
            negative(InvoiceDetail detail) <- NULL;
            negative(InvoiceDetail detail) <- in(invoice(detail));
            negative(InvoiceDetail detail) <- NULL WHERE negative(detail) AND skipRepricing(skuGroup(sku(detail)));        
            negative(InvoiceDetail detail) <- prevRetailPricingPriceB(detail) != retailExtraPrice(detail) WHERE negative(detail);
            repricingQuantity(InvoiceDetail detail) <- toRepricingQuantityTo(detail, timeTo) WHERE negative(detail);
            negative(InvoiceDetail detail) <- repricingQuantity(detail) < 0 AND isStockSku(detail) WHERE negative(detail);
            negative(InvoiceDetail detail) <- maxInvoiceDetail(sku(detail), invoice(detail))==detail WHERE negative(detail);
            negative(InvoiceDetail detail) <- NULL WHERE skipExtraValuation(sku(detail), department) AND negative(detail);         
            negative(InvoiceDetail detail) <- NULL WHERE negative(detail) AND NOT price(detail); 
            IF minQuantityToRepricing() THEN {
                negative(InvoiceDetail detail) <- NULL WHERE delta(repricingQuantity(detail),0) < minQuantityToRepricing() AND negative(detail);
            }
        
            FOR negative(InvoiceDetail detail) DO {
                overNegative(detail);
            }
        }
                
        IF (GROUP SUM 1 IF positive(InvoiceDetail detail) OR negative(detail)) THEN {
            FOR [GROUP SUM 1 IF (positive(InvoiceDetail detail) OR negative(detail) ) BY invoice(detail)](Invoice i) DO  NEW r = UserRepricing {
                departmentStore(r) <-  department;
                operation(r) <- operation;
                skipChangeLedger(r) <- TRUE;
                isPosted(r) <- TRUE;
                date(r) <-  date(i);
                time(r) <- time(i);                
                
        
                // дооценка в прямую сторону
                FOR positive(InvoiceDetail detail) AND invoice(detail) == i NEW rd = UserRepricingDetail DO {
                        userRepricing(rd) <- r;
                        sku(rd) <- sku(detail);
                        quantity(rd) <- repricingQuantity(detail);
        
                        curPrice(rd) <- round2(prevSupplierPricingPriceB(sku(detail), department, pricingDateTime(detail)));
                        curRetailPrice(rd) <- prevRetailPricingPriceB(detail);
        
//                        price(rd) <- IF NOT keepSupplierPriceInRepricing(detail, department) THEN price(detail) ELSE curPrice(rd);
                        price(rd) <- price(detail);
                        retailPrice(rd) <- retailExtraPrice(detail);                          
        
                        overExtraValuation(rd, detail);
                }
        
                // дооценка в обратную сторону
                FOR negative(InvoiceDetail detail) AND invoice(detail) == i NEW rd = UserRepricingDetail DO {
                        userRepricing(rd) <- r;
                        sku(rd) <- sku(detail);
                        quantity(rd) <- - repricingQuantity(detail);
        
                        curPrice(rd) <- price(detail);
                        curRetailPrice(rd) <- retailExtraPrice(detail);
        
                        price(rd) <- price(detail);
                        retailPrice(rd) <- prevRetailPricingPriceB(detail);                          
        
                        overExtraRevertValuation(rd, detail);
                }
                                
                
                repricing(i) <- r ;
                createExtraValuationStockTimeOperationNotForm(r);   
                repricingForm() <- r;     
                         
            } 
        }
    }
} 

isOverExtraValuationAllStocks () += TRUE;
createOverExtraValuationAllStocks () + { 
    FOR DepartmentStore department IS DepartmentStore AND isCompany(department) AND NOT skipExtraValuation(department) DO {
        createExtraValuationNotFormExtra(department, toRepricingDateTime(), toRepricingDateTimeTo(), toRepricingOperation());                           
    }  
}

toRepricingDateTimeToInvoice 'Дата/время документа (по)' (Invoice i) = OVERRIDE dateTimeToDateTime(sum(shipmentDate(i), 2), shipmentTime(i)), currentDateTime(); 

createRepricing 'Акт переоценки (дооценка)'(Invoice i)  { 
    IF isPosted(i) AND createShipment(i) AND NOT costLedger(customerStock(i)) AND NOT explicitBatchLedger[DepartmentStore](customerStock(i)) THEN {
        LOCAL to = BOOLEAN ();
        to() <- NULL;
        
        IF repricing(i) THEN { 
            ASK 'Для данной накладной уже есть документ дооценки. Хотите продолжить?' DO {
                to() <- TRUE;
            } 
        }
    
        IF to() OR (NOT repricing(i))  THEN {
            
            LOCAL repricingQuantity =  NUMERIC[16,5] (InvoiceDetail);
            repricingQuantity(InvoiceDetail detail) <- NULL;
            
            positive(InvoiceDetail detail) <- NULL;
            positive(InvoiceDetail detail) <- TRUE WHERE invoice(detail) == i;
            positive(InvoiceDetail detail) <- NULL WHERE positive(detail) AND skipRepricing(skuGroup(sku(detail)));        
            positive(InvoiceDetail detail) <- prevRetailPricingPriceB(detail) != retailExtraPrice(detail) WHERE positive(detail);
            repricingQuantity(InvoiceDetail detail) <- toRepricingQuantityTo(detail, toRepricingDateTimeToInvoice(i)) WHERE positive(detail);
            positive(InvoiceDetail detail) <- repricingQuantity(detail) > 0 AND isStockSku(detail) WHERE positive(detail);
            positive(InvoiceDetail detail) <- maxInvoiceDetail(sku(detail), invoice(detail)) == detail WHERE positive(detail);
            positive(InvoiceDetail detail) <- NULL WHERE skipExtraValuation(sku(detail), customerStock(detail)) AND positive(detail);                     
            positive(InvoiceDetail detail) <- NULL WHERE positive(detail) AND NOT price(detail);
            IF minQuantityToRepricing() THEN {
                positive(InvoiceDetail detail) <- NULL WHERE repricingQuantity(detail) < minQuantityToRepricing() AND positive(detail);
            }
              
            FOR positive(InvoiceDetail detail) DO {
                overPositive(detail);
            }              
        
            IF NOT skipNegativeRepricing() THEN {
                negative(InvoiceDetail detail) <- NULL;
                negative(InvoiceDetail detail) <- TRUE WHERE invoice(detail) == i;
                negative(InvoiceDetail detail) <- NULL WHERE negative(detail) AND skipRepricing(skuGroup(sku(detail)));        
                negative(InvoiceDetail detail) <- prevRetailPricingPriceB(detail) != retailExtraPrice(detail) WHERE negative(detail);
                repricingQuantity(InvoiceDetail detail) <- toRepricingQuantityTo(detail, toRepricingDateTimeToInvoice(i)) WHERE negative(detail);
                negative(InvoiceDetail detail) <- repricingQuantity(detail) < 0 AND isStockSku(detail) WHERE negative(detail);
                negative(InvoiceDetail detail) <- maxInvoiceDetail(sku(detail), invoice(detail))==detail WHERE negative(detail);
                negative(InvoiceDetail detail) <- NULL WHERE skipExtraValuation(sku(detail), customerStock(detail)) AND negative(detail);         
                negative(InvoiceDetail detail) <- NULL WHERE negative(detail) AND NOT price(detail); 
                IF minQuantityToRepricing() THEN {
                    negative(InvoiceDetail detail) <- NULL WHERE delta(repricingQuantity(detail),0) < minQuantityToRepricing() AND negative(detail);
                }
            
                FOR negative(InvoiceDetail detail) DO {
                    overNegative(detail);
                }
            }
                    
            IF (GROUP SUM 1 IF positive(InvoiceDetail detail) OR negative(detail)) THEN NEWSESSION NESTED(positive[InvoiceDetail], negative[InvoiceDetail], repricingQuantity[InvoiceDetail]){
                NEW r = UserRepricing {
                    departmentStore(r) <-  customerStock(i);
                    operation(r) <- toRepricingOperation();
                    skipChangeLedger(r) <- TRUE;
                    isPosted(r) <- TRUE;
                    date(r) <- date(i);
                    time(r) <- time(i);                
                    
                    beforeDate(r) <- date(r);
                    time(r) <- 06:00;
            
                    // дооценка в прямую сторону
                    FOR positive(InvoiceDetail detail) AND invoice(detail) == i NEW rd = UserRepricingDetail DO {
                            userRepricing(rd) <- r;
                            sku(rd) <- sku(detail);
                            quantity(rd) <- repricingQuantity(detail);
            
                            curPrice(rd) <- round2(prevSupplierPricingPriceB(sku(detail), customerStock(i), pricingDateTime(detail)));
                            curRetailPrice(rd) <- prevRetailPricingPriceB(detail);
            
    //                        price(rd) <- IF NOT keepSupplierPriceInRepricing(detail, department) THEN price(detail) ELSE curPrice(rd);
                            price(rd) <- price(detail);
                            retailPrice(rd) <- retailExtraPrice(detail);                          
            
                            overExtraValuation(rd, detail);
                    }
            
                    // дооценка в обратную сторону
                    FOR negative(InvoiceDetail detail) AND invoice(detail) == i NEW rd = UserRepricingDetail DO {
                            userRepricing(rd) <- r;
                            sku(rd) <- sku(detail);
                            quantity(rd) <- - repricingQuantity(detail);
            
                            curPrice(rd) <- price(detail);
                            curRetailPrice(rd) <- retailExtraPrice(detail);
            
                            price(rd) <- price(detail);
                            retailPrice(rd) <- prevRetailPricingPriceB(detail);                          
            
                            overExtraRevertValuation(rd, detail);
                    }
                                    
                    
                    repricing(i) <- r ;
                    createExtraValuationStockTimeOperationNotForm(r);   
                    
                    SHOW userRepricing OBJECTS p = r DOCKED;                        
                } 
            }
        }    
    } ELSE {
        MESSAGE 'Для накладной не требуется дооценка.';
    } 
} 

EXTEND FORM invoices
    PROPERTIES (i) createRepricing PANEL 
;
DESIGN invoices {
    createdContainer {
        MOVE PROPERTY (createRepricing(i)) { alignment = STRETCH; };
    }
}

captionInvoice 'Основание (ТТН)' (Repricing r) = CONCAT '', 'ТТН № '+seriesNumber(defaultInvoice(r)), ' от '+toDateDDMMYYYY(date(defaultInvoice(r)));

EXTEND FORM repricing
    PROPERTIES (p)  captionInvoice
;
EXTEND FORM repricingPeriod
    PROPERTIES (p)  captionInvoice
;
