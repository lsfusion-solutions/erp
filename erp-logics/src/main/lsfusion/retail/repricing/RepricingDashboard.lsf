MODULE RepricingDashboard;

REQUIRE Dashboard, RepricingLabel, RepricingPriceList;//, RepricingMachinery;

NAMESPACE Repricing;

//------------------------ Управленческая переоценка ----------------------------//

createRepricingLabelTransaction 'Распечатать ценники'(DepartmentStore departmentStore, Operation operation, DATETIME dateTime)  { 
	NEWSESSION NESTED (select[Sku], inDashboardRepricing[Sku], managementRetailPrice[Sku], managementPriceListPrice[Sku]) {
	    IF (GROUP SUM 1 IF inDashboardRepricing(Sku sku)) THEN {
	        select(Sku sku, LabelType labelType, departmentStore) <- inDashboardRepricing(sku) AND (select(sku) OR NOT countSelectSkus()) AND inPrint(labelType, sku, departmentStore);   
	        FOR [ GROUP SUM 1 IF select(Sku s,LabelType l,departmentStore) BY l](LabelType labelType) NEW t = LabelTransaction DO { 
	            departmentStore(t) <- departmentStore;
	            labelType(t) <- labelType;
	            priceListType(t) <- OVERRIDE priceListType(operation), retailPriceListType(departmentStore);   
	            date(t) <- toDate(dateTime);      
	            time(t) <- toTime(dateTime);      
	            
	            FOR select(Sku sku, labelType, departmentStore) AND PriceListType pt == overPriceListType(t) NOINLINE (pt) INLINE NEW d = LabelTransactionDetail DO {
	                
	                labelTransaction(d) <- t;
	                sku(d) <- sku;
	    
	                name(d) <- name(sku(d));
	                createAttribute(d);
	    
	                quantity(d) <- IF include(labelType, sku(d))
	                                                        THEN INTEGER(currentBalance(sku, departmentStore))
	                                                     ELSE count(labelType, sku(d));
	                                                     
	                //price(d) <- calcPrice(pt, d); // проблема при печати ценников с ценой по надбавкам (из операции, магазина или поставщика), не тот вид цен
	                price(d) <- managementRetailPrice(sku);
	                retailPrice(d) <- overRetailPrice(d);
	            } 
	            print(t);
	        }
	    }
	    apply();
	}
} TOOLBAR;

//createSnapshotRepricingLabelTransactionDepartmentStoreOperationDateTime 'Перепечатать ценники' = (departmentStore, operation, dateTime) NEWSESSION NESTED (selectSku, inDashboardRepricingSku, managementRetailPriceSku, managementPriceListPriceSku) {
//
//    NEW t = LabelTransaction {
//        departmentStoreLabelTransaction(t) <- departmentStore;
//        priceListTypeLabelTransaction(t) <- OVERRIDE retailPriceListTypeDepartmentStore(departmentStore), priceListTypeOperation(operation);    
//        dateLabelTransaction(t) <- toDate(dateTime);      
//        timeLabelTransaction(t) <- toTime(dateTime);          
//
//        FOR selectSku(sku) NEW d = LabelTransactionDetail DO {
//            labelTransactionLabelTransactionDetail(d) <- t;
//            skuLabelTransactionDetail(d) <- sku;
//
//            nameLabelTransactionDetail(d) <- nameSku(skuLabelTransactionDetail(d));
//            documentQuantityLabelTransactionDetail(d) <- currentBalanceSkuStock(sku, departmentStore); 
//
//            createAttributeLabelTransactionDetail(d);
//        }
//        
//        FORM customLabelTransaction OBJECTS l = t;
//        IF formResult() == FormResult.ok THEN {    
//            printLabelTransaction(t);
//        }  
//    }
//    apply();
//} TOOLBAR;
overCreateRepricingLabel  ABSTRACT LIST ( LabelTransaction);
createSnapshotRepricingLabelTransactionDepartmentStore 'Перепечатать ценники'(Stock departmentStore, Operation operation, DATETIME dateTime)  { 
    IF countSelectSkus() THEN  NEWSESSION NESTED (select[Sku], inDashboardRepricing[Sku], managementRetailPrice[Sku], managementPriceListPrice[Sku]) {
        DIALOG selectLabelTypes OBJECTS ds = departmentStore, l INPUT NOMANAGESESSION DO { 

            IF NOT countSelectType() THEN {
                select(l) <- TRUE;
            }            
            FOR select(LabelType type) DO {
                NEW t = LabelTransaction {
                    departmentStore(t) <- departmentStore;
                    priceListType(t) <- OVERRIDE priceListType(operation), retailPriceListType(departmentStore);    
                    date(t) <- toDate(dateTime);      
                    time(t) <- toTime(dateTime);
                    labelType(t) <- type;
                    
                    FOR PriceListType pt == overPriceListType(t) NOINLINE DO {
                        FOR select(Sku sku) AND NOT exclude(type, sku) ORDER nameSkuGroup2(sku), nameSkuGroup3(sku), nameSkuGroup4(sku), name(sku) INLINE NEW d = LabelTransactionDetail DO {
                            labelTransaction(d) <- t;
                            sku(d) <- sku;
                
                            name(d) <- name(sku(d));
                            documentQuantity(d) <- currentBalance(sku, departmentStore); 
                
                            createAttribute(d);                      
                   
                            //price(d) <- OVERRIDE documentPrice(d), calcPrice(pt, d); // проблема при печати ценников с ценой по надбавкам (из операции, магазина или поставщика), не тот вид цен
                            price(d) <- OVERRIDE documentPrice(d), managementRetailPrice(sku);
                            retailPrice(d) <- overRetailPrice(d) WHERE overRetailPrice(d);   
                    
        //                        quantityLabelTransactionDetail(d) <- IF includeLabelTypeSku(labelTypeLabelTransactionDetail(d), skuLabelTransactionDetail(d)) THEN 
        //                                                                INTEGER(documentQuantityLabelTransactionDetail(d))
        //                                                             ELSE 
        //                                                                countLabelTypeSku(labelTypeLabelTransactionDetail(d), skuLabelTransactionDetail(d));  
                                                                                                                                                                                               
                            quantity(d) <- IF NOT countLabel(departmentStore) 
                                                                     THEN (IF include(labelType(d), sku(d)) 
                                                                        THEN INTEGER(documentQuantity(d))
                                                                         ELSE count(labelType(d), sku(d)))
                                                                     ELSE countLabel(departmentStore);                                                                                                                                                                                              
                                                                                                                                                                                               
                        }
                    }
                    overCreateRepricingLabel(t);
                    
                    IF change(departmentStore) THEN {
                        LOCAL printed = BOOLEAN();
                        printed() <- NULL;
                        DIALOG customLabelTransaction OBJECTS l = t NOMANAGESESSION DO {    
                            print(t);
                            printed() <- TRUE;
                        }             
                        IF NOT printed() THEN {
                            cancel();
                        }             
                    } ELSE {
                        print(t);
                    }
                }
            }
            APPLY;
        }                 
    }
} TOOLBAR;

FORM repricingDashboard 'Переоценка'
    OBJECTS d = DepartmentStore PANEL
    PROPERTIES (d) SELECTOR name
    FILTERS isCompany(d)
        
    OBJECTS o = Repricing.Operation PANEL
    PROPERTIES (o) SELECTOR name
    FILTERS in(currentUser(), o)

    OBJECTS t=DATETIME PANEL
    PROPERTIES(t) VALUE
    
    TREE skuTree sg = SkuGroup PARENT parent(sg)
    PROPERTIES READONLY order(sg), skuTreeName = name(sg)
    ORDERS order(sg), skuTreeName
    FILTERGROUP inactive FILTER 'Активные' active(sg) DEFAULT
    
    OBJECTS sk=Sku
    PROPERTIES(sk)          inDashboardRepricing, select
    PROPERTIES(sk) READONLY idBarcode, id, name ON CONTEXTMENU showMovementSku(sk, d) ON CONTEXTMENU showMovementPriceSku(sk, d), shortNameUOM
    PROPERTIES     READONLY dateTimeLastMoved(sk, d), dateTimeLastOrderBatch(sk, d), nameSupplierLastOrderBatch(sk, d), nameCountry(sk), currentBalance(sk,d), 
                   managementRetailPrice(sk), retailPricingPriceB(sk,d,t) 
    PROPERTIES (d,o,t)  DRAW sk  TOOLBAR calculateDashboardRepricing, calculateDashboardAutoRepricing, calculateDashboardManagementRepricingForm, 
                                              createRepricingLabelTransaction,
                                              createSnapshotRepricingLabelTransactionDepartmentStore
    PROPERTIES() READONLY countSelectSkus SHOWIF countSelectSkus() DRAW sk                                          
    FILTERS inDashboardRepricing(sk), isParent(sg, sk)  

    OBJECTS p = Repricing
    PROPERTIES (p) READONLY isPosted, number, series, date, time, beforeDate,
                   nameDepartmentStore, countRepricingDetail, diffSumRepricingDetail,
                   diffMarkupSumRepricingDetail, diffVATSumRepricingDetail,
                   diffRetailSumRepricingDetail, numberDisposal, skipChangeLedger,
                   statusLabel BACKGROUND backgroundPrintLabelTransaction(p), 
                   note                      
               
    PROPERTIES (p) createLabelTransaction SHOWIF showPrintLabelTransaction(p), 
                   createSnapshotLabelTransaction 
                   
    PROPERTIES (p) TOOLBAR print, printXls                                          
    PROPERTIES (p) NEWSESSION NEW[UserRepricing], EDIT SHOWIF showEditUser(p), deletep=DELETE SHOWIF showDeleteUser(p)  
                       
    FILTERGROUP filters FILTER 'Переоценки на дату' date(p)==toDate(t) 'F6' DEFAULT                         
    
    EVENTS
        ON CHANGE d clearDashboardRepricing()
;
DESIGN repricingDashboard {
    BOX {
        NEW topContainer {
            horizontal = TRUE;
            alignment = STRETCH;
            MOVE BOX(d) {
                fill = 1;
                MOVE PROPERTY(name(d)) {
                    alignment = STRETCH;
                }
            }
            MOVE BOX(o);
            MOVE BOX(t);
        }
        NEW bodyContainer{
            type = SPLITV;
            fill = 1;
            NEW skuBox {
                type = SPLITH;
                fill = 1;
                MOVE BOX(TREE skuTree) { caption = 'Группы SKU'; fill=0.5; }
                MOVE BOX(sk) {
                    width = 200;
                    caption = 'Товары, для которых необходима переоценка';
                    PROPERTY(retailPricingPriceB(sk,d,t)) {
                        caption = 'Цена (текущая)';
                    }
                }
            }   
            NEW tanContainer {
                fill = 1;
                tabbed = TRUE;
                MOVE BOX(p);   
                NEW actionContainer {
                    fill = 1;
                    caption = 'Действия';
                    NEW mainActionContainer {
                        fill = 1;
                        type = COLUMNS;
                        lines = 5;
//                        MOVE PROPERTY(createDashboardRepricing(d,o,t));
                        MOVE PROPERTY(createRepricingLabelTransaction(d,o,t));
                        MOVE PROPERTY(createSnapshotRepricingLabelTransactionDepartmentStore(d,o,t));                    
                    }
                }
            }
        }
        MOVE TOOLBARBOX;
    }
}

@extendFormFilterStockAccess(d, repricingDashboard);
@extendFormFilterAccessStock(Repricing, p, repricingDashboard, departmentStore, company);
@extendFormFilterRoleAccess(repricing, p, repricingDashboard); 


createDashboardRepricing 'Создать переоценку'(Stock d, Operation o, DATETIME dt)  { 
	NEWSESSION NESTED LOCAL  {
	    createDashboardRepricingNotForm(d, o, dt);
	    FOR inRepForm(UserRepricing r) DO {
	        DIALOG userRepricing OBJECTS p = r DOCKED NOCANCEL DO {
                inDashboardRepricing(Sku sku) <- NULL;
                IF updateDateTime() THEN {
                    SEEK repricingDashboard.t = currentDateTime();
                }	        
            }
	    }
	    inRepForm(UserRepricing r) <- NULL;      
	}
} 

EXTEND FORM  repricingDashboard
    PROPERTIES (d,o,t)  DRAW sk  TOOLBAR AFTER calculateDashboardManagementRepricingForm(d,o,t) createDashboardRepricing

;

NAVIGATOR {
    retailDashboardNavigator {
        NEW repricingDashboard;
    }
}

descriptionPricing 'Цены для расчета конкретной цены' (Sku sku) = GROUP CONCAT TEXT (CONCAT ': ',  STRING[100] s, descriptionPricing(sku, s)) IF s IS STRING[100] AND descriptionPricing(sku, s), '/n' ORDER s;

EXTEND FORM  repricingDashboard
    PROPERTIES (sk) READONLY descriptionPricing PANEL
    PROPERTIES (sk, d, t) calculateDescriptionPricing
;

DESIGN repricingDashboard {
    tanContainer {
        NEW descriptionPricing{
            fill = 1;
            caption = 'Расшифровка';
            
            MOVE PROPERTY(calculateDescriptionPricing(sk, d, t));
            MOVE PROPERTY(descriptionPricing(sk)) { panelCaptionVertical = TRUE; fill = 1;};
        }
    }
}