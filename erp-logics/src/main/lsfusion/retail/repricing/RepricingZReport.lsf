MODULE RepricingZReport;

REQUIRE Repricing, ZReport;

NAMESPACE Repricing;

//----------------- Переоценка товаров, которые были возвращены покупателями по кассе -----------------//

retailPricingPriceB 'Розничная цена (действующая)' (ReceiptReturnDetail d) =
    prevPriceB(SystemLedgerPriceListType.retailPricingPriceListType, sku(d), departmentStore(d), dateTime(d));

userRepricingDetail = DATA  UserRepricingDetail(ReceiptReturnDetail);

soldPrice (ReceiptReturnDetail d) = (sum(d) (+) discountSum(d)) / quantity(d); // priceReceiptReturnDetail(d) просто цену брать не можем, так как при внешнем POS'е в этой цене неправильно 

skipRepricing = ABSTRACT BOOLEAN (ReceiptReturnDetail);

toRepricing (ReceiptReturnDetail d) = (d IS ReceiptReturnDetail) AND NOT (retailPricingPriceB(d) == soldPrice(d)) AND
            NOT userRepricingDetail(d) AND NOT skipRepricing(d);
toRepricingReceiptReturnDetail (stock) =  GROUP SUM 1 IF toRepricing(ReceiptReturnDetail d) BY departmentStore(d);

fillCurPriceRepricingZReport 'Заполнять цену поставщика (до) при создании переоценки' = DATA BOOLEAN () COMPLEX;

setReceiptReturnDetailUserRepricingStock 'Создать акт переоценки'(DepartmentStore stock, Operation operation)   { 
	NEWSESSION {
	    IF toRepricingReceiptReturnDetail (stock) AND stock IS DepartmentStore THEN {
	    
	        NEW p = UserRepricing {
	            departmentStore(p) <- stock;
	            date(p) <- currentDate();
	            time(p) <- currentTime();
	            skipChangeLedger(p) <- TRUE;
	            operation(p) <- operation;
	            
	            FOR toRepricing(ReceiptReturnDetail detail) AND departmentStore[ReceiptDetail](detail) == stock NEW d = UserRepricingDetail DO {
	                userRepricing(d) <- p;   
	                userRepricingDetail(detail) <- d;  
	                                
	                sku(d) <- sku(detail);
	                quantity(d) <- quantity(detail);
	                curRetailPrice(d) <- soldPrice(detail);
	                retailPrice(d) <- retailPricingPriceB(detail);
	                
	                IF fillCurPriceRepricingZReport() AND receiptSaleDetail(detail) THEN {
                        curPrice(d) <- prevPriceB(SystemLedgerPriceListType.supplierPricingPriceListType,
                                      sku(d),
                                      departmentStore(d),
                                      dateTime(receiptSaleDetail(detail)));        
              
                        price(d) <- prevPriceB(SystemLedgerPriceListType.supplierPricingPriceListType,
                                      sku(d),
                                      departmentStore(d),
                                      dateTime(d));        
                    }
	            }  
	            SHOW userRepricing OBJECTS p = p DOCKED NOCANCEL;
	        }
	    }     
	}
} TOOLBAR;

FORM returnReceiptDetail 'Дооценка на возврате (касса)'

    OBJECTS st = DepartmentStore PANEL 
    PROPERTIES (st) SELECTOR name
    FILTERS isCompany(st)
    
    OBJECTS o = Operation PANEL 
    PROPERTIES (o) SELECTOR name
        
    OBJECTS d = ReceiptReturnDetail
   
    PROPERTIES(d) READONLY dateTime[ReceiptDetail], idBarcode, nameSku[ReceiptDetail], 
                  descriptionSale, quantity[ReceiptDetail], price[ReceiptDetail], sum[ReceiptDetail], discountSum[ReceiptDetail],
                  numberVAT, retailPricingPriceB
    FILTERS departmentStore[ReceiptDetail](d) == st,
            toRepricing(d)
            
    PROPERTIES DRAW d  setReceiptReturnDetailUserRepricingStock(st,o)
;

@extendFormFilterStockAccess(st, returnReceiptDetail, company);

NAVIGATOR {
    retailDashboardNavigator {       
        NEW returnReceiptDetail;       
    } 
}

toRepricingReceiptReturnOperation 'Операция для автоматической переоценки по возвратам через кассу' = DATA Operation ();
nameToRepricingReceiptReturnOperation 'Операция для автоматической переоценки по возвратам через кассу' = name(toRepricingReceiptReturnOperation());

overCreateRepricingReceiptReturnAllStocks  ABSTRACT LIST ( UserRepricingDetail, ReceiptReturnDetail);

createRepricingReceiptReturnAllStocks 'Создать автоматическую переоценку по возвратам через кассу' ()  { 
    FOR toRepricingReceiptReturnDetail (DepartmentStore stock) DO {
        NEW p = UserRepricing {
            departmentStore(p) <- stock;
            date(p) <- currentDate();
            time(p) <- currentTime();
            skipChangeLedger(p) <- TRUE;
            operation(p) <- toRepricingReceiptReturnOperation();
            
            FOR toRepricing(ReceiptReturnDetail detail) AND departmentStore[ReceiptDetail](detail) == stock NEW d = UserRepricingDetail DO {
                userRepricing(d) <- p;   
                userRepricingDetail(detail) <- d;  
                                
                sku(d) <- sku(detail);
                quantity(d) <- quantity(detail);
                curRetailPrice(d) <- soldPrice(detail);
                retailPrice(d) <- retailPricingPriceB(detail);

                IF fillCurPriceRepricingZReport() AND receiptSaleDetail(detail) THEN {
                    curPrice(d) <- prevPriceB(SystemLedgerPriceListType.supplierPricingPriceListType,
                                  sku(d),
                                  departmentStore(d),
                                  dateTime(receiptSaleDetail(detail)));        
          
                    price(d) <- prevPriceB(SystemLedgerPriceListType.supplierPricingPriceListType,
                                  sku(d),
                                  departmentStore(d),
                                  dateTime(d));        
                }
                overCreateRepricingReceiptReturnAllStocks(d, detail);
            } 
            isPosted(p)<- TRUE;
        }
    }
    APPLY;
}

EXTEND FORM options
    PROPERTIES() nameToRepricingReceiptReturnOperation, createRepricingReceiptReturnAllStocks, fillCurPriceRepricingZReport
;

DESIGN options {
    rPanel {
        NEW repricingReceiptReturn {
            caption = 'Автоматическая переоценка по возвратам через кассу';
            MOVE PROPERTY(nameToRepricingReceiptReturnOperation());
            MOVE PROPERTY(fillCurPriceRepricingZReport());
            MOVE PROPERTY(createRepricingReceiptReturnAllStocks());
        }
    }
}