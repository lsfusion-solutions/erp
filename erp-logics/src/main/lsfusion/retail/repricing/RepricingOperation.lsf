MODULE RepricingOperation;

REQUIRE Operation, LegalEntity, PriceListCalc;

NAMESPACE Repricing;

@defineOperation(' (переоценка-розница)', ' переоценки');

//@defineOperationPriceListType();

@defineOperationRole();

priceListType = DATA PriceListType (Operation);
namePriceListType 'Вид цен (управленческий)' (Operation operation) = name(priceListType(operation));

calcPriceListType = DATA CalcPriceListType (Operation);
nameCalcPriceListType 'Вид цен (надбавка)' (Operation operation) = name[PriceListType](calcPriceListType(operation));

balance 'Переоценка остатков' = DATA BOOLEAN (Operation);

EXTEND FORM operation
    PROPERTIES(o) namePriceListType, nameCalcPriceListType, balance
;
DESIGN operation{
    tabContainer {
        NEW paramsContainer {
            caption = 'Параметры';
            MOVE PROPERTY(namePriceListType(o));
            MOVE PROPERTY(nameCalcPriceListType(o));
            MOVE PROPERTY(balance(o));
        }
    }
}

@defineOperationProperty(denyRecalculatePrice, 'Запретить пересчет цен', paramsContainer);

@defineOperationProperty(negativeMarkupOnAccount90, 'Относить отрицательную надбавку на 90 счет', paramsContainer);

@defineOperationProperty(skipChangeLedger, 'Не изменять текущие цены', paramsContainer);

@defineOperationProperty(isRetailPrice, 'Должна быть задана розничная цена', paramsContainer);
@defineOperationProperty(isCurRetailPrice, 'Должна быть задана розничная цена (до)', paramsContainer);

@defineOperationProperty(denyRepricingNegativeBalance, 'Запретить переоценку отрицательного остатка', paramsContainer);