MODULE NegativeRepricingPurchaseInvoice;

REQUIRE PricingPurchase, Repricing, PricingSumPurchase;

PRIORITY Purchase;
NAMESPACE Repricing;

showNegativeMarkup 'Отрицательная ТН' = DATA BOOLEAN (Purchase.Operation);

EXTEND FORM Purchase.operation
    PROPERTIES(o) showNegativeMarkup
;
DESIGN Purchase.operation {
    showContainer {
        MOVE PROPERTY(showNegativeMarkup(o));
    }
}

@defineDocumentInterfaceDetailPricePrefix(invoice, afterRetail, ' розничная после');

@defineDocumentInterfaceDetailPricePrefix(invoice, afterSupplier, ' поставщика после');

repricingOperation  = DATA Repricing.Operation ();
nameRepricingOperation 'Операция (переоценка) отриц. ТН' ()= name(repricingOperation());

EXTEND FORM options
    PROPERTIES () nameRepricingOperation
;
DESIGN options{
    rPanel {
        MOVE PROPERTY (nameRepricingOperation());
    }
}
repricingOperation  = ABSTRACT Repricing.Operation (Invoice);
repricingOperation  = DATA Repricing.Operation (UserInvoice);
repricingOperation(UserInvoice i) += repricingOperation(i);

nameRepricingOperation 'Операция (переоценка) отриц. ТН' (UserInvoice i)= name(repricingOperation(i));

repricingOperation (UserInvoice invoice) <- repricingOperation()
    WHEN SET(invoice IS UserInvoice);

// Комиссия
@defineDocumentHeaderRepricingCommittee (invoice, customerStock) ; 

numberDisposal '№ распоряжения на переоценку' (Invoice invoice) = OVERRIDE dataNumberDisposal(invoice), numberDisposal(customerStock(invoice)) IN documentPrm;
changeNumberDisposal(Invoice invoice)  { 
    INPUT s = STRING[50] DO
        dataNumberDisposal(invoice) <- s;        
}

afterRetailPrice = GROUP SUM 1 IF afterRetailPrice(InvoiceDetail d)
    BY invoice(d) MATERIALIZED;

CLASS InvoiceRepricingN 'Акт переоценки (отрицательные ТН)': Repricing;
CLASS InvoiceRepricingNDetail 'Строка акта переоценки (отрицательные ТН)': RepricingDetail;

@defineDocumentTables(invoiceRepricingN);

invoiceRepricingN = AGGR InvoiceRepricingN WHERE afterRetailPrice(Invoice invoice) MATERIALIZED INDEXED;
@defineDocumentAggregationHeaderNote(invoice, invoiceRepricingN);

date 'Дата' (InvoiceRepricingN o) = pricingDate(invoice(o));
time 'Время' (InvoiceRepricingN o) = pricingTime(invoice(o));
dateTime 'Дата/время' (InvoiceRepricingN o) = pricingDateTime(invoice(o));

@defineDocumentAggregationDetail(invoice, invoiceRepricingN, afterRetailPrice);
    @defineDocumentHeaderCount(invoiceRepricingN);

repricing(InvoiceRepricingNDetail detail) += invoiceRepricingN(detail);

index(InvoiceRepricingNDetail detail) += index(detail);

date(InvoiceRepricingN repricing) += DATE(sumSeconds(dateTime(repricing),1));
time(InvoiceRepricingN repricing) += TIME(sumSeconds(dateTime(repricing),1));

beforeDate(InvoiceRepricingN repricing) += date(repricing);
beforeTime(InvoiceRepricingN repricing) += time(repricing);

operation (InvoiceRepricingN repricing)+= repricingOperation(invoice(repricing));
//changeSupplierPrice (InvoiceRepricingN repricing)+= changeSupplierPrice(repricingOperation(order(repricing)));
 @defineDocumentAggregationStockPrefix(invoice, InvoiceRepricingN, customer, 'Склад', , );
departmentStore(InvoiceRepricingN repricing) += customerStock(repricing) AS DepartmentStore;

isPosted 'Проведен' (InvoiceRepricingN o) = isPosted(invoice(o)) AND createShipment(invoice(o));
isPosted 'Проведен' (InvoiceRepricingNDetail o) = isPosted(invoiceDetail(o)) AND createShipment(invoiceDetail(o));

isPosted(InvoiceRepricingN repricing) += isPosted(repricing);
@defineDocumentAggregationHeaderClosed(invoice, invoiceRepricingN);
@defineDocumentAggregationDetailClosed(invoice, invoiceRepricingN);

isClosed(InvoiceRepricingN repricing) += isClosed(repricing);

number 'Номер документа' (InvoiceRepricingN repricing) = number(invoice(repricing));
number(InvoiceRepricingN repricing) += number(repricing);

series 'Серия документа' (InvoiceRepricingN repricing) = series(invoice(repricing));
series(InvoiceRepricingN repricing) += series(repricing);

seriesNumber 'Серия/номер документа' (InvoiceRepricingN repricing) = seriesNumber(invoice(repricing));

noteDisparity 'Примечание' (InvoiceRepricingN repricing) = note(invoice(repricing));
note(InvoiceRepricingN repricing) += noteDisparity(repricing);

currency  (InvoiceRepricingN repricing) = currency(invoice(repricing));
currency (InvoiceRepricingN repricing) += currency(repricing);
repricingCommittee(InvoiceRepricingN repricing) += repricingCommittee(invoice(repricing));
numberDisposal(InvoiceRepricingN repricing) += numberDisposal(invoice(repricing));

@defineDocumentHeaderDescription(InvoiceRepricingN, 'Акт переоценки (отрицательные ТН)');
@defineDocumentDetailDescription(invoiceRepricingN, InvoiceRepricingNDetail);

description (InvoiceRepricingN repricing) += description(repricing);

sku (InvoiceRepricingNDetail repricingDetail) = sku(invoiceDetail(repricingDetail));

sku(InvoiceRepricingNDetail repricingDetail) +=  sku(repricingDetail);

edit(InvoiceRepricingNDetail d) + {  edit(invoiceDetail(d)); }
show(InvoiceRepricingNDetail d) + {  show(invoiceDetail(d)); }


//----------------------------------------------------------------------------------------------------------

extraPricingQuantityN = ABSTRACT NUMERIC[16,5] (UserInvoiceDetail);
pricingQuantityN 'К-во к переоценке' (UserInvoiceDetail d) = (pricingQuantity(d) (+) (extraPricingQuantityN(d))) IF afterRetailPrice(d);
pricingSumN(UserInvoiceDetail d) = NUMERIC[18,4](Utils.round(pricingQuantityN(d) * price(d), homePriceRound(d))) IF extraPricingQuantityN(d);
retailSumN(UserInvoiceDetail d) = NUMERIC[18,4](Utils.round(pricingQuantityN(d) * retailPrice(d), homePriceRound(d))) IF extraPricingQuantityN(d); 
retailVATSumN (UserInvoiceDetail d)  = NUMERIC[18,4](Utils.round([ X*Y/(100+Y)](retailSumN(d), calcValueRetailVAT(d)), homePriceRound(d))) IF  extraPricingQuantityN(d);
retailMarkupSumN = ABSTRACT VALUE NUMERIC[18,4](UserInvoiceDetail);
retailMarkupSumN(UserInvoiceDetail d) += retailSumN(d) (-) retailVATSumN(d) (-) pricingSumN(d);

@defineDocumentDetailDataSumCustomPrefix (UserInvoiceDetail, afterRetail, ' розничная после');
calcAfterRetailSum(UserInvoiceDetail d) = NUMERIC[18,4](round(pricingQuantityN(d) * afterRetailPrice(d), currency(d))); 
afterRetailSum (UserInvoiceDetail d) <- calcAfterRetailSum(d)
                WHEN DO CHANGED(pricingQuantityN(d)) OR CHANGED (afterRetailPrice(d)) OR CHANGED(currency(d));

@defineDocumentDetailMarkupPrefix (UserInvoice, afterRetail, ' после');
pricingNPrice (UserInvoiceDetail d) = OVERRIDE afterSupplierPrice(d),pricingPrice(d);
afterSupplierSum(UserInvoiceDetail d)= NUMERIC[18,4](Utils.round(pricingQuantityN(d) * afterSupplierPrice(d), homePriceRound(d)));
pricingNSum (UserInvoiceDetail d) = OVERRIDE afterSupplierSum(d), pricingSumN(d), pricingSum(d);

afterRetailMarkup(UserInvoiceDetail d)  <- [ round2((((X - X*Y/(100+Y))/Z)-1)*100)](
    afterRetailPrice(d),
    valueRetailVAT(d),
    pricingNPrice(d))
    WHEN CHANGED(pricingNPrice(d)) OR CHANGED (valueRetailVAT(d)) OR CHANGED(afterRetailPrice(d));

@defineDocumentDetailVATDataSumCustomPrefix (userInvoiceDetail, afterRetail, ' после');
afterRetailVATSum (UserInvoiceDetail d)  <- round([ X*Y/(100+Y)](afterRetailSum(d), valueRetailVAT(d)), currency(d))
                WHEN CHANGED(afterRetailSum(d)) OR CHANGED (valueRetailVAT(d)) OR CHANGED (currency(d));
                    
@defineDocumentDetailMarkupSumCustomPrefix (userInvoiceDetail, afterRetail, ' после');
afterRetailMarkupSum(UserInvoiceDetail d) <- afterRetailSum(d) (-) afterRetailVATSum (d) (-) pricingNSum(d)
                WHEN (CHANGED(afterRetailSum(d)) OR CHANGED (afterRetailVATSum (d)) OR CHANGED (pricingNSum(d))) AND afterRetailSum(d);
valueAfterRetailVAT(UserInvoiceDetail d) = valueRetailVAT(d) IF d IS UserInvoiceDetail;
               
@changeDocumentDetailPriceCustomPrefix(UserInvoiceDetail, afterRetail, pricingN, afterRetail, afterRetail);
@changeDocumentDetailMarkupCustomPrefix(UserInvoiceDetail,afterRetail, pricingN,  afterRetail, afterRetail);

//-------------------------------------------------------------------------------------------//
quantity(InvoiceRepricingNDetail repricingDetail) += pricingQuantityN(invoiceDetail(repricingDetail));

price(InvoiceRepricingNDetail repricingDetail) += OVERRIDE afterSupplierPrice(invoiceDetail(repricingDetail)), price(invoiceDetail(repricingDetail));
curPrice(InvoiceRepricingNDetail repricingDetail) += price(invoiceDetail(repricingDetail));

retailPrice(InvoiceRepricingNDetail repricingDetail) += afterRetailPrice(invoiceDetail(repricingDetail));
curRetailPrice(InvoiceRepricingNDetail repricingDetail) += retailPrice(invoiceDetail(repricingDetail));

retailSum(InvoiceRepricingNDetail repricingDetail) += afterRetailSum(invoiceDetail(repricingDetail));
curRetailSum(InvoiceRepricingNDetail repricingDetail) += OVERRIDE retailSumN(invoiceDetail(repricingDetail)), retailSum(invoiceDetail(repricingDetail));

markup(InvoiceRepricingNDetail repricingDetail) += afterRetailMarkup(invoiceDetail(repricingDetail));
curMarkup(InvoiceRepricingNDetail repricingDetail) += retailMarkup(invoiceDetail(repricingDetail));

//VAT(InvoiceRepricingNDetail repricingDetail) += retailVAT(invoiceDetail(repricingDetail));
//curVAT(InvoiceRepricingNDetail repricingDetail) += retailVAT(invoiceDetail(repricingDetail));

valueVAT(InvoiceRepricingNDetail repricingDetail) += valueRetailVAT(invoiceDetail(repricingDetail));
valueCurVAT(InvoiceRepricingNDetail repricingDetail) += valueRetailVAT(invoiceDetail(repricingDetail));

sum(InvoiceRepricingNDetail repricingDetail) += OVERRIDE afterSupplierSum(invoiceDetail(repricingDetail)), pricingSumN(invoiceDetail(repricingDetail)), pricingSum(invoiceDetail(repricingDetail)), sum(invoiceDetail(repricingDetail));
curSum(InvoiceRepricingNDetail repricingDetail) += OVERRIDE pricingSumN(invoiceDetail(repricingDetail)), pricingSum(invoiceDetail(repricingDetail)), sum(invoiceDetail(repricingDetail));

VATSum(InvoiceRepricingNDetail repricingDetail) += afterRetailVATSum(invoiceDetail(repricingDetail));
curVATSum(InvoiceRepricingNDetail repricingDetail) += OVERRIDE retailVATSumN(invoiceDetail(repricingDetail)), retailVATSum(invoiceDetail(repricingDetail));

markupSum(InvoiceRepricingNDetail repricingDetail) += afterRetailMarkupSum(invoiceDetail(repricingDetail));
curMarkupSum(InvoiceRepricingNDetail repricingDetail) += OVERRIDE retailMarkupSumN(invoiceDetail(repricingDetail)), retailMarkupSum(invoiceDetail(repricingDetail));

edit(InvoiceRepricingN repricing) + {  edit(invoice(repricing)); }

showRepricingN(UserInvoice i) = createPricing(i) AND showNegativeMarkup(operation(i));
backgroundAfter 'Цвет' (UserInvoice o) = RGB(255, 255, 200) IF o IS UserInvoice;

needRepricing = DATA LOCAL BOOLEAN (UserInvoiceDetail);

roundConditionMax = GROUP MAX RoundCondition c BY name(c), currency(c);

calcRetailPriceUp(UserInvoiceDetail d)  = round(NUMERIC[16,4]([ X*(Y+100)*(Z+100)/10000](
    pricingNPrice(d),
    retailMarkup(d),
    valueRetailVAT(d))), (OVERRIDE roundConditionMax('До копеек (вверх)',currency(d)), roundCondition(d)));

overCheckedMarkup = ABSTRACT NUMERIC[8,3] (InvoiceDetail);
checkedMarkup (UserInvoiceDetail detail) = OVERRIDE overCheckedMarkup(detail), retailMarkup(detail);
skipAfterRetailPrice = ABSTRACT BOOLEAN (UserInvoiceDetail);
createAfterRetailPrice 'Проверить отриц. ТН' (UserInvoice i)  { 
    afterSupplierPrice(UserInvoiceDetail d) <- NULL WHERE userInvoice(d) == i;
    afterRetailMarkup(UserInvoiceDetail d) <- NULL WHERE userInvoice(d) == i;    
    needRepricing(UserInvoiceDetail d) <- NULL WHERE userInvoice(d) == i;      
    afterRetailPrice(UserInvoiceDetail d) <- NULL WHERE userInvoice(d) == i;
        
    afterRetailPrice(UserInvoiceDetail d) <- retailPrice(d) WHERE userInvoice(d) == i AND checkedMarkup(d) <0.0 AND NOT skipAfterRetailPrice(d);
    needRepricing(UserInvoiceDetail d) <- TRUE WHERE userInvoice(d) == i AND checkedMarkup(d) <0.0 AND NOT skipAfterRetailPrice(d);    
    retailMarkup(UserInvoiceDetail d) <- 0.0 WHERE needRepricing(d);  
    retailPrice(UserInvoiceDetail d) <- calcRetailPriceUp(d) WHERE needRepricing(d);    
} 
afterPrice 'Цена поставщика после'(UserInvoiceDetail d) = pricingNPrice(d) IF afterRetailPrice(d);
afterSum 'Сумма поставщика после'(UserInvoiceDetail d) = pricingNSum(d) IF afterRetailPrice(d);
afterRetailVAT 'НДС, % розничный после'(UserInvoiceDetail d) = valueRetailVAT(d) IF afterRetailPrice(d);
afterRetailMarkupSum1 'Сумма надбавки после' (UserInvoiceDetail d) = afterRetailMarkupSum(d) IF afterRetailPrice(d);

customShowCreateAfterRetailPrice = ABSTRACT BOOLEAN (UserInvoice);
dataShowCreateAfterRetailPrice = ABSTRACT BOOLEAN (UserInvoice);

showCreateAfterRetailPrice(UserInvoice i) = 
    IF customShowCreateAfterRetailPrice(i) THEN dataShowCreateAfterRetailPrice(i)
    ELSE showRepricingN(i);

EXTEND FORM userInvoice

    PROPERTIES(i)   BACKGROUND backgroundAfter(i) SHOWIF showRepricingN(i) nameOperation = nameRepricingOperation,
                    nameCommittee = nameRepricingCommittee, numberDisposal = numberDisposal ON CHANGE changeNumberDisposal(i)

    PROPERTIES(pd) BACKGROUND backgroundAfter(i) SHOWIF showRepricingN(i) 
                    pricingQuantityN READONLY, afterPrice, afterSum,
                    afterRetailMarkup ON CHANGE changeAfterRetailMarkup(pd), afterRetailMarkupSum1 ,
                    afterRetailVAT READONLY, afterRetailVATSum, afterRetailPrice ON CHANGE changeAfterRetailPrice(pd), afterRetailSum
    PROPERTIES (i) SHOWIF showCreateAfterRetailPrice(i) createAfterRetailPrice TOOLBAR DRAW pd         
;
DESIGN userInvoice {
    headerCreateDocuments {
        NEW createHeaderRepricing {
            caption = 'Отрицательные ТН';
            type = CONTAINERH;
            MOVE PROPERTY(nameOperation) {caption = 'Операция'; charWidth=15;}
            MOVE PROPERTY(nameCommittee) {caption = 'Комиссия'; charWidth=15;}
            MOVE PROPERTY(numberDisposal) {caption = 'Распоряжение'; charWidth=15;}              
        }
    }
}


