MODULE RepricingDisparity;

REQUIRE Disparity,
        Repricing,
        DisparityOperation,
        PriceListLedger;

NAMESPACE Disparity;

//-- Расширяем операцию


@defineOperationProperty(notConduct, 'Не проводить по товарному отчету', BOOLEAN, paramsContainer);

@defineOperationProperty(createRepricing, 'Создать акт переоценки (розн.)', BOOLEAN, createContainer);

//--
@defineDocumentInterfaceProperty(disparity, createRepricing, 'Создать акт переоценки');

//------------------------------ Создание агрегированных объектов через операции -----------------------------//

repricingOperation  = DATA Repricing.Operation (Operation);
nameRepricingOperation 'Операция переоценки (розн.)' (Operation operation)= name(repricingOperation(operation));


EXTEND FORM operation
    PROPERTIES(o) nameRepricingOperation
;
DESIGN operation {
    createContainer {
        MOVE PROPERTY(nameRepricingOperation(o)) AFTER PROPERTY(createRepricing(o));
    }
}
notConduct 'Не проводить по товарному отчету' = DATA BOOLEAN (Disparity) IN documentPrm;

EXTEND FORM disparities
    PROPERTIES(dis) notConduct
;

EXTEND FORM disparity
    PROPERTIES(dis) notConduct
;

@deriveDocumentOperationProperty(userDisparity, createRepricing);
@deriveDocumentOperationProperty(Disparity, notConduct);

skip(Disparity ledger) += ledger IS Disparity AND notConduct(ledger);

// Операция переоценки
@defineDocumentInterfaceOperationPrefix(disparity, repricing, Repricing, ' (переоценка)');

@deriveDocumentOperationProperty(UserDisparity, repricingOperation);

negativeMarkupOnAccount90 'Относить отрицательную надбавку на 90 счет' = DATA BOOLEAN (Disparity) IN documentPrm;

negativeMarkupOnAccount90 (Disparity o) <- negativeMarkupOnAccount90(repricingOperation(o))
    WHEN CHANGED(repricingOperation(o));

migrateNegativeMarkupOnAccount90 = DATA BOOLEAN ();
onStarted() +{ 
    IF NOT migrateNegativeMarkupOnAccount90() THEN {
        negativeMarkupOnAccount90(Disparity o) <- negativeMarkupOnAccount90(repricingOperation(o));
        migrateNegativeMarkupOnAccount90() <- TRUE;
    }
}

// До
@defineDocumentInterfaceTimePrefix(disparity, before, ' документа до');
@deriveDocumentHeaderTimePrefix(UserDisparity, before);

@defineDocumentInterfaceDetailPricePrefix(disparity, curInput, ' поставщика до');
@defineDocumentInterfaceDetailDataSumPrefix(disparity, curInput, ' поставщика до');

overCurInputRepricingSum = ABSTRACT NUMERIC[18,4] (DisparityDetail) MATERIALIZED;
curInputRepricingSum (DisparityDetail detail) = OVERRIDE overCurInputRepricingSum(detail), curInputSum(detail) MATERIALIZED;

@deriveDocumentDetailSumPrefix(userDisparity, curInput, currency, inputQuantity);

overCurInputRepricingPrice = ABSTRACT NUMERIC[16,4] (DisparityDetail) MATERIALIZED;
curInputRepricingPrice (DisparityDetail detail) = OVERRIDE overCurInputRepricingPrice(detail), curInputPrice(detail) MATERIALIZED;

@defineDocumentInterfaceDetailPricePrefix(disparity, curInputRetail, ' розничная до');
@defineDocumentInterfaceDetailDataSumPrefix(disparity, curInputRetail, ' розничная до');
@deriveDocumentDetailSumPrefix(userDisparity, curInputRetail, currency, inputQuantity);

@defineDocumentInterfaceDetailVAT(disparity, countryStock, curInput, ' до');
@deriveDocumentDetailValueVAT(userDisparity, curInput);

@defineDocumentInterfaceDetailMarkupPrefix (disparity, curInput, ' до');
curInputMarkup(UserDisparityDetail disparityDetail)  <- [ round2((((X - X*Y/(100+Y))/Z)-1)*100)](
    curInputRetailPrice(disparityDetail),
    valueCurInputVAT(disparityDetail),
    curInputRepricingPrice(disparityDetail))
    WHEN CHANGED(curInputRetailPrice(disparityDetail)) OR CHANGED (valueCurInputVAT(disparityDetail)) OR CHANGED(curInputRepricingPrice(disparityDetail));

@defineDocumentInterfaceDetailVATDataSumPrefix (disparity, curInput, ' до');
@deriveDocumentDetailReverseVATSumPrefix(userDisparity, curInput, curInputRetail);
@defineDocumentInterfaceDetailMarkupSumPrefix (disparity, curInput, ' до');
//@deriveDocumentDetailMarkupSumPrefix(disparity, curInput, curInputRetail, curInput);
curInputMarkupSum(UserDisparityDetail disparityDetail) <- curInputRetailSum(disparityDetail) (-) curInputVATSum (disparityDetail) (-) curInputRepricingSum(disparityDetail)
                    WHEN CHANGED(curInputRetailSum(disparityDetail)) OR CHANGED (curInputVATSum (disparityDetail)) OR CHANGED (curInputRepricingSum(disparityDetail));

//@deriveDocumentDetailPriceSystemLedgerPriceListType(disparity, supplierPricingPriceListType, curInput, sku, stock){
overCurInputPrice = ABSTRACT NUMERIC[16,4] (UserDisparityDetail);
curInputPrice (UserDisparityDetail detail)  <- round2((OVERRIDE overCurInputPrice(detail), prevPriceB(SystemLedgerPriceListType.supplierPricingPriceListType,
                                                                                        sku(detail),
                                                                                        stock(detail),
                                                                                        dateTime(detail)))/(OVERRIDE rate(detail), 1))
                                                WHEN DO CHANGED(sku(detail)) OR
                                                     CHANGED(stock(detail)) OR
                                                     CHANGED(dateTime(detail)) OR
                                                     CHANGED(rate(detail)) OR
                                                     CHANGED(batch(detail));

@deriveDocumentDetailVAT (userDisparity, curInput, beforeDate, sku, stock);
//@deriveDocumentDetailPriceSystemLedgerPriceListType(disparity, retailPricingPriceListType, curInputRetail, sku, stock){
curInputRetailPrice (UserDisparityDetail detail)  <- round2(prevPriceB(SystemLedgerPriceListType.retailPricingPriceListType,
                                                                                        sku(detail),
                                                                                        stock(detail),
                                                                                        dateTime(detail))/(OVERRIDE rate(detail), 1))
                                                WHEN DO CHANGED(sku(detail)) OR
                                                     CHANGED(stock(detail)) OR
                                                     CHANGED(dateTime(detail))OR
                                                     CHANGED(rate(detail));

@changeDocumentDetailMarkupCustomPrefix(userDisparityDetail, curInputRetail, curInput, curInput, curInput);
roundCondition(DisparityDetail disparityDetail) = roundCondition(stock(disparityDetail));
@changeDocumentDetailPriceCustomPrefix(userDisparityDetail, curInputRetail, curInputRepricing, curInput, curInput);

// После
@defineDocumentInterfaceDetailPricePrefix(disparity, afterInput, ' поставщика после');
@defineDocumentInterfaceDetailDataSumPrefix(disparity, afterInput, ' поставщика после');
@deriveDocumentDetailSumPrefix(userDisparity, afterInput, currency, inputQuantity);

overAfterInputRepricingPrice = ABSTRACT NUMERIC[16,4] (DisparityDetail) MATERIALIZED;
afterInputRepricingPrice (DisparityDetail detail) = OVERRIDE overAfterInputRepricingPrice(detail), afterInputPrice(detail) MATERIALIZED;

overAfterInputRepricingSum = ABSTRACT NUMERIC[18,4] (DisparityDetail) MATERIALIZED;
afterInputRepricingSum (DisparityDetail detail) = OVERRIDE overAfterInputRepricingSum(detail), afterInputSum(detail) MATERIALIZED;

@defineDocumentInterfaceDetailPricePrefix(disparity, afterInputRetail, ' розничная после');
@defineDocumentInterfaceDetailDataSumPrefix(disparity, afterInputRetail, ' розничная после');
@deriveDocumentDetailSumPrefix(userDisparity, afterInputRetail, currency, inputQuantity);

@defineDocumentInterfaceDetailVAT(disparity, countryStock, afterInput, ' после');
@deriveDocumentDetailValueVAT(userDisparity, afterInput);

@defineDocumentInterfaceDetailVATDataSumPrefix (disparity, afterInput, ' после');
@deriveDocumentDetailReverseVATSumPrefix(userDisparity, afterInput, afterInputRetail);
@defineDocumentInterfaceDetailMarkupPrefix (disparity, afterInput, ' после');
afterInputMarkup(UserDisparityDetail disparityDetail)  <- [ round2((((X - X*Y/(100+Y))/Z)-1)*100)](
    afterInputRetailPrice(disparityDetail),
    valueAfterInputVAT(disparityDetail),
    afterInputRepricingPrice(disparityDetail))
    WHEN CHANGED(afterInputPrice(disparityDetail)) OR CHANGED (valueAfterInputVAT(disparityDetail)) OR CHANGED(afterInputRepricingPrice(disparityDetail));

@defineDocumentInterfaceDetailMarkupSumPrefix(disparity, afterInput, ' после');
//@deriveDocumentDetailMarkupSumPrefix(disparity, afterInput, afterInputRetail, afterInput);

afterInputMarkupSum(UserDisparityDetail disparityDetail) <- afterInputRetailSum(disparityDetail) (-) afterInputVATSum (disparityDetail) (-) afterInputRepricingSum(disparityDetail)
                    WHEN CHANGED(afterInputRetailSum(disparityDetail)) OR CHANGED (afterInputVATSum (disparityDetail)) OR CHANGED (afterInputRepricingSum(disparityDetail));

afterInputPrice(UserDisparityDetail detail) <- curInputPrice(detail) WHEN CHANGED (curInputPrice(detail));
afterInputVAT(UserDisparityDetail detail) <- curInputVAT(detail) WHEN CHANGED (curInputPrice(detail));
afterInputRetailPrice(UserDisparityDetail detail) <- curInputRetailPrice(detail) WHEN CHANGED (curInputPrice(detail));

@changeDocumentDetailMarkupCustomPrefix(userDisparityDetail, afterInputRetail, afterInput, afterInput, afterInput);
@changeDocumentDetailPriceCustomPrefix(userDisparityDetail, afterInputRetail, afterInputRepricing, afterInput, afterInput);

@defineDocumentInterfaceDetailDiffSumPrefix(disparity, retailSum, afterInput, curInput, ' переоценки');
@defineDocumentInterfaceHeaderSumPrefix(disparity, diffRetail, ' переоценки');

needToRepricing (DisparityDetail disparityDetail) = curInputRetailPrice(disparityDetail) != afterInputRetailPrice(disparityDetail)
                                               AND inputQuantity(disparityDetail) != 0 AND stock(disparityDetail) IS DepartmentStore
                                               AND NOT costLedger(stock(disparityDetail))
                                               AND createRepricing(disparityDetail) MATERIALIZED;// AND isPostedDisparityDetail(disparityDetail) ;

needToRepricing (disparity)= GROUP SUM 1 IF needToRepricing(DisparityDetail disparityDetail)
    BY disparity(disparityDetail) MATERIALIZED;

@defineDocumentInterfaceHeaderRepricingCommittee(disparity, stock);

CLASS DisparityRepricing 'Акт переоценки (сортность)': Repricing;
CLASS DisparityRepricingDetail 'Строка акта переоценки (сортность)': RepricingDetail;

@defineDocumentTables(disparityRepricing);

@defineDocumentAggregation(disparity, disparityRepricing, needToRepricing);
@defineDocumentAggregationTimePrefix(disparity, disparityRepricing, before);

repricing(DisparityRepricingDetail detail) += disparityRepricing(detail);

index(DisparityRepricingDetail detail) += index(detail);

date(DisparityRepricing repricing) += date(repricing);
time(DisparityRepricing repricing) += time(repricing);

beforeDate(DisparityRepricing repricing) += beforeDate(repricing);
beforeTime(DisparityRepricing repricing) += beforeTime(repricing);

operation (DisparityRepricing repricing)+= repricingOperation(disparity(repricing));
changeSupplierPrice (DisparityRepricing repricing)+= changeSupplierPrice(repricingOperation(disparity(repricing)));
negativeMarkupOnAccount90 (DisparityRepricing repricing)+= negativeMarkupOnAccount90(disparity(repricing));

printRepricing 'Акт переоценки' (Disparity disparity)  { print(disparityRepricing(disparity)); } IMAGE 'print.png' IN print;

@defineDocumentAggregationStockPrefix(disparity, disparityRepricing, , 'Склад', , );
departmentStore(DisparityRepricing repricing) += stock(repricing) AS DepartmentStore;

@defineDocumentAggregationPosted(disparity, disparityRepricing);
isPosted(DisparityRepricing repricing) += isPosted(repricing);

@defineDocumentAggregationClosed(disparity, disparityRepricing);
isClosed(DisparityRepricing repricing) += isClosed(repricing);

number 'Номер документа' (DisparityRepricing disparityRepricing) = number(disparity(disparityRepricing));
number(DisparityRepricing repricing) += number(repricing);

series 'Серия документа' (DisparityRepricing disparityRepricing) = series(disparity(disparityRepricing));
series(DisparityRepricing repricing) += series(repricing);

seriesNumber 'Серия/номер документа' (DisparityRepricing disparityRepricing) = seriesNumber(disparity(disparityRepricing));

noteDisparity 'Примечание' (DisparityRepricing disparityRepricing) = note(disparity(disparityRepricing));
note(DisparityRepricing repricing) += noteDisparity(repricing);

currency  (DisparityRepricing disparityRepricing) = currency(disparity(disparityRepricing));
currency (DisparityRepricing repricing) += currency(repricing);
repricingCommittee(DisparityRepricing repricing) += repricingCommittee(disparity(repricing));
numberDisposal(DisparityRepricing repricing) += dataNumberDisposal(disparity(repricing));

@defineDocumentDescription(disparityRepricing, DisparityRepricingDetail, 'Акт переоценки (сортность)');
description (DisparityRepricing repricing) += description(repricing);

//skipChangeLedgerRepricing(repricing) += repricing IS DisparityRepricing;
sku (DisparityRepricingDetail repricingDetail) = inputSku(disparityDetail(repricingDetail));

sku(DisparityRepricingDetail repricingDetail) +=  sku(repricingDetail);

edit(DisparityRepricingDetail d) + {  edit(disparityDetail(d)); }
show(DisparityRepricingDetail d) + {  show(disparityDetail(d)); }

backgroundCur 'Цвет' (Disparity disparity) = RGB(255, 255, 224) IF disparity IS Disparity;
backgroundAfter 'Цвет' (Disparity disparity) = RGB(255, 255, 200) IF disparity IS Disparity;

showCreateRepricing (Disparity disparity) = stock(disparity) IS DepartmentStore AND NOT costLedger(stock(disparity));

@defineDocumentAbstractDetailBatchCustom(disparityRepricingDetail, batch);

batch(DisparityRepricingDetail detail) += inputDisparityDetail(disparityDetail(detail));
batch[RepricingDetail](DisparityRepricingDetail detail) += batch(detail);

EXTEND FORM disparity
    PROPERTIES(dis)   SHOWIF showCreateRepricing(dis) BACKGROUND backgroundCur(dis) createRepricing
    PROPERTIES(dis)   BACKGROUND backgroundCur(dis) SHOWIF createRepricing(dis) nameRepricingOperation,
                      nameRepricingCommittee, dataNumberDisposal, beforeDate, negativeMarkupOnAccount90
    PROPERTIES(dis)   BACKGROUND backgroundAfter(dis) SHOWIF createRepricing(dis) diffRetailSumDisparityDetail

    PROPERTIES(d)   BACKGROUND backgroundCur(dis) SHOWIF createRepricing(dis) BEFORE deletedd
                    curInputPrice, curInputSum,
                    curInputMarkup ON CHANGE changeCurInputMarkup(d), curInputMarkupSum,
                    numberCurInputVAT, valueCurInputVAT, curInputVATSum,
                    curInputRetailPrice ON CHANGE changeCurInputRetailPrice(d), curInputRetailSum
    PROPERTIES(d)   BACKGROUND backgroundAfter(dis) SHOWIF createRepricing(dis) BEFORE deletedd
                    afterInputPrice, afterInputSum,
                    afterInputMarkup ON CHANGE changeAfterInputMarkup(d), afterInputMarkupSum,
                    numberAfterInputVAT, valueAfterInputVAT, afterInputVATSum,
                    afterInputRetailPrice ON CHANGE changeAfterInputRetailPrice(d), afterInputRetailSum
;
DESIGN disparity {
    headerCreateDocuments {
        NEW headerRepricing {
            caption = 'Переоценка';
            type = COLUMNS;
            columns = 2;
            MOVE PROPERTY(createRepricing(dis));
            MOVE PROPERTY(nameRepricingOperation(dis));
            MOVE PROPERTY(nameRepricingCommittee(dis));
            MOVE PROPERTY(dataNumberDisposal(dis));
            MOVE PROPERTY(beforeDate(dis));
            MOVE PROPERTY(negativeMarkupOnAccount90(dis));
        }
    }
    PROPERTY(diffRetailSumDisparityDetail(dis)) { charWidth = 13;}
}

EXTEND FORM disparities
    PROPERTIES(dis) READONLY BACKGROUND backgroundCur(dis) createRepricing, diffRetailSumDisparityDetail AFTER inputSumDisparityDetail(dis)
    PROPERTIES(dis)   printRepricing SHOWIF createRepricing(dis)

    PROPERTIES(d)   READONLY BACKGROUND backgroundCur(dis) SHOWIF createRepricing(dis)
                    curInputPrice, curInputSum,
                    curInputMarkup, curInputMarkupSum,
                    numberCurInputVAT, valueCurInputVAT, curInputVATSum,
                    curInputRetailPrice, curInputRetailSum
    PROPERTIES(d)   READONLY BACKGROUND backgroundAfter(dis) SHOWIF createRepricing(dis)
                    afterInputPrice, afterInputSum,
                    afterInputMarkup, afterInputMarkupSum,
                    numberAfterInputVAT, valueAfterInputVAT, afterInputVATSum,
                    afterInputRetailPrice, afterInputRetailSum

;
DESIGN disparities {
    printTab {
        MOVE GROUP(print,dis);
    }
}

//----------------------------------------------------------------------------------------------------------
quantity(DisparityRepricingDetail repricingDetail) += inputQuantity(disparityDetail(repricingDetail));

price(DisparityRepricingDetail repricingDetail) += afterInputPrice(disparityDetail(repricingDetail));
curPrice(DisparityRepricingDetail repricingDetail) += curInputPrice(disparityDetail(repricingDetail));

retailPrice(DisparityRepricingDetail repricingDetail) += afterInputRetailPrice(disparityDetail(repricingDetail));
curRetailPrice(DisparityRepricingDetail repricingDetail) += curInputRetailPrice(disparityDetail(repricingDetail));

retailSum(DisparityRepricingDetail repricingDetail) += afterInputRetailSum(disparityDetail(repricingDetail));
curRetailSum(DisparityRepricingDetail repricingDetail) += curInputRetailSum(disparityDetail(repricingDetail));

markup(DisparityRepricingDetail repricingDetail) += afterInputMarkup(disparityDetail(repricingDetail));
curMarkup(DisparityRepricingDetail repricingDetail) += curInputMarkup(disparityDetail(repricingDetail));

VAT(DisparityRepricingDetail repricingDetail) += afterInputVAT(disparityDetail(repricingDetail));
curVAT(DisparityRepricingDetail repricingDetail) += curInputVAT(disparityDetail(repricingDetail));

valueVAT(DisparityRepricingDetail repricingDetail) += valueAfterInputVAT(disparityDetail(repricingDetail));
valueCurVAT(DisparityRepricingDetail repricingDetail) += valueCurInputVAT(disparityDetail(repricingDetail));

sum(DisparityRepricingDetail repricingDetail) += afterInputSum(disparityDetail(repricingDetail));
curSum(DisparityRepricingDetail repricingDetail) += curInputSum(disparityDetail(repricingDetail));

VATSum(DisparityRepricingDetail repricingDetail) += afterInputVATSum(disparityDetail(repricingDetail));
curVATSum(DisparityRepricingDetail repricingDetail) += curInputVATSum(disparityDetail(repricingDetail));

markupSum(DisparityRepricingDetail repricingDetail) += afterInputMarkupSum(disparityDetail(repricingDetail));
curMarkupSum(DisparityRepricingDetail repricingDetail) += curInputMarkupSum(disparityDetail(repricingDetail));


edit(DisparityRepricing repricing) + {  edit(disparity(repricing)); }

// Не проводим основной приход по регистру
skip[PriceListLedger](InputDisparityDetail ledger) += needToRepricing(disparityDetail(ledger)); 

replaceBefore(Sku i, Sku item) + { 
    curInputPrice(DisparityDetail disparityDetail) <- curInputPrice(disparityDetail) WHERE sku(disparityDetail) = i;
    curInputRetailPrice(DisparityDetail disparityDetail) <- curInputRetailPrice(disparityDetail) WHERE sku(disparityDetail) = i;
}
