MODULE RepricingInvoice;

REQUIRE Repricing, Invoice;

NAMESPACE Repricing;

META defineRepricingAggregation(sign, stockProp)
//-- агр.объект

    // Комиссия
    @defineDocumentInterfaceHeaderRepricingCommittee (invoice, stockProp###stock);

    // Кол-во
    @defineDocumentInterfaceDetailSkuBalance (invoice);
    @deriveDocumentDetailSkuBalance (userInvoice, sku, stockProp###stock);

    // -- До
    @defineDocumentInterfaceDetailPricePrefix(invoice, cur, ' поставщика до');

    overCurRepricingPrice = ABSTRACT NUMERIC[16,4] (InvoiceDetail) MATERIALIZED;
    overCurRepricingPrice = ABSTRACT NUMERIC[16,4] (UserInvoiceDetail) MATERIALIZED;
    overCurRepricingPrice (UserInvoiceDetail detail) += overCurRepricingPrice(detail);

    curRepricingPrice 'Цена поставщика до' (UserInvoiceDetail detail) = OVERRIDE curPrice(detail), overCurRepricingPrice(detail) MATERIALIZED;
    curRepricingPrice 'Цена поставщика до' (InvoiceDetail detail) = OVERRIDE curPrice(detail), overCurRepricingPrice(detail) MATERIALIZED;

    @defineDocumentInterfaceDetailMarkupPrefix (invoice, cur, ' до');

    @defineDocumentInterfaceDetailVAT(invoice, country###stockProp###stock, cur, ' до');
    @deriveDocumentDetailVAT (userInvoice, cur, beforeDate, sku, stockProp###stock);
    @deriveDocumentDetailValueVAT(userInvoice, cur);

    @defineDocumentInterfaceDetailPricePrefix(invoice, curRetail, ' розничная до');

    // Автоматическое заполнение цен до
    @deriveDocumentDetailPriceSystemLedgerPriceListType(userInvoice, supplierPricingPriceListType, cur, sku, stockProp###stock);
    @deriveDocumentDetailPriceSystemLedgerPriceListType(userInvoice, retailPricingPriceListType, curRetail, sku, stockProp###stock);

    // Расчет надбавки обратным счетом
    curMarkup(UserInvoiceDetail userInvoiceDetail)  <- [ round2((((X - X*Y/(100+Y))/Z)-1)*100)](
        curRetailPrice(userInvoiceDetail),
        valueCurVAT(userInvoiceDetail),
        curRepricingPrice(userInvoiceDetail) IF curRepricingPrice(userInvoiceDetail)!=0.0)
        WHEN CHANGED(curRetailPrice(userInvoiceDetail)) OR CHANGED (curVAT(userInvoiceDetail)) OR CHANGED(curRepricingPrice(userInvoiceDetail));

    // Объявление действий, которые будут срабатывать по изменению надбавки и розничной цены
    @changeDocumentDetailMarkupCustomPrefix(userInvoiceDetail, curRetail, curRepricing, cur, cur);
    @changeDocumentDetailPriceCustomPrefix(userInvoiceDetail, curRetail, curRepricing, cur, cur);

    // -- После
    overRepricingPrice = ABSTRACT NUMERIC[16,4] (InvoiceDetail) MATERIALIZED;
    overRepricingPrice = ABSTRACT NUMERIC[16,4] (UserInvoiceDetail) MATERIALIZED;
    overRepricingPrice (UserInvoiceDetail detail) += overRepricingPrice(detail);

    repricingPrice (UserInvoiceDetail detail) = OVERRIDE price(detail), overRepricingPrice(detail) MATERIALIZED;
    repricingPrice (InvoiceDetail detail) = OVERRIDE price(detail), overRepricingPrice(detail) MATERIALIZED;

    // ---- Суммы по строкам ---- //

    // -- До
    @defineDocumentInterfaceDetailDataSumPrefix (invoice, cur, ' поставщика до');
    @defineDocumentInterfaceDetailMarkupSumPrefix (invoice, cur, ' до');
    @defineDocumentInterfaceDetailVATDataSumPrefix (invoice, cur, ' до');
    @defineDocumentInterfaceDetailDataSumPrefix (invoice, curRetail, ' розничная до');

    // Расчет сумм обратным счетом
    @deriveDocumentDetailSumPrefix(userInvoice, curRetail, currency, balanceBSku);
    @deriveDocumentDetailReverseVATSumPrefix(userInvoice, cur, curRetail);
    @deriveDocumentDetailMarkupSumPrefix(userInvoice, cur, curRetail, cur);
    @deriveDocumentDetailSumPrefix(userInvoice, cur, currency, balanceBSku);

    // -- После
    @defineDocumentInterfaceDetailDataSumPrefix (invoice, after, ' поставщика после');
    @defineDocumentInterfaceDetailMarkupSumPrefix (invoice, afterRetail, ' после');
    @defineDocumentInterfaceDetailVATDataSumPrefix (invoice, afterRetail, ' после');
    @defineDocumentInterfaceDetailDataSumPrefix (invoice, afterRetail, ' розничная после');

    // Расчет сумм обратным счетом
    afterRetailSum (UserInvoiceDetail detail)  <- round(balanceBSku(detail) * retailPrice(detail), currency(detail))
                        WHEN CHANGED(balanceBSku(detail)) OR CHANGED (retailPrice(detail)) OR CHANGED(currency(detail));
    afterRetailVATSum (UserInvoiceDetail detail)  <- round([ X*Y/(100+Y)](afterRetailSum(detail), valueRetailVAT(detail)), currency(detail))
                    WHEN CHANGED(afterRetailSum(detail)) OR CHANGED (valueRetailVAT(detail)) OR CHANGED (currency(detail));
    afterRetailMarkupSum(UserInvoiceDetail detail) <- afterRetailSum(detail) (-) afterRetailVATSum (detail) (-) afterSum(detail)
                    WHEN CHANGED(afterRetailVATSum(detail)) OR CHANGED (afterRetailVATSum (detail)) OR CHANGED (afterSum(detail));
    afterSum (UserInvoiceDetail detail)  <- round(balanceBSku(detail) * price(detail), currency(detail))
                        WHEN CHANGED(balanceBSku(detail)) OR CHANGED (price(detail)) OR CHANGED(currency(detail));

    // -- Разница
    @defineDocumentInterfaceDetailDiffSumPrefix (invoice, retailSum, after, cur, ' дооценки');

    // ---- Суммы по документу ---- //
    @defineDocumentInterfaceHeaderSumPrefix (invoice, diffRetail, ' дооценки');

    showCreateRepricing (Invoice invoice) = stockProp##Stock(invoice) IS DepartmentStore AND NOT costLedger(stockProp##Stock(invoice));
    @defineDocumentInterfaceProperty (invoice, createRepricing, 'Создать акт дооценки');

    needToRepricing (InvoiceDetail invoiceDetail) = curRetailPrice(invoiceDetail) != retailPrice(invoiceDetail)
                                                   AND balanceBSku(invoiceDetail) != 0 AND stockProp##Stock(invoiceDetail) IS DepartmentStore
                                                   AND NOT costLedger(stockProp##Stock(invoiceDetail))
                                                   AND createRepricing(invoiceDetail)
                                                   AND isStockSku(invoiceDetail) MATERIALIZED;// AND isPostedInvoiceDetail(invoiceDetail) ;

    needToRepricing (invoice)= GROUP SUM 1 IF needToRepricing(InvoiceDetail invoiceDetail)
        BY invoice(invoiceDetail) MATERIALIZED;

    CLASS InvoiceRepricing 'Акт дооценки на основе накладной'###sign : Repricing;
    CLASS InvoiceRepricingDetail 'Строка акта дооценки на основе накладной'###sign : RepricingDetail;

    @defineDocumentTables(invoiceRepricing);

    @defineDocumentAggregation(invoice, invoiceRepricing, needToRepricing);
    @defineDocumentAggregationTimePrefix(invoice, invoiceRepricing, before);

    repricing(InvoiceRepricingDetail detail) += invoiceRepricing(detail);

    print 'Акт переоценки' (Repricing repricing) = FORM repricing OBJECTS p = repricing PRINT IMAGE 'print.png' IN print;
    printRepricing 'Акт дооценки' (Invoice invoice) = print(invoiceRepricing(invoice)) IMAGE 'print.png' IN print;
    
    index(InvoiceRepricingDetail detail) += index(detail);

    date(InvoiceRepricing repricing) += date(repricing);
    time(InvoiceRepricing repricing) += time(repricing);

    beforeDate(InvoiceRepricing repricing) += beforeDate(repricing);
    beforeTime(InvoiceRepricing repricing) += beforeTime(repricing);

    @defineDocumentAggregationStockPrefix(invoice, invoiceRepricing, stockProp, 'Склад', , );
    departmentStore(InvoiceRepricing repricing) += stockProp##Stock(repricing) AS DepartmentStore;

    @defineDocumentAggregationPosted(invoice, invoiceRepricing);
    isPosted(InvoiceRepricing repricing) += isPosted(repricing);

    @defineDocumentAggregationClosed(invoice, invoiceRepricing);
    isClosed(InvoiceRepricing repricing) += isClosed(repricing);

    number 'Номер документа' (InvoiceRepricing invoiceRepricing) = number(invoice(invoiceRepricing));
    number(InvoiceRepricing repricing) += number(repricing);

    series 'Серия документа' (InvoiceRepricing invoiceRepricing) = series(invoice(invoiceRepricing));
    series(InvoiceRepricing repricing) += series(repricing);

    seriesNumber 'Серия/номер документа' (InvoiceRepricing invoiceRepricing) = seriesNumber(invoice(invoiceRepricing));

    noteInvoice 'Примечание' (InvoiceRepricing invoiceRepricing) = note(invoice(invoiceRepricing));
    note(InvoiceRepricing repricing) += noteInvoice(repricing);

    currency  (InvoiceRepricing invoiceRepricing) = currency(invoice(invoiceRepricing));
    currency (InvoiceRepricing repricing) += currency(repricing);
    repricingCommittee(InvoiceRepricing repricing) += repricingCommittee(invoice(repricing));
    numberDisposal(InvoiceRepricing repricing) += numberDisposal(invoice(repricing));

    @defineDocumentDescription(invoiceRepricing, InvoiceRepricingDetail, 'Акт дооценки на основе накладной');
    description (InvoiceRepricing repricing) += description(repricing);

    skipChangeLedger(InvoiceRepricing repricing) += repricing IS InvoiceRepricing;

    @defineDocumentAggregationDetailSku(invoice, invoiceRepricing, sku);
    sku(InvoiceRepricingDetail repricingDetail) +=  sku(repricingDetail);
    
    edit(InvoiceRepricingDetail d) + {  edit(invoiceDetail(d)); }
    show(InvoiceRepricingDetail d) + {  show(invoiceDetail(d)); }
    edit(InvoiceRepricing p) + {  edit(invoice(p)); }
    close(InvoiceRepricing p) + {  close(invoice(p)); }
    
    overCopy(UserInvoice s, UserInvoice d) + { 
        createRepricing(d) <- createRepricing(s);
        repricingCommittee(d) <- repricingCommittee(s);
        dataNumberDisposal(d) <- dataNumberDisposal(s);
        beforeDate(d) <- beforeDate(s);
    }

    backgroundCur 'Цвет' (Invoice invoice) = RGB(255, 255, 224) IF invoice IS Invoice;
    backgroundAfter 'Цвет' (Invoice invoice) = RGB(255, 255, 200) IF invoice IS Invoice;

    EXTEND FORM userInvoice
        PROPERTIES(i)   SHOWIF showCreateRepricing(i) BACKGROUND backgroundCur(i) createRepricing
        PROPERTIES(i)   BACKGROUND backgroundCur(i) SHOWIF createRepricing(i) nameRepricingCommittee, numberDisposal, beforeDate
        PROPERTIES(i)   BACKGROUND backgroundAfter(i) SHOWIF createRepricing(i) diffRetailSumUserInvoiceDetail

        OBJECTS rd = UserInvoiceDetail GRID
        PROPERTIES (rd) SHOWIF createRepricing(i) index
        PROPERTIES (rd) SHOWIF createRepricing(i) ON EDIT editSku(rd) BACKGROUND backgroundSku(rd) idBarcodeSku, 
                        nameSku, shortNameUOMSku, quantity
                        
        PROPERTIES(rd)   BACKGROUND backgroundCur(i) SHOWIF createRepricing(i) 
                        balanceBSku, curRepricingPrice, curSum,
                        curMarkup ON CHANGE changeCurMarkup(rd), curMarkupSum,
                        numberCurVAT, valueCurVAT, curVATSum,
                        curRetailPrice ON CHANGE changeCurRetailPrice(rd), curRetailSum
        PROPERTIES(rd)   BACKGROUND backgroundAfter(i) SHOWIF createRepricing(i)
                        afterSum, afterRetailVATSum, afterRetailMarkupSum, afterRetailSum             
        ORDER index(rd)                      
        FILTERS userInvoice(rd) == i   
    ;
    DESIGN userInvoice {
        headerCreateDocuments {
            NEW createHeaderRepricing {
                caption = 'Дооценка';
                MOVE PROPERTY(createRepricing(i));
            }
        }
        PROPERTY(diffRetailSumUserInvoiceDetail(i)) { charWidth = 13;}   
        specificationBox {
            NEW repricing {
                fill = 1;
                horizontal = FALSE;
                caption = 'Дооценка';
                NEW headerCreateRepricing {                    
                    type = COLUMNS;
                    lines = 3;                   
                    MOVE PROPERTY(nameRepricingCommittee(i));
                    MOVE PROPERTY(numberDisposal(i));
                    MOVE PROPERTY(beforeDate(i));
                }
                MOVE BOX(rd);
            }
        }
    }

    EXTEND FORM invoices
        PROPERTIES(i) BACKGROUND backgroundCur(i) diffRetailSumInvoiceDetail READONLY AFTER retailSumInvoiceDetail(i)
        PROPERTIES(i) PANEL  printRepricing SHOWIF createRepricing(i)

    ;

//----------------------------------------------------------------------------------------------------------
    quantity(InvoiceRepricingDetail repricingDetail) += balanceBSku(invoiceDetail(repricingDetail));

    // -- До

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, curPrice, 'Цена поставщика до');
    curPrice(InvoiceRepricingDetail repricingDetail) += curPrice(repricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, curMarkup, 'Надбавка до');
    curMarkup(InvoiceRepricingDetail repricingDetail) += curMarkup(repricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, curVAT, 'НДС до');
    curVAT(InvoiceRepricingDetail repricingDetail) += curVAT(repricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, valueCurVAT, 'НДС, % до');
    valueCurVAT(InvoiceRepricingDetail repricingDetail) += valueCurVAT(repricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, curRetailPrice, 'Цена розничная до');
    curRetailPrice(InvoiceRepricingDetail repricingDetail) += curRetailPrice(repricingDetail);

    // -- После

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, price, 'Цена поставщика после');
    price(InvoiceRepricingDetail repricingDetail) += NUMERIC[16,4](price(repricingDetail));

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, retailMarkup, 'Надбавка после');
    markup(InvoiceRepricingDetail repricingDetail) += retailMarkup(repricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, retailVAT, 'НДС после');
    VAT(InvoiceRepricingDetail repricingDetail) += retailVAT(repricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, valueRetailVAT, 'НДС, % после');
    valueVAT(InvoiceRepricingDetail repricingDetail) += valueRetailVAT(repricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, retailPrice, 'Цена розничная после');
    retailPrice(InvoiceRepricingDetail repricingDetail) += retailPrice(repricingDetail);

    // ---- Суммы по строкам ---- //

    // -- До
    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, curSum, 'Сумма поставщика до');
    curSum(InvoiceRepricingDetail repricingDetail) += curSum(repricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, curMarkupSum, 'Сумма надбавки до');
    curMarkupSum(InvoiceRepricingDetail repricingDetail) += curMarkupSum(repricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, curVATSum, 'Сумма НДС до');
    curVATSum(InvoiceRepricingDetail repricingDetail) += curVATSum(repricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, curRetailSum, 'Сумма розничная до');
    curRetailSum(InvoiceRepricingDetail repricingDetail) += curRetailSum(repricingDetail);

    // -- После
    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, afterSum, 'Сумма поставщика после');
    sum(InvoiceRepricingDetail repricingDetail) += afterSum(repricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, afterRetailMarkupSum, 'Сумма надбавки после');
    markupSum(InvoiceRepricingDetail repricingDetail) += afterRetailMarkupSum(repricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, afterRetailVATSum, 'Сумма НДС после');
    VATSum(InvoiceRepricingDetail repricingDetail) += afterRetailVATSum(repricingDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceRepricing, afterRetailSum, 'Сумма розничная после');
    retailSum(InvoiceRepricingDetail repricingDetail) += afterRetailSum(repricingDetail);

END

