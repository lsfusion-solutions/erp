MODULE Repricing;

REQUIRE RepricingCommittee, Store, PricingSum, StockDocumentSkuLedger, PriceListCalc, RepricingOperation, PriceListLedgerAccount, 
        PriceListStore, OrderLedger, Item;

NAMESPACE Repricing;

//----------------------------------------------- Переоценка (розница) ---------------------------------------------------//

CLASS ABSTRACT Repricing 'Акт переоценки' : Document;
CLASS ABSTRACT RepricingDetail 'Строка акта переоценки': InLIFOSkuLedger, DocumentDetail;

CLASS UserRepricing 'Акт переоценки (польз.)' : Repricing;
CLASS UserRepricingDetail 'Строка акта переоценки (польз.)' : RepricingDetail;

@defineDocumentInterface(repricing);
TABLE sessionRepricingDetail(Session, RepricingDetail);
@deriveDocumentHeaderTimePrefix(UserRepricing, );

@defineDocumentInterfaceTimePrefix(repricing, before, ' документа (до)');
@deriveDocumentHeaderTimePrefix(UserRepricing, before);

@defineDocumentInterfaceNumber(repricing, BPSTRING[2]);
@defineNumeratedDefault(UserRepricing, 'Переоценки', 'ПО');

@defineDocumentInterfaceDataStock(repricing, departmentStore, 'Склад');
@defineDocumentDialogStocks(userRepricing, departmentStore, company, , );
@defineDocumentInterfacePosted(repricing);
@defineDocumentInterfaceClosed(repricing);
@defineDocumentClosedConstraint(UserRepricing);

@defineDocumentInterfaceDescription(repricing, 'Акт переоценки');

@defineDocumentInterfaceCurrency(repricing);
@deriveDocumentCurrency(userRepricing, departmentStore);

@defineExternalizable(userRepricing, STRING[100]);

// Комиссия
@defineDocumentInterfaceHeaderRepricingCommittee (repricing, departmentStore);

// Sku
@defineDocumentInterfaceDetailSku(repricing, sku);

lastRepricingDetail (Sku s) = GROUP LAST (RepricingDetail d) ORDER dateTime(d) WHERE isPosted(d) BY sku(d);

// Кол-во
@defineDocumentInterfaceDetailQuantity(repricing);

// Округление розничной цены
roundCondition(UserRepricingDetail userRepricingDetail) = roundCondition(departmentStore(userRepricingDetail));

// -- До

// Цена поставщика
@defineDocumentInterfaceDetailPricePrefix(repricing, cur, ' поставщика до');

// Цена от которой будет считаться надбавка
overCurRepricingPrice = ABSTRACT NUMERIC[16,4] (RepricingDetail) MATERIALIZED;
overCurRepricingPrice = ABSTRACT NUMERIC[16,4] (UserRepricingDetail) MATERIALIZED;
overCurRepricingPrice (UserRepricingDetail detail) += overCurRepricingPrice(detail);

curRepricingPrice (UserRepricingDetail detail) = OVERRIDE overCurRepricingPrice(detail), curPrice(detail) MATERIALIZED;
curRepricingPrice (RepricingDetail detail) = OVERRIDE overCurRepricingPrice(detail), curPrice(detail) MATERIALIZED;

// Надбавка
@defineDocumentInterfaceDetailMarkupPrefix (repricing, cur, ' до');

// НДС
@defineDocumentInterfaceDetailVAT(repricing, countryDepartmentStore, cur, ' до');
@deriveDocumentDetailVAT (userRepricing, cur, beforeDate);
@deriveDocumentDetailValueVAT(userRepricing, cur);

// Розничная цена
@defineDocumentInterfaceDetailPricePrefix(repricing, curRetail, ' розничная до');

curExtraRetailPrice 'Цена посуды до' = ABSTRACT NUMERIC[16,4] (RepricingDetail);
curExtraRetailVATSum 'Сумма НДС посуды до'= ABSTRACT NUMERIC[18,4] (RepricingDetail);
curExtraRetailSum 'Сумма посуды до' = ABSTRACT NUMERIC[18,4] (RepricingDetail);

//-- Партии
@showDocumentInterfaceDetailBatch(repricing);
@defineDocumentInterfaceDetailBatch(repricing, batch);

changeBatch(UserRepricingDetail detail)  { 
    DIALOG dialogBatchStockOut OBJECTS st = departmentStore(detail),
                             t = dateTime(detail),
                             sk = sku(detail),
                             bt = batch(detail) INPUT NULL NEWSESSION DO
        batch(detail) <- bt;
}

replace(Sku s, Batch b) + {  sku(UserRepricingDetail detail) <- s WHERE batch(detail) == b;}

@defineBalancesBatch(repricingDetail); //-- показываем по нажатию правой клавиши остатки партии
@defineBalancesBatch(userRepricingDetail); //-- показываем по нажатию правой клавиши остатки партии
@defineMovementBatch(repricingDetail, departmentStore); //-- показываем по нажатию правой клавиши движение по партии
@defineMovementBatch(userRepricingDetail, departmentStore); //-- показываем по нажатию правой клавиши движение по партии

@defineMovementSku(repricingDetail, departmentStore); //-- показываем по нажатию правой клавиши движение товара
@defineMovementSku(userRepricingDetail, departmentStore); //-- показываем по нажатию правой клавиши движение товара
@defineBalancesSku(repricingDetail); //-- показываем по нажатию правой клавиши остатки товара
@defineBalancesSku(userRepricingDetail); //-- показываем по нажатию правой клавиши остатки товара

@defineBarcodeSku(repricingDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
@defineBarcodeSku(userRepricingDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара       

@defineMovementPriceSku(repricingDetail, departmentStore); //-- показываем по нажатию правой клавиши изменение цены товара
@defineMovementPriceSku(userRepricingDetail, departmentStore); //-- показываем по нажатию правой клавиши  изменение цены товара

@defineInfoSku(repricingDetail); //-- показываем по нажатию правой клавиши информацию по товару
@defineInfoSku(userRepricingDetail); //-- показываем по нажатию правой клавиши информацию по товару

// Автоматическое заполнение цен до
curPrice (UserRepricingDetail detail)  <- round2(IF batch(detail)

                                                THEN prevPriceB(SystemLedgerPriceListType.supplierPricingPriceListType,
                                                                                               batch(detail),
                                                                                               departmentStore(detail),
                                                                                               dateTime(detail))
                                                ELSE prevPriceB(SystemLedgerPriceListType.supplierPricingPriceListType,
                                                                                             sku(detail),
                                                                                             departmentStore(detail),
                                                                                             dateTime(detail)))
                                                WHEN DO CHANGED(sku(detail)) OR
                                                     CHANGED(departmentStore(detail)) OR
                                                     (CHANGED(dateTime(detail)) AND NOT isPosted(detail)) OR
                                                     CHANGED(batch(detail));

@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch(userRepricing, retailPricingPriceListType, curRetail, sku, departmentStore);

// Автоматическое проставление надбавок
curRetailOverPrice(UserRepricingDetail d) = (curRetailPrice(d) (-) curExtraRetailPrice(d));

curMarkup(UserRepricingDetail userRepricingDetail)  <- NUMERIC[8,3]([ round2((((X - X*Y/(100+Y))/Z)-1)*100)](
    curRetailOverPrice(userRepricingDetail),
    valueCurVAT(userRepricingDetail),
    curRepricingPrice(userRepricingDetail) IF curRepricingPrice(userRepricingDetail)!=0.0))
    WHEN CHANGED(curRetailOverPrice(userRepricingDetail)) OR
         CHANGED(curVAT(userRepricingDetail)) OR
         CHANGED(curRepricingPrice(userRepricingDetail));

// Объявление действий, которые будут срабатывать по изменению надбавки и розничной цены

@changeDocumentDetailMarkupCustomPrefix(userRepricingDetail, curRetail,curRetailOver, curRepricing, cur, cur);

skipCalcCurRetailPrice = ABSTRACT BOOLEAN (UserRepricingDetail);
calcCurRetailPrice(UserRepricingDetail userRepricingDetail)  = round(NUMERIC[16,4]([ (X*(Y+100)*(Z+100)/10000) (+) AZ](
    curRepricingPrice(userRepricingDetail),
    curMarkup(userRepricingDetail),
    valueCurVAT(userRepricingDetail),
    curExtraRetailPrice(userRepricingDetail))), roundCondition(userRepricingDetail)) IF NOT skipCalcCurRetailPrice(userRepricingDetail);

changeCurMarkup(UserRepricingDetail userRepricingDetail)  { 
    INPUT n = NUMERIC[8,3] DO {
        curMarkup(userRepricingDetail) <- n;
        curRetailPrice(userRepricingDetail) <- calcCurRetailPrice(userRepricingDetail) WHERE calcCurRetailPrice(userRepricingDetail);
    }
}
//
//@changeDocumentDetailPriceCustomPrefix(userRepricingDetail, curRetail, curRepricing, cur, cur){
//    @changeDocumentDetailPriceCustomPrefix(userRepricingDetail, curRetail, curRepricing, cur, cur, ){
//    skipCalcCurRetailPrice = ABSTRACT BOOLEAN (UserRepricingDetail);
//    calcCurRetailPrice(UserRepricingDetail userRepricingDetail)  = round(NUMERIC[16,4]([ X*(Y+100)*(Z+100)/10000](
//        curRepricingPrice(userRepricingDetail),
//        curMarkup(userRepricingDetail),
//        valueCurVAT(userRepricingDetail))), roundCondition(userRepricingDetail)) IF NOT skipCalcCurRetailPrice(userRepricingDetail);
//
//    changeCurMarkup(UserRepricingDetail userRepricingDetail)  { 
//        INPUT n = NUMERIC[8,3] DO {
//            curMarkup(userRepricingDetail) <- n;
//            curRetailPrice(userRepricingDetail) <- calcCurRetailPrice(userRepricingDetail) WHERE calcCurRetailPrice(userRepricingDetail);
//        }
//    }
//};
//};

// -- После

// Цена поставщика
@defineDocumentInterfaceDetailPricePrefix(repricing, , ' поставщика после');

price(UserRepricingDetail d) <- curPrice(d) WHEN 
    CHANGED(sku(d)) OR
    CHANGED(departmentStore(d)) OR
    CHANGED(dateTime(d)) OR
    CHANGED(batch(d));

// Цена от которой будет считаться надбавка
overRepricingPrice = ABSTRACT NUMERIC[16,4] (RepricingDetail) MATERIALIZED;
overRepricingPrice = ABSTRACT NUMERIC[16,4] (UserRepricingDetail) MATERIALIZED;
overRepricingPrice (UserRepricingDetail detail) += overRepricingPrice(detail);

repricingPrice (UserRepricingDetail detail) = OVERRIDE overRepricingPrice(detail), price(detail) MATERIALIZED;
repricingPrice (RepricingDetail detail) = OVERRIDE overRepricingPrice(detail), price(detail) MATERIALIZED;

// Надбавка
@defineDocumentInterfaceDetailMarkupPrefix (repricing, , ' после');

// НДС
@defineDocumentInterfaceDetailVAT(repricing, countryDepartmentStore, , ' после');
@deriveDocumentDetailVAT(userRepricing, );
@deriveDocumentDetailValueVAT(userRepricing, );

// Розничная цена
@defineDocumentInterfaceDetailPricePrefix(repricing, retail, ' розничная после');

extraRetailPrice 'Цена посуды после' = ABSTRACT NUMERIC[16,4] (RepricingDetail);
extraRetailVATSum 'Сумма НДС посуды после' = ABSTRACT NUMERIC[18,4] (RepricingDetail);
extraRetailSum 'Сумма посуды после' = ABSTRACT NUMERIC[18,4] (RepricingDetail);

// Автоматическое проставление надбавок
retailOverPrice(UserRepricingDetail d) = (retailPrice(d) (-) extraRetailPrice(d));
markup(UserRepricingDetail userRepricingDetail)  <- NUMERIC[8,3]([ round2((((X - X*Y/(100+Y))/Z)-1)*100)](
    retailOverPrice(userRepricingDetail),
    valueVAT(userRepricingDetail),
    repricingPrice(userRepricingDetail) IF repricingPrice(userRepricingDetail)!=0.0))
    WHEN CHANGED(retailOverPrice(userRepricingDetail)) OR
         CHANGED (VAT(userRepricingDetail)) OR
         CHANGED(repricingPrice(userRepricingDetail));

// Объявление действий, которые будут срабатывать по изменению надбавки и розничной цены
@changeDocumentDetailMarkupCustomPrefix(userRepricingDetail, retail, retailOver, repricing, , );
skipCalcRetailPrice = ABSTRACT BOOLEAN (UserRepricingDetail);
calcRetailPrice(UserRepricingDetail userRepricingDetail)  = round(NUMERIC[16,4]([ (X*(Y+100)*(Z+100)/10000) (+) AZ](
    repricingPrice(userRepricingDetail),
    markup(userRepricingDetail),
    valueVAT(userRepricingDetail),
    extraRetailPrice(userRepricingDetail))), roundCondition(userRepricingDetail)) IF NOT skipCalcRetailPrice(userRepricingDetail);

changeMarkup(UserRepricingDetail userRepricingDetail)  { 
    INPUT n = NUMERIC[8,3] DO {
        markup(userRepricingDetail) <- n;
        retailPrice(userRepricingDetail) <- calcRetailPrice(userRepricingDetail) WHERE calcRetailPrice(userRepricingDetail);
    }
}

//@changeDocumentDetailPriceCustomPrefix(userRepricingDetail, retail, repricing, , ){
//    @changeDocumentDetailPriceCustomPrefix(userRepricingDetail, retail, repricing, , , ){
//    skipCalcRetailPrice = ABSTRACT BOOLEAN (UserRepricingDetail);
//    calcRetailPrice(UserRepricingDetail userRepricingDetail)  = round(NUMERIC[16,4]([ X*(Y+100)*(Z+100)/10000](
//        repricingPrice(userRepricingDetail),
//        markup(userRepricingDetail),
//        valueVAT(userRepricingDetail))), roundCondition(userRepricingDetail)) IF NOT skipCalcRetailPrice(userRepricingDetail);
//
//    changeMarkup(UserRepricingDetail userRepricingDetail)  { 
//        INPUT n = NUMERIC[8,3] DO {
//            markup(userRepricingDetail) <- n;
//            retailPrice(userRepricingDetail) <- calcRetailPrice(userRepricingDetail) WHERE calcRetailPrice(userRepricingDetail);
//        }
//    }
//};
//};

// ---- Суммы по строкам ---- //

negativeMarkupOnAccount90 'Относить отрицательную надбавку на 90 счет' = ABSTRACT BOOLEAN (Repricing);
negativeMarkupOnAccount90 'Относить отрицательную надбавку на 90 счет' = DATA BOOLEAN (UserRepricing) IN documentPrm;
negativeMarkupOnAccount90(UserRepricing r) += negativeMarkupOnAccount90(r);

negativeMarkupOnAccount90 'Относить отрицательную надбавку на 90 счет' = negativeMarkupOnAccount90(repricing(RepricingDetail d));
negativeMarkupOnAccount90 'Относить отрицательную надбавку на 90 счет' = negativeMarkupOnAccount90(userRepricing(UserRepricingDetail d));

// -- До
@defineDocumentInterfaceDetailDataSumPrefix (repricing, cur, ' поставщика до');
@defineDocumentInterfaceDetailMarkupSumPrefix (repricing, cur, ' до');
@defineDocumentInterfaceDetailVATDataSumPrefix (repricing, cur, ' до');
@defineDocumentInterfaceDetailDataSumPrefix (repricing, curRetail, ' розничная до');

// -- После
@defineDocumentInterfaceDetailDataSumPrefix (repricing, , ' поставщика после');
@defineDocumentInterfaceDetailMarkupSumPrefix (repricing, , ' после');
@defineDocumentInterfaceDetailVATDataSumPrefix (repricing, , ' после');
@defineDocumentInterfaceDetailDataSumPrefix (repricing, retail, ' розничная после');

// -- Разница

diffMarkupSum 'Сумма изменения надбавки' (RepricingDetail d) =  (IF negativeMarkupOnAccount90(d) THEN max(markupSum(d),0.0) ELSE markupSum(d)) (-) 
                                                                                    (IF negativeMarkupOnAccount90(d) THEN max(curMarkupSum(d),0.0) ELSE curMarkupSum(d));    
diffMarkupSum 'Сумма изменения надбавки' (UserRepricingDetail d) =  (IF negativeMarkupOnAccount90(d) THEN max(markupSum(d),0.0) ELSE markupSum(d)) (-) 
                                                                                    (IF negativeMarkupOnAccount90(d) THEN max(curMarkupSum(d),0.0) ELSE curMarkupSum(d) );    

diffSum 'Сумма изменения поставщика ' (RepricingDetail d) =  sum(d) (-) 
                                                                               curSum(d) (+) 
                                                                               (-curMarkupSum(d) IF negativeMarkupOnAccount90(d) AND curMarkupSum(d) <0.0) (+)
                                                                               (markupSum(d) IF negativeMarkupOnAccount90(d) AND markupSum(d) <0.0);
diffSum 'Сумма изменения поставщика ' (UserRepricingDetail d) =  sum(d) (-) 
                                                                                   curSum(d) (+) 
                                                                                   (-curMarkupSum(d) IF negativeMarkupOnAccount90(d) AND curMarkupSum(d) <0.0) (+)
                                                                                   (markupSum(d) IF negativeMarkupOnAccount90(d) AND markupSum(d) <0.0);

@defineDocumentInterfaceDetailDiffSumPrefix (repricing, VATSum, , cur, ' изменения НДС');
@defineDocumentInterfaceDetailDiffSumPrefix (repricing, retailSum, , cur, ' изменения розничной');

// Расчет сумм обратным счетом
// -- До
@deriveDocumentDetailSumPrefix(userRepricing, curRetail, currency, quantity);

curRetailOverSum(UserRepricingDetail d) = curRetailSum(d) (-) curExtraRetailSum(d);
@deriveDocumentDetailReverseVATSumPrefix(userRepricing, cur, curRetailOver);
@deriveDocumentDetailMarkupSumPrefix(userRepricing, cur, curRetailOver, cur);
@deriveDocumentDetailSumPrefix(userRepricing, cur, currency, quantity);

// -- После

@deriveDocumentDetailSumPrefix(userRepricing, retail, currency, quantity);
retailOverSum(UserRepricingDetail d) = retailSum(d) (-) extraRetailSum(d);
@deriveDocumentDetailReverseVATSumPrefix(userRepricing, , retailOver);
@deriveDocumentDetailMarkupSumPrefix(userRepricing, , retailOver, );
@deriveDocumentDetailSumPrefix(userRepricing, , currency, quantity);

// ---- Суммы по документу ---- //

@defineDocumentInterfaceHeaderQuantity(repricing);
@defineDocumentHeaderSkuQuantity(repricing, sku);
@defineDocumentHeaderSkuQuantity(userRepricing, sku);

// -- До
@defineDocumentInterfaceHeaderSumPrefix (repricing, cur, ' поставщика до');
@defineDocumentInterfaceHeaderSumPrefix (repricing, curMarkup, ' надбавки до');
@defineDocumentInterfaceHeaderSumPrefix (repricing, curVAT, ' НДС до');
@defineDocumentInterfaceHeaderSumPrefix (repricing, curRetail, ' розничная до');

// -- После
@defineDocumentInterfaceHeaderSumPrefix (repricing, , ' поставщика после');
@defineDocumentInterfaceHeaderSumPrefix (repricing, markup, ' надбавки после');
@defineDocumentInterfaceHeaderSumPrefix (repricing, VAT, ' НДС после');
@defineDocumentInterfaceHeaderSumPrefix (repricing, retail, ' розничная после');

// -- Разница
diffSumRepricingDetail 'Сумма изменения поставщика' (repricing) = GROUP SUM diffSum(RepricingDetail idetail) BY repricing(idetail) IN documentSum MATERIALIZED;
diffSumUserRepricingDetail 'Сумма изменения поставщика' (userRepricing) = GROUP SUM diffSum(UserRepricingDetail idetail) BY userRepricing(idetail) IN documentSum;

diffMarkupSumRepricingDetail 'Сумма изменения надбавки' (repricing) = GROUP SUM diffMarkupSum(RepricingDetail idetail) BY repricing(idetail) IN documentSum MATERIALIZED;
diffMarkupSumUserRepricingDetail 'Сумма изменения надбавки' (userRepricing) = GROUP SUM diffMarkupSum(UserRepricingDetail idetail) BY userRepricing(idetail) IN documentSum;

diffVATSumRepricingDetail 'Сумма изменения НДС' (repricing) = GROUP SUM diffVATSum(RepricingDetail idetail) BY repricing(idetail) IN documentSum MATERIALIZED;
diffVATSumUserRepricingDetail 'Сумма изменения НДС' (userRepricing) = GROUP SUM diffVATSum(UserRepricingDetail idetail) BY userRepricing(idetail) IN documentSum;

diffRetailSumRepricingDetail 'Сумма изменения розничной' (repricing) = GROUP SUM diffRetailSum(RepricingDetail idetail) BY repricing(idetail) IN documentSum MATERIALIZED;
diffRetailSumUserRepricingDetail 'Сумма изменения розничной' (userRepricing) = GROUP SUM diffRetailSum(UserRepricingDetail idetail) BY userRepricing(idetail) IN documentSum;

// Изменение сумм по товару, таре...
@defineDocumentInterfaceHeaderItemSum(repricing, diffRetail, );                   //-- сумма розничная
@defineDocumentInterfaceHeaderItemSum (repricing, diffMarkup, diffMarkup);        //-- сумма надбавки
@defineDocumentInterfaceHeaderItemSum (repricing, diffVAT, diffVAT);              //-- сумма ндс
@defineDocumentInterfaceHeaderItemSum (repricing, diff, diff);                    //-- сумма поставщика

@defineDocumentInterfaceHeaderItemSumDouble (repricing, range, diff, diff, , VAT);
@defineDocumentInterfaceHeaderItemSumDouble (repricing, range, diffMarkup, diffMarkup, , VAT);
@defineDocumentInterfaceHeaderItemSumDouble (repricing, range, diffVAT, diffVAT, , VAT);
@defineDocumentInterfaceHeaderItemSumDouble (repricing, range, diffRetail, diffRetail, , VAT);

// Действия по добавлению строк
@defineAddDetailDialogSkuStock(userRepricing, sku, departmentStore, dialogSku);
@defineAddDetailDialogBarcode(userRepricing, sku);

// Не изменять текущие цены
@defineDocumentInterfaceHeaderSkip(Repricing, changeLedger, 'Не изменять текущие цены');
@defineDocumentInterfaceDetailSkip(repricing, changeLedger, 'Не изменять текущие цены');


// ---- Действия по проставлению новых надбавок и цен ------- //

repricingRoundCondition = DATA RoundCondition ();
nameRepricingRoundCondition 'Условие округления розничной цены' ()= name(repricingRoundCondition());

CONSTRAINT defaultCurrency() AND repricingRoundCondition() AND NOT defaultCurrency() == currency(repricingRoundCondition())
    CHECKED BY repricingRoundCondition[] MESSAGE 'Валюта округления должна совпадать с валютой по умолчанию';

EXTEND FORM options
    PROPERTIES() nameRepricingRoundCondition
;

DESIGN options {
    pane {        
        NEW repricings {
            caption = 'Акты переоценки';
            NEW rPanel{
                MOVE PROPERTY(nameRepricingRoundCondition());  
            }
            NEW rBody;             
        }
    }
}

CLASS ChangePriceType 'Тип изменения цены' {
    markupChange 'Процент торговой надбавки',
    discountChange 'Процент к розничной цене'
}
FORM changePriceTypes 'Типы изменения цен'
    OBJECTS t = ChangePriceType
    PROPERTIES(t) READONLY staticCaption
    LIST ChangePriceType OBJECT t
;

changePriceType = DATA ChangePriceType (UserRepricing);
nameChangePriceType 'Тип изменения цены' (UserRepricing userRepricing) = staticCaption(changePriceType(userRepricing)) CHARWIDTH 20 NOFLEX;

percent 'Процент' (userRepricing)= DATA NUMERIC[8,3](UserRepricing);

roundCondition = DATA RoundCondition (UserRepricing);
nameRoundCondition 'Условие округления розничной цены' (UserRepricing d)= name(roundCondition(d));

CONSTRAINT currency(UserRepricing r) AND roundCondition(r) AND NOT currency(r) == currency(roundCondition(r))
    CHECKED BY roundCondition[UserRepricing] MESSAGE 'Валюта округления должна совпадать с валютой переоценки';

newDiscountRetailPrice (UserRepricingDetail d) =  round(NUMERIC[16,4]([ X+(X*Y)/100](
    curRetailPrice(d),
    percent(userRepricing(d)))), roundCondition(userRepricing(d)));

newMarkupRetailPrice (UserRepricingDetail d) = round(NUMERIC[16,4]([ X*(Y+100)*(Z+100)/10000](
    curRepricingPrice(d),
    percent(userRepricing(d)),
    valueCurVAT(d))), roundCondition(userRepricing(d)));

FORM addPercentUserRepricing 'Изменение цены'
    OBJECTS u=UserRepricing PANEL
    PROPERTIES (u) nameChangePriceType, percent, nameRoundCondition
;

DESIGN addPercentUserRepricing {
    GROUP(,u) {
        fill = 1;
        columns = 1;
        type = CONTAINERV;
        PROPERTY (nameChangePriceType(u)) {
            alignment = STRETCH;
            caption = 'Выберите тип';
            font = 'bold 28';
            panelCaptionVertical = TRUE;
        }
        PROPERTY (percent(u)) {
            alignment = STRETCH;
            caption = 'Введите процент';
            font = 'bold 64';
            panelCaptionVertical = TRUE;
        }
        PROPERTY (nameRoundCondition(u)) {
            alignment = STRETCH;
            caption = 'Выберите тип округления';
            font = 'bold 28';
            panelCaptionVertical = TRUE;
        }        
    }
}

overChangePriceUser  ABSTRACT LIST ( RepricingDetail);

changePrice 'Изменить цену' (UserRepricing repricing)  { 
    roundCondition(repricing) <- repricingRoundCondition() IF currency(repricing) == currency(repricingRoundCondition());
    DIALOG addPercentUserRepricing OBJECTS u = repricing DO 
        IF changePriceType(repricing) AND percent(repricing) THEN
            FOR userRepricing(UserRepricingDetail d) == repricing DO {
                price(d) <- curPrice(d);
                overChangePriceUser(d);
                VAT(d) <- curVAT(d);
                valueVAT(d) <- valueCurVAT(d);
                IF changePriceType(repricing) == ChangePriceType.markupChange THEN {
                    retailPrice(d) <- newMarkupRetailPrice(d);
                } ELSE {
                    IF changePriceType(repricing)== ChangePriceType.discountChange THEN {
                        retailPrice(d) <- newDiscountRetailPrice(d);
                    }
                }
                markup(d) <- calcMarkup(d) WHERE calcMarkup(d);
            }
} TOOLBAR;

overRecalculatePrice  ABSTRACT LIST ( UserRepricingDetail);
overConfirmRecalculatePrice  ABSTRACT LIST ( UserRepricingDetail);

recalculatePrice 'Пересчитать цены (до)' (UserRepricing repricing)  { 
    
    FOR userRepricing(UserRepricingDetail d) == repricing DO {
        IF notUseRound2() THEN {
            curPrice(d) <- IF batch(d)                                          
                THEN prevPriceB(SystemLedgerPriceListType.supplierPricingPriceListType,
                            batch(d),
                            departmentStore(d),
                            dateTime(d))
                ELSE prevPriceB(SystemLedgerPriceListType.supplierPricingPriceListType,
                            sku(d),
                            departmentStore(d),
                            dateTime(d));
        } ELSE {
            curPrice(d) <- round2(IF batch(d)                                          
                THEN prevPriceB(SystemLedgerPriceListType.supplierPricingPriceListType,
                            batch(d),
                            departmentStore(d),
                            dateTime(d))
                ELSE prevPriceB(SystemLedgerPriceListType.supplierPricingPriceListType,
                            sku(d),
                            departmentStore(d),
                            dateTime(d)));        
        }                
                                                           
//        curVATUserRepricingDetail(d) <- curVATUserRepricingDetail(d);
//        valueCurVATUserRepricingDetail(d) <- valueCurVATUserRepricingDetail(d);
        
        curRetailPrice(d) <- IF batch(d)                
                THEN prevPriceB(SystemLedgerPriceListType.retailPricingPriceListType,
                            batch(d),
                            departmentStore(d),
                            dateTime(d))
                ELSE prevPriceB(SystemLedgerPriceListType.retailPricingPriceListType,
                            sku(d),
                            departmentStore(d),
                            dateTime(d));
                            
                            
        overRecalculatePrice(d);
    }    
    ASK 'Может, Вы хотите пересчитать и цены (после)?' DO {
        FOR userRepricing(UserRepricingDetail d) == repricing DO {
            price(d) <- curPrice(d);
            overConfirmRecalculatePrice(d);        
        }        
    }      


        
} TOOLBAR;
//------------------------------------ Печатные формы акт расценки ------------------------------------------------ //
overNameStore = ABSTRACT ISTRING[150](Repricing);
nameStore 'Магазин' (Repricing repricing) = OVERRIDE overNameStore(repricing), nameStore(departmentStore(repricing));

printedAct 'Распечатан' = ABSTRACT BOOLEAN (Repricing);
printedAct 'Распечатан' = DATA BOOLEAN (UserRepricing);
printedAct (UserRepricing p) += printedAct(p);
statusPrintedAct 'Статус печати акта' (Repricing r) = CASE WHEN printedAct(r) THEN 'Распечатан' 
                                                    ELSE 'Не распечатан';
printActBackground 'Цвет' (Repricing r) = RGB(212,255,212) IF r IS Repricing AND NOT printedAct(r);

overReportFileDetail = ABSTRACT STRING[100](Repricing);
reportFileDetail (Repricing r) =  OVERRIDE overReportFileDetail(r), 'Repricing_repricing_d.jrxml' IF r IS Repricing; 

@defineOption(printNullDiffSumUserRepricingDetail, 'Печатать в актах переоценки строки с пустыми суммами', repricings);


FORM repricing 'Акт переоценки (печать)'

    OBJECTS p = Repricing PANEL SUBREPORT
    PROPERTIES (p)  SELECTOR isPosted

    PROPERTIES (p) number, series, date, time, nameStore, seriesNumber,
               nameDepartmentStore, countRepricingDetail, quantityRepricingDetail, nameLegalEntityStock,
               curSumRepricingDetail, curMarkupSumRepricingDetail, curVATSumRepricingDetail,
               curRetailSumRepricingDetail, 
               sumRepricingDetail, markupSumRepricingDetail, VATSumRepricingDetail,
               retailSumRepricingDetail,
               diffSumRepricingDetail, diffMarkupSumRepricingDetail, diffVATSumRepricingDetail,
               diffRetailSumRepricingDetail,
               note, numberDisposal, repricingCommittee, nameRepricingCommittee,
               nameChairman, shortNameChairman, namePositionChairman, nameEmployeeCommittee,
               shortNameEmployeeCommittee


    OBJECTS d = RepricingDetail SUBREPORT reportFileDetail(p)
    PROPERTIES (d)  index, idBarcodeSku, nameSku, nameBatch, shortNameUOMSku, quantity,
               curPrice, curSum,
               curMarkup, curMarkupSum,
               numberCurVAT, valueCurVAT, curVATSum,
               curRetailPrice, curRetailSum,
               price, sum,
               markup, markupSum,
               numberVAT, valueVAT, VATSum,
               retailPrice, retailSum,
               diffSum, diffMarkupSum, diffVATSum,
               diffRetailSum
    
    OBJECTS e=Employee
    PROPERTIES(e) READONLY   name[Contact], namePosition, shortName

    FILTERS    repricing(d) == p,
               inCommittee(p, e),
               (diffSum(d) AND diffSum(d)!=0.0) OR
               (diffMarkupSum(d) AND diffMarkupSum(d)!=0.0) OR
               (diffVATSum(d) AND diffVATSum(d)!=0.0) OR
               (diffRetailSum(d) AND diffRetailSum(d)!=0.0) OR 
               printNullDiffSumUserRepricingDetail()

;

print 'Акт переоценки' (Repricing r)  { 
    PRINT repricing OBJECTS p = r;
    IF NOT printedAct(r) AND isPosted(r) THEN NEWSESSION {
        printedAct(r) <- TRUE;
        APPLY; 
    }    
} IMAGE 'print.png' IN print;
printXls 'Акт переоценки (xls)' (Repricing r)  { 
    PRINT repricing OBJECTS p = r XLS; 
} IMAGE 'print.png' IN print;
printAuto 'Акт переоценки (авто)' (Repricing r)  { 
    PRINT repricing OBJECTS p = r NOPREVIEW; 
    IF NOT printedAct(r) AND isPosted(r) THEN NEWSESSION {
        printedAct(r) <- TRUE;
        APPLY;  
    }     
} IMAGE 'print.png' IN print;

overReportFileRepricingP = ABSTRACT STRING[30] ();

reportFileRepricingP () = OVERRIDE overReportFileRepricingP(), 'Repricing_repricing_p.jrxml';
reportFileRepricingD () = 'Repricing_repricing_d.jrxml';
reportFileRepricingE () = 'Repricing_repricing_e.jrxml';

FORM repricingPeriod 'Акт переоценки (печать)'
    OBJECTS dd = (df=DATE, dt=DATE, st = Store) PANEL SUBREPORT reportFileRepricingP() 

    OBJECTS p = Repricing 
    PROPERTIES (p)  SELECTOR isPosted

    PROPERTIES (p) number, series, date, time, nameStore, seriesNumber,
               nameDepartmentStore, countRepricingDetail, quantityRepricingDetail, nameLegalEntityStock,
               curSumRepricingDetail, curMarkupSumRepricingDetail, curVATSumRepricingDetail,
               curRetailSumRepricingDetail,
               sumRepricingDetail, markupSumRepricingDetail, VATSumRepricingDetail,
               retailSumRepricingDetail,
               diffSumRepricingDetail, diffMarkupSumRepricingDetail, diffVATSumRepricingDetail,
               diffRetailSumRepricingDetail,
               note, numberDisposal, repricingCommittee, nameRepricingCommittee,
               nameChairman, shortNameChairman, namePositionChairman, nameEmployeeCommittee,
               shortNameEmployeeCommittee
    FILTERS date(p) >= df, date(p) <= dt, store(departmentStore(p)) == st, isPosted(p)
    ORDERS date(p), number(p)
    
    OBJECTS d = RepricingDetail SUBREPORT reportFileRepricingD() 
    PROPERTIES (d)  index, idBarcodeSku, nameSku, shortNameUOMSku, quantity,
               curPrice, curSum,
               curMarkup, curMarkupSum,
               numberCurVAT, valueCurVAT, curVATSum,
               curRetailPrice, curRetailSum,
               price, sum,
               markup, markupSum,
               numberVAT, valueVAT, VATSum,
               retailPrice, retailSum,
               diffSum, diffMarkupSum, diffVATSum,
               diffRetailSum

    OBJECTS e=Employee SUBREPORT reportFileRepricingE()
    PROPERTIES(e) READONLY   name[Contact], namePosition, shortName

    FILTERS    repricing(d) == p,
               inCommittee(p, e),
               (diffSum(d) AND diffSum(d)!=0.0) OR
               (diffMarkupSum(d) AND diffMarkupSum(d)!=0.0) OR
               (diffVATSum(d) AND diffVATSum(d)!=0.0) OR
               (diffRetailSum(d) AND diffRetailSum(d)!=0.0)
;



//----------------------------------------------- Операции ------------------------+----------------------------//

@defineDocumentInterfaceOperation (repricing, Repricing, );

@defineDocumentOperationConstraint(repricing, 'акт переоценки', Repricing);

@defineDocumentOperationRolePrefix(userRepricing, );

overToFillQuantityUserRepricingDetail ABSTRACT (UserRepricing);

toFillQuantityUserRepricingDetail 'Записать в кол-во остатки'(UserRepricing repricing)  { 
    quantity(UserRepricingDetail d) <- IF batch(d) THEN balanceB(batch(d),   
                                                        departmentStore(d), 
                                                        dateTime(d)) 
                                                 ELSE accountBalanceBQuantity(sku(d), departmentStore(d), dateTime(d))                                                     
                                                 WHERE userRepricing(d) == repricing;
    overToFillQuantityUserRepricingDetail(repricing);
                                                                     
    quantity(UserRepricingDetail d) <- NULL WHERE quantity(d) < 0.0 AND userRepricing(d) == repricing;
}

toFillQuantityUserRepricingDetailAllUserRepricings 'Записать в кол-во остатки (для всех)'()  { 
	NEWSESSION {
	    FOR UserRepricing r IS UserRepricing AND balance(operation(r)) AND NOT isClosed(r) AND accessCompany(currentUser(),departmentStore(r)) DO {
	        toFillQuantityUserRepricingDetail(r);    
	    }
	    apply();
	}
} CONFIRM;

showIfToFillQuantityUserRepricingDetailAllUserRepricings 'Отображать кнопку Записать в кол-во остатки (для всех)' = DATA BOOLEAN ();

EXTEND FORM options PROPERTIES () showIfToFillQuantityUserRepricingDetailAllUserRepricings;

DESIGN options{ repricings { MOVE PROPERTY (showIfToFillQuantityUserRepricingDetailAllUserRepricings());}}

allowRecalculatePrice (UserRepricing p) = NOT denyRecalculatePrice(operation(p));

@implementDocumentPrefix(repricing, retail, );
supplierStock[Document](Repricing repricing) += departmentStore(repricing);

@implementDocumentForm(repricing, r, 'Акт переоценки');

@implementDocumentBatch(repricing);

@implementDocumentBatchForm(r);

// --------------------------- Формы --------------------------------- //
editSku 'Редактировать SKU' (UserRepricingDetail d)  { NEWSESSION { edit(sku(d)); } }

FORM userRepricing 'Акт переоценки'
    OBJECTS p=UserRepricing PANEL
    PROPERTIES (p) isPosted, nameNumerator, number, series,
                   date, time, beforeDate, nameDepartmentStore ON CHANGE changeDepartmentStoreCompany(p),
                   diffSumUserRepricingDetail, diffMarkupSumUserRepricingDetail, diffVATSumUserRepricingDetail,
                   diffRetailSumUserRepricingDetail,
                   note, numberDisposal ON CHANGE changeNumberDisposal(p), nameRepricingCommittee, skipChangeLedger

    OBJECTS d=UserRepricingDetail
    PROPERTIES (d) index
    PROPERTIES (d) ON EDIT editSku(d) idBarcodeSku, nameSku, shortNameUOMSku
    PROPERTIES (d) nameBatch ON CHANGE changeBatch(d), quantity,

                   curPrice, curSum,                    
                   curMarkup ON CHANGE changeCurMarkup(d), curMarkupSum,
                   numberCurVAT, valueCurVAT, curVATSum,
                   curRetailPrice ON CHANGE changeCurRetailPrice(d), curRetailSum,
                   
                   price, sum,                    
                   markup ON CHANGE changeMarkup(d), markupSum,
                   numberVAT, valueVAT, VATSum,
                   retailPrice ON CHANGE changeRetailPrice(d), retailSum, NEW, DELETE GRID

    PROPERTIES DRAW d changePrice(p), recalculatePrice(p) SHOWIF allowRecalculatePrice(p)

    PROPERTIES(p) DRAW d addDetailDialogSkuStockUserRepricingDetail,
                           addDetailInputBarcodeUserRepricingDetail, deleteUserRepricingDetail

    FILTERS userRepricing(d)==p

    EVENTS
        ON OK prePost(p)

    EDIT UserRepricing OBJECT p
;

DESIGN userRepricing {
    BOX {
        size = (1024, 768);
        NEW mainTabbed {
            fill = 1;
            type = TABBED;
            NEW documentBox {
                fill = 1;
                type = CONTAINERV;
                caption = 'Переоценка';
            
                NEW header {
                    type = CONTAINERH;
        
                    NEW headerColumn1 {
                        fill = 1;
                        MOVE GROUP(documentHeader,p) {
                            columns = 1;
                            type = CONTAINERV;
                            NEW first {
                                type = CONTAINERH;
                                MOVE PROPERTY(isPosted(p));
                            }
                            NEW second { 
                                type = CONTAINERH;
                                MOVE PROPERTY(nameDepartmentStore(p));
                                MOVE PROPERTY(nameNumerator(p));
                                MOVE PROPERTY(number(p));
                                MOVE PROPERTY(series(p));
                                MOVE PROPERTY(date(p));
                                MOVE PROPERTY(time(p));
                            }    
                        }                
                        
                        MOVE GROUP(documentPrm,p) {
                            type = COLUMNS;
                            columns = 2;
                            MOVE PROPERTY(beforeDate(p));
                            MOVE PROPERTY(note(p));
                            MOVE PROPERTY(numberDisposal(p));
                            MOVE PROPERTY(nameRepricingCommittee(p));
                            MOVE PROPERTY(skipChangeLedger(p));
                        }
                    }
    
                MOVE GROUP(documentSum,p) {
                    columns = 1;
                }
            }
    
            NEW specificationBox {
                fill = 1;
                NEW details {
                    fill = 1;
                    caption = 'Спецификация';
                    NEW addContainter {
                        type = CONTAINERH;
                        MOVE PROPERTY (addDetailDialogSkuStockUserRepricingDetail(p));
                    }
                    MOVE BOX(d);
                }
            }
    
            PROPERTY(price(d)) { background = #FFFFCC; }
            PROPERTY(sum(d)) { background = #FFFFCC; }
            PROPERTY(markup(d)) { background = #FFFFCC; }
            PROPERTY(markupSum(d)) { background = #FFFFCC; }
            PROPERTY(numberVAT(d)) { background = #FFFFCC; }
            PROPERTY(valueVAT(d)) { background = #FFFFCC; }
            PROPERTY(VATSum(d)) { background = #FFFFCC; }
            PROPERTY(retailPrice(d)) { background = #FFFFCC; }
            PROPERTY(retailSum(d)) { background = #FFFFCC; }
            
            PROPERTY(diffSumUserRepricingDetail(p)) { charWidth = 13;}
            PROPERTY(diffMarkupSumUserRepricingDetail(p)) { charWidth = 13;}
            PROPERTY(diffVATSumUserRepricingDetail(p)) { charWidth = 13;}
            PROPERTY(diffRetailSumUserRepricingDetail(p)) { charWidth = 13;}
            }
        }    
        MOVE TOOLBARBOX;

        PROPERTY(formOk()) {
            caption = 'Провести';
        }
    }
}

EXTEND FORM userRepricing
    PROPERTIES(p) nameOperation
    PROPERTIES(p) DRAW d SHOWIF isOpened(d) toFillQuantityUserRepricingDetail TOOLBAR
;
DESIGN userRepricing{
    first {
        MOVE PROPERTY (nameOperation(p) ) {charWidth = 30;}
    }
}

@addEventGenerateNumberOnForm(userRepricing, p, userRepricing);

edit(UserRepricingDetail d) + {  DIALOG userRepricing OBJECTS p = userRepricing(d), d = d DOCKED; }

show 'Просмотреть'  ABSTRACT LIST  ( RepricingDetail) TOOLBAR;
show(UserRepricingDetail d)  { 
	NEWSESSION {
	    SHOW userRepricing OBJECTS p = userRepricing(d), d = d DOCKED READONLY ;
	}
}

show(UserRepricingDetail d) + {  show(d); }    
show[SkuLedger](RepricingDetail ledger) + {  show(ledger); }

//-- SKU
stock(UserRepricingDetail detail) = departmentStore(detail);

@defineDocumentSkuStockPriceListTypeSystemLedger(userRepricing, ); 

stock(UserRepricing o) = departmentStore(o);
@extendFormDocumentSkuStock(userRepricing, userRepricing, p, legalEntityStock, );

@defineDocumentBatchStockPriceListTypeSystemLedger(userRepricing, );
 
@extendFormDocumentBatchStock(userRepricing, userRepricing, p, legalEntityStock, );

shipmentDateTime(Repricing repricing) = dateTime(repricing);

@extendFormDocumentSkuStockOrderLedger(repricing, userRepricing, p, departmentStore);

@extendFormDocumentSkuStockOrderLedgerAll(userRepricing, userRepricing, p);

@extendFormDocumentBatchStockOrderLedger(userRepricing, userRepricing, p);

EXTEND FORM userRepricing

    FILTERGROUP filter
        FILTER 'С остатком ' prevCurrentBalance(ks, st) 'F10' DEFAULT
        FILTER 'В документе ' quantity(ks, p, st) 'F9'

    FILTERGROUP filterBatch
        FILTER 'С остатком ' prevCurrentBalance(b, sto) 'F8' DEFAULT
        FILTER 'В документе ' quantity(b, p, sto) 'F7'
;


isStockRepricings 'Разрешить ввод акта переоценки без склада ' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES() isStockRepricings
;

DESIGN options {     
    rPanel {
        MOVE PROPERTY(isStockRepricings());   
    }    
}

CONSTRAINT isPosted(UserRepricing i) AND NOT isStockRepricings() AND NOT  departmentStore(i) 
    MESSAGE 'Для акта переоценки должен быть задан склад'; 

// Проведение по регистру
@implementSkuLedger(repricingDetail, sku, departmentStore);
sum[InSkuLedger] (RepricingDetail ledger) += diffRetailSum(ledger); 

batch[SkuLedger](RepricingDetail ledger) += batch(ledger);

skipShowEdit = ABSTRACT BOOLEAN (Repricing);
skipShowDelete = ABSTRACT BOOLEAN (Repricing);
overShowEditDelete = ABSTRACT VALUE BOOLEAN (Repricing);

@defineOperationChangesDocument(repricing, Repricing, preventChangesDocument, createdUser);

overShowEditDelete(Repricing p) += showEditDeleteUser(p);

showEditUser (Repricing i) =  isOpened(i) AND overShowEditDelete(i)  AND NOT skipShowEdit(i); 

isUserOpened(UserRepricing p)=  isOpened[Repricing](p) AND is(p);

showDeleteUser (Repricing i) =  isUserOpened(i) AND overShowEditDelete(i) AND NOT skipShowDelete(i);

filterRepricingDateFrom 'Дата с' = DATA LOCAL NESTED DATE ();
filterDateFrom (Repricing i) = date(i) >= filterRepricingDateFrom() OR (i IS Repricing AND NOT filterRepricingDateFrom());      

filterRepricingDateTo 'Дата по' = DATA LOCAL NESTED DATE ();
filterDateTo (Repricing i) = date(i) <= filterRepricingDateTo() OR (i IS Repricing AND NOT filterRepricingDateTo());      

filterRepricingStore = DATA LOCAL NESTED Store ();
nameFilterRepricingStore 'Магазин' = name(filterRepricingStore()) CHARWIDTH 15;          
filterStore (Repricing i) = store(departmentStore(i)) == filterRepricingStore() OR (i IS Repricing AND NOT filterRepricingStore());      

filterRepricingOperation  = DATA LOCAL NESTED Operation ();
nameFilterRepricingOperation 'Операция' = name(filterRepricingOperation()) CHARWIDTH 25;          
filterOperation (Repricing p) = operation(p) == filterRepricingOperation() OR (p IS Repricing AND NOT filterRepricingOperation());   

overCopy  ABSTRACT LIST ( Repricing, UserRepricing);
overCopy  ABSTRACT LIST ( UserRepricingDetail, RepricingDetail);

copy 'Копировать'(Repricing repricing)  { 
	NEWSESSION {
	    NEW p = UserRepricing {
	        departmentStore(p) <- departmentStore(repricing);
	        currency(p) <- currency(repricing);
	        operation(p) <- operation(repricing);
	        note(p) <- note(repricing);
	        numberDisposal(p) <- numberDisposal(repricing);
	        
	        EXEC overCopy(repricing, p);
	
	        FOR repricing(RepricingDetail repricingDetail) == repricing DO {
	            NEW d=UserRepricingDetail {
	                userRepricing(d) <- p;
	                sku(d) <- sku(repricingDetail);
	                quantity(d) <- quantity(repricingDetail);                
	                
	                batch(d) <- batch(repricingDetail);
	                
	                overCopy(d, repricingDetail);
	            }
	        }
	        SHOW userRepricing OBJECTS p = p DOCKED NOCANCEL;
	    }
	}
} TOOLBAR;

backgroundDraft 'Цвет'  (Repricing r)= RGB(212,255,212) IF isDraft(r); 

printPeriod 'Акт переоценки за период' ()  { 
    IF filterRepricingDateFrom() AND filterRepricingDateTo() AND filterRepricingStore() THEN {
        PRINT repricingPeriod OBJECTS df= filterRepricingDateFrom(),  dt= filterRepricingDateTo(), st = filterRepricingStore();
        NEWSESSION NESTED (filterRepricingDateFrom,filterRepricingDateTo, filterRepricingStore){
            printedAct(UserRepricing r) <- TRUE WHERE isPosted(r) AND NOT printedAct(r) AND date(r) >= filterRepricingDateFrom() AND date(r) <= filterRepricingDateTo() AND store(departmentStore(r)) == filterRepricingStore();
            APPLY NESTED (filterRepricingDateFrom,filterRepricingDateTo, filterRepricingStore); 
        }      
    } ELSE {
        MESSAGE 'Не заданы параметры фильтра';
    }
  
} IMAGE 'print.png' IN print;

printPeriodAuto 'Акт переоценки (авто) за период' ()  { 
    IF filterRepricingDateFrom() AND filterRepricingDateTo() AND filterRepricingStore() THEN {
        PRINT repricingPeriod OBJECTS df= filterRepricingDateFrom(),  dt= filterRepricingDateTo(), st = filterRepricingStore() NOPREVIEW ;
        NEWSESSION NESTED (filterRepricingDateFrom,filterRepricingDateTo, filterRepricingStore){
            printedAct(UserRepricing r) <- TRUE WHERE isPosted(r) AND NOT printedAct(r) AND date(r) >= filterRepricingDateFrom() AND date(r) <= filterRepricingDateTo() AND store(departmentStore(r)) == filterRepricingStore();
            APPLY NESTED (filterRepricingDateFrom,filterRepricingDateTo, filterRepricingStore); 
        }      
    } ELSE {
        MESSAGE 'Не заданы параметры фильтра';
    }
  
} IMAGE 'print.png' IN print;

FORM repricings 'Акты переоценки' 
    PROPERTIES() filterRepricingDateFrom, filterRepricingDateTo, nameFilterRepricingStore, nameFilterRepricingOperation

    OBJECTS p = Repricing LAST
    PROPERTIES (p) READONLYIF isReadonly() isClosed
    PROPERTIES (p) READONLYIF isReadonly() BACKGROUND backgroundDraft(p) isPosted, number, series, date, time
    PROPERTIES (p) READONLYIF isReadonly() beforeDate, nameDepartmentStore
    PROPERTIES (p) READONLY countRepricingDetail, diffSumRepricingDetail,
                   diffMarkupSumRepricingDetail, diffVATSumRepricingDetail,
                   diffRetailSumRepricingDetail
    PROPERTIES (p) READONLYIF isReadonly() numberDisposal, skipChangeLedger,
                   note

    PROPERTIES (p) READONLY PANEL createdNameUser, createdTime, createdHostnameComputer, 
                                        postedNameUser, postedTime, postedHostnameComputer

    PROPERTIES (p) NEWSESSION NEW[UserRepricing], editP = EDIT SHOWIF showEditUser(p), deletep = DELETE SHOWIF showDeleteUser(p) 
    PROPERTIES(p)  close[UserRepricing] SHOWIF isOpened[UserRepricing](p), open SHOWIF isClosed[UserRepricing](p)     
    PROPERTIES copy(p)
    PROPERTIES (p)  print, printXls 
    PROPERTIES () SHOWIF showIfToFillQuantityUserRepricingDetailAllUserRepricings() toFillQuantityUserRepricingDetailAllUserRepricings DRAW p
    OBJECTS d = RepricingDetail
    PROPERTIES (d) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku,
               nameBatch, quantity,

               curPrice, curSum,
               curMarkup, curMarkupSum,
               numberCurVAT, valueCurVAT, curVATSum,
               curRetailPrice, curRetailSum,

               price, sum,
               markup, markupSum,
               numberVAT, valueVAT, VATSum,
               retailPrice, retailSum

    FILTERS repricing(d) == p
    FILTERS filterDateFrom(p), 
            filterDateTo(p),
            filterStore(p),
            filterOperation(p),
            accessCompany(currentUser(), legalEntity(departmentStore(p))) OR NOT countAccessCompany(currentUser())

    LIST Repricing OBJECT p
;
@extendFormFilterAccessStock(Repricing, p, repricings, departmentStore, company);
@extendFormFilterRoleAccess(repricing, p, repricings);
DESIGN repricings {
    NEW pane {
        fill = 1;
        type = SPLITV;
        NEW filtersBox {                       
            fill = 2;
            NEW topFilters {
                caption = 'Фильтры';
                type = CONTAINERH;          
                MOVE PROPERTY(filterRepricingDateFrom());
                MOVE PROPERTY(filterRepricingDateTo());
                MOVE PROPERTY(nameFilterRepricingStore());
                MOVE PROPERTY(nameFilterRepricingOperation());
            }
            MOVE BOX(p) {
                fill = 1;
            }
        } 

        NEW documentDetail {
            fill = 1;
            type = TABBED;

            MOVE BOX(d) {
                caption = 'Спецификация';
            }
            NEW documentHistory {
                caption = 'История';

                MOVE GROUP(created,p);
                MOVE GROUP(posted,p);
            }
            NEW printTab {
                caption = 'Печатные формы';
                MOVE GROUP(print,p);
            }
            NEW actionContainer {
                caption = 'Действия';
                type = CONTAINERH;
                NEW createdContainer {
                    caption = 'Создание на основе';
                    MOVE PROPERTY (copy(p)) {caption = 'Акт переоценки'; alignment = STRETCH; }
                }
                NEW machineryContainer {
                    caption = 'Загрузка';
                }
                NEW fill {
                    caption = 'Обновление';
                    MOVE PROPERTY(toFillQuantityUserRepricingDetailAllUserRepricings()); 
                }
            }
        }
    }
    MOVE TOOLBARBOX;
}
@extendFormEditable(repricings);
@defineFilterIsOpened (repricing, repricings, p);

EXTEND FORM repricings
    PROPERTIES(p) READONLYIF isReadonly() nameOperation BEFORE countRepricingDetail(p)
;

NAVIGATOR {
    pricingNavigator {
        NEW repricings;
        NEW operations;
    }
}

// ---------------------------- Создание PriceList ----------------------------------- //

changeSupplierPrice 'Проводить по регистру изменение цены поставщика' = DATA BOOLEAN (Operation);
EXTEND FORM operation
    PROPERTIES(o) changeSupplierPrice
;
DESIGN operation {
    paramsContainer {
        MOVE PROPERTY(changeSupplierPrice(o));
    }
} 

changeSupplierPrice 'Проводить по регистру изменение цены поставщика' = ABSTRACT BOOLEAN (Repricing) MATERIALIZED;
changeSupplierPrice 'Проводить по регистру изменение цены поставщика' = DATA BOOLEAN (UserRepricing) IN documentPrm;
changeSupplierPrice(UserRepricing r) += changeSupplierPrice(r);

changeSupplierPrice 'Проводить по регистру изменение цены поставщика' = changeSupplierPrice(repricing(RepricingDetail d)) MATERIALIZED;
changeSupplierPrice 'Проводить по регистру изменение цены поставщика' = changeSupplierPrice(userRepricing(UserRepricingDetail d)) MATERIALIZED;

@deriveDocumentOperationProperty(UserRepricing, changeSupplierPrice);

showChangeSupplierPrice (UserRepricing r) = r IS UserRepricing AND NOT skipChangeLedger(r);
EXTEND FORM userRepricing
    PROPERTIES (p) changeSupplierPrice SHOWIF showChangeSupplierPrice(p) AFTER skipChangeLedger(p)
; 

@deriveDocumentOperationProperty(UserRepricing, negativeMarkupOnAccount90);

@deriveDocumentOperationProperty(UserRepricing, skipChangeLedger);

EXTEND FORM userRepricing
    PROPERTIES (p) negativeMarkupOnAccount90 AFTER skipChangeLedger(p)
; 


EXTEND CLASS RepricingDetail : PriceListLedger;

fromDateTime (RepricingDetail ledger) += dateTime(ledger);

isPosted[PriceListLedger](RepricingDetail ledger) += isPosted(ledger);
skip[PriceListLedger](RepricingDetail ledger) += skipChangeLedger(ledger);

sku[PriceListLedger] (RepricingDetail ledger) += sku(ledger);
in (RepricingDetail ledger, Batch batch) += batch(ledger) == batch; 

operation (RepricingDetail ledger) += operation(ledger);

description[PriceListLedger] (RepricingDetail ledger) += description(ledger);

in (RepricingDetail ledger, SystemLedgerPriceListType type) += WHEN price(ledger) AND type == SystemLedgerPriceListType.supplierPricingPriceListType THEN changeSupplierPrice(ledger);
price (RepricingDetail ledger, SystemLedgerPriceListType type) += WHEN price(ledger) AND type == SystemLedgerPriceListType.supplierPricingPriceListType AND changeSupplierPrice(ledger) THEN price(ledger);

in (RepricingDetail ledger, SystemLedgerPriceListType type) += WHEN retailPrice(ledger) AND type == SystemLedgerPriceListType.retailPricingPriceListType THEN TRUE;
price (RepricingDetail ledger, SystemLedgerPriceListType type) += WHEN retailPrice(ledger) AND type == SystemLedgerPriceListType.retailPricingPriceListType THEN retailPrice(ledger);

in (RepricingDetail ledger, SystemLedgerPriceListType type) += WHEN retailPrice(ledger) AND type == SystemLedgerPriceListType.accountPriceListType THEN TRUE;
price (RepricingDetail ledger, SystemLedgerPriceListType type) += WHEN retailPrice(ledger) AND type == SystemLedgerPriceListType.accountPriceListType THEN retailPrice(ledger);

in (RepricingDetail ledger, DepartmentStore stock) += departmentStore(ledger) == stock;
show[PriceListLedger] (RepricingDetail ledger) + { show(ledger);};

@defineDocumentLogForm(repricings, p);

CONSTRAINT  (SET (isPosted(RepricingDetail d)) OR CHANGED (curRetailPrice(d))) AND isPosted(d) AND isCurRetailPrice(operation(d)) AND NOT curRetailPrice(d)
    MESSAGE 'Для строки акта переоценки должна быть задана розничная цена до'; 

CONSTRAINT  (SET (isPosted(RepricingDetail d)) OR CHANGED (retailPrice(d))) AND isPosted(d) AND isRetailPrice(operation(d)) AND NOT retailPrice(d)
    MESSAGE 'Для строки акта переоценки должна быть задана розничная цена'; 

CONSTRAINT SET(quantity(RepricingDetail d) < 0) AND denyRepricingNegativeBalance(operation(d))
           CHECKED BY quantity[RepricingDetail]
           MESSAGE 'Для строки акта переоценки количество не должно быть отрицательным';
           
show 'Просмотреть' (UserRepricing r)  { 
	NEWSESSION {
	    SHOW userRepricing OBJECTS p = r DOCKED READONLY;
	}
}TOOLBAR;

showToShow (UserRepricing w) = is(w) AND NOT showEditUser(w);
EXTEND FORM repricings
    PROPERTIES show(p) SHOWIF showToShow(p) BEFORE editP
;

@defineAddSkuLists(userRepricing, userRepricing, p);
@defineNewSkuList(repricing, userRepricing, repricings, p);
DESIGN userRepricing {
    addContainter {
        MOVE PROPERTY (addSkuLists(p));
        MOVE PROPERTY (newSkuList(p));
    }
}

DESIGN repricings {
    actionContainer {
        NEW listSku {
            caption = 'Списки SKU';
            MOVE PROPERTY (newSkuList(p));
        }
    }
}

replaceBefore(Sku i, Sku item) + { 
    curRetailPrice(UserRepricingDetail pd) <- curRetailPrice(pd) WHERE sku(pd) = i;
    curPrice(UserRepricingDetail pd) <- curPrice(pd) WHERE sku(pd) = i;
}  
