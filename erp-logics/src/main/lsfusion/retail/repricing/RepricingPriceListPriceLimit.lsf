MODULE RepricingPriceListPriceLimit;

REQUIRE RepricingPriceList, PriceLimit; 

NAMESPACE Repricing;

skipRepricingPriceLimit = ABSTRACT BOOLEAN (Sku);
skipRepricingPriceMarkupLimit = ABSTRACT BOOLEAN (Sku);
useCustomCalcLimitPrice = DATA BOOLEAN ();
overLimitBasePrice = ABSTRACT VALUE NUMERIC[16,4] (Sku, DepartmentStore, DATETIME);
limitBasePrice(Sku s, DepartmentStore d, DATETIME  dt) = OVERRIDE overLimitBasePrice(s,d,dt), 
                                                                         prevPriceA(basePriceLimitPriceListType(d), s, d, dt);

calculateLimitBasePrice ABSTRACT (DepartmentStore, DATETIME);

useLimitMarkupValue = ABSTRACT VALUE BOOLEAN (Sku, DepartmentStore);

extraRetailPrice 'Цена посуды' = ABSTRACT NUMERIC[16,4] (Sku, DATE );

//skipSetManagementRetailPrice = ABSTRACT BOOLEAN ();

limitPackagePrice = ABSTRACT NUMERIC[16,4](Sku, DepartmentStore, DATETIME);

overSetManagementRetailPriceCalc ABSTRACT (CalcPriceListType, DepartmentStore, DATETIME);

markupCorrect = DATA LOCAL NUMERIC[8,3](Sku);

overSetManagementRetailPrice(DepartmentStore d, DATETIME dt) + {
    LOCAL limitPrice = NUMERIC[16,4] (Sku);        

    FOR CalcPriceListType ct = priceLimitPriceListType(d) AND NOT useCustomCalcLimitPrice() NOINLINE DO {
        calculateLimitBasePrice(d, dt);

        LOCAL lpPrice = NUMERIC[16,5](Sku);
        markupCorrect(Sku sku) <- NULL;
        markupCorrect(Sku sku) <- markup(ct, sku) WHERE managementRetailPrice(sku);
        IF limitMarkupValue() THEN {
            markupCorrect(Sku sku) <- limitMarkupValue() WHERE  useLimitMarkupValue(sku, d) AND NOT markupCorrect(sku) AND managementRetailPrice(sku);
        }
        lpPrice (Sku sku) <- limitPackagePrice(sku, d, dt) WHERE managementRetailPrice(sku);            
        overSetManagementRetailPriceCalc(ct,d,dt);
        
        limitPrice(Sku sku) <- round([ ((X * (Y + 100.0)/100.0)(+) W) * (Z + 100.0) / 100.0](
                limitBasePrice(sku, d, dt),
                markupCorrect(sku),
                lpPrice(sku),
                valueVAT(sku, d)), roundCondition(ct, sku)) WHERE managementRetailPrice(sku);

        limitPrice(Sku sku) <- limitPrice(sku) (+) extraRetailPrice(sku, DATE(dt)) WHERE limitPrice(sku);

        managementRetailPrice (Sku sku) <- limitPrice(sku) WHERE limitPrice(sku) < managementRetailPrice (sku) AND NOT skipRepricingPriceLimit(sku) AND NOT skipRepricingPriceMarkupLimit(sku);
    }
}

calculateDescriptionPricingExtra ABSTRACT  (CalcPriceListType, Sku, DepartmentStore, DATETIME);
markupCorrect = DATA LOCAL NUMERIC[8,3]();
calculateDescriptionPricing (Sku sku, DepartmentStore d, DATETIME dt) + {
    FOR CalcPriceListType ct = priceLimitPriceListType(d) NOINLINE DO {

        markupCorrect() <- markup(ct, sku);
        calculateDescriptionPricingExtra(ct,sku,d,dt);

        descriptionPricing (sku, 'Предельные надбавки') <- STRING(
            round([ ((X * (Y + 100.0)/100.0)(+) W) * (Z + 100.0) / 100.0](
                    limitBasePrice(sku, d, dt),
                    markupCorrect(),
                    limitPackagePrice(sku, d, dt),
                    valueVAT(sku, d)), roundCondition(ct, sku)));
        descriptionPricing (sku, 'Цена посуды') <- STRING(extraRetailPrice(sku, DATE(dt)));
    }
}