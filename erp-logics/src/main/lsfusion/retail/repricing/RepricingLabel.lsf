MODULE RepricingLabel;

REQUIRE Repricing, Label;

NAMESPACE Repricing;

// ------------------------------------- Печать ценников ------------------------------ //

@Label.implementPriceTransactionDocument(Repricing);
skip[PriceTransactionDocument](Repricing document) += skipChangeLedger(document);

@defineDocumentLabelTransaction(repricing, Repricing, sku, batch, departmentStore);
@extendFormDocumentLabelTransaction(repricings, p, repricing, skipChangeLedger, machineryContainer);

@defineOption(printCurRetailPrice, 'Печать цены до на ценниках из акта переоценки', rPanel);
createAttribute (RepricingDetail r, LabelTransactionDetail t) + { 
    retailPrice(t) <- curRetailPrice(r) WHERE curRetailPrice(r) > retailPrice(r) AND NOT overRetailPrice(t) AND printCurRetailPrice();
}
EXTEND FORM repricings
    PROPERTIES(p) createLabelTransactionChoice SHOWIF showPrintLabelTransaction(p) 
                       
;
DESIGN repricings {
    label {
        caption = 'Ценники' ;
        NEW labelFirst {
            MOVE PROPERTY (createLabelTransaction(p));
            MOVE PROPERTY (createSnapshotLabelTransaction(p));                
        }
        NEW labelSecond {
            caption = 'Выбор позиций';
            MOVE PROPERTY (createLabelTransactionChoice(p));
        } 
    }
    
}

printExistingPrice (LabelTransaction t) += printExistingPrice() AND priceTransactionDocument(t) IS Repricing;

createLabelTransaction 'Сформировать ценники' (DATE date)  { 
    NEWEXECUTOR 
        FOR NOT labelTransaction(Repricing repricing) AND date(repricing) == date DO NEWTHREAD NEWSESSION NEWSQL {  
            inLabel(Sku sku) <- TRUE IF countRepricingDetail(sku, repricing);
            notPrint() <- TRUE;
            createLabelTransactionParam(repricing);
            APPLY;
        }
    THREADS 4;
}