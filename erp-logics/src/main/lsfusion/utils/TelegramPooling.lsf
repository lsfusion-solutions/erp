MODULE TelegramPooling;

REQUIRE Telegram;

NAMESPACE Telegram;

GROUP result;
GROUP my_chat_member;
GROUP chat : my_chat_member;

GROUP old_chat_member : my_chat_member;
GROUP user : old_chat_member;
GROUP from0 EXTID 'from': my_chat_member;
GROUP new_chat_member : my_chat_member;
GROUP user1 EXTID 'user' : new_chat_member;
GROUP message;
GROUP sender_chat : message;
GROUP left_chat_participant : message;
GROUP left_chat_member : message;
GROUP new_chat_participant : message;
GROUP new_chat_member1 EXTID 'new_chat_member' : message;
GROUP chat1 EXTID 'chat' : message;
GROUP from1 EXTID 'from' : message;
GROUP channel_post;
GROUP chat2 EXTID 'chat' : channel_post;
GROUP sender_chat1 EXTID 'sender_chat' : channel_post;

date = DATA LOCAL NUMERIC(INTEGER);
username = DATA LOCAL STRING(INTEGER);
all_members_are_administrators = DATA LOCAL STRING(INTEGER);
id = DATA LOCAL NUMERIC(INTEGER);
title = DATA LOCAL STRING(INTEGER);
type = DATA LOCAL STRING(INTEGER);
can_delete_messages = DATA LOCAL STRING(INTEGER);
can_edit_messages = DATA LOCAL STRING(INTEGER);
can_promote_members = DATA LOCAL STRING(INTEGER);
can_invite_users = DATA LOCAL STRING(INTEGER);
can_manage_chat = DATA LOCAL STRING(INTEGER);
can_be_edited = DATA LOCAL STRING(INTEGER);
can_manage_voice_chats = DATA LOCAL STRING(INTEGER);
can_restrict_members = DATA LOCAL STRING(INTEGER);
can_change_info = DATA LOCAL STRING(INTEGER);
is_anonymous = DATA LOCAL STRING(INTEGER);
can_post_messages = DATA LOCAL STRING(INTEGER);
id1 = DATA LOCAL NUMERIC(INTEGER);
is_bot = DATA LOCAL STRING(INTEGER);
first_name = DATA LOCAL STRING(INTEGER);
username1 = DATA LOCAL STRING(INTEGER);
status = DATA LOCAL STRING(INTEGER);
language_code = DATA LOCAL STRING(INTEGER);
last_name = DATA LOCAL STRING(INTEGER);
id2 = DATA LOCAL NUMERIC(INTEGER);
is_bot1 = DATA LOCAL STRING(INTEGER);
first_name1 = DATA LOCAL STRING(INTEGER);
username2 = DATA LOCAL STRING(INTEGER);
can_delete_messages1 = DATA LOCAL STRING(INTEGER);
can_edit_messages1 = DATA LOCAL STRING(INTEGER);
can_promote_members1 = DATA LOCAL STRING(INTEGER);
can_invite_users1 = DATA LOCAL STRING(INTEGER);
can_manage_chat1 = DATA LOCAL STRING(INTEGER);
can_be_edited1 = DATA LOCAL STRING(INTEGER);
can_manage_voice_chats1 = DATA LOCAL STRING(INTEGER);
can_restrict_members1 = DATA LOCAL STRING(INTEGER);
can_change_info1 = DATA LOCAL STRING(INTEGER);
is_anonymous1 = DATA LOCAL STRING(INTEGER);
can_post_messages1 = DATA LOCAL STRING(INTEGER);
id3 = DATA LOCAL NUMERIC(INTEGER);
is_bot2 = DATA LOCAL STRING(INTEGER);
first_name2 = DATA LOCAL STRING(INTEGER);
username3 = DATA LOCAL STRING(INTEGER);
status1 = DATA LOCAL STRING(INTEGER);
group_chat_created = DATA LOCAL STRING(INTEGER);
resultEntities = DATA LOCAL INTEGER(INTEGER);
offset = DATA LOCAL NUMERIC(INTEGER);
length = DATA LOCAL NUMERIC(INTEGER);
type1 = DATA LOCAL STRING(INTEGER);
text = DATA LOCAL STRING(INTEGER);
migrate_to_chat_id = DATA LOCAL NUMERIC(INTEGER);
id4 = DATA LOCAL NUMERIC(INTEGER);
title1 = DATA LOCAL STRING(INTEGER);
type2 = DATA LOCAL STRING(INTEGER);
migrate_from_chat_id = DATA LOCAL NUMERIC(INTEGER);
language_code1 = DATA LOCAL STRING(INTEGER);
last_name1 = DATA LOCAL STRING(INTEGER);
id5 = DATA LOCAL NUMERIC(INTEGER);
is_bot3 = DATA LOCAL STRING(INTEGER);
first_name3 = DATA LOCAL STRING(INTEGER);
username4 = DATA LOCAL STRING(INTEGER);
language_code2 = DATA LOCAL STRING(INTEGER);
last_name2 = DATA LOCAL STRING(INTEGER);
id6 = DATA LOCAL NUMERIC(INTEGER);
is_bot4 = DATA LOCAL STRING(INTEGER);
first_name4 = DATA LOCAL STRING(INTEGER);
username5 = DATA LOCAL STRING(INTEGER);
id7 = DATA LOCAL NUMERIC(INTEGER);
is_bot5 = DATA LOCAL STRING(INTEGER);
first_name5 = DATA LOCAL STRING(INTEGER);
username6 = DATA LOCAL STRING(INTEGER);
resultNew_chat_members = DATA LOCAL INTEGER(INTEGER);
id8 = DATA LOCAL NUMERIC(INTEGER);
is_bot6 = DATA LOCAL STRING(INTEGER);
first_name6 = DATA LOCAL STRING(INTEGER);
username7 = DATA LOCAL STRING(INTEGER);
id9 = DATA LOCAL NUMERIC(INTEGER);
is_bot7 = DATA LOCAL STRING(INTEGER);
first_name7 = DATA LOCAL STRING(INTEGER);
username8 = DATA LOCAL STRING(INTEGER);
date1 = DATA LOCAL NUMERIC(INTEGER);
last_name3 = DATA LOCAL STRING(INTEGER);
first_name8 = DATA LOCAL STRING(INTEGER);
all_members_are_administrators1 = DATA LOCAL STRING(INTEGER);
id10 = DATA LOCAL NUMERIC(INTEGER);
title2 = DATA LOCAL STRING(INTEGER);
type3 = DATA LOCAL STRING(INTEGER);
username9 = DATA LOCAL STRING(INTEGER);
new_chat_title = DATA LOCAL STRING(INTEGER);
message_id = DATA LOCAL NUMERIC(INTEGER);
language_code3 = DATA LOCAL STRING(INTEGER);
last_name4 = DATA LOCAL STRING(INTEGER);
id11 = DATA LOCAL NUMERIC(INTEGER);
is_bot8 = DATA LOCAL STRING(INTEGER);
first_name9 = DATA LOCAL STRING(INTEGER);
username10 = DATA LOCAL STRING(INTEGER);
update_id = DATA LOCAL NUMERIC(INTEGER);
text1 = DATA LOCAL STRING(INTEGER);
date2 = DATA LOCAL NUMERIC(INTEGER);
id12 = DATA LOCAL NUMERIC(INTEGER);
title3 = DATA LOCAL STRING(INTEGER);
type4 = DATA LOCAL STRING(INTEGER);
username11 = DATA LOCAL STRING(INTEGER);
id13 = DATA LOCAL NUMERIC(INTEGER);
title4 = DATA LOCAL STRING(INTEGER);
type5 = DATA LOCAL STRING(INTEGER);
username12 = DATA LOCAL STRING(INTEGER);
new_chat_title1 = DATA LOCAL STRING(INTEGER);
message_id1 = DATA LOCAL NUMERIC(INTEGER);
ok = DATA LOCAL STRING();
error = DATA LOCAL STRING();

FORM telegramGetUpdates
    PROPERTIES() ok

    OBJECTS result = INTEGER

    PROPERTIES(result) update_id

    OBJECTS my_chat_member = INTEGER
    PROPERTIES(result) IN my_chat_member date
    PROPERTIES(result) IN chat username, all_members_are_administrators, id, title, type

    OBJECTS old_chat_member = INTEGER IN my_chat_member
    PROPERTIES(result) IN old_chat_member can_delete_messages, can_edit_messages, can_promote_members, can_invite_users, can_manage_chat, can_be_edited, can_manage_voice_chats, can_restrict_members, can_change_info, is_anonymous, can_post_messages, status
    PROPERTIES(result) IN user id1 EXTID 'id', is_bot, first_name, username1 EXTID 'username'
    PROPERTIES(result) IN from0 language_code, last_name, id2 EXTID 'id', is_bot1 EXTID 'is_bot', first_name1 EXTID 'first_name', username2 EXTID 'username'

    OBJECTS new_chat_member = INTEGER IN my_chat_member
    PROPERTIES(result) IN new_chat_member can_delete_messages1 EXTID 'can_delete_messages', can_edit_messages1 EXTID 'can_edit_messages', can_promote_members1 EXTID 'can_promote_members', can_invite_users1 EXTID 'can_invite_users', can_manage_chat1 EXTID 'can_manage_chat', can_be_edited1 EXTID 'can_be_edited', can_manage_voice_chats1 EXTID 'can_manage_voice_chats', can_restrict_members1 EXTID 'can_restrict_members', can_change_info1 EXTID 'can_change_info', is_anonymous1 EXTID 'is_anonymous', can_post_messages1 EXTID 'can_post_messages', status1 EXTID 'status'
    PROPERTIES(result) IN user1 id3 EXTID 'id', is_bot2 EXTID 'is_bot', first_name2 EXTID 'first_name', username3 EXTID 'username'

    OBJECTS message = INTEGER
    PROPERTIES(result) IN message group_chat_created, text, migrate_to_chat_id, migrate_from_chat_id, date1 EXTID 'date', new_chat_title, message_id

    OBJECTS entities = INTEGER IN message
    FILTERS resultEntities(entities) == result
    PROPERTIES(entities) offset, length, type1 EXTID 'type'
    PROPERTIES(result) IN sender_chat id4 EXTID 'id', title1 EXTID 'title', type2 EXTID 'type'
    PROPERTIES(result) IN left_chat_participant language_code1 EXTID 'language_code', last_name1 EXTID 'last_name', id5 EXTID 'id', is_bot3 EXTID 'is_bot', first_name3 EXTID 'first_name', username4 EXTID 'username'
    PROPERTIES(result) IN left_chat_member language_code2 EXTID 'language_code', last_name2 EXTID 'last_name', id6 EXTID 'id', is_bot4 EXTID 'is_bot', first_name4 EXTID 'first_name', username5 EXTID 'username'
    PROPERTIES(result) IN new_chat_participant id7 EXTID 'id', is_bot5 EXTID 'is_bot', first_name5 EXTID 'first_name', username6 EXTID 'username'

    OBJECTS new_chat_members = INTEGER IN message
    FILTERS resultNew_chat_members(new_chat_members) == result
    PROPERTIES(new_chat_members) id8 EXTID 'id', is_bot6 EXTID 'is_bot', first_name6 EXTID 'first_name', username7 EXTID 'username'
    PROPERTIES(result) IN new_chat_member1 id9 EXTID 'id', is_bot7 EXTID 'is_bot', first_name7 EXTID 'first_name', username8 EXTID 'username'
    PROPERTIES(result) IN chat1 last_name3 EXTID 'last_name', first_name8 EXTID 'first_name', all_members_are_administrators1 EXTID 'all_members_are_administrators', id10 EXTID 'id', title2 EXTID 'title', type3 EXTID 'type', username9 EXTID 'username'
    PROPERTIES(result) IN from1 language_code3 EXTID 'language_code', last_name4 EXTID 'last_name', id11 EXTID 'id', is_bot8 EXTID 'is_bot', first_name9 EXTID 'first_name', username10 EXTID 'username'

    OBJECTS channel_post = INTEGER
    PROPERTIES(result) IN channel_post text1 EXTID 'text', date2 EXTID 'date', new_chat_title1 EXTID 'new_chat_title', message_id1 EXTID 'message_id'
    PROPERTIES(result) IN chat2 id12 EXTID 'id', title3 EXTID 'title', type4 EXTID 'type', username11 EXTID 'username'
    PROPERTIES(result) IN sender_chat1 id13 EXTID 'id', title4 EXTID 'title', type5 EXTID 'type', username12 EXTID 'username'
;

EXTEND CLASS ChatType{
    supergroup 'Supergroup'
}
fillNewAccountChats 'Обновить чаты' (Account a) {
    LOCAL result = JSONFILE();

    EXTERNAL HTTP POST 'https://api.telegram.org/bot' + token(a) + '/getUpdates' TO result;
    IMPORT telegramGetUpdates FROM result();

    IF ok() THEN {
        FOR INTEGER i1 = [GROUP MAX INTEGER i BY STRING(id10(i)), first_name8(i), type3(i)](STRING id, STRING firstName, STRING type) AND NOT [GROUP SUM 1 BY id(Chat c) IF account(c) = a](id)  NEW newChat = Chat DO {
            account(newChat) <- a;
            id(newChat) <- id;
            chatType(newChat) <- (GROUP MAX ChatType ct IF upper(staticCaption(ct)) = upper(type)) WHERE (GROUP MAX ChatType ct IF upper(staticCaption(ct)) = upper(type));
            name(newChat) <- CONCAT ' ', firstName, last_name3(i1);
            title(newChat) <- CONCAT ' ', firstName, last_name3(i1);
        }

        FOR INTEGER i1 = [GROUP MAX INTEGER i BY STRING(id10(i)), STRING(migrate_to_chat_id(i))](STRING oldid, STRING newid)
            AND INTEGER i2 = [GROUP MAX INTEGER i BY STRING(id10(i)), STRING(migrate_from_chat_id(i))](newid, oldid)
            AND Chat c1 = [GROUP MAX Chat c BY id(c) IF account(c) = a](oldid)  DO {
            id(c1) <- newid;
            chatType(c1) <- (GROUP MAX ChatType ct IF upper(staticCaption(ct)) = upper(type3(i2))) WHERE (GROUP MAX ChatType ct IF upper(staticCaption(ct)) = upper(type3(i2)));
        }

        FOR INTEGER i1 = [GROUP MAX INTEGER i BY STRING(id(i)), title(i), type(i)](STRING id, STRING name, STRING type) AND status1(i1) != 'left'
            AND (NOT GROUP MAX STRING(migrate_from_chat_id(INTEGER i)) = id IF i > i1)
            AND (NOT [GROUP SUM 1 BY id(Chat c) IF account(c) = a](id))  NEW newChat = Chat DO {
            account(newChat) <- a;
            id(newChat) <- id;
            chatType(newChat) <- (GROUP MAX ChatType ct IF upper(staticCaption(ct)) = upper(type)) WHERE (GROUP MAX ChatType ct IF upper(staticCaption(ct)) = upper(type));
            name(newChat) <- name;
            title(newChat) <- name;
        }

        FOR INTEGER i1 = [GROUP MAX INTEGER i BY STRING(id(i)), title(i), type(i)](STRING id, STRING name, STRING type) AND status1(i1) = 'left' AND [GROUP SUM 1 BY id(Chat c) IF account(c) = a](id)  DO {
            DELETE Chat c WHERE id(c) = id AND account(c) = a;
        }

    } ELSE {
        MESSAGE 'Synchronization failed (conversations.list): ' + error() NOWAIT;
    }
} TOOLBAR;

sendMessageTelegram(Account a, STRING message) {
    FOR Chat c IS Chat AND account(c) = a DO {
        TRY {
            sendMessage(c, message);
        } CATCH {
            logToFile('MessageTelegram', CONCAT '\n', (CONCAT ' : ', 'ID_CHAT', id(c)), ' ERROR:', messageCaughtException());
        }
    }
}

sendMessageTelegram(STRING name, STRING message) {
    FOR name(Account a) = name AND messenger(a) = Messenger.telegram DO {
        timeoutHttp() <- 30000;
        sendMessageTelegram(a, message);
    }
}