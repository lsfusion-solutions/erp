MODULE DisparityLotSecond;

REQUIRE DisparityLot, DisparityTerminal, LotSecondExtra, SkuLedgerLot;

NAMESPACE Disparity;

@defineOperationProperty(lotSecond, 'Оценённые товары', showContainer);

lotSecond (Disparity i) = lotSecond(operation(i));
lotSecond (DisparityDetail d) = lotSecond(operation(d));

@defineConstraintLotDetail(disparity, 'изменения сортности');

numberDetail 'Номер строки спецификации' = GROUP MAX index(UserDisparityDetail d) IF quantity(d, Lot l) BY disparity(d), l;

EXTEND FORM disparity
    OBJECTS l = Lot
    PROPERTIES(l) READONLY id, nameSku, fullDescriptionCycle, captionMix, weight, price, costForeign
    PROPERTIES(dis, l) READONLY numberDetail
    FILTERS quantity(dis, l), isSecond(l)
;

DESIGN disparity {
    specificationBox {
        MOVE BOX(l) {
            showIf = lotSecond(dis);
            caption = 'Оценённые товары';
        }
    }
    PROPERTY (quantityLot(d)) { caption = 'Кол-во ОТ / марок'; }
}

EXTEND FORM disparity
    PROPERTIES READONLY 'Текущий остаток' = prevCurrentBalance(l, stock(dis)) BACKGROUND (IF NOT prevCurrentBalance(l, stock(dis)) == 1 AND isDraft(dis) THEN RGB(255,150,50))
;

WHEN LOCAL FORMS disparity SETCHANGED(dataIndex(UserDisparityDetail d)) AND index(d) > 1000000 DO {
    MESSAGE 'ОШИБКА! Сканирование произведено в номер строки.\nПовторите сканирование этого товара!';
    dataIndex(d) <- PREV(dataIndex(d));
}

WHEN LOCAL FORMS disparity SETCHANGED(inputSku(UserDisparityDetail d)) AND inputSku(d) == sku(d) DO {
    MESSAGE 'Товар (приход) должен отличаться от товара (расход)!';
    inputSku(d) <- PREV(inputSku(d));
}

WHEN LOCAL FORMS disparity SETCHANGED(sku(UserDisparityDetail d)) AND inputSku(d) == sku(d) DO {
    MESSAGE 'Товар (расход) должен отличаться от товара (приход)!';
    sku(d) <- PREV(sku(d));
}

sumLotWeightDisparityDetail 'Вес оценённых товаров, кг' (Disparity i)= GROUP SUM weight(Lot l) IF quantity(i, l) IN documentSum MATERIALIZED;

EXTEND FORM disparity
    PROPERTIES (dis) READONLY sumLotWeightDisparityDetail
;

EXTEND FORM disparities
    PROPERTIES (dis) READONLY sumLotWeightDisparityDetail, statusLot
;

importLotXLSX 'Импорт из xlsx' (UserDisparity s) {
    LOCAL barcode = STRING (INTEGER);
    LOCAL count = INTEGER();
    INPUT f = EXCELFILE DO {
        IMPORT XLS NOHEADER FROM f TO barcode = B;

        FOR barcode(INTEGER i) DO {
            IF lot(barcode(i)) THEN
                processInputBarcodeUserDisparityDetail(s, barcode(i));
            ELSE
                count() <- count() (+) 1;
        }
        IF count() > 0 THEN
            MESSAGE CONCAT ' ', 'Не найдено кодов:', count();
    }
}

EXTEND FORM disparity
    PROPERTIES (dis) importLotXLSX
;

DESIGN disparity {
    headerTabbedPane {
        NEW import {
            caption = 'Импорт';
            fill = 1;
            horizontal = TRUE;
            MOVE PROPERTY(addDetailDialogTerminalUserDisparityDetail(dis));
            MOVE PROPERTY(importLotXLSX(dis));
        }
    }
}

@defineOption(skipAdditionalCheckDisparity, 'Отключить дополнительные проверки в Изменениях сортности', disparity);

lastLotSecondDisparity = GROUP LAST Disparity d IF lotSecond(operation(d)) ORDER dateTime(d), d BY stock(d) ;
prevLastLotSecondDisparity = GROUP LAST Disparity d IF lotSecond(operation(d)) ORDER PREV(dateTime(d)), d BY stock(d) ;

returnConditionChangeSkuLot(UserDisparity d) += lotSecond(d) AND d != lastLotSecondDisparity(stock(d)) AND NOT skipAdditionalCheckDisparity();
returnMessageChangeSkuLot() += 'Запрещён перенос марок в непоследнем Изменении сортности по месту хранения';

changeSkuLotBack 'Перенести марки (назад)' (UserDisparity d) {
    IF lotSecond(d) AND d != lastLotSecondDisparity(stock(d)) AND NOT skipAdditionalCheckDisparity() THEN {
        MESSAGE 'Запрещён перенос марок назад в непоследнем Изменении сортности по месту хранения';
        RETURN;
    }

    APPLY;
    IF canceled() THEN RETURN;

    ASK 'Вы уверены, что хотите перенести марки на старый товар?' DO {
        NEWSESSION {
            FOR disparity(UserDisparityDetail dd) = d AND sku(dd) AND quantity(dd, Lot l) AND inputSku(dd) = sku(l) DO {
                note(l) <- 'Изменение сортности ' + number(dd) + '. Обратная замена товара с ' + idSku(l) + ' на ' + id(sku(dd));
                sku(l) <- sku(dd);
            }
            setNoCancelInTransaction();
            APPLY;
        }
    }
}

changeSkuLotPost 'Перенести марки и провести' (UserDisparity d) {
    IF returnConditionChangeSkuLot(d) THEN {
        MESSAGE returnMessageChangeSkuLot();
        RETURN;
    }
    IF [GROUP MIN Lot l IF quantity(d, l) AND NOT currentBalance(l, stock(d)) > 0]() THEN {
        MESSAGE 'Все оценённые товары в документе должны быть с текущим остатком';
        RETURN;
    }

    APPLY;
    IF canceled() THEN RETURN;

    ASK 'Вы уверены, что хотите перенести марки и провести? Отмена операции будет невозможна.' DO {
        NEWSESSION {
            FOR disparity(UserDisparityDetail dd) = d AND inputSku(dd) AND quantity(dd, Lot l) AND sku(dd) = sku(l) DO {
                note(l) <- 'Изменение сортности ' + number(dd) + '. Замена товара с ' + idSku(l) + ' на ' + id(inputSku(dd));
                sku(l) <- inputSku(dd);
            }
            isPosted(d) <- TRUE;
            setNoCancelInTransaction();
            APPLY;
        }
    }
}

EXTEND FORM disparity
    PROPERTIES(dis) DRAW d TOOLBAR changeSkuLotPost SHOWIF (isDraft(dis) AND NOT countInputLot(dis) AND countLot(dis))
;

DESIGN disparity {
    REMOVE PROPERTY (changeSkuLot(dis)); 
}

CONSTRAINT (SETCHANGED(inputSku(UserDisparityDetail d)) OR CHANGED(sku(d)) OR SETCHANGED(operation(d)) OR SETCHANGED(quantity(d))) AND lotSecond(d) AND NOT isSecond(sku(d))
    MESSAGE 'Товар (расход) должен быть заполнен и быть секонд-товаром';

CONSTRAINT (SETCHANGED(sku(UserDisparityDetail d)) OR CHANGED(inputSku(d)) OR SETCHANGED(operation(d)) OR SETCHANGED(quantity(d))) AND lotSecond(d) AND NOT isSecond(inputSku(d))
    MESSAGE 'Товар (приход) должен быть заполнен и быть секонд-товаром';

CONSTRAINT (CHANGED(quantity(UserDisparityDetail d, Lot l)) OR CHANGED(sku(d)) OR CHANGED(inputSku(d)) OR CHANGED(stock(d))) AND l IS Lot AND countInputLot(userDisparity(d))
    MESSAGE 'Запрещено изменение в документе с перенесенными марками';

CONSTRAINT DROPPED(quantity(UserDisparityDetail d, Lot l)) AND PREV(countInputLot(userDisparity(d)))
    MESSAGE 'Запрещено удаление в документе с перенесенными марками';

CONSTRAINT DROPPED(isPosted(UserDisparity d)) AND lotSecond(d) AND NOT skipAdditionalCheckDisparity()
    MESSAGE 'Запрещено изменение признака Проведен в Изменении сортности';

CONSTRAINT (CHANGED(quantity(UserDisparityDetail d, Lot l)) OR CHANGED(sku(d)) OR CHANGED(inputSku(d))) AND l IS Lot AND lotSecond(d) AND userDisparity(d) != lastLotSecondDisparity(stock(d)) AND NOT skipAdditionalCheckDisparity()
    MESSAGE 'Запрещено изменение в непоследнем Изменении сортности по месту хранения';

CONSTRAINT CHANGED(dateTime(UserDisparity d)) AND PREV(dateTime(d)) AND lotSecond(d) AND d != prevLastLotSecondDisparity(stock(d)) AND NOT skipAdditionalCheckDisparity()
    MESSAGE 'Запрещено изменение даты/времени в непоследнем Изменении сортности по месту хранения';

EXTEND FORM lots
    PROPERTIES(l) READONLY note PANEL
;

DESIGN lots {
    tabbedPane {
        NEW operations AFTER BOX(sl) {
            caption = 'Операции';
            MOVE BOX(ll);
            MOVE PROPERTY (note(l)) { caption = 'Дополнительная информация'; }
        }
    }
}