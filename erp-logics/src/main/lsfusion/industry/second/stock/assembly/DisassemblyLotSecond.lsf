MODULE DisassemblyLotSecond;

REQUIRE DisassemblyLot, LotExtra, LotPrice, LotSecond;

NAMESPACE Disassembly;


inProcess (Disassembly a) = isOpened(a) AND NOT isPosted(a) MATERIALIZED;
INDEX inProcess(Disassembly a), stock(a), createdUser(a), sku(a);

CLASS DisassemblyLot 'Строка разборки по маркам';
disassembly = DATA Disassembly (DisassemblyLot) INDEXED NONULL DELETE;
countDisassemblyLot 'Кол-во строк по маркам' (Disassembly a) = GROUP SUM 1 BY disassembly(DisassemblyLot l) IN documentSum MATERIALIZED; 

dateTime 'Время' = DATA DATETIME (DisassemblyLot);
dateTime(DisassemblyLot r) <- currentDateTime() WHEN SET(r IS DisassemblyLot);

user = DATA CustomUser (DisassemblyLot);
nameUser 'Пользователь' (DisassemblyLot r) = name(user(r));
user(DisassemblyLot r) <- currentUser() WHEN SET(r IS DisassemblyLot);

lot 'Марка' = DATA Lot (DisassemblyLot) INDEXED NONULL;
id 'Код' (DisassemblyLot l) = id(lot(l)); 

sku (DisassemblyLot l) = sku(lot(l)); 
nameSku 'Наименование товара' (DisassemblyLot l) = name(sku(l)); 

stock(DisassemblyLot l) = stock(disassembly(l));

defect 'С дефектом' (DisassemblyLot l) = defect(lot(l));

weight 'Вес' (DisassemblyLot l) = weight(lot(l)); 
weightDisassemblyLot 'Вес марок' (Disassembly a) = GROUP SUM weight(DisassemblyLot l) BY disassembly(l) IN documentSum; 

weight (Disassembly a, Sku s) = GROUP SUM weight(DisassemblyLot l) BY disassembly(l), sku(l); 
weight (DisassemblyDetail d) += GROUP SUM weight(DisassemblyLot l) IF disassemblyDetail(disassembly(l), sku(l)) = d;

price 'Цена' (DisassemblyLot l) = price(lot(l)); 
image 'Изображение' (DisassemblyLot l) = image(lot(l)); 
openImage 'Просмотреть изображение' (DisassemblyLot l) { open(image(l)); }

count (Disassembly a, Sku s) = GROUP SUM 1 BY disassembly(DisassemblyLot al), sku(al); 
disassemblyLot (Disassembly a, Lot l) = GROUP MAX DisassemblyLot al BY disassembly(al), lot(al);

isPosted(DisassemblyLot l) = isPosted(disassembly(l));

EXTEND FORM disassembly
    PROPERTIES(a) READONLY countDisassemblyLot, weightDisassemblyLot

    OBJECTS dl = DisassemblyLot
    PROPERTIES(dl) READONLY dateTime, nameUser, id, weight, nameSku, defect, price, image PANEL
    FILTERS disassembly(dl) = a
;

DESIGN disassembly {
    detailsPane {
        NEW lot {
            caption = 'Марки';
            type = CONTAINERH;
            MOVE BOX(dl);
            MOVE PROPERTY(image(dl)) { fill = 0.3; panelCaptionVertical = TRUE; }
        }
    }
}

EXTEND FORM disassemblies
    PROPERTIES(a) READONLY countDisassemblyLot, weightDisassemblyLot

    OBJECTS dl = DisassemblyLot
    PROPERTIES(dl) READONLY dateTime, nameUser, id, weight, nameSku, defect, price, image PANEL
    PROPERTIES(dl) openImage TOOLBAR
    FILTERS disassembly(dl) = a
;

DESIGN disassemblies {
    tabbedPane {
        NEW lot {
            caption = 'Марки';
            type = CONTAINERH;
            MOVE BOX(dl);
            MOVE PROPERTY(image(dl)) { fill = 0.3; panelCaptionVertical = TRUE; }
        }
    }
}

// создать строки
@defineOperationProperty(calcQuantityWeightLot, 'Заполнять количество разборки из марок', paramsContainer);

overFillLotDetail ABSTRACT LIST(Disassembly);

fillLotDetail 'Заполнить по маркам' (Disassembly a) {
    FOR count(a, Sku s) AND NOT disassemblyDetail(a, s) NEW d = DisassemblyDetail DO {
        disassembly(d) <- a;
        sku(d) <- s;
    }
    
    quantity(DisassemblyDetail d, Lot l) <- NULL WHERE disassembly(d) = a;
    quantity(DisassemblyDetail d, Lot l) <- 1 WHERE disassemblyLot(a, l) AND d = disassemblyDetail(a, sku(l)) AND lotType(sku(l));
    quantity(DisassemblyDetail d) <- IF split(sku(d)) AND NOT lotType(sku(d)) 
                                        THEN weight(a, sku(d)) 
                                        ELSE count(a, sku(d)) 
                                     WHERE disassembly(d) = a; 
    
    IF calcQuantityWeightLot(operation(a)) THEN
        quantity(a) <- IF split(sku(a)) THEN weightDisassemblyLot(a) ELSE countDisassemblyLot(a);
    
    calculatePrice(a); 
    overFillLotDetail(a);
}

EXTEND FORM disassembly
    PROPERTIES(a) fillLotDetail SHOWIF countDisassemblyLot(a) DRAW d TOOLBAR
;

@defineOption(minimumWeightLot, 'Минимально допустимый вес марки, кг', NUMERIC[8,5], disassembly);

CONSTRAINT SETCHANGED(weight(Lot l)) AND weight(l) < minimumWeightLot()
    MESSAGE 'Вес ниже минимально допустимого';
    
@defineOption(minimumPriceLot, 'Минимально допустимая цена марки, руб', NUMERIC[8,2], disassembly);

CONSTRAINT SETCHANGED(price(Lot l)) AND price(l) < minimumPriceLot()
    MESSAGE 'Цена ниже минимально допустимой';    
    
@defineOption(maximumWeightLot, 'Максимально допустимый вес марки, кг', NUMERIC[8,5], disassembly);

CONSTRAINT SETCHANGED(weight(Lot l)) AND weight(l) > maximumWeightLot()
    MESSAGE 'Вес выше максимально допустимого. Убедитесь, что значение правильное, либо обратитесь к администратору.';
    
@defineOption(maximumPriceLot, 'Максимально допустимая цена марки, руб', NUMERIC[8,2], disassembly);

CONSTRAINT SETCHANGED(price(Lot l)) AND price(l) > maximumPriceLot()
    MESSAGE 'Цена выше максимально допустимой. Убедитесь, что значение правильное, либо обратитесь к администратору.';        