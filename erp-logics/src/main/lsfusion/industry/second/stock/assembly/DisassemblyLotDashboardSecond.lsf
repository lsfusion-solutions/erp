MODULE DisassemblyLotDashboardSecond;

REQUIRE DisassemblyLotSecond, LotExtra, LotPriceLabelSecond, 
        PriceCategory, ItemPart, 
        ScalesItem, ComWeight, 
        Video; 

NAMESPACE Disassembly;

GROUP itemLotDashboard 'Разукомплектация' : base;

inProcess (Disassembly a) = isOpened(a) AND NOT isPosted(a) MATERIALIZED;
INDEX inProcess(Disassembly a), stock(a), createdUser(a), sku(a);

disassembly (Stock st, CustomUser cu, Sku s) = 
    GROUP MAX Disassembly a IF inProcess(a) BY stock(a), createdUser(a), sku(a); 

countDisassembly (Stock st, CustomUser cu) = GROUP SUM 1 IF inProcess(Disassembly a) BY stock(a), createdUser(a); 

dsku = DATA LOCAL NESTED Sku ();

postLotDashboard (Disassembly a) {
    date(a) <- currentDate();
    time(a) <- currentTime();
    
    fillLotDetail(a);
    calculatePrice(a);
    isPosted(a) <- TRUE;
}

@defineOption(notAskOneSku, 'Не спрашивать про выбранную позицию при закрытии смены на форме Разукомплектация', disassembly);

postDisassembly 'Закрыть смену' (Stock st) {
    LOCAL current = BOOLEAN ();
    IF disassembly(st, currentUser(), dsku()) AND NOT notAskOneSku() THEN {
        ASK 'Закрыть только выбранную позицию ' + (CONCAT ' / ', id(dsku()), name(dsku())) + '?' ask = YESNO DO {
            current() <- ask;
        } ELSE
            RETURN;
    }
    NEWSESSION NESTED(current) {
        IF current() THEN
            postLotDashboard(disassembly(st, currentUser(), dsku()));
        ELSE
            FOR Disassembly a = disassembly(st, currentUser(), Sku s) DO
                postLotDashboard(a);
        APPLY;
    }
} CONFIRM;

dashboardMode = DATA LOCAL NESTED STRING ();
selectedMode (STRING m) = m = dashboardMode();

captionMode = ABSTRACT CASE STRING (STRING);
captionMode (STRING s) += WHEN s = 'disassembly' THEN 'Разукомплектация';
captionMode (STRING s) += WHEN s = 'edit' THEN 'Редактирование';

disassemblyMode () = selectedMode('disassembly');
editMode () = selectedMode('edit');

userComputerSettings 'Настройки' { edit(userComputer()); }

FORM disassemblyLotDashboard 'Разукомплектация'
    PROPERTIES NEWSESSION userComputerSettings()

    OBJECTS st = Stock PANEL
    PROPERTIES(st) name SELECTOR
    FILTERS accessCompany(currentUser(), st)

    OBJECTS m = STRING CUSTOM 'option'
    PROPERTIES captionMode(m) EXTID 'name', selectedMode(m) EXTID 'selected'
    FILTERS captionMode(m)
    EVENTS ON INIT { dashboardMode() <- 'disassembly'; }

    OBJECTS s = Sku
    PROPERTIES(s) READONLY SHOWIF disassemblyMode() BACKGROUND disassembly(st, currentUser(), s) id, name
    ORDERS id(s)
    FILTERGROUP balance
        FILTER 'В наличии' currentBalance(s, st) > 0 OR disassembly(st, currentUser(), s) DEFAULT
    FILTERGROUP part
        FILTER 'Комплект' countPart(s) OR disassembly(st, currentUser(), s) DEFAULT
    EVENTS ON CHANGE s { dsku() <- s; }

    OBJECTS a = Disassembly PANEL
    FILTERS a = disassembly(st, currentUser(), s)
    
    PROPERTIES PANEL 
               countLot 'Кол-во марок' = (OVERRIDE countDisassemblyLot(disassembly(st, currentUser(), s)), 0.0), 
               weightLot 'Вес марок' = (OVERRIDE weightDisassemblyLot(disassembly(st, currentUser(), s)), 0.0)
    
    PROPERTIES(st) SHOWIF disassemblyMode() postDisassembly READONLYIF NOT countDisassembly(st, currentUser())
    
    OBJECTS l = DisassemblyLot
    PROPERTIES(l) READONLY dateTime, nameUser, id, weight, nameSku, defect, price, image PANEL
    PROPERTIES(l) NEWSESSION DELETE
    FILTERS disassembly(l) = a
;

DESIGN disassemblyLotDashboard {
    OBJECTS {
        NEW pane {
            fill = 1;
            type = CONTAINERH;
            NEW left {
                fill = 0.5;
                width = 200;
                MOVE PROPERTY(userComputerSettings()) { alignment = STRETCH; }
                MOVE PROPERTY(name(st)) { caption = 'Склад'; alignment = STRETCH; }
                
                REMOVE BOX(m);
                MOVE GRID(m) { boxed = FALSE; flex = 0; }
                
                MOVE BOX(s) {
                    PROPERTY(name(s)) { charWidth = 15; }
                }
                MOVE FILTERGROUPS(s);
                MOVE PROPERTY(postDisassembly(st)) { fontSize = 24; alignment = STRETCH; }
                
                NEW totalDisassembly {
                    showIf = disassemblyMode();
                    alignment = STRETCH;
                    MOVE PROPERTY(countLot) { alignment = STRETCH; }
                    MOVE PROPERTY(weightLot) { alignment = STRETCH; }
                }
            }
            NEW tabbedPane {
                fill = 4;
                width = 600;
                type = TABBED;
                NEW details {
                    showIf = disassemblyMode();
                    caption = 'Строки';
                    type = CONTAINERH;
                    MOVE BOX(l);
                    NEW detailsRight {
                        fill = 0.3;
                        MOVE PROPERTY(image(l)) { fill = 1; panelCaptionVertical = TRUE; }
                    } 
                }
            }
        }
    }
}

// input
skipPriceLotDashboard 'Не заполнять цену' = DATA BOOLEAN (Item) IN itemLotDashboard;
skipPrintLotDashboard 'Не печатать марку' = DATA BOOLEAN (Item) IN itemLotDashboard;
EXTEND FORM item PROPERTIES(i) skipPriceLotDashboard, skipPrintLotDashboard;
DESIGN item {
    itemPrimaryColumn1 {
        MOVE GROUP(itemLotDashboard,i) { columns = 3; }
    }
}

iweight 'Вес' = DATA LOCAL NUMERIC[11,5] ();

isku = DATA LOCAL Sku ();
inameSku 'Товар' () = name(isku()) CHARWIDTH 15;

iprice 'Цена' = DATA LOCAL NUMERIC[16,4] ();

// image
iimage 'Изображение' = DATA LOCAL IMAGEFILE ();

istream = DATA LOCAL BOOLEAN ();

changeStream () {
    INPUT s = TEXT DO {
        IF s == '' THEN RETURN;
        
        istream() <- NULL;
    
        stringToFile(s);
        
        LOCAL value = TEXT();
        IMPORT JSON FROM resultFile() TO() value;

        iimage() <- decode(value(), 'base64');

    }
}

// options
ioption = DATA LOCAL BOOLEAN (STRING);
captionOption = ABSTRACT CASE STRING (STRING);
captionOption (STRING s) += WHEN s = 'defect' THEN 'С дефектом';

// barcode
ibarcode 'Штрихкод' = DATA LOCAL STRING[200] () CHARWIDTH 13 CHANGEKEY 'F4' EVENTID 'SCANNER';

fillProperties ABSTRACT LIST (Lot);
fillProperties(Lot l) +{
    iweight() <- weight(l);
    isku() <- sku(l);
    iprice() <- price(l);
    iimage() <- image(l);
    ibarcode() <- id(l);
    
    ioption('defect') <- defect(l);
}

dropProperties 'Сбросить' () {
    CANCEL;
}

@defineNumeratorItemGroup (lot, 'Нумератор штрихкодов (для марок)', paramsItemGroup);

overIncrementedValue = ABSTRACT STRING[200](STRING[48]);

generateLotId() {
    incrementValue(lotNumerator(itemGroup(isku())));
    ibarcode() <- OVERRIDE overIncrementedValue(incrementedValue()), incrementedValue();
}

printLabel 'Печать' (DisassemblyLot l) {
    printLabel(lot(l));
}

generateLot () {
    IF NOT ibarcode() THEN generateLotId(); 
}

overChangeIweight ABSTRACT (Sku, Stock);
overChangeIsku ABSTRACT (Sku, Stock);

@defineOption(readonlyIimage, 'Изображение на форме Разукомплектация не редактируется', disassembly);

@defineOption(minimumWeight, 'Минимальный вес взвешивания (грамм)', INTEGER, disassembly);

EXTEND FORM disassemblyLotDashboard
    PROPERTIES() iweight ON CHANGE { INPUT w = iweight() DO { IF w >= (OVERRIDE minimumWeight(), 30) THEN iweight() <- w / 1000; ELSE iweight() <- w; istream() <- TRUE; overChangeIweight(s, st); } }, 
                 inameSku ON CHANGE { INPUT sk = isku() LIST name(sk) DO { isku() <- sk; overChangeIsku(s, st); } }, 
                 iprice READONLYIF skipPriceLotDashboard(isku()), 
                 istream CUSTOM 'videoRender' ON CHANGE changeStream(), 
                 ibarcode ON CHANGE { INPUT b = ibarcode() DO IF b THEN { IF lot(b) THEN fillProperties(lot(b)); ELSE MESSAGE 'Штрих-код не найден'; } ELSE ibarcode() <- NULL; },
                 iimage READONLYIF readonlyIimage()
    
    EVENTS ON INIT { openScalesPortReader(); }
    EVENTS ON CLOSE { closePortReader(); }
    PROPERTIES readWeight = '' CUSTOM 'serialPortReceiveRender' ON CHANGE {
        INPUT t = TEXT DO {
            LOCAL weight = INTEGER();
            IF startsWith(t, '[32,32,') AND wordCount(t, ',') >= 8 THEN {
                LOCAL bytes = TEXT ();
                bytes() <- substrFrom(t, 8);
                bytes() <- left(bytes(), length(bytes())-1);
                
                weight() <- max(INTEGER(getWord(bytes(), ',', 1)) - 48, 0) * 10000 + (INTEGER(getWord(bytes(), ',', 2)) - 48) * 1000 +
                            (INTEGER(getWord(bytes(), ',', 4)) - 48) * 100 + (INTEGER(getWord(bytes(), ',', 5)) - 48) * 10 +
                            (INTEGER(getWord(bytes(), ',', 6)) - 48);
            } ELSE
                IF isSubstring(t, '170,') THEN { 
                    LOCAL bytes = TEXT ();
                    bytes() <- substrFrom(t, strpos(t, '170,') + 4);
                    bytes() <- left(bytes(), length(bytes())-1);
    
                    weight() <- INTEGER(getWord(bytes(), ',', 1)) + INTEGER(getWord(bytes(), ',', 2)) * 256;
                }
            IF weight() >= (OVERRIDE minimumWeight(), 30) THEN {
                iweight() <- NUMERIC(weight()) / 1000;
                istream() <- TRUE;
                overChangeIweight(s, st);
            }
        }     
    }

    OBJECTS o = STRING CUSTOM 'option'
    PROPERTIES captionOption(o) EXTID 'name', ioption(o) EXTID 'selected'
    FILTERS captionOption(o)
;

@defineOption(goToDisassemblyMode, 'После редактирования сразу переходить в режим Разукомплектации', disassembly);

overProcessLot ABSTRACT LIST (Lot);
processLot 'Обработать' (Stock st) {
    generateLot();
    IF ibarcode() AND NOT lot(ibarcode()) THEN {
        NEW l = Lot {
            id(l) <- ibarcode(); 
        }
    }
    FOR Lot l = lot(ibarcode()) DO {
        IF disassemblyMode() THEN { 
            IF NOT disassembly(st, currentUser(), dsku()) THEN
                NEW d = Disassembly {
                    sku(d) <- dsku();
                    stock(d) <- st;
                }
            FOR Disassembly a = disassembly(st, currentUser(), dsku()) AND NOT disassemblyLot(a, l) AND NOT currentBalance(l) DO {
                NEW d = DisassemblyLot {
                    disassembly(d) <- a;
                    lot(d) <- l;
                }
            }
        }
        
        LOCAL NESTED changedPrint = BOOLEAN();
        changedPrint() <- (NOT sku(l) = isku() OR NOT price(l) = iprice() OR (defect(l) AND NOT ioption('defect')) OR (NOT defect(l) AND ioption('defect'))) 
                          AND NOT skipPrintLotDashboard(isku());

        weight(l) <- iweight();
        sku(l) <- isku();
        price(l) <- iprice();
        image(l) <- iimage();
        
        defect(l) <- ioption('defect');
        
        overProcessLot(l);
        
        APPLY;
        IF canceled() THEN {
            CANCEL NESTED LOCAL;
        } ELSE {
            IF changedPrint() THEN printLabel(l);
            IF editMode() AND goToDisassemblyMode() THEN 
                dashboardMode() <- 'disassembly';
        }
    }

    ACTIVATE PROPERTY disassemblyLotDashboard.iweight();
    
} CHANGEKEY 'shift SPACE';

printLot 'Печать без изменений' () {
    printLabel(lot(ibarcode()));
    IF goToDisassemblyMode() THEN
        dashboardMode() <- 'disassembly';
    
    CANCEL;
    ACTIVATE PROPERTY disassemblyLotDashboard.iweight();
};

//changeLabel (Disassembly a) {
//    INPUT text = STRING DO
//        addLot(a);
//}

readonlyProcessLot = ABSTRACT BOOLEAN();

EXTEND FORM disassemblyLotDashboard
    PROPERTIES processLot(st) READONLYIF NOT iweight() OR NOT isku() OR
                                                         (NOT dsku() AND disassemblyMode()) OR
                                                         (NOT iprice() AND NOT skipPriceLotDashboard(isku())) OR 
                                                          NOT iimage() OR
                                                         (NOT ibarcode() AND NOT disassemblyMode()) OR 
                                                          readonlyProcessLot()

    PROPERTIES printLot() SHOWIF editMode() READONLYIF NOT lot(ibarcode()) OR skipPrintLotDashboard(isku()) OR 
                                                           (NOT sku(lot(ibarcode())) = isku() OR NOT price(lot(ibarcode())) = iprice() OR (defect(lot(ibarcode())) AND NOT ioption('defect')) OR (NOT defect(lot(ibarcode())) AND ioption('defect'))) 
    
    PROPERTIES dropProperties()  
    PROPERTIES(l) printLabel
;

DESIGN disassemblyLotDashboard {
    tabbedPane {
        NEW input FIRST {
            caption = 'Ввод';
            NEW inputPane {
                fill = 1;
                type = CONTAINERH;
                NEW inputLeft {
                    fill = 3;
                    width = 400;
                    MOVE PROPERTY(readWeight) { focusable = FALSE; }
                    NEW inputLeftHeader {
                        alignment = STRETCH; 
                        type = CONTAINERH;
                        MOVE PROPERTY(iweight()) { panelCaptionVertical = TRUE; charWidth = 6; alignment = STRETCH; notNull = TRUE; fontSize = 24; focusable = FALSE; }
                        MOVE PROPERTY(inameSku()) { panelCaptionVertical = TRUE; alignment = STRETCH; notNull = TRUE; fontSize = 24; }
                    }
                }
                NEW inputCenter {
                    fill = 1;
                    width = 150;
                    MOVE PROPERTY(iprice()) { panelCaptionVertical = TRUE; fontSize = 24; notNull = TRUE; alignment = STRETCH; }
                    REMOVE BOX(o);
                    MOVE GRID(o) { boxed = FALSE; flex = 0; }
                }
                NEW inputRight {
                    alignment = STRETCH;
//                    fill = 1;
                    NEW inputRightTop {
                        fill = 1;
                        type = CONTAINERH;
                        NEW inputRightTopLeft {
                            fill = 1;
                            MOVE PROPERTY(ibarcode()) { panelCaptionVertical = TRUE; alignment = STRETCH; notNull = TRUE; fontSize = 24; }
                            MOVE PROPERTY(processLot(st)) { fill = 1; fontSize = 24; }
                            MOVE PROPERTY(printLot()) { fontSize = 18; alignment = STRETCH; }
                            MOVE PROPERTY(dropProperties()) { fontSize = 24; alignment = STRETCH; }
                        }
                        MOVE PROPERTY(iimage()) { panelCaptionVertical = TRUE; fill = 1; notNull = TRUE; focusable = FALSE; }
                    }
                    MOVE PROPERTY(istream()) { caption =''; focusable = FALSE; }
                }
            }
        }
        detailsRight {
            MOVE PROPERTY(printLabel(l)) { fill = 0.3; fontSize = 24; }
        }
    }
}    

startEditing 'Редактировать' (DisassemblyLot dl) {
    dashboardMode() <- 'edit';
    fillProperties(lot(dl));
    
    ACTIVATE TAB disassemblyLotDashboard.input;
}

EXTEND FORM disassemblyLotDashboard
    PROPERTIES(l) startEditing TOOLBAR
;

// select sku
fixedLotDashboard 'Брак' = DATA BOOLEAN (Item) IN itemLotDashboard;
EXTEND FORM item PROPERTIES(i) fixedLotDashboard;

overChangeIsku ABSTRACT;

choose (Item i) { isku() <- i; overChangeIsku(); }
choose (Part p) { isku() <- item(p); overChangeIsku(); }

initDisassemblyLotDashboardSecond INTERNAL CLIENT 'disassemblyLotDashboardSecond.css';
onWebClientLoad() +{ initDisassemblyLotDashboardSecond(); }

EXTEND FORM disassemblyLotDashboard
    OBJECTS p = Part
    PROPERTIES choose(p) COLUMNS (p) HEADER nameItem(p), nameItem(p)
    ORDERS nameItem(p)
    FILTERS set(p) = s
    
    OBJECTS fi = Item
    PROPERTIES choose(fi) COLUMNS (fi) HEADER name(fi), name(fi)
    ORDERS name(fi)
    FILTERS fixedLotDashboard(fi)
;

DESIGN disassemblyLotDashboard {
    inputLeft {
        REMOVE BOX(p);
        MOVE PROPERTY(choose(p)) { fontSize = 18; focusable = FALSE; }

        REMOVE BOX(fi);
        MOVE PROPERTY(choose(fi)) { fill = 1; fontSize = 24; focusable = FALSE; }
    }
}

// select price

// select sku
select (PriceCategory pc) { iprice() <- price(pc); }

index (PriceCategory c) = PARTITION SUM 1 ORDER price(c), c;

EXTEND FORM disassemblyLotDashboard
    OBJECTS pc1 = PriceCategory
    PROPERTIES select(pc1) READONLYIF skipPriceLotDashboard(isku()) COLUMNS (pc1) HEADER priceName(pc1), price(pc1)
    ORDERS price(pc1)
    FILTERS mod(index(pc1),2) = 1

    OBJECTS pc2 = PriceCategory
    PROPERTIES select(pc2) READONLYIF skipPriceLotDashboard(isku()) COLUMNS (pc2) HEADER priceName(pc2), price(pc2)
    ORDERS price(pc2)
    FILTERS mod(index(pc2),2) = 0
;

DESIGN disassemblyLotDashboard {
    inputCenter {
        NEW inputCenterPrice {
            caption = '';
            fill = 1;
            type = CONTAINERH;
            REMOVE BOX(pc1);
            REMOVE BOX(pc2);
            MOVE PROPERTY(select(pc1)) { fill = 1; fontSize = 18; panelColumnVertical = TRUE; panelCaptionVertical = TRUE; focusable = FALSE; }
            MOVE PROPERTY(select(pc2)) { fill = 1; fontSize = 18; panelColumnVertical = TRUE; panelCaptionVertical = TRUE; focusable = FALSE; }
        }
    }
}

NAVIGATOR {
    stockDashboardNavigator {
        NEW disassemblyLotDashboard;
    }
}