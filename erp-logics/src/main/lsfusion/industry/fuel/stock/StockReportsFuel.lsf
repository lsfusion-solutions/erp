MODULE StockReportsFuel;

REQUIRE BinLedgerFuel, ZReportReceiptDetailPayment, ZReportFuel, SkuLedgerFuel, WriteOffBinLedgerFuel;

NAMESPACE StockReports;

dataAllowedDebalancePercent 'Процент допустимого дебаланса, %' = DATA NUMERIC[5,2] ();
allowedDebalancePercent 'Процент допустимого дебаланса, %' = OVERRIDE dataAllowedDebalancePercent(), 0.65;

EXTEND FORM options
    PROPERTIES allowedDebalancePercent()
;
DESIGN options {
    commons {
        MOVE PROPERTY(allowedDebalancePercent());
    }
}

CLASS DailyReport 'Сменный отчет';
TABLE dailyReport (DailyReport);

@defineDocumentHeaderStock(DailyReport, stock, 'Склад');
@defineDocumentDialogStocks(DailyReport, stock, company, , );
@defineDocumentStockAccess(DailyReport, stock, company);

CONSTRAINT stock(DailyReport r) AND NOT isCompany(stock(r))
    CHECKED BY stock[DailyReport] MESSAGE 'Выбран склад, который не принадлежит компании';

@defineDocumentHeaderTime(DailyReport);
@deriveDocumentHeaderTime(DailyReport);

fromDate '{document.date.of} c' = DATA DATE (DailyReport) IN documentHeader;
fromTime '{document.time.of} c' = DATA TIME (DailyReport) IN documentHeader;
fromDateTime '{document.date.time.of} c' (DailyReport o) = dateTimeToDateTime(fromDate(o), fromTime(o)) MATERIALIZED;

toDate '{document.date.of} по' = DATA DATE (DailyReport) IN documentHeader;
toTime '{document.time.of} по' = DATA TIME (DailyReport) IN documentHeader;
toDateTime '{document.date.time.of} по' (DailyReport o) = dateTimeToDateTime(toDate(o), toTime(o)) MATERIALIZED;

WHEN LOCAL SETCHANGED(stock(DailyReport o)) DO {
    LOCAL lastReport = DailyReport();
    lastReport() <- GROUP LAST DailyReport r IF stock(r) == stock(o) AND NOT r == o ORDER toDateTime(r), r;
    IF o IS DailyReport AND NOT fromDate(o) THEN fromDate(o) <- OVERRIDE DATE(sumSeconds(toDateTime(lastReport()),1)), sum(currentDate(),-1);
    IF o IS DailyReport AND NOT fromTime(o) THEN fromTime(o) <- OVERRIDE TIME(sumSeconds(toDateTime(lastReport()),1)), 00:00;
    IF o IS DailyReport AND NOT toDate(o) THEN toDate(o) <- OVERRIDE sum(toDate(lastReport()),1), currentDate();
    IF o IS DailyReport AND NOT toTime(o) THEN toTime(o) <- TIME('23:59:59');
}

@defineDocumentHeaderNote(DailyReport);
@defineDocumentHeaderCreated(DailyReport);
@defineDocumentHeaderNumber(DailyReport, BPSTRING[2]);
@defineNumeratedDefault(DailyReport, 'Сменный отчет', 'СО');
@defineDocumentHeaderPosted(DailyReport);
isApproved 'Утвержден' (o) = DATA BOOLEAN (DailyReport);
isNotApproved (DailyReport o) = o IS DailyReport AND NOT isApproved(o) MATERIALIZED;

GROUP approved 'Утвержден' : base;

approvedTime 'Время утверждения' = DATA DATETIME (DailyReport) IN approved;
approvedTime(DailyReport o) <- currentDateTime() WHEN SET(isApproved(o));

approvedUser = DATA CustomUser (DailyReport);
approvedUser(DailyReport o) <- currentUser() WHEN SET(isApproved(o));
approvedNameUser 'Утвержден пользователем' (DailyReport o) = name[Contact](approvedUser(o)) IN approved;

approvedComputer = DATA Computer (DailyReport);
approvedComputer(DailyReport o) <- currentComputer() WHEN SET(isApproved(o));
approvedHostnameComputer 'Утвержден на компьютере' (DailyReport o) = hostname(approvedComputer(o)) IN approved;

approve 'Утвердить' (DailyReport o) {
    NEWSESSION {
        isApproved(o) <- TRUE;
        apply();
    }
} TOOLBAR CONFIRM;
unapprove 'Отменить утверждение' (DailyReport o) {
	NEWSESSION {
	    isApproved(o) <- NULL;
	    apply();
	}
} TOOLBAR CONFIRM;

@defineDocumentHeaderDescription (DailyReport, 'Сменный отчет');

employeeBefore 'Смену сдал' = DATA Employee (DailyReport);
nameEmployeeBefore 'Смену сдал' (DailyReport r) = name(employeeBefore(r)) CHARWIDTH 20;

employeeAfter 'Смену принял' = DATA Employee (DailyReport);
nameEmployeeAfter 'Смену принял' (DailyReport r) = name(employeeAfter(r)) CHARWIDTH 20;

CONSTRAINT employeeBefore(DailyReport report) AND NOT in(stock(report), employeeBefore(report)) AND NOT allowStockEmployee()
    CHECKED BY employeeBefore[DailyReport] MESSAGE 'В качестве "Смену сдал" выбран сотрудник, который не является сотрудником склада документа.';                        
CONSTRAINT employeeAfter(DailyReport report) AND NOT in(stock(report), employeeAfter(report)) AND NOT allowStockEmployee()
    CHECKED BY employeeAfter[DailyReport] MESSAGE 'В качестве "Смену принял" выбран сотрудник, который не является сотрудником склада документа.'; 

TABLE dailyReportSkuBin (DailyReport, Sku, Bin);
include = DATA BOOLEAN (DailyReport, Sku, Bin);
volumeB 'Расчетный остаток на начало смены (книжный), л' = DATA NUMERIC[16,2] (DailyReport, Sku, Bin);
balanceB 'Расчетный остаток на начало смены (книжный), кг' = DATA NUMERIC[16,6] (DailyReport, Sku, Bin);
balanceBTon 'Расчетный остаток на начало смены (книжный), т' (DailyReport r, Sku s, Bin b) = NUMERIC[16,6](balanceB(r, s, b) / 1000);
volumeIn 'Поступление за смену, л' = DATA NUMERIC[16,2] (DailyReport, Sku, Bin);
quantityIn 'Поступление за смену, кг' = DATA NUMERIC[16,6] (DailyReport, Sku, Bin);
quantityInTon 'Поступление за смену, т' (DailyReport r, Sku s, Bin b) = NUMERIC[16,6](quantityIn(r, s, b) / 1000);
otherVolumeOut 'Прочий расход, л' = DATA NUMERIC[16,2] (DailyReport, Sku, Bin);
otherQuantityOut 'Прочий расход, кг' = DATA NUMERIC[16,6] (DailyReport, Sku, Bin);
otherQuantityOutTon 'Прочий расход, т' (DailyReport r, Sku s, Bin b) = NUMERIC[16,6](otherQuantityOut(r,s,b) / 1000);
volumeOut 'Расход по резервуару, л' = DATA NUMERIC[16,2] (DailyReport, Sku, Bin);
quantityOut 'Расход по резервуару, кг' = DATA NUMERIC[16,6] (DailyReport, Sku, Bin);
quantityOutTon 'Расход по резервуару, т' (DailyReport r, Sku s, Bin b) = NUMERIC[16,6](quantityOut(r,s,b) / 1000);
level 'Общий уровень нефтепродукта с водой, мм' = DATA NUMERIC[8,1] (DailyReport, Sku, Bin);
waterLevel 'Уровень воды, мм' = DATA NUMERIC[8,1] (DailyReport, Sku, Bin);
volume 'Общий объем по градуиров. таблице нефтепродукта с водой, л' = DATA NUMERIC[16,2] (DailyReport, Sku, Bin);
waterVolume 'Объем по градуиров. таблице воды, л' = DATA NUMERIC[16,2] (DailyReport, Sku, Bin);
fuelVolume 'Объем нефтепродукта без воды, л' = DATA NUMERIC[16,2] (DailyReport, Sku, Bin);
correctedVolume 'Объем, приведенный к стандартному условию, л' = DATA NUMERIC[16,2] (DailyReport, Sku, Bin);
density 'Плотность наблюдаемая, кг/м3' = DATA NUMERIC[8,1] (DailyReport, Sku, Bin);
correctedDensity 'Плотность, приведеная к стандарт. условию, кг/м3' = DATA NUMERIC[8,1] (DailyReport, Sku, Bin);
temperature 'Температура наблюдаемая, °С' = DATA NUMERIC[5,1] (DailyReport, Sku, Bin);
correctedTemperature 'Температура, приведеная к стандарт. условию, °С' = DATA NUMERIC[5,1] (DailyReport, Sku, Bin);
binVolumeA 'Фактический остаток н/п в резервуаре, л' = DATA NUMERIC[16,2] (DailyReport, Sku, Bin);
binBalanceA 'Фактический остаток н/п в резервуаре, кг' = DATA NUMERIC[16,6] (DailyReport, Sku, Bin);
binBalanceATon 'Фактический остаток н/п в резервуаре, т' (DailyReport r, Sku s, Bin b) = NUMERIC[16,6](binBalanceA(r,s,b) / 1000);
pipeVolumeA 'Фактический остаток н/п в трубопроводе, л' = DATA NUMERIC[16,2] (DailyReport, Sku, Bin);
pipeBalanceA 'Фактический остаток н/п в трубопроводе, кг' = DATA NUMERIC[16,6] (DailyReport, Sku, Bin);
pipeBalanceATon 'Фактический остаток н/п в трубопроводе, т' (DailyReport r, Sku s, Bin b) = NUMERIC[16,6](pipeBalanceA(r,s,b) / 1000);
factVolumeA 'Фактический остаток, л' = DATA NUMERIC[16,2] (DailyReport, Sku, Bin);
factBalanceA 'Фактический остаток, кг' = DATA NUMERIC[16,6] (DailyReport, Sku, Bin);
factBalanceATon 'Фактический остаток, т' (DailyReport r, Sku s, Bin b) = NUMERIC[16,6](factBalanceA(r,s,b) / 1000);
volumeA 'Расчетный (книжный) остаток, л' = DATA NUMERIC[16,2] (DailyReport, Sku, Bin);
balanceA 'Расчетный (книжный) остаток, кг' = DATA NUMERIC[16,6] (DailyReport, Sku, Bin);
balanceATon 'Расчетный (книжный) остаток, т' (DailyReport r, Sku s, Bin b) = NUMERIC[16,6](balanceA(r,s,b) / 1000);
debalanceQuantity 'Дебаланс фактический, кг' = DATA NUMERIC[16,6] (DailyReport, Sku, Bin);
debalanceQuantityTon 'Дебаланс фактический, т' (DailyReport r, Sku s, Bin b) = NUMERIC[16,6](debalanceQuantity(r,s,b) / 1000);
allowedDebalanceQuantity 'Дебаланс допустимый, кг' = DATA NUMERIC[16,6] (DailyReport, Sku, Bin);
allowedDebalanceQuantityTon 'Дебаланс допустимый, т' (DailyReport r, Sku s, Bin b) = NUMERIC[16,6](allowedDebalanceQuantity(r,s,b) / 1000);

lastDailyReportDensity (Stock st, Sku s, Bin b) += density([GROUP LAST DailyReport r IF isPosted(r) ORDER dateTime(r), r BY stock(r)](st), s, b);

TABLE dailyReportSkuBinGun (DailyReport, Sku, Bin, Gun);
include = DATA BOOLEAN (DailyReport, Sku, Bin, Gun);
volumeCounterB 'Счетчик объема ТРК на начало смены, л' = DATA NUMERIC[16,2] (DailyReport, Sku, Bin, Gun);
volumeCounterA 'Счетчик объема ТРК на конец смены, л' = DATA NUMERIC[16,2] (DailyReport, Sku, Bin, Gun);
volumeOut 'Объем, л' = DATA NUMERIC[16,2] (DailyReport, Sku, Bin, Gun);
quantityOut 'Масса, кг' = DATA NUMERIC[16,6] (DailyReport, Sku, Bin, Gun);
quantityOutTon 'Масса, т' (DailyReport r, Sku s, Bin b, Gun g) = NUMERIC[16,6](quantityOut(r,s,b,g) / 1000);
density 'Средневзвешенная плотность, кг/м3' = DATA NUMERIC[8,1] (DailyReport, Sku, Bin, Gun);
techVolumeOut 'Технологический отпуск через ТРК, л' = DATA NUMERIC[16,2] (DailyReport, Sku, Bin, Gun);
techQuantityOut 'Технологический отпуск через ТРК, кг' = DATA NUMERIC[16,6] (DailyReport, Sku, Bin, Gun);
errorPercent 'Погрешность ТРК, %' = DATA NUMERIC[5,2] (DailyReport, Sku, Bin, Gun);

TABLE dailyReportCashRegisterPaymentType (DailyReport, CashRegister, PaymentType);
include = DATA BOOLEAN (DailyReport, CashRegister, PaymentType);
sum 'Сумма' = DATA NUMERIC[18,4] (DailyReport, CashRegister, PaymentType);
quantity 'Масса, кг' = DATA NUMERIC[16,6] (DailyReport, CashRegister, PaymentType);
volume 'Обьем, л' = DATA NUMERIC[16,5] (DailyReport, CashRegister, PaymentType);

TABLE dailyReportCashRegisterPaymentTypeSku (DailyReport, CashRegister, PaymentType, Sku);
include = DATA BOOLEAN (DailyReport, CashRegister, PaymentType, Sku);
sum 'Сумма' = DATA NUMERIC[18,4] (DailyReport, CashRegister, PaymentType, Sku);
quantity 'Масса, кг' = DATA NUMERIC[16,6] (DailyReport, CashRegister, PaymentType, Sku);
volume 'Обьем, л' = DATA NUMERIC[16,5] (DailyReport, CashRegister, PaymentType, Sku);

beforeFill ABSTRACT LIST (DailyReport);

fill 'Заполнить' (DailyReport r) {
    IF NOT stock(r) THEN {
        MESSAGE 'Не задан Склад' NOWAIT;
        RETURN;
    }
    IF NOT fromDate(r) THEN {
        MESSAGE 'Не задана Дата с' NOWAIT;
        RETURN;
    }
    IF NOT fromTime(r) THEN {
        MESSAGE 'Не задано Время с' NOWAIT;
        RETURN;
    }
    IF NOT toDate(r) THEN {
        MESSAGE 'Не задана Дата по' NOWAIT;
        RETURN;
    }
    IF NOT toTime(r) THEN {
        MESSAGE 'Не задано Время по' NOWAIT;
        RETURN;
    }
    
    include(r, Sku s, Bin b) <- NULL;
    volumeB(r, Sku s, Bin b) <- NULL;
    balanceB(r, Sku s, Bin b) <- NULL;
    volumeIn(r, Sku s, Bin b) <- NULL;
    quantityIn(r, Sku s, Bin b) <- NULL;
    otherVolumeOut(r, Sku s, Bin b) <- NULL;
    otherQuantityOut(r, Sku s, Bin b) <- NULL;
    volumeOut(r, Sku s, Bin b) <- NULL;
    quantityOut(r, Sku s, Bin b) <- NULL;
    level(r, Sku s, Bin b) <- NULL;
    waterLevel(r, Sku s, Bin b) <- NULL;
    volume(r, Sku s, Bin b) <- NULL;
    waterVolume(r, Sku s, Bin b) <- NULL;
    fuelVolume(r, Sku s, Bin b) <- NULL;
    correctedVolume(r, Sku s, Bin b) <- NULL;
    density(r, Sku s, Bin b) <- NULL;
    correctedDensity(r, Sku s, Bin b) <- NULL;
    temperature(r, Sku s, Bin b) <- NULL;
    correctedTemperature(r, Sku s, Bin b) <- NULL;
    binVolumeA(r, Sku s, Bin b) <- NULL;
    binBalanceA(r, Sku s, Bin b) <- NULL;
    pipeVolumeA(r, Sku s, Bin b) <- NULL;
    pipeBalanceA(r, Sku s, Bin b) <- NULL;
    factVolumeA(r, Sku s, Bin b) <- NULL;
    factBalanceA(r, Sku s, Bin b) <- NULL;
    volumeA(r, Sku s, Bin b) <- NULL;
    balanceA(r, Sku s, Bin b) <- NULL;
    debalanceQuantity(r, Sku s, Bin b) <- NULL;
    allowedDebalanceQuantity(r, Sku s, Bin b) <- NULL;
    
    include(r, Sku s, Bin b, Gun g) <- NULL;
    volumeCounterB(r, Sku s, Bin b, Gun g) <- NULL;
    volumeCounterA(r, Sku s, Bin b, Gun g) <- NULL;
    volumeOut(r, Sku s, Bin b, Gun g) <- NULL;
    quantityOut(r, Sku s, Bin b, Gun g) <- NULL;
    density(r, Sku s, Bin b, Gun g) <- NULL;
    techVolumeOut(r, Sku s, Bin b, Gun g) <- NULL;
    techQuantityOut(r, Sku s, Bin b, Gun g) <- NULL;
    errorPercent(r, Sku s, Bin b, Gun g) <- NULL;
    
    include(r, CashRegister c, PaymentType t) <- NULL;
    sum(r, CashRegister c, PaymentType t) <- NULL;
    quantity(r, CashRegister c, PaymentType t) <- NULL;
    volume(r, CashRegister c, PaymentType t) <- NULL;
    
    include(r, CashRegister c, PaymentType t, Sku s) <- NULL;
    sum(r, CashRegister c, PaymentType t, Sku s) <- NULL;
    quantity(r, CashRegister c, PaymentType t, Sku s) <- NULL;
    volume(r, CashRegister c, PaymentType t, Sku s) <- NULL;
    
    beforeFill(r);
    
    techVolumeOut(r, Sku s, Bin b, Gun g) <- NUMERIC[16,2](volumeOutTechFuel(s,b,g,fromDateTime(r),toDateTime(r))) WHERE in(stock(r),b);
    techQuantityOut(r, Sku s, Bin b, Gun g) <- NUMERIC[16,6](quantityOutTechFuel(s,b,g,fromDateTime(r),toDateTime(r))) WHERE in(stock(r),b);
    //errorPercent(r, Sku s, Bin b, Gun g) <- 
    
    include(r, Sku s, Bin b, Gun g) <- volumeCounterB(r,s,b,g) OR volumeCounterA(r,s,b,g) OR volumeOut(r,s,b,g) OR quantityOut(r,s,b,g) OR techVolumeOut(r,s,b,g) OR techQuantityOut(r,s,b,g);//(include(r,s,b) AND bin(g) == b) не проверяем чисто на галки т.к. пистолет могут переключить на другой резервуар и тогда данные будут в двух строках

    volumeB(r, Sku s, Bin b) <- NUMERIC[16,2](volumeB(s,b,fromDateTime(r))) WHERE in(stock(r),b);
    balanceB(r, Sku s, Bin b) <- NUMERIC[16,6](balanceB(s,b,fromDateTime(r))) WHERE in(stock(r),b);
    volumeIn(r, Sku s, Bin b) <- NUMERIC[16,2](volumeIn(s,b,fromDateTime(r),toDateTime(r))) WHERE in(stock(r),b);
    quantityIn(r, Sku s, Bin b) <- NUMERIC[16,6](quantityIn(s,b,fromDateTime(r),toDateTime(r))) WHERE in(stock(r),b);
    volumeOut(r, Sku s, Bin b) <- NUMERIC[16,2](volumeOut(s,b,fromDateTime(r),toDateTime(r))) WHERE in(stock(r),b);
    quantityOut(r, Sku s, Bin b) <- NUMERIC[16,6](quantityOut(s,b,fromDateTime(r),toDateTime(r))) WHERE in(stock(r),b);
    otherVolumeOut(r, Sku s, Bin b) <- volumeOut(r,s,b) (-) (GROUP SUM volumeOut(r,s,b, Gun g)) (-) (GROUP SUM techVolumeOut(r,s,b, Gun g));
    otherQuantityOut(r, Sku s, Bin b) <- quantityOut(r,s,b) (-) (GROUP SUM quantityOut(r,s,b, Gun g)) (-) (GROUP SUM techQuantityOut(r,s,b, Gun g));
    volumeA(r, Sku s, Bin b) <- NUMERIC[16,2](volumeA(s,b,toDateTime(r))) WHERE in(stock(r),b);
    balanceA(r, Sku s, Bin b) <- NUMERIC[16,6](balanceA(s,b,toDateTime(r))) WHERE in(stock(r),b);
    debalanceQuantity(r, Sku s, Bin b) <- factBalanceA(r,s,b) (-) balanceA(r,s,b);
    allowedDebalanceQuantity(r, Sku s, Bin b) <- NUMERIC[16,6](binBalanceA(r,s,b) * allowedDebalancePercent() / 100.0);
    
    include(r, Sku s, Bin b) <- volumeB(r,s,b) OR balanceB(r,s,b) OR volumeIn(r,s,b) OR quantityIn(r,s,b) OR volumeOut(r,s,b) OR quantityOut(r,s,b) OR volumeA(r,s,b) OR balanceA(r,s,b) OR binVolumeA(r,s,b) OR binBalanceA(r,s,b);
    
    sum(r, CashRegister c, PaymentType t, Sku s) <- GROUP SUM sum(ReceiptDetail d, Payment p) IF isPosted(d) AND isFuel(sku(d))
                                                    AND sku(d) == s AND paymentType(p) == t AND cashRegister(receipt(d)) == c
                                                    AND dateTime(d) >= fromDateTime(r) AND dateTime(d) <= toDateTime(r);
    quantity(r, CashRegister c, PaymentType t, Sku s) <- NUMERIC[16,6](GROUP SUM quantity(ReceiptDetail d) * sum(d, Payment p) / sum(d) IF isPosted(d) AND isFuel(sku(d))
                                                         AND sku(d) == s AND paymentType(p) == t AND cashRegister(receipt(d)) == c
                                                         AND dateTime(d) >= fromDateTime(r) AND dateTime(d) <= toDateTime(r));
    volume(r, CashRegister c, PaymentType t, Sku s) <- NUMERIC[16,5](GROUP SUM volume(ReceiptDetail d) * sum(d, Payment p) / sum(d) IF isPosted(d) AND isFuel(sku(d))
                                                       AND sku(d) == s AND paymentType(p) == t AND cashRegister(receipt(d)) == c
                                                       AND dateTime(d) >= fromDateTime(r) AND dateTime(d) <= toDateTime(r));
    include(r, CashRegister c, PaymentType t, Sku s) <- sum(r,c,t,s) AND r IS DailyReport;
    
    sum(r, CashRegister c, PaymentType t) <- GROUP SUM sum(r,c,t, Sku s);
    quantity(r, CashRegister c, PaymentType t) <- GROUP SUM quantity(r,c,t, Sku s);
    volume(r, CashRegister c, PaymentType t) <- GROUP SUM volume(r,c,t, Sku s);
    include(r, CashRegister c, PaymentType t) <- sum(r,c,t) AND r IS DailyReport;
}

@addRoleApplicationSetting(allowEditDailyReport, 'Разрешить редактировать сменный отчет', BOOLEAN);

readonlyDailyReport (DailyReport r) = (r IS DailyReport AND NOT allowEditDailyReport(mainRole(currentUser()))) OR isPosted(r);

FORM dailyReport 'Сменный отчет'
    OBJECTS r = DailyReport PANEL
    PROPERTIES(r) nameNumerator, number, series, date, time, 
                  nameStock ON CHANGE changeStockCompany(r),
                  fromDate, fromTime, toDate, toTime, note,
                  nameEmployeeBefore, nameEmployeeAfter, isPosted
    PROPERTIES(r) SHOWIF isDraft(r) fill
    
    OBJECTS d = (s = Sku, b = Bin)
    PROPERTIES READONLYIF readonlyDailyReport(r)
               name(s) READONLY, name(b) READONLY, volumeB(r,s,b) READONLY, balanceB(r,s,b) READONLY, volumeIn(r,s,b) READONLY, quantityIn(r,s,b) READONLY, otherVolumeOut(r,s,b) READONLY,
               otherQuantityOut(r,s,b) READONLY, volumeOut(r,s,b) READONLY, quantityOut(r,s,b) READONLY, level(r,s,b), waterLevel(r,s,b),
               volume(r,s,b), waterVolume(r,s,b), fuelVolume(r,s,b), correctedVolume(r,s,b), density(r,s,b), correctedDensity(r,s,b),
               temperature(r,s,b), correctedTemperature(r,s,b), binVolumeA(r,s,b), binBalanceA(r,s,b), pipeVolumeA(r,s,b) READONLY, pipeBalanceA(r,s,b) READONLY,
               factVolumeA(r,s,b), factBalanceA(r,s,b), volumeA(r,s,b) READONLY, balanceA(r,s,b) READONLY, debalanceQuantity(r,s,b)
    FILTERS include(r,s,b)
    
    OBJECTS g = Gun
    PROPERTIES READONLYIF readonlyDailyReport(r)
               fullNumber(g) READONLY, volumeCounterB(r,s,b,g), volumeCounterA(r,s,b,g), volumeOut(r,s,b,g), quantityOut(r,s,b,g),
               density(r,s,b,g), techVolumeOut(r,s,b,g), techQuantityOut(r,s,b,g), errorPercent(r,s,b,g)
    FILTERS include(r,s,b,g)
    
    OBJECTS dd = (c = CashRegister, t = PaymentType)
    PROPERTIES READONLY overNpp(c), name(t), sum(r,c,t), quantity(r,c,t), volume(r,c,t)
    FILTERS include(r,c,t)
    
    OBJECTS ss = Sku
    PROPERTIES READONLY name(ss), sum(r,c,t,ss), quantity(r,c,t,ss), volume(r,c,t,ss)
    FILTERS include(r,c,t,ss)
    
    EVENTS ON OK prePost(r)
    EDIT DailyReport OBJECT r
;
DESIGN dailyReport {
    NEW top {
        NEW headContainer {
            caption = 'Шапка документа';
            horizontal = TRUE;
            alignment = STRETCH;
            MOVE PROPERTY (isPosted(r));
            MOVE PROPERTY (nameNumerator(r));
            MOVE PROPERTY (number(r));
            MOVE PROPERTY (series(r));
            MOVE PROPERTY (date(r));
            MOVE PROPERTY (time(r));
        }
        NEW parametersContainer {
            caption = 'Параметры документа';
            horizontal = TRUE;
            alignment = STRETCH;
            lines = 2;
            MOVE PROPERTY (fromDate(r));
            MOVE PROPERTY (toDate(r));
            MOVE PROPERTY (fromTime(r));
            MOVE PROPERTY (toTime(r));
            MOVE PROPERTY (nameEmployeeBefore(r));
            MOVE PROPERTY (nameEmployeeAfter(r));
            MOVE PROPERTY (nameStock(r));
            MOVE PROPERTY (note(r));
        }
        MOVE PROPERTY(fill(r));
    }
    NEW tabs {
        fill = 1;
        tabbed = TRUE;
        
        NEW bins {
            fill = 1;
            caption = 'Данные по резервуарам';
            MOVE BOX(d) {
                PROPERTY (name(s)) { caption = 'Наименование нефтепродукта'; }
                PROPERTY (name(b)) { caption = '№ резервуара'; }
            }
            MOVE BOX(g);
        }
        NEW cashRegisters {
            fill = 1;
            caption = 'Данные по кассам';
            MOVE BOX(dd) {
                PROPERTY (overNpp(c)) { caption = '№ кассы'; }
                PROPERTY (name(t)) { caption = 'Тип платежа'; }
            }
            MOVE BOX(ss) {
                PROPERTY (name(ss)) { caption = 'Наименование нефтепродукта'; }
            }
        }
    }
    
    MOVE TOOLBARBOX;
}

@addEventGenerateNumberOnForm(dailyReport, r, dailyReport);

filterDailyReportDateFrom 'Дата с' = DATA LOCAL NESTED DATE ();
filterDateFrom (DailyReport r) = date(r) >= filterDailyReportDateFrom() OR (r IS DailyReport AND NOT filterDailyReportDateFrom());      
    
filterDailyReportDateTo 'Дата по' = DATA LOCAL NESTED DATE ();
filterDateTo (DailyReport r) = date(r) <= filterDailyReportDateTo() OR (r IS DailyReport AND NOT filterDailyReportDateTo());

filterDailyReportStock = DATA LOCAL NESTED Stock();
nameFilterDailyReportStock 'Склад' = name(filterDailyReportStock());
filterStock (DailyReport r) = stock(r) == filterDailyReportStock() OR NOT filterDailyReportStock();

background 'Цвет' (DailyReport r)= ABSTRACT CASE COLOR (DailyReport);
background(DailyReport r) += WHEN isDraft(r) THEN RGB(212,255,212);

overShowEdit = ABSTRACT BOOLEAN (DailyReport);
overShowDelete = ABSTRACT BOOLEAN (DailyReport);

overShowEdit (DailyReport r) += isNotApproved(r);
overShowDelete (DailyReport r) += isNotApproved(r);

FORM dailyReports 'Сменные отчеты'
    PROPERTIES () filterDailyReportDateFrom, filterDailyReportDateTo, nameFilterDailyReportStock
    
    OBJECTS r = DailyReport LAST
    PROPERTIES (r) READONLY BACKGROUND background(r) isPosted, isApproved
    PROPERTIES (r) READONLY BACKGROUND background(r) number, series, date, time, nameStock, fromDate, fromTime, toDate, toTime,
                                                     nameEmployeeBefore, nameEmployeeAfter, note
    PROPERTIES (r) approve SHOWIF (isPosted(r) AND isNotApproved(r)), unapprove SHOWIF isApproved(r)
    PROPERTIES (r) NEWSESSION NEW, editr = EDIT SHOWIF overShowEdit(r), deleter = DELETE SHOWIF overShowDelete(r)
    PROPERTIES (r) READONLY PANEL createdNameUser, createdTime, createdHostnameComputer,
                                  postedNameUser, postedTime, postedHostnameComputer,
                                  approvedNameUser, approvedTime, approvedHostnameComputer
    FILTERS filterDateFrom(r), 
            filterDateTo(r),
            filterStock(r)
    
    OBJECTS d = (s = Sku, b = Bin)
    PROPERTIES READONLY name(s), name(b), volumeB(r,s,b), balanceB(r,s,b), volumeIn(r,s,b), quantityIn(r,s,b), volumeOut(r,s,b), quantityOut(r,s,b),
                        volumeA(r,s,b), balanceA(r,s,b), factVolumeA(r,s,b), factBalanceA(r,s,b), debalanceQuantity(r,s,b)
    FILTERS include(r,s,b)
    
    OBJECTS dd = (c = CashRegister, t = PaymentType)
    PROPERTIES READONLY overNpp(c), name(t), sum(r,c,t), quantity(r,c,t), volume(r,c,t)
    FILTERS include(r,c,t)
    
    LIST DailyReport OBJECT r
;
DESIGN dailyReports {
    NEW pane {
        fill = 1;
        NEW filtersBox {                    
            fill = 1;
            NEW topFilters {
                caption = 'Фильтры';
                horizontal = TRUE;
                MOVE PROPERTY(filterDailyReportDateFrom());
                MOVE PROPERTY(filterDailyReportDateTo());
                MOVE PROPERTY(nameFilterDailyReportStock());
        }
            MOVE BOX(r) {
                fill = 2;
            }
        }
        NEW documentDetail {
            fill = 1;
            tabbed = TRUE;
            MOVE BOX(d) {
                caption = 'Итоги по резервуарам';
                PROPERTY (name(s)) { caption = 'Наименование нефтепродукта'; }
                PROPERTY (name(b)) { caption = '№ резервуара'; }
            }
            MOVE BOX(dd) {
                caption = 'Итоги по кассам';
                PROPERTY (overNpp(c)) { caption = '№ кассы'; }
                PROPERTY (name(t)) { caption = 'Тип платежа'; }
            }
            NEW documentHistory {
                caption = 'История';
                MOVE GROUP(created,r);
                MOVE GROUP(posted,r);
                MOVE GROUP(approved,r);
            }
            NEW printTab {
                caption = 'Печатные формы';
                NEW printContainer {
                    caption = 'Печать';
                    horizontal = TRUE;
                }
            }
            NEW actionContainer {
                caption = 'Действия';
                horizontal = TRUE;
            }
        }
    }
    MOVE TOOLBARBOX;
}

@extendFormFilterAccessStock(DailyReport, r, dailyReports, stock, company);

NAVIGATOR {
    stockDashboardNavigator {
        NEW dailyReports;
    }
}

//----------------- Логирование изменений в отчетах ------------------- //

CLASS ReportLog 'Запись лога отчета';
TABLE reportLog(ReportLog);

disableReportLog 'Отключить запись лога отчетов' = DATA BOOLEAN ();
enableReportLog = TRUE AND NOT disableReportLog();

EXTEND FORM options
    PROPERTIES() disableReportLog
;

DESIGN options {
    log {
        MOVE PROPERTY(disableReportLog()) FIRST;
    }
}

reportId = DATA LONG (ReportLog);
INDEX reportId(ReportLog l), l;

numberReport 'Номер документа' = DATA STRING[48] (ReportLog) IN id CHARWIDTH 8 INDEXED;
seriesReport 'Серия документа' = DATA BPSTRING[2] (ReportLog) IN id CHARWIDTH 3 NOFLEX;
dateReport 'Дата документа' = DATA DATE(ReportLog) IN id;
fromDateTime 'Дата/время с' = DATA DATETIME(ReportLog);
toDateTime 'Дата/время по' = DATA DATETIME(ReportLog);

hostnameComputer 'Имя компьютера' = DATA ISTRING[100] (ReportLog) CHARWIDTH 20;
userLogin 'Логин пользователя' = DATA STRING[100] (ReportLog) CHARWIDTH 20;
nameContact 'Имя пользователя' =  DATA STRING[100] (ReportLog) IN id;
dateTimeSession 'Время изменения' = DATA DATETIME (ReportLog) IN id;
dateSession 'Дата изменения' (ReportLog d) = DATE(dateTimeSession(d));
timeSession 'Время изменения' (ReportLog d) = TIME(dateTimeSession(d));

stock = DATA Stock(ReportLog);
nameStock 'Склад'(ReportLog d) = name(stock(d));

@defineLog(ReportLog, 'изменений отчетов', log, dateSession);

CLASS TypeReportChange 'Тип изменения' {
    add 'Добавление',
    delete 'Удаление',
    changeSeriesNumber 'Изменение серии/номера',
    changeStock 'Изменение склада',
    changeFrom 'Изменение даты/времени с',
    changeTo 'Изменение даты/времени по',
    changePosted 'Проведение/Распроведение',
    changeApproved 'Утверждение/Отмена утверждения',
    changeDate 'Изменение даты'
}

typeChange= DATA TypeReportChange (ReportLog);
nameTypeChange 'Тип изменения' (ReportLog l) = staticCaption(typeChange(l)) IN id CHARWIDTH 25;

note 'Примечание' = DATA STRING[255] (ReportLog) CHARWIDTH 30;

WHEN SET(DailyReport r IS DailyReport) IF NOT disableReportLog() DO {
    NEW l = ReportLog { 
        reportId(l) <- LONG(r);
        numberReport(l) <- number(r);
        seriesReport(l) <- series(r);
        dateReport(l) <- date(r);
        fromDateTime(l) <- fromDateTime(r);
        toDateTime(l) <- toDateTime(r);
        stock(l) <- stock(r);
        hostnameComputer(l) <- hostnameCurrentComputer();
        userLogin(l) <- login(currentUser());
        nameContact(l) <- STRING[100](name(currentUser()));
        dateTimeSession(l) <- currentDateTime();
        typeChange(l) <- TypeReportChange.add;
        note(l) <- STRING[255]('Добавлен отчет');
    }
}
WHEN DROPPED(DailyReport r IS DailyReport) IF NOT disableReportLog() DO {
    NEW l = ReportLog {
        reportId(l) <- LONG(PREV(r AS DailyReport));
        numberReport(l) <- PREV(number(r));
        seriesReport(l) <- PREV(series(r));
        dateReport(l) <- PREV(date(r));
        fromDateTime(l) <- PREV(fromDateTime(r));
        toDateTime(l) <- PREV(toDateTime(r));
        stock(l) <- PREV(stock(r));
        hostnameComputer(l) <- hostnameCurrentComputer();
        userLogin(l) <- login(currentUser());
        nameContact(l) <- STRING[100](name(currentUser()));
        dateTimeSession(l) <- currentDateTime();
        typeChange(l) <- TypeReportChange.delete;
        note(l) <- STRING[255]('Удален отчет');
    }
}
WHEN (CHANGED(number(DailyReport r)) OR CHANGED(series(r))) AND r IS DailyReport AND NOT SET(r IS DailyReport) AND NOT disableReportLog() DO {
    NEW l = ReportLog {
        reportId(l) <- LONG(r);
        numberReport(l) <- number(r);
        seriesReport(l) <- series(r);
        dateReport(l) <- date(r);
        fromDateTime(l) <- fromDateTime(r);
        toDateTime(l) <- toDateTime(r);
        stock(l) <- stock(r);
        hostnameComputer(l) <- hostnameCurrentComputer();
        userLogin(l) <- login(currentUser());
        nameContact(l) <- STRING[100](name(currentUser()));
        dateTimeSession(l) <- currentDateTime();
        typeChange(l) <- TypeReportChange.changeSeriesNumber;
        note(l) <- STRING[255]('Предыдущее значение серия/номер: '+(CONCAT '', PREV(series(r)), PREV(number(r))));
    }
}
WHEN CHANGED(stock(DailyReport r)) AND r IS DailyReport AND NOT SET(r IS DailyReport) AND NOT disableReportLog() DO {
    NEW l = ReportLog {
        reportId(l) <- LONG(r);
        numberReport(l) <- number(r);
        seriesReport(l) <- series(r);
        dateReport(l) <- date(r);
        fromDateTime(l) <- fromDateTime(r);
        toDateTime(l) <- toDateTime(r);
        stock(l) <- stock(r);
        hostnameComputer(l) <- hostnameCurrentComputer();
        userLogin(l) <- login(currentUser());
        nameContact(l) <- STRING[100](name(currentUser()));
        dateTimeSession(l) <- currentDateTime();
        typeChange(l) <- TypeReportChange.changeStock;
        note(l) <- STRING[255](CONCAT '','Предыдущее значение: ', name(PREV(stock(r))));
    }
}
WHEN CHANGED(fromDateTime(DailyReport r)) AND r IS DailyReport AND NOT SET(r IS DailyReport) AND NOT disableReportLog() DO {
    NEW l = ReportLog {
        reportId(l) <- LONG(r);
        numberReport(l) <- number(r);
        seriesReport(l) <- series(r);
        dateReport(l) <- date(r);
        fromDateTime(l) <- fromDateTime(r);
        toDateTime(l) <- toDateTime(r);
        stock(l) <- stock(r);
        hostnameComputer(l) <- hostnameCurrentComputer();
        userLogin(l) <- login(currentUser());
        nameContact(l) <- STRING[100](name(currentUser()));
        dateTimeSession(l) <- currentDateTime();
        typeChange(l) <- TypeReportChange.changeFrom;
        note(l) <- STRING[255](CONCAT '','Предыдущее значение: ', STRING(PREV(fromDateTime(r))));
    }
}
WHEN CHANGED(toDateTime(DailyReport r)) AND r IS DailyReport AND NOT SET(r IS DailyReport) AND NOT disableReportLog() DO {
    NEW l = ReportLog {
        reportId(l) <- LONG(r);
        numberReport(l) <- number(r);
        seriesReport(l) <- series(r);
        dateReport(l) <- date(r);
        fromDateTime(l) <- fromDateTime(r);
        toDateTime(l) <- toDateTime(r);
        stock(l) <- stock(r);
        hostnameComputer(l) <- hostnameCurrentComputer();
        userLogin(l) <- login(currentUser());
        nameContact(l) <- STRING[100](name(currentUser()));
        dateTimeSession(l) <- currentDateTime();
        typeChange(l) <- TypeReportChange.changeTo;
        note(l) <- STRING[255](CONCAT '','Предыдущее значение: ', STRING(PREV(toDateTime(r))));
    }
}

WHEN (CHANGED(isPosted(DailyReport r))) AND r IS DailyReport AND NOT disableReportLog() DO {
    NEW l = ReportLog {
        reportId(l) <- LONG(r);
        numberReport(l) <- number(r);
        seriesReport(l) <- series(r);
        dateReport(l) <- date(r);
        fromDateTime(l) <- fromDateTime(r);
        toDateTime(l) <- toDateTime(r);
        stock(l) <- stock(r);
        hostnameComputer(l) <- hostnameCurrentComputer();
        userLogin(l) <- login(currentUser());
        nameContact(l) <- STRING[100](name(currentUser()));
        dateTimeSession(l) <- currentDateTime();
        typeChange(l) <- TypeReportChange.changePosted;
        note(l) <- STRING[255](IF isPosted(r) THEN 'Проведен' ELSE 'Распроведен');
    }
}

WHEN (CHANGED(isApproved(DailyReport r))) AND r IS DailyReport AND NOT disableReportLog() DO {
    NEW l = ReportLog {
        reportId(l) <- LONG(r);
        numberReport(l) <- number(r);
        seriesReport(l) <- series(r);
        dateReport(l) <- date(r);
        fromDateTime(l) <- fromDateTime(r);
        toDateTime(l) <- toDateTime(r);
        stock(l) <- stock(r);
        hostnameComputer(l) <- hostnameCurrentComputer();
        userLogin(l) <- login(currentUser());
        nameContact(l) <- STRING[100](name(currentUser()));
        dateTimeSession(l) <- currentDateTime();
        typeChange(l) <- TypeReportChange.changeApproved;
        note(l) <- STRING[255](IF isApproved(r) THEN 'Утвержден' ELSE 'Отменено утверждение');
    }
}
    
WHEN CHANGED(date(DailyReport r)) AND r IS DailyReport AND NOT SET(r IS DailyReport) AND NOT disableReportLog() DO {
    NEW l = ReportLog {
        reportId(l) <- LONG(r);
        numberReport(l) <- number(r);
        seriesReport(l) <- series(r);
        dateReport(l) <- date(r);
        fromDateTime(l) <- fromDateTime(r);
        toDateTime(l) <- toDateTime(r);
        stock(l) <- stock(r);
        hostnameComputer(l) <- hostnameCurrentComputer();
        userLogin(l) <- login(currentUser());
        nameContact(l) <- STRING[100](name(currentUser()));
        dateTimeSession(l) <- currentDateTime();
        typeChange(l) <- TypeReportChange.changeDate;
        note(l) <- STRING[255]('Предыдущее значение Даты: '+toDateDDMMYYYY(PREV(date(r))));
    }
}

FORM ReportLogs 'Журнал изменения отчетов'
    OBJECTS l = ReportLog
    PROPERTIES(l) READONLY numberReport, seriesReport, dateReport, nameStock, fromDateTime, toDateTime,
                  hostnameComputer, userLogin, dateTimeSession, nameTypeChange, note
;

DESIGN ReportLogs {
    BOX {
        MOVE BOX(l);
        MOVE TOOLBARBOX;        
    }
}

NAVIGATOR {
    logs {
        NEW ReportLogs;
    }
}

EXTEND FORM dailyReports
    OBJECTS l = ReportLog
    PROPERTIES(l) SHOWIF enableReportLog() READONLY numberReport, seriesReport, nameStock, fromDateTime, toDateTime,
                                           hostnameComputer, userLogin, dateTimeSession, nameTypeChange, note
    FILTERS reportId(l) == LONG(r)
;
DESIGN dailyReports {
    documentHistory {
        MOVE BOX(l);
    }
}

index (DailyReport r, Sku s, Bin b, Gun g) = PARTITION SUM 1 IF include(r,s,b,g) ORDER g BY r, s, b;

volumeB (DailyReport r) = GROUP SUM volumeB(r, Sku s, Bin b) IF include(r,s,b);
balanceBTon (DailyReport r) = GROUP SUM balanceBTon(r, Sku s, Bin b) IF include(r,s,b);
volumeIn (DailyReport r) = GROUP SUM volumeIn(r, Sku s, Bin b) IF include(r,s,b);
quantityInTon (DailyReport r) = GROUP SUM quantityInTon(r, Sku s, Bin b) IF include(r,s,b);

volumeCounterB (DailyReport r) = GROUP SUM volumeCounterB(r, Sku s, Bin b, Gun g) IF include(r,s,b,g);
volumeCounterA (DailyReport r) = GROUP SUM volumeCounterA(r, Sku s, Bin b, Gun g) IF include(r,s,b,g);
volumeOutGun (DailyReport r) = GROUP SUM volumeOut(r, Sku s, Bin b, Gun g) IF include(r,s,b,g);
quantityOutGunTon (DailyReport r) = GROUP SUM quantityOutTon(r, Sku s, Bin b, Gun g) IF include(r,s,b,g);
techVolumeOut (DailyReport r) = GROUP SUM techVolumeOut(r, Sku s, Bin b, Gun g) IF include(r,s,b,g);

otherVolumeOut (DailyReport r) = GROUP SUM otherVolumeOut(r, Sku s, Bin b) IF include(r,s,b);
otherQuantityOutTon (DailyReport r) = GROUP SUM otherQuantityOutTon(r, Sku s, Bin b) IF include(r,s,b);
volumeOut (DailyReport r) = GROUP SUM volumeOut(r, Sku s, Bin b) IF include(r,s,b);
quantityOutTon (DailyReport r) = GROUP SUM quantityOutTon(r, Sku s, Bin b) IF include(r,s,b);

factVolumeA (DailyReport r) = GROUP SUM factVolumeA(r, Sku s, Bin b) IF include(r,s,b);
factBalanceATon (DailyReport r) = GROUP SUM factBalanceATon(r, Sku s, Bin b) IF include(r,s,b);
volumeA (DailyReport r) = GROUP SUM volumeA(r, Sku s, Bin b) IF include(r,s,b);
balanceATon (DailyReport r) = GROUP SUM balanceATon(r, Sku s, Bin b) IF include(r,s,b);

FORM dailyReportPrint 'Сменный отчет'
    OBJECTS r = DailyReport PANEL
    PROPERTIES(r) nameStock, fullNameLegalEntityStock, nameEmployeeBefore, nameEmployeeAfter, seriesNumber,
        fromDateTime, toDateTime
    PROPERTIES(r) volumeB, balanceBTon, volumeIn, quantityInTon, volumeCounterB, volumeCounterA, volumeOutGun,
        quantityOutGunTon, techVolumeOut, otherVolumeOut, otherQuantityOutTon, volumeOut, quantityOutTon,
        factVolumeA, factBalanceATon, volumeA, balanceATon

    OBJECTS d = (s = Sku, b = Bin, g = Gun)
    PROPERTIES index(r,s,b,g)
    PROPERTIES //SHOWIF index(r,s,b,g) == 1 
            name(s), 
            volumeB(r,s,b), balanceBTon(r,s,b), 
            volumeIn(r,s,b), quantityInTon(r,s,b)
    PROPERTIES fullNumber(g), 
            volumeCounterB(r,s,b,g), volumeCounterA(r,s,b,g), 
            volumeOut(r,s,b,g), quantityOutTon(r,s,b,g),
            density(r,s,b,g), 
            techVolumeOut(r,s,b,g), 
            errorPercent(r,s,b,g)
    PROPERTIES //SHOWIF index(r,s,b,g) == 1
            otherVolumeOut(r,s,b), otherQuantityOutTon(r,s,b), 
            volumeOut(r,s,b), quantityOutTon(r,s,b), 
            name(b),
            level(r,s,b), waterLevel(r,s,b), 
            volume(r,s,b), waterVolume(r,s,b), 
            fuelVolume(r,s,b), correctedVolume(r,s,b),
            density(r,s,b), correctedDensity(r,s,b),
            temperature(r,s,b), correctedTemperature(r,s,b),
            binVolumeA(r,s,b), binBalanceATon(r,s,b),
            pipeVolumeA(r,s,b), pipeBalanceATon(r,s,b),
            factVolumeA(r,s,b), factBalanceATon(r,s,b),
            volumeA(r,s,b), balanceATon(r,s,b),
            debalanceQuantityTon(r,s,b), allowedDebalanceQuantityTon(r,s,b)
    ORDERS name(s), index(r,s,b,g)
    FILTERS include(r,s,b,g), include(r,s,b)
;

dailyReportPrint 'Сменный отчет (XLSX)' (DailyReport r) {
    PRINT dailyReportPrint OBJECTS r = r XLSX;
} IMAGE 'print.png';

EXTEND FORM dailyReports PROPERTIES dailyReportPrint(r);

DESIGN dailyReports {
    printContainer {
        MOVE PROPERTY(dailyReportPrint(r));
    }
}

fullVolumePercent 'Занято по объёму, %' (Sku sku, Stock st) = round2(currentVolume(sku,st) / binVolume(sku, st)) * 100.0;
backgroundFullVolumePercent (Sku sku, Stock st) = colorFullVolumePercent(fullVolumePercent(sku, st));

FORM stockFuelBalance 'Остатки по АЗС'
    OBJECTS le = LegalEntity PANEL
    PROPERTIES(le) name     
    
    //группировка - товар
    TREE skuTreeGroup skuSg=SkuGroup PARENT parent(skuSg)
    PROPERTIES READONLY order(skuSg), name(skuSg)
    ORDERS order(skuSg), name(skuSg)
    FILTERGROUP skuInactiveSg FILTER 'Активные' active(skuSg) 'F6' DEFAULT

    OBJECTS skuS = Sku
    PROPERTIES(skuS) READONLY name, idBarcode
    PROPERTIES currentBalance(skuS, le), binVolume(skuS), currentVolume(skuS, le)
    ORDERS name(skuS)
    FILTERS isParent(skuSg, skuS) OR skuS IS Sku AND NOT skuSg
    FILTERGROUP skuIsFuels FILTER 'Топливо' isFuel(skuS) DEFAULT
    FILTERGROUP skuBalance
        FILTER 'С остатком' GROUP SUM 1 IF currentBalance(skuS, Stock st11)
        FILTER 'С движением' GROUP SUM 1 IF countLedger(skuS, Stock st11)
       
    TREE skuStockTree skuA = BPSTRING[3], skuStg = StockGroup PARENT parent(skuStg)
    PROPERTIES READONLY VALUE(skuA), name(skuStg)
    ORDERS name(skuStg)
    FILTERS stringEqualsAll(skuA), [GROUP SUM 1 IF isParent(StockGroup sg1, Stock st1) BY sg1, legalEntity(st1)](skuStg, le)

    OBJECTS skuSt1 = Stock
    PROPERTIES READONLY name(skuSt1)
    PROPERTIES (skuS, skuSt1) READONLY currentBalance, currentVolume, binVolume, fullVolumePercent BACKGROUND backgroundFullVolumePercent(skuS, skuSt1)
    ORDERS name(skuSt1)
    FILTERS isParent(skuStg, skuSt1) OR (skuSt1 IS Stock AND NOT skuStg), legalEntity(skuSt1) = le,
        groupType(skuSt1) = groupType(skuSg)

    OBJECTS skuSl = SkuLedger
    PROPERTIES (skuSl) READONLY dateTime, isPosted, description
    PROPERTIES (skuSl) READONLY quantity, volume
    ORDERS dateTime(skuSl) DESC
    FILTERS stock(skuSl) = skuSt1, sku(skuSl) = skuS
    FILTERGROUP skuPostedsl
        FILTER 'Проведен' isPosted(skuSl) DEFAULT
    
    OBJECTS skuStb = (skuSt2 = Stock, skuB = Bin)
    PROPERTIES READONLY name(skuSt2)
    PROPERTIES READONLY name(skuB), volume(skuB)    
    PROPERTIES (skuS, skuB) READONLY currentBalance, currentVolume, fullVolumePercent BACKGROUND backgroundFullVolumePercent(skuS, skuB)
    ORDERS name(skuSt2), name(skuB)
    FILTERS isParent(skuStg, skuSt2) OR (skuSt2 IS Stock AND NOT skuStg), legalEntity(skuSt2) = le, in(skuSt2, skuB),
        groupType(skuSt2) = groupType(skuSg)

    OBJECTS skuBl = BinLedger
    PROPERTIES (skuBl) READONLY dateTime, isPosted, description
    PROPERTIES(skuB, skuBl) READONLY balanceBin, balanceQuantity, balanceVolume//, density
    ORDERS dateTime(skuBl) DESC
    FILTERS inBin(skuBl)==skuB OR outBin(skuBl)==skuB, sku(skuBl)==skuS
    FILTERGROUP skuPostedbl
        FILTER 'Проведен' isPosted(skuBl) DEFAULT

    //группировка склад-резервуар
    TREE binStockTree binA = BPSTRING[3], binStg = StockGroup PARENT parent(binStg)
    PROPERTIES READONLY VALUE(binA), name(binStg)
    ORDERS name(binStg)
    FILTERS stringEqualsAll(binA), [GROUP SUM 1 IF isParent(StockGroup sg1, Stock st1) BY sg1, legalEntity(st1)](binStg, le)

    OBJECTS binStB = (binSt = Stock, binB = Bin)
    PROPERTIES READONLY name(binSt)
    PROPERTIES READONLY name(binB), volume(binB), currentBalance(binB), currentVolume(binB) BACKGROUND backgroundDiffValueBin(binB), fullVolumePercent(binB) BACKGROUND backgroundFullVolumePercent(binB)
    ORDERS name(binSt), name(binB)
    FILTERS isParent(binStg, binSt) OR (binSt IS Stock AND NOT binStg), legalEntity(binSt) = le, in(binSt, binB)

    FILTERGROUP binBalanceBin
        FILTER 'С остатком (резервуар)' currentBalance(binB)
        FILTER 'С движением (резервуар)' OVERRIDE [GROUP MAX BinLedger l1 BY inBin(l1)](binB), [GROUP MAX BinLedger l1 BY outBin(l1)](binB)

    FILTERGROUP binBalanceStock
        FILTER 'С остатком (АЗС)' GROUP SUM 1 IF currentBalance(Sku s, binSt)
        FILTER 'С движением (АЗС)' GROUP SUM 1 IF countLedger(Sku s, binSt)

    TREE binTreeGroup binSg=SkuGroup PARENT parent(binSg)
    PROPERTIES READONLY order(binSg), name(binSg)
    FILTERS groupType(binSg) == groupType(binSt)
    ORDERS order(binSg), name(binSg)
    FILTERGROUP inactiveBinSg FILTER 'Активные' active(binSg) 'F6' DEFAULT

    OBJECTS binS1 = Sku
    PROPERTIES(binS1) READONLY name, idBarcode
    PROPERTIES (binS1, binSt) READONLY currentBalance, currentVolume, binVolume, fullVolumePercent BACKGROUND backgroundFullVolumePercent(binS1, binSt)
    ORDERS name(binS1)
    FILTERS isParent(binSg, binS1) OR binS1 IS Sku AND NOT binSg
    FILTERGROUP binIsFuels2 FILTER 'Топливо' isFuel(binS1) DEFAULT

    OBJECTS binSl = SkuLedger
    PROPERTIES (binSl) READONLY dateTime, isPosted, description
    PROPERTIES (binSl) READONLY quantity, volume
    ORDERS dateTime(binSl) DESC
    FILTERS stock(binSl) = binSt, sku(binSl) = binS1
    FILTERGROUP binPostedsl
        FILTER 'Проведен' isPosted(binSl) DEFAULT

    OBJECTS binS2 = Sku
    PROPERTIES(binS2) READONLY name, idBarcode
    PROPERTIES (binS2, binB) READONLY currentBalance, currentVolume, fullVolumePercent BACKGROUND backgroundFullVolumePercent(binS2, binB)
    ORDERS name(binS2)
    FILTERS isParent(binSg, binS2) OR binS2 IS Sku AND NOT binSg
    FILTERGROUP binIsFuels1 FILTER 'Топливо' isFuel(binS2) DEFAULT

    OBJECTS binBl = BinLedger
    PROPERTIES (binBl) READONLY dateTime, isPosted, description
    PROPERTIES(binB, binBl) READONLY balanceBin, balanceQuantity, balanceVolume//, density
    ORDERS dateTime(binBl) DESC
    FILTERS inBin(binBl)==binB OR outBin(binBl)==binB, sku(binBl)==binS2
    FILTERGROUP binPostedbl
        FILTER 'Проведен' isPosted(binBl) DEFAULT
    
;

DESIGN stockFuelBalance {
    BOX {
        size = (1024, 768);
        MOVE BOX(le);
        NEW tabCont {
            fill = 1;
            tabbed = TRUE;
            NEW skuContainer {
                fill = 1;
                horizontal = TRUE;
                caption = 'Товары';
                NEW skuGroupCont {
                    fill = 1;
                    MOVE BOX(TREE skuTreeGroup) {
                        caption = 'Группы Sku';
                        width = 0;
                    }
                    MOVE BOX(TREE skuStockTree) {
                        caption = 'Группы складов';
                        width = 0;
                    }

                }
                NEW skuItemCont {
                    fill = 3;
                    MOVE BOX(skuS) {
                        fill = 2.5;
                        GRID(skuS) {
                            defaultComponent = TRUE;
                        }
                    }
                    NEW skuSkusTabs {
                        fill = 2.5;
                        tabbed = TRUE;
                        NEW skuskusStocks {
                            caption = 'АЗС';
                            MOVE BOX(skuSt1) {
                                fill = 2;
                                PROPERTY(currentBalance(skuS, skuSt1)) { caption = 'Текущий остаток, кг'; }
                                PROPERTY(currentVolume(skuS, skuSt1));
                                GRID(skuS) {
                                    defaultComponent = TRUE;
                                }
                            }
                            MOVE BOX(skuSl) {
                                PROPERTY(quantity(skuSl)) { caption = 'Кол-во, кг'; }
                            };
                        }

                        NEW skuSkusBins {
                            caption = 'Резервуары';
                            MOVE BOX(skuStb) {
                                fill = 2;
                                PROPERTY(currentBalance(skuS, skuB)) { caption = 'Текущий остаток, кг'; }
                                GRID(skuStb) {
                                    defaultComponent = TRUE;
                                }
                            }
                            MOVE BOX(skuBl){ caption = 'Изменение остатка по резервуарам'; };
                        }
                    }
                }
            }
            NEW binContainer {
                horizontal = TRUE;
                caption = 'Резервуары';
                fill = 1;
                horizontal = TRUE;
                NEW groupCont {
                    fill = 1;
                    MOVE BOX(TREE binStockTree) {
                        caption = 'Группы складов';
                        width = 0;
                    }
                    MOVE BOX(TREE binTreeGroup) {
                        caption = 'Группы Sku';
                        width = 0;
                    }

                }
                NEW itemCont {
                    fill = 3;
                    MOVE BOX(binStB) {
                        fill = 2.5;
                        PROPERTY(name(binB)) {caption = 'Резервуар';}
                        PROPERTY(volume(binB)) { caption = 'Объем резервуара, л'; }
                        PROPERTY(currentBalance(binB)) { caption = 'Текущий остаток в резервуаре, кг'; }
                        PROPERTY(currentVolume(binB)) { caption = 'Текущий объем в резервуаре, л'; }
                        GRID(binStB) {
                            defaultComponent = TRUE;
                        }
                    }
                    NEW binSkusTabs {
                        fill = 2.5;
                        tabbed = TRUE;
                        NEW skusStocks {
                            caption = 'АЗС';
                            MOVE BOX(binS1) {
                                fill = 2;
                                PROPERTY(currentBalance(binS1, binSt)) { caption = 'Текущий остаток, кг'; }
                                GRID(binS2) {
                                    defaultComponent = TRUE;
                                }
                            }
                            MOVE BOX(binSl) {
                                PROPERTY(quantity(binSl)) { caption = 'Кол-во, кг'; }
                            };
                        }

                        NEW skusBins {
                            caption = 'Резервуары';
                            MOVE BOX(binS2) {
                                fill = 2;
                                PROPERTY(currentBalance(binS2, binB)) { caption = 'Текущий остаток, кг'; }
                                PROPERTY(balanceBin(binB, binBl)) { caption = 'Резервуар (из/в)'; }
                                PROPERTY(balanceQuantity(binB, binBl)) { caption = 'Кол-во, кг'; }
                                GRID(binS2) {
                                    defaultComponent = TRUE;
                                }
                            }
                            MOVE BOX(binBl) { caption = 'Изменение остатка по резервуарам'; };
                        }
                    }
                }
            }
        }
        MOVE TOOLBARBOX;
    }
}

NAVIGATOR {
    WMSReports {
        NEW stockFuelBalance;
    }
}