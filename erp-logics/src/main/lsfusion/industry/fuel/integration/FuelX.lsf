MODULE FuelX;

REQUIRE PurchaseInvoiceAcceptanceRu, PurchaseShipmentBinLedgerFuel, SaleInvoiceConsignmentRu, SaleShipmentBinLedgerFuel, StockReportsFuel;

@defineLogRotate(FuelX, 5, weekly);

url 'URL' = DATA STRING();
portDataCenterX 'Порт для DataCenterX' = DATA INTEGER();
portFuelX 'Порт для FuelX' = DATA INTEGER();
portCafeX 'Порт для CafeX' = DATA INTEGER();

EXTEND FORM integrationData
    PROPERTIES() url, portDataCenterX, portFuelX, portCafeX
;

DESIGN integrationData {
    pane {
        NEW fuelX {
            caption = 'FuelX';
            MOVE PROPERTY(url());
            MOVE PROPERTY(portDataCenterX());
            MOVE PROPERTY(portFuelX());
            MOVE PROPERTY(portCafeX());
        }
    }
}

//http://fuelx.online:7004/setdeliverinvoices json
//Передать в DataCenterX список накладных на поставку топлива

dateFuelX 'Время выгрузки FuelX' = DATA DATETIME (Purchase.Invoice);
toFuelX = DATA LOCAL NESTED BOOLEAN (Purchase.Invoice);

GROUP license EXTID 'License';

FORM setDeliverInvoices
    OBJECTS s = Stock PANEL
    PROPERTIES IN license nameLegalEntity(s) EXTID 'Owner',
               name(s) EXTID 'ObjectName',
               software = 'FuelX' IF s IS Stock EXTID 'Software'
    
    OBJECTS d = Purchase.InvoiceDetail EXTID 'DeliverInvoices'
    FILTERS customerStock(d) == s AND toFuelX(invoice(d)) AND isFuel(sku(d))
    PROPERTIES IN base seriesNumber(d) EXTID 'InvoiceNumber',
               nameForwarder = nameForwarder[Acceptance](invoice(d)) EXTID 'DriverName',
               sidTruck = sidTruck(invoice(d)) EXTID 'CarNumber',
               date = toChar((OVERRIDE shipmentDateTime(d), dateTime(d)), 'yyyy-MM-ddThh24:mi:ss') EXTID 'Date',
               idSku(d) EXTID 'GradeCode',
               nameInBin(d) EXTID 'TankName',
               volume(d) EXTID 'Volume',
               temperature(d) EXTID 'Temperature',
               density(d) EXTID 'Density',
               quantity(d) EXTID 'Mass'
;

setDeliverInvoices () {
    IF NOT url() THEN {
        MESSAGE 'Не задан URL' NOWAIT;
        RETURN;
    }
    IF NOT portFuelX() THEN {
        MESSAGE 'Не задан порт для FuelX' NOWAIT;
        RETURN;
    }
    FOR [GROUP SUM 1 IF toFuelX(Purchase.Invoice i) BY customerStock(i)](Stock stock) DO NEWSESSION {
        LOCAL response = STRING();
        LOCAL file = FILE();
        TRY {
            EXPORT setDeliverInvoices OBJECTS s = stock JSON;
            fileToString(exportFile(),'UTF-8');
            logToFile('FuelX', 'POST: ' + url() + ':' + portFuelX() + '/setdeliverinvoices' + '\n' + resultString());
            EXTERNAL HTTP POST url() + ':' + portFuelX() + '/setdeliverinvoices' PARAMS exportFile() TO response;
            file() <- FILE(decode(replace(response(),'"',''), 'base64'));
            fileToString(file(), 'UTF-8');
            logToFile('FuelX', 'Response: ' + resultString());
            
            LOCAL ok = BOOLEAN ();
            IMPORT JSON FROM file() TO() ok = 'OK';
            dateFuelX(Purchase.Invoice i) <- currentDateTime() WHERE customerStock(i) == stock AND toFuelX(i) AND ok();
            APPLY;
        } CATCH {
            logToFile('FuelX',  CONCAT '\n', 'ERROR:', messageCaughtException());
            logToFile('FuelX', response());
            MESSAGE messageCaughtException() NOWAIT;
        }
    }
}

exportPurchaseFuelX 'Выгрузить в FuelX' (Purchase.Invoice i) {
    toFuelX(i) <- TRUE;
    setDeliverInvoices();
    toFuelX(Purchase.Invoice in) <- NULL;
}

isFuelXPurchase(Purchase.Invoice invoice) = GROUP SUM 1 IF isFuel(sku(Purchase.InvoiceDetail d)) BY invoice(d);

EXTEND FORM Purchase.invoices 
    PROPERTIES(i) SHOWIF isFuelXPurchase(i) exportPurchaseFuelX
    PROPERTIES(i) SHOWIF isFuelXPurchase(i) READONLY PANEL dateFuelX
;

DESIGN Purchase.invoices {
    actionContainer {
        NEW fuelX {
            caption = 'FuelX';
            MOVE PROPERTY (exportPurchaseFuelX(i));
            MOVE PROPERTY (dateFuelX(i));
        }
    }    
}

//http://fuelx.online:7004/setdraininvoices json
//Передать в DataCenterX список накладных на откачку резервуара

dateFuelX 'Время выгрузки FuelX' = DATA DATETIME (Sale.Invoice);
toFuelX = DATA LOCAL NESTED BOOLEAN (Sale.Invoice);

FORM setDrainInvoices
    OBJECTS s = Stock PANEL
    PROPERTIES IN license nameLegalEntity(s) EXTID 'Owner',
               name(s) EXTID 'ObjectName',
               software = 'FuelX' IF s IS Stock EXTID 'Software'
    
    OBJECTS d = Sale.InvoiceDetail EXTID 'DrainInvoices'
    FILTERS supplierStock(d) == s AND toFuelX(invoice(d)) AND isFuel(sku(d))
    PROPERTIES IN base seriesNumber(d) EXTID 'InvoiceNumber',
               nameForwarder = nameForwarder(invoice(d)) EXTID 'DriverName',
               vehicleNumber = vehicleNumber(invoice(d)) EXTID 'CarNumber',
               date = toChar((OVERRIDE shipmentDateTime(d), dateTime(d)), 'yyyy-MM-ddThh24:mi:ss') EXTID 'Date',
               idSku(d) EXTID 'GradeCode',
               nameOutBin(d) EXTID 'TankName',
               quantity(d) EXTID 'Mass'
;

setDrainInvoices () {
    IF NOT url() THEN {
        MESSAGE 'Не задан URL' NOWAIT;
        RETURN;
    }
    IF NOT portFuelX() THEN {
        MESSAGE 'Не задан порт для FuelX' NOWAIT;
        RETURN;
    }
    FOR [GROUP SUM 1 IF toFuelX(Sale.Invoice i) BY supplierStock(i)](Stock stock) DO NEWSESSION {
        LOCAL response = STRING();
        LOCAL file = FILE();
        TRY {
            EXPORT setDrainInvoices OBJECTS s = stock JSON;
            fileToString(exportFile(),'UTF-8');
            logToFile('FuelX', 'POST: ' + url() + ':' + portFuelX() + '/setdraininvoices' + '\n' + resultString());
            EXTERNAL HTTP POST url() + ':' + portFuelX() + '/setdraininvoices' PARAMS exportFile() TO response;
            file() <- FILE(decode(replace(response(),'"',''), 'base64'));
            fileToString(file(), 'UTF-8');
            logToFile('FuelX', 'Response: ' + resultString());
            
            LOCAL ok = BOOLEAN ();
            IMPORT JSON FROM file() TO() ok = 'OK';
            dateFuelX(Sale.Invoice i) <- currentDateTime() WHERE supplierStock(i) == stock AND toFuelX(i) AND ok();
            APPLY;
        } CATCH {
            logToFile('FuelX',  CONCAT '\n', 'ERROR:', messageCaughtException());
            logToFile('FuelX', response());
            MESSAGE messageCaughtException() NOWAIT;
        }
    }
}

exportSaleFuelX 'Выгрузить в FuelX' (Sale.Invoice i) {
    toFuelX(i) <- TRUE;
    setDrainInvoices();
    toFuelX(Sale.Invoice in) <- NULL;
}

isFuelXSale(Sale.Invoice invoice) = GROUP SUM 1 IF isFuel(sku(Sale.InvoiceDetail d)) BY invoice(d);

EXTEND FORM Sale.invoices 
    PROPERTIES(i) SHOWIF isFuelXSale(i) exportSaleFuelX
    PROPERTIES(i) SHOWIF isFuelXSale(i) READONLY PANEL dateFuelX
;

DESIGN Sale.invoices {
    actionContainer {
        NEW fuelX {
            caption = 'FuelX';
            MOVE PROPERTY (exportSaleFuelX(i));
            MOVE PROPERTY (dateFuelX(i));
        }
    }    
}
