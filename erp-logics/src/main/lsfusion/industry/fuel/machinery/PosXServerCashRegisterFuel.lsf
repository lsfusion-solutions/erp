MODULE PosXServerCashRegisterFuel;

REQUIRE PosXServerCashRegister, ItemFuel, ZReportFuel, DateSkuBinLedgerFuel;

NAMESPACE PosXServer;


extraLoad(Sku s)+=TRUE IF isCharge(s); //для выгрузки услуг

fsrlFuel(Sku s) += isFuel(s); //Топливо

overReceiveFromPosXServer(CashRegister cr, DATE from, DATE to) +{
    returnExchange(groupCashRegister(cr)) <- NULL;
    exchangePosX(groupCashRegister(cr),'SELECT tdate, line, param, val FROM dbo.tp_attrib WHERE tdate BETWEEN \'' + toDateISO(from) + '\' AND \'' + toDateISO(to) + ' 23:59:59\' AND id_cassa = ' + npp(cr)); 
    IF NOT returnExchange(groupCashRegister(cr)) THEN {
        LOCAL tdate = DATETIME (INTEGER);
        LOCAL line = INTEGER (INTEGER);
        LOCAL param = STRING[50] (INTEGER);
        LOCAL val = STRING[800] (INTEGER);
        LOCAL idR = STRING[100] (INTEGER);
        LOCAL id = STRING[100] (INTEGER);
        IMPORT FROM exportFile() TO tdate, line, param, val;
        idR(INTEGER i) <- (CONCAT '_', npp(cr), tdate(i)) IF imported(i);
        id(INTEGER i) <- (CONCAT '_', npp(cr), tdate(i), line(i)) IF imported(i);
        FOR [GROUP SUM 1 IF imported(INTEGER i) BY idR(i), id(i)](STRING[100] idR, STRING[100] id) AND receipt(ReceiptDetail d) = receipt(idR) AND id(d) = id AND isFuel(sku(d)) DO {
            volume(d) <- quantity(d);
            quantity(d) <- NUMERIC[16,5](GROUP MAX val(INTEGER i) IF param(i) == 'fp_mass' AND idR(i) == idR AND id(i) == id);
            density(d) <- NUMERIC[9,5](GROUP MAX val(INTEGER i) IF param(i) == 'fp_density' AND idR(i) == idR AND id(i) == id);
            bin(d) <- GROUP MAX Bin b IF departmentStore(d)==stock(b) AND number(b) == INTEGER(GROUP MAX val(INTEGER i) IF param(i) == 'fp_tankNumber' AND idR(i) == idR AND id(i) == id);
            pump(d) <- GROUP MAX Pump p IF departmentStore(d) == stock(p) AND number(p) == INTEGER(GROUP MAX val(INTEGER i) IF param(i) == 'fp_trk' AND idR(i) == idR AND id(i) == id);
            gun(d) <- GROUP MAX Gun g IF departmentStore(d) == stock(g) AND bin(g) == bin(d) AND pump(g) == pump(d) AND number(g) == INTEGER(GROUP MAX val(INTEGER i) IF param(i) == 'fp_nozzleNumber' AND idR(i) == idR AND id(i) == id);
        }
    }
}

overReceiveFromPosXServer(CashRegister cr, RequestExchange re) +{
    returnExchange(groupCashRegister(cr)) <- NULL;
    exchangePosX(groupCashRegister(cr),'SELECT tdate, line, param, val FROM dbo.tp_attrib WHERE tdate BETWEEN \'' + toDateISO(dateFrom(re)) + '\' AND \'' + toDateISO(dateTo(re)) + ' 23:59:59\' AND id_cassa = ' + npp(cr)); 
    IF NOT returnExchange(groupCashRegister(cr)) THEN {
        LOCAL tdate = DATETIME (INTEGER);
        LOCAL line = INTEGER (INTEGER);
        LOCAL param = STRING[50] (INTEGER);
        LOCAL val = STRING[800] (INTEGER);
        LOCAL idR = STRING[100] (INTEGER);
        LOCAL id = STRING[100] (INTEGER);
        IMPORT FROM exportFile() TO tdate, line, param, val;
        idR(INTEGER i) <- (CONCAT '_', npp(cr), tdate(i)) IF imported(i);
        id(INTEGER i) <- (CONCAT '_', npp(cr), tdate(i), line(i)) IF imported(i);
        FOR [GROUP SUM 1 IF imported(INTEGER i) BY idR(i), id(i)](STRING[100] idR, STRING[100] id) AND receipt(ReceiptDetail d) = receipt(idR) AND id(d) = id AND isFuel(sku(d)) DO {
            volume(d) <- quantity(d);
            quantity(d) <- NUMERIC[16,5](GROUP MAX val(INTEGER i) IF param(i) == 'fp_mass' AND idR(i) == idR AND id(i) == id);
            density(d) <- NUMERIC[9,5](GROUP MAX val(INTEGER i) IF param(i) == 'fp_density' AND idR(i) == idR AND id(i) == id);
            pump(d) <- GROUP MAX Pump p IF departmentStore(d) == stock(p) AND number(p) == INTEGER(GROUP MAX val(INTEGER i) IF param(i) == 'fp_trk' AND idR(i) == idR AND id(i) == id);
            gun(d) <- GROUP MAX Gun g IF departmentStore(d) == stock(g) AND bin(g) == bin(d) AND pump(g) == pump(d) AND number(g) == INTEGER(GROUP MAX val(INTEGER i) IF param(i) == 'fp_nozzleNumber' AND idR(i) == idR AND id(i) == id);
        }
    } ELSE {
        addMachineryError(re, System.messageCaughtException());
        countMachineryErrors() <- countMachineryErrors() (+) 1;
    }
}