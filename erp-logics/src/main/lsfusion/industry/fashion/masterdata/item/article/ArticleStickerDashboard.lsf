MODULE ArticleStickerDashboard;

REQUIRE ItemSizeMapping, ArticleTranslateDashboard, Label, StockArticle;

NAMESPACE Item;

// Обработка статуса

completedSticker 'Обработан' = DATA BOOLEAN (Item);
notCompletedSticker 'Не обработан' (article) = GROUP SUM 1 IF Item i IS Item AND NOT completedSticker(i) BY article(i);
completedSticker 'Обработан' = Article a IS Article AND NOT notCompletedSticker(a);

changeCompletedSticker (Article article)  { 
    INPUT b = BOOLEAN DO
        completedSticker(Item item) <- b WHERE article(item) == article; 
}

// Подсчет артикулов с незаполненными стикерами для групп
countNotStickerArticles 'Не обработано (к-во)' (group) = GROUP SUM 1 IF completedTranslate(Article article) AND NOT completedSticker(article) AND ((inPurchaseInvoices(currentUser()) AND quantityInvoiceDetail(article, currentUser())) OR NOT inPurchaseInvoices(currentUser())) BY itemGroup(article);
recCountNotStickerArticles 'Не обработано (к-во)' (ItemGroup parent) = GROUP SUM countNotStickerArticles(ItemGroup child) IF isParent(child, parent);

// ----------------- Типы ценников ----------------- //

defaultLabelType (Sku sku) = GROUP MAX LabelType type IF in(type, sku);
nameLabelType 'Тип ценника' (Sku sku)= name(defaultLabelType(sku)) CHARWIDTH 15;

defaultLabelType (article) = GROUP MAX LabelType type IF in(type, Item sku) BY article(sku);
nameLabelType 'Тип ценника' (Article article)= name(defaultLabelType(article)) CHARWIDTH 15;

changeDefaultLabelType(Article article)  { 
    DIALOG labelTypes OBJECTS l INPUT NULL DO
        dataIn(LabelType t, Item sku) <- t == l WHERE article(sku) == article;
}

changeDefaultLabelType(Sku sku)  { 
    DIALOG labelTypes OBJECTS l INPUT NULL DO
        dataIn(LabelType t, sku) <- t == l;
}

// Не заполнены атрибуты
nullSticker 'Без атрибутов' (Item item) =  item IS Item AND NOT defaultLabelType(item) AND NOT completedSticker(item);
nullSticker 'Без атрибутов' (article) = GROUP SUM 1 IF Item item IS Item AND NOT defaultLabelType(item) AND NOT completedSticker(item) BY article(item);

filterStickerInvoice= DATA LOCAL Purchase.Invoice ();
descriptionFilterStickerInvoice 'Накладная' = description(filterStickerInvoice());

// отм. для групп товаров
TABLE userItemGroup(User, ItemGroup);
dataIn 'Отм' = DATA BOOLEAN (User, ItemGroup);

levelParent (User user, ItemGroup itemGroup) = GROUP
                                                               MIN level(itemGroup, ItemGroup parent) IF dataIn(user, parent) MATERIALIZED;

inParent (User user, ItemGroup itemGroup) = TRUE IF levelParent (user, itemGroup) MATERIALIZED;

in 'Отм' (User user, ItemGroup itemGroup) = OVERRIDE
    dataIn(user, itemGroup),
    inParent (user, itemGroup);

in 'Отм' (User user, Article article) = inParent(user, itemGroup(article));

itemGroups (User user) = GROUP SUM 1 IF in(user, ItemGroup itemGroup);
    
//currentUser
inCurrentUser 'Отм.' (ItemGroup itemGroup) = in(currentUser(), itemGroup);
inCurrentUser 'Отм.' (Article article) = in(currentUser(), article); 
itemGroupsCurrentUser () = itemGroups(currentUser());

checkInCurrentUser(ItemGroup itemGroup)  { 
    INPUT b = BOOLEAN DO    
        dataIn(User user, itemGroup) <- b WHERE user == currentUser();    
}

inPurchase = GROUP SUM 1 IF inPurchase(invoice(Purchase.InvoiceDetail d), currentUser()) BY sku(d); 

FORM articleStickerDashboard 'Стикеровка'

    PROPERTIES() multipleStores

    OBJECTS u = User PANEL 
    FILTERS u == currentUser()
    
    PROPERTIES seriesNumberDateInvoicesCurrentUser() READONLY, selectPurchaseInvoicesCurrentUser()
    
    TREE groupTree g=ItemGroup PARENT parent(g)
    PROPERTIES READONLY order(g), name(g), recCountNotStickerArticles(g)
    PROPERTIES(u, g) in      
    ORDERS order(g), name(g)
    FILTERS active(g)
    FILTERGROUP notCustomsFilters
        FILTER 'Не обработан' recCountNotStickerArticles(g) 'F6'          
    
    OBJECTS dep=DepartmentStore PANEL     
    PROPERTIES(dep) name SELECTOR SHOWIF singleStore()

    TREE stockTree b = BPSTRING[3], sg = StockGroup PARENT parent(sg), ts = DepartmentStore
    PROPERTIES READONLY SHOWIF multipleStores() VALUE(b), sgTreeName = name(sg), tsTreeName = name(ts)
    ORDERS sgTreeName
    FILTERS stringEqualsAll(b),
            stockGroup(ts) == sg,
            isCompany(ts)                  
                  
    OBJECTS sta=(a=Article, st=DepartmentStore)   
    PROPERTIES(a) READONLY id, nameBrand, canonicalNameItemGroup, caption, 
                   composition, nameUOM
    PROPERTIES READONLY name(st) SHOWIF multipleStores()                  
    PROPERTIES(a) BACKGROUND hintEditableBackground() nameCollection, nameManufacturer, nameLabelType ON CHANGE changeDefaultLabelType(a), compositionSticker, 
                   servicePeriod, guaranteePeriod, additionalDescription, manual,
                   extraInformation, safetyInformation, warningInformation, notRefundable, washingRequired, isEAC
                   
    PROPERTIES(a) completedSticker ON CHANGE changeCompletedSticker(a)
    PROPERTIES(a) NEWSESSION EDIT
    FILTERS       IF multipleStores() THEN 
                    st == ts AND sg IS StockGroup OR isParent(sg, st) AND NOT ts OR st IS DepartmentStore AND NOT sg AND NOT ts
                  ELSE 
                    st == dep,
                  isCompany(st) OR NOT multipleStores()    

    FILTERGROUP attributesFilters
        FILTER 'Без атрибутов' nullSticker(a) 'F7'
        FILTER 'С атрибутами' NOT nullSticker(a) 'F6'
             
    FILTERGROUP groupFilters
        FILTER 'Переведены' completedTranslate(a) 'F10' DEFAULT

    FILTERS isParent(g, a) AND NOT itemGroupsCurrentUser() OR
            inCurrentUser(a) AND itemGroupsCurrentUser()    

    FILTERGROUP translateFilters
        FILTER 'Не обработан' notCompletedSticker(a) 'F9' DEFAULT
        FILTER 'Обработан' completedSticker(a) 'F8'             

    OBJECTS i=Item
    PROPERTIES(i) READONLY descriptionDefaultPurchaseInvoice, idBarcode, id, 
                           originalCaption, originalComposition, 
                           caption, composition, nameUOM, nameColor, nameSize,
                           image PANEL

    PROPERTIES(i) BACKGROUND hintEditableBackground() originalSize, nameLabelType ON CHANGE changeDefaultLabelType(i), compositionSticker, 
                   sizeHeight, sizeChest, sizeUnderChest, sizeCupBra,
                   sizeHips, sizeWaist, sizeNeck, sizeHead, sizeHand, footLength, legLength
    ORDERS id(i)
                   
    PROPERTIES completedSticker(i)
    PROPERTIES(i) NEWSESSION EDIT SHOWIF enableEditing(i)
    
    FILTERGROUP attributesFilters2
        FILTER 'Без атрибутов' nullSticker(i) 'F7'
        FILTER 'С атрибутами' NOT nullSticker(i) 'F6'
             
    FILTERGROUP itemFilters
        FILTER 'По накладным' inPurchase(i) 'F7'
        FILTER 'По артикулам' article(i) == a 'F4' DEFAULT
        FILTER 'По группам (не обработан)' isParent(g,i) AND completedTranslate(i) AND NOT completedSticker(i) 'shift F4'
        FILTER 'По группам ' isParent(g,i) 'ctrl F4' 
        
    FILTERS quantityInvoiceDetail(a, currentUser()) OR (a IS Article AND NOT countInvoices(currentUser()))        
;

DESIGN articleStickerDashboard {
    REMOVE BOX(u);
    NEW top {      
        horizontal = TRUE;
        NEW filter {
            caption = 'Фильтр';
            horizontal = TRUE;
            MOVE PROPERTY(seriesNumberDateInvoicesCurrentUser());
            MOVE PROPERTY(selectPurchaseInvoicesCurrentUser());
        }
        NEW depContainer{
            caption = 'Отдел магазина для проверки ценников';
            horizontal = TRUE;
            MOVE PROPERTY (multipleStores());            
            MOVE BOX(dep);
        }
    }
    NEW pane {
        type = SPLITH;
        fill = 1;
        NEW tree3{
            type = SPLITV;
            fill = 1;
            NEW boxContainer{
                fill = 1;
                type = SPLITV;
                MOVE BOX(TREE stockTree) { caption = 'Склады'; }            
                MOVE BOX(TREE groupTree);                
            }
            NEW imageBox3 {
                caption = 'Изображение';
                fill = 1;
                MOVE PROPERTY(image(i)) {                           
                    caption = '';
                    fill = 1;
                }
            }
        }
        NEW row411 {
            fill = 3;
            type = SPLITV;
            NEW row4111 {
                fill = 2;                      
                MOVE BOX(sta) {
                    defaultComponent = TRUE;                                      
                }
            }    
            MOVE BOX(i);
        }
    }

    PROPERTY(id(a)) { charWidth = 6;}
    PROPERTY(servicePeriod(a)) { valueSize = ( 150, 40);}
    PROPERTY(guaranteePeriod(a)) { valueSize = ( 150, 40);}
    PROPERTY(additionalDescription(a)) { valueSize = ( 150, 40);}
    PROPERTY(manual(a)) { valueSize = ( 150, 40);}
    PROPERTY(extraInformation(a)) { valueSize = ( 150, 40);}
    PROPERTY(safetyInformation(a)) { valueSize = ( 150, 40);}
    PROPERTY(warningInformation(a)) { valueSize = ( 150, 40);}            
    PROPERTY(compositionSticker(a)) {charWidth = 30;}

    PROPERTY(compositionSticker(i)) {charWidth = 30;}
    
    PROPERTY(id(i)) { charWidth = 6;}
    PROPERTY(originalCaption(i)) { charWidth = 30;}
    PROPERTY(caption(i)) { charWidth = 20;}
    PROPERTY(originalCaption(i)) { charWidth = 20;}
    PROPERTY(nameSize(i)) { charWidth = 10;}

    MOVE TOOLBARBOX;
}

// ----- Подтверждение всех артикулов --------- //

completeArticleStickerDashboard 'Подтвердить все'()  {   
    LOCAL k = INTEGER ();
    k() <- 0;
    
    FOR [ FILTER articleStickerDashboard.sta](Article article, DepartmentStore dep) AND nullSticker(article) DO{   
        k() <- k() + 1;              
    }    
    IF k() > 0 THEN {
        MESSAGE 'Для артикула не задан тип ценника ('+k()+' шт.)';
    } ELSE {
        FOR [ FILTER articleStickerDashboard.sta](Article article, DepartmentStore dep) DO {
            completedSticker(Item item) <- TRUE WHERE article(item) == article;
        }
    }      
} TOOLBAR CONFIRM;

EXTEND FORM  articleStickerDashboard
    PROPERTIES() DRAW sta completeArticleStickerDashboard 
;

// --------- Заполнение по матрице соответствия      
overMapStickerItem  ABSTRACT LIST ( );

inMap ()  { 
    inMap(Item i) <- [ FILTER articleStickerDashboard.i](i);
}

mapStickerItem 'Заполнить атрибуты для всех по соответствию'()  { 
    inMap();
    mapSizeHeight();
    mapSizeChest();
    mapSizeUnderChest();
    mapSizeCupBra();
    mapSizeHips(); 
    mapSizeWaist();
    mapSizeNeck();
    mapSizeHead();
    mapFootLength();
    mapInsoleLength();
    mapSizeHand();
    mapLegLength();
    overMapStickerItem(); 
} CONFIRM TOOLBAR;

EXTEND FORM articleStickerDashboard
    PROPERTIES mapStickerItem() DRAW i;

mapAllSizeHeightStickerItem 'Заполнить рост для всех по соответствию'()  { 
    inMap();
    mapSizeHeight();
} ASON CONTEXTMENU sizeHeight[Item];

mapAllSizeChestStickerItem 'Заполнить обхват груди для всех по соответствию'()  { 
    inMap();
    mapSizeChest();
} ASON CONTEXTMENU sizeChest[Item];

mapAllSizeUnderChestStickerItem 'Заполнить обхват под грудью для всех по соответствию'()  { 
   inMap();
   mapSizeUnderChest();
} ASON CONTEXTMENU sizeUnderChest[Item];

mapAllSizeCupBraStickerItem 'Заполнить размер чашечки для всех по соответствию'()  { 
   inMap();
   mapSizeCupBra();
} ASON CONTEXTMENU sizeCupBra[Item];

mapAllSizeHipsStickerItem 'Заполнить обхват бедер для всех по соответствию'()  { 
   inMap();
   mapSizeHips();
} ASON CONTEXTMENU sizeHips[Item];     

mapAllSizeWaistStickerItem 'Заполнить обхват талии для всех по соответствию'()  { 
   inMap();
   mapSizeWaist();
} ASON CONTEXTMENU sizeWaist[Item];  
  
mapAllSizeNeckStickerItem 'Заполнить обхват шеи для всех по соответствию'()  { 
   inMap();
   mapSizeNeck();
} ASON CONTEXTMENU sizeNeck[Item];      

mapAllSizeHeadStickerItem 'Заполнить обхват головы для всех по соответствию'()  { 
   inMap();
   mapSizeHead();
} ASON CONTEXTMENU sizeHead[Item];  

mapAllSizeHandStickerItem 'Заполнить обхват кисти для всех по соответствию'()  { 
   inMap();
   mapSizeHand();
} ASON CONTEXTMENU sizeHand[Item];  
                            
mapAllFootLengthStickerItem 'Заполнить длину стопы для всех по соответствию'()  { 
   inMap();
   mapFootLength();
} ASON CONTEXTMENU footLength[Item];  

mapAllIsEACArticle 'Заполнить "EAC" для всех по наименованию'()  { 
   FOR [ FILTER articleStickerDashboard.sta](Article a, DepartmentStore dep)  DO 
       mapIsEAC(a);
} ASON CONTEXTMENU isEAC[Article]; 

mapAllLegLengthItem 'Заполнить длину ноги по внутр.поверхности для всех по соответствию'()  { 
   inMap(); 
   mapLegLength();
} ASON CONTEXTMENU legLength[Item];
                            
NAVIGATOR {
    customsDashboardNavigator {
        NEW articleStickerDashboard;
    }
}

// ------------------------------------- Печать примера ценника --------------------------- //
     
inLabel 'Отм.' = DATA LOCAL BOOLEAN (Article, DepartmentStore); 
EXTEND FORM articleStickerDashboard
    PROPERTIES(a, st) inLabel BEFORE id(a)
    
    FILTERGROUP inArticleFilter
        FILTER 'Отмеченные' inLabel(a, st) 'F11'        
;

countInLabelArticles 'Кол-во отм.' = GROUP SUM 1 IF inLabel(Article a, DepartmentStore st);
countLabelTypeArticles  = GROUP SUM 1 IF [ GROUP SUM 1 IF inLabel(Article a, DepartmentStore st) BY defaultLabelType(a)](LabelType type);
countInDepartmentStores (DepartmentStore st) = GROUP SUM 1 IF inLabel(Article a, st);

dataLastBatch = ABSTRACT Batch (Sku);

createSnapshotPricing 'Пример ценника'(Article article, DepartmentStore dep)  { 
    IF countInLabelArticles() THEN {
        IF countLabelTypeArticles() == 1 THEN {
            FOR countInDepartmentStores(DepartmentStore st) NEW t = LabelTransaction DO {          
                departmentStore(t) <- st;
                labelType(t) <- (GROUP MAX defaultLabelType(Article a) IF inLabel(a, DepartmentStore dst));
                FOR article (Item item) == Article a AND inLabel(a, st)  NEW d = LabelTransactionDetail DO {
                        labelTransaction(d) <- t;
                        sku(d) <- item;
                        batch(d) <- OVERRIDE dataLastBatch(item), lastBatch(item);
        
                        name(d) <- name(item);
                        documentQuantity(d) <- 1.0; 
                        createAttribute(d);
                }
                DIALOG customLabelTransaction OBJECTS l = t NOMANAGESESSION DO {
                    print(t);
                }
                DELETE t;                
            }
        } ELSE {
            MESSAGE 'Отмечены артикулы с разными типами ценников';
        }
    } ELSE {
        NEW t = LabelTransaction {          // [GROUP MAX supplierUserInvoiceDetail(d) BY declarationUserInvoiceDetail(d)](chosenObject('d'))
            departmentStore(t) <- dep;
            labelType(t) <- defaultLabelType(article);
            FOR article (Item item) ==article  NEW d = LabelTransactionDetail DO {
                    labelTransaction(d) <- t;
                    sku(d) <- item;
                    batch(d) <- OVERRIDE dataLastBatch(item), lastBatch(item);
        
                    name(d) <- name(item);
                    documentQuantity(d) <- 1.0; 
                    createAttribute(d);
            }
            DIALOG customLabelTransaction OBJECTS l = t NOMANAGESESSION DO
                print(t);
            DELETE t;            
        }  
    }
} TOOLBAR;

EXTEND FORM articleStickerDashboard
    PROPERTIES(a, st) createSnapshotPricing 
    PROPERTIES(a) READONLY AFTER id(a) idItemGroup
    PROPERTIES(i) READONLY AFTER id(i) idItemGroup
;