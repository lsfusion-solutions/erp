MODULE SaleReturnInvoiceTextile;

REQUIRE SaleReturnInvoice, SaleInvoiceTextile;

PRIORITY Sale;

NAMESPACE SaleReturn;


@defineDocumentHeaderProperty (userInvoice, packets, 'Пакеты');

@deriveDocumentOperationProperty(UserInvoice, packets);

EXTEND FORM userInvoice
    PROPERTIES (i) READONLY packets
;

DESIGN userInvoice {
    headerExtraParams {
        NEW headerPackets {
            caption = 'Пакеты';
            MOVE PROPERTY(packets(i));
        }
    }
}

CLASS UserInvoicePacketDetail 'Строка накладной (пакеты, продажа-возврат)' : BinPacketLedger;
TABLE userInvoicePacketDetail (UserInvoicePacketDetail);

userInvoice = DATA UserInvoice (UserInvoicePacketDetail) NONULL DELETE INDEXED;
countUserInvoicePacketDetail = GROUP SUM 1 BY userInvoice(UserInvoicePacketDetail d);

number 'Номер'(UserInvoicePacketDetail d) = number(userInvoice(d));
dateTime 'Дата/время' (UserInvoicePacketDetail d) = dateTime(userInvoice(d));

ledgerDateTime 'Дата/время' (UserInvoicePacketDetail d) = OVERRIDE postedTime(userInvoice(d)), dateTime(d);
date 'Дата' (UserInvoicePacketDetail d) = toDate(ledgerDateTime(d));

isPosted 'Проведен'(UserInvoicePacketDetail d) = isPosted(userInvoice(d)) IF shipped(userInvoice(d));

operation (UserInvoicePacketDetail d) = operation(userInvoice(d));
supplierStock (UserInvoicePacketDetail d) = supplierStock(userInvoice(d));
customer (UserInvoicePacketDetail d) = customer(userInvoice(d));
customerStock (UserInvoicePacketDetail d) = customerStock(userInvoice(d));

packet = DATA Packet (UserInvoicePacketDetail) INDEXED ;
bin = DATA Bin (UserInvoicePacketDetail);

packetSkuList 'Товары в пакете'(UserInvoicePacketDetail d) = skuListA(packet(d), dateTime(d));

@defineDocumentDetailIndex(userInvoice, UserInvoicePacketDetail);

// по BinPacketLedger
dateTime (UserInvoicePacketDetail ledger) += ledgerDateTime(ledger);
packet (UserInvoicePacketDetail ledger) += packet(ledger);
bin (UserInvoicePacketDetail ledger) += bin(ledger);
isPosted (UserInvoicePacketDetail ledger) += isPosted(ledger);
numberDocument(UserInvoicePacketDetail ledger) += number(ledger);
seriesDocument(UserInvoicePacketDetail ledger) += series(userInvoice(ledger));
description(UserInvoicePacketDetail ledger) += 'Накладная (продажа-возврат) № ' +  seriesNumber(userInvoice(ledger)) + ', строка № ' + index(ledger);
createdUser(UserInvoicePacketDetail ledger) += createdUser(userInvoice(ledger));

nameStock 'Цех комплектации' (UserInvoicePacketDetail d) = nameStock(packet(d));
dateProduction 'Дата производства' (UserInvoicePacketDetail d) = dateProduction(packet(d));

// ссылка на пакет в накладной (продажа)
userInvoicePacketDetail = DATA Sale.UserInvoicePacketDetail (UserInvoicePacketDetail) INDEXED;
descriptionUserInvoicePacketDetail 'Основание' (UserInvoicePacketDetail pd) = description(userInvoice(userInvoicePacketDetail(pd)));

isReturned 'Пакет возвращён' (Sale.UserInvoicePacketDetail d)= TRUE IF [GROUP MAX(UserInvoicePacketDetail pd) IF isPosted(pd) BY userInvoicePacketDetail(pd)](d) MATERIALIZED;

EXTEND FORM Sale.userInvoice
    PROPERTIES SHOWIF packets(i) READONLY isReturned(bd) BEFORE nameStock(bd)
;

CONSTRAINT UserInvoicePacketDetail d IS UserInvoicePacketDetail AND userInvoice(userInvoicePacketDetail(d)) AND NOT supplier(userInvoice(d)) ==  supplier(userInvoice(userInvoicePacketDetail(d)))
    MESSAGE 'Поставщик в возвратной накладной не соответствует поставщику в основании (пакеты)';

CONSTRAINT UserInvoicePacketDetail d IS UserInvoicePacketDetail AND userInvoice(userInvoicePacketDetail(d)) AND NOT supplierStock(userInvoice(d)) ==  supplierStock(userInvoice(userInvoicePacketDetail(d)))
    MESSAGE 'Склад поставщика в возвратной накладной не соответствует складу поставщика в основании (пакеты)';

CONSTRAINT UserInvoicePacketDetail d IS UserInvoicePacketDetail AND userInvoice(userInvoicePacketDetail(d)) AND NOT currentSkuList(packet(d)) == currentSkuList(packet(userInvoicePacketDetail(d)))
    CHECKED BY userInvoicePacketDetail[UserInvoicePacketDetail]
    MESSAGE 'Товары в пакете строки возврата должны соответствовать товарам в пакете строки основания';

CONSTRAINT UserInvoicePacketDetail d IS UserInvoicePacketDetail AND userInvoice(userInvoicePacketDetail(d)) AND NOT customer(userInvoice(d)) == customer(userInvoice(userInvoicePacketDetail(d)))
    CHECKED BY userInvoicePacketDetail[UserInvoicePacketDetail]
    MESSAGE 'Покупатель в возвратной накладной не соответствует покупателю в основании (пакеты)';

lastSaleInvoicePacketDetail 'Последняя строка продажи (пакеты)' = GROUP LAST Sale.UserInvoicePacketDetail d ORDER dateTime(d), d
    WHERE dateTime(d) <= DATETIME dt AND isPosted(d) AND NOT PREV(isReturned(d))
    BY supplierStock(d), packet(d), dt;

lastSaleInvoicePacketDetail(UserInvoicePacketDetail d) = lastSaleInvoicePacketDetail(supplierStock(d), packet(d), dateTime(d));

fillInvoicePacketDetail 'Проставить основание'(UserInvoicePacketDetail d)   {
    userInvoicePacketDetail(d) <- lastSaleInvoicePacketDetail(d)
        WHERE NOT userInvoicePacketDetail(d);
} ASON CONTEXTMENU descriptionUserInvoicePacketDetail[UserInvoicePacketDetail];

fillAllInvoicePacketDetail 'Проставить основание для всех'(UserInvoicePacketDetail detail)  {
    FOR userInvoice(detail) == userInvoice(UserInvoicePacketDetail d) DO
        fillInvoicePacketDetail(d);
} ASON CONTEXTMENU descriptionUserInvoicePacketDetail[UserInvoicePacketDetail];

fillAllInvoicePacketDetail 'Проставить основание для всех'(UserInvoice i)  {
    FOR i == userInvoice(UserInvoicePacketDetail d) DO
        fillInvoicePacketDetail(d);
}

FORM baseUserInvoicePacketDetail 'Строки накладной (пакеты, продажа)'
    OBJECTS st = Stock PANEL
    OBJECTS c = LegalEntity PANEL
    OBJECTS cst = Stock PANEL
    OBJECTS sk = Sku PANEL

    OBJECTS d = Sale.UserInvoicePacketDetail
    PROPERTIES (d) READONLY dateTime, number, idPacket, packetSkuList, index
    FILTERS currentQuantity(sk, packet(d))

    FILTERGROUP filter11
        FILTER  'По складу' supplierStock(d) == st DEFAULT
    FILTERGROUP filter12
        FILTER  'По покупателю' customer(d) == c DEFAULT
    FILTERGROUP filter13
        FILTER  'По складу покупателя' customerStock(d) == cst DEFAULT
;

changeSaleInvoicePacketDetail(UserInvoicePacketDetail detail)  {
    DIALOG baseUserInvoicePacketDetail OBJECTS
        st = supplierStock(detail),
        c = customer(detail),                                   
        cst = customerStock(detail),
        sk = [GROUP MIN Sku sk IF currentQuantity(sk, packet(detail))](),
        d = userInvoicePacketDetail(detail) INPUT NULL NEWSESSION DO {
        userInvoicePacketDetail(detail) <- d;
    }
}

EXTEND FORM userInvoice
    OBJECTS bd = UserInvoicePacketDetail
    PROPERTIES (bd) SHOWIF packets(i) index READONLY, idPacket, descriptionUserInvoicePacketDetail ON CHANGE changeSaleInvoicePacketDetail(bd), nameStock, dateProduction, packetSkuList, idBin
    PROPERTIES (bd) SHOWIF packets(i) DELETE GRID
    ORDERS index(bd)
    FILTERS userInvoice(bd) == i
;

DESIGN userInvoice {
    specificationBox {
        MOVE BOX(bd) AFTER BOX(d) {
            caption = 'Пакеты';
            PROPERTY (idPacket(bd)) { focusable = TRUE; }
        }
    }
}

EXTEND FORM invoices
    OBJECTS bd = UserInvoicePacketDetail
    PROPERTIES (bd) SHOWIF packets(i) READONLY index, idPacket, descriptionUserInvoicePacketDetail, nameStock, dateProduction, packetSkuList, idBin
    ORDERS index(bd)
    FILTERS userInvoice(bd) == i
;

DESIGN invoices {
    documentDetail {
        MOVE BOX(bd) AFTER BOX(d) {
            caption = 'Пакеты';
            PROPERTY (idPacket(bd)){focusable = TRUE;}
        }
    }
}

@defineConstraintDoublePacketDetail(userInvoice, 'Запрещено добавлять пакет в накладную несколько раз');

@defineConstraintEmptyPacketDetail(userInvoice);

updateUserInvoiceDetails 'Обновить спецификацию из пакетов' ABSTRACT (UserInvoice);
showUpdateUserInvoiceDetails = ABSTRACT BOOLEAN (UserInvoice);



EXTEND FORM userInvoice
    PROPERTIES (i) SHOWIF showUpdateUserInvoiceDetails(i) updateUserInvoiceDetails DRAW d TOOLBAR
;

WHEN SET (isPosted(UserInvoicePacketDetail d)) AND NOT dateProduction(packet(d)) DO {
    FOR packet(PacketingDetail pd) == packet(d) DO
        dateProduction(pd) <- currentDate();
}

skipChangeShipmentDatePosted = ABSTRACT BOOLEAN ();

WHEN SET (isPosted(UserInvoice i)) AND packets(i) AND supplier(i) != customer(i) AND NOT skipChangeShipmentDatePosted() DO {
    FOR userInvoice(UserInvoicePacketDetail d) == i DO
        shipmentDate(packet(d)) <- NULL;
}

prevSaleInvoicePacketDetailCustomer (UserInvoicePacketDetail rd) = [GROUP LAST Sale.UserInvoicePacketDetail pd IF ledgerDateTime(pd) < ledgerDateTime(rd) AND supplier(pd) != customer(pd) 
                                                                        ORDER ledgerDateTime(pd), pd BY packet(pd), supplierStock(pd)](packet(rd), supplierStock(rd));

WHEN DROPPED (isPosted(UserInvoice i)) AND packets(i) AND supplier(i) != customer(i) AND NOT skipChangeShipmentDatePosted() DO
    FOR userInvoice(UserInvoicePacketDetail d) == i DO
        shipmentDate(packet(d)) <- shipmentDate(userInvoice(prevSaleInvoicePacketDetailCustomer(d)));

defaultReturnBin = DATA Bin (Stock);
idDefaultReturnBin 'Ячейка приёмки возвратов' (Stock st) = id(defaultReturnBin(st));

CONSTRAINT defaultReturnBin(Stock stock) AND NOT stock == stock(defaultReturnBin(stock))
    CHECKED BY defaultReturnBin[Stock] MESSAGE 'Ячейка недоступна для склада';

EXTEND FORM warehouse
    PROPERTIES(w) idDefaultReturnBin SHOWIF isCompany(w)
;

DESIGN warehouse {
    headerExtraParams {
        MOVE PROPERTY(idDefaultReturnBin(w));
    }
}

WHEN SET (isPosted(UserInvoicePacketDetail d)) DO {
    bin(d) <- OVERRIDE defaultReturnBin(supplierStock(d)), defaultBin(supplierStock(d));
}

WHEN DROPPED (isPosted(UserInvoicePacketDetail d)) DO {
    bin(d) <- NULL;
}

@defineConstraintBinPacketDetail(userInvoice, supplierStock, 'поставщика');