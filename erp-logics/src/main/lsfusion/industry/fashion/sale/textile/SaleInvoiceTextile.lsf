MODULE SaleInvoiceTextile;

REQUIRE SaleOperationTextile, SaleInvoice, BinPacketLedger, PurchaseShipmentTextile, PickingTextile;

NAMESPACE Sale;

@defineDocumentHeaderProperty (userInvoice, packets, 'Пакеты');

packets 'Пакеты' = ABSTRACT BOOLEAN (Invoice);
packets(UserInvoice i) += packets(i);

@deriveDocumentOperationProperty(UserInvoice, packets);

EXTEND FORM userInvoice
    PROPERTIES (i) READONLY packets
;

DESIGN userInvoice {
    headerExtraParams {
        NEW headerPackets {
            caption = 'Пакеты';
            MOVE PROPERTY(packets(i));
        }
    }
}

CLASS UserInvoicePacketDetail 'Строка накладной (пакеты, продажа)' : BinPacketLedger;
TABLE userInvoicePacketDetail (UserInvoicePacketDetail);

userInvoice = DATA UserInvoice (UserInvoicePacketDetail) NONULL DELETE INDEXED;

number 'Номер'(UserInvoicePacketDetail d) = number(userInvoice(d));
dateTime 'Дата/время' (UserInvoicePacketDetail d) = dateTime(userInvoice(d));

ledgerDateTime 'Дата/время' (UserInvoicePacketDetail d) = OVERRIDE postedTime(userInvoice(d)), dateTime(d);
date 'Дата' (UserInvoicePacketDetail d) = toDate(ledgerDateTime(d)) MATERIALIZED INDEXED;

isPosted 'Проведен'(UserInvoicePacketDetail d) = isPosted(userInvoice(d)) MATERIALIZED;

operation (UserInvoicePacketDetail d) = operation(userInvoice(d));
supplier (UserInvoicePacketDetail d) = supplier(userInvoice(d));
supplierStock (UserInvoicePacketDetail d) = supplierStock(userInvoice(d));
customer (UserInvoicePacketDetail d) = customer(userInvoice(d));
customerStock (UserInvoicePacketDetail d) = customerStock(userInvoice(d));

packet = DATA Packet (UserInvoicePacketDetail) INDEXED ;
bin = DATA Bin (UserInvoicePacketDetail);

packetSkuList 'Товары в пакете'(UserInvoicePacketDetail d) = currentSkuList(packet(d));

countPacketsUserInvoice 'Кол-во пакетов' = GROUP SUM 1 BY userInvoice(UserInvoicePacketDetail d) MATERIALIZED;

@defineDocumentDetailIndex(userInvoice, UserInvoicePacketDetail);

fillLedgerBin = ABSTRACT BOOLEAN (UserInvoicePacketDetail);

// по BinPacketLedger
dateTime (UserInvoicePacketDetail ledger) += ledgerDateTime(ledger);
packet (UserInvoicePacketDetail ledger) += packet(ledger);
bin (UserInvoicePacketDetail ledger) += bin(ledger) IF fillLedgerBin(ledger);
isPosted (UserInvoicePacketDetail ledger) += isPosted(ledger);
numberDocument(UserInvoicePacketDetail ledger) += number(ledger);
seriesDocument(UserInvoicePacketDetail ledger) += series(userInvoice(ledger));
description(UserInvoicePacketDetail ledger) += 'Накладная (продажа) № ' +  seriesNumber(userInvoice(ledger)) + ' (' + STRING[50](nameCustomer(userInvoice(ledger))) + '), строка № ' + index(ledger);
createdUser(UserInvoicePacketDetail ledger) += createdUser(userInvoice(ledger));

nameStock 'Цех комплектации' (UserInvoicePacketDetail d) = nameStock(packet(d));
dateProduction 'Дата производства' (UserInvoicePacketDetail d) = dateProduction(packet(d));

extraCheckedNotPosted = ABSTRACT BOOLEAN (UserInvoicePacketDetail);

CONSTRAINT (SETCHANGED (packet(UserInvoicePacketDetail d)) OR CHANGED(isPosted(d))) AND
    ((isPosted(d) AND countBinPacketLedgerNotPosted(packet(d))) OR (NOT isPosted(d) AND countBinPacketLedgerNotPosted(packet(d)) > 1 AND NOT extraCheckedNotPosted(d)))
    CHECKED BY packet
    MESSAGE 'Пакет есть в другом непроведённом документе';  // иначе пакет может размножиться

backgroundPacketSkuList = ABSTRACT COLOR (UserInvoicePacketDetail);

EXTEND FORM userInvoice
    OBJECTS bd = UserInvoicePacketDetail
    PROPERTIES (bd) SHOWIF packets(i) READONLY index, idPacket, nameStock, dateProduction, packetSkuList BACKGROUND backgroundPacketSkuList(bd)
    PROPERTIES (bd) SHOWIF packets(i) DELETE GRID
    ORDERS index(bd)
    FILTERS userInvoice(bd) == i
;

DESIGN userInvoice {
    specificationBox {
        MOVE BOX(bd) AFTER BOX(d) {
            caption = 'Пакеты';
            PROPERTY (idPacket(bd)) { focusable = TRUE; }
        }
    }
}

EXTEND FORM invoices
    OBJECTS bd = UserInvoicePacketDetail
    PROPERTIES (bd) SHOWIF packets(i) READONLY index, idPacket, nameStock, dateProduction, packetSkuList
    ORDERS index(bd)
    FILTERS userInvoice(bd) == i
;

DESIGN invoices {
    documentDetail {
        MOVE BOX(bd) AFTER BOX(d) {
            caption = 'Пакеты';
            PROPERTY (idPacket(bd)) { focusable = TRUE; }
        }
    }
}

@defineConstraintDoublePacketDetail(userInvoice, 'Запрещено добавлять пакет в накладную несколько раз');

@defineConstraintEmptyPacketDetail(userInvoice);

updateUserInvoiceDetails 'Обновить спецификацию из пакетов' ABSTRACT (UserInvoice);
showUpdateUserInvoiceDetails = ABSTRACT BOOLEAN (UserInvoice);

EXTEND FORM userInvoice
    PROPERTIES (i) SHOWIF showUpdateUserInvoiceDetails(i) updateUserInvoiceDetails DRAW d TOOLBAR
;

CONSTRAINT DROPPED (isPosted(Purchase.UserShipmentPacketDetail d)) AND dateTime([ GROUP MAX UserInvoicePacketDetail ud BY packet(ud)](PREV(packet(d)))) > PREV(dateTime(d))
    MESSAGE 'Пакет из перемещения добавлен в накладную (продажа)';

CONSTRAINT DROPPED (UserPickingPacketDetail pd IS UserPickingPacketDetail) AND dateTime([ GROUP MAX UserInvoicePacketDetail d BY packet(d)](PREV(packet(pd)))) > PREV(dateTime(pd))
    MESSAGE 'Пакет из комплектации добавлен в накладную (продажа)';

skipChangeShipmentDatePosted = ABSTRACT BOOLEAN ();

WHEN SET (isPosted(UserInvoice i)) AND packets(i) AND supplier(i) != customer(i) AND NOT skipChangeShipmentDatePosted() DO {
    FOR userInvoice(UserInvoicePacketDetail d) == i DO
        shipmentDate(packet(d)) <- shipmentDate(i);
}

WHEN DROPPED (isPosted(UserInvoice i)) AND packets(i) AND supplier(i) != customer(i) AND NOT skipChangeShipmentDatePosted() DO
    FOR userInvoice(UserInvoicePacketDetail d) == i DO
        shipmentDate(packet(d)) <- NULL;