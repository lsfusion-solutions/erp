MODULE PurchaseReturnShipmentTextile;

REQUIRE PurchaseReturnShipment, PurchaseShipmentTextile;

PRIORITY Purchase;

NAMESPACE PurchaseReturn;

@defineDocumentHeaderProperty (userShipment, packets, 'Пакеты');

@deriveDocumentOperationProperty(UserShipment, packets);

EXTEND FORM userShipment
    PROPERTIES (s) READONLY packets
;

DESIGN userShipment {
    headerExtraParams {
        NEW headerPackets {
            caption = 'Пакеты';
            MOVE PROPERTY(packets(s));
        }
    }
}

CLASS UserShipmentPacketDetail 'Строка поставки в пакете (закупка-возврат)' : BinPacketLedger;
TABLE userShipmentPacketDetail (UserShipmentPacketDetail);

userShipment = DATA UserShipment (UserShipmentPacketDetail) NONULL DELETE INDEXED;

number 'Номер'(UserShipmentPacketDetail d) = number(userShipment(d));
dateTime 'Дата/время' (UserShipmentPacketDetail d) = dateTime(userShipment(d));

isPosted 'Проведен'(UserShipmentPacketDetail d) = isPosted(userShipment(d));
operation (UserShipmentPacketDetail d) = operation(userShipment(d));
customerStock (UserShipmentPacketDetail d) = customerStock(userShipment(d));
supplierStock (UserShipmentPacketDetail d) = supplierStock(userShipment(d));

packet = DATA Packet (UserShipmentPacketDetail) INDEXED;
packetSkuList 'Товары в пакете'(UserShipmentPacketDetail d) = skuListA(packet(d), dateTime(d));

@defineDocumentDetailIndex(userShipment, UserShipmentPacketDetail);

countShipmentPacketDetail 'Кол-во строк (пакеты)' = GROUP SUM 1 BY userShipment(UserShipmentPacketDetail d) MATERIALIZED;

isPrinted 'Передано' = DATA BOOLEAN (UserShipment);
backgroundShipment 'Цвет' (UserShipment s) = CASE WHEN NOT isPrinted(s) THEN RGB(212,255,212)
    WHEN isPrinted(s) AND NOT isPosted(s) THEN RGB(150,255,150);

isAccepted 'Принято' = DATA BOOLEAN (UserShipmentPacketDetail);
dateTimeAccepted 'Дата/время приёмки' = DATA DATETIME (UserShipmentPacketDetail);

// по BinPacketLedger
dateTime (UserShipmentPacketDetail ledger) += OVERRIDE dateTimeAccepted(ledger), dateTime(ledger);
packet (UserShipmentPacketDetail ledger) += packet(ledger);
isPosted (UserShipmentPacketDetail ledger) += isPosted(ledger);
numberDocument(UserShipmentPacketDetail ledger) += number(ledger);
seriesDocument(UserShipmentPacketDetail ledger) += series(userShipment(ledger));
description(UserShipmentPacketDetail ledger) += 'Возврат пакетов в цех № ' + seriesNumber(userShipment(ledger)) + ', строка № ' + index(ledger);
createdUser(UserShipmentPacketDetail ledger) += createdUser(userShipment(ledger));

nameStock 'Цех комплектации' (UserShipmentPacketDetail d) = nameStock(packet(d));
dateProduction 'Дата производства' (UserShipmentPacketDetail d) = dateProduction(packet(d));

EXTEND FORM userShipment
    OBJECTS bd = UserShipmentPacketDetail
    PROPERTIES(bd) SHOWIF packets(s) index READONLY, idPacket, isAccepted, dateProduction, packetSkuList
    PROPERTIES(bd) SHOWIF packets(s) DELETE GRID
    FILTERS userShipment(bd) == s
;

DESIGN userShipment {
    specificationBox{
        MOVE BOX(bd) FIRST {
            caption = 'Пакеты';
            PROPERTY(idPacket(bd)) { focusable = TRUE; }
        }
    }
}

EXTEND FORM shipments
    OBJECTS bd = UserShipmentPacketDetail
    PROPERTIES(bd) SHOWIF packets(s) READONLY index, idPacket, isAccepted, dateProduction, packetSkuList
    FILTERS userShipment(bd) == s
;

DESIGN shipments {
    documentDetail {
        MOVE BOX(bd) AFTER BOX(d) {
            caption = 'Пакеты';
            PROPERTY(idPacket(bd)) { focusable = TRUE; }
        }
    }
}

createUserShipmentDetails 'Обновить спецификацию из пакетов' ABSTRACT (UserShipment) TOOLBAR;
showCreateUserShipmentDetails = ABSTRACT BOOLEAN (UserShipment);

EXTEND FORM userShipment
    PROPERTIES(s) SHOWIF showCreateUserShipmentDetails(s) createUserShipmentDetails DRAW d

    EVENTS
        ON APPLY BEFORE createUserShipmentDetails(s)
;

WHEN LOCAL SET (isAccepted(UserShipmentPacketDetail d)) DO {
    dateTimeAccepted(d) <- currentDateTime();
}

WHEN LOCAL DROPPED (isAccepted(UserShipmentPacketDetail d)) DO {
    dateTimeAccepted(d) <- NULL;
}

idArticleSku 'Модель' (UserShipmentDetail d) = idArticle(sku(d));

isNotAccepted 'Есть непринятые строки' = GROUP SUM 1 IF NOT isAccepted(UserShipmentPacketDetail d) BY userShipment(d);
acceptedDetails 'Есть принятые строки' = GROUP SUM 1 IF isAccepted(UserShipmentPacketDetail d) BY userShipment(d);
isAccepted 'Принято' (UserShipment s) = NOT isNotAccepted(s);

countAcceptedShipmentPacketDetail 'Кол-во пакетов (принято)' = GROUP SUM 1 IF isAccepted(UserShipmentPacketDetail d) BY userShipment(d);

reprintTransfer 'Печать накладной' ABSTRACT (UserShipment) IMAGE 'print.png' TOOLBAR;

printTransfer 'Передать в цех' (UserShipment s) {
    isPrinted(s) <- TRUE;
    APPLY;
} TOOLBAR CONFIRM;

dropPrinted 'Вернуть из цеха' (UserShipment o) {
    NEWSESSION {
        isPrinted(o) <- NULL;
        APPLY;
    }
} TOOLBAR CONFIRM;


CONSTRAINT SET (isPosted(UserShipment s)) AND operation(s) == defaultTransferToStockOperation() AND NOT isAccepted(s)
    MESSAGE 'Запрещено проводить возврат, пока есть непринятые строки';

WHEN LOCAL FORMS userShipment CHANGED (operation(UserShipment s)) AND operation(s) == defaultTransferToStockOperation() DO {
    supplier(s) <- defaultCompany();
    customerStock(s) <- defaultTransferStockTo();
    customer(s) <- defaultCompany();
    packets(s) <- TRUE;
}

filterTransferDateFrom 'Дата с' = DATA LOCAL NESTED DATE ();
filterDateFromT(Shipment s) = date(s) >= filterTransferDateFrom() OR NOT filterTransferDateFrom();

filterTransferDateTo 'Дата по' = DATA LOCAL NESTED DATE ();
filterDateToT (Shipment s) = date(s) <= filterTransferDateTo() OR NOT filterTransferDateTo();

filterTransferCustomer = DATA LOCAL NESTED LegalEntity ();
nameFilterTransferCustomer 'Покупатель' = name(filterTransferCustomer()) CHARWIDTH 20;
filterCustomerT (Shipment s) = customer(s) == filterTransferCustomer() OR NOT filterTransferCustomer() OR NOT customer(s);

filterTransferCustomerStock = DATA LOCAL NESTED Stock ();
nameFilterTransferCustomerStock 'Склад покупателя' = name(filterTransferCustomerStock()) CHARWIDTH 30;
filterCustomerStockT (Shipment s) = customerStock(s) == filterTransferCustomerStock() OR NOT filterTransferCustomerStock() OR NOT customerStock(s);

filterTransferSupplier = DATA LOCAL NESTED LegalEntity ();
nameFilterTransferSupplier 'Поставщик' = name(filterTransferSupplier()) CHARWIDTH 20;
filterSupplierT (Shipment s) = supplier(s) == filterTransferSupplier() OR NOT filterTransferSupplier() OR NOT supplier(s);

filterTransferSupplierStock = DATA LOCAL NESTED Stock ();
nameFilterTransferSupplierStock 'Склад поставщика' = name(filterTransferSupplierStock()) CHARWIDTH 30;
filterSupplierStockT (Shipment s) = supplierStock(s) == filterTransferSupplierStock() OR NOT filterTransferSupplierStock() OR NOT supplierStock(s);

filterTransferOperation = DATA LOCAL NESTED Operation ();
nameFilterTransferOperation 'Операция' = name(filterTransferOperation()) CHARWIDTH 40;
filterOperationT (UserShipment s) = operation(s) == filterTransferOperation() OR NOT filterTransferOperation() OR NOT operation(s);

afterSetTransferFilters ABSTRACT LIST ();

setTransferFilters() {
    filterTransferOperation() <- defaultTransferToStockOperation();
    filterTransferCustomer() <- defaultCompany();;
    filterTransferCustomerStock() <- defaultTransferStockTo();
    filterTransferDateFrom() <- currentDate();
    filterTransferDateTo() <- currentDate();

    afterSetTransferFilters();
}

notEqualPacketDetails(UserShipment s) = RGB(255,150,150) IF NOT countAcceptedShipmentPacketDetail(s) == countShipmentPacketDetail(s);

CONSTRAINT (SETCHANGED (packet(UserShipmentPacketDetail d)) OR CHANGED(isPosted(d))) AND
    ((isPosted(d) AND countBinPacketLedgerNotPosted(packet(d))) OR (NOT isPosted(d) AND countBinPacketLedgerNotPosted(packet(d)) > 1))
    CHECKED BY packet
    MESSAGE 'Пакет есть в другом непроведённом документе';

changeSupplierStock(UserShipment sh) {
    DIALOG stocks OBJECTS s = supplierStock(sh) CHANGE;
    APPLY;
}

FORM transferFromStock 'Возврат со склада в цех'
    PROPERTIES() filterTransferDateFrom, filterTransferDateTo

    OBJECTS s = UserShipment LAST
    PROPERTIES(s) READONLY isPrinted, isPosted
    PROPERTIES(s) READONLYIF isPrinted(s) BACKGROUND backgroundShipment(s) number, series, date, time, nameSupplierStock ON CHANGE changeSupplierStock(s)
    PROPERTIES(s) READONLY BACKGROUND backgroundShipment(s) nameCustomerStock, note
    
    PROPERTIES(s) reprintTransfer SHOWIF supplierStock(s),
        dropPrinted SHOWIF (isPrinted(s) AND NOT acceptedDetails(s)), // хоть 1 строка принята - вернуть нельзя
        printTransfer SHOWIF (NOT isPrinted(s) AND supplierStock(s))

    FILTERS filterDateFromT(s), filterDateToT(s), filterOperationT(s), filterCustomerT(s), filterCustomerStockT(s)

    FILTERGROUP notPosted FILTER 'Приёмка не завершена' NOT isPosted(s) DEFAULT
    
    OBJECTS bd = UserShipmentPacketDetail
    PROPERTIES(bd) READONLY index, idPacket, isAccepted, dateTimeAccepted, nameStock, dateProduction
    FILTERS userShipment(bd) == s

    EVENTS ON INIT setTransferFilters()
;

@extendFormEditable(transferFromStock);

DESIGN transferFromStock {
    NEW topPacket {
        horizontal = TRUE;
        NEW top {
            NEW topFilters {
                caption = 'Период';
                MOVE PROPERTY(filterTransferDateFrom()) { font = 'bold 16'; alignment = STRETCH; }
                MOVE PROPERTY(filterTransferDateTo()) { font = 'bold 16'; }
            }
        }
    }
    NEW documentContainer {
        fill = 1;
        MOVE BOX(s) {
            fill = 2;
            caption = 'Перемещение (польз.)';
            PROPERTY(nameSupplierStock(s)) { caption = 'Цех'; }
            PROPERTY(nameCustomerStock(s)) { caption = 'Склад'; }
            PROPERTY(isPosted(s)) { caption = 'Принято'; }
        }
        NEW documentDetail {
            fill = 1;
            tabbed = TRUE;
            MOVE BOX(bd) {
                caption = 'Пакеты';
                PROPERTY(idPacket(bd)) { focusable = TRUE; }
            }
        }
    }
    MOVE TOOLBARBOX;
}

afterPostAccept ABSTRACT LIST (UserShipment);

postAccept 'Завершить приёмку' (UserShipment s) {
    APPLY;
    post(s);
    afterPostAccept(s);
} CHANGEKEY 'F6';

dropAccept 'Отменить накладную' (UserShipment s) {
    isAccepted(UserShipmentPacketDetail bd) <- NULL WHERE userShipment(bd) = s;
    APPLY;
} TOOLBAR CONFIRM;

FORM transferToProduction 'Приёмка со склада в цех'
    PROPERTIES() filterTransferDateFrom, filterTransferDateTo

    OBJECTS s = UserShipment LAST
    PROPERTIES(s) READONLY BACKGROUND background(s) isPosted, number, series, date, time
    PROPERTIES(s) READONLY nameSupplierStock, nameCustomerStock, note
    PROPERTIES(s) reprintTransfer, postAccept SHOWIF (isDraft(s) AND isAccepted(s)) DRAW s TOOLBAR
    PROPERTIES(s) dropAccept SHOWIF isDraft(s)

    FILTERS filterDateFromT(s), filterDateToT(s), filterOperationT(s), filterCustomerT(s), filterCustomerStockT(s),
        isPrinted(s)
    
    FILTERGROUP notPosted FILTER 'Приёмка не завершена' NOT isPosted(s) DEFAULT

    OBJECTS bd = UserShipmentPacketDetail
    PROPERTIES(bd) READONLY index, idPacket
    PROPERTIES(bd) READONLYIF isPosted(s) isAccepted, dateTimeAccepted
    PROPERTIES(bd) READONLY nameStock, dateProduction

    FILTERS userShipment(bd) == s

    FILTERGROUP acceptedPacket FILTER 'Принятые' isAccepted(bd)
    FILTERGROUP notAcceptedPacket FILTER 'Непринятые' NOT isAccepted(bd)

    EVENTS ON INIT setTransferFilters()
;

DESIGN transferToProduction {
    NEW topPacket {
        horizontal = TRUE;
        NEW topFilters {
            caption = 'Период';
            MOVE PROPERTY(filterTransferDateFrom()) { font = 'bold 16'; alignment = STRETCH; }
            MOVE PROPERTY(filterTransferDateTo()) { font = 'bold 16'; }
        }
    }
    NEW documentContainer {
        fill = 1;
        MOVE BOX(s) {
            fill = 2;
            caption = 'Перемещение (польз.)';
            PROPERTY(nameSupplierStock(s)) { caption = 'Цех'; }
            PROPERTY(nameCustomerStock(s)) { caption = 'Склад'; }
            PROPERTY(isPosted(s)) { caption = 'Принято'; }
        }
        NEW documentDetail {
            fill = 1;
            tabbed = TRUE;
            MOVE BOX(bd) {
                caption = 'Пакеты';
                PROPERTY (idPacket(bd)) { focusable = TRUE; }
            }
        }
    }
    MOVE TOOLBARBOX;
}

NAVIGATOR {
    dashboardNavigator {
        transferDashboardNavigator {
            NEW transferFromStock;
            NEW transferToProduction;
        }
    }
}

WHEN SET (isPosted(UserShipmentPacketDetail d)) DO {
    FOR packet(PacketingDetail pd) == packet(d) DO
        dateProduction(pd) <- NULL;
    shipmentDate(Packet p) <- NULL WHERE p == packet(d);
}

CONSTRAINT DROPPED(UserShipment s IS UserShipment) AND operation(s) == defaultTransferToStockOperation() AND (PREV(isPosted(s)) OR PREV(acceptedDetails(s)))
    MESSAGE 'Запрещено удалять уже принятое перемещение';

@defineConstraintDoublePacketDetail(userShipment, 'Запрещено добавлять пакет в перемещение несколько раз');

@defineConstraintEmptyPacketDetail(userShipment);

CONSTRAINT (SET(isPosted(UserShipment s)) OR DROPPED(isPrinted(s))) AND isPosted(s) AND operation(s) == defaultTransferToStockOperation() AND NOT isPrinted(s)
    MESSAGE 'Перемещение возвращено на склад, провести невозможно';

CONSTRAINT DROPPED (UserShipmentPacketDetail d IS UserShipmentPacketDetail) AND PREV(isAccepted(d))
    MESSAGE 'Запрещено удалять уже принятую строку перемещения';