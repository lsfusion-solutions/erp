MODULE LabelDirectPrintTextileLot;

REQUIRE LabelDirectPrintTextile, Lot;

NAMESPACE Label;

stickerTransaction = DATA StickerTransaction(Lot) INDEXED;
dateTimeStickerTransaction 'Дата/время печати' (Lot l) = dateTime(stickerTransaction(l));
printed 'Напечатана' (Lot l) = stickerTransaction(l) AND NOT skipReports(stickerTransaction(l)) MATERIALIZED;
notPrinted (Lot l) = l IS Lot AND NOT printed(l) MATERIALIZED INDEXED;

countNotPrintedLot 'Кол-во ненапечатанных марок' = GROUP SUM 1 IF notPrinted(Lot l) BY sku(l) MATERIALIZED;

EXTEND FORM lots
    PROPERTIES(l) READONLY AFTER nameSku(l) printed, dateTimeStickerTransaction
;

@defineOption(testDatamatrix, 'Тестовый datamatrix для печати', STRING, items);
@defineOption(printTestDatamartix, 'Печатать тестовый datamatrix', BOOLEAN, items);
@defineOption(datamartixTag, 'Тег datamatrix в шаблонах этикеток (с префиксом и постфиксом)', STRING, items);
@defineOption(logPrintDatamartix, 'Записывать в лог переданные на печать datamatrix', BOOLEAN, items);

DESIGN options {
    items {
        NEW printDatamatrix {
            caption = 'Параметры печати datamatrix';
            MOVE PROPERTY(testDatamatrix());
            MOVE PROPERTY(printTestDatamartix());
            MOVE PROPERTY(datamartixTag());
            MOVE PROPERTY(logPrintDatamartix());
        }
    }
}

// пока усложнять резервированием марок через APPLY не будем, поэтому на 2х рабочих местах на 1 товар лучше не печатать
preparePrintLot(StickerTransaction stickerTrans) {
    LOCAL lotToPrint = Lot();
    lotToPrint() <- GROUP MIN Lot l IF notPrinted(l) AND sku(l) = item(stickerTrans);
    stickerTransaction(lotToPrint()) <- stickerTrans;

    IF logPrintDatamartix() THEN {
        logToFile('labelDirectPrint', '[Select datamatrix] ' + id(lotToPrint())
            + ' , computer: ' + hostname(currentComputer()) + ', user: ' + login(currentUser()));
    }
    
    IF code(lotToPrint()) THEN
        fullFormattedText() <- replace(formattedText(), datamartixTag(), code(lotToPrint()));
    ELSE
        fullFormattedText() <- replace(formattedText(), datamartixTag(), '');
}

extraPreparePrintLot ABSTRACT LIST (StickerTransaction, INTEGER);

useCustomSendToPrinter () += TRUE;
customSendToPrinter (StickerTransaction stickerTrans) + {
    IF countNetworkPrinter(stock(stickerTrans)) THEN {

        IF countPrinters(stock(stickerTrans),printLabelType(stickerTrans)) == 1 AND notShowNetworkPrinterDialog() THEN {
            printer() <- currentPrinter(stock(stickerTrans), printLabelType(stickerTrans));
        } ELSE {
            DIALOG networkPrintersLabel OBJECTS s = stock(stickerTrans), l = printLabelType(stickerTrans), p INPUT NOMANAGESESSION DO
                printer() <- p;
        }

        CASE WHEN networkPrinterType(printer()) == NetworkPrinterType.clientComPort THEN {
            IF NOT printTestDatamartix() AND lotPrint(labelType(stickerTrans)) AND item(stickerTrans) THEN {
                FOR iterate(INTEGER i, 1, quantity(stickerTrans)) NOINLINE DO {
                    preparePrintLot(stickerTrans);
                    extraPreparePrintLot(stickerTrans, i);
                    
                    stringToFile(fullFormattedText(), (OVERRIDE nameCodepageDirectPrint(labelType(stickerTrans)), 'CP866'), '');
                    writeToComPortCustomLibrary(resultFile(), (OVERRIDE baudrateComNetworkPrinder(), 9600), INTEGER (replace(path(printer()), 'COM', '')));
                    printed() <- TRUE; // внутри цикла, т.к. если хоть одна отправилась - уже считаем транзакцию напечатанной
                }
            }
            ELSE {
                fullFormattedText() <- replace(fullFormattedText(), datamartixTag(), '');
                stringToFile(fullFormattedText(), (OVERRIDE nameCodepageDirectPrint(labelType(stickerTrans)), 'CP866'), '');
                writeToComPortCustomLibrary(resultFile(), (OVERRIDE baudrateComNetworkPrinder(), 9600), INTEGER (replace(path(printer()), 'COM', '')));
                printed() <- TRUE;
            }
        }

        WHEN networkPrinterType(printer()) == NetworkPrinterType.clientFile THEN {
            IF NOT printTestDatamartix() AND lotPrint(labelType(stickerTrans)) AND item(stickerTrans) THEN {
                FOR iterate(INTEGER i, 1, quantity(stickerTrans)) NOINLINE DO {
                    preparePrintLot(stickerTrans);
                    extraPreparePrintLot(stickerTrans, i);

                    stringToFile(fullFormattedText(), (OVERRIDE nameCodepageDirectPrint(labelType(stickerTrans)), 'CP866'), '');
                    WRITE CLIENT resultFile() TO path(printer());
                    printed() <- TRUE;
                }
            }
            ELSE {
                fullFormattedText() <- replace(fullFormattedText(), datamartixTag(), '');
                stringToFile(fullFormattedText(), (OVERRIDE nameCodepageDirectPrint(labelType(stickerTrans)), 'CP866'), '');
                WRITE CLIENT resultFile() TO path(printer());
                printed() <- TRUE;
            }
        }
        ELSE {  // в том числе, для NetworkPrinterType.clientPrintService
            IF NOT printTestDatamartix() AND lotPrint(labelType(stickerTrans)) AND item(stickerTrans) THEN {
                FOR iterate(INTEGER i, 1, quantity(stickerTrans)) NOINLINE DO {
                    preparePrintLot(stickerTrans);
                    extraPreparePrintLot(stickerTrans, i);

                    writeToPrinter(fullFormattedText(), (OVERRIDE nameCodepageDirectPrint(labelType(stickerTrans)), 'CP866'), path(printer()));
                    printed() <- TRUE;
                }
            }
            ELSE {
                fullFormattedText() <- replace(fullFormattedText(), datamartixTag(), '');
                writeToPrinter(fullFormattedText(), (OVERRIDE nameCodepageDirectPrint(labelType(stickerTrans)), 'CP866'), path(printer()));
                printed() <- TRUE;
            }
        }
    }
    ELSE
        MESSAGE 'Принтеры не найдены' NOWAIT;
}