MODULE LabelDirectPrintTextile;

REQUIRE LabelDirectPrint, LabelTextile, PacketTextile, ItemFashionTextile, StockTextile;

NAMESPACE Label;

CLASS StickerTransaction 'Печать этикеток';
TABLE stickerTransaction(StickerTransaction);

@defineCreated(StickerTransaction);

date 'Дата' = DATA DATE (StickerTransaction);
date (StickerTransaction transaction) <- currentDate() WHEN SET(transaction IS StickerTransaction);

time 'Время' = DATA TIME (StickerTransaction);
time (StickerTransaction transaction) <- currentTime() WHEN SET(transaction IS StickerTransaction);

dateTime 'Дата/время' (StickerTransaction t) = dateTimeToDateTime(date(t), time(t)) MATERIALIZED IN id;

stock = DATA Stock (StickerTransaction); // где напечатано
nameStock 'Склад' (StickerTransaction transaction) = name(stock(transaction)) IN id;

labelType 'Шаблон этикетки' = DATA LabelType (StickerTransaction) NONULL;
nameLabelType 'Шаблон этикетки' (StickerTransaction transaction) = name(labelType(transaction)) IN id;
text 'Текст шаблона (для принтера)' (StickerTransaction stickerTrans) = replace(textTemplate(labelType(stickerTrans)),'\n','\r');

printLabelType = DATA PrintLabelType (StickerTransaction) NONULL;
idPrintLabelType 'Код типа этикетки' (StickerTransaction transaction) = id(printLabelType(transaction));
namePrintLabelType 'Тип этикетки' (StickerTransaction transaction) = namePrint(printLabelType(transaction)) IN id;

packetFrom = DATA Packet (StickerTransaction);
idPacketFrom 'Пакет c' (StickerTransaction d) = id(packetFrom(d));
packetTo = DATA Packet (StickerTransaction);
idPacketTo 'Пакет по' (StickerTransaction d) = id(packetTo(d));

item = DATA Item (StickerTransaction);
nameItem 'Товар' (StickerTransaction d) = name(item(d));

overIdBarcode = ABSTRACT STRING[15](StickerTransaction);
useOverIdBarcode = ABSTRACT BOOLEAN(StickerTransaction);
idBarcodeItem 'Штрихкод' (StickerTransaction d) = OVERRIDE idBarcode(item(d)) IF length(idBarcode(item(d))) == 13, overIdBarcode(d) IF useOverIdBarcode(d);

article = ABSTRACT Article (StickerTransaction);
idArticle 'Модель'(StickerTransaction d) = id(article(d));

quantity 'Кол-во этикеток' = DATA INTEGER (StickerTransaction);
quantityInPacket 'Кол-во в пакете' = DATA NUMERIC[16,5](StickerTransaction);

stickerTransaction = DATA StickerTransaction (Packet) INDEXED NONULL;

skipReports 'Не учитывать в отчетах' = DATA BOOLEAN (StickerTransaction);
printText 'Текст для принтера' = DATA TEXT (StickerTransaction);

DESIGN labelType {
    PROPERTY(textTemplate(l)){
        notSelectAll = TRUE;
        valueSize = (100, 100);
        fill = 1;
    }
    specification {
        MOVE itemtextCase FIRST;
    }
    PROPERTY (lpad1Char(l)){hide = TRUE;}
    PROPERTY (lpad2Char(l)){hide = TRUE;}
    PROPERTY (lpad3Char(l)){hide = TRUE;}
    PROPERTY (lpad4Char(l)){hide = TRUE;}
}

filterDateFrom 'Дата с' = DATA LOCAL DATE ();
filterDateFrom (StickerTransaction s) = date(s) >= filterDateFrom() OR NOT filterDateFrom();

filterDateTo 'Дата по' = DATA LOCAL DATE ();
filterDateTo (StickerTransaction s) = date(s) <= filterDateTo() OR NOT filterDateTo();

FORM stickerTransactions 'Реестр печати этикеток'
    PROPERTIES () filterDateFrom, filterDateTo

    OBJECTS l = StickerTransaction
    PROPERTIES skipReports(l)
    PROPERTIES(l) READONLY namePrintLabelType, nameLabelType, date, time, idBarcodeItem, nameItem, idArticle, idPacketFrom, idPacketTo, quantity
    PROPERTIES(l) READONLY createdNameUser, createdHostnameComputer, printText
    ORDERS date(l), time(l)

    FILTERS filterDateFrom(l), filterDateTo(l)
;

DESIGN stickerTransactions {
    NEW topFilters {
        horizontal = TRUE;
        NEW dates {
            caption = 'Период';
            horizontal = TRUE;
            MOVE PROPERTY (filterDateFrom());
            MOVE PROPERTY (filterDateTo());
        }
    }
    NEW main {
        fill = 1;
        MOVE BOX(l);
        PROPERTY (printText(l)){valueHeight = 20;}
    }
    MOVE TOOLBARBOX;
}

NAVIGATOR {
    stockNavigator {
        NEW FOLDER stickerPrint 'Печать этикеток'{
            NEW printLabelTypes;
            NEW stickerTransactions;
            NEW stickerTypes;
            MOVE networkPrintersList;
        }
    }
}

printLabelType = DATA PrintLabelType (NetworkPrinter);
namePrintLabelType 'Тип этикеток' (NetworkPrinter p) = namePrint(printLabelType(p));

countPrinters = GROUP SUM 1 IF in(NetworkPrinter p, currentUser()) BY stock(p), printLabelType(p);
currentPrinter = GROUP MIN NetworkPrinter p IF in(p, currentUser()) BY stock(p), printLabelType(p);

FORM networkPrintersLabel 'Выбор принтера'
    OBJECTS s = Stock PANEL
    OBJECTS l = PrintLabelType PANEL

    OBJECTS p = NetworkPrinter
    PROPERTIES (p) READONLY name, path, nameOverNetworkPrinterType
    FILTERS s == stock(p),
        l = printLabelType(p),
        in(p, currentUser())
;

fillFormattedTextData ABSTRACT (StickerTransaction);

useCustomSendToPrinter = ABSTRACT BOOLEAN ();
customSendToPrinter ABSTRACT (StickerTransaction);

writeToComPortJssc (FILE file, INTEGER baudrate, INTEGER comport) {
    writeToComPort(file, baudrate, comport, NULL);
}

sendToPrinter (StickerTransaction stickerTrans) {
    IF useCustomSendToPrinter() THEN
        customSendToPrinter(stickerTrans);
    ELSE {
        IF countNetworkPrinter(stock(stickerTrans)) THEN {
            IF countPrinters(stock(stickerTrans),printLabelType(stickerTrans)) == 1 AND notShowNetworkPrinterDialog() THEN {
                printer() <- currentPrinter(stock(stickerTrans), printLabelType(stickerTrans));
            } ELSE {
                DIALOG networkPrintersLabel OBJECTS s = stock(stickerTrans), l = printLabelType(stickerTrans), p INPUT NOMANAGESESSION DO
                    printer() <- p;
            }

            CASE WHEN networkPrinterType(printer()) == NetworkPrinterType.clientComPort THEN {
                stringToFile(fullFormattedText(), (OVERRIDE nameCodepageDirectPrint(labelType(stickerTrans)), 'CP866'), '');
                writeToComPortJssc(resultFile(), (OVERRIDE baudrateComNetworkPrinder(), 9600), INTEGER (replace(path(printer()), 'COM', '')));
                printed() <- TRUE;
            }
            WHEN networkPrinterType(printer()) == NetworkPrinterType.clientFile THEN {
                stringToFile(fullFormattedText(), (OVERRIDE nameCodepageDirectPrint(labelType(stickerTrans)), 'CP866'), '');
                WRITE CLIENT resultFile() TO path(printer());
                printed() <- TRUE;
            }
            ELSE { // в том числе, для NetworkPrinterType.clientPrintService
                writeToPrinter(fullFormattedText(), (OVERRIDE nameCodepageDirectPrint(labelType(stickerTrans)), 'CP866'), path(printer()));
                printed() <- TRUE;
            }
        }
        ELSE
            MESSAGE 'Принтеры не найдены' NOWAIT;
        
    }
}

customPrint (StickerTransaction stickerTrans) {
    fullFormattedText() <- NULL;
    formattedText() <- text(stickerTrans);

    fillFormattedTextData(stickerTrans);

    fullFormattedText() <- formattedText();
    printText(stickerTrans) <- formattedText();

    printed() <- NULL;

    sendToPrinter(stickerTrans);

    IF NOT printed() THEN {
        DELETE stickerTrans;
    }
}

print 'Печать этикеток'(StickerTransaction t)  {
    IF textTemplate(labelType(t)) THEN
        customPrint(t);
}

EXTEND FORM networkPrintersList
    PROPERTIES (p) namePrintLabelType AFTER nameOverNetworkPrinterType(p)
    FILTERGROUP stockPrinter
        FILTER 'По текущему складу' stock(p) == stock(currentComputer())
    FILTERGROUP inEmployee
        FILTER 'Отмеченные' in(p,e) DEFAULT
;