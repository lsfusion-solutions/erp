MODULE Tax;

REQUIRE System, Utils, Historizable, Hierarchy, Country, Finance;

// ---------------------------------- Налог --------------------------------------- //

CLASS Tax 'Налоги' {
    taxVAT 'НДС',
    taxNP 'Налог с продаж'
}
FORM taxDialog
    OBJECTS t = Tax
    PROPERTIES(t) staticCaption
    LIST Tax OBJECT t
;

// ---------------------------------- Шкала налога --------------------------------------- //

CLASS Range 'Шкала';
TABLE range(Range);
number 'Шкала' = DATA INTEGER (Range) IN id CHARWIDTH 4;

tax = DATA Tax (Range) NONULL;
nameTax 'Налог' (Range range) = staticCaption(tax(range)) IN id;

country = DATA Country (Range) NONULL AUTOSET;
nameCountry 'Страна' (Range range) = name(country(range)) IN id;

countRange 'Кол-во шкал' (tax, country) = GROUP SUM 1 IF Range range IS Range BY tax(range), country(range);

maxDataRange(Tax tax, Country country) = OVERRIDE [ GROUP MAX number(Range range) BY tax(range), country(range)](tax, country), 0 IF tax IS Tax AND country IS Country;
addNewRange 'Добавить шкалу'(Tax tax, Country country)  { 
    NEW r = Range {
        number(r) <- maxDataRange(tax, country) + 1;
        country(r) <- country;
        tax(r) <- tax;
    }
} TOOLBAR IMAGE 'add.png';

CLASS RangeType 'Для каких подразделений действует шкала' {
    common 'Общий',
    units 'Для подразделений'
}
FORM rangeTypes 'Тип шкалы'
    OBJECTS t = RangeType
    PROPERTIES(t) READONLY staticCaption
    LIST RangeType OBJECT t
;

//extraRange 'Дополнительная' = DATA BOOLEAN (Range);

rangeType = DATA RangeType (Range) NONULL;
nameRangeType 'Тип шкалы' = staticCaption(rangeType(Range range)) IN base;

isUnitsType(Range range) = rangeType(range) == RangeType.units;
isCommonssType(Range range) = rangeType(range) == RangeType.common;

rangeType(Range range) <- RangeType.common WHEN SET(range IS Range);     /// потом согласовать, какое значение должно быть по умолчанию ///

// ----------------------------- Разбиение шкалы для подразделений ------------------------------------- //

CLASS ABSTRACT TaxUnitGroup 'Группа налогового субъекта';
TABLE taxUnitGroup(TaxUnitGroup);

name 'Наименование' = ABSTRACT ISTRING[150](TaxUnitGroup);

TABLE taxUnitGroupTaxUnitGroup(TaxUnitGroup, TaxUnitGroup);
@defineHierarchyAbstract (taxUnitGroup);

CLASS ABSTRACT TaxUnit 'Налоговый субъект';
TABLE taxUnit(TaxUnit);

taxUnitGroup = ABSTRACT TaxUnitGroup (TaxUnit) MATERIALIZED;
description 'Название налогового субъекта' = ABSTRACT ISTRING[255] (TaxUnit) MATERIALIZED;

TABLE rangeTaxUnit (Range, TaxUnit);
in 'Вкл.' (range, taxUnit) = DATA BOOLEAN (Range, TaxUnit);
in (Range range, TaxUnit taxUnit) => isUnitsType(range) RESOLVE RIGHT;

extra 'Дополнительная' = DATA BOOLEAN (Range); // Когда несколько расчетных ставок
note 'Примечание' = DATA ISTRING[100] (Range);

range 'Шкала по налогу и субъекту' (tax, TaxUnit taxUnit) = GROUP AGGR Range range
                                                                       WHERE in(range, taxUnit) AND Tax.taxVAT == tax(range) AND NOT extra(range) BY tax(range);

rangeVAT 'Шкала субъекту' (TaxUnit taxUnit) = range (Tax.taxVAT, taxUnit);


// ---------------------------------- История изменений шкалы --------------------------------------- //

CLASS Rate 'История изменений шкалы';
TABLE rate(Rate);

@defineCreated(Rate);

range = DATA Range (Rate);
quantityRate 'Количество историй' (range) = GROUP SUM 1 IF Rate rate BY range(rate);

value 'Значение ставки' = DATA NUMERIC[10,5] (Rate) IN id NONULL;
dateFrom 'Действует с' = DATA DATE (Rate) IN base INDEXED;

valueRate 'На дату' (range, DATE date) =
                             GROUP LAST value(Rate rate)
                                   ORDER dateFrom(rate), rate
                                   WHERE dateFrom(rate) <= date
                                   BY range(rate) COMPLEX CHARWIDTH 5;

valueRate (Range r) = valueRate(r, currentDate()) MATERIALIZED;

INDEX range(Rate rate), dateFrom(rate), rate;

dateFromRate 'Действует (с)' (range, DATE date) =
                             GROUP LAST dateFrom(Rate rate)
                                   ORDER dateFrom(rate), rate
                                   WHERE dateFrom(rate) <= date
                                   BY range(rate) COMPLEX;

valueCurrentRate 'Действующая ставка' (Range range) = valueRate(range, currentDate()) IN base MATERIALIZED;

dateFromCurrentRate 'Действует (с)' (Range range) = dateFromRate(range, currentDate()) IN base;

// для импорта
valueCurrentVAT 'Шкала НДС по значению' (country, doubleValue) = GROUP MIN Range range BY country(range), valueCurrentRate (range);

valueCurrentVATDefault 'Шкала по значению' (NUMERIC[10,5] doubleValue) = valueCurrentVAT(defaultCountry(), doubleValue);

valueVAT 'НДС, %' (TaxUnit taxUnit, DATE date) = valueRate(range(Tax.taxVAT, taxUnit), date);
currentVATDate 'НДС, %' (TaxUnit taxUnit) = valueRate(range(Tax.taxVAT, taxUnit), currentDate());

in = in(range(Rate rate), TaxUnit taxUnit);

stringEqualsAll(BPSTRING[3] string) = string == BPSTRING[3]('Все');
// --------------------------------------- Формы ------------------------------------- //

FORM tax 'Налог'
    OBJECTS           t = Tax PANEL
    PROPERTIES(t)     staticCaption

    OBJECTS c = Country PANEL
    PROPERTIES(c) SELECTOR    name

    OBJECTS           ra = Range
    PROPERTIES(ra)    number, nameRangeType, extra READONLYIF isCommonssType(ra), note, DELETE GRID
    PROPERTIES(ra)    READONLY valueCurrentRate, dateFromCurrentRate    
    PROPERTIES(t, c)  addNewRange DRAW ra
    FILTERS           tax(ra) == t
    FILTERS           country(ra) == c

    OBJECTS           rt=Rate
    PROPERTIES(rt)    value, dateFrom, createdTime, createdNameUser, NEW, DELETE GRID
    FILTERS           range(rt) == ra
    ORDERS dateFrom(rt)

    TREE treeTaxUnit  a=BPSTRING[3], ug = TaxUnitGroup PARENT parent(ug)
    PROPERTIES READONLY VALUE(a), name(ug)
    FILTERS           stringEqualsAll(a)

    OBJECTS           u=TaxUnit
    PROPERTIES(u) READONLY objectClassName, description
    PROPERTIES(ra, u)      in SHOWIF isUnitsType(ra)
    FILTERS           taxUnitGroup(u) == ug OR u IS TaxUnit AND NOT ug

    FILTERGROUP filters
        FILTER 'Показывать магазины только для данного налога' in(ra, u) 'F10'

    EDIT Tax OBJECT t
;

DESIGN tax {
    BOX {
        fill = 1;
        NEW row1 {
            horizontal = TRUE;
            MOVE BOX(t) {
                PANEL(t) {
                    horizontal = TRUE;
                }
            }
            MOVE BOX(c);
        }
        NEW firstCase {
            horizontal = TRUE;
            fill = 1;
            MOVE BOX(ra);
            MOVE BOX(rt);
        }
        NEW secondCase {
            horizontal = TRUE;
            fill = 1;
            MOVE BOX(TREE treeTaxUnit) {
                caption = 'Налоговые субъекты';
                fill = 1;
            }
            MOVE BOX(u) {
                fill = 3;
            }
        }
        MOVE TOOLBARBOX;
    }
}

FORM taxes 'Налоги'
    OBJECTS           t=Tax
    PROPERTIES(t)     READONLY staticCaption
    PROPERTIES(t)     NEWSESSION EDIT, DELETE 

    OBJECTS           c=Country
    PROPERTIES(c)     name
    FILTERS           countRange(t, c)

    OBJECTS ra=Range
    PROPERTIES(ra) READONLY number, valueCurrentRate, dateFromCurrentRate, nameRangeType, note, quantityRate
    FILTERS                 tax(ra) == t,
                            country(ra) == c

    OBJECTS u=TaxUnit
    PROPERTIES(u)     READONLY description
    FILTERS                    in(ra, u)
;

DESIGN taxes {

    NEW topContainer{
        fill = 1;
        NEW row1 {
            horizontal = TRUE;
            fill = 1;
            MOVE BOX(t);
            MOVE BOX(c);
        }
        NEW firstCase {
            fill = 1;
            MOVE BOX(ra);
            MOVE BOX(u);
        }
    }
    MOVE TOOLBARBOX;
}

FORM range 'Шкала'
    OBJECTS r=Range
    PROPERTIES(r) READONLY number, nameTax, nameCountry, nameRangeType, note, valueCurrentRate, dateFromCurrentRate
    LIST Range OBJECT r
;

FORM rangeDialog 'Шкала'
    OBJECTS c = Country PANEL
    OBJECTS r=Range
    PROPERTIES(r) READONLY number, nameTax, nameCountry, nameRangeType, note, valueCurrentRate, dateFromCurrentRate
    FILTERS country(r) == c
;

NAVIGATOR {
    financeMasterData {
        NEW taxes;
    }
}


// ----------------------------------------- Макросы по объявлению налогов в документах ---------------------------- //

// ---------- с префиксом
META defineDocumentDetailVATCustom(detail, countryProp, prefix, caption)
    prefix##VAT(detail) = DATA Range (###detail);
    number###prefix##VAT 'НДС, номер'###caption (###detail detail) = number(prefix##VAT(detail));
    value###prefix##VAT 'НДС, %'###caption (detail) = DATA NUMERIC[10,5] (###detail) CHARWIDTH 7;

    overValue###prefix##VAT 'НДС (для расчета), %'###caption (detail) = ABSTRACT NUMERIC[10,5] (###detail);
    calcValue###prefix##VAT 'НДС (перегруженный), %'###caption (###detail detail) = OVERRIDE overValue###prefix##VAT (detail), value###prefix##VAT (detail);

    CONSTRAINT tax(prefix##VAT(###detail detail)) != Tax.taxVAT OR
               country(prefix##VAT(detail)) != countryProp(detail)
               CHECKED BY prefix##VAT[###detail]
               MESSAGE 'ошибка: Шкала и страна строки должна соответствовать шкале и строке НДС: Tax'##caption;
END

META defineDocumentAbstractDetailVATCustom(detail, prefix, caption)
    prefix##VAT(detail) = ABSTRACT Range (###detail) MATERIALIZED;
    number###prefix##VAT 'НДС, номер'###caption (###detail detail) = number(prefix##VAT(detail));
    value###prefix##VAT 'НДС, %'###caption (detail) = ABSTRACT NUMERIC[10,5] (###detail) CHARWIDTH 7 MATERIALIZED;
    calcValue###prefix##VAT 'НДС (перегруженный), %'###caption (detail) = ABSTRACT NUMERIC[10,5] (###detail) MATERIALIZED;

END

META defineDocumentInterfaceDetailVATCustom(detail, countryProp, prefix, caption)
    @defineDocumentAbstractDetailVATCustom(detail, prefix, caption);
    @defineDocumentDetailVATCustom(user###detail, countryProp, prefix, caption);
    prefix##VAT(User###detail detail) += prefix##VAT(detail);
    value###prefix##VAT(User###detail detail) += value###prefix##VAT(detail);
    calcValue###prefix##VAT(User###detail detail) += calcValue###prefix##VAT(detail);
END

META defineDocumentDetailVAT(object, countryProp, prefix, caption)
    @defineDocumentDetailVATCustom(object##Detail, countryProp, prefix, caption);
END
META defineDocumentAbstractDetailVAT(object, prefix, caption)
    @defineDocumentAbstractDetailVATCustom(object##Detail, prefix, caption);
END
META defineDocumentInterfaceDetailVAT(object, countryProp, prefix, caption)
    @defineDocumentInterfaceDetailVATCustom(object##Detail, countryProp, prefix, caption);
END

// -------------------------- Галочка включен НДС или нет -------------------------------- //

META defineDocumentDetailInclVATCustomPrefix (detail)
    includeVAT 'Вкл. НДС' = DATA BOOLEAN (###detail);
END
META defineDocumentAbstractDetailInclVATCustomPrefix (detail)
    includeVAT 'Вкл. НДС' = ABSTRACT BOOLEAN (###detail) MATERIALIZED;
END
META defineDocumentInterfaceDetailInclVATCustomPrefix (detail)
    @defineDocumentAbstractDetailInclVATCustomPrefix(detail);
    @defineDocumentDetailInclVATCustomPrefix(user###detail);
    includeVAT (User###detail detail) += includeVAT(detail);
END

META defineDocumentDetailMPVATCustomPrefix (detail, prefix, prefixRange)
    prefix##MVATPrice (###detail detail) =
        IF includeVAT(detail)
            THEN
                prefix##Price(detail) * 100.0 /(100.0 + calcValueVAT(detail))
            ELSE
                prefix##Price(detail);

    prefix##PVATPrice (###detail detail) =
        IF includeVAT(detail)
            THEN
                prefix##Price(detail)
            ELSE
                prefix##Price(detail) * (100.0 + calcValueVAT(detail)) / 100.0;

END
META defineDocumentInterfaceDetailMPVATCustomPrefix (detail, prefix, prefixRange)
    @defineDocumentDetailMPVATCustomPrefix (detail, prefix, prefixRange);
    @defineDocumentDetailMPVATCustomPrefix (user###detail, prefix, prefixRange);
END


// ---------- без префикса
META defineDocumentDetailVATCustom(detail, countryProp)
    @defineDocumentDetailVATCustom(detail, countryProp, , );
END

META defineDocumentAbstractDetailVATCustom(detail)
    @defineDocumentAbstractDetailVATCustom(detail, , );
END

META defineDocumentInterfaceDetailVATCustom(detail, countryProp)
    @defineDocumentInterfaceDetailVATCustom(detail, countryProp, , );
END

META defineDocumentDetailVAT(object, countryProp)
    @defineDocumentDetailVATCustom(object##Detail, countryProp);
END
META defineDocumentAbstractDetailVAT(object)
    @defineDocumentAbstractDetailVATCustom(object##Detail);
END
META defineDocumentInterfaceDetailVAT(object, countryProp)
    @defineDocumentInterfaceDetailVATCustom(object##Detail, countryProp);
END

// ------------ derive
META deriveDocumentDetailValueVATCustom(detail, prefix)
    overDeriveValue###prefix##VAT (detail) = ABSTRACT NUMERIC[10,5] (###detail);  
    overSetValue###prefix##VAT (detail) = ABSTRACT VALUE NUMERIC[10,5] (###detail);     
    calcSetValue###prefix##VAT (###detail detail) = OVERRIDE overSetValue###prefix##VAT(detail),
                                                              (IF prefix##VAT(detail) THEN
                                                                valueRate(prefix##VAT(detail), date(detail))
                                                              ELSE overDeriveValue###prefix##VAT (detail));
    changedValue###prefix##VAT(detail) = ABSTRACT VALUE BOOLEAN (###detail);
    WHEN LOCAL GOAFTER prefix##VAT[###detail]
        (CHANGED(prefix##VAT(###detail detail)) OR (CHANGED (dateTime(detail)) AND NOT isPosted(detail)) OR changedValue###prefix##VAT(detail)) AND v == calcSetValue###prefix##VAT (detail) AND NOT CHANGED(value###prefix##VAT (detail)) DO {
            value###prefix##VAT (detail) <- v;
        }
END
META deriveDocumentDetailValueVAT(object, prefix)
    @deriveDocumentDetailValueVATCustom(object##Detail, prefix);
END
META deriveDocumentDetailValueVAT(object)
    @deriveDocumentDetailValueVAT(object, );
END

// ---------- Суммы
META defineDocumentDetailVATSumCustom(detail, prefix, currencyProp)
    VATSum###detail 'Сумма НДС' (detail) = roundPriceCurrency((sum###detail(detail) * calcValueVAT###detail (detail) / 100), currencyProp###detail(detail));
    prefix###sum###detail 'Сумма с НДС' (detail) = sum###detail(detail) (+) VATSum###detail(detail);
END
META defineDocumentInterfaceDetailVATSumCustom(detail, prefix, currencyProp)
    @defineDocumentDetailVATSumCustom(detail, prefix, currencyProp);
    @defineDocumentDetailVATSumCustom(user###detail, prefix, currencyProp);
END

META defineDocumentDetailVATSum(object, currencyProp)
    @defineDocumentDetailVATSumCustom(object##Detail, object, currencyProp);
END
META defineDocumentInterfaceDetailVATSum(object, currencyProp)
    @defineDocumentInterfaceDetailVATSumCustom(object##Detail, object, currencyProp);
END

META defineDocumentDetailVATSum(object)
    @defineDocumentDetailVATSum(object, currency);
END
META defineDocumentInterfaceDetailVATSum(object)
    @defineDocumentInterfaceDetailVATSum(object, currency);
END

//-- Сумма НДС в detail
META defineDocumentDetailVATDataSumCustom (detail, prefix)
    VATSum 'Сумма НДС' (detail) = DATA NUMERIC[18,4] (###detail) CHARWIDTH 8;
    prefix##Sum 'Сумма с НДС' (detail) = DATA NUMERIC[18,4] (###detail) CHARWIDTH 9;
END
META defineDocumentAbstractDetailVATDataSumCustom (detail, prefix)
    VATSum 'Сумма НДС' (detail) = ABSTRACT NUMERIC[18,4] (###detail) MATERIALIZED CHARWIDTH 8;
    prefix##Sum 'Сумма с НДС' (detail) = ABSTRACT NUMERIC[18,4] (###detail) MATERIALIZED CHARWIDTH 9;
END
META defineDocumentInterfaceDetailVATDataSumCustom (detail, prefix)
    @defineDocumentAbstractDetailVATDataSumCustom(detail, prefix);
    @defineDocumentDetailVATDataSumCustom(user###detail, prefix);
    VATSum (User###detail detail) += VATSum(detail);
    prefix##Sum (User###detail detail) += prefix##Sum (detail);
END

META defineDocumentDetailVATDataSum (object, prefix)
    @defineDocumentDetailVATDataSumCustom(object##Detail, prefix);
END
META defineDocumentAbstractDetailVATDataSum (object, prefix)
    @defineDocumentAbstractDetailVATDataSumCustom(object##Detail, prefix);
END
META defineDocumentInterfaceDetailVATDataSum (object, prefix)
    @defineDocumentInterfaceDetailVATDataSumCustom(object##Detail, prefix);
END

// ------------ derive
META deriveDocumentDetailVATDataSumCustom(detail, currencyProp)
    overCalcVATSum = ABSTRACT NUMERIC[18,4] (###detail);
    VATSum (###detail detail)  <- OVERRIDE overCalcVATSum(detail), round((sum(detail) * calcValueVAT (detail) / 100), currencyProp(detail))
                    WHEN DO CHANGED(sum(detail)) OR CHANGED (valueVAT (detail)) OR CHANGED (currencyProp (detail));
END
META deriveDocumentDetailVATDataSum(object, currencyProp)
    @deriveDocumentDetailVATDataSumCustom(object##Detail, currencyProp);
END
META deriveDocumentDetailVATDataSum(object)
    @deriveDocumentDetailVATDataSum(object, currency);
END

META deriveDocumentDetailVATPrefixSumCustom(detail, prefix)
    overCalc###prefix##Sum = ABSTRACT NUMERIC[18,4] (###detail);
    prefix##Sum (###detail detail) <- OVERRIDE overCalc###prefix##Sum(detail), (sum(detail) (+) VATSum(detail))
        WHEN CHANGED(sum(detail)) OR CHANGED(VATSum(detail));
END
META deriveDocumentDetailVATPrefixSum(object, prefix)
    @deriveDocumentDetailVATPrefixSumCustom(object##Detail, prefix);
END

META deriveDocumentDetailVATPrefixSum(object)
    @deriveDocumentDetailVATPrefixSum(object, prefix);
END

// ----------------------------- Объявление действий для цен с НДС и без ------------------------- //

// Изменение цены без НДС
META defineDocumentDetailPriceVATOnChangeCustom (detail)
    overChangePrice  ABSTRACT LIST ( ###detail);
    changePrice (###detail detail)  { 
        INPUT n = NUMERIC[16,4] DO {
            price (detail) <- n;
            invoicePrice (detail) <- NUMERIC[16,4](round2(price(detail) * (100 + calcValueVAT(detail)) / 100));
            overChangePrice(detail);
        }
    }
END

META defineDocumentDetailPriceVATOnChange (object)
    @defineDocumentDetailPriceVATOnChangeCustom(object###Detail);
END

// Изменение щкалы НДС
META defineDocumentDetailNumberVATOnChangeCustom (detail, stockProp)
    overChangeNumberVAT ABSTRACT LIST (###detail); 
    changeNumberVAT (###detail detail)  { 
        DIALOG rangeDialog OBJECTS c = country###stockProp(detail), r = VAT(detail) INPUT NULL DO {
            VAT (detail) <- r;
            invoicePrice (detail) <- round2(price (detail) * (100 + calcValueVAT(detail))/100);
            overChangeNumberVAT(detail);
        }
    }
END

META defineDocumentDetailNumberVATOnChange (object, stockProp)
    @defineDocumentDetailNumberVATOnChangeCustom(object###Detail, stockProp);
END

// Изменение ставки НДС
META defineDocumentDetailValueVATOnChangeCustom (detail)
    overChangeValueVAT ABSTRACT LIST (###detail);
    changeValueVAT (###detail detail)  { 
        INPUT n = NUMERIC[10,5] DO {
            valueVAT (detail) <- n;
            VAT(detail) <- valueCurrentVAT(countrySupplierStock(detail), n);
            invoicePrice (detail) <- round2(price (detail) * (100 + n)/100);
            overChangeValueVAT(detail);
        }
    }
END

META defineDocumentDetailValueVATOnChange (object)
    @defineDocumentDetailValueVATOnChangeCustom(object###Detail);
END

// Изменение цены с НДС
META defineDocumentDetailInvoicePriceVATOnChangeCustom (detail)
    skipChangeInvoicePrice = ABSTRACT BOOLEAN (###detail);
    overChangeInvoicePrice  ABSTRACT LIST (###detail);   
    changeInvoicePrice (###detail detail)  { 
        INPUT n = NUMERIC[16,4] DO {
            invoicePrice (detail) <- n;
            price (detail) <- round2(invoicePrice (detail) * 100/(100 + calcValueVAT(detail))) WHERE NOT skipChangeInvoicePrice(detail);
            overChangeInvoicePrice(detail);
        }
    }
END

META defineDocumentDetailInvoicePriceVATOnChange (object)
    @defineDocumentDetailInvoicePriceVATOnChangeCustom(object###Detail);
END

//-- НДС - Розничный

META defineDocumentDetailVATDataSumCustomPrefix (detail, prefix, caption)
    prefix##VATSum 'Сумма НДС'###caption = DATA NUMERIC[18,4] (###detail) CHARWIDTH 8;
END
META defineDocumentAbstractDetailVATDataSumCustomPrefix (detail, prefix, caption)
    prefix##VATSum 'Сумма НДС'###caption = ABSTRACT NUMERIC[18,4] (###detail) CHARWIDTH 8 MATERIALIZED;
END
META defineDocumentInterfaceDetailVATDataSumCustomPrefix (detail, prefix, caption)
    @defineDocumentAbstractDetailVATDataSumCustomPrefix(detail, prefix, caption);
    @defineDocumentDetailVATDataSumCustomPrefix(user###detail, prefix, caption);
    prefix##VATSum (User###detail detail) += prefix##VATSum(detail);
END
META defineDocumentInterfaceDetailVATDataSumPrefix (object, prefix, caption)
    @defineDocumentInterfaceDetailVATDataSumCustomPrefix(object##Detail, prefix, caption);
END
META defineDocumentInterfaceDetailVATDataSumPrefix (object, prefix)
    @defineDocumentInterfaceDetailVATDataSumPrefix(object, prefix, );
END

META deriveDocumentDetailReverseVATSumCustomPrefix(detail, prefixA, prefixB, currencyProp)
    prefixA##VATSum (###detail detail)  <- round([ X*Y/(100+Y)](prefixB###sum(detail), calcValue###prefixA##VAT(detail)), currencyProp(detail))
                    WHEN CHANGED(prefixB###sum(detail)) OR CHANGED (calcValue###prefixA##VAT(detail)) OR CHANGED (currencyProp(detail));

END
META deriveDocumentDetailReverseVATSumPrefix(object, prefixA, prefixB, currencyProp)
    @deriveDocumentDetailReverseVATSumCustomPrefix(object##Detail, prefixA, prefixB, currencyProp);
END
META deriveDocumentDetailReverseVATSumPrefix(object, prefixA, prefixB)
    @deriveDocumentDetailReverseVATSumPrefix(object, prefixA, prefixB, currency);
END
META deriveDocumentDetailReverseVATSumRoundCustomPrefix(detail, prefixA, prefixB, currencyProp, roundProp)
    prefixA##VATSum (###detail detail)  <- NUMERIC[18,4](Utils.round([ X*Y/(100+Y)](prefixA##Sum(detail), calcValue###prefixA##VAT(detail)), roundProp(detail)))
                    WHEN CHANGED(prefixA##Sum(detail)) OR CHANGED (calcValue###prefixA##VAT(detail)) OR CHANGED (currencyProp(detail));
END
META deriveDocumentDetailReverseVATSumRoundPrefix(object, prefixA, prefixB, currencyProp,roundProp)
    @deriveDocumentDetailReverseVATSumRoundCustomPrefix(object##Detail, prefixA, prefixB, currencyProp,roundProp);
END
META deriveDocumentDetailReverseVATSumRoundPrefix(object, prefixA, prefixB, roundProp)
    @deriveDocumentDetailReverseVATSumRoundPrefix(object, prefixA, prefixB, currency, roundProp);
END
//-- Сумма НДС в документе
META defineDocumentHeaderVATSum (object, detail, prefix)
    VATSum###detail 'Сумма НДС' (object) = GROUP SUM VATSum(###detail idetail) BY object(idetail) CHARWIDTH 9 IN documentSum;
    prefix##Sum###detail 'Сумма с НДС' (object) = GROUP SUM prefix##Sum(###detail idetail) BY object(idetail) CHARWIDTH 10 IN documentSum;
END
META defineDocumentInterfaceHeaderVATSum (object, detail, prefix)
    @defineDocumentHeaderVATSum(object, detail, prefix);
    @defineDocumentHeaderVATSum(user###object, user###detail, prefix);
END

META defineDocumentHeaderVATSum(object, prefix)
    @defineDocumentHeaderVATSum(object, object##Detail, prefix);
END
META defineDocumentInterfaceHeaderVATSum(object, prefix)
    @defineDocumentInterfaceHeaderVATSum(object, object##Detail, prefix);
END

META defineDocumentHeaderVATSum(object)
    @defineDocumentHeaderVATSum(object, object##Detail, );
END

// ------------------------------------------------------- Стандартные данные ----------------------------------- //

loadDefaultVAT 'Добавить значение НДС'(BPSTRING[3] idCountry, INTEGER number, NUMERIC[10,5] value)  { 
    NEW rn = Range {
       rangeType(rn) <- RangeType.common;
       tax(rn) <- Tax.taxVAT;
       country(rn) <- country(idCountry);
       number(rn) <- number;
       NEW ra = Rate {
          range(ra) <- rn;
          value(ra) <- value;
          dateFrom(ra) <- 2001_01_01;
       };
    };
};

loadDefaultVATs 'Загрузить стандартные НДС'  ABSTRACT LIST ( ) IN loadDefault;

EXTEND FORM defaultData
    PROPERTIES() loadDefaultVATs
;
DESIGN defaultData {
    commons {
        MOVE PROPERTY(loadDefaultVATs());
    }
}