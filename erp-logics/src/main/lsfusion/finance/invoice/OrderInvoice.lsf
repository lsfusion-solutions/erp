MODULE OrderInvoice;

REQUIRE Order, Invoice;

NAMESPACE Invoice;

createdUser = DATA LOCAL BOOLEAN (Invoice, Order);

createUserInvoice 'Создать накладную'  ABSTRACT LIST ( Order);
createUserInvoicePosted 'Создать проведенную накладную'  ABSTRACT LIST ( Order);

orderDetail = ABSTRACT OrderDetail (InvoiceDetail) MATERIALIZED INDEXED;

invoiced 'Кол-во (выписано)' (OrderDetail orderDetail) = GROUP SUM quantity(InvoiceDetail d) IF isPosted(d) BY orderDetail(d) MATERIALIZED;
                                                          
invoicedOrderDetail 'Кол-во (выписано)' = GROUP SUM invoiced(OrderDetail detail) BY order(detail) MATERIALIZED;                                                         

toInvoice 'Не выписано' (OrderDetail orderDetail) = quantity (orderDetail) (-) invoiced(orderDetail);
toInvoice 'Не выписано' (order) = GROUP SUM 1 IF toInvoice(OrderDetail orderDetail) > 0 BY order(orderDetail) MATERIALIZED;

quantity (order, invoice) = GROUP SUM quantity(InvoiceDetail invoiceDetail)
                                               BY order(orderDetail(invoiceDetail)),
                                                  invoice(invoiceDetail);

seriesNumberOrder 'Заказы' (Invoice invoice) = GROUP
                                              CONCAT seriesNumber(Order order) IF quantity (order, invoice), ','
                                              ORDER order CHARWIDTH 10;

noteOrder 'Примечание (заказ)' (Invoice invoice) = GROUP
                                              CONCAT note(Order order) IF quantity (order, invoice), ','
                                              ORDER order CHARWIDTH 30;

GROUP orders 'Приемка по заказам' : base;

forbidInvoice = ABSTRACT BOOLEAN (Order);

// -------------- Создание накладной на основе заказа (для абстрактного заказа) ------------------------ // 

minSelectedOrder = GROUP MIN Order o IF selected(o); 

overCreateMultiUserInvoice  ABSTRACT LIST ( Order);

//countSelectedOrder 'Кол-во отм.' = GROUP SUM 1 IF selected(Order order);
countSelectedClass 'Кол-во классов' = GROUP SUM 1 IF [ GROUP SUM 1 IF selected(Order order) BY objectClassName(order)](BPISTRING[100] name);
countSelectedFromClass 'Кол-во отправителей' = GROUP SUM 1 IF [ GROUP SUM 1 IF selected(Order order) BY from(order)](LegalEntity from);
countSelectedToClass 'Кол-во получателей' = GROUP SUM 1 IF [ GROUP SUM 1 IF selected(Order order) BY to(order)](LegalEntity to);
countSelectedFromStockClass 'Кол-во складов отправителей' = GROUP SUM 1 IF [ GROUP SUM 1 IF selected(Order order) BY fromStock(order)](Stock fromStock);
countSelectedToStockClass 'Кол-во складов получателей' = GROUP SUM 1 IF [ GROUP SUM 1 IF selected(Order order) BY toStock(order)](Stock toStock);

addUserInvoice  ABSTRACT LIST ( Order);

createMultiUserInvoice 'Создать накладную'(Order order)  { 
    IF countSelectedOrder() THEN {
        IF countSelectedFromClass() != 1 OR countSelectedToClass() != 1 OR countSelectedFromStockClass() != 1 OR countSelectedToStockClass() != 1 THEN {
            MESSAGE 'Выбраны заказы с разными покупателями, поставщиками или их складами';               
        } ELSE {
            IF countSelectedClass() = 1 THEN {
                overCreateMultiUserInvoice(minSelectedOrder());
            } ELSE {
                MESSAGE 'Выбраны заказы с разными классами';
            }        
        }
    } ELSE {
        addUserInvoice(order);            
    }    
} TOOLBAR;

useConfimForCreateDetail 'Запрашивать подтверждение на создание строк накладной по заказу' = DATA BOOLEAN();

EXTEND FORM options
    PROPERTIES() useConfimForCreateDetail
;

DESIGN options {
    orders {
        MOVE PROPERTY(useConfimForCreateDetail());    
    }
}

skipDropOrderDetail = DATA LOCAL BOOLEAN ();   

META defineOrderInvoice(sign, stockProp)

    orderDetail = ABSTRACT OrderDetail (InvoiceDetail) MATERIALIZED;
    INDEX orderDetail(InvoiceDetail id), sku(id);
    orderDetail[Invoice.InvoiceDetail] (InvoiceDetail invoiceDetail) += orderDetail(invoiceDetail);

    orderDetail = DATA OrderDetail (UserInvoiceDetail) INDEXED;
    orderDetail(UserInvoiceDetail invoiceDetail) += orderDetail(invoiceDetail);

    overCopy[UserInvoiceDetail,UserInvoiceDetail](UserInvoiceDetail d, UserInvoiceDetail detail) + {       
        orderDetail(d) <- orderDetail(detail);
    }  
    
    skipNullOrderDetailInvoiceDetail = ABSTRACT BOOLEAN (UserInvoice);
    
    CONSTRAINT (SET(isPosted(UserInvoiceDetail detail)) OR CHANGED(operation(detail)) OR CHANGED(orderDetail(detail))) AND isPosted(detail)
        AND forbidNullOrderDetailInvoiceDetail(operation(detail)) AND NOT skipNullOrderDetailInvoiceDetail(userInvoice(detail))  AND NOT orderDetail(detail)
        MESSAGE 'Запрещено проводить накладные без привязки строк к заказу';
    CONSTRAINT supplier(UserInvoiceDetail detail) != supplier(orderDetail(detail))
        CHECKED BY orderDetail[UserInvoiceDetail]
            MESSAGE 'Поставщик в заказе и накладной должны соответствовать друг другу';
    CONSTRAINT customer(UserInvoiceDetail detail) != customer(orderDetail(detail))
        CHECKED BY orderDetail[UserInvoiceDetail]
            MESSAGE 'Покупатель в заказе и накладной должны соответствовать друг другу';
    CONSTRAINT sku(UserInvoiceDetail detail) != sku(orderDetail(detail))
        CHECKED BY orderDetail[UserInvoiceDetail]
            MESSAGE 'Товар в заказе и накладной должны соответствовать друг другу';
        
    WHEN LOCAL CHANGED(sku(UserInvoiceDetail detail)) AND NOT CHANGED(orderDetail(detail)) AND NOT skipDropOrderDetail() AND NOT sku(detail) = sku(orderDetail(detail)) DO
        orderDetail(detail) <- NULL;


    GROUP order 'Информация о заказе' : public;

    descriptionOrder 'Заказ' (InvoiceDetail invoiceDetail) = descriptionIndex(orderDetail(invoiceDetail)) IN order;
    descriptionOrder 'Заказ' (UserInvoiceDetail userInvoiceDetail) = descriptionIndex(orderDetail(userInvoiceDetail)) IN order;

    quantityInvoiceDetail (order, invoice) = GROUP SUM quantity(InvoiceDetail invoiceDetail) BY order(orderDetail(invoiceDetail)), invoice(invoiceDetail);
    countInvoiceDetail(order, invoice) = GROUP SUM 1 BY order(orderDetail(InvoiceDetail invoiceDetail)), invoice(invoiceDetail) MATERIALIZED;
    orders 'Заказы'(Invoice invoice)  = GROUP
                                             CONCAT STRING[255](description(Order order)) IF countInvoiceDetail(order, invoice) , ', '
                                             ORDER order
                                             IN order CHARWIDTH 30;
                                             
    invoices 'Накладные'(Order order)  = GROUP
                                             CONCAT STRING[255](description(Invoice invoice)) IF countInvoiceDetail(order, invoice) , ', '
                                             ORDER invoice
                                             IN invoice CHARWIDTH 30;                                             

    invoiced 'Кол-во (выписано)' (OrderDetail orderDetail) = GROUP SUM quantity(InvoiceDetail invoiceDetail) IF isPosted(invoiceDetail)
                                                               BY orderDetail(invoiceDetail) MATERIALIZED;
                                                               
    invoicedOrderDetail 'Кол-во (выписано)' (order) = GROUP SUM invoiced(OrderDetail orderDetail) BY order(orderDetail) IN documentSum;

    toInvoice 'Не выписано' (OrderDetail orderDetail) = quantity (orderDetail) (-) invoiced(orderDetail);
    prevToInvoice (OrderDetail orderDetail) = PREV(toInvoice(orderDetail));
    toInvoice (order) = GROUP SUM toInvoice(OrderDetail orderDetail) IF toInvoice(orderDetail) >0 BY order(orderDetail);

    backgroundInvoice 'Цвет' (Order order) = RGB(175, 255, 175) IF order IS Order;

    quantityOrder 'К-во в заказе' (InvoiceDetail d) = quantity(orderDetail(d));
    overPriceOrder  = ABSTRACT NUMERIC[16,4] (InvoiceDetail);
    priceOrder 'Цена в заказе' (InvoiceDetail d) = OVERRIDE overPriceOrder(d), price(orderDetail(d));
    invoicePriceOrder 'Цена с НДС в заказе' (InvoiceDetail d) = invoicePrice(orderDetail(d));

    // ------------------------------- Создание нового инвойса на основе заказов ---------------------------- //

    inSupplier (order, Stock supplierStock) = GROUP SUM 1 IF supplierStock(OrderDetail orderDetail) == supplierStock BY order(orderDetail);
    inSupplier (order, LegalEntity legalEntity) = GROUP SUM 1 IF legalEntity(supplierStock(OrderDetail orderDetail)) == legalEntity BY order(orderDetail);

    inCustomer (order, Stock customerStock) = GROUP SUM 1 IF customerStock(OrderDetail orderDetail) == customerStock BY order(orderDetail);
    inCustomer (order, LegalEntity legalEntity) = GROUP SUM 1 IF legalEntity(customerStock(OrderDetail orderDetail)) == legalEntity BY order(orderDetail);

    useExplicitBatchDetailUserInvoice = ABSTRACT CASE BOOLEAN (Order);
    forceExplicitBatchDetailUserInvoice = ABSTRACT BOOLEAN (Order);

    differentStocksInDetails (Stock stock) = differentStocksInDetails(legalEntity(stock)) MATERIALIZED;

    in (OrderDetail orderDetail, UserInvoice userInvoice) = (orderDetail IS OrderDetail AND userInvoice IS UserInvoice AND NOT supplierStock(userInvoice)) OR
                                                           supplierStock(orderDetail)==supplierStock(userInvoice);

    overFill  ABSTRACT LIST ( UserInvoiceDetail, OrderDetail);
    overFill  ABSTRACT LIST ( UserInvoice, Order);
    skipFillPriceInvoiceOrder = ABSTRACT BOOLEAN (OrderDetail);
    //skipFillPriceInvoiceOrder = skipFillPriceInvoiceOrder(orderDetail(InvoiceDetail d));
    skipFillPriceInvoiceOrder = ABSTRACT BOOLEAN (InvoiceDetail);
    
    fill(UserInvoiceDetail id, OrderDetail od)  {    
        VAT(id) <- VAT(od);
        valueVAT(id) <- valueVAT(od);
        priceListType(id) <- priceListType(od);
        IF NOT (skipFillPriceInvoiceOrder(od) OR notFillPriceInvoiceOrder(operation(od))) THEN {
            price(id) <- price(od);
            invoicePrice(id) <- invoicePrice(od);
        }
    }

    toInvoice (Batch b, OrderDetail d) = PARTITION UNGROUP toInvoice
                                                               LIMIT STRICT currentBalance(b, stockProp##Stock(d)) IF skuCurrentBalance(b, stockProp##Stock(d)) == sku(d)
                                                               ORDER dateTime(b), b
                                                               BY d;

    orderCreateUserInvoice = ABSTRACT BPSTRING[100] (OrderDetail);
    skipCreateUserInvoice = ABSTRACT BOOLEAN (OrderDetail);
    overToInvoice = ABSTRACT CASE NUMERIC[16,5] (Batch, OrderDetail);
    overToInvoice(Batch batch, OrderDetail detail) += WHEN batch IS Batch AND detail IS OrderDetail THEN toInvoice(batch, detail);
    orderCreateUserInvoice ABSTRACT LIST (UserInvoice, Order);
    
    createDetail(UserInvoice userInvoice, Order order)  { 
        IF useExplicitBatchDetailUserInvoice(order) AND (explicitBatchLedger(stockProp##Stock(order)) OR forceExplicitBatchDetailUserInvoice(order)) THEN {
            // проходим по строкам, для которых не задана партия
            FOR order(OrderDetail orderDetail) == order AND NUMERIC[16,5] q == overToInvoice(Batch batch, orderDetail) AND NOT batch(orderDetail) AND NOT skipCreateUserInvoice(orderDetail)
                ORDER orderCreateUserInvoice(orderDetail), orderDetail 
                NEW d = UserInvoiceDetail DO {
                    userInvoice(d) <- userInvoice;
                    orderDetail(d) <- orderDetail;
                    sku(d) <- sku(orderDetail);
                    IF NOT skipFillBatch(d) THEN {
                        batch(d) <- batch;
                    }                    
                    quantity (d) <- q;
        
                    fill(d, orderDetail);
                    overFill(d, orderDetail);
            }
            // проходим по строкам, для которых задана партия
            FOR order(OrderDetail orderDetail) == order AND PREV(toInvoice(orderDetail)) AND batch(orderDetail) AND NOT skipCreateUserInvoice(orderDetail)
                ORDER orderCreateUserInvoice(orderDetail), orderDetail
                NEW d = UserInvoiceDetail DO {
                    userInvoice(d) <- userInvoice;
                    orderDetail(d) <- orderDetail;
                    sku(d) <- sku(orderDetail);
                    IF NOT skipFillBatch(d) THEN {
                        batch(d) <- batch(orderDetail);
                    }                     
                    quantity (d) <- PREV(toInvoice(orderDetail));
        
                    fill(d, orderDetail);
                    overFill(d, orderDetail);
            }
            orderCreateUserInvoice(userInvoice,order);
        } ELSE
            FOR order(OrderDetail orderDetail) == order AND
                toInvoice(orderDetail) > 0 // возможно еще нужно фильтровать по складам
                AND in(orderDetail, userInvoice) AND NOT skipCreateUserInvoice(orderDetail)
                ORDER orderCreateUserInvoice(orderDetail), orderDetail 
                NEW d = UserInvoiceDetail DO {
                    userInvoice(d) <- userInvoice;
                    orderDetail(d) <- orderDetail;
                    sku(d) <- sku(orderDetail);                    
                    IF NOT skipFillBatch(d) THEN {
                        batch(d) <- batch(orderDetail);
                    }                                       
                    quantity (d) <- toInvoice(orderDetail);

                    fill(d, orderDetail);
                    overFill(d, orderDetail);
            }
    }
    
    fillPrice(UserInvoice userInvoice, Order order)  { 
        IF notFillPriceInvoiceOrder(operation(order)) THEN {
            FOR userInvoice(UserInvoiceDetail d) == userInvoice AND PriceListType pt == priceListType(d) AND sku(d) NOINLINE (pt) DO {
                price(d) <- prevListMVAT (pt, d);
                invoicePrice(d) <- prevListPVAT (pt, d);
            }
        } ELSE {
            FOR userInvoice(UserInvoiceDetail d) == userInvoice AND skipFillPriceInvoiceOrder(d) AND PriceListType pt == priceListType(d) AND sku(d) NOINLINE (pt) DO {
                price(d) <- prevListMVAT (pt, d);
                invoicePrice(d) <- prevListPVAT (pt, d);
            }            
        }
    }
    
    skipDeriveOrderPrice = ABSTRACT BOOLEAN (UserInvoiceDetail);
    prevList (PriceListType t, UserInvoiceDetail d) += WHEN t == priceListType(d) AND orderDetail(d) AND NOT notFillPriceInvoiceOrder(operation(d)) AND NOT skipDeriveOrderPrice(d) THEN (IF includeVAT(t) THEN invoicePriceOrder(d) ELSE priceOrder(d));
    
    fillHeader(UserInvoice userInvoice, Order order)  { 
        date(userInvoice) <- currentDate();
        time(userInvoice) <- currentTime();
        
        supplier(userInvoice) <- supplier(order) WHERE supplier(order);
        supplierStock(userInvoice) <- supplierStock(order) WHERE supplierStock(order);

        customer(userInvoice) <- customer(order) WHERE customer(order);
        customerStock(userInvoice) <- customerStock(order) WHERE customerStock(order);

        currency(userInvoice) <- currency(order) WHERE currency(order);
        agreement(userInvoice) <- agreement(order) WHERE agreement(order);
        priceListType(userInvoice) <- priceListType(order) WHERE priceListType(order);
        contractSku(userInvoice) <- contractSku(order) WHERE contractSku(order);

        operation(userInvoice) <- operation(order) WHERE operation(order);
        date(userInvoice) <- shipmentDate(order) WHERE isShipmentDate(operation(order)) AND shipmentDate(order); 
        
        note(userInvoice) <- note(order) WHERE note(order);
        EXEC overFill(userInvoice, order);
    }
    
    fill(UserInvoice userInvoice, Order order)  { 
        fillHeader(userInvoice, order);
        
        createDetail(userInvoice, order);
        fillPrice(userInvoice, order);
    }

    fillSupplier(Stock supplierStock, UserInvoice userInvoice, Order order)  { 
        date(userInvoice) <- currentDate();
        time(userInvoice) <- currentTime();

        supplier(userInvoice) <- legalEntity(supplierStock);
        supplierStock(userInvoice) <- supplierStock;

        customer(userInvoice) <- customer(order);
        customerStock(userInvoice) <- customerStock(order);

        currency(userInvoice) <- currency(order);
        agreement(userInvoice) <- agreement(order);
        priceListType(userInvoice) <- priceListType(order);

        operation(userInvoice) <- operation(order) WHERE operation(order);
        note(userInvoice) <- note(order);

        createDetail(userInvoice, order);
        fillPrice(userInvoice, order);
    }

    userInvoice = DATA LOCAL UserInvoice (Order);
    
    TABLE orderUserInvoice (Order, UserInvoice);
    include 'Вкл. в накладную' = DATA BOOLEAN (Order, UserInvoice) INDEXED CHARWIDTH 10;  
    countIncludeOrders(UserInvoice i)  = GROUP SUM 1 IF include(Order o,i);
    
    beforeCreateInvoice  ABSTRACT LIST ( Order);
    afterCreateInvoice ABSTRACT LIST (UserInvoice);
    invoiceCreated = DATA LOCAL NESTED BOOLEAN (Order);
    overCreate  ABSTRACT LIST ( Order, UserInvoice);
    
    createUserInvoice 'Создать накладную'(Order order)  { 
        invoiceCreated(order) <- NULL;
        beforeCreateInvoice(order);
        IF invoiceCreated(order) THEN RETURN;
        
        userInvoice(order) <- NULL;
        NEW i = UserInvoice {
            fillHeader(i, order);
            ASK 'Создать по выбранному заказу строки накладной?' IF useConfimForCreateDetail() DO {
                createDetail(i, order);   
                fillPrice(i, order);
            }
            userInvoice(order) <- i;
            include(order,i) <- TRUE;
            overCreate (order, i);
            afterCreateInvoice(i);
        }
    }
    createUserInvoice (Order order) + {  createUserInvoice(order); }

    createUserInvoicePosted 'Создать проведенную накладную'(Order order)  { 
        IF differentStocksInDetails(customerStock(order)) THEN {
            NEW i = UserInvoice {
                isPosted(i) <- TRUE;
                fill(i, order);
                createdUser(i, order) <- TRUE;
            }
        } ELSE {
            FOR inSupplier(order, Stock stock) NEW i = UserInvoice DO {
                isPosted(i) <- TRUE;
                fillSupplier(stock, i, order);
                createdUser(i, order) <- TRUE;
            }
        }
    }
    createUserInvoicePosted (Order order) + {  createUserInvoicePosted(order); }

    addUserInvoice 'Накладная'###sign(Order order)   { 
	    NEWSESSION {
	        createUserInvoice(order);
	        SHOW userInvoice OBJECTS i = userInvoice(order) DOCKED NOCANCEL;
	    }
    } TOOLBAR;
    addUserInvoice (Order order) + {  IF order IS Order THEN addUserInvoice(order); }

    EXTEND FORM orders
        PROPERTIES(o) addUserInvoice
    ;
    DESIGN orders {
        createdContainer{
            MOVE PROPERTY(addUserInvoice(o)) { alignment = STRETCH; };
        }
    }

    // ---------------------------- Заполнение на основе заказа --------------------------- //

    supplierInvoiceOrder = DATA LOCAL LegalEntity ();
    nameSupplierInvoiceOrder 'Поставщик' = name(supplierInvoiceOrder());

    supplierStockInvoiceOrder = DATA LOCAL Stock ();
    nameSupplierStockInvoiceOrder 'Склад поставщика' = name(supplierStockInvoiceOrder());

    CONSTRAINT legalEntity(supplierStockInvoiceOrder())!= supplierInvoiceOrder() CHECKED BY supplierStockInvoiceOrder[] MESSAGE 'Выбран склад не текущего поставщика';

    customerInvoiceOrder = DATA LOCAL LegalEntity ();
    nameCustomerInvoiceOrder 'Покупатель' = name(customerInvoiceOrder());

    customerStockInvoiceOrder = DATA LOCAL Stock ();
    nameCustomerStockInvoiceOrder 'Склад покупателя' = name(customerStockInvoiceOrder());

    CONSTRAINT legalEntity(customerStockInvoiceOrder())!= customerInvoiceOrder() CHECKED BY customerStockInvoiceOrder[] MESSAGE 'Выбран склад не текущего покупателя';

    operationInvoiceOrder = DATA LOCAL Operation ();
    nameOperationInvoiceOrder 'Операция' = name(operationInvoiceOrder());

    FORM invoiceOrders 'Заказы'###sign
        PROPERTIES() nameSupplierInvoiceOrder, nameSupplierStockInvoiceOrder, nameCustomerInvoiceOrder, nameCustomerStockInvoiceOrder, nameOperationInvoiceOrder

        OBJECTS o = Order
        PROPERTIES (o) READONLY isPosted, number, series, date, time,
                                nameSupplier, nameSupplierStock, nameCustomer, nameCustomerStock, nameCurrency,
                                countOrderDetail, quantityOrderDetail, sumOrderDetail, VATSumOrderDetail, invoiceSumOrderDetail,
                                note
        FILTERS isPosted(o),
                inSupplier(o, supplierInvoiceOrder()) OR (o IS Order AND NOT supplierInvoiceOrder()),
                customer(o) == customerInvoiceOrder() OR (o IS Order AND NOT customerInvoiceOrder()),
                customerStock(o) == customerStockInvoiceOrder() OR (o IS Order AND NOT customerStockInvoiceOrder()),
                inSupplier(o, supplierStockInvoiceOrder()) OR (o IS Order AND NOT supplierStockInvoiceOrder()),
                operation(o) == operationInvoiceOrder() OR (o IS Order AND NOT operationInvoiceOrder())

        OBJECTS d = OrderDetail
        PROPERTIES (d) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku
        PROPERTIES (d) READONLY quantity, invoiced, price, sum,
                        numberVAT, valueVAT, VATSum, invoiceSum,
                        name###stockProp##Stock
        FILTERS order(d) == o
    ;

    DESIGN invoiceOrders {
        BOX {
            size = (1024, 768);
            NEW documentContainer BEFORE TOOLBARBOX {

                horizontal = FALSE;
                fill = 1;

                MOVE BOX(o);
                NEW documentDetail {
                    fill = 1;
                    tabbed = TRUE;

                    MOVE BOX(d) {
                        caption = 'Спецификация';
                    }
                    NEW printTab {
                        caption = 'Печатные формы';
                        NEW printContainer {
                            caption = 'Печать';
                            horizontal = FALSE;
                        }
                    }
                }
            }
            NEW sessionPropContainer BEFORE documentContainer {
                MOVE PROPERTY(nameSupplierInvoiceOrder());
                MOVE PROPERTY(nameSupplierStockInvoiceOrder());
                MOVE PROPERTY(nameCustomerInvoiceOrder());
                MOVE PROPERTY(nameCustomerStockInvoiceOrder());
                MOVE PROPERTY(nameOperationInvoiceOrder());

            }
        }
    }

    fillOrder 'Заполнить на основе заказа'(UserInvoice userInvoice)   { 
        supplierInvoiceOrder() <- supplier(userInvoice) WHERE supplier(userInvoice);
        supplierStockInvoiceOrder() <- supplierStock(userInvoice) WHERE supplierStock(userInvoice);
        customerInvoiceOrder() <- customer(userInvoice) WHERE customer(userInvoice);
        customerStockInvoiceOrder() <- customerStock(userInvoice) WHERE customerStock(userInvoice);
        operationInvoiceOrder() <- operation(userInvoice) WHERE operation(userInvoice);

        DIALOG invoiceOrders OBJECTS o INPUT DO {
            fill(userInvoice, o);
        }
    } IN order;

    FORM selectOrderDetail 'Выбрать строку заказа'
        OBJECTS i = InvoiceDetail PANEL
        OBJECTS d = OrderDetail
        PROPERTIES(d) READONLY index, number, series, date, time, nameSupplierStock, nameCustomerStock
        FILTERGROUP supplierStock
            FILTER 'По складу поставщика' supplierStock(d) == supplierStock(i) DEFAULT
            FILTER 'По поставщику' supplier(d) == supplier(i)
        FILTERGROUP customerStock
            FILTER 'По складу покупателя' customerStock(d) == customerStock(i) DEFAULT
            FILTER 'По покупателю' customer(d) == customer(i)
        FILTERGROUP opened
            FILTER 'Открытые' isOpened(d) DEFAULT
        FILTERS isPosted(d),
                sku(d) == sku(i)
    ;
    changeOrder (UserInvoiceDetail d)  { 
        DIALOG selectOrderDetail OBJECTS i = d, d = orderDetail(d) INPUT od NULL DO {
            orderDetail(d) <- od;
        }
    }
    EXTEND FORM userInvoice
        PROPERTIES (d)  descriptionOrder AFTER invoiceSum(d) ON CHANGE changeOrder(d)
    ;


    EXTEND FORM invoices
        PROPERTIES (i)  READONLY BACKGROUND background(i) orders AFTER invoiceSumInvoiceDetail(i)
        PROPERTIES (d)  READONLY descriptionOrder AFTER invoiceSum(d)
    ;
    EXTEND FORM orders
        PROPERTIES (o)  READONLY BACKGROUND backgroundSku(o) invoices AFTER invoiceSumOrderDetail(o)
    ;            
// Создание инвойса на основе нескольких заказов //

    include 'Вкл. в накладную' = ABSTRACT BOOLEAN (Order, Invoice) CHARWIDTH 10;
    countIncludeOrders(Invoice i)  = GROUP SUM 1 IF include(Order o,i);
    includeOrders 'Заказы в накладной'(Invoice invoice)  = GROUP
                                                        CONCAT STRING[255](description(Order order)) IF include(order, invoice) , ', '
                                                        ORDER order IN orders CHARWIDTH 30;
                                                                                                               
    includeOrders 'Заказы в накладной'(UserInvoice userInvoice)  = GROUP
                                                        CONCAT STRING[255](description(Order order)) IF include(order, userInvoice) , ', '
                                                        ORDER order IN orders CHARWIDTH 30;
    include(Order order,UserInvoice invoice) += include(order,invoice);    
                                                    
    numberOrders 'Заказы в накладной'(Invoice invoice)  = GROUP
                                                     CONCAT STRING[255](number(Order order)) IF include(order, invoice) , ', '
                                                     ORDER order IN orders CHARWIDTH 30;
                                                                                                            
    numberOrders 'Заказы в накладной'(UserInvoice userInvoice)  = GROUP
                                                     CONCAT STRING[255](number(Order order)) IF include(order, userInvoice) , ', '
                                                     ORDER order IN orders CHARWIDTH 30;                                                   
                                                        
    FORM includeOrdersUserInvoice 'Заказы'
        OBJECTS i = UserInvoice PANEL

        OBJECTS o = Order
        PROPERTIES (o) READONLY isPosted, number, series, date, time,
                                nameSupplier, nameSupplierStock, nameCustomer, nameCustomerStock, nameCurrency,
                                countOrderDetail, quantityOrderDetail, sumOrderDetail, VATSumOrderDetail, invoiceSumOrderDetail,
                                note
        FILTERGROUP open 
            FILTER 'Открыт' isOpened(o) 'F6' DEFAULT   

        FILTERS supplier(o) == supplier(i),
                customer(o) == customer(i),
                supplierStock(o) == supplierStock(i),
                customerStock(o) == customerStock(i),
                isPosted(o),
                toInvoice(o) OR include[Order,Invoice](o,i)
                
                
        PROPERTIES(o,i) BACKGROUND backgroundInvoice(o) include BEFORE isPosted(o)
        
        OBJECTS d = OrderDetail
        PROPERTIES (d) READONLY index, idBarcodeSku, nameSku, nameBatch, quantity
        FILTERS document(d)==o
    ;
    
    relationInvoiceDetail (order, invoice) = GROUP SUM 1 BY order(orderDetail(InvoiceDetail invoiceDetail)), invoice(invoiceDetail);
    notRelationInvoiceDetailOrder 'Включенные заказы, но по которым не созданы строки'(UserInvoice invoice) = GROUP SUM 1 
        IF include(Order order, invoice) AND NOT  relationInvoiceDetail(order, invoice); 
        
    notIncludeInvoiceDetailOrder 'Есть строки накладной с сылкой на заказ, который не включен в накладную'(Invoice invoice) = GROUP  SUM 1 
        IF relationInvoiceDetail(Order order, invoice) AND NOT include[Order,UserInvoice](order, invoice);         


    defaultOrder (UserInvoice i) = GROUP MAX Order o IF include(o, i);
    skipSetContractSku(UserInvoice o) += contractSku(defaultOrder(o)) IS ContractSku; 

    defaultOrderDetail (batch, UserInvoice userInvoice) = GROUP MAX OrderDetail detail IF include(order(detail), userInvoice) 
        BY batch(detail);

    defaultOrderDetail (sku, UserInvoice userInvoice) = GROUP MAX OrderDetail detail IF include(order(detail), userInvoice) 
        BY sku(detail);
    
    defaultOrderDetail(UserInvoiceDetail detail) = OVERRIDE defaultOrderDetail(batch(detail), userInvoice(detail)), defaultOrderDetail(sku(detail), userInvoice(detail));

    isCustomsDialogIncludeOrdersUser = ABSTRACT BOOLEAN (UserInvoice);
    customsDialogIncludeOrdersUser ABSTRACT LIST (UserInvoice);
    
    dialogIncludeOrdersUser 'Включить заказы в накладную' (UserInvoice userInvoice)  { 
        DIALOG includeOrdersUserInvoice OBJECTS i = userInvoice DO {
            IF countInvoiceDetail(userInvoice) THEN {
                orderDetail(UserInvoiceDetail d) <- NULL WHERE userInvoice(d) == userInvoice AND orderDetail(d) AND NOT include(order(orderDetail(d)), userInvoice);
                orderDetail(UserInvoiceDetail d) <- defaultOrderDetail(d) WHERE userInvoice(d) == userInvoice AND NOT orderDetail(d);
            }
            IF notRelationInvoiceDetailOrder(userInvoice) THEN {
                ASK 'Создать по выбранным заказам строки накладной?' DO {  
                    IF NOT isCustomsDialogIncludeOrdersUser(userInvoice) THEN {
                        FOR include[Order, UserInvoice](Order order, userInvoice) AND NOT relationInvoiceDetail(order, userInvoice) DO {

                            createDetail(userInvoice, order);
                            fillPrice(userInvoice, order);

                            userInvoice(order) <- userInvoice;
                        }
                    } ELSE {
                        customsDialogIncludeOrdersUser(userInvoice);
                    }    
                }              
            }
            IF notIncludeInvoiceDetailOrder(userInvoice) THEN {
                ASK 'В накладной присутствуют строки со ссылкой на заказ, который не включен в накладную. Удалить эти строки?' DO {  
                    FOR relationInvoiceDetail(Order order, userInvoice) AND NOT include[Order,UserInvoice](order, userInvoice) DO {
                        
                        DELETE UserInvoiceDetail d WHERE userInvoice(d) == userInvoice AND order(orderDetail(d)) == order;     
                        userInvoice(order) <- NULL;                         
                    }                                   
                }                       
            }            
        }                 
    } IN orders;
    
    connectOrder 'Привязать строку накладной к заказу'(UserInvoiceDetail detail)  { 
        orderDetail(detail) <- defaultOrderDetail(detail) 
                                                    WHERE defaultOrderDetail(detail);
    } ASON CONTEXTMENU descriptionOrder[UserInvoiceDetail];
   
    connectOrderAll 'Привязать все строки накладной к заказам'(UserInvoiceDetail d)  { 
        FOR userInvoice(UserInvoiceDetail detail) == userInvoice(d) DO {
            EXEC connectOrder(detail);
        }
    } ASON CONTEXTMENU descriptionOrder[UserInvoiceDetail];    
    
    connectOrder 'Привязать все строки накладной к заказам'(UserInvoice i)  { 
        FOR userInvoice(UserInvoiceDetail detail) == i DO {
            EXEC connectOrder(detail);
        }
    };  
    
    WHEN LOCAL FORMS userInvoice
        (CHANGED(sku(UserInvoiceDetail detail)) OR CHANGED(batch(detail))) AND NOT orderDetail(detail)       
            DO EXEC connectOrder(detail);

    EXTEND FORM userInvoice
        PROPERTIES(i) dialogIncludeOrdersUser, includeOrders READONLY//, connectOrderUserInvoice
    ;
    DESIGN userInvoice {
        headerCreateDetail {
            MOVE GROUP(orders,i) {
                lines = 1;
                horizontal = FALSE;
            }
        }
    }
//-- 
    
    createMultiUserInvoice(Order order)  { 
        IF order IS Order THEN {
            NEWSESSION NESTED (selected[Order.Order]) {
                invoiceCreated(order) <- NULL;
                beforeCreateInvoice(order);
                IF invoiceCreated(order) THEN RETURN;
                
                NEW i = UserInvoice {
                    fillHeader(i, order);
                    
                    LOCAL createDetail = BOOLEAN();
                    createDetail() <- NULL;
                    IF useConfimForCreateDetail() THEN {
                        ASK 'Создать по выбранным заказам строки накладной?' DO
                            createDetail() <- TRUE;                    
                    } ELSE {
                        createDetail() <- TRUE;
                    }  
 
                    
                    FOR selected(Order.Order o) DO {
                        IF createDetail() THEN {
                            createDetail(i, o);   
                            fillPrice(i, o);
                        }
                        include[Order,UserInvoice](o,i)<- TRUE;             
                    }
                    afterCreateInvoice(i);
                    SHOW userInvoice OBJECTS i = i DOCKED NOCANCEL;
                }
            }
        }
    }
    overCreateMultiUserInvoice(Order o)+ {  createMultiUserInvoice(o); }

    // автомтатическое закрытие заказов
    dataAutoCloseOrders 'Автоматически закрывать заказы'###sign = DATA BOOLEAN(Stock);
    skipIsClosedOrder = ABSTRACT BOOLEAN(InvoiceDetail);
    WHEN SET(order(orderDetail(InvoiceDetail d)) AND isPosted(d)) AND (OVERRIDE dataAutoCloseOrders(stockProp###stock(d)), autoCloseOrders(stockProp###stock(d))) 
        AND NOT isClosed(order(orderDetail(d))) AND NOT skipIsClosedOrder(d) DO {
        isClosed(UserOrder o) <- TRUE WHERE o == order(orderDetail(d));
    }

    forbidInvoice(Order o) += forbidInvoice(operation(o)); 

END

META defineOrderInvoicePack (showPackage)

    overFill(UserInvoiceDetail i, OrderDetail o) + { 
        IF o IS OrderDetail THEN { // иначе не может определить тип o
            barcodePack(i) <- barcodePack(o);
            amountPack(i) <- amountPack(o);
            packQuantity (i) <- IF quantity(i) == quantity(o) THEN packQuantity (o) ELSE NUMERIC[16,5](quantity(i) / (amountPack(i) IF amountPack(i) != 0));
        }
    }
END

META defineInvoiceOrder(sign, NS, batchProp, legalProp, stockProp)

    createUserOrder 'Создать заказ'(Invoice invoice)  { 
	NEWSESSION {
	        NEW o = NS.UserOrder {
	            supplier(o) <- legalProp(invoice);
	            supplierStock(o) <- stockProp(invoice);
	            
	            FOR invoice(InvoiceDetail detail) == invoice NEW d = NS.UserOrderDetail DO {
	                userOrder(d) <- o; 
	                sku(d) <- sku(detail);   
	                batch(d) <- batchProp(detail);
	                quantity(d) <- quantity(detail); 
	            }
	            
	            SHOW NS.userOrder OBJECTS o = o DOCKED;        
	        }
	    }
} TOOLBAR; 
    
    EXTEND FORM invoices 
        PROPERTIES(i) createUserOrder     
    ;
    DESIGN invoices {
        createdContainer {
    
            MOVE PROPERTY(createUserOrder(i)) { caption = 'Заказ'###sign; alignment = STRETCH; }
        }
    }
END 
