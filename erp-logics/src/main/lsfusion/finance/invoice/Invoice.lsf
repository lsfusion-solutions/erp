MODULE Invoice;

REQUIRE System,
        Utils,
        Historizable,
        Numerator,
        Document,
        Currency,
        PriceRound,
        Barcode,
        PriceListType,
        Agreement,
        EmployeeStock,
        StockContract,
        StockSkuDocument,
        StockTax;

DESIGN options {
    pane {
        NEW invoices  {
            caption = 'Накладная';
            height = 1;
        }
    }
}
CLASS ABSTRACT Invoice 'Накладная' : Document;
CLASS ABSTRACT InvoiceDetail 'Строка накладной' : DocumentDetail;

@defineDocumentAbstract(invoice);
TABLE sessionInvoice(Session, Invoice);

@defineDocumentAbstractNumber(invoice, BPSTRING[2]);

@defineDocumentAbstractLegalEntity(invoice, supplier, 'Поставщик');
@defineDocumentAbstractLegalEntity(invoice, customer, 'Покупатель');

@defineDocumentAbstractLegalEntity(invoice, from, 'Отправитель');
@defineDocumentAbstractLegalEntity(invoice, to, 'Получатель');

@defineDocumentAbstractDataStock(invoice, stock, 'Склад поставщика', supplier);
@defineDocumentAbstractDataStock(invoice, stock, 'Склад покупателя', customer);

idCustomerStock(Invoice invoice) = id(customerStock(invoice));
idSupplierStock(Invoice invoice) = id(supplierStock(invoice));

@defineDocumentAbstractHeaderStock(invoice, stock, 'Склад отправителя', from);
fromStock (InvoiceDetail idetail) = fromStock(invoice(idetail));
nameFromStock 'Склад отправителя' (InvoiceDetail idetail) = name(fromStock(idetail)) CHARWIDTH 10;

@defineDocumentAbstractHeaderStock(invoice, stock, 'Склад получателя', to);

toStock (InvoiceDetail idetail) = toStock(invoice(idetail));
nameToStock 'Склад получателя' (InvoiceDetail idetail) = name(toStock(idetail)) CHARWIDTH 10;

idFromStock (Invoice i) = id(fromStock(i)); 

@defineDocumentAbstractPosted(invoice);
@defineDocumentAbstractClosed(invoice);

overShowEdit = ABSTRACT BOOLEAN (Invoice);
overShowDelete = ABSTRACT BOOLEAN (Invoice);

@defineDocumentAbstractDetailSku(invoice, sku);
INDEX sku(InvoiceDetail d), customerStock(d);

@defineDocumentAbstractDetailBatchCustomInner(invoiceDetail, batch, Batch);

@defineDocumentAbstractDetailQuantity(invoice);

sumNetWeight 'Вес нетто, кг' = ABSTRACT NUMERIC[14,3] (InvoiceDetail);
sumNetWeightTon 'Вес нетто, т' (InvoiceDetail d) = round6(sumNetWeight(d) / 1000);
@defineDocumentHeaderNetWeightCustomPrefix (invoice, invoiceDetail, sum, ', кг'); 
  
sumGrossWeight 'Вес брутто, кг' = ABSTRACT NUMERIC[14,3] (InvoiceDetail);
sumGrossWeightTon 'Вес брутто, т' (InvoiceDetail d) = round6(sumGrossWeight(d) / 1000);
@defineDocumentHeaderGrossWeightCustomPrefix (invoice, invoiceDetail, sum, ', кг');

@defineDocumentAbstractDetailQuantityPrefix(invoice, pack, ' (упаковок)');

@defineDocumentHeaderQuantity(invoice);
@defineDocumentHeaderSkuQuantity(invoice, sku);

@defineDocumentAbstractHeaderCurrency (invoice);

currency (InvoiceDetail idetail) = currency(invoice(idetail));
shortNameCurrency 'Валюта (сокр.)' (InvoiceDetail idetail) = shortName(currency(idetail));

price 'Цена' = ABSTRACT NUMERIC[16,4] (InvoiceDetail) MATERIALIZED;

@defineDocumentAbstractDetailDataSumCustomPrefix (invoiceDetail, , );
@defineDocumentHeaderSum(invoice);
@defineDocumentHeaderItemQuantityPrefix(invoice, , );

invoicePrice 'Цена с НДС' = ABSTRACT NUMERIC[16,4] (InvoiceDetail) MATERIALIZED;

VAT(invoiceDetail) = ABSTRACT Range (InvoiceDetail) MATERIALIZED;
numberVAT 'НДС, номер' (InvoiceDetail invoiceDetail) = number(VAT(invoiceDetail));
valueVAT 'НДС, %' (invoiceDetail) = ABSTRACT NUMERIC[10,5] (InvoiceDetail) MATERIALIZED;

@defineDocumentAbstractDetailVATDataSumCustom (invoiceDetail, invoice);

@defineDocumentHeaderVATSum(invoice, invoice);

notNullInvoiceVAT 'В накладной должен быть задан НДС' = DATA BOOLEAN ();
EXTEND FORM options PROPERTIES notNullInvoiceVAT();
DESIGN options { invoices { MOVE PROPERTY(notNullInvoiceVAT()); } }

CONSTRAINT notNullInvoiceVAT() AND isItem(sku(InvoiceDetail detail)) AND isPosted(invoice(detail)) AND NOT valueVAT(detail)
    MESSAGE 'Не задан НДС для строки товара';

@defineDocumentAbstractDetailNote (InvoiceDetail);

@defineDocumentAbstractHeaderDescription(Invoice);
@defineDocumentDetailDescription(invoice, InvoiceDetail);

shortDescription (Invoice invoice) = seriesNumber(invoice) + ' от ' + date(invoice);

extraDescription 'Доп. наименование' (invoiceDetail) = ABSTRACT STRING[1500] (InvoiceDetail) CHARWIDTH 30;

editSku 'Редактировать SKU' (InvoiceDetail d)  { NEWSESSION { edit(sku(d)); } } TOOLBAR;

@defineDocumentAbstractHeaderAgreement(invoice);

in 'Приходная' = ABSTRACT BOOLEAN (Invoice);
in 'Приходная' (InvoiceDetail d) = in(invoice(d)); 

out 'Расходная' (Invoice invoice) = ABSTRACT BOOLEAN (Invoice);
out 'Расходная' (InvoiceDetail d) = out(invoice(d));
 
signedQuantity 'Кол-во' (InvoiceDetail d) = IF in(d) THEN quantity(d) ELSE -quantity(d); 

@defineDocumentAbstractContract(Invoice, contractSku);
// наш склад
stock = ABSTRACT Stock(Invoice);   
nameStock 'Склад' (Invoice i) = name(stock(i));

stock = ABSTRACT Stock(InvoiceDetail) MATERIALIZED;   
nameStock 'Склад' (InvoiceDetail d) = name(stock(d));

operation = ABSTRACT Operation.Operation(Invoice);
nameOperation 'Операция' (Invoice invoice) = name(operation(invoice));
nameReturnOperation 'Операция' (Invoice invoice) = nameReturn(operation(invoice));
isReturn 'Возвратная' = ABSTRACT BOOLEAN (Invoice);
overNameOperation 'Операция' (Invoice invoice) = IF isReturn(invoice) THEN nameReturnOperation(invoice) ELSE nameOperation(invoice);
operation (InvoiceDetail d) = operation(invoice(d));
createdTime 'Время создания'= ABSTRACT DATETIME (Invoice) IN created;
createdUser = ABSTRACT CustomUser (Invoice);
createdNameUser 'Создан пользователем' (Invoice o) = name[Contact](createdUser(o)) CHARWIDTH 10;

negativeValueInvoices 'Запретить ввод отрицательных значений в накладных' = DATA BOOLEAN ();

skipConsignment = ABSTRACT BOOLEAN (InvoiceDetail) MATERIALIZED;  

taxNumberSupplier 'Налоговый номер постащика' = ABSTRACT STRING[9] (Invoice);

EXTEND FORM options
    PROPERTIES() negativeValueInvoices
;

DESIGN options {
    invoices  {
        NEW topInvoicesContainer {
            horizontal = TRUE;
            MOVE PROPERTY(negativeValueInvoices());                
        }
        NEW document {
//                fill = 1;
            lines = 2;
        }
    }
}

filterInvoiceInterval 'Показывать накладные за последние N дней' = DATA INTEGER () COMPLEX;

EXTEND FORM options PROPERTIES() filterInvoiceInterval;
DESIGN options { invoices { MOVE PROPERTY(filterInvoiceInterval()); } }

//----------------------------------------------- Накладная ---------------------------------------------------//

META defineInvoice(sign, stockProp, supplierFilter, customerFilter, priceListTypePrefix, NS, char)

    CLASS ABSTRACT Invoice 'Накладная'###sign : Invoice.Invoice;
    CLASS ABSTRACT InvoiceDetail 'Строка накладной'###sign : Invoice.InvoiceDetail;

    CLASS UserInvoice 'Накладная (польз.)'###sign : Invoice;
    CLASS UserInvoiceDetail 'Строка накладной (польз.)'###sign : InvoiceDetail;

    GROUP invoice 'Информация о накладной' : base;

    @defineDocumentInterface(invoice);
    note[Invoice.Invoice](Invoice i)+=note(i);
    
    TABLE sessionInvoice(Session, Invoice);
    TABLE sessionInvoiceDetail(Session, InvoiceDetail);
    
    @deriveDocumentHeaderTimePrefix(UserInvoice, );
    index[Invoice.InvoiceDetail](InvoiceDetail d)+=index(d);
    
    createdUser = ABSTRACT CustomUser (Invoice);
    createdNameUser 'Создан пользователем' (Invoice invoice) = name[Contact](createdUser(invoice)) CHARWIDTH 10 IN created;
    createdUser(UserInvoice invoice) += createdUser(invoice) IF invoice IS UserInvoice;
    
    createdTime (UserInvoice invoice) += createdTime(invoice) IF invoice IS UserInvoice;
    createdUser[Invoice.Invoice] (Invoice invoice) += createdUser(invoice);    
    
    @defineExternalizable(userInvoice, STRING[100]);
    @defineExternalizable(userInvoiceDetail, STRING[100]);
                                                               
    invoice[Invoice.InvoiceDetail] (InvoiceDetail detail) += invoice(detail);
    date[Invoice.Invoice] (Invoice invoice) += date(invoice);
    time[Invoice.Invoice] (Invoice invoice) += time(invoice);

    @defineDocumentInterfaceNumber(invoice, BPSTRING[2]);
    number[Invoice.Invoice] (Invoice invoice) += number(invoice);
    series[Invoice.Invoice] (Invoice invoice) += series(invoice);
    invoiceNumber (number) = GROUP MAX Invoice invoice BY number(invoice);
    
    INDEX number(Invoice i);

    @defineNumeratedDefault(UserInvoice, 'Накладные'###sign, 'ПС', NS);

    @defineDocumentInterfaceLegalEntity (invoice, supplier, 'Поставщик');
    INDEX supplier(UserInvoiceDetail d);
    @defineDocumentInterfaceLegalEntity (invoice, customer, 'Покупатель');
    supplier[Invoice.Invoice](Invoice invoice) += supplier(invoice);
    customer[Invoice.Invoice](Invoice invoice) += customer(invoice);

    isCompanySupplier 'Приход от компании' (InvoiceDetail d) = isCompany(supplier(d)); 

    @defineDocumentInterfaceDataStock(invoice, stock, 'Склад поставщика', supplier);
    @defineDocumentInterfaceDataStock(invoice, stock, 'Склад покупателя', customer);
    supplierStock[Invoice.Invoice](Invoice invoice) += supplierStock(invoice);
    customerStock[Invoice.Invoice](Invoice invoice) += customerStock(invoice);
    stock[Invoice.InvoiceDetail](InvoiceDetail detail) += stockProp##Stock(detail);
    stock[Invoice.Invoice](Invoice invoice) += stockProp##Stock(invoice);
    CONSTRAINT supplier(UserInvoice userInvoice) AND supplierStock(userInvoice) AND NOT
    in(supplier(userInvoice), supplierStock(userInvoice))
        CHECKED BY supplierStock[UserInvoice]
            MESSAGE 'Поставщик и склад поставщика для накладной не имеют связи';
    CONSTRAINT customer(UserInvoice userInvoice) AND customerStock(userInvoice) AND NOT
    in(customer(userInvoice), customerStock(userInvoice))
        CHECKED BY customerStock[UserInvoice]
            MESSAGE 'Покупатель и склад покупателя для накладной не имеют связи';

    @defineDocumentInterfacePosted(invoice);
    isPosted[Invoice.Invoice] (Invoice invoice) += isPosted(invoice);
    
    isStockInvoices 'Разрешить ввод накладной'##sign##' без склада' = DATA BOOLEAN ();    
    equalsSeriesNumberInvoices 'Запретить ввод накладных'##sign##' с одинаковым "Серия/номер"' = DATA BOOLEAN ();
    dateFromEqualsSeriesNumberInvoices 'Проверять одинаковые "Серия/номер" в накладных'##sign##' начиная с' = DATA DATE ();
    skipEqualsSeriesNumber = ABSTRACT BOOLEAN (Invoice);
    
    EXTEND FORM options
        PROPERTIES() NS###isStockInvoices = isStockInvoices, NS###equalsSeriesNumberInvoices = equalsSeriesNumberInvoices, NS###dateFromEqualsSeriesNumberInvoices = dateFromEqualsSeriesNumberInvoices SHOWIF equalsSeriesNumberInvoices() 
    ;
    
    DESIGN options {
        document {
            NEW invoice##NS {
                caption = 'Накладная'##sign;
                MOVE PROPERTY(NS###isStockInvoices);
                MOVE PROPERTY(NS###equalsSeriesNumberInvoices);
                MOVE PROPERTY(NS###dateFromEqualsSeriesNumberInvoices);
            } 
        }
    }

    CONSTRAINT isPosted(UserInvoice i) AND NOT isStockInvoices() AND NOT stockProp##Stock(i) 
        MESSAGE 'Для накладной'##sign##' должен быть задан склад';   
    CONSTRAINT  equalsSeriesNumberInvoices() AND [GROUP SUM 1 IF isPosted(Invoice i) AND NOT skipEqualsSeriesNumber(i) AND (date(i) >= dateFromEqualsSeriesNumberInvoices() OR NOT dateFromEqualsSeriesNumberInvoices()) BY seriesNumber(i)](STRING[48] series) >1
        MESSAGE 'Запрещено вводить накладные'##sign##' с одинаковым "Серия/номер"';
    
    @defineDocumentInterfaceClosed(invoice);
    @defineDocumentClosedConstraint(UserInvoice);
    isClosed[Invoice.Invoice] (Invoice invoice) += isClosed(invoice);    

    @defineDocumentInterfaceDescription(invoice, 'Накладная'###sign);
    description[Invoice.Invoice](Invoice invoice) += description(invoice);    

    @defineDocumentInterfaceCurrency(invoice);
    @deriveDocumentCurrency(userInvoice, supplier, currencyLegalEntity);
    currency[Invoice.Invoice](Invoice invoice) += currency(invoice);

    @defineDocumentInterfaceContract(Invoice, contractSku, supplier, customer,
                                     'Организация (поставщик) договора накладной не соответствует организация (поставщик) накладной',
                                     'Организация (покупатель) договора накладной не соответствует организация (покупатель) накладной',
                                     'накладная'###sign, NS);
    contractSku[Invoice.Invoice](Invoice invoice) += contractSku(invoice);
    isCommission[Invoice.Invoice](Invoice invoice) += isCommission(invoice);
    
    
    contractSku(InvoiceDetail detail) = contractSku(invoice(detail));
    contractSku(UserInvoiceDetail detail) = contractSku(userInvoice(detail));
    
    @defineDocumentInterfaceAgreement(invoice);
    agreement[Invoice.Invoice](Invoice invoice) += agreement(invoice);
    @deriveDocumentHeaderAgreement (userInvoice, supplier, customer, 'накладная'###sign, NS);
    noAgreement (UserInvoice invoice) = invoice IS UserInvoice AND NOT agreement(invoice);

    @defineDocumentInterfaceDetailSku(invoice, sku);
    INDEX sku(InvoiceDetail d), customerStock(d);
    sku[Invoice.InvoiceDetail](InvoiceDetail detail) += sku(detail);
    
    matches (UserInvoice i, Agreement a) = fromDateTime(a) <= dateTime(i) AND NOT (toDateTime(a) < dateTime(i))
                                                   AND inSupplier(a, supplier(i)) AND inCustomer(a, customer(i)); 

    countInSku (UserInvoice i) = 
        GROUP SUM 1 IF matches(i, Agreement a) AND currency(i) = currency(a) AND [GROUP SUM 1 IF in(a, sku(UserInvoiceDetail d)) BY userInvoice(d)](i);

    maxAgreementInSku (UserInvoice i) = 
        GROUP MAX Agreement a IF matches(i, a) AND [GROUP SUM 1 IF in(a, sku(UserInvoiceDetail d)) BY userInvoice(d)](i);
                        
    isStockSku (InvoiceDetail invoiceDetail) = isStock(sku(invoiceDetail));
    isStockSku (UserInvoiceDetail userInvoiceDetail) = isStock(sku(userInvoiceDetail));

    isChargeSku (InvoiceDetail invoiceDetail) = isCharge(sku(invoiceDetail));
    isChargeSku (UserInvoiceDetail userInvoiceDetail) = isCharge(sku(userInvoiceDetail));

    @defineDocumentInterfaceDetailQuantity(invoice);
    quantity[Invoice.InvoiceDetail](InvoiceDetail detail) += quantity(detail);
    CONSTRAINT CHANGED(quantity(InvoiceDetail detail)) AND negativeValueInvoices() AND quantity(detail) < 0
        MESSAGE 'Количество в строке накладной должно быть не отрицательным';

//    @defineDocumentDetailGrossWeight(invoice, sku);

    price 'Цена' = ABSTRACT NUMERIC[16,4] (InvoiceDetail) CHARWIDTH 7 MATERIALIZED;
    price 'Цена' = DATA NUMERIC[16,4] (UserInvoiceDetail) CHARWIDTH 7;
    price (UserInvoiceDetail invoiceDetail) += price(invoiceDetail);
    
    price[Invoice.InvoiceDetail](InvoiceDetail detail) += price(detail);
    priceReadonlyIf = ABSTRACT VALUE BOOLEAN(UserInvoiceDetail);

    @defineDocumentInterfaceDetailVAT(invoice, country###stockProp###stock, , ); // объявляем шкалу
    
    // запись задана после объявления формы
    @deriveDocumentDetailValueVAT(userInvoice); // записываем значение ставки
       
    equalSkuVATInvoices 'Запрет на различный НДС в накладных '##sign##' и SKU' = DATA BOOLEAN () COMPLEX;
    
    EXTEND FORM options
        PROPERTIES() NS###equalSkuVATInvoices = equalSkuVATInvoices
    ;
    
    DESIGN options {        
        invoice##NS {
            MOVE PROPERTY(NS###equalSkuVATInvoices);
        }
    }
//    CONSTRAINT equalSkuVATInvoices() AND VATUserInvoiceDetail(d) AND isPostedUserInvoiceDetail(d) AND NOT VATSkuCountry(skuUserInvoiceDetail(d), countryStock(customerStockUserInvoiceDetail(d))) == VATUserInvoiceDetail(d)
//        MESSAGE 'НДС в строке накладной '##sign##' не соответствует НДС для SKU';
        
        
    blankLineInvoices 'Разрешить строки без SKU в накладных '##sign = DATA BOOLEAN ();
    
    
    EXTEND FORM options
        PROPERTIES() NS###blankLineInvoices = blankLineInvoices
    ;
    
    DESIGN options {
        invoice##NS {
            MOVE PROPERTY(NS###blankLineInvoices);    
        }
    }
    
    skipBlankLineInvoices = ABSTRACT BOOLEAN (UserInvoiceDetail);
    
    CONSTRAINT isPosted(UserInvoiceDetail d) AND NOT sku(d) AND NOT (blankLineInvoices() OR skipBlankLineInvoices(d))
        MESSAGE 'Для строки накладной '##sign##' должен быть задан SKU';               

    VAT[Invoice.InvoiceDetail](InvoiceDetail detail) += VAT(detail);
    valueVAT[Invoice.InvoiceDetail](InvoiceDetail detail) += valueVAT(detail);

    invoicePrice 'Цена с НДС' = ABSTRACT NUMERIC[16,4] (InvoiceDetail) MATERIALIZED;
    invoicePrice 'Цена с НДС' = DATA NUMERIC[16,4] (UserInvoiceDetail);
    invoicePrice (UserInvoiceDetail invoiceDetail) += invoicePrice(invoiceDetail);

    invoicePrice[Invoice.InvoiceDetail](InvoiceDetail detail) += invoicePrice(detail);
    invoicePriceReadonlyIf = ABSTRACT VALUE BOOLEAN(UserInvoiceDetail);
    // объявляем Action'ы для ON CHANGE по изменению цен
    @defineDocumentDetailPriceVATOnChange(userInvoice);
    @defineDocumentDetailNumberVATOnChange(userInvoice, stockProp###stock);
    @defineDocumentDetailValueVATOnChange(userInvoice);
    @defineDocumentDetailInvoicePriceVATOnChange(userInvoice);

    overChangeInvoiceSum ABSTRACT LIST (UserInvoiceDetail);
    changeInvoiceSum (UserInvoiceDetail d)  {
        INPUT n = NUMERIC[18,4] DO {
            invoiceSum (d) <- n;
            overChangeInvoiceSum(d);
        }
    }
    
    priceRound = ABSTRACT CASE INTEGER (InvoiceDetail);
    priceRound (InvoiceDetail d) += WHEN currency(d) THEN defaultRound(currency(d));

    homePriceRound = ABSTRACT CASE INTEGER (InvoiceDetail);
    homePriceRound (InvoiceDetail d) += WHEN currency(d) THEN defaultRound(currency(d));

    @defineDocumentInterfacePriceListType(invoice); // объявляем вид цены
    @deriveDocumentDetailPriceListTypeAgreement(userInvoice, priceListTypePrefix); // записываем вид цены из соглашения
//    @deriveDocumentDetailPricePriceListTypeVAT (userInvoice, stockProp); // записываем цены с НДС и без НДС на основе priceListType

    // объявляем сумму без НДС
    sum 'Сумма' = ABSTRACT NUMERIC[18,4] (InvoiceDetail) CHARWIDTH 9 MATERIALIZED;
    sum 'Сумма' = DATA NUMERIC[18,4] (UserInvoiceDetail) CHARWIDTH 9;
    sum (UserInvoiceDetail detail) += sum(detail);
        
    @deriveDocumentDetailSumCustomRoundPrefix(userInvoiceDetail, , currency, quantity, priceRound);
    sum[Invoice.InvoiceDetail](InvoiceDetail detail) += sum(detail);


    // объявляем свойства суммы НДС и суммы с НДС
    VATSum 'Сумма НДС' (invoiceDetail) = ABSTRACT NUMERIC[18,4] (InvoiceDetail) CHARWIDTH 8 MATERIALIZED;
    invoiceSum 'Сумма с НДС' (invoiceDetail) = ABSTRACT NUMERIC[18,4] (InvoiceDetail) CHARWIDTH 9 MATERIALIZED;
    
    VATSum 'Сумма НДС' (userInvoiceDetail) = DATA NUMERIC[18,4] (UserInvoiceDetail) CHARWIDTH 8;
    invoiceSum 'Сумма с НДС' (userInvoiceDetail) = DATA NUMERIC[18,4] (UserInvoiceDetail) CHARWIDTH 9;
    
    VATSum (UserInvoiceDetail invoiceDetail) += VATSum(invoiceDetail);
    invoiceSum (UserInvoiceDetail invoiceDetail) += invoiceSum (invoiceDetail);
    
    @deriveDocumentDetailVATDataSum(userInvoice); // записываем сумму НДС
    @deriveDocumentDetailVATPrefixSum(userInvoice, invoice); // записываем сумму с НДС

    VATSum[Invoice.InvoiceDetail](InvoiceDetail detail) += VATSum(detail);
    invoiceSum[Invoice.InvoiceDetail](InvoiceDetail detail) += invoiceSum(detail);

    VATSumInvoiceDetail 'Сумма НДС' (invoice) = GROUP SUM VATSum(InvoiceDetail idetail) BY invoice(idetail) CHARWIDTH 9 IN documentSum;
    invoiceSumInvoiceDetail 'Сумма с НДС' (invoice) = GROUP SUM invoiceSum(InvoiceDetail idetail) BY invoice(idetail) CHARWIDTH 10 IN documentSum MATERIALIZED;

    VATSumUserInvoiceDetail 'Сумма НДС' (userInvoice) = GROUP SUM VATSum(UserInvoiceDetail idetail) BY userInvoice(idetail) CHARWIDTH 9 IN documentSum;
    invoiceSumUserInvoiceDetail 'Сумма с НДС' (userInvoice) = GROUP SUM invoiceSum(UserInvoiceDetail idetail) BY userInvoice(idetail) CHARWIDTH 10 IN documentSum;

    @defineDocumentInterfaceHeaderQuantity(invoice);
    @defineDocumentInterfaceHeaderItemQuantity(invoice);
    @defineDocumentInterfaceHeaderItemCount(invoice);    
    @defineDocumentHeaderSkuQuantity(invoice, sku);
    @defineDocumentHeaderSkuQuantity(userInvoice, sku);

    sumInvoiceDetail '{document.sum.of}' = GROUP SUM sum(InvoiceDetail idetail) BY invoice(idetail) CHARWIDTH 10 IN documentSum MATERIALIZED;
    sumUserInvoiceDetail '{document.sum.of}' = GROUP SUM sum(UserInvoiceDetail idetail) BY userInvoice(idetail) CHARWIDTH 10 IN documentSum;

    @defineDocumentInterfaceHeaderItemSum (invoice, VAT, VAT); //-- сумма НДС поставщика (с разбивкой по таре, товару...)
    @defineDocumentInterfaceHeaderItemSum (invoice, , ); //-- сумма поставщика (с разбивкой по таре, товару...)
    @defineDocumentInterfaceHeaderItemSum(invoice, invoice, invoice); //-- сумма поставщика с НДС (с разбивкой по таре, товару...)

    @defineDocumentInterfaceHeaderItemSumDouble (invoice, range, VAT, VAT, , VAT); //-- сумма НДС поставщика (с разбивкой по таре, товару...) по документу и по шкале
    @defineDocumentInterfaceHeaderItemSumDouble (invoice, range, , , , VAT);  //сумма без НДС поставщика (с разбивкой по таре, товару...) по документу и по шкале
    @defineDocumentInterfaceHeaderItemSumDouble (invoice, range, invoice, invoice, , VAT);  //сумма с НДС (с разбивкой по таре, товару...) по документу и по шкале
    @defineAddDetailDialogSkuStock(userInvoice, sku, stockProp###stock, dialogSku);
    @defineAddDetailDialogBarcode(userInvoice, sku);
    //-- вес
    sumNetWeight 'Вес нетто, кг' = ABSTRACT NUMERIC[14,3] (InvoiceDetail);
    sumNetWeight 'Вес нетто, кг' = DATA NUMERIC[14,3] (UserInvoiceDetail);
    sumNetWeight(UserInvoiceDetail d) += sumNetWeight(d);
    sumNetWeight[Invoice.InvoiceDetail](InvoiceDetail d) += sumNetWeight(d);
    
    sumGrossWeight 'Вес брутто, кг' = ABSTRACT NUMERIC[14,3] (InvoiceDetail);        
    sumGrossWeight 'Вес брутто, кг' = DATA NUMERIC[14,3] (UserInvoiceDetail);
    sumGrossWeight(UserInvoiceDetail d) += sumGrossWeight(d);
    sumGrossWeight[Invoice.InvoiceDetail](InvoiceDetail d) += sumGrossWeight(d);
    
    skipChangeWeight = ABSTRACT BOOLEAN (InvoiceDetail);

    sumNetWeight(UserInvoiceDetail d) <- netWeight(sku(d)) * quantity(d)
        WHEN (CHANGED(sku(d)) OR CHANGED(quantity(d))) AND NOT skipChangeWeight(d);
    sumGrossWeight(UserInvoiceDetail d) <- grossWeight(sku(d)) * quantity(d)
        WHEN (CHANGED(sku(d)) OR CHANGED(quantity(d))) AND NOT skipChangeWeight(d);
                  
    @defineDocumentHeaderNetWeightCustomPrefix (invoice, invoiceDetail, sum, ', кг');       
    @defineDocumentHeaderNetWeightCustomPrefix (userInvoice, userInvoiceDetail, sum, ', кг');  
    @defineDocumentHeaderGrossWeightCustomPrefix (invoice, invoiceDetail, sum, ', кг');
    @defineDocumentHeaderGrossWeightCustomPrefix (userInvoice, userInvoiceDetail, sum, ', кг'); 
    changeGrossWeight(Invoice invoice)   { 
        INPUT n = NUMERIC[16,3] DO 
            sumGrossWeight(InvoiceDetail d) <- NUMERIC[9,3](sumNetWeight(d)/(sumNetWeightInvoiceDetail(invoice) IF sumNetWeightInvoiceDetail(invoice) != 0) * n) WHERE invoice(d) == invoice;
    } 
        
    countInvoiceDetail (stock, invoice) = GROUP SUM 1 BY stockProp##Stock(InvoiceDetail invoiceDetail), invoice(invoiceDetail);

    @implementDocumentSupplierCustomer(invoice);
    
    @implementDocumentForm(NS.###invoice, char##i, 'Накладная'###sign, NS###invoice);
    
    @defineMovementSku(invoiceDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение товара
    @defineMovementSku(userInvoiceDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение товара
    @defineBalancesSku(invoiceDetail); //-- показываем по нажатию правой клавиши остатки товара
    @defineBalancesSku(userInvoiceDetail); //-- показываем по нажатию правой клавиши остатки товара

    @defineBarcodeSku(invoiceDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
    @defineBarcodeSku(userInvoiceDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара

    @defineMovementPriceSku(invoiceDetail, stockProp###stock); //-- показываем по нажатию правой клавиши изменение цены товара
    @defineMovementPriceSku(userInvoiceDetail, stockProp###stock); //-- показываем по нажатию правой клавиши  изменение цены товара
    
    @defineInfoSku(invoiceDetail); //-- показываем по нажатию правой клавиши информацию по товару
    @defineInfoSku(userInvoiceDetail); //-- показываем по нажатию правой клавиши информацию по товару

    @defineDocumentDialogSupplierCustomerStock(userInvoice, supplierFilter, customerFilter);
    @defineDocumentDialogSupplierCustomerLegalEntity(userInvoice, supplierFilter, customerFilter);

// --------------------------- Формы ---------------------------------- //
    backgroundSku 'Цвет'   (d)= ABSTRACT CASE COLOR (UserInvoiceDetail);
    backgroundVAT 'Цвет'   (d)= ABSTRACT CASE COLOR (UserInvoiceDetail);
    backgroundPrice 'Цвет' (d)= ABSTRACT CASE COLOR (UserInvoiceDetail);
    backgroundQuantity 'Цвет' (d)= ABSTRACT CASE COLOR (UserInvoiceDetail);
    overBackgroundBarcode 'Цвет' (d)= ABSTRACT COLOR (UserInvoiceDetail);
    backgroundBarcode 'Цвет'  (UserInvoiceDetail d)= OVERRIDE overBackgroundBarcode(d), backgroundSku(d);
        
    skipShowQuantity = ABSTRACT BOOLEAN (Invoice);
    showQuantity (Invoice i) = i IS Invoice AND NOT skipShowQuantity(i);
    readonlyQuantity = ABSTRACT BOOLEAN (UserInvoiceDetail);
    editSku 'Редактировать SKU' (UserInvoiceDetail d)  { NEWSESSION { edit(sku(d)); } }
    
    backgroundCustomer 'Цвет'  (d)= ABSTRACT CASE COLOR (UserInvoice);
    
    hideWithoutVAT = ABSTRACT BOOLEAN (Invoice);    
    hideWithVAT = ABSTRACT BOOLEAN (Invoice);
    hideAdd = ABSTRACT BOOLEAN (Invoice);
    hideDelete = ABSTRACT BOOLEAN (Invoice);
        
    FORM userInvoice 'Накладная'###sign
        OBJECTS i = UserInvoice PANEL
        PROPERTIES (i) isPosted, nameSupplier ON CHANGE changeSupplier###supplierFilter(i),
                       nameSupplierStock ON CHANGE changeSupplierStock###supplierFilter(i),
                       nameCustomer ON CHANGE changeCustomer###customerFilter(i) BACKGROUND backgroundCustomer(i),
                       nameCustomerStock ON CHANGE changeCustomerStock###customerFilter(i) BACKGROUND backgroundCustomer(i),
                       nameNumerator, number, series, date, time,
                       nameCurrency, nameAgreement, namePriceListType SHOWIF noAgreement(i), note,
                       seriesNumberContractSku, isCommission
        PROPERTIES (i) countUserInvoiceDetail, quantityUserInvoiceDetail, sumUserInvoiceDetail SHOWIF NOT hideWithoutVAT(i),
                       VATSumUserInvoiceDetail, invoiceSumUserInvoiceDetail, sumNetWeightInvoiceDetail, 
                       sumGrossWeightInvoiceDetail ON CHANGE changeGrossWeight(i) 

        OBJECTS d = UserInvoiceDetail GRID
        PROPERTIES (d) index
        PROPERTIES (d) ON EDIT editSku(d) BACKGROUND backgroundBarcode(d) idBarcodeSku 
        PROPERTIES (d) BACKGROUND backgroundSku(d) idSku SHOWIF showIDs(), nameSku, shortNameUOMSku
        PROPERTIES (d) quantity SHOWIF showQuantity(i) BACKGROUND backgroundQuantity(d) READONLYIF readonlyQuantity(d), namePriceListType,
                       price ON CHANGE changePrice(d) SHOWIF NOT hideWithoutVAT(i) BACKGROUND backgroundPrice(d) READONLYIF priceReadonlyIf(d), sum SHOWIF NOT hideWithoutVAT(i),
                       numberVAT ON CHANGE changeNumberVAT(d) BACKGROUND backgroundVAT(d) SHOWIF NOT hideWithoutVAT(i),
                       valueVAT ON CHANGE changeValueVAT(d) BACKGROUND backgroundVAT(d) SHOWIF NOT hideWithoutVAT(i),
                       invoicePrice ON CHANGE changeInvoicePrice(d) SHOWIF NOT hideWithVAT(i) READONLYIF invoicePriceReadonlyIf(d),
                       VATSum, invoiceSum ON CHANGE changeInvoiceSum(d), sumNetWeight BACKGROUND backgroundSku(d), 
                       sumGrossWeight BACKGROUND backgroundSku(d), NEW SHOWIF NOT hideAdd(i), deleteid=DELETE SHOWIF NOT hideDelete(i) GRID
        ORDERS index(d)

        PROPERTIES(i) DRAW d fillDocument, addDetailDialogSkuStockUserInvoiceDetail,
                               addDetailInputBarcodeUserInvoiceDetail SHOWIF NOT hideAdd(i), deleteUserInvoiceDetail SHOWIF NOT hideDelete(i)
        FILTERS userInvoice(d) == i

        EVENTS
            ON OK prePost(i)

//        HINTTABLE LIST dateTimeUserInvoiceDetail, skuUserInvoiceDetail, supplierStockUserInvoiceDetail, customerStockUserInvoiceDetail,
//                       priceListTypeUserInvoiceDetail, currencyUserInvoiceDetail,
//                       priceUserInvoiceDetail, VATUserInvoiceDetail, valueVATUserInvoiceDetail, invoicePriceUserInvoiceDetail

        EDIT UserInvoice OBJECT i
    ;
    
    DESIGN userInvoice {
        BOX {
            size = (1024, 768);
            NEW mainTabbed {
                fill = 1;
                tabbed = TRUE;
                NEW documentBox {
                    fill = 1;
                    caption = 'Накладная';
                    MOVE BOX(i);
                    NEW headerBox {
                        horizontal = TRUE;
                        alignment = STRETCH;
        
                        NEW headerParams {
                            fill = 1;
        
                            MOVE GROUP(documentHeader,i) {
                                lines = 1;
                                alignment = STRETCH;
                                horizontal = FALSE;
                                NEW first {
                                    alignment = STRETCH;
                                    horizontal = TRUE;
                                    MOVE PROPERTY(isPosted(i));
                                }
                                NEW second {
                                    alignment = STRETCH;
                                    horizontal = TRUE;
                                    MOVE PROPERTY(nameNumerator(i));
                                    MOVE PROPERTY(number(i)) { flex = 200; };
                                    MOVE PROPERTY(series(i));
                                    MOVE PROPERTY(date(i));
                                    MOVE PROPERTY(time(i));
                                }    
                            }
                            NEW headerLegalEntity {
                                horizontal = TRUE;
                                alignment = STRETCH;
                                
                                NEW headerSupplier {
                                    caption = 'Поставщик';
                                    horizontal = TRUE;
                                    fill = 1;
                                    MOVE PROPERTY(nameSupplier(i)) { caption = ''; };
                                    MOVE PROPERTY(nameSupplierStock(i)) { caption = 'Склад'; };
                                }
                                NEW headerCustomer {
                                    caption = 'Покупатель';
                                    horizontal = TRUE;
                                    fill = 1;
                                    MOVE PROPERTY(nameCustomer(i)) { caption = ''; };
                                    MOVE PROPERTY(nameCustomerStock(i)) { caption = 'Склад'; };
                                }
                            }
                            NEW headerTabbedPane {
                                fill = 1;
                                tabbed = TRUE;
                                NEW headerMainParams {
                                    caption = 'Основные параметры';
                                    fill = 1;
                                    NEW headerContract {
                                        horizontal = TRUE;
                                        caption = 'Договор';
                                        MOVE PROPERTY(seriesNumberContractSku(i));
                                        MOVE PROPERTY(isCommission(i));
                                    }
                                    MOVE GROUP(documentPrm,i) {
                                        lines = 3;
                                        alignment = STRETCH;
                                    }
                                    MOVE PROPERTY(note(i)) {
                                        alignment = STRETCH;
                                    }
                                }
                                NEW headerExtraParams {
                                    caption = 'Дополнительные параметры';
                                    lines = 4;
        //                            size = (500, -1);
                                }
                                NEW headerCreateDetail {
                                    caption = 'Основание';
                                    fill = 1;
                                    horizontal = TRUE;
                                    lines = 2;
                                }
                                NEW headerCreateDocuments {
                                    caption = 'Производные документы';
                                    lines = 2;
        //                            size = (500, -1);
                                }
                                NEW import {
                                    caption = 'Импорт';
                                    fill = 1;
                                    horizontal = TRUE;
                                }
                                NEW add {
                                    caption = 'Подбор';
                                    horizontal = TRUE;
                                    alignment = START;
                                    MOVE PROPERTY(fillDocument(i));
                                    MOVE PROPERTY(addDetailDialogSkuStockUserInvoiceDetail(i));
                                }
                            }
                        }
                        MOVE GROUP(documentSum,i) {
                            lines = 1;
                            MOVE PROPERTY(sumNetWeightInvoiceDetail(i)); 
                            MOVE PROPERTY(sumGrossWeightInvoiceDetail(i));                                                                                                                                                                                                                
                        }
                    }
                    NEW specificationBox {
                        fill = 1;
                        tabbed = TRUE;
                        MOVE BOX(d) {
                            caption = 'Спецификация';
                        }
                    }
                }
            }

            MOVE TOOLBARBOX;

            PROPERTY(formOk()) {
                caption = 'Провести';
            }
            PROPERTY(sumUserInvoiceDetail(i)) { charWidth = 13;}
            PROPERTY(VATSumUserInvoiceDetail(i)) { charWidth = 13;}  
            PROPERTY(invoiceSumUserInvoiceDetail(i)) { charWidth = 13;}
            PROPERTY(deleteUserInvoiceDetail(i)){focusable = FALSE;}
        }
    }

    @addEventGenerateNumberOnForm(userInvoice, i, userInvoice);
    
    //возможность приоритетной подмены
    overVAT = ABSTRACT VALUE Range (UserInvoiceDetail);
    overVAT(UserInvoiceDetail d) += VAT (sku(d), country(supplierStock(d)));
    changedVAT = ABSTRACT VALUE BOOLEAN (UserInvoiceDetail);

    skipSetVAT = ABSTRACT VALUE BOOLEAN (UserInvoiceDetail);
    
    WHEN LOCAL FORMS userInvoice
        (CHANGED(sku(UserInvoiceDetail detail)) OR CHANGED (supplierStock(detail)) OR changedVAT(detail)) AND NOT CHANGED(VAT(detail)) AND NOT skipSetVAT(detail) DO {
            VAT(detail) <- overVAT(detail);
            
        } // записываем шкалу
        
    CONSTRAINT equalSkuVATInvoices() AND VAT(UserInvoiceDetail d) AND isPosted(d) AND NOT overVAT(d) == VAT(d)
        MESSAGE 'НДС в строке накладной '##sign##' не соответствует НДС для SKU';        
    // Добавляем подбор товаров / партий
    @defineDocumentSkuPriceListTypeAgreement(userInvoice, stockProp, priceListTypePrefix);
    @extendFormDocumentSkuPriceListTypeAgreement(userInvoice, userInvoice, i, stockProp###stock);

    overCopy  ABSTRACT LIST ( Invoice, UserInvoice);
    overCopy  ABSTRACT LIST ( UserInvoiceDetail, InvoiceDetail);
    
    copy 'Копировать'(Invoice invoice)  { 
	NEWSESSION {
	        NEW i = UserInvoice {
	            supplier(i) <- supplier(invoice);
	            supplierStock(i) <- supplierStock(invoice);
	            customer(i) <- customer(invoice);
	            customerStock(i) <- customerStock(invoice);
	            contractSku(i) <- contractSku(invoice);
	            isCommission(i) <- isCommission(invoice);
	            currency(i) <- currency(invoice);
	            agreement(i) <- agreement(invoice);
	            priceListType(i) <- priceListType(invoice);
	            note(i) <- note(invoice);
	
	            overCopy(invoice, i);
	
	            FOR invoice(InvoiceDetail invoiceDetail) == invoice DO {
	                NEW d=UserInvoiceDetail {
	                    userInvoice(d) <- i;
	                    sku(d) <- sku(invoiceDetail);
	                    quantity(d) <- quantity(invoiceDetail);
	                    price(d) <- price(invoiceDetail);
	                    
	                    overCopy(d, invoiceDetail);
	                }
	            }
	
	            SHOW userInvoice OBJECTS i = i DOCKED NOCANCEL;
	        }
	    }
} TOOLBAR;
    
//-- Копирование строк     
    overCopy  ABSTRACT LIST ( UserInvoiceDetail, UserInvoiceDetail);

    copy 'Копировать'(UserInvoiceDetail detail)  { 
        NEW d = UserInvoiceDetail {          

            userInvoice(d) <- userInvoice(detail);
            sku(d) <- sku(detail);
            quantity(d) <- quantity(detail);
            price(d) <- price(detail);
            priceListType(d) <- priceListType(detail);
            invoicePrice(d) <- invoicePrice(detail);
            
            overCopy(d, detail);                              
        }
    } CHANGEKEY 'F6' TOOLBAR;
    
    EXTEND FORM userInvoice PROPERTIES(d) copy SHOWIF NOT hideAdd(i);
    DESIGN userInvoice { PROPERTY(copy(d)) { focusable = FALSE; } }

    isUserOpened(UserInvoice i)=  isOpened[Invoice](i) AND is(i);
    
    filterInvoiceDateFrom 'Дата с' = DATA LOCAL NESTED DATE ();
    filterDateFrom (Invoice i) = date(i) >= filterInvoiceDateFrom() OR (i IS Invoice AND NOT filterInvoiceDateFrom());      
    
    filterInvoiceDateTo 'Дата по' = DATA LOCAL NESTED DATE ();
    filterDateTo (Invoice i) = date(i) <= filterInvoiceDateTo() OR (i IS Invoice AND NOT filterInvoiceDateTo());      
    
    filterInvoiceCustomer  = DATA LOCAL NESTED LegalEntity ();
    nameFilterInvoiceCustomer 'Покупатель' = name(filterInvoiceCustomer()) CHARWIDTH 15;          
    filterCustomer (Invoice i) = customer(i) == filterInvoiceCustomer() OR (i IS Invoice AND NOT filterInvoiceCustomer());    

    filterInvoiceCustomerStock  = DATA LOCAL NESTED Stock ();
    nameFilterInvoiceCustomerStock 'Склад покупателя' = name(filterInvoiceCustomerStock()) CHARWIDTH 15;          
    filterCustomerStock (Invoice i) = customerStock(i) == filterInvoiceCustomerStock() OR (i IS Invoice AND NOT filterInvoiceCustomerStock());  

    filterInvoiceSupplier = DATA LOCAL NESTED LegalEntity ();
    nameFilterInvoiceSupplier 'Поставщик' = name(filterInvoiceSupplier()) CHARWIDTH 15;          
    filterSupplier (Invoice i) = supplier(i) == filterInvoiceSupplier() OR (i IS Invoice AND NOT filterInvoiceSupplier());      

    filterInvoiceSupplierStock  = DATA LOCAL NESTED Stock ();
    nameFilterInvoiceSupplierStock 'Склад поставщика' = name(filterInvoiceSupplierStock()) CHARWIDTH 15;          
    filterSupplierStock (Invoice i) = supplierStock(i) == filterInvoiceSupplierStock() OR (i IS Invoice AND NOT filterInvoiceSupplierStock());      
    
    filterInvoiceCustomUser  = DATA LOCAL NESTED CustomUser ();
    nameFilterInvoiceCustomUser 'Создан пользователем' = name[Contact](filterInvoiceCustomUser()) CHARWIDTH 15;          
    filterCustomUser (Invoice i) = createdUser[UserInvoice](i) == filterInvoiceCustomUser() OR (i IS Invoice AND NOT filterInvoiceCustomUser());  

    filterInvoiceComputer = DATA LOCAL NESTED Computer ();
    nameFilterInvoiceComputer 'Создан на компьютере' = hostname(filterInvoiceComputer()) CHARWIDTH 15;          
    filterComputer (Invoice i) = createdComputer(i) == filterInvoiceComputer() OR (i IS Invoice AND NOT filterInvoiceComputer());
    
    overShowEdit = ABSTRACT BOOLEAN (Invoice);
    overShowDelete = ABSTRACT BOOLEAN (Invoice);
    skipShowEdit = ABSTRACT VALUE BOOLEAN (Invoice);
    skipShowDelete = ABSTRACT VALUE BOOLEAN (Invoice);
    
    overShowEdit[Invoice.Invoice](Invoice i) += overShowEdit(i);
    overShowDelete[Invoice.Invoice](Invoice i) += overShowDelete(i);
    
    skipOpen = ABSTRACT BOOLEAN (UserInvoice);
    showClose (UserInvoice i) = isOpened(i) AND NOT skipClose(i);   
    showOpen (UserInvoice i) = isClosed(i) AND NOT skipOpen(i);   
    background 'Цвет' (Invoice i)= ABSTRACT CASE COLOR (Invoice);
    background(Invoice i) += WHEN isDraft(i) THEN RGB(212,255,212); 
    
    backgroundSkuDetail 'Цвет' (d) = ABSTRACT CASE COLOR (InvoiceDetail);
    backgroundId 'Цвет' = ABSTRACT VALUE COLOR(UserInvoiceDetail);
    backgroundId (UserInvoiceDetail d) += backgroundSkuDetail(d);
    
    FORM invoices 'Накладные' 
    
        PROPERTIES() filterInvoiceDateFrom, filterInvoiceDateTo, nameFilterInvoiceSupplier, nameFilterInvoiceSupplierStock, 
                     nameFilterInvoiceCustomer, nameFilterInvoiceCustomerStock, nameFilterInvoiceCustomUser, nameFilterInvoiceComputer
        
        OBJECTS i = Invoice LAST
        PROPERTIES (i) READONLYIF isReadonly() BACKGROUND background(i) isClosed 
                                
        PROPERTIES (i) READONLYIF isReadonly() BACKGROUND background(i) isPosted,
                                number, series, date, time                                
        PROPERTIES (i) READONLYIF isReadonly() BACKGROUND background(i) nameSupplier, nameSupplierStock, nameCustomer, nameCustomerStock,
                                nameCurrency, nameAgreement,
                                seriesNumberContractSku, isCommission
        PROPERTIES (i) READONLY BACKGROUND background(i) countInvoiceDetail, quantityInvoiceDetail, sumInvoiceDetail,
                                VATSumInvoiceDetail, invoiceSumInvoiceDetail
        PROPERTIES (i) READONLYIF isReadonly() BACKGROUND background(i) note
        PROPERTIES (i) READONLY PANEL createdNameUser[UserInvoice], createdTime[UserInvoice], createdHostnameComputer, 
                                            postedNameUser, postedTime, postedHostnameComputer 

        PROPERTIES (i) NEWSESSION NEW[UserInvoice], editI = EDIT SHOWIF overShowEdit(i) //isOpenedInvoice(i), 
        PROPERTIES (i)            copy
        PROPERTIES (i) close[UserInvoice] SHOWIF showClose(i), open SHOWIF showOpen(i)
        PROPERTIES (i) NEWSESSION deletei=DELETE SHOWIF overShowDelete(i)//isUserOpenedInvoice(i)

        OBJECTS d = InvoiceDetail
        PROPERTIES (d) READONLY index
        PROPERTIES (d) READONLY BACKGROUND backgroundSkuDetail(d) idBarcodeSku
        PROPERTIES (d) READONLY BACKGROUND backgroundId(d) idSku SHOWIF showIDs()
        PROPERTIES (d) READONLY BACKGROUND backgroundSkuDetail(d) nameSku, shortNameUOMSku
        PROPERTIES (d) READONLY quantity, namePriceListType, price SHOWIF NOT hideWithoutVAT(i), sum SHOWIF NOT hideWithoutVAT(i),
                       numberVAT SHOWIF NOT hideWithoutVAT(i), valueVAT SHOWIF NOT hideWithoutVAT(i), 
                       invoicePrice SHOWIF NOT hideWithVAT(i),
                       VATSum, invoiceSum
        ORDERS index(d)

        FILTERS invoice(d) == i
        FILTERS filterDateFrom(i), 
                filterDateTo(i),
                filterSupplier(i),
                filterSupplierStock(i),
                filterCustomer(i),
                filterCustomerStock(i),
                filterCustomUser(i),
                filterComputer(i)
                
        EVENTS ON INIT {
            IF filterInvoiceInterval() THEN
                filterInvoiceDateFrom() <- subtract(currentDate(), filterInvoiceInterval()); 
        }        
                
        LIST Invoice OBJECT i
    ;

    DESIGN invoices 'Накладные'###sign {
        BOX {
            size = (1024, 768);

            NEW documentContainer BEFORE TOOLBARBOX {
                fill = 1;
                NEW filtersBox {                       
                    fill = 1;
                    NEW topFilters {
                        caption = 'Фильтры';
                        alignment = STRETCH; 
                        NEW topFilters1 {
                            horizontal = TRUE; 
                            alignment = STRETCH; 
                            MOVE PROPERTY(filterInvoiceDateFrom());
                            MOVE PROPERTY(filterInvoiceDateTo());                            
                            MOVE PROPERTY(nameFilterInvoiceCustomUser()) { fill = 1; }
                            MOVE PROPERTY(nameFilterInvoiceComputer()) { fill = 1; }                            
                        }
                        NEW topFilters2 {
                            horizontal = TRUE; 
                            alignment = STRETCH; 
                            MOVE PROPERTY(nameFilterInvoiceSupplier()) { fill = 1; }
                            MOVE PROPERTY(nameFilterInvoiceSupplierStock()) { fill = 1; }    
                            MOVE PROPERTY(nameFilterInvoiceCustomer()) { fill = 1; }
                            MOVE PROPERTY(nameFilterInvoiceCustomerStock()) { fill = 1; }                                                    
                        }                                                                                         
                    }
                    MOVE BOX(i) {
                        fill = 1;
                    }
                }    

                NEW documentDetail {
                    fill = 1;
                    tabbed = TRUE;

                    MOVE BOX(d) {
                        fill = 1;
                        caption = 'Спецификация';
                    }
                    NEW documentHistory {
                        caption = 'История';
                        MOVE GROUP(created,i) { alignment = STRETCH; }
                        MOVE GROUP(posted,i) { alignment = STRETCH; }
                    }
                    NEW printTabContainer {
                        caption = 'Печатные формы';
                        NEW printTabScroll {
                            fill = 1;
                            height = 1;
                            NEW printTab {
                                NEW printContainer {
                                    caption = 'Печать';
                                }
                            }
                        }
                    }
                    NEW actionContainer {
                        caption = 'Действия';
                        horizontal = TRUE;
                        NEW createdContainer {
                            caption = 'Создание на основе';
                            MOVE PROPERTY(copy(i)) { caption = 'Накладная'###sign; alignment = STRETCH; }
                        }
                        NEW machineryContainer {
                            caption = 'Загрузка';
                            NEW label {
                                caption = 'Ценники' ;
                            }
                        }
                    }
                }
            }
        }
    }
    @extendFormEditable(invoices);
    @defineFilterIsOpened (invoice, invoices, i); 
    @defineDocumentLogForm(invoices, i);
    @defineDocumentLogForm(userInvoice, i, specificationBox);
    @defineDocumentLogBarcode(userInvoice, i, specificationBox, userInvoice);

    DESIGN userInvoice { historyTabs { caption = 'История'; } }
    FORM invoiceDetails 'Строка накладной'##sign
        OBJECTS d = InvoiceDetail
        PROPERTIES(d) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku,
                               description,
                               quantity, price, sum,
                               numberVAT, valueVAT, VATSum, invoiceSum,
                               name###stockProp##Stock
        FILTERS sku(d) // нужно чтобы был фильтр по полю из InvoiceDetail, чтобы не лезла за классом в другую таблицу

        LIST InvoiceDetail OBJECT d
    ;
    
    backgroundVAT(UserInvoiceDetail d) += WHEN isItem(sku(d)) AND NOT 
        ((valueVAT(d) == valueVAT(sku(d), country(customerStock(d)), date(d)))
         OR (valueVAT(d) == overSetValueVAT(d))) 
            THEN RGB(255,0,0); 
            
    edit(UserInvoiceDetail d) + {  DIALOG userInvoice OBJECTS i = userInvoice(d), d = d; }
    
    show 'Просмотреть'  ABSTRACT LIST ( InvoiceDetail) TOOLBAR;
    show(UserInvoiceDetail d)  { 
    	NEWSESSION {
	        SHOW userInvoice OBJECTS i = userInvoice(d), d = d DOCKED READONLY;
	    }
    }
    show(UserInvoiceDetail d) + {  show(d); }
    
    show 'Просмотреть' (UserInvoice i)   { 
        NEWSESSION{
            SHOW userInvoice OBJECTS i = i DOCKED READONLY;
        }
        
    }TOOLBAR;
        
    showToShow (UserInvoice i) = is(i) AND NOT overShowEdit(i);
    EXTEND FORM invoices 
        PROPERTIES show(i) SHOWIF showToShow(i) BEFORE editI
    
    ;
    EXTEND FORM userInvoice
        PROPERTIES(ks) READONLY AFTER shortNameUOM(ks) nameManufacturer[Item], nameCountry[Item]
    ;
    
    @defineAddSkuLists(userInvoice, userInvoice, i);
    @defineNewSkuList(userInvoice, userInvoice, invoices, i);
    
    DESIGN userInvoice {
        add {
            MOVE PROPERTY(addSkuLists(i));
            MOVE PROPERTY(newSkuList(i));
        }
    }  
    DESIGN invoices {
        actionContainer {
            NEW listSku {
                caption = 'Списки SKU';
                MOVE PROPERTY (newSkuList(i));
            }
        }
    }           
END

// -------------------------- Метакод по добавлению партий ------------------------- //

META defineInvoiceBatch(stockProp, priceListTypePrefix, NS, sign, char)
    @showDocumentInterfaceDetailBatch(invoice);
    
    @defineDocumentInterfaceDetailBatch(invoice, batch); 
    
    overCopy[UserInvoiceDetail,UserInvoiceDetail](UserInvoiceDetail d, UserInvoiceDetail detail) + {       
        batch(d) <- batch(detail);
    }  
    overCopy(UserInvoiceDetail d, UserInvoiceDetail detail) + {       
        batch(d) <- batch(detail);
    }  
    
    // Пишем в цену инвойса из вида цен в зависимости от партии
    @deriveDocumentDetailPricePriceListTypeVATBatch(userInvoice, stockProp###stock, userInvoice);

    // История по правой кнопке
    @defineBalancesBatch(invoiceDetail); //-- показываем по нажатию правой клавиши остатки партии
    @defineBalancesBatch(userInvoiceDetail); //-- показываем по нажатию правой клавиши остатки партии
    @defineMovementBatch(invoiceDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение по партии
    @defineMovementBatch(userInvoiceDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение по партии

    // Подбор по партиям
    @defineDocumentBatchPriceListTypeAgreement(userInvoice, stockProp, priceListTypePrefix);
    @extendFormDocumentBatchPriceListTypeAgreement(userInvoice, userInvoice, i, stockProp###stock);
    
    // Подбор документа
    @implementDocumentBatch(invoice);
    
    @implementDocumentBatchForm(char##i);
   
    replace(Sku s, Batch b) + {  sku(UserInvoiceDetail detail) <- s WHERE batch[Invoice.InvoiceDetail](detail) == b;} 
    
END

// Партии с диалогом по складам
META defineInvoiceBatchDialogStock(stockProp, dialog)

    over###stockProp = ABSTRACT Stock (UserInvoiceDetail);
    
    useOverChangeBatch = ABSTRACT BOOLEAN (UserInvoiceDetail);
    overChangeBatch ABSTRACT LIST (UserInvoiceDetail);
     
    changeBatch(UserInvoiceDetail d)  { 
        IF useOverChangeBatch(d) THEN overChangeBatch(d);
        ELSE
            DIALOG dialogBatchStock##dialog OBJECTS 
                                st = (OVERRIDE over###stockProp(d), stockProp(d)),
                                t = dateTime(d),
                                sk = sku(d),
                                bt = batch(d) INPUT NULL LIST name(bt) NEWSESSION DO {
                batch(d) <- bt;    
                }                                    
    }

    changeWYSBatch(UserInvoiceDetail d)  {
        INPUT s = STRING DO {
            batch(d) <- GROUP LAST Batch b ORDER b WHERE sku(b) = sku(d) AND name(b) = s; 
        } 
    }
    
    backgroundBatch 'Цвет' (d) = ABSTRACT CASE COLOR (UserInvoiceDetail);

    EXTEND FORM userInvoice
        PROPERTIES (d) SHOWIF showBatch[Invoice](i) AFTER shortNameUOMSku(d) nameBatch BACKGROUND backgroundBatch(d) ON CHANGE changeBatch(d) ON CHANGEWYS changeWYSBatch(d), documentNameBatch ON CHANGE changeBatch(d)  
    ;
    EXTEND FORM invoices PROPERTIES (d) READONLY AFTER shortNameUOMSku(d) SHOWIF showBatch(i) nameBatch, documentNameBatch;
END

customChangeBatch = ABSTRACT BOOLEAN (InvoiceDetail);
dialogCustomChangeBatch ABSTRACT (InvoiceDetail);

// Партии на приходе
META defineInvoiceBatchDialog(dumb)
    changeBatch(UserInvoiceDetail d)  { 
        IF customChangeBatch(d) THEN    
            dialogCustomChangeBatch(d);
        ELSE    
        DIALOG dialogBatch OBJECTS sk = sku(d), bt = batch(d) INPUT NULL NEWSESSION DO {
            batch(d) <- bt;
        }
    }

    EXTEND FORM userInvoice
        PROPERTIES (d) nameBatch ON CHANGE changeBatch(d) AFTER shortNameUOMSku(d) SHOWIF showBatch[Invoice](i)
    ;
    EXTEND FORM invoices PROPERTIES (d) READONLY nameBatch AFTER shortNameUOMSku(d) SHOWIF showBatch(i);
END

META defineInvoiceReturn(nsdir, nsret, stockProp, contactStockProp)
    invoiceDetail (invoiceDetail) = ABSTRACT nsdir.InvoiceDetail (nsret.InvoiceDetail) MATERIALIZED INDEXED;
    invoiceDetail (userInvoiceDetail) = DATA nsdir.InvoiceDetail (nsret.UserInvoiceDetail) INDEXED;
    invoiceDetail(UserInvoiceDetail detail) += invoiceDetail(detail);

    returnQuantity 'Кол-во (возвращено)' (invoiceDetail)= GROUP SUM quantity(InvoiceDetail iinvoiceDetail) IF isPosted(iinvoiceDetail) 
        BY invoiceDetail(iinvoiceDetail) CHARWIDTH 7 MATERIALIZED;
    returnQuantityInvoiceDetail 'Кол-во (возвращено)' (invoice) =  GROUP SUM returnQuantity(nsdir.InvoiceDetail invoiceDetail) BY invoice(invoiceDetail) CHARWIDTH 8 MATERIALIZED;
    toReturnQuantity 'Кол-во доступно к возврату' (nsdir.InvoiceDetail invoiceDetail)= quantity(invoiceDetail) (-) returnQuantity(invoiceDetail);

    skipCheckReturnQuantity = ABSTRACT BOOLEAN (InvoiceDetail);
    
    skipCheckInvoceReturnSupplier = ABSTRACT BOOLEAN (InvoiceDetail);
    skipCheckInvoceReturnCustomer = ABSTRACT BOOLEAN (InvoiceDetail);
    
    CONSTRAINT returnQuantity(invoiceDetail(InvoiceDetail d)) > quantity((invoiceDetail(d))) AND NOT skipCheckReturnQuantity(d)
        MESSAGE 'Количество строки возврата больше чем количество строки основания';

    CONSTRAINT invoiceDetail(UserInvoiceDetail d) AND NOT sku(invoiceDetail(d)) = sku(d) CHECKED BY invoiceDetail[UserInvoiceDetail]
        MESSAGE 'SKU строки основания должен соответствовать SKU строки возврата';

    CONSTRAINT invoiceDetail(UserInvoiceDetail d) AND NOT supplier(invoiceDetail(d)) = supplier(d) AND NOT skipCheckInvoceReturnSupplier(d) CHECKED BY invoiceDetail[UserInvoiceDetail]
        MESSAGE 'Поставщик строки основания должен соответствовать Поставщик строки возврата';

    CONSTRAINT invoiceDetail(UserInvoiceDetail d) AND NOT customer(invoiceDetail(d)) = customer(d) AND NOT skipCheckInvoceReturnCustomer(d) CHECKED BY invoiceDetail[UserInvoiceDetail]
        MESSAGE 'Покупатель строки основания должен соответствовать Покупатель строки возврата';

    descriptionInvoiceDetail 'Основание' (InvoiceDetail invoiceDetail) = description(invoiceDetail(invoiceDetail));
    descriptionInvoiceDetail 'Основание' (UserInvoiceDetail userInvoiceDetail) = description(invoiceDetail(userInvoiceDetail));
    balanceBMaxBatch 'Остаток партии (max)' (nsdir.InvoiceDetail d,Stock st,DATETIME dt) = balanceB(maxBatch(d),st,dt);
    
    FORM baseInvoiceDetail 'Строка накладной'        
        OBJECTS sk = Sku PANEL
        PROPERTIES(sk) READONLY name, idBarcode, shortNameUOM
        
        OBJECTS st = Stock PANEL 
        OBJECTS cst = Stock PANEL   
        OBJECTS dt = DATETIME PANEL              
        OBJECTS d = nsdir.InvoiceDetail LAST
        PROPERTIES(d) READONLY date, index, description,
                               quantity, toReturnQuantity
        PROPERTIES   READONLY balanceBMaxBatch(d,st,dt)                       
        PROPERTIES(d) READONLY price, sum,
                               numberVAT, valueVAT, VATSum, invoiceSum,
                               name###stockProp, name###contactStockProp
        FILTERS sku(d) == sk
                
        FILTERGROUP filter11
                    FILTER  'По складу' stockProp(d) == st DEFAULT     
        FILTERGROUP filter12
                    FILTER  'Доступно' toReturnQuantity(d) > 0 DEFAULT                            
        FILTERGROUP filter13
                    FILTER  'По складу контрагента' contactStockProp(d) == cst DEFAULT             
    ;
    DESIGN baseInvoiceDetail {
        BOX {
            MOVE BOX(sk) {
                horizontal = TRUE;
                PROPERTY(name(sk)) {focusable = FALSE;}
                PROPERTY(idBarcode(sk)) {focusable = FALSE;}
                PROPERTY(shortNameUOM(sk)) {focusable = FALSE;}
            }
            MOVE BOX(d);
            MOVE TOOLBARBOX;
        }
    } 
    
    
    use##nsdir##InvoiceDetailCustom = ABSTRACT BOOLEAN (InvoiceDetail);
    change##nsdir##InvoiceDetailCustom  ABSTRACT (InvoiceDetail);
    change##nsdir##InvoiceDetail(InvoiceDetail detail)  { 
        IF use##nsdir##InvoiceDetailCustom(detail) THEN {
            change##nsdir##InvoiceDetailCustom(detail);
        } ELSE {
            DIALOG baseInvoiceDetail OBJECTS 
                                        sk = sku(detail), 
                                        st = stockProp(detail), 
                                        cst = contactStockProp(detail), 
                                        dt = dateTime(detail), 
                                        d = invoiceDetail[UserInvoiceDetail](detail) INPUT NULL NEWSESSION DO {
                invoiceDetail[UserInvoiceDetail](detail) <- d;
            }
        }
    }    
    

//    nsret.priceUserInvoiceDetail(detail) <- IF invoiceDetailUserInvoiceDetail(detail) THEN
//                                                    nsdir.priceInvoiceDetail(invoiceDetailUserInvoiceDetail(detail))
//                                                 ELSE IF batchUserInvoiceDetail(detail) THEN
//                                                    prevPriceBPriceListTypeBatchStockDateTime(nsret.priceListTypeInvoiceDetail(detail),
//                                                                                              nsret.batchInvoiceDetail(detail),
//                                                                                              nsret.stockProp###invoiceDetail(detail),
//                                                                                              nsret.dateTimeInvoiceDetail(detail))
//                                                 ELSE
//                                                    prevPriceBPriceListTypeSkuStockDateTime(nsret.priceListTypeInvoiceDetail(detail),
//                                                                                            nsret.skuInvoiceDetail(detail),
//                                                                                            nsret.stockProp###invoiceDetail(detail),
//                                                                                            nsret.dateTimeInvoiceDetail(detail))
//                                        WHEN CHANGED(invoiceDetailUserInvoiceDetail(detail)) OR
//                                             CHANGED(nsret.batchInvoiceDetail(detail)) OR
//                                             CHANGED(nsret.priceListTypeInvoiceDetail(detail)) OR
//                                             CHANGED(nsret.skuInvoiceDetail(detail)) OR
//                                             CHANGED(nsret.stockProp###invoiceDetail(detail)) OR
//                                             CHANGED(nsret.dateTimeInvoiceDetail(detail));

//    overRecalculatedPrice  ABSTRACT LIST ( nsret.UserInvoiceDetail);
//    priceReturn  = ABSTRACT CASE NUMERIC[16,4] (UserInvoiceDetail); 
//    invoicePriceReturn  = ABSTRACT CASE NUMERIC[16,4] (UserInvoiceDetail); 
//    priceReturn (UserInvoiceDetail d) += WHEN d IS UserInvoiceDetail AND invoiceDetail(d)  THEN (IF notUseRound2() THEN price(invoiceDetail(d)) ELSE round2(price(invoiceDetail(d))));
//    invoicePriceReturn (UserInvoiceDetail d) += WHEN d IS UserInvoiceDetail AND invoiceDetail(d)  THEN (IF notUseRound2() THEN invoicePrice(invoiceDetail(d)) ELSE round2(invoicePrice(invoiceDetail(d))));    
    
    prevList (PriceListType t, UserInvoiceDetail d) += WHEN t IS PriceListType AND invoiceDetail(d) THEN NUMERIC[16,4](price(invoiceDetail(d)) * IF includeVAT(t) THEN (100.0 (+) calcValueVAT(d)) / 100.0 ELSE 1.0);
//    recalculatedPrice(UserInvoiceDetail detail)  {    //todo: необходимо сделать, чтобы ACTION вызывался после пересчета цены от партии
//        IF invoiceDetail(detail) THEN {
//            price(detail) <-  priceReturn(detail);               
//            invoicePrice(detail) <-  invoicePriceReturn(detail);       
//
//            VAT(detail) <- VAT(invoiceDetail(detail));
//            overRecalculatedPrice(detail);
//        }
//    }
    WHEN LOCAL FORMS userInvoice GOAFTER valueVAT[UserInvoiceDetail] // цены берем на начало сессии, а не этого event'а
             CHANGED(invoiceDetail(UserInvoiceDetail d))
             AND NOT CHANGED(price(d)) 
             AND PriceListType pt == priceListType(d) AND sku(d) AND includeVAT(pt) NOINLINE (pt) DO {
        price(d) <- round2(prevList(pt, d) * 100.0 /(100.0 (+) calcValueVAT(d)));
        invoicePrice(d) <- round2(prevList(pt, d));
    }

    WHEN LOCAL FORMS userInvoice GOAFTER valueVAT[UserInvoiceDetail] // цены берем на начало сессии, а не этого event'а
             CHANGED(invoiceDetail(UserInvoiceDetail d))
             AND NOT CHANGED(price(d)) 
             AND PriceListType pt == priceListType(d) AND sku(d) AND NOT includeVAT(pt) NOINLINE (pt) DO {
        price(d) <- round2(prevList(pt, d));
        invoicePrice(d) <- round2(prevList(pt, d) * (100.0 (+) calcValueVAT(d)) / 100.0);
    }
    
    backgroundDescription 'Цвет' (d) = ABSTRACT CASE COLOR (UserInvoiceDetail);
    
    EXTEND FORM userInvoice PROPERTIES (d) descriptionInvoiceDetail BACKGROUND backgroundDescription(d) ON CHANGE change##nsdir##InvoiceDetail(d) 
                AFTER shortNameUOMSku(d);
    EXTEND FORM nsdir.userInvoice PROPERTIES (d) READONLY returnQuantity BEFORE namePriceListType(d);

    EXTEND FORM invoices PROPERTIES (d) READONLY descriptionInvoiceDetail AFTER shortNameUOMSku(d);
    EXTEND FORM nsdir.invoices PROPERTIES (d) READONLY returnQuantity BEFORE namePriceListType(d);

    WHEN LOCAL FORMS userInvoice CHANGED(sku(UserInvoiceDetail d)) AND NOT sku(d)==prevSku(invoiceDetail(d)) DO
        invoiceDetail(d) <- NULL;

    WHEN LOCAL FORMS userInvoice CHANGED(sku(UserInvoiceDetail d)) AND NOT sku(d)==prevSku(batch(d)) DO
        batch(d) <- NULL;
    
    WHEN LOCAL FORMS userInvoice
        CHANGED(invoiceDetail(UserInvoiceDetail detail)) AND prevCountBatch(invoiceDetail(detail)) == 1 AND NOT skipFillBatch(detail) DO
            batch(detail) <- prevMaxBatch(invoiceDetail(detail));

    skipInBatchInvoiceDetail = ABSTRACT VALUE BOOLEAN(UserInvoiceDetail);   
    CONSTRAINT batch(UserInvoiceDetail detail) AND invoiceDetail(detail) AND
               NOT in(invoiceDetail(detail), batch(detail)) AND NOT skipInBatchInvoiceDetail(detail)
               CHECKED BY batch[UserInvoiceDetail], invoiceDetail[UserInvoiceDetail]
               MESSAGE 'Выбрана партия, которая не была списана в соответствующей строке основания';
               
    equalsPriceLineInvoices 'Цена в возвратной накладной должна соответстовать цене в основании' = DATA BOOLEAN ();
    
    
    EXTEND FORM options
        PROPERTIES() nsret###equalsPriceLineInvoices = equalsPriceLineInvoices
    ;
    
    DESIGN options {
        invoice##nsret {
            MOVE PROPERTY(nsret###equalsPriceLineInvoices);    
        }
    }

    CONSTRAINT isPosted(UserInvoiceDetail d) AND equalsPriceLineInvoices() AND (price(d) OR price(invoiceDetail(d))) AND NOT (price(d) ==  price(invoiceDetail(d)))
        MESSAGE 'Цена в возвратной накладной не соответствует цене в основании';  
            
    //----------- Автоматическое заполнение основания для возвратной накладной ------------------//
    countInvoiceDetailsSupplierCustomerPrice 'Количество строк основания' = GROUP SUM 1 
        IF date(nsdir.InvoiceDetail d) <= DATE date AND isPosted(d)
            BY supplier(d), supplierStock(d), customer(d), customerStock(d), sku(d), price(d), date;
    
    invoiceDetailSupplierCustomerPrice 'Количество строк основания' = GROUP MAX nsdir.InvoiceDetail d 
        IF date(d) <= DATE date AND isPosted(d)
            BY supplier(d), supplierStock(d), customer(d), customerStock(d), sku(d), price(d), date;
                
    maxSaleInvoiceDetail(UserInvoiceDetail d) = invoiceDetailSupplierCustomerPrice(supplier(d),supplierStock(d), customer(d),customerStock(d),sku(d), price(d),date(d));
    countSaleInvoiceDetails(UserInvoiceDetail d) = countInvoiceDetailsSupplierCustomerPrice(supplier(d),supplierStock(d), customer(d),customerStock(d),sku(d), price(d), date(d));
    balanceReturnQuantity(nsdir.InvoiceDetail detail) = quantity(detail) (-) returnQuantity(detail);
    
    //-- пока берем без учета того, что в данной накладной может быть несколько строк с одним товаром
    fillInvoiceDetail 'Проставить основание'(UserInvoiceDetail d)   {    
        invoiceDetail(d) <- maxSaleInvoiceDetail(d)
            WHERE NOT invoiceDetail(d)  AND countSaleInvoiceDetails(d) == 1 AND        
            balanceReturnQuantity(maxSaleInvoiceDetail(d)) >= quantity(d);
    } ASON CONTEXTMENU descriptionInvoiceDetail[UserInvoiceDetail];
    
    
    fillAllInvoiceDetail 'Проставить основание для всех'(UserInvoiceDetail detail)  { 
       FOR userInvoice(detail) == userInvoice(UserInvoiceDetail d) DO
           fillInvoiceDetail(d);
    } ASON CONTEXTMENU descriptionInvoiceDetail[UserInvoiceDetail];               
               
END

META defineInvoiceDestination(fromLegalEntity, toLegalEntity)
    from(Invoice invoice) += fromLegalEntity(invoice);
    to(Invoice invoice) += toLegalEntity(invoice);
    //Invoice.dataFromLegalEntityInvoiceDetail(detail) += data###fromLegalEntity##InvoiceDetail(detail);
    //Invoice.dataToLegalEntityInvoiceDetail(detail) += data###toLegalEntity##InvoiceDetail(detail);
END


META defineInvoiceStockDestination(fromStockProp, toStockProp)
    fromStock(Invoice invoice) += fromStockProp(invoice);
    toStock(Invoice invoice) += toStockProp(invoice);
END

// вторая валюта
META defineInvoiceHomeCurrency(companyProp)

    backgroundHomeCurrency 'Цвет' (Invoice invoice) = RGB(255, 224, 128) IF invoice IS Invoice;

    isHomeCurrency 'Конвертация' = ABSTRACT BOOLEAN(Invoice) IN documentPrm;
    isHomeCurrency 'Конвертация' = DATA BOOLEAN(UserInvoice) IN documentPrm;
    isHomeCurrency(UserInvoice i) += isHomeCurrency(i);
    
    isHomeCurrency (InvoiceDetail d) = isHomeCurrency(invoice(d));
    isHomeCurrency (UserInvoiceDetail d) = isHomeCurrency(userInvoice(d));

    homeCurrency = ABSTRACT Currency(Invoice);
    homeCurrency = DATA Currency(UserInvoice);
    homeCurrency(UserInvoice i) += homeCurrency(i);
    nameHomeCurrency 'Валюта (конв.)' (Invoice i) = name(homeCurrency(i));

    homeCurrency(UserInvoice userInvoice) <- currency(companyProp(userInvoice)) WHEN CHANGED(companyProp(userInvoice));
    
    homeCurrency(InvoiceDetail d) = homeCurrency(invoice(d));
    homeCurrency(UserInvoiceDetail d) = homeCurrency(userInvoice(d));

    typeExchange = ABSTRACT TypeExchange(Invoice);
    typeExchange = DATA TypeExchange(UserInvoice);
    typeExchange(UserInvoice i) += typeExchange(i);
    nameTypeExchange 'Тип обмена' (Invoice i) = name(typeExchange(i));

    CONSTRAINT currency(typeExchange(UserInvoice invoice)) != homeCurrency(invoice)
        CHECKED BY typeExchange[UserInvoice] MESSAGE 'Тип обмена должен соответствовать валюте (конв.)';

    dateRateExchange 'Дата конвертации' = ABSTRACT DATE(Invoice);
    dateRateExchange 'Дата конвертации' = DATA DATE(UserInvoice);
    dateRateExchange(UserInvoice i) += dateRateExchange(i);

    dateRateExchange(UserInvoice i) <- date[Invoice](i) WHEN CHANGED (date[Invoice](i));

    rateExchange 'Курс' = ABSTRACT NUMERIC[14,6](Invoice) MATERIALIZED;
    rateExchange 'Курс' = DATA NUMERIC[14,6](UserInvoice);
    rateExchange(UserInvoice i) += rateExchange(i);

    WHEN LOCAL FORMS userInvoice CHANGED (dateRateExchange(UserInvoice i)) OR
                                   CHANGED (typeExchange(i)) OR
                                   CHANGED (currency(i)) DO {
         rateExchange(i) <- NUMERIC[14,6](rateOn(typeExchange(i), currency(i), dateRateExchange(i)));
    }

    rateExchange 'Курс' = ABSTRACT NUMERIC[14,6](InvoiceDetail) MATERIALIZED;

    dataRateExchange 'Курс' = DATA NUMERIC[14,6](UserInvoiceDetail);
    rateExchange 'Курс' (UserInvoiceDetail d) = OVERRIDE dataRateExchange(d),  rateExchange(userInvoice(d));
    rateExchange(UserInvoiceDetail d) += rateExchange(d);

    homePrice 'Цена (конв.)' = ABSTRACT NUMERIC[16,4](InvoiceDetail) MATERIALIZED;
    homePrice 'Цена (конв.)' = DATA NUMERIC[16,4](UserInvoiceDetail);
    homePrice(UserInvoiceDetail d) += homePrice(d);
    
    overCopy[UserInvoiceDetail,UserInvoiceDetail](UserInvoiceDetail d, UserInvoiceDetail detail) + {       
        dataRateExchange(d) <- dataRateExchange(detail);
    }  

    calcHomePrice = ABSTRACT CASE NUMERIC[16,4](InvoiceDetail);
    calcHomePrice(UserInvoiceDetail d) += WHEN rateExchange(d) THEN
            NUMERIC[16,4](round2(price(d) * rateExchange(d))); // пока округляем до копеек всегда
            
    WHEN LOCAL CHANGED(calcHomePrice(UserInvoiceDetail d)) AND NOT CHANGED(homePrice(d)) DO
        homePrice(d) <- calcHomePrice(d);

    homeSum 'Сумма (конв.)' (InvoiceDetail d) = round2(sum(d) * rateExchange(d));
    homeSum 'Сумма (конв.)' (UserInvoiceDetail d) = round2(sum(d) * rateExchange(d));

    homeSumInvoiceDetail 'Сумма (конв.)' (invoice) = GROUP SUM homeSum(InvoiceDetail d)
                                                                  BY invoice(d);
    homeSumUserInvoiceDetail 'Сумма (конв.)' (invoice) = GROUP SUM homeSum(UserInvoiceDetail d)
                                                                          BY userInvoice(d);
                                                                          
    homePriceRound(InvoiceDetail d) += WHEN isHomeCurrency(d) THEN defaultRound(homeCurrency(d));

    EXTEND FORM userInvoice
        PROPERTIES(i) BACKGROUND backgroundHomeCurrency(i) BEFORE nameAgreement(i)
                                                                    isHomeCurrency
        PROPERTIES(i) BACKGROUND backgroundHomeCurrency(i) SHOWIF isHomeCurrency(i)
                                                                    nameHomeCurrency, nameTypeExchange, dateRateExchange[Invoice], rateExchange[Invoice]
        PROPERTIES(d) BACKGROUND backgroundHomeCurrency(i) SHOWIF isHomeCurrency(i) AFTER sum(d)
                                                                    rateExchange, homePrice, homeSum[InvoiceDetail]
    ;

    DESIGN userInvoice {
        headerExtraParams {
            NEW headerHomeCurrency {
                caption = 'Конвертация';
                MOVE PROPERTY(isHomeCurrency(i));
                MOVE PROPERTY(nameHomeCurrency(i));
                MOVE PROPERTY(nameTypeExchange(i));
                MOVE PROPERTY(dateRateExchange(i));
                MOVE PROPERTY(rateExchange(i));
            }
        }
    }

    EXTEND FORM invoices
        PROPERTIES(d) READONLY BACKGROUND backgroundHomeCurrency(i) SHOWIF isHomeCurrency(i) AFTER sum(d)
                      rateExchange, homePrice, homeSum
    ;
END

META defineInvoicePayment(dumb)

    addPaymentInvoice 'Оплатить'(InContractLedger invoice)  { 
        currentInContractLedger() <- invoice;
        NEW p = Payment{
            operation(p) <- defaultPaymentOperation();        
            contract(p) <- contractSku[UserInvoice](invoice);
            date(p) <- currentDate();
            time(p) <- currentTime();
            payer(p) <- customer[UserInvoice](invoice);
            beneficiary(p) <- supplier[UserInvoice](invoice);
            sum(p) <- invoiceSumUserInvoiceDetail(invoice);
            cost(p, invoice) <- sumContract(p);
            LOCAL created = BOOLEAN ();
            created() <- NULL;
            DIALOG payment OBJECTS p = p DO {
                created() <- TRUE;
            }
            IF NOT created() THEN {
                DELETE p;
            }
        }
    }

    editInvoice 'Редактировать'(Payment payment, InContractLedger invoice)  { 
        currentInContractLedger() <- invoice;
        SHOW payment OBJECTS p=payment ;
    }

    EXTEND FORM userInvoice
        OBJECTS pm = Payment
        PROPERTIES(pm) READONLY seriesNumber, dateTime, namePayer, nameBeneficiary,
                                note, isPosted
        ORDERS dateTime(pm)
        PROPERTIES(pm, i) cost
        PROPERTIES DRAW pm TOOLBAR addPaymentInvoice(i), editInvoice(pm, i)
        PROPERTIES(pm) DELETE GRID

        FILTERGROUP filters
            FILTER 'Платежи по накладной' cost(pm, i) 'F10' DEFAULT
        FILTERS contract(pm) == contract[InContractLedger](i)
    ;

    DESIGN userInvoice{
        specificationBox{
            NEW paymentContainer{
                caption = 'Платежи';
                MOVE BOX(pm);
            }
        }
    }
END

META defineDocumentExtraFilters(object, objectClass, form, container)
    filter###object###CustomUser  = DATA LOCAL CustomUser ();
    nameFilter###object###CustomUser 'Создан пользователем' = nameContact(filter###object###CustomUser()) CHARWIDTH 15;          
    filterCustomUser###object(i) = createdNameUserUser###object(i) == filter###object###CustomUser() OR (i IS objectClass AND NOT filter###object###CustomUser());  

    filter###object###Computer = DATA LOCAL Computer ();
    nameFilter###object###Computer 'Создан на компьютере' = hostnameComputer(filter###object###Computer()) CHARWIDTH 15;          
    filterComputer###object(i) = createdComputerUser###object(i) == filter###object###Computer() OR (i IS objectClass AND NOT filter###object###Computer());           
        
    EXTEND FORM form 
    
        PROPERTIES() nameFilter###object###CustomUser, nameFilter###object###Computer
    ;
    
    DESIGN form {
        container { 
            MOVE PROPERTY(nameFilter###object###CustomUser());
            MOVE PROPERTY(nameFilter###object###Computer());                
        }         
    }    
END

META defineInvoiceNegativeQuantityConstraint(dumb)
    CONSTRAINT (SETCHANGED(quantity(InvoiceDetail d)) OR SETCHANGED(operation(d)) OR SET(isPosted(d))) AND isPosted(d) AND quantity(d) < 0.0
        AND banNegativeQuantityInvoice(operation(d))
        MESSAGE 'Запрещено вводить отрицательное количество в накладную';   
END