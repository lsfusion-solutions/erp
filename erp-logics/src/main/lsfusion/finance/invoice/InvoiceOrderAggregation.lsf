MODULE InvoiceOrderAggregation;

REQUIRE Order, Invoice, OrderContract, InvoiceContract;

NAMESPACE Invoice;

META defineInvoiceOrder(sign, NS)

    @defineDocumentInterfaceDataTimePrefix(order, invoice, ' накладной');
    invoiceDate(UserOrder i) <- date(i) WHEN CHANGED(date(i));
    invoiceTime(UserOrder i) <- time(i) WHEN CHANGED(time(i));
    
    invoiceNumber 'Номер' = ABSTRACT STRING[48] (Order) IN numbered CHARWIDTH 7;
    invoiceSeries 'Серия' = ABSTRACT BPSTRING[2] (Order) IN numbered CHARWIDTH 3 NOFLEX; 

    invoiceSeriesNumber 'Серия/Номер' (Order o) = 
        CONCAT '', invoiceSeries(o), invoiceNumber(o) 
        CHARWIDTH 7;
        
    invoiceNumber 'Номер' = DATA STRING[48] (UserOrder) IN numbered CHARWIDTH 7;
    invoiceSeries 'Серия' = DATA BPSTRING[2] (UserOrder) IN numbered CHARWIDTH 3 NOFLEX; 
    
    invoiceNumber(UserOrder o) <- number(o) WHEN SET (o IS UserOrder);
    invoiceSeries(UserOrder o) <- series(o) WHEN SET (o IS UserOrder);

    invoiceSeriesNumber 'Серия/Номер' (UserOrder o) = 
        CONCAT '', invoiceSeries(o), invoiceNumber(o) 
        CHARWIDTH 7;   
        
    invoiceNumber(UserOrder o) += invoiceNumber(o);  
    invoiceSeries(UserOrder o) += invoiceSeries(o);    

    @defineDocumentInterfaceDetailQuantityPrefix (order, invoice, ' (выписано)');
    invoiceQuantity(UserOrderDetail detail) <- quantity(detail) WHEN CHANGED(quantity(detail));
    @defineDocumentInterfaceProperty (order, createInvoice, 'Создать накладную');

    overCopy(UserOrder s, UserOrder d) + { 
        createInvoice(d) <- createInvoice(s);
    }  
        
    showInvoice (Order order) =  order IS Order AND NOT createInvoice(order);
    
    
    EXTEND FORM userOrder
    
        PROPERTIES(o) BACKGROUND backgroundInvoice(o) createInvoice
        PROPERTIES(o) BACKGROUND backgroundInvoice(o) SHOWIF createInvoice(o) invoiceDate, invoiceTime,
                      invoiceNumber, invoiceSeries

        PROPERTIES(d) READONLY invoiced AFTER quantity(d) SHOWIF showInvoice(o) BACKGROUND backgroundInvoice(o)
        PROPERTIES(d) invoiceQuantity AFTER quantity(d) SHOWIF createInvoice(o) BACKGROUND backgroundInvoice(o)
    ;
    DESIGN userOrder {
        headerCreateDocuments {
            NEW headerInvoice {
                horizontal = FALSE;
                caption = 'Накладная';
                NEW headerInvoice1 {
                    horizontal = TRUE;
                    MOVE PROPERTY(createInvoice(o));
                    MOVE PROPERTY(invoiceDate(o));
                    MOVE PROPERTY(invoiceTime(o));    
                    MOVE PROPERTY(invoiceNumber(o));
                    MOVE PROPERTY(invoiceSeries(o));                                        
                                    
                }             
            }
        }
    } 

    EXTEND FORM orders
        PROPERTIES(o) READONLYIF isReadonly() AFTER nameAgreement(o) BACKGROUND backgroundInvoice(o) isCommission

        PROPERTIES(d) READONLY AFTER quantity(d) BACKGROUND backgroundInvoice(o) 
                      invoiced SHOWIF showInvoice(o), invoiceQuantity SHOWIF createInvoice(o) 
    ;
    EXTEND FORM invoiceOrders
        PROPERTIES (d) READONLY BACKGROUND backgroundInvoice(o)  toInvoice
    ;

    CLASS OrderInvoice 'Накладная на основе заказа'###sign : Invoice;
    CLASS OrderInvoiceDetail 'Строка накладной на основе заказа'###sign : InvoiceDetail;

    @defineDocumentTables(orderInvoice);

    @defineDocumentAggregation(order, orderInvoice, createInvoice);

    invoice(OrderInvoiceDetail detail) += orderInvoice(detail);

    //@defineDocumentDetailIndex(orderInvoice);
    
    operation (OrderInvoice invoice) = operation(order(invoice));
    operation(OrderInvoice invoice) += operation(invoice);
    @defineDocumentAggregationHeaderTimePrefix (order, OrderInvoice, invoice);
    date(OrderInvoice invoice) += invoiceDate(invoice);
    time(OrderInvoice invoice) += invoiceTime(invoice);
    
    index(OrderInvoiceDetail detail) += index(detail);

    @defineDocumentAggregationStockPrefix(order, orderInvoice, supplier, 'Склад поставщика', , );
    supplierStock(OrderInvoice invoice) += supplierStock(invoice);
    @defineDocumentAggregationStockPrefix(order, orderInvoice, customer, 'Склад покупателя', , );
    customerStock(OrderInvoice invoice) += customerStock(invoice);

    @defineDocumentAggregationLegalEntityPrefix(order, orderInvoice, supplier, 'Поставщик', , );
    supplier(OrderInvoice invoice) += supplier(invoice);
    @defineDocumentAggregationLegalEntityPrefix(order, orderInvoice, customer, 'Покупатель', , );
    customer(OrderInvoice invoice) += customer(invoice);

    @defineDocumentAggregationPosted(order, orderInvoice);
    isPosted(OrderInvoice invoice) += isPosted(invoice);
    
    @defineDocumentAggregationClosed(order, orderInvoice);
    isClosed(OrderInvoice invoice) += isClosed(invoice);    

    number 'Номер документа' (OrderInvoice orderInvoice) = invoiceNumber(order(orderInvoice));
    number(OrderInvoice invoice) += number(invoice);

    series 'Серия документа' (OrderInvoice orderInvoice) = invoiceSeries(order(orderInvoice));
    series(OrderInvoice invoice) += series(invoice);

    seriesNumber 'Серия/номер документа' (OrderInvoice orderInvoice) = invoiceSeriesNumber(order(orderInvoice));

    noteInvoice 'Примечание' (OrderInvoice orderInvoice) = note(order(orderInvoice));
    note(OrderInvoice invoice) += noteInvoice(invoice);

    currency  (OrderInvoice orderInvoice) = currency(order(orderInvoice));
    currency (OrderInvoice invoice) += currency(invoice);

    priceListType(OrderInvoice invoice) += priceListType(order(invoice));
    agreement(OrderInvoice invoice) += agreement(order(invoice));
    contractSku(OrderInvoice invoice) += contractSku(order(invoice));
    paymentCondition[NS.Invoice](OrderInvoice invoice) += paymentCondition(order(invoice));
    isCommission (OrderInvoice invoice) += isCommission(order(invoice));

    description 'Название документа' (OrderInvoice o) =
        'Накладная на основе заказа (продажа)' + ' № ' + seriesNumber(o) + ' от ' + date(o) CHARWIDTH 30;
    description##NS 'Название документа' (OrderInvoiceDetail d) = description(orderInvoice(d)) CHARWIDTH 30;
    descriptionIndex 'Название документа' (OrderInvoiceDetail d) = description##NS(d) + ', позиция ' + index(d) CHARWIDTH 30 IN base;
    description (OrderInvoice invoice) += description(invoice);  

    @defineDocumentAggregationDetailSku(order, orderInvoice, sku);
    sku(OrderInvoiceDetail invoiceDetail) +=  sku(invoiceDetail);

    @defineDocumentAggregationDetailBatch(order, orderInvoice);
    batch (OrderInvoiceDetail invoiceDetail) += batch(invoiceDetail);
    
    currency (OrderInvoiceDetail detail) = currency(orderInvoice(detail)) MATERIALIZED;

    priceListType(OrderInvoiceDetail detail) += priceListType(orderDetail(detail));

    sumInvoice 'Сумма' = DATA NUMERIC[18,4] (UserOrderDetail);
    sumInvoice 'Сумма' = ABSTRACT NUMERIC[18,4] (OrderDetail);
    sumInvoice(UserOrderDetail d) += sumInvoice(d);
    
    sumInvoice (UserOrderDetail orderDetail) <- NUMERIC[18,4](round(invoiceQuantity[OrderDetail](orderDetail) * price[OrderDetail](orderDetail), currency[OrderDetail](orderDetail)))
                    WHEN DO CHANGED(invoiceQuantity[OrderDetail](orderDetail)) OR CHANGED (price[OrderDetail](orderDetail)) OR CHANGED(currency[OrderDetail](orderDetail));  
//-- 
    overInvoiceValueVAT 'НДС накладной, %' (orderDetail) = ABSTRACT NUMERIC[10,5] (OrderDetail);
    overInvoiceValueVAT 'НДС накладной, %' (orderDetail) = DATA NUMERIC[10,5] (UserOrderDetail);
    overInvoiceValueVAT(UserOrderDetail d) += overInvoiceValueVAT(d);  

    overInvoiceVATSumInvoice 'Сумма НДС'  = ABSTRACT NUMERIC[18,4] (OrderDetail);
//--

    VATSumInvoice 'Сумма НДС'  = DATA NUMERIC[18,4] (UserOrderDetail);
    VATSumInvoice 'Сумма НДС'  = ABSTRACT NUMERIC[18,4] (OrderDetail);
    VATSumInvoice(UserOrderDetail d) += VATSumInvoice(d);
    
    VATSumInvoice (UserOrderDetail orderDetail)  <- round((sumInvoice[OrderDetail](orderDetail) * calcValueVAT[OrderDetail] (orderDetail) / 100), currency[OrderDetail](orderDetail))
                    WHEN DO CHANGED(sumInvoice[OrderDetail](orderDetail)) OR CHANGED (calcValueVAT[OrderDetail] (orderDetail)) OR CHANGED (currency[OrderDetail] (orderDetail));
    
    invoiceSumInvoice 'Сумма с НДС'  = DATA NUMERIC[18,4] (UserOrderDetail);
    invoiceSumInvoice 'Сумма с НДС'  = ABSTRACT NUMERIC[18,4] (OrderDetail);
    invoiceSumInvoice(UserOrderDetail d) += invoiceSumInvoice(d);
    
    invoiceSumInvoice (UserOrderDetail orderDetail) <- sumInvoice[OrderDetail](orderDetail) (+) VATSumInvoice[OrderDetail](orderDetail)
        WHEN CHANGED(sumInvoice[OrderDetail](orderDetail)) OR CHANGED(VATSumInvoice[OrderDetail](orderDetail));

    quantity(OrderInvoiceDetail invoiceDetail) += invoiceQuantity(orderDetail(invoiceDetail));
    price(OrderInvoiceDetail invoiceDetail) += price(orderDetail(invoiceDetail));
    sum(OrderInvoiceDetail invoiceDetail) += sumInvoice(orderDetail(invoiceDetail));
    VAT(OrderInvoiceDetail invoiceDetail) += VAT(orderDetail(invoiceDetail));
    valueVAT(OrderInvoiceDetail invoiceDetail) += OVERRIDE overInvoiceValueVAT(orderDetail(invoiceDetail)), valueVAT(orderDetail(invoiceDetail));
    invoicePrice(OrderInvoiceDetail invoiceDetail) += invoicePrice(orderDetail(invoiceDetail));
    invoiceSum(OrderInvoiceDetail invoiceDetail) += invoiceSumInvoice(orderDetail(invoiceDetail));
    VATSum(OrderInvoiceDetail invoiceDetail) += OVERRIDE overInvoiceVATSumInvoice(orderDetail(invoiceDetail)), VATSumInvoice(orderDetail(invoiceDetail));

    orderDetail(OrderInvoiceDetail invoiceDetail) += orderDetail(invoiceDetail);

    edit(OrderInvoice invoice) + {  edit(order(invoice)); }
    close(OrderInvoice invoice) + {  close(order(invoice)); } 
    edit(OrderInvoiceDetail d) + {  edit(orderDetail(d)); }
END