MODULE BankEntity;

REQUIRE System, Integration, LegalEntity, Finance;
//
//CLASS BankEntity 'Bank';
//TABLE bankEntity (BankEntity);
//TABLE bankDate (BankEntity, DATE);
//
//GROUP bankEntity 'Bank Information' : base;
//
//@defineExternalizable(bankEntity, STRING[100]){
//    @defineExternalizable(bankEntity, STRING[100], ){
//    id '{integration.id}' = DATA STRING[100] (BankEntity) IN id INDEXED CHARWIDTH 10;
//    bankEntity (id) = GROUP AGGR BankEntity bankEntity BY id (bankEntity);
//};
//};
//
//name 'Name' = DATA ISTRING[200](BankEntity) CHARWIDTH 20;
//
//MFO 'BIC Code' = DATA STRING[11] (BankEntity) IN bankEntity;
//oldMFO 'MFO Code (outdated)' = DATA STRING[10] (BankEntity);
//department 'Bank Department' = DATA STRING[100] (BankEntity) IN bankEntity;
//CBU 'CBU' = DATA BPSTRING[3] (BankEntity) IN bankEntity;
//info 'Additional Information' = DATA STRING[100] (BankEntity) IN bankEntity;
//
//country = DATA Country (BankEntity);
//nameCountry 'Country' (BankEntity bank) = name(country(bank)) IN bankEntity CHARWIDTH 10;
//
//@defineHistorizable(address, , 'Bank Address', STRING[150], bank, nameBank, bank){
//    dataAddress 'Bank Address' = DATA STRING[150] (Bank, DATE) IN bank;
//
//    address 'Bank Address' (Bank bank, DATE date) = GROUP LAST dataAddress(bank, DATE dateIn)
//                                                                         ORDER dateIn
//                                                                         WHERE dataAddress(bank, dateIn) AND dateIn <= (date AS DATE) IN bank;
//
//    overAddress 'Bank Address' = OVERRIDE dataAddress(Bank bank, DATE date), address(bank, date) IN bank;
//
//    address 'Bank Address' (Bank bank) = address(bank, currentDate()) IN bank;
//
//    FORM addAddressBank 'Bank Address'
//        OBJECTS a=Bank PANEL, d=DATE PANEL
//        PROPERTIES name(a) READONLY, VALUE(d), dataAddress(a, d)
//    ;
//    DESIGN addAddressBank {
//        PROPERTY(name(a)) { focusable = FALSE; }
//    }
//
//    addAddress '{historizable.add}' (Bank bank)  { SHOW addAddressBank OBJECTS a = bank; }  TOOLBAR IMAGE 'add.png' CHANGEKEY 'INSERT';
//
//    FORM dialogAddressBank 'Bank Address'
//        OBJECTS a=Bank PANEL, d=DATE
//        PROPERTIES name(a) READONLY, addAddress(a) DRAW d , VALUE(d) READONLY, dataAddress(a, d)
//        FILTERS dataAddress(a, d)
//    ;
//    DESIGN dialogAddressBank {
//        PROPERTY(name(a)) { focusable = FALSE; }
//    }
//
//    dialogAddress 'Bank Address' (Bank bank)  { SHOW dialogAddressBank OBJECTS a = bank; }  ASON CONTEXTMENU address[Bank] ASON CHANGE address[Bank];
//};
//
//code 'Bank Code' (BankEntity b) = right(MFO(b), 3);
//
//FORM bankEntity 'Bank'
//    OBJECTS b=BankEntity PANEL
//    PROPERTIES(b) name, id SHOWIF showIDs(), address, MFO, department, CBU, nameCountry, info
//    EDIT BankEntity OBJECT b
//;
//
//DESIGN bankEntity {
//    NEW topContainer {
//        lines = 3;
//        caption = 'Bank Information';
//        MOVE PROPERTY(name(b));
//        MOVE PROPERTY(id(b));
//        MOVE PROPERTY(address(b));
//        MOVE PROPERTY(MFO(b));
//        MOVE PROPERTY(department(b));
//        MOVE PROPERTY(CBU(b));
//        MOVE PROPERTY(nameCountry(b));
//        MOVE PROPERTY(info(b));
//    }
//    MOVE TOOLBARBOX;
//}
//
//FORM dialogBankEntities 'Banks'
//    OBJECTS b=BankEntity
//    PROPERTIES(b) READONLY name, id SHOWIF showIDs(), address, MFO, department, CBU, nameCountry, info
//    PROPERTIES(b) NEWSESSION NEW, EDIT
//    LIST BankEntity OBJECT b
//;
//
//FORM bankEntities 'Banks'
//    OBJECTS b=BankEntity
//    PROPERTIES(b) READONLY name, id SHOWIF showIDs(), address, MFO, oldMFO, department, CBU, nameCountry, info
//    PROPERTIES(b) NEWSESSION NEW, EDIT, deleteb=DELETE
//;
//
//NAVIGATOR {
//    financeMasterData {
//        NEW bankEntities;
//    }
//}
//
//// ----------------------------------- Bank Account ------------------------------------------ //
//
//CLASS BankAccount 'Bank Account';
//TABLE bankAccount (BankAccount);
//
//GROUP bankAccount 'Bank Information' : base;
//
//// Inactive
//inactive 'Inactive' = DATA BOOLEAN (BankAccount);
//active 'Active' (BankAccount a) = a IS BankAccount AND NOT inactive(a);
//
//number 'Account Number' = DATA STRING[50] (BankAccount) IN bankAccount CHARWIDTH 28 NOFLEX;
//numberNew 'IBAN Account Number' = DATA STRING[50] (BankAccount) IN bankAccount CHARWIDTH 28 NOFLEX;
//
//account (number) = GROUP MAX BankAccount account BY number(account); // WHERE account IS Account;
//
//// Bank
//bank = DATA BankEntity (BankAccount);
//nameBank 'Bank Name' (BankAccount account) = name(bank(account)) IN bankAccount;
//addressBank 'Bank Address' (BankAccount account) = address(bank(account)) IN bankAccount;
//MFOBank 'Bank BIC Code' (BankAccount account) = MFO(bank(account)) IN bankAccount;
//departmentBank 'Bank Department' (BankAccount account) = department(bank(account)) IN bankAccount;
//CBUBank 'Bank CBU' (BankAccount account) = CBU(bank(account)) IN bankAccount;
//
//// Organization
//legalEntity = DATA LegalEntity (BankAccount) NONULL DELETE AUTOSET;
//nameLegalEntity 'Organization' (BankAccount account) = name(legalEntity(account));
//
//defaultAccount(legalEntity) = GROUP MAX BankAccount account IF active(account) BY legalEntity(account);
//
//userAccount = DATA BankAccount (LegalEntity);
//CONSTRAINT legalEntity(userAccount(LegalEntity legalEntity)) != legalEntity CHECKED MESSAGE 'error: The default account must match the legal entity’s account.';
//
//account (LegalEntity legalEntity) = OVERRIDE userAccount(legalEntity), defaultAccount(legalEntity) MATERIALIZED INDEXED;
//numberAccount 'Primary Account Number' (LegalEntity legalEntity) = number(account(legalEntity)) IN law;
//numberNewAccount 'IBAN Account Number' (LegalEntity legalEntity) = numberNew(account(legalEntity)) IN law;
//nameBank 'Buyer’s Bank' (LegalEntity legalEntity) = nameBank(account(legalEntity));
//addressBank 'Buyer’s Bank Address' (LegalEntity legalEntity) = addressBank(account(legalEntity));
//departmentBank 'Buyer’s Bank Department' (LegalEntity legalEntity) = departmentBank(account(legalEntity));
//CBUBank 'Buyer’s Bank CBU' (LegalEntity legalEntity) = CBUBank(account(legalEntity));
//MFOBank 'Buyer’s Bank BIC Code' (LegalEntity legalEntity) = MFOBank(account(legalEntity));
//
//equals 'Primary' (LegalEntity legalEntity, BankAccount account) = userAccount(legalEntity) == account;
//
//accountID 'Account by Number' (number, legalEntityId) = GROUP AGGR BankAccount account WHERE account IS BankAccount BY number(account), id(legalEntity(account));
//accountIDLegalEntity 'Account by Number' (STRING[50] n, LegalEntity l) = GROUP MAX BankAccount account IF number(account) == n AND legalEntity(account) == l;
//legalEntityAccount (STRING[20] number) = legalEntity(account(number));
//
//// Currency
//currency = DATA Currency (BankAccount) NONULL;
//currency(BankAccount account) <- currency(legalEntity(account))
//    WHEN SET(legalEntity(account));
//nameCurrency 'Account Currency' = name(currency(BankAccount account)) IN bankAccount;
//
//note 'Note' = DATA STRING[50] (BankAccount) IN bankAccount;
//defaultAccount = GROUP MAX BankAccount account IF active(account) BY legalEntity(account), currency(account);
//
//FORM bankAccount 'Bank Account'
//    OBJECTS a = BankAccount PANEL
//    PROPERTIES(a) number, numberNew, nameCurrency, nameLegalEntity, nameBank, addressBank,
//        MFOBank, departmentBank, CBUBank, note, inactive
//
//    EDIT BankAccount OBJECT a
//;
//
//DESIGN bankAccount {
//    BOX {
//        MOVE PROPERTY(number(a));
//        MOVE PROPERTY(numberNew(a));
//        MOVE PROPERTY(nameCurrency(a));
//        MOVE PROPERTY(nameLegalEntity(a));
//        MOVE PROPERTY(nameBank(a));
//        MOVE PROPERTY(addressBank(a));
//        MOVE PROPERTY(MFOBank(a));
//        MOVE PROPERTY(departmentBank(a));
//        MOVE PROPERTY(CBUBank(a));
//        MOVE PROPERTY(note(a));
//        MOVE PROPERTY(inactive(a));
//
//        MOVE TOOLBARBOX;
//    }
//}
//
//FORM bankAccounts 'Accounts'
//    OBJECTS a = BankAccount
//    PROPERTIES(a) READONLY number, numberNew, nameCurrency, nameLegalEntity, nameBank, addressBank,
//        MFOBank, departmentBank, CBUBank, note
//    PROPERTIES(a) NEWSESSION NEW, EDIT, DELETE
//    FILTERGROUP inactive FILTER 'Active' active(a) 'ctrl F10' DEFAULT
//    LIST BankAccount OBJECT a
//;
//
//// ------------------------ Extend Organization Form ------------------------ //
//
//EXTEND FORM legalEntity
//    PROPERTIES(l) SHOWIF toShow(l) numberAccount
//
//    OBJECTS a=BankAccount
//    PROPERTIES(a) inactive, number, numberNew, nameCurrency, nameBank, addressBank, departmentBank,
//        CBUBank, MFOBank, note, NEW, DELETE GRID
//    FILTERS legalEntity(a) == l
//    PROPERTIES equals(l, a)
//    FILTERGROUP inactive FILTER 'Active' active(a) 'ctrl F10' DEFAULT
//;
//
//DESIGN legalEntity {
//    extendContainer {
//        MOVE BOX(a) {
//            caption = 'Bank Accounts';
//        }
//    }
//}
//
//// ------------------------ Macros ------------------------ //
//
//META defineDocumentAccount(object, contact, caption)
//    numberAccount###contact 'Bank Account'###caption (###object object) = numberAccount(contact(object)) IN documentPrm;
//    numberNewAccount###contact 'IBAN Account'###caption (###object object) = numberNewAccount(contact(object)) IN documentPrm;
//    nameBank###contact 'Bank'###caption (###object object) = nameBank(account(contact(object))) IN documentPrm;
//    addressBank###contact 'Bank Address'###caption (###object object) = addressBank(account(contact(object))) IN documentPrm;
//    departmentBank###contact 'Bank Department'###caption (###object object) = departmentBank(account(contact(object))) IN documentPrm;
//    CBUBank###contact 'Bank CBU'###caption (###object object) = CBUBank(account(contact(object))) IN documentPrm;
//    MFOBank###contact 'Bank BIC Code'###caption (###object object) = MFOBank(account(contact(object))) IN documentPrm;
//END
//
//copyAccountNumbers 'Copy IBAN Account Numbers' () {
//    FOR number(BankAccount a) AND numberNew(a) DO {
//        number(a) <- numberNew(a);
//    }
//    APPLY;
//}
//
//importBIC 'Import BIC Codes' () {  //run only once, or without copying old ones
//
//    // save MFO codes   
//    FOR MFO(BankEntity b) DO {
//        oldMFO(b) <- MFO(b);
//    }
//
//    LOCAL codeBIC = STRING[10] (INTEGER);
//    LOCAL codeMFO = STRING[10] (INTEGER);
//
//    INPUT f = EXCELFILE DO {
//        IMPORT XLS NOHEADER FROM f AS EXCELFILE TO codeBIC = A, codeMFO = C;
//
//        FOR oldMFO(BankEntity b) DO {
//            FOR imported(INTEGER i) AND codeMFO(i) == oldMFO(b) AND MFO(b) == oldMFO(b) DO {
//                MFO(b) <- codeBIC(i);
//            }
//        }
//        APPLY;
//    }
//}
//
//importIBAN 'Import IBAN Account Numbers' () {
//    NEWSESSION {
//        // save old account numbers   
//        FOR number(BankAccount a) DO {
//            numberNew(a) <- number(a) WHERE length(number(a)) < 15;
//        }
//
//        LOCAL unp = STRING[50] (INTEGER);
//        LOCAL name = STRING[100] (INTEGER);
//        LOCAL numberOld = STRING[50] (INTEGER);
//        LOCAL numberNew = STRING[50] (INTEGER);
//
//        INPUT f = EXCELFILE DO {
//            IMPORT XLS NOHEADER FROM f AS EXCELFILE TO unp, name, numberOld, numberNew;
//
//            FOR numberNew(BankAccount a) DO {
//                FOR imported(INTEGER i) AND numberOld(i) == numberNew(a) DO {
//                    number(a) <- numberNew(i);
//                }
//            }
//            APPLY;
//        }
//
//        // if the account was not in the file
//        FOR number(BankAccount a) DO {
//            numberNew(a) <- '' WHERE numberNew(a) == number(a);
//        }
//        APPLY;
//    }
//}