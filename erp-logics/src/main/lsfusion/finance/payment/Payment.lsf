MODULE Payment;

REQUIRE Bank, Document, LegalEntity, Numerator, PaymentLedger, PaymentOperation;

PRIORITY PaymentOperation;

// ---- Добавляем отдельную вкладку на форму Настройки
DESIGN options {
    pane {
        NEW payment {
            caption = 'Платежи';
        }
    }
}

// ------------- Объявляем платежи ----------------- //
CLASS Payment 'Платеж' : PaymentLedger;
TABLE payment(Payment);
TABLE sessionPayment(Session, Payment); 

@defineCreated(Payment);

@defineDocumentHeaderPosted(Payment);

@defineNumbered(Payment, BPSTRING[2]);
@defineNumeratedDefault(Payment, 'Платежи', 'ПЛ');
@defineExternalizable(payment, STRING[100]);

date 'Дата' (payment) = DATA DATE (Payment) INDEXED;
date(Payment payment) <- currentDate() WHEN SET(payment IS Payment);
time 'Время' (payment) = DATA TIME (Payment);
time(Payment payment) <- currentTime() WHEN SET(payment IS Payment);
dateTime 'Дата/время' (Payment payment) = dateTimeToDateTime(date(payment), time(payment));

order 'Порядок' (payment) = DATA INTEGER(Payment);

isReturn 'Возвратный' = DATA BOOLEAN (Payment);

payer(payment) = DATA LegalEntity (Payment) INDEXED;
namePayer 'Плательщик' (Payment payment) = name(payer(payment)) IN id;
accountFrom(payment) = DATA PaymentLedger.Account (Payment);
accountFrom(Payment payment) <- account(payer(payment))
    WHEN CHANGED(payer(payment));
nameAccountFrom 'Счет' (Payment payment) = name(accountFrom(payment));
currencyAccountFrom (Payment payment) = currency(accountFrom(payment));
nameCurrencyAccountFrom 'Валюта счета' (Payment payment) = nameCurrency(accountFrom(payment));
sum 'Сумма' (payment) = DATA NUMERIC[18,4] (Payment) CHARWIDTH 16;

CONSTRAINT payer(Payment payment) != legalEntity(accountFrom(payment))
    CHECKED BY accountFrom[Payment] MESSAGE 'Организация счета должна совпадать с плательщиком';

beneficiary(payment) = DATA LegalEntity (Payment) INDEXED;
nameBeneficiary 'Бенефициар' (Payment payment) = name(beneficiary(payment)) IN id;
accountTo(payment) = DATA PaymentLedger.Account (Payment);
accountTo(Payment payment) <- account(beneficiary(payment))
    WHEN CHANGED(beneficiary(payment));
nameAccountTo 'Счет' (Payment payment) = name(accountTo(payment));
currencyAccountTo(Payment payment) = currency(accountTo(payment));
nameCurrencyAccountTo 'Валюта счета' (Payment payment) = nameCurrency(accountTo(payment));

CONSTRAINT beneficiary(Payment payment) != legalEntity(accountTo(payment))
    CHECKED BY accountTo[Payment] MESSAGE 'Организация счета должна совпадать с бенефициаром';
    
text 'Назначение платежа' = DATA TEXT (Payment);

note 'Примечание' (payment) = DATA STRING[200] (Payment);

description 'Название документа' = STRING[200]('Платеж ' + seriesNumber(Payment payment) + ' от ' +  date(payment) + ' ' + nameBeneficiary(payment) + ' <-' + namePayer(payment)) MATERIALIZED;

dateTime(Payment paymentLedger) += dateTime(paymentLedger);
legalEntityFrom(Payment paymentLedger) += payer(paymentLedger);
legalEntityTo(Payment paymentLedger) += beneficiary(paymentLedger);
accountFrom(Payment payment) += accountFrom(payment);
sum(Payment paymentLedger) += sum(paymentLedger);
accountTo(Payment payment) += accountTo(payment);
description(Payment paymentLedger) += description(paymentLedger);
isPosted(Payment paymentLedger) += isPosted(paymentLedger);

CONSTRAINT legalEntity(accountFrom(Payment payment)) != payer(payment)
    CHECKED BY accountFrom[Payment] MESSAGE 'Организация счета(с) должна совпадать с организацией(покупатель)';

CONSTRAINT legalEntity(accountTo(Payment payment)) != beneficiary(payment)
    CHECKED BY accountTo[Payment] MESSAGE 'Организация счета(на) должна совпадать с организацией(поставщик)';

CONSTRAINT currencyAccountFrom(Payment payment) != currencyAccountTo(payment)
    CHECKED BY accountFrom[Payment], accountTo[Payment] MESSAGE 'Валюта счета(с) должна совпадать с валютой счета(на)';
    
//объединение организаций
replace(LegalEntity l, LegalEntity o) + { 
    payer(Payment payment) <- o WHERE payer(payment) == l;
    beneficiary(Payment payment) <- o WHERE beneficiary(payment) == l;
}     

//Операции
operation = DATA PaymentOperation.Operation (Payment);
nameOperation 'Операция' = name(operation(Payment Payment));
idOperation 'ID операции' = id(operation(Payment Payment));

INDEX operation(Payment p), date(p);

defaultPaymentOperation = DATA PaymentOperation.Operation ();
nameDefaultPaymentOperation 'Операция по умолчанию(платежи)' = name(defaultPaymentOperation());

EXTEND FORM options
    PROPERTIES nameDefaultPaymentOperation()
; 
    
DESIGN options {
    payment {
        MOVE PROPERTY(nameDefaultPaymentOperation());
    }
}

@defineDocumentOperationLegalEntity(payment, payer, 'Плательщик');
@defineDocumentOperationLegalEntity(payment, beneficiary, 'Бенефициар');

@defineDocumentOperationRole(payment);

@defineOperationProperty(isReturn, 'Возвратный', paramsContainer);
@deriveDocumentOperationProperty(Payment, isReturn);

//-------------------------------------------- Форма платежей -------------------------------------------------------//

background 'Цвет' (Payment payment, DATE date) = RGB(255,160,160) IF date(payment) > date;

operation = DATA LOCAL Operation();
nameOperation 'Операция' = name(operation());

partyA = DATA LOCAL LegalEntity();
namePartyA 'Организация (поставщик)' = name(partyA());
partyB = DATA LOCAL LegalEntity();
namePartyB 'Организация (покупатель)' = name(partyB());

FORM payment 'Платеж'

    OBJECTS p = Payment PANEL
    PROPERTIES(p) isPosted, nameNumerator, order, number, series, date, time, text,
                  note, namePayer, nameBeneficiary, nameAccountTo, nameAccountFrom, sum,
                  nameCurrencyAccountTo, nameCurrencyAccountFrom, nameOperation, isReturn 
    EVENTS
        ON OK prePost(p)

    EDIT Payment OBJECT p
;

DESIGN payment {

    BOX {
        horizontal = FALSE;
        NEW headerContainer{
            caption = 'Шапка документа';
            NEW first {
                horizontal = TRUE;
                MOVE PROPERTY(isPosted(p));
                MOVE PROPERTY(nameOperation(p));
                MOVE PROPERTY(isReturn(p));
            }
            NEW second { 
                horizontal = TRUE;
                MOVE PROPERTY(nameNumerator(p));
                MOVE PROPERTY(order(p));
                MOVE PROPERTY(number(p));
                MOVE PROPERTY(series(p));
                MOVE PROPERTY(date(p));
                MOVE PROPERTY(time(p));
            }                                                                        
        }
        NEW columnContainer{
            horizontal = TRUE;
            NEW firstColumn{
                lines = 1;
                fill = 1;
                caption = 'Сторона (с)';
                MOVE PROPERTY(namePayer(p));
                MOVE PROPERTY(nameAccountFrom(p));
                MOVE PROPERTY(nameCurrencyAccountFrom(p));
            }
            NEW secondColumn{
                lines = 1;
                fill = 1;
                caption = 'Сторона (на)';
                MOVE PROPERTY(nameBeneficiary(p));
                MOVE PROPERTY(nameAccountTo(p));
                MOVE PROPERTY(nameCurrencyAccountTo(p));
            }
        }
        NEW paramContainer {
            horizontal = TRUE;                             
            caption = 'Параметры документа';             
            MOVE PROPERTY(sum(p));
            MOVE PROPERTY(note(p));
        }
        MOVE PROPERTY(text(p)){
            panelCaptionVertical = TRUE;
            alignment = STRETCH;
        }
    }

    PROPERTY(formOk()) {
        caption = 'Провести';
    }

    MOVE TOOLBARBOX;
}

//------------------------------ Автоматическое проставление свойств -----------------------------//
@deriveDocumentOperationLegalEntity(payment, payer, payment);
@deriveDocumentOperationLegalEntity(payment, beneficiary, payment);

//----------------------------------------- Копирование платежей ----------------------------------------------------//

overCopy  ABSTRACT LIST ( Payment, Payment); 

copyData(Payment payment, Payment p)  { 
    operation(p) <- operation(payment);
    isReturn(p) <- isReturn(payment);
    order(p) <- order(payment);
    date(p) <- date(payment);
    time(p) <- time(payment);
    payer(p) <- payer(payment);
    beneficiary(p) <- beneficiary(payment);
    sum(p) <- sum(payment);
    
    overCopy(payment, p);
}
    
copy 'Копировать'(Payment payment)  { 
	NEWSESSION {
	    NEW p = Payment {
	        EXEC copyData(payment, p);
	        SHOW payment OBJECTS p = p DOCKED;
	    }
	}
} TOOLBAR;

filterPaymentDateFrom 'Дата с' = DATA LOCAL NESTED DATE ();
filterDateFrom (Payment p) = date(p) >= filterPaymentDateFrom() OR (p IS Payment AND NOT filterPaymentDateFrom());      

filterPaymentDateTo 'Дата по' = DATA LOCAL NESTED DATE ();
filterDateTo (Payment p) = date(p) <= filterPaymentDateTo() OR (p IS Payment AND NOT filterPaymentDateTo());         
    
    
@defineDocumentHeaderClosed(Payment);

@defineDocumentClosedConstraint(Payment);
    
overShowEdit = ABSTRACT BOOLEAN (Payment);
overShowDelete = ABSTRACT BOOLEAN (Payment);
skipShowEdit = ABSTRACT BOOLEAN (Payment);
skipShowDelete = ABSTRACT BOOLEAN (Payment);


skipOpen = ABSTRACT BOOLEAN (Payment);
showClose (Payment p) = isOpened(p) AND NOT skipClose(p);   
showOpen (Payment p) = isClosed(p) AND NOT skipOpen(p);   

//-------------------------------------------Удаление платежей---------------------------------------//
in 'Отм.' = DATA LOCAL BOOLEAN (Payment);
countIn = GROUP SUM 1 IF in(Payment payment);

delete 'Удалить' (Payment payment)  { 
    NEWSESSION NESTED LOCAL {
        IF countIn() THEN {
            DELETE Payment p WHERE in(p) AND overShowDelete(p);
        }
        ELSE {
            DELETE Payment p WHERE p == payment;
        }
        apply();
    }
} CONFIRM IMAGE 'delete.png';    
    
FORM payments 'Платежи'

    PROPERTIES() filterPaymentDateFrom, filterPaymentDateTo, nameOperation, namePartyA, namePartyB

    OBJECTS p = Payment LAST
    PROPERTIES(p) in
    PROPERTIES(p) READONLYIF isReadonly() isClosed, isPosted, isReturn, order, number, series,
                  date, time, namePayer, nameAccountFrom, nameBeneficiary, nameAccountTo,
                  nameCurrencyAccountTo, sum, note, nameOperation 

    PROPERTIES(p) READONLY PANEL createdNameUser, createdTime, createdHostnameComputer, 
                                                postedNameUser, postedTime, postedHostnameComputer 
    PROPERTIES(p) NEWSESSION NEW, editP = EDIT SHOWIF overShowEdit(p)
    PROPERTIES (p) close SHOWIF showClose(p), open SHOWIF showOpen(p)
    PROPERTIES (p) delete SHOWIF overShowDelete(p) TOOLBAR AFTER editP
    PROPERTIES (p) copy

    ORDERS date(p), order(p)

    FILTERS operation(p) == operation() OR NOT operation(),
            payer(p) == partyB() OR NOT partyB(),
            beneficiary(p) == partyA() OR NOT partyA(),
            filterDateFrom(p), filterDateTo(p)

;
        
DESIGN payments {

    NEW headerContainer {
        horizontal = TRUE;
        caption = 'Шапка';
        MOVE PROPERTY(filterPaymentDateFrom());
        MOVE PROPERTY(filterPaymentDateTo());
        MOVE PROPERTY(namePartyA());
        MOVE PROPERTY(namePartyB());
        MOVE PROPERTY(nameOperation());
    }
    MOVE BOX(p);
    NEW documentHistory {
        caption = 'История';
        MOVE GROUP(created,p);
        MOVE GROUP(posted,p);
    }
    MOVE TOOLBARBOX;
}

@extendFormEditable(payments);
@extendFormFilterRoleAccess(payment, p, payments);
EXTEND FORM payments
    FILTERGROUP paymentfilters6 FILTER 'Открыт' isOpened(p) 'F6' DEFAULT
;

NAVIGATOR {
    paymentNavigator {
        NEW payments;
    }
}

//-- Запрет на изменение документа другим пользователем
@defineOperationChangesDocument(payment, Payment, preventChangesDocument, created);

overShowEdit (Payment p) += showEditDeleteUser(p) AND isOpened(p) AND NOT skipShowEdit(p);
overShowDelete (Payment p) += showEditDeleteUser(p) AND isOpened(p)AND NOT skipShowDelete(p); 
skipClose (Payment p) += WHEN preventCloseDocument(currentUser(), operation(p)) THEN TRUE;

CONSTRAINT (SET(isPosted(Payment p)) OR CHANGED(operation(p))) AND isPosted(p) AND accountPayer(operation(p)) AND NOT (accountFrom(p)) 
    MESSAGE 'Должен быть задан расчетный счет плательщика';
CONSTRAINT (SET(isPosted(Payment p)) OR CHANGED(operation(p))) AND isPosted(p) AND accountBeneficiary(operation(p))  AND NOT (accountTo(p)) 
    MESSAGE 'Должен быть задан расчетный счет бенифициара';
    
show 'Просмотреть' (Payment p)  { 
	NEWSESSION {
	    SHOW payment OBJECTS p = p DOCKED READONLY;
	}
}TOOLBAR;

showToShow (Payment p) = p IS Payment AND NOT overShowEdit(p);

EXTEND FORM payments
    PROPERTIES show(p) SHOWIF showToShow(p) BEFORE editP
;