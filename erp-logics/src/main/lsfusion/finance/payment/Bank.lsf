MODULE Bank;

REQUIRE System, Integration, LegalEntity, Finance;

CLASS Bank 'Банк';
TABLE bank (Bank);
TABLE bankDate (Bank, DATE);

GROUP bank 'Информация о банке' : base;

@defineExternalizable(bank, STRING[100]);

name 'Наименование' = DATA ISTRING[200](Bank) CHARWIDTH 20;

MFO 'Код BIC' = DATA STRING[11] (Bank) IN bank;
oldMFO 'Код МФО (устарел)' = DATA STRING[10] (Bank);
department 'Отдел банка' = DATA STRING[100] (Bank) IN bank;
CBU 'ЦБУ' = DATA BPSTRING[3] (Bank) IN bank;
info 'Дополнительные сведения' = DATA STRING[100] (Bank) IN bank;

country = DATA Country (Bank);
nameCountry 'Страна' (Bank bank) = name(country(bank)) IN bank CHARWIDTH 10;

@defineHistorizable(address, , 'Адрес банка', STRING[150], bank, nameBank, bank);

code 'Код банка' (Bank b) = right(MFO(b),3);

FORM bank 'Банк'
    OBJECTS b=Bank PANEL
    PROPERTIES(b) name, id SHOWIF showIDs(), address, MFO, department, CBU, nameCountry, info
    EDIT Bank OBJECT b
;

DESIGN bank {
    NEW topContainer{
        lines = 3;
        caption = 'Информация о банке';
        MOVE PROPERTY(name(b));
        MOVE PROPERTY(id(b));
        MOVE PROPERTY(address(b));
        MOVE PROPERTY(MFO(b));
        MOVE PROPERTY(department(b));
        MOVE PROPERTY(CBU(b));
        MOVE PROPERTY(nameCountry(b));
        MOVE PROPERTY(info(b));
    }
    MOVE TOOLBARBOX;
}

FORM dialogBanks 'Банки'
    OBJECTS b=Bank
    PROPERTIES(b) READONLY name, id SHOWIF showIDs(), address, MFO, department, CBU, nameCountry, info
    PROPERTIES(b) NEWSESSION NEW, EDIT
    LIST Bank OBJECT b
;

FORM banks 'Банки'
    OBJECTS b=Bank
    PROPERTIES(b) READONLY name, id SHOWIF showIDs(), address, MFO, oldMFO, department, CBU, nameCountry, info
    PROPERTIES(b) NEWSESSION NEW, EDIT, deleteb=DELETE 
;

NAVIGATOR {
    financeMasterData {
        NEW banks;
    }
}

// ----------------------------------- Расчетный счет ------------------------------------------ //

CLASS Account 'Расчетный счет';
TABLE account (Account);

GROUP account 'Банковская информация' : base;

// Неактивный
inactive 'Неактивная' = DATA BOOLEAN (Account);
active 'Активная' (Account a) = a IS Account AND NOT inactive(a);

number 'Номер расчетного счета'  = DATA STRING[50] (Account) IN account CHARWIDTH 28 NOFLEX;
numberNew 'Номер расчетного счета IBAN'  = DATA STRING[50] (Account) IN account CHARWIDTH 28 NOFLEX;

account (number) = GROUP MAX Account account BY number(account); // WHERE account IS Account;

// Банк
bank = DATA Bank (Account);
nameBank 'Наименование банка' (Account account) = name(bank(account)) IN account;
addressBank 'Адрес банка' (Account account) = address(bank(account)) IN account;
MFOBank 'Код BIC банка' (Account account) = MFO(bank(account)) IN account;
departmentBank 'Отдел банка' (Account account) = department(bank(account)) IN account;
CBUBank 'ЦБУ банка' (Account account) = CBU(bank(account)) IN account;

// Организация
legalEntity = DATA LegalEntity (Account) NONULL DELETE AUTOSET;
nameLegalEntity 'Организация' (Account account) = name(legalEntity(account));

defaultAccount(legalEntity) = GROUP MAX Account account IF active(account) BY legalEntity(account);

userAccount = DATA Account (LegalEntity);
CONSTRAINT legalEntity(userAccount(LegalEntity legalEntity)) != legalEntity CHECKED MESSAGE 'ошибка: Р/сч. по умолчанию должен соответствовать р/сч. Ю.Л.';

account (LegalEntity legalEntity) =  OVERRIDE userAccount(legalEntity), defaultAccount(legalEntity) MATERIALIZED INDEXED;
numberAccount 'Основной р/сч.' (LegalEntity legalEntity) = number(account(legalEntity)) IN law;
numberNewAccount 'Номер расчетного счета IBAN' (LegalEntity legalEntity) = numberNew(account(legalEntity)) IN law;
nameBank 'Банк покупателя' (LegalEntity legalEntity) = nameBank(account(legalEntity));
addressBank 'Адрес банка покупателя' (LegalEntity legalEntity) = addressBank(account(legalEntity));
departmentBank 'Отдел банка покупателя' (LegalEntity legalEntity) = departmentBank(account(legalEntity));
CBUBank 'ЦБУ банка покупателя' (LegalEntity legalEntity) = CBUBank(account(legalEntity));
MFOBank 'Код BIC банка покупателя' (LegalEntity legalEntity) = MFOBank(account(legalEntity));
    
equals 'Основной' (LegalEntity legalEntity, Account account) = userAccount(legalEntity) == account;

accountID 'Расчетный счет по номеру' (number, legalEntityId) = GROUP AGGR Account account WHERE account IS Account BY number(account), id(legalEntity(account));
accountIDLegalEntity 'Расчетный счет по номеру' (STRING[50] n, LegalEntity l) = GROUP MAX Account account IF number(account) == n AND legalEntity(account) == l;
legalEntityAccount (STRING[20] number) = legalEntity(account(number)); 

// Валюта
currency = DATA Currency (Account) NONULL;
currency(Account account) <- currency(legalEntity(account))
    WHEN SET(legalEntity(account));
nameCurrency 'Валюта счета' = name(currency(Account account)) IN account;

note 'Примечание'  = DATA STRING[50] (Account) IN account;
defaultAccount = GROUP MAX Account account IF active(account) BY legalEntity(account), currency(account);

FORM account 'Расчетный счет'
    OBJECTS a = Account PANEL
    PROPERTIES(a) number, numberNew, nameCurrency, nameLegalEntity, nameBank, addressBank,
                  MFOBank, departmentBank, CBUBank, note, inactive

    EDIT Account OBJECT a
;

DESIGN account {
    BOX {
        MOVE PROPERTY(number(a));
        MOVE PROPERTY(numberNew(a));
        MOVE PROPERTY(nameCurrency(a));
        MOVE PROPERTY(nameLegalEntity(a));
        MOVE PROPERTY(nameBank(a));
        MOVE PROPERTY(addressBank(a));
        MOVE PROPERTY(MFOBank(a));
        MOVE PROPERTY(departmentBank(a));
        MOVE PROPERTY(CBUBank(a));
        MOVE PROPERTY(note(a));
        MOVE PROPERTY(inactive(a));

        MOVE TOOLBARBOX;
    }
}

FORM accounts 'Счета'
    OBJECTS a = Account
    PROPERTIES(a) READONLY number, numberNew, nameCurrency, nameLegalEntity, nameBank, addressBank,
                           MFOBank, departmentBank, CBUBank, note
    PROPERTIES(a) NEWSESSION NEW, EDIT, DELETE 
    FILTERGROUP inactive FILTER 'Активный' active(a) 'ctrl F10' DEFAULT  
    LIST Account OBJECT a
;

// ------------------------ Расширяем форму организаций ------------------------ //

EXTEND FORM legalEntity
    PROPERTIES(l)  SHOWIF toShow(l) numberAccount

    OBJECTS a=Account
    PROPERTIES(a)  inactive, number, numberNew, nameCurrency, nameBank, addressBank, departmentBank,
                   CBUBank, MFOBank, note, NEW, DELETE GRID
    FILTERS legalEntity(a) == l
    PROPERTIES equals(l, a)
    FILTERGROUP inactive FILTER 'Активный' active(a) 'ctrl F10' DEFAULT 
;

DESIGN legalEntity {
    extendContainer {
        MOVE BOX(a) {
            caption = 'Расчетные счета';
        }
    }
}

// ------------------------ Макросы ------------------------ //

META defineDocumentAccount(object, contact, caption)
    numberAccount###contact 'Расчетный счет'###caption (###object object) = numberAccount(contact(object)) IN documentPrm;
    numberNewAccount###contact 'Расчетный счет'###caption (###object object) = numberNewAccount(contact(object)) IN documentPrm;
    nameBank###contact 'Банк'###caption (###object object) = nameBank(account(contact(object))) IN documentPrm;
    addressBank###contact 'Адрес банка'###caption (###object object) = addressBank(account(contact(object))) IN documentPrm;
    departmentBank###contact 'Отдел банка'###caption (###object object) = departmentBank(account(contact(object))) IN documentPrm;
    CBUBank###contact 'ЦБУ банка'###caption (###object object) = CBUBank(account(contact(object))) IN documentPrm;
    MFOBank###contact 'Код BIC банка'###caption (###object object) = MFOBank(account(contact(object))) IN documentPrm;
END

copyAccountNumbers 'Скопировать номера счетов IBAN' ()   { 
    FOR number(Account a) AND numberNew(a) DO {
        number(a) <- numberNew(a);
    }
    APPLY;
}

importBIC 'Импортировать коды BIC' () {  //запускать только 1 раз, или без копирования старых

// сохраняем коды МФО   
    FOR MFO(Bank b) DO {
        oldMFO(b) <- MFO(b);
    }
    
    LOCAL codeBIC = STRING[10] (INTEGER);    
    LOCAL codeMFO = STRING[10] (INTEGER);
    
    INPUT f = EXCELFILE DO {
        IMPORT XLS NOHEADER FROM f AS EXCELFILE TO codeBIC = A, codeMFO = C;

        FOR oldMFO(Bank b) DO {
            FOR imported(INTEGER i) AND codeMFO(i) == oldMFO(b) AND MFO(b) == oldMFO(b) DO {      
                MFO(b) <- codeBIC(i);
            }        
        }    
        APPLY;
    }
}

importIBAN 'Импортировать номера счетов IBAN' () {  
    NEWSESSION {
        // сохраняем старые номера счетов   
        FOR number(Account a) DO {
            numberNew(a) <- number(a) WHERE length(number(a)) < 15;
        }
        
        LOCAL unp = STRING[50] (INTEGER);    
        LOCAL name = STRING[100] (INTEGER);    
        LOCAL numberOld = STRING[50] (INTEGER);    
        LOCAL numberNew = STRING[50] (INTEGER);
        
        INPUT f = EXCELFILE DO {
            IMPORT XLS NOHEADER FROM f AS EXCELFILE TO unp, name, numberOld, numberNew;
    
            FOR numberNew(Account a) DO {
                FOR imported(INTEGER i) AND numberOld(i) == numberNew(a) DO {      
                    number(a) <- numberNew(i);
                }        
            }    
            APPLY;
        }
        
        // если счёта в файле не было
        FOR number(Account a) DO {
            numberNew(a) <- '' WHERE numberNew(a) == number(a);
        }  
        APPLY;
    }
}