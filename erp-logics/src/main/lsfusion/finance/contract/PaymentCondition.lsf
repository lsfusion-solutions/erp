MODULE PaymentCondition;

REQUIRE System, Integration, Finance;

NAMESPACE Contract;

CLASS PaymentCondition 'Условия оплаты';
TABLE paymentCondition(PaymentCondition);

@defineExternalizable(paymentCondition, STRING[100]);

// Порядок оплаты

CLASS AgreementPaymentType 'Порядок оплаты' {
    prepayment 'С отсрочкой платежа',
    implement 'По факту реализации',
    requirement 'Платежное требование',
    advancePayment 'По предоплате'
}
FORM agreementPaymentTypes 'Порядок оплаты'
    OBJECTS t = AgreementPaymentType
    PROPERTIES(t) READONLY staticCaption
    LIST AgreementPaymentType OBJECT t
;

bankingDays 'Банковских дней' = DATA BOOLEAN (PaymentCondition);

type = DATA AgreementPaymentType (PaymentCondition);
nameType 'Тип оплаты' (PaymentCondition paymentCondition) = staticCaption(type(paymentCondition));

isPrepaymentType = ABSTRACT VALUE BOOLEAN (PaymentCondition);
isPrepaymentType(PaymentCondition paymentCondition) += type(paymentCondition) == AgreementPaymentType.prepayment OR type(paymentCondition) == AgreementPaymentType.advancePayment;

isRequirement 'Платежное требование' = DATA BOOLEAN (PaymentCondition);
isRequirementType(PaymentCondition paymentCondition) = type(paymentCondition) == AgreementPaymentType.prepayment AND isRequirement(paymentCondition);

// Периоды рассрочки

CLASS PaymentPeriod 'Период рассрочки';
TABLE paymentPeriod(PaymentPeriod);

@defineExternalizable(paymentPeriod, STRING[100]);
countDays 'Кол-во дней' = DATA INTEGER (PaymentPeriod);
percent 'Процент' = DATA NUMERIC[8,3] (PaymentPeriod);

paymentCondition 'Условия оплаты периода рассрочки' = DATA PaymentCondition(PaymentPeriod) NONULL DELETE;
bankingDays 'Банковских дней'(PaymentPeriod p) = bankingDays(paymentCondition(p));

firstPaymentPeriod (PaymentCondition c) = GROUP LAST PaymentPeriod p ORDER DESC p BY paymentCondition(p) MATERIALIZED;
countDaysFirstPaymentPeriod (PaymentCondition c) = countDays(firstPaymentPeriod(c));

description(PaymentPeriod paymentPeriod) =
    countDays(paymentPeriod) + (IF bankingDays(paymentPeriod) THEN ' банковских дн.' ELSE ' календарных дн.')+  ' ( ' + percent(paymentPeriod) + ' %)';
shortDescription(PaymentPeriod paymentPeriod) =
    countDays(paymentPeriod) + (IF bankingDays(paymentPeriod) THEN ' б.д.' ELSE ' к.д.')+  ' ( ' + percent(paymentPeriod) + ' %)';

descriptionPeriod 'Условия оплаты' (PaymentCondition paymentCondition) =
    GROUP
                CONCAT description(PaymentPeriod paymentPeriod) IF paymentCondition(paymentPeriod) == paymentCondition, ', '
                ORDER paymentPeriod CHARWIDTH 20;
shortDescriptionPeriod 'Условия оплаты' (PaymentCondition paymentCondition) =
    GROUP
                CONCAT shortDescription(PaymentPeriod paymentPeriod) IF paymentCondition(paymentPeriod) == paymentCondition, ', '
                ORDER paymentPeriod CHARWIDTH 20;                

//descriptionPaymentCondition 'Условия оплаты' (paymentCondition) =
//    OVERRIDE 'По факту реализации' IF paymentCondition IS PaymentCondition , 
//             descriptionPeriodPaymentCondition(paymentCondition) CHARWIDTH 20;

extraDescription = ABSTRACT STRING[255] (PaymentCondition);
description 'Условия оплаты' (PaymentCondition paymentCondition) = CASE 
    WHEN isRequirementType(paymentCondition) THEN 'Требование '+ descriptionPeriod(paymentCondition)
    WHEN type(paymentCondition) == AgreementPaymentType.prepayment THEN descriptionPeriod(paymentCondition)
    WHEN paymentCondition IS PaymentCondition THEN (CONCAT '', staticCaption(type(paymentCondition)), extraDescription(paymentCondition)) CHARWIDTH 20;
paymentConditionDescription = GROUP MAX PaymentCondition c BY description(c);

shortDescription 'Условия оплаты' (PaymentCondition paymentCondition) = CASE 
    WHEN isRequirementType(paymentCondition) THEN 'Требование '+ shortDescriptionPeriod(paymentCondition)
    WHEN type(paymentCondition) == AgreementPaymentType.prepayment THEN shortDescriptionPeriod(paymentCondition)
    WHEN paymentCondition IS PaymentCondition THEN staticCaption(type(paymentCondition)) CHARWIDTH 20;
    
documentDescription 'Описание для документов' = DATA STRING[100] (PaymentCondition);
// Бонусы


sumPercent(paymentCondition) = GROUP SUM percent(PaymentPeriod paymentPeriod) BY paymentCondition(paymentPeriod);
CONSTRAINT sumPercent(PaymentCondition paymentCondition) != 100.0 CHECKED BY sumPercent[PaymentCondition]
    MESSAGE 'Сумма процентов рассрочки должна быть равна 100';
CONSTRAINT percent(PaymentPeriod p) AND NOT countDays(p)
    MESSAGE 'Для периода рассрочки должен быть задан параметр "Кол-во дней"';

showPaymentPeriod = ABSTRACT VALUE BOOLEAN (PaymentCondition);
showPaymentPeriod (PaymentCondition pc) += type(pc) == AgreementPaymentType.prepayment OR type(pc) == AgreementPaymentType.advancePayment;
FORM paymentCondition 'Условие оплаты'

    OBJECTS pc = PaymentCondition PANEL
    PROPERTIES(pc) id SHOWIF showIDs(), nameType, bankingDays, documentDescription
    PROPERTIES(pc) isRequirement SHOWIF isPrepaymentType(pc)

    OBJECTS pp = PaymentPeriod GRID
    PROPERTIES(pp) countDays SHOWIF showPaymentPeriod(pc),
                   percent SHOWIF showPaymentPeriod(pc)
    PROPERTIES(pp) NEW SHOWIF showPaymentPeriod(pc),
                   DELETE SHOWIF showPaymentPeriod(pc) GRID

    FILTERS paymentCondition(pp) == pc

    EDIT PaymentCondition OBJECT pc
;

DESIGN paymentCondition {
    BOX {
        size = (1024, 768);
    }
}

FORM paymentConditions 'Условия оплаты'

    OBJECTS pc = PaymentCondition
    PROPERTIES(pc) READONLY id SHOWIF showIDs(), description, nameType, documentDescription
    PROPERTIES(pc) NEWSESSION NEW, EDIT, DELETE
;


FORM dialogPaymentConditions 'Условия оплаты'

    OBJECTS pc = PaymentCondition
    PROPERTIES(pc) READONLY id SHOWIF showIDs(), description, nameType, documentDescription

    LIST PaymentCondition OBJECT pc
;


NAVIGATOR {
    financeMasterData {
        NEW paymentConditions;
    }
}
