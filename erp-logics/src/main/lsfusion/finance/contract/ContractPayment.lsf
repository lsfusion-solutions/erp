MODULE ContractPayment;

REQUIRE ContractLedger, Payment;

contract 'Контракт' (payment) = DATA Contract (Payment) INDEXED;
seriesNumberContract 'Номер договора' (Payment payment) = seriesNumber(contract(payment));

replace(Contract c, Contract o) + { contract(Payment object) <- o WHERE contract(object) == c;}

currencyContract(Payment payment) = currency(contract(payment)) MATERIALIZED;
nameCurrencyContract 'Валюта' (Payment payment) = name(currencyContract(payment));

typeExchangeContract (payment) = DATA TypeExchange (Payment);
typeExchangeContract (Payment payment) <- typeExchange(contract(payment))
    WHEN CHANGED(contract(payment));
nameTypeExchangeContract 'Тип обмена' (Payment payment) = name(typeExchangeContract(payment));
rateExchangeContract 'Курс' (payment) = DATA NUMERIC[15,8] (Payment) CHARWIDTH 15;
rateExchangeContract (Payment payment) <- OVERRIDE rateOn(typeExchangeContract(payment), currencyAccountTo(payment), date(payment)) IF currencyContract(payment) != currencyAccountTo(payment),
                                                  1.0 IF payment IS Payment AND currencyContract(payment) == currencyAccountTo(payment) AND NOT typeExchangeContract(payment)
    WHEN CHANGED(currencyContract(payment)) OR
         CHANGED(typeExchangeContract(payment)) OR
         CHANGED(date(payment)) OR
         CHANGED(contract(payment)) OR
         CHANGED(currencyAccountTo(payment));

sumContract 'Сумма платежа по контракту' (payment) = DATA NUMERIC[18,4] (Payment) CHARWIDTH 16;
sumContract(Payment payment) <- IF NOT currencyContract(payment) == currencyAccountTo(payment)
                               THEN rateExchangeContract(payment)*sum(payment)
                               ELSE sum(payment)
    WHEN CHANGED(sum(payment)) OR
         CHANGED(currencyContract(payment)) OR
         CHANGED(currencyAccountTo(payment)) OR
         CHANGED(typeExchangeContract(payment)) OR
         CHANGED(rateExchangeContract(payment));

autoWriteFIFO 'Автоматически расписывать по ФИФО' = DATA BOOLEAN (PaymentOperation.Operation);


// расчетный счет бенефициара в платежах
accountBeneficiaries = DATA Bank.Account(Contract);
numberAccountBeneficiaries 'р/сч бенефициара' (Contract contract)= number(accountBeneficiaries(contract)) IN payment;

CONSTRAINT legalEntity(accountBeneficiaries(ContractSku contract)) AND supplier(contract) AND NOT legalEntity(accountBeneficiaries(contract)) == supplier(contract)  
    CHECKED BY accountBeneficiaries[Contract], supplier[ContractSku] MESSAGE 'Организация р/сч бенефициара должна совпадать с бенефициаром';
          

EXTEND FORM userContractSku
 PROPERTIES(c) numberAccountBeneficiaries
;
overCopyUser(UserContractSku from, UserContractSku to) +{
    accountBeneficiaries(to) <- accountBeneficiaries(from);
}

skipSetContract = ABSTRACT VALUE BOOLEAN (Payment);

// заполнить договор при смене плательщика или бенефициара или даты платежа
WHEN LOCAL FORMS payment (CHANGED(beneficiary(Payment payment)) OR CHANGED(payer(payment))
            OR CHANGED(date(payment)) OR CHANGED(isReturn(payment))) AND NOT CHANGED(contract(payment)) AND NOT skipSetContract(payment) NOINLINE DO {
    IF NOT isReturn(payment) THEN { 
        contract(payment) <- OVERRIDE defaultContractSkuSupplierCustomer(beneficiary(payment), payer(payment), date(payment)),
                                      singleContractSkuSupplierCustomer(beneficiary(payment), payer(payment), date(payment))
                                          IF countContractSkuSupplierCustomer(beneficiary(payment), payer(payment), date(payment)) == 1;
    }
    ELSE {
        contract(payment) <- OVERRIDE defaultContractSkuSupplierCustomer(payer(payment), beneficiary(payment), date(payment)),
                                      singleContractSkuSupplierCustomer(payer(payment), beneficiary(payment), date(payment))
                                          IF countContractSkuSupplierCustomer(payer(payment), beneficiary(payment), date(payment)) == 1;
    }
}

// заполнить счет бенефициара при смене бенефициара или договора
accountTo(Payment payment) <- OVERRIDE accountBeneficiaries(contract(payment)), account(beneficiary(payment))
    WHEN CHANGED(beneficiary(payment)) OR CHANGED(contract(payment));

EXTEND FORM PaymentOperation.operation
    PROPERTIES (o) autoWriteFIFO
;

DESIGN PaymentOperation.operation{
    paramsContainer {
        MOVE PROPERTY(autoWriteFIFO(o));
    }    
}

WHEN LOCAL FORMS payment CHANGED(sum(Payment payment)) OR 
                           CHANGED(currencyContract(payment)) OR
                           CHANGED(currencyAccountTo(payment)) OR
                           CHANGED(typeExchangeContract(payment)) OR
                           CHANGED(rateExchangeContract(payment))DO {
    sumContract(payment) <- IF currencyContract(payment) == currencyAccountTo(payment)
                               THEN sum(payment)
                               ELSE rateExchangeContract(payment)*sum(payment);
    IF autoWriteFIFO(operation(payment)) THEN writeFIFO(payment);    
}

CONSTRAINT currency(typeExchangeContract(Payment payment)) != currencyContract(payment)
    CHECKED BY typeExchangeContract[Payment] MESSAGE 'Валюта договора должна совпадать с валютой типа обмена';

CONSTRAINT contract(Payment payment) IS Contract AND NOT isReturn(payment) AND NOT partyA(contract(payment)) == beneficiary(payment)
    CHECKED BY contract[Payment] MESSAGE 'Выбранный договор не действителен для бенефициара';

CONSTRAINT contract(Payment payment) IS Contract AND NOT isReturn(payment) AND NOT partyB(contract(payment)) == payer(payment)
    CHECKED BY contract[Payment] MESSAGE 'Выбранный договор не действителен для плательщика';

CONSTRAINT contract(Payment payment) IS Contract AND isReturn(payment) AND NOT partyB(contract(payment)) == beneficiary(payment)
    CHECKED BY contract[Payment] MESSAGE 'Выбранный договор не действителен для бенефициара';

CONSTRAINT contract(Payment payment) IS Contract AND isReturn(payment) AND NOT partyA(contract(payment)) == payer(payment)
    CHECKED BY contract[Payment] MESSAGE 'Выбранный договор не действителен для плательщика';
        
@implementContractLedger( , Payment, contract);

customSumContract = ABSTRACT NUMERIC[18,4] (Payment);
overSumContract(Payment payment) = IF isReturn(payment) 
                                    THEN OVERRIDE customSumContract(payment), sumContract(payment)
                                    ELSE OVERRIDE -customSumContract(payment), -sumContract(payment);
                                    
sum[ContractLedger](Payment contractLedger) += overSumContract(contractLedger);

@implementContractLedger(a , Payment, contract);
sum[ContractALedger](Payment contractALedger) += overSumContract(contractALedger);

@implementOutContractLedger(Payment, contract);
isReturn[OutContractLedger](Payment outContractLedger) += isReturn(outContractLedger);

//sum[OutContractLedger](Payment outContractLedger) += sumContract(outContractLedger);
sum[OutContractLedger](Payment outContractLedger) += IF isReturn(outContractLedger) THEN -sumContract(outContractLedger)
                                                                                    ELSE sumContract(outContractLedger);

//------------------------------------------- Actions --------------------------------------------------------------//

setRateExchangeContract(Payment payment)  { 
    INPUT n = NUMERIC[18,4] DO
        rateExchangeContract(payment) <- NUMERIC[15,8](n/sum(payment));
}

//----------------------------------------------- Цвета --------------------------------------------------------------//

backgroundSum 'Цвет' (ContractLedger contractLedger, DATE date) = OVERRIDE RGB(255,160,160) IF date(contractLedger) > date,
                                                                         RGB(255,238,165) IF date(contractLedger) <= date;
background 'Цвет' (ContractLedger contractLedger, DATE date) = RGB(255,160,160) IF date(contractLedger) > date;
//backgroundSum 'Цвет' (Contract contract) = RGB(255,238,165) IF contract IS Contract;
backgroundSum 'Цвет' (ContractALedger contractALedger, DATE date) = OVERRIDE RGB(255,160,160) IF date(contractALedger) > date,
                                                                           RGB(232,184,146) IF date(contractALedger) <= date;
background 'Цвет' (ContractALedger contractALedger, DATE date) = RGB(255,160,160) IF date(contractALedger) > date;
//backgroundSumA 'Цвет' (Contract contract) = RGB(232,184,146) IF contract IS Contract;
backgroundBonusSum 'Цвет' (InContractLedger inContractLedger) = RGB(213,249,185) IF inContractLedger IS InContractLedger;
backgroundBonusSum 'Цвет' (Contract contract) = RGB(213,249,185) IF contract IS Contract;
background 'Цвет' (OutContractLedger outContractLedger, DATE date) = RGB(255,160,160) IF date(outContractLedger) > date;
background 'Цвет' (InContractLedger inContractLedger, DATE date) = RGB(255,160,160) IF date(inContractLedger) > date;

showTypeExchangeContract(Payment payment) = currencyContract(payment) != currencyAccountTo(payment);

//-------------------------------------------- Форма платежей -------------------------------------------------------//

EXTEND FORM payment
    OBJECTS i = InContractLedger
    PROPERTIES(p) seriesNumberContract,
                  costedInContractLedger DRAW i TOOLBAR READONLY,
                  writeFIFO DRAW i TOOLBAR,
                  writeLIFO DRAW i TOOLBAR,
                  nameTypeExchangeContract SHOWIF showTypeExchangeContract(p),
                  rateExchangeContract SHOWIF showTypeExchangeContract(p),
                  sumContract ON CHANGE setRateExchangeContract(p),
                  nameCurrencyContract

    PROPERTIES(i) READONLY date, description, debt
    PROPERTIES(p, i) cost
    ORDERS date(i)

    FILTERS contract(i) == contract(p),
            isPosted(i),
            active(i) OR costedOutContractLedger(i)
    FILTERGROUP filters1 
        FILTER 'Актуальные' debt(i) OR cost(p,i) 'F6' DEFAULT
;

DESIGN payment{
    BOX {
        columnContainer{
            NEW thirdColumn{
                horizontal = TRUE;
                caption = 'Контракт';
                NEW thirdOneColumn{
                    lines = 1;
                    MOVE PROPERTY(seriesNumberContract(p));
                    MOVE PROPERTY(nameCurrencyContract(p));
                }
                NEW thirdSecondColumn{
                    lines = 1;
                    MOVE PROPERTY(nameTypeExchangeContract(p));
                    MOVE PROPERTY(rateExchangeContract(p));
                    MOVE PROPERTY(sumContract(p));
                }
            }
        }
        MOVE BOX(i) BEFORE TOOLBARBOX;
    }
}

EXTEND FORM payments
    PROPERTIES(p) READONLYIF isReadonly()
                  seriesNumberContract, nameCurrencyContract, sumContract
;

currentInContractLedger = DATA LOCAL InContractLedger ();
WHEN LOCAL FORMS payment
    CHANGED(sumContract(Payment p)) AND currentInContractLedger()
        DO cost(p, InContractLedger i) <- sumContract(p) WHERE i == currentInContractLedger();

//------------------------------------- Платежи по договору --------------------------------------------------------//
overSum = ABSTRACT NUMERIC[18,4] (Currency, DATE);
overCreate  ABSTRACT LIST ( Payment);

pay 'Оплатить по договору'(Contract contract, DATE date)  { 
	NEWSESSION {
	    NEW pm = Payment {
	        date(pm) <- date;
	        payer(pm) <- partyB(contract);
	        beneficiary(pm) <- partyA(contract);
	        contract(pm) <- contract;
	        sumContract(pm) <- OVERRIDE overSum(currency(contract), date), balanceA(contract, date);
	        sum(pm) <- round2(OVERRIDE overSum(currency(contract), date), balanceA(contract, date)) IF currencyContract(pm) == currencyAccountFrom(pm);
	        writeFIFO(pm);
	        overCreate(pm);
	        SHOW payment OBJECTS p = pm DOCKED NOCANCEL;
	    }
	}
}

//------------------------------------------- Платеж по договору --------------------------------------------//

addPayment 'Оплатить'(Contract contract)  { 
	NEWSESSION{
	    NEW p = Payment{
	        operation(p) <- defaultPaymentOperation();    
	        payer(p) <- partyB(contract);
	        beneficiary(p) <- partyA(contract);
	        contract(p) <- contract;
	        SHOW payment OBJECTS p=p DOCKED NOCANCEL;
	    }
	}
}

disableEditing = ABSTRACT BOOLEAN (Payment);

EXTEND FORM contractLedger
    PROPERTIES(c, d) TOOLBAR pay

    OBJECTS pm = Payment
    PROPERTIES(pm) READONLY number BACKGROUND background[OutContractLedger,DATE](pm, d),
                            series BACKGROUND background[OutContractLedger,DATE](pm, d),
                            date BACKGROUND background[OutContractLedger,DATE](pm, d),
                            time BACKGROUND background[OutContractLedger,DATE](pm, d),
                            namePayer BACKGROUND background[OutContractLedger,DATE](pm, d),
                            nameBeneficiary BACKGROUND background[OutContractLedger,DATE](pm, d),
                            nameCurrencyContract BACKGROUND background[OutContractLedger,DATE](pm, d),
                            nameTypeExchangeContract BACKGROUND background[OutContractLedger,DATE](pm, d),
                            nameOperation BACKGROUND background[OutContractLedger,DATE](pm, d),
                            rateExchangeContract BACKGROUND background[OutContractLedger,DATE](pm, d),
                            sumContract BACKGROUND background[OutContractLedger,DATE](pm, d),
                            costedInContractLedger BACKGROUND background[OutContractLedger,DATE](pm, d),
                            note BACKGROUND background[OutContractLedger,DATE](pm, d)

    PROPERTIES(pm) TOOLBAR writeFIFO, writeLIFO
    PROPERTIES addPayment(c) DRAW pm TOOLBAR
    PROPERTIES(pm) SHOWIF NOT disableEditing(pm) NEWSESSION EDIT, DELETE 
    ORDERS date(pm), time(pm)

    FILTERS contract(pm) == c
;

DESIGN contractLedger {
    firstSecondContainer {
        MOVE BOX(pm) AFTER debtBox;
    }
}