MODULE PaymentRequest;

REQUIRE Bank, ContractLedger, PaymentOperation;

NAMESPACE PaymentRequest;

CLASS PaymentRequest 'Платежное требование';
TABLE paymentRequest(PaymentRequest);

@defineDocumentHeaderPosted(PaymentRequest);

@defineNumbered(PaymentRequest, BPSTRING[2]);

@defineNumeratedDefault(PaymentRequest, 'Платежные требования', 'ПТ');

date 'Дата' (paymentRequest) = DATA DATE (PaymentRequest);
date(PaymentRequest paymentRequest) <- currentDate() WHEN SET(paymentRequest IS PaymentRequest);
time 'Время' (paymentRequest) = DATA TIME (PaymentRequest);
time(PaymentRequest paymentRequest) <- currentTime() WHEN SET(paymentRequest IS PaymentRequest);
dateTime 'Дата/время' (PaymentRequest paymentRequest) = dateTimeToDateTime(date(paymentRequest), time(paymentRequest));

contract 'Контракт' (paymentRequest) = DATA Contract (PaymentRequest) AUTOSET;
seriesNumberContract 'Номер контракта' (PaymentRequest paymentRequest) = seriesNumber(contract(paymentRequest));
dateContract 'Дата контракта' (PaymentRequest paymentRequest)= dateFrom(contract(paymentRequest));

replace(Contract c, Contract o) + { contract(PaymentRequest object) <- o WHERE contract(object) == c;}

note 'Примечание' (paymentRequest) = DATA STRING[200] (PaymentRequest);

payer(paymentRequest) = DATA LegalEntity (PaymentRequest);
namePayer 'Плательщик' (PaymentRequest paymentRequest) = name(payer(paymentRequest));

accountFrom(paymentRequest) = DATA Bank.Account (PaymentRequest);
accountFrom(PaymentRequest paymentRequest) <- account(payer(paymentRequest))
    WHEN CHANGED(payer(paymentRequest));
nameAccountFrom 'Счет (плательщик)' (PaymentRequest paymentRequest) = number(accountFrom(paymentRequest));
currencyAccountFrom (PaymentRequest paymentRequest) = currency(accountFrom(paymentRequest));
nameCurrencyAccountFrom 'Валюта счета' (PaymentRequest paymentRequest) = nameCurrency(accountFrom(paymentRequest));

CONSTRAINT payer(PaymentRequest paymentRequest) != legalEntity(accountFrom(paymentRequest))
    CHECKED BY accountFrom[PaymentRequest] MESSAGE 'Организация счета должна совпадать с плательщиком';

beneficiary(paymentRequest) = DATA LegalEntity (PaymentRequest);
nameBeneficiary 'Бенефициар' (PaymentRequest paymentRequest) = name(beneficiary(paymentRequest));

accountTo(paymentRequest) = DATA Bank.Account (PaymentRequest);
accountTo(PaymentRequest paymentRequest) <- account(beneficiary(paymentRequest))
    WHEN CHANGED(beneficiary(paymentRequest));
nameAccountTo 'Счет (бенефициар)' (PaymentRequest paymentRequest) = number(accountTo(paymentRequest));
currencyAccountTo(PaymentRequest paymentRequest) = currency(accountTo(paymentRequest));
nameCurrencyAccountTo 'Валюта счета' (PaymentRequest paymentRequest) = nameCurrency(accountTo(paymentRequest));

CONSTRAINT beneficiary(PaymentRequest paymentRequest) != legalEntity(accountTo(paymentRequest))
    CHECKED BY accountTo[PaymentRequest] MESSAGE 'Организация счета должна совпадать с бенефициаром';

sum 'Сумма' (paymentRequest) = DATA NUMERIC[18,4] (PaymentRequest) CHARWIDTH 16;

description 'Название документа' = 'Платежное требование ' + seriesNumber(PaymentRequest paymentRequest) + ' от ' + date(paymentRequest) + ' ' + nameBeneficiary(paymentRequest) MATERIALIZED;

TABLE paymentRequestInContractLedger (PaymentRequest, InContractLedger);
cost 'Сумма требования' (paymentRequest, inContractLedger) = DATA NUMERIC[18,4] (PaymentRequest, InContractLedger);
requested 'Выставлено требований' (InContractLedger inContractLedger) =
    GROUP
    SUM cost(PaymentRequest paymentRequest, inContractLedger) IF isPosted(paymentRequest) MATERIALIZED;

requestedDebt 'Неоплаченных требований' (InContractLedger inContractLedger) =
    (MIN requested(inContractLedger), debt(inContractLedger)) IF requested(inContractLedger) AND debt(inContractLedger);

toRequest 'Не выставлено требований' (InContractLedger inContractLedger) =
    debt(inContractLedger) (-) requested(inContractLedger);

CONSTRAINT partyA(contract(PaymentRequest paymentRequest)) != beneficiary(paymentRequest)
    CHECKED BY contract[PaymentRequest] MESSAGE 'Договор должен соответствовать организациям покупателю и поставщику';

CONSTRAINT partyB(contract(PaymentRequest paymentRequest)) != payer(paymentRequest)
    CHECKED BY contract[PaymentRequest] MESSAGE 'Договор должен соответствовать организациям покупателю и поставщику';

sumInFIFO(PaymentRequest paymentRequest, InContractLedger inContractLedger) =
    PARTITION UNGROUP sum
              LIMIT toRequest(inContractLedger) IF toRequest(inContractLedger) > 0 AND
                    contract(paymentRequest) == contract(inContractLedger) AND
                    active(inContractLedger)
              ORDER date(inContractLedger), number(inContractLedger), inContractLedger
              BY paymentRequest;

sumInLIFO(PaymentRequest paymentRequest, InContractLedger inContractLedger) =
    PARTITION UNGROUP sum
              LIMIT toRequest(inContractLedger) IF toRequest(inContractLedger) > 0 AND
                    contract(paymentRequest) == contract(inContractLedger) AND
                    active(inContractLedger)
              ORDER DESC date(inContractLedger), number(inContractLedger), inContractLedger
              BY paymentRequest;

writeFIFO 'Расписать по FIFO'(PaymentRequest paymentRequest)  { 
    cost(paymentRequest, InContractLedger inContractLedger) <- sumInFIFO(paymentRequest, inContractLedger);
}

writeLIFO 'Расписать по LIFO'(PaymentRequest paymentRequest)  { 
    cost(paymentRequest, InContractLedger inContractLedger) <- sumInLIFO(paymentRequest, inContractLedger);
}


//Операции
operation = DATA PaymentOperation.Operation (PaymentRequest);
nameOperation 'Операция' = name(operation(PaymentRequest PaymentRequest));
idOperation 'ID операции' = id(operation(PaymentRequest PaymentRequest));

@defineDocumentOperationLegalEntity(paymentRequest, payer, 'Плательщик');
@defineDocumentOperationLegalEntity(paymentRequest, beneficiary, 'Бенефициар');

@defineDocumentOperationRole(paymentRequest);


partyA = DATA LOCAL LegalEntity();
namePartyA 'Организация (поставщик)' = name(partyA());
partyB = DATA LOCAL LegalEntity();
namePartyB 'Организация (покупатель)' = name(partyB());

FORM paymentRequest 'Платежное требование'

    OBJECTS p = PaymentRequest PANEL
    PROPERTIES(p) isPosted, nameNumerator, number, series, date, time,
                  seriesNumberContract, note
    PROPERTIES(p) namePayer, nameAccountFrom, nameCurrencyAccountFrom,
                  nameBeneficiary, nameAccountTo, nameCurrencyAccountTo
    PROPERTIES(p) sum, nameOperation

    OBJECTS i = InContractLedger
    PROPERTIES(i) READONLY date, description, debt, requested
    PROPERTIES(p, i) cost
    PROPERTIES(p) TOOLBAR writeFIFO DRAW i ,
                  writeLIFO DRAW i 
    ORDERS date(i)

    FILTERS active(i),
            contract(p) == contract(i)

    EVENTS
        ON OK prePost(p)

    EDIT PaymentRequest OBJECT p
;

DESIGN paymentRequest {
    BOX {
        NEW headerContainer{
            caption = 'Шапка документа';
            horizontal = TRUE;
            MOVE PROPERTY(isPosted(p));
            MOVE PROPERTY(nameNumerator(p));
            MOVE PROPERTY(number(p));
            MOVE PROPERTY(series(p));
            MOVE PROPERTY(date(p));
            MOVE PROPERTY(time(p));
        }
        NEW columnContainer{
            horizontal = TRUE;
            NEW firstColumn{
                lines = 1;
                fill = 1;
                caption = 'Сторона (с)';
                MOVE PROPERTY(namePayer(p));
                MOVE PROPERTY(nameAccountFrom(p));
                MOVE PROPERTY(nameCurrencyAccountFrom(p));
            }
            NEW secondColumn{
                lines = 1;
                fill = 1;
                caption = 'Сторона (на)';
                MOVE PROPERTY(nameBeneficiary(p));
                MOVE PROPERTY(nameAccountTo(p));
                MOVE PROPERTY(nameCurrencyAccountTo(p));
            }
            NEW thirdColumn{
                lines = 1;
                fill = 1;
                caption = 'Контракт';
                MOVE PROPERTY(seriesNumberContract(p));
            }
        }
        NEW paramContainer {
            horizontal = TRUE;
            caption = 'Параметры документа';
            MOVE PROPERTY(nameOperation(p));
            MOVE PROPERTY(sum(p));
            MOVE PROPERTY(note(p));
        }
    }
    MOVE BOX(i);

    PROPERTY(formOk()) {
        caption = 'Провести';
    }

    MOVE TOOLBARBOX;
}

// ------------------------ Требования по договору -------------------------- //

toRequest 'Не выставлено требований' (contract) =
    GROUP SUM toRequest(InContractLedger ledger) IF active(ledger) BY contract(ledger);

requestedDebt 'Неоплаченных требований' (contract) =
    GROUP SUM requestedDebt (InContractLedger ledger) IF active(ledger) BY contract(ledger);

toRequest 'Необходимо выставить требований' (Contract contract, DATE date) = balanceA(contract, date) (-) requestedDebt(contract);

overCreateRequests  ABSTRACT LIST ( PaymentRequest);
createPaymentRequest 'Выставить платежное требование'(Contract contract, DATE date)  { 
	NEWSESSION {
	    NEW pr = PaymentRequest {
	        date(pr) <- date;
	        payer(pr) <- partyB(contract);
	        beneficiary(pr) <- partyA(contract);
	        contract(pr) <- contract;
	        sum(pr) <- toRequest(contract, date);
	        cost(pr, InContractLedger inContractLedger) <- sumInFIFO(pr, inContractLedger)
	            WHERE contract(pr) == contract(inContractLedger);
	        overCreateRequests(pr);
	        SHOW paymentRequest OBJECTS p = pr DOCKED;
	    }
	}
}

EXTEND FORM contractLedger
    PROPERTIES(c, d) TOOLBAR createPaymentRequest
;

// ------------------------- Расширяем управление задолженностями ------------------------ //

background 'Цвет' (PaymentRequest paymentRequest, DATE date) = CASE WHEN date(paymentRequest) > date THEN RGB(224,255,224)
                                                                  WHEN date(paymentRequest) < date THEN RGB(255,224,224);

EXTEND FORM contractLedger
    OBJECTS pr = PaymentRequest
    PROPERTIES(pr) READONLY number BACKGROUND background(pr, d),
                            series BACKGROUND background(pr, d),
                            date BACKGROUND background(pr, d),
                            time BACKGROUND background(pr, d),
                            sum BACKGROUND background(pr, d),
                            note BACKGROUND background(pr, d),
                            isPosted BACKGROUND background(pr, d)
    PROPERTIES(pr) NEWSESSION NEW, EDIT, DELETE 
    ORDERS date(pr), time(pr)
    FILTERS contract(pr) == c
;

DESIGN contractLedger {
    firstSecondContainer {
        MOVE BOX(pr);
    }
}

createPaymentRequests 'Выставить платежные требования'(DATE date)  { 
    LOCAL count = INTEGER();
    count() <- 0;
    FOR toRequest(Contract contract, date) > 0 AND (partyA(contract) == partyA() OR (isCompany(partyA(contract)) AND NOT partyA()))
                                                  AND (partyB(contract) == partyB() OR NOT partyB())
        NEW pr = PaymentRequest DO {
        isPosted(pr) <- TRUE;
        date(pr) <- date;
        payer(pr) <- partyB(contract);
        beneficiary(pr) <- partyA(contract);
        contract(pr) <- contract;
        sum(pr) <- toRequest(contract, date);
        cost(pr, InContractLedger inContractLedger) <- sumInFIFO(pr, inContractLedger)
            WHERE contract(pr) == contract(inContractLedger);
        overCreateRequests(pr);
        count() <- count() + 1;
    }

    MESSAGE 'Сформировано ' + count() + ' платежных требований.';
    apply();
} CONFIRM;

FORM paymentRequests 'Платежные требования'
    OBJECTS d = DATE PANEL
    PROPERTIES(d) VALUE

    PROPERTIES() namePartyA, namePartyB

    OBJECTS pr = PaymentRequest
    PROPERTIES(pr) READONLY isPosted BACKGROUND background(pr, d),
                            number BACKGROUND background(pr, d),
                            series BACKGROUND background(pr, d),
                            date BACKGROUND background(pr, d),
                            time BACKGROUND background(pr, d),
                            nameBeneficiary BACKGROUND background(pr, d),
                            nameAccountTo BACKGROUND background(pr, d),
                            nameCurrencyAccountTo BACKGROUND background(pr, d),
                            namePayer BACKGROUND background(pr, d),
                            nameAccountFrom BACKGROUND background(pr, d),                            
                            sum BACKGROUND background(pr, d),
                            note BACKGROUND background(pr, d),
                            nameOperation BACKGROUND background(pr, d)                            
    PROPERTIES(d) createPaymentRequests DRAW pr TOOLBAR
    PROPERTIES(pr) NEWSESSION NEW, EDIT, DELETE 
    ORDERS date(pr), time(pr)
    FILTERS partyA(contract(pr)) == partyA() OR pr IS PaymentRequest AND NOT partyA(),
            partyB(contract(pr)) == partyB() OR pr IS PaymentRequest AND NOT partyB()

    OBJECTS i = InContractLedger
    PROPERTIES(i) READONLY date, description, debt, requested
    PROPERTIES(pr, i) cost
    FILTERS cost(pr, i)
    ORDERS date(i)

    OBJECTS ic = InContractLedger
    PROPERTIES(ic) READONLY date, description, debt, requested
    FILTERS active(ic),
            toRequest(ic),
            partyA(contract(ic)) == partyA() OR ic IS InContractLedger AND NOT partyA(),
            partyB(contract(ic)) == partyB() OR ic IS InContractLedger AND NOT partyB()
    ORDERS date(i)
;

DESIGN paymentRequests {
    MOVE BOX(d) {
        horizontal = TRUE;
        caption = 'Параметры';
        MOVE PROPERTY(namePartyA());
        MOVE PROPERTY(namePartyB());
    }
    NEW splitContainer {
        fill = 1;
        MOVE BOX(pr);
        NEW bodyContainer {
            fill = 1;
            tabbed = TRUE;
            MOVE BOX(i);
            MOVE BOX(ic) { caption = 'Документы, по которым не выставлены требования';}
        }
    }
    MOVE TOOLBARBOX;
}

NAVIGATOR {
    contractNavigator{
        NEW paymentRequests;
    }
}