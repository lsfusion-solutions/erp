MODULE GeneralLedger;

REQUIRE GLAccountType, Operation, EmployeeLegalEntity, Service;

CLASS ABSTRACT GLDocument 'Регистр-основание';
TABLE GLDocument(GLDocument);

GROUP generalLedger 'Проводки' : base;

isPosted 'Проведен' = ABSTRACT BOOLEAN (GLDocument) MATERIALIZED;

name 'Регистр-основание' = ABSTRACT ISTRING[200] (GLDocument) MATERIALIZED;
number 'Номер' = ABSTRACT STRING[48] (GLDocument) IN numbered CHARWIDTH 7 MATERIALIZED;
series 'Серия' = ABSTRACT BPSTRING[2] (GLDocument) IN numbered CHARWIDTH 3 NOFLEX MATERIALIZED;
seriesNumber 'Серия/Номер' (GLDocument GLDocument) = CONCAT '', series(GLDocument), number(GLDocument) CHARWIDTH 7;

dateTime 'Дата/время' = ABSTRACT DATETIME (GLDocument) MATERIALIZED;
date 'Дата' (GLDocument document) = toDate(dateTime(document));
time 'Время' (GLDocument document) = toTime(dateTime(document));

operation 'Операция' = ABSTRACT Operation (GLDocument) MATERIALIZED;

onlineGeneralLedger 'Создавать проводки онлайн' = DATA BOOLEAN () IN generalLedger COMPLEX;
reportinGeneralLedger 'Запретить редактировать проводки после отчетного периода' = DATA BOOLEAN () IN generalLedger;
dateReportingGeneralLedger 'Дата отчетного периода' = DATA DATE () IN generalLedger;
dataMaxDateGeneralLedger 'Конец отчетного периода' = DATA DATE ();
maxDateGeneralLedger 'Конец отчетного периода' = OVERRIDE dataMaxDateGeneralLedger(), 2040_12_31;

EXTEND FORM options
    OBJECTS lgl = LegalEntity PANEL 
    PROPERTIES (lgl) name SELECTOR
    PROPERTIES() onlineGeneralLedger, reportinGeneralLedger, dateReportingGeneralLedger, maxDateGeneralLedger
    FILTERS accessCompany(currentUser(), lgl)

;
DESIGN options {
    pane {
        NEW generalLedger{
            type = CONTAINERV;
            caption = 'Проводки';
            MOVE PROPERTY (onlineGeneralLedger());
            MOVE PROPERTY (reportinGeneralLedger());
            NEW period {
                type = CONTAINERH;
                MOVE PROPERTY (dateReportingGeneralLedger());
                MOVE PROPERTY (maxDateGeneralLedger());                     
            }
            MOVE BOX(lgl);
        }
    }
}
//-------------------------- Проводки -------------------------//

CLASS ABSTRACT COMPLEX GeneralLedger 'Проводка';
TABLE generalLedger(GeneralLedger) FULL;

CLASS UserGeneralLedger 'Проводка (польз.)': GeneralLedger;

@defineDocumentInterfaceHeaderCreated(GeneralLedger);

@defineDocumentInterfaceHeaderPosted (GeneralLedger);
@defineDocumentInterfaceHeaderTimePrefix(GeneralLedger, , );
@deriveDocumentHeaderTimePrefix(UserGeneralLedger, );

GLDocument = ABSTRACT GLDocument (GeneralLedger) MATERIALIZED INDEXED;
nameGLDocument 'Регистр (описание)' (GeneralLedger generalLedger) = name(GLDocument(generalLedger)) IN id;

numberGLDocument 'Регистр (номер)' (GeneralLedger generalLedger) = number(GLDocument(generalLedger)) IN numbered;
seriesGLDocument 'Регистр (серия)' (GeneralLedger generalLedger) = series(GLDocument(generalLedger)) IN numbered;
seriesNumberGLDocument 'Регистр (серия/номер)' (GeneralLedger generalLedger) = seriesNumber(GLDocument(generalLedger));

operationGLDocument (GeneralLedger generalLedger) = operation(GLDocument(generalLedger));

GLDocument = DATA GLDocument (UserGeneralLedger) INDEXED;
nameGLDocument 'Регистр-основание' (UserGeneralLedger userGeneralLedger) = name(GLDocument(userGeneralLedger));

numberGLDocument 'Регистр (номер)' (UserGeneralLedger userGeneralLedger) = number(GLDocument(userGeneralLedger));
seriesGLDocument 'Регистр (серия)' (UserGeneralLedger userGeneralLedger) = series(GLDocument(userGeneralLedger));
seriesNumberGLDocument 'Регистр (серия/номер)' (UserGeneralLedger userGeneralLedger) = seriesNumber(GLDocument(userGeneralLedger));

operationGLDocument (UserGeneralLedger generalLedger) = operation(GLDocument(generalLedger));

idOperation 'Код операции' = ABSTRACT STRING[3] (GeneralLedger) MATERIALIZED;
idOperation 'Код операции' = DATA STRING[3] (UserGeneralLedger);
idOperation(UserGeneralLedger generalLedger) += idOperation(generalLedger);

GLDocument (UserGeneralLedger generalLedger) += GLDocument (generalLedger);

legalEntity = ABSTRACT LegalEntity (GeneralLedger) MATERIALIZED NONULL DELETE;
nameLegalEntity 'Компания' (GeneralLedger generalLedger) = name(legalEntity(generalLedger));
legalEntity = DATA LegalEntity (UserGeneralLedger) INDEXED;
nameLegalEntity 'Компания' (UserGeneralLedger userGeneralLedger) = name(legalEntity(userGeneralLedger));
legalEntity (UserGeneralLedger generalLedger) += legalEntity (generalLedger);

debit = ABSTRACT GLAccount (GeneralLedger) MATERIALIZED;
idDebit 'Дебет' (GeneralLedger generalLedger) = id(debit(generalLedger)) IN id;
debit = DATA GLAccount (UserGeneralLedger);
idDebit 'Дебет' (UserGeneralLedger userGeneralLedger) = id(debit(userGeneralLedger));
debit (UserGeneralLedger generalLedger) += debit (generalLedger);


credit = ABSTRACT GLAccount (GeneralLedger) MATERIALIZED;
idCredit 'Кредит' (GeneralLedger generalLedger) = id(credit(generalLedger)) IN id;
credit = DATA GLAccount (UserGeneralLedger);
idCredit 'Кредит' (UserGeneralLedger userGeneralLedger) = id(credit(userGeneralLedger));
credit (UserGeneralLedger generalLedger) += credit (generalLedger);

glAccountTypeDebit(GeneralLedger generalLedger) = GLAccountType(debit(generalLedger));
glAccountTypeCredit(GeneralLedger generalLedger) = GLAccountType(credit(generalLedger));

CONSTRAINT GLAccountType(debit(UserGeneralLedger userGeneralLedger)) != GLAccountType(credit(userGeneralLedger))
    CHECKED BY  debit[UserGeneralLedger], credit[UserGeneralLedger]
    MESSAGE 'У дебета и кредита разные планы счетов';

sum 'Сумма' = ABSTRACT NUMERIC[18,4] (GeneralLedger) MATERIALIZED;
sum 'Сумма' = DATA NUMERIC[18,4] (UserGeneralLedger);
sum (UserGeneralLedger generalLedger) += sum (generalLedger);

quantity 'Кол-во'= ABSTRACT NUMERIC[16,5] (GeneralLedger) MATERIALIZED;
quantity 'Кол-во'= DATA NUMERIC[16,5] (UserGeneralLedger);
quantity (UserGeneralLedger generalLedger) += quantity (generalLedger);

description 'Описание' = ABSTRACT ISTRING[350] (GeneralLedger) MATERIALIZED CHARWIDTH 40;
description 'Описание' = DATA STRING[255] (UserGeneralLedger) CHARWIDTH 40;
description (UserGeneralLedger generalLedger) += description (generalLedger);

skip 'Не изменять значение' (generalLedger) = ABSTRACT BOOLEAN (GeneralLedger) MATERIALIZED;
skip 'Не изменять значение' (userGeneralLedger) = DATA BOOLEAN (UserGeneralLedger);
skip (UserGeneralLedger generalLedger) += skip (generalLedger);

CONSTRAINT isPosted(GeneralLedger ledger) AND reportinGeneralLedger() AND date(ledger) < dateReportingGeneralLedger() AND CHANGED(sum(ledger))
    MESSAGE 'Запрещено редактировать проводки после отчетного периода';

// ----------------------------- Сальдо ---------------------------//

META  defineGLAccountSum (caption, concrete, prefix)
    // без учета текущей даты
    prefix###sumB###concrete 'Сумма на начало дня '###caption (GLAccount GLAccount, LegalEntity company, DATE date) = sum###concrete(GLAccount, company)
                                                                      (-) (GROUP
                                                                                 SUM sum###concrete(GLAccount, company, DATE dateIn) IF dateIn >= date);
    // с учетом текущей даты
    prefix###sumA###concrete 'Сумма на конец дня '###caption (GLAccount GLAccount, LegalEntity company, DATE date) = sum###concrete(GLAccount, company)
                                                                     (-) (GROUP
                                                                                SUM sum###concrete(GLAccount, company, DATE dateIn) IF dateIn > date);
END
META defineGLAccountBalance (caption, prefix)
    prefix###balanceAGL 'Сальдо на начало дня '###caption (GLAccount GLAccount, LegalEntity company, DATE date) =  prefix###sumADebit(GLAccount, company, date) (-) prefix###sumACredit(GLAccount, company, date);
    prefix###balanceBGL 'Сальдо на конец дня '###caption (GLAccount GLAccount, LegalEntity company, DATE date) =  prefix###sumBDebit(GLAccount, company, date) (-) prefix###sumBCredit(GLAccount, company, date);
END

sumCredit 'Сумма (кредит)' (GLAccount, company)= GROUP SUM sum(GeneralLedger ledger) IF isPosted(ledger) BY credit(ledger), legalEntity(ledger);
sumDebit 'Сумма (дебет)' (GLAccount, company)= GROUP SUM sum(GeneralLedger ledger) IF isPosted(ledger) BY debit(ledger), legalEntity(ledger);
balance 'Сальдо' (GLAccount GLAccount, LegalEntity company)= sumDebit(GLAccount, company) (-) sumCredit(GLAccount, company);

TABLE GLAccountLegalEntityDate(GLAccount, LegalEntity, DATE);
sumCredit 'Сумма (кредит)' (GLAccount, company, date)= GROUP SUM sum(GeneralLedger ledger) IF isPosted(ledger)
    BY credit(ledger), legalEntity(ledger), date(ledger);
sumDebit 'Сумма (дебет)' (GLAccount, company, date)= GROUP SUM sum(GeneralLedger ledger) IF isPosted(ledger)
    BY debit(ledger), legalEntity(ledger), date(ledger);
balance 'Сальдо' (GLAccount GLAccount, LegalEntity company, DATE date) =
    sumDebit(GLAccount, company, date) (-) sumCredit(GLAccount, company, date);

sumCredit 'Сумма (кредит)' (GLAccount GLAccount, LegalEntity company, DATE dateFrom, DATE dateTo) = GROUP
        SUM
        sumCredit(GLAccount, company, DATE date) IF date >= dateFrom AND date <= dateTo;
sumDebit 'Сумма (дебет)' (GLAccount GLAccount, LegalEntity company, DATE dateFrom, DATE dateTo) = GROUP
        SUM
        sumDebit(GLAccount, company, DATE date) IF date >= dateFrom AND date <= dateTo;
balance 'Сальдо' (GLAccount GLAccount, LegalEntity company, DATE dateFrom, DATE dateTo) =
    sumDebit(GLAccount, company, dateFrom, dateTo) (-) sumCredit(GLAccount, company, dateFrom, dateTo);

@defineGLAccountSum ('(кредит)', credit, );
@defineGLAccountSum ('(дебет)', debit, );
@defineGLAccountBalance ( , );

//- Рекурсивно
recSumCredit 'Сумма (кредит)' (GLAccount GLAccount, LegalEntity company)=  GROUP SUM sumCredit(GLAccount child, company)
    IF isParent(child, GLAccount);
recSumDebit 'Сумма (дебет)' (GLAccount GLAccount, LegalEntity company)=  GROUP SUM sumDebit(GLAccount child, company)
    IF isParent(child, GLAccount);
recBalance 'Сальдо' (GLAccount GLAccount, LegalEntity company)=
    recSumDebit(GLAccount, company) (-) recSumCredit(GLAccount, company);

recSumCredit 'Сумма (кредит)' (GLAccount GLAccount, LegalEntity company, DATE date)=  GROUP SUM sumCredit(GLAccount child, company, date)
    IF isParent(child, GLAccount);
recSumDebit 'Сумма (дебет)' (GLAccount GLAccount, LegalEntity company, DATE date)=  GROUP SUM sumDebit(GLAccount child, company, date)
    IF isParent(child, GLAccount);
recBalance 'Сальдо' (GLAccount GLAccount, LegalEntity company, DATE date) =
    recSumDebit(GLAccount, company, date) (-) recSumCredit(GLAccount, company, date);

recSumCredit 'Сумма (кредит)' (GLAccount GLAccount, LegalEntity company, DATE dateFrom, DATE dateTo)=  GROUP SUM sumCredit(GLAccount child, company, dateFrom, dateTo)
    IF isParent(child, GLAccount);
recSumDebit 'Сумма (дебет)' (GLAccount GLAccount, LegalEntity company, DATE dateFrom, DATE dateTo)=  GROUP SUM sumDebit(GLAccount child, company, dateFrom, dateTo)
    IF isParent(child, GLAccount);
recBalance 'Сальдо' (GLAccount GLAccount, LegalEntity company, DATE dateFrom, DATE dateTo) =
    recSumDebit(GLAccount, company, dateFrom, dateTo) (-) recSumCredit(GLAccount, company, dateFrom, dateTo);


@defineGLAccountSum ('(кредит)', credit, rec);
@defineGLAccountSum ('(дебет)', debit, rec);
@defineGLAccountBalance ( , rec);

EXTEND FORM GLAccounts
    PROPERTIES(g,l,dFrom,dTo) READONLY BEFORE deletea recSumCredit, recSumDebit, recBalance

    OBJECTS gl = GeneralLedger
    PROPERTIES(gl) READONLY date, description, idDebit,
                   idCredit, sum

    FILTERS isPosted(gl),
            legalEntity(gl)==l,
            date(gl) >= dFrom, date(gl) <= dTo

    FILTERGROUP filter4
            FILTER 'По счету' debit(gl)==g OR credit(gl)==g 'F8' DEFAULT
            FILTER 'Только дебет' debit(gl)==g 'F7'
            FILTER 'Только кредит' credit(gl)==g 'F6'
;
DESIGN GLAccounts {
    wor{
        MOVE BOX(gl);
    }
}


FORM userGeneralLedger 'Проводка'
    OBJECTS g=UserGeneralLedger PANEL
    PROPERTIES(g) nameLegalEntity, nameGLDocument, description, date, time,
                  idDebit, idCredit, quantity, sum

    EVENTS
        ON OK prePost(g)

    EDIT UserGeneralLedger OBJECT g
;

DESIGN userGeneralLedger {
    BOX {
        size = (1024, 768);
        MOVE BOX(g) BEFORE TOOLBARBOX {
            MOVE GROUP(documentHeader,g) {
                lines = 1;
                type = CONTAINERH;
                MOVE PROPERTY(nameLegalEntity(g));
                MOVE PROPERTY(nameGLDocument(g));
                MOVE PROPERTY(description(g));
                MOVE PROPERTY(date(g));
                MOVE PROPERTY(time(g));
            }
            NEW headerRow11 {
                caption = 'Корреспонденция';
                type = CONTAINERH;
                MOVE PROPERTY(idDebit(g));
                MOVE PROPERTY(idCredit(g));
                MOVE PROPERTY(sum(g));
            }
        }
        PROPERTY(formOk()) {
            caption = 'Провести';
        }
    }
}
is(UserGeneralLedger generalLedger) = generalLedger IS UserGeneralLedger;

overCopy  ABSTRACT LIST ( GeneralLedger, GeneralLedger);
copy 'Копировать'(GeneralLedger generalLedger)  { 
	NEWSESSION {
	
	    NEW g = UserGeneralLedger {
	        legalEntity(g) <- legalEntity(generalLedger);
	        description(g) <- description(generalLedger);
	        sum(g) <- sum(generalLedger);
	        quantity(g) <- quantity(generalLedger);
	        credit(g) <- credit(generalLedger);
	        debit(g) <- debit(generalLedger);
	
	        EXEC overCopy(generalLedger, g);
	
	        SHOW userGeneralLedger OBJECTS g = g DOCKED;
	    }
	}
} TOOLBAR;

accessCompany(GeneralLedger gl) = accessCompany(currentUser(), legalEntity(gl)); 

FORM generalLedgers 'Проводки'
    OBJECTS dates = (dFrom = DATE, dTo = DATE) PANEL
    PROPERTIES valFrom = VALUE(dFrom), valTo = VALUE(dTo)
    
    OBJECTS l = LegalEntity PANEL 
    PROPERTIES(l) SELECTOR name
    FILTERS isCompany(l),
            accessCompany(currentUser(), l)    
        
    OBJECTS g = GeneralLedger
    PROPERTIES(g)  READONLY isPosted , dateTime, nameLegalEntity, nameGLDocument,
                   idOperation, description, numberGLDocument, seriesGLDocument, idDebit,
                   idCredit, quantity, sum
    ORDERS dateTime(g), nameGLDocument(g)
    FILTERS accessCompany(g)
//    todo : не работает поскольку для абстрактного свойства не задано ни одной реализации
//    PROPERTIES(g)  editGLDocumentGeneralLedger


    PROPERTIES (g) READONLY PANEL createdNameUser, createdTime, createdHostnameComputer,
                                        postedNameUser, postedTime, postedHostnameComputer

    PROPERTIES (g) NEWSESSION NEW[UserGeneralLedger], EDIT
    PROPERTIES (g) copy
    PROPERTIES     NEWSESSION deleteg=DELETE(g) SHOWIF is(g)

    FILTERS toDate(dateTime(g))<= dTo AND toDate(dateTime(g))>= dFrom
    LIST GeneralLedger OBJECT g
;
DESIGN generalLedgers {
    NEW tabTopContainer {
        tabbed = TRUE;
        NEW topContainer {
            caption = 'Создание';
            type = CONTAINERH;
            MOVE BOX(dates){
                caption = 'Период';
                PROPERTY(valFrom){
                    caption = 'Дата с';
                }
                PROPERTY(valTo){
                    caption = 'Дата по';
                }
            }
            MOVE BOX(l){
                PROPERTY(name(l)){
                    caption = '';
                }
            }
        }    
    }
    MOVE BOX(g);
    NEW documentHistory {
        caption = 'История';

        MOVE GROUP(created,g);
        MOVE GROUP(posted,g);
    }
    MOVE TOOLBARBOX;
}

NAVIGATOR {
    accountType {
        NEW generalLedgers;
    }
}

// ----------------------------------------------- Метакод по созданию проводок через агрегацию-------------------------------------------- //

//-- Для одного объекта
META defineGeneralLedgerAggregation (object, prop, companyProp, property, descriptionProp, debitV, creditV, accountType)
    @defineGeneralLedgerAggregation (object, prop, companyProp, property, date, time, descriptionProp, debitV, creditV, accountType);
END

META defineGeneralLedgerAggregation (object, idGL, companyProp, property, dateProp, timeProp, descriptionProp, debitV, creditV, accountType)
    @defineGeneralLedgerAggregation (object, idGL, ###idGL, companyProp, property, dateProp, timeProp, descriptionProp, debitV, creditV, accountType);
END

META defineGeneralLedgerAggregation (object, idGL, classGL, companyProp, property, dateProp, timeProp, descriptionProp, debitV, creditV, accountType)
    CLASS classGL###generalLedger : GeneralLedger;

    TABLE idGL###generalLedger (classGL###generalLedger);

    needTo###property (###object object)=  property(object) IF onlineGeneralLedger();
    idGL###generalLedger = AGGR ###idGL###generalLedger WHERE needTo###property(###object object) MATERIALIZED INDEXED;

    GLDocument(classGL##GeneralLedger generalLedger) += object(generalLedger);
    legalEntity(classGL##GeneralLedger generalLedger) += companyProp(object(generalLedger));
    isPosted(classGL##GeneralLedger generalLedger) += isPosted(object(generalLedger));
    description(classGL##GeneralLedger generalLedger) += descriptionProp(object(generalLedger));
    date(classGL##GeneralLedger generalLedger) += dateProp(object(generalLedger));
    time(classGL##GeneralLedger generalLedger) += timeProp(object(generalLedger));
    debit(classGL##GeneralLedger generalLedger) += GLAccountIdTypeIdGLAccount(accountType, debitV) IF generalLedger IS classGL###generalLedger;
    credit(classGL##GeneralLedger generalLedger) += GLAccountIdTypeIdGLAccount(accountType, creditV) IF generalLedger IS classGL###generalLedger;
    sum(classGL##GeneralLedger generalLedger) += property(object(generalLedger));
END

//-- С операцией
META defineGeneralLedgerAggregationOperation(object, idGL, companyProp, property, descriptionProp, debitV, creditV, accountType, keyProp)
    idGL###property(###object object) = property(object) IF idOperation(object) == keyProp;
    @defineGeneralLedgerAggregation (object, idGL, companyProp, idGL###property, descriptionProp, debitV, creditV, accountType);
END

// ----------------------------------- Для двух объектов --------------------------------------- //

META defineGeneralLedgerDoubleAggregation (object1, object2, idGL, companyProp, property, descriptionProp, debitV, creditV, accountType)   //  object1 - документ
    @defineGeneralLedgerDoubleAggregation (object1, object2, idGL, companyProp, property, date, time, descriptionProp, debitV, creditV, accountType);
END

META defineGeneralLedgerDoubleAggregation (object1, object2, idGL, companyProp, property, dateProp, timeProp, descriptionProp, debitV, creditV, accountType)
    @defineGeneralLedgerDoubleAggregation (object1, object2, idGL, ###idGL, companyProp, property, dateProp, timeProp, descriptionProp, debitV, creditV, accountType);
END

META defineGeneralLedgerDoubleAggregation (object1, object2, idGL, classGL, companyProp, property, dateProp, timeProp, descriptionProp, debitV, creditV, accountType)

    CLASS classGL###generalLedger : GeneralLedger;

    TABLE idGL###generalLedger (classGL###generalLedger);

    needTo##property (###object1 object1, ###object2 object2) = property(object1, object2) IF onlineGeneralLedger();
    idGL###generalLedger = AGGR ###idGL###generalLedger WHERE needTo###property(###object1 object1, ###object2 object2) MATERIALIZED INDEXED;

    GLDocument(idGL##GeneralLedger generalLedger) += object1(generalLedger);
    legalEntity(idGL##GeneralLedger generalLedger) += companyProp(object1(generalLedger));
    isPosted(idGL##GeneralLedger generalLedger) += isPosted(object1(generalLedger));
    descriptionProp(idGL##GeneralLedger generalLedger) += descriptionProp(object1(generalLedger), object2(generalLedger));
    date(idGL##GeneralLedger generalLedger) += dateProp(object1(generalLedger));
    time(idGL##GeneralLedger generalLedger) += timeProp(object1(generalLedger));
    debit(idGL##GeneralLedger generalLedger) += GLAccountIdTypeIdGLAccount(accountType, debitV) IF generalLedger IS classGL###generalLedger;
    credit(idGL##GeneralLedger generalLedger) += GLAccountIdTypeIdGLAccount(accountType, creditV) IF generalLedger IS classGL###generalLedger;
    sum(idGL##GeneralLedger generalLedger) += property(object1(generalLedger), object2(generalLedger));
END

//-- С операцией
META defineGeneralLedgerAggregationOperation(object1, object2, idGL, companyProp, property, descriptionProp, debitV, creditV, accountType, keyProp)
    idGL###property(###object1 object1, ###object2 object2) = property(object1, object2) IF idOperation(object1) == keyProp;
    @defineGeneralLedgerDoubleAggregation(object1, object2, idGL, companyProp, idGL###property, descriptionProp, debitV, creditV, accountType);
END


// ----------------------------------- Стандартные данные ----------------------------------- //

META defineLoadDefaultOperationPrefix (NSR, iname, isid, prefix)
    loadDefault###prefix##Operation 'Добавить значение операций'(ISTRING[100] iname, ISTRING[100] isid)  { 
        NEW t = NSR.Operation {
            name(t) <- iname;
            id (t) <- isid;
        }
    }
END
META defineLoadDefaultOperation (NSR, iname, isid)
    @defineLoadDefaultOperationPrefix (NSR, iname, isid, );
END


//loadDefaultOperations 'Загрузить стандартные операции для проводок' ()  ABSTRACT LIST ( )  IN loadDefault;
//
//@implementLoadDefaultData(loadDefaultOperations){
//    loadDefaultData () + {  loadDefaultOperations(); }
//    EXTEND FORM defaultData
//        PROPERTIES() loadDefaultOperations
//    ;
//    DESIGN defaultData {
//        commons {
//            MOVE PROPERTY(loadDefaultOperations());
//        }
//    }
//};

//

META extendFormGeneralLedgerDocument (form, filter, container)
    EXTEND FORM form
        OBJECTS g=GeneralLedger
        PROPERTIES(g) READONLY description, idDebit, idDimensionsDebit, dimensionsDebit, 
                                idCredit, idDimensionsCredit, dimensionsCredit, quantity, sum
    
        FILTERS GLDocument(g) == filter
    ;
    
    DESIGN form {
        container {
            MOVE BOX(g) {
                fill = 1;
                caption = 'Проводки';
            };
        }
    }
END
META extendFormGeneralLedgerDocument (form, filter)
    @extendFormGeneralLedgerDocument (form, filter, documentDetail);
END

// ----------------------------------------------- Метакод по созданию проводок через ACTION -------------------------------------------- //

createGeneralLedgerFromTo   ABSTRACT LIST ( LegalEntity, DATE, DATE); 

onStarted()+ { 
    FOR isCompany(LegalEntity l) DO {
        unlock(l);
    }    
}

createGeneralLedgerCustom = ABSTRACT BOOLEAN ();
createGeneralLedgerCustom ABSTRACT (LegalEntity, DATE, DATE);
createGeneralLedger 'Создать проводки' (LegalEntity legalEntity, DATE dFrom, DATE dTo)  { 
    
    NEWSESSION {
        lock(legalEntity);
        IF lockResult() THEN {
            TRY {
                IF NOT createGeneralLedgerCustom() THEN {
                    DELETE UserGeneralLedger ud WHERE ud IS UserGeneralLedger AND date(ud) >= dFrom AND date(ud) <= dTo AND legalEntity(ud) == legalEntity;
                    APPLY;
                    createGeneralLedgerFromTo(legalEntity, dFrom, dTo);
                    APPLY;
                } ELSE {
                    createGeneralLedgerCustom(legalEntity, dFrom, dTo);   
                }
            } FINALLY {
                unlock(legalEntity);
            }
        } ELSE {
            MESSAGE 'Уже выполняется создание проводок для компании '+name(legalEntity)+'. Подождите...';    
        }        
    }
} CONFIRM;

createGeneralLedger(DATE dFrom, DATE dTo)  { 
    FOR isCompany(LegalEntity l) DO 
        createGeneralLedger(l, dFrom, dTo);
}

EXTEND FORM generalLedgers
    PROPERTIES(l, dFrom, dTo) createGeneralLedger 
;

createGeneralLedger 'Создать проводки за отчетный период'(LegalEntity l)  { 
    createGeneralLedger(l, dateReportingGeneralLedger(), maxDateGeneralLedger());
} IN generalLedger;

EXTEND FORM options 
    PROPERTIES(lgl) createGeneralLedger
;

DESIGN options {
    generalLedger {
        MOVE PROPERTY(createGeneralLedger(lgl));
    }
}

createGeneralLedger 'Создать проводки за отчетный период'()  { 
    FOR isCompany(LegalEntity l) DO 
        createGeneralLedger(l, dateReportingGeneralLedger(), maxDateGeneralLedger());
} IN generalLedger;

countDaysClearGeneralLedger 'За сколько дней хранить пользовательские проводки' = DATA INTEGER (); 

EXTEND FORM options PROPERTIES countDaysClearGeneralLedger();
DESIGN options { log { MOVE PROPERTY(countDaysClearGeneralLedger());} } 

clearApplicationLog () + { 
	NEWSESSION {
	    IF countDaysClearGeneralLedger() THEN {

	        DELETE UserGeneralLedger t WHERE  t IS UserGeneralLedger AND  date(t)<= subtract(currentDate(), countDaysClearGeneralLedger());
	        APPLY;
	    }
	}
}

//-- Для одного объекта

META defineGeneralLedger (object, idGL, companyProp, property, dateProp, timeProp, descriptionProp, debitV, creditV, accountType)
    overCreate###idGL###object  ABSTRACT LIST ( UserGeneralLedger);  

    createUserGeneralLedgerALL###idGL###object##FromTo 'Создать проводки за период'(LegalEntity l, DATE dateProp, DATE dateProp##To)  {     
        FOR property(###object object) AND dateProp(object) >= (date AS DATE) AND dateProp(object) <= (dateTo AS DATE) AND companyProp(object) == l NEW u = UserGeneralLedger DO  {
            GLDocument(u) <- object;
            legalEntity(u) <- companyProp(object);
            isPosted(u) <- isPosted(object);
            description(u) <- descriptionProp(object);
            dateProp(u) <- dateProp(object);
            timeProp(u) <- timeProp(object);
            debit(u) <- GLAccountIdTypeIdGLAccount(accountType, debitV);
            credit(u) <- GLAccountIdTypeIdGLAccount(accountType, creditV);
            sum(u) <- NUMERIC[18,4](property(object));   
            
            EXEC overCreate###idGL###object(u); 
        }    
    }
    createGeneralLedgerFromTo(LegalEntity l, DATE date,DATE dateTo) + {  createUserGeneralLedgerALL###idGL###object##FromTo(l, date,dateTo); }
END
// дата 
META defineGeneralLedger (object, idGL, companyProp, property, descriptionProp, debitV, creditV, accountType)
    @defineGeneralLedger (object, idGL, companyProp, property, date, time, descriptionProp, debitV, creditV, accountType);
END


//-- С операцией
META defineGeneralLedgerOperation(object, idGL, companyProp, property, dateProp, timeProp, descriptionProp, debitV, creditV, accountType, keyProp)
    idGL###property(###object object) = property(object) IF idOperation(object) == keyProp;
    @defineGeneralLedger (object, idGL, companyProp, idGL###property, dateProp, timeProp, descriptionProp, debitV, creditV, accountType);            
END
// дата
META defineGeneralLedgerOperation(object, idGL, companyProp, property, descriptionProp, debitV, creditV, accountType, keyProp)
    @defineGeneralLedgerOperation(object, idGL, companyProp, property, date, time, descriptionProp, debitV, creditV, accountType, keyProp);
END  

//-- 2 операции
META defineGeneralLedgerOperation(object, idGL, companyProp, property, dateProp, timeProp, descriptionProp, debitV, creditV, accountType, keyProp, key1Prop)
    idGL###property(###object object) = property(object) IF idOperation(object) == keyProp OR idOperation(object) == key1Prop;
    @defineGeneralLedger (object, idGL, companyProp, idGL###property, dateProp, timeProp, descriptionProp, debitV, creditV, accountType);            
END
// дата
META defineGeneralLedgerOperation(object, idGL, companyProp, property, descriptionProp, debitV, creditV, accountType, keyProp, key1Prop)
    @defineGeneralLedgerOperation(object, idGL, companyProp, property, date, time, descriptionProp, debitV, creditV, accountType, keyProp, key1Prop);
END  
 
  
// ----------------------------------- Для двух объектов (object1 - документ) --------------------------------------- //

META defineGeneralLedgerDouble (object1, object2, idGL, companyProp, property, dateProp, timeProp, descriptionProp, debitV, creditV, accountType)

    overCreate##idGL###object1###object2  ABSTRACT LIST ( UserGeneralLedger);  
    overCreate##idGL###object1###object2  ABSTRACT LIST ( UserGeneralLedger, Dimension);  
    
    createUserGeneralLedgerALL##idGL###object1###object2##FromTo 'Создать проводки'(LegalEntity l, DATE dateProp,DATE dateProp##To)  {     
        FOR property(###object1 object1, ###object2 object2) AND dateProp(object1) >= (date AS DATE) AND dateProp(object1) <= (dateTo AS DATE) AND companyProp(object1) == l NEW u = UserGeneralLedger DO  {
            GLDocument(u) <- object1;
            legalEntity(u) <- companyProp(object1);
            isPosted(u) <- isPosted(object1);
            descriptionProp(u) <- descriptionProp(object1, object2);
            dateProp(u) <- dateProp(object1);
            timeProp(u) <- timeProp(object1);
            debit(u) <- GLAccountIdTypeIdGLAccount(accountType, debitV);
            credit(u) <- GLAccountIdTypeIdGLAccount(accountType, creditV);
            sum(u) <- NUMERIC[18,4](property(object1, object2));   
            
            overCreate##idGL###object1###object2(u,object2);
            overCreate##idGL###object1###object2(u); 
        }    
    }
    createGeneralLedgerFromTo(LegalEntity l, DATE date,DATE dateTo) + {  createUserGeneralLedgerALL##idGL###object1###object2##FromTo(l, date, dateTo); }
END
// дата 
META defineGeneralLedgerDouble (object1, object2, idGL, companyProp, property, descriptionProp, debitV, creditV, accountType)
    @defineGeneralLedgerDouble (object1, object2, idGL, companyProp, property, date, time, descriptionProp, debitV, creditV, accountType);
END

//-- С операцией
META defineGeneralLedgerDoubleOperation(object1, object2, idGL, companyProp, property, dateProp, timeProp, descriptionProp, debitV, creditV, accountType, keyProp)
    idGL###property(###object1 object1, ###object2 object2) = property(object1, object2) IF id###operation(object1) == keyProp;
    @defineGeneralLedgerDouble (object1, object2, idGL, companyProp, idGL###property, dateProp, timeProp, descriptionProp, debitV, creditV, accountType);
END  
// дата 
META defineGeneralLedgerDoubleOperation(object1, object2, idGL, companyProp, property, descriptionProp, debitV, creditV, accountType, keyProp)
    @defineGeneralLedgerDoubleOperation(object1, object2, idGL, companyProp, property, date, time, descriptionProp, debitV, creditV, accountType, keyProp);
END

//-- 2 операции
META defineGeneralLedgerDoubleOperation(object1, object2, idGL, companyProp, property, dateProp, timeProp, descriptionProp, debitV, creditV, accountType, keyProp, key1Prop)
    idGL###property(###object1 object1, ###object2 object2) = property(object1, object2) IF id###operation(object1) == keyProp OR id###operation(object1) == key1Prop;
    @defineGeneralLedgerDouble (object1, object2, idGL, companyProp, idGL###property, dateProp, timeProp, descriptionProp, debitV, creditV, accountType);
END  
// дата 
META defineGeneralLedgerDoubleOperation(object1, object2, idGL, companyProp, property, descriptionProp, debitV, creditV, accountType, keyProp, key1Prop)
    @defineGeneralLedgerDoubleOperation(object1, object2, idGL, companyProp, property, date, time, descriptionProp, debitV, creditV, accountType, keyProp, key1Prop);
END