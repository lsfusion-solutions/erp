MODULE GLAccountType;

REQUIRE System,
        Utils,
        Document,
        LegalEntity,
        Historizable,
        Hierarchy,
        Currency,
        Finance;

PRIORITY Utils;

//------------------------- План счетов -------------------------------//

CLASS GLAccountType 'План счетов';
TABLE GLAccountType(GLAccountType);

name 'Наименование' = DATA ISTRING[150](GLAccountType);

currency = DATA Currency (GLAccountType);
nameCurrency 'Валюта' (GLAccountType GLAccountType)= name(currency(GLAccountType));
id 'Идентификатор' = DATA STRING[20] (GLAccountType) CHARWIDTH 15;

GLAccountTypeIdGLAccountType (string1) = GROUP AGGR GLAccountType GLAccountType WHERE GLAccountType IS GLAccountType
    BY id(GLAccountType);

FORM GLAccountType 'План счетов'
    OBJECTS g = GLAccountType PANEL
    PROPERTIES(g) name, id, nameCurrency
    EDIT GLAccountType OBJECT g
;

FORM GLAccountTypes 'Планы счетов'
    OBJECTS g = GLAccountType
    PROPERTIES(g) READONLY name, id, nameCurrency
    PROPERTIES(g) NEWSESSION NEW, EDIT, DELETE 
    LIST GLAccountType OBJECT g
;

//-------------------------- Счета -------------------------//

CLASS GLAccount 'Счет';
TABLE GLAccount(GLAccount);

name 'Наименование' = DATA STRING[255] (GLAccount) CHARWIDTH 40;
GLAccountType = DATA GLAccountType (GLAccount) AUTOSET;
nameGLAccountType 'План счетов' (GLAccount GLAccount)= name(GLAccountType(GLAccount));
nameCurrency 'Валюта' (GLAccount GLAccount) = nameCurrency(GLAccountType(GLAccount));

id 'Идентификатор' = DATA STRING[20] (GLAccount) CHARWIDTH 5;

TABLE GLAccountGLAccount(GLAccount, GLAccount);
@defineHierarchy(GLAccount);

canonicalId 'Канонический код' (GLAccount GLAccount) = STRING[255](
                           (GROUP CONCAT id(GLAccount parent), ' / ' ORDER DESC level(GLAccount, parent)))
                           CHARWIDTH 50 MATERIALIZED;
canonicalNames 'Каноническое имя' (GLAccount GLAccount) = STRING[255](
                           (GROUP CONCAT name(GLAccount parent), ' / ' ORDER DESC level(GLAccount, parent)))
                           CHARWIDTH 50 MATERIALIZED;

nameAccountParent 'Родительский объект' (GLAccount GLAccount)= name(parent(GLAccount));
idGLAccountParent 'Родительский объект' (GLAccount GLAccount)= id(parent(GLAccount));

CONSTRAINT GLAccountType(parent(GLAccount GLAccount)) != GLAccountType(GLAccount)
           CHECKED BY parent[GLAccount] MESSAGE 'План счетов родительской объекта должна совпадать с планом счетов объекта';

GLAccountIdTypeIdGLAccount (string1, string2) = GROUP AGGR GLAccount GLAccount WHERE GLAccount IS GLAccount
    BY id(GLAccountType(GLAccount)), id(GLAccount);

FORM GLAccount 'Счет'
    OBJECTS g=GLAccount PANEL
    PROPERTIES(g) nameGLAccountType, name, id, idGLAccountParent
    EDIT GLAccount OBJECT g
;

FORM GLAccounts 'Счета'
    OBJECTS t = GLAccountType PANEL
    PROPERTIES(t) SELECTOR name

    OBJECTS dates = (dFrom = DATE, dTo = DATE) PANEL
    PROPERTIES valFrom = VALUE(dFrom), valTo = VALUE(dTo)

    OBJECTS l = LegalEntity PANEL
    PROPERTIES(l) SELECTOR name

    TREE treeGroups g=GLAccount PARENT parent(g)
    PROPERTIES(g) READONLY name, id
    PROPERTIES(g) READONLY canonicalId
    PROPERTIES(g) NEWSESSION NEW, EDIT, deletea=DELETE 
    FILTERS GLAccountType(g) == t
    ORDERS canonicalId(g)
;

DESIGN GLAccounts {
    BOX {
        NEW primary {
            fill = 1;
            NEW row {
                fill = 1;
                NEW row1 {
                    horizontal = TRUE;
                    MOVE BOX(t);
                    MOVE BOX(l);
                }
                MOVE BOX(dates) {
                    horizontal = TRUE;
                }
                MOVE BOX(TREE treeGroups){ caption = 'Счет';}
            }
            NEW wor {
                tabbed = TRUE;
                fill = 1;
            }
        }
        MOVE TOOLBARBOX;
    }
}

FORM GLAccountDialog 'Счета'
    OBJECTS t = GLAccountType PANEL
    PROPERTIES(t) SELECTOR name

    TREE treeGroups g=GLAccount PARENT parent(g)
    PROPERTIES(g) READONLY name, id
    PROPERTIES(g) READONLY canonicalId
    PROPERTIES(g) NEWSESSION NEW, EDIT, deletea=DELETE 
    FILTERS GLAccountType(g) == t
    ORDERS canonicalId(g)
    LIST GLAccount OBJECT g
;

overCopy  ABSTRACT LIST ( GLAccount, GLAccount);
copy 'Копировать'(GLAccountType GLAccountType)  { 
	NEWSESSION {
	    LOCAL mapping = GLAccount (GLAccount);
	
	    NEW t = GLAccountType {
	        currency(t) <- currency(GLAccountType);
	
	        FOR GLAccountType(GLAccount GLAccount) == GLAccountType DO {
	            NEW d=GLAccount {
	                GLAccountType(d) <- t;
	                name(d) <- name(GLAccount);
	                id(d) <- id(GLAccount);
	                parent(d) <- mapping(parent(GLAccount));
	                mapping(GLAccount) <- d;
	                EXEC overCopy(GLAccount, d);
	            }
	        }
	
	        SHOW GLAccountType OBJECTS g = t DOCKED;
	    }
	}
} TOOLBAR;

EXTEND FORM GLAccountTypes
    PROPERTIES(g) copy
;

NAVIGATOR {
    financeNavigator {
        NEW FOLDER accountType 'Бухгалтерский учет' {
            NEW GLAccountTypes;
            NEW GLAccounts;
        }
    }
}

// ----------------------------------- Стандартные данные ----------------------------------- //

loadDefaultGLAccountType 'Добавить значение плана счетов'(ISTRING[150] iname, STRING[20] isid, BPSTRING[3] isidCurrency)  { 
    NEW t = GLAccountType {
        name(t) <- iname;
        id (t) <- isid;
        currency(t) <- currencyShortName(isidCurrency);
    }
}
loadDefaultGLAccount 'Добавить значение счета'(STRING[255] iname, STRING[20] isid, STRING[20] sidType, STRING[20] sidParent)  { 
    NEW g = GLAccount {
        name(g) <- iname;
        id(g) <- isid;
        GLAccountType(g) <- GLAccountTypeIdGLAccountType(sidType);
        parent (g) <- GLAccountIdTypeIdGLAccount(sidType, sidParent);
    }
}
loadDefaultGLAccounts 'Загрузить стандартный план счетов и счета' ()  ABSTRACT LIST ( )  IN loadDefault;

@implementLoadDefaultData(loadDefaultGLAccounts);