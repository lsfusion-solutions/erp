MODULE CreditNote;

REQUIRE Shipment, Invoice, Item;

//----------------------------------------------- Акт расхождения ---------------------------------------------------//

DESIGN options {
    pane {
        NEW creditNotes  {
            type = CONTAINERV;
            caption = 'Акт расхождения';            
        }
    }
}

META defineCreditNote(sign, legalEntityProp, stockProp, supplierFilter, customerFilter, NS)//contact, contactCaption)

    CLASS ABSTRACT CreditNote 'Акт расхождения'###sign ;
    CLASS ABSTRACT CreditNoteDetail 'Строка акта расхождения'###sign ;

    CLASS UserCreditNote 'Акт расхождения (польз.)'###sign : CreditNote;
    CLASS UserCreditNoteDetail 'Строка акта расхождения (польз.)'###sign : CreditNoteDetail;

    GROUP creditNote 'Информация об акте расхождения' : base;
    
    @defineExternalizable(userCreditNote, STRING[100]);
    @defineExternalizable(userCreditNoteDetail, STRING[100]);

    @defineDocumentInterface(creditNote);
    @deriveDocumentHeaderTimePrefix(UserCreditNote, );

    @defineDocumentInterfaceNumber(creditNote, BPSTRING[2]);

    @defineNumeratedDefault(UserCreditNote, 'Акты расхождений'###sign, 'АР', NS);

    @defineDocumentInterfaceLegalEntity (creditNote, supplier, 'Поставщик');
    @defineDocumentInterfaceLegalEntity (creditNote, customer, 'Покупатель');

    @defineDocumentInterfaceDataStock(creditNote, stock, 'Склад поставщика', supplier);
    @defineDocumentInterfaceDataStock(creditNote, stock, 'Склад покупателя', customer);

    CONSTRAINT supplier(UserCreditNote userCreditNote) AND supplierStock(userCreditNote) AND NOT
               in(supplier(userCreditNote), supplierStock(userCreditNote))
        CHECKED BY supplierStock[UserCreditNote]
            MESSAGE 'Поставщик и склад поставщика для акта расхождений не имеют связи';
    CONSTRAINT customer(UserCreditNote userCreditNote) AND customerStock(userCreditNote) AND NOT
               in(customer(userCreditNote), customerStock(userCreditNote))
        CHECKED BY customerStock[UserCreditNote]
            MESSAGE 'Покупатель и склад покупателя для акта расхождений не имеют связи';

    @defineDocumentInterfacePosted(creditNote);
    @defineDocumentInterfaceClosed(creditNote);
    @defineDocumentClosedConstraint(UserCreditNote);
    @defineDocumentInterfaceDescription(creditNote, 'Акт расхождения'###sign);

    @defineDocumentInterfaceCurrency(creditNote);
    @deriveDocumentCurrency(userCreditNote, stockProp###stock);

    @defineDocumentInterfaceContract(CreditNote, contractSku, supplier, customer,
                                     'Организация (поставщик) договора акта расхождений не соответствует организация (поставщик) акта расхождений',
                                     'Организация (покупатель) договора акта расхождений не соответствует организация (покупатель) акта расхождений',
                                     'акт расхождения'###sign, NS);

    @defineDocumentInterfaceDetailSku(creditNote, sku);
    INDEX sku(CreditNoteDetail d), customerStock(d);

    @defineDocumentInterfaceDetailQuantity(creditNote);

    price 'Цена' = ABSTRACT NUMERIC[16,4] (CreditNoteDetail) MATERIALIZED;
    price 'Цена' = DATA NUMERIC[16,4] (UserCreditNoteDetail);
    price (UserCreditNoteDetail creditNoteDetail) += price(creditNoteDetail);

    @defineDocumentInterfaceDetailDataSum(creditNote);
    @deriveDocumentDetailSum(userCreditNote, quantity);

    @defineDocumentInterfaceDetailVAT(creditNote, country###stockProp###stock);
    invoicePrice 'Цена с НДС' = ABSTRACT NUMERIC[16,4] (CreditNoteDetail) MATERIALIZED;
    invoicePrice 'Цена с НДС' = DATA NUMERIC[16,4] (UserCreditNoteDetail);
    invoicePrice (UserCreditNoteDetail creditNoteDetail) += invoicePrice(creditNoteDetail);
    
    //  derive см. ниже в "Связь акта и накладной"
    @defineDocumentInterfaceDetailVATDataSumCustom(creditNoteDetail, invoice);

    @defineDocumentInterfaceHeaderQuantity(creditNote);
    @defineDocumentHeaderSkuQuantity(creditNote, sku);
    @defineDocumentInterfaceHeaderSum(creditNote);
    @defineDocumentInterfaceHeaderVATSum(creditNote, creditNoteDetail, invoice);
    
    @defineDocumentInterfaceHeaderItemSum (creditNote, VAT, VAT); //-- сумма НДС поставщика (с разбивкой по таре, товару...)
    @defineDocumentInterfaceHeaderItemSum (creditNote, , ); //-- сумма поставщика (с разбивкой по таре, товару...)
    @defineDocumentInterfaceHeaderItemSum(creditNote, invoice, invoice); //-- сумма поставщика с НДС (с разбивкой по таре, товару...)

    @defineDocumentInterfaceHeaderItemSumDouble (creditNote, range, VAT, VAT, , VAT); //-- сумма НДС поставщика (с разбивкой по таре, товару...) по документу и по шкале
    @defineDocumentInterfaceHeaderItemSumDouble (creditNote, range, , , , VAT);  //сумма без НДС поставщика (с разбивкой по таре, товару...) по документу и по шкале
    @defineDocumentInterfaceHeaderItemSumDouble (creditNote, range, invoice, invoice, , VAT);  //сумма с НДС (с разбивкой по таре, товару...) по документу и по шкале

    @defineAddDetailDialogSkuStock(userCreditNote, sku, stockProp###stock, dialogSku);
    @defineAddDetailDialogBarcode(userCreditNote, sku);
        
    @defineMovementSku(creditNoteDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение товара
    @defineMovementSku(userCreditNoteDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение товара
    @defineBalancesSku(creditNoteDetail); //-- показываем по нажатию правой клавиши остатки товара
    @defineBalancesSku(userCreditNoteDetail); //-- показываем по нажатию правой клавиши остатки товара     
    @defineBarcodeSku(creditNoteDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
    @defineBarcodeSku(userCreditNoteDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
    @defineInfoSku(creditNoteDetail); //-- показываем по нажатию правой клавиши информацию по товару
    @defineInfoSku(userCreditNoteDetail); //-- показываем по нажатию правой клавиши информацию по товару
    @defineDocumentDialogSupplierCustomerStock(userCreditNote, supplierFilter, customerFilter);
    @defineDocumentDialogSupplierCustomerLegalEntity(userCreditNote, supplierFilter, customerFilter);       
    
    @defineDocumentInterfaceDetailQuantityCustomPrefix (creditNoteDetail, document, ' по накладной');
    @defineDocumentInterfaceDetailDataSumPrefix(creditNote, document, ' по накладной');
    @defineDocumentInterfaceDetailDataSumPrefix(creditNote, documentVAT, ' НДС по накладной');
    @defineDocumentInterfaceDetailDataSumPrefix(creditNote, documentInvoice, ' с НДС по накладной');    
    
    @defineDocumentInterfaceDetailQuantityCustomPrefix (creditNoteDetail, shipment, ' по факту');
    @defineDocumentInterfaceDetailDataSumPrefix(creditNote, shipment, ' по факту');
    @defineDocumentInterfaceDetailDataSumPrefix(creditNote, shipmentVAT, ' НДС по факту');
    @defineDocumentInterfaceDetailDataSumPrefix(creditNote, shipmentInvoice, ' с НДС по факту');    
// --------------------------- Формы --------------------------------- //
    
    background = ABSTRACT CASE COLOR (CreditNoteDetail);
    
    FORM userCreditNote 'Акт расхождений'###sign
        OBJECTS c = UserCreditNote PANEL
        PROPERTIES (c) isPosted[CreditNote], nameNumerator, number, series, date, time,
                       nameSupplier ON CHANGE changeSupplier###supplierFilter(c), 
                       nameCustomer ON CHANGE changeCustomer###customerFilter(c), 
                       nameSupplierStock ON CHANGE changeSupplierStock###supplierFilter(c), 
                       nameCustomerStock ON CHANGE changeCustomerStock###customerFilter(c),
                       nameCurrency, seriesNumberContractSku, note,
                       countUserCreditNoteDetail, quantityUserCreditNoteDetail, sumUserCreditNoteDetail,
                       VATSumUserCreditNoteDetail, invoiceSumUserCreditNoteDetail

        OBJECTS d = UserCreditNoteDetail
        PROPERTIES (d) BACKGROUND background(d) index, idBarcodeSku, idSku SHOWIF showIDs(), nameSku, shortNameUOMSku,
                       quantity, price, sum,
                       numberVAT, valueVAT, invoicePrice, VATSum, invoiceSum,
                       name###stockProp##Stock, NEW, deletecd=DELETE GRID

        PROPERTIES(c) DRAW d addDetailDialogSkuStockUserCreditNoteDetail,
                               addDetailInputBarcodeUserCreditNoteDetail, deleteUserCreditNoteDetail
        FILTERS userCreditNote(d) == c

        EVENTS
            ON OK prePost(c)

        EDIT UserCreditNote OBJECT c
    ;

    DESIGN userCreditNote {
        BOX {
            size = (1024, 768);
            NEW mainTabbed {
                type = TABBED;
                fill = 1;
                NEW documentBox {
                    type = CONTAINERV;
                    fill = 1;
                    caption = 'Акт расхождений';
                    NEW headerBox {
                        type = CONTAINERH;
        
                        NEW headerRow1 {
        
                            MOVE GROUP(documentHeader,c) {
                                columns = 1;
                                type = CONTAINERV;
                                NEW first {
                                    type = CONTAINERH;
                                    MOVE PROPERTY(isPosted(c));
                                }
                                NEW second { 
                                    type = CONTAINERH;
                                    MOVE PROPERTY(nameNumerator(c));
                                    MOVE PROPERTY(number(c));
                                    MOVE PROPERTY(series(c));
                                    MOVE PROPERTY(date(c));
                                    MOVE PROPERTY(time(c));
                                }                    
                            }
                            NEW headerRow11 {
                                type = CONTAINERH;
                                NEW headerRow111 {
                                    caption = 'Поставщик';
                                    type = CONTAINERH;
                                    MOVE PROPERTY(nameSupplier(c));
                                    MOVE PROPERTY(nameSupplierStock(c));
        
                                }
                                NEW headerRow112 {
                                    caption = 'Покупатель';
                                    type = CONTAINERH;
                                    MOVE PROPERTY(nameCustomer(c));
                                    MOVE PROPERTY(nameCustomerStock(c));
                                }
        
                            }
                            MOVE GROUP(documentPrm,c);
                            NEW headerRow12 {
                                type = CONTAINERH;
                            }
                        }
        
                        MOVE GROUP(documentSum,c) {
                            columns = 1;
                        }
                    }
                
                    NEW specificationBox {
                        fill = 1;
                        type = TABBED;
                        MOVE BOX(d) {
                            caption = 'Спецификация';
                        }
                    }
                }
            }
            MOVE TOOLBARBOX;
            PROPERTY(formOk()) {
                caption = 'Провести';
            }
            PROPERTY(sumUserCreditNoteDetail(c)) { charWidth = 13;}
            PROPERTY(VATSumUserCreditNoteDetail(c)) { charWidth = 13;}  
            PROPERTY(invoiceSumUserCreditNoteDetail(c)) { charWidth = 13;}            
        }
    }

    @defineDocumentSkuStockPriceListTypeSystemLedger(userCreditNote, stockProp);
    @extendFormDocumentSkuStock(userCreditNote, userCreditNote, c, legalEntityProp, stockProp);
    
    isUserOpened(UserCreditNote c)=  isOpened[CreditNote](c) AND is(c);
        
    FORM creditNotes 'Акты расхождений' 
        OBJECTS c = CreditNote LAST
        PROPERTIES (c) READONLYIF isReadonly() isClosed, isPosted, number, series, date, time,
                       nameSupplier, nameSupplierStock, nameCustomer, nameCustomerStock,
                       nameCurrency, seriesNumberContractSku, isCommission
        PROPERTIES (c) READONLY countCreditNoteDetail, quantityCreditNoteDetail, sumCreditNoteDetail,
                       VATSumCreditNoteDetail, invoiceSumCreditNoteDetail
        PROPERTIES (c) READONLYIF isReadonly() note
        PROPERTIES (c) READONLY PANEL createdNameUser, createdTime, createdHostnameComputer, 
                                            postedNameUser, postedTime, postedHostnameComputer                        

        PROPERTIES (c) NEWSESSION NEW[UserCreditNote], editC = EDIT SHOWIF isOpened(c), deletec=DELETE SHOWIF isUserOpened(c)
        PROPERTIES (c) close[UserCreditNote] SHOWIF isOpened[UserCreditNote](c), open SHOWIF isClosed[UserCreditNote](c)

        OBJECTS d = CreditNoteDetail
        PROPERTIES (d) READONLY BACKGROUND background(d) index, idBarcodeSku, idSku SHOWIF showIDs(), nameSku, shortNameUOMSku,
                                quantity, price, sum, numberVAT, valueVAT,
                                 VATSum, invoiceSum, name###stockProp##Stock
        FILTERS creditNote(d) == c

        LIST CreditNote OBJECT c
    ;

    DESIGN creditNotes 'Акты расхождений'###sign {
        NEW documentContainer BEFORE TOOLBARBOX {
            type = SPLITV;
            fill = 1;

            MOVE BOX(c) { flex = 2.0; }

            NEW documentDetail {
                fill = 1;
                type = TABBED;

                MOVE BOX(d) {
                    fill = 1;
                    caption = 'Спецификация';
                }
                NEW documentHistory {
                    caption = 'История';

                    MOVE GROUP(created,c);
                    MOVE GROUP(posted,c);
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                        type = CONTAINERV;
                    }
                }
                NEW actionContainer {
                    caption = 'Действия';
                    type = CONTAINERH;
                    NEW createdContainer {
                        caption = 'Создание на основе';
                        type = CONTAINERV;
                    }
                    NEW machineryContainer {
                        caption = 'Загрузка';
                        type = CONTAINERV;
                    }
                }                
            }
        }
    }
    @extendFormEditable(creditNotes);
    @defineFilterIsOpened (creditNote, creditNotes, c); 
    edit(UserCreditNoteDetail d) + {  DIALOG userCreditNote OBJECTS c = userCreditNote(d), d = d DOCKED; }
    
    show 'Просмотреть'  ABSTRACT LIST ( CreditNoteDetail) TOOLBAR;
    show(UserCreditNoteDetail d)  { 
        NEWSESSION {
            SHOW userCreditNote OBJECTS c = userCreditNote(d), d = d DOCKED READONLY;
        }
    }
    show(UserCreditNoteDetail d) + {  show(d); }
    
    show 'Просмотреть' (UserCreditNote i)   { 
        NEWSESSION{
            SHOW userCreditNote OBJECTS c = i DOCKED READONLY;
        }
        
    }TOOLBAR;
        
    showToShow (UserCreditNote i) = is(i);// AND NOT overShowEdit(i);
    EXTEND FORM creditNotes 
        PROPERTIES show(c) SHOWIF showToShow(c) BEFORE editC
    
    ;
    
//--  Связь акта и накладной
    invoiceDetail = ABSTRACT InvoiceDetail (CreditNoteDetail) MATERIALIZED INDEXED;
    invoiceDetail = DATA InvoiceDetail (UserCreditNoteDetail) INDEXED;
    invoiceDetail(UserCreditNoteDetail creditNoteDetail) += invoiceDetail(creditNoteDetail);

    CONSTRAINT invoiceDetail(UserCreditNoteDetail d) AND NOT sku(invoiceDetail(d)) = sku(d) CHECKED BY invoiceDetail[UserCreditNoteDetail]
        MESSAGE 'SKU строки накладной должен соответствовать SKU строки акта расхождений';

    CONSTRAINT invoiceDetail(UserCreditNoteDetail d) AND NOT supplier(invoiceDetail(d)) = supplier(d) CHECKED BY invoiceDetail[UserCreditNoteDetail]
        MESSAGE 'Поставщик строки накладной должен соответствовать поставщику строки акта расхождений';

    CONSTRAINT invoiceDetail(UserCreditNoteDetail d) AND NOT customer(invoiceDetail(d)) = customer(d) CHECKED BY invoiceDetail[UserCreditNoteDetail]
        MESSAGE 'Покупатель строки накладной должен соответствовать покупателю строки акта расхождений';

    descriptionIndexInvoice 'Накладная' (UserCreditNoteDetail userCreditNoteDetail) =  descriptionIndex(invoiceDetail(userCreditNoteDetail));
    descriptionIndexInvoiceInvoice 'Накладная' (CreditNoteDetail creditNoteDetail) =  descriptionIndex(invoiceDetail(creditNoteDetail));

    quantity (invoice, creditNote) = GROUP SUM quantity(CreditNoteDetail creditNoteDetail) BY invoice(invoiceDetail(creditNoteDetail)), creditNote(creditNoteDetail);
    invoices 'Накладные'(CreditNote creditNote)  = GROUP
                                                    CONCAT STRING[255](description(Invoice invoice)) IF quantity(invoice, creditNote) , ', '
                                                    ORDER invoice IN invoice CHARWIDTH 30;

    FORM baseCreditNoteDetails 'Строки накладной'
        OBJECTS st = Stock PANEL
        OBJECTS ct = Stock PANEL
    
        OBJECTS d = InvoiceDetail
        PROPERTIES(d) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku,
                               description,
                               quantity, price, sum,
                               numberVAT, valueVAT, VATSum, invoiceSum,
                               name###stockProp##Stock

        FILTERGROUP filterSupplier
                    FILTER  'По складу поставщика' supplierStock(d) = st DEFAULT     
        FILTERGROUP filterCustomer
                    FILTER  'По складу покупателя' customerStock(d) = ct DEFAULT             
    ;

    changeInvoiceDetail (UserCreditNoteDetail c) {
        DIALOG baseCreditNoteDetails OBJECTS st = supplierStock(c),
                                             ct = customerStock(c),
                                             d = invoiceDetail(c) NULL CHANGE
                                     FILTERS sku(d) = sku(c), supplier(d) = supplier(c), customer(d) = customer(c); 
    }

    EXTEND FORM userCreditNote
        PROPERTIES(c) READONLY invoices
        PROPERTIES(d) descriptionIndexInvoice ON CHANGE changeInvoiceDetail(d) BEFORE deletecd
    ;
    DESIGN userCreditNote { headerRow12 { MOVE GROUP(invoice,c) { columns = 1; type = CONTAINERH; } } }


    EXTEND FORM creditNotes
        PROPERTIES(c) READONLY invoices
        PROPERTIES(d) READONLY descriptionIndexInvoiceInvoice
    ;
    // Записываем значения из накладной
    quantity (UserCreditNoteDetail detail)  <- toShip(invoiceDetail(detail))
        WHEN CHANGED(invoiceDetail(detail));

    price (UserCreditNoteDetail detail)  <- price(invoiceDetail(detail))
        WHEN CHANGED(invoiceDetail(detail));

    invoicePrice (UserCreditNoteDetail detail)  <- invoicePrice(invoiceDetail(detail))
        WHEN CHANGED(invoiceDetail(detail));    

    VAT (UserCreditNoteDetail detail)  <- VAT(invoiceDetail(detail))
        WHEN CHANGED(invoiceDetail(detail));

    valueVAT (UserCreditNoteDetail detail)  <- valueVAT(invoiceDetail(detail))
        WHEN CHANGED(invoiceDetail(detail));

    VATSum (UserCreditNoteDetail detail) <- round((sum(detail) *
        valueVAT (detail) / 100), currency(invoiceDetail(detail)))
        WHEN CHANGED(sum(detail)) OR CHANGED(VAT(detail)) OR CHANGED(currency(detail));
    @deriveDocumentDetailVATPrefixSum (userCreditNote, invoice);

//-- агр.объект
    caseToShip = ABSTRACT CASE NUMERIC[16,5](InvoiceDetail);
    caseToShip (InvoiceDetail detail) += WHEN sku(detail) IS Item THEN toShip(detail);
        
    @defineDocumentInterfaceProperty (invoice, createCreditNote, 'Создать акт расхождения');
    
    overCreateCreditNote = ABSTRACT BOOLEAN (InvoiceDetail);
    
    needToCreditNote (InvoiceDetail invoiceDetail)= createCreditNote(invoiceDetail)  AND
        (caseToShip (invoiceDetail) OR overCreateCreditNote(invoiceDetail))
        AND isNotCharge(sku(invoiceDetail)) MATERIALIZED;

    overCopy(UserInvoice s, UserInvoice d) + { 
        createCreditNote(d) <- createCreditNote(s);
    }

    needToCreditNote (invoice) = GROUP SUM 1 IF needToCreditNote(InvoiceDetail invoiceDetail) BY invoice(invoiceDetail) MATERIALIZED;

    EXTEND FORM userInvoice PROPERTIES(i) createCreditNote;
    DESIGN userInvoice {
        headerCreateDocuments {
            NEW headerCreateCreditNote {
                caption = 'Акт расхождения';
                MOVE PROPERTY(createCreditNote(i));
            }
        }
    }

    CLASS InvoiceCreditNote 'Акт расхождения на основе накладной' : CreditNote;
    CLASS InvoiceCreditNoteDetail 'Строка акта расхождения на основе накладной' : CreditNoteDetail;

    @defineDocumentTables(invoiceCreditNote);

    @defineDocumentAggregation(invoice, invoiceCreditNote, needToCreditNote);
    creditNote(InvoiceCreditNoteDetail detail) += invoiceCreditNote(detail);

    index(InvoiceCreditNoteDetail detail) += index(detail);
    
    overDate = ABSTRACT DATE (InvoiceCreditNote);
    overTime = ABSTRACT TIME (InvoiceCreditNote);    
    date(InvoiceCreditNote creditNote) += OVERRIDE overDate(creditNote), date(creditNote);
    time(InvoiceCreditNote creditNote) += OVERRIDE overTime(creditNote), time(creditNote);

    @defineDocumentAggregationStockPrefix(invoice, invoiceCreditNote, supplier, 'Склад поставщика', , );
    supplierStock(InvoiceCreditNote creditNote) += supplierStock(creditNote);

    @defineDocumentAggregationStockPrefix(invoice, invoiceCreditNote, customer, 'Склад покупателя', , );
    customerStock(InvoiceCreditNote creditNote) += customerStock(creditNote);

    @defineDocumentAggregationLegalEntityPrefix(invoice, invoiceCreditNote, supplier, 'Поставщик', , );
    supplier(InvoiceCreditNote creditNote) += supplier(creditNote);

    @defineDocumentAggregationLegalEntityPrefix(invoice, invoiceCreditNote, customer, 'Покупатель', , );
    customer(InvoiceCreditNote creditNote) += customer(creditNote);
    
    contractSku(InvoiceCreditNote creditNote) += contractSku(invoice(creditNote));
    isCommission(InvoiceCreditNote creditNote) += isCommission(invoice(creditNote));

    @defineDocumentAggregationPosted(invoice, invoiceCreditNote);
    isPosted(InvoiceCreditNote creditNote) += isPosted(creditNote);
    
    @defineDocumentAggregationClosed(invoice, invoiceCreditNote);
    isClosed(InvoiceCreditNote creditNote) += isClosed(creditNote);
    
    number 'Номер документа' (InvoiceCreditNote invoiceCreditNote) = number(invoice(invoiceCreditNote));
    number(InvoiceCreditNote creditNote) += number(creditNote);

    series 'Серия документа' (InvoiceCreditNote invoiceCreditNote) = series(invoice(invoiceCreditNote));
    series(InvoiceCreditNote creditNote) += series(creditNote);

    seriesNumber 'Серия/номер документа' (InvoiceCreditNote invoiceCreditNote) = seriesNumber(invoice(invoiceCreditNote));

    noteInvoice 'Примечание' (InvoiceCreditNote invoiceCreditNote) = note(invoice(invoiceCreditNote));
    note(InvoiceCreditNote creditNote) += noteInvoice(creditNote);

    currency  (InvoiceCreditNote invoiceCreditNote) = currency(invoice(invoiceCreditNote));
    currency (InvoiceCreditNote creditNote) += currency(creditNote);
    currency (InvoiceCreditNoteDetail invoiceCreditNoteDetail) = currency(invoiceCreditNote(invoiceCreditNoteDetail)) MATERIALIZED;

    @defineDocumentDescription(invoiceCreditNote, InvoiceCreditNoteDetail, 'Акт расхождения на основе накладной'###sign);
    description (InvoiceCreditNote creditNote) += description(creditNote);
        
    @defineDocumentAggregationDetailSku(invoice, invoiceCreditNote, sku);
    sku(InvoiceCreditNoteDetail creditNoteDetail) +=  sku(creditNoteDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceCreditNote, toShip, 'Кол-во');   //                ????????   может надо сделать через минус
    @defineDocumentAggregationDetailProperty (invoice, invoiceCreditNote, caseToShip, 'Кол-во'); 
    
    overQuantity = ABSTRACT NUMERIC[16,5] (InvoiceCreditNoteDetail);
    
    quantity(InvoiceCreditNoteDetail creditNoteDetail) += OVERRIDE overQuantity(creditNoteDetail), caseToShip(creditNoteDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceCreditNote, price, 'Цена');

    price(InvoiceCreditNoteDetail creditNoteDetail) += price(creditNoteDetail);

    sum 'Сумма' (InvoiceCreditNoteDetail invoiceCreditNoteDetail) = NUMERIC[18,4](round((quantity(invoiceCreditNoteDetail) *
        price(invoiceCreditNoteDetail)), currency(invoiceCreditNoteDetail)));

    sum(InvoiceCreditNoteDetail creditNoteDetail) += sum(creditNoteDetail);

    invoiceDetail(InvoiceCreditNoteDetail creditNoteDetail) += invoiceDetail(creditNoteDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceCreditNote, VAT, 'НДС');
    VAT (InvoiceCreditNoteDetail creditNoteDetail) += VAT(creditNoteDetail);

    @defineDocumentAggregationDetailProperty (invoice, invoiceCreditNote, numberVAT, 'НДС, номер');
    @defineDocumentAggregationDetailProperty (invoice, invoiceCreditNote, valueVAT, 'НДС, %');
    valueVAT (InvoiceCreditNoteDetail creditNoteDetail) += valueVAT(creditNoteDetail);

    invoicePrice (InvoiceCreditNoteDetail detail) += invoicePrice(invoiceDetail(detail));

    VATSum 'Сумма НДС' (InvoiceCreditNoteDetail invoiceCreditNoteDetail) = NUMERIC[18,4](round((sum(invoiceCreditNoteDetail) *
    valueVAT (invoiceCreditNoteDetail) / 100), currency(invoiceCreditNoteDetail)));

    invoiceSum 'Сумма с НДС' (InvoiceCreditNoteDetail invoiceCreditNoteDetail) = VATSum(invoiceCreditNoteDetail) (+)
        sum(invoiceCreditNoteDetail);

    VATSum (InvoiceCreditNoteDetail creditNoteDetail) += VATSum(creditNoteDetail);
    invoiceSum (InvoiceCreditNoteDetail creditNoteDetail) += invoiceSum(creditNoteDetail);
    
    edit(InvoiceCreditNote c) + {  edit(invoice(c)); }
    edit(InvoiceCreditNoteDetail d) + {  edit(invoiceDetail(d)); }
    
    overDocumentQuantity = ABSTRACT NUMERIC[16,5] (InvoiceCreditNoteDetail);
    documentQuantity (InvoiceCreditNoteDetail d) += OVERRIDE overDocumentQuantity(d), quantity(invoiceDetail(d)); 
    documentSum (InvoiceCreditNoteDetail d) += sum(invoiceDetail(d)); 
    documentVATSum (InvoiceCreditNoteDetail d) += VATSum(invoiceDetail(d));        
    documentInvoiceSum (InvoiceCreditNoteDetail d) += invoiceSum(invoiceDetail(d)); 
    
    overShipmentQuantity = ABSTRACT NUMERIC[16,5] (InvoiceCreditNoteDetail);
    shipmentQuantity (InvoiceCreditNoteDetail d) += OVERRIDE overShipmentQuantity(d), shipped(invoiceDetail(d)); 
    shipmentSum (InvoiceCreditNoteDetail d) = NUMERIC[18,4](round(((OVERRIDE overShipmentQuantity(d), shipped(invoiceDetail(d))) *
                                     price(d)), currency(d)));
    shipmentSum (InvoiceCreditNoteDetail d) += shipmentSum(d);
    shipmentVATSum (InvoiceCreditNoteDetail d) = NUMERIC[18,4](round((shipmentSum(d) *
                                  valueVAT (d) / 100), currency(d)));   
    shipmentVATSum (InvoiceCreditNoteDetail d) += shipmentVATSum(d);        
    shipmentInvoiceSum (InvoiceCreditNoteDetail d) += shipmentVATSum(d) (+) shipmentSum(d);   
   
    quantityCredit(InvoiceDetail d) = (quantity(d) (-) shipmentQuantity(d)) IF NOT isCharge(sku(d)); 
    sumCredit (InvoiceDetail d) = NUMERIC[18,4](round2(quantityCredit(d) * price(d)));                                                                                 
    VATSumCredit (InvoiceDetail d) = NUMERIC[18,4](round2(sumCredit(d) * valueVAT (d) / 100));                                                                                                                              
    invoiceSumCredit (InvoiceDetail d) = VATSumCredit(d) (+) sumCredit(d);

    TABLE creditInvoice(Invoice);
    quantityCredit(Invoice i) = GROUP SUM quantityCredit(InvoiceDetail d) IF invoice(d)==i MATERIALIZED TABLE creditInvoice;
    sumCredit (Invoice i) =  GROUP SUM sumCredit(InvoiceDetail d) IF invoice(d)==i MATERIALIZED TABLE creditInvoice;                                                                        
    VATSumCredit (Invoice i) =  GROUP SUM VATSumCredit(InvoiceDetail d) IF invoice(d)==i MATERIALIZED TABLE creditInvoice;                                                                                                                        
    invoiceSumCredit (Invoice i) =  VATSumCredit(i) (+) sumCredit(i);
       
    creditQuantity 'Кол-во (с учетом акта)' (InvoiceDetail d) = quantity(d) (-) (quantityCredit(d) IF createShipment(d));
    creditSum 'Сумма (с учетом акта)' (InvoiceDetail d) = sum(d) (-) (sumCredit(d) IF createShipment(d));
    creditVATSum 'Сумма НДС (с учетом акта)' (InvoiceDetail d) = VATSum(d) (-) (VATSumCredit(d) IF createShipment(d));
    creditInvoiceSum 'Сумма с НДС (с учетом акта)' (InvoiceDetail d) = invoiceSum(d) (-) (invoiceSumCredit(d) IF createShipment(d));    
    
    creditQuantityInvoiceDetail 'Кол-во (с учетом акта)' (Invoice i) = quantityInvoiceDetail(i) (-) (quantityCredit(i) IF createShipment(i));  
    creditSumInvoiceDetail 'Сумма (с учетом акта)' (Invoice i) = sumInvoiceDetail(i) (-) (sumCredit(i) IF createShipment(i));  
    creditVATSumInvoiceDetail 'Сумма НДС (с учетом акта)' (Invoice i) = VATSumInvoiceDetail(i) (-) (VATSumCredit(i) IF createShipment(i));  
    creditInvoiceSumInvoiceDetail 'Сумма с НДС (с учетом акта)' (Invoice i) = invoiceSumInvoiceDetail(i) (-) (invoiceSumCredit(i) IF createShipment(i));  
    

   
    showCreditSum 'Показывать в накладной '##sign##' суммы с учетом акта расхождения' = DATA BOOLEAN ();    
    backgroundCreditNote 'Цвет' (Invoice invoice) = RGB(255, 250, 205) IF invoice IS Invoice;
    EXTEND FORM options
        PROPERTIES() NS###showCreditSum = showCreditSum
    ;
    
    
    DESIGN options {
        invoice##NS {    
            MOVE PROPERTY(NS###showCreditSum);
        }         
    }
    
    EXTEND FORM invoices
        PROPERTIES (i) READONLY SHOWIF showCreditSum() BACKGROUND backgroundCreditNote(i) creditQuantityInvoiceDetail, creditSumInvoiceDetail, creditVATSumInvoiceDetail, creditInvoiceSumInvoiceDetail
        PROPERTIES (d) READONLY SHOWIF showCreditSum() BACKGROUND backgroundCreditNote(i) creditQuantity, creditSum, creditVATSum, creditInvoiceSum
    ;
    EXTEND FORM userInvoice 
        PROPERTIES (i) READONLY SHOWIF showCreditSum() BACKGROUND backgroundCreditNote(i) creditQuantityInvoiceDetail, creditSumInvoiceDetail, creditVATSumInvoiceDetail, creditInvoiceSumInvoiceDetail

        OBJECTS dcn = UserInvoiceDetail
        PROPERTIES (dcn) READONLY index, idBarcodeSku, idSku, nameSku, shortNameUOMSku, nameBatch, quantity
        PROPERTIES (dcn) READONLY BACKGROUND backgroundCreditNote(i) creditQuantity, creditSum, creditVATSum, creditInvoiceSum
        FILTERS userInvoice(dcn) = i
    ;
    DESIGN userInvoice {
        specificationBox {
            NEW creditNoteContainer AFTER BOX(d) {
                caption = 'Акт расхождений';
                showIf = showCreditSum();
                NEW creditNoteSum {
                    type = CONTAINERH;
                    caption = 'Суммы акта';
                
                }
                NEW creditNoteInvoice {
                    type = CONTAINERH;
                    caption = 'Суммы с учетом акта';
                    MOVE PROPERTY(creditQuantityInvoiceDetail(i)) {caption = 'Кол-во (всего)';}
                    MOVE PROPERTY(creditSumInvoiceDetail(i)) {caption = 'Сумма';}
                    MOVE PROPERTY(creditVATSumInvoiceDetail(i)) {caption = 'Сумма НДС';}
                    MOVE PROPERTY(creditInvoiceSumInvoiceDetail(i)) {caption = 'Сумма с НДС';}                               
                }            
                MOVE BOX(dcn);
            }
        }
    }
   
END

META defineCreditNoteBatch(legalEntityProp, stockProp)
    @showDocumentInterfaceDetailBatch(creditNote);
    @defineDocumentInterfaceDetailBatch(creditNote, batch);

//    EXTEND FORM userCreditNote PROPERTIES (d) nameBatch AFTER shortNameUOMSku(d);
//    EXTEND FORM creditNotes PROPERTIES (d) READONLY nameBatch AFTER shortNameUOMSku(d);


    batch (UserCreditNoteDetail detail)  <- batch(invoiceDetail(detail))
        WHEN CHANGED(invoiceDetail(detail));

    @defineDocumentAggregationDetailBatch (invoice, invoiceCreditNote);
    batch (InvoiceCreditNoteDetail creditNoteDetail) += batch(creditNoteDetail);
    
    // История по правой кнопке
    @defineBalancesBatch(creditNoteDetail); //-- показываем по нажатию правой клавиши остатки партии
    @defineBalancesBatch(userCreditNoteDetail); //-- показываем по нажатию правой клавиши остатки партии
    @defineMovementBatch(creditNoteDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение по партии
    @defineMovementBatch(userCreditNoteDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение по партии    
    
    @defineDocumentBatchStockPriceListTypeSystemLedger(userCreditNote, stockProp);
    @extendFormDocumentBatchStock(userCreditNote, userCreditNote, c, legalEntityProp, stockProp);
END

// Партии с диалогом по складам
META defineCreditNoteBatchDialogStock(stockProp, dialog)

    changeBatch(UserCreditNoteDetail d)  { 
        DIALOG dialogBatchStock##dialog OBJECTS 
                                    st = stockProp(d),
                                    t = dateTime(d),
                                    sk = sku(d),
                                    bt = batch(d) INPUT NULL NEWSESSION DO {
            batch(d) <- bt;                            
        }
    }
    EXTEND FORM userCreditNote PROPERTIES (d) nameBatch ON CHANGE changeBatch(d) AFTER shortNameUOMSku(d);
    EXTEND FORM creditNotes PROPERTIES (d) READONLY nameBatch AFTER shortNameUOMSku(d);
END

META defineCreditNoteBatchDialog(dumb)

    changeBatch(UserCreditNoteDetail userCreditNoteDetail)  { 
        DIALOG dialogBatch OBJECTS sk = sku(userCreditNoteDetail), bt = batch(userCreditNoteDetail) INPUT NULL NEWSESSION DO
            batch(userCreditNoteDetail) <- bt;
    }

    EXTEND FORM userCreditNote PROPERTIES (d) nameBatch ON CHANGE changeBatch(d) AFTER shortNameUOMSku(d);
    EXTEND FORM creditNotes PROPERTIES (d) READONLY nameBatch AFTER shortNameUOMSku(d);

END

META defineCreditNotePaymentCondition (sign)

    paymentCondition 'Условия оплаты' = ABSTRACT PaymentCondition (CreditNote) MATERIALIZED;
    paymentCondition 'Условия оплаты' = DATA PaymentCondition (UserCreditNote);
    paymentCondition(UserCreditNote prop) += paymentCondition(prop);

    descriptionPaymentCondition 'Условия оплаты' (CreditNote prop) = description(paymentCondition(prop)) IN base CHARWIDTH 10;
    descriptionPaymentCondition 'Условия оплаты' (UserCreditNote prop) = description(paymentCondition(prop)) CHARWIDTH 10;

    paymentCondition(UserCreditNote prop) <- paymentCondition(contractSku(prop))
        WHEN CHANGED(contractSku(prop));

    EXTEND FORM userCreditNote
        PROPERTIES(c) descriptionPaymentCondition
    ;

    DESIGN userCreditNote{
        GROUP(documentPrm,c){
            MOVE PROPERTY(descriptionPaymentCondition(c));
        }
    }

END
