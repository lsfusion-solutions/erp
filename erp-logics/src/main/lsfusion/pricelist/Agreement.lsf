MODULE Agreement;

REQUIRE Currency,
        Document,
        LegalEntity,
        Numerator,
        PriceListType,
        PaymentCondition;

CLASS Agreement 'Соглашение';
TABLE agreement (Agreement);

name 'Наименование' = DATA ISTRING[100](Agreement) IN id;

@defineExternalizable (agreement, STRING[100]);

@defineNumbered(Agreement, BPSTRING[2]);

@defineNumeratedDefault(Agreement, 'Соглашения', 'ТД');

@defineDocumentHeaderTime(Agreement);
@deriveDocumentHeaderTimePrefix(Agreement, );

@defineDocumentHeaderTimePrefix(Agreement, from, ' с');
@deriveDocumentHeaderTimePrefix(Agreement, from);

@defineDocumentHeaderTimePrefix(Agreement, to, ' по');
@deriveDocumentHeaderTimeBeforePrefix(Agreement, to);

//toDateAgreement 'Дата по' = DATA DATE(Agreement);
//toTimeAgreement 'Время по' = DATA TIME(Agreement);
//toDateTimeAgreement 'Дата/время по'(agreement) = dateTimeToDateTime(toDateAgreement(agreement), toTimeAgreement(agreement));

@defineDocumentHeaderNote(Agreement);
@defineDocumentHeaderCurrency(agreement);
@defineDocumentHeaderDescription(Agreement, 'Соглашение');

// -------------------------------------- Поставщики -------------------------------- //

// Группы поставщиков
TABLE agreementLegalEntityGroup (Agreement, LegalEntityGroup);
TABLE agreementLegalEntityGroupSession (Agreement, LegalEntityGroup, Session);
dataInSupplier 'Отм' = DATA BOOLEAN (Agreement, LegalEntityGroup);

levelParentSupplier (Agreement agreement, LegalEntityGroup legalEntityGroup) =
    GROUP
          MIN level(legalEntityGroup, LegalEntityGroup parent) IF dataInSupplier(agreement, parent) MATERIALIZED;
nearestParentLegalEntitySupplier (Agreement agreement, LegalEntityGroup legalEntityGroup) =
    legalEntityGroup(legalEntityGroup, levelParentSupplier(agreement, legalEntityGroup));
nearestInSupplier (Agreement agreement, LegalEntityGroup legalEntityGroup) =
    dataInSupplier(agreement, nearestParentLegalEntitySupplier(agreement, legalEntityGroup)) MATERIALIZED;

inSupplier 'Отм' (Agreement agreement, LegalEntityGroup legalEntityGroup) = OVERRIDE dataInSupplier(agreement, legalEntityGroup),
                                                                        nearestInSupplier(agreement, legalEntityGroup);
                                                                        
quantityChildWithSupplier (LegalEntityGroup legalEntityGroup, Agreement agreement) = GROUP SUM 1 IF dataInSupplier(agreement, LegalEntityGroup childLegalEntityGroup) AND isParent(childLegalEntityGroup, legalEntityGroup) MATERIALIZED;
quantityParentWithSupplier (LegalEntityGroup legalEntityGroup, Agreement agreement) = GROUP SUM 1 IF dataInSupplier(agreement, LegalEntityGroup parentLegalEntityGroup) AND isParent(legalEntityGroup, parentLegalEntityGroup) MATERIALIZED;                                                                        
                                                                           
backgroundInSupplier 'Цвет' (Agreement agreement, LegalEntityGroup legalEntityGroup) = CASE 
    WHEN dataInSupplier(agreement, legalEntityGroup) THEN RGB(0,0,0)
    WHEN nearestInSupplier(agreement, legalEntityGroup) THEN RGB(230,248,250) 
    WHEN quantityChildWithSupplier (legalEntityGroup, agreement) != descendantNumber(legalEntityGroup) AND NOT quantityParentWithSupplier (legalEntityGroup, agreement) THEN RGB(203,203,203);
        
// Поставщики
TABLE agreementLegalEntity(Agreement, LegalEntity);
TABLE agreementLegalEntitySession(Agreement, LegalEntity, Session);
dataInSupplier 'Отм.' (agreement, legalEntity) = DATA BOOLEAN (Agreement, LegalEntity);

inSupplier 'Отм' (Agreement agreement, LegalEntity legalEntity) = OVERRIDE dataInSupplier(agreement, legalEntity),
                                                           nearestInSupplier(agreement, legalEntityGroup(legalEntity)) MATERIALIZED;
                                                           
backgroundInSupplier'Цвет' (Agreement agreement, LegalEntity legalEntity) = IF dataInSupplier(agreement, legalEntity) THEN RGB(0,0,0)
    ELSE RGB(230,248,250) IF nearestInSupplier(agreement, legalEntityGroup(legalEntity));                                                            

supplier 'Поставщики' (Agreement agreement) = GROUP
                                                 CONCAT name(LegalEntity supplier) IF inSupplier(agreement, supplier) , ', '
                                                 ORDER supplier CHARWIDTH 30 MATERIALIZED;
skip = ABSTRACT BOOLEAN (Agreement, LegalEntity);
CONSTRAINT inSupplier(Agreement agreement, LegalEntity supplier) AND NOT isSeller(supplier) AND NOT skip(agreement, supplier)
    MESSAGE 'Для соглашения выбрано в качестве поставщика организация, не являющеяся поставщиком или компанией';

defaultSupplier (Agreement agreement)= GROUP MIN LegalEntity legalEntity IF inSupplier(agreement, legalEntity); 
countSuppliers (Agreement agreement) = GROUP SUM 1 IF inSupplier(agreement, LegalEntity legalEntity); 
// -------------------------------------- Покупатели -------------------------------- //

// Группы покупателей
dataInCustomer 'Отм' = DATA BOOLEAN (Agreement, LegalEntityGroup);

levelParentCustomer (Agreement agreement, LegalEntityGroup legalEntityGroup) =
    GROUP
          MIN level(legalEntityGroup, LegalEntityGroup parent) IF dataInCustomer(agreement, parent) MATERIALIZED;
nearestParentLegalEntityCustomer (Agreement agreement, LegalEntityGroup legalEntityGroup) =
    legalEntityGroup(legalEntityGroup, levelParentCustomer(agreement, legalEntityGroup));
nearestInCustomer (Agreement agreement, LegalEntityGroup legalEntityGroup) =
    dataInCustomer(agreement, nearestParentLegalEntityCustomer(agreement, legalEntityGroup));

inCustomer 'Отм' (Agreement agreement, LegalEntityGroup legalEntityGroup) = OVERRIDE dataInCustomer(agreement, legalEntityGroup),
                                                                        nearestInCustomer(agreement, legalEntityGroup);
                                                                        
quantityChildWithCustomer (LegalEntityGroup legalEntityGroup, Agreement agreement) = GROUP SUM 1 IF dataInCustomer(agreement, LegalEntityGroup childLegalEntityGroup) AND isParent(childLegalEntityGroup, legalEntityGroup) MATERIALIZED;
quantityParentWithCustomer (LegalEntityGroup legalEntityGroup, Agreement agreement) = GROUP SUM 1 IF dataInCustomer(agreement, LegalEntityGroup parentLegalEntityGroup) AND isParent(legalEntityGroup, parentLegalEntityGroup) MATERIALIZED;     
                                                                        
//backgroundInAgreementCustomerGroup 'Цвет' (agreement, legalEntityGroup) = IF dataInAgreementCustomerGroup(agreement, legalEntityGroup) THEN RGB(0,0,0)
//    ELSE RGB(230,248,250) IF nearestInAgreementCustomerGroup(agreement, legalEntityGroup);
    
backgroundInCustomer 'Цвет' (Agreement agreement, LegalEntityGroup legalEntityGroup) = CASE 
    WHEN dataInCustomer(agreement, legalEntityGroup) THEN RGB(0,0,0)
    WHEN nearestInCustomer(agreement, legalEntityGroup) THEN RGB(230,248,250) 
    WHEN quantityChildWithCustomer (legalEntityGroup, agreement) != descendantNumber(legalEntityGroup) AND NOT quantityParentWithCustomer (legalEntityGroup, agreement) THEN RGB(203,203,203);    
    
// Покупатели
dataInCustomer 'Отм.' (agreement, legalEntity) = DATA BOOLEAN (Agreement, LegalEntity);

inCustomer 'Отм' (Agreement agreement, LegalEntity legalEntity) = OVERRIDE dataInCustomer(agreement, legalEntity),
                                                           nearestInCustomer(agreement, legalEntityGroup(legalEntity))
                                                  MATERIALIZED;
backgroundInCustomer'Цвет' (Agreement agreement, LegalEntity legalEntity) = IF dataInCustomer(agreement, legalEntity) THEN RGB(0,0,0)
    ELSE RGB(230,248,250) IF nearestInCustomer(agreement, legalEntityGroup(legalEntity)); 
    
customer 'Покупатели' (Agreement agreement) = GROUP
                                                 CONCAT name(LegalEntity customer) IF inCustomer(agreement, customer) , ', '
                                                 ORDER customer CHARWIDTH 30 MATERIALIZED;

CONSTRAINT inCustomer(Agreement agreement, LegalEntity customer) AND NOT isBuyer(customer) AND NOT skip(agreement, customer)
    MESSAGE 'Для соглашения выбрано в качестве покупателя организация, не являющеяся покупателем или компанией';

// ----------------------------------------------- Соглашение по умолчанию --------------------------- //

countDefaultAgreement 'Кол-во соглашений' (LegalEntity supplier, LegalEntity customer, DATETIME dateTime)= GROUP    
        SUM 1 
    IF inCustomer(Agreement agreement, customer) AND inSupplier(agreement, supplier)
    AND fromDateTime(agreement) <= dateTime AND NOT (toDateTime(agreement) < dateTime);

userDefaultAgreementSupplierCustomer = DATA Agreement (LegalEntity, LegalEntity);
userDefaultAgreementSupplierCustomer(LegalEntity supplier, LegalEntity customer) => inCustomer(userDefaultAgreementSupplierCustomer(supplier, customer), customer) RESOLVE RIGHT;

calcDefaultAgreement(LegalEntity supplier, LegalEntity customer, DATETIME dateTime) = GROUP    
        MAX Agreement agreement
    IF inCustomer(agreement, customer) AND inSupplier(agreement, supplier)
    AND fromDateTime(agreement) <= dateTime AND NOT (toDateTime(agreement) < dateTime);

overDefaultAgreement = ABSTRACT Agreement (LegalEntity, LegalEntity, DATETIME);
defaultAgreement(LegalEntity supplier, LegalEntity customer, DATETIME dateTime) =  OVERRIDE 
    userDefaultAgreementSupplierCustomer(supplier, customer) IF dateTime IS DATETIME,
    calcDefaultAgreement(supplier, customer, dateTime) IF countDefaultAgreement(supplier, customer, dateTime) == 1,
    overDefaultAgreement(supplier, customer, dateTime);
nameDefaultAgreement 'Соглашение по умолчанию' (LegalEntity supplier, LegalEntity customer, DATETIME dateTime) = name(defaultAgreement(supplier, customer, dateTime));

isDefault 'Соглашение по умолчанию' (Agreement agreement, LegalEntity supplier, LegalEntity customer) = defaultAgreement(supplier, customer, currentDateTime()) == agreement;

changeUserDefaultAgreement (Agreement agreement, LegalEntity supplier, LegalEntity customer)  { 
    userDefaultAgreementSupplierCustomer(supplier, customer) <- agreement;
}

// ----------------------------------------------- Виды цен --------------------------------- //

isPurchase 'Закупка' (Agreement agreement) = GROUP
    SUM 1 IF inSupplier(agreement, LegalEntity supplier) AND isSupplier(supplier) AND 
    inCustomer(agreement, LegalEntity customer) AND isCompany(customer);
isSale 'Продажа' (Agreement agreement) = GROUP
    SUM 1 IF inSupplier(agreement, LegalEntity supplier) AND isCompany(supplier) AND 
    inCustomer(agreement, LegalEntity customer) AND isCustomer(customer);

// -- Основной вид цены
priceListType 'Вид цены' (agreement) = DATA PriceListType (Agreement);
namePriceListType 'Вид цены' (Agreement agreement) = name(priceListType(agreement));

CONSTRAINT currency(Agreement agreement) != currency(priceListType(agreement))
           CHECKED BY priceListType[Agreement]
           MESSAGE 'Валюта соглашения должна совпадать с валютой вида цены';

returnPriceListType 'Вид цены (возврат)' (agreement) = DATA PriceListType (Agreement);
nameReturnPriceListType 'Вид цены (возврат)' (Agreement agreement) = name(returnPriceListType(agreement));

CONSTRAINT currency(Agreement agreement) != currency(returnPriceListType(agreement))
           CHECKED BY returnPriceListType[Agreement]
           MESSAGE 'Валюта соглашения должна совпадать с валютой вида цены (возврат)';

// Уточнение по группам
groupType = DATA GroupType (Agreement);
nameGroupType 'Тип классификатора' (Agreement agreement) = name(groupType(agreement));

groupType (Agreement o) <- SystemGroupType.skuGroupType WHEN SET(o IS Agreement);

TABLE agreementGroup(Agreement, Group);
dataPriceListType (agreement, group) = DATA PriceListType (Agreement, Group);
nameDataPriceListType 'Вид цены (перегруженный)' (Agreement agreement, Group group) = name(dataPriceListType(agreement, group));

CONSTRAINT currency(Agreement agreement) != currency(dataPriceListType(agreement, Group group))
           CHECKED BY dataPriceListType[Agreement,Group]
           MESSAGE 'Валюта соглашения должна совпадать с валютой вида цены';

levelParentPriceListType (Agreement agreement, Group group) =
    GROUP
    MIN level(group, Group parent) IF dataPriceListType(agreement, parent) MATERIALIZED;
nearestParent (Agreement agreement, Group group) = group(group, levelParentPriceListType (agreement, group));
nearestPriceListType (Agreement agreement, Group group) =
   dataPriceListType(agreement, nearestParent(agreement, group)) MATERIALIZED;

priceListType 'Вид цены' (Agreement agreement, Group group) =  OVERRIDE dataPriceListType(agreement, group), nearestPriceListType(agreement, group) MATERIALIZED;
namePriceListType 'Вид цены' (Agreement agreement, Group group) =
    name(priceListType (agreement, group));

//--
dataIn 'Вкл.' (agreement, group) = DATA BOOLEAN (Agreement, Group);

countGroup (Agreement a) = GROUP SUM 1 IF dataIn(a, Group g) MATERIALIZED;

levelParentDataIn (Agreement agreement, Group group) =
    GROUP
    MIN level(group, Group parent) IF dataIn(agreement, parent) MATERIALIZED;
nearestDataParent (Agreement agreement, Group group) = group(group, levelParentDataIn (agreement, group));
nearestDataIn (Agreement agreement, Group group) =
   dataIn(agreement, nearestDataParent(agreement, group)) MATERIALIZED;

in 'Вкл.' (Agreement agreement, Group group) =  OVERRIDE dataIn(agreement, group), 
                                                                                 nearestDataIn(agreement, group) MATERIALIZED;

skipIn = ABSTRACT VALUE BOOLEAN (Agreement,Sku);
    
in 'Вкл.' (Agreement a, Sku s) = in (a, group(groupType(a),s)) AND NOT skipIn(a,s);

quantityChildWith (Group group, Agreement agreement) = GROUP SUM 1 IF dataIn(agreement, Group childGroup) AND isParent(childGroup, group) MATERIALIZED;
quantityParentWith (Group group, Agreement agreement) = GROUP SUM 1 IF dataIn(agreement, Group parentGroup) AND isParent(group, parentGroup) MATERIALIZED;                                                                        
                                                                           
backgroundIn 'Цвет' (Agreement agreement, Group group) = CASE 
    WHEN dataIn(agreement, group) THEN RGB(0,0,0)
    WHEN nearestDataIn(agreement, group) THEN RGB(230,248,250) 
    WHEN quantityChildWith (group, agreement) != descendantNumber(group) AND NOT quantityParentWith (group, agreement) THEN RGB(203,203,203);

// Уточнение по sku
TABLE agreementSku(Agreement, Sku);
dataPriceListType (agreement, sku) = DATA PriceListType (Agreement, Sku);
nameDataPriceListType 'Вид цены (перегруженный)' (Agreement agreement, Sku sku) = name(dataPriceListType(agreement, sku));

CONSTRAINT currency(Agreement agreement) != currency(dataPriceListType(agreement, Sku sku))
           CHECKED BY dataPriceListType[Agreement,Sku]
           MESSAGE 'Валюта соглашения должна совпадать с валютой вида цены';

overPriceListType (agreement, sku) = ABSTRACT PriceListType (Agreement, Sku);

priceListType (Agreement agreement, Sku sku) = OVERRIDE dataPriceListType(agreement, sku), overPriceListType(agreement, sku),
                                                      priceListType(agreement, group(groupType(agreement),sku)),
                                                      priceListType(agreement) IF sku IS Sku;

returnPriceListType(Agreement a) <- priceListType(a) WHEN CHANGED(priceListType(a));

returnPriceListType (Agreement agreement, Sku sku) = returnPriceListType(agreement) IF sku IS Sku;

namePriceListType 'Вид цены' = name(priceListType(Agreement agreement, Sku sku));

// ------------------------------------------- Условия оплаты ------------------------------------- //

paymentCondition 'Условия оплаты' =  DATA PaymentCondition (Agreement);
typePayment 'Тип оплаты' (Agreement agreement) = type(paymentCondition(agreement));
descriptionPaymentCondition 'Условия оплаты' (Agreement agreement) = description(paymentCondition(agreement));

// ------------------------------------------- Формы ---------------------------------------------- //

FORM agreement 'Соглашение'

    OBJECTS a = Agreement PANEL
    PROPERTIES(a) name, id, nameNumerator, number, series, date, time,
                  fromDate, fromTime, toDate, toTime,
                  nameCurrency, namePriceListType, nameReturnPriceListType, descriptionPaymentCondition, nameGroupType, note

    TREE supplierGroupTree f = LegalEntityGroup PARENT parent(f)
    PROPERTIES READONLY fTreeName = name(f)
    PROPERTIES(a, f) inSupplier BACKGROUND backgroundInSupplier(a, f)

    OBJECTS cc = LegalEntity
    PROPERTIES(cc) READONLY name
    PROPERTIES(a, cc) inSupplier BACKGROUND backgroundInSupplier(a, cc)
    ORDERS name(cc)
    FILTERS isParent(legalEntityGroup(cc), f)
    FILTERGROUP ccinactiveLegalEntity FILTER 'Активная' active(cc) 'shift F10' DEFAULT
    FILTERGROUP ccfilters
        FILTER 'Только отмеченные' inSupplier (a, cc) 'F9'

    TREE customerGroupTree lg = LegalEntityGroup PARENT parent(lg)
    PROPERTIES READONLY lgTreeName = name(lg)
    PROPERTIES(a, lg) inCustomer BACKGROUND backgroundInCustomer(a, lg)

    OBJECTS c = LegalEntity
    PROPERTIES(c) READONLY name
    PROPERTIES(a, c) inCustomer BACKGROUND backgroundInCustomer(a, c)
    ORDERS name(c)
    FILTERS isParent(legalEntityGroup(c), lg)
    FILTERGROUP cinactiveLegalEntity FILTER 'Активная' active(c) 'shift F10' DEFAULT
    FILTERGROUP cfilters
        FILTER 'Только отмеченные' inCustomer (a, c) 'F10'
    TREE groupTree g=Group PARENT parent(g)
    PROPERTIES READONLY order(g), name(g)
    FILTERS groupType(g) == groupType(a)
    ORDERS order(g), name(g)
    FILTERGROUP ginactive FILTER 'Активные' active(g) DEFAULT
    PROPERTIES(a, g) nameDataPriceListType, namePriceListType, in BACKGROUND backgroundIn(a, g)

    TREE skuGroupTree sg=SkuGroup PARENT parent(sg)
    PROPERTIES READONLY order(sg), name(sg)
    ORDERS order(sg), name(sg)
    FILTERGROUP sginactive FILTER 'Активные' active(sg) DEFAULT

    OBJECTS s = Sku
    PROPERTIES(s) READONLY id, idBarcode, name
    PROPERTIES(a, s) nameDataPriceListType, namePriceListType
    FILTERS isParent(sg, s)
    FILTERGROUP active
        FILTER 'Активные' active(s) DEFAULT 

    EDIT Agreement OBJECT a
;

DESIGN agreement {

    NEW headContainer {
        caption = 'Шапка документа';
        type = CONTAINERH;
        MOVE PROPERTY (name(a));
        MOVE PROPERTY (id(a));
        MOVE PROPERTY (nameNumerator(a));
        MOVE PROPERTY (number(a));
        MOVE PROPERTY (series(a));
        MOVE PROPERTY (date(a));
        MOVE PROPERTY (time(a));
    }
    NEW firstContainer{
        type = CONTAINERH;
        NEW timeContainer{
            caption = 'Период действия';
            type = CONTAINERH;
            MOVE PROPERTY (fromDate(a));
            MOVE PROPERTY (fromTime(a));
            MOVE PROPERTY (toDate(a));
            MOVE PROPERTY (toTime(a));
        }
    }
    NEW propContainer{
        caption = 'Параметры документа';
        type = COLUMNS;
        columns = 2;
        MOVE PROPERTY(nameCurrency(a));
        MOVE PROPERTY(namePriceListType(a));
        MOVE PROPERTY(nameReturnPriceListType(a));
        MOVE PROPERTY(descriptionPaymentCondition(a));
        MOVE PROPERTY(note(a));
    }
    NEW orderContainer {
        caption = 'Заказ';
        type = CONTAINERV;
        NEW orderContainer1 {
            type = CONTAINERH;
        }
    }
    NEW tabContainer {
        fill = 1;
        type = TABBED;
        NEW supplierBox{
            fill = 1;
            caption = 'Поставщики';
            type = SPLITH;
            MOVE BOX(TREE supplierGroupTree) {caption = 'Группы организаций';}
            MOVE BOX(cc) {
                fill = 3;
            }
        }
        NEW customerBox{
            fill = 1;
            caption = 'Покупатели';
            type = SPLITH;
            MOVE BOX(TREE customerGroupTree) {caption = 'Группы организаций';}
            MOVE BOX(c) {
                fill = 3;
            }
        }
        NEW groupPane {
            caption = 'Уточнение цен по группам';
            MOVE PROPERTY(nameGroupType(a));
            MOVE BOX(TREE groupTree) {caption = 'Группы товаров';}
        }
        NEW skuContainer{
            fill = 1;
            caption = 'Уточнение цен по товарам';
            type = SPLITH;
            MOVE BOX(TREE skuGroupTree) {caption = 'Группы товаров';}
            MOVE BOX(s) {
                fill = 3;
            }
        }
    }
    MOVE TOOLBARBOX;
}
isEditableAgreement = ABSTRACT BOOLEAN ();
isReadonlyAgreement = NOT (isEditable() OR isEditableAgreement());

FORM agreements 'Соглашения'

    OBJECTS a = Agreement
    PROPERTIES(a) READONLYIF isReadonlyAgreement() name, seriesNumber, dateTime,
                           fromDateTime, toDateTime,
                           nameCurrency, namePriceListType, customer, supplier, note

    PROPERTIES(a) NEWSESSION NEW, EDIT, DELETE 

    LIST Agreement OBJECT a
;

@extendFormEditable (agreements);

NAVIGATOR {
    priceListDocuments {
        NEW agreements;
    }
}

WHEN LOCAL FORMS agreement 
    SET(Agreement a IS Agreement) OR SET(countSuppliers(a)) DO {
        currency (a) <- OVERRIDE currency(defaultSupplier(a)), defaultCurrency();
    }
            
DESIGN options {
    pane{
        NEW agreement {
            caption = 'Соглашение';
        }
    }
}        
        
// ---------------------------------------------- Копирование соглащений --------------------------------------- //

overCopy  ABSTRACT LIST ( Agreement, Agreement);

copyData(Agreement s, Agreement d)  { 
    date(d) <- date(s);
    time(d) <- time(s);
    fromDate(d) <- fromDate(s);
    fromTime(d) <- fromTime(s);
    toDate(d) <- toDate(s);
    toTime(d) <- toTime(s);

    currency(d) <- currency(s);
    priceListType(d) <- priceListType(s);
    returnPriceListType(d) <- returnPriceListType(s);
    note(d) <- note(s);
    groupType(d) <- groupType(s);
    paymentCondition(d) <- paymentCondition(s);
    note(d) <- note(s);

    dataInCustomer(d, LegalEntity customer) <- dataInCustomer (s, customer);
    dataInCustomer(d, LegalEntityGroup legalEntityGroup) <- dataInCustomer(s, legalEntityGroup);

    dataInSupplier(d, LegalEntity customer) <- dataInSupplier (s, customer);
    dataInSupplier(d, LegalEntityGroup legalEntityGroup) <- dataInSupplier(s, legalEntityGroup);

    dataPriceListType(d, Group group) <- dataPriceListType(s, group);
    dataPriceListType(d, Sku sku) <- dataPriceListType(s, sku);
    
    overCopy(s, d);
}

copy 'Копировать'(Agreement agreement)  { 
	NEWSESSION {
	    NEW a = Agreement {
	        copyData(agreement, a);
	
	        SHOW agreement OBJECTS a = a DOCKED;
	    };
	}
} TOOLBAR;

copySession 'Копировать'(Agreement agreement)  { 
	NESTEDSESSION {
	    NEW a = Agreement {
	        copyData(agreement, a);
	        SHOW agreement OBJECTS a = a DOCKED;
	    };
	}
} TOOLBAR;

EXTEND FORM agreements
    PROPERTIES(a) copy
;

// ---------------------------------------------- Расширение формы организации --------------------------------- //

in 'Присоединить' = DATA LOCAL BOOLEAN (Agreement);

FORM agreementsCustomer 'Соглашения'

    OBJECTS s=LegalEntity PANEL
    PROPERTIES(s) name

    OBJECTS c=LegalEntity PANEL
    PROPERTIES(c) name

    OBJECTS ag=Agreement
    PROPERTIES(ag) READONLY name, number, series, date, time,
                            fromDate, fromTime, toDate, toTime,
                            nameCurrency, namePriceListType, note

    PROPERTIES in(ag)
;

DESIGN agreementsCustomer {
    NEW mainContainer{
        fill = 1;
        REMOVE BOX(s);
        REMOVE BOX(c);
        MOVE BOX(ag);
    }
    MOVE TOOLBARBOX;
}

addAgreementsSupplierCustomer 'Присоединить'(LegalEntity supplier, LegalEntity customer)  { 

    DIALOG agreementsCustomer OBJECTS s=supplier, c=customer DO
        FOR in(Agreement agreement) DO {
            dataInSupplier(agreement,supplier) <- TRUE;
            dataInCustomer(agreement,customer) <- TRUE;
        }
} TOOLBAR;


addAgreementsCustomerSupplier 'Присоединить'(LegalEntity customer, LegalEntity supplier)  { 

    DIALOG agreementsCustomer OBJECTS s=supplier, c=customer DO
        FOR in(Agreement agreement) DO {
            dataInSupplier(agreement,supplier) <- TRUE;
            dataInCustomer(agreement,customer) <- TRUE;
        }
} TOOLBAR;

includeAllCompanies 'Включать по умолчанию все компании в соглашение' () = DATA BOOLEAN ();
EXTEND FORM options PROPERTIES() includeAllCompanies;
DESIGN options { agreement { MOVE PROPERTY(includeAllCompanies()); } }

createAgreementSupplierCustomer 'Добавить'(LegalEntity supplier, LegalEntity customer)  { 
	NESTEDSESSION{
	    NEW ag = Agreement {
	        dataInCustomer(ag, customer) <- TRUE;
	        dataInSupplier(ag, supplier) <- TRUE;
	        
	        IF isCompany(customer) THEN {
	            dataInCustomer(ag, LegalEntity l) <- TRUE WHERE isCompany(l) AND active(l);
	        }
	        IF isCompany(supplier) THEN {
	            dataInSupplier(ag, LegalEntity l) <- TRUE WHERE isCompany(l) AND active(l);
	        }
	        SHOW agreement OBJECTS a = ag DOCKED;
	    }
	}
} IMAGE 'add.png' CHANGEKEY 'INSERT' HIDE TOOLBAR;

EXTEND FORM legalEntity

    OBJECTS ags=Agreement GRID
    PROPERTIES(ags, s, l) SHOWIF isCustomer(l) isDefault ON CHANGE changeUserDefaultAgreement(ags, s, l)
    PROPERTIES(ags, l) SHOWIF isCustomer(l) inCustomer
    PROPERTIES(ags) SHOWIF isCustomer(l) READONLY name, number, series, date, time,
                             fromDate, fromTime, toDate, toTime,
                             nameCurrency, namePriceListType, note

    PROPERTIES(ags) SHOWIF isCustomer(l) NESTEDSESSION DELETE GRID, EDIT 
    PROPERTIES(ags) SHOWIF isCustomer(l)               copySession
    PROPERTIES SHOWIF isCustomer(l) createAgreementSupplierCustomer(s, l) DRAW ags , addAgreementsSupplierCustomer(s, l) DRAW ags 
    FILTERS inCustomer(ags, l) AND inSupplier(ags, s),
            isSeller(s),
            l != s

//    FILTERGROUP filtersSupplier
//        FILTER 'Есть соглашение' 'F11' countAgreementSupplierCustomer(s, l)

    OBJECTS agc=Agreement GRID 
    PROPERTIES(agc, c) SHOWIF isSupplier(l) READONLY inCustomer
    PROPERTIES(agc, l, c) SHOWIF isSupplier(l) isDefault ON CHANGE changeUserDefaultAgreement(agc, l, c)
    PROPERTIES(agc) SHOWIF isSupplier(l) READONLY name, number, series, date, time,
                             fromDate, fromTime, toDate, toTime,
                             nameCurrency, namePriceListType, note
    PROPERTIES(agc) SHOWIF isSupplier(l) NESTEDSESSION DELETE GRID, EDIT
    PROPERTIES(agc) SHOWIF isSupplier(l)               copySession

    PROPERTIES SHOWIF isSupplier(l) createAgreementSupplierCustomer(l, c) DRAW agc , addAgreementsCustomerSupplier (c,l) DRAW agc 
    FILTERS inCustomer(agc, c) AND inSupplier(agc, l),
            isBuyer(c),
            c != l

//    FILTERGROUP filters3
//        FILTER 'Есть соглашение' 'F9' countAgreementSupplierCustomer(l, c)

;

DESIGN legalEntity {
    extendContainer {
        docPurchaseContainer{
            MOVE BOX(ags);
        }

        docSaleContainer{
            MOVE BOX(agc);
        }
    }
}

// ----------------------------------------- Метакод по добавлению соглашений в документы -------------------------------------- //

META defineDocumentAbstractHeaderAgreement (object)
    agreement (object) = ABSTRACT Agreement (###object) MATERIALIZED INDEXED;
    nameAgreement 'Соглашение' (###object object)= name(agreement(object)) IN documentPrm CHARWIDTH 5;
END
META defineDocumentHeaderAgreement (object)
    agreement (object) = DATA Agreement (###object);
    nameAgreement 'Соглашение' (###object object)= name(agreement(object)) IN documentPrm CHARWIDTH 5;
END
META defineDocumentInterfaceHeaderAgreement (object)
    @defineDocumentAbstractHeaderAgreement(object);
    @defineDocumentHeaderAgreement(user###object);
    agreement(User###object object) += agreement(object);

END

disableSetAgreement = DATA LOCAL BOOLEAN();

META deriveDocumentHeaderAgreement (object, supplierProp, customerProp, caption, NS)

    defaultAgreement = ABSTRACT Agreement (###object);
    changedDefaultAgreement = ABSTRACT Object (###object);
    overDefaultAgreement = OVERRIDE
        defaultAgreement(###object o), 
        defaultAgreement(supplierProp(o), customerProp(o), dateTime(o)) 
            IF currency(o) == currency(defaultAgreement(supplierProp(o), customerProp(o), dateTime(o)));
    skipSetAgreement = ABSTRACT BOOLEAN (###object);
    WHEN LOCAL
        (CHANGED(currency(###object o)) OR CHANGED(customerProp(o)) OR CHANGED(supplierProp(o)) OR  CHANGED(changedDefaultAgreement(o))) 
         AND NOT skipSetAgreement(o) AND NOT disableSetAgreement() NOINLINE DO
        agreement (o) <- overDefaultAgreement(o);
        
    dateFromConstraintAgreement###object 'Дата начала контроля сроков соглашения '##caption = DATA DATE ();  
    
    EXTEND FORM options 
        PROPERTIES NS###dateFromConstraintAgreement###object = dateFromConstraintAgreement###object()    
    ;
        
    DESIGN options {
        agreement {
            MOVE PROPERTY(NS###dateFromConstraintAgreement###object);
        }
    }          

    CONSTRAINT agreement(###object o) AND NOT (fromDateTime(agreement(o)) <= dateTime(o) 
               AND NOT (toDateTime(agreement(o)) < dateTime(o))) AND NOT (dateFromConstraintAgreement###object() > date(o)) AND 
               (CHANGED(agreement(o)) OR CHANGED(dateTime(o)))
               CHECKED BY agreement[###object]
               MESSAGE 'Соглашение просрочено или еще не действует';

    CONSTRAINT currency(###object o) != currency(agreement(o)) AND 
               (CHANGED(agreement(o)) OR CHANGED(currency(o))) 
               CHECKED BY agreement[###object]
               MESSAGE 'Валюта документа должны совпадать с валютой соглашения';

    CONSTRAINT agreement(###object o) AND NOT in###supplierProp(agreement(o), supplierProp(o)) AND 
               (CHANGED(agreement(o)) OR CHANGED(supplierProp(o)))
               CHECKED BY agreement[###object]
               MESSAGE 'Соглашение должно быть между заданными организациями (поставщик)';

    CONSTRAINT agreement(###object o)
               AND NOT in###customerProp(agreement(o), customerProp(o)) AND 
               (CHANGED(agreement(o)) OR CHANGED(customerProp(o)))
               CHECKED BY agreement[###object]
               MESSAGE 'Соглашение должно быть между заданными организациями (покупатель)';
END

META defineDocumentDetailAgreement (object, detail)
    agreement (###detail detail) = agreement(object(detail));
END

META defineDocumentInterfaceAgreement (object)
    @defineDocumentInterfaceHeaderAgreement(object);
    @defineDocumentDetailAgreement(object, object##Detail);
END


META deriveDocumentDetailPriceListTypeAgreement (object, detail, prefix)
    priceListTypeCustom = ABSTRACT PriceListType(###detail);
    changedPriceListTypeCustom = ABSTRACT VALUE BOOLEAN (###detail);
    WHEN LOCAL
        (CHANGED(agreement(object(###detail d))) OR
         CHANGED(priceListType(object(d))) OR
         CHANGED(sku(d)) OR 
         changedPriceListTypeCustom(d)) AND NOT CHANGED(priceListType(d)) DO {
            priceListType(d) <- OVERRIDE priceListTypeCustom(d),
                                         prefix###priceListType(agreement(object(d)), sku(d)),
                                         priceListType(object(d));                                         
        }
END
META deriveDocumentDetailPriceListTypeAgreement (object, prefix)
    @deriveDocumentDetailPriceListTypeAgreement(object, object###detail, prefix);
END

//--------------------------------------- Для двух объектов (object1 - документ)----------------------------------------------------------//
META defineDocumentHeaderAgreement (object1, object2)
    agreement (object1, object2) = DATA Agreement (###object1, ###object2);
    nameAgreement 'Соглашение' (object1 object1, object2 object2)= name(agreement (object1, object2)) IN documentPrm CHARWIDTH 5;
    defaultPriceListType (object1 object1, object2 object2) = priceListType(agreement (object1, object2));
END

META defineDocumentInterfaceHeaderAgreement(object1Class, object2Class, supplierProp, customerProp)
    @defineDocumentHeaderAgreement(object1Class, object2Class);
    agreement (object1Class o1, object2Class o2) <- agreement(o1)
        IF currency(o1) == currency(agreement(o1))
        AND in(o1, o2)
    WHEN CHANGED(currency(o1)) AND o2 IS object2Class OR
         CHANGED(agreement(o1)) AND o2 IS object2Class OR
         CHANGED(in(o1, o2));

    CONSTRAINT currency(object1Class o1) != currency(agreement(o1, object2Class o2))
               CHECKED BY agreement[object1Class,object2Class]
               MESSAGE 'Валюта документа должны совпадать с валютой соглашения';

    CONSTRAINT agreement(object1Class o1, object2Class o2)
               AND NOT in###supplierProp(agreement(o1, o2), supplierProp(o1))
               CHECKED BY agreement[object1Class,object2Class]
               MESSAGE 'Соглашение должно быть между заданными организациями (поставщик)';

    CONSTRAINT agreement(object1Class o1, object2Class o2)
               AND NOT in###customerProp(agreement(o1, o2), customerProp(o1))
               CHECKED BY agreement[object1Class,object2Class]
               MESSAGE 'Соглашение должно быть между заданными организациями (покупатель)';
END
