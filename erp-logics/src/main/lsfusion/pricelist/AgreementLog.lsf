MODULE AgreementLog;

REQUIRE Agreement;

NAMESPACE Agreement;

CLASS AgreementLog 'Запись лога соглашений';
TABLE agreementLog(AgreementLog);

document = DATA Agreement (AgreementLog);// INDEXED;

seriesNumber 'Серия/Номер' = DATA STRING[48] (AgreementLog) IN id;
dateTimeDocument 'Дата и время соглашения' = DATA DATETIME(AgreementLog) IN id;
fromDateTime 'Дата/время с' = DATA DATETIME(AgreementLog);
toDateTime 'Дата/время по' = DATA DATETIME(AgreementLog);
suppliers 'Поставщики' = DATA STRING[1500] (AgreementLog) CHARWIDTH 30 IN id;

hostnameComputer 'Имя компьютера' = DATA ISTRING[100] (AgreementLog); 
userLogin 'Логин пользователя' = DATA STRING[100] (AgreementLog); 
nameContact 'Имя пользователя' =  DATA STRING[100] (AgreementLog) IN id;
dateTimeSession 'Время' = DATA DATETIME (AgreementLog) IN id;
dateSession 'Дата' (AgreementLog el) = DATE(dateTimeSession(el));

CLASS TypeAgreementChange 'Тип изменения' {
    add 'Добавление',
    delete 'Удаление',
    changeFrom 'Изменение даты/времени с',
    changeTo 'Изменение даты/времени по',
    changeSuppliers 'Изменение поставщиков'
}

typeChange= DATA TypeAgreementChange (AgreementLog);
nameTypeChange 'Тип изменения' (AgreementLog l) = staticCaption(typeChange(l)) IN id;
note 'Примечание' = DATA STRING[255] (AgreementLog) CHARWIDTH 20;

WHEN SET (Agreement e IS Agreement) DO {
    NEW l = AgreementLog {        
        document(l) <- e;
        seriesNumber(l) <- seriesNumber(e); 
        dateTimeDocument(l) <- dateTime(e);   
        fromDateTime(l) <- fromDateTime(e);
        toDateTime(l) <- toDateTime(e);
        typeChange(l) <- TypeAgreementChange.add;
        hostnameComputer(l) <- hostnameCurrentComputer();
        userLogin(l) <- login(currentUser()); 
        nameContact(l) <- STRING[100](name(currentUser()));
        dateTimeSession(l) <- currentDateTime();             
        note(l) <- STRING[255]('Добавлен документ');              
        suppliers(l) <- supplier(e);
    }
}

WHEN DROPPED (Agreement e IS Agreement) DO {
    NEW l = AgreementLog {       
        seriesNumber(l) <- PREV(seriesNumber(e));  
        dateTimeDocument(l) <- PREV(dateTime(e));   
        fromDateTime(l) <- PREV(fromDateTime(e));
        toDateTime(l) <- PREV(toDateTime(e));
        typeChange(l) <- TypeAgreementChange.delete;
        hostnameComputer(l) <- hostnameCurrentComputer();
        userLogin(l) <- login(currentUser()); 
        nameContact(l) <- STRING[100](name(currentUser()));
        dateTimeSession(l) <- currentDateTime();             
        note(l) <- STRING[255]('Удален документ');         
        suppliers(l) <- PREV (supplier(e));
    }
}

WHEN CHANGED(fromDateTime(Agreement e)) DO {
    NEW l = AgreementLog {
        document(l) <- e;
        seriesNumber(l) <- seriesNumber(e); 
        dateTimeDocument(l) <- dateTime(e);   
        fromDateTime(l) <- fromDateTime(e);
        toDateTime(l) <- toDateTime(e);
        typeChange(l) <- TypeAgreementChange.changeFrom;
        hostnameComputer(l) <- hostnameCurrentComputer();
        userLogin(l) <- login(currentUser()); 
        nameContact(l) <- STRING[100](name(currentUser()));
        dateTimeSession(l) <- currentDateTime();             
        note(l) <- STRING[255](CONCAT '','Предыдущее значение: ', IF PREV(fromDateTime(e)) THEN STRING[20](PREV(fromDateTime(e))) ELSE 'пусто');      
        suppliers(l) <- supplier(e);
    }
}  
  
WHEN CHANGED(toDateTime(Agreement e)) DO {
    NEW l = AgreementLog {
        document(l) <- e;
        seriesNumber(l) <- seriesNumber(e); 
        dateTimeDocument(l) <- dateTime(e);   
        fromDateTime(l) <- fromDateTime(e);
        toDateTime(l) <- toDateTime(e);
        typeChange(l) <- TypeAgreementChange.changeTo;
        hostnameComputer(l) <- hostnameCurrentComputer();
        userLogin(l) <- login(currentUser()); 
        nameContact(l) <- STRING[100](name(currentUser()));
        dateTimeSession(l) <- currentDateTime();             
        note(l) <- STRING[255](CONCAT '','Предыдущее значение: ', IF PREV(toDateTime(e)) THEN STRING[20](PREV(toDateTime(e))) ELSE 'пусто');      
        suppliers(l) <- supplier(e);
    }
}      

WHEN CHANGED(supplier(Agreement e)) DO {
    NEW l = AgreementLog {
        document(l) <- e;
        seriesNumber(l) <- seriesNumber(e); 
        dateTimeDocument(l) <- dateTime(e);   
        fromDateTime(l) <- fromDateTime(e);
        toDateTime(l) <- toDateTime(e);
        typeChange(l) <- TypeAgreementChange.changeSuppliers;
        hostnameComputer(l) <- hostnameCurrentComputer();
        userLogin(l) <- login(currentUser()); 
        nameContact(l) <- STRING[100](name(currentUser()));
        dateTimeSession(l) <- currentDateTime();             
        note(l) <- STRING[255](CONCAT '','Предыдущее значение: ', IF PREV(supplier(e)) THEN STRING[150](PREV(supplier(e))) ELSE 'пусто');      
        suppliers(l) <- supplier(e);
    }
}      

FORM AgreementLogs 'Журнал изменения соглашений'
    OBJECTS d = AgreementLog
    PROPERTIES(d) READONLY seriesNumber, dateTimeDocument, fromDateTime, toDateTime, suppliers,
                  hostnameComputer, userLogin, dateTimeSession, nameTypeChange, note
;

DESIGN AgreementLogs {
    BOX {
        MOVE BOX(d);
        MOVE TOOLBARBOX;        
    }
}

NAVIGATOR {
    logs {
        NEW AgreementLogs;
    }
}

EXTEND FORM agreement
    OBJECTS l = AgreementLog
    PROPERTIES(l) READONLY seriesNumber, dateTimeDocument, fromDateTime, toDateTime, suppliers,
                  hostnameComputer, userLogin, dateTimeSession, nameTypeChange, note
    FILTERS document(l) == a
;

DESIGN agreement {
    tabContainer{
        NEW documentHistory {
            caption = 'История';
            horizontal = FALSE;
            MOVE BOX(l);
        }        
    }
}

@defineLog (AgreementLog, 'изменений соглашений', log, dateSession);