MODULE PriceList;

REQUIRE PriceListLedger, StockTax, StockSkuDocument, Item, SkuList;

NAMESPACE PriceList;

// --------------------------- Пользовательские виды цен ------------------------- //

CLASS DataPriceListType 'Пользовательский вид цены' : LedgerPriceListType;

@defineExternalizable(dataPriceListType, STRING[100]);
id (DataPriceListType p) += id(p);

batchLedger 'Использовать для партий свои цены' = DATA BOOLEAN (DataPriceListType);
externalStocksBatchLedger 'Использовать для партий свои цены и для чужих складов' = ABSTRACT BOOLEAN (DataPriceListType);
batch (DataPriceListType priceListType, Stock stock) += WHEN priceListType IS DataPriceListType AND (isCompany(stock) OR (stock IS Stock AND externalStocksBatchLedger(priceListType)))
                                                        THEN batchLedger(priceListType);

name 'Наименование' = DATA ISTRING[50](DataPriceListType);
name(DataPriceListType type) += name(type) IF type IS DataPriceListType;

includeVAT 'Цена с НДС' = DATA BOOLEAN (DataPriceListType);
includeVAT (DataPriceListType priceListType) += includeVAT(priceListType);

@defineDocumentHeaderCurrency(dataPriceListType);
currency(DataPriceListType dataPriceListType) += currency(dataPriceListType);

differentOrganizations 'Для разных организаций' = DATA BOOLEAN (DataPriceListType); 
differentOrganizations(DataPriceListType type) += WHEN type IS DataPriceListType THEN differentOrganizations(type);   

notNull 'Должна быть задана цена' = DATA BOOLEAN (DataPriceListType);

FORM dataPriceListType 'Пользовательский вид цен'
    OBJECTS d = DataPriceListType PANEL
    PROPERTIES(d) name, id SHOWIF showIDs(), includeVAT[PriceListType],
                  nameCurrency, nameRoundCondition, batchLedger, 
                  differentOrganizations, notNull

    EDIT DataPriceListType OBJECT d
;

DESIGN dataPriceListType {
    BOX(d){
        MOVE PROPERTY(name(d));
        MOVE PROPERTY(id(d));
        MOVE PROPERTY(includeVAT(d));
        MOVE PROPERTY(nameCurrency(d));
        MOVE PROPERTY(nameRoundCondition(d));
        MOVE PROPERTY(batchLedger(d));
        MOVE PROPERTY(notNull(d));
    }
}

FORM dataPriceListTypes 'Пользовательские виды цен'
    OBJECTS p = DataPriceListType
    PROPERTIES(p) READONLY name, nameCurrency, nameRoundCondition
    PROPERTIES(p) READONLY includeVAT, notNull

    LIST DataPriceListType OBJECT p
;

EXTEND FORM priceListTypes
    PROPERTIES(pt) NEWSESSION addDataPriceListType = NEW[DataPriceListType]
//    PROPERTIES(pt) SHOWIF showIDs() READONLY idDataPriceListType
;

DESIGN priceListTypes {
    PROPERTY (addDataPriceListType) {
        caption = 'Добавить пользовательскую цену';
    }
}

overCopy (DataPriceListType priceListType) + { 
	NEWSESSION {
	    IF priceListType IS DataPriceListType THEN {
	        NEW p = DataPriceListType {
	            batchLedger(p) <- batchLedger(priceListType);
	            includeVAT(p) <- includeVAT(priceListType);
	            roundCondition(p) <- roundCondition(priceListType);
	            currency(p) <- currency(priceListType);
	                                    
	            SHOW dataPriceListType OBJECTS d=p DOCKED; 
	        }
	    }
	}
}

// --------------------------- Прайс-листы ------------------------- //

CLASS ABSTRACT PriceList 'Прайс' : Document;
CLASS ABSTRACT PriceListDetail 'Строка прайса' : DocumentDetail;

CLASS UserPriceList 'Прайс (польз.)' : PriceList;
CLASS UserPriceListDetail 'Строка прайса (польз.)' : PriceListDetail;

@defineDocumentInterface(priceList);
TABLE sessionPriceList (Session, PriceList);

@deriveDocumentHeaderTimePrefix(UserPriceList, );

@defineExternalizable(userPriceList, STRING[100]);

TABLE sessionPriceListDetail (Session, PriceListDetail);

// Шапка

@defineDocumentInterfaceDataTimePrefix(priceList, from, ' c');
@deriveDocumentHeaderTimePrefix(UserPriceList, from);

INDEX fromDateTime(PriceList p), p;

toDate 'Дата по' = ABSTRACT DATE (PriceList) IN documentHeader MATERIALIZED;
toTime 'Время по' = ABSTRACT TIME (PriceList) IN documentHeader MATERIALIZED;
toDateTime 'Дата/время по'(PriceList priceList) = dateTimeToDateTime(toDate(priceList), toTime(priceList)) MATERIALIZED INDEXED;

CONSTRAINT toDate(PriceList p) AND NOT toTime(p) MESSAGE 'Время по должно быть заполнено если заполнена дата по';

toDate 'Дата по' = DATA DATE(UserPriceList);
toTime 'Время по' = DATA TIME(UserPriceList);
toDateTime 'Дата/время по'(UserPriceList userPriceList) = dateTimeToDateTime(toDate(userPriceList), toTime(userPriceList));

toDate(UserPriceList userPriceList) += toDate(userPriceList);
toTime(UserPriceList userPriceList) += toTime(userPriceList);
skipChangeToTime = ABSTRACT  BOOLEAN (UserPriceList);
WHEN LOCAL CHANGED(toDate(UserPriceList o)) AND NOT toTime(o) AND NOT skipChangeToTime(o)  DO {
    toTime(o) <- 23:59;
} 
//
//@deriveDocumentHeaderTimeBeforePrefix(UserPriceList, to){
//    WHEN LOCAL CHANGED(toDate(UserPriceList o)) AND NOT toTime(o) DO {
//        toTime(o) <- 23:59;
//    } 
//};

@defineDocumentInterfaceNumber(priceList, BPSTRING[2]);
@defineNumeratedDefault(UserPriceList, 'Прайсы', 'ПЛ');

@defineDocumentInterfacePosted(priceList);

@defineDocumentInterfaceDescription(priceList, 'Прайс');

//@defineDocumentInterfaceLegalEntity(priceList, company, 'Организация');
@defineDocumentInterfaceDataLegalEntity(priceList, company, 'Организация');
userPriceList (legalEntity) = GROUP MAX UserPriceList userPriceList BY company(userPriceList);
@defineDocumentInterfaceDataStock(priceList, stock, 'Склад организации', company);
CONSTRAINT company(UserPriceList priceList) AND companyStock(priceList) AND NOT
in(company(priceList), companyStock(priceList))
    CHECKED BY companyStock[UserPriceList]
        MESSAGE 'Организация и склад организации для прайса не имеют связи';

@defineDocumentInterfaceCurrency(priceList);

groupType = DATA GroupType (UserPriceList);
nameGroupType 'Тип классификатора' = name(groupType(UserPriceList UserPriceList));

// Строки

@defineDocumentInterfaceDetailDataTimePrefix(priceList, to, ' по');

sku = ABSTRACT Sku (PriceListDetail) MATERIALIZED;
INDEX sku(PriceListDetail d), fromDateTime(d), d;
prevSku (PriceListDetail priceListDetail) = PREV(sku(priceListDetail));
idSku 'Код' (PriceListDetail priceListDetail) = id(sku(priceListDetail));
nameSku 'Наименование' (PriceListDetail priceListDetail) = name(sku(priceListDetail));
prevNameSku 'Наименование' (PriceListDetail priceListDetail) = prevName(sku(priceListDetail)) IN id;
shortNameUOMSku 'Ед. изм.' = shortNameUOM(sku(PriceListDetail priceListDetail)) IN base;
idBarcodeSku 'Штрихкод' (PriceListDetail priceListDetail) = idBarcode(sku(priceListDetail)) IN id;
allBarcodesSku 'Все штрих-коды' (PriceListDetail priceListDetail) = allBarcodes(sku(priceListDetail));
nameCountrySku 'Страна' (PriceListDetail priceListDetail) = nameCountry(sku(priceListDetail));

@defineDocumentDetailSkuCustomPrefix(userPriceListDetail, sku, , );
sku(UserPriceListDetail priceListDetail) += sku(priceListDetail);

@defineDocumentInterfaceDetailQuantity(priceList);
@defineAddDetailDialogBarcode(userPriceList, sku);

// ---------------- Цены для видов цен

// Шапка
TABLE sessionPriceListPriceListType (Session, PriceList, PriceListType);
TABLE priceListPriceListType (PriceList, PriceListType);
TABLE priceListDataPriceListType (PriceList, DataPriceListType);

show 'Показывать цены' = ABSTRACT BOOLEAN (PriceList, PriceListType) MATERIALIZED;
show 'Показывать цены' = DATA BOOLEAN (UserPriceList, PriceListType);
show (UserPriceList priceList, PriceListType priceListType) += show(priceList, priceListType);

orderShow 'Порядок (показ.)' = ABSTRACT INTEGER (PriceList, PriceListType) MATERIALIZED;
orderShow 'Порядок (показ.)' = DATA INTEGER (UserPriceList, PriceListType);
orderShow (UserPriceList priceList, PriceListType priceListType) += orderShow(priceList, priceListType);

in 'Изменять цены' = ABSTRACT BOOLEAN (PriceList, DataPriceListType) MATERIALIZED;
in 'Изменять цены' = DATA BOOLEAN (UserPriceList, DataPriceListType);
in (UserPriceList priceList, DataPriceListType dataPriceListType) += in(priceList, dataPriceListType);

orderIn 'Порядок (изм.)' = ABSTRACT INTEGER (PriceList, DataPriceListType) MATERIALIZED;
orderIn 'Порядок (изм.)' = DATA INTEGER (UserPriceList, DataPriceListType);
orderIn (UserPriceList priceList, DataPriceListType dataPriceListType) += orderIn(priceList, dataPriceListType);

priceListTypes 'Цены' (PriceList priceList) = GROUP
                                               CONCAT name[PriceListType](DataPriceListType priceListType) IF in(priceList, priceListType) , ', '
                                               ORDER priceListType CHARWIDTH 10 MATERIALIZED;
priceListTypes 'Цены' (PriceListDetail d) = priceListTypes(priceList(d));

priceListType (PriceList p) = GROUP MIN DataPriceListType t IF in(p, t) MATERIALIZED;

// Строки
TABLE sessionPriceListDetailPriceListType (Session, PriceListDetail, PriceListType);
TABLE priceListDetailPriceListType (PriceListDetail, PriceListType);
TABLE priceListDetailDataPriceListType (PriceListDetail, DataPriceListType);

price 'Цена (новая)' = ABSTRACT NUMERIC[16,4] (PriceListDetail, DataPriceListType) MATERIALIZED;
price 'Цена (новая)' = DATA NUMERIC[16,4] (UserPriceListDetail, DataPriceListType);
price (UserPriceListDetail priceListDetail, DataPriceListType dataPriceListType) += price(priceListDetail, dataPriceListType);

in (PriceListDetail detail, DataPriceListType type) = in(priceList(detail), type);
in (UserPriceListDetail detail, DataPriceListType type) = in(userPriceList(detail), type);

price(PriceListDetail detail, DataPriceListType type) => in (detail, type) RESOLVE RIGHT;
WHEN SET(price(PriceListDetail detail, DataPriceListType type)) AND NOT in(detail, type) DO
    price(detail, type) <- NULL;

//НДС

valueVAT 'НДС' (PriceListDetail d) =
    valueVAT(sku(d), fromDate(d));
valueVAT 'НДС' (UserPriceListDetail d) =
    valueVAT(sku(d), fromDate(d));

// пока не смотрим на страну, так как могут быть прайсы без организаций
//valueVAT 'НДС' (PriceListDetail d) =
//    valueVAT(sku(d), country(company(d)), fromDate(d));
//valueVAT 'НДС' (UserPriceListDetail d) =
//    valueVAT(sku(d), country(company(d)), fromDate(d));

// ---------------------  Склады, для которых действует прайс

// Шапка
allStocks 'Отм' = ABSTRACT BOOLEAN (PriceList) MATERIALIZED;
allStocks 'Отм' = DATA BOOLEAN (UserPriceList);
allStocks (UserPriceList priceList) += allStocks(priceList);

TABLE priceListStockGroup(PriceList, StockGroup);
TABLE dataPriceListStockGroup(PriceList, StockGroup);
dataIn 'Отм' = ABSTRACT BOOLEAN (PriceList, StockGroup) MATERIALIZED TABLE dataPriceListStockGroup;
dataIn 'Отм' = DATA BOOLEAN (UserPriceList, StockGroup) TABLE dataPriceListStockGroup;
dataIn (UserPriceList priceList, StockGroup stockGroup) += dataIn(priceList, stockGroup);

TABLE priceListStock(PriceList, Stock);
TABLE dataPriceListStock(PriceList, Stock);
dataIn 'Отм' = ABSTRACT BOOLEAN (PriceList, Stock) MATERIALIZED TABLE dataPriceListStock;
dataIn 'Отм' = DATA BOOLEAN (UserPriceList, Stock);
dataIn (UserPriceList priceList, Stock stock) += dataIn(priceList, stock);

levelParent (PriceList priceList, StockGroup stockGroup) = GROUP
                                                               MIN level(stockGroup, StockGroup parent) IF dataIn(priceList, parent) MATERIALIZED;

inParent (PriceList priceList, StockGroup stockGroup) = TRUE IF levelParent (priceList, stockGroup) MATERIALIZED;

in 'Отм' (PriceList priceList, StockGroup stockGroup) = OVERRIDE
    dataIn(priceList, stockGroup),
    inParent (priceList, stockGroup),
    allStocks(priceList) AND stockGroup IS StockGroup;

allow = ABSTRACT BOOLEAN (Stock, PriceList);

skip = ABSTRACT BOOLEAN (Stock, PriceList);

in 'Отм' (PriceList priceList, Stock stock) =
    (OVERRIDE dataIn(priceList, stock),
              (in(priceList, stockGroup(stock)) AND NOT skip(stock, priceList) AND active(stock)))
    AND allow(stock, priceList) MATERIALIZED;     
             
@defineBackgroundNearestBoolean(allStocks, in, priceList, stock, inParent, isCompany);                    

stocks 'Склады' (PriceList priceList) = ISTRING[2000](GROUP
                                       CONCAT ISTRING[250] (name(Stock stock)) IF in(priceList, stock) , ', '
                                       ORDER stock) CHARWIDTH 20 MATERIALIZED;
stocks 'Склады' (PriceListDetail d) = stocks(priceList(d));

stock (PriceList p) = GROUP MIN Stock t IF in(p, t) MATERIALIZED;
                                       
// История
@defineCreatedAbstract(PriceListDetail);

createdTime (UserPriceListDetail d) += createdTime(userPriceList(d));
createdUser (UserPriceListDetail d) += createdUser(userPriceList(d));
createdComputer (UserPriceListDetail d) += createdComputer(userPriceList(d));

// Партии
@defineDocumentInterfaceDetailBatch(priceList, batch);
//@deriveDocumentDetailPricePriceListTypeVATBatch(userPriceList, stockProp, userPriceList);
useCustomPurchaseBatch = ABSTRACT VALUE BOOLEAN (UserPriceListDetail);
changePurchaseBatchCustom ABSTRACT (UserPriceListDetail);

changePurchaseBatch(UserPriceListDetail userPriceListDetail)  { 
    IF NOT useCustomPurchaseBatch(userPriceListDetail) THEN {
        DIALOG dialogBatch OBJECTS sk = sku(userPriceListDetail), bt = batch(userPriceListDetail) INPUT NULL NEWSESSION DO {
            batch(userPriceListDetail) <- bt;
        }
    } ELSE {
        changePurchaseBatchCustom(userPriceListDetail);
    }
}

replace(Sku s, Batch b) + {  sku(UserPriceListDetail detail) <- s WHERE batch(detail) == b;}
//@defineBalancesBatch(priceListDetail); //-- показываем по нажатию правой клавиши остатки партии
//@defineBalancesBatch(userPriceListDetail); //-- показываем по нажатию правой клавиши остатки партии
//@defineMovementBatch(priceListDetail, stockProp); //-- показываем по нажатию правой клавиши движение по партии
//@defineMovementBatch(userPriceListDetail, stockProp); //-- показываем по нажатию правой клавиши движение по партии

exclude 'Исключить' = ABSTRACT BOOLEAN (PriceListDetail);
exclude 'Исключить' = DATA BOOLEAN (UserPriceListDetail);
exclude(UserPriceListDetail d) += exclude(d);

// ------- Проведение по priceListLedger ----- //

EXTEND CLASS PriceListDetail : PriceListLedger;

fromDateTime (PriceListDetail ledger) += fromDateTime(ledger);
toDateTime (PriceListDetail ledger) += toDateTime(ledger);

isPosted(PriceListDetail ledger) += isPosted(ledger);
skip(PriceListDetail ledger) += exclude(ledger);

sku (PriceListDetail ledger) += sku(ledger);
in (PriceListDetail ledger, Batch batch) += batch(ledger) == batch; 

company (PriceListDetail ledger) += company(ledger);
companyStockData 'Склад организации' = DATA Stock (PriceListDetail); 
nameCompanyStockData 'Склад организации' (PriceListDetail detail) = name(companyStockData(detail));
companyStock (PriceListDetail ledger) += OVERRIDE companyStockData(ledger), companyStock(ledger);
description (PriceListDetail ledger) += description(priceList(ledger));

skip = ABSTRACT BOOLEAN (PriceListDetail, DataPriceListType); 
in (PriceListDetail ledger, DataPriceListType type) += in(ledger, type) AND NOT skip(ledger, type);
price (PriceListDetail ledger, DataPriceListType type) += price(ledger, type);
in (PriceListDetail ledger, Stock stock) += in(priceList(ledger), stock);

createdTime (PriceListDetail d) += createdTime(d);
createdUser (PriceListDetail d) += createdUser(d);
createdComputer (PriceListDetail d) += createdComputer(d);

// -------------- Текущая действующая цена --------------- //

currentPrice 'Действующая цена' (UserPriceListDetail priceListDetail, PriceListType priceListType, Stock stock) =
    IF in[UserPriceListDetail,DataPriceListType](priceListDetail, priceListType) THEN
        prevPriceB(priceListType, sku(priceListDetail), stock, fromDateTime(priceListDetail))
    ELSE
        prevPriceA(priceListType, sku(priceListDetail), stock, fromDateTime(priceListDetail));

// Рассчитываем цены для строк
viewPrice 'Цена' = DATA LOCAL NUMERIC[16,4] (UserPriceListDetail, PriceListType);

overUpdateViewPriceDetail ABSTRACT LIST (UserPriceListDetail, Stock);

updateViewPriceDetail(UserPriceListDetail d, PriceListType t, Stock s)  { 
    viewPrice(d, t) <- currentPrice(d, t, s);
    overUpdateViewPriceDetail(d, s);
}

updateViewPriceDetail (UserPriceListDetail d, Stock s)  { 
    FOR show(userPriceList(d), PriceListType t) NOINLINE (t) DO
        updateViewPriceDetail(d, t, s);
}

currentPriceUser 'Действующая цена' (Sku sku, PriceList priceList, PriceListType priceListType, Stock stock) =
    IF in[UserPriceList,DataPriceListType](priceList, priceListType) THEN
        prevPriceB(priceListType, sku, stock, fromDateTime(priceList))
    ELSE
        prevPriceA(priceListType, sku, stock, fromDateTime(priceList));

currentPrice 'Действующая цена' (Batch batch, PriceList priceList, PriceListType priceListType, Stock stock) =
    IF in[UserPriceList,DataPriceListType](priceList, priceListType) THEN
        prevPriceB(priceListType, sku(batch), stock, fromDateTime(priceList))
    ELSE
        prevPriceA(priceListType, sku(batch), stock, fromDateTime(priceList));

changePrice 'Изменение, %' (UserPriceListDetail priceListDetail, DataPriceListType dataPriceListType) =
    round2(price(priceListDetail, dataPriceListType) * 100.0 /
    (viewPrice (priceListDetail, dataPriceListType) IF viewPrice (priceListDetail, dataPriceListType) != 0) - 100.0);

//changePriceUserPriceListDetailDataPriceListTypeStock 'Изменение, %' (priceListDetail, dataPriceListType, stock) =
//    priceUserPriceListDetailDataPriceListType(priceListDetail, dataPriceListType) * 100.0 /
//    (currentPriceUserPriceListDetailPriceListTypeStock (priceListDetail, dataPriceListType, stock) IF currentPriceUserPriceListDetailPriceListTypeStock (priceListDetail, dataPriceListType, stock) != 0) - 100.0;

// Заголовки колонок
headerNameCurrentData (PriceListType dataPriceListType) =
    name(dataPriceListType) + ' (старая)' CHARWIDTH 30;

headerNameChangeData (PriceListType dataPriceListType) =
    name(dataPriceListType) + ' (изменение, %)' CHARWIDTH 30;

headerNameData (PriceListType dataPriceListType) =
    name(dataPriceListType) CHARWIDTH 30;

overNameData = ABSTRACT CASE ISTRING[100] (PriceListDetail, PriceListType);
headerNameData (PriceListDetail d, PriceListType pt) = OVERRIDE overNameData(d, pt), name(pt) CHARWIDTH 30;
    
headerNameCompanyData (PriceListType dataPriceListType) = 'Организация (старая)' IF dataPriceListType IS PriceListType;    

// Цвета колонок
backgroundCurrent 'Цвет' (DataPriceListType dataPriceListType) = RGB(255,238,165) IF dataPriceListType IS DataPriceListType;
backgroundChange 'Цвет' (DataPriceListType dataPriceListType) = RGB(232,184,146) IF dataPriceListType IS DataPriceListType;
background 'Цвет' (DataPriceListType dataPriceListType) = RGB(213,249,185) IF dataPriceListType IS DataPriceListType;

// Подбор товаров SKU
detail= GROUP SUM 1 BY sku(UserPriceListDetail detail), userPriceList(detail);

in 'Вкл.' (Sku sku, UserPriceList price) = TRUE IF detail(sku, price);

changeIn(Sku sku, UserPriceList priceList)  { 
    INPUT b = BOOLEAN DO
        IF detail(sku, priceList) THEN {
            IF NOT b THEN
                DELETE UserPriceListDetail detail WHERE sku == sku(detail) AND priceList == userPriceList(detail);
        } ELSE
            IF b THEN 
                NEW d = UserPriceListDetail {
                   userPriceList(d) <- priceList;
                   sku(d) <- sku;
                }
}

// Подбор товаров batch
detail(batch, price) = GROUP SUM 1 IF Batch bbatch == batch(UserPriceListDetail detail) AND UserPriceList uprice == userPriceList(detail)
                                           BY batch(detail), userPriceList(detail);

in 'Вкл.' (Batch batch, UserPriceList price) = TRUE IF detail(batch, price);

changeIn(Batch batch, UserPriceList priceList)  { 
    INPUT b = BOOLEAN DO
        IF detail(batch, priceList) THEN {
            IF NOT b THEN
                DELETE UserPriceListDetail detail WHERE batch == batch(detail) AND priceList == userPriceList(detail);
        } ELSE
            IF b THEN 
                NEW d = UserPriceListDetail {
                   userPriceList(d) <- priceList;
                   batch(d) <- batch;
                   sku(d) <- sku(batch);
                }
}

// ------------- Подбор документов ----------------- //

isPosted[Document](PriceList priceList) += isPosted(priceList);
number[Document](PriceList priceList) += number(priceList);
series[Document](PriceList priceList) += series(priceList);
date[Document](PriceList priceList) += date(priceList);
supplier(PriceList priceList) += company(priceList);

index[DocumentDetail](PriceListDetail priceList) += index(priceList);
sku[DocumentDetail](PriceListDetail priceList) += sku(priceList);

priceListType (PriceListDetail detail)= priceListType(priceList(detail));
namePriceListType 'Вид цены' (PriceListDetail priceListDetail) = name(priceListType(priceListDetail));
price 'Цена' (PriceListDetail priceListDetail) = price(priceListDetail, priceListType(priceListDetail));

price[DocumentDetail](PriceListDetail detail) += price(detail);

document(PriceListDetail detail) += priceList(detail);

@implementDocumentForm(priceList, pl, 'Прайс');

overFillDocument ABSTRACT LIST (DocumentDetail, UserPriceListDetail);
fillDocument 'Подбор документа'(UserPriceList userPriceList)  { 
    DIALOG documents DO
        FOR inSession(document(DocumentDetail documentDetail)) NEW i = UserPriceListDetail DO {
            userPriceList(i) <- userPriceList;
            sku(i) <- sku(documentDetail);
            overFillDocument(documentDetail, i);
        }
} TOOLBAR;

// ---------------------- Активность --------------------------- //
isActive(PriceList p, DATETIME dt) = fromDateTime(p) <= (dt AS DATETIME) AND NOT toDateTime(p) < dt;
isActive(PriceList p) = isActive(p, currentDateTime());

isActive(PriceListDetail d) = fromDateTime(d) <= currentDateTime() AND NOT toDateTime(d) < currentDateTime();

CONSTRAINT notNull(DataPriceListType priceListType) AND isActive(PriceListDetail detail) AND in(detail, priceListType) AND NOT price(detail, priceListType)
    MESSAGE 'Должна быть задана цена';

// Цвета
//backgroundPriceList 'Цвет' (priceList) =
//    IF currentDateTime() > toDateTimePriceList(priceList)
//        THEN RGB(255, 226, 226) IF priceList IS PriceList
//    ELSE
//        RGB(226, 255, 226) IF fromDateTimePriceList(priceList) > currentDateTime();

isOverBackground (priceList) =  ABSTRACT BOOLEAN (PriceList);  
overBackground (priceList) =  ABSTRACT CASE COLOR (PriceList);  
        
defaultBackground 'Цвет' (PriceList priceList) = CASE WHEN fromDateTime(priceList) > currentDateTime() OR NOT isPosted(priceList) THEN RGB(224,255,224)
                                              WHEN toDateTime(priceList) < currentDateTime() THEN RGB(255,224,224);      
                                                
background 'Цвет' (PriceList priceList) = IF isOverBackground (priceList) THEN overBackground (priceList)
                                                                                ELSE defaultBackground(priceList);

background 'Цвет' (priceListDetail) =  ABSTRACT CASE COLOR (PriceListDetail);
backgroundInput 'Цвет' =  ABSTRACT CASE COLOR (Batch);
//    IF currentDateTime() > toDateTimePriceListDetail(priceListDetail)
//        THEN RGB(255, 226, 226) IF priceListDetail IS PriceListDetail
//    ELSE
//        RGB(226, 255, 226) IF fromDateTimePriceListDetail(priceListDetail) > currentDateTime();
        
        

// --------------- Фильтры для подбора товаров ------------------ //

// Вид цены
filterPriceListType = DATA LOCAL PriceListType (UserPriceList);
nameFilterPriceListType 'Вид цены' (UserPriceList userPriceList) = name(filterPriceListType(userPriceList));

//sku
currentPrice 'Текущая цена' (Sku sku, UserPriceList userPriceList, Stock stock) =
    currentPriceUser(sku, userPriceList, filterPriceListType(userPriceList), stock);

//batch
currentPrice 'Текущая цена' (Batch batch, UserPriceList userPriceList, Stock stock) =
    currentPrice(batch, userPriceList, filterPriceListType(userPriceList), stock);
filterPriceListType (UserPriceList userPriceList, Batch batch, Stock stock) =
    currentPrice (batch, userPriceList, stock) OR
    (batch IS Batch AND stock IS Stock AND NOT filterPriceListType(userPriceList));
    
editSku 'Редактировать SKU' (UserPriceListDetail d)  { NEWSESSION { edit(sku(d)); } }   

overCompanyB = ABSTRACT LegalEntity (LedgerPriceListType, Stock, UserPriceListDetail);
nameCompanyB 'Организация' (LedgerPriceListType type, Stock stock, UserPriceListDetail d) = name(OVERRIDE overCompanyB(type, stock, d), companyB(type, sku(d), stock ,fromDateTime[PriceListDetail](d)));    
toShow (PriceList p, LedgerPriceListType to) = show(p, to) AND to IS LedgerPriceListType AND differentOrganizations(to);          
    
showBatch 'Партия' =  ABSTRACT BOOLEAN (PriceList);   
showBatchUser 'Партия' =  DATA BOOLEAN (PriceList);  
showBatch(PriceList p) += showBatchUser(p);

showCompany 'Организация строки' =  ABSTRACT BOOLEAN (PriceList);   
showCompanyUser 'Организация строки' =  DATA BOOLEAN (PriceList);  
showCompany(PriceList p) += showCompanyUser(p);

showDateTime 'Даты действия' =  ABSTRACT BOOLEAN (PriceList);   
showDateTimeUser 'Даты действия' =  DATA BOOLEAN (PriceList);  
showDateTime(PriceList p) += showDateTimeUser(p);

originalNameSku 'Наименование поставщика' = ABSTRACT ISTRING[255] (PriceListDetail);
originalNameSku 'Наименование поставщика' = DATA ISTRING[255] (UserPriceListDetail);
originalNameSku(UserPriceListDetail d) += originalNameSku(d);

showOriginalNameSku 'Наименование поставщика' = ABSTRACT BOOLEAN (PriceList);
showOriginalNameSku 'Наименование поставщика' = DATA BOOLEAN (UserPriceList) IN documentPrm;
showOriginalNameSku(UserPriceList d) += showOriginalNameSku(d); 

originalIdBarcodeSku 'Штрихкод поставщика' = ABSTRACT STRING[15] (PriceListDetail) CHARWIDTH 15 NOFLEX;
originalIdBarcodeSku 'Штрихкод поставщика' = DATA STRING[15] (UserPriceListDetail) CHARWIDTH 15 NOFLEX;
originalIdBarcodeSku(UserPriceListDetail d) += originalIdBarcodeSku(d);

showOriginalIdBarcodeSku 'Штрихкод поставщика' = ABSTRACT BOOLEAN (PriceList);
showOriginalIdBarcodeSku 'Штрихкод поставщика' = DATA BOOLEAN (UserPriceList) IN documentPrm;
showOriginalIdBarcodeSku(UserPriceList d) += showOriginalIdBarcodeSku(d); 

showNotCompanyStocks 'Склады контрагентов' =  ABSTRACT BOOLEAN (PriceList);   
showNotCompanyStocks 'Склады контрагентов' =  DATA BOOLEAN (UserPriceList);  
showNotCompanyStocks(UserPriceList p) += showNotCompanyStocks(p);
      
@defineMovementSku(priceListDetail); //-- показываем по нажатию правой клавиши движение товара
@defineMovementSku(userPriceListDetail); //-- показываем по нажатию правой клавиши движение товара
@defineBalancesSku(priceListDetail); //-- показываем по нажатию правой клавиши остатки товара
@defineBalancesSku(userPriceListDetail); //-- показываем по нажатию правой клавиши остатки товара

@defineBarcodeSku(priceListDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
@defineBarcodeSku(userPriceListDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара

@defineMovementPriceSku(priceListDetail); //-- показываем по нажатию правой клавиши изменение цены товара
@defineMovementPriceSku(userPriceListDetail); //-- показываем по нажатию правой клавиши  изменение цены товара  

@defineInfoSku(priceListDetail); //-- показываем по нажатию правой клавиши информацию по товару
@defineInfoSku(userPriceListDetail); //-- показываем по нажатию правой клавиши информацию по товару

show (PriceList priceList, Stock stock) = IF showNotCompanyStocks(priceList) THEN stock IS Stock
                                                                                               ELSE isCompany(stock); 

allow(Stock stock, PriceList priceList) += show (priceList, stock); 

skipViewPrice = ABSTRACT BOOLEAN (UserPriceListDetail);
      
FORM userPriceList 'Прайс'
    OBJECTS p = UserPriceList PANEL
    PROPERTIES(p) isPosted, nameNumerator, number, series,
                  date, time,
                  fromDate, fromTime, toDate, toTime,
                  nameCurrency, note,
                  nameGroupTypeS = nameGroupType, nameGroupTypeP = nameGroupType,
                  showBatchUser, showCompanyUser, showDateTimeUser, showOriginalIdBarcodeSku, 
                  showOriginalNameSku, showNotCompanyStocks

    OBJECTS t = PriceListType
    PROPERTIES(t) READONLY name, includeVAT[LedgerPriceListType] 
    PROPERTIES(p, t) in[UserPriceList,DataPriceListType], orderIn[UserPriceList,DataPriceListType], show[PriceList,PriceListType], orderShow[PriceList,PriceListType]
    FILTERS (currency(p) == currency(t)) OR 
            NOT currency(t) OR NOT currency(p) 

    OBJECTS tc = DataPriceListType GRID
    PROPERTIES (p,tc) orderIn[UserPriceList,DataPriceListType]
    ORDERS orderIn(p,tc)
    FILTERS in(p, tc), 
            (currency(p) == currency[PriceListType](tc)) OR 
            NOT currency[PriceListType](tc) OR NOT currency(p) 

    OBJECTS to = PriceListType GRID
    PROPERTIES orderShow[PriceList,PriceListType](p,to)
    ORDERS orderShow(p,to)    
    FILTERS show[PriceList,PriceListType](p, to)

    OBJECTS th = DataPriceListType GRID
    FILTERS in(p, th) AND show[PriceList,PriceListType](p, th)  

    TREE skuTree sk = Group PARENT parent(sk)
    PROPERTIES READONLY order(sk), skuTreeName = name(sk)
    ORDERS order(sk), skuTreeName
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F6' DEFAULT

    OBJECTS d = UserPriceListDetail
    PROPERTIES(d) BACKGROUND background(d) index
    PROPERTIES(d) BACKGROUND background(d) ON EDIT editSku(d) idSku, idBarcodeSku, nameSku,
                  shortNameUOMSku
    PROPERTIES(d) BACKGROUND background(d) nameBatch ON CHANGE changePurchaseBatch(d) SHOWIF showBatchUser(p),
                  valueVAT, fromDate SHOWIF showDateTimeUser(p), 
                  fromTime SHOWIF showDateTimeUser(p), toDate SHOWIF showDateTimeUser(p), 
                  toTime SHOWIF showDateTimeUser(p), nameCompany SHOWIF showCompanyUser(p), 
                  exclude, NEW, deleted = DELETE GRID
    PROPERTIES(d, tc) price COLUMNS (tc) HEADER headerNameData(d,tc) BACKGROUND background(tc)
    PROPERTIES(p) DRAW d  fillDocument, addDetailInputBarcodeUserPriceListDetail
    ORDERS index(d)
    FILTERS userPriceList(d) == p,
            isParent(sk, sku[PriceListDetail](d)) OR NOT group(groupType(sk), sku[PriceListDetail](d)),
            groupType(p) == groupType(sk)
    FILTERGROUP filters
        FILTER 'Активные' isActive(d) 'F10'

    TREE stockTree a=BPSTRING[3], sg = StockGroup PARENT parent(sg)
    PROPERTIES READONLY VALUE(a), sgTreeName = name(sg)
    PROPERTIES(p) allStocks[PriceList] DRAW a BACKGROUND backgroundAllStocks(p)
    PROPERTIES(p, sg) in BACKGROUND backgroundIn(p,sg)
    ORDERS sgTreeName
    FILTERS stringEqualsAll(a)
    FILTERS countCompanyStock(sg) OR (showNotCompanyStocks(p) AND sg IS StockGroup)

    OBJECTS ts = Stock
    PROPERTIES READONLY  name(ts), nameLegalEntity(ts)
    PROPERTIES(p, ts)    in BACKGROUND backgroundIn(p,ts)
//    PROPERTIES(d, to, ts) currentPriceUserPriceListDetailPriceListTypeStock COLUMNS (to) HEADER headerNameCurrentDataPriceListType(to) BACKGROUND backgroundCurrentDataPriceListType(to)
//    PROPERTIES(d, th, ts) changePriceUserPriceListDetailDataPriceListTypeStock COLUMNS (th) HEADER headerNameChangeDataPriceListType(th) BACKGROUND backgroundChangeDataPriceListType(th)
    FILTERS ts IS Stock AND NOT sg IS StockGroup OR isParent(sg, ts),
            show(p, ts)
    FILTERGROUP filters2
            FILTER 'Выбранные склады' in(p, ts) 'F10'
    FILTERGROUP inactiveStock FILTER 'Активный' active(ts) 'ctrl F10' DEFAULT
        
    OBJECTS tt = Stock PANEL
    PROPERTIES SELECTOR stockName = name(tt) 
    PROPERTIES(d, to) READONLY viewPrice COLUMNS 'type' (to) HEADER headerNameCurrentData(to) BACKGROUND backgroundCurrent(to) DRAW d SHOWIF NOT skipViewPrice(d)
//    PROPERTIES(d, to, tt) READONLY currentPriceUserPriceListDetailPriceListTypeStock COLUMNS 'type' (to) HEADER headerNameCurrentDataPriceListType(to) BACKGROUND backgroundCurrentDataPriceListType(to) DRAW d GRID
    PROPERTIES(to, tt, d) SHOWIF toShow(p, to) READONLY nameCompanyB COLUMNS 'type' (to) HEADER headerNameCompanyData(to) BACKGROUND backgroundCurrent(to) DRAW d     
    PROPERTIES(d, th) READONLY changePrice COLUMNS (th) HEADER headerNameChangeData(th) BACKGROUND backgroundChange(th) DRAW d 

//    PROPERTIES(d)        nameCompanyUserPriceListDetail
    FILTERS show(p, tt),
            in(p, tt)

    TREE skuTree2 sk2 = Group PARENT parent(sk2)
    PROPERTIES READONLY order(sk2), skuTreeName2 = name(sk2)
    ORDERS order(sk2), skuTreeName2
    FILTERGROUP inactive1 FILTER 'Активные' active(sk2) 'F6' DEFAULT

    OBJECTS ts2 = Stock PANEL
    PROPERTIES(ts2) SELECTOR name
    FILTERS (isCompany(ts2) AND NOT showNotCompanyStocks(p)) OR (ts2 IS Stock AND showNotCompanyStocks(p))
    PROPERTIES(p)  nameFilterPriceListType

    OBJECTS s2=Sku
    PROPERTIES in(s2, p) ON CHANGE changeIn(s2, p)
    PROPERTIES READONLY inputName2 = name(s2), idBarcode(s2), id(s2) SHOWIF showIDs(), shortNameUOM(s2), currentBalance(s2, ts2)
    PROPERTIES READONLY currentPrice(s2, p, ts2) SHOWIF filterPriceListType(p)
    PROPERTIES(s2, p, to, ts2) currentPriceUser COLUMNS (to) HEADER headerNameCurrentData(to) BACKGROUND backgroundCurrent(to)
    PROPERTIES                 addSku() DRAW s2, EDIT(s2) NEWSESSION, copy(s2)
    FILTERS currentPrice (s2, p, ts2) OR
            NOT filterPriceListType(p),
            groupType(p) == groupType(sk2)
    FILTERGROUP filters3
        FILTER 'С остатком' currentBalance(s2, ts2) 'F10'

    FILTERS isParent(sk2, s2)
    FILTERGROUP activeSku 
        FILTER 'Активные' active(s2) DEFAULT
        FILTER 'Неактивные' inactive(s2) 
    ORDERS inputName2

    OBJECTS b=Batch
    PROPERTIES in(b, p) ON CHANGE changeIn(b, p) 
    PROPERTIES READONLY BACKGROUND backgroundInput(b) idBarcodeSku(b), nameSku(b)
    PROPERTIES READONLY QUICKFILTER nameSku(b) BACKGROUND backgroundInput(b) shortNameUOM(b),
                                                 prevCurrentBalance(b, ts2), name(b)
    PROPERTIES READONLY currentPrice(b, p, ts2) SHOWIF filterPriceListType(p)                                                 
    PROPERTIES(b, p, to, ts2) currentPrice COLUMNS (to) HEADER headerNameCurrentData(to) BACKGROUND backgroundCurrent(to)
    FILTERS filterPriceListType(p, b, ts2),
            isParent[SkuGroup,Batch](sk2, b)
    FILTERGROUP filters4
        FILTER 'С остатком' prevCurrentBalance(b, ts2) 'F10' DEFAULT
    ORDERS nameSku(b)

    EVENTS
        ON OK prePost(p)

    EDIT UserPriceList OBJECT p
;
EXTEND FORM userPriceList
    PROPERTIES(d) BACKGROUND background(d) AFTER nameSku(d) originalIdBarcodeSku SHOWIF showOriginalIdBarcodeSku(p), originalNameSku  SHOWIF showOriginalNameSku(p)        
;

@addEventGenerateNumberOnForm(userPriceList, p, userPriceList);

// склад по умолчанию
defaultPriceListStock = DATA Stock();
nameDefaultPriceListStock 'Предпочтительный склад в прайс-листах' = name(defaultPriceListStock());
EXTEND FORM options PROPERTIES() nameDefaultPriceListStock;
DESIGN options { price { MOVE PROPERTY(nameDefaultPriceListStock()); } }

seekDefaultPriceListStock  { SEEK userPriceList.tt = defaultPriceListStock(); }
EXTEND FORM userPriceList
    EVENTS ON INIT seekDefaultPriceListStock()
;


WHEN LOCAL FORMS userPriceList CHANGED(company(UserPriceList o)) DO {
    IF countStocks (company(o)) == 1 AND PREV(companyStock(o)) THEN
        companyStock(o) <- defaultStock(company(o));
    IF NOT in(company(o), companyStock(o)) THEN 
        companyStock(o) <- NULL;
}

WHEN LOCAL FORMS userPriceList (SET([ VIEW userPriceList.d](UserPriceListDetail d)) OR // изменились строки
                                  CHANGED(sku(d)) OR // или изменился sku
                                  CHANGED(batch(d)) OR // или изменился batch
                                  CHANGED(fromDateTime(d)) OR // или изменился дата с
                                  CHANGED([ VIEW userPriceList.tt](Stock s))) // или изменился склад
                                 AND [ VIEW userPriceList.d](d)
                                 AND [ VIEW userPriceList.tt](s) DO
    updateViewPriceDetail(d, s);

WHEN LOCAL FORMS userPriceList CHANGED(show(userPriceList(UserPriceListDetail d), PriceListType t))
                                 AND [ VIEW userPriceList.d](d)
                                 AND [ VIEW userPriceList.tt](Stock s) NOINLINE (t) DO
    updateViewPriceDetail(d, t, s);

// Оптимизация с преподсчетом видов цен в сессионное свойство

//viewCurrentPricePriceListDetailDataPriceListTypeStock 'Действующая цена' = DATA LOCAL NUMERIC[16,4] (UserPriceListDetail, DataPriceListType, Stock);
//
//currentUserPriceList = DATA LOCAL UserPriceList ();
//setCurrentUserPriceList (u) = currentUserPriceList() <- u;
//
//EXTEND FORM userPriceList
//    PROPERTIES(d, t, ts) viewCurrentPricePriceListDetailDataPriceListTypeStock COLUMNS (t) HEADER headerNameCurrentDataPriceListType(p, t) SHOWIF headerNameCurrentDataPriceListType(p, t) BACKGROUND backgroundCurrentDataPriceListType(t)
//    PROPERTIES(d, t, tt) viewCurrentPricePriceListDetailDataPriceListTypeStock COLUMNS (t) HEADER headerNameCurrentDataPriceListType(p, t) SHOWIF headerNameCurrentDataPriceListType(p, t) BACKGROUND backgroundCurrentDataPriceListType(t) DRAW d GRID
//    EVENTS
//        ON CHANGE p setCurrentUserPriceList(p)
//;
//
//WHEN LOCAL FORMS userPriceList SET([ VIEW userPriceList.d](d)) AND p == currentUserPriceList() DO
//    FOR showUserPriceListPriceListType(p, pt) AND isCompanyStock(s) NOINLINE (pt) DO
//        viewCurrentPricePriceListDetailDataPriceListTypeStock(d, pt, s) <- currentPricePriceListDetailDataPriceListTypeStock(d, pt, s);  
//
//WHEN LOCAL FORMS userPriceList CHANGED(showUserPriceListPriceListType(p, pt)) NOINLINE (pt) DO
//    viewCurrentPricePriceListDetailDataPriceListTypeStock(d, pt, s) <- currentPricePriceListDetailDataPriceListTypeStock(d, pt, s) 
//        WHERE [ VIEW userPriceList.d](d) AND isCompanyStock(s);  
//
//WHEN LOCAL FORMS userPriceList CHANGED(skuUserPriceListDetail(d)) OR CHANGED(fromDateTimeUserPriceListDetail(d)) DO
//    viewCurrentPricePriceListDetailDataPriceListTypeStock(d, pt, s) <- currentPricePriceListDetailDataPriceListTypeStock(d, pt, s) 
//        WHERE showUserPriceListPriceListType(userPriceListUserPriceListDetail(d), pt) AND isCompanyStock(s);  
//

DESIGN userPriceList {
    NEW top {
        horizontal = TRUE;
        NEW top1 {
            NEW headContainer {
                caption = 'Шапка документа';
                NEW first {
                    horizontal = TRUE;
                    MOVE PROPERTY(isPosted(p));
                }
                NEW second { 
                    horizontal = TRUE;
                    MOVE PROPERTY (nameNumerator(p));
                    MOVE PROPERTY (number(p));
                    MOVE PROPERTY (series(p));
                    MOVE PROPERTY (date(p));
                    MOVE PROPERTY (time(p));
                }        
        
            }
            NEW midContainer {
                horizontal = TRUE;
                NEW timeContainer{
                    caption = 'Период действия';
                    horizontal = TRUE;
                    MOVE PROPERTY (fromDate(p));
                    MOVE PROPERTY (fromTime(p));
                    MOVE PROPERTY (toDate(p));
                    MOVE PROPERTY (toTime(p));
                }
            }
            MOVE GROUP(documentPrm,p){
                caption = 'Параметры документа';
                lines = 3;
                MOVE PROPERTY(nameCurrency(p));
                MOVE PROPERTY(note(p));
            }             
        }
        NEW param {
            caption = 'Дополнительные параметры';
            MOVE PROPERTY(showOriginalIdBarcodeSku(p));
            MOVE PROPERTY(showOriginalNameSku(p));
            MOVE PROPERTY(showBatchUser(p)); 
            MOVE PROPERTY(showCompanyUser(p));
            MOVE PROPERTY(showDateTimeUser(p));
            MOVE PROPERTY(showNotCompanyStocks(p));
        }         
    }

    NEW detailContainer{
        fill = 1;
        tabbed = TRUE;
        NEW firstContainer{
            fill = 1;
            caption = 'Спецификация';

            horizontal=TRUE;
            NEW leftColumnContainer{
                fill = 1;
                MOVE BOX(tt);
                MOVE PROPERTY(nameGroupTypeS);
                MOVE BOX(TREE skuTree) {
                    caption = 'Группы товаров';
                }
            }
            NEW skuContainer{
                fill = 3;
                NEW rowContainer {
                    horizontal = TRUE;
                    MOVE PROPERTY(addDetailInputBarcodeUserPriceListDetail(p));
                }
                NEW addRowContainer {
                    horizontal = TRUE;
                    MOVE PROPERTY (fillDocument(p));
                }
                MOVE BOX(d);
            }
        }

        NEW secondContainer {
            fill = 1;
            caption = 'Склады';
            horizontal = TRUE;
            NEW stockGroups {
                fill = 1;
                MOVE BOX(TREE stockTree) {
                    caption = 'Группы складов';
                }
            }
            MOVE BOX(ts) {
                fill = 2;
            }
        }

        NEW thirdContainer{
            fill = 1;
            caption = 'Вид цен';
            MOVE BOX(t);
        }
        REMOVE BOX(tc);
        REMOVE BOX(to);        
        NEW fourthContainer {
            caption = 'Подбор';
            NEW topThirdContainer{
                horizontal = TRUE;
                MOVE BOX(ts2);
                NEW filtersContainer {
                    caption = 'Фильтры';
                    horizontal = TRUE;
                    MOVE PROPERTY(nameFilterPriceListType(p));
                }
            }
            NEW detailFourthContainer{
                fill = 1;
                horizontal = TRUE;
                NEW treeContainer {
                    fill = 1;
                    MOVE PROPERTY(nameGroupTypeP);
                    MOVE BOX(TREE skuTree2) {
                        caption = 'Группы товаров';
                    }                        
                }
                NEW tabContainer {
                    tabbed = TRUE;
                    fill = 3;
                    MOVE BOX(s2);
                    MOVE BOX(b){
                        caption = 'Партии';
                    }                    
                }
            }
        }

    }
    MOVE TOOLBARBOX;

    PROPERTY(formOk()) {
        caption = 'Провести';
    }
}

edit(UserPriceListDetail d) + {  DIALOG userPriceList OBJECTS p = userPriceList(d), d = d DOCKED; }
    
// -------------------------------- Изменение цен для строк ------------------------------ //

CLASS TypeMarkUpSkuUserPriceList 'Метод изменения цены'{
    percent 'Наценка, %',
    multiplication 'Умножение',
    division 'Деление'
}

FORM typeMarkUpSkuUserPriceList 'Метод изменения цены'
    OBJECTS m = TypeMarkUpSkuUserPriceList
    PROPERTIES(m) READONLY staticCaption

    LIST TypeMarkUpSkuUserPriceList OBJECT m
;

DESIGN typeMarkUpSkuUserPriceList {
    PROPERTY(staticCaption(m)){caption = 'Метод изменения цены';}
}

headerNumericCaption(TypeMarkUpSkuUserPriceList type) =
    CASE
        WHEN type == TypeMarkUpSkuUserPriceList.percent
            THEN '% наценки' IF type IS TypeMarkUpSkuUserPriceList
        WHEN type == TypeMarkUpSkuUserPriceList.multiplication
            THEN 'Множитель' IF type IS TypeMarkUpSkuUserPriceList
        WHEN type == TypeMarkUpSkuUserPriceList.division
            THEN 'Делитель' IF type IS TypeMarkUpSkuUserPriceList
        ELSE '% наценки' IF type IS TypeMarkUpSkuUserPriceList
    ;

FORM chooseMarkUpSkuUserPriceList 'Наценка'

    OBJECTS p = UserPriceList PANEL

    OBJECTS m = TypeMarkUpSkuUserPriceList PANEL
    PROPERTIES(m) SELECTOR staticCaption

    OBJECTS pt = PriceListType PANEL
    PROPERTIES(pt) SELECTOR name
    FILTERS in[UserPriceList,DataPriceListType](p,pt) OR show[UserPriceList, PriceListType](p,pt)
    OBJECTS n = NUMERIC[20,7] PANEL
    PROPERTIES(n) objValue = VALUE HEADER headerNumericCaption(m)

    OBJECTS nt = DataPriceListType PANEL
    PROPERTIES(nt) SELECTOR name
    FILTERS in(p, nt)
;

DESIGN chooseMarkUpSkuUserPriceList {

    REMOVE BOX(p);
    NEW topContainer {
        MOVE PROPERTY(staticCaption(m)){caption = 'Метод изменения цены';}
        MOVE PROPERTY(name(pt));
        PROPERTY(name(pt)){caption = 'Старая цена';}
        MOVE PROPERTY(objValue);
        PROPERTY(objValue){caption = 'Изменение';}
        MOVE PROPERTY(name(nt));
        PROPERTY(name(nt)){caption = 'Новая цена';}
    }
    MOVE TOOLBARBOX;
}

// ----------------------- Для отмеченных строк ------------------------ //
isSelected 'Отм' = DATA LOCAL BOOLEAN (UserPriceListDetail);
changeMarkUpChosenSku 'Изменить цену для отмеченных строк'(UserPriceList userPriceList, Stock stock)  { 
    DIALOG chooseMarkUpSkuUserPriceList OBJECTS p = userPriceList, pt INPUT, nt INPUT, m INPUT, n INPUT DO {
        IF NOT [ GROUP SUM 1 IF isSelected(UserPriceListDetail priceListDetail)
                      BY userPriceList(priceListDetail)](userPriceList) THEN
            MESSAGE 'Выберите хотя бы одну позицию';
        ELSE {
            LOCAL prev = NUMERIC[16,4] (UserPriceListDetail);
            IF pt != nt AND in[UserPriceList,DataPriceListType](userPriceList, pt) THEN {
                prev(UserPriceListDetail detail) <- price[UserPriceListDetail,DataPriceListType](detail, pt)
                                     WHERE userPriceList(detail) == userPriceList;
            } ELSE {
                prev(UserPriceListDetail detail) <- currentPrice(detail, pt, stock)
                                     WHERE userPriceList(detail) == userPriceList;
            }
            IF m == TypeMarkUpSkuUserPriceList.percent AND includeVAT[PriceListType](nt) AND NOT includeVAT[PriceListType](pt) THEN {
                price(UserPriceListDetail detail, nt) <-
                    round(prev(detail) * (valueVAT(detail) + 100.0) / 100.0 * (n + 100.0) / 100.0, roundCondition(nt))
                    WHERE isSelected(detail) AND userPriceList(detail) == userPriceList;
            } ELSE IF m == TypeMarkUpSkuUserPriceList.percent AND includeVAT[PriceListType](pt) AND NOT includeVAT[PriceListType](nt) THEN {
                price(UserPriceListDetail detail, nt) <-
                    round(prev(detail) / (valueVAT(detail) + 100.0) * 100.0 * (n + 100.0) / 100.0, roundCondition(nt))
                    WHERE isSelected(detail) AND userPriceList(detail) == userPriceList;
            } ELSE IF m == TypeMarkUpSkuUserPriceList.percent THEN{
                price(UserPriceListDetail detail, nt) <-
                    round(prev(detail) * (n + 100.0) / 100.0, roundCondition(nt))
                    WHERE isSelected(detail) AND userPriceList(detail) == userPriceList;
            }
            IF m == TypeMarkUpSkuUserPriceList.multiplication AND includeVAT[PriceListType](nt) AND NOT includeVAT[PriceListType](pt) THEN {
                price(UserPriceListDetail detail, nt) <-
                    round(prev(detail) * (valueVAT(detail) + 100.0) / 100.0 * n, roundCondition(nt))
                    WHERE isSelected(detail) AND userPriceList(detail) == userPriceList;
            } ELSE IF m == TypeMarkUpSkuUserPriceList.multiplication AND includeVAT[PriceListType](pt) AND NOT includeVAT[PriceListType](nt) THEN {
                price(UserPriceListDetail detail, nt) <-
                    round(prev(detail) / (valueVAT(detail) + 100.0) * 100.0 * n, roundCondition(nt))
                    WHERE isSelected(detail) AND userPriceList(detail) == userPriceList;
            } ELSE IF m == TypeMarkUpSkuUserPriceList.multiplication THEN {
                price(UserPriceListDetail detail, nt) <-
                    round(prev(detail) * n, roundCondition(nt))
                    WHERE isSelected(detail) AND userPriceList(detail) == userPriceList;
            }
            IF m == TypeMarkUpSkuUserPriceList.division AND includeVAT[PriceListType](nt) AND NOT includeVAT[PriceListType](pt) THEN {
                price(UserPriceListDetail detail, nt) <-
                    round(prev(detail) * (valueVAT(detail) + 100.0) / 100.0 / n, roundCondition(nt))
                    WHERE isSelected(detail) AND userPriceList(detail) == userPriceList;
            } ELSE IF m == TypeMarkUpSkuUserPriceList.division AND includeVAT[PriceListType](pt) AND NOT includeVAT[PriceListType](nt) THEN {
                price(UserPriceListDetail detail, nt) <-
                    round(prev(detail) / (valueVAT(detail) + 100.0) * 100.0 / n, roundCondition(nt))
                    WHERE isSelected(detail) AND userPriceList(detail) == userPriceList;
            } ELSE IF m == TypeMarkUpSkuUserPriceList.division THEN {
                price(UserPriceListDetail detail, nt) <-
                    round(prev(detail) / n, roundCondition(nt))
                    WHERE isSelected(detail) AND userPriceList(detail) == userPriceList;
            }
        }
    }
}

EXTEND FORM userPriceList
    PROPERTIES(d) isSelected BEFORE index(d)
    PROPERTIES(p, tt) DRAW d TOOLBAR changeMarkUpChosenSku
    FILTERGROUP filterSelected
        FILTER 'Отмеченные строки' isSelected(d) 'F11'
;
DESIGN userPriceList{
    rowContainer{
        MOVE PROPERTY(changeMarkUpChosenSku(p,tt));
    }
}

// ---------------------- Для всех строк ----------------------- //
changeMarkUpSku 'Изменить цену для всех строк'(UserPriceList userPriceList, Stock stock)  { 
    DIALOG chooseMarkUpSkuUserPriceList OBJECTS p = userPriceList, pt INPUT, nt INPUT, m INPUT, n INPUT DO {
        LOCAL prev = NUMERIC[16,4] (UserPriceListDetail);
        IF pt != nt AND in[UserPriceList,DataPriceListType](userPriceList, pt) THEN {
            prev(UserPriceListDetail detail) <- price[UserPriceListDetail,DataPriceListType](detail, pt)
                                 WHERE userPriceList(detail) == userPriceList;
        } ELSE {
            prev(UserPriceListDetail detail) <- currentPrice(detail, pt, stock)
                                 WHERE userPriceList(detail) == userPriceList;
        }

        FOR [ FILTER userPriceList.d](UserPriceListDetail detail) DO {
            IF m == TypeMarkUpSkuUserPriceList.percent AND includeVAT[PriceListType](nt) AND NOT includeVAT[PriceListType](pt) THEN {
                price(detail, nt) <-
                    round(prev(detail) * (valueVAT(detail) + 100.0) / 100.0 * (n + 100.0) / 100.0, roundCondition(nt))
                    WHERE userPriceList(detail) == userPriceList;
            } ELSE IF m == TypeMarkUpSkuUserPriceList.percent AND includeVAT[PriceListType](pt) AND NOT includeVAT[PriceListType](nt) THEN {
                price(detail, nt) <-
                    round(prev(detail) / (valueVAT(detail) + 100.0) * 100.0 * (n + 100.0) / 100.0, roundCondition(nt))
                    WHERE userPriceList(detail) == userPriceList;
            } ELSE IF m == TypeMarkUpSkuUserPriceList.percent THEN {
                price(detail, nt) <-
                    round(prev(detail) * (n + 100.0) / 100.0, roundCondition(nt))
                    WHERE userPriceList(detail) == userPriceList;
            }
            IF m == TypeMarkUpSkuUserPriceList.multiplication AND includeVAT[PriceListType](nt) AND NOT includeVAT[PriceListType](pt) THEN {
                price(detail, nt) <-
                    round(prev(detail) * (valueVAT(detail) + 100.0) / 100.0 * n, roundCondition(nt))
                    WHERE userPriceList(detail) == userPriceList;
            } ELSE IF m == TypeMarkUpSkuUserPriceList.multiplication AND includeVAT[PriceListType](pt) AND NOT includeVAT[PriceListType](nt) THEN{
                price(detail, nt) <-
                    round(prev(detail) / (valueVAT(detail) + 100.0) * 100.0 * n, roundCondition(nt))
                    WHERE userPriceList(detail) == userPriceList;
            } ELSE IF m == TypeMarkUpSkuUserPriceList.multiplication THEN {
                price(detail, nt) <-
                    round(prev(detail) * n, roundCondition(nt))
                    WHERE userPriceList(detail) == userPriceList;
            }
            IF m == TypeMarkUpSkuUserPriceList.division AND includeVAT[PriceListType](nt) AND NOT includeVAT[PriceListType](pt) THEN {
                price(detail, nt) <-
                    round(prev(detail) * (valueVAT(detail) + 100.0) / 100.0 / n, roundCondition(nt))
                    WHERE userPriceList(detail) == userPriceList;
            } ELSE IF m == TypeMarkUpSkuUserPriceList.division AND includeVAT[PriceListType](pt) AND NOT includeVAT[PriceListType](nt) THEN{
                price(detail, nt) <-
                    round(prev(detail) / (valueVAT(detail) + 100.0) * 100.0 / n, roundCondition(nt))
                    WHERE userPriceList(detail) == userPriceList;
            } ELSE IF m == TypeMarkUpSkuUserPriceList.division THEN {
                price(detail, nt) <-
                    round(prev(detail) / n, roundCondition(nt))
                    WHERE userPriceList(detail) == userPriceList;
            }
        }
    }
}

EXTEND FORM userPriceList
    PROPERTIES(p, tt) DRAW d TOOLBAR changeMarkUpSku
;

DESIGN userPriceList{
    rowContainer{
        MOVE PROPERTY(changeMarkUpSku(p,tt)) BEFORE PROPERTY(changeMarkUpChosenSku(p,tt));
    }
}

// ------------------ Копирование прайс-листов ------------------- //

copyAbstractData  ABSTRACT LIST ( PriceList, UserPriceList);
copyAbstractData  ABSTRACT LIST ( UserPriceListDetail, UserPriceListDetail);

copyData(PriceList priceList, UserPriceList userPriceList)  { 
        currency(userPriceList) <- currency[UserPriceList](priceList);
        company(userPriceList) <- company[UserPriceList](priceList);
        companyStock(userPriceList) <- companyStock[UserPriceList](priceList);
        dataIn(userPriceList, Stock stock) <- dataIn[UserPriceList,Stock](priceList, stock);
        dataIn(userPriceList, StockGroup stockGroup) <- dataIn[UserPriceList,StockGroup](priceList, stockGroup);
        allStocks(userPriceList) <- allStocks[UserPriceList](priceList);
        in(userPriceList, DataPriceListType priceListType) <- in[UserPriceList,DataPriceListType](priceList, priceListType);
        EXEC copyAbstractData(priceList, userPriceList);
        FOR userPriceList(UserPriceListDetail detail) == priceList DO {
            NEW d = UserPriceListDetail {
                userPriceList(d) <- userPriceList;
                sku(d) <- sku(detail);
                price(d, DataPriceListType priceListType) <- price[PriceListDetail,DataPriceListType](detail, priceListType);
                copyAbstractData(detail, d);
            }
        }
}

copySession 'Копировать'(PriceList priceList)  { 

    NEW u = UserPriceList {
        EXEC copyData(priceList, u);
        SHOW userPriceList OBJECTS p = u DOCKED;
    }
}

copy 'Копировать'(PriceList priceList)  { 
	NEWSESSION {
	
	    NEW u = UserPriceList {
	        EXEC copyData(priceList, u);
	        SHOW userPriceList OBJECTS p = u DOCKED;
	    }
	}
}

updateSession 'Обновить'(PriceList priceList)  { 
	NESTEDSESSION {
	
	    NEW u = UserPriceList {
	        copyData(priceList, u);
	        DIALOG userPriceList OBJECTS p = u DOCKED NOCANCEL DO {
	            toDate[UserPriceList](priceList) <- fromDate(u);
	            toTime[UserPriceList](priceList) <- fromTime(u);
	        }
	    }
	
	}
}
update 'Обновить'(PriceList priceList)  { 
	NEWSESSION {
	
	    NEW u = UserPriceList {
	        copyData(priceList, u);
	        DIALOG userPriceList OBJECTS p = u DOCKED NOCANCEL DO {
	            toDate[UserPriceList](priceList) <- fromDate(u);
	            toTime[UserPriceList](priceList) <- fromTime(u);
	            apply();
	        }
	    }
	}
}

print 'Распечатать'  ABSTRACT LIST ( PriceList);

skipChange = ABSTRACT VALUE BOOLEAN (PriceList);
overShowEditDelete = ABSTRACT VALUE BOOLEAN (PriceList);
showChange(PriceList p) = overShowEditDelete(p) AND NOT skipChange(p) ;

show 'Просмотреть' (UserPriceList i)   { 
    NEWSESSION {
        SHOW userPriceList OBJECTS p = i DOCKED READONLY;
    }
}TOOLBAR;
        
overShowToShow = ABSTRACT BOOLEAN(UserPriceList);       
showToShow (UserPriceList i) = OVERRIDE overShowToShow(i), (is(i) AND NOT showChange(i));

filterPriceListDateFrom 'Дата с' = DATA LOCAL DATE ();
filterDateFrom (PriceList p) = fromDate(p) >= filterPriceListDateFrom() OR (p IS PriceList AND NOT filterPriceListDateFrom());      

filterPriceListDateTo 'Дата по' = DATA LOCAL DATE ();
filterDateTo (PriceList p) = toDate(p) <= filterPriceListDateTo() OR (p IS PriceList AND NOT filterPriceListDateTo());      

filterPriceListCompany  = DATA LOCAL LegalEntity ();
nameFilterPriceListCompany 'Организация' = name(filterPriceListCompany()) CHARWIDTH 15;          
filterCompany (PriceList p) = company(p) == filterPriceListCompany() OR (p IS PriceList AND NOT filterPriceListCompany());       

filterPriceListCreatedUser  = DATA LOCAL Employee ();
nameFilterPriceListCreatedUser 'Пользователь' = name(filterPriceListCreatedUser()) CHARWIDTH 15;          

FORM priceLists 'Прайсы'
    PROPERTIES() filterPriceListDateFrom, filterPriceListDateTo, nameFilterPriceListCompany, nameFilterPriceListCreatedUser 

    OBJECTS p = PriceList LAST
    PROPERTIES(p) READONLYIF isReadonly() BACKGROUND background(p)
           isPosted , number, series, date, time,
           fromDate, fromTime, toDate, toTime, 
           nameCurrency, nameCompany, nameCompanyStock,
           note, guser = createdNameUser
    PROPERTIES(p) READONLY BACKGROUND background(p)
           countPriceListDetail AFTER toTime(p), stocks AFTER nameCompanyStock(p), priceListTypes AFTER nameCompanyStock(p)

    PROPERTIES (p) NEWSESSION NEW[UserPriceList], editP = EDIT SHOWIF showChange(p), DELETE SHOWIF (is[UserPriceList](p) AND showChange(p))
    PROPERTIES (p)            show SHOWIF showToShow(p)
    PROPERTIES (p) TOOLBAR copy , print 
    PROPERTIES (p) READONLY PANEL createdNameUser, createdTime, createdHostnameComputer, 
                                        postedNameUser, postedTime, postedHostnameComputer 
                                        
    OBJECTS t = DataPriceListType GRID
    PROPERTIES (p,t) orderIn
    ORDERS orderIn(p,t)

    OBJECTS d = PriceListDetail
    PROPERTIES(d) READONLYIF isReadonly() exclude
    PROPERTIES(d) READONLYIF isReadonly() BACKGROUND background(d) index, idBarcodeSku, idSku SHOWIF showIDs(),
                                                                   nameSku, shortNameUOMSku, nameBatch SHOWIF showBatch(p), 
                                                                   nameCompany SHOWIF showCompany(p)
    PROPERTIES(d) READONLYIF isReadonly()  BACKGROUND background(d)  AFTER nameSku(d) originalIdBarcodeSku SHOWIF showOriginalIdBarcodeSku(p), originalNameSku SHOWIF showOriginalNameSku(p)
    
    ORDERS index(d)
    
    OBJECTS ts = Stock
    PROPERTIES(ts) READONLY name
    PROPERTIES(p, ts) READONLY in

    PROPERTIES(d, t) READONLYIF isReadonly() BACKGROUND background(d) price COLUMNS (t) HEADER name(t)

    FILTERGROUP inactivePriceList
        FILTER 'Текущие' isActive(p) 'F11'            
        FILTER 'Активные' NOT toDateTime(p) < currentDateTime() 'F10' DEFAULT
        
    FILTERGROUP inactiveStock 
        FILTER 'Активный' active(ts) 'ctrl F10' DEFAULT    

    FILTERS priceList(d) = p,
            in(p, t),
            in(p, ts),
            isCompany(ts)
    FILTERS filterDateFrom(p), 
            filterDateTo(p),
            filterCompany(p)                    

    LIST PriceList OBJECT p
;

DESIGN priceLists {
    NEW topContainer{
        fill = 1;
        REMOVE BOX(t);
//        NEW BOX(p) {
//            fill = 2;
//        }
        NEW filtersBox {                       
            fill = 2;
            NEW topFilters {
                alignment = STRETCH;
                caption = 'Фильтры';
                horizontal = TRUE;          
                MOVE PROPERTY(filterPriceListDateFrom());    
                MOVE PROPERTY(filterPriceListDateTo());
                MOVE PROPERTY(nameFilterPriceListCompany());                
                MOVE PROPERTY(nameFilterPriceListCreatedUser());                
            }
            MOVE BOX(p) {
                fill = 1;
            }
        }        
        NEW detailContainer{
            fill = 1;
            tabbed = TRUE;
            NEW firstContainer{
                caption = 'Спецификация';
                horizontal = TRUE;
                MOVE BOX(d) {
                    fill = 4;
                }
                NEW stocks {
                    fill = 1;
                    MOVE BOX(ts){
                        showIf = [GROUP MIN Stock st IF in(p, st) AND isCompany(st)]();
                    }
                }
            }
            NEW documentHistory {
                caption = 'История';
                MOVE GROUP(created,p) { alignment = STRETCH; }
                MOVE GROUP(posted,p) { alignment = STRETCH; }
            }
            NEW printTab {
                caption = 'Печатные формы';
                NEW printContainer {
                    caption = 'Печать';
                    MOVE PROPERTY(print(p));
                }
            }
            NEW actionContainer {
                caption = 'Действия';
                horizontal = TRUE;
                NEW createdContainer {
                    caption = 'Создание на основе';
                }
            }
        }
    }
    MOVE TOOLBARBOX;
}
@extendFormEditable (priceLists);
@defineDocumentLogForm(priceLists, p);

NAVIGATOR {
    priceListDocuments 'Документы' {
        NEW priceLists;
    }
}

// Заполнение на основании

addUnderPriceList 'Заполнить на основании'(UserPriceList p)  { 
    DIALOG priceLists OBJECTS p INPUT pt DO
        FOR priceList(PriceListDetail detail) == pt NEW d = UserPriceListDetail DO {
            userPriceList(d) <- p;
            sku(d) <- sku(detail);
            price(d, DataPriceListType type) <- price(detail, type)
                                                                  WHERE in(p, type); 
        }
}

EXTEND FORM userPriceList
    PROPERTIES(p) DRAW d TOOLBAR addUnderPriceList
;

DESIGN userPriceList {
    addRowContainer {
        MOVE PROPERTY (addUnderPriceList(p));
    }
}

//печать прайсов

FORM printPriceList 'Прайс'
    OBJECTS p = PriceList PANEL SUBREPORT
    PROPERTIES(p) READONLY number, series, date, time,
           fromDate, fromTime, toDate, toTime,
           nameCurrency, nameCompany, nameCompanyStock, priceListTypes, stocks,
           note, isPosted

    OBJECTS t = DataPriceListType
    PROPERTIES(t) READONLY name[PriceListType]
    FILTERS in(p, t),
            (currency[UserPriceList](p) == currency[PriceListType](t)) OR (p IS PriceList AND t IS PriceListType AND NOT currency[PriceListType](t))

    OBJECTS d = UserPriceListDetail
    PROPERTIES(d) READONLY index[PriceListDetail], idBarcodeSku[PriceListDetail], nameSku[PriceListDetail],
                           shortNameUOMSku[PriceListDetail], nameCompany[PriceListDetail]
    PROPERTIES(d, t) price[PriceListDetail,DataPriceListType] COLUMNS (t) HEADER headerNameData(d,t) BACKGROUND background(t) DRAW d 

    FILTERS priceList(d) == p
;

printPrint 'Распечатать' (PriceList priceList) 
    { PRINT printPriceList OBJECTS p = priceList; }   IMAGE 'print.png' IN print;

print(PriceList priceList) + {  printPrint(priceList); }

// ------------------------- Расширяем форму LegalEntity ----------------------- //
overAdd ABSTRACT LIST ( UserPriceList);
addUserPriceList 'Добавить'(LegalEntity legalEntity)  { 
	NESTEDSESSION {
	    NEW u = UserPriceList {
	        company(u) <- legalEntity;
	        overAdd(u); 
	        SHOW userPriceList OBJECTS p = u DOCKED;
	    }
	}
} TOOLBAR;

EXTEND FORM legalEntity

    OBJECTS p = UserPriceList
    PROPERTIES(p) READONLY BACKGROUND background(p) isPosted, number, series, date, time,
                           fromDate, fromTime, toDate, toTime,
                           nameCurrency, priceListTypes,
                           stocks, note
    PROPERTIES addUserPriceList(l) DRAW p , updateSession(p) TOOLBAR
    PROPERTIES(p) EDIT, DELETE 
    FILTERS company(p) == l
    
    FILTERGROUP inactivePriceList
        FILTER 'Текущие' isActive(p) 'F11'            
        FILTER 'Активные' isActive(p) OR (fromDateTime[PriceList](p) > currentDateTime()) 'F10' DEFAULT  
;

DESIGN legalEntity{
    extendContainer {
        MOVE BOX(p){caption = 'Прайсы';}
    }
}

// ------------------------------------------------- Сравнение прайсов ---------------------------- //

count (sku, priceList) = GROUP SUM 1 BY sku(PriceListDetail detail), priceList(detail);

countSkus (PriceList priceList) = GROUP
    SUM 1 IF count(Sku sku, priceList);

countSku (PriceList priceList1, PriceList priceList2) = GROUP
    SUM 1 IF count(Sku sku, priceList1) == count(sku, priceList2);

equals (PriceList priceList1, PriceList priceList2) = company(priceList1) == company(priceList2) AND
                                                    currency(priceList1) == currency(priceList2) AND
                                                    date(priceList1) == date(priceList2) AND
                                                    countSku (priceList1, priceList2) == countSkus(priceList1) AND
                                                    countSku (priceList1, priceList2) == countSkus(priceList2) AND
                                                    priceList1 != priceList2;


findEqualsPriceLists 'Найти дубликаты прайсов'()  { 
    FOR UserPriceList p1 IS UserPriceList NOINLINE DO {
        FOR equals(p1, PriceList p2) NOINLINE DO {
            dataIn[UserPriceList,Stock](p2, Stock s) <- dataIn(p1, s) WHERE dataIn(p1, s);
            DELETE p1;
            apply();
            BREAK;
        }
    }
}

EXTEND FORM migrationData
    PROPERTIES() findEqualsPriceLists
;

countPriceListDetail 'Кол-во строк' (sku, priceList) = GROUP SUM 1 BY sku(PriceListDetail d), priceList(d);

priceLimit 'Максимально допустимая цена' = DATA NUMERIC[16,4] (Currency);

EXTEND FORM currency
    PROPERTIES priceLimit(c);
    
CONSTRAINT (SETCHANGED (price(PriceListDetail d, DataPriceListType t)) OR SET (isPosted(d))) AND isPosted(d) AND price(d,t) > priceLimit(currency(t))
    MESSAGE 'Превышена максимально допустимая для валюты цена ';
    
show 'Просмотреть'  ABSTRACT LIST  ( PriceListDetail) TOOLBAR;
show(UserPriceListDetail d)  { 
	NEWSESSION {
	    SHOW userPriceList OBJECTS p = userPriceList(d), d = d DOCKED READONLY ;
	}
}
show(UserPriceListDetail d) + {  show(d); }    
show[PriceListLedger] (PriceListDetail ledger) + { show(ledger);};

// Храним количество прайс-листов для поставщика и вида цен
TABLE dataPriceListTypeLegalEntitySku (DataPriceListType, LegalEntity, Sku);
countPriceListDetail = GROUP SUM 1 IF in(PriceListDetail d, DataPriceListType t) BY t, company(d), sku(d) MATERIALIZED; 

@defineAddSkuLists(userPriceList, userPriceList, p);
@defineNewSkuList(priceList, userPriceList, priceLists, p);

DESIGN userPriceList {
    addRowContainer {
        MOVE PROPERTY (addSkuLists(p));
        MOVE PROPERTY (newSkuList(p));
    }
}

DESIGN priceLists {
    actionContainer {
        NEW listSku {
            caption = 'Списки SKU';
            MOVE PROPERTY (newSkuList(p));
        }
    }
}