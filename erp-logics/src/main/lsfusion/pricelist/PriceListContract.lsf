MODULE PriceListContract;

REQUIRE PriceListOperation, StockContract;

NAMESPACE PriceList;

@defineDocumentAbstractContract (PriceList, contractSku, ContractSku);

contractSku = DATA ContractSku (UserPriceList);
seriesNumberContractSku 'Номер договора' (UserPriceList o) = seriesNumber[Contract](contractSku(o)) IN documentPrm;
dateFromContractSku 'Дата договора' (UserPriceList o) = dateFrom(contractSku(o)) IN documentPrm;

descriptionContractSku 'Описание договора' (UserPriceList o)= CONCAT ' ', seriesNumberContractSku(o), ' от ' + dateFromContractSku(o);

replace(ContractSku c, ContractSku o) + { contractSku(UserPriceList object) <- o WHERE contractSku(object) == c;}

isCommission 'Продажа на комиссию' = DATA BOOLEAN (UserPriceList) IN documentPrm;

contractSku(UserPriceList o) += contractSku(o);
isCommission(UserPriceList o) += isCommission(o);

contractSku (PriceListDetail d) = contractSku(priceList(d)) MATERIALIZED INDEXED;
seriesNumberContractSku 'Номер договора' (PriceListDetail d) = seriesNumber[Contract](contractSku (d));

isCommission(UserPriceList o) <- type(contractSku(o)) == ContractSkuType.commission
    WHEN CHANGED(contractSku(o));

skipChangeContractSku = ABSTRACT VALUE BOOLEAN (UserPriceList);
WHEN LOCAL (CHANGED(company(UserPriceList o)) OR CHANGED(companyStock(o)) OR CHANGED(fromDate(o))) AND NOT CHANGED(contractSku(o)) AND NOT skipChangeContractSku(o) DO {
            
    contractSku(o) <- defaultContractSkuSupplier(company(o), companyStock(o), fromDate(o))
                                    IF countContractSkuSupplier(company(o), companyStock(o), fromDate(o)) == 1;

}

dateFromConstraintContractUserPriceList 'Дата начала контроля сроков договора прайс' = DATA DATE ();  

EXTEND FORM options 
    PROPERTIES dateFromConstraintContractUserPriceList()    
;
    
DESIGN options {
    contract {
        MOVE PROPERTY(dateFromConstraintContractUserPriceList());
    }
}   
   
CONSTRAINT contractSku(UserPriceList o) 
    AND NOT (dateFrom(contractSku(o)) <= fromDate(o) AND NOT (dateTo(contractSku(o)) < fromDate(o)))
    AND NOT (dateFromConstraintContractUserPriceList() > fromDate(o))
           CHECKED BY contractSku[UserPriceList]
           MESSAGE 'Договор прайс-листа просрочен или еще не действует';   

CONSTRAINT contractSku(UserPriceList o) AND NOT company(o) == partyA(contractSku(o))
    CHECKED BY contractSku[UserPriceList] MESSAGE 'Организация (поставщик) договора прайса не соответствует компании прайса';

CONSTRAINT contractSku(UserPriceList o) AND NOT isSeller(partyA(contractSku(o)))
    CHECKED BY contractSku[UserPriceList] MESSAGE 'Организация (поставщик) договора прайса не является поставщиком или компанией';

CONSTRAINT contractSku(UserPriceList o) AND NOT isBuyer(partyB(contractSku(o)))
    CHECKED BY contractSku[UserPriceList] MESSAGE 'Организация (покупатель) договора прайса не является покупателем или компанией';
               
CONSTRAINT contractSku(UserPriceList o) AND countSuppliersStock(contractSku(o)) AND NOT inSupplier(companyStock(o),contractSku(o))
    CHECKED BY contractSku[UserPriceList] MESSAGE 'Для прайса выбран склад организации, который не включен в договор';


EXTEND FORM userPriceList
    PROPERTIES (p) SHOWIF showContract(p) seriesNumberContractSku, isCommission
;
DESIGN userPriceList {
    GROUP(documentPrm,p){ 
        MOVE PROPERTY (seriesNumberContractSku(p)) AFTER PROPERTY(nameCompanyStock(p));
        MOVE PROPERTY (isCommission(p)) AFTER PROPERTY(seriesNumberContractSku(p));
    }
}

EXTEND FORM priceLists
    PROPERTIES (p) READONLYIF isReadonly() seriesNumberContractSku AFTER nameCompanyStock(p)
;

@defineOperationProperty(isContract, 'Должен быть задан договор', constraintContainer);

CONSTRAINT isContract(operation(PriceList p))AND NOT contractSku(p)
    MESSAGE 'Для прайса должен быть задан договор';