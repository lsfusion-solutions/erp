MODULE PriceListContract;

REQUIRE PriceListOperation, StockContract;

NAMESPACE PriceList;

@defineDocumentAbstractContract (PriceList, contractSku, ContractSku);

contractSku = DATA ContractSku (UserPriceList);
seriesNumberContractSku 'Номер договора' (UserPriceList o) = seriesNumber[Contract](contractSku(o)) IN documentPrm;
dateFromContractSku 'Дата договора' (UserPriceList o) = dateFrom(contractSku(o)) IN documentPrm;

descriptionContractSku 'Описание договора' (UserPriceList o)= CONCAT ' ', seriesNumberContractSku(o), ' от ' + dateFromContractSku(o);

replace(ContractSku c, ContractSku o) + { contractSku(UserPriceList object) <- o WHERE contractSku(object) == c;}

isCommission 'Продажа на комиссию' = DATA BOOLEAN (UserPriceList) IN documentPrm;

contractSku(UserPriceList o) += contractSku(o);
isCommission(UserPriceList o) += isCommission(o);

contractSku (PriceListDetail d) = contractSku(priceList(d)) MATERIALIZED INDEXED;
seriesNumberContractSku 'Номер договора' (PriceListDetail d) = seriesNumber[Contract](contractSku (d));

isCommission(UserPriceList o) <- type(contractSku(o)) == ContractSkuType.commission
    WHEN CHANGED(contractSku(o));

skipChangeContractSku = ABSTRACT VALUE BOOLEAN (UserPriceList);
WHEN LOCAL (CHANGED(company(UserPriceList o)) OR CHANGED(companyStock(o)) OR CHANGED(fromDate(o))) AND NOT CHANGED(contractSku(o)) AND NOT skipChangeContractSku(o) DO {
            
    contractSku(o) <- defaultContractSkuSupplier(company(o), companyStock(o), fromDate(o))
                                    IF countContractSkuSupplier(company(o), companyStock(o), fromDate(o)) == 1;

}

WHEN LOCAL FORMS userPriceList CHANGED(operation(UserPriceList p)) AND NOT isPosted(p) AND NOT showContract(operation(p)) DO {
    contractSku(p) <- NULL;
}

dateFromConstraintContractUserPriceList 'Дата начала контроля сроков договора прайс' = DATA DATE ();  

EXTEND FORM options 
    PROPERTIES dateFromConstraintContractUserPriceList()    
;
    
DESIGN options {
    contract {
        MOVE PROPERTY(dateFromConstraintContractUserPriceList());
    }
}   
   
CONSTRAINT contractSku(UserPriceList o) 
    AND NOT (dateFrom(contractSku(o)) <= fromDate(o) AND NOT (dateTo(contractSku(o)) < fromDate(o)))
    AND NOT (dateFromConstraintContractUserPriceList() > fromDate(o))
           CHECKED BY contractSku[UserPriceList]
           MESSAGE 'Договор прайс-листа просрочен или еще не действует';   

CONSTRAINT contractSku(UserPriceList o) AND NOT company(o) == partyA(contractSku(o))
    CHECKED BY contractSku[UserPriceList] MESSAGE 'Организация (поставщик) договора прайса не соответствует компании прайса';

CONSTRAINT contractSku(UserPriceList o) AND NOT isSeller(partyA(contractSku(o)))
    CHECKED BY contractSku[UserPriceList] MESSAGE 'Организация (поставщик) договора прайса не является поставщиком или компанией';

CONSTRAINT contractSku(UserPriceList o) AND NOT isBuyer(partyB(contractSku(o)))
    CHECKED BY contractSku[UserPriceList] MESSAGE 'Организация (покупатель) договора прайса не является покупателем или компанией';
               
CONSTRAINT contractSku(UserPriceList o) AND countSuppliersStock(contractSku(o)) AND NOT inSupplier(companyStock(o),contractSku(o))
    CHECKED BY contractSku[UserPriceList] MESSAGE 'Для прайса выбран склад организации, который не включен в договор';

skipShowContract= ABSTRACT BOOLEAN ();

EXTEND FORM userPriceList
    PROPERTIES (p) SHOWIF (showContract(p) AND NOT skipShowContract()) seriesNumberContractSku, isCommission
;
DESIGN userPriceList {
    GROUP(documentPrm,p){ 
        MOVE PROPERTY (seriesNumberContractSku(p)) AFTER PROPERTY(nameCompanyStock(p));
        MOVE PROPERTY (isCommission(p)) AFTER PROPERTY(seriesNumberContractSku(p));
    }
}

EXTEND FORM priceLists
    PROPERTIES (p) READONLYIF isReadonly() seriesNumberContractSku SHOWIF (NOT skipShowContract())AFTER nameCompanyStock(p)
;

@defineOperationProperty(isContract, 'Должен быть задан договор', constraintContainer);

skipIsContract = ABSTRACT BOOLEAN ();
CONSTRAINT isContract(operation(PriceList p)) AND NOT contractSku(p) AND NOT skipIsContract()
    MESSAGE 'Для прайса должен быть задан договор';
    
copyAbstractData(UserPriceList priceList, UserPriceList userPriceList) + {  
    contractSku(userPriceList) <- contractSku(priceList); 
}

showPriceList 'Отображать Прайсы в договорах' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES showPriceList()
;

DESIGN options {
    contract {
        MOVE PROPERTY(showPriceList());
    }
}

newPriceList 'Добавить' (UserContractSku c){
    IF NOT dateFrom(c) THEN {
        MESSAGE 'В договоре не заполнена дата с, проверьте.';
        RETURN ;
    }
    NEW p = UserPriceList {
        date(p) <- currentDate();
        fromDate(p) <- dateFrom(c);
        toDate(p) <- dateTo(c);
        company(p) <- partyA(c);
        companyStock(p) <- defaultStock(partyA(c));

        contractSku(p) <- c;
        operation(p) <- PriceList.operation('supplier');
        skipSetStocks(p) <- TRUE;
        dataIn(p, StockGroup sg) <- inCustomer(sg, c);
        dataIn(p, Stock ds) <- inCustomer(ds, c);
        SHOW userPriceList OBJECTS p = p MANAGESESSION DOCKED;
    }
}

EXTEND FORM userContractSku
    OBJECTS pl = PriceList
    PROPERTIES (pl) READONLY SHOWIF showPriceList() isPosted , number, series, date, time,
        fromDate, fromTime, toDate, toTime,
        nameCurrency, nameCompany, nameCompanyStock,
        note, guser = createdNameUser
    PROPERTIES (pl) SHOWIF showPriceList() TOOLBAR NEWSESSION EDIT, DELETE, copy
    PROPERTIES SHOWIF showPriceList() newPriceList(c) TOOLBAR
    FILTERGROUP inactivePriceList
        FILTER 'Текущие' isActive(pl) 'F11'
        FILTER 'Активные' NOT toDateTime(pl) < currentDateTime() 'F10' DEFAULT

;

DESIGN userContractSku {
    tabContainer {
        NEW priceList{
            caption = 'Прайсы';
            fill = 1;
            horizontal = TRUE;
            MOVE BOX(pl);
            TOOLBAR(pl){
                MOVE PROPERTY (newPriceList(c)) FIRST;
                MOVE PROPERTY (copy(pl));
            }
        }
    }
}
