MODULE PriceListType;

REQUIRE System, Document, Integration, Numerator, EmployeeStock, Barcode, PriceRound, Operation;

NAMESPACE PriceList;

// ---- Добавляем отдельную вкладку на форму Настройки
DESIGN options {
    pane {        
        NEW price {
            caption = 'Цены';
        }
    }
}

// --------------------------- Виды цен ------------------------- //

CLASS ABSTRACT COMPLEX PriceListType 'Вид цены';
TABLE priceListType(PriceListType);

@defineExternalizableAbstract(priceListType, STRING[100]);

name 'Наименование' = ABSTRACT ISTRING[100](PriceListType);

includeVAT 'Цена с НДС' = ABSTRACT BOOLEAN (PriceListType) MATERIALIZED COMPLEX;

priceB 'Цена' = ABSTRACT NUMERIC[16,4] (PriceListType, Sku, Stock, DATETIME) CHARWIDTH 7;
priceA 'Цена' = ABSTRACT NUMERIC[16,4] (PriceListType, Sku, Stock, DATETIME) CHARWIDTH 7;

priceB 'Цена' = ABSTRACT NUMERIC[16,4] (PriceListType, Batch, Stock, DATETIME) CHARWIDTH 7;
priceA 'Цена' = ABSTRACT NUMERIC[16,4] (PriceListType, Batch, Stock, DATETIME) CHARWIDTH 7;

prevPriceB 'Цена (пред.)' (PriceListType type, Sku sku, Stock stock, DATETIME dateTime) = PREV(priceB(type, sku, stock, dateTime)) CHARWIDTH 7 COMPLEX;
prevPriceA 'Цена (пред.)' (PriceListType type, Sku sku, Stock stock, DATETIME dateTime) = PREV(priceA(type, sku, stock, dateTime)) CHARWIDTH 7 COMPLEX;

prevPriceB 'Цена (пред.)' (PriceListType type, Batch batch, Stock stock, DATETIME dateTime) = PREV(priceB(type, batch, stock, dateTime)) CHARWIDTH 7 COMPLEX;
prevPriceA 'Цена (пред.)' (PriceListType type, Batch batch, Stock stock, DATETIME dateTime) = PREV(priceA(type, batch, stock, dateTime)) CHARWIDTH 7 COMPLEX;

prevPriceMVAT 'Цена без НДС (пред.)' (PriceListType type, Sku sku, Stock stock, DATETIME dateTime, NUMERIC[10,5] VAT) =
    IF includeVAT(type)
        THEN
            prevPriceB(type, sku, stock, dateTime) * 100 /(100 + VAT)
        ELSE
            prevPriceB(type, sku, stock, dateTime) IF VAT IS NUMERIC[10,5];

prevPricePVAT 'Цена с НДС (пред.)' (PriceListType type, Sku sku, Stock stock, DATETIME dateTime, NUMERIC[10,5] VAT) =
    IF includeVAT(type)
        THEN
            prevPriceB(type, sku, stock, dateTime) IF VAT IS NUMERIC[10,5]
        ELSE
            prevPriceB(type, sku, stock, dateTime) * (100 + VAT)/100;

prevPriceMVAT 'Цена без НДС (пред.)' (PriceListType type, Batch batch, Stock stock, DATETIME dateTime, NUMERIC[10,5] VAT) =
    IF includeVAT(type)
        THEN
            prevPriceB(type, batch, stock, dateTime) * 100 /(100 + VAT)
        ELSE
            prevPriceB(type, batch, stock, dateTime) IF VAT IS NUMERIC[10,5];

prevPricePVAT 'Цена с НДС (пред.)' (PriceListType type, Batch batch, Stock stock, DATETIME dateTime, NUMERIC[10,5] VAT) =
    IF includeVAT(type)
        THEN
            prevPriceB(type, batch, stock, dateTime) IF VAT IS NUMERIC[10,5]
        ELSE
            prevPriceB(type, batch, stock, dateTime) * (100 + VAT)/100;

@defineDocumentAbstractHeaderCurrency(priceListType);

roundCondition 'Условие округления' = DATA RoundCondition (PriceListType);
nameRoundCondition 'Условие округления' (PriceListType priceListType) = name(roundCondition(priceListType));

CONSTRAINT currency(roundCondition(PriceListType priceListType)) != currency(priceListType)
           CHECKED BY roundCondition[PriceListType]
           MESSAGE 'Валюта документа должна совпадать с валютой условия округления цены';

CLASS ABSTRACT BasePriceListType 'Базовый вид цены' : PriceListType;

name 'Наименование' = ABSTRACT ISTRING[100](BasePriceListType);
name(BasePriceListType type) += name(type) IF type IS BasePriceListType;

priceB (type, sku, stock, dateTime) = ABSTRACT NUMERIC[16,4] (BasePriceListType, Sku, Stock, DATETIME);
priceA (type, sku, stock, dateTime) = ABSTRACT NUMERIC[16,4] (BasePriceListType, Sku, Stock, DATETIME);

priceB (type, sku, stock, dateTime) = ABSTRACT NUMERIC[16,4] (BasePriceListType, Batch, Stock, DATETIME);
priceA (type, sku, stock, dateTime) = ABSTRACT NUMERIC[16,4] (BasePriceListType, Batch, Stock, DATETIME);

includeVAT 'Цена с НДС' = ABSTRACT BOOLEAN (BasePriceListType);
includeVAT(BasePriceListType type) += includeVAT(type);

priceB(BasePriceListType type, Sku sku, Stock stock, DATETIME dateTime) += priceB(type, sku, stock, dateTime);
priceA(BasePriceListType type, Sku sku, Stock stock, DATETIME dateTime) += priceA(type, sku, stock, dateTime);

priceB(BasePriceListType type, Batch batch, Stock stock, DATETIME dateTime) += priceB(type, batch, stock, dateTime);
priceA(BasePriceListType type, Batch batch, Stock stock, DATETIME dateTime) += priceA(type, batch, stock, dateTime);

FORM basePriceListTypes 'Базовые виды цен'
    OBJECTS t = BasePriceListType
    PROPERTIES(t) READONLY name
    LIST BasePriceListType OBJECT t
;
// --------------------------- Системные виды цен ------------------------- //
CLASS SystemPriceListType 'Системный вид цены' : BasePriceListType, StaticObject;

name(SystemPriceListType type) += ISTRING[100](staticCaption(type)) IF type IS SystemPriceListType;

priceB (type, sku, stock, dateTime) = ABSTRACT CASE EXCLUSIVE NUMERIC[16,4] (SystemPriceListType, Sku, Stock, DATETIME);
priceA (type, sku, stock, dateTime) = ABSTRACT CASE EXCLUSIVE NUMERIC[16,4] (SystemPriceListType, Sku, Stock, DATETIME);

prevPriceB 'Цена (пред.)' (SystemPriceListType type, Sku sku, Stock stock, DATETIME dateTime) = PREV(priceB(type, sku, stock, dateTime)) CHARWIDTH 7 COMPLEX;
prevPriceA 'Цена (пред.)' (SystemPriceListType type, Sku sku, Stock stock, DATETIME dateTime) = PREV(priceA(type, sku, stock, dateTime)) CHARWIDTH 7 COMPLEX;

priceB (type, sku, stock, dateTime) = ABSTRACT CASE EXCLUSIVE NUMERIC[16,4] (SystemPriceListType, Batch, Stock, DATETIME);
priceA (type, sku, stock, dateTime) = ABSTRACT CASE EXCLUSIVE NUMERIC[16,4] (SystemPriceListType, Batch, Stock, DATETIME);

prevPriceB 'Цена (пред.)' (SystemPriceListType type, Batch batch, Stock stock, DATETIME dateTime) = PREV(priceB(type, batch, stock, dateTime)) CHARWIDTH 7 COMPLEX;
prevPriceA 'Цена (пред.)' (SystemPriceListType type, Batch batch, Stock stock, DATETIME dateTime) = PREV(priceA(type, batch, stock, dateTime)) CHARWIDTH 7 COMPLEX;

includeVAT 'Цена с НДС' = ABSTRACT BOOLEAN (SystemPriceListType);
includeVAT(SystemPriceListType type) += includeVAT(type);

priceB(SystemPriceListType type, Sku sku, Stock stock, DATETIME dateTime) += priceB(type, sku, stock, dateTime);
priceA(SystemPriceListType type, Sku sku, Stock stock, DATETIME dateTime) += priceA(type, sku, stock, dateTime);

priceB(SystemPriceListType type, Batch batch, Stock stock, DATETIME dateTime) += priceB(type, batch, stock, dateTime);
priceA(SystemPriceListType type, Batch batch, Stock stock, DATETIME dateTime) += priceA(type, batch, stock, dateTime);

// --------------------------- Формы ------------------------- //

showCopy = ABSTRACT BOOLEAN (PriceListType);
overCopy  ABSTRACT LIST ( PriceListType);

copy 'Копировать'(PriceListType priceListType)  { 
    overCopy(priceListType);
} TOOLBAR;


FORM priceListType 'Вид цены'

    OBJECTS p = PriceListType
    PROPERTIES(p) READONLY id SHOWIF showIDs(), name, nameCurrency, nameRoundCondition
    PROPERTIES(p) READONLY includeVAT, objectClassName

    LIST PriceListType OBJECT p
;

FORM priceListTypes 'Виды цен'

    OBJECTS pt = PriceListType
    PROPERTIES(pt) READONLY id SHOWIF showIDs(), name, nameCurrency, nameRoundCondition, objectClassName
    PROPERTIES(pt) NEWSESSION EDIT, DELETE SHOWIF showCopy(pt)  
    ORDERS objectClassName(pt)
    PROPERTIES (pt) copy SHOWIF showCopy(pt)  
;   

DESIGN priceListTypes {
    NEW pane {
        fill = 1;
        MOVE BOX(pt);
    }
    MOVE TOOLBARBOX;
}

NAVIGATOR {
    NEW FOLDER priceListNavigator 'Цены' BEFORE administration WINDOW toolbar IMAGE 'priceList.png' {
        NEW FOLDER priceListDocuments 'Документы' {
        }
        NEW FOLDER priceListMasterData 'Справочники' {
            NEW priceListTypes;
            NEW priceIntervals;
        }
        NEW FOLDER priceListReport 'Отчеты' {
        }        
    }
}


// ---------------------- Макросы по добавлению видов цен в документы ------------------------------------ //

META defineDocumentHeaderPriceListType (object, type, prefix, caption)
    @defineDocumentHeaderPriceListType (object, type, ###type, prefix, caption);
END

META defineDocumentHeaderPriceListType (object, type, typeClass, prefix, caption)
    prefix###type (object) = DATA typeClass (###object);
    name###prefix###type 'Вид цен'###caption (###object object)= name(prefix###type(object)) IN documentPrm CHARWIDTH 5;
END

META defineDocumentAbstractHeaderPriceListType (object, type, prefix, caption)
    @defineDocumentAbstractHeaderPriceListType (object, type, ###type, prefix, caption);
END

META defineDocumentAbstractHeaderPriceListType (object, type, typeClass, prefix, caption)
    prefix###type (object) = ABSTRACT typeClass (###object) MATERIALIZED;
    name###prefix###type 'Вид цен'###caption (###object object)= name(prefix###type(object)) IN documentPrm CHARWIDTH 5;
END
META defineDocumentInterfaceHeaderPriceListType (object, type, prefix, caption)
    @defineDocumentAbstractHeaderPriceListType(object, type, prefix, caption);
    @defineDocumentHeaderPriceListType(user###object, type, prefix, caption);
    prefix###type (User###object object) += prefix###type(object);
END

META defineDocumentHeaderPriceListType (object)
    @defineDocumentHeaderPriceListType(object, priceListType, ,);
END
META defineDocumentAbstractHeaderPriceListType (object)
    @defineDocumentAbstractHeaderPriceListType(object, priceListType, ,);
END
META defineDocumentInterfaceHeaderPriceListType (object)
    @defineDocumentInterfaceHeaderPriceListType(object, priceListType, ,);
END

//--
META defineDocumentDetailPriceListTypePrefix (object, detail, type, prefix, caption)
    prefix###type = prefix###type(object (###detail detail));
    name###prefix###type 'Вид цен'###caption (###detail idetail) = name(prefix###type(idetail)) CHARWIDTH 10;
END
//--

META defineDocumentDetailPriceListType (object, detail, type, prefix, caption)
    @defineDocumentDetailPriceListTypeInner (object, detail, type, ###type, prefix, caption);
END

META defineDocumentDetailPriceListTypeInner (object, detail, type, typeClass, prefix, caption)
    prefix###type =  DATA typeClass (###detail);
    name###prefix###type 'Вид цен'###caption (###detail idetail) = name(prefix###type(idetail)) CHARWIDTH 10;
END

META defineDocumentAbstractDetailPriceListType (object, detail, type, prefix, caption)
    @defineDocumentAbstractDetailPriceListTypeInner(object, detail, type, ###type, prefix, caption);
END

META defineDocumentAbstractDetailPriceListTypeInner (object, detail, type, typeClass, prefix, caption)
    prefix###type =  ABSTRACT typeClass (###detail) MATERIALIZED;
    name###prefix###type 'Вид цен'###caption (###detail idetail) = name(prefix###type(idetail)) CHARWIDTH 10;
END

META defineDocumentPriceListType (object, detail, type, prefix, caption)
    @defineDocumentHeaderPriceListType(object, type, prefix, caption);
    @defineDocumentDetailPriceListType(object, detail, type, prefix, caption);
END
META defineDocumentPriceListType (object, type, prefix, caption)
    @defineDocumentPriceListType(object, object##Detail, type, prefix, caption);
END

META defineDocumentInterfaceDetailPriceListType (object, detail, type, prefix, caption)
    @defineDocumentAbstractDetailPriceListType(object, detail, type, prefix, caption);
    @defineDocumentDetailPriceListType(user###object, user###detail, type, prefix, caption);
    prefix###type (User###detail detail) += prefix###type (detail);
END

META defineDocumentInterfaceDetailPriceListType (object, type, prefix, caption)
    @defineDocumentInterfaceDetailPriceListType(object, object##Detail, type, prefix, caption);
END

META defineDocumentInterfacePriceListType (object, detail, type, prefix, caption)
    @defineDocumentInterfaceHeaderPriceListType(object, type, prefix, caption);
    @defineDocumentInterfaceDetailPriceListType(object, detail, type, prefix, caption);

    CONSTRAINT currency(User###object object) != currency(type(object))
               CHECKED BY type[User###object]
               MESSAGE 'Валюта документа должна совпадать с валютой вида цены'###caption;

    CONSTRAINT currency(User###detail detail) != currency(type(detail))
               CHECKED BY type[User###detail]
               MESSAGE 'Валюта документа должна совпадать с валютой вида цены'###caption;
END
META defineDocumentInterfacePriceListType (object, type, prefix, caption)
    @defineDocumentInterfacePriceListType(object, object##Detail, type, prefix, caption);
END

//--
META defineDocumentDetailPriceListType (object, detail)
    @defineDocumentDetailPriceListType(object, detail, priceListType, , );
END

META defineDocumentAbstractDetailPriceListType (object, detail)
    @defineDocumentAbstractDetailPriceListType(object, detail, priceListType, , );
END

META defineDocumentPriceListType (object, detail)
    @defineDocumentPriceListType (object, detail, priceListType, , );
END
META defineDocumentPriceListType (object)
    @defineDocumentPriceListType(object, object##Detail);
END

META defineDocumentInterfaceDetailPriceListType (object, detail)
    @defineDocumentInterfaceDetailPriceListType (object, detail, priceListType, , );
END

META defineDocumentInterfaceDetailPriceListType (object)
    @defineDocumentInterfaceDetailPriceListType(object, object##Detail);
END

META defineDocumentInterfacePriceListType (object, detail)
    @defineDocumentInterfacePriceListType (object, detail, priceListType, , );
END
META defineDocumentInterfacePriceListType (object)
    @defineDocumentInterfacePriceListType(object, object##Detail);
END

// ----------------------------------------------- Автоматическое проставление

META deriveDocumentDetailPricePriceListTypeCustom (detail, stockProp)
    price(###detail detail) <- prevPriceB(priceListType(detail),
                                                                      sku(detail),
                                                                      stockProp(detail),
                                                                      dateTime(detail))
                                    WHEN DO CHANGED(priceListType(detail)) OR
                                         CHANGED(sku(detail)) OR
                                         CHANGED(stockProp(detail)) OR
                                         CHANGED(dateTime(detail));
END

META deriveDocumentDetailPricePriceListType (object, stockProp)
    @deriveDocumentDetailPricePriceListTypeCustom(object##Detail, stockProp);
END

META deriveDocumentDetailPricePriceListTypeVATCustom (detail, stockProp)
    prevListSkuPrice###detail (detail) = prevPriceBPriceListTypeSkuStockDateTime(priceListType###detail(detail),
                                                                                 sku###detail(detail),
                                                                                 stockProp###detail(detail),
                                                                                 dateTime###detail(detail));

    prevListSkuPriceMVAT###detail (detail) =
        IF includeVATPriceListType(priceListType###detail(detail))
            THEN
                prevListSkuPrice###detail(detail) * 100.0 /(100.0 + calcValueVAT###detail(detail))
            ELSE
                prevListSkuPrice###detail(detail);

    prevListSkuPricePVAT###detail (detail) =
        IF includeVATPriceListType(priceListType###detail(detail))
            THEN
                prevListSkuPrice###detail(detail)
            ELSE
                prevListSkuPrice###detail(detail) * (100.0 + calcValueVAT###detail(detail)) / 100.0;

    price###detail(detail) <- prevListSkuPriceMVAT###detail (detail)
                            WHEN DO priceListType###detail(detail) AND
                                 (CHANGED(priceListType###detail(detail)) OR
                                 CHANGED(sku###detail(detail)) OR
                                 CHANGED(stockProp###detail(detail)) OR
                                 CHANGED(dateTime###detail(detail)));

    invoice###price###detail(detail) <- prevListSkuPricePVAT###detail (detail)
                            WHEN DO priceListType###detail(detail) AND
                                 (CHANGED(priceListType###detail(detail)) OR
                                 CHANGED(sku###detail(detail)) OR
                                 CHANGED(stockProp###detail(detail)) OR
                                 CHANGED(dateTime###detail(detail)));

END

META deriveDocumentDetailPricePriceListTypeVAT (object, stockProp)
    @deriveDocumentDetailPricePriceListTypeVATCustom (object##Detail, stockProp);
END

META deriveDocumentDetailPriceBatchPriceListTypeCustom (detail, stockProp)
    price(###detail detail) <- IF batch(detail) THEN
                                    prevPriceB(priceListType(detail),
                                                                              batch(detail),
                                                                              stockProp(detail),
                                                                              dateTime(detail))
                              ELSE
                                    prevPriceB(priceListType(detail),
                                                                            sku(detail),
                                                                            stockProp(detail),
                                                                            dateTime(detail))
                                    WHEN DO priceListType(detail) AND
                                        (CHANGED(batch(detail)) OR
                                         CHANGED(priceListType(detail)) OR
                                         CHANGED(sku(detail)) OR
                                         CHANGED(stockProp(detail)) OR
                                         CHANGED(dateTime(detail)));
END

META deriveDocumentDetailPriceBatchPriceListType (object, stockProp)
    @deriveDocumentDetailPriceBatchPriceListTypeCustom(object##Detail, stockProp);
END

notUseRound2 'Не использовать округление до двух знаков при расчете цены' = DATA BOOLEAN ();
EXTEND FORM options 
    PROPERTIES notUseRound2()
;
DESIGN options {
    price {
        MOVE PROPERTY (notUseRound2());      
    }
}

META deriveDocumentDetailPricePriceListTypeVATBatchCustomOperation (detail)
    defaultPriceRoundCalc( ###detail detail) += defaultPriceRound(operation(detail));
END
META deriveDocumentDetailPricePriceListTypeVATBatchCustom (detail, stockProp, dateTimeProp, form)
    defaultPriceRoundCalc = ABSTRACT INTEGER (###detail);
    defaultPriceRound( ###detail detail) = OVERRIDE defaultPriceRoundCalc(detail), 2 IF detail IS ###detail;
    prevList (priceListType, detail) = ABSTRACT CASE NUMERIC[16,4] (PriceListType, ###detail); 
    prevList (PriceListType priceListType, ###detail detail) += WHEN priceListType IS PriceListType AND sku(detail) THEN  
                                                         prevPriceB(priceListType,
                                                                    sku(detail),
                                                                    stockProp(detail),
                                                                    dateTimeProp(detail));

    prevList (PriceListType priceListType, ###detail detail) += WHEN priceListType IS PriceListType AND batch(detail) THEN
                                                          prevPriceB(priceListType,
                                                                     batch(detail),
                                                                     stockProp(detail),
                                                                     dateTimeProp(detail));

    prevListMVAT (PriceListType priceListType, ###detail detail) =
        round(
        (IF includeVAT(priceListType)
            THEN
                prevList(priceListType, detail) * 100.0 /(100.0 (+) calcValueVAT(detail))
            ELSE
                prevList(priceListType, detail)),defaultPriceRound(detail));

    prevListPVAT (PriceListType priceListType, ###detail detail) =
        round(
        (IF includeVAT(priceListType)
            THEN
                prevList(priceListType, detail)
            ELSE
                prevList(priceListType, detail) * (100.0 (+) calcValueVAT(detail)) / 100.0), defaultPriceRound(detail));
                
    disableUpdateInvoicePrice = ABSTRACT VALUE BOOLEAN (###detail);
    
    WHEN LOCAL FORMS form GOAFTER valueVAT[###detail] // цены берем на начало сессии, а не этого event'а
            (((CHANGED(stockProp(###detail d)) OR
             CHANGED(dateTimeProp(d))) AND NOT isPosted(d)) OR
             (CHANGED(priceListType(d)) OR
             CHANGED(batch(d)) OR
             CHANGED(sku(d))))
             AND NOT CHANGED(price(d)) 
             AND PriceListType pt == priceListType(d) AND sku(d) AND includeVAT(pt) AND NOT disableUpdateInvoicePrice(d) NOINLINE (pt) DO {
        price(d) <- round((prevList(pt, d) * 100.0 /(100.0 (+) calcValueVAT(d))), defaultPriceRound(d));
        invoicePrice(d) <- round(prevList(pt, d), defaultPriceRound(d));
    }

    WHEN LOCAL FORMS form GOAFTER valueVAT[###detail] // цены берем на начало сессии, а не этого event'а
            (((CHANGED(stockProp(###detail d)) OR
             CHANGED(dateTimeProp(d))) AND NOT isPosted(d)) OR
             (CHANGED(priceListType(d)) OR
             CHANGED(batch(d)) OR
             CHANGED(sku(d))))
             AND NOT CHANGED(price(d)) 
             AND PriceListType pt == priceListType(d) AND sku(d) AND NOT includeVAT(pt) AND NOT disableUpdateInvoicePrice(d) NOINLINE (pt) DO {
        price(d) <- round(prevList(pt, d), defaultPriceRound(d));
        invoicePrice(d) <- round((prevList(pt, d) * (100.0 (+) calcValueVAT(d)) / 100.0), defaultPriceRound(d));
    }
    overRecalculatePrice###detail  ABSTRACT LIST ( );
    
    recalculatePrice###detail 'Пересчитать цены'()  { 
        FOR PriceListType pt == priceListType(###detail d) AND sku(d) AND NOT disableUpdateInvoicePrice(d) AND [ FILTER form.d](d) AND includeVAT(pt) NOINLINE (pt) DO {
            IF notUseRound2() THEN {
                 price(d) <-prevList(pt, d) * 100.0 /(100.0 (+) calcValueVAT(d));
                 invoicePrice(d) <- prevList(pt, d);           
            } ELSE {
                price(d) <- round((prevList(pt, d) * 100.0 /(100.0 + calcValueVAT(d))), defaultPriceRound(d));
                invoicePrice(d) <- round(prevList(pt, d), defaultPriceRound(d));
            }    
        }
        FOR PriceListType pt == priceListType(###detail d) AND sku(d) AND NOT disableUpdateInvoicePrice(d) AND [ FILTER form.d](d) AND NOT includeVAT(pt) NOINLINE (pt) DO {
            IF notUseRound2() THEN {
                price(d) <- prevList(pt, d);
                invoicePrice(d) <- prevList(pt, d) * (100.0 (+) calcValueVAT(d)) / 100.0;            
            } ELSE {        
                price(d) <- round(prevList(pt, d), defaultPriceRound(d));
                invoicePrice(d) <- round((prevList(pt, d) * (100.0 (+) calcValueVAT(d)) / 100.0), defaultPriceRound(d));
            }    
        }
        overRecalculatePrice###detail();
    } ASON CONTEXTMENU price[###detail];

END

META deriveDocumentDetailPricePriceListTypeVATBatchCustom (detail, stockProp, form)
    @deriveDocumentDetailPricePriceListTypeVATBatchCustom (detail, stockProp, dateTime, form);
END


META deriveDocumentDetailPricePriceListTypeVATBatch (object, stockProp, dateTimeProp, form)
    @deriveDocumentDetailPricePriceListTypeVATBatchCustom (object##Detail, stockProp, dateTimeProp, form);
END

META deriveDocumentDetailPricePriceListTypeVATBatch (object, stockProp, form)
    @deriveDocumentDetailPricePriceListTypeVATBatchCustom (object##Detail, stockProp, form);
END

// ----------------------------- Макрос по добавлению в операции видов цен -------------------------- //

META defineOperationPriceListType(dumb)

    TABLE priceListTypeOperation(PriceListType, Operation);
    in 'Отм.' = DATA BOOLEAN (PriceListType, Operation);
    
    defaultPriceListType 'Вид цены по умолчанию' = DATA PriceListType(Operation);
    isDefault 'По умолчанию' (PriceListType type, Operation operation) = defaultPriceListType(operation) == type;
    
    defaultReturnPriceListType 'Вид цены по умолчанию (возврат)' = DATA PriceListType(Operation);
    isDefaultReturn 'По умолчанию (возврат)' (PriceListType type, Operation operation) = defaultReturnPriceListType(operation) == type;
    
    notUseReturnPriceListType 'Не использовать вид цены на возврате' = DATA BOOLEAN(Operation);
    
    EXTEND FORM operation
        OBJECTS pt = PriceListType
        PROPERTIES(pt, o) in, isDefault, isDefaultReturn
        PROPERTIES(pt) READONLY id SHOWIF showIDs(), name, nameCurrency, objectClassName
        PROPERTIES(o) notUseReturnPriceListType
        FILTERGROUP filters
            FILTER 'Показывать отмеченные' in(pt, o) 'F9'
    ;

    DESIGN operation {
        tabContainer {
            NEW priceListTypes {
                caption = 'Виды цен';
                type = CONTAINERV;
                MOVE BOX(pt);
                MOVE PROPERTY(notUseReturnPriceListType(o));
            }
        }
    }

END

META defineDocumentOperationPriceListType(object, caption, form, defaultPrefix)
    CONSTRAINT operation(###object object) AND priceListType(object)
               AND NOT in(priceListType(object), operation(object))
        CHECKED BY priceListType[###object]
        MESSAGE 'Вид цены для '###caption###' должен совпадать с отмеченными в операции ';

    CONSTRAINT operation(###object##Detail detail) AND priceListType(detail)
               AND NOT in(priceListType(detail), operation(detail))
        CHECKED BY priceListType[###object##Detail]
        MESSAGE 'Вид цены для строки '###caption###' должен совпадать с отмеченными в операции';
        
    skipSetPriceListType = ABSTRACT BOOLEAN (###object);    
        
    WHEN LOCAL CHANGED(operation(###object object)) AND NOT CHANGED(priceListType(object)) AND NOT skipSetPriceListType(object) DO {
        IF default###defaultPrefix##PriceListType(operation(object)) THEN
            priceListType(object) <- default###defaultPrefix##PriceListType(operation(object));
        ELSE IF defaultPriceListType(operation(object)) AND NOT notUseReturnPriceListType(operation(object)) THEN
                priceListType(object) <- defaultPriceListType(operation(object)); 
    }
    
    WHEN LOCAL GOAFTER priceListType[###object] CHANGED(operation(###object object)) AND priceListType(object) DO {
        IF TRUE AND NOT in(priceListType(object), operation(object)) THEN
            priceListType(object) <- NULL; 
    }
END

META defineDocumentOperationPriceListType(object, caption, form)
    @defineDocumentOperationPriceListType(object, caption, form,);
END