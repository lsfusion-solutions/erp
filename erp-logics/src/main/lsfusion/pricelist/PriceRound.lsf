MODULE PriceRound;

REQUIRE System, Utils, DefaultData, Stock, Sku;


//--  По группам
CLASS RoundCondition 'Условие округления';
TABLE roundCondition (RoundCondition);

name 'Наименование' = DATA ISTRING[50](RoundCondition);

currency = DATA Currency(RoundCondition) NONULL DELETE;
nameCurrency 'Валюта' (RoundCondition roundCondition)= name(currency(roundCondition));

denominatorPrice 'Делитель' =  DATA NUMERIC[16,4](RoundCondition);
minPrice 'Нижний порог' =  DATA NUMERIC[16,4](RoundCondition);
priceRound 'Количество знаков после запятой' (roundCondition)=  DATA INTEGER (RoundCondition);

defaultRoundCondition = DATA RoundCondition(Currency);
defaultRound 'Округление' (Currency currency) = priceRound(defaultRoundCondition(currency)) MATERIALIZED;
isDefault 'По умолчанию' (RoundCondition roundCondition, Currency currency) = defaultRoundCondition(currency) == roundCondition;
defaultRound 'Округление' () = defaultRound(defaultCurrency());

//priceRound 'Округление по умолчанию' (Currency currency) = priceRound(defaultRoundCondition(currency)) MATERIALIZED;

CLASS PriceInterval 'Диапазон цен';
TABLE priceInterval (PriceInterval);

roundCondition = DATA RoundCondition(PriceInterval) NONULL DELETE;

from 'Цена от' = DATA NUMERIC[16,4](PriceInterval) IN base;
to 'Остаток до' = DATA NUMERIC[16,4](PriceInterval) IN base;
modifier 'Округлённая цена интервала' = DATA NUMERIC[16,4](PriceInterval) IN base;

dataDenominatorPrice 'Делитель' = DATA NUMERIC[16,4] (PriceInterval);

denominatorPrice (PriceInterval l) = OVERRIDE dataDenominatorPrice(l), denominatorPrice(roundCondition(l)) MATERIALIZED;

inInterval (NUMERIC[22,10] price, PriceInterval interval) = 
    price >= from(interval) AND mod(price, denominatorPrice(interval)) < to(interval);

onStarted () + { 
    minPrice(RoundCondition c) <- NULL WHERE NOT [ GROUP SUM 1 BY roundCondition(PriceInterval i)](c);
} 

priceInterval (NUMERIC[22,10] price, RoundCondition roundCondition) =
    GROUP LAST floor(price AS NUMERIC[22,10], denominatorPrice(PriceInterval interval)) + modifier(interval)
          ORDER interval
          WHERE inInterval(price, interval)
          BY roundCondition(interval);

round (NUMERIC[16,4] price, RoundCondition roundCondition) = NUMERIC[16,4](
    OVERRIDE priceInterval(price, roundCondition) IF (price AS NUMERIC[22,10]) > minPrice(roundCondition), 
             Utils.round(price AS NUMERIC[22,10], priceRound(roundCondition))
    ) COMPLEX; // для COMPLEX

round(price, Currency currency) = Utils.round(price, defaultRound(currency));

FORM priceIntervals 'Округления цен'

    OBJECTS c=Currency PANEL
    PROPERTIES (c)  SELECTOR name

    OBJECTS rc=RoundCondition
    PROPERTIES(rc) name, denominatorPrice, minPrice, priceRound, NEW, DELETE 
    PROPERTIES(rc, c) isDefault

    OBJECTS nu=NUMERIC[16,4] PANEL
    PROPERTIES val = VALUE(nu)
    PROPERTIES(nu, rc) READONLY round
    
    OBJECTS p=PriceInterval
    PROPERTIES(p) BACKGROUND inInterval(nu, p) from, dataDenominatorPrice, to, modifier, NEW, DELETE 

    FILTERS currency(rc) == c,
            roundCondition(p) == rc
;

DESIGN priceIntervals {
    MOVE BOX(c) {
        PROPERTY (name(c)) {
            charWidth = 30;
            panelCaptionVertical = TRUE;
            font = 'bold 24';
        }
    }

    NEW specification {
        fill = 1;

        MOVE BOX(rc);
        MOVE BOX(p);
        MOVE BOX(nu) {
            caption = 'Тестовая форма';
            horizontal = TRUE;
            MOVE PROPERTY (val) {
                caption = 'Введите число для примера';
                panelCaptionVertical = TRUE;
                font = 'bold 36';
            }
            MOVE PROPERTY (round(nu, rc)) {
                caption = 'Результат';
                panelCaptionVertical = TRUE;
                font = 'bold 36';
            }
        }
    }
    MOVE TOOLBARBOX;
}

FORM dialogPriceIntervals 'Округления цен'

    OBJECTS rc=RoundCondition
    PROPERTIES(rc) READONLY name, denominatorPrice, minPrice, priceRound, nameCurrency
    OBJECTS p=PriceInterval
    PROPERTIES(p) READONLY from, to, modifier

    FILTERS roundCondition(p) == rc

    LIST RoundCondition OBJECT rc
;
DESIGN dialogPriceIntervals {
    BOX {
        size = (1024, 768);
    }
}