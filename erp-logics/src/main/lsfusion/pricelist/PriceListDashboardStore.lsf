MODULE PriceListDashboardStore;

REQUIRE PriceListDashboard, StoreSkuLedger, PriceListStore;

// -------------------- В прайсе ----------------- //

// по организациям
countDepartmentStoreA 'В прайсе' (LedgerPriceListType type, Sku sku, store, LegalEntity company, DATETIME dateTime) =
    GROUP SUM 1 IF priceA(type, sku, DepartmentStore stock, company, dateTime)
    BY store(stock);

countStoreA 'В прайсе' (LedgerPriceListType type, Sku sku, storeType, LegalEntity company, DATETIME dateTime) =
    GROUP SUM 1 IF countDepartmentStoreA(type, sku, Store store, company, dateTime)
    BY storeType(store);

countStoreA 'В прайсе' (LedgerPriceListType type, Sku sku, LegalEntity company, DATETIME dateTime) =
    GROUP
    SUM 1 IF countDepartmentStoreA(type, sku, Store store, company, dateTime);

// по складам
countDepartmentStoreA 'В прайсе' (LedgerPriceListType type, Sku sku, store, DATETIME dateTime) =
    GROUP SUM 1 IF priceA(type, sku, DepartmentStore stock, dateTime)
    BY store(stock);

countStoreA 'В прайсе' (LedgerPriceListType type, Sku sku, storeType, DATETIME dateTime) =
    GROUP SUM 1 IF countDepartmentStoreA(type, sku, Store store, dateTime)
    BY storeType(store);

countStoreA 'В прайсе' (LedgerPriceListType type, Sku sku, DATETIME dateTime) =
    GROUP
    SUM 1 IF countDepartmentStoreA(type, sku, Store store, dateTime);

// --------------------- В наличии ---------------- //

countStoreA 'В наличии' (Sku sku, storeType, DATETIME dateTime) =
    GROUP SUM 1 IF balanceA(sku, Store store, dateTime)
    BY storeType(store);

EXTEND FORM priceListDashboard
    // --- По организациям
    PROPERTIES READONLY countStoreA(pt, csk, c, dt) AFTER idBarcode(csk)

    OBJECTS ctp=StoreType BEFORE cst
    PROPERTIES READONLY name(ctp), countStore(ctp), countStoreA(pt, csk, ctp, c, dt), countStoreA(csk, ctp, dt)
    FILTERS countStoreA(pt, csk, ctp, c, dt)
    
    FILTERGROUP storeType
        FILTER 'По формату' storeType(cst) == ctp DEFAULT

    // --- По складам
    PROPERTIES READONLY countStoreA(pt, ssk, dt) AFTER idBarcode(ssk)

    OBJECTS stp=StoreType
    PROPERTIES READONLY name(stp), countStore(stp), countStoreA(pt, ssk, stp, dt), countStoreA(ssk, stp, dt)
    FILTERS countStoreA(pt, ssk, stp, dt)
;

DESIGN priceListDashboard {
    cStocks {
        MOVE BOX(ctp) BEFORE BOX(cst);
    }
    sStocks {
        MOVE BOX(stp) BEFORE BOX(sst);
    }
}

// ------------------------------- Добавляем розничный вид цены ----------------------------------- //

activeMarkupACompany 'Надбавка, % (управленческая)' (LedgerPriceListType pt, Sku s, DepartmentStore d, LegalEntity c, DATETIME dt) =
    retailPriceA (s, d, dt) * 10000.0 /
    ((valueRate(VAT(s, d), DATE(dt)) + 100.0) *
     activePriceA (pt, s, c, dt) IF activePriceA (pt, s, c, dt) != 0)
    - 100.0;

markupAStock 'Надбавка, % (управленческая)' (LedgerPriceListType pt, Sku s, DepartmentStore d, DATETIME dt) =
    retailPriceA (s, d, dt) * 10000.0 /
    ((valueRate(VAT(s, d), DATE(dt)) + 100.0) *
     priceA (pt, s, d, dt) IF priceA (pt, s, d, dt) != 0)
    - 100.0;


EXTEND FORM priceListDashboard
    PROPERTIES DRAW ssk READONLY AFTER sPrice GRID
            markupAStock(pt, ssk, s, dt),
            sRetailPrice = retailPriceA(ssk, s, dt),
            markup(ssk, s),            
            markupPriceA(pt, ssk, s, dt)
;

DESIGN priceListDashboard {
    PROPERTY(sRetailPrice) {
        caption = 'Розничная цена (управленческая)';
    }
}

// -------------------- Изменение согласованных и розничных цен одновременно --------------------------- //
createRetailCompany(LegalEntity company, DATETIME dateTime, PriceListType dataPriceListType, Stock departmentStore)  { 
    NEWSESSION NESTED (in[Sku]) {
        NEW u = UserPriceList {
            fillCompanyPriceList(u, company, dateTime, dataPriceListType, departmentStore);
    
            in(u, DataPriceListType t) <- TRUE WHERE t == retailPriceListType(departmentStore);
            show(u, PriceListType t) <- TRUE WHERE t == retailPriceListType(departmentStore);
    
            SHOW userPriceList OBJECTS p = u DOCKED;
            in(Sku s) <- NULL;
        }
    }
}

createRetailPricesCompany(LegalEntity company, DATETIME dateTime, PriceListType dataPriceListType, Stock departmentStore)  { 
    NEWSESSION NESTED (in[Sku]) {
        NEW u = UserPriceList {
            fillCompanyPriceList(u, company, dateTime, dataPriceListType, departmentStore);
            price[UserPriceListDetail,DataPriceListType](UserPriceListDetail d, dataPriceListType) <-
                priceA[LedgerPriceListType,Sku,Stock,DATETIME](dataPriceListType, sku(d), departmentStore, dateTime)
                WHERE userPriceList(d) == u;
    
            in(u, DataPriceListType t) <- TRUE WHERE t == retailPriceListType(departmentStore);
            show(u, PriceListType t) <- TRUE WHERE t == retailPriceListType(departmentStore);
            price(UserPriceListDetail d, DataPriceListType t) <-
                priceA(t, sku(d), departmentStore, dateTime)
                WHERE userPriceList(d) == u AND t == retailPriceListType(departmentStore);
    
            SHOW userPriceList OBJECTS p = u DOCKED;
            in(Sku s) <- NULL;
        }
    }
}

// Изменение цен
modifyRetailPricesData 'Изменить'(DATETIME dateTime, LedgerPriceListType dataPriceListType, Stock stock)  { 
    FOR [ GROUP SUM 1 IF in(Sku s) BY companyA(dataPriceListType, s, stock, dateTime)] (LegalEntity company) DO {
        createRetailPricesCompany(company, dateTime, dataPriceListType, stock);
    }
}

// Исключение из ассортимента
excludeRetailData 'Исключить'(DATETIME dateTime, LedgerPriceListType dataPriceListType, Stock stock)  { 
    FOR [ GROUP SUM 1 IF in(Sku s) BY companyA(dataPriceListType, s, stock, dateTime)] (LegalEntity company) DO {
        createRetailCompany(company, dateTime, dataPriceListType, stock);
    }
}

EXTEND FORM priceListDashboard
    PROPERTIES DRAW ssk  modifyRetailPricesData(dt, pt, s),
                                      excludeRetailData(dt, pt, s)
;

DESIGN priceListDashboard {
    stockActionsContainer {
        NEW primaryRetailStockActions {
            horizontal = TRUE;
            caption = 'Согласованные и розничные цены';
            MOVE PROPERTY(modifyRetailPricesData(dt, pt, s));
            MOVE PROPERTY(excludeRetailData(dt, pt, s));
        }
    }
}

// ------------------------------- Изменение розничных цен по складу -------------------------- //

modifyRetailData 'Изменить'(DATETIME dateTime, PriceListType dataPriceListType, Stock departmentStore)  { 

    NEWSESSION NESTED (in[Sku]) {
        NEW u = UserPriceList {
            fromDate(u) <- toDate(dateTime);
            fromTime(u) <- toTime(dateTime);
            company(u) <- legalEntity(departmentStore);
            currency(u) <- currency(retailPriceListType(departmentStore));
            in(u, DataPriceListType t) <- TRUE WHERE t == retailPriceListType(departmentStore);
            show(u, PriceListType t) <- TRUE WHERE t == retailPriceListType(departmentStore);
            show(u, dataPriceListType) <- TRUE;
            dataIn(u, departmentStore) <- TRUE;
            FOR in(Sku sku)
                NEW d = UserPriceListDetail DO {
                sku(d) <- sku;
                userPriceList(d) <- u;
                price(d, DataPriceListType t) <-
                            priceA(t, sku(d), departmentStore, dateTime) WHERE t == retailPriceListType(departmentStore);
            }
    
            SHOW userPriceList OBJECTS p = u DOCKED;
            in(Sku s) <- NULL;
        }
    }
}

EXTEND FORM priceListDashboard
    PROPERTIES DRAW csk 
                                      modifyRetailData(dt, pt, s)
;

DESIGN priceListDashboard {
    stockActionsContainer {
        NEW retailStockActions {
            caption = 'Розничные цены';
            MOVE PROPERTY(modifyRetailData(dt, pt, s));
        }
    }
}
