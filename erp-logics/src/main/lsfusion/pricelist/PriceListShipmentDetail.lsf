MODULE PriceListShipmentDetail;

REQUIRE PriceListAccount, PurchaseShipment;

NAMESPACE Purchase;

afterCost 'Себестоимость (после)' = DATA NUMERIC[16,4] (ShipmentDetail);

INDEX customerStock(ShipmentDetail d), sku(d), dateTime(d), d;
prevShipmentDetail (ShipmentDetail d) = PARTITION PREV d ORDER dateTime(d), d IF isPosted(d) BY customerStock(d), sku(d);
prevAfterCost (ShipmentDetail d) = afterCost(prevShipmentDetail(d));

balanceB 'Остаток (до)' (ShipmentDetail d) = prevBalanceB(sku(d), customerStock(d), dateTime(d));
    
positiveBalanceB (ShipmentDetail d) = 
    prevBalanceB(sku(d), customerStock(d), dateTime(d)) IF prevBalanceB(sku(d), customerStock(d), dateTime(d))>0.0;

calcAfterCost (ShipmentDetail d) = round2((prevAfterCost(d)*positiveBalanceB(d) (+) sum(d))/(quantity(d) (+) positiveBalanceB(d)));

EXTEND FORM currentBalanceSkuStock
    OBJECTS sd = ShipmentDetail
    PROPERTIES (sd) READONLY dateTime, number, price, quantity, afterCost, balanceB
    ORDERS dateTime(sd) DESC
    FILTERS sku(sd)=s, customerStock(sd)=st
;

DESIGN currentBalanceSkuStock {
    ledgerBox {
        MOVE BOX(sd) {
            caption = 'Поставки (закупка)';
        }
    }
}

//afterCost(ShipmentDetail detail) <- PREV(calcAfterCost(detail)) WHEN
//    CHANGED(calcAfterCost(detail));
    
WHEN LOCAL CHANGED(calcAfterCost(ShipmentDetail detail)) DO {
    afterCost(detail) <- calcAfterCost(detail);
}    

lastShipmentDetail(sku, stock, DATETIME dateTime)  =
        GROUP LAST ShipmentDetail  detail
              ORDER dateTime(detail), detail
              WHERE dateTime(detail) <= dateTime AND isPosted(detail) AND afterCost(detail)
              BY sku(detail), customerStock(detail);

afterCost(Stock stock, Sku sku, DATETIME dateTime) = afterCost(lastShipmentDetail(sku, stock, dateTime));

accountPriceB (Sku sku, Stock stock, DATETIME dateTime) += NUMERIC[16,4](afterCost(stock, sku, dateTime));
accountPriceA (Sku sku, Stock stock, DATETIME dateTime) += NUMERIC[16,4](afterCost(stock, sku, dateTime));

accountPriceB (Batch batch, Stock stock, DATETIME dateTime) += NUMERIC[16,4](afterCost(stock, sku(batch), dateTime));;
accountPriceA (Batch batch, Stock stock, DATETIME dateTime) += NUMERIC[16,4](afterCost(stock, sku(batch), dateTime));;

EXTEND CLASS SystemPriceListType {
    accountPriceListType 'Учетная'
}
// Учетные цены и суммы для товаров

priceB[SystemPriceListType, Sku, Stock, DATETIME] (SystemPriceListType type, Sku sku, Stock stock, DATETIME dateTime) += 
    WHEN type == SystemPriceListType.accountPriceListType AND sku IS Sku AND stock IS Stock AND dateTime IS DATETIME 
        THEN NUMERIC[16,4](afterCost(stock, sku, dateTime));
priceA[SystemPriceListType, Sku, Stock, DATETIME] (SystemPriceListType type, Sku sku, Stock stock, DATETIME dateTime) += 
    WHEN type == SystemPriceListType.accountPriceListType AND sku IS Sku AND stock IS Stock AND dateTime IS DATETIME 
        THEN NUMERIC[16,4](afterCost(stock, sku, dateTime));

priceB[SystemPriceListType, Batch, Stock, DATETIME] (SystemPriceListType type, Batch batch, Stock stock, DATETIME dateTime) += 
    WHEN type == SystemPriceListType.accountPriceListType AND batch IS Batch AND stock IS Stock AND dateTime IS DATETIME 
        THEN NUMERIC[16,4](afterCost(stock, sku(batch), dateTime));
priceA[SystemPriceListType, Batch, Stock, DATETIME] (SystemPriceListType type, Batch batch, Stock stock, DATETIME dateTime) += 
    WHEN type == SystemPriceListType.accountPriceListType AND batch IS Batch AND stock IS Stock AND dateTime IS DATETIME 
        THEN NUMERIC[16,4](afterCost(stock, sku(batch), dateTime));
        
        


