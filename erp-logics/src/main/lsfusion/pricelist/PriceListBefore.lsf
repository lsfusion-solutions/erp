MODULE PriceListBefore;

REQUIRE PriceList, PriceListOperation;

NAMESPACE PriceList;

inBefore 'Изменять цены (до)' = ABSTRACT BOOLEAN (PriceList, DataPriceListType) MATERIALIZED;
inBefore 'Изменять цены (до)' = DATA BOOLEAN (UserPriceList, DataPriceListType);
inBefore (UserPriceList priceList, DataPriceListType dataPriceListType) += inBefore(priceList, dataPriceListType);

countBeforeDataPriceListTypes (PriceList p) = GROUP SUM 1 IF inBefore(p,DataPriceListType t);
countBeforeDataPriceListTypes (UserPriceList p) = GROUP SUM 1 IF inBefore(p,DataPriceListType t);

changeBefore 'Изменять цены (до)' = DATA BOOLEAN (DataPriceListType, Operation);

inBefore(UserPriceList priceList, DataPriceListType dataPriceListType) <- changeBefore(dataPriceListType, operation(priceList))
    WHEN CHANGED(operation(priceList));
    
EXTEND FORM operation
    PROPERTIES(pt, o) changeBefore DRAW pt AFTER orderShow(pt, o)
    
;

priceBefore 'Цена до' = ABSTRACT NUMERIC[16,4] (PriceListDetail);
priceBefore 'Цена до' = DATA NUMERIC[16,4] (UserPriceListDetail);
priceBefore(UserPriceListDetail d) += priceBefore(d);

priceListTypeBefore 'Вид цены для цены до' = DATA DataPriceListType (UserPriceList);

showPriceBefore 'Цена до' =  ABSTRACT BOOLEAN (PriceList);   
showPriceBefore 'Цена до' =  DATA BOOLEAN (UserPriceList);  
showPriceBefore (UserPriceListDetail d) = showPriceBefore(userPriceList(d));
showPriceBefore(UserPriceList p) += showPriceBefore(p);

overHeaderBefore = ABSTRACT STRING[100](UserPriceList);
headerBefore(UserPriceList p) = OVERRIDE overHeaderBefore(p), 'Цена до';

EXTEND FORM userPriceList 
    PROPERTIES(p) showPriceBefore
    PROPERTIES(p,t)  inBefore[UserPriceList,DataPriceListType] SHOWIF showPriceBefore(p)        
    PROPERTIES(d) priceBefore SHOWIF showPriceBefore(p) BEFORE viewPrice(d,to) HEADER headerBefore(p)
    ;
    
DESIGN userPriceList {
    param{
        MOVE PROPERTY (showPriceBefore(p));
    }
}

priceListTypeBefore 'Вид цены для цены до' = DATA DataPriceListType (PriceList.Operation);
   
showPriceBefore 'Цена до' = DATA BOOLEAN (PriceList.Operation);
showPriceBefore(UserPriceList priceList) <- showPriceBefore(operation(priceList))
    WHEN CHANGED(operation(priceList));
skipConstraintPriceBefore 'Может быть не задана Цена до' = DATA BOOLEAN (PriceList.Operation);
    
EXTEND FORM operation PROPERTIES(o) showPriceBefore, skipConstraintPriceBefore SHOWIF showPriceBefore(o);
DESIGN operation {
    showContainer {
        MOVE PROPERTY(showPriceBefore(o));
    }
    constraintContainer {
        MOVE PROPERTY(skipConstraintPriceBefore(o));
    }
}

@defineDocumentInterfaceHeaderTimePrefix(PriceList, fromPriceBefore, ' с (Цена до)');
WHEN LOCAL SET(showPriceBefore(UserPriceList o)) AND NOT fromPriceBeforeDate(o) DO
    fromPriceBeforeDate(o) <- currentDate();
WHEN LOCAL SET(showPriceBefore(UserPriceList o)) AND NOT fromPriceBeforeTime(o) DO
    fromPriceBeforeTime(o) <- currentTime();
    
skipChangeFromPriceBeforeTime = ABSTRACT BOOLEAN (PriceList);
WHEN LOCAL CHANGED(fromPriceBeforeDate(UserPriceList o)) AND NOT CHANGED(fromPriceBeforeTime(o)) AND NOT skipChangeFromPriceBeforeTime(o) DO {
    fromPriceBeforeTime(o) <- IF fromPriceBeforeDate(o) > currentDate() THEN 00:00 ELSE currentTime();
} 

@defineDocumentInterfaceHeaderTimePrefix(PriceList, toPriceBefore, ' по (Цена до)');
@deriveDocumentHeaderTimeBeforePrefix(UserPriceList, toPriceBefore);

CONSTRAINT showPriceBefore(UserPriceList p) AND isPosted(p) AND
            ((fromPriceBeforeDateTime(p) >= fromDateTime(p)) OR (toPriceBeforeDateTime(p) <= toDateTime(p)))
    MESSAGE 'Дата с (Цена до) и Дата по (Цена до)не могут быть в интервале самого прайса';
    
CONSTRAINT showPriceBefore(UserPriceList p) AND isPosted(p) AND NOT skipConstraintPriceBefore(operation(p)) AND 
            (NOT fromPriceBeforeDateTime(p) OR NOT toPriceBeforeDateTime(p)) AND [ GROUP SUM 1 IF priceBefore(UserPriceListDetail d) BY userPriceList(d)](p)
    MESSAGE 'Дата с (Цена до) и Дата по (Цена до) должны быть заданы для прайса';
    
CONSTRAINT showPriceBefore(userPriceList(UserPriceListDetail d)) AND isPosted(userPriceList(d))
            AND NOT skipConstraintPriceBefore(operation(d)) AND NOT priceBefore(d)
    MESSAGE 'Цена до должна быть задана для строки прайса.';

backgroundPriceBeforeTime = ABSTRACT COLOR (PriceList);
EXTEND FORM userPriceList
    PROPERTIES (p) SHOWIF showPriceBefore(p) fromPriceBeforeDate, fromPriceBeforeTime BACKGROUND backgroundPriceBeforeTime(p), toPriceBeforeDate, toPriceBeforeTime
;

DESIGN userPriceList{
    midContainer {
        type = CONTAINERV;
        NEW timePriceBeforeContainer{
            caption = 'Период действия (Цена до)';
            type = CONTAINERH;
            MOVE PROPERTY (fromPriceBeforeDate(p));
            MOVE PROPERTY (fromPriceBeforeTime(p));
            MOVE PROPERTY (toPriceBeforeDate(p));
            MOVE PROPERTY (toPriceBeforeTime(p));
        }
    }
}

overFromPriceBeforeDate = ABSTRACT DATE (PriceListDetail);
fromPriceBeforeDate '{document.date.of} с (Цена до)' (PriceListDetail d) = OVERRIDE overFromPriceBeforeDate(d), fromPriceBeforeDate(priceList(d)) MATERIALIZED;;
overFromPriceBeforeTime = ABSTRACT TIME (PriceListDetail);
fromPriceBeforeTime '{document.time.of} с (Цена до)' (PriceListDetail d) = OVERRIDE overFromPriceBeforeTime(d), fromPriceBeforeTime(priceList(d)) MATERIALIZED;;
fromPriceBeforeDateTime '{document.date.time.of} с (Цена до)' (PriceListDetail d) = dateTimeToDateTime(fromPriceBeforeDate(d), fromPriceBeforeTime(d)) MATERIALIZED INDEXED;

overToPriceBeforeDate = ABSTRACT DATE (PriceListDetail);
toPriceBeforeDate '{document.date.of} с (Цена до)' (PriceListDetail d) = OVERRIDE overToPriceBeforeDate(d), toPriceBeforeDate(priceList(d)) MATERIALIZED;;
overToPriceBeforeTime = ABSTRACT TIME (PriceListDetail);
toPriceBeforeTime '{document.time.of} с (Цена до)' (PriceListDetail d) = OVERRIDE overToPriceBeforeTime(d), toPriceBeforeTime(priceList(d)) MATERIALIZED;;
toPriceBeforeDateTime '{document.date.time.of} с (Цена до)' (PriceListDetail d) = dateTimeToDateTime(toPriceBeforeDate(d), toPriceBeforeTime(d)) MATERIALIZED INDEXED;


CLASS PriceListBeforeLedger : PriceListLedger;
TABLE priceListBeforeLedger(PriceListBeforeLedger);

needPriceBefore(PriceListDetail d) = priceBefore(d) AND countBeforeDataPriceListTypes(priceList(d))
    AND fromPriceBeforeDateTime(d) AND toPriceBeforeDateTime(d);

priceListBeforeLedger = AGGR PriceListBeforeLedger WHERE needPriceBefore(PriceListDetail priceListDetail) MATERIALIZED INDEXED;

in(PriceListBeforeLedger l, DataPriceListType t) += inBefore(priceList(priceListDetail(l)), t);

description(PriceListBeforeLedger l) += STRING[200](description[UserPriceList](priceList(priceListDetail(l))) + ' (цена до)');

price(PriceListBeforeLedger l, DataPriceListType t) += priceBefore(priceListDetail(l)) IF inBefore(priceList(priceListDetail(l)), t);

fromDateTime(PriceListBeforeLedger l) += fromPriceBeforeDateTime(priceListDetail(l));
toDateTime(PriceListBeforeLedger l) += toPriceBeforeDateTime(priceListDetail(l));

isPosted(PriceListBeforeLedger l) += isPosted(priceList(priceListDetail(l)));
skip(PriceListBeforeLedger l) += exclude(priceListDetail(l));

sku(PriceListBeforeLedger l) += sku(priceListDetail(l));

operation (PriceListBeforeLedger l) += operation(priceListDetail(l));

company(PriceListBeforeLedger l) += company(priceList(priceListDetail(l)));

skipPriceBefore = ABSTRACT BOOLEAN (PriceListDetail, Stock);
in(PriceListBeforeLedger l,Stock st) += in(priceList(priceListDetail(l)),st) AND NOT skipPriceBefore(priceListDetail(l), st);
show[PriceListLedger] (PriceListBeforeLedger ledger) + { show(priceListDetail(ledger));};
edit[PriceListLedger] (PriceListBeforeLedger ledger) + { edit(priceListDetail(ledger));};

// Расчет цены до для склада и sku
lastBeforePriceListLedger 'Цена' (LedgerPriceListType type, sku, Stock stock, DATETIME dateTime) =
    GROUP LAST PriceListBeforeLedger ledger
          ORDER fromDateTime(ledger, type, stock), ledger
          WHERE ledger IS PriceListBeforeLedger 
                AND fromDateTime(ledger, type, stock) < dateTime AND NOT toDateTime(ledger, type, stock) < dateTime
          BY sku(ledger, type, stock);

priceBefore 'Цена до' (LedgerPriceListType type, Sku sku, Stock stock, DATETIME dt) = priceBefore(priceListDetail(lastBeforePriceListLedger(type, sku, stock, dt)));