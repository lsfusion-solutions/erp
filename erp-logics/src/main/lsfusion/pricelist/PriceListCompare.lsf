MODULE PriceListCompare;

REQUIRE PriceList, PriceListDashboard;

//Подсветка строк сравнения прайсов
is (sku, priceList) = GROUP SUM 1 BY sku(PriceListDetail detail), priceList(detail);

price 'Цена' (sku, DataPriceListType type, priceList) = GROUP MAX price(PriceListDetail detail, type)
    BY sku(detail), priceList(detail);

backgroundPricelist (Sku sku, PriceList p1, PriceList p2, DataPriceListType type) = 
    CASE WHEN is(sku, p1) AND NOT is(sku, p2) THEN RGB(192,255,192)  
         WHEN is(sku, p2) AND NOT is(sku, p1) THEN RGB(255,192,192)  
         WHEN price(sku, type, p1) != price(sku, type, p2) THEN RGB(255,255,192);  

headerName (PriceList priceList, DataPriceListType dataPriceListType) =
    (name[PriceListType](dataPriceListType) + ' (№' + number(priceList) + ')') IF in(priceList, dataPriceListType) CHARWIDTH 30;    

EXTEND FORM userPriceList
    OBJECTS p2 = UserPriceList PANEL
    PROPERTIES (p2) SELECTOR seriesNumber, date, nameCurrency, nameCompany
    FILTERS p != p2
    
    OBJECTS t3 = DataPriceListType
    FILTERS in(p, t3)
    
    OBJECTS s3=Sku
    PROPERTIES BACKGROUND backgroundPricelist(s3, p, p2, t3) READONLY inputName3 = name(s3), idBarcode(s3), shortNameUOM(s3)
    PROPERTIES(s3, t3, p) READONLY price COLUMNS (t3) HEADER headerName(p, t3) SHOWIF headerName(p, t3) BACKGROUND backgroundPricelist(s3, p, p2, t3) DRAW s3     
    PROPERTIES(s3, t3, p2) READONLY price COLUMNS (t3) HEADER headerName(p2, t3) SHOWIF headerName(p2, t3) BACKGROUND backgroundPricelist(s3, p, p2, t3) DRAW s3     
    ORDERS inputName3
    FILTERS is(s3, p) OR is(s3, p2),
            company(p) == company(p2)
    FILTERGROUP compareFilter
        FILTER 'Удаленные' is(s3, p2) AND NOT is(s3, p) 'F9' 
        FILTER 'Добавленные' is(s3, p) AND NOT is(s3, p2) 'F10' 
    FILTERGROUP differentPricesFilter
        FILTER 'Различные цены' price(s3, t3, p) != price(s3, t3, p2) 'F11' 
;

DESIGN userPriceList{
    detailContainer{
        NEW fifthContainer{
            fill = 1;
            caption = 'Сравнение';
            MOVE BOX(p2){
                horizontal = TRUE;
                MOVE PROPERTY (seriesNumber(p2));
                MOVE PROPERTY (date(p2));
                MOVE PROPERTY (nameCurrency(p2));
                MOVE PROPERTY (nameCompany(p2));
            }
            MOVE BOX(s3);
        }
    }
}

priceBA 'Цена' = DATA LOCAL NUMERIC[16,4] (Sku);
priceBB 'Цена' = DATA LOCAL NUMERIC[16,4] (Sku);

fillPriceBA 'Заполнить цены' (PriceListType type, Stock st, DATETIME dt) {
    priceBA(Sku sk) <- priceB(type,sk,st,dt);
}
fillPriceBB 'Заполнить цены' (PriceListType type, Stock st, DATETIME dt) {
    priceBB(Sku sk) <- priceB(type,sk,st,dt);
}

percent 'Отклонение цены, %' (Sku sk) = NUMERIC[20,2]((priceBB(sk) - priceBA(sk))*100.00/priceBB(sk));

backgroundPercent = IF percent(Sku sk) < 0 THEN RGB(255,100,100) ELSE IF percent(sk)> 0 THEN RGB(100,255,100);
backgroundCompareA = RGB(250,225,225);
backgroundCompareB = RGB(225,225,250);
isDifferent(a,b) = IF a != b THEN TRUE;

FORM comparePriceList 'Сравнение цен '
    OBJECTS pa = PriceListType PANEL, pb = PriceListType PANEL,sa=Stock PANEL, sb=Stock PANEL  
    PROPERTIES SELECTOR BACKGROUND backgroundCompareA() name(pa), name(sa)
    PROPERTIES SELECTOR BACKGROUND backgroundCompareB() name(pb), name(sb)
    FILTERS active(sa), isCompany(sa), active(sb), isCompany(sb)    
    
    OBJECTS da 'Дата' = DATETIME PANEL, db 'Дата' = DATETIME PANEL 
    PROPERTIES VALUE (da) BACKGROUND backgroundCompareA(), VALUE (db) BACKGROUND backgroundCompareB()
    
    PROPERTIES fillPriceBA(pa,sa,da) BACKGROUND backgroundCompareA(), fillPriceBB(pb,sb,db) BACKGROUND backgroundCompareB()
    
    OBJECTS           t=GroupType PANEL 
    PROPERTIES(t)     SELECTOR name        
        
    TREE skuTree g = Group PARENT parent(g)
    PROPERTIES READONLY order(g), name(g)
    ORDERS order(g), name(g)
    FILTERS groupType(g) == t
    FILTERGROUP inactive FILTER 'Активные' active(g) 'F6' DEFAULT 

    OBJECTS sk = Sku GRID 
    PROPERTIES READONLY idBarcode(sk),name(sk)
    PROPERTIES READONLY BACKGROUND backgroundCompareA() currentBalance(sk,sa), dateTimeLastOrderBatch(sk,sa), priceBA(sk)//priceB(pa,sk,sa,da)
    PROPERTIES READONLY BACKGROUND backgroundCompareB() currentBalance(sk,sb) SHOWIF isDifferent(sa,sb),dateTimeLastOrderBatch(sk,sb) SHOWIF isDifferent(sa,sb),
                                                        priceBB(sk)//priceB(pb,sk,sb,db)
    PROPERTIES READONLY percent(sk) BACKGROUND backgroundPercent(sk)
    FILTERS priceBA(sk) OR priceBB(sk), isParent(g,sk)
    FILTERGROUP ostFilter
        FILTER 'Есть остаток' currentBalance(sk,sa) OR currentBalance(sk,sb) 'F8' 
    FILTERGROUP compareFilter
        FILTER 'Первая цена выше' percent(sk) < 0 'F9' 
        FILTER 'Вторая цена выше' percent(sk) > 0 'F10'
    
    EVENTS ON INIT {
        SEEK comparePriceList.t = defaultGroupType() IF defaultGroupType();
    }
;

DESIGN comparePriceList {
    NEW top FIRST{
        NEW param  {
            type = COLUMNS ;
            lines = 2;
            MOVE BOX(pa);
            MOVE BOX(pb);
            MOVE BOX(sa);
            MOVE BOX(sb);
            MOVE BOX(da);
            MOVE BOX(db);
            MOVE PROPERTY(fillPriceBA(pa,sa,da));
            MOVE PROPERTY(fillPriceBB(pb,sb,db));
        } 
    }
    NEW bottom AFTER top {
        fill = 1;
        type = SPLITH;
        NEW leftBottom {
            fill=2;
            MOVE BOX(t);
            MOVE BOX(TREE skuTree);
        }
        NEW rightBottom {
            fill = 5;
            MOVE BOX(sk);
        }
    }
    MOVE TOOLBARBOX;
}

NAVIGATOR {
    priceListDashboardNavigator {
        NEW comparePriceList;
    }
}