MODULE PriceListCalc;

REQUIRE Integration, PriceListLedger, StockTax, SystemEvents;

NAMESPACE PriceList;

CLASS CalcPriceListType 'Расчетный вид цены' : PriceListType;
TABLE calcPriceListType (CalcPriceListType);

@defineExternalizable(calcPriceListType, STRING[100]);
id (CalcPriceListType p) += id(p);

name 'Наименование' = DATA ISTRING[50](CalcPriceListType);
name(CalcPriceListType type) += name(type) IF type IS CalcPriceListType;

basePriceListType(type) = DATA BasePriceListType (CalcPriceListType);
nameBasePriceListType 'Базовый вид цены' (CalcPriceListType type) = name(basePriceListType(type));

ledgerPriceListType(CalcPriceListType type) += basePriceListType(type) AS LedgerPriceListType;

includeVAT 'Цена с НДС' = DATA BOOLEAN (CalcPriceListType);
includeVAT(CalcPriceListType type) += includeVAT(type);

country 'Страна' = DATA Country(CalcPriceListType);
nameCountry 'Страна' (CalcPriceListType t) = name(country(t));

addVAT 'Добавлять НДС' (CalcPriceListType t) = includeVAT(t) AND NOT includeVAT[PriceListType](basePriceListType(t)) MATERIALIZED;  

@defineDocumentHeaderCurrency(calcPriceListType);
currency(CalcPriceListType calcPriceListType) += currency(calcPriceListType);

parent = DATA CalcPriceListType (CalcPriceListType);
nameParent 'Родительский вид цены' = name(parent(CalcPriceListType t));

// ---------------- Надбавка по классификатору ------------------- //

groupType = DATA GroupType (CalcPriceListType);
nameGroupType 'Тип классификатора' (CalcPriceListType type) = name(groupType(type));

TABLE calcPriceListTypeGroup (CalcPriceListType, Group);
TABLE sessionCalcPriceListTypeGroup (Session, CalcPriceListType, Group);
dataMarkup 'Надбавка, %' = DATA NUMERIC[8,2] (CalcPriceListType, Group);

TABLE calcPriceListTypeSku (CalcPriceListType, Sku);
TABLE sessionCalcPriceListTypeSku (Session, CalcPriceListType, Sku);
dataMarkup 'Надбавка, %' = DATA NUMERIC[8,2] (CalcPriceListType, Sku);

levelParentMarkup (CalcPriceListType calcPriceListType, Group group) = GROUP
                                                              MIN level(group, Group parent) IF dataMarkup(calcPriceListType, parent) MATERIALIZED;
nearestParent (CalcPriceListType calcPriceListType, Group group) = group(group, levelParentMarkup(calcPriceListType, group));
nearestMarkup 'Расчетная надбавка, %' (CalcPriceListType calcPriceListType, Group group) =
    dataMarkup(calcPriceListType, nearestParent(calcPriceListType, group)) MATERIALIZED;

priorityMarkup = DATA NUMERIC[8,2] (CalcPriceListType, Group);

levelParentPriorityMarkup (CalcPriceListType calcPriceListType, Group group) = GROUP
                                                              MIN level(group, Group parent) IF priorityMarkup(calcPriceListType, parent) MATERIALIZED;
nearestPriorityParent (CalcPriceListType calcPriceListType, Group group) = group(group, levelParentPriorityMarkup(calcPriceListType, group));
nearestPriorityMarkup 'Расчетная надбавка, %' (CalcPriceListType calcPriceListType, Group group) =
    priorityMarkup(calcPriceListType, nearestPriorityParent(calcPriceListType, group)) MATERIALIZED;

markup 'Надбавка, %' (CalcPriceListType type, Group group) =
    OVERRIDE priorityMarkup(type, group), nearestPriorityMarkup(type, group), dataMarkup(type, group), nearestMarkup(type, group) MATERIALIZED;
    
                                                                     
quantityChildWithMarkup (Group parent, CalcPriceListType type)  = GROUP SUM 1 IF dataMarkup(type, Group child) AND isParent(child, parent) MATERIALIZED;
quantityParentWithMarkup (Group child, CalcPriceListType type)  = GROUP SUM 1 IF dataMarkup(type, Group parent) AND isParent(child, parent) MATERIALIZED;                                                                        

backgroundMarkup 'Цвет' (CalcPriceListType type, Group group) = CASE 
    WHEN dataMarkup(type, group) THEN RGB(230,248,250) 
//    WHEN nearestMarkup(type, group) THEN RGB(230,248,250) 
    WHEN quantityChildWithMarkup (group, type) != descendantNumber(group) AND NOT quantityParentWithMarkup (group, type) THEN RGB(203,203,203);
    
    
priorityMarkup = DATA NUMERIC[8,2] (CalcPriceListType, Sku);    
extraMarkup = ABSTRACT NUMERIC[8,2] (CalcPriceListType, Sku);  
    
overMarkup 'Надбавка, % (перегруженная)' (CalcPriceListType type, Sku sku) = OVERRIDE 
    priorityMarkup(type, sku),
    dataMarkup(type, sku),
    extraMarkup(type, sku),
    markup(type, group(groupType(type), sku)) MATERIALIZED;

coeff 'Коэффициент' = ABSTRACT NUMERIC[8,2](CalcPriceListType, Sku);
overCoeff(CalcPriceListType t, Sku s) = OVERRIDE coeff(t,s), 1.0 IF t IS CalcPriceListType AND s IS Sku;

markup 'Надбавка, %' (CalcPriceListType type, Sku sku) = OVERRIDE
    NUMERIC[8,2](overMarkup(type, sku)*overCoeff(type,sku)),
    overMarkup(parent(type), sku) MATERIALIZED CHARWIDTH 6;
    
multiplier (CalcPriceListType type, Sku sku) = NUMERIC[10,4]((100.0 + markup(type, sku)) / 100.0) MATERIALIZED;

//-- Условие округления
dataRoundCondition = DATA RoundCondition (CalcPriceListType, Group);
nameDataRoundCondition 'Условие округления' (CalcPriceListType type, Group group) = name(dataRoundCondition(type, group));
CONSTRAINT currency(dataRoundCondition(CalcPriceListType type, Group group)) != currency[PriceListType](type)
           CHECKED BY dataRoundCondition[CalcPriceListType,Group]
           MESSAGE 'Валюта документа должна совпадать с валютой условия округления цены';
           
levelParentRoundCondition (CalcPriceListType calcPriceListType, Group group) = GROUP
                                                              MIN level(group, Group parent) IF dataRoundCondition(calcPriceListType, parent) MATERIALIZED;
nearestParentRoundCondition (CalcPriceListType calcPriceListType, Group group) = group(group, levelParentRoundCondition(calcPriceListType, group));
nearestRoundCondition  (CalcPriceListType calcPriceListType, Group group) =
    dataRoundCondition(calcPriceListType, nearestParentRoundCondition(calcPriceListType, group)) MATERIALIZED;
    
nameNearestRoundConditionCalc 'Расчетное условие округления' (PriceListType type, Group group) = name(OVERRIDE nearestRoundCondition(type, group),
                                                                                                                roundCondition(type) IF group IS Group);

roundCondition 'Условие округления' (CalcPriceListType type, Group group) =
    OVERRIDE dataRoundCondition(type, group), 
             nearestRoundCondition(type, group) MATERIALIZED;

dataRoundCondition  = DATA RoundCondition (CalcPriceListType, Sku);
CONSTRAINT currency(dataRoundCondition(CalcPriceListType type, Sku s)) != currency[PriceListType](type)
    CHECKED BY dataRoundCondition[CalcPriceListType,Sku]
    MESSAGE 'Валюта документа должна совпадать с валютой условия округления цены';

groupRoundConditionGroup (CalcPriceListType type, Sku sku) = roundCondition(type, group(groupType(type), sku)) MATERIALIZED;
roundCondition (CalcPriceListType type, Sku sku) = OVERRIDE dataRoundCondition(type, sku), groupRoundConditionGroup(type, sku), roundCondition(type) IF type IS CalcPriceListType AND sku IS Sku;            
nameRoundCondition 'Условие округления' (CalcPriceListType type, Sku sku)= name(roundCondition(type, sku));    
        
// --------------- Расчет значения цены --------------- //

multiplierVAT (CalcPriceListType type, Sku sku) = NUMERIC[16,5](multiplier(type, sku) * OVERRIDE (((100.0 + valueVAT(sku, country(type))) / 100.0) IF addVAT(type)), 1.0) MATERIALIZED;
priceB(BasePriceListType base, CalcPriceListType type, Sku sku, Stock stock, DATETIME dateTime) =
    round(priceB(base, sku, stock, dateTime) * multiplierVAT(type, sku), roundCondition(type, sku)) COMPLEX CHARWIDTH 7;
priceA(BasePriceListType base, CalcPriceListType type, Sku sku, Stock stock, DATETIME dateTime) =
    round(priceA(base, sku, stock, dateTime) * multiplierVAT(type, sku), roundCondition(type, sku)) COMPLEX CHARWIDTH 7;

priceB(CalcPriceListType type, Sku sku, Stock stock, DATETIME dateTime) =
    priceB(basePriceListType(type), type, sku, stock, dateTime) COMPLEX;
priceA(CalcPriceListType type, Sku sku, Stock stock, DATETIME dateTime) =
    priceA(basePriceListType(type), type, sku, stock, dateTime) COMPLEX;

prevPriceB(CalcPriceListType type, Sku sku, Stock stock, DATETIME dateTime) = PREV(priceB(type, sku, stock, dateTime));
prevPriceA(CalcPriceListType type, Sku sku, Stock stock, DATETIME dateTime) = PREV(priceA(type, sku, stock, dateTime));

multiplierVAT = ABSTRACT VALUE OVERRIDE FIRST NUMERIC[16,5] (CalcPriceListType, Batch);
multiplierVAT (CalcPriceListType type, Batch batch) += multiplierVAT(type, sku(batch));

priceB(CalcPriceListType type, Batch batch, Stock stock, DATETIME dateTime) =
    round(priceB(basePriceListType(type), batch, stock, dateTime) * multiplierVAT(type, batch), roundCondition(type, sku(batch))) COMPLEX;
priceA(CalcPriceListType type, Batch batch, Stock stock, DATETIME dateTime) =
    round(priceA(basePriceListType(type), batch, stock, dateTime) * multiplierVAT(type, batch), roundCondition(type, sku(batch))) COMPLEX;

prevPriceB(CalcPriceListType type, Batch batch, Stock stock, DATETIME dateTime) = PREV(priceB(type, batch, stock, dateTime)); 
prevPriceA(CalcPriceListType type, Batch batch, Stock stock, DATETIME dateTime) = PREV(priceA(type, batch, stock, dateTime)); 

priceB(CalcPriceListType type, Sku sku, Stock stock, DATETIME dateTime) += priceB(type, sku, stock, dateTime);
priceA(CalcPriceListType type, Sku sku, Stock stock, DATETIME dateTime) += priceA(type, sku, stock, dateTime);

priceB(CalcPriceListType type, Batch batch, Stock stock, DATETIME dateTime) += priceB(type, batch, stock, dateTime);
priceA(CalcPriceListType type, Batch batch, Stock stock, DATETIME dateTime) += priceA(type, batch, stock, dateTime);

// ------------------------------------- Формы ---------------------------------- //

//backgroundMarkup 'Цвет' (CalcPriceListType calcPriceListType, Group group) = RGB(255,160,160) IF dataMarkup(calcPriceListType, group);

allowChangeMarkup 'Разрешить менять надбавки по группам Priority' = DATA BOOLEAN ();
EXTEND FORM options
    PROPERTIES () allowChangeMarkup
;
DESIGN options{
    price{
        MOVE PROPERTY (allowChangeMarkup());
    }
}

FORM calcPriceListType 'Расчетный вид цен'
    OBJECTS c = CalcPriceListType PANEL
    PROPERTIES(c) name, id SHOWIF showIDs(), includeVAT[PriceListType], nameCurrency, nameCountry, nameBasePriceListType,
                  nameRoundCondition, nameGroupType, nameParent

    TREE treeGroup g=Group PARENT parent(g)
    PROPERTIES READONLY order(g), name(g)
    FILTERS groupType(g) == groupType(c)
    ORDERS order(g), name(g)
    FILTERGROUP inactive FILTER 'Активные' active(g) 'F6' DEFAULT
    PROPERTIES(c, g) dataMarkup , markup BACKGROUND backgroundMarkup(c,g) READONLYIF (NOT allowChangeMarkup()), nameDataRoundCondition, nameNearestRoundConditionCalc READONLY 

    OBJECTS s = Sku
    PROPERTIES(s) READONLY name, idBarcode BACKGROUND backgroundBarcode(s)
    ORDERS name(s)
    FILTERS isParent(g, s) OR s IS Sku AND NOT g
    PROPERTIES(c, s) dataMarkup, overMarkup  READONLYIF (NOT allowChangeMarkup()), nameRoundCondition
    FILTERGROUP inactiveSku 
        FILTER 'Активный' active(s) 'F6' DEFAULT

    EDIT CalcPriceListType OBJECT c
;

DESIGN calcPriceListType {
    MOVE BOX(c){
        horizontal = TRUE;
        MOVE PROPERTY(nameCurrency(c));
        MOVE PROPERTY(nameRoundCondition(c));
    }
    NEW groupContainer {
        fill = 1;
        MOVE PROPERTY(nameGroupType(c));
        NEW treeContainer{
            fill = 1;
            horizontal = TRUE;
            MOVE BOX(TREE treeGroup) { 
                caption = 'Группы товаров';
                PROPERTY(markup(c, g))  {
                    caption = 'Надбавка, % (перегруженная)'; 
                }
            }
            MOVE BOX(s);
        }
    }
    MOVE TOOLBARBOX;
}

FORM calcPriceListTypes 'Расчетный вид цены'
    OBJECTS p = CalcPriceListType
    PROPERTIES(p) READONLY name, nameCurrency, nameRoundCondition
    PROPERTIES(p) READONLY includeVAT

    LIST CalcPriceListType OBJECT p
;

overCopy  ABSTRACT LIST (PriceListType,PriceListType);

overCopy (CalcPriceListType priceListType) + { 
	NEWSESSION {
	    IF priceListType IS CalcPriceListType THEN {
	        NEW p = CalcPriceListType {
	            includeVAT(p) <- includeVAT(priceListType);
	            country(p) <- country(priceListType);            
	            currency(p) <- currency(priceListType);            
	            roundCondition(p) <- roundCondition(priceListType);            
	            basePriceListType(p) <- basePriceListType(priceListType);
	            parent(p) <- parent(priceListType);
	           // pricingBaseCalcPriceListType(p) <- pricingBaseCalcPriceListType(p);
	            groupType(p) <- groupType(priceListType);
	            
	            dataMarkup(p, Group group) <- dataMarkup(priceListType, group) WHERE dataMarkup(priceListType, group);    
	            dataRoundCondition(p, Group group) <- dataRoundCondition(priceListType, group) WHERE dataRoundCondition(priceListType, group);    
	            dataMarkup(p, Sku sku) <- dataMarkup(priceListType, sku) WHERE dataMarkup(priceListType, sku);   
	            
	            overCopy(priceListType,p); 
	            
	            SHOW calcPriceListType OBJECTS c=p DOCKED; 
	        }
	    }
	}
}

EXTEND FORM priceListTypes
    PROPERTIES(pt) NEWSESSION addCalcPriceListType = NEW[CalcPriceListType] 
//    PROPERTIES(pt) SHOWIF showIDs() READONLY idCalcPriceListType
;

DESIGN priceListTypes {
    PROPERTY (addCalcPriceListType) {
        caption = 'Добавить расчетную цену';
    }
}

importMarkupCSV 'Импорт из CSV' (CalcPriceListType t) {
    LOCAL id = ISTRING[100](INTEGER);
    LOCAL idBarcode = ISTRING[15](INTEGER);
    LOCAL markup = NUMERIC[8,2](INTEGER);
    
    INPUT f = CSVFILE DO {
        IMPORT CSV ',' NOHEADER CHARSET 'cp1251' FROM f TO id, idBarcode, markup;
        
        FOR Sku sk = OVERRIDE sku(id(INTEGER i)), skuBarcode(idBarcode(i)) DO {
            dataMarkup(t, sk) <- markup(i);
        }
    }
}

importMarkupXLS 'Импорт из XLS' (CalcPriceListType t) {
    LOCAL id = ISTRING[100](INTEGER);
    LOCAL idBarcode = ISTRING[15](INTEGER);
    LOCAL markup = NUMERIC[8,2](INTEGER);
    
    INPUT f = EXCELFILE DO {
        IMPORT XLS FROM f TO id, idBarcode, markup;
        
        FOR Sku sk = OVERRIDE sku(id(INTEGER i)), skuBarcode(idBarcode(i)) DO {
            dataMarkup(t, sk) <- markup(i);
        }
    }
}

EXTEND FORM calcPriceListType PROPERTIES (c) DRAW s TOOLBAR importMarkupCSV, importMarkupXLS;

WHEN DROPPED (customGroup(CustomGroupType type, Sku sk)) AND sk IS Sku AND type IS CustomGroupType DO {
    priorityMarkup(CalcPriceListType t, sk) <- NULL WHERE groupType(t) == type;
    dataMarkup(CalcPriceListType t, sk) <- NULL WHERE groupType(t) == type;
}

filterNameGroup 'Поиск по наименованию' = DATA LOCAL NESTED STRING[255] () CHARWIDTH 20;
inFilterName (Group parent) = GROUP SUM 1 IF isParent(Group child, parent) AND isSubstring(name(child), filterNameGroup());
inIFilterName (Group parent) = GROUP SUM 1 IF isParent(Group child, parent) AND isISubstring(name(child), filterNameGroup());

EXTEND FORM calcPriceListType
    PROPERTIES filterNameGroup()
    FILTERS inIFilterName(g) OR NOT filterNameGroup()
    FILTERS isParent(g,s)
;

DESIGN calcPriceListType {
    treeContainer {
        NEW treeFilterContainer BEFORE BOX(s){
            MOVE PROPERTY(nameGroupType(c));
            MOVE PROPERTY(filterNameGroup());
            fill=1;
            MOVE BOX(TREE treeGroup);
        }
    }
}