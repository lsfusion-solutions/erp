MODULE PriceListAccountSum;

REQUIRE PriceListAccount;

NAMESPACE PriceList;

skipChangeAccountPrice = DATA LOCAL BOOLEAN ();
accountPrice 'Последняя учетная цена' = DATA NUMERIC[16,4] (Sku, Stock);
WHEN SETCHANGED(averagePrice(Sku sku, Stock stock)) AND averagePrice(sku, stock) > 0 AND NOT skipChangeAccountPrice() DO
    accountPrice(sku, stock) <- NUMERIC[16,4](averagePrice(sku, stock)); 

accountPriceB (Sku sku, Stock stock, DATETIME dateTime) += NUMERIC[16,4](OVERRIDE round2(sumB(sku, stock, dateTime) / balanceB(sku, stock, dateTime)), accountPrice(sku, stock));
accountPriceA (Sku sku, Stock stock, DATETIME dateTime) += NUMERIC[16,4](OVERRIDE round2(sumA(sku, stock, dateTime) / balanceA(sku, stock, dateTime)), accountPrice(sku, stock));

accountPriceB (Batch batch, Stock stock, DATETIME dateTime) += NUMERIC[16,4](OVERRIDE round2(sumB(sku(batch), stock, dateTime) / balanceB(sku(batch), stock, dateTime)), accountPrice(sku(batch), stock));
accountPriceA (Batch batch, Stock stock, DATETIME dateTime) += NUMERIC[16,4](OVERRIDE round2(sumA(sku(batch), stock, dateTime) / balanceA(sku(batch), stock, dateTime)), accountPrice(sku(batch), stock));

currentAccountPrice (Sku sku, Stock stock) += NUMERIC[16,4](OVERRIDE round2(currentSum(sku, stock) / currentBalance(sku, stock)), accountPrice(sku, stock));

EXTEND CLASS SystemPriceListType {
    accountPriceListType 'Учетная'
}
// Учетные цены и суммы для товаров

priceB[SystemPriceListType, Sku, Stock, DATETIME] (SystemPriceListType type, Sku sku, Stock stock, DATETIME dateTime) += 
    WHEN type == SystemPriceListType.accountPriceListType AND sku IS Sku AND stock IS Stock AND dateTime IS DATETIME 
        THEN NUMERIC[16,4](sumB(sku, stock, dateTime) / balanceB(sku, stock, dateTime));
priceA[SystemPriceListType, Sku, Stock, DATETIME] (SystemPriceListType type, Sku sku, Stock stock, DATETIME dateTime) += 
    WHEN type == SystemPriceListType.accountPriceListType AND sku IS Sku AND stock IS Stock AND dateTime IS DATETIME 
        THEN NUMERIC[16,4](sumA(sku, stock, dateTime) / balanceA(sku, stock, dateTime));

priceB[SystemPriceListType, Batch, Stock, DATETIME] (SystemPriceListType type, Batch batch, Stock stock, DATETIME dateTime) += 
    WHEN type == SystemPriceListType.accountPriceListType AND batch IS Batch AND stock IS Stock AND dateTime IS DATETIME 
        THEN NUMERIC[16,4](sumB(sku(batch), stock, dateTime) / balanceB(sku(batch), stock, dateTime));
priceA[SystemPriceListType, Batch, Stock, DATETIME] (SystemPriceListType type, Batch batch, Stock stock, DATETIME dateTime) += 
    WHEN type == SystemPriceListType.accountPriceListType AND batch IS Batch AND stock IS Stock AND dateTime IS DATETIME 
        THEN NUMERIC[16,4](sumA(sku(batch), stock, dateTime) / balanceA(sku(batch), stock, dateTime));