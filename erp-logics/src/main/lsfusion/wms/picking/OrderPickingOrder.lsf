MODULE OrderPickingOrder;

REQUIRE Picking, Order;

NAMESPACE Order;

//--  Связь с заказом

order = ABSTRACT Order (PickingOrder) MATERIALIZED INDEXED;
order = DATA Order (UserPickingOrder) INDEXED;
order(UserPickingOrder pickingOrder) += order(pickingOrder);

order (PickingDetail d) = order(pickingOrder(picking(d))) MATERIALIZED;
INDEX order(PickingDetail d), sku(d);

CONSTRAINT stock(UserPickingOrder pickingOrder) != fromStock(order(pickingOrder))
    CHECKED BY order[UserPickingOrder]
        MESSAGE 'Склад в заказе на комплектацию и в заказе должны соответствовать друг другу';

orderSeriesNumber 'Заказ' (PickingOrder o)= seriesNumber(order(o)); 
nameCustomer 'Покупатель' (PickingOrder o)= nameCustomer(order(o)); 
nameCustomerStock 'Склад покупателя' (PickingOrder o)= nameCustomerStock(order(o)); 
addressCustomerStock 'Адрес (Склад покупателя)' (PickingOrder o)= addressCustomerStock(order(o)); 

EXTEND FORM pickingOrders
    PROPERTIES (o) READONLY orderSeriesNumber, nameCustomer, nameCustomerStock, addressCustomerStock
;

countPickingOrder = GROUP SUM 1 BY order(PickingOrder o) MATERIALIZED;

pickingNumber = ABSTRACT INTEGER (OrderDetail) MATERIALIZED;

// ------------------- Свойства для заказа на комплектацию ------------------------------- //
 
numberOrder 'Номер заказа' (PickingOrder pickingOrder) = number(order(pickingOrder));
seriesOrder 'Серия заказа' (PickingOrder pickingOrder) = series(order(pickingOrder));

to = to(order(PickingOrder pickingOrder));
nameTo 'Получатель' = name(to(PickingOrder pickingOrder));

toStock = toStock(order(PickingOrder pickingOrder));
nameToStock 'Склад получателя' = name(toStock(PickingOrder pickingOrder));

toStock (PickingOrderDetail d) = toStock(pickingOrder(d));
nameToStock 'Склад получателя' (PickingOrderDetail d) = name(toStock(d));

addressToStock 'Пункт разгрузки' = address(toStock(PickingOrder pickingOrder));

// ------------------------------ Свойства для комплектации ---------------------------- //

to = to(pickingOrder(Picking picking));
nameTo 'Получатель' = name(to(Picking picking));

toStock = toStock(pickingOrder(Picking picking));
nameToStock 'Склад получателя' = name(toStock(Picking picking));

addressToStock 'Пункт разгрузки' = address(toStock(Picking picking));

EXTEND FORM pickings
    PROPERTIES(o) AFTER nameStock(o) READONLY nameTo, nameToStock 
;

// ------------------------------------ Кол-во по заказам -------------------------------------- //

pickingPickingDetail 'Скомплектовано' (order, sku) = GROUP SUM quantity(PickingDetail pickingDetail)
                                                           BY order(pickingDetail), sku(pickingDetail);
pickingQuantity 'Кол-во (скомплектовано)' (OrderDetail orderDetail) = PARTITION UNGROUP pickingPickingDetail
                                                          LIMIT STRICT quantity (orderDetail)
                                                          ORDER orderDetail
                                                          BY order(orderDetail), sku(orderDetail) MATERIALIZED;

//-- Количество излишне подобранных товаров, которых нет в заказе
quantityPickingPickingDetail (order, sku)= GROUP SUM pickingQuantity(OrderDetail detail) BY order(detail), sku(detail);

excessQuantityPickingPickingDetail (Order order, Sku sku) = pickingPickingDetail(order, sku) (-) quantityPickingPickingDetail (order, sku);
excessQuantityPickingPickingDetail(Order order) = GROUP SUM 1 IF excessQuantityPickingPickingDetail (order, Sku sku) > 0;

excessQuantityPickingPickingDetail (Order order, Batch batch) = 
    PARTITION UNGROUP excessQuantityPickingPickingDetail 
        LIMIT availableQuantity(batch, fromStock(order)) 
        ORDER date(batch),batch 
    BY order,sku(batch)
    IF excessQuantityPickingPickingDetail(order,sku(batch))>0;

// ------------------------------------ Создание комплектации по заказу -------------------------------- //

@defineDocumentAbstractProperty(order, createPickingOrder, 'Создать заказ на комплектацию');

CLASS OrderPickingOrder 'Заказ на комплектацию на основе заказа' : PickingOrder;
CLASS OrderPickingOrderDetail 'Строка заказа на комплектацию на основе заказа' : PickingOrderDetail;

@defineDocumentTables(orderPickingOrder);

quantityPickingNumber = GROUP SUM quantity(OrderDetail d) BY order(d), pickingNumber(d);
overQuantity (Order order, INTEGER pickingNumber) = quantityPickingNumber (order, pickingNumber) AND createPickingOrder(order);

orderPickingOrder = AGGR OrderPickingOrder WHERE overQuantity(Order order, INTEGER pickingNumber) MATERIALIZED INDEXED;
@defineDocumentAggregationHeaderTime(order, orderPickingOrder);


orderPickingOrderDetail = AGGR OrderPickingOrderDetail WHERE createPickingOrder(OrderDetail orderDetail) MATERIALIZED INDEXED;

orderPickingOrder (OrderPickingOrderDetail detail) = orderPickingOrder(order(orderDetail(detail)), pickingNumber(orderDetail(detail)));

@defineDocumentAggregationDetailTime(order, orderPickingOrder);

@defineDocumentHeaderCount(orderPickingOrder);

isPosted(OrderPickingOrder order) += isPosted(order(order));
isClosed(OrderPickingOrder order) += isClosed(order(order)); 

pickingOrder(OrderPickingOrderDetail detail) += orderPickingOrder(detail);

@defineDocumentDetailIndex(orderPickingOrder);

index(OrderPickingOrderDetail detail) += index(detail);

date(OrderPickingOrder order) += date(order);
time(OrderPickingOrder order) += time(order);

stock(OrderPickingOrder order) += fromStock(order(order));

index 'Номер комплектации (в заказе)' (OrderPickingOrder pickingOrder) = PARTITION SUM 1 ORDER pickingOrder BY order(pickingOrder) CHARWIDTH 4;
numberIndex 'Комплектации заказа' (OrderPickingOrder pickingOrder) = STRING[48] (CONCAT '/', number(order(pickingOrder)), 
    index(pickingOrder) IF countPickingOrder(order(pickingOrder))>1);
     
number(OrderPickingOrder order) += numberIndex(order);
series(OrderPickingOrder order) += series(order(order));

seriesNumber 'Серия/номер документа' (OrderPickingOrder order) = seriesNumber(order(order));

note(OrderPickingOrder order) += note(order(order));

@defineDocumentDescription(orderPickingOrder, OrderPickingOrderDetail, 'Заказ на комплектацию на основе заказа');
description (OrderPickingOrder order) += description(order);

@defineDocumentAggregationDetailSku(order, orderPickingOrder, sku);
sku(OrderPickingOrderDetail detail) += sku(detail);

quantity(OrderPickingOrderDetail detail) += quantity(orderDetail(detail));
batch(OrderPickingOrderDetail detail) += batch(orderDetail(detail));

order(OrderPickingOrder pickingOrder) += order(pickingOrder);
edit(OrderPickingOrder pickingOrder) + {  edit(order(pickingOrder)); }

accepted 'Принят в работу' (order) = GROUP SUM 1 IF accepted(PickingOrder o) BY order(o) MATERIALIZED;
countPerformer 'Комплектовщики' (order) = GROUP SUM 1 IF performer(PickingOrder porder) BY order(porder) MATERIALIZED;
namePerformer 'Комплектовщики' (order) = GROUP CONCAT namePerformer(PickingOrder o), ',' ORDER o BY order(o);

diffQuantityPickingDetail 'Расхождение' = quantityPickingOrderDetail(Sku sku, PickingOrder order) (-) quantityPickingDetail(sku, order);
diffQuantityPickingDetail 'Расхождение' (PickingOrder order) = GROUP SUM diffQuantityPickingDetail(Sku sku, order) MATERIALIZED;
diffQuantityPickingDetail 'Расхождение' = GROUP SUM diffQuantityPickingDetail(PickingOrder o) BY order(o) MATERIALIZED;

countPickingPicking 'Кол-во комплектаций' = GROUP SUM 1 IF NOT notCount(Picking picking) BY order(pickingOrder(picking)) MATERIALIZED;
calcFull 'Полностью собран' (Order order) = countPickingOrder(order) AND NOT diffQuantityPickingDetail(order); 
calcPart 'Частично собран' (Order order) = countPickingPicking(order) AND NOT calcFull(order);
picked (Order order) = calcPart(order) OR calcFull(order);

startDateTime 'Начало комплектации' (order) = GROUP MIN startDateTime(PickingOrder o) BY order(o);
finishDateTime 'Завершение комплектации' (order) = GROUP MAX finishDateTime(PickingOrder o) BY order(o);

extCalcFull = ABSTRACT BOOLEAN (Order);
extCalcPart = ABSTRACT BOOLEAN (Order);
extAccepted = ABSTRACT BOOLEAN (Order);

statusPicking 'Статус комплектации' (Order order) = CASE
    WHEN calcFull(order) OR extCalcFull(order) THEN 'Полностью собран'
    WHEN calcPart(order) OR extCalcPart(order) THEN 'Частично собран'
    WHEN accepted(order) OR extAccepted(order) THEN 'В комплектации'
    WHEN countPickingOrder(order) THEN 'Ожидает комплектацию' 
    WHEN order IS Order THEN 'Без комплектации';

backgroundStatusPicking 'Цвет' (Order order) = CASE
    WHEN calcFull(order) OR extCalcFull(order) THEN RGB(212,255,212)
    WHEN calcPart(order) OR extCalcPart(order) THEN RGB(255,238,165)
    WHEN accepted(order) OR extAccepted(order) THEN RGB(255,238,165)
    WHEN countPickingOrder(order) THEN RGB(212,212,255) 
    WHEN order IS Order THEN RGB(255,200,216);
    
statusPickingOrder = statusPicking(order(OrderDetail orderDetail));
backgroundStatusPickingOrder = backgroundStatusPicking(order(OrderDetail orderDetail));
    
packQuantity 'Кол-во собранных мест' (order) = GROUP SUM packQuantity(PickingOrder o) BY order(o);
grossWeightOrderPicking 'Вес заказа' (order) = GROUP SUM grossWeightPickingOrderDetail(PickingOrder o) BY order(o); 

notPicking 'Без комплектаций' (Order order) = order IS Order AND NOT (calcFull(order) OR calcPart(order) OR accepted(order));

META defineOrderPickingOrder(sign, stockProp)

    @defineDocumentInterfaceProperty (order, createPickingOrder, 'Создать заказ на комплектацию');
    createPickingOrder[Order.Order](Order o) += createPickingOrder(o); 

    EXTEND FORM userOrder
        PROPERTIES(o)  createPickingOrder
    ;
    DESIGN userOrder {
        headerCreateDocuments {
            NEW headerPicking {
                type = CONTAINERH;
                caption = 'Заказ на комплектацию';          
                MOVE PROPERTY(createPickingOrder(o));

            }
        }
    }

    // ---------------------- Разбиение заказа на несколько комплектаций ------------------- //
    
    pickingNumber 'Номер комплектации' = ABSTRACT INTEGER (OrderDetail);
    pickingNumber 'Номер комплектации' = DATA INTEGER (UserOrderDetail);
    pickingNumber(UserOrderDetail d) <- 1 WHEN SET(d IS UserOrderDetail);
    
    pickingNumber(UserOrderDetail d) += pickingNumber(d);
    pickingNumber[Order.OrderDetail] (OrderDetail d) += pickingNumber(d);
    
    pickingOrderCount 'Кол-во комплектаций' = DATA INTEGER (UserOrder);
    pickingOrderCount(UserOrder o) <- 1 WHEN SET(o IS UserOrder);

    //-------------------- Расширяем операции свойством по созданию заказа на комплектацию -----------------------//

    EXTEND FORM orders
        PROPERTIES(o) READONLY PANEL namePerformer, startDateTime, finishDateTime, packQuantity                       
        PROPERTIES(o) READONLY statusPicking BACKGROUND backgroundStatusPicking(o) BEFORE countOrderDetail(o)             
    ;
    DESIGN orders {
        documentHistory {
            NEW picking {
                caption = 'Комплектация';
                type = CONTAINERH;
                MOVE PROPERTY(namePerformer(o));
                MOVE PROPERTY(startDateTime(o));
                MOVE PROPERTY(finishDateTime(o));
                MOVE PROPERTY(packQuantity(o));
            }
        }
    }
END