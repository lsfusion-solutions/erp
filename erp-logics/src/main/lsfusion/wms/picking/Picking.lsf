MODULE Picking;

REQUIRE System,
        Historizable,
        Numerator,
        Document,
        Stock,
        PickingOrder,
        OrderLedger,
        PurchaseLedger,
        StockMovement;

CLASS ABSTRACT Picking 'Комплектация': Document ;
CLASS ABSTRACT PickingDetail 'Строка комплектации': DocumentDetail;

CLASS UserPicking 'Комплектация (польз.)': Picking;
CLASS UserPickingDetail 'Комплектации (польз.)': PickingDetail;

@defineDocumentInterface(picking);
@deriveDocumentHeaderTimePrefix(UserPicking, );

@defineDocumentInterfaceNumber(picking, BPSTRING[2]);
overNumber = ABSTRACT STRING[48](Picking);
@defineNumeratedDefault(UserPicking, 'Комплектации', 'КК');
@defineDocumentInterfaceDataStock(picking, stock, 'Склад', );

@defineDocumentInterfaceDescription(picking, 'Комплектация');

@defineDocumentInterfaceDetailSku(picking, sku);
@defineDocumentInterfaceDetailQuantity(picking);
@showDocumentInterfaceDetailBatch(picking);
@defineDocumentInterfaceDetailBatch(picking, batch);
replace(Sku s, Batch b) + {  sku(UserPickingDetail detail) <- s WHERE batch(detail) == b;}

@defineDocumentInterfaceHeaderQuantity(picking);

@defineDocumentHeaderSkuQuantity(picking, sku);
@defineDocumentHeaderSkuQuantity(userPicking, sku);

@defineAddDetailDialogSkuStock(userPicking, sku, stock, dialogSku);
@defineAddDetailDialogBarcode(userPicking, sku);

@defineDocumentDetailGrossWeight(picking, sku);

@defineDocumentHeaderGrossWeight(picking);

// История по правой кнопке
@defineMovementSku(pickingDetail, stock); //-- показываем по нажатию правой клавиши движение товара
@defineMovementSku(userPickingDetail, stock); //-- показываем по нажатию правой клавиши движение товара
@defineBalancesSku(pickingDetail); //-- показываем по нажатию правой клавиши остатки товара
@defineBalancesSku(userPickingDetail); //-- показываем по нажатию правой клавиши остатки товара

@defineBarcodeSku(pickingDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
@defineBarcodeSku(userPickingDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара 

@defineBalancesBatch(pickingDetail); //-- показываем по нажатию правой клавиши остатки партии
@defineBalancesBatch(userPickingDetail); //-- показываем по нажатию правой клавиши остатки партии
@defineMovementBatch(pickingDetail, stock); //-- показываем по нажатию правой клавиши движение по партии
@defineMovementBatch(userPickingDetail, stock); //-- показываем по нажатию правой клавиши движение по партии

@defineInfoSku(pickingDetail); //-- показываем по нажатию правой клавиши информацию по товару
@defineInfoSku(userPickingDetail); //-- показываем по нажатию правой клавиши информацию по товару

changeBatch(UserPickingDetail detail)  { 
    DIALOG dialogBatchStockOut OBJECTS st = stock(detail),
                                  t = dateTime(detail),
                                  sk = sku(detail),
                                  bt = batch(detail) INPUT NULL NEWSESSION DO
        batch(detail) <- bt;
};

packQuantity 'Кол-во собранных мест' = ABSTRACT NUMERIC[14,3] (Picking);
packQuantity 'Кол-во собранных мест' = DATA NUMERIC[14,3] (UserPicking);
packQuantity(UserPicking picking) += packQuantity(picking);

// --------------------------- Формы Заказа ---------------------------------

editSku 'Редактировать SKU' (UserPickingDetail d)  { NEWSESSION { edit(sku(d)); } }
FORM userPicking 'Комплектация'
    OBJECTS o = UserPicking PANEL
    PROPERTIES (o) nameStock,// ON CHANGE changeCustomerStock###customerFilter###userPicking(o),
                   nameNumerator, number, series, date, time,
                   note, countUserPickingDetail, quantityUserPickingDetail,
                   packQuantity

    OBJECTS d = UserPickingDetail
    PROPERTIES (d) index
    PROPERTIES (d) ON EDIT editSku(d) idBarcodeSku, nameSku, shortNameUOMSku,
                   nameBatch ON CHANGE changeBatch(d)
    PROPERTIES (d) quantity, NEW, DELETE GRID

    PROPERTIES(o) DRAW d addDetailDialogSkuStockUserPickingDetail,
                           addDetailInputBarcodeUserPickingDetail, deleteUserPickingDetail
    FILTERS userPicking(d) == o

    EDIT UserPicking OBJECT o
;

DESIGN userPicking {
    BOX {
        size = (1024, 768);
        NEW mainTabbed {
            fill = 1;
            tabbed = TRUE;
            NEW documentBox {
                fill = 1;
                caption = 'Комплектация';
                
                NEW headerBox {
                                     horizontal = TRUE;
                         
                                     NEW headerRow1 {
                                         fill = 1;
                         
                                         MOVE GROUP(documentHeader,o) {
                                             lines = 1;
                                             horizontal = TRUE;
                                             MOVE PROPERTY(nameStock(o));
                                             MOVE PROPERTY(nameNumerator(o));
                                             MOVE PROPERTY(number(o));
                                             MOVE PROPERTY(series(o));
                                             MOVE PROPERTY(date(o));
                                             MOVE PROPERTY(time(o));
                                         }
                                         MOVE GROUP(documentPrm,o);
                                     }
                                         NEW sumContainer {
                                             MOVE GROUP(documentSum,o) {
                                                 lines = 1;
                                             }
                                             NEW seatContainer {
                                                 MOVE PROPERTY(packQuantity(o));
                                             }
                                         }
                                 }
                NEW specificationBox {
                    fill = 1;
                    MOVE BOX(d) {
                        caption = 'Спецификация';
                        PANEL(d) {
                            horizontal = FALSE;
                        }
                    }
                }
            }
        }
        MOVE TOOLBARBOX;
    }
}

//    @extendFormDocumentSkuStock(userPicking, userPicking, o, legalEntityProp, stockProp);



overCopy  ABSTRACT LIST ( UserPickingDetail, PickingDetail);
copy 'Копировать'(Picking picking)  { 
	NEWSESSION {
	    NEW o = UserPicking {
	
	        stock(o) <- stock(picking);
	        note(o) <- note(picking);
	
	        FOR picking(PickingDetail pickingDetail) == picking DO {
	            NEW d=UserPickingDetail {
	                userPicking(d) <- o;
	                sku(d) <- sku(pickingDetail);
	                quantity(d) <- quantity(pickingDetail);
	                batch(d) <- batch(pickingDetail);
	                overCopy(d, pickingDetail);
	            }
	        }
	
	        SHOW userPicking OBJECTS o = o DOCKED;
	    }
	}
} TOOLBAR;


FORM pickings 'Комплектации'
    OBJECTS o = Picking LAST
    PROPERTIES (o) READONLYIF isReadonly() number, series, date, time,
                   nameStock

    PROPERTIES (o) READONLY countPickingDetail, quantityPickingDetail

    PROPERTIES (o) READONLYIF isReadonly() packQuantity //notePicking

    PROPERTIES (o) READONLY PANEL createdNameUser, createdTime, createdHostnameComputer

    PROPERTIES (o) NEWSESSION NEW[UserPicking], EDIT
    PROPERTIES (o) copy
    PROPERTIES     NEWSESSION deleteo=DELETE(o) SHOWIF is[UserPicking](o)

    OBJECTS d=PickingDetail
    PROPERTIES (d) READONLY index, nameSku, shortNameUOMSku,
                   nameBatch, quantity
    FILTERS picking(d) == o
    LIST Picking OBJECT o
;

DESIGN pickings {
    NEW documentContainer BEFORE TOOLBARBOX {
        fill = 1;

        MOVE BOX(o) { fill = 2; }

        NEW documentDetail {
            tabbed = TRUE;
            fill = 2;

            MOVE BOX(d) {
                caption = 'Спецификация';
            }
            NEW documentHistory {
                fill = 1;
                caption = 'История';
                MOVE GROUP(created,o);

            }
            NEW printTab {
                fill = 1;
                caption = 'Печатные формы';
                NEW printContainer {
                    fill = 1;
                    caption = 'Печать';
                }
            }
            NEW actionContainer {
                fill = 1;
                caption = 'Действия';
                horizontal = TRUE;
                NEW createdContainer {
                    fill = 1;
                    caption = 'Создание на основе';
                    MOVE PROPERTY(copy(o)) {caption = 'Комплектация';}
                }
            }
        }
    }
}

@extendFormEditable(pickings);
@extendFormFilterAccessStock(o, pickings, stock, company);
@defineDocumentLogForm(pickings, o);

//-- Подбор товар/партии

@defineDocumentSkuPriceListTypeSystemLedger(userPicking, stock, );
@extendFormDocumentSku(userPicking, userPickingDetail, userPicking, o, sku, stock);

@defineDocumentBatchPriceListTypeSystemLedger(userPicking, stock, );
@extendFormDocumentBatch(userPicking, userPicking, o);

// Резервы
@extendFormDocumentSkuOrderLedger(picking, userPicking, o, stock);
@extendFormDocumentSkuOrderLedgerAll(userPicking, userPicking, o);

@extendFormDocumentBatchOrderLedger(userPicking, userPicking, o, stock);
@extendFormDocumentBatchOrderLedgerAll(userPicking, userPicking, o);

@defineDocumentSkuStockSupplier (userPicking, userPicking, o);
@defineDocumentBatchStockSupplier(userPicking, userPicking, o);

//-------------------------- Связь комплектаций с заказами-комплектациями ------------------------------------//

pickingOrder = ABSTRACT PickingOrder (Picking) MATERIALIZED INDEXED;
pickingOrder = DATA PickingOrder (UserPicking);
pickingOrder(UserPicking picking) += pickingOrder(picking);

CONSTRAINT stock(UserPicking picking) != stock(pickingOrder(picking))
    CHECKED BY pickingOrder[UserPicking]
        MESSAGE 'Склад в заказе на комплектацию и в комплектации должны соответствовать друг другу';

descriptionPickingOrder 'Заказ' (Picking picking) = description(pickingOrder(picking)) CHARWIDTH 30 IN pickingOrders;
notePickingOrder 'Примечание (заказ)' (Picking p) = note(pickingOrder(p)); 

pickingOrder(PickingDetail d) = pickingOrder(picking(d)) MATERIALIZED;

INDEX pickingOrder(PickingDetail d), sku(d);

notCount 'Не учитывать' = ABSTRACT BOOLEAN (Picking);

quantityPickings 'Количество комплектаций' (pickingOrder) = GROUP SUM 1 IF NOT notCount(Picking picking) BY pickingOrder(picking) MATERIALIZED;

pickings 'Комплектации' (pickingOrder) = GROUP CONCAT STRING[255](description(Picking picking)), ', '
                                         ORDER picking
                                         BY pickingOrder(picking)
//                                         IN order
                                         CHARWIDTH 30 MATERIALIZED;

overFillUserPicking  ABSTRACT LIST ( UserPickingDetail, PickingOrderDetail);
overFillUserPicking  ABSTRACT LIST ( UserPicking);

skipCreateOrderPickingDetails = ABSTRACT BOOLEAN (UserPicking);

moveUserPicking 'Комплектация'(PickingOrder pickingOrder)  { 
	NEWSESSION {
	    NEW p = UserPicking {
	        pickingOrder(p) <- pickingOrder;
	        stock(p) <- stock(pickingOrder);
	        FOR pickingOrder(PickingOrderDetail detail) == pickingOrder AND NOT skipCreateOrderPickingDetails(p) NEW d = UserPickingDetail DO {
	            userPicking(d) <- p;
	            sku(d) <- sku(detail);
	            quantity(d) <- quantity(detail);
	            batch(d) <- batch(detail);
	            overFillUserPicking(d, detail);
	        }
	        overFillUserPicking(p);
	        SHOW userPicking OBJECTS o=p DOCKED;
	    }
	}
} TOOLBAR;


EXTEND FORM pickingOrders
    PROPERTIES(o) READONLY BEFORE deleteo quantityPickings, pickings
    PROPERTIES(o) moveUserPicking
;


DESIGN pickingOrders {
    createdContainer{
        MOVE PROPERTY(moveUserPicking(o)) { alignment = STRETCH; };
    }
}

//--
FORM pickingsOrderPickings 'Заказы на комплектацию'
    OBJECTS s = Stock PANEL
    PROPERTIES (s) READONLY name

    OBJECTS o = PickingOrder
    PROPERTIES (o) READONLY number, series, date, time,
                   countPickingOrderDetail, quantityPickingOrderDetail,
                   note, quantityPickings, pickings

    OBJECTS d=PickingOrderDetail
    PROPERTIES (d) READONLY index, nameSku, shortNameUOMSku,
                   nameBatch, quantity
    FILTERS pickingOrder(d) == o,
            stock(o) == s
;
fillUserPickingOrder 'Заполнить на основании заказа на комплектацию'(UserPicking userPicking)  { 
    DIALOG pickingsOrderPickings OBJECTS s = stock(userPicking), o INPUT DO {
        pickingOrder(userPicking) <- o;

        FOR pickingOrder(PickingOrderDetail detail) == o AND NOT skipCreateOrderPickingDetails(userPicking) NEW d = UserPickingDetail DO {
            userPicking(d) <- userPicking;
            sku(d) <- sku(detail);
            quantity(d) <- quantity(detail);
            batch(d) <- batch(detail);
            overFillUserPicking(d, detail);
        }
    }
} IN pickingOrders;


EXTEND FORM userPicking
    PROPERTIES(o) fillUserPickingOrder, descriptionPickingOrder
;
DESIGN userPicking {
    headerRow1 {
        NEW baseContainer {
            horizontal = TRUE;
            caption = 'Основание' ;
            MOVE GROUP(pickingOrders,o);
        }
    }
}

EXTEND FORM pickings
    PROPERTIES(o) READONLY BEFORE deleteo descriptionPickingOrder
;

//------------------------- Определение стадий комплектации--------------------//

countPickingOrderSku 'Кол-во наименований' (PickingOrder pickingOrder) = GROUP SUM 1 IF quantityPickingOrderDetail(Sku sku, pickingOrder) MATERIALIZED;

quantityPickingDetail 'Кол-во в комплектациях' = GROUP SUM quantity(PickingDetail d) IF NOT notCount(picking(d)) BY sku(d),pickingOrder(d);
countEqualPickingOrderSku 'Кол-во наименований с равным кол-ом товара' (PickingOrder pickingOrder) = GROUP SUM 1 IF quantityPickingDetail(Sku sku, pickingOrder) == quantityPickingOrderDetail(sku, pickingOrder) MATERIALIZED;

calcFull 'Полностью собран' (PickingOrder pickingOrder) = countPickingOrderSku(pickingOrder) == countEqualPickingOrderSku(pickingOrder);
calcPart 'Частично собран' (PickingOrder pickingOrder) = quantityPickings(pickingOrder) AND NOT calcFull(pickingOrder);

packQuantity 'Кол-во собранных мест' (pickingOrder) = GROUP SUM packQuantity(Picking picking) BY pickingOrder(picking);

accepted 'Принят в работу' = DATA BOOLEAN (PickingOrder);
notAccepted(PickingOrder o) = NOT accepted(o);

startDate 'Дата начала' = DATA DATE (PickingOrder);
startTime 'Время начала' = DATA TIME (PickingOrder);
startDateTime 'Начало комплектации' (PickingOrder o) = dateTimeToDateTime(startDate(o), startTime(o)) MATERIALIZED;

finishDate 'Дата окончания' = DATA DATE (PickingOrder);
finishTime 'Время окончания' = DATA TIME (PickingOrder);
finishDateTime 'Дата/время окончания' (PickingOrder o) = dateTimeToDateTime(finishDate(o), finishTime(o)) MATERIALIZED;

startDateTime 'Дата/время начала' (Picking picking) = startDateTime(pickingOrder(picking));
finishDateTime 'Дата/время окончания' (Picking picking) =  finishDateTime(pickingOrder(picking));

performer  = DATA CustomUser (PickingOrder);
namePerformer 'Комплектовщик' (PickingOrder pickingOrder) = name[Contact](performer(pickingOrder));

performer = performer(pickingOrder(Picking picking));
namePerformer 'Комплектовщик' (Picking picking) = name[Contact](performer(picking));

overBackground = ABSTRACT BOOLEAN(PickingOrder);
overColor = ABSTRACT COLOR(PickingOrder);

statusPicking 'Статус комплектации' (PickingOrder order) = CASE
                                          WHEN calcPart(order) THEN 'Частично собран'
                                          WHEN calcFull(order) THEN 'Полностью собран'
                                          WHEN accepted(order) THEN 'В комплектации'
                                          WHEN isClosed(order) THEN 'Закрыт'
                                          WHEN order IS PickingOrder THEN 'Ожидает комплектацию'
                                          CHARWIDTH 22
                                      ;
backgroundStatusPicking 'Цвет' (PickingOrder order) =  CASE
                                          WHEN overBackground(order) THEN overColor(order)  
                                          WHEN calcPart(order) THEN RGB(255,238,165)
                                          WHEN calcFull(order) THEN RGB(212,255,212)
                                          WHEN accepted(order) THEN RGB(255,238,165)
                                          WHEN isClosed(order) THEN RGB(255,255,255)
                                          WHEN order IS PickingOrder THEN RGB(255,200,216)
                                      ;

status 'Статус' = statusPicking(pickingOrder(Picking picking));
backgroundStatus = backgroundStatusPicking(pickingOrder(Picking picking));

accept 'Принять'(PickingOrder pickingOrder)  { 
	NEWSESSION {
	    accepted(pickingOrder) <- TRUE;
	    performer(pickingOrder) <- currentUser();
	    startDate(pickingOrder) <- currentDate();
	    startTime(pickingOrder) <- currentTime();
	    apply();
	
	}
} TOOLBAR CHANGEKEY 'ctrl ENTER';
unaccept 'Отменить'(PickingOrder pickingOrder)  { 
	NEWSESSION {
	    accepted(pickingOrder) <- NULL;
	    performer(pickingOrder) <- NULL;
	    startDate(pickingOrder) <- NULL;
	    startTime(pickingOrder) <- NULL;
	    apply();
	}
} TOOLBAR CHANGEKEY 'ctrl DELETE';

FORM packQuantity 'Комплектация'
    OBJECTS n = NUMERIC[14,3] PANEL
    PROPERTIES val = VALUE(n)
;
DESIGN packQuantity {
    BOX {

        MOVE PROPERTY(val) {
            caption = 'Введите количество собранных мест';
            panelCaptionVertical = TRUE;
            font = 'bold 36';
            charWidth = 4;
        }
        MOVE TOOLBARBOX;
    }
}

fullyAssembled 'Собран полностью'(PickingOrder pickingOrder)  { 
	NEWSESSION {
	    DIALOG packQuantity OBJECTS n INPUT DO {
	        finishDate(pickingOrder) <- currentDate();
	        finishTime(pickingOrder) <- currentTime();
	        NEW p = UserPicking {
	            pickingOrder(p) <- pickingOrder;
	            stock(p) <- stock(pickingOrder);
	            packQuantity(p) <- n;
	            number(p) <- overNumber(p);
	            FOR pickingOrder(PickingOrderDetail detail) == pickingOrder NEW d = UserPickingDetail DO {
	                userPicking(d) <- p;
	                sku(d) <- sku(detail);
	                quantity(d) <- quantity(detail);
	                batch(d) <- batch(detail);
	                overFillUserPicking(d, detail);
	            }
	        }
	    }
	    apply();
	}
} TOOLBAR CHANGEKEY 'F10';

partiallyAssembled 'Собран частично'(PickingOrder pickingOrder)  { 
	NEWSESSION{
	    DIALOG packQuantity OBJECTS n INPUT DO {
	        finishDate(pickingOrder) <- currentDate();
	        finishTime(pickingOrder) <- currentTime();
	        NEW p = UserPicking {
	            pickingOrder(p) <- pickingOrder;
	            stock(p) <- stock(pickingOrder);
	            packQuantity(p) <- n;
	            number(p) <- overNumber(p);
	            FOR pickingOrder(PickingOrderDetail detail) == pickingOrder NEW d = UserPickingDetail DO {
	                userPicking(d) <- p;
	                sku(d) <- sku(detail);
	                quantity(d) <- quantity(detail);
	                batch(d) <- batch(detail);
	                overFillUserPicking(d, detail);
	            }
	            SHOW userPicking OBJECTS o=p DOCKED;
	        }
	    }
	}
} TOOLBAR CHANGEKEY 'F9';

EXTEND FORM pickingOrders
    PROPERTIES(o) READONLYIF isReadonly() namePerformer, startDate, startTime
    PROPERTIES(o) READONLY statusPicking BACKGROUND backgroundStatusPicking(o)
    PROPERTIES(o) READONLYIF isReadonly() finishDate, finishTime
    PROPERTIES(o) READONLY packQuantity
    PROPERTIES(o) accept, unaccept, fullyAssembled, partiallyAssembled

;

DESIGN pickingOrders {
    actionContainer {
        NEW  pickingContainer {
            caption = 'Комплектация';
            NEW pickingContainer1 {
                horizontal = TRUE;
                MOVE PROPERTY(accept(o));
                MOVE PROPERTY(unaccept(o));
            }
            NEW pickingContainer2 {
                horizontal = TRUE;
                MOVE PROPERTY(fullyAssembled(o));
                MOVE PROPERTY(partiallyAssembled(o));
            }
        }
    }
}

//-------------------------------- Печатная форма-------------------------------//

FORM printPickingOrder 'Заказ на комплектацию'
    OBJECTS o = PickingOrder PANEL SUBREPORT
    PROPERTIES (o) READONLY seriesNumber, date, time,
                   fullNameStock

    PROPERTIES (o) READONLY countPickingOrderDetail, quantityPickingOrderDetail,
                   namePerformer, startDate, startTime, statusPicking,
                   finishDate, finishTime

    OBJECTS d=PickingOrderDetail
    PROPERTIES (d) READONLY index, nameSku, shortNameUOMSku,
                   nameBatch, quantity
    FILTERS pickingOrder(d) == o
;

print 'Заказ на комплектацию' (PickingOrder order)  { PRINT printPickingOrder OBJECTS o = order; }  IMAGE 'print.png' IN print;

EXTEND FORM pickingOrders
    PROPERTIES(o)  print
;
DESIGN pickingOrders {
    printTab {
        MOVE GROUP(print,o);
    }
}

NAVIGATOR {
    pickingNavigator 'Комплектация' {
        NEW pickings;
    }
}

number[Document](Picking picking) += number(picking);
series[Document](Picking picking) += series(picking);
date[Document](Picking picking) += date(picking);

index[DocumentDetail](UserPickingDetail detail) += index(detail);
sku[DocumentDetail](PickingDetail detail) += sku(detail);
quantity[DocumentDetail](PickingDetail detail) += quantity(detail);

document[DocumentDetail](PickingDetail detail) += picking(detail);

supplier[Document](Picking picking) += legalEntity(stock(picking));
supplierStock[Document](Picking picking) += stock(picking);