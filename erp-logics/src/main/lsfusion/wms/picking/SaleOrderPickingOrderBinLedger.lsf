MODULE SaleOrderPickingOrderBinLedger;

REQUIRE SalePickingOrder, SaleOrderBrestPharm, PickingOrderBinLedger, BatchBinSkuLedger, BinOrderBinLedger;

NAMESPACE Sale;

createUserPickingOrder 'Заказ на комплектацию'(Order o) {
    NEWSESSION {
        LOCAL quantityLoc = NUMERIC[16,5](Batch, Bin);
        LOCAL quantityLoc = NUMERIC[16,5](Batch);

        IF quantityOrderDetail(o) THEN NEW p = UserPickingOrder {
            order(p) <- o;
            stock(p) <- supplierStock(o);

            quantityLoc(Batch bt) <- [GROUP SUM quantity(OrderDetail d) BY batch(d), order(d)](bt, o);
            quantityLoc (Batch bt, Bin b) <- PARTITION UNGROUP quantityLoc[Batch] LIMIT currentBalance(bt, b) ORDER currentBalance(bt, b) BY bt
                WHERE binGroup2(b) = binZone(o);

            FOR quantityLoc(Batch bt, Bin b) DO NEW pd = UserPickingOrderDetail {
                pickingOrder(pd) <- p;
                sku(pd) <- sku(bt);
                batch(pd) <- bt;
                outBin(pd) <- b;
                quantity(pd) <- quantityLoc(bt, b);
            }
        }
        SHOW userPickingOrder;
    }
} TOOLBAR;

EXTEND FORM Sale.orders
    PROPERTIES createUserPickingOrder(o) SHOWIF statusPicking(o) = StatusPicking.notCreated;
;

DESIGN Sale.orders {
    actionContainer {
        NEW pickingConntainer {
            caption = 'Заказы на комплектацию';
            MOVE PROPERTY (createUserPickingOrder(o));
        }
    }
}