MODULE PickingOrder;

REQUIRE System,
        Utils,
        Historizable,
        Numerator,
        Document,
        Barcode,
        Stock,
        StockMovement,
        WMS,
        StockSkuDocument,
        Item;

PRIORITY Utils, Stock;

NAMESPACE Picking;

//----------------------------------------------- Заказ на комплектацию ---------------------------------------------------//

GROUP pickingOrders 'Информация о заказе' : base;

CLASS ABSTRACT PickingOrder 'Заказ на комплектацию': Document ;
CLASS ABSTRACT PickingOrderDetail 'Строка заказа на комплектацию': DocumentDetail;

CLASS UserPickingOrder 'Заказ на комплектация (польз.)': PickingOrder;
CLASS UserPickingOrderDetail 'Строка заказа на комплектации (польз.)': PickingOrderDetail;

@defineDocumentInterface(pickingOrder);
@deriveDocumentHeaderTimePrefix(UserPickingOrder, );

@defineDocumentInterfaceNumber(pickingOrder, BPSTRING[2]);
@defineNumeratedDefault(UserPickingOrder, 'Заказы на комплектацию', 'ЗК');

@defineDocumentInterfaceStock(pickingOrder, stock, 'Склад ');

@defineDocumentInterfacePosted(pickingOrder);
@defineDocumentInterfaceClosed(pickingOrder);

@defineDocumentInterfaceDescription(pickingOrder, 'Заказ на комплектацию');

@defineDocumentInterfaceDetailSku(pickingOrder, sku);
INDEX pickingOrder(PickingOrderDetail d), sku(d);

@defineDocumentInterfaceDetailQuantity(pickingOrder);

@defineDocumentInterfaceDetailBatch(pickingOrder, batch);

replace(Sku s, Batch b) + {  sku(UserPickingOrderDetail detail) <- s WHERE batch(detail) == b;}

@defineDocumentInterfaceHeaderQuantity(pickingOrder);

@defineDocumentHeaderSkuQuantity(pickingOrder, sku);
@defineDocumentHeaderSkuQuantity(userPickingOrder, sku);

@defineAddDetailDialogSkuStock(userPickingOrder, sku, stock, dialogSku);
@defineAddDetailDialogBarcode(userPickingOrder, sku);

@defineDocumentDetailGrossWeight(pickingOrder, sku);

@defineDocumentHeaderGrossWeight(pickingOrder);

price 'Цена' (Sku sku, PickingOrder pickingOrder) = prevAccountPriceB(sku, stock(pickingOrder), dateTime(pickingOrder));

// История по правой кнопке
@defineMovementSku(pickingOrderDetail, stock); //-- показываем по нажатию правой клавиши движение товара
@defineMovementSku(userPickingOrderDetail, stock); //-- показываем по нажатию правой клавиши движение товара
@defineBalancesSku(pickingOrderDetail); //-- показываем по нажатию правой клавиши остатки товара
@defineBalancesSku(userPickingOrderDetail); //-- показываем по нажатию правой клавиши остатки товара

@defineBarcodeSku(pickingOrderDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
@defineBarcodeSku(userPickingOrderDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара 

@defineBalancesBatch(pickingOrderDetail); //-- показываем по нажатию правой клавиши остатки партии
@defineBalancesBatch(userPickingOrderDetail); //-- показываем по нажатию правой клавиши остатки партии
@defineMovementBatch(pickingOrderDetail, stock); //-- показываем по нажатию правой клавиши движение по партии
@defineMovementBatch(userPickingOrderDetail, stock); //-- показываем по нажатию правой клавиши движение по партии

@defineInfoSku(pickingOrderDetail); //-- показываем по нажатию правой клавиши информацию по товару
@defineInfoSku(userPickingOrderDetail); //-- показываем по нажатию правой клавиши информацию по товару

//
//    @defineDocumentDialogSupplierCustomerStock(userOrder, supplierFilter, customerFilter);
//    @defineDocumentDialogSupplierCustomerStockDetail(userOrderDetail, supplierFilter, customerFilter);
//    @defineDocumentDialogSupplierCustomerLegalEntity(userOrder, supplierFilter, customerFilter);

changeBatch(UserPickingOrderDetail detail)  { 
    DIALOG dialogBatchStockOut OBJECTS st = stock(detail),
                                  t = dateTime(detail),
                                  sk = sku(detail),
                                  bt = batch(detail) INPUT NULL NEWSESSION DO
        batch(detail) <- bt;
}


// --------------------------- Формы Заказа ---------------------------------

editSku 'Редактировать SKU' (UserPickingOrderDetail d)  { NEWSESSION { edit(sku(d)); } }
FORM userPickingOrder 'Заказ на комплектацию'
    OBJECTS o = UserPickingOrder PANEL
    PROPERTIES (o) isPosted, nameStock,// ON CHANGE changeCustomerStock###customerFilter###userOrder(o),
                   nameNumerator, number, series, date, time,
                   note, countUserPickingOrderDetail, quantityUserPickingOrderDetail


    OBJECTS d = UserPickingOrderDetail
    PROPERTIES (d) index
    PROPERTIES (d) ON EDIT editSku(d) idBarcodeSku, nameSku, shortNameUOMSku,
                   nameBatch ON CHANGE changeBatch(d)
    PROPERTIES (d) quantity, NEW, DELETE GRID

    PROPERTIES(o) DRAW d addDetailDialogSkuStockUserPickingOrderDetail,
                           addDetailInputBarcodeUserPickingOrderDetail, deleteUserPickingOrderDetail
    FILTERS userPickingOrder(d) == o

    EDIT UserPickingOrder OBJECT o
;

DESIGN userPickingOrder {

    BOX {
        size = (1024, 768);
        NEW specificationBox BEFORE TOOLBARBOX{
            fill = 1;
            MOVE BOX(d) {
                caption = 'Спецификация';
            }
        }

        NEW headerBox BEFORE specificationBox {
            type = CONTAINERH;

            NEW headerRow1 {
                MOVE GROUP(documentHeader,o) {
                    lines = 1;
                    type = CONTAINERV;
                    NEW row1 {
                        type = CONTAINERH;
                        MOVE PROPERTY(isPosted(o));
                        MOVE PROPERTY(nameStock(o));
                    }
                    NEW row2 {
                        type = CONTAINERH;
                        MOVE PROPERTY(nameNumerator(o));
                        MOVE PROPERTY(number(o));
                        MOVE PROPERTY(series(o));
                        MOVE PROPERTY(date(o));
                        MOVE PROPERTY(time(o));
                    }

                }
                MOVE GROUP(documentPrm,o) { lines = 1; type = CONTAINERH; }
            }
            MOVE GROUP(documentSum,o) {
                lines = 1;
            }
        }
    }
}

//    @extendFormDocumentSkuStock(userOrder, userOrder, o, legalEntityProp, stockProp);

overCopy  ABSTRACT LIST ( UserPickingOrderDetail, PickingOrderDetail);
copy 'Копировать'(PickingOrder order)  { 
	NEWSESSION {
	    NEW o = UserPickingOrder {
	
	        stock(o) <- stock(order);
	        note(o) <- note(order);
	
	        FOR pickingOrder(PickingOrderDetail orderDetail) == order DO {
	            NEW d=UserPickingOrderDetail {
	                userPickingOrder(d) <- o;
	                sku(d) <- sku(orderDetail);
	                quantity(d) <- quantity(orderDetail);
	                batch(d) <- batch(orderDetail);
	                overCopy(d, orderDetail);
	            }
	        }
	
	        SHOW userPickingOrder OBJECTS o = o DOCKED;
	    }
	}
} TOOLBAR;


FORM pickingOrders 'Заказы на комплектацию'
    OBJECTS o = PickingOrder
    PROPERTIES (o) READONLYIF isReadonly() isClosed, isPosted, number, series, 
                   date, time, nameStock

    PROPERTIES (o) READONLY countPickingOrderDetail, quantityPickingOrderDetail

    PROPERTIES (o) READONLY PANEL createdNameUser, createdTime, createdHostnameComputer

    PROPERTIES (o) NEWSESSION NEW[UserPickingOrder], EDIT
    PROPERTIES (o) copy
    PROPERTIES     NEWSESSION deleteo=DELETE(o) SHOWIF is[UserPickingOrder](o)

    OBJECTS d=PickingOrderDetail
    PROPERTIES (d) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku,
                   nameBatch, quantity
    FILTERS pickingOrder(d) == o
    LIST PickingOrder OBJECT o
;

DESIGN pickingOrders {
    NEW documentContainer BEFORE TOOLBARBOX {
        type = SPLITV;
        fill = 1;

        MOVE BOX(o);

        NEW documentDetail {
            type = TABBED;
            fill = 1;

            MOVE BOX(d) {
                caption = 'Спецификация';
            }
            NEW documentHistory {
                caption = 'История';
                MOVE GROUP(created,o);

            }
            NEW printTab {
                caption = 'Печатные формы';
                NEW printContainer {
                    caption = 'Печать';
                }
            }
            NEW actionContainer {
                caption = 'Действия';
                type = CONTAINERH;
                NEW createdContainer {
                    caption = 'Создание на основе';
                    MOVE PROPERTY(copy(o)) { caption = 'Заказ на комплектацию'; alignment = STRETCH; }
                }
            }
        }
    }
}
@extendFormEditable(pickingOrders);
@defineFilterIsOpened (pickingOrder, pickingOrders, o);
@extendFormFilterAccessStock(o, pickingOrders, stock, company);
@defineDocumentLogForm(pickingOrders, o);
//----------------------------------------------- Комплектация ---------------------------------------------------//

NAVIGATOR {
    WMSNavigator {
        NEW FOLDER pickingNavigator 'Комплектация' {
            NEW pickingOrders;
        }
    }
}