MODULE OrderInvoicePickingOrder;

REQUIRE OrderPickingOrder, OrderInvoice;

NAMESPACE Invoice;

inCreatePickingUserInvoicePosted = DATA LOCAL BOOLEAN (Order);
countInCreatePickingUserInvoicePostedOrder = GROUP SUM 1 IF inCreatePickingUserInvoicePosted(Order o);

countInCreatePickingUserInvoicePostedOrderParams = GROUP SUM 1 IF inCreatePickingUserInvoicePosted(Order o)
                                                         BY from(o), to(o), fromStock(o), toStock(o);
countParamsInCreatePickingUserInvoicePostedOrder = GROUP SUM 1 IF countInCreatePickingUserInvoicePostedOrderParams(LegalEntity from, LegalEntity to, Stock fromStock, Stock toStock); 

showPickingUserInvoicePosted 'Показывать созданные накладные по комплектации' = DATA BOOLEAN ();
EXTEND FORM options
    PROPERTIES() showPickingUserInvoicePosted
;
DESIGN options {
    invoices {
        MOVE PROPERTY (showPickingUserInvoicePosted());
    }
}

createPickingUserInvoicePosted 'Создать проведенную накладную'  ABSTRACT ( Order);

META defineOrderInvoicePickingOrder (sign)

    skipPickingQuantity = ABSTRACT BOOLEAN (OrderDetail);
    overPickingQuantity0 = ABSTRACT NUMERIC[16,5](OrderDetail);
        
    overPickingQuantity(OrderDetail d) = OVERRIDE overPickingQuantity0(d), (pickingQuantity(d) IF NOT skipPickingQuantity(d));
    
    picking (Batch b, OrderDetail d) = PARTITION UNGROUP pickingQuantity
                                                               LIMIT STRICT currentBalance(b, supplierStock(d)) IF skuCurrentBalance(b, supplierStock(d)) == sku(d)
                                                               ORDER dateTime(b), b
                                                               BY d;

    createPickingDetail(UserInvoice userInvoice, Order.Order order)  { 
        IF useExplicitBatchDetailUserInvoice(order) AND (explicitBatchLedger(fromStock(order)) OR forceExplicitBatchDetailUserInvoice(order)) THEN {
            FOR order(OrderDetail orderDetail) == order AND picking(Batch batch, orderDetail) AND NOT batch(orderDetail)
                ORDER orderCreateUserInvoice(orderDetail) 
                NEW d = UserInvoiceDetail DO {
                userInvoice(d) <- userInvoice;
                orderDetail(d) <- orderDetail;
                sku(d) <- sku(orderDetail);
                IF NOT skipFillBatch(d) THEN {
                    batch(d) <- batch;
                }                
                quantity (d) <- picking(batch, orderDetail);
                
                fill(d, orderDetail);
                overFill(d, orderDetail);
            }
            FOR order(OrderDetail orderDetail) == order AND PREV(overPickingQuantity(orderDetail)) AND batch(orderDetail)
                ORDER orderCreateUserInvoice(orderDetail) 
                NEW d = UserInvoiceDetail DO {
                userInvoice(d) <- userInvoice;
                orderDetail(d) <- orderDetail;
                sku(d) <- sku(orderDetail);                
                IF NOT skipFillBatch(d) THEN {
                    batch(d) <- batch(orderDetail);
                } 
                quantity (d) <- PREV(overPickingQuantity(orderDetail));
    
                fill(d, orderDetail);
                overFill(d, orderDetail);
            }
        } ELSE {
            FOR order(OrderDetail orderDetail) == order AND
                pickingQuantity(orderDetail) > 0 // возможно еще нужно фильтровать по складам
                AND in(orderDetail, userInvoice)
                ORDER orderCreateUserInvoice(orderDetail) 
                NEW d = UserInvoiceDetail DO {
                    userInvoice(d) <- userInvoice;
                    orderDetail(d) <- orderDetail;
                    sku(d) <- sku(orderDetail);
                    IF NOT skipFillBatch(d) THEN {
                        batch(d) <- batch(orderDetail);
                    }                     
                    quantity (d) <- pickingQuantity(orderDetail);

                    fill(d, orderDetail);
                    overFill(d, orderDetail);                    
            }
        }

        IF explicitBatchLedger(fromStock(order)) THEN {
            FOR NUMERIC[16,5] q==excessQuantityPickingPickingDetail(order, Batch batch) NEW d = UserInvoiceDetail DO {
                userInvoice(d) <- userInvoice;
                sku(d) <- sku(batch);
                quantity(d) <- q;
                batch(d) <- batch;
            }  
        } ELSE {
            FOR excessQuantityPickingPickingDetail(order, Sku sku) > 0 NEW d = UserInvoiceDetail DO {
                userInvoice(d) <- userInvoice;
                sku(d) <- sku;
                quantity(d) <- excessQuantityPickingPickingDetail(order, sku);
            }        
        }
    }
    extraPickingDetail ABSTRACT LIST (UserInvoice);
    fillPicking(UserInvoice userInvoice, Order.Order order)  { 
        fillHeader(userInvoice, order);
        createPickingDetail(userInvoice, order);
        extraPickingDetail(userInvoice);
        fillPrice(userInvoice, order);
    }

    packQuantity 'Общее количество грузовых мест' = ABSTRACT NUMERIC[8,2] (Invoice);
    packQuantity 'Общее количество грузовых мест' = DATA NUMERIC[8,2] (UserInvoice);
    packQuantity(UserInvoice invoice) += packQuantity(invoice);

    createPickingUserInvoice 'Создать накладную по комплектации'(Order order)  { 
        IF order IS Order THEN {
            userInvoice(order) <- NULL;
            NEW i = UserInvoice {
                fillPicking(i, order);
                userInvoice(order) <- i;
                packQuantity(i) <- packQuantity(order);
                createdUser(i, order) <- TRUE;
                include(order,i) <- TRUE;
                executeLocalEvents('Sale.userInvoice');
            }
        }
    }

    afterCreatePickingUserInvoicePosted ABSTRACT LIST (UserInvoice, Order.Order);
    createPickingUserInvoicePosted 'Создать проведенную накладную по комплектации'(Order order)  { 
        IF order IS Order THEN {
            userInvoice(order) <- NULL;
            IF countInCreatePickingUserInvoicePostedOrder() THEN {
                IF countParamsInCreatePickingUserInvoicePostedOrder() > 1 THEN {
                    MESSAGE 'По выбранным заказам не может быть создана одна накладная';
                } ELSE {
                    NEW i = UserInvoice {
                        isPosted(i) <- TRUE;
                        FOR inCreatePickingUserInvoicePosted(Order.Order o) DO {
                            fillPicking(i, o);                        
                            createdUser(i, o) <- TRUE;
                            include[Order,UserInvoice](o,i) <- TRUE;
                        }
                        packQuantity(i) <- (GROUP SUM packQuantity(Order.Order o) IF inCreatePickingUserInvoicePosted(o));
                        executeLocalEvents('Sale.userInvoice');
                        afterCreatePickingUserInvoicePosted(i, order);
                        IF showPickingUserInvoicePosted() THEN {
                            SHOW userInvoice OBJECTS i = i DOCKED NOCANCEL;
                        }
                    }
                }
            } ELSE {
                NEW i = UserInvoice {
                    isPosted(i) <- TRUE;
                    fillPicking(i, order);
                    packQuantity(i) <- packQuantity(order);
                    createdUser(i, order) <- TRUE;
                    userInvoice(order) <- i;
                    include(order,i) <- TRUE;
                    executeLocalEvents('Sale.userInvoice');
                    afterCreatePickingUserInvoicePosted(i, order);
                    IF showPickingUserInvoicePosted() THEN {
                        SHOW userInvoice OBJECTS i = i DOCKED NOCANCEL;
                    }
                }
            }
        }
    }
    createPickingUserInvoicePosted(Order o) + {  createPickingUserInvoicePosted(o); } 

    addPickingUserInvoice 'Накладная по комплектации'###sign(Order order)   { 
	NEWSESSION{
	        IF order IS Order THEN {
	            createPickingUserInvoice(order);
	            IF excessQuantityPickingPickingDetail(order) THEN {
	                MESSAGE 'В накладной присутствуют товары, не указанные в заказе';
	            }
	            SHOW userInvoice OBJECTS i = userInvoice(order) DOCKED NOCANCEL;
	        }
	    }
} TOOLBAR;

    EXTEND FORM orders
        PROPERTIES(o) SHOWIF calcPart(o) addPickingUserInvoice
    ;
    DESIGN orders {
        createdContainer{
            MOVE PROPERTY(addPickingUserInvoice(o)) { alignment = STRETCH; };
        }
    }

END

toInvoicePicked 'Не выписано' (OrderDetail d) = pickingQuantity(d) (-) invoiced(d);
toInvoicePicked 'Не выписано' (o) = GROUP SUM 1 IF toInvoicePicked(OrderDetail d) > 0 BY order(d) MATERIALIZED;
