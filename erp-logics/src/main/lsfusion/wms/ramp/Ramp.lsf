MODULE Ramp;

REQUIRE Stock, WMS, SkuLedger;

NAMESPACE Ramp;

//------------------------- Интервал -----------------------------//

CLASS  IntervalType 'Тип интервала';
TABLE intervalType (IntervalType);

name 'Наименование' = DATA ISTRING[100](IntervalType);
interval 'Интервал (минуты)' = DATA INTEGER (IntervalType); 
@defineExternalizable(intervalType, STRING[100]);

CLASS  Interval 'Интервал';
TABLE interval (Interval);

name 'Наименование' = DATA ISTRING[100](Interval);
@defineExternalizable(interval, STRING[100]);
time 'Время' = DATA TIME (Interval) IN id;

intervalType= DATA IntervalType (Interval) NONULL DELETE;
nameIntervalType 'Тип интервала' (Interval i) = name(intervalType(i));

generateInterval 'Сгенерировать' (IntervalType t)  { 
    LOCAL time = TIME ();
    time() <- 00:00;
    IF NOT interval(t) > 0 THEN
        RETURN;
    WHILE TRUE DO {
        NEW i = Interval {
            intervalType(i) <- t;
            time(i) <- time();
        }
        IF sumMinutes(time(), interval(t)) < time() OR [ GROUP SUM 1 BY intervalType(Interval i)](t) > 3600 THEN
            BREAK; 
        ELSE
            time() <- sumMinutes(time(), interval(t));
            
    }
}

FORM intervalType 'Тип интервала'
    OBJECTS t=IntervalType PANEL
    PROPERTIES(t) name, interval, generateInterval
    
    OBJECTS i= Interval
    PROPERTIES(i) time, NEW, DELETE        
    FILTERS intervalType(i) == t
    
    EDIT IntervalType OBJECT t
;

FORM intervalTypes 'Типы интервала'
    OBJECTS t=IntervalType
    PROPERTIES(t) READONLY   name 
    PROPERTIES(t) NEWSESSION NEW, EDIT, DELETE
    ORDERS name(t)
    
    OBJECTS i= Interval
    PROPERTIES(i) READONLY time
    ORDERS time(i)    
    FILTERS intervalType(i) == t
        
    LIST IntervalType OBJECT t
;
DESIGN intervalTypes { BOX { size = (600, 400); } }

//------------------------- Группы рамп -----------------------------//

CLASS  RampGroup 'Группа рамп';
TABLE rampGroup (RampGroup);

name 'Наименование' = DATA ISTRING[100](RampGroup);

TABLE rampGroupRampGroup(RampGroup, RampGroup);
@defineHierarchy(rampGroup, RampGroup);

FORM rampGroup 'Группа рамп'
    OBJECTS g=RampGroup PANEL
    PROPERTIES(g) name, nameParent
    EDIT RampGroup OBJECT g
;

FORM rampGroups 'Группы рамп'
    TREE treeGroups g=RampGroup PARENT parent(g)
    PROPERTIES READONLY name(g), canonicalName (g)
    PROPERTIES(g) NEWSESSION NEW, EDIT, deleteg=DELETE 
    ORDERS canonicalName(g)
    LIST RampGroup OBJECT g
;

//------------------------- Рампа -----------------------------//

CLASS  Ramp 'Рампа';
TABLE ramp (Ramp);

name 'Наименование' = DATA ISTRING[100](Ramp) IN id;
@defineExternalizable(ramp, STRING[100]);

rampGroup 'Группа рамп' = DATA RampGroup (Ramp) AUTOSET NONULL;
nameRampGroup 'Группа' (Ramp ramp) = name(rampGroup(ramp));

TABLE rampGroupRamp(RampGroup, Ramp);
isParent (RampGroup rampGroup, Ramp ramp) = isParent(rampGroup(ramp), rampGroup);
canonicalName 'Каноническое имя' (Ramp ramp) = canonicalName(rampGroup(ramp));

intervalType= DATA IntervalType (Ramp);
nameIntervalType 'Тип интервала' (Ramp r) = name(intervalType(r));

in 'Вкл.' (Ramp r,Interval i)= intervalType(r) == intervalType(i);
countInterval 'Кол-во интервалов' (Ramp r) = GROUP SUM 1 IF in(r,Interval i);

stock= DATA Stock (Ramp);
nameStock 'Склад' (Ramp r) = name(stock(r));
countInterval 'Кол-во интервалов' (st) = GROUP SUM 1 IF in(Ramp r,Interval i) BY stock(r);

CONSTRAINT stock(Ramp r) AND NOT isCompany(stock(r))
    CHECKED BY stock[Ramp] MESSAGE 'Для рампы должен быть задан склад компании';    
    
//--
TABLE rampSkuGroup(Ramp, SkuGroup);
inData 'Вкл.' = DATA BOOLEAN (Ramp, SkuGroup);
levelParent (Ramp ramp, SkuGroup group) = GROUP
                                                              MIN level(group, SkuGroup parent) IF inData(ramp, parent) MATERIALIZED;

nearestParent (Ramp ramp, SkuGroup group) = skuGroup(group, levelParent (ramp, group));
nearestIn  (Ramp ramp, SkuGroup group) =
    inData(ramp, nearestParent (ramp, group)) MATERIALIZED;

in 'Вкл.' (Ramp ramp, SkuGroup group) = OVERRIDE inData(ramp, group), nearestIn(ramp, group) MATERIALIZED;

in 'Вкл.' (Ramp ramp, Sku sku) = in(ramp, skuGroup(sku));
// Пока что простенькая логика привязки групп товаров к рампам, возможно надо будет переделать

countSkuGroups (Ramp ramp) = GROUP SUM 1 IF inData(ramp, SkuGroup skuGroup);

  
FORM ramp 'Рампа'
    OBJECTS r=Ramp PANEL
    PROPERTIES(r) name, id SHOWIF showIDs(), nameIntervalType, nameStock, nameRampGroup
    
    OBJECTS i= Interval
    PROPERTIES(i) READONLY time
    ORDERS time(i)
    FILTERS intervalType(r) == intervalType(i)
    
    EDIT Ramp OBJECT r
;
FORM ramps 'Рампы'
    TREE rampTree sg = RampGroup PARENT parent(sg)
    PROPERTIES READONLY name(sg)
    
    OBJECTS r=Ramp 
    PROPERTIES(r) READONLY name, id SHOWIF showIDs(), nameIntervalType, nameStock
    PROPERTIES(r) NEWSESSION NEW, EDIT, DELETE
    ORDERS      name(r)
    FILTERS isParent(sg, r) 
    
    TREE skuTree gg = SkuGroup PARENT parent(gg)
    PROPERTIES READONLY order(gg), name(gg)         
    PROPERTIES in(r,gg)      
    ORDERS order(gg)    
    OBJECTS i= Interval
    PROPERTIES(i) READONLY time
    ORDERS time(i)
    FILTERS intervalType(r) == intervalType(i)
    
    LIST Ramp OBJECT r
;
DESIGN ramps { 
    BOX { 
        size = (1024, 768); 
        NEW topContainer {
            horizontal = TRUE;
            fill = 1;
            NEW treeBox {
                fill = 1;
                horizontal = FALSE;
                MOVE BOX(TREE rampTree) {
                    caption = 'Группы рамп';
                }
                MOVE BOX(TREE skuTree) {
                    caption = 'Группы товаров';
                }                
            }    
            NEW detailContainer {
                fill = 2;
                horizontal = FALSE;
                MOVE BOX(r) {                            
                    GRID(r) {
                        defaultComponent = TRUE;
                    }
                }
                MOVE BOX(i);
            }
        }
        MOVE TOOLBARBOX;
    }
}

NAVIGATOR {
    WMSNavigator {
        NEW FOLDER rampNavigator 'Рампа' {
            NEW intervalTypes;
            NEW rampGroups; 
            NEW ramps;
        }
    }
}



