MODULE BatchReceivingInvoiceBinLedger;

REQUIRE ReceivingInvoiceBinLedger, BatchReceivingBinLedger, PurchaseShipmentBinLedger;

NAMESPACE Purchase;

consolidationKey 'Ключ группировки' = ABSTRACT STRING (Batch) CHARWIDTH 7;
overConsolidationKey(Batch bt) = OVERRIDE consolidationKey(bt), ('Не указан' IF bt IS Batch) MATERIALIZED;

overCompleteReceiving (Receiving r) + {
    FOR receiving(invoice(invoiceDetail(Batch bt)))==r INLINE DO {
        batch(ReceivingDetail d) <- bt WHERE sku(d)==sku(bt) AND overConsolidationKey(d)==overConsolidationKey(bt) AND receiving(d)==r AND quantity(d);
        inBin(Purchase.InvoiceDetail d) <- NULL WHERE d = invoiceDetail(shipmentDetail(bt));
    }
}

overCompleteReceiving(Sku s, STRING consolidationKey, Receiving r) + {
    FOR receiving(invoice(invoiceDetail(Batch bt)))==r AND sku(bt) == s AND overConsolidationKey(bt)==consolidationKey INLINE DO {
        batch(ReceivingDetail d) <- bt WHERE sku(d)==s AND overConsolidationKey(d)==consolidationKey AND receiving(d)==r AND quantity(d);
        inBin(Purchase.InvoiceDetail d) <- NULL WHERE d = invoiceDetail(shipmentDetail(bt));
    }
}

currentBalanceWithoutBatch 'Остаток в ячейке баз партий' (Sku sku, Bin bin) =
    currentBalance(sku, bin) (-) (GROUP SUM currentBalance(Batch batch, bin) IF sku(batch)==sku);

select 'Отм.' = DATA LOCAL NESTED BOOLEAN (Batch);

putawayBatch 'Разместить' (CustomUser u) {
    NEWSESSION NESTED(select[Batch], dataReceivingBin[CustomUser]) {
        select(Batch batch) <- NULL WHERE select(batch) AND NOT currentBalance(batch, receivingBin(u));
        IF NOT (GROUP MAX select(Batch batch)) THEN {
            select(Batch batch) <- TRUE WHERE currentBalance(batch, receivingBin(u));
        }
        IF NOT (GROUP MAX select(Batch batch)) THEN {
            MESSAGE 'Нечего размещать';
            RETURN;
        }
        IF NOT (GROUP MAX Bin bin IF storage(bin) AND stock(bin)==stock(receivingBin(u))) THEN {
            MESSAGE 'Для склада размещения нет ячеек хранения';
            RETURN;
        }
        IF NOT putawayExternalOperation() THEN {
            MESSAGE 'Не задана \'Операция размещения\' в настройках';
            RETURN;
        }
        FOR (GROUP MAX select(Batch batch) AND currentBalance(batch, receivingBin(u))) NEW o = UserBinTransfer DO {
            operation(o) <- putawayExternalOperation();
            date(o) <- currentDate();
            time(o) <- currentTime();
            stock(o) <- stock(receivingBin(u));
            FOR select(Batch batch) AND currentBalance(batch, receivingBin(u)) INLINE NEW d = UserBinTransferDetail DO {
                userBinTransfer(d) <- o;
                sku(d) <- sku(batch);
                batch(d) <- batch;
                outBin(d) <- receivingBin(u);
                inBin(d) <- putawayBinOver(sku(batch), stock(receivingBin(u)), putawayExternalOperation(), u);
                quantity(d) <- currentBalance(batch, receivingBin(u));
            }
            DIALOG userBinTransfer OBJECTS o=o MANAGESESSION DO {
                select(Batch batch) <- NULL;
            }
        }
    }
}

internalBatchPutaway 'Разместить внутри группы ячеек' (CustomUser u) {
    NEWSESSION NESTED(select[Batch], dataReceivingBin[CustomUser]) {
        select(Batch batch) <- NULL WHERE select(batch) AND NOT currentBalance(batch, receivingBin(u));
        IF NOT (GROUP MAX select(Batch batch)) THEN {
            select(Batch batch) <- TRUE WHERE currentBalance(batch, receivingBin(u));
        }
        IF NOT (GROUP MAX select(Batch batch)) THEN {
            MESSAGE 'Нечего размещать';
            RETURN;
        }
        IF NOT (GROUP MAX Bin bin IF storage(bin) AND stock(bin)==stock(receivingBin(u))) THEN {
            MESSAGE 'Для склада размещения нет ячеек хранения';
            RETURN;
        }
        IF NOT putawayInternalOperation() THEN {
            MESSAGE 'Не задана \'Операция размещения(внутри группы ячеек)\' в настройках';
            RETURN;
        }
        FOR (GROUP MAX select(Batch batch) IF currentBalance(batch, receivingBin(u))) NEW o = UserBinTransfer DO {
            operation(o) <- putawayInternalOperation();
            date(o) <- currentDate();
            time(o) <- currentTime();
            stock(o) <- stock(receivingBin(u));
            FOR select(Batch batch) AND currentBalance(batch, receivingBin(u)) INLINE NEW d = UserBinTransferDetail DO {
                userBinTransfer(d) <- o;
                sku(d) <- sku(batch);
                batch(d) <- batch;
                outBin(d) <- receivingBin(u);
                inBin(d) <- putawayBinOver(sku(batch), stock(receivingBin(u)), putawayInternalOperation(), u);
                quantity(d) <- currentBalance(batch, receivingBin(u));
            }
            DIALOG userBinTransfer OBJECTS o=o MANAGESESSION DO {
                select(Batch batch) <- NULL;
            }
        }
    }
}

putawayReserveBatch 'Разместить' (CustomUser u) {
    NEWSESSION NESTED(select[Batch, Bin], dataReceivingBin[CustomUser]) {
        select(Batch batch, Bin bin) <- NULL WHERE select(batch, bin) AND NOT (currentBalance(batch, bin) AND binGroup2(bin)==binGroup2(receivingBin(u)) AND orderLedger(bin));
        IF NOT (GROUP MAX select(Batch batch, Bin bin)) THEN {
            select(Batch batch, Bin bin) <- TRUE WHERE currentBalance(batch, bin) AND binGroup2(bin)==binGroup2(receivingBin(u)) AND orderLedger(bin);
        }
        IF NOT (GROUP MAX select(Batch batch, Bin bin)) THEN {
            MESSAGE 'Нечего размещать';
            RETURN;
        }
        IF NOT (GROUP MAX Bin bin IF storage(bin) AND stock(bin)==stock(receivingBin(u))) THEN {
            MESSAGE 'Для склада размещения нет ячеек хранения';
            RETURN;
        }
        IF NOT putawayExternalOperation() THEN {
            MESSAGE 'Не задана \'Операция размещения\' в настройках';
            RETURN;
        }
        FOR (GROUP MAX select(Batch batch, Bin bin) IF currentBalance(batch, bin) AND binGroup2(bin)==binGroup2(receivingBin(u)) AND orderLedger(bin)) NEW o = UserBinTransfer DO {
            operation(o) <- putawayExternalOperation();
            date(o) <- currentDate();
            time(o) <- currentTime();
            stock(o) <- stock(receivingBin(u));
            FOR select(Batch batch, Bin bin) AND currentBalance(batch, bin) AND binGroup2(bin)==binGroup2(receivingBin(u)) AND orderLedger(bin) INLINE NEW d = UserBinTransferDetail DO {
                userBinTransfer(d) <- o;
                sku(d) <- sku(batch);
                batch(d) <- batch;
                outBin(d) <- bin;
                inBin(d) <- putawayBinOver(sku(batch), stock(receivingBin(u)), putawayExternalOperation(), u);
                quantity(d) <- currentBalance(batch, bin);
            }
            DIALOG userBinTransfer OBJECTS o=o MANAGESESSION DO {
                select(Batch batch, Bin bin) <- NULL;
            }
        }
    }
}

overCreateDetail(ReceivingDetail d, InvoiceDetail detail) + {
    expiryDate(d) <- expiryDate(detail);
    consolidationKey(d) <- consolidationKey(detail);
}

skipReceiving(Invoice r) += NOT createShipment(r);

useWriteOffReserveQuantity() += TRUE;
writeOffReserveQuantity(Sku sku, Bin bin) += WHEN sku IS Sku AND bin IS Bin AND useWriteOffReserveQuantity() THEN currentBalanceWithoutBatch(sku, bin);

writeOffReserveBatch 'Списать' (CustomUser u) {
    NEWSESSION NESTED(select[Batch, Bin], dataReceivingBin[CustomUser]) {
        select(Batch batch, Bin bin) <- NULL WHERE select(batch, bin) AND NOT (currentBalance(batch, bin) AND binGroup2(bin)==binGroup2(receivingBin(u)) AND orderLedger(bin));
        IF NOT (GROUP MAX select(Batch batch, Bin bin)) THEN {
            select(Batch batch, Bin bin) <- TRUE WHERE currentBalance(batch, bin) AND binGroup2(bin)==binGroup2(receivingBin(u)) AND orderLedger(bin);
        }
        IF NOT (GROUP MAX select(Batch batch, Bin bin)) THEN {
            MESSAGE 'Нечего размещать';
            RETURN;
        }
        IF NOT putawayWriteOffOperation() THEN {
            MESSAGE 'Не задана \'Операция списания при размещении\' в настройках';
            RETURN;
        }        
        FOR (GROUP MAX select(Batch batch, Bin bin) IF currentBalance(batch, bin) AND binGroup2(bin)==binGroup2(receivingBin(u)) AND orderLedger(bin)) NEW o = UserBinTransfer DO {
            operation(o) <- putawayWriteOffOperation();
            date(o) <- currentDate();
            time(o) <- currentTime();
            stock(o) <- stock(receivingBin(u));
            FOR select(Batch batch, Bin bin) AND currentBalance(batch, bin) AND binGroup2(bin)==binGroup2(receivingBin(u)) AND orderLedger(bin) NEW d = UserBinTransferDetail DO {
                userBinTransfer(d) <- o;
                sku(d) <- sku(batch);
                batch(d) <- batch;
                outBin(d) <- bin;
                inBin(d) <- NULL;
                quantity(d) <- currentBalance(batch, bin);
            }
            DIALOG userBinTransfer OBJECTS o=o MANAGESESSION DO {
                select(Batch batch, Bin bin) <- NULL;
            }
        }
    }
}

EXTEND FORM receiving
    PROPERTIES(d) READONLY BACKGROUND RGB(255, 224, 255) idBatch, nameBatch 

    OBJECTS bt = Batch
    PROPERTIES(bt) select
    PROPERTIES(bt) READONLY nameSku, idBarcodeSku, overConsolidationKey, name, expiryDate
    PROPERTIES READONLY currentBalanceBatch 'Текущий остаток в ячейке' = currentBalance(bt, receivingBin(u))
    PROPERTIES putawayBatch(u) SHOWIF in(u, putawayExternalOperation()) DRAW bt PANEL TOOLBAR
    FILTERS currentBalance(bt, receivingBin(u))

    PROPERTIES READONLY currentBalanceWithoutBatch(rs, rb)
    FILTERS currentBalanceWithoutBatch(rs, rb)

    OBJECTS reserveB = (rsb=Batch, rbb=Bin)
    PROPERTIES select(rsb, rbb)
    PROPERTIES READONLY nameSku(rsb), idBarcodeSku(rsb), overConsolidationKey(rsb), name(rsb), expiryDate(rsb),
        order(rbb), canonicalId(rbb), name(rbb), currentBalance(rsb, rbb)
    ORDERS nameSku(rsb), order(rbb)
    
    PROPERTIES putawayReserveBatch(u) SHOWIF in(u, putawayExternalOperation()) DRAW reserveB PANEL TOOLBAR
    PROPERTIES writeOffReserveBatch(u) SHOWIF in(u, putawayWriteOffOperation()) DRAW reserveB PANEL TOOLBAR
    FILTERS currentBalance(rsb, rbb),
        binGroup2(rbb)==binGroup2(receivingBin(u)),
        orderLedger(rbb)

    OBJECTS putawayBatch = BinTransferDetail
    PROPERTIES(putawayBatch) READONLY dateTime, idBarcodeSku, nameSku, canonicalIdInBin, canonicalIdOutBin, quantity
    FILTERS dFrom<=date(putawayBatch) AND dTo>=date(putawayBatch),
        accessCompany(u, inBin(putawayBatch)),
        outBin(putawayBatch) = receivingBin(u),
        operation(putawayBatch) = putawayExternalOperation()
;

DESIGN receiving {
    tabContainer{
        putaway{
            REMOVE BOX(s);
            MOVE BOX(bt);
        }
        stocked{
            REMOVE BOX(putawaySku);
            MOVE BOX(putawayBatch);
        }
        BOX(reserve) {
            caption = 'Брак/резерв (БЕЗ партии)';
            REMOVE PROPERTY(putawayReserve(u));
            PROPERTY(currentBalance(rs, rb)){hide=TRUE;}
        }
        MOVE BOX(reserveB) BEFORE BOX(reserve){
            caption = 'Брак/резерв (партии)';
        }
    }
}

EXTEND FORM receiving
    FILTERS createShipment(invoice)
;

FORM internalPutaway 'Размещение по группе ячеек'
    OBJECTS u=CustomUser PANEL
    PROPERTIES(u) READONLY name
    PROPERTIES(u) nameReceivingBin, nameBinGroup2ReceivingBin READONLY
    FILTERS u=currentUser()

    OBJECTS bt = Batch
    PROPERTIES(bt) select
    PROPERTIES(bt) READONLY nameSku, idBarcodeSku, name, expiryDate
    PROPERTIES READONLY currentBalanceBatch 'Текущий остаток в ячейке' = currentBalance(bt, receivingBin(u))
    PROPERTIES internalBatchPutaway(u) SHOWIF in(u, putawayInternalOperation()) DRAW bt PANEL TOOLBAR
    FILTERS currentBalance(bt, receivingBin(u))

    OBJECTS putawayBatch = BinTransferDetail
    PROPERTIES(putawayBatch) READONLY dateTime, idBarcodeSku, nameSku, canonicalIdInBin, canonicalIdOutBin
    PROPERTIES READONLY currentBalancePB 'Текущий остаток в ячейке' = currentBalance(batch(putawayBatch), inBin(putawayBatch))
    FILTERS currentBalance(batch(putawayBatch),
        inBin(putawayBatch)),
        accessCompany(u, inBin(putawayBatch)),
        outBin(putawayBatch) = receivingBin(u),
        operation(putawayBatch) = putawayInternalOperation()
;

DESIGN internalPutaway {
    MOVE BOX(u){
        PROPERTY(name(u)) {
            font = 'bold 24';
            panelCaptionVertical = TRUE;
            focusable = FALSE;
            charWidth = 30;
        }
        PROPERTY(nameReceivingBin(u)) {
            font = 'bold 24';
            panelCaptionVertical = TRUE;
            charWidth = 30;
        }
        PROPERTY(nameBinGroup2ReceivingBin(u)) {
            font = 'bold 24';
            panelCaptionVertical = TRUE;
            charWidth = 30;
        }
    }
    NEW tabContainer {
        tabbed = TRUE;
        fill = 1;
        NEW putaway {
            caption = 'Размещение';
            MOVE BOX(bt);
        }
        NEW stocked {
            caption = 'Размещенные';
            MOVE BOX(putawayBatch);
        }

    }
    MOVE TOOLBARBOX;
}

NAVIGATOR {
    WMSDashboardNavigator {
        NEW internalPutaway;
    }
}

CONSTRAINT userReceiving(Invoice invoice) IS UserReceiving AND (NOT createShipment(invoice))
    MESSAGE 'Для накладной приемки не задана поставка';

diffCompleted 'Разница между обработанным количеством и количеством в документе прихода'(Sku s, STRING str, Receiving r) =
    expectedQuantity(s, str, r) (-) quantityCompleted(s, str, r);

countInvoiceDetail(Receiving r, CreditNote c) = [GROUP SUM 1 BY receiving(invoice(invoiceDetail(CreditNoteDetail d))), creditNote(d)](r, c);

quantityCreditNote 'Кол-во в актах расхождений' (Sku s, STRING str, Receiving r) =
    [GROUP SUM quantity(CreditNoteDetail d) BY sku(d), overConsolidationKey(d), receiving(invoice(invoiceDetail(d)))](s, str, r);

diffInvoiceCreditNoteCompleted 'Разница между обработанным количеством и количеством в документе прихода с учетом актов расхождений'(Sku s, STRING str, Receiving r) =
    diffCompleted(s, str, r) (-) quantityCreditNote(s, str, r);

createCreditNote 'Создать акт расхождения' (Receiving r) {
    IF (GROUP MAX diffInvoiceCreditNoteCompleted(Sku s, STRING str, r) IF diffInvoiceCreditNoteCompleted(s, str, r) IS NUMERIC[16,5] AND NOT expectedQuantity(s, str, r)) THEN {
        MESSAGE 'Для товаров с расхождением \n' +
            [GROUP CONCAT (CONCAT '; ', 'Наименование: ' + name(Sku s), 'Код: ' + id(s), 'Штрихкод: ' + idBarcode(s), 'Серия лекарственного средства: ' + STRING str)
                IF diffInvoiceCreditNoteCompleted(s, str, Receiving r1) AND NOT expectedQuantity(s, str, r1), '\n' ORDER s, str BY r1](r)
            + '\n не будут созданы строки акта расхождения, тк. данных товаров-серия нет в приходном документе';
    }
    IF  (GROUP MAX diffInvoiceCreditNoteCompleted(Sku s, STRING str, r) IF expectedQuantity(s, str, r)) THEN NEWSESSION {
        FOR receiving(Invoice i) = r
            AND [GROUP MAX diffInvoiceCreditNoteCompleted(sku(InvoiceDetail d), overConsolidationKey(d), receiving(invoice(d))) IF expectedQuantity(sku(d), overConsolidationKey(d), receiving(invoice(d))) BY invoice(d)](i)
            AND NOT userCreditNote(CONCAT '_', 'I', seriesNumber(i), date(i), idSupplierStock(i), idCustomerStock(i))
            DO NEW c = UserCreditNote {
            id(c) <- CONCAT '_', 'I', seriesNumber(i), date(i), idSupplierStock(i), idCustomerStock(i);
            operation(c) <- operation(i);
            executeLocalEvents('Purchase.userCreditNote');
            supplier(c) <- supplier(r);
            supplierStock(c) <- supplierStock(r);
            customer(c) <- customer(r);
            customerStock(c) <- customerStock(r);
            date(c) <- currentDate();
            time(c) <- currentTime();
            isPosted(c) <- TRUE;
        }

        FOR diffInvoiceCreditNoteCompleted(Sku s, STRING str, r) AND expectedQuantity(s, str, r)
            AND InvoiceDetail d = [GROUP MAX InvoiceDetail d1 BY sku(d1), overConsolidationKey(d1), receiving(invoice(d1))](s, str, r)
            AND UserCreditNote c = userCreditNote(CONCAT '_', 'I', seriesNumber(d), date(d), idSupplierStock(invoice(d)), idCustomerStock(invoice(d)))
            AND NOT [GROUP MAX UserCreditNoteDetail dc1 BY creditNote(dc1), invoiceDetail(dc1)](c, d)
            DO NEW dc = UserCreditNoteDetail {
            userCreditNote(dc) <- c;
            invoiceDetail(dc) <- d;
            batch(dc) <- overBatch(d);
            sku(dc) <- s;
            quantity (dc) <- diffInvoiceCreditNoteCompleted(s, str, r);
            VAT (dc) <- OVERRIDE VAT(d);
            valueVAT(dc) <- OVERRIDE valueVAT(d);
            price (dc) <- price(d);
            invoicePrice (dc) <- invoicePrice(d);
        }
        executeLocalEvents('Purchase.userCreditNote');
        APPLY;
    }
} TOOLBAR;

writeOffCreditNote 'Списать с добавлением (в) акт расхождения' (CustomUser u) {
    NEWSESSION NESTED(select[Batch, Bin], dataReceivingBin[CustomUser]) {
        select(Batch batch, Bin bin) <- NULL WHERE select(batch, bin) AND NOT (currentBalance(batch, bin) AND binGroup2(bin)==binGroup2(receivingBin(u)) AND orderLedger(bin));
        IF NOT (GROUP MAX select(Batch batch, Bin bin)) THEN {
            MESSAGE 'Ничего не выбрано';
            RETURN;
        }
        IF NOT putawayWriteOffOperation() THEN {
            MESSAGE 'Не задана \'Операция списания при размещении\' в настройках';
            RETURN;
        }
        FOR [GROUP MAX select(Batch batch, Bin bin) AND currentBalance(batch, bin) AND binGroup2(bin)==binGroup2(receivingBin(u))
            AND orderLedger(bin) BY invoice(invoiceDetail(batch))](Invoice i)
            AND NOT userCreditNote(CONCAT '_', 'I', seriesNumber(i), date(i), idSupplierStock(i), idCustomerStock(i)) DO NEW c = UserCreditNote {
            id(c) <- STRING[100](CONCAT '_', 'I', seriesNumber(i), date(i), idSupplierStock(i), idCustomerStock(i));
            operation(c) <- operation(i);
            supplier(c) <- supplier(i);
            supplierStock(c) <- supplierStock(i);
            customer(c) <- customer(i);
            customerStock(c) <- customerStock(i);
            date(c) <- currentDate();
            time(c) <- currentTime();
            isPosted(c) <- TRUE;
        }

        FOR select(Batch batch, Bin bin) AND currentBalance(batch, bin) AND binGroup2(bin)==binGroup2(receivingBin(u)) AND orderLedger(bin)
            AND InvoiceDetail d = invoiceDetail(batch)
            AND UserCreditNote c = userCreditNote(CONCAT '_', 'I', seriesNumber(d), date(d), id(supplierStock((d))), id(customerStock(d)))
            AND NOT [GROUP MAX UserCreditNoteDetail dc1 BY creditNote(dc1), invoiceDetail(dc1)](c, d)
            DO {
            NEW dc = UserCreditNoteDetail {
                userCreditNote(dc) <- c;
                invoiceDetail(dc) <- d;
                batch(dc) <- batch;
                sku(dc) <- sku(d);
                quantity (dc) <- currentBalance(batch, bin);
                VAT (dc) <- OVERRIDE VAT(d);
                valueVAT(dc) <- OVERRIDE valueVAT(d);
                price (dc) <- price(d);
                invoicePrice (dc) <- invoicePrice(d);
            }


        }
        executeLocalEvents('Purchase.userCreditNote');

        FOR (GROUP MAX select(Batch batch, Bin bin) AND currentBalance(batch, bin) AND binGroup2(bin)==binGroup2(receivingBin(u)) AND orderLedger(bin)
            AND userCreditNote(CONCAT '_', 'I', seriesNumber(invoiceDetail(batch)), date(invoiceDetail(batch)), id(supplierStock((invoiceDetail(batch)))), id(customerStock(invoiceDetail(batch)))))
            NEW o = UserBinTransfer DO {
            operation(o) <- putawayWriteOffOperation();
            date(o) <- currentDate();
            time(o) <- currentTime();
            stock(o) <- stock(receivingBin(u));
            isPosted(o) <- TRUE;
            FOR select(Batch batch, Bin bin) AND currentBalance(batch, bin) AND binGroup2(bin)==binGroup2(receivingBin(u)) AND orderLedger(bin)
                AND userCreditNote(CONCAT '_', 'I', seriesNumber(invoiceDetail(batch)), date(invoiceDetail(batch)), id(supplierStock((invoiceDetail(batch)))), id(customerStock(invoiceDetail(batch))))
                NEW d = UserBinTransferDetail DO {
                userBinTransfer(d) <- o;
                sku(d) <- sku(batch);
                batch(d) <- batch;
                outBin(d) <- bin;
                inBin(d) <- NULL;
                quantity(d) <- currentBalance(batch, bin);
            }
        }
        APPLY;
        select(Batch batch, Bin bin) <- NULL;
    }
} TOOLBAR;


quantityCreditNote 'Кол-во в актах расхождений' =
    GROUP SUM quantity(CreditNoteDetail d) BY sku(d), receiving(invoice(invoiceDetail(d)));

hasReceiving = GROUP SUM 1 BY receiving(invoice(invoiceDetail(CreditNoteDetail d))), creditNote(d);

descriptionCreditNotes 'Акты расхождения' =
    GROUP CONCAT seriesNumber(CreditNote creditNote) IF hasReceiving(Receiving receiving, creditNote), '; ' ORDER dateTime(creditNote), creditNote BY receiving;

EXTEND FORM receiving
    PROPERTIES READONLY descriptionCreditNotes(r) AFTER descriptionInvoices(r)
    PROPERTIES createCreditNote(r) SHOWIF (completeStatus(r) AND GROUP MAX diffInvoiceCreditNoteCompleted(Sku s1, STRING str, r)) DRAW srstr
    PROPERTIES writeOffCreditNote(u) DRAW reserveB SHOWIF in(u, putawayWriteOffOperation())
    PROPERTIES READONLY quantityCreditNote(sr1, str1, r)
    PROPERTIES READONLY quantityCreditNote(sr, r)

    OBJECTS c = CreditNote LAST
    PROPERTIES(c) READONLY BACKGROUND background(c) isClosed, isPosted, number, series, date, time, nameSupplier,
        nameSupplierStock, nameCustomer, nameCustomerStock, nameCurrency, seriesNumberContractSku, isCommission
    PROPERTIES(c) READONLY BACKGROUND background(c) countCreditNoteDetail, quantityCreditNoteDetail, sumCreditNoteDetail,
        VATSumCreditNoteDetail, invoiceSumCreditNoteDetail
    PROPERTIES(c) READONLY note
    PROPERTIES(c) EDIT

    PROPERTIES print(c)
;

DESIGN receiving {
    tabContainer {
        NEW creditNote {
            caption = 'Акты расхождений';
            MOVE BOX(c);
            NEW printContainer {
                caption = 'Печать';
                MOVE PROPERTY(print(c));
            }
        }
    }
}

hasInvoice = GROUP SUM 1 BY invoice(invoiceDetail(CreditNoteDetail d)), creditNote(d);

descriptionCreditNotes 'Акты расхождения' =
    GROUP CONCAT seriesNumber(CreditNote creditNote) IF hasInvoice(Invoice invoice, creditNote), '; ' ORDER dateTime(creditNote), creditNote BY invoice;

EXTEND FORM invoices
    PROPERTIES READONLY BACKGROUND RGB(255, 224, 255) descriptionCreditNotes(i) AFTER nameStatus(i)
;