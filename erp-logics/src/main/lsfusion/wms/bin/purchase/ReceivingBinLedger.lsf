MODULE ReceivingBinLedger;

REQUIRE EmployeeBin, PurchaseBinLedger, BinTransfer, BinSkuOrderLedger, WMSDashboard;

NAMESPACE Purchase;

CLASS ABSTRACT Receiving 'Приемка';

isClosed '{documents.is.closed}' = ABSTRACT BOOLEAN (Receiving) MATERIALIZED;
isOpened '{documents.is.opened}' (Receiving o) = o IS Receiving AND NOT isClosed(o) MATERIALIZED;
INDEX isOpened(Receiving o);

isPosted '{document.posted}' (o) = ABSTRACT BOOLEAN (Receiving) MATERIALIZED;
number '{numerator.number.numerator}' = ABSTRACT STRING[48] (Receiving) IN numbered MATERIALIZED CHARWIDTH 8;
series '{numerator.series.numerator}' = ABSTRACT BPSTRING[2] (Receiving) IN numbered MATERIALIZED CHARWIDTH 3 NOFLEX;
seriesNumber '{numerator.series.number.numerator}' (Receiving o) = CONCAT '', series(o), number(o) CHARWIDTH 7 INDEXED MATERIALIZED;
date '{document.date.of} {document.of.document}' = ABSTRACT DATE (Receiving) IN documentHeader MATERIALIZED INDEXED;
time '{document.time.of} {document.of.document}' = ABSTRACT TIME (Receiving) IN documentHeader MATERIALIZED;
dateTime '{document.date.time.of} {document.of.document}' (Receiving o) = dateTimeToDateTime(date(o), time(o)) MATERIALIZED;
supplier (invoice) = ABSTRACT LegalEntity (Receiving) MATERIALIZED INDEXED;
nameSupplier 'Поставщик' (Receiving receiving)= name(supplier(receiving)) IN documentPrm CHARWIDTH 20;
supplierStock = ABSTRACT Stock (Receiving) MATERIALIZED INDEXED;
nameSupplierStock 'Склад поставщика' (Receiving receiving) = name(supplierStock(receiving)) IN documentHeader CHARWIDTH 20;
customer (invoice) = ABSTRACT LegalEntity (Receiving) MATERIALIZED INDEXED;
nameCustomer 'Покупатель' (Receiving receiving)= name(customer(receiving)) IN documentPrm CHARWIDTH 20;
customerStock = ABSTRACT Stock (Receiving) MATERIALIZED INDEXED;
nameCustomerStock 'Склад покупателя' (Receiving receiving) = name(customerStock(receiving)) IN documentHeader CHARWIDTH 20;
background 'Цвет' (Receiving i)= ABSTRACT CASE COLOR (Receiving);

selected 'Отм.' = DATA LOCAL NESTED BOOLEAN (Receiving);

CLASS ReceivingStatus 'Статус' {
    new 'Новый',
    inWork 'В работе',
    completed 'Обработан'
}

FORM receivingStatus 'Статус'
    OBJECTS o = ReceivingStatus
    PROPERTIES(o) READONLY staticCaption

    LIST ReceivingStatus OBJECT o
;

status = DATA ReceivingStatus (Receiving);
nameStatus 'Статус' (Receiving r) = staticCaption(status(r)) IN documentPrm CHARWIDTH 8;

status (Receiving receiving) <- ReceivingStatus.new WHEN SET(receiving IS Receiving);

createdUser = DATA CustomUser (Receiving);
nameCreatedUser 'Сотрудник' (Receiving receiving) = name(createdUser(receiving)) CHARWIDTH 10;

inBin = DATA Bin (Receiving);
nameInBin 'Ячейка' (Receiving receiving) = canonicalId(inBin(receiving));

CLASS ReceivingDetail 'Строка приемки';

receiving = DATA Receiving (ReceivingDetail) INDEXED NONULL DELETE;

dataStatus = DATA ReceivingStatus (ReceivingDetail);
status (ReceivingDetail d) = OVERRIDE dataStatus(d), status(receiving(d)) MATERIALIZED;
nameStatus 'Статус' (ReceivingDetail d) = staticCaption(status(d)) IN documentPrm CHARWIDTH 8;

@defineDocumentDetailPosted(receiving);

@defineDocumentDetailClosed(receiving);

@defineDocumentDetailDataStockInner (receiving, receivingDetail, stock, Stock, supplierStock, 'Склад поставщика');

@defineDocumentDetailDataStockInner (receiving, receivingDetail, stock, Stock, customerStock, 'Склад покупателя');

@defineDocumentHeaderCount(receiving, ReceivingDetail);

@defineDocumentDetailIndex(receiving, ReceivingDetail);

@defineDocumentDetailSkuCustomPrefix(receivingDetail, sku, , );

idBarcode 'Штрихкод' = DATA STRING[15] (ReceivingDetail) IN id;

quantity '{document.quantity.of}' = DATA NUMERIC[16,5] (ReceivingDetail) CHARWIDTH 7;
receivingQuantity 'Принятое кол-во' = GROUP SUM quantity(ReceivingDetail detail) BY sku(detail), receiving(detail) MATERIALIZED CHARWIDTH 7;

changeQuantity(ReceivingDetail detail) {
    NEWSESSION {
        INPUT n = NUMERIC[16,5] DO {
            quantity(detail) <- n;
            APPLY;
        }
    }    
}

invoiceQuantity 'Кол-во документе прихода' = ABSTRACT NUMERIC[16,5] (Sku, Receiving) MATERIALIZED CHARWIDTH 7;

createdDateTime 'Время изменения' = DATA DATETIME (ReceivingDetail);
createdUser = DATA CustomUser (ReceivingDetail);
nameCreatedUser 'Сотрудник' (ReceivingDetail detail) = name(createdUser(detail)) CHARWIDTH 10;

WHEN SET(ReceivingDetail detail IS ReceivingDetail) DO {
    createdDateTime(detail) <- currentDateTime();
    createdUser(detail) <- currentUser();    
}

WHEN CHANGED(quantity(ReceivingDetail detail)) DO {
    createdDateTime(detail) <- currentDateTime();
    createdUser(detail) <- currentUser();
}

@defineDocumentHeaderDescription(Receiving, 'Приемка');

@defineDocumentDetailDescription(receiving, ReceivingDetail);

dataInBin = DATA Bin (ReceivingDetail);
inBin(ReceivingDetail detail) = OVERRIDE dataInBin(detail), inBin(receiving(detail));
nameInBin 'Ячейка' (ReceivingDetail detail) = canonicalId(inBin(detail));

dateTime(ReceivingDetail detail) = createdDateTime(detail);

idBarcodeLocal 'Штрихкод' = DATA LOCAL STRING[15] (Receiving);
skuLocal = DATA LOCAL Sku (Receiving);
nameSkuLocal 'Товар' (Receiving r)= name(skuLocal(r));
quantityLocal 'Кол-во' = DATA LOCAL NUMERIC[16,5] (Receiving);

expiryDate 'Срок годности' = DATA DATE (ReceivingDetail) CHARWIDTH 7;

overChangeBarcodeLocal ABSTRACT LIST (Receiving);

changeBarcodeLocal(Receiving r) {
    INPUT s=STRING[15] DO {
        IF skuBarcode(s, currentDate()) THEN {
            idBarcodeLocal(r) <- s;
            skuLocal(r) <- skuBarcode(s, currentDate());
            quantityLocal(r) <- NULL;
            overChangeBarcodeLocal(r);            
        } ELSE {
            MESSAGE 'Штрихкод не найден';
        }    
    }
}

CONSTRAINT DROPPED(Receiving r IS Receiving) AND PREV(countReceivingDetail(r))
    MESSAGE 'Нельзя удалять приемку с существующими строками, удалите строки перед удалением документа';

overCopy(ReceivingDetail newD, ReceivingDetail oldD) ABSTRACT LIST;
copy 'Копировать'(ReceivingDetail detail)  {
    NEWSESSION NEW d = ReceivingDetail {
        receiving(d) <- receiving(detail);
        sku(d) <- sku(detail);
        idBarcode(d) <- idBarcode(detail);
        expiryDate(d) <- expiryDate(detail);
        overCopy(d,detail);
        APPLY;
    }
} CHANGEKEY 'F6' TOOLBAR;

FORM addReceivingDetail 'Приемка'
    OBJECTS r=Receiving PANEL 
    PROPERTIES idBarcodeLocal(r) ON CHANGE changeBarcodeLocal(r) EVENTID 'SCANNER', nameSkuLocal(r), quantityLocal(r)
;

DESIGN addReceivingDetail {
    OBJECTS {
        NEW propHorizontalContainer {
            horizontal = TRUE;
            MOVE PROPERTY(idBarcodeLocal(r)) {
                font = 'bold 24';
                panelCaptionVertical = TRUE;
                charWidth = 15;
            }
            MOVE PROPERTY(nameSkuLocal(r)) {
                font = 'bold 24';
                panelCaptionVertical = TRUE;
                charWidth = 10;
            }
            MOVE PROPERTY(quantityLocal(r)) {
                font = 'bold 24';
                panelCaptionVertical = TRUE;
                charWidth = 5;
            }
        }
    }
}
 
overAddReceivingDetail ABSTRACT LIST (Receiving, ReceivingDetail);

WHEN LOCAL FORMS addReceivingDetail SET(skuLocal(Receiving r) AND quantityLocal(r)) DO {
    NEWSESSION NESTED (idBarcodeLocal, skuLocal, quantityLocal) {
        NEW detail=ReceivingDetail {
            receiving(detail) <- r;
            idBarcode(detail) <- idBarcodeLocal(r);
            sku(detail) <- skuLocal(r);
            quantity(detail) <- quantityLocal(r);
            overAddReceivingDetail(r, detail);
        } 
        APPLY NESTED LOCAL ;
    }
}

overNewReceivingDetail ABSTRACT LIST (Receiving);

newReceivingDetail 'Добавить' (Receiving r) {
    idBarcodeLocal(r) <- NULL;
    skuLocal(r) <- NULL;
    quantityLocal(r) <- NULL;
    overNewReceivingDetail(r);
    SHOW addReceivingDetail OBJECTS r=r; 
} IMAGE 'add.png';

@defineBinAttribute(receiving, 'Приемка');

EXTEND CLASS ReceivingType {
    detailed 'С детализацией'
}

defaultReceivingBin = DATA Bin (Employee, Stock);
nameDefaultReceivingBin 'Ячейка для приемки' (Employee employee, Stock stock) = canonicalId(defaultReceivingBin(employee, stock)) CHARWIDTH 10;

CONSTRAINT defaultReceivingBin(Employee employee, Stock stock) AND NOT stock(defaultReceivingBin(employee, stock)) == stock
    CHECKED BY defaultReceivingBin[Employee, Stock] MESSAGE 'Ячейка задана для другого склада';

CONSTRAINT defaultReceivingBin(Employee employee, Stock stock) AND NOT accessCompany(employee, stock)
    CHECKED BY defaultReceivingBin[Employee, Stock] MESSAGE 'Нет доступа к складу ячейки';

CONSTRAINT defaultReceivingBin(Employee employee, Stock stock) AND NOT receiving(defaultReceivingBin(employee, stock))
    CHECKED BY defaultReceivingBin[Employee, Stock] MESSAGE 'Выбранная ячейка не предназначена для приемки';

EXTEND FORM employee
    PROPERTIES(e, s) nameDefaultReceivingBin
;

dataReceivingBin = DATA LOCAL NESTED Bin (CustomUser);
receivingBin (CustomUser u) = OVERRIDE dataReceivingBin(u), (GROUP MAX defaultReceivingBin(u, Stock stock));
nameReceivingBin 'Ячейка(приемка)' (CustomUser u) = canonicalId(receivingBin(u)) CHARWIDTH 10;

nameBinGroup2ReceivingBin 'Зона ячейки' (CustomUser u) = nameBinGroup2(receivingBin(u)) CHARWIDTH 10;

CONSTRAINT LOCAL dataReceivingBin(CustomUser u) AND NOT accessCompany(u, stock(dataReceivingBin(u)))
    CHECKED BY dataReceivingBin[CustomUser] MESSAGE 'Нет доступа к складу ячейки';

CONSTRAINT LOCAL dataReceivingBin(CustomUser u) AND NOT receiving(dataReceivingBin(u))
    CHECKED BY dataReceivingBin[CustomUser] MESSAGE 'Выбранная ячейка не предназначена для приемки';

takeToWork 'Взять в работу' (Receiving receiving) {
    NEWSESSION {
        createdUser(receiving) <- currentUser();
        status(receiving) <- ReceivingStatus.inWork;
        inBin(receiving) <- receivingBin(currentUser());
        APPLY;
    }
}

overCompleteWork ABSTRACT LIST (Receiving);
completeWork 'Завершить приёмку' (Receiving receiving) {
    NEWSESSION {
        ASK 'Вы уверены, что хотите завершить приёмку всего документа?' DO {
            IF (GROUP SUM 1 IF receiving(ReceivingDetail d)==receiving AND NOT inBin(d)) THEN {
                MESSAGE 'Нельзя завершить работу со строками приемки у которых не заполнены ячейки';
                CANCEL;
            }
            status(receiving) <- ReceivingStatus.completed;
            overCompleteWork(receiving);
            APPLY;            
        }
    }
}

createDetails 'Создать строки по документу основания' ABSTRACT CASE (Receiving);

placementBin  = GROUP LAST Bin bin IF storage(bin) AND NOT prevCurrentBalance(bin) ORDER DESC name(bin), bin BY stock(bin);
placementBin  = GROUP LAST Bin bin IF storage(bin) AND NOT prevCurrentBalance(bin) AND in(Sku sku, bin) ORDER DESC name(bin), bin BY sku, stock(bin);
placementBinNoUseBalance  = GROUP LAST Bin bin IF storage(bin) AND in(Sku sku, bin) ORDER DESC name(bin), bin BY sku, stock(bin);

noUseBalanceForPlacement 'Не учитывать остаток ячейки при размещении' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES() noUseBalanceForPlacement
;

DESIGN options {
    receiving {
        MOVE PROPERTY(noUseBalanceForPlacement());
    }
}

placementBinOver (Sku sku, Stock stock) = OVERRIDE placementBin(sku, stock), placementBin(stock) IF sku IS Sku, placementBinNoUseBalance(sku, stock) IF noUseBalanceForPlacement();

placement 'Разместить' (CustomUser u) {
    NEWSESSION NESTED(select[Sku], dataReceivingBin[CustomUser]) {
        IF NOT (GROUP MAX select(Sku sku)) THEN {
            select(Sku sku) <- TRUE WHERE currentBalance(sku, receivingBin(u));
        }
        IF NOT (GROUP MAX select(Sku sku)) THEN {
            MESSAGE 'Нечего размещать';
            RETURN;
        }
        IF NOT (GROUP MAX Bin bin IF storage(bin) AND stock(bin)==stock(receivingBin(u))) THEN {
            MESSAGE 'Для склада размещения нет ячеек хранения';
            RETURN;
        }
        FOR (GROUP MAX select(Sku sku) AND currentBalance(sku, receivingBin(u))) NEW o = UserBinTransfer DO {
            operation(o) <- (OVERRIDE Bin.defaultOperation(u) IF Bin.countOperations(u) == 1, defaultBinOperation());
            date(o) <- currentDate();
            time(o) <- currentTime();
            stock(o) <- stock(receivingBin(u));
            FOR select(Sku sku) AND currentBalance(sku, receivingBin(u)) NEW d = UserBinTransferDetail DO {
                userBinTransfer(d) <- o;
                sku(d) <- sku;
                outBin(d) <- receivingBin(u);
                dataSkipSetOutBin(d) <- TRUE;
                inBin(d) <- placementBinOver(sku, stock(receivingBin(u)));
                dataSkipSetInBin(d) <- TRUE;
                quantity(d) <- currentBalance(sku, receivingBin(u));
            }
            DIALOG userBinTransfer OBJECTS o=o MANAGESESSION DO {
                select(Sku sku) <- NULL;    
            }
        }
    }    
}

placementReserve 'Разместить' (CustomUser u) {
    NEWSESSION NESTED(select[Sku], dataReceivingBin[CustomUser]) {
        IF NOT (GROUP MAX select(Sku sku)) THEN {
            select(Sku sku) <- TRUE WHERE (GROUP SUM currentBalance(sku, Bin bin) IF binGroup2(bin)==binGroup2(receivingBin(u)) AND orderLedger(bin));
        }
        IF NOT (GROUP MAX select(Sku sku)) THEN {
            MESSAGE 'Нечего размещать';
            RETURN;
        }
        IF NOT (GROUP MAX Bin bin IF storage(bin) AND stock(bin)==stock(receivingBin(u))) THEN {
            MESSAGE 'Для склада размещения нет ячеек хранения';
            RETURN;
        }
        FOR (GROUP MAX select(Sku sku) AND currentBalance(sku, Bin bin) AND binGroup2(bin)==binGroup2(receivingBin(u))) NEW o = UserBinTransfer DO {
            operation(o) <- (OVERRIDE Bin.defaultOperation(u) IF Bin.countOperations(u) == 1, defaultBinOperation());
            date(o) <- currentDate();
            time(o) <- currentTime();
            stock(o) <- stock(receivingBin(u));
            FOR select(Sku sku) AND currentBalance(sku, Bin bin) AND binGroup2(bin)==binGroup2(receivingBin(u)) AND orderLedger(bin) NEW d = UserBinTransferDetail DO {
                userBinTransfer(d) <- o;
                sku(d) <- sku;
                outBin(d) <- bin;
                dataSkipSetOutBin(d) <- TRUE;
                inBin(d) <- placementBinOver(sku, stock(receivingBin(u)));
                dataSkipSetInBin(d) <- TRUE;
                quantity(d) <- currentBalance(sku, bin);
            }
            DIALOG userBinTransfer OBJECTS o=o MANAGESESSION DO {
                select(Sku sku) <- NULL;
            }
        }
    }
}

useWriteOffReserveQuantity = ABSTRACT BOOLEAN ();
writeOffReserveQuantity 'Кол-во к списанию' = ABSTRACT CASE NUMERIC[16,5] (Sku, Bin);
writeOffReserveQuantity(Sku sku, Bin bin) += WHEN sku IS Sku AND bin IS Bin AND NOT useWriteOffReserveQuantity() THEN currentBalance(sku, bin);

writeOffReserve 'Списать' (CustomUser u) {
    NEWSESSION NESTED(select[Sku], dataReceivingBin[CustomUser]) {
        IF NOT (GROUP MAX select(Sku sku)) THEN {
            select(Sku sku) <- TRUE WHERE (GROUP SUM writeOffReserveQuantity(sku, Bin bin) IF binGroup2(bin)==binGroup2(receivingBin(u)) AND orderLedger(bin));
        }
        IF NOT (GROUP MAX select(Sku sku)) THEN {
            MESSAGE 'Нечего размещать';
            RETURN;
        }
        IF NOT (GROUP MAX Bin bin IF storage(bin) AND stock(bin)==stock(receivingBin(u))) THEN {
            MESSAGE 'Для склада размещения нет ячеек хранения';
            RETURN;
        }
        FOR (GROUP MAX select(Sku sku) AND writeOffReserveQuantity(sku, Bin bin) AND binGroup2(bin)==binGroup2(receivingBin(u)) AND orderLedger(bin)) NEW o = UserBinTransfer DO {
            operation(o) <- (OVERRIDE Bin.defaultOperation(u) IF Bin.countOperations(u) == 1, defaultBinOperation());
            date(o) <- currentDate();
            time(o) <- currentTime();
            stock(o) <- stock(receivingBin(u));
            FOR select(Sku sku) AND writeOffReserveQuantity(sku, Bin bin) AND binGroup2(bin)==binGroup2(receivingBin(u)) AND orderLedger(bin) NEW d = UserBinTransferDetail DO {
                userBinTransfer(d) <- o;
                sku(d) <- sku;
                outBin(d) <- bin;
                dataSkipSetOutBin(d) <- TRUE;
                inBin(d) <- NULL;
                dataSkipSetInBin(d) <- TRUE;
                quantity(d) <- writeOffReserveQuantity(sku, bin);
            }
            DIALOG userBinTransfer OBJECTS o=o MANAGESESSION DO {
                select(Sku sku) <- NULL;
            }
        }
    }
}

changeDataInBin(ReceivingDetail d, CustomUser u) {
    NEWSESSION {
        DIALOG dialogBins OBJECTS s = inBin(d) INPUT LIST canonicalId(s) 
            FILTERS isParent(sg, binGroup2(receivingBin(u))) OR isParent(binGroup2(receivingBin(u)), sg), isParent(binGroup2(receivingBin(u)), s) DO {
            dataInBin(d) <- s;
            APPLY;
        }
    }
}

FORM receiving 'Приемка'
    OBJECTS u=CustomUser PANEL 
    PROPERTIES(u) READONLY name
    PROPERTIES(u) nameReceivingBin, nameBinGroup2ReceivingBin READONLY
    FILTERS u=currentUser()
    
    OBJECTS r=Receiving
    PROPERTIES(r) selected
    PROPERTIES(r) READONLY BACKGROUND RGB(255, 224, 255) nameStatus
    PROPERTIES(r) READONLY BACKGROUND background(r) nameCreatedUser, isClosed, isPosted, number, series, 
                                                    date, time, nameSupplier, nameSupplierStock, nameCustomer, nameCustomerStock
    PROPERTIES(r) PANEL TOOLBAR takeToWork SHOWIF status(r)==ReceivingStatus.new, createDetails SHOWIF status(r)==ReceivingStatus.inWork,
                                completeWork SHOWIF status(r)==ReceivingStatus.inWork
    FILTERS stock(receivingBin(u)) == customerStock(r),
            isOpened(r),
            isPosted(r)
    
    OBJECTS d=ReceivingDetail
    PROPERTIES(d) READONLY BACKGROUND RGB(255, 224, 255) nameStatus
    PROPERTIES(d) READONLY index, idSku SHOWIF showIDs(), idBarcode, nameSku, shortNameUOMSku, createdDateTime, nameCreatedUser
    PROPERTIES(d) quantity BACKGROUND RGB(255, 224, 255) ON CHANGE changeQuantity(d) READONLYIF NOT status(d)==ReceivingStatus.inWork,
                  nameInBin BACKGROUND RGB(255, 224, 255) ON CHANGE changeDataInBin(d, u) READONLYIF NOT status(d)==ReceivingStatus.inWork
    PROPERTIES newReceivingDetail(r) DRAW d PANEL TOOLBAR SHOWIF status(r)==ReceivingStatus.inWork
    PROPERTIES(d) NEWSESSION DELETE SHOWIF status(r)==ReceivingStatus.inWork
    PROPERTIES(d) copy PANEL TOOLBAR SHOWIF status(r)==ReceivingStatus.inWork
    FILTERS receiving(d)==r
    FILTERGROUP inWork
        FILTER 'В работе' status(d)==ReceivingStatus.inWork

    OBJECTS sr=Sku
    PROPERTIES(sr) READONLY idBarcode, name, shortNameUOM
    PROPERTIES(sr, r) READONLY invoiceQuantity BACKGROUND RGB(212,255,212), receivingQuantity BACKGROUND RGB(255, 224, 255)
    FILTERS invoiceQuantity(sr, r) OR receivingQuantity(sr, r)

    OBJECTS s = Sku
    PROPERTIES(s) select
    PROPERTIES(s) READONLY name, idBarcode
    PROPERTIES READONLY currentBalance 'Текущий остаток в ячейке' = currentBalance(s, receivingBin(u))
    PROPERTIES placement(u) DRAW s PANEL TOOLBAR
    FILTERS currentBalance(s, receivingBin(u))  
    
    OBJECTS reserve = (rs=Sku, rb=Bin)
    PROPERTIES select(rs)
    PROPERTIES READONLY name(rs), idBarcode(rs), canonicalId(rb), name(rb), currentBalance(rs, rb)
    PROPERTIES placementReserve(u) DRAW reserve PANEL TOOLBAR
    PROPERTIES writeOffReserve(u) DRAW reserve PANEL TOOLBAR
    FILTERS currentBalance(rs, rb),
            binGroup2(rb)==binGroup2(receivingBin(u)),
            orderLedger(rb)

    OBJECTS placeSku = BinTransferDetail
    PROPERTIES(placeSku) READONLY dateTime, idBarcodeSku, nameSku, canonicalIdInBin, canonicalIdOutBin
    PROPERTIES READONLY currentBalancePS 'Текущий остаток в ячейке' = currentBalance(sku(placeSku), outBin(placeSku))
    FILTERS currentBalance(sku(placeSku), outBin(placeSku)), accessCompany(u, outBin(placeSku)), inBin(placeSku) = receivingBin(u), operation(placeSku) = Bin.operation('extrnal')
;

DESIGN receiving {
    MOVE BOX(u){
        PROPERTY(name(u)) {
            font = 'bold 24';
            panelCaptionVertical = TRUE;
            focusable = FALSE;
            charWidth = 30;
        }
        PROPERTY(nameReceivingBin(u)) {
            font = 'bold 24';
            panelCaptionVertical = TRUE;
            charWidth = 30;
        }
        PROPERTY(nameBinGroup2ReceivingBin(u)) {
            font = 'bold 24';
            panelCaptionVertical = TRUE;
            charWidth = 30;
        }
    }
    NEW tabContainer {
        tabbed = TRUE;
        fill = 1;
        NEW receiving {
            caption = 'Приемка';
            MOVE BOX(r);
            NEW tabReceivingContainer {
                tabbed = TRUE;
                fill = 2;
                MOVE BOX(d);
                MOVE BOX(sr) {caption = 'Группировка';}
            }
        }    
        NEW placement {
            caption = 'Размещение';
            NEW tabPlacement {
                tabbed = TRUE;
                fill = 1;
                NEW newPlacement {
                    caption = 'Размещение';
                    MOVE BOX(s);
                }
                NEW oldPlacement {
                    caption = 'Размещенные';
                    MOVE BOX(placeSku);
                }
            }
        }
        
        MOVE BOX(reserve) {
            caption = 'Брак/резерв';
        }

        MOVE BOX(placeSku) {
            caption = 'Размещенные';
        }
        
    }    
    MOVE TOOLBARBOX;
}

NAVIGATOR {
    WMSDashboardNavigator {
        NEW receiving;
    }
}

CLASS UserReceiving : Receiving;
TABLE userReceiving (UserReceiving);

@defineDocumentHeaderTimePrefix(UserReceiving, , ' {document.of.document}');

@deriveDocumentHeaderTimePrefix(UserReceiving, );

@defineDocumentHeaderNumber(UserReceiving, BPSTRING[2]);

@defineNumeratedDefault(UserReceiving, 'Приемка', 'ПР');

@defineDocumentHeaderLegalEntity(userReceiving, supplier, 'Поставщик');
@defineDocumentHeaderLegalEntity(userReceiving, customer, 'Покупатель');

@defineDocumentHeaderStock (userReceiving, stock, 'Склад поставщика', supplier);
@defineDocumentHeaderStock (userReceiving, stock, 'Склад покупателя', customer);

//@defineDocumentHeaderPosted(UserReceiving)

@defineDocumentHeaderClosed(UserReceiving);

isPosted(UserReceiving receiving) += receiving IS UserReceiving;
isClosed(UserReceiving receiving) += isClosed(receiving);
number(UserReceiving receiving) += number(receiving);
series(UserReceiving receiving) += series(receiving);
date(UserReceiving receiving) += date(receiving);
time(UserReceiving receiving) += time(receiving);
supplier(UserReceiving receiving) += supplier(receiving);
supplierStock(UserReceiving receiving) += supplierStock(receiving);
customer(UserReceiving receiving) += customer(receiving);
customerStock(UserReceiving receiving) += customerStock(receiving);
quantity = ABSTRACT NUMERIC[16,5] (Sku, UserReceiving);
invoiceQuantity(Sku sku, UserReceiving receiving) += quantity(sku, receiving);

META defineUserReceiving(primObject, captionObject, captionObjects, formObject)
    userReceiving = DATA UserReceiving(###primObject);
    
    quantity (Sku s, UserReceiving r) += [GROUP SUM quantity(###primObject##Detail detail) BY sku(detail), userReceiving(##primObject(detail))](s, r);
    
    count###primObject(UserReceiving userReceiving) = GROUP SUM 1 IF userReceiving(###primObject primObject) = userReceiving;
    
    description###primObject##s ###captionObjects (UserReceiving userReceiving) = [GROUP CONCAT seriesNumber(###primObject primObject), '; ' ORDER dateTime(primObject), primObject BY userReceiving(primObject)](userReceiving);
    
    selectedUserReceiving 'Отм' = DATA LOCAL BOOLEAN (###primObject);

    in(UserReceiving o, ###primObject primObject) = userReceiving(primObject) == o;

    countToUserReceiving###primObject() = GROUP SUM 1 IF selectedUserReceiving(###primObject primObject) AND NOT userReceiving(primObject);
        
    CONSTRAINT userReceiving(###primObject primObject) IS UserReceiving AND NOT supplierStock(userReceiving(primObject)) = supplierStock(primObject)
        MESSAGE 'Несовпадение склада поставщика в '##captionObject + ' и документе приемки';

    CONSTRAINT userReceiving(###primObject primObject) IS UserReceiving AND NOT supplierStock(userReceiving(primObject)) = supplierStock(primObject)
        MESSAGE 'Несовпадение склада получателя в '##captionObject + ' и документе приемки';

    @defineOperationProperty(use###primObject##Receiving, 'Использовать механизм "Приемка"', paramsContainer);
        
    createUserReceivingFor###primObject 'Создать документ приемки' () {
        LOCAL newReceiving = UserReceiving();
        NEWSESSION NESTED (selectedUserReceiving[###primObject], newReceiving) {
            IF countToUserReceiving###primObject() THEN NEW r = UserReceiving {
                supplier(r) <- GROUP MAX supplier(###primObject primObject) IF selectedUserReceiving(primObject);
                supplierStock(r) <- GROUP MAX supplierStock(###primObject primObject) IF selectedUserReceiving(primObject);
                customer(r) <- GROUP MAX customer(###primObject primObject) IF selectedUserReceiving(primObject);
                customerStock(r) <- GROUP MAX customerStock(###primObject primObject) IF selectedUserReceiving(primObject);
                userReceiving(###primObject primObject) <- r WHERE selectedUserReceiving(primObject) AND NOT userReceiving(primObject);
                APPLY;
                newReceiving() <- r;
            }
        }
        IF newReceiving() IS UserReceiving THEN {
            ACTIVATE TAB receiving.receiving;
            SEEK receiving.r = newReceiving();
            ACTIVATE PROPERTY receiving.number(r);
            newReceiving() <- NULL;
        }
    } TOOLBAR;
    
    EXTEND FORM receiving
        PROPERTIES(r) description###primObject##s
        OBJECTS primObject = ###primObject
        PROPERTIES(primObject) selectedUserReceiving
        PROPERTIES(primObject) READONLY isPosted, isClosed, number, series, dateTime, nameSupplier, nameSupplierStock, nameCustomer, nameCustomerStock
        PROPERTIES createUserReceivingFor###primObject() SHOWIF countToUserReceiving###primObject() DRAW primObject
        ORDERS dateTime(primObject), nameSupplierStock(primObject)
        FILTERS isPosted(primObject),
                primObject IS ###primObject AND NOT userReceiving(primObject),
                useBins(customerStock(primObject)),
                stock(receivingBin(u)) == customerStock(primObject),
                use###primObject##Receiving(operation(primObject))
    ;
    
    DESIGN receiving {
        tabContainer {
            MOVE BOX(primObject) FIRST;
        }
    }

    overCreateDetail(ReceivingDetail d, ###primObject##Detail detail) ABSTRACT LIST;
    
    createDetails(Receiving receiving) + WHEN count###primObject(receiving AS UserReceiving) THEN {
        NEWSESSION {
            IF PREV(countReceivingDetail(receiving)) THEN {
                ASK 'Данный документ содержит строки, удалить их?' DO {
                    DELETE ReceivingDetail d WHERE d IS ReceivingDetail AND receiving(d)==receiving;
                }
            }
            FOR userReceiving(primObject(###primObject##Detail detail)) == receiving NEW d=ReceivingDetail DO {
                receiving(d) <- receiving;
                idBarcode(d) <- idBarcodeSku(detail);
                sku(d) <- sku(detail);
                overCreateDetail(d, detail);
            }
            APPLY;
        }
    }
END    


META defineReceivingAggregation(primObject, captionObject, captionObjects, formObject)
    @defineUserReceiving(primObject, captionObject, captionObjects, formObject);
        
    CLASS ###primObject##Receiving : Receiving;

    needToCreateReceiving = ABSTRACT VALUE OVERRIDE FIRST BOOLEAN (###primObject);
    primObject##Receiving = AGGR ###primObject##Receiving WHERE needToCreateReceiving(###primObject primObject) MATERIALIZED INDEXED;

    isPosted(###primObject##Receiving receiving) += isPosted(primObject(receiving));
    isClosed(###primObject##Receiving receiving) += isClosed(primObject(receiving));
    number(###primObject##Receiving receiving) += number(primObject(receiving));
    series(###primObject##Receiving receiving) += series(primObject(receiving));
    date(###primObject##Receiving receiving) += date(primObject(receiving));
    time(###primObject##Receiving receiving) += time(primObject(receiving));
    supplier(###primObject##Receiving receiving) += supplier(primObject(receiving));
    supplierStock(###primObject##Receiving receiving) += supplierStock(primObject(receiving));
    customer(###primObject##Receiving receiving) += customer(primObject(receiving));
    customerStock(###primObject##Receiving receiving) += customerStock(primObject(receiving));

    createReceiving 'Создать приемку' (user###primObject) = DATA BOOLEAN (User###primObject) IN documentPrm;

    EXTEND FORM user###primObject
        PROPERTIES(formObject) createReceiving
    ;

    DESIGN user###primObject {
        headerCreateDocuments {
            NEW headerCreateReceiving {
                caption = 'Приемка';
                MOVE PROPERTY(createReceiving(formObject));
            }
        }
    }

    receiving(###primObject primObject) = OVERRIDE userReceiving(primObject), primObject##Receiving(primObject);

    @defineOperationProperty(create###primObject##Receiving, 'Приемка по '##captionObject, createContainer);
    createReceiving (User###primObject o) <- create###primObject##Receiving(operation(o)) WHEN CHANGED(operation(o));

    skipReceiving = ABSTRACT BOOLEAN (###primObject) MATERIALIZED;

    needToCreateReceiving(###primObject primObject) += createReceiving(primObject) AND isPosted(primObject) AND NOT userReceiving(primObject) AND NOT skipReceiving(primObject);

    quantity 'Кол-во документе прихода' = GROUP SUM quantity(###primObject##Detail detail) IF primObject(detail)==primObject(###primObject##Receiving receiving) BY sku(detail), receiving;
    invoiceQuantity[Sku, ###primObject##Receiving](Sku sku, ###primObject##Receiving receiving) += quantity(sku, receiving);
    
    createDetails(Receiving receiving) + WHEN primObject(receiving) IS ###primObject THEN {
        NEWSESSION {
            IF PREV(countReceivingDetail(receiving)) THEN {
                ASK 'Данный документ содержит строки, удалить их?' DO {
                    DELETE ReceivingDetail d WHERE d IS ReceivingDetail AND receiving(d)==receiving;
                }
            }
            FOR primObject(###primObject##Detail detail) == primObject(receiving) NEW d=ReceivingDetail DO {
                receiving(d) <- receiving;
                idBarcode(d) <- idBarcodeSku(detail);
                sku(d) <- sku(detail);
                overCreateDetail(d, detail);
            }
            APPLY;
        }   
    }
END

@implementAggregationBinLedger(receivingDetail, receiving, Receiving, sku, quantity, customerStock);

@implementBinLedger(receivingBinLedger, receivingDetail, sku, quantity, customerStock, inBin);

needToCreate(ReceivingDetail detail) += TRUE IF inBin(detail) AND status(detail) == ReceivingStatus.completed;

CONSTRAINT DROPPED(ReceivingDetail d IS ReceivingDetail) AND (PREV(status(d)) = ReceivingStatus.completed OR PREV(status(receiving(d))) = ReceivingStatus.completed) 
    MESSAGE 'Запрещено удалять строки у завершённой приёмки';