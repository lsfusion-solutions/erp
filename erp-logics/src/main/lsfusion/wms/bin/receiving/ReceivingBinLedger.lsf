MODULE ReceivingBinLedger;

REQUIRE EmployeeBin, BinLedger, BinTransferBinLedger, SkuBinOrderLedger, WMSDashboard;

NAMESPACE Receiving;

CLASS ABSTRACT Receiving 'Приемка';

isClosed '{documents.is.closed}' = ABSTRACT BOOLEAN (Receiving) MATERIALIZED;
isOpened '{documents.is.opened}' (Receiving o) = o IS Receiving AND NOT isClosed(o) MATERIALIZED;
INDEX isOpened(Receiving o);

isPosted '{document.posted}' (o) = ABSTRACT BOOLEAN (Receiving) MATERIALIZED;
number '{numerator.number.numerator}' = ABSTRACT STRING[48] (Receiving) IN numbered MATERIALIZED CHARWIDTH 8;
series '{numerator.series.numerator}' = ABSTRACT BPSTRING[2] (Receiving) IN numbered MATERIALIZED CHARWIDTH 3 NOFLEX;
seriesNumber '{numerator.series.number.numerator}' (Receiving o) = CONCAT '', series(o), number(o) CHARWIDTH 7 INDEXED MATERIALIZED;
date '{document.date.of} {document.of.document}' = ABSTRACT DATE (Receiving) IN documentHeader MATERIALIZED INDEXED;
time '{document.time.of} {document.of.document}' = ABSTRACT TIME (Receiving) IN documentHeader MATERIALIZED;
dateTime '{document.date.time.of} {document.of.document}' (Receiving o) = dateTimeToDateTime(date(o), time(o)) MATERIALIZED;
supplier = ABSTRACT LegalEntity (Receiving) MATERIALIZED INDEXED;
nameSupplier 'Поставщик' (Receiving receiving)= name(supplier(receiving)) IN documentPrm CHARWIDTH 20;
supplierStock = ABSTRACT Stock (Receiving) MATERIALIZED INDEXED;
nameSupplierStock 'Склад поставщика' (Receiving receiving) = name(supplierStock(receiving)) IN documentHeader CHARWIDTH 20;
customer = ABSTRACT LegalEntity (Receiving) MATERIALIZED INDEXED;
nameCustomer 'Покупатель' (Receiving receiving)= name(customer(receiving)) IN documentPrm CHARWIDTH 20;
customerStock = ABSTRACT Stock (Receiving) MATERIALIZED INDEXED;
nameCustomerStock 'Склад покупателя' (Receiving receiving) = name(customerStock(receiving)) IN documentHeader CHARWIDTH 20;
background 'Цвет' (Receiving i)= ABSTRACT CASE COLOR (Receiving);
expectedQuantity 'Кол-во в документе прихода' = ABSTRACT NUMERIC[16,5] (Sku, Receiving) MATERIALIZED;
expectedQuantity 'Кол-во в документе прихода' = ABSTRACT NUMERIC[16,5] (Sku, STRING, Receiving) MATERIALIZED;

selected 'Отм.' = DATA LOCAL NESTED BOOLEAN (Receiving);

CLASS ReceivingStatus 'Статус' {
    pending 'Не начата',
    inProgress 'В работе',
    partiallyReceived 'Принят с расхождением',
    fullyReceived 'Принят'
}

FORM receivingStatus 'Статус'
    OBJECTS o = ReceivingStatus
    PROPERTIES(o) READONLY staticCaption

    LIST ReceivingStatus OBJECT o
;

status = DATA ReceivingStatus (Receiving);
nameStatus 'Статус' (Receiving r) = staticCaption(status(r)) IN documentPrm CHARWIDTH 8;

completeStatus (Receiving r) = status(r) == ReceivingStatus.partiallyReceived OR status(r) == ReceivingStatus.fullyReceived MATERIALIZED;

status (Receiving receiving) <- ReceivingStatus.pending WHEN SET(receiving IS Receiving);

createdUser = DATA CustomUser (Receiving);
nameCreatedUser 'Сотрудник' (Receiving receiving) = name(createdUser(receiving)) CHARWIDTH 10;

inBin = DATA Bin (Receiving);
nameInBin 'Ячейка' (Receiving receiving) = canonicalId(inBin(receiving));

CLASS ReceivingDetail 'Строка приемки';

receiving = DATA Receiving (ReceivingDetail) INDEXED NONULL DELETE;

dataStatus = DATA ReceivingStatus (ReceivingDetail);
status (ReceivingDetail d) = OVERRIDE dataStatus(d), status(receiving(d)) MATERIALIZED;

completeStatus (ReceivingDetail d) = status(d) == ReceivingStatus.partiallyReceived OR status(d) == ReceivingStatus.fullyReceived MATERIALIZED;

nameStatus 'Статус' (ReceivingDetail d) = IF completeStatus(d) THEN 'Завершена' ELSE 'В работе' IN documentPrm CHARWIDTH 8;

@defineDocumentDetailPosted(receiving);

@defineDocumentDetailClosed(receiving);

@defineDocumentDetailDataStockInner (receiving, receivingDetail, stock, Stock, supplierStock, 'Склад поставщика');

@defineDocumentDetailDataStockInner (receiving, receivingDetail, stock, Stock, customerStock, 'Склад покупателя');

@defineDocumentHeaderCount(receiving, ReceivingDetail);

@defineDocumentDetailIndex(receiving, ReceivingDetail);

@defineDocumentDetailSkuCustomPrefix(receivingDetail, sku, , );

idBarcode 'Штрихкод' = DATA STRING[15] (ReceivingDetail) IN id;

quantity '{document.quantity.of}' = DATA NUMERIC[16,5] (ReceivingDetail) CHARWIDTH 7;
receivingQuantity 'Принятое кол-во' = GROUP SUM quantity(ReceivingDetail detail) BY sku(detail), receiving(detail) MATERIALIZED CHARWIDTH 7;

changeQuantity(ReceivingDetail detail) {
    NEWSESSION {
        INPUT n = NUMERIC[16,5] DO {
            quantity(detail) <- n;
            APPLY;
        }
    }    
}

consolidationKey 'Ключ группировки' = DATA STRING (ReceivingDetail) CHARWIDTH 7;
overConsolidationKey(ReceivingDetail d) = OVERRIDE consolidationKey(d), ('Не указан' IF d IS ReceivingDetail) MATERIALIZED;

changeConsolidationKey(ReceivingDetail detail) {
    NEWSESSION {
        INPUT n = STRING DO {
            consolidationKey(detail) <- n;
            APPLY;
        }
    }
}

createdDateTime 'Время изменения' = DATA DATETIME (ReceivingDetail);
createdUser = DATA CustomUser (ReceivingDetail);
nameCreatedUser 'Сотрудник' (ReceivingDetail detail) = name(createdUser(detail)) CHARWIDTH 10;

WHEN SET(ReceivingDetail detail IS ReceivingDetail) DO {
    createdDateTime(detail) <- currentDateTime();
    createdUser(detail) <- currentUser();    
}

WHEN CHANGED(quantity(ReceivingDetail detail)) DO {
    createdDateTime(detail) <- currentDateTime();
    createdUser(detail) <- currentUser();
}

@defineDocumentHeaderDescription(Receiving, 'Приемка');

@defineDocumentDetailDescription(receiving, ReceivingDetail);

dataInBin = DATA Bin (ReceivingDetail);
inBin(ReceivingDetail detail) = OVERRIDE dataInBin(detail), inBin(receiving(detail));
nameInBin 'Ячейка' (ReceivingDetail detail) = canonicalId(inBin(detail));

dateTime(ReceivingDetail detail) = createdDateTime(detail);

idBarcodeLocal 'Штрихкод' = DATA LOCAL STRING[15] (Receiving);
skuLocal = DATA LOCAL Sku (Receiving);
nameSkuLocal 'Товар' (Receiving r)= name(skuLocal(r));
quantityLocal 'Кол-во' = DATA LOCAL NUMERIC[16,5] (Receiving);

expiryDate 'Срок годности' = DATA DATE (ReceivingDetail) CHARWIDTH 7;

overChangeBarcodeLocal ABSTRACT LIST (Receiving);

changeBarcodeLocal(Receiving r) {
    INPUT s=STRING[15] DO {
        IF skuBarcode(s, currentDate()) THEN {
            idBarcodeLocal(r) <- s;
            skuLocal(r) <- skuBarcode(s, currentDate());
            quantityLocal(r) <- NULL;
            overChangeBarcodeLocal(r);            
        } ELSE {
            MESSAGE 'Штрихкод не найден';
        }    
    }
}

CONSTRAINT DROPPED(Receiving r IS Receiving) AND PREV(countReceivingDetail(r))
    MESSAGE 'Нельзя удалять приемку с существующими строками, удалите строки перед удалением документа';

overCopy(ReceivingDetail newD, ReceivingDetail oldD) ABSTRACT LIST;
copy 'Копировать'(ReceivingDetail detail)  {
    NEWSESSION NEW d = ReceivingDetail {
        receiving(d) <- receiving(detail);
        sku(d) <- sku(detail);
        idBarcode(d) <- idBarcode(detail);
        expiryDate(d) <- expiryDate(detail);
        overCopy(d,detail);
        APPLY;
    }
} CHANGEKEY 'F6' TOOLBAR;

overCopy(ReceivingDetail d, ReceivingDetail detail) + {
    consolidationKey(d) <- consolidationKey(detail);
}

receivingQuantity 'Принятое кол-во' =
    GROUP SUM quantity(ReceivingDetail detail) BY sku(detail), overConsolidationKey(detail), receiving(detail) CHARWIDTH 7;

quantityCompleted 'Обработанное кол-во' =
    GROUP SUM quantity(ReceivingDetail detail) IF completeStatus(detail) BY sku(detail), overConsolidationKey(detail), receiving(detail);

nameStatus 'Статус' (Sku s, STRING consolidationKey, Receiving receiving) =
    CASE WHEN quantityCompleted(s, consolidationKey, receiving)==expectedQuantity(s, consolidationKey, receiving) THEN 'Принят'
        WHEN completeStatus(receiving) AND NOT quantityCompleted(s, consolidationKey, receiving)==expectedQuantity(s, consolidationKey, receiving) THEN 'Принят с расхождением'
        ELSE 'В работе';

consolidationKeyLocal 'Ключ группировки' = DATA LOCAL NESTED STRING (Receiving);
overConsolidationKeyLocal 'Ключ группировки' (Receiving d) = OVERRIDE consolidationKeyLocal(d), ('Не указан' IF d IS Receiving);

FORM addReceivingDetail 'Приемка'
    OBJECTS r=Receiving PANEL 
    PROPERTIES idBarcodeLocal(r) ON CHANGE changeBarcodeLocal(r) EVENTID 'SCANNER', nameSkuLocal(r), overConsolidationKeyLocal(r), quantityLocal(r)
;

DESIGN addReceivingDetail {
    OBJECTS {
        NEW propHorizontalContainer {
            horizontal = TRUE;
            MOVE PROPERTY(idBarcodeLocal(r)) {
                font = 'bold 24';
                panelCaptionVertical = TRUE;
                charWidth = 15;
            }
            MOVE PROPERTY(nameSkuLocal(r)) {
                font = 'bold 24';
                panelCaptionVertical = TRUE;
                charWidth = 10;
            }
            MOVE PROPERTY(overConsolidationKeyLocal(r)){
                font = 'bold 24';
                panelCaptionVertical = TRUE;
                charWidth = 15;
            }            
            MOVE PROPERTY(quantityLocal(r)) {
                font = 'bold 24';
                panelCaptionVertical = TRUE;
                charWidth = 5;
            }
        }
    }
}
 
overAddReceivingDetail ABSTRACT LIST (Receiving, ReceivingDetail);

WHEN LOCAL FORMS addReceivingDetail SET(skuLocal(Receiving r) AND quantityLocal(r)) DO {
    NEWSESSION NESTED (idBarcodeLocal, skuLocal, quantityLocal) {
        NEW detail=ReceivingDetail {
            receiving(detail) <- r;
            idBarcode(detail) <- idBarcodeLocal(r);
            sku(detail) <- skuLocal(r);
            quantity(detail) <- quantityLocal(r);
            overAddReceivingDetail(r, detail);
        } 
        APPLY NESTED LOCAL ;
    }
}

overAddReceivingDetail ABSTRACT LIST (Receiving);
addReceivingDetail 'Добавить' (Receiving r) {
    idBarcodeLocal(r) <- NULL;
    skuLocal(r) <- NULL;
    quantityLocal(r) <- NULL;
    overAddReceivingDetail(r);
    SHOW addReceivingDetail OBJECTS r=r; 
} IMAGE 'add.png';

overAddReceivingDetail(Receiving r) + {
    consolidationKeyLocal(r) <- NULL;
}

overAddReceivingDetail(Receiving r, ReceivingDetail d) + {
    consolidationKey(d) <- consolidationKeyLocal(r);
}

overChangeBarcodeLocal(Receiving r) + {
    consolidationKeyLocal(r) <- NULL;
}

@defineBinAttribute(receiving, 'Приемка');

EXTEND CLASS ReceivingType {
    detailed 'С детализацией'
}

putawayExternalOperation = DATA Bin.Operation ();
namePutawayExternalOperation 'Операция размещения' () = name(putawayExternalOperation());
putawayInternalOperation = DATA Bin.Operation ();
namePutawayInternalOperation 'Операция размещения(внутри группы ячеек)' = name(putawayInternalOperation());
putawayWriteOffOperation = DATA Bin.Operation ();
namePutawayWriteOffOperation 'Операция списания при размещении' = name(putawayWriteOffOperation());

EXTEND FORM options
    PROPERTIES namePutawayExternalOperation(), namePutawayInternalOperation(), namePutawayWriteOffOperation()
;

DESIGN options {
    WMS {
        MOVE PROPERTY(namePutawayExternalOperation());
        MOVE PROPERTY(namePutawayInternalOperation());
        MOVE PROPERTY(namePutawayWriteOffOperation());
    }
}

defaultReceivingBin = DATA Bin (Employee, Stock);
nameDefaultReceivingBin 'Ячейка для приемки' (Employee employee, Stock stock) = canonicalId(defaultReceivingBin(employee, stock)) CHARWIDTH 10;

CONSTRAINT defaultReceivingBin(Employee employee, Stock stock) AND NOT stock(defaultReceivingBin(employee, stock)) == stock
    CHECKED BY defaultReceivingBin[Employee, Stock] MESSAGE 'Ячейка задана для другого склада';

CONSTRAINT defaultReceivingBin(Employee employee, Stock stock) AND NOT accessCompany(employee, stock)
    CHECKED BY defaultReceivingBin[Employee, Stock] MESSAGE 'Нет доступа к складу ячейки';

CONSTRAINT defaultReceivingBin(Employee employee, Stock stock) AND NOT receiving(defaultReceivingBin(employee, stock))
    CHECKED BY defaultReceivingBin[Employee, Stock] MESSAGE 'Выбранная ячейка не предназначена для приемки';

EXTEND FORM employee
    PROPERTIES(e, s) nameDefaultReceivingBin
;

dataReceivingBin = DATA LOCAL NESTED Bin (CustomUser);
receivingBin (CustomUser u) = OVERRIDE dataReceivingBin(u), (GROUP MAX defaultReceivingBin(u, Stock stock));
nameReceivingBin 'Ячейка(приемка)' (CustomUser u) = canonicalId(receivingBin(u)) CHARWIDTH 10;

nameBinGroup2ReceivingBin 'Зона ячейки' (CustomUser u) = nameBinGroup2(receivingBin(u)) CHARWIDTH 10;

CONSTRAINT LOCAL dataReceivingBin(CustomUser u) AND NOT accessCompany(u, stock(dataReceivingBin(u)))
    CHECKED BY dataReceivingBin[CustomUser] MESSAGE 'Нет доступа к складу ячейки';

CONSTRAINT LOCAL dataReceivingBin(CustomUser u) AND NOT receiving(dataReceivingBin(u))
    CHECKED BY dataReceivingBin[CustomUser] MESSAGE 'Выбранная ячейка не предназначена для приемки';

overStartReceiving ABSTRACT LIST (Receiving);
startReceiving 'Взять в работу' (Receiving receiving) {
    NEWSESSION {
        createdUser(receiving) <- currentUser();
        status(receiving) <- ReceivingStatus.inProgress;
        inBin(receiving) <- receivingBin(currentUser());
        overStartReceiving(receiving);
        APPLY;
    }
}

overCompleteReceiving ABSTRACT LIST (Receiving);
completeReceiving 'Завершить приёмку' (Receiving receiving) {
    NEWSESSION {
        ASK 'Вы уверены, что хотите завершить приёмку всего документа?' DO {
            IF (GROUP SUM 1 IF receiving(ReceivingDetail d)==receiving AND NOT inBin(d)) THEN {
                MESSAGE 'Нельзя завершить работу со строками приемки у которых не заполнены ячейки';
                CANCEL;
            }
            IF (GROUP SUM 1 IF expectedQuantity(Sku sku, STRING key, receiving) == receivingQuantity(sku, key, receiving)) THEN {
                status(receiving) <- ReceivingStatus.fullyReceived;
            } ELSE {
                status(receiving) <- ReceivingStatus.partiallyReceived;
            }
            overCompleteReceiving(receiving);
            APPLY;            
        }
    }
}

overCompleteReceiving ABSTRACT LIST (Sku, STRING, Receiving);
completeReceiving 'Завершить приемку товара' (Sku sku, STRING consolidationKey, Receiving receiving) {
    NEWSESSION {
        IF (GROUP SUM 1 IF sku(ReceivingDetail d)==sku AND overConsolidationKey(d)==consolidationKey AND receiving(d)==receiving AND NOT inBin(d)) THEN {
            MESSAGE 'Нельзя завершить работу со строками приемки у которых не заполнены ячейки';
            CANCEL;
        }
        //Строкам приёмки проставляем статус принят, т.к. достаточно зафиксировать, что работа со строкой завершена
        dataStatus(ReceivingDetail d) <- ReceivingStatus.fullyReceived WHERE sku(d)==sku AND overConsolidationKey(d)==consolidationKey AND receiving(d)==receiving;
        overCompleteReceiving(sku, consolidationKey, receiving);
        APPLY;
    }
}

createDetails 'Создать строки по документу основания' ABSTRACT CASE (Receiving);

putawayBin (Stock st, Bin.Operation o, CustomUser u)  = [GROUP LAST Bin bin IF inBin(bin, Bin.Operation o1) AND accessCompany(CustomUser u1, bin) AND NOT prevCurrentBalance(bin) ORDER DESC order(bin), bin BY stock(bin), o1, u1](st, o, u);
putawayBin (Sku s, Stock st, Bin.Operation o, CustomUser u)  = [GROUP LAST Bin bin IF inBin(bin, Bin.Operation o1) AND accessCompany(CustomUser u1, bin) AND NOT prevCurrentBalance(bin) AND in(Sku sku, bin) ORDER DESC order(bin), bin BY sku, stock(bin), o1, u1](s, st, o, u);
putawayBinIgnoreBinBalance (Sku s, Stock st, Bin.Operation o, CustomUser u)  = [GROUP LAST Bin bin IF inBin(bin, Bin.Operation o1) AND accessCompany(CustomUser u1, bin) AND in(Sku sku, bin) ORDER DESC order(bin), bin BY sku, stock(bin), o1, u1](s, st, o, u);
putawayBinIgnoreBinBalance (Stock st, Bin.Operation o, CustomUser u)  = [GROUP LAST Bin bin IF inBin(bin, Bin.Operation o1) AND accessCompany(CustomUser u1, bin) ORDER DESC order(bin), bin BY stock(bin), o1, u1](st, o, u);

ignoreBinBalanceDuringPutaway 'Не учитывать остаток ячейки при размещении' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES() ignoreBinBalanceDuringPutaway
;

DESIGN options {
    receiving {
        MOVE PROPERTY(ignoreBinBalanceDuringPutaway());
    }
}

putawayBinOver (Sku sku, Stock stock, Bin.Operation o, CustomUser u) = 
    OVERRIDE putawayBin(sku, stock, o, u), 
             putawayBinIgnoreBinBalance(sku, stock, o, u) IF ignoreBinBalanceDuringPutaway(),
             putawayBin(stock, o, u) IF sku IS Sku,
             putawayBinIgnoreBinBalance(stock, o, u) IF sku IS Sku AND ignoreBinBalanceDuringPutaway();

putaway 'Разместить' (CustomUser u) {
    NEWSESSION NESTED(select[Sku], dataReceivingBin[CustomUser]) {
        select(Sku sku) <- NULL WHERE select(sku) AND NOT currentBalance(sku, receivingBin(u));
        IF NOT (GROUP MAX select(Sku sku)) THEN {
            select(Sku sku) <- TRUE WHERE currentBalance(sku, receivingBin(u));
        }
        IF NOT (GROUP MAX select(Sku sku)) THEN {
            MESSAGE 'Нечего размещать';
            RETURN;
        }
        IF NOT (GROUP MAX Bin bin IF storage(bin) AND stock(bin)==stock(receivingBin(u))) THEN {
            MESSAGE 'Для склада размещения нет ячеек хранения';
            RETURN;
        }

        FOR (GROUP MAX select(Sku sku) AND currentBalance(sku, receivingBin(u))) NEW o = UserBinTransfer DO {
            operation(o) <- putawayExternalOperation();
            date(o) <- currentDate();
            time(o) <- currentTime();
            stock(o) <- stock(receivingBin(u));
            FOR select(Sku sku) AND currentBalance(sku, receivingBin(u)) INLINE NEW d = UserBinTransferDetail DO {
                userBinTransfer(d) <- o;
                sku(d) <- sku;
                outBin(d) <- receivingBin(u);
                inBin(d) <- putawayBinOver(sku, stock(receivingBin(u)), putawayExternalOperation(), u);
                quantity(d) <- currentBalance(sku, receivingBin(u));
            }
            DIALOG userBinTransfer OBJECTS o=o MANAGESESSION DO {
                select(Sku sku) <- NULL;    
            }
        }
    }    
}

putawayReserve 'Разместить' (CustomUser u) {
    NEWSESSION NESTED(select[Sku], dataReceivingBin[CustomUser]) {
        select(Sku sku) <- NULL WHERE select(sku) AND NOT (GROUP SUM currentBalance(sku, Bin bin) IF binGroup2(bin)==binGroup2(receivingBin(u)) AND orderLedger(bin));
        IF NOT (GROUP MAX select(Sku sku)) THEN {
            select(Sku sku) <- TRUE WHERE (GROUP SUM currentBalance(sku, Bin bin) IF binGroup2(bin)==binGroup2(receivingBin(u)) AND orderLedger(bin));
        }
        IF NOT (GROUP MAX select(Sku sku)) THEN {
            MESSAGE 'Нечего размещать';
            RETURN;
        }
        IF NOT (GROUP MAX Bin bin IF storage(bin) AND stock(bin)==stock(receivingBin(u))) THEN {
            MESSAGE 'Для склада размещения нет ячеек хранения';
            RETURN;
        }

        FOR (GROUP MAX select(Sku sku) AND currentBalance(sku, Bin bin) AND binGroup2(bin)==binGroup2(receivingBin(u))) NEW o = UserBinTransfer DO {
            operation(o) <- putawayExternalOperation();
            date(o) <- currentDate();
            time(o) <- currentTime();
            stock(o) <- stock(receivingBin(u));
            FOR select(Sku sku) AND currentBalance(sku, Bin bin) AND binGroup2(bin)==binGroup2(receivingBin(u)) AND orderLedger(bin) INLINE NEW d = UserBinTransferDetail DO {
                userBinTransfer(d) <- o;
                sku(d) <- sku;
                outBin(d) <- bin;
                inBin(d) <- putawayBinOver(sku, stock(receivingBin(u)), putawayExternalOperation(), u);
                quantity(d) <- currentBalance(sku, bin);
            }
            DIALOG userBinTransfer OBJECTS o=o MANAGESESSION DO {
                select(Sku sku) <- NULL;
            }
        }
    }
}

useWriteOffReserveQuantity = ABSTRACT BOOLEAN ();
writeOffReserveQuantity 'Кол-во к списанию' = ABSTRACT CASE NUMERIC[16,5] (Sku, Bin);
writeOffReserveQuantity(Sku sku, Bin bin) += WHEN sku IS Sku AND bin IS Bin AND NOT useWriteOffReserveQuantity() THEN currentBalance(sku, bin);

writeOffReserve 'Списать' (CustomUser u) {
    NEWSESSION NESTED(select[Sku, Bin], dataReceivingBin[CustomUser]) {
        select(Sku sku, Bin bin) <- NULL WHERE select(sku, bin) AND NOT (writeOffReserveQuantity(sku, bin) AND binGroup2(bin)==binGroup2(receivingBin(u)) AND orderLedger(bin));
        IF NOT (GROUP MAX select(Sku sku, Bin bin)) THEN {
            select(Sku sku, Bin bin) <- TRUE WHERE writeOffReserveQuantity(sku, bin) AND binGroup2(bin)==binGroup2(receivingBin(u)) AND orderLedger(bin);
        }
        IF NOT (GROUP MAX select(Sku sku, Bin bin)) THEN {
            MESSAGE 'Нечего размещать';
            RETURN;
        }
        FOR (GROUP MAX select(Sku sku, Bin bin) AND writeOffReserveQuantity(sku, bin) AND binGroup2(bin)==binGroup2(receivingBin(u)) AND orderLedger(bin)) NEW o = UserBinTransfer DO {
            operation(o) <- (OVERRIDE Bin.defaultOperation(u) IF Bin.countOperations(u) == 1, putawayWriteOffOperation());
            date(o) <- currentDate();
            time(o) <- currentTime();
            stock(o) <- stock(receivingBin(u));
            FOR select(Sku sku, Bin bin) AND writeOffReserveQuantity(sku, bin) AND binGroup2(bin)==binGroup2(receivingBin(u)) AND orderLedger(bin) NEW d = UserBinTransferDetail DO {
                userBinTransfer(d) <- o;
                sku(d) <- sku;
                outBin(d) <- bin;
                inBin(d) <- NULL;
                quantity(d) <- writeOffReserveQuantity(sku, bin);
            }
            DIALOG userBinTransfer OBJECTS o=o MANAGESESSION DO {
                select(Sku sku, Bin bin) <- NULL;
            }
        }
    }
}

changeDataInBin(ReceivingDetail d, CustomUser u) {
    NEWSESSION {
        DIALOG dialogBins OBJECTS b = inBin(d) INPUT LIST canonicalId(b) 
            FILTERS isParent(bg, binGroup2(receivingBin(u))) OR isParent(binGroup2(receivingBin(u)), bg), isParent(binGroup2(receivingBin(u)), b) DO {
            dataInBin(d) <- b;
            APPLY;
        }
    }
}

FORM receiving 'Приемка'
    OBJECTS u=CustomUser PANEL 
    PROPERTIES(u) READONLY name
    PROPERTIES(u) nameReceivingBin, nameBinGroup2ReceivingBin READONLY
    FILTERS u=currentUser()
    
    OBJECTS r=Receiving LAST
    PROPERTIES(r) selected
    PROPERTIES(r) READONLY BACKGROUND RGB(255, 224, 255) nameStatus
    PROPERTIES(r) READONLY BACKGROUND background(r) nameCreatedUser, isClosed, isPosted, number, series, 
                                                    date, time, nameSupplier, nameSupplierStock, nameCustomer, nameCustomerStock
    PROPERTIES(r) PANEL TOOLBAR startReceiving SHOWIF status(r)==ReceivingStatus.pending, createDetails SHOWIF status(r)==ReceivingStatus.inProgress,
                                completeReceiving SHOWIF status(r)==ReceivingStatus.inProgress
    FILTERGROUP isOpened FILTER 'Открыт' isOpened(r) DEFAULT
    FILTERS stock(receivingBin(u)) == customerStock(r) OR stock(receivingBin(u)) == supplierStock(r),
            isPosted(r)
    
    OBJECTS d=ReceivingDetail
    PROPERTIES(d) READONLY BACKGROUND RGB(255, 224, 255) nameStatus
    PROPERTIES(d) READONLY index, idSku SHOWIF showIDs(), idBarcode, nameSku, shortNameUOMSku,
        overConsolidationKey ON CHANGE changeConsolidationKey(d), createdDateTime, nameCreatedUser
    PROPERTIES(d) quantity BACKGROUND RGB(255, 224, 255) ON CHANGE changeQuantity(d) READONLYIF NOT status(d)==ReceivingStatus.inProgress,
                  nameInBin BACKGROUND RGB(255, 224, 255) ON CHANGE changeDataInBin(d, u) READONLYIF NOT status(d)==ReceivingStatus.inProgress
    PROPERTIES addReceivingDetail(r) DRAW d PANEL TOOLBAR SHOWIF status(r)==ReceivingStatus.inProgress
    PROPERTIES(d) NEWSESSION DELETE SHOWIF status(r)==ReceivingStatus.inProgress
    PROPERTIES(d) copy PANEL TOOLBAR SHOWIF status(r)==ReceivingStatus.inProgress
    FILTERS receiving(d)==r
    FILTERGROUP inWork
        FILTER 'В работе' status(d)==ReceivingStatus.inProgress

    OBJECTS sr=Sku
    PROPERTIES(sr) READONLY idBarcode, name, shortNameUOM
    PROPERTIES(sr, r) READONLY expectedQuantity BACKGROUND RGB(212,255,212), receivingQuantity BACKGROUND RGB(255, 224, 255)
    FILTERS expectedQuantity(sr, r) OR receivingQuantity(sr, r)

    OBJECTS s = Sku
    PROPERTIES(s) select
    PROPERTIES(s) READONLY name, idBarcode
    PROPERTIES READONLY currentBalance 'Текущий остаток в ячейке' = currentBalance(s, receivingBin(u))
    PROPERTIES putaway(u) DRAW s PANEL TOOLBAR
    FILTERS currentBalance(s, receivingBin(u))  
    
    OBJECTS reserve = (rs=Sku, rb=Bin)
    PROPERTIES select(rs, rb)
    PROPERTIES READONLY name(rs), idBarcode(rs), order(rb), canonicalId(rb), name(rb), currentBalance(rs, rb)
    ORDERS name(rs), order(rb)
    
    PROPERTIES putawayReserve(u) DRAW reserve PANEL TOOLBAR
    PROPERTIES writeOffReserve(u) DRAW reserve PANEL TOOLBAR
    FILTERS currentBalance(rs, rb),
            binGroup2(rb)==binGroup2(receivingBin(u)),
            orderLedger(rb)

    OBJECTS dFrom = DATE PANEL, dTo = DATE PANEL
    PROPERTIES dFrom 'Дата с' = VALUE(dFrom), dTo 'Дата по' = VALUE(dTo)
    OBJECTS putawaySku = BinTransferDetail
    PROPERTIES(putawaySku) READONLY dateTime, idBarcodeSku, nameSku, canonicalIdInBin, canonicalIdOutBin, quantity
    FILTERS dFrom<=date(putawaySku) AND dTo>=date(putawaySku),
        accessCompany(u, outBin(putawaySku)), 
        inBin(putawaySku) = receivingBin(u), 
        operation(putawaySku) = putawayExternalOperation()

    OBJECTS srstr = (sr1=Sku, str1 = STRING)
    PROPERTIES READONLY nameStatus(sr1, str1, r) BACKGROUND RGB(255, 224, 255)
    PROPERTIES(sr1) READONLY idBarcode, name, shortNameUOM
    PROPERTIES(str1) READONLY overConsolidationKey 'Ключ группировки' = VALUE
    PROPERTIES(sr1, str1, r) READONLY expectedQuantity BACKGROUND RGB(212,255,212), receivingQuantity BACKGROUND RGB(255, 224, 255),
        quantityCompleted BACKGROUND RGB(255, 224, 255)
    PROPERTIES completeReceiving(sr1, str1, r) PANEL TOOLBAR SHOWIF receivingQuantity(sr1, str1, r) AND NOT quantityCompleted(sr1, str1, r)==receivingQuantity(sr1, str1, r)
    ORDERS name(sr1), overConsolidationKey
    FILTERS expectedQuantity(sr1, str1, r) OR receivingQuantity(sr1, str1, r)
    FILTERGROUP filter
        FILTER 'Непринятое' expectedQuantity(sr1, str1, r) AND NOT expectedQuantity(sr1, str1, r)==receivingQuantity(sr1, str1, r)
        FILTER 'Необработанное' receivingQuantity(sr1, str1, r) AND NOT receivingQuantity(sr1, str1, r)==quantityCompleted(sr1, str1, r)
        FILTER 'Непринятое/Необработанное' expectedQuantity(sr1, str1, r) AND (NOT expectedQuantity(sr1, str1, r)==receivingQuantity(sr1, str1, r) OR NOT receivingQuantity(sr1, str1, r)==quantityCompleted(sr1, str1, r))
;

DESIGN receiving {
    MOVE BOX(u){
        PROPERTY(name(u)) {
            font = 'bold 24';
            panelCaptionVertical = TRUE;
            focusable = FALSE;
            charWidth = 30;
        }
        PROPERTY(nameReceivingBin(u)) {
            font = 'bold 24';
            panelCaptionVertical = TRUE;
            charWidth = 30;
        }
        PROPERTY(nameBinGroup2ReceivingBin(u)) {
            font = 'bold 24';
            panelCaptionVertical = TRUE;
            charWidth = 30;
        }
    }
    NEW tabContainer {
        tabbed = TRUE;
        fill = 1;
        NEW receiving {
            caption = 'Приемка';
            MOVE BOX(r);
            NEW tabReceivingContainer {
                tabbed = TRUE;
                fill = 2;
                MOVE BOX(d);
                MOVE BOX(srstr) {caption = 'Группировка по товару/ключу группировки';}
                MOVE BOX(sr) {caption = 'Группировка по товару';}
            }
        }    
        NEW tabPutaway {
            caption = 'Размещение';
            tabbed = TRUE;
            fill = 1;
            NEW putaway {
                caption = 'Размещение';
                MOVE BOX(s);
            }
            NEW stocked {
                caption = 'Размещенные';
                NEW filterContaoner {
                    horizontal = TRUE;
                    caption = 'Период размещения';
                    MOVE PROPERTY(dFrom);
                    MOVE PROPERTY(dTo);
                }
                MOVE BOX(putawaySku);
            }
        }
        
        MOVE BOX(reserve) {
            caption = 'Брак/резерв';
        }        
    }    
    MOVE TOOLBARBOX;
}

NAVIGATOR {
    WMSDashboardNavigator {
        NEW receiving;
    }
}

CLASS UserReceiving : Receiving;
TABLE userReceiving (UserReceiving);

@defineDocumentHeaderTimePrefix(UserReceiving, , ' {document.of.document}');

@deriveDocumentHeaderTimePrefix(UserReceiving, );

@defineDocumentHeaderNumber(UserReceiving, BPSTRING[2]);

@defineNumeratedDefault(UserReceiving, 'Приемка', 'ПР');

@defineDocumentHeaderLegalEntity(userReceiving, supplier, 'Поставщик');
@defineDocumentHeaderLegalEntity(userReceiving, customer, 'Покупатель');

@defineDocumentHeaderStock (userReceiving, stock, 'Склад поставщика', supplier);
@defineDocumentHeaderStock (userReceiving, stock, 'Склад покупателя', customer);

//@defineDocumentHeaderPosted(UserReceiving)

@defineDocumentHeaderClosed(UserReceiving);

isPosted(UserReceiving receiving) += receiving IS UserReceiving;
isClosed(UserReceiving receiving) += isClosed(receiving);
number(UserReceiving receiving) += number(receiving);
series(UserReceiving receiving) += series(receiving);
date(UserReceiving receiving) += date(receiving);
time(UserReceiving receiving) += time(receiving);
supplier(UserReceiving receiving) += supplier(receiving);
supplierStock(UserReceiving receiving) += supplierStock(receiving);
customer(UserReceiving receiving) += customer(receiving);
customerStock(UserReceiving receiving) += customerStock(receiving);

META defineUserReceiving(primObject, captionObject, captionObjects, formObject, stockProp)
    userReceiving = DATA UserReceiving(###primObject);
    userReceiving[###primObject.###primObject](###primObject primObject) += userReceiving(primObject);
            
    CONSTRAINT userReceiving(###primObject primObject) IS UserReceiving AND NOT supplierStock(userReceiving(primObject)) = supplierStock(primObject) AND supplierStock(primObject)
        MESSAGE 'Несовпадение склада поставщика в '##captionObject + ' и документе приемки';
        
    @defineOperationProperty(use###primObject##Receiving, 'Использовать механизм "Приемка"', paramsContainer);
        
    filterReceiving(###primObject primObject) += primObject IS ###primObject AND isPosted(primObject) AND
        useBins(stockProp(primObject)) AND use###primObject##Receiving(operation(primObject));
    filterReceiving(###primObject primObject, CustomUser u) += stock(receivingBin(u)) == stockProp(primObject);
    
    use###primObject##Receiving[Operation.Operation](Operation operation) += use###primObject##Receiving(operation);

    overCreateUserReceivingFor###primObject(UserReceiving r) + {
        userReceiving(###primObject primObject) <- r WHERE selectedUserReceiving(primObject) AND NOT userReceiving(primObject) AND primObject IS ###primObject;    
    }
END    


META defineReceivingAggregation(primObject, captionObject, captionObjects, formObject, stockProp)
    @defineUserReceiving(primObject, captionObject, captionObjects, formObject, stockProp);
        
    CLASS ###primObject##Receiving : Receiving;

    needToCreateReceiving = ABSTRACT VALUE OVERRIDE FIRST BOOLEAN (###primObject);
    primObject##Receiving = AGGR ###primObject##Receiving WHERE needToCreateReceiving(###primObject primObject) MATERIALIZED INDEXED;

    isPosted(###primObject##Receiving receiving) += isPosted(primObject(receiving));
    isClosed(###primObject##Receiving receiving) += isClosed(primObject(receiving));
    number(###primObject##Receiving receiving) += number(primObject(receiving));
    series(###primObject##Receiving receiving) += series(primObject(receiving));
    date(###primObject##Receiving receiving) += date(primObject(receiving));
    time(###primObject##Receiving receiving) += time(primObject(receiving));
    supplier(###primObject##Receiving receiving) += supplier(primObject(receiving));
    supplierStock(###primObject##Receiving receiving) += supplierStock(primObject(receiving));
    customer(###primObject##Receiving receiving) += customer(primObject(receiving));
    customerStock(###primObject##Receiving receiving) += customerStock(primObject(receiving));

    createReceiving 'Создать приемку' (user###primObject) = DATA BOOLEAN (User###primObject) IN documentPrm;

    EXTEND FORM user###primObject
        PROPERTIES(formObject) createReceiving
    ;

    DESIGN user###primObject {
        headerCreateDocuments {
            NEW headerCreateReceiving {
                caption = 'Приемка';
                MOVE PROPERTY(createReceiving(formObject));
            }
        }
    }

    receiving(###primObject primObject) = OVERRIDE userReceiving(primObject), primObject##Receiving(primObject);
    receiving[###primObject.###primObject](###primObject primObject) += receiving(primObject);

    nameStatus 'Cтатус приёмки' (###primObject primObject) = nameStatus(receiving(primObject)) CHARWIDTH 15;
        
    EXTEND FORM primObject##s
        PROPERTIES(formObject) READONLY BACKGROUND RGB(255, 224, 255) nameStatus BEFORE time(formObject)
    ;

    @defineOperationProperty(create###primObject##Receiving, 'Приемка по '##captionObject, createContainer);
    createReceiving (User###primObject o) <- create###primObject##Receiving(operation(o)) WHEN CHANGED(operation(o));

    skipReceiving = ABSTRACT BOOLEAN (###primObject) MATERIALIZED;

    needToCreateReceiving(###primObject primObject) += createReceiving(primObject) AND isPosted(primObject) AND NOT userReceiving(primObject) AND NOT skipReceiving(primObject);

    quantity 'Кол-во документе прихода' = GROUP SUM quantity(###primObject##Detail detail) IF primObject(detail)==primObject(###primObject##Receiving receiving) BY sku(detail), receiving;
    expectedQuantity[Sku, ###primObject##Receiving](Sku sku, ###primObject##Receiving receiving) += quantity(sku, receiving);

    overCreateDetail(ReceivingDetail d, InvoiceDetail detail) ABSTRACT LIST;
    overCreateDetail[ReceivingDetail, Invoice.InvoiceDetail](ReceivingDetail d, InvoiceDetail detail) + { overCreateDetail(d, detail);}
    createDetails(Receiving receiving) + WHEN primObject(receiving) IS ###primObject THEN {
        NEWSESSION {
            IF PREV(countReceivingDetail(receiving)) THEN {
                ASK 'Данный документ содержит строки, удалить их?' DO {
                    DELETE ReceivingDetail d WHERE d IS ReceivingDetail AND receiving(d)==receiving;
                }
            }
            FOR primObject(###primObject##Detail detail) == primObject(receiving) NEW d=ReceivingDetail DO {
                receiving(d) <- receiving;
                idBarcode(d) <- idBarcodeSku(detail);
                sku(d) <- sku(detail);
                overCreateDetail(d, detail);
            }
            APPLY;
        }   
    }

    expectedQuantity[Sku, STRING, Receiving](Sku sku, STRING consolidationKey, ###primObject##Receiving receiving) +=
        [GROUP SUM quantity(###primObject##Detail detail) IF primObject(detail)==primObject(###primObject##Receiving r) AND r IS ###primObject##Receiving BY sku(detail), overConsolidationKey(detail), r](sku, consolidationKey, receiving);

    consolidationKey 'Ключ группировки' = ABSTRACT STRING (CreditNoteDetail) CHARWIDTH 7;
    overConsolidationKey(CreditNoteDetail d) = OVERRIDE consolidationKey(d), ('Не указан' IF d IS CreditNoteDetail) MATERIALIZED;
END

META defineUserReceiving (primObject, captionObjects)
    receiving = ABSTRACT Receiving (###primObject);
    userReceiving = ABSTRACT UserReceiving (###primObject);
    filterReceiving = ABSTRACT BOOLEAN (###primObject);
    filterReceiving = ABSTRACT BOOLEAN (###primObject, CustomUser);
    use###primObject##Receiving = ABSTRACT BOOLEAN (Operation.Operation);

    expectedQuantity 'Кол-во в документе прихода' =
        GROUP SUM quantity(###primObject##Detail detail) BY sku(detail), userReceiving(primObject(detail));
    expectedQuantity(Sku sku, UserReceiving receiving) += expectedQuantity(sku, receiving);

    count###primObject(UserReceiving userReceiving) = GROUP SUM 1 IF userReceiving(###primObject primObject) = userReceiving;

    selectedUserReceiving 'Отм' = DATA LOCAL BOOLEAN (###primObject);

    in(UserReceiving o, ###primObject primObject) = userReceiving(primObject) == o;

    countToUserReceiving###primObject() = GROUP SUM 1 IF selectedUserReceiving(###primObject primObject) AND NOT userReceiving(primObject);

    overCreateUserReceivingFor###primObject ABSTRACT LIST (UserReceiving);
    createUserReceivingFor###primObject 'Создать документ приемки' () {
        LOCAL newReceiving = UserReceiving();
        NEWSESSION NESTED (selectedUserReceiving[###primObject], newReceiving) {
            IF countToUserReceiving###primObject() THEN NEW r = UserReceiving {
                supplier(r) <- GROUP MAX supplier(###primObject primObject) IF selectedUserReceiving(primObject);
                supplierStock(r) <- GROUP MAX supplierStock(###primObject primObject) IF selectedUserReceiving(primObject);
                customer(r) <- GROUP MAX customer(###primObject primObject) IF selectedUserReceiving(primObject);
                customerStock(r) <- GROUP MAX customerStock(###primObject primObject) IF selectedUserReceiving(primObject);
                overCreateUserReceivingFor###primObject(r);
                APPLY;
                newReceiving() <- r;
            }
        }
        IF newReceiving() IS UserReceiving THEN {
            ACTIVATE TAB receiving.receiving;
            SEEK receiving.r = newReceiving();
            ACTIVATE PROPERTY receiving.number(r);
            newReceiving() <- NULL;
        }
    } TOOLBAR;
        
    EXTEND FORM receiving
        OBJECTS primObject = ###primObject
        PROPERTIES(primObject) selectedUserReceiving
        PROPERTIES(primObject) READONLY objectClassName, isPosted, isClosed, number, series, dateTime, nameSupplier, nameSupplierStock, nameCustomer, nameCustomerStock
        PROPERTIES createUserReceivingFor###primObject() SHOWIF countToUserReceiving###primObject() DRAW primObject
        ORDERS dateTime(primObject), nameSupplierStock(primObject)
        FILTERS filterReceiving(primObject),
            filterReceiving(primObject, u)
    ;

    DESIGN receiving {
        tabContainer {
            MOVE BOX(primObject) FIRST;
            PROPERTY(objectClassName(primObject)) {charWidth = 15;}
        }
    }

    description###primObject##s ###captionObjects (Receiving receiving) = [GROUP CONCAT seriesNumber(###primObject primObject), '; ' ORDER dateTime(primObject), primObject BY receiving(primObject)](receiving);
    nameStatus 'Cтатус приёмки' (###primObject primObject) = nameStatus(receiving(primObject)) CHARWIDTH 15;
        
    EXTEND FORM receiving
        PROPERTIES(r) description###primObject##s

        PROPERTIES(primObject) READONLY BACKGROUND RGB(255, 224, 255) nameStatus AFTER selectedUserReceiving(primObject)

        FILTERGROUP withoutReceiving
            FILTER 'Без приёмки' primObject IS ###primObject AND NOT receiving(primObject) DEFAULT
    ;

    overCreateDetail(ReceivingDetail d, ###primObject##Detail detail) ABSTRACT;
    createDetails(Receiving receiving) + WHEN count###primObject(receiving AS UserReceiving) AND receiving IS UserReceiving THEN {
        NEWSESSION {
            IF PREV(countReceivingDetail(receiving)) THEN {
                ASK 'Данный документ содержит строки, удалить их?' DO {
                    DELETE ReceivingDetail d WHERE d IS ReceivingDetail AND receiving(d)==receiving;
                }
            }
            FOR userReceiving(primObject(###primObject##Detail detail)) == receiving NEW d=ReceivingDetail DO {
                receiving(d) <- receiving;
                idBarcode(d) <- idBarcodeSku(detail);
                sku(d) <- sku(detail);
                overCreateDetail(d, detail);
            }
            APPLY;
        }
    }

    consolidationKey 'Ключ группировки' = ABSTRACT STRING (###primObject##Detail) CHARWIDTH 7;
    overConsolidationKey(###primObject##Detail d) = OVERRIDE consolidationKey(d), ('Не указан' IF d IS ###primObject##Detail) MATERIALIZED;

    expectedQuantity(Sku sku, STRING consolidationKey, UserReceiving receiving) +=
        [GROUP SUM quantity(###primObject##Detail detail) BY sku(detail), overConsolidationKey(detail), userReceiving(primObject(detail))](sku, consolidationKey, receiving);
END

@implementAggregationBinLedger(receivingDetail, receiving, Receiving, sku, quantity, customerStock);

@implementBinLedger(receivingBinLedger, receivingDetail, sku, quantity, customerStock, inBin);

needToCreateReceivingBinLedger(ReceivingDetail detail) += TRUE IF inBin(detail) AND completeStatus(detail);

CONSTRAINT DROPPED(ReceivingDetail d IS ReceivingDetail) AND PREV(completeStatus(d)) 
    MESSAGE 'Запрещено удалять строки у завершённой приёмки';