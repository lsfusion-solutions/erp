MODULE BinOrderTransferBinLedger;

REQUIRE BinOrderBinLedger, BinTransferBinLedger, ReservedBinLedger, ReservedBinOrderBinLedger, ReservedBinTransferBinLedger;

NAMESPACE Bin;

@defineOperationProperty(skipReservedBinLedger, 'Не проводить по регистру резерва по ячейке', paramsContainer);

skip[ReservedBinLedger](BinTransferDetail ledger) += skipReservedBinLedger(operation(ledger));
skip[ReservedBinLedger](BinOrderDetail ledger) += skipReservedBinLedger(operation(ledger));

//делаем ссылку на заказ на перемещение обязательной для того, что бы не было перемещений без заказов
//данное условие призвано обеспечить следующий подход при расчёте резерва в ячейке
//все заказы увеличивают резерв, все перемещения уменьшают, при необходимости вводится документ снятия резерва
binOrder = ABSTRACT BinOrder (BinTransfer) MATERIALIZED INDEXED;
binOrder = DATA BinOrder (UserBinTransfer);
binOrder(UserBinTransfer binTransfer) += binOrder(binTransfer);

CONSTRAINT BinTransfer b IS BinTransfer AND NOT binOrder(b) AND NOT skipReservedBinLedger(operation(b))
    MESSAGE 'Для перемещения по ячейкам должен быть задан заказ на перемещение';

CONSTRAINT stock(UserBinTransfer binTransfer) != stock(binOrder(binTransfer))
    CHECKED BY binOrder[UserBinTransfer]
        MESSAGE 'Склад в заказе на перемещение и перемещении по нему должны соответствовать друг другу';
        
GROUP binOrder 'Информация о заказе на перемещение' : public;

descriptionBinOrder 'Заказ на перемещение' (BinTransfer binTransfer) = description(binOrder(binTransfer)) CHARWIDTH 30 IN binOrder;
noteBinOrder 'Примечание (заказ на перемещение)' (BinTransfer binTransfer) = note(binOrder(binTransfer)) CHARWIDTH 30 IN binOrder;

binOrder(BinTransferDetail d) = binOrder(binTransfer(d)) MATERIALIZED;

INDEX binOrder(BinTransferDetail d), sku(d);

notCount 'Не учитывать' = ABSTRACT BOOLEAN (BinTransfer);

quantityBinTransfers 'Перемещения по ячейкам' (binOrder) = GROUP SUM 1 IF NOT notCount(BinTransfer binTransfer) BY binOrder(binTransfer) MATERIALIZED;

quantityBinTranferDetail 'Кол-во в перемещениях' = 
    GROUP SUM quantity(BinTransferDetail d) IF NOT notCount(binTransfer(d)) BY sku(d), binOrder(d);

diffQuantityBinTranferDetail 'Расхождение' = quantityBinOrderDetail(Sku sku, BinOrder binOrder) (-) quantityBinTranferDetail(sku, binOrder);
diffQuantityBinTranferDetail 'Расхождение' (BinOrder binOrder) = GROUP SUM diffQuantityBinTranferDetail(Sku sku, binOrder) MATERIALIZED;

countBinOrderSku 'Кол-во наименований' (BinOrder binOrder) = GROUP SUM 1 IF quantityBinOrderDetail(Sku sku, binOrder) MATERIALIZED;

quantityBinTransferDetail 'Кол-во в комплектациях' = 
    GROUP SUM quantity(BinTransferDetail d) IF NOT notCount(binTransfer(d)) BY sku(d), binOrder(d);
countEqualBinOrderSku 'Кол-во наименований с равным кол-ом товара' (BinOrder binOrder) =
    GROUP SUM 1 IF quantityBinTransferDetail(Sku sku, binOrder) == quantityBinOrderDetail(sku, binOrder) MATERIALIZED;

quantityBinTransferDetail 'Кол-во в комплектациях' = 
    GROUP SUM quantity(BinTransferDetail d) IF NOT notCount(binTransfer(d)) BY binOrder(d);

calcFull 'Полностью собран' (BinOrder binOrder) = countBinOrderSku(binOrder) == countEqualBinOrderSku(binOrder) AND NOT diffQuantityBinTranferDetail(binOrder);
calcPart 'Частично собран' (BinOrder binOrder) = quantityBinTransfers(binOrder) AND NOT calcFull(binOrder);

binTransfers 'Перемещения по ячейкам' (binOrder) =
    GROUP CONCAT STRING[255](description(BinTransfer binTransfer)), ', '
        ORDER binTransfer
    BY binOrder(binTransfer) CHARWIDTH 30 MATERIALIZED;

inAvailableQuantity 'Доступно (ячейка в)' (Sku sku, UserBinOrder order) = availableQuantity(sku, inBin(order));
outAvailableQuantity 'Доступно (ячейка из)' (Sku sku, UserBinOrder order) = availableQuantity(sku, outBin(order));

allAvailableBinQuantityUserBinOrder 'Все доступное кол-во (ячейка из)' = DATA LOCAL BOOLEAN (Sku, Stock);
changeAllAvailableBinQuantity(Sku sku, UserBinOrder userBinOrder, Stock stock)  { 
    INPUT b = BOOLEAN DO {
        allAvailableBinQuantityUserBinOrder (sku,stock) <- TRUE;
        changeQuantityValue(sku, userBinOrder, stock, outAvailableQuantity(sku,userBinOrder) IF b);
    }
}
   
EXTEND FORM userBinOrder
    PROPERTIES (ks, o) READONLY inAvailableQuantity AFTER prevCurrentBalanceInBin(ks, o) BACKGROUND backgroundInBin(ks, o)
     
    PROPERTIES AFTER allOutBinQuantityUserBinOrder(ks, st) BACKGROUND backgroundOutBin(ks, o) outAvailableQuantity (ks, o) READONLY,
                     allAvailableBinQuantityUserBinOrder(ks, st) ON CHANGE changeAllAvailableBinQuantity(ks, o, st)   
;

// ------------------------------- Создание на основе заказа на перемещения ------------------------------------ //

overFillUserBinTransfer ABSTRACT LIST (UserBinTransferDetail, BinOrderDetail);
overFillUserBinTransfer ABSTRACT LIST (UserBinTransfer);

skipCreateUserBinTransferDetais = ABSTRACT BOOLEAN (UserBinTransfer);

moveUserBinTransfer 'Комплектация' (BinOrder binOrder)  {
    NEWSESSION {
        NEW p = UserBinTransfer {
            binOrder(p) <- binOrder;
            stock(p) <- stock(binOrder);
            FOR binOrder(BinOrderDetail detail) == binOrder AND NOT skipCreateUserBinTransferDetais(p) NEW d = UserBinTransferDetail DO {
                userBinTransfer(d) <- p;
                sku(d) <- sku(detail);
                quantity(d) <- quantity(detail);
                batch(d) <- batch(detail);
                outBin(d) <- outBin(detail);
                inBin(d) <- inBin(detail);
                overFillUserBinTransfer(d, detail);
            }
            overFillUserBinTransfer(p);
            SHOW userBinTransfer OBJECTS o=p DOCKED;
        }
    }
} TOOLBAR;


EXTEND FORM binOrders
    PROPERTIES(o) READONLY BEFORE deleteo quantityBinTransfers, binTransfers
    PROPERTIES(o) moveUserBinTransfer
;

DESIGN binOrders {
    createdContainer{
        MOVE PROPERTY(moveUserBinTransfer(o)) { alignment = STRETCH; };
    }
}

@defineOperationProperty(cancelTransferBinOrderAuto, 'Автоматически снимать резерв с ячейки', paramsContainer);

cancelTransferBinOrderAuto(BinOrder o) = cancelTransferBinOrderAuto(operation(o));
cancelTransferBinOrderAuto(BinOrderDetail d) = cancelTransferBinOrderAuto(binOrder(d));

quantityOutBinOrderDetail 'Кол-во товара в документе'  =
    GROUP SUM quantity(BinOrderDetail idetail)
    BY  sku(idetail), outBin(idetail), binOrder(idetail);
countOutBinOrderDetail 'Кол-во строк товара в документе'  =
    GROUP SUM 1 BY batch(BinOrderDetail idetail), outBin(idetail), binOrder(idetail);

quantityBinTranferDetail 'Кол-во в перемещениях' =
    GROUP SUM quantity(BinTransferDetail d) IF NOT notCount(binTransfer(d)) BY sku(d), outBin(d), binOrder(d);

diffQuantityOutBinTranferDetail 'Расхождение' = quantityOutBinOrderDetail(Sku sku, Bin b, BinOrder binOrder)
    (-) quantityBinTranferDetail(sku, b, binOrder);

META  binOrderTransferAggregation(prefix, binType)
    
    CLASS ###prefix###binType##BinOrderTransferAggregation : ReservedBinLedger;
    skip###prefix###binType##BinOrderTransferAggregation = ABSTRACT BOOLEAN ();
    prefix##BinOrderTransferAggregation = AGGR ###prefix###binType##BinOrderTransferAggregation
        WHERE cancelTransferBinOrderAuto(BinOrder binOrder)
            AND NOT skip###prefix###binType##BinOrderTransferAggregation()
            AND (quantityBinTransfers(binOrder)>0 OR isClosed(binOrder))
            AND quantity###binType##BinOrderDetail(###prefix prefix, Bin bin, binOrder)
            AND diffQuantity###binType##BinTranferDetail(prefix, bin, binOrder) 
        MATERIALIZED;
    
    dateTime(###prefix###binType##BinOrderTransferAggregation ledger) += OVERRIDE [GROUP MAX dateTime(BinTransfer td) BY binOrder(td)](binOrder(ledger)),
        closeDateTime(binOrder(ledger));
    
    isPosted(###prefix###binType##BinOrderTransferAggregation ledger) += ledger IS ###prefix###binType##BinOrderTransferAggregation;
    isClosed(###prefix###binType##BinOrderTransferAggregation ledger) += isClosed(binOrder(ledger));
    ##prefix(###prefix###binType##BinOrderTransferAggregation ledger) += prefix(ledger);
    stock(###prefix###binType##BinOrderTransferAggregation ledger) += stock(binOrder(ledger));
    bin(###prefix###binType##BinOrderTransferAggregation ledger) += bin(ledger);

    description '{document.description.object}' (###prefix###binType##BinOrderTransferAggregation o) =
        STRING[200](CONCAT ' ', 'Заказ на перемещение' IF o IS ###prefix###binType##BinOrderTransferAggregation,
            '{document.desription.number} ' + seriesNumber(binOrder(o)), '{document.desription.of} ' + date(binOrder(o)),
            'Перемещения:',
            binTransfers(binOrder(o))) CHARWIDTH 30;
    description(###prefix###binType##BinOrderTransferAggregation ledger) += description(ledger);
    
    quantity(###prefix###binType##BinOrderTransferAggregation ledger) += - diffQuantity###binType##BinTranferDetail(##prefix(ledger), bin(ledger), binOrder(ledger));

END


@binOrderTransferAggregation(sku, out);