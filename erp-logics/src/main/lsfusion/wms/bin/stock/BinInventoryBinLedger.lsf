MODULE BinInventoryBinLedger;

REQUIRE BinSkuLedger;

NAMESPACE BinInventory;

CLASS BinInventory;

@defineDocumentHeaderCreated(BinInventory);

@defineDocumentHeaderPosted(BinInventory);


@defineDocumentHeaderTime(BinInventory);

@defineDocumentHeaderClosed(BinInventory);

@deriveDocumentHeaderTimePrefix(BinInventory, );

@defineDocumentHeaderNumber(BinInventory, BPSTRING[2]);

@defineNumeratedDefault(BinInventory, 'Инвентаризации по ячейкам', 'ЯН');

@defineDocumentHeaderNote(BinInventory);

description '{document.description.object}' (BinInventory o) =
    STRING[200](CONCAT ' ', 'Инвентаризация по ячейке' IF o IS BinInventory, '{document.desription.number} ' + seriesNumber(o), '{document.desription.of} ' + date(o)) CHARWIDTH 30;

////
//-- Выбор групп товара  
TABLE binInventorySku (BinInventory, SkuGroup);
TABLE binTnventorySkuGroup (BinInventory, SkuGroup);
dataInclude 'Вкл' = DATA BOOLEAN (BinInventory, SkuGroup);
dataInclude 'Вкл' = DATA BOOLEAN (BinInventory, Sku);

levelParentInclude (BinInventory inventory, SkuGroup skuGroup) = GROUP
    MIN level(skuGroup, SkuGroup parent) IF dataInclude(inventory, parent) MATERIALIZED;
nearestParentInclude (BinInventory inventory, SkuGroup skuGroup) = skuGroup(skuGroup, levelParentInclude(inventory, skuGroup));
nearestInclude (BinInventory inventory, SkuGroup skuGroup) = dataInclude(inventory, nearestParentInclude (inventory, skuGroup));

include 'Вкл' (BinInventory inventory, SkuGroup skuGroup) =
    OVERRIDE dataInclude(inventory, skuGroup),
        nearestInclude (inventory, skuGroup) MATERIALIZED;

skipInclude = ABSTRACT BOOLEAN (BinInventory, Sku);

include 'Вкл' (BinInventory inventory, Sku sku) = OVERRIDE dataInclude(inventory, sku), (include(inventory, skuGroup(sku))) AND NOT skipInclude(inventory, sku);
countIncludeSkuGroup 'Вкл' (BinInventory inventory) = GROUP SUM 1 IF include(inventory, SkuGroup sku);
countIncludeSku 'Вкл' (BinInventory inventory) = GROUP SUM 1 IF include(inventory, Sku sku);

nameIncludeSkuGroups 'Группы товаров' (BinInventory document)=
    GROUP
        CONCAT name(SkuGroup skuGroup) IF dataInclude(document, skuGroup), ', '
        ORDER skuGroup
    CHARWIDTH 20;

resetIncludeSkuGroups  'Сбросить отмеченные'(BinInventory in)  {
    dataInclude(in, SkuGroup g) <- NULL WHERE g IS SkuGroup ;
}

FORM selectSkuGroups 'Выбор групп'

    OBJECTS in = BinInventory PANEL

    TREE skuTree2 sk2 = SkuGroup PARENT parent(sk2)
    PROPERTIES READONLY order(sk2), name(sk2)
    PROPERTIES include(in,sk2)
    ORDERS order(sk2), name(sk2)
    PROPERTIES (in) resetIncludeSkuGroups TOOLBAR DRAW sk2 SHOWIF countIncludeSku(in)
    FILTERGROUP inactive2 FILTER 'Активные' active(sk2) 'F6' DEFAULT
;
DESIGN selectSkuGroups {
    BOX {
        size = (1024, 768);
    }
}
///
stock = DATA Stock (BinInventory);
nameStock 'Склад' (BinInventory b) = name(stock(b));
idStock  'Код склада' (BinInventory b) = id(stock(b));

//
//ячейки в инвентаризации
TABLE binInventoryBinGroup (BinInventory, BinGroup);
dataInclude 'Вкл' = DATA BOOLEAN (BinInventory, BinGroup);

levelParentInclude (BinInventory inventory, BinGroup binGroup) = GROUP
    MIN level(binGroup, BinGroup parent) IF dataInclude(inventory, parent) MATERIALIZED;
nearestParentInclude (BinInventory inventory, BinGroup binGroup) = binGroup(binGroup, levelParentInclude(inventory, binGroup));
nearestInclude (BinInventory inventory, BinGroup binGroup) = dataInclude(inventory, nearestParentInclude (inventory, binGroup));

include 'Вкл' (BinInventory inventory, BinGroup binGroup) =
    OVERRIDE dataInclude(inventory, binGroup),
        nearestInclude (inventory, binGroup) MATERIALIZED;

skipInclude = ABSTRACT BOOLEAN (BinInventory, Bin);
dataIncude = DATA BOOLEAN (BinInventory, Bin);

include 'Вкл' (BinInventory inventory, Bin bin) = OVERRIDE dataIncude(inventory, bin), (include(inventory, binGroup(bin))) AND NOT skipInclude(inventory, bin);
countIncludeBinGroup 'Вкл' (BinInventory inventory) = GROUP SUM 1 IF include(inventory, BinGroup bin);
countIncludeBin 'Вкл' (BinInventory inventory) = GROUP SUM 1 IF include(inventory, Bin bin);

nameIncludeBinGroups 'Группы товаров' (BinInventory document)=
    GROUP
        CONCAT name(BinGroup binGroup) IF dataInclude(document, binGroup), ', '
        ORDER binGroup
    CHARWIDTH 20;

resetIncludeBinGroups  'Сбросить отмеченные'(BinInventory in)  {
    dataInclude(in, BinGroup g) <- NULL WHERE g IS BinGroup ;
}

FORM selectBinGroups 'Выбор групп'
    OBJECTS in = BinInventory PANEL
    TREE binTree2 sk2 = BinGroup PARENT parent(sk2)
    PROPERTIES READONLY name(sk2)
    PROPERTIES include(in,sk2)
    ORDERS name(sk2)
    PROPERTIES (in) resetIncludeBinGroups TOOLBAR DRAW sk2 SHOWIF countIncludeBin(in)
    FILTERGROUP inactive2 FILTER 'Активные' active(sk2) 'F6' DEFAULT
;
DESIGN selectBinGroups {
    BOX {
        size = (1024, 768);
    }
}
//

CLASS TypeOfAddition {
    bin 'По множеству ячеек',
    sku 'По множеству товаров',
    difference 'По разнице'
}

typeOfAddition = DATA TypeOfAddition (BinInventory);
nameTypeOfAddition 'Тип инвентаризации' (BinInventory inventory) = staticCaption(typeOfAddition(inventory)) IN documentPrm CHARWIDTH 20;

quantityBalance 'Кол-во по остаткам' = DATA NUMERIC[16,5](BinInventory, Sku, Bin);
quantity 'Кол-во по инвентаризации' = DATA NUMERIC[16,5](BinInventory, Sku, Bin);

WHEN LOCAL CHANGED(stock(BinInventory i)) OR CHANGED(dateTime(i)) OR CHANGED(typeOfAddition(i)) DO {
    quantityBalance(i, Sku s, Bin b) <- NULL;
    quantity(i, Sku s, Bin b) <- NULL;
}

diffBinInventory 'Разница между остатками и инвентаризацией' (BinInventory i, Sku s, Bin b) = quantity(i, s, b) (-) quantityBalance(i, s, b) IF quantity(i, s, b);

quantityBalance 'Кол-во в отмеченных ячейках' (BinInventory i, Sku s) = GROUP SUM quantityBalance(i, s, Bin b);
quantity 'Кол-во по инвентаризации в отмеченных ячейках' (BinInventory i, Sku s)  = GROUP SUM quantity(i, s, Bin b);
diffBinInventory 'Расхождение по инвентанризациив отмеченных ячейках' (BinInventory i, Sku s) = GROUP SUM diffBinInventory(i, s, Bin b);
countDiffBinInventorySku 'Кол-во ячеек с расхождением по инвентаризации' (BinInventory i, Sku s) = GROUP SUM 1 IF diffBinInventory(i, s, Bin b);

quantityBalance 'Кол-во товара в ячейке' (BinInventory i, Bin b) = GROUP SUM quantityBalance(i, Sku s, b);
quantity 'Кол-во товара по инвентаризации в ячейке' (BinInventory i, Bin b) = GROUP SUM quantity(i, Sku s, b);
diffBinInventory 'Расхождение по инвентанризации' (BinInventory i, Bin b) = GROUP SUM diffBinInventory(i, Sku s, b);
countDiffBinInventorySku 'Кол-во наименований товаров с расхождением по инвентаризации'  (BinInventory i, Bin b) = GROUP SUM 1 IF diffBinInventory(i, Sku s, b);

extraFillBinInventories ABSTRACT LIST (BinInventory);

fillBinInventories 'Заполнить остатки'(BinInventory i) {
    quantityBalance(i, Sku s, Bin b) <- NULL;
    quantity(i, Sku s, Bin b) <- NULL;
    IF typeOfAddition(i) = TypeOfAddition.bin THEN {
        quantityBalance(i, Sku s, Bin b) <- balanceB(s, b, dateTime(i)) WHERE balanceB(s, stock(i), dateTime(i)) AND stock(b) = stock(i) AND include(i, b);
    } ELSE IF typeOfAddition(i) = TypeOfAddition.sku THEN {
        quantityBalance(i, Sku s, Bin b) <- balanceB(s, b, dateTime(i)) WHERE balanceB(s, stock(i), dateTime(i)) AND stock(b) = stock(i) AND include(i, s);
    } ELSE IF typeOfAddition(i) = TypeOfAddition.difference THEN {
        quantityBalance(i, Sku s, Bin b) <- balanceB(s, b, dateTime(i)) WHERE stock(b) = stock(i) AND diffBalanceBinB(s, stock(i), dateTime(i));
    }
    quantity(i, Sku s, Bin b) <- quantityBalance(i, s, b);
    extraFillBinInventories(i);
} TOOLBAR;

FORM binInventories 'Инвентаризация по ячейкам'
    OBJECTS i = BinInventory
    PROPERTIES(i) READONLY number, seriesNumber, nameTypeOfAddition, note, date, time
    PROPERTIES(i) NEWSESSION NEW, EDIT, DELETE GRID 
    LIST BinInventory OBJECT i
;

extraDifferenceFilter = ABSTRACT BOOLEAN (BinInventory, Sku, Bin);
extraDifferenceFilter(BinInventory i, Sku s) = ABSTRACT BOOLEAN (BinInventory, Sku);
isReadonlyQuantity = ABSTRACT BOOLEAN (BinInventory);

FORM binInventory 'Инвентаризация по ячейкам'
    OBJECTS i = BinInventory PANEL 
    PROPERTIES(i) nameTypeOfAddition, date, number, series, time, isPosted, nameStock, note,
        fillBinInventories
    OBJECTS t = DATETIME 
    FILTERS t = dateTime(i)
    OBJECTS st = Stock
    FILTERS st = stock(i)
    
    //по ячейкам
    TREE binTree1 bg1 = BinGroup  PARENT parent(bg1)
    PROPERTIES SHOWIF (typeOfAddition(i) = TypeOfAddition.bin) bgTreeName1 = name(bg1) READONLY, include(i, bg1)
    ORDERS bgTreeName1
    FILTERS stock(bg1) = stock(i)
    FILTERGROUP inactivebg1 FILTER 'Активные' active(bg1) 'F6' DEFAULT
    
    OBJECTS b1 = Bin
    PROPERTIES SHOWIF (typeOfAddition(i) = TypeOfAddition.bin) include(i, b1),
        name(b1) READONLY, canonicalId(b1) READONLY, canonicalName(b1) READONLY

    PROPERTIES SHOWIF (typeOfAddition(i) == TypeOfAddition.bin) READONLY 
        quantity(i, b1),    
        quantityBalance(i, b1),
        diffBinInventory(i, b1),   
        countDiffBinInventorySku(i, b1)
            FILTERS isParent(bg1, b1) OR (stock(b1) = st AND NOT bg1)
    FILTERGROUP countDiffSkuB1
        FILTER 'C товарами с расхождением по инвентаризации'  countDiffBinInventorySku(i,b1)
        FILTER 'С расхождением по инвентаризации' diffBinInventory(i,b1)
    
    TREE skuTree1 sg1 = SkuGroup PARENT parent(sg1)
    PROPERTIES SHOWIF (typeOfAddition(i) = TypeOfAddition.bin) READONLY order(sg1), name(sg1)
    ORDERS order(sg1), name(sg1)
    FILTERGROUP inactivesg1 FILTER 'Активные' active(sg1) 'F6' DEFAULT
    
    OBJECTS s1 = Sku
    PROPERTIES SHOWIF (typeOfAddition(i) = TypeOfAddition.bin) name(s1) READONLY, idBarcode(s1) READONLY, quantityBalance(i, s1, b1) READONLY,
        quantity(i, s1, b1) READONLYIF isReadonlyQuantity(i), diffBinInventory(i, s1, b1),
        nameS1 '' =  name(s1) READONLY PANEL,
        'Остаток по складу (до)' = balanceB(s1, st, t) READONLY PANEL,
        quantity(i, s1) READONLY PANEL,
        quantityBalance(i, s1) READONLY PANEL,
        diffBinInventory(i, s1) READONLY PANEL
    FILTERS isParent(sg1, s1)
    FILTERGROUP isFilled1   
        FILTER 'С количеством по остаткам' quantityBalance(i, s1, b1) DEFAULT
        FILTER 'С расхождениями по остаткам' diffBinInventory(i, s1, b1)
        FILTER 'Товары с остатком' balanceB(s1, st, t) OR sumB(s1, st, t) OR quantityBalance(i, s1) OR quantity(i, s1) OR extraDifferenceFilter(i, s1)
        FILTER 'Товары с движением не позднее 1 дня' balance(s1, st, t, 1) 'F9'
        FILTER 'Товары с движением не позднее 7 дней' balance(s1, st, t, 7) 'F8'
        FILTER 'Товары с движением не позднее 30 дней' balance(s1, st, t, 30) 'F7'
    
    //по товарам
    TREE skuTree2 sg2 = SkuGroup PARENT parent(sg2)
    PROPERTIES SHOWIF (typeOfAddition(i) = TypeOfAddition.sku) include(i, sg2),
        order(sg2) READONLY, name(sg2) READONLY
    ORDERS order(sg2), name(sg2)
    FILTERGROUP inactivesg2 FILTER 'Активные' active(sg2) 'F6' DEFAULT
    
    OBJECTS s2 = Sku
    PROPERTIES SHOWIF (typeOfAddition(i) = TypeOfAddition.sku) include(i, s2),
        name(s2) READONLY, idBarcode(s2) READONLY,
                            'Остаток по складу (до)' = balanceB(s2, st, t) READONLY,
                            quantity(i, s2) READONLY,
                            quantityBalance(i, s2) READONLY,
                            diffBinInventory(i, s2) READONLY,
                            countDiffBinInventorySku(i, s2) READONLY
    FILTERS isParent(sg2, s2)
    FILTERGROUP filtersS2
        FILTER 'Товары с остатком' balanceB(s2, st, t) OR sumB(s2, st, t) OR quantityBalance(i, s2) OR quantity(i, s2) OR extraDifferenceFilter(i, s2) 'F10' DEFAULT
        FILTER 'Товары с движением не позднее 1 дня' balance(s2, st, t, 1) 'F9'
        FILTER 'Товары с движением не позднее 7 дней' balance(s2, st, t, 7) 'F8'
        FILTER 'Товары с движением не позднее 30 дней' balance(s2, st, t, 30) 'F7'
    
    TREE binTree2 bg2 = BinGroup  PARENT parent(bg2)
    PROPERTIES SHOWIF (typeOfAddition(i) = TypeOfAddition.sku) bgTreeName2 = name(bg2) READONLY
    ORDERS bgTreeName2
    FILTERS stock(bg2) = stock(i)
    FILTERGROUP inactivebg2 FILTER 'Активные' active(bg2) 'F6' DEFAULT

    OBJECTS b2 = Bin
    PROPERTIES SHOWIF (typeOfAddition(i) = TypeOfAddition.sku) name(b2) READONLY, canonicalId(b2) READONLY , canonicalName(b2) READONLY,
        quantityBalance(i, s2, b2) READONLY, quantity(i, s2, b2) READONLYIF isReadonlyQuantity(i)
    FILTERS stock(b2) = st, isParent(bg2, b2) OR (stock(b2) = st AND NOT bg2)
    FILTERGROUP isFilled2 
        FILTER 'С количеством по остаткам' quantityBalance(i, s2, b2) DEFAULT
        FILTER 'О расхождениями по остаткам' diffBinInventory(i, s2, b2)
    
    //по расхождениям
    TREE binTree3 bg3 = BinGroup  PARENT parent(bg3)
    PROPERTIES SHOWIF (typeOfAddition(i) = TypeOfAddition.difference) bgTreeName3 = name(bg3) READONLY
    ORDERS bgTreeName3
    FILTERS stock(bg3) = stock(i)
    FILTERGROUP inactivebg3 FILTER 'Активные' active(bg3) 'F6' DEFAULT
    
    TREE skuTree3 sg3 = SkuGroup PARENT parent(sg3)
    PROPERTIES SHOWIF (typeOfAddition(i) = TypeOfAddition.difference) order(sg3) READONLY, name(sg3) READONLY
    ORDERS order(sg3), name(sg3)
    FILTERGROUP inactivesg3 FILTER 'Активные' active(sg3) 'F6' DEFAULT
    
    OBJECTS sb = (s3 = Sku, b3 = Bin)
    PROPERTIES SHOWIF (typeOfAddition(i) = TypeOfAddition.difference) name(s3) READONLY, idBarcode(s3) READONLY,
        name(b3) READONLY, canonicalId(b3) READONLY, canonicalName(b3) READONLY,
        quantityBalance(i, s3, b3) READONLY,
        quantity(i, s3, b3) READONLYIF isReadonlyQuantity(i),
        nameS3 '' = name(s3) READONLY PANEL,
        'Остаток по складу (до)' = balanceB(s3, st, t) READONLY PANEL,
        quantity(i, s3) READONLY PANEL,
        quantityBalance(i, s3) READONLY PANEL,
        diffBinInventory(i, s3) READONLY PANEL,
        countDiffBinInventorySku(i, s3) READONLY PANEL
    FILTERS quantity(i, s3, b3) OR quantityBalance(i, s3, b3) OR extraDifferenceFilter(i,s3, b3)

    FILTERGROUP isFilled3 
        FILTER 'С количеством по остаткам' quantityBalance(i, s3, b3) DEFAULT 
        FILTER 'О расхождениями по остаткам' diffBinInventory(i, s3, b3)
    EDIT BinInventory OBJECT i
;

DESIGN binInventory {
    BOX {
        size = (1024, 768);
        OBJECTS {
            NEW headCont {
                alignment = STRETCH;
                NEW headHorizontal1 {
                    horizontal = TRUE;
                    alignment = STRETCH;
                    MOVE PROPERTY(isPosted(i));
                    MOVE PROPERTY(number(i));
                    MOVE PROPERTY(series(i));
                    MOVE PROPERTY(date(i));
                    MOVE PROPERTY(time(i));
                }
                NEW headHorizontal2 {
                    horizontal = TRUE;
                    alignment = STRETCH;
                    MOVE PROPERTY(nameTypeOfAddition(i));
                    MOVE PROPERTY(nameStock(i));
                }
                NEW headHorizontal3 {
                    horizontal = TRUE;
                    alignment = STRETCH;
                    MOVE PROPERTY(note(i)){fill = 1;};
                }
                NEW headHorizontal4 {
                    MOVE PROPERTY (fillBinInventories(i));
                }
            }
            NEW typeOfAdditionCont {
                fill = 1;
                NEW b1s1Cont {
                    fill = 1;
                    NEW b1Cont {
                        horizontal = TRUE;
                        fill = 1;
                        MOVE BOX(TREE binTree1) {
                            fill = 0.5;
                            width = 200;
                            caption = 'Группы ячеек';
                            PROPERTY (include(i, bg1));// {valueWidth = 100; }
                        };    
                        MOVE BOX (b1) {fill = 2;};
                    }
                    NEW s1Cont {
                        fill = 1;
                        horizontal = TRUE;
                        MOVE BOX(TREE skuTree1) {
                            fill = 0.5;
                            width = 200;
                        }
                        NEW s1ContSplit {
                            fill = 2;
                            NEW sku1Cont {
                                horizontal = TRUE;
                                fill = 1;
                                MOVE BOX (s1) {fill = 2;};
                                NEW s1ContRight {
                                    fill = 0.5;
                                    MOVE PROPERTY (nameS1);
                                    MOVE PROPERTY (balanceB(s1, st, t));
                                    MOVE PROPERTY (quantityBalance(i, s1));
                                    MOVE PROPERTY (quantity(i, s1));
                                    MOVE PROPERTY (diffBinInventory(i, s1));
                                }
                            }
                        }
                    }
                }
                NEW b2s2Cont {
                    fill = 1;
                    NEW s2Cont {
                        horizontal = TRUE;
                        fill = 1;
                        MOVE BOX(TREE skuTree2) {
                            fill = 0.5;
                            width = 200;
                            caption = 'Группы товаров';
                            PROPERTY (include(i, sg2));
                        };
                        MOVE BOX (s2) {fill = 2;};
                    }
                    NEW b2Cont {
                        fill = 1;
                        horizontal = TRUE;
                        MOVE BOX(TREE binTree2) {
                            fill = 0.5;
                            width = 200;
                        }
                        NEW bin2Cont {
                            fill = 2;
                            MOVE BOX (b2) {fill = 1;}
                        }
                    }
                }
                NEW bsCont {
                    horizontal = TRUE;
                    fill = 1;
                    NEW bsGroupCont {
                        fill = 0.5;
                        width = 200;
                        MOVE BOX(TREE binTree3) {fill = 1;};
                        MOVE BOX(TREE skuTree3) {fill = 1;};
                    }
                    NEW sbSkuBinCont {
                        fill = 2;
                        NEW sbContSplit {
                            horizontal = TRUE;
                            fill = 1;
                            MOVE BOX (sb) {fill = 2;};
                            NEW sbContRight {
                                fill = 0.5;
                                MOVE PROPERTY (nameS3);
                                MOVE PROPERTY (balanceB(s3, st, t));
                                MOVE PROPERTY (quantityBalance(i, s3));
                                MOVE PROPERTY (quantity(i, s3));
                                MOVE PROPERTY (diffBinInventory(i, s3));
                                MOVE PROPERTY (countDiffBinInventorySku(i, s3));
                            }
                        }
                    }
                }
            }
        }
    }
}

NAVIGATOR {
    WMSDocument {
        NEW binInventories;
    }
}

CLASS BinInventoryBinLedger : BinLedger;
needToCreate = ABSTRACT BOOLEAN (BinInventory, Sku, Bin); 
binInventoryBinLedger = AGGR BinInventoryBinLedger WHERE needToCreate(BinInventory binInventory, Sku sku, Bin bin) MATERIALIZED INDEXED;

dateTime[BinLedger] (BinInventoryBinLedger ledger) += dateTime(binInventory(ledger));
isPosted[BinLedger] (BinInventoryBinLedger ledger) += isPosted(binInventory(ledger));
isClosed[BinLedger] (BinInventoryBinLedger ledger) += isClosed(binInventory(ledger));
sku[BinLedger] (BinInventoryBinLedger ledger) += sku(ledger);
quantity[BinLedger] (BinInventoryBinLedger ledger) += abs(diffBinInventory(binInventory(ledger),sku(ledger),bin(ledger)));
stock[BinLedger] (BinInventoryBinLedger ledger) += stock(binInventory(ledger));
description[BinLedger] (BinInventoryBinLedger ledger) += description(binInventory(ledger));

inBin[BinLedger] (BinInventoryBinLedger ledger) += bin(ledger) IF diffBinInventory(binInventory(ledger),sku(ledger),bin(ledger)) >0;    
outBin[BinLedger] (BinInventoryBinLedger ledger) += bin(ledger) IF diffBinInventory(binInventory(ledger),sku(ledger),bin(ledger))<0;

skipBinInventoryBinLedger = ABSTRACT BOOLEAN (BinInventory) MATERIALIZED;
needToCreate(BinInventory binInventory, Sku sku, Bin bin) += isPosted(binInventory) 
    AND diffBinInventory(binInventory, sku, bin)
    AND stock(binInventory) = stock(bin)
    AND NOT skipBinInventoryBinLedger(binInventory);