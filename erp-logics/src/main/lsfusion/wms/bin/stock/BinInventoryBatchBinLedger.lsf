MODULE BinInventoryBatchBinLedger;

REQUIRE BinInventory, BatchBinLedger;

NAMESPACE BinInventory;

isBatch 'По партиям' = DATA BOOLEAN (BinInventory);
skipBinInventoryBinLedger(BinInventory i) += isBatch(i);
isReadonlyQuantity(BinInventory i) += isBatch(i);

quantityBalance 'Кол-во по остаткам' = DATA NUMERIC[16,5](BinInventory, Batch, Bin);
quantity 'Кол-во по инвентаризации' = DATA NUMERIC[16,5](BinInventory, Batch, Bin);
diffBinInventory 'Разница между остатками и инвентаризацией' (BinInventory i, Batch bt, Bin b) = quantity(i, bt, b) (-) quantityBalance(i, bt, b) IF quantity(i, bt, b) AND isBatch(i);

quantityBalance 'Кол-во в отмеченных ячейках' (BinInventory i, Batch bt) = GROUP SUM quantityBalance(i, bt, Bin b);
quantity 'Кол-во по инвентаризации в отмеченных ячейках' (BinInventory i, Batch bt)  = GROUP SUM quantity(i, bt, Bin b);
diffBinInventory 'Расхождение по инвентанризациив отмеченных ячейках' (BinInventory i, Batch bt) = GROUP SUM diffBinInventory(i, bt, Bin b);
countDiffBinInventoryBatch 'Кол-во ячеек с расхождением по инвентаризации' (BinInventory i, Batch bt) = GROUP SUM 1 IF diffBinInventory(i, bt, Bin b);

quantityBalanceBatch 'Кол-во товара по партиям в ячейке' (BinInventory i, Bin b) = GROUP SUM quantityBalance(i, Batch bt, b);
quantityBatch 'Кол-во товара по партиям по инвентаризации в ячейке' (BinInventory i, Bin b) = GROUP SUM quantity(i, Batch bt, b);
diffBinInventoryBatch 'Расхождение по партиям по инвентаризации' (BinInventory i, Bin b) = GROUP SUM diffBinInventory(i, Batch bt, b);
countDiffBinInventoryBatch 'Кол-во партий с расхождением по инвентаризации'  (BinInventory i, Bin b) = GROUP SUM 1 IF diffBinInventory(i, Batch bt, b);

CLASS BinInventoryBatchBinLedger : BinLedger;
needToCreate = ABSTRACT BOOLEAN (BinInventory, Batch, Bin);
binInventoryBatchBinLedger = AGGR BinInventoryBatchBinLedger WHERE needToCreate(BinInventory binInventory, Batch batch, Bin bin) MATERIALIZED INDEXED;

dateTime[BinLedger] (BinInventoryBatchBinLedger ledger) += dateTime(binInventory(ledger));
isPosted[BinLedger] (BinInventoryBatchBinLedger ledger) += isPosted(binInventory(ledger));
isClosed[BinLedger] (BinInventoryBatchBinLedger ledger) += isClosed(binInventory(ledger));
batch[BinLedger] (BinInventoryBatchBinLedger ledger) += batch(ledger);
sku[BinLedger] (BinInventoryBatchBinLedger ledger) += skuLedger(batch(ledger), stock(bin(ledger)));
quantity[BinLedger] (BinInventoryBatchBinLedger ledger) += abs(diffBinInventory(binInventory(ledger),batch(ledger),bin(ledger)));
stock[BinLedger] (BinInventoryBatchBinLedger ledger) += stock(binInventory(ledger));
description[BinLedger] (BinInventoryBatchBinLedger ledger) += description(binInventory(ledger));

inBin[BinLedger] (BinInventoryBatchBinLedger ledger) += bin(ledger) IF diffBinInventory(binInventory(ledger),batch(ledger),bin(ledger)) >0;
outBin[BinLedger] (BinInventoryBatchBinLedger ledger) += bin(ledger) IF diffBinInventory(binInventory(ledger),batch(ledger),bin(ledger))<0;

needToCreate(BinInventory binInventory, Batch batch, Bin bin) += isPosted(binInventory)
    AND diffBinInventory(binInventory, batch, bin)
    AND stock(binInventory) = stock(bin)
    AND isBatch(binInventory);

skipChangeSkuQuantity = DATA LOCAL BOOLEAN (BinInventory);

WHEN LOCAL CHANGED(quantity(BinInventory i, Batch bt, Bin b)) AND isBatch(i) AND NOT skipChangeSkuQuantity(i) DO {
    quantity(i, Sku s, b) <- quantityBalance(i, s, b)
        (+) [GROUP SUM diffBinInventory(BinInventory i1, Batch bt1, Bin b1) BY i1, skuLedger(bt1, stock(b1)), b1](i,s,b);
}

WHEN DROPPED(isBatch(BinInventory i)) DO {
    quantityBalance(i, Batch bt, Bin b) <- NULL;
    quantity(i, Batch bt, Bin b) <- NULL;
}

extraFillBinInventories(BinInventory i) + {
    IF isBatch(i) THEN {
        skipChangeSkuQuantity(i) <- TRUE;
        quantityBalance(i, Batch bt, Bin b) <- NULL;
        quantity(i, Batch bt, Bin b) <- NULL;
        IF typeOfAddition(i) = TypeOfAddition.bin THEN {
            quantityBalance(i, Batch bt, Bin b) <- balanceB(bt, b, dateTime(i)) WHERE balanceB(bt, stock(i), dateTime(i)) AND stock(b) = stock(i) AND include(i, b);
        } ELSE IF typeOfAddition(i) = TypeOfAddition.sku THEN {
            quantityBalance(i, Batch bt, Bin b) <- balanceB(bt, b, dateTime(i)) WHERE balanceB(bt, stock(i), dateTime(i)) AND stock(b) = stock(i) AND include(i, skuLedger(bt, stock(i)));
        } ELSE IF typeOfAddition(i) = TypeOfAddition.difference THEN {
            quantityBalance(i, Batch bt, Bin b) <- balanceB(bt, b, dateTime(i)) WHERE stock(b) = stock(i) 
                AND (diffBalanceBinB(bt, stock(i), dateTime(i)) OR diffBalanceBinB(skuLedger(bt, stock(i)), stock(i), dateTime(i)));
            quantityBalance(i, Batch bt, Bin b) <- balanceB(bt, b, dateTime(i)) WHERE NOT quantityBalance(i, bt, b) AND stock(b) = stock(i) 
                AND balanceB(skuLedger(bt, stock(i)), stock(i), dateTime(i)) = [GROUP SUM balanceB(Batch bt1, Stock st1, DATETIME dt1) BY skuLedger(bt1, st1), st1, dt1](skuLedger(bt, stock(i)), stock(i), dateTime(i))
                AND NOT balanceB(skuLedger(bt, stock(i)), b, dateTime(i)) = [GROUP SUM balanceB(Batch bt1, Bin b1, DATETIME dt1) BY skuLedger(bt1, stock(b1)), b1, dt1](sku(bt), b, dateTime(i));
        }
        quantity(i, Batch bt, Bin b) <- quantityBalance(i, bt, b);
        skipChangeSkuQuantity(i) <- NULL;
    }
}

WHEN LOCAL CHANGED(stock(BinInventory i)) OR CHANGED(dateTime(i)) OR CHANGED(typeOfAddition(i)) DO {
    quantityBalance(i, Batch bt, Bin b) <- NULL;
    quantity(i, Batch bt, Bin b) <- NULL;
}

extraDifferenceFilter(i, Sku s, Bin b) += (isBatch(i) AND 
    [GROUP MAX Batch bt IF quantity(BinInventory i1, bt, Bin b1) OR quantityBalance(i1, bt, b1) BY i1, skuLedger(bt, stock(bt)), b1](i, s,b));
extraDifferenceFilter(i, Sku s) += (isBatch(i) AND
    [GROUP MAX Batch bt IF quantity(BinInventory i1, bt, Bin b1) OR quantityBalance(i1, bt, b1) BY i1, skuLedger(bt, stock(bt))](i, s));


EXTEND FORM binInventories
    PROPERTIES(i) READONLY isBatch
;

EXTEND FORM binInventory
    PROPERTIES(i) isBatch
    PROPERTIES SHOWIF (typeOfAddition(i) = TypeOfAddition.bin AND isBatch(i))
        quantityBatch(i, b1),
        quantityBalanceBatch(i, b1),
        diffBinInventoryBatch(i, b1),
        countDiffBinInventoryBatch(i, b1)    
    
    OBJECTS bt1 = Batch
    PROPERTIES SHOWIF (typeOfAddition(i) = TypeOfAddition.bin AND isBatch(i)) name(bt1) READONLY, id(bt1) READONLY, quantityBalance(i, bt1, b1) READONLY,
        quantity(i, bt1, b1), diffBinInventory(i, bt1, b1)
    FILTERS skuLedger(bt1, st) = s1, balanceB(bt1, st, t)
    FILTERGROUP isFilledBatch1
        FILTER 'С количеством по остаткам' quantityBalance(i, bt1, b1)  DEFAULT
        FILTER 'С расхождениями по остаткам' diffBinInventory(i, bt1, b1)

    OBJECTS bt2 = Batch
    PROPERTIES SHOWIF (typeOfAddition(i) = TypeOfAddition.sku AND isBatch(i)) name(bt2) READONLY, id(bt2) READONLY,
        quantityBalance(i, bt2, b2) READONLY, quantity(i, bt2, b2), diffBinInventory(i, bt2, b2)
    FILTERS skuLedger(bt2, st) = s2, balanceB(bt2, st, t)
    FILTERGROUP isFilledBatch2
        FILTER 'С количеством по остаткам' quantityBalance(i, bt2, b2)
        FILTER 'С расхождениями по остаткам' diffBinInventory(i, bt2, b2)

    OBJECTS bt3 = Batch
    PROPERTIES SHOWIF (typeOfAddition(i) = TypeOfAddition.difference AND isBatch(i)) name(bt3) READONLY, id(bt3) READONLY, quantityBalance(i, bt3, b3) READONLY,
        quantity(i, bt3, b3), diffBinInventory(i, bt3, b3)
    FILTERS skuLedger(bt3,st) = s3, balanceB(bt3, st, t)
    FILTERGROUP isFilledBatch3
        FILTER 'С количеством по остаткам' quantityBalance(i, bt3, b3) DEFAULT
        FILTER 'С расхождениями по остаткам' diffBinInventory(i, bt3, b3)
;

DESIGN binInventory {
    headHorizontal2 {
        MOVE PROPERTY(isBatch(i)) FIRST;
    }
    s1ContSplit {
        MOVE BOX (bt1) {fill = 1;};
    }
    bin2Cont {
        MOVE BOX (bt2) {fill = 1;}
    }
    sbSkuBinCont {
        MOVE BOX(bt3);
    }
}