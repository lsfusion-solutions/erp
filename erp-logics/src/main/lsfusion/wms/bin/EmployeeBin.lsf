MODULE EmployeeBin;

REQUIRE Bin, EmployeeLegalEntity;

TABLE binEmployee (Bin, Employee);
TABLE binGroupEmployee(BinGroup, Employee);

limitAccessCompanyStocksBin 'Ограничить доступ к ячейкам склада' = DATA BOOLEAN (Employee);

dataAccessCompany 'Доступ разрешен (компания)' = DATA BOOLEAN (Bin, Employee);
dataSkipAccessCompany = DATA BOOLEAN (Bin, Employee);

dataAccessCompany 'Доступ разрешен (компания)' (BinGroup bg, Employee e) = accessCompany(e, stock(bg)) AND bg IS StockBinGroup AND e IS Employee;;

dataSkipAccessCompany = DATA BOOLEAN (DataBinGroup, Employee) TABLE binGroupEmployee;

levelParentCompanySkip (Employee employee, BinGroup binGroup) = GROUP
    MIN level(binGroup, BinGroup parent) IF dataSkipAccessCompany(parent, employee) MATERIALIZED;
nearestParentCompanySkip (Employee employee, BinGroup binGroup) = binGroup(binGroup, levelParentCompanySkip(employee, binGroup));
nearestInCompanySkip (Employee employee, BinGroup binGroup) =
    dataSkipAccessCompany(nearestParentCompanySkip (employee, binGroup), employee) MATERIALIZED;

levelParentCompany (Employee employee, BinGroup binGroup) = GROUP
    MIN level(binGroup, BinGroup parent) IF dataAccessCompany(parent, employee) MATERIALIZED;
nearestParentCompany (Employee employee, BinGroup binGroup) = binGroup(binGroup, levelParentCompany(employee, binGroup));
nearestInCompany (Employee employee, BinGroup binGroup) =
    dataAccessCompany(nearestParentCompany (employee, binGroup), employee) MATERIALIZED;

skipAccessCompany(Employee employee, BinGroup binGroup) = levelParentCompany(employee, binGroup) > levelParentCompanySkip(employee, binGroup);

accessCompany 'Доступ разрешен (компания)' (Employee employee, BinGroup binGroup) = OVERRIDE
    dataAccessCompany(binGroup, employee),
    nearestInCompany(employee, binGroup) AND NOT skipAccessCompany(employee, binGroup),
    employee IS Employee AND binGroup IS BinGroup AND NOT limitAccess(employee) AND NOT limitAccessCompanyStocksBin(employee) MATERIALIZED;

accessCompany 'Доступ разрешен (компания)' (Employee employee, Bin bin) = OVERRIDE
    dataAccessCompany(bin, employee),
    nearestInCompany(employee, binGroup(bin)) AND NOT skipAccessCompany(employee, binGroup(bin)) AND NOT dataSkipAccessCompany(bin, employee),
    employee IS Employee AND isCompany(stock(bin)) AND NOT limitAccess(employee) AND NOT limitAccessCompanyStocksBin(employee) MATERIALIZED;

changeAccessCompany(Employee e, Bin bin) {
    LOCAL b = BOOLEAN ();
    b() <- dataAccessCompany(bin, e);
    dataAccessCompany(bin, e) <- NOT b() WHERE limitAccess(e) AND limitAccessCompanyStocksBin(e);
    dataSkipAccessCompany(bin, e) <- b() WHERE limitAccess(e) AND limitAccessCompanyStocksBin(e);
}

changeAccessCompany(Employee e, BinGroup bg) {
    LOCAL b = BOOLEAN ();
    b() <- (nearestInCompany(e, bg) AND NOT dataSkipAccessCompany(bg, e));
    dataSkipAccessCompany(bg, e) <- b() WHERE limitAccess(e) AND limitAccessCompanyStocksBin(e);
}

EXTEND FORM employee
    PROPERTIES(e) limitAccessCompanyStocksBin SHOWIF limitAccess(e)

    TREE binTree bg = BinGroup  PARENT parent(bg)
    PROPERTIES READONLY bgTreeName = name(bg)
    PROPERTIES(e, bg) accessCompany ON CHANGE changeAccessCompany(e, bg)

    ORDERS bgTreeName
    FILTERS accessCompany(e, stock(bg))
    FILTERGROUP active FILTER 'Активный' active(bg) DEFAULT

    OBJECTS b = Bin GRID
    PROPERTIES(b) READONLY canonicalId, name
    PROPERTIES(e, b) accessCompany ON CHANGE changeAccessCompany(e, b)
    
    ORDERS canonicalId(b)
    FILTERS isParent(bg, b)
;

DESIGN employee {
    pane {
        NEW binContainer {
            caption = 'Ячейки';
            MOVE PROPERTY(limitAccessCompanyStocksBin(e));
            NEW binSplitContainer{
                fill = 1;
                horizontal = TRUE;
                MOVE BOX(TREE binTree) {
                    caption = 'Группы ячеек';
                    PROPERTY (accessCompany(e,bg)) {valueWidth = 100; }

                };
                MOVE BOX(b) {
                    GRID(b) {
                        defaultComponent = TRUE;
                        PROPERTY (accessCompany(e,b)) {valueWidth = 100;}
                    }
                }
            }
        }
    }
}

countAccessCompanyBins 'Кол-во доступных подразделений (компания)' (Employee employee) =
    GROUP
        SUM 1 IF accessCompany(employee, Bin bin);
defaultCompanyBin  (Employee employee) =
    GROUP
        MIN  Bin bins IF accessCompany(employee, bins);

companyBins  'Склады (компания)' (Employee employee) = ISTRING[2000](GROUP
    CONCAT name(Bin st) IF accessCompany(employee, st) , ', '
    ORDER name(st)) CHARWIDTH 20;


@extendFormFilterStockAccess(g, binGroups);

@extendFormFilterStockAccess(g, dialogBinGroups);

@extendFormFilterStockAccess(sg, bins);

@extendFormFilterStockAccess(sg, dialogBins);

@extendFormFilterStockAccess(bg, binStocks);

@extendFormFilterStockAccess(b, binStocks);

FORM dialogZoneBinGroups 'Зоны ячеек'
    OBJECTS g = BinGroup
    PROPERTIES READONLY name(g), canonicalName(g), nameStock(g)
    ORDERS canonicalName(g)
    FILTERS level(g) = 2, 
        accessCompany(currentUser(), g)
    FILTERGROUP active FILTER 'Активный' active(g) DEFAULT
;

filterZoneBinGroup  = DATA LOCAL NESTED BinGroup ();
nameFilterZoneBinGroup 'Зоны ячеек' = name(filterZoneBinGroup()) CHARWIDTH 15;

changeFilterZoneBinGroup(Stock st) {
    DIALOG dialogZoneBinGroups OBJECTS g INPUT NULL FILTERS stock(g) = st DO  {
        filterZoneBinGroup() <- g;
    }
}