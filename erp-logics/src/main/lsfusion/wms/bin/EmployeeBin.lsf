MODULE EmployeeBin;

REQUIRE Bin, EmployeeLegalEntity;

TABLE binEmployee (Bin, Employee);
TABLE dataBinGroupEmployee(BinGroup, Employee);

dataBinAccessCompany 'Доступ разрешен (компания)' = DATA BOOLEAN (Employee);

limitAccessCompanyStocksBin 'Ограничить доступ к ячейкам склада' = DATA BOOLEAN (Employee);

dataAccessCompany 'Доступ разрешен (компания)' = DATA BOOLEAN (Bin, Employee);

dataAccessCompany 'Доступ разрешен (компания)' = DATA BOOLEAN (StockBinGroup, Employee) TABLE dataBinGroupEmployee;
accessCompany 'Доступ разрешен (компания)' (StockBinGroup sg, Employee e) = OVERRIDE dataAccessCompany(sg,e),
    accessCompany(e, stock(sg)) AND sg IS StockBinGroup AND e IS Employee AND NOT limitAccessCompanyStocksBin(e);

dataAccessCompany 'Доступ разрешен (компания)' = DATA BOOLEAN (DataBinGroup, Employee) TABLE dataBinGroupEmployee;

dataAccessCompany 'Доступ разрешен (компания)' (BinGroup bg, Employee e) = MULTI dataAccessCompany[DataBinGroup, Employee](bg, e),
    accessCompany[StockBinGroup, Employee](bg, e);


levelParentCompany (Employee employee, BinGroup binGroup) = GROUP
    MIN level(binGroup, BinGroup parent) IF dataAccessCompany(parent, employee) MATERIALIZED;
nearestParentCompany (Employee employee, BinGroup binGroup) = binGroup(binGroup, levelParentCompany(employee, binGroup));
nearestInCompany (Employee employee, BinGroup binGroup) =
    dataAccessCompany(nearestParentCompany (employee, binGroup), employee) MATERIALIZED;

accessCompany 'Доступ разрешен (компания)' (Employee employee, BinGroup binGroup) = (OVERRIDE
    dataAccessCompany(binGroup, employee),
    nearestInCompany(employee, binGroup),
    dataBinAccessCompany(employee) AND binGroup IS BinGroup,
    employee IS Employee  AND binGroup IS BinGroup AND NOT limitAccess(employee)) 
    ; // MATERIALIZED;

accessCompany 'Доступ разрешен (компания)' (Employee employee, Bin bin) = OVERRIDE
    dataAccessCompany(bin, employee),
    nearestInCompany(employee, binGroup(bin)),
    dataBinAccessCompany(employee) AND isCompany(stock(bin)),
    employee IS Employee AND isCompany(stock(bin)) AND NOT limitAccess(employee) MATERIALIZED;

EXTEND FORM employee

    TREE binTree bT = BPSTRING[3], bg = BinGroup  PARENT parent(bg)
    PROPERTIES READONLY VALUE(bT), bgTreeName = name(bg)
    ORDERS bgTreeName
    FILTERS stringEqualsAll(bT)
    PROPERTIES(e)  DRAW bT dataBinAccessCompany
    PROPERTIES(e)  limitAccessCompanyStocksBin

    PROPERTIES(e,bg)  accessCompany
    FILTERS accessCompany(e, stock(bg))

    FILTERGROUP active FILTER 'Активный' active(bg) DEFAULT

    OBJECTS b = Bin GRID
    PROPERTIES(b) READONLY canonicalId, name
    ORDERS canonicalId(b)
    FILTERS isParent(bg, b) OR (b IS Bin AND NOT bg)
    PROPERTIES(e,b) accessCompany
;

DESIGN employee {
    pane {
        NEW binContainer {
            caption = 'Ячейки';
            MOVE PROPERTY(limitAccessCompanyStocksBin(e));
            NEW binSplitContainer{
                fill = 1;
                horizontal = TRUE;
                MOVE BOX(TREE binTree) {
                    caption = 'Группы ячеек';
                    PROPERTY (accessCompany(e,bg)) {valueWidth = 100; }

                };
                MOVE BOX(b) {
                    GRID(b) {
                        defaultComponent = TRUE;
                        PROPERTY (accessCompany(e,b)) {valueWidth = 100;}
                    }
                }
            }
        }
    }
}

countAccessCompanyBins 'Кол-во доступных подразделений (компания)' (Employee employee) =
    GROUP
        SUM 1 IF accessCompany(employee, Bin bin);
defaultCompanyBin  (Employee employee) =
    GROUP
        MIN  Bin bins IF accessCompany(employee, bins);

companyBins  'Склады (компания)' (Employee employee) = ISTRING[2000](GROUP
    CONCAT name(Bin st) IF accessCompany(employee, st) , ', '
    ORDER name(st)) CHARWIDTH 20;


@extendFormFilterStockAccess(g, binGroups);

@extendFormFilterStockAccess(g, dialogBinGroups);

@extendFormFilterStockAccess(sg, bins);

@extendFormFilterStockAccess(sg, dialogBins);

@extendFormFilterStockAccess(bg, binStocks);

@extendFormFilterStockAccess(b, binStocks);