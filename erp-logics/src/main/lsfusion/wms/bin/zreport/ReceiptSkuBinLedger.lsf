MODULE ReceiptSkuBinLedger;

REQUIRE BinLedger, ReceiptSkuLedger;

NAMESPACE Bin;

//абстрактный чек по ячейкам
CLASS ABSTRACT ReceiptSkuBinLedger 'Движение чеков по ячейкам': BinLedger;
TABLE receiptSkuBinLedger(ReceiptSkuBinLedger);

dateTime 'Дата/время' = ABSTRACT DATETIME (ReceiptSkuBinLedger) MATERIALIZED INDEXED;
date 'Дата' (ReceiptSkuBinLedger ledger) = toDate(dateTime(ledger));

departmentStore = ABSTRACT DepartmentStore (ReceiptSkuBinLedger) MATERIALIZED;
nameDepartmentStore 'Склад' (ReceiptSkuBinLedger ledger) = name(departmentStore(ledger));

@defineDocumentAbstractDetailSkuCustomPrefix(receiptSkuBinLedger, sku, , );

nameSkuGroup3Sku 'Группа' (ReceiptSkuBinLedger ledger) = nameSkuGroup3(sku(ledger));

inBin = ABSTRACT Bin (ReceiptSkuBinLedger) MATERIALIZED INDEXED;
nameInBin 'Ячейка (в)' (ReceiptSkuBinLedger ledger) = name(inBin(ledger)) IN id;

outBin = ABSTRACT Bin (ReceiptSkuBinLedger) MATERIALIZED INDEXED;
nameOutBin 'Ячейка (из)' (ReceiptSkuBinLedger ledger) = name(outBin(ledger)) IN id;

quantity 'Кол-во' = ABSTRACT NUMERIC[16,5] (ReceiptSkuBinLedger) MATERIALIZED;

description 'Название документа' = ABSTRACT ISTRING[200] (ReceiptSkuBinLedger) MATERIALIZED;

skip 'Не проводить по учету' = ABSTRACT BOOLEAN (ReceiptSkuBinLedger) MATERIALIZED;
active 'Активен' (ReceiptSkuBinLedger ledger) = ledger IS ReceiptSkuBinLedger AND NOT skip(ledger);

dateTime[BinLedger] (ReceiptSkuBinLedger ledger) += dateTime(ledger);
sku[BinLedger] (ReceiptSkuBinLedger ledger) += sku(ledger);
isPosted[BinLedger] (ReceiptSkuBinLedger ledger) += TRUE IF ledger IS ReceiptSkuBinLedger;
quantity[BinLedger] (ReceiptSkuBinLedger ledger) += quantity(ledger);
inBin[BinLedger] (ReceiptSkuBinLedger ledger) += inBin(ledger);
outBin[BinLedger] (ReceiptSkuBinLedger ledger) += outBin(ledger);
description[BinLedger] (ReceiptSkuBinLedger ledger) += description(ledger);

//чек продажи по ячейкам
CLASS ReceiptSaleSkuBinLedger 'Продажа за день (по ячейке)': ReceiptSkuBinLedger;

dateTime 'Дата/время' = DATA DATETIME (ReceiptSaleSkuBinLedger);
date 'Дата' (ReceiptSaleSkuBinLedger ledger) = toDate(dateTime(ledger));

departmentStore = DATA DepartmentStore (ReceiptSaleSkuBinLedger);
nameDepartmentStore 'Склад' (ReceiptSaleSkuBinLedger ledger) = name(departmentStore(ledger));

@defineDocumentDetailSkuCustomPrefix(receiptSaleSkuBinLedger, sku, , );

outBin = DATA Bin (ReceiptSaleSkuBinLedger);
nameOutBin 'Ячейка (из)' (ReceiptSaleSkuBinLedger ledger) = name(outBin(ledger)) IN id;

quantity 'Кол-во' = DATA NUMERIC[16,5] (ReceiptSaleSkuBinLedger);

skip 'Не проводить по учету' = DATA BOOLEAN (ReceiptSaleSkuBinLedger);
active 'Активен' (ReceiptSaleSkuBinLedger ledger) = NOT skip(ledger);

receiptSaleSkuLedger = DATA ReceiptSaleSkuLedger (ReceiptSaleSkuBinLedger) INDEXED;
description 'Описание' (ReceiptSaleSkuBinLedger ledger) =  description[DataSkuLedger](receiptSaleSkuLedger(ledger));

receiptSaleSkuLedger = GROUP MAX ReceiptSaleSkuBinLedger ledger BY receiptSaleSkuLedger(ledger);

dateTime (ReceiptSaleSkuBinLedger ledger) += dateTime(ledger);
sku (ReceiptSaleSkuBinLedger ledger) += sku(ledger);
departmentStore (ReceiptSaleSkuBinLedger ledger) += departmentStore(ledger);
quantity(ReceiptSaleSkuBinLedger ledger) += quantity(ledger);
outBin (ReceiptSaleSkuBinLedger ledger) += outBin(ledger);
description (ReceiptSaleSkuBinLedger ledger) += description(ledger);

//чек возврата по ячейкам
CLASS ReceiptReturnSkuBinLedger 'Возврат за день (по ячейке)': ReceiptSkuBinLedger;

dateTime 'Дата/время' = DATA DATETIME (ReceiptReturnSkuBinLedger);
date 'Дата' (ReceiptReturnSkuBinLedger ledger) = toDate(dateTime(ledger));

departmentStore = DATA DepartmentStore (ReceiptReturnSkuBinLedger);
nameDepartmentStore 'Склад' (ReceiptReturnSkuBinLedger ledger) = name(departmentStore(ledger));

@defineDocumentDetailSkuCustomPrefix(receiptReturnSkuBinLedger, sku, , );

inBin = DATA Bin (ReceiptReturnSkuBinLedger);
nameInBin 'Ячейка (в)' (ReceiptReturnSkuBinLedger ledger) = name(outBin(ledger)) IN id;

quantity 'Кол-во' = DATA NUMERIC[16,5] (ReceiptReturnSkuBinLedger);

skip 'Не проводить по учету' = DATA BOOLEAN (ReceiptReturnSkuBinLedger);
active 'Активен' (ReceiptReturnSkuBinLedger ledger) = NOT skip(ledger);

receiptReturnSkuLedger = DATA ReceiptReturnSkuLedger (ReceiptReturnSkuBinLedger) INDEXED;
description 'Описание' (ReceiptReturnSkuBinLedger ledger) =  description[DataSkuLedger](receiptReturnSkuLedger(ledger));

receiptReturnSkuLedger = GROUP MAX ReceiptReturnSkuBinLedger ledger BY receiptReturnSkuLedger(ledger);

dateTime (ReceiptReturnSkuBinLedger ledger) += dateTime(ledger);
sku (ReceiptReturnSkuBinLedger ledger) += sku(ledger);
departmentStore (ReceiptReturnSkuBinLedger ledger) += departmentStore(ledger);
quantity(ReceiptReturnSkuBinLedger ledger) += quantity(ledger);
inBin (ReceiptReturnSkuBinLedger ledger) += inBin(ledger);
description (ReceiptReturnSkuBinLedger ledger) += description(ledger);

//ячейки для чеком по умолчанию
inBin 'Ячейка (в)' = DATA Bin (DepartmentStore);
nameInBin 'Ячейка (в)' (DepartmentStore departmentStore) = name(inBin(departmentStore)) CHARWIDTH 20;

outBin 'Ячейка (из)' = DATA Bin (DepartmentStore);
nameOutBin 'Ячейка (из)' (DepartmentStore departmentStore) = name(outBin(departmentStore)) CHARWIDTH 20;

setInBin (DepartmentStore departmentStore)  { 
    DIALOG dialogBinStock OBJECTS s = departmentStore, b = inBin(departmentStore) INPUT NULL DO
        inBin(departmentStore) <- b;
}
   
setOutBin (DepartmentStore departmentStore)  { 
    DIALOG dialogBinStock OBJECTS s = departmentStore, b = outBin(departmentStore) INPUT NULL DO 
        outBin(departmentStore) <- b;
}

EXTEND FORM departmentStore
    PROPERTIES (d) nameInBin ON CHANGE setInBin(d), nameOutBin ON CHANGE setOutBin(d)     
;

DESIGN departmentStore {
    headerLeft{
        NEW binParams AFTER headerExtraParams {
            alignment = STRETCH;
            lines = 3;
            caption = 'Ячейки по умолчанию';
            MOVE PROPERTY(nameInBin(d));  
            MOVE PROPERTY(nameOutBin(d));   
        }
    }
}

//date(ledger) >= dateStartTransferred(skuGroup3(sku(ledger)),departmentStore)

skipGenerateBinLedgers = ABSTRACT BOOLEAN (ReceiptSaleSkuLedger);

generateReceiptSaleSkuLedgers 'Создать продажи по ячейкам' (DepartmentStore departmentStore, DATE dFrom, DATE dTo)  { 
    FOR date(ReceiptSaleSkuLedger ledger)>= dFrom AND date(ledger)<= dTo AND departmentStore(ledger) == departmentStore AND 
        outBin(departmentStore) AND NOT skipGenerateBinLedgers(ledger) AND receiptSaleSkuLedger(ledger) DO
            quantity(ReceiptSaleSkuBinLedger saleBinLedger) <- quantity[DataSkuLedger](ledger) WHERE saleBinLedger == receiptSaleSkuLedger(ledger);

    FOR date(ReceiptSaleSkuLedger ledger)>= dFrom AND date(ledger)<= dTo AND departmentStore(ledger) == departmentStore AND 
        outBin(departmentStore) AND NOT skipGenerateBinLedgers(ledger) AND NOT receiptSaleSkuLedger(ledger) NEW bl = ReceiptSaleSkuBinLedger DO {
            receiptSaleSkuLedger(bl) <- ledger;
            dateTime(bl) <- dateTime[DataSkuLedger](ledger);
            departmentStore(bl) <- stock[DataSkuLedger](ledger);    
            sku(bl) <- sku[DataSkuLedger](ledger);
            quantity(bl) <- quantity[DataSkuLedger](ledger);
            outBin(bl) <- outBin(departmentStore(ledger));
        }
    
    APPLY;
}

skipGenerateBinLedgers = ABSTRACT BOOLEAN (ReceiptReturnSkuLedger);

generateReceiptReturnSkuLedgers 'Создать возвраты по ячейкам' (DepartmentStore departmentStore, DATE dFrom, DATE dTo)  { 
    FOR date(ReceiptReturnSkuLedger ledger) >= dFrom AND date(ledger)<= dTo AND departmentStore(ledger) == departmentStore AND 
        outBin(departmentStore) AND NOT skipGenerateBinLedgers(ledger) AND receiptReturnSkuLedger(ledger) DO
            quantity(ReceiptReturnSkuBinLedger returnBinLedger) <- quantity[DataSkuLedger](ledger) WHERE returnBinLedger == receiptReturnSkuLedger(ledger);

    FOR date(ReceiptReturnSkuLedger ledger) >= dFrom AND date(ledger)<= dTo AND departmentStore(ledger) == departmentStore AND 
        outBin(departmentStore) AND NOT skipGenerateBinLedgers(ledger) AND NOT receiptReturnSkuLedger(ledger) NEW bl = ReceiptReturnSkuBinLedger DO {
            receiptReturnSkuLedger(bl) <- ledger;
            dateTime(bl) <- dateTime[DataSkuLedger](ledger);
            departmentStore(bl) <- stock[DataSkuLedger](ledger);    
            sku(bl) <- sku[DataSkuLedger](ledger);
            quantity(bl) <- quantity[DataSkuLedger](ledger);
            inBin(bl) <- inBin(departmentStore(ledger));
        }

    APPLY;
}

generateReceiptSkuLedgers 'Создать продажи по ячейкам' (DepartmentStore departmentStore, DATE dFrom, DATE dTo)  { 
    generateReceiptSaleSkuLedgers(departmentStore, dFrom, dTo);
    generateReceiptReturnSkuLedgers(departmentStore, dFrom, dTo);   
} CONFIRM;

deleteReceiptSkuLedgers 'Очистить' (DepartmentStore departmentStore, DATE dFrom, DATE dTo)  { 
    DELETE ReceiptSkuBinLedger ledger WHERE date(ledger)>= dFrom AND date(ledger)<= dTo AND departmentStore(ledger)==departmentStore;
    APPLY;
} CONFIRM;

autoCreateReceiptSkuLedgers 'Автоматически создать продажи по ячейкам' = DATA BOOLEAN (DepartmentStore);

generateReceiptSkuLedgers 'Создать продажи по ячейкам' (DATE dFrom, DATE dTo)  { 
    FOR autoCreateReceiptSkuLedgers(DepartmentStore departmentStore) DO {
        generateReceiptSaleSkuLedgers(departmentStore, dFrom, dTo);
        generateReceiptReturnSkuLedgers(departmentStore, dFrom, dTo); 
    }    
}

EXTEND FORM options 
    PROPERTIES (s) autoCreateReceiptSkuLedgers GRID
;

FORM receiptSaleSkuBinLedgers 'Чеки по ячейкам'
    OBJECTS dates = (dFrom = DATE, dTo = DATE) PANEL
    PROPERTIES dFrom = VALUE(dFrom), dTo = VALUE(dTo)
    
    OBJECTS d = DepartmentStore PANEL 
    PROPERTIES(d) name SELECTOR
    
    OBJECTS l = ReceiptSkuBinLedger
    PROPERTIES(l) READONLY date, dateTime, description, nameDepartmentStore, nameSkuGroup3Sku, idBarcodeSku, nameSku, 
                           nameOutBin, nameInBin, quantity
    PROPERTIES(l) DELETE GRID
    ORDERS date(l)
    FILTERS date(l)>=dFrom, date(l)<=dTo, departmentStore(l)==d
    PROPERTIES (d, dFrom, dTo) generateReceiptSkuLedgers, deleteReceiptSkuLedgers     
;

@extendFormFilterStockAccess(d, receiptSaleSkuBinLedgers);

NAVIGATOR {
    WMSNavigator {
        WMSDocument {
            NEW receiptSaleSkuBinLedgers;
        }
    }
}