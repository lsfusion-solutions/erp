MODULE SaleOrderPickingOrderBatchBinLedger;

REQUIRE SaleOrderPickingOrderBinLedger, BatchBinSkuLedger, PickingOrderBatchBinLedger;

NAMESPACE Sale;

namePlannedStatus(Order order) +=
    (CASE WHEN order IS Order AND (GROUP SUM plannedPickingQuantity(order, Batch bt)) AND (GROUP SUM diffPlannedPickingQuantity(order, Batch bt)) 
            THEN 'Частично спланированы'
        WHEN order IS Order  AND (GROUP SUM plannedPickingQuantity(order, Batch bt)) AND NOT (GROUP SUM diffPlannedPickingQuantity(order, Batch bt)) 
            THEN 'Cпланированы'
        ELSE 'Не спланированы');

createUserPickingOrder(Order order) + WHEN order IS Order THEN {
    NEWSESSION {
        IF defaultPickingOrderBinOrderOperation() THEN {
            LOCAL quantityLoc = NUMERIC[16,5](Batch, Bin);
            LOCAL quantityLoc = NUMERIC[16,5](Batch);
    
            IF (GROUP SUM 1 IF diffPlannedPickingQuantity(order, Batch bt)>0) THEN NEW p = UserPickingOrder {
                isPosted(p) <- TRUE;
                order(p) <- order;
                stock(p) <- supplierStock(order);
    
                quantityLoc(Batch bt) <- diffPlannedPickingQuantity(order, bt) WHERE diffPlannedPickingQuantity(order, bt)>0;
                quantityLoc(Batch bt, Bin b) <- PARTITION UNGROUP quantityLoc[Batch] LIMIT currentBalance(bt, b) ORDER currentBalance(bt, b) BY bt
                    WHERE picking(b);
    
                FOR quantityLoc(Batch bt, Bin b) INLINE DO NEW pd = UserPickingOrderDetail {
                    userPickingOrder(pd) <- p;
                    sku(pd) <- sku(bt);
                    batch(pd) <- bt;
                    outBin(pd) <- b;
                    quantity(pd) <- quantityLoc(bt, b);
                }
            }
            APPLY;
        } ELSE {
            MESSAGE 'Не задана \'Операция по умолчанию для заказа на перемещение по ячейкам\'' NOWAIT;
        }
    }
}

showCreateUserPickingOrder(Order order) += isPosted(order) AND (GROUP SUM 1 IF diffPlannedPickingQuantity(order, Batch bt)>0);

pickingPickingDetail 'Скомплектовано' (order, batch) = GROUP SUM quantity(PickingDetail pickingDetail)
BY order(pickingDetail), batch(pickingDetail);
pickingQuantityBatch 'Кол-во (скомплектовано)' (OrderDetail orderDetail) = PARTITION UNGROUP pickingPickingDetail
    LIMIT STRICT quantity (orderDetail)
    ORDER orderDetail
    BY order(orderDetail), batch(orderDetail) MATERIALIZED;

overPickingQuantity0(OrderDetail d) += pickingQuantityBatch(d);
skipPickingQuantity(OrderDetail d) += batch(d) IS Batch;