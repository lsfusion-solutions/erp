MODULE SaleOrderPickingOrderBatchBinLedger;

REQUIRE SaleOrderPickingOrderBinLedger, BatchBinSkuLedger, PickingOrderBatchBinLedger, BatchReservedBinLedger;

NAMESPACE Sale;

namePlannedStatus(Order order) +=
    (CASE WHEN order IS Order AND (GROUP SUM plannedPickingQuantity(order, Batch bt)) AND (GROUP SUM diffPlannedPickingQuantity(order, Batch bt)) 
            THEN 'Частично спланированы'
        WHEN order IS Order  AND (GROUP SUM plannedPickingQuantity(order, Batch bt)) AND NOT (GROUP SUM diffPlannedPickingQuantity(order, Batch bt)) 
            THEN 'Cпланированы'
        ELSE 'Не спланированы');

plannedPickingQuantity 'Планируемое к комплектации кол-во' = DATA LOCAL NUMERIC[16,5] (Order, Batch, Bin);
plannedPickingQuantityBatch 'Планируемое к комплектации кол-во' = GROUP SUM plannedPickingQuantity(Order order, Batch batch, Bin bin) BY order, idPickingGroup(sku(batch));
orderPlannedPickingQuantity (Order order, Batch batch, Bin bin) = PARTITION SUM 1 IF plannedPickingQuantity(order, batch, bin) ORDER batch, bin BY order, idPickingGroup(sku(batch));
pickingOrderNumber(Order order, Batch batch, Bin bin, INTEGER pickingGroup) = ceil((orderPlannedPickingQuantity(order, batch, bin)-1)/maxLinesPick()) IF idPickingGroup(sku(batch))==pickingGroup;

overCreateUserPickingOrder(Order order) + WHEN order IS Order THEN {
    NEWSESSION {
        IF defaultPickingOrderBinOrderOperation() THEN {
            LOCAL NESTED countPickingOrders = INTEGER ();
            LOCAL NESTED countPickingOrder = INTEGER (INTEGER);
            LOCAL NESTED message = STRING ();
            LOCAL quantityLoc = NUMERIC[16,5](Batch, Order);

            quantityLoc(Batch bt, order) <- diffPlannedPickingQuantity(order, bt) WHERE diffPlannedPickingQuantity(order, bt)>0;
            plannedPickingQuantity(order, Batch bt, Bin bin) <- 
                PARTITION UNGROUP quantityLoc[Batch, Order] LIMIT availableQuantity(bt, bin) IF picking(bin) AND availableQuantity(bt, bin)>0 ORDER canonicalId(bin), bin BY bt, order
                WHERE picking(bin) AND availableQuantity(bt, bin)>0;
            countPickingOrder(INTEGER pickingGroup) <- (GROUP MAX pickingOrderNumber(order, Batch batch, Bin bin, pickingGroup));
            countPickingOrders() <- (GROUP SUM (countPickingOrder(INTEGER pickingGroup)(+)1) IF plannedPickingQuantityBatch(order, pickingGroup)); //Добавляем 1, т.к. нумерация идёт с 0
            
            CASE 
                WHEN NOT (GROUP SUM quantityLoc(Batch bt, order)) THEN {
                    message() <- 'Нечего отправлять в комплектацию';
                }
                WHEN countPickingOrders() THEN {
                    message() <- 'Создано заказов на комплектацию:'+(countPickingOrders());
                }

            FOR iterate(INTEGER i, 0, countPickingOrder(INTEGER pickingGroup)) ORDER pickingGroup INLINE NEW p = UserPickingOrder DO {
                isPosted(p) <- TRUE;
                order(p) <- order;
                stock(p) <- supplierStock(order);

                FOR plannedPickingQuantity(order, Batch bt, Bin bin) AND pickingOrderNumber(order, bt, bin, pickingGroup)==i INLINE DO NEW pd = UserPickingOrderDetail {
                    userPickingOrder(pd) <- p;
                    sku(pd) <- sku(bt);
                    batch(pd) <- bt;
                    outBin(pd) <- bin;
                    quantity(pd) <- plannedPickingQuantity(order, bt, bin);
                }
            }
            
            APPLY;
            
            IF canceled() THEN {
                CANCEL;
            } ELSE {
                MESSAGE message() NOWAIT;
            }
            
        } ELSE {
            MESSAGE 'Не задана \'Операция по умолчанию для заказа на комплектацию\'' NOWAIT;
        }
    }
}

showCreateUserPickingOrder(Order order) += isPosted(order) AND (GROUP SUM 1 IF diffPlannedPickingQuantity(order, Batch bt)>0);

pickingPickingDetail 'Скомплектовано' (order, batch) = GROUP SUM quantity(PickingDetail pickingDetail)
    BY order(pickingDetail), batch(pickingDetail);
pickingQuantityBatch 'Кол-во (скомплектовано)' (OrderDetail orderDetail) = PARTITION UNGROUP pickingPickingDetail
    LIMIT STRICT quantity (orderDetail)
    ORDER orderDetail
    BY order(orderDetail), batch(orderDetail) MATERIALIZED;

overPickingQuantity0(OrderDetail d) += pickingQuantityBatch(d);
skipPickingQuantity(OrderDetail d) += batch(d) IS Batch;