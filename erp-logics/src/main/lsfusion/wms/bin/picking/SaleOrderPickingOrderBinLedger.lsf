MODULE SaleOrderPickingOrderBinLedger;

REQUIRE SaleOrder, PickingOrder, OrderPickingOrder, PickingOrderBinLedger, BinSkuLedger, OrderInvoicePickingOrder, SaleInvoice;

NAMESPACE Sale;

//------------------------------------------------------------------------------------------------------------//

namePlannedStatus 'Статус планирования комплектаций' = ABSTRACT VALUE OVERRIDE FIRST STRING (Order) CHARWIDTH 20;
namePlannedStatus(Order order) +=
    (CASE WHEN order IS Order AND (GROUP SUM plannedPickingQuantity(order, Sku sku)) AND (GROUP SUM diffPlannedPickingQuantity(order, Sku sku)) 
            THEN 'Частично спланированы'
         WHEN order IS Order AND (GROUP SUM plannedPickingQuantity(order, Sku sku)) AND NOT (GROUP SUM diffPlannedPickingQuantity(order, Sku sku)) 
            THEN 'Cпланированы'
    ELSE 'Не спланированы');

EXTEND FORM orders
    PROPERTIES(o) READONLY PANEL namePerformer, startDateTime, finishDateTime, packQuantity
    PROPERTIES(o) READONLY BEFORE countOrderDetail(o) namePlannedStatus, nameStatusPicking BACKGROUND backgroundStatusPicking(o),
        pickingOrders
;
DESIGN orders {
    documentHistory {
        NEW picking {
            caption = 'Комплектация';
            horizontal = TRUE;
            MOVE PROPERTY(namePerformer(o));
            MOVE PROPERTY(startDateTime(o));
            MOVE PROPERTY(finishDateTime(o));
            MOVE PROPERTY(packQuantity(o));
        }
    }
}

//---------------------------------- Создание заказа на комплектации ----------------------------------------//

dataMaxLinesPick = DATA INTEGER ();
maxLinesPick 'Максимальное количество строк в заказе на комплектацию' = OVERRIDE dataMaxLinesPick(), 60;

EXTEND FORM options
    PROPERTIES() maxLinesPick
;

DESIGN options{
    WMS {
        MOVE PROPERTY(maxLinesPick());
    }
}

plannedPickingQuantity 'Планируемое к комплектации кол-во' = DATA LOCAL NUMERIC[16,5] (Order, Sku, Bin);
orderPlannedPickingQuantity (Order order, Sku sku, Bin bin) = PARTITION SUM 1 IF plannedPickingQuantity(order, sku, bin) ORDER sku, bin BY order; 
pickingOrderNumber(Order order, Sku sku, Bin bin) = ceil((orderPlannedPickingQuantity(order, sku, bin)-1)/maxLinesPick());

createUserPickingOrder 'Отправить в комплектацию' ABSTRACT CASE OVERRIDE FIRST (Order) TOOLBAR;
createUserPickingOrder(Order order) + WHEN order IS Order THEN {
    NEWSESSION {
        IF defaultPickingOrderBinOrderOperation() THEN {
            LOCAL NESTED countPickingOrder = INTEGER ();
            LOCAL NESTED message = STRING ();
            LOCAL quantityLoc = NUMERIC[16,5](Sku);

            quantityLoc(Sku sku) <- diffPlannedPickingQuantity(order, sku) WHERE diffPlannedPickingQuantity(order, sku) > 0;
            plannedPickingQuantity(order, Sku sku, Bin bin) <- PARTITION UNGROUP quantityLoc[Sku] LIMIT currentBalance(sku, bin) ORDER currentBalance(sku, bin) BY sku
                WHERE picking(bin);
            countPickingOrder() <- (GROUP MAX pickingOrderNumber(order, Sku sku, Bin bin));

            CASE
                WHEN NOT (GROUP SUM quantityLoc(Sku sku)) THEN {
                    message() <- 'Нечего отправлять в комплектацию';
                }
                WHEN countPickingOrder() THEN {
                    message() <- 'Создано заказов на комплектацию:'+(countPickingOrder()+1); //Добавляем 1, т.к. нумерация идёт с 0
                }            

            FOR iterate(INTEGER i, 0, countPickingOrder()) INLINE NEW p = UserPickingOrder DO {
                isPosted(p) <- TRUE;
                order(p) <- order;
                stock(p) <- supplierStock(order);

                FOR plannedPickingQuantity(order, Sku sku, Bin bin) AND pickingOrderNumber(order, sku, bin)==i INLINE DO NEW pd = UserPickingOrderDetail {
                    userPickingOrder(pd) <- p;
                    sku(pd) <- sku;
                    outBin(pd) <- bin;
                    quantity(pd) <- plannedPickingQuantity(order, sku, bin);
                }
            }
            
            APPLY;
            
            IF canceled() THEN {
                CANCEL;
            } ELSE {
                MESSAGE message() NOWAIT;
            }
            
        } ELSE {
            MESSAGE 'Не задана \'Операция по умолчанию для заказа на комплектацию\'' NOWAIT;
        }    
    }    
}

showCreateUserPickingOrder = ABSTRACT VALUE OVERRIDE FIRST BOOLEAN (Order);
showCreateUserPickingOrder(Order order) += isPosted(order) AND (GROUP SUM 1 IF diffPlannedPickingQuantity(order, Sku s)>0);

EXTEND FORM orders 
    PROPERTIES(o) createUserPickingOrder SHOWIF showCreateUserPickingOrder(o)
;

@defineOrderInvoicePickingOrder (' (продажа)');