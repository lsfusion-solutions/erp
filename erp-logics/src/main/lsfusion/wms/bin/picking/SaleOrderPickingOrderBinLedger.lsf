MODULE SaleOrderPickingOrderBinLedger;

REQUIRE SaleOrder, PickingOrder, OrderPickingOrder, PickingOrderBinLedger, BinSkuLedger, OrderInvoicePickingOrder, 
        SaleInvoice, ReservedBinLedger;

NAMESPACE Sale;

//------------------------------------------------------------------------------------------------------------//

namePlannedStatus 'Статус планирования комплектаций' = ABSTRACT VALUE OVERRIDE FIRST STRING (Order) CHARWIDTH 20;
namePlannedStatus(Order order) +=
    (CASE WHEN order IS Order AND (GROUP SUM plannedPickingQuantity(order, Sku sku)) AND (GROUP SUM diffPlannedPickingQuantity(order, Sku sku)) 
            THEN 'Частично спланированы'
         WHEN order IS Order AND (GROUP SUM plannedPickingQuantity(order, Sku sku)) AND NOT (GROUP SUM diffPlannedPickingQuantity(order, Sku sku)) 
            THEN 'Cпланированы'
    ELSE 'Не спланированы');

EXTEND FORM orders
    PROPERTIES(o) READONLY PANEL namePerformer, startDateTime, finishDateTime, packQuantity
    PROPERTIES(o) READONLY BEFORE countOrderDetail(o) namePlannedStatus, nameStatusPicking BACKGROUND backgroundStatusPicking(o),
        pickingOrders
;
DESIGN orders {
    documentHistory {
        NEW picking {
            caption = 'Комплектация';
            horizontal = TRUE;
            MOVE PROPERTY(namePerformer(o));
            MOVE PROPERTY(startDateTime(o));
            MOVE PROPERTY(finishDateTime(o));
            MOVE PROPERTY(packQuantity(o));
        }
    }
}

//---------------------------------- Создание заказа на комплектации ----------------------------------------//

dataMaxLinesPick = DATA INTEGER ();
maxLinesPick 'Максимальное количество строк в заказе на комплектацию' = OVERRIDE dataMaxLinesPick(), 60;

EXTEND FORM options
    PROPERTIES() maxLinesPick
;

DESIGN options{
    WMS {
        MOVE PROPERTY(maxLinesPick());
    }
}

CLASS PickingGroup 'Группа комплектации';

@defineExternalizable(pickingGroup, INTEGER);

name 'Наименование' = DATA STRING (PickingGroup) CHARWIDTH 20;

FORM pickingGroup 'Группа комплектации'
    OBJECTS g=PickingGroup PANEL 
    PROPERTIES(g) id, name
    
    EDIT PickingGroup OBJECT g
;

FORM dialogPickingGroup 'Группы комплектации'
    OBJECTS g=PickingGroup
    PROPERTIES(g) READONLY id, name

    LIST PickingGroup OBJECT g
;

FORM pickingGroups 'Группы комплектации'
    OBJECTS g=PickingGroup
    PROPERTIES(g) READONLY id, name
    PROPERTIES(g) NEWSESSION NEW, EDIT, DELETE 
;

NAVIGATOR {
    WMSNavigator {
        WMSMasterData {
            NEW pickingGroups;
        }
    }
}

pickingGroup = DATA PickingGroup (Item);
namePickingGroup 'Группа комплектации' (Item i) = name(pickingGroup(i)) CHARWIDTH 20 IN itemWMS;
idPickingGroup 'Код группы комплектации' (Item i) = OVERRIDE id(pickingGroup(i)), 0 IF i IS Item MATERIALIZED INDEXED IN itemWMS;

EXTEND FORM item
    PROPERTIES(i) namePickingGroup, idPickingGroup   
;    

EXTEND FORM items
    PROPERTIES(i) READONLY idPickingGroup, namePickingGroup
;

idPickingGroup 'Группа комплектации' = ABSTRACT INTEGER (PickingOrderDetail);

idPickingGroup 'Группа комплектации' = DATA INTEGER (UserPickingOrderDetail);
idPickingGroup(UserPickingOrderDetail detail) += idPickingGroup(detail);

WHEN LOCAL CHANGED(sku(UserPickingOrderDetail detail)) DO {
    idPickingGroup(detail) <- idPickingGroup(sku(detail));           
}

idPickingGroup 'Группа комплектации' = ABSTRACT INTEGER (OrderDetail);
idPickingGroup 'Группа комплектации' = DATA INTEGER (UserOrderDetail);
idPickingGroup(UserOrderDetail detail) += idPickingGroup(detail);
idPickingGroup(OrderPickingOrderDetail detail) += idPickingGroup[Sale.OrderDetail](orderDetail(detail));

EXTEND FORM orders
    PROPERTIES(d) READONLY idPickingGroup
;

WHEN LOCAL CHANGED(sku(UserOrderDetail detail)) DO {
    idPickingGroup(detail) <- idPickingGroup(sku(detail));
}

idPickingGroup 'Группа комплектации' = GROUP MAX idPickingGroup(PickingOrderDetail d) BY pickingOrder(d) MATERIALIZED INDEXED;

EXTEND FORM pickingOrders
    PROPERTIES READONLY idPickingGroup(o)
;

countPickingGroup = GROUP SUM 1 BY idPickingGroup(PickingOrderDetail d), pickingOrder(d);
countPickingGroup = GROUP SUM 1 IF countPickingGroup(INTEGER pickongGroup, PickingOrder po) BY po; 

CONSTRAINT countPickingGroup(PickingOrder po) > 1 
    MESSAGE 'В одном заказе на комплектацию не может быть несколько групп комплектации';

plannedPickingQuantity 'Планируемое к комплектации кол-во' = DATA LOCAL NUMERIC[16,5] (Order, Sku, Bin);
plannedPickingQuantity 'Планируемое к комплектации кол-во' = GROUP SUM plannedPickingQuantity(Order order, Sku sku, Bin bin) BY order, idPickingGroup(sku);
orderPlannedPickingQuantity (Order order, Sku sku, Bin bin) = PARTITION SUM 1 IF plannedPickingQuantity(order, sku, bin) ORDER sku, bin BY order, idPickingGroup(sku); 
pickingOrderNumber(Order order, Sku sku, Bin bin, INTEGER pickingGroup) = ceil((orderPlannedPickingQuantity(order, sku, bin)-1)/maxLinesPick()) IF idPickingGroup(sku)==pickingGroup;

headerCreateUserPickingOrder = ABSTRACT CASE STRING (Order);
headerCreateUserPickingOrder(Order o) += 
    WHEN o IS Order AND NOT countPickingOrder(o) 
        THEN 'Спланировать комплектацию';
headerCreateUserPickingOrder(Order o) += 
    WHEN o IS Order AND countPickingOrder(o) AND NOT (GROUP SUM 1 IF order(PickingOrder po)==o AND NOT statusPicking(po)==StatusPicking.wait) 
        THEN 'Перепланировать комплектацию';
headerCreateUserPickingOrder(Order o) += 
    WHEN o IS Order AND countPickingOrder(o) AND (GROUP SUM 1 IF order(PickingOrder po)==o AND NOT statusPicking(po)==StatusPicking.wait) AND (GROUP SUM 1 IF diffPlannedPickingQuantity(o, Sku sku)) 
        THEN 'Допланировать комплектацию';

overCreateUserPickingOrder ABSTRACT CASE OVERRIDE FIRST (Order);

createUserPickingOrder 'Отправить в комплектацию' (Order o) {
    NEWSESSION {
        CASE WHEN countPickingOrder(o) AND NOT (GROUP SUM 1 IF order(PickingOrder po)==o AND NOT statusPicking(po)==StatusPicking.wait) THEN {
            DELETE PickingOrder po WHERE order(po)==o;
            APPLY;
        }
        WHEN countPickingOrder(o) AND (GROUP SUM 1 IF order(PickingOrder po)==o AND NOT statusPicking(po)==StatusPicking.wait) AND (GROUP SUM 1 IF diffPlannedPickingQuantity(o, Sku sku)<0) THEN {
            MESSAGE 'В заказе были изменения по товару, который находится в комплектации или уже скомплектован: '+ (GROUP CONCAT name(Sku sku) IF diffPlannedPickingQuantity(o, sku)<0, ',\n' ORDER name(sku)) NOWAIT;
            RETURN;
        }
    }
    overCreateUserPickingOrder(o);
} TOOLBAR;

overCreateUserPickingOrder(Order order) + WHEN order IS Order THEN {
    NEWSESSION {
        IF defaultPickingOrderBinOrderOperation() THEN {
            LOCAL NESTED countPickingOrders = INTEGER ();
            LOCAL NESTED countPickingOrder = INTEGER (INTEGER);
            LOCAL NESTED message = STRING ();
            LOCAL quantityLoc = NUMERIC[16,5](Sku);

            quantityLoc(Sku sku) <- diffPlannedPickingQuantity(order, sku) WHERE diffPlannedPickingQuantity(order, sku) > 0;
            plannedPickingQuantity(order, Sku sku, Bin bin) <- 
                PARTITION UNGROUP quantityLoc[Sku] LIMIT availableQuantity(sku, bin) IF availableQuantity(sku, bin)>0 ORDER canonicalId(bin), bin BY sku
                WHERE picking(bin) AND availableQuantity(sku, bin)>0;
            countPickingOrder(INTEGER pickingGroup) <- (GROUP MAX pickingOrderNumber(order, Sku sku, Bin bin, pickingGroup));
            countPickingOrders() <- (GROUP SUM (countPickingOrder(INTEGER pickingGroup)(+)1) IF plannedPickingQuantity(order, pickingGroup)); //Добавляем 1, т.к. нумерация идёт с 0

            CASE
                WHEN NOT (GROUP SUM quantityLoc(Sku sku)) THEN {
                    message() <- 'Нечего отправлять в комплектацию';
                }
                WHEN countPickingOrders() THEN {
                    message() <- 'Создано заказов на комплектацию:'+(countPickingOrders());
                }

            FOR iterate(INTEGER i, 0, countPickingOrder(INTEGER pickingGroup)) ORDER pickingGroup INLINE NEW p = UserPickingOrder DO {
                isPosted(p) <- TRUE;
                order(p) <- order;
                stock(p) <- supplierStock(order);

                FOR plannedPickingQuantity(order, Sku sku, Bin bin) AND pickingOrderNumber(order, sku, bin, pickingGroup)==i INLINE DO NEW pd = UserPickingOrderDetail {
                    userPickingOrder(pd) <- p;
                    sku(pd) <- sku;
                    outBin(pd) <- bin;
                    quantity(pd) <- plannedPickingQuantity(order, sku, bin);
                }
            }
            
            APPLY;
            
            IF canceled() THEN {
                CANCEL;
            } ELSE {
                MESSAGE message() NOWAIT;
            }
            
        } ELSE {
            MESSAGE 'Не задана \'Операция по умолчанию для заказа на комплектацию\'' NOWAIT;
        }    
    }    
}

showCreateUserPickingOrder = ABSTRACT VALUE OVERRIDE FIRST BOOLEAN (Order);
showCreateUserPickingOrder(Order order) += isPosted(order) AND (GROUP SUM 1 IF diffPlannedPickingQuantity(order, Sku s));

EXTEND FORM orders 
    PROPERTIES(o) createUserPickingOrder SHOWIF showCreateUserPickingOrder(o) HEADER headerCreateUserPickingOrder(o)
;

@defineOrderInvoicePickingOrder (' (продажа)');