MODULE SaleOrderPickingOrderBinLedger;

REQUIRE SaleOrder, PickingOrder, OrderPickingOrder, PickingOrderBinLedger, BinSkuLedger, OrderInvoicePickingOrder, 
        SaleInvoice, ReservedBinLedger, OrderPickingOrderBinLedger;

NAMESPACE Sale;

//------------------------------------------------------------------------------------------------------------//

orderedQuantity = GROUP SUM quantity(PickingOrderDetail d) BY order(pickingOrder(d)), sku(d), outBin(d);
orderedQuantity = GROUP SUM quantity(PickingOrderDetail d) BY order(pickingOrder(d)), batch(d), outBin(d);

pickingQuantity = GROUP SUM quantity(PickingDetail d) BY order(pickingOrder(d)), sku(d), outBin(d);
pickingQuantity = GROUP SUM quantity(PickingDetail d) BY order(pickingOrder(d)), batch(d), outBin(d);

diffPickingQuantity(Order order, Sku sku, Bin bin) = orderedQuantity(order, sku, bin) (-) pickingQuantity(order, sku, bin);
diffPickingQuantity(Order order, Batch batch, Bin bin) = orderedQuantity(order, batch, bin) (-) pickingQuantity(order, batch, bin);

namePlannedStatus 'Статус планирования комплектаций' = ABSTRACT VALUE OVERRIDE FIRST STRING (Order) CHARWIDTH 20;
namePlannedStatus(Order order) +=
    (CASE WHEN order IS Order AND (GROUP SUM plannedPickingQuantity(order, Sku sku)) AND (GROUP SUM diffPlannedPickingQuantity(order, Sku sku)) 
            THEN 'Частично спланированы'
         WHEN order IS Order AND (GROUP SUM plannedPickingQuantity(order, Sku sku)) AND NOT (GROUP SUM diffPlannedPickingQuantity(order, Sku sku)) 
            THEN 'Cпланированы'
    ELSE 'Не спланированы');

EXTEND FORM orders
    PROPERTIES(o) READONLY PANEL namePerformer, startDateTime, finishDateTime, packQuantity
    PROPERTIES(o) READONLY BEFORE countOrderDetail(o) namePlannedStatus, nameStatusPicking BACKGROUND backgroundStatusPicking(o),
        pickingOrders
;
DESIGN orders {
    documentHistory {
        NEW picking {
            caption = 'Комплектация';
            horizontal = TRUE;
            MOVE PROPERTY(namePerformer(o));
            MOVE PROPERTY(startDateTime(o));
            MOVE PROPERTY(finishDateTime(o));
            MOVE PROPERTY(packQuantity(o));
        }
    }
}

//---------------------------------- Создание заказа на комплектации ----------------------------------------//

idPickingGroup 'Группа комплектации' = ABSTRACT INTEGER (OrderDetail) MATERIALIZED INDEXED;
idPickingGroup[Order.OrderDetail](OrderDetail detail) += idPickingGroup(detail);
idPickingGroup 'Группа комплектации' = DATA INTEGER (UserOrderDetail);
idPickingGroup(UserOrderDetail detail) += idPickingGroup(detail);

namePickingGroup 'Группа комплектации' (OrderDetail d) = OVERRIDE name(pickingGroup(idPickingGroup(d))), 'Не задана' IF d IS OrderDetail CHARWIDTH 20;

EXTEND FORM orders
    PROPERTIES(d) READONLY idPickingGroup, namePickingGroup
;

WHEN LOCAL CHANGED(sku(UserOrderDetail detail)) DO {
    idPickingGroup(detail) <- idPickingGroup(sku(detail));
}

plannedPickingQuantity 'Планируемое к комплектации кол-во' = DATA LOCAL NUMERIC[16,5] (Order, Sku, Bin);
plannedPickingQuantity 'Планируемое к комплектации кол-во' = GROUP SUM plannedPickingQuantity(Order order, Sku sku, Bin bin) BY order, idPickingGroup(sku);
orderPlannedPickingQuantity (Order order, Sku sku, Bin bin) = PARTITION SUM 1 IF plannedPickingQuantity(order, sku, bin) ORDER sku, bin BY order, idPickingGroup(sku); 
pickingOrderNumber(Order order, Sku sku, Bin bin, INTEGER pickingGroup) = ceil((orderPlannedPickingQuantity(order, sku, bin)-1)/maxLinesPick()) IF idPickingGroup(sku)==pickingGroup;

headerCreateUserPickingOrder = ABSTRACT CASE STRING (Order);
headerCreateUserPickingOrder(Order o) += 
    WHEN o IS Order AND NOT countPickingOrder(o) 
        THEN 'Спланировать комплектацию';
headerCreateUserPickingOrder(Order o) += 
    WHEN o IS Order AND countPickingOrder(o) AND NOT (GROUP SUM 1 IF order(PickingOrder po)==o AND NOT statusPicking(po)==StatusPicking.wait) 
        THEN 'Перепланировать комплектацию';
headerCreateUserPickingOrder(Order o) += 
    WHEN o IS Order AND countPickingOrder(o) AND (GROUP SUM 1 IF order(PickingOrder po)==o AND NOT statusPicking(po)==StatusPicking.wait) AND (GROUP SUM 1 IF diffPlannedPickingQuantity(o, Sku sku)) 
        THEN 'Допланировать комплектацию';

overCreateUserPickingOrder ABSTRACT CASE OVERRIDE FIRST (Order);

createUserPickingOrder 'Отправить в комплектацию' (Order o) {
    NEWSESSION {
        CASE WHEN countPickingOrder(o) AND NOT (GROUP SUM 1 IF order(PickingOrder po)==o AND NOT statusPicking(po)==StatusPicking.wait) THEN {
            DELETE PickingOrder po WHERE order(po)==o;
            APPLY;
        }
        WHEN countPickingOrder(o) AND (GROUP SUM 1 IF order(PickingOrder po)==o AND NOT statusPicking(po)==StatusPicking.wait) AND (GROUP SUM 1 IF diffPlannedPickingQuantity(o, Sku sku)<0) THEN {
            MESSAGE 'В заказе были изменения по товару, который находится в комплектации или уже скомплектован: '+ (GROUP CONCAT name(Sku sku) IF diffPlannedPickingQuantity(o, sku)<0, ',\n' ORDER name(sku)) NOWAIT;
            RETURN;
        }
    }
    overCreateUserPickingOrder(o);
} TOOLBAR;

WHEN DROPPED(Order o IS Order) AND PREV(countPickingOrder(o)) DO {
    IF (GROUP SUM 1 IF PREV(order(PickingOrder po))==o AND NOT statusPicking(po)==StatusPicking.wait) THEN {
        MESSAGE 'По заказу есть задания на комплектацию в работе или уже выполненные(' + 
            (GROUP CONCAT seriesNumber(PickingOrder po) IF (PREV(order(po))==o AND NOT statusPicking(po)==StatusPicking.wait), ', ' ORDER seriesNumber(po), po) +
            '), необходимо удалить их перед удалением самого заказа' NOWAIT;
        CANCEL;
    } ELSE {
        DELETE PickingOrder po WHERE PREV(order(po))==o;
        APPLY;        
    }
}

overCreateUserPickingOrder(Order order) + WHEN order IS Order THEN {
    NEWSESSION {
        IF defaultPickingOrderBinOrderOperation() THEN {
            LOCAL NESTED countPickingOrders = INTEGER ();
            LOCAL NESTED countPickingOrder = INTEGER (INTEGER);
            LOCAL NESTED message = STRING ();
            LOCAL quantityLoc = NUMERIC[16,5](Sku, Order);

            quantityLoc(Sku sku, order) <- diffPlannedPickingQuantity(order, sku) WHERE diffPlannedPickingQuantity(order, sku) > 0;
            plannedPickingQuantity(order, Sku sku, Bin bin) <- 
                PARTITION UNGROUP quantityLoc[Sku, Order] LIMIT availableQuantity(sku, bin) IF picking(bin) AND availableQuantity(sku, bin)>0 ORDER canonicalId(bin), bin BY sku, order
                WHERE picking(bin) AND availableQuantity(sku, bin)>0;
            countPickingOrder(INTEGER pickingGroup) <- (GROUP MAX pickingOrderNumber(order, Sku sku, Bin bin, pickingGroup));
            countPickingOrders() <- (GROUP SUM (countPickingOrder(INTEGER pickingGroup)(+)1) IF plannedPickingQuantity(order, pickingGroup)); //Добавляем 1, т.к. нумерация идёт с 0

            CASE
                WHEN NOT (GROUP SUM quantityLoc(Sku sku, order)) THEN {
                    message() <- 'Нечего отправлять в комплектацию';
                }
                WHEN countPickingOrders() THEN {
                    message() <- 'Создано заказов на комплектацию:'+(countPickingOrders());
                }

            FOR iterate(INTEGER i, 0, countPickingOrder(INTEGER pickingGroup)) ORDER pickingGroup INLINE NEW p = UserPickingOrder DO {
                isPosted(p) <- TRUE;
                order(p) <- order;
                stock(p) <- supplierStock(order);

                FOR plannedPickingQuantity(order, Sku sku, Bin bin) AND pickingOrderNumber(order, sku, bin, pickingGroup)==i INLINE DO NEW pd = UserPickingOrderDetail {
                    userPickingOrder(pd) <- p;
                    sku(pd) <- sku;
                    outBin(pd) <- bin;
                    quantity(pd) <- plannedPickingQuantity(order, sku, bin);
                }
            }
            
            APPLY;
            
            IF canceled() THEN {
                CANCEL;
            } ELSE {
                MESSAGE message() NOWAIT;
            }
            
        } ELSE {
            MESSAGE 'Не задана \'Операция по умолчанию для заказа на комплектацию\'' NOWAIT;
        }    
    }    
}

showCreateUserPickingOrder = ABSTRACT VALUE OVERRIDE FIRST BOOLEAN (Order);
showCreateUserPickingOrder(Order order) += isPosted(order) AND (GROUP SUM 1 IF diffPlannedPickingQuantity(order, Sku s));

EXTEND FORM orders 
    PROPERTIES(o) createUserPickingOrder SHOWIF showCreateUserPickingOrder(o) HEADER headerCreateUserPickingOrder(o)
    PROPERTIES a=(GROUP SUM 1 IF order(PickingOrder po)==o AND NOT statusPicking(po)==StatusPicking.wait)
;

@defineOrderInvoicePickingOrder (' (продажа)');

orderedQuantity = GROUP SUM quantity(PickingOrderDetail d) BY order(pickingOrder(d)), sku(d), outBin(d), idPickingGroup(d);
orderedQuantity = GROUP SUM quantity(PickingOrderDetail d) BY order(pickingOrder(d)), batch(d), outBin(d), idPickingGroup(d);

pickingQuantity = GROUP SUM quantity(PickingDetail d) BY order(pickingOrder(d)), sku(d), outBin(d), idPickingGroup(d);
pickingQuantity = GROUP SUM quantity(PickingDetail d) BY order(pickingOrder(d)), batch(d), outBin(d), idPickingGroup(d);

diffPickingQuantity(Order order, Sku sku, Bin bin, INTEGER pickingGroup) = orderedQuantity(order, sku, bin, pickingGroup) (-) pickingQuantity(order, sku, bin, pickingGroup);
diffPickingQuantity(Order order, Batch batch, Bin bin, INTEGER pickingGroup) = orderedQuantity(order, batch, bin, pickingGroup) (-) pickingQuantity(order, batch, bin, pickingGroup);

countPickedOrderDetail = GROUP SUM 1 IF overPickingQuantity(OrderDetail d) BY order(d), idPickingGroup(d);
countPickedOrderDetail = GROUP SUM 1 IF overPickingQuantity(OrderDetail d) AND inCreatePickingUserInvoicePosted(order(d)) BY idPickingGroup(d);
afterCreatePickingUserInvoicePosted ABSTRACT LIST (UserInvoice, Order.Order, INTEGER); 

createPickingDetail(Invoice userInvoice, Order order, INTEGER pickingGroup) {
    IF useExplicitBatchDetailUserInvoice(order) AND (explicitBatchLedger(fromStock(order)) OR forceExplicitBatchDetailUserInvoice(order)) THEN {
        FOR order(OrderDetail orderDetail) == order AND picking(Batch batch, orderDetail) AND NOT batch(orderDetail) AND idPickingGroup(orderDetail)==pickingGroup
            ORDER orderCreateUserInvoice(orderDetail)
            NEW d = UserInvoiceDetail DO {
            userInvoice(d) <- userInvoice;
            orderDetail(d) <- orderDetail;
            sku(d) <- sku(orderDetail);
            IF NOT skipFillBatch(d) THEN {
                batch(d) <- batch;
            }
            quantity (d) <- picking(batch, orderDetail);

            fill(d, orderDetail);
            overFill(d, orderDetail);
        }
        FOR order(OrderDetail orderDetail) == order AND PREV(overPickingQuantity(orderDetail)) AND batch(orderDetail) AND idPickingGroup(orderDetail)==pickingGroup
            ORDER orderCreateUserInvoice(orderDetail)
            NEW d = UserInvoiceDetail DO {
            userInvoice(d) <- userInvoice;
            orderDetail(d) <- orderDetail;
            sku(d) <- sku(orderDetail);
            IF NOT skipFillBatch(d) THEN {
                batch(d) <- batch(orderDetail);
            }
            quantity (d) <- PREV(overPickingQuantity(orderDetail));

            fill(d, orderDetail);
            overFill(d, orderDetail);
        }
    } ELSE {
        FOR order(OrderDetail orderDetail) == order AND pickingQuantity(orderDetail) > 0 // возможно еще нужно фильтровать по складам
            AND in(orderDetail, userInvoice) AND idPickingGroup(orderDetail)==pickingGroup
            ORDER orderCreateUserInvoice(orderDetail)
            NEW d = UserInvoiceDetail DO {
            userInvoice(d) <- userInvoice;
            orderDetail(d) <- orderDetail;
            sku(d) <- sku(orderDetail);
            IF NOT skipFillBatch(d) THEN {
                batch(d) <- batch(orderDetail);
            }
            quantity (d) <- pickingQuantity(orderDetail);

            fill(d, orderDetail);
            overFill(d, orderDetail);
        }
    }

    IF explicitBatchLedger(fromStock(order)) THEN {
        FOR NUMERIC[16,5] q==excessQuantityPickingPickingDetail(order, Batch batch) AND idPickingGroup(sku(batch))==pickingGroup NEW d = UserInvoiceDetail DO {
            userInvoice(d) <- userInvoice;
            sku(d) <- sku(batch);
            quantity(d) <- q;
            batch(d) <- batch;
        }
    } ELSE {
        FOR excessQuantityPickingPickingDetail(order, Sku sku) > 0 AND idPickingGroup(sku)==pickingGroup NEW d = UserInvoiceDetail DO {
            userInvoice(d) <- userInvoice;
            sku(d) <- sku;
            quantity(d) <- excessQuantityPickingPickingDetail(order, sku);
        }
    }
}

createPickingUserInvoicePostedByPickingGroup 'Создать проведенные накладные по комплектации'(Order order) {
    IF order IS Order THEN {
        userInvoice(order) <- NULL;
        IF countInCreatePickingUserInvoicePostedOrder() THEN {
            IF countParamsInCreatePickingUserInvoicePostedOrder() > 1 THEN {
                MESSAGE 'По выбранным заказам не может быть создана одна накладная';
            } ELSE {
                FOR countPickedOrderDetail(INTEGER pickingGroup) ORDER pickingGroup NEW i = UserInvoice DO {
                    isPosted(i) <- TRUE;
                    fillHeader(i, (GROUP MAX Order.Order o IF inCreatePickingUserInvoicePosted(o)));
                    FOR inCreatePickingUserInvoicePosted(Order.Order o) AND countPickedOrderDetail(o, pickingGroup) DO {
                        createPickingDetail(i, o, pickingGroup);
                        fillPrice(i, o);
                        createdUser(i, o) <- TRUE;
                        include[Order,UserInvoice](o,i) <- TRUE;
                    }
                    extraPickingDetail(i);
                    packQuantity(i) <- (GROUP SUM packQuantity(Order.Order o) IF inCreatePickingUserInvoicePosted(o));
                    executeLocalEvents('Sale.userInvoice');
                    FOR inCreatePickingUserInvoicePosted(Order.Order o) AND countPickedOrderDetail(o, pickingGroup) DO {
                        afterCreatePickingUserInvoicePosted(i, o, pickingGroup);                        
                    }
                    IF showPickingUserInvoicePosted() THEN {
                        SHOW userInvoice OBJECTS i = i DOCKED NOCANCEL;
                    }
                }
            }
        } ELSE {
            FOR countPickedOrderDetail(order, INTEGER pickingGroup) ORDER pickingGroup NEW i = UserInvoice DO {
                isPosted(i) <- TRUE;
                fillHeader(i, order);
                createPickingDetail(i, order, pickingGroup);
                fillPrice(i, order);
                packQuantity(i) <- packQuantity(order);
                createdUser(i, order) <- TRUE;
                userInvoice(order) <- i;
                include[Order,UserInvoice](order,i) <- TRUE;
                executeLocalEvents('Sale.userInvoice');
                afterCreatePickingUserInvoicePosted(i, order, pickingGroup);
                IF showPickingUserInvoicePosted() THEN {
                    SHOW userInvoice OBJECTS i = i DOCKED NOCANCEL;
                }
            }
        }
    }
}

useOverCreatePickingUserInvoicePosted() += createInvoicesByPickingGroup();
overCreatePickingUserInvoicePosted(Order o) + {createPickingUserInvoicePostedByPickingGroup(o);}
namePickingGroupSku(InvoiceDetail d) = namePickingGroup(sku(d));