MODULE BinTransfer;

REQUIRE BinLedger, BinOrder;

NAMESPACE Bin;

CLASS ABSTRACT BinTransfer 'Перемещение по ячейкам': Document;
CLASS ABSTRACT BinTransferDetail 'Строка перемещения по ячейкам': DocumentDetail;

CLASS UserBinTransfer 'Перемещение по ячейкам (польз.)': BinTransfer;
CLASS UserBinTransferDetail 'Строка перемещения по ячейкам': BinTransferDetail;

@defineDocumentInterface(binTransfer);

GROUP binTransfer 'Информация о перемещении' : base;

@defineDocumentInterfaceDetailPrice(binTransfer);

@deriveDocumentHeaderTimePrefix(UserBinTransfer, );

@defineDocumentInterfaceNumber(binTransfer, BPSTRING[2]);

@defineDocumentInterfacePosted(binTransfer);

@defineDocumentInterfaceClosed(binTransfer);

@defineDocumentInterfaceDataStock(binTransfer, stock, 'Склад');

@defineDocumentInterfaceDescription(binTransfer, 'Перемещение по ячейкам');

@defineDocumentInterfaceDetailSku(binTransfer, sku);

@defineAddDetailDialogBarcode(userBinTransfer, sku);

@defineDocumentInterfaceDetailQuantity(binTransfer);

@defineDocumentDetailGrossWeight(binTransfer, sku);

@defineDocumentHeaderSkuQuantity(binTransfer, sku);

@defineDocumentHeaderQuantity(binTransfer);

@defineDocumentBins(binTransfer);

useBins(UserBinTransfer transfer) <- TRUE WHEN SET(transfer IS UserBinTransfer);

@setBinDocument(UserBinTransfer, stock);

@implementDocument(binTransfer);
supplierStock[Document](BinTransfer binTransfer) += stock(binTransfer);

@implementDocumentForm(binTransfer, bt, 'Перемещение по ячейкам');

@defineAddDetailDialogSkuStock(userBinTransfer, sku, stock, dialogSku);

//пользовательский заказ на перемещение
@defineExternalizable(userBinTransfer, STRING[100]);

@defineExternalizable(userBinTransferDetail, STRING[100]);

@defineNumeratedDefault(UserBinTransfer, 'Перемещения по ячейкам ', 'ПП');

disablePosted 'Запретить проведение' = ABSTRACT BOOLEAN (UserBinTransfer);
overPrePost 'Провести' (UserBinTransfer o)  { 
    IF NOT disablePosted(o) THEN {
        isPosted(o) <- TRUE;
    } 
}

//вес трансфера
sumGrossWeight 'Вес брутто, кг' = ABSTRACT NUMERIC[14,3] (BinTransferDetail);        
sumGrossWeight 'Вес брутто, кг' = DATA NUMERIC[14,3] (UserBinTransferDetail);
sumGrossWeight(UserBinTransferDetail d) += sumGrossWeight(d);
   
sumGrossWeight(UserBinTransferDetail d) <- grossWeight(sku(d)) * quantity(d)
    WHEN CHANGED(sku(d)) OR CHANGED(quantity(d));
              
@defineDocumentHeaderGrossWeightCustomPrefix (binTransfer, binTransferDetail, sum, ', кг');
@defineDocumentHeaderGrossWeightCustomPrefix (userBinTransfer, userBinTransferDetail, sum, ', кг'); 

@defineDocumentDialogStocks(userBinTransfer, stock, company, , );

FORM userBinTransfer 'Перемещение по ячейкам (польз.)'
    OBJECTS o = UserBinTransfer PANEL
    PROPERTIES (o) isPosted, nameStock ON CHANGE changeStockCompany(o), nameNumerator, number, series, date, time, note, 
                   nameOutBin ON CHANGE setOutBin(o), nameInBin ON CHANGE setInBin(o)
    PROPERTIES (o) READONLY countUserBinTransferDetail, quantityBinTransferDetail, sumGrossWeightUserBinTransferDetail 
    
    OBJECTS d = UserBinTransferDetail
    PROPERTIES (d) index, idBarcodeSku, idSku, nameSku, shortNameUOMSku, nameOutBin ON CHANGE setOutBin(d), nameInBin ON CHANGE setInBin(d), quantity, sumGrossWeight
    PROPERTIES (d) NEW, deleteod = DELETE GRID
    PROPERTIES(o) DRAW d fillDocument, addDetailDialogSkuStockUserBinTransferDetail,
                           addDetailInputBarcodeUserBinTransferDetail, deleteUserBinTransferDetail
    FILTERS binTransfer(d)==o
    ORDERS index(d)
    EDIT UserBinTransfer OBJECT o
    
    EVENTS
        ON OK overPrePost(o)
;

DESIGN userBinTransfer {

    BOX {
        size = (1024, 768);
        NEW mainTabbed {
            tabbed = TRUE;
            fill = 1;
            NEW documentBox{
                fill = 1;
                caption = 'Перемещение';
                NEW headerBox {
                    horizontal = TRUE;
    
                    NEW headerRow1 {
                        fill = 1;
                        MOVE GROUP(documentHeader,o) {
                            lines = 1;
                            NEW first {
                                horizontal = TRUE;
                                MOVE PROPERTY(isPosted(o));
                            }
                            NEW second { 
                                horizontal = TRUE;
                                MOVE PROPERTY(nameNumerator(o));
                                MOVE PROPERTY(number(o));
                                MOVE PROPERTY(series(o));
                                MOVE PROPERTY(date(o));
                                MOVE PROPERTY(time(o));
                                MOVE PROPERTY(nameStock(o));
                            }    
                        }                    
                        
                        NEW headerRow11 {
                            horizontal = TRUE;
                        }
                        NEW headerTabbedPane {
                            alignment = STRETCH;
                            tabbed = TRUE;
                            NEW headerMainParams {
                                caption = 'Основные параметры';
                                MOVE GROUP(documentPrm,o) {
                                    lines = 3;
                                }
                            }
                        }
                    }
    
                    MOVE GROUP(documentSum,o) {
                        lines = 1;
                    }
                }
                NEW specificationBox {
                    fill = 1;
                    tabbed = TRUE;
                    MOVE BOX(d) {
                        caption = 'Спецификация';
                    }
                }
            }
        }
        MOVE TOOLBARBOX;

        PROPERTY(formOk()) {
            caption = 'Провести';
        }                               
    }
}


overShowEdit = ABSTRACT BOOLEAN (BinTransfer);
overShowDelete = ABSTRACT BOOLEAN (BinTransfer); 

skipToShowEdit = ABSTRACT BOOLEAN (BinTransfer);
skipToShowDelete = ABSTRACT BOOLEAN (BinTransfer);
overShowEdit (BinTransfer o) += isOpened(o) AND NOT skipToShowEdit(o);

isUserOpened(UserBinTransfer o)=  isOpened[BinTransfer](o) AND is(o);
overShowDelete (UserBinTransfer o) += isUserOpened(o) AND NOT skipToShowDelete(o); 

overCopy  ABSTRACT LIST ( UserBinTransferDetail, BinTransferDetail);
overCopy  ABSTRACT LIST ( BinTransfer, UserBinTransfer);
copy 'Копировать'(BinTransfer transfer)  { 
	NEWSESSION {
	    NEW o = UserBinTransfer {
	    	stock(o) <- stock(transfer);
	        inBin(o) <- inBin(transfer);
	        outBin(o) <- outBin(transfer);
	        note(o) <- note(transfer);
	
	        EXEC overCopy(transfer, o);
	
	        FOR binTransfer(BinTransferDetail transferDetail) == transfer DO {
	            NEW d=UserBinTransferDetail {
	                userBinTransfer(d) <- o;
	                sku(d) <- sku(transferDetail);
	                quantity(d) <- quantity(transferDetail);
                    inBin(d) <- inBin(transferDetail);
                    outBin(d) <- outBin(transferDetail);
	                
	                EXEC overCopy(d, transferDetail);
	            }
	        }
	
	        SHOW userBinTransfer OBJECTS o = o DOCKED;
	    }
	}
} TOOLBAR;
    
//-- Копирование строк     
overCopy  ABSTRACT LIST ( UserBinTransferDetail, UserBinTransferDetail);

copy 'Копировать'(UserBinTransferDetail detail)  { 
    NEW d = UserBinTransferDetail {          

        userBinTransfer(d) <- userBinTransfer(detail);
        sku(d) <- sku(detail);
        quantity(d) <- quantity(detail);
        outBin(d) <- outBin(detail);
        inBin(d) <- inBin(detail);
        
        EXEC overCopy(d, detail);                              
    }
} CHANGEKEY 'F6' TOOLBAR;

filterBinTransferDateFrom 'Дата с' = DATA LOCAL DATE ();
filterDateFrom (BinTransfer o) = date(o) >= filterBinTransferDateFrom() OR (o IS BinTransfer AND NOT filterBinTransferDateFrom());      

filterBinTransferDateTo 'Дата по' = DATA LOCAL DATE ();
filterDateTo (BinTransfer o) = date(o) <= filterBinTransferDateTo() OR (o IS BinTransfer AND NOT filterBinTransferDateTo());      

filterBinTransferStock  = DATA LOCAL Stock ();
nameFilterBinTransferStock 'Склад' = name(filterBinTransferStock()) CHARWIDTH 15;          
filterStock (BinTransfer o) = stock(o) == filterBinTransferStock() OR (o IS BinTransfer AND NOT filterBinTransferStock());

filterBinTransferCustomUser  = DATA LOCAL CustomUser ();
nameFilterBinTransferCustomUser 'Создан пользователем' = name[Contact](filterBinTransferCustomUser()) CHARWIDTH 15;          
filterBinCustomUser (BinTransfer i) = createdUser[UserBinTransfer](i) == filterBinTransferCustomUser() OR (i IS BinTransfer AND NOT filterBinTransferCustomUser());  

filterBinTransferComputer = DATA LOCAL Computer ();
nameFilterBinTransferComputer 'Создан на компьютере' = hostname(filterBinTransferComputer()) CHARWIDTH 15;          
filterComputer (BinTransfer i) = createdComputer(i) == filterBinTransferComputer() OR (i IS BinTransfer AND NOT filterBinTransferComputer());
    
show 'Просмотреть' (UserBinTransfer o)   { 
    NEWSESSION{
        SHOW userBinTransfer OBJECTS o = o DOCKED READONLY;
    }
    
}TOOLBAR;
    
showToShow (UserBinTransfer i) = is(i) AND NOT overShowEdit(i);
 
FORM binTransfers  'Перемещения по ячейкам'
    PROPERTIES() filterBinTransferDateFrom, filterBinTransferDateTo, nameFilterBinTransferStock, nameFilterBinTransferCustomUser, nameFilterBinTransferComputer
    
    OBJECTS o = BinTransfer LAST
    PROPERTIES (o) READONLYIF isReadonly() isClosed, isPosted, number, series, date, time, nameStock, nameOutBin, nameInBin, note,
                            countBinTransferDetail, quantityBinTransferDetail, sumGrossWeightUserBinTransferDetail GRID    
    
    FILTERS filterDateFrom(o), filterDateTo(o), filterStock(o)
       
    OBJECTS d = BinTransferDetail
    PROPERTIES (d) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku, nameOutBin, nameInBin, quantity, sumGrossWeight
    
    PROPERTIES (o) READONLY PANEL createdNameUser[UserBinTransfer], createdTime, createdHostnameComputer, 
                                        postedNameUser, postedTime, postedHostnameComputer

    PROPERTIES (o) NEWSESSION addUserBinTransfer = NEW[UserBinTransfer], EDIT SHOWIF overShowEdit(o) 
    PROPERTIES (o) copy
    PROPERTIES (o) close[UserBinTransfer] SHOWIF isOpened[UserBinTransfer](o), open SHOWIF isClosed[UserBinTransfer](o)
    PROPERTIES     NEWSESSION deleteo=DELETE(o) SHOWIF overShowDelete(o) //isUserOpenedTransfer(o)
            
    FILTERS binTransfer(d)==o
    ORDERS index(d)
    LIST BinTransfer OBJECT o
;

DESIGN binTransfers 'Перемещения по ячейкам' {
    NEW documentContainer BEFORE TOOLBARBOX {
        fill = 1;

        NEW filtersBox {                       
            fill = 1;
            NEW topFilters {  
                caption = 'Фильтры';
                NEW topFilters1 {
                    horizontal = TRUE; 
                    MOVE PROPERTY(filterBinTransferDateFrom());
                    MOVE PROPERTY(filterBinTransferDateTo());                            
                    MOVE PROPERTY(nameFilterBinTransferStock());
                    MOVE PROPERTY(nameFilterBinTransferCustomUser());
                    MOVE PROPERTY(nameFilterBinTransferComputer());
                }
            }
            MOVE BOX(o) {
                fill = 1;
            }
        }

        NEW documentDetail {
            fill = 1;
            tabbed = TRUE;

            MOVE BOX(d) {
                fill = 1;
                caption = 'Спецификация';
            }
            NEW documentHistory {
                caption = 'История';
                MOVE GROUP(created,o);
                MOVE GROUP(posted,o);
            }
            NEW printTab {
                caption = 'Печатные формы';
                NEW printContainer {
                    caption = 'Печать';
                }
            }
            NEW actionContainer {
                caption = 'Действия';
                horizontal = TRUE;
                NEW createdContainer {
                    caption = 'Создание на основе';
                    MOVE PROPERTY(copy(o)) { caption = 'Перемещение';}
                }
            }
        }
    }
}
@extendFormFilterAccessStock(o, binTransfers, stock, company);
@extendFormEditable(binTransfers);

@defineFilterIsOpened (binTransfer, binTransfers, o);

@defineDocumentLogForm(binTransfers, o);

//Операция
@defineDocumentOperationContainer(binTransfer, o, isPostedBintransfer, nameStock, first, name, );

overCopy(BinTransfer transfer, UserBinTransfer userTransfer) + { 
    operation(userTransfer) <- operation(transfer);    
}

@defineDocumentOperationRoleOver(UserBinTransfer, bin);

@defineOperationFilterProperty(binTransfer, o, binTransfers, nameFilterBinTransferStock);

@extendFormFilterAccessStock(BinTransfer, o, binTransfers, stock, company);
@defineDocumentStockAccess(UserBinTransfer, stock, company);

@defineDocumentOperationConstraint(binTransfer, 'перемещение по ячейкам', Bin);

CONSTRAINT operation(BinTransfer binTransfer) AND stock(binTransfer) 
           AND NOT in(stock(binTransfer), operation(binTransfer))
    CHECKED BY stock[UserBinTransfer]
    MESSAGE 'Склад должен совпадать с отмеченными в операции';
CONSTRAINT operation(BinTransfer binTransfer) AND isPosted(binTransfer) 
           AND NOT stock(binTransfer) AND needStock(operation(binTransfer))
    MESSAGE 'Склад должен быть задан для документа';

@deriveDocumentBins (userBinTransfer, userBinTransfer, inBin, inBin, outBin, outBin, stock);

@defineBinDocumentConstraints(userBinTransfer);

@defineDocumentSkuStockPriceListTypeSystemLedger(userBinTransfer, );

@extendFormDocumentSkuStock(userBinTransfer, userBinTransfer, o, , );

bins 'Ячейки с остатком' (Sku sku, BinTransfer transfer) = bins(sku, stock(transfer));
prevCurrentBalanceOutBin 'Текущий остаток (ячейка из)' (Sku sku, BinTransfer transfer) = prevCurrentBalance(sku, outBin(transfer));
prevCurrentBalanceInBin 'Текущий остаток (ячейка в)' (Sku sku, BinTransfer transfer) = prevCurrentBalance(sku, inBin(transfer));

EXTEND FORM userBinTransfer
    PROPERTIES (ks, o) READONLY AFTER prevCurrentBalance(ks, st) bins, prevCurrentBalanceOutBin, prevCurrentBalanceInBin
    FILTERGROUP filter
        FILTER 'С остатком (ячейка из)' prevCurrentBalanceOutBin(ks, o) 'F7' 
        FILTER 'С остатком ' currentBalance(ks,st) 'F10' DEFAULT
        FILTER 'В документе ' quantity(ks, o, st) 'F9'
;

//упаковка
@defineDocumentPack(binTransfer, o);

packQuantity 'Кол-во упаковок в документе' (sku, userBinTransfer, stock) = GROUP SUM packQuantity(UserBinTransferDetail userBinTransferDetail)
    BY sku(userBinTransferDetail), userBinTransfer(userBinTransferDetail), stock(userBinTransferDetail);

changePackQuantity(Sku sku, UserBinTransfer userBinTransfer, Stock stock)  { 
    INPUT n = NUMERIC[16,5] DO
        IF userBinTransferDetail(sku, userBinTransfer, stock) THEN {
            IF n THEN {
                packQuantity(UserBinTransferDetail userBinTransferDetail) <- n WHERE userBinTransferDetail == userBinTransferDetail(sku, userBinTransfer, stock);
                quantity(UserBinTransferDetail userBinTransferDetail) <- NUMERIC[16,5](packQuantity(userBinTransferDetail)*(OVERRIDE amountPack(userBinTransferDetail), 1.0)) 
                                        WHERE userBinTransferDetail == userBinTransferDetail(sku, userBinTransfer, stock) AND NOT skipChangeQuantity(userBinTransferDetail(sku, userBinTransfer, stock));
            } ELSE {
                FOR userBinTransferDetail(sku, userBinTransfer, stock) == UserBinTransferDetail d DO
                    DELETE d;
            }
        } ELSE {
            IF n THEN  {
                NEW d = UserBinTransferDetail {
                   userBinTransfer(d) <- userBinTransfer;
                   sku(d) <- sku;
                   packQuantity (d) <- n;
                   quantity(d) <- NUMERIC[16,5](packQuantity(d) * (OVERRIDE amountPack(d), 1.0));
                }
            }
        }
}

changeAmountPack(Sku sku, UserBinTransfer userBinTransfer, Stock stock)  { 
    INPUT n = NUMERIC[14,3] DO {
        IF userBinTransferDetail(sku, userBinTransfer, stock) THEN {
            IF n THEN {
                amountPack(UserBinTransferDetail userBinTransferDetail) <- n WHERE userBinTransferDetail == userBinTransferDetail(sku, userBinTransfer, stock);
                quantity(UserBinTransferDetail userBinTransferDetail) <- NUMERIC[16,5](packQuantity(userBinTransferDetail)*(OVERRIDE amountPack(userBinTransferDetail), 1.0)) 
                                        WHERE userBinTransferDetail == userBinTransferDetail(sku, userBinTransfer, stock) AND packQuantity(userBinTransferDetail) AND NOT skipChangeQuantity(userBinTransferDetail(sku, userBinTransfer, stock));
            } ELSE {
                amountPack(UserBinTransferDetail userBinTransferDetail) <- NULL WHERE userBinTransferDetail == userBinTransferDetail(sku, userBinTransfer, stock);
            }
    
        }
        changeValuePack(sku, n);
    }
}

@extendFormDocumentPackSkuStock(userBinTransfer, userBinTransfer, o, );

@deriveDocumentOperationProperty(UserBinTransfer, showPack);

//проведение по регистру
EXTEND CLASS BinTransferDetail: BinLedger;
    
@implementBinLedger(binTransferDetail, stock);

NAVIGATOR {
    WMSNavigator {
         WMSDocument {
            NEW binTransfers;
         }
    }
}

//ячейка в
inUsageType 'Тип использования (в)' = DATA UsageType (Operation);
staticCaptionInUsageType 'Ограничение по типу использования использования (в)' (Operation o) = staticCaption(inUsageType(o));
matchInUsageType (Bin b, Operation o) = in(b, inUsageType(o)) OR b IS Bin AND NOT inUsageType(o);
CONSTRAINT inBin(Operation o, stock(Bin bin)) = bin AND NOT matchInUsageType(bin, o)
    MESSAGE 'Нельзя задавать "ячейку (в)" склада неудовлетворющую типу использования операции';

// Отметка для групп
dataInBin 'Отм.' = DATA BOOLEAN (BinGroup, Operation);
countDataInBinGroups (Operation operation) = GROUP SUM 1 IF  dataInBin(BinGroup binGroup, operation);

levelParentInBin(Operation operation, BinGroup binGroup)  =
    GROUP
        MIN level(binGroup, BinGroup parent) IF dataInBin(parent, operation) MATERIALIZED;
nearestParentInBinGroup (Operation operation, BinGroup binGroup) = binGroup(binGroup, levelParentInBin(operation, binGroup));
nearestInBin (BinGroup binGroup, Operation operation) =
    dataInBin(nearestParentInBinGroup(operation, binGroup), operation) MATERIALIZED;

inBin 'Отм' (BinGroup binGroup, Operation operation) =
    OVERRIDE dataInBin(binGroup, operation),
        nearestInBin(binGroup, operation);

// Отметка для ячеек
dataInBin 'Отм.' = DATA BOOLEAN (Bin, Operation);
countDataInBins (Operation operation) = GROUP SUM 1 IF  dataInBin(Bin bin, operation);


inBin 'Отм' (Bin bin, Operation operation) =
    (OVERRIDE dataInBin(bin, operation),
        inBin(binGroup(bin), operation), inBin(operation, stock(bin)) = bin AND in(stock(bin), operation)) AND matchInUsageType(bin, operation);


quantityChildWithInBin(BinGroup group, Operation operation)  = GROUP SUM 1 IF dataInBin(BinGroup childGroup, operation) AND isParent(childGroup, group) MATERIALIZED;
quantityParentWithInBin(BinGroup group, Operation operation)  = GROUP SUM 1 IF dataInBin(BinGroup parentGroup, operation) AND isParent(group, parentGroup) MATERIALIZED;

backgroundInBin 'Цвет' (BinGroup group, Operation operation) = CASE
    WHEN dataInBin(group, operation) THEN RGB(0,0,0)
    WHEN nearestInBin(group, operation) THEN RGB(230,248,250)
    WHEN quantityChildWithInBin(group, operation) != descendantNumber(group) AND NOT quantityParentWithInBin(group, operation) THEN RGB(203,203,203);


backgroundInBin 'Цвет' (Bin bin, Operation operation) = IF dataInBin(bin, operation) THEN RGB(0,0,0)
    ELSE RGB(230,248,250)
        IF inBin(binGroup(bin), operation);

//ячейка из
outUsageType 'Тип использования (из)' = DATA UsageType (Operation);
staticCaptionOutUsageType 'Ограничение по типу использования (из)' (Operation o) = staticCaption(outUsageType(o));
matchOutUsageType (Bin b, Operation o) = in(b, outUsageType(o)) OR b IS Bin AND o IS Operation AND NOT outUsageType(o);

CONSTRAINT outBin(Operation o, stock(Bin bin)) = bin AND NOT matchOutUsageType(bin, o) 
    MESSAGE 'Нельзя задавать "ячейку (из)" склада неудовлетворющую типу использования операции'; 

// Отметка для групп
dataOutBin 'Отм.' = DATA BOOLEAN (BinGroup, Operation);

levelParentOutBin(Operation operation, BinGroup binGroup)  =
    GROUP
        MIN level(binGroup, BinGroup parent) IF dataOutBin(parent, operation) MATERIALIZED;
nearestParentOutBinGroup (Operation operation, BinGroup binGroup) = binGroup(binGroup, levelParentOutBin(operation, binGroup));
nearestOutBin (BinGroup binGroup, Operation operation) =
    dataOutBin(nearestParentOutBinGroup(operation, binGroup), operation) MATERIALIZED;

outBin 'Отм' (BinGroup binGroup, Operation operation) =
    OVERRIDE dataOutBin(binGroup, operation),
        nearestOutBin(binGroup, operation);

// Отметка для ячеек
dataOutBin 'Отм.' = DATA BOOLEAN (Bin, Operation);
countDataOutBins (Operation operation) = GROUP SUM 1 IF  dataOutBin(Bin bin, operation);

outBin 'Отм' (Bin bin, Operation operation) =
    (OVERRIDE dataOutBin(bin, operation),
        outBin(binGroup(bin), operation), outBin (operation, stock(bin)) = bin AND in(stock(bin), operation)) AND matchOutUsageType(bin, operation);

countDataOutBinGroups (Operation operation) = GROUP SUM 1 IF  dataOutBin(BinGroup binGroup, operation);

quantityChildWithOutBin(BinGroup group, Operation operation)  = GROUP SUM 1 IF dataOutBin(BinGroup childGroup, operation) AND isParent(childGroup, group) MATERIALIZED;
quantityParentWithOutBin(BinGroup group, Operation operation)  = GROUP SUM 1 IF dataOutBin(BinGroup parentGroup, operation) AND isParent(group, parentGroup) MATERIALIZED;

backgroundOutBin 'Цвет' (BinGroup group, Operation operation) = CASE
    WHEN dataOutBin(group, operation) THEN RGB(0,0,0)
    WHEN nearestOutBin(group, operation) THEN RGB(230,248,250)
    WHEN quantityChildWithOutBin(group, operation) != descendantNumber(group) AND NOT quantityParentWithOutBin(group, operation) THEN RGB(203,203,203);


backgroundOutBin 'Цвет' (Bin bin, Operation operation) = IF dataOutBin(bin, operation) THEN RGB(0,0,0)
    ELSE RGB(230,248,250)
        IF outBin(binGroup(bin), operation);

levelBinGroup 'Общий родитель заданного уровня' = DATA INTEGER (Operation);
needIn '"Ячейка (в)" обязательна' = DATA BOOLEAN (Operation);
needOut '"Ячейка (из)" обязательна' = DATA BOOLEAN (Operation);

EXTEND FORM operation
    TREE inGroupTree inbing = BinGroup PARENT parent(inbing)
    PROPERTIES READONLY inbingTreeName = name(inbing)
    PROPERTIES inBin(inbing, o) BACKGROUND backgroundInBin(inbing, o)
    FILTERS in(stock(inbing), o)
    
    OBJECTS inbin = Bin
    PROPERTIES(inbin, o) inBin BACKGROUND backgroundInBin(inbin, o)
    PROPERTIES(inbin) READONLY canonicalId, nameBinGroup, name, id SHOWIF showIDs()
    ORDERS canonicalId(inbin)
    FILTERS inbin IS Bin AND NOT inbing IS BinGroup OR
        isParent(inbing, inbin)
    FILTERGROUP inBinFilters3
        FILTER 'Показывать отмеченные' inBin(inbin, o) 'F10'

    FILTERGROUP inUsageBinFilters
        FILTER 'По типу использования' matchInUsageType(inbin, o) DEFAULT

    TREE outGroupTree outbing = BinGroup PARENT parent(outbing)
    PROPERTIES READONLY outbingTreeName = name(outbing)
    PROPERTIES outBin(outbing, o) BACKGROUND backgroundOutBin(outbing, o)
    FILTERS in(stock(outbing), o)

    OBJECTS outbin = Bin
    PROPERTIES(outbin, o) outBin BACKGROUND backgroundOutBin(outbin, o)
    PROPERTIES(outbin) READONLY canonicalId, nameBinGroup, name, id SHOWIF showIDs()
    ORDERS canonicalId(outbin)
    FILTERS outbin IS Bin AND NOT outbing IS BinGroup OR
        isParent(outbing, outbin)
    FILTERGROUP outBinFilters3
        FILTER 'Показывать отмеченные' outBin(outbin, o) 'F10'
    FILTERGROUP outUsageBinFilters
        FILTER 'По типу использования' matchOutUsageType(outbin, o) DEFAULT


    PROPERTIES(o) levelBinGroup, staticCaptionOutUsageType, staticCaptionInUsageType, needIn, needOut
;

DESIGN operation {
    tabContainer {
        NEW binContainer{
            caption = 'Ячейки';
            fill = 1;
            NEW outBinContainer {
                fill = 1;
                caption = 'Ячейки (из)';
                NEW splitOutBinContainer{
                    horizontal = TRUE;
                    fill = 1;
                    MOVE BOX(TREE outGroupTree);
                    MOVE BOX(outbin) {
                        fill = 3;
                    }
                }
            }
            NEW inBinContainer {
                caption = 'Ячейки (в)';
                fill = 1;
                NEW splitInBinContainer{
                    horizontal = TRUE;
                    fill = 1;
                    MOVE BOX(TREE inGroupTree);
                    MOVE BOX(inbin) {
                        fill = 3;
                    }
                }
            }
            constraintContainer {
                NEW additionalContainer {
                    MOVE PROPERTY(levelBinGroup(o));
                    NEW additionalInOutContainer {
                        horizontal = TRUE;
                        NEW additionalOutContainer {
                            caption = 'Ячейки из';
                            MOVE PROPERTY(staticCaptionOutUsageType(o));
                            MOVE PROPERTY(needOut(o));
                        }
                        NEW additionalInContainer {
                            caption = 'Ячейки в';
                            MOVE PROPERTY(staticCaptionInUsageType(o));
                            MOVE PROPERTY(needIn(o));
                        }
                    }
                }
            }
            
        }
    }
}

CONSTRAINT (SETCHANGED(operation(BinTransferDetail d)) OR SETCHANGED(inBin(d)) OR SETCHANGED(outBin(d)))
    AND levelBinGroup(operation(d)) AND inBin(d) AND outBin(d)
    AND NOT binGroupRoot(binGroup(inBin(d)), levelBinGroup(operation(d))) = binGroupRoot(binGroup(outBin(d)), levelBinGroup(operation(d)))
    CHECKED BY inBin[UserBinTransferDetail], outBin[UserBinTransferDetail]
    MESSAGE 'Несовпадение группы ячеек строки заданного в операции уровня';

CONSTRAINT (SETCHANGED(operation(BinTransfer t)) OR SETCHANGED(inBin(t)) OR SETCHANGED(outBin(t)))
    AND levelBinGroup(operation(t)) AND inBin(t) AND outBin(t)
    AND NOT binGroupRoot(binGroup(inBin(t)), levelBinGroup(operation(t))) = binGroupRoot(binGroup(outBin(t)), levelBinGroup(operation(t)))
    CHECKED BY inBin[UserBinTransfer], outBin[UserBinTransfer]
    MESSAGE 'Несовпадение группы ячеек документа заданного в операции уровня';

CONSTRAINT (SETCHANGED(operation(BinTransferDetail d)) OR SETCHANGED(inBin(d))) AND inBin(d)
    AND NOT inBin(inBin(d), operation(d))
    CHECKED BY inBin[UserBinTransferDetail]
    MESSAGE '"Ячейка (в)" строки должна совпадать с отмеченными в операции';

CONSTRAINT (SETCHANGED(operation(BinTransfer t)) OR SETCHANGED(inBin(t))) AND inBin(t)
    AND NOT inBin(inBin(t), operation(t))
    CHECKED BY inBin[UserBinTransfer]
    MESSAGE '"Ячейка (в)" документа должна совпадать с отмеченными в операции';

CONSTRAINT (SETCHANGED(operation(BinTransferDetail d)) OR SETCHANGED(outBin(d))) AND outBin(d)
    AND NOT outBin(outBin(d), operation(d))
    CHECKED BY outBin[UserBinTransferDetail]
    MESSAGE '"Ячейка (из)" строки должна совпадать с отмеченными в операции';

CONSTRAINT (SETCHANGED(operation(BinTransfer t)) OR SETCHANGED(outBin(t))) AND outBin(t)
    AND NOT outBin(outBin(t), operation(t))
    CHECKED BY outBin[UserBinTransfer]
    MESSAGE '"Ячейка (из)" документа должна совпадать с отмеченными в операции';

CONSTRAINT (SETCHANGED(operation(BinTransferDetail d)) OR DROPPED(outBin(d))) AND NOT outBin(d)
    AND needOut(operation(d))
    CHECKED BY outBin[UserBinTransferDetail]
    MESSAGE '"Ячейка (из)" обязательна для заданной операции';
CONSTRAINT (SETCHANGED(operation(BinTransferDetail d)) OR DROPPED(inBin(d))) AND NOT inBin(d)
    AND needIn(operation(d))
    CHECKED BY inBin[UserBinTransferDetail]
    MESSAGE '"Ячейка (в)" обязательна для заданной операции';

onStarted() + {
    IF (GROUP MAX Operation o IF o IS Operation)
        AND NOT (GROUP MAX Operation o1 IF countDataInBins(o1) OR countDataInBinGroups(o1)
                                            OR countDataOutBins(o1) OR countDataOutBinGroups(o1)) THEN {
        dataInBin(StockBinGroup bg, Operation o1) <- TRUE WHERE bg IS StockBinGroup AND in(stock(bg), o1);
        dataOutBin(StockBinGroup bg, Operation o1) <- TRUE WHERE bg IS StockBinGroup AND in(stock(bg), o1);
    }
}
