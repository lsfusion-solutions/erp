MODULE BinTransfer;

REQUIRE BinLedger, BinOrder;

NAMESPACE Bin;

CLASS ABSTRACT BinTransfer 'Перемещение по ячейкам': Document;
CLASS ABSTRACT BinTransferDetail 'Строка перемещения по ячейкам': DocumentDetail;

CLASS UserBinTransfer 'Перемещение по ячейкам (польз.)': BinTransfer;
CLASS UserBinTransferDetail 'Строка перемещения по ячейкам': BinTransferDetail;

@defineDocumentInterface(binTransfer);

GROUP binTransfer 'Информация о перемещении' : base;

@defineAddDetailDialogBarcode(userBinTransfer, sku);

@defineDocumentInterfaceDetailPrice(binTransfer);

@deriveDocumentHeaderTimePrefix(UserBinTransfer, );

@defineDocumentInterfaceNumber(binTransfer, BPSTRING[2]);

@defineDocumentInterfacePosted(binTransfer);

@defineDocumentInterfaceClosed(binTransfer);

@defineDocumentInterfaceDataStock(binTransfer, stock, 'Склад');

@defineDocumentInterfaceDescription(binTransfer, 'Перемещение по ячейкам');

@defineDocumentInterfaceDetailSku(binTransfer, sku);

@defineDocumentInterfaceDetailQuantity(binTransfer);

@defineDocumentDetailGrossWeight(binTransfer, sku);

@defineDocumentHeaderSkuQuantity(binTransfer, sku);

@defineDocumentHeaderQuantity(binTransfer);

@defineDocumentBins(binTransfer);

useBins(UserBinTransfer transfer) <- TRUE WHEN SET(transfer IS UserBinTransfer);

@setBinDocument(UserBinTransfer, stock);

@implementDocument(binTransfer);
supplierStock[Document](BinTransfer binTransfer) += stock(binTransfer);


@implementDocumentForm(binTransfer, bt, 'Перемещение по ячейкам');

@defineAddDetailDialogSkuStock(userBinTransfer, sku, stock, dialogSku);

//пользовательский заказ на перемещение
@defineExternalizable(userBinTransfer, STRING[100]);

@defineExternalizable(userBinTransferDetail, STRING[100]);

@defineNumeratedDefault(UserBinTransfer, 'Перемещения по ячейкам ', 'ПП');

disablePosted 'Запретить проведение' = ABSTRACT BOOLEAN (UserBinTransfer);
overPrePost 'Провести' (UserBinTransfer o)  { 
    IF NOT disablePosted(o) THEN {
        isPosted(o) <- TRUE;
    } 
}

//вес трансфера
sumGrossWeight 'Вес брутто, кг' = ABSTRACT NUMERIC[14,3] (BinTransferDetail);        
sumGrossWeight 'Вес брутто, кг' = DATA NUMERIC[14,3] (UserBinTransferDetail);
sumGrossWeight(UserBinTransferDetail d) += sumGrossWeight(d);
   
sumGrossWeight(UserBinTransferDetail d) <- grossWeight(sku(d)) * quantity(d)
    WHEN CHANGED(sku(d)) OR CHANGED(quantity(d));
              
@defineDocumentHeaderGrossWeightCustomPrefix (binTransfer, binTransferDetail, sum, ', кг');
@defineDocumentHeaderGrossWeightCustomPrefix (userBinTransfer, userBinTransferDetail, sum, ', кг'); 

@defineDocumentDialogStocks(userBinTransfer, stock, company, , );

FORM userBinTransfer 'Перемещение по ячейкам (польз.)'
    OBJECTS o = UserBinTransfer PANEL
    PROPERTIES (o) isPosted, nameStock ON CHANGE changeStockCompany(o), nameNumerator, number, series, date, time, note, 
                   nameOutBin ON CHANGE setOutBin(o), nameInBin ON CHANGE setInBin(o)
    PROPERTIES (o) READONLY countUserBinTransferDetail, quantityBinTransferDetail, sumGrossWeightUserBinTransferDetail 
    
    OBJECTS d = UserBinTransferDetail
    PROPERTIES (d) index, idBarcodeSku, idSku, nameSku, nameOutBin ON CHANGE setOutBin(d), nameInBin ON CHANGE setInBin(d), quantity, sumGrossWeight
    PROPERTIES (d) NEW, deleteod = DELETE GRID
    PROPERTIES(o) DRAW d fillDocument, addDetailDialogSkuStockUserBinTransferDetail,
                           addDetailInputBarcodeUserBinTransferDetail, deleteUserBinTransferDetail
    FILTERS binTransfer(d)==o
    ORDERS index(d)
    EDIT UserBinTransfer OBJECT o
    
    EVENTS
        ON OK overPrePost(o)
;

DESIGN userBinTransfer {

    BOX {
        size = (1024, 768);
        NEW mainTabbed {
            tabbed = TRUE;
            fill = 1;
            NEW documentBox{
                fill = 1;
                caption = 'Перемещение';
                NEW headerBox {
                    horizontal = TRUE;
    
                    NEW headerRow1 {
                        fill = 1;
                        MOVE GROUP(documentHeader,o) {
                            lines = 1;
                            NEW first {
                                horizontal = TRUE;
                                MOVE PROPERTY(isPosted(o));
                            }
                            NEW second { 
                                horizontal = TRUE;
                                MOVE PROPERTY(nameNumerator(o));
                                MOVE PROPERTY(number(o));
                                MOVE PROPERTY(series(o));
                                MOVE PROPERTY(date(o));
                                MOVE PROPERTY(time(o));
                                MOVE PROPERTY(nameStock(o));
                            }    
                        }                    
                        
                        NEW headerRow11 {
                            horizontal = TRUE;
                        }
                        NEW headerTabbedPane {
                            alignment = STRETCH;
                            tabbed = TRUE;
                            NEW headerMainParams {
                                caption = 'Основные параметры';
                                MOVE GROUP(documentPrm,o) {
                                    lines = 3;
                                }
                            }
                        }
                    }
    
                    MOVE GROUP(documentSum,o) {
                        lines = 1;
                    }
                }
                NEW specificationBox {
                    fill = 1;
                    tabbed = TRUE;
                    MOVE BOX(d) {
                        caption = 'Спецификация';
                    }
                }
            }
        }
        MOVE TOOLBARBOX;

        PROPERTY(formOk()) {
            caption = 'Провести';
        }                               
    }
}


overShowEdit = ABSTRACT BOOLEAN (BinTransfer);
overShowDelete = ABSTRACT BOOLEAN (BinTransfer); 

skipToShowEdit = ABSTRACT BOOLEAN (BinTransfer);
skipToShowDelete = ABSTRACT BOOLEAN (BinTransfer);
overShowEdit (BinTransfer o) += isOpened(o) AND NOT skipToShowEdit(o);

isUserOpened(UserBinTransfer o)=  isOpened[BinTransfer](o) AND is(o);
overShowDelete (UserBinTransfer o) += isUserOpened(o) AND NOT skipToShowDelete(o); 

overCopy  ABSTRACT LIST ( UserBinTransferDetail, BinTransferDetail);
overCopy  ABSTRACT LIST ( BinTransfer, UserBinTransfer);
copy 'Копировать'(BinTransfer transfer)  { 
	NEWSESSION {
	    NEW o = UserBinTransfer {
	    	stock(o) <- stock(transfer);
	        inBin(o) <- inBin(transfer);
	        outBin(o) <- outBin(transfer);
	        note(o) <- note(transfer);
	
	        EXEC overCopy(transfer, o);
	
	        FOR binTransfer(BinTransferDetail transferDetail) == transfer DO {
	            NEW d=UserBinTransferDetail {
	                userBinTransfer(d) <- o;
	                sku(d) <- sku(transferDetail);
	                quantity(d) <- quantity(transferDetail);
                    inBin(d) <- inBin(transferDetail);
                    outBin(d) <- outBin(transferDetail);
	                
	                EXEC overCopy(d, transferDetail);
	            }
	        }
	
	        SHOW userBinTransfer OBJECTS o = o DOCKED;
	    }
	}
} TOOLBAR;
    
//-- Копирование строк     
overCopy  ABSTRACT LIST ( UserBinTransferDetail, UserBinTransferDetail);

copy 'Копировать'(UserBinTransferDetail detail)  { 
    NEW d = UserBinTransferDetail {          

        userBinTransfer(d) <- userBinTransfer(detail);
        sku(d) <- sku(detail);
        quantity(d) <- quantity(detail);
        outBin(d) <- outBin(detail);
        inBin(d) <- inBin(detail);
        
        EXEC overCopy(d, detail);                              
    }
} CHANGEKEY 'F6' TOOLBAR;

filterBinTransferDateFrom 'Дата с' = DATA LOCAL DATE ();
filterDateFrom (BinTransfer o) = date(o) >= filterBinTransferDateFrom() OR (o IS BinTransfer AND NOT filterBinTransferDateFrom());      

filterBinTransferDateTo 'Дата по' = DATA LOCAL DATE ();
filterDateTo (BinTransfer o) = date(o) <= filterBinTransferDateTo() OR (o IS BinTransfer AND NOT filterBinTransferDateTo());      

filterBinTransferStock  = DATA LOCAL Stock ();
nameFilterBinTransferStock 'Склад' = name(filterBinTransferStock()) CHARWIDTH 15;          
filterStock (BinTransfer o) = stock(o) == filterBinTransferStock() OR (o IS BinTransfer AND NOT filterBinTransferStock());

filterBinTransferCustomUser  = DATA LOCAL CustomUser ();
nameFilterBinTransferCustomUser 'Создан пользователем' = name[Contact](filterBinTransferCustomUser()) CHARWIDTH 15;          
filterBinCustomUser (BinTransfer i) = createdUser[UserBinTransfer](i) == filterBinTransferCustomUser() OR (i IS BinTransfer AND NOT filterBinTransferCustomUser());  

filterBinTransferComputer = DATA LOCAL Computer ();
nameFilterBinTransferComputer 'Создан на компьютере' = hostname(filterBinTransferComputer()) CHARWIDTH 15;          
filterComputer (BinTransfer i) = createdComputer(i) == filterBinTransferComputer() OR (i IS BinTransfer AND NOT filterBinTransferComputer());
    
show 'Просмотреть' (UserBinTransfer o)   { 
    NEWSESSION{
        SHOW userBinTransfer OBJECTS o = o DOCKED READONLY;
    }
    
}TOOLBAR;
    
showToShow (UserBinTransfer i) = is(i) AND NOT overShowEdit(i);
 
FORM binTransfers  'Перемещения по ячейкам'
    PROPERTIES() filterBinTransferDateFrom, filterBinTransferDateTo, nameFilterBinTransferStock, nameFilterBinTransferCustomUser, nameFilterBinTransferComputer
    
    OBJECTS o = BinTransfer LAST
    PROPERTIES (o) READONLYIF isReadonly() isClosed, isPosted, number, series, date, time, nameStock, nameOutBin, nameInBin, note,
                            countBinTransferDetail, quantityBinTransferDetail, sumGrossWeightUserBinTransferDetail GRID    
    
    FILTERS filterDateFrom(o), filterDateTo(o), filterStock(o)
       
    OBJECTS d = BinTransferDetail
    PROPERTIES (d) READONLY index, idBarcodeSku, nameSku, nameOutBin, nameInBin, quantity, sumGrossWeight
    
    PROPERTIES (o) READONLY PANEL createdNameUser[UserBinTransfer], createdTime, createdHostnameComputer, 
                                        postedNameUser, postedTime, postedHostnameComputer

    PROPERTIES (o) NEWSESSION addUserBinTransfer = NEW[UserBinTransfer], EDIT SHOWIF overShowEdit(o) 
    PROPERTIES (o) copy
    PROPERTIES (o) close[UserBinTransfer] SHOWIF isOpened[UserBinTransfer](o), open SHOWIF isClosed[UserBinTransfer](o)
    PROPERTIES     NEWSESSION deleteo=DELETE(o) SHOWIF overShowDelete(o) //isUserOpenedTransfer(o)
            
    FILTERS binTransfer(d)==o
    ORDERS index(d)
    LIST BinTransfer OBJECT o
;

DESIGN binTransfers 'Перемещения по ячейкам' {
    NEW documentContainer BEFORE TOOLBARBOX {
        fill = 1;

        NEW filtersBox {                       
            fill = 1;
            NEW topFilters {  
                caption = 'Фильтры';
                NEW topFilters1 {
                    horizontal = TRUE; 
                    MOVE PROPERTY(filterBinTransferDateFrom());
                    MOVE PROPERTY(filterBinTransferDateTo());                            
                    MOVE PROPERTY(nameFilterBinTransferStock());                                            
                }
                NEW topFilters2 {
                    horizontal = TRUE; 
                    MOVE PROPERTY(nameFilterBinTransferCustomUser());
                    MOVE PROPERTY(nameFilterBinTransferComputer());                            
                }                
            }
            MOVE BOX(o) {
                fill = 1;
            }
        }
//            NEW BOX(o) {
//                fill = 2;
//            }

        NEW documentDetail {
            fill = 1;
            tabbed = TRUE;

            MOVE BOX(d) {
                fill = 1;
                caption = 'Спецификация';
            }
            NEW documentHistory {
                caption = 'История';
                MOVE GROUP(created,o);
                MOVE GROUP(posted,o);
            }
            NEW printTab {
                caption = 'Печатные формы';
                NEW printContainer {
                    caption = 'Печать';
                }
            }
            NEW actionContainer {
                caption = 'Действия';
                horizontal = TRUE;
                NEW createdContainer {
                    caption = 'Создание на основе';
                    MOVE PROPERTY(copy(o)) { caption = 'Перемещение';}
                }
            }
        }
    }
}
@extendFormFilterAccessStock(o, binTransfers, stock, company);
@extendFormEditable(binTransfers);

@defineFilterIsOpened (binTransfer, binTransfers, o);

@defineDocumentLogForm(binTransfers, o);

//Операция
@defineDocumentOperationContainer(binTransfer, o, isPostedBintransfer, nameStock, first, name, );

overCopy(BinTransfer transfer, UserBinTransfer userTransfer) + { 
    operation(userTransfer) <- operation(transfer);    
}

@defineOperationFilterProperty(binTransfer, o, binTransfers, nameFilterBinTransferStock);

@extendFormFilterAccessStock(BinTransfer, o, binTransfers, stock, company);
@defineDocumentStockAccess(UserBinTransfer, stock, company);

@defineDocumentOperationConstraint(binTransfer, 'перемещение по ячейкам', Bin);


CONSTRAINT operation(BinTransfer binTransfer) AND stock(binTransfer) 
           AND NOT in(stock(binTransfer), operation(binTransfer))
    CHECKED BY stock[UserBinTransfer]
    MESSAGE 'Склад должен совпадать с отмеченными в операции';
CONSTRAINT operation(BinTransfer binTransfer) AND isPosted(binTransfer) 
           AND NOT stock(binTransfer) AND needStock(operation(binTransfer))
    MESSAGE 'Склад должен быть задан для документа';

@deriveDocumentBins (userBinTransfer, userBinTransfer, inBin, inBin, outBin, outBin, stock);

@defineDocumentSkuStockPriceListTypeSystemLedger(userBinTransfer, );

@extendFormDocumentSkuStock(userBinTransfer, userBinTransfer, o, , );

prevCurrentBalanceOutBin 'Текущий остаток (ячейка из)' (Sku sku, BinTransfer transfer) = prevCurrentBalance(sku, outBin(transfer));
prevCurrentBalanceInBin 'Текущий остаток (ячейка в)' (Sku sku, BinTransfer transfer) = prevCurrentBalance(sku, inBin(transfer));

EXTEND FORM userBinTransfer
    PROPERTIES (ks, o) READONLY AFTER prevCurrentBalance(ks, st) prevCurrentBalanceOutBin, prevCurrentBalanceInBin
    FILTERGROUP filter
        FILTER 'С остатком (ячейка из)' prevCurrentBalanceOutBin(ks, o) 'F7' DEFAULT
        FILTER 'С остатком ' currentBalance(ks,st) 'F10'
        FILTER 'В документе ' quantity(ks, o, st) 'F9'
;

//упаковка
@defineDocumentPack(binTransfer, o);

packQuantity 'Кол-во упаковок в документе' (sku, userBinTransfer, stock) = GROUP SUM packQuantity(UserBinTransferDetail userBinTransferDetail)
    BY sku(userBinTransferDetail), userBinTransfer(userBinTransferDetail), stock(userBinTransferDetail);

changePackQuantity(Sku sku, UserBinTransfer userBinTransfer, Stock stock)  { 
    INPUT n = NUMERIC[16,5] DO
        IF userBinTransferDetail(sku, userBinTransfer, stock) THEN {
            IF n THEN {
                packQuantity(UserBinTransferDetail userBinTransferDetail) <- n WHERE userBinTransferDetail == userBinTransferDetail(sku, userBinTransfer, stock);
                quantity(UserBinTransferDetail userBinTransferDetail) <- NUMERIC[16,5](packQuantity(userBinTransferDetail)*(OVERRIDE amountPack(userBinTransferDetail), 1.0)) 
                                        WHERE userBinTransferDetail == userBinTransferDetail(sku, userBinTransfer, stock) AND NOT skipChangeQuantity(userBinTransferDetail(sku, userBinTransfer, stock));
            } ELSE {
                FOR userBinTransferDetail(sku, userBinTransfer, stock) == UserBinTransferDetail d DO
                    DELETE d;
            }
        } ELSE {
            IF n THEN  {
                NEW d = UserBinTransferDetail {
                   userBinTransfer(d) <- userBinTransfer;
                   sku(d) <- sku;
                   packQuantity (d) <- n;
                   quantity(d) <- NUMERIC[16,5](packQuantity(d) * (OVERRIDE amountPack(d), 1.0));
                }
            }
        }
}

changeAmountPack(Sku sku, UserBinTransfer userBinTransfer, Stock stock)  { 
    INPUT n = NUMERIC[14,3] DO {
        IF userBinTransferDetail(sku, userBinTransfer, stock) THEN {
            IF n THEN {
                amountPack(UserBinTransferDetail userBinTransferDetail) <- n WHERE userBinTransferDetail == userBinTransferDetail(sku, userBinTransfer, stock);
                quantity(UserBinTransferDetail userBinTransferDetail) <- NUMERIC[16,5](packQuantity(userBinTransferDetail)*(OVERRIDE amountPack(userBinTransferDetail), 1.0)) 
                                        WHERE userBinTransferDetail == userBinTransferDetail(sku, userBinTransfer, stock) AND packQuantity(userBinTransferDetail) AND NOT skipChangeQuantity(userBinTransferDetail(sku, userBinTransfer, stock));
            } ELSE {
                amountPack(UserBinTransferDetail userBinTransferDetail) <- NULL WHERE userBinTransferDetail == userBinTransferDetail(sku, userBinTransfer, stock);
            }
    
        }
        changeValuePack(sku, n);
    }
}

@extendFormDocumentPackSkuStock(userBinTransfer, userBinTransfer, o, );

@deriveDocumentOperationProperty(UserBinTransfer, showPack);

//проведение по регистру
EXTEND CLASS BinTransferDetail: BinLedger;
    
@implementBinLedger(binTransferDetail, stock);

NAVIGATOR {
    WMSNavigator {
         WMSDocument {
            NEW binTransfers;
         }
    }
}