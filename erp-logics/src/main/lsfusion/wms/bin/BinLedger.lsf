MODULE BinLedger;

REQUIRE Bin;

NAMESPACE Bin;

CLASS ABSTRACT BinLedger 'Изменение остатка по ячейкам';
TABLE binLedger(BinLedger);

dateTime 'Дата/время' = ABSTRACT DATETIME (BinLedger) MATERIALIZED INDEXED;
date 'Дата' (BinLedger ledger) = toDate(dateTime(ledger)); 

isPosted 'Проведен' = ABSTRACT BOOLEAN (BinLedger) MATERIALIZED;

isClosed 'Закрыт' = ABSTRACT BOOLEAN (BinLedger);

sku = ABSTRACT Sku (BinLedger) MATERIALIZED INDEXED;
nameSku 'SKU' (BinLedger ledger) = name(sku(ledger)) IN id;
idBarcodeSku 'Штрих-код' (BinLedger ledger)= idBarcode(sku(ledger)) IN id;

stock = ABSTRACT Stock (BinLedger) MATERIALIZED INDEXED;
nameStock 'Склад' (BinLedger ledger)= name(stock(ledger));

inBin = ABSTRACT Bin (BinLedger) MATERIALIZED;
nameInBin 'Ячейка (в)' (BinLedger ledger) = name(inBin(ledger)) IN id;

INDEX inBin(BinLedger l), sku(l), dateTime(l);

outBin = ABSTRACT Bin (BinLedger) MATERIALIZED;
nameOutBin 'Ячейка (из)' (BinLedger ledger) = name(outBin(ledger)) IN id;
INDEX outBin(BinLedger l), sku(l), dateTime(l);

quantity 'Кол-во' (ledger) = ABSTRACT NUMERIC[16,5] (BinLedger) MATERIALIZED;

description 'Название документа' = ABSTRACT ISTRING[200] (BinLedger);

changed = ABSTRACT BOOLEAN (BinLedger);

skip 'Не проводить по учету' = ABSTRACT BOOLEAN (BinLedger) MATERIALIZED;
active 'Активен' (BinLedger ledger) = isPosted(ledger) AND NOT skip(ledger) MATERIALIZED;

TABLE skuBin (Sku, Bin);

inBinTotal 'Приход в ячейку' =
    GROUP SUM quantity(BinLedger ledger) IF isPosted(ledger) BY sku(ledger), inBin(ledger) MATERIALIZED;
    
outBinTotal 'Расход из ячейки' =
    GROUP SUM quantity(BinLedger ledger) IF isPosted(ledger) BY sku(ledger), outBin(ledger) MATERIALIZED;
    
inBinTotalA 'Приход в ячейку' =
    GROUP SUM quantity(BinLedger ledger) IF date(ledger) > DATE date AND isPosted(ledger) BY sku(ledger), inBin(ledger), date;
    
outBinTotalA 'Расход из ячейки' =
    GROUP SUM quantity(BinLedger ledger) IF date(ledger) > DATE date AND isPosted(ledger) BY sku(ledger), outBin(ledger), date;
        
inBinTotalB 'Приход в ячейку' =
    GROUP SUM quantity(BinLedger ledger) IF date(ledger) >= DATE date AND isPosted(ledger) BY sku(ledger), inBin(ledger), date;
    
outBinTotalB 'Расход из ячейки' =
    GROUP SUM quantity(BinLedger ledger) IF date(ledger) >= DATE date AND isPosted(ledger) BY sku(ledger), outBin(ledger), date;
                
inBinTotalA 'Приход в ячейку' =
    GROUP SUM quantity(BinLedger ledger) IF dateTime(ledger) > DATETIME dateTime AND isPosted(ledger) BY sku(ledger), inBin(ledger), dateTime;
    
outBinTotalA 'Расход из ячейки' =
    GROUP SUM quantity(BinLedger ledger) IF dateTime(ledger) > DATETIME dateTime AND isPosted(ledger) BY sku(ledger), outBin(ledger), dateTime;
        
inBinTotalB 'Приход в ячейку' =
    GROUP SUM quantity(BinLedger ledger) IF dateTime(ledger) >= DATETIME dateTime AND isPosted(ledger) BY sku(ledger), inBin(ledger), dateTime;
    
outBinTotalB 'Расход из ячейки' =
    GROUP SUM quantity(BinLedger ledger) IF dateTime(ledger) >= DATETIME dateTime AND isPosted(ledger) BY sku(ledger), outBin(ledger), dateTime;                   
        
currentBalance 'Текущий остаток в ячейке' (Sku sku, Bin bin)=
    inBinTotal(sku, bin) (-) outBinTotal(sku, bin) MATERIALIZED;
prevCurrentBalance 'Текущий остаток в ячейке' (Sku sku, Bin bin) = PREV(currentBalance(sku, bin));

balanceA 'Остаток в ячейке на конец дня' (Sku sku, Bin bin, DATE date) = currentBalance(sku, bin) (-)
                                                                 inBinTotalA(sku, bin, date) (+) outBinTotalA(sku, bin, date);

// без учета текущей даты/времени
balanceB 'Остаток в ячейке (до)' (Sku sku, Bin bin, DATETIME dateTime) = currentBalance(sku, bin) (-)
                                                                 inBinTotalB(sku, bin, dateTime) (+) outBinTotalB(sku, bin, dateTime);
prevBalanceB 'Остаток (до)' (Sku sku, Bin bin, DATETIME dateTime) = PREV(balanceB(sku, bin, dateTime) IF dateTime IS DATETIME);

// с учетом текущей даты/времени
balanceA 'Остаток в ячейке (после)' (Sku sku, Bin bin, DATETIME dateTime) = currentBalance(sku, bin) (-)
                                                                 inBinTotalA(sku, bin, dateTime) (+) outBinTotalA(sku, bin, dateTime);
prevBalanceA 'Остаток в ячейке (после)'(Sku sku, Bin bin, DATETIME dateTime) = PREV(balanceA(sku, bin, dateTime) IF dateTime IS DATETIME);

META implementBinLedger(class, object, skuProp, quantityProp, stockProp, inBinProp, outBinProp)
    dateTime[BinLedger] (###class ledger) += dateTime(object(ledger));
    isPosted[BinLedger] (###class ledger) += isPosted(object(ledger));
    isClosed[BinLedger] (###class ledger) += isClosed(object(ledger));
    skuProp[BinLedger] (###class ledger) += skuProp(object(ledger));
    quantity[BinLedger] (###class ledger) += quantityProp(object(ledger));
    stock[BinLedger] (###class ledger) += stockProp(object(ledger));
    inBin[BinLedger] (###class ledger) += inBinProp(object(ledger));
    outBin[BinLedger] (###class ledger) += outBinProp(object(ledger));
    description[BinLedger] (###class ledger) += description(object(ledger));
END       

META implementBinLedger(class, stockProp)
    dateTime[BinLedger] (###class ledger) += dateTime(ledger);
    isPosted[BinLedger] (###class ledger) += isPosted(ledger);
    isClosed[BinLedger] (###class ledger) += isClosed(ledger);
    sku[BinLedger] (###class ledger) += sku(ledger);
    quantity[BinLedger] (###class ledger) += quantity(ledger);
    stock[BinLedger] (###class ledger) += stockProp(ledger);
    inBin[BinLedger] (###class ledger) += inBin(ledger);
    outBin[BinLedger] (###class ledger) += outBin(ledger);
    description[BinLedger] (###class ledger) += description(ledger);
END
       
META createClassBinLedger (classPref)
    CLASS classPref##BinLedger : BinLedger;
END
META implementAggregationBinLedger(object, classPrefix, ClassPref, skuProp, quantityProp, stockProp, inBinProp, outBinProp)
    @createClassBinLedger(###classPrefix);
    needToCreate (###object object) = inBinProp(object) OR outBin(object); 
    classPrefix##BinLedger = AGGR ###classPrefix##BinLedger WHERE needToCreate(###object object) MATERIALIZED INDEXED;
    @implementBinLedger(classPrefix##BinLedger, object, skuProp, quantityProp, stockProp, inBinProp, outBinProp);
END

FORM binLedger 'Регистр изменения остатков по ячейкам'
    OBJECTS dates = (dFrom = DATE, dTo = DATE) PANEL
    PROPERTIES valFrom = VALUE(dFrom), valTo = VALUE(dTo)
    
    OBJECTS b = BinLedger
    PROPERTIES (b) READONLY dateTime, isPosted, isClosed, nameStock, idBarcodeSku, nameSku, quantity, nameInBin, nameOutBin, description
    FILTERS isPosted(b)
    
    FILTERS date(b) >= dFrom, date(b) <= dTo
;

@extendFormFilterAccessStock(BinLedger, b, binLedger, stock, company);

DESIGN binLedger {
    MOVE BOX(dates) {
        horizontal = TRUE;
    }
    MOVE BOX(b);
    MOVE TOOLBARBOX;
}

balanceQuantity 'Кол-во' (Bin bin, BinLedger ledger) = IF inBin(ledger)==bin
    THEN quantity(ledger)
        ELSE IF outBin(ledger)==bin 
            THEN -quantity(ledger);
            
balanceBin 'Ячейка (из/в)' (Bin bin, BinLedger ledger) = IF inBin(ledger)==bin
    THEN nameOutBin(ledger)
        ELSE IF outBin(ledger)==bin 
            THEN nameInBin(ledger);            

FORM binBalance 'Остатки по ячейкам'

    OBJECTS ts = Stock PANEL
    PROPERTIES(ts) SELECTOR name
    FILTERS isCompany(ts)

    TREE binTree bg = BinGroup PARENT parent(bg)
    PROPERTIES READONLY name(bg)
    FILTERS countIn(ts, bg)

    OBJECTS b = Bin
    PROPERTIES(b) READONLY name, canonicalName
    FILTERS b IS Bin AND NOT bg IS BinGroup OR isParent(bg, b), in(ts, b)
    ORDERS name(b)

    TREE treeGroup g=SkuGroup PARENT parent(g)
    PROPERTIES READONLY order(g), name(g)
    FILTERS groupType(g) == groupType(ts)
    ORDERS order(g), name(g)
    FILTERGROUP inactive FILTER 'Активные' active(g) 'F6' DEFAULT

    OBJECTS s = Sku
    PROPERTIES(s) READONLY name, idBarcode
    PROPERTIES (s, b) READONLY currentBalance
    ORDERS name(s)
    FILTERS isParent(g, s) OR s IS Sku AND NOT g
//    FILTERGROUP balance
//        FILTER 'С остатком' currentBalance(s, b) DEFAULT
        
    OBJECTS l = BinLedger
    PROPERTIES (l) READONLY dateTime, isPosted, description
    PROPERTIES(b, l) READONLY balanceBin, balanceQuantity
    ORDERS dateTime(l) DESC
    FILTERS inBin(l)==b OR outBin(l)==b, sku(l)==s
    FILTERGROUP posted
        FILTER 'Проведен' isPosted(l) DEFAULT
;

@extendFormFilterStockAccess(ts, binBalance);

DESIGN binBalance {
    BOX {
        size = (1024, 768);

        MOVE BOX(ts);
        NEW topContainer {
            fill = 1;

            NEW binGroup {
                horizontal = TRUE;
                fill = 1;

                MOVE BOX(TREE binTree) {
                    caption = 'Группы ячеек';
                }

                MOVE BOX(b) {
                    fill = 2.5;
                    GRID(b) {
                        defaultComponent = TRUE;
                    }
                }
            }
            NEW skuGroup {
                horizontal = TRUE;
                fill = 3;

                MOVE BOX(TREE treeGroup) {
                    caption = 'Группы Sku';
                }

                NEW skus {
                    fill = 2.5;
                    MOVE BOX(s) {
                        fill = 2;
                        GRID(s) {
                            defaultComponent = TRUE;
                        }
                    }    
                    MOVE BOX(l);                    
                }
            }
        }

        MOVE TOOLBARBOX;
    }
}

NAVIGATOR {
    WMSNavigator {
        WMSReports {
            NEW binLedger;
            NEW binBalance;
        }    
    }
}

FORM dialogBinStock 'Ячейки'
    OBJECTS s = Stock PANEL
    
    TREE binTree bg = BinGroup PARENT parent(bg)
    PROPERTIES READONLY name(bg)
    FILTERS countIn(s, bg)

    OBJECTS b = Bin
    PROPERTIES(b) READONLY name, id SHOWIF showIDs(), canonicalName
    PROPERTIES(b) NEWSESSION NEW, EDIT, DELETE 

    FILTERS isParent(bg, b)
    ORDERS name(b)    
;

DESIGN dialogBinStock {
    BOX {
        size = (1024, 768);

        NEW topContainer {
            horizontal = TRUE;
            fill = 1;
            
            MOVE BOX(TREE binTree) {
                caption = 'Группы ячеек';
            }

            MOVE BOX(b) {
                fill = 2;
                GRID(b) {
                    defaultComponent = TRUE;
                }
            }
        }

        MOVE TOOLBARBOX;
    }
}

META defineInterfaceBin (object, prefix, caption)
    prefix###bin 'Ячейка'##caption = DATA Bin(###user###object) IN documentPrm;
    prefix###bin 'Ячейка'##caption = ABSTRACT Bin(###object) MATERIALIZED IN documentPrm;
    prefix###bin (User###object object) += prefix###bin(object);
       
    name###prefix###bin 'Ячейка'##caption (###object object) = name(prefix###bin(object)) IN documentPrm CHARWIDTH 12;
    name###prefix###bin 'Ячейка'##caption (###user###object object) = name(prefix###bin(object)) IN documentPrm CHARWIDTH 12;
END

META defineDocumentBins (object)
    @defineInterfaceBin (object, in, ' (в)');
    @defineInterfaceBin (object, out, ' (из)');   
    
    @defineDocumentInterfaceProperty (object, useBins, 'Ячейки');
                   
    @defineInterfaceBin (object###detail, in, ' (в)');
    @defineInterfaceBin (object###detail, out, ' (из)');  
END

META setBinObject (object, stockProp)
    setInBin (object d)  { 
        DIALOG dialogBinStock OBJECTS s = stockProp(d), b = inBin(d) CHANGE;
    }
    
    setOutBin (object d)  { 
        DIALOG dialogBinStock OBJECTS s = stockProp(d), b = outBin(d) CHANGE;
    }
END

META setBinDocument (object, stockProp)
    @setBinObject (object, stockProp);
    @setBinObject (object###detail, stockProp);
END

META setBinDocument (object)
    @setBinDocument (###object, stock);
END

META defineBinConstraints(object, stockProp)
    CONSTRAINT inBin(object detail) AND NOT in(stockProp(detail), inBin(detail))
               CHECKED BY inBin[object] MESSAGE 'Ячейка не доступна для склада';
               
    CONSTRAINT outBin(object detail) AND NOT in(stockProp(detail), outBin(detail))
               CHECKED BY outBin[object] MESSAGE 'Ячейка не доступна для склада';
END

META defineBinConstraints(object)
    @defineBinConstraints(###object, stock);
END

META defineBinDocumentConstraints(object, stock)
    @defineBinConstraints(###object, stock);
    @defineBinConstraints(###object##Detail, stock);
END

META defineBinDocumentConstraints(object)
    @defineBinDocumentConstraints(object, stock);
END

META extendObjectFormsBins(form, forms, obj, stockProp, background) 
    EXTEND FORM form
        PROPERTIES(obj) useBins, nameInBin SHOWIF useBins(obj) ON CHANGE setInBin(obj), nameOutBin SHOWIF useBins(obj) ON CHANGE setOutBin(obj)
        PROPERTIES(d) SHOWIF useBins(obj) BACKGROUND background(obj)
                      nameInBin ON CHANGE setInBin(d), nameOutBin ON CHANGE setOutBin(d)
    ;
    DESIGN form {
        headerExtraParams {
            NEW headerBins {
                caption = 'Ячейки';
                MOVE PROPERTY(useBins(obj));
                MOVE PROPERTY(nameInBin(obj));
                MOVE PROPERTY(nameOutBin(obj));
            }
        }
    }

    EXTEND FORM forms
        PROPERTIES(d) READONLY SHOWIF useBins(obj) BACKGROUND background(obj)
                      nameInBin, nameOutBin
    ;
END

META defineInvoiceShipmentBins(stockProp)

    @defineDocumentBins(invoice);
    inBin [ShipmentDetail] (InvoiceShipmentDetail detail) += inBin(invoiceDetail(detail));
    outBin [ShipmentDetail] (InvoiceShipmentDetail detail) += outBin(invoiceDetail(detail));
    
    @setBinDocument(UserInvoice, stockProp);
    @defineBinConstraints(UserShipmentDetail, stockProp);
    @defineBinConstraints(UserInvoiceDetail, stockProp);      
    
    @extendObjectFormsBins(userInvoice, invoices, i, stockProp, backgroundShipped);                          

    EXTEND FORM invoiceDetails
        PROPERTIES(d) AFTER name###stockProp(d) READONLY SHOWIF useBins(d) BACKGROUND backgroundShipped(d)
                      nameInBin, nameOutBin
    ;
    
    overCopy[UserInvoiceDetail,UserInvoiceDetail](UserInvoiceDetail d, UserInvoiceDetail detail) + {       
        inBin(d) <- inBin(detail);
        outBin(d) <- outBin(detail);
    }
    
END

META deriveDocumentBinsProperty(object, readProp, writeProp, stockProp)
    over###readProp = ABSTRACT Bin (###object);
    writeProp (###object o) <- OVERRIDE over###readProp(o), readProp(operation(o), stockProp(o)) IF useBins(o)
        WHEN CHANGED(operation(o)) OR CHANGED(stockProp(o)) OR SETCHANGED(useBins(o));    
END

META deriveFormBinsProperty (form, object)
    overInBin = ABSTRACT Bin (###object###detail);
    overOutBin = ABSTRACT Bin (###object###detail);
    skipSetInBin = ABSTRACT BOOLEAN (###object###detail);
    skipSetOutBin = ABSTRACT BOOLEAN (###object###detail);
    
    WHEN LOCAL FORMS form (CHANGED(inBin(object(###object###detail detail))) OR CHANGED(sku(detail)) OR SETCHANGED(useBins(detail))) AND useBins(detail) AND NOT CHANGED(inBin(detail)) AND NOT skipSetInBin(detail) DO {
             inBin(detail) <- OVERRIDE overInBin(detail), inBin(form(detail));
    }

    WHEN LOCAL FORMS form (CHANGED(outBin(object(###object###detail detail))) OR CHANGED(sku(detail))) AND NOT CHANGED(outBin(detail)) AND NOT skipSetOutBin(detail) DO {
        outBin(detail) <- OVERRIDE overOutBin(detail), outBin(form(detail));
    }    
END

META deriveFormBinsProperty (object) 
    @deriveFormBinsProperty (object, object);
END

META deriveInvoiceBins (inRead, inWrite, outRead, outWrite, stockProp)
    @deriveDocumentOperationProperty(UserShipment, useBins);
    @deriveDocumentBinsProperty(UserShipment, inRead, inWrite, stockProp);
    @deriveDocumentBinsProperty(UserShipment, outRead, outWrite, stockProp);
    @deriveDocumentOperationProperty(UserInvoice, useBins);
    @deriveDocumentBinsProperty(UserInvoice, inRead, inWrite, stockProp);
    @deriveDocumentBinsProperty(UserInvoice, outRead, outWrite, stockProp);
    
    @deriveFormBinsProperty (userInvoice);
END

META deriveDocumentBins (object, form, inRead, inWrite, outRead, outWrite, stockProp)
    @deriveDocumentBinsProperty(object, inRead, inWrite, stockProp);
    @deriveDocumentBinsProperty(object, outRead, outWrite, stockProp);
    
    @deriveFormBinsProperty (form, object);
END