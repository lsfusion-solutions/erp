MODULE BinLedger;

REQUIRE Bin;

NAMESPACE Bin;

CLASS ABSTRACT BinLedger 'Изменение остатка по ячейкам';
TABLE binLedger(BinLedger);

dateTime 'Дата/время' = ABSTRACT DATETIME (BinLedger) MATERIALIZED INDEXED;
date 'Дата' (BinLedger ledger) = toDate(dateTime(ledger)); 

isPosted 'Проведен' = ABSTRACT BOOLEAN (BinLedger) MATERIALIZED;

isClosed 'Закрыт' = ABSTRACT BOOLEAN (BinLedger);

sku = ABSTRACT Sku (BinLedger) MATERIALIZED INDEXED;
nameSku 'SKU' (BinLedger ledger) = name(sku(ledger)) IN id;
idBarcodeSku 'Штрихкод' (BinLedger ledger)= idBarcode(sku(ledger)) IN id;

stock = ABSTRACT Stock (BinLedger) MATERIALIZED INDEXED;
nameStock 'Склад' (BinLedger ledger)= name(stock(ledger));

inBin = ABSTRACT Bin (BinLedger) MATERIALIZED INDEXED;
nameInBin 'Ячейка (в)' (BinLedger ledger) = name(inBin(ledger)) IN id;
canonicalIdInBin'Ячейка код (в)' (BinLedger ledger) = canonicalId(inBin(ledger)) IN id;

INDEX inBin(BinLedger l), sku(l), dateTime(l);

outBin = ABSTRACT Bin (BinLedger) MATERIALIZED INDEXED;
nameOutBin 'Ячейка (из)' (BinLedger ledger) = name(outBin(ledger)) IN id;
INDEX outBin(BinLedger l), sku(l), dateTime(l);
canonicalIdOutBin'Ячейка код (из)' (BinLedger ledger) = canonicalId(outBin(ledger)) IN id;

quantity 'Кол-во' (ledger) = ABSTRACT NUMERIC[16,5] (BinLedger) MATERIALIZED;

description 'Название документа' = ABSTRACT ISTRING[200] (BinLedger) MATERIALIZED;

changed = ABSTRACT BOOLEAN (BinLedger);

skip 'Не проводить по регистру' = ABSTRACT BOOLEAN (BinLedger) MATERIALIZED;
active 'Активен' (BinLedger ledger) = isPosted(ledger) AND NOT skip(ledger) MATERIALIZED;

countInLedger 'Кол-во приходов' = 
    GROUP SUM 1 IF active(BinLedger ledger) BY sku(ledger), inBin(ledger) MATERIALIZED;

countOutLedger 'Кол-во расходов' =
    GROUP SUM 1 IF active(BinLedger ledger) BY sku(ledger), outBin(ledger) MATERIALIZED;

countLedger 'Кол-во движений' (Sku sku, Bin bin) =
    countInLedger(sku, bin) (+) countOutLedger(sku, bin) MATERIALIZED;

countLedger 'Кол-во движений' = GROUP SUM countLedger(Sku sku, Bin bin) BY bin;

inBinTotal 'Приход в ячейку' =
    GROUP SUM quantity(BinLedger ledger) IF active(ledger) BY sku(ledger), inBin(ledger) MATERIALIZED;
    
outBinTotal 'Расход из ячейки' =
    GROUP SUM quantity(BinLedger ledger) IF active(ledger) BY sku(ledger), outBin(ledger) MATERIALIZED;
    
inBinTotalA 'Приход в ячейку' =
    GROUP SUM quantity(BinLedger ledger) IF date(ledger) > DATE date AND active(ledger) BY sku(ledger), inBin(ledger), date;
    
outBinTotalA 'Расход из ячейки' =
    GROUP SUM quantity(BinLedger ledger) IF date(ledger) > DATE date AND active(ledger) BY sku(ledger), outBin(ledger), date;
        
inBinTotalB 'Приход в ячейку' =
    GROUP SUM quantity(BinLedger ledger) IF date(ledger) >= DATE date AND active(ledger) BY sku(ledger), inBin(ledger), date;
    
outBinTotalB 'Расход из ячейки' =
    GROUP SUM quantity(BinLedger ledger) IF date(ledger) >= DATE date AND active(ledger) BY sku(ledger), outBin(ledger), date;
                
inBinTotalA 'Приход в ячейку' =
    GROUP SUM quantity(BinLedger ledger) IF dateTime(ledger) > DATETIME dateTime AND active(ledger) BY sku(ledger), inBin(ledger), dateTime;
    
outBinTotalA 'Расход из ячейки' =
    GROUP SUM quantity(BinLedger ledger) IF dateTime(ledger) > DATETIME dateTime AND active(ledger) BY sku(ledger), outBin(ledger), dateTime;
        
inBinTotalB 'Приход в ячейку' =
    GROUP SUM quantity(BinLedger ledger) IF dateTime(ledger) >= DATETIME dateTime AND active(ledger) BY sku(ledger), inBin(ledger), dateTime;
    
outBinTotalB 'Расход из ячейки' =
    GROUP SUM quantity(BinLedger ledger) IF dateTime(ledger) >= DATETIME dateTime AND active(ledger) BY sku(ledger), outBin(ledger), dateTime;                   
        
currentBalance 'Текущий остаток в ячейке' (Sku sku, Bin bin)=
    inBinTotal(sku, bin) (-) outBinTotal(sku, bin) MATERIALIZED;
prevCurrentBalance 'Текущий остаток в ячейке' (Sku sku, Bin bin) = PREV(currentBalance(sku, bin));

prevCurrentBalance 'Текущий остаток в ячейке' = GROUP SUM prevCurrentBalance(Sku sku, Bin bin) BY bin;

balanceA 'Остаток в ячейке на конец дня' (Sku sku, Bin bin, DATE date) = currentBalance(sku, bin) (-)
                                                                 inBinTotalA(sku, bin, date) (+) outBinTotalA(sku, bin, date);

// без учета текущей даты/времени
balanceB 'Остаток в ячейке (до)' (Sku sku, Bin bin, DATETIME dateTime) = currentBalance(sku, bin) (-)
                                                                 inBinTotalB(sku, bin, dateTime) (+) outBinTotalB(sku, bin, dateTime);
prevBalanceB 'Остаток (до)' (Sku sku, Bin bin, DATETIME dateTime) = PREV(balanceB(sku, bin, dateTime) IF dateTime IS DATETIME);

// с учетом текущей даты/времени
balanceA 'Остаток в ячейке (после)' (Sku sku, Bin bin, DATETIME dateTime) = currentBalance(sku, bin) (-)
                                                                 inBinTotalA(sku, bin, dateTime) (+) outBinTotalA(sku, bin, dateTime);
prevBalanceA 'Остаток в ячейке (после)'(Sku sku, Bin bin, DATETIME dateTime) = PREV(balanceA(sku, bin, dateTime) IF dateTime IS DATETIME);

currentBalance 'Текущий остаток в группе ячеек' (Sku sku, BinGroup bg)=
    [GROUP SUM currentBalance(Sku sku1, Bin b) IF isParent(BinGroup bg1, b) BY sku1, bg1](sku, bg);
prevCurrentBalance 'Текущий остаток в группе ячеек' (Sku sku, BinGroup bg)=
    [GROUP SUM prevCurrentBalance(Sku sku1, Bin b) IF isParent(BinGroup bg1, b) BY sku1, bg1](sku, bg);
balanceB 'Остаток в группе ячеек (до)' (Sku sku, BinGroup bg, DATETIME dateTime)=
    [GROUP SUM balanceB(Sku sku1, Bin b, DATETIME dateTime1) IF isParent(BinGroup bg1, b) BY sku1, bg1, dateTime1](sku, bg, dateTime);
prevBalanceB 'Остаток в группе ячеек (до)' (Sku sku, BinGroup bg, DATETIME dateTime)=
    [GROUP SUM prevBalanceB(Sku sku1, Bin b, DATETIME dateTime1) IF isParent(BinGroup bg1, b) BY sku1, bg1, dateTime1](sku, bg, dateTime);
balanceA 'Остаток в группе ячеек (после)' (Sku sku, BinGroup bg, DATETIME dateTime)=
    [GROUP SUM balanceB(Sku sku1, Bin b, DATETIME dateTime1) IF isParent(BinGroup bg1, b) BY sku1, bg1, dateTime1](sku, bg, dateTime);
prevBalanceA 'Остаток в группе ячеек (после)' (Sku sku, BinGroup bg, DATETIME dateTime)=
    [GROUP SUM prevBalanceA(Sku sku1, Bin b, DATETIME dateTime1) IF isParent(BinGroup bg1, b) BY sku1, bg1, dateTime1](sku, bg, dateTime);

bins 'Ячейки' = GROUP CONCAT canonicalId(Bin bin), ',' IF prevCurrentBalance(Sku sku, bin) ORDER canonicalId(bin), bin BY sku, stock(bin);

// статус ячейки

status 'Статус' (Bin bin) = IF prevCurrentBalance(bin) THEN 'Занята' ELSE 'Свободна';

META implementBinLedger(class, object, skuProp, quantityProp, stockProp, inBinProp, outBinProp)
    dateTime[BinLedger] (###class ledger) += dateTime(object(ledger));
    isPosted[BinLedger] (###class ledger) += isPosted(object(ledger));
    isClosed[BinLedger] (###class ledger) += isClosed(object(ledger));
    skuProp[BinLedger] (###class ledger) += skuProp(object(ledger));
    quantity[BinLedger] (###class ledger) += quantityProp(object(ledger));
    stock[BinLedger] (###class ledger) += stockProp(object(ledger));
    description[BinLedger] (###class ledger) += description(object(ledger));
END

META implementBinLedger(class, object, skuProp, quantityProp, stockProp, binProp)
    binProp[BinLedger] (###class ledger) += binProp(object(ledger));    
END    

META implementBinLedger(class, stockProp)
    dateTime[BinLedger] (###class ledger) += dateTime(ledger);
    isPosted[BinLedger] (###class ledger) += isPosted(ledger);
    isClosed[BinLedger] (###class ledger) += isClosed(ledger);
    sku[BinLedger] (###class ledger) += sku(ledger);
    quantity[BinLedger] (###class ledger) += quantity(ledger);
    stock[BinLedger] (###class ledger) += stockProp(ledger);
    inBin[BinLedger] (###class ledger) += inBin(ledger);
    outBin[BinLedger] (###class ledger) += outBin(ledger);
    description[BinLedger] (###class ledger) += description(ledger);
END
       
META createClassBinLedger (classPref)
    CLASS classPref##BinLedger : BinLedger;
END
META implementAggregationBinLedger(object, classPrefix, ClassPref, skuProp, quantityProp, stockProp)
    @createClassBinLedger(###classPrefix);
    needToCreate###classPrefix##BinLedger = ABSTRACT BOOLEAN (###object); 
    classPrefix##BinLedger = AGGR ###classPrefix##BinLedger WHERE needToCreate###classPrefix##BinLedger(###object object) MATERIALIZED INDEXED;
    @implementBinLedger(classPrefix##BinLedger, object, skuProp, quantityProp, stockProp, inBinProp, outBinProp);
END 

FORM binLedger 'Регистр изменения остатков по ячейкам'
    OBJECTS dates = (dFrom = DATE, dTo = DATE) PANEL
    PROPERTIES valFrom = VALUE(dFrom), valTo = VALUE(dTo)
    
    OBJECTS b = BinLedger
    PROPERTIES(b) READONLY dateTime, isClosed, nameStock, idBarcodeSku, nameSku, quantity, nameInBin, canonicalIdInBin, nameOutBin, canonicalIdOutBin, description, skip
    FILTERS isPosted(b),     
            date(b) >= dFrom, date(b) <= dTo
;

@extendFormFilterAccessStock(BinLedger, b, binLedger, stock, company);

DESIGN binLedger {
    MOVE BOX(dates) {
        horizontal = TRUE;
    }
    MOVE BOX(b);
    MOVE TOOLBARBOX;
}

quantityIn(Bin bin, BinLedger ledger) = quantity(ledger) IF inBin(ledger)==bin;
quantityOut(Bin bin, BinLedger ledger) = quantity(ledger) IF outBin(ledger)==bin;

balanceQuantity 'Кол-во' (Bin bin, BinLedger ledger) = quantityIn(bin, ledger) (-) quantityOut(bin, ledger);

inBin(Bin bin, BinLedger ledger) = inBin(ledger) IF outBin(ledger)==bin; 
outBin(Bin bin, BinLedger ledger) = outBin(ledger) IF inBin(ledger)==bin; 
bin(Bin bin, BinLedger ledger) = OVERRIDE inBin(bin, ledger), outBin(bin, ledger); 

balanceBin 'Ячейка (из/в)' (Bin bin, BinLedger ledger) = name(bin(bin, ledger));            

FORM binBalance 'Остатки по ячейкам'

    OBJECTS ts = Stock PANEL
    PROPERTIES(ts) SELECTOR name
    FILTERS isCompany(ts),
            useBins(ts)

    TREE binTree bg = BinGroup PARENT parent(bg)
    PROPERTIES READONLY name(bg)
    FILTERS ts==stock(bg)

    OBJECTS b = Bin
    PROPERTIES(b) READONLY canonicalId, name, canonicalName, status
    FILTERS b IS Bin AND NOT bg IS BinGroup OR isParent(bg, b), ts==stock(b)
    ORDERS canonicalId(b), name(b)

    TREE treeGroup g=SkuGroup PARENT parent(g)
    PROPERTIES READONLY order(g), name(g)
    ORDERS order(g), name(g)
    FILTERGROUP inactive FILTER 'Активные' active(g) 'F6' DEFAULT

    OBJECTS s = Sku
    PROPERTIES(s) READONLY name, idBarcode
    PROPERTIES (s, b) READONLY currentBalance
    ORDERS name(s)
    FILTERS isParent(g, s) OR s IS Sku AND NOT g
    FILTERGROUP balance
        FILTER 'С остатком' currentBalance(s, b) DEFAULT
        FILTER 'С движением' countLedger(s, b)
        
    OBJECTS l = BinLedger
    PROPERTIES (l) READONLY dateTime, description, skip
    PROPERTIES(b, l) READONLY balanceBin, balanceQuantity
    ORDERS dateTime(l) DESC
    FILTERS isPosted(l), 
            inBin(l)==b OR outBin(l)==b, 
            sku(l)==s
;

@extendFormFilterStockAccess(ts, binBalance);

DESIGN binBalance {
    BOX {
        size = (1024, 768);

        MOVE BOX(ts);
        NEW topContainer {
            fill = 1;

            NEW binGroup {
                horizontal = TRUE;
                fill = 1;

                MOVE BOX(TREE binTree) {
                    caption = 'Группы ячеек';
                }

                MOVE BOX(b) {
                    fill = 2.5;
                    GRID(b) {
                        defaultComponent = TRUE;
                    }
                }
            }
            NEW skuGroup {
                horizontal = TRUE;
                fill = 3;

                MOVE BOX(TREE treeGroup) {
                    caption = 'Группы Sku';
                }

                NEW skus {
                    fill = 2.5;
                    MOVE BOX(s) {
                        fill = 2;
                        GRID(s) {
                            defaultComponent = TRUE;
                        }
                    }    
                    MOVE BOX(l);                    
                }
            }
        }

        MOVE TOOLBARBOX;
    }
}

NAVIGATOR {
    WMSNavigator {
        WMSReports {
            NEW binLedger;
            NEW binBalance;
        }    
    }
}

FORM dialogBinStock 'Ячейки'
    OBJECTS s = Stock PANEL
    
    TREE binTree bg = BinGroup PARENT parent(bg)
    PROPERTIES READONLY name(bg), level(bg)
    FILTERS s==stock(bg)

    OBJECTS b = Bin
    PROPERTIES(b) READONLY canonicalId, name, id SHOWIF showIDs(), status

    FILTERS isParent(bg, b)
    ORDERS canonicalId(b), name(b)    
;

DESIGN dialogBinStock {
    BOX {
        size = (1024, 768);

        NEW topContainer {
            horizontal = TRUE;
            fill = 1;
            
            MOVE BOX(TREE binTree) {
                caption = 'Группы ячеек';
            }

            MOVE BOX(b) {
                fill = 2;
                GRID(b) {
                    defaultComponent = TRUE;
                }
            }
        }

        MOVE TOOLBARBOX;
    }
}

META defineInterfaceBin (object, prefix, caption)
    prefix###bin 'Ячейка'##caption = ABSTRACT Bin (###object) MATERIALIZED IN documentPrm;    
    prefix###bin 'Ячейка'##caption = DATA Bin (###user###object) IN documentPrm;
    prefix###bin (User###object object) += prefix###bin(object);
       
    name###prefix###bin 'Ячейка'##caption (###object object) = canonicalId(prefix###bin(object)) IN documentPrm CHARWIDTH 12;
    name###prefix###bin 'Ячейка'##caption (###user###object object) = canonicalId(prefix###bin(object)) IN documentPrm CHARWIDTH 12;
END

META defineDocumentBins (object)
    @defineInterfaceBin (object, in, ' (в)');
    @defineInterfaceBin (object, out, ' (из)');

    @defineDocumentInterfaceProperty (object, useBins, 'Ячейки');
                   
    @defineInterfaceBin (object###detail, in, ' (в)');
    @defineInterfaceBin (object###detail, out, ' (из)');
END

META defineDocumentBins (object, binType, caption)
    @defineInterfaceBin (object, binType, caption);

    @defineDocumentInterfaceProperty (object, useBins, 'Ячейки');

    @defineInterfaceBin (object###detail, binType, caption);

END

META setBinObject (object, stockProp)
    setInBin (object d)  { 
        DIALOG dialogBinStock OBJECTS s = stockProp(d), b = inBin(d) CHANGE;
    }
    
    setOutBin (object d)  { 
        DIALOG dialogBinStock OBJECTS s = stockProp(d), b = outBin(d) CHANGE;
    }
END

META setBinDocument (object, stockProp)
    @setBinObject (object, stockProp);
    @setBinObject (object###detail, stockProp);
END

META setBinObjectWithfilter (object, stockProp)
    setInBin (object d)  {
        DIALOG dialogBinStock OBJECTS s = stockProp(d), b = inBin(d) CHANGE FILTERS inBin(b, operation(d)), extraBinFilter(b, d);
    }

    setOutBin (object d)  {
        DIALOG dialogBinStock OBJECTS s = stockProp(d), b = outBin(d) CHANGE FILTERS outBin(b, operation(d)), extraBinFilter(b, d);
    }
END

META setBinDocumentWithfilter (object, stockProp)
    @setBinObjectWithfilter (object, stockProp);
    @setBinObjectWithfilter (object###detail, stockProp);
END

META setBinObject (object, stockProp, binType)
    set###binType##Bin (object d)  {
        DIALOG dialogBinStock OBJECTS s = stockProp(d), b = binType##Bin(d) CHANGE;
    }
END

META setBinDocument (object, stockProp, binType)
    @setBinObject (object, stockProp, binType);
    @setBinObject (object###detail, stockProp, binType);
END

META setBinDocument (object)
    @setBinDocument (###object, stock);
END

META defineBinConstraintsType(object, stockProp, binType)
    CONSTRAINT binType##Bin(object detail) AND NOT stockProp(detail)==stock(binType##Bin(detail))
        CHECKED BY binType##Bin[object] MESSAGE 'Ячейка недоступна для склада';
END

META defineBinConstraintsType(object, binType)
    @defineBinConstraintsType(###object, stock, binType);
END

META defineBinDocumentConstraintsType(object, stockProp, binType)
    @defineBinConstraintsType(###object, stockProp, binType);
    @defineBinConstraintsType(###object##Detail, stockProp, binType);
END

META defineBinDocumentConstraintsType(object, binType)
    @defineBinDocumentConstraintsType(object, stock, binType);
END    

META defineBinConstraints(object, stockProp)
    CONSTRAINT inBin(object detail) AND NOT stockProp(detail)==stock(inBin(detail))
               CHECKED BY inBin[object] MESSAGE 'Ячейка недоступна для склада';
               
    CONSTRAINT outBin(object detail) AND NOT stockProp(detail)==stock(outBin(detail))
               CHECKED BY outBin[object] MESSAGE 'Ячейка недоступна для склада';
END

META defineBinConstraints(object)
    @defineBinConstraints(###object, stock);
END

META defineBinDocumentConstraints(object, stock)
    @defineBinConstraints(###object, stock);
    @defineBinConstraints(###object##Detail, stock);
END

META defineBinDocumentConstraints(object)
    @defineBinDocumentConstraints(object, stock);
END

META extendObjectFormsBins(form, forms, obj, stockProp, background) 
    EXTEND FORM form
        PROPERTIES(obj) useBins, nameInBin SHOWIF useBins(obj) ON CHANGE setInBin(obj), nameOutBin SHOWIF useBins(obj) ON CHANGE setOutBin(obj)
        PROPERTIES(d) SHOWIF useBins(obj) BACKGROUND background(obj)
                      nameInBin ON CHANGE setInBin(d), nameOutBin ON CHANGE setOutBin(d)
    ;
    DESIGN form {
        headerExtraParams {
            NEW headerBins {
                caption = 'Ячейки';
                horizontal = TRUE;
                MOVE PROPERTY(useBins(obj));
                MOVE PROPERTY(nameInBin(obj));
                MOVE PROPERTY(nameOutBin(obj));
            }
        }
    }

    EXTEND FORM forms
        PROPERTIES(d) READONLY SHOWIF useBins(obj) BACKGROUND background(obj)
                      nameInBin, nameOutBin
    ;
END

META extendObjectFormsBins(form, forms, obj, stockProp, background, binType)
    EXTEND FORM form
        PROPERTIES(obj) useBins, name###binType##Bin SHOWIF useBins(obj) ON CHANGE set###binType##Bin(obj)
        PROPERTIES(d) SHOWIF useBins(obj) BACKGROUND background(obj) name###binType##Bin ON CHANGE set###binType##Bin(d)
    ;
    DESIGN form {
        headerExtraParams {
            NEW headerBins {
                caption = 'Ячейки';
                MOVE PROPERTY(useBins(obj));
                MOVE PROPERTY(name###binType##Bin(obj));
            }
        }
    }

    EXTEND FORM forms
        PROPERTIES(d) READONLY SHOWIF useBins(obj) BACKGROUND background(obj) name###binType##Bin
    ;
END

META extendObjectFormsBins(form, forms, obj, binType)
    EXTEND FORM form
        PROPERTIES(obj) useBins, name###binType##Bin SHOWIF useBins(obj) ON CHANGE set###binType##Bin(obj)
        PROPERTIES(d) SHOWIF useBins(obj) name###binType##Bin ON CHANGE set###binType##Bin(d)
    ;
    DESIGN form {
        headerExtraParams {
            NEW headerBins {
                caption = 'Ячейки';
                MOVE PROPERTY(useBins(obj));
                MOVE PROPERTY(name###binType##Bin(obj));
            }
        }
    }

    EXTEND FORM forms
        PROPERTIES(d) READONLY SHOWIF useBins(obj) name###binType##Bin
    ;
END

META defineInvoiceShipmentBins(stockProp, binType, caption)

    @defineDocumentBins(invoice, binType, caption);
    binType##Bin [ShipmentDetail] (InvoiceShipmentDetail detail) += binType##Bin(invoiceDetail(detail));
    
    @setBinDocument(UserInvoice, stockProp, binType);
    @setBinDocument(UserShipment, stockProp, binType);

    @defineBinDocumentConstraintsType(UserShipment, stockProp, binType);
    @defineBinDocumentConstraintsType(UserInvoice, stockProp, binType);      
    
    @extendObjectFormsBins(userInvoice, invoices, i, stockProp, backgroundShipped, binType);

    @extendObjectFormsBins(userShipment, shipments, s, binType);

    EXTEND FORM invoiceDetails
        PROPERTIES(d) AFTER name###stockProp(d) READONLY SHOWIF useBins(d) BACKGROUND backgroundShipped(d) name###binType##Bin
    ;
    
    overCopy[UserInvoiceDetail,UserInvoiceDetail](UserInvoiceDetail d, UserInvoiceDetail detail) + {
        binType##Bin(d) <- binType##Bin(detail);
    }
    
END

META deriveDocumentBinsProperty(object, readBin, writeBin, stockProp)
    over###readBin = ABSTRACT Bin (###object);
    writeBin (###object o) <- OVERRIDE over###readBin(o), readBin(operation(o), stockProp(o)) IF useBins(o)
        WHEN CHANGED(operation(o)) OR CHANGED(stockProp(o)) OR SETCHANGED(useBins(o));    
END

META deriveFormBinsProperty (form, object)
    overInBin = ABSTRACT Bin (###object###detail);
    overOutBin = ABSTRACT Bin (###object###detail);
    skipSetInBin = ABSTRACT BOOLEAN (###object###detail);
    dataSkipSetInBin = DATA BOOLEAN (###object###detail);
    skipSetInBinOver (###object###detail detail) = OVERRIDE dataSkipSetInBin(detail), skipSetInBin(detail);
    skipSetOutBin = ABSTRACT BOOLEAN (###object###detail);
    dataSkipSetOutBin = DATA BOOLEAN (###object###detail);
    skipSetOutBinOver (###object###detail detail) = OVERRIDE dataSkipSetOutBin(detail), skipSetOutBin(detail);
    
    WHEN LOCAL FORMS form (CHANGED(inBin(object(###object###detail detail))) OR CHANGED(sku(detail)) OR SETCHANGED(useBins(detail))) AND useBins(detail) AND NOT CHANGED(inBin(detail)) AND NOT skipSetInBinOver(detail) DO {
        inBin(detail) <- OVERRIDE overInBin(detail), inBin(form(detail));
    }

    WHEN LOCAL FORMS form (CHANGED(outBin(object(###object###detail detail))) OR CHANGED(sku(detail))) AND NOT CHANGED(outBin(detail)) AND NOT skipSetOutBinOver(detail) DO {
        outBin(detail) <- OVERRIDE overOutBin(detail), outBin(form(detail));
    }    
END

META deriveFormSetBinsProperty (form, object, binProp, stockProp)
    over###binProp = ABSTRACT VALUE OVERRIDE FIRST Bin (###object###detail);
    skipSet###binProp = ABSTRACT BOOLEAN (###object###detail);

    WHEN LOCAL FORMS form (CHANGED(binProp(object(###object###detail detail))) OR CHANGED(sku(detail)) OR SETCHANGED(useBins(detail))) AND useBins(detail) AND NOT CHANGED(binProp(detail)) AND NOT skipSet###binProp(detail) DO {
        binProp(detail) <- OVERRIDE over###binProp(detail), binProp(form(detail)), (GROUP MAX Bin bin IF in(sku(detail), bin) AND stock(bin)==stockProp(detail));
    }
END

META deriveFormSetBinsProperty (object, binProp, stockProp) 
    @deriveFormSetBinsProperty (object, object, binProp, stockProp);
END

META deriveInvoiceBins (readBin, writeBin, stockProp)
    @deriveDocumentOperationProperty(UserShipment, useBins);
    @deriveDocumentBinsProperty(UserShipment, readBin, writeBin, stockProp);
    @deriveDocumentOperationProperty(UserInvoice, useBins);
    @deriveDocumentBinsProperty(UserInvoice, readBin, writeBin, stockProp);

    @deriveFormSetBinsProperty (userInvoice, writeBin, stockProp);
END

META deriveDocumentBins (object, form, readBin, writeBin, stockProp)
    @deriveDocumentBinsProperty(object, readBin, writeBin, stockProp);

    @deriveFormSetBinsProperty (form, object, writeBin, stockProp);
END    
    
META deriveDocumentBins (object, form, inRead, inWrite, outRead, outWrite, stockProp)
    @deriveDocumentBinsProperty(object, inRead, inWrite, stockProp);
    @deriveDocumentBinsProperty(object, outRead, outWrite, stockProp);

    @deriveFormBinsProperty (form, object);
END

allowDeleteBins 'Разрешить удалять ячейки при наличии движения по ним' = DATA BOOLEAN () COMPLEX;

EXTEND FORM options
    PROPERTIES () allowDeleteBins
;

DESIGN options {
    pane {
        WMS {
            MOVE PROPERTY(allowDeleteBins());
        }
    }
}

CONSTRAINT DROPPED(Bin bin IS Bin) AND PREV(countLedger(bin)) AND NOT allowDeleteBins()
    MESSAGE 'Запрещено удалять ячейку при наличии движения по ней';

META defineBinAttribute(attribute, caption)
    EXTEND CLASS UsageType {
        attribute caption
    }

    attribute caption (BinGroup binGroup) = in(binGroup, UsageType.attribute);
    attribute caption (Bin bin) = in(bin, UsageType.attribute);

    change###attribute (BinGroup binGroup) {
        INPUT b = BOOLEAN DO {
            dataIn(binGroup, UsageType.attribute) <- b;            
        }
    }

    change###attribute (Bin bin) {
        INPUT b = BOOLEAN DO {
            dataIn(bin, UsageType.attribute) <- b;
        }
    }        
        
    EXTEND FORM dataBinGroup
        PROPERTIES(g) attribute ON CHANGE change###attribute(g)
    ;

    DESIGN dataBinGroup {
        additionalContainer{
            MOVE PROPERTY(attribute(g));
        }
    }

    EXTEND FORM dialogBinGroups
        PROPERTIES(g) READONLY attribute
    ;

    EXTEND FORM binGroups
        PROPERTIES(g) READONLY attribute
    ;

    EXTEND FORM bin
        PROPERTIES(b) attribute ON CHANGE change###attribute(b)
    ;

    DESIGN bin {
        additionalContainer{
            MOVE PROPERTY(attribute(b));
        }
    }

    EXTEND FORM dialogBins
        PROPERTIES(b) READONLY attribute
    ;

    EXTEND FORM bins
        PROPERTIES(b) READONLY attribute
    ;

    EXTEND FORM binStocks
        PROPERTIES(b) READONLY attribute
    ;
END

@defineBinAttribute(storage, 'Хранение');

@defineBinAttribute(picking, 'Комплектация');