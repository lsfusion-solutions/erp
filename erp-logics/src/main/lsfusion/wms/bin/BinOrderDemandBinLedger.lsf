MODULE BinOrderDemandBinLedger;

REQUIRE BinOrderTransferBinLedger, PurchaseOrder;

NAMESPACE Bin;

binReserve 'Страховой запас (кол-во)' = ABSTRACT VALUE NUMERIC[16,5](Sku, Bin) MATERIALIZED; //минимум для точки заказа
binReserve 'Страховой запас (кол-во)' (Sku sku, UserBinOrder order) = binReserve(sku, inBin(order));

maxBinReserve = ABSTRACT VALUE NUMERIC[16,5](Sku, Bin) MATERIALIZED; //суммарный размер полки
maxBinReserve (Sku sku, UserBinOrder order) = maxBinReserve(sku, inBin(order));

minAvailableQuantity (Sku sku, Bin bin) = MAX availableQuantity(sku, bin), (0.0 IF sku IS Sku AND bin IS Bin);
preCalcRecQuantity  (Sku sku, Bin bin) = maxBinReserve(sku, bin) (-) minAvailableQuantity(sku, bin); //расчетная потребность

availableQuantityOutBin 'Доступно' (Sku sku, Operation operation, Stock stock) = availableQuantity(sku, outBin(operation, stock)) (-) extraFromBinTransfer(sku, stock);
 
recommendedQuantity 'Рекомендуемое к перемещению кол-во'  (Sku sku, Operation operation, Stock stock)  = 
    IF minAvailableQuantity(sku, inBin(operation, stock)) <= binReserve(sku, inBin(operation, stock)) THEN
        IF availableQuantityOutBin(sku, operation, stock) > preCalcRecQuantity(sku, inBin(operation, stock)) 
            THEN preCalcRecQuantity(sku, inBin(operation, stock))
            ELSE availableQuantityOutBin(sku, operation, stock);

@defineOption(checkAmountPack, 'Проверять кратность упаковки в заказах на перемещение', BOOLEAN, WMS);

ceilCalcRecQuantity (Sku sku, Operation operation, Stock stock) =  IF checkAmountPack() AND Purchase.amountPack(sku) > 0 
    THEN ceil(recommendedQuantity(sku, operation, stock), amountPack(sku)) IF amountPack(sku)!=0
    ELSE (IF split(sku) THEN ceil(recommendedQuantity(sku, operation, stock)) ELSE recommendedQuantity(sku, operation, stock));

ceilAvailableQuantity (Sku sku, Operation operation, Stock stock) = IF checkAmountPack() AND amountPack(sku) > 0 AND availableQuantityOutBin(sku, operation, stock) > amountPack(sku) 
    THEN floor(availableQuantityOutBin(sku, operation, stock)/(amountPack(sku) IF amountPack(sku)!=0))*amountPack(sku)
    ELSE (IF split(sku) THEN floor(availableQuantityOutBin(sku, operation, stock)) ELSE availableQuantityOutBin(sku, operation, stock));
    
recommendedPackQuantity 'Рекомендуемое к перемещению кол-во' (Sku sku, Operation operation, Stock stock) = 
    IF ceilAvailableQuantity(sku, operation, stock)> 0.0 AND ceilCalcRecQuantity(sku, operation, stock)> 0.0 THEN
    MIN ceilCalcRecQuantity(sku, operation, stock), ceilAvailableQuantity(sku, operation, stock);

recommendedQuantity 'Рекомендуемое к перемещению кол-во' (Sku sku, UserBinOrder order) = recommendedQuantity(sku, operation(order), stock(order));
recommendedPackQuantity (Sku sku, UserBinOrder order) = recommendedPackQuantity(sku, operation(order), stock(order));

skipAutoFillRecommendedQuantity = ABSTRACT BOOLEAN (Sku, UserBinOrder);

fillRecommendedQuantity 'Заполнить рекомендуемым' (UserBinOrder userOrder)  { 
    FOR Sku sku IS Sku AND NOT skipAutoFillRecommendedQuantity(sku, userOrder) AND recommendedQuantity (sku, operation(userOrder), stock(userOrder)) > 0.0 NEW d = UserBinOrderDetail DO {
            userBinOrder(d) <- userOrder;
            sku(d) <- sku;
            IF recommendedPackQuantity(sku, operation(userOrder), stock(userOrder)) < maxBinReserve(sku, inBin(operation(userOrder), stock(userOrder))) 
                THEN  {
                    quantity(d) <- recommendedPackQuantity(sku, operation(userOrder), stock(userOrder));     
                } ELSE 
                    IF checkAmountPack() AND recommendedPackQuantity(sku, operation(userOrder), stock(userOrder))/Purchase.amountPack(sku) > 1.0 AND Purchase.amountPack(sku)> 0.0 
                        THEN {
                            quantity(d) <- recommendedPackQuantity(sku, operation(userOrder), stock(userOrder)) (-) Purchase.amountPack(sku);    
                        } ELSE {
                            quantity(d) <- maxBinReserve(sku, inBin(operation(userOrder), stock(userOrder))) (-) MAX availableQuantity(sku, inBin(operation(userOrder), stock(userOrder))), 0.0;    
                        }

        }
} TOOLBAR CONFIRM;

EXTEND FORM userBinOrder
    PROPERTIES (ks, o) READONLY BEFORE price(ks, st, o) recommendedQuantity ON CONTEXTMENU fillRecommendedQuantity(o), binReserve   
;