MODULE BatchBinLedger;

REQUIRE BinSkuLedger;

NAMESPACE Bin;

batch = ABSTRACT Batch (BinLedger) MATERIALIZED INDEXED;
nameBatch 'Наименование' (BinLedger ledger) = name(batch(ledger)) IN id;
idBatch 'Код' (BinLedger ledger)= id(batch(ledger)) IN id;

EXTEND FORM binLedger
    PROPERTIES READONLY nameBatch(b), idBatch(b)
;

/////из модуля bin
TABLE batchBinGroup(Batch, BinGroup);
dataIn 'Отм.' = DATA BOOLEAN (Batch, BinGroup);

levelParentDataIn (Batch batch, BinGroup binGroup) =
    GROUP MIN level(binGroup, BinGroup parent) IF dataIn(batch, parent) MATERIALIZED;

nearestParentDataIn (Batch batch, BinGroup binGroup) = binGroup(binGroup, levelParentDataIn(batch, binGroup));
nearestDataIn (Batch batch, BinGroup binGroup) = dataIn(batch, nearestParentDataIn(batch, binGroup)) MATERIALIZED;

in 'Отм.' (Batch batch, BinGroup binGroup) = OVERRIDE dataIn(batch, binGroup), nearestDataIn(batch, binGroup) MATERIALIZED INDEXED;

TABLE batchBin(Batch, Bin);
dataIn 'Отм.' = DATA BOOLEAN (Batch, Bin);
in 'Отм.' (Batch batch, Bin bin) = OVERRIDE dataIn(batch, bin), in(batch, binGroup(bin)) MATERIALIZED INDEXED;

countInLedger 'Кол-во приходов' = 
    GROUP SUM 1 IF active(BinLedger ledger) BY batch(ledger), inBin(ledger) MATERIALIZED;

countOutLedger 'Кол-во расходов' =
    GROUP SUM 1 IF active(BinLedger ledger) BY batch(ledger), outBin(ledger) MATERIALIZED;

countLedger 'Кол-во движений' (Batch batch, Bin bin) =
    countInLedger(batch, bin) (+) countOutLedger(batch, bin) MATERIALIZED;

countBatchLedger 'Кол-во движений' = GROUP SUM countLedger(Batch batch, Bin bin) BY bin;

inBinTotal 'Приход в ячейку' =
    GROUP SUM quantity(BinLedger ledger) IF active(ledger) BY batch(ledger), inBin(ledger) MATERIALIZED;
    
outBinTotal 'Расход из ячейки' =
    GROUP SUM quantity(BinLedger ledger) IF active(ledger) BY batch(ledger), outBin(ledger) MATERIALIZED;
    
inBinTotalA 'Приход в ячейку' =
    GROUP SUM quantity(BinLedger ledger) IF date(ledger) > DATE date AND active(ledger) BY batch(ledger), inBin(ledger), date;
    
outBinTotalA 'Расход из ячейки' =
    GROUP SUM quantity(BinLedger ledger) IF date(ledger) > DATE date AND active(ledger) BY batch(ledger), outBin(ledger), date;
        
inBinTotalB 'Приход в ячейку' =
    GROUP SUM quantity(BinLedger ledger) IF date(ledger) >= DATE date AND active(ledger) BY batch(ledger), inBin(ledger), date;
    
outBinTotalB 'Расход из ячейки' =
    GROUP SUM quantity(BinLedger ledger) IF date(ledger) >= DATE date AND active(ledger) BY batch(ledger), outBin(ledger), date;
                
inBinTotalA 'Приход в ячейку' =
    GROUP SUM quantity(BinLedger ledger) IF dateTime(ledger) > DATETIME dateTime AND active(ledger) BY batch(ledger), inBin(ledger), dateTime;
    
outBinTotalA 'Расход из ячейки' =
    GROUP SUM quantity(BinLedger ledger) IF dateTime(ledger) > DATETIME dateTime AND active(ledger) BY batch(ledger), outBin(ledger), dateTime;
        
inBinTotalB 'Приход в ячейку' =
    GROUP SUM quantity(BinLedger ledger) IF dateTime(ledger) >= DATETIME dateTime AND active(ledger) BY batch(ledger), inBin(ledger), dateTime;
    
outBinTotalB 'Расход из ячейки' =
    GROUP SUM quantity(BinLedger ledger) IF dateTime(ledger) >= DATETIME dateTime AND active(ledger) BY batch(ledger), outBin(ledger), dateTime;                   
        
currentBalance 'Текущий остаток в ячейке' (Batch batch, Bin bin)=
    inBinTotal(batch, bin) (-) outBinTotal(batch, bin) MATERIALIZED;
prevCurrentBalance 'Текущий остаток в ячейке' (Batch batch, Bin bin) = PREV(currentBalance(batch, bin));

prevCurrentBalanceBatch 'Текущий остаток в ячейке' = GROUP SUM prevCurrentBalance(Batch batch, Bin bin) BY bin;

balanceA 'Остаток в ячейке на конец дня' (Batch batch, Bin bin, DATE date) = currentBalance(batch, bin) (-)
                                                                 inBinTotalA(batch, bin, date) (+) outBinTotalA(batch, bin, date);

// без учета текущей даты/времени
balanceB 'Остаток в ячейке (до)' (Batch batch, Bin bin, DATETIME dateTime) = currentBalance(batch, bin) (-)
                                                                 inBinTotalB(batch, bin, dateTime) (+) outBinTotalB(batch, bin, dateTime);
prevBalanceB 'Остаток (до)' (Batch batch, Bin bin, DATETIME dateTime) = PREV(balanceB(batch, bin, dateTime) IF dateTime IS DATETIME);

// с учетом текущей даты/времени
balanceA 'Остаток в ячейке (после)' (Batch batch, Bin bin, DATETIME dateTime) = currentBalance(batch, bin) (-)
                                                                 inBinTotalA(batch, bin, dateTime) (+) outBinTotalA(batch, bin, dateTime);
prevBalanceA 'Остаток в ячейке (после)'(Batch batch, Bin bin, DATETIME dateTime) = PREV(balanceA(batch, bin, dateTime) IF dateTime IS DATETIME);

currentBalance 'Текущий остаток в группе ячеек' (Batch batch, BinGroup bg)=
    [GROUP SUM currentBalance(Batch batch1, Bin b) IF isParent(BinGroup bg1, b) BY batch1, bg1](batch, bg);
prevCurrentBalance 'Текущий остаток в группе ячеек' (Batch batch, BinGroup bg)=
    [GROUP SUM prevCurrentBalance(Batch batch1, Bin b) IF isParent(BinGroup bg1, b) BY batch1, bg1](batch, bg);
balanceB 'Остаток в группе ячеек (до)' (Batch batch, BinGroup bg, DATETIME dateTime)=
    [GROUP SUM balanceB(Batch batch1, Bin b, DATETIME dateTime1) IF isParent(BinGroup bg1, b) BY batch1, bg1, dateTime1](batch, bg, dateTime);
prevBalanceB 'Остаток в группе ячеек (до)' (Batch batch, BinGroup bg, DATETIME dateTime)=
    [GROUP SUM prevBalanceB(Batch batch1, Bin b, DATETIME dateTime1) IF isParent(BinGroup bg1, b) BY batch1, bg1, dateTime1](batch, bg, dateTime);
balanceA 'Остаток в группе ячеек (после)' (Batch batch, BinGroup bg, DATETIME dateTime)=
    [GROUP SUM balanceB(Batch batch1, Bin b, DATETIME dateTime1) IF isParent(BinGroup bg1, b) BY batch1, bg1, dateTime1](batch, bg, dateTime);
prevBalanceA 'Остаток в группе ячеек (после)' (Batch batch, BinGroup bg, DATETIME dateTime)=
    [GROUP SUM prevBalanceA(Batch batch1, Bin b, DATETIME dateTime1) IF isParent(BinGroup bg1, b) BY batch1, bg1, dateTime1](batch, bg, dateTime);

// статус ячейки

statusBatch 'Статус' (Bin bin) = IF prevCurrentBalanceBatch(bin) THEN 'Занята' ELSE 'Свободна';

META implementBatchBinLedger(class, object, batchProp, quantityProp, stockProp, inBinProp, outBinProp)
    batchProp[BinLedger] (###class ledger) += batchProp(object(ledger));
END

META implementBatchBinLedger(class, stockProp)
    batch[BinLedger] (###class ledger) += batch(ledger);
END

META implementAggregationBatchBinLedger(object, classPrefix, ClassPref, batchProp, quantityProp, stockProp)
    @implementBatchBinLedger(classPrefix##BinLedger, object, batchProp, quantityProp, stockProp, inBinProp, outBinProp);
END 

FORM batchBinBalance 'Остатки по ячейкам по партиям'

    OBJECTS ts = Stock PANEL
    PROPERTIES(ts) SELECTOR name
    FILTERS isCompany(ts),
            useBins(ts)

    TREE binTree bg = BinGroup PARENT parent(bg)
    PROPERTIES READONLY name(bg)
    FILTERS ts==stock(bg)

    OBJECTS b = Bin
    PROPERTIES(b) READONLY name, canonicalName, statusBatch
    FILTERS b IS Bin AND NOT bg IS BinGroup OR isParent(bg, b), ts==stock(b)
    ORDERS name(b)

    TREE treeGroup g=SkuGroup PARENT parent(g)
    PROPERTIES READONLY order(g), name(g)
    ORDERS order(g), name(g)
    FILTERGROUP inactive FILTER 'Активные' active(g) 'F6' DEFAULT

    OBJECTS bt = Batch
    PROPERTIES(bt) READONLY nameSku, idBarcodeSku, name, id
    PROPERTIES (bt, b) READONLY currentBalance
    ORDERS name(bt)
    FILTERS isParent(g, bt) OR bt IS Batch AND NOT g
    FILTERGROUP balance
        FILTER 'С остатком' currentBalance(bt, b) DEFAULT
        FILTER 'С движением' countLedger(bt, b)
        
    OBJECTS bl = BinLedger
    PROPERTIES (bl) READONLY dateTime, description, skip
    PROPERTIES(b, bl) READONLY balanceBin, balanceQuantity
    ORDERS dateTime(bl) DESC
    FILTERS isPosted(bl), 
            inBin(bl)==b OR outBin(bl)==b, 
            batch(bl)==bt
;

@extendFormFilterStockAccess(ts, batchBinBalance);

DESIGN batchBinBalance {
    BOX {
        size = (1024, 768);

        MOVE BOX(ts);
        NEW topContainer {
            fill = 1;

            NEW binGroup {
                horizontal = TRUE;
                fill = 1;

                MOVE BOX(TREE binTree) {
                    caption = 'Группы ячеек';
                }

                MOVE BOX(b) {
                    fill = 2.5;
                    GRID(b) {
                        defaultComponent = TRUE;
                    }
                }
            }
            NEW batchSkuGroup {
                horizontal = TRUE;
                fill = 3;

                MOVE BOX(TREE treeGroup) {
                    caption = 'Группы Sku';
                }

                NEW batches {
                    fill = 2.5;
                    MOVE BOX(bt) {
                        fill = 2;
                        GRID(bt) {
                            defaultComponent = TRUE;
                        }
                    }    
                    MOVE BOX(bl);                    
                }
            }
        }

        MOVE TOOLBARBOX;
    }
}

NAVIGATOR {
    WMSNavigator {
        WMSReports {
            NEW batchBinBalance AFTER binBalance;
        }    
    }
}

CONSTRAINT DROPPED(Bin bin IS Bin) AND PREV(countBatchLedger(bin)) AND NOT allowDeleteBins()
    MESSAGE 'Запрещено удалять ячейку при наличии движения по ней';

currentBalanceBin 'Текущий остаток в ячейках' (Batch batch, Stock st)=
    [GROUP SUM currentBalance(Batch batch1, Bin b) BY batch1, stock(b)](batch, st);
prevCurrentBalanceBin 'Текущий остаток в ячейках' (Batch batch, Stock st)=
    [GROUP SUM prevCurrentBalance(Batch batch1, Bin b) BY batch1, stock(b)](batch, st);
balanceBinB 'Остаток в ячейках (до)' (Batch batch, Stock st, DATETIME dateTime)=
    [GROUP SUM balanceB(Batch batch1, Bin b, DATETIME dateTime1) BY batch1, stock(b), dateTime1](batch, st, dateTime);
prevBalanceBinB 'Остаток в ячейках (до)' (Batch batch, Stock st, DATETIME dateTime)=
    [GROUP SUM prevBalanceB(Batch batch1, Bin b, DATETIME dateTime1) BY batch1, stock(b), dateTime1](batch, st, dateTime);
balanceBinA 'Остаток в ячейках (после)' (Batch batch, Stock st, DATETIME dateTime)=
    [GROUP SUM balanceA(Batch batch1, Bin b, DATETIME dateTime1) BY batch1, stock(b), dateTime1](batch, st, dateTime);
prevBalanceBinA 'Остаток в ячейках (после)' (Batch batch, Stock st, DATETIME dateTime)=
    [GROUP SUM prevBalanceA(Batch batch1, Bin b, DATETIME dateTime1) BY batch1, stock(b), dateTime1](batch, st, dateTime);
diffBalanceBinA 'Расхождение по остаток в ячейках (до)' (Batch batch, Stock st, DATETIME dateTime)=
    balanceBinA(batch, st,dateTime) (-) balanceA(batch, st,dateTime);
prevDiffBalanceBinA 'Расхождение по остаткам в ячейках (после)' (Batch batch, Stock st, DATETIME dateTime)=
    prevBalanceBinA(batch, st,dateTime) (-) prevBalanceB(batch, st,dateTime);

currentDiffBalanceBin 'Текущий остаток в ячейках' (Batch batch, Stock st)=
    currentBalanceBin(batch, st) (-) currentBalance(batch, st);
prevCurrentDiffBalanceBin 'Текущий остаток в ячейках' (Batch batch, Stock st)=
    prevCurrentBalanceBin(batch, st) (-) prevCurrentBalance(batch, st);
diffBalanceBinB 'Расхождение по остаткам в ячейках (до)' (Batch batch, Stock st, DATETIME dateTime)=
    balanceBinB(batch, st,dateTime) (-) balanceB(batch, st,dateTime);
prevDiffBalanceBinB 'Остаток в ячейках (до)' (Batch batch, Stock st, DATETIME dateTime)=
    prevBalanceBinB(batch, st,dateTime) (-) prevBalanceB(batch, st,dateTime);

balanceBBatch 'Остаток в ячейке (до)' (Bin bin, DATETIME dateTime) = GROUP SUM balanceB(Batch batch, bin, dateTime);
balanceABatch 'Остаток в ячейке (после)' (Bin bin, DATETIME dateTime) = GROUP SUM balanceA(Batch batch, bin, dateTime);

FORM balanceBinBatchStock 'Сравнение остатков по ячейкам и складу по партиям'

    OBJECTS t=DATETIME PANEL
    PROPERTIES   valT = VALUE(t)
    
    OBJECTS ss = Stock PANEL
    PROPERTIES(ss) name SELECTOR
    FILTERS isCompany(ss)
    
    TREE skuTree sk = SkuGroup PARENT parent(sk)
    PROPERTIES READONLY order(sk), skuTreeName = name(sk)
    ORDERS order(sk), skuTreeName
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F6' DEFAULT

    OBJECTS           stb=(st=Stock, bt=Batch)
    PROPERTIES        READONLY BACKGROUND backgroundBatch(st, bt) nameSku(bt)
    PROPERTIES        READONLY balanceB(bt, st, t), balanceBinB(bt, st, t), diffBalanceBinB(bt, st, t)
    PROPERTIES(bt)    READONLY BACKGROUND backgroundBatch(st, bt) number, series, dateTime, nameSupplier, name, id, shippedQuantity, cost, expiryDate
    FILTERS           isParent(sk, bt),
            st == ss
    ORDERS          dateTime(bt)

    FILTERGROUP filterExpiry
        FILTER 'Партии с истекшим сроком годности' expiryDate(bt) < toDate(t) 'F7'
        FILTER 'Партии со сроком годности, истекающим через 1 день' expires(bt, t, 1) 'F6'
        FILTER 'Партии со сроком годности, истекающим через 7 дней' expires(bt, t, 7) 'F6'
        FILTER 'Партии со сроком годности, истекающим через 30 дней' expires(bt, t, 30) 'F4'

    FILTERGROUP filterBalance
        FILTER 'Партии с остатком' balanceB(bt, st, t) 'F10'
        FILTER 'Партии с расхождением между по остаткам на складе и в ячейках ' (balanceB(bt, st, t) OR balanceBinB(bt, st, t)) AND NOT balanceB(bt, st, t) = balanceBinB(bt, st, t)  'F11' DEFAULT 
        FILTER 'Партии с движением по складу' countLedger(bt, st)
        FILTER 'Партии с остатком по ячейкам' balanceBinB(bt, st, t)        
        FILTER 'Партии пришедшие за последний 1 день' dateTime(bt) >= subtractSeconds(currentDateTime(), 1) 'F10'
        FILTER 'Партии пришедшие за последние 7 дней' dateTime(bt) >= subtractSeconds(currentDateTime(), 7) 'F9'
        FILTER 'Партии пришедшие за последние 30 дней' dateTime(bt) >= subtractSeconds(currentDateTime(), 30) 'F8'
    
    OBJECTS b = Bin
    PROPERTIES(b) READONLY name, id SHOWIF showIDs(), canonicalName, canonicalId
    PROPERTIES  balanceB(bt, b, t)
    FILTERS stock(b) = ss, balanceB(bt, b, t)

    OBJECTS bl = BinLedger
    PROPERTIES (bl) READONLY dateTime, description, skip, quantity, canonicalIdInBin, nameInBin, canonicalIdOutBin, nameOutBin
    ORDERS dateTime(bl) DESC
    FILTERS isPosted(bl), batch(bl)==bt
;

@extendFormFilterStockAccess(ss, balanceBinBatchStock);

DESIGN balanceBinBatchStock {
    BOX {
        size = (1024, 768);
        NEW filter {
            alignment = STRETCH;
            horizontal = TRUE;
            MOVE PROPERTY (valT);
            MOVE PROPERTY (name(ss));
        }
        NEW topContainer {
            fill = 1;
            horizontal = TRUE;

            NEW firstCaseTwo {
                fill = 1;
                MOVE BOX(TREE skuTree) { caption = 'Группы'; }
            }
            NEW secondCase {
                fill = 3;
                NEW skuBox {
                    fill = 2;
                    MOVE BOX(stb) {
                        caption = 'Партии';
                        fill = 2;
                    }
                }
                NEW ledgerBox {
                    fill = 1;
                    tabbed = TRUE;
                    MOVE BOX(b);
                    MOVE BOX(bl);
                }
            }


        }

        MOVE TOOLBARBOX;
    }
}

NAVIGATOR {
    WMSDocument {
        NEW balanceBinBatchStock AFTER balanceBinSkuStock;
    }
}

dateTimeLastMoved 'Время последнего прихода' (batch, bin) =
    GROUP LAST dateTime(BinLedger ledger)
    ORDER dateTime(ledger), ledger
    WHERE active(ledger)
    BY batch(ledger), inBin(ledger);

dateTimeLastMoved 'Время последнего прихода' (batch, binGroup) =
    GROUP LAST dateTime(BinLedger ledger)
    ORDER dateTime(ledger), ledger
    WHERE active(ledger)
    BY batch(ledger), binGroup(inBin(ledger));

FORM dialogBinGroupBatch 'Партии'
    OBJECTS st = Stock PANEL
    OBJECTS binGr = BinGroup PANEL
    OBJECTS t = DATETIME PANEL
    OBJECTS sk = Sku PANEL

    OBJECTS bt = Batch
    PROPERTIES (bt) READONLY number, series, dateTime, nameSupplier, nameSku, id SHOWIF showIDs(), name, shippedQuantity, cost, expiryDate
    PROPERTIES  READONLY balanceB(bt, st, t)
    PROPERTIES  READONLY currentBalance(bt, st)
    FILTERS sku(bt) == sk
    ORDERS dateTime(bt)

    FILTERGROUP ledger
        FILTER 'С движением по зоне' dateTimeLastMoved(bt, binGr) 'F6' DEFAULT
        FILTER 'С движением по складу' skuLedger(bt, st) == sk 'F6'

    FILTERGROUP batch
        FILTER 'Партии с остатком до операции' balanceB(bt, binGr, t) 'F11'
        FILTER 'Партии с положительным остатком' currentBalance(bt, binGr) > 0 'F9'
        FILTER 'Партии с остатком' currentBalance(bt, binGr) 'F8' DEFAULT
;
DESIGN dialogBinGroupBatch {
    BOX {
        PROPERTY (balanceB(bt,st,t)) {
            caption = 'Остаток до операции';
        }
    }
}