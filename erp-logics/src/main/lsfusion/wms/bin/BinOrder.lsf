MODULE BinOrder;

REQUIRE Bin, Document, BinLedger, Operation, StockSkuDocument, PurchasePack;

NAMESPACE Bin;

CLASS ABSTRACT BinOrder 'Заказ на перемещение по ячейкам': Document;
CLASS ABSTRACT BinOrderDetail 'Строка заказа на перемещение по ячейкам': DocumentDetail;

CLASS UserBinOrder 'Заказ на перемещение по ячейкам (польз.)': BinOrder;
CLASS UserBinOrderDetail 'Строка заказа на перемещение по ячейкам': BinOrderDetail;

selected 'Отм.' = DATA LOCAL BOOLEAN (BinOrder); 

@defineDocumentInterface(binOrder);

@defineAddDetailDialogBarcode(userBinOrder, sku);

@defineDocumentInterfaceDetailPrice(binOrder);

@deriveDocumentHeaderTimePrefix(UserBinOrder, );

@defineDocumentInterfaceNumber(binOrder, BPSTRING[2]);

@defineDocumentInterfacePosted(binOrder);

@defineDocumentInterfaceClosed(binOrder);

@defineDocumentInterfaceDataStock(binOrder, stock, 'Склад');

@defineDocumentInterfaceDescription(binOrder, 'Заказ на перемещение по ячейкам');

@defineDocumentInterfaceDetailSku(binOrder, sku);

INDEX sku(BinOrderDetail d), binOrder(d);

@defineDocumentInterfaceDetailQuantity(binOrder);

balanceB 'Остаток (до)' = ABSTRACT NUMERIC[16,5] (BinOrderDetail) MATERIALIZED;
balanceB 'Остаток (до)' = DATA NUMERIC[16,5] (UserBinOrderDetail);
balanceB (UserBinOrderDetail binOrderDetail) += balanceB(binOrderDetail);   

@defineDocumentDetailGrossWeight(binOrder, sku);

@defineDocumentHeaderSkuQuantity(binOrder, sku);

@defineDocumentHeaderQuantity(binOrder);

@defineDocumentBins(binOrder);

INDEX outBin(BinOrderDetail d), sku(d);

@setBinDocument(UserBinOrder, stock);

@defineBinDocumentConstraints(userBinOrder);

@implementDocument(binOrder);
supplierStock[Document](BinOrder binOrder) += stock(binOrder);

@implementDocumentForm(binOrder, bo, 'Заказ на перемещение по ячейкам');

@defineAddDetailDialogSkuStock(userBinOrder, sku, stock, dialogSku);

//пользовательский заказ на перемещение
@defineExternalizable(userBinOrder, STRING[100]);

@defineExternalizable(userBinOrderDetail, STRING[100]);

@defineNumeratedDefault(UserBinOrder, 'Заказы на перемещение по ячейкам ', 'ЗП');

disablePosted 'Запретить проведение' = ABSTRACT BOOLEAN (UserBinOrder);
overPrePost 'Провести' (UserBinOrder o)  { 
    IF NOT disablePosted(o) THEN {
        isPosted(o) <- TRUE;
    } 
}

//вес заказа
sumGrossWeight 'Вес брутто, кг' = ABSTRACT NUMERIC[14,3] (BinOrderDetail);        
sumGrossWeight 'Вес брутто, кг' = DATA NUMERIC[14,3] (UserBinOrderDetail);
sumGrossWeight(UserBinOrderDetail d) += sumGrossWeight(d);
   
sumGrossWeight(UserBinOrderDetail d) <- grossWeight(sku(d)) * quantity(d)
    WHEN CHANGED(sku(d)) OR CHANGED(quantity(d));
              
@defineDocumentHeaderGrossWeightCustomPrefix (binOrder, binOrderDetail, sum, ', кг');
@defineDocumentHeaderGrossWeightCustomPrefix (userBinOrder, userBinOrderDetail, sum, ', кг'); 

@defineDocumentDialogStocks(userBinOrder, stock, company, , );

//автоматическое закрытие заказов
closeDateTime 'Дата/время автоматического закрытия' = ABSTRACT DATETIME (BinOrder) IN documentPrm;
closeDateTime 'Дата/время автоматического закрытия' = DATA DATETIME (UserBinOrder) IN documentPrm;
closeDateTime(UserBinOrder order) += closeDateTime(order);

quantityMinutesCloseBinOrders 'Количество минут для автоматического закрытия заказа' = DATA INTEGER ();

closeDateTime(UserBinOrder order) <- sumMinutes(dateTime(order), quantityMinutesCloseBinOrders())
            WHEN CHANGED(dateTime(order));
            
EXTEND FORM options
    PROPERTIES () quantityMinutesCloseBinOrders
;
         
DESIGN options {
    pane {
        WMS {
            MOVE PROPERTY(quantityMinutesCloseBinOrders());    
        }
    }
}

autoCloseBinOrder 'Автоматическое закрытие заказов' ()  { 
    FOR closeDateTime(BinOrder order)<=currentDateTime() AND isOpened(order) DO {
        isClosed(order) <- TRUE;
    }
    APPLY {};
}
            
FORM userBinOrder 'Заказ на перемещение по ячейкам (польз.)'
    OBJECTS o = UserBinOrder PANEL
    PROPERTIES (o) isPosted, nameStock ON CHANGE changeStockCompany(o), nameNumerator, number, series, date, time, note, 
                   nameOutBin ON CHANGE setOutBin(o), nameInBin ON CHANGE setInBin(o)
    PROPERTIES (o) READONLY countUserBinOrderDetail, quantityBinOrderDetail, sumGrossWeightUserBinOrderDetail
    PROPERTIES (o) closeDateTime
    
    OBJECTS d = UserBinOrderDetail
    PROPERTIES (d) index, idBarcodeSku, idSku, nameSku, shortNameUOMSku, nameOutBin ON CHANGE setOutBin(d), nameInBin ON CHANGE setInBin(d), quantity, sumGrossWeight, balanceB READONLY 
    PROPERTIES (d) NEW, deleteod = DELETE GRID
    PROPERTIES(o) DRAW d fillDocument, addDetailDialogSkuStockUserBinOrderDetail,
                           addDetailInputBarcodeUserBinOrderDetail, deleteUserBinOrderDetail
    FILTERS binOrder(d)==o
    ORDERS index(d)
    EDIT UserBinOrder OBJECT o
    
    EVENTS
        ON OK overPrePost(o)
;

DESIGN userBinOrder {

    BOX {
        size = (1024, 768);
        NEW mainTabbed {
            tabbed = TRUE;
            fill = 1;
            NEW documentBox{
                fill = 1;
                caption = 'Заказ';
                NEW headerBox {
                    horizontal = TRUE;
    
                    NEW headerRow1 {
                        fill = 1;
    
                        MOVE GROUP(documentHeader,o) {
                            lines = 1;
                            NEW first {
                                horizontal = TRUE;
                                MOVE PROPERTY(isPosted(o));
                            }
                            NEW second { 
                                horizontal = TRUE;
                                MOVE PROPERTY(nameNumerator(o));
                                MOVE PROPERTY(number(o));
                                MOVE PROPERTY(series(o));
                                MOVE PROPERTY(date(o));
                                MOVE PROPERTY(time(o));
                                MOVE PROPERTY(nameStock(o));
                            }    
                        }                    
                        
                        NEW headerRow11 {
                            horizontal = TRUE;
                        }
                        NEW headerTabbedPane {
                            alignment = STRETCH;
                            tabbed = TRUE;
                            NEW headerMainParams {
                                caption = 'Основные параметры';
                                MOVE GROUP(documentPrm,o) {
                                    lines = 3;
                                }
                            }
                            NEW headerExtraParams {
                                caption = 'Дополнительные параметры';
                                horizontal = TRUE;
                                MOVE PROPERTY(closeDateTime(o));
                            }  
                        }  
                    }
    
                    MOVE GROUP(documentSum,o) {
                        lines = 1;
                    }
                }
                NEW specificationBox {
                    fill = 1;
                    tabbed = TRUE;
                    MOVE BOX(d) {
                        caption = 'Спецификация';
                    }
                }
            }
        }
        MOVE TOOLBARBOX;

        PROPERTY(formOk()) {
            caption = 'Провести';
        }                               
    }
}


overShowEdit = ABSTRACT BOOLEAN (BinOrder);
overShowDelete = ABSTRACT BOOLEAN (BinOrder); 

skipToShowEdit = ABSTRACT BOOLEAN (BinOrder);
skipToShowDelete = ABSTRACT BOOLEAN (BinOrder);

isUserOpened(UserBinOrder o)=  isOpened[BinOrder](o) AND is(o);

overCopy  ABSTRACT LIST ( UserBinOrderDetail, BinOrderDetail);
overCopy  ABSTRACT LIST ( BinOrder, UserBinOrder);
copy 'Копировать'(BinOrder order)  { 
	NEWSESSION {
	    NEW o = UserBinOrder {
	        inBin(o) <- inBin(order);
	        outBin(o) <- outBin(order);
	        note(o) <- note(order);
	        stock(o) <- stock(order);
            inBin(o) <- inBin(order);
            outBin(o) <- outBin(order);
	
	        EXEC overCopy(order, o);
	
	        FOR binOrder(BinOrderDetail orderDetail) == order DO {
	            NEW d=UserBinOrderDetail {
	                userBinOrder(d) <- o;
	                sku(d) <- sku(orderDetail);
	                quantity(d) <- quantity(orderDetail);
	                inBin(d) <- inBin(orderDetail);
	                outBin(d) <- outBin(orderDetail);
	                
	                EXEC overCopy(d, orderDetail);
	            }
	        }
	
	        SHOW userBinOrder OBJECTS o = o DOCKED;
	    }
	}
} TOOLBAR;
    
//-- Копирование строк     
overCopy  ABSTRACT LIST ( UserBinOrderDetail, UserBinOrderDetail);

copy 'Копировать'(UserBinOrderDetail detail)  { 
    NEW d = UserBinOrderDetail {          

        userBinOrder(d) <- userBinOrder(detail);
        sku(d) <- sku(detail);
        quantity(d) <- quantity(detail);
        outBin(d) <- outBin(detail);
        inBin(d) <- inBin(detail);
        
        EXEC overCopy(d, detail);                              
    }
} CHANGEKEY 'F6' TOOLBAR;

filterBinOrderDateFrom 'Дата с' = DATA LOCAL DATE ();
filterDateFrom (BinOrder o) = date(o) >= filterBinOrderDateFrom() OR (o IS BinOrder AND NOT filterBinOrderDateFrom());      

filterBinOrderDateTo 'Дата по' = DATA LOCAL DATE ();
filterDateTo (BinOrder o) = date(o) <= filterBinOrderDateTo() OR (o IS BinOrder AND NOT filterBinOrderDateTo());      

filterBinOrderStock  = DATA LOCAL Stock ();
nameFilterBinOrderStock 'Склад' = name(filterBinOrderStock()) CHARWIDTH 15;          
filterStock (BinOrder o) = stock(o) == filterBinOrderStock() OR (o IS BinOrder AND NOT filterBinOrderStock());

filterBinOrderCustomUser  = DATA LOCAL CustomUser ();
nameFilterBinOrderCustomUser 'Создан пользователем' = name[Contact](filterBinOrderCustomUser()) CHARWIDTH 15;          
filterBinCustomUser (BinOrder i) = createdUser[UserBinOrder](i) == filterBinOrderCustomUser() OR (i IS BinOrder AND NOT filterBinOrderCustomUser());  

filterBinOrderComputer = DATA LOCAL Computer ();
nameFilterBinOrderComputer 'Создан на компьютере' = hostname(filterBinOrderComputer()) CHARWIDTH 15;          
filterComputer (BinOrder i) = createdComputer(i) == filterBinOrderComputer() OR (i IS BinOrder AND NOT filterBinOrderComputer());

background 'Цвет' = ABSTRACT CASE COLOR (BinOrder);
    
FORM binOrders  'Заказы на перемещение по ячейкам'
    PROPERTIES() filterBinOrderDateFrom, filterBinOrderDateTo, nameFilterBinOrderStock, nameFilterBinOrderCustomUser, nameFilterBinOrderComputer
    
    OBJECTS o = BinOrder LAST
    PROPERTIES (o) READONLYIF isReadonly() BACKGROUND background(o) isClosed, isPosted, number, series, date, time, nameStock, nameOutBin, nameInBin, note, 
                            countBinOrderDetail, quantityBinOrderDetail, sumGrossWeightBinOrderDetail
    
    FILTERS filterDateFrom(o), filterDateTo(o), filterStock(o)
    
    OBJECTS d = BinOrderDetail
    PROPERTIES (d) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku, nameOutBin, nameInBin, quantity, grossWeight, balanceB
    
    PROPERTIES (o) READONLY PANEL createdNameUser[UserBinOrder], createdTime, createdHostnameComputer, 
                                        postedNameUser, postedTime, postedHostnameComputer

    PROPERTIES (o) NEWSESSION addUserBinOrder = NEW[UserBinOrder], EDIT SHOWIF overShowEdit(o) 
    PROPERTIES (o) copy
    PROPERTIES (o) close[UserBinOrder] SHOWIF isOpened[UserBinOrder](o), open SHOWIF isClosed[UserBinOrder](o)
    PROPERTIES     NEWSESSION deleteo=DELETE(o) SHOWIF overShowDelete(o) //isUserOpenedOrder(o)
            
    FILTERS binOrder(d)==o
    ORDERS index(d)
    LIST BinOrder OBJECT o
;

DESIGN binOrders 'Заказы на перемещение по ячейкам' {
    NEW documentContainer BEFORE TOOLBARBOX {
        fill = 1;

        NEW filtersBox {                       
            fill = 1;
            NEW topFilters {  
                caption = 'Фильтры';
                NEW topFilters1 {
                    horizontal = TRUE; 
                    MOVE PROPERTY(filterBinOrderDateFrom());
                    MOVE PROPERTY(filterBinOrderDateTo());                            
                    MOVE PROPERTY(nameFilterBinOrderStock());                                            
                }
                NEW topFilters2 {
                    horizontal = TRUE; 
                    MOVE PROPERTY(nameFilterBinOrderCustomUser());
                    MOVE PROPERTY(nameFilterBinOrderComputer());                            
                }                
            }
            MOVE BOX(o) {
                fill = 1;
            }
        }
//            NEW BOX(o) {
//                fill = 2;
//            }

        NEW documentDetail {
            fill = 1;
            tabbed = TRUE;

            MOVE BOX(d) {
                fill = 1;
                caption = 'Спецификация';
            }
            NEW documentHistory {
                caption = 'История';
                MOVE GROUP(created,o);
                MOVE GROUP(posted,o);
            }
            NEW printTab {
                caption = 'Печатные формы';
                NEW printContainer {
                    caption = 'Печать';
                }
            }
            NEW actionContainer {
                caption = 'Действия';
                horizontal = TRUE;
                NEW createdContainer {
                    caption = 'Создание на основе';
                    MOVE PROPERTY(copy(o)) { caption = 'Заказ'; alignment = STRETCH; }
                }
            }
        }
    }
}

@extendFormFilterAccessStock(o, binOrders, stock, company);

@extendFormEditable(binOrders);

@defineFilterIsOpened (binOrder, binOrders, o);

@defineDocumentLogForm(binOrders, o);
 
 
 
//Операция
@defineOperation(' (перемещение по ячейкам)');

@defineOperationRole();

@defineDocumentOperationContainer(binOrder, o, isPostedBinOrder, nameStock, first, name, );

@defineOperationChangesDocument(binOrder, BinOrder, preventChangesDocument, created);

overShowEdit (BinOrder o) += showEditDeleteUser(o) AND isOpened(o) AND NOT skipToShowEdit(o);
overShowDelete (BinOrder o) += showEditDeleteUser(o) AND isUserOpened(o) AND NOT skipToShowDelete(o); 

overCopy(BinOrder order, UserBinOrder userOrder) + { 
    operation(userOrder) <- operation(order);    
}

@extendFormFilterRoleAccess(binOrder, o, binOrders);
@extendFormFilterAccessStock(BinOrder, o, binOrders, stock, company);
@defineDocumentStockAccess(UserBinOrder, stock, company);

@defineDocumentOperationConstraint(binOrder, 'заказ на перемещение по ячейкам', Bin);

@defineOperationFilterProperty(binOrder, o, binOrders, nameFilterBinOrderStock);

inBin 'Ячейка (в)' = DATA Bin (Operation, Stock);
nameInBin 'Ячейка (в)' (Operation operation, Stock stock) = name(inBin(operation, stock)) CHARWIDTH 10;

setInBin (Operation operation, Stock stock)  { 
    DIALOG dialogBinStock OBJECTS s = stock, b = inBin(operation, stock) CHANGE;
}

CONSTRAINT inBin(Operation o, Stock st) AND NOT stock(inBin(o, st)) == st
    CHECKED BY inBin[Operation, Stock] MESSAGE 'Ячейка недоступна для склада';
    
outBin 'Ячейка (из)' = DATA Bin (Operation, Stock);
nameOutBin 'Ячейка (из)' (Operation operation, Stock stock) = name(outBin(operation, stock)) CHARWIDTH 10;;

setOutBin (Operation operation, Stock stock)  { 
    DIALOG dialogBinStock OBJECTS s = stock, b = outBin(operation, stock) CHANGE;
}

CONSTRAINT outBin(Operation o, Stock st) AND NOT stock(outBin(o, st)) == st
    CHECKED BY outBin[Operation, Stock] MESSAGE 'Ячейка недоступна для склада';

TABLE stockOperation(Stock, Operation);
TABLE stockGroupOperation(StockGroup, Operation);
@defineOperationStock(, stc, 'Склады');

CONSTRAINT operation(BinOrder binOrder) AND stock(binOrder) 
           AND NOT in(stock(binOrder), operation(binOrder))
    CHECKED BY stock[UserBinOrder]
    MESSAGE 'Склад должен совпадать с отмеченными в операции';
CONSTRAINT operation(BinOrder binOrder) AND isPosted(binOrder) 
           AND NOT stock(binOrder) AND needStock(operation(binOrder))
    MESSAGE 'Склад должен быть задан для документа';



EXTEND FORM operation
    PROPERTIES(o, stc) nameInBin ON CHANGE setInBin(o, stc), nameOutBin ON CHANGE setOutBin(o, stc)
;

@deriveDocumentBins (userBinOrder, userBinOrder, inBin, inBin, outBin, outBin, stock);

useBins(UserBinOrder order) <- TRUE WHEN SET(order IS UserBinOrder);

@defineDocumentSkuStockPriceListTypeSystemLedger(userBinOrder, );

@extendFormDocumentSkuStock(userBinOrder, userBinOrder, o, , );

prevCurrentBalanceOutBin 'Текущий остаток (ячейка из)' (Sku sku, BinOrder order) = prevCurrentBalance(sku, outBin(order));
prevCurrentBalanceInBin 'Текущий остаток (ячейка в)' (Sku sku, BinOrder order) = prevCurrentBalance(sku, inBin(order));

backgroundOutBin (Sku sku, BinOrder order) = RGB(240, 240, 224) IF sku IS Sku AND order IS BinOrder;
backgroundInBin (Sku sku, BinOrder order) = RGB(244, 255, 189) IF sku IS Sku AND order IS BinOrder;

allOutBinQuantityUserBinOrder 'Весь остаток (ячейка из)' = DATA LOCAL BOOLEAN (Sku, Stock);
changeAllOutBinQuantity(Sku sku, UserBinOrder userBinOrder, Stock stock)  { 
    INPUT b = BOOLEAN DO {
        allOutBinQuantityUserBinOrder (sku,stock) <- b;
        changeQuantityValue(sku, userBinOrder, stock, prevCurrentBalanceOutBin(sku,userBinOrder) IF b);
    }
}

EXTEND FORM userBinOrder
    PROPERTIES AFTER quantity(ks, o, st) prevCurrentBalanceOutBin (ks, o) BACKGROUND backgroundOutBin(ks, o) READONLY,
               allOutBinQuantityUserBinOrder(ks, st) BACKGROUND backgroundOutBin(ks, o) ON CHANGE changeAllOutBinQuantity(ks, o, st),   
               prevCurrentBalanceInBin (ks, o) BACKGROUND backgroundInBin(ks, o) READONLY
               
    FILTERGROUP filter
        FILTER 'С остатком (ячейка из)' prevCurrentBalanceOutBin(ks, o) 'F7' DEFAULT
        FILTER 'С остатком ' currentBalance(ks,st) 'F10'
        FILTER 'В документе ' quantity(ks, o, st) 'F9'
;

DESIGN userBinOrder {
    PROPERTY(prevCurrentBalance(ks, st)) {
        hide = TRUE;
    }
    PROPERTY(allQuantityUserBinOrder(ks, st)) {
        hide = TRUE;    
    }
}

//упаковка
@defineDocumentPack(binOrder, o);

packQuantity 'Кол-во упаковок в документе' (sku, userBinOrder, stock) = GROUP SUM packQuantity(UserBinOrderDetail userBinOrderDetail)
    BY sku(userBinOrderDetail), userBinOrder(userBinOrderDetail), stock(userBinOrderDetail);

changePackQuantity(Sku sku, UserBinOrder userBinOrder, Stock stock)  { 
    INPUT n = NUMERIC[16,5] DO
        IF userBinOrderDetail(sku, userBinOrder, stock) THEN {
            IF n THEN {
                packQuantity(UserBinOrderDetail userBinOrderDetail) <- n WHERE userBinOrderDetail == userBinOrderDetail(sku, userBinOrder, stock);
                quantity(UserBinOrderDetail userBinOrderDetail) <- NUMERIC[16,5](packQuantity(userBinOrderDetail)*(OVERRIDE amountPack(userBinOrderDetail), 1.0)) 
                                        WHERE userBinOrderDetail == userBinOrderDetail(sku, userBinOrder, stock) AND NOT skipChangeQuantity(userBinOrderDetail(sku, userBinOrder, stock));
            } ELSE {
                FOR userBinOrderDetail(sku, userBinOrder, stock) == UserBinOrderDetail d DO
                    DELETE d;
            }
        } ELSE {
            IF n THEN  {
                NEW d = UserBinOrderDetail {
                   userBinOrder(d) <- userBinOrder;
                   sku(d) <- sku;
                   packQuantity (d) <- n;
                   quantity(d) <- NUMERIC[16,5](packQuantity(d) * (OVERRIDE amountPack(d), 1.0));
                }
            }
        }
}

changeAmountPack(Sku sku, UserBinOrder userBinOrder, Stock stock)  { 
    INPUT n = NUMERIC[14,3] DO {
        IF userBinOrderDetail(sku, userBinOrder, stock) THEN {
            IF n THEN {
                amountPack(UserBinOrderDetail userBinOrderDetail) <- n WHERE userBinOrderDetail == userBinOrderDetail(sku, userBinOrder, stock);
                quantity(UserBinOrderDetail userBinOrderDetail) <- NUMERIC[16,5](packQuantity(userBinOrderDetail)*(OVERRIDE amountPack(userBinOrderDetail), 1.0)) 
                                        WHERE userBinOrderDetail == userBinOrderDetail(sku, userBinOrder, stock) AND packQuantity(userBinOrderDetail) AND NOT skipChangeQuantity(userBinOrderDetail(sku, userBinOrder, stock));
            } ELSE {
                amountPack(UserBinOrderDetail userBinOrderDetail) <- NULL WHERE userBinOrderDetail == userBinOrderDetail(sku, userBinOrder, stock);
            }
    
        }
        changeValuePack(sku, n);
    }
}

@extendFormDocumentPackSkuStock(userBinOrder, userBinOrder, o, );

DESIGN operation {
    tabContainer{
        NEW showContainer {
            caption = 'Отображение свойств';
        }
    }
}

@defineOperationProperty(showPack, 'Упаковка', showContainer);

@deriveDocumentOperationProperty(UserBinOrder, showPack);

NAVIGATOR {
    WMSNavigator {
         WMSDocument {
            NEW binOrders;
         }
         NEW FOLDER WMSMasterData 'Справочники'  {
            NEW operations;   
         }
    }
}

// ------------------------------------- Печать заказа на перемещение ---------------------------------------

FORM printBinOrder 'Заказ на перемещение'
    OBJECTS o = BinOrder PANEL SUBREPORT
    PROPERTIES(o) READONLY  number, series, date, time, nameStock, nameOutBin, nameInBin, note, nameOperation

    OBJECTS d = BinOrderDetail
    PROPERTIES(d) READONLY index, idBarcodeSku, nameSku, nameOutBin, nameInBin, packQuantity, quantity, grossWeight
    FILTERS binOrder(d) == o
;

printBinOrder 'Печать заказа' (BinOrder order)  { 
    PRINT printBinOrder OBJECTS o = order;
} IMAGE 'print.png' IN print;

EXTEND FORM binOrders
    PROPERTIES (o) TOOLBAR printBinOrder  
;

DESIGN binOrders {
    printContainer {
        MOVE PROPERTY(printBinOrder(o));
    }
}
