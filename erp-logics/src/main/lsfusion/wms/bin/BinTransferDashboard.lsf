MODULE BinTransferDashboard;

REQUIRE BinOrderTransfer;

NAMESPACE Bin;

performer 'Исполнитель' = ABSTRACT Employee (BinOrder);
namePerformer 'Исполнитель' (BinOrder order) = name(performer(order));

performer 'Исполнитель' = DATA Employee (UserBinOrder);
namePerformer 'Исполнитель' (UserBinOrder order) = name(performer(order));

performer (UserBinOrder order) += performer(order);

startPerformDateTime 'Начало выполнения' = ABSTRACT DATETIME (BinOrder);
startPerformDateTime 'Начало выполнения' = DATA DATETIME (UserBinOrder);
startPerformDateTime (UserBinOrder order) += startPerformDateTime(order);

finishPerformDateTime 'Окончание выполнения' = ABSTRACT DATETIME (BinOrder);
finishPerformDateTime 'Окончание выполнения' = DATA DATETIME (UserBinOrder);
finishPerformDateTime (UserBinOrder order) += finishPerformDateTime(order);

performStatus 'Статус' (BinOrder order) = CASE 
    WHEN finishPerformDateTime(order) AND NOT toBinTransfer(order) THEN 'Выполнен полностью'
    WHEN finishPerformDateTime(order) AND toBinTransfer(order) THEN 'Выполнен частично'
    WHEN startPerformDateTime(order) THEN 'В исполнении'
    WHEN NOT startPerformDateTime(order) AND NOT finishPerformDateTime(order) THEN 'Новый';
    
backgroundPerformStatus (BinOrder order) = CASE
    WHEN finishPerformDateTime(order) AND NOT toBinTransfer(order) THEN RGB(212,255,212)
    WHEN finishPerformDateTime(order) AND toBinTransfer(order) THEN RGB(255,238,165)
    WHEN startPerformDateTime(order) THEN RGB(255,238,165)
    WHEN NOT startPerformDateTime(order) AND NOT finishPerformDateTime(order) THEN RGB(255,200,216);

EXTEND FORM userBinOrder
    PROPERTIES (o) namePerformer, startPerformDateTime, finishPerformDateTime
;

EXTEND FORM printBinOrder
    PROPERTIES (o) namePerformer, startPerformDateTime
;

DESIGN userBinOrder {
    headerTabbedPane {
        NEW perform {
            caption = 'Исполнение';
            type = CONTAINERV;
            MOVE PROPERTY(namePerformer(o));
            MOVE PROPERTY(startPerformDateTime(o));
            MOVE PROPERTY(finishPerformDateTime(o));
        }
    }
}

packQuantityToBinTransfer 'Кол-во упаковок' (BinOrderDetail d) =  toBinTransfer(d) / (amountPack(d) IF amountPack(d) != 0);

FORM printToTransferBinOrder 'Заказ на перемещение'
    OBJECTS o = BinOrder PANEL SUBREPORT
    PROPERTIES(o) READONLY  number, series, date, time, nameStock, nameOutBin, nameInBin, note, nameOperation

    OBJECTS d = BinOrderDetail
    PROPERTIES(d) READONLY index, idBarcodeSku, nameSku, nameOutBin, nameInBin, packQuantityToBinTransfer, toBinTransfer, grossWeight
    FILTERS binOrder(d) == o, toBinTransfer(d) > 0.0
;

printToTransferBinOrder 'Печать заказа' (BinOrder order)  { 
    PRINT printToTransferBinOrder OBJECTS o = order;
} IMAGE 'print.png' IN print;

accept 'Принять' (UserBinOrder order, Employee employee)  { 
    performer(order) <- employee;
    startPerformDateTime(order) <- currentDateTime();
    apply();
}

accept 'Принять' (UserBinOrder order)  { 
    accept(order, currentUser());      
    printToTransferBinOrder(order);  
} CONFIRM;

skip 'Отменить' (UserBinOrder order)  { 
    performer(order) <- NULL;
    startPerformDateTime(order) <- NULL;
    apply();  
} CONFIRM;

showAccept (UserBinOrder order) = order IS UserBinOrder AND NOT startPerformDateTime(order);

showSkip (UserBinOrder order) = order IS UserBinOrder AND startPerformDateTime(order) 
    //AND performer(order)==currentUser() 
    AND NOT finishPerformDateTime(order);
    
fullComplete 'Закончен полностью' (UserBinOrder order)  { 
    createUserBinTransferPosted(order);
    finishPerformDateTime(order) <- currentDateTime();    
    apply();
} CONFIRM;

partiallyComplete 'Закончен с отклон.' (UserBinOrder order)  { 
    createAndShowUserBinTransfer(order);
    IF binTransferdBinOrderDetail(order) THEN {
        finishPerformDateTime(order) <- currentDateTime();      
    } 
    apply();
} CONFIRM;

WHEN SETCHANGED(finishPerformDateTime(UserBinOrder order)) AND binTransferdBinOrderDetail(order) DO {
    isClosed(order) <- TRUE;
}

WHEN DROPPED(binTransferdBinOrderDetail(UserBinOrder order)) AND isClosed(order) DO {
    isClosed(order) <- NULL;
    finishPerformDateTime(order) <- NULL;
}

FORM binTransferDashboard 'Перемещения по заказам'
    PROPERTIES () nameFilterBinOrderStock, nameFilterBinOrderOperation

    OBJECTS dt = DATE PANEL
    PROPERTIES date = VALUE(dt)
    
    OBJECTS o = BinOrder
    PROPERTIES (o) READONLY BACKGROUND background(o) isPosted, number, series, date, time, performStatus BACKGROUND backgroundPerformStatus(o), namePerformer BACKGROUND backgroundPerformStatus(o),
                                       nameStock, nameOperation, nameOutBin, nameInBin, note                            
    PROPERTIES TOOLBAR printToTransferBinOrder(o), accept(o) SHOWIF showAccept(o) , skip(o) SHOWIF showSkip(o) 
    PROPERTIES TOOLBAR fullComplete(o) SHOWIF showSkip(o) , partiallyComplete(o) SHOWIF showSkip(o) 
    PROPERTIES (o) NEWSESSION EDIT, DELETE     
    FILTERS isPosted(o), isOpened(o), filterStock(o), filterOperation(o), toBinTransfer(o)
    
    OBJECTS d = BinOrderDetail
    PROPERTIES (d) index, nameSku, nameOutBin, nameInBin, toBinTransfer
    FILTERS binOrder(d)==o, toBinTransfer(d)>0.0
    
    OBJECTS t = BinTransfer
    PROPERTIES (t) READONLY isPosted, number, series, date, time, nameStock, nameOperation, nameOutBin, nameInBin, note
    PROPERTIES(t) NEWSESSION EDIT, DELETE 
    FILTERS isPosted(o), filterStock(o), filterOperation(o)
    FILTERGROUP date
        FILTER 'На дату' date(t)==dt 'F9' DEFAULT
;

@extendFormFilterRoleAccess(binOrder, o, binTransferDashboard);
@extendFormFilterRoleAccess(bintransfer, t, binTransferDashboard);
@extendFormFilterAccessStock(BinOrder, o, binTransferDashboard, stock, company);
@extendFormFilterAccessStock(BinTransfer, t, binTransferDashboard, stock, company);

DESIGN binTransferDashboard {
    BOX {

        NEW dash BEFORE TOOLBARBOX{
            fill = 1;
            horizontal = FALSE;
            NEW header {
                fill = 1;                         
                MOVE BOX(o);

            }
            NEW pickings {
                fill = 1;
                tabbed = TRUE;
                MOVE BOX(t) {
                    caption = 'Перемещения по ячейкам';
                }
                NEW detailContainer {
                    horizontal = TRUE;
                    caption = 'Детализация заказа';
//                    MOVE BOX(TREE skuTree){
//                        caption = 'Группы';
//                    }
                    MOVE BOX(d){
                        fill = 3;
                    }                   
                }
            }
        }          
        NEW secondContainer BEFORE dash {
            horizontal = TRUE;
            caption = 'Фильтры';
            horizontal = TRUE;
            MOVE PROPERTY(date);
            MOVE PROPERTY(nameFilterBinOrderStock());
            MOVE PROPERTY(nameFilterBinOrderOperation());                
        }
    }
}

NAVIGATOR {
    dashboardNavigator {
        NEW FOLDER WMS 'WMS' {
            NEW binTransferDashboard;    
        }
    }
}