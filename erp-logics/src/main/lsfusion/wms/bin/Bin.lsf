MODULE Bin;

REQUIRE Stock, Barcode, WMS;

//------------------------- Ячейка -----------------------------//

CLASS ABSTRACT BinGroup 'Группа ячеек';
TABLE binGroup (BinGroup);

@defineExternalizableAbstract(binGroup, STRING[100]);

name 'Наименование' = ABSTRACT ISTRING[100](BinGroup) MATERIALIZED INDEXED;

// Неактивный
inactive 'Неактивный' = ABSTRACT BOOLEAN (BinGroup);
active 'Активный' (BinGroup binGroup) = binGroup IS BinGroup AND NOT inactive(binGroup) MATERIALIZED INDEXED;

TABLE binGroupBinGroup(BinGroup, BinGroup);
@defineHierarchyAbstract(binGroup, BinGroup);

CLASS DataBinGroup 'Группа ячеек' : BinGroup;
TABLE dataBinGroup (DataBinGroup);

@defineExternalizable(dataBinGroup, STRING[100]);

name 'Наименование' = DATA ISTRING[100](DataBinGroup);

// Неактивный
inactive 'Неактивный' = DATA BOOLEAN (DataBinGroup);

//TABLE dataBinGroupDataBinGroup(DataBinGroup, DataBinGroup);
//@defineHierarchy(binGroup, DataBinGroup);
parent = DATA BinGroup (DataBinGroup) AUTOSET NONULL;// DELETE;

nameParent '{hierarchy.name.parent}' = name(parent(DataBinGroup binGroup)) IN base;

//level '{hierarchy.level}' (DataBinGroup child, DataBinGroup parent) = RECURSION 1l IF child IS DataBinGroup AND parent == child
//    STEP 2l IF parent == parent($parent) MATERIALIZED;
//
//binGroup(DataBinGroup child, LONG level)  = GROUP
//    MAX DataBinGroup parent IF level == level(child, parent);
//
//level '{hierarchy.level}'(DataBinGroup child)  = GROUP SUM 1 IF level(child, DataBinGroup parent) MATERIALIZED;
//
//levelRoot '{hierarchy.level}' (DataBinGroup child, DataBinGroup parent) = PARTITION SUM 1 IF level(child, parent)
//    ORDER DESC level(child, parent)
//    BY child MATERIALIZED;
//binGroupRoot (DataBinGroup child, level) = GROUP NAGGR DataBinGroup parent BY levelRoot(child, parent);
//
//isParent '{hierarchy.is.parent}' (DataBinGroup child, DataBinGroup parent) = TRUE IF level(child, parent);
//
//childNumber '{hierarchy.child.number}' (binGroup) = GROUP SUM 1 BY parent(DataBinGroup child) MATERIALIZED;
//
//descendantNumber '{hierarchy.descendant.number}'(DataBinGroup parent)  = GROUP SUM 1 IF isParent(DataBinGroup child, parent) MATERIALIZED;
//
//isLeaf '{hierarchy.is.leaf}' (DataBinGroup binGroup) = binGroup IS DataBinGroup AND NOT childNumber(binGroup) MATERIALIZED;
//
//isParentLeaf (DataBinGroup child, DataBinGroup parent) = isParent(child, parent) AND isLeaf(child);
//
//canonicalName '{hierarchy.canonical.name}' (DataBinGroup binGroup) = ISTRING[255](
//    (GROUP CONCAT name(DataBinGroup parent), ' / ' ORDER DESC level(binGroup, parent)))
//    CHARWIDTH 50 MATERIALIZED;

//id[BinGroup](DataBinGroup binGroup) += id(binGroup);
name[BinGroup](DataBinGroup binGroup) += name(binGroup);
inactive[BinGroup](DataBinGroup binGroup) += inactive(binGroup);
parent[BinGroup](DataBinGroup binGroup) += parent(binGroup);

useBins 'Использовать ячейки' = ABSTRACT BOOLEAN (Stock) MATERIALIZED;

CLASS StockBinGroup 'Группа ячеек(ячеек)';
TABLE stockBinGroup (StockBinGroup);

stockBinGroup = AGGR StockBinGroup WHERE useBins(Stock stock) MATERIALIZED INDEXED;

EXTEND CLASS StockBinGroup : BinGroup;
id(StockBinGroup binGroup) += Stock.id(stock(binGroup));
name[BinGroup](StockBinGroup binGroup) += ISTRING[100](Stock.name(stock(binGroup)));
inactive[BinGroup](StockBinGroup binGroup) += Stock.inactive(stock(binGroup));

edit(StockBinGroup binGroup) + {};

stock(DataBinGroup binGroup) = stock[StockBinGroup](binGroupRoot(binGroup, 1));
stock(BinGroup binGroup) = MULTI stock[DataBinGroup](binGroup), stock[StockBinGroup](binGroup);
nameStock 'Склад' (BinGroup binGroup) = name(stock(binGroup));

FORM dataBinGroup 'Группа ячеек'
    OBJECTS g=DataBinGroup PANEL
    PROPERTIES(g) inactive, name, id SHOWIF showIDs(), nameParent, nameStock READONLY 
    EDIT DataBinGroup OBJECT g
;

DESIGN dataBinGroup {
    NEW mainContainer {
        caption = 'Основные свойства';
        alignment = STRETCH;
        lines = 2;
        MOVE PROPERTY(inactive(g));
        MOVE PROPERTY(name(g));
        MOVE PROPERTY(id(g));
        MOVE PROPERTY(nameParent(g));
        MOVE PROPERTY(nameStock(g));
    }
    NEW additionalContainer {
        caption = 'Дополнительные свойства';
        lines = 5;
    }    
    MOVE TOOLBARBOX;
}

FORM dialogBinGroups 'Группы ячеек'
    TREE treeGroups g=BinGroup PARENT parent(g)
    PROPERTIES READONLY name(g), canonicalName(g), nameStock(g)
    ORDERS canonicalName(g)
    FILTERGROUP active FILTER 'Активный' active(g) DEFAULT
    LIST BinGroup OBJECT g
;

FORM binGroups 'Группы ячеек'
    TREE treeGroups g=BinGroup PARENT parent(g)
    PROPERTIES READONLY name(g), canonicalName(g), nameStock(g)
    PROPERTIES(g) NEWSESSION NEW[DataBinGroup], EDIT SHOWIF g IS DataBinGroup, deleteg=DELETE SHOWIF g IS DataBinGroup
    ORDERS canonicalName(g)
    FILTERGROUP active FILTER 'Активный' active(g) DEFAULT
;

CLASS Bin 'Ячейка' ;
TABLE bin (Bin);

@defineExternalizable(bin, STRING[100]);

name 'Наименование' = DATA ISTRING[100](Bin) IN id;
binGroup = DATA BinGroup (Bin) AUTOSET NONULL;// DELETE;
nameBinGroup 'Группа' (Bin bin) = name(binGroup(bin));

TABLE binGroupBin(BinGroup, Bin);
isParent (BinGroup binGroup, Bin bin) = isParent(binGroup(bin), binGroup);
canonicalName 'Каноническое имя группы' (Bin bin) = canonicalName(binGroup(bin)) CHARWIDTH 20;

stock(Bin bin) = stock(binGroupRoot(binGroup(bin), 1)) MATERIALIZED INDEXED;
nameStock 'Склад' (Bin bin) = name(stock(bin));

FORM bin 'Ячейка'
    OBJECTS s = Bin PANEL
    PROPERTIES(s) name, id SHOWIF showIDs(), canonicalName, nameStock READONLY 
    EDIT Bin OBJECT s
;

DESIGN bin {
    NEW mainContainer {
        caption = 'Основные свойства';
        alignment = STRETCH;
        lines = 2;
        MOVE PROPERTY(name(s));
        MOVE PROPERTY(id(s));
        MOVE PROPERTY(canonicalName(s)){caption = 'Группа';}
        MOVE PROPERTY(nameStock(s));
    }
    NEW additionalContainer {
        caption = 'Дополнительные свойства';
        lines = 5;
    }
    MOVE TOOLBARBOX;
}


FORM dialogBins 'Ячейки'
    TREE binTree sg = BinGroup PARENT parent(sg)
    PROPERTIES READONLY name(sg), nameStock(sg)
    FILTERGROUP active FILTER 'Активный' active(sg) DEFAULT

    OBJECTS s = Bin
    PROPERTIES(s) READONLY name, id SHOWIF showIDs(), canonicalName, nameStock READONLY

    FILTERS isParent(sg, s)
    ORDERS name(s)

    LIST Bin OBJECT s
;

DESIGN dialogBins {
    BOX {
        size = (1024, 768);

        NEW topContainer {
            horizontal = TRUE;
            fill = 1;

            MOVE BOX(TREE binTree) {
                caption = 'Группы ячеек';
            }

            MOVE BOX(s) {
                fill = 2;
                GRID(s) {
                    defaultComponent = TRUE;
                    PROPERTY(canonicalName(s)) {caption = 'Группа';}
                }
            }
        }

        MOVE TOOLBARBOX;
    }
}

FORM bins 'Ячейки'
    TREE binTree sg = BinGroup PARENT parent(sg)
    PROPERTIES READONLY name(sg), nameStock(sg)
    FILTERGROUP active FILTER 'Активный' active(sg) DEFAULT

    OBJECTS s = Bin
    PROPERTIES(s) READONLY name, id SHOWIF showIDs(), canonicalName, nameStock READONLY 
    PROPERTIES(s) NEWSESSION NEW, EDIT, DELETE 

    FILTERS isParent(sg, s)
    ORDERS name(s)
;

DESIGN bins {
    BOX {
        size = (1024, 768);

        NEW topContainer {
            horizontal = TRUE;
            fill = 1;

            MOVE BOX(TREE binTree) {
                caption = 'Группы ячеек';
            }

            MOVE BOX(s) {
                fill = 2;
                GRID(s) {
                    defaultComponent = TRUE;
                    PROPERTY(canonicalName(s)) {caption = 'Группа';}
                }
            }
        }

        MOVE TOOLBARBOX;
    }
}

// ---------------------  Склады с указанием ячеек ----------------------- //

dataIn 'Отм.' = DATA BOOLEAN (Stock, BinGroup);

TABLE stockBin(Stock, Bin);
dataIn 'Отм.' = DATA BOOLEAN (Stock, Bin);

levelParent (Stock stock, BinGroup binGroup) = GROUP
                                                               MIN level(binGroup, BinGroup parent) IF dataIn(stock, parent) MATERIALIZED;
nearestParent (Stock stock, BinGroup binGroup) =
    binGroup(binGroup, levelParent(stock, binGroup));
nearestIn (Stock stock, BinGroup binGroup) =
    dataIn(stock, nearestParent(stock, binGroup));

in 'Отм.' (Stock stock, BinGroup binGroup) = OVERRIDE dataIn(stock, binGroup), nearestIn (stock, binGroup) MATERIALIZED;

in 'Отм.' (Stock stock, Bin bin) = OVERRIDE dataIn(stock, bin), in(stock, binGroup(bin)) MATERIALIZED;

// ---------------------  Соотносение товаров и ячеек  ------------------- //

TABLE skuGroupBinGroup(SkuGroup, BinGroup);
dataIn 'Отм.' = DATA BOOLEAN (SkuGroup, BinGroup);

levelParentSkuGroupDataIn (SkuGroup group, BinGroup binGroup) = 
    GROUP MIN level(group, SkuGroup parent) IF dataIn(parent, binGroup) MATERIALIZED;
nearestParentSkuGroupDataIn (SkuGroup group, BinGroup binGroup) = skuGroup(group, levelParentSkuGroupDataIn(group, binGroup));

levelParentBinGroupDataIn (SkuGroup group, BinGroup binGroup) =
    GROUP MIN level(binGroup, BinGroup parent) IF dataIn(group, parent) MATERIALIZED;
nearestParentBinGroupDataIn (SkuGroup group, BinGroup binGroup) = binGroup(binGroup, levelParentBinGroupDataIn(group, binGroup));

nearestDataIn (SkuGroup group, BinGroup binGroup) = 
    dataIn(nearestParentSkuGroupDataIn(group, binGroup), binGroup) OR dataIn(group, nearestParentBinGroupDataIn(group, binGroup)) MATERIALIZED;

in 'Отм.' (SkuGroup group, BinGroup binGroup) = OVERRIDE dataIn(group, binGroup), nearestDataIn(group, binGroup) MATERIALIZED INDEXED;

TABLE skuGroupBin(SkuGroup, Bin);
dataIn 'Отм.' = DATA BOOLEAN (SkuGroup, Bin);

levelParentDataIn (SkuGroup group, Bin bin) =
    GROUP MIN level(group, SkuGroup parent) IF dataIn(parent, bin) MATERIALIZED;

nearestParentDataIn (SkuGroup group, Bin bin) = skuGroup(group, levelParentDataIn(group, bin));
nearestDataIn (SkuGroup group, Bin bin) = dataIn(nearestParentDataIn(group, bin), bin) MATERIALIZED;

in 'Отм.' (SkuGroup group, Bin bin) = OVERRIDE dataIn(group, bin), nearestDataIn(group, bin), in(group, binGroup(bin)) MATERIALIZED INDEXED;

TABLE skuBinGroup(Sku, BinGroup);
dataIn 'Отм.' = DATA BOOLEAN (Sku, BinGroup);

levelParentDataIn (Sku sku, BinGroup binGroup) =
    GROUP MIN level(binGroup, BinGroup parent) IF dataIn(sku, parent) MATERIALIZED;

nearestParentDataIn (Sku sku, BinGroup binGroup) = binGroup(binGroup, levelParentDataIn(sku, binGroup));
nearestDataIn (Sku sku, BinGroup binGroup) = dataIn(sku, nearestParentDataIn(sku, binGroup)) MATERIALIZED;

in 'Отм.' (Sku sku, BinGroup binGroup) = OVERRIDE dataIn(sku, binGroup), nearestDataIn(sku, binGroup), in(skuGroup(sku), binGroup) MATERIALIZED INDEXED;

TABLE skuBin(Sku, Bin);
dataIn 'Отм.' = DATA BOOLEAN (Sku, Bin);

in 'Отм.' (Sku sku, Bin bin) = OVERRIDE dataIn(sku, bin), in(skuGroup(sku), bin), in(sku, binGroup(bin)), in(skuGroup(sku), binGroup(bin)) MATERIALIZED INDEXED;

changeDataIn (SkuGroup group, Bin bin) {
    NEWSESSION {
        INPUT b = BOOLEAN DO{
            dataIn(group, bin) <- b; 
        }
        APPLY;
    }
}

changeDataIn (Sku sku, Bin bin) {
    NEWSESSION {
        INPUT b = BOOLEAN DO{
            dataIn(sku, bin) <- b;
        }
        APPLY;
    }
}

bins 'Ячейки' (SkuGroup group) = 
    GROUP CONCAT name(Bin bin) IF in(group, bin) , ', ' ORDER bin CHARWIDTH 20 MATERIALIZED;

FORM changeBinsSkuGroup 'Выбор ячеек'
    OBJECTS g=SkuGroup PANEL 
    PROPERTIES(g) READONLY canonicalName

    TREE binTree bg = BinGroup PARENT parent(bg)
    PROPERTIES READONLY name(bg), nameStock(bg)
    PROPERTIES in(g, bg)
    FILTERGROUP active FILTER 'Активный' active(bg) DEFAULT
    FILTERGROUP in FILTER 'Отмеченные' in(g, bg)

    OBJECTS b = Bin
    PROPERTIES(b) READONLY name, id SHOWIF showIDs(), canonicalName, nameStock
    PROPERTIES in(g, b)
    FILTERS b IS Bin AND NOT bg IS BinGroup OR isParent(bg, b)
    ORDERS name(b)    
    FILTERGROUP inSku FILTER 'Отмеченные' in(g, b)
;

DESIGN changeBinsSkuGroup {
    MOVE BOX(g);
    NEW binContainer{
        horizontal = TRUE;
        fill = 1;
        MOVE BOX(TREE binTree);
        MOVE BOX(b) {
            fill = 2.5;
            PROPERTY(canonicalName(b)) {caption = 'Группа';}
        }
    }
    MOVE TOOLBARBOX;
}

changeBins (SkuGroup group) {
    NEWSESSION {
        SHOW changeBinsSkuGroup OBJECTS g=group MANAGESESSION;
        APPLY;
    }   
}

bins 'Ячейки' (Sku sku) =
    GROUP CONCAT name(Bin bin) IF in(sku, bin) , ', ' ORDER bin CHARWIDTH 20 MATERIALIZED;

FORM changeBinsSku 'Выбор ячеек'
    OBJECTS s=Sku PANEL
    PROPERTIES(s) READONLY name

    TREE binTree bg = BinGroup PARENT parent(bg)
    PROPERTIES READONLY name(bg), nameStock(bg)
    PROPERTIES in(s, bg)
    FILTERGROUP active FILTER 'Активный' active(bg) DEFAULT
    FILTERGROUP in FILTER 'Отмеченные' in(s, bg)

    OBJECTS b = Bin
    PROPERTIES(b) READONLY name, id SHOWIF showIDs(), canonicalName, nameStock
    PROPERTIES in(s, b)
    FILTERS b IS Bin AND NOT bg IS BinGroup OR isParent(bg, b)
    ORDERS name(b)
    FILTERGROUP inSku FILTER 'Отмеченные' in(s, b)
;

DESIGN changeBinsSku {
    MOVE BOX(s);
    NEW binContainer{
        horizontal = TRUE;
        fill = 1;
        MOVE BOX(TREE binTree);
        MOVE BOX(b) {
            fill = 2.5;
            PROPERTY(canonicalName(b)) {caption = 'Группа';}
        }
    }
    MOVE TOOLBARBOX;
}

changeBins (Sku sku) {
    NEWSESSION {
        SHOW changeBinsSku OBJECTS s=sku MANAGESESSION;
        APPLY;
    }
}

// ---------------- Ячейка по классификатору ------------------- //

groupType = DATA GroupType (Stock);
nameGroupType 'Тип классификатора' (Stock stock) = name(groupType(stock));

dataBin = DATA Bin (Stock, Group);
nameDataBin 'Ячейка' (Stock stock,Group group) = name(dataBin(stock,group)) CHARWIDTH 10;

dataBin = DATA Bin (Stock, Sku);
nameDataBin 'Ячейка' (Stock stock,Sku sku) = name(dataBin(stock,sku)) CHARWIDTH 10;

levelParentBin (Stock stock, Group group) = 
    GROUP MIN level(group, Group parent) IF dataBin(stock, parent) MATERIALIZED;

nearestParentBin (Stock stock, Group group) = group(group, levelParentBin (stock, group));
nearestInBin  (Stock stock, Group group) =
    dataBin(stock, nearestParentBin (stock, group)) MATERIALIZED;

bin (Stock stock, Group group) = OVERRIDE dataBin(stock, group), nearestInBin(stock, group) MATERIALIZED;
nameBin 'Ячейка'= name(bin(Stock stock, Group group)) CHARWIDTH 10;

bin (Stock stock, Sku sku) = OVERRIDE dataBin(stock, sku), bin(stock, group(groupType(stock), sku)) MATERIALIZED;
nameBin 'Ячейка'= name(bin(Stock stock, Sku sku)) CHARWIDTH 10;

CONSTRAINT dataBin(Stock stock, Group group) AND NOT stock==stock(dataBin(stock, group))
           CHECKED BY dataBin[Stock,Group] MESSAGE 'Ячейка (для группы sku) не включена для склада';

CONSTRAINT dataBin(Stock stock, Sku sku) AND NOT stock==stock(dataBin(stock, sku))
           CHECKED BY dataBin[Stock,Sku] MESSAGE 'Ячейка (для sku) не включена для склада';

setDataBins = DATA BOOLEAN ();

onStarted() +{
    IF NOT setDataBins() THEN {
        FOR [GROUP SUM 1 IF dataBin(Stock stock, SkuGroup group) BY stock, group](Stock st, SkuGroup g) DO {
            dataIn(g, Bin bin) <- TRUE WHERE bin==dataBin(st, g);
        }
        FOR [GROUP SUM 1 IF dataBin(Stock stock, Sku sku) BY stock, sku](Stock st, Sku s) DO {
            dataIn(s, Bin bin) <- TRUE WHERE bin==dataBin(st, s);
        }
        setDataBins() <- TRUE;    
    }
}

WHEN CHANGED(dataBin(Stock st, SkuGroup g)) DO {
    dataIn(g, Bin bin) <- TRUE WHERE bin==dataBin(st, g);    
}

WHEN CHANGED(dataBin(Stock st, Sku s)) DO {
    dataIn(s, Bin bin) <- TRUE WHERE bin==dataBin(st, s);
}

// ------------------------------------- Формы ---------------------------------- //

FORM binStocks 'Ячейки'

    TREE binTree bg = BinGroup PARENT parent(bg)
    PROPERTIES READONLY name(bg), nameStock(bg)
    PROPERTIES(bg) NEWSESSION NEW[DataBinGroup], EDIT SHOWIF bg IS DataBinGroup, DELETE SHOWIF bg IS DataBinGroup
    FILTERGROUP active FILTER 'Активный' active(bg) DEFAULT

    OBJECTS b = Bin
    PROPERTIES(b) READONLY name, id SHOWIF showIDs(), canonicalName, nameStock
    FILTERS b IS Bin AND NOT bg IS BinGroup OR isParent(bg, b)
    ORDERS name(b)
    PROPERTIES(b) NEWSESSION NEW, EDIT, DELETE

    OBJECTS ts = Stock PANEL
    PROPERTIES(ts) SELECTOR name
    PROPERTIES(ts) nameGroupType
    FILTERS isCompany(ts)
    
    TREE treeGroup og=Group PARENT parent(og)
    PROPERTIES READONLY order(og), name(og)
    FILTERS groupType(og) == groupType(ts)
    ORDERS order(og), name(og)
    PROPERTIES(ts, og) nameBin
    FILTERGROUP inactive FILTER 'Активные' active(og) 'F6' DEFAULT

    OBJECTS os = Sku
    PROPERTIES(os) READONLY name, idBarcode
    FILTERS isParent(og, os) OR os IS Sku AND NOT og
    PROPERTIES(ts, os) nameBin

    TREE groupTree g=SkuGroup PARENT parent(g)
    PROPERTIES READONLY order(g), id(g), name(g)
    PROPERTIES in(g, b) ON CHANGE changeDataIn(g, b), bins(g) ON CHANGE changeBins(g)
    ORDERS order(g), name(g)
    FILTERGROUP inactive1 FILTER 'Активные' active(g) 'F6' DEFAULT
    FILTERGROUP in FILTER 'Отмесенные' in(g, b)

    OBJECTS s = Sku
    PROPERTIES(s) READONLY name, idBarcode
    PROPERTIES in(s, b) ON CHANGE changeDataIn(s, b), bins(s) ON CHANGE changeBins(s)
    FILTERS isParent(g, s) OR s IS Sku AND NOT g
    FILTERGROUP inSku FILTER 'Отмесенные' in(s, b)
;

DESIGN binStocks {
    BOX {
        size = (1024, 768);
        
        NEW topContainer {
            fill = 1;

            NEW binGroup {
                horizontal = TRUE;
                fill = 1;

                MOVE BOX(TREE binTree) {
                    caption = 'Группы ячеек';
                }

                MOVE BOX(b) {
                    fill = 2.5;
                    caption = 'Ячейки';
                    GRID(b) {
                        defaultComponent = TRUE;
                        PROPERTY(canonicalName(b)) {caption = 'Группа';}
                    }
                }
            }

            NEW tabContainer {
                tabbed=TRUE;
                fill = 1;
                NEW oldContainer{
                    caption = 'Ячейки по складам';
                    fill = 1;
                    MOVE BOX(ts);
                    NEW skuGroup {
                        horizontal = TRUE;
                        fill = 1;

                        MOVE BOX(TREE treeGroup) {
                            caption = 'Группы Sku';
                        }

                        MOVE BOX(os) {
                            fill = 2.5;
                            GRID(os) {
                                defaultComponent = TRUE;
                            }
                        }
                    }                    
                }
                NEW newContainer{
                    caption = 'Ячейки по товарам';
                    fill = 1;
                    horizontal = TRUE;
                    MOVE BOX(TREE groupTree);
                    MOVE BOX(s) {fill = 2.5;}
                }
            }
        }

        MOVE TOOLBARBOX;
    }
}
@extendFormFilterStockAccess(ts, binStocks);

//--------------------------------------------------Ячейка для Detail--------------------------------------//

META defineDocumentDetailBinCustom(detail, prefix, caption)
    prefix###bin = DATA Bin (###detail);
    name###prefix##Bin 'Ячейка'###caption (###detail detail) = name(prefix###bin(detail)) CHARWIDTH 10;
END
META defineDocumentAbstractDetailBinCustom(detail, prefix, caption)
    prefix###bin = ABSTRACT Bin (###detail) MATERIALIZED;
    name###prefix##Bin 'Ячейка'###caption (###detail detail) = name(prefix###bin(detail)) CHARWIDTH 10;
END
META defineDocumentInterfaceDetailBinCustom(detail, prefix, caption)
    @defineDocumentAbstractDetailBinCustom(detail, prefix, caption);
    @defineDocumentDetailBinCustom(user###detail, prefix, caption);
    prefix###bin(User###detail detail) += prefix###bin(detail);
END
META defineDocumentInterfaceDetailBinCustom(detail)
    @defineDocumentInterfaceDetailBinCustom(detail, , );
END

META defineDocumentAbstractDetailBin(object)
    @defineDocumentAbstractDetailBinCustom(object###detail, , );
END

META defineDocumentInterfaceDetailBin(object, caption)
    @defineDocumentInterfaceDetailBinCustom(object###detail, , caption);
END
META defineDocumentInterfaceDetailBin(object)
    @defineDocumentInterfaceDetailBinCustom(object###detail, , );
END

META extendFormInterfaceDetailBin(object, concrete, prefix, befProp)
    @defineDocumentInterfaceProperty (object, showBin, 'Ячейка');

    EXTEND FORM user###object
        PROPERTIES(concrete) showBin
        PROPERTIES (d) SHOWIF showBin(concrete) nameBin BEFORE befProp(d)
    ;
    DESIGN user###object {
        headerExtraParams {
            NEW headerBin {
                caption = 'Ячейка';
                horizontal = TRUE;
                MOVE PROPERTY(showBin(concrete));
            }
        }
    }
    EXTEND FORM object##s
    PROPERTIES (d) READONLY SHOWIF showBin(concrete) nameBin BEFORE befProp(d)
    ;
END

//---------------- invoiceShipment --------------------//

META defineInvoiceShipmentBin(stockProp)

    @defineDocumentInterfaceDetailBin(invoice);
    bin (InvoiceShipmentDetail detail) += bin(invoiceDetail(detail));

    @defineDocumentInterfaceProperty (invoice, showBin, 'Ячейка');

    EXTEND FORM userInvoice
        PROPERTIES(i) showBin
        PROPERTIES(d) BEFORE quantity(d) SHOWIF showBin(i) BACKGROUND backgroundShipped(i)
                      nameBin
    ;
    DESIGN userInvoice {
        headerExtraParams {
            NEW headerBin {
                caption = 'Ячейка';
                MOVE PROPERTY(showBin(i));
            }
        }
    }

    EXTEND FORM invoices
        PROPERTIES(d) READONLY SHOWIF showBin(i) BACKGROUND backgroundShipped(i)
                      nameBin
    ;
    EXTEND FORM invoiceDetails
        PROPERTIES(d) READONLY SHOWIF showBin(d) BACKGROUND backgroundShipped(d)
                      nameBin
    ;
    
    overCopy[UserInvoiceDetail,UserInvoiceDetail](UserInvoiceDetail d, UserInvoiceDetail detail) + {       
        bin(d) <- bin(detail);
    }     

END

NAVIGATOR {
    WMSNavigator {
        NEW FOLDER binNavigator 'Ячейки' {
            NEW binGroups;
            NEW binStocks;
        }
    }
}

// ----

META defineBinAttribute(attribute, caption)

    data###attribute caption = ABSTRACT BOOLEAN (BinGroup) MATERIALIZED;
    data###attribute caption = DATA BOOLEAN (DataBinGroup);
    data###attribute(DataBinGroup binGroup) += data###attribute(binGroup); 
    
    levelParentData###attribute (BinGroup binGroup) = GROUP MIN level(binGroup, BinGroup parent) IF data###attribute(parent) MATERIALIZED;
    nearestParentData###attribute (BinGroup binGroup) = binGroup(binGroup, levelParentData###attribute(binGroup));
    nearestData###attribute (BinGroup binGroup) = data###attribute(nearestParentData###attribute(binGroup)) MATERIALIZED;
    
    attribute caption (BinGroup binGroup) =
        OVERRIDE data###attribute(binGroup),
            nearestData###attribute(binGroup) MATERIALIZED;
    
    EXTEND FORM dataBinGroup
        PROPERTIES(g) data###attribute
    ;
    
    DESIGN dataBinGroup {
        additionalContainer{
            MOVE PROPERTY(data###attribute(g));   
        }
    }

    EXTEND FORM dialogBinGroups
        PROPERTIES(g) READONLY attribute
    ;
    
    EXTEND FORM binGroups
        PROPERTIES(g) READONLY attribute
    ;
    
    data###attribute caption = DATA BOOLEAN (Bin);
    
    attribute caption (Bin bin) =
        OVERRIDE data###attribute(bin),
            attribute(binGroup(bin)) MATERIALIZED;
    
    EXTEND FORM bin
        PROPERTIES(s) attribute
    ;

    DESIGN bin {
        additionalContainer{
            MOVE PROPERTY(attribute(s));
        }
    }    

    EXTEND FORM dialogBins
        PROPERTIES(s) READONLY attribute
    ;
    
    EXTEND FORM bins
        PROPERTIES(s) READONLY attribute
    ;
    
    EXTEND FORM binStocks
        PROPERTIES(b) READONLY attribute
    ;    
END

@defineBinAttribute(receiving, 'Приемка');

@defineBinAttribute(shipping, 'Отгрузка');

@defineBinAttribute(storage, 'Хранение');

@defineBinAttribute(picking, 'Комплектация');