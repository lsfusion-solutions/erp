MODULE Bin;

REQUIRE Stock, Barcode, WMS;

//------------------------- Ячейка -----------------------------//

CLASS ABSTRACT BinGroup 'Группа ячеек';
TABLE binGroup (BinGroup);

id '{integration.id}' = ABSTRACT STRING[100] (BinGroup) NONULL MATERIALIZED INDEXED CHARWIDTH 10;
name 'Наименование' = ABSTRACT ISTRING[100](BinGroup) MATERIALIZED INDEXED CHARWIDTH 20;
order 'Порядок' = ABSTRACT INTEGER (BinGroup) CHARWIDTH 2;

// Неактивный
inactive 'Неактивный' = ABSTRACT BOOLEAN (BinGroup);
active 'Активный' (BinGroup binGroup) = binGroup IS BinGroup AND NOT inactive(binGroup) MATERIALIZED INDEXED;

TABLE binGroupBinGroup(BinGroup, BinGroup);
@defineHierarchyAbstract(binGroup, BinGroup);

canonicalId 'Полный код' (BinGroup binGroup) = ISTRING[255](
    (GROUP CONCAT id(BinGroup parent), '-' ORDER DESC level(binGroup, parent)))
    CHARWIDTH 50 MATERIALIZED;
binGroup(id) = GROUP AGGR BinGroup binGroup BY canonicalId(binGroup);

CLASS DataBinGroup 'Группа ячеек' : BinGroup;
TABLE dataBinGroup (DataBinGroup);

id '{integration.id}' = DATA STRING[100] (DataBinGroup) IN id INDEXED CHARWIDTH 10;
dataBinGroup(id) = GROUP MAX DataBinGroup dataBinGroup BY id(dataBinGroup);
name 'Наименование' = DATA ISTRING[100](DataBinGroup);
order 'Порядок' = DATA INTEGER (DataBinGroup) CHARWIDTH 2;

// Неактивный
inactive 'Неактивный' = DATA BOOLEAN (DataBinGroup);
parent = DATA BinGroup (DataBinGroup) AUTOSET NONULL;
nameParent '{hierarchy.name.parent}' = name(parent(DataBinGroup binGroup)) IN base;

id[BinGroup](DataBinGroup binGroup) += id(binGroup);
name[BinGroup](DataBinGroup binGroup) += name(binGroup);
order[BinGroup](DataBinGroup binGroup) += order(binGroup);
inactive[BinGroup](DataBinGroup binGroup) += inactive(binGroup);
parent[BinGroup](DataBinGroup binGroup) += parent(binGroup);

useBins 'Использовать ячейки' = ABSTRACT BOOLEAN (Stock) MATERIALIZED;

CLASS StockBinGroup 'Группа ячеек(ячеек)';
TABLE stockBinGroup (StockBinGroup);

stockBinGroup = AGGR StockBinGroup WHERE useBins(Stock stock) MATERIALIZED INDEXED;

EXTEND CLASS StockBinGroup : BinGroup;
id(StockBinGroup binGroup) += Stock.id(stock(binGroup));
name[BinGroup](StockBinGroup binGroup) += ISTRING[100](Stock.name(stock(binGroup)));
inactive[BinGroup](StockBinGroup binGroup) += Stock.inactive(stock(binGroup));

edit(StockBinGroup binGroup) + {};

stock(DataBinGroup binGroup) = stock[StockBinGroup](binGroupRoot(binGroup, 1));
stock(BinGroup binGroup) = MULTI stock[DataBinGroup](binGroup), stock[StockBinGroup](binGroup);
nameStock 'Склад' (BinGroup binGroup) = name(stock(binGroup));

@defineHierarchyPlain(binGroup);

nameBinGroup1 'Склад' (BinGroup child) = name(binGroup1(child));
nameBinGroup2 'Зона' (BinGroup child) = name(binGroup2(child));
nameBinGroup3 (BinGroup child) = name(binGroup3(child));
nameBinGroup4 (BinGroup child) = name(binGroup4(child));
nameBinGroup5 (BinGroup child) = name(binGroup5(child));

FORM dataBinGroup 'Группа ячеек'
    OBJECTS g=DataBinGroup PANEL
    PROPERTIES(g) inactive, order, id SHOWIF showIDs(), canonicalId READONLY, name, nameParent, canonicalName, nameStock READONLY 
    EDIT DataBinGroup OBJECT g
;

DESIGN dataBinGroup {
    NEW mainContainer {
        caption = 'Основные свойства';
        alignment = STRETCH;
        lines = 2;
        MOVE PROPERTY(inactive(g));
        MOVE PROPERTY(order(g));
        MOVE PROPERTY(id(g));
        MOVE PROPERTY(canonicalId(g));
        MOVE PROPERTY(name(g));
        MOVE PROPERTY(nameParent(g));
        MOVE PROPERTY(canonicalName(g));
        MOVE PROPERTY(nameStock(g));
    }
    NEW additionalContainer {
        caption = 'Дополнительные свойства';
        lines = 5;
    }    
    MOVE TOOLBARBOX;
}

FORM dialogBinGroups 'Группы ячеек'
    TREE treeGroups g=BinGroup PARENT parent(g)
    PROPERTIES READONLY order(g), canonicalId(g), name(g), canonicalName(g), nameStock(g)
    ORDERS order(g), canonicalId(g), name(g)
    FILTERGROUP active FILTER 'Активный' active(g) DEFAULT
    LIST BinGroup OBJECT g
;

FORM binGroups 'Группы ячеек'
    TREE treeGroups g=BinGroup PARENT parent(g)
    PROPERTIES READONLY order(g), canonicalId(g), id(g) SHOWIF showIDs(), name(g), canonicalName(g), nameStock(g)
    PROPERTIES(g) NEWSESSION NEW[DataBinGroup], EDIT SHOWIF g IS DataBinGroup, deleteg=DELETE SHOWIF g IS DataBinGroup
    ORDERS order(g), canonicalId(g), name(g)
    FILTERGROUP active FILTER 'Активный' active(g) DEFAULT
;

CLASS Bin 'Ячейка' ;
TABLE bin (Bin);

id '{integration.id}' = DATA STRING[100] (Bin) NONULL IN id INDEXED CHARWIDTH 10;
maxBin (id) = GROUP MAX Bin bin BY id(bin);

name 'Наименование' = DATA ISTRING[100](Bin) IN id;
binGroup = DATA BinGroup (Bin) AUTOSET NONULL;// DELETE;
nameBinGroup 'Группа' (Bin bin) = name(binGroup(bin));
canonicalNameBinGroup 'Группа (имя)' (Bin bin) = canonicalName(binGroup(bin)) CHARWIDTH 20;
canonicalIdBinGroup 'Группа (код)' (Bin bin) = canonicalId(binGroup(bin)) CHARWIDTH 20;

TABLE binGroupBin(BinGroup, Bin);
isParent (BinGroup binGroup, Bin bin) = isParent(binGroup(bin), binGroup);
canonicalName 'Полное имя' (Bin bin) = CONCAT ' / ', canonicalName(binGroup(bin)), name(bin) CHARWIDTH 20;
canonicalId 'Полный код' (Bin bin) = CONCAT '-', canonicalId(binGroup(bin)), id(bin) CHARWIDTH 20;
bin (id) = GROUP AGGR Bin bin BY canonicalId (bin);

stock(Bin bin) = stock(binGroupRoot(binGroup(bin), 1)) MATERIALIZED INDEXED;
nameStock 'Склад' (Bin bin) = name(stock(bin));

binGroup1(Bin bin) = binGroup1(binGroup(bin)) MATERIALIZED;
nameBinGroup1 'Склад' (Bin bin) = name(binGroup1(bin));

binGroup2(Bin bin) = binGroup2(binGroup(bin)) MATERIALIZED;
nameBinGroup2 'Зона' (Bin bin) = name(binGroup2(bin));

binGroup3(Bin bin) = binGroup1(binGroup(bin)) MATERIALIZED;
nameBinGroup3  (Bin bin) = name(binGroup1(bin));

binGroup4(Bin bin) = binGroup4(binGroup(bin)) MATERIALIZED;
nameBinGroup4  (Bin bin) = name(binGroup4(bin));

binGroup5(Bin bin) = binGroup5(binGroup(bin)) MATERIALIZED;
nameBinGroup5  (Bin bin) = name(binGroup5(bin));

binGroup6(Bin bin) = binGroup6(binGroup(bin)) MATERIALIZED;
nameBinGroup6  (Bin bin) = name(binGroup6(bin));

FORM bin 'Ячейка'
    OBJECTS b = Bin PANEL
    PROPERTIES(b) id SHOWIF showIDs(), canonicalId, name, canonicalName, canonicalIdBinGroup, canonicalNameBinGroup, nameStock READONLY 
    EDIT Bin OBJECT b
;

DESIGN bin {
    NEW mainContainer {
        caption = 'Основные свойства';
        alignment = STRETCH;
        lines = 2;
        MOVE PROPERTY(id(b));
        MOVE PROPERTY(canonicalId(b));
        MOVE PROPERTY(name(b));
        MOVE PROPERTY(canonicalName(b));
        MOVE PROPERTY(canonicalIdBinGroup(b));
        MOVE PROPERTY(canonicalNameBinGroup(b));
        MOVE PROPERTY(nameStock(b));
    }
    NEW additionalContainer {
        caption = 'Дополнительные свойства';
        lines = 5;
    }
    MOVE TOOLBARBOX;
}


FORM dialogBins 'Ячейки'
    TREE binTree bg = BinGroup PARENT parent(bg)
    PROPERTIES READONLY order(bg), canonicalId(bg), name(bg), canonicalName(bg), nameStock(bg)
    FILTERGROUP active FILTER 'Активный' active(bg) DEFAULT
    ORDERS order(bg), canonicalId(bg), name(bg)

    OBJECTS b = Bin
    PROPERTIES(b) READONLY canonicalId, id SHOWIF showIDs(), name, canonicalName, nameStock READONLY
    FILTERS isParent(bg, b)
    ORDERS canonicalId(b), name(b)

    LIST Bin OBJECT b
;

DESIGN dialogBins {
    BOX {
        size = (1024, 768);

        NEW topContainer {
            horizontal = TRUE;
            fill = 1;

            MOVE BOX(TREE binTree) {
                caption = 'Группы ячеек';
            }

            MOVE BOX(b) {
                fill = 2;
                GRID(b) {
                    defaultComponent = TRUE;
                    PROPERTY(canonicalName(b)) {caption = 'Группа';}
                }
            }
        }

        MOVE TOOLBARBOX;
    }
}

FORM bins 'Ячейки'
    TREE binTree bg = BinGroup PARENT parent(bg)
    PROPERTIES READONLY order(bg), canonicalId(bg), name(bg), canonicalName(bg), nameStock(bg)
    FILTERGROUP active FILTER 'Активный' active(bg) DEFAULT
    ORDERS order(bg), canonicalId(bg), name(bg)

    OBJECTS b = Bin
    PROPERTIES(b) READONLY canonicalId, id SHOWIF showIDs(), name, canonicalName, nameStock READONLY 
    PROPERTIES(b) NEWSESSION NEW, EDIT, DELETE 
    ORDERS canonicalId(b), name(b)

    FILTERS isParent(bg, b)
    ORDERS name(b)
;

DESIGN bins {
    BOX {
        size = (1024, 768);

        NEW topContainer {
            horizontal = TRUE;
            fill = 1;

            MOVE BOX(TREE binTree) {
                caption = 'Группы ячеек';
            }

            MOVE BOX(b) {
                fill = 2;
                GRID(b) {
                    defaultComponent = TRUE;
                    PROPERTY(canonicalName(b)) {caption = 'Группа';}
                }
            }
        }

        MOVE TOOLBARBOX;
    }
}

// ---------------------  Соотносение товаров и ячеек  ------------------- //

TABLE skuGroupBinGroup(SkuGroup, BinGroup);
dataIn 'Отм.' = DATA BOOLEAN (SkuGroup, BinGroup);

levelParentSkuGroupDataIn (SkuGroup group, BinGroup binGroup) = 
    GROUP MIN level(group, SkuGroup parent) IF dataIn(parent, binGroup) MATERIALIZED;
nearestParentSkuGroupDataIn (SkuGroup group, BinGroup binGroup) = skuGroup(group, levelParentSkuGroupDataIn(group, binGroup));

levelParentBinGroupDataIn (SkuGroup group, BinGroup binGroup) =
    GROUP MIN level(binGroup, BinGroup parent) IF dataIn(group, parent) MATERIALIZED;
nearestParentBinGroupDataIn (SkuGroup group, BinGroup binGroup) = binGroup(binGroup, levelParentBinGroupDataIn(group, binGroup));

nearestDataIn (SkuGroup group, BinGroup binGroup) = 
    dataIn(nearestParentSkuGroupDataIn(group, binGroup), binGroup) OR dataIn(group, nearestParentBinGroupDataIn(group, binGroup)) MATERIALIZED;

in 'Отм.' (SkuGroup group, BinGroup binGroup) = OVERRIDE dataIn(group, binGroup), nearestDataIn(group, binGroup) MATERIALIZED INDEXED;

TABLE skuGroupBin(SkuGroup, Bin);
dataIn 'Отм.' = DATA BOOLEAN (SkuGroup, Bin);

levelParentDataIn (SkuGroup group, Bin bin) =
    GROUP MIN level(group, SkuGroup parent) IF dataIn(parent, bin) MATERIALIZED;

nearestParentDataIn (SkuGroup group, Bin bin) = skuGroup(group, levelParentDataIn(group, bin));
nearestDataIn (SkuGroup group, Bin bin) = dataIn(nearestParentDataIn(group, bin), bin) MATERIALIZED;

in 'Отм.' (SkuGroup group, Bin bin) = OVERRIDE dataIn(group, bin), nearestDataIn(group, bin), in(group, binGroup(bin)) MATERIALIZED INDEXED;

TABLE skuBinGroup(Sku, BinGroup);
dataIn 'Отм.' = DATA BOOLEAN (Sku, BinGroup);

levelParentDataIn (Sku sku, BinGroup binGroup) =
    GROUP MIN level(binGroup, BinGroup parent) IF dataIn(sku, parent) MATERIALIZED;

nearestParentDataIn (Sku sku, BinGroup binGroup) = binGroup(binGroup, levelParentDataIn(sku, binGroup));
nearestDataIn (Sku sku, BinGroup binGroup) = dataIn(sku, nearestParentDataIn(sku, binGroup)) MATERIALIZED;

in 'Отм.' (Sku sku, BinGroup binGroup) = OVERRIDE dataIn(sku, binGroup), nearestDataIn(sku, binGroup), in(skuGroup(sku), binGroup) MATERIALIZED INDEXED;

TABLE skuBin(Sku, Bin);
dataIn 'Отм.' = DATA BOOLEAN (Sku, Bin);

in 'Отм.' (Sku sku, Bin bin) = OVERRIDE dataIn(sku, bin), in(skuGroup(sku), bin), in(sku, binGroup(bin)), in(skuGroup(sku), binGroup(bin)) MATERIALIZED INDEXED;

changeDataIn (SkuGroup group, Bin bin) {
    NEWSESSION {
        INPUT b = BOOLEAN DO{
            dataIn(group, bin) <- b; 
        }
        APPLY;
    }
}

changeDataIn (Sku sku, Bin bin) {
    NEWSESSION {
        INPUT b = BOOLEAN DO{
            dataIn(sku, bin) <- b;
        }
        APPLY;
    }
}

bins 'Ячейки' (SkuGroup group) = 
    GROUP CONCAT name(Bin bin) IF in(group, bin) , ', ' ORDER bin CHARWIDTH 20 MATERIALIZED;

bins 'Ячейки(по складу)' (BinGroup binGroup, SkuGroup group) =
    GROUP CONCAT name(Bin bin) IF in(group, bin) AND stock(bin)==stock(binGroup) , ', ' ORDER bin CHARWIDTH 20 MATERIALIZED;

FORM changeBinsSkuGroup 'Выбор ячеек'
    OBJECTS g=SkuGroup PANEL 
    PROPERTIES(g) READONLY canonicalName

    TREE binTree bg = BinGroup PARENT parent(bg)
    PROPERTIES READONLY order(bg), canonicalId(bg), name(bg), canonicalName(bg), nameStock(bg)
    PROPERTIES in(g, bg)
    FILTERGROUP active FILTER 'Активный' active(bg) DEFAULT
    FILTERGROUP in FILTER 'Отмеченные' in(g, bg)
    ORDERS order(bg), canonicalId(bg), name(bg)

    OBJECTS b = Bin
    PROPERTIES(b) READONLY canonicalId, id SHOWIF showIDs(), name, canonicalName, nameStock
    PROPERTIES in(g, b)
    FILTERS b IS Bin AND NOT bg IS BinGroup OR isParent(bg, b)
    ORDERS canonicalId(b), name(b)    
    FILTERGROUP inSku FILTER 'Отмеченные' in(g, b)
;

DESIGN changeBinsSkuGroup {
    MOVE BOX(g);
    NEW binContainer{
        horizontal = TRUE;
        fill = 1;
        MOVE BOX(TREE binTree);
        MOVE BOX(b) {
            fill = 2.5;
            PROPERTY(canonicalName(b)) {caption = 'Группа';}
        }
    }
    MOVE TOOLBARBOX;
}

changeBins (SkuGroup group) {
    NEWSESSION {
        SHOW changeBinsSkuGroup OBJECTS g=group MANAGESESSION;
        APPLY;
    }   
}

GROUP itemWMS 'WMS' : base;

bins 'Ячейки' (Sku sku) =
    GROUP CONCAT name(Bin bin) IF in(sku, bin) , ', ' ORDER bin IN itemWMS CHARWIDTH 20 MATERIALIZED;

bins 'Ячейки(по складу)' (BinGroup binGroup, Sku sku) =
    GROUP CONCAT name(Bin bin) IF in(sku, bin) AND stock(bin)==stock(binGroup) , ', ' ORDER bin CHARWIDTH 20 MATERIALIZED;

FORM changeBinsSku 'Выбор ячеек'
    OBJECTS s=Sku PANEL
    PROPERTIES(s) READONLY name

    TREE binTree bg = BinGroup PARENT parent(bg)
    PROPERTIES READONLY order(bg), canonicalId(bg), name(bg), nameStock(bg)
    PROPERTIES in(s, bg)
    FILTERGROUP active FILTER 'Активный' active(bg) DEFAULT
    FILTERGROUP in FILTER 'Отмеченные' in(s, bg)
    ORDERS order(bg), canonicalId(bg), name(bg)

    OBJECTS b = Bin
    PROPERTIES in(s, b)
    PROPERTIES(b) READONLY canonicalId, name, id SHOWIF showIDs(), canonicalName, nameStock
    FILTERS b IS Bin AND NOT bg IS BinGroup OR isParent(bg, b)
    ORDERS canonicalId(b), name(b)
    FILTERGROUP inSku FILTER 'Отмеченные' in(s, b)
;

DESIGN changeBinsSku {
    MOVE PROPERTY(name(s)){alignment = STRETCH;}
    NEW binContainer{
        horizontal = TRUE;
        fill = 1;
        MOVE BOX(TREE binTree);
        MOVE BOX(b) {
            fill = 2.5;
            PROPERTY(canonicalName(b)) {caption = 'Группа';}
        }
    }
    MOVE TOOLBARBOX;
}

changeBins (Sku sku) {
    NEWSESSION {
        SHOW changeBinsSku OBJECTS s=sku MANAGESESSION;
        APPLY;
    }
}

// ------------------------------------- Формы ---------------------------------- //

FORM binStocks 'Ячейки'
    TREE binTree bg = BinGroup PARENT parent(bg)
    PROPERTIES READONLY order(bg), canonicalId(bg), name(bg), nameStock(bg)
    PROPERTIES(bg) NEWSESSION NEW[DataBinGroup], EDIT SHOWIF bg IS DataBinGroup, DELETE SHOWIF bg IS DataBinGroup
    FILTERGROUP active FILTER 'Активный' active(bg) DEFAULT
    ORDERS order(bg), canonicalId(bg), name(bg)

    OBJECTS b = Bin
    PROPERTIES(b) READONLY canonicalId, name, id SHOWIF showIDs(), canonicalName, nameStock, canonicalNameBinGroup
    FILTERS b IS Bin AND NOT bg IS BinGroup OR isParent(bg, b)
    ORDERS canonicalId(b), name(b)
    PROPERTIES(b) NEWSESSION NEW, EDIT, DELETE

    TREE groupTree g=SkuGroup PARENT parent(g)
    PROPERTIES READONLY order(g), id(g), name(g)
    PROPERTIES in(g, b) ON CHANGE changeDataIn(g, b), bins(g) ON CHANGE changeBins(g), bins(bg, g) ON CHANGE changeBins(g)
    ORDERS order(g), name(g)
    FILTERGROUP inactive1 FILTER 'Активные' active(g) 'F6' DEFAULT
    FILTERGROUP in FILTER 'Отмеченные' in(g, b)

    OBJECTS s = Sku
    PROPERTIES(s) READONLY name, idBarcode
    PROPERTIES in(s, b) ON CHANGE changeDataIn(s, b), bins(s) ON CHANGE changeBins(s), bins(bg, s) ON CHANGE changeBins(s)
    FILTERS isParent(g, s) OR s IS Sku AND NOT g
    FILTERGROUP inSku FILTER 'Отмеченные' in(s, b)
;

DESIGN binStocks {
    BOX {
        size = (1024, 768);
        
        NEW topContainer {
            fill = 1;

            NEW binGroup {
                horizontal = TRUE;
                fill = 1;

                MOVE BOX(TREE binTree) {
                    caption = 'Группы ячеек';
                    PROPERTY(canonicalId(bg)){
                        charWidth = 20;
                    }
                }

                MOVE BOX(b) {
                    fill = 2.5;
                    caption = 'Ячейки';
                    GRID(b) {
                        defaultComponent = TRUE;
                    }
                }
            }
            NEW skuGroup{
                caption = 'Ячейки по товарам';
                fill = 1;
                horizontal = TRUE;
                MOVE BOX(TREE groupTree);
                MOVE BOX(s) {fill = 2.5;}
            }
        }

        MOVE TOOLBARBOX;
    }
}

NAVIGATOR {
    WMSNavigator {
        NEW FOLDER binNavigator 'Ячейки' {
            NEW binGroups;
            NEW binStocks;
        }
    }
}

CLASS UsageType 'Тип использования';

dataIn 'Вкл.' = ABSTRACT BOOLEAN (BinGroup, UsageType) MATERIALIZED;
dataIn 'Вкл.' = DATA BOOLEAN (DataBinGroup, UsageType);
dataIn(DataBinGroup binGroup, UsageType type) += dataIn(binGroup, type);

levelParentDataIn (BinGroup binGroup, UsageType type) = GROUP MIN level(binGroup, BinGroup parent) IF dataIn(parent, type) MATERIALIZED;
nearestParentDataIn (BinGroup binGroup, UsageType type) = binGroup(binGroup, levelParentDataIn(binGroup, type));
nearestDataIn (BinGroup binGroup, UsageType type) = dataIn(nearestParentDataIn(binGroup, type), type) MATERIALIZED;

in 'Вкл.' (BinGroup binGroup, UsageType type) =
    OVERRIDE dataIn(binGroup, type),
        nearestDataIn(binGroup, type) MATERIALIZED;

dataIn 'Вкл.' = DATA BOOLEAN (Bin, UsageType);
in 'Вкл.' (Bin bin, UsageType type) =
    OVERRIDE dataIn(bin, type),
        in(binGroup(bin), type) MATERIALIZED;