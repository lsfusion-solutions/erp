MODULE Bin;

REQUIRE Stock, Barcode, WMS;

//------------------------- Ячейка -----------------------------//

CLASS ABSTRACT BinGroup 'Группа ячеек';
TABLE binGroup (BinGroup);

@defineExternalizableAbstract(binGroup, STRING[100]);

name 'Наименование' = ABSTRACT ISTRING[100](BinGroup) MATERIALIZED INDEXED;

// Неактивный
inactive 'Неактивный' = ABSTRACT BOOLEAN (BinGroup);
active 'Активный' (BinGroup binGroup) = binGroup IS BinGroup AND NOT inactive(binGroup) MATERIALIZED INDEXED;

TABLE binGroupBinGroup(BinGroup, BinGroup);
@defineHierarchyAbstract(binGroup, BinGroup);

CLASS DataBinGroup 'Группа ячеек' : BinGroup;
TABLE dataBinGroup (DataBinGroup);

@defineExternalizable(dataBinGroup, STRING[100]);

name 'Наименование' = DATA ISTRING[100](DataBinGroup);

// Неактивный
inactive 'Неактивный' = DATA BOOLEAN (DataBinGroup);

TABLE dataBinGroupDataBinGroup(DataBinGroup, DataBinGroup);
//@defineHierarchy(binGroup, DataBinGroup);
parent = DATA BinGroup (DataBinGroup) AUTOSET NONULL;// DELETE;

nameParent '{hierarchy.name.parent}' = name(parent(DataBinGroup binGroup)) IN base;

//level '{hierarchy.level}' (DataBinGroup child, DataBinGroup parent) = RECURSION 1l IF child IS DataBinGroup AND parent == child
//    STEP 2l IF parent == parent($parent) MATERIALIZED;
//
//binGroup(DataBinGroup child, LONG level)  = GROUP
//    MAX DataBinGroup parent IF level == level(child, parent);
//
//level '{hierarchy.level}'(DataBinGroup child)  = GROUP SUM 1 IF level(child, DataBinGroup parent) MATERIALIZED;
//
//levelRoot '{hierarchy.level}' (DataBinGroup child, DataBinGroup parent) = PARTITION SUM 1 IF level(child, parent)
//    ORDER DESC level(child, parent)
//    BY child MATERIALIZED;
//binGroupRoot (DataBinGroup child, level) = GROUP NAGGR DataBinGroup parent BY levelRoot(child, parent);
//
//isParent '{hierarchy.is.parent}' (DataBinGroup child, DataBinGroup parent) = TRUE IF level(child, parent);
//
//childNumber '{hierarchy.child.number}' (binGroup) = GROUP SUM 1 BY parent(DataBinGroup child) MATERIALIZED;
//
//descendantNumber '{hierarchy.descendant.number}'(DataBinGroup parent)  = GROUP SUM 1 IF isParent(DataBinGroup child, parent) MATERIALIZED;
//
//isLeaf '{hierarchy.is.leaf}' (DataBinGroup binGroup) = binGroup IS DataBinGroup AND NOT childNumber(binGroup) MATERIALIZED;
//
//isParentLeaf (DataBinGroup child, DataBinGroup parent) = isParent(child, parent) AND isLeaf(child);
//
//canonicalName '{hierarchy.canonical.name}' (DataBinGroup binGroup) = ISTRING[255](
//    (GROUP CONCAT name(DataBinGroup parent), ' / ' ORDER DESC level(binGroup, parent)))
//    CHARWIDTH 50 MATERIALIZED;

//id[BinGroup](DataBinGroup binGroup) += id(binGroup);
name[BinGroup](DataBinGroup binGroup) += name(binGroup);
inactive[BinGroup](DataBinGroup binGroup) += inactive(binGroup);
parent[BinGroup](DataBinGroup binGroup) += parent(binGroup);

useBins 'Использовать ячейки' = ABSTRACT BOOLEAN (Stock) MATERIALIZED;

CLASS StockBinGroup 'Группа ячеек(ячеек)';
TABLE stockBinGroup (StockBinGroup);

stockBinGroup = AGGR StockBinGroup WHERE useBins(Stock stock) MATERIALIZED INDEXED;

EXTEND CLASS StockBinGroup : BinGroup;
id(StockBinGroup binGroup) += Stock.id(stock(binGroup));
name[BinGroup](StockBinGroup binGroup) += ISTRING[100](Stock.name(stock(binGroup)));
inactive[BinGroup](StockBinGroup binGroup) += Stock.inactive(stock(binGroup));

edit(StockBinGroup binGroup) + {};

stock(DataBinGroup binGroup) = stock[StockBinGroup](binGroupRoot(binGroup, 1));
stock(BinGroup binGroup) = MULTI stock[DataBinGroup](binGroup), stock[StockBinGroup](binGroup);
nameStock 'Склад' (BinGroup binGroup) = name(stock(binGroup));

FORM dataBinGroup 'Группа ячеек'
    OBJECTS g=DataBinGroup PANEL
    PROPERTIES(g) inactive, name, id SHOWIF showIDs(), nameParent, nameStock READONLY 
    EDIT DataBinGroup OBJECT g
;

DESIGN dataBinGroup {
    NEW mainContainer {
        caption = 'Основные свойства';
        alignment = STRETCH;
        lines = 2;
        MOVE PROPERTY(inactive(g));
        MOVE PROPERTY(name(g));
        MOVE PROPERTY(id(g));
        MOVE PROPERTY(nameParent(g));
        MOVE PROPERTY(nameStock(g));
    }
    NEW additionalContainer {
        caption = 'Дополнительные свойства';
        lines = 5;
    }    
    MOVE TOOLBARBOX;
}

FORM dialogBinGroups 'Группы ячеек'
    TREE treeGroups g=BinGroup PARENT parent(g)
    PROPERTIES READONLY name(g), canonicalName(g), nameStock(g)
    ORDERS canonicalName(g)
    FILTERGROUP active FILTER 'Активный' active(g) DEFAULT
    LIST BinGroup OBJECT g
;

FORM binGroups 'Группы ячеек'
    TREE treeGroups g=BinGroup PARENT parent(g)
    PROPERTIES READONLY name(g), canonicalName(g), nameStock(g)
    PROPERTIES(g) NEWSESSION NEW[DataBinGroup], EDIT SHOWIF g IS DataBinGroup, deleteg=DELETE SHOWIF g IS DataBinGroup
    ORDERS canonicalName(g)
    FILTERGROUP active FILTER 'Активный' active(g) DEFAULT
;

CLASS Bin 'Ячейка' ;
TABLE bin (Bin);

@defineExternalizable(bin, STRING[100]);

name 'Наименование' = DATA ISTRING[100](Bin) IN id;
binGroup = DATA BinGroup (Bin) AUTOSET NONULL;// DELETE;
nameBinGroup 'Группа' (Bin bin) = name(binGroup(bin));

TABLE binGroupBin(BinGroup, Bin);
isParent (BinGroup binGroup, Bin bin) = isParent(binGroup(bin), binGroup);
canonicalName 'Каноническое имя' (Bin bin) = canonicalName(binGroup(bin)) CHARWIDTH 20;

stock(Bin bin) = stock(binGroupRoot(binGroup(bin), 1)) MATERIALIZED INDEXED;
nameStock 'Склад' (Bin bin) = name(stock(bin));

FORM bin 'Ячейка'
    OBJECTS s = Bin PANEL
    PROPERTIES(s) name, id SHOWIF showIDs(), canonicalName, nameStock READONLY 
    EDIT Bin OBJECT s
;

DESIGN bin {
    NEW mainContainer {
        caption = 'Основные свойства';
        alignment = STRETCH;
        lines = 2;
        MOVE PROPERTY(name(s));
        MOVE PROPERTY(id(s));
        MOVE PROPERTY(canonicalName(s));
        MOVE PROPERTY(nameStock(s));
    }
    NEW additionalContainer {
        caption = 'Дополнительные свойства';
        lines = 5;
    }
    MOVE TOOLBARBOX;
}

FORM dialogBins 'Ячейки'
    TREE binTree sg = BinGroup PARENT parent(sg)
    PROPERTIES READONLY name(sg), nameStock(sg)
    FILTERGROUP active FILTER 'Активный' active(sg) DEFAULT

    OBJECTS s = Bin
    PROPERTIES(s) READONLY name, id SHOWIF showIDs(), canonicalName, nameStock READONLY

    FILTERS isParent(sg, s)
    ORDERS name(s)

    LIST Bin OBJECT s
;

DESIGN dialogBins {
    BOX {
        size = (1024, 768);

        NEW topContainer {
            horizontal = TRUE;
            fill = 1;

            MOVE BOX(TREE binTree) {
                caption = 'Группы ячеек';
            }

            MOVE BOX(s) {
                fill = 2;
                GRID(s) {
                    defaultComponent = TRUE;
                }
            }
        }

        MOVE TOOLBARBOX;
    }
}

FORM bins 'Ячейки'
    TREE binTree sg = BinGroup PARENT parent(sg)
    PROPERTIES READONLY name(sg), nameStock(sg)
    FILTERGROUP active FILTER 'Активный' active(sg) DEFAULT

    OBJECTS s = Bin
    PROPERTIES(s) READONLY name, id SHOWIF showIDs(), canonicalName, nameStock READONLY 
    PROPERTIES(s) NEWSESSION NEW, EDIT, DELETE 

    FILTERS isParent(sg, s)
    ORDERS name(s)
;

DESIGN bins {
    BOX {
        size = (1024, 768);

        NEW topContainer {
            horizontal = TRUE;
            fill = 1;

            MOVE BOX(TREE binTree) {
                caption = 'Группы ячеек';
            }

            MOVE BOX(s) {
                fill = 2;
                GRID(s) {
                    defaultComponent = TRUE;
                }
            }
        }

        MOVE TOOLBARBOX;
    }
}

// ---------------------  Склады с указанием ячеек ----------------------- //

TABLE stockDataBinGroup(Stock, DataBinGroup);
dataIn 'Отм.' = DATA BOOLEAN (Stock, BinGroup);

TABLE stockBin(Stock, Bin);
dataIn 'Отм.' = DATA BOOLEAN (Stock, Bin);

levelParent (Stock stock, BinGroup binGroup) = GROUP
                                                               MIN level(binGroup, BinGroup parent) IF dataIn(stock, parent) MATERIALIZED;
nearestParent (Stock stock, BinGroup binGroup) =
    binGroup(binGroup, levelParent(stock, binGroup));
nearestIn (Stock stock, BinGroup binGroup) =
    dataIn(stock, nearestParent(stock, binGroup));

in 'Отм.' (Stock stock, BinGroup binGroup) = OVERRIDE dataIn(stock, binGroup), nearestIn (stock, binGroup) MATERIALIZED;

in 'Отм.' (Stock stock, Bin bin) = OVERRIDE dataIn(stock, bin), in(stock, binGroup(bin)) MATERIALIZED;

countIn (Stock stock, BinGroup parent) = GROUP SUM 1 IF isParent(binGroup(Bin bin) , parent) AND in(stock, bin);

bins 'Ячейки' (Stock stock) = GROUP
                                       CONCAT name(Bin bin) IF in(stock, bin) , ', '
                                       ORDER bin CHARWIDTH 20 MATERIALIZED;
stocks 'Склады' (Bin bin) = GROUP
                                       CONCAT name(Stock stock) IF in(stock, bin) , ', '
                                       ORDER stock CHARWIDTH 20 MATERIALIZED;


// ---------------- Ячейка по классификатору ------------------- //

groupType = DATA GroupType (Stock);
nameGroupType 'Тип классификатора' (Stock stock) = name(groupType(stock));

dataBin = DATA Bin (Stock, Group);
nameDataBin 'Ячейка' (Stock stock,Group group) = name(dataBin(stock,group)) CHARWIDTH 10;

dataBin = DATA Bin (Stock, Sku);
nameDataBin 'Ячейка' (Stock stock,Sku sku) = name(dataBin(stock,sku)) CHARWIDTH 10;

levelParentBin (Stock stock, Group group) = GROUP
                                                              MIN level(group, Group parent) IF dataBin(stock, parent) MATERIALIZED;

nearestParentBin (Stock stock, Group group) = group(group, levelParentBin (stock, group));
nearestInBin  (Stock stock, Group group) =
    dataBin(stock, nearestParentBin (stock, group)) MATERIALIZED;

bin (Stock stock, Group group) = OVERRIDE dataBin(stock, group), nearestInBin(stock, group) MATERIALIZED;
nameBin 'Ячейка'= name(bin(Stock stock, Group group)) CHARWIDTH 10;

bin (Stock stock, Sku sku) = OVERRIDE dataBin(stock, sku), bin(stock, group(groupType(stock), sku)) MATERIALIZED;
nameBin 'Ячейка'= name(bin(Stock stock, Sku sku)) CHARWIDTH 10;

CONSTRAINT dataBin(Stock stock, Group group) AND NOT in(stock, dataBin(stock, group))
           CHECKED BY dataBin[Stock,Group] MESSAGE 'Ячейка (для группы sku) не включена для склада';

CONSTRAINT dataBin(Stock stock, Sku sku) AND NOT in(stock, dataBin(stock, sku))
           CHECKED BY dataBin[Stock,Sku] MESSAGE 'Ячейка (для sku) не включена для склада';
// ------------------------------------- Формы ---------------------------------- //

FORM binStocks 'Ячейки'

    OBJECTS ts = Stock PANEL
    PROPERTIES(ts) SELECTOR name
    PROPERTIES(ts) nameGroupType
    FILTERS isCompany(ts)

    TREE binTree bg = BinGroup PARENT parent(bg)
    PROPERTIES READONLY name(bg), nameStock(bg)
    PROPERTIES(ts, bg) in
    PROPERTIES(bg) NEWSESSION NEW[DataBinGroup], EDIT SHOWIF bg IS DataBinGroup, DELETE SHOWIF bg IS DataBinGroup
    FILTERGROUP active FILTER 'Активный' active(bg) DEFAULT

    FILTERGROUP filters2
        FILTER 'Отмеченные' in(ts, bg)

    OBJECTS b = Bin
    PROPERTIES(b) READONLY name, id SHOWIF showIDs(), canonicalName, nameStock
    PROPERTIES(ts, b) in
    FILTERS b IS Bin AND NOT bg IS BinGroup OR isParent(bg, b)
    ORDERS name(b)
    PROPERTIES(b) NEWSESSION NEW, EDIT, DELETE 

    FILTERGROUP filters1
            FILTER 'Отмеченные' in(ts, b) 'F10'

    TREE treeGroup g=Group PARENT parent(g)
    PROPERTIES READONLY order(g), name(g)
    FILTERS groupType(g) == groupType(ts)
    ORDERS order(g), name(g)
    PROPERTIES(ts, g) nameBin
    FILTERGROUP inactive FILTER 'Активные' active(g) 'F6' DEFAULT

    OBJECTS s = Sku
    PROPERTIES(s) READONLY name, idBarcode
    FILTERS isParent(g, s) OR s IS Sku AND NOT g
    PROPERTIES(ts, s) nameBin
;

DESIGN binStocks {
    BOX {
        size = (1024, 768);

        MOVE BOX(ts);
        NEW topContainer {
            fill = 1;

            NEW binGroup {
                horizontal = TRUE;
                fill = 1;

                MOVE BOX(TREE binTree) {
                    caption = 'Группы ячеек';
                }

                MOVE BOX(b) {
                    fill = 2.5;
                    caption = 'Ячейки';
                    GRID(b) {
                        defaultComponent = TRUE;
                    }
                }
            }
            NEW skuGroup {
                horizontal = TRUE;
                fill = 1;

                MOVE BOX(TREE treeGroup) {
                    caption = 'Группы Sku';
                }

                MOVE BOX(s) {
                    fill = 2.5;
                    GRID(s) {
                        defaultComponent = TRUE;
                    }
                }
            }
        }

        MOVE TOOLBARBOX;
    }
}
@extendFormFilterStockAccess(ts, binStocks);

//--------------------------------------------------Ячейка для Detail--------------------------------------//

META defineDocumentDetailBinCustom(detail, prefix, caption)
    prefix###bin = DATA Bin (###detail);
    name###prefix##Bin 'Ячейка'###caption (###detail detail) = name(prefix###bin(detail)) CHARWIDTH 10;
END
META defineDocumentAbstractDetailBinCustom(detail, prefix, caption)
    prefix###bin = ABSTRACT Bin (###detail) MATERIALIZED;
    name###prefix##Bin 'Ячейка'###caption (###detail detail) = name(prefix###bin(detail)) CHARWIDTH 10;
END
META defineDocumentInterfaceDetailBinCustom(detail, prefix, caption)
    @defineDocumentAbstractDetailBinCustom(detail, prefix, caption);
    @defineDocumentDetailBinCustom(user###detail, prefix, caption);
    prefix###bin(User###detail detail) += prefix###bin(detail);
END
META defineDocumentInterfaceDetailBinCustom(detail)
    @defineDocumentInterfaceDetailBinCustom(detail, , );
END

META defineDocumentAbstractDetailBin(object)
    @defineDocumentAbstractDetailBinCustom(object###detail, , );
END

META defineDocumentInterfaceDetailBin(object, caption)
    @defineDocumentInterfaceDetailBinCustom(object###detail, , caption);
END
META defineDocumentInterfaceDetailBin(object)
    @defineDocumentInterfaceDetailBinCustom(object###detail, , );
END

META extendFormInterfaceDetailBin(object, concrete, prefix, befProp)
    @defineDocumentInterfaceProperty (object, showBin, 'Ячейка');

    EXTEND FORM user###object
        PROPERTIES(concrete) showBin
        PROPERTIES (d) SHOWIF showBin(concrete) nameBin BEFORE befProp(d)
    ;
    DESIGN user###object {
        headerExtraParams {
            NEW headerBin {
                caption = 'Ячейка';
                horizontal = TRUE;
                MOVE PROPERTY(showBin(concrete));
            }
        }
    }
    EXTEND FORM object##s
    PROPERTIES (d) READONLY SHOWIF showBin(concrete) nameBin BEFORE befProp(d)
    ;
END

//---------------- invoiceShipment --------------------//

META defineInvoiceShipmentBin(stockProp)

    @defineDocumentInterfaceDetailBin(invoice);
    bin (InvoiceShipmentDetail detail) += bin(invoiceDetail(detail));

    @defineDocumentInterfaceProperty (invoice, showBin, 'Ячейка');

    EXTEND FORM userInvoice
        PROPERTIES(i) showBin
        PROPERTIES(d) BEFORE quantity(d) SHOWIF showBin(i) BACKGROUND backgroundShipped(i)
                      nameBin
    ;
    DESIGN userInvoice {
        headerExtraParams {
            NEW headerBin {
                caption = 'Ячейка';
                MOVE PROPERTY(showBin(i));
            }
        }
    }

    EXTEND FORM invoices
        PROPERTIES(d) READONLY SHOWIF showBin(i) BACKGROUND backgroundShipped(i)
                      nameBin
    ;
    EXTEND FORM invoiceDetails
        PROPERTIES(d) READONLY SHOWIF showBin(d) BACKGROUND backgroundShipped(d)
                      nameBin
    ;
    
    overCopy[UserInvoiceDetail,UserInvoiceDetail](UserInvoiceDetail d, UserInvoiceDetail detail) + {       
        bin(d) <- bin(detail);
    }     

END

NAVIGATOR {
    WMSNavigator {
        NEW FOLDER binNavigator 'Ячейки' {
            NEW binGroups;
            NEW binStocks;
        }
    }
}


setUseBins() = DATA BOOLEAN ();
setRootBinGroup() = DATA BOOLEAN ();

onStarted() + {
    IF setUseBins() AND NOT setRootBinGroup() THEN {
        FOR in(Stock stock, BinGroup bingroup) AND NOT parent(bingroup) AND useBins(stock) AND stock(StockBinGroup group)==stock DO {
            parent(bingroup) <- group;
        }
        setRootBinGroup() <- TRUE;
    }
}

onStarted() + {
    IF NOT setUseBins() THEN {
        FOR [GROUP SUM 1 IF in(Stock stock, BinGroup bingroup) BY stock](Stock st) DO {
            useBins(st) <- TRUE;
        }
        setUseBins() <- TRUE;
    }
}

// ----

META defineBinAttribute(attribute, caption)

    data###attribute caption = ABSTRACT BOOLEAN (BinGroup) MATERIALIZED;
    data###attribute caption = DATA BOOLEAN (DataBinGroup);
    data###attribute(DataBinGroup binGroup) += data###attribute(binGroup); 
    
    levelParentData###attribute (BinGroup binGroup) = GROUP MIN level(binGroup, BinGroup parent) IF data###attribute(parent) MATERIALIZED;
    nearestParentData###attribute (BinGroup binGroup) = binGroup(binGroup, levelParentData###attribute(binGroup));
    nearestData###attribute (BinGroup binGroup) = data###attribute(nearestParentData###attribute(binGroup)) MATERIALIZED;
    
    attribute caption (BinGroup binGroup) =
        OVERRIDE data###attribute(binGroup),
            nearestData###attribute(binGroup) MATERIALIZED;
    
    EXTEND FORM dataBinGroup
        PROPERTIES(g) data###attribute
    ;
    
    DESIGN dataBinGroup {
        additionalContainer{
            MOVE PROPERTY(data###attribute(g));   
        }
    }

    EXTEND FORM dialogBinGroups
        PROPERTIES(g) READONLY attribute
    ;
    
    EXTEND FORM binGroups
        PROPERTIES(g) READONLY attribute
    ;
    
    data###attribute caption = DATA BOOLEAN (Bin);
    
    attribute caption (Bin bin) =
        OVERRIDE data###attribute(bin),
            attribute(binGroup(bin)) MATERIALIZED;
    
    EXTEND FORM bin
        PROPERTIES(s) attribute
    ;

    DESIGN bin {
        additionalContainer{
            MOVE PROPERTY(attribute(s));
        }
    }    

    EXTEND FORM dialogBins
        PROPERTIES(s) READONLY attribute
    ;
    
    EXTEND FORM bins
        PROPERTIES(s) READONLY attribute
    ;
    
    EXTEND FORM binStocks
        PROPERTIES(b) READONLY attribute
    ;    
END

@defineBinAttribute(receiving, 'Приемка');

@defineBinAttribute(shipping, 'Отгрузка');

@defineBinAttribute(storage, 'Хранение');

@defineBinAttribute(picking, 'Комплектация');