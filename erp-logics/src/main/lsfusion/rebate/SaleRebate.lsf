MODULE SaleRebate;

REQUIRE RebateDashboard, SaleInvoice;

PRIORITY Sale;
NAMESPACE Rebate;

//-- Выписка накладной

@defineOperationProperty(showRebate, 'Ретро-бонусы', showContainer);

showRebate (Invoice i) = showRebate(operation(i));

TABLE rebateUserInvoice (Sale.UserInvoice);

rebateSku = DATA Sku();
nameRebateSku 'Ретро-бонус (услуга)' () = name(rebateSku());

rebateOperation = DATA Sale.Operation ();
nameRebateOperation 'Ретро-бонус (операция)' () = Sale.name(rebateOperation());

EXTEND FORM options
    PROPERTIES () nameRebateSku, nameRebateOperation 
;
DESIGN options {
    pane {
        NEW rebate {
            fill = 1;
            caption = 'Ретро-бонусы';
            MOVE PROPERTY (nameRebateSku());
            MOVE PROPERTY (nameRebateOperation());
        }
    }
}

fromDate 'Дата с' = ABSTRACT DATE (Sale.Invoice);
fromDate 'Дата с' = DATA DATE (Sale.UserInvoice) TABLE rebateUserInvoice;
fromDate(Sale.UserInvoice i) += fromDate(i);


toDate 'Дата по' = ABSTRACT DATE (Sale.Invoice);
toDate 'Дата по'  = DATA DATE (Sale.UserInvoice) TABLE rebateUserInvoice;
toDate(Sale.UserInvoice i) += toDate(i);

rebateAgreement = ABSTRACT Agreement (Sale.Invoice);
descriptionRebateAgreement 'Соглашение (бонусы)' (Sale.Invoice i) = description(rebateAgreement(i));
rebateAgreement = DATA Agreement (Sale.UserInvoice) TABLE rebateUserInvoice;
descriptionRebateAgreement 'Соглашение (бонусы)' (Sale.UserInvoice i) = description(rebateAgreement(i));
rebateAgreement(Sale.UserInvoice i) += rebateAgreement(i);

EXTEND FORM userInvoice
    PROPERTIES (i) SHOWIF showRebate(i) fromDate, toDate, descriptionRebateAgreement
;
DESIGN userInvoice {
    headerMainParams {
        NEW rebate {
            horizontal = TRUE;
            caption = 'Ретро-бонусы';
            MOVE PROPERTY(fromDate(i));
            MOVE PROPERTY(toDate(i));
            MOVE PROPERTY(descriptionRebateAgreement(i));
        }

    }   
}


CONSTRAINT rebateAgreement(Sale.UserInvoice o) AND NOT inSupplier(rebateAgreement(o), customer(o)) AND 
           (CHANGED(rebateAgreement(o)) OR CHANGED(customer(o)))
           CHECKED BY rebateAgreement[Sale.UserInvoice]
           MESSAGE 'Соглашение (бонусы) должно быть между заданными организациями (поставщик)';

CONSTRAINT rebateAgreement(Sale.UserInvoice o)
           AND NOT inCustomer(rebateAgreement(o), supplier(o)) AND 
           (CHANGED(rebateAgreement(o)) OR CHANGED(supplier(o)))
           CHECKED BY rebateAgreement[Sale.UserInvoice]
           MESSAGE 'Соглашение (бонусы) должно быть между заданными организациями (покупатель)';

//CONSTRAINT agreement(UserInvoice o) AND NOT (fromDateTime(agreement(o)) <= dateTime(o) 
//           AND NOT (toDateTime(agreement(o)) < dateTime(o))) AND NOT (dateFromConstraintAgreementUserInvoice() > date(o)) AND 
//           (CHANGED(agreement(o)) OR CHANGED(dateTime(o)))
//           CHECKED BY agreement[UserInvoice]
//           MESSAGE 'Соглашение просрочено или еще не действует';
      
exDescription (Sale.Invoice i) = CONCAT '', 'Ретро-бонусы № '+seriesNumber(i), ' от '+date(i), ' за период с '+fromDate(i), ' по '+toDate(i);  
               
lastInvoice = GROUP LAST Invoice i
    ORDER toDate(i), i
    WHERE isPosted(i) 
    BY supplier(i), customer(i), rebateAgreement(i) COMPLEX;

descriptionLastInvoice 'Последняя накладная' (LegalEntity c, LegalEntity s, Agreement a) = exDescription(lastInvoice(c,s,a));
    
defaultSupplierStock (Operation operation, LegalEntity) = GROUP MIN Stock stock IF inSupplier(stock,operation) 
                                                    AND isCompany(stock) 
                                                    AND inSupplier(legalEntity(stock),operation)
                                                    AND isSeller(legalEntity(stock))
                                                        BY legalEntity(stock);  
    
createInvoice  'Создать накладые' (LegalEntity c, DATE df, DATE dt)  { 
    IF rebateSku() AND rebateOperation()  THEN {
        IF  (GROUP SUM 1 IF select(Agreement a,LegalEntity l)) THEN {
            FOR  select(Agreement a,LegalEntity s) DO { 
                IF sumRebate(a,s) THEN {    
                    IF NOT toDate(lastInvoice(c,s,a)) >= df THEN NEWSESSION {   
                        NEW i = Sale.UserInvoice {                
                            supplier(i) <- c;
                            customer(i) <- s;
                            Sale.operation(i) <- rebateOperation();
                            supplierStock(i) <- defaultSupplierStock(operation(i),supplier(i));
                            fromDate(i) <- df; 
                            toDate(i) <- dt;
                            rebateAgreement(i) <- a;
                            isPosted(i) <- TRUE;
                            
                            NEW d = Sale.UserInvoiceDetail {
                                userInvoice(d) <- i;
                                sku(d) <- rebateSku();
                                quantity(d) <- 1.0;
                                price(d) <- NUMERIC[16,4](sumRebate(a,s));
                            }
                            executeLocalEvents('Sale.userInvoice');                    
                        }
                        APPLY;
                        IF NOT canceled() THEN {
                            select (a,s) <- NULL;
                        } 
                    } ELSE {
                        MESSAGE 'Для поставщика '+name(s)+' и '+description(a)+' уже создана накладная' NOWAIT ;
                    }  
                } ELSE {
                    MESSAGE 'Для поставщика '+name(s)+' и '+description(a)+' нет суммы услуг' NOWAIT ;
                }            
            }        
        } ELSE {
            MESSAGE 'Не отмечены соглашения для обработки';
        }
 
    } ELSE {
        MESSAGE 'Не задано значение операции или услуги по умолчанию в разделе Администрирование/Настройки/Ретро-бонусы';
    }       
} 

EXTEND FORM rebateDashboard

    OBJECTS i = Sale.Invoice LAST
    PROPERTIES (i) READONLY isClosed 
                            
    PROPERTIES (i) READONLY isPosted, number, series, date, time                                
    PROPERTIES (i) READONLY nameSupplier, nameSupplierStock, nameCustomer, nameCustomerStock,
                            nameCurrency, descriptionRebateAgreement, fromDate, toDate
                            
    PROPERTIES (i) READONLY countInvoiceDetail, quantityInvoiceDetail, sumInvoiceDetail,
                            VATSumInvoiceDetail, invoiceSumInvoiceDetail
    PROPERTIES (i) READONLY note 

    PROPERTIES READONLY descriptionLastInvoice(c,s,a)
    PROPERTIES createInvoice(c,dFrom,dTo) TOOLBAR DRAW as

    FILTERS (operation(i) == rebateOperation()) OR (i IS Sale.Invoice AND NOT rebateOperation()),
            supplier(i) == c 

    PROPERTIES (i) NEWSESSION NEW[UserInvoice], editI = EDIT SHOWIF overShowEdit(i)
    PROPERTIES (i) close[UserInvoice] SHOWIF showClose(i), open SHOWIF showOpen(i)
    PROPERTIES (i) NEWSESSION deletei=DELETE SHOWIF overShowDelete(i)
    
    FILTERGROUP customer
        FILTER 'По соглашению' rebateAgreement(i) == a AND customer(i) == s 'F6' DEFAULT 
;
DESIGN rebateDashboard {
    BOX {
        MOVE BOX(dates);
        NEW body {
            horizontal = FALSE;
            fill = 1;
            MOVE BOX(as);
            MOVE BOX(i);
        }
        MOVE TOOLBARBOX;
    }
} 