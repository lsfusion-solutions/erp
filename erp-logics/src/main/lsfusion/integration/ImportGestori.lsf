MODULE ImportGestori;

REQUIRE Item, Store, Stock, Warehouse, ItemDescription, StockContract, Agreement, ItemStorage, ItemNutrition, RangeLevel, 
        PurchaseInvoice, PurchaseShipment, PricingPurchase, LegalEntityBy, PriceListBarcode, Disparity, SalePack;

@defineLogRotate(importGestori_init, 5, weekly);
@defineLogRotate(importGestori, 5, weekly);

host 'Хост' = DATA ISTRING[30]();
port 'Порт' = DATA ISTRING[10]();
base 'База' = DATA ISTRING[100]();
login 'Логин' = DATA ISTRING[100]();
password 'Пароль' = DATA ISTRING[100]() ECHO;

EXTEND FORM integrationData PROPERTIES () host, port, base, login, password;

DESIGN integrationData {
    pane {
        NEW santa FIRST {
            caption = 'Gestori';
            fill = 1;
            NEW santaParams {
                caption = 'Параметры';
                MOVE PROPERTY (host());
                MOVE PROPERTY (port());
                MOVE PROPERTY (base());
                MOVE PROPERTY (login());
                MOVE PROPERTY (password());
            }
            NEW santaButtons { 
                caption = 'Импорт';
            }
        }
    }
}

CLASS CorrespndenceLegalEntityId 'Соответствие кодов организаций';
TABLE correspndenceLegalEntityId (CorrespndenceLegalEntityId);

id 'Код' = DATA STRING[100](CorrespndenceLegalEntityId);
newId 'Новый код' = DATA STRING[100](CorrespndenceLegalEntityId);

correspndenceLegalEntityId = GROUP AGGR CorrespndenceLegalEntityId d BY id(d);
newIdLegalEntity (STRING[100] id) = newId(correspndenceLegalEntityId(id));

legalEntityNew(STRING[100] id) = OVERRIDE legalEntity(newIdLegalEntity(id)), legalEntity(id);

FORM correspndenceLegalEntityId 'Таблица соответствий кодов огранизаций'
    OBJECTS d = CorrespndenceLegalEntityId
    PROPERTIES (d) id, newId, NEW, DELETE 
;

showCorrespndenceLegalEntityId 'Таблица соответствий кодов огранизаций' () {
    NEWSESSION SHOW correspndenceLegalEntityId;
}

EXTEND FORM integrationData PROPERTIES () showCorrespndenceLegalEntityId;

DESIGN integrationData {
    santaParams {
        MOVE PROPERTY (showCorrespndenceLegalEntityId());
    }
}

id = DATA LOCAL INTEGER (INTEGER);
idItem = DATA LOCAL NUMERIC[13,0](INTEGER);
idSku = DATA LOCAL NUMERIC[13,0](INTEGER);
name = DATA LOCAL STRING[100](INTEGER);
name2 = DATA LOCAL STRING[100](INTEGER);
idParent = DATA LOCAL INTEGER (INTEGER);

importItemGroup 'Импорт товарных групп' () {
    
    LOCAL file = FILE ();
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
        EXEC 'SELECT cod_dep, name_dep FROM Pub.depart WITH (NOLOCK)' TO file;
    
    IMPORT TABLE FROM file() TO id, name;
    
    IF NOT itemGroup('all') THEN NEW g = ItemGroup {
        id(g) <- 'all';
        name(g) <- 'Все';
    }
    
    FOR id(INTEGER i) AND NOT itemGroup(TEXT (id(i))) DO NEW g = ItemGroup {
        id(g) <- ISTRING[100] (id(i));
    }
    
    FOR id(INTEGER i) AND ItemGroup g == itemGroup(TEXT (id(i))) DO {
        name(g) <- ISTRING[100] (name(i));
        parent(g) <- itemGroup('all');
    }
    
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
        EXEC 'SELECT cod_group, name_gr, cod_dep FROM Pub.ggroup WITH (NOLOCK)' TO file;
        
    IMPORT TABLE FROM file() TO id, name, idParent;
    
    FOR id(INTEGER i) AND NOT itemGroup(TEXT (id(i))) DO NEW g = ItemGroup {
        id(g) <- ISTRING[100] (id(i));
    }
    
    FOR id(INTEGER i) AND ItemGroup g == itemGroup(TEXT (id(i))) DO {
        name(g) <- ISTRING[100] (name(i));
        parent(g) <- itemGroup(TEXT (idParent(i)));
    }
    
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
        EXEC 'SELECT cod_sgr, name_sgr, cod_group FROM Pub.sgroup WITH (NOLOCK)' TO file;
        
    IMPORT TABLE FROM file() TO id, name, idParent;
    
    FOR id(INTEGER i) AND NOT itemGroup(TEXT (id(i))) DO NEW g = ItemGroup {
        id(g) <- ISTRING[100] (id(i));
    }
    
    FOR id(INTEGER i) AND ItemGroup g == itemGroup(TEXT (id(i))) DO {
        name(g) <- ISTRING[100] (name(i));
        parent(g) <- itemGroup(TEXT (idParent(i)));
    }
    
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importItemGroup();
DESIGN integrationData { santaButtons { MOVE PROPERTY (importItemGroup()); } }

idGroup = DATA LOCAL INTEGER (INTEGER);

importLegalEntities 'Импорт организаций' () {

    LOCAL imported = BOOLEAN (LegalEntityGroup); 
    LOCAL unp = STRING[100](INTEGER);
    LOCAL okpo = STRING[100](INTEGER); 
    LOCAL phone = STRING[100](INTEGER);  
    LOCAL fax = STRING[100](INTEGER);  
    LOCAL director = STRING[100](INTEGER);  
    LOCAL comment = TEXT (INTEGER); 
    LOCAL intext = STRING[10](INTEGER);   
    LOCAL email = STRING[100](INTEGER);   
    LOCAL note = TEXT (INTEGER);  
    LOCAL address = TEXT (INTEGER);  
    LOCAL addressBank = TEXT (INTEGER);
    LOCAL bankAddress = TEXT (INTEGER);  
    LOCAL account = TEXT (INTEGER);  
    LOCAL corrAccount = STRING[20](INTEGER);
    LOCAL bic = TEXT (INTEGER);  
    
    LOCAL file = FILE ();
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
        EXEC 'SELECT cod_group, name_group FROM Pub.groups WITH (NOLOCK)' TO file;
    
    IMPORT TABLE FROM file() TO id, name;
    
    IF NOT itemGroup('all') THEN NEW g = LegalEntityGroup {
        id(g) <- 'all';
        name(g) <- 'Все';
    }
    
    FOR id(INTEGER i) AND NOT legalEntityGroup(TEXT (id(i))) DO NEW g = LegalEntityGroup {
        id(g) <- STRING[100](id(i));
    }
    
    FOR LegalEntityGroup g = legalEntityGroup(TEXT (id(INTEGER i))) DO {
        name(g) <- name(i);
        parent(g) <- legalEntityGroup('all');
        order(g) <- id(i);
    }
    
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
        EXEC 'SELECT cod_firm, SUBSTR(name_firm, 1, 100), cod_group, address, address, phone, fax, "e-mail", director, comment, intext, bank_addr, bank_acct, bank_acctk, MFO, SUBSTR(primech, 1, 100) FROM Pub.firms WITH (NOLOCK)' TO file;
    
    IMPORT TABLE FROM file() TO id, name, idGroup, unp, okpo, phone, fax, email, director, comment, intext, bankAddress, account, corrAccount, bic, note;
    
    FOR id(INTEGER i) AND NOT legalEntityNew(TEXT (id(i))) DO NEW s = LegalEntity {
        id(s) <- ISTRING[100] (id(i));
        
        IF NOT intext(i) == 'I' THEN NEW w = Warehouse {
            name(w) <- ISTRING[150](name(i));
            id(w) <- ISTRING[100](id(i));
            legalEntity(w) <- s;
            stockGroup(w) <- warehouseGroup('external');
        }
    }
    
    unp(INTEGER i) <- getWord(unp(i), ';', 1);
    okpo(INTEGER i) <- getWord(okpo(i), ';', 3);
    address(INTEGER i) <- (GROUP CONCAT getWord(comment(i), ';', INTEGER j) IF iterate(j, 2, wordCount(comment(i), ';')), ' ' ORDER j);
    addressBank(INTEGER i) <- (GROUP CONCAT getWord(bankAddress(i), ';', INTEGER j) IF iterate(j, 2, wordCount(bankAddress(i), ';')), ' ' ORDER j);
    
    unp(INTEGER i) <- NULL WHERE trim(unp(i)) == '';
    okpo(INTEGER i) <- NULL WHERE trim(okpo(i)) == '';
    address(INTEGER i) <- NULL WHERE trim(address(i)) == '';
    addressBank(INTEGER i) <- NULL WHERE trim(address(i)) == '';
    phone(INTEGER i) <- NULL WHERE trim(phone(i)) == '';
    fax(INTEGER i) <- NULL WHERE trim(fax(i)) == '';
    
    FOR INTEGER i = [GROUP MIN INTEGER ii BY bic(ii)](STRING[50] bic) AND NOT [GROUP MAX Bank b BY oldMFO(b)](bic) DO NEW b = Bank {
        oldMFO(b) <- STRING[10](bic);
        MFO(b) <- STRING[11](bic);
        name(b) <- STRING[200](getWord(bankAddress(i), ';', 1));
        dataAddress(b, DATE d) <- ISTRING[150] (addressBank(i)) WHERE d == currentDate();
    }
    
    FOR INTEGER i = [GROUP MIN INTEGER ii BY account(ii), id(ii)](STRING[50] number, INTEGER id) AND NOT accountID(number, TEXT (id)) DO NEW a = Bank.Account {
        number(a) <- number;
        legalEntity(a) <- legalEntityNew(TEXT (id));
        bank(a) <- GROUP MAX Bank b IF oldMFO(b) == bic(i);
    }
    
    FOR LegalEntity s = legalEntityNew(TEXT (id(INTEGER i))) DO {
        name(s) <- name(i);
        fullName(s) <- STRING[200](OVERRIDE getWord(comment(i), ';', 1) IF trim(getWord(comment(i), ';', 1)) != '', name(i));
        isCompany(s) <- intext(i) == 'B';
        isSupplier(s) <- idGroup(i) == 1 OR intext(i) == 'B';
        isCustomer(s) <- idGroup(i) == 2 OR intext(i) == 'B';
        legalEntityGroup(s) <- OVERRIDE legalEntityGroup(TEXT (idGroup(i))), legalEntityGroup('2');
        UNP(s) <- STRING[9](unp(i));
        OKPO(s) <- STRING[20](okpo(i));
        note(s) <- note(i);
        email(s) <- email(i) WHERE trim(email(i)) != '';
        dataPhone(s, DATE d) <- CONCAT ', ', phone(i), 'факс: ' + fax(i) WHERE d == currentDate();
        nameChief(s) <- director(i);
        IF NOT address(s, currentDate()) == address(i) THEN {
            dataAddress(s, DATE d) <- ISTRING[150] (address(i)) WHERE d == currentDate();
        }
    }
    
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importLegalEntities();
DESIGN integrationData { santaButtons { MOVE PROPERTY (importLegalEntities()); } }

idType = DATA LOCAL INTEGER (INTEGER);
//nameType = DATA LOCAL STRING[100](INTEGER);
//nameGroup = DATA LOCAL ISTRING[100](INTEGER);

defaultCompany = DATA LegalEntity();
nameDefaultCompany 'Организация по умолчанию' () = name(defaultCompany());

EXTEND FORM options PROPERTIES nameDefaultCompany();
DESIGN options {
    commons {
        MOVE PROPERTY (nameDefaultCompany());
    }
}

extId 'Код для импорта' = DATA STRING[100](Store) CHARWIDTH 10;
extId 'Код для импорта' = DATA STRING[100](Stock) CHARWIDTH 10;
storeExtId = GROUP AGGR Store s BY extId(s);
stockExtId = GROUP AGGR Stock s BY extId(s);

EXTEND FORM stores PROPERTIES READONLYIF isReadonly() extId(s) AFTER id(s), extId(d);
EXTEND FORM store PROPERTIES extId(s), extId(d) READONLY;
EXTEND FORM departmentStores PROPERTIES READONLY extId(d);

DESIGN store {
    row2 {
        MOVE PROPERTY (extId(s));
    }
}

changeStoreId 'Изменить ID' () {
    NEWSESSION {
        LOCAL id = STRING[100] (INTEGER);
        LOCAL new = STRING[100] (INTEGER);
        
        INPUT f = EXCELFILE  DO {
            IMPORT XLS FROM f TO id = A, new = C;
                
            FOR Store s = store(id(INTEGER i)) DO {
                extId(s) <- id(i);
                id(s) <- new(i);
            }
            FOR store(DepartmentStore s) == store(id(INTEGER i)) DO {
                extId(s) <- id(i);
                id(s) <- new(i);
            }
        }
        APPLY;
    }
}

importStores 'Импорт магазинов' () {
    
    LOCAL file = FILE ();
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
        EXEC 'SELECT cod_ob, SUBSTR(name,1,100) as test_name FROM Pub.obshop WITH (NOLOCK)' TO file;
    
    IMPORT TABLE FROM file() TO id, name;
    
    IF NOT chainStores('main') THEN NEW c = ChainStores {
        id(c) <- 'main';
        name(c) <- 'Санта Ритейл';
    }
    
    FOR id(INTEGER i) AND NOT storeType(TEXT (id(i))) DO NEW g = StoreType {
        id(g) <- ISTRING[100](id(i));
        chainStores(g) <- chainStores('main');
    }
    
    FOR StoreType g = storeType(TEXT (id(INTEGER i))) DO {
        name(g) <- name(i) + ' ' + id(i);
    }
    
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
        EXEC 'SELECT cod_shop, name_shop, cod_ob FROM Pub.shops WITH (NOLOCK)' TO file;
    
    IMPORT TABLE FROM file() TO id, name, idType;
    
    FOR id(INTEGER i) AND NOT storeExtId(TEXT (id(i))) DO NEW s = Store {
        extId(s) <- ISTRING[100] (id(i));
    }
    
    FOR id(INTEGER i) AND NOT stockExtId(TEXT (id(i))) DO NEW s = DepartmentStore {
        extId(s) <- ISTRING[100] (id(i));
        store(s) <- storeExtId(TEXT (id(i)));
    }
    
    FOR Store s = storeExtId(TEXT (id(INTEGER i))) DO {
        name(s) <- name(i) WHERE NOT name(s);
        storeType(s) <- storeType(TEXT (idType(i))) WHERE NOT storeType(s) ;
        legalEntity(s) <- OVERRIDE legalEntityNew(TEXT (idType(i))), defaultCompany() WHERE NOT legalEntity(s);
    }
    
    FOR DepartmentStore s = stockExtId(TEXT (id(INTEGER i))) DO {
        name(s) <- name(i);
    }
    
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importStores();
DESIGN integrationData { santaButtons { MOVE PROPERTY (importStores()); } }

importUOMs 'Импорт ед. измерений' () {
    
    LOCAL file = FILE ();
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
        EXEC 'SELECT cod_meas, name_meas FROM Pub.meas WITH (NOLOCK)' TO file;
    
    IMPORT TABLE FROM file() TO id, name;
    
    FOR id(INTEGER i) AND NOT UOM(TEXT (id(i))) DO NEW u = UOM {
        id(u) <- STRING[100](id(i));
        name(u) <- STRING[50](name(i));
        shortName(u) <- name(i);
        base(u) <- u;
        factor(u) <- 1;
    }
    
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importUOMs();
DESIGN integrationData { santaButtons { MOVE PROPERTY (importUOMs()); } }

supplier = ABSTRACT LegalEntity(Sku);
nameSupplier 'Поставщик' (Sku s) = name(supplier(s));

supplier = DATA LegalEntity(Item);
supplier(Item i) += supplier(i);
nameSupplier 'Поставщик' (Item i) = name(supplier(i)) IN itemBase;

EXTEND FORM item PROPERTIES nameSupplier(i);
EXTEND FORM items PROPERTIES READONLYIF isReadonly() nameSupplier(i);

dateCreated = DATA LOCAL DATE (INTEGER);
userCreated = DATA LOCAL STRING[50] (INTEGER);

overImportItems ABSTRACT LIST ();

lockedImportItemsMulti = DATA User ();
lockResultImportItemsMulti = DATA LOCAL NESTED BOOLEAN ();

useLabelName 'Импорт названия для ценника' = DATA BOOLEAN ();
   
importItems1 'Импорт товаров' () {
    
    LOCAL idUOM = INTEGER (INTEGER);
    LOCAL idGroup1 = INTEGER (INTEGER);
    LOCAL idGroup2 = INTEGER (INTEGER);
    LOCAL idGroup3 = INTEGER (INTEGER);
    LOCAL idLegalEntity = INTEGER (INTEGER);
    LOCAL passScales = BOOLEAN (INTEGER);
    LOCAL netWeight = NUMERIC[11,3](INTEGER);
    LOCAL volume = NUMERIC[11,3](INTEGER);
    LOCAL article = TEXT(INTEGER);
    
    LOCAL file = FILE ();
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
        EXEC 'SELECT cod_good, SUBSTR(name, 1, 162), SUBSTR(price_name, 1, 80), cod_meas, cod_sgr, cod_group, cod_dep, cod_firm, wflag, massa, volume, artic, CrDate, CrOper FROM Pub.katalog WHERE '
             + 'NOT cod_sgr=  \'990101\' WITH (NOLOCK)' TO file;
    
    IMPORT TABLE FROM file() TO idItem, name, name2, idUOM, idGroup1, idGroup2, idGroup3, idLegalEntity, passScales, netWeight, volume, article, dateCreated, userCreated;
    
    FOR idItem(INTEGER i) AND NOT item(trim(STRING[100] (idItem(i)))) DO NEW s = Item {
        id(s) <- trim(STRING[100](idItem(i)));
    }
    
    FOR Item s = item(trim(STRING[100] (idItem(INTEGER i)))) DO {
        caption(s) <- IF useLabelName() THEN replace(name2(i),'$',' ') ELSE name(i);
        itemGroup(s) <- OVERRIDE itemGroup(TEXT (idGroup1(i))), itemGroup(TEXT (idGroup2(i))), itemGroup(TEXT (idGroup3(i)));
        UOM(s) <- UOM(TEXT (idUOM(i)));
        supplier(s) <- legalEntityNew(TEXT (idLegalEntity(i)));
        passScales(s) <- TRUE WHERE passScales(i);
        split(s) <- TRUE WHERE passScales(i);
        netWeight(s) <- OVERRIDE netWeight(i) IF netWeight(i) > 0, volume(i);
        //description(s) <- article(i);
    }
    
    overImportItems();

    LOCAL vat = INTEGER (INTEGER);
    LOCAL dt = DATE (INTEGER);
    
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
            EXEC 'SELECT a.cod_good, a.dt, n."size" FROM Pub."arh-nds" AS a JOIN Pub.katalog AS k ON a.cod_good = k.cod_good JOIN Pub.nds AS n ON a.nds = n.nds WHERE NOT k.cod_sgr = \'990101\' WITH (NOLOCK)' TO file;
    
    IMPORT TABLE FROM file() TO idItem, dt, vat;
    
    FOR INTEGER ii = [GROUP LAST INTEGER i IF imported(i) ORDER dt(i), i BY item(TEXT (idItem(i)))](Item s) DO {
        VAT(s, Country c) <- (GROUP MAX Tax.Range r IF valueCurrentRate(r) == vat(ii) AND c == defaultCountry());
    }
    
    LOCAL idBarcode = STRING[15](INTEGER);
    LOCAL type = INTEGER (INTEGER);
    LOCAL level = INTEGER (INTEGER);
    LOCAL date = DATE (INTEGER);
    
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
            EXEC 'SELECT b.cod_good, b.bar_cod, b.type_bar, b.cod_level, b.dt FROM Pub.barcod as b JOIN Pub.katalog AS k ON b.cod_good = k.cod_good WHERE ' 
        + 'NOT k.cod_sgr = \'990101\' AND NOT b.cod_good = b.bar_cod WITH (NOLOCK)' TO file;
    
    IMPORT TABLE FROM file() TO idItem, idBarcode, type, level, date;
    
    FOR idBarcode(INTEGER i) AND NOT barcode(idBarcode(i), 2010_01_01) DO NEW b = Barcode {
        id(b) <- idBarcode(i);
    }
    FOR Barcode b = barcode(idBarcode(INTEGER i), 2010_01_01) AND Item s = item(TEXT (idItem(i))) DO {
        sku(b) <- s;
        dataDate(b) <- 2010_01_01; //date(i); Так нужно, чтобы не затирало штрихкоды созданные уценкой
        priceListType(b) <- priceListType('pt' + level(i)) IF level(i) > 1;  
    }
    FOR Barcode b = barcode(idBarcode(INTEGER i), 2010_01_01) AND (type(i) = 1 OR type(i) = 2) AND level(i) = 1 AND Item s = item(TEXT (idItem(i))) DO {
        dataBarcode(s) <- b;
    }

    setNoCancelInTransaction();
    APPLY;
}
   
lockImportItemsMulti(User object)  { 
    NEWSESSION {    
        lockResultImportItemsMulti() <- NULL;
        APPLY SERIALIZABLE {
            IF NOT object THEN
                RETURN;
            IF lockedImportItemsMulti() THEN {
                cancel();
            } ELSE {
                lockedImportItemsMulti() <- currentUser();
                lockResultImportItemsMulti() <- TRUE;
            }
        }
    }
}

unlockImportItemsMulti(User object)  { 
    NEWSESSION { 
        APPLY lockedImportItemsMulti() <- NULL;
    }
}

onStarted()+ { 
    NEWSESSION {
        lockedImportItemsMulti() <- NULL; 
        APPLY;      
    }
}

importItems 'Импорт товаров' ()  { 
    lockImportItemsMulti(currentUser()); 
    IF lockResultImportItemsMulti() THEN {
        TRY {  
        importItems1();
        } FINALLY {
            unlockImportItemsMulti(currentUser());                     
        }
    } ELSE {
        MESSAGE 'Уже выполняется импорт товаров. Подождите...' NOWAIT;    
    }
}

EXTEND FORM integrationData PROPERTIES () importItems, useLabelName;
DESIGN integrationData { 
    santaButtons { 
        NEW importItems {
            horizontal = TRUE;
            MOVE PROPERTY (importItems());
            MOVE PROPERTY (useLabelName());
        }
    } 
}

userContractSku = GROUP MAX UserContractSku c BY supplier(c), customer(c);

EXTEND CLASS AgreementPaymentType {
    paymentOrder 'Платежное поручение'
}  
showPaymentPeriod (PaymentCondition pc) += type(pc) == AgreementPaymentType.paymentOrder;
 
paymentPeriod (INTEGER days, INTEGER bank, AgreementPaymentType t) = GROUP MAX PaymentPeriod p IF percent(p) == 0 
    AND bank == (OVERRIDE 1 IF bankingDays(p), 0) BY countDays(p), type(paymentCondition(p));

importContract 'Импорт договоров' () {
    
    LOCAL number = STRING[15] (INTEGER);
    LOCAL dateFrom = DATE (INTEGER);
    LOCAL dateTo = DATE (INTEGER);
    LOCAL idLegalEntity = INTEGER (INTEGER);
    LOCAL idCompany = INTEGER (INTEGER);
    LOCAL comment = TEXT (INTEGER);
    LOCAL condition = TEXT (INTEGER);
    LOCAL idType = INTEGER (INTEGER);
    LOCAL idDeliv = INTEGER (INTEGER);
    LOCAL idPayVid = INTEGER (INTEGER);
    LOCAL delay = INTEGER (INTEGER);
    LOCAL idPayment = INTEGER (INTEGER);
    LOCAL idContract = INTEGER (INTEGER);
    
    LOCAL file = FILE ();
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
            EXEC 'SELECT ct_num, NumCt, DateCt, DateAct, cod_firm, cod_ob, comment, SUBSTR(SpecCond,1,1000), TypeCt, cod_deliv, CodePayVid, termpay, CodeTypeOpl, main_ct_num FROM Pub.Contract WITH (NOLOCK)' TO file;
    
    IMPORT TABLE FROM file() TO id, number, dateFrom, dateTo, idLegalEntity, idCompany, comment, condition, idType, idDeliv, idPayVid, delay, idPayment, idContract;
    
    FOR legalEntityNew(TEXT (idLegalEntity(INTEGER i))) AND NOT userContractSku(TEXT (id(i))) AND idContract(i) == 0 DO NEW c = UserContractSku {
        id(c) <- ISTRING[100](id(i));
    }
    
    FOR UserContractSku c == userContractSku(TEXT (id(INTEGER i))) AND idContract(i) == 0 DO {
        supplier(c) <- legalEntityNew(TEXT (idLegalEntity(i)));
        customer(c) <- legalEntityNew(TEXT (idCompany(i)));
        note(c) <- STRING[100](CONCAT '\n', comment(i), condition(i));
        currency(c) <- defaultCurrency();
        type(c) <- ContractSkuType.sale;
        dateFrom(c) <- OVERRIDE dateFrom(i), 2001_01_01;
        dateTo(c) <- dateTo(i);
        number(c) <- number(i);
    }
    
//    FOR legalEntity(TEXT (idLegalEntity(INTEGER i))) AND NOT agreement(TEXT (id(i))) AND NOT idContract(i) == 0 DO NEW c = Agreement {
//        id(c) <- ISTRING[100](id(i));
//    }
//    
//    FOR Agreement c == agreement(TEXT (id(INTEGER i))) AND NOT idContract(i) == 0 DO {
//        inSupplier(c, LegalEntity l) <- l == legalEntity(TEXT (idLegalEntity(i)));
//        inCustomer(c, LegalEntity l) <- l == legalEntity(TEXT (idCompany(i)));
//        name(c) <- ISTRING[100](comment(i));
//        note(c) <- ISTRING[500](condition(i));
//        currency(c) <- defaultCurrency();
//        fromDate(c) <- OVERRIDE dateFrom(i), 2001_01_01;
//        toDate(c) <- dateTo(i);
//        number(c) <- number(i);
//        fromTime(c) <- 00:00;
//        toTime(c) <- 23:59;
//    }


    LOCAL bank = INTEGER (INTEGER);
    LOCAL type = AgreementPaymentType(INTEGER);
    
    bank(INTEGER i) <- CASE WHEN idPayment(i) == 3 THEN 1 ELSE 0 WHERE imported(i);
    type(INTEGER i) <- CASE WHEN idPayVid(i) == 1 THEN AgreementPaymentType.advancePayment
                            WHEN idPayVid(i) == 3 THEN AgreementPaymentType.prepayment
                            WHEN idPayVid(i) == 5 THEN AgreementPaymentType.requirement
                            WHEN idPayVid(i) == 6 THEN AgreementPaymentType.paymentOrder
                            ELSE AgreementPaymentType.implement WHERE imported(i);

    FOR [GROUP SUM 1 IF imported(INTEGER i) BY delay(i), bank(i), type(i)](INTEGER d, INTEGER b, AgreementPaymentType t)  AND NOT paymentPeriod(d, b, t)  DO NEW p = PaymentCondition {
        type(p) <- t;
        bankingDays(p) <- b == 1;

        NEW pp = PaymentPeriod {
            paymentCondition(pp) <- p;
            percent(pp) <- 0;
            countDays(pp) <- d;
        }
    }

    FOR legalEntityNew(TEXT (idLegalEntity(INTEGER i))) AND UserContractSku c = userContractSku(TEXT (id(i))) DO {
        paymentCondition(c) <- paymentCondition(paymentPeriod(delay(i), bank(i), type(i)));
    }

    APPLY;
}

EXTEND FORM integrationData PROPERTIES importContract();
DESIGN integrationData { santaButtons { MOVE PROPERTY (importContract()); } }

property = DATA LOCAL INTEGER (INTEGER);
value = DATA LOCAL TEXT (INTEGER);

overImportItemAttribute ABSTRACT LIST ();

importItemAttribute 'Импорт доп. свойств товаров' () {
    
    LOCAL file = FILE ();
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
        EXEC 'SELECT cod_good, npar, SUBSTR(pvalue, 1, 1000) FROM Pub.subcard WITH (NOLOCK)' TO file;
    
    IMPORT TABLE FROM file() TO idItem, property, value;

    FOR [GROUP SUM 1 IF property(INTEGER i) == 71 BY value(i)](TEXT name) AND name != '' AND NOT brandName(name) DO NEW b = Brand {
        name(b) <- ISTRING[50] (name);
    }
    FOR property(INTEGER i) == 71 DO {
        brand(Item s) <- brandName(value(i)) WHERE s == item(TEXT (idItem(i)));
    }
    
    FOR [GROUP SUM 1 IF property(INTEGER i) == 4 BY value(i)](TEXT name) AND name != '' AND NOT manufacturerName(name) DO NEW m = Manufacturer {
        name(m) <- ISTRING[200] (name);
    }
    FOR property(INTEGER i) == 4 DO {
        manufacturer(Item s) <- manufacturerName(value(i)) WHERE s == item(TEXT (idItem(i)));
    }
    
    FOR [GROUP SUM 1 IF property(INTEGER i) == 5 BY upper(value(i))](TEXT name) AND name != '' AND NOT (GROUP MAX Country c IF upper(name(c)) == name) DO NEW c = Country {
        name(c) <- ISTRING[50] (name);
    }
    FOR property(INTEGER i) == 5 DO {
        country(Item s) <- (GROUP MAX Country c IF upper(name(c)) == upper(value(i))) WHERE s == item(TEXT (idItem(i)));
    }
    
    FOR property(INTEGER i) == 7 DO {
        conditionsText(Item s) <- ISTRING[100] (value(i)) WHERE s = item(TEXT (idItem(i)));
    }
    
    FOR property(INTEGER i) == 41 AND (value(i) == 'yes' OR value(i) == '1') DO {
        banPurchase(Item s) <- TRUE WHERE s = item(TEXT (idItem(i)));
    }
    
    FOR property(INTEGER i) == 16 AND NOT Purchase.packBarcode(item(TEXT (idItem(i)))) DO NEW b = Barcode {
        sku(b) <- item(TEXT (idItem(i)));
        Purchase.packBarcode(Item s) <- b WHERE s = item(TEXT (idItem(i)));
    }
    
    FOR property(INTEGER i) == 16 AND Purchase.packBarcode(item(TEXT (idItem(i)))) AND NOT Sale.packBarcode(item(TEXT (idItem(i)))) DO {
        Sale.packBarcode(Item s) <- Purchase.packBarcode(s) WHERE s = item(TEXT (idItem(i)));
    }
    
    FOR property(INTEGER i) == 16 AND Barcode b = Purchase.packBarcode(item(TEXT (idItem(i)))) DO {
        amount(b) <- NUMERIC[14,3](value(i));
    }
    
    FOR [GROUP SUM 1 IF property(INTEGER i) == 503 BY value(i)](TEXT name) AND name != '' AND NOT packTypeName(name) DO NEW p = PackType {
        name(p) <- ISTRING[200] (name);
    }
    
    FOR property(INTEGER i) == 503 AND PackType p = packTypeName(value(i)) DO {
        packType(Item s) <- packTypeName(value(i)) WHERE s = item(TEXT (idItem(i)));
    }
    
    FOR property(INTEGER i) == 61 DO {
        description(Item s) <- TEXT (value(i)) WHERE s = item(TEXT (idItem(i)));
    }
    
    overImportItemAttribute();
    
    setNoCancelInTransaction();
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importItemAttribute();
DESIGN integrationData { santaButtons { MOVE PROPERTY (importItemAttribute()); } }

id 'Номер' = DATA ISTRING[100](Range.Range);
range = GROUP MAX Range.Range r BY id(r);

importRange 'Импорт ассортиментных матриц' () {
    
    LOCAL stores = TEXT (INTEGER);
    
    LOCAL file = FILE ();
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
        EXEC 'SELECT num_as, name, SUBSTR(seq_shop,1,1000) FROM Pub.as1 WITH (NOLOCK)' TO file;
    
    IMPORT TABLE FROM file() TO id, name, stores;
    
    IF NOT rangeLevel('1') THEN NEW l = RangeLevel {
        name(l) <- '1';
    }
    
    FOR id(INTEGER i) AND NOT range(TEXT (id(i))) DO NEW r = Range.Range {
        id(r) <- ISTRING[100](id(i));
    }
    
    FOR Range.Range r = range(TEXT (id(INTEGER i))) DO {
        name(r) <- name(i);
        in(r, RangeLevel l) <- l == rangeLevel('1');
        inData(r, ItemGroup g) <- g == itemGroup('all');
        dataLevel(r, Store s, DATE d) <- rangeLevel('1') WHERE [GROUP SUM 1 IF iterate(INTEGER j, 1, wordCount(stores(i), ',')) BY getWord(stores(i), ',', j)](extId(s)) AND d = 2019_01_01;
        
        IF NOT [GROUP SUM 1 BY range(RangeRev rr)](r) THEN NEW rr = RangeRev {
            range(rr) <- r;
            dateTime(rr) <- 2019_01_01_00:00;
        }
    }
    
    LOCAL idRange = INTEGER (INTEGER);
    
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
        EXEC 'SELECT num_as, cod_good FROM Pub.asskat WITH (NOLOCK)' TO file;
    
    IMPORT TABLE FROM file() TO idRange, idItem;
    
    LOCAL imported = BOOLEAN (RangeRev, Item);
    
    FOR Item sk = sku(TEXT (idItem(INTEGER i))) AND RangeRev r = [GROUP LAST RangeRev rr ORDER rr BY range(rr)](range(TEXT (idRange(i)))) DO {
    
        level(r, sk) <- rangeLevel('1');
        imported(r, sk) <- TRUE;
    }
    
    level(RangeRev r, Item s) <- NULL WHERE r IS RangeRev AND s IS Item AND NOT imported(r, s);
    
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importRange();
DESIGN integrationData { santaButtons { MOVE PROPERTY (importRange()); } }

customerStock = DATA Stock();
nameCustomerStock 'Склад' () = name(customerStock());

CONSTRAINT customerStock() AND NOT isCompany(legalEntity(customerStock())) CHECKED BY customerStock[] MESSAGE 'Склад не компании';

importInit 'Импорт остатков' () {
    
    LOCAL quantity = NUMERIC[16,3](INTEGER);
    LOCAL quantityID = NUMERIC[16,3](NUMERIC[13,0]);
    
    LOCAL file = FILE ();
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
        EXEC 'SELECT cod_good, quantityF FROM Pub.art WHERE cod_shop = \''+ extId(customerStock()) +'\' AND NOT (quantityF = 0 AND last_cost_price = 0) WITH (NOLOCK)' TO file;
    
    IMPORT TABLE FROM file() TO idItem, quantity;
    
    quantityID(NUMERIC[13,0] c) <- NULL; 
    FOR NUMERIC[16,3] q = [GROUP MAX quantity(INTEGER i) BY idItem(i)](NUMERIC[13,0] s) DO {
        quantityID(s) <- q;
    }
    
    LOCAL price = NUMERIC[16,3](INTEGER);
    LOCAL priceID = NUMERIC[16,3](NUMERIC[13,0]);
    
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
        EXEC 'SELECT cod_good, retail_price FROM Pub.artprice WHERE cod_shop = \''+ extId(customerStock()) +'\' AND cod_level = 1 WITH (NOLOCK)' TO file;
    
    IMPORT TABLE FROM file() TO idItem, price;
    
    priceID(NUMERIC[13,0] c) <- NULL; 
    FOR NUMERIC[16,3] p = [GROUP MAX price(INTEGER i) BY idItem(i)](NUMERIC[13,0] s) AND p > 0 DO {
        priceID(s) <- p;
    }
    
    LOCAL date = DATE (INTEGER);
    LOCAL number = ISTRING[50] (INTEGER);
    LOCAL cost = NUMERIC[16,3](INTEGER);
    LOCAL idSupplier = INTEGER (INTEGER);
    LOCAL time = INTEGER (INTEGER);
    LOCAL imported = BOOLEAN (Purchase.UserInvoiceDetail);
    LOCAL expiryDate = DATE (INTEGER);
    LOCAL manufactureDate = DATE (INTEGER);
    
    FOR quantityID(NUMERIC[13,0] s) AND NOT sku(TEXT (s)) DO {
        logToFile('importGestori_init', 'Не найден товар! ' + CONCAT ', ', 'Код: ' + s, 'Кол-во: ' + quantityID(s), 'Цена: ' + priceID(s) + '\r\n');
    }
    
    // импорт приходов
    LOCAL iItem = NUMERIC[13,0](INTEGER);
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
        EXEC 'SELECT pr2.cod_good, pr2.dt_nakl, pr2.num_nakl, SUBSTR(pr1.num_doc, 1, 50) , pr2.cost_price, pr1.cod_firm, pr1.ModTime, pr2.sal_date, pr2.made_date FROM Pub.pr2 LEFT JOIN Pub.pr1 ON pr2.num_nakl = pr1.num_nakl WHERE pr2.cod_shop = \''
        + extId(customerStock()) +'\' WITH (NOLOCK)' TO file;
        
    IMPORT TABLE FROM file() TO iItem, date, id, number, cost, idSupplier, time, expiryDate, manufactureDate;

    LOCAL index = INTEGER (NUMERIC[13,0]);
    index(NUMERIC[13,0] s) <- GROUP LAST INTEGER k ORDER date(k), k WHERE iItem(k) = s;
    
    quantityID(NUMERIC[13,0] s) <- NULL WHERE quantity(s) AND NOT sku(TEXT(s));

    LOCAL idInvoice = STRING[100] (NUMERIC[13,0]);
    idInvoice(NUMERIC[13,0] s) <- (OVERRIDE TEXT(id(index(s))), 'NN' + id(customerStock())) WHERE quantityID(s);
    
    LOCAL idDetail = STRING[100] (NUMERIC[13,0]);
    idDetail(NUMERIC[13,0] s) <- (CONCAT '-', (s IF quantityID(s)), idInvoice(s)) WHERE quantityID(s);

    FOR [GROUP SUM 1 BY idInvoice(NUMERIC[13,0] s)](ISTRING[100] id) AND NOT Purchase.userInvoice(id) DO NEW i = Purchase.UserInvoice {
        id(i) <- id;
    }
    
    FOR NUMERIC[13,0] s = [GROUP MIN NUMERIC[13,0] is BY idInvoice(is)](STRING[100] id) AND Purchase.UserInvoice i = Purchase.userInvoice(id) DO {       
        supplier(i) <- OVERRIDE legalEntityNew(TEXT (idSupplier(index(s)))), legalEntity(customerStock());
        supplierStock(i) <- OVERRIDE stock(TEXT (idSupplier(index(s)))), minStock(legalEntityNew(TEXT (idSupplier(index(s)))));
        customer(i) <- legalEntity(customerStock());
        customerStock(i) <- customerStock();
        number(i) <- STRING[48](right(number(index(s)), length(number(index(s))) - 2));
        series(i) <- STRING[2](left(number(index(s)), 2));
        date(i) <- OVERRIDE date(index(s)), 2019_01_01;
        time(i) <- OVERRIDE sumSeconds(00:00, time(index(s))), 00:00;
        isPosted(i) <- TRUE;
        operation(i) <- Purchase.operation('initial');
        createShipment(i) <- createShipment(Purchase.operation('initial')); 
        createPricing(i) <- createPricing(Purchase.operation('initial')); 
        isClosed(i) <- TRUE;
    }

    FOR idDetail(NUMERIC[13,0] s) AND NOT Purchase.userInvoiceDetail(idDetail(s)) 
        AND NOT (quantityID(s) == 0 AND date(index(s)) < subtract(currentDate(), 404)) DO NEW d = Purchase.UserInvoiceDetail {
        
        id(d) <- idDetail(s);
    } 
        
    FOR Purchase.UserInvoiceDetail d = Purchase.userInvoiceDetail(idDetail(NUMERIC[13,0] s)) AND Sku sku = sku(TEXT (s)) DO {
        userInvoice(d) <- Purchase.userInvoice(idInvoice(s));
        sku(d) <- sku;
        quantity(d) <- quantityID(s);
        shipmentQuantity(d) <- quantityID(s);
        VAT(d) <- VAT(sku); 
        retailVAT(d) <- VAT(sku);
        price(d) <- NUMERIC[16,4](cost(index(s)));
        retailPrice(d) <- NUMERIC[16,4](priceID(s));
        shipmentPrice(d) <- IF isContainer(sku) THEN NUMERIC[16,4](cost(index(s))) ELSE NUMERIC[16,4](priceID(s));
        expiryDate(d) <- expiryDate(index(s));
        manufactureDate (d) <- manufactureDate(index(s));
        imported(d) <- TRUE;
    }
        
    // Временное решение :
    // импорт товар с уценкой
    
    // товары
    LOCAL bItem = NUMERIC[13,0](INTEGER);
    LOCAL bBarcode = STRING[15] (INTEGER);
    
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
            EXEC 'SELECT cod_good, bar_cod FROM Pub.barcod WHERE cod_level = 3 AND NOT cod_good = bar_cod WITH (NOLOCK)' TO file;
    
    IMPORT TABLE FROM file() TO bItem, bBarcode;

    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
        EXEC 'SELECT ch_pr2.cod_good, ch_pr2.new_retail_price, ch_pr2.dt_akt, ch_pr2.dt_akt FROM Pub.ch_pr2 ' + 
            'LEFT JOIN Pub.ch_pr1 ON ch_pr2.num_akt = ch_pr1.num_akt WHERE ch_pr1.cod_shop = ' + extId(customerStock()) + ' AND cod_level = 3 WITH (NOLOCK)' TO file;
    LOCAL ucode = NUMERIC[16,3] (INTEGER); 
    LOCAL uprice = NUMERIC[16,3] (INTEGER);
    LOCAL udate = DATE (INTEGER);
    
    IMPORT TABLE FROM file() TO ucode, uprice, udate;

    LOCAL indexU = INTEGER (NUMERIC[13,0]);
    indexU(NUMERIC[13,0] s) <- GROUP LAST INTEGER k ORDER udate(k), k WHERE ucode(k) = s;
    
    LOCAL barcode = STRING[15] (NUMERIC[13,0]);
    barcode(NUMERIC[13,0] s) <- [GROUP MAX bBarcode(INTEGER ii) BY bItem(ii)](s) IF indexU(s) AND item(STRING[100](s));

    skipGenerateBarcode() <- TRUE;
    FOR STRING[15] barcode = barcode(NUMERIC[13,0] s) AND NOT item(STRING[100](s + '_u')) NEW ni = Item DO {
        copyDisparityData(item(STRING[100](s)), ni);
        id(ni) <- STRING[100](s + '_u');
        NEW b = Barcode {
            sku(b) <- ni;
            id(b) <- barcode;
            dataDate(b) <- currentDate();
        }
    }
    
    LOCAL idDetailU = STRING[100] (NUMERIC[13,0]);
    idDetailU(NUMERIC[13,0] s) <- (CONCAT '-', (s IF quantityID(s)), idInvoice(s), '_u') WHERE barcode(s);
    
    FOR idDetailU(NUMERIC[10,3] s) AND NOT Purchase.userInvoiceDetail(idDetailU(s))
        AND NOT (quantityID(s) == 0 AND date(index(s)) < subtract(currentDate(), 404)) DO NEW d = Purchase.UserInvoiceDetail {
        
        id(d) <- idDetailU(s);
    } 

    FOR Purchase.UserInvoiceDetail d = Purchase.userInvoiceDetail(idDetailU(NUMERIC[10,3] s)) AND Sku sku = sku(TEXT (s) + '_u') DO {
        userInvoice(d) <- Purchase.userInvoice(idInvoice(s));
        sku(d) <- sku;
        quantity(d) <- 0;
        shipmentQuantity(d) <- 0;
        VAT(d) <- VAT(sku); 
        retailVAT(d) <- VAT(sku);
        price(d) <- NUMERIC[16,4](cost(index(s)));
        retailPrice(d) <- NUMERIC[16,4](uprice(indexU(s)));
        shipmentPrice(d) <- NUMERIC[16,4](uprice(indexU(s)));
        imported(d) <- TRUE;
    }
    // конец импорта товаров с уценкой
    
    FOR customerStock(Purchase.UserInvoiceDetail d) == customerStock() AND id(d) AND operation(d) == Purchase.operation('initial') AND NOT imported(d) DO {
        quantity(d) <- 0.0;
        shipmentQuantity(d) <- 0.0;
    }
    
    DELETE Purchase.UserInvoice i WHERE customerStock(i) == customerStock() AND operation(i) == Purchase.operation('initial') AND NOT countInvoiceDetail(i);
    
    setNoCancelInTransaction();
    APPLY;
}

EXTEND FORM integrationData PROPERTIES () nameCustomerStock, importInit;
DESIGN integrationData { 
    santaButtons { 
        NEW importInit {
            horizontal = TRUE;
            alignment = STRETCH;
            MOVE PROPERTY (importInit());
            MOVE PROPERTY (nameCustomerStock()) { alignment = CENTER; }
        } 
        
    } 
}

daysSupplier 'Кол-во дней для импорта прайсов поставщика' = DATA INTEGER ();
dateFromS () = sum(currentDate(), -daysSupplier());
dateFromST () = toDateDDMMYY(dateFromS());

EXTEND FORM integrationData PROPERTIES () daysSupplier;

importPriceListSupplier 'Импорт прайсов поставщика' () {
    
    LOCAL number = ISTRING[50] (INTEGER);
    LOCAL begin = DATE (INTEGER);
    LOCAL end = DATE (INTEGER);
    LOCAL idContract = INTEGER (INTEGER);
    LOCAL idMainContract = INTEGER (INTEGER);
    LOCAL idCompany = INTEGER (INTEGER);
    LOCAL idStockGroup = INTEGER (INTEGER);
    LOCAL idStocks = ISTRING[1000] (INTEGER);
    LOCAL note = ISTRING[255] (INTEGER);
    LOCAL closed = ISTRING[1] (INTEGER);
    LOCAL paymentDelay = INTEGER (INTEGER);
    LOCAL imported = BOOLEAN (UserPriceList);
    LOCAL contractType = INTEGER (INTEGER);
    
    logToFile('importGestori', 'importPriceList_Docs_Select_started');
    
    LOCAL file = FILE ();
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
        EXEC 'SELECT ct_spec, NumSpec, DateSpec, DateEnd, spec1.ct_num, Contract.main_ct_num, spec1.cod_firm, spec1.cod_ob, SUBSTR(seq_shop,1,100), primech, StsDoc, Contract.TypeCt FROM Pub.spec1, Pub.Contract WHERE spec1.ct_num = Contract.ct_num AND (spec1.DateEnd >= TO_DATE(\''
            + toDateISO(dateFromS()) + '\',\'YYYY-MM-DD\') OR spec1.DateEnd IS NULL) AND (Contract.DateAct >= TO_DATE(\'' + toDateISO(dateFromS()) + '\',\'YYYY-MM-DD\') OR Contract.DateAct IS NULL) AND spec1.stsdoc = \'$\' WITH (NOLOCK)' TO file;

    logToFile('importGestori', 'importPriceList_Docs_Select_complete');
    
    IMPORT TABLE FROM file() TO id, number, begin, end, idContract, idMainContract, idCompany, idStockGroup, idStocks, note, closed, contractType;

    logToFile('importGestori', 'importPriceList_Docs_Import_complete:' + GROUP SUM 1 IF imported(INTEGER i));
    
    FOR id(INTEGER i) AND NOT userPriceList(TEXT (id(i))) DO NEW p = UserPriceList {
        id(p) <- ISTRING[100](id(i));
    }
    
    FOR UserPriceList p == userPriceList(TEXT (id(INTEGER i))) DO {
        
        operation(p) <- IF contractType(i) = 3 THEN PriceList.operation('supplierPromotion') ELSE PriceList.operation('supplier'); 
        number(p) <- ISTRING[28] (number(i));
        date(p) <- begin(i);
        time(p) <- 00:00;
        isPosted(p) <- TRUE;
        fromDate(p) <- begin(i);
        fromTime(p) <- 00:00;
        toDate(p) <- end(i);
        company(p) <- legalEntityNew(TEXT (idCompany(i)));
        note(p) <- note(i);
        allStocks(p) <- NULL;
        imported(p) <- TRUE;
        dataIn(p, StoreType g) <- TRUE IF g == stockGroup(TEXT (idStockGroup(i))) AND NOT idStocks(i) != '';
        dataIn(p, Stock st) <- TRUE IF isWordInCSV(extId(st), idStocks(i));
    }
    
    APPLY NESTED LOCAL;
    
    LOCAL index = INTEGER (INTEGER);
    LOCAL price = NUMERIC[16,3](INTEGER);
    LOCAL idPriceList = INTEGER (INTEGER);
    LOCAL imported = BOOLEAN (UserPriceListDetail);
    
    logToFile('importGestori', 'importPriceList_Spec_Select_started');

    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
            EXEC 'SELECT cod_good, NumPos, PriceDoc, spec2.ct_spec, Contract.TypeCt FROM Pub.spec2, Pub.spec1, Pub.Contract WHERE spec1.ct_spec = spec2.ct_spec AND spec1.ct_num = Contract.ct_num AND (spec1.DateEnd >= TO_DATE(\'' 
            + toDateISO(dateFromS()) + '\',\'YYYY-MM-DD\') OR spec1.DateEnd IS NULL) AND (Contract.DateAct >= TO_DATE(\'' + toDateISO(dateFromS()) + '\',\'YYYY-MM-DD\') OR Contract.DateAct IS NULL) AND spec1.stsdoc = \'$\' WITH (NOLOCK)' TO file;

    logToFile('importGestori', 'importPriceList_Spec_Select_complete');
    
    IMPORT TABLE FROM file() TO idItem, index, price, idPriceList, contractType;

    logToFile('importGestori', 'importPriceList_Spec_Import_complete:' + GROUP SUM 1 IF imported(INTEGER i));
    
    LOCAL idDetail = ISTRING[100](INTEGER);
    idDetail(INTEGER i) <- CONCAT '-', idItem(i), STRING[14](index(i)) WHERE imported(i); 
    
    FOR [GROUP SUM 1 BY idDetail(INTEGER r), STRING (idPriceList(r))](ISTRING[100] id, ISTRING[100] idP) AND userPriceList(idP)  
        AND NOT userPriceListDetail(id, userPriceList(idP)) DO NEW d = UserPriceListDetail {
        
        id(d) <- id;
        userPriceList(d) <- userPriceList(idP);
    }
    
    FOR UserPriceListDetail d = userPriceListDetail(idDetail(INTEGER i), userPriceList(TEXT (idPriceList(i)))) DO {
        sku(d) <- item(TEXT (idItem(i)));
        price(d, LedgerPriceListType t) <- NUMERIC[16,4](price(i)) WHERE t = (IF contractType(i) = 3 THEN dataPriceListType('supplierPromotion') ELSE dataPriceListType('supplier'));
        dataIndex(d) <- index(i);
        imported(d) <- TRUE;
    }

    APPLY NESTED LOCAL;
    
    logToFile('importGestori', 'importPriceList_Delete_started');
    
    DELETE UserPriceList p WHERE toDate(p) >= dateFromS() AND id(operation(p)) == 'supplier' AND NOT imported(p);
    
    APPLY;

}

EXTEND FORM integrationData PROPERTIES importPriceListSupplier();
DESIGN integrationData { 
    santaButtons { 
        NEW supermagSup {
            horizontal = TRUE;
            MOVE PROPERTY (importPriceListSupplier());
            MOVE PROPERTY (daysSupplier()) { caption = 'Кол-во дней'; alignment = CENTER; }
        } 
    } 
}

dateFromOrder 'Дата с' = DATA DATE ();

customerStockOrder = DATA Stock();
nameCustomerStockOrder 'Склад' () = name(customerStockOrder());
idCustomerStockOrder 'Склад' () = extId(customerStockOrder());

importOrder 'Импорт заказов' () {
    
    LOCAL date = DATE (INTEGER);
    LOCAL date2 = DATE (INTEGER);
    LOCAL closed = BOOLEAN (INTEGER);
    LOCAL idSupplier = INTEGER (INTEGER);
    LOCAL comment = ISTRING[255] (INTEGER);
    
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
            EXEC 'SELECT num_nakl, dt_doc, dt_nakl, fflag, cod_firm, primech FROM Pub.zakp1 WHERE cod_shop = \'' + idCustomerStockOrder() + '\' AND zakp1.dt_doc >= TO_DATE(\'' 
            + toDateISO(dateFromOrder())  + '\',\'YYYY-MM-DD\') OR (zakp1.dt_doc IS NULL AND zakp1.dt_nakl >= TO_DATE(\'' 
            + toDateISO(dateFromOrder())  + '\',\'YYYY-MM-DD\')) WITH (NOLOCK)' TO file;
    
    IMPORT TABLE FROM file() TO id, date, date2, closed, idSupplier, comment;
    
    FOR id(INTEGER i) AND NOT userOrder(TEXT (id(i))) DO NEW o = UserOrder {
        id(o) <- ISTRING[100](id(i));
    }
    
    FOR UserOrder o == userOrder(TEXT (id(INTEGER i))) DO {
        
        number(o) <- ISTRING[28](id(i));
        operation(o) <- Purchase.operation('purchaseStoreSupplier');
        isPosted(o) <- closed(i);
        supplier(o) <- legalEntityNew(ISTRING[100] (idSupplier(i)));
        supplierStock(o) <- OVERRIDE stock(TEXT (idSupplier(i))), minStock(legalEntityNew(ISTRING[100] (idSupplier(i))));
        customerStock(o) <- stockExtId(ISTRING[100] (idCustomerStockOrder()));
        customer(o) <- legalEntity(stockExtId(ISTRING[100] (idCustomerStockOrder())));
        date(o) <- OVERRIDE date(i), date2(i);
        time(o) <- 00:00;
        shipmentDate(o) <- date2(i);
    }
    
    LOCAL quantity = NUMERIC[16,3] (INTEGER);
    LOCAL price = NUMERIC[16,3] (INTEGER);
    LOCAL index = INTEGER (INTEGER);
    LOCAL idOrder = INTEGER (INTEGER);
    LOCAL idDetail = ISTRING[100](INTEGER);
    LOCAL imported = BOOLEAN (UserPriceListDetail);

    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
            EXEC 'SELECT cod_good, quantity_f, cost_price, nn, zakp2.num_nakl FROM Pub.zakp2, Pub.zakp1 WHERE zakp1.num_nakl = zakp2.num_nakl AND quantity > 0 AND (zakp1.dt_doc >= TO_DATE(\'' 
            + toDateISO(dateFromOrder())  + '\',\'YYYY-MM-DD\') OR (zakp1.dt_doc IS NULL AND zakp1.dt_nakl >= TO_DATE(\'' 
            + toDateISO(dateFromOrder())  + '\',\'YYYY-MM-DD\'))) AND zakp1.cod_shop = \'' + idCustomerStockOrder() + '\' WITH (NOLOCK)' TO file;
    
    IMPORT TABLE FROM file() TO idItem, quantity, price, index, idOrder;

    idDetail(INTEGER i) <- CONCAT '-', index(i), idItem(i), STRING[10](idOrder(i)) WHERE imported(i); 

    FOR userOrder(TEXT (idOrder(INTEGER i))) AND NOT userOrderDetail(idDetail(i)) DO NEW d = UserOrderDetail {
        id(d) <- idDetail(i);
    }
    
    FOR UserOrderDetail d = userOrderDetail(idDetail(INTEGER i)) DO {
        userOrder(d) <- userOrder(TEXT (idOrder(i)));
        sku(d) <- item(TEXT (idItem(i)));
        quantity(d) <- quantity(i);
        price(d) <- NUMERIC[16,4](price(i));
        dataIndex(d) <- index(i);
    }
    
    setNoCancelInTransaction();
    APPLY;
}

EXTEND FORM integrationData PROPERTIES () importOrder, dateFromOrder, nameCustomerStockOrder;
DESIGN integrationData { 
    santaButtons { 
        NEW orders {
            horizontal = TRUE;
            MOVE PROPERTY (importOrder());
            MOVE PROPERTY (dateFromOrder()) { alignment = CENTER; }
            MOVE PROPERTY (nameCustomerStockOrder()) { alignment = CENTER; }
        } 
    } 
}

idOperations 'Коды операции' = DATA STRING[50] () CHARWIDTH 10;

importPriceLists 'Импорт прайсов' () {
    
    LOCAL date = DATE (INTEGER);
    LOCAL price = NUMERIC[16,3] (INTEGER);
    LOCAL level = INTEGER (INTEGER);
    LOCAL note = TEXT (INTEGER);
    
    logToFile('importGestori', 'importPriceList_Docs_Select_started');
    
    LOCAL file = FILE ();
    EXTERNAL SQL 'jdbc:datadirect:openedge://' + host() + ':' + port() + ';DatabaseName=' + base() + ';user=' + login() + ';password=' + password() 
        EXEC 'SELECT ch_pr2.dt_akt, ch_pr2.num_akt, ch_pr2.new_retail_price, ch_pr2.cod_level, ch_pr2.cod_good, ch_pr1.name_doc FROM Pub.ch_pr2 ' + 
            'LEFT JOIN Pub.ch_pr1 ON ch_pr2.num_akt = ch_pr1.num_akt WHERE ch_pr1.cod_shop = ' + extId(customerStock()) + ' AND cod_level IN (' + idOperations() + ') WITH (NOLOCK)' TO file;

    IMPORT TABLE FROM file() TO date, id, price, level, idItem, note;

    FOR [GROUP SUM 1 BY STRING[100] (id(INTEGER i))](STRING[100] id) AND NOT userPriceList(id) DO NEW p = UserPriceList {
        id(p) <- id;
    }
    
    FOR INTEGER i == [GROUP MIN INTEGER ii BY userPriceList(TEXT (id(ii)))](UserPriceList p) DO {
        
        operation(p) <- PriceList.operation('op' + level(i));
        number(p) <- ISTRING[28] (id(i));
        date(p) <- date(i);
        time(p) <- 00:00;
        isPosted(p) <- TRUE;
        fromDate(p) <- date(i);
        fromTime(p) <- 00:00;
        note(p) <- ISTRING[500](note(i));
        allStocks(p) <- NULL;
        imported(p) <- TRUE;
        dataIn(p, Stock st) <- TRUE WHERE st = customerStock();
    }
    
    LOCAL idDetail = ISTRING[100](INTEGER);
    idDetail(INTEGER i) <- CONCAT '-', id(i), STRING[14](idItem(i)) WHERE imported(i); 
    
    FOR [GROUP SUM 1 BY idDetail(INTEGER i), TEXT (id(i))](STRING[100] idDetail, STRING id)  AND userPriceList(id) AND NOT userPriceListDetail(idDetail, id) DO NEW d = UserPriceListDetail {
        id(d) <- idDetail;
        userPriceList(d) <- userPriceList(id);
    }
    
    FOR INTEGER i == [GROUP MIN INTEGER ii BY userPriceListDetail(idDetail(ii), userPriceList(TEXT (id(ii))))](UserPriceListDetail d) DO {
        sku(d) <- item(TEXT (idItem(i)));
        price(d, LedgerPriceListType t) <- NUMERIC[16,4](price(i)) WHERE t == dataPriceListType('pt' + level(i));
        imported(d) <- TRUE;
    }
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importPriceLists(), idOperations();
DESIGN integrationData { 
    santaButtons { 
        NEW importPriceLists AFTER importInit {
            horizontal = TRUE;
            alignment = STRETCH;
            MOVE PROPERTY (importPriceLists());
            MOVE PROPERTY (idOperations()) { alignment = CENTER; }
        } 
    } 
}