MODULE GlovoOrder;

REQUIRE System, SaleInternetOrder, DeliveryOption, GlovoMenu, SaleInternetOrderIntegration, SaleInternetPicking;

NAMESPACE Glovo;

GROUP delivery_address;
GROUP courier;
GROUP customer;
GROUP invoicing_details : customer;

store_id = DATA LOCAL STRING();
partner_discounted_products_total = DATA LOCAL STRING();
minimum_basket_surcharge = DATA LOCAL STRING();
latitude = DATA LOCAL STRING();
label = DATA LOCAL STRING();
longitude = DATA LOCAL STRING();
pick_up_code = DATA LOCAL STRING();
partner_discounts_products = DATA LOCAL STRING();
is_picked_up_by_customer = DATA LOCAL STRING();
cutlery_requested = DATA LOCAL STRING();
order_time = DATA LOCAL STRING();
estimated_total_price = DATA LOCAL STRING();
estimated_pickup_time = DATA LOCAL STRING();
utc_offset_minutes = DATA LOCAL STRING();
quantity = DATA LOCAL STRING(INTEGER);
price = DATA LOCAL STRING(INTEGER);
name = DATA LOCAL STRING(INTEGER);
productsAttributes = DATA LOCAL INTEGER(INTEGER);
quantity1 = DATA LOCAL STRING(INTEGER);
price1 = DATA LOCAL STRING(INTEGER);
name1 = DATA LOCAL STRING(INTEGER);
id = DATA LOCAL STRING(INTEGER);
id1 = DATA LOCAL STRING(INTEGER);
purchased_product_id = DATA LOCAL STRING(INTEGER);
order_code = DATA LOCAL STRING();
delivery_fee = DATA LOCAL STRING();
name2 = DATA LOCAL STRING();
phone_number = DATA LOCAL STRING();
bundled_orders = DATA LOCAL STRING(INTEGER);
total_customer_to_pay = DATA LOCAL STRING();
allergy_info = DATA LOCAL STRING();
currency = DATA LOCAL STRING();
customer_cash_payment_amount = DATA LOCAL STRING();
order_id = DATA LOCAL STRING();
payment_method = DATA LOCAL STRING();
name3 = DATA LOCAL STRING();
company_name = DATA LOCAL STRING();
company_address = DATA LOCAL STRING();
tax_id = DATA LOCAL STRING();
phone_number1 = DATA LOCAL STRING();
hash = DATA LOCAL STRING();

FORM importOrderGlovo FORMEXTID 'null'
    PROPERTIES() store_id, partner_discounted_products_total, minimum_basket_surcharge, pick_up_code, partner_discounts_products, is_picked_up_by_customer, cutlery_requested, order_time, estimated_total_price, estimated_pickup_time, utc_offset_minutes, order_code, delivery_fee, total_customer_to_pay, allergy_info, currency, customer_cash_payment_amount, order_id, payment_method
    PROPERTIES() IN delivery_address latitude, label, longitude

    OBJECTS products = INTEGER
    PROPERTIES(products) quantity, price, name, id1 EXTID 'id', purchased_product_id
    FILTERS imported(products)

    OBJECTS attributes = INTEGER
    FILTERS productsAttributes(attributes) == products
    PROPERTIES(attributes) quantity1 EXTID 'quantity', price1 EXTID 'price', name1 EXTID 'name', id
    FILTERS imported(attributes)
    PROPERTIES() IN courier name2 EXTID 'name', phone_number

    OBJECTS bundled_orders = INTEGER
    PROPERTIES(bundled_orders) bundled_orders EXTID 'value'
    FILTERS imported(bundled_orders)
    PROPERTIES() IN customer name3 EXTID 'name', phone_number1 EXTID 'phone_number', hash
    PROPERTIES() IN invoicing_details company_name, company_address, tax_id;

    
glovoCarrier = GROUP MAX Carrier r IF id(r) = 'glovo';
itemById (STRING id) = GROUP MAX Item i IF id(i) == id;
stockOrder (STRING id) = ABSTRACT DepartmentStore;

//строки заказа
quantityGlovoOrder(Item i, INTEGER qty) = ABSTRACT NUMERIC[16,5];
priceGlovoOrder(Item i, NUMERIC[16,4] price) = ABSTRACT NUMERIC[16,4];

//исключительно в рамках тестирования
qtyGlovo 'К-во glovo' = DATA STRING (InternetOrderDetail);
priceGlovo 'Цена glovo(копеек)' = DATA STRING (InternetOrderDetail);

EXTEND FORM internetOrder
    PROPERTIES (d) READONLY SHOWIF loggingGlovo() AND carrier(o) = glovoCarrier() qtyGlovo, priceGlovo ;


//создание заказа
createOrder(FILE f){
    IF loggingGlovo() THEN {
        fileToString(f);
        logToFile('glovo', CONCAT ' : ', 'IN query', resultString());
    }
    IMPORT importOrderGlovo FROM f;
    NEW order = InternetOrder{
        date(order) <- currentDate();
        time(order) <- currentTime();
        idAggregator(order) <- order_id();
        carrier(order) <- glovoCarrier();
        courierName(order) <- name2();
        courierPhone(order) <- STRING[30](phone_number());
        paymentTypeInternetOrder(order) <- PaymentTypeInternetOrder.prepayment;
        paymentCardSumInternetOrder(order) <- NUMERIC[18,4](NUMERIC[18,4](estimated_total_price())/100);
        deliveryDate(order) <- DATE (estimated_pickup_time());
        deliveryTimeToInternetOrder(order) <- toTime(DATETIME(estimated_pickup_time()));
        nameInternetCustomer(order) <- STRING[255](name3());
        phoneInternetCustomer(order) <- STRING[100](phone_number1());
        addressInternetCustomer(order) <- STRING[400](label());
        customerComment(order) <- allergy_info();
        supplierStock(order) <- stockOrder(store_id());
        isPosted(order) <- TRUE;
        uuid(order) <- STRING(LONG(order));
        FOR id1(INTEGER products) NEW detail = InternetOrderDetail DO{
            internetOrder(detail) <- order;
            sku(detail) <- itemById(id1(products));
            qtyGlovo(detail) <- quantity(products);
            priceGlovo(detail) <- price(products);
            quantity(detail) <-quantityGlovoOrder(sku(detail), INTEGER (quantity(products))) WHERE sku(detail) IS Item;
            price(detail) <- priceGlovoOrder(sku(detail), NUMERIC[16,4](price(products))/100) WHERE sku(detail) IS Item; //цена в центах/копейках    
        }
    }
    APPLY;
    IF canceled() THEN {
        EXPORT JSON FROM result = 'error', description = applyMessage();
    }
    ELSE EXPORT JSON FROM status = 'ok';      
}
@@noauth;

cancel_reason = DATA LOCAL STRING();
payment_strategy = DATA LOCAL STRING();

FORM updateOrder FORMEXTID 'null'
    PROPERTIES() store_id, cancel_reason, payment_strategy, order_id;

updateOrder(FILE f){
    IF loggingGlovo() THEN {
        fileToString(f);
        logToFile('glovo', CONCAT ' : ', 'IN update query', resultString());
    }
    IMPORT updateOrder FROM f;
    IF (GROUP MAX InternetOrder order IF idAggregator(order) = order_id()) THEN {
        status(GROUP MAX InternetOrder order IF idAggregator(order) = order_id()) <- StatusInternetOrder.closed;
    }    
    APPLY ;
    EXPORT JSON FROM status = 'ok';  
}@@noauth;


importOrder(FILE f){
    IMPORT importOrderGlovo FROM f;
    NEW order = InternetOrder{
        date(order) <- DATE(order_time());
        time(order) <- toTime(DATETIME(order_time()));
    }
}

statusGlovo (InternetOrder o) = CASE 
    WHEN status(o) = StatusInternetOrder.isPicking THEN 'ACCEPTED'
    WHEN status(o) = StatusInternetOrder.picked THEN 'READY_FOR_PICKUP'
    WHEN status(o) = StatusInternetOrder.delivery THEN 'OUT_FOR_DELIVERY'
;

updateStatusOrder 'Обновление статуса заказа' (InternetOrder order){
    TRY {
        LOCAL f = FILE ();
        LOCAL answer = FILE ();
        LOCAL headersGlovo = TEXT(STRING[100]);
        headersGlovo('Authorization') <- token();
        headersGlovo('content-type') <- 'application/json';
        EXPORT JSON FROM status = statusGlovo(order) TO f;
        EXTERNAL HTTP CONCAT '', urlServer(), 'webhook/stores/', storeIdGlovo(supplierStock(order)) ,'/orders/', idAggregator(order),
            '/status' HEADERS headersGlovo PARAMS f() TO answer;
    }
    CATCH {
        MESSAGE CONCAT '\n', 'Ошибка отправки статуса в glovo', messageCaughtException();
    }
}

EXTEND FORM internetOrder
    PROPERTIES (o) updateStatusOrder SHOWIF carrier(o) = glovoCarrier();

DESIGN internetOrder{
    headerRow1{
        MOVE PROPERTY (updateStatusOrder(o));
    }
}

// --------------------------------------- Модификация заказа -------------------------------- //

removed_purchases (InternetOrder o) = CONCAT '', '[', (GROUP CONCAT idExt(sku(InternetOrderDetail d)) IF sku(d) IS Item 
    AND internetOrder(d) = o AND pickingQuantity(d) != quantity(d), ',' ORDER d), ']';
 
FORM modifyOrder FORMEXTID 'null'
    OBJECTS o = InternetOrder PANEL EXTID 'null'
    PROPERTIES removed_purchases(o)
    
    OBJECTS d = InternetOrderDetail EXTID 'added_products'
    PROPERTIES = idSku(d) EXTID 'id', pickingQuantity(d) EXTID 'quantity',
        = attributesGroup(sku(d)) IF sku(d) IS Item EXTID 'attributes'
    
    FILTERS internetOrder(d) = o AND pickingQuantity(d) != quantity(d) AND pickingQuantity(d) > 0
;

modifyOrder 'Обновление заказа'(InternetOrder o){
    LOCAL f = FILE();
    EXPORT modifyOrder OBJECTS o = o JSON TO f;
    LOCAL answer = FILE ();
    LOCAL headersGlovo = TEXT(STRING[100]);
    headersGlovo('Authorization') <- token();
    headersGlovo('content-type') <- 'application/json';
    EXTERNAL HTTP POST CONCAT '', urlServer() , '/webhook/stores/', storeIdGlovo(supplierStock(o)), '/orders/' + idAggregator(o) +'/replace_products'
        HEADERS headersGlovo PARAMS f() TO answer;
} 
 
EXTEND FORM internetOrders
    PROPERTIES (o) modifyOrder TOOLBAR DRAW o;