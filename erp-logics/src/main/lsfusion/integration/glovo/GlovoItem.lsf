MODULE GlovoItem;

REQUIRE GlovoMenu, GlovoOrder;

NAMESPACE Glovo;

CLASS WeightUnit 'Весовой юнит';
TABLE scaleStep(WeightUnit);

name 'Наименование(выгружаемое)' = DATA STRING[50] (WeightUnit);
coeff 'Коэффициет пересчёта' = DATA NUMERIC[5,3] (WeightUnit);

FORM weightUnit 'Весовой юнит'
    OBJECTS unit = WeightUnit PANEL 
    PROPERTIES (unit) name, coeff
    
    EDIT WeightUnit OBJECT unit
;

FORM weightUnits 'Весовые юниты'
    OBJECTS unit = WeightUnit
    PROPERTIES (unit) READONLY name, coeff
    PROPERTIES (unit) NEWSESSION NEW, EDIT, DELETE
    ORDERS coeff(unit)
    
    LIST WeightUnit OBJECT unit
;

DESIGN weightUnits { BOX { size = (600, 400); } }

weightUnit = DATA WeightUnit (Item);
nameWeightUnit 'Весовой юнит (Glovo) ' (Item i) = name(weightUnit(i));

EXTEND FORM item
    PROPERTIES (i) nameWeightUnit;
 
DESIGN item{
    itemDetail{
        NEW glovo{
            caption = 'glovo';
            MOVE PROPERTY (nameWeightUnit(i));
        }
    }
}

EXTEND FORM items
    PROPERTIES (i) READONLYIF isReadonly() nameWeightUnit;
    
//-------------------- Выгрузка меню ------------------------//

isWeight 'Весовой' (Item i) = TRUE IF(id(UOM(i)) = 'кг.');
priceGlovo 'Цена глово' (Item i, DepartmentStore d) = ABSTRACT NUMERIC[16,4]; //при подключении модуля переопределить
nameItem (Item i)= ABSTRACT ISTRING;
nameUnit (Item i) = ISTRING (replace(replace(replace((OVERRIDE nameItem(i), name(i)), '1КГ', name(weightUnit(i))), '1 кг', 
    name(weightUnit(i))), '1кг', name(weightUnit(i))));
priceUnit 'Цена юнита' (Item i, DepartmentStore d) = NUMERIC[16,4](round(priceGlovo(i, d) * coeff(weightUnit(i)), 2));
nameGlovo (Item i) += IF isWeight(i) AND weightUnit(i) THEN nameUnit(i) ELSE (OVERRIDE nameItem(i), name(i));

currentPriceGlovo (Item i, DepartmentStore d) += IF isWeight(i) AND weightUnit(i) THEN priceUnit(i,d)
    ELSE priceGlovo(i,d);
    
//-------------------- Обработка заказов ------------------------//
quantityGlovoOrder(Item i, INTEGER qty) += IF isWeight(i) AND weightUnit(i) THEN NUMERIC[16,5](round(qty*coeff(weightUnit(i)),2))
    ELSE NUMERIC[16,5](qty);
priceGlovoOrder(Item i, NUMERIC[16,4] price) += IF isWeight(i) AND weightUnit(i) THEN NUMERIC[16,4](price/coeff(weightUnit(i)))
    ELSE price;

customModifyOrder (InternetOrder o) += TRUE IF (GROUP SUM 1 IF weightUnit(sku(InternetOrderDetail d)) AND internetOrder(d) = o);
pickingQuantityUnit(InternetOrderDetail d) = IF isWeight((sku(d))) AND weightUnit(sku(d)) THEN 1;

diffQuantityUnit (InternetOrderDetail d) = TRUE 
    IF (round0(pickingQuantity(d) / OVERRIDE coeff(weightUnit(sku(d))), 1) != 
    round0(quantity(d) / OVERRIDE coeff(weightUnit(sku(d))), 1));
diffQuantityUnit (InternetOrder o) = GROUP SUM 1 IF diffQuantityUnit(InternetOrderDetail d) AND internetOrder(d) = o;
    
removed_purchasesUnit (InternetOrder o) =  CONCAT '', '[', (GROUP CONCAT purchasedProductId(InternetOrderDetail d) 
    IF sku(d) IS Item AND internetOrder(d) = o AND diffQuantityUnit(d), ',' ORDER d), ']';

FORM modifyOrderUnit FORMEXTID 'null'
    OBJECTS o = InternetOrder PANEL EXTID 'null'
    PROPERTIES removed_purchasesUnit(o) EXTID 'removed_purchases'
    
    OBJECTS d = InternetOrderDetail EXTID 'added_products'
    PROPERTIES = idSku(d) EXTID 'id',  = round0(pickingQuantity(d) / (OVERRIDE coeff(weightUnit(sku(d))), 1)) EXTID 'quantity',
        = attributesGroup(sku(d)) IF sku(d) IS Item EXTID 'attributes'
    
    FILTERS internetOrder(d) = o AND diffQuantityUnit(d) AND pickingQuantity(d) > 0
;

modifyOrder(InternetOrder o) +{
    IF customModifyOrder(o) THEN{
        LOCAL f = FILE();
        EXPORT modifyOrderUnit OBJECTS o = o JSON TO f;
        LOCAL answer = FILE ();
        LOCAL headersGlovo = TEXT(STRING[100]);
        headersGlovo('Authorization') <- token();
        headersGlovo('content-type') <- 'application/json';
        loggingGlovo(f(), 'unitModifyOrder ' + idAggregator(o));
        EXTERNAL HTTP POST CONCAT '', urlServer() , '/webhook/stores/', storeIdGlovo(supplierStock(o)), '/orders/' + idAggregator(o) +'/replace_products'
            HEADERS headersGlovo PARAMS f() TO answer;
        loggingGlovo(answer(), 'answer unitModifyOrder ' + idAggregator(o));
    }
} 

WHEN SETCHANGED (status(InternetOrder o)) AND status(o) = StatusInternetOrder.picked AND carrier(o) = glovoCarrier()
    AND customModifyOrder(o) DO{
    TRY {
        IF diffQuantityUnit(o) THEN modifyOrder(o);
        updateStatusOrder(o);
    }
    CATCH {
        MESSAGE CONCAT '\n', 'Ошибка обновления заказа c юнитами в glovo', messageCaughtException();
    }
}