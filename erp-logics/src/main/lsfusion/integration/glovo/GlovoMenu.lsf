MODULE GlovoMenu;

REQUIRE DeliveryOption, ItemInternet, LogTools;

NAMESPACE Glovo;

//Параметры Glovo
glovoFtpFolderName 'Директория на FTP для Glovo' = DATA STRING[60] ();
token 'Токен отправки Glovo' = DATA STRING ();
idExt (Item i) = '"' + id(i) +'"';
internetGroupType = ABSTRACT GroupType ();
loggingGlovo 'Включить логирование Glovo' = DATA BOOLEAN ();
testUrlServer 'Url тестового сервера' = DATA STRING[255] ();
prodUrlServer 'Url сервера' = DATA STRING[255] ();
testMode 'Тестовый режим' = DATA BOOLEAN ();
inToken 'Токен получения Glovo' = DATA STRING ();

@defineLogRotate(glovo, 5, weekly);

urlServer = IF testMode() THEN testUrlServer() ELSE prodUrlServer();

EXTEND FORM integrationData
    PROPERTIES() inToken, testUrlServer, prodUrlServer, testMode, glovoFtpFolderName, token, loggingGlovo
;
    
DESIGN integrationData{
    delivery{
        NEW glovo{
            caption = 'Glovo';
            MOVE PROPERTY (glovoFtpFolderName());
            MOVE PROPERTY (token());
            MOVE PROPERTY (loggingGlovo());
            MOVE PROPERTY (inToken());
            MOVE PROPERTY (testUrlServer());
            MOVE PROPERTY (prodUrlServer());
            MOVE PROPERTY (testMode());
        }
    }
} 

onlineGlovo = ABSTRACT BOOLEAN (Item, DepartmentStore);

CLASS AttributeGlovo 'Аттрибут Glovo';
id (AttributeGlovo a)= LONG(a);
name(AttributeGlovo a) = IF a IS AttributeGlovo THEN 'Стандарт';
priceImpact(AttributeGlovo a) = IF a IS AttributeGlovo THEN 0;
selectedByDefault(AttributeGlovo a) = IF a IS AttributeGlovo THEN TRUE;

CLASS AttributeGroupGlovo 'Группы аттрибутов Glovo';
id (AttributeGroupGlovo a)= LONG(a);
name(AttributeGroupGlovo a) = IF a IS AttributeGlovo THEN 'Стандарт';
attributeGroup = DATA AttributeGroupGlovo (AttributeGlovo);
attributes(AttributeGroupGlovo ag) = CONCAT '','[', (GROUP CONCAT STRING(id(AttributeGlovo i)) IF 
    attributeGroup(i) == ag, ',' ORDER id(i)), ']';

//свойства для экспорта
nameGlovo (Item i) = ABSTRACT ISTRING;  // наименование для выгрузки глово, весовой товар
productsByGroup (Group g, DepartmentStore s)= CONCAT '','[', (GROUP CONCAT STRING(idExt(Item i)) IF 
    customGroup[Stock.CustomGroupType,Item.Item](internetGroupType(), i) = g AND onlineGlovo(i,s), ',' ORDER id(i)), ']';
productsInGroup (Group g, DepartmentStore s) = GROUP SUM 1 IF customGroup[Stock.CustomGroupType,Item.Item](internetGroupType(), Item i) = g AND onlineGlovo(i,s); 
productsInGroupChild (Group g, DepartmentStore s) = GROUP SUM 1 IF (productsInGroup(Group c, s) AND level(c,g));
    
groupByGroup (Group g)= CONCAT '','[', (GROUP CONCAT STRING(name(Group i)) IF 
    parent(i) == g AND groupType(g) = internetGroupType(), ',' ORDER id(i)), ']';
imageUrl  = ABSTRACT STRING (Group);

available(Item i, DepartmentStore s) = ABSTRACT BOOLEAN;
currentPriceGlovo 'Цена' (Item i, DepartmentStore s) = ABSTRACT NUMERIC[16,4];
isParentGroup (Group g) = GROUP LAST Group ig ORDER ig WHERE parent(ig) == g;
attributesGroup (Item i) = IF i IS Item THEN '[]';

description (Item i) = ABSTRACT STRING;


FORM glovoMenu
    OBJECTS store = DepartmentStore PANEL 
    
    OBJECTS ag = AttributeGroupGlovo EXTID 'attribute_groups'
    PROPERTIES (ag) id, name, attributes
    
    OBJECTS a = AttributeGlovo EXTID 'attributes'
    PROPERTIES (a) id, name, priceImpact, selectedByDefault
   
    OBJECTS collection = Group EXTID 'collections'
    PROPERTIES (collection) name EXTID 'name', positionOver EXTID 'position', imageUrl EXTID 'image_url'
    FILTERS onlineCategory(collection) AND NOT parent(collection) AND productsInGroupChild(collection, store)
    
    OBJECTS section = Group EXTID 'sections'
    PROPERTIES (section) name EXTID 'name', positionOver EXTID 'position'
    PROPERTIES productsByGroup(section, store) EXTID 'products' 
    FILTERS parent(section) = collection AND productsInGroup(section, store)
    FILTERS onlineCategory(section)
    
    OBJECTS i = Item EXTID 'products'
    PROPERTIES (i) nameGlovo EXTID 'name', id EXTID 'id'
    PROPERTIES = OVERRIDE urlHttpAccess(i), 'https://i.imgur.com/Qj5MlEH.png' EXTID 'image_url'
    PROPERTIES available(i,store), currentPriceGlovo(i,store) EXTID 'price'
    PROPERTIES = OVERRIDE description(i), CONCAT ' ','Описание продукта', name(i) EXTID 'description', attributesGroup(i) EXTID 'attributes_groups'
    FILTERS onlineGlovo(i, store) 
;

CLASS MenuGlovo 'Загрузка меню glovo';
TABLE menuGlovo(MenuGlovo);

store = DATA DepartmentStore (MenuGlovo);
nameStore 'Магазин' (MenuGlovo g) = name(store(g));
dateTimeForm 'Сформировано' = DATA DATETIME (MenuGlovo);
storeId 'ID магазина' = DATA STRING (MenuGlovo); 
transactionId 'ID' = DATA STRING (MenuGlovo);
status 'Статус' = DATA STRING (MenuGlovo);
fileMenu 'Файл' = DATA JSONFILE (MenuGlovo);
url 'Url' = DATA STRING (MenuGlovo);

storeIdGlovo 'ID магазина в системе Glovo'= ABSTRACT STRING (DepartmentStore); // id магазина в системе glovo. Переопределить
afterFillMenu ABSTRACT LIST (DepartmentStore);


sendMenuToFtp(MenuGlovo m){
    WRITE fileMenu(m) TO CONCAT '', ftpConnectionString(), glovoFtpFolderName(), 'menu', LONG(store(m));
    url(m) <- CONCAT '', pathHttpAccess(), glovoFtpFolderName(),'menu', LONG(store(m)), '.json';   
}

fillMenu 'Заполнить меню glovo ' (DepartmentStore s){
    LOCAL f = JSONFILE();
    NEW menu = MenuGlovo{
        store(menu) <- s;
        storeId(menu) <- storeIdGlovo(s);
        dateTimeForm(menu) <- currentDateTime();
        EXPORT glovoMenu OBJECTS store = s JSON TO f;
        fileMenu(menu) <- f();
        sendMenuToFtp(menu);
        afterFillMenu(s);
    }
    APPLY;
}


customMenuFill = ABSTRACT BOOLEAN ();

fillMenu 'Заполнить меню glovo' ABSTRACT LIST (DepartmentStore, MenuGlovo);

fillMenu (DepartmentStore s, MenuGlovo menu)+{
    IF NOT customMenuFill() THEN{
        LOCAL f = JSONFILE();
        store(menu) <- s;
        storeId(menu) <- storeIdGlovo(s);
        dateTimeForm(menu) <- currentDateTime();
        EXPORT glovoMenu OBJECTS store = s JSON TO f;
        fileMenu(menu) <- f();
        sendMenuToFtp(menu);
        afterFillMenu(s);
    }
}

transaction_id = DATA LOCAL STRING();

FORM menuUpdate FORMEXTID 'null'
    PROPERTIES() transaction_id;

updateMenu 'Загрузить меню' (MenuGlovo menu){
    LOCAL headers = TEXT(STRING[100]);
    headers('Authorization') <- token();
    headers('content-type') <- 'application/json';
    LOCAL f = JSONFILE ();
    LOCAL answer = FILE();
    EXPORT JSON FROM menuUrl = url(menu) TO f;
    EXTERNAL HTTP POST CONCAT '', urlServer(), 'webhook/stores/', storeId(menu), '/menu' HEADERS headers
        PARAMS f() TO answer;
    IMPORT menuUpdate JSON FROM answer(); 
    dateTimeForm(menu) <- currentDateTime();
    transactionId(menu) <- transaction_id();
}

last_updated_at = DATA LOCAL STRING();
details = DATA LOCAL STRING(INTEGER);
status = DATA LOCAL STRING();

FORM statusMenu FORMEXTID 'null'
    PROPERTIES() transaction_id, last_updated_at, status

    OBJECTS details = INTEGER
    PROPERTIES(details) details EXTID 'value'
    FILTERS imported(details)
;

details 'Подробности' = DATA STRING (MenuGlovo);

updateStatusMenu 'Обновить статус' (MenuGlovo g){
    LOCAL headers = TEXT(STRING[100]);
    headers('Authorization') <- token();
    headers('content-type') <- 'application/json';
    LOCAL f = JSONFILE ();
    LOCAL answer = FILE();
    EXTERNAL HTTP GET CONCAT '', urlServer() , 'webhook/stores/' + storeId(g) +'/menu/' + transactionId(g) HEADERS headers
        TO answer;
    IMPORT statusMenu JSON FROM answer();
    status(g) <- status();
    details(g) <- GROUP CONCAT details(INTEGER d), ',' ORDER d;
    APPLY;
}

FORM glovoMenuFill 'Glovo'
    OBJECTS d = DepartmentStore
    PROPERTIES (d) READONLY name, storeIdGlovo
    
    FILTERS isOnline(d)
    
    OBJECTS m = MenuGlovo
    PROPERTIES fillMenu(d) TOOLBAR DRAW d
    PROPERTIES (m) READONLY nameStore, transactionId, dateTimeForm, status, fileMenu, url, details
    PROPERTIES (m) updateMenu, updateStatusMenu
    FILTERS store(m) = d
;
        

//выгрузка меню по временным интерваллам
CLASS TimeUpdateGlovo 'Время обновления';
TABLE timeUpdateGlovo (TimeUpdateGlovo);

timeStart 'Начало'= DATA TIME (TimeUpdateGlovo) IN id;
timeFinish 'Окончание' = DATA TIME (TimeUpdateGlovo) IN id;

menuGlovo = DATA MenuGlovo(DepartmentStore, DATE, TimeUpdateGlovo);
EXTEND FORM integrationData
    OBJECTS tug = TimeUpdateGlovo
    PROPERTIES (tug) timeStart, timeFinish
    PROPERTIES (tug) NEW, EDIT, DELETE
;

DESIGN integrationData{
    glovo{
        MOVE BOX (tug);
    }
}

//обновление доступности

FORM bulkUpdateItems FORMEXTID 'null'
    OBJECTS store = DepartmentStore PANEL 
    
    OBJECTS products = Item
    PROPERTIES id(products), currentPriceGlovo(products,store) EXTID 'price', 
        = IF available(products, store) THEN TTRUE ELSE TFALSE EXTID 'available'
    FILTERS onlineGlovo(products, store)
    
    PROPERTIES = IF store IS DepartmentStore THEN '[]' EXTID 'attributes'
;

idTranscactionBulkUpdateItems = DATA STRING[255] (DepartmentStore);
statusTranscactionBulkUpdateItems = DATA STRING[255] (DepartmentStore);
messageErrorTransactions = DATA LOCAL NESTED STRING ();

bulkUpdateItems(DepartmentStore d) {
    IF idTranscactionBulkUpdateItems(d) THEN{
        headers('Authorization') <- token();
        headers('content-type') <- 'application/json';
        LOCAL answer = FILE();
        EXTERNAL HTTP GET CONCAT '', urlServer(),  'webhook/stores/' + storeIdGlovo(d) + '/menu/updates/', 
            idTranscactionBulkUpdateItems(d) HEADERS headers TO answer;
        IMPORT statusMenu JSON FROM answer();
        fileToString(answer());
        logToFile('glovo', CONCAT ' : ', 'VERIFY', id(d), nameStore(d), resultString());
        statusTranscactionBulkUpdateItems(d) <- status();
        IF transaction_id() = idTranscactionBulkUpdateItems(d) AND status() = 'SUCCESS' THEN {
        
            idTranscactionBulkUpdateItems(d) <- NULL;
            statusTranscactionBulkUpdateItems(d) <- NULL;
            logToFile('glovo', CONCAT ' : ', status(), id(d), nameStore(d), resultString());
            
        }
        IF transaction_id() = idTranscactionBulkUpdateItems(d) AND 
            (status() = 'PARTIALLY_PROCESSED' OR status() = 'NOT_PROCESSED' OR status() = 'GLOVO_ERROR') THEN {
            
            messageErrorTransactions() <- CONCAT '\n', messageErrorTransactions(), 
                (CONCAT ' : ', status(), last_updated_at(), id(d), nameStore(d), (GROUP CONCAT details(INTEGER i), ',' ORDER i));
            idTranscactionBulkUpdateItems(d) <- NULL;
            
        }      
    }
    IF NOT idTranscactionBulkUpdateItems(d) THEN {
        EXPORT bulkUpdateItems OBJECTS store = d JSON;
        LOCAL headers = TEXT(STRING[100]);
        LOCAL answer = FILE();
        headers('Authorization') <- token();
        headers('content-type') <- 'application/json';
        EXTERNAL HTTP POST CONCAT '', urlServer(),  'webhook/stores/' + storeIdGlovo(d) + '/menu/updates' HEADERS headers
            PARAMS exportFile() TO answer;
        IMPORT menuUpdate JSON FROM answer();
        fileToString(answer());
        logToFile('glovo', CONCAT ' : ', 'SEND', id(d), nameStore(d), resultString());
        idTranscactionBulkUpdateItems(d) <- STRING[255](transaction_id());
        statusTranscactionBulkUpdateItems(d) <- NULL;
    }
}


updateGlovoMenu 'Обновление меню glovo'(){
    LOCAL NESTED actualTimeUpdate = TimeUpdateGlovo();
    actualTimeUpdate() <- GROUP MAX TimeUpdateGlovo t IF timeStart(t) <= currentTime() AND timeFinish(t) >= currentTime();
    FOR isOnline(DepartmentStore d) AND storeIdGlovo(d) AND actualTimeUpdate() 
        AND NOT menuGlovo(d, currentDate(), actualTimeUpdate()) NEW menu = MenuGlovo DO {{
        fillMenu(d, menu);
        menuGlovo(d, currentDate(), actualTimeUpdate()) <- menu;
        updateMenu(menu);
        APPLY;
        }
    }
    FOR isOnline(DepartmentStore d) AND storeIdGlovo(d) AND actualTimeUpdate() 
        AND MenuGlovo menu = menuGlovo(d, currentDate(), actualTimeUpdate()) DO{
            IF NOT status(menu) = 'SUCCESS' THEN updateStatusMenu(menu);
    }
    //обновление доступности товаров
    NEWSESSION {
        messageErrorTransactions() <- NULL;
        FOR isOnline(DepartmentStore d) AND storeIdGlovo(d) DO bulkUpdateItems(d);
        APPLY;
        IF messageErrorTransactions() THEN throwException(messageErrorTransactions());
    }
}

EXTEND FORM glovoMenuFill
    PROPERTIES updateGlovoMenu() TOOLBAR
;