MODULE ImportAxaptaLegalEntity;

REQUIRE ImportAxapta, LegalEntityRu, Warehouse;

NAMESPACE ImportAxapta;

//Группы поставщиков
sqlImportSupplierLegalEntityGroup 'Импорт из SQL' = DATA BOOLEAN ();

importSupplierLegalEntityGroup 'Импорт групп поставщиков' () {
    NEWSESSION {
        LOCAL file = FILE ();    
        LOCAL id = STRING[100] (INTEGER);
        LOCAL name = ISTRING[100] (INTEGER);
        
        IF sqlImportSupplierLegalEntityGroup() THEN {
            EXTERNAL SQL connectionString() 
                EXEC 'SELECT VENDGROUP, NAME FROM VENDGROUP WHERE DATAAREAID = $1' 
                PARAMS areaID() TO file; 
        } ELSE {
            INPUT f = CSVFILE DO {
                IMPORT CSV ';' NOHEADER FROM f TO id, name;
            }
        }
              
        FOR id(INTEGER i) AND NOT legalEntityGroup(id(i)) DO NEW g = LegalEntityGroup {
            id(g) <- ISTRING[100] (id(i));
        }
        
        FOR id(INTEGER i) AND LegalEntityGroup g == legalEntityGroup(id(i)) DO {
            name(g) <- name(i);
            parent(g) <- legalEntityGroup('suppliers');
        }       
        APPLY;
    }
}

EXTEND FORM integrationData
    PROPERTIES() importSupplierLegalEntityGroup, sqlImportSupplierLegalEntityGroup
;

DESIGN integrationData{
    axaptaButtons{
        NEW importSupplierLegalEntityGroupCont {
            type = CONTAINERH;
            MOVE PROPERTY (importSupplierLegalEntityGroup());
            MOVE PROPERTY (sqlImportSupplierLegalEntityGroup());
        }
    }
}

//Поставщики
sqlImportSupplierLegalEntity 'Импорт из SQL' = DATA BOOLEAN ();

importSupplierLegalEntity 'Импорт поставщиков' () {
    NEWSESSION {
        LOCAL file = FILE ();    
        LOCAL id = STRING[100] (INTEGER);
        LOCAL idGroup = STRING[100] (INTEGER);
        LOCAL name = STRING[150] (INTEGER);
        LOCAL address = STRING[150] (INTEGER);
        LOCAL phone = STRING[100] (INTEGER);
        LOCAL email = STRING[400] (INTEGER);
        LOCAL inn = STRING[12] (INTEGER);
        LOCAL kpp = STRING[9] (INTEGER);
        
        IF sqlImportSupplierLegalEntity() THEN {
            EXTERNAL SQL connectionString() 
                EXEC 'SELECT ACCOUNTNUM, NAME, ADDRESS, PHONE, VENDGROUP, EMAIL, INN_RU, KPP_RU FROM VENDTABLE WHERE DATAAREAID = $1' 
                PARAMS areaID() TO file; 
        } ELSE {
            INPUT f = CSVFILE DO {
                IMPORT CSV ';' NOHEADER NOESCAPE FROM f TO id, name, address, phone, idGroup, email, inn, kpp;
            }
        }
              
        FOR id(INTEGER i) AND NOT legalEntity(id(i)) DO NEW g = LegalEntity {
            id(g) <- (id(i));
            NEW st = Warehouse {
                id(st) <- CONCAT '', 'Склад', (id(i));
                legalEntity(st) <- g;
                warehouseGroup(st) <- warehouseGroup('external');
            }
        }
        
        FOR id(INTEGER i) AND LegalEntity l == legalEntity(id(i)) DO {
            name(l) <- name(i);
            dataAddress(l, currentDate()) <- address(i) WHERE NOT address(l) = address(i);
            dataPhone(l, currentDate()) <- phone(i) WHERE NOT phone(l) = phone(i);
            legalEntityGroup(l) <- legalEntityGroup(idGroup(i));
            email(l) <- email(i);
            inn(l) <- inn(i);
            dataKpp(l, currentDate()) <- kpp(i) WHERE NOT kpp(l) = kpp(i);
        }      

        //DELETE LegalEntity l WHERE l IS LegalEntity AND isParent(legalEntityGroup(l), legalEntityGroup('suppliers')) AND NOT [GROUP SUM 1 BY id(INTEGER i)](id(l));
                       
        APPLY;
    }
}

EXTEND FORM integrationData
    PROPERTIES() importSupplierLegalEntity, sqlImportSupplierLegalEntity
;

DESIGN integrationData {
    axaptaButtons {
        NEW importSupplierLegalEntityCont {
            type = CONTAINERH;
            MOVE PROPERTY (importSupplierLegalEntity());
            MOVE PROPERTY (sqlImportSupplierLegalEntity());
        }
    }
}

//Группы покупателей
sqlImportCustomerLegalEntityGroup 'Импорт из SQL' = DATA BOOLEAN ();

importCustomerLegalEntityGroup 'Импорт групп покупателей' () {
    NEWSESSION {
        LOCAL file = FILE ();    
        LOCAL id = STRING[100] (INTEGER);
        LOCAL name = ISTRING[100] (INTEGER);
        
        IF sqlImportCustomerLegalEntityGroup() THEN {
            EXTERNAL SQL connectionString() 
                EXEC 'SELECT CUSTGROUP, NAME FROM CUSTGROUP WHERE DATAAREAID = $1' 
                PARAMS areaID() TO file; 
        } ELSE {
            INPUT f = CSVFILE DO {
                IMPORT CSV ';' NOHEADER FROM f TO id, name;
            }
        }
              
        FOR id(INTEGER i) AND NOT legalEntityGroup(id(i)) DO NEW g = LegalEntityGroup {
            id(g) <- ISTRING[100] (id(i));
        }
        
        FOR id(INTEGER i) AND LegalEntityGroup g == legalEntityGroup(id(i)) DO {
            name(g) <- name(i);
            parent(g) <- legalEntityGroup('customers');
        }       
        APPLY;
    }
}

EXTEND FORM integrationData
    PROPERTIES() importCustomerLegalEntityGroup, sqlImportCustomerLegalEntityGroup
;

DESIGN integrationData{
    axaptaButtons{
        NEW importCustomerLegalEntityGroupCont {
            type = CONTAINERH;
            MOVE PROPERTY (importCustomerLegalEntityGroup());
            MOVE PROPERTY (sqlImportCustomerLegalEntityGroup());
        }
    }
}

//Покупатели
sqlImportCustomerLegalEntity 'Импорт из SQL' = DATA BOOLEAN ();

importCustomerLegalEntity 'Импорт покупателей' () {
    NEWSESSION {
        LOCAL file = FILE ();    
        LOCAL id = STRING[100] (INTEGER);
        LOCAL idGroup = STRING[100] (INTEGER);
        LOCAL name = STRING[150] (INTEGER);
        LOCAL address = STRING[150] (INTEGER);
        LOCAL phone = STRING[100] (INTEGER);
        LOCAL email = STRING[400] (INTEGER);
        LOCAL inn = STRING[12] (INTEGER);
        LOCAL kpp = STRING[9] (INTEGER);
        
        IF sqlImportCustomerLegalEntity() THEN {
            EXTERNAL SQL connectionString() 
                EXEC 'SELECT ACCOUNTNUM, NAME, ADDRESS, PHONE, CUSTGROUP, EMAIL, INN_RU, KPP_RU FROM CUSTTABLE WHERE DATAAREAID = $1' 
                PARAMS areaID() TO file; 
        } ELSE {
            INPUT f = CSVFILE DO {
                IMPORT CSV ';' NOESCAPE FROM f TO id, name, address, phone, idGroup, email, inn, kpp;
            }
        }
              
        FOR id(INTEGER i) AND NOT legalEntity(id(i)) DO NEW g = LegalEntity {
            id(g) <- (id(i));
            NEW st = Warehouse {
                id(st) <- CONCAT '', 'Склад', (id(i));
                legalEntity(st) <- g;
                warehouseGroup(st) <- warehouseGroup('external');
            }
        }
        
        FOR id(INTEGER i) AND LegalEntity l == legalEntity(id(i)) DO {
            name(l) <- name(i);
            dataAddress(l, currentDate()) <- address(i) WHERE NOT address(l) = address(i);
            dataPhone(l, currentDate()) <- phone(i) WHERE NOT phone(l) = phone(i);
            legalEntityGroup(l) <- legalEntityGroup(idGroup(i));
            email(l) <- email(i);
            inn(l) <- inn(i);
            dataKpp(l, currentDate()) <- kpp(i) WHERE NOT kpp(l) = kpp(i);
        }      

        //DELETE LegalEntity l WHERE l IS LegalEntity AND isParent(legalEntityGroup(l), legalEntityGroup('customers')) AND NOT [GROUP SUM 1 BY id(INTEGER i)](id(l));
                       
        APPLY;
    }
}

EXTEND FORM integrationData
PROPERTIES() importCustomerLegalEntity, sqlImportCustomerLegalEntity
;

DESIGN integrationData {
    axaptaButtons {
        NEW importCustomerLegalEntityCont {
            type = CONTAINERH;
            MOVE PROPERTY (importCustomerLegalEntity());
            MOVE PROPERTY (sqlImportCustomerLegalEntity());
        }
    }
}