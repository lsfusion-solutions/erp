MODULE ImportAxaptaPurchase;

REQUIRE ImportAxapta, StockContract, Utils, ImportUserPriceList, PriceListContract;

NAMESPACE ImportAxapta;

//импорт договоров закупок
importPurchaseContract 'Импорт договоров закупки' () {
    NEWSESSION {
        LOCAL file = FILE ();    
        LOCAL id = STRING[100](INTEGER);
        LOCAL number = STRING[48](INTEGER);
        LOCAL date = DATETIME (INTEGER);        
        LOCAL dateFrom = DATETIME (INTEGER);
        LOCAL dateTo = DATETIME (INTEGER);
        LOCAL idPaymentCondition = STRING (INTEGER);        
        LOCAL supplierId = STRING[100] (INTEGER); 
        LOCAL status = INTEGER (INTEGER);
        LOCAL subject = STRING[100] (INTEGER);
        
        IF csvImport() THEN {
            INPUT f = CSVFILE DO {
                IMPORT CSV ';' HEADER NOESCAPE FROM f TO id, number, date, dateFrom, dateTo, idPaymentCondition, supplierId, status, subject;
            }
        } ELSE {
            EXTERNAL SQL connectionString() 
                EXEC 'SELECT RCONTRACTACCOUNT, RCONTRACTNUMBER, CONTRACTDATE, CONTRACTSTARTDATE, CONTRACTENDDATE, CONTRACTPAYMCODE, UPPER(RCONTRACTPARTNERCODE), RCONTRACTSTATUS, RCONTRACTSUBJECT FROM RCONTRACTTABLE WHERE DATAAREAID = $1' 
                PARAMS areaId() TO file;
                IMPORT TABLE FROM file() TO id, number, date, dateFrom, dateTo, idPaymentCondition, supplierId, status, subject;
        }
               
        FOR id(INTEGER i) AND NOT userContractSku(id(i)) DO NEW g = UserContractSku {
            id(g) <- (id(i));
            customer(g) <- defaultCompany();           
        }

        FOR INTEGER i1 = [GROUP MAX INTEGER i BY idPaymentCondition(i)](STRING id) AND NOT paymentCondition(id) NEW p = PaymentCondition DO {
            id(p) <- id;
            type(p) <- CASE WHEN isSubstring(id, 'предоплата') THEN AgreementPaymentType.advancePayment
                            WHEN isSubstring(id, 'по факту') THEN AgreementPaymentType.implement
                            ELSE AgreementPaymentType.prepayment;
            bankingDays(p) <- TRUE WHERE isSubstring(id, 'бд');
        }
        
        FOR INTEGER i1 = [GROUP MAX INTEGER i BY idPaymentCondition(i)](STRING id) AND PaymentCondition p = paymentCondition(id) 
            AND (isSubstring(id, 'кд') OR isSubstring(id, 'бд')) AND NOT paymentCondition(paymentPeriod(id)) = p NEW per = PaymentPeriod DO {
            id(per) <- id;
            countDays(per) <- OVERRIDE INTEGER (left(id, strpos(id, 'кд') - 1)), INTEGER (left(id, strpos(id, 'бд') - 1)) ;
            percent(per) <- 100;
            paymentCondition(per) <- p;
        }      
                 
        FOR id(INTEGER i) AND UserContractSku c == userContractSku(id(i)) DO {
            number(c) <- number(i);
            //date(c) <- DATE (date(i)) // даты нету;
            dateFrom(c) <- DATE(dateFrom(i));
            dateTo(c) <- DATE(dateTo(i)) IF DATE(dateTo(i)) != 1900_01_01;
            paymentCondition(c) <- paymentCondition(idPaymentCondition(i));
            supplier(c) <- legalEntity(supplierId(i));
            //stat(c) <- status(i);
            note(c) <- subject(i) WHERE NOT subject(i) = 'NULL';
        }
     
        DELETE UserContractSku g WHERE g IS UserContractSku AND NOT [GROUP SUM 1 BY id(INTEGER i)](id(g));
        APPLY;
    }
}

EXTEND FORM integrationData
    PROPERTIES() importPurchaseContract
;
    
DESIGN integrationData {
    axaptaButtons {
        NEW importContractCont {
            type = CONTAINERH;
            MOVE PROPERTY (importPurchaseContract());
        }
    }
}

//импорт прайслистов
importPurchasePrice 'Импорт прайс листов' () {
    NEWSESSION {
        LOCAL file = FILE ();    
        LOCAL id = LONG (INTEGER);
        LOCAL supplierId = STRING[100] (INTEGER); 
        LOCAL contractId = STRING[100] (INTEGER); 
        LOCAL itemId = STRING[100] (INTEGER);         
        LOCAL fromDate = DATETIME (INTEGER);
        LOCAL toDate = DATETIME (INTEGER);
        LOCAL price = NUMERIC[16,4] (INTEGER);
        LOCAL priceId = STRING (INTEGER);
        
        IF csvImport() THEN {
            INPUT f = CSVFILE DO {
                IMPORT CSV ';' HEADER NOESCAPE FROM f TO id, supplierId, contractId, itemId, fromDate, toDate, price;
            }
        } ELSE {
            EXTERNAL SQL connectionString() 
                EXEC 'SELECT vip.RECID, ' +
                             'UPPER(vip.VENDACCOUNT), ' +
                             'vip.RCONTRACTACCOUNT, ' +
                             'vci.ITEMID, ' +
                             'vip.STARTDATE, ' +
                             'vip.ENDDATE, ' +
                             'vip.VALUE ' +
                      'FROM VENDITEMPRICE vip ' +
                      'JOIN VENDCONTRACTITEM vci ON vci.PRICELINEID = vip.PRICELINEID ' +
                      'LEFT JOIN RCONTRACTTABLE rc ON rc.RCONTRACTACCOUNT = vip.RCONTRACTACCOUNT ' +
                      'WHERE (vip.RCONTRACTACCOUNT = \'\' OR rc.RCONTRACTPARTNERCODE = vip.VENDACCOUNT) AND vip.ISPRIMARY = 1 AND (ENDDATE = \'1900-01-01 00:00:00.000\' OR ENDDATE >= GETDATE()) ' +
                      'AND vip.DATAAREAID = $1 ' +
                      'ORDER BY vip.PRICELINEID, vip.ENDDATE '
                PARAMS areaId() TO file;
                
            IMPORT TABLE FROM file() TO id, supplierId, contractId, itemId, fromDate, toDate, price;
        }
        
        priceId(INTEGER i) <- OVERRIDE contractId(i), supplierId(i) WHERE id(i);

        FOR INTEGER i1 = [GROUP MAX INTEGER i BY priceId(i)](STRING id) AND NOT userPriceList(id) NEW p = UserPriceList DO {
            id(p) <- id;            
            number(p) <- STRING[48](priceId(i1));
            PriceList.operation(p) <- operation('supplier');
            date(p) <- currentDate();
            time(p) <- currentTime();
            fromDate(p) <- currentDate();
            fromTime(p) <- 00:00;
            isPosted(p) <- TRUE;
        }
        
        FOR INTEGER i1 = [GROUP MAX INTEGER i BY priceId(i)](STRING id) AND UserPriceList p = userPriceList(id) DO {
            contractSku(p) <- userContractSku(contractId(i1));
            company(p) <- legalEntity(supplierId(i1));
        }
        
        FOR id(INTEGER i) AND UserPriceList p = userPriceList(priceId(i)) AND NOT userPriceListDetail(STRING(id(i)), p) DO NEW d = UserPriceListDetail {
            id(d) <- STRING(id(i));
            userPriceList(d) <- p;
        }
        
        FOR id(INTEGER i) AND UserPriceList p = userPriceList(priceId(i)) AND UserPriceListDetail d = userPriceListDetail(STRING(id(i)), p) DO {
            sku(d) <- item(itemId(i));
            fromDataDate(d) <- DATE (fromDate(i));
            toDataDate(d) <- DATE(toDate(i)) IF DATE(toDate(i)) != 1900_01_01;
            toDataTime(d) <- 23:59 IF DATE(toDate(i)) != 1900_01_01;
            price(d, dataPriceListType('supplier')) <- price(i);
        }
             
        DELETE UserPriceListDetail g WHERE g IS UserPriceListDetail AND NOT [GROUP SUM 1 BY priceId(INTEGER i), itemId(i)](id(userPriceList(g)), idSku(g));
        DELETE UserPriceList g WHERE g IS UserPriceList AND NOT [GROUP SUM 1 BY priceId(INTEGER i)](id(g));               

        APPLY;
    }
}

EXTEND FORM integrationData
    PROPERTIES() importPurchasePrice
;

DESIGN integrationData {
    axaptaButtons {
        NEW importPurchasePriceCont {
            type = CONTAINERH;
            MOVE PROPERTY (importPurchasePrice());
        }
    }
}