MODULE ImportAxaptaItem;

REQUIRE ImportAxapta, Item, ScalesItem, ItemBrandGroup, TaxItem, PurchasePack, ItemSize;

NAMESPACE ImportAxapta;

//Товарные группы
importItemGroup 'Импорт товарных групп' () {
    NEWSESSION {
        LOCAL file = FILE ();    
        LOCAL id = STRING[100](INTEGER);
        LOCAL idParent = STRING[100](INTEGER);
        LOCAL prefix = ISTRING[250] (INTEGER);
        LOCAL name = ISTRING[250] (INTEGER);
        
        IF csvImport() THEN {
            INPUT f = CSVFILE DO {
                IMPORT CSV ';' NOESCAPE FROM f TO id, idParent, prefix, name;
            }
        } ELSE {
            EXTERNAL SQL connectionString() 
                EXEC 'SELECT RANGEID, RANGEIDPARENT, PREFIX, NAME FROM INVENTITEMRANGE WHERE DATAAREAID = $1' 
                PARAMS areaId() TO file;
                IMPORT TABLE FROM file() TO id, idParent, prefix, name;
        }
               
        FOR id(INTEGER i) AND NOT itemGroup(id(i)) DO NEW g = ItemGroup {
            id(g) <- id(i);
        }
        
        FOR id(INTEGER i) AND ItemGroup g == itemGroup(id(i)) DO {
            name(g) <- CONCAT ' ', prefix(i), name(i);
            parent(g) <- itemGroup(idParent(i));
        }     
        DELETE ItemGroup g WHERE g IS ItemGroup AND NOT [GROUP SUM 1 BY id(INTEGER i)](id(g));                   
        APPLY;
    }
}

EXTEND FORM integrationData
    PROPERTIES() importItemGroup
;
    
DESIGN integrationData {
    axaptaButtons {
        NEW importItemGroupCont {
            type = CONTAINERH;
            MOVE PROPERTY (importItemGroup());
        }
    }
}

//Единицы измерения
dataAreaIdUOM 'Area ID' = DATA ISTRING[100]();
areaIdUOM 'Area ID' () = OVERRIDE dataAreaIdUOM(), areaId();

importUOM 'Импорт единиц измерения' () {
    NEWSESSION {
        LOCAL file = FILE ();    
        LOCAL id = STRING[100] (INTEGER);
        LOCAL name = ISTRING[50] (INTEGER);
        LOCAL unitDecimals = INTEGER (INTEGER);
        LOCAL weightUnit = INTEGER (INTEGER);
                
        IF csvImport() THEN {
            INPUT f = CSVFILE DO {
                IMPORT CSV ';' NOESCAPE FROM f TO id, name, unitDecimals, weightUnit;
            }
        } ELSE {
            EXTERNAL SQL connectionString()
                EXEC 'SELECT UNITID, TXT, UNITDECIMALS, WEIGHTUNIT FROM UNIT WHERE DATAAREAID = $1' 
                PARAMS areaIdUOM() TO file;    
                IMPORT TABLE FROM file() TO id, name, unitDecimals, weightUnit;
        }
                
        FOR id(INTEGER i) AND NOT UOM(id(i)) DO NEW u = UOM {
            id(u) <- id(i);
        }             
        
        FOR id(INTEGER i) AND UOM u == UOM(id(i)) DO {
            name(u) <- ISTRING[100] (name(i));
            split(u) <- unitDecimals(i) > 0;
            passScales(u) <- weightUnit(i) == 1;
        }
        
        DELETE UOM u WHERE u IS UOM AND NOT [GROUP SUM 1 BY id(INTEGER i)](id(u));       
        
        APPLY;        
    }
}

EXTEND FORM integrationData
    PROPERTIES() importUOM, dataAreaIdUOM SHOWIF NOT csvImport()
;

DESIGN integrationData {
    axaptaButtons {
        NEW importUOMCont {
            type = CONTAINERH;
            MOVE PROPERTY (importUOM());
            MOVE PROPERTY (dataAreaIdUOM());
        }
    }
}

//Группы брендов
importBrandGroup 'Импорт групп брендов' () {
    NEWSESSION {
        LOCAL file = FILE ();    
        LOCAL id = STRING[100](INTEGER);
        LOCAL name = STRING[200] (INTEGER);
        
        IF csvImport() THEN {
            INPUT f = CSVFILE DO {
                IMPORT CSV ';' NOESCAPE FROM f TO id, name;
            }
        } ELSE {
            EXTERNAL SQL connectionString() 
                EXEC 'SELECT GROUPID, NAME FROM OWNERTMGROUP WHERE DATAAREAID = $1' 
                PARAMS areaId() TO file; 
                IMPORT TABLE FROM file() TO id, name;
        }
        
        IF NOT brandGroup('all') THEN NEW g = BrandGroup {
            id(g) <- 'all';
            name(g) <- 'Все';
        }
               
        FOR id(INTEGER i) AND NOT brandGroup(id(i)) DO NEW g = BrandGroup {
            id(g) <- id(i);
        }
        
        FOR id(INTEGER i) AND BrandGroup g == brandGroup(id(i)) DO {
            name(g) <- name(i);
            parent(g) <- brandGroup('all');
        }     
        
        //DELETE BrandGroup g WHERE g IS BrandGroup AND NOT [GROUP SUM 1 BY id(INTEGER i)](id(g));                   
        
        APPLY;
    }
}

EXTEND FORM integrationData
    PROPERTIES() importBrandGroup
;
    
DESIGN integrationData {
    axaptaButtons {
        NEW importBrandGroupCont {
            type = CONTAINERH;
            MOVE PROPERTY (importBrandGroup());
        }
    }
}

//Бренды
importBrand 'Импорт брендов' () {
    NEWSESSION {
        LOCAL file = FILE ();    
        LOCAL id = STRING[100] (INTEGER);
        LOCAL name = ISTRING[50] (INTEGER);
        LOCAL idGroup = STRING[100] (INTEGER);
                
        IF csvImport() THEN {
            INPUT f = CSVFILE DO {
                IMPORT CSV ';' NOESCAPE FROM f TO id, name, idGroup;
            }
        } ELSE {
            EXTERNAL SQL connectionString() 
                EXEC 'SELECT OWNERTMID, NAME, OWNERTMGROUPID FROM OWNERTM WHERE DATAAREAID = $1' 
                PARAMS areaId() TO file;
                IMPORT TABLE FROM file() TO id, name, idGroup;
        }
              
        FOR id(INTEGER i) AND NOT brand(id(i)) DO NEW g = Brand {
            id(g) <- (id(i));
        }
        
        FOR id(INTEGER i) AND Brand l == brand(id(i)) DO {
            name(l) <- name(i);
            brandGroup(l) <- brandGroup(idGroup(i));
        }      

        //DELETE Brand b WHERE b IS Brand AND NOT staticName(b) AND NOT [GROUP SUM 1 BY id(INTEGER i)](id(b));
                       
        APPLY;
    }
}

EXTEND FORM integrationData
    PROPERTIES() importBrand
;

DESIGN integrationData {
    axaptaButtons {
        NEW importBrandCont {
            type = CONTAINERH;
            MOVE PROPERTY (importBrand());
        }
    }
}

//Товары
extID 'Код' = DATA STRING[200] (Range);
rangeExtID (extID) = GROUP AGGR Range range BY extID (range);

EXTEND FORM integrationData
    OBJECTS r=Range
    PROPERTIES(r) extID
    PROPERTIES(r) READONLY number, nameTax, nameCountry, nameRangeType, note, valueCurrentRate, dateFromCurrentRate
    FILTERS country(r) == defaultCountry()
;
DESIGN integrationData {
    importAxaptaCont {
        MOVE BOX (r) {width = 1000;}
    }
}

importItem 'Импорт товаров' () {
    NEWSESSION {
        LOCAL file = FILE ();    
        LOCAL id = STRING[100] (INTEGER);
        LOCAL name = ISTRING[255] (INTEGER);
        LOCAL idGroup = STRING[100] (INTEGER);
        LOCAL idUOM = STRING[100] (INTEGER);
        LOCAL idEx = STRING (INTEGER);
        LOCAL idBrand = STRING[100] (INTEGER);
        LOCAL netWeight = NUMERIC[11,5] (INTEGER);
        LOCAL volume = NUMERIC[9,3] (INTEGER);
        LOCAL idManufacturer = STRING[200] (INTEGER);
        LOCAL amountPack = NUMERIC[14,3] (INTEGER);
                   
        IF csvImport() THEN {
            INPUT f = CSVFILE DO {
                IMPORT CSV ';' NOESCAPE FROM f TO id, name, idGroup, idUOM, idEx, idBrand, netWeight, volume, idManufacturer, amountPack;      
            }  
        } ELSE {
            EXTERNAL SQL connectionString() 
                EXEC 'SELECT i.ITEMID, ' +
                             'i.ITEMNAME, ' +
                             'i.ITEMRANGEID, ' +
                             'im0.UNITID, ' +
                             'im2.TAXITEMGROUPID, ' +
                             'OWNERTMID, ' +
                             'NETWEIGHT, ' +
                             'UNITVOLUME, ' +
                             'PROVIDERFORPRICE, ' +
                             'im0.QUANTITY ' +                    
                      'FROM INVENTTABLE i ' +
                          'JOIN INVENTTABLEMODULE im0 ON im0.ITEMID = i.ITEMID ' +
                          'AND im0.MODULETYPE = 0 ' +
                          'JOIN INVENTTABLEMODULE im1 ON im1.ITEMID = i.ITEMID ' +
                          'AND im1.MODULETYPE = 1 ' +
                          'JOIN INVENTTABLEMODULE im2 ON im2.ITEMID = i.ITEMID ' +
                          'AND im2.MODULETYPE = 2 ' +
                      'WHERE i.DATAAREAID = $1' 
                PARAMS areaId() TO file; 
                IMPORT TABLE FROM file() TO id, name, idGroup, idUOM, idEx, idBrand, netWeight, volume, idManufacturer, amountPack;      
        }
                            
        FOR id(INTEGER i) AND NOT item(id(i)) DO NEW g = Item {
            id(g) <- (id(i));
        }

        FOR INTEGER i1 = [GROUP MAX INTEGER i BY idManufacturer(i)](STRING idManufacturer) AND NOT manufacturer(idManufacturer) NEW m = Manufacturer DO {
           id(m) <- idManufacturer;
           name(m) <- idManufacturer;
        }
          
        FOR id(INTEGER i) AND Item item == item(id(i)) DO {
            caption(item) <- name(i);
            itemGroup(item) <- itemGroup(idGroup(i));
            UOM(item) <- UOM(idUOM(i));
            VAT(item, defaultCountry()) <- rangeExtID(idEx(i));
            brand(item) <- brand(idBrand(i));
            netWeight(item) <- netWeight(i);
            volume(item) <- volume(i);
            manufacturer(item) <- manufacturer(idManufacturer(i));
        }
        
        FOR id(INTEGER i) AND Item item == item(id(i)) AND NOT Purchase.packBarcode(item) AND amountPack(i) > 0 DO NEW b = Barcode {
            sku(b) <- item;
            Purchase.packBarcode(Item s) <- b WHERE s = item;
        }        

        FOR id(INTEGER i) AND Item item == item(id(i)) AND Barcode b = Purchase.packBarcode(item) AND amountPack(i) > 0 DO {
            amount(b) <- NUMERIC[14,3](amountPack(i));
        }
        
        DELETE Item b WHERE b IS Item AND NOT [GROUP SUM 1 BY id(INTEGER i)](id(b));
                       
        APPLY;
    }
}

EXTEND FORM integrationData
    PROPERTIES() importItem
;
DESIGN integrationData {
    axaptaButtons {
        fill = 0.1;
        NEW importItemCont {               
            type = CONTAINERH;
            MOVE PROPERTY (importItem());
        }
    }
    importAxaptaCont {
        MOVE BOX (r) {fill = 1;}
    }
}

//Штрихкоды
importBarcode 'Импорт штрихкодов' () {
    NEWSESSION {
        LOCAL file = FILE ();    
        LOCAL id = STRING[100] (INTEGER);
        LOCAL idSku = STRING[100] (INTEGER);
                
        IF csvImport() THEN {
            INPUT f = CSVFILE DO {
                IMPORT CSV ';' NOESCAPE FROM f TO id, idSku;
            }
        } ELSE {
            EXTERNAL SQL connectionString() 
                EXEC 'SELECT ITEMBARCODE, ITEMID FROM INVENTITEMBARCODE WHERE DATAAREAID = $1' 
                PARAMS areaId() TO file;
                IMPORT TABLE FROM file() TO id, idSku;
        }
              
        FOR id(INTEGER i) AND NOT barcode(id(i)) DO NEW g = Barcode {
            id(g) <- (id(i));
        }
        
        FOR id(INTEGER i) AND Barcode l == barcode(id(i)) DO {
            sku(l) <- sku(idSku(i));
        }      

        DELETE Barcode b WHERE b IS Barcode AND NOT [GROUP SUM 1 BY id(INTEGER i)](id(b)) AND NOT pack(b);
                       
        APPLY;
    }
}

EXTEND FORM integrationData
    PROPERTIES() importBarcode
;

DESIGN integrationData {
    axaptaButtons {
        NEW importBarcodeCont {
            type = CONTAINERH;
            MOVE PROPERTY (importBarcode());
        }
    }
}