MODULE YandexEdaOrder;

REQUIRE YandexEda, SaleInternetOrderIntegration, SaleInternetPicking;

NAMESPACE YandexEda;

GROUP deliveryInfo;
GROUP deliveryAddress : deliveryInfo;
GROUP paymentInfo;

eatsId = DATA LOCAL STRING();
persons = DATA LOCAL STRING();
phoneNumber = DATA LOCAL STRING();
clientName = DATA LOCAL STRING();
courierArrivementDate = DATA LOCAL STRING();
comment = DATA LOCAL STRING();
restaurantId = DATA LOCAL STRING();
quantity = DATA LOCAL STRING(INTEGER);
price = DATA LOCAL STRING(INTEGER);
name = DATA LOCAL STRING(INTEGER);
id = DATA LOCAL STRING(INTEGER);
itemsPromos = DATA LOCAL INTEGER(INTEGER);
discount = DATA LOCAL STRING(INTEGER);
type = DATA LOCAL STRING(INTEGER);
itemsModifications = DATA LOCAL INTEGER(INTEGER);
quantity1 = DATA LOCAL STRING(INTEGER);
price1 = DATA LOCAL STRING(INTEGER);
name1 = DATA LOCAL STRING(INTEGER);
id1 = DATA LOCAL STRING(INTEGER);
discount1 = DATA LOCAL STRING(INTEGER);
type1 = DATA LOCAL STRING(INTEGER);
itemsCost = DATA LOCAL STRING();
paymentType = DATA LOCAL STRING();
discriminator = DATA LOCAL STRING();

FORM yandexorder FORMEXTID 'null'
    PROPERTIES() eatsId, persons, comment, restaurantId, discriminator
    PROPERTIES() IN deliveryInfo phoneNumber, clientName, courierArrivementDate

    OBJECTS items = INTEGER
    PROPERTIES(items) quantity, price, name, id
    FILTERS imported(items)

    OBJECTS promos = INTEGER
    FILTERS itemsPromos(promos) == items
    PROPERTIES(promos) discount, type
    FILTERS imported(promos)

    OBJECTS modifications = INTEGER
    FILTERS itemsModifications(modifications) == items
    PROPERTIES(modifications) quantity1 EXTID 'quantity', price1 EXTID 'price', name1 EXTID 'name', id1 EXTID 'id'
    FILTERS imported(modifications)

    OBJECTS promos1 = INTEGER EXTID 'promos'
    PROPERTIES(promos1) discount1 EXTID 'discount', type1 EXTID 'type'
    FILTERS imported(promos1)
    PROPERTIES() IN paymentInfo itemsCost, paymentType;


uuid = DATA STRING (InternetOrder) INDEXED ;
itemById (STRING id) = GROUP LAST Item i ORDER id(i) WHERE id(i) == id;
stockYandexOrder (STRING id) = ABSTRACT DepartmentStore;
restarauntId (DepartmentStore s) = ABSTRACT STRING;
yandexCarrier = GROUP MAX Carrier r IF id(r) = 'yandex';
paymentTypeOrder (STRING type) = IF type = 'CASH' THEN PaymentTypeInternetOrder.inFact ELSE PaymentTypeInternetOrder.prepayment;
yandexEdaOrderStatus (InternetOrder o) = CASE 
    WHEN status(o) = StatusInternetOrder.new THEN 'ACCEPTED_BY_RESTAURANT'
    WHEN status(o) = StatusInternetOrder.isPicking THEN 'COOKING'
    WHEN status(o) = StatusInternetOrder.picked THEN 'READY'
    WHEN status(o) = StatusInternetOrder.delivery THEN 'TAKEN_BY_COURIER'
    WHEN status(o) = StatusInternetOrder.delivered THEN 'DELIVERED'
    WHEN status(o) = StatusInternetOrder.closed THEN 'CANCELLED'
;
httpHeadersYandex(TEXT name) = CASE
    WHEN name == 'Content-Type' THEN 'application/vnd.eats.order.v2+json';
courierArrivementDateText = DATA STRING (InternetOrder);
courierArrivementDate (InternetOrder o) += WHEN carrier(o) == yandexCarrier() THEN DATETIME (courierArrivementDateText(o));

createOrder(FILE f){
    LOCAL tokenClient = STRING ();
    tokenClient() <- getWord(headers('Authorization'), ' ', 2);
    logToFile('yandex', CONCAT ' : ', 'Create order');
    IF NOT (GROUP MAX YandexEdaAuth u IF activeToken(u) == tokenClient()) THEN {
        statusHttpTo() <- 401;
        EXPORT JSON FROM reason = 'Не найден токен авторизации';
    }
    ELSE {
        IMPORT yandexorder FROM JSONFILE (f);//f;
        LOCAL yandexOrder = InternetOrder ();
        yandexOrder() <- GROUP MAX InternetOrder o IF idAggregator(o) = eatsId();
        IF yandexOrder() THEN {
            EXPORT JSON FROM result = 'OK', orderId = uuid(yandexOrder());
            RETURN;
        }
        NEW order = InternetOrder {
            carrier(order) <- yandexCarrier();
            number(order) <- eatsId();
            idAggregator(order) <- eatsId();
            supplierStock(order) <- stockYandexOrder(restaurantId());
            customerComment(order) <- comment();
            nameInternetCustomer(order) <- STRING[255](clientName());
            phoneInternetCustomer(order) <- STRING[100](phoneNumber());
            courierArrivementDateText(order) <- courierArrivementDate();
            isPosted(order) <- TRUE;
            uuid(order) <- STRING(LONG(order));
            FOR id(INTEGER items) NEW detail = InternetOrderDetail DO{
                sku(detail) <- itemById(id(items));
                quantity(detail) <- NUMERIC[16,5](quantity(items));
                price(detail) <- NUMERIC[15,2](price(items));
                internetOrder(detail) <- order;
            }
            paymentTypeInternetOrder(order) <- paymentTypeOrder(paymentType());
            paymentCardSumInternetOrder(order) <- NUMERIC[18,4](itemsCost()) WHERE paymentType() = 'CARD';
            paymentCashSumInternetOrder(order) <- NUMERIC[18,4](itemsCost()) WHERE paymentType() = 'CASH';
            APPLY ;
            IF canceled() THEN {
                statusHttpTo() <- 500;
                EXPORT JSON FROM result = 'error', description = applyMessage();
            }
            EXPORT JSON FROM result = 'OK', orderId = uuid(order);
        }
    } 
}  

internetOrderByUuid (STRING id) = GROUP LAST InternetOrder order  
    WHERE uuid(order) == id;

orderNotFound(){
    statusHttpTo() <- 404;
    EXPORT JSON FROM code = 100, description = 'Не найден заказ';
}

updateOrder(FILE f){
    LOCAL order = STRING ();
    order() <- replace(servletPath(), TEXT('/exec/order/'), TEXT (''));
    logToFile('yandex', CONCAT ' : ', 'Update order', order());
    LOCAL tokenClient = STRING ();
    tokenClient() <- getWord(headers('Authorization'), ' ', 2);
    IF NOT (GROUP MAX YandexEdaAuth u IF activeToken(u) == tokenClient()) THEN {
        statusHttpTo() <- 401;
        EXPORT JSON FROM reason = 'Не найден токен авторизации';
    }
    ELSE {
        IMPORT yandexorder FROM JSONFILE(f);
         FOR InternetOrder io =  internetOrderByUuid(order()) DO{
            carrier(io) <- yandexCarrier();
            idAggregator(io) <- eatsId();
            supplierStock(io) <- stockYandexOrder(restaurantId());
            customerComment(io) <- comment();
            nameInternetCustomer(io) <- STRING[255](clientName());
            phoneInternetCustomer(io) <- STRING[100](phoneNumber());
            courierArrivementDateText(io) <- courierArrivementDate();
            isPosted(io) <- TRUE;
            //заказ присылается полностью, поэтому удаляем и перезаполняем(вопрос по пикеру, но пока так)
            DELETE InternetOrderDetail detail WHERE internetOrder(detail) == internetOrderByUuid(order());
            FOR id(INTEGER items) NEW detail = InternetOrderDetail DO{ 
                sku(detail) <- itemById(id(items));
                quantity(detail) <- NUMERIC[16,5](quantity(items));
                price(detail) <- NUMERIC[15,2](price(items));
                internetOrder(detail) <- io;
            }
            paymentTypeInternetOrder(io) <- paymentTypeOrder(paymentType());
            paymentCardSumInternetOrder(io) <- NUMERIC[18,4](itemsCost()) WHERE paymentType() = 'CARD';
            paymentCashSumInternetOrder(io) <- NUMERIC[18,4](itemsCost()) WHERE paymentType() = 'CASH';
            APPLY ;
            IF canceled() THEN {
                statusHttpTo() <- 500;
                EXPORT JSON FROM result = 'error', description = applyMessage();
            }
            EXPORT JSON FROM result = 'OK';
        }
        ELSE orderNotFound(); 
    }  
}

deleteOrder(FILE f){
    LOCAL tokenClient = STRING ();
    tokenClient() <- getWord(headers('Authorization'), ' ', 2);
    IF NOT (GROUP MAX YandexEdaAuth u IF activeToken(u) == tokenClient()) THEN {
        statusHttpTo() <- 401;
        EXPORT JSON FROM code = 100, description = 'Не найден токен авторизации';
    }
    ELSE {
        LOCAL order = STRING ();
        order() <- replace(servletPath(), TEXT('/exec/order/'), TEXT (''));
        IF NOT order() THEN { orderNotFound(); RETURN; }
        IF internetOrderByUuid(order()) THEN{
            status(internetOrderByUuid(order())) <- StatusInternetOrder.closed;
            APPLY ;
            IF canceled() THEN {
                statusHttpTo() <- 500;
                EXPORT JSON FROM result = 'error', description = applyMessage();
            }
            EXPORT JSON FROM order = uuid(internetOrderByUuid(order())), status = 'Отменён';
        }
    }
}

updatedAt 'Дата и время обновления заказа' = DATA ZDATETIME (InternetOrder);

WHEN SETCHANGED (status(InternetOrder o)) DO updatedAt(o) <- currentZDateTime();

//форма для экспорта статуса заказа
FORM statusYandex FORMEXTID 'null'
    OBJECTS o = InternetOrder PANEL EXTID ''
    PROPERTIES (o) yandexEdaOrderStatus EXTID 'status', updatedAt;
; 

quantityOrderDetail (InternetOrderDetail d) = IF status(internetOrder(d)) = StatusInternetOrder.new 
    OR status(internetOrder(d)) = StatusInternetOrder.isPicking THEN quantity(d) ELSE pickingQuantity(d);
    
// форма информации о заказе
FORM getOrder FORMEXTID 'null'
    OBJECTS o = InternetOrder PANEL EXTID ''
    PROPERTIES idAggregator(o) EXTID 'eatsId', = 1 EXTID 'persons', = OVERRIDE customerComment(o), '' EXTID 'comment', 
       = IF supplierStock(o) IS DepartmentStore THEN restarauntId(supplierStock(o)) EXTID 'restaurantId', 
       = 'yandex' EXTID 'discriminator', = '[]' EXTID 'promos'
    PROPERTIES IN deliveryInfo phoneInternetCustomer(o) EXTID 'phoneNumber', 
        nameInternetCustomer(o) EXTID 'clientName', courierArrivementDateText(o) EXTID 'courierArrivementDate'
    PROPERTIES IN paymentInfo = OVERRIDE paymentCashSumInternetOrder(o), paymentCardSumInternetOrder(o) EXTID 'itemsCost',
        = IF paymentTypeInternetOrder(o) = PaymentTypeInternetOrder.inFact THEN 'CASH' ELSE 'CARD' EXTID 'paymentType'
 
    OBJECTS items = InternetOrderDetail
    PROPERTIES quantityOrderDetail(items) EXTID 'quantity', price(items), nameSku(items) EXTID 'name', idSku(items) EXTID 'id',
        = OVERRIDE '[]', idSku(items) EXTID 'modifications', = OVERRIDE '[]', idSku(items) EXTID 'promos'
    FILTERS internetOrder(items) = o AND quantityOrderDetail(items)
;

getOrder (FILE f) {
    LOCAL tokenClient = STRING ();
    tokenClient() <- getWord(headers('Authorization'), ' ', 2);
    IF NOT (GROUP MAX YandexEdaAuth u IF activeToken(u) == tokenClient()) THEN {
        statusHttpTo() <- 401;
        EXPORT JSON FROM reason = 'Не найден токен авторизации';
    }
    ELSE{
        LOCAL path = STRING ();
        path() <- replace(servletPath(), TEXT('/exec/order/'), TEXT (''));
        LOCAL orderNumber = STRING ();
        LOCAL param = STRING ();
        orderNumber() <- getWord(path(), '/', 1);
        param() <- getWord(path(), '/', 2);
        logToFile('yandex', CONCAT ' : ', 'IN order method', method(), 'path', path(), 'order', orderNumber(), 'param', param());
        LOCAL order = InternetOrder();
        order() <- internetOrderByUuid(orderNumber());
        IF NOT order() THEN { orderNotFound(); RETURN; }
        IF (param() = 'status') THEN 
        {
            EXPORT statusYandex OBJECTS o = order() JSON;
        }
        ELSE 
        {
            headersTo(TEXT h) <- httpHeadersYandex(h);
            EXPORT getOrder OBJECTS o = order() JSON;
        }
    }
}


//основной метод api для работы с заказами
order (FILE f) {
    fileToString(f);
    logToFile('yandex', (CONCAT ' : ', 'IN order method', method(), resultString()));
    CASE 
        WHEN method() = 'POST' THEN createOrder(f);
        WHEN method() = 'PUT' THEN updateOrder(f);
        WHEN method() = 'DELETE' THEN deleteOrder(f);
        WHEN method() = 'GET' THEN getOrder(f);
}