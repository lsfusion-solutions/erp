MODULE ShelfSpace;

REQUIRE LogTools, ItemPack, Store, LegalEntity, SkuLedger, ZReport, Pricing, PriceList, PriceListPromotion, Range, ItemSize;

NAMESPACE ShelfSpace;

// Astor Планограмщик

@defineLogRotate(planogram, 5, weekly);

GROUP shelfSpace 'Экспорт';
exportDirectoryShelfSpace 'Путь для экспорта файлов (XML)' = DATA STRING[500] () IN shelfSpace;
imagesPathShelfSpace 'Путь для выгрузки изображений' = DATA STRING[250]()IN shelfSpace;

formulaDateT =  [FORMULA STRING[20] 'to_char(($1),\'YYYYMMDDHH24MISSMS\')']( DATETIME dt);

//-- 1.	CatalogList_Brands

FORM CatalogList_Brands FORMEXTID '=ShelfSpaceExchange:CatalogList_Brands'
    PROPERTIES ATTR ='http://www.w3.org/2001/XMLSchema' EXTID 'xmlns:xs', ='http://www.w3.org/2001/XMLSchema-instance' EXTID 'xmlns:xsi'
    PROPERTIES type = 'CatalogList_Brands' ATTR EXTID 'xsi:type'

    OBJECTS b = Brand EXTID ':ListElements'
    PROPERTIES  = STRING(b) EXTID ':ID',
                =  STRING[50](OVERRIDE name(b),'') EXTID ':Description'
;
CatalogList_Brands 'Экспорт брендов (CatalogList_Brands)'(){
    EXPORT CatalogList_Brands XML TO System.exportFile;
    WRITE System.exportFile() TO 'file://' + exportDirectoryShelfSpace() + '/' + 'CatalogList_Brands' +'_'+ formulaDateT(currentDateTime());
} IN shelfSpace;

//-- 2.	CatalogList_ItemStatuses

FORM CatalogList_ItemStatuses FORMEXTID '=ShelfSpaceExchange:CatalogList_ItemStatuses'
    PROPERTIES ATTR ='http://www.w3.org/2001/XMLSchema' EXTID 'xmlns:xs', ='http://www.w3.org/2001/XMLSchema-instance' EXTID 'xmlns:xsi'
    PROPERTIES type = 'CatalogList_ItemStatuses' ATTR EXTID 'xsi:type'

    OBJECTS b = INTEGER EXTID ':ListElements'
    
    PROPERTIES  
        = IF b==1 THEN 'Active' ELSE 'Passive' EXTID ':ID',
        = IF b==1 THEN 'Active' ELSE 'Passive' EXTID ':Description',
        = IF b==1 THEN 'True' ELSE 'False' EXTID ':Active'
    
    FILTERS iterate(b,0,1)
;
CatalogList_ItemStatuses 'Экспорт каталога статусов (CatalogList_ItemStatuses)'(){
    EXPORT CatalogList_ItemStatuses XML TO System.exportFile;
    WRITE System.exportFile() TO 'file://' + exportDirectoryShelfSpace() + '/' + 'CatalogList_ItemStatuses' +'_'+ formulaDateT(currentDateTime());
} IN shelfSpace;

//-- 3.	CatalogList_ClassifierUnits


FORM CatalogList_ClassifierUnits FORMEXTID '=ShelfSpaceExchange:CatalogList_ClassifierUnits'
    PROPERTIES ATTR ='http://www.w3.org/2001/XMLSchema' EXTID 'xmlns:xs', ='http://www.w3.org/2001/XMLSchema-instance' EXTID 'xmlns:xsi'
    PROPERTIES type = 'CatalogList_ClassifierUnits' ATTR EXTID 'xsi:type'

    OBJECTS b = UOM EXTID ':ListElements'
    PROPERTIES  = STRING(b) EXTID ':ID',
        =  STRING[25](OVERRIDE name(b),'') EXTID ':Description'
    
;
CatalogList_ClassifierUnits 'Экспорт ед. изм. (CatalogList_ClassifierUnits)'(){
    EXPORT CatalogList_ClassifierUnits XML TO System.exportFile;
    WRITE System.exportFile() TO 'file://' + exportDirectoryShelfSpace() + '/' + 'CatalogList_ClassifierUnits' +'_'+ formulaDateT(currentDateTime());
} IN shelfSpace;

//-- 4.	CatalogList_Countries

FORM CatalogList_Countries FORMEXTID '=ShelfSpaceExchange:CatalogList_Countries'
    PROPERTIES ATTR ='http://www.w3.org/2001/XMLSchema' EXTID 'xmlns:xs', ='http://www.w3.org/2001/XMLSchema-instance' EXTID 'xmlns:xsi'
    PROPERTIES type = 'CatalogList_Countries' ATTR EXTID 'xsi:type'

    OBJECTS b = Country EXTID ':ListElements'
    PROPERTIES  = STRING(b) EXTID ':ID',
        =  STRING[25](OVERRIDE name(b),'') EXTID ':Description'
;
CatalogList_Countries 'Экспорт стран (CatalogList_Countries)'(){
    EXPORT CatalogList_Countries XML TO System.exportFile;
    WRITE System.exportFile() TO 'file://' + exportDirectoryShelfSpace() + '/' + 'CatalogList_Countries' +'_'+ formulaDateT(currentDateTime());
} IN shelfSpace;

//-- 5.	CatalogList_OrgUnits

FORM CatalogList_OrgUnits FORMEXTID '=ShelfSpaceExchange:CatalogList_OrgUnits'
    PROPERTIES ATTR ='http://www.w3.org/2001/XMLSchema' EXTID 'xmlns:xs', ='http://www.w3.org/2001/XMLSchema-instance' EXTID 'xmlns:xsi'
    PROPERTIES type = 'CatalogList_OrgUnits' ATTR EXTID 'xsi:type'

    OBJECTS b = Store EXTID ':ListElements'
    PROPERTIES  = id(b) EXTID ':ID',                
                = IF b IS Store THEN 'False' ELSE 'True' EXTID ':IsFolder',
                = IF active(b) THEN 'False' ELSE 'True'  EXTID ':DeletionMark',
                //= STRING[36](OVERRIDE parent(b),'') EXTID ':Parent',
                = STRING[100](OVERRIDE name(b),'') EXTID ':Description',
                = STRING[150](OVERRIDE address[Store](b),'') EXTID ':Address'
;
CatalogList_OrgUnits 'Экспорт структурных единиц (CatalogList_OrgUnits)'(){
    EXPORT CatalogList_OrgUnits XML TO System.exportFile;
    WRITE System.exportFile() TO 'file://' + exportDirectoryShelfSpace() + '/' + 'CatalogList_OrgUnits' +'_'+ formulaDateT(currentDateTime());
} IN shelfSpace;

//-- 6.	CatalogList_Warehouses

FORM CatalogList_Warehouses FORMEXTID '=ShelfSpaceExchange:CatalogList_Warehouses'
    PROPERTIES ATTR ='http://www.w3.org/2001/XMLSchema' EXTID 'xmlns:xs', ='http://www.w3.org/2001/XMLSchema-instance' EXTID 'xmlns:xsi'
    PROPERTIES type = 'CatalogList_Warehouses' ATTR EXTID 'xsi:type'

    OBJECTS b = DepartmentStore EXTID ':ListElements'
    PROPERTIES  
        = id(b) EXTID ':ID',
        = IF active(b) THEN 'False' ELSE 'True'  EXTID ':DeletionMark',
        = id(store(b)) EXTID ':Owner',
        = STRING[50](OVERRIDE name(b),'') EXTID ':Description',
        = STRING[50](phone(b)) EXTID ':PhoneNumber',                   
        = NUMERIC[10,1](tradingSquare(b)) EXTID ':Square'
    FILTERS stockGroup(b)==store(b)
;
CatalogList_Warehouses 'Экспорт складов (CatalogList_Warehouses)'(){
    EXPORT CatalogList_Warehouses XML TO System.exportFile;
    WRITE System.exportFile() TO 'file://' + exportDirectoryShelfSpace() + '/' + 'CatalogList_Warehouses' +'_'+ formulaDateT(currentDateTime());
} IN shelfSpace;

//-- 9.	CatalogList_Item

itemGroup = DATA LOCAL ItemGroup(INTEGER);

FORM CatalogList_Item FORMEXTID '=ShelfSpaceExchange:CatalogList_Item'
    PROPERTIES ATTR ='http://www.w3.org/2001/XMLSchema' EXTID 'xmlns:xs', ='http://www.w3.org/2001/XMLSchema-instance' EXTID 'xmlns:xsi'
    PROPERTIES type = 'CatalogList_Item' ATTR EXTID 'xsi:type'

    OBJECTS b = INTEGER EXTID ':ListElements'
    PROPERTIES  = id(itemGroup(b)) EXTID ':ID',
        = 'True' IF itemGroup(b) IS ItemGroup EXTID ':IsFolder',
        = IF active(itemGroup(b)) THEN 'False' ELSE 'True'  EXTID ':DeletionMark',
        = STRING[50](OVERRIDE id(parent(itemGroup(b))), '') EXTID ':Parent',
        = STRING[80](OVERRIDE name(itemGroup(b)),'') EXTID ':Description'
    FILTERS itemGroup(b)
        
    OBJECTS i = Item EXTID ':ListElements'
    PROPERTIES  id(i) EXTID ':ID',
        = 'False' IF i IS Item EXTID ':IsFolder',
        = IF active(i) THEN 'False' ELSE 'True'  EXTID ':DeletionMark',
        = STRING[50](OVERRIDE id(itemGroup(i)), '') EXTID ':Parent',
        = STRING[80](OVERRIDE name(i),'') EXTID ':Description',
        = IF passScales(i) THEN 'True' ELSE 'False'  EXTID ':WeightItem',
        = STRING(country(i))  EXTID ':Country',
        = STRING(UOM(i))  EXTID ':BaseUnit',
        = STRING(brand(i))  EXTID ':Brand'
    FILTERS active(i) AND id(i)
;
CatalogList_Item 'Экспорт товаров и групп (CatalogList_Item)'(){
    itemGroup(INTEGER i)<- NULL;
    LOCAL int = INTEGER ();
    int()<- 0;
    FOR active(ItemGroup g) AND level(g) ORDER level(g), g NOINLINE DO{
        itemGroup(int())<- g;
        int()<- int() (+) 1;
    } 
    EXPORT CatalogList_Item XML TO System.exportFile;
    WRITE System.exportFile() TO 'file://' + exportDirectoryShelfSpace() + '/' + 'CatalogList_Item' +'_'+ formulaDateT(currentDateTime());
} IN shelfSpace;

//-- 10.	CatalogList_Units

FORM CatalogList_Units FORMEXTID '=ShelfSpaceExchange:CatalogList_Units'
    PROPERTIES ATTR ='http://www.w3.org/2001/XMLSchema' EXTID 'xmlns:xs', ='http://www.w3.org/2001/XMLSchema-instance' EXTID 'xmlns:xsi'
    PROPERTIES type = 'CatalogList_Units' ATTR EXTID 'xsi:type'

    OBJECTS b = Barcode EXTID ':ListElements'
    PROPERTIES
        = STRING (b) EXTID ':ID',
        = IF active(sku(b)) THEN 'False' ELSE 'True'  EXTID ':DeletionMark',
        = STRING[50](id(sku(b))) EXTID ':Owner',
        = STRING[25](OVERRIDE name(UOM(b)), '') EXTID ':Description',
        = STRING[50](UOM(b)) EXTID ':ClassifierUnit',
        = NUMERIC[10,3](amount(b)) EXTID ':Coefficient',
        = NUMERIC[10,3](height(sku(b))/1000) EXTID ':Height',
        = NUMERIC[10,3](length[Item](sku(b))/1000) EXTID ':Length',
        = NUMERIC[10,3](width(sku(b))/1000) EXTID ':Depth',
        = NUMERIC[15,4](grossWeight(sku(b))) EXTID ':Gross',
        = NUMERIC[15,4](netWeight(sku(b))) EXTID ':Net'
    FILTERS primary(b),UOM(b)
;
CatalogList_Units 'Экспорт единиц измерения и ВГХ (CatalogList_Units)'(){
    
    EXPORT CatalogList_Units XML TO System.exportFile;
    WRITE System.exportFile() TO 'file://' + exportDirectoryShelfSpace() + '/' + 'CatalogList_Units' +'_'+ formulaDateT(currentDateTime());
} IN shelfSpace;

//-- 11.	DocumentList_Zreport

inZ = DATA LOCAL BOOLEAN (Stock,DATE);
FORM DocumentList_Zreport FORMEXTID '=ShelfSpaceExchange:DocumentList_Zreport'
    PROPERTIES ATTR ='http://www.w3.org/2001/XMLSchema' EXTID 'xmlns:xs', ='http://www.w3.org/2001/XMLSchema-instance' EXTID 'xmlns:xsi'
    PROPERTIES type = 'DocumentList_Zreport' ATTR EXTID 'xsi:type'

    OBJECTS dd = (st =Stock , dt = DATE ) EXTID ':ListElements'

    PROPERTIES
                = (CONCAT'_', id(st),toDateISO(dt)) EXTID ':ID', 
                = 'False' IF st IS Stock AND dt IS DATE EXTID ':DeletionMark', 
                = toDateISO(dt) EXTID ':Date', 
                = 'True' IF st IS Stock AND dt IS DATE EXTID ':Posted', 
                = id(store(st)) EXTID ':OrgUnit'
    FILTERS inZ(st,dt)

    OBJECTS l = SaleLedger EXTID ':Items'
    PROPERTIES 
            = id(sku(l)) EXTID ':Item', 
            = id(stock(l)) EXTID ':Warehouse', 
            = NUMERIC[15,3](OVERRIDE quantity(l), 0.0) EXTID ':Quantity', 
            = NUMERIC[15,2](OVERRIDE sum(l), 0.0) EXTID ':Sum',
            = NUMERIC[15,2](OVERRIDE costSum(l), 0.0)  EXTID ':CostSum'
    FILTERS stock(l)==st, 
            date(l)==dt,
            active(l)
;

DocumentList_Zreport 'Экспорт Z-отчетов (DocumentList_Zreport)'(){
//    inZ(Stock st, DATE dt)<- NULL;
//    inZ(Stock st, DATE dt)<- TRUE WHERE dt==sum(currentDate(),-1) AND stockGroup(st) IS Store AND active(st);
//    
//    EXPORT DocumentList_Zreport XML TO System.exportFile;
//    WRITE System.exportFile() TO 'file://' + exportDirectoryShelfSpace() + '/' + 'DocumentList_Zreport' +'_'+ formulaDateT(currentDateTime());

    LOCAL NESTED dt = DATETIME();
    dt () <- currentDateTime();
    FOR active(DepartmentStore st) AND (id(st)==id(store(st)) OR stockGroup(st) IS Store) DO {
        inZ(Stock sts,DATE dt) <- NULL;
        inZ(st,DATE dt) <- TRUE WHERE iterate(dt,sum(currentDate(),-7),sum(currentDate(),-1)) AND dt IS DATE;
        TRY {
            EXPORT DocumentList_Zreport XML TO System.exportFile;
            WRITE System.exportFile() TO 'file://' + exportDirectoryShelfSpace() + '/' + 'DocumentList_Zreport' +'_'+ id(st)+'_'+formulaDateT(currentDateTime());
        } CATCH {
            logToFile('planogram', CONCAT '\n',  'DocumentList_Zreport' +'_'+ id(st) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE  'Ошибка при экспорте DocumentList_Zreport' +'_'+ id(st) +'. Обратитесь к администратору' NOWAIT;
        }
    }

} IN shelfSpace;

//-- 12.	DocumentList_Promo

inP = DATA LOCAL BOOLEAN (Stock,PriceList);

FORM DocumentList_Promo FORMEXTID '=ShelfSpaceExchange:DocumentList_Promo'
    PROPERTIES ATTR ='http://www.w3.org/2001/XMLSchema' EXTID 'xmlns:xs', ='http://www.w3.org/2001/XMLSchema-instance' EXTID 'xmlns:xsi'
    PROPERTIES type = 'DocumentList_Promo' ATTR EXTID 'xsi:type'

    OBJECTS dd=(b = PriceList, st=DepartmentStore) EXTID ':ListElements'
    PROPERTIES  = STRING[50](CONCAT '_', STRING(b), id(st))  EXTID ':ID',
                = toChar(dateTime(b),'yyyy-MM-ddThh24:mi:ss')  EXTID ':Date',
                = IF isPosted(b)  THEN 'True' ELSE 'False' EXTID ':Posted',
                = id(store(st)) EXTID ':OrgUnit',
                = fromDate(b) EXTID ':DateStart',
                = OVERRIDE toDate(b), 2039_12_31 EXTID ':DateEnd',
                = nameOperation(b) EXTID ':Description',
                = STRING[150](note(b)) EXTID ':Comment'

    FILTERS inP(st,b)

    OBJECTS d= PriceListDetail EXTID ':Items'
    PROPERTIES = idSku(d) EXTID ':Item'
    FILTERS priceList(d)==b, 
            NOT exclude(d)
            
;

DocumentList_Promo 'Экспорт Promo (DocumentList_Promo)'(){
//    inP(Stock sts,PriceList s) <- NULL;
//    inP(Stock st,PriceList p) <- TRUE WHERE st IS DepartmentStore AND in(p,st) AND isActive(p) AND isPromotion(operation(p)) AND (id(st)==id(store(st)) OR stockGroup(st) IS Store);// todo: Дописать условия
//
//    EXPORT DocumentList_Promo XML TO System.exportFile;
//    WRITE System.exportFile() TO 'file://' + exportDirectoryShelfSpace() + '/' + 'DocumentList_Promo' +'_'+ formulaDateT(currentDateTime());    
    
    FOR active(DepartmentStore st) AND (id(st)==id(store(st)) OR stockGroup(st) IS Store) DO {
        inP(Stock sts,PriceList s) <- NULL;
        inP(st,PriceList p) <- TRUE WHERE st IS DepartmentStore AND in(p,st) AND isActive(p) AND isPromotion(operation(p));// todo: Дописать условия
        TRY {
            EXPORT DocumentList_Promo XML TO System.exportFile;
            WRITE System.exportFile() TO 'file://' + exportDirectoryShelfSpace() + '/' + 'DocumentList_Promo' +'_'+ id(st)+'_'+formulaDateT(currentDateTime());
        } CATCH {
            logToFile('planogram', CONCAT '\n',  'DocumentList_Promo' +'_'+ id(st) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE  'Ошибка при экспорте DocumentList_Promo' +'_'+ id(st) +'. Обратитесь к администратору' NOWAIT;
        }
    }
} IN shelfSpace;

//-- 13.	InformationRegisterRecordSet_Barcode

FORM InformationRegisterRecordSet_Barcode FORMEXTID '=ShelfSpaceExchange:InformationRegisterRecordSet_Barcode'
    PROPERTIES ATTR ='http://www.w3.org/2001/XMLSchema' EXTID 'xmlns:xs', ='http://www.w3.org/2001/XMLSchema-instance' EXTID 'xmlns:xsi'
    PROPERTIES type = 'InformationRegisterRecordSet_Barcode' ATTR EXTID 'xsi:type'

    OBJECTS b = Barcode EXTID ':ListElements'
    PROPERTIES
            = STRING(b) EXTID ':Unit',
            = STRING[20](id(b))  EXTID ':Barcode',
            = IF primary(b) AND active(b) THEN 'False' ELSE 'True'  EXTID ':Remove'

    FILTERS primary(b) AND active(b)
;
InformationRegisterRecordSet_Barcode 'Экспорт штрихкодов (InformationRegisterRecordSet_Barcode)'(){
    EXPORT InformationRegisterRecordSet_Barcode XML TO System.exportFile;
    WRITE System.exportFile() TO 'file://' + exportDirectoryShelfSpace() + '/' + 'InformationRegisterRecordSet_Barcode' +'_'+ formulaDateT(currentDateTime());
} IN shelfSpace;

//-- 15.	InformationRegisterRecordSet_PicturesProducts

exportImagesShelfSpace 'Выгрузка изображений в каталог' () {
    IF exportDirectoryShelfSpace() AND imagesPathShelfSpace() THEN {
        FOR image(Sku s) AND active(s) AND barcode(s) DO {
            WRITE image(s) TO exportDirectoryShelfSpace() + imagesPathShelfSpace() + STRING(barcode(s));
        }
    }
} IN shelfSpace;

dateImageChangedShelfSpace = DATA DATE (Sku);

WHEN SETCHANGED(image(Sku s)) OR SETCHANGED (barcode(s)) DO {
    dateImageChangedShelfSpace(s) <- currentDate();
}

exportChangedImagesShelfSpace 'Выгрузить измененные изображения' () {
    FOR image(Sku s) AND dateImageChangedShelfSpace(s) == sum(currentDate(), -1) DO {
        WRITE image(s) TO exportDirectoryShelfSpace() + imagesPathShelfSpace() + STRING(barcode(s));
    }
} IN shelfSpace;

 
FORM InformationRegisterRecordSet_PicturesProducts FORMEXTID '=ShelfSpaceExchange:InformationRegisterRecordSet_PicturesProducts'
    PROPERTIES ATTR ='http://www.w3.org/2001/XMLSchema' EXTID 'xmlns:xs', ='http://www.w3.org/2001/XMLSchema-instance' EXTID 'xmlns:xsi'
    PROPERTIES type = 'InformationRegisterRecordSet_PicturesProducts' ATTR EXTID 'xsi:type'

    OBJECTS b = Item EXTID ':ListElements'
    PROPERTIES
        = STRING(barcode(b)) EXTID ':Unit',
        = STRING[150](STRING(barcode(b))+'.jpg')  EXTID ':FileName'
    FILTERS image(b) AND active(b) AND barcode(b)
;
InformationRegisterRecordSet_PicturesProducts 'Экспорт изображений (InformationRegisterRecordSet_PicturesProducts)'(){
    EXPORT InformationRegisterRecordSet_PicturesProducts XML TO System.exportFile;
    WRITE System.exportFile() TO 'file://' + exportDirectoryShelfSpace() + '/' + 'InformationRegisterRecordSet_PicturesProducts' +'_'+ formulaDateT(currentDateTime());
} IN shelfSpace;

//-- 16.	InformationRegisterRecordSet_ItemStatuses

fullUnload = DATA LOCAL BOOLEAN ();
inR = DATA LOCAL BOOLEAN (Sku,Store);

FORM InformationRegisterRecordSet_ItemStatuses FORMEXTID '=ShelfSpaceExchange:InformationRegisterRecordSet_ItemStatuses'
    PROPERTIES ATTR ='http://www.w3.org/2001/XMLSchema' EXTID 'xmlns:xs', ='http://www.w3.org/2001/XMLSchema-instance' EXTID 'xmlns:xsi'
    PROPERTIES type = 'InformationRegisterRecordSet_ItemStatuses' ATTR EXTID 'xsi:type'


    OBJECTS dd =(s=Sku, st = Store) EXTID ':ListElements'
    PROPERTIES
             = id(s) EXTID ':Item', 
             = id(st) EXTID ':OrgUnit', 
             =  IF Range.countRange(s,st,currentDate()) THEN 'Active' ELSE 'Passive' EXTID ':Status'
    FILTERS inR(s,st) //Range.countRange(s,st,currentDate())
    
    PROPERTIES = IF fullUnload() THEN  'True' ELSE 'False' EXTID ':FullUnload'    
;

InformationRegisterRecordSet_ItemStatuses 'Экспорт статусов (InformationRegisterRecordSet_ItemStatuses)'(){
//    inR(Sku s,Store st)<- NULL;
//    inR(Sku s,Store st)<- TRUE WHERE active(st) AND Range.countRange(s,st,currentDate());
//    fullUnload()<- TRUE;
//
//    EXPORT InformationRegisterRecordSet_ItemStatuses XML TO System.exportFile;
//    WRITE System.exportFile() TO 'file://' + exportDirectoryShelfSpace() + '/' + 'InformationRegisterRecordSet_ItemStatuses' +'_'+ formulaDateT(currentDateTime());

    LOCAL NESTED dt = DATETIME();
    dt () <- currentDateTime();
    FOR active(Store st) DO {
        inR(Sku s,Store sts)<- NULL;
        inR(Sku s,st)<- TRUE WHERE active(st) AND Range.countRange(s,st,currentDate());
        fullUnload()<- TRUE;
        TRY {
            EXPORT InformationRegisterRecordSet_ItemStatuses XML TO System.exportFile;
            WRITE System.exportFile() TO 'file://' + exportDirectoryShelfSpace() + '/' + 'InformationRegisterRecordSet_ItemStatuses' +'_'+ id(st)+'_'+formulaDateT(currentDateTime());
        } CATCH {
            logToFile('planogram', CONCAT '\n',  'InformationRegisterRecordSet_ItemStatuses' +'_'+ id(st) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE  'Ошибка при экспорте InformationRegisterRecordSet_ItemStatuses' +'_'+ id(st) +'. Обратитесь к администратору' NOWAIT;
        }
    }
} IN shelfSpace;

//-- 17.	InformationRegisterRecordSet_Price

inP = DATA LOCAL BOOLEAN (Stock,Sku);

FORM InformationRegisterRecordSet_Price FORMEXTID '=ShelfSpaceExchange:InformationRegisterRecordSet_Price'
    PROPERTIES ATTR ='http://www.w3.org/2001/XMLSchema' EXTID 'xmlns:xs', ='http://www.w3.org/2001/XMLSchema-instance' EXTID 'xmlns:xsi'
    PROPERTIES type = 'InformationRegisterRecordSet_Price' ATTR EXTID 'xsi:type'

    OBJECTS dd = (st =Stock , s=Sku ) EXTID ':ListElements'

    PROPERTIES
        = toChar(fromDateTime(currentRetailPricingPriceListLedger(s,st)),'yyyy-MM-ddThh24:mi:ss') EXTID ':Period',
        = id(s) EXTID ':Item',
        = id(store(st)) EXTID ':OrgUnit',
        = NUMERIC[15,2](currentRetailPricingPrice(s,st)) EXTID ':Price'

    FILTERS currentRetailPricingPrice(s,st),
        inP(st,s)
;

InformationRegisterRecordSet_Price 'Экспорт статусов (InformationRegisterRecordSet_Price)'(){
    //    inB(Stock st, Sku s)<- NULL;
    //    inB(Stock st, DATE dt)<- TRUE WHERE dt==sum(currentDate(),-1) AND stockGroup(st) IS Store AND active(st);
    //
    //    EXPORT InformationRegisterRecordSet_Price XML TO System.exportFile;
    //    WRITE System.exportFile() TO 'file://' + exportDirectoryShelfSpace() + '/' + 'InformationRegisterRecordSet_Price' +'_'+ formulaDateT(currentDateTime());

    LOCAL NESTED dt = DATETIME();
    dt () <- currentDateTime();
    FOR active(DepartmentStore st) AND (id(st)==id(store(st)) OR stockGroup(st) IS Store) DO {
        inP(Stock sts,Sku s) <- NULL;
        inP(st,Sku s) <- TRUE WHERE st IS DepartmentStore AND active(s);// todo: Дописать условия
        TRY {
            EXPORT InformationRegisterRecordSet_Price XML TO System.exportFile;
            WRITE System.exportFile() TO 'file://' + exportDirectoryShelfSpace() + '/' + 'InformationRegisterRecordSet_Price' +'_'+ id(st)+'_'+formulaDateT(currentDateTime());
        } CATCH {
            logToFile('planogram', CONCAT '\n',  'InformationRegisterRecordSet_Price' +'_'+ id(st) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE  'Ошибка при экспорте InformationRegisterRecordSet_Price' +'_'+ id(st) +'. Обратитесь к администратору' NOWAIT;
        }
    }
} IN shelfSpace;

//-- 18.	InformationRegisterRecordSet_StockBalance
inB = DATA LOCAL BOOLEAN (Stock,Sku);
FORM InformationRegisterRecordSet_StockBalance FORMEXTID '=ShelfSpaceExchange:InformationRegisterRecordSet_StockBalance'
    PROPERTIES ATTR ='http://www.w3.org/2001/XMLSchema' EXTID 'xmlns:xs', ='http://www.w3.org/2001/XMLSchema-instance' EXTID 'xmlns:xsi'
    PROPERTIES type = 'InformationRegisterRecordSet_StockBalance' ATTR EXTID 'xsi:type'

    OBJECTS dd = (st =Stock , s=Sku ) EXTID ':ListElements'

    PROPERTIES
        = id(s) EXTID ':Item',
        = id(st) EXTID ':Warehouse',
        = currentBalance(s,st) EXTID ':Quantity'

    FILTERS currentBalance(s,st),
            inB(st,s)     
;

InformationRegisterRecordSet_StockBalance 'Экспорт остатков (InformationRegisterRecordSet_StockBalance)'(){
//    inB(Stock st, Sku s)<- NULL;
//    inB(Stock st, DATE dt)<- TRUE WHERE dt==sum(currentDate(),-1) AND stockGroup(st) IS Store AND active(st);
//
//    EXPORT InformationRegisterRecordSet_StockBalance XML TO System.exportFile;
//    WRITE System.exportFile() TO 'file://' + exportDirectoryShelfSpace() + '/' + 'InformationRegisterRecordSet_StockBalance' +'_'+ formulaDateT(currentDateTime());

    LOCAL NESTED dt = DATETIME();
    dt () <- currentDateTime();
    FOR active(DepartmentStore st) AND (id(st)==id(store(st)) OR stockGroup(st) IS Store) DO {
        inB(Stock sts,Sku s) <- NULL;
        inB(st,Sku s) <- TRUE WHERE st IS DepartmentStore AND active(s);// todo: Дописать условия
        TRY {
            EXPORT InformationRegisterRecordSet_StockBalance XML TO System.exportFile;
            WRITE System.exportFile() TO 'file://' + exportDirectoryShelfSpace() + '/' + 'InformationRegisterRecordSet_StockBalance' +'_'+ id(st)+'_'+formulaDateT(currentDateTime());
        } CATCH {
            logToFile('planogram', CONCAT '\n',  'InformationRegisterRecordSet_StockBalance' +'_'+ id(st) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE  'Ошибка при экспорте InformationRegisterRecordSet_StockBalance' +'_'+ id(st) +'. Обратитесь к администратору' NOWAIT;
        }
    }
} IN shelfSpace;

EXTEND FORM integrationData
    PROPERTIES () exportDirectoryShelfSpace,
        imagesPathShelfSpace ,
        exportImagesShelfSpace,
        exportChangedImagesShelfSpace,
        CatalogList_Brands,
        CatalogList_ItemStatuses,
        CatalogList_ClassifierUnits,
        CatalogList_Countries,
        CatalogList_OrgUnits,
        CatalogList_Warehouses,
        CatalogList_Item,
        CatalogList_Units,
        DocumentList_Zreport,
        DocumentList_Promo,
        InformationRegisterRecordSet_Barcode,
        InformationRegisterRecordSet_Price,
        InformationRegisterRecordSet_PicturesProducts,
        InformationRegisterRecordSet_ItemStatuses,
        InformationRegisterRecordSet_StockBalance

//    OBJECTS sds = DepartmentStore
//    PROPERTIES (sds) READONLY name, id, nameLegalEntity
//    FILTERGROUP activeSDS FILTER 'Активный' active(sds) DEFAULT

//    TREE skuTree sg = SkuGroup PARENT parent(sg)
//    PROPERTIES READONLY order(sg), name(sg)
//    PROPERTIES (sg) skipExport BACKGROUND backgroundSkipExport(sg)
//    FILTERGROUP inactive FILTER 'Активные' active(sg) 'F6' DEFAULT
//    ORDERS order(sg), name(sg)
//
//    OBJECTS ra = Range
//    PROPERTIES (ra) READONLY name, change, dateTimeExport
//    PROPERTIES READONLY 'id' = STRING[15](LONG(ra))
//    OBJECTS ri = DeleteRange
//    PROPERTIES (ri) READONLY id, name
;

DESIGN integrationData {
    pane {
        NEW integrationShelfSpace {
            //horizontal = TRUE;
            fill = 1;
            caption = 'Планограмщик';
            MOVE GROUP (shelfSpace) {
                horizontal = FALSE;
            }
//            NEW integrationXMLRight{
//                fill = 1;
//                NEW tabExport{
//                    fill = 1;
//                    tabbed = TRUE;
//                    NEW tabExport1{
//                        fill = 1;
//                        caption = 'Основные данные';
//                        horizontal = FALSE;
//                        NEW integrationXMLRight1 {
//                            horizontal = FALSE;
//                            fill = 1;
//                            NEW integrationXMLRightPanel{
//                                horizontal = TRUE;
//                                MOVE PROPERTY (dateTimeStatusDelete());
//                                MOVE PROPERTY (dateTimeLevel());
//                            }
//                            MOVE BOX(sds);
//                        }
//                        MOVE BOX(TREE skuTree);
//                    }
//                    NEW tabExport2{
//                        fill = 1;
//                        caption = 'Матрицы';
//                        horizontal = FALSE;
//                        MOVE BOX (ra);
//                        MOVE BOX (ri);
//                    }
//
//                }
//            }
        }
    }
}