MODULE ServiceAccountGoogle;

REQUIRE IntegrationGoogle, Time, Utils, LogTools;

NAMESPACE IntegrationGoogle;

// не ниже 5-й версии

@defineLogRotate(gsheets, 5, weekly);

CLASS ServiceGoogleAccount 'Сервисный аккаунт Google';
TABLE serviceGoogleAccount(ServiceGoogleAccount);

clientEmail 'Email' = DATA STRING[255] (ServiceGoogleAccount) NONULL IN id;
serviceAccount = GROUP AGGR ServiceGoogleAccount a BY clientEmail(a);

credentials = DATA FILE (ServiceGoogleAccount);

uploadCredentials 'Загрузить' (){
    NEWSESSION INPUT f = FILE DO{
        LOCAL issuer = STRING[255]();
        IMPORT JSON FROM f TO() issuer = client_email;
        IF issuer() AND NOT serviceAccount(issuer()) THEN NEW a = ServiceGoogleAccount{
            clientEmail(a) <- issuer();
            credentials(a) <- f;
            APPLY;
        }
    }
}

signedJWT = DATA LOCAL STRING ();
signJWT INTERNAL 'lsfusion.erp.integration.JWTSign' (STRING, STRING, STRING);

tokenBearer = DATA LOCAL STRING();
headersServiceAccount (STRING s) = IF s = 'Authorization' THEN 'Bearer ' + tokenBearer();

authServiceAccount(ServiceGoogleAccount a){
    tokenBearer() <- NULL;

    LOCAL issuer = STRING();
    LOCAL key_id = STRING();
    LOCAL private_key = STRING();
    LOCAL token_uri = STRING();

    IMPORT JSON FROM credentials(a) TO() issuer = client_email, key_id = private_key_id,
    private_key = private_key, token_uri = token_uri;
    IF issuer() AND key_id() AND private_key() THEN {

        LOCAL headers = STRING ();
        LOCAL payload = STRING();
        headers() <- STRING(JSON FROM kid = key_id(), typ = 'JWT');
        payload() <- STRING(JSON FROM aud = token_uri(), iss = issuer(), iat = getSeconds(currentZDateTime()),
        scope = 'https://www.googleapis.com/auth/spreadsheets', exp = getSeconds(currentZDateTime()) + 360);
        signJWT(payload(), private_key(), headers());

        LOCAL response = FILE();
        EXTERNAL HTTP POST token_uri() PARAMS
        JSON FROM assertion = signedJWT(),
        grant_type = 'urn:ietf:params:oauth:grant-type:jwt-bearer'
        TO response
        ;
        IMPORT JSON FROM response() TO() tokenBearer = access_token;
    }ELSE MESSAGE 'Некорректные данные авторизации';
}

testAuthServieAccount 'Тест авторизации' (ServiceGoogleAccount a){
    authServiceAccount(a);
    IF tokenBearer() THEN MESSAGE 'Тест авторизации пройден успешно';
    ELSE MESSAGE 'Ошибка! Тест не пройден'
    ;
}

EXTEND FORM integrationData
    OBJECTS serviceAccount = ServiceGoogleAccount
    PROPERTIES (serviceAccount) clientEmail READONLY, testAuthServieAccount TOOLBAR DRAW serviceAccount
    PROPERTIES uploadCredentials() TOOLBAR DRAW serviceAccount
;

DESIGN integrationData{
    googleDrive{
        NEW serviceAccountGoogle{
            tabbed = TRUE;
            NEW serviceAccountsGoogle{
                caption = 'Аккаунты';
                MOVE BOX (serviceAccount);
            }
        }
    }
}

//запись диапазона

valueInputOption = 'USER_ENTERED';
majorDimension = DATA LOCAL STRING(STRING );
range = DATA LOCAL STRING(STRING);

dataToUpdate = DATA LOCAL STRING (STRING);

FORM batchUpdateValueByCells
    PROPERTIES() valueInputOption

    OBJECTS data = STRING
    PROPERTIES(data) majorDimension, range
    PROPERTIES = '[[' + dataToUpdate(data) + ']]' EXTID 'values'
    FILTERS dataToUpdate(data)
;

batchUpdateByCells (STRING spreadsheet, ServiceGoogleAccount a){
    IF (GROUP SUM 1 IF dataToUpdate(STRING s)) THEN{
        majorDimension(STRING s) <- 'ROWS' IF dataToUpdate(s);
        range(STRING s) <- s IF dataToUpdate(s);
        authServiceAccount(a);
        EXPORT batchUpdateValueByCells JSON;
        LOCAL response = FILE ();
        TRY {
            EXTERNAL HTTP POST 'https://sheets.googleapis.com/v4/spreadsheets/' + spreadsheet + '/values:batchUpdate'
                HEADERS headersServiceAccount PARAMS exportFile() TO response;
        }
        CATCH {
            fileToString(response());
            throwException(CONCAT ' : ', 'batchUpdateByCells', messageCaughtException(), resultString());
        }
        dataToUpdate(STRING s) <- NULL;
    } ELSE MESSAGE 'Нет данных для обновления';
}

rangeClear = DATA LOCAL STRING(STRING);

FORM batchClearByCells
    OBJECTS ranges = STRING
    PROPERTIES(ranges) rangeClear EXTID 'value'
    FILTERS rangeClear(ranges)
;

batchClearByCells (STRING spreadsheet, ServiceGoogleAccount a){
    IF (GROUP SUM 1 IF rangeClear(STRING s)) THEN{
        authServiceAccount(a);
        EXPORT batchClearByCells JSON;
        fileToString(exportFile());
        LOCAL response = FILE ();
        TRY {
            EXTERNAL HTTP POST 'https://sheets.googleapis.com/v4/spreadsheets/' + spreadsheet + '/values:batchClear'
                HEADERS headersServiceAccount PARAMS exportFile() TO response;
        }
            CATCH {
            fileToString(response());
            throwException(CONCAT ' : ', 'batchClearByCells', messageCaughtException(), resultString());
        }
        rangeClear(STRING s) <- NULL;
    } ELSE MESSAGE 'Нет данных для очистки';
}

valuesFile = DATA LOCAL FILE ();
valuesRows = DATA LOCAL STRING(INTEGER);
range = DATA LOCAL STRING();

FORM importValueRows
    PROPERTIES() range

    OBJECTS values = INTEGER
    PROPERTIES(values) valuesRows EXTID 'value'
;

getValuesRange(STRING spreadsheet, STRING range, ServiceGoogleAccount a){
    authServiceAccount(a);
    TRY EXTERNAL HTTP GET 'https://sheets.googleapis.com/v4/spreadsheets/' + spreadsheet + '/values/' + range
        HEADERS headersServiceAccount TO valuesFile;
    CATCH {
        fileToString(valuesFile());
        throwException(CONCAT ' : ', 'getValuesRange', messageCaughtException(), resultString());
    }
    IMPORT importValueRows FROM valuesFile();
}