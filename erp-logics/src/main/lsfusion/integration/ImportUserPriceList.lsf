MODULE ImportUserPriceList;

REQUIRE System,
        Item,
        PriceList,
        PriceListOperation,
        TaxItem;

CLASS ImportUserPriceListTypeFileExtension 'Тип файла (импорт прайс-листов)' {
    xls 'XLS',
    xlsx 'XLSX',
    csv 'CSV',
    dbf 'DBF'
}

CLASS ImportUserPriceListKeyType 'Ключ товара (импорт прайс-листов)' {
    barcode 'Штрихкод',
    item    'Код товара'
}

CLASS CustomKeyType 'Ключ свойства' {
    userPriceListDetail 'Строка прайса',
    item 'Товар'
}

CLASS ImportUserPriceListTypeDetail 'Свойство (импорт прайс-листов)' {
    idUserPriceList 'Код прайс-листа',
    dateUserPriceList 'Дата прайс-листа',
    idItem 'Код товара',
    idItemGroup 'Код группы товара',
    barcodeItem 'Штрихкод товара',
    extraBarcodeItem 'Дополнительный штрихкод товара',
    packBarcode 'Штрихкод упаковки',
    amountPackBarcode 'Количество в упаковке', 
    articleItem 'Артикул товара',
    captionItem 'Название товара',
    idUOMItem 'Единица измерения',
    netWeightItem 'Масса нетто',
    grossWeightItem 'Масса брутто',
    valueVAT 'НДС, %',
    dateFrom 'Дата с',
    dateTo 'Дата по',
    originalName 'Наименование поставщика',
    originalBarcode 'Штрихкод поставщика',
    alcoholSupplierType 'Тип поставщика алкоголя',
    alcoholItem 'Содержание алкоголя',
    sidOrigin2Country 'Код страны 2 знака',
    nameCountry 'Наименование страны',
    nameOriginCountry 'Наименование страны (ориг.)'
}
TABLE importPriceListTypeDetail(ImportUserPriceListTypeDetail);

propImport 'Свойство' (ImportTypeDetail) = DATA Property (ImportUserPriceListTypeDetail);
canonicalNamePropImport 'Свойство' (ImportUserPriceListTypeDetail d) = canonicalName(propImport(d));

keyImport 'Ключ' = DATA CustomKeyType (ImportUserPriceListTypeDetail);
nameKeyImport 'Ключ' (ImportUserPriceListTypeDetail importTypeDetail) = staticName(keyImport(importTypeDetail));
captionKeyImport 'Ключ' (ImportUserPriceListTypeDetail importTypeDetail) = staticCaption(keyImport(importTypeDetail));

CLASS ImportUserPriceListType 'Тип импорта (импорт прайс-листов)';
TABLE importUserPriceListType(ImportUserPriceListType);
name 'Имя' =  DATA STRING[100](ImportUserPriceListType);

importAction 'Импортировать прайс-лист'  INTERNAL  'lsfusion.erp.integration.universal.userpricelist.ImportUserPriceListAction' (UserPriceList);
importUserPriceListType = DATA ImportUserPriceListType(UserPriceList);
nameImportUserPriceListType 'Тип импорта' (UserPriceList userPriceList) = name(importUserPriceListType(userPriceList));

importUserPriceListsAction 'Импортировать прайс-листы'  INTERNAL  'lsfusion.erp.integration.universal.userpricelist.ImportUserPriceListsAction' ();

userPriceListDetailIdId (sku, userPriceList) = GROUP MAX UserPriceListDetail userPriceListDetail BY id[Item](sku(userPriceListDetail)), id(userPriceList(userPriceListDetail));
id = DATA STRING[100] (UserPriceListDetail) IN id;
userPriceListDetail (id, userPriceList) = GROUP AGGR UserPriceListDetail userPriceListDetail WHERE userPriceListDetail IS UserPriceListDetail BY id(userPriceListDetail), userPriceList(userPriceListDetail);
userPriceListDetail (id, idUserPriceList) = GROUP AGGR UserPriceListDetail userPriceListDetail WHERE userPriceListDetail IS UserPriceListDetail BY id(userPriceListDetail), id(userPriceList(userPriceListDetail));

original 'Файл оригинала прайса'  = DATA FILE (UserPriceList);

saveOriginal 'Загрузить файл оригинала прайса' (UserPriceList i)  { INPUT =original(i) CHANGE; }
openOriginal 'Просмотреть оригинал прайса' (UserPriceList i)  { open(original(i)); }

imported 'Импортирована' = DATA BOOLEAN (UserPriceList);
imported 'Импортирована' = DATA BOOLEAN (UserPriceListDetail);

autoImport 'Автоматический импорт' = DATA BOOLEAN(ImportUserPriceListType);
autoImportDirectory 'Папка' =  DATA STRING[100](ImportUserPriceListType);

operation =  DATA Operation.Operation(ImportUserPriceListType);
nameOperation 'Операция' (ImportUserPriceListType importUserPriceListType) =  name(operation(importUserPriceListType));

company =  DATA LegalEntity(ImportUserPriceListType);
nameCompany 'Организация' (ImportUserPriceListType importUserPriceListType) =  name(company(importUserPriceListType));

stock =  DATA Stock(ImportUserPriceListType);
nameStock 'Склад' (ImportUserPriceListType importUserPriceListType) =  name(stock(importUserPriceListType));

quantityAdjustment 'Колонка остатка' =  DATA STRING[20](ImportUserPriceListType);
 
defaultItemGroup =  DATA ItemGroup(ImportUserPriceListType);
nameDefaultItemGroup 'Группа товаров' (ImportUserPriceListType importUserPriceListType) =  name(defaultItemGroup(importUserPriceListType));

startRow 'Начинать со строки' = DATA INTEGER(ImportUserPriceListType);
isPosted 'Импортировать проведёнными' = DATA BOOLEAN(ImportUserPriceListType);
doNotCreateItems 'Не создавать товары и штрихкоды' = DATA BOOLEAN(ImportUserPriceListType);
checkExistence 'Не создавать строки для несуществующих товаров' = DATA BOOLEAN(ImportUserPriceListType);
barcodeMaybeUPC 'Добавлять 0 к UPC штрих-кодам' = DATA BOOLEAN(ImportUserPriceListType);
checkColumn 'Проверочное поле' = DATA STRING[50](ImportUserPriceListType);
separator 'Разделитель' = DATA STRING[2](ImportUserPriceListType);
importUserPriceListKeyType 'Тип ключа' = DATA ImportUserPriceListKeyType(ImportUserPriceListType) NONULL;
captionImportUserPriceListKeyType 'Тип ключа' (ImportUserPriceListType importUserPriceListType) = staticCaption(importUserPriceListKeyType(importUserPriceListType));
nameImportUserPriceListKeyType 'Тип ключа' (ImportUserPriceListType importUserPriceListType) = staticName(importUserPriceListKeyType(importUserPriceListType));

TABLE importUserPriceListTypeDetail(ImportUserPriceListType, ImportUserPriceListTypeDetail);
index 'Поле' = DATA STRING[50] (ImportUserPriceListType, ImportUserPriceListTypeDetail);

replaceOnlyNull 'Не замещать' = DATA BOOLEAN (ImportUserPriceListType, ImportUserPriceListTypeDetail);

importUserPriceListTypeFileExtension  = DATA ImportUserPriceListTypeFileExtension(ImportUserPriceListType);
captionImportUserPriceListTypeFileExtension 'Тип файла' (ImportUserPriceListType importUserPriceListType) = staticCaption(importUserPriceListTypeFileExtension(importUserPriceListType));

TABLE importUserPriceListTypeDataPriceListType(ImportUserPriceListType, DataPriceListType);
index 'Поле' = DATA STRING[50] (ImportUserPriceListType, DataPriceListType);

FORM customKeyTypes 'Ключи свойства'
    OBJECTS k=CustomKeyType
    PROPERTIES(k) READONLY staticCaption
    LIST CustomKeyType OBJECT k
;

FORM importUserPriceListTypeDetails
    OBJECTS itd = ImportUserPriceListTypeDetail
    PROPERTIES(itd) staticCaption READONLY, canonicalNamePropImport, captionKeyImport
    LIST ImportUserPriceListTypeDetail OBJECT itd
;

FORM importUserPriceListTypeDetail 'Свойство импорта'
    OBJECTS itd = ImportUserPriceListTypeDetail PANEL
    PROPERTIES(itd) staticCaption, canonicalNamePropImport, captionKeyImport
    EDIT ImportUserPriceListTypeDetail OBJECT itd
;

FORM importUserPriceListTypeFileExtensions 'Типы файлов'
    OBJECTS f=ImportUserPriceListTypeFileExtension
    PROPERTIES(f) READONLY staticCaption
    LIST ImportUserPriceListTypeFileExtension OBJECT f
;

FORM importUserPriceListKeyTypes 'Типы ключа'
    OBJECTS k=ImportUserPriceListKeyType
    PROPERTIES(k) READONLY staticCaption
    LIST ImportUserPriceListKeyType OBJECT k
;

showSeparator (ImportUserPriceListType t) = importUserPriceListTypeFileExtension(t) == ImportUserPriceListTypeFileExtension.csv;

FORM importUserPriceListType 'Тип импорта'
    OBJECTS i=ImportUserPriceListType PANEL
    PROPERTIES(i) name, captionImportUserPriceListTypeFileExtension, startRow, isPosted, doNotCreateItems, checkExistence,
                  barcodeMaybeUPC, checkColumn, separator SHOWIF showSeparator(i), captionImportUserPriceListKeyType
    PROPERTIES(i)  nameOperation, nameCompany, nameStock, nameDefaultItemGroup,
                              quantityAdjustment
    PROPERTIES(i) autoImport, autoImportDirectory SHOWIF autoImport(i)
                   
    OBJECTS d = ImportUserPriceListTypeDetail
    PROPERTIES(d) staticCaption READONLY, canonicalNamePropImport, captionKeyImport
    PROPERTIES(i,d) index, replaceOnlyNull 
    PROPERTIES(d) NEWSESSION NEW, EDIT, DELETE 
                      
    OBJECTS p = DataPriceListType
    PROPERTIES(p) name
    PROPERTIES(i, p) index                  
                      
    EDIT ImportUserPriceListType OBJECT i
;

DESIGN importUserPriceListType {
    MOVE BOX(i);
    NEW tabbedContainer {
        fill = 1;
        type = TABBED;
        NEW columnsContainer {
            caption = 'Колонки';
            MOVE BOX(d);
        }
        NEW invoiceParamsContainer {
            caption = 'Параметры прайс-листа';
            MOVE PROPERTY(nameOperation(i));
            MOVE PROPERTY(nameCompany(i));
            MOVE PROPERTY(nameStock(i));
            MOVE PROPERTY(nameDefaultItemGroup(i));
            MOVE PROPERTY(quantityAdjustment(i));
            MOVE BOX(p);
        }
    }
    MOVE TOOLBARBOX;
}

FORM importUserPriceListTypes 'Типы импорта'
    OBJECTS i=ImportUserPriceListType
    PROPERTIES(i) READONLY name, captionImportUserPriceListTypeFileExtension, startRow, isPosted, doNotCreateItems, checkExistence,
                  barcodeMaybeUPC, checkColumn, separator SHOWIF showSeparator(i), captionImportUserPriceListKeyType
    PROPERTIES(i) READONLY autoImport, autoImportDirectory SHOWIF autoImport(i)               
    PROPERTIES(i) NEWSESSION NEW, EDIT, DELETE 
    LIST ImportUserPriceListType OBJECT i
;

EXTEND FORM integrationData
    OBJECTS ip=ImportUserPriceListType
    PROPERTIES(ip) READONLY name, captionImportUserPriceListTypeFileExtension, startRow, isPosted, doNotCreateItems, checkExistence,
                   barcodeMaybeUPC, checkColumn, separator SHOWIF showSeparator(ip), captionImportUserPriceListKeyType
    PROPERTIES(ip) NEWSESSION NEW, EDIT, DELETE 
    PROPERTIES() importUserPriceListsAction DRAW ip TOOLBAR;

DESIGN integrationData {
    pane {
        NEW importUserPriceListType {
            caption = 'Универсальный импорт (Прайс-лист)';
            MOVE BOX(ip);
        }
    }
}

EXTEND FORM userPriceList
    PROPERTIES(p) importAction DRAW d TOOLBAR
    PROPERTIES(p) nameImportUserPriceListType
    PROPERTIES(p) saveOriginal, openOriginal 
;

DESIGN userPriceList{
    detailContainer {
        NEW import {
            caption = 'Импорт';
            type = CONTAINERH;
            NEW universalImport {
                caption = 'Универсальный импорт';
                MOVE PROPERTY(nameImportUserPriceListType(p));
                MOVE PROPERTY(importAction(p));
            }
            NEW origin {
                caption = 'Оригинал прайса';
                MOVE PROPERTY(saveOriginal(p));
                MOVE PROPERTY(openOriginal(p));
            }
        }
    }
}