MODULE Solvo;

REQUIRE WMSIntegration, Warehouse, PurchaseShipment, SaleShipment, TripOrder, Move, WriteOff, SaleReturnShipment, WriteOffZoneBatch, PurchaseReturnShipmentZoneBatch;


isSolvo 'Склад c WMS Solvo' = DATA BOOLEAN (Warehouse);

EXTEND FORM warehouse 
    PROPERTIES (w) isSolvo SHOWIF isCompany(w);
DESIGN warehouse {
    headerMainParams {
        MOVE PROPERTY(isSolvo(w));
    }
}
    
host 'Хост' = DATA ISTRING[30]();
base 'База' = DATA ISTRING[30]();
login 'Логин' = DATA ISTRING[30]();
password 'Пароль' = DATA ISTRING[30]() ECHO;

connectionString 'строка подключения' () = 'jdbc:oracle:thin:' + login() + '/' + password() + '@//'+ host() + '/' + base();

EXTEND FORM integrationData 
    PROPERTIES() shost = host, base, login, password
;DESIGN  integrationData {
    wms {
        NEW solvo {
            caption = 'Solvo';
            fill = 1;
            NEW SPanel {
                MOVE PROPERTY (shost);
                MOVE PROPERTY (base());
                MOVE PROPERTY (login());
                MOVE PROPERTY (password());
            }
            NEW paneS {
                type = TABBED ;
                fill = 1;
            }
        }
    }
}

nowText() =  [FORMULA TEXT 'to_char(now(),($1))']('DD-MM-YYYY HH24:MI:SS'); 
format(STRING s) = escapeXMLValue(s);
format(BOOLEAN b) = IF b THEN 't' ELSE 'f';
format(DATETIME d) = toChar(d, 'YYYY-MM-DD HH24:MI');

defaultNumeratorSyncid = DATA Numerator ();
nameDefaultNumeratorSyncid 'Пакеты выгрузки в wms' = name(defaultNumeratorSyncid()) IN defaultNumerator;

EXTEND FORM defaultNumerators
    PROPERTIES() nameDefaultNumeratorSyncid = nameDefaultNumeratorSyncid
;

CLASS SlovoMessage 'Статус выгрузки Slovo';
TABLE slovoStatus(SlovoMessage);

id = DATA LONG (SlovoMessage) INDEXED;
type = DATA STRING[64](SlovoMessage);
status = DATA STRING[16](SlovoMessage) INDEXED;
errCode = DATA INTEGER (SlovoMessage);
errDescr = DATA STRING (SlovoMessage);
loaded = DATA DATETIME (SlovoMessage);
WHEN SET (status(SlovoMessage m) == 'ready') DO {
    errCode(m)<- NULL;
    errDescr(m)<- NULL;
}

headerId = DATA LOCAL INTEGER (LONG);
type = DATA LOCAL STRING (LONG);
meaasage = DATA LOCAL STRING (LONG);

insertString  = 
    'INSERT ALL'+
        ' WHEN header=0 THEN INTO from_host_header_message(ID,SRC_HOST_ID,DST_HOST_ID,TYPE,ACTION,STATUS,MESSAGE) VALUES (sync_id,\'host\',\'wms\',type,\'update\',\'ready\',meaasage)' +
        ' WHEN header>0 THEN INTO from_host_detail_message(ID,HEADER_ID,TYPE,ACTION,STATUS,MESSAGE) VALUES (sync_id,header,type,\'update\',\'ready\',meaasage)' +
        ' WITH data AS ('+
        (GROUP CONCAT ' SELECT ' + headerId(LONG id) + ' header, ' + id + ' sync_id, \'' + type(id) + '\' type, \''+ meaasage(id) + '\' meaasage FROM dual', ' UNION ALL' ORDER id)+
        ' ) SELECT * FROM data';

incrementedValue = DATA LOCAL NESTED LONG();    
numerateIds(LONG i) {
    NEWSESSION APPLY {
        incrementedValue() <- curValue(defaultNumeratorSyncid());
        curValue(Numerator n) <- curValue(n) + i WHERE n == defaultNumeratorSyncid();
    }
    headerId (LONG l) <- NULL;
    type (LONG l) <- NULL;
    meaasage (LONG l) <- NULL;
}

//товары
GROUP wmsParams 'WMS';

CLASS ConditionStorage 'Условие хранения';
TABLE conditionStorage (ConditionStorage);

@defineExternalizable(conditionStorage, STRING[100]);
name 'Наименование' = DATA STRING[100] (ConditionStorage);

FORM conditionStorage 'Условие хранения'
    OBJECTS c = ConditionStorage PANEL
    PROPERTIES(c) id, name
    
    EDIT ConditionStorage OBJECT c
;

FORM conditionsStorage 'Условия хранения'
    OBJECTS c = ConditionStorage
    PROPERTIES(c) READONLY id, name
    PROPERTIES(c) NEWSESSION NEW, EDIT, DELETE
    
    LIST ConditionStorage OBJECT c
;

conditionStorage = DATA ConditionStorage (Item);
nameConditionStorage 'Условие хранения' (Item item) = name(conditionStorage(item)) IN wmsParams;

CONSTRAINT DROPPED(ConditionStorage o IS ConditionStorage) AND [ GROUP SUM 1 IF NOT conditionStorage(Item io) BY PREV(conditionStorage(io))](o)
    MESSAGE 'Запрещено удалять атрибут (Условие хранения), так как на него есть ссылки в справочнике товаров';


CLASS ItemSpecification 'Характеристика товара';
TABLE itemSpecification (ItemSpecification);

@defineExternalizable(itemSpecification, STRING[100]);

name 'Наименование' = DATA STRING[100] (ItemSpecification);

FORM itemSpecification 'Характеристика товара'
    OBJECTS s = ItemSpecification PANEL
    PROPERTIES(s) id, name
    
    EDIT ItemSpecification OBJECT s
;

FORM itemSpecifications 'Характеристики товара'
    OBJECTS s = ItemSpecification
    PROPERTIES(s) READONLY id, name
    PROPERTIES(s) NEWSESSION NEW, EDIT, DELETE
    
    LIST ItemSpecification OBJECT s
;

itemSpecification = DATA ItemSpecification (Item);
nameItemSpecification 'Характеристика' (Item item) = name(itemSpecification(item)) IN wmsParams;

CONSTRAINT DROPPED(ItemSpecification o IS ItemSpecification) AND [ GROUP SUM 1 IF NOT itemSpecification(Item io) BY PREV(itemSpecification(io))](o)
    MESSAGE 'Запрещено удалять атрибут (Характеристика), так как на него есть ссылки в справочнике товаров';

countDaysToSale 'Дней для продажи' = DATA INTEGER (Item) IN wmsParams;

EXTEND FORM item
    PROPERTIES(i) nameConditionStorage, nameItemSpecification, countDaysToSale
;

DESIGN item {
    itemPrimaryColumn2 {
        MOVE GROUP(wmsParams,i) {
            alignment = STRETCH;
            columns = 1;
        }
    }
}

EXTEND FORM items 
    PROPERTIES(i) READONLYIF isReadonly() nameConditionStorage, nameItemSpecification, countDaysToSale
;

changed 'Время изменения' = DATA DATETIME (Item) IN wms;
slovoMessage = DATA SlovoMessage (Item);
statusSlovo 'Статус' (Item o) = status(slovoMessage(o)) IN wms;
errorSlovo 'Сообщение' (Item o) = errDescr(slovoMessage(o)) IN wms;
loaded 'Время выгрузки' (Item o) = loaded(slovoMessage(o)) IN wms;

WHEN CHANGED (id(Item o)) OR CHANGED (nameAttribute(o)) OR CHANGED (idBarcode(o)) OR CHANGED (shortNameUOM(o)) OR CHANGED (nameManufacturer(o)) OR CHANGED (nameCountry(o)
             OR CHANGED (conditionStorage(o)) OR CHANGED (itemSpecification(o)) OR CHANGED (countDaysToSale(o))) DO 
    changed(o) <- currentDateTime();

itemString (LONG syncId, Item s) = CONCAT'','<sku syncid=\'\'',syncId,'\'\' action=\'\'update\'\' syncdate=\'\'',nowText(),
    '\'\' sdid=\'\'',id(s),'\'\' sku_code=\'\'',id(s),'\'\' name=\'\'',format(nameAttribute(s)),'\'\' upc=\'\'',format(idBarcode(s)),
    '\'\' measure=\'\'',format(shortNameUOM(s)),'\'\' store_cond=\'\'',format(id(conditionStorage(s))),'\'\' producer_sdid=\'\'',format(nameManufacturer(s)),
    '\'\' country=\'\'',format(nameCountry(s)),'\'\' abc=\'\'\'\' minosg=\'\'',countDaysToSale(s),'\'\' sku_spec_id=\'\'',format(id(itemSpecification(s))),
    '\'\' description=\'\'\'\' divisibility=\'\'\'\'></sku>';

errorExportItems = DATA LOCAL BOOLEAN ();

exportItems 'Выгрузить товары в wms Solvo' ()  {
    errorExportItems() <- NULL;
    IF defaultNumeratorSyncid() THEN {
        IF countInItem() THEN {
            IF (GROUP SUM 1 IF in(Item i) AND NOT (conditionStorage(i) AND countDaysToSale(i) AND itemSpecification(i))) THEN {
                errorExportItems() <- TRUE;
                logToFile('WMS', CONCAT ' ', 'User:', currentUserName(), 'Write items error: не заданы все атрибуты для товаров: ', (GROUP CONCAT id(Item i) IF in(i) AND NOT (conditionStorage(i) AND countDaysToSale(i) AND itemSpecification(i)),', ' ORDER i));
                MESSAGE 'Не заданы все атрибуты для товаров: ' + (GROUP CONCAT id(Item i) IF in(i) AND NOT (conditionStorage(i) AND countDaysToSale(i) AND itemSpecification(i)),', ' ORDER i);
            } ELSE {
                numerateIds(countInItem());
                
                logToFile('WMS', CONCAT ' ', 'User:', currentUserName(), 'startId:', incrementedValue(), 'Write items:', (GROUP CONCAT id(Item i) IF in(i), ',' ORDER i));
                
                LOCAL syncId = LONG (Item);
                syncId(Item i) <- incrementedValue() - 1 + PARTITION SUM 1 IF in(i) ORDER i; 
                
                FOR syncId(Item i) DO {
                    headerId(syncId(i)) <- 0;
                    type(syncId(i)) <- 'sku';
                    meaasage(syncId(i)) <- itemString(syncId(i), i);
                }
                
                logToFile('WMS', CONCAT ' ', 'User:', currentUserName(), 'connectionString:', connectionString(), 'insertString:', insertString());
                
                EXTERNAL 
                    SQL connectionString()
                    EXEC insertString(); 
                
                NEWSESSION NESTED LOCAL {
                    FOR in(Item i) AND NOT slovoMessage(i) NEW s = SlovoMessage DO{
                        slovoMessage(i) <- s;
                    }
                    FOR in(Item i) DO {
                        id(slovoMessage(i)) <- syncId(i);
                        type(slovoMessage(i)) <- 'sku';
                        status(slovoMessage(i)) <- 'ready';
                        loaded(slovoMessage(i)) <- currentDateTime();
                    }
                    APPLY NESTED LOCAL;
                }
                
                MESSAGE 'Товары выгружены' NOWAIT;
                
                in(Item it) <- NULL;
            }
        }
    } ELSE {
        logToFile('WMS', CONCAT ' ', 'User:', currentUserName(), 'Write items error: не задан нумератор для пакетов выгрузки в wms');
        MESSAGE 'Не задан нумератор для пакетов выгрузки в wms';
    }
}

exportItems 'Выгрузить отмеченные товары в wms Solvo' (Item i)  { 
	NEWSESSION NESTED LOCAL {
	    in(i) <- TRUE;
	    exportItems();
	}
} TOOLBAR;

exportChangedItems 'Выгрузить изменившиеся товары в wms Solvo' ()  { 
	NEWSESSION NESTED LOCAL {
	    in(Item i) <- TRUE WHERE changed(i) AND NOT changed(i) < loaded(i);
	    exportItems();
	}
} TOOLBAR;

EXTEND FORM integrationData 
    OBJECTS sIt = Item
    PROPERTIES(sIt) READONLY in CHANGEABLE, id, idBarcode, nameAttribute, shortNameUOM, nameCountry, changed, loaded, statusSlovo, errorSlovo
    PROPERTIES exportItems(sIt), exportChangedItems() DRAW sIt
;
DESIGN  integrationData {
    paneS {
        MOVE BOX (sIt);
    }
}

//склады
changed 'Время изменения' = DATA DATETIME (Stock) IN wms;
slovoMessage = DATA SlovoMessage (Stock);
statusSlovo 'Статус' (Stock o) = status(slovoMessage(o)) IN wms;
errorSlovo 'Сообщение' (Stock o) = errDescr(slovoMessage(o)) IN wms;
loaded 'Время выгрузки' (Stock o) = loaded(slovoMessage(o)) IN wms;

WHEN CHANGED (id(Stock o)) OR CHANGED (name(o)) OR CHANGED (address(o)) OR CHANGED (phone(o)) OR CHANGED (email(o)) 
    OR CHANGED (isCustomer(o)) OR CHANGED (isSupplier(o)) DO 
    changed(o) <- currentDateTime();

stockString (LONG syncId, Stock s) = CONCAT'','<client syncid=\'\'',syncId,'\'\' action=\'\'update\'\' syncdate=\'\'',nowText(),
    '\'\' client_id=\'\'',id(s),'\'\' name=\'\'',format(name(s)),'\'\' is_customer=\'\'',format(isCustomer(s)),'\'\' is_supplier=\'\'',format(isSupplier(s)),
    '\'\' is_carrier=\'\'f\'\' is_producer=\'\'f\'\' measure=\'\'',format(phone(s)),'\'\' address=\'\'',format(address(s)),'\'\' email=\'\'',format(email(s)),'\'\' fax=\'\'\'\' comments=\'\'\'\'></client>';

exportStocks 'Выгрузить склады в wms Solvo' ()  { 
    IF defaultNumeratorSyncid() THEN {
        IF countInStock() THEN {
            
            numerateIds(countInStock());
            
            logToFile('WMS', CONCAT ' ', 'User:', currentUserName(), 'startId:', incrementedValue(), 'Write stocks:', (GROUP CONCAT id(Stock i) IF in(i), ',' ORDER i));
            
            LOCAL syncId = LONG (Stock);
            syncId(Stock i) <- incrementedValue() - 1 + PARTITION SUM 1 IF in(i) ORDER i; 
            
            FOR syncId(Stock i) DO {
                headerId(syncId(i)) <- 0;
                type(syncId(i)) <- 'client';
                meaasage(syncId(i)) <- stockString(syncId(i), i);
            }
            
            logToFile('WMS', CONCAT ' ', 'User:', currentUserName(), 'connectionString:', connectionString(), 'insertString:', insertString());
            
            EXTERNAL 
                SQL connectionString()
                EXEC insertString();
                
            NEWSESSION NESTED LOCAL {
                FOR in(Stock i) AND NOT slovoMessage(i) NEW s = SlovoMessage DO{
                    slovoMessage(i) <- s;
                }
                FOR in(Stock i) DO {
                    id(slovoMessage(i)) <- syncId(i);
                    type(slovoMessage(i)) <- 'client';
                    status(slovoMessage(i)) <- 'ready';
                    loaded(slovoMessage(i)) <- currentDateTime();
                }
                APPLY NESTED LOCAL;
            }
            
            MESSAGE 'Склады выгружены' NOWAIT;
            
            in(Stock st) <- NULL;
        }
    } ELSE {
        logToFile('WMS', CONCAT ' ', 'User:', currentUserName(), 'Write stocks error: не задан нумератор для пакетов выгрузки в wms');
        MESSAGE 'Не задан нумератор для пакетов выгрузки в wms';
    }
}

exportStocks 'Выгрузить отмеченные склады в wms Solvo' (Stock s)  { 
	NEWSESSION NESTED LOCAL {
	    in(s) <- TRUE;
	    exportStocks();
	}
} TOOLBAR;

exportChangedStocks 'Выгрузить изменившиеся склады в wms Solvo' ()  { 
	NEWSESSION NESTED LOCAL {
	    in(Stock s) <- TRUE WHERE changed(s) AND NOT changed(s) < loaded(s);
	    exportStocks();
	}
} TOOLBAR;

EXTEND FORM integrationData 
    OBJECTS sSt = Stock
    PROPERTIES(sSt) READONLY in CHANGEABLE, id, name, nameStockGroup, address, phone, email, changed, loaded, statusSlovo, errorSlovo
    PROPERTIES exportStocks(sSt), exportChangedStocks() DRAW sSt
;
DESIGN  integrationData {
    paneS {
        MOVE BOX (sSt);
    }
}

//приход
slovoMessage = DATA SlovoMessage (Purchase.Invoice);
statusSlovo 'Статус выгрузки' (Purchase.Invoice o) = CONCAT ' - ', status(slovoMessage(o)), errDescr(slovoMessage(o)) IN wms;
processingStatusSlovo 'Статус обработки'  = DATA STRING[50](Purchase.Invoice) IN wms;

beforeExportSolvo ABSTRACT (Purchase.Invoice);

incomingHeaderString (LONG syncId, Purchase.Invoice s) = CONCAT'','<incoming syncid=\'\'',syncId,'\'\' action=\'\'update\'\' syncdate=\'\'',nowText(),
    '\'\' inc_id=\'\'',id(s),'\'\' display_name=\'\'',format(seriesNumber(s)),'\'\' priority=\'\'99\'\' supplier_id=\'\'',format(idSupplierStock(s)),
    '\'\' carrier_id=\'\'\'\' type=\'\'A\'\' date_to_ship=\'\'',format(shipmentDateTime(s)),'\'\' responsible=\'\'\'\' comments=\'\'',format(note(s)),'\'\'>';

extraIncomingDetailString = ABSTRACT CASE STRING (Purchase.InvoiceDetail);
incomingDetailString (LONG syncId, Purchase.InvoiceDetail s) = CONCAT'','<incoming_detail syncid=\'\'',syncId,'\'\' action=\'\'update\'\' syncdate=\'\'',nowText(),
    '\'\' inc_id=\'\'',id(invoice(s)),'\'\' line=\'\'',STRING(index(s)),'\'\' sku_id=\'\'',idSku(s),'\'\' category=\'\'1\'\' ',extraIncomingDetailString(s),
    ' marker=\'\'-\'\' marker2=\'\'-\'\' qty=\'\'',format(STRING(quantity(s))),'\'\' uom=\'\'',format(shortNameUOMSku(s)),'\'\' comments=\'\'\'\'/>';

overExportSolvo  ABSTRACT (Purchase.Invoice);
overExportSolvoPurchaseInvoice = DATA LOCAL BOOLEAN ();

exportSolvo 'Выгрузить приход в wms Solvo' (Purchase.Invoice i) { 
    IF defaultNumeratorSyncid() THEN {
        NEWSESSION {
            IF isPosted(i) THEN {
                in(Item it) <- TRUE WHERE quantityInvoiceDetail(it, i) AND ((changed(it) AND NOT changed(it) < loaded(it)) OR NOT loaded(it));
                exportItems();
                
                in(Stock s) <- TRUE WHERE s == supplierStock(i) AND ((changed(s) AND NOT changed(s) < loaded(s)) OR NOT loaded(s));
                exportStocks();
                
                IF NOT errorExportItems() THEN {
                    beforeExportSolvo(i);
                                
                    overExportSolvo(i);
                    
                    IF NOT overExportSolvoPurchaseInvoice() THEN {
                        numerateIds(countInvoiceDetail(i) + 2);
                        
                        logToFile('WMS', CONCAT ' ', 'User:', currentUserName(), 'startId:', incrementedValue(), 'Write Purchase Invoice:', seriesNumber(i));
                        
                        IF NOT id(i) THEN {
                            id(i) <- CONCAT '_', seriesNumber(i), date(i);
                        }
                        
                        headerId(incrementedValue()) <- 0;
                        type(incrementedValue()) <- 'incoming';
                        meaasage(incrementedValue()) <- incomingHeaderString(incrementedValue(), i);
                        
                        FOR i == invoice(Purchase.InvoiceDetail d) DO {
                            headerId(incrementedValue() + index(d)) <- incrementedValue();
                            type(incrementedValue() + index(d)) <- 'incoming_detail';
                            meaasage(incrementedValue() + index(d)) <- incomingDetailString(incrementedValue() + index(d), d);
                        }
                        
                        headerId(incrementedValue() + countInvoiceDetail(i) + 1) <- incrementedValue();
                        type(incrementedValue() + countInvoiceDetail(i) + 1) <- '/incoming';
                        meaasage(incrementedValue() + countInvoiceDetail(i) + 1) <- '</incoming>';
                    }
                    
                    logToFile('WMS', CONCAT ' ', 'User:', currentUserName(), 'connectionString:', connectionString(), 'insertString:', insertString());
                    
                    EXTERNAL 
                        SQL connectionString()
                        EXEC insertString();
                        
                    IF NOT slovoMessage(i) THEN NEW s = SlovoMessage {
                        slovoMessage(i) <- s;
                    }
                    id(slovoMessage(i)) <- incrementedValue();
                    type(slovoMessage(i)) <- 'incoming';
                    status(slovoMessage(i)) <- 'ready';
                    loaded(slovoMessage(i)) <- currentDateTime();
                    
                    APPLY NESTED LOCAL;
                        
                    MESSAGE 'Накладная выгружена' NOWAIT;
                }
            } ELSE {
                logToFile('WMS', CONCAT ' ', 'User:', currentUserName(), 'Write Purchase Invoice error: запрещено выгружать непроведенный документ');
                MESSAGE 'Запрещено выгружать непроведенный документ';
            }
        }
    } ELSE {
        logToFile('WMS', CONCAT ' ', 'User:', currentUserName(), 'Write Purchase Invoice error: не задан нумератор для пакетов выгрузки в wms');
        MESSAGE 'Не задан нумератор для пакетов выгрузки в wms';
    }
}

EXTEND FORM Purchase.invoices 
    PROPERTIES (i) PANEL SHOWIF isSolvo(customerStock(i)) 
        exportSolvo, statusSlovo, processingStatusSlovo
;

DESIGN Purchase.invoices {
    actionContainer {
        NEW exportWMS {
            caption = 'Экспорт в WMS';
            type = CONTAINERV;
            MOVE PROPERTY(exportSolvo(i));
            MOVE PROPERTY(statusSlovo(i));
            MOVE PROPERTY(processingStatusSlovo(i));
        }
    }
}

//возврат от покупателя
slovoMessage = DATA SlovoMessage (SaleReturn.Invoice);
statusSlovo 'Статус выгрузки' (SaleReturn.Invoice o) = CONCAT ' - ', status(slovoMessage(o)), errDescr(slovoMessage(o)) IN wms;
processingStatusSlovo 'Статус обработки'  = DATA STRING[50](SaleReturn.Invoice) IN wms;

beforeExportSolvo ABSTRACT (SaleReturn.Invoice);

incomingHeaderString (LONG syncId, SaleReturn.Invoice s) = CONCAT'','<incoming syncid=\'\'',syncId,'\'\' action=\'\'update\'\' syncdate=\'\'',nowText(),
    '\'\' inc_id=\'\'',id(s),'\'\' display_name=\'\'',format(seriesNumber(s)),'\'\' priority=\'\'99\'\' supplier_id=\'\'',format(idCustomerStock(s)),
    '\'\' carrier_id=\'\'\'\' type=\'\'R\'\' date_to_ship=\'\'',format(shipmentDateTime(s)),'\'\' responsible=\'\'\'\' comments=\'\'',format(note(s)),'\'\'>';

extraIncomingDetailString = ABSTRACT CASE STRING (SaleReturn.InvoiceDetail);
incomingDetailString (LONG syncId, SaleReturn.InvoiceDetail s) = CONCAT'','<incoming_detail syncid=\'\'',syncId,'\'\' action=\'\'update\'\' syncdate=\'\'',nowText(),
    '\'\' inc_id=\'\'',id(invoice(s)),'\'\' line=\'\'',STRING(index(s)),'\'\' sku_id=\'\'',idSku(s),'\'\' category=\'\'1\'\' ',extraIncomingDetailString(s),
    ' marker=\'\'-\'\' marker2=\'\'-\'\' qty=\'\'',format(STRING(quantity(s))),'\'\' uom=\'\'',format(shortNameUOMSku(s)),'\'\' comments=\'\'\'\'/>';

overExportSolvo  ABSTRACT (SaleReturn.Invoice);
overExportSolvoSaleReturnInvoice = DATA LOCAL BOOLEAN ();

exportSolvo 'Выгрузить приход в wms Solvo' (SaleReturn.Invoice i) { 
    IF defaultNumeratorSyncid() THEN {
        NEWSESSION {
            IF isPosted(i) THEN {
                in(Item it) <- TRUE WHERE quantityInvoiceDetail(it, i) AND ((changed(it) AND NOT changed(it) < loaded(it)) OR NOT loaded(it));
                exportItems();
                
                in(Stock s) <- TRUE WHERE s == customerStock(i) AND ((changed(s) AND NOT changed(s) < loaded(s)) OR NOT loaded(s));
                exportStocks();
                
                IF NOT errorExportItems() THEN {
                    beforeExportSolvo(i);
                                
                    overExportSolvo(i);
                    
                    IF NOT overExportSolvoSaleReturnInvoice() THEN {
                        numerateIds(countInvoiceDetail(i) + 2);
                        
                        logToFile('WMS', CONCAT ' ', 'User:', currentUserName(), 'startId:', incrementedValue(), 'Write SaleReturn Invoice:', seriesNumber(i));
                        
                        IF NOT id(i) THEN {
                            id(i) <- CONCAT '_', seriesNumber(i), date(i);
                        }
                        
                        headerId(incrementedValue()) <- 0;
                        type(incrementedValue()) <- 'incoming';
                        meaasage(incrementedValue()) <- incomingHeaderString(incrementedValue(), i);
                        
                        FOR i == invoice(SaleReturn.InvoiceDetail d) DO {
                            headerId(incrementedValue() + index(d)) <- incrementedValue();
                            type(incrementedValue() + index(d)) <- 'incoming_detail';
                            meaasage(incrementedValue() + index(d)) <- incomingDetailString(incrementedValue() + index(d), d);
                        }
                        
                        headerId(incrementedValue() + countInvoiceDetail(i) + 1) <- incrementedValue();
                        type(incrementedValue() + countInvoiceDetail(i) + 1) <- '/incoming';
                        meaasage(incrementedValue() + countInvoiceDetail(i) + 1) <- '</incoming>';
                    }
                    
                    logToFile('WMS', CONCAT ' ', 'User:', currentUserName(), 'connectionString:', connectionString(), 'insertString:', insertString());
                    
                    EXTERNAL 
                        SQL connectionString()
                        EXEC insertString();
                        
                    IF NOT slovoMessage(i) THEN NEW s = SlovoMessage {
                        slovoMessage(i) <- s;
                    }
                    id(slovoMessage(i)) <- incrementedValue();
                    type(slovoMessage(i)) <- 'incoming';
                    status(slovoMessage(i)) <- 'ready';
                    loaded(slovoMessage(i)) <- currentDateTime();
                    
                    APPLY NESTED LOCAL;
                        
                    MESSAGE 'Накладная выгружена' NOWAIT;
                }
            } ELSE {
                logToFile('WMS', CONCAT ' ', 'User:', currentUserName(), 'Write SaleReturn Invoice error: запрещено выгружать непроведенный документ');
                MESSAGE 'Запрещено выгружать непроведенный документ';
            }
        }
    } ELSE {
        logToFile('WMS', CONCAT ' ', 'User:', currentUserName(), 'Write SaleReturn Invoice error: не задан нумератор для пакетов выгрузки в wms');
        MESSAGE 'Не задан нумератор для пакетов выгрузки в wms';
    }
}

EXTEND FORM SaleReturn.invoices 
    PROPERTIES (i) PANEL SHOWIF isSolvo(supplierStock(i)) 
        exportSolvo, statusSlovo, processingStatusSlovo
;

DESIGN SaleReturn.invoices {
    actionContainer {
        NEW exportWMS {
            caption = 'Экспорт в WMS';
            type = CONTAINERV;
            MOVE PROPERTY(exportSolvo(i));
            MOVE PROPERTY(statusSlovo(i));
            MOVE PROPERTY(processingStatusSlovo(i));
        }
    }
}

//Смена категории
idSolvo 'Код Solvo' = DATA STRING (Zone);
EXTEND FORM zone PROPERTIES(z) idSolvo AFTER name(z);
EXTEND FORM zones PROPERTIES(z) READONLY idSolvo AFTER name(z);

slovoMessage = DATA SlovoMessage (Move);
statusSlovo 'Статус выгрузки' (Move o) = CONCAT ' - ', status(slovoMessage(o)), errDescr(slovoMessage(o)) IN wms;
//processingStatusSlovo 'Статус обработки'  = DATA STRING[50](Move) IN wms;

beforeExportSolvo ABSTRACT (Move);

categoryHeaderString (LONG syncId, Move s) = CONCAT'','<category_change_req syncid=\'\'',syncId,'\'\' action=\'\'update\'\' syncdate=\'\'',nowText(),
    '\'\' doc_id=\'\'',id(s),'\'\' comments=\'\'',format(note(s)),'\'\' old_category_id=\'\'',(OVERRIDE format(idSolvo(fromZone(s))), '1'),
    '\'\' new_category_id=\'\'',(OVERRIDE format(idSolvo(toZone(s))), '1'),'\'\'>';

extraCategoryDetailString = ABSTRACT CASE STRING (MoveDetail);
categoryDetailString (LONG syncId, MoveDetail s) = CONCAT'','<category_change_req_detail syncid=\'\'',syncId,'\'\' action=\'\'update\'\' syncdate=\'\'',nowText(),
    '\'\' doc_id=\'\'',id(move(s)),'\'\' line=\'\'',STRING(index(s)),'\'\' sku_id=\'\'',idSku(s),'\'\' ',extraCategoryDetailString(s),
    '\'\' qty=\'\'',format(STRING(quantity(s))),'\'\' comments=\'\'\'\'/>';

exportSolvo 'Выгрузить категории в wms Solvo' (Move m) {
    IF defaultNumeratorSyncid() THEN {
        NEWSESSION {
            IF isPosted(m) THEN {
                in(Item it) <- TRUE WHERE (GROUP SUM quantity(MoveDetail d) IF sku(d) == it AND move(d) == m) AND ((changed(it) AND NOT changed(it) < loaded(it)) OR NOT loaded(it));
                exportItems();
                
                IF NOT errorExportItems() THEN {
                    beforeExportSolvo(m);
                                
                    numerateIds(countMoveDetail(m) + 2);
                    
                    logToFile('WMS', CONCAT ' ', 'User:', currentUserName(), 'startId:', incrementedValue(), 'Write Move:', seriesNumber(m));
                    
                    IF NOT id(m) THEN {
                        id(m) <- CONCAT '_', seriesNumber(m), date(m);
                    }
                    
                    headerId(incrementedValue()) <- 0;
                    type(incrementedValue()) <- 'category_change_req';
                    meaasage(incrementedValue()) <- categoryHeaderString(incrementedValue(), m);
                    
                    FOR m == move(MoveDetail d) DO {
                        headerId(incrementedValue() + index(d)) <- incrementedValue();
                        type(incrementedValue() + index(d)) <- 'category_change_req_detail';
                        meaasage(incrementedValue() + index(d)) <- categoryDetailString(incrementedValue() + index(d), d);
                    }
                    
                    headerId(incrementedValue() + countMoveDetail(m) + 1) <- incrementedValue();
                    type(incrementedValue() + countMoveDetail(m) + 1) <- '/category_change_req';
                    meaasage(incrementedValue() + countMoveDetail(m) + 1) <- '</category_change_req>';
                    
                    logToFile('WMS', CONCAT ' ', 'User:', currentUserName(), 'connectionString:', connectionString(), 'insertString:', insertString());
                    
                    EXTERNAL 
                        SQL connectionString()
                        EXEC insertString();
                        
                    IF NOT slovoMessage(m) THEN NEW s = SlovoMessage {
                        slovoMessage(m) <- s;
                    }
                    id(slovoMessage(m)) <- incrementedValue();
                    type(slovoMessage(m)) <- 'category_change_req';
                    status(slovoMessage(m)) <- 'ready';
                    loaded(slovoMessage(m)) <- currentDateTime();
                    
                    APPLY NESTED LOCAL;
                        
                    MESSAGE 'Перемещение выгружено' NOWAIT;
                }
            } ELSE {
                logToFile('WMS', CONCAT ' ', 'User:', currentUserName(), 'Write Move error: запрещено выгружать непроведенный документ');
                MESSAGE 'Запрещено выгружать непроведенный документ';
            }
        }
    } ELSE {
        logToFile('WMS', CONCAT ' ', 'User:', currentUserName(), 'Write Move error: не задан нумератор для пакетов выгрузки в wms');
        MESSAGE 'Не задан нумератор для пакетов выгрузки в wms';
    }
}

EXTEND FORM moves 
    PROPERTIES (m) PANEL SHOWIF isSolvo(stock(m)) 
        exportSolvo, statusSlovo//, processingStatusSlovo
;

DESIGN moves {
    actionContainer {
        NEW exportWMS {
            caption = 'Экспорт в WMS';
            type = CONTAINERV;
            MOVE PROPERTY(exportSolvo(m));
            MOVE PROPERTY(statusSlovo(m));
            //MOVE PROPERTY(processingStatusSlovo(m));
        }
    }
}

//Списание
slovoMessage = DATA SlovoMessage (WriteOff);
statusSlovo 'Статус выгрузки' (WriteOff o) = CONCAT ' - ', status(slovoMessage(o)), errDescr(slovoMessage(o)) IN wms;
processingStatusSlovo 'Статус обработки'  = DATA STRING[50](WriteOff) IN wms;

beforeExportSolvo ABSTRACT (WriteOff);

orderHeaderString (LONG syncId, WriteOff s) = CONCAT'','<order syncid=\'\'',syncId,'\'\' action=\'\'update\'\' syncdate=\'\'',nowText(),
    '\'\' order_id=\'\'',id(s),'\'\' display_name=\'\'',format(seriesNumber(s)),'\'\' shipment_id=\'\'\'\' priority=\'\'99\'\' client_id=\'\'0\'\'',
    ' carrier_id=\'\'\'\' type=\'\'', (IF zone(s) THEN 'X' ELSE 'L'),'\'\' proc_method=\'\'S\'\' date_to_ship=\'\'',format(shipmentDateTime(s)),'\'\' responsible=\'\'\'\' comments=\'\'',format(note(s)),'\'\'>';

extraOrderDetailString = ABSTRACT CASE STRING (WriteOffDetail);
orderDetailString (LONG syncId, WriteOffDetail s) = CONCAT'','<order_detail syncid=\'\'',syncId,'\'\' action=\'\'update\'\' syncdate=\'\'',nowText(),
    '\'\' order_id=\'\'',id(writeOff(s)),'\'\' line=\'\'',STRING(index(s)),'\'\' sku_id=\'\'',idSku(s),'\'\' category=\'\'',(OVERRIDE idSolvo(zone(s)),'1'),'\'\' ',extraOrderDetailString(s),
    ' rcn_id=\'\'-1\'\' marker=\'\'-\'\' marker2=\'\'-\'\' qty=\'\'',format(STRING(quantity(s))),'\'\' uom=\'\'',format(shortNameUOMSku(s)),'\'\' comments=\'\'\'\'/>';

exportSolvo 'Выгрузить заказ в wms Solvo' (WriteOff w) {
    IF defaultNumeratorSyncid() THEN {
        NEWSESSION {
            IF isPosted(w) THEN {
                in(Item it) <- TRUE WHERE (GROUP SUM quantity(WriteOffDetail d) IF sku(d) == it AND writeOff(d) == w) AND ((changed(it) AND NOT changed(it) < loaded(it)) OR NOT loaded(it));
                exportItems();
                
                IF NOT errorExportItems() THEN {
                    beforeExportSolvo(w);
                                
                    numerateIds(countWriteOffDetail(w) + 2);
                    
                    logToFile('WMS', CONCAT ' ', 'User:', currentUserName(), 'startId:', incrementedValue(), 'Write WriteOff:', seriesNumber(w));
                    
                    IF NOT id(w) THEN {
                        id(w) <- CONCAT '_', seriesNumber(w), date(w);
                    }
                    
                    headerId(incrementedValue()) <- 0;
                    type(incrementedValue()) <- 'order';
                    meaasage(incrementedValue()) <- orderHeaderString(incrementedValue(), w);
                    
                    FOR w == writeOff(WriteOffDetail d) DO {
                        headerId(incrementedValue() + index(d)) <- incrementedValue();
                        type(incrementedValue() + index(d)) <- 'order_detail';
                        meaasage(incrementedValue() + index(d)) <- orderDetailString(incrementedValue() + index(d), d);
                    }
                    
                    headerId(incrementedValue() + countWriteOffDetail(w) + 1) <- incrementedValue();
                    type(incrementedValue() + countWriteOffDetail(w) + 1) <- '/order';
                    meaasage(incrementedValue() + countWriteOffDetail(w) + 1) <- '</order>';
                    
                    logToFile('WMS', CONCAT ' ', 'User:', currentUserName(), 'connectionString:', connectionString(), 'insertString:', insertString());
                    
                    EXTERNAL 
                        SQL connectionString()
                        EXEC insertString();
                        
                    IF NOT slovoMessage(w) THEN NEW s = SlovoMessage {
                        slovoMessage(w) <- s;
                    }
                    id(slovoMessage(w)) <- incrementedValue();
                    type(slovoMessage(w)) <- 'order';
                    status(slovoMessage(w)) <- 'ready';
                    loaded(slovoMessage(w)) <- currentDateTime();
                    
                    APPLY NESTED LOCAL;
                        
                    MESSAGE 'Списание выгружено' NOWAIT;
                }
            } ELSE {
                logToFile('WMS', CONCAT ' ', 'User:', currentUserName(), 'Write WriteOff error: запрещено выгружать непроведенный документ');
                MESSAGE 'Запрещено выгружать непроведенный документ';
            }
        }
    } ELSE {
        logToFile('WMS', CONCAT ' ', 'User:', currentUserName(), 'Write WriteOff error: не задан нумератор для пакетов выгрузки в wms');
        MESSAGE 'Не задан нумератор для пакетов выгрузки в wms';
    }
}

EXTEND FORM writeOffs 
    PROPERTIES (w) PANEL SHOWIF isSolvo(stock(w))
        exportSolvo, statusSlovo, processingStatusSlovo
;

DESIGN writeOffs {
    actionContainer {
        NEW exportWMS {
            caption = 'Экспорт в WMS';
            type = CONTAINERV;
            MOVE PROPERTY(exportSolvo(w));
            MOVE PROPERTY(statusSlovo(w));
            MOVE PROPERTY(processingStatusSlovo(w));
        }
    }
}

//возврат поставщику
slovoMessage = DATA SlovoMessage (PurchaseReturn.Invoice);
statusSlovo 'Статус выгрузки' (PurchaseReturn.Invoice o) = CONCAT ' - ', status(slovoMessage(o)), errDescr(slovoMessage(o)) IN wms;
processingStatusSlovo 'Статус обработки'  = DATA STRING[50](PurchaseReturn.Invoice) IN wms;

beforeExportSolvo ABSTRACT (PurchaseReturn.Invoice);

orderHeaderString (LONG syncId, PurchaseReturn.Invoice s) = CONCAT'','<order syncid=\'\'',syncId,'\'\' action=\'\'update\'\' syncdate=\'\'',nowText(),
    '\'\' order_id=\'\'',id(s),'\'\' display_name=\'\'',format(seriesNumber(s)),'\'\' shipment_id=\'\'\'\' priority=\'\'99\'\' client_id=\'\'',format(id(supplierStock(s))),
    ' carrier_id=\'\'\'\' type=\'\'R\'\' proc_method=\'\'U\'\' date_to_ship=\'\'',format(shipmentDateTime(s)),'\'\' responsible=\'\'\'\' comments=\'\'',format(note(s)),'\'\'>';

extraOrderDetailString = ABSTRACT CASE STRING (PurchaseReturn.InvoiceDetail);
orderDetailString (LONG syncId, PurchaseReturn.InvoiceDetail s) = CONCAT'','<order_detail syncid=\'\'',syncId,'\'\' action=\'\'update\'\' syncdate=\'\'',nowText(),
    '\'\' order_id=\'\'',id(invoice(s)),'\'\' line=\'\'',STRING(index(s)),'\'\' sku_id=\'\'',idSku(s),'\'\' category=\'\'',(OVERRIDE idSolvo(zone(s)),'1'),'\'\' ',extraOrderDetailString(s),
    ' rcn_id=\'\'-1\'\' marker=\'\'-\'\' marker2=\'\'-\'\' qty=\'\'',format(STRING(quantity(s))),'\'\' uom=\'\'',format(shortNameUOMSku(s)),'\'\' comments=\'\'\'\'/>';

exportSolvo 'Выгрузить заказ в wms Solvo' (PurchaseReturn.Invoice i) {
    IF defaultNumeratorSyncid() THEN {
        NEWSESSION {
            IF isPosted(i) THEN {
                in(Item it) <- TRUE WHERE quantityInvoiceDetail(it, i) AND ((changed(it) AND NOT changed(it) < loaded(it)) OR NOT loaded(it));
                exportItems();
                
                in(Stock s) <- TRUE WHERE s == supplierStock(i) AND ((changed(s) AND NOT changed(s) < loaded(s)) OR NOT loaded(s));
                exportStocks();
                
                IF NOT errorExportItems() THEN {
                    beforeExportSolvo(i);
                                
                    numerateIds(countInvoiceDetail(i) + 2);
                    
                    logToFile('WMS', CONCAT ' ', 'User:', currentUserName(), 'startId:', incrementedValue(), 'Write Purchase Invoice:', seriesNumber(i));
                    
                    IF NOT id(i) THEN {
                        id(i) <- CONCAT '_', seriesNumber(i), date(i);
                    }
                    
                    headerId(incrementedValue()) <- 0;
                    type(incrementedValue()) <- 'order';
                    meaasage(incrementedValue()) <- orderHeaderString(incrementedValue(), i);
                    
                    FOR i == invoice(PurchaseReturn.InvoiceDetail d) DO {
                        headerId(incrementedValue() + index(d)) <- incrementedValue();
                        type(incrementedValue() + index(d)) <- 'order_detail';
                        meaasage(incrementedValue() + index(d)) <- orderDetailString(incrementedValue() + index(d), d);
                    }
                    
                    headerId(incrementedValue() + countInvoiceDetail(i) + 1) <- incrementedValue();
                    type(incrementedValue() + countInvoiceDetail(i) + 1) <- '/order';
                    meaasage(incrementedValue() + countInvoiceDetail(i) + 1) <- '</order>';
                    
                    logToFile('WMS', CONCAT ' ', 'User:', currentUserName(), 'connectionString:', connectionString(), 'insertString:', insertString());
                    
                    EXTERNAL 
                        SQL connectionString()
                        EXEC insertString();
                        
                    IF NOT slovoMessage(i) THEN NEW s = SlovoMessage {
                        slovoMessage(i) <- s;
                    }
                    id(slovoMessage(i)) <- incrementedValue();
                    type(slovoMessage(i)) <- 'order';
                    status(slovoMessage(i)) <- 'ready';
                    loaded(slovoMessage(i)) <- currentDateTime();
                    
                    APPLY NESTED LOCAL;
                        
                    MESSAGE 'Списание выгружено' NOWAIT;
                }
            } ELSE {
                logToFile('WMS', CONCAT ' ', 'User:', currentUserName(), 'Write WriteOff error: запрещено выгружать непроведенный документ');
                MESSAGE 'Запрещено выгружать непроведенный документ';
            }
        }
    } ELSE {
        logToFile('WMS', CONCAT ' ', 'User:', currentUserName(), 'Write WriteOff error: не задан нумератор для пакетов выгрузки в wms');
        MESSAGE 'Не задан нумератор для пакетов выгрузки в wms';
    }
}

EXTEND FORM PurchaseReturn.invoices
    PROPERTIES (i) PANEL SHOWIF isSolvo(customerStock(i)) 
        exportSolvo, statusSlovo, processingStatusSlovo
;

DESIGN PurchaseReturn.invoices {
    actionContainer {
        NEW exportWMS {
            caption = 'Экспорт в WMS';
            type = CONTAINERV;
            MOVE PROPERTY(exportSolvo(i));
            MOVE PROPERTY(statusSlovo(i));
            MOVE PROPERTY(processingStatusSlovo(i));
        }
    }
}

//Расход
slovoMessage = DATA SlovoMessage (Sale.Order);
statusSlovo 'Статус выгрузки' (Sale.Order o) = CONCAT ' - ', status(slovoMessage(o)), errDescr(slovoMessage(o)) IN wms;
processingStatusSlovo 'Статус обработки'  = DATA STRING[50](Sale.Order) IN wms;
beforeExportSolvo ABSTRACT (Sale.Order);

typeSolvo 'Тип для выгрузки Solvo' = DATA STRING (Sale.Operation);
EXTEND FORM Sale.operation
    PROPERTIES typeSolvo(o)
;
DESIGN Sale.operation {
    paramsContainer {
        MOVE PROPERTY(typeSolvo(o));
    }
}

orderHeaderString (LONG syncId, Sale.Order s) = CONCAT'','<order syncid=\'\'',syncId,'\'\' action=\'\'update\'\' syncdate=\'\'',nowText(),
    '\'\' order_id=\'\'',id(s),'\'\' display_name=\'\'',format(seriesNumber(s)),'\'\' shipment_id=\'\'',number(trip(s)),'\'\' priority=\'\'99\'\' client_id=\'\'',format(id(customerStock(s))),
    '\'\' carrier_id=\'\'\'\' type=\'\'',typeSolvo(operation(s)),'\'\' proc_method=\'\'U\'\' date_to_ship=\'\'',format(shipmentDateTime(s)),'\'\' responsible=\'\'\'\' comments=\'\'',format(note(s)),'\'\'>';

extraOrderDetailString = ABSTRACT CASE STRING (Sale.OrderDetail);
orderDetailString (LONG syncId, Sale.OrderDetail s) = CONCAT'','<order_detail syncid=\'\'',syncId,'\'\' action=\'\'update\'\' syncdate=\'\'',nowText(),
    '\'\' order_id=\'\'',id(order(s)),'\'\' line=\'\'',STRING(index(s)),'\'\' sku_id=\'\'',idSku(s),'\'\' category=\'\'1\'\' ',extraOrderDetailString(s),
    ' rcn_id=\'\'-1\'\' marker=\'\'-\'\' marker2=\'\'-\'\' qty=\'\'',format(STRING(quantity(s))),'\'\' uom=\'\'',format(shortNameUOMSku(s)),'\'\' comments=\'\'\'\'/>';

exportSolvo 'Выгрузить заказ в wms Solvo' (Sale.Order i) {
    IF defaultNumeratorSyncid() THEN {
        IF typeSolvo(operation(i)) THEN {
            NEWSESSION {
                IF isPosted(i) THEN {
                    in(Item it) <- TRUE WHERE quantityOrderDetail(it, i) AND ((changed(it) AND NOT changed(it) < loaded(it)) OR NOT loaded(it));
                    exportItems();
                    
                    in(Stock s) <- TRUE WHERE s == customerStock(i) AND ((changed(s) AND NOT changed(s) < loaded(s)) OR NOT loaded(s));
                    exportStocks();
                    
                    IF NOT errorExportItems() THEN {
                        beforeExportSolvo(i);
                        
                        numerateIds(countOrderDetail(i) + 2);
                        
                        logToFile('WMS', CONCAT ' ', 'User:', currentUserName(), 'startId:', incrementedValue(), 'Write Sale Order:', seriesNumber(i));
                        
                        IF NOT id(i) THEN {
                            id(i) <- CONCAT '_', seriesNumber(i), date(i);
                        }
                        
                        headerId(incrementedValue()) <- 0;
                        type(incrementedValue()) <- 'order';
                        meaasage(incrementedValue()) <- orderHeaderString(incrementedValue(), i);
                        
                        FOR i == order(Sale.OrderDetail d) DO {
                            headerId(incrementedValue() + index(d)) <- incrementedValue();
                            type(incrementedValue() + index(d)) <- 'order_detail';
                            meaasage(incrementedValue() + index(d)) <- orderDetailString(incrementedValue() + index(d), d);
                        }
                        
                        headerId(incrementedValue() + countOrderDetail(i) + 1) <- incrementedValue();
                        type(incrementedValue() + countOrderDetail(i) + 1) <- '/order';
                        meaasage(incrementedValue() + countOrderDetail(i) + 1) <- '</order>';
                        
                        logToFile('WMS', CONCAT ' ', 'User:', currentUserName(), 'connectionString:', connectionString(), 'insertString:', insertString());
                        
                        EXTERNAL 
                            SQL connectionString()
                            EXEC insertString();
                            
                        IF NOT slovoMessage(i) THEN NEW s = SlovoMessage {
                            slovoMessage(i) <- s;
                        }
                        id(slovoMessage(i)) <- incrementedValue();
                        type(slovoMessage(i)) <- 'order';
                        status(slovoMessage(i)) <- 'ready';
                        loaded(slovoMessage(i)) <- currentDateTime();
                        
                        APPLY NESTED LOCAL;
                        
                        MESSAGE 'Заказ выгружен' NOWAIT;
                    }
                } ELSE {
                   logToFile('WMS', CONCAT ' ', 'User:', currentUserName(), 'Write Sale Order error: запрещено выгружать непроведенный документ');
                   MESSAGE 'Запрещено выгружать непроведенный документ'; 
                }
            }
        } ELSE {
            logToFile('WMS', CONCAT ' ', 'User:', currentUserName(), 'Write Sale Order error: для операции не задан тип для выгрузки Solvo');
            MESSAGE 'Для операции не задан тип для выгрузки Solvo';
        }
    } ELSE {
        logToFile('WMS', CONCAT ' ', 'User:', currentUserName(), 'Write Sale Order error: не задан нумератор для пакетов выгрузки в wms');
        MESSAGE 'Не задан нумератор для пакетов выгрузки в wms';
    }
}

EXTEND FORM Sale.orders
    PROPERTIES (o) PANEL SHOWIF isSolvo(supplierStock(o)) 
        exportSolvo, statusSlovo, processingStatusSlovo
;

DESIGN Sale.orders {
    actionContainer {
        NEW exportWMS {
            caption = 'Экспорт в WMS';
            type = CONTAINERV;
            MOVE PROPERTY(exportSolvo(o));
            MOVE PROPERTY(statusSlovo(o));
            MOVE PROPERTY(processingStatusSlovo(o));
        }
    }
}


//Отгрузка
shipmentHeaderString (LONG syncId, Trip s) = CONCAT'','<shipment syncid=\'\'',syncId,'\'\' action=\'\'update\'\' syncdate=\'\'',nowText(),
    '\'\' shipment_id=\'\'',number(s),'\'\' display_name=\'\'',format(seriesNumber(s)),'\'\' start_date=\'\'',format(dateTime(s)),
    '\'\' car_num=\'\'',sidTruck(s), ' driver=\'\'',nameDriver(s),'\'\' start_date=\'\'',format(dateTime(s)),'\'\' priority=\'\'99\'\' comments=\'\'\'\'></shipment>';


exportSolvo 'Выгрузить рейс в wms Solvo' (Trip i) {
    IF defaultNumeratorSyncid() THEN {
        NEWSESSION {
            
            numerateIds(1);
            
            logToFile('WMS', CONCAT ' ', 'User:', currentUserName(), 'startId:', incrementedValue(), 'Write Trip:', seriesNumber(i));
    
            headerId(incrementedValue()) <- 0;
            type(incrementedValue()) <- 'shipment';
            meaasage(incrementedValue()) <- shipmentHeaderString(incrementedValue(), i);
            
            logToFile('WMS', CONCAT ' ', 'User:', currentUserName(), 'connectionString:', connectionString(), 'insertString:', insertString());
            
            EXTERNAL 
                SQL connectionString()
                EXEC insertString();
                
            MESSAGE 'Рейс выгружен' NOWAIT;
        }
    } ELSE {
        logToFile('WMS', CONCAT ' ', 'User:', currentUserName(), 'Write Trip error: не задан нумератор для пакетов выгрузки в wms');
        MESSAGE 'Не задан нумератор для пакетов выгрузки в wms';
    }
} TOOLBAR;

EXTEND FORM trips
    PROPERTIES (t) exportSolvo
;

checkStatus 'Проверить статус выгрузки в Solvo' () {
    
    IF (GROUP SUM 1 IF status(SlovoMessage s) == 'ready' ) THEN NEWSESSION {
        LOCAL result = FILE ();
        
        EXTERNAL 
            SQL connectionString()
            EXEC 'SELECT ID, STATUS, ERR_CODE, ERR_DESCR FROM from_host_header_message WHERE id IN('+(GROUP CONCAT STRING(id(SlovoMessage s)) IF status(s) == 'ready', ',' ORDER s)+')' TO result;
        
        LOCAL id = LONG (INTEGER );
        LOCAL status = STRING[16](INTEGER );
        LOCAL errCode = INTEGER (INTEGER );
        LOCAL errDescr = STRING (INTEGER);
                
        IMPORT TABLE FROM result() TO id, status, errCode, errDescr;
        
        FOR id(INTEGER i) == id(SlovoMessage s) DO {
            status(s) <- status(i);
            errCode(s) <- errCode(i);
            errDescr(s) <- errDescr(i);
            loaded(s) <- NULL IF NOT errCode(i) == 0;
        }
        APPLY;
    }
}

status = DATA LOCAL STRING(INTEGER);
sku_id = DATA LOCAL STRING(INTEGER);
s_serial_id = DATA LOCAL STRING(INTEGER);
qty = DATA LOCAL NUMERIC[16,3](INTEGER);
p_serial_id = DATA LOCAL STRING(INTEGER);
marker2 = DATA LOCAL STRING(INTEGER);
marker = DATA LOCAL STRING(INTEGER);
line = DATA LOCAL INTEGER(INTEGER);
category = DATA LOCAL STRING(INTEGER);
inc_id = DATA LOCAL STRING();
rcv_date = DATA LOCAL DATETIME();
new_status = DATA LOCAL STRING ();
order_id = DATA LOCAL STRING();
type = DATA LOCAL STRING();

FORM receive_complete
PROPERTIES() rcv_date ATTR, inc_id ATTR, type ATTR

OBJECTS receive_complete_detail = INTEGER
PROPERTIES(receive_complete_detail) status ATTR, sku_id ATTR, s_serial_id ATTR, qty ATTR, p_serial_id ATTR, marker2 ATTR, marker ATTR, line ATTR, category ATTR
FILTERS imported(receive_complete_detail);

FORM order_status_changed
PROPERTIES() order_id ATTR, type ATTR, new_status ATTR

OBJECTS order_status_changed_detail = INTEGER
PROPERTIES(order_status_changed_detail) line ATTR, qty ATTR, sku_id ATTR, s_serial_id ATTR, p_serial_id 
FILTERS imported(order_status_changed_detail);

overIdBatch = ABSTRACT STRING[100](Purchase.InvoiceDetail);
series (Purchase.InvoiceDetail d) = OVERRIDE overIdBatch(d), idBatch(d);

overImportReceiveComplete ABSTRACT (SaleReturn.InvoiceDetail);
overImportReceiveComplete ABSTRACT (Purchase.InvoiceDetail);
overImportOrderStatusChanged ABSTRACT (Sale.Order);

importDetails(LONG hId, STRING hMessage) {
    EXTERNAL 
        SQL connectionString()
        EXEC 'SELECT ID, MESSAGE FROM to_host_detail_message WHERE HEADER_ID = '+hId TO file;
    
    LOCAL dId = LONG (INTEGER );
    LOCAL dMessage = STRING (INTEGER );
    IMPORT TABLE FROM file() TO dId, dMessage;
    
    stringToFile(hMessage + (GROUP CONCAT dMessage(INTEGER i), '' ORDER  dId(i)),'UTF-8','xml');
    logToFile('WMS', resultFile());    
}

importReplies 'Импортировать подтверждения' ()  {
    
    logToFile('WMS', 'import replies started' );
    
    EXTERNAL 
        SQL connectionString()
        EXEC 'SELECT ID, TYPE, MESSAGE FROM to_host_header_message WHERE STATUS = \'ready\' AND CREATED >= \''+toChar(sum(currentDate(),-14),'DD.MM.YY')+'\'' TO file; 
        
    LOCAL NESTED hId = LONG (INTEGER );
    LOCAL hType = STRING[64] (INTEGER );
    LOCAL NESTED hMessage = STRING (INTEGER );
    IMPORT TABLE FROM file() TO hId, hType, hMessage;
    
    LOCAL NESTED error = STRING ();
    LOCAL NESTED done = BOOLEAN ();
    
    FOR hId(INTEGER j) DO {
        error() <- NULL;
        done() <- NULL;
        //-- Поступление        
        IF hType(j) == 'receive_complete' THEN NEWSESSION {
            logToFile('WMS', 'starting receive_complete: ' + hId(j));
            
            importDetails(hId(j), hMessage(j));
        
            IMPORT receive_complete XML FROM resultFile();
            
            IF type() == 'R' THEN {
                IF NOT SaleReturn.userInvoice(inc_id()) THEN {
                    logToFile('WMS', 'Not found salereturn invoice: ' + inc_id());
                    error() <- 'Накладная не найдена';
                } ELSE {
                    FOR id(SaleReturn.Invoice i) == inc_id() DO {
                        createShipment(i) <- TRUE;
                        shipmentDate(i) <- DATE (rcv_date());
                        shipmentTime(i) <- TIME (rcv_date());
                        
                        FOR i == invoice(SaleReturn.InvoiceDetail d) DO {
                            shipmentQuantity(d) <- GROUP SUM qty(INTEGER r) IF idSku(d) == sku_id( r) AND series(d) == s_serial_id(r);
                            overImportReceiveComplete(d);
                        }
                    }
                    APPLY NESTED LOCAL ;
                    IF canceled() THEN {
                        logToFile('WMS', 'APPLY salereturn invoice faild: ' + applyMessage());
                        error() <- applyMessage();
                    }  ELSE {
                        done() <- TRUE;
                    }
                }
            } ELSE {
                IF NOT Purchase.userInvoice(inc_id()) THEN {
                    logToFile('WMS', 'Not found purchase invoice: ' + inc_id());
                    error() <- 'Накладная не найдена';
                } ELSE {
                    FOR id(Purchase.Invoice i) == inc_id() DO {
                        createShipment(i) <- TRUE;
                        shipmentDate(i) <- DATE (rcv_date());
                        shipmentTime(i) <- TIME (rcv_date());
                        
                        FOR i == invoice(Purchase.InvoiceDetail d) DO {
                            shipmentQuantity(d) <- GROUP SUM qty(INTEGER r) IF idSku(d) == sku_id( r) AND series(d) == s_serial_id(r);
                            overImportReceiveComplete(d);
                        }
                    }
                    APPLY NESTED LOCAL ;
                    IF canceled() THEN {
                        logToFile('WMS', 'APPLY purchase invoice faild: ' + applyMessage());
                        error() <- applyMessage();
                    }  ELSE {
                        done() <- TRUE;
                    }
                }
            }
        }
        
        IF hType(j) == 'incoming_status_changed' THEN NEWSESSION {
            logToFile('WMS', 'starting incoming_status_changed: ' + hId(j));

            importDetails(hId(j), hMessage(j));

            IMPORT XML ATTR FROM resultFile() TO() inc_id, new_status, type;
            
            IF type() == 'R' THEN {
                IF NOT SaleReturn.userInvoice(inc_id()) THEN {
                    logToFile('WMS', 'Not found salereturn invoice: ' + inc_id());
                    error() <- 'Накладная не найдена';
                } ELSE {
                    FOR id(SaleReturn.Invoice i) == inc_id() DO {
                        processingStatusSlovo(i) <- CASE 
                            WHEN new_status() = 'R' THEN 'Готов'
                            WHEN new_status() = 'G' THEN 'Подготовлен'
                            WHEN new_status() = 'P' THEN 'В работе'
                            WHEN new_status() = 'D' THEN 'Выполнен';
                    }
                    APPLY NESTED LOCAL;
                    done() <- TRUE;
                }
            } ELSE {
                IF NOT Purchase.userInvoice(inc_id()) THEN {
                    logToFile('WMS', 'Not found purchase invoice: ' + inc_id());
                    error() <- 'Накладная не найдена';
                } ELSE {
                    FOR id(Purchase.Invoice i) == inc_id() DO {
                        processingStatusSlovo(i) <- CASE 
                            WHEN new_status() = 'R' THEN 'Готов'
                            WHEN new_status() = 'G' THEN 'Подготовлен'
                            WHEN new_status() = 'P' THEN 'В работе'
                            WHEN new_status() = 'D' THEN 'Выполнен';
                    }
                    APPLY NESTED LOCAL;
                    done() <- TRUE;
                }
            }
        }
        
        IF hType(j) == 'order_status_changed' THEN NEWSESSION {
            logToFile('WMS', 'starting order_status_changed: ' + hId(j));
            
            importDetails(hId(j), hMessage(j));

            IMPORT order_status_changed XML FROM resultFile();
            
            IF type() == 'L' OR type() == 'X' THEN {
                IF NOT userWriteOff(order_id()) THEN {
                    logToFile('WMS', 'Not found writeoff: ' + order_id());
                    error() <- 'Списание не найдено';
                } ELSE {
                    FOR id(WriteOff w) == order_id() DO {
                        processingStatusSlovo(w) <- CASE 
                            WHEN new_status() = 'R' THEN 'Подготовка к планированию'
                            WHEN new_status() = 'a' THEN 'Планируется'
                            WHEN new_status() = 'T' THEN 'Создание ЛО'
                            WHEN new_status() = 'G' THEN 'Поиск места для сбора заказов'
                            WHEN new_status() = 'L' THEN 'Спланирован'
                            WHEN new_status() = 'P' THEN 'В работе'
                            WHEN new_status() = 'S' THEN 'Приостановлен'
                            WHEN new_status() = 'D' THEN 'Собран'
                            WHEN new_status() = 'p' THEN 'Упаковка'
                            WHEN new_status() = 'q' THEN 'Упакован'
                            WHEN new_status() = 'X' THEN 'Готов к отгрузке'
                            WHEN new_status() = '-' THEN 'Погрузка'
                            WHEN new_status() = 'Y' THEN 'Погружен'
                            WHEN new_status() = '+' THEN 'Отгружен'
                            WHEN new_status() = 'С' THEN 'Отмена';
                    }
                    APPLY NESTED LOCAL;
                    done() <- TRUE;
                }
            }
            IF type() == 'R' THEN {
                IF NOT PurchaseReturn.userInvoice(order_id()) THEN {
                    logToFile('WMS', 'Not found purchasereturn invoice: ' + order_id());
                    error() <- 'Накладная не найдена';
                } ELSE {
                    FOR id(PurchaseReturn.Invoice i) == order_id() DO {
                        processingStatusSlovo(i) <- CASE 
                            WHEN new_status() = 'R' THEN 'Подготовка к планированию'
                            WHEN new_status() = 'a' THEN 'Планируется'
                            WHEN new_status() = 'T' THEN 'Создание ЛО'
                            WHEN new_status() = 'G' THEN 'Поиск места для сбора заказов'
                            WHEN new_status() = 'L' THEN 'Спланирован'
                            WHEN new_status() = 'P' THEN 'В работе'
                            WHEN new_status() = 'S' THEN 'Приостановлен'
                            WHEN new_status() = 'D' THEN 'Собран'
                            WHEN new_status() = 'p' THEN 'Упаковка'
                            WHEN new_status() = 'q' THEN 'Упакован'
                            WHEN new_status() = 'X' THEN 'Готов к отгрузке'
                            WHEN new_status() = '-' THEN 'Погрузка'
                            WHEN new_status() = 'Y' THEN 'Погружен'
                            WHEN new_status() = '+' THEN 'Отгружен'
                            WHEN new_status() = 'С' THEN 'Отмена';
                    }
                    APPLY NESTED LOCAL;
                    done() <- TRUE;
                }
            }
            IF type() == 'A' OR type() == 'B' THEN {
                IF NOT Sale.userOrder(order_id()) THEN {
                    logToFile('WMS', 'Not found sale order: ' + order_id());
                    error() <- 'Заказ не найден';
                } ELSE {
                    FOR id(Sale.Order o) == order_id() DO {
                        processingStatusSlovo(o) <- CASE 
                            WHEN new_status() = 'R' THEN 'Подготовка к планированию'
                            WHEN new_status() = 'a' THEN 'Планируется'
                            WHEN new_status() = 'T' THEN 'Создание ЛО'
                            WHEN new_status() = 'G' THEN 'Поиск места для сбора заказов'
                            WHEN new_status() = 'L' THEN 'Спланирован'
                            WHEN new_status() = 'P' THEN 'В работе'
                            WHEN new_status() = 'S' THEN 'Приостановлен'
                            WHEN new_status() = 'D' THEN 'Собран'
                            WHEN new_status() = 'p' THEN 'Упаковка'
                            WHEN new_status() = 'q' THEN 'Упакован'
                            WHEN new_status() = 'X' THEN 'Готов к отгрузке'
                            WHEN new_status() = '-' THEN 'Погрузка'
                            WHEN new_status() = 'Y' THEN 'Погружен'
                            WHEN new_status() = '+' THEN 'Отгружен'
                            WHEN new_status() = 'С' THEN 'Отмена';
                        
                        IF new_status() = 'q' OR new_status() = 'X' OR new_status() = '+' THEN {
                            overImportOrderStatusChanged(o);
                        }
                    }
                    APPLY NESTED LOCAL;
                    IF canceled() THEN {
                        logToFile('WMS', 'APPLY sale order faild: ' + applyMessage());
                        error() <- applyMessage();
                    }  ELSE {
                        done() <- TRUE;
                    }
                }
            }
        }
        
        IF error() THEN {
            EXTERNAL 
                SQL connectionString()
                EXEC 'UPDATE to_host_header_message SET STATUS = \'error\', ERR_CODE = 1, ERR_DESCR = \''+error()+'\' WHERE ID = '+hId(j);
        } ELSE IF done() THEN {
            EXTERNAL 
                SQL connectionString()
                EXEC 'UPDATE to_host_header_message SET STATUS = \'done\', ERR_CODE = 0 WHERE ID = '+hId(j);
        }
    }
 
}

EXTEND FORM integrationData 
    PROPERTIES() checkStatus, importReplies
;
DESIGN  integrationData {
    SPanel {
        MOVE PROPERTY (checkStatus());
        MOVE PROPERTY (importReplies());
    }
}