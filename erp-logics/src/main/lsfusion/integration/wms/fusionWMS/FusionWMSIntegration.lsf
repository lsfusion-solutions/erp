MODULE FusionWMSIntegration;

REQUIRE PurchaseOrderStatus, PurchaseInvoice, SaleOrderStatus;

NAMESPACE FusionWMS;

dateTimeString(DATETIME dt) = FORMULA STRING 'to_char($1,(\'YYYY-MM-DD"T"HH24:MI:SS\'))';
scheduledDateTimeString(Purchase.Order p) = dateTimeString(dateTime(p));
scheduledDateTimeString(Sale.Order s) = dateTimeString(dateTime(s));

startDate 'Дата начала' = DATA DATE ();

FORM insertUpdateMasterdata
    OBJECTS p = LegalEntity EXTID 'legalEntity'
    PROPERTIES (p) name EXTID 'name',
                   id EXTID 'id',
                   fullName EXTID 'fullName',
                   address EXTID 'address',
                   inactive EXTID 'archived',
                   VALUE EXTID 'externalId',
                   phone EXTID 'phone',
                   email EXTID 'email'

    OBJECTS u = UOM EXTID 'uom'
    PROPERTIES name(u) EXTID 'name',
                   id = right(trim(id(u)), 3) EXTID 'id',
                   VALUE(u) EXTID 'externalId'

    OBJECTS c = ItemGroup EXTID 'category'
    PROPERTIES (c) VALUE EXTID 'externalId',
                   name EXTID 'name',
                   parent EXTID 'parent'

    OBJECTS i = Item EXTID 'item'
    PROPERTIES (i) VALUE EXTID 'externalId',
                   id EXTID 'id',
                   name EXTID 'name',
                   nameAttribute EXTID 'fullName',
                   UOM EXTID 'uom',
                   itemGroup EXTID 'category'
                   
    OBJECTS b = Barcode EXTID 'barcodeItem'
    PROPERTIES (b) id EXTID 'id',
                   sku EXTID 'owner'
    FILTERS active(b)              
;

stock 'Склад' = DATA Stock ();
nameStock 'Склад' () = name(stock());
CONSTRAINT SETCHANGED (stock()) AND NOT isCompany(legalEntity(stock())) CHECKED BY stock[] MESSAGE '';

receiptFilter (Purchase.Order o) = isConfirmed(o) AND customerStock(o) = stock() AND NOT date(o) < startDate() AND NOT isClosed(o) MATERIALIZED INDEXED;
receiptFilter (Sale.Order o) = isConfirmed(o) AND NOT date(o) < startDate() AND NOT isClosed(o) MATERIALIZED INDEXED;

FORM insertUpdateDocuments
    OBJECTS r = Purchase.Order EXTID 'userReceipt'
    PROPERTIES (r) VALUE EXTID 'externalId',
                   supplier EXTID 'vendor',
                   seriesNumber EXTID 'number',
                   scheduledDateTimeString EXTID 'dateTime'
    PROPERTIES '' = name(supplierStock(r)) EXTID 'nameLocation'
    FILTERS receiptFilter(r), status(r) = Purchase.StatusOrder.inWork                   

    OBJECTS rl = Purchase.OrderDetail EXTID 'userReceiptLine'
    PROPERTIES (rl) VALUE EXTID 'externalId',
                    order EXTID 'userReceipt',
                    sku EXTID 'item',
                    quantity EXTID 'initialDemand'
    FILTERS in(r, rl)

    OBJECTS s = Sale.Order EXTID 'selectionOrder'
    PROPERTIES (s) VALUE EXTID 'externalId',
                   customer EXTID 'legalEntity',
                   seriesNumber EXTID 'number',
                   scheduledDateTimeString EXTID 'dateTime'
    PROPERTIES '' = name(customerStock(s)) EXTID 'deliveryAddress'
    FILTERS NOT date(s) < startDate(), isConfirmed(s), NOT isClosed(s)

    OBJECTS sl = Sale.OrderDetail EXTID 'selectionOrderLine'
    PROPERTIES (sl) VALUE EXTID 'externalId',
                    order EXTID 'shipment',
                    sku EXTID 'item',
                    quantity EXTID 'quantity'
    FILTERS in(s, sl)    

;


connectionString 'Строка подключения' = DATA STRING ();

send 'Передать' () {
    IF exportFile() AND connectionString() THEN {
        EXTERNAL HTTP POST connectionString() + '/exec?action=IncomeApi.insertUpdate' PARAMS exportFile();
    } ELSE {
        open(exportFile());
    }
}

receivePurchase (Purchase.Order o) {
    LOCAL f = JSONFILE();
    EXTERNAL HTTP GET connectionString() + '/exec?action=IncomeApi.getObject&p=' + STRING(o) TO f;
    IMPORT JSON FROM f() FIELDS () STRING externalId NULL, STRING nameStatus NULL DO {
        IF left(nameStatus, 9) = 'Завершена' OR left(nameStatus, 7) = 'Принята' THEN NEWSESSION {
            createUserInvoicePosted(o);
            FOR Purchase.OrderDetail od = orderDetail(Purchase.InvoiceDetail d) AND order(od) = o NOINLINE DO {
                EXTERNAL HTTP GET connectionString() + '/exec?action=IncomeApi.getObject&p=' + STRING(od) TO f;
                IMPORT JSON FROM f() FIELDS () NUMERIC[16,5] done NULL DO {
                    shipmentQuantity(d) <- done;     
                }
            }
            setNoCancelInTransaction();
            APPLY; 
        }
    }
}

receiveSale (Sale.Order o) {
    LOCAL f = JSONFILE();
    EXTERNAL HTTP GET connectionString() + '/exec?action=IncomeApi.getObject&p=' + STRING(o) TO f;
    IMPORT JSON FROM f() FIELDS () STRING externalId NULL, STRING nameStatus NULL DO {
        IF left(nameStatus, 9) = 'Завершена' OR left(nameStatus, 7) = 'Принята' THEN NEWSESSION {
            createUserInvoicePosted(o);
            FOR Sale.OrderDetail od = orderDetail(Sale.InvoiceDetail d) AND order(od) = o NOINLINE DO {
                EXTERNAL HTTP GET connectionString() + '/exec?action=IncomeApi.getObject&p=' + STRING(od) TO f;
                IMPORT JSON FROM f() FIELDS () NUMERIC[16,5] shipped NULL DO {
                    shipmentQuantity(d) <- shipped;     
                }
            }
            setNoCancelInTransaction();
            APPLY; 
        }
    }
}

sendDocuments 'Синхронизация документов' () {
    EXPORT insertUpdateDocuments;
    TRY {
        send();
    }
    FOR receiptFilter(Purchase.Order o) AND status(o) = Purchase.StatusOrder.inWork AND connectionString() NOINLINE DO {
        receivePurchase(o);
    }
    FOR receiptFilter(Sale.Order o) AND status(o) = Sale.StatusOrder.inWork AND connectionString() NOINLINE DO {
        receiveSale(o);
    }
}

sendMasterdata 'Синхронизация справочников' () {
    EXPORT insertUpdateMasterdata;
    send();
}

autoexchange 'Автосинхронизация' = DATA BOOLEAN (); 

onClientStarted () + {
    NEWSESSION NEWSQL NEWTHREAD {
        IF autoexchange() THEN {
            sendDocuments();
        }
    } SCHEDULE PERIOD 10000;
}

EXTEND FORM integrationData PROPERTIES () connectionString, startDate, nameStock, sendDocuments, sendMasterdata, autoexchange;

DESIGN integrationData {
    pane {
        NEW fusionWms {
            caption = 'FusionWMS';
            columns = 3;
            MOVE PROPERTY (connectionString());
            MOVE PROPERTY (startDate());
            MOVE PROPERTY (nameStock());
            MOVE PROPERTY (sendDocuments());
            MOVE PROPERTY (sendMasterdata());
            MOVE PROPERTY (autoexchange());       
        }
    }
}
