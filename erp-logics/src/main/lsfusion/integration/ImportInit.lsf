MODULE ImportInit;
REQUIRE PurchaseInvoice, PricingPurchase, PurchaseManufacturingPrice, PricingSum, PriceListLedgerAccount, LegalEntityBy;

NAMESPACE Purchase;

useUNP 'Идентификация поставщика по УНП' = DATA LOCAL NESTED BOOLEAN ();
inputOperation = DATA LOCAL NESTED Purchase.Operation();
nameInputOperation 'Операция' () = name(inputOperation());
newItem 'Создавать новый товар' = DATA LOCAL NESTED BOOLEAN ();
inputStock = DATA LOCAL NESTED Stock();
nameInputStock 'Склад' () = name(inputStock());
useConstraint 'Сохранять, даже если есть ограничения' = DATA LOCAL NESTED BOOLEAN ();
importBatch 'Сохранить коды партий' = DATA LOCAL NESTED BOOLEAN ();

date 'Дата ТТН' = DATA LOCAL NESTED DATE (INTEGER);
num 'Номер ТТН' = DATA LOCAL NESTED STRING[48](INTEGER);
series 'Серия ТТН' = DATA LOCAL NESTED STRING[2](INTEGER);
seriesNumber 'Серия/номер ТТН'(INTEGER i) = OVERRIDE (CONCAT '', series(i), num(i)), 'nodoc' IF imported(i);

idSupplier 'Код поставщика'= DATA LOCAL NESTED STRING[100](INTEGER);
UNPSupplier 'УНП поставщика'= DATA LOCAL NESTED STRING[100](INTEGER);

idSupplierStock 'Код склада поставщика'= DATA LOCAL NESTED STRING[100](INTEGER);
idCustomerStock 'Код склада покупателя'= DATA LOCAL NESTED STRING[100](INTEGER);
idOperation 'Код операции'= DATA LOCAL NESTED STRING[100](INTEGER);
operation (INTEGER i) = OVERRIDE inputOperation() IF inputOperation(), Purchase.operation(idOperation(i));

idSku 'Код товара'= DATA LOCAL NESTED STRING[100](INTEGER);
barcode 'Штрихкод товара'= DATA LOCAL NESTED STRING[100](INTEGER);
skuMapping 'Код товара в существующей базе' = DATA LOCAL NESTED STRING[100](INTEGER); // нужен для привязки дробных товаров
nameSku 'Наименование товара' = DATA LOCAL NESTED ISTRING[255](INTEGER);
nameUOM 'Ед. изм.' = DATA LOCAL NESTED STRING[255](INTEGER);
UOM (INTEGER i) = OVERRIDE  UOMName(nameUOM(i)), UOM(nameUOM(i));
idSkuGroup 'Код группы' = DATA LOCAL NESTED STRING[100](INTEGER);
splitSku 'Дробный (0/1)'  = DATA LOCAL NESTED STRING[100](INTEGER);
sku (INTEGER i) = OVERRIDE sku(skuMapping(i)), 
                                  sku(idSku(i)), 
                                  skuBarcode(barcode(i)) IF NOT length(barcode(i)) > 7, 
                                  sku(barcode(i));
item (INTEGER i) = OVERRIDE idSku(i), barcode(i), skuMapping(i);

part 'Код партии'=  DATA LOCAL NESTED STRING[100](INTEGER );
indexBatch(INTEGER i) =PARTITION SUM 1 ORDER idCustomerStock(i), i BY part(i);
quantity 'Количество'= DATA LOCAL NESTED NUMERIC[16,5](INTEGER);
price 'Цена'= DATA LOCAL NESTED NUMERIC[14,4](INTEGER);
manPrice 'Цена изготовитля'= DATA LOCAL NESTED NUMERIC[16,4](INTEGER);
vat 'Ставка НДС поставщика'= DATA LOCAL NESTED NUMERIC[10,5](INTEGER);
vatr 'Ставка розничного НДС'= DATA LOCAL NESTED NUMERIC[10,5](INTEGER);
shipPrice 'Цена учетная розничная ' = DATA LOCAL NESTED NUMERIC[16,4](INTEGER);
shipSum 'Учетная сумма' = DATA LOCAL NESTED NUMERIC[18,4](INTEGER);
expiry 'Годен до (дата)'= DATA LOCAL NESTED DATE (INTEGER);

mapField = ABSTRACT STRING[15](Sku);

FORM exportInit 'Экспорт'
    OBJECTS st = Stock PANEL SUBREPORT 
    
    OBJECTS bt= Batch
    PROPERTIES  date = date(invoiceDetail(bt)),
                num = number(invoiceDetail(bt)),
                series = series(invoiceDetail(bt)),
                UNPSupplier = UNP(supplier(invoiceDetail(bt))),   
                idSupplier = id(supplier(invoiceDetail(bt))),
                idSupplierStock = id(supplierStock(invoiceDetail(bt))),
                idCustomerStock = (id(st) IF bt IS Batch),
                operation = (STRING[10]('') IF bt IS Batch),
                idSku = id(sku(bt)),
                barcode = idBarcode(sku(bt)), 
                nameSku = name(sku(bt)),
                nameUOM = name(UOM(sku(bt))),
                idSkuGroup = id(skuGroup(sku(bt))),
                splitSku = (IF (passScales(sku(bt)) OR split(sku(bt)))  THEN '1' ELSE '0') , 
                part = (OVERRIDE id(bt), STRING[100](bt)),
                quantity = currentBalance(bt,st),
                price = priceA(SystemLedgerPriceListType.supplierPricingPriceListType, sku(bt), st,currentDateTime()),
                manPrice = priceA(SystemLedgerPriceListType.manufacturingPriceStockPriceListType, sku(bt), st,currentDateTime()),
                vat = valueVAT(sku(bt)),
                vatr= valueVAT(sku(bt)),
                shipPrice = accountPriceA(bt, st),
                shipSum = currentAccountSum(bt, st),
                expiry = expiryDate(bt),
                skuMapping = (OVERRIDE mapField(sku(bt)), STRING[15]('') IF bt IS Batch)                       
                
    FILTERS currentBalance(bt,st)
    
;
exportInit 'Экспорт остатков' (Stock st){
    PRINT exportInit OBJECTS st = st XLSX ;
}

resetLoc () {
    date(INTEGER int) <- NULL;
    num (INTEGER int) <- NULL;
    series (INTEGER int) <- NULL;
    idSupplier (INTEGER int) <- NULL;
    idSupplierStock (INTEGER int) <- NULL;
    idCustomerStock (INTEGER int) <- NULL;
    idOperation(INTEGER int) <- NULL;
        
    idSku (INTEGER int) <- NULL;
    barcode (INTEGER int) <- NULL;
    nameSku (INTEGER int) <- NULL;
    nameUOM  (INTEGER int) <- NULL;
    idSkuGroup  (INTEGER int) <- NULL;
    splitSku  (INTEGER int) <- NULL;
    part (INTEGER int) <- NULL;
    quantity (INTEGER int) <- NULL;
    price (INTEGER int) <- NULL;
    manPrice (INTEGER int) <- NULL;
    vat (INTEGER int) <- NULL;
    vatr (INTEGER int) <- NULL;
    shipPrice (INTEGER int) <- NULL;  
    shipSum (INTEGER int) <- NULL;         
    expiry (INTEGER int) <- NULL;    
    UNPSupplier(INTEGER int) <- NULL;    
    skuMapping(INTEGER int) <- NULL;    

}

importInitCustom 'Импорт остатков' ()  {
    idCustomerStock(INTEGER r) <- id(inputStock()) WHERE imported(r) AND inputStock(); 
    idSupplier(INTEGER r) <- 'nosup' WHERE imported(r) AND NOT idSupplier(r);
    date(INTEGER r) <- 2018_01_01 WHERE imported(r) AND NOT date(r);
     
    LOCAL supplier = LegalEntity(INTEGER );
    supplier(INTEGER r) <- OVERRIDE IF useUNP() THEN supplierUNP(UNPSupplier(r)) ELSE legalEntity(idSupplier(r)) WHERE imported(r); 

    LOCAL incl =  BOOLEAN (Purchase.UserInvoiceDetail);
                   
    //встречаются очень древние партии по которым потерялся товар
    part(INTEGER r) <- NULL WHERE quantity(r) == 0.0 AND NOT sku(r);
    
    IF newItem() THEN {
        FOR INTEGER  rr = [ GROUP MIN INTEGER r IF supplier(r) AND NOT itemGroup(idSkuGroup(r)) BY idSkuGroup(r)](STRING[100] str)  NEW it = ItemGroup DO {
            id(it) <- str;
            parent(it) <- GROUP MIN ItemGroup gr IF gr IS ItemGroup AND NOT parent(gr);
        }
        FOR INTEGER  rr = [  GROUP MIN INTEGER r IF supplier(r)  AND NOT UOM(r)  BY nameUOM(r)](STRING[100] str)  NEW it = UOM DO {
            id(it) <- str;
            shortName(it) <- str;
            name(it) <- ISTRING[50](str);
        }
                
        FOR INTEGER  rr = [GROUP MIN INTEGER r IF supplier(r) AND NOT sku(r) BY idSku(r)](STRING[100] str)  NEW it = Item DO {
            id(it) <- str;
            caption(it) <- nameSku(rr);
            itemGroup(it) <- itemGroup(idSkuGroup(rr));
            UOM(it) <- UOM(rr);
            split(it) <- TRUE IF splitSku(rr) == '1';
            passScales(it) <- TRUE IF splitSku(rr) == '1';
            skuType(it) <- SkuType.skuTypeItem;
            
            IF barcode(rr) THEN {
                IF splitSku(rr) == '1' THEN {
                    generateBarcode(it);
                } ELSE {
                    NEW b = Barcode {
                        id(b) <- STRING[15](barcode(rr));
                        sku(b) <- it;
                    }                 
                }               
            }
        } 
        FOR INTEGER  rr = [GROUP MIN INTEGER r IF supplier(r) AND NOT sku(r) BY barcode(r)](STRING[100] bar)  NEW it = Item DO {
            IF defaultNumeratorItem() THEN {
                id(it) <- CONCAT '', series(defaultNumeratorItem()), curStringValue(defaultNumeratorItem());  
                incrementValueSession(defaultNumeratorItem());
            } 
            caption(it) <- nameSku(rr);
            itemGroup(it) <- itemGroup(idSkuGroup(rr));
            UOM(it) <- UOM(rr);
            split(it) <- TRUE IF splitSku(rr) == '1';
            passScales(it) <- TRUE IF splitSku(rr) == '1';
            skuType(it) <- SkuType.skuTypeItem;
            
            IF barcode(rr) THEN {
                IF splitSku(rr) == '1' THEN {
                    generateBarcode(it);
                } ELSE {
                    NEW b = Barcode {
                        id(b) <- STRING[15](barcode(rr));
                        sku(b) <- it;
                    }                 
                }               
            }
        }                            
    }    
    
    //шапки
    FOR [GROUP MIN INTEGER r IF r > 0 BY idCustomerStock(r), idSupplier(r), seriesNumber(r)](ISTRING[100] idCustomerStock, ISTRING[100] idSupplier, ISTRING[100] num) 
        AND NOT Purchase.userInvoice(CONCAT '_', STRING[100](idCustomerStock), STRING[100](idSupplier), STRING[100](num)) 
        NEW i = Purchase.UserInvoice DO {
        
        id(i) <- CONCAT '_', STRING[100](idCustomerStock), STRING[100](idSupplier), STRING[100](num);
    }
    FOR INTEGER r == [GROUP MIN INTEGER ir BY idCustomerStock(ir), idSupplier(ir), seriesNumber(ir)](ISTRING[100] idCustomerStock, ISTRING[100] idSupplier, ISTRING[100] num) 
        AND Purchase.UserInvoice i == Purchase.userInvoice(CONCAT '_', STRING[100](idCustomerStock), STRING[100](idSupplier), STRING[100](num)) DO {
        
        supplier(i) <- OVERRIDE supplier(r), legalEntity(stock(idCustomerStock(r)));
        supplierStock(i) <- IF supplier(r) THEN minStock(supplier(r)) ELSE stock(idCustomerStock(r));
        customer(i) <- legalEntity(stock(idCustomerStock(r)));
        customerStock(i) <- stock(idCustomerStock(r));
        number(i) <- num(r);
        series(i) <- series(r);
        date(i) <- date(r);
        isPosted(i) <- TRUE;
        operation(i) <- operation(r);
        createShipment(i) <- createShipment(operation(r)); 
        createPricing(i) <- createPricing(operation(r)); 
        isClosed(i) <- TRUE;
    }
    
    //строки
    FOR imported(INTEGER r) AND r > 0 AND NOT Purchase.userInvoiceDetail(CONCAT '_', idCustomerStock(r), idSupplier(r), seriesNumber(r), item(r), part(r)) NEW d = Purchase.UserInvoiceDetail DO {
        id(d) <- CONCAT '_', idCustomerStock(r), idSupplier(r), seriesNumber(r), item(r), part(r);
    }
        
    FOR Purchase.UserInvoiceDetail d == Purchase.userInvoiceDetail(CONCAT '_', idCustomerStock(INTEGER r), idSupplier(r), seriesNumber(r), item(r), part(r)) INLINE DO {
        userInvoice(d) <- Purchase.userInvoice(CONCAT '_', idCustomerStock(r), idSupplier(r), seriesNumber(r));
        sku(d) <- sku(r);
        quantity(d) <- quantity(r);
        shipmentQuantity(d) <- quantity(r);
        VAT(d) <- valueCurrentVAT(defaultCountry(), vat(r)); 
        valueVAT(d) <- vat(r);
        valueRetailVAT(d) <- vatr(r);
        price(d) <- price(r);
        manufacturingPrice(d) <- manPrice(r);
             
        retailPrice(d) <- shipPrice(r) IF customerStock(d) IS DepartmentStore;
        
        shipmentPrice(d) <-CASE 
                            WHEN shipPrice(r) THEN shipPrice(r) 
                            WHEN customerStock(d) IS DepartmentStore THEN retailPrice(d)
                            ELSE price(r);
        shipmentSum(d) <- shipSum(r);
        idBatch(d) <- part(r) IF indexBatch(r) == 1 WHERE importBatch();
        expiryDate(d) <- expiry(r);
        incl(d) <- TRUE;
    }
    FOR Purchase.UserInvoiceDetail d == Purchase.userInvoiceDetail(CONCAT '_', idCustomerStock(INTEGER r), idSupplier(r), seriesNumber(r), item(r), part(r)) AND indexBatch(r) > 1  AND importBatch() DO {
        batch(d) <- batch(part(r));
    }
    FOR [GROUP SUM 1 IF imported(INTEGER in) BY operation(in), idCustomerStock(in)](Purchase.Operation o, STRING[100] st) DO {
        quantity(Purchase.UserInvoiceDetail d ) <- 0.0 WHERE o==operation(d) AND st == id(customerStock(d)) AND NOT incl(d);
        shipmentQuantity(Purchase.UserInvoiceDetail d ) <- 0.0 WHERE o==operation(d) AND st == id(customerStock(d)) AND NOT incl(d);
        shipmentSum(Purchase.UserInvoiceDetail d ) <- 0.0 WHERE o==operation(d) AND st == id(customerStock(d)) AND NOT incl(d); 
        
        DELETE Purchase.UserInvoiceDetail d WHERE o==operation(d) AND st == id(customerStock(d)) AND NOT incl(d) AND NOT sku(d);    
    } 
        
    overDisableDocumentLog() <- TRUE;
    IF useConstraint() THEN {
        setNoCancelInTransaction();             
    }     
    APPLY;
} 

importInit 'Импорт остатков' ()  {
    NEWSESSION {
        resetLoc ();
        INPUT f = EXCELFILE DO {
            
            IMPORT XLS NOHEADER FROM f AS EXCELFILE TO  date,num,series,UNPSupplier, idSupplier,idSupplierStock,idCustomerStock,
                   idOperation,idSku,barcode,nameSku,nameUOM,idSkuGroup,splitSku,part,quantity,price,manPrice,vat,vatr,
                   shipPrice,shipSum,expiry,skuMapping;
                   
            importInitCustom();
        }     
    }   
}
FORM importInitXLSX 'Шаблон импорта остатков'
    OBJECTS i = INTEGER SUBREPORT
    PROPERTIES (i) date,num,series,UNPSupplier, idSupplier,idSupplierStock,idCustomerStock,
                  idOperation,idSku,barcode,nameSku,nameUOM,idSkuGroup,splitSku,part,quantity,price,manPrice,vat,vatr,
                  shipPrice,shipSum,expiry,skuMapping
    FILTERS count(i,10)
;

importInitXLSX 'Шаблон импорта' ()  {
    PRINT importInitXLSX XLSX;
}

EXTEND FORM integrationData
    OBJECTS ww = Stock PANEL 
    PROPERTIES (ww) SELECTOR name
    FILTERS isCompany(ww)
    PROPERTIES exportInit(ww)

    PROPERTIES () useUNP, nameInputStock, nameInputOperation, newItem, importInit, importInitXLSX, useConstraint, importBatch
;
DESIGN integrationData {
    pane {
        NEW integrationBalance {
            caption = 'Начальные остатки';
            NEW balancePrim{
                caption = 'Шаблон';
                horizontal = TRUE;
                MOVE PROPERTY (importInitXLSX());            
            }            
            NEW balanceExport{
                caption = 'Экспорт';
                horizontal = TRUE;
                MOVE PROPERTY (name(ww)){caption = 'Склад';}
                MOVE PROPERTY (exportInit(ww));              
            }
            NEW balanceImport{
                caption = 'Импорт';
                horizontal = TRUE;
                MOVE PROPERTY (useUNP());  
                MOVE PROPERTY (nameInputOperation());  
                MOVE PROPERTY (nameInputStock());  
                MOVE PROPERTY (newItem());
                MOVE PROPERTY (importBatch());                 
                MOVE PROPERTY (useConstraint());                 
                MOVE PROPERTY (importInit());            
            }            
        }    
    }
}

EXTEND FORM userInvoice 
PROPERTIES (d) READONLY id;