MODULE ImportDocument;

REQUIRE System, Operation, SkuLedger;

CLASS FileExtension 'Тип файла' {
    xls 'XLS',
    xlsx 'XLSX',
    csv 'CSV',
    dbf 'DBF',
    txt 'TXT'
}

CLASS KeyType 'Ключ товара' {
    barcode 'Штрихкод',
    batch   'Код партии',
    item    'Код товара',
    importCode 'Код импорта'
}

CLASS CountryKeyType 'Ключ страны' {
    sidOrigin2Country 'Код страны 2 знака',
    nameCountry 'Наименование страны',
    nameOriginCountry 'Наименование страны (ориг.)',
    importCodeCountry 'Код импорта страны'
}

CLASS CustomKeyType 'Ключ свойства' {
    item 'Товар',
    article   'Артикул',
    document    'Документ',
    documentDetail 'Строка документа'
}

skuBatch (STRING[100] idBatch) = sku(batch(idBatch));

CLASS ImportTypeDetail 'Свойство' {
    idDocument 'Идентификатор документа',
    numberDocument 'Номер документа',
    seriesDocument 'Серия документа',
    dateDocument 'Дата документа',
    timeDocument 'Время документа',
    idSupplier 'Код поставщика',
    idSupplierStock 'Код склада поставщика',
    currencyDocument 'Валюта документа',
    dataIndex 'Порядковый номер',
    idItem 'Код товара',
    idItemGroup 'Код группы товара',
    barcodeItem 'Штрихкод товара',
    originalCustomsGroupItem 'ТНВЭД (ориг.)',
    idBatch 'Код партии',
    idImportCode 'Код импорта',
    idBox 'Код короба',
    nameBox 'Наименование короба',
    captionItem 'Наименование',
    originalCaptionItem 'Наименование (ориг.)',
    UOMItem 'Единица измерения',
    importCodeUOM 'Код импорта единицы измерения',
    idManufacturer 'Код производителя',
    nameManufacturer 'Наименование производителя',
    importCodeManufacturer 'Код импорта производителя',
    sidOrigin2Country 'Код страны 2 знака',
    nameCountry 'Наименование страны',
    nameOriginCountry 'Наименование страны (ориг.)',
    importCountryBatch 'Страна ввоза',
    importCodeCountry 'Код импорта страны',
    idCustomerStock 'Код склада покупателя',
    pharmacyPriceGroupItem 'Тип лекарственного средства',
    quantity 'Количество',
    price 'Цена',
    manufacturingPrice 'Цена производителя',
    contractPrice 'Контрактная цена',
    shipmentPrice 'Учётная цена',
    shipmentSum 'Учётная сумма',
    rateExchange 'Курс',
    sum 'Сумма',
    valueVAT 'НДС, %',
    sumVAT 'Сумма НДС',
    invoiceSum 'Сумма с НДС',
    seriesPharmacy 'Серия лекарственного средства',
    numberCompliance 'Номер сертификата',
    dateCompliance 'Дата сертификата',
    declaration 'Декларация',
    expiryDate 'Срок годности',
    manufactureDate 'Дата изготовления',
    idArticle 'Код артикула',
    captionArticle 'Наименование артикула',
    originalCaptionArticle 'Наименование артикула (ориг.)',
    idColor 'Код цвета',
    nameColor 'Цвет',
    idTheme 'Код темы',
    nameTheme 'Тема',
    netWeight 'Масса нетто (ед.)',
    netWeightSum 'Масса нетто (сумма)',
    grossWeight 'Масса брутто (ед.)',
    grossWeightSum 'Масса брутто (сумма)',
    composition 'Состав',
    originalComposition 'Состав (ориг.)',
    idSize 'Код размера',
    nameSize 'Размер',
    nameOriginalSize 'Размер (ориг.)',
    idCollection 'Код коллекции',
    nameCollection 'Коллекция',
    idSeasonYear 'Год',
    idSeason 'Код сезона',
    nameSeason 'Сезон',
    idBrand 'Код бренда',
    nameBrand 'Наименование бренда'
}
TABLE ImportTypeDetail(ImportTypeDetail);

prop 'Свойство' (ImportTypeDetail) = DATA Property (ImportTypeDetail);
canonicalNameProp 'Свойство' (ImportTypeDetail d) = canonicalName(prop(d));

key 'Ключ' (ImportTypeDetail) = DATA CustomKeyType (ImportTypeDetail);
nameKey (ImportTypeDetail ImportTypeDetail) = staticName(key(ImportTypeDetail));
captionKey 'Ключ' (ImportTypeDetail ImportTypeDetail) = staticCaption(key(ImportTypeDetail));

CLASS ImportType 'Тип импорта';
TABLE importType(ImportType);

name 'Имя' =  DATA STRING[100](ImportType);
startRow 'Начинать со строки' = DATA INTEGER(ImportType);
isPosted 'Импортировать проведёнными' = DATA BOOLEAN(ImportType);
separator 'Разделитель' = DATA STRING[2] (ImportType);

primaryKeyType 'Тип первичного ключа' = DATA KeyType(ImportType);
captionPrimaryKeyType 'Тип первичного ключа' (ImportType importType) = staticCaption(primaryKeyType(importType));
namePrimaryKeyType 'Тип первичного ключа' (ImportType importType) = staticName(primaryKeyType(importType));
checkExistencePrimaryKey 'Проверять существование по первому ключу' (importType) = DATA BOOLEAN (ImportType);

secondaryKeyType 'Тип вторичного ключа' = DATA KeyType(ImportType);
captionSecondaryKeyType 'Тип вторичного ключа' (ImportType importType) = staticCaption(secondaryKeyType(importType));
nameSecondaryKeyType 'Тип вторичного ключа' (ImportType importType) = staticName(secondaryKeyType(importType));

countryKeyType 'Тип ключа для страны' = DATA CountryKeyType(ImportType);
captionCountryKeyType 'Тип ключа для страны' (ImportType importType) = staticCaption(countryKeyType(importType));
nameCountryKeyType 'Тип ключа для страны' (ImportType importType) = staticName(countryKeyType(importType));

keyIsDigit 'Ключ содержит только цифры' (importType) = DATA BOOLEAN(ImportType);
checkArticles 'Проверять артикулы на изменение' (importType) = DATA BOOLEAN(ImportType); 
multipleDocuments 'Несколько документов в одном файле' (importType) = DATA BOOLEAN(ImportType); 
importWithoutItemIfBothKeysNull 'Импортировать без товара, если значение обоих ключей NULL' (ImportType importType) = DATA BOOLEAN(ImportType);
importTypeDetail (ImportType) = DATA ImportTypeDetail(ImportType);
propertyImportTypeDetail 'Свойство артикула' (ImportType importType) = canonicalNameProp(importTypeDetail(importType)) CHARWIDTH 30; 
staticNameImportTypeDetail  (ImportType importType) = staticName(importTypeDetail(importType)); 
staticCaptionImportTypeDetail  (ImportType importType) = staticCaption(importTypeDetail(importType)); 

TABLE importTypeImportTypeDetail (ImportType, ImportTypeDetail);
index 'Поле' = DATA STRING[50] (ImportType, ImportTypeDetail);

replaceOnlyNull 'Не замещать' = DATA BOOLEAN (ImportType, ImportTypeDetail);

fileExtension  = DATA FileExtension(ImportType);
captionFileExtension 'Тип файла' (ImportType importType) = staticCaption(fileExtension(importType));

autoImport 'Автоматический импорт' = DATA BOOLEAN(ImportType);
autoImportDirectory 'Папка' =  DATA STRING[100](ImportType);

autoImportOperation =  DATA Operation.Operation(ImportType);
nameAutoImportOperation 'Операция'(ImportType importType) = name(autoImportOperation(importType));

autoImportSupplier =  DATA LegalEntity(ImportType);
nameAutoImportSupplier 'Поставщик' (ImportType importType) =  name(autoImportSupplier(importType));
autoImportSupplierStock = DATA Stock(ImportType);
nameAutoImportSupplierStock 'Склад поставщика' (ImportType importType) =  name(autoImportSupplierStock(importType));
autoImportCustomer = DATA LegalEntity(ImportType);
nameAutoImportCustomer 'Покупатель' (ImportType importType) =  name(autoImportCustomer(importType));
autoImportCustomerStock = DATA Stock(ImportType);
nameAutoImportCustomerStock 'Склад покупателя' (ImportType importType) =  name(autoImportCustomerStock(importType));

useStockMapping 'Настраиваемые коды складов' = DATA BOOLEAN(ImportType);

CLASS StockMappingEntry 'Настраиваемый код склада';
TABLE stockMappingEntry(StockMappingEntry);

id 'Код' = DATA STRING[100] (StockMappingEntry);
importType = DATA ImportType(StockMappingEntry);
stockMappingEntry (idEntry, importType) = GROUP AGGR StockMappingEntry stockMappingEntry BY id (stockMappingEntry), importType(stockMappingEntry); 
stock 'Склад' = DATA Stock (StockMappingEntry);
nameStock 'Склад' (StockMappingEntry stockMappingEntry) = name(stock(stockMappingEntry)); 
idStock (StockMappingEntry stockMappingEntry) = id(stock(stockMappingEntry)); 

FORM importTypeDetails
    OBJECTS itd = ImportTypeDetail
    PROPERTIES(itd) staticCaption READONLY, canonicalNameProp, captionKey
    LIST ImportTypeDetail OBJECT itd
;

FORM importTypeDetail 'Свойство импорта'
    OBJECTS itd = ImportTypeDetail PANEL
    PROPERTIES(itd) staticCaption, canonicalNameProp, captionKey
    EDIT ImportTypeDetail OBJECT itd
;

FORM fileExtensions 'Типы файлов'
    OBJECTS f=FileExtension
    PROPERTIES(f) READONLY staticCaption
    LIST FileExtension OBJECT f
;

FORM keyTypes 'Ключи товара'
    OBJECTS k=KeyType
    PROPERTIES(k) READONLY staticCaption
    LIST KeyType OBJECT k
;

FORM customKeyTypes 'Ключи свойства'
    OBJECTS k=CustomKeyType
    PROPERTIES(k) READONLY staticCaption
    LIST CustomKeyType OBJECT k
;

FORM countryKeyTypes 'Ключи товара'
    OBJECTS k=CountryKeyType
    PROPERTIES(k) READONLY staticCaption
    LIST CountryKeyType OBJECT k
;

showSeparator (ImportType importType) = fileExtension(importType)==FileExtension.csv OR fileExtension(importType)==FileExtension.txt;

FORM importType 'Тип импорта'
    OBJECTS i=ImportType PANEL
    PROPERTIES(i) name, captionFileExtension, startRow, isPosted,
                  separator SHOWIF showSeparator(i), captionPrimaryKeyType, checkExistencePrimaryKey,
                  captionSecondaryKeyType, keyIsDigit, 
                  checkArticles, propertyImportTypeDetail SHOWIF checkArticles(i), 
                  captionCountryKeyType,
                  multipleDocuments, importWithoutItemIfBothKeysNull,
                  useStockMapping, autoImport, 
                  autoImportDirectory SHOWIF autoImport(i),
                  nameAutoImportOperation , 
                  nameAutoImportSupplier ,
                  nameAutoImportSupplierStock ,
                  nameAutoImportCustomer ,
                  nameAutoImportCustomerStock  
                                   
    OBJECTS  s=StockMappingEntry GRID              
    PROPERTIES(s) SHOWIF useStockMapping(i) id, nameStock, NEW, DELETE GRID                
    FILTERS importType(s) == i
              
    OBJECTS d = ImportTypeDetail
    PROPERTIES(d) staticCaption READONLY, canonicalNameProp, captionKey
    PROPERTIES(i,d) index, replaceOnlyNull                   
    PROPERTIES(d) NEWSESSION NEW, EDIT, DELETE 
    EDIT ImportType OBJECT i
;

DESIGN importType {
    MOVE BOX(i);
    NEW tabbedContainer {
        fill = 1;
        tabbed = TRUE;
        NEW columnsContainer {
            caption = 'Колонки';
            MOVE BOX(d);
        }
        NEW documentParamsContainer {
            caption = 'Параметры документа';
            MOVE PROPERTY(nameAutoImportOperation(i));
            MOVE PROPERTY(nameAutoImportSupplier(i));
            MOVE PROPERTY(nameAutoImportSupplierStock(i));
            MOVE PROPERTY(nameAutoImportCustomer(i));
            MOVE PROPERTY(nameAutoImportCustomerStock(i));
            
            NEW autoImportContainer {  
                caption = 'Автоматический импорт';      
                MOVE PROPERTY(autoImport(i));
                MOVE PROPERTY(autoImportDirectory(i)); 
            }
            
            NEW stockMappingContainer {
                fill = 1;
                caption = 'Настраиваемые коды складов'; 
                MOVE PROPERTY(useStockMapping(i));
                MOVE BOX(s);
            }            
        }
    }
    MOVE TOOLBARBOX;
}

FORM importTypes 'Типы импорта'
    OBJECTS i = ImportType
    PROPERTIES(i) READONLY name, captionFileExtension, startRow, isPosted, separator, captionPrimaryKeyType,
        checkExistencePrimaryKey, captionSecondaryKeyType, keyIsDigit, checkArticles, captionCountryKeyType,
        multipleDocuments, importWithoutItemIfBothKeysNull, autoImport, autoImportDirectory SHOWIF autoImport(i)
    ORDERS name(i)
    LIST ImportType OBJECT i
;

EXTEND FORM integrationData
    OBJECTS i = ImportType
    PROPERTIES(i) READONLY name, captionFileExtension, startRow, isPosted, separator, captionPrimaryKeyType,
        checkExistencePrimaryKey, captionSecondaryKeyType, keyIsDigit, checkArticles, captionCountryKeyType,
        multipleDocuments, importWithoutItemIfBothKeysNull
    PROPERTIES(i) NEWSESSION NEW, EDIT, DELETE
;

DESIGN integrationData {
    pane {
        NEW importType {
            MOVE BOX(i);
            caption = 'Универсальный импорт';
            NEW actionsContainer {
                caption = '';
                horizontal = TRUE;
            }
        }
    }
}

overCopy ABSTRACT LIST (ImportType, ImportType);

copy 'Копировать' (ImportType t) {
    NEWSESSION NEW i = ImportType {
        
        fileExtension(i) <- fileExtension(t);
        startRow(i) <- startRow(t);
        isPosted(i) <- isPosted(t);
        separator(i) <- separator(t);
        primaryKeyType(i) <- primaryKeyType(t);
        checkExistencePrimaryKey(i) <- checkExistencePrimaryKey(t);
        secondaryKeyType(i) <- secondaryKeyType(t);
        countryKeyType(i) <- countryKeyType(t);
        keyIsDigit(i) <- keyIsDigit(t);
        checkArticles(i) <- checkArticles(t);
        multipleDocuments(i) <- multipleDocuments(t);
        importWithoutItemIfBothKeysNull(i) <- importWithoutItemIfBothKeysNull(t);
        importTypeDetail(i) <- importTypeDetail(t);
        autoImport(i) <- autoImport(t);
        autoImportDirectory(i) <- autoImportDirectory(t);
        autoImportOperation(i) <- autoImportOperation(t);
        autoImportCustomer(i) <- autoImportCustomer(t);
        autoImportCustomerStock(i) <- autoImportCustomerStock(t);
        useStockMapping(i) <- useStockMapping(t);
        index(i, ImportTypeDetail d) <- index(t, d);
        replaceOnlyNull(i, ImportTypeDetail d) <- replaceOnlyNull(t, d);
        
        FOR importType(StockMappingEntry s) == t DO NEW m = StockMappingEntry {
            importType(m) <- i;
            id(m) <- id(s);
            stock(m) <- stock(s);
        }
        
        overCopy(i, t);
        
        SHOW importType OBJECTS i = i DOCKED;
    }
}

EXTEND FORM integrationData PROPERTIES copy(i) DRAW i TOOLBAR;