MODULE SupermagPurchaseReturnInvoice;

REQUIRE SupermagSettings, PurchaseReturnCreditNote, PurchaseReturnManufacturingPrice, PricingPurchaseReturn, PurchaseInvoiceContract, Utils, SupermagPurchaseInvoice, OrderManufacturingPrice;

NAMESPACE PurchaseReturn;

exportPurchaseReturnInvoice ABSTRACT LIST (PurchaseReturn.Invoice);

EXTEND FORM PurchaseReturn.invoices
    PROPERTIES (i) exportPurchaseReturnInvoice TOOLBAR 
;
DESIGN PurchaseReturn.invoices {
    actionContainer{
        NEW mag {
            caption = 'Супермаг';
            MOVE PROPERTY (exportPurchaseReturnInvoice(i));
        }        
    }
}

userInvoiceApply 'Сохранить ' (UserInvoice doc) {
    apply();
    IF NOT canceled() THEN {
        IF series(doc) THEN { number(doc) <- seriesNumber(doc); series(doc) <- NULL;} 
        id(doc) <- CONCAT '', STRING[10](getWord(docTypeSupermag(operation(doc)),';',2)), seriesNumber(doc); 
        APPLY;
        exportPurchaseReturnInvoice(doc);
    }    
}

EXTEND FORM PurchaseReturn.userInvoice  PROPERTIES userInvoiceApply(i) TOOLBAR;

DESIGN PurchaseReturn.userInvoice {
    TOOLBARRIGHT {
        MOVE PROPERTY (userInvoiceApply(i)) BEFORE PROPERTY (formClose()) { imagePath = 'apply.png';} 
        PROPERTY (formOk()) { hide = TRUE; }
        PROPERTY (formApply()) { hide = TRUE; }
    }
}

//-- предполагаем, что дата оплаты для накладной только одна
//lastInvoiceContractLedger 'Дата оплаты' = GROUP LAST Purchase.InvoiceContractLedger l ORDER date(l),l BY inContractLedger(l);// MATERIALIZED;
lastPaymentPeriod = GROUP MAX PaymentPeriod p BY paymentCondition(p);                            

@settingIntegration(PurchaseReturn.Invoice, PurchaseReturn.InvoiceDetail);

dateTimeChange[StockDocumentLedger](InvoiceShipment doc) += dateTimeChange(invoice(doc));
bornin[StockDocumentLedger](InvoiceShipment doc) += bornin(invoice(doc));

overExportPurchaseReturnInvoiceWO ABSTRACT LIST (Invoice, DocMain);

exportPurchaseReturnInvoiceWO 'Экспорт в супермаг' (Invoice doc) {
    inc(DocMain d) <- NULL;
    IF docTypeSupermag(operation(doc)) AND opcodeSupermag(operation(doc)) THEN {        
        LOCAL NESTED dt = DATETIME();
        NEW expMain = DocMain {
                inc(expMain) <- TRUE;          
                doctype(expMain) <- STRING[10] (getWord(docTypeSupermag(operation(doc)),';',2));
                id(doc) <- CONCAT '', doctype(expMain), seriesNumber(doc);               
                id(expMain) <- id(doc); 
                docid(expMain) <- seriesNumber(doc);            
                bornin(expMain) <- OVERRIDE bornin(doc), baseIDSupermag();
                opcode(expMain) <- STRING[10] (getWord(opcodeSupermag(operation(doc)),';',2));
                userop(expMain) <- STRING[10] (getWord(useropSupermag(operation(doc)),';',2));
                creatdate(expMain) <- shipmentDateTime(doc);                
                docstate(expMain) <- CASE WHEN isPosted(doc) THEN 3 
                                      WHEN createShipment(doc) THEN 2 
                                      WHEN isClosed(doc) THEN 0 ELSE 1;
                invoiceDocCreate(expMain) <- dateTime(doc);
                invoiceDocSum(expMain) <- sumInvoiceConsignmentDetail(doc);
//                invoiceDocNumber(expMain) <- CONCAT ' ', invoiceNumber(doc), invoiceSeries(doc); //OVERRIDE  (CONCAT ' ', invoiceNumber(doc), invoiceSeries(doc)), seriesNumber(doc);      
                priceRoundMode(expMain) <- 4 IF doc IS Invoice;                                                
                createFinobligation(expMain)  <- createFinobligation(operation(doc));                               
                clientIndex(expMain) <- id(supplier(doc));
                locationFrom(expMain) <- id(customerStock(doc));
                ourselfclient(expMain) <- id(legalEntity(customerStock(doc)));

                FOR invoice(InvoiceDetail docd) = doc DO {
                    NEW expDet = DocDetail {
                        dataIndex(docd) <- index(docd); 
                        id(docd) <- (CONCAT '~',id(doc),index(docd));
                        index(expDet) <- index(docd);
                        docMain(expDet) <- expMain;
                        id(expDet) <- (CONCAT '~',id(expMain),index(expDet));
                        skuId(expDet) <- id(sku(docd));                                                                           
                        quantity(expDet) <- OVERRIDE quantity(docd), 0; //quantity(docd);
                        blankquantity(expDet) <- OVERRIDE quantityOrder(docd), quantity(docd), 0;
                        priceWithTax(expDet) <- invoicePrice(docd);
                        valueTax(expDet) <- valueVAT(docd);
                        priceNoTax(expDet) <- price(docd);
                        priceCurr(expDet) <- round(priceWithTax(expDet)/curRate(expMain),4);
                        sumWithTax(expDet) <- OVERRIDE abs(invoiceSum(docd)), 0;
                        sumNoTax(expDet) <- OVERRIDE abs(sum(docd)), 0;
                        sumTax(expDet) <- OVERRIDE VATSum(docd), 0;
                        sumCurr(expDet) <- round(sumWithTax(expDet)/curRate(expMain),4);
                        priceManufacturer(expDet) <- IF manufacturingPrice(docd) >= 0.0001 THEN manufacturingPrice(docd) ELSE priceNoTax(expDet);
    //                    extracharge(expDet) <-OVERRIDE wholesaleMarkup(docd), 0;
                        extracharge(expDet) <-(OVERRIDE round2([ ((X*100.0)/Y-100.0)](priceNoTax(expDet),priceManufacturer(expDet) IF priceManufacturer(expDet) != 0.0 )),0);
                        expiryDate(expDet) <- expiryDate(docd);                         
   //                     priceRetail(expDet) <- (OVERRIDE retailPrice(docd), 0); 
                        causeType(expDet) <- STRING[10] (getWord(docTypeSupermag(operation(shipmentDetail(batch(docd)))),';',1)) IF shipmentDetail(batch(docd));                                          
                        causeId(expDet) <- STRING[20] (seriesNumber(shipmentDetail(batch(docd)))) IF shipmentDetail(batch(docd));                                          
                        causeSpecItem(expDet) <- STRING[10] (index(shipmentDetail(batch(docd)))) IF shipmentDetail(batch(docd));                                          
                    }
                    
                }           

                sumWithTax(expMain) <- GROUP SUM abs(sumWithTax(DocDetail expDet)) IF docMain(expDet) = expMain;                
                sumCurr(expMain) <- GROUP SUM sumCurr(DocDetail expDet) IF docMain(expDet) = expMain; 
                countSpec(expMain) <- GROUP SUM 1 IF docMain(DocDetail expDet) = expMain;
                                                              
                FOR include(Order o, doc) DO NEW b = DocBase {
                    basisDoc(expMain, b) <- TRUE;
                    docid(b) <- seriesNumber(o);
                    doctype(b) <- 'OR';
                }
                
                FOR ContractSku c = contractSku(doc) DO NEW b = DocBase {
                    basisDoc(expMain, b) <- TRUE;
                    docid(b) <- seriesNumber(c);
                    doctype(b) <- 'CO';
                }                                
                
                acceptsum(expMain)  <- creditInvoiceSumInvoiceDetail(doc);
                basesum(expMain) <- invoiceSumInvoiceDetail(doc);
                calcenddate(expMain) <- shipmentDateTime(doc);//OVERRIDE dateTime(lastInvoiceContractLedger(doc)), shipmentDateTime(doc);
                paymentdelay(expMain) <- countDays(lastPaymentPeriod(paymentCondition(doc)));
                finagent(expMain) <- id(supplier(doc)); 
                iscalendardelay(expMain) <- IF bankingDays(paymentCondition(doc)) THEN '0' ELSE '1'; 
                
                overExportPurchaseReturnInvoiceWO(doc, expMain);
                
                FOR docprops(doc, STRING prop) DO NEW p = DocProp {
                                                           docMain(p) <- expMain;
                                                           paramname(p) <- STRING[50](prop);
                                                           paramvalue(p) <- STRING[100](docprops(doc, prop)); 
                }              
                
                IF countSpec(expMain) > 0 THEN {
                    dt () <- currentDateTime();        
                    TRY EXPORT exportWO XML TO System.exportFile;
                    CATCH logToFile('supermag', CONCAT '\n', 'Расходная накладная', 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) + '_' +STRING[30](LONG(doc))+'_'+(OVERRIDE seriesNumber(doc), '')+'_'+ formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
                    TRY {
                            WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
                            WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/COPY/' + doctype(expMain) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
                        }
                    CATCH logToFile('supermag', CONCAT '\n', 'Расходная накладная', 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) +'_' + STRING[30](LONG(doc)) + '_' + (OVERRIDE seriesNumber(doc), '') + '_' + formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
                    
                    sleep(pauseBetweenInvoiceFI());
                    dt () <- currentDateTime();        
                    TRY EXPORT exportFI XML TO System.exportFile;
                    CATCH logToFile('supermag', CONCAT '\n', 'Финансовое обязательство', 'file://' + exportDirectorySupermag() + '/' + 'FI_' +STRING[30](LONG(doc))+'_'+(OVERRIDE seriesNumber(doc), '')+'_'+ formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
                    TRY {
                            WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/' + 'FI_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
                            WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/COPY/' + 'FI_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
                        }
                    CATCH logToFile('supermag', CONCAT '\n', 'Финансовое обязательство', 'file://' + exportDirectorySupermag() + '/' + 'FI_' + STRING[30](LONG(doc)) + '_' + (OVERRIDE seriesNumber(doc), '') + '_' + formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
                }                
                inc(expMain) <- NULL;
        }         
    }       
    APPLY;
}

exportPurchaseReturnInvoice (PurchaseReturn.Invoice doc) + {
    IF (getWord(docTypeSupermag(operation(doc)),';',2)) = 'WO' AND isPosted(doc) THEN exportPurchaseReturnInvoiceWO(doc);
}

//---------------------------------------------------------------------------------------импорт
overImportPurchaseReturnInvoice ABSTRACT LIST ();

importPurchaseReturnInvoice 'Импорт накладные (закупка возврат)' () {
    imported (PurchaseReturn.Invoice i) <- NULL;         
    imported (PurchaseReturn.InvoiceDetail d) <- NULL;            

   LOCAL paymentCondition = PaymentCondition (STRING);

    filterSql() <- 'D.DocType = \'WO\' AND b.DocType(+)= D.DocType AND b.id(+) = d.id AND d.locationfrom IN ('+ stocksImport() + ')  AND d.CreateDat >= TO_DATE(\'' + toDateISO(dateFromImportDocument()) + '\',\'YYYY-MM-DD\') AND ( '; 
    
    LOCAL filterDoc = STRING ();
    LOCAL operDoc = STRING ();
    filterDoc() <-'';
    FOR Purchase.Operation op IF op IS Purchase.Operation AND getWord(docTypeSupermag(op),';',2) DO {
       operDoc() <- CONCAT ' AND ', ('d.DOCTYPE = \'' + getWord(docTypeSupermag(op),';',2) + '\''), ('d.OPCODE = ' + getWord(opcodeSupermag(op),';',2)), ('d.USEROP = ' + getWord(useropSupermag(op),';',2)) ; 
       filterDoc() <- CONCAT ' OR ',filterDoc(), '(' + operDoc() + ')';
    }
          
    filterDoc() <- substrFrom(filterDoc(),4);
    filterSql() <- CONCAT '', filterSql(), filterDoc(),')'; 
            
    IF length(numberImportDocument()) > 0 THEN filterSql() <- 'D.DocType = \'WO\' AND d.id = \'' + numberImportDocument() + '\' AND b.DocType(+)= D.DocType AND b.id(+) = d.id'; 
       
    sqlString() <- 'Select d.ID, d.doctype, d.opcode, d.userop, UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(d.bornin)), d.createdat, d.docstate, d.clientindex, d.locationfrom, d.Commentary, f.paymentdelay, f.iscalendardelay ' + 
                   'FROM Supermag.SMDocuments d, Supermag.SMWayBillsOut b, Supermag.SMFinobligation f ' + 
                   'WHERE ' + filterSql() + ' AND f.docid(+)=d.id AND f.doctype(+)=d.doctype';    

    IF enableLogImport() THEN logToFile('supermag', CONCAT '\n', 'Импорт накладные (закупка) возврат', sqlString());
            
    EXTERNAL SQL connectionString() EXEC sqlString() TO file;
    
    IMPORT TABLE FROM file() TO docNumber, docType, operCode, userOp, bornIn, docDate, docState, clientIndex, locationFrom, comment, paymentDelay, isCalendarDelay;
    
    idDoc(INTEGER i) <- STRING[50](CONCAT '', STRING(docType(i)), STRING(docNumber(i)));
    currentVersion (INTEGER i) <-  (CONCAT '~', STRING(idDoc(i)), STRING(operCode(i)), STRING(userOp(i)), STRING(bornIn(i)), STRING(docDate(i)), STRING(docState(i)), STRING(clientIndex(i)), STRING(locationFrom(i)), STRING(comment(i)), STRING(paymentDelay(i)), STRING(isCalendarDelay(i))  ) IF idDoc(i);                 
    codeOperation (INTEGER i) <- CONCAT '~', STRING(docType(i)), STRING(operCode(i)), STRING(userOp(i)) IF idDoc(i);
    
    isBankDays(INTEGER i) <- (CASE WHEN isCalendarDelay(i) = '1' THEN 0 WHEN isCalendarDelay(i) = '0' THEN 0 ELSE NULL) WHERE idDoc(i);   

    IF length(numberImportDocument()) > 0 THEN { //для отладки
        MESSAGE currentVersion(0);
        MESSAGE codeOperation(0);
    }
    
    FOR [GROUP SUM 1 BY idDoc(INTEGER i) IF Purchase.operation2Supermag(codeOperation(i)) AND NOT importOnlyStatus(Purchase.operation2Supermag(codeOperation(i))) ](STRING[50] newId) AND NOT userInvoice(newId) DO NEW o = UserInvoice {
        id(o) <- newId;
    }
      
    FOR PurchaseReturn.UserInvoice doc == PurchaseReturn.userInvoice(idDoc(INTEGER i)) AND NOT importOnlyStatus(Purchase.operation2Supermag(codeOperation(i))) AND NOT currentVersion(i) = PurchaseReturn.lastVersion(doc) DO {       
        number[Document](doc) <- STRING[48](docNumber(i));
        bornin(doc) <- bornIn(i);
        operation(doc) <- Purchase.operation2Supermag(codeOperation(i));
        isPosted(doc) <- docState(i) == 3;
//        createShipment(doc) <- docState(i) == 2 OR docState(i) == 3; 
        isClosed(doc) <- docState(i) == 0;
        lastStatusSupermag(doc) <- docState(i);
        supplier(doc) <- legalEntity(STRING(clientIndex(i)));
        supplierStock(doc) <- stock(STRING[100] (clientIndex(i)));
        customer(doc) <- legalEntity(stock(ISTRING[100] (locationFrom(i))));
        customerStock(doc) <- stock(ISTRING[100] (locationFrom(i)));
        date(doc) <- DATE (docDate(i));  
        time(doc) <- OVERRIDE time(doc), 09:00;
        imported(doc) <- TRUE;
        paymentCondition(doc) <- paymentCondition(paymentPeriod(paymentDelay(i), isBankDays(i))) WHERE paymentDelay(i) > 0;              
        lastVersion(doc) <- currentVersion(i);
    }  

    FOR PurchaseReturn.UserInvoice doc == PurchaseReturn.userInvoice(idDoc(INTEGER i)) AND importOnlyStatus(Purchase.operation2Supermag(codeOperation(i))) AND NOT currentVersion(i) = PurchaseReturn.lastVersion(doc) DO {
        isPosted(doc) <- docState(i) == 3;
//        createShipment(doc) <- docState(i) == 2 OR docState(i) == 3; 
        isClosed(doc) <- docState(i) == 0;           
        lastVersion(doc) <- currentVersion(i);
    }
    overImportPurchaseReturnInvoice();
    
    //импорт заказов-оснований для накладных. импорт всех оснований через overImportPurchaseInvoice() 
    sqlString() <- 'Select d.ID, d.doctype, d.opcode, d.userop, bs.baseId, bs.baseDoctype ' + 
                   'FROM Supermag.SMDocuments d, Supermag.SMWayBillsOut b, Supermag.SMCommonBases bs ' + 
                   'WHERE ' + filterSql() + ' AND bs.id(+)=d.id AND bs.doctype(+)=d.doctype';    

    IF enableLogImport() THEN logToFile('supermag', CONCAT '\n', 'Импорт накладные (закупка) возврат', sqlString());
            
    EXTERNAL SQL connectionString() EXEC sqlString() TO file;
    
    IMPORT TABLE FROM file() TO docNumber, docType, operCode, userOp, baseNumber, baseDoctype ;

    idDoc(INTEGER i) <- STRING[50](CONCAT '', STRING(docType(i)), STRING(docNumber(i)));
    idBase(INTEGER i) <- STRING[50](CONCAT '', STRING(baseDoctype(i)), STRING(baseNumber(i)));
    codeOperation (INTEGER i) <- CONCAT '~', STRING(docType(i)), STRING(operCode(i)), STRING(userOp(i)) IF idDoc(i);

    IF length(numberImportDocument()) > 0 THEN { //для отладки
        MESSAGE idDoc(0)  +  ' ' + idBase(0);
    }

    FOR PurchaseReturn.UserInvoice doc == PurchaseReturn.userInvoice(idDoc(INTEGER i)) AND NOT importOnlyStatus(Purchase.operation2Supermag(codeOperation(i))) DO {    
        include(Order order, doc) <- TRUE IF order = PurchaseReturn.userOrder(idBase(i));
    }    
    
    //импорт спецификаций
    sqlString() <- 'SELECT d.ID, d.DOCTYPE, d.LOCATIONFROM, ds.SPECITEM, ds.ARTICLE, ds.QUANTITY, ds.ITEMPRICE, ds.ITEMPRICENOTAX, ds.TOTALPRICE, ds.TOTALPRICENOTAX, dt.TAXRATE, dt.TAXSUM, dby.MANUFACTURERSPRICE, dby.RETAILPRICE ' + 
                   'FROM Supermag.SMDocuments d, Supermag.SMWayBillsOut b, Supermag.SMSpec ds, Supermag.SMSPECTAX dt, Supermag.SMSPECBY dby ' + 
                   'WHERE ds.DocType = \'WO\' AND ds.DocId = d.id AND ' + 
                   'dt.DocId(+) = ds.DocId AND dt.DocType(+) = \'WO\' AND dt.SPECITEM(+) = ds.SPECITEM AND ' + 
                   'dby.DocId(+) = ds.DocId AND dby.DocType(+) = \'WO\' AND dby.SPECITEM(+) = ds.SPECITEM AND ' + 
                   filterSql() + ' ORDER BY ds.doctype, ds.docid, ds.specitem';    

    IF enableLogImport() THEN logToFile('supermag', CONCAT '\n', 'Импорт накладные (закупка) возврат', sqlString());
            
    EXTERNAL SQL connectionString() EXEC sqlString() TO file;

    IMPORT TABLE FROM file() TO docNumber, docType, locationFrom, specItem, idItem, quantity, itemPrice, itemPriceNoTax, totalPrice, totalPriceNoTax, taxRate, taxSum, priceManufacturer, retailPrice;   
    
    idDoc(INTEGER i) <- STRING[50](CONCAT '', docType(i), docNumber(i)) WHERE docNumber(i) AND docType(i);
    idDet(INTEGER i) <- STRING[50](CONCAT '~', idDoc(i), specItem(i)) WHERE idDoc(i) AND specItem(i);
    codeOperation (INTEGER i) <- CONCAT '~', STRING(docType(i)), STRING(operCode(i)), STRING(userOp(i)) IF idDoc(i);
    currentVersion (INTEGER i) <- ( CONCAT '~', STRING(idDoc(i)), STRING(locationFrom(i)), STRING(specItem(i)), STRING(idItem(i)), STRING(quantity(i)), 
                                                STRING(itemPrice(i)), STRING(itemPriceNoTax(i)), STRING(totalPrice(i)), STRING(totalPriceNoTax(i)),  
                                                STRING(taxSum(i)), STRING(taxRate(i)), STRING(priceManufacturer(i)), STRING(retailPrice(i)) ) IF idDet(i);                  

    IF length(numberImportDocument()) > 0 THEN { //для отладки
        MESSAGE idDet(0);
        MESSAGE sqlString();
        MESSAGE currentVersion(0);        
    }

    FOR PurchaseReturn.userInvoice(idDoc(INTEGER i)) AND NOT importOnlyStatus(Purchase.operation2Supermag(codeOperation(i))) AND NOT PurchaseReturn.userInvoiceDetail(idDet(i)) DO NEW d = PurchaseReturn.UserInvoiceDetail {
        id(d) <- idDet(i);
        PurchaseReturn.userInvoice(d) <- PurchaseReturn.userInvoice(idDoc(i));
    }

    FOR PurchaseReturn.UserInvoiceDetail det = PurchaseReturn.userInvoiceDetail(idDet(INTEGER i)) AND NOT importOnlyStatus(Purchase.operation2Supermag(codeOperation(i))) AND NOT currentVersion(i) = PurchaseReturn.lastVersion(det) DO {    
        sku(det) <- item(idItem(i));
        quantity(det) <- quantity(i);  
        priceListType(det) <- OVERRIDE priceListType(det), SystemLedgerPriceListType.supplierPricingPriceListType;
        invoicePrice(det) <- OVERRIDE invoicePrice(det), NUMERIC[16,4](itemPrice(i));
        price(det) <- OVERRIDE price(det), NUMERIC[16,4](itemPriceNoTax(i));
//        invoiceSum(det) <- NUMERIC[16,4](totalPrice(i));
//        sum(det) <- NUMERIC[16,4](totalPriceNoTax(i));
//        VATSum(det) <- taxSum(i);
        VAT(det) <- OVERRIDE valueCurrentVAT(countrySupplierStock(det), taxRate(i)), VAT(sku(det));
        valueVAT(det) <- taxRate(i);
        dataIndex(det) <- specItem(i);
        manufacturingPrice(det) <- priceManufacturer(i);
//     retailPriceListType(det) <- retailPriceListType(stock(ISTRING[100] (locationTo(i))));
//      retailPrice(det) <- retailPrice(i);
        imported(det) <- TRUE;
        price(det) <- OVERRIDE price(det), NUMERIC[16,4](itemPriceNoTax(i));
        lastVersion(det) <- currentVersion(i);
   }
   
   executeLocalEvents('PurchaseReturn.UserInvoice');
   
   APPLY;           
}

EXTEND FORM integrationData PROPERTIES importPurchaseReturnInvoice();

overImportPurchaseReturnInvoiceStatus ABSTRACT LIST();

importPurchaseReturnInvoiceStatus 'Импорт накладные (закупка)' (STRING indexDoc) {
    imported (PurchaseReturn.Invoice i) <- NULL;         
    imported (PurchaseReturn.InvoiceDetail d) <- NULL;            
               
    filterSql() <- 'd.DocType = \'' + getWord(indexDoc,'~',1) + '\' AND d.id = \'' + getWord(indexDoc,'~',2) + '\''; 
    
    sqlString() <- 'Select d.ID, d.doctype, d.opcode, d.userop, UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(d.bornin)), d.docstate, f.isadmitted from Supermag.SMDocuments d, Supermag.SMFinobligation f WHERE ' + filterSql() + ' AND f.docid(+)=d.id AND f.doctype(+)=d.doctype';    
    
    IF enableLogImport() THEN logToFile('supermag', CONCAT '\n', 'Импорт накладные (закупка)', sqlString());
    
    TRY
    EXTERNAL SQL connectionString() EXEC sqlString() TO file;
    CATCH MESSAGE sqlString();
       
    IMPORT TABLE FROM file() TO docNumber, docType, operCode, userOp, bornIn, docState, isAdmitted;
    
    idDoc(INTEGER i) <- STRING[50](CONCAT '', STRING(docType(i)), STRING(docNumber(i)));
    codeOperation (INTEGER i) <- CONCAT '~', STRING(docType(i)), STRING(operCode(i)), STRING(userOp(i)) IF idDoc(i);

    FOR PurchaseReturn.UserInvoice doc == PurchaseReturn.userInvoice(idDoc(INTEGER i)) DO {       
        CASE WHEN docState(0) = 0 THEN {
            isPosted(doc) <- NULL;
            isClosed(doc) <- TRUE;                
        }
        WHEN docState(0) = 1 THEN {
            isPosted(doc) <- NULL;
            isClosed(doc) <- NULL;                        
        } 
        WHEN docState(0) = 2 THEN {
            isPosted(doc) <- NULL;
            isClosed(doc) <- NULL;;                
        } 
        WHEN docState(0) = 3 THEN {
            isPosted(doc) <- TRUE;
//            isClosed(doc) <- TRUE;        
        } 
    }      
            
   overImportPurchaseReturnInvoiceStatus();
    
    APPLY;
}

overImportPurchaseReturnInvoiceDetail ABSTRACT LIST (PurchaseReturn.UserInvoiceDetail, INTEGER);;

importPurchaseReturnInvoiceFull 'Импорт накладные (закупка-возврат)' (STRING indexDoc) {
    imported (PurchaseReturn.Invoice i) <- NULL;         
    imported (PurchaseReturn.InvoiceDetail d) <- NULL;            

    filterSql() <- 'd.DocType = \'' + getWord(indexDoc,'~',1) + '\' AND b.DocType(+)= d.DocType AND b.id(+) = d.id AND d.id = \'' + getWord(indexDoc,'~',2) + '\''; 
                       
    sqlString() <- 'Select d.ID, d.doctype, d.opcode, d.userop, UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(d.bornin)), d.createdat, d.docstate, d.clientindex, d.locationfrom, d.Commentary, f.paymentdelay, f.iscalendardelay, f.isadmitted ' +
                   'from Supermag.SMDocuments d, Supermag.SMWayBillsOut b, Supermag.SMFinobligation f ' + 
                   'where ' + filterSql() + ' AND f.docid(+)=d.id AND f.doctype(+)=d.doctype';    

    IF enableLogImport() THEN logToFile('supermag', CONCAT '\n', 'Импорт накладные (закупка-возврат)', sqlString());
    
    EXTERNAL SQL connectionString() EXEC sqlString() TO file;
       
    IMPORT TABLE FROM file() TO docNumber, docType, operCode, userOp, bornIn, docDate, docState, clientIndex, locationFrom, comment, paymentDelay, isCalendarDelay, isAdmitted ;
    
    idDoc(INTEGER i) <- STRING[50](CONCAT '', STRING(docType(i)), STRING(docNumber(i)));
    codeOperation (INTEGER i) <- CONCAT '~', STRING(docType(i)), STRING(operCode(i)), STRING(userOp(i)) IF idDoc(i);
    
    isBankDays(INTEGER i) <- (CASE WHEN isCalendarDelay(i) = '1' THEN 0 WHEN isCalendarDelay(i) = '0' THEN 0 ELSE NULL) WHERE idDoc(i);   
    
    IF NOT userInvoice(idDoc(0)) THEN NEW o = UserInvoice {  id(o) <- idDoc(0); }
              
    FOR PurchaseReturn.UserInvoice doc == PurchaseReturn.userInvoice(idDoc(INTEGER i)) DO {       
        CASE WHEN docState(0) = 0 THEN {
            isPosted(doc) <- NULL;
            isClosed(doc) <- TRUE;                
        }
        WHEN docState(0) = 1 THEN {
            isPosted(doc) <- NULL;
            isClosed(doc) <- NULL;                        
        } 
        WHEN docState(0) = 2 THEN {
            isPosted(doc) <- NULL;
            isClosed(doc) <- NULL;;                
        } 
        WHEN docState(0) = 3 THEN {
            isPosted(doc) <- TRUE;
//            isClosed(doc) <- TRUE;        
        } 
    }      

    LOCAL propDocType = ISTRING[50] (INTEGER);
    LOCAL propDocNumber = ISTRING[50] (INTEGER);
    LOCAL propIdDoc = ISTRING[50] (INTEGER);

    sqlString() <- 'SELECT DOCID, DOCTYPE, PARAMNAME, PARAMVALUE FROM Supermag.SMDOCPROPS WHERE DOCTYPE = \'' + getWord(indexDoc,'~',1) + '\' AND DOCID = \'' + getWord(indexDoc,'~',2) + '\'';    

    EXTERNAL SQL connectionString() EXEC sqlString() TO file;
    
    IMPORT TABLE FROM file() TO propDocNumber, propDocType, property, value;

    propIdDoc(INTEGER i) <- STRING[50](CONCAT '', STRING(propDocType(i)), STRING(propDocNumber(i)));
        
    FOR UserInvoice doc == userInvoice(propIdDoc(INTEGER i)) AND property(i) DO {
        docprops(doc, property(i)) <- value(i);
    }         
    
    overImportPurchaseReturnInvoiceStatus();
                      
    FOR PurchaseReturn.UserInvoice doc == PurchaseReturn.userInvoice(idDoc(INTEGER i)) DO {       
        number[Document](doc) <- STRING[48](docNumber(i));
        bornin(doc) <- bornIn(i);
        operation(doc) <- Purchase.operation2Supermag(codeOperation(i));
        lastStatusSupermag(doc) <- docState(i);
        supplier(doc) <- legalEntity(STRING(clientIndex(i)));
        supplierStock(doc) <- stock(STRING[100] (clientIndex(i)));
        customer(doc) <- legalEntity(stock(ISTRING[100] (locationTo(i))));
        customerStock(doc) <- stock(ISTRING[100] (locationTo(i)));
        date(doc) <- DATE (docDate(i));  
        time(doc) <- OVERRIDE time(doc), 09:00;
        imported(doc) <- TRUE;
        paymentCondition(doc) <- paymentCondition(paymentPeriod(paymentDelay(i), isBankDays(i))) WHERE paymentDelay(i) > 0;              
    }  
    
    overImportPurchaseReturnInvoice();

    //импорт заказов-оснований и договоров для накладных. импорт всех оснований через overImportPurchaseInvoice()
    sqlString() <- 'Select d.ID, d.doctype, d.opcode, d.userop, bs.baseId, bs.baseDoctype from Supermag.SMDocuments d, Supermag.SMWayBillsOut b, Supermag.SMCommonBases bs where ' + filterSql() + ' AND bs.id(+)=d.id AND bs.doctype(+)=d.doctype';    

    IF enableLogImport() THEN logToFile('supermag', CONCAT '\n', 'Импорт накладные (закупка)', sqlString());

    EXTERNAL SQL connectionString() EXEC sqlString() TO file;

    IMPORT TABLE FROM file() TO docNumber, docType, operCode, userOp, baseNumber, baseDoctype ;

    idDoc(INTEGER i) <- STRING[50](CONCAT '', STRING(docType(i)), STRING(docNumber(i)));
    idBase(INTEGER i) <- STRING[50](CONCAT '', STRING(baseDoctype(i)), STRING(baseNumber(i)));

    FOR PurchaseReturn.UserInvoice doc == PurchaseReturn.userInvoice(idDoc(INTEGER i)) AND userContractSku(idBase(i)) DO {    
        contractSku(doc) <- userContractSku(idBase(i));        
    }    

    FOR PurchaseReturn.UserInvoice doc == PurchaseReturn.userInvoice(idDoc(INTEGER i)) AND PurchaseReturn.userOrder(idBase(i)) AND baseDoctype(i) = 'OR' DO {
        include(Order orS, doc) <- NULL;    
        include(Order orS, doc) <- TRUE WHERE orS = PurchaseReturn.userOrder(idBase(i));
    }        

    //импорт спецификаций
    sqlString() <- 'SELECT d.ID, d.DOCTYPE, d.LOCATIONFROM, ds.SPECITEM, ds.ARTICLE, ds.QUANTITY, ds.ITEMPRICE, ds.ITEMPRICENOTAX, ds.TOTALPRICE, ds.TOTALPRICENOTAX, dt.TAXRATE, dt.TAXSUM, dby.MANUFACTURERSPRICE, dby.RETAILPRICE ' + 
                   'FROM Supermag.SMDocuments d, Supermag.SMWayBillsOut b, Supermag.SMSpec ds, Supermag.SMSPECTAX dt, Supermag.SMSPECBY dby ' + 
                   'WHERE ds.DocType = d.DocType AND ds.DocId = d.id AND ' + 
                   'dt.DocType(+) = ds.DocType AND dt.DocId(+) = ds.DocId AND dt.SPECITEM(+) = ds.SPECITEM AND ' + 
                   'dby.DocType(+) = ds.DocType AND dby.DocId(+) = ds.DocId AND dby.SPECITEM(+) = ds.SPECITEM AND ' + 
                   filterSql()+' ORDER BY ds.doctype, ds.docid, ds.specitem';    

    IF enableLogImport() THEN logToFile('supermag', CONCAT '\n', 'Импорт накладные (закупка)', sqlString());

    EXTERNAL SQL connectionString() EXEC sqlString() TO file;

    IMPORT TABLE FROM file() TO docNumber, docType, locationFrom, specItem, idItem, quantity, itemPrice, itemPriceNoTax, totalPrice, totalPriceNoTax, taxRate, taxSum, priceManufacturer, retailPrice;

    idDoc(INTEGER i) <- STRING[50](CONCAT '', docType(i), docNumber(i)) WHERE docNumber(i) AND docType(i);
    idDet(INTEGER i) <- STRING[50](CONCAT '~', idDoc(i), specItem(i)) WHERE idDoc(i) AND specItem(i);

    FOR PurchaseReturn.userInvoice(idDoc(INTEGER i)) AND NOT PurchaseReturn.userInvoiceDetail(idDet(i)) DO NEW det = PurchaseReturn.UserInvoiceDetail {
        PurchaseReturn.userInvoice(det) <- PurchaseReturn.userInvoice(idDoc(i));
        id(det) <- idDet(i);
    }

    FOR PurchaseReturn.UserInvoiceDetail det = PurchaseReturn.userInvoiceDetail(idDet(INTEGER i)) AND NOT importOnlyStatus(Purchase.operation2Supermag(codeOperation(i))) AND NOT currentVersion(i) = PurchaseReturn.lastVersion(det) DO {    
        priceListType(det) <- OVERRIDE priceListType(det), SystemLedgerPriceListType.supplierPricingPriceListType;
        valueVAT(det) <- taxRate(i);
   }


    FOR PurchaseReturn.UserInvoiceDetail det = PurchaseReturn.userInvoiceDetail(idDet(INTEGER i))  DO {
        sku(det) <- item(idItem(i));
        dataIndex(det) <- specItem(i);
        quantity(det) <- quantity(i);  
        invoicePrice(det) <- NUMERIC[16,2](round(itemPrice(i),2));
        price(det) <- NUMERIC[16,2](round(itemPriceNoTax(i),2));
        VAT(det) <- OVERRIDE valueCurrentVAT(countrySupplierStock(det), taxRate(i)), VAT(sku(det));
        manufacturingPrice(det) <- priceManufacturer(i);
//        valueVAT(det) <- taxRate(i);
//        manufacturingMarkup(det) <- CASE WHEN calcManufacturingMarkupFromPrices(det) THEN NUMERIC[8,3]( (calcBaseManufacturingPrice(det) / manufacturingPrice(det) - 1) *100)      
//                                                                                     ELSE calcManufacturingMarkup(det);        
        overImportPurchaseReturnInvoiceDetail(det,i);   // для Бигзз определяем retailPriceListType(det)
        connectOrder(det);       
        imported(det) <- TRUE; 
    }       

    DELETE PurchaseReturn.UserInvoiceDetail det WHERE det IS PurchaseReturn.UserInvoiceDetail AND imported(userInvoice(det)) AND NOT imported(det);

    executeLocalEvents('PurchaseReturn.UserInvoice');

    APPLY;               
}


importPurchaseReturnInvoices () + {
    LOCAL indexDoc = STRING ();
    
    FOR [GROUP SUM 1 BY indexDoc(INTEGER i) IF Purchase.operation2Supermag(codeOperation(i)) IS Purchase.Operation AND importOnlyStatus(Purchase.operation2Supermag(codeOperation(i))) AND userInvoice(idDoc(i))](STRING indexDoc) NOINLINE DO  {           
        indexDoc() <- indexDoc;     
        NEWSESSION NESTED (indexDoc){            
            importPurchaseReturnInvoiceStatus(indexDoc());
        } 
    }
    
    FOR [GROUP SUM 1 BY indexDoc(INTEGER i) IF Purchase.operation2Supermag(codeOperation(i)) IS Purchase.Operation AND NOT (importOnlyStatus(Purchase.operation2Supermag(codeOperation(i))) AND userInvoice(idDoc(i)))](STRING indexDoc) NOINLINE DO {       
        indexDoc() <- indexDoc; 
        NEWSESSION NESTED (indexDoc){
            importPurchaseReturnInvoiceFull(indexDoc());
        } 
    }
}
