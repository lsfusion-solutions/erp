MODULE SupermagInternalWay;

REQUIRE SupermagSaleInvoice, PricingSalePurchase, SalePurchaseInvoiceShipment, SaleManufacturingPrice, PriceList, PriceListStore, PriceListOver3, Utils, PurchaseSaleOrder;

PRIORITY SupermagSettings;

NAMESPACE Sale;

overExportSaleInvoiceIW ABSTRACT LIST (Invoice, DocMain);

exportSaleInvoiceIW 'Экспорт в супермаг' (Invoice doc) {
    inc(DocMain expMain) <- NULL;
    IF docTypeSupermag(operation(doc)) AND opcodeSupermag(operation(doc)) THEN {        
        LOCAL NESTED dt = DATETIME();        
        NEW expMain = DocMain {
                inc(expMain) <- TRUE;          
                doctype(expMain) <- STRING[10] (getWord(docTypeSupermag(operation(doc)),';',1));
                id(doc) <- CONCAT '', doctype(expMain), seriesNumber(doc);               
                id(expMain) <- id(doc); 
                docid(expMain) <- seriesNumber(doc);            
                bornin(expMain) <- OVERRIDE bornin(doc), baseIDSupermag();
                opcode(expMain) <- STRING[10] (getWord(opcodeSupermag(operation(doc)),';',1));
                userop(expMain) <- STRING[10] (getWord(useropSupermag(operation(doc)),';',1));
                creatdate(expMain) <- shipmentDateTime(doc);                
                docstate(expMain) <- CASE WHEN isPosted(doc) THEN 3 
                                      WHEN createShipment(doc) THEN 2 
                                      WHEN isClosed(doc) THEN 0 ELSE 1;
                lastStatusSupermag(doc) <- OVERRIDE lastStatusSupermag(doc), docstate(expMain); 
                invoiceDocCreate(expMain) <- dateTime(doc);
                invoiceDocSum(expMain) <- OVERRIDE overInvoiceDocSum(doc), sumInvoiceConsignmentDetail(doc);
                invoiceDocNumber(expMain) <- CONCAT ' ', invoiceNumber(doc), invoiceSeries(doc); //OVERRIDE  (CONCAT ' ', invoiceNumber(doc), invoiceSeries(doc)), seriesNumber(doc);      
                priceRoundMode(expMain) <- 0 IF doc IS Invoice;                                                
                createFinobligation(expMain)  <- createFinobligation(operation(doc));                               
                locationFrom(expMain) <- id(supplierStock(doc));
                locationTo(expMain) <- id(customerStock(doc));
                ourselfclient(expMain) <- id(legalEntity(customerStock(doc))); 
                                                           
                FOR invoice(InvoiceDetail docd) = doc DO {
                    NEW expDet = DocDetail {
                        dataIndex(docd) <- index(docd); 
                        id(docd) <- (CONCAT '~',id(doc),index(docd));
                        index(expDet) <- index(docd);
                        docMain(expDet) <- expMain;
                        id(expDet) <- (CONCAT '~',id(expMain),index(expDet));
                        skuId(expDet) <- id(sku(docd));                                                                           
                        quantity(expDet) <- OVERRIDE purchaseShipmentQuantity(docd),  shipmentQuantity(docd);
                        blankquantity(expDet) <- OVERRIDE quantity(docd), 0;
                        priceWithTax(expDet) <- price(docd);// invoicePrice(docd);
                        //valueTax(expDet) <- valueVAT(docd);
                        priceNoTax(expDet) <- price(docd);
                        priceCurr(expDet) <- round(priceWithTax(expDet)/curRate(expMain),4);
                        sumWithTax(expDet) <- OVERRIDE abs(round2(quantity(expDet)*price(docd))), abs(sum(docd)), 0;//OVERRIDE abs(invoiceSum(docd)), 0;
                        sumNoTax(expDet) <- OVERRIDE abs(round2(quantity(expDet)*price(docd))), abs(sum(docd)), 0;
                        //sumTax(expDet) <- OVERRIDE VATSum(docd), 0;
                        sumCurr(expDet) <- round(sumWithTax(expDet)/curRate(expMain),4);
                        priceManufacturer(expDet) <- CASE WHEN manufacturingPrice(docd) >= 0.0001 THEN manufacturingPrice(docd) 
                                                          WHEN NOT isSubstring('Розн',namePriceListType(docd)) THEN priceNoTax(expDet);
                        extracharge(expDet) <- CASE WHEN id(operation(doc)) = 'saleStoreStore' THEN OVERRIDE wholesaleMarkup(docd), 0 ELSE 0;
                        expiryDate(expDet) <- expiryDate(docd); 
                     //   priceRetail(expDet) <- (OVERRIDE retailPrice(docd), 0);
                        causeType(expDet) <- STRING[10] (OVERRIDE ( getWord(docTypeSupermag(operation(shipmentDetail(batch(docd)))),';',1) IF shipmentDetail(batch(docd))), causeType(docd) );                                          
                        causeId(expDet) <- STRING[20] (OVERRIDE ( seriesNumber(shipmentDetail(batch(docd))) IF shipmentDetail(batch(docd))), causeId(docd) );                                          
                        causeSpecItem(expDet) <- STRING[10] ( OVERRIDE (  index(shipmentDetail(batch(docd))) IF shipmentDetail(batch(docd))), causeSpecItem(docd) );                                          
                    }
                    
                }           
                sumWithTax(expMain) <- GROUP SUM abs(sumWithTax(DocDetail expDet)) IF docMain(expDet) = expMain;                
                sumCurr(expMain) <- GROUP SUM sumCurr(DocDetail expDet) IF docMain(expDet) = expMain; 
                countSpec(expMain) <- GROUP SUM 1 IF docMain(DocDetail expDet) = expMain;
                                
         //       acceptsum(expMain)  <- creditInvoiceSumInvoiceDetail(doc);
                basesum(expMain) <- invoiceSumInvoiceDetail(doc);
                calcenddate(expMain) <- OVERRIDE dateTime(lastInvoiceContractLedger(doc)), shipmentDateTime(doc);
                paymentdelay(expMain) <- countDays(lastPaymentPeriod(paymentCondition(doc)));
                finagent(expMain) <- id(supplier(doc)); 
                iscalendardelay(expMain) <- IF bankingDays(paymentCondition(doc)) THEN '0' ELSE '1'; 
                
                FOR include(Order o, doc) DO NEW b = DocBase {
                    basisDoc(expMain, b) <- TRUE;
                    docid(b) <- seriesNumber(o);
                    doctype(b) <- 'SO';
                }
                
                FOR ContractSku c = contractSku(doc) DO NEW b = DocBase {
                    basisDoc(expMain, b) <- TRUE;
                    docid(b) <- seriesNumber(c);
                    doctype(b) <- 'CO';
                }                                
                
                overExportSaleInvoiceIW(doc, expMain);

                FOR docprops(doc, STRING prop) DO NEW p = DocProp {
                                                           docMain(p) <- expMain;
                                                           paramname(p) <- STRING[50](prop);
                                                           paramvalue(p) <- STRING[100](docprops(doc, prop)); 
                }
                    
                IF countSpec(expMain) > 0 THEN {
                    dt () <- currentDateTime();        
                    TRY EXPORT exportIW XML TO System.exportFile;
                    CATCH logToFile('supermag', CONCAT '\n', 'Расходная накладная', 'file://' + exportDirectorySupermag() + '/' + 'IW_' +STRING[30](LONG(doc))+'_'+(OVERRIDE seriesNumber(doc), '')+'_'+ formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
                    TRY {
                            WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
                            WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/COPY/' + doctype(expMain) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
                        }
                    CATCH logToFile('supermag', CONCAT '\n', 'Расходная накладная', 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) +'_' + STRING[30](LONG(doc)) + '_' + (OVERRIDE seriesNumber(doc), '') + '_' + formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
                }                
                inc(expMain) <- NULL;
        }                        
    }       
    inc(DocMain expMain) <- NULL;
    APPLY;
}

overApplySaleInvoice (Sale.UserInvoice doc) + {
    IF (getWord(docTypeSupermag(operation(doc)),';',1)) = 'IW' AND (inExport(supplierStock(doc)) OR inExport(customerStock(doc))) AND (isPosted(doc) OR createShipment(doc)) THEN exportSaleInvoiceIW(doc);
}

overExportSalePurchaseInvoiceAC ABSTRACT LIST (Invoice, DocMain) ;

exportSalePurchaseInvoiceAC 'Экспорт в супермаг' (Invoice doc) {
    inc(DocMain d) <- NULL;
    IF createPurchasePricing(doc) THEN {   
        LOCAL NESTED dt = DATETIME();
        NEW expMain = DocMain {
                inc(expMain) <- TRUE;
                doctype(expMain) <- 'AC';
                docid(expMain) <- seriesNumber(doc);                 
                id(expMain) <- CONCAT '', doctype(expMain), seriesNumber(doc);                 
                opcode(expMain) <- '-1';
                docstate(expMain) <- CASE WHEN isPosted(doc) THEN 3 
                                      WHEN isClosed(doc) THEN 0 ELSE 2;
                creatdate(expMain) <- shipmentDateTime(doc);
                execDate(expMain) <- postedTime(doc);
                execTime(expMain) <- postedTime(doc);                
                priceType(expMain) <- idSupermagPriceType(customerStock(doc)); //STRING[10](replace( (OVERRIDE id(retailPriceListType(customerStock(doc))),  id(baseBPriceListLedger(retailPriceListType(customerStock(doc))))),'D',''));
                bornin(expMain) <- OVERRIDE bornin(doc), baseIDSupermag();
                location(expMain)  <- id(customerStock(doc));
                reasonPricing(expMain) <- '0';     
                priceRoundMode(expMain) <- 0;
                FOR invoice(InvoiceDetail docd) = doc DO {
                    NEW expDet = DocDetail {
                        index(expDet) <- index(docd);
                        docMain(expDet) <- expMain;
                        id(expDet) <- (CONCAT '~',id(expMain),index(expDet));
                        skuId(expDet) <- id(sku(docd));                                                                           
                        quantity(expDet) <- purchasePricingQuantity(docd);
                        valueTax(expDet) <- calcValuePurchaseRetailVAT(docd);
                        priceWithTax(expDet) <- purchaseRetailPrice(docd);
                        priceNoTax(expDet) <- NUMERIC[18,4] ( abs(round( priceWithTax(expDet) / (1 + valueTax(expDet)/100),4)));
                        priceCurr(expDet) <- round(priceWithTax(expDet)/curRate(expMain),4);
                        sumWithTax(expDet) <- purchaseRetailSum(docd);
                        sumNoTax(expDet) <- NUMERIC[18,4] ( abs(round( sumWithTax(expDet) / (1 + valueTax(expDet)/100),2)));
                        sumCurr(expDet) <-round(sumWithTax(expDet)/curRate(expMain),4);
                        sumTax(expDet) <- purchaseRetailVATSum(docd);
                        oldPrice(expDet) <- purchaseRetailPriceB(docd);
                        flags(expDet) <- '0';
                        revalSum(expDet) <- 0.00;
                        revalOperQuantity(expDet) <- 0.00;
                    }
                }
                    
                overExportSalePurchaseInvoiceAC(doc,expMain);
                
                sumWithTax(expMain) <- GROUP SUM abs(sumWithTax(DocDetail expDet)) IF docMain(expDet) = expMain;                
                sumCurr(expMain) <- GROUP SUM sumCurr(DocDetail expDet) IF docMain(expDet) = expMain; 
                countSpec(expMain) <- GROUP SUM 1 IF docMain(DocDetail expDet) = expMain;                
                
                NEW b = DocBase {
                    basisDoc(expMain, b) <- TRUE;
                    docid(b) <- seriesNumber(doc);
                    doctype(b) <- 'IW';
                }
                
                
                IF countSpec(expMain) > 0 THEN {
                    dt () <- currentDateTime();        
                    TRY EXPORT exportAC XML TO System.exportFile;
                    CATCH logToFile('supermag', CONCAT '\n', 'Расценка на приходе', 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) +  '_' +STRING[30](LONG(doc))+'_'+(OVERRIDE seriesNumber(doc), '')+'_'+ formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
                    TRY {
                            WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
                            WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/COPY/' + doctype(expMain) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
                        }
                    CATCH logToFile('supermag', CONCAT '\n', 'Расценка на приходе', 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) +'_' + STRING[30](LONG(doc)) + '_' + (OVERRIDE seriesNumber(doc), '') + '_' + formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
                }    
                inc(expMain) <- NULL;
        }                                    
    }       
    APPLY;    
}

overApplySaleInvoice (Sale.Invoice doc) + {
    IF (getWord(docTypeSupermag(operation(doc)),';',1)) = 'IW' AND (inExport(supplierStock(doc)) OR inExport(customerStock(doc))) AND (isPosted(doc) OR createPurchasePricing(doc)) THEN exportSalePurchaseInvoiceAC(doc);
}

//-----------------------------------------------------------------------------------------------------импорт
overImportInternalWayStatus ABSTRACT LIST ();
importInternalWayStatus 'Импорт накладные (перемещение)' (STRING indexDoc) {
               
    filterSql() <- 'd.DocType = \'' + getWord(indexDoc,'~',1) + '\' AND d.id = \'' + getWord(indexDoc,'~',2) + '\''; 
    
    sqlString() <- 'Select d.ID, d.doctype, d.opcode, d.userop, UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(d.bornin)), d.docstate from Supermag.SMDocuments d WHERE ' + filterSql();    
    
    IF enableLogImport() THEN logToFile('supermag', CONCAT '\n', 'Импорт накладные (перемещение)', sqlString());
    
    TRY
    EXTERNAL SQL connectionString() EXEC sqlString() TO file;
    CATCH MESSAGE sqlString();
       
    IMPORT TABLE FROM file() TO docNumber, docType, operCode, userOp, bornIn, docState;
    
    idDoc(INTEGER i) <- STRING[50](CONCAT '', STRING(docType(i)), STRING(docNumber(i)));
    codeOperation (INTEGER i) <- CONCAT '~', STRING(docType(i)), STRING(operCode(i)), STRING(userOp(i)) IF idDoc(i);

    FOR Sale.UserInvoice doc == Sale.userInvoice(idDoc(INTEGER i)) DO {       
        CASE WHEN docState(0) = 0 THEN {
            isPosted(doc) <- NULL;
            isClosed(doc) <- TRUE;                
        }
        WHEN docState(0) = 1 THEN {
            isPosted(doc) <- NULL;
            isClosed(doc) <- NULL;                        
        } 
        WHEN docState(0) = 2 THEN {
            isPosted(doc) <- NULL;
            isClosed(doc) <- NULL;;                
        } 
        WHEN docState(0) = 3 THEN {
            isPosted(doc) <- TRUE;
//            isClosed(doc) <- TRUE;        
        } 
    }      
            
    overImportInternalWayStatus();
    
    APPLY;
}

overImportInternalWay ABSTRACT LIST ();
overImportInternalWay2 ABSTRACT LIST ();
overImportInternalWayDet ABSTRACT LIST (Sale.UserInvoiceDetail, INTEGER );

importInternalWayFull 'Импорт накладные (перемещение)' (STRING indexDoc) {

    imported (Sale.Invoice i) <- NULL;         
    imported (Sale.InvoiceDetail d) <- NULL;            

    filterSql() <- 'd.DocType = \'' + getWord(indexDoc,'~',1) + '\' AND d.id = \'' + getWord(indexDoc,'~',2) + '\''; 
    
    sqlString() <- 'Select d.ID, d.doctype, d.opcode, d.userop, UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(d.bornin)), d.createdat, d.docstate, d.locationto, d.locationfrom, d.Commentary from Supermag.SMDocuments d where ' + filterSql();    

    IF enableLogImport() THEN logToFile('supermag', CONCAT '\n', 'Импорт накладные (перемещение)', sqlString());
    
    EXTERNAL SQL connectionString() EXEC sqlString() TO file;
       
    IMPORT TABLE FROM file() TO docNumber, docType, operCode, userOp, bornIn, docDate, docState, locationTo, locationFrom, comment;
    
    codeOperation (INTEGER i) <- CONCAT '~', STRING(docType(i)), STRING(operCode(i)), STRING(userOp(i)) IF idDoc(i);
    idDoc(INTEGER i) <- STRING[50](CONCAT '', STRING(docType(i)), STRING(docNumber(i)));

    IF NOT userInvoice(idDoc(0)) AND NOT docState(0) = 1 THEN NEW o = UserInvoice {  id(o) <- idDoc(0); }         
              
    FOR Sale.UserInvoice doc == Sale.userInvoice(idDoc(INTEGER i)) DO {       
        number[Document](doc) <- STRING[48](docNumber(i));
        bornin(doc) <- bornIn(i);
        operation(doc) <- Sale.operation1Supermag(codeOperation(i));
        supplierStock(doc) <- stock(ISTRING[100] (locationFrom(i)));
        supplier(doc) <- legalEntity(supplierStock(doc));
        customerStock(doc) <- stock(ISTRING[100] (locationTo(i)));
        customer(doc) <- legalEntity(customerStock(doc));
        date(doc) <- DATE (docDate(i));  
        time(doc) <- OVERRIDE time(doc), 09:00;
        createShipment(doc) <- DATE(startDate(supplierStock(doc))) <= date(doc) AND NOT DATE(endDate(supplierStock(doc))) < date(doc); 
        createPurchaseShipment(doc) <- DATE(startDate(customerStock(doc))) <= date(doc) AND NOT DATE(endDate(customerStock(doc))) < date(doc) ;
//        createShipment(doc) <- (docState(i) == 2 OR docState(i) == 3) AND DATE(startDate(supplierStock(doc))) <= date(doc); 
//        createPurchaseShipment(doc) <- (docState(i) == 2 OR docState(i) == 3) AND DATE(startDate(customerStock(doc))) <= date(doc) ;
        updateManufacturingPrice(doc) <- TRUE IF NOT DATE(startDate(customerStock(doc))) <= date(doc) OR NOT DATE(endDate(customerStock(doc))) >= date(doc);
        imported(doc) <- TRUE;
    }
    
    FOR Sale.UserInvoice doc == Sale.userInvoice(idDoc(INTEGER i)) DO {       
        CASE WHEN docState(0) = 0 THEN {
            isPosted(doc) <- NULL;
            isClosed(doc) <- TRUE;                
        }
        WHEN docState(0) = 1 THEN {
            isPosted(doc) <- NULL;
            isClosed(doc) <- NULL;                        
        } 
        WHEN docState(0) = 2 THEN {
            isPosted(doc) <- NULL;
            isClosed(doc) <- NULL;;                
        } 
        WHEN docState(0) = 3 THEN {
            isPosted(doc) <- TRUE;
//            isClosed(doc) <- TRUE;        
        } 
    }      
    
    LOCAL propDocType = ISTRING[50] (INTEGER);
    LOCAL propDocNumber = ISTRING[50] (INTEGER);
    LOCAL propIdDoc = ISTRING[50] (INTEGER);

    sqlString() <- 'SELECT DOCID, DOCTYPE, PARAMNAME, PARAMVALUE FROM Supermag.SMDOCPROPS WHERE DOCTYPE = \'' + getWord(indexDoc,'~',1) + '\' AND DOCID = \'' + getWord(indexDoc,'~',2) + '\'';    

    EXTERNAL SQL connectionString() EXEC sqlString() TO file;
    
    IMPORT TABLE FROM file() TO propDocNumber, propDocType, property, value;

    propIdDoc(INTEGER i) <- STRING[50](CONCAT '', STRING(propDocType(i)), STRING(propDocNumber(i)));
        
    FOR UserInvoice doc == userInvoice(propIdDoc(INTEGER i)) AND property(i) DO {
        docprops(doc, property(i)) <- value(i);
    }         
        
    overImportInternalWay();

    //импорт кладских требований для накладных. импорт всех оснований через overImportInternalWay2()
    sqlString() <- 'Select d.ID, d.doctype, d.opcode, d.userop, bs.baseId, bs.baseDoctype from Supermag.SMDocuments d, Supermag.SMCommonBases bs where ' + filterSql() + ' AND bs.id(+)=d.id AND bs.doctype(+)=d.doctype';

    IF enableLogImport() THEN logToFile('supermag', CONCAT '\n', 'Импорт накладные (перемещение)', sqlString());

    EXTERNAL SQL connectionString() EXEC sqlString() TO file;

    IMPORT TABLE FROM file() TO docNumber, docType, operCode, userOp, baseNumber, baseDoctype ;

    idDoc(INTEGER i) <- STRING[50](CONCAT '', STRING(docType(i)), STRING(docNumber(i)));
    idBase(INTEGER i) <- STRING[50](CONCAT '', STRING(baseDoctype(i)), STRING(baseNumber(i)));

    FOR Sale.UserInvoice doc == Sale.userInvoice(idDoc(INTEGER i)) AND baseDoctype(i) = 'SO' DO {    
        include(SaleOrder orS, doc) <- NULL;    
        include(SaleOrder orS, doc) <- TRUE WHERE orS = saleOrder(Purchase.userOrder(idBase(i)));
    }
               
    overImportInternalWay2();

    sqlString() <- 'SELECT d.ID, d.DOCTYPE, d.LOCATIONFROM, ds.SPECITEM, ds.ARTICLE, ds.QUANTITY, ds.ITEMPRICE, ds.ITEMPRICENOTAX, ds.TOTALPRICE, ds.TOTALPRICENOTAX, ' + 
    'ds.CAUSETYPE, ds.CAUSEID, ds.CAUSESPECITEM, dt.TAXRATE, dt.TAXSUM, dby.MANUFACTURERSPRICE, dmis.QUANTBYDOC ' + 
    'FROM Supermag.SMDocuments d, Supermag.SMSpec ds, Supermag.SMSPECTAX dt, Supermag.SMSPECBY dby, Supermag.SLSPECQMISMATCH dmis ' + 
    'WHERE ds.DOCTYPE = d.DOCTYPE AND ds.DOCID = d.ID AND ' + 
    'dt.DOCID(+) = ds.DOCID AND dt.DOCTYPE(+) = ds.DOCTYPE AND dt.SPECITEM(+) = ds.SPECITEM AND ' + 
    'dby.DocId(+) = ds.DOCID AND dby.DOCTYPE(+) = ds.DOCTYPE AND dby.SPECITEM(+) = ds.SPECITEM AND ' + 
    'dmis.DocId(+) = ds.DOCID AND dmis.DOCTYPE(+) = ds.DOCTYPE AND dmis.SPECITEM(+) = ds.SPECITEM AND ' + 
    filterSql() + ' ORDER BY ds.DOCTYPE, ds.DOCID, ds.SPECITEM';
    //импорт спецификаций
    EXTERNAL SQL connectionString() EXEC sqlString() TO file;

    IF enableLogImport() THEN logToFile('supermag', CONCAT '\n', 'Импорт накладные перемещение', sqlString());
    
    IMPORT TABLE FROM file() TO docNumber, docType, locationFrom, specItem, idItem, quantity, itemPrice, itemPriceNoTax, totalPrice, totalPriceNoTax, causeType, causeId, causeSpecItem, taxRate, taxSum, priceManufacturer, blankquantity;

    idDoc(INTEGER i) <- STRING[50](CONCAT '', docType(i), docNumber(i)) WHERE docNumber(i) AND docType(i);
    idDet(INTEGER i) <- STRING[50](CONCAT '~', idDoc(i), specItem(i)) WHERE idDoc(i) AND specItem(i);

    FOR Sale.userInvoice(idDoc(INTEGER i)) AND NOT Sale.userInvoiceDetail(idDet(i)) DO NEW det = Sale.UserInvoiceDetail {
        Sale.userInvoice(det) <- Sale.userInvoice(idDoc(i));
        id(det) <- idDet(i);
    }

    FOR Sale.UserInvoiceDetail det = Sale.userInvoiceDetail(idDet(INTEGER i)) DO {
        sku(det) <- item(idItem(i));
        quantity(det) <- CASE WHEN blankquantity(i)>0 THEN blankquantity(i) ELSE quantity(i);
        shipmentQuantity(det) <- quantity(i) IF createShipment(det);
        purchaseShipmentQuantity(det) <- quantity(i) IF createPurchaseShipment(det);
        invoicePrice(det) <- NUMERIC[16,4](itemPrice(i));
        price(det) <- NUMERIC[16,4](itemPriceNoTax(i));
        valueVAT(det) <- 0;//valueVAT(sku(det));
        VAT(det) <- valueCurrentVAT(countrySupplierStock(det), valueVAT(det));
        dataIndex(det) <- specItem(i);
        causeType(det) <- causeType(i);
        causeId(det) <- causeId(i);
        causeSpecItem(det) <- causeSpecItem(i);

        overImportInternalWayDet(det,i);
        connectOrder(det);
        
        manufacturingPrice[Sale.UserInvoiceDetail](det) <- priceManufacturer(i);
        imported(det) <- TRUE;        
    }

    DELETE Sale.UserInvoiceDetail det WHERE det IS UserInvoiceDetail AND imported(userInvoice(det)) AND NOT imported(det);

    executeLocalEvents('Sale.UserInvoice');

    APPLY;               
}

importSaleInvoices () + {
    LOCAL indexDoc = STRING ();
    
    FOR [GROUP SUM 1 BY indexDoc(INTEGER i) IF operation1Supermag(codeOperation(i)) IS Sale.Operation AND getWord(indexDoc(i),'~',1) = 'IW' AND importOnlyStatus(operation1Supermag(codeOperation(i))) AND userInvoice(idDoc(i))](STRING indexDoc) NOINLINE DO  {           
        indexDoc() <- indexDoc;     
        NEWSESSION NESTED (indexDoc){            
            importInternalWayStatus(indexDoc());
        } 
    }
    
    FOR [GROUP SUM 1 BY indexDoc(INTEGER i) IF operation1Supermag(codeOperation(i)) IS Sale.Operation AND getWord(indexDoc(i),'~',1) = 'IW' AND NOT (importOnlyStatus(operation1Supermag(codeOperation(i))) AND userInvoice(idDoc(i)))](STRING indexDoc) NOINLINE DO {       
        indexDoc() <- indexDoc; 
        NEWSESSION NESTED (indexDoc){
            importInternalWayFull(indexDoc());
        } 
    }
}