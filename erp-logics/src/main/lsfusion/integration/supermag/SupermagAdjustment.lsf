MODULE SupermagAdjustment;

REQUIRE  SupermagSettings, Utils, TaxItem, StockAdjustment, SupermagExportForms;

NAMESPACE Stock;

@settingOperationSupermag(Stock);

exportAdjustment 'Экспорт в Супермаг' ABSTRACT LIST (Adjustment);

EXTEND FORM adjustments
    PROPERTIES (i) exportAdjustment TOOLBAR 
;
DESIGN adjustments {
    actionContainer{
        NEW mag {
            caption = 'Супермаг';
            MOVE PROPERTY (exportAdjustment(i));
        }        
    }
}

userAdjustmentApply 'Сохранить ' (Adjustment doc) {
    apply();
    IF NOT canceled() THEN {
        IF series(doc) THEN { number(doc) <- seriesNumber(doc); series(doc) <- NULL;} 
        id(doc) <- CONCAT '', STRING[10](getWord(docTypeSupermag(operation(doc)),';',1)), seriesNumber(doc);
        APPLY; 
        exportAdjustment(doc);
    }
}

EXTEND FORM userAdjustment  PROPERTIES userAdjustmentApply(i) TOOLBAR;

DESIGN userAdjustment {
    TOOLBARRIGHT {
        MOVE PROPERTY (userAdjustmentApply(i)) BEFORE PROPERTY (formClose()) { imagePath = 'apply.png';} 
        PROPERTY (formOk()) { hide = TRUE; }
        PROPERTY (formApply()) { hide = TRUE; }
    }
}

@settingIntegration(Adjustment, AdjustmentDetail);
                     
exportAdjustmentMag 'Экспорт в супермаг' (Adjustment doc) {
   LOCAL NESTED dt = DATETIME();
    inc(DocMain d) <- NULL;
    IF docTypeSupermag(operation(doc)) AND opcodeSupermag(operation(doc)) THEN {
        FOR iterateDown(INTEGER n, wordCount(docTypeSupermag(operation(doc)),';'), 1) DO {
            DELETE DocDetail expDet WHERE expDet IS DocDetail;        
            DELETE DocMain expmain WHERE expmain IS DocMain;
            NEW expMain = DocMain {
                inc(expMain) <- TRUE;          
                doctype(expMain) <- STRING[10] (getWord(docTypeSupermag(operation(doc)),';',n));
                id(doc) <- CONCAT '', doctype(expMain), seriesNumber(doc);               
                id(expMain) <- id(doc); 
                docid(expMain) <- seriesNumber(doc);            
                bornin(expMain) <- OVERRIDE bornin(doc), baseIDSupermag();
                opcode(expMain) <- STRING[10] (getWord(opcodeSupermag(operation(doc)),';',n));
                userop(expMain) <- STRING[10] (getWord(useropSupermag(operation(doc)),';',n));
                creatdate(expMain) <- dateTime(doc);                
                docstate(expMain) <- CASE WHEN isPosted(doc) AND (doctype(expMain) = 'FA' OR doctype(expMain) = 'LA') THEN 2
                                          WHEN isPosted(doc) AND (doctype(expMain) = 'WI' OR doctype(expMain) = 'WO') THEN 3 
                                          WHEN isClosed(doc) THEN 0 ELSE 1;
                priceRoundMode(expMain) <- CASE WHEN (doctype(expMain) = 'FA' OR doctype(expMain) = 'LA') THEN 0 ELSE 4; 
                clientIndex(expMain) <- id(contragentSupermag(stockGroup(stock(doc))));
                locationFrom(expMain) <- id(stock(doc));
                locationTo(expMain) <- id(stock(doc));
                location(expMain)  <- id(stock(doc));     
                ourselfclient(expMain) <- id(legalEntity(stock(doc)));                                              
        
                FOR adjustment(AdjustmentDetail docd) = doc AND 
                    ( (quantity(docd) > 0 AND (doctype(expMain) = 'FA' OR doctype(expMain) = 'WI')) OR 
                      (quantity(docd) < 0 AND (doctype(expMain) = 'LA' OR doctype(expMain) = 'WO')) )
                    DO NEW expDet = DocDetail {
                        dataIndex(docd) <- index(docd); 
                        id(docd) <- (CONCAT '~',id(doc),index(docd));
                        index(expDet) <- index(docd);
                        docMain(expDet) <- expMain;
                        id(expDet) <- (CONCAT '~',id(expMain),index(expDet));
                        skuId(expDet) <- id(sku(docd));                                                                           
                        quantity(expDet) <- OVERRIDE abs(quantity(docd)), 0;
                        blankquantity(expDet) <- quantity(expDet);
                        priceWithTax(expDet) <- price(docd);
                        valueTax(expDet) <-  valueVAT(sku(docd));
                        priceNoTax(expDet) <- NUMERIC[18,4] ( abs(round( priceWithTax(expDet) / (1 + valueTax(expDet)/100),4)));
                        priceCurr(expDet) <- round(priceWithTax(expDet)/curRate(expMain),4);
                        sumWithTax(expDet) <- OVERRIDE abs(sum(docd)), 0;
                        sumNoTax(expDet) <- OVERRIDE NUMERIC[18,4] ( abs(round( sumWithTax(expDet) / (1 + valueTax(expDet)/100),2))), 0;
                        sumTax(expDet) <- OVERRIDE (sumWithTax(expDet) - sumNoTax(expDet)), 0;
                        sumCurr(expDet) <- round(sumWithTax(expDet)/curRate(expMain),4);
                     //     priceManufacturer(expDet) <- IF manufacturingPrice(docd) >= 0.0001 THEN manufacturingPrice(docd) ELSE priceNoTax(expDet);
                     //   priceRetail(expDet) <- (OVERRIDE retailPrice(docd), 0);                                        
                }           
                sumWithTax(expMain) <- GROUP SUM abs(sumWithTax(DocDetail expDet)) IF docMain(expDet) = expMain;                
                sumCurr(expMain) <- GROUP SUM sumCurr(DocDetail expDet) IF docMain(expDet) = expMain; 
                countSpec(expMain) <- GROUP SUM 1 IF docMain(DocDetail expDet) = expMain;
                
                dt () <- currentDateTime();                        
                TRY {                
                    CASE WHEN doctype(expMain) = 'WI' THEN EXPORT exportWI XML TO System.exportFile;                 
                         WHEN doctype(expMain) = 'FA' THEN EXPORT exportFA XML TO System.exportFile;
                         WHEN doctype(expMain) = 'WO' THEN EXPORT exportWO XML TO System.exportFile;                 
                         WHEN doctype(expMain) = 'LA' THEN EXPORT exportLA XML TO System.exportFile;
                } CATCH logToFile('supermag', CONCAT '\n', 'Изменение остатков ' + id(expMain), 'Ошибка формы' ,'file://' + exportDirectorySupermag() + '/' + doctype(expMain) + '_' + STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
                
                TRY { 
                IF countSpec(expMain) > 0 THEN {          
                    WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
                    WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/COPY/' + doctype(expMain) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
                }                
                } CATCH logToFile('supermag', CONCAT '\n', 'Изменение остатков ' + id(expMain), 'Ошибка записи в файл' ,'file://' + exportDirectorySupermag() + '/' + doctype(expMain) + '_' + STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());                
            }      
        }                 
    }       
    inc(DocMain ii) <- NULL;
    APPLY;
}

exportAdjustment (Adjustment doc) + {
    IF inExport(stock(doc)) AND isPosted(doc) THEN exportAdjustmentMag(doc);
}

importAdjustment 'Изменение остатков' () {
    filterSql() <- 'd.CreateDat >= TO_DATE(\'' + toDateISO(dateFromImportDocument()) + '\',\'YYYY-MM-DD\') AND ( d.location IN ('+ stocksImport() + ')  OR d.locationfrom IN ('+ stocksImport() + ') OR locationto IN ('+ stocksImport() + ')   ) AND ( ' ;
    LOCAL filterDoc = STRING ();
    LOCAL operDoc = STRING ();
    filterDoc() <-'';
    FOR Operation op IF op IS Operation AND getWord(docTypeSupermag(op),';',1) DO {
       operDoc() <- CONCAT ' AND ', ('d.DOCTYPE = \'' + getWord(docTypeSupermag(op),';',1) + '\''), ('d.OPCODE = ' + getWord(opcodeSupermag(op),';',1)), ('d.USEROP = ' + getWord(useropSupermag(op),';',1)) ; 
       filterDoc() <- CONCAT ' OR ',filterDoc(), '(' + operDoc() + ')';
    }
      
//  чтобы не путаться осталяем только 1 документ
//    FOR Operation op IF op IS Operation AND getWord(docTypeSupermag(op),';',2) DO {
//       operDoc() <- CONCAT ' AND ', ('d.DOCTYPE = \'' + getWord(docTypeSupermag(op),';',2) + '\''), ('d.OPCODE = ' + getWord(opcodeSupermag(op),';',2)), ('d.USEROP = ' + getWord(useropSupermag(op),';',2)) ; 
//       filterDoc() <- CONCAT ' OR ',filterDoc(), '(' + operDoc() + ')';
//    }  
    
    filterDoc() <- substrFrom(filterDoc(),4);
    filterSql() <- CONCAT '', filterSql(), filterDoc(),')'; 
       
    EXTERNAL SQL 'jdbc:oracle:thin:' + SupermagSettings.login() + '/' + SupermagSettings.password() + '@//'+ SupermagSettings.host() + '/' + SupermagSettings.base()  
    EXEC 'Select d.ID, d.doctype, d.opcode, d.userop, UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(d.bornin)), d.createdat, d.docstate from Supermag.SMDocuments d where ' + filterSql() TO file;   

    MESSAGE 'Select d.ID, d.doctype, d.opcode, d.userop, d.createdat, d.docstate from Supermag.SMDocuments d where ' + filterSql();     
    IMPORT TABLE FROM file() TO docNumber, docType, operCode, userOp, bornIn, docDate, docState;
    
    idDoc(INTEGER i) <- STRING[50](CONCAT '', STRING(docType(i)), STRING(docNumber(i)));
    currentVersion (INTEGER i) <-  (CONCAT '~', STRING(idDoc(i)), STRING(operCode(i)), STRING(userOp(i)), STRING(bornIn(i)), STRING(docDate(i)), STRING(docState(i)) ) IF idDoc(i);                 
    codeOperation (INTEGER i) <- CONCAT '~', STRING(docType(i)), STRING(operCode(i)), STRING(userOp(i)) IF idDoc(i);

    FOR UserAdjustment doc == userAdjustment(idDoc(INTEGER i)) AND NOT lastVersion[Adjustment](doc) = currentVersion(i) DO {
        isPosted(doc) <- TRUE IF docState(i) = 3 OR docState(i) = 2;
        isClosed(doc) <- TRUE IF docState(i) = 0;      
        lastVersion[Adjustment](doc) <- currentVersion(i);        
    }
    
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importAdjustment();

importAdjustmentStatus 'Изменение остатков' (STRING indexDoc, STRING idDoc) {
    filterSql() <- 'd.DocType = \'' + getWord(indexDoc,'~',1) + '\' AND d.id = \'' + getWord(indexDoc,'~',2) + '\''; 
    
    sqlString() <- 'Select d.ID, d.doctype, d.opcode, d.userop, UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(d.bornin)), d.docstate from Supermag.SMDocuments d WHERE ' + filterSql();    
    
    IF enableLogImport() THEN logToFile('supermag', CONCAT '\n', 'Импорт изменение остатков', sqlString());
    
    EXTERNAL SQL connectionString() EXEC sqlString() TO file;
 //   MESSAGE sqlString();
       
    IMPORT TABLE FROM file() TO docNumber, docType, operCode, userOp, bornIn, docState;
        
    FOR UserAdjustment doc == userAdjustment(idDoc) DO {  
        CASE WHEN docState(0) = 0 THEN {
            isPosted(doc) <- NULL;
            isClosed(doc) <- TRUE;                
        }
        WHEN docState(0) = 1 THEN {
            isPosted(doc) <- NULL;
            isClosed(doc) <- NULL;                        
        } 
        WHEN docState(0) = 2 THEN {
            isPosted(doc) <- TRUE IF (docType(0) = 'FA' OR docType(0) = 'LA');
            isClosed(doc) <- NULL;;                
        } 
        WHEN docState(0) = 3 THEN {
            isPosted(doc) <- TRUE;
//            isClosed(doc) <- TRUE;        
        } 
    }
    
    APPLY;
}

importAdjustments () + {
    LOCAL indexDoc = STRING ();
    LOCAL idDoc = STRING ();
    
    FOR [GROUP SUM 1 BY indexDoc(INTEGER i) IF operation1Supermag(codeOperation(i)) IS Stock.Operation  AND bornIn(i) = baseIDSupermag()](STRING indexDoc) NOINLINE DO  {
        idDoc() <- CONCAT '', getWord(docTypeSupermag(operation1Supermag(codeOperation(indexDoc))),';',1), getWord(indexDoc,'~',2);         
        indexDoc() <- indexDoc;     
        IF userAdjustment(idDoc()) THEN
        NEWSESSION NESTED (indexDoc, idDoc){            
            importAdjustmentStatus(indexDoc(), idDoc());
        } 
    }
    
    FOR [GROUP SUM 1 BY indexDoc(INTEGER i) IF operation2Supermag(codeOperation(i)) IS Stock.Operation AND bornIn(i) = baseIDSupermag()](STRING indexDoc) NOINLINE DO  {
        idDoc() <- CONCAT '', getWord(docTypeSupermag(operation2Supermag(codeOperation(indexDoc))),';',1), getWord(indexDoc,'~',2);         
        indexDoc() <- indexDoc;     
        IF userAdjustment(idDoc()) THEN
        NEWSESSION NESTED (indexDoc, idDoc){            
            importAdjustmentStatus(indexDoc(), idDoc());
        } 
    }
}
