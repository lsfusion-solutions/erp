MODULE SupermagDisparity;

REQUIRE SupermagSettings, SupermagExportForms, Utils, TaxItem, Disparity, DisparityOperation, RepricingDisparity;

NAMESPACE Disparity;

@settingOperationSupermag(Disparity);

exportDisparity 'Экспорт в Супермаг' ABSTRACT LIST (Disparity);

EXTEND FORM disparities
    PROPERTIES (dis) exportDisparity TOOLBAR 
;
DESIGN disparities {
    actionContainer{
        NEW mag {
            caption = 'Супермаг';
            MOVE PROPERTY (exportDisparity(dis));
        }        
    }
}

disparityApply 'Сохранить ' (Disparity doc) {
    apply();
    IF NOT canceled() THEN {
        IF series(doc) THEN { number(doc) <- seriesNumber(doc); series(doc) <- NULL;} 
        id(doc) <- CONCAT '', STRING[10](getWord(docTypeSupermag(operation(doc)),';',1)), seriesNumber(doc);
        APPLY; 
        exportDisparity(doc);
    }
}

EXTEND FORM disparity  PROPERTIES disparityApply(dis) TOOLBAR;

DESIGN disparity {
    TOOLBARRIGHT {
        MOVE PROPERTY (disparityApply(dis)) BEFORE PROPERTY (formClose()) { imagePath = 'apply.png';} 
        PROPERTY (formOk()) { hide = TRUE; }
        PROPERTY (formApply()) { hide = TRUE; }
    }
}

@settingIntegration(Disparity, DisparityDetail);

exportDisparityMag 'Экспорт в супермаг' (Disparity doc) {
    LOCAL NESTED dt = DATETIME();
    IF docTypeSupermag(operation(doc)) AND opcodeSupermag(operation(doc)) THEN {        
        FOR iterateDown(INTEGER n, wordCount(docTypeSupermag(operation(doc)),';'), 1) DO {
            inc(DocMain expmain) <- NULL;
            DELETE DocDetail expDet WHERE expDet IS DocDetail;        
            DELETE DocMain expmain WHERE expmain IS DocMain;
            NEW expMain = DocMain {
                inc(expMain) <- TRUE;          
                doctype(expMain) <- STRING[10] (getWord(docTypeSupermag(operation(doc)),';',n));
                id(doc) <- CONCAT '', doctype(expMain), seriesNumber(doc);               
                id(expMain) <- id(doc); 
                docid(expMain) <- seriesNumber(doc);            
                bornin(expMain) <- OVERRIDE bornin(doc), baseIDSupermag();
                opcode(expMain) <- STRING[10] (getWord(opcodeSupermag(operation(doc)),';',n));
                userop(expMain) <- STRING[10] (getWord(useropSupermag(operation(doc)),';',n));
                creatdate(expMain) <- dateTime(doc);                
                docstate(expMain) <- CASE WHEN isPosted(doc) AND (doctype(expMain) = 'FA' OR doctype(expMain) = 'LA') THEN 2
                                          WHEN isPosted(doc) AND (doctype(expMain) = 'WI' OR doctype(expMain) = 'WO') THEN 3 
                                          WHEN isClosed(doc) THEN 0 ELSE 1;
                priceRoundMode(expMain) <- CASE WHEN (doctype(expMain) = 'FA' OR doctype(expMain) = 'LA') THEN 0 ELSE 4; 
                clientIndex(expMain) <- id(contragentSupermag(stockGroup(stock(doc))));
                locationFrom(expMain) <- id(stock(doc));
                locationTo(expMain) <- id(stock(doc));
                location(expMain)  <- id(stock(doc));     
                ourselfclient(expMain) <- id(legalEntity(stock(doc)));                                              

                FOR disparity(DisparityDetail docd) = doc AND doctype(expMain) = 'WO' DO NEW expDet = DocDetail {
                        dataIndex(docd) <- index(docd); 
                        id(docd) <- (CONCAT '~',id(doc),index(docd));
                        index(expDet) <- index(docd);
                        docMain(expDet) <- expMain;
                        id(expDet) <- (CONCAT '~',id(expMain),index(expDet));
                        skuId(expDet) <- id(sku(docd));                                                                           
                        quantity(expDet) <- OVERRIDE abs(quantity(docd)), 0;
                        blankquantity(expDet) <- quantity(expDet);
                        priceNoTax(expDet) <- curInputPrice(docd);
                        priceManufacturer(expDet) <- priceNoTax(expDet);
                        valueTax(expDet) <-  valueVAT(sku(docd));
                        priceWithTax(expDet) <- NUMERIC[18,4] ( abs(round( priceNoTax(expDet) * (1 + valueTax(expDet)/100),4)));
                        priceCurr(expDet) <- round(priceWithTax(expDet)/curRate(expMain),4);
                        priceRetail(expDet) <- price(docd);
                        sumNoTax(expDet) <- OVERRIDE abs(curInputSum(docd)), 0;
                        sumWithTax(expDet) <- OVERRIDE NUMERIC[18,4] ( abs(round( sumNoTax(expDet) * (1 + valueTax(expDet)/100),2))), 0;
                        sumTax(expDet) <- OVERRIDE (sumWithTax(expDet) - sumNoTax(expDet)), 0;
                        sumCurr(expDet) <- round(sumWithTax(expDet)/curRate(expMain),4);
                     //     priceManufacturer(expDet) <- IF manufacturingPrice(docd) >= 0.0001 THEN manufacturingPrice(docd) ELSE priceNoTax(expDet);
                     //   priceRetail(expDet) <- (OVERRIDE retailPrice(docd), 0);                                        
                }           
                

                FOR disparity(DisparityDetail docd) = doc AND doctype(expMain) = 'WI' DO NEW expDet = DocDetail {
                        dataIndex(docd) <- index(docd); 
                        id(docd) <- (CONCAT '~',id(doc),index(docd));
                        index(expDet) <- index(docd);
                        docMain(expDet) <- expMain;
                        id(expDet) <- (CONCAT '~',id(expMain),index(expDet));
                        skuId(expDet) <- id(inputSku(docd));                                                                           
                        quantity(expDet) <- OVERRIDE abs(inputQuantity(docd)), 0;
                        blankquantity(expDet) <- quantity(expDet);
                        priceNoTax(expDet) <- afterInputPrice(docd);
                        priceManufacturer(expDet) <- priceNoTax(expDet);
                        valueTax(expDet) <-  valueVAT(inputSku(docd));
                        priceWithTax(expDet) <- NUMERIC[18,4] ( abs(round( priceNoTax(expDet) * (1 + valueTax(expDet)/100),4)));
                        priceCurr(expDet) <- round(priceWithTax(expDet)/curRate(expMain),4);
                        priceRetail(expDet) <- afterInputRetailPrice(docd);
                        sumNoTax(expDet) <- OVERRIDE abs(afterInputSum(docd)), 0;
                        sumWithTax(expDet) <- OVERRIDE NUMERIC[18,4] ( abs(round( sumNoTax(expDet) * (1 + valueTax(expDet)/100),2))), 0;
                        sumTax(expDet) <- OVERRIDE (sumWithTax(expDet) - sumNoTax(expDet)), 0;
                        sumCurr(expDet) <- round(sumWithTax(expDet)/curRate(expMain),4);
                     //     priceManufacturer(expDet) <- IF manufacturingPrice(docd) >= 0.0001 THEN manufacturingPrice(docd) ELSE priceNoTax(expDet);
                     //   priceRetail(expDet) <- (OVERRIDE retailPrice(docd), 0);                                        
                }           
                
                sumWithTax(expMain) <- GROUP SUM abs(sumWithTax(DocDetail expDet)) IF docMain(expDet) = expMain;                
                sumCurr(expMain) <- GROUP SUM sumCurr(DocDetail expDet) IF docMain(expDet) = expMain; 
                countSpec(expMain) <- GROUP SUM 1 IF docMain(DocDetail expDet) = expMain;
               
                dt () <- currentDateTime();                                                  
                TRY {                
                    CASE WHEN doctype(expMain) = 'WI' THEN EXPORT exportWI XML TO System.exportFile;                 
                         WHEN doctype(expMain) = 'WO' THEN EXPORT exportWO XML TO System.exportFile;
                } CATCH logToFile('supermag', CONCAT '\n', 'Изменение сортности ' + id(doc), 'Ошибка формы',  'file://' + exportDirectorySupermag() + '/' + doctype(expMain) + '_' + STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
           
                TRY {          
                    IF countSpec(expMain) >0 THEN {
                        WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
                        WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/COPY/' + doctype(expMain) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
                    }
                } CATCH logToFile('supermag', CONCAT '\n', 'Изменение сортности ' + id(doc), 'Ошибка записи в файл',  'file://' + exportDirectorySupermag() + '/' + doctype(expMain) + '_' + STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            }
        } 
    }       
    inc(DocMain expmain) <- NULL;
    APPLY;
}

exportDisparityAC 'Экспорт в супермаг' (Disparity doc) {
    inc(DocMain d) <- NULL;
    IF createRepricing(doc) THEN {   
        LOCAL NESTED dt = DATETIME();
        NEW expMain = DocMain {
                inc(expMain) <- TRUE;
                doctype(expMain) <- 'AC';
                docid(expMain) <- seriesNumber(doc);                 
                id(expMain) <- CONCAT '', doctype(expMain), seriesNumber(doc);                 
                opcode(expMain) <- '-1';
                docstate(expMain) <- CASE WHEN isPosted(doc) THEN 3 
                                      WHEN isClosed(doc) THEN 0 ELSE 2;
                creatdate(expMain) <- dateTime(doc);
                execDate(expMain) <- postedTime(doc);
                execTime(expMain) <- postedTime(doc);                
                priceType(expMain) <- idSupermagPriceType(stock(doc)); //STRING[10](replace( (OVERRIDE id(retailPriceListType(customerStock(doc))),  id(baseBPriceListLedger(retailPriceListType(customerStock(doc))))),'D',''));
                bornin(expMain) <- OVERRIDE bornin(doc), baseIDSupermag();
                location(expMain)  <- id(stock(doc));
                reasonPricing(expMain) <- '0';      
                priceRoundMode(expMain) <- 0;
                ourselfclient(expMain) <- id(legalEntity(stock(doc))); 
                FOR disparity(DisparityDetail docd) = doc DO {
                    NEW expDet = DocDetail {
                        index(expDet) <- index(docd);
                        docMain(expDet) <- expMain;
                        id(expDet) <- (CONCAT '~',id(expMain),index(expDet));
                        skuId(expDet) <- id(inputSku(docd));                                                                           
                        quantity(expDet) <- inputQuantity(docd);
                        valueTax(expDet) <- valueAfterInputVAT(docd);
                        priceWithTax(expDet) <- afterInputRetailPrice(docd);
                        priceNoTax(expDet) <- NUMERIC[18,4] ( abs(round( priceWithTax(expDet) / (1 + valueTax(expDet)/100),4)));
                        priceCurr(expDet) <- round(priceWithTax(expDet)/curRate(expMain),4);
                        sumWithTax(expDet) <- afterInputRetailSum(docd);
                        sumNoTax(expDet) <- NUMERIC[18,4] ( abs(round( sumWithTax(expDet) / (1 + valueTax(expDet)/100),2)));
                        sumCurr(expDet) <-round(sumWithTax(expDet)/curRate(expMain),4);
                        sumTax(expDet) <- afterInputVATSum(docd);
                        oldPrice(expDet) <- curInputRetailPrice(docd);
                        flags(expDet) <- '0';
                        revalSum(expDet) <- 0.00;
                        revalOperQuantity(expDet) <- 0.00;
//                        overExportPurchaseInvoiceDetailAC(docd, expDet);
                    }
                }    

//                overExportPurchaseInvoiceAC(doc,expMain);
                
                sumWithTax(expMain) <- GROUP SUM abs(sumWithTax(DocDetail expDet)) IF docMain(expDet) = expMain;                
                sumCurr(expMain) <- GROUP SUM sumCurr(DocDetail expDet) IF docMain(expDet) = expMain; 
                countSpec(expMain) <- GROUP SUM 1 IF docMain(DocDetail expDet) = expMain;                
                
                NEW b = DocBase {
                    basisDoc(expMain, b) <- TRUE;
                    docid(b) <- seriesNumber(doc);
                    doctype(b) <- 'WI';
                }
                               
                IF countSpec(expMain) > 0 THEN {
                    dt () <- currentDateTime();        
                    TRY EXPORT exportAC XML TO System.exportFile;
                    CATCH logToFile('supermag', CONCAT '\n', 'Расценка на приходе', 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) +  '_' +STRING[30](LONG(doc))+'_'+(OVERRIDE seriesNumber(doc), '')+'_'+ formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
                    TRY {
                            WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
                            WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/COPY/' + doctype(expMain) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
                        }
                    CATCH logToFile('supermag', CONCAT '\n', 'Расценка на приходе', 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) +'_' + STRING[30](LONG(doc)) + '_' + (OVERRIDE seriesNumber(doc), '') + '_' + formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
                }    
                inc(expMain) <- NULL;
        }                                    
    }       
    APPLY;    
}


exportDisparity (Disparity doc) + {
    IF inExport(stock(doc)) AND isPosted(doc) THEN {    
        exportDisparityMag(doc);
        exportDisparityAC(doc);
    }
}

importDisparity 'Изменение сортности' () {
    filterSql() <- 'd.CreateDat >= TO_DATE(\'' + toDateISO(dateFromImportDocument()) + '\',\'YYYY-MM-DD\') AND ( d.location IN ('+ stocksImport() + ')  OR d.locationfrom IN ('+ stocksImport() + ') OR locationto IN ('+ stocksImport() + ')   ) AND ( ' ;
    LOCAL filterDoc = STRING ();
    LOCAL operDoc = STRING ();
    filterDoc() <-'';
    FOR Operation op IF op IS Operation AND getWord(docTypeSupermag(op),';',1) DO {
       operDoc() <- CONCAT ' AND ', ('d.DOCTYPE = \'' + getWord(docTypeSupermag(op),';',1) + '\''), ('d.OPCODE = ' + getWord(opcodeSupermag(op),';',1)), ('d.USEROP = ' + getWord(useropSupermag(op),';',1)) ; 
       filterDoc() <- CONCAT ' OR ',filterDoc(), '(' + operDoc() + ')';
    }
      
//  чтобы не путаться осталяем только 1 документ
//    FOR Operation op IF op IS Operation AND getWord(docTypeSupermag(op),';',2) DO {
//       operDoc() <- CONCAT ' AND ', ('d.DOCTYPE = \'' + getWord(docTypeSupermag(op),';',2) + '\''), ('d.OPCODE = ' + getWord(opcodeSupermag(op),';',2)), ('d.USEROP = ' + getWord(useropSupermag(op),';',2)) ; 
//       filterDoc() <- CONCAT ' OR ',filterDoc(), '(' + operDoc() + ')';
//    }  
    
    filterDoc() <- substrFrom(filterDoc(),4);
    filterSql() <- CONCAT '', filterSql(), filterDoc(),')'; 
       
    EXTERNAL SQL 'jdbc:oracle:thin:' + SupermagSettings.login() + '/' + SupermagSettings.password() + '@//'+ SupermagSettings.host() + '/' + SupermagSettings.base()  
    EXEC 'Select d.ID, d.doctype, d.opcode, d.userop, UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(d.bornin)), d.createdat, d.docstate from Supermag.SMDocuments d where ' + filterSql() TO file;   

//    MESSAGE 'Select d.ID, d.doctype, d.opcode, d.userop, UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(d.bornin)), d.createdat, d.docstate from Supermag.SMDocuments d where ' + filterSql();     
    IMPORT TABLE FROM file() TO docNumber, docType, operCode, userOp, bornIn, docDate, docState;
    
    idDoc(INTEGER i) <- STRING[50](CONCAT '', STRING(docType(i)), STRING(docNumber(i)));
    currentVersion (INTEGER i) <-  (CONCAT '~', STRING(idDoc(i)), STRING(operCode(i)), STRING(userOp(i)), STRING(bornIn(i)), STRING(docDate(i)), STRING(docState(i)) ) IF idDoc(i);                 
    codeOperation (INTEGER i) <- CONCAT '~', STRING(docType(i)), STRING(operCode(i)), STRING(userOp(i)) IF idDoc(i);

    FOR Disparity doc == userDisparity(idDoc(INTEGER i)) AND NOT lastVersion[Disparity](doc) = currentVersion(i) DO {
        isPosted(doc) <- TRUE IF docState(i) = 3;
        isClosed(doc) <- TRUE IF docState(i) = 0;      
        lastVersion[Disparity](doc) <- currentVersion(i);        
    }
    
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importDisparity();

importDisparityStatus 'Изменение сортности' (STRING indexDoc, STRING idDoc) {
    filterSql() <- 'd.DocType = \'' + getWord(indexDoc,'~',1) + '\' AND d.id = \'' + getWord(indexDoc,'~',2) + '\''; 
    
    sqlString() <- 'Select d.ID, d.doctype, d.opcode, d.userop, UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(d.bornin)), d.docstate from Supermag.SMDocuments d WHERE ' + filterSql();    
    
    IF enableLogImport() THEN logToFile('supermag', CONCAT '\n', 'Импорт изменение остатков', sqlString());
    
    EXTERNAL SQL connectionString() EXEC sqlString() TO file;
 //   MESSAGE sqlString();
       
    IMPORT TABLE FROM file() TO docNumber, docType, operCode, userOp, bornIn, docState;
        
    FOR Disparity doc == userDisparity(idDoc) DO {  
        CASE WHEN docState(0) = 0 THEN {
            isPosted(doc) <- NULL;
            isClosed(doc) <- TRUE;                
        }
        WHEN docState(0) = 1 THEN {
            isPosted(doc) <- NULL;
            isClosed(doc) <- NULL;                        
        } 
        WHEN docState(0) = 2 THEN {
            isPosted(doc) <- NULL;
            isClosed(doc) <- NULL;;                
        } 
        WHEN docState(0) = 3 THEN {
            isPosted(doc) <- TRUE;
//            isClosed(doc) <- TRUE;        
        } 
   }
    
    APPLY;
}

importDisparities () + {
    LOCAL indexDoc = STRING ();
    LOCAL idDoc = STRING ();
    
    FOR [GROUP SUM 1 BY indexDoc(INTEGER i) IF operation1Supermag(codeOperation(i)) IS Disparity.Operation  AND bornIn(i) = baseIDSupermag()](STRING indexDoc) NOINLINE DO  {
        idDoc() <- CONCAT '', getWord(docTypeSupermag(operation1Supermag(codeOperation(indexDoc))),';',1), getWord(indexDoc,'~',2);         
        indexDoc() <- indexDoc;     
        IF userDisparity(idDoc()) THEN
        NEWSESSION NESTED (indexDoc, idDoc){            
            importDisparityStatus(indexDoc(), idDoc());
        } 
    }
    
    FOR [GROUP SUM 1 BY indexDoc(INTEGER i) IF operation2Supermag(codeOperation(i)) IS Disparity.Operation AND bornIn(i) = baseIDSupermag()](STRING indexDoc) NOINLINE DO  {
        idDoc() <- CONCAT '', getWord(docTypeSupermag(operation2Supermag(codeOperation(indexDoc))),';',1), getWord(indexDoc,'~',2);         
        indexDoc() <- indexDoc;     
        IF userDisparity(idDoc()) THEN
        NEWSESSION NESTED (indexDoc, idDoc){            
            importDisparityStatus(indexDoc(), idDoc());
        } 
    }
}
