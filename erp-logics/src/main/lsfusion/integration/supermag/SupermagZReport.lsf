MODULE SupermagZReport;

REQUIRE SupermagSettings, SupermagExportForms, ReceiptSkuLedgerStockDocument, ReceiptSkuLedger, Time, GiftCard;

NAMESPACE ZReport;

toDateYYYYMMDD = FORMULA STRING[10] 'to_char(($1),\'YYYYMMDD\')';

closeDate 'Дата закрытия смены' = DATA DATE (ZReport);
INDEX closeDate(ZReport z), departmentStore(z);

EXTEND FORM zReports
    PROPERTIES closeDate(z) READONLY; 

importCloseDate(ZReport z) {
    LOCAL file = FILE ();
    LOCAL num = INTEGER (INTEGER );
    LOCAL closeDate = DATETIME (INTEGER );
    
    EXTERNAL SQL getWord(directory(groupCashRegister(cashRegister(z))), ';', 2) 
        EXEC 'select number, close_date from shift where cash_id = '+STRING[20](npp(cashRegister(z)))+' AND DATE(`date`) = \''+date(z)+'\'' 
        TO file;
    IMPORT TABLE FROM file() TO num, closeDate;
    
    FOR number(z) == STRING (num(INTEGER i)) DO {
        closeDate(z) <- DATE(closeDate(i));
    } 
}

importCloseDates() {
    FOR date(ZReport z) >= sum(currentDate(), -2) AND NOT closeDate(z) DO {
        importCloseDate(z);
    }
}

sumPositivePayment 'Сумма продажа' = GROUP SUM sum(Payment p) IF NOT skip(receipt(p)) AND sum(p) >= 0.0 BY zReport(receipt(p)), sidPaymentType(p);
sumNegativePayment 'Сумма продажа' = GROUP SUM sum(Payment p) IF NOT skip(receipt(p)) AND sum(p) < 0.0 BY zReport(receipt(p)), sidPaymentType(p);

quantityReceiptSaleDetail 'Кол-во' = GROUP SUM quantity(ReceiptSaleDetail d) IF isPosted(d)
    BY departmentStore(d), sku(d), closeDate(zReport(d)), price(d);
sumReceiptSaleDetail 'Сумма'  = GROUP SUM sum(ReceiptSaleDetail d) IF isPosted(d)
    BY departmentStore(d), sku(d), closeDate(zReport(d)), price(d);
discountSumReceiptSaleDetail 'Сумма скидки'  = GROUP SUM discountSum(ReceiptSaleDetail d) IF isPosted(d)
    BY departmentStore(d), sku(d), closeDate(zReport(d)), price(d);
countReceiptSaleDetail= GROUP SUM 1 IF isPosted(ReceiptSaleDetail d)
    BY departmentStore(d), sku(d), closeDate(zReport(d)), price(d);
sumPositiveCashPayment 'Сумма продаж (наличные)' = GROUP SUM sumPositivePayment(ZReport rep,'cash') IF isPosted(rep) 
    BY departmentStore(rep), closeDate(rep);
sumPositiveCardPayment 'Сумма продаж (карты)' = GROUP SUM sumPositivePayment(ZReport rep,'card') IF isPosted(rep) 
    BY departmentStore(rep), closeDate(rep);
sumPositiveHalvaPayment 'Сумма продаж (Халва)' = GROUP SUM sumPositivePayment(ZReport rep,'5') IF isPosted(rep) 
    BY departmentStore(rep), closeDate(rep);
sumGiftCardPayment 'Сумма продаж (сертификаты)' = GROUP SUM sumPositivePayment(ZReport rep,'giftcard') IF isPosted(rep) 
    BY departmentStore(rep), closeDate(rep);
//sumPositiveCashPayment 'Сумма продаж (наличные)' = GROUP SUM sumPositiveCashPayment(ZReport rep) IF isPosted(rep) 
//    BY departmentStore(rep), closeDate(rep);
//sumPositiveCardPayment 'Сумма продаж (карты)' = GROUP SUM sumPositiveCardPayment(ZReport rep) IF isPosted(rep) 
//    BY departmentStore(rep), closeDate(rep);
//sumGiftCardPayment 'Сумма продаж (сертификаты)' = GROUP SUM sumGiftCardPayment(ZReport rep) IF isPosted(rep) 
//    BY departmentStore(rep), closeDate(rep);

quantityReceiptReturnDetail 'Кол-во' (department, sku, date, price) = GROUP SUM quantity(ReceiptReturnDetail d) IF isPosted(d)
    BY departmentStore(d), sku(d), closeDate(zReport(d)), NUMERIC[18,6](price(d));
sumReceiptReturnDetail 'Сумма' (department, sku, date, price) = GROUP SUM sum(ReceiptReturnDetail d) IF isPosted(d)
    BY departmentStore(d), sku(d), closeDate(zReport(d)), NUMERIC[18,6](price(d));
discountSumReceiptReturnDetail 'Сумма скидки' (department, sku, date, price) = GROUP SUM discountSum(ReceiptReturnDetail d) IF isPosted(d)
    BY departmentStore(d), sku(d), closeDate(zReport(d)), NUMERIC[18,6](price(d));
countReceiptReturnDetail  (department, sku, date, price) = GROUP SUM 1 IF isPosted(ReceiptReturnDetail d)
    BY departmentStore(d), sku(d), closeDate(zReport(d)), NUMERIC[18,6](price(d));
sumNegativeCashPayment 'Сумма возвратов (наличные)' = GROUP SUM sumNegativePayment(ZReport rep,'cash') IF isPosted(rep) 
    BY departmentStore(rep), closeDate(rep);
sumNegativeCardPayment 'Сумма возвратов (карты)' = GROUP SUM sumNegativePayment(ZReport rep,'card') IF isPosted(rep) 
    BY departmentStore(rep), closeDate(rep);
sumNegativeHalvaPayment 'Сумма возвратов (Халва)' = GROUP SUM sumNegativePayment(ZReport rep,'5') IF isPosted(rep) 
    BY departmentStore(rep), closeDate(rep);
//sumNegativeCashPayment 'Сумма возвратов (наличные)' = GROUP SUM sumNegativeCashPayment(ZReport rep) IF isPosted(rep) 
//    BY departmentStore(rep), closeDate(rep);
//sumNegativeCardPayment 'Сумма возвратов (карты)' = GROUP SUM sumNegativeCardPayment(ZReport rep) IF isPosted(rep) 
//    BY departmentStore(rep), closeDate(rep);

quantityReceiptSaleDetailGift 'Кол-во' = GROUP SUM quantity(ReceiptGiftCardSaleDetail d) IF isPosted(d) AND d IS ReceiptGiftCardSaleDetail
    BY departmentStore(d), closeDate(zReport(d)), price(d);
sumReceiptSaleDetailGift 'Сумма'  = GROUP SUM sum(ReceiptGiftCardSaleDetail d) IF isPosted(d) AND d IS ReceiptGiftCardSaleDetail
    BY departmentStore(d), closeDate(zReport(d)), price(d);
countReceiptSaleDetailGift = GROUP SUM 1 IF isPosted(ReceiptGiftCardSaleDetail d) AND d IS ReceiptGiftCardSaleDetail
    BY departmentStore(d), closeDate(zReport(d)), price(d);
gift(caption) = GROUP AGGR Sku sku BY caption(sku); 

exportReceiptSaleDetailGift = DATA BOOLEAN ();

exportZReports 'Экспорт в супермаг продажи' (DepartmentStore departmentStore, DATE date) {
    inc(DocMain d) <- NULL;
    LOCAL NESTED dt = DATETIME();
    LOCAL causeId = STRING ();  
    NEW expMain = DocMain {
                inc(expMain) <- TRUE;          
                doctype(expMain) <- 'CS';
                docid(expMain) <- STRING[30](CONCAT '', 'CS', STRING(id(departmentStore)), toDateYYYYMMDD(date), '@', STRING(id(departmentStore)));
                id(expMain) <- STRING[100](CONCAT '', doctype(expMain), docid(expMain)); 
                bornin(expMain) <- baseIDSupermag();
                opcode(expMain) <- '1';
                creatdate(expMain) <- DATETIME (date);                
                docstate(expMain) <- 3 IF expMain IS DocMain; 
                curRate(expMain) <- (OVERRIDE rateOn(typeExchange('НБРБ (BYR)'),currencyShortName('USD'),date),1.0);                      
                priceRoundMode(expMain) <- 3 IF expMain IS DocMain;                                                
                locationFrom(expMain) <- id(departmentStore);
                ourselfclient(expMain) <- id(legalEntity(departmentStore));
                causeId()<-docid(expMain);            
                                
                FOR countReceiptSaleDetail(departmentStore, Sku sku, date, NUMERIC[16,4] price) DO
                    NEW expDet = DocDetail {                        
                        docMain(expDet) <- expMain;
                        skuId(expDet) <- id(sku);                                                                           
                        quantity(expDet) <- OVERRIDE quantityReceiptSaleDetail(departmentStore, sku, date, price), 0; 
                        priceWithTax(expDet) <- price;
                        valueTax(expDet) <- valueRate( VAT (sku, country(departmentStore)),date);
                        sumWithTax(expDet) <- sumReceiptSaleDetail(departmentStore, sku, date, price);
                        sumTax(expDet) <- NUMERIC[18,4]([ X*Y/(100+Y)](sumWithTax(expDet), valueTax(expDet)));
                        sumNoTax(expDet) <- sumWithTax(expDet) - sumTax(expDet);                       
                        priceNoTax(expDet) <- NUMERIC[18,4] (sumNoTax(expDet)/quantity(expDet));
                        priceCurr(expDet) <- round(priceWithTax(expDet)/curRate(expMain),4);                        
                        sumCurr(expDet) <- round(sumWithTax(expDet)/curRate(expMain),4);
                        discSum(expDet) <- discountSumReceiptSaleDetail(departmentStore, sku, date, price);
                        moveType(expDet) <- 1;
                    }                                    

                FOR countReceiptSaleDetailGift(departmentStore, date, NUMERIC[16,4] price) AND exportReceiptSaleDetailGift() DO
                    NEW expDet = DocDetail {                        
                        docMain(expDet) <- expMain;
                        skuId(expDet) <- id(gift(CONCAT ' ','Подарочный сертификат',STRING(NUMERIC[16,0](price))));                                                                           
                        quantity(expDet) <- OVERRIDE quantityReceiptSaleDetailGift(departmentStore, date, price), 0; 
                        priceWithTax(expDet) <- price;
                        valueTax(expDet) <- 0;//valueRate( VAT (sku, country(departmentStore)),date);
                        sumWithTax(expDet) <- sumReceiptSaleDetailGift(departmentStore, date, price);
                        sumTax(expDet) <- NUMERIC[18,4]([ X*Y/(100+Y)](sumWithTax(expDet), valueTax(expDet)));
                        sumNoTax(expDet) <- sumWithTax(expDet) - sumTax(expDet);                       
                        priceNoTax(expDet) <- NUMERIC[18,4] (sumNoTax(expDet)/quantity(expDet));
                        priceCurr(expDet) <- round(priceWithTax(expDet)/curRate(expMain),4);                        
                        sumCurr(expDet) <- round(sumWithTax(expDet)/curRate(expMain),4);
                        discSum(expDet) <- 0;//discountSumReceiptSaleDetail(departmentStore, sku, date, price);
                        moveType(expDet) <- 1;
                    }                                    

                indexPlus (DocDetail expDet) <- PARTITION SUM 1 IF moveType(expDet) = 1 ORDER expDet BY docMain(expDet);
                                            
                sumWithTax(expMain) <- GROUP SUM abs(sumWithTax(DocDetail expDet)) IF docMain(expDet) = expMain AND moveType(expDet) = 1;                
                sumCurr(expMain) <- GROUP SUM sumCurr(DocDetail expDet) IF docMain(expDet) = expMain AND moveType(expDet) = 1; 
                countSpec(expMain) <- GROUP SUM 1 IF docMain(DocDetail expDet) = expMain AND moveType(expDet) = 1;                                                           
                                          
//                sumPositivePayments(expMain, 0) <- sumPositiveCashPayment(departmentStore, date);
                sumPositivePayments(expMain, 1) <- sumPositiveCardPayment(departmentStore, date);
                sumPositivePayments(expMain, 2) <- sumGiftCardPayment(departmentStore, date);
                sumPositivePayments(expMain, 5) <- sumPositiveHalvaPayment(departmentStore, date);
                
                docMain(DocPayment expPayment) <- NULL IF expPayment IS DocPayment;           
                FOR sumPositivePayments(expMain, INTEGER i) DO NEW expPayment = DocPayment {
                        docMain(expPayment) <- expMain;
                        credcardId(expPayment) <- i;
                        sum(expPayment) <- sumPositivePayments(expMain,i);
                }
                               
                IF countSpec(expMain) > 0 THEN {
                    dt () <- currentDateTime();        
                    TRY EXPORT exportZReportSales XML TO System.exportFile;
                    CATCH logToFile('supermag', CONCAT '\n', 'Кассовые документы (продажа)', 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) +'_' +(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
                    TRY {
                            WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) + '_' +(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
                            WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/COPY/' + doctype(expMain) + '_' +(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
                        }
                    CATCH logToFile('supermag', CONCAT '\n', 'Кассовые документы (продажа)', 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) + '_' +(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
                }                             
                inc(expMain) <- NULL;
                
               sleep(pauseBetweenInvoiceFI());
 
                inc(expMain) <- TRUE;          
                doctype(expMain) <- 'CR';
                docid(expMain) <- STRING[30](CONCAT '', 'CR', STRING(id(departmentStore)), toDateYYYYMMDD(date), '@', STRING(id(departmentStore)));            
                id(expMain) <- STRING[100](CONCAT '', doctype(expMain), docid(expMain)); 
                bornin(expMain) <- baseIDSupermag();
                opcode(expMain) <- '3';
                creatdate(expMain) <- DATETIME (date);                
                docstate(expMain) <- 3 IF expMain IS DocMain; 
                curRate(expMain) <- (OVERRIDE rateOn(typeExchange('НБРБ (BYR)'),currencyShortName('USD'),date),1.0);                      
                priceRoundMode(expMain) <- 3 IF expMain IS DocMain;                                                
                locationTo(expMain) <- id(departmentStore);
                ourselfclient(expMain) <- id(legalEntity(departmentStore));
                
                FOR countReceiptReturnDetail(departmentStore, Sku sku, date, NUMERIC[16,4] price) DO
                    NEW expDet = DocDetail {                        
                        docMain(expDet) <- expMain;
                        skuId(expDet) <- id(sku);                                                                           
                        quantity(expDet) <- OVERRIDE quantityReceiptReturnDetail(departmentStore, sku, date, price), 0; 
                        priceWithTax(expDet) <- price;
                        valueTax(expDet) <- valueRate( VAT (sku, country(departmentStore)),date);
                        sumWithTax(expDet) <- sumReceiptReturnDetail(departmentStore, sku, date, price);
                        sumTax(expDet) <- NUMERIC[18,4]([ X*Y/(100+Y)](sumWithTax(expDet), valueTax(expDet)));
                        sumNoTax(expDet) <- sumWithTax(expDet) - sumTax(expDet);                       
                        priceNoTax(expDet) <- NUMERIC[18,4] (sumNoTax(expDet)/quantity(expDet));
                        priceCurr(expDet) <- round(priceWithTax(expDet)/curRate(expMain),4);                        
                        sumCurr(expDet) <- round(sumWithTax(expDet)/curRate(expMain),4);
                        discSum(expDet) <- discountSumReceiptReturnDetail(departmentStore, sku, date, price);
                        causeSpecItem(expDet) <- STRING[10] (GROUP LAST indexPlus(DocDetail rs) IF skuId(rs) = skuId(expDet) AND docMain(rs) = docMain(expDet) ORDER rs);                               
                        causeType(expDet) <- 'CS' IF causeSpecItem(expDet);
                        causeId(expDet) <- causeId() IF causeSpecItem(expDet);  
                        moveType(expDet) <- -1;
                   }                                    

                indexMinus (DocDetail expDet) <- PARTITION SUM 1 IF moveType(expDet) = -1 ORDER expDet BY docMain(expDet);

                sumWithTax(expMain) <- GROUP SUM sumWithTax(DocDetail expDet) IF docMain(expDet) = expMain AND moveType(expDet) = -1;                
                sumCurr(expMain) <- GROUP SUM sumCurr(DocDetail expDet) IF docMain(expDet) = expMain AND moveType(expDet) = -1; 
                countSpec(expMain) <- GROUP SUM 1 IF docMain(DocDetail expDet) = expMain AND moveType(expDet) = -1;                                                           
                               
 //               sumNegativePayments(expMain, 0) <- sumNegativeCashPayment(departmentStore, date);
                sumNegativePayments(expMain, 1) <- -sumNegativeCardPayment(departmentStore, date);  
                sumNegativePayments(expMain, 5) <- -sumNegativeHalvaPayment(departmentStore, date);  
                docMain(DocPayment expPayment) <- NULL IF expPayment IS  DocPayment;           
                FOR sumNegativePayments(expMain, INTEGER i) DO NEW expPayment = DocPayment {
                        docMain(expPayment) <- expMain;
                        credcardId(expPayment) <- i;
                        sum(expPayment) <- sumNegativePayments(expMain,i);
                }
                
                IF countSpec(expMain) > 0 THEN {
                    dt () <- currentDateTime();        
                    TRY EXPORT exportZReportReturns XML TO System.exportFile;
                    CATCH logToFile('supermag', CONCAT '\n', 'Кассовые документы (возвраты)', 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) +'_' +(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
                    TRY {
                            WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) + '_' +(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
                            WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/COPY/' + doctype(expMain) + '_' +(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
                        }
                    CATCH logToFile('supermag', CONCAT '\n', 'Кассовые документы (возвраты)', 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) + '_' +(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
                }                                                             
                inc(expMain) <- NULL;
    }
    APPLY;
}

exportZReports (STRING idStock, STRING dateStr ) {
    exportZReports(departmentStore(idStock),toDateFormat(dateStr,'DD.MM.YYYY'));
}

exportZReports () {
    FOR date(ZReport z) >= sum(currentDate(), -2) AND NOT closeDate(z) DO {
        importCloseDate(z);
    }
    
    LOCAL NESTED curDate = DATE ();
    curDate() <-  currentDate();
    FOR DepartmentStore st IF DATE(startDate(st)) <= curDate() AND NOT DATE(endDate(st)) < curDate() NOINLINE DO {  exportZReports(st,curDate()); }
    FOR DepartmentStore st IF DATE(startDate(st)) <= sum(curDate(), -1) AND NOT DATE(endDate(st)) < sum(curDate(), -1) NOINLINE DO {  exportZReports(st,sum(curDate(), -1)); }
}

//сверка выгруженных данных
salesFusion = DATA LOCAL NUMERIC[15,2](Sku);
salesSupermag = DATA LOCAL NUMERIC[15,2] (Sku);

FORM compasionZReports
OBJECTS s = Sku
PROPERTIES id(s), name(s), salesFusion(s), salesSupermag(s)
FILTERS salesFusion(s) > 0 AND NOT salesFusion(s)=salesSupermag(s) ;

compasionZReports (STRING idStock, DATE date) {
    sqlString() <- 'SELECT ds.ARTICLE, ds.TOTALPRICE FROM Supermag.SMSpec ds WHERE ds.DocType IN (\'CS\',\'CR\') AND ds.DOCID IN (\'CS' + idStock + fromDateToFormat(date,'YYYYMMDD')+'@'+idStock+'\' ,\'CR'+idStock+fromDateToFormat(date,'YYYYMMDD')+'@'+idStock+'\') ';    
   
    EXTERNAL SQL connectionString() EXEC sqlString() TO file;

    IMPORT TABLE FROM file() TO idItem, totalPrice;

    FOR id(Sku sku) = idItem(INTEGER i) DO salesSupermag(sku) <- NUMERIC[15,2](totalPrice(i)) WHERE id(sku)=idItem(i);

    salesFusion(Sku sku ) <- NUMERIC[15,2](  [GROUP SUM sum(ReceiptDetail det) BY sku(det) IF id(departmentStore(det)) = idStock AND closeDate(zReport(det)) = date](sku));
    SHOW compasionZReports;
}
