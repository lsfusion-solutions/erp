MODULE SupermagItem;

REQUIRE Item, ItemSize, PurchaseDemandItem, ItemFood, ItemDescription, ItemStorage, StockReserve, ItemPart, ItemSize,
        SupermagSettings;


idOrder (ItemGroup g) = GROUP CONCAT TEXT (order(ItemGroup gg)) + '.' IF level(g, gg), '' ORDER DESC level(g, gg); 

importItemGroup 'Импорт товарных групп' () {
    
    LOCAL id = INTEGER (INTEGER);
    LOCAL tree = ISTRING[100] (INTEGER);
    LOCAL name = ISTRING[250] (INTEGER);
    
    EXTERNAL SQL connectionString() EXEC 'SELECT ID, TREE, NAME FROM Supermag.SACARDCLASS' TO SupermagSettings.file;
    
    IMPORT TABLE FROM SupermagSettings.file() TO id, tree, name;
    
    IF NOT itemGroup('all') THEN NEW g = ItemGroup {
        id(g) <- 'all';
        name(g) <- 'Все';
    }
    
    FOR id(INTEGER i) AND id(i) != 0 AND NOT itemGroup(TEXT (id(i))) DO NEW g = ItemGroup {
        id(g) <- ISTRING[100] (id(i));
    }
    
    LOCAL level = INTEGER (INTEGER);
    LOCAL parent = TEXT (INTEGER);
    LOCAL idOrder = ISTRING[20](ItemGroup);
    
    level(INTEGER i) <- wordCount(tree(i), '.') (-) 1 WHERE imported(i);
    parent(INTEGER i) <- left(tree(i), length(tree(i)) - length((getWord(tree(i), '.', level(i))) + '.')) WHERE imported(i);
    
    FOR level(INTEGER i) AND ItemGroup g = itemGroup(TEXT (id(i))) DO {
    
        name(g) <- name(i);
        order(g) <- INTEGER (getWord(tree(i), '.', level(i)));
        idOrder(g) <- tree(i);
    }
    FOR level(INTEGER i) AND ItemGroup g = itemGroup(TEXT (id(i))) ORDER level(i) DO {
        
        parent(g) <- OVERRIDE (GROUP MAX ItemGroup gg IF idOrder(gg) == parent(i)), itemGroup('all');
    }
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importItemGroup();

importUOM 'Импорт единиц измерений' () {
    
    LOCAL id = INTEGER (INTEGER);
    LOCAL name = STRING[50] (INTEGER);
    LOCAL abb = STRING[100] (INTEGER);
    
    EXTERNAL SQL connectionString() EXEC 'SELECT ID, NAME, ABBREV FROM Supermag.SAMEASUREMENT' TO SupermagSettings.file;
    
    IMPORT TABLE FROM SupermagSettings.file() TO id, name, abb;
    
    FOR id(INTEGER i) AND NOT UOM(TEXT (id(i))) DO NEW u = UOM {
        id(u) <- ISTRING[100] (id(i));
    }
    
    FOR UOM u = UOM(TEXT (id(INTEGER i))) DO {
        id(u) <- ISTRING[100] (id(i));
        name(u) <- name(i);
        shortName(u) <- abb(i);
        factor(u) <- 1;
        base(u) <- u;
    }
    APPLY;
}

importCountries 'Импорт стран' () {
    LOCAL id = INTEGER (INTEGER);
    LOCAL name = STRING[50] (INTEGER);
    
    EXTERNAL SQL connectionString() EXEC 'SELECT ID, TITLE FROM Supermag.SACOUNTRIES' TO SupermagSettings.file;
    
    IMPORT TABLE FROM SupermagSettings.file() TO id, name;
    
    FOR name(INTEGER i) AND NOT (GROUP MAX Country c IF name(c) == upper(trim(name(i)))) DO NEW c = Country {
        name(c) <- upper(trim(name(i)));
    }

    APPLY;
}

EXTEND FORM integrationData PROPERTIES importUOM(), importCountries();

shortName 'Краткое наименование' = DATA ISTRING[250](Item) IN itemBase;

@defineItemAttribute(shortName, , 'Краткое наименование', itemBase);
@implementItemAttribute(shortName, 'Краткое наименование', String, itemShortName);

importBarcodeItem 'Импорт штрихкодов товара' (STRING itemlist) {

    LOCAL id = TEXT (INTEGER);
    LOCAL name = ISTRING[255] (INTEGER);
    LOCAL recid = NUMERIC[16,0] (INTEGER);
    
    EXTERNAL SQL connectionString() EXEC 'SELECT BARCODE, ARTICLE, QUANTITY, FLAGS FROM Supermag.SVStoreUnits WHERE ARTICLE IN ('+ itemlist +')' TO SupermagSettings.file;
    
    IMPORT TABLE FROM SupermagSettings.file() TO name, id, quantity, flags;
        
    name(INTEGER i) <- left(name(i), 15);
    //весовой товар 
    name(INTEGER i) <- substrFrom(name(i),3) WHERE substr(name(i),1,2) = '22' AND length(name(i)) = 7; 
     
    FOR imported(INTEGER i) AND NOT barcode(name(i)) DO NEW b = Barcode {
        id(b) <- ISTRING[15] (name(i));
    }
    FOR Barcode b = barcode(name(INTEGER i)) AND Item s = item(id(i)) DO {
        sku(b) <- s;
        transportPack(b) <- NULL;
        dataAmount(b) <- quantity(i); // 11.08.20 добавил импорт множителя 
    }
    
    // следующее действие нужно, если штрихкод, который был упаковкой становится обычным штрихкодом
    FOR Barcode b = barcode(name(INTEGER i)) AND Purchase.packBarcode(Sku s) = b DO {
        Purchase.packBarcode(s) <- NULL; 
    }

    FOR Barcode b = barcode(name(INTEGER i)) AND flags(i) >= 9 DO {
        dataBarcode(Item s) <- b WHERE id(s) = id(i);
    }
}

lastBarcodelogId = DATA LONG ();
EXTEND FORM integrationData
PROPERTIES lastBarcodelogId();

importBarcodeHistory 'Импорт изменения штрихкодов' () {

    LOCAL id = STRING (INTEGER);
    LOCAL recid = NUMERIC[16,0] (INTEGER);
    
    EXTERNAL SQL connectionString() EXEC 'SELECT ARTICLE, MAX(RECID) FROM Supermag.SMStoreUnitHist WHERE RECID > ' + STRING(lastBarcodelogId()) + ' GROUP BY ARTICLE' TO SupermagSettings.file;
    
    IMPORT TABLE FROM SupermagSettings.file() TO id, recid;
        
    LOCAL itemlist = STRING ();   

    itemlist() <- GROUP CONCAT ('\'' + id(INTEGER i) + '\''), ',' ORDER i;
    
    IF itemlist() THEN importBarcodeItem(itemlist());  
    
    lastBarcodelogId() <- OVERRIDE (GROUP MAX recid(INTEGER i)), lastBarcodelogId();

    APPLY;
}

overImportItemAttribute ABSTRACT LIST (STRING);

importItemAttribute 'Импорт доп. свойств товаров' (STRING itemlist) {
    
    // пока не импортируем, так как там ерунда - \'packbarcode\',         
    sqlString() <- 'SELECT ARTICLE, PROPID, PROPVAL FROM Supermag.SVCARDPROPERTIES WHERE ARTICLE IN ('+ itemlist +') AND  PROPID IN (\'composition\', \'packsize\', \'packsize2\', \'1\', \'17\', \'manufacturer\', \'manCountry\', \'expDate\', \'storeWetness\', \'storeTemperature\', \'packType\', \'supName\', \'alcoPercent\', \'Sys.Composition\', \'brutto\', \'bruttoPack\', \'pack_height\', \'pack_length\', \'pack_width\', \'pack_pallet\', \'volume\')';  
    
    EXTERNAL SQL connectionString() EXEC sqlString() TO SupermagSettings.file;

    IF enableLogImport() THEN logToFile('supermag', CONCAT '\n', 'Аттрибуты товаров', sqlString());
    
    IMPORT TABLE FROM SupermagSettings.file() TO idItem, property, value;
    
    FOR property(INTEGER i) == 'packsize2' AND NUMERIC[14,3](trim(value(i))) > 0 AND NOT barcode(item(idItem(i)), TransportPack.outpack) DO NEW b = Barcode {
        sku(b) <- item(idItem(i));
        transportPack(b) <- TransportPack.outpack;
    }
    
    FOR property(INTEGER i) == 'packsize2' AND NUMERIC[14,3](trim(value(i))) > 0 AND Barcode b == barcode(item(idItem(i)), TransportPack.outpack) AND Item s = item(idItem(i)) DO {
        Purchase.packBarcode(s) <- b;
        amount(b) <- NUMERIC[14,3](trim(value(i)));
   }
    
    FOR [GROUP SUM 1 IF property(INTEGER i) == '1' BY value(i)](TEXT name) AND name != '' AND NOT brandName(name) DO NEW b = Brand {
        name(b) <- ISTRING[50] (name);
    }
    FOR property(INTEGER i) == '1' AND Item s = item(idItem(i)) DO {
        brand(s) <- brandName(value(i));
    }
    
    FOR [GROUP SUM 1 IF property(INTEGER i) == 'manufacturer' BY value(i)](TEXT name) AND name != '' AND NOT manufacturerName(name) DO NEW m = Manufacturer {
        name(m) <- ISTRING[200] (name);
    }
    FOR property(INTEGER i) == 'manufacturer' AND Item s = item(idItem(i)) DO {
        manufacturer(s) <- manufacturerName(value(i));
    }
    
//    FOR [GROUP SUM 1 IF property(INTEGER i) == 'manCountry' BY ISTRING[50](upper(value(i)))](TEXT name) AND name != '' AND NOT (GROUP MAX Country c IF upper(name(c)) == name) DO NEW c = Country {
//        name(c) <- ISTRING[50] (name);
//    }
//    // наверно если и записывать, то в другое свойство
//    FOR property(INTEGER i) == 'manCountry' AND Item s = item(idItem(i)) DO {
//        country(s) <- GROUP MAX Country c IF upper(name(c)) == upper(value(i));
//    }
    
    FOR property(INTEGER i) == '17' AND Item s = item(idItem(i)) DO {
        netWeight(s) <- NUMERIC[11,5](replace(trim(value(i)), ',', '.'));
        grossWeight(s) <- NUMERIC[11,5](replace(trim(value(i)), ',', '.'));
    }
    
    FOR property(INTEGER i) == 'expDate' AND Item s = item(idItem(i)) DO {
        expiryDays(s) <- INTEGER (getWord(value(i), ' ', 1));
        expiryText(s) <- ISTRING[100] (value(i));
    }
    
    LOCAL condition = ISTRING[100](Item);
    
    FOR property(INTEGER i) == 'storeTemperature' AND Item s = item(idItem(i)) DO {
        condition(s) <- ISTRING[100] (value(i));
    }
    
    FOR property(INTEGER i) == 'storeWetness' AND Item s = item(idItem(i)) AND NOT value(i) == 'не обусловлено' AND NOT value(i) == 'не обусловлен' AND NOT value(i) == 'нет' AND NOT value(i) == ','
        AND NOT value(i) == '-' AND NOT value(i) == '"-"' AND NOT value(i) == '_' AND NOT value(i) == '/' AND NOT value(i) == '.' AND NOT value(i) == '--' DO {
        conditionsText(s) <- CONCAT '', condition(s), ', влажность: ' + ISTRING[100] (value(i));
    }
    
    FOR [GROUP SUM 1 IF property(INTEGER i) == 'packType' BY value(i)](TEXT name) AND name != '' AND NOT packTypeName(name) DO NEW t = PackType {
        name(t) <- ISTRING[200] (name);
    }
    FOR property(INTEGER i) == 'packType' AND Item s = item(idItem(i)) DO {
        packType(s) <- packTypeName(value(i));
    }
    
    FOR property(INTEGER i) == 'supName' AND Item s = item(idItem(i)) DO {
        originalCaption(s) <- ISTRING[100](value(i));
    }
    
    FOR [GROUP SUM 1 IF property(INTEGER i) == 'alcoPercent' BY value(i)](TEXT name) AND name != '' AND NOT alcoholName(name) DO NEW a = Alcohol {
        name(a) <- ISTRING[50] (name);
    }
    FOR property(INTEGER i) == 'alcoPercent' AND Item s = item(idItem(i)) DO {
        alcohol(s) <- alcoholName(value(i));
    }

    FOR property(INTEGER i) = 'composition' DO { //}AND Item s = item(idItem(i)) DO {
        description(Item s) <- value(i) WHERE id(s) = idItem(i);
    }
    
    FOR property(INTEGER i) = 'Sys.Composition' AND Item s = item(idItem(i)) DO {
        description(s) <- value(i);
    }
    
    FOR property(INTEGER i) == 'packsize' AND Item s = item(idItem(i)) DO {
        MOQ(s) <- NUMERIC[15,4](value(i));
    }
    
    FOR property(INTEGER i) == 'volume' AND Item s = item(idItem(i)) DO {
        volume(s) <- NUMERIC[9,3](toNumeric(value(i)));
    }   
    
    FOR property(INTEGER i) == 'packbarcode' AND NOT barcode(item(idItem(i)), TransportPack.outpack) DO NEW b = Barcode {
        sku(b) <- item(idItem(i));
        transportPack(b) <- TransportPack.outpack;
    }
    FOR property(INTEGER i) == 'packbarcode' AND Barcode b == barcode(item(idItem(i)), TransportPack.outpack) DO {
        id(b) <- STRING[15](value(i));
    }

    id(Barcode b) <- NULL WHERE transportPack(b) = TransportPack.outpack AND NOT [GROUP SUM 1 IF property(INTEGER i) = 'packbarcode' BY idItem(i)](id(sku(b))); 
    
    FOR property(INTEGER i) == 'bruttoPack' AND Barcode b == barcode(item(idItem(i)), TransportPack.outpack) DO {
        weight(b) <- NUMERIC[11,5](replace(trim(value(i)), ',', '.'));
    }

    FOR property(INTEGER i) == 'pack_height' AND Barcode b == barcode(item(idItem(i)), TransportPack.outpack) DO {
        height(b) <- NUMERIC[8,2](replace(trim(value(i)), ',', '.'));
    }

    FOR property(INTEGER i) == 'pack_length' AND Barcode b == barcode(item(idItem(i)), TransportPack.outpack) DO {
        length(b) <- NUMERIC[8,2](replace(trim(value(i)), ',', '.'));
    }

    FOR property(INTEGER i) == 'pack_width' AND Barcode b == barcode(item(idItem(i)), TransportPack.outpack) DO {
        width(b) <- NUMERIC[8,2](replace(trim(value(i)), ',', '.'));
    }
    
    FOR property(INTEGER i) == 'pack_pallet' AND NUMERIC[14,3](replace(trim(value(i)), ',', '.')) > 0 AND NOT barcode(item(idItem(i)), TransportPack.oppl) DO NEW b = Barcode {
        sku(b) <- item(idItem(i));
        transportPack(b) <- TransportPack.oppl;
    }
    FOR property(INTEGER i) == 'pack_pallet' AND NUMERIC[14,3](replace(trim(value(i)), ',', '.')) > 0 AND Barcode b == barcode(item(idItem(i)), TransportPack.oppl) DO {
        amount(b) <- NUMERIC[14,3](replace(trim(value(i)), ',', '.'));
    }
    
    overImportItemAttribute(itemlist);           
        
}

importItemAttribute 'Импорт доп. свойств товаров' () {
    importItemAttribute('%');
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importItemAttribute();


statusInSuperMag 'Статус в Супермаге' = DATA INTEGER (Item);

overImportItem ABSTRACT LIST ();

lastVersion = DATA STRING (Item);
imported = DATA LOCAL BOOLEAN (Item);
imported = DATA LOCAL BOOLEAN (Barcode);

importItem 'Импорт товаров' () {
    
    LOCAL id = TEXT (INTEGER);
    LOCAL taxArticle = TEXT (INTEGER);
    LOCAL name = ISTRING[255] (INTEGER);
    LOCAL shortName = ISTRING[250] (INTEGER);
    LOCAL idMeasurement = INTEGER (INTEGER);
    LOCAL idClass = INTEGER (INTEGER);
    LOCAL country = TEXT (INTEGER);
    LOCAL accepted = INTEGER (INTEGER);
    LOCAL scale = STRING[1] (INTEGER);
    LOCAL width = NUMERIC[14,3] (INTEGER);
    LOCAL length = NUMERIC[14,3] (INTEGER);
    LOCAL height = NUMERIC[14,3] (INTEGER);
    LOCAL vat = NUMERIC[8,4] (INTEGER);
    LOCAL taxItem = NUMERIC[8,4] (STRING);   
   
    EXTERNAL SQL connectionString()    
        EXEC 'SELECT card.ARTICLE, NAME, SHORTNAME, IDMEASUREMENT, IDCLASS, COUNTRY, ACCEPTED, SCALELOAD, WIDTH, LENGTH, HEIGHT FROM Supermag.SMCARD card' TO SupermagSettings.file;
    
//    logToFile('importSupermag', 'importItem_1');
    
    IMPORT TABLE FROM SupermagSettings.file() TO id, name, shortName, idMeasurement, idClass, country, accepted, scale, width, length, height;

    EXTERNAL SQL connectionString()    
        EXEC 'SELECT cardtax.article, taxrate.TAXPERCENT AS VAT FROM SUPERMAG.SMCARDTAX cardtax, SUPERMAG.SMTAXGROUP taxgr, SUPERMAG.SMTAXRATE taxrate WHERE cardtax.rgnid = 3 AND taxgr.TAXGROUPID = cardtax.TAXGROUPID AND taxgr.TAXID = 0 AND taxrate.TAXID = 0 AND taxrate.RATEID = taxgr.RATEID AND cardtax.datefrom = (SELECT MAX(crdtax.datefrom) FROM SUPERMAG.SMCARDTAX crdtax WHERE crdtax.article = cardtax.article AND crdtax.rgnid = 3)' TO SupermagSettings.file;
    
    IMPORT TABLE FROM SupermagSettings.file() TO taxArticle, vat;
    
    FOR taxArticle(INTEGER i) DO { taxItem (taxArticle(i)) <- vat(i); }
    
    currentVersion(INTEGER i) <- CONCAT '~', id(i), name(i), shortName(i), TEXT (idMeasurement(i)), TEXT (idClass(i)), country(i), TEXT (accepted(i)), scale(i), 
                                            TEXT (width(i)), TEXT (length(i)), TEXT (height(i)), TEXT (taxItem(id(i)));
 //   logToFile('importSupermag', 'importItem_2');
      
    FOR country(INTEGER i) AND NOT [GROUP MIN Country c IF upper(name(c)) == upper(trim(country(i)))]() DO NEW s = Country {
        name(s) <- ISTRING[50](upper(trim(country(i))));
    }

    FOR id(INTEGER i) AND NOT item(id(i)) DO NEW s = Item {
        id(s) <- ISTRING[100] (id(i));
    }
   
    FOR Item s = item(id(INTEGER i)) AND NOT lastVersion(s) = currentVersion(i) DO {    
        caption(s) <- STRING[255](replace(name(i), '\t', ' '));
        shortName(s) <- shortName(i);
        UOM(s) <- UOM(TEXT (idMeasurement(i)));
        itemGroup(s) <- itemGroup(TEXT (idClass(i)));
        skuType(s) <- CASE WHEN id(itemGroup(s)) = '2279' OR id(itemGroup(s)) = '368' THEN SkuType.skuTypeContainer
                           WHEN id(itemGroup(s)) = '393' THEN SkuType.skuTypeCharge 
                           ELSE SkuType.skuTypeItem;
        Item.country(s) <- GROUP MIN Country c IF upper(name(c)) == upper(trim(country(i)));
        width(s) <- max(min(width(i), 99999), -99999);
        length(s) <- max(min(length(i), 99999), -99999);
        height(s) <- max(min(height(i), 99999), -99999);
        inactive(s) <- accepted(i) != 1;
        passScales(s) <- scale(i) == '1';
        imported(s) <- TRUE;
        statusInSuperMag(s) <- accepted(i);
        lastVersion(s) <- currentVersion(i);    
    }

    FOR Item s = item(id(INTEGER i)) AND imported(s) DO {    
        VAT(s, Country c) <- GROUP MAX Tax.Range r IF valueRate(r) == taxItem(id(i)) AND c = defaultCountry();    
    }
          
    logToFile('importSupermag', 'importItem_6');
    
    overImportItem();

    APPLY;
}

EXTEND FORM integrationData PROPERTIES importItem();

importItem 'Импорт товаров' (STRING itemlist) {
    
    LOCAL id = TEXT (INTEGER);
    LOCAL taxArticle = TEXT (INTEGER);
    LOCAL name = ISTRING[255] (INTEGER);
    LOCAL shortName = ISTRING[250] (INTEGER);
    LOCAL idMeasurement = INTEGER (INTEGER);
    LOCAL idClass = INTEGER (INTEGER);
    LOCAL country = TEXT (INTEGER);
    LOCAL accepted = INTEGER (INTEGER);
    LOCAL scale = STRING[1] (INTEGER);
    LOCAL width = NUMERIC[14,3] (INTEGER);
    LOCAL length = NUMERIC[14,3] (INTEGER);
    LOCAL height = NUMERIC[14,3] (INTEGER);
    LOCAL vat = NUMERIC[8,4] (INTEGER);
    LOCAL taxItem = NUMERIC[8,4] (STRING);   

    sqlString() <- 'SELECT card.ARTICLE, NAME, SHORTNAME, IDMEASUREMENT, IDCLASS, COUNTRY, ACCEPTED, SCALELOAD, WIDTH, LENGTH, HEIGHT FROM Supermag.SMCARD card WHERE ARTICLE IN (' + itemlist + ')';
  //  MESSAGE sqlString();
    EXTERNAL SQL connectionString() EXEC sqlString() TO SupermagSettings.file;
    
    IMPORT TABLE FROM SupermagSettings.file() TO id, name, shortName, idMeasurement, idClass, country, accepted, scale, width, length, height;

    FOR country(INTEGER i) AND NOT [GROUP MIN Country c IF upper(name(c)) == upper(trim(country(i)))]() DO NEW s = Country {
        name(s) <- ISTRING[50](upper(trim(country(i))));
    }

    FOR id(INTEGER i) AND NOT item(id(i)) DO NEW s = Item {
        id(s) <- ISTRING[100] (id(i));
    }
   
    FOR Item s = item(id(INTEGER i)) DO {    
        caption(s) <- STRING[255](replace(name(i), '\t', ' '));
        shortName(s) <- shortName(i);
        UOM(s) <- UOM(TEXT (idMeasurement(i)));
        itemGroup(s) <- itemGroup(TEXT (idClass(i)));
        skuType(s) <- CASE WHEN id(itemGroup(s)) = '2279' OR id(itemGroup(s)) = '368' THEN SkuType.skuTypeContainer
                           WHEN id(itemGroup(s)) = '393' THEN SkuType.skuTypeCharge 
                           ELSE SkuType.skuTypeItem;
        Item.country(s) <- GROUP MIN Country c IF upper(name(c)) == upper(trim(country(i)));
        width(s) <- max(min(width(i), 99999), -99999);
        length(s) <- max(min(length(i), 99999), -99999);
        height(s) <- max(min(height(i), 99999), -99999);
        inactive(s) <- accepted(i) != 1;
        passScales(s) <- scale(i) == '1';
        imported(s) <- TRUE;
        statusInSuperMag(s) <- accepted(i);
    }
         
    overImportItem();
    
    sqlString() <- 'SELECT cardtax.article, taxrate.TAXPERCENT AS VAT FROM SUPERMAG.SMCARDTAX cardtax, SUPERMAG.SMTAXGROUP taxgr, SUPERMAG.SMTAXRATE taxrate WHERE cardtax.ARTICLE IN (' + itemlist + ') AND cardtax.rgnid = 3 AND taxgr.TAXGROUPID = cardtax.TAXGROUPID AND taxgr.TAXID = 0 AND taxrate.TAXID = 0 AND taxrate.RATEID = taxgr.RATEID AND cardtax.datefrom = (SELECT MAX(crdtax.datefrom) FROM SUPERMAG.SMCARDTAX crdtax WHERE crdtax.article = cardtax.article AND crdtax.rgnid = 3)';
  //  MESSAGE sqlString();

    EXTERNAL SQL connectionString() EXEC sqlString() TO SupermagSettings.file;
    
    IMPORT TABLE FROM SupermagSettings.file() TO taxArticle, vat;
    
    FOR taxArticle(INTEGER i) DO { taxItem (taxArticle(i)) <- vat(i); }

    FOR Item s = item(id(INTEGER i)) AND imported(s) DO {    
        VAT(s, Country c) <- GROUP MAX Tax.Range r IF valueRate(r) == taxItem(id(i)) AND c = defaultCountry();    
    }
    
   // importBarcodeItem(itemlist);
    
    importItemAttribute(itemlist);  
}

lastItemlogId = DATA LONG ();

EXTEND FORM integrationData
PROPERTIES lastItemlogId();

importItems 'Импорт товаров' () {

    LOCAL recid = NUMERIC[16,0] (INTEGER);
    LOCAL id = STRING (INTEGER);
   
    EXTERNAL SQL connectionString()    
        EXEC 'SELECT * FROM (SELECT ARTICLE, MAX(RECID) FROM Supermag.SMCardSecurityLog log WHERE RECID > ' + STRING(lastItemlogId()) + ' GROUP BY ARTICLE ORDER BY MAX(RECID)) WHERE ROWNUM < 500' TO SupermagSettings.file;
        
    IMPORT TABLE FROM SupermagSettings.file() TO id, recid;  
      
    LOCAL itemlist = STRING ();   

    itemlist() <- GROUP CONCAT ('\'' + id(INTEGER i) + '\''), ',' ORDER i;
    
    IF itemlist() THEN importItem(itemlist());  
    
    MESSAGE lastItemlogId();
    MESSAGE (GROUP MAX recid(INTEGER i));
    
    lastItemlogId() <- OVERRIDE (GROUP MAX recid(INTEGER i)), lastItemlogId();
    
    APPLY;
}

importAltUnit 'Импорт альтернативных едениц измерения' (STRING articleId) {
    // пока не импортируем, так как там ерунда - \'packbarcode\',            
}

//---------------------------------------------------------------------------------------------------------------------импорт списков товаров
importSkuLists 'Импорт списков товаров' () {
    
    LOCAL id = INTEGER (INTEGER);
    LOCAL tree = ISTRING[100] (INTEGER);
    LOCAL name = ISTRING[250] (INTEGER);
    
    EXTERNAL SQL connectionString() EXEC 'SELECT ID, TREE, NAME FROM Supermag.SACardAssort' TO SupermagSettings.file;
    
    IMPORT TABLE FROM SupermagSettings.file() TO id, tree, name;
    
    IF NOT list('all') THEN NEW g = List {
        id(g) <- 'all';
        name(g) <- 'Все';
    }
    
    FOR id(INTEGER i) AND id(i) != 0 AND NOT list(TEXT (id(i))) DO NEW g = List {
        id(g) <- ISTRING[100] (id(i));
    }
    
    LOCAL level = INTEGER (INTEGER);
    LOCAL parent = TEXT (INTEGER);
    LOCAL idOrder = ISTRING[20](List);
    
    level(INTEGER i) <- wordCount(tree(i), '.') (-) 1 WHERE imported(i);
    parent(INTEGER i) <- left(tree(i), length(tree(i)) - length((getWord(tree(i), '.', level(i))) + '.')) WHERE imported(i);
    
    FOR level(INTEGER i) AND List g = list(TEXT (id(i))) DO {
    
        name(g) <- name(i);
        order(g) <- INTEGER (getWord(tree(i), '.', level(i)));
        idOrder(g) <- tree(i);
    }
    FOR level(INTEGER i) AND List g = list(TEXT (id(i))) ORDER level(i) DO {
        
        parent(g) <- OVERRIDE (GROUP MAX List gg IF idOrder(gg) == parent(i)), list('all');
    }
    
    APPLY;
    
    LOCAL idList = INTEGER (INTEGER);
    LOCAL idItem = ISTRING[100] (INTEGER);
    
    EXTERNAL SQL connectionString() EXEC 'SELECT IDASSORT, ARTICLE FROM Supermag.SMCardAssort' TO SupermagSettings.file;
    
    IMPORT TABLE FROM SupermagSettings.file() TO idList, idItem;
    
    LOCAL imported = BOOLEAN (ListDetail);
    
    FOR Item s == item(idItem(INTEGER i)) AND List l = list(TEXT (idList(i))) AND NOT listDetail(s, l) DO NEW d = ListDetail {
        list(d) <- l;
        sku(d) <- s;
    }
    FOR Item s == item(idItem(INTEGER i)) AND List l = list(TEXT (idList(i))) AND ListDetail d = listDetail(s, l) DO {
        imported(d) <- TRUE;
    }
    
    DELETE ListDetail d WHERE d IS ListDetail AND NOT imported(d);
    
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importSkuLists();

part (Item set, Item item) = GROUP MAX Part p BY set(p), item(p);

importItemPart 'Импорт комплектов' () {

    LOCAL idSet = ISTRING[50] (INTEGER);
    LOCAL quantity = NUMERIC[16,3] (INTEGER);
    LOCAL percent = NUMERIC[16,2] (INTEGER);

    EXTERNAL SQL connectionString() 
        EXEC 'select ca.ComplexArticle,ca.Article,ca.Amount,ca.PricePercent from Supermag.SVComplexCompositeArt ca' TO SupermagSettings.file;
        
    IMPORT TABLE FROM SupermagSettings.file() TO idSet, idItem, quantity, percent;
    
    FOR [GROUP SUM 1 BY sku(idSet(INTEGER i)), sku(idItem(i))](Item set, Item item) AND NOT part(set, item) DO NEW p = Part {
        set(p) <- set;
        item(p) <- item;
        skuType(set) <- SkuType.skuTypeSet;
    }
    
    FOR Part p = part(sku(idSet(INTEGER i)), sku(idItem(i))) DO {
        quantity(p) <- quantity(i);
        percent(p) <- percent(i);
    }
    
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importItemPart();
