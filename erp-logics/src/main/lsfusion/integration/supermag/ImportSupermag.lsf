MODULE ImportSupermag;

REQUIRE Item, ItemSize, LegalEntityBy, EDI, 
        Document, SupermagSettings,
        PriceListOperation, PriceListBefore, PriceListContract, PriceList,
        PurchaseOrder, PurchasePack, PurchaseInvoice, PurchaseShipment, PricingPurchase, PurchaseScheduleOrder, PurchaseScheduleOrderSeparation, PurchaseDemandItem, 
        PurchaseOrderStatus, PurchaseSaleOrder, PurchaseAutoOrder, PurchaseScheduleOrderContract, PurchaseManufacturingPrice,
        ItemFood, ItemDescription, ItemStorage, StockReserve, ItemPart, ItemSize, StockContract;

PRIORITY Supermag;

idOrder (LegalEntityGroup g) = GROUP CONCAT TEXT (order(LegalEntityGroup gg)) + '.' IF level(g, gg), '' ORDER DESC level(g, gg); 

importSupplierGroup 'Импорт групп поставщиков' () {
    
    LOCAL id = INTEGER (INTEGER);
    LOCAL tree = ISTRING[100] (INTEGER);
    LOCAL name = ISTRING[100] (INTEGER);
    
    LOCAL file = FILE ();
    EXTERNAL SQL connectionString() EXEC 'SELECT ID, TREE, NAME FROM Supermag.SASUPPLIERCLASS' TO file;
    
    IMPORT TABLE FROM file() TO id, tree, name;
    
    FOR id(INTEGER i) AND id(i) != 0 AND NOT legalEntityGroup('S' + id(i)) DO NEW g = LegalEntityGroup {
        id(g) <- 'S' + id(i);
    }
    
    LOCAL level = INTEGER (INTEGER);
    LOCAL parent = TEXT (INTEGER);
    
    level(INTEGER i) <- wordCount(tree(i), '.') (-) 1 WHERE imported(i);
    parent(INTEGER i) <- left(tree(i), length(tree(i)) - length((getWord(tree(i), '.', level(i))) + '.')) WHERE imported(i);
    
    FOR level(INTEGER i) AND LegalEntityGroup g = legalEntityGroup('S' + id(i)) ORDER level(i) DO {
    
        name(g) <- name(i);
        order(g) <- INTEGER (getWord(tree(i), '.', level(i)));
        parent(g) <- OVERRIDE (GROUP MAX LegalEntityGroup gg IF idOrder(gg) == parent(i) AND strpos(id(gg),'S')>0), legalEntityGroup('suppliers');
    }
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importSupplierGroup();
DESIGN integrationData {
    supermag {
        MOVE PROPERTY (importSupplierGroup());
    }
}

importCustomerGroup 'Импорт групп покупателей' () {
    
    LOCAL id = INTEGER (INTEGER);
    LOCAL tree = ISTRING[100] (INTEGER);
    LOCAL name = ISTRING[100] (INTEGER);
    
    LOCAL file = FILE ();
    EXTERNAL SQL connectionString() EXEC 'SELECT ID, TREE, NAME FROM Supermag.SACLIENTCLASS' TO file;
    
    IMPORT TABLE FROM file() TO id, tree, name;
    
    FOR id(INTEGER i) AND id(i) != 0 AND NOT legalEntityGroup('C' + id(i)) DO NEW g = LegalEntityGroup {
        id(g) <- 'C' + id(i);
    }
    
    LOCAL level = INTEGER (INTEGER);
    LOCAL parent = TEXT (INTEGER);
    
    level(INTEGER i) <- wordCount(tree(i), '.') (-) 1 WHERE imported(i);
    parent(INTEGER i) <- left(tree(i), length(tree(i)) - length((getWord(tree(i), '.', level(i))) + '.')) WHERE imported(i);
    
    FOR level(INTEGER i) AND LegalEntityGroup g = legalEntityGroup('C' + id(i)) ORDER level(i) DO {
    
        name(g) <- name(i);
        order(g) <- INTEGER (getWord(tree(i), '.', level(i)));
        parent(g) <- OVERRIDE (GROUP MAX LegalEntityGroup gg IF idOrder(gg) == parent(i) AND strpos(id(gg),'C')>0), legalEntityGroup('customers');
    }
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importCustomerGroup();
DESIGN integrationData {
    supermag {
        MOVE PROPERTY (importCustomerGroup());
    }
}

overImportLegalEntity ABSTRACT LIST ();

idOrg = DATA LOCAL INTEGER (INTEGER);

importLegalEntity 'Импорт организаций' () {    
    LOCAL name = ISTRING[255] (INTEGER);
    LOCAL juname = ISTRING[255] (INTEGER);
    LOCAL shortName = ISTRING[255] (INTEGER);
    LOCAL inn = ISTRING[20] (INTEGER);
    LOCAL address = ISTRING[255] (INTEGER);
    LOCAL faddress = ISTRING[255] (INTEGER);
    LOCAL tel = ISTRING[40] (INTEGER);
    LOCAL fax = ISTRING[40] (INTEGER);
    LOCAL email = ISTRING[255] (INTEGER);
    LOCAL okpo = ISTRING[40] (INTEGER);
    LOCAL kpp = ISTRING[9] (INTEGER);
    LOCAL commentary = ISTRING[255] (INTEGER);
    LOCAL gln = ISTRING[13] (INTEGER);
    LOCAL own = ISTRING[1] (INTEGER);
    LOCAL clientClass = INTEGER (INTEGER);
    LOCAL supplierClass = INTEGER (INTEGER);
    LOCAL status = INTEGER (INTEGER);
    
    sqlString() <- 'SELECT ID, NAME, SHORTNAME, INN, ADDRESS, FADDRESS, nvl(TEL,FTEL) AS TEL, nvl(FAX, FFAX) AS FAX, nvl(EMAIL, FEMAIL) AS EMAIL, OKPO, KPP, COMMENTARY, GLN, OWNCLIENT, CLIENTCLASS, SUPPLIERCLASS, ACCEPTED, PAYMENTDELAY FROM Supermag.SVCOMPANIES'; 
    
    IF enableLogImport() THEN logToFile('supermag', CONCAT '\n', 'Импорт организаций', sqlString());
            
    EXTERNAL SQL connectionString() EXEC sqlString() TO file;
    
    IMPORT TABLE FROM file() TO idOrg, name, shortName, inn, address, faddress, tel, fax, email, okpo, kpp, commentary, gln, own, clientClass, supplierClass, status, paymentDelay;
    
    FOR idOrg(INTEGER i) AND NOT legalEntity(TEXT (idOrg(i))) DO NEW s = LegalEntity {
        id(s) <- ISTRING[100] (idOrg(i));
        
    }

    FOR idOrg(INTEGER i) AND NOT warehouse(TEXT (idOrg(i))) DO NEW w = Warehouse {
            id(w) <- ISTRING[100](idOrg(i));
            legalEntity(w) <- legalEntity(TEXT (idOrg(i)));
            stockGroup(w) <- warehouseGroup('external');
    }
    
    FOR LegalEntity s = legalEntity(TEXT (idOrg(INTEGER i))) DO {
        fullName(s) <- ISTRING[200] (OVERRIDE shortName(i), name(i));
        name(s) <- ISTRING[150] (name(i));
        UNP(s) <- STRING[9](left(inn(i), 9));
        
        IF NOT address(s, currentDate()) == address(i) THEN {
            dataAddress(s, DATE d) <- ISTRING[150] (address(i)) WHERE d == currentDate();
        }
        IF NOT postAddress(s, currentDate()) == faddress(i) THEN {
            dataPostAddress(s, DATE d) <- ISTRING[150] (faddress(i)) WHERE d == currentDate();
        }
        dataPhone(s, DATE d) <- CONCAT ', ', tel(i), fax(i) WHERE d == currentDate();
        email(s) <- email(i);
        OKPO(s) <- ISTRING[20] (okpo(i));
        note(s) <- commentary(i);
        GLN(s) <- gln(i);
        isCompany(s) <- own(i) == '1';
        isSupplier(s) <- TRUE IF supplierClass(i);
        isCustomer(s) <- TRUE IF clientClass(i);
        legalEntityGroup(s) <- OVERRIDE legalEntityGroup('companies') IF own(i) == '1', legalEntityGroup('S' + supplierClass(i)), legalEntityGroup('C' + clientClass(i));
        inactive(s) <- status(i) == 2;
    }
    
    FOR Warehouse s = warehouse(TEXT (idOrg(INTEGER i))) DO {   
                name(s) <- ISTRING[150](shortName(i));
                address(s) <- ISTRING[150](faddress(i));
    }
    
    overImportLegalEntity();
    
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importLegalEntity();
DESIGN integrationData {
    supermag {
        MOVE PROPERTY (importLegalEntity());
    }
}

importStore 'Импорт магазинов' () {
    
    LOCAL id = INTEGER (INTEGER);
    LOCAL name = TEXT (INTEGER);
    
    LOCAL file = FILE ();
    EXTERNAL SQL connectionString() EXEC 'SELECT ID, NAME FROM Supermag.SASTORECLASS' TO file;
    
    IMPORT TABLE FROM file() TO id, name;
    
    FOR id(INTEGER i) AND id(i) != 0 AND NOT stockGroup(TEXT (id(i))) DO NEW g = Store {
        id(g) <- ISTRING[100] (id(i));
        legalEntity(g) <- legalEntity('534');
    }
    
    FOR Store g = store(TEXT (id(INTEGER i))) DO {
        name(g) <- STRING[100](name(i));
    }
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importStore();
DESIGN integrationData {
    supermag {
        MOVE PROPERTY (importStore());
    }
}

storeTypeInSupermag = DATA INTEGER (StoreType);

overImportStoreType ABSTRACT LIST ();

importStoreType 'Импорт форматов магазинов' () {  
    LOCAL id = INTEGER (INTEGER);
    LOCAL name = TEXT (INTEGER);   
    LOCAL file = FILE ();
    EXTERNAL SQL connectionString() EXEC 'SELECT ID, TITLE FROM Supermag.SASTOREFORMATS' TO file;
    
    IMPORT TABLE FROM file() TO id, name;
    
    IF NOT chainStores('main') THEN NEW c = ChainStores {
        id(c) <- 'main';
    }
    
    FOR id(INTEGER i) AND NOT storeType('T' + id(i)) DO NEW g = StoreType {
        id(g) <- 'T' + id(i);
        chainStores(g) <- chainStores('main');
    }
    
    FOR StoreType g = storeType('T' + id(INTEGER i)) DO {
        name(g) <- STRING[100](name(i));
    }
    
    overImportStoreType();
    
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importStoreType();
DESIGN integrationData {
    supermag {
        MOVE PROPERTY (importStoreType());
    }
}

overImportDepartmentStore ABSTRACT LIST ();

idParentStock = DATA LOCAL INTEGER (INTEGER);
idStocks = DATA LOCAL INTEGER (INTEGER);

importDepartmentStore 'Импорт отделов магазинов и складов' () {
    
    LOCAL id = INTEGER (INTEGER);
    LOCAL name = ISTRING[255] (INTEGER);
    LOCAL idClass = INTEGER (INTEGER);
    LOCAL address = ISTRING[255] (INTEGER);
    LOCAL idFormat = INTEGER (INTEGER);
    LOCAL idCompany = INTEGER (INTEGER);
 //   LOCAL idParentStock = INTEGER (INTEGER);
    
    LOCAL file = FILE ();
    EXTERNAL SQL connectionString() 
        EXEC 'SELECT ID, NAME, IDCLASS, ADDRESS, FORMATID, l.CLIENTID AS COMPANYID, PARENTLOC FROM Supermag.SVGRANTEDLOCS g, Supermag.SMOWNCLIENTLOCS l WHERE g.ID = l.LOCID' TO file;
    
    IMPORT TABLE FROM file() TO id, name, idClass, address, idFormat, idCompany, idParentStock;
        
    FOR id(INTEGER i) AND NOT stock(TEXT (id(i))) AND NOT idClass(i) = idGroupWarehouseInSuperMag() DO NEW s = DepartmentStore {
        id(s) <- ISTRING[100] (id(i));
    }
    
    FOR DepartmentStore s = stock(TEXT (id(INTEGER i))) AND NOT idClass(i) = idGroupWarehouseInSuperMag() DO {        
        name(s) <- ISTRING[150](name(i));
        store(s) <- store(TEXT (idClass(i)));
    }
    
    FOR INTEGER i = [GROUP LAST INTEGER ii ORDER idFormat(ii), address(ii) BY store(TEXT (idClass(ii)))](Store st) DO {
        address(st) <- ISTRING[150](address(i));
        storeType(st) <- storeType('T' + idFormat(i));
        legalEntity(st) <- legalEntity(TEXT (idCompany(i)));
    }
    
    // это склады распределительного центра
    FOR id(INTEGER i) AND NOT stock(TEXT (id(i))) AND idClass(i) = idGroupWarehouseInSuperMag() DO NEW s = Warehouse {
        id(s) <- ISTRING[100] (id(i));
    }
    
    FOR Warehouse s = stock(TEXT (id(INTEGER i))) AND idClass(i) = idGroupWarehouseInSuperMag() DO {     
        name(s) <- ISTRING[150](name(i));
        fullName(s) <- ISTRING[150](name(i));
        stockGroup(s) <- warehouseGroup(TEXT (idGroupWarehouseInSuperMag()));
        address(s) <- OVERRIDE ISTRING[150](address(i)), '';
        legalEntity(s) <- legalEntity(TEXT (idCompany(i)));
    }
    
    idStocks(INTEGER i) <- id(i);
    overImportDepartmentStore();
    
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importDepartmentStore(), idGroupWarehouseInSuperMag();
DESIGN integrationData {
    supermag {
        MOVE PROPERTY (importDepartmentStore());
        MOVE PROPERTY (idGroupWarehouseInSuperMag());
    }
}


defaultCompany = DATA LegalEntity();
nameDefaultCompany 'Компания по умолчанию' () = name(defaultCompany());

EXTEND FORM options PROPERTIES nameDefaultCompany();

DESIGN options {
    commons {
        MOVE PROPERTY (nameDefaultCompany());
    }
}

importBank 'Импорт банков' () {
    
    LOCAL id = INTEGER (INTEGER);
    LOCAL name = STRING[255](INTEGER);
    LOCAL address = STRING[255](INTEGER);
    LOCAL bic = STRING[40](INTEGER);
    
    LOCAL file = FILE ();
    EXTERNAL SQL connectionString() EXEC 'SELECT ID, TITLE, ADDRESS, BIC FROM Supermag.SABanks' TO file;
    
    IMPORT TABLE FROM file() TO id, name, address, bic;
    
    FOR id(INTEGER i) AND NOT bank(TEXT (id(i))) DO NEW b = Bank {
        id(b) <- STRING[100] (id(i));
    }
    
    FOR Bank b = bank(TEXT (id(INTEGER i))) DO {
        name(b) <- STRING[200](name(i));
        
        IF NOT address(b, currentDate()) == address(i) THEN {
            dataAddress(b, DATE d) <- STRING[150](address(i)) WHERE d == currentDate() AND NOT address(b, currentDate()) == address(i);
        }
        MFO(b) <- STRING[11](bic(i));
    }
    
    APPLY;
}

importAccount 'Импорт счетов' () {
    
    LOCAL idLegalEntity = INTEGER (INTEGER);
    LOCAL idBank = INTEGER (INTEGER);
    LOCAL account = STRING[40](INTEGER);
    LOCAL active = STRING[1](INTEGER);
    
    LOCAL file = FILE ();
    EXTERNAL SQL connectionString() EXEC 'SELECT IDCLIENT, BANKID, ACCOUNT, ISACTUAL FROM Supermag.SMClientBanks' TO file;
    
    IMPORT TABLE FROM file() TO idLegalEntity, idBank, account, active;
    
    FOR [GROUP SUM 1 IF legalEntity(TEXT (idLegalEntity(INTEGER i))) BY account(i), TEXT (idLegalEntity(i))](STRING[40] acc, STRING[100] id) 
        AND NOT accountID(acc, id) DO NEW a = Bank.Account {
        number(a) <- acc;
        legalEntity(a) <- legalEntity(id);
    }
    
    FOR Bank.Account a = accountID(account(INTEGER i), TEXT (idLegalEntity(i))) ORDER active(i) DO {
        bank(a) <- bank(TEXT (idBank(i)));
        inactive(a) <- active(i) == '0';
    }
    FOR LegalEntity l = legalEntity(TEXT (idLegalEntity(INTEGER i))) DO {
        userAccount(l) <- Bank.defaultAccount(l);
    }
    
    APPLY;
}

EXTEND FORM integrationData PROPERTIES () importBank, importAccount;
DESIGN integrationData {
    supermag {
        MOVE PROPERTY (importBank());
        MOVE PROPERTY (importAccount());
    }
}

//id = DATA STRING[100](Range.Range);
//range = GROUP AGGR Range.Range r WHERE r IS Range.Range BY id(r);
//
//nameImport 'Наименование для импорта' = DATA STRING[50](Store);
//
//EXTEND FORM stores PROPERTIES READONLYIF isReadonly() nameImport(s);
//EXTEND FORM store PROPERTIES nameImport(s);
//
//DESIGN store {
//    headerExtraParams {
//        MOVE PROPERTY (nameImport(s));
//    }
//}

////---------------------------------------------------------------------------------------------------------------матрицы
//importRange 'Импорт ассортиментных матриц' () {
//    
//    LOCAL itemId = STRING[50] (INTEGER);
//    LOCAL id = INTEGER (INTEGER);
//    LOCAL name = ISTRING[50] (INTEGER);
//    LOCAL store = Store(INTEGER);
//    LOCAL rangeRev = RangeRev(INTEGER);
//    
//    EXTERNAL SQL connectionString() 
//        EXEC 'SELECT sa.id, sa.name FROM Supermag.SACardMatrix sa' TO file;
//    
//    IMPORT TABLE FROM file() TO id, name;    
//   
//    FOR id(INTEGER i) AND NOT range(STRING[100] (id(i))) DO NEW r =  Range.Range {
//        id(r) <- STRING[100] (id(i));
//        name(r) <- name(i);      
//        inData(r, ItemGroup g) <- TRUE IF itemGroupRoot(g, 2) == g; 
//        NEW rr = RangeRev {
//            range(rr) <- r;
//            dateTime(rr) <- 2001_01_01_00:00;
//        }     
//    }
//    
//    FOR Range.RangeRev rv AND rv IS RangeRev DO {
//        include(rv, Store st, Item s) <- NULL;    
//    }
//        
//    EXTERNAL SQL connectionString() 
//        EXEC 'SELECT sm.article, sa.id, sa.name FROM Supermag.SMCardMatrix sm, Supermag.SACardMatrix sa WHERE sm.idMatrix = sa.id' TO file;
//                                                          
//    IMPORT TABLE FROM file() TO itemId, id, name;
//
//    store (INTEGER i) <- GROUP MAX Store s IF isISubstring(nameImport(s), replace(name(i), ' nS', ''));
//
////    rangeRev(INTEGER i) <- GROUP LAST RangeRev rr ORDER dateTime(rr), rr IF isParent(ItemGroup g, item(itemId(i))) AND level(g, itemGroup(id(range(rr))));
//    rangeRev(INTEGER i) <- GROUP LAST RangeRev rr ORDER dateTime(rr), rr IF id(range(rr)) = STRING[100] (id(i));
//
//    FOR [GROUP SUM 1 BY rangeRev(INTEGER i)](RangeRev r) DO {
//        include(r, Store st, Item s) <- TRUE IF [GROUP SUM 1 BY rangeRev(INTEGER i), store(i), item(itemId(i))](r, st, s);
//    }
//
//    APPLY;
//}
//
//EXTEND FORM integrationData PROPERTIES importRange();
//
//rangeRev (SkuGroup g) = GROUP LAST RangeRev rr ORDER dateTime(rr), rr IF inData(range(rr), g);
//
//WHEN CHANGED (skuGroup2(Item i)) AND rangeRev(PREV (skuGroup2(i))) DO {
//    include(RangeRev rr, Store st, i) <- TRUE IF include(rangeRev(PREV (skuGroup2(i))), st, i) AND rr == rangeRev(skuGroup2(i));
//    include(RangeRev rr, Store st, i) <- NULL WHERE rr IS RangeRev AND NOT rr == rangeRev(skuGroup2(i));
//}

//---------------------------------------------------------------------------------------импорт остатков
scriptImportInit 'Скрипт импорта остатков' = DATA TEXT ();
useConstraint 'Сохранять, даже если есть ограничения' = DATA BOOLEAN ();

date 'Дата ТТН' = DATA LOCAL DATETIME (INTEGER);
num 'Номер ТТН' = DATA LOCAL STRING[48](INTEGER);
series 'Серия ТТН' = DATA LOCAL STRING[2](INTEGER);
spec 'Код для импорта' = DATA LOCAL INTEGER (INTEGER);

idSupplierInt 'Код поставщика'= DATA LOCAL INTEGER (INTEGER);
idSupplier 'Код поставщика'= DATA LOCAL ISTRING[100] (INTEGER);
idCustomerStockInt 'Код склада покупателя'= DATA LOCAL INTEGER (INTEGER);
idCustomerStock 'Код склада покупателя'= DATA LOCAL ISTRING[100] (INTEGER);

idBal 'Код накладной'(INTEGER i) = OVERRIDE (CONCAT '', idCustomerStock(i), series(i), num(i)), 'nodoc' IF imported(i);
idDetail 'Код строки'(INTEGER i) = OVERRIDE (CONCAT '', idCustomerStock(i), series(i), num(i), spec(i)), 'nodoc' IF imported(i);

idSku 'Код товара'= DATA LOCAL STRING[100](INTEGER);

quantity 'Количество' = DATA LOCAL NUMERIC[16,5](INTEGER);
price 'Цена' = DATA LOCAL NUMERIC[16,4](INTEGER);
sum 'Цена' = DATA LOCAL NUMERIC[18,4](INTEGER);
retailPrice 'Цена' = DATA LOCAL NUMERIC[19,4](INTEGER);
vat 'Ставка НДС поставщика' = DATA LOCAL NUMERIC[10,5](INTEGER);

skipSetContractSku(Purchase.UserInvoice i) += idOperation(i) == 'initial';

deleteInvoiceDetails 'Удалять строки, которых нет в импорте' = DATA BOOLEAN ();

importInit 'Импорт остатков' ()  {
        
    EXTERNAL SQL connectionString() EXEC replace(scriptImportInit(), 'STOCK_LIST', stocksImport()) TO file;
        
    IMPORT TABLE FROM file() TO idCustomerStockInt, idSku, num, series, spec, idSupplierInt, vat, price, quantity, retailPrice, date;
       
    
    idSupplier(INTEGER r) <- OVERRIDE ISTRING[100] (idSupplierInt(r)), 'nosup' WHERE imported(r);
    idCustomerStock(INTEGER r) <- ISTRING[100] (idCustomerStockInt(r)) WHERE imported(r);
    date(INTEGER r) <- DATETIME (2018_01_01) WHERE imported(r) AND NOT date(r);
    retailPrice(INTEGER r) <- NULL WHERE imported(r) AND stock(ISTRING[100] (idCustomerStockInt(r))) IS Warehouse;
    
    LOCAL supplier = LegalEntity(INTEGER);
    supplier(INTEGER r) <- legalEntity(idSupplier(r)) WHERE imported(r); 

    LOCAL incl =  BOOLEAN (Purchase.UserInvoiceDetail);
    
    //шапки
    FOR [GROUP SUM 1 BY  idBal(INTEGER r)](ISTRING[100] id) AND NOT Purchase.userInvoice(id) DO NEW i = Purchase.UserInvoice {
        id(i) <- id;
    }
    FOR INTEGER r == [GROUP MIN INTEGER ir BY idBal(ir)](ISTRING[100] id) AND Purchase.UserInvoice i == Purchase.userInvoice(id) DO {
        
        supplier(i) <- OVERRIDE supplier(r), legalEntity(stock(idCustomerStock(r)));
        supplierStock(i) <- IF supplier(r) THEN minStock(supplier(r)) ELSE stock(idCustomerStock(r));
        customer(i) <- legalEntity(stock(idCustomerStock(r)));
        customerStock(i) <- stock(idCustomerStock(r));
        number(i) <- num(r);
        date(i) <- DATE (date(r));
        time(i) <- 00:00;
        isPosted(i) <- TRUE;
        operation(i) <- Purchase.operation('initial');
        createShipment(i) <- createShipment(Purchase.operation('initial')); 
        createPricing(i) <- createPricing(Purchase.operation('initial'));
        showManufacturingPrice(i) <- TRUE;
 //       id(i) <- CONCAT '', series(r), num(r);
        isClosed(i) <- TRUE;
    }
        
    //строки
    FOR imported(INTEGER r) AND NOT Purchase.userInvoiceDetail(idDetail(r)) NEW d = Purchase.UserInvoiceDetail DO {
        id(d) <- idDetail(r);
    }
        
    FOR Purchase.UserInvoiceDetail d == Purchase.userInvoiceDetail(idDetail(INTEGER r)) INLINE DO {        
        userInvoice(d) <- Purchase.userInvoice(idBal(r));
        sku(d) <- sku(idSku(r));
        quantity(d) <- quantity(r);
        shipmentQuantity(d) <- quantity(r);
        VAT(d) <- valueCurrentVAT(defaultCountry(), vat(r)); 
        valueVAT(d) <- vat(r);
        retailVAT(d) <- VAT(sku(idSku(r)));
        valueRetailVAT(d) <- valueVAT(sku(idSku(r)));
        price(d) <- NUMERIC[16,2](round2(price(r)));
        retailPrice(d) <- NUMERIC[16,2](round2(retailPrice(r)));
        shipmentPrice(d) <- NUMERIC[16,2](round2(OVERRIDE retailPrice(r), price(r)));
        manufacturingPrice(d) <- NUMERIC[16,2](price(r));
        incl(d) <- TRUE;
        dataIndex(d) <- spec(r);
 //       id(d) <- CONCAT '~',(CONCAT '',series(r), num(r));
    }
        
    FOR [GROUP SUM 1 IF imported(INTEGER in) BY idCustomerStock(in)](id(Stock st)) DO {
        
        IF NOT  deleteInvoiceDetails() THEN {
            quantity(Purchase.UserInvoiceDetail d) <- 0.0 WHERE operation(d) == Purchase.operation('initial') AND st = customerStock(d) AND NOT incl(d);
            shipmentQuantity(Purchase.UserInvoiceDetail d) <- 0.0 WHERE operation(d) == Purchase.operation('initial') AND st = customerStock(d) AND NOT incl(d);
            shipmentSum(Purchase.UserInvoiceDetail d) <- 0.0 WHERE operation(d) == Purchase.operation('initial') AND st = customerStock(d) AND NOT incl(d); 
        }
        ELSE DELETE Purchase.UserInvoiceDetail d WHERE operation(d) == Purchase.operation('initial') AND st = customerStock(d) AND NOT incl(d);    
    } 
        
    overDisableDocumentLog() <- TRUE;
    IF useConstraint() THEN {
        setNoCancelInTransaction();             
    }     
    
    APPLY; 
} 

EXTEND FORM integrationData PROPERTIES () scriptImportInit, useConstraint, importInit, disableDocumentLog, deleteInvoiceDetails;
DESIGN integrationData {
    supermag {
        MOVE PROPERTY (scriptImportInit());
        MOVE PROPERTY (useConstraint());
        MOVE PROPERTY (importInit());
        MOVE PROPERTY (disableDocumentLog());
        MOVE PROPERTY (deleteInvoiceDetails());
    }
}

importInitTest 'Импорт остатков' ()  {
        
    EXTERNAL SQL connectionString() EXEC replace(scriptImportInit(), 'STOCK_LIST', stocksImport()) TO file;
        
    IMPORT TABLE FROM file() TO idCustomerStockInt, idSku, num, series, spec, idSupplierInt, vat, price, quantity, retailPrice, date;      

    LOCAL sumImport = NUMERIC[18,4] ();
    sumImport() <- GROUP SUM (price(INTEGER i) * quantity(i));      
    MESSAGE sumImport(); 
} 




//-------------------------------------------------------------------------------------------------------------------сверка остатков
dateCheckBalance 'Дата сверки' = DATA DATE ();
synchronizeBalance 'Привести остатки к данным Супермага' = DATA BOOLEAN ();

hostBalance 'Хост для сверки остатков' = DATA LOCAL ISTRING[100]();
    
checkBalance 'Сверить остатки' () {
    
    LOCAL idItem = ISTRING[50](INTEGER);
    LOCAL idStock = INTEGER (INTEGER);
    LOCAL quantity = NUMERIC[19,4](INTEGER);
    
    EXTERNAL SQL 'jdbc:oracle:thin:' + login() + '/' + password() + '@//'+ (OVERRIDE hostBalance(), host()) + '/' + base() 
            EXEC 'SELECT ARTICLE, STORELOC, CAST(QUANTITY AS numeric(16,4)) FROM Supermag.SVGOODSWITHOPER WHERE STORELOC IN (' + stocksImport() + ')' TO file;
     
    IMPORT TABLE FROM file() TO idStock, idItem, quantity;
    
    LOCAL balanceB = NUMERIC[16,5](Sku, Stock);
    LOCAL balanceS = NUMERIC[16,5](Sku, Stock);
    
    balanceB(Sku sk, Stock st) <-  balanceB(sk, st, dateCheckBalance()) WHERE startDate(st) <= currentDateTime() AND NOT endDate(st) < currentDateTime();
    balanceS(Sku sk, Stock st) <-  [GROUP MAX quantity(INTEGER i) BY item(idItem(i)), stock(TEXT (idStock(i)))](sk, st);
    
    FOR (balanceB(Sku sk, Stock st) OR balanceS(sk, st)) AND NOT (OVERRIDE balanceB(sk, st), 0.0) == balanceS(sk, st) DO {
        logToFile('checkBalance', CONCAT ' ', toDateDDMMYY(dateCheckBalance()), 'Товар: ' + id(sk) +  ' - ' + nameSkuGroup(sk) + ' / ' + name(sk), 'Склад: ' + id(st), 'Остаток (фьюжн): ' + balanceB(sk, st), 'Остаток (супермаг): ' + balanceS(sk, st));
    }
    
    IF synchronizeBalance() THEN {
    
        FOR synchronizeBalance() AND [GROUP SUM 1 BY stock(TEXT (idStock(INTEGER i)))](Stock st) AND NOT Purchase.userInvoice('equal_balance_' + id(st)) DO NEW i = Purchase.UserInvoice {
            id(i) <- 'equal_balance_' + id(st);
            operation(i) <- Purchase.operation('initial');
            customer(i) <- legalEntity(st);
            customerStock(i) <- st;
            isPosted(i) <- TRUE;
            date(i) <- 2010_01_01;
        }
        
        FOR (balanceB(Sku sk, Stock st) OR balanceS(sk, st)) AND NOT (OVERRIDE balanceB(sk, st), 0.0) == balanceS(sk, st) 
            AND NOT [GROUP MAX Purchase.UserInvoiceDetail dd BY Purchase.userInvoice(dd), sku(dd)](Purchase.userInvoice('equal_balance'), sk) DO NEW d = Purchase.UserInvoiceDetail {
            userInvoice(d) <- Purchase.userInvoice('equal_balance_' + id(st));
            sku(d) <- sk;
        }
            
        FOR (balanceB(Sku sk, Stock st) OR balanceS(sk, st)) AND NOT (OVERRIDE balanceB(sk, st), 0.0) == balanceS(sk, st) 
            AND Purchase.UserInvoiceDetail d == [GROUP MAX Purchase.UserInvoiceDetail dd BY Purchase.userInvoice(dd), sku(dd)](Purchase.userInvoice('equal_balance_' + id(st)), sk) DO {
            
            quantity(d) <- quantity(d) (+) balanceS(sk, st) (-) balanceB(sk, st);
        }
        
        APPLY;
    }
}

EXTEND FORM integrationData PROPERTIES () dateCheckBalance, synchronizeBalance, checkBalance;
DESIGN integrationData {
    supermag {
        MOVE PROPERTY (dateCheckBalance());
        MOVE PROPERTY (synchronizeBalance());
        MOVE PROPERTY (checkBalance());
    }
}


idStock = DATA LOCAL INTEGER (INTEGER);
numeric = DATA LOCAL NUMERIC[14,3] (INTEGER);

overImportShelfReserve ABSTRACT LIST();

//importShelfReserve 'Импорт полки' () {
//        
//    LOCAL file = FILE ();
//    EXTERNAL SQL connectionString() EXEC 'SELECT ARTICLE, STORELOC, SHOWLEVEL FROM Supermag.smstocklevels' TO file;
//    
//    IMPORT TABLE FROM file() TO idItem, idStock, numeric;
//    
//    overImportShelfReserve();
//    
//    APPLY;
//}
//
//overImportFillRateShelf ABSTRACT LIST();
//overImportFillRateAps ABSTRACT LIST();
//
//importFillRate 'Импорт заполненности' () {
//        
//    EXTERNAL SQL connectionString() 
//        EXEC 'SELECT STORELOC, PROPVAL FROM Supermag.smstoreproperties  WHERE PROPID = \'k_showlevel\'' TO file;
//    
//    IMPORT TABLE FROM file() TO idStock, value;
//    
//    overImportFillRateShelf();
//    
//    EXTERNAL SQL connectionString() 
//        EXEC 'SELECT STORELOC, PROPVAL FROM Supermag.smstoreproperties  WHERE PROPID = \'k_showrequest\'' TO file;
//    
//    IMPORT TABLE FROM file() TO idStock, value;
//    
//    overImportFillRateAps();
//    
//    APPLY;
//}
//
//overImportBufferAps ABSTRACT LIST();
//
//importBufferAps 'Импорт ДМП' () {
//    EXTERNAL SQL connectionString() 
//        EXEC 'SELECT ARTICLE, STORELOC, SHOWREQUEST FROM Supermag.smstocklevels WHERE SHOWREQUEST > 0' TO file;
//    
//    IMPORT TABLE FROM file() TO idItem, idStock, numeric;
//    
//    overImportBufferAps();
//    
//    APPLY;
//}
//
//overImportPlanTurnover ABSTRACT LIST();
//
//idItemGroup = DATA LOCAL INTEGER (INTEGER);
//    
//importPlanTurnover 'Импорт плановой оборачиваемости' () {
//    EXTERNAL SQL connectionString() 
//        EXEC 'SELECT CLASSID, TURNOVER FROM Supermag.AMCLASSTURNOVER' TO file;
//    
//    IMPORT TABLE FROM file() TO idItemGroup, numeric;
//    
//    overImportPlanTurnover();
//    
//    APPLY;
//}
//
//overImportBufferApsAdDocs ABSTRACT LIST();
//overImportBufferApsAdStocks ABSTRACT LIST();
//overImportBufferApsAdQuantity ABSTRACT LIST();
//
//importBufferApsAd 'Импорт рекламных кампаний' () {
//        
//    EXTERNAL SQL connectionString() 
//        EXEC 'SELECT ID, STARTDATE, ENDDATE FROM SuperMag.SVDocNoPricePA' TO file;
//    
//    IMPORT TABLE FROM file() TO idDoc, dateFrom, dateTo;
//    
//    overImportBufferApsAdDocs();
//    
//    EXTERNAL SQL connectionString() 
//        EXEC 'SELECT ID, LOCATIONID FROM Supermag.SMPromoLocations' TO file;
//    
//    IMPORT TABLE FROM file() TO idDoc, idStock;
//    
//    overImportBufferApsAdStocks();
//    
//    EXTERNAL SQL connectionString() 
//        EXEC 'select DOCID, ARTICLE, QUANTITY from Supermag.SVItemsPA' TO file;
//    
//    IMPORT TABLE FROM file() TO idDoc, idItem, numeric;
//    
//    overImportBufferApsAdQuantity();
//    
//    APPLY;
//}
//
//EXTEND FORM integrationData PROPERTIES () importShelfReserve, importFillRate, importBufferAps, importPlanTurnover, importBufferApsAd;

userShipment (Stock st) = GROUP MAX Purchase.UserShipment s IF id(s) == ('init_' + id(customerStock(s))) BY customerStock(s);
userShipmentDetail (Stock st, Sku sk) = GROUP MAX Purchase.UserShipmentDetail d IF userShipment(d) == userShipment(st) BY sku(d);

importBalanceShipment 'Импорт остатков (поставки)' () {
    
    LOCAL balance = NUMERIC[16,4] (INTEGER);
    
    LOCAL file = FILE ();
    
    EXTERNAL SQL 'jdbc:oracle:thin:' + login() + '/' + password() + '@//'+ (OVERRIDE hostBalance(), host()) + '/' + base() 
        EXEC 'SELECT ARTICLE, STORELOC, CAST(QUANTITY AS numeric(16,4)) FROM Supermag.SVGOODSWITHOPER WHERE STORELOC IN (' + stocksImport() + ')' TO file;
        
    IMPORT TABLE FROM file() TO idItem, idStock, balance;
    
    FOR INTEGER i = [GROUP MIN INTEGER ii IF NOT userShipment(stock(TEXT (idStock(ii)))) BY stock(TEXT (idStock(ii)))](Stock st) DO NEW s = Purchase.UserShipment {
        id(s) <- 'init_' + id(stock(TEXT (idStock(i))));
        operation(s) <- Purchase.operation('initial');
        customerStock(s) <- stock(TEXT (idStock(i)));
        customer(s) <- legalEntity(stock(TEXT (idStock(i))));
        isPosted(s) <- TRUE;
        date(s) <- 2010_01_01;
    }
    
    FOR [GROUP SUM 1 IF imported(INTEGER i) AND NOT userShipmentDetail(stock(TEXT (idStock(i))), item(idItem(i))) AND NOT balance(i) == 0 
        BY stock(TEXT (idStock(i))), item(idItem(i))](Stock st, Item sk) DO NEW d = Purchase.UserShipmentDetail {
        userShipment(d) <- userShipment(st);
        sku(d) <- sk;
    }
    
    FOR Purchase.UserShipmentDetail d == userShipmentDetail(stock(TEXT (idStock(INTEGER i))), item(idItem(i))) DO {
        quantity(d) <- balance(i);
    }
    
    FOR Purchase.UserShipmentDetail d  == userShipmentDetail(Stock st, Sku sk) AND (OVERRIDE quantity(d), 0) == 0 DO {
        DELETE d;
    }
    
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importBalanceShipment();
DESIGN integrationData {
    supermag {
        MOVE PROPERTY (importBalanceShipment());
    }
}


importReserveDays 'Импорт страхового запаса в днях' () {   
    LOCAL file = FILE ();
    EXTERNAL SQL 'jdbc:oracle:thin:' + login() + '/' + password() + '@//'+ (OVERRIDE hostBalance(), host()) + '/' + base() 
        EXEC 'SELECT ARTICLE, STORELOC, MINDAYS FROM Supermag.SMStockLevels WHERE STORELOC IN(' + stocksImport() + ')' TO file;
        
    IMPORT TABLE FROM file() TO idItem, idStock, quantity;
    
    FOR Item sk = sku(idItem(INTEGER i)) AND Stock st = stock(TEXT (idStock(i))) DO {
        dataStockReserveDays(st, sk) <- NUMERIC[14,3](quantity(i));
    }
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importReserveDays();
DESIGN integrationData {
    supermag {
        MOVE PROPERTY (importReserveDays());
    }
}

//dateFromPurchase 'Дата перемещения' = DATA DATE (Store);
//
//EXTEND FORM stores PROPERTIES READONLYIF isReadonly() dateFromPurchase(s);
//EXTEND FORM store PROPERTIES dateFromPurchase(s);
//
//DESIGN store {
//    headerExtraParams {
//        MOVE PROPERTY (dateFromPurchase(s));
//    }
//}

@defineLogRotate(checkBalance, 5, weekly);
@defineLogRotate(importSupermag, 5, weekly);
