MODULE SupermagInventory;

REQUIRE SupermagSettings, SupermagExportForms, Utils, TaxItem, Inventory, PricingSum, PriceListStore;

NAMESPACE Inventory;

@settingOperationSupermag(Inventory);

code3Supermag (Inventory.Operation op) = (OVERRIDE (CONCAT '~',getWord(docTypeSupermag[Inventory.Operation](op),';',3), getWord(opcodeSupermag[Inventory.Operation](op),';',3), getWord(useropSupermag[Inventory.Operation](op),';',3)), id[Inventory.Operation](op));  
code4Supermag (Inventory.Operation op) = (OVERRIDE (CONCAT '~',getWord(docTypeSupermag[Inventory.Operation](op),';',4), getWord(opcodeSupermag[Inventory.Operation](op),';',4), getWord(useropSupermag[Inventory.Operation](op),';',4)), id[Inventory.Operation](op));  
operation3Supermag (STRING code) = GROUP MAX Inventory.Operation op IF op IS Inventory.Operation BY code3Supermag[Inventory.Operation](op);
operation4Supermag (STRING code) = GROUP MAX Inventory.Operation op IF op IS Inventory.Operation BY code4Supermag[Inventory.Operation](op);

bornin = DATA STRING[100] (Inventory);

dateTimeChange = DATA DATETIME (CollationSheet);
bornin = DATA STRING[100] (CollationSheet);
dateTimeChange[StockDocumentLedger](CollationSheet doc) += dateTimeChange(doc);
bornin[StockDocumentLedger](CollationSheet doc) += bornin(doc);

exportInventory 'Экспорт в Супермаг' ABSTRACT LIST (Inventory);

EXTEND FORM inventories
    PROPERTIES (in) exportInventory TOOLBAR 
;
DESIGN inventories {
    wor{
        NEW mag {
            caption = 'Супермаг';
            MOVE PROPERTY (exportInventory(in));
        }        
    }
}

//disparityApply 'Сохранить ' (Disparity doc) {
//    formApply();
//    IF series(doc) THEN { number(doc) <- seriesNumber(doc); series(doc) <- NULL;} 
//    exportDisparity(doc);
//}
//
//EXTEND FORM disparity  PROPERTIES disparityApply(dis) TOOLBAR;
//
//DESIGN disparity {
//    TOOLBARRIGHT {
//        MOVE PROPERTY (disparityApply(dis)) BEFORE PROPERTY (formClose()) { imagePath = 'apply.png';} 
//        PROPERTY (formOk()) { hide = TRUE; }
//        PROPERTY (formApply()) { hide = TRUE; }
//    }
//}
overListInventory ABSTRACT LIST (Inventory, DocMain); 
stock(Inventory inv) = GROUP MAX Stock stock IF include(stock, inv);

exportListInventory 'Экспорт в супермаг' (Inventory doc) {
    LOCAL NESTED dt = DATETIME();
    IF getWord(docTypeSupermag(operation(doc)),';',1) = 'IL' THEN {
            inc(DocMain expmain) <- NULL;
            DELETE DocDetail expDet WHERE expDet IS DocDetail;        
            DELETE DocMain expmain WHERE expmain IS DocMain;
            NEW expMain = DocMain {
                inc(expMain) <- TRUE;          
                doctype(expMain) <- STRING[10] (getWord(docTypeSupermag(operation(doc)),';',1));
                id(doc) <- CONCAT '', doctype(expMain), seriesNumber(doc);                               
                id(expMain) <- id(doc); 
                docid(expMain) <- STRING[50](seriesNumber(doc));            
                bornin(expMain) <- OVERRIDE bornin(doc), baseIDSupermag();
                opcode(expMain) <- STRING[10] (getWord(opcodeSupermag(operation(doc)),';',1));
                userop(expMain) <- STRING[10] (getWord(useropSupermag(operation(doc)),';',1));
                creatdate(expMain) <- dateTime(doc);                
                docstate(expMain) <- CASE WHEN isPosted(doc) THEN 3
                                          WHEN isClosed(doc) THEN 0 ELSE 1;
                priceRoundMode(expMain) <- 0; 
                location(expMain)  <- id(stock(doc));     
                ourselfclient(expMain) <- id(legalEntity(stock(doc))); 
                startdate(expMain) <- OVERRIDE timeFrom(doc), dateTime(doc);
                enddate(expMain) <- OVERRIDE timeTo(doc), dateTime(doc);
                orderno(expMain) <- STRING[50](name(doc));
                priceType(expMain) <- idSupermagPriceType(stock(doc)); //STRING[10](replace( id(retailCalcPriceListType(stock(doc))),'C',''));                                                             
//                FOR listInventory(PageInventoryDetail docd) = doc
//                    DO NEW expDet = DocDetail {
////                        id(docd) <- (CONCAT '~',id(doc),index(docd));
//                        index(expDet) <- index[PageInventoryDetail](docd);
//                        docMain(expDet) <- expMain;
//                        id(expDet) <- (CONCAT '~',id(expMain),index(expDet));
//                        skuId(expDet) <- id(sku(docd));                                                                           
//                        quantity(expDet) <- OVERRIDE quantity(docd), 0;
//                        awaitquantity(expDet) <- OVERRIDE NUMERIC[14,3](accountBalanceQuantity(sku(docd),stock(docd))), 0;
//                        actualquantity(expDet) <- OVERRIDE NUMERIC[14,3](currentBalance(sku(docd),stock(docd))), 0; 
//                        priceWithTax(expDet) <- OVERRIDE price(docd), 0;
//                        priceNoTax(expDet) <- priceWithTax(expDet);
//                        priceCurr(expDet) <- round(priceWithTax(expDet)/curRate(expMain),4);
//                        sumWithTax(expDet) <- OVERRIDE abs(sum(docd)), 0;
//                        sumNoTax(expDet) <- sumWithTax(expDet);
//                        sumCurr(expDet) <- round(sumWithTax(expDet)/curRate(expMain),4);
//                        awaittotalprice(expDet) <- priceWithTax(expDet);
//                        awaittotalpricecur(expDet) <- priceCurr(expDet);
//                }        

                overListInventory(doc, expMain);
                
                sumWithTax(expMain) <- OVERRIDE  (GROUP SUM abs(sumWithTax(DocDetail expDet)) IF docMain(expDet) = expMain), 0;                
                sumCurr(expMain) <- OVERRIDE (GROUP SUM sumCurr(DocDetail expDet) IF docMain(expDet) = expMain), 0; 
                countSpec(expMain) <- GROUP SUM 1 IF docMain(DocDetail expDet) = expMain;
                
                dt () <- currentDateTime();                        
                TRY {                
                      EXPORT exportIL XML TO System.exportFile;                 
                } CATCH logToFile('supermag', CONCAT '\n', 'Изменение остатков ' + id(expMain), 'Ошибка формы' ,'file://' + exportDirectorySupermag() + '/' + doctype(expMain) + '_' + STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
                
                TRY { 
                IF countSpec(expMain) > 0 THEN {          
                    WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
                    WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/COPY/' + doctype(expMain) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
                }                
                } CATCH logToFile('supermag', CONCAT '\n', 'Изменение остатков ' + id(expMain), 'Ошибка записи в файл' ,'file://' + exportDirectorySupermag() + '/' + doctype(expMain) + '_' + STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());                
            }      
    }       
    inc(DocMain expmain) <- NULL;
    APPLY;
}

index(OutInventorySkuDetail d) = PARTITION SUM 1 ORDER d BY collationSheet(d);
index(InInventorySkuDetail d) = PARTITION SUM 1 ORDER d BY collationSheet(d);
index(OutInventoryBatchDetail d) = PARTITION SUM 1 ORDER d BY collationSheet(d);
index(InInventoryBatchDetail d) = PARTITION SUM 1 ORDER d BY collationSheet(d);
index(InventorySkuDetail d) = PARTITION SUM 1 ORDER d BY collationSheet(d); 
index 'Номер строки' (CollationSheet doc, Sku sku) = PARTITION SUM 1 IF include(doc, sku) ORDER name(sku) BY doc;

exportCollationSheet 'Экспорт в супермаг' (CollationSheet doc) {
    LOCAL NESTED dt = DATETIME();
    IF getWord(docTypeSupermag(operation(doc)),';',2) = 'RL' THEN {
            inc(DocMain expmain) <- NULL;
            DELETE DocDetail expDet WHERE expDet IS DocDetail;        
            DELETE DocMain expmain WHERE expmain IS DocMain;
            NEW expMain = DocMain {
                inc(expMain) <- TRUE;          
                doctype(expMain) <- STRING[10] (getWord(docTypeSupermag(operation(doc)),';',2));
                id(doc) <- CONCAT '', doctype(expMain), name(doc);                               
                id(expMain) <- id(doc); 
                docid(expMain) <- name(doc);            
                bornin(expMain) <- OVERRIDE bornin(doc), baseIDSupermag();
                opcode(expMain) <- STRING[10] (getWord(opcodeSupermag(operation(doc)),';',2));
                userop(expMain) <- STRING[10] (getWord(useropSupermag(operation(doc)),';',2));
                creatdate(expMain) <- dateTime(doc);                
                docstate(expMain) <- CASE WHEN isPosted(doc) THEN 2
                                          WHEN isClosed(doc) THEN 0;
                priceRoundMode(expMain) <- 0; 
                location(expMain)  <- id(stock(doc));     
                ourselfclient(expMain) <- id(legalEntity(stock(doc))); 
                startdate(expMain) <- OVERRIDE timeFrom(doc), dateTime(doc);
                enddate(expMain) <- OVERRIDE timeTo(doc), dateTime(doc);
                orderno(expMain) <- STRING[50](name(inventory(doc)));
                priceType(expMain) <- idSupermagPriceType(stock(doc)); //STRING[10](replace( id(retailCalcPriceListType(stock(doc))),'C',''));       

                FOR include(doc, Sku sku) 
                    DO NEW expDet = DocDetail {
//                        id(docd) <- (CONCAT '~',id(doc),index(docd));
                        index(expDet) <- index(doc,sku);
                        docMain(expDet) <- expMain;
                        id(expDet) <- (CONCAT '~',id(expMain),index(expDet));
                        skuId(expDet) <- id(sku);                                                                           
                        quantity(expDet) <- OVERRIDE quantityPageInventoryDetail(doc,sku), 0;
                        awaitquantity(expDet) <- OVERRIDE NUMERIC[14,3](quantityBalance(doc,sku)), 0;
                        actualquantity(expDet) <- awaitquantity(expDet); 
                        priceWithTax(expDet) <- pricePageInventoryDetail(doc, sku);
                        sumWithTax(expDet) <- OVERRIDE sumPageInventoryDetail(doc, sku), 0;
                        priceNoTax(expDet) <- priceWithTax(expDet);
                        sumNoTax(expDet) <- sumWithTax(expDet);
                        priceCurr(expDet) <- round(priceWithTax(expDet)/curRate(expMain),4);
                        sumCurr(expDet) <- round(sumWithTax(expDet)/curRate(expMain),4);
                        awaittotalprice(expDet) <- OVERRIDE sumBalance(doc,sku), 0;
                        awaittotalpricecur(expDet) <- round(awaittotalprice(expDet)/curRate(expMain),4);
                }        

                sumWithTax(expMain) <- 0; //GROUP SUM abs(sumWithTax(DocDetail expDet)) IF docMain(expDet) = expMain;                
                sumCurr(expMain) <- 0; //GROUP SUM sumCurr(DocDetail expDet) IF docMain(expDet) = expMain; 
                countSpec(expMain) <- GROUP SUM 1 IF docMain(DocDetail expDet) = expMain;
                
                dt () <- currentDateTime();                        
                TRY {                
                      EXPORT exportRL XML TO System.exportFile;                 
                } CATCH logToFile('supermag', CONCAT '\n', 'Изменение остатков ' + id(expMain), 'Ошибка формы' ,'file://' + exportDirectorySupermag() + '/' + doctype(expMain) + '_' + STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
                
                TRY { 
                IF countSpec(expMain) > 0 THEN {          
                    WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
                    WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/COPY/' + doctype(expMain) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
                }                
                } CATCH logToFile('supermag', CONCAT '\n', 'Изменение остатков ' + id(expMain), 'Ошибка записи в файл' ,'file://' + exportDirectorySupermag() + '/' + doctype(expMain) + '_' + STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());                
            }      
    }       
    inc(DocMain expmain) <- NULL;
    APPLY;
}

exportActs 'Экспорт в супермаг' (CollationSheet doc) {
    LOCAL NESTED dt = DATETIME();
    FOR iterateDown(INTEGER n, wordCount(docTypeSupermag(operation(doc)),';'), 3) DO {
            inc(DocMain expmain) <- NULL;
            DELETE DocDetail expDet WHERE expDet IS DocDetail;        
            DELETE DocMain expmain WHERE expmain IS DocMain;
            NEW expMain = DocMain {
                inc(expMain) <- TRUE;          
                doctype(expMain) <- STRING[10] (getWord(docTypeSupermag(operation(doc)),';',n));
                id(doc) <- CONCAT '', 'RL', name(doc);                               
                id(expMain) <-  CONCAT '', doctype(expMain) , name(doc); 
                docid(expMain) <- name(doc);            
                bornin(expMain) <- OVERRIDE bornin(doc), baseIDSupermag();
                opcode(expMain) <- STRING[10] (getWord(opcodeSupermag(operation(doc)),';',n));
                userop(expMain) <- STRING[10] (getWord(useropSupermag(operation(doc)),';',n));
                creatdate(expMain) <- dateTime(doc);                
                docstate(expMain) <- CASE WHEN isPosted(doc) AND (doctype(expMain) = 'FA' OR doctype(expMain) = 'LA') THEN 2
                                          WHEN isClosed(doc) THEN 0 ELSE 1;
                priceRoundMode(expMain) <- CASE WHEN (doctype(expMain) = 'FA' OR doctype(expMain) = 'LA') THEN 0 ELSE 4; 
                location(expMain)  <- id(stock(doc));     
                ourselfclient(expMain) <- id(legalEntity(stock(doc)));                                              
                FOR collationSheet(OutInventorySkuDetail docd) = doc AND (doctype(expMain) = 'LA' OR doctype(expMain) = 'WO')
                    DO NEW expDet = DocDetail {
                        index(expDet) <- index(docd);
                        docMain(expDet) <- expMain;
                        id(expDet) <- (CONCAT '~',id(expMain),index(expDet));
                        skuId(expDet) <- id(sku(docd));                                                                           
                        quantity(expDet) <- OVERRIDE abs(quantity(docd)), 0;
                        sumWithTax(expDet) <- 0;
                        sumNoTax(expDet) <- 0;
                        sumCurr(expDet) <- 0;
                }        
                
//                FOR collationSheet(OutInventoryBatchDetail docd) = doc AND (doctype(expMain) = 'LA' OR doctype(expMain) = 'WO')
//                    DO NEW expDet = DocDetail {
//                        index(expDet) <- index(docd);
//                        docMain(expDet) <- expMain;
//                        id(expDet) <- (CONCAT '~',id(expMain),index(expDet));
//                        skuId(expDet) <- id(sku(docd));                                                                           
//                        quantity(expDet) <- OVERRIDE abs(quantity(docd)), 0;
//                        sumWithTax(expDet) <- 0;
//                        sumNoTax(expDet) <- 0;
//                        sumCurr(expDet) <- 0;
//                }        
                   
                FOR collationSheet(InInventorySkuDetail docd) = doc AND (doctype(expMain) = 'FA' OR doctype(expMain) = 'WI')
                    DO NEW expDet = DocDetail {
//                        id(docd) <- (CONCAT '~',id(doc),index(docd));
                        index(expDet) <- index(docd);
                        docMain(expDet) <- expMain;
                        id(expDet) <- (CONCAT '~',id(expMain),index(expDet));
                        skuId(expDet) <- id(sku(docd));                                                                           
                        quantity(expDet) <- OVERRIDE abs(quantity(docd)), 0;
                        sumWithTax(expDet) <- 0;
                        sumNoTax(expDet) <- 0;
                        sumCurr(expDet) <- 0;
                }        

//                FOR collationSheet(InInventoryBatchDetail docd) = doc AND (doctype(expMain) = 'FA' OR doctype(expMain) = 'WI')
//                    DO NEW expDet = DocDetail {
////                        id(docd) <- (CONCAT '~',id(doc),index(docd));
//                        index(expDet) <- index(docd);
//                        docMain(expDet) <- expMain;
//                        id(expDet) <- (CONCAT '~',id(expMain),index(expDet));
//                        skuId(expDet) <- id(sku(docd));                                                                           
//                        quantity(expDet) <- OVERRIDE abs(quantity(docd)), 0;
//                        sumWithTax(expDet) <- 0;
//                        sumNoTax(expDet) <- 0;
//                        sumCurr(expDet) <- 0;
//                }        

                sumWithTax(expMain) <- 0; // GROUP SUM abs(sumWithTax(DocDetail expDet)) IF docMain(expDet) = expMain;                
                sumCurr(expMain) <- 0; //GROUP SUM sumCurr(DocDetail expDet) IF docMain(expDet) = expMain; 
                countSpec(expMain) <- GROUP SUM 1 IF docMain(DocDetail expDet) = expMain;
                
                dt () <- currentDateTime();                        
                TRY {                
                    CASE WHEN doctype(expMain) = 'FA' THEN EXPORT exportFA XML TO System.exportFile;
                         WHEN doctype(expMain) = 'LA' THEN EXPORT exportLA XML TO System.exportFile;
                } CATCH logToFile('supermag', CONCAT '\n', 'Изменение остатков ' + id(expMain), 'Ошибка формы' ,'file://' + exportDirectorySupermag() + '/' + doctype(expMain) + '_' + STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
                
                TRY { 
                IF countSpec(expMain) > 0 THEN {          
                    WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
                    WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/COPY/' + doctype(expMain) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
                }                
                } CATCH logToFile('supermag', CONCAT '\n', 'Изменение остатков ' + id(expMain), 'Ошибка записи в файл' ,'file://' + exportDirectorySupermag() + '/' + doctype(expMain) + '_' + STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());                
            }      
    }       
    inc(DocMain expmain) <- NULL;
    APPLY;
}


exportInvoices 'Экспорт в супермаг' (CollationSheet doc) {
    LOCAL NESTED dt = DATETIME();
    FOR iterateDown(INTEGER n, wordCount(docTypeSupermag(operation(doc)),';'), 3) DO {
            inc(DocMain expmain) <- NULL;
            DELETE DocDetail expDet WHERE expDet IS DocDetail;        
            DELETE DocMain expmain WHERE expmain IS DocMain;
            NEW expMain = DocMain {
                inc(expMain) <- TRUE;          
                doctype(expMain) <- STRING[10] (getWord(docTypeSupermag(operation(doc)),';',n));
                id(doc) <- CONCAT '', 'RL', name(doc);                               
                id(expMain) <-  CONCAT '', doctype(expMain) , name(doc); 
                docid(expMain) <- name(doc);            
                bornin(expMain) <- OVERRIDE bornin(doc), baseIDSupermag();
                opcode(expMain) <- STRING[10] (getWord(opcodeSupermag(operation(doc)),';',n));
                userop(expMain) <- STRING[10] (getWord(useropSupermag(operation(doc)),';',n));
                creatdate(expMain) <- dateTime(doc);                
                docstate(expMain) <- CASE WHEN isPosted(doc) THEN 2
                                          WHEN isClosed(doc) THEN 0 ELSE 1;
                priceRoundMode(expMain) <- 2; 
                location(expMain)  <- id(stock(doc)); 
                locationTo(expMain)  <- id(stock(doc)); 
                locationFrom(expMain)  <- id(stock(doc)); 
                clientIndex(expMain) <- id(contragentSupermag(stockGroup(stock(doc))));    
                ourselfclient(expMain) <- id(legalEntity(stock(doc))); 
                                                             
                FOR collationSheet(OutInventorySkuDetail docd) = doc AND doctype(expMain) = 'WO'
                    DO NEW expDet = DocDetail {
//                        id(docd) <- (CONCAT '~',id(doc),index(docd));
                        index(expDet) <- index(docd);
                        docMain(expDet) <- expMain;
                        id(expDet) <- (CONCAT '~',id(expMain),index(expDet));
                        skuId(expDet) <- id(sku(docd));                                                                           
                        quantity(expDet) <- OVERRIDE abs(quantity(docd)), 0;
                        blankquantity(expDet) <- quantity(expDet);
                        valueTax(expDet) <-  valueVAT(sku(docd));
                        priceNoTax(expDet) <- prevPriceB[PriceListType,Sku,Stock,DATETIME](SystemLedgerPriceListType.supplierPricingPriceListType, sku(docd), stock(doc), dateTime(doc));
                        priceWithTax(expDet) <- NUMERIC[18,4] ( abs(round( priceNoTax(expDet) * (1 + valueVAT(sku(docd))/100),4)));
                        priceCurr(expDet) <- round(priceWithTax(expDet)/curRate(expMain),4);
                        sumWithTax(expDet) <- round2(quantity(expDet) * priceWithTax(expDet));
                        sumNoTax(expDet) <- round2(quantity(expDet) * priceNoTax(expDet));
                        sumTax(expDet) <- sumWithTax(expDet)  - sumNoTax(expDet);
                        sumCurr(expDet) <- round(sumWithTax(expDet)/curRate(expMain),4);
                        priceRetail(expDet) <- priceBalance(doc,sku(docd));
                        priceManufacturer(expDet) <- priceNoTax(expDet);
                }        
                
                FOR collationSheet(OutInventoryBatchDetail docd) = doc AND doctype(expMain) = 'WO'
                    DO NEW expDet = DocDetail {
//                        id(docd) <- (CONCAT '~',id(doc),index(docd));
                        index(expDet) <- index(docd);
                        docMain(expDet) <- expMain;
                        id(expDet) <- (CONCAT '~',id(expMain),index(expDet));
                        skuId(expDet) <- id(sku(docd));                                                                           
                        quantity(expDet) <- OVERRIDE abs(quantity(docd)), 0;
                        blankquantity(expDet) <- quantity(expDet);
                        valueTax(expDet) <-  valueVAT(sku(docd));
                        priceNoTax(expDet) <- OVERRIDE cost(batch(docd)), 0;
                        priceWithTax(expDet) <- NUMERIC[18,4] ( abs(round( priceNoTax(expDet) * (1 + valueVAT(sku(docd))/100),4)));
                        priceCurr(expDet) <- round(priceWithTax(expDet)/curRate(expMain),4);
                        sumWithTax(expDet) <- round2(quantity(expDet) * priceWithTax(expDet));
                        sumNoTax(expDet) <- round2(quantity(expDet) * priceNoTax(expDet));
                        sumTax(expDet) <- sumWithTax(expDet)  - sumNoTax(expDet);
                        sumCurr(expDet) <- round(sumWithTax(expDet)/curRate(expMain),4);
                        priceRetail(expDet) <- priceBalance(doc,batch(docd));
                        priceManufacturer(expDet) <- priceNoTax(expDet);
                }        
                   
                FOR collationSheet(InInventorySkuDetail docd) = doc AND doctype(expMain) = 'WI'
                    DO NEW expDet = DocDetail {
//                        id(docd) <- (CONCAT '~',id(doc),index(docd));
                        index(expDet) <- index(docd);
                        docMain(expDet) <- expMain;
                        id(expDet) <- (CONCAT '~',id(expMain),index(expDet));
                        skuId(expDet) <- id(sku(docd));                                                                           
                        quantity(expDet) <- OVERRIDE abs(quantity(docd)), 0;
                        blankquantity(expDet) <- quantity(expDet);
                        valueTax(expDet) <-  valueVAT(sku(docd));
                        priceNoTax(expDet) <- OVERRIDE prevPriceB[PriceListType,Sku,Stock,DATETIME](SystemLedgerPriceListType.supplierPricingPriceListType, sku(docd), stock(doc), dateTime(doc)), 0;
                        priceWithTax(expDet) <- NUMERIC[18,4] ( abs(round( priceNoTax(expDet) * (1 + valueVAT(sku(docd))/100),4)));
                        priceCurr(expDet) <- round(priceWithTax(expDet)/curRate(expMain),4);
                        sumWithTax(expDet) <- round2(quantity(expDet) * priceWithTax(expDet));
                        sumNoTax(expDet) <- round2(quantity(expDet) * priceNoTax(expDet));
                        sumTax(expDet) <- sumWithTax(expDet)  - sumNoTax(expDet);
                        sumCurr(expDet) <- round(sumWithTax(expDet)/curRate(expMain),4);
                        priceRetail(expDet) <- priceBalance(doc,sku(docd));
                        priceManufacturer(expDet) <- priceNoTax(expDet);
                }        

                FOR collationSheet(InInventoryBatchDetail docd) = doc AND doctype(expMain) = 'WI'
                    DO NEW expDet = DocDetail {
//                        id(docd) <- (CONCAT '~',id(doc),index(docd));
                        index(expDet) <- index(docd);
                        docMain(expDet) <- expMain;
                        id(expDet) <- (CONCAT '~',id(expMain),index(expDet));
                        skuId(expDet) <- id(sku(docd));                                                                           
                        quantity(expDet) <- OVERRIDE abs(quantity(docd)), 0;
                        blankquantity(expDet) <- quantity(expDet);
                        valueTax(expDet) <-  valueVAT(sku(docd));
                        priceNoTax(expDet) <- OVERRIDE cost(batch(docd)), 0;
                        priceWithTax(expDet) <- NUMERIC[18,4] ( abs(round( priceNoTax(expDet) * (1 + valueVAT(sku(docd))/100),4)));
                        priceCurr(expDet) <- round(priceWithTax(expDet)/curRate(expMain),4);
                        sumWithTax(expDet) <- OVERRIDE abs(costSum(docd)), 0;;
                        sumNoTax(expDet) <- round2(quantity(expDet) * priceNoTax(expDet));
                        sumTax(expDet) <- sumWithTax(expDet)  - sumNoTax(expDet);
                        sumCurr(expDet) <- round(sumWithTax(expDet)/curRate(expMain),4);
                        priceRetail(expDet) <- priceBalance(doc,batch(docd));
                        priceManufacturer(expDet) <- priceNoTax(expDet);
                }        

                sumWithTax(expMain) <- GROUP SUM abs(sumWithTax(DocDetail expDet)) IF docMain(expDet) = expMain;                
                sumCurr(expMain) <- GROUP SUM sumCurr(DocDetail expDet) IF docMain(expDet) = expMain; 
                countSpec(expMain) <- GROUP SUM 1 IF docMain(DocDetail expDet) = expMain;
                
                dt () <- currentDateTime();                        
                TRY {                
                    CASE WHEN doctype(expMain) = 'WI' THEN EXPORT exportWI XML TO System.exportFile;
                         WHEN doctype(expMain) = 'WO' THEN EXPORT exportWO XML TO System.exportFile;
                } CATCH logToFile('supermag', CONCAT '\n', 'Изменение остатков ' + id(expMain), 'Ошибка формы' ,'file://' + exportDirectorySupermag() + '/' + doctype(expMain) + '_' + STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
                
                TRY { 
                IF countSpec(expMain) > 0 THEN {          
                    WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
                    WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/COPY/' + doctype(expMain) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
                }                
                } CATCH logToFile('supermag', CONCAT '\n', 'Изменение остатков ' + id(expMain), 'Ошибка записи в файл' ,'file://' + exportDirectorySupermag() + '/' + doctype(expMain) + '_' + STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());                
            }      
    }       
    inc(DocMain expmain) <- NULL;
    APPLY;
}


exportInventory (Inventory inv) + {
    //MESSAGE getWord(docTypeSupermag(operation(inv)),';',1);
    IF getWord(docTypeSupermag(operation(inv)),';',1) = 'IL' THEN {
        exportListInventory(inv);
        FOR inventory(CollationSheet cs) = inv DO {
            exportCollationSheet(cs);
//            exportInvoices(cs);//exportActs(cs);
        }
    }    
    FOR inventory(CollationSheet cs) = inv AND getWord(docTypeSupermag(operation(inv)),';',3) = 'WI' DO {
        exportInvoices(cs);
    }       
}

importInventoryStatus 'Изменение остатков' (STRING indexDoc, STRING idDoc) {
    filterSql() <- 'd.DocType = \'' + getWord(indexDoc,'~',1) + '\' AND d.id = \'' + getWord(indexDoc,'~',2) + '\''; 
    
    sqlString() <- 'Select d.ID, d.doctype, d.opcode, d.userop, UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(d.bornin)), d.docstate from Supermag.SMDocuments d WHERE ' + filterSql();    
    
    IF enableLogImport() THEN logToFile('supermag', CONCAT '\n', 'Импорт изменение остатков', sqlString());
    
    EXTERNAL SQL connectionString() EXEC sqlString() TO file;
 //   MESSAGE sqlString();
       
    IMPORT TABLE FROM file() TO docNumber, docType, operCode, userOp, bornIn, docState;
        
    FOR Inventory doc == inventory(idDoc) DO {  
        CASE WHEN docState(0) = 0 THEN {
            isPosted(doc) <- NULL;
            isClosed(doc) <- TRUE;                
        }
        WHEN docState(0) = 1 THEN {
            isPosted(doc) <- NULL;
            isClosed(doc) <- NULL;                        
        } 
        WHEN docState(0) = 2 THEN {
            isPosted(doc) <- TRUE;
//            isClosed(doc) <- NULL;;                
        } 
        WHEN docState(0) = 3 THEN {
            isPosted(doc) <- TRUE;
//            isClosed(doc) <- TRUE;        
        } 
    }

    FOR CollationSheet doc == collationSheet(idDoc) DO {  
        CASE WHEN docState(0) = 0 THEN {
            isPosted(inventory(doc)) <- NULL;
            isClosed(inventory(doc)) <- TRUE;                
        }
        WHEN docState(0) = 1 THEN {
            isPosted(inventory(doc)) <- NULL;
            isClosed(inventory(doc)) <- NULL;                        
        } 
        WHEN docState(0) = 2 THEN {
            isPosted(inventory(doc)) <- TRUE;
//            isClosed(inventory(doc)) <- NULL;;                
        } 
        WHEN docState(0) = 3 THEN {
            isPosted(inventory(doc)) <- TRUE;
//            isClosed(doc) <- TRUE;        
        } 
    }
    
    APPLY;
}

importInventories () + {
    LOCAL indexDoc = STRING ();
    LOCAL idDoc = STRING ();
    
    FOR [GROUP SUM 1 BY indexDoc(INTEGER i) IF operation1Supermag(codeOperation(i)) IS Inventory.Operation  AND bornIn(i) = baseIDSupermag()](STRING indexDoc) NOINLINE DO  {
        idDoc() <- CONCAT '', 'IL', getWord(indexDoc,'~',2);         
        indexDoc() <- indexDoc;     
        IF inventory(idDoc()) THEN
        NEWSESSION NESTED (indexDoc, idDoc){            
            importInventoryStatus(indexDoc(), idDoc());
        } 
    }
    
    FOR [GROUP SUM 1 BY indexDoc(INTEGER i) IF operation2Supermag(codeOperation(i)) IS Inventory.Operation AND bornIn(i) = baseIDSupermag()](STRING indexDoc) NOINLINE DO  {
        idDoc() <- CONCAT '', 'RL', getWord(indexDoc,'~',2);         
        indexDoc() <- indexDoc;     
        IF collationSheet(idDoc()) THEN
        NEWSESSION NESTED (indexDoc, idDoc){            
            importInventoryStatus(indexDoc(), idDoc());
        } 
    }

    FOR [GROUP SUM 1 BY indexDoc(INTEGER i) IF operation3Supermag(codeOperation(i)) IS Inventory.Operation AND bornIn(i) = baseIDSupermag()](STRING indexDoc) NOINLINE DO  {
        idDoc() <- CONCAT '', 'RL', getWord(indexDoc,'~',2);         
        indexDoc() <- indexDoc;     
        IF collationSheet(idDoc()) THEN
        NEWSESSION NESTED (indexDoc, idDoc){            
            importInventoryStatus(indexDoc(), idDoc());
        } 
    }

    FOR [GROUP SUM 1 BY indexDoc(INTEGER i) IF operation4Supermag(codeOperation(i)) IS Inventory.Operation AND bornIn(i) = baseIDSupermag()](STRING indexDoc) NOINLINE DO  {
        idDoc() <- CONCAT '', 'RL', getWord(indexDoc,'~',2);         
        indexDoc() <- indexDoc;     
        IF collationSheet(idDoc()) THEN
        NEWSESSION NESTED (indexDoc, idDoc){            
            importInventoryStatus(indexDoc(), idDoc());
        } 
    }
}
