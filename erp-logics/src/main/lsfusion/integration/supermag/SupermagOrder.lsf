MODULE SupermagOrder;

REQUIRE SupermagSettings, SupermagExportForms, PurchaseOrder, PurchaseOrderStatus, PurchaseManufacturingPrice, PurchaseSaleOrder, 
        SaleOrder, SaleOrderStatus, OrderInvoice, SupermagPurchaseInvoice, PurchaseShipment, SupermagSaleInvoice, SalePurchaseInvoiceShipment;

@settingIntegration(Purchase.UserOrder, Purchase.UserOrderDetail);
EXTEND FORM Purchase.orders PROPERTIES lastStatusSupermag(o);

//-----------------------------------------------------------------------------------------------------------заказы закупка
overImportSupplierOrder2 ABSTRACT LIST ();

useForAutoGen 'Использовать для автогенерации' = DATA STRING[1] (Purchase.Order);

importSupplierOrder 'Импорт заказов (закупка)' () {
    
    LOCAL supplyDate = DATETIME (INTEGER);
    LOCAL supplyTimeMinutes = INTEGER (INTEGER);
    LOCAL supplyTimeTillMinutes = INTEGER (INTEGER);
    
    imported(Purchase.UserOrder doc)  <- NULL IF doc IS Purchase.UserOrder;
    imported(Purchase.UserOrderDetail det)  <- NULL IF det IS Purchase.UserOrderDetail;
    
    filterSql() <- 'doc.DocType = \'OR\' AND ord.DocType = doc.DocType AND ord.ID = doc.ID AND doc.docstate IN (0, 2, 3) AND doc.location IN ('+ stocksImport() + ') AND ord.SupplyDate >= TO_DATE(\'' + toDateISO(dateFromImportDocument()) + '\',\'YYYY-MM-DD\')'; 
    IF length(numberImportDocument()) > 0 THEN filterSql() <- 'doc.DocType = \'OR\' AND ord.DocType = doc.DocType AND ord.ID = doc.ID AND doc.id = \'' + numberImportDocument() + '\''; 
           
    sqlString() <- 'Select doc.ID, doc.DocType, UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(doc.bornin)), doc.CreateDat, doc.DocState, doc.ClientIndex, doc.Location, doc.Commentary, ord.ourselfclient, ord.OrderDate, ord.SupplyDate, ord.SupplyTime as SupplyTimeMinutes, ord.SupplyTimeTill as SupplyTimeTillMinutes, ord.UseForAutogen from Supermag.SMDocuments doc, Supermag.SMDocOR ord WHERE ' + filterSql();    

    IF enableLogImport() THEN logToFile('supermag', CONCAT '\n', 'Импорт заказов (закупка)', sqlString());
    
    EXTERNAL SQL connectionString() EXEC sqlString() TO file;
           
    IMPORT TABLE FROM file() TO docNumber, docType, bornIn, createDat, docState, clientIndex, location, comment, ourSelfClient, docDate, supplyDate, supplyTimeMinutes, supplyTimeTillMinutes, useForAutoGen;
       
    idDoc(INTEGER i) <- STRING[50](CONCAT '', STRING(docType(i)), STRING(docNumber(i)));
    currentVersion (INTEGER i) <-  (CONCAT '~', STRING(idDoc(i)), STRING(bornIn(i)), STRING(docDate(i)), STRING(docState(i)), STRING(comment(i)),
                                                STRING(clientIndex(i)), STRING(location(i)),  STRING(supplyDate(i)), STRING(supplyTimeMinutes(i)), STRING(supplyTimeTillMinutes(i)), STRING(useForAutoGen(i))) IF idDoc(i);                 
       
    IF length(numberImportDocument()) > 0 THEN { //для отладки
        MESSAGE sqlString();
        MESSAGE currentVersion(0);
    }
       
    FOR [GROUP SUM 1 BY idDoc(INTEGER i)](STRING[50] newId) AND NOT Purchase.userOrder(newId) DO NEW doc = Purchase.UserOrder {
        id(doc) <- newId;
    }
    
    FOR Purchase.UserOrder doc == Purchase.userOrder(idDoc(INTEGER i)) AND NOT lastVersion(doc) = currentVersion(i) DO {       
        number[Document](doc) <- STRING[48](docNumber(i));
        operation(doc) <- Purchase.operation('purchaseStoreSupplier');
        date(doc) <- DATE (docDate(i));
        time(doc) <- 00:00;
        bornin(doc) <- bornIn(i);
        isPosted(doc) <- docState(i) == 3 OR docState(i) == 2;
        isRejected(doc) <- docState(i) == 0;
        supplier(doc) <- legalEntity(ISTRING[100] (clientIndex(i)));
        supplierStock(doc) <- stock(ISTRING[100] (clientIndex(i)));
        customerStock(doc) <- stock(ISTRING[100] (location(i)));
        customer(doc) <- legalEntity(stock(ISTRING[100] (location(i))));
        shipmentDate(doc) <- DATE (supplyDate(i));
        shipmentTime(doc) <- sumMinutes(00:00, supplyTimeMinutes(i));
        useForAutoGen(doc) <- useForAutoGen(i);
        note(doc) <- comment(i);
        imported(doc) <- TRUE;
        lastVersion(doc) <- currentVersion(i);
    }  

    sqlString() <- 'Select bas.ID, bas.DOCTYPE, bas.BASEID, bas.BASEDOCTYPE from Supermag.SMDocuments doc, Supermag.SMDocOR ord, Supermag.SMCommonBases bas where ' + filterSql() + ' AND bas.ID = doc.ID AND bas.DOCTYPE = doc.DOCTYPE';    

    IF enableLogImport() THEN logToFile('supermag', CONCAT '\n', 'Импорт заказов (закупка)', sqlString());
    
    EXTERNAL SQL connectionString() EXEC sqlString() TO file;
            
    IMPORT TABLE FROM file() TO docNumber, docType, baseNumber, baseDoctype;

    idDoc(INTEGER i) <- STRING[50](CONCAT '', STRING(docType(i)), STRING(docNumber(i)));
    idBase(INTEGER i) <- STRING[50](CONCAT '', STRING(baseDoctype(i)), STRING(baseNumber(i)));    
       
    IF length(numberImportDocument()) > 0 THEN { //для отладки
        MESSAGE sqlString();
        MESSAGE idDoc(0)  +  ' ' + idBase(0);
    }
       
    FOR Purchase.UserOrder doc == Purchase.userOrder(idDoc(INTEGER i)) AND userContractSku(idBase(i)) AND baseDoctype(i) = 'CO' DO {    
        contractSku(doc) <- userContractSku(idBase(i));        
    }       
       
    overImportSupplierOrder2();
          
    //импорт спецификаций
    LOCAL imported = BOOLEAN (Purchase.UserOrderDetail);

    sqlString() <- 'SELECT spec.DOCTYPE, spec.DOCID, spec.SPECITEM, spec.ARTICLE, spec.QUANTITY, spec.ITEMPRICE, spec.TOTALPRICE FROM Supermag.SMSpecOR spec, Supermag.SMDocOR ord, Supermag.SMDocuments doc WHERE ' + filterSql() + ' AND spec.DOCTYPE = doc.DOCTYPE AND spec.DOCID = doc.ID ORDER BY spec.doctype, spec.docid, spec.specitem';    

    IF enableLogImport() THEN logToFile('supermag', CONCAT '\n', 'Импорт заказов (закупка)', sqlString());
    
    EXTERNAL SQL connectionString() EXEC sqlString() TO file;

    IMPORT TABLE FROM file() TO docType, docNumber, specItem, idItem, quantity, itemPrice, totalPrice;
    
    idDoc(INTEGER i) <- STRING[50](CONCAT '', STRING(docType(i)), STRING(docNumber(i)));
    idDet(INTEGER i) <- STRING[50](CONCAT '~', idDoc(i), specItem(i)) WHERE idDoc(i) AND specItem(i);
    currentVersion (INTEGER i) <- ( CONCAT '~', STRING(idDoc(i)), STRING(specItem(i)), STRING(idItem(i)), STRING(quantity(i)), STRING(itemPrice(i)), STRING(totalPrice(i)) ) IF idDet(i);                  

    IF length(numberImportDocument()) > 0 THEN { //для отладки
        MESSAGE sqlString();
    }

    FOR NOT Purchase.userOrderDetail(idDet(INTEGER i)) AND Purchase.userOrder(idDoc(i)) DO NEW d = Purchase.UserOrderDetail {
        id(d) <- idDet(i);
        userOrder(d) <- Purchase.userOrder(idDoc(i));
    }
    
    FOR Purchase.UserOrderDetail det = Purchase.userOrderDetail(idDet(INTEGER i)) AND NOT lastVersion(det) = currentVersion(i) DO {
        sku(det) <- item(idItem(i));
        quantity(det) <- OVERRIDE quantity(i), 0;
        price (det) <- NUMERIC[16,4](OVERRIDE itemPrice(i), 0);
        manufacturingPrice(det) <- NUMERIC[16,4](OVERRIDE itemPrice(i), 0);
        sum(det) <- NUMERIC[16,4](OVERRIDE totalPrice(i), 0);             
//        invoicePrice(det) <- NULL;
//        invoiceSum(det) <- NULL;
//        VATSum(det) <- NULL;
//        VAT(det) <- VAT(sku(det));                
        dataIndex(det) <- specItem(i);
        imported(det) <- TRUE;
        lastVersion(det) <- currentVersion(i);
    }

    VAT(Purchase.UserOrderDetail det) <- VAT(Purchase.sku[Purchase.UserOrderDetail](det), country(supplierStock(det))) WHERE imported(det);
    valueVAT(Purchase.UserOrderDetail det) <- valueRate(VAT(det), date(det)) WHERE imported(det);
    invoicePrice (Purchase.UserOrderDetail det) <- round2(price(det) * (100 + calcValueVAT(det))/100) WHERE imported(det);         
    
    APPLY;       
}

EXTEND FORM integrationData PROPERTIES importSupplierOrder();

overExportPurchaseOrderOR ABSTRACT LIST(Purchase.Order, DocMain);

exportPurchaseOrderOR 'Экспорт в супермаг' (Purchase.Order doc) {
    inc(DocMain d) <- NULL;
    IF id(operation(doc)) = 'purchaseStoreSupplier' THEN {        
        LOCAL NESTED dt = DATETIME();
        NEW expMain = DocMain {
                inc(expMain) <- TRUE;          
                doctype(expMain) <- STRING[10] ('OR');
                id(doc) <- CONCAT '', doctype(expMain), seriesNumber(doc);               
                id(expMain) <- id(doc); 
                docid(expMain) <- seriesNumber(doc);            
                bornin(expMain) <- OVERRIDE bornin(doc), baseIDSupermag();
                opcode(expMain) <- STRING[10] ('-1');
                userop(expMain) <- NULL;
                creatdate(expMain) <- createdTime(doc);                
                docstate(expMain) <- CASE WHEN invoicedOrderDetail(doc) > 0 THEN 3
                                          WHEN isPosted(doc) THEN 2                                        
                                          WHEN isClosed(doc) THEN 0 ELSE 1;
                clientIndex(expMain) <- id(supplier(doc));
                location(expMain) <- id(customerStock(doc));                                
                priceRoundMode(expMain) <- 0 IF doc IS Purchase.Order;                                                
                                          
                ourselfclient(expMain) <- id(legalEntity(customerStock(doc)));
                orderdate(expMain) <- dateTime(doc);
                supplydate(expMain) <- DATETIME(shipmentDate(doc));
                //supplytime(expMain) <-  shipmentTime(doc);
                useForAutoGen(expMain) <- OVERRIDE useForAutoGen(doc), '1';
                                                     
                FOR Purchase.order(Purchase.OrderDetail docd) = doc DO {
                    NEW expDet = DocDetail {
                        dataIndex(docd) <- index(docd); 
                        id(docd) <- (CONCAT '~',id(doc),index(docd));
                        index(expDet) <- index(docd);
                        docMain(expDet) <- expMain;
                        id(expDet) <- (CONCAT '~',id(expMain),index(expDet));
                        skuId(expDet) <- id(sku(docd));                                                                           
                        quantity(expDet) <- OVERRIDE quantity(docd), 0; 
                        priceNoTax(expDet) <- price(docd);
                        priceCurr(expDet) <- round(priceNoTax(expDet)/curRate(expMain),4);
                        sumNoTax(expDet) <- abs(sum(docd));
                        sumCurr(expDet) <- round(sumNoTax(expDet)/curRate(expMain),4);
                        priceManufacturer(expDet) <- IF manufacturingPrice(docd) >= 0.0001 THEN manufacturingPrice(docd) ELSE priceNoTax(expDet);
                    }
                    
                }           
                sumNoTax(expMain) <- GROUP SUM abs(sumNoTax(DocDetail expDet)) IF docMain(expDet) = expMain;                
                sumCurr(expMain) <- GROUP SUM sumCurr(DocDetail expDet) IF docMain(expDet) = expMain; 
                countSpec(expMain) <- GROUP SUM 1 IF docMain(DocDetail expDet) = expMain;
               
                FOR ContractSku c = contractSku(doc) DO NEW b = DocBase {
                    basisDoc(expMain, b) <- TRUE;
                    docid(b) <- seriesNumber(c);
                    doctype(b) <- 'CO';
                }                                

                overExportPurchaseOrderOR(doc, expMain);
                
                IF countSpec(expMain) > 0 THEN {
                    dt () <- currentDateTime();        
                    TRY EXPORT exportOR XML TO System.exportFile;
                    CATCH logToFile('supermag', CONCAT '\n', 'Заказ (закупка)', 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) +  '_' +STRING[30](LONG(doc))+'_'+(OVERRIDE seriesNumber(doc), '')+'_'+ formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
                    TRY {
                            WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
                            WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/COPY/' + doctype(expMain) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
                        }
                    CATCH logToFile('supermag', CONCAT '\n', 'Заказ (закупка)', 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) +'_' + STRING[30](LONG(doc)) + '_' + (OVERRIDE seriesNumber(doc), '') + '_' + formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
                }    
                inc(expMain) <- NULL;
        }
    }    

    APPLY;
}
 
exportPurchaseInvoice (Purchase.Invoice doc) + {
    IF id(operation(doc)) = 'purchaseStoreSupplier' AND (inExport(supplierStock(doc)) OR inExport(customerStock(doc))) AND isPosted(doc) AND isShipped(doc) THEN {
        FOR Purchase.Order or IF include(or, doc) AND shippedOrderDetail(or) DO {     
            exportPurchaseOrderOR(or); 
        }
    }    
}


//------------------------------------------------------------------------------------заказы складские требования
overImportInternalOrder2 ABSTRACT LIST ();

importInternalOrder 'Импорт заказов (складских требования)' () {
    
    LOCAL deliveryDate = DATETIME (INTEGER);
    LOCAL deliveryTime = INTEGER (INTEGER);
    
    imported(Purchase.UserOrder doc)  <- NULL IF doc IS Purchase.UserOrder;
    imported(Purchase.UserOrderDetail det)  <- NULL IF det IS Purchase.UserOrderDetail;
    
    filterSql() <- 'doc.DocType = \'SO\' AND ord.DocType(+)= doc.DocType AND ord.ID(+)= doc.ID AND doc.docstate IN (0, 1, 2, 3) AND (doc.location IN ('+ stocksImport() + ') OR ord.location IN ('+ stocksImport() + ') ) AND ord.DeliveryDate >= TO_DATE(\'' + toDateISO(SupermagSettings.dateFromImportDocument()) + '\',\'YYYY-MM-DD\')'; 
    IF length(SupermagSettings.numberImportDocument()) > 0 THEN filterSql() <- 'doc.id = \'' + SupermagSettings.numberImportDocument() + '\' AND doc.DocType = \'SO\' AND ord.DocType(+)= doc.DocType AND ord.ID(+)= doc.ID'; 
 
    sqlString() <- 'Select doc.ID, doc.DOCTYPE, UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(doc.bornin)), doc.DocState, doc.createdat, doc.Location, doc.Commentary, ord.DeliveryDate, ord.DeliveryTime, ord.location AS supplierStock from Supermag.SMDocuments doc, Supermag.SMStoreOrders ord WHERE ' + filterSql();    

    IF enableLogImport() THEN logToFile('supermag', CONCAT '\n', 'Импорт складские требования', sqlString());
    
    EXTERNAL SQL connectionString() EXEC sqlString() TO file;
                                      
    IMPORT TABLE FROM file() TO docNumber, docType, bornIn, docState, docDate, locationTo, comment, deliveryDate, deliveryTime, locationFrom;   

    idDoc(INTEGER i) <- STRING[50](CONCAT '', STRING(docType(i)), STRING(docNumber(i)));
    currentVersion (INTEGER i) <-  (CONCAT '~', STRING(idDoc(i)), STRING(bornIn(i)), STRING(docDate(i)), STRING(docState(i)), STRING(comment(i)),
                                                STRING(locationTo(i)), STRING(locationFrom(i)),  STRING(deliveryDate(i)), STRING(deliveryTime(i))) IF idDoc(i);                 

    IF length(SupermagSettings.numberImportDocument()) > 0 THEN { 
        MESSAGE sqlString(); 
        MESSAGE currentVersion(0);
    }
    
    FOR [GROUP SUM 1 BY idDoc(INTEGER i) IF NOT docState(i) = 1](STRING[50] newId) AND NOT Purchase.userOrder(newId) DO NEW doc = Purchase.UserOrder {
        id(doc) <- newId;
    }
    
    FOR Purchase.UserOrder doc == Purchase.userOrder(idDoc(INTEGER i)) AND NOT lastVersion(doc) = currentVersion(i) DO {       
        number(doc) <- STRING[48](docNumber(i));
        operation(doc) <- Purchase.operation('purchaseStoreStore');
        bornin(doc) <- bornIn(i); 
        isPosted(doc) <- docState(i) == 2 OR docState(i) == 3;
        isSent(doc) <- docState(i) == 2 OR docState(i) == 3;
        isConfirmed(doc) <- docState(i) == 2 OR docState(i) == 3;
        isRejected(doc) <- docState(i) == 0;     
        lastStatusSupermag(doc) <- docState(i);
        supplier(doc) <- legalEntity(stock(ISTRING[100] (locationFrom(i))));
        supplierStock(doc) <- stock(ISTRING[100] (locationFrom(i)));
        customer(doc) <- legalEntity(stock(ISTRING[100] (locationTo(i))));
        customerStock(doc) <- stock(ISTRING[100] (locationTo(i)));
        date(doc) <- DATE (docDate(i));  
        time(doc) <- OVERRIDE time(doc), 09:00;
        shipmentDate(doc) <- DATE (deliveryDate(i));
        shipmentTime(doc) <- sumMinutes(00:00, deliveryTime(i));
        imported(doc) <- TRUE;
        lastVersion(doc) <- currentVersion(i);
    }  
   
    sqlString() <- 'Select bas.ID, bas.DOCTYPE, bas.BASEID, bas.BASEDOCTYPE from Supermag.SMDocuments doc, Supermag.SMStoreOrders ord, Supermag.SMCommonBases bas where ' + filterSql() + ' AND bas.ID = doc.ID AND bas.DOCTYPE = doc.DOCTYPE';    

    IF enableLogImport() THEN logToFile('supermag', CONCAT '\n', 'Импорт складские требования', sqlString());
    
    EXTERNAL SQL connectionString() EXEC sqlString() TO file;
     
    IMPORT TABLE FROM file() TO docNumber, docType, baseNumber, baseDoctype;

    idDoc(INTEGER i) <- STRING[50](CONCAT '', STRING(docType(i)), STRING(docNumber(i)));
    idBase(INTEGER i) <- STRING[50](CONCAT '', STRING(baseDoctype(i)), STRING(baseNumber(i)));    
       
    IF length(numberImportDocument()) > 0 THEN { //для отладки
        MESSAGE sqlString();
        MESSAGE idDoc(0)  +  ' ' + idBase(0);
    }
       
    FOR Purchase.UserOrder doc == Purchase.userOrder(idDoc(INTEGER i)) AND userContractSku(idBase(i)) AND baseDoctype(i) = 'CO' DO {    
        contractSku(doc) <- userContractSku(idBase(i));        
    }       
   
    overImportInternalOrder2();
   
    //импорт спецификаций
    sqlString() <- 'SELECT spec.DOCTYPE, spec.DOCID, spec.SPECITEM, spec.ARTICLE, spec.QUANTITY, spec.ITEMPRICE, spec.TOTALPRICE FROM Supermag.SMDocuments doc, Supermag.SMStoreOrders ord, Supermag.SMSpec spec WHERE ' + filterSql() + ' AND spec.DOCTYPE = doc.DOCTYPE AND spec.DOCID = doc.ID ORDER BY spec.DOCTYPE, spec.DOCID, spec.specitem';    

    IF enableLogImport() THEN logToFile('supermag', CONCAT '\n', 'Импорт складские требования', sqlString());
    
    EXTERNAL SQL connectionString() EXEC sqlString() TO file;
    
    IMPORT TABLE FROM file() TO docType, docNumber, specItem, idItem, quantity, itemPrice, totalPrice;

    IF length(numberImportDocument()) > 0 THEN { //для отладки
        MESSAGE sqlString();
    }

    idDoc(INTEGER i) <- STRING[50](CONCAT '', STRING(docType(i)), STRING(docNumber(i)));
    idDet(INTEGER i) <- STRING[50](CONCAT '~', idDoc(i), specItem(i)) WHERE idDoc(i) AND specItem(i);
    currentVersion (INTEGER i) <- ( CONCAT '~', STRING(idDoc(i)), STRING(specItem(i)), STRING(idItem(i)), STRING(quantity(i)), STRING(itemPrice(i)), STRING(totalPrice(i)) ) IF idDet(i);                  
    
    FOR NOT Purchase.userOrderDetail(idDet(INTEGER i)) AND Purchase.userOrder(idDoc(i)) DO NEW det = Purchase.UserOrderDetail {
        id(det) <- idDet(i);
        userOrder(det) <- Purchase.userOrder(idDoc(i));
    }
    
    FOR Purchase.UserOrderDetail det = Purchase.userOrderDetail(idDet(INTEGER i)) AND NOT lastVersion(det) = currentVersion(i) DO {
        sku(det) <- item(idItem(i));
        quantity(det) <- quantity(i);
        price(det) <- NUMERIC[16,4](itemPrice(i));
        sum(det) <- NUMERIC[16,4](totalPrice(i));
        dataIndex(det) <- specItem(i);
        imported(det) <- TRUE;
        lastVersion(det) <- currentVersion(i);
    }
    
    APPLY;           
}

EXTEND FORM integrationData PROPERTIES importInternalOrder();

overExportPurchaseOrderSO ABSTRACT LIST(Purchase.Order, DocMain);

exportPurchaseOrderSO 'Экспорт в супермаг' (Purchase.Order doc) {
    inc(DocMain d) <- NULL;
    IF id(operation(doc)) = 'purchaseStoreStore' THEN {        
        LOCAL NESTED dt = DATETIME();
        NEW expMain = DocMain {
                inc(expMain) <- TRUE;          
                doctype(expMain) <- STRING[10] ('SO');
                id(doc) <- CONCAT '', doctype(expMain), seriesNumber(doc);               
                id(expMain) <- id(doc); 
                docid(expMain) <- seriesNumber(doc);            
                bornin(expMain) <- OVERRIDE bornin(doc), baseIDSupermag();
                opcode(expMain) <- STRING[10] ('-1');
                userop(expMain) <- NULL;
                creatdate(expMain) <- createdTime(doc);               
                docstate(expMain) <- CASE WHEN shippedOrderDetail(doc) > 0 THEN 3
                                          WHEN isPosted(doc) THEN 2                                        
                                          WHEN isClosed(doc) THEN 0 ELSE 1;
                clientIndex(expMain) <- id(supplier(doc));
                locationTo(expMain) <- id(customerStock(doc));                                
                locationFrom(expMain) <- id(supplierStock(doc));                                
                priceRoundMode(expMain) <- 0 IF doc IS Purchase.Order;                                                
                                          
                ourselfclient(expMain) <- id(legalEntity(customerStock(doc)));
                orderdate(expMain) <- dateTime(doc);
                deliverydate(expMain) <- DATETIME (shipmentDate(doc));
                deliverytime(expMain) <- TIME (shipmentTime(doc));
                                                     
                FOR Purchase.order(Purchase.OrderDetail docd) = doc DO {
                    NEW expDet = DocDetail {
                        dataIndex(docd) <- index(docd); 
                        id(docd) <- (CONCAT '~',id(doc),index(docd));
                        index(expDet) <- index(docd);
                        docMain(expDet) <- expMain;
                        id(expDet) <- (CONCAT '~',id(expMain),index(expDet));
                        skuId(expDet) <- id(sku(docd));                                                                           
                        quantity(expDet) <- OVERRIDE quantity(docd), 0; 
                    }
                    
                }           
                countSpec(expMain) <- GROUP SUM 1 IF docMain(DocDetail expDet) = expMain;
               
                overExportPurchaseOrderSO(doc, expMain);
                
                IF countSpec(expMain) > 0 THEN {
                    dt () <- currentDateTime();        
                    TRY EXPORT exportSO XML TO System.exportFile;
                    CATCH logToFile('supermag', CONCAT '\n', 'Складское требование', 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) +  '_' +STRING[30](LONG(doc))+'_'+(OVERRIDE seriesNumber(doc), '')+'_'+ formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
                    TRY {
                            WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
                            WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/COPY/' + doctype(expMain) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
                        }
                    CATCH logToFile('supermag', CONCAT '\n', 'Складское требование', 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) +'_' + STRING[30](LONG(doc)) + '_' + (OVERRIDE seriesNumber(doc), '') + '_' + formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
                }    
                inc(expMain) <- NULL;
        }
    }    

    APPLY;
}
purchaseShipmentQuantityUserInvoiceDetail (userInvoice) = GROUP SUM purchaseShipmentQuantity(Sale.UserInvoiceDetail idetail) BY userInvoice(idetail);

overApplySaleInvoice(Sale.Invoice doc) + {
    IF id(operation(doc)) = 'saleStoreStore' AND (inExport(supplierStock(doc)) OR inExport(customerStock(doc))) AND isPosted(doc) AND isShipped(doc) AND purchaseShipmentQuantityUserInvoiceDetail(doc) THEN {
        FOR Sale.Order orS IF include(orS, doc) DO {
            FOR saleOrder(Purchase.Order or)=orS  DO {     
                exportPurchaseOrderSO(or);
            }     
        }
    }    
}


//-----------------------------------------------------------------------------------------------------------------------------заказы продажа
@settingIntegration(Sale.UserOrder, Sale.UserOrderDetail);
EXTEND FORM Sale.orders PROPERTIES lastStatusSupermag(o);

importCustomerOrder 'Импорт заказов (продажа)' () {
    
    LOCAL supplyDate = DATETIME (INTEGER);
    LOCAL supplyTime = INTEGER (INTEGER);

    imported(Sale.UserOrder doc)  <- NULL IF doc IS Sale.UserOrder;
    imported(Sale.UserOrderDetail det)  <- NULL IF det IS Sale.UserOrderDetail;

    filterSql() <- 'doc.DOCTYPE = \'OC\' and ord.DOCTYPE = doc.DOCTYPE and ord.ID = doc.ID AND doc.DOCSTATE IN (0, 2, 3) AND doc.LOCATION IN ('+ stocksImport() + ') and ord.SupplyDate >= TO_DATE(\'' + toDateISO(SupermagSettings.dateFromImportDocument[]()) + '\',\'YYYY-MM-DD\')'; 
    IF length(SupermagSettings.numberImportDocument[]()) > 0 THEN filterSql() <- 'doc.DOCTYPE = \'OC\' and ord.DOCTYPE = doc.DOCTYPE and ord.ID = doc.ID AND doc.ID = \'' + SupermagSettings.numberImportDocument[]() + '\''; 

    sqlString() <- 'Select doc.ID, doc.DOCTYPE, UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(doc.bornin)), doc.DOCSTATE, doc.ClientIndex, doc.Location, doc.Commentary, ord.OrderDate, ord.SupplyDate, ord.SupplyTime from Supermag.SMDocuments doc, Supermag.SMDocOc ord where ' + filterSql();    

    IF enableLogImport() THEN logToFile('supermag', CONCAT '\n', 'Импорт заказы (продажа)', sqlString());
    
    EXTERNAL SQL connectionString() EXEC sqlString() TO file;

    IMPORT TABLE FROM file() TO docNumber, docType, bornIn, docState, clientIndex, location, comment, docDate, supplyDate, supplyTime;

    idDoc(INTEGER i) <- STRING[50](CONCAT '', STRING(docType(i)), STRING(docNumber(i)));
    currentVersion (INTEGER i) <-  (CONCAT '~', STRING(idDoc(i)), STRING(bornIn(i)), STRING(docDate(i)), STRING(docState(i)), STRING(comment(i)),
                                                STRING(clientIndex(i)), STRING(location(i)),  STRING(supplyDate(i)), STRING(supplyTime(i)) ) IF idDoc(i);                 

    FOR [GROUP SUM 1 BY idDoc(INTEGER i)](STRING[50] newId) AND NOT Sale.userOrder(newId) DO NEW doc = Sale.UserOrder {
        id(doc) <- newId;
    }

    FOR Sale.UserOrder doc == Sale.userOrder(idDoc(INTEGER i)) AND NOT lastVersion(doc) = currentVersion(i) DO {       
        number(doc) <- STRING[48](docNumber(i));
        operation(doc) <- Sale.operation('saleStoreCustomer');
        bornin(doc) <- bornIn(i);
        isPosted(doc) <- docState(i) == 3;
        isConfirmed(doc) <- docState(i) == 3;
        lastStatusSupermag(doc) <- docState(i);
        supplier(doc) <- legalEntity(stock(ISTRING[100] (location(i))));
        supplierStock(doc) <- stock(ISTRING[100] (location(i)));
        customer(doc) <- legalEntity(stock(ISTRING[100] (clientIndex(i))));
        customerStock(doc) <- stock(ISTRING[100] (clientIndex(i)));
        date(doc) <- DATE (docDate(i));  
        time(doc) <- 00:00;
        shipmentDate(doc) <- DATE(supplyDate(i));
        shipmentTime(doc) <- sumMinutes(00:00, supplyTime(i));
        imported(doc) <- TRUE ;
        lastVersion(doc) <- currentVersion(i);
    }  

    //импорт спецификаций
    sqlString() <- 'SELECT spec.DOCID, spec.DOCTYPE, spec.SPECITEM, spec.ARTICLE, spec.QUANTITY, spec.ITEMPRICE, spec.TOTALPRICE FROM Supermag.SMDocuments doc, Supermag.SMDocOc ord, Supermag.SMSpec spec WHERE ' + filterSql() + ' and spec.DOCTYPE = doc.DOCTYPE and spec.DOCID = doc.ID ORDER BY spec.doctype, spec.docid, spec.specitem';    

    IF enableLogImport() THEN logToFile('supermag', CONCAT '\n', 'Импорт заказы (продажа)', sqlString());
    
    EXTERNAL SQL connectionString() EXEC sqlString() TO file;

    IMPORT TABLE FROM file() TO docNumber, docType, specItem, idItem, quantity, itemPrice, totalPrice;

    idDoc(INTEGER i) <- STRING[50](CONCAT '', STRING(docType(i)), STRING(docNumber(i)));
    idDet(INTEGER i) <- STRING[50](CONCAT '~', idDoc(i), specItem(i)) WHERE idDoc(i) AND specItem(i);
    currentVersion (INTEGER i) <- ( CONCAT '~', STRING(idDoc(i)), STRING(specItem(i)), STRING(idItem(i)), STRING(quantity(i)), STRING(itemPrice(i)), STRING(totalPrice(i)) ) IF idDet(i);                  

    FOR NOT Sale.userOrderDetail(idDet(INTEGER i)) AND Sale.userOrder(idDoc(i)) DO NEW det = Sale.UserOrderDetail {
        id(det) <- idDet(i);
        userOrder(det) <- Sale.userOrder(idDoc(i));
    }

    FOR Sale.UserOrderDetail det = Sale.userOrderDetail(idDet(INTEGER i)) AND NOT lastVersion(det) = currentVersion(i) DO {
        sku(det) <- item(idItem(i));
        quantity(det) <- quantity(i);
        price(det) <- NUMERIC[16,4](itemPrice(i));
        sum(det) <- NUMERIC[16,4](totalPrice(i));
        dataIndex(det) <- specItem(i);
        imported(det) <- TRUE;
        lastVersion(det) <- currentVersion(i);
    }

    APPLY;
}

EXTEND FORM integrationData PROPERTIES importCustomerOrder();
