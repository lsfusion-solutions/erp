MODULE SupermagPricing;

REQUIRE SupermagSettings, SupermagExportForms, Time,  Store, Repricing, Pricing, PriceList, PriceListOperation, PurchaseInvoice, SaleInvoice, StockSkuDocument, 
RepricingMachinery, PriceListOver3;
 //PriceListStore;


//---------------------------------------------------------------------------------------------------------импорт
imported 'Импортируемая' = DATA BOOLEAN (Repricing.Operation);

EXTEND FORM Repricing.operation PROPERTIES imported(o);
DESIGN Repricing.operation {
    paramsContainer {
        MOVE PROPERTY (imported(o));
    }
}

id = DATA ISTRING[100](UserRepricingDetail) INDEXED;
userRepricingDetail = GROUP AGGR UserRepricingDetail d WHERE d IS UserRepricingDetail BY id(d);

@settingIntegration(Repricing, RepricingDetail);

EXTEND FORM Repricing.operation
    PROPERTIES (o) opcodeSupermag
;
DESIGN Repricing.operation{
    headContainer {        
        NEW supermag {   
            caption = 'Параметры Супермаг';
            NEW supermag1 {
                horizontal = TRUE;
                MOVE PROPERTY(opcodeSupermag(o));
            }    
        }
    }
}

EXTEND FORM Repricing.operations
    PROPERTIES (o) READONLY opcodeSupermag
;

EXTEND FORM Pricing.operation
    PROPERTIES (o) opcodeSupermag
;
DESIGN Pricing.operation{
    headContainer {        
        NEW supermag {   
            caption = 'Параметры Супермаг';
            NEW supermag1 {
                horizontal = TRUE;
                MOVE PROPERTY(opcodeSupermag(o));
            }    
        }
    }
}

EXTEND FORM Pricing.operations
    PROPERTIES (o) READONLY opcodeSupermag
;


exportRepricing 'Экспорт в Супермаг' ABSTRACT LIST (Repricing);

EXTEND FORM repricings
    PROPERTIES (p) exportRepricing TOOLBAR 
    PROPERTIES (p) id SHOWIF showIDs()
;

DESIGN repricings {
    actionContainer{
        NEW mag {
            caption = 'Супермаг';
            MOVE PROPERTY (exportRepricing(p));
        }        
    }
}

overExportRepricingAC ABSTRACT LIST (Repricing, DocMain);

exportRepricingAC 'Экспорт в супермаг' (Repricing doc) {
        inc(DocMain expMain) <- NULL;
        LOCAL NESTED dt = DATETIME();
        NEW expMain = DocMain {                       
                inc(expMain) <- TRUE;          
                doctype(expMain) <- 'AC';
                docid(expMain) <- seriesNumber(doc);            
                id(doc) <- CONCAT '', doctype(expMain), seriesNumber(doc);               
                id(expMain) <- id(doc); 
                bornin(expMain) <- OVERRIDE bornin(doc), baseIDSupermag();
                opcode(expMain) <- '-1';
                creatdate(expMain) <- dateTime(doc);                
                docstate(expMain) <- CASE WHEN isPosted(doc) THEN 3 
                                      WHEN isClosed(doc) THEN 0 ELSE 2;
                execDate(expMain) <- dateTime(doc); //postedTime(doc);
                execTime(expMain) <- dateTime(doc);  //postedTime(doc);                
                priceType(expMain) <- idSupermagPriceType(departmentStore(doc));   //(replace( (OVERRIDE id(retailPriceListType(departmentStore(doc))),  id(baseBPriceListLedger(retailPriceListType(departmentStore(doc))))),'D',''));
                priceRoundMode(expMain) <- 0 IF doc IS Repricing;                                                
                reasonPricing(expMain) <- opcodeSupermag(operation(doc));     
                location(expMain)  <- id(departmentStore(doc));                        
//                priceType(expMain) <- STRING[10](replace(id(retailPriceListType(departmentStore(doc))),'D',''));
                priceRoundMode(expMain) <- 0;
                ourselfclient(expMain) <- id(legalEntity(customerStock(doc)));
                
                FOR repricing(RepricingDetail docd) = doc DO {
                    NEW expDet = DocDetail {
                        dataIndex(docd) <- index(docd); 
                        index(expDet) <- index(docd);
                        docMain(expDet) <- expMain;
                        id(docd) <- (CONCAT '~',id(expMain),index(expDet));
                        id(expDet) <- STRING[50](id(docd));
                        skuId(expDet) <- id(sku(docd));                                                                           
                        quantity(expDet) <- OVERRIDE quantity(docd), 0;                       
                        priceWithTax(expDet) <- retailPrice(docd);
                        valueTax(expDet) <- valueVAT(docd);
                        priceNoTax(expDet) <- NUMERIC[18,4] ( abs(round(priceWithTax(expDet) / (1 + valueTax(expDet)/100),4)));
                        priceCurr(expDet) <- round(priceWithTax(expDet)/curRate(expMain),4);
                        sumWithTax(expDet) <- retailSum(docd);
                        sumNoTax(expDet) <- NUMERIC[18,4] ( abs(round( sumWithTax(expDet) / (1 + valueTax(expDet)/100),2)));
                        sumTax(expDet) <- VATSum(docd);
                        sumCurr(expDet) <- round(sumWithTax(expDet)/curRate(expMain),4);
                        priceRetail(expDet) <- (OVERRIDE retailPrice(docd), 0);
                        oldPrice(expDet) <- curRetailPrice(docd);
                        flags(expDet) <- CASE WHEN opcodeSupermag(operation(doc)) = '3' THEN '1' ELSE '0';
                        revalSum(expDet) <- NUMERIC[18,4]((priceRetail(expDet)-oldPrice(expDet)) * quantity(expDet));
                        revalOperQuantity(expDet) <- quantity(expDet);                                            
                    }
                }                                              
                                       
                overExportRepricingAC(doc,expMain);
                
                sumWithTax(expMain) <- GROUP SUM abs(sumWithTax(DocDetail expDet)) IF docMain(expDet) = expMain;                
                sumCurr(expMain) <- GROUP SUM sumCurr(DocDetail expDet) IF docMain(expDet) = expMain; 
                countSpec(expMain) <- GROUP SUM 1 IF docMain(DocDetail expDet) = expMain;
                                                                                
//                FOR basisDoc(doc, Document base) DO {
//                    IF base IS PriceList THEN NEW b = DocBase {
//                        basisDoc(expMain, b) <- TRUE;
//                        docid(b) <- seriesNumber[UserPriceList](base);
//                        doctype(b) <- CASE WHEN id(operation[UserPriceList](base)) = 'promotion' THEN 'MA'
//                                           WHEN id(operation[UserPriceList](base)) = 'retail' THEN 'AB';
//                    }    
//                }
                
                IF countSpec(expMain) > 0 THEN {
                    dt () <- currentDateTime();        
                    TRY EXPORT exportAC XML TO System.exportFile;
                    CATCH logToFile('supermag', CONCAT '\n', 'Акт переоценки', 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE seriesNumber(doc), '')+'_'+ formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
           
                    TRY {    
                        WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(doc), '')+'_'+ formulaDateT(dt());
                        WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/COPY/' + doctype(expMain) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(doc), '')+'_'+ formulaDateT(dt());
                    }
                    CATCH logToFile('supermag', CONCAT '\n', 'Акт переоценки', 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE seriesNumber(doc), '')+'_'+ formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());                     
           
//                   TRY 
//                   {      
//                        fileExists('file://' + exportDirectorySupermag() + '/' + doctype(doc) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(doc), '')+'_'+ formulaDateT(dt()) + '.xml'); 
//                IF fileExists()  THEN NEWSESSION NESTED LOCAL {
//                    FOR inc(Repricing ii)  DO NEW log = SupermagLog {
//                        id(log)<- doctype(doc) + '_' +STRING[30](LONG(ii))+'_'+(OVERRIDE id(ii), '')+'_'+ formulaDateT(dt());  
//                        dateTime(log) <- currentDateTime();
//                        userLogin(log) <- login(currentUser()); 
//                        nameContact(log) <- STRING[100](name(currentUser()));
//                        stockDocumentLedger(log) <- invoiceShipment(ii);
//                    }     
//                    APPLY NESTED LOCAL;
//                }             
                     
//                   } CATCH {
//                        logToFile('supermag', CONCAT '\n', 'Расходная накладная', 'file://' + exportDirectorySupermag() + '/' + doctype(doc) + '_' +STRING[30](LONG(doc))+'_'+(OVERRIDE seriesNumber(doc), '')+'_'+ formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
//                   }
                }
        }        
        inc(DocMain expMain) <- NULL;
        APPLY;        
}

exportRepricing (Repricing doc) + {
    exportRepricingAC(doc);
}

WHEN SETCHANGED(succeeded(Repricing rep)) AND startDate(stock[PriceTransactionDocument](rep)) <= currentDateTime() AND NOT endDate(stock[PriceTransactionDocument](rep)) < currentDateTime() DO {
    exportRepricing(rep);
}

overImportRepricing ABSTRACT LIST();

importRepricing 'Импорт актов переоценки' () {   
                        
    LOCAL reason = INTEGER (INTEGER);
    LOCAL propDocType = ISTRING[50] (INTEGER);
    LOCAL propDocId = ISTRING[50] (INTEGER);   
                                                                                                                                                                                  // a.Reason = 0 переоценка по приходу, у нас акт расценки               
    filterSql () <- 'doc.DOCTYPE = \'AC\' AND  act.ID = doc.ID AND act.DOCTYPE = doc.DOCTYPE AND doc.location IN ('+ stocksImport() + ') AND TRUNC(nvl(act.ExecTime,act.ExecDate)) >= TO_DATE(\'' + toDateISO(dateFromImportDocument()) + '\',\'YYYY-MM-DD\') AND doc.DocState IN (0,2,3) AND act.Reason > 0';
    IF length(numberImportDocument()) > 0 THEN filterSql() <- 'doc.DOCTYPE = \'AC\' AND act.ID = doc.ID AND act.DOCTYPE = doc.DOCTYPE AND doc.ID = \'' + numberImportDocument() + '\'';    
    
    sqlString() <- 'SELECT doc.ID, doc.DOCTYPE, UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(doc.bornin)), nvl(act.EXECTIME,act.EXECDATE) AS EXECDATE, act.REASON, doc.DOCSTATE, doc.LOCATION, doc.COMMENTARY FROM Supermag.SMActs act, Supermag.SMDocuments doc WHERE ' + filterSql();    

    IF enableLogImport() THEN logToFile('supermag', CONCAT '\n', 'Импорт актов переоценки', sqlString());
            
    EXTERNAL SQL connectionString() EXEC sqlString() TO SupermagSettings.file;
    
    IMPORT TABLE FROM SupermagSettings.file() TO docNumber, docType, bornIn, docDate, reason, docState, location, comment;
    
    // добавляет пустые операции надо проверить
//    FOR [GROUP SUM 1 BY reason(INTEGER i)](INTEGER i) AND NOT Repricing.operation(TEXT (reason(i))) DO NEW o = Repricing.Operation {
//        id(o) <- ISTRING[100](reason(i));
//        name(o) <- ISTRING[100](reason(i));
//        allRoles(o) <- TRUE;
//    }
    
    idDoc(INTEGER i) <- STRING[50](CONCAT '', STRING(docType(i)), STRING(docNumber(i)));
    currentVersion (INTEGER i) <-  (CONCAT '~', STRING(idDoc(i)), STRING(bornIn(i)), STRING(docDate(i)), STRING(docState(i)), STRING(reason(i)), STRING(comment(i)), STRING(location(i)) ) IF idDoc(i);                 
    
    IF length(numberImportDocument()) > 0 THEN {
        MESSAGE sqlString();
        MESSAGE currentVersion(0);
    }    
    
    FOR idDoc(INTEGER i) AND NOT Repricing.userRepricing(idDoc(i)) DO NEW doc = Repricing.UserRepricing {
        id(doc) <- idDoc(i);
    }
        
    FOR Repricing.UserRepricing doc == Repricing.userRepricing(idDoc(INTEGER i)) AND (NOT lastVersion(doc) = currentVersion(i) OR length(numberImportDocument()) > 0) DO {
        bornin(doc) <- bornIn(i);       
        operation(doc) <- Repricing.operation(TEXT (reason(i)));
        number(doc) <- ISTRING[28] (docNumber(i));
        date(doc) <- DATE (docDate(i));
        time(doc) <- TIME (docDate(i));
        note(doc) <- comment(i);
        departmentStore(doc) <- departmentStore(TEXT (location(i)));
        imported(doc) <- TRUE;
        isPosted(doc) <- docState(i) = 3;
        lastStatusSupermag(doc) <- docState(i);
        lastVersion(doc) <- currentVersion(i);
    }
    
    overImportRepricing();   
    
    LOCAL oldPrice = NUMERIC[16,4](INTEGER);
    LOCAL actReason = INTEGER (INTEGER);
    LOCAL priceType = INTEGER (INTEGER);

    sqlString() <- 'SELECT spec.DOCID, spec.DOCTYPE, spec.SpecItem, spec.Article, spec.ItemPrice, speca.OldPrice, spec.Quantity, act.Reason, act.PriceType FROM Supermag.SMDocuments doc, Supermag.SMActs act, Supermag.SMSpec spec, Supermag.SMSpecActs speca ' + 
                   'WHERE ' + filterSql() + ' AND spec.DOCID = doc.ID AND spec.DOCTYPE = doc.DOCTYPE AND speca.DOCID(+) = spec.DOCID AND speca.DOCTYPE(+) = spec.DOCTYPE AND speca.SpecItem(+) = spec.SpecItem ORDER BY spec.doctype, spec.docid, spec.specitem';
                       
    IF enableLogImport() THEN logToFile('supermag', CONCAT '\n', 'Импорт актов переоценки', sqlString());

    EXTERNAL SQL connectionString() EXEC sqlString() TO SupermagSettings.file;
       
    IMPORT TABLE FROM SupermagSettings.file() TO docNumber, docType, specItem, idItem, itemPrice, oldPrice, quantity, actReason, priceType;
        
    idDoc(INTEGER i) <- STRING[50](CONCAT '', docType(i), docNumber(i)) WHERE docNumber(i) AND docType(i);
    idDet(INTEGER i) <- STRING[50](CONCAT '~', idDoc(i), specItem(i)) WHERE idDoc(i) AND specItem(i);
    currentVersion (INTEGER i) <- ( CONCAT '~', STRING(idDet(i)), STRING(idItem(i)), STRING(actReason(i)), STRING(priceType(i)), STRING(itemPrice(i)), STRING(oldPrice(i)) ) IF idDet(i);                  

    IF length(numberImportDocument()) > 0 THEN {
        MESSAGE sqlString();
        MESSAGE currentVersion(0);
    }    

    FOR NOT userRepricingDetail(idDet(INTEGER i)) AND userRepricing(idDoc(i)) DO NEW det = UserRepricingDetail {
        id(det) <- idDet(i);
        userRepricing(det) <- userRepricing(idDoc(i));
    }

    FOR UserRepricingDetail det = userRepricingDetail(idDet(INTEGER i)) AND NOT lastVersion(det) = currentVersion(i) DO {
        sku(det) <- item(idItem(i));
        quantity(det) <- quantity(i);
        curRetailPrice(det) <- oldPrice(i);
        retailPrice(det) <- NUMERIC[16,4](itemPrice(i));
        imported(det) <- TRUE;
        dataIndex(det) <- specItem(i);
        lastVersion(det) <- currentVersion(i);
    }
   
    // импорт документов оснований
    LOCAL baseType = ISTRING[50] (INTEGER);
    
    sqlString() <- 'Select bas.ID, bas.DOCTYPE, bas.BASEID, bas.BASEDOCTYPE from Supermag.SMDocuments doc, Supermag.SMActs act, Supermag.SMCommonBases bas where ' + filterSql() + ' AND bas.ID = doc.ID AND bas.DOCTYPE = doc.DOCTYPE';    

    IF enableLogImport() THEN logToFile('supermag', CONCAT '\n', 'Импорт актов переоценки', sqlString());
    
    EXTERNAL SQL connectionString() EXEC sqlString() TO SupermagSettings.file;
        
    IMPORT TABLE FROM SupermagSettings.file() TO docNumber, docType, baseNumber, baseType;
    
    idDoc(INTEGER i) <- STRING[50](CONCAT '', STRING(docType(i)), STRING(docNumber(i)));
    idBase(INTEGER i) <- STRING[50](CONCAT '', STRING(baseType(i)), STRING(baseNumber(i)));

    FOR Repricing.UserRepricing doc == Repricing.userRepricing(idDoc(INTEGER i)) AND (baseType(i) = 'AB' OR baseType(i) = 'MA') DO {    
        basisDoc(doc, Document base) <- TRUE IF base = userPriceList(idBase(i)); 
    }    
       
    APPLY;       
}

EXTEND FORM integrationData PROPERTIES () importRepricing;

exportPricing 'Экспорт в Супермаг' ABSTRACT LIST (Pricing);

EXTEND FORM pricings
    PROPERTIES (p) exportPricing TOOLBAR 
    PROPERTIES (p) id SHOWIF showIDs()
;

DESIGN pricings {
    actionContainer{
        NEW mag {
            caption = 'Супермаг';
            MOVE PROPERTY (exportPricing(p));
        }        
    }
}

//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
imported 'Импортируемая' = DATA BOOLEAN (Pricing.Operation);

EXTEND FORM Pricing.operation PROPERTIES imported(o);
DESIGN Pricing.operation {
    paramsContainer {
        MOVE PROPERTY (imported(o));
    }
}

id = DATA ISTRING[100](UserPricingDetail) INDEXED;
userPricingDetail = GROUP AGGR UserPricingDetail d WHERE d IS UserPricingDetail BY id(d);

@settingIntegration(Pricing, PricingDetail);

exportPricingAC 'Экспорт в супермаг' (Pricing doc) {
    inc(DocMain expMain) <- NULL IF expMain IS DocMain ;    
    LOCAL NESTED dt = DATETIME();
    NEW expMain = DocMain {
                inc(expMain) <- TRUE;
                doctype(expMain) <- 'AC';
                docid(expMain) <- seriesNumber(doc);                 
                id(doc) <- CONCAT '', doctype(expMain), docid(expMain);
                id(expMain) <- id(doc);                  
                opcode(expMain) <- '-1';
                docstate(expMain) <- CASE WHEN isPosted(doc) THEN 3 
                                      WHEN isClosed(doc) THEN 0 ELSE 2;
                creatdate(expMain) <- dateTime(doc);
                execDate(expMain) <- postedTime(doc);
                execTime(expMain) <- postedTime(doc);                
                priceType(expMain) <- idSupermagPriceType(departmentStore(doc)); //STRING[10](replace(id(retailPriceListType(departmentStore(doc))),'D',''));
                lastStatusSupermag(doc) <- OVERRIDE lastStatusSupermag(doc), docstate(expMain); 
                bornin(expMain) <- OVERRIDE bornin(doc), baseIDSupermag();
                location(expMain)  <- id(departmentStore(doc));
                reasonPricing(expMain) <- opcodeSupermag(operation(doc));;     
                priceRoundMode(expMain) <- 0;
                FOR pricing(PricingDetail docd) = doc DO {
                    NEW expDet = DocDetail {
                        index(expDet) <- index(docd);
                        docMain(expDet) <- expMain;
                        id(docd) <- (CONCAT '~',id(expMain),index(expDet));
                        id(expDet) <- STRING[50](id(docd));
                        skuId(expDet) <- id(sku(docd));                                                                           
                        quantity(expDet) <- quantity(docd);
                        valueTax(expDet) <- valueRetailVAT(docd);
                        priceWithTax(expDet) <- retailPrice(docd);
                        priceNoTax(expDet) <- NUMERIC[18,4] ( abs(round( priceWithTax(expDet) / (1 + valueTax(expDet)/100),4)));
                        priceCurr(expDet) <- round(priceWithTax(expDet)/curRate(expMain),4);
                        sumWithTax(expDet) <- retailSum(docd);
                        sumNoTax(expDet) <- NUMERIC[18,4] ( abs(round( sumWithTax(expDet) / (1 + valueTax(expDet)/100),2)));
                        sumCurr(expDet) <-round(sumWithTax(expDet)/curRate(expMain),4);
                        sumTax(expDet) <- retailVATSum(docd);
                        oldPrice(expDet) <- prevRetailPricingPriceB(sku(docd), departmentStore(docd), dateTime(docd));
                        flags(expDet) <- '0';
                        revalSum(expDet) <- 0.00;
                        revalOperQuantity(expDet) <- 0.00;
                    }
                }    

                sumWithTax(expMain) <- GROUP SUM abs(sumWithTax(DocDetail expDet)) IF docMain(expDet) = expMain;                
                sumCurr(expMain) <- GROUP SUM sumCurr(DocDetail expDet) IF docMain(expDet) = expMain; 
                countSpec(expMain) <- GROUP SUM 1 IF docMain(DocDetail expDet) = expMain;
                IF countSpec(expMain) > 0 THEN {
                    dt () <- currentDateTime();        
                    TRY EXPORT exportAC XML TO System.exportFile;
                    CATCH logToFile('supermag', CONCAT '\n', name(operation(doc)), 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) +  '_' +STRING[30](LONG(doc))+'_'+(OVERRIDE seriesNumber(doc), '')+'_'+ formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
                    TRY {
                            WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
                            WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/COPY/' + doctype(expMain) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
                        }
                    CATCH logToFile('supermag', CONCAT '\n', name(operation(doc)), 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) +'_' + STRING[30](LONG(doc)) + '_' + (OVERRIDE seriesNumber(doc), '') + '_' + formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
                }    
                inc(expMain) <- NULL;
    }                        
    inc(DocMain expMain) <- NULL IF expMain IS DocMain ;    
    APPLY;
}

exportPricing (Pricing doc) + {
    exportPricingAC(doc);
}

importPricing 'Импорт актов расценки' () {   
                        
    LOCAL reason = INTEGER (INTEGER);
                                                                                                                                                                                  // a.Reason = 0 переоценка по приходу, у нас акт расценки               
    filterSql () <- 'doc.DOCTYPE = \'AC\' AND act.Id = doc.Id AND act.DOCTYPE = doc.DOCTYPE AND doc.location IN ('+ stocksImport() + ') AND TRUNC(nvl(act.ExecTime,act.ExecDate)) >= TO_DATE(\'' + toDateISO(dateFromImportDocument()) + '\',\'YYYY-MM-DD\') AND doc.DocState IN (0,1,2,3) AND act.Reason = 0';
    IF length(numberImportDocument()) > 0 THEN filterSql() <- 'doc.DOCTYPE = \'AC\' AND act.Id = doc.Id AND act.DOCTYPE = doc.DOCTYPE AND doc.ID = \'' + numberImportDocument() + '\''; 

    sqlString() <- 'SELECT doc.ID, doc.DOCTYPE, UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(doc.bornin)), nvl(act.EXECTIME,act.EXECDATE) AS EXECDATE, act.REASON, doc.DOCSTATE, doc.LOCATION, doc.COMMENTARY FROM Supermag.SMActs act, Supermag.SMDocuments doc WHERE ' + filterSql();    

    IF enableLogImport() THEN logToFile('supermag', CONCAT '\n', 'Импорт актов расценки', sqlString());
            
    EXTERNAL SQL connectionString() EXEC sqlString() TO SupermagSettings.file;
        
    IMPORT TABLE FROM SupermagSettings.file() TO docNumber, docType, bornIn, docDate, reason, docState, location, comment;

    FOR [GROUP SUM 1 BY reason(INTEGER i)](INTEGER i) AND NOT Pricing.operation(TEXT (i)) DO NEW o = Pricing.Operation {
        id(o) <- ISTRING[100](i);
        name(o) <- ISTRING[100](i);
        allRoles(o) <- TRUE;
        imported(o) <- TRUE;
    }
    
    idDoc(INTEGER i) <- STRING[50](CONCAT '', STRING(docType(i)), STRING(docNumber(i)));
    currentVersion (INTEGER i) <-  (CONCAT '~', STRING(idDoc(i)), STRING(docDate(i)), STRING(bornIn(i)), STRING(docState(i)), STRING(reason(i)), STRING(comment(i)), STRING(location(i)) ) IF idDoc(i);                 
    
    FOR idDoc(INTEGER i) AND NOT Pricing.userPricing(idDoc(i)) AND NOT docState(i) = 1 DO NEW doc = Pricing.UserPricing {
        id(doc) <- idDoc(i);
    }
        
    FOR Pricing.UserPricing doc == Pricing.userPricing(idDoc(INTEGER i)) AND NOT lastVersion(doc) = currentVersion(i) DO {       
        operation(doc) <- Pricing.operation(TEXT (location(i)));
        number(doc) <- ISTRING[28] (docNumber(i));
        bornin(doc) <- bornIn(i);
        date(doc) <- DATE (docDate(i));
        time(doc) <- TIME (docDate(i));
        note(doc) <- comment(i);
        departmentStore(doc) <- departmentStore(TEXT (location(i)));
        imported(doc) <- TRUE;
        isPosted(doc) <- docState(i) = 3;
        lastStatusSupermag(doc) <- docState(i);
        lastVersion(doc) <- currentVersion(i);
    }
    
    LOCAL oldPrice = NUMERIC[16,4](INTEGER);
    LOCAL actReason = INTEGER (INTEGER);
    LOCAL priceType = INTEGER (INTEGER);

    sqlString() <- 'SELECT spec.DOCID, spec.DOCTYPE, spec.SpecItem, spec.Article, spec.ItemPrice, speca.OldPrice, spec.Quantity, act.Reason, act.PriceType ' + 
                   'FROM Supermag.SMDocuments doc, Supermag.SMActs act, Supermag.SMSpec spec, Supermag.SMSpecActs speca ' + 
                   'WHERE ' + filterSql() + ' AND spec.DOCTYPE = doc.DOCTYPE AND spec.DOCID = doc.ID AND speca.DOCID(+) = spec.DOCID AND speca.DOCTYPE(+) = spec.DOCTYPE AND speca.SPECITEM(+) = spec.SPECITEM ORDER BY spec.doctype, spec.docid, spec.specitem';    

    IF enableLogImport() THEN logToFile('supermag', CONCAT '\n', 'Импорт актов расценки', sqlString());
            
    EXTERNAL SQL connectionString() EXEC sqlString() TO SupermagSettings.file;
       
    IMPORT TABLE FROM SupermagSettings.file() TO docNumber, docType, specItem, idItem, itemPrice, oldPrice, quantity, actReason, priceType;
    
    idDoc(INTEGER i) <- STRING[50](CONCAT '', docType(i), docNumber(i)) WHERE docNumber(i) AND docType(i);
    idDet(INTEGER i) <- STRING[50](CONCAT '~', idDoc(i), specItem(i)) WHERE idDoc(i) AND specItem(i);
    currentVersion (INTEGER i) <- ( CONCAT '~', STRING(idDet(i)), STRING(idItem(i)), STRING(actReason(i)), STRING(priceType(i)), STRING(itemPrice(i)), STRING(oldPrice(i)) ) IF idDet(i);                  

    FOR NOT userPricingDetail(idDet(INTEGER i)) AND userPricing(idDoc(i)) DO NEW det = UserPricingDetail {
        id(det) <- idDet(i);
        userPricing(det) <- userPricing(idDoc(i));
    }

    FOR UserPricingDetail det = userPricingDetail(idDet(INTEGER i)) AND NOT lastVersion(det) = currentVersion(i) DO {
        sku(det) <- item(idItem(i));
        quantity(det) <- quantity(i);
 //       curRetailPrice(det) <- oldPrice(i);
        retailPrice(det) <- NUMERIC[16,4](itemPrice(i));
        imported(det) <- TRUE;
        dataIndex(det) <- specItem(i);
        lastVersion(det) <- currentVersion(i);
    }
   
    // импорт документов оснований
    LOCAL baseType = ISTRING[50] (INTEGER);
    
    sqlString() <- 'Select bas.ID, bas.DOCTYPE, bas.BASEID, bas.BASEDOCTYPE from Supermag.SMDocuments doc, Supermag.SMActs act, Supermag.SMCommonBases bas where ' + filterSql() + ' AND bas.ID = doc.ID AND bas.DOCTYPE = doc.DOCTYPE';    

    IF enableLogImport() THEN logToFile('supermag', CONCAT '\n', 'Импорт актов расценки', sqlString());
            
    EXTERNAL SQL connectionString() EXEC sqlString() TO SupermagSettings.file;
            
    IMPORT TABLE FROM SupermagSettings.file() TO docNumber, docType, baseNumber, baseType;
    
    idDoc(INTEGER i) <- STRING[50](CONCAT '', STRING(docType(i)), STRING(docNumber(i)));
    idBase(INTEGER i) <- STRING[50](CONCAT '', STRING(baseType(i)), STRING(baseNumber(i)));

    FOR Pricing.UserPricing doc == Pricing.userPricing(idDoc(INTEGER i)) AND (baseType(i) = 'AB' OR baseType(i) = 'MA') DO {    
        basisDoc(doc, Document d) <- TRUE IF d = userPriceList(idBase(i)); 
    }
        
    FOR Pricing.UserPricing doc == Pricing.userPricing(idDoc(INTEGER i)) AND (baseType(i) = 'WI') DO {    
        basisDoc(doc, Document d) <- TRUE IF d = Purchase.userInvoice(idBase(i)); 
    }    

    FOR Pricing.UserPricing doc == Pricing.userPricing(idDoc(INTEGER i)) AND (baseType(i) = 'IW') DO {    
        basisDoc(doc, Document d) <- TRUE IF d = Sale.userInvoice(idBase(i)); 
    }    
    
    APPLY;       
}

EXTEND FORM integrationData PROPERTIES () importPricing;