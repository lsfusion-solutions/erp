MODULE SupermagWriteOff;

REQUIRE SupermagSettings, SupermagExportForms, Utils, TaxItem, PricingWriteOff;

NAMESPACE WriteOff;

@settingOperationSupermag(WriteOff);

exportWriteOff 'Экспорт в Супермаг' ABSTRACT LIST (WriteOff);

EXTEND FORM writeOffs
    PROPERTIES (w) exportWriteOff TOOLBAR 
;
DESIGN writeOffs {
    actionContainer{
        NEW mag {
            caption = 'Супермаг';
            MOVE PROPERTY (exportWriteOff(w));
        }        
    }
}

userWriteOffApply 'Сохранить ' (WriteOff doc) {
    apply();
    IF NOT canceled() THEN {    
        IF series(doc) THEN { number(doc) <- seriesNumber(doc); series(doc) <- NULL;} 
        id(doc) <- CONCAT '', STRING[10](getWord(docTypeSupermag(operation(doc)),';',1)), seriesNumber(doc); 
        APPLY;
        exportWriteOff(doc);
    }
}

EXTEND FORM userWriteOff  PROPERTIES userWriteOffApply(w) TOOLBAR;

DESIGN userWriteOff {
    TOOLBARRIGHT {
        MOVE PROPERTY (userWriteOffApply(w)) BEFORE PROPERTY (formClose()) { imagePath = 'apply.png';} 
        PROPERTY (formOk()) { hide = TRUE; }
        PROPERTY (formApply()) { hide = TRUE; }
    }
}

@settingIntegration(WriteOff, WriteOffDetail);

overExportWriteOff ABSTRACT LIST (WriteOff,DocMain); 
overExportWriteOff ABSTRACT LIST (WriteOffDetail,DocDetail); 

exportWriteOffMag 'Экспорт в супермаг' (WriteOff doc) {
    LOCAL NESTED dt = DATETIME();
    inc(DocMain expMain) <- NULL;
    IF docTypeSupermag(operation(doc)) AND opcodeSupermag(operation(doc)) THEN {        
        FOR iterateDown(INTEGER n, wordCount(docTypeSupermag(operation(doc)),';'), 1) DO {
            inc(DocMain expmain) <- NULL;
            DELETE DocDetail expDet WHERE expDet IS DocDetail;        
            DELETE DocMain expmain WHERE expmain IS DocMain;
            NEW expMain = DocMain {
                inc(expMain) <- TRUE;          
                doctype(expMain) <- STRING[10] (getWord(docTypeSupermag(operation(doc)),';',n));
                id(doc) <- CONCAT '', doctype(expMain), seriesNumber(doc);               
                id(expMain) <- id(doc); 
                docid(expMain) <- seriesNumber(doc);            
                bornin(expMain) <- OVERRIDE bornin(doc), baseIDSupermag();
                opcode(expMain) <- STRING[10] (getWord(opcodeSupermag(operation(doc)),';',n));
                userop(expMain) <- STRING[10] (getWord(useropSupermag(operation(doc)),';',n));
                creatdate(expMain) <- dateTime(doc);                
                docstate(expMain) <- CASE WHEN isPosted(doc) THEN 3 WHEN isClosed(doc) THEN 0 ELSE 1;
                priceRoundMode(expMain) <- 4 IF doc IS WriteOff; 
                clientIndex(expMain) <- id( OVERRIDE contact(doc), contragentSupermag(stockGroup(stock(doc))) );
                locationFrom(expMain) <- id(stock(doc));
                locationTo(expMain) <- id(stock(doc));
                location(expMain)  <- id(stock(doc));     
                ourselfclient(expMain) <- id(legalEntity(stock(doc)));                                              

                FOR writeOff(WriteOffDetail docd) = doc DO NEW expDet = DocDetail {
                        dataIndex(docd) <- index(docd); 
                        id(docd) <- (CONCAT '~',id(doc),index(docd));
                        index(expDet) <- index(docd);
                        docMain(expDet) <- expMain;
                        id(expDet) <- (CONCAT '~',id(expMain),index(expDet));
                        skuId(expDet) <- id(sku(docd));                                                                           
                        quantity(expDet) <- OVERRIDE abs(quantity(docd)), 0;
                        blankquantity(expDet) <- quantity(expDet);
                        priceWithTax(expDet) <- price(docd);
                        priceManufacturer(expDet) <- supplierPrice(docd);
                        valueTax(expDet) <- valueVAT(sku(docd));
                        priceNoTax(expDet) <- NUMERIC[18,4] ( abs(round( priceWithTax(expDet) / (1 + valueTax(expDet)/100),4)));
                        priceCurr(expDet) <- round(priceWithTax(expDet) / curRate(expMain),4);
                        sumWithTax(expDet) <- OVERRIDE abs(sum(docd)), 0;
                        sumNoTax(expDet) <- OVERRIDE NUMERIC[18,4] ( abs(round( sumNoTax(expDet) / (1 + valueTax(expDet)/100),2))), 0;
                        sumTax(expDet) <- OVERRIDE (sumWithTax(expDet) - sumNoTax(expDet)), 0;
                        sumCurr(expDet) <- round(sumWithTax(expDet)/curRate(expMain),4);
                        overExportWriteOff(docd, expDet);
                        
                     //   priceRetail(expDet) <- (OVERRIDE retailPrice(docd), 0);                                        
                }           
                overExportWriteOff(doc, expMain);
                
                sumWithTax(expMain) <- GROUP SUM abs(sumWithTax(DocDetail expDet)) IF docMain(expDet) = expMain;                
                sumCurr(expMain) <- GROUP SUM sumCurr(DocDetail expDet) IF docMain(expDet) = expMain; 
                countSpec(expMain) <- GROUP SUM 1 IF docMain(DocDetail expDet) = expMain;
        
                dt () <- currentDateTime();
                TRY {                
                    CASE WHEN doctype(expMain) = 'WO' THEN EXPORT exportWO XML TO System.exportFile;                 
                } CATCH logToFile('supermag', CONCAT '\n', 'Списание ' + id(doc),'Ошибка формирования формы', ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
           
                TRY {       
                   IF countSpec(expMain) > 0 THEN {   
                        WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/' + doctype(expMain) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
                        WRITE System.exportFile() TO 'file://' + exportDirectorySupermag() + '/COPY/' + doctype(expMain) +'_' +STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt());
                   }
                } CATCH logToFile('supermag', CONCAT '\n', 'Списание ' + id(doc), 'Ошибка записи в файл','file://' + exportDirectorySupermag() + '/' + doctype(expMain) + '_' + STRING[30](LONG(doc))+'_'+(OVERRIDE id(expMain), '')+'_'+ formulaDateT(dt()) + ' ParseMessage error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            }           
        } 
        inc(DocMain expmain) <- NULL;
    }       
    APPLY;
}

exportWriteOff (WriteOff doc) + {
    IF inExport(stock(doc)) AND isPosted(doc) THEN exportWriteOffMag(doc);
}

overImportWriteOff ABSTRACT LIST();

importWriteOff 'Списания' () {
    filterSql() <- 'd.CreateDat >= TO_DATE(\'' + toDateISO(dateFromImportDocument()) + '\',\'YYYY-MM-DD\') AND ( d.location IN ('+ stocksImport() + ')  OR d.locationfrom IN ('+ stocksImport() + ') OR locationto IN ('+ stocksImport() + ')   ) AND ( ' ;
    LOCAL filterDoc = STRING ();
    LOCAL operDoc = STRING ();
    filterDoc() <-'';
    FOR Operation op IF op IS Operation AND getWord(docTypeSupermag(op),';',1) DO {
       operDoc() <- CONCAT ' AND ', ('d.DOCTYPE = \'' + getWord(docTypeSupermag(op),';',1) + '\''), ('d.OPCODE = ' + getWord(opcodeSupermag(op),';',1)), ('d.USEROP = ' + getWord(useropSupermag(op),';',1)) ; 
       filterDoc() <- CONCAT ' OR ',filterDoc(), '(' + operDoc() + ')';
    }
      
//  чтобы не путаться осталяем только 1 документ
//    FOR Operation op IF op IS Operation AND getWord(docTypeSupermag(op),';',2) DO {
//       operDoc() <- CONCAT ' AND ', ('d.DOCTYPE = \'' + getWord(docTypeSupermag(op),';',2) + '\''), ('d.OPCODE = ' + getWord(opcodeSupermag(op),';',2)), ('d.USEROP = ' + getWord(useropSupermag(op),';',2)) ; 
//       filterDoc() <- CONCAT ' OR ',filterDoc(), '(' + operDoc() + ')';
//    }  
    
    filterDoc() <- substrFrom(filterDoc(),4);
    filterSql() <- CONCAT '', filterSql(), filterDoc(),')'; 
       
    EXTERNAL SQL connectionString()  
    EXEC 'Select d.ID, d.doctype, d.opcode, d.userop, UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(d.bornin)), d.createdat, d.docstate from Supermag.SMDocuments d where ' + filterSql() TO file;   

   // MESSAGE 'Select d.ID, d.doctype, d.opcode, d.userop, d.createdat, d.docstate from Supermag.SMDocuments d where ' + filterSql();     
    IMPORT TABLE FROM file() TO docNumber, docType, operCode, userOp, bornIn, docDate, docState;
    
    idDoc(INTEGER i) <- STRING[50](CONCAT '', STRING(docType(i)), STRING(docNumber(i)));
    currentVersion (INTEGER i) <-  (CONCAT '~', STRING(idDoc(i)), STRING(operCode(i)), STRING(userOp(i)), STRING(bornIn(i)), STRING(docDate(i)), STRING(docState(i)) ) IF idDoc(i);                 
    codeOperation (INTEGER i) <- CONCAT '~', STRING(docType(i)), STRING(operCode(i)), STRING(userOp(i)) IF idDoc(i);

    FOR UserWriteOff doc == userWriteOff(idDoc(INTEGER i)) AND NOT lastVersion[WriteOff](doc) = currentVersion(i) DO {
        isPosted(doc) <- TRUE IF docState(i) = 3;
        isClosed(doc) <- TRUE IF docState(i) = 0;      
        lastVersion[WriteOff](doc) <- currentVersion(i);        
    }
    
    overImportWriteOff();
    
    APPLY;
}

EXTEND FORM integrationData PROPERTIES importWriteOff();

id '{integration.id}' = DATA STRING[100] (UserWriteOffDetail) IN id INDEXED CHARWIDTH 10;
userWriteOffDetail (id) = GROUP AGGR UserWriteOffDetail userWriteOffDetail BY id (userWriteOffDetail);

importWriteOffFull (STRING indexDoc) {

    imported (WriteOff i) <- NULL;         
    imported (WriteOff d) <- NULL;            

    filterSql() <- 'd.DocType = \'' + getWord(indexDoc,'~',1) + '\' AND b.DocType(+)= d.DocType AND b.id(+) = d.id AND d.id = \'' + getWord(indexDoc,'~',2) + '\''; 
    
    sqlString() <- 'Select d.ID, d.doctype, d.opcode, d.userop, UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(d.bornin)), d.createdat, d.docstate, d.clientindex, d.locationfrom, d.Commentary from Supermag.SMDocuments d, Supermag.SMWayBillsOut b where ' + filterSql();    

    IF enableLogImport() THEN logToFile('supermag', CONCAT '\n', 'Импорт накладные (закупка)', sqlString());
    
    EXTERNAL SQL connectionString() EXEC sqlString() TO file;
       
    IMPORT TABLE FROM file() TO docNumber, docType, operCode, userOp, bornIn, docDate, docState, clientIndex, locationFrom, comment;
    
    idDoc(INTEGER i) <- STRING[50](CONCAT '', STRING(docType(i)), STRING(docNumber(i)));
    codeOperation (INTEGER i) <- CONCAT '~', STRING(docType(i)), STRING(operCode(i)), STRING(userOp(i)) IF idDoc(i);
           
    IF NOT userWriteOff(idDoc(0)) AND NOT docState(0) = 1 THEN NEW o = UserWriteOff {  id(o) <- idDoc(0); }
              
    FOR UserWriteOff doc == userWriteOff(idDoc(INTEGER i)) DO {       
        number[Document](doc) <- STRING[48](docNumber(i));
        bornin(doc) <- bornIn(i);
        operation(doc) <- operation1Supermag(codeOperation(i));
        supplier(doc) <- legalEntity(stock(ISTRING[100] (locationFrom(i))));
        supplierStock(doc) <- stock(ISTRING[100] (locationFrom(i)));
        customer(doc) <- legalEntity(STRING(clientIndex(i)));
        customerStock(doc) <- stock(ISTRING[100] (clientIndex(i)));
        date(doc) <- DATE (docDate(i));  
        time(doc) <- OVERRIDE time(doc), 09:00;
        imported(doc) <- TRUE;
    }  
    
    FOR UserWriteOff doc == userWriteOff(idDoc(INTEGER i)) DO {       
        CASE WHEN docState(0) = 0 THEN {
            isPosted(doc) <- NULL;
            isClosed(doc) <- TRUE;                
        }
        WHEN docState(0) = 1 THEN {
            isPosted(doc) <- NULL;
            isClosed(doc) <- NULL;                        
        } 
        WHEN docState(0) = 2 THEN {
            isPosted(doc) <- IF (docType(0) = 'FA' OR docType(0) = 'LA') THEN TRUE ELSE NULL;
            isClosed(doc) <- NULL;;                
        } 
        WHEN docState(0) = 3 THEN {
            isPosted(doc) <- TRUE;
//            isClosed(doc) <- TRUE;        
        } 
    }      
    
  //  overImportSaleInvoice();

    //импорт спецификаций
    sqlString() <- 'SELECT d.ID, d.DOCTYPE, d.LOCATIONFROM, ds.SPECITEM, ds.ARTICLE, ds.QUANTITY, ds.ITEMPRICE, ds.ITEMPRICENOTAX, ds.TOTALPRICE, ds.TOTALPRICENOTAX, dt.TAXRATE, dt.TAXSUM, dby.MANUFACTURERSPRICE, dby.RETAILPRICE, dmis.QUANTBYDOC ' + 
    'FROM Supermag.SMDocuments d, Supermag.SMWayBillsOut b, Supermag.SMSpec ds, Supermag.SMSPECTAX dt, Supermag.SMSPECBY dby, Supermag.SLSPECQMISMATCH dmis ' + 
    'WHERE ds.DocType = d.DocType AND ds.DocId = d.id AND ' + 
    'dt.DocType(+) = ds.DocType AND dt.DocId(+) = ds.docid AND dt.SPECITEM(+) = ds.SPECITEM AND ' + 
    'dby.DocType(+) = ds.DocType AND dby.DocId(+) = ds.docid AND dby.SPECITEM(+) = ds.SPECITEM AND ' + 
    'dmis.DocType(+) = ds.DocType AND dmis.DocId(+) = ds.docid AND dmis.SPECITEM(+) = ds.SPECITEM AND ' + 
    filterSql()+' ORDER BY ds.doctype, ds.docid, ds.specitem';    

    IF enableLogImport() THEN logToFile('supermag', CONCAT '\n', 'Импорт накладные (продажа)', sqlString());

    EXTERNAL SQL connectionString() EXEC sqlString() TO file;

    IMPORT TABLE FROM file() TO docNumber, docType, locationFrom, specItem, idItem, quantity, itemPrice, itemPriceNoTax, totalPrice, totalPriceNoTax, taxRate, taxSum, priceManufacturer, retailPrice, blankquantity;

    idDoc(INTEGER i) <- STRING[50](CONCAT '', docType(i), docNumber(i)) WHERE docNumber(i) AND docType(i);
    idDet(INTEGER i) <- STRING[50](CONCAT '~', idDoc(i), specItem(i)) WHERE idDoc(i) AND specItem(i);

    FOR userWriteOff(idDoc(INTEGER i)) AND NOT userWriteOffDetail(idDet(i)) DO NEW det = UserWriteOffDetail {
        userWriteOff(det) <- userWriteOff(idDoc(i));
        id(det) <- idDet(i);
    }

    FOR UserWriteOffDetail det = userWriteOffDetail(idDet(INTEGER i)) DO {
        sku(det) <- item(idItem(i));
        quantity(det) <- quantity(i);
//        invoicePrice(det) <- NUMERIC[16,4](itemPrice(i));
        price(det) <- NUMERIC[16,4](itemPriceNoTax(i));
  //      invoiceSum(det) <- NUMERIC[16,4](totalPrice(i));
        sum(det) <- NUMERIC[16,4](totalPriceNoTax(i));
//        VATSum(det) <- taxSum(i);
   //     VAT(det) <- OVERRIDE valueCurrentVAT(countrySupplierStock(det), taxRate(i)), VAT(sku(det));
//        valueVAT(det) <- taxRate(i);
        dataIndex(det) <- specItem(i);
 //       retailVAT(det) <- VAT(sku(det));
 //       valueRetailVAT(det) <- OVERRIDE valueRetailVAT(det), calcSetValueRetailVAT(det);         
        retailPrice(det) <- OVERRIDE retailPrice(i), retailPrice(det), retailPricingPriceA(sku(det), stock(ISTRING[100] (locationFrom(i))), currentDateTime());
 //       shipmentPrice(det) <- retailPrice(det);
  //      manufacturingPrice(det) <- priceManufacturer(i); 
        imported(det) <- TRUE;
    }

 //   DELETE Sale.UserInvoiceDetail det WHERE det IS UserInvoiceDetail AND imported(userInvoice(det)) AND NOT imported(det);

 //   executeLocalEvents('UserWriteOff');

    APPLY;               


}
importWriteOffStatus 'Изменение сортности' (STRING indexDoc, STRING idDoc) {
    filterSql() <- 'd.DocType = \'' + getWord(indexDoc,'~',1) + '\' AND d.id = \'' + getWord(indexDoc,'~',2) + '\''; 
    
    sqlString() <- 'Select d.ID, d.doctype, d.opcode, d.userop, UTL_RAW.CAST_TO_VARCHAR2(UTL_ENCODE.BASE64_ENCODE(d.bornin)), d.docstate from Supermag.SMDocuments d WHERE ' + filterSql();    
    
    IF enableLogImport() THEN logToFile('supermag', CONCAT '\n', 'Импорт изменение остатков', sqlString());
    
    EXTERNAL SQL connectionString() EXEC sqlString() TO file;
 //   MESSAGE sqlString();
       
    IMPORT TABLE FROM file() TO docNumber, docType, operCode, userOp, bornIn, docState;
        
    FOR UserWriteOff doc == userWriteOff(idDoc) DO {  
        CASE WHEN docState(0) = 0 THEN {
            isPosted(doc) <- NULL;
            isClosed(doc) <- TRUE;                
        }
        WHEN docState(0) = 1 THEN {
            isPosted(doc) <- NULL;
            isClosed(doc) <- NULL;                        
        } 
        WHEN docState(0) = 2 THEN {
            isPosted(doc) <- TRUE IF (docType(0) = 'FA' OR docType(0) = 'LA');
            isClosed(doc) <- NULL;;                
        } 
        WHEN docState(0) = 3 THEN {
            isPosted(doc) <- TRUE;
//            isClosed(doc) <- TRUE;        
        } 
    }
    
    APPLY;
}

importWriteOffs () + {
    LOCAL indexDoc = STRING ();
    LOCAL idDoc = STRING ();
    
    FOR [GROUP SUM 1 BY indexDoc(INTEGER i) IF operation1Supermag(codeOperation(i)) IS WriteOff.Operation  AND bornIn(i) = baseIDSupermag()](STRING indexDoc) NOINLINE DO  {
        idDoc() <- CONCAT '', getWord(docTypeSupermag(operation1Supermag(codeOperation(indexDoc))),';',1), getWord(indexDoc,'~',2);         
        indexDoc() <- indexDoc;     
        IF userWriteOff(idDoc()) THEN
        NEWSESSION NESTED (indexDoc, idDoc){            
            importWriteOffStatus(indexDoc(), idDoc());
        } 
    }
    
//    FOR [GROUP SUM 1 BY indexDoc(INTEGER i) IF operation2Supermag(codeOperation(i)) IS WriteOff.Operation AND bornIn(i) = baseIDSupermag()](STRING indexDoc) NOINLINE DO  {
//        idDoc() <- CONCAT '', getWord(docTypeSupermag(operation2Supermag(codeOperation(indexDoc))),';',1), getWord(indexDoc,'~',2);         
//        indexDoc() <- indexDoc;     
//        IF userWriteOff(idDoc()) THEN
//        NEWSESSION NESTED (indexDoc, idDoc){            
//            importWriteOffStatus(indexDoc(), idDoc());
//        } 
//    }
}
