MODULE ImportPurchaseInvoice;

REQUIRE System,
        ImportDocument,
        Item,
        PurchaseInvoice;

customImport = ABSTRACT BOOLEAN ();
importPurchaseAction 'Импортировать накладную' ABSTRACT LIST (Purchase.UserInvoice);
importPurchaseInvoicesAction 'Импортировать накладные' ABSTRACT LIST ();
importPurchaseInvoicesDirectoryAction 'Импортировать накладные из папки' ABSTRACT LIST ();
importPurchaseInvoicesEmailAction  'Импортировать накладные из почты' ABSTRACT LIST ();

importPurchaseDataAction 'Импортировать накладную'  INTERNAL  'lsfusion.erp.integration.universal.purchaseinvoice.ImportPurchaseInvoiceAction' (Purchase.UserInvoice);
importPurchaseAction(Purchase.UserInvoice invoice) + { IF NOT customImport() THEN importPurchaseDataAction(invoice); }

importType = DATA ImportType(UserInvoice);
nameImportType 'Тип импорта' (UserInvoice userInvoice) = name(importType(userInvoice));

importPurchaseInvoicesDataAction 'Импортировать накладные'  INTERNAL  'lsfusion.erp.integration.universal.purchaseinvoice.ImportPurchaseInvoicesAction' ();
importPurchaseInvoicesAction() + { IF NOT customImport() THEN importPurchaseInvoicesDataAction(); }

importTypeUserInvoices = DATA ImportType();
nameImportTypeUserInvoices 'Тип импорта' () = name(importTypeUserInvoices());

importPurchaseInvoicesDirectoryDataAction 'Импортировать накладные из папки'  INTERNAL  'lsfusion.erp.integration.universal.purchaseinvoice.ImportPurchaseInvoicesDirectoryAction' ();
importPurchaseInvoicesDirectoryAction() + { IF NOT customImport() THEN importPurchaseInvoicesDirectoryDataAction(); }

importPurchaseInvoicesEmailDataAction 'Импортировать накладные из почты'  INTERNAL  'lsfusion.erp.integration.universal.purchaseinvoice.ImportPurchaseInvoicesEmailAction' ();
importPurchaseInvoicesEmailAction() + { IF NOT customImport() THEN importPurchaseInvoicesEmailDataAction(); }

importPurchaseInvoicesEmailLastDays 'За сколько дней импортировать накладные из почты' = DATA INTEGER();
skip(AttachmentEmail ae) = importPurchaseInvoicesEmailLastDays() AND (daysBetweenDates(currentDate(), DATE (dateTimeSent(email(ae)))) > importPurchaseInvoicesEmailLastDays());

ignoreInvoicesAfterDocumentsClosedDate 'Не принимать инвоисы по закрытым документам' = DATA BOOLEAN ();

original 'Файл оригинала накладной'  = DATA FILE (Purchase.Invoice);
saveOriginal 'Загрузить файл оригинала накладной' (Purchase.Invoice i)  { INPUT =original(i) CHANGE; }
openOriginal 'Просмотреть оригинал накладной' (Purchase.Invoice i)  { open(original(i)); }

countDaysClearPurchaseInvoiceCustomfiles 'За сколько дней хранить файлы импорта(накладная-закупка)' = DATA INTEGER (); 

EXTEND FORM options 
    PROPERTIES countDaysClearPurchaseInvoiceCustomfiles();
    
DESIGN options { 
    log { 
        MOVE PROPERTY(countDaysClearPurchaseInvoiceCustomfiles());
    }
}
        
clearApplicationLog () + { 
    NEWSESSION {
        IF countDaysClearPurchaseInvoiceCustomfiles() THEN {
            original(Purchase.Invoice i) <- NULL IF date(i) <= subtract(currentDate(), countDaysClearPurchaseInvoiceCustomfiles());
        }
        apply();
    } 
}

autoImportEmail 'E-mail(ы) поставщика' =  DATA STRING[500](ImportType);
autoImportAccount 'E-mail аккаунт' =  DATA Email.Account(ImportType);
autoImportNameAccount 'E-mail аккаунт' (ImportType importType) = name(autoImportAccount(importType));
autoImportCheckInvoiceExistence 'Проверять существование накладной' = DATA BOOLEAN (ImportType);
completeIdItemAsEAN 'Дополнять код товара контрольным символом как штрихкод' = DATA BOOLEAN (ImportType);

currentInvoice = DATA LOCAL Purchase.Invoice ();
cancelSession 'Отменить изменения' = DATA LOCAL BOOLEAN (); 
script 'Пост-скрипт' = DATA TEXT (ImportType);
customScript ABSTRACT (ImportType);
hasCustomScript = ABSTRACT BOOLEAN(ImportType);
needExecuteScript(importType) = (script(importType) AND length(script(importType)) > 0) OR hasCustomScript(importType);
executeScript (ImportType i)  { 
    IF script(i) THEN 
        EVAL 'run() \{' + script(i) + ';\}';
    customScript(i); 
}


EXTEND FORM importTypes
PROPERTIES(i) READONLY SHOWIF autoImport(i) autoImportEmail, autoImportNameAccount, 
                              autoImportCheckInvoiceExistence
PROPERTIES(i) READONLY completeIdItemAsEAN                              
;

EXTEND FORM importType
PROPERTIES(i) SHOWIF autoImport(i) autoImportNameAccount, autoImportEmail,
                                 autoImportCheckInvoiceExistence
PROPERTIES(i) completeIdItemAsEAN , script

;

DESIGN importType {
        autoImportContainer {
            MOVE PROPERTY(autoImportNameAccount(i));
            MOVE PROPERTY(autoImportEmail(i));
            MOVE PROPERTY(autoImportCheckInvoiceExistence(i));
        }
        tabbedContainer {
            NEW scriptContainer {
                caption = 'Пост-скрипт';
                MOVE PROPERTY(script(i)) { fill = 1; panelCaptionVertical = TRUE; };
            }
        }
}

EXTEND FORM userInvoice
    PROPERTIES(i) importPurchaseAction DRAW d TOOLBAR
    PROPERTIES(i) nameImportType
    PROPERTIES(i) saveOriginal, openOriginal 
;

DESIGN userInvoice{
    import {
        NEW universalImport {
            caption = 'Универсальный импорт';
            MOVE PROPERTY(nameImportType(i));
            MOVE PROPERTY(importPurchaseAction(i));
        }
        NEW origin {
            caption = 'Оригинал накладной';
            MOVE PROPERTY(saveOriginal(i));
            MOVE PROPERTY(openOriginal(i));
        }
    }
}

EXTEND FORM invoices
    PROPERTIES() DRAW d TOOLBAR importPurchaseInvoicesAction, nameImportTypeUserInvoices, 
                 importPurchaseInvoicesDirectoryAction, importPurchaseInvoicesEmailAction,
                 ignoreInvoicesAfterDocumentsClosedDate, importPurchaseInvoicesEmailLastDays
;

DESIGN invoices{
    documentDetail {
        NEW importUniversal {
            caption = 'Импорт';
            MOVE PROPERTY(nameImportTypeUserInvoices());
            MOVE PROPERTY(importPurchaseInvoicesAction());            
            MOVE PROPERTY(importPurchaseInvoicesDirectoryAction());
            NEW importEmail {
                caption = 'Из почты';
                alignment = CENTER;
                MOVE PROPERTY(importPurchaseInvoicesEmailAction());
                MOVE PROPERTY(ignoreInvoicesAfterDocumentsClosedDate());
                MOVE PROPERTY(importPurchaseInvoicesEmailLastDays());
            }
        }
    }
}

EXTEND FORM integrationData
    PROPERTIES() TOOLBAR importPurchaseInvoicesDirectoryAction, importPurchaseInvoicesEmailAction,
                 ignoreInvoicesAfterDocumentsClosedDate, importPurchaseInvoicesEmailLastDays
;

DESIGN integrationData {
    pane { 
        actionsContainer {
            MOVE PROPERTY(importPurchaseInvoicesDirectoryAction());
            NEW importEmail {
                caption = 'Из почты';
                alignment = CENTER;
                MOVE PROPERTY(importPurchaseInvoicesEmailAction());
                MOVE PROPERTY(ignoreInvoicesAfterDocumentsClosedDate());
                MOVE PROPERTY(importPurchaseInvoicesEmailLastDays());
            }
        }
    }
}

CONSTRAINT CHANGED(importType(UserInvoice invoice)) AND (supplier(invoice) != autoImportSupplier(importType(invoice)))
    CHECKED BY importType[UserInvoice] MESSAGE 'У накладной и типа импорта не совпадают поставщики';
    
CONSTRAINT CHANGED(importType(UserInvoice invoice)) AND (supplierStock(invoice) != autoImportSupplierStock(importType(invoice)))
    CHECKED BY importType[UserInvoice] MESSAGE 'У накладной и типа импорта не совпадают склады поставщиков';

CONSTRAINT CHANGED(importType(UserInvoice invoice)) AND (customer(invoice) != autoImportCustomer(importType(invoice)))
    CHECKED BY importType[UserInvoice] MESSAGE 'У накладной и типа импорта не совпадают покупатели';
    
CONSTRAINT CHANGED(importType(UserInvoice invoice)) AND (customerStock(invoice) != autoImportCustomerStock(importType(invoice)))
    CHECKED BY importType[UserInvoice] MESSAGE 'У накладной и типа импорта не совпадают склады покупателей';
    
CONSTRAINT importType(UserInvoice invoice) AND (operation(invoice) != autoImportOperation(importType(invoice))) AND
   (CHANGED(importType(invoice)) OR CHANGED(operation(invoice))) MESSAGE 'У накладной и типа импорта не совпадают операции';    

overCopy (ImportType i, ImportType t) + {
    completeIdItemAsEAN(i) <- completeIdItemAsEAN(t);
    autoImportAccount(i) <- autoImportAccount(t);
    autoImportCheckInvoiceExistence(i) <- autoImportCheckInvoiceExistence(t);
    script(i) <- script(t);
}