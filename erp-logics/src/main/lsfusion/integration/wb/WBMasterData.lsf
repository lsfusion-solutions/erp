MODULE WBMasterData;

REQUIRE WB, Hierarchy;

NAMESPACE WB;

CLASS ItemGroup 'Родительская категория товаров';

id 'Код' = DATA STRING (ItemGroup);
itemGroup (id) = GROUP AGGR ItemGroup ig BY id(ig);
name 'Наименование' = DATA STRING (ItemGroup);
isVisible 'Активный' = DATA BOOLEAN (ItemGroup);

errorText = DATA LOCAL STRING();
name = DATA LOCAL STRING(INTEGER);
id = DATA LOCAL STRING (INTEGER);
isVisible = DATA LOCAL STRING(INTEGER);
additionalErrors = DATA LOCAL STRING();
error = DATA LOCAL STRING();
parentName = DATA LOCAL STRING(INTEGER);
subjectID = DATA LOCAL STRING (INTEGER);
parentID = DATA LOCAL STRING (INTEGER);
subjectName = DATA LOCAL STRING(INTEGER);
data = DATA LOCAL STRING(INTEGER);
fullName = DATA LOCAL STRING(INTEGER);
tnved = DATA LOCAL STRING(INTEGER);
isKiz = DATA LOCAL STRING(INTEGER);

FORM importItemGroup
    PROPERTIES() errorText, additionalErrors, error

    OBJECTS data = INTEGER
    PROPERTIES(data) name, id, isVisible
;

FORM additionalErrors
    PROPERTIES() additionalErrors
;

FORM errorText
    PROPERTIES() errorText
;

getItemGroup 'Получить родительские категории товаров' () {
    NEWSESSION {
        setHttpHeadersIS();
        LOCAL message = STRING ();
        LOCAL response = FILE();
        LOCAL error = STRING ();
        LOCAL errorText = STRING ();
        LOCAL status = STRING ();
             
        logToFile('WB', 'GET: '+ url(CategoryRequest.content) + '/content/v2/object/parent/all');
        TRY {
            EXTERNAL HTTP GET url(CategoryRequest.content) + '/content/v2/object/parent/all' HEADERS httpHeaders TO response;
            fileToString(response());
            logToFile('WB', resultString());
            IMPORT importItemGroup JSON FROM response();
            
            FOR INTEGER i = [GROUP MAX INTEGER i1 BY id(i1)](STRING id) AND NOT itemGroup(id) INLINE DO NEW ig = ItemGroup {
                id(ig) <- id(i);
            }
            isVisible(ItemGroup ig) <- NULL WHERE  isVisible(ig);
            FOR INTEGER i = [GROUP MAX INTEGER i1 BY id(i1)](STRING id) AND ItemGroup ig == itemGroup(id) INLINE DO {
                name(ig) <- name(i);
                isVisible(ig) <- isVisible(i) == 'true';
            }
            message() <- messageStatusHTTP(STRING(statusHttp()));
        } CATCH {
            logToFile('WB', messageCaughtException());
            message() <- OVERRIDE messageStatusHTTP(STRING(statusHttp())), messageCaughtException();
        } FINALLY {
            afterSendRequestIS();
            MESSAGE '<h3>Получить родительские категории товаров</h3>' NOWAIT;
            MESSAGE message() NOWAIT;
            APPLY;
        }
    }
}

FORM dialogCategoryItemGroups 'Родительские категории товаров'
    PROPERTIES getItemGroup()
    OBJECTS ig = ItemGroup
    PROPERTIES(ig) READONLY id, name, isVisible
    PROPERTIES(ig) NEWSESSION NEW, EDIT, DELETE
    ORDERS name(ig)

    LIST ItemGroup OBJECT ig
;

DESIGN dialogCategoryItemGroups {
    BOX {
        size = (1280, 800);
        NEW rootContainer BEFORE TOOLBARBOX {
            fill = 1;
            MOVE PROPERTY (getItemGroup());
            MOVE BOX(ig); 
        }
    }
}

CLASS Tnved 'ТНВЭД-код';

id 'ТНВЭД-код' = DATA STRING (Tnved);
tnved (id) = GROUP AGGR Tnved tn BY id(tn);
isKiz 'КИЗ' = DATA BOOLEAN (Tnved);

FORM importTnved
    PROPERTIES() errorText, additionalErrors, error

    OBJECTS data = INTEGER
    PROPERTIES(data) tnved, isKiz
;

CLASS ItemSubGroup 'Список предметов';

id 'Код' = DATA STRING (ItemSubGroup);
itemSubGroup (id) = GROUP AGGR ItemSubGroup sg BY id(sg);

name 'Наименование' = DATA STRING (ItemSubGroup);
itemGroup = DATA ItemGroup (ItemSubGroup) NONULL DELETE;
idItemGroup 'Код родительской категории товаров' (ItemSubGroup sg) = id(itemGroup(sg)) CHARWIDTH 10;
nameItemGroup 'Наименование родительской категории товаров' (ItemSubGroup sg) = name(itemGroup(sg)) CHARWIDTH 40;
in 'Вкл.' = DATA BOOLEAN (ItemSubGroup, Tnved);

in 'Вкл.' = DATA BOOLEAN (ItemSubGroup, ItemGroup);

FORM importItemSubGroup
    PROPERTIES() errorText, additionalErrors, error

    OBJECTS data = INTEGER
    PROPERTIES(data) parentName, subjectID, parentID, subjectName
;

dataGetItemSubGroupLimit = DATA INTEGER ();
getItemSubGroupLimit 'Лимит для получения списка предметов' = OVERRIDE dataGetItemSubGroupLimit(), 1000;

getItemSubGroup 'Получить список предметов родительской категории' (ItemGroup ig) {
    NEWSESSION {
        setHttpHeadersIS();
        LOCAL message = STRING ();
        LOCAL response = FILE();
        LOCAL error = STRING ();
        LOCAL status = STRING ();

        logToFile('WB', 'GET: '+ url(CategoryRequest.content) + '/content/v2/object/all');
        
        TRY {
            EXTERNAL HTTP GET url(CategoryRequest.content) + '/content/v2/object/all' HEADERS httpHeaders PARAMS 'limit=' + getItemSubGroupLimit() + '&parentID=' + id(ig) TO response;
            fileToString(response());
            logToFile('WB', resultString());
            IMPORT importItemSubGroup JSON FROM response();

            FOR INTEGER i = [GROUP MAX INTEGER i1 BY parentID(i1), subjectID(i1)](STRING parentId, STRING subjectId) AND itemGroup(parentId) == ig
                AND NOT itemSubGroup(subjectId) INLINE DO NEW sg = ItemSubGroup {
                id(sg) <- subjectId;
                name(sg) <- subjectName(i);
            }
            FOR INTEGER i = [GROUP MAX INTEGER i1 BY parentID(i1), subjectID(i1)](STRING parentId, STRING subjectId) AND itemGroup(parentId) == ig
                AND ItemSubGroup sg == itemSubGroup(subjectId) INLINE DO {
                itemGroup(sg) <- ig;
            }
            message() <- messageStatusHTTP(STRING(statusHttp()));
        } CATCH {
            logToFile('WB', messageCaughtException());
            message() <- OVERRIDE messageStatusHTTP(STRING(statusHttp())), messageCaughtException();
        } FINALLY {
            afterSendRequestIS();
            MESSAGE '<h3>Получить список предметов для выбранной родительской категории</h3>' NOWAIT;
            MESSAGE message() NOWAIT;
            APPLY;
        }
    }
}

getItemSubGroup 'Получить список предметов' () {
    NEWSESSION {
        MESSAGE '<h3>Предметы получаются только по существующим родительским категориям товаров.</h3>' NOWAIT;
        FOR ItemGroup ig IS ItemGroup DO {
            setHttpHeadersIS();
            LOCAL message = STRING ();
            LOCAL response = FILE();
            LOCAL error = STRING ();
            LOCAL status = STRING ();

            logToFile('WB', 'GET: ' + url(CategoryRequest.content) + '/content/v2/object/all');
            TRY {
                EXTERNAL HTTP GET url(CategoryRequest.content) + '/content/v2/object/all' HEADERS httpHeaders PARAMS 'limit=' + getItemSubGroupLimit() + '&parentID=' + id(ig) TO response;
                fileToString(response());
                logToFile('WB', resultString());
                IMPORT importItemSubGroup JSON FROM response();

                FOR INTEGER i = [GROUP MAX INTEGER i1 BY parentID(i1), subjectID(i1)](STRING parentId, STRING subjectId) AND itemGroup(parentId) == ig
                    AND NOT itemSubGroup(subjectId) INLINE DO NEW sg = ItemSubGroup {
                    id(sg) <- subjectId;
                    name(sg) <- subjectName(i);
                }
                FOR INTEGER i = [GROUP MAX INTEGER i1 BY parentID(i1), subjectID(i1)](STRING parentId, STRING subjectId) AND itemGroup(parentId) == ig
                    AND ItemSubGroup sg == itemSubGroup(subjectId) INLINE DO {
                    itemGroup(sg) <- ig;
                }
                message() <- messageStatusHTTP(STRING(statusHttp()));
            } CATCH {
                logToFile('WB', messageCaughtException());
                message() <- OVERRIDE messageStatusHTTP(STRING(statusHttp())), messageCaughtException();
            } FINALLY {
                afterSendRequestIS();
                MESSAGE '<h3>Получить список предметов</h3>' NOWAIT;
                MESSAGE message() NOWAIT;
                APPLY;
            }
        }    
    }
}

getTnved 'Получить ТНВЭД-коды' () {
    NEWSESSION {
        FOR ItemSubGroup sg IS ItemSubGroup DO {
            setHttpHeadersIS();
            LOCAL message = STRING ();
            LOCAL response = FILE();
            LOCAL error = STRING ();
            LOCAL errorText = STRING ();
            LOCAL status = STRING ();

            logToFile('WB', 'GET: '+ url(CategoryRequest.content) + '/content/v2/directory/tnved');
            TRY {
                EXTERNAL HTTP GET url(CategoryRequest.content) + CONCAT '?', '/content/v2/directory/tnved', ('subjectID='+id(sg)) HEADERS httpHeaders TO response;
                fileToString(response());
                logToFile('WB', resultString());
                IMPORT importTnved JSON FROM response();

                FOR INTEGER i = [GROUP MAX INTEGER i1 BY tnved(i1)](STRING tnved) AND NOT tnved(tnved) INLINE DO NEW tn = Tnved {
                    id(tn) <- tnved;
                }

                in(sg, Tnved tn) <- NULL WHERE in(sg, tn); //обнуляем в случае если стоял TRUE, а в ответе приходит NULL  
                isKiz(Tnved tn) <- NULL WHERE isKiz(tn); 
                FOR INTEGER i = [GROUP MAX INTEGER i1 BY tnved(i1)](STRING tnved) AND Tnved tn == tnved(tnved) INLINE DO {
                    in(sg, tn) <- TRUE;
                    isKiz(tn) <- TRUE IF isKiz(i) == 'true';
                }
                message() <- messageStatusHTTP(STRING(statusHttp()));
            } CATCH {
                logToFile('WB', messageCaughtException());
                message() <- OVERRIDE messageStatusHTTP(STRING(statusHttp())), messageCaughtException();
            } FINALLY {
                afterSendRequestIS();
                MESSAGE '<h3>Получить ТНВЭД-коды</h3>' NOWAIT;
                MESSAGE message() NOWAIT;
                APPLY;
            }
        }
        
    }
}

FORM dialogTnved 'ТНВЭД-коды'
    PROPERTIES getTnved()
    OBJECTS tn = Tnved
    PROPERTIES(tn) READONLY id, isKiz
    PROPERTIES(tn) NEWSESSION NEW, EDIT, DELETE
    ORDERS id(tn)

    LIST Tnved OBJECT tn
;

DESIGN dialogTnved{
    BOX {
        size = (1280, 800);
        NEW rootContainer BEFORE TOOLBARBOX {
            fill = 1;
            MOVE PROPERTY (getTnved());
            MOVE BOX(tn) {
            }
        }
    }
}

getTnved 'Получить ТНВЭД-коды' (ItemSubGroup sg) {
    NEWSESSION {
            setHttpHeadersIS();
            LOCAL message = STRING ();
            LOCAL response = FILE();
            LOCAL error = STRING ();
            LOCAL errorText = STRING ();
            LOCAL status = STRING ();

            logToFile('WB', 'GET: '+ url(CategoryRequest.content) + '/content/v2/directory/tnved');
            TRY {
                EXTERNAL HTTP GET url(CategoryRequest.content) + CONCAT '?', '/content/v2/directory/tnved', ('subjectID='+id(sg)) HEADERS httpHeaders TO response;
                fileToString(response());
                logToFile('WB', resultString());
                IMPORT importTnved JSON FROM response();

                FOR INTEGER i = [GROUP MAX INTEGER i1 BY tnved(i1)](STRING tnved) AND NOT tnved(tnved) INLINE DO NEW tn = Tnved {
                    id(tn) <- tnved;
                }

                in(sg, Tnved tn) <- NULL WHERE in(sg, tn); //обнуляем в случае если стоял TRUE, а в ответе приходит NULL  
                isKiz(Tnved tn) <- NULL WHERE isKiz(tn); 
                FOR INTEGER i = [GROUP MAX INTEGER i1 BY tnved(i1)](STRING tnved) AND Tnved tn == tnved(tnved) INLINE DO {
                    in(sg, tn) <- TRUE;
                    isKiz(tn) <- TRUE IF isKiz(i) == 'true';
                }
                message() <- messageStatusHTTP(STRING(statusHttp()));
            } CATCH {
                logToFile('WB', messageCaughtException());
                message() <- OVERRIDE messageStatusHTTP(STRING(statusHttp())), messageCaughtException();
            } FINALLY {
                afterSendRequestIS();
                MESSAGE '<h3>Получить ТНВЭД-коды</h3>' NOWAIT;
                MESSAGE message() NOWAIT;
                APPLY;
            }
    }
}

FORM dialogItemSubGroups 'Список предметов'
    PROPERTIES getItemGroup()
    OBJECTS ig = ItemGroup
    PROPERTIES(ig) READONLY id, name, isVisible
    PROPERTIES(ig) NEWSESSION NEW, EDIT, DELETE
    ORDERS name(ig)
    
    PROPERTIES getItemSubGroup()
    OBJECTS sg = ItemSubGroup
    PROPERTIES(sg) READONLY id, name, idItemGroup, nameItemGroup
    PROPERTIES(sg) NEWSESSION NEW, EDIT, DELETE
    ORDERS name(sg)
    FILTERS itemGroup(sg)==ig

    LIST ItemSubGroup OBJECT sg
;

DESIGN dialogItemSubGroups {
    BOX {
        size = (1280, 800);
        NEW rootContainer BEFORE TOOLBARBOX {
            fill = 1;
            horizontal = TRUE;
            NEW leftContainer{
                fill=1;
                MOVE PROPERTY(getItemGroup());
                MOVE BOX(ig);
            }
            NEW righContainer{
                fill=1;
                MOVE PROPERTY(getItemSubGroup());
                MOVE BOX(sg);             
            }
        }
    }
}

CLASS Color 'Цвет';

name 'Оттенок' = DATA STRING (Color);
color (id) = GROUP AGGR Color c BY name(c);

@defineHierarchy(Color);

FORM importColors
    PROPERTIES() errorText, additionalErrors, error

    OBJECTS data = INTEGER
    PROPERTIES(data) parentName, name
;

getColors 'Получить список цветов' () {
    NEWSESSION {
        setHttpHeadersIS();
        LOCAL message = STRING ();
        LOCAL response = FILE();
        LOCAL error = STRING ();
        LOCAL errorText = STRING ();
        LOCAL status = STRING ();

        logToFile('WB', 'GET: '+ url(CategoryRequest.content) + '/content/v2/directory/colors');
        TRY {
            EXTERNAL HTTP GET url(CategoryRequest.content) + '/content/v2/directory/colors' HEADERS httpHeaders TO response;
            fileToString(response());
            logToFile('WB', resultString());
            IMPORT importColors JSON FROM response();

            FOR INTEGER i = [GROUP MAX INTEGER i1 BY name(i1)](STRING name) AND NOT color(name) INLINE DO NEW c = Color {
                name(c) <- name(i);
            }

            FOR INTEGER i = [GROUP MAX INTEGER i1 BY name(i1), parentName(i1)](STRING name, STRING parentName) AND Color c == color(name) 
                AND Color parent = color(parentName) INLINE DO {
                parent(c) <- parent;
            }
            message() <- messageStatusHTTP(STRING(statusHttp()));
        } CATCH {
            logToFile('WB', messageCaughtException());
            message() <- OVERRIDE messageStatusHTTP(STRING(statusHttp())), messageCaughtException();
        } FINALLY {
            afterSendRequestIS();
            MESSAGE '<h3>Получить список цветов</h3>' NOWAIT;
            MESSAGE message() NOWAIT;
            APPLY;
        }
    }
}

FORM dialogColors 'Список цветов'
    PROPERTIES getColors()
    TREE treeColors color=Color PARENT parent(color)
    PROPERTIES READONLY name(color), color 'Цвет' = nameParent(color)
    ORDERS name(color)
    PROPERTIES(color) NEWSESSION NEW, EDIT, DELETE
      
    LIST Color OBJECT color
;

DESIGN dialogColors {
    BOX {
        size = (1280, 800);
        NEW rootContainer BEFORE TOOLBARBOX {
            fill = 1;
            MOVE PROPERTY (getColors());
            MOVE BOX(TREE treeColors);        
        }
    }
}

CLASS Kind 'Пол';

data 'Пол' = DATA STRING (Kind);
kind (id) = GROUP AGGR Kind k BY data(k);

FORM importKinds
    PROPERTIES() errorText, additionalErrors, error

    OBJECTS data = INTEGER
    PROPERTIES(data) data EXTID 'value'
;

getKinds 'Получить список полов' () {
    NEWSESSION {
        setHttpHeadersIS();
        LOCAL message = STRING ();
        LOCAL response = FILE();
        LOCAL error = STRING ();
        LOCAL errorText = STRING ();
        LOCAL status = STRING ();

        logToFile('WB', 'GET: '+ url(CategoryRequest.content) + '/content/v2/directory/kinds');
        TRY {
            EXTERNAL HTTP GET url(CategoryRequest.content) + '/content/v2/directory/kinds' HEADERS httpHeaders TO response;
            fileToString(response());
            logToFile('WB', resultString());
            IMPORT importKinds JSON FROM response();

            FOR INTEGER i = [GROUP MAX INTEGER i1 BY data(i1)](STRING data) AND NOT kind(data) INLINE DO NEW k = Kind {
                data(k) <- data(i);
            }
            message() <- messageStatusHTTP(STRING(statusHttp()));
        } CATCH {
            logToFile('WB', messageCaughtException());
            message() <- OVERRIDE messageStatusHTTP(STRING(statusHttp())), messageCaughtException();
        } FINALLY {
            afterSendRequestIS();
            MESSAGE '<h3>Получить список полов</h3>' NOWAIT;
            MESSAGE message() NOWAIT;
            APPLY;
        }
    }
}

FORM dialogKinds 'Список полов'
    PROPERTIES getKinds()
    OBJECTS k = Kind
    PROPERTIES(k) READONLY data
    PROPERTIES(k) NEWSESSION NEW, EDIT, DELETE
    ORDERS data(k)

    LIST Kind OBJECT k
;

DESIGN dialogKinds {
    BOX {
        size = (1280, 800);
        NEW rootContainer BEFORE TOOLBARBOX {
            fill = 1;
            MOVE PROPERTY (getKinds());
            MOVE BOX(k) {
            }
        }
    }
}

CLASS Country 'Страна производства';

name 'Наименование' = DATA STRING (Country);
nameCountry (id) = GROUP AGGR Country c BY name(c);
fullName 'Полное наименование' = DATA STRING (Country);

FORM importCountries
    PROPERTIES() errorText, additionalErrors, error

    OBJECTS data = INTEGER
    PROPERTIES(data) name, fullName
    FILTERS imported(data);

getCountries 'Получить список стран производства' () {
    NEWSESSION {
        setHttpHeadersIS();
        LOCAL message = STRING ();
        LOCAL response = FILE();
        LOCAL error = STRING ();
        LOCAL errorText = STRING ();
        LOCAL status = STRING ();

        logToFile('WB', 'GET: '+ url(CategoryRequest.content) + '/content/v2/directory/countries');
        TRY {
            EXTERNAL HTTP GET url(CategoryRequest.content) + '/content/v2/directory/countries' HEADERS httpHeaders TO response;
            fileToString(response());
            logToFile('WB', resultString());
            IMPORT importCountries JSON FROM response();

            FOR INTEGER i = [GROUP MAX INTEGER i1 BY name(i1)](STRING name) AND NOT nameCountry(name) INLINE DO NEW c = Country {
                name(c) <- name(i);
            }

            FOR INTEGER i = [GROUP MAX INTEGER i1 BY name(i1)](STRING name) AND Country c == nameCountry(name) INLINE DO {
                fullName(c) <- fullName(i);
            }
            message() <- messageStatusHTTP(STRING(statusHttp()));
        } CATCH {
            logToFile('WB', messageCaughtException());
            message() <- OVERRIDE messageStatusHTTP(STRING(statusHttp())), messageCaughtException();
        } FINALLY {
            afterSendRequestIS();
            MESSAGE '<h3>Получить список стран производства</h3>' NOWAIT;
            MESSAGE message() NOWAIT;
            APPLY;
        }
    }
}

FORM dialogCountries 'Страны производства'
    PROPERTIES getCountries()
    OBJECTS c = Country
    PROPERTIES(c) READONLY name, fullName
    PROPERTIES(c) NEWSESSION NEW, EDIT, DELETE
    ORDERS name(c)

    LIST Country OBJECT c
;

DESIGN dialogCountries {
    BOX {
        size = (1280, 800);
        NEW rootContainer BEFORE TOOLBARBOX {
            fill = 1;
            MOVE PROPERTY (getCountries());
            MOVE BOX(c) {
            }
        }
    }
}

CLASS Season 'Сезон';

data 'Сезон' = DATA STRING (Season);
season (id) = GROUP AGGR Season s BY data(s);

FORM importSeasons
    PROPERTIES() errorText, additionalErrors, error

    OBJECTS data = INTEGER
    PROPERTIES(data) data EXTID 'value';

getSeasons 'Получить список сезонов' () {
    NEWSESSION {
        setHttpHeadersIS();
        LOCAL message = STRING ();
        LOCAL response = FILE();
        LOCAL error = STRING ();
        LOCAL errorText = STRING ();
        LOCAL status = STRING ();

        logToFile('WB', 'GET: '+ url(CategoryRequest.content) + '/content/v2/directory/seasons');
        TRY {
            EXTERNAL HTTP GET url(CategoryRequest.content) + '/content/v2/directory/seasons' HEADERS httpHeaders TO response;
            fileToString(response());
            logToFile('WB', resultString());
            IMPORT importSeasons JSON FROM response();

            FOR INTEGER i = [GROUP MAX INTEGER i1 BY data(i1)](STRING data) AND NOT season(data) INLINE DO NEW s = Season {
                data(s) <- data(i);
            }
            message() <- messageStatusHTTP(STRING(statusHttp()));
        } CATCH {
            logToFile('WB', messageCaughtException());
            message() <- OVERRIDE messageStatusHTTP(STRING(statusHttp())), messageCaughtException();
        } FINALLY {
            afterSendRequestIS();
            MESSAGE '<h3>Получить список сезонов</h3>' NOWAIT;
            MESSAGE message() NOWAIT;
            APPLY;
        }
    }
}

FORM dialogSeasons 'Список сезонов'
    PROPERTIES getSeasons()
    OBJECTS s = Season
    PROPERTIES(s) READONLY data
    PROPERTIES(s) NEWSESSION NEW, EDIT, DELETE
    ORDERS data(s)

    LIST Season OBJECT s
;

DESIGN dialogSeasons {
    BOX {
        size = (1280, 800);
        NEW rootContainer BEFORE TOOLBARBOX {
            fill = 1;
            MOVE PROPERTY(getSeasons());
            MOVE BOX(s);
        }
    }
}

CLASS VAT 'Ставка НДС';

data 'Ставка НДС' = DATA STRING (VAT);
vat (id) = GROUP AGGR VAT v BY data(v);

FORM importVAT
    PROPERTIES() errorText, additionalErrors, error

    OBJECTS data = INTEGER
    PROPERTIES(data) data EXTID 'value';
;

getVAT 'Получить список ставок НДС' () {
    NEWSESSION {
        setHttpHeadersIS();
        LOCAL message = STRING ();
        LOCAL response = FILE();
        LOCAL error = STRING ();
        LOCAL errorText = STRING ();
        LOCAL status = STRING ();

        logToFile('WB', 'GET: '+ url(CategoryRequest.content) + '/content/v2/directory/vat');
        TRY {
            EXTERNAL HTTP GET url(CategoryRequest.content) + '/content/v2/directory/vat' HEADERS httpHeaders TO response;
            fileToString(response());
            logToFile('WB', resultString());
            IMPORT importVAT JSON FROM response();

            FOR INTEGER i = [GROUP MAX INTEGER i1 BY data(i1)](STRING data) AND NOT vat(data) INLINE DO NEW v = VAT {
                data(v) <- data(i);
            }
            message() <- messageStatusHTTP(STRING(statusHttp()));
        } CATCH {
            logToFile('WB', messageCaughtException());
            message() <- OVERRIDE messageStatusHTTP(STRING(statusHttp())), messageCaughtException();
        } FINALLY {
            afterSendRequestIS();
            MESSAGE '<h3>Получить список ставок НДС</h3>' NOWAIT;
            MESSAGE message() NOWAIT;
            APPLY;
        }
    }
}

FORM dialogVAT 'Список ставок НДС'
    PROPERTIES getVAT()
    OBJECTS v = VAT
    PROPERTIES(v) READONLY data
    PROPERTIES(v) NEWSESSION NEW, EDIT, DELETE
    ORDERS data(v)

    LIST VAT OBJECT v
;

DESIGN dialogVAT {
    BOX {
        size = (1280, 800);
        NEW rootContainer BEFORE TOOLBARBOX {
            fill = 1;
            MOVE PROPERTY (getVAT());
            MOVE BOX(v) {
            }
        }
    }
}

FORM masterData 'Справочники'
    PROPERTIES getItemGroup()
    OBJECTS ig = ItemGroup
    PROPERTIES(ig) READONLYIF isReadonly() id , name, isVisible
    PROPERTIES(ig) getItemSubGroup GRID 
    ORDERS name(ig)
    PROPERTIES(ig) NEW, DELETE

    OBJECTS sgig = ItemSubGroup
    PROPERTIES(sgig) READONLYIF isReadonly() id, name
    ORDERS name(sgig)
    FILTERS itemGroup(sgig) == ig

    PROPERTIES getItemSubGroup()
    OBJECTS sg = ItemSubGroup
    PROPERTIES(sg) READONLYIF isReadonly() id, name, nameItemGroup, idItemGroup
    PROPERTIES(sg) getTnved GRID
    ORDERS name(sg)
    PROPERTIES(sg) NEW, DELETE

    OBJECTS tnsg = Tnved
    PROPERTIES(tnsg) READONLYIF isReadonly() id, isKiz
    ORDERS id(tnsg)
    FILTERS in(sg, tnsg)

    PROPERTIES getColors()
    TREE treeColors color=Color PARENT parent(color)
    PROPERTIES READONLYIF isReadonly() name(color), color 'Цвет' = nameParent(color)
    PROPERTIES(color) NEW, DELETE
    ORDERS name(color)

    PROPERTIES getKinds()
    OBJECTS k = Kind
    PROPERTIES(k) data READONLYIF isReadonly()
    ORDERS data(k)
    PROPERTIES(k) NEW, DELETE

    PROPERTIES getCountries()
    OBJECTS c = Country
    PROPERTIES(c) READONLYIF isReadonly() name, fullName
    ORDERS name(c)
    PROPERTIES(c) NEW, DELETE

    PROPERTIES getSeasons()
    OBJECTS s = Season
    PROPERTIES(s) data READONLYIF isReadonly()
    ORDERS data(s)
    PROPERTIES(s) NEW, DELETE

    PROPERTIES getVAT()
    OBJECTS v = VAT
    PROPERTIES(v) data READONLYIF isReadonly()
    ORDERS data(v)
    PROPERTIES(v) NEW, DELETE

    PROPERTIES getTnved()
    OBJECTS tn = Tnved
    PROPERTIES(tn) READONLYIF isReadonly() id , isKiz
    ORDERS id(tn)
    PROPERTIES(tn) NEW, DELETE

    OBJECTS sgtn = ItemSubGroup
    PROPERTIES(sgtn) READONLYIF isReadonly() id, name, nameItemGroup, idItemGroup
    ORDERS name(sgtn)
    FILTERS in(sgtn, tn)
;

DESIGN masterData {
    NEW tabContainer {
        tabbed = TRUE;
        fill=1;
        NEW categoryItemGroup {
            caption = 'Родительские категории товаров';
            MOVE PROPERTY (getItemGroup());
            MOVE BOX(ig) {fill = 3;};
            MOVE BOX(sgig);
        }
        NEW categoryItemSubGroup {
            caption = 'Список предметов';
            MOVE PROPERTY (getItemSubGroup());
            MOVE BOX(sg){fill = 3;}
            MOVE BOX(tnsg);
        }
        NEW containerColors {
            caption = 'Цвета';
            MOVE PROPERTY (getColors());
            MOVE BOX(TREE treeColors);
        }
        NEW containerKinds {
            caption = 'Пол';
            MOVE PROPERTY (getKinds());
            MOVE BOX(k);
        }
        NEW containerCountries {
            caption = 'Страны производства';
            MOVE PROPERTY (getCountries());
            MOVE BOX(c);
        }
        NEW containerSeasons {
            caption = 'Сезоны';
            MOVE PROPERTY (getSeasons());
            MOVE BOX(s);
        }
        NEW containerVAT {
            caption = 'Ставки НДС';
            MOVE PROPERTY (getVAT());
            MOVE BOX(v);
        }
        NEW containerTnved {
            caption = 'ТНВЭД-коды';
            MOVE PROPERTY (getTnved());
            MOVE BOX(tn){fill = 3;}
            MOVE BOX(sgtn);
        }
    }
    MOVE TOOLBARBOX;
}

NAVIGATOR {
    WBNavigator {
        NEW masterData;
    }    
}

EXTEND FORM integrationData
    PROPERTIES() getItemSubGroupLimit
;

DESIGN integrationData {
    requestLimits {
        MOVE PROPERTY (getItemSubGroupLimit());
    }
}
