MODULE WBItem;

REQUIRE WBMasterData, System;

NAMESPACE WB;

CLASS Item 'Товар';

id 'Артикул продавца(vendorCode)' = DATA STRING (Item) NONULL IN id;
item (id) = GROUP AGGR Item i BY id(i);
nmID 'Артикул WB' = DATA INTEGER (Item);
itemNM (id) = GROUP AGGR Item i BY nmID(i);
imtID 'Внутренний код WB' = DATA INTEGER (Item);
name 'Наименование' = DATA STRING (Item) NONULL IN id;
description 'Описание' = DATA STRING (Item);
unitName 'Ед.измерения' = DATA STRING (Item);
itemSubGroup = DATA ItemSubGroup (Item) NONULL DELETE;
nameItemSubGroup 'Предмет' (Item i) = name(itemSubGroup(i));
nameItemGroup 'Категория' (Item i) = name(itemGroup(itemSubGroup(i)));
idItemGroup 'Код категории' (Item i) = id(itemGroup(itemSubGroup(i)));
freeItemLimits 'Бесплатный лимит' = DATA STRING ();
paidItemLimits 'Платный лимит' = DATA STRING ();
isTrash 'В корзине' = DATA BOOLEAN (Item);
error 'Ошибка' = DATA BOOLEAN (Item);
errorText 'Текст ошибки' = DATA STRING (Item);
in 'Отм.' = DATA LOCAL BOOLEAN (Item);

length 'Длина, см' = DATA INTEGER (Item);
width 'Ширина, см' = DATA INTEGER (Item);
height 'Высота, см' = DATA INTEGER (Item);
weightBrutto 'Вес, кг' = DATA NUMERIC[10,3] (Item);

CLASS Size 'Размер';

chrtID 'ID размера' = DATA INTEGER (Size);
size (INTEGER id) = GROUP MAX Size s IF chrtID(s) == id;

techSize 'Размер' = DATA STRING (Size) NONULL;
wbSize 'Российский размер' = DATA STRING (Size);
price 'Цена' = DATA INTEGER (Size);
itemWB 'Вкл.' = DATA Item (Size) NONULL DELETE;

CLASS Barcode 'Баркод';
id 'Баркод' = DATA STRING (Barcode);
size = DATA Size (Barcode) NONULL DELETE;

barcode (STRING id, Size size) = GROUP AGGR Barcode b BY id(b), size(b);

skus 'Баркоды' (Size s) = GROUP CONCAT id(Barcode b) IF size(b) == s, ', ' ORDER b;

CLASS ABSTRACT Attribute 'Атрибут';
TABLE attribute (Attribute) FULL;

CLASS AttributeClass 'Тип атрибута';
TABLE attributeClass (AttributeClass);

name '{master.data.name}' (AttributeClass o) = staticCaption(o) IF o IS AttributeClass CHARWIDTH 15;
order = ABSTRACT CASE INTEGER (AttributeClass);

FORM dialogAttributeClasss 'Тип атрибута'
    OBJECTS o = AttributeClass
    PROPERTIES(o) READONLY name, order SHOWIF NULL
    ORDERS order(o)    

    LIST AttributeClass OBJECT o
;

newAttribute 'Новый' ABSTRACT CASE (AttributeClass);
newAttribute 'Новый' () {
    DIALOG dialogAttributeClasss OBJECTS o INPUT DO {
        newAttribute(o);
    }
} TOOLBAR IMAGE 'add.png';

nameClass 'Тип атрибута' (Attribute a) = objectClassName(a) CHARWIDTH 20;

id 'Код' = ABSTRACT STRING[50] (Attribute) MATERIALIZED NONULL INDEXED CHARWIDTH 15 IN id;
attribute 'Атрибут' (STRING[10] id) = GROUP AGGR Attribute a BY id(a);

active 'Вкл.' = ABSTRACT BOOLEAN (Attribute);
isObject 'Объектный' = ABSTRACT BOOLEAN (Attribute);

name 'Наименование атрибута' = ABSTRACT STRING[50] (Attribute) NONULL IN id;
unitName 'Ед.измерения' = DATA STRING (Attribute);

in 'Вкл.' = DATA BOOLEAN (ItemSubGroup, Attribute);
notNull 'Обязательный' = DATA BOOLEAN (ItemSubGroup, Attribute);
popular 'Популярный' = DATA BOOLEAN (ItemSubGroup, Attribute);

value 'Значение' = ABSTRACT STRING (Item, Attribute);
idValue 'id значения' = ABSTRACT STRING (Item, Attribute);
objectValue 'Объект значения' = ABSTRACT Object (Item, Attribute);

CONSTRAINT (DROPPED(value(Item o, Attribute a)) OR SET(in(itemSubGroup(o), a)) AND NOT value(o, a)) AND PREV(notNull(itemSubGroup(o), a)) OR
    SET(o IS Item) AND a IS Attribute AND NOT value(o, a) AND notNull(itemSubGroup(o), a)
    MESSAGE 'Не заполнен обязательный атрибут';

edit 'Редактировать' ABSTRACT (Item, Attribute);
set 'Установить' ABSTRACT (Item, Attribute, STRING);

FORM attributes 'Атрибуты'
    OBJECTS attr = Attribute 
    PROPERTIES (attr) READONLY id, name, nameClass
    PROPERTIES (attr) NEWSESSION EDIT, DELETE
    PROPERTIES NEWSESSION newAttribute() DRAW attr

    FILTERGROUP active
        FILTER 'Активные' active(attr) DEFAULT

    OBJECTS ownerClass = ItemSubGroup
    PROPERTIES in(ownerClass, attr) COLUMNS (ownerClass) HEADER name(ownerClass)

    OBJECTS extraProp = ItemSubGroup
    PROPERTIES name(extraProp) READONLY
    PROPERTIES (extraProp, attr) notNull
;

DESIGN attributes {
    OBJECTS {
        NEW tabbedPane {
            tabbed = TRUE;
            fill = 1;
            MOVE BOX(extraProp) { caption = 'Настройки'; }
        }
    }
}

CLASS MediaFile 'Медиафайл';

item = DATA Item (MediaFile) NONULL DELETE;
index 'Порядок' (MediaFile mf) = PARTITION SUM 1 ORDER mf BY item(mf);
url 'Ссылка на медиафайл' = DATA STRING (MediaFile) CHARWIDTH 30;
posted 'Загружены' = DATA BOOLEAN (MediaFile);

in 'Отм.' = DATA LOCAL BOOLEAN (MediaFile);

FORM mediaFile 'Медиафайл'
    OBJECTS mf = MediaFile
    PROPERTIES(mf) in, posted, index
    PROPERTIES(mf) url

    EDIT MediaFile OBJECT mf
;

WHEN CHANGED(url(MediaFile mf) AND mf IS MediaFile) DO posted(mf) <- NULL;

//https://content-api.wildberries.ru/content/v3/media/save
postMediaFiles 'Загрузить медиафайлы по ссылкам' (Item item) {
    NEWSESSION {
        IF (GROUP SUM 1 IF NOT posted(MediaFile mf) AND mf IS MediaFile AND item(mf) == item) THEN {
            setHttpHeadersIS();
            LOCAL message = STRING ();
            LOCAL response = FILE();
            LOCAL needExport = BOOLEAN (MediaFile);

            needExport(MediaFile mf) <- TRUE WHERE NOT posted(mf) AND item(mf) == item;
            EXPORT JSON FROM 'value' = url(MediaFile mf) WHERE needExport(mf) ORDER index(mf), mf;
            fileToString(exportFile(), 'UTF-8');
            stringToFile('\{"nmId": ' + nmID(item) + ', "data":' + replace(resultString(), '\n', '') + '\}', 'UTF-8', 'json');
            logToFile('WB', 'POST: ' + url(CategoryRequest.content) + '/content/v3/media/save' + '\n' + '\{"nmIDs":' + nmID(item) + ', "data":' + replace(resultString(), '\n', '') + '\}');

            TRY {
                EXTERNAL HTTP POST url(CategoryRequest.content) + '/content/v3/media/save' HEADERS httpHeaders PARAMS resultFile() TO response;
                fileToString(response());
                logToFile('WB', resultString());
                IF statusHttp() == 200 THEN {
                    posted(MediaFile mf) <-TRUE WHERE needExport(mf);
                }
                message() <- messageStatusHTTP(STRING(statusHttp()));
            } CATCH {
                IF statusHttp() == 400 THEN {
                    IMPORT errorText JSON FROM response();
                    extraDescriptionStatusHTTP() <- 'Не удалось загрузить медиафайлы: ' + errorText();
                }
                logToFile('WB', messageCaughtException());
                message() <- OVERRIDE messageStatusHTTP(STRING(statusHttp())), messageCaughtException();
            } FINALLY {
                afterSendRequestIS();
                MESSAGE '<h3>Загрузить медиафайлы по ссылкам</h3>' NOWAIT;
                MESSAGE message() NOWAIT;
                APPLY;
            }
        } ELSE {
            MESSAGE 'Нет медиафайлов для загрузки.';
        }
    }
}

addSize 'Добавить' (Item i) {
    NEW s = Size {
        itemWB(s) <- i;
    }
}

deleteSize 'Удалить' (Item i, Size s) {
    delete(s);
}

FORM barcodes
    PROPERTIES() errorText, additionalErrors, error

    OBJECTS data = INTEGER
    PROPERTIES(data) data EXTID 'value'
;

addBarcode 'Добавить' (Size s) {
    NEW b = Barcode {
        size(b) <- s;

        setHttpHeadersIS();

        LOCAL message = STRING ();
        LOCAL response = FILE();

        stringToFile('\{"count": 1\}', 'UTF-8', 'json');

        logToFile('WB', 'POST: ' + url(CategoryRequest.content) + '/content/v2/barcodes');
        
        TRY {
            EXTERNAL HTTP POST url(CategoryRequest.content) + '/content/v2/barcodes' HEADERS httpHeaders PARAMS resultFile() TO response;
            fileToString(response());
            logToFile('WB', resultString());
            IMPORT barcodes JSON FROM response();
            
            id(b) <- data(0);
            message() <- 'Баркод сгенерирован';
        } CATCH {
            logToFile('WB', messageCaughtException());
            message() <- OVERRIDE messageStatusHTTP(STRING(statusHttp())), messageCaughtException();
        } FINALLY {
            afterSendRequestIS();
            MESSAGE message() NOWAIT;
        }
    }
}

deleteBarcode 'Удалить' (Barcode b) {
    delete(b);
}

FORM item 'Товар'
    OBJECTS i = Item PANEL 
    PROPERTIES(i) id, name, description
    PROPERTIES(i) READONLY nmID, imtID
    PROPERTIES(i) length, width, height, weightBrutto
    PROPERTIES(i) nameItemGroup, nameItemSubGroup, isTrash
    PROPERTIES(i) READONLY error BACKGROUND RGB(255, 51, 51) IF error(i), errorText SHOWIF error(i) 
    ORDERS name(i)

    OBJECTS attr = Attribute
    PROPERTIES value(i, attr) ON CHANGE { edit(i, attr); } SHOWIF in(itemSubGroup(i), attr) COLUMNS (attr) HEADER name(attr)
    PROPERTIES READONLY notNull=notNull(itemSubGroup(i), attr) SHOWIF NULL, name(attr) SHOWIF NULL
    ORDERS notNull DESC, name(attr)
    
    OBJECTS size = Size
    PROPERTIES(size) chrtID READONLY, techSize, wbSize, price, skus READONLY 
    PROPERTIES DRAW size TOOLBAR addSize(i), deleteSize(i, size)
    FILTERS itemWB(size) == i
    
    OBJECTS b = Barcode
    PROPERTIES READONLY id(b)
    PROPERTIES DRAW b TOOLBAR addBarcode(size), deleteBarcode(b)
    FILTERS size(b) == size
    
    OBJECTS mf = MediaFile
//    PROPERTIES(mf) postMediaFile PANEL 
    PROPERTIES(mf) in, posted, index
    PROPERTIES(mf) url
    PROPERTIES(mf) NEW, DELETE
    PROPERTIES postMediaFiles(i) DRAW mf PANEL 
    ORDERS index(mf)
    FILTERS item(mf) == i
    
    OBJECTS i2 = Item
    PROPERTIES(i2) READONLY nmID, imtID
    PROPERTIES(i2) id, name, description
    PROPERTIES(i2) length, width, height, weightBrutto
    PROPERTIES(i2) nameItemGroup, nameItemSubGroup, isTrash
    ORDERS name(i2)
    FILTERS imtID(i) == imtID(i2), 
        i2 != i
    
    EDIT Item OBJECT i
;

DESIGN item {
    BOX {
        NEW itemHeader {
            caption = 'Основные свойства';
            alignment = STRETCH;
            lines = 2;
            MOVE PROPERTY(id(i));
            MOVE PROPERTY(name(i));
            MOVE PROPERTY(description(i));
            MOVE PROPERTY(nmID(i));
            MOVE PROPERTY(imtID(i));
            MOVE PROPERTY(nameItemGroup(i));
            MOVE PROPERTY(nameItemSubGroup(i));
            MOVE PROPERTY(isTrash(i));
            MOVE PROPERTY(length(i));
            MOVE PROPERTY(width(i));
            MOVE PROPERTY(height(i));
            MOVE PROPERTY(weightBrutto(i));
            MOVE PROPERTY(error(i));
            MOVE PROPERTY(errorText(i)) { align = STRETCH; }
        }
        NEW errorContainer{
            align = STRETCH;
            caption = 'Текст ошибки';
            MOVE PROPERTY(errorText(i)) {
                caption = '';
                align = STRETCH;
                height = 50;
                fontSize = 14;
            }
        }        
        NEW containerItemDetail {
            tabbed = TRUE;
            fill = 1;
            NEW itemDetail {
                caption = 'Дополнительные характеристики';
                fill = 1;
                MOVE PROPERTY(value(i, attr)) {
                    class = 'attribute-property';
                    valueClass = 'not-null' IF notNull(itemSubGroup(i), attr) AND NOT value(i, attr);
                }
            }
            MOVE BOX(size) {
                caption = 'Размеры';
                MOVE BOX(b);
            }
            MOVE BOX(mf){
                caption = 'Медиафайлы по ссылкам';
            }
            MOVE BOX(i2){
                caption = 'Объединенные карточки товаров';
            }
        }
    }
    MOVE TOOLBARBOX;
}

// Стили для панели атрибутов
onWebClientInit() + {
    onWebClientInit('attributes.css') <- 30;
}

//------------------------------------ String ----------------------------------------------------------------------//

CLASS AttributeString 'Строковый атрибут' : Attribute;
EXTEND CLASS AttributeClass { string 'Строка' }
newAttribute(AttributeClass c) + WHEN c = AttributeClass.string THEN {
    NEW a = AttributeString {
        edit(a);
    }
};
order(AttributeClass c) += WHEN c == AttributeClass.string THEN 1;
id 'Код' = DATA STRING[50] (AttributeString) NONULL CHARWIDTH 15 IN id;
inactive 'Выкл.' = DATA BOOLEAN (AttributeString);
name 'Наименование' = DATA STRING[50] (AttributeString) NONULL IN id;
id (AttributeString a) += id(a);
active (AttributeString a) += a IS AttributeString AND NOT inactive(a);
name (AttributeString a) += name(a);
value 'Значение' = DATA STRING (Item, AttributeString);
value (Item o, AttributeString a) += value(o, a);
edit (Item o, AttributeString a) + {
    INPUT s = STRING DO {
        value(o, a) <- s;
    }
}
set (Item o, AttributeString a, STRING v) + {
    value(o, a) <- v;
}
// Дополнительные ограничения
regex 'Шаблон (regex)' = DATA STRING (AttributeString) IN id;
CONSTRAINT SETCHANGED(value(Item o, AttributeString i)) AND regex(i) AND NOT regexPatternMatch(value(o, i), regex(i)) 
    MESSAGE CONCAT ' ','Значение атрибута не соответствует шаблону';

FORM attributeString 'Атрибут (строка)'
    OBJECTS attr = AttributeString PANEL
    PROPERTIES(attr) id, name, inactive, regex
    
    EDIT AttributeString OBJECT attr
;
DESIGN attributeString {
    caption = CONCAT ' - ', 'Атрибут (строка)', name(attr);
    OBJECTS {
        NEW constaraints {
            caption = 'Ограничения';
            horizontal = TRUE;
            fill = 1;
            MOVE PROPERTY(regex(attr)){align = START;};
        }
    }
}

//------------------------------------ Integer ----------------------------------------------------------------------//

CLASS AttributeInteger 'Целочисленный атрибут' : Attribute;
EXTEND CLASS AttributeClass { integer 'Целое число' }
newAttribute(AttributeClass c) + WHEN c = AttributeClass.integer THEN {
    NEW a = AttributeInteger {
        edit(a);
    }
};
order(AttributeClass c) += WHEN c == AttributeClass.integer THEN 2;
id 'Код' = DATA STRING[10] (AttributeInteger) NONULL CHARWIDTH 10 IN id;
inactive 'Выкл.' = DATA BOOLEAN (AttributeInteger);
name 'Наименование' = DATA STRING[50] (AttributeInteger) NONULL IN id;
id (AttributeInteger a) += id(a);
active (AttributeInteger a) += a IS AttributeInteger AND NOT inactive(a);
name (AttributeInteger a) += name(a);
value 'Значение' = DATA INTEGER (Item, AttributeInteger);
value (Item o, AttributeInteger a) += STRING(value(o, a));

// Дополнительные ограничения
notMore 'Не больше' = DATA INTEGER (AttributeInteger);
CONSTRAINT SETCHANGED(value(Item o, AttributeInteger i)) AND value(o, i) > notMore(i) 
    MESSAGE CONCAT ' ','Значение атрибута больше чем максимально допустимое';

notLess 'Не меньше' = DATA INTEGER (AttributeInteger);
CONSTRAINT SETCHANGED(value(Item o, AttributeInteger i)) AND value(o, i) < notLess(i) 
    MESSAGE CONCAT ' ','Значение атрибута меньше чем минимально допустимое';
edit (Item o, AttributeInteger a) + {
    INPUT i = INTEGER DO {
        value(o, a) <- i;
    }
}
set (Item o, AttributeInteger a, STRING v) + {
    value(o, a) <- INTEGER(v);
}
FORM attributeInteger 'Атрибут (целое)'
    OBJECTS attr = AttributeInteger PANEL
    PROPERTIES(attr) id, name, inactive, notMore, notLess
    
    EDIT AttributeInteger OBJECT attr
;
DESIGN attributeInteger {
    caption = CONCAT ' - ', 'Атрибут (целое)', name(attr);
    OBJECTS {
        NEW constaraints {
            caption = 'Ограничения';
            horizontal = TRUE;
            MOVE PROPERTY(notLess(attr)) { align = START; }
            MOVE PROPERTY(notMore(attr)) { align = START; }
        }
    }
}

//------------------------------------ NUMERIC ---------------------------------------------------------------------//

CLASS AttributeNumeric 'Числовой атрибут' : Attribute;
EXTEND CLASS AttributeClass { numeric 'Число' }
newAttribute(AttributeClass c) + WHEN c = AttributeClass.numeric THEN {
    NEW a = AttributeNumeric {
        edit(a);
    }
};
order(AttributeClass c) += WHEN c == AttributeClass.numeric THEN 3;
id 'Код' = DATA STRING[10] (AttributeNumeric) NONULL CHARWIDTH 10 IN id;
inactive 'Выкл.' = DATA BOOLEAN (AttributeNumeric);
name 'Наименование' = DATA STRING[50] (AttributeNumeric) NONULL IN id;
id (AttributeNumeric a) += id(a);
active (AttributeNumeric a) += a IS AttributeNumeric AND NOT inactive(a);
name (AttributeNumeric a) += name(a);
value 'Значение' = DATA NUMERIC (Item, AttributeNumeric);
value (Item o, AttributeNumeric a) += STRING(value(o, a));
// Дополнительные ограничения
notMore 'Не больше' = DATA NUMERIC (AttributeNumeric);
CONSTRAINT SETCHANGED(value(Item o, AttributeNumeric i)) AND value(o, i) > notMore(i) 
    MESSAGE CONCAT ' ','Значение атрибута больше чем максимально допустимое';

notLess 'Не меньше' = DATA NUMERIC (AttributeNumeric);
CONSTRAINT SETCHANGED(value(Item o, AttributeNumeric i)) AND value(o, i) < notLess(i) 
    MESSAGE CONCAT ' ','Значение атрибута меньше чем минимально допустимое';

precision 'Точность' = DATA INTEGER (AttributeNumeric);
scale 'Масштаб' = DATA INTEGER (AttributeNumeric);
CONSTRAINT SET(scale(AttributeNumeric a) >= precision(a)) 
    MESSAGE 'Масштаб атрибута должен быть меньше точности';

CONSTRAINT SETCHANGED(value(Item o, AttributeNumeric n)) AND abs(value(o, n)) * power(10, scale(n)) >= NUMERIC(power(10, precision(n))) 
    MESSAGE CONCAT ' ','Точность атрибута больше чем минимально допустимая точность';
CONSTRAINT SETCHANGED(value(Item o, AttributeNumeric n)) AND floor(abs(value(o, n)) * power(10, scale(n))) != abs(value(o, n)) * power(10, scale(n))
    MESSAGE CONCAT ' ','Масштаб атрибута выше чем максимальный масштаб';

edit (Item o, AttributeNumeric a) + {
    INPUT i = NUMERIC DO {
        value(o, a) <- i;
    }
}
set (Item o, AttributeNumeric a, STRING v) + {
    value(o, a) <- NUMERIC(v);
}
FORM attributeNumeric 'Атрибут (число)'
    OBJECTS attr = AttributeNumeric PANEL
    PROPERTIES(attr) id, name, inactive, precision, scale, notMore, notLess
    
    EDIT AttributeNumeric OBJECT attr
;
DESIGN attributeNumeric {
    caption = CONCAT ' - ', 'Атрибут (число)', name(attr);
    OBJECTS {
        NEW constaraints {
            caption = 'Ограничения';
            horizontal = TRUE;
            MOVE PROPERTY(precision(attr)) { align = START; }
            MOVE PROPERTY(scale(attr)) { align = START; }
            MOVE PROPERTY(notLess(attr)) { align = START; }
            MOVE PROPERTY(notMore(attr)) { align = START; }
        }
    }
}

FORM dialogItem 'Список товаров'
    OBJECTS i = Item PANEL
    PROPERTIES(i) READONLY id, name, nameItemGroup, nameItemSubGroup, description

    LIST Item OBJECT i
;

//------------------------------------ Цвет ------------------------------------------------------------------------//

CLASS AttributeColor 'Цвет' : Attribute;
EXTEND CLASS AttributeClass { color 'Цвет' }
newAttribute(AttributeClass c) + WHEN c = AttributeClass.color THEN {
    NEW a = AttributeColor {
        edit(a);
    }
};

order(AttributeClass c) += WHEN c == AttributeClass.color THEN 4;
id 'Код' = DATA STRING[10] (AttributeColor) NONULL CHARWIDTH 10 IN id;
inactive 'Выкл.' = DATA BOOLEAN (AttributeColor);
name 'Наименование' = DATA STRING[50] (AttributeColor) NONULL IN id;
id (AttributeColor a) += id(a);
active (AttributeColor a) += a IS AttributeColor AND NOT inactive(a);
isObject (AttributeColor a) += a IS AttributeColor;
name (AttributeColor a) += name(a);

FORM dialogAttributeColorValue 'Значение атрибута'
    OBJECTS attr = AttributeColor PANEL    
    TREE treeColors val=Color PARENT parent(val)
    PROPERTIES READONLY name(val), color 'Цвет' = nameParent(val)
    ORDERS name(val) 
;

DESIGN dialogAttributeColorValue {
    caption = CONCAT ' - ', 'Значение атрибута', name(attr);
}

value 'Значение' = DATA Color (Item, AttributeColor);
value (Item o, AttributeColor a) += STRING(OVERRIDE name(value(o, a)), 'Без наименования' IF value(o, a));
objectValue (Item o, AttributeColor a) += value(o, a);
colorAttribute (STRING id) = GROUP MAX Color c AS Color BY [FORMULA STRING '$1::text'](c);

edit (Item o, AttributeColor a) + {
    IF notNull(itemSubGroup(o), a) THEN {
        DIALOG dialogAttributeColorValue OBJECTS attr = a, val INPUT DO {
            value(o, a) <- val;
        }
    } ELSE {
        DIALOG dialogAttributeColorValue OBJECTS attr = a, val INPUT NULL DO {
            value(o, a) <- val;
        }
    }
}
set (Item o, AttributeColor a, STRING v) + {
    value(o, a) <- colorAttribute(v);
}

FORM attributeColor 'Атрибут (цвет)'
    OBJECTS attr = AttributeColor PANEL
    PROPERTIES (attr) id, name, inactive
    
    EDIT AttributeColor OBJECT attr
;
DESIGN attributeColor { 
    caption = CONCAT ' - ', 'Атрибут (цвет)', name(attr); 
}

// Пол

CLASS AttributeKind 'Пол' : Attribute;
EXTEND CLASS AttributeClass { kind 'Пол' }
newAttribute(AttributeClass c) + WHEN c = AttributeClass.kind THEN {
    NEW a = AttributeKind {
        edit(a);
    }
};

order(AttributeClass c) += WHEN c == AttributeClass.kind THEN 5;
id 'Код' = DATA STRING[10] (AttributeKind) NONULL CHARWIDTH 10 IN id;
inactive 'Выкл.' = DATA BOOLEAN (AttributeKind);
name 'Наименование' = DATA STRING[50] (AttributeKind) NONULL IN id;
id (AttributeKind a) += id(a);
active (AttributeKind a) += a IS AttributeKind AND NOT inactive(a);
isObject (AttributeKind a) += a IS AttributeKind;
name (AttributeKind a) += name(a);

FORM dialogAttributeKindValue 'Значение атрибута'     
    OBJECTS attr = AttributeKind PANEL, val = Kind
    PROPERTIES(val) READONLY data
    ORDERS data(val)
;

DESIGN dialogAttributeKindValue {
    caption = CONCAT ' - ', 'Значение атрибута', name(attr);
}

value 'Значение' = DATA Kind (Item, AttributeKind);
value (Item o, AttributeKind a) += STRING(OVERRIDE data(value(o, a)), 'Без наименования' IF value(o, a));
objectValue (Item o, AttributeKind a) += value(o, a);
kindAttribute (STRING id) = GROUP MAX Kind k AS Kind BY [FORMULA STRING '$1::text'](k);

edit (Item o, AttributeKind a) + {
    IF notNull(itemSubGroup(o), a) THEN {
        DIALOG dialogAttributeKindValue OBJECTS attr = a, val INPUT DO {
            value(o, a) <- val;
        }
    } ELSE {
        DIALOG dialogAttributeKindValue OBJECTS attr = a, val INPUT NULL DO {
            value(o, a) <- val;
        }
    }
}
set (Item o, AttributeKind a, STRING v) + {
    value(o, a) <- kindAttribute(v);
}

FORM attributeKind 'Атрибут (пол)'
    OBJECTS attr = AttributeKind PANEL
    PROPERTIES (attr) id, name, inactive
    
    EDIT AttributeKind OBJECT attr
;
DESIGN attributeKind {
    caption = CONCAT ' - ', 'Атрибут (пол)', name(attr);
}

// Страна производства

CLASS AttributeCountry 'Страна производства' : Attribute;
EXTEND CLASS AttributeClass { country 'Страна производства' }
newAttribute(AttributeClass c) + WHEN c = AttributeClass.country THEN {
    NEW a = AttributeCountry {
        edit(a);
    }
};

order(AttributeClass c) += WHEN c == AttributeClass.country THEN 6;
id 'Код' = DATA STRING[10] (AttributeCountry) NONULL CHARWIDTH 10 IN id;
inactive 'Выкл.' = DATA BOOLEAN (AttributeCountry);
name 'Наименование' = DATA STRING[50] (AttributeCountry) NONULL IN id;
id (AttributeCountry a) += id(a);
active (AttributeCountry a) += a IS AttributeCountry AND NOT inactive(a);
isObject (AttributeCountry a) += a IS AttributeCountry;
name (AttributeCountry a) += name(a);

FORM dialogAttributeCountryValue 'Значение атрибута'
    OBJECTS attr = AttributeCountry PANEL, val = Country
    PROPERTIES(val) READONLY name, fullName
    ORDERS name(val)
;

DESIGN dialogAttributeCountryValue {
    caption = CONCAT ' - ', 'Значение атрибута', name(attr);
}

value 'Значение' = DATA Country (Item, AttributeCountry);
value (Item o, AttributeCountry a) += STRING(OVERRIDE name(value(o, a)), 'Без наименования' IF value(o, a));
objectValue (Item o, AttributeCountry a) += value(o, a);
countryAttribute (STRING id) = GROUP MAX Country c AS Country BY [FORMULA STRING '$1::text'](c);

edit (Item o, AttributeCountry a) + {
    IF notNull(itemSubGroup(o), a) THEN {
        DIALOG dialogAttributeCountryValue OBJECTS attr = a, val INPUT DO {
            value(o, a) <- val;
        }
    } ELSE {
        DIALOG dialogAttributeCountryValue OBJECTS attr = a, val INPUT NULL DO {
            value(o, a) <- val;
        }
    }
}
set (Item o, AttributeCountry a, STRING v) + {
    value(o, a) <- countryAttribute(v);
}

FORM attributeCountry 'Атрибут (страна производства)'
    OBJECTS attr = AttributeCountry PANEL
    PROPERTIES (attr) id, name, inactive
    
    EDIT AttributeCountry OBJECT attr
;
DESIGN attributeCountry {
    caption = CONCAT ' - ', 'Атрибут (страна производства)', name(attr);
}

// Сезон

CLASS AttributeSeason 'Сезон' : Attribute;
EXTEND CLASS AttributeClass { season 'Сезон' }
newAttribute(AttributeClass c) + WHEN c = AttributeClass.season THEN {
    NEW a = AttributeSeason {
        edit(a);
    }
};

order(AttributeClass c) += WHEN c == AttributeClass.season THEN 7;
id 'Код' = DATA STRING[10] (AttributeSeason) NONULL CHARWIDTH 10 IN id;
inactive 'Выкл.' = DATA BOOLEAN (AttributeSeason);
name 'Наименование' = DATA STRING[50] (AttributeSeason) NONULL IN id;
id (AttributeSeason a) += id(a);
active (AttributeSeason a) += a IS AttributeSeason AND NOT inactive(a);
isObject (AttributeSeason a) += a IS AttributeSeason;
name (AttributeSeason a) += name(a);

FORM dialogAttributeSeasonValue 'Значение атрибута'
    OBJECTS attr = AttributeSeason PANEL, val = Season
    PROPERTIES(val) READONLY data
    ORDERS data(val)
;

DESIGN dialogAttributeSeasonValue {
    caption = CONCAT ' - ', 'Значение атрибута', name(attr);
}

value 'Значение' = DATA Season (Item, AttributeSeason);
value (Item o, AttributeSeason a) += STRING(OVERRIDE data(value(o, a)), 'Без наименования' IF value(o, a));
objectValue (Item o, AttributeSeason a) += value(o, a);
seasonAttribute (STRING id) = GROUP MAX Season s AS Season BY [FORMULA STRING '$1::text'](s);

edit (Item o, AttributeSeason a) + {
    IF notNull(itemSubGroup(o), a) THEN {
        DIALOG dialogAttributeSeasonValue OBJECTS attr = a, val INPUT DO {
            value(o, a) <- val;
        }
    } ELSE {
        DIALOG dialogAttributeSeasonValue OBJECTS attr = a, val INPUT NULL DO {
            value(o, a) <- val;
        }
    }
}
set (Item o, AttributeSeason a, STRING v) + {
    value(o, a) <- seasonAttribute(v);
}

FORM attributeSeason 'Атрибут (сезон)'
    OBJECTS attr = AttributeSeason PANEL
    PROPERTIES (attr) id, name, inactive
    
    EDIT AttributeSeason OBJECT attr
;
DESIGN attributeSeason {
    caption = CONCAT ' - ', 'Атрибут (сезон)', name(attr);
}

// Ставка НДС

CLASS AttributeVAT 'Ставка НДС' : Attribute;
EXTEND CLASS AttributeClass { vat 'Ставка НДС' }
newAttribute(AttributeClass c) + WHEN c = AttributeClass.vat THEN {
    NEW a = AttributeVAT {
        edit(a);
    }
};

order(AttributeClass c) += WHEN c == AttributeClass.vat THEN 8;
id 'Код' = DATA STRING[10] (AttributeVAT) NONULL CHARWIDTH 10 IN id;
inactive 'Выкл.' = DATA BOOLEAN (AttributeVAT);
name 'Наименование' = DATA STRING[50] (AttributeVAT) NONULL IN id;
id (AttributeVAT a) += id(a);
active (AttributeVAT a) += a IS AttributeVAT AND NOT inactive(a);
isObject (AttributeVAT a) += a IS AttributeVAT;
name (AttributeVAT a) += name(a);

FORM dialogAttributeVATValue 'Значение атрибута'
    OBJECTS attr = AttributeVAT PANEL, val = VAT
    PROPERTIES(val) READONLY data
    ORDERS data(val)
;

DESIGN dialogAttributeVATValue {
    caption = CONCAT ' - ', 'Значение атрибута', name(attr);
}

value 'Значение' = DATA VAT (Item, AttributeVAT);
value (Item o, AttributeVAT a) += STRING(OVERRIDE data(value(o, a)), 'Без наименования' IF value(o, a));
objectValue (Item o, AttributeVAT a) += value(o, a);
vatAttribute (STRING id) = GROUP MAX VAT v AS VAT BY [FORMULA STRING '$1::text'](v);

edit (Item o, AttributeVAT a) + {
    IF notNull(itemSubGroup(o), a) THEN {
        DIALOG dialogAttributeVATValue OBJECTS attr = a, val INPUT DO {
            value(o, a) <- val;
        }
    } ELSE {
        DIALOG dialogAttributeVATValue OBJECTS attr = a, val INPUT NULL DO {
            value(o, a) <- val;
        }
    }
}
set (Item o, AttributeVAT a, STRING v) + {
    value(o, a) <- vatAttribute(v);
}

FORM attributeVAT 'Атрибут (ставка НДС)'
    OBJECTS attr = AttributeVAT PANEL
    PROPERTIES (attr) id, name, inactive
    
    EDIT AttributeVAT OBJECT attr
;
DESIGN attributeVAT {
    caption = CONCAT ' - ', 'Атрибут (ставка НДС)', name(attr);
}

// ТНВЭД-код

CLASS AttributeTnved 'ТНВЭД-код' : Attribute;
EXTEND CLASS AttributeClass { tnved 'ТНВЭД-код' }
newAttribute(AttributeClass c) + WHEN c = AttributeClass.tnved THEN {
    NEW a = AttributeTnved {
        edit(a);
    }
};

order(AttributeClass c) += WHEN c == AttributeClass.tnved THEN 9;
id 'Код' = DATA STRING[10] (AttributeTnved) NONULL CHARWIDTH 10 IN id;
inactive 'Выкл.' = DATA BOOLEAN (AttributeTnved);
name 'Наименование' = DATA STRING[50] (AttributeTnved) NONULL IN id;
id (AttributeTnved a) += id(a);
active (AttributeTnved a) += a IS AttributeTnved AND NOT inactive(a);
isObject (AttributeTnved a) += a IS AttributeTnved;
name (AttributeTnved a) += name(a);

FORM dialogAttributeTnvedValue 'Значение атрибута'
    OBJECTS attr = AttributeTnved PANEL, val = Tnved
    PROPERTIES(val) READONLY id, isKiz
    ORDERS id(val)
;

DESIGN dialogAttributeTnvedValue {
    caption = CONCAT ' - ', 'Значение атрибута', name(attr);
}

value 'Значение' = DATA Tnved (Item, AttributeTnved);
value (Item o, AttributeTnved a) += STRING(OVERRIDE id(value(o, a)), 'Без наименования' IF value(o, a));
objectValue (Item o, AttributeTnved a) += value(o, a);
tnvedAttribute (STRING id) = GROUP MAX Tnved t AS Tnved BY [FORMULA STRING '$1::text'](t);

edit (Item o, AttributeTnved a) + {
    IF notNull(itemSubGroup(o), a) THEN {
        DIALOG dialogAttributeTnvedValue OBJECTS attr = a, val INPUT DO {
            value(o, a) <- val;
        }
    } ELSE {
        DIALOG dialogAttributeTnvedValue OBJECTS attr = a, val INPUT NULL DO {
            value(o, a) <- val;
        }
    }
}
set (Item o, AttributeTnved a, STRING v) + {
    value(o, a) <- tnvedAttribute(v);
}

FORM attributeTnved 'Атрибут (ТНВЭД-код)'
    OBJECTS attr = AttributeTnved PANEL
    PROPERTIES (attr) id, name, inactive
    
    EDIT AttributeTnved OBJECT attr
;
DESIGN attributeTnved {
    caption = CONCAT ' - ', 'Атрибут (ТНВЭД-код)', name(attr);
}

CLASS ItemAttribute 'Атрибут товара';
id 'Код' = DATA STRING (ItemAttribute);
itemAttributeId (id) = GROUP AGGR ItemAttribute ia BY id(ia);
name 'Наименование' = DATA STRING (ItemAttribute);
unitName 'Ед.измерения' = DATA STRING (ItemAttribute);
required 'Обязательный' = DATA BOOLEAN (ItemAttribute);
popular 'Популярный' = DATA BOOLEAN (ItemAttribute);

in 'Вкл.' = DATA BOOLEAN (ItemSubGroup, ItemAttribute);

unitName = DATA LOCAL STRING(INTEGER);
charcID = DATA LOCAL STRING (INTEGER);
charcType = DATA LOCAL INTEGER (INTEGER);
maxCount = DATA LOCAL STRING (INTEGER);
popular = DATA LOCAL STRING(INTEGER);
required = DATA LOCAL STRING(INTEGER);

FORM importItemAttribute
    PROPERTIES() errorText, additionalErrors, error

    OBJECTS data = INTEGER
    PROPERTIES(data) unitName, charcID, charcType, name, maxCount, popular, subjectID, required, subjectName
    FILTERS imported(data)
;

getItemAttribute 'Получить характеристики предмета' (ItemSubGroup sg) {
    NEWSESSION {
        setHttpHeadersIS();
        LOCAL message = STRING ();
        LOCAL response = FILE();
        LOCAL error = STRING ();
        LOCAL errorText = STRING ();
        LOCAL status = STRING ();

        logToFile('WB', 'GET: '+ url(CategoryRequest.content) + '/content/v2/object/charcs/' + id(sg));
        TRY {
            EXTERNAL HTTP GET url(CategoryRequest.content) + '/content/v2/object/charcs/' + id(sg) HEADERS httpHeaders TO response;
            fileToString(response());
            logToFile('WB', resultString());
            IMPORT importItemAttribute JSON FROM response();

            in(sg,  Attribute as) <- NULL WHERE in(sg, as); //обнуляем в случае если стоял TRUE, а в ответе приходит NULL
            notNull(sg, Attribute as) <- NULL WHERE notNull(sg, as);
            popular(sg, Attribute as) <- NULL WHERE popular(sg, as);
            
            FOR INTEGER i = [GROUP MAX INTEGER i1 BY charcID(i1)](STRING charcID) AND NOT attribute(charcID) INLINE DO 
                CASE 
                    WHEN lower(name(i))=='цвет' THEN NEW as = AttributeColor {
                        id(as) <- charcID;
                    }
                    WHEN lower(name(i))=='пол' THEN NEW as = AttributeKind {
                        id(as) <- charcID;
                    }
                    WHEN lower(name(i))=='страна производства' THEN NEW as = AttributeCountry {
                        id(as) <- charcID;
                    }
                    WHEN lower(name(i))=='сезон' THEN NEW as = AttributeSeason {
                        id(as) <- charcID;
                    }
                    WHEN lower(name(i))=='ставка ндс' THEN NEW as = AttributeVAT {
                        id(as) <- charcID;
                    }
                    WHEN lower(name(i))=='тнвэд' THEN NEW as = AttributeTnved {
                        id(as) <- charcID;
                    } 
                    WHEN charcType(i) == 1 OR charcType(i) == 0 THEN NEW as = AttributeString {
                        id(as) <- charcID;
                    }
                    ELSE NEW as = AttributeNumeric {
                        id(as) <- charcID;
                    }

            FOR INTEGER i = [GROUP MAX INTEGER i1 BY charcID(i1)](STRING charcID) AND Attribute as == attribute(charcID) INLINE DO {
                    in(sg, as) <- TRUE;
                    name(as) <- name(i);
                    unitName(as) <- unitName(i) IF NOT unitName(i)=='';
                    notNull(sg, as) <- TRUE IF required(i) == 'true';
                    popular(sg, as) <- TRUE IF popular(i) == 'true';
            }
            message() <- messageStatusHTTP(STRING(statusHttp()));
        } CATCH {
            logToFile('WB', messageCaughtException());
            message() <- OVERRIDE messageStatusHTTP(STRING(statusHttp())), messageCaughtException();
        } FINALLY {
            afterSendRequestIS();
            MESSAGE '<h3>Получить характеристики предмета</h3>' NOWAIT;
            MESSAGE message() NOWAIT;
            APPLY;
        }
    }
}

getItemAttribute 'Получить характеристики предметов' () {
    NEWSESSION {
        FOR ItemSubGroup sg IS ItemSubGroup DO {
            setHttpHeadersIS();
            LOCAL message = STRING ();
            LOCAL response = FILE();
            LOCAL error = STRING ();
            LOCAL errorText = STRING ();
            LOCAL status = STRING ();

            logToFile('WB', 'GET: ' + url(CategoryRequest.content) + '/content/v2/object/charcs/' + id(sg));
            TRY {
                EXTERNAL HTTP GET url(CategoryRequest.content) + '/content/v2/object/charcs/' + id(sg) HEADERS httpHeaders TO response;
                fileToString(response());
                logToFile('WB', resultString());
                IMPORT importItemAttribute JSON FROM response();

                in(sg, Attribute as) <- NULL WHERE in(sg, as); //обнуляем в случае если стоял TRUE, а в ответе приходит NULL
                notNull(sg, Attribute as) <- NULL WHERE notNull(sg, as);
                popular(sg, Attribute as) <- NULL WHERE popular(sg, as);

                FOR INTEGER i = [GROUP MAX INTEGER i1 BY charcID(i1)](STRING charcID) AND NOT attribute(charcID) INLINE DO
                    CASE
                        WHEN lower(name(i)) == 'цвет' THEN NEW as = AttributeColor {
                            id(as) <- charcID;
                        }
                        WHEN lower(name(i)) == 'пол' THEN NEW as = AttributeKind {
                            id(as) <- charcID;
                        }
                        WHEN lower(name(i)) == 'страна производства' THEN NEW as = AttributeCountry {
                            id(as) <- charcID;
                        }
                        WHEN lower(name(i)) == 'сезон' THEN NEW as = AttributeSeason {
                            id(as) <- charcID;
                        }
                        WHEN lower(name(i)) == 'ставка ндс' THEN NEW as = AttributeVAT {
                            id(as) <- charcID;
                        }
                        WHEN lower(name(i)) == 'тнвэд' THEN NEW as = AttributeTnved {
                            id(as) <- charcID;
                        }
                        WHEN charcType(i) == 1 OR charcType(i) == 0 THEN NEW as = AttributeString {
                            id(as) <- charcID;
                        }
                        ELSE NEW as = AttributeNumeric {
                            id(as) <- charcID;
                        }
                    

                FOR INTEGER i = [GROUP MAX INTEGER i1 BY charcID(i1)](STRING charcID) AND Attribute as == attribute(charcID) INLINE DO {
                    in(sg, as) <- TRUE;
                    name(as) <- name(i);
                    unitName(as) <- unitName(i) IF NOT unitName(i) == '';
                    notNull(sg, as) <- TRUE IF required(i) == 'true';
                    popular(sg, as) <- TRUE IF popular(i) == 'true';
                }
                message() <- messageStatusHTTP(STRING(statusHttp()));
            } CATCH {
                logToFile('WB', messageCaughtException());
                message() <- OVERRIDE messageStatusHTTP(STRING(statusHttp())), messageCaughtException();
            } FINALLY {
                afterSendRequestIS();
                MESSAGE '<h3>Получить характеристики предметов</h3>' NOWAIT;
                MESSAGE message() NOWAIT;
                APPLY;
            }
        }
    }
}

paidLimits = DATA LOCAL STRING ();
freeLimits = DATA LOCAL STRING ();

GROUP data;

FORM importItemLimits
    PROPERTIES() errorText, additionalErrors, error
    PROPERTIES() IN data paidLimits, freeLimits
;

getItemLimits 'Получить лимиты создания карточек товаров' () {
    NEWSESSION {
        setHttpHeadersIS();
            LOCAL message = STRING ();
            LOCAL response = FILE();
            LOCAL error = STRING ();
            LOCAL errorText = STRING ();
            LOCAL status = STRING ();

            logToFile('WB', 'GET: ' + url(CategoryRequest.content) + '/content/v2/cards/limits');
            TRY {
                EXTERNAL HTTP GET url(CategoryRequest.content) + '/content/v2/cards/limits' HEADERS httpHeaders TO response;
                fileToString(response());
                logToFile('WB', resultString());
                IMPORT importItemLimits JSON FROM response();

                FOR imported(INTEGER i) DO {
                    freeItemLimits() <- freeLimits();
                    paidItemLimits() <- paidLimits();
                    }
                message() <- '<h3>Бесплатные лимиты на создание карточек X = ' + freeLimits() + ', платные лимиты Y = ' + paidLimits()+'</h3>';
            } CATCH {
                logToFile('WB', messageCaughtException());
                message() <- OVERRIDE messageStatusHTTP(STRING(statusHttp())), messageCaughtException();
            } FINALLY {
                afterSendRequestIS();
                MESSAGE message() NOWAIT;
                APPLY;
            }
     }
}

allowedCategoriesOnly = DATA LOCAL STRING();
imtID = DATA LOCAL STRING ();
withPhoto = DATA LOCAL STRING ();
textSearch = DATA LOCAL STRING();
brands = DATA LOCAL STRING(INTEGER);
filterBrands = DATA LOCAL STRING (INTEGER);
tagIDs = DATA LOCAL STRING(INTEGER);
filterTagIDs = DATA LOCAL STRING (INTEGER);
objectIDs = DATA LOCAL STRING(INTEGER);
filterObjectIDs = DATA LOCAL STRING (INTEGER);
limit = DATA LOCAL STRING ();
nmID = DATA LOCAL INTEGER ();
updatedAt = DATA LOCAL STRING();
trashedAt = DATA LOCAL STRING();
ascending = DATA LOCAL STRING();

GROUP cursor;
GROUP dimensions;

total = DATA LOCAL INTEGER ();
pdatedAt = DATA LOCAL STRING();
needKiz = DATA LOCAL STRING(INTEGER);
cardsCharacteristics = DATA LOCAL INTEGER(INTEGER);
value = DATA LOCAL STRING(INTEGER);
characteristicsValue = DATA LOCAL INTEGER(INTEGER);
nmUUID = DATA LOCAL STRING(INTEGER);
nmID1 = DATA LOCAL INTEGER (INTEGER);
description = DATA LOCAL STRING(INTEGER);
video = DATA LOCAL STRING(INTEGER);
title = DATA LOCAL STRING(INTEGER);
cardsPhotos = DATA LOCAL INTEGER(INTEGER);
big = DATA LOCAL STRING(INTEGER);
square = DATA LOCAL STRING(INTEGER);
c516x688 = DATA LOCAL STRING(INTEGER);
tm = DATA LOCAL STRING(INTEGER);
c246x328 = DATA LOCAL STRING(INTEGER);
vendorCode = DATA LOCAL STRING(INTEGER);
cardsTags = DATA LOCAL INTEGER(INTEGER);
color = DATA LOCAL STRING(INTEGER);
name1 = DATA LOCAL STRING(INTEGER);
id1 = DATA LOCAL STRING (INTEGER);
imtID = DATA LOCAL INTEGER (INTEGER);
createdAt = DATA LOCAL STRING(INTEGER);
cardsSizes = DATA LOCAL INTEGER(INTEGER);
skus = DATA LOCAL STRING(INTEGER);
sizesSkus = DATA LOCAL INTEGER(INTEGER);
techSize = DATA LOCAL STRING(INTEGER);
wbSize = DATA LOCAL STRING(INTEGER);
chrtID = DATA LOCAL STRING (INTEGER);
brand = DATA LOCAL STRING(INTEGER);
weightBrutto = DATA LOCAL NUMERIC[10,3] (INTEGER);
isValid = DATA LOCAL STRING(INTEGER);
length = DATA LOCAL INTEGER (INTEGER);
width = DATA LOCAL INTEGER (INTEGER);
height = DATA LOCAL INTEGER (INTEGER);
updatedAt1 = DATA LOCAL STRING(INTEGER);

dataPostItemsLimit = DATA INTEGER ();
postItemsLimit 'Лимит для получения списка карточек товаров' = OVERRIDE dataPostItemsLimit(), 100;

FORM importItems
    PROPERTIES() IN cursor total, nmID, updatedAt, trashedAt

    OBJECTS cards = INTEGER

    PROPERTIES(cards) needKiz, nmUUID, nmID1 EXTID 'nmID', description, video, title, subjectID, vendorCode, imtID, createdAt, brand, subjectName, updatedAt1 EXTID 'updatedAt'

    OBJECTS characteristics = INTEGER
    FILTERS cardsCharacteristics(characteristics) == cards
    PROPERTIES(characteristics) name, id
    FILTERS imported(characteristics)

    OBJECTS value = INTEGER
    PROPERTIES(value) value
    FILTERS imported(value)
    FILTERS characteristicsValue(value) == characteristics

    OBJECTS photos = INTEGER
    FILTERS cardsPhotos(photos) == cards
    PROPERTIES(photos) big, square, c516x688, tm, c246x328
    FILTERS imported(photos)

    OBJECTS tags = INTEGER
    FILTERS cardsTags(tags) == cards
    PROPERTIES(tags) color, name1 EXTID 'name', id1 EXTID 'id'
    FILTERS imported(tags)

    OBJECTS sizes = INTEGER
    FILTERS cardsSizes(sizes) == cards
    PROPERTIES(sizes) techSize, chrtID, wbSize
    FILTERS imported(sizes)

    OBJECTS skus = INTEGER
    PROPERTIES(skus) skus EXTID 'value'
    FILTERS imported(skus)
    FILTERS sizesSkus(skus) == sizes
    
    PROPERTIES(cards) IN dimensions weightBrutto, isValid, length, width, height
    FILTERS imported(cards)
;

updateAt = DATA LOCAL STRING(INTEGER);
errors = DATA LOCAL STRING(INTEGER);
dataErrors = DATA LOCAL INTEGER(INTEGER);
objectID = DATA LOCAL NUMERIC(INTEGER);
object = DATA LOCAL STRING(INTEGER);

FORM checkErrors
    PROPERTIES() errorText, additionalErrors, error

    OBJECTS data = INTEGER
    PROPERTIES(data) updateAt, objectID, object, vendorCode
    FILTERS imported(data)

    OBJECTS errors = INTEGER
    PROPERTIES(errors) errors EXTID 'value'
    FILTERS imported(errors)
    FILTERS dataErrors(errors) == data;

checkErrors 'Получение ошибок' () {
    NEWSESSION {
        setHttpHeadersIS();

        errorText(Item item) <- NULL WHERE error(item);
        error(Item item) <- NULL WHERE error(item);

        logToFile('WB', 'GET: ' + url(CategoryRequest.content) + '/content/v2/cards/error/list');

        LOCAL response = FILE();
        LOCAL message = STRING ();

        TRY {
            EXTERNAL HTTP GET url(CategoryRequest.content) + '/content/v2/cards/error/list' HEADERS httpHeaders TO response;
            fileToString(response());
            logToFile('WB', resultString());

            IMPORT checkErrors JSON FROM response();
            FOR imported(INTEGER i) AND Item item == item(vendorCode(i)) INLINE DO {
                error(item) <- TRUE;
                errorText(item) <- GROUP CONCAT errors(INTEGER j) IF imported(j) AND dataErrors(j) == i, ', ' ORDER j;
            }

            message() <- messageStatusHTTP(STRING(statusHttp()));
        } CATCH {
            logToFile('WB', messageCaughtException());
            message() <- OVERRIDE messageStatusHTTP(STRING(statusHttp())), messageCaughtException();
        } FINALLY {
            afterSendRequestIS();
            MESSAGE '<h3>Получение ошибок</h3>' NOWAIT;
            MESSAGE message() NOWAIT;
            APPLY;
        }
    }
}

postItems 'Получить список карточек товаров' () {
    NEWSESSION {
        setHttpHeadersIS();
        LOCAL message = STRING ();
        LOCAL response = FILE();
        LOCAL error = STRING ();
        LOCAL errorText = STRING ();
        LOCAL status = STRING ();
        
        WHILE ((total() AND NOT total() < postItemsLimit()) OR NOT response()) AND NOT messageCaughtException() DO {
            
            stringToFile('\{"settings": \{"cursor": \{ "limit": ' + postItemsLimit() +
                (OVERRIDE (IF updatedAt() THEN ',"updatedAt":"' + updatedAt() + '"'), '') +
                (OVERRIDE(IF nmID() THEN ',"nmID":' + nmID()), '') + '\},' +
                '"filter": \{"withPhoto": -1\}\}\}', 'UTF-8', 'json');

            logToFile('WB', 'POST: ' + url(CategoryRequest.content) + '/content/v2/get/cards/list');

            TRY {
                EXTERNAL HTTP POST url(CategoryRequest.content) + '/content/v2/get/cards/list' HEADERS httpHeaders PARAMS resultFile() TO response;
                fileToString(response());
                logToFile('WB', resultString());
                IMPORT importItems JSON FROM response();

                FOR INTEGER i = [GROUP MAX INTEGER i1 BY vendorCode(i1)](STRING id) AND Item item == item(id) AND NOT (nmID(item(id)) AND imtID(item(id))) DO {
                    nmID(item) <- nmID1(i);
                    imtID(item) <- imtID(i);

                    FOR INTEGER ii = [GROUP MAX INTEGER i1 IF cardsSizes(i1) == i BY chrtID(i1)](STRING chrtID) DO {
                        FOR itemWB(Size s) == item AND techSize(s) == techSize(ii) DO
                            chrtID(s) <- INTEGER(chrtID);
                    }
                }

                FOR INTEGER i = [GROUP MAX INTEGER i1 BY vendorCode(i1)](STRING id) AND NOT item(id) AND itemSubGroup(subjectID(i)) INLINE DO NEW item = Item {
                    id(item) <- id;
                    nmID(item) <- nmID1(i);
                    imtID(item) <- imtID(i);
                    name(item) <- title(i);
                    itemSubGroup(item) <- itemSubGroup(subjectID(i));
                    length(item) <- length(i);
                    width(item) <- width(i);
                    height(item) <- height(i);
                    weightBrutto(item) <- weightBrutto(i);

                    FOR INTEGER ii = [GROUP MAX INTEGER i1 IF cardsSizes(i1) == i BY chrtID(i1)](STRING chrtID) DO NEW s = Size {
                        itemWB(s) <- item;
                        chrtID(s) <- INTEGER(chrtID);
                        techSize(s) <- techSize(ii);
                        wbSize(s) <- wbSize(ii);
                        FOR imported(INTEGER j) AND sizesSkus(j) == ii AND skus(j) AND NOT barcode(skus(j), s) DO NEW b = Barcode {
                            size(b) <- s;
                            id(b) <- skus(j);
                        }
                    }

                    FOR INTEGER ii = [GROUP MAX INTEGER i1 IF cardsCharacteristics(i1) == i BY id(i1)](STRING charcID) AND Attribute as == attribute(charcID) INLINE DO
                        CASE
                            WHEN as IS AttributeColor THEN {
                                value[Item, AttributeColor](item, as) <- GROUP MAX Color color IF name(color) == value(GROUP MAX INTEGER j IF characteristicsValue(j) == ii);
                            }
                            WHEN as IS AttributeKind THEN {
                                value[Item, AttributeKind](item, as) <- GROUP MAX Kind kind IF data(kind) == value(GROUP MAX INTEGER j IF characteristicsValue(j) == ii);
                            }
                            WHEN as IS AttributeCountry THEN {
                                value[Item, AttributeCountry](item, as) <- GROUP MAX Country country IF name(country) == value(GROUP MAX INTEGER j IF characteristicsValue(j) == ii);
                            }
                            WHEN as IS AttributeSeason THEN {
                                value[Item, AttributeSeason](item, as) <- GROUP MAX Season season IF data(season) == value(GROUP MAX INTEGER j IF characteristicsValue(j) == ii);
                            }
                            WHEN as IS AttributeVAT THEN {
                                value[Item, AttributeVAT](item, as) <- GROUP MAX VAT vat IF data(vat) == value(GROUP MAX INTEGER j IF characteristicsValue(j) == ii);
                            }
                            WHEN as IS AttributeTnved THEN {
                                value[Item, AttributeTnved](item, as) <- tnved(charcID);
                            }
                            WHEN as IS AttributeNumeric THEN {
                                value[Item, AttributeNumeric](item, as) <- NUMERIC(value(GROUP MAX INTEGER j IF characteristicsValue(j) == ii));
                            }
                            ELSE {
                            value[Item, AttributeString](item, as) <- value(GROUP MAX INTEGER j IF characteristicsValue(j) == ii);
                        }
                }
                message() <- messageStatusHTTP(STRING(statusHttp()));
            } CATCH {
                logToFile('WB', messageCaughtException());
                message() <- OVERRIDE messageStatusHTTP(STRING(statusHttp())), messageCaughtException();
            } FINALLY {
                afterSendRequestIS();
                MESSAGE '<h3>Получить список карточек товаров</h3>' NOWAIT;
                MESSAGE message() NOWAIT;
                APPLY NESTED LOCAL;
                checkErrors(); //Делаем здесь, что бы товары были созданы в БД к моменту проверки на ошибки
            }
        }
    }
}

dataPostTrashItemsLimit = DATA INTEGER ();
postTrashItemsLimit 'Лимит для получения списка карточек товаров в корзине' = OVERRIDE dataPostTrashItemsLimit(), 100;

postTrashItems 'Получить список карточек товаров в корзине' () {
    NEWSESSION {
        setHttpHeadersIS();
        LOCAL message = STRING ();
        LOCAL response = FILE();
        LOCAL error = STRING ();
        LOCAL errorText = STRING ();
        LOCAL status = STRING ();

        WHILE ((total() AND NOT total() < postTrashItemsLimit()) OR NOT response()) AND NOT messageCaughtException() DO {

            stringToFile('\{"settings": \{"cursor": \{ "limit": ' + postTrashItemsLimit() +
                (OVERRIDE (IF trashedAt() THEN ',"trashedAt":"' + trashedAt() + '"'), '') +
                (OVERRIDE(IF nmID() THEN ',"nmID":' + nmID()), '') + '\},' +
                '"filter": \{"withPhoto": -1\}\}\}', 'UTF-8', 'json');

            logToFile('WB', 'POST: ' + url(CategoryRequest.content) + '/content/v2/get/cards/trash');

            TRY {
                EXTERNAL HTTP POST url(CategoryRequest.content) + '/content/v2/get/cards/trash' HEADERS httpHeaders PARAMS resultFile() TO response;
                fileToString(response());
                logToFile('WB', resultString());
                IMPORT importItems JSON FROM response();
                FOR INTEGER i = [GROUP MAX INTEGER i1 BY vendorCode(i1)](STRING id) AND NOT item(id) AND itemSubGroup(subjectID(i)) INLINE DO NEW item = Item {
                    id(item) <- id;
                    nmID(item) <- nmID1(i);
                    imtID(item) <- imtID(i);
                    isTrash(item) <- TRUE;
                    name(item) <- OVERRIDE title(i), id;
                    itemSubGroup(item) <- itemSubGroup(subjectID(i));
                    length(item) <- length(i);
                    width(item) <- width(i);
                    height(item) <- height(i);
                    weightBrutto(item) <- weightBrutto(i);

                    FOR INTEGER ii = [GROUP MAX INTEGER i1 IF cardsSizes(i1) == i BY chrtID(i1)](STRING chrtID) DO NEW s = Size {
                        itemWB(s) <- item;
                        chrtID(s) <- INTEGER(chrtID);
                        techSize(s) <- techSize(ii);
                        FOR imported(INTEGER j) AND sizesSkus(j) == ii AND skus(j) AND NOT barcode(skus(j), s) DO NEW b = Barcode {
                            size(b) <- s;
                            id(b) <- skus(j);
                        }
                    }

                    FOR INTEGER ii = [GROUP MAX INTEGER i1 IF cardsCharacteristics(i1) == i BY id(i1)](STRING charcID) AND Attribute as == attribute(charcID) INLINE DO
                        CASE
                            WHEN as IS AttributeColor THEN {
                                value[Item, AttributeColor](item, as) <- GROUP MAX Color color IF name(color) == value(GROUP MAX INTEGER j IF characteristicsValue(j) == ii);
                            }
                            WHEN as IS AttributeKind THEN {
                                value[Item, AttributeKind](item, as) <- GROUP MAX Kind kind IF data(kind) == value(GROUP MAX INTEGER j IF characteristicsValue(j) == ii);
                            }
                            WHEN as IS AttributeCountry THEN {
                                value[Item, AttributeCountry](item, as) <- GROUP MAX Country country IF name(country) == value(GROUP MAX INTEGER j IF characteristicsValue(j) == ii);
                            }
                            WHEN as IS AttributeSeason THEN {
                                value[Item, AttributeSeason](item, as) <- GROUP MAX Season season IF data(season) == value(GROUP MAX INTEGER j IF characteristicsValue(j) == ii);
                            }
                            WHEN as IS AttributeVAT THEN {
                                value[Item, AttributeVAT](item, as) <- GROUP MAX VAT vat IF data(vat) == value(GROUP MAX INTEGER j IF characteristicsValue(j) == ii);
                            }
                            WHEN as IS AttributeTnved THEN {
                                value[Item, AttributeTnved](item, as) <- tnved(charcID);
                            }
                            WHEN as IS AttributeNumeric THEN {
                                value[Item, AttributeNumeric](item, as) <- NUMERIC(value(GROUP MAX INTEGER j IF characteristicsValue(j) == ii));
                            }
                            ELSE {
                            value[Item, AttributeString](item, as) <- value(GROUP MAX INTEGER j IF characteristicsValue(j) == ii);
                        }
                }
                message() <- messageStatusHTTP(STRING(statusHttp()));
            } CATCH {
                logToFile('WB', messageCaughtException());
                message() <- OVERRIDE messageStatusHTTP(STRING(statusHttp())), messageCaughtException();
            } FINALLY {
                afterSendRequestIS();
                MESSAGE '<h3>Получить список карточек товаров в корзине</h3>' NOWAIT;
                MESSAGE message() NOWAIT;
                APPLY NESTED LOCAL;
            }
        }
    }
}

nmIDs = DATA LOCAL STRING(INTEGER);
data = DATA LOCAL STRING();

dataPostTransferItemsLimit = DATA INTEGER ();
postTransferItemsLimit 'Лимит для переноса карточек товаров в корзину' = OVERRIDE dataPostTransferItemsLimit(), 1000;

postTransferItems 'Перенос карточек товаров в корзину' () {
    NEWSESSION NESTED(in[Item]){
        IF (GROUP SUM 1 IF in(Item item) AND NOT isTrash(item)) THEN {
            setHttpHeadersIS();
            LOCAL message = STRING ();
            LOCAL response = FILE();
            LOCAL error = STRING ();
            LOCAL errorText = STRING ();
            LOCAL status = STRING ();
            LOCAL isTransfered = BOOLEAN (Item);
            isTransfered(Item item) <- TRUE WHERE in(item) AND NOT isTrash(item);
            
            LOCAL index = INTEGER (Item);
            index(Item i) <- PARTITION SUM 1 IF isTransfered(i) ORDER i;

            LOCAL exported = INTEGER ();
            exported() <- 0;

            WHILE exported() < (GROUP MAX index(Item i)) DO {

                EXPORT JSON FROM 'value' = nmID(Item i) WHERE index(i) > exported() AND index(i) <= exported() + postTransferItemsLimit();

                fileToString(exportFile(), 'UTF-8');
                stringToFile('\{"nmIDs":' + replace(resultString(), '\n', '') + '\}', 'UTF-8', 'json');

                logToFile('WB', 'POST: ' + url(CategoryRequest.content) + ' ' + '\n' + '\{"nmIDs":' + replace(resultString(), '\n', '') + '\}');

                TRY {
                    EXTERNAL HTTP POST url(CategoryRequest.content) + '/content/v2/cards/delete/trash' HEADERS httpHeaders PARAMS resultFile() TO response;
                    fileToString(response());
                    logToFile('WB', resultString());
                    IF statusHttp() == 200 THEN {
                        isTrash(Item item) <- TRUE WHERE isTransfered(item);
                        postTrashItems();
                    }
                    message() <- messageStatusHTTP(STRING(statusHttp()));
                } CATCH {
                    logToFile('WB', messageCaughtException());
                    IF statusHttp() == 400 THEN {
                        IMPORT additionalErrors JSON FROM response();
                        extraDescriptionStatusHTTP() <- 'Товары не перенесены в корзину: ' + additionalErrors();
                    }
                    message() <- OVERRIDE messageStatusHTTP(STRING(statusHttp())), messageCaughtException();
                } FINALLY {
                    afterSendRequestIS();
                    MESSAGE '<h3>Перенос карточек товаров в корзину</h3>' NOWAIT;
                    MESSAGE message() NOWAIT;
                    APPLY NESTED LOCAL;
                }
                exported() <- exported() + postTransferItemsLimit();
            }
        } ELSE {
            MESSAGE 'Не выбраны карточки товаров для переноса в корзину или все выбранные товары уже в корзине';
        }
    }
}

dataPostRecoverItemsLimit = DATA INTEGER ();
postRecoverItemsLimit 'Лимит для восстановления карточек товаров из корзины' = OVERRIDE dataPostRecoverItemsLimit(), 1000;

postRecoverItems 'Восстановление карточек товаров из корзины' () {
    NEWSESSION NESTED(in[Item]){
        IF (GROUP SUM 1 IF in(Item item) AND isTrash(item)) THEN {
            setHttpHeadersIS();
            LOCAL message = STRING ();
            LOCAL response = FILE();
            LOCAL error = STRING ();
            LOCAL errorText = STRING ();
            LOCAL status = STRING ();
            LOCAL isRecovered = BOOLEAN (Item);
            isRecovered(Item item) <- TRUE WHERE in(item) AND isTrash(item);

            LOCAL index = INTEGER (Item);
            index(Item i) <- PARTITION SUM 1 IF isRecovered(i) ORDER i;

            LOCAL exported = INTEGER ();
            exported() <- 0;

            WHILE exported() < (GROUP MAX index(Item i)) DO {

                EXPORT JSON FROM 'value' = nmID(Item i) WHERE index(i) > exported() AND index(i) <= exported() + postRecoverItemsLimit();

                fileToString(exportFile(), 'UTF-8');
                stringToFile('\{"nmIDs":' + replace(resultString(), '\n', '') + '\}', 'UTF-8', 'json');

                logToFile('WB', 'POST: ' + url(CategoryRequest.content) + '/content/v2/cards/recover' + '\n' + '\{"nmIDs":' + replace(resultString(), '\n', '') + '\}');

                TRY {
                    EXTERNAL HTTP POST url(CategoryRequest.content) + '/content/v2/cards/recover' HEADERS httpHeaders PARAMS resultFile() TO response;
                    fileToString(response());
                    logToFile('WB', resultString());
                    IF statusHttp() >= 200 AND statusHttp() < 300 THEN {
                        isTrash(Item item) <- NULL WHERE isRecovered(item);
                        postItems();
                    }
                    message() <- messageStatusHTTP(STRING(statusHttp()));
                } CATCH {
                    logToFile('WB', messageCaughtException());
                    IF statusHttp() == 400 THEN {
                        IMPORT additionalErrors JSON FROM response();
                        extraDescriptionStatusHTTP() <- 'Товары не восстановлены из корзины: ' + additionalErrors();
                    }
                    message() <- OVERRIDE messageStatusHTTP(STRING(statusHttp())), messageCaughtException();
                } FINALLY {
                    afterSendRequestIS();
                    MESSAGE '<h3>Восстановление карточек товаров из корзины</h3>' NOWAIT;
                    MESSAGE message() NOWAIT;
                    APPLY NESTED LOCAL;
                }
                exported() <- exported() + postRecoverItemsLimit();
            }
        } ELSE {
            MESSAGE 'Не выбраны карточки товаров для восстановления из корзины или все выбранные товары уже не в корзине';
        }
    }
}

EXTEND FORM masterData
    PROPERTIES getItemAttribute(sg) GRID
    
    PROPERTIES getItemAttribute() PANEL 
    
    OBJECTS asg = Attribute
    PROPERTIES(asg) READONLYIF isReadonly() id, name, unitName
    PROPERTIES notNull(sg, asg), popular (sg, asg)
    ORDERS name(asg)
    FILTERS in(sg, asg)
    
    PROPERTIES() getItemLimits, postItems, postTrashItems, postTransferItems, postRecoverItems
    OBJECTS item = Item
    PROPERTIES(item) in
    PROPERTIES(item) READONLYIF isReadonly() isTrash
    PROPERTIES(item) READONLY error BACKGROUND RGB(255, 51, 51) IF error(item), errorText SHOWIF error(item) PANEL
    PROPERTIES(item) READONLYIF isReadonly() id, name
    PROPERTIES(item) READONLY nmID, imtID
    PROPERTIES(item) READONLYIF isReadonly() nameItemGroup, nameItemSubGroup
    PROPERTIES(item) NEWSESSION NEW, EDIT, DELETE
    ORDERS name(item)
    FILTERS itemSubGroup(item)
        
    FILTERGROUP filterItems
        FILTER 'Товары в корзине' isTrash(item)
        FILTER 'Товары не в корзине' NOT isTrash(item)
        FILTER 'Все товары' isTrash(item) OR NOT isTrash(item)

    OBJECTS i = Item
    PROPERTIES(i) READONLYIF isReadonly() isTrash
    PROPERTIES(i) READONLYIF isReadonly() id, name
    PROPERTIES(i) READONLY nmID, imtID
    PROPERTIES(i) READONLYIF isReadonly() nameItemGroup, nameItemSubGroup
    FILTERS imtID(item) == imtID(i),
        i != item

    OBJECTS attr = Attribute
    PROPERTIES (attr) READONLY id, name, nameClass
    PROPERTIES (attr) NEWSESSION EDIT, DELETE
    PROPERTIES NEWSESSION newAttribute() DRAW attr
    ORDERS name(attr)

    FILTERGROUP active
        FILTER 'Активные' active(attr) DEFAULT

    OBJECTS ownerClass = ItemSubGroup
    PROPERTIES in(ownerClass, attr) COLUMNS (ownerClass) HEADER name(ownerClass)
    PROPERTIES READONLY name(ownerClass) SHOWIF NULL
    ORDERS name(ownerClass)

    OBJECTS extraProp = ItemSubGroup
    PROPERTIES name(extraProp) READONLY
    PROPERTIES (extraProp, attr) notNull
    ORDERS name(extraProp)
;

DESIGN masterData {
    tabContainer {
        categoryItemSubGroup {
            NEW tabContainerAttribute AFTER BOX(sg){
                tabbed = TRUE;
                fill = 1;
                MOVE BOX(tnsg);
                MOVE BOX(asg);
            }
        }
        NEW containerItemAttribute {
            caption = 'Характеристики предмета';
            MOVE PROPERTY (getItemAttribute());
            MOVE BOX(attr);
            MOVE BOX(ownerClass);
            NEW tabbedPane {
                tabbed = TRUE;
                fill = 1;
                MOVE BOX(extraProp) { caption = 'Настройки'; }
            }
        }
        NEW containerItem {
            caption = 'Товары';
            NEW actionContainer {
                horizontal = TRUE;
                MOVE PROPERTY (getItemLimits());
                MOVE PROPERTY (postItems());
                MOVE PROPERTY (postTrashItems());
                MOVE PROPERTY (postTransferItems());
                MOVE PROPERTY (postRecoverItems());
            }
            MOVE BOX(item);
            MOVE BOX(i) {caption = 'Объединенные карточки товаров';};
            NEW errorContainer{
                align = STRETCH;
                caption = 'Текст ошибки';
                MOVE PROPERTY(errorText(item)) { 
                    caption = '';
                    align = STRETCH;
                    height = 50;
                    fontSize = 14;
                }
            }
        }
    }
}

GROUP value;
GROUP dimensions1 EXTID 'dimensions';

valueVariants = DATA LOCAL INTEGER(INTEGER);
variantsCharacteristics = DATA LOCAL INTEGER(INTEGER);
value1 = DATA LOCAL STRING(INTEGER);
characteristicsValue1 = DATA LOCAL INTEGER(INTEGER);
variantsSizes = DATA LOCAL INTEGER(INTEGER);

FORM uploadItems
    OBJECTS g = ItemSubGroup 
    PROPERTIES subjectID = INTEGER(id(g))
    FILTERS (GROUP SUM 1 IF in(Item ii) AND itemSubGroup(ii) == g)
    
    OBJECTS i = Item EXTID 'variants'
    PROPERTIES(i) id EXTID 'vendorCode', 
                  name EXTID 'title',
                  description EXTID 'description'
    PROPERTIES(i) IN dimensions1 length EXTID 'length',
                                 width EXTID 'width',
                                 height EXTID 'height',
                                 weightBrutto EXTID 'weightBrutto'
    FILTERS itemSubGroup(i) == g
    
    OBJECTS a = Attribute EXTID 'characteristics'
    PROPERTIES id = INTEGER(id(a)) EXTID 'id',
               valueString = value[Item, Attribute](i, a) IF NOT a IS AttributeNumeric EXTID 'value',
               valueNumeric = value[Item, AttributeNumeric](i, a) EXTID 'value'
    FILTERS value(i, a)

    OBJECTS size = Size EXTID 'sizes'
    PROPERTIES(size) techSize EXTID 'techSize', 
                     wbSize EXTID 'wbSize', 
                     price EXTID 'price',
                     skus EXTID 'skus'
    FILTERS itemWB(size) == i
;

dataUploadItemsLimit = DATA INTEGER ();
uploadItemsLimit 'Лимит для создания новых карточек' = OVERRIDE dataUploadItemsLimit(), 100;

uploadItems 'Создание новых карточек' () {
    NEWSESSION NESTED{
        setHttpHeadersIS();

        LOCAL message = STRING ();
        LOCAL response = FILE();
        LOCAL error = STRING ();
        LOCAL errorText = STRING ();
        LOCAL status = STRING ();
        LOCAL isNew = BOOLEAN (Item);
        isNew(Item item) <- TRUE WHERE id(item) AND NOT (nmID(item) OR imtID(item));

        IF (GROUP SUM 1 IF isNew(Item item)) THEN {
            logToFile('WB', 'POST: ' +url(CategoryRequest.content) + '/content/v2/cards/upload');

            LOCAL index = INTEGER (Item);
            index(Item i) <- PARTITION SUM 1 IF isNew(i) ORDER i;

            LOCAL exported = INTEGER ();
            exported() <- 0;

            WHILE exported() < (GROUP MAX index(Item i)) DO {
                
                in(Item i) <- TRUE WHERE index(i) > exported() AND index(i) <= exported() + uploadItemsLimit();
                EXPORT uploadItems FILTERS index(i) > exported() AND index(i) <= exported() + uploadItemsLimit() JSON;
                in(Item i) <- NULL;

                fileToString(exportFile());
                resultString() <- replace(resultString(), '"g":', '');

                FOR index(Item i) > exported() AND index(i) <= exported() + uploadItemsLimit() AND itemWB(Size s) == i AND skus(s) NOINLINE DO {
                    resultString() <- replace(resultString(), '"' + skus(s) + '"', '[' + (GROUP CONCAT '"' + id(Barcode b) + '"' IF size(b) == s, ',' ORDER b) + ']');
                }

                resultString() <- ltrim(rtrim(resultString(), '\}'), '\{');
                stringToFile(resultString(), 'UTF-8', 'json');

                TRY {
                    EXTERNAL HTTP POST url(CategoryRequest.content) + '/content/v2/cards/upload' HEADERS httpHeaders PARAMS resultFile() TO response;
                    fileToString(response());
                    logToFile('WB', resultString());
                    message() <- messageStatusHTTP(STRING(statusHttp()));
                } CATCH {
                    logToFile('WB', messageCaughtException());
                    message() <- OVERRIDE messageStatusHTTP(STRING(statusHttp())), messageCaughtException();
                } FINALLY {
                    afterSendRequestIS();
                    MESSAGE '<h3>Создание новых карточек</h3>' NOWAIT;
                    MESSAGE message() NOWAIT;
                    LOCAL NESTED status200 = BOOLEAN ();
                    status200() <- TRUE IF statusHttp() == 200;
                    APPLY NESTED LOCAL;
                    IF status200() THEN {
                        checkErrors();
                        postItems();
                    }
                    status200() <- NULL;
                }
                exported() <- exported() + uploadItemsLimit();
            }
        } ELSE {
            MESSAGE 'Все карточки товаров уже созданы, нечего выгружать';
        }   
    }
}

uploadItem 'Создание новой карточки' (Item item) {
    NEWSESSION NESTED{
        setHttpHeadersIS();

        LOCAL message = STRING ();
        LOCAL response = FILE();
        LOCAL error = STRING ();
        LOCAL errorText = STRING ();
        LOCAL status = STRING ();
        LOCAL isNew = BOOLEAN (Item);
        isNew(item) <- TRUE WHERE id(item) AND NOT (nmID(item) OR imtID(item));

        IF isNew(item) THEN {
            logToFile('WB', 'POST: ' +url(CategoryRequest.content) + '/content/v2/cards/upload');

            in(item) <- isNew(item);
            EXPORT uploadItems FILTERS isNew(i) JSON;
            in(item) <- NULL;

            fileToString(exportFile());
            resultString() <- replace(resultString(), '"g":', '');

            FOR isNew(Item i) AND itemWB(Size s) == i AND skus(s) NOINLINE DO {
                resultString() <- replace(resultString(), '"' + skus(s) + '"', '[' + (GROUP CONCAT '"' + id(Barcode b) + '"' IF size(b) == s, ',' ORDER b) + ']');
            }

            resultString() <- ltrim(rtrim(resultString(), '\}'), '\{');
            stringToFile(resultString(), 'UTF-8', 'json');

            TRY {
                EXTERNAL HTTP POST url(CategoryRequest.content) + '/content/v2/cards/upload' HEADERS httpHeaders PARAMS resultFile() TO response;
                fileToString(response());
                logToFile('WB', resultString());
                message() <- messageStatusHTTP(STRING(statusHttp()));
            } CATCH {
                logToFile('WB', messageCaughtException());
                message() <- OVERRIDE messageStatusHTTP(STRING(statusHttp())), messageCaughtException();
            } FINALLY {
                afterSendRequestIS();
                MESSAGE '<h3>Создание новой карточки</h3>' NOWAIT;
                MESSAGE message() NOWAIT;
                IF statusHttp()==200 THEN {
                    checkErrors();
                    postItems();
                }
                APPLY;
            }
        } ELSE {
            MESSAGE 'Карточка товара уже создана, нечего выгружать' NOWAIT;
        }
    }
}

EXTEND FORM masterData 
    PROPERTIES uploadItems()
    PROPERTIES uploadItem(item) SHOWIF id(item) AND NOT (nmID(item) OR imtID(item))
;

DESIGN masterData {
    actionContainer {
        MOVE PROPERTY(uploadItems());
    }
}

toUpdateWB = DATA BOOLEAN (Item);

WHEN (CHANGED(imtID(Item i)) OR CHANGED(name(i)) OR CHANGED(description(i)) OR CHANGED(width(i)) OR 
    CHANGED(height(i)) OR CHANGED(length(i)) OR CHANGED(weightBrutto(i)) OR (GROUP SUM 1 IF CHANGED(value(i, Attribute a))) OR
    (GROUP SUM 1 IF itemWB(Size s) == i AND (CHANGED(chrtID(s)) OR CHANGED(techSize(s)) OR CHANGED(wbSize(s)) OR CHANGED(skus(s)))) OR
    (GROUP SUM 1 IF SET(itemWB(Size s) == i))) AND NOT SET(i IS Item) AND id(i) AND nmID(i) AND imtID(i) DO {
        toUpdateWB(i) <- TRUE;
}

FORM updateItem
    OBJECTS i = Item EXTID 'value'
    PROPERTIES(i)
        nmID EXTID 'nmID',
        id EXTID 'vendorCode',
        name EXTID 'title',
        description EXTID 'description'
    PROPERTIES(i) IN dimensions1 length EXTID 'length',
        width EXTID 'width',
        height EXTID 'height',
        weightBrutto EXTID 'weightBrutto'

    OBJECTS a = Attribute EXTID 'characteristics'
    PROPERTIES id = INTEGER(id(a)) EXTID 'id',
        valueString = value[Item, Attribute](i, a) IF NOT a IS AttributeNumeric EXTID 'value',
        valueNumeric = value[Item, AttributeNumeric](i, a) EXTID 'value'
    FILTERS value(i, a)

    OBJECTS size = Size EXTID 'sizes'
    PROPERTIES(size)
        chrtID EXTID 'chrtID',
        techSize EXTID 'techSize',
        wbSize EXTID 'wbSize',
        skus EXTID 'skus'
    FILTERS itemWB(size) == i
;

updateItem 'Обновить карточку товара' (Item item) {
    NEWSESSION {
        setHttpHeadersIS();

        LOCAL message = STRING ();
        LOCAL response = FILE();
        LOCAL error = STRING ();
        LOCAL errorText = STRING ();
        LOCAL status = STRING ();
        LOCAL isChanged = BOOLEAN (Item);
        isChanged(item) <- TRUE WHERE id(item) AND nmID(item) AND imtID(item);

        IF isChanged(item) THEN {
            logToFile('WB', 'POST: ' + url(CategoryRequest.content) + '/content/v2/cards/update');

            EXPORT updateItem FILTERS isChanged(i) JSON;

            fileToString(exportFile());
            FOR itemWB(Size s) == item AND skus(s) DO 
                resultString() <- replace(resultString(), '"' + skus(s) + '"', '[' + (GROUP CONCAT '"' + id(Barcode b) + '"' IF size(b) == s, ',' ORDER b) + ']');
            stringToFile(resultString(), 'UTF-8', 'json');
    
            TRY {
                EXTERNAL HTTP POST url(CategoryRequest.content) + '/content/v2/cards/update' HEADERS httpHeaders PARAMS resultFile() TO response;
                fileToString(response());
                logToFile('WB', resultString());
    
                message() <- messageStatusHTTP(STRING(statusHttp()));
            } CATCH {
                logToFile('WB', messageCaughtException());
                message() <- OVERRIDE messageStatusHTTP(STRING(statusHttp())), messageCaughtException();
            } FINALLY {
                afterSendRequestIS();
                MESSAGE '<h3>Обновить карточку товара</h3>' NOWAIT;
                MESSAGE message() NOWAIT;
                IF statusHttp()==200 THEN {
                    checkErrors();
                    toUpdateWB(item) <- NULL WHERE PREV(toUpdateWB(item)) AND NOT error(item);
                }
                APPLY;
            }
        } ELSE {
            MESSAGE 'Нет необходимости в обновлении карточки товара' NOWAIT;
        }
    }
}

dataUpdateItemsLimit = DATA INTEGER ();
updateItemsLimit 'Лимит для обновления карточек товаров' = OVERRIDE dataUpdateItemsLimit(), 3000;

updateItem 'Обновить карточки товаров' () {
    NEWSESSION {
        setHttpHeadersIS();

        LOCAL message = STRING ();
        LOCAL response = FILE();
        LOCAL error = STRING ();
        LOCAL errorText = STRING ();
        LOCAL status = STRING ();
        LOCAL isChanged = BOOLEAN (Item);
        isChanged(Item item) <- TRUE WHERE id(item) AND nmID(item) AND imtID(item) AND toUpdateWB(item);

        IF (GROUP SUM 1 IF isChanged(Item item)) THEN {
            logToFile('WB', 'POST: ' + url(CategoryRequest.content) + '/content/v2/cards/update');

            LOCAL index = INTEGER (Item);
            index(Item i) <- PARTITION SUM 1 IF isChanged(i) ORDER i;

            LOCAL exported = INTEGER ();
            exported() <- 0;

            WHILE exported() < (GROUP MAX index(Item i)) DO {

                EXPORT updateItem FILTERS index(i) > exported() AND index(i) <= exported() + updateItemsLimit() JSON;

                fileToString(exportFile());
                //resultString() <- '[' + resultString() + ']';
                FOR index(Item i) > exported() AND index(i) <= exported() + updateItemsLimit() AND itemWB(Size s) == i AND skus(s) DO 
                    resultString() <- replace(resultString(), '"' + skus(s) + '"', '[' + (GROUP CONCAT '"' + id(Barcode b) + '"' IF size(b) == s, ',' ORDER b) + ']');

                stringToFile(resultString(), 'UTF-8', 'json');

                TRY {
                    EXTERNAL HTTP POST url(CategoryRequest.content) + '/content/v2/cards/update' HEADERS httpHeaders PARAMS resultFile() TO response;
                    fileToString(response());
                    logToFile('WB', resultString());

                    message() <- messageStatusHTTP(STRING(statusHttp()));
                } CATCH {
                    logToFile('WB', messageCaughtException());
                    message() <- OVERRIDE messageStatusHTTP(STRING(statusHttp())), messageCaughtException();
                } FINALLY {
                    afterSendRequestIS();
                    MESSAGE '<h3>Обновить карточки товаров</h3>' NOWAIT;
                    MESSAGE message() NOWAIT;
                    LOCAL NESTED status200 = BOOLEAN ();
                    status200() <- TRUE IF statusHttp() == 200;
                    IF status200() THEN {
                        toUpdateWB(Item item) <- NULL WHERE PREV(toUpdateWB(item)) AND index(item) > exported() AND 
                            index(item) <= exported() + updateItemsLimit() AND NOT error(item);
                    }
                    APPLY NESTED LOCAL;
                    IF status200() THEN {
                        checkErrors();                        
                    }
                    status200() <- NULL;
                }
                exported() <- exported() + updateItemsLimit();
            }
        } ELSE {
            MESSAGE 'Все карточки товаров обновлены' NOWAIT;
        }    
    }
}
 
FORM moveConnItems 'Объединяемые карточки товаров'
    OBJECTS item = Item PANEL
    
    OBJECTS i = Item 
    PROPERTIES(i) READONLY nmID, imtID, name 
    FILTERS i=item

    OBJECTS i2 = Item
    PROPERTIES(i2) in
    PROPERTIES(i2) READONLY nmID, imtID, name
    FILTERS in(i2),
            NOT nmID(i)==nmID(i2)
;

DESIGN moveConnItems {
    REMOVE BOX(item);
    NEW splitContainer{
        fill = 1;
        MOVE BOX(i){
            caption = 'Основная карточка товара (объединяющая)';
        }
        MOVE BOX(i2){
            caption = 'Объединяемые(присоединяемые) карточки товара';
        }
    }
    MOVE TOOLBARBOX;
}

FORM moveDisConnItems 'Разъединяемые карточки товаров'
    OBJECTS item = Item PANEL

    OBJECTS i = Item
    PROPERTIES(i) in
    PROPERTIES(i) READONLY nmID, imtID, name
    FILTERS imtID(item) == imtID(i)

    OBJECTS i2 = Item
    PROPERTIES(i2) in    
    PROPERTIES(i2) READONLY nmID, imtID, name
    FILTERS in(i2)
;

DESIGN moveDisConnItems {
    REMOVE BOX(item);
    NEW splitContainer2{
        fill = 1;
        MOVE BOX(i){
            caption = 'Карточки товара с одинкововым внутренним кодом';
        }
        MOVE BOX(i2){
            caption = 'Карточки товаров, которые необходимо разъединить ';
        }
    }
    MOVE TOOLBARBOX;
}

CONSTRAINT CHANGED(imtID(Item item)) AND [GROUP SUM 1 BY imtID(Item i)](imtID(item)) > 30
    MESSAGE 'Нельзя объеденять больше 30 карточек товара в одну';

GROUP additionalErrors;

error1 = DATA LOCAL STRING();

FORM importErrorsMoveItems
    PROPERTIES() errorText, data, error1 EXTID 'error'
    PROPERTIES() IN additionalErrors error;

// https://content-api.wildberries.ru/content/v2/cards/moveNm
moveConnItems 'Объединить карточки товаров' (Item item) {
    NEWSESSION NESTED(in[Item]) {
        IF (GROUP SUM 1 IF in(Item i) AND nmID(i) AND imtID(i) AND i!=item) THEN {
            IF (GROUP MAX Item i IF in(i) AND i!=item AND NOT itemSubGroup(i) == itemSubGroup(item)) THEN {
                MESSAGE 'Для объединения можно выбрать только карточки товаров с одинаковой родительской категорией' NOWAIT;
            } ELSE {
                    DIALOG moveConnItems OBJECTS item = item DO {
                        setHttpHeadersIS();
    
                        LOCAL message = STRING ();
                        LOCAL response = FILE();
                        LOCAL status = STRING ();
                        errorText(item) <- NULL WHERE error(item);
                        error(item) <- NULL WHERE error(item);
    
                        logToFile('WB', 'POST: ' + url(CategoryRequest.content) + '/content/v2/cards/moveNm');
    
                        EXPORT JSON FROM 'value' = nmID(Item i) WHERE in(i) AND i IS Item;
                        fileToString(exportFile(), 'UTF-8');
                        stringToFile('\{"targetIMT":' + imtID(item) + ',' + '"nmIDs":' + replace(resultString(), '\n', '') + '\}', 'UTF-8', 'json');
                        logToFile('WB', resultFile());
    
                        TRY {
                            EXTERNAL HTTP POST url(CategoryRequest.content) + '/content/v2/cards/moveNm' HEADERS httpHeaders PARAMS resultFile() TO response;
                            fileToString(response());
                            logToFile('WB', resultString());
                            IF statusHttp() >= 200 AND statusHttp() < 300 THEN {
                                imtID(Item i) <- imtID(item) WHERE in(i);
                                in(Item i) <- NULL WHERE in(i);
                                message() <- messageStatusHTTP(STRING(statusHttp()));
                            }
                        } CATCH {
                            IF statusHttp() == 400 OR statusHttp() == 413 THEN {
                                IMPORT importErrorsMoveItems JSON FROM response();
                                logToFile('WB', messageCaughtException());
                                extraDescriptionStatusHTTP() <- 'Карточки товаров не объединены: ' + errorText();
                            }
                            error(item) <- TRUE;
                            errorText(item) <- OVERRIDE message(), errorText();
                            message() <- OVERRIDE messageStatusHTTP(STRING(statusHttp())), messageCaughtException();
                        } FINALLY {
                            afterSendRequestIS();
                            MESSAGE '<h3>Объединение карточкек товаров</h3>' NOWAIT;
                            MESSAGE message() NOWAIT;
                            APPLY NESTED LOCAL;
                        }
                    }
               
            }
        } ELSE {
            MESSAGE 'Для объединения не выбраны карточки товаров' NOWAIT;
        }
    }
}

moveDisconnItems 'Разъединить карточки товаров' (Item item) {
    NEWSESSION NESTED(in[Item]) {
        IF nmID(item) AND imtID(item) THEN {
            DIALOG moveDisConnItems OBJECTS item = item DO {
                    setHttpHeadersIS();

                    LOCAL message = STRING ();
                    LOCAL response = FILE();
                    LOCAL error = STRING ();
                    LOCAL errorText = STRING ();
                    LOCAL status = STRING ();
                    errorText(item) <- NULL WHERE error(item);
                    error(item) <- NULL WHERE error(item);

                    logToFile('WB', 'POST: ' + url(CategoryRequest.content) + '/content/v2/cards/moveNm');

                    EXPORT JSON FROM 'value' = nmID(Item i) WHERE in(i);
                    fileToString(exportFile(), 'UTF-8');
                    stringToFile('\{"nmIDs":' + replace(resultString(), '\n', '') + '\}', 'UTF-8', 'json');

                    TRY {
                        EXTERNAL HTTP POST url(CategoryRequest.content) + '/content/v2/cards/moveNm' HEADERS httpHeaders PARAMS resultFile() TO response;
                        fileToString(response());
                        logToFile('WB', resultString());
                        IF statusHttp() >= 200 AND statusHttp() < 300 THEN {
                            imtID(Item i) <- NULL WHERE in(i);
                            in(Item i) <- NULL WHERE in(i);
                            message() <- messageStatusHTTP(STRING(statusHttp()));
                        }
                    } CATCH {
                        IF statusHttp() == 400 OR statusHttp() == 413 THEN {
                            IMPORT importErrorsMoveItems JSON FROM response();
                            logToFile('WB', messageCaughtException());
                            extraDescriptionStatusHTTP() <- 'Карточки товаров не разъединены: ' + errorText();
                        }
                        message() <- OVERRIDE messageStatusHTTP(STRING(statusHttp())), messageCaughtException();
                        error(item) <- TRUE;
                        errorText(item) <- OVERRIDE message(), errorText();

                    } FINALLY {
                        afterSendRequestIS();
                        MESSAGE '<h3>Разъединение карточкек товаров</h3>' NOWAIT;
                        MESSAGE message() NOWAIT;
                        APPLY NESTED LOCAL;
                        LOCAL NESTED status200 = BOOLEAN ();
                        status200() <- TRUE IF statusHttp() >= 200 AND statusHttp() < 300;
                        IF status200() THEN {
                            postItems(); // получаем новые imtID для разъединенных карточек товаров
                        }
                        status200() <- NULL; 
                    }
            }
        } ELSE {
            MESSAGE 'У товара нет кода или артикула WB. Для разъединения получите их через \'Получить список карточек товаров\'' NOWAIT;
        }
    }
}

EXTEND FORM masterData
    PROPERTIES updateItem()
    PROPERTIES updateItem(item) DRAW item TOOLBAR SHOWIF nmID(item) AND imtID(item)
    PROPERTIES DRAW item TOOLBAR moveConnItems(item), moveDisconnItems(item)
;

DESIGN masterData {
    actionContainer {
        MOVE PROPERTY(updateItem());
    }
}

EXTEND FORM integrationData
    PROPERTIES() postItemsLimit, postTrashItemsLimit, postTransferItemsLimit, postRecoverItemsLimit, updateItemsLimit, 
        uploadItemsLimit
;

DESIGN integrationData {
    requestLimits {
        MOVE PROPERTY (postItemsLimit());
        MOVE PROPERTY (postTrashItemsLimit());
        MOVE PROPERTY (postTransferItemsLimit());
        MOVE PROPERTY (postRecoverItemsLimit());
        MOVE PROPERTY (updateItemsLimit());
        MOVE PROPERTY (uploadItemsLimit());
    }
}

// ----------------------------------- Статус карточки товара -----------------------------------------------------//

createdStatus 'Статус' (Item item) = CASE
    WHEN item IS Item AND error(item) THEN 'Ошибка создания/обновления'                                         
    WHEN item IS Item AND toUpdateWB(item) THEN 'Изменён'
    WHEN item IS Item AND nmID(item) AND isTrash(item) THEN 'В корзине'
    WHEN item IS Item AND nmID(item) AND imtID(item) THEN 'Создан/обновлён'
    WHEN item IS Item AND NOT nmID(item) AND NOT imtID(item) THEN 'Новый'
;

EXTEND FORM item
    PROPERTIES(i) READONLY createdStatus
;

DESIGN item {
    itemHeader {
        MOVE PROPERTY(createdStatus(i)) AFTER PROPERTY(isTrash(i));
    }    
}

EXTEND FORM masterData
    PROPERTIES(item) READONLY createdStatus AFTER nmID(item)
;