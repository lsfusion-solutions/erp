MODULE PurchaseInvoiceConsignmentRu;

REQUIRE PurchaseInvoice,
        ConsignmentRu,
        PurchaseShipment,
        InvoiceRu,
        LegalEntity,
        Store,
        StatusUpd, PurchaseOperationRu;

NAMESPACE Purchase;

EXTEND CLASS Invoice : Consignment;

dataDate[Consignment] (Invoice consignment) += date(consignment);
number[Consignment] (Invoice consignment) += number(consignment);
series[Consignment] (Invoice consignment) += series(consignment);

dataSupplier (Invoice consignment) += from(consignment);
//overAddressSupplier (Invoice consignment) +=
//    (CONCAT ', ', (OVERRIDE name(store(dataSupplierStock(consignment))), name(dataSupplierStock(consignment))), address(store(dataSupplierStock(consignment))))
//        IF consignment IS Invoice;

dataCustomer (Invoice consignment) += to(consignment);
overAddressCustomer (Invoice consignment) += address(dataCustomer(consignment));

overAddressCustomerStock (Invoice consignment) += address(dataCustomerStock(consignment));

dataSupplierStock[Consignment] (Invoice consignment) += fromStock(consignment);
dataCustomerStock[Consignment] (Invoice consignment) += toStock(consignment);

currency[Consignment] (Invoice consignment) += currency(consignment);

managerSupplier[Consignment] (Invoice consignment)  += chief(to(consignment), currentDate());
accountantSupplier[Consignment] (Invoice consignment) += booker(to(consignment),currentDate());

contract[Consignment](Invoice consignment) += contractSku(consignment);

statusUpd[Consignment](Invoice consignment) += statusUpd(operation(consignment));

EXTEND CLASS InvoiceDetail : ConsignmentDetail;

index[ConsignmentDetail] (InvoiceDetail d) += index (d);
consignment[ConsignmentDetail] (InvoiceDetail d) += invoice (d);
skip[ConsignmentDetail](InvoiceDetail d) += skipConsignment (d);
dataSku[ConsignmentDetail] (InvoiceDetail d) += sku (d);
batch[ConsignmentDetail] (InvoiceDetail d) += batch (d);
dataQuantity[ConsignmentDetail] (InvoiceDetail d) += quantity (d);
dataAmountPack (InvoiceDetail d) += amountPack (d);
dataPackQuantity (InvoiceDetail d) += packQuantity (d);
dataGrossWeight (InvoiceDetail d) += sumGrossWeight (d);
dataNetWeight (InvoiceDetail d) += sumNetWeight (d);
dataPrice (InvoiceDetail detail) += WHEN detail IS InvoiceDetail THEN price(detail);
dataSum (InvoiceDetail detail) +=  WHEN detail IS InvoiceDetail THEN sum(detail);
dataVAT (InvoiceDetail detail) +=  WHEN detail IS InvoiceDetail THEN valueVAT(detail);
dataSumVAT (InvoiceDetail detail) +=  WHEN detail IS InvoiceDetail THEN VATSum(detail);
dataSumConsignment (InvoiceDetail detail) +=  WHEN detail IS InvoiceDetail THEN invoiceSum(detail);
dataShipmentPrice (InvoiceDetail detail) +=  WHEN detail IS InvoiceDetail THEN shipmentPrice(detail);
dataShipmentSum (InvoiceDetail detail) +=  WHEN detail IS InvoiceDetail THEN shipmentSum(detail);

EXTEND FORM invoices
    PROPERTIES (i) incl BEFORE isClosed(i)
    PROPERTIES SHOWIF isOpened(i) editAttributes 'Заполнить атрибуты накладной' = editAttributes(i) IMAGE 'edit.png', editAttributesUpd (i)
    PROPERTIES(i) READONLYIF banPrint(i) printConsignmentTorg13, printConsignmentTorg12, printConsignmentUpd, printConsignmentUpdBreake, printConsignmentUpdBreakeAuto,
        printConsignmentM15
;

DESIGN invoices {
    printTab {
        NEW consignmentRow1 {
            align = START;
            horizontal = TRUE;

            NEW contOne {
                alignment = STRETCH;
                horizontal = TRUE;
                caption = 'Накладная';
                MOVE PROPERTY(editAttributes) {
                    alignment = STRETCH;
                }
            }
            NEW tn {
                alignment = STRETCH;
                type = COLUMNS;
                lines = 3;
                caption = 'Отчеты';
                MOVE PROPERTY(printConsignmentTorg13(i)) { alignment = STRETCH; }
                MOVE PROPERTY(printConsignmentTorg12(i)) { alignment = STRETCH; }
                MOVE PROPERTY(printConsignmentM15(i)) { alignment = STRETCH; }
            }
        }

        NEW consignmentUPD{
            align = START;
            horizontal = TRUE;

            NEW contUPD {
                alignment = STRETCH;
                horizontal = TRUE;
                caption = 'УПД';
                MOVE PROPERTY(editAttributesUpd(i)) {
                    alignment = STRETCH;
                }
            }

            NEW upd {
                alignment = STRETCH;
                type = COLUMNS;
                lines = 3;
                caption = 'Отчеты';
                MOVE PROPERTY(printConsignmentUpd(i)) { alignment = STRETCH; }
                MOVE PROPERTY(printConsignmentUpdBreake(i)) { alignment = STRETCH; }
                MOVE PROPERTY(printConsignmentUpdBreakeAuto(i)) { alignment = STRETCH; }
            }
        }
    }
}
//
//overVAT(UserInvoiceDetail d) += valueCurrentVAT(country(supplierStock(d)), 0.0) IF isNotVATPayer(supplier(d));
//
//CONSTRAINT isPosted(UserInvoiceDetail d) AND supplier(userInvoice(d)) AND sku(d) AND NOT valueVAT(d) AND NOT isNotVATPayer(supplier(d)) AND inVATPayer()
//    MESSAGE 'Поставщик является плательщиком НДС';