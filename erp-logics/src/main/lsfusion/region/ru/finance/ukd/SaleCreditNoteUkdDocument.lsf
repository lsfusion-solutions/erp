MODULE SaleCreditNoteUkdDocument;

REQUIRE SaleInvoiceCreditNote, UkdDocument;

NAMESPACE Ukd;

EXTEND CLASS CreditNote: UkdBaseDocument;
supplier(CreditNote c) += Sale.supplier(c);
isClosed(CreditNote c) += Sale.isClosed(c);

creditNote = DATA CreditNote(UkdDocument);
creditNoteDetail = DATA CreditNoteDetail(UkdDocumentDetail);

ukdDocument = GROUP AGGR UkdDocument ei BY creditNote(ei);

ukdBaseDocument (UkdDocument ukd) += creditNote(ukd);

@fillUkdDocument(creditNote);

createUkd 'Создать УКД' (CreditNote creditNote)  {
    IF NOT ukdDocument(creditNote) THEN NEWSESSION {
        NEW ei = UkdDocument {
            fill(creditNote, ei);
        }
        APPLY;
        IF NOT canceled() THEN {
            MESSAGE 'УКД создан';    
        }
    }
}

recreateUkdDocument (CreditNote creditNote) {
    DELETE UkdDocumentDetail d WHERE ukdDocument(d)=ukdDocument(creditNote);
    DELETE UkdDocumentInfoDetail d WHERE ukdDocument(d)=ukdDocument(creditNote);
    fill(creditNote, ukdDocument(creditNote));
}

recreateUkd 'Перезаполнить УКД' (CreditNote creditNote) {
    IF ukdDocument(creditNote) THEN {
        IF isTransferred(ukdDocument(creditNote)) THEN {
            MESSAGE 'Документ УКД не может быть пересоздан, т.к. уже отправлен' NOWAIT;
        } ELSE {
            recreateUkdDocument(creditNote);
            APPLY;
            IF NOT canceled() THEN {
                MESSAGE 'УКД перезаполнен';    
            }                
        }
    } ELSE {
        createUkd(creditNote);
    }
}

captionCreateUkd (CreditNote creditNote) = 
    IF Sale.countIncl() 
        THEN 'Создать УКД (отм.)'
        ELSE IF ukdDocument(creditNote) 
            THEN 'Перезаполнить УКД' ELSE 'Создать УКД';

showUkd 'Просмотреть УКД' (CreditNote i) {
    show(ukdDocument(i));
}

editUkd 'Редактировать УКД' (CreditNote i) {
    edit(ukdDocument(i));
} IMAGE 'edit.png';

createCreditNoteUkdDocuments 'Создать УКД (отм.)' () {
    IF Sale.countIncl() THEN {
        NEWSESSION NESTED(incl[CreditNote]) {
            LOCAL count = INTEGER ();
            count() <- Sale.countIncl();
            FOR incl(CreditNote i) DO {
                IF ukdDocument(i) THEN {
                    recreateUkdDocument(i);
                } ELSE {
                    NEW ei = UkdDocument {
                        fill(i, ei);
                    }
                }
            }
            APPLY NESTED(count);
            IF NOT canceled() THEN MESSAGE CONCAT ' ', 'Обработано', count(), 'документов(-а).';
        }    
    } ELSE {
        MESSAGE 'Проставьте признак "Отм." для обрабатываемых документов.';
    }
}

createUkdDocuments (CreditNote creditNote) {
     IF Sale.countIncl() THEN {
        createCreditNoteUkdDocuments();   
     } ELSE {
        recreateUkd(creditNote);
     }
}

ukdInvoiceNumber 'Номер КСЧФ' (CreditNote i) = numberInvoice(ukdDocument(i));

EXTEND FORM creditNotes
    PROPERTIES (c) incl FIRST
    PROPERTIES (c) READONLY ukdInvoiceNumber AFTER series(c)
    PROPERTIES //createUpd(i) SHOWIF NOT updDocument(i),
               createUkdDocuments(c) HEADER captionCreateUkd(c),
               ukdNumber = ukdInvoiceNumber(c) SHOWIF ukdDocument(c) PANEL READONLY,
               editUkd(c) SHOWIF ukdDocument(c),
               showUkd(c) SHOWIF ukdDocument(c)
;

DESIGN creditNotes {
    actionContainer {
        NEW ukdDocument {
            type = CONTAINERV;
            caption = 'УКД';
            NEW ukdNumber {
                type = CONTAINERH;
                MOVE PROPERTY(ukdNumber) {
                    charWidth = 20;
                };
                MOVE PROPERTY(editUkd(c));
                MOVE PROPERTY(showUkd(c));
                MOVE PROPERTY(createUkdDocuments(c));            
            }       
        }
    }
}