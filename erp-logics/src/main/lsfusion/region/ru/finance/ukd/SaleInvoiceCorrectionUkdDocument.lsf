MODULE SaleInvoiceCorrectionUkdDocument;

REQUIRE SaleInvoiceCorrection, UkdDocument;

NAMESPACE Ukd;
     
invoiceCorrection = DATA InvoiceCorrection(UkdDocument);
invoiceCorrectionDetail = DATA InvoiceCorrectionDetail(UkdDocumentDetail);

ukdDocument = GROUP AGGR UkdDocument ei BY invoiceCorrection(ei);

@fillUkdDocument(invoiceCorrection);
     
createUkd 'Создать УКД' (InvoiceCorrection invoice)  {
    IF NOT ukdDocument(invoice) THEN NEWSESSION {
        NEW ei = UkdDocument {
            fill(invoice, ei);
        }
        APPLY;
        IF NOT canceled() THEN {
            MESSAGE 'УКД создан';    
        }
    }
}

recreateUkdDocument (InvoiceCorrection invoice) {
    DELETE UkdDocumentDetail d WHERE ukdDocument(d)=ukdDocument(invoice);
    fill(invoice, ukdDocument(invoice));
}

recreateUkd 'Перезаполнить УКД' (InvoiceCorrection invoice) {
    IF ukdDocument(invoice) THEN {
        IF isTransferred(ukdDocument(invoice)) THEN {
            MESSAGE 'Документ УКД не может быть пересоздан, т.к. уже отправлен' NOWAIT;
        } ELSE {
            recreateUkdDocument(invoice);
            APPLY;
            IF NOT canceled() THEN {
                MESSAGE 'УКД перезаполнен';    
            }                
        }
    } ELSE {
        createUkd(invoice);
    }
}

captionCreateUkd (InvoiceCorrection invoice) = 
    IF countIncl() 
        THEN 'Создать УКД (отм.)'
        ELSE IF ukdDocument(invoice) 
            THEN 'Перезаполнить УКД' ELSE 'Создать УКД';

showUkd 'Просмотреть УКД' (InvoiceCorrection i) {
    show(ukdDocument(i));
}

editUkd 'Редактировать УКД' (InvoiceCorrection i) {
    edit(ukdDocument(i));
} IMAGE 'edit.png';

incl 'Отм.' = DATA LOCAL BOOLEAN (InvoiceCorrection);
countIncl = GROUP SUM 1 IF incl(InvoiceCorrection c);

createUkdDocuments 'Создать УКД (отм.)' () {
    IF countIncl() THEN {
        NEWSESSION NESTED(incl[InvoiceCorrection]) {
            LOCAL count = INTEGER ();
            count() <- countIncl();
            FOR incl(InvoiceCorrection i) DO {
                IF ukdDocument(i) THEN {
                    recreateUkdDocument(i);
                } ELSE {
                    NEW ei = UkdDocument {
                        fill(i, ei);
                    }
                }
            }
            APPLY NESTED(count);
            IF NOT canceled() THEN MESSAGE CONCAT ' ', 'Обработано', count(), 'документов(-а).';
        }    
    } ELSE {
        MESSAGE 'Проставьте признак "Отм." для обрабатываемых документов.';
    }
}

createUkdDocuments (InvoiceCorrection invoice) {
     IF countIncl() THEN {
        createUkdDocuments();   
     } ELSE {
        recreateUkd(invoice);
     }
}

ukdInvoiceNumber 'Номер КСЧФ' (InvoiceCorrection i) = numberInvoice(ukdDocument(i));

EXTEND FORM invoiceCorrections
    PROPERTIES (i) incl FIRST
    PROPERTIES (i) READONLY ukdInvoiceNumber AFTER series(i)
    PROPERTIES //createUpd(i) SHOWIF NOT updDocument(i),
               createUkdDocuments(i) HEADER captionCreateUkd(i),
               ukdNumber = ukdInvoiceNumber(i) SHOWIF ukdDocument(i) PANEL READONLY,
               editUkd(i) SHOWIF ukdDocument(i),
               showUkd(i) SHOWIF ukdDocument(i)
;

DESIGN invoiceCorrections {
    actionContainer {
        NEW ukdDocument {
            type = CONTAINERV;
            caption = 'УКД';
            NEW ukdNumber {
                type = CONTAINERH;
                MOVE PROPERTY(ukdNumber) {
                    charWidth = 20;
                };
                MOVE PROPERTY(editUkd(i));
                MOVE PROPERTY(showUkd(i));
                MOVE PROPERTY(createUkdDocuments(i));            
            }       
        }
    }
}
