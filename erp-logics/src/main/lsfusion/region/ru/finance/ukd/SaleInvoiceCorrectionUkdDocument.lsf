MODULE SaleInvoiceCorrectionUkdDocument;

REQUIRE SaleInvoiceCorrection, UkdDocument, ConsignmentUpdDocument;

NAMESPACE Ukd;

invoiceNumerator(UkdDocument o) <- defaultNumeratorInvoiceUpd() WHEN SET(o IS UkdDocument); //возможно нужно будет сделать параметризацию нумератора для организации

generateInvoiceNumber 'Сгенерировать номер' (UkdDocument o)  { 
    numberInvoice(o) <- curStringValue(invoiceNumerator(o));
    incrementValueSession(invoiceNumerator(o));
}
    
WHEN SETCHANGED(invoiceNumerator(UkdDocument o)) AND
     NOT CHANGED(numberInvoice(o)) 
     DO generateInvoiceNumber(o);
     
invoice = DATA Sale.Invoice(UkdDocument);
invoiceDetail = DATA Sale.InvoiceDetail(UkdDocumentDetail);

invoiceCorrection = DATA InvoiceCorrection(UkdDocument);
invoiceCorrectionDetail = DATA InvoiceCorrectionDetail(UkdDocumentDetail);

ukdDocument = GROUP AGGR UkdDocument ei BY invoiceCorrection(ei);

fill(InvoiceCorrection c, Sale.InvoiceDetail d, UkdDocumentDetail ed) {
    invoiceDetail(ed) <- d;
    invoiceCorrectionDetail(ed) <- invoiceCorrectionDetail(d, c);
    number(ed) <- index(d);
    nameSku(ed) <- nameSku(d);

    VATStatusB(ed)<- CASE 
                   WHEN isNotVATPayer(supplier(ukdDocument(ed)))  THEN VATStatus.vatNot
                   WHEN vat(d)==0.0  THEN VATStatus.vat0
                   WHEN vat(d)==10.0  THEN VATStatus.vat10
                   WHEN vat(d)==18.0  THEN VATStatus.vat18
                   WHEN vat(d)==20.0  THEN VATStatus.vat20
                   ;
                   
    VATStatusA(ed) <- VATStatusB(ed);                   
                                     
    invoiceSumB(ed) <- invoiceSum(d);
    invoiceSumA(ed) <- OVERRIDE invoiceSumA(d, c), invoiceSum(d);
    
    VATSumB(ed) <- VATSum(d);
    VATSumA(ed) <- OVERRIDE VATSumA(d, c), VATSum(d);
    
    withoutDutyB(ed) <- TRUE;
    withoutDutyA(ed) <- TRUE;
    
//    dutySumA(ed) <- 0.0;
//    dutySumB(ed) <- 0.0;
}

createDetails (InvoiceCorrection c, UkdDocument ukd) {
    FOR invoice(Sale.InvoiceDetail d) == invoice(c) NEW ed = UkdDocumentDetail  DO {
        ukdDocument(ed) <- ukd;
        fill(c, d, ed);
    }
}

showMessage = DATA BOOLEAN (UkdDocument);

overFill ABSTRACT LIST (InvoiceCorrection, UkdDocument);

fill(InvoiceCorrection invoice, UkdDocument ei) {
    invoiceCorrection(ei) <- invoice;
    invoice(ei) <- invoice(invoiceCorrection(ei));
    updDocument(ei) <- updDocument(invoice(invoice));
    
    baseInvoiceNumber(ei) <- numberInvoice(updDocument(ei));
    baseDateInvoice(ei) <- dateInvoice(updDocument(ei));
    
    idConsignor(ei) <- idEdi(supplier(invoice));
    idConsignee(ei) <- idEdi(customer(invoice));
    
    operatorEdi(ei) <- supplier(invoice);
    nameOperatorConsignor(ei) <- fullName(operatorEdi(supplier(invoice)));
    innOperatorConsignor(ei) <- STRING[10](inn(operatorEdi(supplier(invoice))));
    codeOperatorConsignor(ei) <- codeOperatorEdi(operatorEdi(supplier(invoice)));
    
    status(ei) <- CASE 
                        WHEN status(updDocument(ei))=UpdDocumentStatus.SHCF THEN UkdDocumentStatus.KSHCF
                        WHEN status(updDocument(ei))=UpdDocumentStatus.DOP THEN UkdDocumentStatus.DIS
                        WHEN status(updDocument(ei))=UpdDocumentStatus.SHCFDOP THEN UkdDocumentStatus.KSHCFDIS;
    
    businessNameDocument(ei) <- 'Документ, подтверждающий согласие (факт уведомления) покупателя на изменение стоимости отгруженных товаров (выполненных работ, оказанных услуг), переданных имущественных прав' 
                                    IF status(ei)=UkdDocumentStatus.KSHCF OR status(ei)=UkdDocumentStatus.KSHCFDIS;
                                    
    supplierNameDocument(ei) <- 'Документ, подтверждающий согласие (факт уведомления) покупателя на изменение стоимости отгруженных товаров (выполненных работ, оказанных услуг), переданных имущественных прав'
                                    WHERE status(ei)=UkdDocumentStatus.KSHCFDIS;
                                    
    supplierNameDocument(ei) <- 'Документ, подтверждающий согласие (факт уведомления) покупателя на изменение стоимости отгруженных товаров (выполненных работ, оказанных услуг), переданных имущественных прав'
                                    WHERE status(ei)=UkdDocumentStatus.KSHCFDIS;
                                    
    baseDocument(ei) <- 'Отсутствует';                                                                            
    
    dateSupplier(ei) <- date(invoice);
    timeSupplier(ei) <- time(invoice);
    nameOriginatorSupplier(ei) <- fullNameSupplier(invoice);
    
    showMessage(ei) <- TRUE;
    
    //invoiceNumerator(ei) <- defaultNumeratorConsignmentUpd(); //возможно нужно будет сделать параметризацию нумератора для организации
    dateInvoice(ei) <- date(invoice);
    codeCurrency(ei) <- sid(currency(invoice));
    
    supplier(ei) <- supplier(invoice);
    numberAccountSupplier(ei) <-  STRING[20](numberAccount(supplier(invoice)));            
    nameBankSupplier(ei) <- nameBank(account(supplier(invoice)));
    MFOBankSupplier(ei) <- STRING[9](MFOBank(account(supplier(invoice))));
    corrAccountBankSupplier(ei) <- corrAccount(bank(account(supplier(invoice))));
    
    nameSupplier(ei) <- fullNameSupplier(invoice);
    innSupplier(ei) <- inn(supplier(invoice));
    kppSupplier(ei) <- kpp(supplier(invoice));
    regionCodeSupplier(ei) <- STRING[2](id(region(supplierStock(invoice))));
    
    countryCodeAddressSupplier(ei) <- sid(country(supplier(invoice)));
    adrressSupplier(ei) <- address(supplier(invoice), date(invoice));
    
    customer(ei) <- customer(invoice);
    nameCustomer(ei) <- fullName(customer(invoice));
    innCustomer(ei) <- inn(customer(invoice));
    kppCustomer(ei) <- kpp(customer(invoice));
    regionCodeCustomer(ei) <- STRING[2](id(region(customerStock(invoice))));
    
    countryCodeAddressCustomer(ei) <- sid(country(customer(invoice)));
    adrressCustomer(ei) <- address(customer(invoice), date(invoice));
    
    description(ei) <- 'Товары переданы, результаты работ сдал, услуги оказаны в полном объеме' IF invoice IS InvoiceCorrection;
    
    supplierSignerCredentials(ei) <- Credential.c0 IF invoice IS InvoiceCorrection; 
    supplierSignerStatus(ei) <- CStatus.c1 IF invoice IS InvoiceCorrection; 
    supplierSignerCredentialsBase(ei) <- 'Должностные обязанности' IF invoice IS InvoiceCorrection; //todo: переделать на проверку
    
    supplierSignerInn(ei) <- inn(supplier(invoice));
    supplierSignerPosition(ei) <- name(position(chief(supplier(invoice), date(invoice))));
    
    supplierSignerAgentLastName(ei) <- lastName(chief(supplier(invoice), date(invoice)));
    supplierSignerAgentFirstName(ei) <- firstName(chief(supplier(invoice), date(invoice)));
    supplierSignerAgentMiddleName(ei) <- middleName(chief(supplier(invoice), date(invoice)));
    
    codeBusinessEvent(ei) <- 'Отсутствует'; //todo: to be written down something meaningful
    descriptionBusinessEvent(ei) <- 'Отсутствует';
    
        
    overFill(invoice, ei);
    
    createDetails(invoice, ei);
}
     
createUkd 'Создать УКД' (InvoiceCorrection invoice)  {
    IF NOT ukdDocument(invoice) THEN NEWSESSION {
        NEW ei = UkdDocument {
            fill(invoice, ei);
        }
        APPLY;
        IF NOT canceled() THEN {
            MESSAGE 'УКД создан';    
        }
    }
}

recreateUkdDocument (InvoiceCorrection invoice) {
    DELETE UkdDocumentDetail d WHERE ukdDocument(d)=ukdDocument(invoice);
    fill(invoice, ukdDocument(invoice));
}

recreateUkd 'Перезаполнить УКД' (InvoiceCorrection invoice) {
    IF ukdDocument(invoice) THEN {
        IF isTransferred(ukdDocument(invoice)) THEN {
            MESSAGE 'Документ УКД не может быть пересоздан, т.к. уже отправлен' NOWAIT;
        } ELSE {
            recreateUkdDocument(invoice);
            APPLY;
            IF NOT canceled() THEN {
                MESSAGE 'УКД перезаполнен';    
            }                
        }
    } ELSE {
        createUkd(invoice);
    }
}

captionCreateUkd (InvoiceCorrection invoice) = 
    IF countIncl() 
        THEN 'Создать УКД (отм.)'
        ELSE IF ukdDocument(invoice) 
            THEN 'Перезаполнить УКД' ELSE 'Создать УКД';

showUkd 'Просмотреть УКД' (InvoiceCorrection i) {
    show(ukdDocument(i));
}

editUkd 'Редактировать УКД' (InvoiceCorrection i) {
    edit(ukdDocument(i));
} IMAGE 'edit.png';

incl 'Отм.' = DATA LOCAL BOOLEAN (InvoiceCorrection);
countIncl = GROUP SUM 1 IF incl(InvoiceCorrection c);

createUkdDocuments 'Создать УКД (отм.)' () {
    IF countIncl() THEN {
        NEWSESSION NESTED(incl[InvoiceCorrection]) {
            LOCAL count = INTEGER ();
            count() <- countIncl();
            FOR incl(InvoiceCorrection i) DO {
                IF ukdDocument(i) THEN {
                    recreateUkdDocument(i);
                } ELSE {
                    NEW ei = UkdDocument {
                        fill(i, ei);
                    }
                }
            }
            APPLY NESTED(count);
            IF NOT canceled() THEN MESSAGE CONCAT ' ', 'Обработано', count(), 'документов(-а).';
        }    
    } ELSE {
        MESSAGE 'Проставьте признак "Отм." для обрабатываемых документов.';
    }
}

createUkdDocuments (InvoiceCorrection invoice) {
     IF countIncl() THEN {
        createUkdDocuments();   
     } ELSE {
        recreateUkd(invoice);
     }
}

ukdInvoiceNumber 'Номер КСЧФ' (InvoiceCorrection i) = numberInvoice(ukdDocument(i));

EXTEND FORM invoiceCorrections
    PROPERTIES (i) incl FIRST
    PROPERTIES (i) READONLY ukdInvoiceNumber AFTER series(i)
    PROPERTIES //createUpd(i) SHOWIF NOT updDocument(i),
               createUkdDocuments(i) HEADER captionCreateUkd(i),
               ukdNumber = ukdInvoiceNumber(i) SHOWIF ukdDocument(i) PANEL READONLY,
               editUkd(i) SHOWIF ukdDocument(i),
               showUkd(i) SHOWIF ukdDocument(i)
;

DESIGN invoiceCorrections {
    actionContainer {
        NEW ukdDocument {
            type = CONTAINERV;
            caption = 'УКД';
            NEW ukdNumber {
                type = CONTAINERH;
                MOVE PROPERTY(ukdNumber) {
                    charWidth = 20;
                };
                MOVE PROPERTY(editUkd(i));
                MOVE PROPERTY(showUkd(i));
                MOVE PROPERTY(createUkdDocuments(i));            
            }       
        }
    }
}
