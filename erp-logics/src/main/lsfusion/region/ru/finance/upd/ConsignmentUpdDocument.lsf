MODULE ConsignmentUpdDocument;

REQUIRE Invoice, ConsignmentRu, UpdDocument, EmployeeRu, LegalEntityEDIRu, BankRu;

NAMESPACE Upd;

defaultNumeratorInvoiceUpd = DATA Numerator ();
nameDefaultNumeratorInvoiceUpd 'Счета-фактуры' = name(defaultNumeratorInvoiceUpd()) IN defaultNumerator;

EXTEND FORM defaultNumerators
    PROPERTIES() nameDefaultNumeratorInvoiceUpd
;

loadDefaultNumerators() + { 
    NEW n = Numerator {
        name(n) <- 'Счет-фактуры';
        series(n) <- '';
        minValue(n) <- 1L;
        maxValue(n) <- 9999999999L;
        stringLength(n) <- 10;

        defaultNumeratorInvoiceUpd() <- n;
    }
}

invoiceNumerator(UpdDocument o) <- defaultNumeratorInvoiceUpd() WHEN SET(o IS UpdDocument); //возможно нужно будет сделать параметризацию нумератора для организации

generateInvoiceNumber 'Сгенерировать номер' (UpdDocument o)  { 
    numberInvoice(o) <- curStringValue(invoiceNumerator(o));
    incrementValueSession(invoiceNumerator(o));
}
    
WHEN SETCHANGED(invoiceNumerator(UpdDocument o)) AND
     NOT CHANGED(numberInvoice(o)) 
     DO generateInvoiceNumber(o);

invoice = DATA Invoice(UpdDocument);
invoiceDetail = DATA InvoiceDetail(UpdDocumentDetail);
updDocument = 
    GROUP LAST UpdDocument ei
        IF ei IS UpdDocument AND NOT correctionNumber(ei)
        ORDER dateInvoice(ei), ei 
        BY invoice(ei);

updDocumentDetail = GROUP LAST UpdDocumentDetail detail AS UpdDocumentDetail IF detail IS UpdDocumentDetail 
                ORDER dateInvoice(updDocument(detail)), detail BY invoiceDetail(detail);

updStatus = ABSTRACT UpdDocumentStatus (Operation.Operation);

overFill ABSTRACT LIST (UpdDocument, Consignment);

showMessage (UpdDocument) = DATA BOOLEAN (UpdDocument);

overNameCustomerStock(Consignment c) += ISTRING[350] (CONCAT ', ', fullName(customer(c)), name(customerStock(c)));
overNameCustomerStore(Consignment c) += ISTRING[350] (CONCAT ', ', fullName(customer(c)), (OVERRIDE nameStore(customerStock(c)), name(customerStock(c))));
overStatusUpd(Consignment c) += 
    IF status(updDocument(c)) == UpdDocumentStatus.SHCF OR status(updDocument(c)) == UpdDocumentStatus.SHCFDOP 
    THEN StatusUpd.one
    ELSE IF status(updDocument(c)) == UpdDocumentStatus.DOP THEN StatusUpd.two;

fill(ConsignmentDetail d, UpdDocumentDetail ed) {
    //updDocument(ed) <- ei;
    invoiceDetail(ed) <- d;
    number(ed) <- index(d);
    idUOM(ed) <- OVERRIDE codeOKEI(UOM(sku(d))), idUOM(d);
    nameUOM(ed) <- nameUOM(sku(d));
    idSku(ed) <- barCode(d); 
    nameSku(ed) <- nameSku(d);
    quantity(ed) <- quantity(d);
    price(ed) <- price(d);
    sum(ed) <- sum(d);

    VATStatus(ed)<- CASE 
                   WHEN isNotVATPayer(supplier(updDocument(ed)))  THEN VATStatus.vatNot
                   WHEN vat(d)==0.0  THEN VATStatus.vat0
                   WHEN vat(d)==10.0  THEN VATStatus.vat10
                   WHEN vat(d)==18.0  THEN VATStatus.vat18
                   WHEN vat(d)==20.0  THEN VATStatus.vat20
                   ;//todo: со временем надо остальные добавить
                                     
    invoiceSum(ed) <- sumConsignment(d);
    VATSum(ed) <- sumVAT(d);
    withoutDuty(ed) <- TRUE;
}

createDetails (Consignment c, UpdDocument upd) {
    FOR consignment(ConsignmentDetail d) == c NEW ed = UpdDocumentDetail  DO {
        updDocument(ed) <- upd;
        fill(d, ed);
    }
}

fill(Consignment invoice, UpdDocument ei) {
    invoice(ei) <- invoice;
    idConsignor(ei) <- idEdi(supplier(invoice));
    idConsignee(ei) <- idEdi(customer(invoice));
    
    operatorEdi(ei) <- supplier(invoice);
    nameOperatorConsignor(ei) <- fullName(operatorEdi(supplier(invoice)));
    innOperatorConsignor(ei) <- STRING[10](inn(operatorEdi(supplier(invoice))));
    codeOperatorConsignor(ei) <- codeOperatorEdi(operatorEdi(supplier(invoice)));
    
    status(ei) <- updStatus(Invoice.operation(invoice));
    
    businessNameDocument(ei) <- 'Документ об отгрузке товаров (выполнении работ), передаче имущественных прав (документ об оказании услуг)' 
                                    IF status(ei)=UpdDocumentStatus.DOP OR status(ei)=UpdDocumentStatus.SHCFDOP;
                                    
    supplierNameDocument(ei) <- 'Счет-фактура и документ об отгрузке товаров (выполнении работ), передаче имущественных прав (документ об оказании услуг)'
                                    WHERE status(ei)=UpdDocumentStatus.SHCFDOP;
                                    
    supplierNameDocument(ei) <- 'Документ об отгрузке товаров (выполнении работ), передаче имущественных прав (документ об оказании услуг)'
                                    WHERE status(ei)=UpdDocumentStatus.DOP;                                         
    
    dateSupplier(ei) <- date(invoice);
    timeSupplier(ei) <- time(invoice);
    nameOriginatorSupplier(ei) <- fullNameSupplier(invoice);
    
    showMessage(ei) <- TRUE;
    
    //invoiceNumerator(ei) <- defaultNumeratorConsignmentUpd(); //возможно нужно будет сделать параметризацию нумератора для организации
    dateInvoice(ei) <- date(invoice);
    codeCurrency(ei) <- sid(currency(invoice));
    
    supplier(ei) <- supplier(invoice);
    numberAccountSupplier(ei) <-  STRING[20](numberAccount(supplier(invoice)));            
    nameBankSupplier(ei) <- nameBank(account(supplier(invoice)));
    MFOBankSupplier(ei) <- STRING[9](MFOBank(account(supplier(invoice))));
    corrAccountBankSupplier(ei) <- corrAccount(bank(account(supplier(invoice))));
    
    nameSupplier(ei) <- fullNameSupplier(invoice);
    innSupplier(ei) <- inn(supplier(invoice));
    kppSupplier(ei) <- kpp(supplier(invoice));
    regionCodeSupplier(ei) <- STRING[2](id(region(supplierStock(invoice))));
    
    countryCodeAddressSupplier(ei) <- sid(country(supplier(invoice)));
    adrressSupplier(ei) <- address(supplier(invoice), date(invoice));
    
    isConsignerSupplier(ei) <- TRUE IF invoice IS Consignment;
    
    nameReceiverCompany(ei) <- nameCustomerStock(invoice);
    innReceiverCompany(ei) <- inn(customer(invoice));
    countryCodeAddressReceiverCompany(ei) <- sid(country(customer(invoice)));
    adrressReceiverCompany(ei) <- address(customerStock(invoice));
    
    customer(ei) <- customer(invoice);
    nameCustomer(ei) <- fullName(customer(invoice));
    innCustomer(ei) <- inn(customer(invoice));
    kppCustomer(ei) <- kpp(customer(invoice));
    regionCodeCustomer(ei) <- STRING[2](id(region(customerStock(invoice))));
    
    countryCodeAddressCustomer(ei) <- sid(country(customer(invoice)));
    adrressCustomer(ei) <- address(customer(invoice), date(invoice));
    
    description(ei) <- 'Товары переданы, результаты работ сдал, услуги оказаны в полном объеме' IF invoice IS Consignment;
    descriptionContract(ei) <- 'Договор: (руб.)' IF invoice IS Consignment;
    numberContract(ei) <- number(contract(invoice));
    dateContract(ei) <- dateFrom(contract(invoice));
    
    supplierSignerCredentials(ei) <- Credential.c0 IF invoice IS Consignment; 
    supplierSignerStatus(ei) <- CStatus.c1 IF invoice IS Consignment; 
    supplierSignerCredentialsBase(ei) <- 'Должностные обязанности' IF invoice IS Consignment; //todo: переделать на проверку
    
    supplierSignerInn(ei) <- inn(supplier(invoice));
    supplierSignerPosition(ei) <- name(position(managerSupplier(invoice)));
    
    supplierSignerAgentLastName(ei) <- lastName(managerSupplier(invoice));
    supplierSignerAgentFirstName(ei) <- firstName(managerSupplier(invoice));
    supplierSignerAgentMiddleName(ei) <- middleName(managerSupplier(invoice));
    
    sum(ei) <- [GROUP SUM sum(ConsignmentDetail d) BY consignment(d)](invoice);
    invoiceSum(ei) <- [GROUP SUM sumConsignment(ConsignmentDetail d) BY consignment(d)](invoice);
    VATSum(ei) <- [GROUP SUM sumVAT(ConsignmentDetail d) BY consignment(d)](invoice); 
    
    overFill(ei, invoice);
    
    createDetails(invoice, ei);
}
     
createUpd 'Создать УПД' (Consignment invoice)  {
    IF NOT updDocument(invoice) THEN NEWSESSION {
        NEW ei = UpdDocument {
            fill(invoice, ei);
        }
        APPLY;
        IF NOT canceled() THEN {
            MESSAGE 'УПД создан';    
        }
    }
}

recreateUpdDocument (Consignment invoice) {
    DELETE UpdDocumentDetail d WHERE updDocument(d)=updDocument(invoice);
    fill(invoice, updDocument(invoice));
}

recreateUpd 'Перезаполнить УПД' (Consignment invoice) {
    IF updDocument(invoice) THEN {
        IF isTransferred(updDocument(invoice)) THEN {
            MESSAGE 'Документ УПД не может быть пересоздан, т.к. уже отправлен' NOWAIT;
        } ELSE {
            recreateUpdDocument(invoice);
            APPLY;
            IF NOT canceled() THEN {
                MESSAGE 'УПД перезаполнен';    
            }                
        }
    } ELSE {
        createUpd(invoice);
    }
}

captionCreateUpd (Consignment invoice) = 
    IF countIncl() 
        THEN 'Создать УПД (отм.)'
        ELSE IF updDocument(invoice) 
            THEN 'Перезаполнить УПД' ELSE 'Создать УПД';

show 'Просмотреть' (UpdDocument d)  { 
    NEWSESSION {
        SHOW updDocument OBJECTS u = d DOCKED READONLY;
    }
}

overNumberAttrUpd (Consignment c) += numberInvoice(updDocument(c));
overDateAttrUpd (Consignment c) += dateInvoice(updDocument(c));

overNumberCorrectionUpd  (Consignment c) += numberCorrection(updDocument(c)) IF NOT numberCorrection(updDocument(c))=0.0;
overDateCorrectionUpd (Consignment c) += correctionDate(updDocument(c));

selectUpdDocument(Consignment c) = select(updDocument(c));

printConsignmentUpd 'Печать УПД'(UpdDocument u) {
    doubleSided()<- NULL;
    IF NOT countSelectUpd() THEN {
        select(UpdDocument updDocument) <- TRUE IF updDocument==u;
    }       
    
    incl(Consignment c) <- selectUpdDocument(c); 
    
    PRINT consignmentUpd;
    incl(invoice(u)) <- NULL; 
    select(UpdDocument updDocument) <- NULL; 
}
printConsignmentUpdBreake 'Печать УПД (двухсторонний)'(UpdDocument u) {
    doubleSided()<- TRUE ;
    IF NOT countSelectUpd() THEN {
        select(UpdDocument updDocument) <- TRUE IF updDocument==u;
    }       
    
    incl(Consignment c) <- selectUpdDocument(c); 
    
    PRINT consignmentUpd;
    incl(invoice(u)) <- NULL; 
    select(UpdDocument updDocument) <- NULL; 
    doubleSided()<- NULL;
}
printConsignmentUpdBreakeAuto 'Печать УПД (двухсторонний) АВТО'(UpdDocument u) {
    doubleSided()<- TRUE ;
    IF NOT countSelectUpd() THEN {
        select(UpdDocument updDocument) <- TRUE IF updDocument==u;
    }       
    
    incl(Consignment c) <- selectUpdDocument(c); 
    
    PRINT consignmentUpd NOPREVIEW;
    incl(invoice(u)) <- NULL; 
    select(UpdDocument updDocument) <- NULL; 
    doubleSided()<- NULL;
}

editAttributesUpd 'Заполнить атрибуты УПД'(UpdDocument u) {
    editAttributesUpd(invoice(u));
} IMAGE 'edit.png';

EXTEND FORM updDocuments
    PROPERTIES (u) editAttributesUpd, printConsignmentUpd, printConsignmentUpdBreake, printConsignmentUpdBreakeAuto
;

DESIGN updDocuments {
    documentDetail {
        NEW printContainer {
            caption = 'Печать';
            type = CONTAINERV;
            NEW consignmentUPD{
                align = START;
                type = CONTAINERH;
                
                NEW contUPD {
                    alignment = STRETCH;
                    type = CONTAINERH;
                    caption = 'УПД';
                    MOVE PROPERTY(editAttributesUpd(u)) {
                        alignment = STRETCH;
                    }
                }
                
                NEW upd {
                    alignment = STRETCH;
                    type = COLUMNS;
                    columns = 3;
                    caption = 'Отчеты';
                    MOVE PROPERTY(printConsignmentUpd(u)) { alignment = STRETCH; }
                    MOVE PROPERTY(printConsignmentUpdBreake(u)) { alignment = STRETCH; }
                    MOVE PROPERTY(printConsignmentUpdBreakeAuto(u)) { alignment = STRETCH; }
                }
            }        
        }        
    }
    PROPERTY(nameCustomer(u)) {
        charWidth = 40;
    }
}

DESIGN options{
    updScroll {
        MOVE PROPERTY (numberCopiesConsignment());
    }
}

//создание иУПД
createCorrection 'Создать иУПД' (UpdDocument upd) {
    NEWSESSION {
        NEW iupd = UpdDocument {
            invoice(iupd) <- invoice(upd);
            numberInvoice(iupd) <- numberInvoice(upd);
            correction(iupd) <- TRUE;
            correctedUpdDocument(iupd) <- upd;
            correctionDateTime(iupd) <- currentDateTime();
            fill(invoice(upd), iupd);
            SHOW updDocument OBJECTS u = iupd DOCKED NOCANCEL; 
        }
    }
}

EXTEND FORM updDocuments
    PROPERTIES (u) createCorrection
;

DESIGN updDocuments {
    documentDetail{
        NEW correctionContainer AFTER actionContainer {
            caption = 'иУПД';
            type = CONTAINERH;
            NEW correctionActions {
                caption = 'Действия';
                MOVE PROPERTY(createCorrection(u));
            }
        }
    }
}