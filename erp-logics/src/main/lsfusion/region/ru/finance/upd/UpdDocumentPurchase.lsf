MODULE UpdDocumentPurchase;

REQUIRE PurchaseInvoice, ConsignmentUpdDocument, ConsignmentUpdDocumentLot, UpdDocument, PurchaseShipmentLot, DiadocUpdDocument;

NAMESPACE Purchase;

operation 'Операция прихода' () = DATA Operation();
nameOperation'Операция прихода' () = name(operation());
stockCustomer 'Склад покупателя' () = DATA Stock();
nameStockCustomer 'Склад покупателя' () = name(stockCustomer());


FORM dialogPurchase 'Параметры Документа закупки'
    PROPERTIES() nameOperation, nameStockCustomer
;

updDocument 'УПД' = DATA UpdDocument(UserInvoice);
updDocumentDetail = DATA UpdDocumentDetail(UserInvoiceDetail);

numberInvoiceUpdDocument 'Номер СЧФ (УПД)' (UserInvoice i) = numberInvoice(updDocument(i)); 
EXTEND FORM invoices
    PROPERTIES (i) READONLY numberInvoiceUpdDocument
;

invoice = 
    GROUP LAST UserInvoice ui
        IF ui IS UserInvoice
        ORDER updDocument(ui), ui 
        BY updDocument(ui);

invoiceDetail =
    GROUP LAST UserInvoiceDetail ui
        IF ui IS UserInvoiceDetail
    ORDER updDocumentDetail(ui), ui
    BY updDocumentDetail(ui);

skipCreateUserInvoiceDetail = ABSTRACT BOOLEAN (UpdDocumentDetail);
overCreateInvoice ABSTRACT (UserInvoice, UpdDocument);
overCreateInvoice ABSTRACT (UserInvoiceDetail, UpdDocumentDetail);

createInvoice 'Создать приходную накладную'(UpdDocument d){
    operation () <- NULL;
    stockCustomer () <- NULL;
    
    
    IF NOT invoice(d) THEN NEWSESSION {
        DIALOG dialogPurchase DO{
            NEW invoice = UserInvoice {
                updDocument(invoice) <- d;
                date(invoice) <- currentDate();
                supplier(invoice) <- OVERRIDE legalEntityEdi(idConsignor(d)), legalEntityInn(innSupplier(d));
                customer(invoice) <- OVERRIDE legalEntityEdi(idConsignee(d)), legalEntityInn(innCustomer(d));
                operation(invoice) <- operation();
                supplierStock(invoice) <- [GROUP LAST Stock s ORDER s BY legalEntity(s)] (supplier(invoice));
                customerStock(invoice) <- stockCustomer();
                overCreateInvoice(invoice, d);
                FOR updDocument(UpdDocumentDetail ed) == d AND NOT skipCreateUserInvoiceDetail(ed) NEW id = UserInvoiceDetail  DO {
                    updDocumentDetail(id) <- ed;
                    userInvoice(id) <- invoice;
                    sku(id) <- skuBarcode(idSku(ed));
                    valueVAT(id) <- NUMERIC[10,5](replace(nameVATStatus(ed), '%',''));
                    quantity(id) <- quantity(ed);
                    price(id) <- price(ed);
                    invoiceSum(id) <- invoiceSum(ed);
                    VATSum(id) <- VATSum(ed);
                    invoicePrice(id) <- round4(invoiceSum(ed)/quantity(ed));
                    FOR updDocumentDetail(UpdLotDetail ud) == ed AND NOT lot(id(ud))  NEW l = Lot DO {
                        id(l) <- id(ud);
                        sku(l) <- skuBarcode(idSku(ed));
                    }
                    FOR updDocumentDetail(UpdLotDetail ud) == ed AND l = lot(id(ud))  DO {
                        quantity(id, l) <- 1;
                    }
                overCreateInvoice(id, ed);                    
                }
//            APPLY;
            SHOW userInvoice OBJECTS i = invoice;
            }
        }
    }
}

skipShowCreateInvoice = ABSTRACT BOOLEAN (UpdDocument);

showCreateInvoice (UpdDocument d) = NOT invoice(d) AND NOT skipShowCreateInvoice(d);

EXTEND FORM updDocuments
    PROPERTIES(u) createInvoice SHOWIF showCreateInvoice(u)
;

DESIGN updDocuments{
    actionContainer{
        MOVE PROPERTY (createInvoice(u));
    }
}

FORM dialogUpd 'УПД'
    OBJECTS i = UserInvoice
    OBJECTS u = UpdDocument
    PROPERTIES(u) READONLY number, numberInvoice, dateInvoice, nameSupplier SHOWIF nameSupplier(u), innSupplier SHOWIF innSupplier(u), innSupplierIE SHOWIF innSupplierIE(u), nameOriginatorSupplier SHOWIF nameOriginatorSupplier(u), kppSupplier, nameCustomer
    PROPERTIES(u) READONLY sum, invoiceSum
    FILTERS supplier(i) = (OVERRIDE legalEntityEdi(idConsignor(u)), legalEntityInn(innSupplier(u)), legalEntityInn(innSupplierIE(u))) AND (customer(i) = OVERRIDE legalEntityEdi(idConsignee(u)), legalEntityInn(innCustomer(u))) 
;

importUpd 'Импорт из УПД' (UserInvoice i) {
    DIALOG dialogUpd OBJECTS i = i, u INPUT DO {
        updDocument(i) <- u;
        overCreateInvoice(i, u);
        FOR updDocument(UpdDocumentDetail ed) == u AND NOT skipCreateUserInvoiceDetail(ed) NEW id = UserInvoiceDetail DO {
            updDocumentDetail(id) <- ed;
            userInvoice(id) <- i;
            sku(id) <- skuBarcode(idSku(ed));
            valueVAT(id) <- NUMERIC[10,5](replace(nameVATStatus(ed), '%', ''));
            quantity(id) <- quantity(ed);
            price(id) <- price(ed);
            invoiceSum(id) <- invoiceSum(ed);
            VATSum(id) <- VATSum(ed);
            invoicePrice(id) <- round4(invoiceSum(ed)/quantity(ed));
            FOR updDocumentDetail(UpdLotDetail ud) == ed AND NOT lot(id(ud)) NEW l = Lot DO {
                id(l) <- id(ud);
                sku(l) <- skuBarcode(idSku(ed));
            }
            FOR updDocumentDetail(UpdLotDetail ud) == ed AND l = lot(id(ud)) DO {
                quantity(id, l) <- 1;
            }
            overCreateInvoice(id, ed);
        }
    }
}

EXTEND FORM userInvoice
    PROPERTIES importUpd(i) SHOWIF NOT updDocument(i)
;

DESIGN userInvoice{
    import {
        NEW importUPD {
            caption = 'УПД';
            MOVE PROPERTY(importUpd(i));
        }
    }
}

titleDocument 'Документ Диадока' (Invoice i) = title(document(updDocument[UserInvoice](i))) CHARWIDTH 20;
primaryStatusTextDocument 'Статус' (Invoice i) = (GROUP CONCAT primaryStatusText(Box b, document(updDocument[UserInvoice](i))), ', ' ORDER b) CHARWIDTH 20;

EXTEND FORM invoices
    PROPERTIES(i) PANEL SHOWIF document(updDocument[UserInvoice](i)) READONLY titleDocument, primaryStatusTextDocument
;

DESIGN invoices {
    actionContainer {
        NEW diadoc {
            caption = 'Диадок API';
            MOVE PROPERTY (titleDocument(i));
            MOVE PROPERTY (primaryStatusTextDocument(i));
        }
    }
}

