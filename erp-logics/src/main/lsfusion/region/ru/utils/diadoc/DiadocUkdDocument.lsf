MODULE DiadocUkdDocument;

REQUIRE UkdDocumentLot, DiadocMessage, CryptoPro, DiadocDocument, UkdDocumentConsolidated;

NAMESPACE Diadoc;

GROUP invoicesUCD EXTID 'Invoices';
GROUP invoiceUCD EXTID 'Invoice': invoicesUCD;
GROUP sellerUCD EXTID 'Seller';
GROUP organizationReferenceSellerUCD EXTID 'OrganizationReference': sellerUCD;
GROUP buyerUCD EXTID 'Buyer';
GROUP organizationReferenceBuyerUCD EXTID 'OrganizationReference': buyerUCD;
GROUP signersUCD EXTID 'Signers';
GROUP signerDetailsUCD EXTID 'SignerDetails': signersUCD;
GROUP additionalInfoIdUCD EXTID 'AdditionalInfoId';
GROUP additionalInfoUCD EXTID 'AdditionalInfo': additionalInfoIdUCD;
GROUP eventContentUCD EXTID 'EventContent';
GROUP transferDocDetailsUCD EXTID 'TransferDocDetails': eventContentUCD;
GROUP correctionBaseUCD EXTID 'CorrectionBase': eventContentUCD;
GROUP tableUCD EXTID 'Table';
GROUP itemsUCD EXTID 'Items': tableUCD;
GROUP totalsIncUCD EXTID 'TotalsInc': tableUCD;
GROUP totalsDecUCD EXTID 'TotalsDec': tableUCD;
GROUP taxRateUCD EXTID 'TaxRate';
GROUP unitNameUCD EXTID 'UnitName';
GROUP unitUCD EXTID 'Unit';
GROUP quantityUCD EXTID 'Quantity';
GROUP priceUCD EXTID 'Price';
GROUP exciseUCD EXTID 'Excise';
GROUP subtotalWithVatExcludedUCD EXTID 'SubtotalWithVatExcluded';
GROUP vatUCD EXTID 'Vat';
GROUP withoutVatUCD EXTID 'WithoutVat';
GROUP subtotalUCD EXTID 'Subtotal';
GROUP originalItemIdentificationNumbersUCD EXTID 'OriginalItemIdentificationNumbers';


exportUkdDocument = DATA LOCAL UkdDocument ();

FORM universalCorrectionDocument FORMEXTID 'UniversalCorrectionDocument'
    PROPERTIES ATTR function = (OVERRIDE nameStatus(exportUkdDocument()),'') EXTID 'Function',//Функция - Функция документа
                    documentDate = toDateDDMMYYYY(OVERRIDE dateInvoice(exportUkdDocument()), currentDate()) EXTID 'DocumentDate',//ДатаКСчФ - дата УКД
                    documentNumber = (OVERRIDE numberInvoice(exportUkdDocument()),'') EXTID 'DocumentNumber',//НомерКСчФ - номер УКД
                    currency = (OVERRIDE codeCurrency(exportUkdDocument()),'') EXTID 'Currency',//КодОКВ - валюта (код)
                    currencyName = '1' EXTID 'CurrencyName',//НАимОКВ - наименование валюты
                    documentCreator = (OVERRIDE nameOriginatorSupplier(exportUkdDocument()),'') EXTID 'DocumentCreator'//НаимЭконСубСост - Составитель файла обмена счета-фактуры (информации продавца)

    PROPERTIES ATTR IN invoiceUCD
                    dateI = toDateDDMMYYYY(baseDateInvoice(exportUkdDocument())) EXTID 'Date',//ДатаСчФ
                    numberI = baseInvoiceNumber(exportUkdDocument()) EXTID 'Number'//НомерСчФ

    OBJECTS b =  BaseUkd EXTID 'Invoice' IN invoicesUCD
        FILTERS ukdDocument(b) == exportUkdDocument()
        PROPERTIES ATTR
                    dateIERF = toDateDDMMYYYY(date(b)) EXTID 'Date',//ДатаСчФ
                    numberIERF = number(b) EXTID 'Number'//НомерСчФ
    
    PROPERTIES ATTR IN organizationReferenceSellerUCD
                    orgTypeS = id(organizationType(organization(fromBox()))) EXTID 'OrgType',//СвИП - СвЮЛУч - СвИнНеУч
                    boxIdS = fromBoxId() EXTID 'BoxId'

    PROPERTIES ATTR IN organizationReferenceBuyerUCD
                    orgTypeB = id(organizationType(organization(toBox()))) EXTID 'OrgType',//СвИП - СвЮЛУч - СвИнНеУч
                    boxIdB = toBoxId() EXTID 'BoxId'

    PROPERTIES ATTR IN signerDetailsUCD
                    innSG = supplierSignerInn(exportUkdDocument()) EXTID 'Inn',//ИННЮЛ
                    lastNameSG = (OVERRIDE supplierSignerLastName(exportUkdDocument()), supplierSignerAgentLastName(exportUkdDocument())) EXTID 'LastName',//Фамилия
                    firstNameSG = (OVERRIDE supplierSignerFirstName(exportUkdDocument()), supplierSignerAgentFirstName(exportUkdDocument())) EXTID 'FirstName',//Имя
                    middleNameSG = (OVERRIDE supplierSignerMiddleName(exportUkdDocument()), supplierSignerAgentMiddleName(exportUkdDocument())) EXTID 'MiddleName',//Отчество
                    positionSG = supplierSignerPosition(exportUkdDocument()) EXTID 'Position',//Должн
                    signerPowersSG = nameSupplierSignerCredentials(exportUkdDocument()) EXTID 'SignerPowers',//ОблПолн - Область полномочий
                    signerTypeSG = (IF isSupplierSigner(exportUkdDocument()) THEN '3' ELSE '1') EXTID 'SignerType',
                    signerStatusSG = nameSupplierSignerStatus(exportUkdDocument()) EXTID 'SignerStatus',//Статус
                    signerPowersBaseSG = supplierSignerCredentialsBase(exportUkdDocument()) EXTID 'SignerPowersBase'//ОснПолн - Основание полномочий (доверия)

    PROPERTIES ATTR IN additionalInfoUCD
                    idAI = codeBusinessEvent(exportUkdDocument()) EXTID 'Id',//Идентиф - идентификатор (наименование)
                    valueAI = descriptionBusinessEvent(exportUkdDocument()) EXTID 'Value'//Значен - значение

    PROPERTIES ATTR IN eventContentUCD
                    operationContentEC = (OVERRIDE description(exportUkdDocument()),'') EXTID 'OperationContent',//СодОпер - Содержание операции
                    notificationDateEC = toDateDDMMYYYY(sendDate(exportUkdDocument())) EXTID 'NotificationDate'//ДатаНапр - Дата направления на согласование

    PROPERTIES ATTR IN transferDocDetailsUCD
                    baseDocumentNameTDD = nameBaseDocument(exportUkdDocument()) EXTID 'BaseDocumentName',//НаимОсн - Наименование документа - основания
                    baseDocumentNumberTDD = numberBaseDocument(exportUkdDocument()) EXTID 'BaseDocumentNumber',//НомОсн - Номер документа - основания
                    baseDocumentDateTDD = toDateDDMMYYYY(dateBaseDocument(exportUkdDocument())) EXTID 'BaseDocumentDate'//ДатаОсн - Дата документа - основания, обязателен при НаимОсн отличном от значения "Отсутствует"

    OBJECTS bb =  BaseUkd EXTID 'TransferDocDetails' IN eventContentUCD
        FILTERS ukdDocument(bb) == exportUkdDocument()
        PROPERTIES ATTR
                    baseDocumentNameTDDERF = description(bb) EXTID 'BaseDocumentName',//НаимОсн - Наименование документа - основания
                    baseDocumentNumberTDDERF = toDateDDMMYYYY(date(bb)) EXTID 'BaseDocumentDate',//ДатаСчФ
                    baseDocumentDateTDDERF = number(bb) EXTID 'BaseDocumentNumber'//НомерСчФ

    PROPERTIES ATTR IN correctionBaseUCD
                    baseDocumentNameCB = nameCorrectionDocument(exportUkdDocument()) EXTID 'BaseDocumentName',//НаимОсн - Наименование документа - основания
                    baseDocumentNumberCB = numberCorrectionDocument(exportUkdDocument()) EXTID 'BaseDocumentNumber',//НомОсн - Номер документа - основания
                    baseDocumentDateCB = toDateDDMMYYYY(dateCorrectionDocument(exportUkdDocument())) EXTID 'BaseDocumentDate'

    PROPERTIES ATTR IN totalsIncUCD
                    totalWithVatExcludedTI = (OVERRIDE increaseSum(exportUkdDocument()), 0) EXTID 'TotalWithVatExcluded',//СтТовБезНДСВсего - Сумма без учета налога
                    vatTI = (OVERRIDE increaseVATSum(exportUkdDocument()), 0) EXTID 'Vat',//СумНалВсего - Сумма налога всего
                    withoutVatTI = withoutVAT(exportUkdDocument()) EXTID 'WithoutVat',//БезНДС - Указывается, если для суммы налога всего не требуется НДС
                    totalTI = (OVERRIDE increaseInvoiceSum(exportUkdDocument()), 0) EXTID 'Total'//СтТовУчНалВсего - Сумма всего

    PROPERTIES ATTR IN totalsDecUCD
                    totalWithVatExcludedTD = (OVERRIDE decreaseSum(exportUkdDocument()), 0) EXTID 'TotalWithVatExcluded',//СтТовБезНДСВсего - Сумма без учета налога
                    vatTD = (OVERRIDE decreaseVATSum(exportUkdDocument()), 0) EXTID 'Vat',//СумНалВсего - Сумма налога всего
                    withoutVatTD = withoutVAT(exportUkdDocument()) EXTID 'WithoutVat',//БезНДС - Указывается, если для суммы налога всего не требуется НДС
                    totalTD = (OVERRIDE decreaseInvoiceSum(exportUkdDocument()), 0) EXTID 'Total'//СтТовУчНалВсего - Сумма всего

    OBJECTS i = UkdDocumentDetail EXTID 'Item' IN itemsUCD
    FILTERS ukdDocument(i) == exportUkdDocument()
    PROPERTIES ATTR productI = nameSku(i) EXTID 'Product',//НаимТов - наименование товара
                    itemVendorCodeI = idSku(i) EXTID 'ItemVendorCode'//КодТов - Характеристика/код/артикул/сорт товара
    PROPERTIES ATTR IN taxRateUCD
                    originalValueTR = nameVATStatusB(i) EXTID 'OriginalValue',//НалСтДо
                    correctedValueTR = nameVATStatusA(i) EXTID 'CorrectedValue'//НалСтПосле
    PROPERTIES ATTR IN unitNameUCD
                    originalValueUN = nameUOMB(i) EXTID 'OriginalValue',//НаимЕдИзмДо
                    correctedValueUN = nameUOMA(i) EXTID 'CorrectedValue'//НаимЕдИзмПосле
    PROPERTIES ATTR IN unitUCD
                    originalValueU = idUOMB(i) EXTID 'OriginalValue',//ОКЕИ_ТовДо
                    correctedValueU = idUOMA(i) EXTID 'CorrectedValue'//ОКЕИ_ТовПосле
    PROPERTIES ATTR IN quantityUCD
                    originalValueQ = quantityB(i) EXTID 'OriginalValue',//КолТовДо
                    correctedValueQ = quantityA(i) EXTID 'CorrectedValue'//КолТовПосле
    PROPERTIES ATTR IN priceUCD
                    originalValueP = priceB(i) EXTID 'OriginalValue',//ЦенаТовДо
                    correctedValueP = priceA(i) EXTID 'CorrectedValue'//ЦенаТовПосле
    PROPERTIES ATTR IN exciseUCD
                    originalValueE = dutySumB(i) EXTID 'OriginalValue',//АкцизДо
                    correctedValueE = dutySumA(i) EXTID 'CorrectedValue'//АкцизПосле
    PROPERTIES ATTR IN subtotalWithVatExcludedUCD
                    originalValueSWVE = (OVERRIDE invoiceSumB(i), 0) EXTID 'OriginalValue',//СтоимДоИзм
                    correctedValueSWVE = (OVERRIDE invoiceSumA(i), 0) EXTID 'CorrectedValue'//СтоимПослеИзм
    PROPERTIES IN subtotalWithVatExcludedUCD
                  amountsIncSWVE = increaseInvoiceSum(i) EXTID 'AmountsInc',//СтоимУвел
                  amountsDecSWVE = decreaseInvoiceSum(i) EXTID 'AmountsDec'//СтоимУм
    PROPERTIES ATTR IN vatUCD
                    originalValueV = VATSumB(i) EXTID 'OriginalValue',//СумНалДо
                    correctedValueV = VATSumA(i) EXTID 'CorrectedValue'//СумНалПосле
    PROPERTIES IN vatUCD
               amountsIncV = showIncreaseVATSum(i) EXTID 'AmountsInc',//СтоимУвел
               amountsDecV = decreaseVATSum(i) EXTID 'AmountsDec'//СтоимУм
    PROPERTIES ATTR IN withoutVatUCD
                    originalValueWV = withoutVAT(ukdDocument(i)) EXTID 'OriginalValue',//БезНДСДо
                    correctedValueWV = withoutVAT(ukdDocument(i)) EXTID 'CorrectedValue'//БезНДСПосле
    PROPERTIES ATTR IN subtotalUCD
                    originalValueS = (OVERRIDE sumB(i), 0) EXTID 'OriginalValue',//СтоимДоИзм
                    correctedValueS = (OVERRIDE sumA(i), 0) EXTID 'CorrectedValue'//СтоимПослеИзм
    PROPERTIES IN subtotalUCD
               amountsIncS = increaseSum(i) EXTID 'AmountsInc',//СтоимУвел
               amountsDecS = decreaseSum(i) EXTID 'AmountsDec'//СтоимУм
    OBJECTS utd = UkdTransportPackDetail EXTID 'ItemIdentificationNumber' IN originalItemIdentificationNumbersUCD
    PROPERTIES ATTR transPackageIdIIN = (OVERRIDE id(utd),'') EXTID 'TransPackageId'//ИдентТрансУпак - Уникальный идентификатор транспортной упаковки
    FILTERS ukdDocumentDetail(utd) == i
    
    OBJECTS upd = UkdPackDetail EXTID 'ItemIdentificationNumber' IN originalItemIdentificationNumbersUCD
    PROPERTIES unitIIN = (OVERRIDE id(upd),'') EXTID 'Unit'//КИЗ - Контрольный идентификационный знак
    FILTERS ukdDocumentDetail(upd) == i
        
    OBJECTS uld = UkdLotDetail EXTID 'ItemIdentificationNumber' IN originalItemIdentificationNumbersUCD
    PROPERTIES packageIdIIN = (OVERRIDE id(uld),'') EXTID 'PackageId'//НомУпак - Уникальный идентификатор вторичной (потребительской)/третичной (заводской, транспортной) упаковки
    FILTERS ukdDocumentDetail(uld) == i
               
;

document = DATA Document (UkdDocument);
ukdDocument = GROUP LAST UkdDocument d ORDER d BY document(d) MATERIALIZED INDEXED;
titleDocument 'Документ Диадока' (UkdDocument d) = title(document(d)) CHARWIDTH 20;
primaryStatusTextDocument 'Статус' (UkdDocument d) = (GROUP CONCAT primaryStatusText(Box b, document(d)), ', ' ORDER b) CHARWIDTH 20;

overMessageUniversalCorrectionDocument ABSTRACT (UkdDocument);
    
messageUniversalCorrectionDocument 'Подписать и отправить через Диадок' (UkdDocument d) {
    FOR User u == userDiadoc(currentUser()) DO NEWSESSION {
        fromBox() <- GROUP LAST Box b IF legalEntity(organization(b)) == supplier(invoice(updDocument(d))) ORDER b;
        toBox() <- GROUP LAST Box b IF legalEntity(organization(b)) == customer(invoice(updDocument(d))) ORDER b;
        overMessageUniversalCorrectionDocument(d);
        DIALOG dialogMessageToPost NOMANAGESESSION DO {
            getToken(u);
            exportUkdDocument() <- d;
            EXPORT universalCorrectionDocument XML;
            
            LOCAL result = FILE ();
            TRY {
                EXTERNAL HTTP POST url() + '/GenerateTitleXml?boxId=' + fromBoxId() + '&documentTypeNamedId=UniversalCorrectionDocument&documentFunction=' + nameStatus(d) + '&documentVersion=ucd736_05_01_02&titleIndex=0' HEADERS httpHeadersToken PARAMS exportFile() TO result;
                typeNamedIdDocument(0) <- 'UniversalCorrectionDocument';
                functionDocument(0) <- nameStatus(d);
                versionDocument(0) <- 'ucd736_05_01_02';
                contentDocument(0) <- encode(RAWFILE(result()), 'base64');
                
                IF useTestSignature() THEN {
                    signWithTestSignature(0) <- TRUE;
                } ELSE {
                    sign(FILE(result()), TRUE, legalEntity(organization(fromBox())));
                    signatureDocument(0) <- encodedSignature();
                }
                
                postMessage(u);
                document(d) <- createdDocument();
                dateTimeTransfer(d) <- currentDateTime();
            } CATCH {
                fileToString(result(), 'UTF-8');
                MESSAGE 'Ошибка отправки УКД ' + (OVERRIDE statusHttp() + ' ' + resultString(), messageCaughtException());
            }
            APPLY;
        }
    }
}

FORM universalCorrectionDocumentBuyerTitle FORMEXTID 'UniversalCorrectionDocumentBuyerTitle'
    PROPERTIES ATTR documentCreator = documentCreator() EXTID 'DocumentCreator',//НаимЭконСубСост - Составитель файла обмена счета-фактуры (информации продавца)
                    operationContent = operationContent() EXTID 'OperationContent'//СодОпер - Содержание операции
    
    PROPERTIES ATTR IN signerDetailsUCD
                    innSG = inn() EXTID 'Inn',//ИННЮЛ
                    lastNameSG = surname() EXTID 'LastName',//Фамилия
                    firstNameSG = firstName() EXTID 'FirstName',//Имя
                    middleNameSG = patronymic() EXTID 'MiddleName',//Отчество
                    positionSG = jobTitle() EXTID 'Position',//Должн
                    signerPowersSG = idSingerPowers() EXTID 'SignerPowers',//ОблПолн - Область полномочий
                    signerTypeSG = idSignerType() EXTID 'SignerType',
                    signerStatusSG = idSignerStatus() EXTID 'SignerStatus',//Статус
                    signerPowersBaseSG = signerPowersBase() EXTID 'SignerPowersBase'//ОснПолн - Основание полномочий (доверия)
;

FORM dialogUcdBuyerTitle 'Титул покупателя'
    PROPERTIES() documentCreator, operationContent, nameSingerPowers, nameSignerStatus, nameSignerType, signerPowersBase
    PROPERTIES() surname, firstName, patronymic, jobTitle, inn
    
    EVENTS ON OK BEFORE {
        IF NOT documentCreator() THEN {
            MESSAGE 'Не задано наименование экономического субъекта' NOWAIT;
            beforeCanceled() <- TRUE;
        }
        IF NOT operationContent() THEN {
            MESSAGE 'Не задано содержание операции' NOWAIT;
            beforeCanceled() <- TRUE;
        }
        IF NOT signerPowers() THEN {
            MESSAGE 'Не задана область полномочий подписанта' NOWAIT;
            beforeCanceled() <- TRUE;
        }
        IF NOT signerStatus() THEN {
            MESSAGE 'Не задан статус подписанта' NOWAIT;
            beforeCanceled() <- TRUE;
        }
        IF NOT signerType() THEN {
            MESSAGE 'Не задан тип подписанта' NOWAIT;
            beforeCanceled() <- TRUE;
        }
        IF NOT surname() THEN {
            MESSAGE 'Не задана фамилия подписанта' NOWAIT;
            beforeCanceled() <- TRUE;
        }
        IF NOT firstName() THEN {
            MESSAGE 'Не задано имя подписанта' NOWAIT;
            beforeCanceled() <- TRUE;
        }
        IF NOT jobTitle() THEN {
            MESSAGE 'Не задана должность подписанта' NOWAIT;
            beforeCanceled() <- TRUE;
        }
        IF NOT inn() THEN {
            MESSAGE 'Не задан ИНН юридического лица подписанта или индивидуального предпринимателя' NOWAIT;
            beforeCanceled() <- TRUE;
        }
    }
;

DESIGN dialogUcdBuyerTitle {
    GROUP() {
        lines = 1;
        horizontal = FALSE;
        MOVE PROPERTY(documentCreator());
        MOVE PROPERTY(operationContent());
        MOVE PROPERTY(nameSingerPowers());
        MOVE PROPERTY(nameSignerStatus());
        MOVE PROPERTY(nameSignerType());
        MOVE PROPERTY(signerPowersBase());
        MOVE PROPERTY(surname());
        MOVE PROPERTY(firstName());
        MOVE PROPERTY(patronymic());
        MOVE PROPERTY(jobTitle());
        MOVE PROPERTY(inn());
    }
}

overMessageSignatureUcd ABSTRACT (Box, Document);
overMessageSignature (User u, Box b, Document d) + {
    IF typeNamedId(d) == 'UniversalCorrectionDocument' THEN NEWSESSION {
        box() <- b;
        message() <- message(d);
        parentEntity(0) <- entity(d);
        isRecipientTitles(0) <- TRUE;
        surname() <- STRING[60](lastName(currentUser()));
        firstName() <- STRING[60](firstName(currentUser()));
        //patronymic() <- STRING[60](middleName(currentUser())); подключить модуль EmployeeRu
        jobTitle() <- STRING[128](namePosition(currentUser()));
        inn() <- STRING[10](inn(organization(b)));
        overMessageSignatureUcd(b, d);
        DIALOG dialogUcdBuyerTitle NOMANAGESESSION DO {
            getToken(u);
            EXPORT universalCorrectionDocumentBuyerTitle XML;

            LOCAL result = FILE ();
            TRY {
                EXTERNAL HTTP POST url() + '/GenerateTitleXml?boxId=' + boxId() + '&documentTypeNamedId=UniversalCorrectionDocument&documentFunction=' + function(d) + '&documentVersion=' + version(d) + '&titleIndex=1&letterId=' + messageId() + '&documentId=' + parentEntityId(0) HEADERS httpHeadersToken PARAMS exportFile() TO result;
                contentDocument(0) <- encode(RAWFILE(result()), 'base64');

                IF useTestSignature() THEN {
                    signWithTestSignature(0) <- TRUE;
                } ELSE {
                    sign(FILE(result()), TRUE, legalEntity(organization(b)));
                    signatureDocument(0) <- encodedSignature();
                }

                postMessagePatch(u);
            } CATCH {
                fileToString(result(), 'UTF-8');
                MESSAGE 'Ошибка подписи ' + (OVERRIDE statusHttp() + ' ' + resultString(), messageCaughtException());
            }
            APPLY;
            getDocument(u,b,d);
        }
    }
}

EXTEND FORM ukdDocument
    PROPERTIES(u) SHOWIF document(u) READONLY titleDocument, primaryStatusTextDocument
    PROPERTIES(u) SHOWIF NOT document(u) messageUniversalCorrectionDocument
;
DESIGN ukdDocument {
    transfer {
        NEW diadoc {
            caption = 'Диадок API';
            MOVE PROPERTY (titleDocument(u));
            MOVE PROPERTY (primaryStatusTextDocument(u));
            MOVE PROPERTY (messageUniversalCorrectionDocument(u));
        }
    }
}

EXTEND FORM ukdDocuments
    PROPERTIES(u) READONLY titleDocument = titleDocument //AFTER isTransferred(u)
    PROPERTIES(u) PANEL SHOWIF document(u) READONLY titleDocument, primaryStatusTextDocument 
    PROPERTIES(u) PANEL SHOWIF NOT document(u) messageUniversalCorrectionDocument
;

DESIGN ukdDocuments {
    export {
        NEW diadoc {
            caption = 'Диадок API';
            MOVE PROPERTY (titleDocument(u));
            MOVE PROPERTY (primaryStatusTextDocument(u));
            MOVE PROPERTY (messageUniversalCorrectionDocument(u));
        }
    }
}

//создание документа на основе
GROUP vsvUchDokObor1 EXTID 'СвУчДокОбор';
GROUP vsvOEDOtpr1 EXTID 'СвОЭДОтпр' : vsvUchDokObor1;
//GROUP vdokumient EXTID 'Документ';
GROUP vsvKSchF EXTID 'СвКСчФ' : vdokumient;
GROUP vschF EXTID 'СчФ' : vsvKSchF;
GROUP visprSchF1 EXTID 'ИспрСчФ' : vschF;
GROUP visprKSchF EXTID 'ИспрКСчФ' : vsvKSchF;
GROUP vsvProd1 EXTID 'СвПрод' : vsvKSchF;
GROUP vidSv4 EXTID 'ИдСв' : vsvProd1;
GROUP vsvIuLUch4 EXTID 'СвЮЛУч' : vidSv4;
GROUP vadries4 EXTID 'Адрес' : vsvProd1;
GROUP vadrRF5 EXTID 'АдрРФ' : vadries4;
GROUP vadrInf5 EXTID 'АдрИнф' : vadries4;
GROUP vbankRiekv3 EXTID 'БанкРекв' : vsvProd1;
GROUP vsvBank4 EXTID 'СвБанк' : vbankRiekv3;
GROUP vsvPokup1 EXTID 'СвПокуп' : vsvKSchF;
GROUP vidSv5 EXTID 'ИдСв' : vsvPokup1;
GROUP vsvIuLUch5 EXTID 'СвЮЛУч' : vidSv5;
GROUP vadries5 EXTID 'Адрес' : vsvPokup1;
GROUP vadrRF6 EXTID 'АдрРФ' : vadries5;
GROUP vadrInf6 EXTID 'АдрИнф' : vadries5;
GROUP vbankRiekv4 EXTID 'БанкРекв' : vsvPokup1;
GROUP vsvBank5 EXTID 'СвБанк' : vbankRiekv4;
GROUP vinfPolFKhZh11 EXTID 'ИнфПолФХЖ1' : vsvKSchF;
GROUP vtablKSchF EXTID 'ТаблКСчФ' : vdokumient;

GROUP vstTovBiezNDS EXTID 'СтТовБезНДС';
GROUP vaktsizDo EXTID 'АкцизДо';
GROUP vaktsizPosle EXTID 'АкцизПосле';
GROUP vaktsizRazn EXTID 'АкцизРазн';
GROUP vsumNalDo EXTID 'СумНалДо';
GROUP vsumNalPosle EXTID 'СумНалПосле';
GROUP vsumNalRazn EXTID 'СумНалРазн';
GROUP vstTovUchNal EXTID 'СтТовУчНал';
GROUP vdopSviedTov1 EXTID 'ДопСведТов';
GROUP vvsieghoUvel EXTID 'ВсегоУвел' : vtablKSchF;
GROUP vsumNal1 EXTID 'СумНал' : vvsieghoUvel;
GROUP vvsieghoUm EXTID 'ВсегоУм' : vtablKSchF;
GROUP vsumNal2 EXTID 'СумНал' : vvsieghoUm;
GROUP vsodFKhZh3 EXTID 'СодФХЖ3' : vdokumient;
GROUP vpieriedatDokum EXTID 'ПередатДокум' : vsodFKhZh3;
GROUP vdokumOsnKor EXTID 'ДокумОснКор' : vsodFKhZh3;
GROUP vpodpisant2 EXTID 'Подписант' : vdokumient;
GROUP vFL1 EXTID 'ФЛ' : vpodpisant2;
GROUP vFIO6 EXTID 'ФИО' : vFL1;
GROUP vIP1 EXTID 'ИП' : vpodpisant2;
GROUP vFIO7 EXTID 'ФИО' : vIP1;
GROUP vIuL1 EXTID 'ЮЛ' : vpodpisant2;
GROUP vFIO8 EXTID 'ФИО' : vIuL1;

vnaimOrgh6 = DATA LOCAL STRING();
vINNIuL6 = DATA LOCAL STRING();
vidEDO1 = DATA LOCAL STRING();
vidOtpr1 = DATA LOCAL STRING();
vidPol1 = DATA LOCAL STRING();
vnomIsprSchF = DATA LOCAL STRING();
vdataIsprSchF = DATA LOCAL STRING();
vnomIsprKSchF = DATA LOCAL STRING();
vdataIsprKSchF = DATA LOCAL STRING();
vnaimOrgh7 = DATA LOCAL STRING();
vINNIuL7 = DATA LOCAL STRING();
vKPP5 = DATA LOCAL STRING();
vkodGAR2 = DATA LOCAL STRING();
vindieks4 = DATA LOCAL STRING();
vkodRieghion4 = DATA LOCAL STRING();
vraion2 = DATA LOCAL STRING();
vghorod4 = DATA LOCAL STRING();
vulitsa4 = DATA LOCAL STRING();
vdom4 = DATA LOCAL STRING();
vkorpus1 = DATA LOCAL STRING();
vkodStr5 = DATA LOCAL STRING();
vadrTiekst5 = DATA LOCAL STRING();
vnaimBank3 = DATA LOCAL STRING();
vBIK3 = DATA LOCAL STRING();
vkorSchiet1 = DATA LOCAL STRING();
vnomierSchieta3 = DATA LOCAL STRING();
vOKPO3 = DATA LOCAL STRING();
vnaimOrgh8 = DATA LOCAL STRING();
vINNIuL8 = DATA LOCAL STRING();
vKPP6 = DATA LOCAL STRING();
vkodGAR3 = DATA LOCAL STRING();
vindieks5 = DATA LOCAL STRING();
vkodRieghion5 = DATA LOCAL STRING();
vghorod5 = DATA LOCAL STRING();
vulitsa5 = DATA LOCAL STRING();
vdom5 = DATA LOCAL STRING();
vkodStr6 = DATA LOCAL STRING();
vadrTiekst6 = DATA LOCAL STRING();
vnaimBank4 = DATA LOCAL STRING();
vBIK4 = DATA LOCAL STRING();
vnomierSchieta4 = DATA LOCAL STRING();
vOKPO4 = DATA LOCAL STRING();
vnomierSchF1 = DATA LOCAL STRING();
vdataSchF1 = DATA LOCAL STRING();
vnomierKSchF = DATA LOCAL STRING();
vdataKSchF = DATA LOCAL STRING();
vkodOKV1 = DATA LOCAL STRING();
vstoimDoIzm = DATA LOCAL STRING(INTEGER);
vstoimPosleIzm = DATA LOCAL STRING(INTEGER);
vstoimUvel = DATA LOCAL STRING(INTEGER);
vstoimUm = DATA LOCAL STRING(INTEGER);
vsumAktsiz1 = DATA LOCAL STRING(INTEGER);
vbiezAktsiz1 = DATA LOCAL STRING(INTEGER);
vsumAktsiz2 = DATA LOCAL STRING(INTEGER);
vbiezAktsiz2 = DATA LOCAL STRING(INTEGER);
vsumUvel = DATA LOCAL STRING(INTEGER);
vsumUm = DATA LOCAL STRING(INTEGER);
vsumNDS1 = DATA LOCAL STRING(INTEGER);
vbiezNDS1 = DATA LOCAL STRING(INTEGER);
vsumNDS2 = DATA LOCAL STRING(INTEGER);
vbiezNDS2 = DATA LOCAL STRING(INTEGER);
vsumUvel1 = DATA LOCAL STRING(INTEGER);
vsumUm1 = DATA LOCAL STRING(INTEGER);
vstoimDoIzm1 = DATA LOCAL STRING(INTEGER);
vstoimPosleIzm1 = DATA LOCAL STRING(INTEGER);
vstoimUvel1 = DATA LOCAL STRING(INTEGER);
vstoimUm1 = DATA LOCAL STRING(INTEGER);
vnomSriedIdientTovVsviedTovDo = DATA LOCAL INTEGER(INTEGER);
videntTransUpak1 = DATA LOCAL STRING(INTEGER);
vKIZ1 = DATA LOCAL STRING(INTEGER);
vnomUpak1 = DATA LOCAL STRING(INTEGER);
vnomSriedIdientTovVsviedTovPosle = DATA LOCAL INTEGER(INTEGER);
videntTransUpak2 = DATA LOCAL STRING(INTEGER);
vKIZ2 = DATA LOCAL STRING(INTEGER);
vnomUpak2 = DATA LOCAL STRING(INTEGER);
vnaimIedIzmDo = DATA LOCAL STRING(INTEGER);
vnaimIedIzmPosle = DATA LOCAL STRING(INTEGER);
vkodTov1 = DATA LOCAL STRING(INTEGER);
vsviedTovVinfPolFKhZh21 = DATA LOCAL INTEGER(INTEGER);
vnomStr1 = DATA LOCAL STRING(INTEGER);
vnaimTov1 = DATA LOCAL STRING(INTEGER);
vOKIeI_TovDo = DATA LOCAL STRING(INTEGER);
vOKIeI_TovPosle = DATA LOCAL STRING(INTEGER);
vkolTovDo = DATA LOCAL STRING(INTEGER);
vkolTovPosle = DATA LOCAL STRING(INTEGER);
vtsienaTovDo = DATA LOCAL STRING(INTEGER);
vtsienaTovPosle = DATA LOCAL STRING(INTEGER);
vnalStDo = DATA LOCAL STRING(INTEGER);
vnalStPosle = DATA LOCAL STRING(INTEGER);
vsumNDS3 = DATA LOCAL STRING();
vbiezNDS3 = DATA LOCAL STRING();
vsumNDS4 = DATA LOCAL STRING();
vbiezNDS4 = DATA LOCAL STRING();
identif1 = DATA LOCAL STRING(INTEGER);
vinfPolFKhZh31 = DATA LOCAL STRING(INTEGER);
vstTovBiezNDSVsiegho1 = DATA LOCAL STRING();
vstTovUchNalVsiegho1 = DATA LOCAL STRING();
vstTovBiezNDSVsiegho2 = DATA LOCAL STRING();
vstTovUchNalVsiegho2 = DATA LOCAL STRING();
vnaimOsn1 = DATA LOCAL STRING();
vnomOsn1 = DATA LOCAL STRING();
vdataOsn1 = DATA LOCAL STRING();
vnaimOsn2 = DATA LOCAL STRING();
vnomOsn2 = DATA LOCAL STRING();
vdataOsn2 = DATA LOCAL STRING();
vinyeSvIzmStoim = DATA LOCAL STRING();
vsodOpier1 = DATA LOCAL STRING();
vdataNapr = DATA LOCAL STRING();
voblPoln1 = DATA LOCAL STRING();
vstatus1 = DATA LOCAL STRING();
vosnPoln1 = DATA LOCAL STRING();
vfamiliia5 = DATA LOCAL STRING();
vimia5 = DATA LOCAL STRING();
votchiestvo5 = DATA LOCAL STRING();
vINNIuL9 = DATA LOCAL STRING();
vnaimOrgh9 = DATA LOCAL STRING();
vdolzhn1 = DATA LOCAL STRING();
vfamiliia6 = DATA LOCAL STRING();
vimia6 = DATA LOCAL STRING();
votchiestvo6 = DATA LOCAL STRING();
vKND1 = DATA LOCAL STRING();
vfunktsiia1 = DATA LOCAL STRING();
vpoFaktKhZh1 = DATA LOCAL STRING();
vnaimDokOpr1 = DATA LOCAL STRING();
vdataInfPr1 = DATA LOCAL STRING();
vvriemInfPr1 = DATA LOCAL STRING();
vnaimEkonSubSost1 = DATA LOCAL STRING();
vidFail1 = DATA LOCAL STRING();
vviersForm1 = DATA LOCAL STRING();
vviersProgh1 = DATA LOCAL STRING();

FORM importUKD FORMEXTID 'Файл'
    PROPERTIES() vidFail1 EXTID 'ИдФайл' ATTR, vviersForm1 EXTID 'ВерсФорм' ATTR, vviersProgh1 EXTID 'ВерсПрог' ATTR
    PROPERTIES() IN vsvUchDokObor1 vidOtpr1 EXTID 'ИдОтпр' ATTR, vidPol1 EXTID 'ИдПол' ATTR
    PROPERTIES() IN vsvOEDOtpr1 vnaimOrgh6 EXTID 'НаимОрг' ATTR, vINNIuL6 EXTID 'ИННЮЛ' ATTR, vidEDO1 EXTID 'ИдЭДО' ATTR
    PROPERTIES() IN vdokumient vKND1 EXTID 'КНД' ATTR, vfunktsiia1 EXTID 'Функция' ATTR, vpoFaktKhZh1 EXTID 'ПоФактХЖ' ATTR, vnaimDokOpr1 EXTID 'НаимДокОпр' ATTR, vdataInfPr1 EXTID 'ДатаИнфПр' ATTR, vvriemInfPr1 EXTID 'ВремИнфПр' ATTR, vnaimEkonSubSost1 EXTID 'НаимЭконСубСост' ATTR
    PROPERTIES() IN vsvKSchF vnomierKSchF EXTID 'НомерКСчФ' ATTR, vdataKSchF EXTID 'ДатаКСчФ' ATTR, vkodOKV1 EXTID 'КодОКВ' ATTR
    PROPERTIES() IN vschF vnomierSchF1 EXTID 'НомерСчФ' ATTR, vdataSchF1 EXTID 'ДатаСчФ' ATTR
    PROPERTIES() IN visprSchF1 vnomIsprSchF EXTID 'НомИспрСчФ' ATTR, vdataIsprSchF EXTID 'ДатаИспрСчФ' ATTR
    PROPERTIES() IN visprKSchF vnomIsprKSchF EXTID 'НомИспрКСчФ' ATTR, vdataIsprKSchF EXTID 'ДатаИспрКСчФ' ATTR
    PROPERTIES() IN vsvProd1 vOKPO3 EXTID 'ОКПО' ATTR
    PROPERTIES() IN vsvIuLUch4 vnaimOrgh7 EXTID 'НаимОрг' ATTR, vINNIuL7 EXTID 'ИННЮЛ' ATTR, vKPP5 EXTID 'КПП' ATTR
    PROPERTIES() IN vadries4 vkodGAR2 EXTID 'КодГАР' ATTR
    PROPERTIES() IN vadrRF5 vindieks4 EXTID 'Индекс' ATTR, vkodRieghion4 EXTID 'КодРегион' ATTR, vraion2 EXTID 'Район' ATTR, vghorod4 EXTID 'Город' ATTR, vulitsa4 EXTID 'Улица' ATTR, vdom4 EXTID 'Дом' ATTR, vkorpus1 EXTID 'Корпус' ATTR
    PROPERTIES() IN vadrInf5 vkodStr5 EXTID 'КодСтр' ATTR, vadrTiekst5 EXTID 'АдрТекст' ATTR
    PROPERTIES() IN vbankRiekv3 vnomierSchieta3 EXTID 'НомерСчета' ATTR
    PROPERTIES() IN vsvBank4 vnaimBank3 EXTID 'НаимБанк' ATTR, vBIK3 EXTID 'БИК' ATTR, vkorSchiet1 EXTID 'КорСчет' ATTR
    PROPERTIES() IN vsvPokup1 vOKPO4 EXTID 'ОКПО' ATTR
    PROPERTIES() IN vsvIuLUch5 vnaimOrgh8 EXTID 'НаимОрг' ATTR, vINNIuL8 EXTID 'ИННЮЛ' ATTR, vKPP6 EXTID 'КПП' ATTR
    PROPERTIES() IN vadries5 vkodGAR3 EXTID 'КодГАР' ATTR
    PROPERTIES() IN vadrRF6 vindieks5 EXTID 'Индекс' ATTR, vkodRieghion5 EXTID 'КодРегион' ATTR, vghorod5 EXTID 'Город' ATTR, vulitsa5 EXTID 'Улица' ATTR, vdom5 EXTID 'Дом' ATTR
    PROPERTIES() IN vadrInf6 vkodStr6 EXTID 'КодСтр' ATTR, vadrTiekst6 EXTID 'АдрТекст' ATTR
    PROPERTIES() IN vbankRiekv4 vnomierSchieta4 EXTID 'НомерСчета' ATTR
    PROPERTIES() IN vsvBank5 vnaimBank4 EXTID 'НаимБанк' ATTR, vBIK4 EXTID 'БИК' ATTR
    
    OBJECTS vtiekstInf = INTEGER EXTID 'ТекстИнф' IN vinfPolFKhZh11
    
    OBJECTS vsviedTov = INTEGER EXTID 'СведТов' IN vtablKSchF
    PROPERTIES(vsviedTov) vnomStr1 EXTID 'НомСтр' ATTR, vnaimTov1 EXTID 'НаимТов' ATTR, vOKIeI_TovDo EXTID 'ОКЕИ_ТовДо' ATTR, vOKIeI_TovPosle EXTID 'ОКЕИ_ТовПосле' ATTR, vkolTovDo EXTID 'КолТовДо' ATTR, vkolTovPosle EXTID 'КолТовПосле' ATTR, vtsienaTovDo EXTID 'ЦенаТовДо' ATTR, vtsienaTovPosle EXTID 'ЦенаТовПосле' ATTR, vnalStDo EXTID 'НалСтДо' ATTR, vnalStPosle EXTID 'НалСтПосле' ATTR
    FILTERS vkolTovDo(vsviedTov) OR vkolTovPosle(vsviedTov)
    PROPERTIES(vsviedTov) IN vstTovBiezNDS vstoimDoIzm EXTID 'СтоимДоИзм' ATTR, vstoimPosleIzm EXTID 'СтоимПослеИзм' ATTR, vstoimUvel EXTID 'СтоимУвел' ATTR, vstoimUm EXTID 'СтоимУм' ATTR
    PROPERTIES(vsviedTov) IN vaktsizDo vsumAktsiz1 EXTID 'СумАкциз', vbiezAktsiz1 EXTID 'БезАкциз'
    PROPERTIES(vsviedTov) IN vaktsizPosle vsumAktsiz2 EXTID 'СумАкциз', vbiezAktsiz2 EXTID 'БезАкциз'
    PROPERTIES(vsviedTov) IN vaktsizRazn vsumUvel EXTID 'СумУвел', vsumUm EXTID 'СумУм'
    PROPERTIES(vsviedTov) IN vsumNalDo vsumNDS1 EXTID 'СумНДС', vbiezNDS1 EXTID 'БезНДС'
    PROPERTIES(vsviedTov) IN vsumNalPosle vsumNDS2 EXTID 'СумНДС', vbiezNDS2 EXTID 'БезНДС'
    PROPERTIES(vsviedTov) IN vsumNalRazn vsumUvel1 EXTID 'СумУвел', vsumUm1 EXTID 'СумУм'
    PROPERTIES(vsviedTov) IN vstTovUchNal vstoimDoIzm1 EXTID 'СтоимДоИзм' ATTR, vstoimPosleIzm1 EXTID 'СтоимПослеИзм' ATTR, vstoimUvel1 EXTID 'СтоимУвел' ATTR, vstoimUm1 EXTID 'СтоимУм' ATTR
    PROPERTIES(vsviedTov) IN vdopSviedTov1 vnaimIedIzmDo EXTID 'НаимЕдИзмДо' ATTR, vnaimIedIzmPosle EXTID 'НаимЕдИзмПосле' ATTR, vkodTov1 EXTID 'КодТов' ATTR
    
    OBJECTS vnomSriedIdientTovDo = INTEGER EXTID 'НомСредИдентТовДо'
    PROPERTIES(vnomSriedIdientTovDo) videntTransUpak1 EXTID 'ИдентТрансУпак' ATTR, vKIZ1 EXTID 'КИЗ', vnomUpak1 EXTID 'НомУпак'
    FILTERS vnomSriedIdientTovVsviedTovDo(vnomSriedIdientTovDo) == vsviedTov
    
    OBJECTS vnomSriedIdientTovPosle = INTEGER EXTID 'НомСредИдентТовПосле'
    PROPERTIES(vnomSriedIdientTovPosle) videntTransUpak2 EXTID 'ИдентТрансУпак' ATTR, vKIZ2 EXTID 'КИЗ', vnomUpak2 EXTID 'НомУпак'
    FILTERS vnomSriedIdientTovVsviedTovPosle(vnomSriedIdientTovPosle) == vsviedTov
    
    OBJECTS vinfPolFKhZh2 = INTEGER EXTID 'ИнфПолФХЖ2'
    FILTERS vsviedTovVinfPolFKhZh21(vinfPolFKhZh2) == vsviedTov
    PROPERTIES(vinfPolFKhZh2) identif1 EXTID 'Идентиф' ATTR , vinfPolFKhZh31 EXTID 'Значен' ATTR
    
    PROPERTIES() IN vvsieghoUvel vstTovBiezNDSVsiegho1 EXTID 'СтТовБезНДСВсего' ATTR, vstTovUchNalVsiegho1 EXTID 'СтТовУчНалВсего' ATTR
    PROPERTIES() IN vsumNal1 vsumNDS3 EXTID 'СумНДС', vbiezNDS3 EXTID 'БезНДС'
    PROPERTIES() IN vvsieghoUm vstTovBiezNDSVsiegho2 EXTID 'СтТовБезНДСВсего' ATTR, vstTovUchNalVsiegho2 EXTID 'СтТовУчНалВсего' ATTR
    PROPERTIES() IN vsumNal2 vsumNDS4 EXTID 'СумНДС', vbiezNDS4 EXTID 'БезНДС'
    PROPERTIES() IN vsodFKhZh3 vinyeSvIzmStoim EXTID 'ИныеСвИзмСтоим' ATTR, vsodOpier1 EXTID 'СодОпер' ATTR, vdataNapr EXTID 'ДатаНапр' ATTR
    PROPERTIES() IN vpieriedatDokum vnaimOsn1 EXTID 'НаимОсн' ATTR, vnomOsn1 EXTID 'НомОсн' ATTR, vdataOsn1 EXTID 'ДатаОсн' ATTR
    PROPERTIES() IN vdokumOsnKor vnaimOsn2 EXTID 'НаимОсн' ATTR, vnomOsn2 EXTID 'НомОсн' ATTR, vdataOsn2 EXTID 'ДатаОсн' ATTR
    PROPERTIES() IN vpodpisant2 voblPoln1 EXTID 'ОблПолн' ATTR, vstatus1 EXTID 'Статус' ATTR, vosnPoln1 EXTID 'ОснПолн' ATTR
    PROPERTIES() IN vFIO6 vfamiliia5 EXTID 'Фамилия' ATTR, vimia5 EXTID 'Имя' ATTR, votchiestvo5 EXTID 'Отчество' ATTR
    PROPERTIES() IN vIuL1 vINNIuL9 EXTID 'ИННЮЛ' ATTR, vnaimOrgh9 EXTID 'НаимОрг' ATTR, vdolzhn1 EXTID 'Должн' ATTR
    PROPERTIES() IN vFIO8 vfamiliia6 EXTID 'Фамилия' ATTR, vimia6 EXTID 'Имя' ATTR, votchiestvo6 EXTID 'Отчество' ATTR
;


showCreateDocument(Document d) += WHEN typeNamedId(d) == 'UniversalCorrectionDocument' AND NOT ukdDocument(d) THEN TRUE;

createDocument(Document d) + {
    IF typeNamedId(d) == 'UniversalCorrectionDocument' AND NOT ukdDocument(d) THEN NEWSESSION {
        IMPORT importUKD FROM data(entity(d));

        NEW ukd = UkdDocument {
            uuid(ukd) <- ISTRING[36](getWord(vidFail1(), '_', wordCount(vidFail1(), '_')));
            idConsignor(ukd) <- STRING[46](vidOtpr1());
            idConsignee(ukd) <- STRING[46](vidPol1());
            nameOperatorConsignor(ukd) <- STRING[1000](vnaimOrgh6());
            innOperatorConsignor(ukd) <- STRING[10](vINNIuL6());
            codeOperatorConsignor(ukd) <- STRING[3](vidEDO1());
            status(ukd) <- GROUP MAX UkdDocumentStatus s IF staticCaption(s) == vfunktsiia1() AND s IS UkdDocumentStatus;
            businessNameDocument(ukd) <- STRING[255](vpoFaktKhZh1());
            supplierNameDocument(ukd) <- STRING[255](vnaimDokOpr1());
            dateSupplier(ukd) <- DATE(toDateFormat(vdataInfPr1(), 'DD.MM.YYYY'));
            timeSupplier(ukd) <- TIME(toDateTimeFormat(vvriemInfPr1(), 'HH24.MI.SS'));
            nameOriginatorSupplier(ukd) <- STRING[1000](vnaimEkonSubSost1());
            numberInvoice(ukd) <- STRING[1000](vnomierKSchF());
            dateInvoice(ukd) <- DATE(toDateFormat(vdataKSchF(), 'DD.MM.YYYY'));
            codeCurrency(ukd) <- STRING[3](vkodOKV1());
            baseInvoiceNumber(ukd) <- STRING[1000](vnomierSchF1());
            baseDateInvoice(ukd) <- DATE(toDateFormat(vdataSchF1(), 'DD.MM.YYYY'));
            okpoSupplier(ukd) <- STRING[10](vOKPO3());
            nameSupplier(ukd) <- STRING[1000](vnaimOrgh7());
            innSupplier(ukd) <- STRING[10](vINNIuL7());
            kppSupplier(ukd) <- STRING[9](vKPP5());
            codeAddressSupplier(ukd) <- STRING[36](vkodGAR2());
            regionCodeSupplier(ukd) <- STRING[2](vkodRieghion4());
            countryCodeAddressSupplier(ukd) <- STRING[3](vkodStr5());
            addressSupplier(ukd) <- STRING[150](vadrTiekst5());
            numberAccountSupplier(ukd) <- STRING[20](vnomierSchieta3());
            nameBankSupplier(ukd) <- STRING[1000](vnaimBank3());
            MFOBankSupplier(ukd) <- STRING[9](vBIK3());
            corrAccountBankSupplier(ukd) <- STRING[20](vkorSchiet1());
            okpoCustomer(ukd) <- STRING[10](vOKPO4());
            nameCustomer(ukd) <- STRING[1000](vnaimOrgh8());
            innCustomer(ukd) <- STRING[10](vINNIuL8());
            kppCustomer(ukd) <- STRING[9](vKPP6());
            regionCodeCustomer(ukd) <- STRING[2](vkodRieghion5());
            countryCodeAddressCustomer(ukd) <- STRING[3](vkodStr6());
            addressCustomer(ukd) <- STRING[150](vadrTiekst6());
            codeAddressCustomer(ukd) <- STRING[36](vkodGAR3());
            //updDocument(ukd) <- NULL;
            
            FOR vkolTovDo(INTEGER i) OR vkolTovPosle(i) NEW dd = UkdDocumentDetail DO {
                ukdDocument(dd) <- ukd;
                //updDocumentDetail(dd) <- NULL;
                number(dd) <- NUMERIC[6,0](vnomStr1(i));
                nameSku(dd) <- STRING[1000](vnaimTov1(i));
                idUOMB(dd) <- STRING[4](vOKIeI_TovDo(i));
                idUOMA(dd) <- STRING[4](vOKIeI_TovPosle(i));
                quantityB(dd) <- NUMERIC[26,3](vkolTovDo(i));
                quantityA(dd) <- NUMERIC[26,3](vkolTovPosle(i));
                priceB(dd) <- NUMERIC[26,4](vtsienaTovDo(i));
                priceA(dd) <- NUMERIC[26,4](vtsienaTovPosle(i));
                VATStatusB(dd) <- GROUP MAX VATStatus s IF staticCaption(s) == vnalStDo(i);
                VATStatusA(dd) <- GROUP MAX VATStatus s IF staticCaption(s) == vnalStPosle(i);
                sumB(dd) <- NUMERIC[19,2](vstoimDoIzm(i));
                sumA(dd) <- NUMERIC[19,2](vstoimPosleIzm(i));
                dutySumB(dd) <- NUMERIC[19,2](vsumAktsiz1(i));
                withoutDutyB(dd) <- TRUE IF vbiezAktsiz1(i);
                dutySumA(dd) <- NUMERIC[19,2](vsumAktsiz2(i));
                withoutDutyA(dd) <- TRUE IF vbiezAktsiz2(i);
                VATSumB(dd) <- NUMERIC[19,2](vsumNDS1(i));
                VATSumA(dd) <- NUMERIC[19,2](vsumNDS2(i));                
                invoiceSumB(dd) <- NUMERIC[19,2](vstoimDoIzm1(i));
                invoiceSumA(dd) <- NUMERIC[19,2](vstoimPosleIzm1(i));
                nameUOMB(dd) <- STRING[255](vnaimIedIzmDo(i));
                nameUOMA(dd) <- STRING[255](vnaimIedIzmPosle(i));
                idSku(dd) <- STRING[100](vkodTov1(i));
                
                FOR vnomSriedIdientTovVsviedTovDo(INTEGER j) == i AND videntTransUpak1(j) NEW pd = UkdTransportPackDetail DO {
                    ukdDocumentDetail(pd) <- dd;
                    id(pd) <- STRING[255](videntTransUpak1(j));
                }

                FOR vnomSriedIdientTovVsviedTovDo(INTEGER j) == i AND vnomUpak1(j) NEW pd = UkdPackDetail DO {
                    ukdDocumentDetail(pd) <- dd;
                    id(pd) <- STRING[255](vnomUpak1(j));
                }

                FOR vnomSriedIdientTovVsviedTovDo(INTEGER j) == i AND vKIZ1(j) NEW ld = UkdLotDetail DO {
                    ukdDocumentDetail(ld) <- dd;
                    id(ld) <- STRING[255](vKIZ1(j));
                }
                
                FOR vnomSriedIdientTovVsviedTovPosle(INTEGER j) == i AND videntTransUpak2(j) NEW pd = UkdTransportPackDetail DO {
                    ukdDocumentDetail(pd) <- dd;
                    id(pd) <- STRING[255](videntTransUpak2(j));
                }

                FOR vnomSriedIdientTovVsviedTovPosle(INTEGER j) == i AND vnomUpak2(j) NEW pd = UkdPackDetail DO {
                    ukdDocumentDetail(pd) <- dd;
                    id(pd) <- STRING[255](vnomUpak2(j));
                }

                FOR vnomSriedIdientTovVsviedTovPosle(INTEGER j) == i AND vKIZ2(j) NEW ld = UkdLotDetail DO {
                    ukdDocumentDetail(ld) <- dd;
                    id(ld) <- STRING[255](vKIZ2(j));
                }
            }
            withoutVAT(ukd) <- TRUE IF vbiezNDS3() OR vbiezNDS4();
            description(ukd) <- STRING[255](vsodOpier1());
            sendDate(ukd) <- DATE(toDateFormat(vdataNapr(), 'DD.MM.YYYY'));
            nameBaseDocument(ukd) <- STRING[255](vnaimOsn1());
            numberBaseDocument(ukd) <- STRING[255](vnomOsn1());
            dateBaseDocument(ukd) <- DATE(toDateFormat(vdataOsn1(), 'DD.MM.YYYY'));
            nameCorrectionDocument(ukd) <- STRING[255](vnaimOsn2());
            numberCorrectionDocument(ukd) <- STRING[255](vnomOsn2());
            dateCorrectionDocument(ukd) <- DATE(toDateFormat(vdataOsn2(), 'DD.MM.YYYY'));
            supplierSignerCredentials(ukd) <- GROUP MAX Credential c IF staticCaption(c) == voblPoln1();
            supplierSignerStatus(ukd) <- GROUP MAX CStatus c IF staticCaption(c) == vstatus1();
            supplierSignerCredentialsBase(ukd) <- STRING[255](vosnPoln1());
            supplierSignerLastName(ukd) <- STRING[60](vfamiliia5());
            supplierSignerFirstName(ukd) <- STRING[60](vimia5());
            supplierSignerMiddleName(ukd) <- STRING[60](votchiestvo5());
            supplierSignerInn(ukd) <- STRING[10](vINNIuL9());
            supplierSignerPosition(ukd) <- STRING[128](vdolzhn1());
            supplierSignerAgentLastName(ukd) <- STRING[60](vfamiliia6());
            supplierSignerAgentFirstName(ukd) <- STRING[60](vimia6());
            supplierSignerAgentMiddleName(ukd) <- STRING[60](votchiestvo6());
            
            document(ukd) <- d;
        }
        APPLY;
        MESSAGE 'УКД создан' NOWAIT;
    }
}



GROUP vinfPok1 EXTID 'ИнфПок';
GROUP vidInfProd1 EXTID 'ИдИнфПрод' : vinfPok1;
GROUP vsodFKhZh41 EXTID 'СодФХЖ4' : vinfPok1;
GROUP vsvSoglas EXTID 'СвСоглас' : vsodFKhZh41;
GROUP vinfPolFKhZh41 EXTID 'ИнфПолФХЖ4' : vsodFKhZh41;
GROUP vtiekstInf1 EXTID 'ТекстИнф' : vinfPolFKhZh41;
GROUP vpodpisant3 EXTID 'Подписант' : vinfPok1;
GROUP fl1 EXTID 'ФЛ' : vpodpisant3;
GROUP fiofl1 EXTID 'ФИО' : fl1;
GROUP ip1 EXTID 'ИП' : vpodpisant3;
GROUP fioip1 EXTID 'ФИО' : ip1;
GROUP yl1 EXTID 'ЮЛ' : vpodpisant3;
GROUP fioyl1 EXTID 'ФИО' : yl1;

vEP1 = DATA LOCAL STRING();
vidFailInfPr1 = DATA LOCAL STRING();
vdataFailInfPr1 = DATA LOCAL STRING();
vvriemFailInfPr1 = DATA LOCAL STRING();
vdataSoglas = DATA LOCAL STRING();
vidientif1 = DATA LOCAL STRING();
vznachien1 = DATA LOCAL STRING();
vidFailInfPol1 = DATA LOCAL STRING();
vnaimDokOprPr1 = DATA LOCAL STRING();
vfunktsiiaPr = DATA LOCAL STRING();
vnomDokInfPr = DATA LOCAL STRING();
vdataDokInfPr = DATA LOCAL STRING();
vosnPolnOrgh1 = DATA LOCAL STRING();
vdataInfPok1 = DATA LOCAL STRING();
vvriemInfPok1 = DATA LOCAL STRING();
vosnDovierOrghSost1 = DATA LOCAL STRING();

lastNameFl1 = DATA LOCAL STRING();
firstNameFl1 = DATA LOCAL STRING();
middleNameFl1 = DATA LOCAL STRING();

innIp1 = DATA LOCAL STRING[10]();
lastNameIp1 = DATA LOCAL STRING();
firstNameIp1 = DATA LOCAL STRING();
middleNameIp1 = DATA LOCAL STRING();

innYl1 = DATA LOCAL STRING[10]();
positionYl1 = DATA LOCAL STRING();
lastNameYl1 = DATA LOCAL STRING();
firstNameYl1 = DATA LOCAL STRING();
middleNameYl1 = DATA LOCAL STRING();

FORM ukdBuyer FORMEXTID 'Файл'
    PROPERTIES() vidFail1 EXTID 'ИдФайл' ATTR, vviersForm1 EXTID 'ВерсФорм' ATTR, vviersProgh1 EXTID 'ВерсПрог' ATTR
    PROPERTIES() IN vsvUchDokObor1 vidOtpr1 EXTID 'ИдОтпр' ATTR, vidPol1 EXTID 'ИдПол' ATTR
    PROPERTIES() IN vsvOEDOtpr1 vnaimOrgh6 EXTID 'НаимОрг' ATTR, vINNIuL6 EXTID 'ИННЮЛ' ATTR, vidEDO1 EXTID 'ИдЭДО' ATTR
    PROPERTIES() IN vinfPok1 vKND1 EXTID 'КНД' ATTR, vdataInfPok1 EXTID 'ДатаИнфПок' ATTR, vvriemInfPok1 EXTID 'ВремИнфПок' ATTR, vnaimEkonSubSost1 EXTID 'НаимЭконСубСост' ATTR, vosnDovierOrghSost1 EXTID 'ОснДоверОргСост' ATTR
    PROPERTIES() IN vidInfProd1 vEP1 EXTID 'ЭП', vidFailInfPr1 EXTID 'ИдФайлИнфПр' ATTR, vdataFailInfPr1 EXTID 'ДатаФайлИнфПр' ATTR, vvriemFailInfPr1 EXTID 'ВремФайлИнфПр' ATTR
    PROPERTIES() IN vsodFKhZh41 vnaimDokOprPr1 EXTID 'НаимДокОпрПр' ATTR, vfunktsiiaPr EXTID 'ФункцияПр' ATTR, vnomDokInfPr EXTID 'НомДокИнфПр' ATTR, vdataDokInfPr EXTID 'ДатаДокИнфПр' ATTR
    PROPERTIES() IN vsvSoglas vsodOpier1 EXTID 'СодОпер' ATTR, vdataSoglas EXTID 'ДатаСоглас' ATTR
    PROPERTIES() IN vinfPolFKhZh41 vidFailInfPol1 EXTID 'ИдФайлИнфПол' ATTR
    PROPERTIES() IN vtiekstInf1 vidientif1 EXTID 'Идентиф' ATTR, vznachien1 EXTID 'Значен' ATTR
    PROPERTIES() IN vpodpisant3 voblPoln1 EXTID 'ОблПолн' ATTR, vstatus1 EXTID 'Статус' ATTR, vosnPoln1 EXTID 'ОснПолн' ATTR, vosnPolnOrgh1 EXTID 'ОснПолнОрг' ATTR
  
    PROPERTIES() IN fiofl1 lastNameFl1 EXTID 'Фамилия' ATTR, firstNameFl1 EXTID 'Имя' ATTR, middleNameFl1 EXTID 'Отчество' ATTR 
    
    PROPERTIES() IN ip1 innIp1 EXTID 'ИННФЛ' ATTR
    PROPERTIES() IN fioip1 lastNameIp1 EXTID 'Фамилия' ATTR, firstNameIp1 EXTID 'Имя' ATTR, middleNameIp1 EXTID 'Отчество' ATTR    
    
    PROPERTIES() IN yl1 innYl1 EXTID 'ИННЮЛ' ATTR, positionYl1 EXTID 'Должн' ATTR
    PROPERTIES() IN fioyl1 lastNameYl1 EXTID 'Фамилия' ATTR, firstNameYl1 EXTID 'Имя' ATTR, middleNameYl1 EXTID 'Отчество' ATTR            
    
;

fillBuyerTitle 'Заполнения титула покупателя в УПД' (UkdDocument u, XMLFILE f){
    NEWSESSION {
        IMPORT ukdBuyer XML FROM f;
        
        dateCustomer(u)<- toDateFormat(vdataInfPok1(), 'DD.MM.YYYY');
        timeCustomer(u)<- TIME(toDateTimeFormat(vvriemInfPok1(), 'HH24.MI.SS'));
        nameOriginatorCustomer(u)<- STRING[1000](vnaimEkonSubSost1());
        
        customerSignerCredentials(u)<- INTEGER(voblPoln1());
        customerSignerStatus(u)<- INTEGER(vstatus1());
        customerSignerCredentialsBase(u)<- STRING[255](OVERRIDE vosnPoln1(), vosnPolnOrgh1());
        
        customerSignerLastName(u)<- lastNameFl1();
        customerSignerFirstName(u)<- firstNameFl1();
        customerSignerMiddleName(u)<- middleNameFl1();
        
        customerSelfEmployedInn(u)<- innIp1();       
        customerSelfEmployedLastName(u)<- lastNameIp1();
        customerSelfEmployedFirstName(u)<- firstNameIp1();        
        customerSelfEmployedMiddleName(u)<- middleNameIp1();                
        
        customerSignerInn(u)<- innYl1();
        customerSignerPosition(u)<- positionYl1();
        
        customerSignerAgentLastName(u)<- lastNameYl1();
        customerSignerAgentFirstName(u)<- firstNameYl1();        
        customerSignerAgentMiddleName(u)<- middleNameYl1();    
        dataDateTimeTransfer(u)<- NULL;                
        APPLY;
    }
}

fillBuyerTitle 'Заполнения титула покупателя в УКД' (UkdDocument u){
    INPUT f = XMLFILE DO {
        fillBuyerTitle(u,f);    
    }
}

WHEN SET(Entity e IS Entity) AND attachmentType(e) == AttachmentType.universalCorrectionDocumentBuyerTitle AND ukdDocument(Document d) AND message(d) == message(patch(e)) DO {
    fillBuyerTitle(ukdDocument(d), XMLFILE(data(e)));
}