MODULE UpdDocumentPrint;

REQUIRE UpdDocument, UpdPrintParams;

NAMESPACE Upd;

transportationInfo 'Данные о транспортировке и грузе' = DATA STRING (UpdDocument);
otherInfoIssuance 'Иные сведения (передача)' = DATA STRING (UpdDocument);
otherAcceptance 'Иные сведения (приемка)' = DATA STRING (UpdDocument);
dataCountCopies 'Количество копий' = DATA INTEGER (UpdDocument);
countCopies (UpdDocument upd) = OVERRIDE dataCountCopies(upd), 1;

EXTEND FORM updDocument
    PROPERTIES (u) accountantSupplier, transportationInfo, otherInfoIssuance, otherAcceptance, dataCountCopies
;

DESIGN updDocument {
    titlesContainer {
        NEW print {
            caption = 'Печать';
            fill = 1;
            MOVE PROPERTY(accountantSupplier(u));
            MOVE PROPERTY(transportationInfo(u));
            MOVE PROPERTY(otherInfoIssuance(u));
            MOVE PROPERTY(otherAcceptance(u));
            MOVE PROPERTY(dataCountCopies(u));
        }
    }    
}

FORM printUpd 'Универсальный передаточный документ'
    OBJECTS dd = (c = UpdDocument, i = INTEGER)

    PROPERTIES (c)  nameSupplier, addressSupplier, innSupplier, kppSupplier,
                    nameCustomer, addressCustomer, innCustomer, kppCustomer, nameReceiverCompany,
                    dateInvoice, numberInvoice, numberCorrection, //dateCorrection,
                    contractInfo,
                    transportationInfo,
                    addressReceiverCompany,
                
                    //передача
                    infoAgentSupplier, positionAgentSupplier,
                    infoAgentExecuter, positionAgentExecuter,
                    otherInfoIssuance,
                    //прием
                    receiverAgentCredentialsBase, infoReceiver,
                    infoAgentReceiver, positionAgentReceiver,

                    otherAcceptance,
                
                    nameCurrency, codeCurrency, idUpdDocumentPaperStatus,
                    infoSupplierSignerAgent, accountantSupplier,

                    countUpdDocument,
                    countCopies
    PROPERTIES doubleSided() DRAW dd

    OBJECTS d = UpdDocumentDetail SUBREPORT
    PROPERTIES(d)   nameSku, idSku, nameUOM, idUOM,
                    quantity,
                    price, sum, nameVATStatus, VATSum, invoiceSum,
                    idCountry, nameCountry, numberDeclaration,
                    numberInvoice, dateInvoice

    FILTERS select(c),
            updDocument(d) == c,
            count(i,countCopies(c)),
            quantity(d)
;

printUpd 'УПД'(UpdDocument u) {
    doubleSided()<- NULL;
    IF NOT countSelectUpd() THEN {
        select(UpdDocument updDocument) <- TRUE IF updDocument==u;
    }
    PRINT printUpd;
    select(UpdDocument updDocument) <- NULL;
} IMAGE 'print.png';

printUpdBreake 'УПД (двухсторонний)'(UpdDocument u) {
    doubleSided()<- TRUE ;
    IF NOT countSelectUpd() THEN {
        select(UpdDocument updDocument) <- TRUE IF updDocument==u;
    }

    PRINT printUpd;
    select(UpdDocument updDocument) <- NULL;
    doubleSided()<- NULL;
} IMAGE 'print.png';

printUpdBreakeAuto 'УПД (без предпросмотра)'(UpdDocument u) {
    doubleSided()<- TRUE ;
    IF NOT countSelectUpd() THEN {
        select(UpdDocument updDocument) <- TRUE IF updDocument==u;
    }

    PRINT printUpd NOPREVIEW;
    select(UpdDocument updDocument) <- NULL;
    doubleSided()<- NULL;
} IMAGE 'print.png';

EXTEND FORM updDocuments
    PROPERTIES (u) printUpd, printUpdBreake, printUpdBreakeAuto
;

DESIGN updDocuments {
    documentDetail {
        NEW printContainer {
            caption = 'Печать';
            NEW consignmentUPD{
                align = START;
                horizontal = TRUE;

                NEW upd {
                    alignment = STRETCH;
                    lines = 3;
                    caption = 'Отчеты';
                    MOVE PROPERTY(printUpd(u)) { alignment = STRETCH; }
                    MOVE PROPERTY(printUpdBreake(u)) { alignment = STRETCH; }
                    MOVE PROPERTY(printUpdBreakeAuto(u)) { alignment = STRETCH; }
                }
            }        
        }        
    }
}