MODULE EGAISInDoc;

REQUIRE EGAIS, EGAISDoc, EGAISOutDoc;

NAMESPACE EGAIS;

CLASS InDoc 'Входящий документ ЕГАИС';

utm = DATA UTM (InDoc) INDEXED NONULL;
urlUtm (InDoc d) = url(utm(d));
nameUtm 'УТМ' (InDoc d) = name(utm(d));

outDoc = DATA OutDoc (InDoc) INDEXED;
idOutDoc 'Исходящий документ' (InDoc d) = id(outDoc(d));
countInDocs 'Входящие документы' (OutDoc d) = GROUP SUM 1 IF outDoc(InDoc i) = d MATERIALIZED;

docType = DATA DocType (InDoc) INDEXED;
idDocType 'Код типа' (InDoc d) = id(docType(d));
nameDocType 'Тип документа' (InDoc d) = name(docType(d));

dateTime 'Время' = DATA DATETIME (InDoc);
dateTime(InDoc d) <- currentDateTime() WHEN SET(d IS InDoc);

url 'Url' = DATA STRING (InDoc) INDEXED;

document 'Документ' = DATA TEXT (InDoc); 

FORM inDoc 'Входящий документ'
    OBJECTS d = InDoc PANEL
    PROPERTIES(d) nameUtm, idOutDoc, idDocType, nameDocType, url, document
    
    EDIT InDoc OBJECT d
;

DESIGN inDoc {
    OBJECTS {
        MOVE PROPERTY(document(d)) { panelCaptionVertical = TRUE; fill = 1; }
    }
}

FORM inDocs 'Входящие документы'
    OBJECTS d = InDoc
    PROPERTIES(d) READONLYIF isReadonly() nameUtm, idOutDoc, idDocType, nameDocType, dateTime, url, document PANEL
    PROPERTIES(d) NEWSESSION NEW, EDIT, DELETE
;

DESIGN inDocs {
    OBJECTS {
        NEW pane {
            fill = 1;
            MOVE BOX(d);        
            NEW tabbedPane {
                tabbed = TRUE;
                fill = 0.3;
                NEW response {
                    caption = 'Ответ';
                    fill = 1;
                    height = 1;
                    MOVE PROPERTY(document(d)) { caption = ''; autoSize = TRUE; panelCaptionVertical = TRUE; }
                }
            }
        }
    }
}

@extendFormEditable(inDocs);

NAVIGATOR {
    EGAISDocuments {
        NEW inDocs;
    }
}

// extend out docs
EXTEND FORM outDocs
    PROPERTIES(r) READONLY countInDocs

    OBJECTS i = InDoc
    PROPERTIES(i) READONLY idDocType, nameDocType, dateTime, url, document
    FILTERS outDoc(i) = r 
;

DESIGN outDocs {
    tabbedPane {
        MOVE BOX(i) {
            caption = CONCAT '', 'Входящие документы', '(' + countInDocs(r) +  ')';
        }
    }
}

// delete
delete 'Удалить из УТМ' (InDoc d) {
    LOCAL response = FILE();
    TRY {
        logToFile('egais', 'Удаление документа : ' + url(d));
        EXTERNAL HTTP DELETE url(d) TO response;
    } CATCH {
        fileToString(response());
        LOCAL error = TEXT();
        error() <- CONCAT '\n', 'Ошибка при формировании запроса на удаление к ЕГАИС :', url(d), messageCaughtException(), resultString();
        logToFile('egais', error());
        MESSAGE error();
    }
    
} CONFIRM;

EXTEND FORM inDocs
    PROPERTIES(d) delete GRID
;

// request in docs

replyId = DATA LOCAL STRING(INTEGER);
url = DATA LOCAL STRING(INTEGER);

regexpMatch = FORMULA NULL STRING PG 'SELECT (regexp_match($1, $2))[1]';
docTypeId (INTEGER i) = regexpMatch(url(i), '.*\\/opt\\/out\\/([a-zA-Z_0-9]*)\\/.*');
docType (INTEGER i) = docType[STRING](lower(docTypeId(i)));

FORM getInDocs FORMEXTID 'A'
    OBJECTS i = INTEGER EXTID 'url'
    PROPERTIES(i) url EXTID 'value', replyId EXTID 'replyId' ATTR 
;

inDocInterval 'Период очистки входящих документов в УТМ' = DATA INTEGER () PREREAD;

skipImport 'Не импортировать' = DATA BOOLEAN (DocType);
skipDelete 'Не удалять' = DATA BOOLEAN (DocType);
EXTEND FORM integrationData
    PROPERTIES() inDocInterval

    PROPERTIES(edt) skipImport, skipDelete
;

DESIGN integrationData {
    EGAISParams {
        MOVE PROPERTY(inDocInterval());
    }
}
inDoc = GROUP MAX InDoc d IF dateTime(d) >= subtractDay(currentDateTime(), OVERRIDE inDocInterval(), 14) BY utm(d), url(d);

getInDocs 'Получить входящие документы' (UTM u) {
    LOCAL response = FILE();
    TRY {
        timeoutHttp() <- 60000;
        EXTERNAL HTTP GET url(u) + '/opt/out' PARAMS exportFile() TO response;
    } CATCH {
        fileToString(response());
        LOCAL error = TEXT();
        error() <- CONCAT '\n', 'Ошибка при формировании запроса к ЕГАИС :', name(u), url(u), messageCaughtException(), resultString();
        logToFile('egais', error());
        MESSAGE error();
        RETURN;
    }
    
    IMPORT getInDocs XML FROM response();
        
    FOR docType(INTEGER i) AND NOT skipImport(docType(i)) AND NOT inDoc(u, url(i)) DO {
        NEWSESSION NESTED LOCAL {
            TRY {
                logToFile('egais', 'Получение документа : ' + url(i));
                EXTERNAL HTTP GET url(i) TO response;
                fileToString(response());
                NEW d = InDoc {
                    utm(d) <- u;
                    outDoc(d) <- outDoc(replyId(i));
                    docType(d) <- docType(i);
                    url(d) <- url(i);
                    document(d) <- resultString();
                    APPLY NESTED LOCAL;
                    IF NOT canceled() AND NOT skipDelete(docType(d)) THEN {
                        delete(d);
                    }
                }
            } CATCH {
                fileToString(response());
                LOCAL error = TEXT();
                error() <- CONCAT '\n', 'Ошибка при формировании запроса на получение документа к ЕГАИС :', url(i), messageCaughtException(), resultString();
                logToFile('egais', error());
                MESSAGE error();
            }
        }
    }
}

process 'Обработать' ABSTRACT LIST (InDoc);

processed 'Обработана' = DATA BOOLEAN (InDoc);
toProcess 'Требуется обработка' (InDoc d) = d IS InDoc AND NOT processed(d) MATERIALIZED INDEXED; 

processInDocs 'Обмен с ЕГАИС' () {
    FOR url(UTM u) DO
        getInDocs(u);
    
    FOR toProcess(InDoc d) ORDER d DO {
        process(d);
    }
}

EXTEND FORM inDocs
    PROPERTIES(d) READONLYIF isReadonly() processed
    PROPERTIES(d) process GRID READONLYIF NOT toProcess(d)
     
    PROPERTIES() processInDocs DRAW d TOOLBAR
;
