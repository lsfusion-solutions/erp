MODULE EGAISWayBillExchange;

REQUIRE EGAISWayBillDoc, EGAISClientImport, EGAISProductImport, EGAISTicket;

NAMESPACE EGAIS;

// out

EXTEND CLASS DocType { WayBill_v3 'ТТН (версия 3)' }
EXTEND CLASS DocType { WayBill_v4 'ТТН (версия 4)'}

CLASS WayBillOutDoc 'ТТН' : OutDoc;
docType(WayBillOutDoc r) += DocType.WayBill_v4 IF r IS WayBillOutDoc; 

wayBillOutDoc = GROUP LAST WayBillOutDoc a ORDER a WHERE a IS WayBillOutDoc BY wayBill(a);
commentsWayBillOutDoc 'Комментарий отправки' (WayBill t) = comments(wayBillOutDoc(t));

GROUP header EXTID 'wb:Header';

GROUP transport EXTID 'wb:Transport' : header;
GROUP content EXTID 'wb:Content';

GROUP informF2 EXTID 'wb:InformF2';
GROUP inform2MarkInfo EXTID 'ce:MarkInfo' : informF2;

GROUP amclist EXTID 'ce:amclist';

FORM wayBill_v4 FORMEXTID 'ns=http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01:WayBill_v4'
    PROPERTIES ATTR ='http://fsrar.ru/WEGAIS/CommonV3' EXTID 'xmlns:ce', ='http://fsrar.ru/WEGAIS/ClientRef_v2' EXTID 'xmlns:oref', ='http://fsrar.ru/WEGAIS/ProductRef_v2' EXTID 'xmlns:pref', ='http://fsrar.ru/WEGAIS/TTNSingle_v4' EXTID 'xmlns:wb', ='http://www.w3.org/2001/XMLSchema-instance' EXTID 'xmlns:xsi'
    
    OBJECTS w = WayBillOutDoc PANEL
    
    PROPERTIES =id(wayBill(w)) EXTID 'wb:Identity'
    
    PROPERTIES IN header =number(wayBill(w)) EXTID 'wb:NUMBER', 
                         =toDateISO(date(wayBill(w))) EXTID 'wb:Date', 
                         =toDateISO(shippingDate(wayBill(w))) EXTID 'wb:ShippingDate', 
                         ='WBInvoiceFromMe' EXTID 'wb:Type', 
                         =base(wayBill(w)) EXTID 'wb:Base', 
                         =note(wayBill(w)) EXTID 'wb:Note',
                         
                         =xml(shipper(wayBill(w))) EXTID 'wb:Shipper',
                         =xml(consignee(wayBill(w))) EXTID 'wb:Consignee'

    PROPERTIES IN transport =tranType(wayBill(w)) EXTID 'wb:TRAN_TYPE',
                            =IF changeOwnership(wayBill(w)) THEN 'NotChange' ELSE 'IsChange' EXTID 'wb:ChangeOwnership', 
                            =transportType(wayBill(w)) EXTID 'wb:TRANSPORT_TYPE', 
                            =tranCompany(wayBill(w)) EXTID 'wb:TRAN_COMPANY',
                            =transportRegNumber(wayBill(w)) EXTID 'wb:TRANSPORT_REGNUMBER',
                            =tranCompany(wayBill(w)) EXTID 'wb:TRAN_TRAILER',
                            =tranCustomer(wayBill(w)) EXTID 'wb:TRAN_CUSTOMER',
                            =tranDriver(wayBill(w)) EXTID 'wb:TRAN_DRIVER',
                            =tranLoadPoint(wayBill(w)) EXTID 'wb:TRAN_LOADPOINT',
                            =tranUnloadPoint(wayBill(w)) EXTID 'wb:TRAN_UNLOADPOINT',
                            =tranRedirect(wayBill(w)) EXTID 'wb:TRAN_REDIRECT',
                            =tranForwarder(wayBill(w)) EXTID 'wb:TRAN_FORWARDER' 
    
    OBJECTS p = WayBillPosition EXTID 'wb:Position' IN content
    
    PROPERTIES identity(p) EXTID 'wb:Identity',
               =xml(product(p)) EXTID 'wb:Product', 
               quantity(p) EXTID 'wb:Quantity', 
               price(p) EXTID 'wb:Price', 
               idF1Reg(p) EXTID 'wb:FARegId'
    FILTERS wayBill(p) = wayBill(w)

    PROPERTIES IN informF2 
                 idF2Reg(p) EXTID 'ce:F2RegId'

    OBJECTS boxpos = Box EXTID 'ce:boxpos' IN inform2MarkInfo
    PROPERTIES(boxpos) id EXTID 'ce:boxnumber'
    FILTERS countMarkCodes(p, boxpos)
    
    OBJECTS amc = WayBillMark EXTID 'ce:amc' IN amclist 
    PROPERTIES(amc) idMarkCode EXTID 'value'
    FILTERS wayBillPosition(amc) = p,
            box(amc) = boxpos
;

submitWayBill (WayBillOutDoc w) {
    EXPORT wayBill_v4 OBJECTS w = w XML;
    submit(w, exportFile());
}

submitWayBill (WayBill w) {
    NEW wd = WayBillOutDoc {
        client(wd) <- shipper(w);
        wayBill(wd) <- w;
        submitWayBill(wd);
    }
}

// in
GROUP wayBill_v4 EXTID 'ns:WayBill_v4' : document;
GROUP wayBillHeader EXTID 'wb:Header' : wayBill_v4;

GROUP wayBillShipper EXTID 'wb:Shipper' : wayBillHeader;
GROUP wayBillShipperUL EXTID 'oref:UL' : wayBillShipper;

GROUP wayBillContent EXTID 'wb:Content' : wayBill_v4;

NUMBER = DATA LOCAL STRING();
date = DATA LOCAL DATE();
shippingDate = DATA LOCAL DATE();

shipper = DATA LOCAL STRING();
consignee = DATA LOCAL STRING();

base = DATA LOCAL STRING();

GROUP wbProduct EXTID 'wb:Product';

price = DATA LOCAL NUMERIC[16,4](INTEGER);
F1RegId = DATA LOCAL STRING(INTEGER);

F2RegId = DATA LOCAL STRING(INTEGER);

positionBox = DATA LOCAL INTEGER (INTEGER);
boxnumber = DATA LOCAL STRING (INTEGER);

boxposAmc = DATA LOCAL INTEGER (INTEGER);

FORM inWayBill_v4 FORMEXTID 'ns:Documents'
    PROPERTIES() IN wayBill_v4 identity EXTID 'wb:Identity'

    PROPERTIES() IN wayBillHeader NUMBER EXTID 'wb:NUMBER', 
                           date EXTID 'wb:Date', 
                           shippingDate EXTID 'wb:ShippingDate', 
                           shipper EXTID 'wb:Shipper',
                           shipperClientRegId IN wayBillShipperUL EXTID 'oref:ClientRegId',
                           consignee EXTID 'wb:Consignee', 
                           base EXTID 'wb:Base',
                           note EXTID 'wb:Note'

    OBJECTS position = INTEGER EXTID 'wb:Position' IN wayBillContent
    
    PROPERTIES(position) product EXTID 'wb:Product',
                         productCode IN wbProduct EXTID 'pref:AlcCode', 
                         quantity EXTID 'wb:Quantity', 
                         price EXTID 'wb:Price', 
                         positionIdentity EXTID 'wb:Identity', 
                         F1RegId EXTID 'wb:FARegId'
    
    PROPERTIES(position) IN informF2 F2RegId EXTID 'ce:F2RegId'
    
    OBJECTS boxpos = INTEGER EXTID 'ce:boxpos' IN inform2MarkInfo
    PROPERTIES(boxpos) boxnumber EXTID 'ce:boxnumber'
    FILTERS positionBox(boxpos) = position
    
    OBJECTS amc = INTEGER EXTID 'ce:amc' IN amclist 
    PROPERTIES(amc) amc EXTID 'value'
    FILTERS boxposAmc(amc) = boxpos                              
;

process (InDoc d) + {
    IF docType(d) = DocType.WayBill_v3 OR docType(d) = DocType.WayBill_v4 THEN {
        NEWSESSION {
            stringToFile(replace(document(d), 'WayBill_v3', 'WayBill_v4'));
            IMPORT inWayBill_v4 XML FROM resultFile();
            
            IF (identity() OR NUMBER() OR date()) THEN {
                IF NOT wayBill(client(shipperClientRegId()), (CONCAT '/', identity(), NUMBER(), date())) THEN {
                    NEW w = WayBill {
                        wayBill(d) <- w;
                        
                        id(w) <- identity();
                        
                        number(w) <- NUMBER();
                        date(w) <- date();
                        shippingDate(w) <- shippingDate();
                        
                        importClient(shipper());
                        shipper(w) <- client(clientRegId());
                        
                        importClient(consignee());
                        consignee(w) <- client(clientRegId());
                        
                        base(w) <- base();
                        note(w) <- note();
                        
                        FOR productCode(INTEGER i) DO { // AND NOT product(productCode(i)) DO {
                            importProduct(product(i));
                        }
                        
                        FOR INTEGER i = [GROUP MAX INTEGER j BY F1RegId(j)](STRING f1Reg) AND NOT f1Reg(f1Reg) DO NEW r = F1Reg {
                            id(r) <- f1Reg;
                            product(r) <- product(productCode(i));
                        } 
    
                        FOR F2RegId(INTEGER i) AND NOT f2Reg(F2RegId(i)) DO NEW r = F2Reg {
                            id(r) <- F2RegId(i);
                            f1Reg(r) <- f1Reg(F1RegId(i));
                            client(r) <- shipper(w);
                        } 
    
                        FOR [GROUP SUM 1 BY boxnumber(INTEGER i)](STRING id) AND NOT box(id) DO NEW b = Box {
                            id(b) <- id;
                        } 
    
                        FOR amc(INTEGER i) AND NOT markCode(amc(i)) DO NEW m = MarkCode {
                            id(m) <- amc(i);
                        } 
                        
                        FOR product(INTEGER i) NEW p = WayBillPosition DO {
                            wayBill(p) <- w;
                            
                            product(p) <- product(productCode(i));
                            
                            identity(p) <- positionIdentity(i);
                                                    
                            quantity(p) <- quantity(i);                        
                            price(p) <- price(i);
                            
                            f1Reg(p) <- f1Reg(F1RegId(i));                        
                            f2Reg(p) <- f2Reg(F2RegId(i));
                            
                            FOR positionBox(boxposAmc(INTEGER ci)) = i NEW m = WayBillMark DO {
                                wayBillPosition(m) <- p;
                                markCode(m) <- markCode(amc(ci));
                                box(m) <- box(boxnumber(boxposAmc(ci)));
                            }
                        }
                    }
                }
                
                processed(d) <- TRUE;
                APPLY;
            }
        }
    }
}