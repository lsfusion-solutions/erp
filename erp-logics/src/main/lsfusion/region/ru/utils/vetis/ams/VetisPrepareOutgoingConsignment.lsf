MODULE VetisPrepareOutgoingConsignment;

REQUIRE VetisAMSReceiveResponse, VetisOutgoingConsignment, VetisDocumentImport;

NAMESPACE Vetis;

CLASS PrepareOutgoingConsignmentRequest 'Оформление транспортной партии' : ApplicationRequest;

allowDeleteOutgoingConsignment 'Разрешить удаление исходящих партий' = DATA BOOLEAN ();

EXTEND FORM integrationData
    PROPERTIES () allowDeleteOutgoingConsignment
;

DESIGN integrationData {
    vetis {
        MOVE PROPERTY (allowDeleteOutgoingConsignment());
    }
}

in = DATA BOOLEAN (PrepareOutgoingConsignmentRequest, OutgoingConsignment);
CONSTRAINT DROPPED(in(PrepareOutgoingConsignmentRequest r, OutgoingConsignment c)) AND NOT allowDeleteOutgoingConsignment()
    MESSAGE 'Запрещено удалять исходящую партию для созданной заявки';

localTransactionId (PrepareOutgoingConsignmentRequest r) = LONG(r AS PrepareOutgoingConsignmentRequest);

GROUP consignor EXTID 'vd=http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2:consignor';
GROUP consignorBusinessEntity EXTID 'dt=http://api.vetrf.ru/schema/cdm/dictionary/v2:businessEntity' : consignor;
GROUP consignorEnterprise EXTID 'dt=http://api.vetrf.ru/schema/cdm/dictionary/v2:enterprise' : consignor;
GROUP consignee EXTID 'vd=http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2:consignee';
GROUP consigneeBusinessEntity EXTID 'dt=http://api.vetrf.ru/schema/cdm/dictionary/v2:businessEntity' : consignee;
GROUP consigneeEnterprise EXTID 'dt=http://api.vetrf.ru/schema/cdm/dictionary/v2:enterprise' : consignee;

GROUP unit EXTID 'vd:unit'; 
GROUP sourceStockEntry EXTID 'vd:sourceStockEntry'; 

GROUP transportInfo EXTID 'vd=http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2:transportInfo';
GROUP transportNumber EXTID 'vd:transportNumber' : transportInfo;

FORM prepareOutgoingConsignmentRequest FORMEXTID 'merc=http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2:prepareOutgoingConsignmentRequest'
    OBJECTS r = PrepareOutgoingConsignmentRequest PANEL
    
    PROPERTIES(r) localTransactionId EXTID 'merc:localTransactionId'
    PROPERTIES(r) IN initiator loginMercury EXTID 'vd=http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2:login'

    OBJECTS d = OutgoingConsignment EXTID 'merc:delivery'
    FILTERS in(r, d)

    PROPERTIES =formatT(deliveryDate(d)) EXTID 'vd=http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2:deliveryDate'
    
    PROPERTIES =guid(consignorBusinessEntity(d)) IN consignorBusinessEntity EXTID 'bs=http://api.vetrf.ru/schema/cdm/base:guid',
               =guid(consignorEnterprise(d)) IN consignorEnterprise EXTID 'bs=http://api.vetrf.ru/schema/cdm/base:guid',
               =guid(consigneeBusinessEntity(d)) IN consigneeBusinessEntity EXTID 'bs=http://api.vetrf.ru/schema/cdm/base:guid',
               =guid(consigneeEnterprise(d)) IN consigneeEnterprise EXTID 'bs=http://api.vetrf.ru/schema/cdm/base:guid'

    OBJECTS c = OutgoingConsignment EXTID 'vd=http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2:consignment'
    PROPERTIES = 'id' + STRING(c) EXTID 'id' ATTR
    
    PROPERTIES volume(c) EXTID 'vd:volume', 
               =guid(unit(stockEntry(c))) IN unit EXTID 'bs=http://api.vetrf.ru/schema/cdm/base:guid',
               =guidStockEntry(c) IN sourceStockEntry EXTID 'bs=http://api.vetrf.ru/schema/cdm/base:guid'

    FILTERS c = d
    
    PROPERTIES = 1 IF d IS OutgoingConsignment EXTID 'vd:transportType' IN transportInfo,
               = sid(truck(d)) EXTID 'vd:vehicleNumber' IN transportNumber 
               
    PROPERTIES = transportStorageType(d) EXTID 'vd=http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2:transportStorageType'
    
    PROPERTIES IN waybill
              = waybillSeries(d) EXTID 'vd:issueSeries',
              = waybillNumber(d) EXTID 'vd:issueNumber',
              = toDateISO(waybillDate(d)) EXTID 'vd:issueDate',
              = 1 IF d IS OutgoingConsignment EXTID 'vd:type'

    PROPERTIES IN vetCertificateAuthentication
               = guid(lastPurpose(stockEntry(d))) IN authenticationPurpose EXTID 'bs=http://api.vetrf.ru/schema/cdm/base:guid', 
               = TRUE IF d IS OutgoingConsignment EXTID 'vd:cargoInspected',
               = 'VSEFULL' IF d IS OutgoingConsignment EXTID 'vd:cargoExpertized',
               = 'Местность благополучна' IF d IS OutgoingConsignment EXTID 'vd:locationProsperity'
               
    PROPERTIES IN relatedDocument
               //updSeries = waybillSeries(d) EXTID 'vd:issueSeries',
               = waybillNumber(d) IF waybillType(d)=23 EXTID 'vd:issueNumber',
               = toDateISO(waybillDate(d)) IF waybillType(d)=23 EXTID 'vd:issueDate',
               = waybillType(d) IF waybillType(d)=23 EXTID 'vd:type',
               = 1 IF d IS OutgoingConsignment AND waybillType(d)=23 EXTID 'vd:relationshipType'             
;

in 'Вкл' = DATA LOCAL BOOLEAN (OutgoingConsignment);

lastRequest (OutgoingConsignment o) = GROUP LAST PrepareOutgoingConsignmentRequest r ORDER r WHERE in(r, o) MATERIALIZED;
issueDateLastRequest 'Время заявки' (OutgoingConsignment o) = issueDate(lastRequest(o));
nameStatusLastRequest 'Статус заявки' (OutgoingConsignment o) = nameStatus(lastRequest(o));
errorLastRequest 'Ошибка заявки' (OutgoingConsignment o) = error(lastRequest(o));

toProcess 'К отправке' (OutgoingConsignment o) = o IS OutgoingConsignment AND 
        NOT notCompleted(lastRequest(o)) AND // не обрабатывается заявка 
        (NOT succeeded(lastRequest(o)) OR // не успешно обработана заявка 
         status(vetDocument(o)) = VetDocumentStatus.WITHDRAWN) // или документ аннулировали
        MATERIALIZED INDEXED;  

in = GROUP SUM 1 IF in(OutgoingConsignment c) BY transportStorageType(c); 

processOutgoingConsignment () {
    NEWSESSION NESTED (in[OutgoingConsignment]) {
        FOR in(STRING storageType) DO 
            NEW r = PrepareOutgoingConsignmentRequest {
                businessEntity(r) <- GROUP MAX consignorBusinessEntity(OutgoingConsignment oc) IF in(oc) AND transportStorageType(oc)=storageType;
                in(r, OutgoingConsignment oc) <- TRUE WHERE in(oc) AND transportStorageType(oc)=storageType;
                EXPORT prepareOutgoingConsignmentRequest OBJECTS r = r XML;
            
                submit(r, exportFile());
            }
        APPLY;    
    }
}

process 'Отправить в Ветис' (OutgoingConsignment c) {
    IF NOT GROUP SUM 1 IF in(OutgoingConsignment oc) THEN
        in(c) <- TRUE;
    processOutgoingConsignment();
    in(OutgoingConsignment oc) <- NULL;
}

EXTEND FORM outgoingConsignments
    PROPERTIES(c) READONLY issueDateLastRequest, nameStatusLastRequest 

    PROPERTIES(c) in FIRST
    PROPERTIES(c) process READONLYIF NOT toProcess(c) GRID

    EXTEND FILTERGROUP status
        FILTER 'К отправке' toProcess(c) DEFAULT
; 

// process
stockEntryGuid = DATA LOCAL STRING(INTEGER);
stockEntryActive = DATA LOCAL BOOLEAN(INTEGER);

stockEntryVolume = DATA LOCAL NUMERIC[16,5](INTEGER);

stockEntryQualifier = DATA LOCAL STRING(INTEGER); 
stockEntryVetDocumentUuid = DATA LOCAL STRING(INTEGER); 

FORM processOutgoingConsignmentResponse FORMEXTID 'merc=http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2:processOutgoingConsignmentResponse'
    OBJECTS i = INTEGER EXTID 'merc:stockEntry'
    PROPERTIES(i) stockEntryGuid EXTID 'bs=http://api.vetrf.ru/schema/cdm/base:guid',
                  stockEntryActive EXTID 'bs=http://api.vetrf.ru/schema/cdm/base:active'
    PROPERTIES(i) IN batch
                     stockEntryVolume EXTID 'vd:volume'

    OBJECTS j = INTEGER EXTID 'merc:vetDocument'
    PROPERTIES(j) stockEntryQualifier EXTID 'qualifier' ATTR,
                  stockEntryVetDocumentUuid EXTID 'bs:uuid',
                  vetDocument EXTID 'value:full'
                       
;

process (PrepareOutgoingConsignmentRequest r) + {
    NEWSESSION {
        stringToFile(response(r));
        IMPORT processOutgoingConsignmentResponse XML FROM resultFile();

        FOR guid(StockEntry s) = stockEntryGuid(INTEGER i) DO {
            active(s) <- stockEntryActive(i);

            volume(s) <- stockEntryVolume(i);
        }
        
        FOR vetDocument(INTEGER i) DO
            importVetDocument(vetDocument(i));

//        FOR stockEntryVetDocumentUuid(INTEGER i) AND NOT vetDocument(stockEntryVetDocumentUuid(i)) NEW d = VetDocument DO {
//            uuid(d) <- stockEntryVetDocumentUuid(i);
//        }
       
        FOR in(r, OutgoingConsignment c) AND ('id' + STRING(c)) = stockEntryQualifier(INTEGER i) DO
            vetDocument(c) <- vetDocument(stockEntryVetDocumentUuid(i));

        processed(r) <- TRUE;
        APPLY;
    }
}

META defineDocumentOutgoingProcess (doc, obj)
    vetDocument 'Код ВСД' (###doc##Detail d, StockEntry se) = vetDocument(outgoingConsignment(d, se));
    uuidVetDocument 'Код ВСД' (###doc##Detail d, StockEntry se) = uuid(vetDocument(d, se));
    nameStatusVetDocument 'Статус ВСД' (###doc##Detail d, StockEntry se) = nameStatus(vetDocument(d, se));
    
    issueDateLastRequest 'Время заявки' (###doc##Detail vd, StockEntry se) = issueDateLastRequest(outgoingConsignment(vd, se));
    nameStatusLastRequest 'Статус заявки' (###doc##Detail vd, StockEntry se) = nameStatusLastRequest(outgoingConsignment(vd, se));
    errorLastRequest 'Ошибка заявки' (###doc##Detail vd, StockEntry se) = errorLastRequest(outgoingConsignment(vd, se));
    
    toProcess (###doc##Detail vd, StockEntry se) = toProcess(outgoingConsignment(vd, se));
    toProcess (###doc i) = GROUP SUM 1 IF toProcess(###doc##Detail vd, StockEntry se) AND doc(vd) = i; 
    process 'Отправить в Ветис' (###doc##Detail vd, StockEntry se) { process(outgoingConsignment(vd, se)); }
    
    process 'Отправить в Ветис' (###doc i) {
        in(OutgoingConsignment c) <- toProcess(c) IF 
                                        GROUP SUM 1 IF outgoingConsignment(###doc##Detail d, StockEntry se) = c AND
                                                       doc(d) = i;
        IF GROUP SUM 1 IF in(OutgoingConsignment c) THEN
            processOutgoingConsignment(); 
    }
    
    fillVolumeApply 'Заполнить' (###doc i) {
        fillVolume(i);
        APPLY;
    }
    
    EXTEND FORM doc##s
        OBJECTS vse = (vd = ###doc##Detail, se = StockEntry)
        PROPERTIES(vd) READONLY index, idBarcodeSku, idSku, nameSku, shortNameUOMSku 
        PROPERTIES(se) READONLY guid, number, nameProductItem
        PROPERTIES(vd, se) READONLY volume
        ORDERS index(vd)
        
        FILTERS doc(vd) = obj, volume(vd, se)
    
        PROPERTIES(obj) process DRAW vse TOOLBAR SHOWIF toProcess(obj)
        PROPERTIES(obj) fillVolumeApply DRAW vse TOOLBAR
         
        PROPERTIES(vd, se) issueDateLastRequest, nameStatusLastRequest, errorLastRequest PANEL,
                           process READONLYIF NOT toProcess(outgoingConsignment(vd, se)) GRID
        
        PROPERTIES(vd, se) READONLY uuidVetDocument, nameStatusVetDocument
    ;
    
    DESIGN doc##s {
        documentDetail {
            NEW vetis {
                caption = 'Ветис';
                MOVE BOX(vse);
                MOVE PROPERTY(errorLastRequest(vd, se)) {
                    alignment = STRETCH;
                    panelCaptionVertical = TRUE;
                }
            }
        }
    }
END