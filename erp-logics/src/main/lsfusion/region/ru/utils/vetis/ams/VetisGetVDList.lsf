MODULE VetisGetVDList;

REQUIRE Time, VetisAMSSubmitRequest, VetisAMSReceiveResponse, 
        VetisDocumentImport, VetisDocument, VetisEnterprise;

NAMESPACE Vetis;

CLASS VetDocumentListRequest 'Получение списка ВСД предприятия' : ApplicationRequest;

changes 'Изменившиеся' = DATA BOOLEAN (VetDocumentListRequest);

type = DATA VetDocumentType (VetDocumentListRequest);
idType (VetDocumentListRequest r) = id(type(r));
nameType 'Тип' (VetDocumentListRequest r) = name(type(r));

status = DATA VetDocumentStatus (VetDocumentListRequest);
idStatus (VetDocumentListRequest r) = id(status(r));
nameStatus 'Статус' (VetDocumentListRequest r) = name(status(r));

beginDate 'Дата с' = DATA DATETIME (VetDocumentListRequest);
endDate 'Дата по' = DATA DATETIME (VetDocumentListRequest);

enterprise = DATA Enterprise (VetDocumentListRequest);
nameEnterprise 'Площадка' (VetDocumentListRequest r) = name(enterprise(r));
CONSTRAINT SETCHANGED(enterprise(VetDocumentListRequest r)) AND NOT own(owner(enterprise(r)))
    CHECKED BY enterprise[VetDocumentListRequest]
    MESSAGE 'Получение всех ВСД возможно только по собственным площадкам';

// export
GROUP listOptions EXTID 'bs=http://api.vetrf.ru/schema/cdm/base:listOptions';
offset 'Начальная запись' = DATA INTEGER(VetDocumentListRequest);
count 'Кол-во записей' = DATA INTEGER(VetDocumentListRequest);

GROUP issueDateInterval EXTID 'vd=http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2:issueDateInterval';
GROUP updateDateInterval EXTID 'bs=http://api.vetrf.ru/schema/cdm/base:updateDateInterval';
formatBeginDate (VetDocumentListRequest r) = formatT(beginDate(r));
formatEndDate (VetDocumentListRequest r) = formatT(endDate(r));

localTransactionId (VetDocumentListRequest r) = LONG(r AS VetDocumentListRequest);

enterpriseGuid (VetDocumentListRequest r) = guid(enterprise(r));

FORM getVetDocumentListRequest FORMEXTID 'merc=http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2:getVetDocumentListRequest' 
    OBJECTS r = VetDocumentListRequest PANEL
    PROPERTIES(r) localTransactionId EXTID 'merc:localTransactionId' 
    PROPERTIES(r) IN initiator loginMercury EXTID 'vd=http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2:login'

    PROPERTIES(r) IN listOptions count EXTID 'bs:count', offset EXTID 'bs:offset'
    PROPERTIES(r) idType EXTID 'vd=http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2:vetDocumentType', 
                  idStatus EXTID 'vd=http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2:vetDocumentStatus' 

    PROPERTIES IN issueDateInterval 
                  ibd = formatBeginDate(r) IF NOT changes(r) EXTID 'bs=http://api.vetrf.ru/schema/cdm/base:beginDate', 
                  ied = formatEndDate(r) IF NOT changes(r) EXTID 'bs=http://api.vetrf.ru/schema/cdm/base:endDate'
    PROPERTIES IN updateDateInterval
                  ubd = formatBeginDate(r) IF changes(r) EXTID 'bs=http://api.vetrf.ru/schema/cdm/base:beginDate', 
                  ued = formatEndDate(r) IF changes(r) EXTID 'bs=http://api.vetrf.ru/schema/cdm/base:endDate'

    PROPERTIES(r) enterpriseGuid EXTID 'dt=http://api.vetrf.ru/schema/cdm/dictionary/v2:enterpriseGuid'
                  
;

// dialog
FORM getVetDocumentListRequestParams 'Параметры списка документов'
    OBJECTS r = VetDocumentListRequest PANEL
    PROPERTIES(r) changes, nameType, nameStatus, beginDate, endDate, nameEnterprise, offset, count
;
DESIGN getVetDocumentListRequestParams {
    PROPERTY(nameEnterprise(r)) { notNull = TRUE; }
}

getVetDocumentListRequest 'Получить список документов' (VetDocumentListRequest r) {
    EXPORT getVetDocumentListRequest OBJECTS r = r XML;
    IF changes(r) THEN {
        fileToString(exportFile());
        stringToFile(replace(resultString(), 'getVetDocumentListRequest', 'getVetDocumentChangesListRequest'));
        submit(r, resultFile());
    } ELSE
        submit(r, exportFile());
}

getVetDocumentListRequest 'Получить список ВСД' () {
    NEWSESSION {
        NEW r = VetDocumentListRequest {
            offset(r) <- 0;
            count(r) <- 1000;
            DIALOG getVetDocumentListRequestParams OBJECTS r = r DO {
                businessEntity(r) <- owner(enterprise(r));
                getVetDocumentListRequest(r);
                APPLY;
            }
        }
    }
}

EXTEND FORM applicationRequests
    PROPERTIES() getVetDocumentListRequest
;

DESIGN applicationRequests {
    actions {
        MOVE PROPERTY(getVetDocumentListRequest());
    }
}

// process
GROUP vetDocumentList EXTID 'vd=http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2:vetDocumentList';

FORM getVetDocumentListResponse FORMEXTID 'ns1=http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2:getVetDocumentListResponse'
    OBJECTS vetDocument = INTEGER EXTID 'vd:vetDocument' IN vetDocumentList
    PROPERTIES(vetDocument) vetDocument EXTID 'value:full'
;

process (VetDocumentListRequest r) + {
    NEWSESSION {
        stringToFile(replace(response(r), 'getVetDocumentChangesListResponse', 'getVetDocumentListResponse'));
        IMPORT getVetDocumentListResponse XML FROM resultFile();
        FOR vetDocument(INTEGER i) DO {
            importVetDocument(vetDocument(i));
        }

        processed(r) <- TRUE;
        APPLY;
    }
}

// interval changes
getVDListInterval 'Запрашивать изменененные ВСД за интервал (ч.)' = DATA INTEGER ();

EXTEND FORM integrationData PROPERTIES() getVDListInterval;
DESIGN integrationData { vetis { MOVE PROPERTY(getVDListInterval()); } }

getVetDocumentChangesListRequest 'Получить изменившиеся ВСД' () {
    FOR own(owner(Enterprise e)) DO { 
        NEWSESSION {
            NEW r = VetDocumentListRequest {
                businessEntity(r) <- owner(e);
                changes(r) <- TRUE;
                beginDate(r) <- subtractSeconds(currentDateTime(), (OVERRIDE getVDListInterval(), 72) * 3600);
                enterprise(r) <- e;

                getVetDocumentListRequest(r);
                APPLY;
            }
        }
    }
}

EXTEND FORM applicationRequests
    PROPERTIES() getVetDocumentChangesListRequest
;
DESIGN applicationRequests {
    actions {
        MOVE PROPERTY(getVetDocumentChangesListRequest());
    }
}

@defineLog (VetDocumentListRequest, 'списка ВСД предприятий', log, issued);