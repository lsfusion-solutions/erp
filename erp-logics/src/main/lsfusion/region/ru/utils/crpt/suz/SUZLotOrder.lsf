MODULE SUZLotOrder;

REQUIRE SUZLegalEntity, LotOrder, CryptoProLegalEntity;

NAMESPACE SUZ;

quantityLotLimit 'Лимит количества заказываемых марок по строке' = DATA INTEGER ();
CONSTRAINT quantity(LotOrderDetail d) > quantityLotLimit()
    MESSAGE 'Коливество заказываемых марок превышает лимит';
    
EXTEND FORM integrationData
    PROPERTIES() quantityLotLimit
;

DESIGN integrationData {
    SUZ {
        MOVE PROPERTY(quantityLotLimit());
    }
}

// release method type
CLASS ReleaseMethodType 'Способ выпуска товаров в оборот' {
    PRODUCTION 'Производство в РФ',
    IMPORT_ 'Ввезен в РФ (Импорт)',
    REMAINS 'Маркировка остатков',
    CROSSBORDER 'Трансграничная торговля',
    REMARK 'Перемаркировка'
}
id 'Код' (ReleaseMethodType o) = STRING[100](rtrim(getWord(staticName(o),'.',2),'_')) IF o IS ReleaseMethodType CHARWIDTH 10;
name 'Наименование' (ReleaseMethodType o) = staticCaption(o) IF o IS ReleaseMethodType CHARWIDTH 15;
    
FORM dialogReleaseMethodTypes 'Способ выпуска товаров в оборот'
    OBJECTS o = ReleaseMethodType
    PROPERTIES(o) READONLY name
        
    LIST ReleaseMethodType OBJECT o
;

selected 'Отм' = DATA LOCAL BOOLEAN (LotOrder);
filterLotOrders = DATA LOCAL BOOLEAN (LotOrder);

FORM dialogLotOrders 'Выбор заказов'
    OBJECTS o = LotOrder
    PROPERTIES(o) selected
    PROPERTIES(o) READONLY isPosted, canceled, id, number, series, date, time,
        nameType, nameStock, note, countLotOrderDetail, quantityLotOrderDetail
    PROPERTIES(o) NEWSESSION NEW, EDIT, DELETE SHOWIF NOT isPosted(o)
    FILTERS filterLotOrders(o)

    OBJECTS d = LotOrderDetail
    PROPERTIES(d) READONLY index, idBarcodeSku, idSku, nameSku, shortNameUOMSku, gtin, quantity
    FILTERS lotOrder(d) = o
;

releaseMethodType 'Способ выпуска товаров в оборот' = DATA ReleaseMethodType (LotOrder) NONULL;
nameReleaseMethodType 'Способ выпуска товаров в оборот' (LotOrder o) = name(releaseMethodType(o));

EXTEND FORM lotOrder
    PROPERTIES(o) nameReleaseMethodType
;

DESIGN lotOrder {
    headerRow3 {
        MOVE PROPERTY(nameReleaseMethodType(o));
    }
}

lotOrderUrl (LotOrder o) = url() + '/api/v2/' + idType(o);

DESIGN lotOrders {
    tabbedPane {
        NEW suz {
            caption = 'СУЗ';
        }
    }
}

isBundle = ABSTRACT BOOLEAN (STRING[14]);
isGroup = ABSTRACT BOOLEAN (STRING[14]);

FORM export
    OBJECTS o = LotOrder PANEL
    
    PROPERTIES contactPerson = name(currentUser()), releaseMethodType = id(releaseMethodType(o)), createMethodType = 'SELF_MADE',
               remainsAvailable = TRUE, remainsImport = 'false'
    
    OBJECTS products = STRING[14]
    PROPERTIES gtin = VALUE(products), 
               quantity = quantity(o, products), 
               serialNumberType = 'OPERATOR' IF products IS STRING[14], 
               templateId = 10 IF products IS STRING[14], 
               cisType = OVERRIDE 'BUNDLE' IF isBundle(products), 'GROUP' IF isGroup(products), 'UNIT' IF products IS STRING[14]
    FILTERS quantity(o, products)
;

suzToken = DATA LOCAL STRING ();
suzHeaders (TEXT name) = CASE
    WHEN name = 'Host' THEN substrFrom(url(), 9) // СУЗ требует этот заголовок, но не проверяет содержимое
    WHEN name = 'clientToken' THEN suzToken();

suzSignedHeaders (TEXT name) = CASE
    WHEN name = 'X-Signature' AND signature() THEN replace(replace(encodedSignature(), '\n', ''), ' ', '')
    ELSE suzHeaders(name);

// export
exception 'Сообщение' = DATA TEXT (LotOrder);
EXTEND FORM lotOrders
    PROPERTIES(o) READONLY exception PANEL SHOWIF exception(o)
;
DESIGN lotOrders {
    suz {
        MOVE PROPERTY(exception(o)) { panelCaptionVertical = TRUE; fill = 1; };
    }
}

handleException (LotOrder o, FILE exception) {
    logToFile('suz', messageCaughtException());
    
    logToFile('suz', exception);
    fileToString(exception);
    MESSAGE CONCAT ' ', 'Ошибка при обращении к СУЗ', messageCaughtException();

    NEWSESSION NESTED (messageCaughtException, resultString) {
        exception(o) <- CONCAT ', ', messageCaughtException(), resultString();
        APPLY;
    }
}

export 'Отослать в СУЗ' (LotOrder o) {
    IF (GROUP SUM 1 IF lotOrder(LotOrderDetail d) = o AND NOT quantity(d) > 0) THEN {
        MESSAGE 'В документе есть строки с неправильным количеством'; 
        RETURN;
    }
    
    NEWSESSION {
        EXPORT export OBJECTS o = o JSON;
        
        sign(exportFile(), TRUE, legalEntityStock(o));
        
        LOCAL result = FILE();
        getToken(legalEntityStock(o));
        suzToken() <- token(legalEntityStock(o));

        exception(o) <- NULL; 
        TRY {
            EXTERNAL HTTP POST lotOrderUrl(o) + '/orders?omsId=' + omsId(legalEntityStock(o)) HEADERS suzSignedHeaders PARAMS exportFile() TO result;
        } CATCH {
            handleException(o, result());
            RETURN;
        }
        
        LOCAL orderId = STRING[100] ();
        IMPORT JSON FROM result() TO() orderId;
        id(o) <- orderId();
        APPLY NESTED (selected[LotOrder], filterLotOrders[LotOrder]);

        MESSAGE 'Документ успешно отослан. Присвоен код : ' + id(o);
    } 
}

export 'Отослать в СУЗ' () {
    selected(LotOrder o) <- NULL;
    filterLotOrders(LotOrder o) <- NOT id(o) AND pending(o);
    DIALOG dialogLotOrders DO {
        FOR selected(LotOrder o) DO export(o);
    }
    IF NOT GROUP SUM 1 IF selected(LotOrder o) THEN MESSAGE 'Не выбран не один документ';
}

EXTEND FORM lotOrders
    PROPERTIES PANEL export(o) SHOWIF NOT id(o) AND pending(o)
    PROPERTIES PANEL export()
;

DESIGN lotOrders {
    suz {
        MOVE PROPERTY(export(o));
        MOVE PROPERTY(export());
    }
}

// constraint
CONSTRAINT (CHANGED(sku(LotOrderDetail d)) OR CHANGED(quantity(d))) AND (PREV(id(lotOrder(d))) OR id(lotOrder(d)))
    MESSAGE 'Запрещено редактировать заказы марок после их отсылки в СУЗ';

// status

rejectionReason 'Причина отмены' = DATA STRING (LotOrder); 

bufferStatus 'Статус' = DATA STRING (LotOrderDetail);

availableCodes 'Доступно марок' = DATA INTEGER (LotOrderDetail);
availableCodes 'Доступно марок' (LotOrder o) = GROUP SUM availableCodes(LotOrderDetail d) IF lotOrder(d) = o MATERIALIZED;

checkStatus 'Проверить статус' (LotOrder o) {
    LOCAL NESTED statusMessage = STRING();
    statusMessage() <- '';
    NEWSESSION {
        FOR quantity(o, STRING[14] gtin) DO {
            LOCAL result = FILE();
            getToken(legalEntityStock(o));
            suzToken() <- token(legalEntityStock(o));
            
            exception(o) <- NULL;
            TRY {
                EXTERNAL HTTP GET lotOrderUrl(o) + '/buffer/status?omsId=' + omsId(legalEntityStock(o)) + '&orderId=' + id(o) + '&gtin=' + gtin HEADERS suzHeaders TO result;
            } CATCH {
                handleException(o, result());
                RETURN;
            }
             
            
            LOCAL bufferStatus = STRING ();
            LOCAL rejectionReason = STRING ();
            LOCAL availableCodes = INTEGER ();
            IMPORT JSON FROM result() TO() bufferStatus, rejectionReason, availableCodes;
            
            IF bufferStatus() = 'REJECTED' THEN {
                canceled(o) <- TRUE;
                rejectionReason(o) <- rejectionReason();
                APPLY;
                RETURN;
            }
            
            bufferStatus(LotOrderDetail d) <- bufferStatus() WHERE lotOrder(d) = o AND gtin(d) = gtin;
            IF bufferStatus() = 'ACTIVE' THEN {
                LOCAL lotOrder = LotOrder ();
                LOCAL gtin = STRING[14] ();
                lotOrder() <- o;
                gtin() <- gtin;
                availableCodes(LotOrderDetail d) <- (PARTITION UNGROUP availableCodes
                                                              LIMIT quantity(d) IF lotOrder(d) = lotOrder() AND gtin(d) = gtin()
                                                              ORDER d) WHERE lotOrder(d) = o AND gtin(d) = gtin;
            }
            statusMessage() <- statusMessage() + (CONCAT ' ', 'Товар', gtin, ', статус :', bufferStatus(), '\n');
        }
        APPLY;
    }
    MESSAGE statusMessage();
}

EXTEND FORM lotOrders
    PROPERTIES(o) READONLY availableCodes AFTER quantityLotOrderDetail(o) BACKGROUND RGB(224,255,224) IF quantityLotOrderDetail(o) = availableCodes(o) AND pending(o)

    PROPERTIES PANEL checkStatus(o) SHOWIF id(o) AND pending(o), 
                     rejectionReason(o) READONLY SHOWIF canceled(o)

    PROPERTIES(d) READONLY AFTER quantity(d) bufferStatus, availableCodes
;

DESIGN lotOrders {
    suz {
        MOVE PROPERTY(checkStatus(o));
        MOVE PROPERTY(rejectionReason(o));
    }
}

// get lots
initialDemand 'Заказанное количество' = DATA NUMERIC[16,5] (LotOrderDetail);
initialDemand (LotOrder o, STRING[14] gtin) = GROUP SUM initialDemand(LotOrderDetail d) IF lotOrder(d) = o AND gtin = gtin(d);

left (LotOrderDetail d) = initialDemand(d) - (OVERRIDE quantity(d), 0);  
left (LotOrder o, STRING[14] gtin) = initialDemand(o, gtin) - (OVERRIDE quantity(o, gtin), 0);

lastBlockId = DATA LOCAL STRING();
idLot = DATA LOCAL STRING[100] (INTEGER);

FORM getLots
    PROPERTIES lastBlockId = lastBlockId()
    
    OBJECTS codes = INTEGER
    PROPERTIES(codes) value = idLot
;

getLots 'Получить марки' (LotOrder o) {
    NEWSESSION {
        initialDemand(LotOrderDetail d) <- quantity(d) WHERE lotOrder(d) = o;
        quantity(LotOrderDetail d) <- 0 WHERE lotOrder(d) = o;
        
        FOR initialDemand(o, STRING[14] gtin) DO {
        
            lastBlockId() <- '0';
           
            WHILE left(o, gtin) > 0 DO {
            
                LOCAL result = FILE();
                getToken(legalEntityStock(o));
                suzToken() <- token(legalEntityStock(o));
                
                exception(o) <- NULL;
                TRY {
                    EXTERNAL HTTP GET lotOrderUrl(o) + '/codes?omsId=' + omsId(legalEntityStock(o)) + '&orderId=' + id(o) + '&gtin=' + gtin +
                                     '&quantity=' + INTEGER(left(o, gtin)) + '&lastBlockId=' + lastBlockId() 
                                     HEADERS suzHeaders TO result;
                } CATCH {
                    handleException(o, result());
                    RETURN;
                }
                
                IMPORT getLots JSON FROM result();
                
                FOR idLot(INTEGER i) NOINLINE DO NEW l = Lot {
                    FOR LotOrderDetail d = (GROUP LAST LotOrderDetail dd IF lotOrder(dd) = o AND gtin(dd) = gtin AND initialDemand(dd) > quantity(dd) ORDER DESC dd) DO { 
                        id(l) <- barcodeToId(idLot(i));
                        tail(l) <- barcodeToTail(idLot(i));
                        sku(l) <- sku(d);
                        quantity(d, l) <- 1;
                        quantity(d) <- quantity(d) + 1;
                    } 
                }
            }
        }
        
        APPLY NESTED (selected[LotOrder], filterLotOrders[LotOrder]);
    }
    
    MESSAGE 'Марки успешно получены';
    
    NEWSESSION {
        isPosted(o) <- TRUE;
        APPLY;
    }
}

getLots 'Получить марки' () {
    selected(LotOrder o) <- NULL;
    filterLotOrders(LotOrder o) <- quantityLotOrderDetail(o) = availableCodes(o) AND NOT isPosted(o);
    DIALOG dialogLotOrders DO {
        FOR selected(LotOrder o) DO getLots(o);
    }
    IF NOT GROUP SUM 1 IF selected(LotOrder o) THEN MESSAGE 'Не выбран не один документ';
}


EXTEND FORM lotOrders
    PROPERTIES PANEL getLots(o) SHOWIF quantityLotOrderDetail(o) = availableCodes(o) AND NOT isPosted(o)
    PROPERTIES PANEL getLots()
;

DESIGN lotOrders {
    suz {
        MOVE PROPERTY(getLots(o));
        MOVE PROPERTY(getLots());
    }
}

split 'Разделение на заказы по 10 товаров' (LotOrder o) {
    FOR iterate(INTEGER k, 1, INTEGER (countLotOrderDetail(o)/10)) NEW lo = LotOrder DO {
        type(lo) <- type(o);
        stock(lo) <- stock(o);
        note(lo) <- note(o);
        releaseMethodType(lo) <- releaseMethodType(o);
        FOR  iterate(index(LotOrderDetail d), k*10 + 1, (k+1)*10) AND lotOrder(d) = o NEW lod = LotOrderDetail DO {
            lotOrder(lod) <- lo;
            sku(lod) <- sku(d);
            overGtin(lod) <- overGtin(d);
            quantity(lod) <- quantity(d);
        }
    }
    DELETE LotOrderDetail d WHERE lotOrder(d) = o AND index(d) > 10;
    APPLY;
}

showifSplit (LotOrder o) = countLotOrderDetail(o) <= 10 AND  NOT id(o);
EXTEND FORM lotOrders
    PROPERTIES (o) split SHOWIF showifSplit(o) TOOLBAR 
;