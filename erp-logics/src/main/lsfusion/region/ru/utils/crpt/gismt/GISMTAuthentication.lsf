MODULE GISMTAuthentication;

REQUIRE System, Utils, Time,
        CryptoProLegalEntity;

NAMESPACE GISMT;

url 'Url к стенду ГИС МТ' = DATA STRING ();
useTrueAPI 'Использовать True API' = DATA BOOLEAN ();
urlTrueApi 'Url к стенду ГИС МТ(True API)' = DATA STRING ();

EXTEND FORM integrationData
    PROPERTIES() gismtUrl = url, useTrueAPI, urlTrueApi SHOWIF useTrueAPI();
;

DESIGN integrationData {
    pane {
        NEW GISMT {
            caption = 'ГИС МТ';
            MOVE PROPERTY(gismtUrl);
            MOVE PROPERTY(useTrueAPI());
            MOVE PROPERTY(urlTrueApi());
        }
    }
}

token = DATA LOCAL STRING();
token = DATA STRING (STRING);
tokenDateTime = DATA DATETIME(STRING);

getToken (STRING keyAlias, STRING keyPassword, LegalEntity l) {
    IF (NOT keyAlias IS STRING) OR trim(keyAlias) = '' THEN {
        MESSAGE 'Не задано имя ключа УКЭП';
        RETURN;
    }
    
    IF NOT tokenDateTime(keyAlias) > sumMinutes(currentDateTime(), -480)  THEN { 
        NEWSESSION {
            
            LOCAL result = JSONFILE ();
            IF useTrueAPI() THEN
                EXTERNAL HTTP GET urlTrueApi() + '/auth/key' TO result;
            ELSE 
                EXTERNAL HTTP GET url() + '/auth/cert/key' TO result;
            
            LOCAL uuid = STRING();
            LOCAL data = STRING();
            IMPORT JSON FROM result() TO() uuid, data;
            
            stringToFile(data());
            IF signCustom(l) THEN signCustom(resultFile(), l);
            ELSE sign(RAWFILE(resultFile()), NULL, keyAlias, keyPassword);
        
            EXPORT JSON FROM uuid = uuid(), data = encodedSignature();
            
            IF useTrueAPI() THEN 
                EXTERNAL HTTP POST urlTrueApi() + '/auth/simpleSignIn' PARAMS exportFile() TO result;
            ELSE 
                EXTERNAL HTTP POST url() + '/auth/cert/' PARAMS exportFile() TO result;
            LOCAL token = STRING ();
            IMPORT JSON FROM result() TO() token;
            
            token(keyAlias) <- token();
            tokenDateTime(keyAlias) <- currentDateTime() WHERE token();
            
            APPLY;
        }
    }
    
    token() <- token(keyAlias);
}
