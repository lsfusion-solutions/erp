MODULE GISMTDocument;

REQUIRE Certificate, GISMTLegalEntity, LotType, Time, CryptoProLegalEntity;

NAMESPACE GISMT;

CLASS ABSTRACT Document 'Исходящий документ ГИС МТ';

isPosted 'Проведен' = ABSTRACT BOOLEAN (Document) MATERIALIZED;
canceled 'Отменен' = ABSTRACT BOOLEAN (Document) MATERIALIZED;

id 'Код' = ABSTRACT STRING[100] (Document) MATERIALIZED INDEXED;
document 'Документ ГИС МТ' = GROUP AGGR Document d BY id(d);

dateTime 'Дата/время' = ABSTRACT DATETIME (Document) MATERIALIZED;
number 'Номер' = ABSTRACT STRING (Document) MATERIALIZED;

legalEntity = ABSTRACT LegalEntity (Document) MATERIALIZED;
nameLegalEntity 'Организация' (Document d) = name(legalEntity(d));

legalEntityStock = ABSTRACT Stock (Document) MATERIALIZED;
nameLegalEntityStock 'Склад' (Document d) = name(legalEntityStock(d));

participant = ABSTRACT LegalEntity (Document) MATERIALIZED;
nameParticipant 'Контрагент' (Document d) = name(participant(d));

participantStock = ABSTRACT Stock (Document) MATERIALIZED;
nameParticipantStock 'Склад контрагента' (Document d) = name(participantStock(d));

type = ABSTRACT LotType (Document) MATERIALIZED;
idType (Document d) = id(type(d));
nameType 'Тип' (Document d) = name(type(d));

gismtType 'Тип ГИС МТ' = ABSTRACT STRING (Document) MATERIALIZED;

documentHeaders (TEXT name) = CASE
    WHEN name = 'Authorization' THEN 'Bearer ' + token();

status 'Статус ГИС МТ' = DATA STRING (Document);
downloadDesc 'Описание ГИС МТ' = DATA STRING (Document);

statusOk (Document d) = status(d) = 'CHECKED_OK' OR status(d) = 'ACCEPTED';
statusError (Document d) = status(d) = 'CHECKED_NOT_OK' OR status(d) = 'PARSE_ERROR';
statusWait (Document d) = status(d) = 'WAIT_ACCEPTANCE';

stopCreate = DATA LOCAL BOOLEAN ();
export ABSTRACT (Document);

toCreate = ABSTRACT BOOLEAN (Document) MATERIALIZED;
dateTimeCreated 'Отправлен' = DATA DATETIME (Document);

// exception
exception 'Сообщение' = DATA TEXT (Document);
handleException (Document o, FILE exception) {
    logToFile('gismt', messageCaughtException());
    
    logToFile('gismt', exception);
    fileToString(exception);
    MESSAGE CONCAT ' ', 'Ошибка при обращении к ГИС МТ', messageCaughtException(), resultString();

    NEWSESSION NESTED (messageCaughtException, resultString) {
        exception(o) <- CONCAT ', ', messageCaughtException(), resultString();
        APPLY;
    }
}

    
create 'Отправить в ГИС МТ' (Document d) {
    NEWSESSION {
        export(d);
        IF stopCreate() THEN RETURN;
        
        logToFile('gismt', exportFile());
        
        sign(exportFile(), TRUE, legalEntity(d));
        
        LOCAL sendRequest = FILE();
        EXPORT JSON FROM document_format = 'MANUAL', 
                         product_document = encode(RAWFILE(exportFile()), 'base64'),
                         type = gismtType(d),
                         signature = encodedSignature()
                    TO sendRequest;
        
        logToFile('gismt', sendRequest());

        getToken(legalEntity(d));

        LOCAL id = STRING();
        exception(d) <- NULL;
        TRY {
            EXTERNAL HTTP POST 'https://markirovka.crpt.ru/api/v3/true-api/lk/documents/create?pg=' + idType(d) HEADERS documentHeaders PARAMS sendRequest() TO id;
        } CATCH {
            stringToFile(id());
            handleException(d, resultFile());
            RETURN;
        }
        
        status(d) <- NULL;
        canceled(d) <- NULL;
        downloadDesc(d) <- NULL;
        id(d) <- STRING[100](id());
        dateTimeCreated(d) <- currentDateTime();
        APPLY;
        
        MESSAGE 'Документ успешно отослан. Присвоен код : ' + id(d);
    }
}

// get status
GROUP body;

number 'Номер' = DATA LOCAL STRING[100] (INTEGER);
docDate 'Дата' = DATA LOCAL STRING (INTEGER);

externalId 'ИД' = DATA LOCAL STRING (INTEGER);
invoiceNumber 'Номер СФ/УКД' = DATA LOCAL STRING (INTEGER);
invoiceDate 'Дата СФ/УКД' = DATA LOCAL STRING (INTEGER);

documentNum 'Номер первичного документа' = DATA LOCAL STRING (INTEGER);
documentDate 'Дата первичного документа' = DATA LOCAL STRING (INTEGER);

GROUP sender;
senderInn = DATA LOCAL STRING (INTEGER) IN sender;

status 'Статус' = DATA LOCAL STRING (INTEGER);
downloadDesc = DATA LOCAL STRING (INTEGER);

gtin = DATA LOCAL STRING (INTEGER);
uit_code = DATA LOCAL STRING[200] (INTEGER);

sku = DATA LOCAL Sku (INTEGER);

FORM getDocumentStatus
    OBJECTS results = INTEGER
    PROPERTIES(results) number = number, status = status, downloadDesc = downloadDesc 
;

checkDocStatusInterval 'За сколько дней проверять статусы документов' = DATA INTEGER ();
checkDocStatusDateTime () = subtractDay(currentDateTime(), OVERRIDE checkDocStatusInterval(), 1);

EXTEND FORM integrationData
    PROPERTIES checkDocStatusInterval()
;

DESIGN integrationData {
    GISMT {
        MOVE PROPERTY(checkDocStatusInterval());
    }
}

getDocumentStatuses (DATETIME dFrom) {
    FOR keyAlias(LegalEntity l) DO {
        NEWSESSION {
            getToken(l);
            
            LOCAL result = JSONFILE();
            TRY {
                EXTERNAL HTTP GET url() + '/facade/doc/listV2?inputFormat=false&limit=10000&dateFrom=' + replace(toChar(dFrom, 'yyyy-MM-dd T HH24:MI:SS.MI0Z'),' ','') HEADERS documentHeaders TO result;
            } CATCH {
                logToFile('gismt', messageCaughtException());
                logToFile('gismt', FILE(result()));
                MESSAGE CONCAT ' ', 'Ошибка при получении данных о статусах документов ГИС МТ', messageCaughtException();
                RETURN;
            }
            
            IMPORT getDocumentStatus JSON FROM result();
            FOR id(Document d) = number(INTEGER i) INLINE DO {
                status(d) <- status(i);
                downloadDesc(d) <- downloadDesc(i);
            }
            
            APPLY;
        }
    }
}

getDocumentStatuses (DATETIME dFrom, LotType lt) {
    FOR keyAlias(LegalEntity l) DO {
        NEWSESSION {
            getToken(l);
            
            LOCAL result = JSONFILE();
            TRY {
                EXTERNAL HTTP GET 'https://markirovka.crpt.ru/api/v4/true-api/doc/list?inputFormat=false&pg=' + id(lt) + '&limit=10000&dateFrom=' + replace(toChar(dFrom, 'yyyy-MM-dd T HH24:MI:SS.MI0Z'),' ','') HEADERS documentHeaders TO result;
            } CATCH {
                logToFile('gismt', messageCaughtException());
                logToFile('gismt', FILE(result()));
                MESSAGE CONCAT ' ', 'Ошибка при получении данных о статусах документов ГИС МТ для группы ' + id(lt) +':', messageCaughtException();
                RETURN;
            }
            
            IMPORT getDocumentStatus JSON FROM result();
            FOR id(Document d) = number(INTEGER i) INLINE DO {
                status(d) <- status(i);
                downloadDesc(d) <- downloadDesc(i);
            }
            
            APPLY;
        }
    }
}

skipGetDocumentStatuses = ABSTRACT BOOLEAN (LotType);

getDocumentStatuses 'Импортировать статусы документов ГИС МТ' () { 
    FOR id(LotType t) AND NOT skipGetDocumentStatuses(t) DO {
        getDocumentStatuses(checkDocStatusDateTime(), t);
    }
}

postDocuments 'Изменить статусы документов ГИС МТ' () {
    FOR dateTime(Document d) >= checkDocStatusDateTime() AND statusOk(d) AND NOT isPosted(d) DO {
        NEWSESSION {
            isPosted(d) <- TRUE;
            APPLY;
        }
    }
    FOR dateTime(Document d) >= checkDocStatusDateTime() AND (status(d) = 'CHECKED_NOT_OK' OR status(d) = 'PARSE_ERROR') AND NOT canceled(d) DO {
        NEWSESSION {
            canceled(d) <- TRUE;
            APPLY;
        }
    }
}

allowEditSentDocument 'Разрешить исправлять отосланные в ГИС МТ документы' = DATA BOOLEAN (Employee);
EXTEND FORM employee
    PROPERTIES(e) allowEditSentDocument
;

DESIGN employee {
    access {
        MOVE PROPERTY(allowEditSentDocument(e));
    }
}


META defineDocumentGISMT(doc, property, form, obj, legalEntityProp, stockProp)
    DESIGN form {
        documentDetail {
            NEW gismt {
                caption = 'ГИС МТ';
            }
        }
    }
    
    CLASS ###doc##Document : Document;
    id 'Код' = DATA STRING[100] (###doc##Document);
    
    document = AGGR ###doc##Document WHERE in(###doc doc, LotType lotType) AND property(doc) MATERIALIZED INDEXED;
    nameLotType 'Тип' (###doc##Document d) = name(lotType(d));
    
    id (###doc##Document i) += id(i);
    dateTime (###doc##Document i) += dateTime(doc(i));
    number (###doc##Document i) += seriesNumber(doc(i));
    gismtType (###doc##Document i) += gismtType(doc(i));
    
    legalEntity (###doc##Document i) += legalEntityProp(doc(i));
    legalEntityStock (###doc##Document i) += stockProp(doc(i));
    
    isPosted 'Проведена' = DATA BOOLEAN (###doc##Document);
    isPosted(###doc##Document i) += isPosted(i);
    
    type (###doc##Document i) += lotType(i);
    
    canceled 'Отменена' = DATA BOOLEAN (###doc##Document);
    canceled(###doc##Document i) += canceled(i);
    
    toCreate (###doc##Document d) += d IS ###doc##Document AND (NOT id(d) OR canceled(d));
    
    edit (###doc##Document d) + { edit(doc(d)); }
    
    statusP 'Статус передачи в ГИС МТ' (###doc##Document d) = CASE WHEN isPosted(d) THEN 'Отправлен' 
                                       WHEN toCreate(d) THEN 'Требуется загрузка'
                                       ELSE 'Ожидание подтверждения';
    status 'Статус передачи в ГИС МТ' (###doc d) = 
        GROUP CONCAT statusP(###doc##Document dd) + '(' + name(lotType(dd)) + ')' IF doc(dd) = d, ',' ORDER dd CHARWIDTH 20 MATERIALIZED;
    
    EXTEND FORM form
        PROPERTIES(obj) READONLY status
    
        OBJECTS gd = ###doc##Document
        PROPERTIES(gd) READONLY nameLotType
        PROPERTIES(gd) READONLY id, isPosted, canceled 
        PROPERTIES(gd) READONLY statusP, status, downloadDesc
        PROPERTIES(gd) create TOOLBAR SHOWIF toCreate(gd)
        FILTERS doc(gd) = obj

        PROPERTIES(obj) recalculateLotType TOOLBAR DRAW gd
    ;
    
    DESIGN form {
        gismt {
            showIf = useLot(obj);
            MOVE BOX(gd) { caption = 'Документы'; }
        }
    }
    
    // constraint
    CONSTRAINT (CHANGED(sku(###doc##Detail d)) OR GROUP SUM 1 IF CHANGED(quantity(d, Lot l))) AND
               NOT allowEditSentDocument(currentUser()) AND
               (PREV(id(document(doc(d),lotType(sku(d)))) AND NOT canceled(document(doc(d),lotType(sku(d))))) OR 
                    (id(document(doc(d),lotType(sku(d)))) AND NOT canceled(document(doc(d),lotType(sku(d))))))
        MESSAGE 'Запрещено редактировать документ после его отсылки в ГИС МТ';

END

// form list

background (Document d) = CASE WHEN statusOk(d) THEN RGB(224,255,224)
                                        WHEN statusWait(d) THEN RGB(255,255,224)
                                        WHEN statusError(d) THEN RGB(255,224,224);

FORM documents 'Исходящие документы'
    OBJECTS d = Document
    PROPERTIES(d) READONLYIF isReadonly() BACKGROUND background(d) isPosted, canceled, id 
    PROPERTIES(d) READONLY BACKGROUND background(d) dateTimeCreated, dateTime, number, nameLegalEntity, nameLegalEntityStock, nameParticipant, nameParticipantStock, gismtType 
    PROPERTIES(d) READONLYIF isReadonly() status, downloadDesc
    PROPERTIES exception = STRING(exception(d))
    
    PROPERTIES(d) TOOLBAR create SHOWIF toCreate(d) AND NOT isPosted(d)
    PROPERTIES(d) EDIT
    PROPERTIES() DRAW d TOOLBAR getDocumentStatuses, postDocuments
    
    FILTERGROUP status
        FILTER 'Требуется отсылка' NOT isPosted(d) AND toCreate(d)
        FILTER 'Ожидается ответ' NOT isPosted(d) AND NOT canceled(d) AND NOT toCreate(d)
        FILTER 'Не завершен' NOT isPosted(d) AND (toCreate(d) OR NOT canceled(d))
    
    FILTERS keyAlias(legalEntity(d))
;

@extendFormEditable(documents);

NAVIGATOR {
    customsNavigator {
        NEW FOLDER gismtNavigator 'ГИС МТ' {
            NEW documents;
        }
    }
}