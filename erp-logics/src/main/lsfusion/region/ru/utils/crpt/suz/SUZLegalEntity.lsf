MODULE SUZLegalEntity;

REQUIRE SUZAuthentication, LegalEntity, CryptoProLegalEntity;

NAMESPACE SUZ;

dataOmsId 'OMS ID' = DATA STRING (LegalEntity);
dataToken 'Токен' = DATA STRING(LegalEntity);

idConnection 'ID соединения' = DATA STRING (LegalEntity);
expiredTokenTime 'Дейcтвие токена' = DATA DATETIME (LegalEntity);

EXTEND FORM integrationData
    OBJECTS scp = LegalEntity
    PROPERTIES(scp) READONLY id, name
    PROPERTIES(scp) dataOmsId, dataToken, idConnection, expiredTokenTime READONLY
    FILTERS isCompany(scp)
;

DESIGN integrationData {
    SUZ {
        MOVE BOX(scp);
    }
}

omsId(LegalEntity l) = OVERRIDE dataOmsId(l), (omsId() IF l IS LegalEntity);
token(LegalEntity l) = OVERRIDE dataToken(l), (token() IF l IS LegalEntity);

//получение динамического токена
getToken(LegalEntity l){
    IF expiredTokenTime(l) < currentDateTime() OR NOT expiredTokenTime(l) THEN NEWSESSION {
        LOCAL result = JSONFILE ();
        EXTERNAL HTTP GET 'https://markirovka.crpt.ru/api/v3/true-api/auth/key' TO result;

        LOCAL uuid = STRING();
        LOCAL data = STRING();

        IMPORT JSON FROM result() TO() uuid, data;

        stringToFile(data());
        sign(resultFile(), NULL, l);

        EXPORT JSON FROM uuid = uuid(), data = replace(replace(encodedSignature(), '\n', ''), ' ', '');

        TRY {
            EXTERNAL HTTP POST 'https://markirovka.crpt.ru/api/v3/true-api/auth/simpleSignIn/' + idConnection(l) PARAMS exportFile() TO result;
        } CATCH {
            logToFile('suz', messageCaughtException());

            logToFile('suz', FILE(result()));
            fileToString(FILE(result()));
            MESSAGE CONCAT ' ', 'Ошибка при получения токена к СУЗ', messageCaughtException();
            RETURN;
        }

        LOCAL token = STRING ();
        IMPORT JSON FROM result() TO() token;
        
        dataToken(l) <- token();
        expiredTokenTime(l) <- sumMinutes(currentDateTime(), 600);
        APPLY;
    }
}