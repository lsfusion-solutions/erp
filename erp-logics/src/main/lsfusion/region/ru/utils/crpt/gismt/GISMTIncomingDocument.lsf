MODULE GISMTIncomingDocument;

REQUIRE GISMTDocument, Lot, Time;

NAMESPACE GISMT;

//CLASS IncomingDocument 'Входящий документ ГИС МТ';
//
//id 'Код' = DATA STRING[100] (IncomingDocument) CHARWIDTH 36;
//incomingDocument 'Входящий документ ГИС МТ' = GROUP AGGR IncomingDocument d BY id(d);
//
//dateTime 'Дата/время' = DATA DATETIME (IncomingDocument);
//
//sender = DATA LegalEntity (IncomingDocument);
//nameSender 'Отправитель' (IncomingDocument d) = name(sender(d));
//
//status 'Статус' = DATA STRING (IncomingDocument);
//downloadDesc 'Описание' = DATA STRING (IncomingDocument);
//
//FORM incomingDocuments 'Входящие документы'
//    OBJECTS d = IncomingDocument
//    PROPERTIES(d) READONLY id, dateTime, nameSender, status, downloadDesc
//;
//
//NAVIGATOR {
//    gismtNavigator {
//        NEW incomingDocuments;
//    }
//}

// get incoming document
documentNum = DATA LOCAL STRING ();
documentDate = DATA LOCAL STRING ();

FORM getIncomingDocument
    PROPERTIES() document_num = documentNum IN body, document_date = documentDate IN body

    OBJECTS products = INTEGER IN body 
    PROPERTIES(products) uit_code = uit_code
;

getIncomingDocument (LegalEntity l, STRING[100] id) {
    getToken(l);
    
    LOCAL result = JSONFILE();
    TRY {
        EXTERNAL HTTP GET url() + '/facade/doc/' + id + '/body?limit=10000' HEADERS documentHeaders TO result;
    } CATCH {
        logToFile('gismt', messageCaughtException());
        logToFile('gismt', FILE(result()));
        MESSAGE CONCAT ' ', 'Ошибка при получении GTIN из описания остатков ГИС МТ', messageCaughtException();
        RETURN;
    }
    
    IMPORT getIncomingDocument JSON FROM result();
    
    gtin (INTEGER i) <- idToGtin(uit_code(i));
    sku (INTEGER i) <- OVERRIDE sku(lot(uit_code(i))), skuFromGtin(gtin(i));
}

// get documents
FORM getIncomingDocuments
    OBJECTS results = INTEGER
    PROPERTIES(results) number = number, docDate = docDate, inn = senderInn, status = status, 
                        externalId = externalId, invoiceDate = invoiceDate, invoiceNumber = invoiceNumber 
;

FORM dialogIncomingDocument 'Выбор документа'
    OBJECTS di 'Документы' = INTEGER
    PROPERTIES(di) READONLY number, docDate, status,
                            externalId, invoiceNumber, invoiceDate,
                            documentNum, documentDate     
    FILTERS number(di) 
;
 
documentIndex = DATA LOCAL INTEGER ();

getIncomingDocuments 'Получить входящие документы ГИС МТ' (LegalEntity l, LegalEntity s, LotType lt, STRING status) {
    getToken(l);
    
    LOCAL result = JSONFILE();
    TRY {
        EXTERNAL HTTP GET url() + '/facade/doc/listV2?inputFormat=true&limit=1000' + 
                                  '&participantInn=' + inn(s) + '&pg=' + id(lt) + '&documentStatus=' + status HEADERS documentHeaders TO result;
    } CATCH {
        logToFile('gismt', messageCaughtException());
        logToFile('gismt', FILE(result()));
        MESSAGE CONCAT ' ', 'Ошибка при получении входящих документов ГИС МТ', messageCaughtException();
        RETURN;
    }
    
    number(INTEGER i) <- NULL;
    IMPORT getIncomingDocuments JSON FROM result();

    FOR number(INTEGER i) DO {
        getIncomingDocument(l, number(i));
        documentNum(i) <- documentNum();
        documentDate(i) <- documentDate();
    }
    
    documentIndex() <- NULL;
    DIALOG dialogIncomingDocument OBJECTS di INPUT FILTERS status(di) = status DO {
        documentIndex() <- di;
    } 
//            FOR number(INTEGER i) AND NOT incomingDocument(number(i)) AND NOT document(number(i)) NEW d = IncomingDocument DO {
//                id(d) <- STRING[100](number(i));
//            }
//            
//            FOR id(IncomingDocument d) = number(INTEGER i) INLINE DO {
//                dateTime(d) <- toDateTimeFormat(docDate(i), 'yyyy-MM-dd T HH24:MI:SS.MI0Z');
//                sender(d) <- legalEntityByInn(senderInn(i));
//                status(d) <- status(i);
//                downloadDesc(d) <- downloadDesc(i);
//            }
            
}

//EXTEND FORM incomingDocuments
//    PROPERTIES getIncomingDocuments() DRAW d TOOLBAR
//;

META defineDocumentIncoming(doc, prop, container, legal, partner)
    prop 'Документ на отгрузку товара' = DATA STRING[100] (###doc, LotType);
    prop 'Документ на отгрузку товара' (###doc d) = GROUP CONCAT prop(d, LotType t) + '(' + name(t) + ')', ',' ORDER t CHARWIDTH 30;
    
    get###prop 'Запросить из ГИС МТ' (###doc i, LotType t) {
        getIncomingDocuments(legal(i), partner(i), t, 'WAIT_ACCEPTANCE');
        IF documentIndex() THEN
            prop(i, t) <- number(documentIndex());
    }
    
    FORM change###prop 'Документ на отгрузку товара'
        OBJECTS d = ###doc
        
        OBJECTS t = LotType
        PROPERTIES name(t) READONLY, prop(d, t), get###prop(d, t) TOOLBAR
    ;
    change###prop (###doc d) {
        SHOW change###prop OBJECTS d = d WAIT NESTEDSESSION;
    }

    import 'Загрузить КМ' (###doc i) {
        FOR releaseNumber(i, LotType t) DO {
            getIncomingDocument(legal(i), releaseNumber(i, t));

            IF (GROUP CONCAT uit_code(INTEGER j) IF NOT sku(j), '\n' ORDER j) THEN
                MESSAGE 'Не найдены sku для марок \n' + (GROUP CONCAT uit_code(INTEGER j) IF NOT sku(j), '\n' ORDER j);

            FOR [GROUP SUM 1 BY sku(INTEGER j)](Sku sku) AND NOT doc##Detail(sku, i) NEW d = ###doc##Detail DO {
                doc(d) <- i;
                sku(d) <- sku;
            }
            
            FOR sku(INTEGER j) AND NOT lot(uit_code(j)) ORDER j DO NEW lot = Lot {
                id(lot) <- uit_code(j);
                sku(lot) <- sku(j);
            }
            
            
            LOCAL index = INTEGER (INTEGER);
            index (INTEGER j) <- PARTITION SUM 1 ORDER j BY sku(j);
            
            LOCAL cumQuantity = NUMERIC[16,3] (###doc##Detail);
            cumQuantity(###doc##Detail d) <- PARTITION SUM quantity(d) IF doc(d) = i ORDER d BY sku(d), doc(d);
            
            FOR Lot l = lot(uit_code(INTEGER j)) AND ###doc##Detail d = (GROUP MIN ###doc##Detail dd IF sku(j) = sku(dd) AND index(j) <= cumQuantity(dd)) ORDER j DO {
                quantity(d, l) <- 1;
            }

            FOR doc(###doc##Detail d) = i AND sku(INTEGER j) = sku(d) AND Lot l = lot(uit_code(j)) AND NOT quantity(d) ORDER d, j DO {
                quantity(d, l) <- 1;
            }
            
            quantity(###doc##Detail d) <- quantityLot(d) WHERE doc(d) = i AND (GROUP SUM 1 IF sku(d) = sku(INTEGER j)) AND NOT quantity(d);
        }
    }

    EXTEND FORM doc
        PROPERTIES(i) prop ON CHANGE change###prop(i), import
    ;
    DESIGN doc {
        container {
            NEW gismt {
                caption = 'ГИС МТ';
                MOVE PROPERTY(prop(i));
                MOVE PROPERTY(import(i));
            }
        }
    }
END