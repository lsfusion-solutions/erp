MODULE PurchaseInvoiceUpdDocument;

REQUIRE PurchaseInvoiceRu, ConsignmentUpdDocument;

NAMESPACE Purchase;

overFill ABSTRACT LIST (UserInvoiceDetail, UpdDocumentDetail);

fill(UserInvoiceDetail d, UpdDocumentDetail ed) {
    dataIndex(d) <- number(ed);
    sku(d) <- OVERRIDE skuBarcode(idSku(ed)), sku(idSku(ed)); 
    quantity(d) <- quantity(ed);
    price(d) <- price(ed);
    sum(d) <- sum(ed);
    
    valueVAT(d) <- CASE 
                   WHEN VATStatus(ed)=VATStatus.vat0 THEN 0.0
                   WHEN VATStatus(ed)=VATStatus.vat10 THEN 10.0
                   WHEN VATStatus(ed)=VATStatus.vat18 THEN 18.0
                   WHEN VATStatus(ed)=VATStatus.vat20 THEN 20.0;
    
    VATSum(ed) <- sumVAT(d);                                 
    invoiceSum(d) <- invoiceSum(ed);
    VATSum(d) <- VATSum(ed);
    overFill(d, ed);
}

createDetails (UserInvoice i, UpdDocument upd) {
    FOR updDocument(UpdDocumentDetail d) = upd NEW id = UserInvoiceDetail DO {
        userInvoice(id) <- i;
        fill(id,d);
        invoiceDetail(d) <- id;
    }  
}

FORM dialogSelectUpdDocuments 'УПД'
    OBJECTS s = LegalEntity PANEL
    PROPERTIES (s) READONLY name
    OBJECTS c = LegalEntity PANEL
    PROPERTIES (c) READONLY name

    OBJECTS u = UpdDocument
    PROPERTIES (u) READONLY updType, nameStatus, numberInvoice, dateInvoice,
                            nameSupplier, nameCustomer, sum, VATSum, invoiceSum
    FILTERS supplier(u) == s,
            customer(u) == c

    OBJECTS d = UpdDocumentDetail

    PROPERTIES (d) READONLY number, idSku, nameSku
    PROPERTIES (d) READONLY quantity, price, sum, nameVATStatus,
                            VATSum, invoiceSum

    FILTERS updDocument(d) == u
;

DESIGN dialogSelectUpdDocuments {
    BOX {
        size = (1124, 768);
        fill = 1;
        NEW documentContainer BEFORE TOOLBARBOX {
            type = CONTAINERV;
            fill = 1;
            NEW headerBox {
                type = CONTAINERH;
                MOVE BOX(s) {
                    caption = 'Поставщик';
                }
                MOVE BOX(c) {
                    caption = 'Покупатель';
                }
            }
            MOVE BOX(u);
            MOVE BOX(d);
        }
    }
}

fillInvoiceUpdDocument 'Заполнить на основе УПД' (Purchase.UserInvoice invoice) { 
    DIALOG dialogSelectUpdDocuments OBJECTS s = supplier(invoice), c = customer(invoice), u INPUT DO {
        createDetails(invoice, u);
    }
}

EXTEND FORM userInvoice
    PROPERTIES(i) fillInvoiceUpdDocument
;
DESIGN userInvoice {
    headerCreateDetail {
        NEW upd {
            caption = 'УПД';
            MOVE PROPERTY(fillInvoiceUpdDocument(i));
        }
    }
}


//copyData(UpdDocument upd, Invoice i)  { 
//    invoice(UpdDocument e) <- NULL WHERE invoice(e) == i;
//    invoice(upd) <- i;
//    operation(i) <- eOperation(supplier(ei)) WHERE eOperation(supplier(ei));
//    supplier(i) <- supplier(ei);
//    supplierStock(i) <- OVERRIDE supplierStock(ei), defaultStock(supplier(ei));
//    customer(i) <- customer(ei);
//    customerStock(i) <- customerStock(ei);
//    date(i) <- DATE(deliveryNoteDateTime(ei));
//    time(i) <- TIME(deliveryNoteDateTime(ei));
//    overCopy(ei,i);
//    
//    FOR eInvoice(EInvoiceDetail eid) == eInvoice(i) AND NOT ignoreDetail(eid) NEW id = UserInvoiceDetail DO {
//        userInvoice(id) <- i;
//        sku(id) <- OVERRIDE sku(lineItemBuyerID(eid)), skuGTIN(lineItemID(eid)), sku(lineItemID(eid));
//        quantity(id) <- quantityDespatched(eid);
//        price(id) <- lineItemPrice(eid);
//        VAT(id) <- valueCurrentVAT(country(defaultStock(supplier(ei))), overValueVAT(eid));;
//        valueVAT(id) <- NUMERIC[10,5](overValueVAT(eid)); 
//        invoicePrice(id) <- round2(price(id) * (100 + valueVAT(id))/100);
//        sum(id) <- lineItemAmountWithoutCharges(eid) WHERE isEDI(ei);
//        VATSum(id) <- lineItemAmountCharges(eid) WHERE isEDI(ei);
//        invoiceSum(id) <- lineItemAmount(eid) WHERE isEDI(ei);
//        eInvoiceDetail(id) <- eid;
//
//        overCopy(eid,id); 
//    }
//}
