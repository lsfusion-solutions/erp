MODULE SberMarketOrders;

REQUIRE SberMarketContent, SaleInternetPicking, LogTools;

NAMESPACE SberMarket;

@defineLogRotate(sber, 5, weekly);

paid 'Заказ оплачен' = DATA BOOLEAN (InternetOrder);

EXTEND FORM internetOrders
    PROPERTIES (o) READONLY paid
;
EXTEND FORM internetOrder
    PROPERTIES (o) paid
;
DESIGN internetOrder{
    payment{
        MOVE PROPERTY (paid(o));
    }
}

EXTEND CLASS StatusInternetOrder{
    closedStore 'Отмена ТО'
}

GROUP payload;
GROUP delivery : payload;
GROUP total : payload;
GROUP address : payload;
GROUP customer : payload;

event_type = DATA LOCAL NESTED STRING();
shipmentMethod = DATA LOCAL STRING();
expectedTo = DATA LOCAL ZDATETIME();
expectedFrom = DATA LOCAL ZDATETIME();
totalPrice = DATA LOCAL STRING();
discountTotalPrice = DATA LOCAL STRING();
door_phone = DATA LOCAL STRING();
elevator = DATA LOCAL STRING();
city = DATA LOCAL STRING();
street = DATA LOCAL STRING();
lon = DATA LOCAL STRING();
full_address = DATA LOCAL STRING();
floor = DATA LOCAL STRING();
entrance = DATA LOCAL STRING();
delivery_to_door = DATA LOCAL STRING();
lat = DATA LOCAL STRING();
building = DATA LOCAL STRING();
apartment = DATA LOCAL STRING();
clientType = DATA LOCAL STRING();
originalOrderId = DATA LOCAL NESTED STRING[100]();
paymentMethods = DATA LOCAL STRING(INTEGER);
payloadPaymentMethods = DATA LOCAL INTEGER(INTEGER);
quantity = DATA LOCAL NUMERIC(INTEGER);
totalPrice = DATA LOCAL STRING(INTEGER);
originalQuantity = DATA LOCAL STRING(INTEGER);
price = DATA LOCAL STRING(INTEGER);
discountPrice = DATA LOCAL STRING(INTEGER);
replacedByID = DATA LOCAL STRING(INTEGER);
weight = DATA LOCAL STRING(INTEGER);
totalDiscountPrice = DATA LOCAL STRING(INTEGER);
id = DATA LOCAL STRING(INTEGER);
comment = DATA LOCAL STRING();
replacementPolicy = DATA LOCAL STRING();
storeID = DATA LOCAL STRING();
short_number = DATA LOCAL STRING();
phone = DATA LOCAL STRING();
name = DATA LOCAL STRING[255]();
key = DATA LOCAL STRING();
timestamp = DATA LOCAL STRING();

FORM order
    PROPERTIES() event_type, timestamp
    PROPERTIES() IN payload shipmentMethod, clientType, originalOrderId, comment, replacementPolicy, storeID
    PROPERTIES() IN delivery expectedTo, expectedFrom
    PROPERTIES() IN total totalPrice, discountTotalPrice
    PROPERTIES() IN address door_phone, elevator, city, street, lon, full_address, floor, entrance, delivery_to_door, lat, building, apartment

    OBJECTS paymentMethods = INTEGER IN payload
    PROPERTIES(paymentMethods) paymentMethods EXTID 'value'

    OBJECTS positions = INTEGER IN payload
    PROPERTIES(positions) quantity, totalPrice, originalQuantity, price, discountPrice, replacedByID, weight, totalDiscountPrice, id
    PROPERTIES() IN customer short_number, phone, name, key;

idDetail (INTEGER i) = STRING[100](originalOrderId() + '_' + id(i));

paidOrder(STRING id) {
    paid(internetOrder(id)) <- TRUE;
}
cancelOrder(STRING id){
    status(internetOrder(id)) <- StatusInternetOrder.closed;
}
deliveryOrder(STRING id){
    status(internetOrder(id)) <- StatusInternetOrder.delivery;
}
deliveredOrder(STRING id){
    status(internetOrder(id)) <- StatusInternetOrder.delivered;
}

isSberMarket (InternetOrder o) = carrier(o) = carrier('sberMarket');

createOrder(STRING id){
    IF NOT internetOrder(id) THEN NEW o = InternetOrder{
        id(o) <- id;
    }
    FOR InternetOrder o = internetOrder(id) DO{
        number(o) <- STRING[48](id);
        isPosted(o) <- TRUE;
        carrier(o) <- carrier('sberMarket');
        supplierStock(o) <- sberStore(storeID()) WHERE storeID();
        nameInternetCustomer(o) <- name() WHERE name();
        addressInternetCustomer(o) <- full_address() WHERE full_address();
        phoneInternetCustomer(o) <- phone() WHERE phone();
        deliveryDate(o) <- DATE(expectedFrom()) WHERE expectedFrom();
        deliveryTimeFromInternetOrder(o) <- TIME(expectedFrom()) WHERE expectedFrom();
        deliveryTimeToInternetOrder(o) <- TIME(expectedTo()) WHERE expectedFrom();
        customerComment(o) <- comment();
    }
    FOR sku(id(INTEGER i)) AND idDetail(i) AND NOT internetOrderDetail(idDetail(i)) NEW d = InternetOrderDetail DO{
        id(d) <- idDetail(i);
        internetOrder(d) <- internetOrder(originalOrderId());
    }
    FOR Sku s = sku(id(INTEGER i)) AND InternetOrderDetail d = internetOrderDetail(idDetail(i)) DO{
        sku(d) <- s;
        quantity(d) <- NUMERIC[16,5](originalQuantity(i));
        price(d) <- NUMERIC[16,4](price(i));
        discountPrice(d) <- NUMERIC[16,4](discountPrice(i));
        sum(d) <- NUMERIC[18,4](totalPrice(i));
        discountSum(d) <- NUMERIC[18,4](totalDiscountPrice(i));
    }
}
updated 'Заказ обновлен' = DATA DATETIME (InternetOrder);
EXTEND FORM internetOrders
    PROPERTIES READONLY updated(o)
;
EXTEND FORM internetOrder
    PROPERTIES updated(o) SHOWIF updated(o) READONLY BACKGROUND updated(o)
;

DESIGN internetOrder{
    payment{
        MOVE PROPERTY (updated(o));
    }    
}

timePickingSkuSber 'Время сборки одного товара(секунд)' = DATA INTEGER ();
assemblyTimeMinutes (InternetOrder o) = ((GROUP SUM 1 IF (quantity(InternetOrderDetail d) 
    AND status(internetOrder(d)) = StatusInternetOrder.new OR (internetOrder(d)) = o) AND supplierStock(d) = supplierStock(o))  * timePickingSkuSber()) / 60;

EXTEND FORM integrationData
    PROPERTIES timePickingSkuSber()
;

sber_order(FILE f){
    IMPORT order JSON FROM f;
    fileToString(f);
    logToFile('sber', (CONCAT ' : ', event_type(), originalOrderId(), resultString()));
    CASE 
        WHEN event_type() = 'order.created' THEN {
            createOrder(originalOrderId());
            EXPORT JSON FROM status = 'created', number = originalOrderId(),
                expectedAssemblyTime = 
                toChar(sumMinutes(currentDateTime(), (OVERRIDE assemblyTimeMinutes(internetOrder(originalOrderId())), 30)), 'yyyy-MM-ddThh24:mi:ss+03:00')
            ;
        }
        WHEN event_type() = 'order.paid' THEN {
            paidOrder(originalOrderId());
        }
        WHEN event_type() = 'order.canceled' THEN {
            cancelOrder(originalOrderId());
        }
        WHEN event_type() = 'order.delivering' THEN{
            deliveryOrder(originalOrderId());
        }
        WHEN event_type() = 'order.delivered' THEN{
            deliveredOrder(originalOrderId());
        }
        WHEN event_type() = 'order.updated' THEN{
            createOrder(originalOrderId());
        }
    APPLY NESTED LOCAL;
    headersTo('Content-Type') <- 'application/json';
    IF canceled() THEN{
        statusHttpTo() <- 500;
        EXPORT JSON FROM status = 'error', descripton = applyMessage();
    }
}@@api;


//sendNotification

GROUP event;
GROUP payload1 EXTID 'payload' : event;
GROUP order : payload1;

order_id = DATA LOCAL STRING();
positionsMarkingCode = DATA LOCAL INTEGER(INTEGER);
value = DATA LOCAL STRING(INTEGER);

changed = DATA LOCAL STRING();
type = DATA LOCAL STRING();

eventType (InternetOrder o)= CASE   
    WHEN status(o) = StatusInternetOrder.isPicking THEN 'order.in_work'
    WHEN status(o) = StatusInternetOrder.picked THEN 'order.ready_for_delivery'
    WHEN status(o) = StatusInternetOrder.closedStore THEN 'order.canceled'
;

FORM sendNotification
    OBJECTS o = InternetOrder PANEL
    PROPERTIES IN event eventType(o) EXTID 'type'
    PROPERTIES IN payload1 number(o) EXTID 'order_id'
    PROPERTIES IN order = OVERRIDE id(o) EXTID 'originalOrderId', 
        = IF o IS InternetOrder THEN TFALSE EXTID 'changed'

    OBJECTS positions = InternetOrderDetail IN order
    PROPERTIES(positions) quantity EXTID 'originalQuantity', pickingQuantity EXTID 'quantity', idSku EXTID 'id'
    PROPERTIES = IF shortNameUOMSku(positions) = 'кг' THEN STRING(round0(pickingQuantity(positions) * 1000)) ELSE '' EXTID 'weight'
    FILTERS internetOrder(positions) = o 
        AND status(internetOrder(positions)) != StatusInternetOrder.isPicking
        AND status(internetOrder(positions)) != StatusInternetOrder.closed
;

send = DATA DATETIME (STRING, InternetOrder);
clientTokenOrderSber 'Client Token Notification СМ' = DATA STRING ();
urlNotificationSber 'Url Notification СМ' = DATA STRING ();

sendNotification 'Отправить уведомление' (InternetOrder o){
    IF clientTokenOrderSber() AND urlNotificationSber() THEN{
        NEWSESSION APPLY {
            send(eventType(o), o) <- currentDateTime();
        }
        LOCAL f = FILE();
        headers('Api-Version') <- '3.0';
        headers('Client-Token') <- clientTokenOrderSber();
        headers('Content-Type') <- 'application/json';
        EXPORT sendNotification OBJECTS o = o JSON;
        fileToString(exportFile());
        logToFile('sber', CONCAT ' : ', '-->', number(o), eventType(o), 'INFO', resultString());
        TRY{
            EXTERNAL HTTP POST urlNotificationSber() HEADERS headers PARAMS exportFile() TO f;
            send(eventType(o), o) <- NULL;
        }
        CATCH {
            fileToString(f());
            logToFile('sber', CONCAT ' : ', '<--', number(o), eventType(o), 'ERROR', resultString(), messageCaughtException());
        }
        
    } ELSE MESSAGE 'Не заданы параметры отправки вебхуков' NOWAIT;  
}

EXTEND FORM internetOrders
    PROPERTIES (o) sendNotification SHOWIF isSberMarket(o)
;
DESIGN internetOrders{
    actionContainer{
        NEW sberMarket{
            caption = 'СберМаркет';
            MOVE PROPERTY (sendNotification(o));
        }
    }
}

useConstraintChangeStatusSber 'Ограничить смену статусов без отпавки вебхука' = DATA BOOLEAN () PREREAD;

CONSTRAINT CHANGED (status(InternetOrder o)) AND useConstraintChangeStatusSber() AND isSberMarket(o) AND (GROUP SUM 1 IF send(STRING s, o)) 
    CHECKED BY nameStatus[InternetOrder]
    MESSAGE 'Запрещено изменять статус, пока не отправлен вебхук в СберМаркет';
autoSendNotificationSber 'Автоматическая отправка уведомлений' = DATA BOOLEAN () PREREAD;

WHEN SETCHANGED (eventType(InternetOrder o)) AND isSberMarket(o) AND clientTokenOrderSber() AND urlNotificationSber() 
    AND autoSendNotificationSber() DO sendNotification(o);

EXTEND FORM integrationData
    PROPERTIES () clientTokenOrderSber, urlNotificationSber,
        useConstraintChangeStatusSber, autoSendNotificationSber
;

DESIGN integrationData{
    sberMarket{
        NEW sberOrders{
            caption = 'Orders API';
            MOVE PROPERTY (clientTokenOrderSber());
            MOVE PROPERTY (urlNotificationSber());
            MOVE PROPERTY (useConstraintChangeStatusSber());
            MOVE PROPERTY (autoSendNotificationSber());
        }
    }
}