MODULE SberMarketContent;

REQUIRE Sku, ItemInternet, ItemDescription, Integration, Store, SkuLedger, StockTax, Pricing, PriceListPromotion, 
        Scheduler, SaleInternetOrder, ItemNutrition;

NAMESPACE SberMarket;

//auth
clientIdSber 'Сlient id СМ' = DATA STRING ();
clientSecretSber 'Сlient secret СМ' = DATA STRING ();
accessTokenSber = DATA LOCAL STRING ();

auth(){
    LOCAL response = FILE();
    EXTERNAL HTTP POST 'https://merchant-api.sbermarket.ru/auth/token' BODYURL CONCAT '&',
        'grant_type=client_credentials',
        'client_id=' + clientIdSber(),
        'client_secret=' + clientSecretSber()
        TO response
    ;
    IMPORT JSON FROM response() TO () accessTokenSber = access_token;
    headers('Authorization') <- 'Bearer ' + accessTokenSber();
}


//-----------------------Stores API-----------------------//

idSber 'ID СберМаркет' = DATA STRING[255] (DepartmentStore);
sberStore = GROUP MAX DepartmentStore d BY idSber(d);


EXTEND FORM departmentStore
    PROPERTIES idSber(d)
;

DESIGN departmentStore{
    headerExtraParams{
        MOVE PROPERTY (idSber(d));
    }
}

//-----------------------Content API-----------------------//

//управление категориями
online = ABSTRACT CASE BOOLEAN (Group);
groupTypeSberMarket = DATA GroupType ();
nameGroupTypeSberMarket 'Классификатор СберМаркет' = name(groupTypeSberMarket());
online(Group g) += WHEN groupType(g) = groupTypeSberMarket() AND groupTypeSberMarket() THEN TRUE;

position = PARTITION SUM 1 BY online(Group g), g;

EXTEND FORM integrationData
    PROPERTIES() nameGroupTypeSberMarket, clientIdSber, clientSecretSber
;

DESIGN integrationData{
    delivery{
        NEW sberMarket{
            caption = 'СберМаркет';
            NEW contetApi{
                caption = 'Content API';
                MOVE PROPERTY (nameGroupTypeSberMarket());
                MOVE PROPERTY (clientIdSber());
                MOVE PROPERTY (clientSecretSber());
            }
        }
    }
}

sort = DATA LOCAL INTEGER (Group);

FORM categories FORMEXTID 'null'
    OBJECTS g = Group EXTID 'data'
    PROPERTIES id(g), name(g) EXTID 'name', = id(parent(g)) EXTID 'parent_id', position(g)
    FILTERS online(g)
;
 
sendCategories 'Выгрузить категории'(){
    sort(Group g) <- PARTITION SUM 1 IF online(g) ORDER g BY level(g);
    auth();
    
    IF (GROUP SUM 1 IF online(Group g)) >= 1000 THEN {
        FOR iterate(INTEGER l, 1, (GROUP MAX level(Group g) IF online(g))) DO{
            LOCAL maxGroup = INTEGER ();
            LOCAL maxStep = INTEGER ();
            maxGroup() <- GROUP MAX sort(Group g) IF level(g) = l;
            maxStep() <- (maxGroup() / 1000) (+) 1 IF mod(maxGroup(), 1000);
            FOR iterate(INTEGER i, 0, maxStep() - 1) DO{
                EXPORT categories FILTERS (sort(g) > (i * 1000) AND sort(g) <= ((i + 1) * 1000)) AND level(g) = l;
                LOCAL response = FILE();
                TRY {
                    EXTERNAL HTTP PUT 'https://merchant-api.sbermarket.ru/api/v1/import/categories'
                        HEADERS headers
                        PARAMS exportFile()
                        TO response
                    ;
                    open(response());
                } CATCH {
                    fileToString(response());
                    MESSAGE (CONCAT '\n', '[Категории]', 'Ошибка при выгрузке на шаге' + (i + 1) + ' из ' + maxStep(), resultString(), messageCaughtException()) NOWAIT;
                    RETURN;
                }
            }
            sleep(10000);
        }
    } ELSE {
        EXPORT categories JSON;
        LOCAL response = FILE();
        TRY {
            EXTERNAL HTTP PUT 'https://merchant-api.sbermarket.ru/api/v1/import/categories'
                HEADERS headers
                PARAMS exportFile()
                TO response
            ;
        } CATCH {
            fileToString(response());
            MESSAGE (CONCAT '\n', '[Категории]', 'Ошибка при выгрузке на шаге 1 из 1', resultString(), messageCaughtException()) NOWAIT;
            RETURN;
        }
    }
}

//Управление ассортиментом товаров
values = DATA LOCAL STRING(INTEGER);
attributesValues = DATA LOCAL INTEGER(INTEGER);
attribute = DATA LOCAL STRING(INTEGER);

value = ABSTRACT CASE STRING (Sku , STRING);

//обязательные атрибуты

useCustomBrand = ABSTRACT BOOLEAN ();
value(Sku i, STRING s) += WHEN s = 'brand' AND brand(i) AND NOT useCustomBrand() THEN STRING(name(brand(i)));

useCustomManufacturer = ABSTRACT BOOLEAN ();
value(Sku i, STRING s) += WHEN s = 'manufacturer' AND Item.manufacturer(i) AND NOT useCustomManufacturer() THEN STRING(name(Item.manufacturer(i)));

useCustomCountry = ABSTRACT BOOLEAN ();
value(Sku i, STRING s) += WHEN s = 'country' AND country(i) AND NOT useCustomCountry() THEN STRING(name(country(i)));

useCustomVolume = ABSTRACT BOOLEAN ();
value(Sku i, STRING s) += WHEN s = 'volume_netto' AND volume(i) AND NOT useCustomVolume() THEN STRING(round3(volume(i)));

useCustomGrossWeight = ABSTRACT BOOLEAN ();
value(Sku i, STRING s) += WHEN s = 'weight_brutto' AND grossWeight(i) AND NOT useCustomGrossWeight() THEN STRING(round3(grossWeight(i)));

//дополнительные 
value(Sku i, STRING s) += WHEN s = 'proteins' AND proteins(i) THEN STRING(proteins(i));
value(Sku i, STRING s) += WHEN s = 'calories' AND energy(i) THEN STRING(energy(i));
value(Sku i, STRING s) += WHEN s = 'fats' AND fats(i) THEN STRING(fats(i));
value(Sku i, STRING s) += WHEN s = 'carbohydrates' AND carbohydrates(i) THEN STRING(carbohydrates(i));
value(Sku i, STRING s) += WHEN s = 'shelf_life' AND expiryDays(i) THEN STRING(expiryDays(i));
useCustomIngredients = ABSTRACT BOOLEAN ();
value(Sku i, STRING s) += WHEN s = 'ingredients' AND NOT useCustomIngredients() AND description(i) THEN STRING(description(i));


META attributeCustomValue(attr, val, caption)
    useCustom###attr##Attribute = ABSTRACT BOOLEAN ();
    ##attr##ItemGroup = DATA ItemGroup ();
    name###attr##ItemGroup caption = name(##attr##ItemGroup());
    value(Sku i, STRING s) += WHEN s = val AND i IS Sku AND NOT useCustom###attr##Attribute() THEN (IF level(##attr##ItemGroup(), itemGroup(i)) THEN 'true' ELSE 'false');
    EXTEND FORM integrationData
        PROPERTIES name###attr##ItemGroup();
    DESIGN integrationData{
        sberMarket{
            MOVE PROPERTY(name###attr##ItemGroup());
        }
    }
END

@attributeCustomValue(privateLabel, 'is_private_label', 'Группа атрибута Собственное производство');
@attributeCustomValue(ownBrand, 'is_own_brand', 'Группа атрибута Собственная торговая марка');
@attributeCustomValue(alcoholProuct, 'is_alcohol', 'Группа атрибута Алкоголь');

value(Sku i, STRING s) += WHEN s = 'min_sell_quantity' AND i IS Sku AND passScalesQuantum(i) THEN STRING(passScalesQuantum(i));
//подакцизный товар
useCustomExcisable = ABSTRACT BOOLEAN ();
value(Sku i, STRING s) += WHEN s = 'is_excisable' AND i IS Sku AND NOT useCustomExcisable() THEN 'false';


online = ABSTRACT CASE BOOLEAN (Sku);
online (Sku s) += WHEN groupTypeSberMarket() AND group(groupTypeSberMarket(), s) THEN TRUE;

position = PARTITION SUM 1 ORDER (Sku s) BY online(s);

useCustomName = ABSTRACT BOOLEAN ();
nameSber = ABSTRACT CASE ISTRING[255] (Sku);
nameSber(Sku i) += WHEN name(i) AND NOT useCustomName() THEN name(i);

useCustomDescription = ABSTRACT BOOLEAN ();
descriptionSber = ABSTRACT CASE STRING (Sku);
descriptionSber(Sku i) += WHEN description(i) AND NOT useCustomDescription() THEN STRING(description(i));

FORM items FORMEXTID 'null'
    OBJECTS sku = Sku EXTID 'data'
    PROPERTIES id(sku) EXTID 'id', = nameSber(sku) EXTID 'name', = IF active(sku) THEN 'ACTIVE' ELSE 'INACTIVE' EXTID 'status',
        = IF split(sku) THEN 'per_kilo' EXTID 'pack_type', = STRING(netWeight(sku)) EXTID 'weight_netto',
        descriptionSber(sku) EXTID 'description', position(sku)
    FILTERS online(sku), id(sku)
    
    OBJECTS image = Sku EXTID 'images'
    PROPERTIES urlHttpAccess(image) EXTID 'url', =id(image) + '.' + extension(FILE(image(image))) EXTID 'name'
    FILTERS image = sku

    OBJECTS b = Barcode.Barcode EXTID 'barcodes'
    PROPERTIES id(b) EXTID 'value'
    FILTERS sku(b) = sku, id(b)

    OBJECTS c = CustomGroup EXTID 'categories_ids'
    PROPERTIES id(c) EXTID 'value'
    FILTERS c = customGroup[CustomGroupType, Sku](groupTypeSberMarket(), sku) AND groupTypeSberMarket()  

    OBJECTS attributes = STRING
    PROPERTIES VALUE(attributes) EXTID 'attribute'
    FILTERS value(sku, attributes)

    OBJECTS attributeValues = STRING EXTID 'values'
    PROPERTIES value(sku, attributeValues) EXTID 'value'
    FILTERS attributeValues = attributes
;
sort = DATA LOCAL INTEGER (Sku);

sendItems 'Выгрузить товары'(){
    sort(Sku s) <- PARTITION SUM 1 IF online(s) ORDER s;
    auth();
    IF (GROUP SUM 1 IF online(Sku s)) >= 1000 THEN {
        LOCAL maxSku = INTEGER ();
        LOCAL maxStep = INTEGER ();
        maxSku() <- GROUP MAX sort(Sku s);
        maxStep() <- (maxSku() / 1000) (+) 1 IF mod(maxSku(), 1000);
        FOR iterate(INTEGER i, 0, maxStep() - 1) DO{
            EXPORT items FILTERS (sort(sku) > (i * 1000) AND sort(sku) <= ((i + 1) * 1000));
            LOCAL response = FILE();
            TRY {
                EXTERNAL HTTP PUT 'https://merchant-api.sbermarket.ru/api/v1/import/offers'
                    HEADERS headers
                    PARAMS exportFile()
                    TO response
                ;
            } CATCH {
                fileToString(response());
                MESSAGE (CONCAT '\n', '[Товары]', 'Ошибка при выгрузке на шаге' + (i + 1) + ' из ' + maxStep(), resultString(), messageCaughtException()) NOWAIT;
                RETURN;
            }
        }
    } ELSE {
        EXPORT items JSON;
        LOCAL response = FILE();
        TRY {
            EXTERNAL HTTP PUT 'https://merchant-api.sbermarket.ru/api/v1/import/offers'
                HEADERS headers
                PARAMS exportFile()
                TO response
            ;
        } CATCH {
            fileToString(response());
            MESSAGE (CONCAT '\n', '[Товары]', 'Ошибка при выгрузке на шаге 1 из 1', resultString(), messageCaughtException()) NOWAIT;
            RETURN;
        }
    }
}


//Управление остатками
stock = ABSTRACT CASE NUMERIC[16,2] (Sku, DepartmentStore);
useCustomStock = ABSTRACT BOOLEAN ();
stock (Sku s, DepartmentStore d) += WHEN s IS Sku AND d IS DepartmentStore AND NOT useCustomStock() THEN NUMERIC[16,2](currentBalance(s, d) IF currentBalance(s, d) > 0) ;

FORM stocks FORMEXTID 'null'
    OBJECTS stock = (d = DepartmentStore, s = Sku) EXTID 'data'
    PROPERTIES id(s) EXTID 'offer_id', idSber(d) EXTID 'outlet_id', = OVERRIDE STRING(stock(s, d)), '0' EXTID 'stock'
    FILTERS online(s), idSber(d)
;

sendStocks 'Выгрузить остатки(по магазину)'(DepartmentStore d){
    sort(Sku s) <- PARTITION SUM 1 IF online(s) ORDER s;
    auth();
    IF (GROUP SUM 1 IF online(Sku s)) >= 1000 THEN {
        LOCAL maxSku = INTEGER ();
        LOCAL maxStep = INTEGER ();
        maxSku() <- GROUP MAX sort(Sku s);
        maxStep() <- (maxSku() / 1000) (+) 1 IF mod(maxSku(), 1000);
        FOR iterate(INTEGER i, 0, maxStep() - 1) DO{
            EXPORT stocks OBJECTS d = d FILTERS (sort(s) > (i * 1000) AND sort(s) <= ((i + 1) * 1000));
            LOCAL response = FILE();
            TRY {
                EXTERNAL HTTP PUT 'https://merchant-api.sbermarket.ru/api/v1/import/stocks'
                    HEADERS headers
                    PARAMS exportFile()
                    TO response
                ;
            } CATCH {
                fileToString(response());
                MESSAGE (CONCAT '\n', '[Остатки] -' + name(d), 'Ошибка при выгрузке на шаге' + (i + 1) + ' из ' + maxStep(), resultString(), messageCaughtException()) NOWAIT;
                RETURN;
            }
        }
    } ELSE {
        EXPORT stocks OBJECTS d = d JSON;
        LOCAL response = FILE();
        TRY {
            EXTERNAL HTTP PUT 'https://merchant-api.sbermarket.ru/api/v1/import/stocks'
                HEADERS headers
                PARAMS exportFile()
                TO response
            ;
        } CATCH {
            fileToString(response());
            MESSAGE (CONCAT '\n', '[Остатки] -' + name(d), 'Ошибка при выгрузке на шаге 1 из 1', resultString(), messageCaughtException()) NOWAIT;
            RETURN;
        }
    }
}

sendStocks'Выгрузить остатки(по всем)'(){
    FOR idSber(DepartmentStore d) DO sendStocks(d);
}
sendSelectStocks'Выгрузить остатки(отм.)'(){
    FOR in(DepartmentStore d) AND idSber(d) DO sendStocks(d);
}

//Управление ценами
priceListTypeRegular = DATA PriceListType ();
namePriceListTypeRegularSM 'Вид цены(СберМаркет)' = name(priceListTypeRegular());
useCustomPrice = ABSTRACT BOOLEAN ();


priceListTypePromo = DATA PriceListType ();
namePriceListTypePromoSM 'Вид промо цены(СберМаркет)' = name(priceListTypePromo());
useCustomPromoPrice = ABSTRACT BOOLEAN ();

EXTEND FORM integrationData
    PROPERTIES () namePriceListTypeRegularSM SHOWIF NOT useCustomPrice(), 
        namePriceListTypePromoSM SHOWIF NOT useCustomPromoPrice()
;

DESIGN integrationData{
    sberMarket{
        MOVE PROPERTY (namePriceListTypeRegularSM());
        MOVE PROPERTY (namePriceListTypePromoSM());
    }
}

price = ABSTRACT CASE NUMERIC[16,2](Sku, DepartmentStore);
price (Sku s, DepartmentStore d) += WHEN s IS Sku AND d IS DepartmentStore AND NOT useCustomPrice() 
    THEN NUMERIC[16,2](priceA(priceListTypeRegular(), s, d, currentDateTime()));

promoPrice = ABSTRACT CASE NUMERIC[16,2] (Sku, DepartmentStore);

promoPrice (Sku s, DepartmentStore d) += WHEN s IS Sku AND d IS DepartmentStore AND NOT useCustomPromoPrice() 
    THEN NUMERIC[16,2](priceA(priceListTypePromo(), s, d, currentDateTime()));

promoStart = ABSTRACT CASE DATE (Sku, DepartmentStore);
promoStart (Sku s, DepartmentStore d) += WHEN s IS Sku AND d IS DepartmentStore AND NOT useCustomPromoPrice() THEN 
    DATE(fromDateTimeA(priceListTypePromo(), s, d, currentDateTime()));

promoEnd = ABSTRACT CASE DATE (Sku, DepartmentStore);
promoEnd (Sku s, DepartmentStore d) += WHEN s IS Sku AND d IS DepartmentStore AND NOT useCustomPromoPrice() THEN
    DATE(toDateTimeA(priceListTypePromo(), s, d, currentDateTime()));

showPromo (Sku s, DepartmentStore d) = promoPrice(s, d) < price(s, d) AND promoStart(s, d) < promoEnd(s, d);

GROUP price;
GROUP price_promo;

vat (Sku s) = CASE 
        WHEN valueVAT(s) = 20 THEN 'VAT20'
        WHEN valueVAT(s) = 10 THEN 'VAT10'
        WHEN valueVAT(s) = 0 THEN 'VAT0'
        WHEN NOT valueVAT(s) THEN 'NO_VAT'
;

FORM prices FORMEXTID 'null'
    OBJECTS price = (s = Sku, d = DepartmentStore) EXTID 'data'
    PROPERTIES id(s) EXTID 'offer_id', idSber(d) EXTID 'outlet_id', vat(s) EXTID 'vat'
    PROPERTIES IN price  = STRING(price(s, d)) EXTID 'amount', = IF price(s, d) THEN 'RUB' EXTID 'currency'
    PROPERTIES IN price_promo = IF showPromo(s, d) THEN STRING(promoPrice(s, d)) EXTID 'amount', = IF showPromo(s, d) THEN 'RUB' EXTID 'currency'
    PROPERTIES = IF showPromo(s, d) THEN toChar(promoStart(s, d), 'yyyy-MM-dd') EXTID 'promo_start_at', 
        = IF showPromo(s, d) THEN toChar(promoEnd(s, d), 'yyyy-MM-dd') EXTID 'promo_end_at'
    FILTERS online(s), idSber(d), price(s, d)
;

sendPrices 'Выгрузить цены(по магазину)'(DepartmentStore d){
    sort(Sku s) <- PARTITION SUM 1 IF online(s) ORDER s;
    auth();
    IF (GROUP SUM 1 IF online(Sku s)) >= 1000 THEN {
        LOCAL maxSku = INTEGER ();
        LOCAL maxStep = INTEGER ();
        maxSku() <- GROUP MAX sort(Sku s);
        maxStep() <- (maxSku() / 1000) (+) 1 IF mod(maxSku(), 1000);
        FOR iterate(INTEGER i, 0, maxStep() - 1) DO{
            EXPORT prices OBJECTS d = d FILTERS (sort(s) > (i * 1000) AND sort(s) <= ((i + 1) * 1000));
            LOCAL response = FILE();
            TRY {
                EXTERNAL HTTP PUT 'https://merchant-api.sbermarket.ru/api/v1/import/prices'
                    HEADERS headers
                    PARAMS exportFile()
                    TO response
                ;
            } CATCH {
                fileToString(response());
                MESSAGE (CONCAT '\n', '[Цены] -' + name(d), 'Ошибка при выгрузке на шаге' + (i + 1) + ' из ' + maxStep(), resultString(), messageCaughtException()) NOWAIT;
                RETURN;
            }
        }
    } ELSE {
        EXPORT prices OBJECTS d = d JSON;
        LOCAL response = FILE();
        TRY {
            EXTERNAL HTTP PUT 'https://merchant-api.sbermarket.ru/api/v1/import/prices'
                HEADERS headers
                PARAMS exportFile()
                TO response
            ;
        } CATCH {
            fileToString(response());
            MESSAGE (CONCAT '\n', '[Цены] -' + name(d), 'Ошибка при выгрузке на шаге 1 из 1', resultString(), messageCaughtException()) NOWAIT;
            RETURN;
        }
    }
}

sendPrices'Выгрузить цены(по всем)'(){
    FOR idSber(DepartmentStore d) DO sendPrices(d);
}
sendSelectPrices'Выгрузить цены(отм.)'(){
    FOR in(DepartmentStore d) AND idSber(d) DO sendPrices(d);
}
showSelectAction = GROUP SUM 1 IF in(DepartmentStore d) AND idSber(d);

EXTEND FORM internetCatalogs
    OBJECTS sberDS = DepartmentStore
    PROPERTIES (sberDS) in, name READONLY, idSber
    PROPERTIES (sberDS) sendStocks, sendPrices
    PROPERTIES () sendPrices, sendStocks, sendItems, sendCategories
    PROPERTIES () SHOWIF showSelectAction() sendSelectStocks, sendSelectPrices
    FILTERGROUP sberDSF 
        FILTER 'С ID СберМаркет' idSber(sberDS) DEFAULT
;

DESIGN internetCatalogs{
    tabContainer{
        NEW sberMarket{
            caption = 'СберМаркет';
            MOVE BOX(sberDS){
                caption = 'Склады';
            }
            NEW actions{
                caption = 'Действия';
                horizontal = TRUE;
                alignment = STRETCH;
                NEW masterData{
                    caption = 'Справочники';
                    horizontal = TRUE;
                    MOVE PROPERTY (sendCategories());
                    MOVE PROPERTY (sendItems());
                }
                NEW stocks{
                    caption = 'Остатки';
                    horizontal = TRUE;
                    MOVE PROPERTY (sendStocks(sberDS));
                    MOVE PROPERTY (sendSelectStocks());
                    MOVE PROPERTY (sendStocks());
                }
                NEW prices{
                    caption = 'Цены';
                    horizontal = TRUE;
                    MOVE PROPERTY (sendPrices(sberDS));
                    MOVE PROPERTY (sendSelectPrices());
                    MOVE PROPERTY (sendPrices());
                }
            }
        }
    }
}

//планировщик
@defineStaticObject(TimeInterval, 'Интервал');
period = ABSTRACT CASE INTEGER (TimeInterval);

META addTimeInterval(name, caption, value)
    EXTEND CLASS TimeInterval{
        name caption
    }
    period (TimeInterval i) += WHEN i = TimeInterval.##name THEN value;
END
@addTimeInterval(onceDay, 'Раз в день', 86400);
@addTimeInterval(sixHours, 'Каждые 6 часов', 21600);

@addTimeInterval(threeHours, 'Каждые 3 часа', 10800);
@addTimeInterval(oneHours, 'Каждый час', 3600);

@addTimeInterval(halHour, 'Каждые 30 минут', 1800);
@addTimeInterval(quarterHour, 'Каждые 15 минут', 900);

sendPeriodMasterData = DATA TimeInterval ();
namePeriodMasterData 'Выгружать справочники(товары и категории)' = name(sendPeriodMasterData());
periodMasterData = period(sendPeriodMasterData());

sendPeriodPricesStocks = DATA TimeInterval ();
namePeriodPricesStocks 'Выгружать остатки и цены' = name(sendPeriodPricesStocks());
periodPricesStocks = period(sendPeriodPricesStocks());

putScheduledTask '{scheduler.default.data.load.default.scheduled.task}'(STRING[100] iname, DATETIME startTime, INTEGER integer, SchedulerStartType type, BOOLEAN active)  {
    IF NOT(scheduledTask(iname)) THEN NEW s = UserScheduledTask {
        name(s) <- iname;
    }
    FOR ScheduledTask s = scheduledTask(iname) DO {
        name(s) <- iname;
        active(s) <- active;
        startDate(s) <- startTime;
        period(s) <- integer;
        schedulerStartType(s) <- type;
    }
}
scheduledTaskDetail(STRING iname, STRING prop) = GROUP MAX ScheduledTaskDetail d BY name(scheduledTask(d)), canonicalNameAction(d);

putScheduledTaskDetail '{scheduler.default.data.load.default.scheduled.task.detail}'(STRING[100] iname, INTEGER order, STRING prop, BOOLEAN active){
    IF NOT (scheduledTaskDetail(iname, prop)) THEN NEW d = UserScheduledTaskDetail {
        action(d) <- actionCanonicalName(prop);
        scheduledTask(d) <- scheduledTask(iname);
    }
    FOR ScheduledTaskDetail d = scheduledTaskDetail(iname, prop) DO{
        order(d) <- order;
        active(d) <- active;
    }
}

createScheduledTaskSber 'Создать задания планировщика CберМаркет'(){
    IF NOT periodMasterData() THEN{
        MESSAGE 'Не выбран период выгрузки справочников';
        RETURN;
    }
    IF NOT periodPricesStocks() THEN {
        MESSAGE 'Не выбран период выгрузки цен и остатков';
        RETURN;
    }
    IF (NOT GROUP SUM 1 IF online(Sku s)) THEN{
        MESSAGE 'Не определены товары для выгрузки';
        RETURN;
    }
    IF actionCanonicalName('SberMarket.sendCategories[]') AND actionCanonicalName('SberMarket.sendItems[]')
        AND actionCanonicalName('SberMarket.sendStocks[]') AND actionCanonicalName('SberMarket.sendPrices[]') THEN {

        //справочники
        putScheduledTask('SberMarket[Товары и категории]', dateTimeToDateTime(currentDate(), 08:00), periodMasterData(),
            SchedulerStartType.afterStart, TRUE);
        putScheduledTaskDetail ('SberMarket[Товары и категории]', 1, 'SberMarket.sendCategories[]', TRUE);
        putScheduledTaskDetail ('SberMarket[Товары и категории]', 2, 'SberMarket.sendItems[]', TRUE);

        //остатки и цены
        putScheduledTask('SberMarket[Остатки и цены]', dateTimeToDateTime(currentDate(), 08:00), periodPricesStocks(),
            SchedulerStartType.afterStart, TRUE);
        putScheduledTaskDetail ('SberMarket[Остатки и цены]', 1, 'SberMarket.sendPrices[]', TRUE);
        putScheduledTaskDetail ('SberMarket[Остатки и цены]', 2, 'SberMarket.sendStocks[]', TRUE);
        APPLY NESTED LOCAL;
    } ELSE MESSAGE 'Не определены действия для планировщика';
}

captionScheduledTaskSber = IF scheduledTask('SberMarket[Товары и категории]') 
    OR scheduledTask('SberMarket[Товары и категории]') THEN 'Обновить задания планировщика CберМаркет'
    ELSE 'Создать задания планировщика CберМаркет'
;
    
EXTEND FORM internetCatalogs
    PROPERTIES() namePeriodMasterData, namePeriodPricesStocks, createScheduledTaskSber HEADER captionScheduledTaskSber()
;

DESIGN internetCatalogs{
    sberMarket{
        NEW scheduler{
            caption = 'Планировщик';
            horizontal = TRUE;
            MOVE PROPERTY (namePeriodMasterData());
            MOVE PROPERTY (namePeriodPricesStocks());
            MOVE PROPERTY (createScheduledTaskSber());
        }
    }
}