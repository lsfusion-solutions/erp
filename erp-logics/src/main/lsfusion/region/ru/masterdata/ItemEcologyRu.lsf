MODULE ItemEcologyRu;

REQUIRE ItemRu, CrossImport;

NAMESPACE Item;

CLASS EcologyPackType 'Тип упаковки (экология)';
TABLE ecologyPackType(EcologyPackType);

@defineExternalizable(ecologyPackType, STRING[100]);
name 'Наименование' = DATA ISTRING[100](EcologyPackType) IN id;
ecologyPackTypeName = GROUP NAGGR EcologyPackType e BY name(e);


FORM ecologyPackType 'Тип упаковки (экология)'
    OBJECTS t=EcologyPackType PANEL
    PROPERTIES(t) name, id SHOWIF showIDs()
    EDIT EcologyPackType OBJECT t
;

FORM ecologyPackTypes 'Типы упаковки (экология)'
    OBJECTS t=EcologyPackType
    PROPERTIES(t) READONLY name, id SHOWIF showIDs()
    PROPERTIES(t) NEWSESSION NEW, EDIT, deleteb=DELETE
    ORDERS name(t)
    LIST EcologyPackType OBJECT t
;
DESIGN ecologyPackTypes { BOX { size = (600, 400); } }

CLASS EcologyMaterial 'Материал (экология)';
TABLE ecologyMaterial(EcologyMaterial);

@defineExternalizable(ecologyMaterial, STRING[100]);
name 'Наименование' = DATA ISTRING[100](EcologyMaterial) IN id;
ecologyMaterialName = GROUP NAGGR EcologyMaterial e BY name(e);


FORM ecologyMaterial 'Материал (экология)'
    OBJECTS t=EcologyMaterial PANEL
    PROPERTIES(t) name, id SHOWIF showIDs()
    EDIT EcologyMaterial OBJECT t
;

FORM ecologyMaterials 'Материал (экология)'
    OBJECTS t=EcologyMaterial
    PROPERTIES(t) READONLY name, id SHOWIF showIDs()
    PROPERTIES(t) NEWSESSION NEW, EDIT, deleteb=DELETE
    ORDERS name(t)
    LIST EcologyMaterial OBJECT t
;
DESIGN ecologyMaterials { BOX { size = (600, 400); } }

TABLE ItemEcologyPackTypeMaterial(Item,EcologyPackType,EcologyMaterial);

value 'Содержание (кг. на единицу товара)' = DATA NUMERIC[16,6](Item,EcologyPackType,EcologyMaterial);

EXTEND FORM item
    OBJECTS ep = EcologyPackType
    OBJECTS em = EcologyMaterial
    PROPERTIES name(em) READONLY, value(i,ep,em) COLUMNS (ep) HEADER (name(ep))
;

DESIGN item{
    itemDetail{
        MOVE BOX(em) {
            caption = 'Экология';            
        }
    }
}
NAVIGATOR {
    skuNavigator {
        NEW FOLDER skuEcology 'Экология'{
            NEW ecologyPackTypes;
            NEW ecologyMaterials;
        }
    }
}

importMaterialMigrate 'Импорт экологических параметров' (){
    ASK 'Хотите очистить все данные (упаковка, тип упаковки, содержание)?' DO NEWSESSION {
        value (Item it, EcologyPackType ep, EcologyMaterial em) <- NULL;
        DELETE EcologyPackType ep WHERE ep IS EcologyPackType;
        DELETE EcologyMaterial ep WHERE ep IS EcologyMaterial;
        APPLY;
    }

    NEWSESSION{
        INPUT f = EXCELFILE DO {
//            sheetNames(f);
//            LOCAL page = INTEGER ();
//            page() <- (OVERRIDE (GROUP MAX INTEGER  i IF sheetNames(i)=='Упаковка'), 0) +1;
//            IF page() THEN {
//                crossImport(f, page());
//            } ELSE {
//                crossImport(f);
//            }
            crossImport(f);
            imported(INTEGER c, INTEGER r) <- trim(imported(c, r));

            FOR [GROUP SUM 1 IF imported(INTEGER c, 1) AND c >= 5 BY imported(c, 1)](STRING str) AND NOT ecologyPackTypeName(str) DO NEW ep = EcologyPackType{
                name(ep) <- str;
            }
            FOR [GROUP SUM 1 IF imported(INTEGER c, 2) AND c >= 5 BY imported(c, 2)](STRING str) AND NOT ecologyMaterialName(str) DO NEW em = EcologyMaterial{
                name(em) <- str;
            }

            FOR imported(INTEGER c, INTEGER r) AND r >= 3 AND c >= 5 AND Item it == item(imported(1, r)) DO {
                value (it, EcologyPackType ep, EcologyMaterial em) <- NUMERIC[16,6] (imported(c, r))
                    WHERE ep == ecologyPackTypeName(imported((GROUP MAX INTEGER cc IF cc < c AND imported(cc, 1)), 1)) AND ecologyMaterialName(imported(c, 2)) == em
                            AND NUMERIC[16,6] (imported(c, r))!=0.0;
            }
            LOCAL NESTED message = TEXT ();
            message() <- GROUP CONCAT (CONCAT ' ', imported(0,INTEGER r), '('+imported(1,r)+')',  imported(2,r), imported(4,r)) IF imported(1,r) AND NOT item(imported(1, r)) AND r >= 3, '\n' ORDER r;
            message() <- 'Импорт завершен.\nНе найдено слеюующее к-во товаров: '+(GROUP SUM 1 IF  imported(1,INTEGER r) AND NOT item(imported(1, r)) AND r >= 3)+'\n'+message();
            APPLY;
            IF NOT canceled() THEN {
                IF message() THEN {
                    MESSAGE message() NOWAIT;
                } ELSE {
                    MESSAGE 'Выполнено';
                }
            }
        }
    }
}

EXTEND FORM items
    PROPERTIES () importMaterialMigrate TOOLBAR DRAW i
;
DESIGN  items{
    actionsImport{
        MOVE PROPERTY (importMaterialMigrate());
    }
}