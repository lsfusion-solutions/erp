MODULE ImportDocEDSTopByMNS;

REQUIRE EDSTopByMNS, DocumentImportMNS;

NAMESPACE MNS;

aliasEDSService (ImportDocMNS i) = OVERRIDE aliasEDSService(currentUser()), aliasEDSService(customerStock(invoice(i))), aliasEDSService(legalEntity(i));
passwordEDSService (ImportDocMNS i) = OVERRIDE passwordEDSService(currentUser()), passwordEDSService(customerStock(invoice(i))), passwordEDSService(legalEntity(i));
EDSService(ImportDocMNS i) = OVERRIDE EDSServiceTopBy(currentUser()), EDSServiceTopBy(customerStock(invoice(i))), EDSServiceTopBy(legalEntity(i));

sign(ImportDocMNS e, STRING contentSubXML, BOOLEAN interactive) + {
    IF signatureApp() == SignatureApp.scCryptoProxy THEN {
        IF edsApplication(EDSService(e)) == EDSApplication.sccp THEN {
            IF aliasEDSService(e) AND (OVERRIDE passwordEDSService(), passwordEDSService(e)) THEN {
                keyID() <- aliasEDSService(e);
                password() <- (OVERRIDE passwordEDSService(), passwordEDSService(e));
                sign(contentSubXML, EDSService(e));
            } ELSE {
                IF interactive THEN {
                    MESSAGE ' Документ ' + seriesNumber(e) + ' не подписан: Alias или Пароль ключа не задан' NOWAIT;
                }
                logToFile('edi', ' error: Alias or Password for key not found');
            }
            RETURN;
        }
    }
}