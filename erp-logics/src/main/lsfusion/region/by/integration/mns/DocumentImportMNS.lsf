MODULE DocumentImportMNS;

REQUIRE DocumentMNS, PurchaseInvoice, LegalEntityBy, Lot, PurchaseInvoiceTracking, PurchaseShipmentLot, LegalEntityCU, LegalEntityMNS;

CLASS ImportDocMNS 'Документ выгрузки в МНС (подача сведений о ввозе)';

id = STRING[50](ImportDocMNS s);
district 'Наименование района, города, района в городе' = DATA STRING(ImportDocMNS);
district2 'Наименование района' = DATA STRING(ImportDocMNS);
dateTimeSign 'Дата/время' = DATA DATETIME (ImportDocMNS);
dateTimeSignXML 'Дата/время' = DATA STRING (ImportDocMNS);
seriesNumber 'Серия/номер' = DATA STRING(ImportDocMNS);
correctionNumber 'Номер корректировки' = DATA INTEGER (ImportDocMNS);
nameLegalEntity 'Организация' = DATA STRING(ImportDocMNS);

// Грузоотправильтель
sidCountryShipper 'Код страны грузоотправителя' = DATA STRING(ImportDocMNS);
nameCountryShipper 'Наименование страны грузоотправильтеля' = DATA STRING(ImportDocMNS);
idShippingDocument 'Код транспортного документа' = DATA STRING(ImportDocMNS);
nameShippingDocument 'Наименование сопроводительного документа' = DATA STRING(ImportDocMNS);
dateShippingDocument 'Дата сопроводительного документа' = DATA STRING (ImportDocMNS);
UNPShipper 'Идентификационный код грузоотправителя' = DATA STRING (ImportDocMNS);
nameShipper 'Грузоотправильтель' = DATA STRING(ImportDocMNS);
numberShippingDocument 'Регистрационный номер сопроводительного документа' = DATA STRING(ImportDocMNS);
nameShipperChief 'ФИО руководителя' = DATA STRING(ImportDocMNS);

// Продавец
sidCountrySeller 'Код страны продавца' = DATA STRING(ImportDocMNS);
nameCountrySeller 'Наименование страны продавца' = DATA STRING(ImportDocMNS);
UNPSeller 'Идентификационный код продавца' = DATA STRING (ImportDocMNS);
nameSeller 'Продавец' = DATA STRING(ImportDocMNS);

CLASS ImportDocMNSDetail 'Строка документа выгрузки в МНС (подача сведений о ввозе)';
TABLE importDocMNS(Purchase.InvoiceDetail);

importDocMNS = DATA ImportDocMNS(ImportDocMNSDetail) NONULL DELETE INDEXED;
invoiceDetail = DATA Purchase.InvoiceDetail(ImportDocMNSDetail) INDEXED;
index 'Номер строки' = DATA INTEGER (ImportDocMNSDetail);
sku 'Код товара' = DATA Sku(ImportDocMNSDetail);
codeSku 'Код товара' = DATA STRING(ImportDocMNSDetail);
extraCodeSku 'Дополнительный четырехзначный код' = DATA STRING[4](ImportDocMNSDetail);
gtin 'GTIN' = DATA STRING(ImportDocMNSDetail);
nameSku 'Наименование товара' = DATA STRING(ImportDocMNSDetail);
uomSku 'Единица измерения' = DATA STRING(ImportDocMNSDetail);
quantityUomSku 'Количество товара' =  DATA NUMERIC[16,6] (ImportDocMNSDetail); // TODO вернуть после теста на DATA NUMERIC[16,4] (ImportDocMNSDetail);
trackingUOMCustomsGroup 'Единица измерения (электронных накладных)' = DATA STRING[3](ImportDocMNSDetail);
priceInvoiceDetail 'Учетная цена (ед. изм. в эл. накладных)' = DATA NUMERIC[16,2](ImportDocMNSDetail);//нужно 12,2
sumInvoiceDetail 'Учетная стоимость товаров' = DATA NUMERIC[16,2](ImportDocMNSDetail);
quantityInvoiceDetail 'Количество товара (ед. изм. в эл. накладных)' = DATA NUMERIC[16,3] (ImportDocMNSDetail); // TODO вернуть после теста на DATA NUMERIC[16,4](ImportDocMNSDetail); // нужно 12,5

CLASS LotImportDocMNSDetail 'Строка марки документа выгрузки в МНС';
importDocMNSDetail = DATA ImportDocMNSDetail (LotImportDocMNSDetail) NONULL DELETE;
lot = DATA Lot(LotImportDocMNSDetail);
encodeBase64Code 'Код маркировки единицы товара' = DATA STRING(LotImportDocMNSDetail);

//id (ImportDocMNS s) = STRING[50](s);
dateTime 'Дата отправки' =  DATA DATETIME (ImportDocMNS);
invoice = DATA Purchase.Invoice (ImportDocMNS) NONULL DELETE;
legalEntity = DATA  LegalEntity(ImportDocMNS);
prevImportDocMNS = DATA LOCAL ImportDocMNS(ImportDocMNS);

//prevDateTime 'Дата представляемых сведений'  = DATA STRING(ImportDocMNS);
prevDocNumber 'Регистрационный номер представляемых сведений' = DATA STRING(ImportDocMNS);

refRecordId 'Уникальный идентифика-тор исходного документа' = DATA INTEGER (ImportDocMNS);
//
// Ответ
recordId 'Идентификатор записи (ответ)' = DATA  INTEGER(ImportDocMNS);
statusCode 'Статус документа (ответ)' = DATA  STRING(ImportDocMNS);
documentReplyDateTime 'Дата и время подтверждения портала о приёме документа (ответ)' = DATA DATETIME(ImportDocMNS);
reply 'XML-документ квитанция подтверждение портала о приёме документа (ответ)' = DATA STRING(ImportDocMNS);
SPTInternalDateTime 'Дата и время создания документа в системе прослеживаемости (ответ)' = DATA DATETIME(ImportDocMNS);
resultDescription 'Поясняющий текст к результату обработки (ответ)' = DATA  STRING(ImportDocMNS);
resultCode 'Код результата обработки (ответ)' = DATA INTEGER(ImportDocMNS);

version = DATA LOCAL INTEGER ();
type = DATA LOCAL STRING();
rectification = DATA LOCAL BOOLEAN ();
kodIMNS = DATA LOCAL STRING();
UNP = DATA LOCAL STRING();
year = DATA LOCAL INTEGER();

lastImportDocMNS (Purchase.Invoice i) = GROUP LAST ImportDocMNS d ORDER dateTime(d) BY invoice(d);
lastImportDocDetailMNS (Purchase.InvoiceDetail id ) = GROUP LAST ImportDocMNSDetail idm  
    IF lastImportDocMNS(invoice(id))==importDocMNS(idm) AND invoiceDetail(idm)==id ORDER dateTime(importDocMNS(idm)) MATERIALIZED TABLE importDocMNS; 

GROUP district EXTID 'LetterTraceabilityImport_v1_f001';
GROUP district2 EXTID 'LetterTraceabilityImport_v1_f001A';
GROUP groupImportDoc EXTID 'LetterTraceabilityImport_v1_f002';
GROUP groupDetail EXTID 'LetterTraceabilityImport_v1_t001';

FORM originalDocument FORMEXTID '=http://mns/edeclaration/xml/letters/traceabilityimport/ver1:LetterTraceabilityImport'
    PROPERTIES()
        version ATTR,       // required
        type ATTR,          // required
        kodIMNS ATTR,       // required
        UNP ATTR,           // required
        year ATTR           // required

    PROPERTIES = IF rectification() THEN TTRUE ELSE TFALSE EXTID 'rectification' ATTR // required

    OBJECTS d = ImportDocMNS EXTID ''
        PROPERTIES(d) IN district district EXTID 'value' // required
        PROPERTIES(d) IN district2 district2 EXTID 'value' // required

    PROPERTIES(d) IN groupImportDoc
        seriesNumber EXTID 'LetterTraceabilityImport_v1_f002_s1', // required
        dateTimeSignXML EXTID 'LetterTraceabilityImport_v1_f002_s2', // required
        nameLegalEntity EXTID 'LetterTraceabilityImport_v1_f002_s3', // required
            
        sidCountryShipper EXTID 'LetterTraceabilityImport_v1_f002_s4', // required
        nameCountryShipper EXTID 'LetterTraceabilityImport_v1_f002_s5', // required
        idShippingDocument EXTID 'LetterTraceabilityImport_v1_f002_s6', // not requred
        nameShippingDocument EXTID 'LetterTraceabilityImport_v1_f002_s7', // required
        dateShippingDocument EXTID 'LetterTraceabilityImport_v1_f002_s8', // required
        UNPShipper EXTID 'LetterTraceabilityImport_v1_f002_s9', // required
        nameShipper EXTID 'LetterTraceabilityImport_v1_f002_s10', // required
        numberShippingDocument EXTID 'LetterTraceabilityImport_v1_f002_s11', // required
        nameShipperChief EXTID 'LetterTraceabilityImport_v1_f002_s12', // required
        sidCountrySeller EXTID 'LetterTraceabilityImport_v1_f002_s13', // required
        nameCountrySeller EXTID 'LetterTraceabilityImport_v1_f002_s14', // required
        UNPSeller EXTID 'LetterTraceabilityImport_v1_f002_s15', // required
        nameSeller EXTID 'LetterTraceabilityImport_v1_f002_s16' // required

    OBJECTS dd = ImportDocMNSDetail IN groupDetail EXTID 'LetterTraceabilityImport_v1_t001_ri'
    PROPERTIES(dd)
        index EXTID 'LetterTraceabilityImport_v1_t001_ric1', // required
        codeSku EXTID 'LetterTraceabilityImport_v1_t001_ric2', // required
        extraCodeSku EXTID 'LetterTraceabilityImport_v1_t001_ric2a', // required
        gtin EXTID 'LetterTraceabilityImport_v1_t001_ric2b', // required
        nameSku EXTID 'LetterTraceabilityImport_v1_t001_ric3', // required
        uomSku EXTID 'LetterTraceabilityImport_v1_t001_ric4', // required
        quantityUomSku EXTID 'LetterTraceabilityImport_v1_t001_ric5', // required
        trackingUOMCustomsGroup EXTID 'LetterTraceabilityImport_v1_t001_ric6', // required
        quantityInvoiceDetail EXTID 'LetterTraceabilityImport_v1_t001_ric7', // required
        priceInvoiceDetail EXTID 'LetterTraceabilityImport_v1_t001_ric8', // required
        sumInvoiceDetail EXTID 'LetterTraceabilityImport_v1_t001_ric9'  // required
//        letterTraceabilityImport_v1_t001_ric10 EXTID 'LetterTraceabilityImport_v1_t001_ric10', // Необязательный элемент. Регистрационный номер партии товара 
    FILTERS importDocMNS(dd) == d

    OBJECTS l = LotImportDocMNSDetail EXTID 'LetterTraceabilityImport_v1_t001_ric11'
    PROPERTIES(l)
        encodeBase64Code EXTID 'LetterTraceabilityImport_v1_t001_ric11a' // not required
    FILTERS importDocMNSDetail(l) == dd
;
    

pricePageInventoryDetail 'Учетная цена (ед. изм. в эл. накладных)' = DATA NUMERIC[16,4](ImportDocMNS);
sumPageInventoryDetail 'Учетная стоимость товаров' = DATA NUMERIC[16,4](ImportDocMNS);

exportXMLFile = DATA LOCAL FILE ();

createdImportDocMNS = DATA LOCAL ImportDocMNS();

countDetail 'Кол-во позиций' (ImportDocMNS d) = GROUP SUM 1 IF importDocMNS(ImportDocMNSDetail dd) == d;

allXMLRequiredFields 'Все обязательные поля' (ImportDocMNSDetail dd) =
    index(dd) AND codeSku(dd) AND extraCodeSku(dd) AND gtin(dd) AND nameSku(dd) AND uomSku(dd) AND quantityUomSku(dd) AND
    trackingUOMCustomsGroup(dd) AND quantityInvoiceDetail(dd) AND priceInvoiceDetail(dd) AND sumInvoiceDetail(dd);

missedDetailFields (ImportDocMNS d) = GROUP MIN TRUE IF importDocMNS(ImportDocMNSDetail dd) == d AND NOT allXMLRequiredFields(dd);

allXMLRequiredFields 'Все обязательные поля' (ImportDocMNS d) =
    d IS ImportDocMNS AND version() AND type() AND kodIMNS() AND UNP() AND year() AND
        
    district(d) AND district2(d) AND seriesNumber(d) AND dateTimeSignXML(d) AND nameLegalEntity(d) AND    
    sidCountryShipper(d) AND nameCountryShipper(d) AND nameShippingDocument(d) AND
    dateShippingDocument(d) AND UNPShipper(d) AND nameShipper(d) AND numberShippingDocument(d) AND
    nameShipperChief(d) AND sidCountrySeller(d) AND nameCountrySeller(d) AND UNPSeller(d) AND nameSeller(d) AND

    countDetail(d) AND NOT missedDetailFields(d);

missedFieldsDescription (ImportDocMNSDetail dd) =
    ((CONCAT ' ', '- для позиции документа с', 'номером строки ' + index(dd), 'товар ' + nameSku(dd), 'ш/к ' + idBarcodeSku(invoiceDetail(dd)), 'отсутствует следующая инофрмация: \n') +
    CONCAT ', ',
        'номер строки'  IF NOT index(dd),
        'код ТН ВЭД' IF NOT codeSku(dd),
        'дополнительный четырехзначный код' IF NOT extraCodeSku(dd),
        'GTIN' IF NOT gtin(dd),
        'наименование товара' IF NOT nameSku(dd),
        'единица измерения' IF NOT uomSku(dd),
        'количество товара' IF NOT quantityUomSku(dd),
        'единица измерения (электронных накладных)' IF NOT trackingUOMCustomsGroup(dd),
        'количество товара (ед. изм. в эл. накладных)' IF NOT quantityInvoiceDetail(dd),
        'учетная цена (ед. изм. в эл. накладных)' IF NOT priceInvoiceDetail(dd),
        'учетная стоимость товаров' IF NOT sumInvoiceDetail(dd)) IF dd IS ImportDocMNSDetail AND NOT allXMLRequiredFields(dd);

missedFieldsDescription (ImportDocMNS d) =
    ((CONCAT ' ', 'Для документа ' + seriesNumber(invoice(d)), 'от ' + date(invoice(d)), 'отсутствует следующая информация: \n') + 
    CONCAT '\n ', 
        '- версия' IF NOT version(),
        '- тип' IF NOT type(),
        '- код МНС' IF NOT kodIMNS(),
        '- УНП' IF NOT UNP(),
//        '- признак уточнения' IF NOT rectification(),
        '- год' IF NOT year(),
        '- наименовние района, города, района в городе' IF NOT district(d),
        '- наименовние района' IF NOT district2(d),
        '- серия/номер' IF NOT seriesNumber(d),
        '- дата представляемых сведений' IF NOT dateTimeSignXML(d),
        '- наименование лица, передавшего сведения' IF NOT nameLegalEntity(d),
        '- код страны грузоотправителя' IF NOT sidCountryShipper(d),
        '- наименование страны грузоотправителя' IF NOT nameCountryShipper(d),
        '- дата сопроводительного документа' IF NOT dateShippingDocument(d),
        '- идентификационный код грузоотправителя' IF NOT UNPShipper(d),
        '- наименование грузоотправителя' IF NOT nameShipper(d),
        '- наименование грузоотправителя' IF NOT numberShippingDocument(d),
        '- руководитель  грузоотправителя' IF NOT nameShipperChief(d),
        '- код страны продавца' IF NOT sidCountrySeller(d),
        '- наименование страны продавца' IF NOT nameCountrySeller(d), 
        '- идентификационный код продавца' IF NOT UNPSeller(d), 
        '- наименование продавца' IF NOT nameSeller(d),

        GROUP CONCAT missedFieldsDescription(ImportDocMNSDetail dd) IF importDocMNS( dd) == d AND NOT allXMLRequiredFields(dd), '\n' ORDER dd
        
        ) IF d IS ImportDocMNS AND NOT allXMLRequiredFields(d);
;

createImportDocMNS (Purchase.Invoice i) {
    createdImportDocMNS() <- NULL;

    NEW doc = ImportDocMNS {
        createdImportDocMNS() <- doc;
        invoice(doc) <- i;
//        dateTime(doc) <- dateTime(i);
        dateTime(doc) <- currentDateTime();
        legalEntity(doc) <- customer(i);
        prevImportDocMNS(doc) <- PREV(lastImportDocMNS(i));
        refRecordId (doc) <- recordId(prevImportDocMNS(doc));

        district(doc) <- district(legalEntity(doc));
        district2(doc) <- district(legalEntity(doc));
        dateTimeSign(doc) <- currentDateTime();
        dateTimeSignXML(doc) <- toChar(dateTimeSign(doc), 'yyyy-MM-dd+03:00');

        nameLegalEntity(doc) <- name(legalEntity(doc));
        prevImportDocMNS(doc) <- PREV (lastImportDocMNS(i));
        correctionNumber(doc) <- correctionNumber(prevImportDocMNS(doc)) (+) 1 IF prevImportDocMNS(doc);
        seriesNumber(doc) <- CONCAT '_', seriesNumber(invoice(doc)), correctionNumber(doc);
        prevDocNumber(doc) <- OVERRIDE seriesNumber(prevImportDocMNS(doc)), seriesNumber(i) IF doc IS ImportDocMNS;
        
        // Грузоотправильтель
        sidCountryShipper(doc) <- idCountrySupplier(i);
        nameCountryShipper(doc) <- name(country(supplier(i)));
        idShippingDocument(doc) <- idShippingDocument(i);
        nameShippingDocument(doc) <- nameShippingDocument(i);
        dateShippingDocument(doc) <- toChar(dateShippingDocument(i), 'YYYY-MM-DD+03:00');
        UNPShipper(doc) <- OVERRIDE UNP(supplier(i)), UNPForeign(supplier(i));
        nameShipper(doc) <- fullName(supplier(i));
        numberShippingDocument(doc) <- numberShippingDocument(i);
        nameShipperChief(doc)  <- nameChief(supplier(i));

        // Продавец
        sidCountrySeller(doc) <- idCountrySupplier(i);
        nameCountrySeller(doc) <- name(country(supplier(i)));
        UNPSeller(doc) <- OVERRIDE UNP(supplier(i)), UNPForeign(supplier(i));
        nameSeller(doc) <- fullName(supplier(i));

        // переносим корректируемые документы
        FOR importDocMNS(ImportDocMNSDetail d) == prevImportDocMNS(doc) DO NEW nd = ImportDocMNSDetail {
            importDocMNS(nd) <- doc;
            invoiceDetail(nd) <- invoiceDetail(d);
            index(nd) <- index(d);
            sku(nd) <- sku(d);
            codeSku(nd) <- codeSku(d);
            extraCodeSku(nd) <- extraCodeSku(d);
            gtin(nd) <- gtin(d);

            nameSku(nd) <- name(sku(nd));
            uomSku(nd) <- trackingUOMCustomsGroup(sku(nd));
            trackingUOMCustomsGroup(nd) <- trackingUOMCustomsGroup(d);
            quantityUomSku(nd) <- OVERRIDE round6(quantity(invoiceDetail(nd))) IF codeSku(nd) == codeCustomsGroupDefaultCountry(sku(nd)) AND extraCodeSku(nd) == id(extraCode(sku(nd))), 0.0;
            priceInvoiceDetail(nd) <- OVERRIDE round2(shipmentPrice(invoiceDetail(nd)) / trackingUOMRatio(sku(nd))), 0.0;
            quantityInvoiceDetail(nd) <- round3(quantityUomSku(nd) * trackingUOMRatio(sku(nd)));
            sumInvoiceDetail(nd) <- OVERRIDE round2(quantityInvoiceDetail(nd) * priceInvoiceDetail(nd)), 0.0;

            FOR quantity(invoiceDetail(nd), Lot l) DO NEW ld = LotImportDocMNSDetail{
                importDocMNSDetail(ld) <- nd;
                lot(ld) <- l;
                encodeBase64Code(ld) <- replace(replace(DocumentMNS.encodeText(code(l), 'base64'), '\n', ''), '\r', '');
            }
        }

        LOCAL needNewDetail = BOOLEAN (Purchase.InvoiceDetail);
        needNewDetail(Purchase.InvoiceDetail d) <- isTrackingOver(sku(d)) AND invoice(d) == i AND quantity(d) AND
            (NOT GROUP MIN ImportDocMNSDetail dd IF importDocMNS(dd) == doc AND invoiceDetail(dd) == d AND 
                codeSku(dd) == codeCustomsGroupDefaultCountry(sku((dd))) AND extraCodeSku(dd) == id(extraCode(sku(dd))));

        // создаем новые
        FOR needNewDetail(Purchase.InvoiceDetail d) DO NEW nd = ImportDocMNSDetail {
            importDocMNS(nd) <- doc;
            invoiceDetail(nd) <- d;
            sku(nd) <- sku(d);
            codeSku(nd) <- codeCustomsGroupDefaultCountry(sku(d));
            extraCodeSku(nd) <- id(extraCode(sku(d)));
            gtin(nd) <- gtin(sku(d));
            nameSku(nd) <- name(sku(d));
            uomSku(nd) <- trackingUOMCustomsGroup(sku(d));
            quantityUomSku(nd) <- OVERRIDE round6(quantity(d)), 0.0;
            trackingUOMCustomsGroup(nd) <- trackingUOMCustomsGroup(sku(d));
            priceInvoiceDetail(nd) <- OVERRIDE round2(shipmentPrice(invoiceDetail(nd)) / trackingUOMRatio(sku(nd))), 0.0;
            quantityInvoiceDetail(nd) <- OVERRIDE round3(quantityUomSku(nd) * trackingUOMRatio(sku(nd))), 0.0;
            sumInvoiceDetail(nd) <- OVERRIDE round2(quantityInvoiceDetail(nd) * priceInvoiceDetail(nd)), 0.0;

            FOR quantity(invoiceDetail(nd), Lot l) DO NEW ld = LotImportDocMNSDetail {
                importDocMNSDetail(ld) <- nd;
                lot(ld) <- l;
                encodeBase64Code(ld) <- replace(replace(DocumentMNS.encodeText(code(l), 'base64'), '\n', ''), '\r', '');
            }
        }

        index(ImportDocMNSDetail d) <- PARTITION SUM 1 ORDER d BY importDocMNS(d) WHERE doc == importDocMNS(d);        
    }
}

exportToXML(ImportDocMNS doc) {
    version() <- 1;
    type() <- 'LETTERTRACEABILITYIMPORT';
    rectification() <- TRUE IF prevImportDocMNS(doc);
    kodIMNS() <- codeMNS(legalEntity(doc));
    UNP() <- UNP(legalEntity(doc));
    year() <- extractYear(DATE(createdTime(invoice(doc))));

    EXPORT originalDocument OBJECTS d = doc XML TO exportXMLFile;
}

// Основной JSON
originalDocument = DATA LOCAL STRING();
documentId = DATA LOCAL STRING();
documentNumber1 = DATA LOCAL STRING();
VATRegistrationNumber = DATA LOCAL STRING();
IMNS = DATA LOCAL STRING();
documentDate = DATA LOCAL STRING ();
documentName = DATA LOCAL STRING();
refRecordId = DATA LOCAL INTEGER ();
correctionDate = DATA LOCAL STRING();
originalDocumentSign = DATA LOCAL STRING();
creationDateTime = DATA LOCAL STRING();
//
////documentNumber(ImportDocMNSDetail d) = seriesNumber(prevImportDocMNS(importDocMNS(d)));
documentNumber(ImportDocMNSDetail d) = seriesNumber(importDocMNS(d));

FORM exportJSON
    PROPERTIES()
        originalDocument,
        documentId EXTID 'DocumentId',
        documentNumber1 EXTID 'DocumentNumber',
        VATRegistrationNumber,
        IMNS,
        documentDate EXTID 'DocumentDate',
        documentName EXTID 'DocumentName',
        refRecordId EXTID 'RefRecordId',
        correctionDate EXTID 'CorrectionDate',

        originalDocumentSign,
        creationDateTime EXTID 'CreationDateTime'

    OBJECTS d = ImportDocMNSDetail EXTID 'Items'
    PROPERTIES
    index = STRING (index(d)) EXTID 'lineItemNumber',
        codeSku(d) EXTID 'itemCustomCode',
        extraCodeSku(d) EXTID 'itemAdditionalCode',
        gtin(d) EXTID 'gtinCode',
        trackingUOMCustomsGroup(d) EXTID 'lineItemQuantitySPT',
        =round2(quantityInvoiceDetail(d)) EXTID 'quantityDespatchedSPT',
        documentNumber(d) EXTID 'documentNumber'

    FILTERS importDocMNS(d) == createdImportDocMNS()
    ORDERS index
;

sign 'Подписать' ABSTRACT LIST (ImportDocMNS, STRING, BOOLEAN);

sign(ImportDocMNS e, STRING contentSubXML, BOOLEAN interactive) + {
    IF NOT signatureApp() THEN {
        MESSAGE 'Не задано приложение для подписи' NOWAIT;
    }
}
sendedMNS 'Отправлена в МНС' (Purchase.Invoice i) = GROUP MIN TRUE BY invoice(ImportDocMNS d);

exportJSONFile = DATA LOCAL FILE ();
generateJSON (Purchase.Invoice i) {
    createImportDocMNS(i);
    exportToXML(createdImportDocMNS());
    
    fileToString(exportXMLFile());
    resultString() <- replace(replace(replace(replace(replace(resultString(), 
        '<LetterTraceabilityImport_v1_f001>', '<LetterTraceabilityImport_v1_f001 xmlns="">'),
        '<LetterTraceabilityImport_v1_f001A>', '<LetterTraceabilityImport_v1_f001A xmlns="">'),
        '<LetterTraceabilityImport_v1_f002>', '<LetterTraceabilityImport_v1_f002 xmlns="">'),
        '<LetterTraceabilityImport_v1_t001>', '<LetterTraceabilityImport_v1_t001 xmlns="">'),
        '<LetterTraceabilityImport_v1_t001_ric10>', '<LetterTraceabilityImport_v1_t001_ric10 xmlns="">');

    resultFile() <- NULL;

    originalDocument() <- replace(replace(DocumentMNS.encodeText(resultString(), 'base64'), '\n', ''), '\r', '');

    sign(createdImportDocMNS(), originalDocument(), TRUE);
    originalDocumentSign() <- base64Signature();

    IF NOT originalDocumentSign() THEN RETURN;

    documentId() <- id(createdImportDocMNS());
//    documentNumber1() <- seriesNumber(prevImportDocMNS(createdImportDocMNS()));
    documentNumber1() <- seriesNumber(createdImportDocMNS());
    VATRegistrationNumber() <- UNP(legalEntity(createdImportDocMNS()));
    IMNS() <- codeMNS(legalEntity(createdImportDocMNS()));
    documentDate() <- toChar(dateTime(createdImportDocMNS()), 'YYYYMMDD');
    documentName() <- 'Сведения о ввозе';
    refRecordId() <- refRecordId(createdImportDocMNS()); // TODO
    correctionDate() <- toChar(dateTime(createdImportDocMNS()) , 'YYYYMMDD') IF PREV(sendedMNS(i)); // TODO 
    creationDateTime() <- toChar(dateTimeSign(createdImportDocMNS()), 'yyyy-MM-dd HH:mm:ss');;

    IF NOT allXMLRequiredFields(createdImportDocMNS()) THEN {
        MESSAGE missedFieldsDescription(createdImportDocMNS()) NOWAIT;
        RETURN;
    }
    
    EXPORT exportJSON JSON TO exportJSONFile;
}


// Ответ JSON
GROUP documentReply EXTID 'DocumentReply';
GROUP result EXTID 'Result';

recordId = DATA LOCAL NUMERIC();
statusCode = DATA LOCAL STRING();
documentReplyDateTime = DATA LOCAL DATETIME();
reply = DATA LOCAL STRING();
SPTInternalDateTime = DATA LOCAL DATETIME();
resultDescription = DATA LOCAL STRING();
resultCode = DATA LOCAL NUMERIC();

FORM importJSON
    PROPERTIES() recordId EXTID 'RecordId', statusCode EXTID 'StatusCode'
    PROPERTIES() IN documentReply documentReplyDateTime EXTID 'DocumentReplyDateTime', reply EXTID 'Reply'
    PROPERTIES() IN result SPTInternalDateTime, resultDescription EXTID 'ResultDescription', resultCode EXTID 'ResultCode';
;
fillTrackingInvoice ABSTRACT LIST (Purchase.Invoice);

fillTrackingInvoice(Purchase.Invoice i) + {
    FOR lastImportDocMNS(i) == ImportDocMNS im AND invoice(im) = i DO {
        LOCAL correct = INTEGER (Purchase.InvoiceDetail);
        correct(Purchase.InvoiceDetail pid ) <-  1 WHERE invoice(pid)==i;
        isTrackingData(Purchase.InvoiceDetail pd) <- NULL WHERE correct(pd);
        FOR invoiceDetail(ImportDocMNSDetail td) == Purchase.InvoiceDetail ipd AND importDocMNS(td)==im AND invoice(ipd)==i AND quantityUomSku(td)>0 DO{
            isTrackingData (ipd) <- TRUE;
        }
    }
}

importDocMNS 'Отправить в МНС' (Purchase.Invoice i) {
    IF notImportEAEU(i) THEN {
        MESSAGE 'Для импорта код страны поставщика должен быть RU/KG/AM/KZ \n' +
            (GROUP CONCAT (CONCAT ' ', 'у накладной код страны ' + idCountrySupplier(i)) , '\n' ORDER i) NOWAIT;
        RETURN;
    }

    NEWSESSION {
        generateJSON(i);

        IF NOT exportJSONFile() THEN {
            MESSAGE 'Накладная не была отправлена' NOWAIT;
            RETURN;
        }

        fileToString(exportJSONFile());

        LOCAL response = FILE();
        TRY {
            insecureSSL() <- TRUE;
            EXTERNAL HTTP POST mnsService() + '/document/import' PARAMS exportJSONFile() TO response;
            fileToString(response());
            fileToString(response());

            IMPORT importJSON JSON FROM response();

            IF NOT recordId() THEN {
                MESSAGE resultDescription();
                RETURN;
            }

            recordId(createdImportDocMNS()) <- recordId();
            statusCode(createdImportDocMNS()) <- statusCode();
            documentReplyDateTime(createdImportDocMNS()) <- documentReplyDateTime();
            reply(createdImportDocMNS()) <- reply();
            SPTInternalDateTime(createdImportDocMNS()) <- SPTInternalDateTime();
            resultDescription(createdImportDocMNS()) <- resultDescription();
            resultCode(createdImportDocMNS()) <- resultCode();
            fillTrackingInvoice(i);

            APPLY;
        } CATCH {
            fileToString(response());
            printToLog(CONCAT '||', 'ExportImportDocMNS', currentDateTime(), '\n',
                resultString(), '\n');
            MESSAGE 'Ошибка отправки: ' + messageCaughtException() NOWAIT;
        }
    }
}

showImportDocMNS(Purchase.Invoice i) = showImportEAEU(i) AND isPosted(i) AND NOT sendedMNS(i);

correctingImportDocMNS 'Отправить корректировку в МНС' (Purchase.Invoice i) {
    importDocMNS(i);
}

showCorrectingImportDocMNS(Purchase.Invoice i) = showImportEAEU(i) AND isPosted(i) AND sendedMNS(i);

decodeBase64String (STRING data) = FORMULA STRING 'convert_from(decode($1, \'base64\'), \'UTF8\')';

EXTEND FORM invoices
//    PROPERTIES(i) PANEL generateJSON    
    
    PROPERTIES(i) READONLY sendedMNS
    PROPERTIES(i) PANEL importDocMNS SHOWIF showImportDocMNS(i), correctingImportDocMNS SHOWIF showCorrectingImportDocMNS(i)

    OBJECTS id = ImportDocMNS
    PROPERTIES(id)  READONLY  id, dateTime, nameLegalEntity, district, district2, dateTimeSign, seriesNumber,
        prevDocNumber, refRecordId,
        //Данные ответа
        recordId, statusCode, documentReplyDateTime, reply, SPTInternalDateTime, resultDescription, resultCode
    FILTERS invoice(id) == i
    ORDERS dateTime(id)

    OBJECTS idd = ImportDocMNSDetail
    PROPERTIES(idd)  READONLY index, codeSku, extraCodeSku, gtin, nameSku, uomSku,
        quantityUomSku, trackingUOMCustomsGroup, priceInvoiceDetail, sumInvoiceDetail, quantityInvoiceDetail
    FILTERS  importDocMNS(idd) == id

    OBJECTS lidd = LotImportDocMNSDetail
    PROPERTIES 'Марка' = STRING(DocumentMNS.decodeText(encodeBase64Code(lidd), 'base64'))
    FILTERS importDocMNSDetail(lidd) == idd
;

DESIGN invoices {    
    documentDetail {
        NEW MNS {
            caption = 'Отправка в МНС';

            horizontal = TRUE;
            MOVE BOX(id);
            NEW importDocDetailMNS {
                fill = 1;

                MOVE BOX(idd);
                MOVE BOX(lidd);
            }
        }
    }
}

itemCustomCode (UserInvoiceDetail d) += STRING[10] (codeSku(lastImportDocDetailMNS(d)));// записываем для инфо, но при расходе берем из карточки товара
itemCustomCodeOther (UserInvoiceDetail d) += extraCodeSku(lastImportDocDetailMNS(d));// записываем для инфо, но при расходе берем из карточки товара
deliveryTypePrev (UserInvoiceDetail d) += IF lastImportDocDetailMNS(d) THEN 5;
deliveryNotePrev (UserInvoiceDetail d) += STRING[70] (seriesNumber(lastImportDocMNS(invoice(d))));
deliveryNoteDate (UserInvoiceDetail d) += DATE(dateTimeSign(lastImportDocMNS(invoice(d))));
deliveryNotePrevLineID (UserInvoiceDetail d) += index(lastImportDocDetailMNS(d));
lineItemQuantitySPT (UserInvoiceDetail d) += trackingUOMCustomsGroup(lastImportDocDetailMNS(d)); // записываем для инфо, но при расходе отображаем из ТН ВЭДа из карточки товара
quantityDespatchedSPT (UserInvoiceDetail d) += NUMERIC[12,5](quantityInvoiceDetail(lastImportDocDetailMNS(d)));// записываем для инфо, но при расходе кол-во рассчитываем свое исходя из ед изм СПТ
lineItemPriceSPT (UserInvoiceDetail d) += NUMERIC[12,2](priceInvoiceDetail(lastImportDocDetailMNS(d)));// записываем для инфо, но при расходе цену рассчитываем свою исходя из ед изм СПТ