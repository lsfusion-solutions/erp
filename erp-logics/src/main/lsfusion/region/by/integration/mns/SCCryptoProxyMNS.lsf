MODULE SCCryptoProxyMNS;

REQUIRE SCCryptoProxy, SignAvest, DocumentMNS;

NAMESPACE MNS;

EXTEND CLASS SignatureApp {
    scCryptoProxy 'SC-CryptoProxy'
}

isSCCryptoProxy(EDSApplication a) = a == EDSApplication.sccp;

extraAliasEDSService 'Контейнер ключа' = ABSTRACT STRING[150] (LegalEntity);
extraPasswordEDSService 'Пароль ключа' = ABSTRACT STRING[100] (LegalEntity);
useExtraAlias (LegalEntity le) = extraAliasEDSService(le) AND extraPasswordEDSService(le);

aliasEDSService 'Контейнер ключа' = DATA STRING[150] (LegalEntity);
passwordEDSService 'Пароль ключа' = DATA STRING[100] (LegalEntity) ECHO;
edsFrom 'Действителен с' = DATA DATETIME (LegalEntity);
edsTo 'Действителен по' = DATA DATETIME (LegalEntity);

EDSServiceMNS 'Адрес службы ЭЦП' = DATA EDSService (LegalEntity);
descriptionEDSServiceMNS 'Адрес службы ЭЦП' (LegalEntity o) = description(EDSServiceMNS(o));
CONSTRAINT EDSServiceMNS(LegalEntity o) AND NOT isSCCryptoProxy(edsApplication(EDSServiceMNS(o)))
    CHECKED BY EDSServiceMNS[LegalEntity]
    MESSAGE 'Задан тип приложения ЭЦП недоступный для провайдера';

EXTEND FORM integrationData
    PROPERTIES askPasswordEDSServiceMNS 'Запрашивать пароль для подписания' = askPasswordEDSService()
    OBJECTS mnsle = LegalEntity
    FILTERS isCompany(mnsle)
    PROPERTIES(mnsle) name READONLY, descriptionEDSServiceMNS, aliasEDSService, passwordEDSService, edsFrom, edsTo
;

DESIGN integrationData {
    mnsService  {
        NEW edsMNS {
            caption = 'Электронные подписи';
            fill = 1;
            showIf = signatureApp() == SignatureApp.scCryptoProxy;
            MOVE PROPERTY(askPasswordEDSServiceMNS);
            NEW EDSServiceMNS {
                tabbed = TRUE;
                fill = 1;
                MOVE BOX(mnsle);
            }
        }
    }
}

changeAlias 'Получить список ключей' (LegalEntity l) {
    listAliases(EDSServiceMNS(l));
    IF selected() THEN {
        aliasEDSService(l) <- alias(selected());
        edsFrom(l) <- notBeforeISO8601(selected());
        edsTo(l) <- notAfterISO8601(selected());
    }
} TOOLBAR;

EXTEND FORM integrationData
    PROPERTIES(mnsle) changeAlias SHOWIF edsApplication(EDSServiceMNS(mnsle)) == EDSApplication.sccp
;

sign(LegalEntity le, STRING contentSubXML, BOOLEAN interactive) + {
    IF signatureApp() == SignatureApp.scCryptoProxy THEN {
        IF edsApplication(EDSServiceMNS(le)) == EDSApplication.sccp THEN {
            IF aliasEDSService(le) AND (OVERRIDE passwordEDSService(), passwordEDSService(le)) THEN {
                keyID() <- aliasEDSService(le);
                password() <- (OVERRIDE passwordEDSService(), passwordEDSService(le));
                sign(contentSubXML, EDSServiceMNS(le));
            } ELSE {
                IF interactive THEN {
                    MESSAGE ' Документ не подписан: Alias или Пароль ключа не задан' NOWAIT;
                }
                logToFile('MNS', ' error: Alias or Password for key not found');
            }
            RETURN;
        }
    }
}