MODULE EInvoice;

REQUIRE EDI, LegalEntityBy;

NAMESPACE EDI;

//-----------------------------------------Электронная накладная----------------------------------------------//
CLASS EInvoice 'Электронная накладная';
TABLE eInvoice(EInvoice);

TABLE eInvoiceId(STRING) NODEFAULT;

isTN2 'ТН-2' = DATA BOOLEAN (EInvoice);

dateTimeCreated 'Создана' = DATA DATETIME (EInvoice);
dateTimeCreated(EInvoice i) <- currentDateTime() WHEN (i IS EInvoice);

@defineExternalizable(eInvoice, STRING[100]);

numberCustomer 'Номер документа покупателя (BLRWBR/BLRDNR)' = DATA STRING[35] (EInvoice);
dateCustomer'Дата документа покупателя' = DATA DATETIME (EInvoice);

numberSupplier 'Номер документа поставщика (BLRWBL/BLRDLN)'= DATA STRING[35] (EInvoice);
dateSupplier 'Дата документа поставщика' = DATA DATETIME (EInvoice);

numberSupplierCancel 'Номер документа отмены поставщика' = DATA STRING[35] (EInvoice);
dateSupplierCancel 'Дата документа поставщика' = DATA DATETIME (EInvoice);

dataReportId 'Номер акта' = DATA STRING[70] (EInvoice);
reportId 'Номер акта' = DATA STRING[1000] (EInvoice);
dataReportDate 'Дата составления акта' = DATA DATE (EInvoice);
reportDate 'Дата составления акта' = DATA DATE (EInvoice);
dataReportName 'Вид  акта' = DATA STRING[512] (EInvoice);
reportName 'Вид  акта' = DATA STRING[512] (EInvoice);

deliveryNoteNumber 'Номер накладной' = DATA STRING[43] (EInvoice) INDEXED NONULL IN id CHARWIDTH 30;
eInvoiceDeliveryNoteNumber (number) = GROUP AGGR EInvoice e BY deliveryNoteNumber(e) MATERIALIZED TABLE eInvoiceId;
deliveryNoteDate 'Дата накладной' = DATA DATE (EInvoice) INDEXED;
sealIDReceiver 'Номер пломбы' = DATA STRING[35] (EInvoice);

contractName 'Документ, который служит основанием отпуска' = DATA STRING[70] (EInvoice);
contractId 'Номер документа, служащего основанием отпуска' = DATA STRING[70] (EInvoice);
contractDate 'Дата документа, служащего основанием отпуска' = DATA DATE (EInvoice);
waybillId 'Номер путевого листа' = DATA STRING[70] (EInvoice);

dataGLNeInvoice 'GLN для накладных' = DATA STRING[13] (LegalEntity);
GLNeInvoice 'GLN для накладных' (LegalEntity l) = OVERRIDE dataGLNeInvoice(l), GLN(l);
legalEntityGLNeInvoice (legalEntity) = GROUP AGGR LegalEntity llegalEntity BY GLNeInvoice(llegalEntity);

supplier 'Поставщик' = DATA LegalEntity (EInvoice);
dataGLNSupplierFirst = DATA STRING[13] (EInvoice);
dataGLNSupplier = DATA STRING[13] (EInvoice);
glnSupplier 'GLN поставщика' (EInvoice i) = OVERRIDE dataGLNSupplierFirst(i), GLNeInvoice(supplier(i)), extraGLN(supplier(i)), dataGLNSupplier(i);
dataNameSupplierFirst = DATA STRING[200] (EInvoice);
dataNameSupplier = DATA STRING[275] (EInvoice);
nameSupplier 'Поставщик' (EInvoice i) = OVERRIDE dataNameSupplierFirst(i), fullName(supplier(i)), dataNameSupplier(i);
dataAddressSupplierFirst = DATA STRING[150] (EInvoice);
dataAddressSupplier = DATA STRING[150] (EInvoice);
addressSupplier 'Адрес поставщика' (EInvoice i) = OVERRIDE dataAddressSupplierFirst(i), address(supplier(i)), dataAddressSupplier(i);
dataUnpSupplierFirst = DATA STRING[9] (EInvoice);
dataUnpSupplier = DATA STRING[9] (EInvoice);
unpSupplier 'УНП поставщика' (EInvoice i) = OVERRIDE dataUnpSupplierFirst(i), UNP(supplier(i)), dataUnpSupplier(i);
contactSupplier 'Отпуск разрешил (должность и ФИО)' = DATA STRING[150] (EInvoice);

supplierStock 'Пункт погрузки' = DATA Stock (EInvoice);
dataGLNSupplierStockFirst = DATA STRING[13] (EInvoice);
dataGLNSupplierStock = DATA STRING[13] (EInvoice);
glnSupplierStock 'GLN пункта погрузки' (EInvoice i) = OVERRIDE dataGLNSupplierStockFirst(i), GLN(supplierStock(i)), dataGLNSupplierStock(i);
dataNameSupplierStock = DATA STRING[150] (EInvoice);
nameSupplierStock 'Пункт погрузки' (EInvoice i) = OVERRIDE name(supplierStock(i)), dataNameSupplierStock(i);
dataAddressSupplierStockFirst = DATA STRING[150] (EInvoice);
dataAddressSupplierStock = DATA STRING[150] (EInvoice);
overAddressSupplierStock = ABSTRACT ISTRING[250] (EInvoice);
addressSupplierStock 'Адрес пункта погрузки' (EInvoice i) = OVERRIDE dataAddressSupplierStockFirst(i), overAddressSupplierStock(i), address(supplierStock(i)), dataAddressSupplierStock(i);
contactSupplierStock 'Сдал грузоотправитель (должность и ФИО)' = DATA STRING[150] (EInvoice) INDEXED MATCH;

userID 'Идентификатор пользователя' = ABSTRACT STRING[35] (Stock);
stockGLNUserID (STRING[13] GLNLE, STRING[13] GLN, STRING[35] userID) = GROUP MIN Stock s IF active(s) AND GLNeInvoice(legalEntity(s)) == GLNLE AND GLN(s) == GLN AND (OVERRIDE userID(s), '') == userID;
userIDSupplierStock 'Идентификатор пользователя' (EInvoice i) = userID(supplierStock(i));

freightPayer 'Заказчик автомобильной перевозки (плательщик)' = DATA LegalEntity (EInvoice);
glnFreightPayer 'GLN заказчика автомобильной перевозки' (EInvoice i) = OVERRIDE GLNeInvoice(freightPayer(i)), extraGLN(freightPayer(i));
nameFreightPayer 'Заказчик автомобильной перевозки' (EInvoice i) = fullName(freightPayer(i));
addressFreightPayer 'Адрес заказчика автомобильной перевозки' (EInvoice i) = address(freightPayer(i));
unpFreightPayer 'УНП заказчика автомобильной перевозки' (EInvoice i) = UNP(freightPayer(i));

customer 'Покупатель' = DATA LegalEntity (EInvoice);
dataNameCustomerFirst = DATA STRING[200] (EInvoice);
nameCustomer 'Покупатель' (EInvoice i) = OVERRIDE dataNameCustomerFirst(i), fullName(customer(i));
dataGLNCustomerFirst = DATA STRING[13] (EInvoice);
glnCustomer 'GLN покупателя' (EInvoice i) = OVERRIDE dataGLNCustomerFirst(i), GLNeInvoice(customer(i)), extraGLN(customer(i));
dataAddressCustomerFirst = DATA STRING[150] (EInvoice);
addressCustomer 'Адрес покупателя' (EInvoice i) = OVERRIDE dataAddressCustomerFirst(i), address(customer(i));
dataUnpCustomerFirst = DATA STRING[9] (EInvoice);
unpCustomer 'УНП покупателя' (EInvoice i) = OVERRIDE dataUnpCustomerFirst(i), UNP(customer(i));

customerStock 'Склад покупателя' = DATA Stock (EInvoice);
dataGLNCustomerStockFirst = DATA STRING[13] (EInvoice);
overGlnCustomerStock = ABSTRACT STRING[13] (EInvoice);
glnCustomerStock 'GLN склада покупателя' (EInvoice i) = OVERRIDE dataGLNCustomerStockFirst(i), overGlnCustomerStock(i), GLN(customerStock(i));
nameCustomerStock 'Склад покупателя' (EInvoice i) = name(customerStock(i));
dataAddressCustomerStockFirst = DATA STRING[150] (EInvoice);
overAddressCustomerStock = ABSTRACT ISTRING[350] (EInvoice); // иногда пункт разгрузки указан только в атрибутах накладной
addressCustomerStock 'Адрес склада покупателя' (EInvoice i) = OVERRIDE dataAddressCustomerStockFirst(i), overAddressCustomerStock(i), address(customerStock(i));
contactCustomerStock 'Принял грузополучатель (должность и ФИО)' = DATA STRING[150] (EInvoice);
userIDCustomerStock 'Идентификатор пользователя' (EInvoice i) = userID(customerStock(i));

customSelectContactCustomerStock = ABSTRACT BOOLEAN (EInvoice);
overSelectContactCustomerStock ABSTRACT (EInvoice);

changeContactCustomerStock (EInvoice consignment) {
    IF customSelectContactCustomerStock(consignment) THEN {
        overSelectContactCustomerStock(consignment);
    } ELSE {
        INPUT s = contactCustomerStock(consignment) DO {
            contactCustomerStock(consignment) <- s;
        }
    }
}

transporter 'Автомобильный перевозчик' = DATA LegalEntity (EInvoice);
glnTransporter 'GLN автомобильного перевозчика' (EInvoice i) = OVERRIDE GLNeInvoice(transporter(i)), extraGLN(transporter(i));
nameTransporter 'Автомобильный перевозчик' (EInvoice i) = fullName(transporter(i));
unpTransporter 'УНП автомобильного перевозчика' (EInvoice i) = UNP(transporter(i));

transportContact 'Водитель' = DATA STRING[150] (EInvoice) INDEXED MATCH;
deliveryContact 'Товар к перевозке принял (должность и ФИО)' = DATA STRING[150] (EInvoice) INDEXED MATCH;
proxyID 'Номер доверенности' = DATA STRING[70] (EInvoice);
proxyDate 'Дата доверенности' = DATA DATE (EInvoice);
partyIssuingProxyName 'Наименование организации, выдавшей доверенность' = DATA STRING[175] (EInvoice);

quantityTrip 'Количество ездок' = DATA STRING[70] (EInvoice);
transportOwnerName 'Владелец автомобиля' = DATA STRING[175] (EInvoice) INDEXED MATCH;
transportID 'Марка и рег. номер автомобиля' = DATA STRING[35] (EInvoice) INDEXED MATCH;
trailerID 'Марка и рег. номер прицепа' = DATA STRING[35] (EInvoice);

orderID 'Номер заказа' = DATA STRING[35] (EInvoice);
cancelDeliveryNoteId 'Номер отмененной накладной' = DATA STRING[43] (EInvoice);
currency '3-х буквенный код валюты' = DATA STRING[3] (EInvoice);

isCancel 'Отмена накладной' = DATA BOOLEAN (EInvoice);

isTestDocument 'Тестовый документ' = DATA BOOLEAN (EInvoice);

@defineOption(overIsNewFormatEInvoice, 'Создавать электронные накладные в новом формате (2024)', EDI);

dataIsNewFormatEInvoice 'Создавать электронные накладные в новом формате (2024)' = DATA BOOLEAN (LegalEntity);
isNewFormatEInvoice 'Создавать электронные накладные в новом формате (2024)' (LegalEntity l) = OVERRIDE dataIsNewFormatEInvoice(l), overIsNewFormatEInvoice() IF l IS LegalEntity;

isNewFormat 'Новый формат (2024)' = DATA BOOLEAN (EInvoice);

CLASS ExtraField 'Дополнительное поле';
TABLE extraField(ExtraField);

name 'Название' = DATA STRING[255] (ExtraField) NONULL CHARWIDTH 20;
code 'Код' = DATA STRING[6] (ExtraField);
value 'Значение' = DATA STRING[2560] (ExtraField) NONULL CHARWIDTH 20;

eInvoice = DATA EInvoice(ExtraField) NONULL DELETE INDEXED;

//получение информации из доп поля по имени
extraFieldByName (EInvoice ei, STRING[255] name) = GROUP MAX ExtraField f BY eInvoice(f), name(f);
extraFieldValueByName (EInvoice ei, STRING[255] name) = value(extraFieldByName(ei,name));
//получение информации из доп поля по коду
extraFieldByCode (EInvoice ei, STRING[6] code) = GROUP MAX ExtraField f BY eInvoice(f), code(f);
extraFieldValueByCode (EInvoice ei, STRING[6] code) = value(extraFieldByCode(ei,code));

overIsReturn 'Возврат' (EInvoice ei) = extraFieldValueByCode(ei,'PW0013') == '1' MATERIALIZED;
overReplaceNumber 'Номер заменяемой накладной' (EInvoice ei) = OVERRIDE cancelDeliveryNoteId(ei), STRING[43](extraFieldValueByCode(ei,'PW0014')) MATERIALIZED;

changeReplaceNumber (EInvoice e, STRING[43] s) {
    cancelDeliveryNoteId(e) <- s;
    IF extraFieldByCode(e,'PW0014') AND NOT s THEN {
        DELETE ExtraField f WHERE eInvoice(f) == e AND code(f) == 'PW0014';
    } ELSE IF extraFieldByCode(e,'PW0014') AND s THEN {
        value(ExtraField f) <- s WHERE eInvoice(f) == e AND code(f) == 'PW0014';
    } ELSE IF NOT extraFieldByCode(e,'PW0014') AND s THEN {
        NEW f = ExtraField {
            name(f) <- 'Номер заменяемой накладной';
            code(f) <- 'PW0014';
            value(f) <- s;
            eInvoice(f) <- e;
        }
    }
}
changeReplaceNumber (EInvoice e) {
    INPUT s = STRING[43] DO {
        changeReplaceNumber(e, s);
    }
}

CLASS EInvoiceDetail 'Строка электронной накладной';
TABLE eInvoiceDetail(EInvoiceDetail);
TABLE eInvoiceDetailPriceControl(EInvoiceDetail);
TABLE sessionEInvoiceDetail(Session, EInvoiceDetail);

@defineExternalizable(eInvoiceDetail, STRING[100]);

in 'Вкл.' = DATA LOCAL BOOLEAN (EInvoice);

eInvoice = DATA EInvoice(EInvoiceDetail) NONULL DELETE INDEXED;

dataIndex = DATA INTEGER (EInvoiceDetail) ;
defaultIndex (EInvoiceDetail d) = PARTITION SUM 1 ORDER d BY eInvoice(d);
lineItemNumber 'Порядковый номер' (EInvoiceDetail d) = OVERRIDE dataIndex(d), defaultIndex(d) MATERIALIZED;

lineItemSign 'Признак вида товарной позиции' = DATA STRING[4] (EInvoiceDetail);
lineItemID 'GTIN товара' = DATA STRING[100] (EInvoiceDetail) CHARWIDTH 15 IN id;
lineItemBuyerID 'Код товара, присвоенный покупателем'= DATA STRING[100] (EInvoiceDetail) CHARWIDTH 15 ;
itemCustomCode 'Код ТНВЭД' = DATA STRING[10] (EInvoiceDetail);
itemCustomCodeOther 'Дополнительный таможенный код' = DATA STRING[4] (EInvoiceDetail);

deliveryTypePrev 'Тип приходного документа' = DATA INTEGER (EInvoiceDetail);
deliveryNotePrev 'Номер приходного документа' = DATA STRING[70] (EInvoiceDetail);
deliveryNoteDatePrev 'Дата и время создания приходного документа' = DATA DATETIME (EInvoiceDetail);
deliveryNotePrevLineID 'Номер строки в приходном документе' = DATA INTEGER (EInvoiceDetail);

lineItemSupplierID 'Код товара, присвоенный поставщиком'= DATA STRING[100] (EInvoiceDetail) CHARWIDTH 15 ;
lineItemName 'Наименование товара' = DATA STRING[500] (EInvoiceDetail) CHARWIDTH 30 IN id;
grossWeightValue 'Масса груза, тонн' = DATA NUMERIC[12,6] (EInvoiceDetail);
quantityDespatched 'Кол-во отгружаемого товара' = DATA NUMERIC[16,5] (EInvoiceDetail);
lineItemQuantityUOM 'Код единицы измерения' = DATA STRING[3] (EInvoiceDetail);
mapToNewUOM(STRING[3] s) = IF s == 'PCE' THEN 'H87' ELSE s; 
despatchUnitQuantityDespatched 'Количество в грузовых местах' = DATA NUMERIC[12,5] (EInvoiceDetail);
countryOfOrigin 'Страна происхождения (производства)' = DATA DATE (EInvoiceDetail);
expiryDate 'Годен до' = DATA DATE (EInvoiceDetail);

quantityDespatchedSPT 'Количество в единицах прослеживаемости' = DATA NUMERIC[12,5] (EInvoiceDetail);
lineItemQuantitySPT 'Единица измерения прослеживаемости' = DATA STRING[3](EInvoiceDetail);

valueVAT 'НДС, %' = DATA STRING[7] (EInvoiceDetail); //по формату обмена именно строка и может прийти от поставщика  "Без НДС"
changeValueVAT(EInvoiceDetail ed) {
    INPUT n = NUMERIC[6,2] DO
        valueVAT(ed) <- STRING[7](n);
}
additionalInformation 'Примечание, дополнительная информация о товаре' = DATA STRING[512] (EInvoiceDetail);

lineItemPartyNumber 'Номер партии' = DATA STRING[50](EInvoiceDetail);
manufactureDate 'Дата изготовления' = DATA DATE (EInvoiceDetail);

lineItemAmountWithoutCharges 'Стоимость товарной позиции без НДС' = DATA NUMERIC[18,2] (EInvoiceDetail);
lineItemAmountCharges 'Сумма НДС' = DATA NUMERIC[18,2] (EInvoiceDetail);
lineItemAmount 'Стоимость товарной позиции с НДС' = DATA NUMERIC[18,2] (EInvoiceDetail);
lineItemPrice 'Цена за единицу товара' = DATA NUMERIC[16,2] (EInvoiceDetail);
lineItemPriceSPT 'Цена за единицу товара для прослеживаемости' = DATA NUMERIC[12,2] (EInvoiceDetail);
lineItemAmountExcise 'Сумма акциза' = DATA NUMERIC[12,5] (EInvoiceDetail);

lineItemManufacturerOutputPrice 'Отпускная цена производителя (импортера)' = DATA NUMERIC[18,2] (EInvoiceDetail) TABLE eInvoiceDetailPriceControl;
typeDiscount 'Вид скидки' = DATA STRING[512](EInvoiceDetail) CHARWIDTH 20 TABLE eInvoiceDetailPriceControl;
bulkDiscountRate 'Оптовая скидка, %' = DATA STRING[512](EInvoiceDetail) CHARWIDTH 20 TABLE eInvoiceDetailPriceControl;
outputPriceIncludingShippingCoast 'Условия доставки товара' = DATA STRING[80](EInvoiceDetail) CHARWIDTH 15 TABLE eInvoiceDetailPriceControl;
outputPriceShippingCoast 'Сумма расходов по доставке товаров' = DATA NUMERIC[18,2] (EInvoiceDetail) TABLE eInvoiceDetailPriceControl;
outputPricePackingCoast 'Сумма расходов по фасовке товаров' = DATA NUMERIC[18,2] (EInvoiceDetail) TABLE eInvoiceDetailPriceControl;
bulkMarginRate 'Оптовая надбавка в белорусских рублях или процентах' = DATA STRING[70](EInvoiceDetail) CHARWIDTH 15 TABLE eInvoiceDetailPriceControl;
cutRate 'Сниженная цена субъекта торговли, осуществляющего оптовую торговлю' = DATA STRING[512](EInvoiceDetail) CHARWIDTH 20 TABLE eInvoiceDetailPriceControl;
additionalInformationPrice 'Иные сведения, необходимые для установления цены' = DATA STRING[512](EInvoiceDetail) CHARWIDTH 20 TABLE eInvoiceDetailPriceControl;
additionalInformationNote 'Примечание' = DATA STRING[512](EInvoiceDetail) CHARWIDTH 20 TABLE eInvoiceDetailPriceControl;


//устаревшее
lineItemManufacturerPrice 'Цена изготовителя за единицу товара' = DATA NUMERIC[16,2] (EInvoiceDetail);

upperLevelCodeMark 'Код упаковки верхнего уровня' = DATA STRING[300] (EInvoiceDetail, INTEGER);
groupPackingCodeMark 'Код упаковки, которая вложена в упаковку верхнего уровня' = DATA STRING[130] (EInvoiceDetail, INTEGER);
fieldCodeMark 'Перечень кодов маркировки' = DATA STRING[130000] (EInvoiceDetail) CHARWIDTH 100;
///

CLASS EInvoiceLotDetail 'Марки электронной накладной EDI';
TABLE eInvoiceLotDetail (EInvoiceLotDetail);

eInvoiceDetail = DATA EInvoiceDetail (EInvoiceLotDetail) NONULL DELETE INDEXED;
eInvoice (EInvoiceLotDetail d) = eInvoice(eInvoiceDetail(d));

id 'Код маркировки единицы товара' = DATA STRING[200] (EInvoiceLotDetail);
quantity 'Кол-во' = DATA NUMERIC[14,3] (EInvoiceLotDetail);

parent = DATA EInvoiceLotDetail(EInvoiceLotDetail) INDEXED;
idParent 'Родитель' (EInvoiceLotDetail d) = id(parent(d));

CLASS ItemExtraField 'Дополнительное поле, описывающее товар';
TABLE itemExtraField(ItemExtraField);

eInvoiceDetail = DATA EInvoiceDetail(ItemExtraField) NONULL DELETE INDEXED;
name 'Название' = DATA STRING[255] (ItemExtraField) NONULL CHARWIDTH 20;
code 'Код' = DATA STRING[6] (ItemExtraField);
value 'Значение' = DATA STRING[2560] (ItemExtraField) NONULL CHARWIDTH 20;

//получение информации из доп поля по имени
extraFieldByName (EInvoiceDetail ed, STRING[255] name) = GROUP MAX ItemExtraField f BY eInvoiceDetail(f), name(f);
extraFieldValueByName (EInvoiceDetail ed, STRING[255] name) = value(extraFieldByName(ed,name));
//получение информации из доп поля по коду
extraFieldByCode (EInvoiceDetail ed, STRING[6] code) = GROUP MAX ItemExtraField f BY eInvoiceDetail(f), code(f);
extraFieldValueByCode (EInvoiceDetail ed, STRING[6] code) = value(extraFieldByCode(ed,code));

itemExtraFields (EInvoiceDetail d) = GROUP CONCAT STRING(CONCAT ': ', name(ItemExtraField f), value(f)) IF eInvoiceDetail(f) == d, ', ' ORDER name(f);

overLineItemExtraFields 'Дополнительная информация' (EInvoiceDetail d) = itemExtraFields(d);
overLineItemExtraField (EInvoiceDetail d, STRING[255] name) = extraFieldValueByName(d,name);

totalAmountWithoutCharges 'Общая сумма без НДС' (eInvoice) = GROUP SUM lineItemAmountWithoutCharges(EInvoiceDetail d) BY eInvoice(d);
totalAmountCharges 'Общая сумма НДС' (eInvoice) = GROUP SUM lineItemAmountCharges(EInvoiceDetail d) BY eInvoice(d);
totalAmount 'Общая сумма с НДС' (eInvoice) = GROUP SUM lineItemAmount(EInvoiceDetail d) BY eInvoice(d);
totalLineItem 'Всего количество товарных позиций' (eInvoice) = GROUP SUM 1 BY eInvoice(EInvoiceDetail d);
totalLineItemQuantity 'Всего количество единиц' (eInvoice) = GROUP SUM quantityDespatched(EInvoiceDetail d) BY eInvoice(d);
totalGrossWeight 'Всего масса груза в тоннах' (eInvoice) = GROUP SUM grossWeightValue(EInvoiceDetail d) BY eInvoice(d);
totalDespatchUnitQuantity 'Всего грузовых мест' (eInvoice) = GROUP SUM despatchUnitQuantityDespatched(EInvoiceDetail d) BY eInvoice(d);
totalAmountExcise 'Всего сумма акциза' (eInvoice) = GROUP SUM lineItemAmountExcise(EInvoiceDetail d) BY eInvoice(d);

CONSTRAINT SET(EInvoice i IS EInvoice) AND NOT (GROUP SUM 1 IF eInvoice(EInvoiceDetail d) == i)
    MESSAGE 'Запрещено создавать электронную накладную без строк';

//-----------------------------------------Сообщение по накладной-----------------------------------------//
CLASS EInvoiceMessage 'Сообщение по накладной';
TABLE eInvoiceMessage(EInvoiceMessage);

createdUser = DATA CustomUser (EInvoiceMessage);
createdNameUser '{historizable.created.name.user}' (EInvoiceMessage m) = name[Contact](createdUser(m)) CHARWIDTH 10;
createdUser (EInvoiceMessage m) <- currentUser() WHEN SET(m IS EInvoiceMessage);

createdComputer = DATA Computer (EInvoiceMessage);
createdHostnameComputer '{historizable.created.host.name.computer}' (EInvoiceMessage m) = hostname(createdComputer(m)) CHARWIDTH 10;
createdComputer (EInvoiceMessage m) <- currentComputer() WHEN SET(m IS EInvoiceMessage);

number 'Номер' = DATA STRING[35] (EInvoiceMessage) INDEXED LIKE;
eInvoice 'Накладная' = DATA EInvoice (EInvoiceMessage) NONULL DELETE;
numberEInvoice 'Накладная' (EInvoiceMessage m) = deliveryNoteNumber(eInvoice(m));
dateTime 'Дата/время сообщения' = DATA DATETIME (EInvoiceMessage);
code 'Код сообщения' = DATA STRING[10] (EInvoiceMessage);
description 'Текст сообщения' = DATA STRING[1000] (EInvoiceMessage) CHARWIDTH 100;
good = ABSTRACT CASE BOOLEAN (EInvoiceMessage);
currentOrderMessage = GROUP LAST EInvoiceMessage m ORDER dateTime(m), m BY eInvoice(m) MATERIALIZED;
statusDescription 'Статус отправки'(EInvoice o) = CONCAT ' ', code(currentOrderMessage(o)), description(currentOrderMessage(o)) CHARWIDTH 15;
backgroundStatusDescription (EInvoice o) = RGB(255, 238, 238) IF currentOrderMessage(o) AND NOT good(currentOrderMessage(o));
referenceDocumentId 'Номер исходного сообщения' = DATA STRING[70] (EInvoiceMessage);

backgroundVAT 'Цвет' (EInvoiceDetail d) = IF sku(lineItemBuyerID(d)) AND NOT NUMERIC[10,5](valueVAT(d)) == valueVAT(sku(lineItemBuyerID(d)))
    THEN RGB(255, 0, 0);
background = ABSTRACT CASE COLOR (EInvoice);

kind 'Вид' = DATA EInvoiceMessageKind (EInvoiceMessage);
nameKind 'Вид' (EInvoiceMessage o) = staticCaption(kind(o)) CHARWIDTH 20;

INDEX eInvoice(EInvoiceMessage m), number(m), kind(m);
eInvoiceMessage (eInvoice, number, kind) = GROUP AGGR EInvoiceMessage e BY eInvoice(e), number(e), kind(e);
eInvoiceM(STRING num) = eInvoice(GROUP MAX EInvoiceMessage m IF number(m) LIKE '___'+num OR number(m) == num);//мы добавили тип документа или точное соответствие

EXTEND CLASS EInvoiceMessageType {
    systemmessage_blrwbl 'SYSTEMMESSAGE-BLRWBL',
    systemmessage_blrwbr 'SYSTEMMESSAGE-BLRWBR',
    systemmessage_blrdln 'SYSTEMMESSAGE-BLRDLN',
    systemmessage_blrdnr 'SYSTEMMESSAGE-BLRDNR',
    blrapn_blrwbr 'BLRAPN-BLRWBR',
    blrapn_blrwbl 'BLRAPN-BLRWBL',
    blrapn_blrdln 'BLRAPN-BLRDLN',
    blrapn_blrdnr 'BLRAPN-BLRDNR',
    blrwbl 'BLRWBL',
    blrwbr 'BLRWBR',
    blrdln 'BLRDLN',
    blrdnr 'BLRDNR'
}

type 'Тип' = DATA EInvoiceMessageType (EInvoiceMessage);
nameType 'Тип' (EInvoiceMessage o) = staticCaption(type(o)) CHARWIDTH 20;

FORM eInvoices 'Электронные накладные'
    OBJECTS e = EInvoice LAST
    PROPERTIES(e) in
    PROPERTIES(e) READONLYIF isReadonly() isCancel, isTestDocument, isNewFormat
    PROPERTIES(e) BACKGROUND background(e) READONLY isTN2, numberSupplier, dateSupplier, deliveryNoteNumber, deliveryNoteDate,
        glnSupplier, nameSupplier, addressSupplier, unpSupplier,
        nameSupplierStock, nameCustomer, glnCustomer, addressCustomer, unpCustomer, nameCustomerStock,
        dateTimeCreated, contractDate, contractName, contractId, overReplaceNumber
    PROPERTIES(e) contactCustomerStock, reportId, reportDate, reportName
    FILTERGROUP notExported

    OBJECTS d = EInvoiceDetail
    PROPERTIES(d) READONLY lineItemNumber, lineItemID, lineItemName, lineItemSign, lineItemBuyerID, itemCustomCode, lineItemSupplierID,
        quantityDespatched, manufactureDate, expiryDate, valueVAT BACKGROUND backgroundVAT(d),
        lineItemPrice, lineItemManufacturerPrice, lineItemAmountWithoutCharges, lineItemAmount, lineItemAmountCharges,
        grossWeightValue, lineItemQuantityUOM, despatchUnitQuantityDespatched, additionalInformation, lineItemAmountExcise, 
        overLineItemExtraFields, fieldCodeMark, lineItemPartyNumber, countryOfOrigin 
    PROPERTIES (d) READONLY BACKGROUND RGB(224, 255, 255) lineItemManufacturerOutputPrice, typeDiscount, bulkDiscountRate, 
        outputPriceIncludingShippingCoast, outputPriceShippingCoast, outputPricePackingCoast, bulkMarginRate, cutRate, 
        additionalInformationPrice, additionalInformationNote

    FILTERS eInvoice(d) == e

    OBJECTS m = EInvoiceMessage
    PROPERTIES(m) READONLY numberEInvoice, dateTime, nameType, nameKind, code, description, createdNameUser, createdHostnameComputer 
    FILTERS eInvoice(m) == e
    ORDERS dateTime(m)

    OBJECTS dl = EInvoiceDetail
    PROPERTIES (dl) READONLY lineItemNumber, lineItemID, lineItemName
    FILTERS eInvoice(dl) == e

    OBJECTS eld = EInvoiceLotDetail
    PROPERTIES(eld) READONLY idParent, id, quantity
    FILTERS eInvoiceDetail(eld) = dl
;
@extendFormEditable(eInvoices);

DESIGN eInvoices {
    BOX {
        MOVE BOX(e);
        NEW tab {
            fill = 1;
            tabbed = TRUE;
            MOVE BOX(d);
            MOVE BOX(m);
            NEW eLotDetail {
                caption = 'Маркировка';
                horizontal = TRUE;
                fill = 1;
                MOVE BOX(dl);
                MOVE BOX(eld);
            }
            NEW actionContainer {
                caption = 'Действия';
                horizontal = TRUE;
            }
            NEW printTab {
                fill = 1;
                caption = 'Печатные формы';
                NEW printEI {
                    horizontal = TRUE;
                }
                NEW exportEI {
                    horizontal = TRUE;
                }
            }
        }

        MOVE TOOLBARBOX {
            TOOLBAR(e) {
                lines = 3;
            }
        }
    }
}

NAVIGATOR {
    edi 'EDI' {
        NEW eInvoices;
    }
}

FORM eInvoice 'Электронная накладная'
    OBJECTS e = EInvoice PANEL
    PROPERTIES(e) BACKGROUND background(e) dateSupplier, numberSupplier,
        deliveryNoteNumber, deliveryNoteDate, dateTimeCreated,
        contractName, contractId, contractDate, waybillId SHOWIF NOT isTN2(e),
        nameSupplier, addressSupplier, unpSupplier, nameSupplierStock, contactSupplier, addressSupplierStock, contactSupplierStock,
        nameCustomer, addressCustomer, unpCustomer, nameCustomerStock, addressCustomerStock, contactCustomerStock ON CHANGE changeContactCustomerStock(e),
        nameFreightPayer SHOWIF NOT isTN2(e), addressFreightPayer SHOWIF NOT isTN2(e), unpFreightPayer SHOWIF NOT isTN2(e),
        nameTransporter SHOWIF NOT isTN2(e), unpTransporter SHOWIF NOT isTN2(e), transportContact SHOWIF NOT isTN2(e), 
        deliveryContact HEADER 'Товар к ' + (IF isTN2(e) THEN 'доставке' ELSE 'перевозке') + ' принял (должность и ФИО)', proxyID, proxyDate, partyIssuingProxyName,
        quantityTrip SHOWIF NOT isTN2(e), transportOwnerName SHOWIF NOT isTN2(e), transportID SHOWIF NOT isTN2(e), trailerID SHOWIF NOT isTN2(e),
        sealIDReceiver SHOWIF NOT isTN2(e), currency, orderID, overReplaceNumber ON CHANGE changeReplaceNumber(e), isTestDocument

    OBJECTS ed = EInvoiceDetail
    PROPERTIES (ed) lineItemNumber, lineItemID, lineItemName, lineItemSign, lineItemBuyerID, itemCustomCode, lineItemSupplierID, quantityDespatched, 
        manufactureDate, expiryDate, valueVAT ON CHANGE changeValueVAT(ed), 
        lineItemPrice, lineItemAmountWithoutCharges, lineItemAmount, lineItemAmountCharges, grossWeightValue SHOWIF NOT isTN2(e), 
        lineItemQuantityUOM, despatchUnitQuantityDespatched SHOWIF NOT isTN2(e), additionalInformation, lineItemAmountExcise, 
        overLineItemExtraFields READONLY, fieldCodeMark, lineItemPartyNumber, countryOfOrigin
    FILTERS eInvoice(ed) == e

    OBJECTS edc = EInvoiceDetail
    PROPERTIES (edc) READONLY lineItemNumber, lineItemID, lineItemName
    PROPERTIES (edc) BACKGROUND RGB(224, 255, 255) lineItemManufacturerOutputPrice, typeDiscount, bulkDiscountRate,
        outputPriceIncludingShippingCoast, outputPriceShippingCoast, outputPricePackingCoast, bulkMarginRate, cutRate,
        additionalInformationPrice, additionalInformationNote
    FILTERS eInvoice(edc) == e

    OBJECTS edf = EInvoiceDetail
    PROPERTIES (edf) READONLY lineItemNumber, lineItemID, lineItemName
    FILTERS eInvoice(edf) == e
    
    OBJECTS ief = ItemExtraField
    PROPERTIES (ief) READONLY name, code
    PROPERTIES (ief) value
    FILTERS eInvoiceDetail(ief) == edf
    
    OBJECTS dl = EInvoiceDetail
    PROPERTIES (dl) READONLY lineItemNumber, lineItemID, lineItemName
    FILTERS eInvoice(dl) == e

    OBJECTS eld = EInvoiceLotDetail
    PROPERTIES(eld) READONLY idParent, id, quantity
    FILTERS eInvoiceDetail(eld) = dl
    
    OBJECTS ef = ExtraField
    PROPERTIES (ef) READONLY name, code
    PROPERTIES (ef) value
    FILTERS eInvoice(ef) == e
    
    EDIT EInvoice OBJECT e
;

DESIGN eInvoice {
    OBJECTS {
        NEW mainTabs {
            tabbed = TRUE;
            fill = 1;
            NEW main {
                caption = 'Данные накладной';
                fill = 1;
                NEW mainPanel{
                    lines = 2;
                    MOVE PROPERTY (deliveryNoteNumber(e));
                    MOVE PROPERTY (deliveryNoteDate(e));
                    NEW shipper {
                        align = STRETCH;
                        caption = 'Информация о грузоотправителе';
                        MOVE PROPERTY (nameSupplier(e));
                        MOVE PROPERTY (addressSupplier(e));
                        MOVE PROPERTY (unpSupplier(e));
                        MOVE PROPERTY (contactSupplier(e)){notNull = TRUE;};
                    }
                    NEW receiver {
                        align = STRETCH;
                        caption = 'Информация о грузополучателе';
                        MOVE PROPERTY (nameCustomer(e));
                        MOVE PROPERTY (addressCustomer(e));
                        MOVE PROPERTY (unpCustomer(e));
                    }
                    NEW shipFrom {
                        align = STRETCH;
                        caption = 'Информация о пункте погрузки';
                        MOVE PROPERTY (nameSupplierStock(e));
                        MOVE PROPERTY (addressSupplierStock(e));
                        MOVE PROPERTY (contactSupplierStock(e)){notNull = TRUE;};
                    }
                    NEW shipTo {
                        align = STRETCH;
                        caption = 'Информация о пункте разгрузки';
                        MOVE PROPERTY (nameCustomerStock(e));
                        MOVE PROPERTY (addressCustomerStock(e));
                        MOVE PROPERTY (contactCustomerStock(e));
                    }
                    NEW carrier1 {
                        align = STRETCH;
                        caption = 'Информация о транспортировке';
                        MOVE PROPERTY (transportContact(e)){notNull = TRUE;};
                        MOVE PROPERTY (deliveryContact(e)){notNull = TRUE;};
                        MOVE PROPERTY (proxyID(e));
                        MOVE PROPERTY (proxyDate(e));
                        MOVE PROPERTY (partyIssuingProxyName(e));
                    }
                    NEW carrier2 {
                        align = STRETCH;
                        caption = 'Информация о транспортировке';
                        MOVE PROPERTY (waybillId(e)){notNull = TRUE;};
                        MOVE PROPERTY (quantityTrip(e));
                        MOVE PROPERTY (transportOwnerName(e));
                        MOVE PROPERTY (transportID(e)){notNull = TRUE;};
                        MOVE PROPERTY (trailerID(e));
                    }
                    MOVE PROPERTY (sealIDReceiver(e));
                    NEW contract {
                        align = STRETCH;
                        MOVE PROPERTY (contractName(e));
                        MOVE PROPERTY (contractId(e)){notNull = TRUE;};
                        MOVE PROPERTY (contractDate(e)){notNull = TRUE;};
                    }
                }
                NEW tabs {
                    tabbed = TRUE;
                    fill = 1;
                    MOVE BOX(ed);
                    MOVE BOX(edc) {caption = 'Сведения по регулированию ценообразования';};
                    NEW itemExtra {
                        caption = 'Дополнительне поля, описывающие товар';
                        horizontal = TRUE;
                        fill = 1;
                        MOVE BOX(edf);
                        MOVE BOX(ief);
                    }
                    NEW eLotDetail {
                        caption = 'Маркировка';
                        horizontal = TRUE;
                        fill = 1;
                        MOVE BOX(dl);
                        MOVE BOX(eld);
                    }
                }
            }
            NEW add {
                caption = 'Дополнительная информация';
                fill = 1;
                NEW addPanel{
                    lines = 2;
                    MOVE PROPERTY (dateSupplier(e));
                    MOVE PROPERTY (numberSupplier(e));
                    MOVE PROPERTY (dateTimeCreated(e));
                    NEW payer {
                        caption = 'Информация о заказчике автомобильной перевозки';
                        MOVE PROPERTY (nameFreightPayer(e));
                        MOVE PROPERTY (addressFreightPayer(e));
                        MOVE PROPERTY (unpFreightPayer(e));
                    }
                    NEW transporter {
                        caption = 'Информация об автомобильном перевозчике';
                        MOVE PROPERTY (nameTransporter(e));
                        MOVE PROPERTY (unpTransporter(e));
                    }
                    MOVE PROPERTY (isTestDocument(e));
                    MOVE PROPERTY (orderID(e));
                    MOVE PROPERTY (overReplaceNumber(e));
                    MOVE PROPERTY (currency(e)){notNull = TRUE;};
                }
                MOVE BOX(ef);
            }
        }
    }
}

// -------
isNotEDI = DATA BOOLEAN (EInvoice);
isEDI 'EDI' (EInvoice e) = NOT isNotEDI(e) IF e IS EInvoice;

changeIsEDI (EInvoice e) {
    INPUT b = BOOLEAN DO {
        isNotEDI(e) <- NOT b;
    }
}

EXTEND FORM eInvoices
    PROPERTIES READONLYIF isReadonly() isEDI(e) ON CHANGE changeIsEDI(e)
;

editAttributesEInvoice 'Заполнить атрибуты ЭТТН' (EInvoice i) {
    NEWSESSION {
        SHOW eInvoice OBJECTS e = i DOCKED;
    }
} TOOLBAR IMAGE 'edit.png';

EXTEND FORM eInvoices
    PROPERTIES (e) editAttributesEInvoice
;

//первый это поставщик или покупатель, второй - мы
dataEDIProviderInvoice 'EDI-провайдер для накладных' = DATA EDIProvider (LegalEntity, LegalEntity);
EDIProviderInvoice 'EDI-провайдер для накладных' (LegalEntity legalEntity, LegalEntity company) = OVERRIDE dataEDIProviderInvoice(legalEntity, company), EDIProvider(legalEntity) IF isCompany(company);
nameEDIProviderInvoice 'EDI-провайдер для накладных' (LegalEntity legalEntity, LegalEntity company) = staticCaption(EDIProviderInvoice(legalEntity, company));

EXTEND FORM legalEntity
    PROPERTIES isNewFormatEInvoice(l)
    PROPERTIES (eCom) READONLY UNP
    PROPERTIES nameEDIProviderInvoice(l, eCom), GLNeInvoice(l) DRAW eCom;

DESIGN legalEntity {
    EDI {
        NEW EInvoice {
            caption = 'Накладные';
            MOVE PROPERTY (isNewFormatEInvoice(l));
        }
    }   
}


@openXML(EInvoice,e,eInvoices);

@openXML(EInvoiceMessage,m,eInvoices);

GROUP deliveryNote EXTID 'DeliveryNote';
GROUP shipper EXTID 'Shipper';
GROUP receiver EXTID 'Receiver';
GROUP shipTo EXTID 'ShipTo';

GROUP lineItemIdentification EXTID 'LineItemIdentification';
GROUP groupPackingHeader EXTID 'GroupPackingHeader';
GROUP fieldCodeMarkHeader EXTID 'FieldCodeMarkHeader';
GROUP exportfieldCodeMarkHeader EXTID 'FieldCodeMarkHeader' : lineItemIdentification;
GROUP fieldCostControl EXTID 'FieldCostControl';

//-----------------------------------------Электронный акт приемки----------------------------------------------//
CLASS ECreditNote 'Электронный акт приемки';
TABLE eCreditNote(ECreditNote);

blrapn = DATA STRING[35] (ECreditNote);

@defineExternalizable(eCreditNote, STRING[100]);
documentId 'Номер сообщения грузополучателя' = DATA STRING[35] (ECreditNote);
dateTime 'Дата и время создания акта' = DATA DATETIME (ECreditNote);

documentIdCancel 'Номер сообщения грузополучателя' = DATA STRING[35] (ECreditNote);
dateTimeCancel 'Дата и время создания акта' = DATA DATETIME (ECreditNote);

actDifNumber 'Номер электронного акта приемки' = DATA STRING[46] (ECreditNote) IN id;
eCreditNoteActDifNumber (number) = GROUP AGGR ECreditNote e BY actDifNumber(e) MATERIALIZED TABLE eInvoiceId;
actDifDate 'Дата электронного акта приемки' = DATA DATE (ECreditNote);

contractNumber 'Номер договора, на основании которого выставляется акт приемки' = DATA STRING[70] (ECreditNote);
contractDate 'Дата договора, на основании которого выставляется акт приемки' = DATA DATE (ECreditNote);

isCancel 'Отмена акта приемки' = DATA BOOLEAN (ECreditNote);

isTestDocument 'Тестовый документ' = DATA BOOLEAN (ECreditNote);

eInvoice = DATA EInvoice(ECreditNote) INDEXED;
eCreditNote = GROUP LAST ECreditNote ec IF NOT isCancel(ec) ORDER dateTime(ec), ec BY eInvoice(ec) MATERIALIZED INDEXED;

typeEInvoice 'Код вида товаросопроводительного документа' = DATA NUMERIC[3,0] (ECreditNote);
numberEInvoice 'Номер документа, к которому относится акт' = DATA STRING[70] (ECreditNote) IN id;
dateEInvoice 'Дата документа, к которому относится акт' = DATA DATE (ECreditNote);

supplier 'Поставщик' = DATA LegalEntity (ECreditNote);
unpSupplier 'УНП поставщика' (ECreditNote c) = UNP(supplier(c));
nameSupplier 'Поставщик' (ECreditNote c) = name(supplier(c));
addressSupplier 'Адрес поставщика' (ECreditNote c) = address(supplier(c));
dataGLNSupplier = DATA STRING[13] (ECreditNote);
glnSupplier 'GLN поставщика' (ECreditNote c) = OVERRIDE dataGLNSupplier(c), GLNeInvoice(supplier(c));

customer 'Покупатель' = DATA LegalEntity (ECreditNote);
unpCustomer 'УНП покупателя' (ECreditNote c) = UNP(customer(c));
nameCustomer 'Покупатель' (ECreditNote c) = name(customer(c));
addressCustomer 'Адрес покупателя' (ECreditNote c) = address(customer(c));
glnCustomer 'GLN покупателя' (ECreditNote c) = GLN(customer(c));

customerStock 'Склад покупателя' = DATA Stock (ECreditNote);
nameCustomerStock 'Склад покупателя' (ECreditNote c) = name(customerStock(c));
glnCustomerStock 'GLN склада покупателя' (ECreditNote c) = GLN(customerStock(c));
addressCustomerStock 'Адрес склада покупателя' (ECreditNote c) = address(customerStock(c));

CLASS ECreditNoteSupplierContact 'Представители грузоотправителя электронного акта приемки';
TABLE eCreditNoteSupplierContact(ECreditNoteSupplierContact);
eCreditNote = DATA ECreditNote (ECreditNoteSupplierContact) NONULL DELETE INDEXED AGGR;
contact 'Должность и ФИО представителя грузоотправителя' = DATA STRING[150] (ECreditNoteSupplierContact);
//proxyID 'Номер доверенности' = DATA STRING[70] (ECreditNoteSupplierContact);
//proxyDate 'Дата доверенности' = DATA DATE (ECreditNoteSupplierContact);
//partyIssuingProxyName 'Наименование организации, выдавшей доверенность' = DATA STRING[275] (ECreditNoteSupplierContact);
//
CLASS ECreditNoteCustomerContact 'Представители грузополучателя электронного акта приемки';
TABLE eCreditNoteCustomerContact(ECreditNoteCustomerContact);

eCreditNote = DATA ECreditNote (ECreditNoteCustomerContact) NONULL DELETE INDEXED AGGR;
contact 'Должность и ФИО представителя грузополучателя' = DATA STRING[150] (ECreditNoteCustomerContact);
//proxyID 'Номер доверенности' = DATA STRING[70] (ECreditNoteCustomerContact);
//proxyDate 'Дата доверенности' = DATA DATE (ECreditNoteCustomerContact);
//partyIssuingProxyName 'Наименование организации, выдавшей доверенность' = DATA STRING[275] (ECreditNoteCustomerContact);

currency 'Код валюты' = DATA STRING[3] (ECreditNote);

CLASS ECreditNoteExtraField 'Дополнительное поле';
TABLE eCreditNoteextraField(ECreditNoteExtraField);

name 'Название' = DATA STRING[255] (ECreditNoteExtraField) NONULL CHARWIDTH 20;
code 'Код' = DATA STRING[6] (ECreditNoteExtraField);
value 'Значение' = DATA STRING[2560] (ECreditNoteExtraField) NONULL CHARWIDTH 20;

eCreditNote = DATA ECreditNote(ECreditNoteExtraField) NONULL DELETE INDEXED;

correctField 'Поле накладной которое требует изменения' = DATA STRING[2560] (ECreditNote);
cancelDeliveryNoteId 'Номер отмененного электронного акта приемки' = DATA STRING[46] (ECreditNote);

CLASS ECreditNoteDetail 'Строка электронного акта приемки';
TABLE eCreditNoteDetail(ECreditNoteDetail);
@defineExternalizable(eCreditNoteDetail, STRING[100]);

in 'Вкл.' = DATA LOCAL BOOLEAN (ECreditNote);

eCreditNote = DATA ECreditNote(ECreditNoteDetail) NONULL DELETE INDEXED;

lineItemNumber 'Порядковый номер товара' = DATA INTEGER (ECreditNoteDetail);
lineItemID 'GTIN товара' = DATA STRING[14] (ECreditNoteDetail);
lineItemShipperID 'Код товара присвоенный поставщиком'= DATA STRING[100] (ECreditNoteDetail);
lineItemReceiverID 'Код товара присвоенный покупателем'= DATA STRING[100] (ECreditNoteDetail);
lineItemName 'Наименование товара' = DATA STRING[500] (ECreditNoteDetail);
itemCustomCode 'Код ТНВЭД' = DATA STRING[10] (ECreditNoteDetail);
itemCustomCodeOther 'Дополнительный таможенный код' = DATA STRING[4] (ECreditNoteDetail);
lineItemQuantityUOM 'Код единицы измерения' = DATA STRING[3] (ECreditNoteDetail);
additionalInformation 'Примечание, дополнительная информация о товаре' = DATA STRING[512] (ECreditNoteDetail);

valueVAT 'НДС, %' = DATA STRING[7] (ECreditNoteDetail);
changeValueVAT(ECreditNoteDetail ed) {
    INPUT n = NUMERIC[6,2] DO
        valueVAT(ed) <- STRING[7](n);
}

quantityDespatched 'Кол-во товара по документам' = DATA NUMERIC[16,5] (ECreditNoteDetail);
priceDespatched 'Цена за единицу товара' = DATA NUMERIC[16,2] (ECreditNoteDetail);
sumDespatched 'Стоимость товара по документам' = DATA NUMERIC[18,2] (ECreditNoteDetail);
invoiceSumDespatched 'Стоимость товара по документам (с НДС)' = DATA NUMERIC[18,2] (ECreditNoteDetail);

quantityReceived 'Кол-во фактически поставленного товара' = DATA NUMERIC[16,5] (ECreditNoteDetail);
priceReceived 'Цена фактически поставленного товара' = DATA NUMERIC[16,2] (ECreditNoteDetail);
sumReceived 'Стоимость фактически поставленного товара' = DATA NUMERIC[18,2] (ECreditNoteDetail);
invoiceSumReceived 'Стоимость фактически поставленного товара (с НДС)' = DATA NUMERIC[18,2] (ECreditNoteDetail);

quantityAccepted 'Принятое количество товара' = DATA NUMERIC[16,5] (ECreditNoteDetail);
priceAccepted 'Цена за единицу принятого поставленного товара' = DATA NUMERIC[16,2] (ECreditNoteDetail);
sumAccepted 'Стоимость принятого товара' = DATA NUMERIC[18,2] (ECreditNoteDetail);
invoiceSumAccepted 'Стоимость принятого товара (с НДС)' = DATA NUMERIC[18,2] (ECreditNoteDetail);

quantityNotAccepted 'Непринятое количество товара всего' = DATA NUMERIC[16,5] (ECreditNoteDetail);
priceNotAccepted 'Цена за единицу непринятого поставленного товара' = DATA NUMERIC[16,2] (ECreditNoteDetail);
sumNotAccepted 'Стоимость непринятого товара' = DATA NUMERIC[18,2] (ECreditNoteDetail);
invoiceSumNotAccepted 'Стоимость непринятого товара (с НДС)' = DATA NUMERIC[18,2] (ECreditNoteDetail);

totalLineItem 'Общее кол-во товарных позиций' (ECreditNote eCreditNote) = OVERRIDE [GROUP SUM 1 BY eCreditNote(ECreditNoteDetail d)](eCreditNote), 0;
totalQuantityDespatched 'Всего кол-во товара по документам' (ECreditNote eCreditNote) = OVERRIDE [GROUP SUM quantityDespatched(ECreditNoteDetail d) BY eCreditNote(d)](eCreditNote), 0.0;
totalSumDespached 'Общая стоимость товара по документам' (ECreditNote eCreditNote) = OVERRIDE [GROUP SUM sumDespatched(ECreditNoteDetail d) BY eCreditNote(d)](eCreditNote), 0.0;
totalInvoiceSumDespatched 'Общая стоимость товара по документам (с НДС)' (ECreditNote eCreditNote) = OVERRIDE [GROUP SUM invoiceSumDespatched(ECreditNoteDetail d) BY eCreditNote(d)](eCreditNote), 0.0;

totalQuantityReceived 'Всего кол-во поставленного товара' (ECreditNote eCreditNote) = OVERRIDE [GROUP SUM quantityReceived(ECreditNoteDetail d) BY eCreditNote(d)](eCreditNote), 0.0;
totalSumReceived 'Общая стоимость фактически поставленных товаров' (ECreditNote eCreditNote) = OVERRIDE [GROUP SUM sumReceived(ECreditNoteDetail d) BY eCreditNote(d)](eCreditNote), 0.0;
totalInvoiceSumReceived 'Общая стоимость фактически поставленных товаров' (ECreditNote eCreditNote) = OVERRIDE [GROUP SUM invoiceSumReceived(ECreditNoteDetail d) BY eCreditNote(d)](eCreditNote), 0.0;

//-----------------------------------------Сообщение по акту приемки -----------------------------------------//
CLASS ECreditNoteMessage 'Сообщение по электронному акту приемки';
TABLE eCreditNoteMessage(ECreditNoteMessage);

number 'Номер' = DATA STRING[24] (ECreditNoteMessage);
eCreditNote 'Акт приемки' = DATA ECreditNote (ECreditNoteMessage) NONULL DELETE INDEXED;
kind 'Вид' = DATA EInvoiceMessageKind (ECreditNoteMessage);
nameKind 'Вид' (ECreditNoteMessage o) = staticCaption(kind(o)) CHARWIDTH 20;

eCreditNoteMessage= GROUP AGGR ECreditNoteMessage e BY eCreditNote(e), number(e), kind(e);
numberECreditNote 'Акт приемки' (ECreditNoteMessage m) = actDifNumber(eCreditNote(m));
dateTime 'Дата/время сообщения' = DATA DATETIME (ECreditNoteMessage);
code 'Код сообщения' = DATA STRING[10] (ECreditNoteMessage);
description 'Текст сообщения' = DATA STRING[1000] (ECreditNoteMessage);

backgroundVAT 'Цвет' (ECreditNoteDetail d) = IF sku(lineItemReceiverID(d)) AND NOT NUMERIC[10,5](valueVAT(d)) == valueVAT(sku(lineItemReceiverID(d)))
    THEN RGB(255,0,0);
background = ABSTRACT CASE COLOR (ECreditNote);

CLASS ECreditNoteMessageType 'Тип сообщения по электронному акту приемки' {
    systemmessage_blradf 'SYSTEMMESSAGE-BLRADF',
    blrapn_blrapn 'BLRAPN-BLRAPN',
    blrapn_blradf 'BLRAPN-BLRADF',
    blradf 'BLRADF'
}

type 'Тип' = DATA ECreditNoteMessageType (ECreditNoteMessage);
nameType 'Тип' (ECreditNoteMessage o) = staticCaption(type(o));

background = ABSTRACT CASE COLOR (ECreditNoteDetail);

FORM eCreditNotes 'Электронные акты приемки'
    OBJECTS c = ECreditNote
    PROPERTIES(c) in
    PROPERTIES(c) READONLYIF isReadonly() isCancel
    PROPERTIES(c) READONLY dateTime BACKGROUND background(c), documentId BACKGROUND background(c), actDifNumber, actDifDate, 
        numberEInvoice, dateEInvoice, glnSupplier, nameSupplier, addressSupplier, nameCustomer, glnCustomer, addressCustomer, 
        nameCustomerStock, contractDate, contractNumber, isTestDocument, cancelDeliveryNoteId
    FILTERGROUP notExported

    OBJECTS d = ECreditNoteDetail
    PROPERTIES(d) READONLY BACKGROUND background(d) lineItemNumber, lineItemID, lineItemShipperID, lineItemReceiverID,
        lineItemName, itemCustomCode, itemCustomCodeOther, lineItemQuantityUOM, additionalInformation,
        valueVAT BACKGROUND backgroundVAT(d), quantityDespatched, priceDespatched, sumDespatched,
        invoiceSumDespatched, quantityReceived, priceReceived, sumReceived, invoiceSumReceived,
        quantityAccepted, priceAccepted, sumAccepted, invoiceSumAccepted, quantityNotAccepted,
        priceNotAccepted, sumNotAccepted, invoiceSumNotAccepted 
    FILTERS eCreditNote(d) == c

    OBJECTS m = ECreditNoteMessage
    PROPERTIES(m) READONLY numberECreditNote, dateTime, nameType, nameKind, code, description
    FILTERS eCreditNote(m) == c
    ORDERS dateTime(m)

    OBJECTS sc = ECreditNoteSupplierContact
    PROPERTIES(sc) contact
    FILTERS eCreditNote(sc) == c
    
    OBJECTS cc = ECreditNoteCustomerContact
    PROPERTIES(cc) contact
    FILTERS eCreditNote(cc) == c
;

@extendFormEditable(eCreditNotes);

DESIGN eCreditNotes {
    BOX {
        MOVE BOX(c);
        NEW tab {
            fill = 1;
            tabbed = TRUE;
            
            MOVE BOX(d);
            MOVE BOX(m);
            MOVE BOX(sc);
            MOVE BOX(cc);
        }
        MOVE TOOLBARBOX;
    }
}

NAVIGATOR {
    edi {
        NEW eCreditNotes;
    }
}

FORM eCreditNote 'Электронный акт приемки'
    OBJECTS c = ECreditNote PANEL
    PROPERTIES(c) dateTime BACKGROUND background(c), documentId BACKGROUND background(c), actDifNumber, actDifDate, numberEInvoice, dateEInvoice,
        nameSupplier, addressSupplier, nameCustomer, addressCustomer, nameCustomerStock,
        contractDate, contractNumber, currency, isTestDocument 
    
    OBJECTS ed = ECreditNoteDetail
    PROPERTIES(ed) BACKGROUND background(ed) lineItemNumber, lineItemID, lineItemShipperID, lineItemReceiverID,
        lineItemName, itemCustomCode, itemCustomCodeOther, lineItemQuantityUOM, additionalInformation,
        valueVAT BACKGROUND backgroundVAT(ed) ON CHANGE changeValueVAT(ed), quantityDespatched, priceDespatched, sumDespatched,
        invoiceSumDespatched, quantityReceived, priceReceived, sumReceived, invoiceSumReceived,
        quantityAccepted, priceAccepted, sumAccepted, invoiceSumAccepted, quantityNotAccepted,
        priceNotAccepted, sumNotAccepted, invoiceSumNotAccepted
    FILTERS eCreditNote(ed) == c

    OBJECTS sc = ECreditNoteSupplierContact
    PROPERTIES(sc) contact, NEW, DELETE
    FILTERS eCreditNote(sc) == c

    OBJECTS cc = ECreditNoteCustomerContact
    PROPERTIES(cc) contact, NEW, DELETE
    FILTERS eCreditNote(cc) == c
;

DESIGN eCreditNote {
    GROUP (,c) {
        lines = 2;
        fill = 1;
    }
    
    NEW tab {
        fill = 1;
        tabbed = TRUE;
        MOVE BOX(ed);
        MOVE BOX(sc);
        MOVE BOX(cc);
    }
    MOVE TOOLBARBOX;
}

editAttributesECreditNote 'Заполнить атрибуты' (ECreditNote c)  {
    NEWSESSION {
        SHOW eCreditNote OBJECTS c = c DOCKED;
    }
} TOOLBAR IMAGE 'edit.png';

EXTEND FORM eCreditNotes
    PROPERTIES (c) editAttributesECreditNote
;

@openXML(ECreditNote,c,eCreditNotes);
@openXML(ECreditNoteMessage,m,eCreditNotes);

blradfMsgSenderID = DATA LOCAL NESTED STRING[13]();
blradfMsgReceiverID = DATA LOCAL NESTED STRING[13]();
GROUP securityBuyer EXTID 'SecurityBuyer';
blradfSecurityID = DATA LOCAL NESTED STRING[14]();
blradfCertificateID = DATA LOCAL NESTED STRING[256]();
blradfSecurityPartyID = DATA LOCAL NESTED STRING[512]();
blradfCreationSignatureDate = DATA LOCAL NESTED STRING[8]();
blradfCreationSignatureTime = DATA LOCAL NESTED STRING[15]();
blradfSignatureValue = DATA LOCAL NESTED TEXT();

blradfDate = DATA LOCAL NESTED DATE();
blradfCreationDateTime = DATA LOCAL NESTED DATETIME ();