MODULE PurchaseOrderEDITopBy;

REQUIRE EDI, TopBy;

NAMESPACE EDI;

FORM purchaseOrder FORMEXTID 'ORDERS'
    OBJECTS o = EOrder PANEL
    PROPERTIES READONLY number(o) EXTID 'documentNumber',
                        documentDate = toChar(sendDateTime(o),'yyyy-MM-ddThh24:mi:ss') EXTID 'documentDate',
                        documentType = (IF isCancel(o) THEN '1' ELSE '9') EXTID 'documentType',
                        documentNameCode = (IF isReturn(o) THEN '70E' ELSE '220') EXTID 'documentNameCode',
                        GLNCustomer(o) EXTID 'buyerGLN',
                        nameCustomer(o) EXTID 'buyerName',
                        GLNCustomerStock(o) EXTID 'destinationGLN',
                        nameCustomerStock(o) EXTID 'destinationName',
                        GLNSupplierStock(o) EXTID 'supplierGLN',
                        GLNSupplierStock1(o) EXTID 'stGLN',
                        nameSupplier(o) EXTID 'supplierName',
                        deliveryDateTimeFirst = toChar(shipmentDateTime(o),'yyyy-MM-ddThh24:mi:ss') EXTID 'deliveryDateTimeFirst',
                        lineQuantity = (GROUP SUM 1 IF overQuantity(EOrderDetail od) > 0 AND GTINBarcode(od) AND order(od) == o) EXTID 'lineQuantity',
                        note(o) EXTID 'comment'
    OBJECTS d = EOrderDetail EXTID 'line'
    FILTERS order(d) == o
    PROPERTIES READONLY GTINBarcode(d) EXTID 'GTIN',
                        idSku(d) EXTID 'IDBuyer',
                        nameSku(d) EXTID 'fullName',
                        overQuantity(d) EXTID 'quantityOrdered',
                        extraCodeUOMSku(d) EXTID 'measurement',
                        priceElement = NUMERIC[16,2](round2(price(d))) EXTID 'priceElement',
                        tax = NUMERIC[4,2](round2(valueVAT(d))) EXTID 'tax'
    FILTERS overQuantity(d) > 0 AND GTINBarcode(d)
;

//FORM envelopePurchaseOrder
//    PROPERTIES ATTR ='http://topby.by/' EXTID 'xmlns:top'
//    OBJECTS login = TEXT, password = TEXT, innerXML = TEXT
//    OBJECTS o = EOrder
//    PROPERTIES DRAW o IN sendDocument VALUE(login) EXTID 'top:username', VALUE(password) EXTID 'top:password'
//    PROPERTIES IN sendDocument filename = (CONCAT '', 'order', number(o)) EXTID 'top:filename', 
//                  documentDate = toChar(sendDateTime(o),'yyyy-MM-ddThh24:mi:ss') EXTID 'top:documentDate',
//                  number(o) EXTID 'top:documentNumber',
//                  senderCode = GLNCustomer(o) EXTID 'top:senderCode',
//                  receiverCode = GLNCustomer(o) EXTID 'top:receiverCode',
//                  GLNCustomerStock(o) EXTID 'top:deliveryPointCode',
//                  documentType = 'ORDERS' EXTID 'top:documentType'
//    PROPERTIES IN sendDocument VALUE(innerXML) EXTID 'top:content'
//    FORMEXTID 'soapenv=http://schemas.xmlsoap.org/soap/envelope/:Envelope'
//;

sendPurchaseOrder (EOrder o, STRING[100] login, STRING[100] password, TEXT url, STRING[100] outputDir, STRING[100] provider) {
    sendingCancelled() <- NULL;
    TRY {
        IF login AND password THEN {
            LOCAL error = TEXT();
            error() <- '';
            IF NOT GLNSupplierStock(o) THEN error() <- error() + 'EOrder ' + number(o) + ': Не задан GLN склада поставщика\n';
            IF NOT GLNCustomer(o) THEN error() <- error() + 'EOrder ' + number(o) + ': Не задан GLN покупателя\n';
            IF NOT GLNCustomerStock(o) THEN error() <- error() + 'EOrder ' + number(o) + ': Не задан GLN склада покупателя\n';
            IF NOT shipmentDateTime(o) >= sumMinutes(currentDateTime(),60) THEN error() <- error() + 'EOrder ' + number(o) + ': Не верная дата/время поставки';
            
            IF error() == '' THEN {
                LOCAL contentSubXML = FILE();
                EXPORT purchaseOrder OBJECTS o = o XML TO contentSubXML;
                IF outputDir THEN {
                    TRY{ mkdir(outputDir + '/sent/orders/' + toChar(currentDate(),'yyyyMMdd')); }
                    WRITE contentSubXML() TO outputDir + '/sent/orders/' + toChar(currentDate(),'yyyyMMdd') + '/' + number(o) + (IF isCancel(o) THEN 'c' ELSE '');
                }
                fileToString(contentSubXML());
                encodeBase64(resultString());
                LOCAL xml = XMLFILE();
                envelopeLogin() <- login;
                envelopePassword() <- password;
                envelopeFilename() <- CONCAT '', 'order', number(o);
                envelopeDocumentDate() <- sendDateTime(o);
                envelopeDocumentNumber() <- number(o);
                envelopeSender() <- GLNCustomer(o);
                envelopeReceiver() <- GLNCustomer(o);
                envelopeDeliveryPoint() <- GLNCustomerStock(o);
                envelopeDocumentType() <- 'ORDERS';
                envelopeContent() <- encodedBase64();
                EXPORT envelope XML TO xml;
                //EXPORT envelopePurchaseOrder OBJECTS o = o, login = login, password = password, innerXML = encodedBase64() XML TO xml;
                sendRequestEDI(login, password, url, xml());
                logToFile('edi', provider + ' SendEOrder ' + number(o) +' request sent');
                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                IF requestError() THEN {
                    logToFile('edi', provider + ' SendEOrder ' + number(o) + ': ' + requestError());
                    MESSAGE provider + ' Заказ ' + number(o) + ' не выгружен: ' + requestError() NOWAIT;
                } ELSE {
                    IF isCancel(o) THEN exportedCanceled(o) <- TRUE; ELSE exported(o) <- TRUE;
                    logToFile('edi', provider + ' SendEOrder ' + number(o) + ' request succeeded');
                    MESSAGE provider + ' Заказ ' + number(o) + ' выгружен' NOWAIT;
                }
            } ELSE {
                logToFile('edi', provider + ' SendEOrder: Не все поля заполнены. ' + error());
                MESSAGE provider + ' Заказ не выгружен: Не все поля заполнены ' + error() NOWAIT;
            }
        } ELSE {
            logToFile('edi', provider + ' SendEOrder: не заданы имя пользователя / пароль / хост / порт');
            MESSAGE provider + ' Заказ не выгружен: не заданы имя пользователя / пароль / хост / порт' NOWAIT;
        }
    } CATCH {
        logToFile('edi', CONCAT '\n', provider + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
        MESSAGE 'Заказ не выгружен. Обратитесь к администратору' NOWAIT;
        
        CANCEL;
        sendingCancelled() <- TRUE; 
    }
}

sendPurchaseOrderTopBy (EOrder o) {
    checkIsServer();
    IF isServer() THEN {
        sendPurchaseOrder(o, loginTopBy(customer(o)), passwordTopBy(customer(o)), ('http://' +  hostTopBy(customer(o)) + ':' + portTopBy(customer(o)) + '/DmcService'), outputDirTopBy(), 'TopBy');
    }
}

send(EOrder o) + { IF EDIProvider(supplier(o)) == EDIProvider.topBy AND NOT isCancel(o) THEN IF NOT toSend(o) THEN MESSAGE 'Заказ уже отправлен'; ELSE {sendPurchaseOrderTopBy(o);} }
cancel(EOrder o) + {IF EDIProvider(supplier(o)) == EDIProvider.topBy AND isCancel(o) THEN IF exportedCanceled(o) THEN MESSAGE 'Заказ уже отменен'; ELSE {sendPurchaseOrderTopBy(o);} }

ordrspDocumentNumber = DATA LOCAL NESTED STRING[48]();
ordrspDocumentDate = DATA LOCAL NESTED DATETIME();
ordrspResponseType = DATA LOCAL NESTED INTEGER();
ordrspBuyerGLN = DATA LOCAL NESTED STRING[13]();
ordrspDestinationGLN = DATA LOCAL NESTED STRING[13]();
ordrspSupplierGLN = DATA LOCAL NESTED STRING[13]();
ordrspOrderNumber = DATA LOCAL NESTED STRING[48]();
ordrspDeliveryDateTimeFirst = DATA LOCAL NESTED TEXT();
ordrspDeliveryDateTimeSecond = DATA LOCAL NESTED TEXT();
ordrspComment = DATA LOCAL NESTED TEXT();
ordrspGTIN = DATA LOCAL NESTED STRING[15](INTEGER);
ordrspAction = DATA LOCAL NESTED INTEGER(INTEGER);
ordrspQuantityOrdered = DATA LOCAL NESTED NUMERIC[16,5](INTEGER);
ordrspQuantityAccepted = DATA LOCAL NESTED NUMERIC[16,5](INTEGER);
ordrspPriceElement = DATA LOCAL NESTED NUMERIC[16,2](INTEGER);
ordrspPriceNoNDS = DATA LOCAL NESTED NUMERIC[16,4](INTEGER);
ordrspPriceNDS = DATA LOCAL NESTED NUMERIC[16,4](INTEGER);

FORM ordrsp
    PROPERTIES() ordrspDocumentNumber EXTID 'documentNumber', ordrspDocumentDate EXTID 'documentDate',
                 ordrspResponseType EXTID 'function', ordrspBuyerGLN EXTID 'buyerGLN',
                 ordrspDestinationGLN EXTID 'destinationGLN', ordrspSupplierGLN EXTID 'supplierGLN',
                 ordrspOrderNumber EXTID 'orderNumber', ordrspDeliveryDateTimeFirst EXTID 'deliveryDateTimeFirst',
                 ordrspDeliveryDateTimeSecond EXTID 'deliveryDateTimeSecond', ordrspComment EXTID 'comment'
    OBJECTS i = INTEGER EXTID 'line'
    PROPERTIES(i) ordrspGTIN EXTID 'GTIN', ordrspAction EXTID 'action', ordrspQuantityOrdered EXTID 'quantityOrdered',
                  ordrspQuantityAccepted EXTID 'quantityAccepted', ordrspPriceElement EXTID 'priceElement',
                  ordrspPriceNoNDS EXTID 'priceNoNDS', ordrspPriceNDS EXTID 'priceNDS'
;

indexEOrderResponseDetail (INTEGER i) = PARTITION SUM 1 ORDER i BY ordrspGTIN(i),ordrspOrderNumber();

@openXML(EOrderResponse,o,eOrderResponses);

overImportOrdrsp ABSTRACT (EOrderResponse);

overReceiveMessages(INTEGER i, STRING[100] login, STRING[100] password, TEXT url, STRING[100] archiveDir, BOOLEAN disableConfirmation, BOOLEAN receiveSupplierMessages, BOOLEAN sendReplies, BOOLEAN invoices, STRING[100] provider) + {
    IF lower(documentType(i)) == 'ordrsp' AND NOT invoices THEN {
        TRY {
            IMPORT ordrsp XML FROM data(i);
            ordrspOrderNumber() <- trim(ordrspOrderNumber());
            IF eOrder(ordrspOrderNumber()) THEN {
                NEWSESSION NESTED LOCAL {
                    IF NOT eOrderResponse(ordrspSupplierGLN() + '/' + ordrspDocumentNumber() + '/' + ordrspOrderNumber()) THEN NEW r = EOrderResponse {
                        id(r) <- ordrspSupplierGLN() + '/' + ordrspDocumentNumber() + '/' + ordrspOrderNumber();
                    }
                    LOCAL idDetail = STRING[100] (INTEGER);
                    idDetail(INTEGER l) <- CONCAT '/', ordrspSupplierGLN(), ordrspDocumentNumber(), ordrspOrderNumber(), ordrspGTIN(l), (indexEOrderResponseDetail(l) IF indexEOrderResponseDetail(l) > 1) WHERE ordrspGTIN(l);
                    FOR ordrspGTIN(INTEGER l) AND NOT eOrderResponseDetail(idDetail(l)) DO NEW d = EOrderResponseDetail {
                        orderResponse(d) <- eOrderResponse(ordrspSupplierGLN() + '/' + ordrspDocumentNumber() + '/' + ordrspOrderNumber());
                        id(d) <- idDetail(l);
                    }
                    FOR EOrderResponse r == eOrderResponse(ordrspSupplierGLN() + '/' + ordrspDocumentNumber() + '/' + ordrspOrderNumber()) DO {
                        number(r) <- ordrspDocumentNumber();
                        dateTime(r) <- ordrspDocumentDate();
                        responseType(r) <- CASE
                                            WHEN ordrspResponseType() == 4 THEN EOrderResponseType.changed
                                            WHEN ordrspResponseType() == 27 THEN EOrderResponseType.cancelled
                                            WHEN ordrspResponseType() == 29 THEN EOrderResponseType.accepted;
                        note(r) <- STRING[100](ordrspComment());
                        supplier(r) <- legalEntityStockGLN(ordrspSupplierGLN());
                        customer(r) <- legalEntityGLN(ordrspBuyerGLN());
                        eOrder(r) <- eOrder(ordrspOrderNumber());
                        customerStock(r) <- customerStock(eOrder(ordrspOrderNumber()));
                        IF left(ordrspDeliveryDateTimeFirst(),1) == 'T' THEN {
                            ordrspDeliveryDateTimeFirst() <- toChar(currentDate(),'yyyy-MM-dd') + ordrspDeliveryDateTimeFirst();
                        }
                        IF left(ordrspDeliveryDateTimeSecond(),1) == 'T' THEN {
                            ordrspDeliveryDateTimeSecond() <- toChar(currentDate(),'yyyy-MM-dd') + ordrspDeliveryDateTimeSecond();
                        }
                        deliveryDateTime(r) <- toDateTimeFormat(ordrspDeliveryDateTimeFirst(),'yyyy-MM-ddThh24:mi:ss');
                        deliveryDateTimeSecond(r) <- toDateTimeFormat(ordrspDeliveryDateTimeSecond(),'yyyy-MM-ddThh24:mi:ss');
                        XMLPath(r) <- archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                        
                        LOCAL indexSku = INTEGER (INTEGER);
                        LOCAL sku = Sku (INTEGER);
                        
                        sku(INTEGER l) <- OVERRIDE (GROUP MAX sku(EOrderDetail dd) IF GTINBarcode(dd) == ordrspGTIN(l) AND order(dd) == eOrder(r)), skuGTIN(ordrspGTIN(l));
                        indexSku(INTEGER l) <- PARTITION SUM 1 ORDER ordrspQuantityOrdered(l), -ordrspQuantityAccepted(l), l BY sku(l); //сортировка по принятым откланенным, принятые первыми
                        fillIndexSku(eOrder(r));
                        
                        FOR ordrspGTIN(INTEGER l) AND EOrderResponseDetail d == eOrderResponseDetail(idDetail(l)) DO {
                            orderResponse(d) <- r;
                            sku(d) <- sku(l);
                            dataGTIN(d) <- ordrspGTIN(l);
                            action(d) <- CASE
                                            WHEN ordrspAction(l) == 1 THEN EOrderResponseDetailAction.added
                                            WHEN ordrspAction(l) == 3 THEN EOrderResponseDetailAction.changed
                                            WHEN ordrspAction(l) == 5 THEN EOrderResponseDetailAction.accepted
                                            WHEN ordrspAction(l) == 7 THEN EOrderResponseDetailAction.cancelled;
                            quantityOrdered(d) <- ordrspQuantityOrdered(l);
                            quantityAccepted(d) <- ordrspQuantityAccepted(l);
                            price(d) <- ordrspPriceElement(l);
                            sumNoNDS(d) <- ordrspPriceNoNDS(l);
                            sumNDS(d) <- ordrspPriceNDS(l);
                        }
                        FOR ordrspGTIN(INTEGER l) INLINE DO {
                            responseDetail(EOrderDetail od) <- eOrderResponseDetail(idDetail(l)) WHERE eOrder(ordrspOrderNumber()) == order(od) AND sku(l) == sku(od) AND indexSku(l) == localIndexSku(od);
                        }
                        overImportOrdrsp(r);
                        
                        APPLY NESTED LOCAL;
                        IF canceled() THEN {
                            IF NOT disableConfirmation AND sendReplies THEN {
                                LOCAL contentSubXML = FILE();
                                EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = ordrspDocumentNumber(), code = '1450', description = applyMessage() XML TO contentSubXML;
                                fileToString(contentSubXML());
                                encodeBase64(resultString());
                                LOCAL xml = XMLFILE();
                                envelopeLogin() <- login;
                                envelopePassword() <- password;
                                envelopeDocumentDate() <- currentDateTime();
                                envelopeDocumentNumber() <- id(i);
                                envelopeDocumentType() <- 'SYSTEMMESSAGE';
                                envelopeContent() <- encodedBase64();
                                EXPORT envelope XML TO xml;
                                //EXPORT envelopeMessage OBJECTS login = login, password = password, date = currentDateTime(), number = id(i), innerXML = encodedBase64() XML TO xml;
                                sendRequestEDI(login, password, url, xml());
                                logToFile('edi', provider + ' RecipientError ' + id(i) +' request sent');
                                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                                IF requestError() THEN {
                                    sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                                    logToFile('edi', provider + ' RecipientError ' + id(i) + ': ' + requestError());
                                    MESSAGE provider + ' Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
                                } ELSE {
                                    logToFile('edi', provider + ' RecipientError ' + id(i) + ' request succeeded');
                                }
                            }
                            logToFile('edi', provider + ' Import EOrderResponse ' + id(i) + ' failed: ' + applyMessage());
                            responsesFailed() <- responsesFailed() + 1;
                        } ELSE {
                            IF NOT disableConfirmation THEN {
                                LOCAL xml = XMLFILE();
                                EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO xml;
                                sendRequestEDI(login, password, url, xml());
                                logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request sent');
                                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                                IF requestError() THEN {
                                    logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                                    MESSAGE provider + ' Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                                } ELSE {
                                    IF archiveDir THEN {
                                        TRY{ mkdir(archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd')); }
                                        WRITE data(i) TO archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                                    }
                                    logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                                }
                            }
                            logToFile('edi', provider + ' Import EOrderResponse ' + id(i) + ' succeeded');
                            responsesSucceeded() <- responsesSucceeded() + 1;
                        }
                    }
                }
            } ELSE {
                IF confirmNotFoundOrders() THEN {
                    IF NOT disableConfirmation THEN {
                        LOCAL xml = XMLFILE();
                        EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO xml;
                        sendRequestEDI(login, password, url, xml());
                        logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request sent');
                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                        IF requestError() THEN {
                            logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                            MESSAGE provider + ' Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                        } ELSE {
                            IF archiveDir THEN {
                                TRY{ mkdir(archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd')); }
                                WRITE data(i) TO archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                            }
                            logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                        }
                    }
                } ELSE {
                    IF NOT disableConfirmation AND sendReplies THEN {
                        LOCAL contentSubXML = FILE();
                        EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = ordrspDocumentNumber(), code = '1450', description = (provider + ' Import EOrderResponse ' + id(i) + ' failed: ' + 'EOrder ' + (OVERRIDE ordrspOrderNumber(), 'NULL') + ' not found') XML TO contentSubXML;
                        fileToString(contentSubXML());
                        encodeBase64(resultString());
                        LOCAL xml = XMLFILE();
                        envelopeLogin() <- login;
                        envelopePassword() <- password;
                        envelopeDocumentDate() <- currentDateTime();
                        envelopeDocumentNumber() <- id(i);
                        envelopeDocumentType() <- 'SYSTEMMESSAGE';
                        envelopeContent() <- encodedBase64();
                        EXPORT envelope XML TO xml;
                        //EXPORT envelopeMessage OBJECTS login = login, password = password, date = currentDateTime(), number = id(i), innerXML = encodedBase64() XML TO xml;
                        sendRequestEDI(login, password, url, xml());
                        logToFile('edi', provider + ' RecipientError ' + id(i) +' request sent');
                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                        IF requestError() THEN {
                            sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                            logToFile('edi', provider + ' RecipientError ' + id(i) + ': ' + requestError());
                            MESSAGE provider + ' Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
                        } ELSE {
                            logToFile('edi', provider + ' RecipientError ' + id(i) + ' request succeeded');
                        }
                    }
                }
                logToFile('edi', provider + ' Import EOrderResponse ' + id(i) + ' failed: ' + 'EOrder ' + (OVERRIDE ordrspOrderNumber(), 'NULL') + ' not found');
                responsesFailed() <- responsesFailed() + 1;
            }
        } CATCH {
            logToFile('edi', CONCAT '\n', provider + ' Parse EOrderResponse ' + id(i) + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE  'Ошибка при импорте ответа по заказу ' + id(i) +'. Обратитесь к администратору' NOWAIT;
            responsesFailed() <- responsesFailed() + 1;
        }
    }
}

desadvDocumentNumber = DATA LOCAL NESTED STRING[48]();
desadvDocumentDate = DATA LOCAL NESTED DATETIME();
desadvDeliveryNoteNumber = DATA LOCAL NESTED STRING[48]();
desadvDeliveryNoteDate = DATA LOCAL NESTED DATE();
desadvBuyerGLN = DATA LOCAL NESTED STRING[13]();
desadvDestinationGLN = DATA LOCAL NESTED STRING[13]();
desadvSupplierGLN = DATA LOCAL NESTED STRING[13]();
desadvStGLN = DATA LOCAL NESTED STRING[13]();
desadvOrderNumber = DATA LOCAL NESTED STRING[48]();
desadvOrderDate = DATA LOCAL NESTED DATETIME();
desadvDeliveryDateTimeFirst = DATA LOCAL NESTED DATETIME();
desadvComment = DATA LOCAL NESTED TEXT();
desadvGTIN = DATA LOCAL NESTED STRING[15](INTEGER);
desadvQuantityOrdered = DATA LOCAL NESTED NUMERIC[16,5](INTEGER);
desadvQuantityDespatch = DATA LOCAL NESTED NUMERIC[16,5](INTEGER);
desadvVAT = DATA LOCAL NESTED NUMERIC[16,5](INTEGER);
desadvLineItemPrice = DATA LOCAL NESTED NUMERIC[16,2](INTEGER);
desadvLineItemAmountWithoutCharges = DATA LOCAL NESTED NUMERIC[16,4](INTEGER);
desadvLineItemAmount = DATA LOCAL NESTED NUMERIC[16,4](INTEGER);
desadvLineItemAmountCharges = DATA LOCAL NESTED NUMERIC[16,4](INTEGER);

FORM desadv
    PROPERTIES() desadvDocumentNumber EXTID 'documentNumber', desadvDocumentDate EXTID 'documentDate',
                 desadvDeliveryNoteNumber EXTID 'deliveryNoteNumber', desadvDeliveryNoteDate EXTID 'deliveryNoteDate',
                 desadvBuyerGLN EXTID 'buyerGLN', desadvDestinationGLN EXTID 'destinationGLN', desadvSupplierGLN EXTID 'supplierGLN',
                 desadvOrderNumber EXTID 'orderNumber', desadvOrderDate EXTID 'orderDate', desadvStGLN EXTID 'stGLN',
                 desadvDeliveryDateTimeFirst EXTID 'deliveryDateTimeFirst', desadvComment EXTID 'comment'
    OBJECTS i = INTEGER EXTID 'line'
    PROPERTIES(i) desadvGTIN EXTID 'GTIN', desadvQuantityOrdered EXTID 'quantityOrdered',
                  desadvQuantityDespatch EXTID 'quantityDespatch', desadvVAT EXTID 'vat',
                  desadvLineItemPrice EXTID 'lineItemPrice', desadvLineItemAmountWithoutCharges EXTID 'lineItemAmountWithoutCharges',
                  desadvLineItemAmount EXTID 'lineItemAmount', desadvLineItemAmountCharges EXTID 'lineItemAmountCharges'
;

@openXML(EOrderDespatchAdvice,o,eOrderDespatchAdvices);

overReceiveMessageDesadv ABSTRACT ();

overReceiveMessages(INTEGER i, STRING[100] login, STRING[100] password, TEXT url, STRING[100] archiveDir, BOOLEAN disableConfirmation, BOOLEAN receiveSupplierMessages, BOOLEAN sendReplies, BOOLEAN invoices, STRING[100] provider) + {
    IF lower(documentType(i)) == 'desadv' AND NOT invoices THEN {
        TRY {
            IMPORT desadv XML FROM data(i);
            desadvOrderNumber() <- trim(desadvOrderNumber());
            overReceiveMessageDesadv();
            IF eOrder(desadvOrderNumber()) THEN {
                NEWSESSION NESTED LOCAL {
                    IF NOT eOrderDespatchAdvice(desadvSupplierGLN() + '/' + desadvDocumentNumber() + '/' + desadvOrderNumber()) THEN NEW a = EOrderDespatchAdvice {
                        id(a) <- desadvSupplierGLN() + '/' + desadvDocumentNumber() + '/' + desadvOrderNumber();
                    }
                    FOR desadvGTIN(INTEGER l) AND NOT eOrderDespatchAdviceDetail(desadvSupplierGLN() + '/' + desadvDocumentNumber() + '/' + desadvOrderNumber() + '/' + l) DO NEW d = EOrderDespatchAdviceDetail {
                        orderDespatchAdvice(d) <- eOrderDespatchAdvice(desadvSupplierGLN() + '/' + desadvDocumentNumber() + '/' + desadvOrderNumber());
                        id(d) <- desadvSupplierGLN() + '/' + desadvDocumentNumber() + '/' + desadvOrderNumber() + '/' + l;
                    }
                    FOR EOrderDespatchAdvice a == eOrderDespatchAdvice(desadvSupplierGLN() + '/' + desadvDocumentNumber() + '/' + desadvOrderNumber()) DO {
                        number(a) <- desadvDocumentNumber();
                        dateTime(a) <- desadvDocumentDate();
                        deliveryNoteNumber(a) <- desadvDeliveryNoteNumber();
                        deliveryNoteDateTime(a) <- toDateTime(desadvDeliveryNoteDate());
                        note(a) <- STRING[100](desadvComment());
                        supplier(a) <- legalEntityStockGLN(desadvSupplierGLN());
                        customer(a) <- legalEntityGLN(desadvBuyerGLN());
                        eOrder(a) <- eOrder(desadvOrderNumber());
                        customerStock(a) <- customerStock(eOrder(desadvOrderNumber()));
                        deliveryDateTime(a) <- desadvDeliveryDateTimeFirst();
                        XMLPath(a) <- archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                        FOR desadvGTIN(INTEGER l) AND EOrderDespatchAdviceDetail d == eOrderDespatchAdviceDetail(desadvSupplierGLN() + '/' + desadvDocumentNumber() + '/' + desadvOrderNumber() + '/' + l) DO {
                            sku(d) <- OVERRIDE (GROUP MAX sku(EOrderDetail dd) IF GTINBarcode(dd) == desadvGTIN(l) AND order(dd) == eOrder(a)), skuGTIN(desadvGTIN(l));
                            dataGTIN(d) <- desadvGTIN(l);
                            quantityOrdered(d) <- desadvQuantityOrdered(l);
                            quantityDespatch(d) <- desadvQuantityDespatch(l);
                            valueVAT(d) <- desadvVAT(l);
                            lineItemPrice(d) <- desadvLineItemPrice(l);
                            lineItemAmountWithoutCharges(d) <- desadvLineItemAmountWithoutCharges(l);
                            lineItemAmount(d) <- desadvLineItemAmount(l);
                            lineItemAmountCharges(d) <- desadvLineItemAmountCharges(l);
                        }
                        APPLY NESTED LOCAL;
                        IF canceled() THEN {
                            IF NOT disableConfirmation AND sendReplies THEN {
                                LOCAL contentSubXML = FILE();
                                EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = desadvDocumentNumber(), code = '1450', description = applyMessage() XML TO contentSubXML;
                                fileToString(contentSubXML());
                                encodeBase64(resultString());
                                LOCAL xml = XMLFILE();
                                envelopeLogin() <- login;
                                envelopePassword() <- password;
                                envelopeDocumentDate() <- currentDateTime();
                                envelopeDocumentNumber() <- id(i);
                                envelopeDocumentType() <- 'SYSTEMMESSAGE';
                                envelopeContent() <- encodedBase64();
                                EXPORT envelope XML TO xml;
                                //EXPORT envelopeMessage OBJECTS login = login, password = password, date = currentDateTime(), number = id(i), innerXML = encodedBase64() XML TO xml;
                                sendRequestEDI(login, password, url, xml());
                                logToFile('edi', provider + ' RecipientError ' + id(i) +' request sent');
                                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                                IF requestError() THEN {
                                    sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                                    logToFile('edi', provider + ' RecipientError ' + id(i) + ': ' + requestError());
                                    MESSAGE provider + ' Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
                                } ELSE {
                                    logToFile('edi', provider + ' RecipientError ' + id(i) + ' request succeeded');
                                }
                            }
                            logToFile('edi', provider + ' Import EOrderDespatchAdvice ' + id(i) + ' failed: ' + applyMessage());
                            despatchAdvicesFailed() <- despatchAdvicesFailed() + 1;
                        } ELSE {
                            IF NOT disableConfirmation THEN {
                                LOCAL xml = XMLFILE();
                                EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO xml;
                                sendRequestEDI(login, password, url, xml());
                                logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request sent');
                                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                                IF requestError() THEN {
                                    logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                                    MESSAGE provider + ' Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                                } ELSE {
                                    IF archiveDir THEN {
                                        TRY{ mkdir(archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd')); }
                                        WRITE data(i) TO archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                                    }
                                    logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                                }
                            }
                            logToFile('edi', provider + ' Import EOrderDespatchAdvice ' + id(i) + ' succeeded');
                            despatchAdvicesSucceeded() <- despatchAdvicesSucceeded() + 1;
                        }
                    }
                }
            } ELSE {
                IF confirmNotFoundOrders() THEN {
                    IF NOT disableConfirmation THEN {
                        LOCAL xml = XMLFILE();
                        EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO xml;
                        sendRequestEDI(login, password, url, xml());
                        logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request sent');
                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                        IF requestError() THEN {
                            logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                            MESSAGE provider + ' Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                        } ELSE {
                            IF archiveDir THEN {
                                TRY{ mkdir(archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd')); }
                                WRITE data(i) TO archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                            }
                            logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                        }
                    }
                } ELSE {
                    IF NOT disableConfirmation AND sendReplies THEN {
                        LOCAL contentSubXML = FILE();
                        EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = desadvDocumentNumber(), code = '1450', description = (provider + ' Import EOrderDespatchAdvice ' + id(i) + ' failed: ' + 'EOrder ' + (OVERRIDE desadvOrderNumber(), 'NULL') + ' not found') XML TO contentSubXML;
                        fileToString(contentSubXML());
                        encodeBase64(resultString());
                        LOCAL xml = XMLFILE();
                        envelopeLogin() <- login;
                        envelopePassword() <- password;
                        envelopeDocumentDate() <- currentDateTime();
                        envelopeDocumentNumber() <- id(i);
                        envelopeDocumentType() <- 'SYSTEMMESSAGE';
                        envelopeContent() <- encodedBase64();
                        EXPORT envelope XML TO xml;
                        //EXPORT envelopeMessage OBJECTS login = login, password = password, date = currentDateTime(), number = id(i), innerXML = encodedBase64() XML TO xml;
                        sendRequestEDI(login, password, url, xml());
                        logToFile('edi', provider + ' RecipientError ' + id(i) +' request sent');
                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                        IF requestError() THEN {
                            sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                            logToFile('edi', provider + ' RecipientError ' + id(i) + ': ' + requestError());
                            MESSAGE provider + ' Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
                        } ELSE {
                            logToFile('edi', provider + ' RecipientError ' + id(i) + ' request succeeded');
                        }
                    }
                }
                logToFile('edi', provider + ' Import EOrderDespatchAdvice ' + id(i) + ' failed: ' + 'EOrder ' + (OVERRIDE desadvOrderNumber(), 'NULL') + ' not found');
                despatchAdvicesFailed() <- despatchAdvicesFailed() + 1;
            }
        } CATCH {
            logToFile('edi', CONCAT '\n', provider + ' Parse EOrderDespatchAdvice ' + id(i) + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE  'Ошибка при импорте уведомления об отгрузке ' + id(i) +'. Обратитесь к администратору' NOWAIT;
            despatchAdvicesFailed() <- despatchAdvicesFailed() + 1;
        }
    }
}