MODULE EDSEDN;

REQUIRE EDS, EDN;

NAMESPACE EDN;

EXTEND CLASS EDSApplication {
    docudriveProxy '(ЭДиН) Прокси сервис Docudrive'
}

isEDN(EDSApplication a) = a == EDSApplication.docudriveProxy;

aliasEDSService 'Токен ЭЦП - имя контейнера' = DATA STRING[150] (LegalEntity);
passwordEDSService 'Токен ЭЦП - пароль' = DATA STRING[100] (LegalEntity) ECHO;
aliasEDSService 'Токен ЭЦП - имя контейнера' = DATA STRING[150] (Stock);
passwordEDSService 'Токен ЭЦП - пароль' = DATA STRING[100] (Stock) ECHO;
aliasEDSService 'Токен ЭЦП - имя контейнера' = DATA STRING[150] (Employee);
passwordEDSService 'Токен ЭЦП - пароль' = DATA STRING[100] (Employee) ECHO;

EDSService 'Прокси сервис Docudrive' = DATA EDSService (LegalEntity);
descriptionEDSService 'Прокси сервис Docudrive' (LegalEntity o) = description(EDSService(o));
CONSTRAINT EDSService(LegalEntity o) AND NOT isEDN(edsApplication(EDSService(o)))
    CHECKED BY EDSService[LegalEntity]
    MESSAGE 'Задан тип приложения ЭЦП недоступный для провайдера';

EDSService 'Прокси сервис Docudrive' = DATA EDSService (Stock);
descriptionEDSService 'Прокси сервис Docudrive' (Stock o) = description(EDSService(o));
CONSTRAINT EDSService(Stock o) AND NOT isEDN(edsApplication(EDSService(o)))
    CHECKED BY EDSService[Stock]
    MESSAGE 'Задан тип приложения ЭЦП недоступный для провайдера';

EDSService 'Прокси сервис Docudrive' = DATA EDSService (Employee);
descriptionEDSService 'Прокси сервис Docudrive' (Employee o) = description(EDSService(o));
CONSTRAINT EDSService(Employee o) AND NOT isEDN(edsApplication(EDSService(o)))
    CHECKED BY EDSService[Employee]
    MESSAGE 'Задан тип приложения ЭЦП недоступный для провайдера';

useExternalApplication = ABSTRACT BOOLEAN ();

EXTEND FORM integrationData
    PROPERTIES() READONLY askPasswordEDSServiceEDN = askPasswordEDSService
    OBJECTS lee = LegalEntity
    FILTERS isCompany(lee)
    PROPERTIES(lee) SHOWIF NOT useDocuDrive() name READONLY, aliasEDSService, passwordEDSService, descriptionEDSService
    
    OBJECTS sedse = Stock
    PROPERTIES(sedse) SHOWIF NOT useDocuDrive() name READONLY, aliasEDSService, passwordEDSService, descriptionEDSService
    FILTERS isCompany(sedse)
    
    OBJECTS eedse = Employee
    PROPERTIES(eedse) SHOWIF NOT useDocuDrive() READONLY lastName, firstName, namePosition
    PROPERTIES(eedse) SHOWIF NOT useDocuDrive() aliasEDSService, passwordEDSService, descriptionEDSService
    FILTERS active(eedse)
;

DESIGN integrationData {
    col2EDN {
        NEW edsEDN {
            caption = 'Электронные подписи';
            fill = 1;
            MOVE PROPERTY (askPasswordEDSServiceEDN);
            NEW EDSServiceEDN {
                showIf = NOT useExternalApplication();
                tabbed = TRUE;
                fill = 1;
                MOVE BOX(lee);
                MOVE BOX(sedse);
                MOVE BOX(eedse);
            }
        }
    }
}

GROUP sign EXTID 'urn:Sign' : body;

header = DATA LOCAL STRING();
data = DATA LOCAL XMLFILE();
cryptoContainerId = DATA LOCAL STRING();
cryptoContainerPassword = DATA LOCAL STRING();
attributeCertificate = DATA LOCAL STRING();

FORM envelopeEDN FORMEXTID 'soapenv=http://schemas.xmlsoap.org/soap/envelope/:Envelope'
PROPERTIES ATTR ='urn:webservice' EXTID 'xmlns:urn'
PROPERTIES() header EXTID 'soapenv:Header'
PROPERTIES() IN sign 
    name EXTID 'urn:Name',
    documentType EXTID 'urn:DocumentType',
    data EXTID 'urn:Data',
    cryptoContainerId EXTID 'urn:CryptoContainerId',
    cryptoContainerPassword EXTID 'urn:CryptoContainerPassword',
    attributeCertificate EXTID 'urn:AttributeCertificate';

GROUP body EXTID 'soap:Body';
GROUP signResponse EXTID '=urn:webservice:SignResponse' : body;
GROUP signResult EXTID '=urn:webservice:SignResult' : signResponse;

result = DATA LOCAL STRING();
fileName = DATA LOCAL STRING();
fileData = DATA LOCAL XMLFILE ();

FORM envelopeResponseEDN FORMEXTID 'soap=http://schemas.xmlsoap.org/soap/envelope/:Envelope'
PROPERTIES ATTR IN signResponse ='urn:webservice' EXTID 'xmlns:'
PROPERTIES() IN signResult 
    result EXTID '=urn:webservice:Result', 
    fileName EXTID '=urn:webservice:FileName', 
    fileData EXTID '=urn:webservice:FileData';


migratedEDS = DATA BOOLEAN();
onStarted()+{
    IF NOT migratedEDS() AND NOT useExternalApplication() THEN NEWSESSION {

        FOR EDSService eds IS EDSService AND ((GROUP SUM 1 IF eds == EDSService(LegalEntity l)) OR (GROUP SUM 1 IF eds == EDSService(Stock ls)) OR (GROUP SUM 1 IF eds == EDSService(Employee e)))
            AND NOT edsApplication(eds) DO {
            edsApplication(eds) <- EDSApplication.docudriveProxy;
        }
        FOR EDSService eds IS EDSService AND ((GROUP SUM 1 IF eds == EDSService(LegalEntity l)) OR (GROUP SUM 1 IF eds == EDSService(Stock ls)) OR (GROUP SUM 1 IF eds == EDSService(Employee e)))
            AND NOT edsApplication(eds) == EDSApplication.docudriveProxy NEW nEds = EDSService DO {
            edsApplication(nEds) <- EDSApplication.docudriveProxy;
            host(nEds) <- host(eds);
            port(nEds) <- port(eds);
            name(nEds) <- name(eds);
            client(nEds) <- client(eds);
            EDSService(LegalEntity l) <- nEds WHERE EDSService(l) == eds;
            EDSService(Stock l) <- nEds WHERE EDSService(l) == eds;
            EDSService(Employee l) <- nEds WHERE EDSService(l) == eds;
        }

        migratedEDS() <- TRUE;
        APPLY;
    }
}