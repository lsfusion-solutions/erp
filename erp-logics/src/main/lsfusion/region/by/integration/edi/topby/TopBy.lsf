MODULE TopBy;

REQUIRE System, EDI, Integration, Warehouse, Store, CustomerEInvoiceEDI, SupplierEInvoiceEDI;

NAMESPACE EDI;

EXTEND CLASS EDIProvider {
    topBy 'СТТ'
}

loginTopBy 'Имя пользователя TopBy' = DATA STRING[100] ();
passwordTopBy 'Пароль TopBy' = DATA STRING[100] () ECHO;
loginTopBy 'Имя пользователя TopBy' = DATA STRING[100] (LegalEntity);
passwordTopBy 'Пароль TopBy' = DATA STRING[100] (LegalEntity) ECHO;
hostTopBy 'Хост' = DATA STRING[100] ();
portTopBy 'Порт' = DATA INTEGER ();
hostTopBy 'Хост' = DATA STRING[100] (LegalEntity);
portTopBy 'Порт' = DATA INTEGER (LegalEntity);
archiveDirTopBy 'Папка принятых сообщений' = DATA STRING[100] ();
outputDirTopBy 'Папка отправленных сообщений' = DATA STRING[100] ();
disableConfirmationTopBy 'Отключить подтверждение сообщений' = DATA BOOLEAN ();
receiveSupplierMessagesTopBy 'Получать сообщения для поставщика' = DATA BOOLEAN ();
confirmNotFoundOrders 'Подтверждать ответы по которым не найден заказ' = DATA BOOLEAN ();
confirmNotFoundInvoices 'Подтверждать ответы по которым не найдена накладная' = DATA BOOLEAN ();
disableAutoBlrapn 'Отключить автоматическую отправку извещений о прочтении' = DATA BOOLEAN ();

overInvoiceOutputDir 'Путь сохранения отправленных документов'= ABSTRACT CASE STRING (EInvoice);
overInvoiceOutputFileName 'Имя файла для сохранения отправленных документов' = ABSTRACT CASE STRING (EInvoice);

migratedLoginPasswordTopBy = DATA BOOLEAN (); 

onStarted() + {
    IF NOT migratedLoginPasswordTopBy() THEN {
        loginTopBy(LegalEntity le) <- loginTopBy() WHERE isCompany(le);
        passwordTopBy(LegalEntity le) <- passwordTopBy() WHERE isCompany(le);
        migratedLoginPasswordTopBy() <- TRUE;
    }
}

migratedHostPortTopBy = DATA BOOLEAN (); 

onStarted() + {
    IF NOT migratedHostPortTopBy() THEN {
        hostTopBy(LegalEntity le) <- hostTopBy() WHERE isCompany(le);
        portTopBy(LegalEntity le) <- portTopBy() WHERE isCompany(le);
        migratedHostPortTopBy() <- TRUE;
    }
}

hostEDSServiceTopBy 'Хост EDSService' = DATA STRING[100] (LegalEntity);
portEDSServiceTopBy 'Порт EDSService' = DATA INTEGER (LegalEntity);
hostEDSServiceTopBy 'Хост EDSService' (stock) = ABSTRACT STRING[100] (Stock) MATERIALIZED;
hostEDSServiceTopBy 'Хост EDSService' = DATA STRING[100] (DepartmentStore);
hostEDSServiceTopBy 'Хост EDSService' = DATA STRING[100] (Warehouse);
hostEDSServiceTopBy(DepartmentStore stock) += hostEDSServiceTopBy(stock);
hostEDSServiceTopBy(Warehouse stock) += hostEDSServiceTopBy(stock);
portEDSServiceTopBy 'Порт EDSService' (stock) = ABSTRACT INTEGER (Stock) MATERIALIZED;
portEDSServiceTopBy 'Порт EDSService' = DATA INTEGER (DepartmentStore);
portEDSServiceTopBy 'Порт EDSService' = DATA INTEGER (Warehouse);
portEDSServiceTopBy(DepartmentStore stock) += portEDSServiceTopBy(stock);
portEDSServiceTopBy(Warehouse stock) += portEDSServiceTopBy(stock);
hostEDSServiceTopBy 'Хост EDSService' = DATA STRING[100] (Employee);
portEDSServiceTopBy 'Порт EDSService' = DATA INTEGER (Employee);

EXTEND FORM integrationData
    OBJECTS le = LegalEntity
    FILTERS isCompany(le)
    PROPERTIES(le) name READONLY, aliasEDSService, passwordEDSService, hostEDSServiceTopBy, portEDSServiceTopBy
    
    OBJECTS seds = Stock
    PROPERTIES(seds) name READONLY, aliasEDSService, passwordEDSService, hostEDSServiceTopBy, portEDSServiceTopBy
    FILTERS isCompany(seds)
    
    OBJECTS eeds = Employee
    PROPERTIES(eeds) lastName READONLY, firstName READONLY, namePosition READONLY, aliasEDSService, passwordEDSService, hostEDSServiceTopBy, portEDSServiceTopBy
    FILTERS active(eeds)
;

hostEDSServiceCustomerTopBy (EInvoice i) = OVERRIDE hostEDSServiceTopBy(currentUser()), hostEDSServiceTopBy(customerStock(i)), hostEDSServiceTopBy(customer(i));
portEDSServiceCustomerTopBy (EInvoice i) = OVERRIDE portEDSServiceTopBy(currentUser()), portEDSServiceTopBy(customerStock(i)), portEDSServiceTopBy(customer(i));
hostEDSServiceSupplierTopBy (EInvoice i) = OVERRIDE hostEDSServiceTopBy(currentUser()), hostEDSServiceTopBy(supplierStock(i)), hostEDSServiceTopBy(supplier(i));
portEDSServiceSupplierTopBy (EInvoice i) = OVERRIDE portEDSServiceTopBy(currentUser()), portEDSServiceTopBy(supplierStock(i)), portEDSServiceTopBy(supplier(i));

GROUP body EXTID 'soapenv:Body';
GROUP sendDocument EXTID 'top:SendDocument' : body;
GROUP getDocuments EXTID 'top:GetDocuments' : body;
GROUP confirmDocumentReceived EXTID 'top:ConfirmDocumentReceived' : body;

FORM receiveMessagesRequest
    PROPERTIES ATTR ='http://topby.by/' EXTID 'xmlns:top'
    OBJECTS login = TEXT, password = TEXT
    PROPERTIES IN getDocuments VALUE(login) EXTID 'top:username', VALUE(password) EXTID 'top:password'
    FORMEXTID 'soapenv=http://schemas.xmlsoap.org/soap/envelope/:Envelope'
;

GROUP getEDS EXTID 'ws:GetEDS' : body;
GROUP keyInfo : getEDS;

FORM getEDS
    PROPERTIES ATTR ='http://ws.services.eds.topby.by/' EXTID 'xmlns:ws'
    OBJECTS alias = TEXT, password = TEXT
    PROPERTIES IN getEDS waybill = ('innerXML') EXTID 'waybill'
    PROPERTIES IN keyInfo VALUE(alias) EXTID 'alias', VALUE(password) EXTID 'password'
    FORMEXTID 'soapenv=http://schemas.xmlsoap.org/soap/envelope/:Envelope'
;

GROUP soapBody EXTID 'soap:Body';
GROUP soapFault EXTID 'soap:Fault' : soapBody;
faultstring = DATA LOCAL NESTED TEXT();
GROUP getEDSResponse EXTID '=http://ws.services.eds.topby.by/:GetEDSResponse' : soapBody;
waybill = DATA LOCAL NESTED TEXT();

FORM getEDSResponse
    PROPERTIES() faultstring IN soapFault, waybill IN getEDSResponse
;

succesful = DATA LOCAL NESTED BOOLEAN();
message = DATA LOCAL NESTED TEXT();
errorCode = DATA LOCAL NESTED INTEGER();

id = DATA LOCAL NESTED TEXT(INTEGER);
documentType = DATA LOCAL NESTED TEXT(INTEGER);
data = DATA LOCAL NESTED XMLFILE(INTEGER);

sendRecipientErrorFailed = DATA LOCAL NESTED INTEGER();
supplierOrdersSucceeded = DATA LOCAL NESTED INTEGER();
supplierOrdersFailed = DATA LOCAL NESTED INTEGER();
orderMessagesSucceeded = DATA LOCAL NESTED INTEGER();
orderMessagesFailed = DATA LOCAL NESTED INTEGER();
responsesSucceeded = DATA LOCAL NESTED INTEGER();
responsesFailed = DATA LOCAL NESTED INTEGER();
despatchAdvicesSucceeded = DATA LOCAL NESTED INTEGER();
despatchAdvicesFailed = DATA LOCAL NESTED INTEGER();
invoiceMessagesSucceeded = DATA LOCAL NESTED INTEGER();
invoiceMessagesFailed = DATA LOCAL NESTED INTEGER();
creditNoteMessagesSucceeded = DATA LOCAL NESTED INTEGER();
creditNoteMessagesFailed = DATA LOCAL NESTED INTEGER();
eInvoicesSucceeded = DATA LOCAL NESTED INTEGER();
eInvoicesFailed = DATA LOCAL NESTED INTEGER();
eCreditNotesSucceeded = DATA LOCAL NESTED INTEGER();
eCreditNotesFailed = DATA LOCAL NESTED INTEGER();
blrwbrCount = DATA LOCAL NESTED INTEGER();
blrdnrCount = DATA LOCAL NESTED INTEGER();
blradfCount = DATA LOCAL NESTED INTEGER();

overReceiveMessages ABSTRACT LIST (INTEGER, STRING[100], STRING[100], STRING[100], INTEGER, TEXT, STRING[100], BOOLEAN, BOOLEAN, BOOLEAN, BOOLEAN, STRING[100]);

META receiveMessages (namespace)
    GROUP body###namespace EXTID namespace##':Body';
    GROUP getDocumentsResponse###namespace EXTID '=http://topby.by/:GetDocumentsResponse' : body###namespace;
    GROUP getDocumentsResult###namespace EXTID 'GetDocumentsResult' : getDocumentsResponse###namespace;
    GROUP data###namespace EXTID 'Data' : getDocumentsResult###namespace;
    
    FORM documentsResult###namespace
        PROPERTIES() IN getDocumentsResult###namespace succesful EXTID 'Succesful',
                                           message EXTID 'Message',
                                           errorCode EXTID 'ErrorCode'
        OBJECTS d = INTEGER EXTID 'DocumentData' IN data###namespace
        PROPERTIES(d) id EXTID 'Id',
                      documentType EXTID 'DocumentType',
                      data EXTID 'Data'
    ;
    
    receiveMessages###namespace (STRING[100] login, STRING[100] password, STRING[100] host, INTEGER port, TEXT url, STRING[100] archiveDir, BOOLEAN disableConfirmation, BOOLEAN receiveSupplierMessages, BOOLEAN sendReplies, BOOLEAN invoices, STRING[100] provider) {
        TRY {
            IF login AND password AND host AND port THEN {
                LOCAL xml = XMLFILE();
                EXPORT receiveMessagesRequest OBJECTS login = login, password = password XML TO xml;
                sendRequestEDI(host, port, login, password, url, xml());
                logToFile('edi', provider + ' ReceiveMessages request sent');
                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'GetDocumentsResponse');
                IF requestError() THEN {
                    logToFile('edi', provider + ' ReceiveMessages: ' + requestError());
                    MESSAGE  provider + ' Сообщения не получены: ' + requestError() NOWAIT;
                } ELSE {
                    IMPORT documentsResult###namespace XML FROM sendRequestEDIResponse();
                    IF succesful() THEN {
                        sendRecipientErrorFailed() <- 0;
                        supplierOrdersSucceeded() <- 0;
                        supplierOrdersFailed() <- 0;
                        orderMessagesSucceeded() <- 0;
                        orderMessagesFailed() <- 0;
                        responsesSucceeded() <- 0;
                        responsesFailed() <- 0;
                        despatchAdvicesSucceeded() <- 0;
                        despatchAdvicesFailed() <- 0;
                        invoiceMessagesSucceeded() <- 0;
                        invoiceMessagesFailed() <- 0;
                        creditNoteMessagesSucceeded() <- 0;
                        creditNoteMessagesFailed() <- 0;
                        eInvoicesSucceeded() <- 0;
                        eInvoicesFailed() <- 0;
                        blrwbrCount() <- 0;
                        blrdnrCount() <- 0;
                        blradfCount() <- 0;
                        
                        logToFile('edi', provider + ' ReceiveMessages count: ' + (GROUP SUM 1 IF documentType(INTEGER i)));
                        
                        FOR documentType(INTEGER i) ORDER getWord(id(i), '_', 2), id(i), i DO {
                            IF archiveDir THEN {
                                TRY{ mkdir(archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd')); }
                                WRITE data(i) TO archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                            }
                            overReceiveMessages(i, login, password, host, port, url, archiveDir, disableConfirmation, receiveSupplierMessages, sendReplies, invoices, provider);
                        }
                        
                        LOCAL textMessage = TEXT();
                        IF supplierOrdersSucceeded() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Загружено заказов поставщика: ' + supplierOrdersSucceeded();
                        IF supplierOrdersFailed() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Не загружено заказов поставщика: ' + supplierOrdersFailed();
                        IF orderMessagesSucceeded() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Загружено сообщений по заказам: ' + orderMessagesSucceeded();
                        IF orderMessagesFailed() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Не загружено сообщений по заказам: ' + orderMessagesFailed();
                        IF responsesSucceeded() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Загружено ответов по заказам: ' + responsesSucceeded();
                        IF responsesFailed() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Не загружено ответов по заказам: ' + responsesFailed();
                        IF despatchAdvicesSucceeded() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Загружено уведомлений об отгрузке: ' + despatchAdvicesSucceeded();
                        IF despatchAdvicesFailed() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Не загружено уведомлений об отгрузке: ' + despatchAdvicesFailed();
                        IF invoiceMessagesSucceeded() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Загружено сообщений по накладным: ' + invoiceMessagesSucceeded();
                        IF invoiceMessagesFailed() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Не загружено сообщений по накладным: ' + invoiceMessagesFailed();
                        IF creditNoteMessagesSucceeded() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Загружено сообщений по актам приемки: ' + creditNoteMessagesSucceeded();
                        IF creditNoteMessagesFailed() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Не загружено сообщений по актам приемки: ' + creditNoteMessagesFailed();
                        IF eInvoicesSucceeded() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Загружено электронных накладных: ' + eInvoicesSucceeded();
                        IF eInvoicesFailed() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Не загружено электронных накладных: ' + eInvoicesFailed();
                        IF eCreditNotesSucceeded() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Загружено электронных актов приемки: ' + eCreditNotesSucceeded();
                        IF eCreditNotesFailed() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Не загружено электронных актов приемки: ' + eCreditNotesFailed();
                        IF blrwbrCount() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Отвечено на ' + blrwbrCount() + ' BLRWBR';
                        IF blrdnrCount() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Отвечено на ' + blrdnrCount() + ' BLRDNR';
                        IF blradfCount() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Загружено ' + blradfCount() + ' BLRADF';
                        
                        IF sendRecipientErrorFailed() == 0 THEN {
                            MESSAGE (OVERRIDE textMessage(), 'Не найдено новых сообщений') NOWAIT;
                        }
                    }
                    ELSE {
                        logToFile('edi', provider + ' ReceiveMessages error ' + errorCode() + ': ' + message());
                        MESSAGE  provider + ' Сообщения не получены error ' + errorCode() + ': ' + message() NOWAIT;
                    }
                }
         
            } ELSE {
                logToFile('edi', provider + ' ReceiveMessages: не заданы имя пользователя / пароль / хост / порт');
                MESSAGE  provider + ' Сообщения не получены: не заданы имя пользователя / пароль / хост / порт' NOWAIT;
            }
        } CATCH {
            logToFile('edi', CONCAT '\n', provider + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE  'Сообщения не получены. Обратитесь к администратору' NOWAIT;
        }
    }
END

@receiveMessages(S);

receiveMessagesTopBy (BOOLEAN invoices) {
    FOR LegalEntity le == [GROUP MIN LegalEntity l BY loginTopBy(l)](STRING login) AND passwordTopBy(le) DO
        receiveMessagesS(login, passwordTopBy(le), hostTopBy(le), portTopBy(le), ('http://' +  hostTopBy(le) + ':' + portTopBy(le) + '/DmcService'), archiveDirTopBy(), disableConfirmationTopBy(), receiveSupplierMessagesTopBy(), NULL, invoices, 'TopBy');
}

receiveTopBy 'Получить сообщения' {
    checkIsServer();
    IF isServer() THEN {receiveMessagesTopBy(NULL); };
}

GROUP reference;
messageDocumentNumber = DATA LOCAL NESTED STRING[24]();
messageDocumentDate = DATA LOCAL NESTED DATETIME();
documentType = DATA LOCAL NESTED TEXT();
documentNumber = DATA LOCAL NESTED STRING[48]();
code = DATA LOCAL NESTED STRING[10]();
description = DATA LOCAL NESTED STRING[1000]();

description (STRING[10] code) = CASE
    WHEN code == '1251' THEN 'Сообщение прочитано получателем'
    WHEN code == '1252' THEN 'Сообщение принято учётной системой получателя'
    WHEN code == '2650' THEN 'Извещение о прочтении'
    WHEN code == '2651' THEN 'Извещение о прочтении уведомления об изменении'
    WHEN code == '2750' THEN 'Уведомление об изменении';

FORM systemMessage
    PROPERTIES() messageDocumentNumber EXTID 'documentNumber', messageDocumentDate EXTID 'documentDate'
    PROPERTIES() IN reference documentType, documentNumber, code, description
;

FORM confirmDocument
    PROPERTIES ATTR ='http://topby.by/' EXTID 'xmlns:top'
    OBJECTS login = TEXT, password = TEXT, documentId = TEXT
    PROPERTIES IN confirmDocumentReceived VALUE(login) EXTID 'top:username', VALUE(password) EXTID 'top:password', VALUE(documentId) EXTID 'top:documentId'
    FORMEXTID 'soapenv=http://schemas.xmlsoap.org/soap/envelope/:Envelope'
;

FORM exportSystemMessage FORMEXTID 'SYSTEMMESSAGE'
    OBJECTS documentId = TEXT, documentNumber = TEXT, code = TEXT, description = TEXT
    PROPERTIES VALUE(documentId) EXTID 'documentNumber'
    PROPERTIES IN reference VALUE(documentNumber) EXTID 'documentNumber', VALUE(code) EXTID 'code', VALUE(description) EXTID 'description'
;

envelopeLogin = DATA LOCAL NESTED STRING[100]();
envelopePassword = DATA LOCAL NESTED STRING[100]();
envelopeFilename = DATA LOCAL NESTED STRING[77]();
envelopeDocumentDate = DATA LOCAL NESTED DATETIME();
envelopeDocumentNumber = DATA LOCAL NESTED STRING[50]();
envelopeSender = DATA LOCAL NESTED STRING[13]();
envelopeReceiver = DATA LOCAL NESTED STRING[13]();
envelopeDeliveryPoint = DATA LOCAL NESTED STRING[13]();
envelopeDocumentType = DATA LOCAL NESTED STRING[13]();
envelopeContent = DATA LOCAL NESTED TEXT();

FORM envelope
    PROPERTIES ATTR ='http://topby.by/' EXTID 'xmlns:top'
    PROPERTIES IN sendDocument envelopeLogin() EXTID 'top:username',
                               envelopePassword() EXTID 'top:password',
                               envelopeFilename() EXTID 'top:filename',
                               documentDate = toChar(envelopeDocumentDate(),'YYYYMMDDHH24MISS') EXTID 'top:documentDate',
                               envelopeDocumentNumber() EXTID 'top:documentNumber',
                               envelopeSender() EXTID 'top:senderCode',
                               envelopeReceiver() EXTID 'top:receiverCode',
                               envelopeDeliveryPoint() EXTID 'top:deliveryPointCode',
                               envelopeDocumentType() EXTID 'top:documentType',
                               envelopeContent() EXTID 'top:content'
    FORMEXTID 'soapenv=http://schemas.xmlsoap.org/soap/envelope/:Envelope'
;

//FORM envelopeMessage
//    PROPERTIES ATTR ='http://topby.by/' EXTID 'xmlns:top'
//    OBJECTS login = TEXT, password = TEXT, date = DATETIME, number = TEXT, innerXML = TEXT
//    PROPERTIES IN sendDocument VALUE(login) EXTID 'top:username', VALUE(password) EXTID 'top:password'
//    PROPERTIES IN sendDocument documentDate = toChar(date,'yyyy-MM-ddThh24:mi:ss') EXTID 'top:documentDate',
//                  VALUE(number) EXTID 'top:documentNumber',
//                  documentType = 'SYSTEMMESSAGE' EXTID 'top:documentType',
//                  VALUE(innerXML) EXTID 'top:content'
//    FORMEXTID 'soapenv=http://schemas.xmlsoap.org/soap/envelope/:Envelope'
//;

META openXML (class, object, table)
    XMLPath = DATA STRING[200] (class);
    openXML 'Открыть XML' (class object) {
        IF XMLPath(object) THEN {
            LOCAL file = FILE();
            READ 'file://' + XMLPath(object) + '.xml' TO file;
            open(file());
        } ELSE {
            MESSAGE 'Отсутствует ссылка на файл xml';
        }
    }
    
    EXTEND FORM table
        PROPERTIES(object) openXML GRID
    ;
END

@openXML(EOrderMessage,m,eOrders);

overReceiveMessages(INTEGER i, STRING[100] login, STRING[100] password, STRING[100] host, INTEGER port, TEXT url, STRING[100] archiveDir, BOOLEAN disableConfirmation, BOOLEAN receiveSupplierMessages, BOOLEAN sendReplies, BOOLEAN invoices, STRING[100] provider) + {
    IF lower(documentType(i)) == 'systemmessage' AND NOT invoices THEN {
        TRY {
            IMPORT systemMessage XML FROM data(i);
            CASE
                WHEN documentType() == 'ORDERS' THEN {
                    NEWSESSION NESTED LOCAL {
                        IF NOT eOrderMessage(messageDocumentNumber()) THEN NEW m = EOrderMessage {
                            number(m) <- messageDocumentNumber();
                        }
                        FOR EOrderMessage m == eOrderMessage(messageDocumentNumber()) DO {
                            dateTime(m) <- messageDocumentDate();
                            code(m) <- code();
                            description(m) <- OVERRIDE description(), description(code());
                            eOrder(m) <- eOrder(documentNumber());
                            XMLPath(m) <- archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                            APPLY NESTED LOCAL;
                            IF canceled() THEN {
                                IF NOT disableConfirmation AND sendReplies THEN {
                                    LOCAL contentSubXML = FILE();
                                    EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = messageDocumentNumber(), code = '1450', description = applyMessage() XML TO contentSubXML;
                                    fileToString(contentSubXML());
                                    encodeBase64(resultString());
                                    LOCAL xml = XMLFILE();
                                    envelopeLogin() <- login;
                                    envelopePassword() <- password;
                                    envelopeDocumentDate() <- currentDateTime();
                                    envelopeDocumentNumber() <- id(i);
                                    envelopeDocumentType() <- 'SYSTEMMESSAGE';
                                    envelopeContent() <- encodedBase64();
                                    EXPORT envelope XML TO xml;
                                    //EXPORT envelopeMessage OBJECTS login = login, password = password, date = currentDateTime(), number = id(i), innerXML = encodedBase64() XML TO xml;
                                    sendRequestEDI(host, port, login, password, url, xml());
                                    logToFile('edi', provider + ' RecipientError ' + id(i) +' request sent');
                                    importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                                    IF requestError() THEN {
                                        sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                                        logToFile('edi', provider + ' RecipientError ' + id(i) + ': ' + requestError());
                                        MESSAGE provider + ' Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
                                    } ELSE {
                                        logToFile('edi', provider + ' RecipientError ' + id(i) + ' request succeeded');
                                    }
                                }
                                logToFile('edi', provider + ' Import EOrderMessage ' + id(i) + ' failed: ' + applyMessage());
                                orderMessagesFailed() <- orderMessagesFailed() + 1;
                            } ELSE {
                                IF NOT disableConfirmation THEN {
                                    LOCAL xml = XMLFILE();
                                    EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO xml;
                                    sendRequestEDI(host, port, login, password, url, xml());
                                    logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request sent');
                                    importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                                    IF requestError() THEN {
                                        logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                                        MESSAGE  provider + ' Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                                    } ELSE {
                                        IF archiveDir THEN {
                                            TRY{ mkdir(archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd')); }
                                            WRITE data(i) TO archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                                        }
                                        logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                                    }
                                }
                                logToFile('edi', provider + ' Import EOrderMessage ' + id(i) + ' succeeded');
                                orderMessagesSucceeded() <- orderMessagesSucceeded() + 1;
                            }
                        }
                    }
                }
                WHEN documentType() == 'SYSTEMMESSAGE' THEN {
                    logToFile('edi', provider + ' Parse Order Message ' + id(i) + ' skipped for documentType ' + documentType());
                    IF NOT disableConfirmation THEN {
                        LOCAL xml = XMLFILE();
                        EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO xml;
                        sendRequestEDI(host, port, login, password, url, xml());
                        logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request sent');
                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                        IF requestError() THEN {
                            logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                            MESSAGE  provider + ' Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                        } ELSE {
                            IF archiveDir THEN {
                                TRY{ mkdir(archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd')); }
                                WRITE data(i) TO archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                            }
                            logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                        }
                    }
                    orderMessagesFailed() <- orderMessagesFailed() + 1;
                }
                ELSE {
                    IF NOT disableConfirmation AND sendReplies THEN {
                        LOCAL contentSubXML = FILE();
                        EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = messageDocumentNumber(), code = '1450', description = (provider + ' Parse Order Message ' + id(i) + ' error: incorrect documentType ' + (OVERRIDE documentType(), 'NULL')) XML TO contentSubXML;
                        fileToString(contentSubXML());
                        encodeBase64(resultString());
                        LOCAL xml = XMLFILE();
                        envelopeLogin() <- login;
                        envelopePassword() <- password;
                        envelopeDocumentDate() <- currentDateTime();
                        envelopeDocumentNumber() <- id(i);
                        envelopeDocumentType() <- 'SYSTEMMESSAGE';
                        envelopeContent() <- encodedBase64();
                        EXPORT envelope XML TO xml;
                        //EXPORT envelopeMessage OBJECTS login = login, password = password, date = currentDateTime(), number = id(i), innerXML = encodedBase64() XML TO xml;
                        sendRequestEDI(host, port, login, password, url, xml());
                        logToFile('edi', provider + ' RecipientError ' + id(i) +' request sent');
                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                        IF requestError() THEN {
                            sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                            logToFile('edi', provider + ' RecipientError ' + id(i) + ': ' + requestError());
                            MESSAGE provider + ' Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
                        } ELSE {
                            logToFile('edi', provider + ' RecipientError ' + id(i) + ' request succeeded');
                        }
                        orderMessagesFailed() <- orderMessagesFailed() + 1;
                    }
                    logToFile('edi', provider + ' Parse Order Message ' + id(i) + ' warning: unsupported documentType ' + (OVERRIDE documentType(), 'NULL'));
                }
        } CATCH {
            IF NOT disableConfirmation AND sendReplies THEN {
                LOCAL contentSubXML = FILE();
                EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = messageDocumentNumber(), code = '1450', description = (CONCAT '\n', provider + ' Parse EOrderMessage ' + id(i) + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException()) XML TO contentSubXML;
                fileToString(contentSubXML());
                encodeBase64(resultString());
                LOCAL xml = XMLFILE();
                envelopeLogin() <- login;
                envelopePassword() <- password;
                envelopeDocumentDate() <- currentDateTime();
                envelopeDocumentNumber() <- id(i);
                envelopeDocumentType() <- 'SYSTEMMESSAGE';
                envelopeContent() <- encodedBase64();
                EXPORT envelope XML TO xml;
                //EXPORT envelopeMessage OBJECTS login = login, password = password, date = currentDateTime(), number = id(i), innerXML = encodedBase64() XML TO xml;
                sendRequestEDI(host, port, login, password, url, xml());
                logToFile('edi', provider + ' RecipientError ' + id(i) +' request sent');
                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                IF requestError() THEN {
                    sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                    logToFile('edi', provider + ' RecipientError ' + id(i) + ': ' + requestError());
                    MESSAGE provider + ' Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
                } ELSE {
                    logToFile('edi', provider + ' RecipientError ' + id(i) + ' request succeeded');
                }
            }
            logToFile('edi', CONCAT '\n', provider + ' Parse EOrderMessage ' + id(i) + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE  'Ошибка при импорте сообщения ' + id(i) +'. Обратитесь к администратору' NOWAIT;
            orderMessagesFailed() <- orderMessagesFailed() + 1;
        }
    }
}

@openXML(EInvoiceMessage,m,eInvoices);
@openXML(ECreditNoteMessage,m,eCreditNotes);

overImportSystemmessage ABSTRACT ();
skipSystemmessage = DATA LOCAL NESTED BOOLEAN();

//вообще логика сообщений, похоже, дублирует логику apn а в случе если они приходят от сервера edi у них еще и одинаковый номер
//возможно для накладных можно отделить те которые приходят с сервера, или хотя бы не затирать данные по apn. пока дублируем добавлением в номер мимвола m
overReceiveMessages(INTEGER i, STRING[100] login, STRING[100] password, STRING[100] host, INTEGER port, TEXT url, STRING[100] archiveDir, BOOLEAN disableConfirmation, BOOLEAN receiveSupplierMessages, BOOLEAN sendReplies, BOOLEAN invoices, STRING[100] provider) + {
    IF lower(documentType(i)) == 'systemmessage' AND invoices THEN {
        TRY {
            IMPORT systemMessage XML FROM data(i);
            skipSystemmessage() <- NULL;
            overImportSystemmessage();
            IF NOT skipSystemmessage() THEN {
                CASE
                WHEN documentType() == 'BLRWBL' OR documentType() == 'BLRWBR' OR documentType() == 'BLRDLN' OR documentType() == 'BLRDNR' THEN {
                    LOCAL eInvoice = EInvoice();
                    eInvoice() <- CASE
                        WHEN (documentType() == 'BLRWBL' OR documentType() == 'BLRDLN') THEN eInvoiceSupplier(documentNumber())
                        WHEN (documentType() == 'BLRWBR' OR documentType() == 'BLRDNR') THEN eInvoiceCustomer(documentNumber());
                    IF eInvoice() THEN {
                        NEWSESSION NESTED LOCAL {
                            IF NOT eInvoiceMessage(eInvoice(), 'm' + messageDocumentNumber(), EInvoiceMessageKind.in) THEN NEW m = EInvoiceMessage {
                                number(m) <- 'm' + messageDocumentNumber();
                                eInvoice(m) <- eInvoice();
                                kind(m) <- EInvoiceMessageKind.in;
                            }
                            FOR EInvoiceMessage m == eInvoiceMessage(eInvoice(), 'm' + messageDocumentNumber(), EInvoiceMessageKind.in) DO {
                                dateTime(m) <- messageDocumentDate();
                                code(m) <- code();
                                description(m) <- OVERRIDE description(), description(code());
                                type(m) <- CASE
                                    WHEN documentType() == 'BLRWBL' THEN EInvoiceMessageType.systemmessage_blrwbl
                                    WHEN documentType() == 'BLRWBR' THEN EInvoiceMessageType.systemmessage_blrwbr
                                    WHEN documentType() == 'BLRDLN' THEN EInvoiceMessageType.systemmessage_blrdln
                                    WHEN documentType() == 'BLRDNR' THEN EInvoiceMessageType.systemmessage_blrdnr;
                                IF code(m) >= '1350' AND type(m) == EInvoiceMessageType.systemmessage_blrwbr 
                                     //подверждение уже приходило, не трогаем больше
                                    AND NOT (GROUP SUM 1 IF type(EInvoiceMessage em) == EInvoiceMessageType.blrapn_blrwbr AND code(em) == '2550' AND eInvoice(em) == eInvoice() AND NOT kind(em) == EInvoiceMessageKind.out) 
                                    //10 ошибок, значит есть системная проблема и автоматически не убираем признак выгрузки
                                    AND NOT (GROUP SUM 1 IF (code(EInvoiceMessage em) == '1354' OR code(em) == '1354') AND eInvoice(em) == eInvoice()) > 10
                                     THEN {
                                    exportedCustomer(eInvoice(m)) <- NULL;
                                }
                                XMLPath(m) <- archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                                APPLY NESTED LOCAL;
                                IF canceled() THEN {
                                    IF NOT disableConfirmation AND sendReplies THEN {
                                        LOCAL contentSubXML = FILE();
                                        EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = messageDocumentNumber(), code = '1450', description = applyMessage() XML TO contentSubXML;
                                        fileToString(contentSubXML());
                                        encodeBase64(resultString());
                                        LOCAL xml = XMLFILE();
                                        envelopeLogin() <- login;
                                        envelopePassword() <- password;
                                        envelopeDocumentDate() <- currentDateTime();
                                        envelopeDocumentNumber() <- id(i);
                                        envelopeDocumentType() <- 'SYSTEMMESSAGE';
                                        envelopeContent() <- encodedBase64();
                                        EXPORT envelope XML TO xml;
                                        //EXPORT envelopeMessage OBJECTS login = login, password = password, date = currentDateTime(), number = id(i), innerXML = encodedBase64() XML TO xml;
                                        sendRequestEDI(host, port, login, password, url, xml());
                                        logToFile('edi', provider + ' RecipientError ' + id(i) +' request sent');
                                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                                        IF requestError() THEN {
                                            sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                                            logToFile('edi', provider + ' RecipientError ' + id(i) + ': ' + requestError());
                                            MESSAGE provider + ' Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
                                        } ELSE {
                                            logToFile('edi', provider + ' RecipientError ' + id(i) + ' request succeeded');
                                        }
                                    }
                                    logToFile('edi', provider + ' Import EInvoiceMessage ' + id(i) + ' failed: ' + applyMessage());
                                    invoiceMessagesFailed() <- invoiceMessagesFailed() + 1;
                                } ELSE {
                                    IF NOT disableConfirmation THEN {
                                        LOCAL xml = XMLFILE();
                                        EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO xml;
                                        sendRequestEDI(host, port, login, password, url, xml());
                                        logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request sent');
                                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                                        IF requestError() THEN {
                                            logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                                            MESSAGE  provider + ' Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                                        } ELSE {
                                            IF archiveDir THEN {
                                                TRY{ mkdir(archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd')); }
                                                WRITE data(i) TO archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                                            }
                                            logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                                        }
                                    }
                                    logToFile('edi', provider + ' Import EInvoiceMessage ' + id(i) + ' succeeded');
                                    invoiceMessagesSucceeded() <- invoiceMessagesSucceeded() + 1;
                                }
                            }
                        }
                    } ELSE {
                        IF confirmNotFoundInvoices() THEN {
                            IF NOT disableConfirmation THEN {
                                LOCAL xml = XMLFILE();
                                EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO xml;
                                sendRequestEDI(host, port, login, password, url, xml());
                                logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request sent');
                                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                                IF requestError() THEN {
                                    logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                                    MESSAGE  provider + ' Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                                } ELSE {
                                    IF archiveDir THEN {
                                        TRY{ mkdir(archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd')); }
                                        WRITE data(i) TO archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                                    }
                                    logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                                }
                            }
                        } ELSE {
                            IF NOT disableConfirmation AND sendReplies THEN {
                                LOCAL contentSubXML = FILE();
                                EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = messageDocumentNumber(), code = '1450', description = applyMessage() XML TO contentSubXML;
                                fileToString(contentSubXML());
                                encodeBase64(resultString());
                                LOCAL xml = XMLFILE();
                                envelopeLogin() <- login;
                                envelopePassword() <- password;
                                envelopeDocumentDate() <- currentDateTime();
                                envelopeDocumentNumber() <- id(i);
                                envelopeDocumentType() <- 'SYSTEMMESSAGE';
                                envelopeContent() <- encodedBase64();
                                EXPORT envelope XML TO xml;
                                //EXPORT envelopeMessage OBJECTS login = login, password = password, date = currentDateTime(), number = id(i), innerXML = encodedBase64() XML TO xml;
                                sendRequestEDI(host, port, login, password, url, xml());
                                logToFile('edi', provider + ' RecipientError ' + id(i) +' request sent');
                                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                                IF requestError() THEN {
                                    sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                                    logToFile('edi', provider + ' RecipientError ' + id(i) + ': ' + requestError());
                                    MESSAGE provider + ' Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
                                } ELSE {
                                    logToFile('edi', provider + ' RecipientError ' + id(i) + ' request succeeded');
                                }
                            }
                        }
                        logToFile('edi', provider + ' Import EInvoiceMessage ' + id(i) + ' failed: ' + 'EInvoice ' + (OVERRIDE documentNumber(), 'NULL') + ' not found');
                        invoiceMessagesFailed() <- invoiceMessagesFailed() + 1;
                    }
                }
                WHEN documentType() == 'BLRADF' THEN {
                    NEWSESSION NESTED LOCAL {
                        LOCAL eCreditNote = ECreditNote();
                        eCreditNote() <- eCreditNoteBlradf(documentNumber());
                        IF NOT eCreditNoteMessage(eCreditNote(), 'm' + messageDocumentNumber()) THEN NEW m = ECreditNoteMessage {
                            number(m) <- 'm' + messageDocumentNumber();
                            eCreditNote(m) <- eCreditNote();
                        }
                        FOR ECreditNoteMessage m == eCreditNoteMessage(eCreditNote(), 'm' + messageDocumentNumber()) DO {
                            dateTime(m) <- messageDocumentDate();
                            code(m) <- code();
                            description(m) <- OVERRIDE description(), description(code());
                            eCreditNote(m) <- eCreditNoteBlradf(documentNumber());
                            type(m) <- ECreditNoteMessageType.systemmessage_blradf;
                            XMLPath(m) <- archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                            APPLY NESTED LOCAL;
                            IF canceled() THEN {
                                IF NOT disableConfirmation AND sendReplies THEN {
                                    LOCAL contentSubXML = FILE();
                                    EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = messageDocumentNumber(), code = '1450', description = applyMessage() XML TO contentSubXML;
                                    fileToString(contentSubXML());
                                    encodeBase64(resultString());
                                    LOCAL xml = XMLFILE();
                                    envelopeLogin() <- login;
                                    envelopePassword() <- password;
                                    envelopeDocumentDate() <- currentDateTime();
                                    envelopeDocumentNumber() <- id(i);
                                    envelopeDocumentType() <- 'SYSTEMMESSAGE';
                                    envelopeContent() <- encodedBase64();
                                    EXPORT envelope XML TO xml;
                                    //EXPORT envelopeMessage OBJECTS login = login, password = password, date = currentDateTime(), number = id(i), innerXML = encodedBase64() XML TO xml;
                                    sendRequestEDI(host, port, login, password, url, xml());
                                    logToFile('edi', provider + ' RecipientError ' + id(i) +' request sent');
                                    importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                                    IF requestError() THEN {
                                        sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                                        logToFile('edi', provider + ' RecipientError ' + id(i) + ': ' + requestError());
                                        MESSAGE provider + ' Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
                                    } ELSE {
                                        logToFile('edi', provider + ' RecipientError ' + id(i) + ' request succeeded');
                                    }
                                }
                                logToFile('edi', provider + ' Import ECreditNoteMessage ' + id(i) + ' failed: ' + applyMessage());
                                creditNoteMessagesFailed() <- creditNoteMessagesFailed() + 1;
                            } ELSE {
                                IF NOT disableConfirmation THEN {
                                    LOCAL xml = XMLFILE();
                                    EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO xml;
                                    sendRequestEDI(host, port, login, password, url, xml());
                                    logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request sent');
                                    importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                                    IF requestError() THEN {
                                        logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                                        MESSAGE  provider + ' Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                                    } ELSE {
                                        IF archiveDir THEN {
                                            TRY{ mkdir(archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd')); }
                                            WRITE data(i) TO archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                                        }
                                        logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                                    }
                                }
                                logToFile('edi', provider + ' Import ECreditNoteMessage ' + id(i) + ' succeeded');
                                creditNoteMessagesSucceeded() <- creditNoteMessagesSucceeded() + 1;
                            }
                        }
                    }
                }
                WHEN documentType() == 'BLRAPN' OR documentType() == 'SYSTEMMESSAGE' THEN {
                    logToFile('edi', provider + ' Parse Invoice Message ' + id(i) + ' skipped for documentType ' + documentType());
                    IF NOT disableConfirmation THEN {
                        LOCAL xml = XMLFILE();
                        EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO xml;
                        sendRequestEDI(host, port, login, password, url, xml());
                        logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request sent');
                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                        IF requestError() THEN {
                            logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                            MESSAGE  provider + ' Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                        } ELSE {
                            IF archiveDir THEN {
                                TRY{ mkdir(archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd')); }
                                WRITE data(i) TO archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                            }
                            logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                        }
                    }
                    invoiceMessagesFailed() <- invoiceMessagesFailed() + 1;
                }
                ELSE {
                    logToFile('edi', provider + ' Parse Invoice Message ' + id(i) + ' warning: unsupported documentType ' + (OVERRIDE documentType(), 'NULL'));
                }
            }
        } CATCH {
            IF NOT disableConfirmation AND sendReplies THEN {
                LOCAL contentSubXML = FILE();
                EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = messageDocumentNumber(), code = '1450', description = (CONCAT '\n', provider + ' Parse EInvoiceMessage ' + id(i) + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException()) XML TO contentSubXML;
                fileToString(contentSubXML());
                encodeBase64(resultString());
                LOCAL xml = XMLFILE();
                envelopeLogin() <- login;
                envelopePassword() <- password;
                envelopeDocumentDate() <- currentDateTime();
                envelopeDocumentNumber() <- id(i);
                envelopeDocumentType() <- 'SYSTEMMESSAGE';
                envelopeContent() <- encodedBase64();
                EXPORT envelope XML TO xml;
                //EXPORT envelopeMessage OBJECTS login = login, password = password, date = currentDateTime(), number = id(i), innerXML = encodedBase64() XML TO xml;
                sendRequestEDI(host, port, login, password, url, xml());
                logToFile('edi', provider + ' RecipientError ' + id(i) +' request sent');
                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                IF requestError() THEN {
                    sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                    logToFile('edi', provider + ' RecipientError ' + id(i) + ': ' + requestError());
                    MESSAGE provider + ' Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
                } ELSE {
                    logToFile('edi', provider + ' RecipientError ' + id(i) + ' request succeeded');
                }
            }
            logToFile('edi', CONCAT '\n', provider + ' Parse EInvoiceMessage ' + id(i) + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE  'Ошибка при импорте сообщения ' + id(i) +'. Обратитесь к администратору' NOWAIT;
            invoiceMessagesFailed() <- invoiceMessagesFailed() + 1;
        }
    }
}

GROUP messageHeader EXTID 'MessageHeader';
GROUP acknowledgement EXTID 'Acknowledgement';
GROUP referenceDocument EXTID 'ReferenceDocument';
GROUP blrapnReferenceDocument EXTID 'ReferenceDocument': acknowledgement;
GROUP blrapnShipper EXTID 'Shipper': acknowledgement;
GROUP blrapnReceiver EXTID 'Receiver': acknowledgement;
GROUP blrapnErrorOrAcknowledgement EXTID 'ErrorOrAcknowledgement': acknowledgement;
blrapnUserID = DATA LOCAL NESTED STRING[35]();
blrapnDocumentNumber = DATA LOCAL NESTED STRING[24]();
blrapnDateTime = DATA LOCAL NESTED DATETIME();
blrapnMsgSender = DATA LOCAL NESTED STRING[13]();
blrapnMsgReceiver = DATA LOCAL NESTED STRING[13]();
blrapnDeliveryNoteId = DATA LOCAL NESTED STRING[70]();
blrapnDeliveryNoteDate = DATA LOCAL NESTED DATE();
blrapnReferenceDocumentType = DATA LOCAL NESTED STRING[6]();
blrapnReferenceDocumentId = DATA LOCAL NESTED STRING[70]();
blrapnReferenceDocumentDate = DATA LOCAL NESTED DATETIME();
blrapnShipper = DATA LOCAL NESTED STRING[48]();
blrapnReceiver = DATA LOCAL NESTED STRING[48]();
blrapnCode = DATA LOCAL NESTED STRING[8]();
blrapnDescription = DATA LOCAL NESTED STRING[1000]();

FORM importBlrapn
    PROPERTIES() IN messageHeader blrapnUserID EXTID 'UserID'
    PROPERTIES() IN acknowledgement blrapnDocumentNumber EXTID 'DocumentID', blrapnDateTime EXTID 'CreationDateTime',
                    blrapnDeliveryNoteId EXTID 'DeliveryNoteID', blrapnDeliveryNoteDate EXTID 'DeliveryNoteDate'
    PROPERTIES() IN blrapnReferenceDocument blrapnReferenceDocumentType EXTID 'Type'
    PROPERTIES() IN blrapnErrorOrAcknowledgement blrapnCode EXTID 'Code', blrapnDescription EXTID 'Description'
;

hideMessageHeaderBlrapn = DATA LOCAL BOOLEAN ();

FORM exportBlrapn FORMEXTID 'BLRAPN'
    PROPERTIES ATTR ='0.1' IF NOT hideMessageHeaderBlrapn() EXTID 'version'
    PROPERTIES IN messageHeader
        messageId = resultMilliseconds() IF NOT hideMessageHeaderBlrapn() EXTID 'MessageID',
        msgDateTime = toChar(blrapnDateTime(),'YYYYMMDDHH24MISS') IF NOT hideMessageHeaderBlrapn() EXTID 'MsgDateTime',
        messageType = 'BLRAPN' IF NOT hideMessageHeaderBlrapn() EXTID 'MessageType',
        msgSenderID = blrapnMsgSender() IF NOT hideMessageHeaderBlrapn() EXTID 'MsgSenderID',
        msgReceiverID = blrapnMsgReceiver() IF NOT hideMessageHeaderBlrapn() EXTID 'MsgReceiverID',
        userID = blrapnUserID() IF NOT hideMessageHeaderBlrapn() EXTID 'UserID'
    PROPERTIES IN acknowledgement
        documentId = resultMilliseconds() EXTID 'DocumentID',
        functionCode = '6' EXTID 'FunctionCode',
        creationdateTime = toChar(blrapnDateTime(),'YYYYMMDDHH24MISS') EXTID 'CreationDateTime',
        blrapnDeliveryNoteId() EXTID 'DeliveryNoteID',
        deliveryNoteDate = toChar(blrapnDeliveryNoteDate(),'YYYYMMDD') EXTID 'DeliveryNoteDate',
        blrapnReferenceDocumentType() EXTID 'Type' IN blrapnReferenceDocument,
        blrapnReferenceDocumentId() EXTID 'ID' IN blrapnReferenceDocument,
        date = toChar(blrapnReferenceDocumentDate(),'YYYYMMDDHH24MISS') EXTID 'Date' IN blrapnReferenceDocument,
        blrapnShipper() EXTID 'GLN' IN blrapnShipper,
        blrapnReceiver() EXTID 'GLN' IN blrapnReceiver,
        blrapnCode() EXTID 'Code' IN blrapnErrorOrAcknowledgement,
        blrapnDescription() EXTID 'Description' IN blrapnErrorOrAcknowledgement
;

overImportBlrapn ABSTRACT ();
skipBlrapn = DATA LOCAL NESTED BOOLEAN();

overReceiveMessages(INTEGER i, STRING[100] login, STRING[100] password, STRING[100] host, INTEGER port, TEXT url, STRING[100] archiveDir, BOOLEAN disableConfirmation, BOOLEAN receiveSupplierMessages, BOOLEAN sendReplies, BOOLEAN invoices, STRING[100] provider) + {
    IF lower(documentType(i)) == 'blrapn' AND invoices THEN {
        TRY {
            IMPORT importBlrapn XML FROM data(i);
            skipBlrapn() <- NULL;
            overImportBlrapn();
            IF NOT skipBlrapn() THEN {
                IF blrapnDeliveryNoteId() AND blrapnCode() THEN {
                    IF (lower(blrapnReferenceDocumentType()) == 'blrapn' AND DATE(deliveryNoteDateTime(eInvoiceDeliveryNoteNumber(blrapnDeliveryNoteId()))) == blrapnDeliveryNoteDate()) OR lower(blrapnReferenceDocumentType()) == 'blrwbr' OR lower(blrapnReferenceDocumentType()) == 'blrwbl'
                    OR lower(blrapnReferenceDocumentType()) == 'blrdnr' OR lower(blrapnReferenceDocumentType()) == 'blrdln' THEN {
                        NEWSESSION NESTED LOCAL {
                            LOCAL eInvoice = EInvoice();
                            //для blrapn DeliveryNoteID всегда должен быть задан поэтому ссылку можно определять сразу по нему
                            eInvoice() <- eInvoiceDeliveryNoteNumber(blrapnDeliveryNoteId());
                            IF NOT eInvoiceMessage(eInvoice(), blrapnDocumentNumber(), EInvoiceMessageKind.in) THEN NEW m = EInvoiceMessage {
                                number(m) <- blrapnDocumentNumber();
                                eInvoice(m) <- eInvoice();
                                kind(m) <- EInvoiceMessageKind.in;
                            }
                            FOR EInvoiceMessage m == eInvoiceMessage(eInvoice(), blrapnDocumentNumber(), EInvoiceMessageKind.in) DO {
                                dateTime(m) <- blrapnDateTime();
                                code(m) <- blrapnCode();
                                description(m) <- OVERRIDE blrapnDescription(), description(blrapnCode());
                                type(m) <- CASE
                                    WHEN lower(blrapnReferenceDocumentType()) == 'blrapn' THEN EInvoiceMessageType.blrapn_blrapn
                                    WHEN lower(blrapnReferenceDocumentType()) == 'blrwbr' THEN EInvoiceMessageType.blrapn_blrwbr
                                    WHEN lower(blrapnReferenceDocumentType()) == 'blrwbl' THEN EInvoiceMessageType.blrapn_blrwbl
                                    WHEN lower(blrapnReferenceDocumentType()) == 'blrdnr' THEN EInvoiceMessageType.blrapn_blrdnr
                                    WHEN lower(blrapnReferenceDocumentType()) == 'blrdln' THEN EInvoiceMessageType.blrapn_blrdln;
                                IF code(m) == '2570'  AND type(m) == EInvoiceMessageType.blrapn_blrwbr 
                                    AND NOT (GROUP SUM 1 IF type(EInvoiceMessage em) == EInvoiceMessageType.blrapn_blrwbr AND code(em) == '2550' AND eInvoice(em) == eInvoice() AND NOT kind(em) == EInvoiceMessageKind.out) 
                                    AND NOT (GROUP SUM 1 IF (code(EInvoiceMessage em) == '1354' OR code(em) == '1354') AND eInvoice(em) == eInvoice()) > 10 THEN {
                                    exportedCustomer(eInvoice(m)) <- NULL;
                                }
                                IF code(m) == '2750' AND (type(m) == EInvoiceMessageType.blrapn_blrwbl OR type(m) == EInvoiceMessageType.blrapn_blrdln) THEN {
                                    importedNoticeSupplier(eInvoice(m)) <- TRUE;
                                }
                                XMLPath(m) <- archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                                APPLY NESTED LOCAL;
                                IF canceled() THEN {
                                    IF NOT disableConfirmation AND sendReplies THEN {
                                        LOCAL contentSubXML = FILE();
                                        EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = messageDocumentNumber(), code = '1450', description = applyMessage() XML TO contentSubXML;
                                        fileToString(contentSubXML());
                                        encodeBase64(resultString());
                                        LOCAL xml = XMLFILE();
                                        envelopeLogin() <- login;
                                        envelopePassword() <- password;
                                        envelopeDocumentDate() <- currentDateTime();
                                        envelopeDocumentNumber() <- id(i);
                                        envelopeDocumentType() <- 'SYSTEMMESSAGE';
                                        envelopeContent() <- encodedBase64();
                                        EXPORT envelope XML TO xml;
                                        //EXPORT envelopeMessage OBJECTS login = login, password = password, date = currentDateTime(), number = id(i), innerXML = encodedBase64() XML TO xml;
                                        sendRequestEDI(host, port, login, password, url, xml());
                                        logToFile('edi', provider + ' RecipientError ' + id(i) +' request sent');
                                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                                        IF requestError() THEN {
                                            sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                                            logToFile('edi', provider + ' RecipientError ' + id(i) + ': ' + requestError());
                                            MESSAGE provider + ' Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
                                        } ELSE {
                                            logToFile('edi', provider + ' RecipientError ' + id(i) + ' request succeeded');
                                        }
                                    }
                                    logToFile('edi', provider + ' Import EInvoiceMessage ' + id(i) + ' failed: ' + applyMessage());
                                    invoiceMessagesFailed() <- invoiceMessagesFailed() + 1;
                                } ELSE {
                                    IF code(m) == '2750' AND (type(m) == EInvoiceMessageType.blrapn_blrwbl OR type(m) == EInvoiceMessageType.blrapn_blrdln) THEN {
                                        IF NOT disableAutoBlrapn() THEN {
                                            LOCAL contentSubXML = FILE();
                                            blrapnDateTime() <- currentDateTimeMillis();
                                            blrapnMsgSender() <- glnSupplier(eInvoice(m));
                                            blrapnMsgReceiver() <- glnCustomer(eInvoice(m));
                                            blrapnUserID() <- userIDCustomerStock(eInvoice(m));
                                            blrapnDeliveryNoteId() <- deliveryNoteNumber(eInvoice(m));
                                            blrapnDeliveryNoteDate() <- DATE(deliveryNoteDateTime(eInvoice(m)));
                                            blrapnReferenceDocumentType() <- IF type(m) == EInvoiceMessageType.blrapn_blrwbl THEN 'BLRWBL' ELSE 'BLRDLN';
                                            blrapnReferenceDocumentId() <- numberSupplier(eInvoice(m));
                                            blrapnReferenceDocumentDate() <- dateSupplier(eInvoice(m));
                                            blrapnShipper() <- glnSupplier(eInvoice(m));
                                            blrapnReceiver() <- glnCustomer(eInvoice(m));
                                            blrapnCode() <- '2651';
                                            blrapnDescription() <- NULL;
                                            toMilliseconds(blrapnDateTime());
                                            EXPORT exportBlrapn XML TO contentSubXML;
                                            IF archiveDir THEN {
                                                TRY{ mkdir(archiveDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd')); }
                                                WRITE contentSubXML() TO archiveDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                                            }
                                            IF aliasEDSServiceSupplier(eInvoice(m)) AND passwordEDSServiceSupplier(eInvoice(m)) THEN {
                                                IF hostEDSServiceSupplierTopBy(eInvoice(m)) AND portEDSServiceSupplierTopBy(eInvoice(m)) THEN {
                                                    LOCAL xml = FILE();
                                                    fileToString(contentSubXML());
                                                    EXPORT getEDS OBJECTS alias = aliasEDSServiceSupplier(eInvoice(m)),password = passwordEDSServiceSupplier(eInvoice(m)) XML TO xml;
                                                    LOCAL innerXML = TEXT();
                                                    innerXML() <- resultString();
                                                    fileToString(xml());
                                                    stringToFile(replace(resultString(),'innerXML','<![CDATA[' + innerXML() + ']]>'),'UTF-8','xml');
                                                    sendRequestEDI(hostEDSServiceSupplierTopBy(eInvoice(m)), portEDSServiceSupplierTopBy(eInvoice(m)), 'eds', 'eds', ('http://' + hostEDSServiceSupplierTopBy(eInvoice(m)) + ':' + portEDSServiceSupplierTopBy(eInvoice(m)) + '/eds/services/EDSService?wsdl'), XMLFILE(resultFile()), TRUE);
                                                    IMPORT getEDSResponse FROM sendRequestEDIResponse();
                                                    IF faultstring() THEN {
                                                        logToFile('edi', provider + ' Parse Message ' + id(i) + ' error: BLRAPN ' + deliveryNoteNumber(eInvoice(m)) + ' не подписан. Ошибка: ' + faultstring());
                                                    }
                                                    ELSE IF waybill() THEN {
                                                        encodeBase64(waybill());
                                                        LOCAL ixml = XMLFILE();
                                                        envelopeLogin() <- login;
                                                        envelopePassword() <- password;
                                                        envelopeFilename() <- CONCAT '', 'invoice', deliveryNoteNumber(eInvoice(m));
                                                        envelopeDocumentDate() <- blrapnDateTime();
                                                        envelopeDocumentNumber() <- numberSupplier(eInvoice(m));
                                                        envelopeSender() <- glnSupplier(eInvoice(m));
                                                        envelopeReceiver() <- glnCustomer(eInvoice(m));
                                                        envelopeDeliveryPoint() <- glnCustomerStock(eInvoice(m));
                                                        envelopeDocumentType() <- 'BLRAPN';
                                                        envelopeContent() <- encodedBase64();
                                                        EXPORT envelope XML TO ixml;
                                                        sendRequestEDI(host, port, login, password, url, ixml());
                                                        logToFile('edi', provider + ' SendBlrapnEInvoice ' + deliveryNoteNumber(eInvoice(m)) +' request sent');
                                                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                                                        IF requestError() THEN {
                                                            logToFile('edi', provider + ' SendBlrapnEInvoice ' + deliveryNoteNumber(eInvoice(m)) + ': ' + requestError());
                                                            MESSAGE provider + ' Извещение о прочтении накладной ' + deliveryNoteNumber(eInvoice(m)) + ' не выгружено: ' + requestError() NOWAIT;
                                                        } ELSE {
                                                            logToFile('edi', provider + ' SendBlrapnEInvoice ' + deliveryNoteNumber(eInvoice(m)) + ' request succeeded');
                                                            IF NOT disableConfirmation THEN {
                                                                LOCAL cxml = XMLFILE();
                                                                EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO cxml;
                                                                sendRequestEDI(host, port, login, password, url, cxml());
                                                                logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request sent');
                                                                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                                                                IF requestError() THEN {
                                                                    logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                                                                    MESSAGE  provider + ' Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                                                                } ELSE {
                                                                    IF archiveDir THEN {
                                                                        TRY{ mkdir(archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd')); }
                                                                        WRITE data(i) TO archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                                                                    }
                                                                    logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                                                                }
                                                            }
                                                            logToFile('edi', provider + ' Import EInvoiceMessage ' + id(i) + ' succeeded');
                                                            invoiceMessagesSucceeded() <- invoiceMessagesSucceeded() + 1;
                                                            NEWSESSION NESTED LOCAL {
                                                                exportedBlrapnSupplier(eInvoice(m)) <- TRUE;
                                                                NEW em = EInvoiceMessage {
                                                                    number(em) <- STRING[24](resultMilliseconds());
                                                                    eInvoice(em) <- eInvoice();
                                                                    dateTime(em) <- blrapnDateTime();
                                                                    code(em) <- blrapnCode();
                                                                    kind(em) <- EInvoiceMessageKind.out;
                                                                    type(em) <- type(m);
                                                                    XMLPath(em) <- archiveDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                                                                }
                                                                APPLY NESTED LOCAL;
                                                            }
                                                        }
                                                    }
                                                } ELSE {
                                                    logToFile('edi', provider + ' Parse Message ' + id(i) + ' error: не заданы параметры EDSService');
                                                }
                                            } ELSE {
                                                logToFile('edi', provider + ' Parse Message ' + id(i) + ' error: Alias or Password for EDSService not found');
                                            }
                                        } ELSE {
                                            IF NOT disableConfirmation THEN {
                                                LOCAL cxml = XMLFILE();
                                                EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO cxml;
                                                sendRequestEDI(host, port, login, password, url, cxml());
                                                logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request sent');
                                                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                                                IF requestError() THEN {
                                                    logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                                                    MESSAGE  provider + ' Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                                                } ELSE {
                                                    IF archiveDir THEN {
                                                        TRY{ mkdir(archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd')); }
                                                        WRITE data(i) TO archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                                                    }
                                                    logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                                                }
                                            }
                                            logToFile('edi', provider + ' Import EInvoiceMessage ' + id(i) + ' succeeded');
                                            invoiceMessagesSucceeded() <- invoiceMessagesSucceeded() + 1;
                                        }
                                    } ELSE {
                                        IF NOT disableConfirmation THEN {
                                            LOCAL xml = XMLFILE();
                                            EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO xml;
                                            sendRequestEDI(host, port, login, password, url, xml());
                                            logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request sent');
                                            importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                                            IF requestError() THEN {
                                                logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                                                MESSAGE  provider + ' Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                                            } ELSE {
                                                IF archiveDir THEN {
                                                    TRY{ mkdir(archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd')); }
                                                    WRITE data(i) TO archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                                                }
                                                logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                                            }
                                        }
                                        logToFile('edi', provider + ' Import EInvoiceMessage ' + id(i) + ' succeeded');
                                        invoiceMessagesSucceeded() <- invoiceMessagesSucceeded() + 1;
                                    }
                                }
                            }
                        }
                    }
                    IF (lower(blrapnReferenceDocumentType()) == 'blrapn' AND DATE(actDifDateTime(eCreditNoteActDifNumber(blrapnDeliveryNoteId()))) == blrapnDeliveryNoteDate()) OR lower(blrapnReferenceDocumentType()) == 'blradf' THEN {
                        NEWSESSION NESTED LOCAL {
                            LOCAL eCreditNote = ECreditNote();
                            eCreditNote() <- eCreditNoteActDifNumber(blrapnDeliveryNoteId());
                            IF NOT eCreditNoteMessage(eCreditNote(), blrapnDocumentNumber()) THEN NEW m = ECreditNoteMessage {
                                number(m) <- blrapnDocumentNumber();
                                eCreditNote(m) <- eCreditNote();
                            }
                            FOR ECreditNoteMessage m == eCreditNoteMessage(eCreditNote(), blrapnDocumentNumber()) DO {
                                dateTime(m) <- blrapnDateTime();
                                code(m) <- blrapnCode();
                                description(m) <- OVERRIDE blrapnDescription(), description(blrapnCode());
                                eCreditNote(m) <- eCreditNoteActDifNumber(blrapnDeliveryNoteId());
                                type(m) <- CASE
                                    WHEN lower(blrapnReferenceDocumentType()) == 'blrapn' THEN ECreditNoteMessageType.blrapn_blrapn
                                    WHEN lower(blrapnReferenceDocumentType()) == 'blradf' THEN ECreditNoteMessageType.blrapn_blradf;
                                XMLPath(m) <- archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                                APPLY NESTED LOCAL;
                                IF canceled() THEN {
                                    IF NOT disableConfirmation AND sendReplies THEN {
                                        LOCAL contentSubXML = FILE();
                                        EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = messageDocumentNumber(), code = '1450', description = applyMessage() XML TO contentSubXML;
                                        fileToString(contentSubXML());
                                        encodeBase64(resultString());
                                        LOCAL xml = XMLFILE();
                                        envelopeLogin() <- login;
                                        envelopePassword() <- password;
                                        envelopeDocumentDate() <- currentDateTime();
                                        envelopeDocumentNumber() <- id(i);
                                        envelopeDocumentType() <- 'SYSTEMMESSAGE';
                                        envelopeContent() <- encodedBase64();
                                        EXPORT envelope XML TO xml;
                                        //EXPORT envelopeMessage OBJECTS login = login, password = password, date = currentDateTime(), number = id(i), innerXML = encodedBase64() XML TO xml;
                                        sendRequestEDI(host, port, login, password, url, xml());
                                        logToFile('edi', provider + ' RecipientError ' + id(i) +' request sent');
                                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                                        IF requestError() THEN {
                                            sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                                            logToFile('edi', provider + ' RecipientError ' + id(i) + ': ' + requestError());
                                            MESSAGE provider + ' Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
                                        } ELSE {
                                            logToFile('edi', provider + ' RecipientError ' + id(i) + ' request succeeded');
                                        }
                                    }
                                    logToFile('edi', provider + ' Import ECreditNoteMessage ' + id(i) + ' failed: ' + applyMessage());
                                    creditNoteMessagesFailed() <- creditNoteMessagesFailed() + 1;
                                } ELSE {
                                    IF NOT disableConfirmation THEN {
                                        LOCAL xml = XMLFILE();
                                        EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO xml;
                                        sendRequestEDI(host, port, login, password, url, xml());
                                        logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request sent');
                                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                                        IF requestError() THEN {
                                            logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                                            MESSAGE  provider + ' Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                                        } ELSE {
                                            IF archiveDir THEN {
                                                TRY{ mkdir(archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd')); }
                                                WRITE data(i) TO archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                                            }
                                            logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                                        }
                                    }
                                    logToFile('edi', provider + ' Import ECreditNoteMessage ' + id(i) + ' succeeded');
                                    creditNoteMessagesSucceeded() <- creditNoteMessagesSucceeded() + 1;
                                }
                            }
                        }
                    }
                } ELSE {
                    IF NOT disableConfirmation AND sendReplies THEN {
                        LOCAL contentSubXML = FILE();
                        EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = messageDocumentNumber(), code = '1450', description = (provider + ' Parsing EInvoiceMessage ' + id(i) + ' failed') XML TO contentSubXML;
                        fileToString(contentSubXML());
                        encodeBase64(resultString());
                        LOCAL xml = XMLFILE();
                        envelopeLogin() <- login;
                        envelopePassword() <- password;
                        envelopeDocumentDate() <- currentDateTime();
                        envelopeDocumentNumber() <- id(i);
                        envelopeDocumentType() <- 'SYSTEMMESSAGE';
                        envelopeContent() <- encodedBase64();
                        EXPORT envelope XML TO xml;
                        //EXPORT envelopeMessage OBJECTS login = login, password = password, date = currentDateTime(), number = id(i), innerXML = encodedBase64() XML TO xml;
                        sendRequestEDI(host, port, login, password, url, xml());
                        logToFile('edi', provider + ' RecipientError ' + id(i) +' request sent');
                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                        IF requestError() THEN {
                            sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                            logToFile('edi', provider + ' RecipientError ' + id(i) + ': ' + requestError());
                            MESSAGE provider + ' Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
                        } ELSE {
                            logToFile('edi', provider + ' RecipientError ' + id(i) + ' request succeeded');
                        }
                    }
                    logToFile('edi', provider + ' Parsing EInvoiceMessage ' + id(i) + ' failed');
                    invoiceMessagesFailed() <- invoiceMessagesFailed() + 1;
                }
            }
        } CATCH {
            IF NOT disableConfirmation AND sendReplies THEN {
                LOCAL contentSubXML = FILE();
                EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = messageDocumentNumber(), code = '1450', description = (CONCAT '\n', provider + ' Parse EInvoiceMessage ' + id(i) + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException()) XML TO contentSubXML;
                fileToString(contentSubXML());
                encodeBase64(resultString());
                LOCAL xml = XMLFILE();
                envelopeLogin() <- login;
                envelopePassword() <- password;
                envelopeDocumentDate() <- currentDateTime();
                envelopeDocumentNumber() <- id(i);
                envelopeDocumentType() <- 'SYSTEMMESSAGE';
                envelopeContent() <- encodedBase64();
                EXPORT envelope XML TO xml;
                //EXPORT envelopeMessage OBJECTS login = login, password = password, date = currentDateTime(), number = id(i), innerXML = encodedBase64() XML TO xml;
                sendRequestEDI(host, port, login, password, url, xml());
                logToFile('edi', provider + ' RecipientError ' + id(i) +' request sent');
                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                IF requestError() THEN {
                    sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                    logToFile('edi', provider + ' RecipientError ' + id(i) + ': ' + requestError());
                    MESSAGE provider + ' Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
                } ELSE {
                    logToFile('edi', provider + ' RecipientError ' + id(i) + ' request succeeded');
                }
            }
            logToFile('edi', CONCAT '\n', provider + ' Parse EInvoiceMessage ' + id(i) + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE  'Ошибка при импорте сообщения ' + id(i) +'. Обратитесь к администратору' NOWAIT;
            invoiceMessagesFailed() <- invoiceMessagesFailed() + 1;
        }
    }
}

receiveInvoiceTopBy 'Получить сообщения по электронным накладным' () {
    checkIsServer();
    IF isServer() THEN {receiveMessagesTopBy(TRUE); };  
}

EXTEND FORM integrationData
    PROPERTIES() archiveDirTopBy, outputDirTopBy, disableConfirmationTopBy, receiveSupplierMessagesTopBy, receiveTopBy,
                 receiveInvoiceTopBy, confirmNotFoundOrders, confirmNotFoundInvoices, disableAutoBlrapn, askPasswordEDSService
    OBJECTS let = LegalEntity
    FILTERS isCompany(let)
    PROPERTIES(let) name READONLY, loginTopBy, passwordTopBy, hostTopBy, portTopBy
;
    
DESIGN integrationData {
    pane {
        NEW vs {
            caption = 'TopBy';
            NEW params {
                caption = 'Общие';
                fill = 1;
                MOVE PROPERTY(archiveDirTopBy());
                MOVE PROPERTY(outputDirTopBy());
                MOVE PROPERTY(disableConfirmationTopBy());
                MOVE PROPERTY(receiveSupplierMessagesTopBy());
                MOVE BOX(let);
            }
            NEW col {
                type = CONTAINERH;
                fill = 1;
                NEW ovs {
                    caption = 'Заказы';
                    MOVE PROPERTY (confirmNotFoundOrders());
                    MOVE PROPERTY(receiveTopBy());
                }
                NEW ivs {
                    caption = 'Электронные накладные';
                    MOVE PROPERTY (confirmNotFoundInvoices());
                    MOVE PROPERTY (disableAutoBlrapn());
                    MOVE PROPERTY(receiveInvoiceTopBy());
                    MOVE PROPERTY(askPasswordEDSService());
                    fill = 1;
                    NEW EDSService {
                        type = TABBED;
                        fill = 1;
                        MOVE BOX(le);
                        MOVE BOX(seds);
                        MOVE BOX(eeds);
                    }
                }
            }
        }
    }
}

good(EOrderMessage m) += WHEN (code(m) == '1250' OR code(m) == '1251' OR code(m) == '1252') THEN TRUE ;
good(EInvoiceMessage m) += WHEN (code(m) == '1250' OR code(m) == '2550' OR code(m) == '2560' OR code(m) == '2551' OR code(m) == '2571' OR code(m) == '2650') THEN TRUE ;