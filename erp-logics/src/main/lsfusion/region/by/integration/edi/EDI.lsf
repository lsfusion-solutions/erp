MODULE EDI;

REQUIRE EDIGLN, EDIGTIN, Item, Store, Warehouse, LogTools, EDIGLNWarehouse, EDIGLNStore;

@defineLogRotate(edi, 5, weekly);
downloadEdi 'edi' () { downloadFiles('logs/edi.log'); }

EXTEND FORM tools
    PROPERTIES() downloadEdi
;

DESIGN tools{
    download {
        MOVE PROPERTY(downloadEdi());
    }
}

DESIGN options {
    pane {
        NEW EDI {
            caption = 'EDI';
        }
    }
}
DESIGN integrationData {
    pane {
        NEW edi {
            tabbed = TRUE;
            caption = 'EDI-провайдеры';
        }
    }
}

extraCodeUOM 'Ед. изм. (EDI)' = DATA STRING[3] (UOM);
UOMExtraCode = GROUP MAX UOM u BY extraCodeUOM(u);
EXTEND FORM UOMs PROPERTIES(u) READONLY extraCodeUOM;
EXTEND FORM UOM PROPERTIES(u) extraCodeUOM;

TABLE legalEntityEDI(LegalEntity);

CLASS EDIProvider 'Провайдер EDI' : StaticObject;
prefix = ABSTRACT CASE STRING[4](EDIProvider);
name = ABSTRACT CASE STRING[100](EDIProvider);

FORM EDIProviders 'Провайдеры EDI'
    OBJECTS t = EDIProvider
    PROPERTIES (t) READONLY staticCaption
    LIST EDIProvider OBJECT t
;

DESIGN EDIProviders {
    size = (600, 400);
    PROPERTY (staticCaption(t)){caption = 'Наименование';};
}

EDIProvider 'EDI-провайдер' = DATA EDIProvider(LegalEntity);
nameEDIProvider 'EDI-провайдер'(LegalEntity l) = staticCaption(EDIProvider(l));

EXTEND FORM legalEntity
    PROPERTIES(l) GLN, nameEDIProvider, notUseInStockGLN

    OBJECTS eCom = LegalEntity
    PROPERTIES (eCom) READONLY name, id
    FILTERS isCompany(eCom)
;

DESIGN legalEntity {
    extendContainer {
        NEW EDITab {
            caption = 'EDI';
            horizontal = FALSE;
            fill = 1;
            NEW EDI {
                horizontal = TRUE;
                NEW EDIComm {
                    horizontal = FALSE;
                    caption = 'Общие';
                    MOVE PROPERTY (GLN(l));
                    MOVE PROPERTY (notUseInStockGLN(l));
                    MOVE PROPERTY (nameEDIProvider(l));
                }
            }
            MOVE BOX (eCom) {caption = 'Компании';};
        }
    }
}
EXTEND FORM legalEntities PROPERTIES(l) READONLYIF isReadonly() GLN, nameEDIProvider;

NAVIGATOR {
    financeNavigator {
        NEW FOLDER edi 'EDI';
    }
}

//message type/kind //

CLASS EInvoiceMessageKind 'Вид сообщения по накладной EDI' {
    in 'входящее',
    out 'исходящее'
}

CLASS EInvoiceMessageType 'Тип сообщения по накладной EDI' : StaticObject;

EXTEND CLASS EInvoiceMessageType {
    blrapn_blrapn 'BLRAPN-BLRAPN'
}

//-------------------------- Send Request ------------------------------//
sendRequestEDIResponse = DATA LOCAL FILE();
sendRequestEDIStatus = DATA LOCAL INTEGER();

basic = DATA LOCAL TEXT ();
encodeText = FORMULA TEXT 'encode(convert_to(($1),\'UTF8\'),($2))';
httpHeadersEDI(TEXT name) = CASE WHEN basic() AND name = 'Authorization' THEN 'Basic ' + basic();

sendRequestEDI 'Отправить' (TEXT login, TEXT password, TEXT url, FILE request, BOOLEAN basicAuthorization, BOOLEAN client) {
    logToFile('edi', CONCAT ' ', 'SendRequestEDI ' + url, '(client)' IF client);
    basic() <- encodeText(login + ':' + password, 'base64') IF basicAuthorization;
    timeoutHttp() <- 300000;
    IF client THEN {
        EXTERNAL HTTP CLIENT url HEADERS httpHeadersEDI PARAMS request TO sendRequestEDIResponse;
    } ELSE {
        EXTERNAL HTTP url HEADERS httpHeadersEDI PARAMS request TO sendRequestEDIResponse;
    }
    sendRequestEDIStatus() <- statusHttp();
}
sendRequestEDI 'Отправить' (TEXT url, XMLFILE request) {
    sendRequestEDI(NULL, NULL, url, FILE(request), NULL, NULL);
}

//----------------------- importRequestResult ---------------------------//

succesful = DATA LOCAL TEXT(INTEGER);
message = DATA LOCAL TEXT(INTEGER);
errorCode = DATA LOCAL INTEGER(INTEGER);

requestError = DATA LOCAL NESTED TEXT();
// todo : нужно переделать без входа xml и status
importRequestResult(FILE xml, INTEGER status, TEXT root) {
    IF status == 200 THEN {
        IMPORT XML ROOT root FROM xml TO succesful = 'Succesful', message = 'Message', errorCode = 'ErrorCode';
        IF succesful(0) == 'true' THEN {
            requestError() <- NULL;
        } ELSE {
            IF errorCode(0) == 1300 THEN {
                requestError() <- 'Ошибка авторизации';
            } ELSE {
                requestError() <- CONCAT ' ', 'Ошибка ', errorCode(0) + ':', message(0);
            }
        }
    } ELSE {
        requestError() <- CONCAT ' ', 'Неизвестная ошибка: статус ', STRING[3](status);
    }
}

//добавление файлов
META openXML (class, object, table)
    XMLPath = DATA STRING[200] (class);
    openXML 'Открыть XML' (class object) {
        IF XMLPath(object) THEN {
            LOCAL file = FILE();
            READ 'file://' + XMLPath(object) + '.xml' TO file;
            open(file());
        } ELSE {
            MESSAGE 'Отсутствует ссылка на файл xml';
        }
    }

    EXTEND FORM table
        PROPERTIES(object) openXML GRID
    ;
END

id = DATA LOCAL NESTED TEXT(INTEGER);
documentType = DATA LOCAL NESTED TEXT(INTEGER);
data = DATA LOCAL NESTED XMLFILE(INTEGER);

sendRecipientErrorFailed = DATA LOCAL NESTED INTEGER();
supplierOrdersSucceeded = DATA LOCAL NESTED INTEGER();
supplierOrdersFailed = DATA LOCAL NESTED INTEGER();
orderMessagesSucceeded = DATA LOCAL NESTED INTEGER();
orderMessagesFailed = DATA LOCAL NESTED INTEGER();
responsesSucceeded = DATA LOCAL NESTED INTEGER();
responsesFailed = DATA LOCAL NESTED INTEGER();
despatchAdvicesSucceeded = DATA LOCAL NESTED INTEGER();
despatchAdvicesFailed = DATA LOCAL NESTED INTEGER();
invoiceMessagesSucceeded = DATA LOCAL NESTED INTEGER();
invoiceMessagesFailed = DATA LOCAL NESTED INTEGER();
eInvoicesSucceeded = DATA LOCAL NESTED INTEGER();
eInvoicesFailed = DATA LOCAL NESTED INTEGER();
documentMessagesSucceeded = DATA LOCAL NESTED INTEGER();
documentMessagesFailed = DATA LOCAL NESTED INTEGER();
eDocumentsSucceeded = DATA LOCAL NESTED INTEGER();
eDocumentsFailed = DATA LOCAL NESTED INTEGER();
blrwbrCount = DATA LOCAL NESTED INTEGER();
blrdnrCount = DATA LOCAL NESTED INTEGER();
blradfCount = DATA LOCAL NESTED INTEGER();
messagesConfirmed = DATA LOCAL NESTED INTEGER();

GROUP reference;
messageDocumentNumber = DATA LOCAL NESTED STRING[35]();
messageDocumentDate = DATA LOCAL NESTED DATETIME();
messageBuyerGLN = DATA LOCAL NESTED STRING[48]();
messageSupplierGLN = DATA LOCAL NESTED STRING[48]();
name = DATA LOCAL NESTED STRING ();
documentType = DATA LOCAL NESTED TEXT();
documentNumber = DATA LOCAL NESTED STRING[48]();
code = DATA LOCAL NESTED STRING[10]();
description = DATA LOCAL NESTED STRING[1000]();

description (STRING[10] code) = CASE
    WHEN code == '1251' THEN 'Сообщение прочитано получателем'
    WHEN code == '1252' THEN 'Сообщение принято учётной системой получателя'
    WHEN code == '2650' THEN 'Извещение о прочтении'
    WHEN code == '2651' THEN 'Извещение о прочтении уведомления об изменении'
    WHEN code == '2750' THEN 'Уведомление об изменении';

FORM systemMessage
    PROPERTIES() messageDocumentNumber EXTID 'documentNumber',
                 messageDocumentDate EXTID 'documentDate',
                 messageBuyerGLN EXTID 'buyerGLN',
                 messageSupplierGLN EXTID 'supplierGLN'
    PROPERTIES() IN reference documentType, documentNumber, code, description
;

GROUP messageHeader EXTID 'MessageHeader';
GROUP acknowledgement EXTID 'Acknowledgement';
GROUP referenceDocument EXTID 'ReferenceDocument';
GROUP blrapnReferenceDocument EXTID 'ReferenceDocument': acknowledgement;
GROUP blrapnShipper EXTID 'Shipper': acknowledgement;
GROUP blrapnReceiver EXTID 'Receiver': acknowledgement;
GROUP blrapnErrorOrAcknowledgement EXTID 'ErrorOrAcknowledgement': acknowledgement;
blrapnTestIndicator = DATA LOCAL NESTED STRING[1]();
blrapnUserID = DATA LOCAL NESTED STRING[35]();
blrapnDocumentNumber = DATA LOCAL NESTED STRING[35]();
blrapnDateTime = DATA LOCAL NESTED DATETIME();
blrapnMsgSender = DATA LOCAL NESTED STRING[13]();
blrapnMsgReceiver = DATA LOCAL NESTED STRING[13]();
blrapnDeliveryNoteId = DATA LOCAL NESTED STRING[70]();
blrapnDeliveryNoteDate = DATA LOCAL NESTED DATE();
blrapnReferenceDocumentType = DATA LOCAL NESTED STRING[6]();
blrapnReferenceDocumentId = DATA LOCAL NESTED STRING[70]();
blrapnReferenceDocumentDate = DATA LOCAL NESTED DATETIME();
blrapnShipper = DATA LOCAL NESTED STRING[48]();
blrapnReceiver = DATA LOCAL NESTED STRING[48]();
blrapnCode = DATA LOCAL NESTED STRING[8]();
blrapnDescription = DATA LOCAL NESTED STRING[1000]();

FORM importBlrapn
    PROPERTIES() IN messageHeader blrapnTestIndicator EXTID 'TestIndicator', blrapnUserID EXTID 'UserID'
    PROPERTIES() IN acknowledgement blrapnDocumentNumber EXTID 'DocumentID', blrapnDateTime EXTID 'CreationDateTime',
        blrapnDeliveryNoteId EXTID 'DeliveryNoteID', blrapnDeliveryNoteDate EXTID 'DeliveryNoteDate'
    PROPERTIES() IN blrapnReferenceDocument blrapnReferenceDocumentType EXTID 'Type',
        blrapnReferenceDocumentId EXTID 'ID', blrapnReferenceDocumentDate EXTID 'Date'
    PROPERTIES() IN blrapnShipper blrapnShipper EXTID 'GLN'
    PROPERTIES() IN blrapnReceiver blrapnReceiver EXTID 'GLN'
    PROPERTIES() IN blrapnErrorOrAcknowledgement blrapnCode EXTID 'Code', blrapnDescription EXTID 'Description'
;

hideMessageHeaderBlrapn = DATA LOCAL BOOLEAN ();

FORM exportBlrapn FORMEXTID 'BLRAPN'
    PROPERTIES ATTR ='0.1' IF NOT hideMessageHeaderBlrapn() EXTID 'version'
    PROPERTIES IN messageHeader
    messageId = resultMilliseconds() IF NOT hideMessageHeaderBlrapn() EXTID 'MessageID',
        msgDateTime = toChar(blrapnDateTime(),'YYYYMMDDHH24MISS') IF NOT hideMessageHeaderBlrapn() EXTID 'MsgDateTime',
        messageType = 'BLRAPN' IF NOT hideMessageHeaderBlrapn() EXTID 'MessageType',
        msgSenderID = blrapnMsgSender() IF NOT hideMessageHeaderBlrapn() EXTID 'MsgSenderID',
        msgReceiverID = blrapnMsgReceiver() IF NOT hideMessageHeaderBlrapn() EXTID 'MsgReceiverID',
        userID = blrapnUserID() IF NOT hideMessageHeaderBlrapn() EXTID 'UserID'
    PROPERTIES IN acknowledgement
    documentId = resultMilliseconds() EXTID 'DocumentID',
        functionCode = '6' EXTID 'FunctionCode',
        creationdateTime = toChar(blrapnDateTime(),'YYYYMMDDHH24MISS') EXTID 'CreationDateTime',
        blrapnDeliveryNoteId() EXTID 'DeliveryNoteID',
        deliveryNoteDate = toChar(blrapnDeliveryNoteDate(),'YYYYMMDD') EXTID 'DeliveryNoteDate',
        blrapnReferenceDocumentType() EXTID 'Type' IN blrapnReferenceDocument,
        blrapnReferenceDocumentId() EXTID 'ID' IN blrapnReferenceDocument,
        date = toChar(blrapnReferenceDocumentDate(),'YYYYMMDDHH24MISS') EXTID 'Date' IN blrapnReferenceDocument,
        blrapnShipper() EXTID 'GLN' IN blrapnShipper,
        blrapnReceiver() EXTID 'GLN' IN blrapnReceiver,
        blrapnCode() EXTID 'Code' IN blrapnErrorOrAcknowledgement,
        blrapnDescription() EXTID 'Description' IN blrapnErrorOrAcknowledgement
;