MODULE ConsignmentEInvoice;

REQUIRE SupplierEInvoice, Invoice, ConsignmentBy;

NAMESPACE Consignment;

defaultNumeratorDeliveryNoteNumber = DATA Numerator ();
nameDefaultNumeratorDeliveryNote 'DeliveryNoteNumber Накладные EDI' = name(defaultNumeratorDeliveryNoteNumber()) IN defaultNumerator;

EXTEND FORM defaultNumerators
    PROPERTIES() nameSaleDefaultNumeratorDeliveryNote = nameDefaultNumeratorDeliveryNote
;

loadDefaultNumerators() + { 
    NEW n = Numerator {
        name(n) <- 'DeliveryNoteNumber Накладные EDI';
        series(n) <- '';
        minValue(n) <- 1L;
        maxValue(n) <- 9999999999L;
        stringLength(n) <- 10;

        defaultNumeratorDeliveryNoteNumber() <- n;
    }
}

fillGeneratedNumber(EInvoice o) {
    deliveryNoteNumber(o) <- prefix(EDIProviderInvoice(customer(o), supplier(o))) + (OVERRIDE GLN(supplier(o)), extraGLN(supplier(o))) + '-' + curStringValue(defaultNumeratorDeliveryNoteNumber()); //ССС-GGGGGGGGGGGGG-NNNNNNNNNN
}

generateSeriesNumber 'Сгенерировать номер'(EInvoice o)  {
    fillGeneratedNumber(o);
    incrementValueSession(defaultNumeratorDeliveryNoteNumber());
}

skipGenerateDeliveryNoteNumber = ABSTRACT BOOLEAN (EInvoice);

WHEN CHANGED (supplier(EInvoice o)) AND NOT deliveryNoteNumber(o) AND NOT skipGenerateDeliveryNoteNumber(o) DO {
    generateSeriesNumber(o);
}

generateNumber (EInvoice e) { 
    IF defaultNumeratorDeliveryNoteNumber() AND NOT deliveryNoteNumber(e) AND NOT skipGenerateDeliveryNoteNumber(e) THEN {
        incrementValue(defaultNumeratorDeliveryNoteNumber());
        fillGeneratedNumber(e);
    }
}

//исходящие (Sale OR PurchaseReturn)
invoice = DATA Invoice(EInvoice) INDEXED;
invoiceDetail = DATA InvoiceDetail(EInvoiceDetail) INDEXED;
eInvoice = GROUP LAST EInvoice ei IF NOT isCancel(ei) ORDER deliveryNoteDateTime(ei), ei BY invoice(ei) MATERIALIZED INDEXED;
eInvoiceAll = GROUP LAST EInvoice ei AS EInvoice IF ei IS EInvoice ORDER deliveryNoteDateTime(ei), ei BY invoice(ei) MATERIALIZED INDEXED;

numberInvoice 'Номер накладной EDI (расход)' (EInvoice i) = number(invoice(i));
EXTEND FORM eInvoices
    PROPERTIES (e) READONLY SaleNumberInvoice = numberInvoice
;

CONSTRAINT DROPPED (Invoice i IS Invoice) AND PREV(exportedSupplier(eInvoice(i))) 
    MESSAGE 'Запрещено удалять накладную по которой была отправлена ЭТТН. Сначала необходимо отменить ЭТТН';

numberEInvoice 'Номер ЭТТН'(Invoice i) = deliveryNoteNumber(eInvoice(i));
numberEInvoice48 'Номер ЭТТН'(Invoice i) = deliveryNoteNumber48(eInvoice(i));
isEInvoice 'ЭТТН'  (Invoice i) = TRUE IF eInvoice(i);

isTestEInvoice 'Тестовая ЭТТН' = DATA BOOLEAN (Invoice);

WHEN LOCAL CHANGED(isTestEInvoice(Invoice i)) AND isEInvoice(i) DO {
    isTestDocument(eInvoice(i)) <- isTestEInvoice(i);
}

sendConsignmentEInvoiceAbstract ABSTRACT (Invoice);
beforeSignAndSendSupplierEDI ABSTRACT (Invoice);
skipSignAndSendSupplierEDI = DATA LOCAL BOOLEAN () ;

signAndSendSupplierEDI 'Подписать и отправить (поставщик)'(Invoice i)  { 
    NEWSESSION {
        beforeSignAndSendSupplierEDI(i);
        IF NOT skipSignAndSendSupplierEDI() THEN{
            in(EInvoice e) <- e = eInvoice(i);
            signAndSendSupplierEDI();
            in(EInvoice e) <- NULL;
            IF  exportedSupplier(eInvoice(i)) THEN sendConsignmentEInvoiceAbstract(i);
        }
    }
}
cancelSignAndSendSupplierEDI 'Отменить (поставщик)'(Invoice i)  { 
    NEWSESSION {
        in(EInvoice e) <- e = eInvoice(i);
        exportedSupplier(EInvoice e) <- NULL WHERE e = eInvoice(i);
        isCancel(EInvoice e) <- TRUE WHERE e = eInvoice(i);
        signAndSendSupplierEDI();
        IF (GROUP SUM 1 IF exportedSupplier(EInvoice e) AND in(e)) THEN APPLY;
    }
}
signAndSendBlrapnSupplierEDI 'Подписать и отправить извещение о прочтении (поставщик)'(Invoice i) { 
    NEWSESSION {
        in(EInvoice e) <- e = eInvoice(i);
        signAndSendBlrapnSupplierEDI();
        in(EInvoice e) <- NULL;
    }
}

currentOrderMessage = GROUP LAST EInvoiceMessage m ORDER dateTime(m), m WHERE eInvoice(Invoice i) == eInvoice(m) BY i MATERIALIZED;
statusDescription 'Статус отправки EDI'(Invoice o) = CONCAT ' ', code(currentOrderMessage(o)), description(currentOrderMessage(o)) CHARWIDTH 15;
backgroundStatusDescription (Invoice i) = RGB(255,238,238) IF currentOrderMessage(i) AND NOT good(currentOrderMessage(i));

WHEN SETCHANGED(payer(invoice(EInvoice e))) AND NOT (CHANGED(freightPayer(e))) AND NOT isTN2(e) DO {
    freightPayer(e) <- payer(invoice(e));    
}
WHEN SETCHANGED(nameDriver(invoice(EInvoice e))) AND NOT (CHANGED(transportContact(e))) AND NOT isTN2(e) DO {
    transportContact(e) <- STRING[150](nameDriver(invoice(e)));    
}
WHEN SETCHANGED(overWaybill(invoice(EInvoice e))) AND NOT (CHANGED(waybillId(e))) AND NOT isTN2(e) DO {
    waybillId(e) <- STRING[70](trim(overWaybill(invoice(e)))); 
}
WHEN SETCHANGED(nameIssuanceAllowed(invoice(EInvoice e))) AND NOT (CHANGED(contactSupplier(e)))  DO {
    contactSupplier(e) <- STRING[150](nameIssuanceAllowed(invoice(e)));     
}
WHEN SETCHANGED(forwarder(invoice(EInvoice e))) AND NOT (CHANGED(deliveryContact(e)))  DO {
    deliveryContact(e) <- STRING[150](forwarder(invoice(e)));
}

overProxyID = ABSTRACT STRING[70] (EInvoice);

WHEN SETCHANGED(warrant(invoice(EInvoice e))) AND NOT (CHANGED(proxyID(e)))  DO {
    proxyID(e) <- OVERRIDE overProxyID(e), STRING[70](warrant(invoice(e)));
}
WHEN SETCHANGED(warrantHolder(invoice(EInvoice e))) AND NOT (CHANGED(partyIssuingProxyName(e)))  DO {
    partyIssuingProxyName(e) <- STRING[175](warrantHolder(invoice(e)));
}
WHEN SETCHANGED(raceQuantity(invoice(EInvoice e))) AND NOT (CHANGED(quantityTrip(e))) AND NOT isTN2(e) DO {
    quantityTrip(e) <- STRING[70](raceQuantity(invoice(e)));
}
WHEN SETCHANGED(nameTruck(invoice(EInvoice e))) AND NOT (CHANGED(transportID(e))) AND NOT isTN2(e) DO {
    transportID(e) <- STRING[35](nameTruck(invoice(e)));
}
WHEN SETCHANGED (trailer(invoice(EInvoice e))) AND NOT (CHANGED(trailerID(e))) AND NOT isTN2(e) DO {
    trailerID(e) <- STRING[35](trailer(invoice(e)));
}
WHEN SETCHANGED (overGoodsAccepted(invoice(EInvoice e))) AND NOT (CHANGED(contactCustomerStock(e)))  DO {
    contactCustomerStock(e) <- STRING[150](overGoodsAccepted(invoice(e)));
}

WHEN SETCHANGED (sealNumberSupplier(invoice(EInvoice e))) AND NOT (CHANGED(sealIDReceiver(e))) AND NOT isTN2(e) DO {
    sealIDReceiver(e) <- STRING[35](sealNumberSupplier(invoice(e)));
}

WHEN SETCHANGED (nameIssuanceExecuted(invoice(EInvoice e))) AND NOT (CHANGED(contactSupplierStock(e)))  DO {
    contactSupplierStock(e) <- STRING[150](nameIssuanceExecuted(invoice(e)));    
}

WHEN LOCAL FORMS consignment CHANGED(grossWeightTon(invoiceDetail(EInvoiceDetail ed))) AND NOT (CHANGED(grossWeightValue(ed))) AND NOT isTN2(eInvoice(ed)) DO {
    grossWeightValue(ed) <- NUMERIC[12,6](grossWeightTon(invoiceDetail(ed)));
}

//transportOwnerName 'Владелец автомобиля' = DATA STRING[175] (EInvoice);
overCreate ABSTRACT LIST(EInvoice, Consignment);
overCreate ABSTRACT LIST(EInvoiceDetail, ConsignmentDetail);

hideCreateEInvoice = ABSTRACT BOOLEAN (Consignment);
hideSignAndSendSupplierEDI = ABSTRACT BOOLEAN (Consignment);
hideCancelSignAndSendSupplierEDI = ABSTRACT BOOLEAN (Consignment);
hideSignAndSendBlrapnSupplierEDI = ABSTRACT BOOLEAN (Consignment);

quantityDespatched = ABSTRACT NUMERIC[16,5] (ConsignmentDetail);
lineItemAmount = ABSTRACT NUMERIC[18,4] (ConsignmentDetail);
lineItemAmountCharges = ABSTRACT NUMERIC[18,4] (ConsignmentDetail);
grossWeightValue = ABSTRACT NUMERIC[12,6] (ConsignmentDetail);
despatchUnitQuantityDespatched = ABSTRACT NUMERIC[12,5] (ConsignmentDetail);


beforeCreateEInvoice ABSTRACT (Consignment);
skipCreateEInvoice = DATA LOCAL BOOLEAN ();

createEInvoice 'Создать ЭТТН-1' (Consignment invoice)  { 
    IF NOT eInvoice(invoice) THEN NEWSESSION {
        beforeCreateEInvoice(invoice);
        IF NOT skipCreateEInvoice() THEN {
            NEW ei = EInvoice {
                invoice(ei) <- invoice;
                numberSupplier(ei) <- number(invoice);
                dateSupplier(ei) <- dateTime[Invoice](invoice);
                deliveryNoteDateTime(ei) <- dateTime[Invoice](invoice);
                supplier(ei) <- supplier(invoice);
                supplierStock(ei) <- supplierStock(invoice);
                customer(ei) <- customer(invoice);
                customerStock(ei) <- customerStock(invoice);
                contractName(ei) <- 'Договор поставки';
                contractId(ei) <- seriesNumberContractSku(invoice);
                contractDate(ei) <- dateFromContractSku(invoice);
                currency(ei) <- shortNameCurrency(invoice);
                isTestDocument(ei) <- isTestEInvoice(invoice);
                
                FOR consignment(ConsignmentDetail detail) == invoice NEW ed = EInvoiceDetail  DO {
                    eInvoice(ed) <- ei;
                    invoiceDetail(ed) <- detail;
                    lineItemSign(ed) <- IF isContainer(sku(detail)) THEN 'CONT' ELSE 'PROD';
                    lineItemID(ed) <- OVERRIDE GTIN(sku(detail)) IF length(GTIN(sku(detail))) >7, (id(barcode(sku(detail))) IF length(id(barcode(sku(detail)))) > 7);
                    lineItemSupplierID(ed) <- id(sku(detail));
                    lineItemName(ed) <- STRING[500](replace(replace(nameSku(detail), '\n', ''), '\r', ''));
                    quantityDespatched(ed) <- OVERRIDE quantityDespatched(detail), quantity(detail);
                    valueVAT(ed) <- STRING[7](NUMERIC[6,2](vat(detail)));
                    lineItemPrice(ed) <- NUMERIC[12,2](price(detail));
                    lineItemAmount(ed) <- NUMERIC[18,2](OVERRIDE lineItemAmount(detail), dataSumInvoice(detail));
                    lineItemAmountCharges(ed) <- NUMERIC[18,2](OVERRIDE lineItemAmountCharges(detail), sumVATIaW(detail));
                    lineItemAmountWithoutCharges(ed) <- NUMERIC[18,2](OVERRIDE lineItemAmount(detail), dataSumInvoice(detail)) (-) NUMERIC[18,2](OVERRIDE lineItemAmountCharges(detail), sumVATIaW(detail));
                    grossWeightValue(ed) <- OVERRIDE grossWeightValue(detail), NUMERIC[12,6](grossWeightTon(detail));
                    lineItemQuantityUOM(ed) <- OVERRIDE extraCodeUOM(UOM(sku(detail))), 'PCE';
                    despatchUnitQuantityDespatched(ed) <- OVERRIDE despatchUnitQuantityDespatched(detail), NUMERIC[12,5](packQuantity(detail)), 1.0;
                    overCreate(ed,detail);
                }
                
                overCreate(ei,invoice);

                generateNumber(ei);
            }
            APPLY;
        }
    }
}

createEInvoiceTN2 'Создать ЭТН-2' (Consignment invoice)  { 
    IF NOT eInvoice(invoice) THEN NEWSESSION {
        beforeCreateEInvoice(invoice);
        IF NOT skipCreateEInvoice() THEN {
            NEW ei = EInvoice {
                isTN2(ei) <- TRUE;
                invoice(ei) <- invoice;
                numberSupplier(ei) <- number(invoice);
                dateSupplier(ei) <- dateTime[Invoice](invoice);
                deliveryNoteDateTime(ei) <- dateTime[Invoice](invoice);
                supplier(ei) <- supplier(invoice);
                supplierStock(ei) <- supplierStock(invoice);
                customer(ei) <- customer(invoice);
                customerStock(ei) <- customerStock(invoice);
                contractName(ei) <- 'Договор поставки';
                contractId(ei) <- seriesNumberContractSku(invoice);
                contractDate(ei) <- dateFromContractSku(invoice);
                currency(ei) <- shortNameCurrency(invoice);
                isTestDocument(ei) <- isTestEInvoice(invoice);
                
                FOR consignment(ConsignmentDetail detail) == invoice NEW ed = EInvoiceDetail  DO {
                    eInvoice(ed) <- ei;
                    invoiceDetail(ed) <- detail;
                    lineItemSign(ed) <- IF isContainer(sku(detail)) THEN 'CONT' ELSE 'PROD';
                    lineItemID(ed) <- OVERRIDE GTIN(sku(detail)), (id(barcode(sku(detail))) IF length(id(barcode(sku(detail)))) > 7);
                    lineItemSupplierID(ed) <- id(sku(detail));
                    lineItemName(ed) <- STRING[500](replace(replace(nameSku(detail), '\n', ''), '\r', ''));
                    quantityDespatched(ed) <- OVERRIDE quantityDespatched(detail), quantity(detail);
                    valueVAT(ed) <- STRING[7](NUMERIC[6,2](vat(detail)));
                    lineItemPrice(ed) <- NUMERIC[12,2](price(detail));
                    lineItemAmount(ed) <- NUMERIC[18,2](OVERRIDE lineItemAmount(detail), dataSumInvoice(detail));
                    lineItemAmountCharges(ed) <- NUMERIC[18,2](OVERRIDE lineItemAmountCharges(detail), sumVATIaW(detail));
                    lineItemAmountWithoutCharges(ed) <- NUMERIC[18,2](OVERRIDE lineItemAmount(detail), dataSumInvoice(detail)) (-) NUMERIC[18,2](OVERRIDE lineItemAmountCharges(detail), sumVATIaW(detail));
                    lineItemQuantityUOM(ed) <- OVERRIDE extraCodeUOM(UOM(sku(detail))), 'PCE';
                    overCreate(ed,detail);
                }
                
                overCreate(ei,invoice);

                generateNumber(ei);
            }
            APPLY;
        }
    }
}

UNPfullNamePayer (EInvoice i) = CONCAT ', ', UNP(freightPayer(i)), fullName(freightPayer(i));
UNPfullNameSupplier (EInvoice i) = CONCAT ', ', unpSupplier(i), nameSupplier(i);
addAddressSupplier = ABSTRACT ISTRING[50] (EInvoice);
addressSupplierAddressSupplierStock (EInvoice i) = CONCAT ', ', addressSupplier(i),('погрузка: ' + addressSupplierStock(i)), addAddressSupplier(i);
overNumberDate = ABSTRACT STRING (EInvoice);
numberDate (EInvoice i) = OVERRIDE overNumberDate(i), CONCAT ', ', deliveryNoteNumber(i), toDateDDMMYY(deliveryNoteDateTime(i)), seriesNumber(invoice(i));
infoCustomerBase (EInvoice i) = CONCAT ', ', unpCustomer(i), nameCustomer(i), addressCustomer(i), (CONCAT ' ', contractId(i),contractDate(i)), ('разгрузка: ' + addressCustomerStock(i));

include 'Вкл.' = DATA LOCAL BOOLEAN (EInvoice);
multy  = DATA LOCAL BOOLEAN ();

nameProvider (EInvoice e) = name(EDIProviderInvoice(customer(e), supplier(e)));

FORM EInvoiceConsignment 'РЕЕСТР'
    OBJECTS e = EInvoice  
    PROPERTIES(e)  UNPfullNamePayer, addressFreightPayer, UNPfullNameSupplier, addressSupplierAddressSupplierStock, deliveryNoteDateTime,deliveryNoteNumber,
                   transportContact, waybillId, deliveryContact, transportID, trailerID, numberDate, infoCustomerBase, contactCustomerStock, nameProvider
    PROPERTIES(e) totalAmountWithoutCharges,totalAmountCharges, totalAmount,totalLineItem, totalLineItemQuantity, totalGrossWeight, 
                totalDespatchUnitQuantity, totalAmountExcise, sealIDReceiver
    PROPERTIES multy()
    FILTERS include(e)
;
FORM EInvoiceAttachment 'Приложение'
    OBJECTS e = EInvoice  
    PROPERTIES(e) READONLY deliveryNoteDateTime, deliveryNoteNumber, isTN2
    PROPERTIES multy()
    
    OBJECTS d = EInvoiceDetail
    PROPERTIES(d) READONLY lineItemID, lineItemBuyerID, lineItemName, quantityDespatched, lineItemPrice, lineItemAmountWithoutCharges, valueVAT, 
                   lineItemAmountCharges, lineItemAmount, despatchUnitQuantityDespatched, grossWeightValue
    PROPERTIES shortNameUOMSku = shortName(UOMExtraCode(lineItemQuantityUOM(d)))
    FILTERS eInvoice(d) == e
    FILTERS include(e)
;

hidePrintEInvoice = ABSTRACT BOOLEAN (EInvoice);
hidePrintEInvoice(Invoice i) = hidePrintEInvoice(eInvoice(i));

overPrintEInvoiceAttachment ABSTRACT (Invoice);

printConsignmentEInvoiceAttachment 'Реестр ТТН с приложением' (Invoice i)  { 
    overPrintEInvoiceAttachment(i);
    include(EInvoice e) <- NULL;
    multy() <- NULL;
    include(EInvoice e) <- TRUE WHERE e = eInvoice(i);    
    PRINT EInvoiceConsignment;
    PRINT EInvoiceAttachment;
} IMAGE 'print.png';

printConsignmentEInvoice 'Реестр ТТН' (Invoice i)  { 
    overPrintEInvoiceAttachment(i);
    include(EInvoice e) <- NULL;
    multy() <- NULL;
    include(EInvoice e) <- TRUE WHERE e = eInvoice(i);    
    PRINT EInvoiceConsignment;
} IMAGE 'print.png';

printConsignmentEAttachment 'Приложение' (Invoice i)  { 
    overPrintEInvoiceAttachment(i);
    include(EInvoice e) <- NULL;
    multy() <- NULL;
    include(EInvoice e) <- TRUE WHERE e = eInvoice(i);    
    PRINT EInvoiceAttachment;
} IMAGE 'print.png';

printConsignmentEAttachmentXLSX 'Приложение (xlsx)' (Invoice i)  { 
    overPrintEInvoiceAttachment(i);
    include(EInvoice e) <- NULL;
    multy() <- NULL;
    include(EInvoice e) <- TRUE WHERE e = eInvoice(i);    
    PRINT EInvoiceAttachment XLSX;
} IMAGE 'print.png';



include 'Вкл.' = DATA LOCAL BOOLEAN (Invoice);

printConsignmentEInvoices 'Реестр ТТН (несколько)' ()  { 
    IF NOT ([ GROUP SUM 1 IF [GROUP SUM 1 IF include(Invoice i) BY fromStock(i)](Stock st)]() >1 OR 
            [ GROUP SUM 1 IF [GROUP SUM 1 IF include(Invoice i) BY toStock(i)](Stock st)]()>1 OR 
            [ GROUP SUM 1 IF [GROUP SUM 1 IF include(Invoice i) BY Invoice.date(i)](DATE dt)]()>1)  THEN {
        include(EInvoice e) <- NULL;
        multy() <- TRUE;
        include(EInvoice e) <- TRUE WHERE e = eInvoice(invoice(e)) AND include(invoice(e));    
        
        PRINT EInvoiceConsignment;
        PRINT EInvoiceAttachment;
        include(Invoice i) <- NULL;    
    } ELSE {
        MESSAGE 'Выбраны накладные с разными складами и/или датами';
    }

} IMAGE 'print.png';

@addRoleApplicationSetting(showEditEInvoice, 'Показывать форму редактирования электронной ТТН', BOOLEAN);
showEditEInvoiceCurrent () = showEditEInvoice(mainRole(currentUser()));

editAttributesEInvoice 'Заполнить атрибуты ЭТТН' (Invoice i)  { 
	NEWSESSION {   
	    SHOW eInvoice OBJECTS e = eInvoice(i) DOCKED; 
	}
} IMAGE 'edit.png';
showAttributesEInvoice 'Просмотреть атрибуты ЭТТН' (Invoice i) { 
    NEWSESSION {
        SHOW eInvoice OBJECTS e = eInvoice(i) DOCKED READONLY;
    }
}

hasMessages (EInvoice e) = GROUP SUM 1 IF eInvoice(EInvoiceMessage m) == e; 

META defineInvoiceEinvoice (dumb)
    EXTEND FORM invoices
        PROPERTIES READONLY PANEL numberEInvoice(i)
        PROPERTIES READONLY numberEInvoice = numberEInvoice(i), statusDescription = statusDescription(i) BACKGROUND backgroundStatusDescription(i)
        PROPERTIES(i) createEInvoice SHOWIF (NOT eInvoice(i) AND NOT hideCreateEInvoice(i) AND showTTN1(i)),
                      createEInvoiceTN2 SHOWIF (NOT eInvoice(i) AND NOT hideCreateEInvoice(i) AND showTN2(i)),
                      statusDescription SHOWIF eInvoice(i) PANEL, 
                      signAndSendSupplierEDI SHOWIF (eInvoice(i) AND NOT exportedSupplier(eInvoice(i)) AND NOT hideSignAndSendSupplierEDI(i)), 
                      cancelSignAndSendSupplierEDI SHOWIF (eInvoice(i) AND exportedSupplier(eInvoice(i)) AND hasMessages(eInvoice(i)) AND NOT hideCancelSignAndSendSupplierEDI(i)),
                      signAndSendBlrapnSupplierEDI SHOWIF (eInvoice(i) AND NOT exportedBlrapnSupplier(eInvoice(i)) AND isImportedSupplier(eInvoice(i)) AND NOT hideSignAndSendBlrapnSupplierEDI(i))
        PROPERTIES(i) editAttributesEInvoice SHOWIF (eInvoice(i) AND showEditEInvoiceCurrent() AND NOT exportedSupplier(eInvoice(i))),
                      showAttributesEInvoice SHOWIF (eInvoice(i) AND showEditEInvoiceCurrent() AND exportedSupplier(eInvoice(i)))
        PROPERTIES    editAttributes = editAttributes(i) SHOWIF (eInvoice(i) AND NOT exportedSupplier(eInvoice(i))),
                      showAttributes(i) SHOWIF (eInvoice(i) AND exportedSupplier(eInvoice(i)))
        PROPERTIES(i) SHOWIF (eInvoice(i) AND NOT hidePrintEInvoice(i))
                      printConsignmentEInvoiceAttachment,  printConsignmentEInvoice, 
                      printConsignmentEAttachment, printConsignmentEAttachmentXLSX
    ;
    
    DESIGN invoices {
        printTabScroll {
            NEW tabConsignment{
                type = TABBED;
                MOVE printTab {caption = 'Накладная';};
                NEW eInvoice {
                    caption = 'Электронная накладная';
                    NEW createEI {
                        type = CONTAINERH;
                        MOVE PROPERTY(numberEInvoice(i));
                        MOVE PROPERTY(createEInvoice(i));
                        MOVE PROPERTY(createEInvoiceTN2(i));
                        MOVE PROPERTY(editAttributes);
                        MOVE PROPERTY(showAttributes(i));
                        MOVE PROPERTY(editAttributesEInvoice(i));
                        MOVE PROPERTY(showAttributesEInvoice(i));
                        MOVE PROPERTY(signAndSendSupplierEDI(i));
                        MOVE PROPERTY(cancelSignAndSendSupplierEDI(i));
                        MOVE PROPERTY(signAndSendBlrapnSupplierEDI(i));
                        MOVE PROPERTY(statusDescription(i));
                    }
                    NEW printEI {
                        type = CONTAINERH;
                        MOVE PROPERTY (printConsignmentEInvoiceAttachment(i));
                        MOVE PROPERTY (printConsignmentEInvoice(i));
                        MOVE PROPERTY (printConsignmentEAttachment(i));
                    }
                    NEW exportEI {
                        type = CONTAINERH;
                        MOVE PROPERTY (printConsignmentEAttachmentXLSX(i));
                    }
                }
            }
    }    
    }
END

printConsignmentEInvoiceAttachment 'Реестр ТТН с приложением' (EInvoice i)  { 
    include(EInvoice e) <- NULL;
    multy() <- NULL;
    include(EInvoice e) <- TRUE WHERE e = i;    
    TRY {
        PRINT EInvoiceConsignment;
    }
    CATCH {
        MESSAGE 'Ошибка печати Реестра ТТН. Возможно, номер путевого листа некорректный' NOWAIT;
    }
    PRINT EInvoiceAttachment;
} IMAGE 'print.png';

printConsignmentEInvoice 'Реестр ТТН' (EInvoice i)  { 
    include(EInvoice e) <- NULL;
    multy() <- NULL;
    include(EInvoice e) <- TRUE WHERE e = i;    
    TRY {
        PRINT EInvoiceConsignment;
    }
    CATCH {
        MESSAGE 'Ошибка печати. Возможно, номер путевого листа некорректный' NOWAIT;
    }
} IMAGE 'print.png';

printConsignmentEAttachment 'Приложение' (EInvoice i)  { 
    include(EInvoice e) <- NULL;
    multy() <- NULL;
    include(EInvoice e) <- TRUE WHERE e = i;    
    PRINT EInvoiceAttachment;
} IMAGE 'print.png';

printConsignmentEAttachmentXLSX 'Приложение (xlsx)' (EInvoice i)  { 
    include(EInvoice e) <- NULL;
    multy() <- NULL;
    include(EInvoice e) <- TRUE WHERE e = i;    
    PRINT EInvoiceAttachment XLSX;
} IMAGE 'print.png';


printConsignmentEInvoicesAll 'Реестр ТТН (несколько)' ()  { 
    IF NOT ([ GROUP SUM 1 IF [GROUP SUM 1 IF in(EInvoice i) BY supplierStock(i)](Stock st)]() >1 OR 
            [ GROUP SUM 1 IF [GROUP SUM 1 IF in(EInvoice i) BY customerStock(i)](Stock st)]()>1 OR 
            [ GROUP SUM 1 IF [GROUP SUM 1 IF in(EInvoice i) BY DATE(deliveryNoteDateTime(i))](DATE dt)]()>1)  THEN {
        include(EInvoice e) <- NULL;
        multy() <- TRUE;
        include(EInvoice e) <- TRUE WHERE in(e);    
        
        PRINT EInvoiceConsignment;
        PRINT EInvoiceAttachment;
    } ELSE {
        MESSAGE 'Выбраны накладные с разными складами и/или датами';
    }

} IMAGE 'print.png';

EXTEND FORM eInvoices
    PROPERTIES(e) SHOWIF NOT hidePrintEInvoice(e)
                  printConsignmentEInvoiceAttachment,  printConsignmentEInvoice, 
                  printConsignmentEAttachment, printConsignmentEAttachmentXLSX
    PROPERTIES    printConsignmentEInvoicesAll() SHOWIF ((GROUP SUM 1 IF in(EInvoice iii)) AND NOT hidePrintEInvoice(e))
;

DESIGN eInvoices {
    printEI {
        MOVE PROPERTY (printConsignmentEInvoiceAttachment(e));
        MOVE PROPERTY (printConsignmentEInvoice(e));
        MOVE PROPERTY (printConsignmentEAttachment(e));
        MOVE PROPERTY (printConsignmentEInvoicesAll());
    }
    exportEI {
        MOVE PROPERTY (printConsignmentEAttachmentXLSX(e));
    }
}