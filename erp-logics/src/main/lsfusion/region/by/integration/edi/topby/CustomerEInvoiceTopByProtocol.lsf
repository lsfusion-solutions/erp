MODULE CustomerEInvoiceTopByProtocol;

REQUIRE CustomerEInvoiceEDI, EInvoiceEDITopBy, EDS;

NAMESPACE EDI;

blrwblTestIndicator = DATA LOCAL STRING[1]();
blrwblUserID = DATA LOCAL NESTED STRING[35]();
blrwblDocumentNumber = DATA LOCAL NESTED STRING[35]();
blrwblDeliveryNoteNumber = DATA LOCAL NESTED STRING[70]();
blrwblDateTime = DATA LOCAL NESTED DATETIME();
blrwblDeliveryNoteDate = DATA LOCAL NESTED DATE();
blrwblFunctionCode = DATA LOCAL NESTED STRING[3]();
blrwblContractName = DATA LOCAL NESTED STRING[70]();
blrwblContractID = DATA LOCAL NESTED STRING[70]();
blrwblContractDate = DATA LOCAL NESTED DATE();
blrwblWaybillID = DATA LOCAL NESTED STRING[70]();
GROUP blrwblShipper EXTID 'Shipper' : deliveryNote;
blrwblSupplierGLN = DATA LOCAL NESTED STRING[13]();
blrwblContactSupplier  = DATA LOCAL NESTED STRING[150]();
GROUP blrwblReceiver EXTID 'Receiver' : deliveryNote;
blrwblCustomerGLN = DATA LOCAL NESTED STRING[13]();
GROUP blrwblFreightPayer EXTID 'FreightPayer' : deliveryNote;
blrwblFreightPayerGLN = DATA LOCAL NESTED STRING[13]();
GROUP blrwblShipFrom EXTID 'ShipFrom' : deliveryNote;
blrwblSupplierStockGLN = DATA LOCAL NESTED STRING[13]();
blrwblSupplierStockAddress = DATA LOCAL NESTED STRING[150]();
blrwblContactSupplierStock = DATA LOCAL NESTED STRING[150]();
GROUP blrwblShipTo EXTID 'ShipTo' : deliveryNote;
blrwblCustomerStockGLN = DATA LOCAL NESTED STRING[13]();
GROUP blrwblCarrier EXTID 'Carrier' : deliveryNote;
blrwblTransportContact = DATA LOCAL NESTED STRING[150]();
blrwblDeliveryContact = DATA LOCAL NESTED STRING[150]();
blrwblProxyID = DATA LOCAL NESTED STRING[70]();
blrwblProxyDate = DATA LOCAL NESTED DATE();
blrwblPartyIssuingProxyName = DATA LOCAL NESTED STRING[175]();
blrwblQuantityTrip = DATA LOCAL NESTED STRING[70]();
blrwblTransportOwnerName = DATA LOCAL NESTED STRING[175]();
blrwblTransportID = DATA LOCAL NESTED STRING[35]();
blrwblTrailerID = DATA LOCAL NESTED STRING[35]();
blrwblSealIDReceiver = DATA LOCAL NESTED STRING[35]();
blrwblOrderID = DATA LOCAL NESTED STRING[35]();
blrwblCurrency = DATA LOCAL NESTED STRING[3]();
blrwblFieldName = DATA LOCAL NESTED STRING[255](INTEGER);
blrwblFieldCode = DATA LOCAL NESTED STRING[6](INTEGER);
blrwblFieldValue = DATA LOCAL NESTED STRING[2560](INTEGER);
GROUP blrwblDespatchAdviceLogisticUnitLineItemDeliveryNote EXTID 'DespatchAdviceLogisticUnitLineItem' :deliveryNote;
blrwblLineItemNumber = DATA LOCAL NESTED INTEGER(INTEGER);
blrwblLineItemSign = DATA LOCAL NESTED STRING[4](INTEGER);
blrwblLineItemID = DATA LOCAL NESTED STRING[14](INTEGER);
blrwblLineItemBuyerID = DATA LOCAL NESTED STRING[35](INTEGER);
blrwblDeliveryTypePrev = DATA LOCAL NESTED INTEGER(INTEGER);
blrwblDeliveryNotePrev = DATA LOCAL NESTED STRING[70](INTEGER);
blrwblDeliveryNoteDatePrev = DATA LOCAL NESTED DATETIME(INTEGER);
blrwblDeliveryNotePrevLineID = DATA LOCAL NESTED INTEGER(INTEGER);
blrwblLineItemSupplierID = DATA LOCAL NESTED STRING[35](INTEGER);
blrwblLineItemName = DATA LOCAL NESTED STRING[500](INTEGER);
blrwblGrossWeightValue = DATA LOCAL NESTED NUMERIC[12,6](INTEGER);
blrwblQuantityDespatched = DATA LOCAL NESTED NUMERIC[16,5](INTEGER);
blrwblLineItemQuantityUOM = DATA LOCAL NESTED STRING[3](INTEGER);
blrwblDespatchUnitQuantityDespatched = DATA LOCAL NESTED NUMERIC[12,5](INTEGER);
blrwblExpiryDate = DATA LOCAL NESTED DATE(INTEGER);
blrwblValueVAT = DATA LOCAL NESTED NUMERIC[6,4](INTEGER);
blrwblAdditionalInformation = DATA LOCAL NESTED STRING[512](INTEGER);
blrwblLineItemProductDate = DATA LOCAL NESTED DATE(INTEGER);
blrwblLineItemPrice = DATA LOCAL NESTED NUMERIC[16,4](INTEGER);
blrwblLineItemManufacturerPrice = DATA LOCAL NESTED NUMERIC[16,4](INTEGER);
blrwblLineItemAmountWithoutCharges = DATA LOCAL NESTED NUMERIC[18,4](INTEGER);
blrwblLineItemAmount = DATA LOCAL NESTED NUMERIC[18,4](INTEGER);
blrwblLineItemAmountCharges = DATA LOCAL NESTED NUMERIC[18,4](INTEGER);
blrwblLineItemAmountExcise = DATA LOCAL NESTED NUMERIC[12,5](INTEGER);
blrwblLineItemLineItemIdentification = DATA LOCAL NESTED INTEGER(INTEGER);
GROUP blrwblLineItemIdentification EXTID 'LineItemIdentification';
blrwblGroupPackingCodeMark = DATA LOCAL NESTED STRING[130](INTEGER);
blrwblUpperLevelCodeMark = DATA LOCAL NESTED STRING[130](INTEGER);
blrwblFieldCodeMark = DATA LOCAL NESTED STRING[130000](INTEGER);
blrwblLineItemLineItemExtraField = DATA LOCAL NESTED INTEGER(INTEGER);
blrwblLineItemFieldName = DATA LOCAL NESTED STRING[255](INTEGER);
blrwblLineItemFieldCode = DATA LOCAL NESTED STRING[6](INTEGER);
blrwblLineItemFieldValue = DATA LOCAL NESTED STRING[2560](INTEGER);

FORM blrwbl
    PROPERTIES IN messageHeader blrwblTestIndicator() EXTID 'TestIndicator',
                                blrwblUserID() EXTID 'UserID'
    PROPERTIES IN deliveryNote blrwblDocumentNumber() EXTID 'DocumentID',
                               blrwblDeliveryNoteNumber() EXTID 'DeliveryNoteID',
                               blrwblDeliveryNoteDate() EXTID 'DeliveryNoteDate',
                               blrwblDateTime() EXTID 'CreationDateTime',
                               blrwblFunctionCode() EXTID 'FunctionCode',
                               blrwblContractName() EXTID 'ContractName',
                               blrwblContractID() EXTID 'ContractID',
                               blrwblContractDate() EXTID 'ContractDate',
                               blrwblWaybillID() EXTID 'WaybillID',
                               blrwblQuantityTrip() EXTID 'QuantityTrip',
                               blrwblTransportOwnerName() EXTID 'TransportOwnerName',
                               blrwblTransportID() EXTID 'TransportID',
                               blrwblTrailerID() EXTID 'TrailerID',
                               blrwblSealIDReceiver() EXTID 'SealID',
                               blrwblOrderID() EXTID 'OrderID',
                               blrwblCurrency() EXTID 'Currency'
    PROPERTIES IN blrwblShipper blrwblSupplierGLN() EXTID 'GLN',
                                blrwblContactSupplier() EXTID 'Contact'
    PROPERTIES IN blrwblReceiver blrwblCustomerGLN() EXTID 'GLN'
    PROPERTIES IN blrwblFreightPayer blrwblFreightPayerGLN() EXTID 'GLN'
    PROPERTIES IN blrwblShipFrom blrwblSupplierStockGLN() EXTID 'GLN',
                                 blrwblSupplierStockAddress() EXTID 'Address',
                                 blrwblContactSupplierStock() EXTID 'Contact'
    PROPERTIES IN blrwblShipTo blrwblCustomerStockGLN() EXTID 'GLN'
    PROPERTIES IN blrwblCarrier blrwblTransportContact() EXTID 'TransportContact',
                                blrwblDeliveryContact() EXTID 'DeliveryContact',
                                blrwblProxyID() EXTID 'ProxyID',
                                blrwblProxyDate() EXTID 'ProxyDate',
                                blrwblPartyIssuingProxyName() EXTID 'PartyIssuingProxyName'
    
    OBJECTS e = INTEGER EXTID 'ExtraField' IN deliveryNote
    PROPERTIES(e) blrwblFieldName EXTID 'FieldName',
                  blrwblFieldCode EXTID 'FieldCode',
                  blrwblFieldValue EXTID 'FieldValue'
    
    OBJECTS i = INTEGER EXTID 'LineItem' IN blrwblDespatchAdviceLogisticUnitLineItemDeliveryNote
    PROPERTIES(i) blrwblLineItemNumber EXTID 'LineItemNumber',
                  blrwblLineItemSign EXTID 'LineItemSign',
                  blrwblLineItemID EXTID 'LineItemID',
                  blrwblLineItemBuyerID EXTID 'LineItemBuyerID',
                  blrwblDeliveryTypePrev EXTID 'DeliveryTypePrev',
                  blrwblDeliveryNotePrev EXTID 'DeliveryNotePrev',
                  blrwblDeliveryNoteDatePrev EXTID 'DeliveryNoteDatePrev',
                  blrwblDeliveryNotePrevLineID EXTID 'DeliveryNotePrevLineID',
                  blrwblLineItemSupplierID EXTID 'LineItemSupplierID',
                  blrwblLineItemName EXTID 'LineItemName',
                  blrwblGrossWeightValue EXTID 'GrossWeightValue',
                  blrwblQuantityDespatched EXTID 'QuantityDespatched',
                  blrwblLineItemQuantityUOM EXTID 'LineItemQuantityUOM',
                  blrwblDespatchUnitQuantityDespatched EXTID 'DespatchUnitQuantityDespatched',
                  blrwblExpiryDate EXTID 'BestBeforeDate',
                  blrwblValueVAT EXTID 'TaxRate',
                  blrwblAdditionalInformation EXTID 'AdditionalInformation',
                  blrwblLineItemProductDate EXTID 'LineItemProductDate',
                  blrwblLineItemPrice EXTID 'LineItemPrice',
                  blrwblLineItemManufacturerPrice EXTID 'LineItemManufacturerPrice',
                  blrwblLineItemAmountWithoutCharges EXTID 'LineItemAmountWithoutCharges',
                  blrwblLineItemAmount EXTID 'LineItemAmount',
                  blrwblLineItemAmountCharges EXTID 'LineItemAmountCharges',
                  blrwblLineItemAmountExcise EXTID 'LineItemAmountExcise'
    OBJECTS d = INTEGER EXTID 'GroupPackingHeader' IN blrwblLineItemIdentification
    PROPERTIES(d) blrwblGroupPackingCodeMark EXTID 'GroupPackingCodeMark',
                  blrwblUpperLevelCodeMark EXTID 'UpperLevelCodeMark'
    PROPERTIES(i) IN blrwblLineItemIdentification blrwblFieldCodeMark EXTID 'FieldCodeMark'
    FILTERS blrwblLineItemLineItemIdentification(d) == i
    OBJECTS f = INTEGER EXTID 'LineItemExtraField'
    PROPERTIES(f) blrwblLineItemFieldName EXTID 'FieldName',
                  blrwblLineItemFieldCode EXTID 'FieldCode',
                  blrwblLineItemFieldValue EXTID 'FieldValue'
    FILTERS blrwblLineItemLineItemExtraField(f) == i
;

overImportBlrwbl ABSTRACT ();
skipBlrwbl = DATA LOCAL NESTED BOOLEAN();
overCreateEInvoiceBlrwbl ABSTRACT LIST (EInvoice);

overReceiveMessages(INTEGER i, STRING[100] login, STRING[100] password, TEXT url, STRING[100] archiveDir, BOOLEAN disableConfirmation, BOOLEAN receiveSupplierMessages, BOOLEAN sendReplies, STRING[100] provider) + {
    IF lower(documentType(i)) == 'blrwbl' THEN {
        TRY {
            IMPORT blrwbl XML FROM data(i);
            skipBlrwbl() <- NULL;
            overImportBlrwbl();
            IF NOT skipBlrwbl() THEN {
                NEWSESSION NESTED LOCAL {
                    LOCAL isCancel = BOOLEAN();
                    isCancel() <- TRUE IF blrwblFunctionCode() == '1';
                    FOR EInvoice ei = eInvoiceDeliveryNoteNumber(blrwblDeliveryNoteNumber()) DO {
                        importedCustomer(ei) <- TRUE ;
                        IF isCancel() THEN {
                            isCancel(ei) <- TRUE ;
                            numberSupplierCancel(ei) <- blrwblDocumentNumber();
                            dateSupplierCancel(ei) <- blrwblDateTime();
                            exportedCustomer(ei) <- NULL;
                            exportedNoticeCustomer(ei) <- NULL;
                            exportedBlrapnCustomer(ei) <- NULL;
                        } ELSE {
                            numberSupplier(ei) <- blrwblDocumentNumber();
                            dateSupplier(ei) <- blrwblDateTime();
                        }
                    } ELSE NEW ei = EInvoice {
                        importedCustomer(ei) <- TRUE;
                        isTestDocument(ei) <- TRUE IF blrwblTestIndicator() == '1';
                        id(ei) <- blrwblSupplierGLN() + '/' + blrwblDeliveryNoteNumber() + (IF isCancel() THEN '_cancel' ELSE '');
                        numberSupplier(ei) <- blrwblDocumentNumber() IF NOT isCancel();
                        dateSupplier(ei) <- blrwblDateTime() IF NOT isCancel();
                        numberSupplierCancel(ei) <- blrwblDocumentNumber() IF isCancel();
                        dateSupplierCancel(ei) <- blrwblDateTime() IF isCancel();
                        deliveryNoteDateTime(ei) <- DATETIME (blrwblDeliveryNoteDate());
                        deliveryNoteNumber(ei) <- blrwblDeliveryNoteNumber();
                        contractName(ei) <- blrwblContractName();
                        contractId(ei) <- blrwblContractID();
                        contractDate(ei) <- blrwblContractDate();
                        waybillId(ei) <- blrwblWaybillID();
                        isCancel(ei) <- isCancel();
                        supplier(ei) <- legalEntityGLN(blrwblSupplierGLN());
                        contactSupplier(ei) <- blrwblContactSupplier();
                        supplierStock(ei) <- stockGLNUserID(blrwblSupplierStockGLN(), (OVERRIDE getWord(blrwblUserID(),'-',2), ''));
                        contactSupplierStock(ei) <- blrwblContactSupplierStock();
                        customer(ei) <- legalEntityGLN(blrwblCustomerGLN());
                        customerStock(ei) <- companyStockGLN(blrwblCustomerStockGLN());
                        freightPayer(ei) <- legalEntityGLN(blrwblFreightPayerGLN());
                        transportContact(ei) <- blrwblTransportContact();
                        deliveryContact(ei) <- blrwblDeliveryContact();
                        proxyID(ei) <- blrwblProxyID();
                        proxyDate(ei) <- blrwblProxyDate();
                        partyIssuingProxyName(ei) <- blrwblPartyIssuingProxyName();
                        quantityTrip(ei) <- blrwblQuantityTrip();
                        transportOwnerName(ei) <- blrwblTransportOwnerName();
                        transportID(ei) <- blrwblTransportID();
                        trailerID(ei) <- blrwblTrailerID();
                        sealIDReceiver(ei) <- blrwblSealIDReceiver();
                        orderID(ei) <- blrwblOrderID();
                        currency(ei) <- blrwblCurrency();
                        isReturn(ei) <- TRUE IF (GROUP SUM 1 IF blrwblFieldCode(INTEGER e) == 'PW0013' AND blrwblFieldValue(e) == '1');
                        replaceNumber(ei) <- STRING[70](GROUP MAX blrwblFieldValue(INTEGER e) IF blrwblFieldCode(e) == 'PW0014');
                        overCreateEInvoiceBlrwbl(ei);
                        XMLPath(ei) <- archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                        FOR blrwblLineItemID(INTEGER l) OR blrwblLineItemBuyerID(l) OR blrwblLineItemSupplierID(l) ORDER blrwblLineItemNumber(l) DO NEW ed = EInvoiceDetail {
                            eInvoice(ed) <- ei;
                            id(ed) <- id(ei) + '/' + blrwblLineItemNumber(l);
                            dataIndex(ed) <- blrwblLineItemNumber(l);
                            lineItemSign(ed) <- blrwblLineItemSign(l);
                            lineItemID(ed) <- blrwblLineItemID(l);
                            lineItemBuyerID(ed) <- blrwblLineItemBuyerID(l);
                            deliveryTypePrev(ed) <- blrwblDeliveryTypePrev(l);
                            deliveryNotePrev(ed) <- blrwblDeliveryNotePrev(l);
                            deliveryNoteDatePrev(ed) <- blrwblDeliveryNoteDatePrev(l);
                            deliveryNotePrevLineID(ed) <- blrwblDeliveryNotePrevLineID(l);
                            lineItemSupplierID(ed) <- blrwblLineItemSupplierID(l);
                            lineItemName(ed) <- blrwblLineItemName(l);
                            grossWeightValue(ed) <- blrwblGrossWeightValue(l);
                            quantityDespatched(ed) <- blrwblQuantityDespatched(l);
                            lineItemQuantityUOM(ed) <- blrwblLineItemQuantityUOM(l);
                            despatchUnitQuantityDespatched(ed) <- blrwblDespatchUnitQuantityDespatched(l);
                            expiryDate(ed) <- blrwblExpiryDate(l);
                            valueVAT(ed) <- NUMERIC[4,2](blrwblValueVAT(l));
                            additionalInformation(ed) <- blrwblAdditionalInformation(l);
                            manufactureDate(ed) <- blrwblLineItemProductDate(l);
                            lineItemPrice(ed) <- blrwblLineItemPrice(l);
                            lineItemManufacturerPrice(ed) <- blrwblLineItemManufacturerPrice(l);
                            lineItemAmountWithoutCharges(ed) <- blrwblLineItemAmountWithoutCharges(l);
                            lineItemAmount(ed) <- blrwblLineItemAmount(l);
                            lineItemAmountCharges(ed) <- blrwblLineItemAmountCharges(l);
                            lineItemAmountExcise(ed) <- blrwblLineItemAmountExcise(l);
                            groupPackingCodeMark(ed, INTEGER j) <- blrwblGroupPackingCodeMark(j) WHERE blrwblLineItemLineItemIdentification(j) == l;
                            upperLevelCodeMark(ed, INTEGER j) <- blrwblUpperLevelCodeMark(j) WHERE blrwblLineItemLineItemIdentification(j) == l;
                            fieldCodeMark(ed) <- blrwblFieldCodeMark(l);
                            lineItemExtraFields(ed) <- GROUP CONCAT (CONCAT ': ', blrwblLineItemFieldName(INTEGER f), blrwblLineItemFieldValue(f)) IF blrwblLineItemLineItemExtraField(f) == l, ', ' ORDER blrwblLineItemFieldName(f);
                        }
                    }
                    APPLY NESTED LOCAL;
                    IF canceled() THEN {
                        IF NOT disableConfirmation AND sendReplies THEN {
                            LOCAL contentSubXML = FILE();
                            EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = messageDocumentNumber(), code = '1450', description = applyMessage() XML TO contentSubXML;
                            fileToString(contentSubXML());
                            encodeBase64(resultString());
                            LOCAL xml = XMLFILE();
                            envelopeLogin() <- login;
                            envelopePassword() <- password;
                            envelopeDocumentDate() <- currentDateTime();
                            envelopeDocumentNumber() <- id(i);
                            envelopeDocumentType() <- 'SYSTEMMESSAGE';
                            envelopeContent() <- encodedBase64();
                            EXPORT envelope XML TO xml;
                            sendRequestEDI(url, xml());
                            logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) +' request sent');
                            importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                            IF requestError() THEN {
                                sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                                logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ': ' + requestError());
                                MESSAGE provider + ' (' + login + ') Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
                            } ELSE {
                                logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ' request succeeded');
                            }
                        }
                        logToFile('edi', provider + ' (' + login + ') Import EInvoice ' + id(i) + ' failed: ' + applyMessage());
                        eInvoicesFailed() <- eInvoicesFailed() + 1;
                    } ELSE {
                        FOR EInvoice ei == eInvoiceDeliveryNoteNumber(blrwblDeliveryNoteNumber()) DO {
                            IF NOT disableAutoBlrapn() THEN {
                                LOCAL contentSubXML = FILE();
                                blrapnDateTime() <- currentDateTimeMillis();
                                blrapnMsgSender() <- glnCustomer(ei);
                                blrapnMsgReceiver() <- glnSupplier(ei);
                                blrapnUserID() <- userIDSupplierStock(ei);
                                blrapnDeliveryNoteId() <- deliveryNoteNumber(ei);
                                blrapnDeliveryNoteDate() <- DATE(deliveryNoteDateTime(ei));
                                blrapnReferenceDocumentType() <- 'BLRWBL';
                                blrapnReferenceDocumentId() <- blrwblDocumentNumber();
                                blrapnReferenceDocumentDate() <- blrwblDateTime();
                                blrapnShipper() <- glnSupplier(ei);
                                blrapnReceiver() <- glnCustomer(ei);
                                blrapnCode() <- '2650';
                                blrapnDescription() <- NULL;
                                toMilliseconds(blrapnDateTime());
                                EXPORT exportBlrapn XML TO contentSubXML;
                                IF archiveDir THEN {
                                    TRY{ mkdir(archiveDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd')); }
                                    WRITE contentSubXML() TO archiveDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                                }
                                IF EDSServiceCustomer(provider,ei) THEN {
                                    getSignedDocumentCustomer(provider, ei, contentSubXML(), NULL);
                                    IF signError() THEN {
                                        logToFile('edi', provider + ' (' + login + ') Import EInvoice ' + id(i) + ' error: BLRAPN ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError());
                                    }
                                    ELSE IF signResult() THEN {
                                        LOCAL ixml = XMLFILE();
                                        envelopeLogin() <- login;
                                        envelopePassword() <- password;
                                        envelopeFilename() <- CONCAT '', 'invoice', deliveryNoteNumber(ei);
                                        envelopeDocumentDate() <- blrapnDateTime();
                                        envelopeDocumentNumber() <- numberSupplier(ei);
                                        envelopeSender() <- glnCustomer(ei);
                                        envelopeReceiver() <- glnCustomer(ei);
                                        envelopeDeliveryPoint() <- glnCustomerStock(ei);
                                        envelopeDocumentType() <- 'BLRAPN';                                        
                                        envelopeContent() <- signResult();
                                        EXPORT envelope XML TO ixml;
                                        sendRequestEDI(url, ixml());
                                        logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice ' + deliveryNoteNumber(ei) +' request sent');
                                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                                        IF requestError() THEN {
                                            logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice ' + deliveryNoteNumber(ei) + ': ' + requestError());
                                            MESSAGE provider + ' (' + login + ') Извещение о прочтении накладной ' + deliveryNoteNumber(ei) + ' не выгружено: ' + requestError() NOWAIT;
                                        } ELSE {
                                            logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice ' + deliveryNoteNumber(ei) + ' request succeeded');
                                            IF NOT disableConfirmation THEN {
                                                LOCAL cxml = XMLFILE();
                                                EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO cxml;
                                                sendRequestEDI(url, cxml());
                                                logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request sent');
                                                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                                                IF requestError() THEN {
                                                    logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                                                    MESSAGE provider + ' (' + login + ') Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                                                } ELSE {
                                                    logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                                                }
                                            }
                                            logToFile('edi', provider + ' (' + login + ') Import EInvoice ' + id(i) + ' succeeded');
                                            eInvoicesSucceeded() <- eInvoicesSucceeded() + 1;
                                            NEWSESSION NESTED LOCAL {
                                                exportedBlrapnCustomer(ei) <- TRUE;
                                                NEW em = EInvoiceMessage {
                                                    number(em) <- STRING[35](resultMilliseconds());
                                                    eInvoice(em) <- ei;
                                                    dateTime(em) <- blrapnDateTime();
                                                    code(em) <- blrapnCode();
                                                    kind(em) <- EInvoiceMessageKind.out;
                                                    type(em) <- EInvoiceMessageType.blrapn_blrwbl;
                                                    XMLPath(em) <- archiveDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                                                }
                                                APPLY NESTED LOCAL;
                                            }
                                        }
                                    }
                                } ELSE {
                                    logToFile('edi', provider + ' (' + login + ') Import EInvoice ' + id(i) + ' error: не заданы параметры EDSService');
                                }
                            } ELSE {
                                IF NOT disableConfirmation THEN {
                                    LOCAL cxml = XMLFILE();
                                    EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO cxml;
                                    sendRequestEDI(url, cxml());
                                    logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request sent');
                                    importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                                    IF requestError() THEN {
                                        logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                                        MESSAGE provider + ' (' + login + ') Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                                    } ELSE {
                                        logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                                    }
                                }
                                logToFile('edi', provider + ' (' + login + ') Import EInvoice ' + id(i) + ' succeeded');
                                eInvoicesSucceeded() <- eInvoicesSucceeded() + 1;
                            }
                        }
                    }  
                }
            }
        } CATCH {
            IF NOT disableConfirmation AND sendReplies THEN {
                LOCAL contentSubXML = FILE();
                EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = messageDocumentNumber(), code = '1450', description = (CONCAT '\n', provider + ' (' + login + ') Parse EInvoice ' + id(i) + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException()) XML TO contentSubXML;
                fileToString(contentSubXML());
                encodeBase64(resultString());
                LOCAL xml = XMLFILE();
                envelopeLogin() <- login;
                envelopePassword() <- password;
                envelopeDocumentDate() <- currentDateTime();
                envelopeDocumentNumber() <- id(i);
                envelopeDocumentType() <- 'SYSTEMMESSAGE';
                envelopeContent() <- encodedBase64();
                EXPORT envelope XML TO xml;
                sendRequestEDI(url, xml());
                logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) +' request sent');
                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                IF requestError() THEN {
                    sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                    logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ': ' + requestError());
                    MESSAGE provider + ' (' + login + ') Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
                } ELSE {
                    logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ' request succeeded');
                }
            }
            logToFile('edi', CONCAT '\n', provider + ' (' + login + ') Parse EInvoice ' + id(i) + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE 'Ошибка при импорте накладной ' + id(i) +'. Обратитесь к администратору' NOWAIT;
            eInvoicesFailed() <- eInvoicesFailed() + 1;
        }
    }
}

blrdlnTestIndicator = DATA LOCAL STRING[1]();
blrdlnUserID = DATA LOCAL NESTED STRING[35]();
blrdlnDocumentNumber = DATA LOCAL NESTED STRING[35]();
blrdlnDeliveryNoteNumber = DATA LOCAL NESTED STRING[70]();
blrdlnDateTime = DATA LOCAL NESTED DATETIME();
blrdlnDeliveryNoteDate = DATA LOCAL NESTED DATE();
blrdlnFunctionCode = DATA LOCAL NESTED STRING[3]();
blrdlnContractName = DATA LOCAL NESTED STRING[70]();
blrdlnContractID = DATA LOCAL NESTED STRING[70]();
blrdlnContractDate = DATA LOCAL NESTED DATE();
GROUP blrdlnShipper EXTID 'Shipper' : deliveryNote;
blrdlnSupplierGLN = DATA LOCAL NESTED STRING[13]();
blrdlnContactSupplier  = DATA LOCAL NESTED STRING[150]();
GROUP blrdlnReceiver EXTID 'Receiver' : deliveryNote;
blrdlnCustomerGLN = DATA LOCAL NESTED STRING[13]();
GROUP blrdlnShipFrom EXTID 'ShipFrom' : deliveryNote;
blrdlnSupplierStockGLN = DATA LOCAL NESTED STRING[13]();
blrdlnSupplierStockAddress = DATA LOCAL NESTED STRING[150]();
blrdlnContactSupplierStock = DATA LOCAL NESTED STRING[150]();
GROUP blrdlnShipTo EXTID 'ShipTo' : deliveryNote;
blrdlnCustomerStockGLN = DATA LOCAL NESTED STRING[13]();
GROUP blrdlnCarrier EXTID 'Carrier' : deliveryNote;
blrdlnDeliveryContact = DATA LOCAL NESTED STRING[150]();
blrdlnProxyID = DATA LOCAL NESTED STRING[70]();
blrdlnProxyDate = DATA LOCAL NESTED DATE();
blrdlnPartyIssuingProxyName = DATA LOCAL NESTED STRING[175]();
blrdlnOrderID = DATA LOCAL NESTED STRING[35]();
blrdlnCurrency = DATA LOCAL NESTED STRING[3]();
blrdlnFieldName = DATA LOCAL NESTED STRING[255](INTEGER);
blrdlnFieldCode = DATA LOCAL NESTED STRING[6](INTEGER);
blrdlnFieldValue = DATA LOCAL NESTED STRING[2560](INTEGER);
GROUP blrdlnDespatchAdviceLogisticUnitLineItemDeliveryNote EXTID 'DespatchAdviceLogisticUnitLineItem' :deliveryNote;
blrdlnLineItemNumber = DATA LOCAL NESTED INTEGER(INTEGER);
blrdlnLineItemSign = DATA LOCAL NESTED STRING[4](INTEGER);
blrdlnLineItemID = DATA LOCAL NESTED STRING[14](INTEGER);
blrdlnLineItemBuyerID = DATA LOCAL NESTED STRING[35](INTEGER);
blrdlnDeliveryTypePrev = DATA LOCAL NESTED INTEGER(INTEGER);
blrdlnDeliveryNotePrev = DATA LOCAL NESTED STRING[70](INTEGER);
blrdlnDeliveryNoteDatePrev = DATA LOCAL NESTED DATETIME(INTEGER);
blrdlnDeliveryNotePrevLineID = DATA LOCAL NESTED INTEGER(INTEGER);
blrdlnLineItemSupplierID = DATA LOCAL NESTED STRING[35](INTEGER);
blrdlnLineItemName = DATA LOCAL NESTED STRING[500](INTEGER);
blrdlnQuantityDespatched = DATA LOCAL NESTED NUMERIC[16,5](INTEGER);
blrdlnLineItemQuantityUOM = DATA LOCAL NESTED STRING[3](INTEGER);
blrdlnExpiryDate = DATA LOCAL NESTED DATE(INTEGER);
blrdlnValueVAT = DATA LOCAL NESTED NUMERIC[6,4](INTEGER);
blrdlnAdditionalInformation = DATA LOCAL NESTED STRING[512](INTEGER);
blrdlnLineItemProductDate = DATA LOCAL NESTED DATE(INTEGER);
blrdlnLineItemPrice = DATA LOCAL NESTED NUMERIC[16,4](INTEGER);
blrdlnLineItemManufacturerPrice = DATA LOCAL NESTED NUMERIC[16,4](INTEGER);
blrdlnLineItemAmountWithoutCharges = DATA LOCAL NESTED NUMERIC[18,4](INTEGER);
blrdlnLineItemAmount = DATA LOCAL NESTED NUMERIC[18,4](INTEGER);
blrdlnLineItemAmountCharges = DATA LOCAL NESTED NUMERIC[18,4](INTEGER);
blrdlnLineItemAmountExcise = DATA LOCAL NESTED NUMERIC[12,5](INTEGER);
blrdlnLineItemLineItemIdentification = DATA LOCAL NESTED INTEGER(INTEGER);
GROUP blrdlnLineItemIdentification EXTID 'LineItemIdentification';
blrdlnGroupPackingCodeMark = DATA LOCAL NESTED STRING[130](INTEGER);
blrdlnUpperLevelCodeMark = DATA LOCAL NESTED STRING[130](INTEGER);
blrdlnFieldCodeMark = DATA LOCAL NESTED STRING[130000](INTEGER);
blrdlnLineItemLineItemExtraField = DATA LOCAL NESTED INTEGER(INTEGER);
blrdlnLineItemFieldName = DATA LOCAL NESTED STRING[255](INTEGER);
blrdlnLineItemFieldCode = DATA LOCAL NESTED STRING[6](INTEGER);
blrdlnLineItemFieldValue = DATA LOCAL NESTED STRING[2560](INTEGER);

FORM blrdln
    PROPERTIES IN messageHeader blrdlnTestIndicator() EXTID 'TestIndicator',
                                blrdlnUserID() EXTID 'UserID'
    PROPERTIES IN deliveryNote blrdlnDocumentNumber() EXTID 'DocumentID',
                               blrdlnDeliveryNoteNumber() EXTID 'DeliveryNoteID',
                               blrdlnDeliveryNoteDate() EXTID 'DeliveryNoteDate',
                               blrdlnDateTime() EXTID 'CreationDateTime',
                               blrdlnFunctionCode() EXTID 'FunctionCode',
                               blrdlnContractName() EXTID 'ContractName',
                               blrdlnContractID() EXTID 'ContractID',
                               blrdlnContractDate() EXTID 'ContractDate',
                               blrdlnOrderID() EXTID 'OrderID',
                               blrdlnCurrency() EXTID 'Currency'
    PROPERTIES IN blrdlnShipper blrdlnSupplierGLN() EXTID 'GLN',
                                blrdlnContactSupplier() EXTID 'Contact'
    PROPERTIES IN blrdlnReceiver blrdlnCustomerGLN() EXTID 'GLN'
    PROPERTIES IN blrdlnShipFrom blrdlnSupplierStockGLN() EXTID 'GLN',
                                 blrdlnSupplierStockAddress() EXTID 'Address',
                                 blrdlnContactSupplierStock() EXTID 'Contact'
    PROPERTIES IN blrdlnShipTo blrdlnCustomerStockGLN() EXTID 'GLN'
    PROPERTIES IN blrdlnCarrier blrdlnDeliveryContact() EXTID 'DeliveryContact',
                                blrdlnProxyID() EXTID 'ProxyID',
                                blrdlnProxyDate() EXTID 'ProxyDate',
                                blrdlnPartyIssuingProxyName() EXTID 'PartyIssuingProxyName'
    
    OBJECTS e = INTEGER EXTID 'ExtraField' IN deliveryNote
    PROPERTIES(e) blrdlnFieldName EXTID 'FieldName',
                  blrdlnFieldCode EXTID 'FieldCode',
                  blrdlnFieldValue EXTID 'FieldValue'
    
    OBJECTS i = INTEGER EXTID 'LineItem' IN blrdlnDespatchAdviceLogisticUnitLineItemDeliveryNote
    PROPERTIES(i) blrdlnLineItemNumber EXTID 'LineItemNumber',
                  blrdlnLineItemSign EXTID 'LineItemSign',
                  blrdlnLineItemID EXTID 'LineItemID',
                  blrdlnLineItemBuyerID EXTID 'LineItemBuyerID',
                  blrdlnDeliveryTypePrev EXTID 'DeliveryTypePrev',
                  blrdlnDeliveryNotePrev EXTID 'DeliveryNotePrev',
                  blrdlnDeliveryNoteDatePrev EXTID 'DeliveryNoteDatePrev',
                  blrdlnDeliveryNotePrevLineID EXTID 'DeliveryNotePrevLineID',
                  blrdlnLineItemSupplierID EXTID 'LineItemSupplierID',
                  blrdlnLineItemName EXTID 'LineItemName',
                  blrdlnQuantityDespatched EXTID 'QuantityDespatched',
                  blrdlnLineItemQuantityUOM EXTID 'LineItemQuantityUOM',
                  blrdlnExpiryDate EXTID 'BestBeforeDate',
                  blrdlnValueVAT EXTID 'TaxRate',
                  blrdlnAdditionalInformation EXTID 'AdditionalInformation',
                  blrdlnLineItemProductDate EXTID 'LineItemProductDate',
                  blrdlnLineItemPrice EXTID 'LineItemPrice',
                  blrdlnLineItemManufacturerPrice EXTID 'LineItemManufacturerPrice',
                  blrdlnLineItemAmountWithoutCharges EXTID 'LineItemAmountWithoutCharges',
                  blrdlnLineItemAmount EXTID 'LineItemAmount',
                  blrdlnLineItemAmountCharges EXTID 'LineItemAmountCharges',
                  blrdlnLineItemAmountExcise EXTID 'LineItemAmountExcise'
    OBJECTS d = INTEGER EXTID 'GroupPackingHeader' IN blrdlnLineItemIdentification
    PROPERTIES(d) blrdlnGroupPackingCodeMark EXTID 'GroupPackingCodeMark',
                  blrdlnUpperLevelCodeMark EXTID 'UpperLevelCodeMark'
    PROPERTIES(i) IN blrdlnLineItemIdentification blrdlnFieldCodeMark EXTID 'FieldCodeMark'
    FILTERS blrdlnLineItemLineItemIdentification(d) == i
    OBJECTS f = INTEGER EXTID 'LineItemExtraField'
    PROPERTIES(f) blrdlnLineItemFieldName EXTID 'FieldName',
                  blrdlnLineItemFieldCode EXTID 'FieldCode',
                  blrdlnLineItemFieldValue EXTID 'FieldValue'
    FILTERS blrdlnLineItemLineItemExtraField(f) == i
;

overImportBlrdln ABSTRACT ();
skipBlrdln = DATA LOCAL NESTED BOOLEAN();
overCreateEInvoiceBlrdln ABSTRACT LIST (EInvoice);

overReceiveMessages(INTEGER i, STRING[100] login, STRING[100] password, TEXT url, STRING[100] archiveDir, BOOLEAN disableConfirmation, BOOLEAN receiveSupplierMessages, BOOLEAN sendReplies, STRING[100] provider) + {
    IF lower(documentType(i)) == 'blrdln' THEN {
        TRY {
            IMPORT blrdln XML FROM data(i);
            skipBlrdln() <- NULL;
            overImportBlrdln();
            IF NOT skipBlrdln() THEN {
                NEWSESSION NESTED LOCAL {
                    LOCAL isCancel = BOOLEAN();
                    isCancel() <- TRUE IF blrdlnFunctionCode() == '1';
                    FOR EInvoice ei == eInvoiceDeliveryNoteNumber(blrdlnDeliveryNoteNumber()) DO {
                        importedCustomer(ei) <- TRUE;
                        IF isCancel() THEN {
                            isCancel(ei) <- TRUE;
                            numberSupplierCancel(ei) <- blrdlnDocumentNumber();
                            dateSupplierCancel(ei) <- blrdlnDateTime();
                            exportedCustomer(ei) <- NULL;
                            exportedNoticeCustomer(ei) <- NULL;
                            exportedBlrapnCustomer(ei) <- NULL;
                        } ELSE {
                            numberSupplier(ei) <- blrdlnDocumentNumber();
                            dateSupplier(ei) <- blrdlnDateTime();
                        }
                    } ELSE NEW ei = EInvoice {
                        importedCustomer(ei) <- TRUE;
                        isTestDocument(ei) <- TRUE IF blrdlnTestIndicator() == '1';
                        isTN2(ei) <- TRUE;
                        id(ei) <- blrdlnSupplierGLN() + '/' + blrdlnDeliveryNoteNumber() + (IF isCancel() THEN '_cancel' ELSE '');
                        numberSupplier(ei) <- blrdlnDocumentNumber() IF NOT isCancel();
                        dateSupplier(ei) <- blrdlnDateTime() IF NOT isCancel();
                        numberSupplierCancel(ei) <- blrdlnDocumentNumber() IF isCancel();
                        dateSupplierCancel(ei) <- blrdlnDateTime() IF isCancel();
                        deliveryNoteDateTime(ei) <- DATETIME (blrdlnDeliveryNoteDate());
                        deliveryNoteNumber(ei) <- blrdlnDeliveryNoteNumber();
                        contractName(ei) <- blrdlnContractName();
                        contractId(ei) <- blrdlnContractID();
                        contractDate(ei) <- blrdlnContractDate();
                        isCancel(ei) <- isCancel();
                        supplier(ei) <- legalEntityGLN(blrdlnSupplierGLN());
                        contactSupplier(ei) <- blrdlnContactSupplier();
                        supplierStock(ei) <- stockGLNUserID(blrdlnSupplierStockGLN(), (OVERRIDE getWord(blrdlnUserID(),'-',2), ''));
                        contactSupplierStock(ei) <- blrdlnContactSupplierStock();
                        customer(ei) <- legalEntityGLN(blrdlnCustomerGLN());
                        customerStock(ei) <- companyStockGLN(blrdlnCustomerStockGLN());
                        deliveryContact(ei) <- blrdlnDeliveryContact();
                        proxyID(ei) <- blrdlnProxyID();
                        proxyDate(ei) <- blrdlnProxyDate();
                        partyIssuingProxyName(ei) <- blrdlnPartyIssuingProxyName();
                        orderID(ei) <- blrdlnOrderID();
                        currency(ei) <- blrdlnCurrency();
                        isReturn(ei) <- TRUE IF (GROUP SUM 1 IF blrdlnFieldCode(INTEGER e) == 'PW0013' AND blrdlnFieldValue(e) == '1');
                        replaceNumber(ei) <- STRING[70](GROUP MAX blrdlnFieldValue(INTEGER e) IF blrdlnFieldCode(e) == 'PW0014');
                        overCreateEInvoiceBlrdln(ei);
                        XMLPath(ei) <- archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                        FOR blrdlnLineItemID(INTEGER l) OR blrdlnLineItemBuyerID(l) OR blrdlnLineItemSupplierID(l) ORDER blrdlnLineItemNumber(l) DO NEW ed = EInvoiceDetail {
                            eInvoice(ed) <- ei;
                            dataIndex(ed) <- blrdlnLineItemNumber(l);
                            id(ed) <- id(ei) + '/' + blrdlnLineItemNumber(l);
                            lineItemSign(ed) <- blrdlnLineItemSign(l);
                            lineItemID(ed) <- blrdlnLineItemID(l);
                            lineItemBuyerID(ed) <- blrdlnLineItemBuyerID(l);
                            deliveryTypePrev(ed) <- blrdlnDeliveryTypePrev(l);
                            deliveryNotePrev(ed) <- blrdlnDeliveryNotePrev(l);
                            deliveryNoteDatePrev(ed) <- blrdlnDeliveryNoteDatePrev(l);
                            deliveryNotePrevLineID(ed) <- blrdlnDeliveryNotePrevLineID(l);
                            lineItemSupplierID(ed) <- blrdlnLineItemSupplierID(l);
                            lineItemName(ed) <- blrdlnLineItemName(l);
                            quantityDespatched(ed) <- blrdlnQuantityDespatched(l);
                            lineItemQuantityUOM(ed) <- blrdlnLineItemQuantityUOM(l);
                            expiryDate(ed) <- blrdlnExpiryDate(l);
                            valueVAT(ed) <- NUMERIC[4,2](blrdlnValueVAT(l));
                            additionalInformation(ed) <- blrdlnAdditionalInformation(l);
                            manufactureDate(ed) <- blrdlnLineItemProductDate(l);
                            lineItemPrice(ed) <- blrdlnLineItemPrice(l);
                            lineItemManufacturerPrice(ed) <- blrdlnLineItemManufacturerPrice(l);
                            lineItemAmountWithoutCharges(ed) <- blrdlnLineItemAmountWithoutCharges(l);
                            lineItemAmount(ed) <- blrdlnLineItemAmount(l);
                            lineItemAmountCharges(ed) <- blrdlnLineItemAmountCharges(l);
                            lineItemAmountExcise(ed) <- blrdlnLineItemAmountExcise(l);
                            groupPackingCodeMark(ed, INTEGER j) <- blrdlnGroupPackingCodeMark(j) WHERE blrdlnLineItemLineItemIdentification(j) == l;
                            upperLevelCodeMark(ed, INTEGER j) <- blrdlnUpperLevelCodeMark(j) WHERE blrdlnLineItemLineItemIdentification(j) == l;
                            fieldCodeMark(ed) <- blrdlnFieldCodeMark(l);
                            lineItemExtraFields(ed) <- GROUP CONCAT (CONCAT ': ', blrdlnLineItemFieldName(INTEGER f), blrdlnLineItemFieldValue(f)) IF blrdlnLineItemLineItemExtraField(f) == l, ', ' ORDER blrdlnLineItemFieldName(f);
                        }
                    }
                    APPLY NESTED LOCAL;
                    IF canceled() THEN {
                        IF NOT disableConfirmation AND sendReplies THEN {
                            LOCAL contentSubXML = FILE();
                            EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = messageDocumentNumber(), code = '1450', description = applyMessage() XML TO contentSubXML;
                            fileToString(contentSubXML());
                            encodeBase64(resultString());
                            LOCAL xml = XMLFILE();
                            envelopeLogin() <- login;
                            envelopePassword() <- password;
                            envelopeDocumentDate() <- currentDateTime();
                            envelopeDocumentNumber() <- id(i);
                            envelopeDocumentType() <- 'SYSTEMMESSAGE';
                            envelopeContent() <- encodedBase64();
                            EXPORT envelope XML TO xml;
                            sendRequestEDI(url, xml());
                            logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) +' request sent');
                            importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                            IF requestError() THEN {
                                sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                                logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ': ' + requestError());
                                MESSAGE provider + ' (' + login + ') Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
                            } ELSE {
                                logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ' request succeeded');
                            }
                        }
                        logToFile('edi', provider + ' (' + login + ') Import EInvoice ' + id(i) + ' failed: ' + applyMessage());
                        eInvoicesFailed() <- eInvoicesFailed() + 1;
                    } ELSE {
                        FOR EInvoice ei == eInvoiceDeliveryNoteNumber(blrdlnDeliveryNoteNumber()) DO {
                            IF NOT disableAutoBlrapn() THEN {
                                LOCAL contentSubXML = FILE();
                                blrapnDateTime() <- currentDateTimeMillis();
                                blrapnMsgSender() <- glnCustomer(ei);
                                blrapnMsgReceiver() <- glnSupplier(ei);
                                blrapnUserID() <- userIDSupplierStock(ei);
                                blrapnDeliveryNoteId() <- deliveryNoteNumber(ei);
                                blrapnDeliveryNoteDate() <- DATE(deliveryNoteDateTime(ei));
                                blrapnReferenceDocumentType() <- 'BLRDLN';
                                blrapnReferenceDocumentId() <- blrdlnDocumentNumber();
                                blrapnReferenceDocumentDate() <- blrdlnDateTime();
                                blrapnShipper() <- glnSupplier(ei);
                                blrapnReceiver() <- glnCustomer(ei);
                                blrapnCode() <- '2650';
                                blrapnDescription() <- NULL;
                                toMilliseconds(blrapnDateTime());
                                EXPORT exportBlrapn XML TO contentSubXML;
                                IF archiveDir THEN {
                                    TRY{ mkdir(archiveDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd')); }
                                    WRITE contentSubXML() TO archiveDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                                }
                                IF EDSServiceCustomer(provider,ei) THEN {
                                    getSignedDocumentCustomer(provider, ei, contentSubXML(), NULL);
                                    
                                    IF signError() THEN {
                                        logToFile('edi', provider + ' (' + login + ') Import EInvoice ' + id(i) + ' error: BLRAPN ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError());
                                    }
                                    ELSE IF signResult() THEN {
                                        LOCAL ixml = XMLFILE();
                                        envelopeLogin() <- login;
                                        envelopePassword() <- password;
                                        envelopeFilename() <- CONCAT '', 'invoice', deliveryNoteNumber(ei);
                                        envelopeDocumentDate() <- blrapnDateTime();
                                        envelopeDocumentNumber() <- numberSupplier(ei);
                                        envelopeSender() <- glnCustomer(ei);
                                        envelopeReceiver() <- glnCustomer(ei);
                                        envelopeDeliveryPoint() <- glnCustomerStock(ei);
                                        envelopeDocumentType() <- 'BLRAPN';                                        
                                        envelopeContent() <- signResult();
                                        EXPORT envelope XML TO ixml;
                                        sendRequestEDI(url, ixml());
                                        logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice ' + deliveryNoteNumber(ei) +' request sent');
                                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                                        IF requestError() THEN {
                                            logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice ' + deliveryNoteNumber(ei) + ': ' + requestError());
                                            MESSAGE provider + ' (' + login + ') Извещение о прочтении накладной ' + deliveryNoteNumber(ei) + ' не выгружено: ' + requestError() NOWAIT;
                                        } ELSE {
                                            logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice ' + deliveryNoteNumber(ei) + ' request succeeded');
                                            IF NOT disableConfirmation THEN {
                                                LOCAL cxml = XMLFILE();
                                                EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO cxml;
                                                sendRequestEDI(url, cxml());
                                                logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request sent');
                                                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                                                IF requestError() THEN {
                                                    logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                                                    MESSAGE provider + ' (' + login + ') Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                                                } ELSE {
                                                    logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                                                }
                                            }
                                            logToFile('edi', provider + ' (' + login + ') Import EInvoice ' + id(i) + ' succeeded');
                                            eInvoicesSucceeded() <- eInvoicesSucceeded() + 1;
                                            NEWSESSION NESTED LOCAL {
                                                exportedBlrapnCustomer(ei) <- TRUE;
                                                NEW em = EInvoiceMessage {
                                                    number(em) <- STRING[35](resultMilliseconds());
                                                    eInvoice(em) <- ei;
                                                    dateTime(em) <- blrapnDateTime();
                                                    code(em) <- blrapnCode();
                                                    kind(em) <- EInvoiceMessageKind.out;
                                                    type(em) <- EInvoiceMessageType.blrapn_blrdln;
                                                    XMLPath(em) <- archiveDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                                                }
                                                APPLY NESTED LOCAL;
                                            }
                                        }
                                    }
                                } ELSE {
                                    logToFile('edi', provider + ' (' + login + ') Import EInvoice ' + id(i) + ' error: не заданы параметры EDSService');
                                }
                            } ELSE {
                                IF NOT disableConfirmation THEN {
                                    LOCAL cxml = XMLFILE();
                                    EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO cxml;
                                    sendRequestEDI(url, cxml());
                                    logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request sent');
                                    importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                                    IF requestError() THEN {
                                        logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                                        MESSAGE provider + ' (' + login + ') Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                                    } ELSE {
                                        logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                                    }
                                }
                                logToFile('edi', provider + ' (' + login + ') Import EInvoice ' + id(i) + ' succeeded');
                                eInvoicesSucceeded() <- eInvoicesSucceeded() + 1;
                            }
                        }
                    }  
                }
            }
        } CATCH {
            IF NOT disableConfirmation AND sendReplies THEN {
                LOCAL contentSubXML = FILE();
                EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = messageDocumentNumber(), code = '1450', description = (CONCAT '\n', provider + ' (' + login + ') Parse EInvoice ' + id(i) + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException()) XML TO contentSubXML;
                fileToString(contentSubXML());
                encodeBase64(resultString());
                LOCAL xml = XMLFILE();
                envelopeLogin() <- login;
                envelopePassword() <- password;
                envelopeDocumentDate() <- currentDateTime();
                envelopeDocumentNumber() <- id(i);
                envelopeDocumentType() <- 'SYSTEMMESSAGE';
                envelopeContent() <- encodedBase64();
                EXPORT envelope XML TO xml;
                sendRequestEDI(url, xml());
                logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) +' request sent');
                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                IF requestError() THEN {
                    sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                    logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ': ' + requestError());
                    MESSAGE provider + ' (' + login + ') Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
                } ELSE {
                    logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ' request succeeded');
                }
            }
            logToFile('edi', CONCAT '\n', provider + ' (' + login + ') Parse EInvoice ' + id(i) + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE 'Ошибка при импорте накладной ' + id(i) +'. Обратитесь к администратору' NOWAIT;
            eInvoicesFailed() <- eInvoicesFailed() + 1;
        }
    }
}



signAndSendBlrapnCustomerEInvoice (EInvoice ei, STRING[100] login, STRING[100] password, TEXT url, STRING[100] outputDir , STRING[100] provider) {
    checkIsServer();
    IF isServer() THEN {
        TRY {
            IF login AND password THEN {
                IF EDSServiceCustomer(provider,ei) THEN {
                    LOCAL contentSubXML = FILE();
                    blrapnDateTime() <- currentDateTimeMillis();
                    blrapnMsgSender() <- glnCustomer(ei);
                    blrapnMsgReceiver() <- glnSupplier(ei);
                    blrapnUserID() <- userIDSupplierStock(ei);
                    blrapnDeliveryNoteId() <- deliveryNoteNumber(ei);
                    blrapnDeliveryNoteDate() <- DATE(deliveryNoteDateTime(ei));
                    blrapnReferenceDocumentType() <- 'BLRWBL';
                    blrapnReferenceDocumentId() <- IF isCancel(ei) THEN numberSupplierCancel(ei) ELSE numberSupplier(ei);
                    blrapnReferenceDocumentDate() <- IF isCancel(ei) THEN dateSupplierCancel(ei) ELSE dateSupplier(ei);
                    blrapnShipper() <- glnSupplier(ei);
                    blrapnReceiver() <- glnCustomer(ei);
                    blrapnCode() <- '2650';
                    blrapnDescription() <- NULL;
                    toMilliseconds(blrapnDateTime());
                    EXPORT exportBlrapn XML TO contentSubXML;
                    IF outputDir THEN {
                        TRY{ mkdir(outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd')); }
                        WRITE contentSubXML() TO outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                    }
                    getSignedDocumentCustomer(provider, ei, contentSubXML(), TRUE);
                    IF signError() THEN {
                        logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice error: BLRAPN ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError());
                        MESSAGE provider + ' (' + login + ') Извещение о прочтении накладной не выгружено: BLRAPN ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError() NOWAIT;
                    }
                    ELSE IF signResult() THEN {
                        LOCAL ixml = XMLFILE();
                        envelopeLogin() <- login;
                        envelopePassword() <- password;
                        envelopeFilename() <- CONCAT '', 'invoice', deliveryNoteNumber(ei);
                        envelopeDocumentDate() <- blrapnDateTime();
                        envelopeDocumentNumber() <- IF isCancel(ei) THEN numberSupplierCancel(ei) ELSE numberSupplier(ei);
                        envelopeSender() <- glnCustomer(ei);
                        envelopeReceiver() <- glnCustomer(ei);
                        envelopeDeliveryPoint() <- glnCustomerStock(ei);
                        envelopeDocumentType() <- 'BLRAPN';
                        envelopeContent() <- signResult();
                        EXPORT envelope XML TO ixml;
                        sendRequestEDI(url, ixml());
                        logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice ' + deliveryNoteNumber(ei) +' request sent');
                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                        IF requestError() THEN {
                            logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice ' + deliveryNoteNumber(ei) + ': ' + requestError());
                            MESSAGE provider + ' (' + login + ') Извещение о прочтении накладной ' + deliveryNoteNumber(ei) + ' не выгружено: ' + requestError() NOWAIT;
                        } ELSE {
                            logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice ' + deliveryNoteNumber(ei) + ' request succeeded');
                            MESSAGE provider + ' (' + login + ') Извещение о прочтении накладной ' + deliveryNoteNumber(ei) + ' выгружено' NOWAIT;
                            exportedBlrapnCustomer(ei) <- TRUE;
                            NEW em = EInvoiceMessage {
                                number(em) <- STRING[35](resultMilliseconds());
                                eInvoice(em) <- ei;
                                dateTime(em) <- blrapnDateTime();
                                code(em) <- blrapnCode();
                                kind(em) <- EInvoiceMessageKind.out;
                                type(em) <- EInvoiceMessageType.blrapn_blrwbl;
                                XMLPath(em) <- outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                            }
                            APPLY NESTED LOCAL;
                        }
                    }
                } ELSE {
                    logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice: не заданы параметры EDSService');
                    MESSAGE provider + ' (' + login + ') Извещение о прочтении не выгружено: не заданы параметры EDSService' NOWAIT;
                }
            } ELSE {
                logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice: не заданы имя пользователя / пароль / хост / порт');
                MESSAGE provider + ' (' + login + ') Извещение о прочтении не выгружено: не заданы имя пользователя / пароль / хост / порт' NOWAIT;
            }
        } CATCH {
            logToFile('edi', CONCAT '\n', provider + ' (' + login + ') error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE 'Извещение о прочтении не выгружено. Обратитесь к администратору' NOWAIT;
        }
    } ELSE {
        logToFile('edi', provider + ' (' + login + ') error: ' + 'SendBlrapnEInvoice disabled, change serverComputer() to enable');
        MESSAGE provider + ' (' + login + ') error: ' + 'SendBlrapnEInvoice disabled, change serverComputer() to enable' NOWAIT;
    }
}

signAndSendBlrapnCustomerEInvoiceTN2 (EInvoice ei, STRING[100] login, STRING[100] password, TEXT url, STRING[100] outputDir , STRING[100] provider) {
    checkIsServer();
    IF isServer() THEN {
        TRY {
            IF login AND password THEN {
                IF EDSServiceCustomer(provider,ei) THEN {
                    LOCAL contentSubXML = FILE();
                    blrapnDateTime() <- currentDateTimeMillis();
                    blrapnMsgSender() <- glnCustomer(ei);
                    blrapnMsgReceiver() <- glnSupplier(ei);
                    blrapnUserID() <- userIDSupplierStock(ei);
                    blrapnDeliveryNoteId() <- deliveryNoteNumber(ei);
                    blrapnDeliveryNoteDate() <- DATE(deliveryNoteDateTime(ei));
                    blrapnReferenceDocumentType() <- 'BLRDLN';
                    blrapnReferenceDocumentId() <- IF isCancel(ei) THEN numberSupplierCancel(ei) ELSE numberSupplier(ei);
                    blrapnReferenceDocumentDate() <- IF isCancel(ei) THEN dateSupplierCancel(ei) ELSE dateSupplier(ei);
                    blrapnShipper() <- glnSupplier(ei);
                    blrapnReceiver() <- glnCustomer(ei);
                    blrapnCode() <- '2650';
                    blrapnDescription() <- NULL;
                    toMilliseconds(blrapnDateTime());
                    EXPORT exportBlrapn XML TO contentSubXML;
                    IF outputDir THEN {
                        TRY{ mkdir(outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd')); }
                        WRITE contentSubXML() TO outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                    }
                    getSignedDocumentCustomer(provider, ei, contentSubXML(), TRUE);
                    IF signError() THEN {
                        logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice error: BLRAPN ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError());
                        MESSAGE provider + ' (' + login + ') Извещение о прочтении накладной не выгружено: BLRAPN ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError() NOWAIT;
                    }
                    ELSE IF signResult() THEN {
                        LOCAL ixml = XMLFILE();
                        envelopeLogin() <- login;
                        envelopePassword() <- password;
                        envelopeFilename() <- CONCAT '', 'invoice', deliveryNoteNumber(ei);
                        envelopeDocumentDate() <- blrapnDateTime();
                        envelopeDocumentNumber() <- IF isCancel(ei) THEN numberSupplierCancel(ei) ELSE numberSupplier(ei);
                        envelopeSender() <- glnCustomer(ei);
                        envelopeReceiver() <- glnCustomer(ei);
                        envelopeDeliveryPoint() <- glnCustomerStock(ei);
                        envelopeDocumentType() <- 'BLRAPN';
                        envelopeContent() <- signResult();
                        EXPORT envelope XML TO ixml;
                        sendRequestEDI(url, ixml());
                        logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice ' + deliveryNoteNumber(ei) +' request sent');
                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                        IF requestError() THEN {
                            logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice ' + deliveryNoteNumber(ei) + ': ' + requestError());
                            MESSAGE provider + ' (' + login + ') Извещение о прочтении накладной ' + deliveryNoteNumber(ei) + ' не выгружено: ' + requestError() NOWAIT;
                        } ELSE {
                            logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice ' + deliveryNoteNumber(ei) + ' request succeeded');
                            MESSAGE provider + ' (' + login + ') Извещение о прочтении накладной ' + deliveryNoteNumber(ei) + ' выгружено' NOWAIT;
                            exportedBlrapnCustomer(ei) <- TRUE;
                            NEW em = EInvoiceMessage {
                                number(em) <- STRING[35](resultMilliseconds());
                                eInvoice(em) <- ei;
                                dateTime(em) <- blrapnDateTime();
                                code(em) <- blrapnCode();
                                kind(em) <- EInvoiceMessageKind.out;
                                type(em) <- EInvoiceMessageType.blrapn_blrdln;
                                XMLPath(em) <- outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                            }
                            APPLY NESTED LOCAL;
                        }
                    }
                } ELSE {
                    logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice: не заданы параметры EDSService');
                    MESSAGE provider + ' (' + login + ') Извещение о прочтении не выгружено: не заданы параметры EDSService' NOWAIT;
                }
            } ELSE {
                logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice: не заданы имя пользователя / пароль / хост / порт');
                MESSAGE provider + ' (' + login + ') Извещение о прочтении не выгружено: не заданы имя пользователя / пароль / хост / порт' NOWAIT;
            }
        } CATCH {
            logToFile('edi', CONCAT '\n', provider + ' (' + login + ') error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE 'Извещение о прочтении не выгружено. Обратитесь к администратору' NOWAIT;
        }
    } ELSE {
        logToFile('edi', provider + ' (' + login + ') error: ' + 'SendBlrapnEInvoice disabled, change serverComputer() to enable');
        MESSAGE provider + ' (' + login + ') error: ' + 'SendBlrapnEInvoice disabled, change serverComputer() to enable' NOWAIT;
    }
}


exportBlrwbrDateTime = DATA LOCAL NESTED DATETIME();

GROUP report EXTID 'Report';

hideMessageHeaderBlrwbr = DATA LOCAL BOOLEAN ();

FORM exportBlrwbr FORMEXTID 'BLRWBR'
    PROPERTIES ATTR ='0.1' IF NOT hideMessageHeaderBlrwbr() EXTID 'version'
    OBJECTS ei = EInvoice PANEL
    
    OBJECTS eih = EInvoice EXTID 'MessageHeader'
    FILTERS (eih == ei AND NOT hideMessageHeaderBlrwbr()) OR NOT eih IS EInvoice
    PROPERTIES DRAW eih messageId = resultMilliseconds() EXTID 'MessageID',
                        msgDateTime = toChar(exportBlrwbrDateTime(),'YYYYMMDDHH24MISS') EXTID 'MsgDateTime',
                        messageType = 'BLRWBR' EXTID 'MessageType',
                        glnCustomer(eih) EXTID 'MsgSenderID',
                        glnSupplier(eih) EXTID 'MsgReceiverID',
                        userIDSupplierStock(eih) EXTID 'UserID',
                        testIndicator = IF isTestDocument(eih) THEN '1' EXTID 'TestIndicator'
    
    OBJECTS ein = EInvoice EXTID 'DeliveryNote'
    FILTERS ein == ei
    PROPERTIES DRAW ein deliveryNoteType = '700' EXTID 'DeliveryNoteType',
                        documentID = resultMilliseconds() EXTID 'DocumentID',
                        creationDateTime = toChar(exportBlrwbrDateTime(),'YYYYMMDDHH24MISS') EXTID 'CreationDateTime',
                        functionCode = '11' EXTID 'FunctionCode',
                        referenceDocument = numberSupplier(ein) EXTID 'ID' IN referenceDocument,
                        date = toChar(dateSupplier(ein),'YYYYMMDDHH24MISS') EXTID 'Date' IN referenceDocument,
                        deliveryNoteNumber(ein) EXTID 'DeliveryNoteID',
                        deliveryNoteDateTime = toChar(deliveryNoteDateTime(ein),'YYYYMMDD') EXTID 'DeliveryNoteDate'
    PROPERTIES DRAW ein IN report overReportId(ein) EXTID 'ReportID',
                                  overReportDate = toChar(overReportDate(ein),'YYYYMMDD') EXTID 'ReportDate',
                                  overReportName(ein) EXTID 'ReportName'
    PROPERTIES DRAW ein IN shipper glnSupplier(ein) EXTID 'GLN',
                                   nameSupplier(ein) EXTID 'Name',
                                   addressSupplier(ein) EXTID 'Address',
                                   unpSupplier(ein) EXTID 'VATRegistrationNumber'
    PROPERTIES DRAW ein IN receiver glnCustomer(ein) EXTID 'GLN',
                                    nameCustomer(ein) EXTID 'Name',
                                    addressCustomer(ein) EXTID 'Address',
                                    unpCustomer(ein) EXTID 'VATRegistrationNumber'
    PROPERTIES DRAW ein IN shipTo glnCustomerStock(ein) EXTID 'GLN',
                                  addressCustomerStock(ein) EXTID 'Address',
                                  contactCustomerStock(ein) EXTID 'Contact'
    PROPERTIES DRAW ein sealIDReceiver(ein) EXTID 'SealIDReceiver'
;

overExportCustomer ABSTRACT (EInvoice);

signAndSendCustomerEInvoice (EInvoice ei, STRING[100] login, STRING[100] password, TEXT url, STRING[100] outputDir , STRING[100] provider) {
    checkIsServer();
    IF isServer() THEN {
        TRY {
            IF login AND password THEN {
                IF EDSServiceCustomer(provider,ei) THEN {
                    IF NOT isCancel(ei) THEN {
                        LOCAL error = TEXT();
                        error() <- '';
                        IF NOT length(addressCustomerStock(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Адрес пункта разгрузки (Адрес склада получателя)\'\n';
                        IF NOT length(contactCustomerStock(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не задано \'ФИО и должность лица, которое отвечает за получение груза со стороны грузополучателя\'\n';
                        
                        IF error() == '' THEN {
                            LOCAL contentSubXML = FILE();
                            exportBlrwbrDateTime() <- currentDateTimeMillis();
                            toMilliseconds(exportBlrwbrDateTime());
                            EXPORT exportBlrwbr OBJECTS ei = ei XML TO contentSubXML;
                            IF outputDir THEN {
                                TRY{ mkdir(outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd')); }
                                WRITE contentSubXML() TO outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrwbr-' + toChar(exportBlrwbrDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                            }
                            getSignedDocumentCustomer(provider, ei, contentSubXML(), TRUE);
                            IF signError() THEN {
                                logToFile('edi', provider + ' (' + login + ') SendEInvoice error: BLRWBR ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError());
                                MESSAGE provider + ' (' + login + ') Накладная не выгружена: BLRWBR ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError() NOWAIT;
                            }
                            ELSE IF signResult() THEN {
                                LOCAL ixml = XMLFILE();
                                envelopeLogin() <- login;
                                envelopePassword() <- password;
                                envelopeFilename() <- CONCAT '', 'invoice', deliveryNoteNumber(ei);
                                envelopeDocumentDate() <- exportBlrwbrDateTime();
                                envelopeDocumentNumber() <- numberSupplier(ei);
                                envelopeSender() <- glnCustomer(ei);
                                envelopeReceiver() <- glnCustomer(ei);
                                envelopeDeliveryPoint() <- glnCustomerStock(ei);
                                envelopeDocumentType() <- 'BLRWBR';
                                envelopeContent() <- signResult();
                                EXPORT envelope XML TO ixml;
                                sendRequestEDI(url, ixml());
                                logToFile('edi', provider + ' (' + login + ') SendEInvoice ' + deliveryNoteNumber(ei) +' request sent');
                                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                                IF requestError() THEN {
                                    logToFile('edi', provider + ' (' + login + ') SendEInvoice ' + deliveryNoteNumber(ei) + ': ' + requestError());
                                    MESSAGE provider + ' (' + login + ') Накладная ' + deliveryNoteNumber(ei) + ' не выгружена: ' + requestError() NOWAIT;
                                } ELSE {
                                    logToFile('edi', provider + ' (' + login + ') SendEInvoice ' + deliveryNoteNumber(ei) + ' request succeeded');
                                    MESSAGE provider + ' (' + login + ') Накладная ' + deliveryNoteNumber(ei) + (IF isCancel(ei) THEN ' (отмена)' ELSE '') + ' выгружена' NOWAIT;
                                    exportedCustomer(ei) <- TRUE;
                                    toMilliseconds(exportBlrwbrDateTime());
                                    numberCustomer(ei) <- STRING[35](resultMilliseconds());
                                    dateCustomer(ei) <- exportBlrwbrDateTime();
                                    overExportCustomer(ei);
                                    APPLY NESTED LOCAL;
                                }
                            }
                        } ELSE {
                            logToFile('edi', provider + ' (' + login + ') SendEInvoice: Не все поля заполнены. ' + error());
                            MESSAGE provider + ' (' + login + ') Накладная не выгружена: Не все поля заполнены ' + error() NOWAIT;
                        }
                    } ELSE {
                        logToFile('edi', provider + ' (' + login + ') SendEInvoice ' + deliveryNoteNumber(ei) + ' request succeeded');
                        MESSAGE provider + ' (' + login + ') Накладная ' + deliveryNoteNumber(ei) + (IF isCancel(ei) THEN ' (отмена)' ELSE '') + ' выгружена' NOWAIT;
                        exportedCustomer(ei) <- TRUE;
                        overExportCustomer(ei);
                        APPLY NESTED LOCAL;
                    }
                } ELSE {
                    logToFile('edi', provider + ' (' + login + ') SendEInvoice: не заданы параметры EDSService');
                    MESSAGE provider + ' (' + login + ') Накладная не выгружена: не заданы параметры EDSService' NOWAIT;
                }
            } ELSE {
                logToFile('edi', provider + ' (' + login + ') SendEInvoice: не заданы имя пользователя / пароль / хост / порт');
                MESSAGE provider + ' (' + login + ') Накладная не выгружена: не заданы имя пользователя / пароль / хост / порт' NOWAIT;
            }
        } CATCH {
            logToFile('edi', CONCAT '\n', provider + ' (' + login + ') error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE 'Накладная не выгружена. Обратитесь к администратору' NOWAIT;
        }
    } ELSE {
        logToFile('edi', provider + ' (' + login + ') error: ' + 'SendEInvoice disabled, change serverComputer() to enable');
        MESSAGE provider + ' (' + login + ') error: ' + 'SendEInvoice disabled, change serverComputer() to enable' NOWAIT;
    }
}

exportBlrdnrDateTime = DATA LOCAL NESTED DATETIME();

hideMessageHeaderBlrdnr = DATA LOCAL BOOLEAN ();

FORM exportBlrdnr FORMEXTID 'BLRDNR'
    PROPERTIES ATTR ='0.1' IF NOT hideMessageHeaderBlrdnr() EXTID 'version'
    OBJECTS ei = EInvoice PANEL
    
    OBJECTS eih = EInvoice EXTID 'MessageHeader'
    FILTERS (eih == ei AND NOT hideMessageHeaderBlrdnr()) OR NOT eih IS EInvoice
    PROPERTIES DRAW eih messageId = resultMilliseconds() EXTID 'MessageID',
                        msgDateTime = toChar(exportBlrdnrDateTime(),'YYYYMMDDHH24MISS') EXTID 'MsgDateTime',
                        messageType = 'BLRDNR' EXTID 'MessageType',
                        glnCustomer(eih) EXTID 'MsgSenderID',
                        glnSupplier(eih) EXTID 'MsgReceiverID',
                        userIDSupplierStock(eih) EXTID 'UserID',
                        testIndicator = IF isTestDocument(eih) THEN '1' EXTID 'TestIndicator'
    
    OBJECTS ein = EInvoice EXTID 'DeliveryNote'
    FILTERS ein == ei
    PROPERTIES DRAW ein deliveryNoteType = '270' EXTID 'DeliveryNoteType',
                        documentID = resultMilliseconds() EXTID 'DocumentID',
                        creationDateTime = toChar(exportBlrdnrDateTime(),'YYYYMMDDHH24MISS') EXTID 'CreationDateTime',
                        functionCode = '11' EXTID 'FunctionCode',
                        referenceDocument = numberSupplier(ein) EXTID 'ID' IN referenceDocument,
                        date = toChar(dateSupplier(ein),'YYYYMMDDHH24MISS') EXTID 'Date' IN referenceDocument,
                        deliveryNoteNumber(ein) EXTID 'DeliveryNoteID',
                        deliveryNoteDateTime = toChar(deliveryNoteDateTime(ein),'YYYYMMDD') EXTID 'DeliveryNoteDate'
    PROPERTIES DRAW ein IN shipper glnSupplier(ein) EXTID 'GLN',
                                   nameSupplier(ein) EXTID 'Name',
                                   addressSupplier(ein) EXTID 'Address',
                                   unpSupplier(ein) EXTID 'VATRegistrationNumber'
    PROPERTIES DRAW ein IN receiver glnCustomer(ein) EXTID 'GLN',
                                    nameCustomer(ein) EXTID 'Name',
                                    addressCustomer(ein) EXTID 'Address',
                                    unpCustomer(ein) EXTID 'VATRegistrationNumber'
    PROPERTIES DRAW ein IN shipTo contactCustomerStock(ein) EXTID 'Contact'
;

signAndSendCustomerEInvoiceTN2 (EInvoice ei, STRING[100] login, STRING[100] password, TEXT url, STRING[100] outputDir , STRING[100] provider) {
    checkIsServer();
    IF isServer() THEN {
        TRY {
            IF login AND password THEN {
                IF EDSServiceCustomer(provider,ei) THEN {
                    IF NOT isCancel(ei) THEN {
                        LOCAL error = TEXT();
                        error() <- '';
                        IF NOT length(addressCustomerStock(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Адрес пункта разгрузки (Адрес склада получателя)\'\n';
                        IF NOT length(contactCustomerStock(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не задано \'ФИО и должность лица, которое отвечает за получение груза со стороны грузополучателя\'\n';
                        
                        IF error() == '' THEN {
                            LOCAL contentSubXML = FILE();
                            exportBlrdnrDateTime() <- currentDateTimeMillis();
                            toMilliseconds(exportBlrdnrDateTime());
                            EXPORT exportBlrdnr OBJECTS ei = ei XML TO contentSubXML;
                            IF outputDir THEN {
                                TRY{ mkdir(outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd')); }
                                WRITE contentSubXML() TO outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrdnr-' + toChar(exportBlrwbrDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                            }
                            getSignedDocumentCustomer(provider, ei, contentSubXML(), TRUE);
                            IF signError() THEN {
                                logToFile('edi', provider + ' (' + login + ') SendEInvoice error: BLRDNR ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError());
                                MESSAGE provider + ' (' + login + ') Накладная не выгружена: BLRDNR ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError() NOWAIT;
                            }
                            ELSE IF signResult() THEN {
                                LOCAL ixml = XMLFILE();
                                envelopeLogin() <- login;
                                envelopePassword() <- password;
                                envelopeFilename() <- CONCAT '', 'invoice', deliveryNoteNumber(ei);
                                envelopeDocumentDate() <- exportBlrdnrDateTime();
                                envelopeDocumentNumber() <- numberSupplier(ei);
                                envelopeSender() <- glnCustomer(ei);
                                envelopeReceiver() <- glnCustomer(ei);
                                envelopeDeliveryPoint() <- glnCustomerStock(ei);
                                envelopeDocumentType() <- 'BLRDNR';
                                envelopeContent() <- signResult();
                                EXPORT envelope XML TO ixml;
                                sendRequestEDI(url, ixml());
                                logToFile('edi', provider + ' (' + login + ') SendEInvoice ' + deliveryNoteNumber(ei) +' request sent');
                                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                                IF requestError() THEN {
                                    logToFile('edi', provider + ' (' + login + ') SendEInvoice ' + deliveryNoteNumber(ei) + ': ' + requestError());
                                    MESSAGE provider + ' (' + login + ') Накладная ' + deliveryNoteNumber(ei) + ' не выгружена: ' + requestError() NOWAIT;
                                } ELSE {
                                    logToFile('edi', provider + ' (' + login + ') SendEInvoice ' + deliveryNoteNumber(ei) + ' request succeeded');
                                    MESSAGE provider + ' (' + login + ') Накладная ' + deliveryNoteNumber(ei) + (IF isCancel(ei) THEN ' (отмена)' ELSE '') + ' выгружена' NOWAIT;
                                    exportedCustomer(ei) <- TRUE;
                                    toMilliseconds(exportBlrdnrDateTime());
                                    numberCustomer(ei) <- STRING[35](resultMilliseconds());
                                    dateCustomer(ei) <- exportBlrdnrDateTime();
                                    overExportCustomer(ei);
                                    APPLY NESTED LOCAL;
                                }
                            }
                        } ELSE {
                            logToFile('edi', provider + ' (' + login + ') SendEInvoice: Не все поля заполнены. ' + error());
                            MESSAGE provider + ' (' + login + ') Накладная не выгружена: Не все поля заполнены ' + error() NOWAIT;
                        }
                    } ELSE {
                        logToFile('edi', provider + ' (' + login + ') SendEInvoice ' + deliveryNoteNumber(ei) + ' request succeeded');
                        MESSAGE provider + ' (' + login + ') Накладная ' + deliveryNoteNumber(ei) + (IF isCancel(ei) THEN ' (отмена)' ELSE '') + ' выгружена' NOWAIT;
                        exportedCustomer(ei) <- TRUE;
                        overExportCustomer(ei);
                        APPLY NESTED LOCAL;
                    }
                } ELSE {
                    logToFile('edi', provider + ' (' + login + ') SendEInvoice: не заданы параметры EDSService');
                    MESSAGE provider + ' (' + login + ') Накладная не выгружена: не заданы параметры EDSService' NOWAIT;
                }
            } ELSE {
                logToFile('edi', provider + ' (' + login + ') SendEInvoice: не заданы имя пользователя / пароль / хост / порт');
                MESSAGE provider + ' (' + login + ') Накладная не выгружена: не заданы имя пользователя / пароль / хост / порт' NOWAIT;
            }
        } CATCH {
            logToFile('edi', CONCAT '\n', provider + ' (' + login + ') error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE 'Накладная не выгружена. Обратитесь к администратору' NOWAIT;
        }
    } ELSE {
        logToFile('edi', provider + ' (' + login + ') error: ' + 'SendEInvoice disabled, change serverComputer() to enable');
        MESSAGE provider + ' (' + login + ') error: ' + 'SendEInvoice disabled, change serverComputer() to enable' NOWAIT;
    }
}

signAndSendNoticeCustomerEInvoice (EInvoice ei, STRING[1000] d, STRING[100] login, STRING[100] password, TEXT url, STRING[100] outputDir , STRING[100] provider) {
    checkIsServer();
    IF isServer() THEN {
        TRY {
            IF login AND password THEN {
                IF EDSServiceCustomer(provider,ei) THEN {
                    LOCAL contentSubXML = FILE();
                    blrapnDateTime() <- currentDateTimeMillis();
                    blrapnMsgSender() <- glnCustomer(ei);
                    blrapnMsgReceiver() <- glnSupplier(ei);
                    blrapnUserID() <- userIDSupplierStock(ei);
                    blrapnDeliveryNoteId() <- deliveryNoteNumber(ei);
                    blrapnDeliveryNoteDate() <- DATE(deliveryNoteDateTime(ei));
                    blrapnReferenceDocumentType() <- 'BLRWBL';
                    blrapnReferenceDocumentId() <- numberSupplier(ei);
                    blrapnReferenceDocumentDate() <- dateSupplier(ei);
                    blrapnShipper() <- glnSupplier(ei);
                    blrapnReceiver() <- glnCustomer(ei);
                    blrapnCode() <- '2750';
                    blrapnDescription() <- d;
                    toMilliseconds(blrapnDateTime());
                    EXPORT exportBlrapn XML TO contentSubXML;
                    IF outputDir THEN {
                        TRY{ mkdir(outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd')); }
                        WRITE contentSubXML() TO outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                    }
                    getSignedDocumentCustomer(provider, ei, contentSubXML(), TRUE);
                    IF signError() THEN {
                        logToFile('edi', provider + ' (' + login + ') SendNoticeEInvoice error: BLRAPN ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError());
                        MESSAGE provider + ' (' + login + ') Уведомление об изменении накладной не выгружено: BLRAPN ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError() NOWAIT;
                    }
                    ELSE IF signResult() THEN {
                        LOCAL ixml = XMLFILE();
                        envelopeLogin() <- login;
                        envelopePassword() <- password;
                        envelopeFilename() <- CONCAT '', 'invoice', deliveryNoteNumber(ei);
                        envelopeDocumentDate() <- blrapnDateTime();
                        envelopeDocumentNumber() <- numberSupplier(ei);
                        envelopeSender() <- glnCustomer(ei);
                        envelopeReceiver() <- glnCustomer(ei);
                        envelopeDeliveryPoint() <- glnCustomerStock(ei);
                        envelopeDocumentType() <- 'BLRAPN';
                        envelopeContent() <- signResult();
                        EXPORT envelope XML TO ixml;
                        sendRequestEDI(url, ixml());
                        logToFile('edi', provider + ' (' + login + ') SendNoticeEInvoice ' + deliveryNoteNumber(ei) +' request sent');
                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                        IF requestError() THEN {
                            logToFile('edi', provider + ' (' + login + ') SendNoticeEInvoice ' + deliveryNoteNumber(ei) + ': ' + requestError());
                            MESSAGE provider + ' (' + login + ') Уведомление об изменении накладной ' + deliveryNoteNumber(ei) + ' не выгружено: ' + requestError() NOWAIT;
                        } ELSE {
                            logToFile('edi', provider + ' (' + login + ') SendNoticeEInvoice ' + deliveryNoteNumber(ei) + ' request succeeded');
                            MESSAGE provider + ' (' + login + ') Уведомление об изменении накладной ' + deliveryNoteNumber(ei) + ' выгружено' NOWAIT;
                            exportedNoticeCustomer(ei) <- TRUE;
                            NEW em = EInvoiceMessage {
                                number(em) <- STRING[35](resultMilliseconds());
                                eInvoice(em) <- ei;
                                dateTime(em) <- blrapnDateTime();
                                code(em) <- blrapnCode();
                                kind(em) <- EInvoiceMessageKind.out;
                                type(em) <- EInvoiceMessageType.blrapn_blrwbl;
                                description(em) <- blrapnDescription();
                                XMLPath(em) <- outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                            }
                            APPLY NESTED LOCAL;
                        }
                    }
                } ELSE {
                    logToFile('edi', provider + ' (' + login + ') SendNoticeEInvoice: не заданы параметры EDSService');
                    MESSAGE provider + ' (' + login + ') Уведомление об изменении не выгружено: не заданы параметры EDSService' NOWAIT;
                }
            } ELSE {
                logToFile('edi', provider + ' (' + login + ') SendNoticeEInvoice: не заданы имя пользователя / пароль / хост / порт');
                MESSAGE provider + ' (' + login + ') Уведомление об изменении не выгружено: не заданы имя пользователя / пароль / хост / порт' NOWAIT;
            }
        } CATCH {
            logToFile('edi', CONCAT '\n', provider + ' (' + login + ') error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE 'Уведомление об изменении не выгружено. Обратитесь к администратору' NOWAIT;
        }
    } ELSE {
        logToFile('edi', provider + ' (' + login + ') error: ' + 'SendNoticeEInvoice disabled, change serverComputer() to enable');
        MESSAGE provider + ' (' + login + ') error: ' + 'SendNoticeEInvoice disabled, change serverComputer() to enable' NOWAIT;
    }
}

signAndSendNoticeCustomerEInvoiceTN2 (EInvoice ei, STRING[1000] d, STRING[100] login, STRING[100] password, TEXT url, STRING[100] outputDir , STRING[100] provider) {
    checkIsServer();
    IF isServer() THEN {
        TRY {
            IF login AND password THEN {
                IF EDSServiceCustomer(provider,ei) THEN {
                    LOCAL contentSubXML = FILE();
                    blrapnDateTime() <- currentDateTimeMillis();
                    blrapnMsgSender() <- glnCustomer(ei);
                    blrapnMsgReceiver() <- glnSupplier(ei);
                    blrapnUserID() <- userIDSupplierStock(ei);
                    blrapnDeliveryNoteId() <- deliveryNoteNumber(ei);
                    blrapnDeliveryNoteDate() <- DATE(deliveryNoteDateTime(ei));
                    blrapnReferenceDocumentType() <- 'BLRDLN';
                    blrapnReferenceDocumentId() <- numberSupplier(ei);
                    blrapnReferenceDocumentDate() <- dateSupplier(ei);
                    blrapnShipper() <- glnSupplier(ei);
                    blrapnReceiver() <- glnCustomer(ei);
                    blrapnCode() <- '2750';
                    blrapnDescription() <- d;
                    toMilliseconds(blrapnDateTime());
                    EXPORT exportBlrapn XML TO contentSubXML;
                    IF outputDir THEN {
                        TRY{ mkdir(outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd')); }
                        WRITE contentSubXML() TO outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                    }
                    getSignedDocumentCustomer(provider, ei, contentSubXML(), TRUE);
                    IF signError() THEN {
                        logToFile('edi', provider + ' (' + login + ') SendNoticeEInvoice error: BLRAPN ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError());
                        MESSAGE provider + ' (' + login + ') Уведомление об изменении накладной не выгружено: BLRAPN ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError() NOWAIT;
                    }
                    ELSE IF signResult() THEN {
                        LOCAL ixml = XMLFILE();
                        envelopeLogin() <- login;
                        envelopePassword() <- password;
                        envelopeFilename() <- CONCAT '', 'invoice', deliveryNoteNumber(ei);
                        envelopeDocumentDate() <- blrapnDateTime();
                        envelopeDocumentNumber() <- numberSupplier(ei);
                        envelopeSender() <- glnCustomer(ei);
                        envelopeReceiver() <- glnCustomer(ei);
                        envelopeDeliveryPoint() <- glnCustomerStock(ei);
                        envelopeDocumentType() <- 'BLRAPN';
                        envelopeContent() <- signResult();
                        EXPORT envelope XML TO ixml;
                        sendRequestEDI(url, ixml());
                        logToFile('edi', provider + ' (' + login + ') SendNoticeEInvoice ' + deliveryNoteNumber(ei) +' request sent');
                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                        IF requestError() THEN {
                            logToFile('edi', provider + ' (' + login + ') SendNoticeEInvoice ' + deliveryNoteNumber(ei) + ': ' + requestError());
                            MESSAGE provider + ' (' + login + ') Уведомление об изменении накладной ' + deliveryNoteNumber(ei) + ' не выгружено: ' + requestError() NOWAIT;
                        } ELSE {
                            logToFile('edi', provider + ' (' + login + ') SendNoticeEInvoice ' + deliveryNoteNumber(ei) + ' request succeeded');
                            MESSAGE provider + ' (' + login + ') Уведомление об изменении накладной ' + deliveryNoteNumber(ei) + ' выгружено' NOWAIT;
                            exportedNoticeCustomer(ei) <- TRUE;
                            NEW em = EInvoiceMessage {
                                number(em) <- STRING[35](resultMilliseconds());
                                eInvoice(em) <- ei;
                                dateTime(em) <- blrapnDateTime();
                                code(em) <- blrapnCode();
                                kind(em) <- EInvoiceMessageKind.out;
                                type(em) <- EInvoiceMessageType.blrapn_blrdln;
                                description(em) <- blrapnDescription();
                                XMLPath(em) <- outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                            }
                            APPLY NESTED LOCAL;
                        }
                    }
                } ELSE {
                    logToFile('edi', provider + ' (' + login + ') SendNoticeEInvoice: не заданы параметры EDSService');
                    MESSAGE provider + ' (' + login + ') Уведомление об изменении не выгружено: не заданы параметры EDSService' NOWAIT;
                }  
            } ELSE {
                logToFile('edi', provider + ' (' + login + ') SendNoticeEInvoice: не заданы имя пользователя / пароль / хост / порт');
                MESSAGE provider + ' (' + login + ') Уведомление об изменении не выгружено: не заданы имя пользователя / пароль / хост / порт' NOWAIT;
            }
        } CATCH {
            logToFile('edi', CONCAT '\n', provider + ' (' + login + ') error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE 'Уведомление об изменении не выгружено. Обратитесь к администратору' NOWAIT;
        }
    } ELSE {
        logToFile('edi', provider + ' (' + login + ') error: ' + 'SendNoticeEInvoice disabled, change serverComputer() to enable');
        MESSAGE provider + ' (' + login + ') error: ' + 'SendNoticeEInvoice disabled, change serverComputer() to enable' NOWAIT;
    }
}