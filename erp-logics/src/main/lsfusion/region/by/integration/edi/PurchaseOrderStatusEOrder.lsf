MODULE PurchaseOrderStatusEOrder;

REQUIRE PurchaseOrderStatus, CustomerEOrder;

PRIORITY Purchase;

NAMESPACE EDI;

backgroundQuantityResponseEDI(Purchase.OrderDetail d) += RGB(255,0,0) IF quantityResponseEDI(d) != originalQuantity(d);

skuWithoutPrice 'Товары без цены' (Order o) = GROUP CONCAT idSku(OrderDetail d) + ' ' + nameSku(d), '\n' IF NOT price(d) ORDER d BY order(d);

overEmailCustomer(Order.Order order) + { 
    IF NOT consumedEmailCustomer(order ) AND isEOrder[UserOrder](order AS Order.Order) THEN {
        consumedEmailCustomer(order) <- TRUE;
        IF NOT skipSend(order) THEN {
            
            IF NOT countOrderDetail(order) THEN {
                MESSAGE 'В заказе нет строк. Отправка отменена.';
                RETURN;
            }
            
            IF shipmentDateTime(order) < sumMinutes(currentDateTime(), 60) THEN { //конкретно у СТТ текущего + час, поэтому пока для всех такое
                MESSAGE 'Дата/время поставки не может быть меньше текущего. Отправка отменена.';
                RETURN;
            }
            
            IF (skuWithoutPrice(order)) THEN {
                MESSAGE 'Заказ не может быть отправлен, так как есть товары без цены: \n' + skuWithoutPrice(order) + '\nОтправка отменена';
                RETURN;
            }
            
            send[EOrder](order);
            IF NOT sendingCancelled() THEN {
                IF NOT sentDateTime[UserOrder](order) THEN {
                    notEmailSend(order) <- 'edi';
                    logSendDocumentOrder(order);
                }
                sentDateTime[UserOrder](order) <- currentDateTime() WHERE NOT sentDateTime[UserOrder](order);
            }
        } ELSE {
            overSend(order);
        }
    }
}

provider(Purchase.Order o) += WHEN isEOrder(o) THEN STRING[20]('EDI:' + nameEDIProvider(supplier(o)));

cancel (EOrder o) + { 
    IF email(supplier(o)) THEN {
        FOR o == eOrder(EOrderResponse r) DO
            EMAIL
                FROM fromEmailOrders()
                SUBJECT 'Заказ №'+ number(r) + 'покупателя ' + nameCustomer(o) + 'отменен'
                TO email(supplier(o));
    } ELSE {
        MESSAGE 'Не задан e-mail поставщика. Поставщик не будет уведолем об отмене';
        isRejected[UserOrder](o) <- NULL ;
    }
}

cancel 'Отменить заказ'(Order.Order order)  { 
    IF isEOrder[UserOrder](order AS Order.Order) AND NOT skipSend(order) THEN {
        isRejected[UserOrder](order) <- TRUE;
        cancel[EOrder](order);        
        apply();
    }
}

EXTEND FORM orders 
    PROPERTIES (o)  cancel SHOWIF isEOrder(o) AND showCancel(o);

DESIGN orders {
    emailContainer{
        MOVE PROPERTY (cancel(o));
    }
}

WHEN SET (code(EOrderMessage m)) AND good(m) DO {
    isSent(Purchase.UserOrder o) <- TRUE WHERE o == eOrder(m);
}

WHEN SET (UserOrder o == eOrder(EOrderResponse od)) DO {
    IF responseType(od) == EOrderResponseType.cancelled THEN {
        isRejected(o) <- TRUE;
    } ELSE {
        isConfirmed(o) <- TRUE;
    }
}

orderConfirmation(UserOrder o) += isEOrder(o);

notEqualPriceEDI = ABSTRACT CASE OVERRIDE BOOLEAN (Purchase.OrderDetail);
notEqualPriceEDI(OrderDetail d) += WHEN d IS Purchase.OrderDetail AND NOT priceResponseEDI(d) == price(d) THEN TRUE ;

notEqualResponseEDI(Purchase.Order o) =  o IS Purchase.Order AND NOT quantityResponseEDI(o) == quantityOrderDetail(o) OR [GROUP SUM 1 IF notEqualPriceEDI(OrderDetail d) BY order(d) ](o);
skipPostConfirmed(Purchase.Order o) += WHEN isEOrder(o AS Order) AND notEqualResponseEDI(o) THEN TRUE;

showAgree(Purchase.Order o) = isConfirmed(o) AND isEOrder(o) AND notEqualResponseEDI(o);
overAgree  ABSTRACT LIST ( UserOrder);

agree 'Подтвердить и провести'(UserOrder o)  { 
	NEWSESSION {
	
	    quantity(UserOrderDetail d) <- quantityResponseEDI(d) WHERE userOrder(d) == o;
	    price(UserOrderDetail d) <- priceResponseEDI(d) WHERE userOrder(d) == o AND priceResponseEDI(d) > 0.0;
	    
	    isPosted(o) <- TRUE;
	    overAgree(o);
	    
	    APPLY;
	    
	}
} TOOLBAR CONFIRM;

EXTEND FORM orders
    PROPERTIES (o) agree SHOWIF showAgree(o);
    
originalDate 'Дата (предзаказ)' = ABSTRACT DATE (Order) IN documentHeader;
originalDate 'Дата (предзаказ)' = DATA DATE (UserOrder) IN documentHeader;
originalDate(UserOrder o) += originalDate(o);    

originalDate(UserOrder o) <- shipmentDate(o)
    WHEN CHANGED (shipmentDate(o)) IF NOT (isConfirmed(o) OR isSent(o)); 
    
backgroundShipmentDate(Order o) += RGB(255,128,128) IF originalDate(o) != shipmentDate(o);

//nameStatus(Purchase.Order o) += WHEN isEOrder(o AS UserOrder) AND isConfirmed(o) AND NOT quantityResponseEDI(o) == quantityOrderDetail(o) AND NOT isRejected(o) AND NOT isPosted(o) AND NOT isClosed(o)
//                                THEN 'С изменениями';
EXTEND CLASS StatusOrder {
    change 'С изменениями'
}
status(Order o) += WHEN isEOrder(o AS UserOrder) AND isConfirmed(o) AND NOT quantityResponseEDI(o) == quantityOrderDetail(o) AND NOT isRejected(o) AND NOT isPosted(o) AND NOT isClosed(o) THEN StatusOrder.change;                                
                                
backgroundStatus(Purchase.Order o) += WHEN isConfirmed(o) THEN RGB(212,255,212);
backgroundStatus(Purchase.Order o) += WHEN isEOrder(o AS UserOrder) AND isConfirmed(o) AND NOT quantityResponseEDI(o) == quantityOrderDetail(o) THEN RGB(255,255,128);

backgroundStatusEDI(Purchase.Order o) = IF currentOrderMessage(o) THEN IF good(currentOrderMessage(o)) THEN RGB(212,255,212) ELSE RGB (255,128,128);

EXTEND FORM Purchase.orders 
    PROPERTIES (o) statusDescription BEFORE isConfirmed(o) BACKGROUND backgroundStatusEDI(o);
    
isCancel(UserOrder o) += isRejected(o);
cancelQuantity(Purchase.UserOrderDetail d) += originalQuantity(d);