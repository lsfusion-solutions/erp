MODULE EDocumentEDSTopBy;

REQUIRE EDocumentEDS, EDSTopBy;

NAMESPACE EDI;

aliasEDSServiceSender (EDocument d) = OVERRIDE aliasEDSService(currentUser()), aliasEDSService(sender(d));
passwordEDSServiceSender (EDocument d) = OVERRIDE passwordEDSService(currentUser()), passwordEDSService(sender(d));

aliasEDSServiceReceiver (EDocument d) = OVERRIDE aliasEDSService(currentUser()), extraAliasEDSService(receiver(d)) IF useExtraAlias(receiver(d)), aliasEDSService(receiver(d));
passwordEDSServiceReceiver (EDocument d) = OVERRIDE passwordEDSService(currentUser()), extraPasswordEDSService(receiver(d)) IF useExtraAlias(receiver(d)), passwordEDSService(receiver(d));

EDSServiceSenderTopBy (EDocument d) = OVERRIDE EDSServiceTopBy(currentUser()), EDSServiceTopBy(sender(d));
EDSServiceReceiverTopBy (EDocument d) = OVERRIDE EDSServiceTopBy(currentUser()), EDSServiceTopBy(receiver(d));

EDSServiceSender(STRING[100] provider, EDocument d) += WHEN provider == 'TopBy' AND d IS EDocument THEN EDSServiceSenderTopBy(d);
EDSServiceReceiver(STRING[100] provider, EDocument d) += WHEN provider == 'TopBy' AND d IS EDocument THEN EDSServiceReceiverTopBy(d);


sendRequestEDSSender(STRING[100] provider, EDocument d, FILE file) {
    sendRequestEDI('eds', 'eds', ('http://' + host(EDSServiceSender(provider,d)) + ':' + port(EDSServiceSender(provider,d)) + '/eds/services/EDSService?wsdl'), file, TRUE, client(EDSServiceSender(provider,d)));
}
sendRequestEDSReceiver(STRING[100] provider, EDocument d, FILE file) {
    sendRequestEDI('eds', 'eds', ('http://' + host(EDSServiceReceiver(provider,d)) + ':' + port(EDSServiceReceiver(provider,d)) + '/eds/services/EDSService?wsdl'), file, TRUE, client(EDSServiceReceiver(provider,d)));
}



//CTT-EDS-SIGN

getSignedDocumentSender(STRING[100] provider, EDocument eDocument, FILE contentSubXML, BOOLEAN interactive) + {
    IF edsApplication(EDSServiceSender(provider, eDocument)) == EDSApplication.edsSign THEN {
        IF aliasEDSServiceSender(eDocument) AND (OVERRIDE passwordEDSService(), passwordEDSServiceSender(eDocument)) THEN {
            signError() <- NULL;
            signResult() <- NULL;

            fileToString(contentSubXML);
            stringToFile(regexpReplace(resultString(), '\\r?\\\n\\s*', '', 'g'),'UTF-8','xml');
            
            EXPORT JSON FROM
                alias = aliasEDSServiceSender(eDocument),
                pass = (OVERRIDE passwordEDSService(), passwordEDSServiceSender(eDocument)),
                attributeOID = '1.2.112.1.2.1.1.1.1.2',
                dataType = 'EDIXML',
                dataBase64 = RAWFILE(resultFile())
            ;

            sendRequestEDI('eds',
                'eds',
                ('http://' + host(EDSServiceSender(provider,eDocument)) + ':' + port(EDSServiceSender(provider,eDocument)) + '/token/sign'),
                exportFile(),
                TRUE,
                client(EDSServiceSender(provider,eDocument)));

            IF statusHttp() == 200 THEN {
                fileToString(sendRequestEDIResponse());
                encodeBase64(resultString());
                signResult() <- encodedBase64();
            }
        } ELSE {
            IF interactive THEN {
                MESSAGE provider + ' Документ ' + documentID(eDocument) + ' не подписан: Alias или Пароль EDSService не задан' NOWAIT;
            }
            logToFile('edi', provider + ' error: Alias or Password for EDSService not found');
        }
        RETURN;
    }
}

getSignedDocumentReceiver(STRING[100] provider, EDocument eDocument, FILE contentSubXML, BOOLEAN interactive) + {
    IF edsApplication(EDSServiceReceiver(provider, eDocument)) == EDSApplication.edsSign THEN {
        IF aliasEDSServiceReceiver(eDocument) AND (OVERRIDE passwordEDSService(), passwordEDSServiceReceiver(eDocument)) THEN {
            signError() <- NULL;
            signResult() <- NULL;

            fileToString(contentSubXML);
            stringToFile(regexpReplace(resultString(), '\\r?\\\n\\s*', '', 'g'),'UTF-8','xml');

            EXPORT JSON FROM
                alias = aliasEDSServiceReceiver(eDocument),
                pass = (OVERRIDE passwordEDSService(), passwordEDSServiceReceiver(eDocument)),
                attributeOID = '1.2.112.1.2.1.1.1.1.2',
                dataType = 'EDIXML',
                dataBase64 = RAWFILE(resultFile())
            ;

            sendRequestEDI('eds',
                'eds',
                ('http://' + host(EDSServiceReceiver(provider,eDocument)) + ':' + port(EDSServiceReceiver(provider,eDocument)) + '/token/sign'),
                exportFile(),
                TRUE,
                client(EDSServiceReceiver(provider,eDocument)));

            IF statusHttp() == 200 THEN {
                fileToString(sendRequestEDIResponse());
                encodeBase64(resultString());
                signResult() <- encodedBase64();
            }
        } ELSE {
            IF interactive THEN {
                MESSAGE provider + ' Документ ' + documentID(eDocument) + ' не подписан: Alias или Пароль EDSService не задан' NOWAIT;
            }
            logToFile('edi', provider + ' error: Alias or Password for EDSService not found');
        }
        RETURN;
    }
}