MODULE CustomerEOrderTopByApi;

REQUIRE CustomerEOrder, TopByApi;

NAMESPACE EDI;

confirmNotFoundOrders 'Подтверждать ответы по которым не найден заказ' = DATA BOOLEAN ();

sendPurchaseOrder (EOrder o, STRING[100] login, STRING[100] password, TEXT url, STRING[100] outputDir, STRING[100] provider) {
    sendingCancelled() <- NULL;
    TRY {
        IF login AND password THEN {
            LOCAL error = TEXT();
            error() <- '';
            IF NOT GLNSupplierStock(o) THEN error() <- error() + 'EOrder ' + number(o) + ': Не задан GLN склада поставщика\n';
            IF NOT GLNCustomer(o) THEN error() <- error() + 'EOrder ' + number(o) + ': Не задан GLN покупателя\n';
            IF NOT GLNCustomerStock(o) THEN error() <- error() + 'EOrder ' + number(o) + ': Не задан GLN склада покупателя\n';
            IF NOT shipmentDateTime(o) >= sumMinutes(currentDateTime(),60) THEN error() <- error() + 'EOrder ' + number(o) + ': Не верная дата/время поставки';
            
            IF error() == '' THEN {
                LOCAL contentSubXML = FILE();
                EXPORT purchaseOrder OBJECTS o = o XML TO contentSubXML;
                IF outputDir THEN {
                    TRY{ mkdir(outputDir + '/sent/orders/' + toChar(currentDate(),'yyyyMMdd')); }
                    WRITE contentSubXML() TO outputDir + '/sent/orders/' + toChar(currentDate(),'yyyyMMdd') + '/' + number(o) + (IF isCancel(o) THEN 'c' ELSE '');
                }
                fileToString(contentSubXML());
                encodeBase64(resultString());
                LOCAL xml = XMLFILE();
                envelopeLogin() <- login;
                envelopePassword() <- password;
                envelopeFilename() <- CONCAT '', 'order', number(o);
                envelopeDocumentDate() <- sendDateTime(o);
                envelopeDocumentNumber() <- number(o);
                envelopeSender() <- GLNCustomer(o);
                envelopeReceiver() <- GLNCustomer(o);
                envelopeDeliveryPoint() <- GLNCustomerStock(o);
                envelopeDocumentType() <- 'ORDERS';
                envelopeContent() <- encodedBase64();
                EXPORT envelope XML TO xml;
                //EXPORT envelopePurchaseOrder OBJECTS o = o, login = login, password = password, innerXML = encodedBase64() XML TO xml;
                sendRequestEDI(url, xml());
                logToFile('edi', provider + ' (' + login + ') SendEOrder ' + number(o) +' request sent');
                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                IF requestError() THEN {
                    logToFile('edi', provider + ' (' + login + ') SendEOrder ' + number(o) + ': ' + requestError());
                    MESSAGE provider + ' (' + login + ') Заказ ' + number(o) + ' не выгружен: ' + requestError() NOWAIT;
                } ELSE {
                    IF isCancel(o) THEN exportedCanceled(o) <- TRUE; ELSE exported(o) <- TRUE;
                    logToFile('edi', provider + ' (' + login + ') SendEOrder ' + number(o) + ' request succeeded');
                    MESSAGE provider + ' (' + login + ') Заказ ' + number(o) + ' выгружен' NOWAIT;
                }
            } ELSE {
                logToFile('edi', provider + ' (' + login + ') SendEOrder ' + number(o) + ': Не все поля заполнены. ' + error());
                MESSAGE provider + ' (' + login + ') Заказ не выгружен: Не все поля заполнены ' + error() NOWAIT;
            }
        } ELSE {
            logToFile('edi', provider + ' (' + login + ') SendEOrder ' + number(o) + ': не заданы имя пользователя / пароль / хост / порт');
            MESSAGE provider + ' (' + login + ') Заказ не выгружен: не заданы имя пользователя / пароль / хост / порт'+(OVERRIDE ' № '+number(o),'') NOWAIT;
        }
    } CATCH {
        logToFile('edi', CONCAT '\n', provider + ' (' + login + ') SendEOrder ' + number(o) + 'error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
        MESSAGE 'Заказ не выгружен. Обратитесь к администратору'+(OVERRIDE ' № '+number(o),'') NOWAIT;
        
        CANCEL;
        sendingCancelled() <- TRUE; 
    }
}

overImportOrdrsp ABSTRACT (EOrderResponse);

overReceiveMessages(INTEGER i, STRING[100] login, STRING[100] password, TEXT url, STRING[100] archiveDir, BOOLEAN disableConfirmation, BOOLEAN receiveSupplierMessages, BOOLEAN sendReplies, STRING[100] provider) + {
    IF lower(documentType(i)) == 'ordrsp' THEN {
        TRY {
            IMPORT ordrsp XML FROM data(i);
            ordrspOrderNumber() <- trim(ordrspOrderNumber());
            IF eOrder(ordrspOrderNumber()) THEN {
                NEWSESSION NESTED LOCAL {
                    IF NOT eOrderResponse(ordrspSupplierGLN() + '/' + ordrspDocumentNumber() + '/' + ordrspOrderNumber()) THEN NEW r = EOrderResponse {
                        id(r) <- ordrspSupplierGLN() + '/' + ordrspDocumentNumber() + '/' + ordrspOrderNumber();
                    }
                    LOCAL idDetail = STRING[100] (INTEGER);
                    idDetail(INTEGER l) <- CONCAT '/', ordrspSupplierGLN(), ordrspDocumentNumber(), ordrspOrderNumber(), ordrspGTIN(l), (indexEOrderResponseDetail(l) IF indexEOrderResponseDetail(l) > 1) WHERE ordrspGTIN(l);
                    FOR ordrspGTIN(INTEGER l) AND NOT eOrderResponseDetail(idDetail(l)) DO NEW d = EOrderResponseDetail {
                        orderResponse(d) <- eOrderResponse(ordrspSupplierGLN() + '/' + ordrspDocumentNumber() + '/' + ordrspOrderNumber());
                        id(d) <- idDetail(l);
                    }
                    FOR EOrderResponse r == eOrderResponse(ordrspSupplierGLN() + '/' + ordrspDocumentNumber() + '/' + ordrspOrderNumber()) DO {
                        number(r) <- ordrspDocumentNumber();
                        dateTime(r) <- ordrspDocumentDate();
                        responseType(r) <- CASE
                                            WHEN ordrspResponseType() == 4 THEN EOrderResponseType.changed
                                            WHEN ordrspResponseType() == 27 THEN EOrderResponseType.cancelled
                                            WHEN ordrspResponseType() == 29 THEN EOrderResponseType.accepted;
                        note(r) <- STRING[100](ordrspComment());
                        supplier(r) <- legalEntityStockGLN(ordrspSupplierGLN());
                        customer(r) <- legalEntityGLN(ordrspBuyerGLN());
                        eOrder(r) <- eOrder(ordrspOrderNumber());
                        customerStock(r) <- customerStock(eOrder(ordrspOrderNumber()));
                        IF left(ordrspDeliveryDateTimeFirst(),1) == 'T' THEN {
                            ordrspDeliveryDateTimeFirst() <- toChar(currentDate(),'yyyy-MM-dd') + ordrspDeliveryDateTimeFirst();
                        }
                        IF left(ordrspDeliveryDateTimeSecond(),1) == 'T' THEN {
                            ordrspDeliveryDateTimeSecond() <- toChar(currentDate(),'yyyy-MM-dd') + ordrspDeliveryDateTimeSecond();
                        }
                        deliveryDateTime(r) <- toDateTimeFormat(ordrspDeliveryDateTimeFirst(),'yyyy-MM-ddThh24:mi:ss');
                        deliveryDateTimeSecond(r) <- toDateTimeFormat(ordrspDeliveryDateTimeSecond(),'yyyy-MM-ddThh24:mi:ss');
                        XMLPath(r) <- archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                        
                        LOCAL indexSku = INTEGER (INTEGER);
                        LOCAL sku = Sku (INTEGER);
                        
                        sku(INTEGER l) <- OVERRIDE (GROUP MAX sku(EOrderDetail dd) IF GTINBarcode(dd) == ordrspGTIN(l) AND order(dd) == eOrder(r)), skuGTIN(ordrspGTIN(l));
                        indexSku(INTEGER l) <- PARTITION SUM 1 ORDER ordrspQuantityOrdered(l), -ordrspQuantityAccepted(l), l BY sku(l); //сортировка по принятым откланенным, принятые первыми
                        fillIndexSku(eOrder(r));
                        
                        FOR ordrspGTIN(INTEGER l) AND EOrderResponseDetail d == eOrderResponseDetail(idDetail(l)) DO {
                            orderResponse(d) <- r;
                            sku(d) <- sku(l);
                            dataGTIN(d) <- ordrspGTIN(l);
                            action(d) <- CASE
                                            WHEN ordrspAction(l) == 1 THEN EOrderResponseDetailAction.added
                                            WHEN ordrspAction(l) == 3 THEN EOrderResponseDetailAction.changed
                                            WHEN ordrspAction(l) == 5 THEN EOrderResponseDetailAction.accepted
                                            WHEN ordrspAction(l) == 7 THEN EOrderResponseDetailAction.cancelled;
                            quantityOrdered(d) <- ordrspQuantityOrdered(l);
                            quantityAccepted(d) <- ordrspQuantityAccepted(l);
                            price(d) <- ordrspPriceElement(l);
                            sumNoNDS(d) <- ordrspPriceNoNDS(l);
                            sumNDS(d) <- ordrspPriceNDS(l);
                        }
                        FOR ordrspGTIN(INTEGER l) INLINE DO {
                            responseDetail(EOrderDetail od) <- eOrderResponseDetail(idDetail(l)) WHERE eOrder(ordrspOrderNumber()) == order(od) AND sku(l) == sku(od) AND indexSku(l) == localIndexSku(od);
                        }
                        overImportOrdrsp(r);
                        
                        APPLY NESTED LOCAL;
                        IF canceled() THEN {
                            IF NOT disableConfirmation AND sendReplies THEN {
                                LOCAL contentSubXML = FILE();
                                EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = ordrspDocumentNumber(), code = '1450', description = applyMessage() XML TO contentSubXML;
                                fileToString(contentSubXML());
                                encodeBase64(resultString());
                                LOCAL xml = XMLFILE();
                                envelopeLogin() <- login;
                                envelopePassword() <- password;
                                envelopeDocumentDate() <- currentDateTime();
                                envelopeDocumentNumber() <- id(i);
                                envelopeDocumentType() <- 'SYSTEMMESSAGE';
                                envelopeContent() <- encodedBase64();
                                EXPORT envelope XML TO xml;
                                //EXPORT envelopeMessage OBJECTS login = login, password = password, date = currentDateTime(), number = id(i), innerXML = encodedBase64() XML TO xml;
                                sendRequestEDI(url, xml());
                                logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) +' request sent');
                                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                                IF requestError() THEN {
                                    sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                                    logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ': ' + requestError());
                                    MESSAGE provider + ' (' + login + ') Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
                                } ELSE {
                                    logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ' request succeeded');
                                }
                            }
                            logToFile('edi', provider + ' (' + login + ') Import EOrderResponse ' + id(i) + ' failed: ' + applyMessage());
                            responsesFailed() <- responsesFailed() + 1;
                        } ELSE {
                            IF NOT disableConfirmation THEN {
                                LOCAL xml = XMLFILE();
                                EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO xml;
                                sendRequestEDI(url, xml());
                                logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request sent');
                                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                                IF requestError() THEN {
                                    logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                                    MESSAGE provider + ' (' + login + ') Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                                } ELSE {
                                    logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                                }
                            }
                            logToFile('edi', provider + ' (' + login + ') Import EOrderResponse ' + id(i) + ' succeeded');
                            responsesSucceeded() <- responsesSucceeded() + 1;
                        }
                    }
                }
            } ELSE {
                IF confirmNotFoundOrders() THEN {
                    IF NOT disableConfirmation THEN {
                        LOCAL xml = XMLFILE();
                        EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO xml;
                        sendRequestEDI(url, xml());
                        logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request sent');
                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                        IF requestError() THEN {
                            logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                            MESSAGE provider + ' (' + login + ') Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                        } ELSE {
                            logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                        }
                        messagesConfirmed() <- messagesConfirmed() + 1;
                    }
                } ELSE {
                    IF NOT disableConfirmation AND sendReplies THEN {
                        LOCAL contentSubXML = FILE();
                        EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = ordrspDocumentNumber(), code = '1450', description = ( provider + ' (' + login + ') Import EOrderResponse ' + id(i) + ' failed: ' + 'EOrder ' + (OVERRIDE ordrspOrderNumber(), 'NULL') + ' not found') XML TO contentSubXML;
                        fileToString(contentSubXML());
                        encodeBase64(resultString());
                        LOCAL xml = XMLFILE();
                        envelopeLogin() <- login;
                        envelopePassword() <- password;
                        envelopeDocumentDate() <- currentDateTime();
                        envelopeDocumentNumber() <- id(i);
                        envelopeDocumentType() <- 'SYSTEMMESSAGE';
                        envelopeContent() <- encodedBase64();
                        EXPORT envelope XML TO xml;
                        //EXPORT envelopeMessage OBJECTS login = login, password = password, date = currentDateTime(), number = id(i), innerXML = encodedBase64() XML TO xml;
                        sendRequestEDI(url, xml());
                        logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) +' request sent');
                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                        IF requestError() THEN {
                            sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                            logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ': ' + requestError());
                            MESSAGE provider + ' (' + login + ') Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
                        } ELSE {
                            logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ' request succeeded');
                        }
                    }
                }
                logToFile('edi', provider + ' (' + login + ') Import EOrderResponse ' + id(i) + ' failed: ' + 'EOrder ' + (OVERRIDE ordrspOrderNumber(), 'NULL') + ' not found');
                responsesFailed() <- responsesFailed() + 1;
            }
        } CATCH {
            logToFile('edi', CONCAT '\n', provider + ' (' + login + ') Parse EOrderResponse ' + id(i) + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE 'Ошибка при импорте ответа по заказу ' + id(i) +'. Обратитесь к администратору' NOWAIT;
            responsesFailed() <- responsesFailed() + 1;
        }
    }
}

overReceiveMessageDesadv ABSTRACT ();

overReceiveMessages(INTEGER i, STRING[100] login, STRING[100] password, TEXT url, STRING[100] archiveDir, BOOLEAN disableConfirmation, BOOLEAN receiveSupplierMessages, BOOLEAN sendReplies, STRING[100] provider) + {
    IF lower(documentType(i)) == 'desadv' THEN {
        TRY {
            IMPORT desadv XML FROM data(i);
            desadvOrderNumber() <- trim(desadvOrderNumber());
            overReceiveMessageDesadv();
            IF eOrder(desadvOrderNumber()) THEN {
                NEWSESSION NESTED LOCAL {
                    IF NOT eOrderDespatchAdvice(desadvSupplierGLN() + '/' + desadvDocumentNumber() + '/' + desadvOrderNumber()) THEN NEW a = EOrderDespatchAdvice {
                        id(a) <- desadvSupplierGLN() + '/' + desadvDocumentNumber() + '/' + desadvOrderNumber();
                    }
                    FOR desadvGTIN(INTEGER l) AND NOT eOrderDespatchAdviceDetail(desadvSupplierGLN() + '/' + desadvDocumentNumber() + '/' + desadvOrderNumber() + '/' + l) DO NEW d = EOrderDespatchAdviceDetail {
                        orderDespatchAdvice(d) <- eOrderDespatchAdvice(desadvSupplierGLN() + '/' + desadvDocumentNumber() + '/' + desadvOrderNumber());
                        id(d) <- desadvSupplierGLN() + '/' + desadvDocumentNumber() + '/' + desadvOrderNumber() + '/' + l;
                    }
                    FOR EOrderDespatchAdvice a == eOrderDespatchAdvice(desadvSupplierGLN() + '/' + desadvDocumentNumber() + '/' + desadvOrderNumber()) DO {
                        number(a) <- desadvDocumentNumber();
                        dateTime(a) <- desadvDocumentDate();
                        deliveryNoteNumber(a) <- desadvDeliveryNoteNumber();
                        deliveryNoteDateTime(a) <- toDateTime(desadvDeliveryNoteDate());
                        note(a) <- STRING[100](desadvComment());
                        supplier(a) <- legalEntityStockGLN(desadvSupplierGLN());
                        customer(a) <- legalEntityGLN(desadvBuyerGLN());
                        eOrder(a) <- eOrder(desadvOrderNumber());
                        customerStock(a) <- customerStock(eOrder(desadvOrderNumber()));
                        deliveryDateTime(a) <- desadvDeliveryDateTimeFirst();
                        XMLPath(a) <- archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                        FOR desadvGTIN(INTEGER l) AND EOrderDespatchAdviceDetail d == eOrderDespatchAdviceDetail(desadvSupplierGLN() + '/' + desadvDocumentNumber() + '/' + desadvOrderNumber() + '/' + l) DO {
                            sku(d) <- OVERRIDE (GROUP MAX sku(EOrderDetail dd) IF GTINBarcode(dd) == desadvGTIN(l) AND order(dd) == eOrder(a)), skuGTIN(desadvGTIN(l));
                            dataGTIN(d) <- desadvGTIN(l);
                            quantityOrdered(d) <- desadvQuantityOrdered(l);
                            quantityDespatch(d) <- desadvQuantityDespatch(l);
                            valueVAT(d) <- desadvVAT(l);
                            lineItemPrice(d) <- desadvLineItemPrice(l);
                            lineItemAmountWithoutCharges(d) <- desadvLineItemAmountWithoutCharges(l);
                            lineItemAmount(d) <- desadvLineItemAmount(l);
                            lineItemAmountCharges(d) <- desadvLineItemAmountCharges(l);
                        }
                        APPLY NESTED LOCAL;
                        IF canceled() THEN {
                            IF NOT disableConfirmation AND sendReplies THEN {
                                LOCAL contentSubXML = FILE();
                                EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = desadvDocumentNumber(), code = '1450', description = applyMessage() XML TO contentSubXML;
                                fileToString(contentSubXML());
                                encodeBase64(resultString());
                                LOCAL xml = XMLFILE();
                                envelopeLogin() <- login;
                                envelopePassword() <- password;
                                envelopeDocumentDate() <- currentDateTime();
                                envelopeDocumentNumber() <- id(i);
                                envelopeDocumentType() <- 'SYSTEMMESSAGE';
                                envelopeContent() <- encodedBase64();
                                EXPORT envelope XML TO xml;
                                //EXPORT envelopeMessage OBJECTS login = login, password = password, date = currentDateTime(), number = id(i), innerXML = encodedBase64() XML TO xml;
                                sendRequestEDI(url, xml());
                                logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) +' request sent');
                                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                                IF requestError() THEN {
                                    sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                                    logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ': ' + requestError());
                                    MESSAGE provider + ' (' + login + ') Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
                                } ELSE {
                                    logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ' request succeeded');
                                }
                            }
                            logToFile('edi', provider + ' (' + login + ') Import EOrderDespatchAdvice ' + id(i) + ' failed: ' + applyMessage());
                            despatchAdvicesFailed() <- despatchAdvicesFailed() + 1;
                        } ELSE {
                            IF NOT disableConfirmation THEN {
                                LOCAL xml = XMLFILE();
                                EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO xml;
                                sendRequestEDI(url, xml());
                                logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request sent');
                                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                                IF requestError() THEN {
                                    logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                                    MESSAGE provider + ' (' + login + ') Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                                } ELSE {
                                    logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                                }
                            }
                            logToFile('edi', provider + ' (' + login + ') Import EOrderDespatchAdvice ' + id(i) + ' succeeded');
                            despatchAdvicesSucceeded() <- despatchAdvicesSucceeded() + 1;
                        }
                    }
                }
            } ELSE {
                IF confirmNotFoundOrders() THEN {
                    IF NOT disableConfirmation THEN {
                        LOCAL xml = XMLFILE();
                        EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO xml;
                        sendRequestEDI(url, xml());
                        logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request sent');
                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                        IF requestError() THEN {
                            logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                            MESSAGE provider + ' (' + login + ') Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                        } ELSE {
                            logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                        }
                        messagesConfirmed() <- messagesConfirmed() + 1;
                    }
                } ELSE {
                    IF NOT disableConfirmation AND sendReplies THEN {
                        LOCAL contentSubXML = FILE();
                        EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = desadvDocumentNumber(), code = '1450', description = ( provider + ' (' + login + ') Import EOrderDespatchAdvice ' + id(i) + ' failed: ' + 'EOrder ' + (OVERRIDE desadvOrderNumber(), 'NULL') + ' not found') XML TO contentSubXML;
                        fileToString(contentSubXML());
                        encodeBase64(resultString());
                        LOCAL xml = XMLFILE();
                        envelopeLogin() <- login;
                        envelopePassword() <- password;
                        envelopeDocumentDate() <- currentDateTime();
                        envelopeDocumentNumber() <- id(i);
                        envelopeDocumentType() <- 'SYSTEMMESSAGE';
                        envelopeContent() <- encodedBase64();
                        EXPORT envelope XML TO xml;
                        //EXPORT envelopeMessage OBJECTS login = login, password = password, date = currentDateTime(), number = id(i), innerXML = encodedBase64() XML TO xml;
                        sendRequestEDI(url, xml());
                        logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) +' request sent');
                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                        IF requestError() THEN {
                            sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                            logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ': ' + requestError());
                            MESSAGE provider + ' (' + login + ') Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
                        } ELSE {
                            logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ' request succeeded');
                        }
                    }
                }
                logToFile('edi', provider + ' (' + login + ') Import EOrderDespatchAdvice ' + id(i) + ' failed: ' + 'EOrder ' + (OVERRIDE desadvOrderNumber(), 'NULL') + ' not found');
                despatchAdvicesFailed() <- despatchAdvicesFailed() + 1;
            }
        } CATCH {
            logToFile('edi', CONCAT '\n', provider + ' (' + login + ') Parse EOrderDespatchAdvice ' + id(i) + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE 'Ошибка при импорте уведомления об отгрузке ' + id(i) +'. Обратитесь к администратору' NOWAIT;
            despatchAdvicesFailed() <- despatchAdvicesFailed() + 1;
        }
    }
}

overReceiveSystemMessage(INTEGER i, STRING[100] login, STRING[100] password, TEXT url, STRING[100] archiveDir, BOOLEAN disableConfirmation, BOOLEAN sendReplies, STRING[100] provider) + {
    IF documentType() == 'ORDERS' THEN {
        NEWSESSION NESTED LOCAL {
            IF eOrder(documentNumber()) THEN {
                IF NOT eOrderMessage(messageDocumentNumber()) THEN NEW m = EOrderMessage {
                    number(m) <- messageDocumentNumber();
                }
                FOR EOrderMessage m == eOrderMessage(messageDocumentNumber()) DO {
                    dateTime(m) <- messageDocumentDate();
                    code(m) <- code();
                    description(m) <- OVERRIDE description(), description(code());
                    eOrder(m) <- eOrder(documentNumber());
                    XMLPath(m) <- archiveDir + '/received/' + toChar(currentDate(), 'yyyyMMdd') + '/' + id(i);
                    APPLY NESTED LOCAL;
                    IF canceled() THEN {
                        IF NOT disableConfirmation AND sendReplies THEN {
                            LOCAL contentSubXML = FILE();
                            EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = messageDocumentNumber(), code = '1450', description = applyMessage() XML TO contentSubXML;
                            fileToString(contentSubXML());
                            encodeBase64(resultString());
                            LOCAL xml = XMLFILE();
                            envelopeLogin() <- login;
                            envelopePassword() <- password;
                            envelopeDocumentDate() <- currentDateTime();
                            envelopeDocumentNumber() <- id(i);
                            envelopeDocumentType() <- 'SYSTEMMESSAGE';
                            envelopeContent() <- encodedBase64();
                            EXPORT envelope XML TO xml;
                            //EXPORT envelopeMessage OBJECTS login = login, password = password, date = currentDateTime(), number = id(i), innerXML = encodedBase64() XML TO xml;
                            sendRequestEDI(url, xml());
                            logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ' request sent');
                            importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                            IF requestError() THEN {
                                sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                                logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ': ' + requestError());
                                MESSAGE provider + ' (' + login + ') Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
                            } ELSE {
                                logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ' request succeeded');
                            }
                        }
                        logToFile('edi', provider + ' (' + login + ') Import EOrderMessage ' + id(i) + ' failed: ' + applyMessage());
                        orderMessagesFailed() <- orderMessagesFailed() + 1;
                    } ELSE {
                        IF NOT disableConfirmation THEN {
                            LOCAL xml = XMLFILE();
                            EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO xml;
                            sendRequestEDI(url, xml());
                            logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request sent');
                            importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                            IF requestError() THEN {
                                logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                                MESSAGE provider + ' (' + login + ') Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                            } ELSE {
                                logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                            }
                        }
                        logToFile('edi', provider + ' (' + login + ') Import EOrderMessage ' + id(i) + ' succeeded');
                        orderMessagesSucceeded() <- orderMessagesSucceeded() + 1;
                    }
                }
            } ELSE {
                IF confirmNotFoundOrders() THEN {
                    IF NOT disableConfirmation THEN {
                        LOCAL xml = XMLFILE();
                        EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO xml;
                        sendRequestEDI(url, xml());
                        logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request sent');
                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                        IF requestError() THEN {
                            logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                            MESSAGE provider + ' (' + login + ') Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                        } ELSE {
                            logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                        }
                        messagesConfirmed() <- messagesConfirmed() + 1;
                    }
                } ELSE {
                    IF NOT disableConfirmation AND sendReplies THEN {
                        LOCAL contentSubXML = FILE();
                        EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = ordrspDocumentNumber(), code = '1450', description = ( provider + ' (' + login + ') Import EOrderResponse ' + id(i) + ' failed: ' + 'EOrder ' + (OVERRIDE ordrspOrderNumber(), 'NULL') + ' not found') XML TO contentSubXML;
                        fileToString(contentSubXML());
                        encodeBase64(resultString());
                        LOCAL xml = XMLFILE();
                        envelopeLogin() <- login;
                        envelopePassword() <- password;
                        envelopeDocumentDate() <- currentDateTime();
                        envelopeDocumentNumber() <- id(i);
                        envelopeDocumentType() <- 'SYSTEMMESSAGE';
                        envelopeContent() <- encodedBase64();
                        EXPORT envelope XML TO xml;
                        //EXPORT envelopeMessage OBJECTS login = login, password = password, date = currentDateTime(), number = id(i), innerXML = encodedBase64() XML TO xml;
                        sendRequestEDI(url, xml());
                        logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) +' request sent');
                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                        IF requestError() THEN {
                            sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                            logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ': ' + requestError());
                            MESSAGE provider + ' (' + login + ') Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
                        } ELSE {
                            logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ' request succeeded');
                        }
                    }
                }
                logToFile('edi', provider + ' (' + login + ') Import EOrderResponse ' + id(i) + ' failed: ' + 'EOrder ' + (OVERRIDE ordrspOrderNumber(), 'NULL') + ' not found');
                orderMessagesFailed() <- orderMessagesFailed() + 1;
            }
        }
        RETURN;
    }
    //неплохо бы ORDRSP принимать к тому заказу к кторому он относится, но пока просто помечаем как обработанный
    IF documentType() == 'SYSTEMMESSAGE' OR documentType() == 'ORDRSP' THEN {
        logToFile('edi', provider + ' (' + login + ') Parse Order Message ' + id(i) + ' skipped for documentType ' + documentType());
        IF NOT disableConfirmation THEN {
            LOCAL xml = XMLFILE();
            EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO xml;
            sendRequestEDI(url, xml());
            logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request sent');
            importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
            IF requestError() THEN {
                logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                MESSAGE  provider + ' (' + login + ') Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
            } ELSE {
                logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
            }
        }
        messagesConfirmed() <- messagesConfirmed() + 1;
        RETURN;
    }
}

good(EOrderMessage m) += WHEN (code(m) == '1250' OR code(m) == '1251' OR code(m) == '1252') THEN TRUE ;