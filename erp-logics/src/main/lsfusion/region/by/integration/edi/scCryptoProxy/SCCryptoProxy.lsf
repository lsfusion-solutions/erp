MODULE SCCryptoProxy;

REQUIRE EDS, LegalEntityBy, SignAvest;

NAMESPACE EDI;

EXTEND CLASS EDSApplication {
    sccp '(СТТ) SC-CryptoProxy'
}

useAttribute 'Использовать атрибутный сертификат' = DATA BOOLEAN (EDSService);
legalEntity = DATA LegalEntity(EDSService);
unpLegalEntity 'УНП' (EDSService e) = UNP(legalEntity(e));

CONSTRAINT legalEntity(EDSService e) AND NOT isCompany(legalEntity(e))
    CHECKED BY legalEntity[EDSService]
    MESSAGE 'Должны быть выбрана организация являющаяся компаниеей';

CONSTRAINT useAttribute(EDSService e) AND NOT unpLegalEntity(e) 
    MESSAGE 'Не задан УНП для атрибутного сертификата';

EXTEND FORM EDSService 
    PROPERTIES useAttribute(o) SHOWIF edsApplication(o) == EDSApplication.sccp,
               unpLegalEntity(o) SHOWIF useAttribute(o)
;
DESIGN EDSService {
    PROPERTY (unpLegalEntity(o)) {notNull = TRUE;}
    size = (820, 140); //todo: после перехода на 6 версию можно сделать  (-1, -1)
}


//CTT-EDS-SIGN
alias 'Идентификатор ключа' = DATA LOCAL STRING[150](INTEGER) CHARWIDTH 25;

FORM listAliases 'Список ключей'
    OBJECTS value = INTEGER
    PROPERTIES(value) alias READONLY
    FILTERS imported(value)
;
DESIGN listAliases {
    width = 600;
}
notBeforeISO8601 'Действителен с' = DATA LOCAL DATETIME (INTEGER);
subjectName 'Владелец' = DATA LOCAL STRING(INTEGER) CHARWIDTH 50;
notAfterISO8601 'Действителен до' = DATA LOCAL DATETIME(INTEGER);

FORM certificates 'Список ключей'
    OBJECTS certificates = INTEGER EXTID 'Certificates'
    PROPERTIES(certificates) READONLY subjectName EXTID 'SubjectName', alias EXTID 'PubKeyID',
        notBeforeISO8601 BACKGROUND RGB(255,124,124) IF notBeforeISO8601(certificates) > currentDateTime() OR notAfterISO8601(certificates) < currentDateTime() EXTID 'NotBeforeISO8601', 
        notAfterISO8601 BACKGROUND RGB(255,124,124) IF notBeforeISO8601(certificates) > currentDateTime() OR notAfterISO8601(certificates) < currentDateTime()  EXTID 'NotAfterISO8601'
    FILTERS imported(certificates);


getCN(STRING s) = FORMULA 'replace((regexp_matches($1,\'^CN="?(.+?)"?,.+?\'))[1], \'""\', \'"\')';

selected = DATA LOCAL INTEGER ();

listAliases 'Получить список ключей' (EDSService s) {
    IF edsApplication(s) == EDSApplication.sccp THEN {
        timeoutHttp() <- 300000;
        IF client(s) THEN {
            EXTERNAL HTTP CLIENT GET 'http://' + host(s) + ':' + port(s) + '/SCCrypto/ra/certs' HEADERS httpHeadersEDI TO sendRequestEDIResponse;
        } ELSE {
            EXTERNAL HTTP GET 'http://' + host(s) + ':' + port(s) + '/SCCrypto/ra/certs' HEADERS httpHeadersEDI TO sendRequestEDIResponse;
        }

        IF statusHttp() == 200 THEN {
            IMPORT certificates JSON FROM sendRequestEDIResponse();
            subjectName(INTEGER r) <- getCN(subjectName(r));
            DIALOG certificates OBJECTS certificates INPUT DO {
                selected() <- certificates;
            }
        } ELSE {
            MESSAGE CONCAT ' ', 'Неизвестная ошибка: статус ', statusHttp() NOWAIT;
            logToFile('edi', CONCAT ' ', 'Неизвестная ошибка: статус ', statusHttp());
        }
    }
}

//SC-CryptoProxy
GROUP auth EXTID 'Auth';

keyID = DATA LOCAL STRING();
password = DATA LOCAL STRING();
OID = DATA LOCAL STRING(INTEGER);
text = DATA LOCAL STRING(INTEGER);

FORM sccpSign
    PROPERTIES =TRUE EXTID 'OptAddAllCert', =TRUE EXTID 'OptAddCert', =TRUE EXTID 'OptCheckPrivateKey', encodedBase64() EXTID 'DataB64'
    PROPERTIES IN auth keyID() EXTID 'KeyID', password() EXTID 'Password', = 1 EXTID 'CryptoType'

    OBJECTS attributes = INTEGER EXTID 'Attributes'
    PROPERTIES(attributes) text EXTID 'Text', OID
    FILTERS OID(attributes);

GROUP signInfo EXTID 'SignInfo';

issuerSerial = DATA LOCAL STRING();
subjectName = DATA LOCAL STRING();
signDateTimeISO8601 = DATA LOCAL DATETIME ();
issuerName = DATA LOCAL STRING();
serial = DATA LOCAL STRING();
errorCode = DATA LOCAL INTEGER();
resultB64 = DATA LOCAL STRING();

FORM sccpSignResult
    PROPERTIES() errorCode EXTID 'ErrorCode', signError EXTID 'ErrorMessage', resultB64 EXTID 'ResultB64'
    PROPERTIES() IN signInfo issuerSerial EXTID 'IssuerSerial', subjectName EXTID 'SubjectName', signDateTimeISO8601 EXTID 'SignDateTimeISO8601', issuerName EXTID 'IssuerName', serial EXTID 'Serial'
;

// Подпись
sign(STRING base64Data, EDSService e) {
    signError() <- NULL;
    signResult() <- NULL;

    encodedBase64() <- base64Data;

    EXPORT sccpSign JSON;

    sendRequestEDI(NULL, NULL, 'http://' + host(e) + ':' + port(e) + '/SCCrypto/ra/signd', exportFile(), NULL, client(e));

    IMPORT sccpSignResult JSON FROM sendRequestEDIResponse();
    fileToString(sendRequestEDIResponse());

    IF errorCode() == 0 THEN {
        base64Signature() <- resultB64();
        signatureType() <- 'cms-detached-sign/json';
    } ELSE {
        MESSAGE signError() NOWAIT;
    }
}
