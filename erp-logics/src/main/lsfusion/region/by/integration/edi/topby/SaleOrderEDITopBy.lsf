MODULE SaleOrderEDITopBy;

REQUIRE EDI, SaleOrder, TopBy;

NAMESPACE EDI;

saleOperationTopBy 'Операция' = DATA Sale.Operation();
nameSaleOperationTopBy 'Операция' () = name(saleOperationTopBy());
supplierStockTopBy 'Склад поставщика' = DATA Stock();
nameSupplierStockTopBy 'Склад поставщика' () = name(supplierStockTopBy());
CONSTRAINT supplierStockTopBy() AND NOT isCompany(supplierStockTopBy())
    CHECKED BY supplierStockTopBy[] MESSAGE 'Выбран склад поставщика, который не принадлежит компании';

EXTEND FORM integrationData
    PROPERTIES() nameSaleOperationTopBy, nameSupplierStockTopBy
;

DESIGN integrationData {
    ovs {
        NEW sale {
            caption = 'Продажа';
            MOVE PROPERTY (nameSaleOperationTopBy());
            MOVE PROPERTY (nameSupplierStockTopBy());
        }
    }
}

ordersDocumentNumber = DATA LOCAL NESTED STRING[48]();
ordersDocumentDate = DATA LOCAL NESTED DATE();
ordersDocumentType = DATA LOCAL NESTED INTEGER();
ordersBuyerGLN = DATA LOCAL NESTED STRING[13]();
ordersDestinationGLN = DATA LOCAL NESTED STRING[13]();
ordersSupplierGLN = DATA LOCAL NESTED STRING[13]();
ordersDeliveryDateTimeFirst = DATA LOCAL NESTED DATETIME();
ordersComment = DATA LOCAL NESTED ISTRING[500]();
ordersGTIN = DATA LOCAL NESTED STRING[15](INTEGER);
ordersQuantityOrdered = DATA LOCAL NESTED NUMERIC[16,5](INTEGER);
ordersPriceElement = DATA LOCAL NESTED NUMERIC[16,2](INTEGER);
ordersTax = DATA LOCAL NESTED NUMERIC[4,2](INTEGER);

FORM importOrders
    PROPERTIES() ordersDocumentNumber EXTID 'documentNumber', ordersDocumentDate EXTID 'documentDate',
                 ordersDocumentType EXTID 'documentType', ordersBuyerGLN EXTID 'buyerGLN',
                 ordersDestinationGLN EXTID 'destinationGLN', ordersSupplierGLN EXTID 'supplierGLN',
                 ordersDeliveryDateTimeFirst EXTID 'deliveryDateTimeFirst', ordersComment EXTID 'comment'
    OBJECTS i = INTEGER EXTID 'line'
    PROPERTIES(i) ordersGTIN EXTID 'GTIN', ordersQuantityOrdered EXTID 'quantityOrdered',
                  ordersPriceElement EXTID 'priceElement', ordersTax EXTID 'tax'
;

orderDocumentNumber = DATA STRING[48](Sale.UserOrder);
isCancel 'Отменен' = DATA BOOLEAN (Sale.UserOrder);
quantityOrdered = DATA NUMERIC[16,5] (Sale.UserOrderDetail);

CONSTRAINT SET(isPosted(Sale.UserOrder o)) AND isCancel(o) MESSAGE 'Нельзя проводить отмененный заказ';

@openXML(Sale.UserOrder,o,Sale.orders);

overReceiveMessages(INTEGER i, STRING[100] login, STRING[100] password, TEXT url, STRING[100] archiveDir, BOOLEAN disableConfirmation, BOOLEAN receiveSupplierMessages, BOOLEAN sendReplies, STRING[100] provider) + {
    IF lower(documentType(i)) == 'orders' AND receiveSupplierMessages THEN {
        TRY {
            IMPORT importOrders XML FROM data(i);
            IF ordersDocumentType() == 31 OR (ordersDocumentType() == 9 AND Sale.userOrder(ordersSupplierGLN() + '/' + ordersDocumentNumber())) THEN {
                logToFile('edi', provider + ' (' + login + ') Parse Order ' + id(i) + ' skipped for documentType ' + ordersDocumentType());
                IF NOT disableConfirmation THEN {
                    LOCAL xml = XMLFILE();
                    EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO xml;
                    sendRequestEDI(url, xml());
                    logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request sent');
                    importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                    IF requestError() THEN {
                        logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                        MESSAGE provider + ' (' + login + ') Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                    } ELSE {
                        logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                    }
                }
                supplierOrdersFailed() <- supplierOrdersFailed() + 1;
            } ELSE {
                NEWSESSION NESTED LOCAL {
                    IF ordersDocumentType() == 9 THEN NEW o = Sale.UserOrder {
                        id(o) <- ordersSupplierGLN() + '/' + ordersDocumentNumber();
                    }
                    IF ordersDocumentType() == 5 THEN {
                        DELETE Sale.UserOrderDetail d WHERE d IS Sale.UserOrderDetail AND userOrder(d) == Sale.userOrder(ordersSupplierGLN() + '/' + ordersDocumentNumber());
                    }
                    FOR ordersGTIN(INTEGER l) AND NOT Sale.userOrderDetail(ordersSupplierGLN() + '/' + ordersDocumentNumber() + '/' + l) AND (ordersDocumentType() == 5 OR ordersDocumentType() == 9) DO NEW d = UserOrderDetail {
                        userOrder(d) <- Sale.userOrder(ordersSupplierGLN() + '/' + ordersDocumentNumber());
                        id(d) <- ordersSupplierGLN() + '/' + ordersDocumentNumber() + '/' + l;
                    }
                    FOR Sale.UserOrder o == Sale.userOrder(ordersSupplierGLN() + '/' + ordersDocumentNumber()) DO {
                        IF ordersDocumentType() == 1 THEN {
                            isCancel(o) <- TRUE;
                            isPosted(o) <- NULL;
                        } ELSE IF ordersDocumentType() == 5 OR ordersDocumentType() == 9 THEN {
                            orderDocumentNumber(o) <- ordersDocumentNumber();
                            date(o) <- ordersDocumentDate();
                            supplier(o) <- legalEntityGLN(ordersSupplierGLN());
                            //возможно операцию и склад нужно пеедавать параметрами 
                            supplierStock(o) <- supplierStockTopBy();
                            customer(o) <- legalEntityGLN(ordersBuyerGLN());
                            customerStock(o) <- stockGLN(ordersDestinationGLN());
                            operation(o) <- saleOperationTopBy();
                            shipmentDate(o) <- DATE(ordersDeliveryDateTimeFirst());
                            shipmentTime(o) <- TIME(ordersDeliveryDateTimeFirst());
                            note(o) <- ordersComment();
                            
                            FOR ordersGTIN(INTEGER l) AND Sale.UserOrderDetail d == Sale.userOrderDetail(ordersSupplierGLN() + '/' + ordersDocumentNumber() + '/' + l) DO {
                                sku(d) <- skuGTIN(ordersGTIN(l));
                                quantity(d) <- ordersQuantityOrdered(l);
                                quantityOrdered(d) <- ordersQuantityOrdered(l);
                                price(d) <- ordersPriceElement(l);
                                valueVAT(d) <- ordersTax(l);
                            }
                        }
                        XMLPath(o) <- archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                        APPLY NESTED LOCAL;
                        IF canceled() THEN {
                            IF NOT disableConfirmation AND sendReplies THEN {
                                LOCAL contentSubXML = FILE();
                                EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = ordersDocumentNumber(), code = '1450', description = applyMessage() XML TO contentSubXML;
                                fileToString(contentSubXML());
                                encodeBase64(resultString());
                                LOCAL xml = XMLFILE();
                                envelopeLogin() <- login;
                                envelopePassword() <- password;
                                envelopeDocumentDate() <- currentDateTime();
                                envelopeDocumentNumber() <- id(i);
                                envelopeDocumentType() <- 'SYSTEMMESSAGE';
                                envelopeContent() <- encodedBase64();
                                EXPORT envelope XML TO xml;
                                //EXPORT envelopeMessage OBJECTS login = login, password = password, date = currentDateTime(), number = id(i), innerXML = encodedBase64() XML TO xml;
                                sendRequestEDI(url, xml());
                                logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) +' request sent');
                                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                                IF requestError() THEN {
                                    sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                                    logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ': ' + requestError());
                                    MESSAGE provider + ' (' + login + ') Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
                                } ELSE {
                                    logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ' request succeeded');
                                }
                            }
                            logToFile('edi', provider + ' (' + login + ') Import Order ' + id(i) + ' failed: ' + applyMessage());
                            supplierOrdersFailed() <- supplierOrdersFailed() + 1;
                        } ELSE {
                            IF NOT disableConfirmation THEN {
                                LOCAL xml = XMLFILE();
                                EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO xml;
                                sendRequestEDI(url, xml());
                                logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request sent');
                                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                                IF requestError() THEN {
                                    logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                                    MESSAGE provider + ' (' + login + ') Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                                } ELSE {
                                    logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                                }
                            }
                            logToFile('edi', provider + ' (' + login + ') Import Order ' + id(i) + ' succeeded');
                            supplierOrdersSucceeded() <- supplierOrdersSucceeded() + 1;
                        }
                    }
                }
            }
        } CATCH {
            logToFile('edi', CONCAT '\n', provider + ' (' + login + ') Parse Order ' + id(i) + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE 'Ошибка при импорте заказа ' + id(i) +'. Обратитесь к администратору' NOWAIT;
            supplierOrdersFailed() <- supplierOrdersFailed() + 1;
        }
        
    }
}


GLNSupplier (Sale.UserOrder o) = GLN(supplier(o));
GLNSupplierStock (Sale.UserOrder o) = GLN(supplierStock(o));
GLNCustomer (Sale.UserOrder o) = GLN(customer(o));
GLNCustomerStock (Sale.UserOrder o) = GLN(customerStock(o));
GTINBarcode(Sale.UserOrderDetail d) = GTINBarcode(sku(d));

action(Sale.UserOrderDetail d) = IF isCancel(userOrder(d)) OR quantity(d) == 0 THEN '7' ELSE (IF NOT quantityOrdered(d) THEN '1' ELSE (IF quantityOrdered(d) == quantity(d) THEN '5' ELSE '3'));
function(Sale.UserOrder o) = IF isCancel(o) THEN '27' ELSE (IF (GROUP SUM 1 IF userOrder(Sale.UserOrderDetail d) == o AND quantity(d) AND NOT action(d) == '5') THEN '4' ELSE '29');

exported 'Экспортирован' = DATA BOOLEAN (Sale.UserOrder);
exportedCanceled 'Экспортирован (отмена)' = DATA BOOLEAN (Sale.UserOrder);
sendSaleOrderSupplier 'Отправить (поставщик)'  ABSTRACT LIST (Sale.UserOrder);
sendCancelSaleOrderSupplier 'Отменить (поставщик)'  ABSTRACT LIST (Sale.UserOrder);
EXTEND FORM Sale.orders PROPERTIES(o) isCancel READONLY, exported READONLY, exportedCanceled READONLY, sendSaleOrderSupplier PANEL SHOWIF orderDocumentNumber(o), sendCancelSaleOrderSupplier PANEL SHOWIF orderDocumentNumber(o);
DESIGN Sale.orders {
    actionContainer {
        NEW edi {
            caption = 'EDI';
            MOVE PROPERTY (sendSaleOrderSupplier(o));
            MOVE PROPERTY (sendCancelSaleOrderSupplier(o));
        }
    }
}

FORM saleOrder FORMEXTID 'ORDRSP'
    OBJECTS o = Sale.UserOrder PANEL
    PROPERTIES READONLY documentNumber = STRING[48](number(o)) EXTID 'documentNumber',
                        documentDate = toChar(dateTime(o),'yyyy-MM-ddThh24:mi:ss') EXTID 'documentDate',
                        function(o) EXTID 'function',
                        GLNCustomer(o) EXTID 'buyerGLN',
                        buyerName = STRING[150](nameCustomer(o)) EXTID 'buyerName',
                        GLNCustomerStock(o) EXTID 'destinationGLN',
                        destinationName = STRING[150](nameCustomerStock(o)) EXTID 'destinationName',
                        GLNSupplier(o) EXTID 'supplierGLN',
                        supplierName = STRING[150](nameSupplier(o)) EXTID 'supplierName',
                        GLNSupplierStock(o) EXTID 'stGLN',
                        stName = STRING[150](nameSupplierStock(o)) EXTID 'stName',
                        orderDocumentNumber(o) EXTID 'orderNumber',
                        orderDate = toChar(dateTime(o),'yyyy-MM-ddThh24:mi:ss') EXTID 'orderDate',
                        deliveryDateTimeFirst = toChar(shipmentDateTime(o),'yyyy-MM-ddThh24:mi:ss') EXTID 'deliveryDateTimeFirst',
                        lineQuantity = (GROUP SUM 1 IF quantity(Sale.UserOrderDetail od) AND userOrder(od) == o) EXTID 'lineQuantity',
                        comment = STRING[500](note(o)) EXTID 'comment'
    OBJECTS d = Sale.UserOrderDetail EXTID 'line'
    FILTERS userOrder(d) = o
    PROPERTIES READONLY GTINBarcode(d) EXTID 'GTIN',
                        idSku(d) EXTID 'IDSupplier',
                        action(d) EXTID 'action',
                        nameSku(d) EXTID 'fullName',
                        quantityOrdered(d) EXTID 'quantityOrdered',
                        quantity(d) EXTID 'quantityAccepted',
                        measurement = (OVERRIDE extraCodeUOM(UOM(sku(d))), 'PCE') EXTID 'measurement',
                        priceElement = NUMERIC[16,2](round2(price(d))) EXTID 'priceElement',
                        priceNoNDS = NUMERIC[18,2](round2(sum(d))) EXTID 'priceNoNDS',
                        priceNDS = NUMERIC[18,2](round2(invoiceSum(d))) EXTID 'priceNDS',
                        tax = NUMERIC[4,2](round2(valueVAT(d))) EXTID 'tax'
    FILTERS quantity(d)
;

//FORM envelopeSaleOrder
//    PROPERTIES ATTR ='http://topby.by/' EXTID 'xmlns:top'
//    OBJECTS login = TEXT, password = TEXT, innerXML = TEXT
//    OBJECTS o = Sale.UserOrder
//    PROPERTIES DRAW o IN sendDocument VALUE(login) EXTID 'top:username', VALUE(password) EXTID 'top:password'
//    PROPERTIES IN sendDocument filename = (CONCAT '', 'order', number(o)) EXTID 'top:filename', 
//                  documentDate = toChar(dateTime(o),'yyyy-MM-ddThh24:mi:ss') EXTID 'top:documentDate',
//                  number(o) EXTID 'top:documentNumber',
//                  senderCode = GLNCustomer(o) EXTID 'top:senderCode',
//                  receiverCode = GLNCustomer(o) EXTID 'top:receiverCode',
//                  GLNCustomerStock(o) EXTID 'top:deliveryPointCode',
//                  documentType = 'ORDRSP' EXTID 'top:documentType'
//    PROPERTIES IN sendDocument VALUE(innerXML) EXTID 'top:content'
//    FORMEXTID 'soapenv=http://schemas.xmlsoap.org/soap/envelope/:Envelope'
//;

sendSupplierSaleOrder 'Отправить (поставщик)' (Sale.UserOrder o, STRING[100] login, STRING[100] password, TEXT url, STRING[100] outputDir, STRING[100] provider) {
    TRY {
        IF login AND password THEN {
            LOCAL error = TEXT();
            error() <- '';
            IF NOT GLNSupplier(o) THEN error() <- error() + 'SupplierOrder ' + number(o) + ': Не задан GLN поставщика\n';
            IF NOT GLNCustomer(o) THEN error() <- error() + 'SupplierOrder ' + number(o) + ': Не задан GLN покупателя\n';
            IF NOT GLNCustomerStock(o) THEN error() <- error() + 'SupplierOrder ' + number(o) + ': Не задан GLN склада покупателя\n';
            IF shipmentDateTime(o) < sumMinutes(currentDateTime(),60) THEN error() <- error() + 'SupplierOrder ' + number(o) + ': Не верная дата/время поставки';
            
            IF error() == '' THEN {
                LOCAL contentSubXML = FILE();
                EXPORT saleOrder OBJECTS o = o XML TO contentSubXML;
                IF outputDir THEN {
                    TRY{ mkdir(outputDir + '/sent/orders/' + toChar(currentDate(),'yyyyMMdd')); }
                    WRITE contentSubXML() TO outputDir + '/sent/orders/' + toChar(currentDate(),'yyyyMMdd') + '/' + number(o) + (IF isCancel(o) THEN 'c' ELSE '');
                }
                fileToString(contentSubXML());
                encodeBase64(resultString());
                LOCAL xml = XMLFILE();
                envelopeLogin() <- login;
                envelopePassword() <- password;
                envelopeFilename() <- CONCAT '', 'order', number(o);
                envelopeDocumentDate() <- dateTime(o);
                envelopeDocumentNumber() <- number(o);
                envelopeSender() <- GLNCustomer(o);
                envelopeReceiver() <- GLNCustomer(o);
                envelopeDeliveryPoint() <- GLNCustomerStock(o);
                envelopeDocumentType() <- 'ORDRSP';
                envelopeContent() <- encodedBase64();
                EXPORT envelope XML TO xml;
                //EXPORT envelopeSaleOrder OBJECTS o = o, login = login, password = password, innerXML = encodedBase64() XML TO xml;
                sendRequestEDI(url, xml());
                logToFile('edi', provider + ' (' + login + ') SendSupplierOrder ' + number(o) +' request sent');
                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                IF requestError() THEN {
                    logToFile('edi', provider + ' (' + login + ') SendSupplierOrder ' + number(o) + ': ' + requestError());
                    MESSAGE provider + ' (' + login + ') Заказ ' + number(o) + ' не выгружен: ' + requestError() NOWAIT;
                } ELSE {
                    IF isCancel(o) THEN exportedCanceled(o) <- TRUE; ELSE exported(o) <- TRUE;
                    logToFile('edi', provider + ' (' + login + ') SendSupplierOrder ' + number(o) + ' request succeeded');
                    MESSAGE provider + ' (' + login + ') Заказ ' + number(o) + ' выгружен' NOWAIT;
                }
            } ELSE {
                logToFile('edi', provider + ' (' + login + ') SendSupplierOrder: Не все поля заполнены. ' + error());
                MESSAGE provider + ' (' + login + ') Заказ не выгружен: Не все поля заполнены ' + error() NOWAIT;
            }
        } ELSE {
            logToFile('edi', provider + ' (' + login + ') SendSupplierOrder: не заданы имя пользователя / пароль / хост / порт');
            MESSAGE provider + ' (' + login + ') Заказ не выгружен: не заданы имя пользователя / пароль / хост / порт' NOWAIT;
        }
    } CATCH {
        logToFile('edi', CONCAT '\n', provider + ' (' + login + ') error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
        MESSAGE 'Заказ не выгружен. Обратитесь к администратору' NOWAIT;
    }
}

sendSupplierSaleOrderTopBy (Sale.UserOrder o) {
    checkIsServer();
    IF isServer() THEN NEWSESSION {
        sendSupplierSaleOrder(o, loginTopBy(supplier(o)), passwordTopBy(supplier(o)), ('http://' +  hostTopBy(supplier(o)) + ':' + portTopBy(supplier(o)) + '/DmcService'), outputDirTopBy(), 'TopBy');
        APPLY;
    }
}

sendSaleOrderSupplier(Sale.UserOrder o) + { IF EDIProvider(customer(o)) == EDIProvider.topBy AND NOT isCancel(o) THEN IF exported(o) THEN MESSAGE ('Заказ уже отправлен '+(OVERRIDE number(o), '')); ELSE sendSupplierSaleOrderTopBy(o); }
sendCancelSaleOrderSupplier(Sale.UserOrder o) + { IF EDIProvider(customer(o)) == EDIProvider.topBy THEN IF exportedCanceled(o) THEN MESSAGE 'Заказ уже отменен'; ELSE { isCancel(o) <- TRUE; APPLY; sendSupplierSaleOrderTopBy(o); } }