MODULE EDocumentTopBy;

REQUIRE EDocumentEDSTopBy;

NAMESPACE EDI;

blrdocUserID = DATA LOCAL NESTED STRING[35]();
GROUP document EXTID 'Document';
blrdocDocumentID = DATA LOCAL NESTED STRING[35]();
blrdocCreationDateTime = DATA LOCAL NESTED DATETIME();
blrdocFunctionCode = DATA LOCAL NESTED STRING[3]();
blrdocNumber = DATA LOCAL NESTED STRING[25]();
blrdocDate = DATA LOCAL NESTED DATE();
blrdocType = DATA LOCAL NESTED STRING[255]();
blrdocDocument = DATA LOCAL NESTED RAWFILE();
blrdocDocumentName = DATA LOCAL NESTED STRING[255]();
blrdocDocumentRoute = DATA LOCAL NESTED STRING[1]();
GROUP blrdocSender EXTID 'Sender' : document;
blrdocSenderGLN = DATA LOCAL NESTED STRING[13]();
GROUP blrdocReceiver EXTID 'Receiver' : document;
blrdocReceiverGLN = DATA LOCAL NESTED STRING[13]();

FORM blrdoc
    PROPERTIES IN messageHeader blrdocUserID() EXTID 'UserID'
    PROPERTIES IN document blrdocDocumentID() EXTID 'DocumentID',
                           blrdocCreationDateTime() EXTID 'CreationDateTime',
                           blrdocFunctionCode() EXTID 'FunctionCode',
                           blrdocNumber() EXTID 'eDocumentNumber',
                           blrdocDate() EXTID 'eDocumentDate',
                           blrdocType() EXTID 'eDocumentType',
                           blrdocDocument() EXTID 'eDocument',
                           blrdocDocumentName() EXTID 'eDocumentName',
                           blrdocDocumentRoute() EXTID 'eDocumentRoute'
    PROPERTIES IN blrdocSender blrdocSenderGLN() EXTID 'GLN'
    PROPERTIES IN blrdocReceiver blrdocReceiverGLN() EXTID 'GLN'
;

exportBlrdocDateTime = DATA LOCAL NESTED DATETIME();

GROUP sender EXTID 'Sender';
GROUP receiver EXTID 'Receiver';

hideMessageHeaderBlrdoc = DATA LOCAL BOOLEAN ();

FORM exportBlrdoc FORMEXTID 'BLRDOC'
    PROPERTIES ATTR ='0.1' IF NOT hideMessageHeaderBlrdoc() EXTID 'version'
    OBJECTS ed = EDocument PANEL
    
    OBJECTS edh = EDocument EXTID 'MessageHeader'
    FILTERS (edh == ed AND NOT hideMessageHeaderBlrdoc()) OR NOT edh IS EDocument
    PROPERTIES DRAW edh messageId = resultMilliseconds() EXTID 'MessageID',
                        msgDateTime = toChar(exportBlrdocDateTime(),'YYYYMMDDHH24MISS') EXTID 'MsgDateTime',
                        messageType = 'BLRDOC' EXTID 'MessageType',
                        glnSender(edh) EXTID 'MsgSenderID',
                        glnReceiver(edh) EXTID 'MsgReceiverID'//,
                        //userIDCustomerStock(eih) EXTID 'UserID',
                        //testIndicator = IF isTest(edh) THEN '1' EXTID 'TestIndicator'
    
    OBJECTS edd = EDocument EXTID 'Document'
    FILTERS edd == ed
    PROPERTIES DRAW edd documentID = (OVERRIDE documentID(edd), STRING[35](resultMilliseconds())) EXTID 'DocumentID',
                        creationDateTime = toChar((OVERRIDE creationDateTime(edd), exportBlrdocDateTime()),'YYYYMMDDHH24MISS') EXTID 'CreationDateTime',
                        functionCode = (IF isCancel(edd) THEN '1' ELSE '9') EXTID 'FunctionCode',
                        number(edd) EXTID 'eDocumentNumber',
                        date = toChar(date(edd),'YYYYMMDD') EXTID 'eDocumentDate',
                        type(edd) EXTID 'eDocumentType'
    PROPERTIES DRAW edd IN sender glnSender(edd) EXTID 'GLN',
                                  nameSender(edd) EXTID 'Name',
                                  addressSender(edd) EXTID 'Address',
                                  unpSender(edd) EXTID 'VATRegistrationNumber'
    PROPERTIES DRAW edd IN receiver glnReceiver(edd) EXTID 'GLN',
                                    nameReceiver(edd) EXTID 'Name',
                                    addressReceiver(edd) EXTID 'Address',
                                    unpReceiver(edd) EXTID 'VATRegistrationNumber'
    PROPERTIES DRAW edd file(edd) EXTID 'eDocument',
                        name(edd) EXTID 'eDocumentName',
                        route = OVERRIDE idRoute(edd), '0' EXTID 'eDocumentRoute'
;

signAndSendSenderEDocument (EDocument ed, STRING[100] login, STRING[100] password, TEXT url, STRING[100] outputDir , STRING[100] provider) {
    checkIsServer();
    IF isServer() THEN {
        TRY {
            IF login AND password THEN {
                IF EDSServiceSender(provider,ed) THEN {
                    LOCAL error = TEXT();
                    error() <- '';
                    IF NOT length(glnSender(ed)) > 0 THEN error() <- error() + 'EDocument ' + (OVERRIDE number(ed), documentID(ed), '') + ': Не заполнено поле \'GLN отправителя\'\n';
                    IF NOT length(glnReceiver(ed)) > 0 THEN error() <- error() + 'EDocument ' + (OVERRIDE number(ed), documentID(ed), '') + ': Не заполнено поле \'GLN получателя\'\n';
                    IF NOT length(name(ed)) > 0 THEN error() <- error() + 'EDocument ' + (OVERRIDE number(ed), documentID(ed), '') + ': Не заполнено поле \'Имя файла\'\n';
                    
                    IF error() == '' THEN {
                        LOCAL contentSubXML = FILE();
                        exportBlrdocDateTime() <- currentDateTimeMillis();
                        toMilliseconds(exportBlrdocDateTime());
                        EXPORT exportBlrdoc OBJECTS ed = ed XML TO contentSubXML;
                        IF outputDir THEN {
                            TRY{ mkdir(outputDir + '/sent/documents/' + toChar(currentDate(),'yyyyMMdd')); }
                            WRITE contentSubXML() TO outputDir + '/sent/documents/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrwbl-' + toChar(exportBlrdocDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS'); 
                        }
                        
                        IF route(ed) == EDocumentRoute.route2 THEN {
                            fileToString(contentSubXML());
                            encodeBase64(resultString());
                            signResult() <- encodedBase64();
                        } ELSE {
                            getSignedDocumentSender(provider, ed, contentSubXML(), TRUE);
                            IF signError() THEN {
                                logToFile('edi', provider + ' SendEDocument error: BLRDOC ' + (OVERRIDE number(ed), documentID(ed), STRING[35](resultMilliseconds())) + ' не подписан. Ошибка: ' + signError());
                                MESSAGE provider + ' Документ не выгружен: BLRDOC ' + (OVERRIDE number(ed), documentID(ed), STRING[35](resultMilliseconds())) + ' не подписан. Ошибка: ' + signError() NOWAIT;
                            }
                        }
                        IF signResult() THEN {
                            LOCAL ixml = XMLFILE();
                            envelopeLogin() <- login;
                            envelopePassword() <- password;
                            envelopeFilename() <- CONCAT '', 'document', (OVERRIDE documentID(ed), STRING[35](resultMilliseconds()));
                            envelopeDocumentDate() <- (OVERRIDE creationDateTime(ed), exportBlrdocDateTime());
                            envelopeDocumentNumber() <- (OVERRIDE documentID(ed), STRING[35](resultMilliseconds()));
                            envelopeSender() <- glnSender(ed);
                            envelopeReceiver() <- glnReceiver(ed);
                            //envelopeDeliveryPoint() <- glnReceiver(ed);
                            envelopeDocumentType() <- 'BLRDOC';
                            envelopeContent() <- signResult();
                            EXPORT envelope XML TO ixml;
                            sendRequestEDI(url, ixml());
                            logToFile('edi', provider + ' SendEDocument ' + (OVERRIDE number(ed), documentID(ed), STRING[35](resultMilliseconds())) +' request sent');
                            importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                            IF requestError() THEN {
                                logToFile('edi', provider + ' SendEDocument ' + (OVERRIDE number(ed), documentID(ed), STRING[35](resultMilliseconds())) + ': ' + requestError());
                                MESSAGE provider + ' Документ ' + (OVERRIDE number(ed), documentID(ed), STRING[35](resultMilliseconds())) + ' не выгружен: ' + requestError() NOWAIT;
                            } ELSE {
                                logToFile('edi', provider + ' SendEDocument ' + (OVERRIDE number(ed), documentID(ed), STRING[35](resultMilliseconds())) + ' request succeeded');
                                MESSAGE provider + ' Документ ' + (OVERRIDE number(ed), documentID(ed), STRING[35](resultMilliseconds())) + (IF isCancel(ed) THEN ' (отмена)' ELSE '') + ' выгружен' NOWAIT;
                                //NEWSESSION NESTED LOCAL {
                                    exportedSender(ed) <- TRUE;
                                    documentID(ed) <- STRING[35](resultMilliseconds()) IF NOT documentID(ed);
                                    creationDateTime(ed) <- exportBlrdocDateTime() IF NOT creationDateTime(ed);
                                    id(ed) <- (glnSender(ed) + '/' + documentID(ed)) IF NOT id(ed);
                                    APPLY NESTED LOCAL;
                                //}
                            }
                        }
                    } ELSE {
                        logToFile('edi', provider + ' SendEDocument: Не все поля заполнены. ' + error());
                        MESSAGE provider + ' Документ не выгружен: Не все поля заполнены ' + error() NOWAIT;
                    }
                    
                } ELSE {
                    logToFile('edi', provider + ' SendEDocument: не заданы параметры EDSService');
                    MESSAGE provider + ' Документ не выгружен: не заданы параметры EDSService' NOWAIT;
                }
            } ELSE {
                logToFile('edi', provider + ' SendEDocument: не заданы имя пользователя / пароль / хост / порт');
                MESSAGE provider + ' Документ не выгружен: не заданы имя пользователя / пароль / хост / порт' NOWAIT;
            }
        } CATCH {
            logToFile('edi', CONCAT '\n', provider + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE 'Документ не выгружен. Обратитесь к администратору' NOWAIT;
        }
    } ELSE {
        logToFile('edi', provider + ' error: ' + 'SendEDocument disabled, change serverComputer() to enable');
        MESSAGE  provider + ' error: ' + 'SendEDocument disabled, change serverComputer() to enable' NOWAIT;
    }
}

signAndSendSender(EDocument d) + {
    IF EDIProviderDocument(receiver(d), sender(d)) == EDIProvider.topBy THEN
        IF exportedSender(d) THEN MESSAGE 'Документ (отправитель) уже отправлен';
            signAndSendSenderEDocument(d, loginTopBy(sender(d)), passwordTopBy(sender(d)), ('http://' + hostTopBy(sender(d)) +':' + portTopBy(sender(d)) + '/DmcService'), outputDirTopBy(), 'TopBy');
}