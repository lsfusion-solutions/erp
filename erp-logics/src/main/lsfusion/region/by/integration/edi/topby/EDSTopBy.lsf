MODULE EDSTopBy;

REQUIRE EDS, TopBy, LegalEntityBy;

NAMESPACE EDI;

EXTEND CLASS EDSApplication {
    edsService '(СТТ) EDSService',
    edsSign '(СТТ) ЭЦП REST-сервисы',
    sccp '(СТТ) SC-CryptoProxy'
}

useAttribute 'Использовать атрибутный сертификат' = DATA BOOLEAN (EDSService);
legalEntity = DATA LegalEntity(EDSService);
unpLegalEntity 'УНП' (EDSService e) = UNP(legalEntity(e));

CONSTRAINT legalEntity(EDSService e) AND NOT isCompany(legalEntity(e))
    CHECKED BY legalEntity[EDSService]
    MESSAGE 'Должны быть выбрана организация являющаяся компаниеей';

CONSTRAINT useAttribute(EDSService e) AND NOT unpLegalEntity(e) 
    MESSAGE 'Не задан УНП для атрибутного сертификата';

EXTEND FORM EDSService 
    PROPERTIES useAttribute(o) SHOWIF edsApplication(o) == EDSApplication.sccp,
               unpLegalEntity(o) SHOWIF useAttribute(o)
;
DESIGN EDSService {
    PROPERTY (unpLegalEntity(o)) {notNull = TRUE;}
    size = (820, 140); //todo: после перехода на 6 версию можно сделать  (-1, -1)
}

isTopBy(EDSApplication a) = a == EDSApplication.edsService OR a == EDSApplication.edsSign OR a == EDSApplication.sccp; 

aliasEDSService 'Контейнер ключа' = DATA STRING[150] (LegalEntity);
passwordEDSService 'Пароль ключа' = DATA STRING[100] (LegalEntity) ECHO;
edsFrom 'Действителен с' = DATA DATETIME (LegalEntity);
edsTo 'Действителен по' = DATA DATETIME (LegalEntity);
aliasEDSService 'Контейнер ключа' = DATA STRING[150] (Stock);
passwordEDSService 'Пароль ключа' = DATA STRING[100] (Stock) ECHO;
edsFrom 'Действителен с' = DATA DATETIME (Stock);
edsTo 'Действителен по' = DATA DATETIME (Stock);
aliasEDSService 'Контейнер ключа' = DATA STRING[150] (Employee);
passwordEDSService 'Пароль ключа' = DATA STRING[100] (Employee) ECHO;
edsFrom 'Действителен с' = DATA DATETIME (Employee);
edsTo 'Действителен по' = DATA DATETIME (Employee);

EDSServiceTopBy 'Адрес службы ЭЦП' = DATA EDSService (LegalEntity);
descriptionEDSServiceTopBy 'Адрес службы ЭЦП' (LegalEntity o) = description(EDSServiceTopBy(o));
CONSTRAINT EDSServiceTopBy(LegalEntity o) AND NOT isTopBy(edsApplication(EDSServiceTopBy(o))) 
    CHECKED BY EDSServiceTopBy[LegalEntity]
    MESSAGE 'Задан тип приложения ЭЦП недоступный для провайдера';

EDSServiceTopBy 'Адрес службы ЭЦП' = DATA EDSService (Stock);
descriptionEDSServiceTopBy 'Адрес службы ЭЦП' (Stock o) = description(EDSServiceTopBy(o));
CONSTRAINT EDSServiceTopBy(Stock o) AND NOT isTopBy(edsApplication(EDSServiceTopBy(o)))
    CHECKED BY EDSServiceTopBy[Stock]
    MESSAGE 'Задан тип приложения ЭЦП недоступный для провайдера';

EDSServiceTopBy 'Адрес службы ЭЦП' = DATA EDSService (Employee);
descriptionEDSServiceTopBy 'Адрес службы ЭЦП' (Employee o) = description(EDSServiceTopBy(o));
CONSTRAINT EDSServiceTopBy(Employee o) AND NOT isTopBy(edsApplication(EDSServiceTopBy(o)))
    CHECKED BY EDSServiceTopBy[Employee]
    MESSAGE 'Задан тип приложения ЭЦП недоступный для провайдера';


EXTEND FORM integrationData
    PROPERTIES () askPasswordEDSService
    OBJECTS le = LegalEntity
    FILTERS isCompany(le)
    PROPERTIES(le) name READONLY, descriptionEDSServiceTopBy, aliasEDSService, passwordEDSService, edsFrom, edsTo
    
    OBJECTS seds = Stock
    PROPERTIES(seds) name READONLY, descriptionEDSServiceTopBy, aliasEDSService, passwordEDSService, edsFrom, edsTo
    FILTERS isCompany(seds)
    
    OBJECTS eeds = Employee
    PROPERTIES(eeds) READONLY lastName, firstName, namePosition, nameStock 
    PROPERTIES(eeds) descriptionEDSServiceTopBy, aliasEDSService, passwordEDSService, edsFrom, edsTo
    FILTERS active(eeds)
;

DESIGN integrationData {
    col2TopBy {
        NEW edsTopBy {
            caption = 'Электронные подписи';
            fill = 1;
            MOVE PROPERTY(askPasswordEDSService());
            NEW EDSServiceTopBy {
                tabbed = TRUE;
                fill = 1;
                MOVE BOX(le);
                MOVE BOX(seds);
                MOVE BOX(eeds);
            }
        }
    }
}

//EDSService
GROUP getEDS EXTID 'ws:GetEDS' : body;
GROUP keyInfo : getEDS;

FORM getEDS
    PROPERTIES ATTR ='http://ws.services.eds.topby.by/' EXTID 'xmlns:ws'
    OBJECTS alias = TEXT, password = TEXT
    PROPERTIES IN getEDS waybill = ('innerXML') EXTID 'waybill'
    PROPERTIES IN keyInfo VALUE(alias) EXTID 'alias', VALUE(password) EXTID 'password'
    FORMEXTID 'soapenv=http://schemas.xmlsoap.org/soap/envelope/:Envelope'
;

GROUP soapBody EXTID 'soap:Body';
GROUP soapFault EXTID 'soap:Fault' : soapBody;
faultstring = DATA LOCAL NESTED TEXT();
GROUP getEDSResponse EXTID '=http://ws.services.eds.topby.by/:GetEDSResponse' : soapBody;
waybill = DATA LOCAL NESTED TEXT();

FORM getEDSResponse
    PROPERTIES() faultstring IN soapFault, waybill IN getEDSResponse
;

//CTT-EDS-SIGN
alias 'Идентификатор ключа' = DATA LOCAL STRING[150](INTEGER) CHARWIDTH 25;

FORM listAliases 'Список ключей'
    OBJECTS value = INTEGER
    PROPERTIES(value) alias READONLY
    FILTERS imported(value)
;
DESIGN listAliases {
    width = 600;
}
notBeforeISO8601 'Действителен с' = DATA LOCAL DATETIME (INTEGER);
subjectName 'Владелец' = DATA LOCAL STRING(INTEGER) CHARWIDTH 50;
notAfterISO8601 'Действителен до' = DATA LOCAL DATETIME(INTEGER);

FORM certificates 'Список ключей'
    OBJECTS certificates = INTEGER EXTID 'Certificates'
    PROPERTIES(certificates) READONLY subjectName EXTID 'SubjectName', alias EXTID 'PubKeyID',
        notBeforeISO8601 BACKGROUND RGB(255,124,124) IF notBeforeISO8601(certificates) > currentDateTime() OR notAfterISO8601(certificates) < currentDateTime() EXTID 'NotBeforeISO8601', 
        notAfterISO8601 BACKGROUND RGB(255,124,124) IF notBeforeISO8601(certificates) > currentDateTime() OR notAfterISO8601(certificates) < currentDateTime()  EXTID 'NotAfterISO8601'
    FILTERS imported(certificates);


getCN(STRING s) = FORMULA 'replace((regexp_matches($1,\'^CN="?(.+?)"?,.+?\'))[1], \'""\', \'"\')';

selected = DATA LOCAL INTEGER ();

listAliases 'Получить список ключей' (EDSService s) {
    
    IF edsApplication(s) == EDSApplication.edsSign THEN {
        basic() <- encodeText('eds:eds', 'base64');
        timeoutHttp() <- 300000;
        IF client(s) THEN {
            EXTERNAL HTTP CLIENT GET 'http://' + host(s) + ':' + port(s) + '/token/listAliases' HEADERS httpHeadersEDI TO sendRequestEDIResponse;
        } ELSE {
            EXTERNAL HTTP GET 'http://' + host(s) + ':' + port(s) + '/token/listAliases' HEADERS httpHeadersEDI TO sendRequestEDIResponse;
        }

        IF statusHttp() == 200 THEN {
            IMPORT listAliases JSON FROM sendRequestEDIResponse();
            DIALOG listAliases OBJECTS value INPUT DO {
                selected() <- value;
            }
        } ELSE {
            MESSAGE CONCAT ' ', 'Неизвестная ошибка: статус ', statusHttp() NOWAIT;
            logToFile('edi', CONCAT ' ', 'Неизвестная ошибка: статус ', statusHttp());
        }
    }
    IF edsApplication(s) == EDSApplication.sccp THEN {
        timeoutHttp() <- 300000;
        IF client(s) THEN {
            EXTERNAL HTTP CLIENT GET 'http://' + host(s) + ':' + port(s) + '/SCCrypto/ra/certs' HEADERS httpHeadersEDI TO sendRequestEDIResponse;
        } ELSE {
            EXTERNAL HTTP GET 'http://' + host(s) + ':' + port(s) + '/SCCrypto/ra/certs' HEADERS httpHeadersEDI TO sendRequestEDIResponse;
        }

        IF statusHttp() == 200 THEN {
            IMPORT certificates JSON FROM sendRequestEDIResponse();
            subjectName(INTEGER r) <- getCN(subjectName(r));
            DIALOG certificates OBJECTS certificates INPUT DO {
                selected() <- certificates;
            }
        } ELSE {
            MESSAGE CONCAT ' ', 'Неизвестная ошибка: статус ', statusHttp() NOWAIT;
            logToFile('edi', CONCAT ' ', 'Неизвестная ошибка: статус ', statusHttp());
        }
    }
}

changeAlias 'Получить список ключей' (LegalEntity l) {
    listAliases(EDSServiceTopBy(l));
    IF selected() THEN {
        aliasEDSService(l) <- alias(selected());
        edsFrom(l) <- notBeforeISO8601(selected());
        edsTo(l) <- notAfterISO8601(selected());
    }
} TOOLBAR;
changeAlias 'Получить список ключей' (Stock l) {
    listAliases(EDSServiceTopBy(l));
    IF selected() THEN {
        aliasEDSService(l) <- alias(selected());
        edsFrom(l) <- notBeforeISO8601(selected());
        edsTo(l) <- notAfterISO8601(selected());
    }
} TOOLBAR;
changeAlias 'Получить список ключей' (Employee l) {
    listAliases(EDSServiceTopBy(l));
    IF selected() THEN {
        aliasEDSService(l) <- alias(selected());
        edsFrom(l) <- notBeforeISO8601(selected());
        edsTo(l) <- notAfterISO8601(selected());
    }
} TOOLBAR;

EXTEND FORM integrationData
    PROPERTIES(le) changeAlias SHOWIF (edsApplication(EDSServiceTopBy(le)) == EDSApplication.edsSign OR edsApplication(EDSServiceTopBy(le)) == EDSApplication.sccp)
    PROPERTIES(seds) changeAlias SHOWIF (edsApplication(EDSServiceTopBy(seds)) == EDSApplication.edsSign OR edsApplication(EDSServiceTopBy(seds)) == EDSApplication.sccp)
    PROPERTIES(eeds) changeAlias SHOWIF (edsApplication(EDSServiceTopBy(eeds)) == EDSApplication.edsSign OR edsApplication(EDSServiceTopBy(eeds)) == EDSApplication.sccp)
;
