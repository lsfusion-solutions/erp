MODULE EDSTopBy;

REQUIRE EDS, TopBy, LegalEntityBy, SCCryptoProxy;

NAMESPACE EDI;

isTopBy(EDSApplication a) = a == EDSApplication.sccp; 

extraAliasEDSService 'Контейнер ключа' = ABSTRACT STRING[150] (LegalEntity);
extraPasswordEDSService 'Пароль ключа' = ABSTRACT STRING[100] (LegalEntity);
useExtraAlias (LegalEntity le) = extraAliasEDSService(le) AND extraPasswordEDSService(le);  

aliasEDSService 'Контейнер ключа' = DATA STRING[150] (LegalEntity);
passwordEDSService 'Пароль ключа' = DATA STRING[100] (LegalEntity) ECHO;
edsFrom 'Действителен с' = DATA DATETIME (LegalEntity);
edsTo 'Действителен по' = DATA DATETIME (LegalEntity);
aliasEDSService 'Контейнер ключа' = DATA STRING[150] (Stock);
passwordEDSService 'Пароль ключа' = DATA STRING[100] (Stock) ECHO;
edsFrom 'Действителен с' = DATA DATETIME (Stock);
edsTo 'Действителен по' = DATA DATETIME (Stock);
aliasEDSService 'Контейнер ключа' = DATA STRING[150] (Employee);
passwordEDSService 'Пароль ключа' = DATA STRING[100] (Employee) ECHO;
edsFrom 'Действителен с' = DATA DATETIME (Employee);
edsTo 'Действителен по' = DATA DATETIME (Employee);

EDSServiceTopBy 'Адрес службы ЭЦП' = DATA EDSService (LegalEntity);
descriptionEDSServiceTopBy 'Адрес службы ЭЦП' (LegalEntity o) = description(EDSServiceTopBy(o));
CONSTRAINT EDSServiceTopBy(LegalEntity o) AND NOT isTopBy(edsApplication(EDSServiceTopBy(o))) 
    CHECKED BY EDSServiceTopBy[LegalEntity]
    MESSAGE 'Задан тип приложения ЭЦП недоступный для провайдера';

EDSServiceTopBy 'Адрес службы ЭЦП' = DATA EDSService (Stock);
descriptionEDSServiceTopBy 'Адрес службы ЭЦП' (Stock o) = description(EDSServiceTopBy(o));
CONSTRAINT EDSServiceTopBy(Stock o) AND NOT isTopBy(edsApplication(EDSServiceTopBy(o)))
    CHECKED BY EDSServiceTopBy[Stock]
    MESSAGE 'Задан тип приложения ЭЦП недоступный для провайдера';

EDSServiceTopBy 'Адрес службы ЭЦП' = DATA EDSService (Employee);
descriptionEDSServiceTopBy 'Адрес службы ЭЦП' (Employee o) = description(EDSServiceTopBy(o));
CONSTRAINT EDSServiceTopBy(Employee o) AND NOT isTopBy(edsApplication(EDSServiceTopBy(o)))
    CHECKED BY EDSServiceTopBy[Employee]
    MESSAGE 'Задан тип приложения ЭЦП недоступный для провайдера';


EXTEND FORM integrationData
    PROPERTIES () askPasswordEDSService
    OBJECTS le = LegalEntity
    FILTERS isCompany(le)
    PROPERTIES(le) name READONLY, descriptionEDSServiceTopBy, aliasEDSService, passwordEDSService, edsFrom, edsTo
    
    OBJECTS seds = Stock
    PROPERTIES(seds) name READONLY, descriptionEDSServiceTopBy, aliasEDSService, passwordEDSService, edsFrom, edsTo
    FILTERS isCompany(seds)
    FILTERGROUP activeST
        FILTER 'Активные' active(seds) DEFAULT
    
    OBJECTS eeds = Employee
    PROPERTIES(eeds) READONLY lastName, firstName, namePosition, nameStock 
    PROPERTIES(eeds) descriptionEDSServiceTopBy, aliasEDSService, passwordEDSService, edsFrom, edsTo
    FILTERS active(eeds)
    FILTERGROUP activeEt
        FILTER 'Активные' active(eeds) DEFAULT
;

DESIGN integrationData {
    col2TopBy {
        NEW edsTopBy {
            caption = 'Электронные подписи';
            fill = 1;
            MOVE PROPERTY(askPasswordEDSService());
            NEW EDSServiceTopBy {
                tabbed = TRUE;
                fill = 1;
                MOVE BOX(le);
                MOVE BOX(seds);
                MOVE BOX(eeds);
            }
        }
    }
}

//EDSService
GROUP getEDS EXTID 'ws:GetEDS' : body;
GROUP keyInfo : getEDS;

FORM getEDS
    PROPERTIES ATTR ='http://ws.services.eds.topby.by/' EXTID 'xmlns:ws'
    OBJECTS alias = TEXT, password = TEXT
    PROPERTIES IN getEDS waybill = ('innerXML') EXTID 'waybill'
    PROPERTIES IN keyInfo VALUE(alias) EXTID 'alias', VALUE(password) EXTID 'password'
    FORMEXTID 'soapenv=http://schemas.xmlsoap.org/soap/envelope/:Envelope'
;

GROUP soapBody EXTID 'soap:Body';
GROUP soapFault EXTID 'soap:Fault' : soapBody;
faultstring = DATA LOCAL NESTED TEXT();
GROUP getEDSResponse EXTID '=http://ws.services.eds.topby.by/:GetEDSResponse' : soapBody;
waybill = DATA LOCAL NESTED TEXT();

FORM getEDSResponse
    PROPERTIES() faultstring IN soapFault, waybill IN getEDSResponse
;

changeAlias 'Получить список ключей' (LegalEntity l) {
    listAliases(EDSServiceTopBy(l));
    IF selected() THEN {
        aliasEDSService(l) <- alias(selected());
        edsFrom(l) <- notBeforeISO8601(selected());
        edsTo(l) <- notAfterISO8601(selected());
    }
} TOOLBAR;
changeAlias 'Получить список ключей' (Stock l) {
    listAliases(EDSServiceTopBy(l));
    IF selected() THEN {
        aliasEDSService(l) <- alias(selected());
        edsFrom(l) <- notBeforeISO8601(selected());
        edsTo(l) <- notAfterISO8601(selected());
    }
} TOOLBAR;
changeAlias 'Получить список ключей' (Employee l) {
    listAliases(EDSServiceTopBy(l));
    IF selected() THEN {
        aliasEDSService(l) <- alias(selected());
        edsFrom(l) <- notBeforeISO8601(selected());
        edsTo(l) <- notAfterISO8601(selected());
    }
} TOOLBAR;

EXTEND FORM integrationData
    PROPERTIES(le) changeAlias SHOWIF edsApplication(EDSServiceTopBy(le)) == EDSApplication.sccp
    PROPERTIES(seds) changeAlias SHOWIF edsApplication(EDSServiceTopBy(seds)) == EDSApplication.sccp
    PROPERTIES(eeds) changeAlias SHOWIF edsApplication(EDSServiceTopBy(eeds)) == EDSApplication.sccp
;
