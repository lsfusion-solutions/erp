MODULE EDSTopBy;

REQUIRE EDS, TopBy;

NAMESPACE EDI;

EXTEND CLASS EDSApplication {
    edsService '(СТТ) EDSService',
    edsSign '(СТТ) ЭЦП REST-сервисы'
}

isTopBy(EDSApplication a) = a == EDSApplication.edsService OR a == EDSApplication.edsSign; 

aliasEDSService 'Контейнер ключа' = DATA STRING[150] (LegalEntity);
passwordEDSService 'Пароль ключа' = DATA STRING[100] (LegalEntity) ECHO;
aliasEDSService 'Контейнер ключа' = DATA STRING[150] (Stock);
passwordEDSService 'Пароль ключа' = DATA STRING[100] (Stock) ECHO;
aliasEDSService 'Контейнер ключа' = DATA STRING[150] (Employee);
passwordEDSService 'Пароль ключа' = DATA STRING[100] (Employee) ECHO;

EDSServiceTopBy 'Адрес службы ЭЦП' = DATA EDSService (LegalEntity);
descriptionEDSServiceTopBy 'Адрес службы ЭЦП' (LegalEntity o) = description(EDSServiceTopBy(o));
CONSTRAINT EDSServiceTopBy(LegalEntity o) AND NOT isTopBy(edsApplication(EDSServiceTopBy(o))) 
    CHECKED BY EDSServiceTopBy[LegalEntity]
    MESSAGE 'Задан тип приложения ЭЦП недоступный для провайдера';

EDSServiceTopBy 'Адрес службы ЭЦП' = DATA EDSService (Stock);
descriptionEDSServiceTopBy 'Адрес службы ЭЦП' (Stock o) = description(EDSServiceTopBy(o));
CONSTRAINT EDSServiceTopBy(Stock o) AND NOT isTopBy(edsApplication(EDSServiceTopBy(o)))
    CHECKED BY EDSServiceTopBy[Stock]
    MESSAGE 'Задан тип приложения ЭЦП недоступный для провайдера';

EDSServiceTopBy 'Адрес службы ЭЦП' = DATA EDSService (Employee);
descriptionEDSServiceTopBy 'Адрес службы ЭЦП' (Employee o) = description(EDSServiceTopBy(o));
CONSTRAINT EDSServiceTopBy(Employee o) AND NOT isTopBy(edsApplication(EDSServiceTopBy(o)))
    CHECKED BY EDSServiceTopBy[Employee]
    MESSAGE 'Задан тип приложения ЭЦП недоступный для провайдера';


EXTEND FORM integrationData
    PROPERTIES () askPasswordEDSService
    OBJECTS le = LegalEntity
    FILTERS isCompany(le)
    PROPERTIES(le) name READONLY, aliasEDSService, passwordEDSService, descriptionEDSServiceTopBy
    
    OBJECTS seds = Stock
    PROPERTIES(seds) name READONLY, aliasEDSService, passwordEDSService, descriptionEDSServiceTopBy
    FILTERS isCompany(seds)
    
    OBJECTS eeds = Employee
    PROPERTIES(eeds) lastName READONLY, firstName READONLY, namePosition READONLY, aliasEDSService, passwordEDSService, descriptionEDSServiceTopBy
    FILTERS active(eeds)
;

DESIGN integrationData {
    col2TopBy {
        NEW edsTopBy {
            caption = 'Электронные подписи';
            fill = 1;
            MOVE PROPERTY(askPasswordEDSService());
            NEW EDSServiceTopBy {
                tabbed = TRUE;
                fill = 1;
                MOVE BOX(le);
                MOVE BOX(seds);
                MOVE BOX(eeds);
            }
        }
    }
}

//EDSService
GROUP getEDS EXTID 'ws:GetEDS' : body;
GROUP keyInfo : getEDS;

FORM getEDS
    PROPERTIES ATTR ='http://ws.services.eds.topby.by/' EXTID 'xmlns:ws'
    OBJECTS alias = TEXT, password = TEXT
    PROPERTIES IN getEDS waybill = ('innerXML') EXTID 'waybill'
    PROPERTIES IN keyInfo VALUE(alias) EXTID 'alias', VALUE(password) EXTID 'password'
    FORMEXTID 'soapenv=http://schemas.xmlsoap.org/soap/envelope/:Envelope'
;

GROUP soapBody EXTID 'soap:Body';
GROUP soapFault EXTID 'soap:Fault' : soapBody;
faultstring = DATA LOCAL NESTED TEXT();
GROUP getEDSResponse EXTID '=http://ws.services.eds.topby.by/:GetEDSResponse' : soapBody;
waybill = DATA LOCAL NESTED TEXT();

FORM getEDSResponse
    PROPERTIES() faultstring IN soapFault, waybill IN getEDSResponse
;

//CTT-EDS-SIGN
alias = DATA LOCAL STRING[150](INTEGER);

FORM listAliases 'Список ключей'
    OBJECTS value = INTEGER
    PROPERTIES(value) alias READONLY
    FILTERS imported(value)
;
DESIGN listAliases {
    width = 600;
}
selected = DATA LOCAL INTEGER ();

listAliases 'Получить список ключей' (EDSService s) {
    //sendRequestEDI('eds', 'eds', ('http://' + host(s) + ':' + port(s) + '/token/listAliases'), NULL, TRUE, client(s));

    basic() <- encodeText('eds:eds', 'base64');
    timeoutHttp() <- 300000;
    IF client(s) THEN {
        EXTERNAL HTTP CLIENT GET 'http://' + host(s) + ':' + port(s) + '/token/listAliases' HEADERS httpHeadersEDI TO sendRequestEDIResponse;
    } ELSE {
        EXTERNAL HTTP GET 'http://' + host(s) + ':' + port(s) + '/token/listAliases' HEADERS httpHeadersEDI TO sendRequestEDIResponse;
    }

    IF statusHttp() == 200 THEN {
        IMPORT listAliases JSON FROM sendRequestEDIResponse();
        DIALOG listAliases OBJECTS value INPUT DO {
            selected() <- value;
        }
    } ELSE {
        MESSAGE CONCAT ' ', 'Неизвестная ошибка: статус ', statusHttp() NOWAIT;
        logToFile('edi', CONCAT ' ', 'Неизвестная ошибка: статус ', statusHttp());
    }
}

changeAlias 'Получить список ключей' (LegalEntity l) {
    listAliases(EDSServiceTopBy(l));
    aliasEDSService(l) <- alias(selected()) WHERE selected();
} TOOLBAR;
changeAlias 'Получить список ключей' (Stock l) {
    listAliases(EDSServiceTopBy(l));
    aliasEDSService(l) <- alias(selected()) WHERE selected();
} TOOLBAR;
changeAlias 'Получить список ключей' (Employee l) {
    listAliases(EDSServiceTopBy(l));
    aliasEDSService(l) <- alias(selected()) WHERE selected();
} TOOLBAR;

EXTEND FORM integrationData
    PROPERTIES(le) changeAlias SHOWIF (edsApplication(EDSServiceTopBy(le)) == EDSApplication.edsSign)
    PROPERTIES(seds) changeAlias SHOWIF (edsApplication(EDSServiceTopBy(seds)) == EDSApplication.edsSign)
    PROPERTIES(eeds) changeAlias SHOWIF (edsApplication(EDSServiceTopBy(eeds)) == EDSApplication.edsSign)
;


FORM signRespone
    PROPERTIES signError() EXTID 'errorMessage'
;

migratedEDSTopBy = DATA BOOLEAN();
onStarted()+{
    IF NOT migratedEDSTopBy() THEN NEWSESSION {
        
        FOR EDSService eds IS EDSService AND ((GROUP SUM 1 IF eds == EDSServiceTopBy(LegalEntity l)) OR (GROUP SUM 1 IF eds == EDSServiceTopBy(Stock ls)) OR (GROUP SUM 1 IF eds == EDSServiceTopBy(Employee e)))
            AND NOT edsApplication(eds) DO {
            edsApplication(eds) <- EDSApplication.edsService;
        }
        FOR EDSService eds IS EDSService AND ((GROUP SUM 1 IF eds == EDSServiceTopBy(LegalEntity l)) OR (GROUP SUM 1 IF eds == EDSServiceTopBy(Stock ls)) OR (GROUP SUM 1 IF eds == EDSServiceTopBy(Employee e)))
            AND NOT edsApplication(eds) == EDSApplication.edsService NEW nEds = EDSService DO {
            edsApplication(nEds) <- EDSApplication.edsService;
            host(nEds) <- host(eds);
            port(nEds) <- port(eds);
            name(nEds) <- name(eds);
            client(nEds) <- client(eds);
            EDSServiceTopBy(LegalEntity l) <- nEds WHERE EDSServiceTopBy(l) == eds;
            EDSServiceTopBy(Stock l) <- nEds WHERE EDSServiceTopBy(l) == eds;
            EDSServiceTopBy(Employee l) <- nEds WHERE EDSServiceTopBy(l) == eds;
        }

        migratedEDSTopBy() <- TRUE;
        APPLY;
    }
}