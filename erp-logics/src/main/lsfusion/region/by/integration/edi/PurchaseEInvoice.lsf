MODULE PurchaseEInvoice;

REQUIRE InvoiceEInvoice, PurchaseInvoice, PurchaseCreditNote;

NAMESPACE Purchase;

overSupplier (EInvoice e) += supplier(invoice(e)) IF dataGLNSupplier(e) AND invoice(e) IS Purchase.UserInvoice;

eOperation = DATA Operation(LegalEntity);
nameEOperation 'Операция (Закупка) для электронных накладных'(LegalEntity l) = name(eOperation(l));

EXTEND FORM legalEntity
    PROPERTIES (l) PurchaseInvoiceNameEOperation = nameEOperation;

DESIGN legalEntity {
    EInvoice {
        MOVE PROPERTY (PurchaseInvoiceNameEOperation);
    }
} 

receiver = DATA Employee (UserInvoice);
receiver(UserInvoice i) += receiver(i);

nameReceiver 'Приёмщик'(Invoice i) = name(receiver(i));

eInvoiceDetail 'Строка ЭТТН' = DATA EInvoiceDetail (Purchase.InvoiceDetail) INDEXED;
numberEInvoiceDetail 'Строка ЭТТН' (Purchase.InvoiceDetail d) = lineItemNumber(eInvoiceDetail(d));

overPrevList = ABSTRACT NUMERIC[16,4] (EInvoiceDetail);
prevList (PriceListType t, UserInvoiceDetail d) += WHEN t == priceListType(d) AND eInvoiceDetail(d) THEN (OVERRIDE overPrevList(eInvoiceDetail(d)), NUMERIC[16,4](lineItemPrice(eInvoiceDetail(d))));

filterDate 'Дата' = DATA LOCAL DATE ();
filterDate (EInvoice i) = deliveryNoteDate(i) == filterDate() OR NOT filterDate();      

filterSupplier = DATA LOCAL LegalEntity ();
overFilterSupplier = ABSTRACT LegalEntity(EInvoice);
filterSupplier (EInvoice i) = (OVERRIDE overFilterSupplier(i), supplier(i)) = filterSupplier() OR (i IS EInvoice AND NOT filterSupplier()) OR NOT supplier(i);

filterCustomer = DATA LOCAL LegalEntity ();
filterCustomer (EInvoice i) = customer(i)= filterCustomer() OR (i IS EInvoice AND NOT filterCustomer()) OR NOT customer(i);

filterStock = DATA LOCAL Stock ();
filterStock (EInvoice i) = customerStock(i)= filterStock() OR (i IS EInvoice AND NOT filterStock()) OR NOT customerStock(i);

FORM selectEInvoice 'Накладные EDI'
    PROPERTIES filterDate()
    
    OBJECTS ei = EInvoice
    PROPERTIES(ei) READONLY deliveryNoteDate, deliveryNoteNumber, nameSupplier, nameCustomer, nameCustomerStock
    FILTERS filterDate(ei), 
            filterSupplier(ei),
            filterCustomer(ei),
            filterStock(ei),
            NOT invoice(ei),
            importedCustomer(ei),
            NOT overIsReturn(ei)            
;

DESIGN selectEInvoice {
    NEW filter {
        caption = 'Фильтр';
        MOVE PROPERTY (filterDate());
    }
    
    MOVE BOX(ei);
    MOVE TOOLBARBOX;
}

overCopy ABSTRACT LIST ( EInvoice, UserInvoice);
overCopy  ABSTRACT LIST ( EInvoiceDetail, UserInvoiceDetail);
ignoreDetail = ABSTRACT BOOLEAN (EInvoiceDetail);
afterCopy ABSTRACT LIST ( EInvoice, UserInvoice);
copyData(EInvoice ei, Invoice i)  { 
    invoice(EInvoice e) <- NULL WHERE invoice(e) == i AND NOT isCancel(e);
    invoice(ei) <- i;
    number(i) <- deliveryNoteNumber(ei);
    series(i) <- NULL;
    operation(i) <- eOperation(supplier(ei)) WHERE eOperation(supplier(ei));
    supplier(i) <- supplier(ei);
    supplierStock(i) <- OVERRIDE supplierStock(ei), defaultStock(supplier(ei));
    customer(i) <- customer(ei);
    customerStock(i) <- customerStock(ei);
    date(i) <- deliveryNoteDate(ei);
    time(i) <- 00:00;
    overCopy(ei,i);
    
    FOR eInvoice(EInvoiceDetail eid) == eInvoice(i) AND NOT ignoreDetail(eid) NEW id = UserInvoiceDetail DO {
        userInvoice(id) <- i;
        sku(id) <- OVERRIDE sku(lineItemBuyerID(eid)), skuGTIN(lineItemID(eid)), skuGTIN(ltrim(lineItemID(eid), '0')), sku(lineItemID(eid));
        quantity(id) <- quantityDespatched(eid);
        price(id) <- lineItemPrice(eid);
        VAT(id) <- valueCurrentVAT(country(defaultStock(supplier(ei))), NUMERIC[10,5](valueVAT(eid)));;
        valueVAT(id) <- NUMERIC[10,5](valueVAT(eid)); 
        invoicePrice(id) <- round2(price(id) * (100 + valueVAT(id))/100);
        sum(id) <- lineItemAmountWithoutCharges(eid) WHERE isEDI(ei);
        VATSum(id) <- lineItemAmountCharges(eid) WHERE isEDI(ei);
        invoiceSum(id) <- lineItemAmount(eid) WHERE isEDI(ei);
        eInvoiceDetail(id) <- eid;

        overCopy(eid,id); 
    }
    afterCopy(ei,i);
}


overImportFromEInvoice  ABSTRACT LIST (UserInvoice);
importFromEInvoice 'Импорт из накладной EDI' (UserInvoice i)  { 
    IF isPosted(i) THEN {
        MESSAGE 'Вы пытаетесь импортировать в проведенный документ. Распроведите его.';
        RETURN;
    }
    
    filterDate() <- date(i);
    filterSupplier() <- supplier(i);
    filterCustomer() <- customer(i);    
    filterStock() <- customerStock(i);
    
    DIALOG selectEInvoice OBJECTS ei INPUT DO {
        IF ei THEN {
            copyData(ei,i);
            overImportFromEInvoice(i);
        }  
    }
}

createInvoice 'Создать на основе накладных EDI' (DATE d) {
    FOR deliveryNoteDate(EInvoice ei) == d AND NOT invoice(ei) DO {
        NEWSESSION FORMS Purchase.userInvoice NEW i = UserInvoice {
            copyData(ei, i);
            executeLocalEvents();
            APPLY;
        }
    }
}

FORM dialogEInvoiceCustomer 'Выбор электронной накладной'
    OBJECTS i = EInvoice
    PROPERTIES(i) READONLY deliveryNoteDate, deliveryNoteNumber, nameSupplier, nameCustomer, nameCustomerStock
    FILTERS importedCustomer(i)
    FILTERS NOT overIsReturn(i)
;
@extendFormFilterAccessStock(dialogEInvoiceCustomer, i, dialogEInvoiceCustomer, customerStock, Company);

overChangeEInvoiceCustomer ABSTRACT LIST (EInvoice, UserInvoice);

changeEInvoiceCustomer(Invoice in) {
    DIALOG dialogEInvoiceCustomer OBJECTS i = eInvoice(in) NULL INPUT NULL DO {
        invoice(EInvoice e) <- NULL WHERE e == eInvoice(in) AND NOT isCancel(e);
        invoice(i) <- in;
        overChangeEInvoiceCustomer(i,in);
    }
}

EXTEND FORM userInvoice 
    PROPERTIES READONLYIF exportedCustomer(eInvoice(i)) numberEInvoice(i) ON CHANGE changeEInvoiceCustomer(i)
    PROPERTIES(i) READONLYIF exportedCustomer(eInvoice(i)) importFromEInvoice, nameReceiver
;

DESIGN userInvoice {
    import {
        NEW importEDI {
            caption = 'Накладная EDI';
            flex = 1;
            MOVE PROPERTY(numberEInvoice(i));
            MOVE PROPERTY(nameReceiver(i));
            MOVE PROPERTY(importFromEInvoice(i));
        }
    }
}

signAndSendBlrapnCustomerEDI 'Подписать и отправить извещение о прочтении (покупатель)'(Invoice i)  { 
    NEWSESSION {
        in(EInvoice e) <- e = eInvoice(i);
        signAndSendBlrapnCustomerEDI();
        in(EInvoice e) <- NULL;
    }
}
signAndSendCustomerEDI 'Подписать и отправить (покупатель)'(Invoice i)  { 
    NEWSESSION {
        in(EInvoice e) <- e = eInvoice(i);
        signAndSendCustomerEDI();
        in(EInvoice e) <- NULL;
    }
}
signAndSendNoticeCustomerEDI 'Подписать и отправить уведомление об изменении (покупатель)'(Invoice i)  { 
    NEWSESSION {
        in(EInvoice e) <- e = eInvoice(i);
        signAndSendNoticeCustomerEDI();
        in(EInvoice e) <- NULL;
    }
}

hideSignAndSendBlrapnCustomerEDI = ABSTRACT BOOLEAN (Invoice);
hideSignAndSendCustomerEDI = ABSTRACT BOOLEAN (Invoice);
hideSignAndSendNoticeCustomerEDI = ABSTRACT BOOLEAN (Invoice);

EXTEND FORM invoices
    PROPERTIES READONLY numberEInvoice = numberEInvoice(i), statusDescription = statusDescription(i) BACKGROUND backgroundStatusDescription(i)
    PROPERTIES numberEInvoice(i) SHOWIF eInvoice(i) PANEL READONLY,
               signAndSendBlrapnCustomerEDI(i) SHOWIF (eInvoice(i) AND NOT exportedBlrapnCustomer(eInvoice(i)) AND importedCustomer(eInvoice(i)) AND NOT hideSignAndSendBlrapnCustomerEDI(i)),
               signAndSendCustomerEDI(i) SHOWIF (eInvoice(i) AND NOT exportedCustomer(eInvoice(i)) AND NOT exportedNoticeCustomer(eInvoice(i)) AND NOT hideSignAndSendCustomerEDI(i)),
               signAndSendNoticeCustomerEDI(i) SHOWIF (eInvoice(i) AND NOT exportedCustomer(eInvoice(i)) AND NOT exportedNoticeCustomer(eInvoice(i)) AND NOT hideSignAndSendNoticeCustomerEDI(i) AND NOT useECriditNote(supplier(i))),
               statusDescription(i) SHOWIF eInvoice(i) PANEL
;

DESIGN invoices {
    printTabScroll {
        NEW tabConsignment {
            tabbed = TRUE;
            fill = 1;
            MOVE printTab {caption = 'Накладная';};
            NEW eInvoice {
                caption = 'Электронная накладная';
                NEW createEI {
                    horizontal = TRUE;
                    MOVE PROPERTY(numberEInvoice(i));
                    MOVE PROPERTY(signAndSendBlrapnCustomerEDI(i));
                    MOVE PROPERTY(signAndSendCustomerEDI(i));
                    MOVE PROPERTY(signAndSendNoticeCustomerEDI(i));
                    MOVE PROPERTY(statusDescription(i));
                }
            }
        }
    }
}

EXTEND FORM userInvoice
    OBJECTS ccd= UserInvoiceDetail GRID
    PROPERTIES (ccd)  READONLY SHOWIF eInvoice(i) index, idBarcodeSku, nameSku
    PROPERTIES READONLY SHOWIF eInvoice(i) lineItemManufacturerOutputPrice 'Отпускная цена производителя (импортера)' = lineItemManufacturerOutputPrice(eInvoiceDetail(ccd)),
        typeDiscount'Вид скидки' = typeDiscount(eInvoiceDetail(ccd)), bulkDiscountRate'Оптовая скидка, %' = bulkDiscountRate(eInvoiceDetail(ccd)),
        outputPriceIncludingShippingCoast 'Условия доставки товара' = outputPriceIncludingShippingCoast(eInvoiceDetail(ccd)),
        outputPriceShippingCoast'Сумма расходов по доставке товаров' = outputPriceShippingCoast(eInvoiceDetail(ccd)),
        outputPricePackingCoast 'Сумма расходов по фасовке товаров' = outputPricePackingCoast(eInvoiceDetail(ccd)),
        bulkMarginRate'Оптовая надбавка в белорусских рублях или процентах' = bulkMarginRate(eInvoiceDetail(ccd)),
        cutRate 'Сниженная цена субъекта торговли, осуществляющего оптовую торговлю'= cutRate(eInvoiceDetail(ccd)),
        additionalInformationPrice 'Иные сведения, необходимые для установления цены' = additionalInformationPrice(eInvoiceDetail(ccd)),
        additionalInformationNote  'Примечание' = additionalInformationNote(eInvoiceDetail(ccd))
    FILTERS userInvoice(ccd) == i
;

DESIGN userInvoice{
    specificationBox {
        NEW costControlContainer {
            caption = 'Сведения по регулированию ценообразования в ЭТТН';
            MOVE BOX(ccd);
        }
    }
}

EXTEND FORM userInvoice
    PROPERTIES READONLY SHOWIF eInvoice(i) additionalInformation  'Примечание, дополнительная информация о товаре' = additionalInformation(eInvoiceDetail(d))
;

skipNumberCheck(Invoice i) += IF (GROUP SUM 1 IF invoice(EInvoice ei) == i) THEN TRUE;
 
@defineOption(createPurchaseInvoiceFromEInvoice, 'Автоматически создавать накладную (закупка) при создании накладной EDI', EDI);

skipCreatePurchaseInvoice = ABSTRACT BOOLEAN (EInvoice);

afterImportEInvoice(ei) + {
    IF createPurchaseInvoiceFromEInvoice() AND NOT skipCreatePurchaseInvoice(ei) THEN {
        NEW i = UserInvoice {
            copyData(ei, i);
            executeLocalEvents('Purchase.userInvoice');
        }
    }
}

creditNote = DATA CreditNote (ECreditNote);
creditNoteDetail = DATA CreditNoteDetail(ECreditNoteDetail);
eCreditNote = GROUP LAST ECreditNote ec IF NOT isCancel(ec) ORDER dateTime(ec), ec BY creditNote(ec);
eCreditNoteDetail = GROUP LAST ECreditNoteDetail ecd IF NOT isCancel(eCreditNote(ecd)) ORDER dateTime(eCreditNote(ecd)), ecd BY creditNoteDetail(ecd);
numberCreditNote 'Номер акта приемки EDI' (ECreditNote c) = number(creditNote(c));
EXTEND FORM eCreditNotes
    PROPERTIES (c) READONLY numberCreditNote
;

prevECreditNote(ECreditNote e) = PARTITION PREV e ORDER e BY creditNote(e);

WHEN LOCAL CHANGED(creditNote(ECreditNote e)) DO {
    cancelDeliveryNoteId(e) <- actDifNumber(prevECreditNote(e));
}

CONSTRAINT DROPPED (CreditNote c IS CreditNote) AND exportedCustomer(eCreditNote(c))
    MESSAGE 'Запрещено удалять акт расхождения по которому был отправлен электронный акт приемки. Сначала необходимо отменить электронный акт приемки';

numberECreditNote 'Номер электронного акта приемки'(CreditNote c) = actDifNumber(eCreditNote(c));
isECreditNote 'Электронный акт приемки' (CreditNote c) = TRUE IF eCreditNote(c);
signAndSendCustomerCreditNoteEDI 'Подписать и отправить (покупатель)'(CreditNote c)  {
    NEWSESSION {
        in(ECreditNote e) <- e = eCreditNote(c);
        signAndSendCustomerCreditNote();
        in(ECreditNote e) <- NULL;
    }
}

cancelSignAndSendCustomerCreditNoteEDII 'Отменить (покупатель)'(CreditNote c)  {
    NEWSESSION {
        in(ECreditNote e) <- e = eCreditNote(c);
        exportedCustomer(ECreditNote e) <- NULL WHERE e = eCreditNote(c);
        isCancel(ECreditNote e) <- TRUE WHERE e = eCreditNote(c);
        signAndSendCustomerCreditNote();
        IF (GROUP SUM 1 IF exportedCustomer(ECreditNote e) AND in(e)) THEN APPLY;
    }
}

overCreate ABSTRACT LIST(ECreditNote, CreditNote);
overCreate ABSTRACT LIST(ECreditNoteDetail, CreditNoteDetail);

hideCreateECreditNote = ABSTRACT BOOLEAN (CreditNote);

createECreditNote 'Создать электронный акт приемки' (CreditNote c)  {
    IF NOT eCreditNote(c) THEN NEWSESSION {
        NEW ec = ECreditNote {
            creditNote(ec) <- c;
            eInvoice(ec) <- GROUP MAX eInvoice(Invoice i) IF quantity(i, c);
            actDifNumber(ec) <- STRING[46](deliveryNoteNumber(eInvoice(ec)) + '-' + lpad(STRING(GROUP SUM 1 IF eInvoice(ec) == eInvoice(ECreditNote ecc)),2,'0'));
            actDifDate(ec) <- date(c);
            typeEInvoice(ec) <- IF isTN2(eInvoice(ec)) THEN 270 ELSE 700;
            numberEInvoice(ec) <- deliveryNoteNumber(eInvoice(ec));
            dateEInvoice(ec) <- deliveryNoteDate(eInvoice(ec));
            supplier(ec) <- supplier(c);
            customer(ec) <- customer(c);
            customerStock(ec) <- customerStock(c);
            contractNumber(ec) <- seriesNumberContractSku(c);
            contractDate(ec) <- dateFromContractSku(c);
            currency(ec) <- shortNameCurrency(c);

            FOR creditNote(CreditNoteDetail d) == c NEW ed = ECreditNoteDetail  DO {
                eCreditNote(ed) <- ec;
                creditNoteDetail(ed) <- d;
                lineItemNumber(ed) <- index(d);
                lineItemID(ed) <- OVERRIDE GTIN(sku(d)), (id(barcode(sku(d))) IF length(id(barcode(sku(d)))) > 7);
                lineItemReceiverID(ed) <- id(sku(d));
                lineItemName(ed) <- STRING[500](nameSku(d));
                lineItemQuantityUOM(ed) <- OVERRIDE extraCodeUOM(UOM(sku(d))), 'PCE';
                quantityDespatched(ed) <- OVERRIDE quantity(invoiceDetail(d)), 0.0;
                priceDespatched(ed) <- price(d);
                valueVAT(ed) <- STRING[7](NUMERIC[8,2](valueVAT(d)));
                sumDespatched(ed) <- OVERRIDE sum(invoiceDetail(d)), 0.0;
                VATSumDespatched(ed) <- OVERRIDE VATSum(invoiceDetail(d)), 0.0;
                invoiceSumDespatched(ed) <- OVERRIDE invoiceSum(invoiceDetail(d)), 0.0;

                quantityReceived(ed) <- OVERRIDE shipped(invoiceDetail(d)), 0.0;
                priceReceived(ed) <- price(d);
                sumReceived(ed) <- OVERRIDE sum(invoiceDetail(d)) (-) sum(d), 0.0;
                VATSumReceived(ed) <- OVERRIDE VATSum(invoiceDetail(d)) (-) VATSum(d), 0.0;
                invoiceSumReceived(ed) <- OVERRIDE invoiceSum(invoiceDetail(d)) (-) invoiceSum(d), 0.0;

                quantityAccepted(ed) <- OVERRIDE shipped(invoiceDetail(d)), 0.0;
                priceAccepted(ed) <- price(d);
                sumAccepted(ed) <- OVERRIDE sum(invoiceDetail(d)) (-) sum(d), 0.0;
                VATSumAccepted(ed) <- OVERRIDE VATSum(invoiceDetail(d)) (-) VATSum(d), 0.0;
                invoiceSumAccepted(ed) <- OVERRIDE invoiceSum(invoiceDetail(d)) (-) invoiceSum(d), 0.0;

                quantityNotAccepted(ed) <- OVERRIDE quantity(d), 0.0;
                priceNotAccepted(ed) <- price(d);
                sumNotAccepted(ed) <- OVERRIDE sum(d), 0.0;
                VATSumNotAccepted(ed) <- OVERRIDE VATSum(d), 0.0;
                invoiceSumNotAccepted(ed) <- OVERRIDE invoiceSum(d), 0.0;
                                
                overCreate(ed,d);
            }

            IF contactCustomerStock(eInvoice(ec)) THEN NEW cc = ECreditNoteCustomerContact {
                eCreditNote(cc) <- ec;
                contact(cc) <- contactCustomerStock(eInvoice(invoice(c)));
            }           

            overCreate(ec,c);
        }
        APPLY;
    }
}

EXTEND FORM creditNotes
    PROPERTIES READONLY PANEL numberECreditNote(c) SHOWIF useECriditNote(supplier(c))
    PROPERTIES(c) createECreditNote SHOWIF (eInvoice(invoice(c)) AND NOT eCreditNote(c) AND NOT hideCreateECreditNote(c) AND useECriditNote(supplier(c))),// statusDescription SHOWIF eInvoice(i) PANEL, 
        signAndSendCustomerCreditNoteEDI SHOWIF (eCreditNote(c) AND NOT exportedCustomer(eCreditNote(c))),
        cancelSignAndSendCustomerCreditNoteEDII SHOWIF (eCreditNote(c) AND exportedCustomer(eCreditNote(c)))
;

DESIGN creditNotes {
    documentDetail {
        NEW tabCreditNote AFTER printTab {
            caption = 'Печатные формы';
            tabbed = TRUE;
            MOVE printTab {caption = 'Акт расхождений';};
            NEW eCreditNote {
                caption = 'Электронный акт приемки';
                NEW createCN {
                    MOVE PROPERTY(numberECreditNote(c));
                    MOVE PROPERTY(createECreditNote(c));
                    MOVE PROPERTY(signAndSendCustomerCreditNoteEDI(c));
                    MOVE PROPERTY(cancelSignAndSendCustomerCreditNoteEDII(c));
                }
            }
        }
    }
}

numberECreditNote 'Номер электронного акта приемки'(Invoice i) = actDifNumber(eCreditNote(invoiceCreditNote(i)));

signAndSendCustomerCreditNoteEDI 'Подписать и отправить (покупатель)'(Invoice i)  {
    signAndSendCustomerCreditNoteEDI(invoiceCreditNote(i));
}

editAttributesECreditNote 'Заполнить атрибуты' (Invoice i)  {
    editAttributesECreditNote(eCreditNote(invoiceCreditNote(i)));
}

cancelSignAndSendCustomerCreditNoteEDII 'Отменить (покупатель)'(Invoice i)  {
    cancelSignAndSendCustomerCreditNoteEDII(invoiceCreditNote(i));
}
createECreditNote 'Создать электронный акт приемки' (Invoice i)  {
    createECreditNote(invoiceCreditNote(i));
}

EXTEND FORM invoices
    PROPERTIES READONLY PANEL numberECreditNote(i) SHOWIF (invoiceCreditNote(i) AND useECriditNote(supplier(invoiceCreditNote(i)))) 
    PROPERTIES(i) createECreditNote SHOWIF (invoiceCreditNote(i) AND eInvoice(i) AND NOT eCreditNote(invoiceCreditNote(i)) AND NOT hideCreateECreditNote(invoiceCreditNote(i)) AND useECriditNote(supplier(invoiceCreditNote(i)))),// statusDescription SHOWIF eInvoice(i) PANEL, 
        signAndSendCustomerCreditNoteEDI SHOWIF (invoiceCreditNote(i) AND eCreditNote(invoiceCreditNote(i)) AND NOT exportedCustomer(eCreditNote(invoiceCreditNote(i)))),
        editAttributesECreditNote SHOWIF (invoiceCreditNote(i) AND useECriditNote(supplier(invoiceCreditNote(i)))),
        cancelSignAndSendCustomerCreditNoteEDII SHOWIF (invoiceCreditNote(i) AND eCreditNote(invoiceCreditNote(i)) AND exportedCustomer(eCreditNote(invoiceCreditNote(i))) )
;

DESIGN invoices {
    tabConsignment{
        NEW eCreditNote {
            caption = 'Электронный акт приемки';
            NEW createCN {
                horizontal = TRUE;
                MOVE PROPERTY(numberECreditNote(i));
                MOVE PROPERTY(createECreditNote(i));
                MOVE PROPERTY(signAndSendCustomerCreditNoteEDI(i));
                MOVE PROPERTY(editAttributesECreditNote(i));
                MOVE PROPERTY(cancelSignAndSendCustomerCreditNoteEDII(i));
            }
        }
    }
}