MODULE PurchaseEInvoice;

REQUIRE InvoiceEInvoice, PurchaseInvoice, PurchaseCreditNote;

NAMESPACE Purchase;

overSupplier (EInvoice e) += supplier(invoice(e)) IF dataGLNSupplier(e) AND invoice(e) IS Purchase.UserInvoice;

eOperation = DATA Operation(LegalEntity);
nameEOperation 'Операция (Закупка) для электронных накладных'(LegalEntity l) = name(eOperation(l));

EXTEND FORM legalEntity
    PROPERTIES (l) PurchaseInvoiceNameEOperation = nameEOperation;

DESIGN legalEntity {
    EInvoice {
        MOVE PROPERTY (PurchaseInvoiceNameEOperation);
    }
} 

receiver = DATA Employee (UserInvoice);
receiver(UserInvoice i) += receiver(i);

nameReceiver 'Приёмщик'(Invoice i) = name(receiver(i));

eInvoiceDetail 'Строка ЭТТН' = DATA EInvoiceDetail (Purchase.InvoiceDetail) INDEXED;
numberEInvoiceDetail 'Строка ЭТТН' (Purchase.InvoiceDetail d) = lineItemNumber(eInvoiceDetail(d));

overPrevList = ABSTRACT NUMERIC[16,4] (EInvoiceDetail);
prevList (PriceListType t, UserInvoiceDetail d) += WHEN t == priceListType(d) AND eInvoiceDetail(d) THEN (OVERRIDE overPrevList(eInvoiceDetail(d)), lineItemPrice(eInvoiceDetail(d)));

filterDate 'Дата' = DATA LOCAL DATE ();
filterDate (EInvoice i) = DATE(deliveryNoteDateTime(i)) == filterDate() OR NOT filterDate();      

filterSupplier = DATA LOCAL LegalEntity ();
overFilterSupplier = ABSTRACT LegalEntity(EInvoice);
filterSupplier (EInvoice i) = (OVERRIDE overFilterSupplier(i), supplier(i)) = filterSupplier() OR (i IS EInvoice AND NOT filterSupplier()) OR NOT supplier(i);

filterCustomer = DATA LOCAL LegalEntity ();
filterCustomer (EInvoice i) = customer(i)= filterCustomer() OR (i IS EInvoice AND NOT filterCustomer()) OR NOT customer(i);

filterStock = DATA LOCAL Stock ();
filterStock (EInvoice i) = customerStock(i)= filterStock() OR (i IS EInvoice AND NOT filterStock()) OR NOT customerStock(i);

FORM selectEInvoice 'Накладные EDI'
    PROPERTIES filterDate()
    
    OBJECTS ei = EInvoice
    PROPERTIES(ei) READONLY dateSupplier, numberSupplier, deliveryNoteNumber, nameSupplier, nameCustomer
    FILTERS filterDate(ei), 
            filterSupplier(ei),
            filterCustomer(ei),
            filterStock(ei),
            NOT invoice(ei),
            importedCustomer(ei),
            NOT overIsReturn(ei)            
;

DESIGN selectEInvoice {
    NEW filter {
        caption = 'Фильтр';
        MOVE PROPERTY (filterDate());
    }
    
    MOVE BOX(ei);
    MOVE TOOLBARBOX;
}

overCopy ABSTRACT LIST ( EInvoice, UserInvoice);
overCopy  ABSTRACT LIST ( EInvoiceDetail, UserInvoiceDetail);
ignoreDetail = ABSTRACT BOOLEAN (EInvoiceDetail);
copyData(EInvoice ei, Invoice i)  { 
    invoice(EInvoice e) <- NULL WHERE invoice(e) == i AND NOT isCancel(e);
    invoice(ei) <- i;
    number(i) <- deliveryNoteNumber48(ei);
    series(i) <- NULL;
    operation(i) <- eOperation(supplier(ei)) WHERE eOperation(supplier(ei));
    supplier(i) <- supplier(ei);
    supplierStock(i) <- OVERRIDE supplierStock(ei), defaultStock(supplier(ei));
    customer(i) <- customer(ei);
    customerStock(i) <- customerStock(ei);
    date(i) <- DATE(deliveryNoteDateTime(ei));
    time(i) <- TIME(deliveryNoteDateTime(ei));
    overCopy(ei,i);
    
    FOR eInvoice(EInvoiceDetail eid) == eInvoice(i) AND NOT ignoreDetail(eid) NEW id = UserInvoiceDetail DO {
        userInvoice(id) <- i;
        sku(id) <- OVERRIDE sku(lineItemBuyerID(eid)), skuGTIN(lineItemID(eid)), sku(lineItemID(eid));
        quantity(id) <- quantityDespatched(eid);
        price(id) <- lineItemPrice(eid);
        VAT(id) <- valueCurrentVAT(country(defaultStock(supplier(ei))), NUMERIC[10,5](valueVAT(eid)));;
        valueVAT(id) <- NUMERIC[10,5](valueVAT(eid)); 
        invoicePrice(id) <- round2(price(id) * (100 + valueVAT(id))/100);
        sum(id) <- lineItemAmountWithoutCharges(eid) WHERE isEDI(ei);
        VATSum(id) <- lineItemAmountCharges(eid) WHERE isEDI(ei);
        invoiceSum(id) <- lineItemAmount(eid) WHERE isEDI(ei);
        eInvoiceDetail(id) <- eid;

        overCopy(eid,id); 
    }
}


overImportFromEInvoice  ABSTRACT LIST (UserInvoice);
importFromEInvoice 'Импорт из накладной EDI' (UserInvoice i)  { 
    IF isPosted(i) THEN {
        MESSAGE 'Вы пытаетесь импортировать в проведенный документ. Распроведите его.';
        RETURN;
    }
    
    filterDate() <- date(i);
    filterSupplier() <- supplier(i);
    filterCustomer() <- customer(i);    
    filterStock() <- customerStock(i);
    
    DIALOG selectEInvoice OBJECTS ei INPUT DO {
        IF ei THEN {
            copyData(ei,i);
            overImportFromEInvoice(i);
        }  
    }
}

createInvoice 'Создать на основе накладных EDI' (DATE d) {
    FOR DATE(deliveryNoteDateTime(EInvoice ei)) == d AND NOT invoice(ei) DO {
        NEWSESSION NEW i = UserInvoice {
            copyData(ei, i);
            IF [GROUP SUM 1 IF invoice(UserInvoiceDetail id) == i]() == [GROUP SUM 1 IF invoice(UserInvoiceDetail id) == i AND prevPriceB(priceListType('own'), sku(id), customerStock(id), dateTime(id))]() THEN {
                operation(i) <- operation('own');
            }
            executeLocalEvents('Purchase.userInvoice');
            APPLY;
        }
    }
}

FORM dialogEInvoiceCustomer 'Выбор электронной накладной'
    OBJECTS i = EInvoice
    PROPERTIES(i) READONLY dateSupplier, numberSupplier, deliveryNoteNumber, nameSupplier, nameCustomer, nameCustomerStock
    FILTERS importedCustomer(i)
    FILTERS NOT overIsReturn(i)
;
@extendFormFilterAccessStock(dialogEInvoiceCustomer, i, dialogEInvoiceCustomer, customerStock, Company);

overChangeEInvoiceCustomer ABSTRACT LIST (EInvoice, UserInvoice);

changeEInvoiceCustomer(Invoice in) {
    DIALOG dialogEInvoiceCustomer OBJECTS i = eInvoice(in) NULL INPUT NULL DO {
        invoice(EInvoice e) <- NULL WHERE e == eInvoice(in) AND NOT isCancel(e);
        invoice(i) <- in;
        overChangeEInvoiceCustomer(i,in);
    }
}

EXTEND FORM userInvoice 
    PROPERTIES READONLYIF exportedCustomer(eInvoice(i)) numberEInvoice(i) ON CHANGE changeEInvoiceCustomer(i)
    PROPERTIES(i) READONLYIF exportedCustomer(eInvoice(i)) importFromEInvoice, nameReceiver
;

DESIGN userInvoice {
    import {
        NEW importEDI {
            caption = 'Накладная EDI';
            flex = 1;
            type = CONTAINERV;
            MOVE PROPERTY(numberEInvoice(i));
            MOVE PROPERTY(nameReceiver(i));
            MOVE PROPERTY(importFromEInvoice(i));
        }
    }
}

signAndSendBlrapnCustomerEDI 'Подписать и отправить извещение о прочтении (покупатель)'(Invoice i)  { 
    NEWSESSION {
        in(EInvoice e) <- e = eInvoice(i);
        signAndSendBlrapnCustomerEDI();
        in(EInvoice e) <- NULL;
    }
}
signAndSendCustomerEDI 'Подписать и отправить (покупатель)'(Invoice i)  { 
    NEWSESSION {
        in(EInvoice e) <- e = eInvoice(i);
        signAndSendCustomerEDI();
        in(EInvoice e) <- NULL;
    }
}
signAndSendNoticeCustomerEDI 'Подписать и отправить уведомление об изменении (покупатель)'(Invoice i)  { 
    NEWSESSION {
        in(EInvoice e) <- e = eInvoice(i);
        signAndSendNoticeCustomerEDI();
        in(EInvoice e) <- NULL;
    }
}

hideSignAndSendBlrapnCustomerEDI = ABSTRACT BOOLEAN (Invoice);
hideSignAndSendCustomerEDI = ABSTRACT BOOLEAN (Invoice);
hideSignAndSendNoticeCustomerEDI = ABSTRACT BOOLEAN (Invoice);

EXTEND FORM invoices
    PROPERTIES READONLY numberEInvoice = numberEInvoice(i), statusDescription = statusDescription(i) BACKGROUND backgroundStatusDescription(i)
    PROPERTIES numberEInvoice(i) SHOWIF eInvoice(i) PANEL READONLY,
               signAndSendBlrapnCustomerEDI(i) SHOWIF (eInvoice(i) AND NOT exportedBlrapnCustomer(eInvoice(i)) AND importedCustomer(eInvoice(i)) AND NOT hideSignAndSendBlrapnCustomerEDI(i)),
               signAndSendCustomerEDI(i) SHOWIF (eInvoice(i) AND NOT exportedCustomer(eInvoice(i)) AND NOT exportedNoticeCustomer(eInvoice(i)) AND NOT hideSignAndSendCustomerEDI(i)),
               signAndSendNoticeCustomerEDI(i) SHOWIF (eInvoice(i) AND NOT exportedCustomer(eInvoice(i)) AND NOT exportedNoticeCustomer(eInvoice(i)) AND NOT hideSignAndSendNoticeCustomerEDI(i)),
               statusDescription(i) SHOWIF eInvoice(i) PANEL
;

DESIGN invoices {
    printTabScroll {
        NEW tabConsignment{
            type = TABBED;
            MOVE printTab {caption = 'Накладная';};
            NEW eInvoice {
                caption = 'Электронная накладная';
                NEW createEI {
                    type = CONTAINERH;
                    MOVE PROPERTY(numberEInvoice(i));
                    MOVE PROPERTY(signAndSendBlrapnCustomerEDI(i));
                    MOVE PROPERTY(signAndSendCustomerEDI(i));
                    MOVE PROPERTY(signAndSendNoticeCustomerEDI(i));
                    MOVE PROPERTY(statusDescription(i));
                }
            }
        }
    }    
}

skipNumberCheck(Invoice i) += IF (GROUP SUM 1 IF invoice(EInvoice ei) == i) THEN TRUE;
 
@defineOption(createPurchaseInvoiceFromEInvoice, 'Автоматически создавать накладную (закупка) при создании накладной EDI', EDI);

skipCreatePurchaseInvoice = ABSTRACT BOOLEAN (EInvoice);

//убрать, т.к. не срабатывают локальные события
WHEN SET(EInvoice ei IS EInvoice) AND createPurchaseInvoiceFromEInvoice() AND NOT skipCreatePurchaseInvoice(ei) DO {
    NEW i = UserInvoice {
        copyData(ei,i);
        executeLocalEvents('Purchase.userInvoice');
    }        
}