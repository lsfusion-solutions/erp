MODULE EInvoiceEDSTopBy;

REQUIRE EInvoiceEDS, EDSTopBy;

NAMESPACE EDI;

aliasEDSServiceCustomer (EInvoice i) = OVERRIDE aliasEDSService(currentUser()), aliasEDSService(customerStock(i)), extraAliasEDSService(customer(i)) IF useExtraAlias(customer(i)), aliasEDSService(customer(i));
passwordEDSServiceCustomer (EInvoice i) = OVERRIDE passwordEDSService(currentUser()), passwordEDSService(customerStock(i)), extraPasswordEDSService(customer(i)) IF useExtraAlias(customer(i)), passwordEDSService(customer(i));

aliasEDSServiceSupplier (EInvoice i) = OVERRIDE aliasEDSService(currentUser()), aliasEDSService(supplierStock(i)), aliasEDSService(supplier(i));
passwordEDSServiceSupplier (EInvoice i) = OVERRIDE passwordEDSService(currentUser()), passwordEDSService(supplierStock(i)), passwordEDSService(supplier(i));

EDSServiceCustomer(STRING[100] provider, EInvoice i) += WHEN provider == 'TopBy' AND i IS EInvoice
    THEN OVERRIDE EDSServiceTopBy(currentUser()), EDSServiceTopBy(customerStock(i)), EDSServiceTopBy(customer(i));
EDSServiceSupplier(STRING[100] provider, EInvoice i) += WHEN provider == 'TopBy' AND i IS EInvoice
    THEN OVERRIDE EDSServiceTopBy(currentUser()), EDSServiceTopBy(supplierStock(i)), EDSServiceTopBy(supplier(i));

getAcknowledgement(STRING Xml) = FORMULA '(regexp_matches($1, \'.*(<Acknowledgement>.*</Acknowledgement>).*\'))[1]';
getActdif(STRING Xml) = FORMULA '(regexp_matches($1, \'.*(<Actdif>.*</Actdif>).*\'))[1]';
getDeliveryNote(STRING Xml) = FORMULA '(regexp_matches($1, \'.*(<DeliveryNote>.*</DeliveryNote>).*\'))[1]';
insertSignature(STRING e, STRING s) = FORMULA '(regexp_matches($1, \'(.*)(</.*)$\'))[1] || $2 || (regexp_matches($1, \'(.*)(</.*)$\'))[2]';

sign(FILE contentSubXML, EDSService e, BOOLEAN isNew, INTEGER subjectSide) {
    signError() <- NULL;
    signResult() <- NULL;
    
    fileToString(contentSubXML);
    LOCAL baseXml = STRING ();
    baseXml() <- regexpReplace(resultString(), '\\r?\\\n\\s*', '', 'g');

    CASE 
        WHEN documentType() == 'BLRAPN' THEN {
            encodeBase64(getAcknowledgement(baseXml()));
        } 
        WHEN documentType() == 'BLRADF' THEN {
            encodeBase64(getActdif(baseXml()));
        }
        ELSE {
            encodeBase64(getDeliveryNote(baseXml()));
        }
    
    OID(0) <- '1.2.112.1.2.1.1.1.1.2' IF useAttribute(e);
    text(0) <- unpLegalEntity(e) IF useAttribute(e);

    EXPORT sccpSign JSON;

    sendRequestEDI(NULL, NULL, 'http://' + host(e) + ':' + port(e) + '/SCCrypto/ra/signd', exportFile(), NULL, client(e));

    IMPORT sccpSignResult JSON FROM sendRequestEDIResponse();
    
    IF errorCode() == 0 THEN {
        baseXml() <- insertSignature(baseXml(), 
            '<SpecialPart><Signature>'
                +'<SecurityID>1</SecurityID>'
                +'<CertificateID>'+serial()+'</CertificateID>'
                +'<CertificateSubject>'+getCN(subjectName())+'</CertificateSubject>'
                + (OVERRIDE '<CertificateSubjectSide>'+subjectSide+'</CertificateSubjectSide>','')
                +'<SecurityPartyID>'+issuerSerial()+'</SecurityPartyID>'
                +'<SecurityPartyName>'+getCN(issuerName())+'</SecurityPartyName>'
                +( IF isNew THEN '<SigningTime>'+toChar(signDateTimeISO8601(),'YYYYMMDDHH24MISS')+'</SigningTime>'
                            ELSE '<SignatureDateTime>'+toChar(signDateTimeISO8601(),'YYYYMMDDHH24MISS')+'</SignatureDateTime>')
                +'<SignatureValue>'+replace(resultB64(),'\\/','/')+'</SignatureValue>'
            +'</Signature></SpecialPart>');
        IF NOT baseXml() THEN {
            signError() <- 'Не полная информация о подписи документа';
            logToFile('edi', 'SC-CryptoProxy error in sign result');
            logToFile('edi', sendRequestEDIResponse());
        } ELSE {
            encodeBase64(baseXml());
            signResult() <- encodedBase64();
        }
    }
}

getSignedDocumentSupplier(STRING[100] provider, EInvoice e, FILE contentSubXML, BOOLEAN interactive) + {
    LOCAL EDSService = EDSService ();
    LOCAL isAutoApn = BOOLEAN ();
    IF NOT disableAutoBlrapn() AND EDSServiceTopBy(supplier(e)) AND NOT interactive THEN {
        //если включено авто подтверждение то подписываем ключом организации
        EDSService() <- EDSServiceTopBy(supplier(e));
        isAutoApn() <- TRUE;
    } ELSE {
        EDSService() <- EDSServiceSupplier(provider, e);
    }
    IF edsApplication(EDSService()) == EDSApplication.sccp THEN {
        IF aliasEDSServiceSupplier(e) AND (OVERRIDE passwordEDSService(), passwordEDSServiceSupplier(e)) THEN {
            keyID() <- IF isAutoApn() THEN aliasEDSService(supplier(e)) ELSE  aliasEDSServiceSupplier(e);
            password() <-  IF isAutoApn() THEN passwordEDSService(supplier(e)) ELSE (OVERRIDE passwordEDSService(), passwordEDSServiceSupplier(e));
            sign(contentSubXML, EDSServiceSupplier(provider,e), isNewFormat(e), NULL);
        } ELSE {
            IF interactive THEN {
                MESSAGE provider + ' Документ ' + deliveryNoteNumber(e) + ' не подписан: Alias или Пароль ключа не задан' NOWAIT;
            }
            logToFile('edi', provider + ' error: Alias or Password for key not found');
        }
        RETURN;
    }
}

getSignedDocumentCustomer(STRING[100] provider, EInvoice e, FILE contentSubXML, BOOLEAN interactive) + {
    LOCAL EDSService = EDSService ();
    LOCAL isAutoApn = BOOLEAN ();
    IF NOT disableAutoBlrapn() AND EDSServiceTopBy(customer(e)) AND NOT interactive THEN {
        //если включено авто подтверждение то подписываем ключом организации
        EDSService() <- EDSServiceTopBy(customer(e));
        isAutoApn() <- TRUE;
    } ELSE {
        EDSService() <- EDSServiceCustomer(provider, e);
    }
    IF edsApplication(EDSService()) == EDSApplication.sccp THEN {
        IF aliasEDSServiceCustomer(e) AND (OVERRIDE passwordEDSService(), passwordEDSServiceCustomer(e)) THEN {
            keyID() <- IF isAutoApn() THEN aliasEDSService(customer(e)) ELSE  aliasEDSServiceCustomer(e);
            password() <- IF isAutoApn() THEN passwordEDSService(customer(e)) ELSE (OVERRIDE passwordEDSService(), passwordEDSServiceCustomer(e));
            sign(contentSubXML, EDSService(), isNewFormat(e), NULL);
        } ELSE {
            IF interactive THEN {
                MESSAGE provider + ' Документ ' + deliveryNoteNumber(e) + ' не подписан: Alias или Пароль ключа не задан' NOWAIT;
            }
            logToFile('edi', provider + ' error: Alias or Password for key not found');
        }
        RETURN;
    }
}

//акты
aliasEDSServiceCustomer (ECreditNote i) = OVERRIDE aliasEDSService(currentUser()), aliasEDSService(customerStock(i)), aliasEDSService(customer(i));
passwordEDSServiceCustomer (ECreditNote i) = OVERRIDE passwordEDSService(currentUser()), passwordEDSService(customerStock(i)), passwordEDSService(customer(i));

aliasEDSServiceSupplier (ECreditNote i) = OVERRIDE aliasEDSService(currentUser()), aliasEDSService(supplier(i)); //aliasEDSService(supplierStock(i)), 
passwordEDSServiceSupplier (ECreditNote i) = OVERRIDE passwordEDSService(currentUser()), passwordEDSService(supplier(i));//passwordEDSService(supplierStock(i)), 

EDSServiceCustomer(STRING[100] provider, ECreditNote i) += WHEN provider == 'TopBy' AND i IS ECreditNote
    THEN OVERRIDE EDSServiceTopBy(currentUser()), EDSServiceTopBy(customerStock(i)), EDSServiceTopBy(customer(i));
EDSServiceSupplier(STRING[100] provider, ECreditNote i) += WHEN provider == 'TopBy' AND i IS ECreditNote
    THEN OVERRIDE EDSServiceTopBy(currentUser()), EDSServiceTopBy(supplier(i)); //EDSServiceTopBy(supplierStock(i)), 

getSignedDocumentCustomer(STRING[100] provider, ECreditNote e, FILE contentSubXML, BOOLEAN interactive) + {
    IF edsApplication(EDSServiceCustomer(provider, e)) == EDSApplication.sccp THEN {
        IF aliasEDSServiceCustomer(e) AND (OVERRIDE passwordEDSService(), passwordEDSServiceCustomer(e)) THEN {
            keyID() <- aliasEDSServiceCustomer(e);
            password() <- (OVERRIDE passwordEDSService(), passwordEDSServiceCustomer(e));
            sign(contentSubXML, EDSServiceCustomer(provider,e), TRUE, IF documentType() == 'BLRAPN' THEN NULL ELSE 0);
        } ELSE {
            IF interactive THEN {
                MESSAGE provider + ' Документ ' + actDifNumber(e) + ' не подписан: Alias или Пароль ключа не задан' NOWAIT;
            }
            logToFile('edi', provider + ' error: Alias or Password for key not found');
        }
        RETURN;
    }
}

getSignedDocumentSupplier(STRING[100] provider, ECreditNote e, FILE contentSubXML, BOOLEAN interactive) + {
    IF edsApplication(EDSServiceSupplier(provider, e)) == EDSApplication.sccp THEN {
        IF aliasEDSServiceSupplier(e) AND (OVERRIDE passwordEDSService(), passwordEDSServiceSupplier(e)) THEN {
            keyID() <- aliasEDSServiceSupplier(e);
            password() <- (OVERRIDE passwordEDSService(), passwordEDSServiceSupplier(e));
            sign(contentSubXML, EDSServiceSupplier(provider,e), TRUE, IF documentType() == 'BLRAPN' THEN NULL ELSE 1);
        } ELSE {
            IF interactive THEN {
                MESSAGE provider + ' Документ ' + actDifNumber(e) + ' не подписан: Alias или Пароль ключа не задан' NOWAIT;
            }
            logToFile('edi', provider + ' error: Alias or Password for key not found');
        }
        RETURN;
    }
}