MODULE EInvoiceEDSTopBy;

REQUIRE EInvoiceEDS, EDSTopBy;

NAMESPACE EDI;

aliasEDSServiceCustomer (EInvoice i) = OVERRIDE aliasEDSService(currentUser()), aliasEDSService(customerStock(i)), aliasEDSService(customer(i));
passwordEDSServiceCustomer (EInvoice i) = OVERRIDE passwordEDSService(currentUser()), passwordEDSService(customerStock(i)), passwordEDSService(customer(i));

aliasEDSServiceSupplier (EInvoice i) = OVERRIDE aliasEDSService(currentUser()), aliasEDSService(supplierStock(i)), aliasEDSService(supplier(i));
passwordEDSServiceSupplier (EInvoice i) = OVERRIDE passwordEDSService(currentUser()), passwordEDSService(supplierStock(i)), passwordEDSService(supplier(i));

EDSServiceCustomer(STRING[100] provider, EInvoice i) += WHEN provider == 'TopBy' AND i IS EInvoice
    THEN OVERRIDE EDSServiceTopBy(currentUser()), EDSServiceTopBy(customerStock(i)), EDSServiceTopBy(customer(i));
EDSServiceSupplier(STRING[100] provider, EInvoice i) += WHEN provider == 'TopBy' AND i IS EInvoice
    THEN OVERRIDE EDSServiceTopBy(currentUser()), EDSServiceTopBy(supplierStock(i)), EDSServiceTopBy(supplier(i));

//EDSService

sendRequestEDSCustomer(STRING[100] provider, EInvoice ei, FILE file) {
    sendRequestEDI('eds', 'eds', ('http://' + host(EDSServiceCustomer(provider,ei)) + ':' + port(EDSServiceCustomer(provider,ei)) + '/eds/services/EDSService?wsdl'), file, TRUE, client(EDSServiceCustomer(provider,ei)));
}
getSignedDocumentCustomer(STRING[100] provider, EInvoice eInvoice, FILE contentSubXML, BOOLEAN interactive) + {
    IF edsApplication(EDSServiceCustomer(provider, eInvoice)) == EDSApplication.edsService THEN {
        IF aliasEDSServiceCustomer(eInvoice) AND (OVERRIDE passwordEDSService(), passwordEDSServiceCustomer(eInvoice)) THEN {
            signError() <- NULL;
            signResult() <- NULL;

            LOCAL xml = FILE();
            fileToString(contentSubXML);
            EXPORT getEDS OBJECTS alias = aliasEDSServiceCustomer(eInvoice),password = (OVERRIDE passwordEDSService(), passwordEDSServiceCustomer(eInvoice)) XML TO xml;
            LOCAL innerXML = TEXT();
            innerXML() <- resultString();
            fileToString(xml());
            stringToFile(replace(resultString(),'innerXML','<![CDATA[' + innerXML() + ']]>'),'UTF-8','xml');
            sendRequestEDSCustomer(provider, eInvoice, resultFile());
            IMPORT getEDSResponse FROM sendRequestEDIResponse();
            signError() <- faultstring();
            IF waybill() THEN {
                encodeBase64(waybill());
                signResult() <- encodedBase64();
            }
        } ELSE {
            IF interactive THEN {
                MESSAGE provider + ' Документ ' + deliveryNoteNumber(eInvoice) + ' не подписан: Alias или Пароль EDSService не задан' NOWAIT;
            }
            logToFile('edi', provider + ' error: Alias or Password for EDSService not found');
        }
        RETURN;
    }
}

sendRequestEDSSupplier(STRING[100] provider, EInvoice ei, FILE file) {
    sendRequestEDI('eds', 'eds', ('http://' + host(EDSServiceSupplier(provider,ei)) + ':' + port(EDSServiceSupplier(provider,ei)) + '/eds/services/EDSService?wsdl'), file, TRUE, client(EDSServiceSupplier(provider,ei)));
}
getSignedDocumentSupplier(STRING[100] provider, EInvoice eInvoice, FILE contentSubXML, BOOLEAN interactive) + {
    IF edsApplication(EDSServiceSupplier(provider, eInvoice)) == EDSApplication.edsService THEN {
        IF aliasEDSServiceSupplier(eInvoice) AND (OVERRIDE passwordEDSService(), passwordEDSServiceSupplier(eInvoice)) THEN {
            signError() <- NULL;
            signResult() <- NULL;

            LOCAL xml = FILE();
            fileToString(contentSubXML);
            EXPORT getEDS OBJECTS alias = aliasEDSServiceSupplier(eInvoice), password = (OVERRIDE passwordEDSService(), passwordEDSServiceSupplier(eInvoice)) XML TO xml;
            LOCAL innerXML = TEXT();
            innerXML() <- resultString();
            fileToString(xml());
            stringToFile(replace(resultString(),'innerXML','<![CDATA[' + innerXML() + ']]>'),'UTF-8','xml');
            sendRequestEDSSupplier(provider, eInvoice, resultFile());
            IMPORT getEDSResponse FROM sendRequestEDIResponse();
            signError() <- faultstring();
            IF waybill() THEN {
                encodeBase64(waybill());
                signResult() <- encodedBase64();
            }
        } ELSE {
            IF interactive THEN {
                MESSAGE provider + ' Документ ' + deliveryNoteNumber(eInvoice) + ' не подписан: Alias или Пароль EDSService не задан' NOWAIT;
            }
            logToFile('edi', provider + ' error: Alias or Password for EDSService not found');
        }
        RETURN;
    }
}

//CTT-EDS-SIGN

getSignedDocumentSupplier(STRING[100] provider, EInvoice eInvoice, FILE contentSubXML, BOOLEAN interactive) + {
    IF edsApplication(EDSServiceSupplier(provider, eInvoice)) == EDSApplication.edsSign THEN {
        IF aliasEDSServiceSupplier(eInvoice) AND (OVERRIDE passwordEDSService(), passwordEDSServiceSupplier(eInvoice)) THEN {
            signError() <- NULL;
            signResult() <- NULL;

            fileToString(contentSubXML);
            stringToFile(regexpReplace(resultString(), '\\r?\\\n\\s*', '', 'g'),'UTF-8','xml');

            EXPORT JSON FROM
                alias = aliasEDSServiceSupplier(eInvoice),
                pass = (OVERRIDE passwordEDSService(), passwordEDSServiceSupplier(eInvoice)),
                attributeOID = '1.2.112.1.2.1.1.1.1.2',
                dataType = 'EDIXML',
                dataBase64 = RAWFILE(resultFile())
            ;

            sendRequestEDI('eds',
                'eds',
                ('http://' + host(EDSServiceSupplier(provider,eInvoice)) + ':' + port(EDSServiceSupplier(provider,eInvoice)) + '/token/sign'),
                exportFile(),
                TRUE,
                client(EDSServiceSupplier(provider,eInvoice)));

            IF statusHttp() == 200 THEN {
                fileToString(sendRequestEDIResponse());
                encodeBase64(resultString());
                signResult() <- encodedBase64();
            }
        } ELSE {
            IF interactive THEN {
                MESSAGE provider + ' Документ ' + deliveryNoteNumber(eInvoice) + ' не подписан: Alias или Пароль EDSService не задан' NOWAIT;
            }
            logToFile('edi', provider + ' error: Alias or Password for EDSService not found');
        }
        RETURN;
    }
}

getSignedDocumentCustomer(STRING[100] provider, EInvoice eInvoice, FILE contentSubXML, BOOLEAN interactive) + {
    IF edsApplication(EDSServiceCustomer(provider, eInvoice)) == EDSApplication.edsSign THEN {
        IF aliasEDSServiceCustomer(eInvoice) AND (OVERRIDE passwordEDSService(), passwordEDSServiceCustomer(eInvoice)) THEN {
            signError() <- NULL;
            signResult() <- NULL;

            fileToString(contentSubXML);
            stringToFile(regexpReplace(resultString(), '\\r?\\\n\\s*', '', 'g'),'UTF-8','xml');

            EXPORT JSON FROM
                alias = aliasEDSServiceCustomer(eInvoice),
                pass = (OVERRIDE passwordEDSService(), passwordEDSServiceCustomer(eInvoice)),
                attributeOID = '1.2.112.1.2.1.1.1.1.2',
                dataType = 'EDIXML',
                dataBase64 = RAWFILE(resultFile())
            ;

            sendRequestEDI('eds',
                'eds',
                ('http://' + host(EDSServiceCustomer(provider,eInvoice)) + ':' + port(EDSServiceCustomer(provider,eInvoice)) + '/token/sign'),
                exportFile(),
                TRUE,
                client(EDSServiceCustomer(provider,eInvoice)));

            IF statusHttp() == 200 THEN {
                fileToString(sendRequestEDIResponse());
                encodeBase64(resultString());
                signResult() <- encodedBase64();
            }
        } ELSE {
            IF interactive THEN {
                MESSAGE provider + ' Документ ' + deliveryNoteNumber(eInvoice) + ' не подписан: Alias или Пароль EDSService не задан' NOWAIT;
            }
            logToFile('edi', provider + ' error: Alias or Password for EDSService not found');
        }
        RETURN;
    }
}

//SC-CryptoProxy
GROUP auth EXTID 'Auth';

keyID = DATA LOCAL STRING();
password = DATA LOCAL STRING();
OID = DATA LOCAL STRING(INTEGER);
text = DATA LOCAL STRING(INTEGER);

FORM sccpSign
    PROPERTIES =TRUE EXTID 'OptAddAllCert', =TRUE EXTID 'OptAddCert', =TRUE EXTID 'OptCheckPrivateKey', encodedBase64() EXTID 'DataB64' 
    PROPERTIES IN auth keyID() EXTID 'KeyID', password() EXTID 'Password', = 1 EXTID 'CryptoType'
    
    OBJECTS attributes = INTEGER EXTID 'Attributes'
    PROPERTIES(attributes) text EXTID 'Text', OID
    FILTERS OID(attributes);

GROUP signInfo EXTID 'SignInfo';

issuerSerial = DATA LOCAL STRING();
subjectName = DATA LOCAL STRING();
signDateTimeISO8601 = DATA LOCAL DATETIME ();
issuerName = DATA LOCAL STRING();
serial = DATA LOCAL STRING();
errorCode = DATA LOCAL INTEGER();
resultB64 = DATA LOCAL STRING();

FORM sccpSignResult
    PROPERTIES() errorCode EXTID 'ErrorCode', signError EXTID 'ErrorMessage', resultB64 EXTID 'ResultB64'
    PROPERTIES() IN signInfo issuerSerial EXTID 'IssuerSerial', subjectName EXTID 'SubjectName', signDateTimeISO8601 EXTID 'SignDateTimeISO8601', issuerName EXTID 'IssuerName', serial EXTID 'Serial'
;

getAcknowledgement(STRING Xml) = FORMULA '(regexp_matches($1, \'.*(<Acknowledgement>.*</Acknowledgement>).*\'))[1]';
getDeliveryNote(STRING Xml) = FORMULA '(regexp_matches($1, \'.*(<DeliveryNote>.*</DeliveryNote>).*\'))[1]';
insertSignature(STRING e, STRING s) = FORMULA '(regexp_matches($1, \'(.*)(</.*)$\'))[1] || $2 || (regexp_matches($1, \'(.*)(</.*)$\'))[2]';

sign(FILE contentSubXML, STRING socket, BOOLEAN client, BOOLEAN isNew) {
    signError() <- NULL;
    signResult() <- NULL;

    
    fileToString(contentSubXML);
    LOCAL baseXml = STRING ();
    baseXml() <- regexpReplace(resultString(), '\\r?\\\n\\s*', '', 'g');

    IF documentType() == 'BLRAPN' THEN {
        encodeBase64(getAcknowledgement(baseXml()));
    } ELSE {
        encodeBase64(getDeliveryNote(baseXml()));
    }
    
    OID(0) <- '1.2.112.1.2.1.1.1.1.2';

    EXPORT sccpSign JSON;

    sendRequestEDI(NULL, NULL, 'http://' + socket + '/SCCrypto/ra/signd', exportFile(), NULL, client);

    IMPORT sccpSignResult JSON FROM sendRequestEDIResponse();
    
    IF errorCode() == 0 THEN {
        baseXml() <- insertSignature(baseXml(), 
            '<SpecialPart><Signature>'
                +'<SecurityID>1</SecurityID>'
                +'<CertificateID>'+serial()+'</CertificateID>'
                +'<CertificateSubject>'+getCN(subjectName())+'</CertificateSubject>'
                +'<SecurityPartyID>'+issuerSerial()+'</SecurityPartyID>'
                +'<SecurityPartyName>'+getCN(issuerName())+'</SecurityPartyName>'
                +( IF isNew THEN '<SigningTime>'+toChar(signDateTimeISO8601(),'YYYYMMDDHH24MISS')+'</SigningTime>'
                            ELSE '<SignatureDateTime>'+toChar(signDateTimeISO8601(),'YYYYMMDDHH24MISS')+'</SignatureDateTime>')
                +'<SignatureValue>'+replace(resultB64(),'\\/','/')+'</SignatureValue>'
            +'</Signature></SpecialPart>');
        IF NOT baseXml() THEN {
            signError() <- 'Не полная информация о подписи документа';
            logToFile('edi', 'SC-CryptoProxy error in sign result');
            logToFile('edi', sendRequestEDIResponse());
        } ELSE {
            encodeBase64(baseXml());
            signResult() <- encodedBase64();
        }
    }
}

getSignedDocumentSupplier(STRING[100] provider, EInvoice e, FILE contentSubXML, BOOLEAN interactive) + {
    IF edsApplication(EDSServiceSupplier(provider, e)) == EDSApplication.sccp THEN {
        IF aliasEDSServiceSupplier(e) AND (OVERRIDE passwordEDSService(), passwordEDSServiceSupplier(e)) THEN {
            keyID() <- aliasEDSServiceSupplier(e);
            password() <- (OVERRIDE passwordEDSService(), passwordEDSServiceSupplier(e));
            sign(contentSubXML,host(EDSServiceSupplier(provider,e)) + ':' + port(EDSServiceSupplier(provider,e)), client(EDSServiceSupplier(provider,e)), isNewFormat(e));
        } ELSE {
            IF interactive THEN {
                MESSAGE provider + ' Документ ' + deliveryNoteNumber(e) + ' не подписан: Alias или Пароль ключа не задан' NOWAIT;
            }
            logToFile('edi', provider + ' error: Alias or Password for key not found');
        }
        RETURN;
    }
}

getSignedDocumentCustomer(STRING[100] provider, EInvoice e, FILE contentSubXML, BOOLEAN interactive) + {
    IF edsApplication(EDSServiceCustomer(provider, e)) == EDSApplication.sccp THEN {
        IF aliasEDSServiceCustomer(e) AND (OVERRIDE passwordEDSService(), passwordEDSServiceCustomer(e)) THEN {
            keyID() <- aliasEDSServiceCustomer(e);
            password() <- (OVERRIDE passwordEDSService(), passwordEDSServiceCustomer(e));
            sign(contentSubXML,host(EDSServiceCustomer(provider,e)) + ':' + port(EDSServiceCustomer(provider,e)), client(EDSServiceSupplier(provider,e)), isNewFormat(e));
        } ELSE {
            IF interactive THEN {
                MESSAGE provider + ' Документ ' + deliveryNoteNumber(e) + ' не подписан: Alias или Пароль ключа не задан' NOWAIT;
            }
            logToFile('edi', provider + ' error: Alias or Password for key not found');
        }
        RETURN;
    }
}

//акты
aliasEDSServiceCustomer (ECreditNote i) = OVERRIDE aliasEDSService(currentUser()), aliasEDSService(customerStock(i)), aliasEDSService(customer(i));
passwordEDSServiceCustomer (ECreditNote i) = OVERRIDE passwordEDSService(currentUser()), passwordEDSService(customerStock(i)), passwordEDSService(customer(i));

aliasEDSServiceSupplier (ECreditNote i) = OVERRIDE aliasEDSService(currentUser()), aliasEDSService(supplier(i)); //aliasEDSService(supplierStock(i)), 
passwordEDSServiceSupplier (ECreditNote i) = OVERRIDE passwordEDSService(currentUser()), passwordEDSService(supplier(i));//passwordEDSService(supplierStock(i)), 

EDSServiceCustomer(STRING[100] provider, ECreditNote i) += WHEN provider == 'TopBy' AND i IS ECreditNote
    THEN OVERRIDE EDSServiceTopBy(currentUser()), EDSServiceTopBy(customerStock(i)), EDSServiceTopBy(customer(i));
EDSServiceSupplier(STRING[100] provider, ECreditNote i) += WHEN provider == 'TopBy' AND i IS ECreditNote
    THEN OVERRIDE EDSServiceTopBy(currentUser()), EDSServiceTopBy(supplier(i)); //EDSServiceTopBy(supplierStock(i)), 

getSignedDocumentCustomer(STRING[100] provider, ECreditNote e, FILE contentSubXML, BOOLEAN interactive) + {
    IF edsApplication(EDSServiceCustomer(provider, e)) == EDSApplication.sccp THEN {
        IF aliasEDSServiceCustomer(e) AND (OVERRIDE passwordEDSService(), passwordEDSServiceCustomer(e)) THEN {
            keyID() <- aliasEDSServiceCustomer(e);
            password() <- (OVERRIDE passwordEDSService(), passwordEDSServiceCustomer(e));
            sign(contentSubXML,host(EDSServiceCustomer(provider,e)) + ':' + port(EDSServiceCustomer(provider,e)), client(EDSServiceSupplier(provider,e)), TRUE);
        } ELSE {
            IF interactive THEN {
                MESSAGE provider + ' Документ ' + deliveryNoteNumber(e) + ' не подписан: Alias или Пароль ключа не задан' NOWAIT;
            }
            logToFile('edi', provider + ' error: Alias or Password for key not found');
        }
        RETURN;
    }
}

getSignedDocumentSupplier(STRING[100] provider, ECreditNote e, FILE contentSubXML, BOOLEAN interactive) + {
    IF edsApplication(EDSServiceSupplier(provider, e)) == EDSApplication.sccp THEN {
        IF aliasEDSServiceSupplier(e) AND (OVERRIDE passwordEDSService(), passwordEDSServiceSupplier(e)) THEN {
            keyID() <- aliasEDSServiceSupplier(e);
            password() <- (OVERRIDE passwordEDSService(), passwordEDSServiceSupplier(e));
            sign(contentSubXML,host(EDSServiceSupplier(provider,e)) + ':' + port(EDSServiceSupplier(provider,e)), client(EDSServiceSupplier(provider,e)), TRUE);
        } ELSE {
            IF interactive THEN {
                MESSAGE provider + ' Документ ' + deliveryNoteNumber(e) + ' не подписан: Alias или Пароль ключа не задан' NOWAIT;
            }
            logToFile('edi', provider + ' error: Alias or Password for key not found');
        }
        RETURN;
    }
}