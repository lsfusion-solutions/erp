MODULE SupplierEInvoiceTopByProtocol;

REQUIRE SupplierEInvoice, EInvoiceEDITopBy;

NAMESPACE EDI;

blrwbrUserID = DATA LOCAL NESTED STRING[35]();
blrwbrDocumentNumber = DATA LOCAL NESTED STRING[48]();
blrwbrDocumentId = DATA LOCAL NESTED STRING[35]();
blrwbrDateTime = DATA LOCAL NESTED DATETIME();
blrwbrDeliveryNoteNumber = DATA LOCAL NESTED STRING[70]();
blrwbrFunctionCode = DATA LOCAL NESTED STRING[3]();

FORM blrwbr
    PROPERTIES IN messageHeader blrwbrDocumentNumber() EXTID 'MessageID',
                                blrwbrUserID() EXTID 'UserID'
    PROPERTIES IN deliveryNote blrwbrDocumentId() EXTID 'DocumentID',
                               blrwbrDeliveryNoteNumber() EXTID 'DeliveryNoteID',
                               blrwbrDateTime() EXTID 'CreationDateTime',
                               blrwbrFunctionCode() EXTID 'FunctionCode'
;

overImportBlrwbr ABSTRACT ();
skipBlrwbr = DATA LOCAL NESTED BOOLEAN();

overReceiveMessages(INTEGER i, STRING[100] login, STRING[100] password, TEXT url, STRING[100] archiveDir, BOOLEAN disableConfirmation, BOOLEAN receiveSupplierMessages, BOOLEAN sendReplies, STRING[100] provider) + {
    IF lower(documentType(i)) == 'blrwbr' AND receiveSupplierMessages AND NOT disableConfirmation THEN {
        TRY {
            IMPORT blrwbr XML FROM data(i);
            skipBlrwbr() <- NULL;
            overImportBlrwbr();
            IF NOT skipBlrwbr() THEN {
                FOR EInvoice ei == eInvoiceDeliveryNoteNumber(blrwbrDeliveryNoteNumber()) DO {
                    IF NOT disableAutoBlrapn() THEN {
                        LOCAL contentSubXML = FILE();
                        blrapnDateTime() <- currentDateTimeMillis();
                        blrapnMsgSender() <- glnSupplier(ei);
                        blrapnMsgReceiver() <- glnCustomer(ei);
                        blrapnUserID() <- userIDCustomerStock(ei);
                        blrapnDeliveryNoteId() <- deliveryNoteNumber(ei);
                        blrapnDeliveryNoteDate() <- DATE(deliveryNoteDateTime(ei));
                        blrapnReferenceDocumentType() <- 'BLRWBR';
                        blrapnReferenceDocumentId() <- blrwbrDocumentId();
                        blrapnReferenceDocumentDate() <- blrwbrDateTime();
                        blrapnShipper() <- glnSupplier(ei);
                        blrapnReceiver() <- glnCustomer(ei);
                        blrapnCode() <- '2650';
                        blrapnDescription() <- NULL;
                        toMilliseconds(blrapnDateTime());
                        EXPORT exportBlrapn XML TO contentSubXML;
                        IF archiveDir THEN {
                            TRY{ mkdir(archiveDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd')); }
                            WRITE contentSubXML() TO archiveDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                        }
                        IF EDSServiceSupplier(provider,ei) THEN {
                            getSignedDocumentSupplier(provider, ei, contentSubXML(), NULL);
                            IF signError() THEN {
                                logToFile('edi', provider + ' (' + login + ') Import EInvoice ' + id(i) + ' error: BLRAPN ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError());
                            }
                            ELSE IF signResult() THEN {
                                LOCAL ixml = XMLFILE();
                                envelopeLogin() <- login;
                                envelopePassword() <- password;
                                envelopeFilename() <- CONCAT '', 'invoice', deliveryNoteNumber(ei);
                                envelopeDocumentDate() <- blrapnDateTime();
                                envelopeDocumentNumber() <- numberSupplier(ei);
                                envelopeSender() <- glnSupplier(ei);
                                envelopeReceiver() <- glnCustomer(ei);
                                envelopeDeliveryPoint() <- glnCustomerStock(ei);
                                envelopeDocumentType() <- 'BLRAPN';
                                envelopeContent() <- signResult();
                                EXPORT envelope XML TO ixml;
                                sendRequestEDI(url, ixml());
                                logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice ' + deliveryNoteNumber(ei) +' request sent');
                                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                                IF requestError() THEN {
                                    logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice ' + deliveryNoteNumber(ei) + ': ' + requestError());
                                    MESSAGE provider + ' (' + login + ') Извещение о прочтении накладной ' + deliveryNoteNumber(ei) + ' не выгружено: ' + requestError() NOWAIT;
                                } ELSE {
                                    logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice ' + deliveryNoteNumber(ei) + ' request succeeded');
                                    IF NOT disableConfirmation THEN {
                                        LOCAL cxml = XMLFILE();
                                        EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO cxml;
                                        sendRequestEDI(url, cxml());
                                        logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request sent');
                                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                                        IF requestError() THEN {
                                            logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                                            MESSAGE provider + ' (' + login + ') Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                                        } ELSE {
                                            logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                                        }
                                    }
                                    blrwbrCount() <- blrwbrCount() + 1;
                                    NEWSESSION NESTED LOCAL {
                                        IF isCancel(ei) THEN {
                                            importedSupplierCancel(ei) <- TRUE;
                                        } ELSE {
                                            importedSupplier(ei) <- TRUE;
                                        }
                                        exportedBlrapnSupplier(ei) <- TRUE;
                                        NEW em = EInvoiceMessage {
                                            number(em) <- STRING[35](resultMilliseconds());
                                            eInvoice(em) <- ei;
                                            dateTime(em) <- blrapnDateTime();
                                            code(em) <- blrapnCode();
                                            kind(em) <- EInvoiceMessageKind.out;
                                            type(em) <- EInvoiceMessageType.blrapn_blrwbr;
                                            XMLPath(em) <- archiveDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                                        }
                                        APPLY NESTED LOCAL;
                                    }
                                }
                            }
                        } ELSE {
                            logToFile('edi', provider + ' (' + login + ') Import EInvoice ' + id(i) + ' error: не заданы параметры EDSService');
                        }
                    } ELSE {
                        IF NOT disableConfirmation THEN {
                            LOCAL cxml = XMLFILE();
                            EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO cxml;
                            sendRequestEDI(url, cxml());
                            logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request sent');
                            importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                            IF requestError() THEN {
                                logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                                MESSAGE provider + ' (' + login + ') Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                            } ELSE {
                                logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                            }
                        }
                        blrwbrCount() <- blrwbrCount() + 1;
                        NEWSESSION NESTED LOCAL {
                            IF isCancel(ei) THEN {
                                importedSupplierCancel(ei) <- TRUE;
                            } ELSE {
                                importedSupplier(ei) <- TRUE;
                            }
                            numberCustomer(ei) <- blrwbrDocumentId();
                            dateCustomer(ei) <- blrwbrDateTime();
                            APPLY NESTED LOCAL;
                        }
                    }
                }
            }
        } CATCH {
            logToFile('edi', CONCAT '\n', provider + ' (' + login + ') Parse EInvoice ' + id(i) + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE 'Ошибка при импорте накладной ' + id(i) +'. Обратитесь к администратору' NOWAIT;
        }
    }
}

blrdnrUserID = DATA LOCAL NESTED STRING[35]();
blrdnrDocumentNumber = DATA LOCAL NESTED STRING[48]();
blrdnrDocumentId = DATA LOCAL NESTED STRING[35]();
blrdnrDateTime = DATA LOCAL NESTED DATETIME();
blrdnrDeliveryNoteNumber = DATA LOCAL NESTED STRING[70]();
blrdnrFunctionCode = DATA LOCAL NESTED STRING[3]();

FORM blrdnr
    PROPERTIES IN messageHeader blrdnrDocumentNumber() EXTID 'MessageID',
                                blrdnrUserID() EXTID 'UserID'
    PROPERTIES IN deliveryNote blrdnrDocumentId() EXTID 'DocumentID',
                               blrdnrDeliveryNoteNumber() EXTID 'DeliveryNoteID',
                               blrdnrDateTime() EXTID 'CreationDateTime',
                               blrdnrFunctionCode() EXTID 'FunctionCode'
;

overImportBlrdnr ABSTRACT ();
skipBlrdnr = DATA LOCAL NESTED BOOLEAN();

overReceiveMessages(INTEGER i, STRING[100] login, STRING[100] password, TEXT url, STRING[100] archiveDir, BOOLEAN disableConfirmation, BOOLEAN receiveSupplierMessages, BOOLEAN sendReplies, STRING[100] provider) + {
    IF lower(documentType(i)) == 'blrdnr' AND receiveSupplierMessages AND NOT disableConfirmation THEN {
        TRY {
            IMPORT blrdnr XML FROM data(i);
            skipBlrdnr() <- NULL;
            overImportBlrdnr();
            IF NOT skipBlrdnr() THEN {
                FOR EInvoice ei == eInvoiceDeliveryNoteNumber(blrdnrDeliveryNoteNumber()) DO {
                    IF NOT disableAutoBlrapn() THEN {
                        LOCAL contentSubXML = FILE();
                        blrapnDateTime() <- currentDateTimeMillis();
                        blrapnMsgSender() <- glnSupplier(ei);
                        blrapnMsgReceiver() <- glnCustomer(ei);
                        blrapnUserID() <- userIDCustomerStock(ei);
                        blrapnDeliveryNoteId() <- deliveryNoteNumber(ei);
                        blrapnDeliveryNoteDate() <- DATE(deliveryNoteDateTime(ei));
                        blrapnReferenceDocumentType() <- 'BLRDNR';
                        blrapnReferenceDocumentId() <- blrdnrDocumentId();
                        blrapnReferenceDocumentDate() <- blrdnrDateTime();
                        blrapnShipper() <- glnSupplier(ei);
                        blrapnReceiver() <- glnCustomer(ei);
                        blrapnCode() <- '2650';
                        blrapnDescription() <- NULL;
                        toMilliseconds(blrapnDateTime());
                        EXPORT exportBlrapn XML TO contentSubXML;
                        IF archiveDir THEN {
                            TRY{ mkdir(archiveDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd')); }
                            WRITE contentSubXML() TO archiveDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                        }
                        IF EDSServiceSupplier(provider,ei) THEN {
                            getSignedDocumentSupplier(provider, ei, contentSubXML(), NULL);
                            LOCAL xml = FILE();
                            IF signError() THEN {
                                logToFile('edi', provider + ' (' + login + ') Import EInvoice ' + id(i) + ' error: BLRAPN ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError());
                            }
                            ELSE IF signResult() THEN {
                                LOCAL ixml = XMLFILE();
                                envelopeLogin() <- login;
                                envelopePassword() <- password;
                                envelopeFilename() <- CONCAT '', 'invoice', deliveryNoteNumber(ei);
                                envelopeDocumentDate() <- blrapnDateTime();
                                envelopeDocumentNumber() <- numberSupplier(ei);
                                envelopeSender() <- glnSupplier(ei);
                                envelopeReceiver() <- glnCustomer(ei);
                                envelopeDeliveryPoint() <- glnCustomerStock(ei);
                                envelopeDocumentType() <- 'BLRAPN';
                                envelopeContent() <- signResult();
                                EXPORT envelope XML TO ixml;
                                sendRequestEDI(url, ixml());
                                logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice ' + deliveryNoteNumber(ei) +' request sent');
                                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                                IF requestError() THEN {
                                    logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice ' + deliveryNoteNumber(ei) + ': ' + requestError());
                                    MESSAGE provider + ' (' + login + ') Извещение о прочтении накладной ' + deliveryNoteNumber(ei) + ' не выгружено: ' + requestError() NOWAIT;
                                } ELSE {
                                    logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice ' + deliveryNoteNumber(ei) + ' request succeeded');
                                    IF NOT disableConfirmation THEN {
                                        LOCAL cxml = XMLFILE();
                                        EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO cxml;
                                        sendRequestEDI(url, cxml());
                                        logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request sent');
                                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                                        IF requestError() THEN {
                                            logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                                            MESSAGE provider + ' (' + login + ') Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                                        } ELSE {
                                            logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                                        }
                                    }
                                    blrdnrCount() <- blrdnrCount() + 1;
                                    NEWSESSION NESTED LOCAL {
                                        IF isCancel(ei) THEN {
                                            importedSupplierCancel(ei) <- TRUE;
                                        } ELSE {
                                            importedSupplier(ei) <- TRUE;
                                        }
                                        exportedBlrapnSupplier(ei) <- TRUE;
                                        NEW em = EInvoiceMessage {
                                            number(em) <- STRING[35](resultMilliseconds());
                                            eInvoice(em) <- ei;
                                            dateTime(em) <- blrapnDateTime();
                                            code(em) <- blrapnCode();
                                            kind(em) <- EInvoiceMessageKind.out;
                                            type(em) <- EInvoiceMessageType.blrapn_blrdnr;
                                            XMLPath(em) <- archiveDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                                        }
                                        APPLY NESTED LOCAL;
                                    }
                                }
                            }
                        } ELSE {
                            logToFile('edi', provider + ' (' + login + ') Import EInvoice ' + id(i) + ' error: не заданы параметры EDSService');
                        }
                    } ELSE {
                        IF NOT disableConfirmation THEN {
                            LOCAL cxml = XMLFILE();
                            EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO cxml;
                            sendRequestEDI(url, cxml());
                            logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request sent');
                            importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                            IF requestError() THEN {
                                logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                                MESSAGE provider + ' (' + login + ') Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                            } ELSE {
                                logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                            }
                        }
                        blrdnrCount() <- blrdnrCount() + 1;
                        NEWSESSION NESTED LOCAL {
                            IF isCancel(ei) THEN {
                                importedSupplierCancel(ei) <- TRUE;
                            } ELSE {
                                importedSupplier(ei) <- TRUE;
                            }
                            numberCustomer(ei) <- blrdnrDocumentId();
                            dateCustomer(ei) <- blrdnrDateTime();
                            APPLY NESTED LOCAL;
                        }
                    }
                }
            }
        } CATCH {
            logToFile('edi', CONCAT '\n', provider + ' (' + login + ') Parse Message ' + id(i) + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE 'Ошибка при импорте сообщения ' + id(i) +'. Обратитесь к администратору' NOWAIT;
        }
    }
}

exportBlrwblDateTime = DATA LOCAL NESTED DATETIME();

GROUP freightPayer EXTID 'FreightPayer';
GROUP shipFrom EXTID 'ShipFrom';
GROUP carrier EXTID 'Carrier';
GROUP extraField EXTID 'ExtraField';
GROUP extraField0 EXTID 'ExtraField';
GROUP despatchAdviceLogisticUnitLineItem EXTID 'DespatchAdviceLogisticUnitLineItem';
GROUP lineItemIdentification EXTID 'LineItemIdentification';

hideMessageHeaderBlrwbl = DATA LOCAL BOOLEAN ();

FORM exportBlrwbl FORMEXTID 'BLRWBL'
    PROPERTIES ATTR ='0.1' IF NOT hideMessageHeaderBlrwbl() EXTID 'version'
    OBJECTS ei = EInvoice PANEL
    
    OBJECTS eih = EInvoice EXTID 'MessageHeader'
    FILTERS (eih == ei AND NOT hideMessageHeaderBlrwbl()) OR NOT eih IS EInvoice
    PROPERTIES DRAW eih messageId = resultMilliseconds() EXTID 'MessageID',
                        msgDateTime = toChar(exportBlrwblDateTime(),'YYYYMMDDHH24MISS') EXTID 'MsgDateTime',
                        messageType = 'BLRWBL' EXTID 'MessageType',
                        glnSupplier(eih) EXTID 'MsgSenderID',
                        glnCustomer(eih) EXTID 'MsgReceiverID',
                        userIDCustomerStock(eih) EXTID 'UserID',
                        testIndicator = IF isTestDocument(eih) THEN '1' EXTID 'TestIndicator'
    
    OBJECTS ein = EInvoice EXTID 'DeliveryNote'
    FILTERS ein == ei
    PROPERTIES DRAW ein deliveryNoteType = '700' EXTID 'DeliveryNoteType',
                        documentID = resultMilliseconds() EXTID 'DocumentID',
                        creationDateTime = toChar(exportBlrwblDateTime(),'YYYYMMDDHH24MISS') EXTID 'CreationDateTime',
                        functionCode = (IF isCancel(ein) THEN '1' ELSE '9') EXTID 'FunctionCode',
                        deliveryNoteNumber(ein) EXTID 'DeliveryNoteID',
                        deliveryNoteDateTime = toChar(deliveryNoteDateTime(ein),'YYYYMMDD') EXTID 'DeliveryNoteDate',
                        contractName(ein) EXTID 'ContractName',
                        contractId(ein) EXTID 'ContractID',
                        contractDate = toChar(contractDate(ein),'YYYYMMDD') EXTID 'ContractDate',
                        waybillId(ein) EXTID 'WaybillID'
    PROPERTIES DRAW ein IN shipper glnSupplier(ein) EXTID 'GLN',
                                   nameSupplier(ein) EXTID 'Name',
                                   addressSupplier(ein) EXTID 'Address',
                                   unpSupplier(ein) EXTID 'VATRegistrationNumber',
                                   contactSupplier(ein) EXTID 'Contact'
    PROPERTIES DRAW ein IN receiver glnCustomer(ein) EXTID 'GLN',
                                    nameCustomer(ein) EXTID 'Name',
                                    addressCustomer(ein) EXTID 'Address',
                                    unpCustomer(ein) EXTID 'VATRegistrationNumber'
    PROPERTIES DRAW ein IN freightPayer glnFreightPayer(ein) EXTID 'GLN',
                                        nameFreightPayer(ein) EXTID 'Name',
                                        addressFreightPayer(ein) EXTID 'Address',
                                        unpFreightPayer(ein) EXTID 'VATRegistrationNumber'
    PROPERTIES DRAW ein IN shipFrom glnSupplierStock(ein) EXTID 'GLN',
                                    addressSupplierStock(ein) EXTID 'Address',
                                    contactSupplierStock(ein) EXTID 'Contact'
    PROPERTIES DRAW ein IN shipTo glnCustomerStock(ein) EXTID 'GLN',
                                  addressCustomerStock(ein) EXTID 'Address'
    PROPERTIES DRAW ein IN carrier transportContact(ein) EXTID 'TransportContact',
                                   deliveryContact(ein) EXTID 'DeliveryContact',
                                   proxyID(ein) EXTID 'ProxyID',
                                   proxyDate = toChar(proxyDate(ein),'YYYYMMDD') EXTID 'ProxyDate',
                                   partyIssuingProxyName(ein) EXTID 'PartyIssuingProxyName'
    PROPERTIES DRAW ein quantityTrip(ein) EXTID 'QuantityTrip',
                        transportOwnerName(ein) EXTID 'TransportOwnerName',
                        transportID(ein) EXTID 'TransportID',
                        trailerID(ein) EXTID 'TrailerID',
                        sealIDReceiver(ein) EXTID 'SealID',
                        orderID(ein) EXTID 'OrderID',
                        currency(ein) EXTID 'Currency'
    PROPERTIES DRAW ein IN extraField fieldName = IF isReturn(ein) AND EDIProviderInvoice(customer(ein), supplier(ein)) = EDIProvider.topBy THEN 'Признак возвратной накладной' EXTID 'FieldName',
                                      fieldCode = IF isReturn(ein) AND EDIProviderInvoice(customer(ein), supplier(ein)) = EDIProvider.topBy THEN 'PW0013' EXTID 'FieldCode',
                                      fieldValue = IF isReturn(ein) AND EDIProviderInvoice(customer(ein), supplier(ein)) = EDIProvider.topBy THEN '1' EXTID 'FieldValue'
    PROPERTIES DRAW ein IN extraField0 fieldName0 = IF replaceNumber(ein) THEN 'Номер заменяемой накладной' EXTID 'FieldName',
                                       fieldCode0 = IF replaceNumber(ein) THEN 'PW0014' EXTID 'FieldCode',
                                       fieldValue0 = IF replaceNumber(ein) THEN replaceNumber(ein) EXTID 'FieldValue'
    
    OBJECTS d = EInvoiceDetail EXTID 'LineItem' IN despatchAdviceLogisticUnitLineItem
    FILTERS eInvoice(d) == ein
    PROPERTIES DRAW d lineItemNumber(d) EXTID 'LineItemNumber',
                      lineItemSign(d) EXTID 'LineItemSign',
                      lineItemID(d) EXTID 'LineItemID',
                      lineItemBuyerID(d) EXTID 'LineItemBuyerID',
                      deliveryTypePrev(d) EXTID 'DeliveryTypePrev',
                      deliveryNotePrev(d) EXTID 'DeliveryNotePrev',
                      deliveryNoteDatePrev = toChar(deliveryNoteDatePrev(d),'YYYYMMDDHH24MISS') EXTID 'DeliveryNoteDatePrev',
                      deliveryNotePrevLineID(d) EXTID 'DeliveryNotePrevLineID',
                      lineItemSupplierID(d) EXTID 'LineItemSupplierID',
                      lineItemName(d) EXTID 'LineItemName',
                      grossWeightValue(d) EXTID 'GrossWeightValue',
                      quantityDespatched(d) EXTID 'QuantityDespatched',
                      lineItemQuantityUOM(d) EXTID 'LineItemQuantityUOM',
                      despatchUnitQuantityDespatched(d) EXTID 'DespatchUnitQuantityDespatched',
                      expiryDate = toChar(expiryDate(d),'YYYYMMDD') EXTID 'BestBeforeDate',
                      valueVAT(d) EXTID 'TaxRate',
                      additionalInformation(d) EXTID 'AdditionalInformation',
                      manufactureDate = toChar(manufactureDate(d),'YYYYMMDD') EXTID 'LineItemProductDate',
                      lineItemAmountWithoutCharges(d) EXTID 'LineItemAmountWithoutCharges',
                      lineItemAmountCharges(d) EXTID 'LineItemAmountCharges',
                      lineItemAmount(d) EXTID 'LineItemAmount',
                      lineItemPrice(d) EXTID 'LineItemPrice',
                      lineItemManufacturerPrice(d) EXTID 'LineItemManufacturerPrice',
                      lineItemAmountExcise(d) EXTID 'LineItemAmountExcise'
    
    OBJECTS i = INTEGER EXTID 'GroupPackingHeader' IN lineItemIdentification
    FILTERS groupPackingCodeMark(d,i) OR upperLevelCodeMark(d,i)
    PROPERTIES DRAW i groupPackingCodeMark(d,i) EXTID 'GroupPackingCodeMark',
                      upperLevelCodeMark(d,i) EXTID 'UpperLevelCodeMark'
    PROPERTIES DRAW d IN lineItemIdentification fieldCodeMark(d) EXTID 'FieldCodeMark'
    
    OBJECTS eint = EInvoice EXTID 'Total'
    FILTERS eint == ei
    PROPERTIES DRAW ein totalAmountWithoutCharges(eint) EXTID 'TotalAmountWithoutCharges',
                        totalAmountCharges(eint) EXTID 'TotalAmountCharges',
                        totalAmount(eint) EXTID 'TotalAmount',
                        totalLineItem(eint) EXTID 'TotalLineItem',
                        totalLineItemQuantity(eint) EXTID 'TotalLineItemQuantity',
                        totalGrossWeight(eint) EXTID 'TotalGrossWeight',
                        totalDespatchUnitQuantity(eint) EXTID 'TotalDespatchUnitQuantity',
                        totalAmountExcise(eint) EXTID 'TotalAmountExcise'
;
signAndSendSupplierEInvoice (EInvoice ei, STRING[100] login, STRING[100] password, TEXT url, STRING[100] outputDir , STRING[100] provider) {
    checkIsServer();
    IF isServer() THEN {
        TRY {
            IF login AND password THEN {
                IF EDSServiceSupplier(provider,ei) THEN {
                    LOCAL error = TEXT();
                    error() <- '';
                    IF NOT length(contractName(ei)) > 0 AND DATE(dateTimeCreated(ei)) >= 2020_09_13 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Наименование документа, который служит основанием отпуска\'\n';
                    IF NOT length(contractId(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Номер Договора (или другого документа, служащего основанием отпуска)\'\n';
//                    IF NOT contractDate(ei) THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Дата договора в формате ГГГГММДД (или другого документа, служащего основанием отпуска)\'\n';
//                    IF NOT length(waybillId(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Номер путевого листа\'\n';
                    IF NOT length(contactSupplier(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Отпуск разрешил (должность и ФИО)\'\n';
                    IF NOT length(glnSupplierStock(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'GLN пункта погрузки\'\n';
                    IF NOT length(addressSupplierStock(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Адрес пункта погрузки\'\n';
                    IF NOT length(contactSupplierStock(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'ФИО и должность лица, которое отвечает за передачу груза со стороны грузоотправителя\'\n';
                    IF NOT length(addressCustomerStock(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Адрес пункта разгрузки (Адрес склада получателя)\'\n';
                    IF NOT length(transportContact(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'ФИО водителя\'\n';
                    IF NOT length(deliveryContact(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Товар к перевозке принял (должность и ФИО)\'\n';
                    IF NOT length(transportID(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Марка и гос. номер автомобиля\'\n';
                    IF NOT length(currency(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'3-х буквенный код валюты, в которой указаны ценовые значения\'\n';
                    IF NOT totalGrossWeight(ei) THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Всего масса груза в тоннах\'\n';
                    FOR eInvoice(EInvoiceDetail d) == ei DO {
                        IF NOT lineItemID(d) THEN error() <- error() + 'EInvoiceDetail ' + lineItemNumber(d) + ': Не заполнено поле \'GTIN товара\'\n';
                        IF NOT length(lineItemSign(d)) > 0 AND DATE(dateTimeCreated(ei)) >= 2020_09_13 THEN error() <- error() + 'EInvoiceDetail ' + lineItemNumber(d) + ': Не заполнено поле \'Признак вида товарной позиции\'\n';
                        IF NOT grossWeightValue(d) > 0 THEN error() <- error() + 'EInvoiceDetail ' + lineItemNumber(d) + ': Не заполнено поле \'Масса груза\'\n';
                        IF NOT length(lineItemQuantityUOM(d)) > 0 THEN error() <- error() + 'EInvoiceDetail ' + lineItemNumber(d) + ': Не заполнено поле \'Международный 3-х буквенный код единицы измерения из справочника ОКРБ 008-95 Единицы измерения и счета\'\n';
                        IF NOT despatchUnitQuantityDespatched(d) THEN error() <- error() + 'EInvoiceDetail ' + lineItemNumber(d) + ': Не заполнено поле \'Количество в грузовых местах\'\n';
                        IF NOT lineItemAmountWithoutCharges(d) THEN error() <- error() + 'EInvoiceDetail ' + lineItemNumber(d) + ': Не заполнено поле \'Стоимость товарной позиции без НДС\'\n';
                    }
                    
                    IF error() == '' THEN {
                        LOCAL contentSubXML = FILE();
                        exportBlrwblDateTime() <- currentDateTimeMillis();
                        toMilliseconds(exportBlrwblDateTime());
                        EXPORT exportBlrwbl OBJECTS ei = ei XML TO contentSubXML;
                        IF outputDir THEN {
                            TRY{ mkdir(outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd')); }
                            WRITE contentSubXML() TO outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrwbl-' + OVERRIDE overInvoiceOutputFileName(ei), toChar(exportBlrwblDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS'); 
                        }
                        
                        getSignedDocumentSupplier(provider, ei, contentSubXML(), TRUE);
                        IF signError() THEN {
                            logToFile('edi', provider + ' (' + login + ') SendEInvoice error: BLRWBL ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError());
                            MESSAGE provider + ' (' + login + ') Накладная не выгружена: BLRWBL ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError() NOWAIT;
                        }
                        ELSE IF signResult() THEN {
                            LOCAL ixml = XMLFILE();
                            envelopeLogin() <- login;
                            envelopePassword() <- password;
                            envelopeFilename() <- CONCAT '', 'invoice', deliveryNoteNumber(ei);
                            envelopeDocumentDate() <- exportBlrwblDateTime();
                            envelopeDocumentNumber() <- numberSupplier(ei);
                            envelopeSender() <- glnSupplier(ei);
                            envelopeReceiver() <- glnCustomer(ei);
                            envelopeDeliveryPoint() <- glnCustomerStock(ei);
                            envelopeDocumentType() <- 'BLRWBL';
                            envelopeContent() <- signResult();
                            EXPORT envelope XML TO ixml;
                            sendRequestEDI(url, ixml());
                            logToFile('edi', provider + ' (' + login + ') SendEInvoice ' + deliveryNoteNumber(ei) +' request sent');
                            importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                            IF requestError() THEN {
                                logToFile('edi', provider + ' (' + login + ') SendEInvoice ' + deliveryNoteNumber(ei) + ': ' + requestError());
                                MESSAGE provider + ' (' + login + ') Накладная ' + deliveryNoteNumber(ei) + ' не выгружена: ' + requestError() NOWAIT;
                            } ELSE {
                                logToFile('edi', provider + ' (' + login + ') SendEInvoice ' + deliveryNoteNumber(ei) + ' request succeeded');
                                MESSAGE provider + ' (' + login + ') Накладная ' + deliveryNoteNumber(ei) + (IF isCancel(ei) THEN ' (отмена)' ELSE '') + ' выгружена' NOWAIT;
                                //NEWSESSION NESTED LOCAL {
                                    exportedSupplier(ei) <- TRUE;
                                    numberSupplier(ei) <- STRING[35](resultMilliseconds());
                                    dateSupplier(ei) <- exportBlrwblDateTime();
                                    APPLY NESTED LOCAL;
                                //}
                            }
                        }
                    } ELSE {
                        logToFile('edi', provider + ' (' + login + ') SendEInvoice: Не все поля заполнены. ' + error());
                        MESSAGE provider + ' (' + login + ') Накладная не выгружена: Не все поля заполнены ' + error() NOWAIT;
                    }
                    
                } ELSE {
                    logToFile('edi', provider + ' (' + login + ') SendEInvoice: не заданы параметры EDSService');
                    MESSAGE provider + ' (' + login + ') Накладная не выгружена: не заданы параметры EDSService' NOWAIT;
                }
            } ELSE {
                logToFile('edi', provider + ' (' + login + ') SendEInvoice: не заданы имя пользователя / пароль / хост / порт');
                MESSAGE provider + ' (' + login + ') Накладная не выгружена: не заданы имя пользователя / пароль / хост / порт' NOWAIT;
            }
        } CATCH {
            logToFile('edi', CONCAT '\n', provider + ' (' + login + ') error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE 'Накладная не выгружена. Обратитесь к администратору' NOWAIT;
        }
    } ELSE {
        logToFile('edi', provider + ' (' + login + ') error: ' + 'SendEInvoice disabled, change serverComputer() to enable');
        MESSAGE provider + ' (' + login + ') error: ' + 'SendEInvoice disabled, change serverComputer() to enable' NOWAIT;
    }
}

exportBlrdlnDateTime = DATA LOCAL NESTED DATETIME();

hideMessageHeaderBlrdln = DATA LOCAL BOOLEAN ();

FORM exportBlrdln FORMEXTID 'BLRDLN'
    PROPERTIES ATTR ='0.1' IF hideMessageHeaderBlrdln() EXTID 'version'
    OBJECTS ei = EInvoice PANEL
    
    OBJECTS eih = EInvoice EXTID 'MessageHeader'
    FILTERS (eih == ei AND NOT hideMessageHeaderBlrdln()) OR NOT eih IS EInvoice
    PROPERTIES DRAW eih messageId = resultMilliseconds() EXTID 'MessageID',
                        msgDateTime = toChar(exportBlrdlnDateTime(),'YYYYMMDDHH24MISS') EXTID 'MsgDateTime',
                        messageType = 'BLRDLN' EXTID 'MessageType',
                        glnSupplier(eih) EXTID 'MsgSenderID',
                        glnCustomer(eih) EXTID 'MsgReceiverID',
                        userIDCustomerStock(eih) EXTID 'UserID',
                        testIndicator = IF isTestDocument(eih) THEN '1' EXTID 'TestIndicator'
    
    OBJECTS ein = EInvoice EXTID 'DeliveryNote'
    FILTERS ein == ei
    PROPERTIES DRAW ein deliveryNoteType = '270' EXTID 'DeliveryNoteType',
                        documentID = resultMilliseconds() EXTID 'DocumentID',
                        creationDateTime = toChar(exportBlrdlnDateTime(),'YYYYMMDDHH24MISS') EXTID 'CreationDateTime',
                        functionCode = (IF isCancel(ein) THEN '1' ELSE '9') EXTID 'FunctionCode',
                        deliveryNoteNumber(ein) EXTID 'DeliveryNoteID',
                        deliveryNoteDateTime = toChar(deliveryNoteDateTime(ein),'YYYYMMDD') EXTID 'DeliveryNoteDate',
                        contractName(ein) EXTID 'ContractName',
                        contractId(ein) EXTID 'ContractID',
                        contractDate = toChar(contractDate(ein),'YYYYMMDD') EXTID 'ContractDate'
    PROPERTIES DRAW ein IN shipper glnSupplier(ein) EXTID 'GLN',
                                   nameSupplier(ein) EXTID 'Name',
                                   addressSupplier(ein) EXTID 'Address',
                                   unpSupplier(ein) EXTID 'VATRegistrationNumber',
                                   contactSupplier(ein) EXTID 'Contact'
    PROPERTIES DRAW ein IN receiver glnCustomer(ein) EXTID 'GLN',
                                    nameCustomer(ein) EXTID 'Name',
                                    addressCustomer(ein) EXTID 'Address',
                                    unpCustomer(ein) EXTID 'VATRegistrationNumber'
    PROPERTIES DRAW ein IN shipFrom glnSupplierStock(ein) EXTID 'GLN',
                                    addressSupplierStock(ein) EXTID 'Address',
                                    contactSupplierStock(ein) EXTID 'Contact'
    PROPERTIES DRAW ein IN shipTo glnCustomerStock(ein) EXTID 'GLN',
                                  addressCustomerStock(ein) EXTID 'Address'
    PROPERTIES DRAW ein IN carrier deliveryContact(ein) EXTID 'DeliveryContact',
                                   proxyID(ein) EXTID 'ProxyID',
                                   proxyDate = toChar(proxyDate(ein),'YYYYMMDD') EXTID 'ProxyDate',
                                   partyIssuingProxyName(ein) EXTID 'PartyIssuingProxyName'
    PROPERTIES DRAW ein orderID(ein) EXTID 'OrderID',
                        currency(ein) EXTID 'Currency'
    PROPERTIES DRAW ein IN extraField fieldName = IF isReturn(ein) AND EDIProviderInvoice(customer(ein), supplier(ein)) = EDIProvider.topBy THEN 'Признак возвратной накладной' EXTID 'FieldName',
                                      fieldCode = IF isReturn(ein) AND EDIProviderInvoice(customer(ein), supplier(ein)) = EDIProvider.topBy THEN 'PW0013' EXTID 'FieldCode',
                                      fieldValue = IF isReturn(ein) AND EDIProviderInvoice(customer(ein), supplier(ein)) = EDIProvider.topBy THEN '1' EXTID 'FieldValue'
    PROPERTIES DRAW ein IN extraField0 fieldName0 = IF replaceNumber(ein) THEN 'Номер заменяемой накладной' EXTID 'FieldName',
                                       fieldCode0 = IF replaceNumber(ein) THEN 'PW0014' EXTID 'FieldCode',
                                       fieldValue0 = IF replaceNumber(ein) THEN replaceNumber(ein) EXTID 'FieldValue'
    
    OBJECTS d = EInvoiceDetail EXTID 'LineItem' IN despatchAdviceLogisticUnitLineItem
    FILTERS eInvoice(d) == ein
    PROPERTIES DRAW d lineItemNumber(d) EXTID 'LineItemNumber',
                      lineItemSign(d) EXTID 'LineItemSign',
                      lineItemID(d) EXTID 'LineItemID',
                      lineItemBuyerID(d) EXTID 'LineItemBuyerID',
                      deliveryTypePrev(d) EXTID 'DeliveryTypePrev',
                      deliveryNotePrev(d) EXTID 'DeliveryNotePrev',
                      deliveryNoteDatePrev = toChar(deliveryNoteDatePrev(d),'YYYYMMDDHH24MISS') EXTID 'DeliveryNoteDatePrev',
                      deliveryNotePrevLineID(d) EXTID 'DeliveryNotePrevLineID',
                      lineItemSupplierID(d) EXTID 'LineItemSupplierID',
                      lineItemName(d) EXTID 'LineItemName',
                      quantityDespatched(d) EXTID 'QuantityDespatched',
                      lineItemQuantityUOM(d) EXTID 'LineItemQuantityUOM',
                      expiryDate = toChar(expiryDate(d),'YYYYMMDD') EXTID 'BestBeforeDate',
                      valueVAT(d) EXTID 'TaxRate',
                      additionalInformation(d) EXTID 'AdditionalInformation',
                      manufactureDate = toChar(manufactureDate(d),'YYYYMMDD') EXTID 'LineItemProductDate',
                      lineItemAmountWithoutCharges(d) EXTID 'LineItemAmountWithoutCharges',
                      lineItemAmountCharges(d) EXTID 'LineItemAmountCharges',
                      lineItemAmount(d) EXTID 'LineItemAmount',
                      lineItemPrice(d) EXTID 'LineItemPrice',
                      lineItemManufacturerPrice(d) EXTID 'LineItemManufacturerPrice',
                      lineItemAmountExcise(d) EXTID 'LineItemAmountExcise'
    
    OBJECTS i = INTEGER EXTID 'GroupPackingHeader' IN lineItemIdentification
    FILTERS groupPackingCodeMark(d,i) OR upperLevelCodeMark(d,i)
    PROPERTIES DRAW i groupPackingCodeMark(d,i) EXTID 'GroupPackingCodeMark',
                      upperLevelCodeMark(d,i) EXTID 'UpperLevelCodeMark'
    PROPERTIES DRAW d IN lineItemIdentification fieldCodeMark(d) EXTID 'FieldCodeMark'
    
    OBJECTS eint = EInvoice EXTID 'Total'
    FILTERS eint == ei
    PROPERTIES DRAW ein totalAmountWithoutCharges(eint) EXTID 'TotalAmountWithoutCharges',
                        totalAmountCharges(eint) EXTID 'TotalAmountCharges',
                        totalAmount(eint) EXTID 'TotalAmount',
                        totalLineItem(eint) EXTID 'TotalLineItem',
                        totalLineItemQuantity(eint) EXTID 'TotalLineItemQuantity',
                        totalAmountExcise(eint) EXTID 'TotalAmountExcise'
;

signAndSendSupplierEInvoiceTN2(EInvoice ei, STRING[100] login, STRING[100] password, TEXT url, STRING[100] outputDir , STRING[100] provider) {
    checkIsServer();
    IF isServer() THEN {
        TRY {
            IF login AND password THEN {
                IF EDSServiceSupplier(provider,ei) THEN {
                    LOCAL error = TEXT();
                    error() <- '';
                    IF NOT length(contractName(ei)) > 0 AND DATE(dateTimeCreated(ei)) >= 2020_09_13 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Наименование документа, который служит основанием отпуска\'\n';
                    IF NOT length(contractId(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Номер Договора (или другого документа, служащего основанием отпуска)\'\n';
//                    IF NOT contractDate(ei) THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Дата договора в формате ГГГГММДД (или другого документа, служащего основанием отпуска)\'\n';
                    IF NOT length(contactSupplier(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Отпуск разрешил (должность и ФИО)\'\n';
                    IF NOT length(glnSupplierStock(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'GLN пункта погрузки\'\n';
                    IF NOT length(addressSupplierStock(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Адрес пункта погрузки\'\n';
                    IF NOT length(contactSupplierStock(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'ФИО и должность лица, которое отвечает за передачу груза со стороны грузоотправителя\'\n';
                    IF NOT length(addressCustomerStock(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Адрес пункта разгрузки (Адрес склада получателя)\'\n';
                    IF NOT length(deliveryContact(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Товар к перевозке принял (должность и ФИО)\'\n';
                    IF NOT length(currency(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'3-х буквенный код валюты, в которой указаны ценовые значения\'\n';
                    FOR eInvoice(EInvoiceDetail d) == ei DO {
                        IF NOT length(lineItemSign(d)) > 0 AND DATE(dateTimeCreated(ei)) >= 2020_09_13 THEN error() <- error() + 'EInvoiceDetail ' + lineItemNumber(d) + ': Не заполнено поле \'Признак вида товарной позиции\'\n';
                        IF NOT length(lineItemQuantityUOM(d)) > 0 THEN error() <- error() + 'EInvoiceDetail ' + lineItemNumber(d) + ': Не заполнено поле \'Международный 3-х буквенный код единицы измерения из справочника ОКРБ 008-95 Единицы измерения и счета\'\n';
                        IF NOT lineItemAmountWithoutCharges(d) THEN error() <- error() + 'EInvoiceDetail ' + lineItemNumber(d) + ': Не заполнено поле \'Стоимость товарной позиции без НДС\'\n';
                    }
                    
                    IF error() == '' THEN {
                        LOCAL contentSubXML = FILE();
                        exportBlrdlnDateTime() <- currentDateTimeMillis();
                        toMilliseconds(exportBlrdlnDateTime());
                        EXPORT exportBlrdln OBJECTS ei = ei XML TO contentSubXML;
                        IF outputDir THEN {
                            TRY{ mkdir(outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd')); }
                            WRITE contentSubXML() TO outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrdln-' + toChar(exportBlrdlnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS'); 
                        }
                        getSignedDocumentSupplier(provider, ei, contentSubXML(), TRUE);
                        IF signError() THEN {
                            logToFile('edi', provider + ' (' + login + ') SendEInvoice error: BLRDLN ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError());
                            MESSAGE provider + ' (' + login + ') Накладная не выгружена: BLRDLN ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError() NOWAIT;
                        }
                        ELSE IF signResult() THEN {
                            LOCAL ixml = XMLFILE();
                            envelopeLogin() <- login;
                            envelopePassword() <- password;
                            envelopeFilename() <- CONCAT '', 'invoice', deliveryNoteNumber(ei);
                            envelopeDocumentDate() <- exportBlrdlnDateTime();
                            envelopeDocumentNumber() <- numberSupplier(ei);
                            envelopeSender() <- glnSupplier(ei);
                            envelopeReceiver() <- glnCustomer(ei);
                            envelopeDeliveryPoint() <- glnCustomerStock(ei);
                            envelopeDocumentType() <- 'BLRDLN';
                            envelopeContent() <- signResult();
                            EXPORT envelope XML TO ixml;
                            sendRequestEDI(url, ixml());
                            logToFile('edi', provider + ' (' + login + ') SendEInvoice ' + deliveryNoteNumber(ei) +' request sent');
                            importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                            IF requestError() THEN {
                                logToFile('edi', provider + ' (' + login + ') SendEInvoice ' + deliveryNoteNumber(ei) + ': ' + requestError());
                                MESSAGE provider + ' (' + login + ') Накладная ' + deliveryNoteNumber(ei) + ' не выгружена: ' + requestError() NOWAIT;
                            } ELSE {
                                logToFile('edi', provider + ' (' + login + ') SendEInvoice ' + deliveryNoteNumber(ei) + ' request succeeded');
                                MESSAGE provider + ' (' + login + ') Накладная ' + deliveryNoteNumber(ei) + (IF isCancel(ei) THEN ' (отмена)' ELSE '') + ' выгружена' NOWAIT;
                                //NEWSESSION NESTED LOCAL {
                                    exportedSupplier(ei) <- TRUE;
                                    numberSupplier(ei) <- STRING[35](resultMilliseconds());
                                    dateSupplier(ei) <- exportBlrdlnDateTime();
                                    APPLY NESTED LOCAL;
                                //}
                            }
                        }
                    } ELSE {
                        logToFile('edi', provider + ' (' + login + ') SendEInvoice: Не все поля заполнены. ' + error());
                        MESSAGE provider + ' (' + login + ') Накладная не выгружена: Не все поля заполнены ' + error() NOWAIT;
                    }
                    
                } ELSE {
                    logToFile('edi', provider + ' (' + login + ') SendEInvoice: не заданы параметры EDSService');
                    MESSAGE provider + ' (' + login + ') Накладная не выгружена: не заданы параметры EDSService' NOWAIT;
                }
            } ELSE {
                logToFile('edi', provider + ' (' + login + ') SendEInvoice: не заданы имя пользователя / пароль / хост / порт');
                MESSAGE provider + ' (' + login + ') Накладная не выгружена: не заданы имя пользователя / пароль / хост / порт' NOWAIT;
            }
        } CATCH {
            logToFile('edi', CONCAT '\n', provider + ' (' + login + ') error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE 'Накладная не выгружена. Обратитесь к администратору' NOWAIT;
        }
    } ELSE {
        logToFile('edi', provider + ' (' + login + ') error: ' + 'SendEInvoice disabled, change serverComputer() to enable');
        MESSAGE provider + ' (' + login + ') error: ' + 'SendEInvoice disabled, change serverComputer() to enable' NOWAIT;
    }
}

signAndSendBlrapnSupplierEInvoice (EInvoice ei, STRING[100] login, STRING[100] password, TEXT url, STRING[100] outputDir , STRING outputDirInvoice, STRING[100] provider) {
    checkIsServer();
    IF isServer() THEN {
        TRY {
            IF login AND password THEN {
                IF EDSServiceSupplier(provider,ei) THEN {
                    LOCAL contentSubXML = FILE();
                    blrapnDateTime() <- currentDateTimeMillis();
                    blrapnMsgSender() <- glnSupplier(ei);
                    blrapnMsgReceiver() <- glnCustomer(ei);
                    blrapnUserID() <- userIDCustomerStock(ei);
                    blrapnDeliveryNoteId() <- deliveryNoteNumber(ei);
                    blrapnDeliveryNoteDate() <- DATE(deliveryNoteDateTime(ei));
                    blrapnReferenceDocumentType() <- IF importedNoticeSupplier(ei) THEN 'BLRAPN' ELSE 'BLRWBR';
                    blrapnReferenceDocumentId() <- IF importedNoticeSupplier(ei) THEN numberNoticeSupplier(ei) ELSE numberCustomer(ei);
                    blrapnReferenceDocumentDate() <- IF importedNoticeSupplier(ei) THEN dateNoticeSupplier(ei) ELSE dateCustomer(ei);
                    blrapnShipper() <- glnSupplier(ei);
                    blrapnReceiver() <- glnCustomer(ei);
                    blrapnCode() <- IF importedNoticeSupplier(ei) THEN '2651' ELSE '2650';
                    blrapnDescription() <- NULL;
                    toMilliseconds(blrapnDateTime());
                    EXPORT exportBlrapn XML TO contentSubXML;
                    IF outputDir THEN {
                        TRY{ mkdir((OVERRIDE outputDirInvoice, outputDir) + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd')); }
                        WRITE contentSubXML() TO (OVERRIDE outputDirInvoice, outputDir) + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                    }
                    
                    getSignedDocumentSupplier(provider, ei, contentSubXML(), TRUE);
                    IF signError() THEN {
                        logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice error: BLRAPN ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError());
                        MESSAGE provider + ' (' + login + ') Извещение о прочтении накладной не выгружено: BLRAPN ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError() NOWAIT;
                    }
                    ELSE IF signResult() THEN {
                        LOCAL ixml = XMLFILE();
                        envelopeLogin() <- login;
                        envelopePassword() <- password;
                        envelopeFilename() <- CONCAT '', 'invoice', deliveryNoteNumber(ei);
                        envelopeDocumentDate() <- blrapnDateTime();
                        envelopeDocumentNumber() <- numberSupplier(ei);
                        envelopeSender() <- glnSupplier(ei);
                        envelopeReceiver() <- glnCustomer(ei);
                        envelopeDeliveryPoint() <- glnCustomerStock(ei);
                        envelopeDocumentType() <- 'BLRAPN';
                        envelopeContent() <- signResult();
                        EXPORT envelope XML TO ixml;
                        sendRequestEDI(url, ixml());
                        logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice ' + deliveryNoteNumber(ei) +' request sent');
                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                        IF requestError() THEN {
                            logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice ' + deliveryNoteNumber(ei) + ': ' + requestError());
                            MESSAGE provider + ' (' + login + ') Извещение о прочтении накладной ' + deliveryNoteNumber(ei) + ' не выгружено: ' + requestError() NOWAIT;
                        } ELSE {
                            logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice ' + deliveryNoteNumber(ei) + ' request succeeded');
                            MESSAGE provider + ' (' + login + ') Извещение о прочтении накладной ' + deliveryNoteNumber(ei) + ' выгружено' NOWAIT;
                            exportedBlrapnSupplier(ei) <- TRUE;
                            NEW em = EInvoiceMessage {
                                number(em) <- STRING[35](resultMilliseconds());
                                eInvoice(em) <- ei;
                                dateTime(em) <- blrapnDateTime();
                                code(em) <- blrapnCode();
                                kind(em) <- EInvoiceMessageKind.out;
                                type(em) <- IF importedNoticeSupplier(ei) THEN EInvoiceMessageType.blrapn_blrapn ELSE EInvoiceMessageType.blrapn_blrwbr;
                                XMLPath(em) <- outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                            }
                            APPLY NESTED LOCAL;
                        }
                    }
                } ELSE {
                    logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice: не заданы параметры EDSService');
                    MESSAGE provider + ' (' + login + ') Извещение о прочтении не выгружено: не заданы параметры EDSService' NOWAIT;
                }
            } ELSE {
                logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice: не заданы имя пользователя / пароль / хост / порт');
                MESSAGE provider + ' (' + login + ') Извещение о прочтении не выгружено: не заданы имя пользователя / пароль / хост / порт' NOWAIT;
            }
        } CATCH {
            logToFile('edi', CONCAT '\n', provider + ' (' + login + ') error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE 'Извещение о прочтении не выгружено. Обратитесь к администратору' NOWAIT;
        }
    } ELSE {
        logToFile('edi', provider + ' (' + login + ') error: ' + 'SendBlrapnEInvoice disabled, change serverComputer() to enable');
        MESSAGE provider + ' (' + login + ') error: ' + 'SendBlrapnEInvoice disabled, change serverComputer() to enable' NOWAIT;
    }
}

signAndSendBlrapnSupplierEInvoiceTN2 (EInvoice ei, STRING[100] login, STRING[100] password, TEXT url, STRING[100] outputDir , STRING outputDirInvoice, STRING[100] provider) {
    checkIsServer();
    IF isServer() THEN {
        TRY {
            IF login AND password THEN {
                IF EDSServiceSupplier(provider,ei) THEN {
                    LOCAL contentSubXML = FILE();
                    blrapnDateTime() <- currentDateTimeMillis();
                    blrapnMsgSender() <- glnSupplier(ei);
                    blrapnMsgReceiver() <- glnCustomer(ei);
                    blrapnUserID() <- userIDCustomerStock(ei);
                    blrapnDeliveryNoteId() <- deliveryNoteNumber(ei);
                    blrapnDeliveryNoteDate() <- DATE(deliveryNoteDateTime(ei));
                    blrapnReferenceDocumentType() <- IF importedNoticeSupplier(ei) THEN 'BLRAPN' ELSE 'BLRDNR';
                    blrapnReferenceDocumentId() <- IF importedNoticeSupplier(ei) THEN numberNoticeSupplier(ei) ELSE numberCustomer(ei);
                    blrapnReferenceDocumentDate() <- IF importedNoticeSupplier(ei) THEN dateNoticeSupplier(ei) ELSE dateCustomer(ei);
                    blrapnShipper() <- glnSupplier(ei);
                    blrapnReceiver() <- glnCustomer(ei);
                    blrapnCode() <- IF importedNoticeSupplier(ei) THEN '2651' ELSE '2650';
                    blrapnDescription() <- NULL;
                    toMilliseconds(blrapnDateTime());
                    EXPORT exportBlrapn XML TO contentSubXML;
                    IF outputDir THEN {
                        TRY{ mkdir((OVERRIDE outputDirInvoice,outputDir) + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd')); }
                        WRITE contentSubXML() TO (OVERRIDE outputDirInvoice,outputDir) + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                    }

                    getSignedDocumentSupplier(provider, ei, contentSubXML(), TRUE);
                    IF signError() THEN {
                        logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice error: BLRAPN ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError());
                        MESSAGE provider + ' (' + login + ') Извещение о прочтении не выгружено: BLRAPN ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError() NOWAIT;
                    }
                    ELSE IF signResult() THEN {
                        LOCAL ixml = XMLFILE();
                        envelopeLogin() <- login;
                        envelopePassword() <- password;
                        envelopeFilename() <- CONCAT '', 'invoice', deliveryNoteNumber(ei);
                        envelopeDocumentDate() <- blrapnDateTime();
                        envelopeDocumentNumber() <- numberSupplier(ei);
                        envelopeSender() <- glnSupplier(ei);
                        envelopeReceiver() <- glnCustomer(ei);
                        envelopeDeliveryPoint() <- glnCustomerStock(ei);
                        envelopeDocumentType() <- 'BLRAPN';
                        envelopeContent() <- signResult();
                        EXPORT envelope XML TO ixml;
                        sendRequestEDI(url, ixml());
                        logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice ' + deliveryNoteNumber(ei) +' request sent');
                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                        IF requestError() THEN {
                            logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice ' + deliveryNoteNumber(ei) + ': ' + requestError());
                            MESSAGE provider + ' (' + login + ') Извещение о прочтении накладной ' + deliveryNoteNumber(ei) + ' не выгружено: ' + requestError() NOWAIT;
                        } ELSE {
                            logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice ' + deliveryNoteNumber(ei) + ' request succeeded');
                            MESSAGE provider + ' (' + login + ') Извещение о прочтении накладной ' + deliveryNoteNumber(ei) + ' выгружено' NOWAIT;
                            exportedBlrapnSupplier(ei) <- TRUE;
                            NEW em = EInvoiceMessage {
                                number(em) <- STRING[35](resultMilliseconds());
                                eInvoice(em) <- ei;
                                dateTime(em) <- blrapnDateTime();
                                code(em) <- blrapnCode();
                                kind(em) <- EInvoiceMessageKind.out;
                                type(em) <- IF importedNoticeSupplier(ei) THEN EInvoiceMessageType.blrapn_blrapn ELSE EInvoiceMessageType.blrapn_blrdnr;
                                XMLPath(em) <- outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                            }
                            APPLY NESTED LOCAL;
                        }
                    }
                } ELSE {
                    logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice: не заданы параметры EDSService');
                    MESSAGE provider + ' (' + login + ') Извещение о прочтении не выгружено: не заданы параметры EDSService' NOWAIT;
                }
            } ELSE {
                logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice: не заданы имя пользователя / пароль / хост / порт');
                MESSAGE provider + ' (' + login + ') Извещение о прочтении не выгружено: не заданы имя пользователя / пароль / хост / порт' NOWAIT;
            }
        } CATCH {
            logToFile('edi', CONCAT '\n', provider + ' (' + login + ') error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE 'Извещение о прочтении не выгружено. Обратитесь к администратору' NOWAIT;
        }
    } ELSE {
        logToFile('edi', provider + ' (' + login + ') error: ' + 'SendBlrapnEInvoice disabled, change serverComputer() to enable');
        MESSAGE provider + ' (' + login + ') error: ' + 'SendBlrapnEInvoice disabled, change serverComputer() to enable' NOWAIT;
    }
}