MODULE TopByApi;

REQUIRE EDI;

NAMESPACE EDI;


GROUP body EXTID 'soapenv:Body';
GROUP sendDocument EXTID 'top:SendDocument' : body;
GROUP getDocuments EXTID 'top:GetDocuments' : body;
GROUP queryDocuments EXTID 'top:QueryDocuments' : body;
GROUP confirmDocumentReceived EXTID 'top:ConfirmDocumentReceived' : body;
FORM receiveMessagesRequest
    PROPERTIES ATTR = IF newNS() THEN 'http://softclub.by/' ELSE 'http://topby.by/' EXTID 'xmlns:top'
    OBJECTS login = TEXT, password = TEXT
    PROPERTIES IN getDocuments VALUE(login) EXTID 'top:username', VALUE(password) EXTID 'top:password'
    FORMEXTID 'soapenv=http://schemas.xmlsoap.org/soap/envelope/:Envelope'
;

useNewFormat = DATA BOOLEAN(STRING[100]) TABLE stringEDI;
skipImportOrders = DATA LOCAL NESTED BOOLEAN ();

beforeOverReceiveMessages ABSTRACT LIST (INTEGER, STRING[100], STRING[100]);
overReceiveMessages ABSTRACT LIST (INTEGER, STRING[100], STRING[100], TEXT, STRING[100], BOOLEAN, BOOLEAN, STRING[100]);

receiveMessages (STRING[100] login, STRING[100] password, TEXT url, STRING[100] archiveDir, BOOLEAN disableConfirmation, BOOLEAN sendReplies, STRING[100] provider) {
    TRY {
        IF login AND password THEN {
            LOCAL xml = XMLFILE();
            EXPORT receiveMessagesRequest OBJECTS login = login, password = password XML TO xml;
            sendRequestEDI(url, xml());
            logToFile('edi', provider + ' (' + login + ') ReceiveMessages request sent');
            importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'GetDocumentsResponse');
            IF requestError() THEN {
                logToFile('edi', provider + ' (' + login + ') ReceiveMessages: ' + requestError());
                MESSAGE  provider + ' (' + login + ') Сообщения не получены: ' + requestError() NOWAIT;
            } ELSE {
                IF newNS() THEN {
                    IMPORT XML ROOT 'Data' FROM sendRequestEDIResponse() TO data = '=DocumentDataSis:Data', id = '=DocumentDataSis:Id',documentType = '=DocumentDataSis:DocumentType';
                } ELSE {
                    IMPORT XML ROOT 'Data' FROM sendRequestEDIResponse() TO data = 'Data', id = 'Id',documentType = 'DocumentType';
                }

                fillStartParams();
                
                IF (GROUP SUM 1 IF documentType(INTEGER i)) > 0 THEN textMessage() <- CONCAT '\n', textMessage(), provider + '(' + login + ') Сообщений в очереди: ' + (GROUP SUM 1 IF documentType(INTEGER i));
                logToFile('edi', provider + ' (' + login + ') ReceiveMessages count: ' + (GROUP SUM 1 IF documentType(INTEGER i)));
                
                FOR documentType(INTEGER i) ORDER getWord(id(i), '_', 2), id(i), i DO {
                    IF archiveDir THEN {
                        TRY{ mkdir(archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd')); }
                        WRITE data(i) TO archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                    }
                    logToFile('edi', provider + ' (' + login + ') Check Message type:' + documentType(i) + ' id:' + id(i));
                    beforeOverReceiveMessages(i, login, archiveDir);
                    overReceiveMessages(i, login, password, url, archiveDir, disableConfirmation, sendReplies, provider);
                }

                fillEndParams();                
                IF sendRecipientErrorFailed() == 0 THEN {
                    MESSAGE (OVERRIDE textMessage(), provider + '(' + login + ') Не найдено новых сообщений') NOWAIT;
                }
            }
     
        } ELSE {
            logToFile('edi', provider + ' (' + login + ') ReceiveMessages: не заданы имя пользователя / пароль / хост / порт');
            MESSAGE  provider + ' (' + login + ') Сообщения не получены: не заданы имя пользователя / пароль / хост / порт' NOWAIT;
        }
    } CATCH {
        logToFile('edi', CONCAT '\n', provider + ' (' + login + ') error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
        MESSAGE provider + '(' + login + ') Сообщения не получены. Обратитесь к администратору' NOWAIT;
    }
}


FORM confirmDocument
    PROPERTIES ATTR =IF newNS() THEN 'http://softclub.by/' ELSE 'http://topby.by/' EXTID 'xmlns:top'
    OBJECTS login = TEXT, password = TEXT, documentId = TEXT
    PROPERTIES IN confirmDocumentReceived VALUE(login) EXTID 'top:username', VALUE(password) EXTID 'top:password', VALUE(documentId) EXTID 'top:documentId'
    FORMEXTID 'soapenv=http://schemas.xmlsoap.org/soap/envelope/:Envelope'
;


FORM queryDocuments
    PROPERTIES ATTR = IF newNS() THEN 'http://softclub.by/' ELSE 'http://topby.by/' EXTID 'xmlns:top'
    OBJECTS login = TEXT, password = TEXT
    PROPERTIES IN queryDocuments VALUE(login) EXTID 'top:username', VALUE(password) EXTID 'top:password'
    FORMEXTID 'soapenv=http://schemas.xmlsoap.org/soap/envelope/:Envelope'
;

GROUP bodyResponce EXTID '=http://schemas.xmlsoap.org/soap/envelope/:Body';
GROUP queryDocumentsResponse EXTID '=http://softclub.by/:QueryDocumentsResponse' : bodyResponce;
GROUP queryDocumentsResult EXTID '=http://softclub.by/:QueryDocumentsResult' : queryDocumentsResponse;

FORM  queryDocumentsResponse FORMEXTID 'http://schemas.xmlsoap.org/soap/envelope/:Envelope'
    OBJECTS data = INTEGER EXTID '=ResponseOfArraySis:Data' IN queryDocumentsResult
    PROPERTIES(data) id EXTID 'value'
;

documentDate = DATA LOCAL NESTED DATETIME (INTEGER);

status '' = DATA LOCAL STRING () CHARWIDTH 500;

open 'Просмотреть' (INTEGER r) {
    open(data(r));
} TOOLBAR;

confirmDocumentSoap 'Подтвердить получение' (INTEGER r, STRING login, STRING password, STRING url) {
    EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(r) XML TO xmlFile;
    sendRequestEDI(url, xmlFile());
} CONFIRM TOOLBAR;

FORM queryDocumentsStatus 'Очередь документов'
    OBJECTS login = STRING PANEL, password = STRING PANEL, url = STRING PANEL 
    
    PROPERTIES READONLY status() 
    
    OBJECTS r = INTEGER
    PROPERTIES (r) READONLY id, documentType, documentDate 
    PROPERTIES  open(r), confirmDocumentSoap (r, login, password, url)
    FILTERS id(r)
    ORDERS documentDate(r)
;


listMessages (STRING[100] login, STRING[100] password, TEXT url, STRING[100] archiveDir, BOOLEAN disableConfirmation, BOOLEAN sendReplies, STRING[100] provider) {
    IF login AND password THEN {
        newNS() <- TRUE; // пока только CTT. для работы с EDN нужно queryDocumentsResponse с другим NS
        LOCAL xml = XMLFILE();
        LOCAL total = INTEGER ();

        EXPORT queryDocuments OBJECTS login = login, password = password XML TO xml;
        sendRequestEDI(url, xml());
        logToFile('edi', provider + ' (' + login + ') QueryDocuments request sent');
        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'QueryDocumentsResponse');

        IF requestError() THEN {
            logToFile('edi', provider + ' (' + login + ') ListMessages: ' + requestError());
            MESSAGE  provider + ' (' + login + ') Сообщения не получены: ' + requestError() NOWAIT;
            RETURN;
        } ELSE {
            IMPORT queryDocumentsResponse XML FROM sendRequestEDIResponse();
            total() <- OVERRIDE (GROUP SUM 1 IF id(INTEGER i)), 0;
        }
        
        EXPORT receiveMessagesRequest OBJECTS login = login, password = password XML TO xml;
        sendRequestEDI(url, xml());
        logToFile('edi', provider + ' (' + login + ') ListMessages request sent');
        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'GetDocumentsResponse');
        IF requestError() THEN {
            logToFile('edi', provider + ' (' + login + ') ListMessages: ' + requestError());
            MESSAGE  provider + ' (' + login + ') Сообщения не получены: ' + requestError() NOWAIT;
        } ELSE {
            IMPORT XML ROOT 'Data' FROM sendRequestEDIResponse() TO data = '=DocumentDataSis:Data', id = '=DocumentDataSis:Id', 
                    documentType = '=DocumentDataSis:DocumentType', documentDate = '=DocumentDataSis:DocumentDate';
            
            status() <- 'Сообщений получено: ' + (OVERRIDE (GROUP SUM 1 IF id(INTEGER i)), 0) + ' из ' + total();
                
            SHOW queryDocumentsStatus OBJECTS login = login, password = password, url = url WAIT DOCKED;
        }

    } ELSE {
        logToFile('edi', provider + ' (' + login + ') ListMessages: не заданы имя пользователя / пароль / хост / порт');
        MESSAGE  provider + ' (' + login + ') Сообщения не получены: не заданы имя пользователя / пароль / хост / порт' NOWAIT;
    }
}

FORM exportSystemMessage FORMEXTID 'SYSTEMMESSAGE'
    OBJECTS documentId = TEXT, documentNumber = TEXT, code = TEXT, description = TEXT
    PROPERTIES VALUE(documentId) EXTID 'documentNumber'
    PROPERTIES IN reference VALUE(documentNumber) EXTID 'documentNumber', VALUE(code) EXTID 'code', VALUE(description) EXTID 'description'
;

envelopeLogin = DATA LOCAL NESTED STRING[100]();
envelopePassword = DATA LOCAL NESTED STRING[100]();
envelopeFilename = DATA LOCAL NESTED STRING[77]();
envelopeDocumentDate = DATA LOCAL NESTED DATETIME();
envelopeDocumentNumber = DATA LOCAL NESTED STRING[50]();
envelopeSender = DATA LOCAL NESTED STRING[13]();
envelopeReceiver = DATA LOCAL NESTED STRING[13]();
envelopeDeliveryPoint = DATA LOCAL NESTED STRING[13]();
envelopeDocumentType = DATA LOCAL NESTED STRING[13]();
envelopeContent = DATA LOCAL NESTED TEXT();

FORM envelope
    PROPERTIES ATTR =IF newNS() THEN 'http://softclub.by/' ELSE 'http://topby.by/' EXTID 'xmlns:top'
    PROPERTIES IN sendDocument envelopeLogin() EXTID 'top:username',
                               envelopePassword() EXTID 'top:password',
                               envelopeFilename() EXTID 'top:filename',
                               documentDate = toChar(envelopeDocumentDate(),'YYYYMMDDHH24MISS') EXTID 'top:documentDate',
                               envelopeDocumentNumber() EXTID 'top:documentNumber',
                               envelopeSender() EXTID 'top:senderCode',
                               envelopeReceiver() EXTID 'top:receiverCode',
                               envelopeDeliveryPoint() EXTID 'top:deliveryPointCode',
                               envelopeDocumentType() EXTID 'top:documentType',
                               envelopeContent() EXTID 'top:content'
    FORMEXTID 'soapenv=http://schemas.xmlsoap.org/soap/envelope/:Envelope'
;

//----------- systemmessage -----------//
overReceiveSystemMessage ABSTRACT LIST FIRST(INTEGER, STRING[100], STRING[100], TEXT, STRING[100], BOOLEAN, BOOLEAN, STRING[100] );
overReceiveSystemMessage(INTEGER i, STRING[100] login, STRING[100] password, TEXT url, STRING[100] archiveDir, BOOLEAN disableConfirmation, BOOLEAN sendReplies, STRING[100] provider) + {
    logToFile('edi', provider + ' (' + login + ') Parse System Message ' + id(i) + ' warning: unsupported documentType ' + (OVERRIDE documentType(), 'NULL'));
}

overImportSystemmessage ABSTRACT ();
skipSystemmessage = DATA LOCAL NESTED BOOLEAN();

overReceiveMessages(INTEGER i, STRING[100] login, STRING[100] password, TEXT url, STRING[100] archiveDir, BOOLEAN disableConfirmation, BOOLEAN sendReplies, STRING[100] provider) + {
    IF lower(documentType(i)) == 'systemmessage' THEN {
        TRY {
            IMPORT systemMessage XML FROM data(i);
            skipSystemmessage() <- NULL;
            overImportSystemmessage();
            IF NOT skipSystemmessage() THEN {
                overReceiveSystemMessage(i, login, password, url, archiveDir, disableConfirmation, sendReplies, provider);
            }
        } CATCH {
            IF NOT disableConfirmation AND sendReplies THEN {
                LOCAL contentSubXML = FILE();
                EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = messageDocumentNumber(), code = '1450', description = (CONCAT '\n', provider + ' (' + login + ') Parse EOrderMessage ' + id(i) + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException()) XML TO contentSubXML;
                fileToString(contentSubXML());
                encodeBase64(resultString());
                LOCAL xml = XMLFILE();
                envelopeLogin() <- login;
                envelopePassword() <- password;
                envelopeDocumentDate() <- currentDateTime();
                envelopeDocumentNumber() <- id(i);
                envelopeDocumentType() <- 'SYSTEMMESSAGE';
                envelopeContent() <- encodedBase64();
                EXPORT envelope XML TO xml;
                //EXPORT envelopeMessage OBJECTS login = login, password = password, date = currentDateTime(), number = id(i), innerXML = encodedBase64() XML TO xml;
                sendRequestEDI(url, xml());
                logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) +' request sent');
                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                IF requestError() THEN {
                    sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                    logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ': ' + requestError());
                    MESSAGE provider + ' (' + login + ') Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
                } ELSE {
                    logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ' request succeeded');
                }
            }
            logToFile('edi', CONCAT '\n', provider + ' (' + login + ') Parse EOrderMessage ' + id(i) + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE  'Ошибка при импорте сообщения ' + id(i) +'. Обратитесь к администратору' NOWAIT;
            orderMessagesFailed() <- orderMessagesFailed() + 1;
        }
    }
}


//----------- blrapn -----------//
overReceiveBlrapn ABSTRACT LIST FIRST(INTEGER, STRING[100], STRING[100], TEXT, STRING[100], BOOLEAN, BOOLEAN, STRING[100] );
overReceiveBlrapn(INTEGER i, STRING[100] login, STRING[100] password, TEXT url, STRING[100] archiveDir, BOOLEAN disableConfirmation, BOOLEAN sendReplies, STRING[100] provider) + {
    logToFile('edi', provider + ' (' + login + ') Parse System Message ' + id(i) + ' warning: unsupported Reference documentType ' + (OVERRIDE blrapnReferenceDocumentType(), 'NULL'));
}

disableAutoBlrapn 'Отключить автоматическую отправку извещений о прочтении' = DATA BOOLEAN () PREREAD;

overImportBlrapn ABSTRACT ();
overImportBlrapn ABSTRACT (INTEGER, STRING[100], STRING[100], TEXT, STRING[100], INTEGER, STRING[100]);
skipBlrapn = DATA LOCAL NESTED STRING ();

overReceiveMessages(INTEGER i, STRING[100] login, STRING[100] password, TEXT url, STRING[100] archiveDir, BOOLEAN disableConfirmation, BOOLEAN sendReplies, STRING[100] provider) + {
    IF lower(documentType(i)) == 'blrapn' THEN {
        TRY {
            IMPORT importBlrapn XML FROM data(i);
            skipBlrapn() <- NULL;
            overImportBlrapn();
            overImportBlrapn(i, login, password, url, archiveDir, IF disableConfirmation THEN 1 ELSE 0, provider);
            IF NOT skipBlrapn() THEN {
                overReceiveBlrapn(i, login, password, url, archiveDir, disableConfirmation, sendReplies, provider);
            } ELSE {
                logToFile('edi', provider + ' (' + login + ') Import EInvoiceMessage ' + id(i) + ' skipped: ' + skipBlrapn());
            }
        } CATCH {
            IF NOT disableConfirmation AND sendReplies THEN {
                LOCAL contentSubXML = FILE();
                EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = messageDocumentNumber(), code = '1450', description = (CONCAT '\n', provider + ' (' + login + ') Parse EInvoiceMessage ' + id(i) + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException()) XML TO contentSubXML;
                fileToString(contentSubXML());
                encodeBase64(resultString());
                LOCAL xml = XMLFILE();
                envelopeLogin() <- login;
                envelopePassword() <- password;
                envelopeDocumentDate() <- currentDateTime();
                envelopeDocumentNumber() <- id(i);
                envelopeDocumentType() <- 'SYSTEMMESSAGE';
                envelopeContent() <- encodedBase64();
                EXPORT envelope XML TO xml;
                sendRequestEDI(url, xml());
                logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) +' request sent');
                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                IF requestError() THEN {
                    sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                    logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ': ' + requestError());
                    MESSAGE provider + ' (' + login + ') Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
                } ELSE {
                    logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ' request succeeded');
                }
            }
            logToFile('edi', CONCAT '\n', provider + ' (' + login + ') Parse EInvoiceMessage ' + id(i) + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE  'Ошибка при импорте сообщения ' + id(i) +'. Обратитесь к администратору' NOWAIT;
            invoiceMessagesFailed() <- invoiceMessagesFailed() + 1;
        }
    }
}