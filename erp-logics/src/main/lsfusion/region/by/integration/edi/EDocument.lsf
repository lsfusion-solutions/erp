MODULE EDocument;

REQUIRE EDI, EDS, LegalEntityBy;

NAMESPACE EDI;

//первый это поставщик или покупатель, второй - мы
dataEDIProviderDocument 'EDI-провайдер для документов' = DATA EDIProvider (LegalEntity, LegalEntity);
EDIProviderDocument 'EDI-провайдер для документов' (LegalEntity legalEntity, LegalEntity company) = OVERRIDE dataEDIProviderDocument(legalEntity, company), EDIProvider(legalEntity) IF isCompany(company);
nameEDIProviderDocument 'EDI-провайдер для документов' (LegalEntity legalEntity, LegalEntity company) = staticCaption(EDIProviderDocument(legalEntity, company));

EXTEND FORM legalEntity
    PROPERTIES nameEDIProviderDocument(l, eCom);

//-----------------------------------------Электронный документ----------------------------------------------//
CLASS EDocument 'Электронный документ EDI';
TABLE eDocument(EDocument);

//isTest 'Тестовый документ' = DATA BOOLEAN (EDocument);

dateTimeCreated 'Создан' = DATA DATETIME (EDocument);
dateTimeCreated(EDocument d) <- currentDateTime() WHEN (d IS EDocument);

@defineExternalizable(eDocument, STRING[70]);

in 'Вкл.' = DATA LOCAL BOOLEAN (EDocument);
isCancel 'Отменен' = DATA BOOLEAN (EDocument);

documentID 'Номер документа (системный)' = DATA STRING[70] (EDocument);
creationDateTime 'Дата и время электронного документа' = DATA DATETIME (EDocument);
number 'Номер электронного документа (юридический)' = DATA STRING[50] (EDocument);
date 'Дата электронного документа (юридический)' = DATA DATE (EDocument);
type 'Тип электронного документа' = DATA STRING[255] (EDocument);

sender 'Отправитель' = DATA LegalEntity (EDocument);
dataGLNSender = DATA STRING[13](EDocument);
glnSender 'GLN отправителя' (EDocument d) = OVERRIDE GLN(sender(d)), dataGLNSender(d);
dataNameSender = DATA ISTRING[150](EDocument);
nameSender 'Отправитель' (EDocument d) = OVERRIDE name(sender(d)), dataNameSender(d);
addressSender 'Адрес отправителя' (EDocument d) = address(sender(d));
unpSender 'УНП отправителя' (EDocument d) = UNP(sender(d));

receiver 'Получатель' = DATA LegalEntity (EDocument);
glnReceiver 'GLN получателя' (EDocument d) = GLN(receiver(d));
nameReceiver 'Получатель' (EDocument d) = name(receiver(d));
addressReceiver 'Адрес получателя' (EDocument d) = address(receiver(d));
unpReceiver 'УНП получателя' (EDocument d) = UNP(receiver(d));


file 'Файл' = DATA RAWFILE (EDocument);
name 'Имя файла' = DATA STRING[255] (EDocument);

fileSender 'Файл с подписью отправителя' = DATA RAWFILE (EDocument);
nameFileSender 'Имя файла с подписью отправителя' = DATA STRING[255] (EDocument);

fileReceiver 'Файл с подписью получателя' = DATA RAWFILE (EDocument);
nameFileReceiver 'Имя файла с подписью получателя' = DATA STRING[255] (EDocument);

CLASS EDocumentRoute {
    route0 'документ подписывает обе стороны',
    route1 'документ подписывает только отправитель',
    route2 'документ подписывает только получатель'
}

id (EDocumentRoute r) = CASE
    WHEN r == EDocumentRoute.route0 THEN '0'
    WHEN r == EDocumentRoute.route1 THEN '1'
    WHEN r == EDocumentRoute.route2 THEN '2';

route 'Маршрут документа' = DATA EDocumentRoute (EDocument);
nameRoute 'Маршрут документа' (EDocument d) = staticCaption(route(d)) CHARWIDTH 30;
idRoute 'Маршрут документа' (EDocument d) = id(route(d));

FORM dialogEDocument 'Выбор электронного документа'
    OBJECTS d = EDocument
    PROPERTIES(d) READONLY number, date, type, name, nameSender, nameReceiver
    
    LIST EDocument OBJECT d
;
//-----------------------------------------Электронный документ со строками------------------------------------//
CLASS EDocumentDetail 'Строка электронного документа';
TABLE eDocumentDetail(EDocumentDetail);

eDocument = DATA EDocument(EDocumentDetail) NONULL DELETE INDEXED;

lineNumber 'Порядковый номер' = DATA INTEGER (EDocumentDetail) ; 
senderItemCode 'Код в системе оотправителя'= DATA STRING[100] (EDocumentDetail);
senderItemDescription 'Наименование' = DATA STRING[500] (EDocumentDetail);
invoiceQuantity 'Количество' = DATA NUMERIC[13,3] (EDocumentDetail);
lineItemUnitPriceWithoutTax 'Цена' = DATA NUMERIC[12,2] (EDocumentDetail);
senderUnitOfMeasure 'Код единицы измерения' = DATA STRING[3] (EDocumentDetail);
taxRate 'НДС, %' = DATA STRING[7](EDocumentDetail);
lineItemCostWithoutTax 'Сумма'= DATA NUMERIC[12,2] (EDocumentDetail);
lineItemCostWithTax 'Сумма с НДС'= DATA NUMERIC[12,2] (EDocumentDetail);

countEDocumentDetail = GROUP SUM 1 BY eDocument(EDocumentDetail d) MATERIALIZED;

//-----------------------------------------Сообщение по документу EDI-----------------------------------------//
CLASS EDocumentMessage 'Сообщение по документу EDI';
TABLE eDocumentMessage(EDocumentMessage);

number 'Номер' = DATA STRING[35] (EDocumentMessage);
eDocument 'Документ' = DATA EDocument (EDocumentMessage) NONULL DELETE;
numberEDocument 'Накладная' (EDocumentMessage m) = number(eDocument(m));
dateTime 'Дата/время сообщения' = DATA DATETIME (EDocumentMessage);
code 'Код сообщения' = DATA STRING[10] (EDocumentMessage);
description 'Текст сообщения' = DATA STRING[1000] (EDocumentMessage);

background = ABSTRACT CASE COLOR (EDocument);

kind 'Вид' = DATA EInvoiceMessageKind (EDocumentMessage);
nameKind 'Вид' (EDocumentMessage m) = staticCaption(kind(m));

INDEX eDocument(EDocumentMessage m), number(m), kind(m);
eDocumentMessage (eDocument, number, kind) = GROUP AGGR EDocumentMessage m BY eDocument(m), number(m), kind(m);

EXTEND CLASS EInvoiceMessageType {
    systemmessage_blrdoc 'SYSTEMMESSAGE-BLRDOC',
    blrapn_blrdoc 'BLRAPN-BLRDOC',
    aperak_pdf 'APERAK-PDF'
}

type 'Тип' = DATA EInvoiceMessageType (EDocumentMessage);
nameType 'Тип' (EDocumentMessage m) = staticCaption(type(m));

FORM eDocuments 'Электронные документы EDI'
    OBJECTS d = EDocument
    PROPERTIES(d) in
    PROPERTIES(d) READONLYIF isReadonly() isCancel//, isTest
    PROPERTIES(d) BACKGROUND background(d) READONLY number, date, type, glnSender, nameSender, glnReceiver, nameReceiver, 
                  dateTimeCreated,documentID, creationDateTime, nameRoute, name, nameFileSender, nameFileReceiver
    FILTERGROUP notExported

    OBJECTS md = EDocumentDetail
    PROPERTIES(md) READONLY SHOWIF countEDocumentDetail(d) lineNumber, senderItemCode, senderItemDescription, invoiceQuantity,
                   lineItemUnitPriceWithoutTax, senderUnitOfMeasure, taxRate, lineItemCostWithoutTax, lineItemCostWithTax
    FILTERS eDocument(md) == d
    
    OBJECTS m = EDocumentMessage
    PROPERTIES(m) READONLY numberEDocument, dateTime, nameType, nameKind, code, description
    FILTERS eDocument(m) == d
    ORDERS dateTime(m);
;
@extendFormEditable(eDocuments);

DESIGN eDocuments {
    BOX {
        MOVE BOX(d);
        NEW tab {
            fill = 1;
            type = TABBED;
            MOVE BOX(md);
            MOVE BOX(m);
            NEW actionContainer {
                caption = 'Действия';
                type = CONTAINERH;
            }
        }
        
        MOVE TOOLBARBOX {
            TOOLBAR(d) {
                type = COLUMNS;
                columns = 3;
            }
        }
    }
}

NAVIGATOR {
    edi 'EDI' {
        NEW eDocuments;
    }
}

FORM eDocument 'Электронный документ EDI'
    OBJECTS d = EDocument PANEL 
    PROPERTIES(d) BACKGROUND background(d) number, date, type, dateTimeCreated, glnSender, nameSender, glnReceiver, nameReceiver,
                  nameRoute, name, nameFileSender, nameFileReceiver
    OBJECTS md = EDocumentDetail
    PROPERTIES(md) READONLY lineNumber, senderItemCode, senderItemDescription, invoiceQuantity, lineItemUnitPriceWithoutTax,
                   senderUnitOfMeasure, taxRate, lineItemCostWithoutTax, lineItemCostWithTax
    FILTERS eDocument(md) == d
;

DESIGN eDocument {
    GROUP (,d) {
        type = COLUMNS;
        columns = 2;
    }
    PROPERTY (glnSender(d)){notNull = TRUE;}
    PROPERTY (nameSender(d)){notNull = TRUE;}
    PROPERTY (glnReceiver(d)){notNull = TRUE;}
    PROPERTY (nameReceiver(d)){notNull = TRUE;}
    BOX (md) {fill = 1;}
}

openEDocument 'Открыть документ' (EDocument d) {
    open(setExtension(file(d),(OVERRIDE getWord(name(d),'.',wordCount(name(d),'.')),'txt')));
} TOOLBAR;

addEDocument 'Загрузить документ' () {
    NEWSESSION {
        INPUT f = FILE DO NEW d = EDocument {
            file(d) <- RAWFILE(f);
            name(d) <- STRING[255]('document.' + getExtension(f));
            SHOW eDocument OBJECTS d = d DOCKED;
        }
    }
} TOOLBAR IMAGE 'add.png';

openEDocumentSender 'Открыть документ с подписью отправителя' (EDocument d) {
    open(setExtension(fileSender(d),(OVERRIDE getWord(nameFileSender(d),'.',wordCount(nameFileSender(d),'.')),'txt')));
} TOOLBAR;

openEDocumentReceiver 'Открыть документ с подписью получателя' (EDocument d) {
    open(setExtension(fileReceiver(d),(OVERRIDE getWord(nameFileReceiver(d),'.',wordCount(nameFileReceiver(d),'.')),'txt')));
} TOOLBAR;

editEDocument 'Заполнить атрибуты' (EDocument d) { 
	NEWSESSION {   
	    SHOW eDocument OBJECTS d = d DOCKED;
	}
} TOOLBAR IMAGE 'edit.png';

EXTEND FORM eDocuments
    PROPERTIES DRAW d openEDocument(d) SHOWIF file(d), openEDocumentSender(d) SHOWIF fileSender(d), 
                      openEDocumentReceiver(d) SHOWIF fileReceiver(d), addEDocument(), editEDocument(d)
    //PROPERTIES NEWSESSION DELETE(d)
;

//--------------------- действия ---------------------//
exportedSender 'Экспортирован (отправитель)' = DATA BOOLEAN (EDocument);
importedReceiver 'Импортирован (получатель)' = DATA BOOLEAN (EDocument);
//exportedReceiver 'Экспортирован (получатель)' = DATA BOOLEAN (EDocument);
//importedSender 'Импортирован (отправитель)' = DATA BOOLEAN (EDocument);


signAndSendSender 'Подписать и отправить (отправитель)'  ABSTRACT LIST (EDocument);
signAndSendSenderEDI 'Подписать и отправить (отправитель)'() {
    IF askPasswordEDSService() THEN {
        DIALOG passwordEDSService DO {} ELSE { BREAK; };
    }
    FOR in(EDocument d) DO { 
        IF EDIProviderDocument(receiver(d), sender(d)) THEN
            signAndSendSender(d);
        ELSE
            MESSAGE 'Не выбран EDI провайдер для документа: ' + (OVERRIDE documentID(d), number(d), '');
        in(d) <- NULL;
    }
    ELSE
        MESSAGE 'Не выбрано ни одного документа';
}

EXTEND FORM eDocuments
    PROPERTIES(d) BEFORE isCancel(d) READONLYIF isReadonly() exportedSender, importedReceiver
    EXTEND FILTERGROUP notExported
        FILTER 'Не экспортированы (отправитель)' NOT exportedSender(d) 'F8'
        FILTER 'Не импортированы (получатель)' NOT importedReceiver(d) 'F9'
        //FILTER 'Не экспортированы (получатель)' NOT exportedReceiver(d) AND NOT exportedNoticeCustomer(e) 'F10'
        //FILTER 'Не импортированы (отправитель)' NOT importedSender(d) AND NOT importedNoticeSupplier(e) 'F11'
    PROPERTIES() DRAW d TOOLBAR signAndSendSenderEDI
;

DESIGN eDocuments {
    actionContainer {
        caption = 'Действия';
        type = CONTAINERH;
        NEW sender {
            caption = 'Отправитель';
            type = CONTAINERV;        
            MOVE PROPERTY (signAndSendSenderEDI()) { alignment = STRETCH; };
        }
    }
}

//стоит сделать отдельные свойства для PDF отправителя и получателя
@openXML(EDocument,d,eDocuments);

@openXML(EDocumentMessage,m,eDocuments);