MODULE EInvoiceEDN;

REQUIRE EInvoiceTopByApi, EDN;

NAMESPACE EDI;

EXTEND FORM integrationData
    PROPERTIES() READONLY confirmNotFoundInvoicesEDN = confirmNotFoundInvoices, disableAutoBlrapnEDN = disableAutoBlrapn
    PROPERTIES() useDocuDrive // на текущий момент реализован только обмен накладными, поэтому тут добавляем если будут заказы тогда перенесем в общие
    PROPERTIES() SHOWIF useDocuDrive() exportDirectoryDocuDrive, importDirectoryDocuDrive
;

DESIGN integrationData {
    col1EDN {
        NEW ivsEDN {
            caption = 'Электронные накладные';
            MOVE PROPERTY (useDocuDrive());
            MOVE PROPERTY (exportDirectoryDocuDrive());
            MOVE PROPERTY (importDirectoryDocuDrive());
            MOVE PROPERTY (confirmNotFoundInvoicesEDN);
            MOVE PROPERTY (disableAutoBlrapnEDN);
        }
    }
}

overReceiveMessagesEDN(LegalEntity le) + {
    hideMessageHeaderBlrapn() <- extractEDN(le);
}

overInvoiceOutputDirEDN 'Путь сохранения отправленных документов' = ABSTRACT CASE STRING (EInvoice);

//вообще логика сообщений, похоже, дублирует логику apn а в случе если они приходят от сервера edi у них еще и одинаковый номер
//возможно для накладных можно отделить те которые приходят с сервера, или хотя бы не затирать данные по apn. пока дублируем добавлением в номер мимвола m
overReceiveMessagesDocuDrive(INTEGER i, STRING[255] importDir, STRING[255] exportDir, STRING[100] archiveDir, BOOLEAN disableConfirmation, BOOLEAN sendReplies, STRING[100] provider) + {
    IF lower(documentType(i)) == 'systemmessage' THEN {
        TRY {
            IMPORT systemMessage XML FROM data(i);
            skipSystemmessage() <- NULL;
            overImportSystemmessage();
            IF NOT skipSystemmessage() THEN {
                CASE
                    WHEN documentType() == 'BLRWBL' OR documentType() == 'BLRWBR' OR documentType() == 'BLRDLN' OR documentType() == 'BLRDNR' THEN {
                        LOCAL eInvoice = EInvoice();
                        eInvoice() <- eInvoiceM(documentNumber());
                        IF eInvoice() THEN {
                            NEWSESSION NESTED LOCAL {
                                IF NOT eInvoiceMessage(eInvoice(), 'm' + messageDocumentNumber(), EInvoiceMessageKind.in) THEN NEW m = EInvoiceMessage {
                                    number(m) <- 'm' + messageDocumentNumber();
                                    eInvoice(m) <- eInvoice();
                                    kind(m) <- EInvoiceMessageKind.in;
                                }
                                FOR EInvoiceMessage m == eInvoiceMessage(eInvoice(), 'm' + messageDocumentNumber(), EInvoiceMessageKind.in) DO {
                                    dateTime(m) <- messageDocumentDate();
                                    code(m) <- code();
                                    description(m) <- OVERRIDE description(), description(code());
                                    type(m) <- CASE
                                        WHEN documentType() == 'BLRWBL' THEN EInvoiceMessageType.systemmessage_blrwbl
                                        WHEN documentType() == 'BLRWBR' THEN EInvoiceMessageType.systemmessage_blrwbr
                                        WHEN documentType() == 'BLRDLN' THEN EInvoiceMessageType.systemmessage_blrdln
                                        WHEN documentType() == 'BLRDNR' THEN EInvoiceMessageType.systemmessage_blrdnr;
                                    IF code(m) >= '1350' AND (type(m) == EInvoiceMessageType.systemmessage_blrwbr OR type(m) == EInvoiceMessageType.systemmessage_blrdnr)
                                        //подверждение уже приходило, не трогаем больше
                                        AND NOT (GROUP SUM 1 IF code(EInvoiceMessage em) == '2550' AND (type(em) == EInvoiceMessageType.blrapn_blrwbr OR type(em) == EInvoiceMessageType.blrapn_blrdnr) AND eInvoice(em) == eInvoice() AND NOT kind(em) == EInvoiceMessageKind.out)
                                        //10 ошибок, значит есть системная проблема и автоматически не убираем признак выгрузки
                                        AND NOT (GROUP SUM 1 IF (code(EInvoiceMessage em) == '1353' OR code(em) == '1354') AND eInvoice(em) == eInvoice()) > 10
                                    THEN {
                                        exportedCustomer(eInvoice(m)) <- NULL;
                                    }
                                    XMLPath(m) <- archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                                    APPLY NESTED LOCAL;
                                    IF canceled() THEN {
                                        IF NOT disableConfirmation AND sendReplies THEN {
                                            LOCAL contentSubXML = FILE();
                                            EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = messageDocumentNumber(), code = '1450', description = applyMessage() XML TO contentSubXML;
                                            logToFile('edi', provider + ' RecipientError ' + id(i) +' request sent');
                                            TRY{ mkdir(exportDir + 'SYSTEMMESSAGE'); }
                                            TRY {
                                                WRITE data(i) TO exportDir + 'SYSTEMMESSAGE/' + id(i);
                                                logToFile('edi', provider + ' RecipientError ' + id(i) + ' request succeeded');
                                            } CATCH {
                                                sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                                                logToFile('edi', provider + ' RecipientError ' + id(i) + ': ' + messageCaughtException());
                                                MESSAGE provider + ' Сообщение об ошибке ' + id(i) + ' не выгружено: ' + messageCaughtException() NOWAIT;
                                            }
                                        }
                                        logToFile('edi', provider + ' Import EInvoiceMessage ' + id(i) + ' failed: ' + applyMessage());
                                        invoiceMessagesFailed() <- invoiceMessagesFailed() + 1;
                                    } ELSE {
                                        IF NOT disableConfirmation THEN {
                                            TRY {
                                                delete(importDir + fileName(i));
                                                logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                                            } CATCH {
                                                logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': ' + messageCaughtException());
                                                MESSAGE  provider + ' Документ ' + id(i) + ' не помечен как обработанный: ' + messageCaughtException() NOWAIT;
                                            }
                                        }
                                        logToFile('edi', provider + ' Import EInvoiceMessage ' + id(i) + ' succeeded');
                                        invoiceMessagesSucceeded() <- invoiceMessagesSucceeded() + 1;
                                    }
                                }
                            }
                        } ELSE {
                            IF confirmNotFoundInvoices() THEN {
                                IF NOT disableConfirmation THEN {
                                    TRY {
                                        delete(importDir + fileName(i));
                                        logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                                    } CATCH {
                                        logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': ' + messageCaughtException());
                                        MESSAGE  provider + ' Документ ' + id(i) + ' не помечен как обработанный: ' + messageCaughtException() NOWAIT;
                                    }
                                    messagesConfirmed() <- messagesConfirmed() + 1;
                                }
                            } ELSE {
                                IF NOT disableConfirmation AND sendReplies THEN {
                                    LOCAL contentSubXML = FILE();
                                    EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = messageDocumentNumber(), code = '1450', description = (provider + ' Import EInvoiceMessage ' + id(i) + ' failed: ' + 'EInvoice ' + (OVERRIDE documentNumber(), 'NULL') + ' not found') XML TO contentSubXML;
                                    logToFile('edi', provider + ' RecipientError ' + id(i) +' request sent');
                                    TRY{ mkdir(exportDir + 'SYSTEMMESSAGE'); }
                                    TRY {
                                        WRITE data(i) TO exportDir + 'SYSTEMMESSAGE/' + id(i);
                                        logToFile('edi', provider + ' RecipientError ' + id(i) + ' request succeeded');
                                    } CATCH {
                                        sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                                        logToFile('edi', provider + ' RecipientError ' + id(i) + ': ' + messageCaughtException());
                                        MESSAGE provider + ' Сообщение об ошибке ' + id(i) + ' не выгружено: ' + messageCaughtException() NOWAIT;
                                    }
                                }
                            }
                            logToFile('edi', provider + ' Import EInvoiceMessage ' + id(i) + ' failed: ' + 'EInvoice ' + (OVERRIDE documentNumber(), 'NULL') + ' not found');
                            invoiceMessagesFailed() <- invoiceMessagesFailed() + 1;
                        }
                    }
                    WHEN documentType() == 'BLRAPN' OR documentType() == 'SYSTEMMESSAGE' THEN {
                        logToFile('edi', provider + ' Parse Invoice Message ' + id(i) + ' skipped for documentType ' + documentType());
                        IF NOT disableConfirmation THEN {
                            TRY {
                                delete(importDir + fileName(i));
                                logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                            } CATCH {
                                logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': ' + messageCaughtException());
                                MESSAGE  provider + ' Документ ' + id(i) + ' не помечен как обработанный: ' + messageCaughtException() NOWAIT;
                            }
                        }
                        invoiceMessagesFailed() <- invoiceMessagesFailed() + 1;
                    }
                    ELSE {
                    logToFile('edi', provider + ' Parse Invoice Message ' + id(i) + ' warning: unsupported documentType ' + (OVERRIDE documentType(), 'NULL'));
                }
            }
        } CATCH {
            IF NOT disableConfirmation AND sendReplies THEN {
                LOCAL contentSubXML = FILE();
                EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = messageDocumentNumber(), code = '1450', description = (CONCAT '\n', provider + ' Parse EInvoiceMessage ' + id(i) + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException()) XML TO contentSubXML;
                logToFile('edi', provider + ' RecipientError ' + id(i) +' request sent');
                TRY{ mkdir(exportDir + 'SYSTEMMESSAGE'); }
                TRY {
                    WRITE data(i) TO exportDir + 'SYSTEMMESSAGE/' + id(i);
                    logToFile('edi', provider + ' RecipientError ' + id(i) + ' request succeeded');
                } CATCH {
                    sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                    logToFile('edi', provider + ' RecipientError ' + id(i) + ': ' + messageCaughtException());
                    MESSAGE provider + ' Сообщение об ошибке ' + id(i) + ' не выгружено: ' + messageCaughtException() NOWAIT;
                }
            }
            logToFile('edi', CONCAT '\n', provider + ' Parse EInvoiceMessage ' + id(i) + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE  'Ошибка при импорте сообщения ' + id(i) +'. Обратитесь к администратору' NOWAIT;
            invoiceMessagesFailed() <- invoiceMessagesFailed() + 1;
        }
    }
}
