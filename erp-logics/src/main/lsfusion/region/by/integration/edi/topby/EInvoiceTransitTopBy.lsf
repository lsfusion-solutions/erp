MODULE EInvoiceTransitTopBy;

REQUIRE EInvoiceTopByApi, EInvoiceTransit, SupplierEInvoiceTopByApi, ConsignmentEInvoiceTracking;

NAMESPACE EDI;

overReceiveBlrapn(INTEGER i, STRING[100] login, STRING[100] password, TEXT url, STRING[100] archiveDir, BOOLEAN disableConfirmation, BOOLEAN sendReplies, STRING[100] provider) + {
    IF lower(blrapnReferenceDocumentType()) == 'blrspt' THEN {
        LOCAL eInvoice = EInvoice();
        eInvoice() <- eInvoiceDeliveryNoteNumber(blrapnDeliveryNoteId());
        IF eInvoice() THEN {
            NEWSESSION NESTED LOCAL {
                IF NOT eInvoiceMessage(eInvoice(), blrapnDocumentNumber(), EInvoiceMessageKind.in) THEN NEW m = EInvoiceMessage {
                    number(m) <- blrapnDocumentNumber();
                    eInvoice(m) <- eInvoice();
                    kind(m) <- EInvoiceMessageKind.in;
                }
                FOR EInvoiceMessage m == eInvoiceMessage(eInvoice(), blrapnDocumentNumber(), EInvoiceMessageKind.in) DO {
                    dateTime(m) <- blrapnDateTime();
                    code(m) <- blrapnCode();
                    description(m) <- OVERRIDE blrapnDescription(), description(blrapnCode());
                    type(m) <- EInvoiceMessageType.blrapn_blrspt;
                    overReceiveBlrapn(m);
                    XMLPath(m) <- archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                    APPLY NESTED LOCAL;
                    IF canceled() THEN {
                        IF NOT disableConfirmation AND sendReplies THEN {
                            LOCAL contentSubXML = FILE();
                            EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = messageDocumentNumber(), code = '1450', description = applyMessage() XML TO contentSubXML;
                            fileToString(contentSubXML());
                            encodeBase64(resultString());
                            LOCAL xml = XMLFILE();
                            envelopeLogin() <- login;
                            envelopePassword() <- password;
                            envelopeDocumentDate() <- currentDateTime();
                            envelopeDocumentNumber() <- id(i);
                            envelopeDocumentType() <- 'SYSTEMMESSAGE';
                            envelopeContent() <- encodedBase64();
                            EXPORT envelope XML TO xml;
                            sendRequestEDI(url, xml());
                            logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) +' request sent');
                            importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                            IF requestError() THEN {
                                sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                                logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ': ' + requestError());
                                MESSAGE provider + ' (' + login + ') Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
                            } ELSE {
                                logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ' request succeeded');
                            }
                        }
                        logToFile('edi', provider + ' (' + login + ') Import EInvoiceMessage ' + id(i) + ' failed: ' + applyMessage());
                        invoiceMessagesFailed() <- invoiceMessagesFailed() + 1;
                    } ELSE {
                        IF NOT disableConfirmation THEN {
                            LOCAL xml = XMLFILE();
                            EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO xml;
                            sendRequestEDI(url, xml());
                            logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request sent');
                            importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                            IF requestError() THEN {
                                logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                                MESSAGE  provider + ' (' + login + ') Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                            } ELSE {
                                logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                            }
                        }
                        logToFile('edi', provider + ' (' + login + ') Import EInvoiceMessage ' + id(i) + ' succeeded');
                        invoiceMessagesSucceeded() <- invoiceMessagesSucceeded() + 1;
                    }
                }
            }
        } ELSE {
            IF confirmNotFoundInvoices() THEN {
                IF NOT disableConfirmation THEN {
                    LOCAL xml = XMLFILE();
                    EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO xml;
                    sendRequestEDI(url, xml());
                    logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request sent');
                    importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                    IF requestError() THEN {
                        logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                        MESSAGE  provider + ' (' + login + ') Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                    } ELSE {
                        logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                    }
                    messagesConfirmed() <- messagesConfirmed() + 1;
                }
            } ELSE {
                IF NOT disableConfirmation AND sendReplies THEN {
                    LOCAL contentSubXML = FILE();
                    EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = messageDocumentNumber(), code = '1450', description = applyMessage() XML TO contentSubXML;
                    fileToString(contentSubXML());
                    encodeBase64(resultString());
                    LOCAL xml = XMLFILE();
                    envelopeLogin() <- login;
                    envelopePassword() <- password;
                    envelopeDocumentDate() <- currentDateTime();
                    envelopeDocumentNumber() <- id(i);
                    envelopeDocumentType() <- 'SYSTEMMESSAGE';
                    envelopeContent() <- encodedBase64();
                    EXPORT envelope XML TO xml;
                    //EXPORT envelopeMessage OBJECTS login = login, password = password, date = currentDateTime(), number = id(i), innerXML = encodedBase64() XML TO xml;
                    sendRequestEDI(url, xml());
                    logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) +' request sent');
                    importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                    IF requestError() THEN {
                        sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                        logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ': ' + requestError());
                        MESSAGE provider + ' (' + login + ') Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
                    } ELSE {
                        logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ' request succeeded');
                    }
                }
            }
            logToFile('edi', provider + ' (' + login + ') Import EInvoiceMessage ' + id(i) + ' failed: ' + 'EInvoice ' + (OVERRIDE blrapnDeliveryNoteId(), 'NULL') + ' not found');
            invoiceMessagesFailed() <- invoiceMessagesFailed() + 1;
        }
        RETURN;
    }
}

overReceiveSystemMessage(INTEGER i, STRING[100] login, STRING[100] password, TEXT url, STRING[100] archiveDir, BOOLEAN disableConfirmation, BOOLEAN sendReplies, STRING[100] provider) + {
    IF documentType() == 'BLRSPT' THEN {
        LOCAL eInvoice = EInvoice();
        eInvoice() <- eInvoiceM(documentNumber());
        IF eInvoice() THEN {
            NEWSESSION NESTED LOCAL {
                IF NOT eInvoiceMessage(eInvoice(), 'm' + messageDocumentNumber(), EInvoiceMessageKind.in) THEN NEW m = EInvoiceMessage {
                    number(m) <- 'm' + messageDocumentNumber();
                    eInvoice(m) <- eInvoice();
                    kind(m) <- EInvoiceMessageKind.in;
                }
                FOR EInvoiceMessage m == eInvoiceMessage(eInvoice(), 'm' + messageDocumentNumber(), EInvoiceMessageKind.in) DO {
                    dateTime(m) <- messageDocumentDate();
                    code(m) <- code();
                    description(m) <- OVERRIDE description(), description(code());
                    type(m) <- EInvoiceMessageType.systemmessage_blrspt;
                    overReceiveSystemMessage(m);
                    XMLPath(m) <- archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                    APPLY NESTED LOCAL;
                    IF canceled() THEN {
                        IF NOT disableConfirmation AND sendReplies THEN {
                            LOCAL contentSubXML = FILE();
                            EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = messageDocumentNumber(), code = '1450', description = applyMessage() XML TO contentSubXML;
                            fileToString(contentSubXML());
                            encodeBase64(resultString());
                            LOCAL xml = XMLFILE();
                            envelopeLogin() <- login;
                            envelopePassword() <- password;
                            envelopeDocumentDate() <- currentDateTime();
                            envelopeDocumentNumber() <- id(i);
                            envelopeDocumentType() <- 'SYSTEMMESSAGE';
                            envelopeContent() <- encodedBase64();
                            EXPORT envelope XML TO xml;
                            //EXPORT envelopeMessage OBJECTS login = login, password = password, date = currentDateTime(), number = id(i), innerXML = encodedBase64() XML TO xml;
                            sendRequestEDI(url, xml());
                            logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) +' request sent');
                            importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                            IF requestError() THEN {
                                sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                                logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ': ' + requestError());
                                MESSAGE provider + ' (' + login + ') Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
                            } ELSE {
                                logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ' request succeeded');
                            }
                        }
                        logToFile('edi', provider + ' (' + login + ') Import EInvoiceMessage ' + id(i) + ' failed: ' + applyMessage());
                        invoiceMessagesFailed() <- invoiceMessagesFailed() + 1;
                    } ELSE {
                        IF NOT disableConfirmation THEN {
                            LOCAL xml = XMLFILE();
                            EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO xml;
                            sendRequestEDI(url, xml());
                            logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request sent');
                            importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                            IF requestError() THEN {
                                logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                                MESSAGE  provider + ' (' + login + ') Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                            } ELSE {
                                logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                            }
                        }
                        logToFile('edi', provider + ' (' + login + ') Import EInvoiceMessage ' + id(i) + ' succeeded');
                        invoiceMessagesSucceeded() <- invoiceMessagesSucceeded() + 1;
                    }
                }
            }
        } ELSE {
            IF confirmNotFoundInvoices() THEN {
                IF NOT disableConfirmation THEN {
                    LOCAL xml = XMLFILE();
                    EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO xml;
                    sendRequestEDI(url, xml());
                    logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request sent');
                    importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                    IF requestError() THEN {
                        logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                        MESSAGE  provider + ' (' + login + ') Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                    } ELSE {
                        logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                    }
                    messagesConfirmed() <- messagesConfirmed() + 1;
                }
            } ELSE {
                IF NOT disableConfirmation AND sendReplies THEN {
                    LOCAL contentSubXML = FILE();
                    EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = messageDocumentNumber(), code = '1450', description = applyMessage() XML TO contentSubXML;
                    fileToString(contentSubXML());
                    encodeBase64(resultString());
                    LOCAL xml = XMLFILE();
                    envelopeLogin() <- login;
                    envelopePassword() <- password;
                    envelopeDocumentDate() <- currentDateTime();
                    envelopeDocumentNumber() <- id(i);
                    envelopeDocumentType() <- 'SYSTEMMESSAGE';
                    envelopeContent() <- encodedBase64();
                    EXPORT envelope XML TO xml;
                    //EXPORT envelopeMessage OBJECTS login = login, password = password, date = currentDateTime(), number = id(i), innerXML = encodedBase64() XML TO xml;
                    sendRequestEDI(url, xml());
                    logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) +' request sent');
                    importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                    IF requestError() THEN {
                        sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                        logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ': ' + requestError());
                        MESSAGE provider + ' (' + login + ') Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
                    } ELSE {
                        logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ' request succeeded');
                    }
                }
            }
            logToFile('edi', provider + ' (' + login + ') Import EInvoiceMessage ' + id(i) + ' failed: ' + 'EInvoice ' + (OVERRIDE documentNumber(), 'NULL') + ' not found');
            invoiceMessagesFailed() <- invoiceMessagesFailed() + 1;
        }
        RETURN;
    }
}

signAndSendSupplierEInvoiceTransit (EInvoice ei, STRING[100] login, STRING[100] password, TEXT url, STRING[100] outputDir , STRING[100] provider) {
    checkIsServer();
    IF isServer() THEN {
        TRY {
            IF login AND password THEN {
                IF EDSServiceSupplier(provider,ei) THEN {
                    LOCAL error = TEXT();
                    error() <- '';
                    IF NOT length(contractName(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Наименование документа, который служит основанием отпуска\'\n';
                    IF NOT length(contractId(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Номер Договора (или другого документа, служащего основанием отпуска)\'\n';
                    IF NOT length(invoiceSeries(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Серия бумажной накладной\'\n';
                    IF NOT length(invoiceNumber(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Номер бумажной накладной\'\n';
                    IF NOT length(nameSupplier(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Наименование грузоотправителя\'\n';
                    IF NOT length(addressSupplier(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Адрес грузоотправителя\'\n';
                    IF NOT length(countryCodeSupplier(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Код страны отправления\'\n';
                    IF NOT length(countrySupplier(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Страна отправления\'\n';
                    IF NOT length(unpSupplier(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'УНП грузоотправителя\'\n';
                    IF NOT length(contactSupplier(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Отпуск разрешил (должность и ФИО)\'\n';
                    IF NOT length(nameCustomer(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Наименование грузополучателя\'\n';
                    IF NOT length(addressCustomer(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Адрес грузополучателя\'\n';
                    IF NOT length(countryCodeCustomer(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Код страны грузополучателя\'\n';
                    IF NOT length(countryCustomer(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Страна грузополучателя\'\n';
                    IF NOT length(unpCustomer(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'УНП грузополучателя\'\n';
                    IF NOT length(contactSupplierStock(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'ФИО и должность лица, которое отвечает за передачу груза со стороны грузоотправителя\'\n';
                    IF NOT length(deliveryContact(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Товар к перевозке принял (должность и ФИО)\'\n';
                    IF NOT length(currency(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'3-х буквенный код валюты, в которой указаны ценовые значения\'\n';
                    IF NOT totalLineItem(ei) THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Всего количество товарных позиций\'\n';
                    FOR eInvoice(EInvoiceDetail d) == ei DO {
                        IF NOT length(lineItemSign(d)) > 0 THEN error() <- error() + 'EInvoiceDetail ' + lineItemNumber(d) + ': Не заполнено поле \'Признак вида товарной позиции\'\n';
                        IF NOT lineItemID(d) THEN error() <- error() + 'EInvoiceDetail ' + lineItemNumber(d) + ': Не заполнено поле \'GTIN товара\'\n';
                        IF NOT length(itemCustomCode(d)) > 0 THEN error() <- error() + 'EInvoiceDetail ' + lineItemNumber(d) + ': Не заполнено поле \'Код ТНВЭД товара\'\n';
                        IF NOT deliveryTypePrev(d) THEN error() <- error() + 'EInvoiceDetail ' + lineItemNumber(d) + ': Не заполнено поле \'Тип приходного документа, по которому был получен товар\'\n';
                        IF NOT length(deliveryNotePrev(d)) > 0 THEN error() <- error() + 'EInvoiceDetail ' + lineItemNumber(d) + ': Не заполнено поле \'Номер приходного документа, по которому был получен товар\'\n';
                        IF NOT deliveryNoteDatePrev(d) THEN error() <- error() + 'EInvoiceDetail ' + lineItemNumber(d) + ': Не заполнено поле \'Дата и время создания приходного документа, по которому был получен товар\'\n';
                        IF NOT deliveryNotePrevLineID(d) THEN error() <- error() + 'EInvoiceDetail ' + lineItemNumber(d) + ': Не заполнено поле \'Номер строки в приходном документе, по которому был получен товар\'\n';
                        IF NOT length(lineItemName(d)) > 0 THEN error() <- error() + 'EInvoiceDetail ' + lineItemNumber(d) + ': Не заполнено поле \'Наименование товара\'\n';
                        IF NOT quantityDespatched(d) THEN error() <- error() + 'EInvoiceDetail ' + lineItemNumber(d) + ': Не заполнено поле \'Количество товара\'\n';
                        IF NOT length(lineItemQuantityUOM(d)) > 0 THEN error() <- error() + 'EInvoiceDetail ' + lineItemNumber(d) + ': Не заполнено поле \'Международный 3-х буквенный код единицы измерения из справочника ОКРБ 008-95 Единицы измерения и счета\'\n';
                        IF NOT lineItemAmountWithoutCharges(d) THEN error() <- error() + 'EInvoiceDetail ' + lineItemNumber(d) + ': Не заполнено поле \'Стоимость товарной позиции без НДС\'\n';
                        IF NOT lineItemAmount(d) THEN error() <- error() + 'EInvoiceDetail ' + lineItemNumber(d) + ': Не заполнено поле \'Сумма с НДС\'\n';
                        IF NOT lineItemPrice(d) THEN error() <- error() + 'EInvoiceDetail ' + lineItemNumber(d) + ': Не заполнено поле \'Цена\'\n';
                        IF NOT lineItemPriceSPT(d) THEN error() <- error() + 'EInvoiceDetail ' + lineItemNumber(d) + ': Не заполнено поле \'Цена единицы товара, указанная в соответствии с единицами измерения, подлежащими указанию в электронных накладных\'\n';
                    }
                    
                    IF error() == '' THEN {
                        LOCAL contentSubXML = FILE();
                        exportBlrsptDateTime() <- currentDateTimeMillis();
                        toMilliseconds(exportBlrsptDateTime());
                        EXPORT exportBlrspt OBJECTS ei = ei XML TO contentSubXML;
                        
                        name() <- 'blrspt-' + OVERRIDE overInvoiceOutputFileName(ei), toChar(exportBlrsptDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                        documentType() <- 'BLRSPT';
                        IF outputDir THEN {
                            TRY{ mkdir(outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd')); }
                            WRITE contentSubXML() TO outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + name();
                        }

                        getSignedDocumentSupplier(provider, ei, contentSubXML(), TRUE);
                        IF signError() THEN {
                            logToFile('edi', provider + ' (' + login + ') SendEInvoice error: BLRSPT ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError());
                            MESSAGE provider + ' (' + login + ') Накладная не выгружена: BLRSPT ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError() NOWAIT;
                        }
                        ELSE IF signResult() THEN {
                            LOCAL ixml = XMLFILE();
                            envelopeLogin() <- login;
                            envelopePassword() <- password;
                            envelopeFilename() <- CONCAT '', 'invoice', deliveryNoteNumber(ei);
                            envelopeDocumentDate() <- exportBlrsptDateTime();
                            envelopeDocumentNumber() <- numberSupplier(ei);
                            envelopeSender() <- glnSupplier(ei);
                            envelopeReceiver() <- glnCustomer(ei);
                            envelopeDeliveryPoint() <- glnCustomerStock(ei);
                            envelopeDocumentType() <- 'BLRSPT';
                            envelopeContent() <- signResult();
                            EXPORT envelope XML TO ixml;
                            sendRequestEDI(url, ixml());
                            logToFile('edi', provider + ' (' + login + ') SendEInvoice ' + deliveryNoteNumber(ei) +' request sent');
                            importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                            IF requestError() THEN {
                                logToFile('edi', provider + ' (' + login + ') SendEInvoice ' + deliveryNoteNumber(ei) + ': ' + requestError());
                                MESSAGE provider + ' (' + login + ') Накладная ' + deliveryNoteNumber(ei) + ' не выгружена: ' + requestError() NOWAIT;
                            } ELSE {
                                logToFile('edi', provider + ' (' + login + ') SendEInvoice ' + deliveryNoteNumber(ei) + ' request succeeded');
                                MESSAGE provider + ' (' + login + ') Накладная ' + deliveryNoteNumber(ei) + (IF isCancel(ei) THEN ' (отмена)' ELSE '') + ' выгружена' NOWAIT;
                                //NEWSESSION NESTED LOCAL {
                                    exportedSupplier(ei) <- TRUE;
                                    IF isCancel(ei) THEN {
                                        numberSupplierCancel(ei) <- STRING[35](resultMilliseconds());
                                        dateSupplierCancel(ei) <- exportBlrsptDateTime();
                                    } ELSE {
                                        numberSupplier(ei) <- STRING[35](resultMilliseconds());
                                        dateSupplier(ei) <- exportBlrsptDateTime();
                                    }
                                    NEW em = EInvoiceMessage {
                                        number(em) <- 'spt' + STRING[35](resultMilliseconds());
                                        eInvoice(em) <- ei;
                                        dateTime(em) <- toDateTimeFormat(toChar(exportBlrsptDateTime(),'yyyy-MM-ddThh24:mi:ss'),'yyyy-MM-ddThh24:mi:ss');
                                        code(em) <- (IF isCancel(ei) THEN '1' ELSE '9');
                                        kind(em) <- EInvoiceMessageKind.out;
                                        type(em) <- EInvoiceMessageType.blrspt;
                                        XMLPath(em) <- outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + name();
                                    }
                                    APPLY NESTED LOCAL;
                                //}
                            }
                        }
                    } ELSE {
                        logToFile('edi', provider + ' (' + login + ') SendEInvoice: Не все поля заполнены. ' + error());
                        MESSAGE provider + ' (' + login + ') Накладная не выгружена: Не все поля заполнены ' + error() NOWAIT;
                    }
                    
                } ELSE {
                    logToFile('edi', provider + ' (' + login + ') SendEInvoice: не заданы параметры EDSService');
                    MESSAGE provider + ' (' + login + ') Накладная не выгружена: не заданы параметры EDSService' NOWAIT;
                }
            } ELSE {
                logToFile('edi', provider + ' (' + login + ') SendEInvoice: не заданы имя пользователя / пароль / хост / порт');
                MESSAGE provider + ' (' + login + ') Накладная не выгружена: не заданы имя пользователя / пароль / хост / порт' NOWAIT;
            }
        } CATCH {
            logToFile('edi', CONCAT '\n', provider + ' (' + login + ') error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE 'Накладная не выгружена. Обратитесь к администратору' NOWAIT;
        }
    } ELSE {
        logToFile('edi', provider + ' (' + login + ') error: ' + 'SendEInvoice disabled, change serverComputer() to enable');
        MESSAGE provider + ' (' + login + ') error: ' + 'SendEInvoice disabled, change serverComputer() to enable' NOWAIT;
    }
}

signAndSendSupplier(EInvoice e) + {
    IF EDIProviderInvoice(customer(e), supplier(e)) == EDIProvider.topBy AND skipSendSupplier(e) THEN
        IF exportedSupplier(e) THEN MESSAGE 'Накладная (поставщик) уже отправлена';
        ELSE {
            signAndSendSupplierEInvoiceTransit(e, loginTopBy(supplier(e)), passwordTopBy(supplier(e)), ('http://' + hostTopBy(supplier(e)) +':' + portTopBy(supplier(e)) + '/DmcService'), (OVERRIDE overInvoiceOutputDirTopBy(e),outputDirTopBy()), 'TopBy');
        }
}