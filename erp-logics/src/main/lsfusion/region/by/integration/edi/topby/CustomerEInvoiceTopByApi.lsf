MODULE CustomerEInvoiceTopByApi;

REQUIRE CustomerEInvoice, EInvoiceTopByApi, EDS;

NAMESPACE EDI;

overImportEInvoice ABSTRACT (INTEGER);
skipInvoice = DATA LOCAL NESTED STRING ();
overCreateEInvoice ABSTRACT LIST (EInvoice);
overCreateEInvoiceDetail ABSTRACT LIST (EInvoiceDetail, INTEGER);

getEInvoiceMessageType = GROUP MAX EInvoiceMessageType t BY upper(rtrim(getWord(staticName(t), '.', 2), '_'));

overReceiveMessages(INTEGER i, STRING[100] login, STRING[100] password, TEXT url, STRING[100] archiveDir, BOOLEAN disableConfirmation, STRING[100] provider) + {
    IF lower(documentType(i)) == 'blrdln' OR lower(documentType(i)) == 'blrwbl' THEN {
        TRY {
            skipInvoice() <- NULL;
            overImportEInvoice(i);
            IF NOT skipInvoice() THEN {
                IMPORT importEInvoice XML FROM data(i);
                validate(upper(documentType(i)), FILE(data(i)));
                NEWSESSION NESTED LOCAL {
                    LOCAL isCancel = BOOLEAN();
                    isCancel() <- TRUE IF eFunctionCode() == '1';
                    FOR EInvoice ei = eInvoiceDeliveryNoteNumber(eDeliveryNoteNumber()) DO {
                        importedCustomer(ei) <- TRUE ;
                        IF isCancel() THEN {
                            isCancel(ei) <- TRUE ;
                            numberSupplierCancel(ei) <- eDocumentID();
                            dateSupplierCancel(ei) <- eDateTime();
                            exportedCustomer(ei) <- NULL;
                            exportedNoticeCustomer(ei) <- NULL;
                            exportedBlrapnCustomer(ei) <- NULL;
                        } ELSE {
                            numberSupplier(ei) <- eDocumentID();
                            dateSupplier(ei) <- eDateTime();
                        }
                    } ELSE NEW ei = EInvoice {
                        isNewFormat(ei) <- TRUE;
                        importedCustomer(ei) <- TRUE;
                        isTestDocument(ei) <- TRUE IF eTestIndicator() == '1';
                        isTN2(ei) <- TRUE IF lower(documentType(i)) == 'blrdln';
                        id(ei) <- eSupplierGLN() + '/' + eDeliveryNoteNumber() + (IF isCancel() THEN '_cancel' ELSE '');
                        numberSupplier(ei) <- eDocumentID() IF NOT isCancel();
                        dateSupplier(ei) <- eDateTime() IF NOT isCancel();
                        numberSupplierCancel(ei) <- eDocumentID() IF isCancel();
                        dateSupplierCancel(ei) <- eDateTime() IF isCancel();
                        deliveryNoteDate(ei) <- eDeliveryNoteDate();
                        deliveryNoteNumber(ei) <- eDeliveryNoteNumber();
                        contractName(ei) <- eContractName();
                        contractId(ei) <- eContractID();
                        contractDate(ei) <- eContractDate();
                        waybillId(ei) <- eWaybillID();
                        isCancel(ei) <- isCancel();
                        supplier(ei) <- legalEntityGLNeInvoice(eSupplierGLN());
                        dataGLNSupplier(ei) <- eSupplierGLN();
                        contactSupplier(ei) <- eContactSupplier();
                        supplierStock(ei) <- stockGLNUserID(eSupplierGLN(), eSupplierStockGLN(), (OVERRIDE getWord(eUserID(), '-', 2), ''));
                        dataGLNSupplierStock(ei) <- eSupplierStockGLN();
                        contactSupplierStock(ei) <- eContactSupplierStock();
                        customer(ei) <- legalEntityGLN(eCustomerGLN());
                        customerStock(ei) <- companyStockGLN(eCustomerStockGLN());
                        freightPayer(ei) <- legalEntityGLN(eFreightPayerGLN());
                        transportContact(ei) <- eTransportContact();
                        deliveryContact(ei) <- eDeliveryContact();
                        proxyID(ei) <- eProxyID();
                        proxyDate(ei) <- eProxyDate();
                        partyIssuingProxyName(ei) <- ePartyIssuingProxyName();
                        quantityTrip(ei) <- OVERRIDE eQuantityTrip(), eQuantityTripNew();
                        transportOwnerName(ei) <- OVERRIDE eTransportOwnerName(), eTransportOwnerNameNew();
                        transportID(ei) <- OVERRIDE eTransportID(), eTransportIDNew();
                        trailerID(ei) <- OVERRIDE eTrailerID(), eTrailerIDNew();
                        sealIDReceiver(ei) <- eSealIDReceiver();
                        orderID(ei) <- eOrderID();
                        cancelDeliveryNoteId(ei) <- eCancelDeliveryNoteId() WHERE eCancelDeliveryNoteId() != eDeliveryNoteNumber();
                        currency(ei) <- eCurrency();
                        FOR eFieldName(INTEGER e) OR eFieldValue(e) DO NEW ef = ExtraField {
                            name(ef) <- eFieldName(e);
                            code(ef) <- eFieldCode(e);
                            value(ef) <- eFieldValue(e);
                            eInvoice(ef) <- ei;
                        }
                        overCreateEInvoice(ei);
                        XMLPath(ei) <- archiveDir + '/received/' + toChar(currentDate(), 'yyyyMMdd') + '/' + id(i);

                        upperLevelCodeMark(INTEGER r) <- STRING[200](decodeText(upperLevelCodeMark(r), 'base64'));
                        groupPackingCodeMark(INTEGER r) <- STRING[200](decodeText(groupPackingCodeMark(r), 'base64'));
                        fieldCodeMark(INTEGER r) <- STRING[200](decodeText(fieldCodeMark(r), 'base64'));

                        FOR eLineItemID(INTEGER l) OR eLineItemBuyerID(l) OR eLineItemSupplierID(l) ORDER eLineItemNumber(l) DO NEW ed = EInvoiceDetail {
                            eInvoice(ed) <- ei;
                            id(ed) <- id(ei) + '/' + eLineItemNumber(l);
                            dataIndex(ed) <- eLineItemNumber(l);
                            lineItemSign(ed) <- eLineItemSign(l);
                            lineItemID(ed) <- eLineItemID(l);
                            lineItemBuyerID(ed) <- eLineItemBuyerID(l);
                            itemCustomCode(ed) <- eItemCustomCode(l);
                            itemCustomCodeOther(ed) <- eItemCustomCodeOther(l);
                            deliveryTypePrev(ed) <- eDeliveryTypePrev(l);
                            deliveryNotePrev(ed) <- eDeliveryNotePrev(l);
                            deliveryNoteDatePrev(ed) <- eDeliveryNoteDatePrev(l);
                            deliveryNotePrevLineID(ed) <- INTEGER(eDeliveryNotePrevLineID(l));
                            lineItemSupplierID(ed) <- eLineItemSupplierID(l);
                            lineItemName(ed) <- eLineItemName(l);
                            grossWeightValue(ed) <- eGrossWeightValue(l);
                            quantityDespatched(ed) <- eQuantityDespatched(l);
                            lineItemQuantityUOM(ed) <- eLineItemQuantityUOM(l);
                            despatchUnitQuantityDespatched(ed) <- eDespatchUnitQuantityDespatched(l);
                            expiryDate(ed) <- eExpiryDate(l);
                            lineItemQuantitySPT(ed) <- eLineItemQuantitySPT(l);
                            quantityDespatchedSPT(ed) <- eQuantityDespatchedSPT(l);
                            valueVAT(ed) <- eValueVAT(l);
                            additionalInformation(ed) <- eAdditionalInformation(l);
                            manufactureDate(ed) <- eLineItemProductDate(l);
                            lineItemPrice(ed) <- eLineItemPrice(l);
                            lineItemPriceSPT(ed) <- eLineItemPriceSPT(l);
                            lineItemManufacturerPrice(ed) <- eLineItemManufacturerPrice(l);
                            lineItemAmountWithoutCharges(ed) <- eLineItemAmountWithoutCharges(l);
                            lineItemAmount(ed) <- eLineItemAmount(l);
                            lineItemAmountCharges(ed) <- eLineItemAmountCharges(l);
                            lineItemAmountExcise(ed) <- eLineItemAmountExcise(l);
                            lineItemManufacturerOutputPrice(ed) <- lineItemManufacturerOutputPrice(l);
                            typeDiscount(ed) <- typeDiscount(l);
                            bulkDiscountRate(ed) <- bulkDiscountRate(l);
                            outputPriceIncludingShippingCoast(ed) <- outputPriceIncludingShippingCoast(l);
                            outputPriceShippingCoast(ed) <- outputPriceShippingCoast(l);
                            outputPricePackingCoast(ed) <- outputPricePackingCoast(l);
                            bulkMarginRate(ed) <- bulkMarginRate(l);
                            cutRate(ed) <- cutRate(l);
                            additionalInformationPrice(ed) <- additionalInformationPrice(l);
                            additionalInformationNote(ed) <- additionalInformationNote(l);
                            FOR eLineItemFieldName(INTEGER e) AND eLineItemFieldValue(e) AND eLineItemLineItemExtraField(e) == l DO NEW ief = ItemExtraField {
                                name(ief) <- eLineItemFieldName(e);
                                code(ief) <- eLineItemFieldCode(e);
                                value(ief) <- eLineItemFieldValue(e);
                                eInvoiceDetail(ief) <- ed;
                            }

                            //верхние уровни
                            FOR lineItemLineItemIdentification(INTEGER lineItemIdentification) == l
                                AND upperLevelCodeMark(lineItemIdentification)
                                AND NOT eInvoiceLotDetail(upperLevelCodeMark(lineItemIdentification), ed) INLINE NEW ld = EInvoiceLotDetail DO {

                                id(ld) <- upperLevelCodeMark(lineItemIdentification);
                                eInvoiceDetail(ld) <- ed;
                            }

                            //групповые упаковки
                            FOR lineItemLineItemIdentification(INTEGER lineItemIdentification) == l AND groupPackingHeaderGroupPackingCodeMark(INTEGER groupPackingCodeMark) == lineItemIdentification
                                AND groupPackingCodeMark(groupPackingCodeMark)
                                AND NOT eInvoiceLotDetail(groupPackingCodeMark(groupPackingCodeMark), ed) INLINE NEW ld = EInvoiceLotDetail DO {

                                id(ld) <- groupPackingCodeMark(groupPackingCodeMark);
                                eInvoiceDetail(ld) <- ed;
                            }
                            //parent отдельно 
                            FOR lineItemLineItemIdentification(INTEGER lineItemIdentification) == l AND groupPackingHeaderGroupPackingCodeMark(INTEGER groupPackingCodeMark) == lineItemIdentification
                                AND groupPackingCodeMark(groupPackingCodeMark)
                                AND EInvoiceLotDetail ld == eInvoiceLotDetail(groupPackingCodeMark(groupPackingCodeMark), ed) INLINE DO {

                                parent(ld) <- eInvoiceLotDetail(upperLevelCodeMark(lineItemIdentification), ed);
                            }

                            //марки
                            FOR lineItemLineItemIdentification(INTEGER lineItemIdentification) == l AND fieldCodeMarkHeaderFieldCodeMark(INTEGER fieldCodeMark) == lineItemIdentification
                                AND fieldCodeMark(fieldCodeMark)
                                AND NOT eInvoiceLotDetail(fieldCodeMark(fieldCodeMark), ed) INLINE NEW ld = EInvoiceLotDetail DO {

                                id(ld) <- fieldCodeMark(fieldCodeMark);
                                eInvoiceDetail(ld) <- ed;
                                quantity(ld) <- 1;
                                parent(ld) <- eInvoiceLotDetail(upperLevelCodeMark(lineItemIdentification), ed);
                            }

                            overCreateEInvoiceDetail(ed, l);
                        }
                        afterImportEInvoice(ei);
                    }
                    FOR EInvoice ei = eInvoiceDeliveryNoteNumber(eDeliveryNoteNumber()) DO {
                        IF NOT eInvoiceMessage(ei, substr(upper(documentType(i)), 4, 3) + eDocumentID(), EInvoiceMessageKind.in) THEN NEW m = EInvoiceMessage {
                            number(m) <- substr(upper(documentType(i)), 4, 3) + eDocumentID();
                            eInvoice(m) <- ei;
                            kind(m) <- EInvoiceMessageKind.in;
                        }
                        FOR EInvoiceMessage m == eInvoiceMessage(ei, substr(upper(documentType(i)), 4, 3) + eDocumentID(), EInvoiceMessageKind.in) DO {
                            dateTime(m) <- eDateTime();
                            code(m) <- eFunctionCode();
                            type(m) <- getEInvoiceMessageType(upper(documentType(i)));
                            XMLPath(m) <- archiveDir + '/received/' + toChar(currentDate(), 'yyyyMMdd') + '/' + id(i);
                        }
                    }
                    APPLY NESTED LOCAL;
                    IF canceled() THEN {
                        logToFile('edi', provider + ' (' + login + ') Import EInvoice ' + id(i) + ' failed: ' + applyMessage());
                        eInvoicesFailed() <- eInvoicesFailed() + 1;
                    } ELSE {
                        IF NOT disableConfirmation THEN {
                            LOCAL cxml = XMLFILE();
                            EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO cxml;
                            sendRequestEDI(url, cxml());
                            logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request sent');
                            importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                            IF requestError() THEN {
                                logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                                MESSAGE provider + ' (' + login + ') Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                            } ELSE {
                                logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                            }
                        }
                        logToFile('edi', provider + ' (' + login + ') Import EInvoice ' + id(i) + ' succeeded');
                        eInvoicesSucceeded() <- eInvoicesSucceeded() + 1;
                    }
                }
            } ELSE {
                logToFile('edi', provider + ' (' + login + ') Import EInvoice ' + id(i) + ' skipped: ' + skipInvoice());
            }
        } CATCH {
            logToFile('edi', CONCAT '\n', provider + ' (' + login + ') Parse EInvoice ' + id(i) + ' error:', messageCaughtException(), javaStackTraceCaughtException() IF logStackForException(), lsfStackTraceCaughtException());
            MESSAGE 'Ошибка при импорте накладной ' + id(i) + '. Обратитесь к администратору' NOWAIT;
            eInvoicesFailed() <- eInvoicesFailed() + 1;
        }
    }
}

signAndSendBlrapnCustomerEInvoice(EInvoice ei, STRING[100] login, STRING[100] password, TEXT url, STRING[100] outputDir, STRING[100] provider, BOOLEAN interactive) {
    sendBlrapnFault() <- NULL;
    checkIsServer();
    IF isServer() THEN {
        TRY {
            IF login AND password THEN {
                IF EDSServiceCustomer(provider, ei) THEN {
                    LOCAL contentSubXML = FILE();
                    blrapnDateTime() <- currentDateTimeMillis();
                    blrapnMsgSender() <- glnCustomer(ei);
                    blrapnMsgReceiver() <- glnSupplier(ei);
                    blrapnUserID() <- userIDSupplierStock(ei);
                    blrapnDeliveryNoteId() <- deliveryNoteNumber(ei);
                    blrapnDeliveryNoteDate() <- deliveryNoteDate(ei);
                    blrapnReferenceDocumentType() <- IF isTN2(ei) THEN 'BLRDLN' ELSE 'BLRWBL';
                    blrapnReferenceDocumentId() <- IF isCancel(ei) THEN numberSupplierCancel(ei) ELSE numberSupplier(ei);
                    blrapnReferenceDocumentDate() <- IF isCancel(ei) THEN dateSupplierCancel(ei) ELSE dateSupplier(ei);
                    blrapnShipper() <- glnSupplier(ei);
                    blrapnReceiver() <- glnCustomer(ei);
                    blrapnCode() <- '2650';
                    blrapnDescription() <- NULL;
                    toMilliseconds(blrapnDateTime());
                    EXPORT exportBlrapnNew XML TO contentSubXML;
                    IF outputDir THEN {
                        TRY{ mkdir(outputDir + '/sent/invoices/' + toChar(currentDate(), 'yyyyMMdd')); }
                        WRITE contentSubXML() TO outputDir + '/sent/invoices/' + toChar(currentDate(), 'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(), 'YYYY-MM-DD-HH24-MI-SS-MS');
                    }
                    name() <- 'blrapn-' + toChar(blrapnDateTime(), 'YYYY-MM-DD-HH24-MI-SS-MS');
                    documentType() <- 'BLRAPN';
                    getSignedDocumentCustomer(provider, ei, contentSubXML(), interactive);
                    IF signError() THEN {
                        logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice error: BLRAPN ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError());
                        IF interactive THEN MESSAGE provider + ' (' + login + ') Извещение о прочтении накладной не выгружено: BLRAPN ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError() NOWAIT;
                        sendBlrapnFault() <- TRUE;
                    }
                    ELSE IF signResult() THEN {
                        LOCAL ixml = XMLFILE();
                        envelopeLogin() <- login;
                        envelopePassword() <- password;
                        envelopeFilename() <- CONCAT '', 'invoice', deliveryNoteNumber(ei);
                        envelopeDocumentDate() <- blrapnDateTime();
                        envelopeDocumentNumber() <- IF isCancel(ei) THEN numberSupplierCancel(ei) ELSE numberSupplier(ei);
                        envelopeSender() <- glnCustomer(ei);
                        envelopeReceiver() <- glnSupplier(ei);
                        envelopeDeliveryPoint() <- glnCustomerStock(ei);
                        envelopeDocumentType() <- 'BLRAPN';
                        envelopeContent() <- signResult();
                        EXPORT envelope XML TO ixml;
                        sendRequestEDI(url, ixml());
                        logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice ' + deliveryNoteNumber(ei) + ' request sent');
                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                        IF requestError() THEN {
                            logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice ' + deliveryNoteNumber(ei) + ': ' + requestError());
                            IF interactive THEN MESSAGE provider + ' (' + login + ') Извещение о прочтении накладной ' + deliveryNoteNumber(ei) + ' не выгружено: ' + requestError() NOWAIT;
                            sendBlrapnFault() <- TRUE;
                        } ELSE {
                            logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice ' + deliveryNoteNumber(ei) + ' request succeeded');
                            IF interactive THEN MESSAGE provider + ' (' + login + ') Извещение о прочтении накладной ' + deliveryNoteNumber(ei) + ' выгружено' NOWAIT;
//                            NEWSESSION NESTED LOCAL {
                                exportedBlrapnCustomer(ei) <- TRUE;
                                NEW em = EInvoiceMessage {
                                    number(em) <- STRING[35](resultMilliseconds());
                                    eInvoice(em) <- ei;
                                    dateTime(em) <- toDateTimeFormat(toChar(blrapnDateTime(), 'yyyy-MM-ddThh24:mi:ss'), 'yyyy-MM-ddThh24:mi:ss');
                                    code(em) <- blrapnCode();
                                    kind(em) <- EInvoiceMessageKind.out;
                                    type(em) <- IF isTN2(ei) THEN EInvoiceMessageType.blrapn_blrdln ELSE EInvoiceMessageType.blrapn_blrwbl;
                                    XMLPath(em) <- outputDir + '/sent/invoices/' + toChar(currentDate(), 'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(), 'YYYY-MM-DD-HH24-MI-SS-MS');
                                }
                                APPLY NESTED LOCAL;
                                IF canceled() THEN {
                                    logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice: apply canceled ' + applyMessage());
                                }
//                            }
                        }
                    }
                } ELSE {
                    logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice: не заданы параметры EDSService');
                    IF interactive THEN MESSAGE provider + ' (' + login + ') Извещение о прочтении не выгружено: не заданы параметры EDSService' NOWAIT;
                    sendBlrapnFault() <- TRUE;
                }
            } ELSE {
                logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice: не заданы имя пользователя / пароль / хост / порт');
                IF interactive THEN MESSAGE provider + ' (' + login + ') Извещение о прочтении не выгружено: не заданы имя пользователя / пароль / хост / порт' NOWAIT;
                sendBlrapnFault() <- TRUE;
            }
        } CATCH {
            logToFile('edi', CONCAT '\n', provider + ' (' + login + ') error:', messageCaughtException(), javaStackTraceCaughtException() IF logStackForException(), lsfStackTraceCaughtException());
            IF interactive THEN MESSAGE 'Извещение о прочтении не выгружено. Обратитесь к администратору' NOWAIT;
            sendBlrapnFault() <- TRUE;
        }
    } ELSE {
        logToFile('edi', provider + ' (' + login + ') error: ' + 'SendBlrapnEInvoice disabled, change serverComputer() to enable');
        IF interactive THEN MESSAGE provider + ' (' + login + ') error: ' + 'SendBlrapnEInvoice disabled, change serverComputer() to enable' NOWAIT;
        sendBlrapnFault() <- TRUE;
    }
}

disableAutoBlrapn = ABSTRACT BOOLEAN (EInvoice);
overReceiveBlrapn (EInvoiceMessage m, STRING[100] login, STRING[100] password, TEXT url, STRING[100] archiveDir, STRING[100] provider) + {
    IF code(m) == '2560' AND isSupplier(m) THEN {
        IF NOT disableAutoBlrapn() AND NOT disableAutoBlrapn(eInvoice(m)) THEN {
            signAndSendBlrapnCustomerEInvoice(eInvoice(m), login, password, url, archiveDir, provider, NULL);
            IF sendBlrapnFault() THEN disableConfirmation(m) <- TRUE;
        }
    }
    IF code(m) == '2570' AND isCustomer(m)
        //подверждение уже приходило, не трогаем больше
        AND NOT (GROUP SUM 1 IF code(EInvoiceMessage em) == '2550' AND (isCustomer(em)) AND eInvoice(em) == eInvoice(m) AND NOT kind(em) == EInvoiceMessageKind.out)
        //10 ошибок, значит есть системная проблема и автоматически не убираем признак выгрузки
        AND NOT (GROUP SUM 1 IF code(EInvoiceMessage em) == '2570' AND eInvoice(em) == eInvoice(m)) > 10 THEN {
        exportedCustomer(eInvoice(m)) <- NULL;
    }
}

overExportCustomer ABSTRACT (EInvoice);

signAndSendCustomerEInvoice (EInvoice ei, STRING[100] login, STRING[100] password, TEXT url, STRING[100] outputDir , STRING[100] provider) {
    checkIsServer();
    IF isServer() THEN {
        TRY {
            IF login AND password THEN {
                IF EDSServiceCustomer(provider,ei) THEN {
                    IF NOT isCancel(ei) THEN {
                        LOCAL error = TEXT();
                        error() <- '';
                        IF NOT length(addressCustomerStock(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Адрес пункта разгрузки (Адрес склада получателя)\'\n';
                        IF NOT length(contactCustomerStock(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не задано \'ФИО и должность лица, которое отвечает за получение груза со стороны грузополучателя\'\n';

                        IF error() == '' THEN {
                            LOCAL contentSubXML = FILE();
                            exportBlrwbrDateTime() <- currentDateTimeMillis();
                            toMilliseconds(exportBlrwbrDateTime());
                            EXPORT exportBlrwbrNew OBJECTS ei = ei XML TO contentSubXML;
                            IF outputDir THEN {
                                TRY{ mkdir(outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd')); }
                                WRITE contentSubXML() TO outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrwbr-' + toChar(exportBlrwbrDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                            }
                            name() <- 'blrwbr-' + toChar(exportBlrwbrDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                            documentType() <- 'BLRWBR';
                            getSignedDocumentCustomer(provider, ei, contentSubXML(), TRUE);
                            IF signError() THEN {
                                logToFile('edi', provider + ' (' + login + ') SendEInvoice error: BLRWBR ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError());
                                MESSAGE provider + ' (' + login + ') Накладная не выгружена: BLRWBR ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError() NOWAIT;
                            }
                            ELSE IF signResult() THEN {
                                LOCAL ixml = XMLFILE();
                                envelopeLogin() <- login;
                                envelopePassword() <- password;
                                envelopeFilename() <- CONCAT '', 'invoice', deliveryNoteNumber(ei);
                                envelopeDocumentDate() <- exportBlrwbrDateTime();
                                envelopeDocumentNumber() <- numberSupplier(ei);
                                envelopeSender() <- glnCustomer(ei);
                                envelopeReceiver() <- glnSupplier(ei);
                                envelopeDeliveryPoint() <- glnCustomerStock(ei);
                                envelopeDocumentType() <- 'BLRWBR';
                                envelopeContent() <- signResult();
                                EXPORT envelope XML TO ixml;
                                sendRequestEDI(url, ixml());
                                logToFile('edi', provider + ' (' + login + ') SendEInvoice ' + deliveryNoteNumber(ei) +' request sent');
                                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                                IF requestError() THEN {
                                    logToFile('edi', provider + ' (' + login + ') SendEInvoice ' + deliveryNoteNumber(ei) + ': ' + requestError());
                                    MESSAGE provider + ' (' + login + ') Накладная ' + deliveryNoteNumber(ei) + ' не выгружена: ' + requestError() NOWAIT;
                                } ELSE {
                                    logToFile('edi', provider + ' (' + login + ') SendEInvoice ' + deliveryNoteNumber(ei) + ' request succeeded');
                                    MESSAGE provider + ' (' + login + ') Накладная ' + deliveryNoteNumber(ei) + (IF isCancel(ei) THEN ' (отмена)' ELSE '') + ' выгружена' NOWAIT;
                                    exportedCustomer(ei) <- TRUE;
                                    toMilliseconds(exportBlrwbrDateTime());
                                    numberCustomer(ei) <- STRING[35](resultMilliseconds());
                                    dateCustomer(ei) <- exportBlrwbrDateTime();
                                    overExportCustomer(ei);
                                    NEW em = EInvoiceMessage {
                                        number(em) <- 'wbr' + STRING[35](resultMilliseconds());
                                        eInvoice(em) <- ei;
                                        dateTime(em) <- toDateTimeFormat(toChar(exportBlrwbrDateTime(),'yyyy-MM-ddThh24:mi:ss'),'yyyy-MM-ddThh24:mi:ss');
                                        code(em) <- IF eCreditNote(ei) THEN '21' ELSE '11';
                                        kind(em) <- EInvoiceMessageKind.out;
                                        type(em) <- EInvoiceMessageType.blrwbr;
                                        XMLPath(em) <- outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrwbr-' + toChar(exportBlrwbrDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                                    }
                                    APPLY NESTED LOCAL;
                                }
                            }
                        } ELSE {
                            logToFile('edi', provider + ' (' + login + ') SendEInvoice: Не все поля заполнены. ' + error());
                            MESSAGE provider + ' (' + login + ') Накладная не выгружена: Не все поля заполнены ' + error() NOWAIT;
                        }
                    } ELSE {
                        logToFile('edi', provider + ' (' + login + ') SendEInvoice ' + deliveryNoteNumber(ei) + ' request succeeded');
                        MESSAGE provider + ' (' + login + ') Накладная ' + deliveryNoteNumber(ei) + (IF isCancel(ei) THEN ' (отмена)' ELSE '') + ' выгружена' NOWAIT;
                        exportedCustomer(ei) <- TRUE;
                        overExportCustomer(ei);
                        APPLY NESTED LOCAL;
                    }
                } ELSE {
                    logToFile('edi', provider + ' (' + login + ') SendEInvoice: не заданы параметры EDSService');
                    MESSAGE provider + ' (' + login + ') Накладная не выгружена: не заданы параметры EDSService' NOWAIT;
                }
            } ELSE {
                logToFile('edi', provider + ' (' + login + ') SendEInvoice: не заданы имя пользователя / пароль / хост / порт');
                MESSAGE provider + ' (' + login + ') Накладная не выгружена: не заданы имя пользователя / пароль / хост / порт' NOWAIT;
            }
        } CATCH {
            logToFile('edi', CONCAT '\n', provider + ' (' + login + ') error:', messageCaughtException(), javaStackTraceCaughtException() IF logStackForException(), lsfStackTraceCaughtException());
            MESSAGE 'Накладная не выгружена. Обратитесь к администратору' NOWAIT;
        }
    } ELSE {
        logToFile('edi', provider + ' (' + login + ') error: ' + 'SendEInvoice disabled, change serverComputer() to enable');
        MESSAGE provider + ' (' + login + ') error: ' + 'SendEInvoice disabled, change serverComputer() to enable' NOWAIT;
    }
}

signAndSendCustomerEInvoiceTN2 (EInvoice ei, STRING[100] login, STRING[100] password, TEXT url, STRING[100] outputDir , STRING[100] provider) {
    checkIsServer();
    IF isServer() THEN {
        TRY {
            IF login AND password THEN {
                IF EDSServiceCustomer(provider,ei) THEN {
                    IF NOT isCancel(ei) THEN {
                        LOCAL error = TEXT();
                        error() <- '';
                        IF NOT length(addressCustomerStock(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Адрес пункта разгрузки (Адрес склада получателя)\'\n';
                        IF NOT length(contactCustomerStock(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не задано \'ФИО и должность лица, которое отвечает за получение груза со стороны грузополучателя\'\n';

                        IF error() == '' THEN {
                            LOCAL contentSubXML = FILE();
                            exportBlrdnrDateTime() <- currentDateTimeMillis();
                            toMilliseconds(exportBlrdnrDateTime());
                            EXPORT exportBlrdnrNew OBJECTS ei = ei XML TO contentSubXML;
                            IF outputDir THEN {
                                TRY{ mkdir(outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd')); }
                                WRITE contentSubXML() TO outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrdnr-' + toChar(exportBlrdnrDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                            }
                            name() <- 'blrdnr-' + toChar(exportBlrdnrDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                            documentType() <- 'BLRDNR';
                            getSignedDocumentCustomer(provider, ei, contentSubXML(), TRUE);
                            IF signError() THEN {
                                logToFile('edi', provider + ' (' + login + ') SendEInvoice error: BLRDNR ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError());
                                MESSAGE provider + ' (' + login + ') Накладная не выгружена: BLRDNR ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError() NOWAIT;
                            }
                            ELSE IF signResult() THEN {
                                LOCAL ixml = XMLFILE();
                                envelopeLogin() <- login;
                                envelopePassword() <- password;
                                envelopeFilename() <- CONCAT '', 'invoice', deliveryNoteNumber(ei);
                                envelopeDocumentDate() <- exportBlrdnrDateTime();
                                envelopeDocumentNumber() <- numberSupplier(ei);
                                envelopeSender() <- glnCustomer(ei);
                                envelopeReceiver() <- glnSupplier(ei);
                                envelopeDeliveryPoint() <- glnCustomerStock(ei);
                                envelopeDocumentType() <- 'BLRDNR';
                                envelopeContent() <- signResult();
                                EXPORT envelope XML TO ixml;
                                sendRequestEDI(url, ixml());
                                logToFile('edi', provider + ' (' + login + ') SendEInvoice ' + deliveryNoteNumber(ei) +' request sent');
                                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                                IF requestError() THEN {
                                    logToFile('edi', provider + ' (' + login + ') SendEInvoice ' + deliveryNoteNumber(ei) + ': ' + requestError());
                                    MESSAGE provider + ' (' + login + ') Накладная ' + deliveryNoteNumber(ei) + ' не выгружена: ' + requestError() NOWAIT;
                                } ELSE {
                                    logToFile('edi', provider + ' (' + login + ') SendEInvoice ' + deliveryNoteNumber(ei) + ' request succeeded');
                                    MESSAGE provider + ' (' + login + ') Накладная ' + deliveryNoteNumber(ei) + (IF isCancel(ei) THEN ' (отмена)' ELSE '') + ' выгружена' NOWAIT;
                                    exportedCustomer(ei) <- TRUE;
                                    toMilliseconds(exportBlrdnrDateTime());
                                    numberCustomer(ei) <- STRING[35](resultMilliseconds());
                                    dateCustomer(ei) <- exportBlrdnrDateTime();
                                    overExportCustomer(ei);
                                    NEW em = EInvoiceMessage {
                                        number(em) <- 'dnr' + STRING[35](resultMilliseconds());
                                        eInvoice(em) <- ei;
                                        dateTime(em) <- toDateTimeFormat(toChar(exportBlrdnrDateTime(),'yyyy-MM-ddThh24:mi:ss'),'yyyy-MM-ddThh24:mi:ss');
                                        code(em) <- IF eCreditNote(ei) THEN '21' ELSE '11';
                                        kind(em) <- EInvoiceMessageKind.out;
                                        type(em) <- EInvoiceMessageType.blrdnr;
                                        XMLPath(em) <- outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrdnr-' + toChar(exportBlrdnrDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                                    }
                                    APPLY NESTED LOCAL;
                                }
                            }
                        } ELSE {
                            logToFile('edi', provider + ' (' + login + ') SendEInvoice: Не все поля заполнены. ' + error());
                            MESSAGE provider + ' (' + login + ') Накладная не выгружена: Не все поля заполнены ' + error() NOWAIT;
                        }
                    } ELSE {
                        logToFile('edi', provider + ' (' + login + ') SendEInvoice ' + deliveryNoteNumber(ei) + ' request succeeded');
                        MESSAGE provider + ' (' + login + ') Накладная ' + deliveryNoteNumber(ei) + (IF isCancel(ei) THEN ' (отмена)' ELSE '') + ' выгружена' NOWAIT;
                        exportedCustomer(ei) <- TRUE;
                        overExportCustomer(ei);
                        APPLY NESTED LOCAL;
                    }
                } ELSE {
                    logToFile('edi', provider + ' (' + login + ') SendEInvoice: не заданы параметры EDSService');
                    MESSAGE provider + ' (' + login + ') Накладная не выгружена: не заданы параметры EDSService' NOWAIT;
                }
            } ELSE {
                logToFile('edi', provider + ' (' + login + ') SendEInvoice: не заданы имя пользователя / пароль / хост / порт');
                MESSAGE provider + ' (' + login + ') Накладная не выгружена: не заданы имя пользователя / пароль / хост / порт' NOWAIT;
            }
        } CATCH {
            logToFile('edi', CONCAT '\n', provider + ' (' + login + ') error:', messageCaughtException(), javaStackTraceCaughtException() IF logStackForException(), lsfStackTraceCaughtException());
            MESSAGE 'Накладная не выгружена. Обратитесь к администратору' NOWAIT;
        }
    } ELSE {
        logToFile('edi', provider + ' (' + login + ') error: ' + 'SendEInvoice disabled, change serverComputer() to enable');
        MESSAGE provider + ' (' + login + ') error: ' + 'SendEInvoice disabled, change serverComputer() to enable' NOWAIT;
    }
}

signAndSendNoticeCustomerEInvoice (EInvoice ei, STRING[1000] d, STRING[100] login, STRING[100] password, TEXT url, STRING[100] outputDir , STRING[100] provider) {
    checkIsServer();
    IF isServer() THEN {
        TRY {
            IF login AND password THEN {
                IF EDSServiceCustomer(provider,ei) THEN {
                    LOCAL contentSubXML = FILE();
                    blrapnDateTime() <- currentDateTimeMillis();
                    blrapnMsgSender() <- glnCustomer(ei);
                    blrapnMsgReceiver() <- glnSupplier(ei);
                    blrapnUserID() <- userIDSupplierStock(ei);
                    blrapnDeliveryNoteId() <- deliveryNoteNumber(ei);
                    blrapnDeliveryNoteDate() <- deliveryNoteDate(ei);
                    blrapnReferenceDocumentType() <- 'BLRWBL';
                    blrapnReferenceDocumentId() <- numberSupplier(ei);
                    blrapnReferenceDocumentDate() <- dateSupplier(ei);
                    blrapnShipper() <- glnSupplier(ei);
                    blrapnReceiver() <- glnCustomer(ei);
                    blrapnCode() <- '2750';
                    blrapnDescription() <- d;
                    toMilliseconds(blrapnDateTime());
                    EXPORT exportBlrapnNew XML TO contentSubXML;
                    IF outputDir THEN {
                        TRY{ mkdir(outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd')); }
                        WRITE contentSubXML() TO outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                    }
                    name() <- 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                    documentType() <- 'BLRAPN';
                    getSignedDocumentCustomer(provider, ei, contentSubXML(), TRUE);
                    IF signError() THEN {
                        logToFile('edi', provider + ' (' + login + ') SendNoticeEInvoice error: BLRAPN ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError());
                        MESSAGE provider + ' (' + login + ') Уведомление об изменении накладной не выгружено: BLRAPN ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError() NOWAIT;
                    }
                    ELSE IF signResult() THEN {
                        LOCAL ixml = XMLFILE();
                        envelopeLogin() <- login;
                        envelopePassword() <- password;
                        envelopeFilename() <- CONCAT '', 'invoice', deliveryNoteNumber(ei);
                        envelopeDocumentDate() <- blrapnDateTime();
                        envelopeDocumentNumber() <- numberSupplier(ei);
                        envelopeSender() <- glnCustomer(ei);
                        envelopeReceiver() <- glnSupplier(ei);
                        envelopeDeliveryPoint() <- glnCustomerStock(ei);
                        envelopeDocumentType() <- 'BLRAPN';
                        envelopeContent() <- signResult();
                        EXPORT envelope XML TO ixml;
                        sendRequestEDI(url, ixml());
                        logToFile('edi', provider + ' (' + login + ') SendNoticeEInvoice ' + deliveryNoteNumber(ei) +' request sent');
                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                        IF requestError() THEN {
                            logToFile('edi', provider + ' (' + login + ') SendNoticeEInvoice ' + deliveryNoteNumber(ei) + ': ' + requestError());
                            MESSAGE provider + ' (' + login + ') Уведомление об изменении накладной ' + deliveryNoteNumber(ei) + ' не выгружено: ' + requestError() NOWAIT;
                        } ELSE {
                            logToFile('edi', provider + ' (' + login + ') SendNoticeEInvoice ' + deliveryNoteNumber(ei) + ' request succeeded');
                            MESSAGE provider + ' (' + login + ') Уведомление об изменении накладной ' + deliveryNoteNumber(ei) + ' выгружено' NOWAIT;
                            exportedNoticeCustomer(ei) <- TRUE;
                            NEW em = EInvoiceMessage {
                                number(em) <- STRING[35](resultMilliseconds());
                                eInvoice(em) <- ei;
                                dateTime(em) <- toDateTimeFormat(toChar(blrapnDateTime(),'yyyy-MM-ddThh24:mi:ss'),'yyyy-MM-ddThh24:mi:ss');
                                code(em) <- blrapnCode();
                                kind(em) <- EInvoiceMessageKind.out;
                                type(em) <- EInvoiceMessageType.blrapn_blrwbl;
                                description(em) <- blrapnDescription();
                                XMLPath(em) <- outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                            }
                            afterSuccessfullySignAndSendNoticeCustomer(ei);
                            APPLY NESTED LOCAL;
                        }
                    }
                } ELSE {
                    logToFile('edi', provider + ' (' + login + ') SendNoticeEInvoice: не заданы параметры EDSService');
                    MESSAGE provider + ' (' + login + ') Уведомление об изменении не выгружено: не заданы параметры EDSService' NOWAIT;
                }
            } ELSE {
                logToFile('edi', provider + ' (' + login + ') SendNoticeEInvoice: не заданы имя пользователя / пароль / хост / порт');
                MESSAGE provider + ' (' + login + ') Уведомление об изменении не выгружено: не заданы имя пользователя / пароль / хост / порт' NOWAIT;
            }
        } CATCH {
            logToFile('edi', CONCAT '\n', provider + ' (' + login + ') error:', messageCaughtException(), javaStackTraceCaughtException() IF logStackForException(), lsfStackTraceCaughtException());
            MESSAGE 'Уведомление об изменении не выгружено. Обратитесь к администратору' NOWAIT;
        }
    } ELSE {
        logToFile('edi', provider + ' (' + login + ') error: ' + 'SendNoticeEInvoice disabled, change serverComputer() to enable');
        MESSAGE provider + ' (' + login + ') error: ' + 'SendNoticeEInvoice disabled, change serverComputer() to enable' NOWAIT;
    }
}

signAndSendNoticeCustomerEInvoiceTN2 (EInvoice ei, STRING[1000] d, STRING[100] login, STRING[100] password, TEXT url, STRING[100] outputDir , STRING[100] provider) {
    checkIsServer();
    IF isServer() THEN {
        TRY {
            IF login AND password THEN {
                IF EDSServiceCustomer(provider,ei) THEN {
                    LOCAL contentSubXML = FILE();
                    blrapnDateTime() <- currentDateTimeMillis();
                    blrapnMsgSender() <- glnCustomer(ei);
                    blrapnMsgReceiver() <- glnSupplier(ei);
                    blrapnUserID() <- userIDSupplierStock(ei);
                    blrapnDeliveryNoteId() <- deliveryNoteNumber(ei);
                    blrapnDeliveryNoteDate() <- deliveryNoteDate(ei);
                    blrapnReferenceDocumentType() <- 'BLRDLN';
                    blrapnReferenceDocumentId() <- numberSupplier(ei);
                    blrapnReferenceDocumentDate() <- dateSupplier(ei);
                    blrapnShipper() <- glnSupplier(ei);
                    blrapnReceiver() <- glnCustomer(ei);
                    blrapnCode() <- '2750';
                    blrapnDescription() <- d;
                    toMilliseconds(blrapnDateTime());
                    EXPORT exportBlrapnNew XML TO contentSubXML;
                    IF outputDir THEN {
                        TRY{ mkdir(outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd')); }
                        WRITE contentSubXML() TO outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                    }
                    name() <- 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                    documentType() <- 'BLRAPN';
                    getSignedDocumentCustomer(provider, ei, contentSubXML(), TRUE);
                    IF signError() THEN {
                        logToFile('edi', provider + ' (' + login + ') SendNoticeEInvoice error: BLRAPN ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError());
                        MESSAGE provider + ' (' + login + ') Уведомление об изменении накладной не выгружено: BLRAPN ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError() NOWAIT;
                    }
                    ELSE IF signResult() THEN {
                        LOCAL ixml = XMLFILE();
                        envelopeLogin() <- login;
                        envelopePassword() <- password;
                        envelopeFilename() <- CONCAT '', 'invoice', deliveryNoteNumber(ei);
                        envelopeDocumentDate() <- blrapnDateTime();
                        envelopeDocumentNumber() <- numberSupplier(ei);
                        envelopeSender() <- glnCustomer(ei);
                        envelopeReceiver() <- glnSupplier(ei);
                        envelopeDeliveryPoint() <- glnCustomerStock(ei);
                        envelopeDocumentType() <- 'BLRAPN';
                        envelopeContent() <- signResult();
                        EXPORT envelope XML TO ixml;
                        sendRequestEDI(url, ixml());
                        logToFile('edi', provider + ' (' + login + ') SendNoticeEInvoice ' + deliveryNoteNumber(ei) +' request sent');
                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                        IF requestError() THEN {
                            logToFile('edi', provider + ' (' + login + ') SendNoticeEInvoice ' + deliveryNoteNumber(ei) + ': ' + requestError());
                            MESSAGE provider + ' (' + login + ') Уведомление об изменении накладной ' + deliveryNoteNumber(ei) + ' не выгружено: ' + requestError() NOWAIT;
                        } ELSE {
                            logToFile('edi', provider + ' (' + login + ') SendNoticeEInvoice ' + deliveryNoteNumber(ei) + ' request succeeded');
                            MESSAGE provider + ' (' + login + ') Уведомление об изменении накладной ' + deliveryNoteNumber(ei) + ' выгружено' NOWAIT;
                            exportedNoticeCustomer(ei) <- TRUE;
                            NEW em = EInvoiceMessage {
                                number(em) <- STRING[35](resultMilliseconds());
                                eInvoice(em) <- ei;
                                dateTime(em) <- toDateTimeFormat(toChar(blrapnDateTime(),'yyyy-MM-ddThh24:mi:ss'),'yyyy-MM-ddThh24:mi:ss');
                                code(em) <- blrapnCode();
                                kind(em) <- EInvoiceMessageKind.out;
                                type(em) <- EInvoiceMessageType.blrapn_blrdln;
                                description(em) <- blrapnDescription();
                                XMLPath(em) <- outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                            }
                            afterSuccessfullySignAndSendNoticeCustomer(ei);
                            APPLY NESTED LOCAL;
                        }
                    }
                } ELSE {
                    logToFile('edi', provider + ' (' + login + ') SendNoticeEInvoice: не заданы параметры EDSService');
                    MESSAGE provider + ' (' + login + ') Уведомление об изменении не выгружено: не заданы параметры EDSService' NOWAIT;
                }
            } ELSE {
                logToFile('edi', provider + ' (' + login + ') SendNoticeEInvoice: не заданы имя пользователя / пароль / хост / порт');
                MESSAGE provider + ' (' + login + ') Уведомление об изменении не выгружено: не заданы имя пользователя / пароль / хост / порт' NOWAIT;
            }
        } CATCH {
            logToFile('edi', CONCAT '\n', provider + ' (' + login + ') error:', messageCaughtException(), javaStackTraceCaughtException() IF logStackForException(), lsfStackTraceCaughtException());
            MESSAGE 'Уведомление об изменении не выгружено. Обратитесь к администратору' NOWAIT;
        }
    } ELSE {
        logToFile('edi', provider + ' (' + login + ') error: ' + 'SendNoticeEInvoice disabled, change serverComputer() to enable');
        MESSAGE provider + ' (' + login + ') error: ' + 'SendNoticeEInvoice disabled, change serverComputer() to enable' NOWAIT;
    }
}

//акты
signAndSendCustomerECreditNote(ECreditNote c, STRING[100] login, STRING[100] password, TEXT url, STRING[100] outputDir , STRING[100] provider) {
    checkIsServer();
    IF isServer() THEN {
        TRY {
            IF login AND password AND url THEN {
                IF EDSServiceCustomer(provider,c) THEN {
                    LOCAL error = TEXT();
                    error() <- '';
                    IF NOT length(glnSupplier(c)) > 0 THEN error() <- error() + 'ECreditNote ' + actDifNumber(c) + ': Не заполнено поле \'GLN поставщика\'\n';
                    IF NOT length(addressSupplier(c)) > 0 THEN error() <- error() + 'ECreditNote ' + actDifNumber(c) + ': Не заполнено поле \'Адрес поставщика\'\n';
                    IF NOT length(glnCustomer(c)) > 0 THEN error() <- error() + 'ECreditNote ' + actDifNumber(c) + ': Не заполнено поле \'GLN покупателя\'\n';
                    IF NOT length(addressCustomer(c)) > 0 THEN error() <- error() + 'ECreditNote ' + actDifNumber(c) + ': Не заполнено поле \'Адрес покупателя\'\n';
                    IF NOT length(glnCustomerStock(c)) > 0 THEN error() <- error() + 'ECreditNote ' + actDifNumber(c) + ': Не заполнено поле \'GLN склада покупателя\'\n';
                    IF NOT length(addressCustomerStock(c)) > 0 THEN error() <- error() + 'ECreditNote ' + actDifNumber(c) + ': Не заполнено поле \'Адрес склада покупателя\'\n';
                    IF NOT length(currency(c)) > 0 THEN error() <- error() + 'ECreditNoteDetail ' + actDifNumber(c) + ': Не заполнено поле \'3-х буквенный код валюты, в которой указаны ценовые значения\'\n';
                    FOR eCreditNote(ECreditNoteDetail d) == c DO {
                        IF NOT length(lineItemQuantityUOM(d)) > 0 THEN error() <- error() + 'ECreditNoteDetail ' + lineItemNumber(d) + ': Не заполнено поле \'Международный 3-х буквенный код единицы измерения из справочника ОКРБ 008-95 Единицы измерения и счета\'\n';
                    }

                    IF error() == '' THEN {
                        LOCAL contentSubXML = FILE();
                        exportBlradfDateTime() <- currentDateTimeMillis();
                        blradfMsgSenderID() <- glnCustomer(c);
                        blradfMsgReceiverID() <- glnSupplier(c);
                        toMilliseconds(exportBlradfDateTime());
                        EXPORT exportBlradf OBJECTS ec = c XML TO contentSubXML;
                        IF outputDir THEN {
                            TRY{ mkdir(outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd')); }
                            WRITE contentSubXML() TO outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blradf-' + toChar(exportBlradfDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                        }
                        name() <- 'blradf-' + toChar(exportBlrdnrDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                        documentType() <- 'BLRADF';
                        getSignedDocumentCustomer(provider, c, contentSubXML(), TRUE);
                        IF signError() THEN {
                            logToFile('edi', provider + ' (' + login + ') SendECreditNote ' + actDifNumber(c) + ' error: BLRADF не подписан. Ошибка: ' + signError());
                            MESSAGE provider + ' (' + login + ') Акт приемки не выгружен: BLRADF ' + actDifNumber(c) + ' не подписан. Ошибка: ' + signError() NOWAIT;
                        }
                        ELSE IF signResult() THEN {
                            LOCAL ixml = XMLFILE();
                            envelopeLogin() <- login;
                            envelopePassword() <- password;
                            envelopeFilename() <- CONCAT '', 'creditnote', STRING[14](resultMilliseconds());
                            envelopeDocumentDate() <- exportBlradfDateTime();
                            envelopeDocumentNumber() <- STRING[14](resultMilliseconds());
                            envelopeSender() <- glnCustomer(c);
                            envelopeReceiver() <- glnSupplier(c);
                            envelopeDeliveryPoint() <- glnCustomerStock(c);
                            envelopeDocumentType() <- 'BLRADF';
                            envelopeContent() <- signResult();
                            EXPORT envelope XML TO ixml;
                            sendRequestEDI(url, ixml());
                            logToFile('edi', provider + ' SendECreditNote ' + actDifNumber(c) +' request sent');
                            importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                            IF requestError() THEN {
                                logToFile('edi', provider + ' SendECreditNote ' + actDifNumber(c) + ': ' + requestError());
                                MESSAGE provider + ' Акт приемки ' + actDifNumber(c) + ' не выгружен: ' + requestError() NOWAIT;
                            } ELSE {
                                logToFile('edi', provider + ' SendECreditNote ' + actDifNumber(c) + ' request succeeded');
                                MESSAGE provider + ' Акт приемки ' + actDifNumber(c) + (IF isCancel(c) THEN ' (отмена)' ELSE '') + ' выгружена' NOWAIT;
                                exportedCustomer(c) <- TRUE;
                                IF isCancel(c) THEN {
                                    dateTimeCancel(c) <- exportBlradfDateTime();
                                    documentIdCancel(c) <- STRING[14](resultMilliseconds());
                                } ELSE {
                                    dateTime(c) <- exportBlradfDateTime();
                                    documentId(c) <- STRING[14](resultMilliseconds());
                                }
                                NEW em = ECreditNoteMessage {
                                    number(em) <- STRING[14](resultMilliseconds());
                                    eCreditNote(em) <- c;
                                    kind(em) <- EInvoiceMessageKind.out;
                                    dateTime(em) <- toDateTimeFormat(toChar(exportBlradfDateTime(),'yyyy-MM-ddThh24:mi:ss'),'yyyy-MM-ddThh24:mi:ss');
                                    code(em) <- (IF isCancel(c) THEN '1' ELSE '9');
                                    type(em) <- ECreditNoteMessageType.blradf;
                                    XMLPath(em) <- outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blradf-' + toChar(exportBlradfDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                                }
                                APPLY NESTED LOCAL;
                            }
                        }
                    } ELSE {
                        logToFile('edi', provider + ' SendECreditNote: Не все поля заполнены. ' + error());
                        MESSAGE provider + ' Акт приемки не выгружен: Не все поля заполнены ' + error() NOWAIT;
                    }

                } ELSE {
                    logToFile('edi', provider + ' SendECreditNote: не заданы параметры EDSService');
                    MESSAGE provider + ' Акт приемки не выгружен: не заданы параметры EDSService' NOWAIT;
                }
            } ELSE {
                logToFile('edi', provider + ' SendECreditNote: не заданы имя пользователя / пароль / хост / порт');
                MESSAGE provider + ' Акт приемки не выгружен: не заданы имя пользователя / пароль / хост / порт' NOWAIT;
            }
        } CATCH {
            logToFile('edi', CONCAT '\n', provider + ' error:', messageCaughtException(), javaStackTraceCaughtException() IF logStackForException(), lsfStackTraceCaughtException());
            MESSAGE 'Акт приемки не выгружен. Обратитесь к администратору' NOWAIT;
        }
    } ELSE {
        logToFile('edi', provider + ' error: ' + 'SendECreditNote disabled, change serverComputer() to enable');
        MESSAGE  provider + ' error: ' + 'SendECreditNote disabled, change serverComputer() to enable' NOWAIT;
    }
}

overReceiveMessages(INTEGER i, STRING[100] login, STRING[100] password, TEXT url, STRING[100] archiveDir, BOOLEAN disableConfirmation, STRING[100] provider) + {
    IF lower(documentType(i)) == 'blradf' THEN {
        TRY {
            IMPORT blradf XML FROM data(i);
            IF blradfMsgReceiverID() == blradfCustomerGLN() THEN {
                FOR ECreditNote ec == eCreditNoteActDifNumber(blradfActDifNumber()) DO {
                    IF NOT disableAutoBlrapn() THEN {
                        LOCAL contentSubXML = FILE();
                        blrapnDateTime() <- currentDateTimeMillis();
                        blrapnMsgSender() <- glnCustomer(ec);
                        blrapnMsgReceiver() <- glnSupplier(ec);
                        blrapnDeliveryNoteId() <- actDifNumber(ec);
                        blrapnDeliveryNoteDate() <- actDifDate(ec);
                        blrapnReferenceDocumentType() <- 'BLRADF';
                        blrapnReferenceDocumentId() <- blradfID();
                        blrapnReferenceDocumentDate() <- blradfCreationDateTime();
                        blrapnShipper() <- glnSupplier(ec);
                        blrapnReceiver() <- glnCustomer(ec);
                        blrapnCode() <- '2650';
                        blrapnDescription() <- NULL;
                        toMilliseconds(blrapnDateTime());
                        EXPORT exportBlrapnNew XML TO contentSubXML;
                        IF archiveDir THEN {
                            TRY{ mkdir(archiveDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd')); }
                            WRITE contentSubXML() TO archiveDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                        }
                        IF EDSServiceCustomer(provider, ec) THEN {
                            name() <- 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                            documentType() <- 'BLRAPN';
                            getSignedDocumentCustomer(provider, ec, contentSubXML(), NULL);
                            IF signError() THEN {
                                logToFile('edi', provider + ' (' + login + ') Import ECreditNote ' + id(i) + ' error: BLRAPN ' + actDifNumber(ec) + ' не подписан. Ошибка: ' + signError());
                            }
                            ELSE IF signResult() THEN {
                                LOCAL ixml = XMLFILE();
                                envelopeLogin() <- login;
                                envelopePassword() <- password;
                                envelopeFilename() <- CONCAT '', 'creditnote', documentId(ec);
                                envelopeDocumentDate() <- blrapnDateTime();
                                envelopeDocumentNumber() <- documentId(ec);
                                envelopeSender() <- glnCustomer(ec);
                                envelopeReceiver() <- glnSupplier(ec);
                                envelopeDeliveryPoint() <- glnCustomerStock(ec);
                                envelopeDocumentType() <- 'BLRAPN';
                                envelopeContent() <- encodedBase64();
                                EXPORT envelope XML TO ixml;
                                sendRequestEDI(url, ixml());
                                logToFile('edi', provider + ' SendECreditNote ' + actDifNumber(ec) +' request sent');
                                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                                IF requestError() THEN {
                                    logToFile('edi', provider + ' SendECreditNote ' + actDifNumber(ec) + ': ' + requestError());
                                    MESSAGE provider + ' Акт приемки ' + actDifNumber(ec) + ' не выгружен: ' + requestError() NOWAIT;
                                } ELSE {
                                    toMilliseconds(blrapnDateTime());
                                    blrapn(ec) <- STRING[14](resultMilliseconds());
                                    logToFile('edi', provider + ' SendECreditNote ' + actDifNumber(ec) + ' request succeeded');
                                    IF NOT disableConfirmation THEN {
                                        LOCAL cxml = XMLFILE();
                                        EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO cxml;
                                        sendRequestEDI(url, cxml());
                                        logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request sent');
                                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                                        IF requestError() THEN {
                                            logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                                            MESSAGE  provider + ' Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                                        } ELSE {
                                            IF archiveDir THEN {
                                                TRY{ mkdir(archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd')); }
                                                WRITE data(i) TO archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                                            }
                                            logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                                        }
                                    }
                                    NEWSESSION NESTED LOCAL {
                                        exportedBlrapnCustomer(ec) <- TRUE;
                                        NEW em = ECreditNoteMessage {
                                            number(em) <- STRING[35](resultMilliseconds());
                                            eCreditNote(em) <- ec;
                                            kind(em) <- EInvoiceMessageKind.out;
                                            dateTime(em) <- toDateTimeFormat(toChar(blrapnDateTime(), 'yyyy-MM-ddThh24:mi:ss'), 'yyyy-MM-ddThh24:mi:ss');
                                            code(em) <- blrapnCode();
                                            type(em) <- ECreditNoteMessageType.blrapn_blradf;
                                            XMLPath(em) <- archiveDir + '/sent/invoices/' + toChar(currentDate(), 'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(), 'YYYY-MM-DD-HH24-MI-SS-MS');
                                        }

                                        importedCustomer(ec) <- TRUE;

                                        IF NOT eCreditNoteMessage(ec, 'adf' + blradfID(), EInvoiceMessageKind.in) THEN NEW m = ECreditNoteMessage {
                                            number(m) <- 'adf' + blradfID();
                                            eCreditNote(m) <- ec;
                                            kind(m) <- EInvoiceMessageKind.in;
                                        }
                                        FOR ECreditNoteMessage m == eCreditNoteMessage(ec, 'adf' + blradfID(), EInvoiceMessageKind.in) DO {
                                            dateTime(m) <- blradfMsgDateTime();
                                            code(m) <- blradfFunctionCode();
                                            type(m) <- ECreditNoteMessageType.blradf;
                                            XMLPath(m) <- archiveDir + '/received/' + toChar(currentDate(), 'yyyyMMdd') + '/' + id(i);
                                        }
                                        APPLY NESTED LOCAL;
                                    }
                                }
                            }
                        } ELSE {
                            logToFile('edi', provider + ' Parse Message ' + id(i) + ' error: Alias or Password for EDSService not found');
                        }
                    } ELSE {
                        IF NOT disableConfirmation THEN {
                            LOCAL xml = XMLFILE();
                            EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO xml;
                            sendRequestEDI(url, xml());
                            logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request sent');
                            importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                            IF requestError() THEN {
                                logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                                MESSAGE provider + ' Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                            } ELSE {
                                IF archiveDir THEN {
                                    TRY{ mkdir(archiveDir + '/received/' + toChar(currentDate(), 'yyyyMMdd')); }
                                    WRITE data(i) TO archiveDir + '/received/' + toChar(currentDate(), 'yyyyMMdd') + '/' + id(i);
                                }
                                logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                            }
                        }
                        blradfCount() <- blradfCount() + 1;
                        NEWSESSION NESTED LOCAL {
                            importedCustomer(ec) <- TRUE;
                            
                            IF NOT eCreditNoteMessage(ec, 'adf' + blradfID(), EInvoiceMessageKind.in) THEN NEW m = ECreditNoteMessage {
                                number(m) <-  'adf' + blradfID();
                                eCreditNote(m) <- ec;
                                kind(m) <- EInvoiceMessageKind.in;
                            }
                            FOR ECreditNoteMessage m == eCreditNoteMessage(ec, 'adf' + blradfID(), EInvoiceMessageKind.in) DO {
                                dateTime(m) <- blradfMsgDateTime();
                                code(m) <- blradfFunctionCode();
                                type(m) <- ECreditNoteMessageType.blradf;
                                XMLPath(m) <- archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                            }
                            APPLY NESTED LOCAL;
                        }
                    }
                }

            }
        } CATCH {
            logToFile('edi', CONCAT '\n', provider + ' Parse Message ' + id(i) + ' error:', messageCaughtException(), javaStackTraceCaughtException() IF logStackForException(), lsfStackTraceCaughtException());
            MESSAGE  'Ошибка при импорте сообщения ' + id(i) +'. Обратитесь к администратору' NOWAIT;
        }
    }
}

signAndSendBlrapnCustomerECreditNote(ECreditNote ec, STRING[100] login, STRING[100] password, TEXT url, STRING[100] archiveDir , STRING[100] provider) {
    checkIsServer();
    IF isServer() THEN {
        TRY {
            IF login AND password THEN {
                IF EDSServiceCustomer(provider, ec) THEN {
                    LOCAL contentSubXML = FILE();
                    blrapnDateTime() <- currentDateTimeMillis();
                    blrapnMsgSender() <- glnCustomer(ec);
                    blrapnMsgReceiver() <- glnSupplier(ec);
                    blrapnDeliveryNoteId() <- actDifNumber(ec);
                    blrapnDeliveryNoteDate() <- actDifDate(ec);
                    blrapnReferenceDocumentType() <- 'BLRADF';
                    blrapnReferenceDocumentId() <- documentId(ec);
                    blrapnReferenceDocumentDate() <- dateTime(ec);
                    blrapnShipper() <- glnSupplier(ec);
                    blrapnReceiver() <- glnCustomer(ec);
                    blrapnCode() <- '2650';
                    blrapnDescription() <- NULL;
                    toMilliseconds(blrapnDateTime());
                    EXPORT exportBlrapnNew XML TO contentSubXML;
                    IF archiveDir THEN {
                        TRY{ mkdir(archiveDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd')); }
                        WRITE contentSubXML() TO archiveDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                    }
                    name() <- 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                    documentType() <- 'BLRAPN';
                    getSignedDocumentCustomer(provider, ec, contentSubXML(), TRUE);
                    IF signError() THEN {
                        logToFile('edi', provider + ' (' + login + ') BLRAPN ' + actDifNumber(ec) + ' не подписан. Ошибка: ' + signError());
                        MESSAGE provider + ' (' + login + ') BLRAPN ' + actDifNumber(ec) + ' не подписан. Ошибка: ' + signError() NOWAIT;
                    }
                    ELSE IF signResult() THEN {
                        LOCAL ixml = XMLFILE();
                        envelopeLogin() <- login;
                        envelopePassword() <- password;
                        envelopeFilename() <- CONCAT '', 'creditnote', documentId(ec);
                        envelopeDocumentDate() <- blrapnDateTime();
                        envelopeDocumentNumber() <- documentId(ec);
                        envelopeSender() <- glnCustomer(ec);
                        envelopeReceiver() <- glnSupplier(ec);
                        envelopeDeliveryPoint() <- glnCustomerStock(ec);
                        envelopeDocumentType() <- 'BLRAPN';
                        envelopeContent() <- encodedBase64();
                        EXPORT envelope XML TO ixml;
                        sendRequestEDI(url, ixml());
                        logToFile('edi', provider + ' SendECreditNote ' + actDifNumber(ec) +' request sent');
                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                        IF requestError() THEN {
                            logToFile('edi', provider + ' SendECreditNote ' + actDifNumber(ec) + ': ' + requestError());
                            MESSAGE provider + ' Акт приемки ' + actDifNumber(ec) + ' не выгружен: ' + requestError() NOWAIT;
                        } ELSE {
                            toMilliseconds(blrapnDateTime());
                            blrapn(ec) <- STRING[14](resultMilliseconds());
                            logToFile('edi', provider + ' SendECreditNote ' + actDifNumber(ec) + ' request succeeded');
                            NEWSESSION NESTED LOCAL {
                                exportedBlrapnCustomer(ec) <- TRUE;
                                NEW em = ECreditNoteMessage {
                                    number(em) <- STRING[35](resultMilliseconds());
                                    eCreditNote(em) <- ec;
                                    kind(em) <- EInvoiceMessageKind.out;
                                    dateTime(em) <- toDateTimeFormat(toChar(blrapnDateTime(), 'yyyy-MM-ddThh24:mi:ss'), 'yyyy-MM-ddThh24:mi:ss');
                                    code(em) <- blrapnCode();
                                    type(em) <- ECreditNoteMessageType.blrapn_blradf;
                                    XMLPath(em) <- archiveDir + '/sent/invoices/' + toChar(currentDate(), 'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(), 'YYYY-MM-DD-HH24-MI-SS-MS');
                                }
                                APPLY NESTED LOCAL;
                            }
                        }
                    }
                } ELSE {
                    logToFile('edi', provider + ' (' + login + ') SendBlrapnECreditNote: не заданы параметры EDSService');
                    MESSAGE provider + ' (' + login + ') Извещение о прочтении не выгружено: не заданы параметры EDSService' NOWAIT;
                }
            } ELSE {
                logToFile('edi', provider + ' (' + login + ') SendBlrapnECreditNote: не заданы имя пользователя / пароль / хост / порт');
                MESSAGE provider + ' (' + login + ') Извещение о прочтении не выгружено: не заданы имя пользователя / пароль / хост / порт' NOWAIT;
            }
        } CATCH {
            logToFile('edi', CONCAT '\n', provider + ' (' + login + ') error:', messageCaughtException(), javaStackTraceCaughtException() IF logStackForException(), lsfStackTraceCaughtException());
            MESSAGE 'Извещение о прочтении не выгружено. Обратитесь к администратору' NOWAIT;
        }
    } ELSE {
        logToFile('edi', provider + ' (' + login + ') error: ' + 'SendBlrapnECreditNote disabled, change serverComputer() to enable');
        MESSAGE provider + ' (' + login + ') error: ' + 'SendBlrapnECreditNote disabled, change serverComputer() to enable' NOWAIT;
    }
}

overReceiveBlrapn (ECreditNoteMessage m, STRING[100] login, STRING[100] password, TEXT url, STRING[100] archiveDir, STRING[100] provider) + {

    IF code(m) == '2750' AND ECreditNoteMessageType.blrapn_blradf THEN {
        importedNoticeCustomer(eCreditNote(m)) <- TRUE;
        numberNoticeCustomer(eCreditNote(m)) <- blrapnDocumentNumber();
        dateNoticeCustomer(eCreditNote(m)) <- blrapnDateTime();

        IF NOT disableAutoBlrapn() THEN {
            IF EDSServiceCustomer(provider, eCreditNote(m)) THEN {
                LOCAL contentSubXML = FILE();
                blrapnDateTime() <- currentDateTimeMillis();
                blrapnMsgSender() <- glnCustomer(eCreditNote(m));
                blrapnMsgReceiver() <- glnSupplier(eCreditNote(m));
                blrapnDeliveryNoteId() <- actDifNumber(eCreditNote(m));
                blrapnDeliveryNoteDate() <- actDifDate(eCreditNote(m));
                blrapnReferenceDocumentType() <- 'BLRAPN';
                blrapnReferenceDocumentId() <- numberNoticeCustomer(eCreditNote(m));
                blrapnReferenceDocumentDate() <- dateNoticeCustomer(eCreditNote(m));
                blrapnShipper() <- glnSupplier(eCreditNote(m));
                blrapnReceiver() <- glnCustomer(eCreditNote(m));
                blrapnCode() <- '2651';
                blrapnDescription() <- NULL;
                toMilliseconds(blrapnDateTime());
                EXPORT exportBlrapnNew XML TO contentSubXML;
                IF archiveDir THEN {
                    TRY{ mkdir(archiveDir + '/sent/invoices/' + toChar(currentDate(), 'yyyyMMdd')); }
                    WRITE contentSubXML() TO archiveDir + '/sent/invoices/' + toChar(currentDate(), 'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(), 'YYYY-MM-DD-HH24-MI-SS-MS');
                }

                name() <- 'blrapn-' + toChar(blrapnDateTime(), 'YYYY-MM-DD-HH24-MI-SS-MS');
                documentType() <- 'BLRAPN';
                getSignedDocumentCustomer(provider, eCreditNote(m), contentSubXML(), NULL);
                IF signError() THEN {
                    logToFile('edi', provider + ' (' + login + ') Parse Message ' + actDifNumber(eCreditNote(m)) + ' error: BLRAPN ' + actDifNumber(eCreditNote(m)) + ' не подписан. Ошибка: ' + signError());
                    disableConfirmation(m) <- TRUE;
                } ELSE IF signResult() THEN {
                    LOCAL ixml = XMLFILE();
                    envelopeLogin() <- login;
                    envelopePassword() <- password;
                    envelopeFilename() <- CONCAT '', 'blrapn', actDifNumber(eCreditNote(m));
                    envelopeDocumentDate() <- blrapnDateTime();
                    envelopeDocumentNumber() <- STRING(resultMilliseconds());
                    envelopeSender() <- glnCustomer(eCreditNote(m));
                    envelopeReceiver() <- glnSupplier(eCreditNote(m));
                    envelopeDeliveryPoint() <- glnCustomerStock(eCreditNote(m));
                    envelopeDocumentType() <- 'BLRAPN';
                    envelopeContent() <- signResult();
                    EXPORT envelope XML TO ixml;
                    sendRequestEDI(url, ixml());
                    logToFile('edi', provider + ' (' + login + ') SendBlrapnECreditNote ' + actDifNumber(eCreditNote(m)) + ' request sent');
                    importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                    IF requestError() THEN {
                        logToFile('edi', provider + ' (' + login + ') SendBlrapnECreditNote ' + actDifNumber(eCreditNote(m)) + ': ' + requestError());
                        MESSAGE provider + ' (' + login + ') Извещение о прочтении накладной ' + actDifNumber(eCreditNote(m)) + ' не выгружено: ' + requestError() NOWAIT;
                        disableConfirmation(m) <- TRUE;
                    } ELSE {
                        logToFile('edi', provider + ' (' + login + ') SendBlrapnECreditNote ' + actDifNumber(eCreditNote(m)) + ' request succeeded');
                        invoiceMessagesSucceeded() <- invoiceMessagesSucceeded() + 1;
                        NEWSESSION NESTED LOCAL {
                            exportedBlrapnCustomer(eCreditNote(m)) <- TRUE;
                            NEW em = ECreditNoteMessage {
                                number(em) <- STRING[35](resultMilliseconds());
                                eCreditNote(em) <- eCreditNote(m);
                                dateTime(em) <- toDateTimeFormat(toChar(blrapnDateTime(), 'yyyy-MM-ddThh24:mi:ss'), 'yyyy-MM-ddThh24:mi:ss');
                                code(em) <- blrapnCode();
                                kind(em) <- EInvoiceMessageKind.out;
                                type(em) <- type(m);
                                XMLPath(em) <- archiveDir + '/sent/invoices/' + toChar(currentDate(), 'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(), 'YYYY-MM-DD-HH24-MI-SS-MS');
                            }
                            APPLY NESTED LOCAL;
                        }
                    }
                }
            } ELSE {
                logToFile('edi', provider + ' (' + login + ') Parse Message ' + actDifNumber(eCreditNote(m)) + ' error: не заданы параметры EDSService');
            }
        }
    }
}