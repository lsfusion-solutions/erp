MODULE CustomerEInvoiceTopByApi;

REQUIRE CustomerEInvoice, EInvoiceTopByApi, EDS;

NAMESPACE EDI;

overImportBlrwbl ABSTRACT (INTEGER);
skipBlrwbl = DATA LOCAL NESTED STRING ();
overCreateEInvoiceBlrwbl ABSTRACT LIST (EInvoice);
overCreateEInvoiceDetailBlrwbl ABSTRACT LIST (EInvoiceDetail,INTEGER);

overReceiveMessages(INTEGER i, STRING[100] login, STRING[100] password, TEXT url, STRING[100] archiveDir, BOOLEAN disableConfirmation, BOOLEAN sendReplies, STRING[100] provider) + {
    IF lower(documentType(i)) == 'blrwbl' THEN {
        TRY {
            skipBlrwbl() <- NULL;
            overImportBlrwbl(i);
            IF NOT skipBlrwbl() THEN {
                IMPORT blrwbl XML FROM data(i);
                NEWSESSION NESTED LOCAL {
                    LOCAL isCancel = BOOLEAN();
                    isCancel() <- TRUE IF blrwblFunctionCode() == '1';
                    FOR EInvoice ei = eInvoiceDeliveryNoteNumber(blrwblDeliveryNoteNumber()) DO {
                        importedCustomer(ei) <- TRUE ;
                        IF isCancel() THEN {
                            isCancel(ei) <- TRUE ;
                            numberSupplierCancel(ei) <- blrwblDocumentNumber();
                            dateSupplierCancel(ei) <- blrwblDateTime();
                            exportedCustomer(ei) <- NULL;
                            exportedNoticeCustomer(ei) <- NULL;
                            exportedBlrapnCustomer(ei) <- NULL;
                        } ELSE {
                            numberSupplier(ei) <- blrwblDocumentNumber();
                            dateSupplier(ei) <- blrwblDateTime();
                        }
                    } ELSE NEW ei = EInvoice {
                        importedCustomer(ei) <- TRUE;
                        isTestDocument(ei) <- TRUE IF blrwblTestIndicator() == '1';
                        id(ei) <- blrwblSupplierGLN() + '/' + blrwblDeliveryNoteNumber() + (IF isCancel() THEN '_cancel' ELSE '');
                        numberSupplier(ei) <- blrwblDocumentNumber() IF NOT isCancel();
                        dateSupplier(ei) <- blrwblDateTime() IF NOT isCancel();
                        numberSupplierCancel(ei) <- blrwblDocumentNumber() IF isCancel();
                        dateSupplierCancel(ei) <- blrwblDateTime() IF isCancel();
                        deliveryNoteDate(ei) <- blrwblDeliveryNoteDate();
                        deliveryNoteNumber(ei) <- blrwblDeliveryNoteNumber();
                        contractName(ei) <- blrwblContractName();
                        contractId(ei) <- blrwblContractID();
                        contractDate(ei) <- blrwblContractDate();
                        waybillId(ei) <- blrwblWaybillID();
                        isCancel(ei) <- isCancel();
                        supplier(ei) <- legalEntityGLNeInvoice(blrwblSupplierGLN());
                        dataGLNSupplier(ei) <- blrwblSupplierGLN();
                        contactSupplier(ei) <- blrwblContactSupplier();
                        supplierStock(ei) <- stockGLNUserID(blrwblSupplierGLN(), blrwblSupplierStockGLN(), (OVERRIDE getWord(blrwblUserID(),'-',2), ''));
                        dataGLNSupplierStock(ei) <- blrwblSupplierStockGLN();
                        contactSupplierStock(ei) <- blrwblContactSupplierStock();
                        customer(ei) <- legalEntityGLN(blrwblCustomerGLN());
                        customerStock(ei) <- companyStockGLN(blrwblCustomerStockGLN());
                        freightPayer(ei) <- legalEntityGLN(blrwblFreightPayerGLN());
                        transportContact(ei) <- blrwblTransportContact();
                        deliveryContact(ei) <- blrwblDeliveryContact();
                        proxyID(ei) <- blrwblProxyID();
                        proxyDate(ei) <- blrwblProxyDate();
                        partyIssuingProxyName(ei) <- blrwblPartyIssuingProxyName();
                        quantityTrip(ei) <- blrwblQuantityTrip();
                        transportOwnerName(ei) <- blrwblTransportOwnerName();
                        transportID(ei) <- blrwblTransportID();
                        trailerID(ei) <- blrwblTrailerID();
                        sealIDReceiver(ei) <- blrwblSealIDReceiver();
                        orderID(ei) <- blrwblOrderID();
                        currency(ei) <- blrwblCurrency();
                        //isReturn(ei) <- TRUE IF (GROUP SUM 1 IF blrwblFieldCode(INTEGER e) == 'PW0013' AND blrwblFieldValue(e) == '1');
                        //replaceNumber(ei) <- STRING[70](GROUP MAX blrwblFieldValue(INTEGER e) IF blrwblFieldCode(e) == 'PW0014');
                        FOR blrwblFieldName(INTEGER e) OR blrwblFieldValue(e) DO NEW ef = ExtraField {
                            name(ef) <- blrwblFieldName(e);
                            code(ef) <- blrwblFieldCode(e);
                            value(ef) <- blrwblFieldValue(e);
                            eInvoice(ef) <- ei;
                        }
                        overCreateEInvoiceBlrwbl(ei);
                        XMLPath(ei) <- archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                        FOR blrwblLineItemID(INTEGER l) OR blrwblLineItemBuyerID(l) OR blrwblLineItemSupplierID(l) ORDER blrwblLineItemNumber(l) DO NEW ed = EInvoiceDetail {
                            eInvoice(ed) <- ei;
                            id(ed) <- id(ei) + '/' + blrwblLineItemNumber(l);
                            dataIndex(ed) <- blrwblLineItemNumber(l);
                            lineItemSign(ed) <- blrwblLineItemSign(l);
                            lineItemID(ed) <- blrwblLineItemID(l);
                            lineItemBuyerID(ed) <- blrwblLineItemBuyerID(l);
                            itemCustomCode(ed) <- blrwblItemCustomCode(l);
                            deliveryTypePrev(ed) <- blrwblDeliveryTypePrev(l);
                            deliveryNotePrev(ed) <- blrwblDeliveryNotePrev(l);
                            deliveryNoteDatePrev(ed) <- blrwblDeliveryNoteDatePrev(l);
                            deliveryNotePrevLineID(ed) <- blrwblDeliveryNotePrevLineID(l);
                            lineItemSupplierID(ed) <- blrwblLineItemSupplierID(l);
                            lineItemName(ed) <- blrwblLineItemName(l);
                            grossWeightValue(ed) <- blrwblGrossWeightValue(l);
                            quantityDespatched(ed) <- blrwblQuantityDespatched(l);
                            lineItemQuantityUOM(ed) <- blrwblLineItemQuantityUOM(l);
                            despatchUnitQuantityDespatched(ed) <- blrwblDespatchUnitQuantityDespatched(l);
                            expiryDate(ed) <- blrwblExpiryDate(l);
                            valueVAT(ed) <- blrwblValueVAT(l);
                            additionalInformation(ed) <- blrwblAdditionalInformation(l);
                            manufactureDate(ed) <- blrwblLineItemProductDate(l);
                            lineItemPrice(ed) <- blrwblLineItemPrice(l);
                            lineItemPriceSPT(ed) <- blrwblLineItemPriceSPT(l);
                            lineItemManufacturerPrice(ed) <- blrwblLineItemManufacturerPrice(l);
                            lineItemAmountWithoutCharges(ed) <- blrwblLineItemAmountWithoutCharges(l);
                            lineItemAmount(ed) <- blrwblLineItemAmount(l);
                            lineItemAmountCharges(ed) <- blrwblLineItemAmountCharges(l);
                            lineItemAmountExcise(ed) <- blrwblLineItemAmountExcise(l);
                            groupPackingCodeMark(ed, INTEGER j) <- blrwblGroupPackingCodeMark(j) WHERE blrwblLineItemLineItemIdentification(j) == l;
                            upperLevelCodeMark(ed, INTEGER j) <- blrwblUpperLevelCodeMark(j) WHERE blrwblLineItemLineItemIdentification(j) == l;
                            fieldCodeMark(ed) <- blrwblFieldCodeMark(l);
                            //lineItemExtraFields(ed) <- GROUP CONCAT (CONCAT ': ', blrwblLineItemFieldName(INTEGER f), blrwblLineItemFieldValue(f)) IF blrwblLineItemLineItemExtraField(f) == l, ', ' ORDER blrwblLineItemFieldName(f);
                            FOR blrwblLineItemFieldName(INTEGER e) AND blrwblLineItemFieldValue(e) AND blrwblLineItemLineItemExtraField(e) == l DO NEW ief = ItemExtraField {
                                name(ief) <- blrwblLineItemFieldName(e);
                                code(ief) <- blrwblLineItemFieldCode(e);
                                value(ief) <- blrwblLineItemFieldValue(e);
                                eInvoiceDetail(ief) <- ed;
                            }
                            overCreateEInvoiceDetailBlrwbl(ed,l);
                        }
                    }
                    FOR EInvoice ei = eInvoiceDeliveryNoteNumber(blrwblDeliveryNoteNumber()) DO {
                        IF NOT eInvoiceMessage(ei, 'wbl' + blrwblDocumentNumber(), EInvoiceMessageKind.in) THEN NEW m = EInvoiceMessage {
                            number(m) <- 'wbl' + blrwblDocumentNumber();
                            eInvoice(m) <- ei;
                            kind(m) <- EInvoiceMessageKind.in;
                        }
                        FOR EInvoiceMessage m == eInvoiceMessage(ei, 'wbl' + blrwblDocumentNumber(), EInvoiceMessageKind.in) DO {
                            dateTime(m) <- blrwblDateTime();
                            code(m) <- blrwblFunctionCode();
                            type(m) <- EInvoiceMessageType.blrwbl;
                            XMLPath(m) <- archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                        }
                    }
                    APPLY NESTED LOCAL;
                    IF canceled() THEN {
                        IF NOT disableConfirmation AND sendReplies THEN {
                            LOCAL contentSubXML = FILE();
                            EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = messageDocumentNumber(), code = '1450', description = applyMessage() XML TO contentSubXML;
                            fileToString(contentSubXML());
                            encodeBase64(resultString());
                            LOCAL xml = XMLFILE();
                            envelopeLogin() <- login;
                            envelopePassword() <- password;
                            envelopeDocumentDate() <- currentDateTime();
                            envelopeDocumentNumber() <- id(i);
                            envelopeDocumentType() <- 'SYSTEMMESSAGE';
                            envelopeContent() <- encodedBase64();
                            EXPORT envelope XML TO xml;
                            sendRequestEDI(url, xml());
                            logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) +' request sent');
                            importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                            IF requestError() THEN {
                                sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                                logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ': ' + requestError());
                                MESSAGE provider + ' (' + login + ') Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
                            } ELSE {
                                logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ' request succeeded');
                            }
                        }
                        logToFile('edi', provider + ' (' + login + ') Import EInvoice ' + id(i) + ' failed: ' + applyMessage());
                        eInvoicesFailed() <- eInvoicesFailed() + 1;
                    } ELSE {
                        FOR EInvoice ei == eInvoiceDeliveryNoteNumber(blrwblDeliveryNoteNumber()) DO {
                            IF NOT disableAutoBlrapn() THEN {
                                LOCAL contentSubXML = FILE();
                                blrapnDateTime() <- currentDateTimeMillis();
                                blrapnMsgSender() <- glnCustomer(ei);
                                blrapnMsgReceiver() <- glnSupplier(ei);
                                blrapnUserID() <- userIDSupplierStock(ei);
                                blrapnDeliveryNoteId() <- deliveryNoteNumber(ei);
                                blrapnDeliveryNoteDate() <- deliveryNoteDate(ei);
                                blrapnReferenceDocumentType() <- 'BLRWBL';
                                blrapnReferenceDocumentId() <- blrwblDocumentNumber();
                                blrapnReferenceDocumentDate() <- blrwblDateTime();
                                blrapnShipper() <- glnSupplier(ei);
                                blrapnReceiver() <- glnCustomer(ei);
                                blrapnCode() <- '2650';
                                blrapnDescription() <- NULL;
                                toMilliseconds(blrapnDateTime());
                                EXPORT exportBlrapn XML TO contentSubXML;
                                IF archiveDir THEN {
                                    TRY{ mkdir(archiveDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd')); }
                                    WRITE contentSubXML() TO archiveDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                                }
                                IF EDSServiceCustomer(provider,ei) THEN {
                                    name() <- 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                                    documentType() <- 'BLRAPN';
                                    getSignedDocumentCustomer(provider, ei, contentSubXML(), NULL);
                                    IF signError() THEN {
                                        logToFile('edi', provider + ' (' + login + ') Import EInvoice ' + id(i) + ' error: BLRAPN ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError());
                                    }
                                    ELSE IF signResult() THEN {
                                        LOCAL ixml = XMLFILE();
                                        envelopeLogin() <- login;
                                        envelopePassword() <- password;
                                        envelopeFilename() <- CONCAT '', 'invoice', deliveryNoteNumber(ei);
                                        envelopeDocumentDate() <- blrapnDateTime();
                                        envelopeDocumentNumber() <- numberSupplier(ei);
                                        envelopeSender() <- glnCustomer(ei);
                                        envelopeReceiver() <- glnSupplier(ei);
                                        envelopeDeliveryPoint() <- glnCustomerStock(ei);
                                        envelopeDocumentType() <- 'BLRAPN';
                                        envelopeContent() <- signResult();
                                        EXPORT envelope XML TO ixml;
                                        sendRequestEDI(url, ixml());
                                        logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice ' + deliveryNoteNumber(ei) +' request sent');
                                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                                        IF requestError() THEN {
                                            logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice ' + deliveryNoteNumber(ei) + ': ' + requestError());
                                            MESSAGE provider + ' (' + login + ') Извещение о прочтении накладной ' + deliveryNoteNumber(ei) + ' не выгружено: ' + requestError() NOWAIT;
                                        } ELSE {
                                            logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice ' + deliveryNoteNumber(ei) + ' request succeeded');
                                            IF NOT disableConfirmation THEN {
                                                LOCAL cxml = XMLFILE();
                                                EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO cxml;
                                                sendRequestEDI(url, cxml());
                                                logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request sent');
                                                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                                                IF requestError() THEN {
                                                    logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                                                    MESSAGE provider + ' (' + login + ') Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                                                } ELSE {
                                                    logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                                                }
                                            }
                                            logToFile('edi', provider + ' (' + login + ') Import EInvoice ' + id(i) + ' succeeded');
                                            eInvoicesSucceeded() <- eInvoicesSucceeded() + 1;
                                            NEWSESSION NESTED LOCAL {
                                                exportedBlrapnCustomer(ei) <- TRUE;
                                                NEW em = EInvoiceMessage {
                                                    number(em) <- STRING[35](resultMilliseconds());
                                                    eInvoice(em) <- ei;
                                                    dateTime(em) <- toDateTimeFormat(toChar(blrapnDateTime(),'yyyy-MM-ddThh24:mi:ss'),'yyyy-MM-ddThh24:mi:ss');
                                                    code(em) <- blrapnCode();
                                                    kind(em) <- EInvoiceMessageKind.out;
                                                    type(em) <- EInvoiceMessageType.blrapn_blrwbl;
                                                    XMLPath(em) <- archiveDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                                                }
                                                APPLY NESTED LOCAL;
                                            }
                                        }
                                    }
                                } ELSE {
                                    logToFile('edi', provider + ' (' + login + ') Import EInvoice ' + id(i) + ' error: не заданы параметры EDSService');
                                }
                            } ELSE {
                                IF NOT disableConfirmation THEN {
                                    LOCAL cxml = XMLFILE();
                                    EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO cxml;
                                    sendRequestEDI(url, cxml());
                                    logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request sent');
                                    importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                                    IF requestError() THEN {
                                        logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                                        MESSAGE provider + ' (' + login + ') Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                                    } ELSE {
                                        logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                                    }
                                }
                                logToFile('edi', provider + ' (' + login + ') Import EInvoice ' + id(i) + ' succeeded');
                                eInvoicesSucceeded() <- eInvoicesSucceeded() + 1;
                            }
                        }
                    }
                }
            } ELSE {
                logToFile('edi', provider + ' (' + login + ') Import EInvoice ' + id(i) + ' skipped: ' + skipBlrwbl());
            }
        } CATCH {
            IF NOT disableConfirmation AND sendReplies THEN {
                LOCAL contentSubXML = FILE();
                EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = messageDocumentNumber(), code = '1450', description = (CONCAT '\n', provider + ' (' + login + ') Parse EInvoice ' + id(i) + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException()) XML TO contentSubXML;
                fileToString(contentSubXML());
                encodeBase64(resultString());
                LOCAL xml = XMLFILE();
                envelopeLogin() <- login;
                envelopePassword() <- password;
                envelopeDocumentDate() <- currentDateTime();
                envelopeDocumentNumber() <- id(i);
                envelopeDocumentType() <- 'SYSTEMMESSAGE';
                envelopeContent() <- encodedBase64();
                EXPORT envelope XML TO xml;
                sendRequestEDI(url, xml());
                logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) +' request sent');
                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                IF requestError() THEN {
                    sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                    logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ': ' + requestError());
                    MESSAGE provider + ' (' + login + ') Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
                } ELSE {
                    logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ' request succeeded');
                }
            }
            logToFile('edi', CONCAT '\n', provider + ' (' + login + ') Parse EInvoice ' + id(i) + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE 'Ошибка при импорте накладной ' + id(i) +'. Обратитесь к администратору' NOWAIT;
            eInvoicesFailed() <- eInvoicesFailed() + 1;
        }
    }
}

overImportBlrdln ABSTRACT (INTEGER);
skipBlrdln = DATA LOCAL NESTED STRING();
overCreateEInvoiceBlrdln ABSTRACT LIST (EInvoice);
overCreateEInvoiceDetailBlrdln ABSTRACT LIST (EInvoiceDetail,INTEGER);

overReceiveMessages(INTEGER i, STRING[100] login, STRING[100] password, TEXT url, STRING[100] archiveDir, BOOLEAN disableConfirmation, BOOLEAN sendReplies, STRING[100] provider) + {
    IF lower(documentType(i)) == 'blrdln' THEN {
        TRY {
            skipBlrdln() <- NULL;
            overImportBlrdln(i);
            IF NOT skipBlrdln() THEN {
                IMPORT blrdln XML FROM data(i);
                NEWSESSION NESTED LOCAL {
                    LOCAL isCancel = BOOLEAN();
                    isCancel() <- TRUE IF blrdlnFunctionCode() == '1';
                    FOR EInvoice ei == eInvoiceDeliveryNoteNumber(blrdlnDeliveryNoteNumber()) DO {
                        importedCustomer(ei) <- TRUE;
                        IF isCancel() THEN {
                            isCancel(ei) <- TRUE;
                            numberSupplierCancel(ei) <- blrdlnDocumentNumber();
                            dateSupplierCancel(ei) <- blrdlnDateTime();
                            exportedCustomer(ei) <- NULL;
                            exportedNoticeCustomer(ei) <- NULL;
                            exportedBlrapnCustomer(ei) <- NULL;
                        } ELSE {
                            numberSupplier(ei) <- blrdlnDocumentNumber();
                            dateSupplier(ei) <- blrdlnDateTime();
                        }
                    } ELSE NEW ei = EInvoice {
                        importedCustomer(ei) <- TRUE;
                        isTestDocument(ei) <- TRUE IF blrdlnTestIndicator() == '1';
                        isTN2(ei) <- TRUE;
                        id(ei) <- blrdlnSupplierGLN() + '/' + blrdlnDeliveryNoteNumber() + (IF isCancel() THEN '_cancel' ELSE '');
                        numberSupplier(ei) <- blrdlnDocumentNumber() IF NOT isCancel();
                        dateSupplier(ei) <- blrdlnDateTime() IF NOT isCancel();
                        numberSupplierCancel(ei) <- blrdlnDocumentNumber() IF isCancel();
                        dateSupplierCancel(ei) <- blrdlnDateTime() IF isCancel();
                        deliveryNoteDate(ei) <- blrdlnDeliveryNoteDate();
                        deliveryNoteNumber(ei) <- blrdlnDeliveryNoteNumber();
                        contractName(ei) <- blrdlnContractName();
                        contractId(ei) <- blrdlnContractID();
                        contractDate(ei) <- blrdlnContractDate();
                        isCancel(ei) <- isCancel();
                        supplier(ei) <- legalEntityGLNeInvoice(blrdlnSupplierGLN());
                        dataGLNSupplier(ei) <- blrdlnSupplierGLN();
                        contactSupplier(ei) <- blrdlnContactSupplier();
                        supplierStock(ei) <- stockGLNUserID(blrdlnSupplierGLN(), blrdlnSupplierStockGLN(), (OVERRIDE getWord(blrdlnUserID(),'-',2), ''));
                        dataGLNSupplierStock(ei) <- blrdlnSupplierStockGLN();
                        contactSupplierStock(ei) <- blrdlnContactSupplierStock();
                        customer(ei) <- legalEntityGLN(blrdlnCustomerGLN());
                        customerStock(ei) <- companyStockGLN(blrdlnCustomerStockGLN());
                        deliveryContact(ei) <- blrdlnDeliveryContact();
                        proxyID(ei) <- blrdlnProxyID();
                        proxyDate(ei) <- blrdlnProxyDate();
                        partyIssuingProxyName(ei) <- blrdlnPartyIssuingProxyName();
                        orderID(ei) <- blrdlnOrderID();
                        currency(ei) <- blrdlnCurrency();
                        //isReturn(ei) <- TRUE IF (GROUP SUM 1 IF blrdlnFieldCode(INTEGER e) == 'PW0013' AND blrdlnFieldValue(e) == '1');
                        //replaceNumber(ei) <- STRING[70](GROUP MAX blrdlnFieldValue(INTEGER e) IF blrdlnFieldCode(e) == 'PW0014');
                        FOR blrdlnFieldName(INTEGER e) OR blrdlnFieldValue(e) DO NEW ef = ExtraField {
                            name(ef) <- blrdlnFieldName(e);
                            code(ef) <- blrdlnFieldCode(e);
                            value(ef) <- blrdlnFieldValue(e);
                            eInvoice(ef) <- ei;
                        }
                        overCreateEInvoiceBlrdln(ei);
                        XMLPath(ei) <- archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                        FOR blrdlnLineItemID(INTEGER l) OR blrdlnLineItemBuyerID(l) OR blrdlnLineItemSupplierID(l) ORDER blrdlnLineItemNumber(l) DO NEW ed = EInvoiceDetail {
                            eInvoice(ed) <- ei;
                            dataIndex(ed) <- blrdlnLineItemNumber(l);
                            id(ed) <- id(ei) + '/' + blrdlnLineItemNumber(l);
                            lineItemSign(ed) <- blrdlnLineItemSign(l);
                            lineItemID(ed) <- blrdlnLineItemID(l);
                            itemCustomCode(ed) <- blrdlnItemCustomCode(l);
                            lineItemBuyerID(ed) <- blrdlnLineItemBuyerID(l);
                            deliveryTypePrev(ed) <- blrdlnDeliveryTypePrev(l);
                            deliveryNotePrev(ed) <- blrdlnDeliveryNotePrev(l);
                            deliveryNoteDatePrev(ed) <- blrdlnDeliveryNoteDatePrev(l);
                            deliveryNotePrevLineID(ed) <- blrdlnDeliveryNotePrevLineID(l);
                            lineItemSupplierID(ed) <- blrdlnLineItemSupplierID(l);
                            lineItemName(ed) <- blrdlnLineItemName(l);
                            quantityDespatched(ed) <- blrdlnQuantityDespatched(l);
                            lineItemQuantityUOM(ed) <- blrdlnLineItemQuantityUOM(l);
                            expiryDate(ed) <- blrdlnExpiryDate(l);
                            valueVAT(ed) <- blrdlnValueVAT(l);
                            additionalInformation(ed) <- blrdlnAdditionalInformation(l);
                            manufactureDate(ed) <- blrdlnLineItemProductDate(l);
                            lineItemPrice(ed) <- blrdlnLineItemPrice(l);
                            lineItemPriceSPT(ed) <- blrdlnLineItemPriceSPT(l);
                            lineItemManufacturerPrice(ed) <- blrdlnLineItemManufacturerPrice(l);
                            lineItemAmountWithoutCharges(ed) <- blrdlnLineItemAmountWithoutCharges(l);
                            lineItemAmount(ed) <- blrdlnLineItemAmount(l);
                            lineItemAmountCharges(ed) <- blrdlnLineItemAmountCharges(l);
                            lineItemAmountExcise(ed) <- blrdlnLineItemAmountExcise(l);
                            groupPackingCodeMark(ed, INTEGER j) <- blrdlnGroupPackingCodeMark(j) WHERE blrdlnLineItemLineItemIdentification(j) == l;
                            upperLevelCodeMark(ed, INTEGER j) <- blrdlnUpperLevelCodeMark(j) WHERE blrdlnLineItemLineItemIdentification(j) == l;
                            fieldCodeMark(ed) <- blrdlnFieldCodeMark(l);
                            //lineItemExtraFields(ed) <- GROUP CONCAT (CONCAT ': ', blrdlnLineItemFieldName(INTEGER f), blrdlnLineItemFieldValue(f)) IF blrdlnLineItemLineItemExtraField(f) == l, ', ' ORDER blrdlnLineItemFieldName(f);
                            FOR blrdlnLineItemFieldName(INTEGER e) AND blrdlnLineItemFieldValue(e) AND blrdlnLineItemLineItemExtraField(e) == l DO NEW ief = ItemExtraField {
                                name(ief) <- blrdlnLineItemFieldName(e);
                                code(ief) <- blrdlnLineItemFieldCode(e);
                                value(ief) <- blrdlnLineItemFieldValue(e);
                                eInvoiceDetail(ief) <- ed;
                            }
                            overCreateEInvoiceDetailBlrdln(ed,l);
                        }
                    }
                    FOR EInvoice ei = eInvoiceDeliveryNoteNumber(blrdlnDeliveryNoteNumber()) DO {
                        IF NOT eInvoiceMessage(ei, 'dln' + blrdlnDocumentNumber(), EInvoiceMessageKind.in) THEN NEW m = EInvoiceMessage {
                            number(m) <- 'dln' + blrdlnDocumentNumber();
                            eInvoice(m) <- ei;
                            kind(m) <- EInvoiceMessageKind.in;
                        }
                        FOR EInvoiceMessage m == eInvoiceMessage(ei, 'dln' + blrdlnDocumentNumber(), EInvoiceMessageKind.in) DO {
                            dateTime(m) <- blrdlnDateTime();
                            code(m) <- blrdlnFunctionCode();
                            type(m) <- EInvoiceMessageType.blrdln;
                            XMLPath(m) <- archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                        }
                    }
                    APPLY NESTED LOCAL;
                    IF canceled() THEN {
                        IF NOT disableConfirmation AND sendReplies THEN {
                            LOCAL contentSubXML = FILE();
                            EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = messageDocumentNumber(), code = '1450', description = applyMessage() XML TO contentSubXML;
                            fileToString(contentSubXML());
                            encodeBase64(resultString());
                            LOCAL xml = XMLFILE();
                            envelopeLogin() <- login;
                            envelopePassword() <- password;
                            envelopeDocumentDate() <- currentDateTime();
                            envelopeDocumentNumber() <- id(i);
                            envelopeDocumentType() <- 'SYSTEMMESSAGE';
                            envelopeContent() <- encodedBase64();
                            EXPORT envelope XML TO xml;
                            sendRequestEDI(url, xml());
                            logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) +' request sent');
                            importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                            IF requestError() THEN {
                                sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                                logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ': ' + requestError());
                                MESSAGE provider + ' (' + login + ') Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
                            } ELSE {
                                logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ' request succeeded');
                            }
                        }
                        logToFile('edi', provider + ' (' + login + ') Import EInvoice ' + id(i) + ' failed: ' + applyMessage());
                        eInvoicesFailed() <- eInvoicesFailed() + 1;
                    } ELSE {
                        FOR EInvoice ei == eInvoiceDeliveryNoteNumber(blrdlnDeliveryNoteNumber()) DO {
                            IF NOT disableAutoBlrapn() THEN {
                                LOCAL contentSubXML = FILE();
                                blrapnDateTime() <- currentDateTimeMillis();
                                blrapnMsgSender() <- glnCustomer(ei);
                                blrapnMsgReceiver() <- glnSupplier(ei);
                                blrapnUserID() <- userIDSupplierStock(ei);
                                blrapnDeliveryNoteId() <- deliveryNoteNumber(ei);
                                blrapnDeliveryNoteDate() <- deliveryNoteDate(ei);
                                blrapnReferenceDocumentType() <- 'BLRDLN';
                                blrapnReferenceDocumentId() <- blrdlnDocumentNumber();
                                blrapnReferenceDocumentDate() <- blrdlnDateTime();
                                blrapnShipper() <- glnSupplier(ei);
                                blrapnReceiver() <- glnCustomer(ei);
                                blrapnCode() <- '2650';
                                blrapnDescription() <- NULL;
                                toMilliseconds(blrapnDateTime());
                                EXPORT exportBlrapn XML TO contentSubXML;
                                IF archiveDir THEN {
                                    TRY{ mkdir(archiveDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd')); }
                                    WRITE contentSubXML() TO archiveDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                                }
                                IF EDSServiceCustomer(provider,ei) THEN {
                                    name() <- 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                                    documentType() <- 'BLRAPN';
                                    getSignedDocumentCustomer(provider, ei, contentSubXML(), NULL);

                                    IF signError() THEN {
                                        logToFile('edi', provider + ' (' + login + ') Import EInvoice ' + id(i) + ' error: BLRAPN ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError());
                                    }
                                    ELSE IF signResult() THEN {
                                        LOCAL ixml = XMLFILE();
                                        envelopeLogin() <- login;
                                        envelopePassword() <- password;
                                        envelopeFilename() <- CONCAT '', 'invoice', deliveryNoteNumber(ei);
                                        envelopeDocumentDate() <- blrapnDateTime();
                                        envelopeDocumentNumber() <- numberSupplier(ei);
                                        envelopeSender() <- glnCustomer(ei);
                                        envelopeReceiver() <- glnSupplier(ei);
                                        envelopeDeliveryPoint() <- glnCustomerStock(ei);
                                        envelopeDocumentType() <- 'BLRAPN';
                                        envelopeContent() <- signResult();
                                        EXPORT envelope XML TO ixml;
                                        sendRequestEDI(url, ixml());
                                        logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice ' + deliveryNoteNumber(ei) +' request sent');
                                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                                        IF requestError() THEN {
                                            logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice ' + deliveryNoteNumber(ei) + ': ' + requestError());
                                            MESSAGE provider + ' (' + login + ') Извещение о прочтении накладной ' + deliveryNoteNumber(ei) + ' не выгружено: ' + requestError() NOWAIT;
                                        } ELSE {
                                            logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice ' + deliveryNoteNumber(ei) + ' request succeeded');
                                            IF NOT disableConfirmation THEN {
                                                LOCAL cxml = XMLFILE();
                                                EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO cxml;
                                                sendRequestEDI(url, cxml());
                                                logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request sent');
                                                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                                                IF requestError() THEN {
                                                    logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                                                    MESSAGE provider + ' (' + login + ') Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                                                } ELSE {
                                                    logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                                                }
                                            }
                                            logToFile('edi', provider + ' (' + login + ') Import EInvoice ' + id(i) + ' succeeded');
                                            eInvoicesSucceeded() <- eInvoicesSucceeded() + 1;
                                            NEWSESSION NESTED LOCAL {
                                                exportedBlrapnCustomer(ei) <- TRUE;
                                                NEW em = EInvoiceMessage {
                                                    number(em) <- STRING[35](resultMilliseconds());
                                                    eInvoice(em) <- ei;
                                                    dateTime(em) <- toDateTimeFormat(toChar(blrapnDateTime(),'yyyy-MM-ddThh24:mi:ss'),'yyyy-MM-ddThh24:mi:ss');
                                                    code(em) <- blrapnCode();
                                                    kind(em) <- EInvoiceMessageKind.out;
                                                    type(em) <- EInvoiceMessageType.blrapn_blrdln;
                                                    XMLPath(em) <- archiveDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                                                }
                                                APPLY NESTED LOCAL;
                                            }
                                        }
                                    }
                                } ELSE {
                                    logToFile('edi', provider + ' (' + login + ') Import EInvoice ' + id(i) + ' error: не заданы параметры EDSService');
                                }
                            } ELSE {
                                IF NOT disableConfirmation THEN {
                                    LOCAL cxml = XMLFILE();
                                    EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO cxml;
                                    sendRequestEDI(url, cxml());
                                    logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request sent');
                                    importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                                    IF requestError() THEN {
                                        logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                                        MESSAGE provider + ' (' + login + ') Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                                    } ELSE {
                                        logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                                    }
                                }
                                logToFile('edi', provider + ' (' + login + ') Import EInvoice ' + id(i) + ' succeeded');
                                eInvoicesSucceeded() <- eInvoicesSucceeded() + 1;
                            }
                        }
                    }
                }
            } ELSE {
                logToFile('edi', provider + ' (' + login + ') Import EInvoice ' + id(i) + ' skipped: ' + skipBlrdln());
            }
        } CATCH {
            IF NOT disableConfirmation AND sendReplies THEN {
                LOCAL contentSubXML = FILE();
                EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = messageDocumentNumber(), code = '1450', description = (CONCAT '\n', provider + ' (' + login + ') Parse EInvoice ' + id(i) + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException()) XML TO contentSubXML;
                fileToString(contentSubXML());
                encodeBase64(resultString());
                LOCAL xml = XMLFILE();
                envelopeLogin() <- login;
                envelopePassword() <- password;
                envelopeDocumentDate() <- currentDateTime();
                envelopeDocumentNumber() <- id(i);
                envelopeDocumentType() <- 'SYSTEMMESSAGE';
                envelopeContent() <- encodedBase64();
                EXPORT envelope XML TO xml;
                sendRequestEDI(url, xml());
                logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) +' request sent');
                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                IF requestError() THEN {
                    sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                    logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ': ' + requestError());
                    MESSAGE provider + ' (' + login + ') Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
                } ELSE {
                    logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ' request succeeded');
                }
            }
            logToFile('edi', CONCAT '\n', provider + ' (' + login + ') Parse EInvoice ' + id(i) + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE 'Ошибка при импорте накладной ' + id(i) +'. Обратитесь к администратору' NOWAIT;
            eInvoicesFailed() <- eInvoicesFailed() + 1;
        }
    }
}

signAndSendBlrapnCustomerEInvoice (EInvoice ei, STRING[100] login, STRING[100] password, TEXT url, STRING[100] outputDir , STRING[100] provider) {
    checkIsServer();
    IF isServer() THEN {
        TRY {
            IF login AND password THEN {
                IF EDSServiceCustomer(provider,ei) THEN {
                    LOCAL contentSubXML = FILE();
                    blrapnDateTime() <- currentDateTimeMillis();
                    blrapnMsgSender() <- glnCustomer(ei);
                    blrapnMsgReceiver() <- glnSupplier(ei);
                    blrapnUserID() <- userIDSupplierStock(ei);
                    blrapnDeliveryNoteId() <- deliveryNoteNumber(ei);
                    blrapnDeliveryNoteDate() <- deliveryNoteDate(ei);
                    blrapnReferenceDocumentType() <- 'BLRWBL';
                    blrapnReferenceDocumentId() <- IF isCancel(ei) THEN numberSupplierCancel(ei) ELSE numberSupplier(ei);
                    blrapnReferenceDocumentDate() <- IF isCancel(ei) THEN dateSupplierCancel(ei) ELSE dateSupplier(ei);
                    blrapnShipper() <- glnSupplier(ei);
                    blrapnReceiver() <- glnCustomer(ei);
                    blrapnCode() <- '2650';
                    blrapnDescription() <- NULL;
                    toMilliseconds(blrapnDateTime());
                    EXPORT exportBlrapn XML TO contentSubXML;
                    IF outputDir THEN {
                        TRY{ mkdir(outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd')); }
                        WRITE contentSubXML() TO outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                    }
                    name() <- 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                    documentType() <- 'BLRAPN';
                    getSignedDocumentCustomer(provider, ei, contentSubXML(), TRUE);
                    IF signError() THEN {
                        logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice error: BLRAPN ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError());
                        MESSAGE provider + ' (' + login + ') Извещение о прочтении накладной не выгружено: BLRAPN ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError() NOWAIT;
                    }
                    ELSE IF signResult() THEN {
                        LOCAL ixml = XMLFILE();
                        envelopeLogin() <- login;
                        envelopePassword() <- password;
                        envelopeFilename() <- CONCAT '', 'invoice', deliveryNoteNumber(ei);
                        envelopeDocumentDate() <- blrapnDateTime();
                        envelopeDocumentNumber() <- IF isCancel(ei) THEN numberSupplierCancel(ei) ELSE numberSupplier(ei);
                        envelopeSender() <- glnCustomer(ei);
                        envelopeReceiver() <- glnSupplier(ei);
                        envelopeDeliveryPoint() <- glnCustomerStock(ei);
                        envelopeDocumentType() <- 'BLRAPN';
                        envelopeContent() <- signResult();
                        EXPORT envelope XML TO ixml;
                        sendRequestEDI(url, ixml());
                        logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice ' + deliveryNoteNumber(ei) +' request sent');
                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                        IF requestError() THEN {
                            logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice ' + deliveryNoteNumber(ei) + ': ' + requestError());
                            MESSAGE provider + ' (' + login + ') Извещение о прочтении накладной ' + deliveryNoteNumber(ei) + ' не выгружено: ' + requestError() NOWAIT;
                        } ELSE {
                            logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice ' + deliveryNoteNumber(ei) + ' request succeeded');
                            MESSAGE provider + ' (' + login + ') Извещение о прочтении накладной ' + deliveryNoteNumber(ei) + ' выгружено' NOWAIT;
                            exportedBlrapnCustomer(ei) <- TRUE;
                            NEW em = EInvoiceMessage {
                                number(em) <- STRING[35](resultMilliseconds());
                                eInvoice(em) <- ei;
                                dateTime(em) <- toDateTimeFormat(toChar(blrapnDateTime(),'yyyy-MM-ddThh24:mi:ss'),'yyyy-MM-ddThh24:mi:ss');
                                code(em) <- blrapnCode();
                                kind(em) <- EInvoiceMessageKind.out;
                                type(em) <- EInvoiceMessageType.blrapn_blrwbl;
                                XMLPath(em) <- outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                            }
                            APPLY NESTED LOCAL;
                        }
                    }
                } ELSE {
                    logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice: не заданы параметры EDSService');
                    MESSAGE provider + ' (' + login + ') Извещение о прочтении не выгружено: не заданы параметры EDSService' NOWAIT;
                }
            } ELSE {
                logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice: не заданы имя пользователя / пароль / хост / порт');
                MESSAGE provider + ' (' + login + ') Извещение о прочтении не выгружено: не заданы имя пользователя / пароль / хост / порт' NOWAIT;
            }
        } CATCH {
            logToFile('edi', CONCAT '\n', provider + ' (' + login + ') error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE 'Извещение о прочтении не выгружено. Обратитесь к администратору' NOWAIT;
        }
    } ELSE {
        logToFile('edi', provider + ' (' + login + ') error: ' + 'SendBlrapnEInvoice disabled, change serverComputer() to enable');
        MESSAGE provider + ' (' + login + ') error: ' + 'SendBlrapnEInvoice disabled, change serverComputer() to enable' NOWAIT;
    }
}

signAndSendBlrapnCustomerEInvoiceTN2 (EInvoice ei, STRING[100] login, STRING[100] password, TEXT url, STRING[100] outputDir , STRING[100] provider) {
    checkIsServer();
    IF isServer() THEN {
        TRY {
            IF login AND password THEN {
                IF EDSServiceCustomer(provider,ei) THEN {
                    LOCAL contentSubXML = FILE();
                    blrapnDateTime() <- currentDateTimeMillis();
                    blrapnMsgSender() <- glnCustomer(ei);
                    blrapnMsgReceiver() <- glnSupplier(ei);
                    blrapnUserID() <- userIDSupplierStock(ei);
                    blrapnDeliveryNoteId() <- deliveryNoteNumber(ei);
                    blrapnDeliveryNoteDate() <- deliveryNoteDate(ei);
                    blrapnReferenceDocumentType() <- 'BLRDLN';
                    blrapnReferenceDocumentId() <- IF isCancel(ei) THEN numberSupplierCancel(ei) ELSE numberSupplier(ei);
                    blrapnReferenceDocumentDate() <- IF isCancel(ei) THEN dateSupplierCancel(ei) ELSE dateSupplier(ei);
                    blrapnShipper() <- glnSupplier(ei);
                    blrapnReceiver() <- glnCustomer(ei);
                    blrapnCode() <- '2650';
                    blrapnDescription() <- NULL;
                    toMilliseconds(blrapnDateTime());
                    EXPORT exportBlrapn XML TO contentSubXML;
                    IF outputDir THEN {
                        TRY{ mkdir(outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd')); }
                        WRITE contentSubXML() TO outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                    }
                    name() <- 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                    documentType() <- 'BLRAPN';
                    getSignedDocumentCustomer(provider, ei, contentSubXML(), TRUE);
                    IF signError() THEN {
                        logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice error: BLRAPN ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError());
                        MESSAGE provider + ' (' + login + ') Извещение о прочтении накладной не выгружено: BLRAPN ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError() NOWAIT;
                    }
                    ELSE IF signResult() THEN {
                        LOCAL ixml = XMLFILE();
                        envelopeLogin() <- login;
                        envelopePassword() <- password;
                        envelopeFilename() <- CONCAT '', 'invoice', deliveryNoteNumber(ei);
                        envelopeDocumentDate() <- blrapnDateTime();
                        envelopeDocumentNumber() <- IF isCancel(ei) THEN numberSupplierCancel(ei) ELSE numberSupplier(ei);
                        envelopeSender() <- glnCustomer(ei);
                        envelopeReceiver() <- glnSupplier(ei);
                        envelopeDeliveryPoint() <- glnCustomerStock(ei);
                        envelopeDocumentType() <- 'BLRAPN';
                        envelopeContent() <- signResult();
                        EXPORT envelope XML TO ixml;
                        sendRequestEDI(url, ixml());
                        logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice ' + deliveryNoteNumber(ei) +' request sent');
                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                        IF requestError() THEN {
                            logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice ' + deliveryNoteNumber(ei) + ': ' + requestError());
                            MESSAGE provider + ' (' + login + ') Извещение о прочтении накладной ' + deliveryNoteNumber(ei) + ' не выгружено: ' + requestError() NOWAIT;
                        } ELSE {
                            logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice ' + deliveryNoteNumber(ei) + ' request succeeded');
                            MESSAGE provider + ' (' + login + ') Извещение о прочтении накладной ' + deliveryNoteNumber(ei) + ' выгружено' NOWAIT;
                            exportedBlrapnCustomer(ei) <- TRUE;
                            NEW em = EInvoiceMessage {
                                number(em) <- STRING[35](resultMilliseconds());
                                eInvoice(em) <- ei;
                                dateTime(em) <- toDateTimeFormat(toChar(blrapnDateTime(),'yyyy-MM-ddThh24:mi:ss'),'yyyy-MM-ddThh24:mi:ss');
                                code(em) <- blrapnCode();
                                kind(em) <- EInvoiceMessageKind.out;
                                type(em) <- EInvoiceMessageType.blrapn_blrdln;
                                XMLPath(em) <- outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                            }
                            APPLY NESTED LOCAL;
                        }
                    }
                } ELSE {
                    logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice: не заданы параметры EDSService');
                    MESSAGE provider + ' (' + login + ') Извещение о прочтении не выгружено: не заданы параметры EDSService' NOWAIT;
                }
            } ELSE {
                logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice: не заданы имя пользователя / пароль / хост / порт');
                MESSAGE provider + ' (' + login + ') Извещение о прочтении не выгружено: не заданы имя пользователя / пароль / хост / порт' NOWAIT;
            }
        } CATCH {
            logToFile('edi', CONCAT '\n', provider + ' (' + login + ') error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE 'Извещение о прочтении не выгружено. Обратитесь к администратору' NOWAIT;
        }
    } ELSE {
        logToFile('edi', provider + ' (' + login + ') error: ' + 'SendBlrapnEInvoice disabled, change serverComputer() to enable');
        MESSAGE provider + ' (' + login + ') error: ' + 'SendBlrapnEInvoice disabled, change serverComputer() to enable' NOWAIT;
    }
}

overExportCustomer ABSTRACT (EInvoice);

signAndSendCustomerEInvoice (EInvoice ei, STRING[100] login, STRING[100] password, TEXT url, STRING[100] outputDir , STRING[100] provider) {
    checkIsServer();
    IF isServer() THEN {
        TRY {
            IF login AND password THEN {
                IF EDSServiceCustomer(provider,ei) THEN {
                    IF NOT isCancel(ei) THEN {
                        LOCAL error = TEXT();
                        error() <- '';
                        IF NOT length(addressCustomerStock(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Адрес пункта разгрузки (Адрес склада получателя)\'\n';
                        IF NOT length(contactCustomerStock(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не задано \'ФИО и должность лица, которое отвечает за получение груза со стороны грузополучателя\'\n';

                        IF error() == '' THEN {
                            LOCAL contentSubXML = FILE();
                            exportBlrwbrDateTime() <- currentDateTimeMillis();
                            toMilliseconds(exportBlrwbrDateTime());
                            EXPORT exportBlrwbr OBJECTS ei = ei XML TO contentSubXML;
                            IF outputDir THEN {
                                TRY{ mkdir(outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd')); }
                                WRITE contentSubXML() TO outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrwbr-' + toChar(exportBlrwbrDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                            }
                            name() <- 'blrwbr-' + toChar(exportBlrwbrDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                            documentType() <- 'BLRWBR';
                            getSignedDocumentCustomer(provider, ei, contentSubXML(), TRUE);
                            IF signError() THEN {
                                logToFile('edi', provider + ' (' + login + ') SendEInvoice error: BLRWBR ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError());
                                MESSAGE provider + ' (' + login + ') Накладная не выгружена: BLRWBR ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError() NOWAIT;
                            }
                            ELSE IF signResult() THEN {
                                LOCAL ixml = XMLFILE();
                                envelopeLogin() <- login;
                                envelopePassword() <- password;
                                envelopeFilename() <- CONCAT '', 'invoice', deliveryNoteNumber(ei);
                                envelopeDocumentDate() <- exportBlrwbrDateTime();
                                envelopeDocumentNumber() <- numberSupplier(ei);
                                envelopeSender() <- glnCustomer(ei);
                                envelopeReceiver() <- glnSupplier(ei);
                                envelopeDeliveryPoint() <- glnCustomerStock(ei);
                                envelopeDocumentType() <- 'BLRWBR';
                                envelopeContent() <- signResult();
                                EXPORT envelope XML TO ixml;
                                sendRequestEDI(url, ixml());
                                logToFile('edi', provider + ' (' + login + ') SendEInvoice ' + deliveryNoteNumber(ei) +' request sent');
                                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                                IF requestError() THEN {
                                    logToFile('edi', provider + ' (' + login + ') SendEInvoice ' + deliveryNoteNumber(ei) + ': ' + requestError());
                                    MESSAGE provider + ' (' + login + ') Накладная ' + deliveryNoteNumber(ei) + ' не выгружена: ' + requestError() NOWAIT;
                                } ELSE {
                                    logToFile('edi', provider + ' (' + login + ') SendEInvoice ' + deliveryNoteNumber(ei) + ' request succeeded');
                                    MESSAGE provider + ' (' + login + ') Накладная ' + deliveryNoteNumber(ei) + (IF isCancel(ei) THEN ' (отмена)' ELSE '') + ' выгружена' NOWAIT;
                                    exportedCustomer(ei) <- TRUE;
                                    toMilliseconds(exportBlrwbrDateTime());
                                    numberCustomer(ei) <- STRING[35](resultMilliseconds());
                                    dateCustomer(ei) <- exportBlrwbrDateTime();
                                    overExportCustomer(ei);
                                    NEW em = EInvoiceMessage {
                                        number(em) <- 'wbr' + STRING[35](resultMilliseconds());
                                        eInvoice(em) <- ei;
                                        dateTime(em) <- toDateTimeFormat(toChar(exportBlrwbrDateTime(),'yyyy-MM-ddThh24:mi:ss'),'yyyy-MM-ddThh24:mi:ss');
                                        code(em) <- '11';
                                        kind(em) <- EInvoiceMessageKind.out;
                                        type(em) <- EInvoiceMessageType.blrwbr;
                                        XMLPath(em) <- outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrwbr-' + toChar(exportBlrwbrDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                                    }
                                    APPLY NESTED LOCAL;
                                }
                            }
                        } ELSE {
                            logToFile('edi', provider + ' (' + login + ') SendEInvoice: Не все поля заполнены. ' + error());
                            MESSAGE provider + ' (' + login + ') Накладная не выгружена: Не все поля заполнены ' + error() NOWAIT;
                        }
                    } ELSE {
                        logToFile('edi', provider + ' (' + login + ') SendEInvoice ' + deliveryNoteNumber(ei) + ' request succeeded');
                        MESSAGE provider + ' (' + login + ') Накладная ' + deliveryNoteNumber(ei) + (IF isCancel(ei) THEN ' (отмена)' ELSE '') + ' выгружена' NOWAIT;
                        exportedCustomer(ei) <- TRUE;
                        overExportCustomer(ei);
                        APPLY NESTED LOCAL;
                    }
                } ELSE {
                    logToFile('edi', provider + ' (' + login + ') SendEInvoice: не заданы параметры EDSService');
                    MESSAGE provider + ' (' + login + ') Накладная не выгружена: не заданы параметры EDSService' NOWAIT;
                }
            } ELSE {
                logToFile('edi', provider + ' (' + login + ') SendEInvoice: не заданы имя пользователя / пароль / хост / порт');
                MESSAGE provider + ' (' + login + ') Накладная не выгружена: не заданы имя пользователя / пароль / хост / порт' NOWAIT;
            }
        } CATCH {
            logToFile('edi', CONCAT '\n', provider + ' (' + login + ') error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE 'Накладная не выгружена. Обратитесь к администратору' NOWAIT;
        }
    } ELSE {
        logToFile('edi', provider + ' (' + login + ') error: ' + 'SendEInvoice disabled, change serverComputer() to enable');
        MESSAGE provider + ' (' + login + ') error: ' + 'SendEInvoice disabled, change serverComputer() to enable' NOWAIT;
    }
}

signAndSendCustomerEInvoiceTN2 (EInvoice ei, STRING[100] login, STRING[100] password, TEXT url, STRING[100] outputDir , STRING[100] provider) {
    checkIsServer();
    IF isServer() THEN {
        TRY {
            IF login AND password THEN {
                IF EDSServiceCustomer(provider,ei) THEN {
                    IF NOT isCancel(ei) THEN {
                        LOCAL error = TEXT();
                        error() <- '';
                        IF NOT length(addressCustomerStock(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не заполнено поле \'Адрес пункта разгрузки (Адрес склада получателя)\'\n';
                        IF NOT length(contactCustomerStock(ei)) > 0 THEN error() <- error() + 'EInvoice ' + deliveryNoteNumber(ei) + ': Не задано \'ФИО и должность лица, которое отвечает за получение груза со стороны грузополучателя\'\n';

                        IF error() == '' THEN {
                            LOCAL contentSubXML = FILE();
                            exportBlrdnrDateTime() <- currentDateTimeMillis();
                            toMilliseconds(exportBlrdnrDateTime());
                            EXPORT exportBlrdnr OBJECTS ei = ei XML TO contentSubXML;
                            IF outputDir THEN {
                                TRY{ mkdir(outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd')); }
                                WRITE contentSubXML() TO outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrdnr-' + toChar(exportBlrdnrDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                            }
                            name() <- 'blrdnr-' + toChar(exportBlrdnrDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                            documentType() <- 'BLRDNR';
                            getSignedDocumentCustomer(provider, ei, contentSubXML(), TRUE);
                            IF signError() THEN {
                                logToFile('edi', provider + ' (' + login + ') SendEInvoice error: BLRDNR ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError());
                                MESSAGE provider + ' (' + login + ') Накладная не выгружена: BLRDNR ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError() NOWAIT;
                            }
                            ELSE IF signResult() THEN {
                                LOCAL ixml = XMLFILE();
                                envelopeLogin() <- login;
                                envelopePassword() <- password;
                                envelopeFilename() <- CONCAT '', 'invoice', deliveryNoteNumber(ei);
                                envelopeDocumentDate() <- exportBlrdnrDateTime();
                                envelopeDocumentNumber() <- numberSupplier(ei);
                                envelopeSender() <- glnCustomer(ei);
                                envelopeReceiver() <- glnSupplier(ei);
                                envelopeDeliveryPoint() <- glnCustomerStock(ei);
                                envelopeDocumentType() <- 'BLRDNR';
                                envelopeContent() <- signResult();
                                EXPORT envelope XML TO ixml;
                                sendRequestEDI(url, ixml());
                                logToFile('edi', provider + ' (' + login + ') SendEInvoice ' + deliveryNoteNumber(ei) +' request sent');
                                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                                IF requestError() THEN {
                                    logToFile('edi', provider + ' (' + login + ') SendEInvoice ' + deliveryNoteNumber(ei) + ': ' + requestError());
                                    MESSAGE provider + ' (' + login + ') Накладная ' + deliveryNoteNumber(ei) + ' не выгружена: ' + requestError() NOWAIT;
                                } ELSE {
                                    logToFile('edi', provider + ' (' + login + ') SendEInvoice ' + deliveryNoteNumber(ei) + ' request succeeded');
                                    MESSAGE provider + ' (' + login + ') Накладная ' + deliveryNoteNumber(ei) + (IF isCancel(ei) THEN ' (отмена)' ELSE '') + ' выгружена' NOWAIT;
                                    exportedCustomer(ei) <- TRUE;
                                    toMilliseconds(exportBlrdnrDateTime());
                                    numberCustomer(ei) <- STRING[35](resultMilliseconds());
                                    dateCustomer(ei) <- exportBlrdnrDateTime();
                                    overExportCustomer(ei);
                                    NEW em = EInvoiceMessage {
                                        number(em) <- 'dnr' + STRING[35](resultMilliseconds());
                                        eInvoice(em) <- ei;
                                        dateTime(em) <- toDateTimeFormat(toChar(exportBlrdnrDateTime(),'yyyy-MM-ddThh24:mi:ss'),'yyyy-MM-ddThh24:mi:ss');
                                        code(em) <- '11';
                                        kind(em) <- EInvoiceMessageKind.out;
                                        type(em) <- EInvoiceMessageType.blrdnr;
                                        XMLPath(em) <- outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrdnr-' + toChar(exportBlrdnrDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                                    }
                                    APPLY NESTED LOCAL;
                                }
                            }
                        } ELSE {
                            logToFile('edi', provider + ' (' + login + ') SendEInvoice: Не все поля заполнены. ' + error());
                            MESSAGE provider + ' (' + login + ') Накладная не выгружена: Не все поля заполнены ' + error() NOWAIT;
                        }
                    } ELSE {
                        logToFile('edi', provider + ' (' + login + ') SendEInvoice ' + deliveryNoteNumber(ei) + ' request succeeded');
                        MESSAGE provider + ' (' + login + ') Накладная ' + deliveryNoteNumber(ei) + (IF isCancel(ei) THEN ' (отмена)' ELSE '') + ' выгружена' NOWAIT;
                        exportedCustomer(ei) <- TRUE;
                        overExportCustomer(ei);
                        APPLY NESTED LOCAL;
                    }
                } ELSE {
                    logToFile('edi', provider + ' (' + login + ') SendEInvoice: не заданы параметры EDSService');
                    MESSAGE provider + ' (' + login + ') Накладная не выгружена: не заданы параметры EDSService' NOWAIT;
                }
            } ELSE {
                logToFile('edi', provider + ' (' + login + ') SendEInvoice: не заданы имя пользователя / пароль / хост / порт');
                MESSAGE provider + ' (' + login + ') Накладная не выгружена: не заданы имя пользователя / пароль / хост / порт' NOWAIT;
            }
        } CATCH {
            logToFile('edi', CONCAT '\n', provider + ' (' + login + ') error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE 'Накладная не выгружена. Обратитесь к администратору' NOWAIT;
        }
    } ELSE {
        logToFile('edi', provider + ' (' + login + ') error: ' + 'SendEInvoice disabled, change serverComputer() to enable');
        MESSAGE provider + ' (' + login + ') error: ' + 'SendEInvoice disabled, change serverComputer() to enable' NOWAIT;
    }
}

signAndSendNoticeCustomerEInvoice (EInvoice ei, STRING[1000] d, STRING[100] login, STRING[100] password, TEXT url, STRING[100] outputDir , STRING[100] provider) {
    checkIsServer();
    IF isServer() THEN {
        TRY {
            IF login AND password THEN {
                IF EDSServiceCustomer(provider,ei) THEN {
                    LOCAL contentSubXML = FILE();
                    blrapnDateTime() <- currentDateTimeMillis();
                    blrapnMsgSender() <- glnCustomer(ei);
                    blrapnMsgReceiver() <- glnSupplier(ei);
                    blrapnUserID() <- userIDSupplierStock(ei);
                    blrapnDeliveryNoteId() <- deliveryNoteNumber(ei);
                    blrapnDeliveryNoteDate() <- deliveryNoteDate(ei);
                    blrapnReferenceDocumentType() <- 'BLRWBL';
                    blrapnReferenceDocumentId() <- numberSupplier(ei);
                    blrapnReferenceDocumentDate() <- dateSupplier(ei);
                    blrapnShipper() <- glnSupplier(ei);
                    blrapnReceiver() <- glnCustomer(ei);
                    blrapnCode() <- '2750';
                    blrapnDescription() <- d;
                    toMilliseconds(blrapnDateTime());
                    EXPORT exportBlrapn XML TO contentSubXML;
                    IF outputDir THEN {
                        TRY{ mkdir(outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd')); }
                        WRITE contentSubXML() TO outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                    }
                    name() <- 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                    documentType() <- 'BLRAPN';
                    getSignedDocumentCustomer(provider, ei, contentSubXML(), TRUE);
                    IF signError() THEN {
                        logToFile('edi', provider + ' (' + login + ') SendNoticeEInvoice error: BLRAPN ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError());
                        MESSAGE provider + ' (' + login + ') Уведомление об изменении накладной не выгружено: BLRAPN ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError() NOWAIT;
                    }
                    ELSE IF signResult() THEN {
                        LOCAL ixml = XMLFILE();
                        envelopeLogin() <- login;
                        envelopePassword() <- password;
                        envelopeFilename() <- CONCAT '', 'invoice', deliveryNoteNumber(ei);
                        envelopeDocumentDate() <- blrapnDateTime();
                        envelopeDocumentNumber() <- numberSupplier(ei);
                        envelopeSender() <- glnCustomer(ei);
                        envelopeReceiver() <- glnSupplier(ei);
                        envelopeDeliveryPoint() <- glnCustomerStock(ei);
                        envelopeDocumentType() <- 'BLRAPN';
                        envelopeContent() <- signResult();
                        EXPORT envelope XML TO ixml;
                        sendRequestEDI(url, ixml());
                        logToFile('edi', provider + ' (' + login + ') SendNoticeEInvoice ' + deliveryNoteNumber(ei) +' request sent');
                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                        IF requestError() THEN {
                            logToFile('edi', provider + ' (' + login + ') SendNoticeEInvoice ' + deliveryNoteNumber(ei) + ': ' + requestError());
                            MESSAGE provider + ' (' + login + ') Уведомление об изменении накладной ' + deliveryNoteNumber(ei) + ' не выгружено: ' + requestError() NOWAIT;
                        } ELSE {
                            logToFile('edi', provider + ' (' + login + ') SendNoticeEInvoice ' + deliveryNoteNumber(ei) + ' request succeeded');
                            MESSAGE provider + ' (' + login + ') Уведомление об изменении накладной ' + deliveryNoteNumber(ei) + ' выгружено' NOWAIT;
                            exportedNoticeCustomer(ei) <- TRUE;
                            NEW em = EInvoiceMessage {
                                number(em) <- STRING[35](resultMilliseconds());
                                eInvoice(em) <- ei;
                                dateTime(em) <- toDateTimeFormat(toChar(blrapnDateTime(),'yyyy-MM-ddThh24:mi:ss'),'yyyy-MM-ddThh24:mi:ss');
                                code(em) <- blrapnCode();
                                kind(em) <- EInvoiceMessageKind.out;
                                type(em) <- EInvoiceMessageType.blrapn_blrwbl;
                                description(em) <- blrapnDescription();
                                XMLPath(em) <- outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                            }
                            afterSuccessfullySignAndSendNoticeCustomer(ei);
                            APPLY NESTED LOCAL;
                        }
                    }
                } ELSE {
                    logToFile('edi', provider + ' (' + login + ') SendNoticeEInvoice: не заданы параметры EDSService');
                    MESSAGE provider + ' (' + login + ') Уведомление об изменении не выгружено: не заданы параметры EDSService' NOWAIT;
                }
            } ELSE {
                logToFile('edi', provider + ' (' + login + ') SendNoticeEInvoice: не заданы имя пользователя / пароль / хост / порт');
                MESSAGE provider + ' (' + login + ') Уведомление об изменении не выгружено: не заданы имя пользователя / пароль / хост / порт' NOWAIT;
            }
        } CATCH {
            logToFile('edi', CONCAT '\n', provider + ' (' + login + ') error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE 'Уведомление об изменении не выгружено. Обратитесь к администратору' NOWAIT;
        }
    } ELSE {
        logToFile('edi', provider + ' (' + login + ') error: ' + 'SendNoticeEInvoice disabled, change serverComputer() to enable');
        MESSAGE provider + ' (' + login + ') error: ' + 'SendNoticeEInvoice disabled, change serverComputer() to enable' NOWAIT;
    }
}

signAndSendNoticeCustomerEInvoiceTN2 (EInvoice ei, STRING[1000] d, STRING[100] login, STRING[100] password, TEXT url, STRING[100] outputDir , STRING[100] provider) {
    checkIsServer();
    IF isServer() THEN {
        TRY {
            IF login AND password THEN {
                IF EDSServiceCustomer(provider,ei) THEN {
                    LOCAL contentSubXML = FILE();
                    blrapnDateTime() <- currentDateTimeMillis();
                    blrapnMsgSender() <- glnCustomer(ei);
                    blrapnMsgReceiver() <- glnSupplier(ei);
                    blrapnUserID() <- userIDSupplierStock(ei);
                    blrapnDeliveryNoteId() <- deliveryNoteNumber(ei);
                    blrapnDeliveryNoteDate() <- deliveryNoteDate(ei);
                    blrapnReferenceDocumentType() <- 'BLRDLN';
                    blrapnReferenceDocumentId() <- numberSupplier(ei);
                    blrapnReferenceDocumentDate() <- dateSupplier(ei);
                    blrapnShipper() <- glnSupplier(ei);
                    blrapnReceiver() <- glnCustomer(ei);
                    blrapnCode() <- '2750';
                    blrapnDescription() <- d;
                    toMilliseconds(blrapnDateTime());
                    EXPORT exportBlrapn XML TO contentSubXML;
                    IF outputDir THEN {
                        TRY{ mkdir(outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd')); }
                        WRITE contentSubXML() TO outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                    }
                    name() <- 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                    documentType() <- 'BLRAPN';
                    getSignedDocumentCustomer(provider, ei, contentSubXML(), TRUE);
                    IF signError() THEN {
                        logToFile('edi', provider + ' (' + login + ') SendNoticeEInvoice error: BLRAPN ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError());
                        MESSAGE provider + ' (' + login + ') Уведомление об изменении накладной не выгружено: BLRAPN ' + deliveryNoteNumber(ei) + ' не подписан. Ошибка: ' + signError() NOWAIT;
                    }
                    ELSE IF signResult() THEN {
                        LOCAL ixml = XMLFILE();
                        envelopeLogin() <- login;
                        envelopePassword() <- password;
                        envelopeFilename() <- CONCAT '', 'invoice', deliveryNoteNumber(ei);
                        envelopeDocumentDate() <- blrapnDateTime();
                        envelopeDocumentNumber() <- numberSupplier(ei);
                        envelopeSender() <- glnCustomer(ei);
                        envelopeReceiver() <- glnSupplier(ei);
                        envelopeDeliveryPoint() <- glnCustomerStock(ei);
                        envelopeDocumentType() <- 'BLRAPN';
                        envelopeContent() <- signResult();
                        EXPORT envelope XML TO ixml;
                        sendRequestEDI(url, ixml());
                        logToFile('edi', provider + ' (' + login + ') SendNoticeEInvoice ' + deliveryNoteNumber(ei) +' request sent');
                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                        IF requestError() THEN {
                            logToFile('edi', provider + ' (' + login + ') SendNoticeEInvoice ' + deliveryNoteNumber(ei) + ': ' + requestError());
                            MESSAGE provider + ' (' + login + ') Уведомление об изменении накладной ' + deliveryNoteNumber(ei) + ' не выгружено: ' + requestError() NOWAIT;
                        } ELSE {
                            logToFile('edi', provider + ' (' + login + ') SendNoticeEInvoice ' + deliveryNoteNumber(ei) + ' request succeeded');
                            MESSAGE provider + ' (' + login + ') Уведомление об изменении накладной ' + deliveryNoteNumber(ei) + ' выгружено' NOWAIT;
                            exportedNoticeCustomer(ei) <- TRUE;
                            NEW em = EInvoiceMessage {
                                number(em) <- STRING[35](resultMilliseconds());
                                eInvoice(em) <- ei;
                                dateTime(em) <- toDateTimeFormat(toChar(blrapnDateTime(),'yyyy-MM-ddThh24:mi:ss'),'yyyy-MM-ddThh24:mi:ss');
                                code(em) <- blrapnCode();
                                kind(em) <- EInvoiceMessageKind.out;
                                type(em) <- EInvoiceMessageType.blrapn_blrdln;
                                description(em) <- blrapnDescription();
                                XMLPath(em) <- outputDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                            }
                            afterSuccessfullySignAndSendNoticeCustomer(ei);
                            APPLY NESTED LOCAL;
                        }
                    }
                } ELSE {
                    logToFile('edi', provider + ' (' + login + ') SendNoticeEInvoice: не заданы параметры EDSService');
                    MESSAGE provider + ' (' + login + ') Уведомление об изменении не выгружено: не заданы параметры EDSService' NOWAIT;
                }
            } ELSE {
                logToFile('edi', provider + ' (' + login + ') SendNoticeEInvoice: не заданы имя пользователя / пароль / хост / порт');
                MESSAGE provider + ' (' + login + ') Уведомление об изменении не выгружено: не заданы имя пользователя / пароль / хост / порт' NOWAIT;
            }
        } CATCH {
            logToFile('edi', CONCAT '\n', provider + ' (' + login + ') error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE 'Уведомление об изменении не выгружено. Обратитесь к администратору' NOWAIT;
        }
    } ELSE {
        logToFile('edi', provider + ' (' + login + ') error: ' + 'SendNoticeEInvoice disabled, change serverComputer() to enable');
        MESSAGE provider + ' (' + login + ') error: ' + 'SendNoticeEInvoice disabled, change serverComputer() to enable' NOWAIT;
    }
}