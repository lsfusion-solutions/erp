MODULE EDocumentEDIEDN;

REQUIRE EDocumentEDSEDN;

NAMESPACE EDI;

GROUP meta EXTID 'Document-Meta';
pdfDocumentID = DATA LOCAL NESTED STRING[70]();
pdfDocumentNumber = DATA LOCAL NESTED STRING[50]();
pdfDocumentDate = DATA LOCAL NESTED DATE();
pdfDocumentName = DATA LOCAL NESTED STRING[50]();
pdfSenderILN = DATA LOCAL NESTED STRING[13]();
pdfReceiverILN = DATA LOCAL NESTED STRING[13]();
pdfReferenceDocumentID = DATA LOCAL NESTED STRING[70]();
pdfFileName = DATA LOCAL NESTED STRING[175]();
GROUP data EXTID 'Document-Data';
pdfData = DATA LOCAL NESTED RAWFILE();


FORM envelopePDF
    PROPERTIES IN meta pdfDocumentID() EXTID 'DocumentID',
                       pdfDocumentNumber() EXTID 'DocumentNumber',
                       pdfDocumentDate() EXTID 'DocumentDate',
                       pdfDocumentName() EXTID 'DocumentName',
                       pdfSenderILN() EXTID 'SenderILN',
                       pdfReceiverILN() EXTID 'ReceiverILN',
                       pdfReferenceDocumentID() EXTID 'ReferenceDocumentID',
                       pdfFileName() EXTID 'FileName'
    PROPERTIES IN data pdfData() EXTID 'Data'
;

overImportPdf ABSTRACT ();
skipPdf = DATA LOCAL NESTED BOOLEAN();
overCreateEDocumentPdf ABSTRACT LIST (EDocument);

overReceiveMessages(INTEGER i, STRING[100] login, STRING[100] password, TEXT url, STRING[100] archiveDir, BOOLEAN disableConfirmation, BOOLEAN receiveSupplierMessages, BOOLEAN sendReplies, STRING[100] provider) + {
    IF lower(documentType(i)) == 'pdf' THEN {
        TRY {
            IMPORT envelopePDF XML FROM data(i);
            skipPdf() <- NULL;
            overImportPdf();
            IF NOT skipPdf() AND NOT pdfReferenceDocumentID() THEN {
                NEWSESSION NESTED LOCAL {
                    FOR EDocument ed = eDocument(pdfSenderILN() + '/' + pdfDocumentID()) DO {
                        importedReceiver(ed) <- TRUE;
                        fileSender(ed) <- pdfData() IF NOT fileReceiver(ed);
                        nameFileSender(ed) <- pdfFileName() IF NOT fileReceiver(ed);
                    } ELSE NEW ed = EDocument {
                        importedReceiver(ed) <- TRUE ;
                        id(ed) <- pdfSenderILN() + '/' + pdfDocumentID();
                        documentID(ed) <- pdfDocumentID();
                        creationDateTime(ed) <- currentDateTime();
                        number(ed) <- pdfDocumentNumber();
                        date(ed) <- pdfDocumentDate();
                        type(ed) <- pdfDocumentName();
                        fileSender(ed) <- pdfData();
                        nameFileSender(ed) <- pdfFileName();
                        //route(ed) <- OVERRIDE (GROUP MAX EDocumentRoute r IF id(r) == blrdocDocumentRoute()), EDocumentRoute.route0;
                        sender(ed) <- legalEntityGLN(pdfSenderILN());
                        receiver(ed) <- legalEntityGLN(pdfReceiverILN());
                        overCreateEDocumentPdf(ed);
                        XMLPath(ed) <- archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                    }
                    APPLY NESTED LOCAL;
                    IF canceled() THEN {
                        logToFile('edi', provider + ' Import EDocument ' + id(i) + ' failed: ' + applyMessage());
                        eDocumentsFailed() <- eDocumentsFailed() + 1;
                    } ELSE {
                        FOR EDocument ed = eDocument(pdfSenderILN() + '/' + pdfDocumentID()) DO {
                            IF NOT disableConfirmation THEN {
                                LOCAL cxml = XMLFILE();
                                EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO cxml;
                                sendRequestEDI(url, cxml());
                                logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request sent');
                                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                                IF requestError() THEN {
                                    logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                                    MESSAGE  provider + ' Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                                } ELSE {
                                    logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                                }
                            }
                            logToFile('edi', provider + ' Import EDocument ' + id(i) + ' succeeded');
                            eDocumentsSucceeded() <- eDocumentsSucceeded() + 1;
                        }
                    }  
                }
            }
        } CATCH {
            logToFile('edi', CONCAT '\n', provider + ' Parse EDocument ' + id(i) + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE  'Ошибка при импорте документа ' + id(i) +'. Обратитесь к администратору' NOWAIT;
            eDocumentsFailed() <- eDocumentsFailed() + 1;
        }
    }
}

//---------- sender -----------//

//лучше использовать overImportSystemmessage + skipSystemmessage
//добавив все параметры
