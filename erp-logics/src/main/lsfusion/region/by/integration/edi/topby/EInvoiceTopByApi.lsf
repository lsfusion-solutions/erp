MODULE EInvoiceTopByApi;

REQUIRE SupplierEInvoice, CustomerEInvoice, //желательно импорт апнов тоже разбить на поставщика покупателя
        TopByApi, EInvoiceEDSTopBy;

NAMESPACE EDI;

useBase64Mark 'Кодировать марки в base64' = DATA BOOLEAN ();
confirmNotFoundInvoices 'Подтверждать ответы по которым не найдена накладная' = DATA BOOLEAN ();

overReceiveBlrapn ABSTRACT LIST (EInvoiceMessage);
overReceiveBlrapn(INTEGER i, STRING[100] login, STRING[100] password, TEXT url, STRING[100] archiveDir, BOOLEAN disableConfirmation, BOOLEAN sendReplies, STRING[100] provider) + {
    IF (lower(blrapnReferenceDocumentType()) == 'blrapn' AND DATE(deliveryNoteDateTime(eInvoiceDeliveryNoteNumber(blrapnDeliveryNoteId()))) == blrapnDeliveryNoteDate())
       OR lower(blrapnReferenceDocumentType()) == 'blrwbr' OR lower(blrapnReferenceDocumentType()) == 'blrwbl'
       OR lower(blrapnReferenceDocumentType()) == 'blrdnr' OR lower(blrapnReferenceDocumentType()) == 'blrdln' THEN {
        LOCAL eInvoice = EInvoice();
        eInvoice() <- eInvoiceDeliveryNoteNumber(blrapnDeliveryNoteId());
        IF eInvoice() THEN {
            NEWSESSION NESTED LOCAL {
                IF NOT eInvoiceMessage(eInvoice(), blrapnDocumentNumber(), EInvoiceMessageKind.in) THEN NEW m = EInvoiceMessage {
                    number(m) <- blrapnDocumentNumber();
                    eInvoice(m) <- eInvoice();
                    kind(m) <- EInvoiceMessageKind.in;
                }
                FOR EInvoiceMessage m == eInvoiceMessage(eInvoice(), blrapnDocumentNumber(), EInvoiceMessageKind.in) DO {
                    dateTime(m) <- blrapnDateTime();
                    code(m) <- blrapnCode();
                    description(m) <- OVERRIDE blrapnDescription(), description(blrapnCode());
                    type(m) <- CASE
                        WHEN lower(blrapnReferenceDocumentType()) == 'blrapn' THEN EInvoiceMessageType.blrapn_blrapn
                        WHEN lower(blrapnReferenceDocumentType()) == 'blrwbr' THEN EInvoiceMessageType.blrapn_blrwbr
                        WHEN lower(blrapnReferenceDocumentType()) == 'blrwbl' THEN EInvoiceMessageType.blrapn_blrwbl
                        WHEN lower(blrapnReferenceDocumentType()) == 'blrdnr' THEN EInvoiceMessageType.blrapn_blrdnr
                        WHEN lower(blrapnReferenceDocumentType()) == 'blrdln' THEN EInvoiceMessageType.blrapn_blrdln;
                    IF code(m) == '2570'  AND (type(m) == EInvoiceMessageType.blrapn_blrwbr OR type(m) == EInvoiceMessageType.blrapn_blrdnr)
                        //подверждение уже приходило, не трогаем больше
                        AND NOT (GROUP SUM 1 IF code(EInvoiceMessage em) == '2550' AND (type(em) == EInvoiceMessageType.blrapn_blrwbr OR type(em) == EInvoiceMessageType.blrapn_blrdnr) AND eInvoice(em) == eInvoice() AND NOT kind(em) == EInvoiceMessageKind.out)
                        //10 ошибок, значит есть системная проблема и автоматически не убираем признак выгрузки
                        AND NOT (GROUP SUM 1 IF (code(EInvoiceMessage em) == '1353' OR code(em) == '1354') AND eInvoice(em) == eInvoice()) > 10 THEN {
                        exportedCustomer(eInvoice(m)) <- NULL;
                    }
                    IF code(m) == '2750' AND (type(m) == EInvoiceMessageType.blrapn_blrwbl OR type(m) == EInvoiceMessageType.blrapn_blrdln) THEN {
                        importedNoticeSupplier(eInvoice(m)) <- TRUE;
                        numberNoticeSupplier(eInvoice(m)) <- blrapnDocumentNumber();
                        dateNoticeSupplier(eInvoice(m)) <- blrapnDateTime();
                    }
                    overReceiveBlrapn(m);
                    XMLPath(m) <- archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                    APPLY NESTED LOCAL;
                    IF canceled() THEN {
                        IF NOT disableConfirmation AND sendReplies THEN {
                            LOCAL contentSubXML = FILE();
                            EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = messageDocumentNumber(), code = '1450', description = applyMessage() XML TO contentSubXML;
                            fileToString(contentSubXML());
                            encodeBase64(resultString());
                            LOCAL xml = XMLFILE();
                            envelopeLogin() <- login;
                            envelopePassword() <- password;
                            envelopeDocumentDate() <- currentDateTime();
                            envelopeDocumentNumber() <- id(i);
                            envelopeDocumentType() <- 'SYSTEMMESSAGE';
                            envelopeContent() <- encodedBase64();
                            EXPORT envelope XML TO xml;
                            sendRequestEDI(url, xml());
                            logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) +' request sent');
                            importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                            IF requestError() THEN {
                                sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                                logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ': ' + requestError());
                                MESSAGE provider + ' (' + login + ') Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
                            } ELSE {
                                logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ' request succeeded');
                            }
                        }
                        logToFile('edi', provider + ' (' + login + ') Import EInvoiceMessage ' + id(i) + ' failed: ' + applyMessage());
                        invoiceMessagesFailed() <- invoiceMessagesFailed() + 1;
                    } ELSE {
                        IF code(m) == '2750' AND (type(m) == EInvoiceMessageType.blrapn_blrwbl OR type(m) == EInvoiceMessageType.blrapn_blrdln) THEN {
                            IF NOT disableAutoBlrapn() THEN {
                                IF EDSServiceSupplier(provider, eInvoice(m)) THEN {
                                    LOCAL contentSubXML = FILE();
                                    blrapnDateTime() <- currentDateTimeMillis();
                                    blrapnMsgSender() <- glnSupplier(eInvoice(m));
                                    blrapnMsgReceiver() <- glnCustomer(eInvoice(m));
                                    blrapnUserID() <- userIDCustomerStock(eInvoice(m));
                                    blrapnDeliveryNoteId() <- deliveryNoteNumber(eInvoice(m));
                                    blrapnDeliveryNoteDate() <- DATE(deliveryNoteDateTime(eInvoice(m)));
                                    blrapnReferenceDocumentType() <- 'BLRAPN';
                                    blrapnReferenceDocumentId() <- numberNoticeSupplier(eInvoice(m));
                                    blrapnReferenceDocumentDate() <- dateNoticeSupplier(eInvoice(m));
                                    blrapnShipper() <- glnSupplier(eInvoice(m));
                                    blrapnReceiver() <- glnCustomer(eInvoice(m));
                                    blrapnCode() <- '2651';
                                    blrapnDescription() <- NULL;
                                    toMilliseconds(blrapnDateTime());
                                    EXPORT exportBlrapn XML TO contentSubXML;
                                    IF archiveDir THEN {
                                        TRY{ mkdir(archiveDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd')); }
                                        WRITE contentSubXML() TO archiveDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                                    }
                                    
                                    name() <- 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                                    documentType() <- 'BLRAPN';
                                    getSignedDocumentSupplier(provider, eInvoice(m), contentSubXML(), NULL);
                                    IF signError() THEN {
                                        logToFile('edi', provider + ' (' + login + ') Parse Message ' + id(i) + ' error: BLRAPN ' + deliveryNoteNumber(eInvoice(m)) + ' не подписан. Ошибка: ' + signError());
                                    } ELSE IF signResult() THEN {
                                        LOCAL ixml = XMLFILE();
                                        envelopeLogin() <- login;
                                        envelopePassword() <- password;
                                        envelopeFilename() <- CONCAT '', 'invoice', deliveryNoteNumber(eInvoice(m));
                                        envelopeDocumentDate() <- blrapnDateTime();
                                        envelopeDocumentNumber() <- numberSupplier(eInvoice(m));
                                        envelopeSender() <- glnSupplier(eInvoice(m));
                                        envelopeReceiver() <- glnCustomer(eInvoice(m));
                                        envelopeDeliveryPoint() <- glnCustomerStock(eInvoice(m));
                                        envelopeDocumentType() <- 'BLRAPN';
                                        envelopeContent() <- signResult();
                                        EXPORT envelope XML TO ixml;
                                        sendRequestEDI(url, ixml());
                                        logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice ' + deliveryNoteNumber(eInvoice(m)) +' request sent');
                                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                                        IF requestError() THEN {
                                            logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice ' + deliveryNoteNumber(eInvoice(m)) + ': ' + requestError());
                                            MESSAGE provider + ' (' + login + ') Извещение о прочтении накладной ' + deliveryNoteNumber(eInvoice(m)) + ' не выгружено: ' + requestError() NOWAIT;
                                        } ELSE {
                                            logToFile('edi', provider + ' (' + login + ') SendBlrapnEInvoice ' + deliveryNoteNumber(eInvoice(m)) + ' request succeeded');
                                            IF NOT disableConfirmation THEN {
                                                LOCAL cxml = XMLFILE();
                                                EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO cxml;
                                                sendRequestEDI(url, cxml());
                                                logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request sent');
                                                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                                                IF requestError() THEN {
                                                    logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                                                    MESSAGE  provider + ' (' + login + ') Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                                                } ELSE {
                                                    logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                                                }
                                            }
                                            logToFile('edi', provider + ' (' + login + ') Import EInvoiceMessage ' + id(i) + ' succeeded');
                                            invoiceMessagesSucceeded() <- invoiceMessagesSucceeded() + 1;
                                            NEWSESSION NESTED LOCAL {
                                                exportedBlrapnSupplier(eInvoice(m)) <- TRUE;
                                                NEW em = EInvoiceMessage {
                                                    number(em) <- STRING[35](resultMilliseconds());
                                                    eInvoice(em) <- eInvoice();
                                                    dateTime(em) <- toDateTimeFormat(toChar(blrapnDateTime(),'yyyy-MM-ddThh24:mi:ss'),'yyyy-MM-ddThh24:mi:ss');
                                                    code(em) <- blrapnCode();
                                                    kind(em) <- EInvoiceMessageKind.out;
                                                    type(em) <- type(m);
                                                    XMLPath(em) <- archiveDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
                                                }
                                                APPLY NESTED LOCAL;
                                            }
                                        }
                                    }
                                } ELSE {
                                    logToFile('edi', provider + ' (' + login + ') Parse Message ' + id(i) + ' error: не заданы параметры EDSService');
                                }
                            } ELSE {
                                IF NOT disableConfirmation THEN {
                                    LOCAL cxml = XMLFILE();
                                    EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO cxml;
                                    sendRequestEDI(url, cxml());
                                    logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request sent');
                                    importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                                    IF requestError() THEN {
                                        logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                                        MESSAGE  provider + ' (' + login + ') Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                                    } ELSE {
                                        logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                                    }
                                }
                                logToFile('edi', provider + ' (' + login + ') Import EInvoiceMessage ' + id(i) + ' succeeded');
                                invoiceMessagesSucceeded() <- invoiceMessagesSucceeded() + 1;
                            }
                        } ELSE {
                            IF NOT disableConfirmation THEN {
                                LOCAL xml = XMLFILE();
                                EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO xml;
                                sendRequestEDI(url, xml());
                                logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request sent');
                                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                                IF requestError() THEN {
                                    logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                                    MESSAGE  provider + ' (' + login + ') Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                                } ELSE {
                                    logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                                }
                            }
                            logToFile('edi', provider + ' (' + login + ') Import EInvoiceMessage ' + id(i) + ' succeeded');
                            invoiceMessagesSucceeded() <- invoiceMessagesSucceeded() + 1;
                        }
                    }
                }
            }
        } ELSE {
            IF confirmNotFoundInvoices() THEN {
                IF NOT disableConfirmation THEN {
                    LOCAL xml = XMLFILE();
                    EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO xml;
                    sendRequestEDI(url, xml());
                    logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request sent');
                    importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                    IF requestError() THEN {
                        logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                        MESSAGE  provider + ' (' + login + ') Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                    } ELSE {
                        logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                    }
                    messagesConfirmed() <- messagesConfirmed() + 1;
                }
            } ELSE {
                IF NOT disableConfirmation AND sendReplies THEN {
                    LOCAL contentSubXML = FILE();
                    EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = messageDocumentNumber(), code = '1450', description = applyMessage() XML TO contentSubXML;
                    fileToString(contentSubXML());
                    encodeBase64(resultString());
                    LOCAL xml = XMLFILE();
                    envelopeLogin() <- login;
                    envelopePassword() <- password;
                    envelopeDocumentDate() <- currentDateTime();
                    envelopeDocumentNumber() <- id(i);
                    envelopeDocumentType() <- 'SYSTEMMESSAGE';
                    envelopeContent() <- encodedBase64();
                    EXPORT envelope XML TO xml;
                    //EXPORT envelopeMessage OBJECTS login = login, password = password, date = currentDateTime(), number = id(i), innerXML = encodedBase64() XML TO xml;
                    sendRequestEDI(url, xml());
                    logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) +' request sent');
                    importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                    IF requestError() THEN {
                        sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                        logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ': ' + requestError());
                        MESSAGE provider + ' (' + login + ') Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
                    } ELSE {
                        logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ' request succeeded');
                    }
                }
            }
            logToFile('edi', provider + ' (' + login + ') Import EInvoiceMessage ' + id(i) + ' failed: ' + 'EInvoice ' + (OVERRIDE blrapnDeliveryNoteId(), 'NULL') + ' not found');
            invoiceMessagesFailed() <- invoiceMessagesFailed() + 1;
        }
        RETURN;
    }
}


//вообще логика сообщений, похоже, дублирует логику apn а в случе если они приходят от сервера edi у них еще и одинаковый номер
//возможно для накладных можно отделить те которые приходят с сервера, или хотя бы не затирать данные по apn. пока дублируем добавлением в номер cимвола m
overReceiveSystemMessage ABSTRACT LIST (EInvoiceMessage);
overReceiveSystemMessage(INTEGER i, STRING[100] login, STRING[100] password, TEXT url, STRING[100] archiveDir, BOOLEAN disableConfirmation, BOOLEAN sendReplies, STRING[100] provider) + {
    IF documentType() == 'BLRWBL' OR documentType() == 'BLRWBR' OR documentType() == 'BLRDLN' OR documentType() == 'BLRDNR' THEN {
        LOCAL eInvoice = EInvoice();
        eInvoice() <- eInvoiceM(documentNumber());
        IF eInvoice() THEN {
            NEWSESSION NESTED LOCAL {
                IF NOT eInvoiceMessage(eInvoice(), 'm' + messageDocumentNumber(), EInvoiceMessageKind.in) THEN NEW m = EInvoiceMessage {
                    number(m) <- 'm' + messageDocumentNumber();
                    eInvoice(m) <- eInvoice();
                    kind(m) <- EInvoiceMessageKind.in;
                }
                FOR EInvoiceMessage m == eInvoiceMessage(eInvoice(), 'm' + messageDocumentNumber(), EInvoiceMessageKind.in) DO {
                    dateTime(m) <- messageDocumentDate();
                    code(m) <- code();
                    description(m) <- OVERRIDE description(), description(code());
                    type(m) <- CASE
                        WHEN documentType() == 'BLRWBL' THEN EInvoiceMessageType.systemmessage_blrwbl
                        WHEN documentType() == 'BLRWBR' THEN EInvoiceMessageType.systemmessage_blrwbr
                        WHEN documentType() == 'BLRDLN' THEN EInvoiceMessageType.systemmessage_blrdln
                        WHEN documentType() == 'BLRDNR' THEN EInvoiceMessageType.systemmessage_blrdnr;
                    IF code(m) >= '1350' AND (type(m) == EInvoiceMessageType.systemmessage_blrwbr OR type(m) == EInvoiceMessageType.systemmessage_blrdnr)
                        //подверждение уже приходило, не трогаем больше
                        AND NOT (GROUP SUM 1 IF code(EInvoiceMessage em) == '2550' AND (type(em) == EInvoiceMessageType.blrapn_blrwbr OR type(em) == EInvoiceMessageType.blrapn_blrdnr) AND eInvoice(em) == eInvoice() AND NOT kind(em) == EInvoiceMessageKind.out)
                        //10 ошибок, значит есть системная проблема и автоматически не убираем признак выгрузки
                        AND NOT (GROUP SUM 1 IF (code(EInvoiceMessage em) == '1353' OR code(em) == '1354') AND eInvoice(em) == eInvoice()) > 10
                    THEN {
                        exportedCustomer(eInvoice(m)) <- NULL;
                    }
                    overReceiveSystemMessage(m);
                    XMLPath(m) <- archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                    APPLY NESTED LOCAL;
                    IF canceled() THEN {
                        IF NOT disableConfirmation AND sendReplies THEN {
                            LOCAL contentSubXML = FILE();
                            EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = messageDocumentNumber(), code = '1450', description = applyMessage() XML TO contentSubXML;
                            fileToString(contentSubXML());
                            encodeBase64(resultString());
                            LOCAL xml = XMLFILE();
                            envelopeLogin() <- login;
                            envelopePassword() <- password;
                            envelopeDocumentDate() <- currentDateTime();
                            envelopeDocumentNumber() <- id(i);
                            envelopeDocumentType() <- 'SYSTEMMESSAGE';
                            envelopeContent() <- encodedBase64();
                            EXPORT envelope XML TO xml;
                            //EXPORT envelopeMessage OBJECTS login = login, password = password, date = currentDateTime(), number = id(i), innerXML = encodedBase64() XML TO xml;
                            sendRequestEDI(url, xml());
                            logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) +' request sent');
                            importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                            IF requestError() THEN {
                                sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                                logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ': ' + requestError());
                                MESSAGE provider + ' (' + login + ') Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
                            } ELSE {
                                logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ' request succeeded');
                            }
                        }
                        logToFile('edi', provider + ' (' + login + ') Import EInvoiceMessage ' + id(i) + ' failed: ' + applyMessage());
                        invoiceMessagesFailed() <- invoiceMessagesFailed() + 1;
                    } ELSE {
                        IF NOT disableConfirmation THEN {
                            LOCAL xml = XMLFILE();
                            EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO xml;
                            sendRequestEDI(url, xml());
                            logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request sent');
                            importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                            IF requestError() THEN {
                                logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                                MESSAGE  provider + ' (' + login + ') Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                            } ELSE {
                                logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                            }
                        }
                        logToFile('edi', provider + ' (' + login + ') Import EInvoiceMessage ' + id(i) + ' succeeded');
                        invoiceMessagesSucceeded() <- invoiceMessagesSucceeded() + 1;
                    }
                }
            }
        } ELSE {
            IF confirmNotFoundInvoices() THEN {
                IF NOT disableConfirmation THEN {
                    LOCAL xml = XMLFILE();
                    EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO xml;
                    sendRequestEDI(url, xml());
                    logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request sent');
                    importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                    IF requestError() THEN {
                        logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                        MESSAGE  provider + ' (' + login + ') Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                    } ELSE {
                        logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                    }
                    messagesConfirmed() <- messagesConfirmed() + 1;
                }
            } ELSE {
                IF NOT disableConfirmation AND sendReplies THEN {
                    LOCAL contentSubXML = FILE();
                    EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = messageDocumentNumber(), code = '1450', description = applyMessage() XML TO contentSubXML;
                    fileToString(contentSubXML());
                    encodeBase64(resultString());
                    LOCAL xml = XMLFILE();
                    envelopeLogin() <- login;
                    envelopePassword() <- password;
                    envelopeDocumentDate() <- currentDateTime();
                    envelopeDocumentNumber() <- id(i);
                    envelopeDocumentType() <- 'SYSTEMMESSAGE';
                    envelopeContent() <- encodedBase64();
                    EXPORT envelope XML TO xml;
                    //EXPORT envelopeMessage OBJECTS login = login, password = password, date = currentDateTime(), number = id(i), innerXML = encodedBase64() XML TO xml;
                    sendRequestEDI(url, xml());
                    logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) +' request sent');
                    importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                    IF requestError() THEN {
                        sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                        logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ': ' + requestError());
                        MESSAGE provider + ' (' + login + ') Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
                    } ELSE {
                        logToFile('edi', provider + ' (' + login + ') RecipientError ' + id(i) + ' request succeeded');
                    }
                }
            }
            logToFile('edi', provider + ' (' + login + ') Import EInvoiceMessage ' + id(i) + ' failed: ' + 'EInvoice ' + (OVERRIDE documentNumber(), 'NULL') + ' not found');
            invoiceMessagesFailed() <- invoiceMessagesFailed() + 1;
        }
        RETURN;
    }
    IF documentType() == 'BLRAPN' OR documentType() == 'SYSTEMMESSAGE' THEN {
        logToFile('edi', provider + ' (' + login + ') Parse Invoice Message ' + id(i) + ' skipped for documentType ' + documentType());
        IF NOT disableConfirmation THEN {
            LOCAL xml = XMLFILE();
            EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO xml;
            sendRequestEDI(url, xml());
            logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request sent');
            importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
            IF requestError() THEN {
                logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                MESSAGE  provider + ' (' + login + ') Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
            } ELSE {
                logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
            }
            messagesConfirmed() <- messagesConfirmed() + 1;
        }
        RETURN;
    }
}

good(EInvoiceMessage m) += WHEN (code(m) == '1250' OR code(m) == '2550' OR code(m) == '2560' OR code(m) == '2551' OR code(m) == '2571' OR code(m) == '2650') THEN TRUE ;