MODULE EInvoiceTopByApi;

REQUIRE TopByApi, EInvoiceEDS;

NAMESPACE EDI;

confirmNotFoundInvoices 'Подтверждать ответы по которым не найдена накладная' = DATA BOOLEAN ();

EXTEND FORM integrationData
    PROPERTIES confirmNotFoundInvoices(), disableAutoBlrapn();

DESIGN integrationData {
    commonEdi {
        NEW commonEdiInvoice {
            caption = 'Накладные';
            MOVE PROPERTY (confirmNotFoundInvoices());
            MOVE PROPERTY (disableAutoBlrapn());
        }
    }
}

disableConfirmation = DATA LOCAL BOOLEAN (EInvoiceMessage);
//EInvoiceMessage, STRING[100] login, STRING[100] password, TEXT url, STRING[100] archiveDir, STRING[100] provider
overReceiveBlrapn ABSTRACT LIST (EInvoiceMessage, STRING[100], STRING[100], TEXT, STRING[100], STRING[100]);
overReceiveBlrapn(INTEGER i, STRING[100] login, STRING[100] password, TEXT url, STRING[100] archiveDir, BOOLEAN disableConfirmation, STRING[100] provider) + {
    IF (lower(blrapnReferenceDocumentType()) == 'blrapn' AND eInvoiceDeliveryNoteNumber(blrapnDeliveryNoteId()))
       OR lower(blrapnReferenceDocumentType()) == 'blrwbr' OR lower(blrapnReferenceDocumentType()) == 'blrwbl'
       OR lower(blrapnReferenceDocumentType()) == 'blrdnr' OR lower(blrapnReferenceDocumentType()) == 'blrdln' THEN {
        LOCAL eInvoice = EInvoice();
        eInvoice() <- eInvoiceDeliveryNoteNumber(blrapnDeliveryNoteId());
        IF eInvoice() THEN {
            NEWSESSION NESTED LOCAL {
                IF NOT eInvoiceMessage(eInvoice(), blrapnDocumentNumber(), EInvoiceMessageKind.in) THEN NEW m = EInvoiceMessage {
                    number(m) <- blrapnDocumentNumber();
                    eInvoice(m) <- eInvoice();
                    kind(m) <- EInvoiceMessageKind.in;
                }
                FOR EInvoiceMessage m == eInvoiceMessage(eInvoice(), blrapnDocumentNumber(), EInvoiceMessageKind.in) DO {
                    dateTime(m) <- blrapnDateTime();
                    code(m) <- blrapnCode();
                    description(m) <- OVERRIDE blrapnDescription(), description(blrapnCode());
                    type(m) <- CASE
                        WHEN lower(blrapnReferenceDocumentType()) == 'blrapn' THEN EInvoiceMessageType.blrapn_blrapn
                        WHEN lower(blrapnReferenceDocumentType()) == 'blrwbr' THEN EInvoiceMessageType.blrapn_blrwbr
                        WHEN lower(blrapnReferenceDocumentType()) == 'blrwbl' THEN EInvoiceMessageType.blrapn_blrwbl
                        WHEN lower(blrapnReferenceDocumentType()) == 'blrdnr' THEN EInvoiceMessageType.blrapn_blrdnr
                        WHEN lower(blrapnReferenceDocumentType()) == 'blrdln' THEN EInvoiceMessageType.blrapn_blrdln;
                    referenceDocumentId(m) <- blrapnReferenceDocumentId();
                    
                    overReceiveBlrapn(m, login, password, url, archiveDir, provider);
                    XMLPath(m) <- archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                    APPLY NESTED LOCAL;
                    IF canceled() THEN {
                        logToFile('edi', provider + ' (' + login + ') Import EInvoiceMessage ' + id(i) + ' failed: ' + applyMessage());
                        invoiceMessagesFailed() <- invoiceMessagesFailed() + 1;
                    } ELSE {
                        IF NOT disableConfirmation AND NOT disableConfirmation(m) THEN {
                            LOCAL xml = XMLFILE();
                            EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO xml;
                            sendRequestEDI(url, xml());
                            logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request sent');
                            importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                            IF requestError() THEN {
                                logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                                MESSAGE  provider + ' (' + login + ') Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                            } ELSE {
                                logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                            }
                        }
                        logToFile('edi', provider + ' (' + login + ') Import EInvoiceMessage ' + id(i) + ' succeeded');
                        invoiceMessagesSucceeded() <- invoiceMessagesSucceeded() + 1;
                    }
                }
            }
        } ELSE {
            IF confirmNotFoundInvoices() THEN {
                IF NOT disableConfirmation THEN {
                    LOCAL xml = XMLFILE();
                    EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO xml;
                    sendRequestEDI(url, xml());
                    logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived not found document ' + id(i) + ': request sent');
                    importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                    IF requestError() THEN {
                        logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived not found document ' + id(i) + ': ' + requestError());
                        MESSAGE  provider + ' (' + login + ') Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                    } ELSE {
                        logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived not found document ' + id(i) + ': request succeeded');
                    }
                    messagesConfirmed() <- messagesConfirmed() + 1;
                }
            }
            logToFile('edi', provider + ' (' + login + ') Import EInvoiceMessage ' + id(i) + ' failed: ' + 'EInvoice ' + (OVERRIDE blrapnDeliveryNoteId(), 'NULL') + ' not found');
            invoiceMessagesFailed() <- invoiceMessagesFailed() + 1;
        }
        RETURN;
    }
}

//логика сообщений для накладных дублирует APN. Убираем все из очереди. Нужны для заказов, поэтому фильтруем по типу
overReceiveSystemMessage(INTEGER i, STRING[100] login, STRING[100] password, TEXT url, STRING[100] archiveDir, BOOLEAN disableConfirmation, STRING[100] provider) + {
    IF documentType() == 'BLRWBL' OR documentType() == 'BLRWBR' OR documentType() == 'BLRDLN' OR documentType() == 'BLRDNR' 
        OR documentType() == 'BLRADF' OR documentType() == 'BLRSPT' OR documentType() == 'BLRAPN' THEN {
        logToFile('edi', provider + ' (' + login + ') System Message ' + id(i) + ' skipped for documentType ' + documentType());
        IF NOT disableConfirmation THEN {
            LOCAL xml = XMLFILE();
            EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO xml;
            sendRequestEDI(url, xml());
            logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request sent');
            importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
            IF requestError() THEN {
                logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
            } ELSE {
                logToFile('edi', provider + ' (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
            }
            messagesConfirmed() <- messagesConfirmed() + 1;
        }
        RETURN;
    }
}

good(EInvoiceMessage m) += WHEN (code(m) == '2550' OR code(m) == '2560' OR code(m) == '2551' OR code(m) == '2571' OR code(m) == '2650') THEN TRUE ;

disableConfirmation = DATA LOCAL BOOLEAN (ECreditNoteMessage);
overReceiveBlrapn ABSTRACT LIST (ECreditNoteMessage, STRING[100], STRING[100], TEXT, STRING[100], STRING[100]);
overReceiveBlrapn(INTEGER i, STRING[100] login, STRING[100] password, TEXT url, STRING[100] archiveDir, BOOLEAN disableConfirmation, STRING[100] provider) + {
    IF (lower(blrapnReferenceDocumentType()) == 'blrapn' AND actDifDate(eCreditNoteActDifNumber(blrapnDeliveryNoteId())) == DATE(blrapnDeliveryNoteDate())) OR lower(blrapnReferenceDocumentType()) == 'blradf' THEN {
        NEWSESSION NESTED LOCAL {
            LOCAL eCreditNote = ECreditNote();
            eCreditNote() <- eCreditNoteActDifNumber(blrapnDeliveryNoteId());
            IF NOT eCreditNoteMessage(eCreditNote(), blrapnDocumentNumber(), EInvoiceMessageKind.in) THEN NEW m = ECreditNoteMessage {
                number(m) <- blrapnDocumentNumber();
                eCreditNote(m) <- eCreditNote();
                kind(m) <- EInvoiceMessageKind.in;
            }
            FOR ECreditNoteMessage m == eCreditNoteMessage(eCreditNote(), blrapnDocumentNumber(), EInvoiceMessageKind.in) DO {
                dateTime(m) <- blrapnDateTime();
                code(m) <- blrapnCode();
                description(m) <- OVERRIDE blrapnDescription(), description(blrapnCode());
                eCreditNote(m) <- eCreditNoteActDifNumber(blrapnDeliveryNoteId());
                type(m) <- CASE
                    WHEN lower(blrapnReferenceDocumentType()) == 'blrapn' THEN ECreditNoteMessageType.blrapn_blrapn
                    WHEN lower(blrapnReferenceDocumentType()) == 'blradf' THEN ECreditNoteMessageType.blrapn_blradf;
                
                overReceiveBlrapn(m, login, password, url, archiveDir, provider);

                XMLPath(m) <- archiveDir + '/received/' + toChar(currentDate(), 'yyyyMMdd') + '/' + id(i);
                APPLY NESTED LOCAL;
                IF canceled() THEN {
                    logToFile('edi', provider + ' Import ECreditNoteMessage ' + id(i) + ' failed: ' + applyMessage());
                    creditNoteMessagesFailed() <- creditNoteMessagesFailed() + 1;
                } ELSE {
                    IF NOT disableConfirmation THEN {
                        LOCAL xml = XMLFILE();
                        EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO xml;
                        sendRequestEDI(url, xml());
                        logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request sent');
                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
                        IF requestError() THEN {
                            logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
                            MESSAGE provider + ' Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
                        } ELSE {
                            IF archiveDir THEN {
                                TRY{ mkdir(archiveDir + '/received/' + toChar(currentDate(), 'yyyyMMdd')); }
                                WRITE data(i) TO archiveDir + '/received/' + toChar(currentDate(), 'yyyyMMdd') + '/' + id(i);
                            }
                            logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                        }
                    }
                    logToFile('edi', provider + ' Import ECreditNoteMessage ' + id(i) + ' succeeded');
                    creditNoteMessagesSucceeded() <- creditNoteMessagesSucceeded() + 1;
                }
            }
        }
        RETURN;
    }
}

sendBlrapnFault = DATA LOCAL BOOLEAN ();