MODULE EDocumentEDITopByProtocol;

REQUIRE TopBy, EDocumentEDI, EDocumentEDS;

NAMESPACE EDI;

@openXML(EDocument,d,eDocuments);

@openXML(EDocumentMessage,m,eDocuments);

blrdocUserID = DATA LOCAL NESTED STRING[35]();
GROUP document EXTID 'Document';
blrdocDocumentID = DATA LOCAL NESTED STRING[35]();
blrdocCreationDateTime = DATA LOCAL NESTED DATETIME();
blrdocFunctionCode = DATA LOCAL NESTED STRING[3]();
blrdocNumber = DATA LOCAL NESTED STRING[25]();
blrdocDate = DATA LOCAL NESTED DATE();
blrdocType = DATA LOCAL NESTED STRING[255]();
blrdocDocument = DATA LOCAL NESTED RAWFILE();
blrdocDocumentName = DATA LOCAL NESTED STRING[255]();
blrdocDocumentRoute = DATA LOCAL NESTED STRING[1]();
GROUP blrdocSender EXTID 'Sender' : document;
blrdocSenderGLN = DATA LOCAL NESTED STRING[13]();
GROUP blrdocReceiver EXTID 'Receiver' : document;
blrdocReceiverGLN = DATA LOCAL NESTED STRING[13]();

FORM blrdoc
    PROPERTIES IN messageHeader blrdocUserID() EXTID 'UserID'
    PROPERTIES IN document blrdocDocumentID() EXTID 'DocumentID',
                           blrdocCreationDateTime() EXTID 'CreationDateTime',
                           blrdocFunctionCode() EXTID 'FunctionCode',
                           blrdocNumber() EXTID 'eDocumentNumber',
                           blrdocDate() EXTID 'eDocumentDate',
                           blrdocType() EXTID 'eDocumentType',
                           blrdocDocument() EXTID 'eDocument',
                           blrdocDocumentName() EXTID 'eDocumentName',
                           blrdocDocumentRoute() EXTID 'eDocumentRoute'
    PROPERTIES IN blrdocSender blrdocSenderGLN() EXTID 'GLN'
    PROPERTIES IN blrdocReceiver blrdocReceiverGLN() EXTID 'GLN'
;

overImportBlrdoc ABSTRACT ();
skipBlrdoc = DATA LOCAL NESTED BOOLEAN();
overCreateEDocumentBlrdoc ABSTRACT LIST (EDocument);

//overReceiveMessages(INTEGER i, STRING[100] login, STRING[100] password, TEXT url, STRING[100] archiveDir, BOOLEAN disableConfirmation, BOOLEAN receiveSupplierMessages, BOOLEAN sendReplies, BOOLEAN invoices, STRING[100] provider) + {
//    IF lower(documentType(i)) == 'blrdoc' AND invoices THEN {
//        TRY {
//            IMPORT blrdoc XML FROM data(i);
//            skipBlrdoc() <- NULL;
//            overImportBlrdoc();
//            IF NOT skipBlrdoc() THEN {
//                NEWSESSION NESTED LOCAL {
//                    LOCAL isCancel = BOOLEAN();
//                    isCancel() <- TRUE IF blrdocFunctionCode() == '1';
//                    FOR EDocument ed = eDocument(blrdocSenderGLN() + '/' + blrdocDocumentID()) DO {
//                        //importedCustomer(ei) <- TRUE ;
//                        IF isCancel() THEN {
//                            isCancel(ed) <- TRUE;
//                            //numberSupplierCancel(ei) <- blrwblDocumentNumber();
//                            //dateSupplierCancel(ei) <- blrwblDateTime();
//                            //exportedCustomer(ei) <- NULL;
//                            //exportedNoticeCustomer(ei) <- NULL;
//                            //exportedBlrapnCustomer(ei) <- NULL;
//                        } ELSE {
//                            //numberSupplier(ei) <- blrwblDocumentNumber();
//                            //dateSupplier(ei) <- blrwblDateTime();
//                        }
//                    } ELSE NEW ed = EDocument {
//                        //importedCustomer(ei) <- TRUE;
//                        id(ed) <- blrdocSenderGLN() + '/' + blrdocDocumentID();
//                        documentID(ed) <- blrdocDocumentID();
//                        creationDateTime(ed) <- blrdocCreationDateTime();
//                        number(ed) <- blrdocNumber();
//                        date(ed) <- blrdocDate();
//                        type(ed) <- blrdocType();
//                        file(ed) <- blrdocDocument();
//                        name(ed) <- blrdocDocumentName();
//                        route(ed) <- OVERRIDE (GROUP MAX EDocumentRoute r IF id(r) == blrdocDocumentRoute()), EDocumentRoute.route0;
//                        sender(ed) <- legalEntityGLN(blrdocSenderGLN());
//                        receiver(ed) <- legalEntityGLN(blrdocReceiverGLN());
//                        overCreateEDocumentBlrdoc(ed);
//                        XMLPath(ed) <- archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
//                    }
//                    APPLY NESTED LOCAL;
//                    IF canceled() THEN {
//                        IF NOT disableConfirmation AND sendReplies THEN {
//                            LOCAL contentSubXML = FILE();
//                            EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = messageDocumentNumber(), code = '1450', description = applyMessage() XML TO contentSubXML;
//                            fileToString(contentSubXML());
//                            encodeBase64(resultString());
//                            LOCAL xml = XMLFILE();
//                            envelopeLogin() <- login;
//                            envelopePassword() <- password;
//                            envelopeDocumentDate() <- currentDateTime();
//                            envelopeDocumentNumber() <- id(i);
//                            envelopeDocumentType() <- 'SYSTEMMESSAGE';
//                            envelopeContent() <- encodedBase64();
//                            EXPORT envelope XML TO xml;
//                            sendRequestEDI(url, xml());
//                            logToFile('edi', provider + ' RecipientError ' + id(i) +' request sent');
//                            importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
//                            IF requestError() THEN {
//                                sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
//                                logToFile('edi', provider + ' RecipientError ' + id(i) + ': ' + requestError());
//                                MESSAGE provider + ' Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
//                            } ELSE {
//                                logToFile('edi', provider + ' RecipientError ' + id(i) + ' request succeeded');
//                            }
//                        }
//                        logToFile('edi', provider + ' Import EDocument ' + id(i) + ' failed: ' + applyMessage());
//                        eInvoicesFailed() <- eInvoicesFailed() + 1;
//                    } ELSE {
//                        FOR EDocument ed == eDocument(blrdocSenderGLN() + '/' + blrdocDocumentID()) AND isCancel(ed) DO {
//                            IF NOT disableAutoBlrapn() THEN {
//                                LOCAL contentSubXML = FILE();
//                                blrapnDateTime() <- currentDateTimeMillis();
//                                blrapnMsgSender() <- glnReceiver(ed);
//                                blrapnMsgReceiver() <- glnSender(ed);
//                                //blrapnUserID() <- userIDSupplierStock(ed);
//                                blrapnDeliveryNoteId() <- number(ed);
//                                blrapnDeliveryNoteDate() <- date(ed);
//                                blrapnReferenceDocumentType() <- 'BLRDOC';
//                                blrapnReferenceDocumentId() <- blrdocDocumentID();
//                                blrapnReferenceDocumentDate() <- blrdocCreationDateTime();
//                                blrapnShipper() <- glnSender(ed);
//                                blrapnReceiver() <- glnReceiver(ed);
//                                blrapnCode() <- '2650';
//                                blrapnDescription() <- NULL;
//                                toMilliseconds(blrapnDateTime());
//                                EXPORT exportBlrapn XML TO contentSubXML;
//                                IF archiveDir THEN {
//                                    TRY{ mkdir(archiveDir + '/sent/documents/' + toChar(currentDate(),'yyyyMMdd')); }
//                                    WRITE contentSubXML() TO archiveDir + '/sent/documents/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
//                                }
//                                IF EDSServiceReceiver(provider,ed) THEN {
//                                    getSignedDocumentReceiver(provider, ed, contentSubXML(), NULL);
//                                    IF signError() THEN {
//                                        logToFile('edi', provider + ' Import EDocument ' + id(i) + ' error: BLRAPN ' + documentID(ed) + ' не подписан. Ошибка: ' + signError());
//                                    }
//                                    ELSE IF signResult() THEN {
//                                        LOCAL ixml = XMLFILE();
//                                        envelopeLogin() <- login;
//                                        envelopePassword() <- password;
//                                        envelopeFilename() <- CONCAT '', 'document', documentID(ed);
//                                        envelopeDocumentDate() <- blrapnDateTime();
//                                        envelopeDocumentNumber() <- numberSupplier(ei);
//                                        envelopeSender() <- glnCustomer(ei);
//                                        envelopeReceiver() <- glnCustomer(ei);
//                                        envelopeDeliveryPoint() <- glnCustomerStock(ei);
//                                        envelopeDocumentType() <- 'BLRAPN';                                        
//                                        envelopeContent() <- signResult();
//                                        EXPORT envelope XML TO ixml;
//                                        sendRequestEDI(url, ixml());
//                                        logToFile('edi', provider + ' SendBlrapnEDocument ' + deliveryNoteNumber(ei) +' request sent');
//                                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
//                                        IF requestError() THEN {
//                                            logToFile('edi', provider + ' SendBlrapnEInvoice ' + deliveryNoteNumber(ei) + ': ' + requestError());
//                                            MESSAGE provider + ' Извещение о прочтении накладной ' + deliveryNoteNumber(ei) + ' не выгружено: ' + requestError() NOWAIT;
//                                        } ELSE {
//                                            logToFile('edi', provider + ' SendBlrapnEInvoice ' + deliveryNoteNumber(ei) + ' request succeeded');
//                                            IF NOT disableConfirmation THEN {
//                                                LOCAL cxml = XMLFILE();
//                                                EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO cxml;
//                                                sendRequestEDI(url, cxml());
//                                                logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request sent');
//                                                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
//                                                IF requestError() THEN {
//                                                    logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
//                                                    MESSAGE  provider + ' Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
//                                                } ELSE {
//                                                    IF archiveDir THEN {
//                                                        TRY{ mkdir(archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd')); }
//                                                        WRITE data(i) TO archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
//                                                    }
//                                                    logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
//                                                }
//                                            }
//                                            logToFile('edi', provider + ' Import EInvoice ' + id(i) + ' succeeded');
//                                            eInvoicesSucceeded() <- eInvoicesSucceeded() + 1;
//                                            NEWSESSION NESTED LOCAL {
//                                                exportedBlrapnCustomer(ei) <- TRUE;
//                                                NEW em = EInvoiceMessage {
//                                                    number(em) <- STRING[24](resultMilliseconds());
//                                                    eInvoice(em) <- ei;
//                                                    dateTime(em) <- blrapnDateTime();
//                                                    code(em) <- blrapnCode();
//                                                    kind(em) <- EInvoiceMessageKind.out;
//                                                    type(em) <- EInvoiceMessageType.blrapn_blrwbl;
//                                                    XMLPath(em) <- archiveDir + '/sent/invoices/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
//                                                }
//                                                APPLY NESTED LOCAL;
//                                            }
//                                        }
//                                    }
//                                } ELSE {
//                                    logToFile('edi', provider + ' Import EInvoice ' + id(i) + ' error: не заданы параметры EDSService');
//                                }
//                            } ELSE {
//                                IF NOT disableConfirmation THEN {
//                                    LOCAL cxml = XMLFILE();
//                                    EXPORT confirmDocument OBJECTS login = login, password = password, documentId = id(i) XML TO cxml;
//                                    sendRequestEDI(url, cxml());
//                                    logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request sent');
//                                    importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'ConfirmDocumentReceivedResponse');
//                                    IF requestError() THEN {
//                                        logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
//                                        MESSAGE  provider + ' Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
//                                    } ELSE {
//                                        IF archiveDir THEN {
//                                            TRY{ mkdir(archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd')); }
//                                            WRITE data(i) TO archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
//                                        }
//                                        logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
//                                    }
//                                }
//                                logToFile('edi', provider + ' Import EInvoice ' + id(i) + ' succeeded');
//                                eInvoicesSucceeded() <- eInvoicesSucceeded() + 1;
//                            }
//                        }
//                    }  
//                }
//            }
//        } CATCH {
//            IF NOT disableConfirmation AND sendReplies THEN {
//                LOCAL contentSubXML = FILE();
//                EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = messageDocumentNumber(), code = '1450', description = (CONCAT '\n', provider + ' Parse EInvoice ' + id(i) + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException()) XML TO contentSubXML;
//                fileToString(contentSubXML());
//                encodeBase64(resultString());
//                LOCAL xml = XMLFILE();
//                envelopeLogin() <- login;
//                envelopePassword() <- password;
//                envelopeDocumentDate() <- currentDateTime();
//                envelopeDocumentNumber() <- id(i);
//                envelopeDocumentType() <- 'SYSTEMMESSAGE';
//                envelopeContent() <- encodedBase64();
//                EXPORT envelope XML TO xml;
//                sendRequestEDI(url, xml());
//                logToFile('edi', provider + ' RecipientError ' + id(i) +' request sent');
//                importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
//                IF requestError() THEN {
//                    sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
//                    logToFile('edi', provider + ' RecipientError ' + id(i) + ': ' + requestError());
//                    MESSAGE provider + ' Сообщение об ошибке ' + id(i) + ' не выгружено: ' + requestError() NOWAIT;
//                } ELSE {
//                    logToFile('edi', provider + ' RecipientError ' + id(i) + ' request succeeded');
//                }
//            }
//            logToFile('edi', CONCAT '\n', provider + ' Parse EDocument ' + id(i) + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
//            MESSAGE  'Ошибка при импорте документа ' + id(i) +'. Обратитесь к администратору' NOWAIT;
//            eInvoicesFailed() <- eInvoicesFailed() + 1;
//        }
//    }
//}

//signAndSendBlrapnReceiverEDocument (EDocument ed, STRING[100] login, STRING[100] password, TEXT url, STRING[100] outputDir , STRING[100] provider) {
//    checkIsServer();
//    IF isServer() THEN {
//        TRY {
//            IF login AND password THEN {
//                IF EDSServiceReceiver(provider,ed) THEN {
//                    LOCAL contentSubXML = FILE();
//                    blrapnDateTime() <- currentDateTimeMillis();
//                    blrapnMsgSender() <- glnReceiver(ed);
//                    blrapnMsgReceiver() <- glnSender(ed);
//                    //blrapnUserID() <- userIDSupplierStock(ei);
//                    blrapnDeliveryNoteId() <- number(ed);
//                    blrapnDeliveryNoteDate() <- date(ed);
//                    blrapnReferenceDocumentType() <- 'BLRDOC';
//                    blrapnReferenceDocumentId() <- documentID(ed);
//                    blrapnReferenceDocumentDate() <- creationDateTime(ed);
//                    blrapnShipper() <- glnSender(ed);
//                    blrapnReceiver() <- glnReceiver(ed);
//                    blrapnCode() <- '2650';
//                    blrapnDescription() <- NULL;
//                    toMilliseconds(blrapnDateTime());
//                    EXPORT exportBlrapn XML TO contentSubXML;
//                    IF outputDir THEN {
//                        TRY{ mkdir(outputDir + '/sent/documents/' + toChar(currentDate(),'yyyyMMdd')); }
//                        WRITE contentSubXML() TO outputDir + '/sent/documents/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
//                    }
//                    getSignedDocumentReceiver(provider, ed, contentSubXML(), TRUE);
//                    IF signError() THEN {
//                        logToFile('edi', provider + ' SendBlrapnEDocument error: BLRAPN ' + documentID(ed) + ' не подписан. Ошибка: ' + signError());
//                        MESSAGE provider + ' Извещение о прочтении документа не выгружено: BLRAPN ' + documentID(ed) + ' не подписан. Ошибка: ' + signError() NOWAIT;
//                    }
//                    ELSE IF signResult() THEN {
//                        LOCAL ixml = XMLFILE();
//                        envelopeLogin() <- login;
//                        envelopePassword() <- password;
//                        envelopeFilename() <- CONCAT '', 'invoice', documentID(ed);
//                        envelopeDocumentDate() <- blrapnDateTime();
//                        envelopeDocumentNumber() <- documentID(ed);
//                        envelopeSender() <- glnReceiver(ed);
//                        envelopeReceiver() <- glnSender(ed);
//                        //envelopeDeliveryPoint() <- glnSender(ed);
//                        envelopeDocumentType() <- 'BLRAPN';
//                        envelopeContent() <- signResult();
//                        EXPORT envelope XML TO ixml;
//                        sendRequestEDI(url, ixml());
//                        logToFile('edi', provider + ' SendBlrapnEDocument ' + documentID(ed) +' request sent');
//                        importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
//                        IF requestError() THEN {
//                            logToFile('edi', provider + ' SendBlrapnEDocument ' + documentID(ed) + ': ' + requestError());
//                            MESSAGE provider + ' Извещение о прочтении документа ' + documentID(ed) + ' не выгружено: ' + requestError() NOWAIT;
//                        } ELSE {
//                            logToFile('edi', provider + ' SendBlrapnEDocument ' + documentID(ed) + ' request succeeded');
//                            MESSAGE provider + ' Извещение о прочтении документа ' + documentID(ed) + ' выгружено' NOWAIT;
//                            //exportedBlrapnCustomer(ed) <- TRUE;
//                            NEW em = EDocumentMessage {
//                                number(em) <- STRING[24](resultMilliseconds());
//                                eDocument(em) <- ed;
//                                dateTime(em) <- blrapnDateTime();
//                                code(em) <- blrapnCode();
//                                kind(em) <- EInvoiceMessageKind.out;
//                                type(em) <- EInvoiceMessageType.blrapn_blrdoc;
//                                XMLPath(em) <- outputDir + '/sent/documents/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrapn-' + toChar(blrapnDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS');
//                            }
//                            APPLY NESTED LOCAL;
//                        }
//                    }
//                } ELSE {
//                    logToFile('edi', provider + ' SendBlrapnEDocument: не заданы параметры EDSService');
//                    MESSAGE provider + ' Извещение о прочтении не выгружено: не заданы параметры EDSService' NOWAIT;
//                }
//            } ELSE {
//                logToFile('edi', provider + ' SendBlrapnEDocument: не заданы имя пользователя / пароль / хост / порт');
//                MESSAGE provider + ' Извещение о прочтении не выгружено: не заданы имя пользователя / пароль / хост / порт' NOWAIT;
//            }
//        } CATCH {
//            logToFile('edi', CONCAT '\n', provider + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
//            MESSAGE 'Извещение о прочтении не выгружено. Обратитесь к администратору' NOWAIT;
//        }
//    } ELSE {
//        logToFile('edi', provider + ' error: ' + 'SendBlrapnEDocument disabled, change serverComputer() to enable');
//        MESSAGE  provider + ' error: ' + 'SendBlrapnEDocument disabled, change serverComputer() to enable' NOWAIT;
//    }
//}

exportBlrdocDateTime = DATA LOCAL NESTED DATETIME();

GROUP sender EXTID 'Sender';
GROUP receiver EXTID 'Receiver';

hideMessageHeaderBlrdoc = DATA LOCAL BOOLEAN ();

FORM exportBlrdoc FORMEXTID 'BLRDOC'
    PROPERTIES ATTR ='0.1' IF NOT hideMessageHeaderBlrdoc() EXTID 'version'
    OBJECTS ed = EDocument PANEL
    
    OBJECTS edh = EDocument EXTID 'MessageHeader'
    FILTERS (edh == ed AND NOT hideMessageHeaderBlrdoc()) OR NOT edh IS EDocument
    PROPERTIES DRAW edh messageId = resultMilliseconds() EXTID 'MessageID',
                        msgDateTime = toChar(exportBlrdocDateTime(),'YYYYMMDDHH24MISS') EXTID 'MsgDateTime',
                        messageType = 'BLRDOC' EXTID 'MessageType',
                        glnSender(edh) EXTID 'MsgSenderID',
                        glnReceiver(edh) EXTID 'MsgReceiverID'//,
                        //userIDCustomerStock(eih) EXTID 'UserID',
                        //testIndicator = IF isTest(edh) THEN '1' EXTID 'TestIndicator'
    
    OBJECTS edd = EDocument EXTID 'Document'
    FILTERS edd == ed
    PROPERTIES DRAW edd documentID = (OVERRIDE documentID(edd), STRING[35](resultMilliseconds())) EXTID 'DocumentID',
                        creationDateTime = toChar((OVERRIDE creationDateTime(edd), exportBlrdocDateTime()),'YYYYMMDDHH24MISS') EXTID 'CreationDateTime',
                        functionCode = (IF isCancel(edd) THEN '1' ELSE '9') EXTID 'FunctionCode',
                        number(edd) EXTID 'eDocumentNumber',
                        date = toChar(date(edd),'YYYYMMDD') EXTID 'eDocumentDate',
                        type(edd) EXTID 'eDocumentType'
    PROPERTIES DRAW edd IN sender glnSender(edd) EXTID 'GLN',
                                  nameSender(edd) EXTID 'Name',
                                  addressSender(edd) EXTID 'Address',
                                  unpSender(edd) EXTID 'VATRegistrationNumber'
    PROPERTIES DRAW edd IN receiver glnReceiver(edd) EXTID 'GLN',
                                    nameReceiver(edd) EXTID 'Name',
                                    addressReceiver(edd) EXTID 'Address',
                                    unpReceiver(edd) EXTID 'VATRegistrationNumber'
    PROPERTIES DRAW edd file(edd) EXTID 'eDocument',
                        name(edd) EXTID 'eDocumentName',
                        route = OVERRIDE idRoute(edd), '0' EXTID 'eDocumentRoute'
;

signAndSendSenderEDocument (EDocument ed, STRING[100] login, STRING[100] password, TEXT url, STRING[100] outputDir , STRING[100] provider) {
    checkIsServer();
    IF isServer() THEN {
        TRY {
            IF login AND password THEN {
                IF EDSServiceSender(provider,ed) THEN {
                    LOCAL error = TEXT();
                    error() <- '';
                    IF NOT length(glnSender(ed)) > 0 THEN error() <- error() + 'EDocument ' + (OVERRIDE documentID(ed), number(ed), '') + ': Не заполнено поле \'GLN отправителя\'\n';
                    IF NOT length(glnReceiver(ed)) > 0 THEN error() <- error() + 'EDocument ' + (OVERRIDE documentID(ed), number(ed), '') + ': Не заполнено поле \'GLN получателя\'\n';
                    IF NOT length(name(ed)) > 0 THEN error() <- error() + 'EDocument ' + (OVERRIDE documentID(ed), number(ed), '') + ': Не заполнено поле \'Имя файла\'\n';
                    
                    IF error() == '' THEN {
                        LOCAL contentSubXML = FILE();
                        exportBlrdocDateTime() <- currentDateTimeMillis();
                        toMilliseconds(exportBlrdocDateTime());
                        EXPORT exportBlrdoc OBJECTS ed = ed XML TO contentSubXML;
                        IF outputDir THEN {
                            TRY{ mkdir(outputDir + '/sent/documents/' + toChar(currentDate(),'yyyyMMdd')); }
                            WRITE contentSubXML() TO outputDir + '/sent/documents/' + toChar(currentDate(),'yyyyMMdd') + '/' + 'blrwbl-' + toChar(exportBlrdocDateTime(),'YYYY-MM-DD-HH24-MI-SS-MS'); 
                        }
                        
                        IF route(ed) == EDocumentRoute.route2 THEN {
                            fileToString(contentSubXML());
                            encodeBase64(resultString());
                            signResult() <- encodedBase64();
                        } ELSE {
                            getSignedDocumentSender(provider, ed, contentSubXML(), TRUE);
                            IF signError() THEN {
                                logToFile('edi', provider + ' SendEDocument error: BLRDOC ' + (OVERRIDE documentID(ed), STRING[35](resultMilliseconds())) + ' не подписан. Ошибка: ' + signError());
                                MESSAGE provider + ' Документ не выгружен: BLRDOC ' + (OVERRIDE documentID(ed), STRING[35](resultMilliseconds())) + ' не подписан. Ошибка: ' + signError() NOWAIT;
                            }
                        }
                        IF signResult() THEN {
                            LOCAL ixml = XMLFILE();
                            envelopeLogin() <- login;
                            envelopePassword() <- password;
                            envelopeFilename() <- CONCAT '', 'document', documentID(ed);
                            envelopeDocumentDate() <- (OVERRIDE creationDateTime(ed), exportBlrdocDateTime());
                            envelopeDocumentNumber() <- (OVERRIDE documentID(ed), STRING[35](resultMilliseconds()));
                            envelopeSender() <- glnSender(ed);
                            envelopeReceiver() <- glnReceiver(ed);
                            //envelopeDeliveryPoint() <- glnReceiver(ed);
                            envelopeDocumentType() <- 'BLRDOC';
                            envelopeContent() <- signResult();
                            EXPORT envelope XML TO ixml;
                            sendRequestEDI(url, ixml());
                            logToFile('edi', provider + ' SendEDocument ' + documentID(ed) +' request sent');
                            importRequestResult(sendRequestEDIResponse(), sendRequestEDIStatus(), 'SendDocumentResponse');
                            IF requestError() THEN {
                                logToFile('edi', provider + ' SendEDocument ' + documentID(ed) + ': ' + requestError());
                                MESSAGE provider + ' Документ ' + documentID(ed) + ' не выгружен: ' + requestError() NOWAIT;
                            } ELSE {
                                logToFile('edi', provider + ' SendEDocument ' + documentID(ed) + ' request succeeded');
                                MESSAGE provider + ' Документ ' + documentID(ed) + (IF isCancel(ed) THEN ' (отмена)' ELSE '') + ' выгружен' NOWAIT;
                                //NEWSESSION NESTED LOCAL {
                                    exportedSender(ed) <- TRUE;
                                    documentID(ed) <- STRING[35](resultMilliseconds()) IF NOT documentID(ed);
                                    creationDateTime(ed) <- exportBlrdocDateTime() IF NOT creationDateTime(ed);
                                    id(ed) <- (glnSender(ed) + '/' + documentID(ed)) IF NOT id(ed);
                                    APPLY NESTED LOCAL;
                                //}
                            }
                        }
                    } ELSE {
                        logToFile('edi', provider + ' SendEDocument: Не все поля заполнены. ' + error());
                        MESSAGE provider + ' Документ не выгружен: Не все поля заполнены ' + error() NOWAIT;
                    }
                    
                } ELSE {
                    logToFile('edi', provider + ' SendEDocument: не заданы параметры EDSService');
                    MESSAGE provider + ' Документ не выгружен: не заданы параметры EDSService' NOWAIT;
                }
            } ELSE {
                logToFile('edi', provider + ' SendEDocument: не заданы имя пользователя / пароль / хост / порт');
                MESSAGE provider + ' Документ не выгружен: не заданы имя пользователя / пароль / хост / порт' NOWAIT;
            }
        } CATCH {
            logToFile('edi', CONCAT '\n', provider + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE 'Документ не выгружен. Обратитесь к администратору' NOWAIT;
        }
    } ELSE {
        logToFile('edi', provider + ' error: ' + 'SendEDocument disabled, change serverComputer() to enable');
        MESSAGE  provider + ' error: ' + 'SendEDocument disabled, change serverComputer() to enable' NOWAIT;
    }
}