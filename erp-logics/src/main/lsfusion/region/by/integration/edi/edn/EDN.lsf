MODULE EDN;

REQUIRE EDI, TopByApi;

NAMESPACE EDI;

EXTEND CLASS EDIProvider {
    edn 'EDN'
}
prefix(EDIProvider e) += WHEN e == EDIProvider.edn THEN '002-';
name(EDIProvider e) += WHEN e == EDIProvider.edn THEN 'ООО "Электронные документы и накладные"';

loginEDN 'Имя пользователя EDN' = DATA STRING[100] (LegalEntity);
passwordEDN 'Пароль EDN' = DATA STRING[100] (LegalEntity) ECHO;
hostEDN 'Хост' = DATA STRING[100] (LegalEntity);
portEDN 'Порт' = DATA INTEGER (LegalEntity);
extractEDN 'Распаковывать сообщения' = DATA BOOLEAN (LegalEntity); //тут даже не то что распаковывать а вообще обмен в формате docurive
archiveDirEDN 'Папка принятых сообщений' = DATA STRING[100] ();
outputDirEDN 'Папка отправленных сообщений' = DATA STRING[100] ();
disableConfirmationEDN 'Отключить подтверждение сообщений' = DATA BOOLEAN ();

useDocuDrive 'Использовать DocuDrive' = DATA BOOLEAN();

document = DATA LOCAL RAWFILE();
FORM edocument
    PROPERTIES() document;

beforeOverReceiveMessages(INTEGER i, STRING[100] login, STRING[100] archiveDir) + {
    IF extractEDN([GROUP MIN LegalEntity l BY loginEDN(l)](login)) THEN {
        IMPORT edocument FROM data(i);
        unzipping() <- setExtension(document(), 'zip');
        makeUnzipFile();
        FOR unzipped(STRING[100] s) DO {
            data(i) <- XMLFILE(unzipped(s));
        }
        IF archiveDir THEN {
            WRITE data(i) TO archiveDir + '/received/' + toChar(currentDate(), 'yyyyMMdd') + '/' + id(i) + '_extarcted';
        }
    }
}

lockedEDN = DATA User (LegalEntity) TABLE legalEntityEDI;
lockResultEDN = DATA LOCAL NESTED BOOLEAN ();

lockEDN(LegalEntity object)  { 
    NEWSESSION {    
        lockResultEDN() <- NULL;
        APPLY SERIALIZABLE {
            IF NOT object THEN
                RETURN;
            IF lockedEDN(object) THEN {
                cancel();
            } ELSE {
                lockedEDN(object) <- currentUser();
                lockResultEDN() <- TRUE;
            }
        }
    }
}

unlockEDN(LegalEntity object)  { 
    NEWSESSION { 
        APPLY lockedEDN(object) <- NULL;
    }
}

onStarted()+ { 
    NEWSESSION {
        lockedEDN(LegalEntity l) <- NULL WHERE lockedEDN(l) AND l IS LegalEntity;
        APPLY;      
    }
}

overReceiveMessagesEDN ABSTRACT LIST(LegalEntity);
receiveMessagesEDN () {
    FOR LegalEntity le == [GROUP MIN LegalEntity l BY loginEDN(l)](STRING login) AND passwordEDN(le) DO {
        NEWSESSION {
            lockEDN(le);
            IF lockResultEDN() THEN {
                TRY {
                    overReceiveMessagesEDN(le);
                    receiveMessages(login, passwordEDN(le), ('https://' + hostEDN(le) + ':' + portEDN(le) + '/topby/DmcService?wsdl'), archiveDirEDN(), disableConfirmationEDN(), TRUE, 'EDN');
                } FINALLY {
                    unlockEDN(le);
                }
            } ELSE {
                MESSAGE 'Уже выполняется получение сообщений EDN для ' + login + '. Подождите...' NOWAIT;
            }
        }
    }
}

exportDirectoryDocuDrive 'Каталог выгрузки для DocuDrive (c /)' = DATA STRING[255]() CHARWIDTH 50;
importDirectoryDocuDrive 'Каталог загрузки от DocuDrive (c /)' = DATA STRING[255]() CHARWIDTH 50;

overReceiveMessagesDocuDrive ABSTRACT LIST (INTEGER, STRING[255], STRING[255], STRING[100], BOOLEAN, BOOLEAN, STRING[100]);

getFileName(TEXT txt) = getWord(getWord(txt, '\\', wordCount(txt, '\\')), '/', wordCount(txt, '/'));
getDocumentType(TEXT txt) = getWord(getWord(getWord(txt, '\\', wordCount(txt, '\\')), '/', wordCount(txt, '/')), '_', 1);

receiveMessagesDocuDrive (STRING[255] importDir, STRING[255] exportDir, STRING[100] archiveDir, BOOLEAN disableConfirmation, BOOLEAN sendReplies, STRING[100] provider) {
    TRY {
        IF importDir THEN {
            IF exportDir THEN {
                listFiles(importDir, TRUE);

                sendRecipientErrorFailed() <- 0;
                supplierOrdersSucceeded() <- 0;
                supplierOrdersFailed() <- 0;
                orderMessagesSucceeded() <- 0;
                orderMessagesFailed() <- 0;
                responsesSucceeded() <- 0;
                responsesFailed() <- 0;
                despatchAdvicesSucceeded() <- 0;
                despatchAdvicesFailed() <- 0;
                invoiceMessagesSucceeded() <- 0;
                invoiceMessagesFailed() <- 0;
                eInvoicesSucceeded() <- 0;
                eInvoicesFailed() <- 0;
                eCreditNotesSucceeded() <- 0;
                eCreditNotesFailed() <- 0;
                blrwbrCount() <- 0;
                blrdnrCount() <- 0;
                blradfCount() <- 0;
                messagesConfirmed() <- 0;

                logToFile('edi', provider + ' ReceiveMessages count: ' + (GROUP SUM 1 IF fileName(INTEGER j) AND NOT fileIsDirectory(j) AND lower(right(fileName(j), 4)) = '.xml'));

                FOR STRING[255] fileName = fileName(INTEGER i) AND NOT fileIsDirectory(i) AND lower(right(fileName, 4)) = '.xml'
                    ORDER getWord(fileName, '_', 2), fileName, i DO {
                    LOCAL file = XMLFILE();
                    READ 'file://' + importDir + fileName TO file;
                    data(i) <- file();
                    documentType(i) <- getDocumentType(fileName);
                    id(i) <- getFileName(fileName);
                    IF archiveDir THEN {
                        TRY{ mkdir(archiveDir + '/received/' + toChar(currentDate(), 'yyyyMMdd')); }
                        WRITE data(i) TO archiveDir + '/received/' + toChar(currentDate(), 'yyyyMMdd') + '/' + id(i);
                    }
                    overReceiveMessagesDocuDrive(i, importDir, exportDir, archiveDir, disableConfirmation, sendReplies, provider);
                }

                LOCAL textMessage = TEXT();
                IF supplierOrdersSucceeded() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Загружено заказов поставщика: ' + supplierOrdersSucceeded();
                IF supplierOrdersFailed() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Не загружено заказов поставщика: ' + supplierOrdersFailed();
                IF orderMessagesSucceeded() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Загружено сообщений по заказам: ' + orderMessagesSucceeded();
                IF orderMessagesFailed() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Не загружено сообщений по заказам: ' + orderMessagesFailed();
                IF responsesSucceeded() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Загружено ответов по заказам: ' + responsesSucceeded();
                IF responsesFailed() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Не загружено ответов по заказам: ' + responsesFailed();
                IF despatchAdvicesSucceeded() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Загружено уведомлений об отгрузке: ' + despatchAdvicesSucceeded();
                IF despatchAdvicesFailed() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Не загружено уведомлений об отгрузке: ' + despatchAdvicesFailed();
                IF invoiceMessagesSucceeded() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Загружено сообщений по накладным: ' + invoiceMessagesSucceeded();
                IF invoiceMessagesFailed() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Не загружено сообщений по накладным: ' + invoiceMessagesFailed();
                IF eInvoicesSucceeded() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Загружено электронных накладных: ' + eInvoicesSucceeded();
                IF eInvoicesFailed() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Не загружено электронных накладных: ' + eInvoicesFailed();
                IF eCreditNotesSucceeded() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Загружено электронных актов приемки: ' + eCreditNotesSucceeded();
                IF eCreditNotesFailed() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Не загружено электронных актов приемки: ' + eCreditNotesFailed();
                IF blrwbrCount() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Отвечено на ' + blrwbrCount() + ' BLRWBR';
                IF blrdnrCount() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Отвечено на ' + blrdnrCount() + ' BLRDNR';
                IF blradfCount() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Загружено ' + blradfCount() + ' BLRADF';
                IF messagesConfirmed() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Пропущено ' + messagesConfirmed() + ' сообщений';

                IF NOT (GROUP SUM 1 IF fileName(INTEGER j) AND NOT fileIsDirectory(j) AND lower(right(fileName(j), 4)) = '.xml') THEN {
                    MESSAGE (OVERRIDE textMessage(), 'Не найдено новых сообщений') NOWAIT;
                }
            } ELSE {
                logToFile('edi', provider + ' ReceiveMessages: не задан каталог выгрузки сообщений для DocuDrive');
                MESSAGE provider + ' Сообщения не получены: не задан каталог выгрузки сообщений для DocuDrive' NOWAIT;
            }
        } ELSE {
            logToFile('edi', provider + ' ReceiveMessages: не задан каталог загрузки сообщений от DocuDrive');
            MESSAGE provider + ' Сообщения не получены: не задан каталог загрузки сообщений от DocuDrive' NOWAIT;
        }
    } CATCH {
        logToFile('edi', CONCAT '\n', provider + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
        MESSAGE 'Сообщения не получены. Обратитесь к администратору' NOWAIT;
    }
}

lockedDocuDrive = DATA User ();
lockResultDocuDrive = DATA LOCAL NESTED BOOLEAN ();

lockDocuDrive()  { 
    NEWSESSION {    
        lockResultDocuDrive() <- NULL;
        APPLY SERIALIZABLE {
            IF lockedDocuDrive() THEN {
                cancel();
            } ELSE {
                lockedDocuDrive() <- currentUser();
                lockResultDocuDrive() <- TRUE;
            }
        }
    }
}

unlockDocuDrive()  { 
    NEWSESSION { 
        APPLY lockedDocuDrive() <- NULL;
    }
}

onStarted()+ { 
    NEWSESSION {
        lockedDocuDrive() <- NULL WHERE lockedDocuDrive();
        APPLY;      
    }
}

receiveMessagesDocuDrive () {
    NEWSESSION {
        lockDocuDrive();
        IF lockResultDocuDrive() THEN {
            TRY {
                receiveMessagesDocuDrive(importDirectoryDocuDrive(), exportDirectoryDocuDrive(), archiveDirEDN(), disableConfirmationEDN(), TRUE, 'EDN');
            } FINALLY {
                unlockDocuDrive();
            }
        } ELSE {
            MESSAGE 'Уже выполняется получение сообщений DocuDrive. Подождите...' NOWAIT;
        }
    }
}

receiveEDN 'Получить сообщения' {
    checkIsServer();
    IF isServer() THEN {
        receiveMessagesEDN();
        IF useDocuDrive() THEN {receiveMessagesDocuDrive();}
    }
}

EXTEND FORM integrationData
    PROPERTIES() receiveEDN, archiveDirEDN, outputDirEDN, disableConfirmationEDN

    OBJECTS lete = LegalEntity
    FILTERS isCompany(lete)
    PROPERTIES(lete) name READONLY, loginEDN, passwordEDN, hostEDN, portEDN, extractEDN
;

DESIGN integrationData {
    edi {
        NEW vsEDN {
            caption = 'EDN';
            horizontal = TRUE;
            NEW col1EDN {
                NEW params {
                    caption = 'Общие';
                    MOVE PROPERTY(archiveDirEDN());
                    MOVE PROPERTY(outputDirEDN());
                    MOVE PROPERTY(disableConfirmationEDN());
                    MOVE PROPERTY(receiveEDN());
                }
            }
            NEW col2EDN {
                fill = 1;
                MOVE BOX(lete);
            }
        }
    }
}