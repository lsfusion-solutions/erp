MODULE EDN;

REQUIRE System, Integration, Warehouse, Store, PurchaseOrderEDITopBy;

NAMESPACE EDI;

EXTEND CLASS EDIProvider {
    edn 'EDN'
}

loginEDN 'Имя пользователя EDN' = DATA STRING[100] ();
passwordEDN 'Пароль EDN' = DATA STRING[100] () ECHO;
loginEDN 'Имя пользователя EDN' = DATA STRING[100] (LegalEntity);
passwordEDN 'Пароль EDN' = DATA STRING[100] (LegalEntity) ECHO;
hostEDN 'Хост' = DATA STRING[100] ();
portEDN 'Порт' = DATA INTEGER ();
hostEDN 'Хост' = DATA STRING[100] (LegalEntity);
portEDN 'Порт' = DATA INTEGER (LegalEntity);
archiveDirEDN 'Папка принятых сообщений' = DATA STRING[100] ();
outputDirEDN 'Папка отправленных сообщений' = DATA STRING[100] ();
disableConfirmationEDN 'Отключить подтверждение сообщений' = DATA BOOLEAN ();
receiveSupplierMessagesEDN 'Получать сообщения для поставщика' = DATA BOOLEAN ();

overInvoiceOutputDirEDN 'Путь сохранения отправленных документов' = ABSTRACT CASE STRING (EInvoice);
//overInvoiceOutputFileNameEDN 'Имя файла для сохранения отправленных документов' = ABSTRACT CASE STRING (EInvoice);

migratedLoginPasswordEDN = DATA BOOLEAN (); 

onStarted() + {
    IF NOT migratedLoginPasswordEDN() THEN {
        loginEDN(LegalEntity le) <- loginEDN() WHERE isCompany(le);
        passwordEDN(LegalEntity le) <- passwordEDN() WHERE isCompany(le);
        migratedLoginPasswordEDN() <- TRUE;
    }
}

migratedHostPortEDN = DATA BOOLEAN (); 

onStarted() + {
    IF NOT migratedHostPortEDN() THEN {
        hostEDN(LegalEntity le) <- hostEDN() WHERE isCompany(le);
        portEDN(LegalEntity le) <- portEDN() WHERE isCompany(le);
        migratedHostPortEDN() <- TRUE;
    }
}

hostEDSServiceEDN 'Хост EDSService' = DATA STRING[100] (LegalEntity);
portEDSServiceEDN 'Порт EDSService' = DATA INTEGER (LegalEntity);
hostEDSServiceEDN 'Хост EDSService' (stock) = ABSTRACT STRING[100] (Stock) MATERIALIZED;
hostEDSServiceEDN 'Хост EDSService' = DATA STRING[100] (DepartmentStore);
hostEDSServiceEDN 'Хост EDSService' = DATA STRING[100] (Warehouse);
hostEDSServiceEDN(DepartmentStore stock) += hostEDSServiceEDN(stock);
hostEDSServiceEDN(Warehouse stock) += hostEDSServiceEDN(stock);
portEDSServiceEDN 'Порт EDSService' (stock) = ABSTRACT INTEGER (Stock) MATERIALIZED;
portEDSServiceEDN 'Порт EDSService' = DATA INTEGER (DepartmentStore);
portEDSServiceEDN 'Порт EDSService' = DATA INTEGER (Warehouse);
portEDSServiceEDN(DepartmentStore stock) += portEDSServiceEDN(stock);
portEDSServiceEDN(Warehouse stock) += portEDSServiceEDN(stock);
hostEDSServiceEDN 'Хост EDSService' = DATA STRING[100] (Employee);
portEDSServiceEDN 'Порт EDSService' = DATA INTEGER (Employee);

useDocuDrive 'Использовать DocuDrive' = DATA BOOLEAN();

EXTEND FORM integrationData
    OBJECTS lee = LegalEntity
    FILTERS isCompany(lee)
    PROPERTIES(lee) SHOWIF NOT useDocuDrive() name READONLY, aliasEDSService, passwordEDSService, hostEDSServiceEDN, portEDSServiceEDN
    
    OBJECTS sedse = Stock
    PROPERTIES(sedse) SHOWIF NOT useDocuDrive() name READONLY, aliasEDSService, passwordEDSService, hostEDSServiceEDN, portEDSServiceEDN
    FILTERS isCompany(sedse)
    
    OBJECTS eedse = Employee
    PROPERTIES(eedse) SHOWIF NOT useDocuDrive() lastName READONLY, firstName READONLY, namePosition READONLY, aliasEDSService, passwordEDSService, hostEDSServiceEDN, portEDSServiceEDN
    FILTERS active(eedse)
;

hostEDSServiceCustomerEDN (EInvoice i) = OVERRIDE hostEDSServiceEDN(currentUser()), hostEDSServiceEDN(customerStock(i)), hostEDSServiceEDN(customer(i));
portEDSServiceCustomerEDN (EInvoice i) = OVERRIDE portEDSServiceEDN(currentUser()), portEDSServiceEDN(customerStock(i)), portEDSServiceEDN(customer(i));
hostEDSServiceSupplierEDN (EInvoice i) = OVERRIDE hostEDSServiceEDN(currentUser()), hostEDSServiceEDN(supplierStock(i)), hostEDSServiceEDN(supplier(i));
portEDSServiceSupplierEDN (EInvoice i) = OVERRIDE portEDSServiceEDN(currentUser()), portEDSServiceEDN(supplierStock(i)), portEDSServiceEDN(supplier(i));

hostEDSServiceCustomer(STRING[100] provider, EInvoice i) += WHEN provider == 'EDN' AND i IS EInvoice THEN hostEDSServiceCustomerEDN(i);
portEDSServiceCustomer(STRING[100] provider, EInvoice i) += WHEN provider == 'EDN' AND i IS EInvoice THEN portEDSServiceCustomerEDN(i);
hostEDSServiceSupplier(STRING[100] provider, EInvoice i) += WHEN provider == 'EDN' AND i IS EInvoice THEN hostEDSServiceSupplierEDN(i);
portEDSServiceSupplier(STRING[100] provider, EInvoice i) += WHEN provider == 'EDN' AND i IS EInvoice THEN portEDSServiceSupplierEDN(i);

@receiveMessages(soap);

receiveMessagesEDN (BOOLEAN invoices) {
    FOR LegalEntity le == [GROUP MIN LegalEntity l BY loginEDN(l)](STRING login) AND passwordEDN(le) DO
        receiveMessagesSoap(login, passwordEDN(le), hostEDN(le), portEDN(le), ('https://' +  hostEDN(le) + ':' + portEDN(le) + '/topby/DmcService?wsdl'), archiveDirEDN(), disableConfirmationEDN(), receiveSupplierMessagesEDN(), TRUE, invoices, 'EDN');
}

receiveEDN 'Получить сообщения' {
    checkIsServer();
    IF isServer() THEN {receiveMessagesEDN(NULL); };
}

sendPurchaseOrderEDN (EOrder o) {
    checkIsServer();
    IF isServer() THEN {
        sendPurchaseOrder(o, loginEDN(), passwordEDN(), hostEDN(), portEDN(), ('https://' +  hostEDN() + ':' + portEDN() + '/topby/DmcService?wsdl'), outputDirEDN(), 'EDN');
    }
}

send(EOrder o) + { IF EDIProvider(supplier(o)) == EDIProvider.edn AND NOT isCancel(o) THEN IF NOT toSend(o) THEN MESSAGE 'Заказ уже отправлен'; ELSE {sendPurchaseOrderEDN(o); } }
cancel(EOrder o) + { IF EDIProvider(supplier(o)) == EDIProvider.edn AND isCancel(o) THEN IF exportedCanceled(o) THEN MESSAGE 'Заказ уже отменен'; ELSE {sendPurchaseOrderEDN(o);} }

good(EOrderMessage m) += WHEN (code(m) == '1250' OR code(m) == '1252') THEN TRUE;

//signAndSendCustomer(EInvoice e) + {  IF EDIProvider(supplier(e)) == EDIProvider.edn THEN MESSAGE 'Операция не поддерживается для данного EDI проавайдера'; }
//signAndSendSupplier(EInvoice e) + {  IF EDIProvider(supplier(e)) == EDIProvider.edn THEN MESSAGE 'Операция не поддерживается для данного EDI проавайдера'; }

exportDirectoryDocuDrive 'Каталог выгрузки сообщений для DocuDrive (c / в конце)' = DATA STRING[255]();
importDirectoryDocuDrive 'Каталог загрузки сообщений от DocuDrive (c / в конце)' = DATA STRING[255]();

overReceiveMessagesDocuDrive ABSTRACT LIST (INTEGER, STRING[255], STRING[255], STRING[100], BOOLEAN, BOOLEAN, BOOLEAN, BOOLEAN, STRING[100]);

getFileName(TEXT txt) = getWord(getWord(txt,'\\', wordCount(txt,'\\')),'/', wordCount(txt,'/'));
getDocumentType(TEXT txt) = getWord(getWord(getWord(txt,'\\', wordCount(txt,'\\')),'/', wordCount(txt,'/')),'_',1);

receiveMessagesDocuDrive (STRING[255] importDir, STRING[255] exportDir, STRING[100] archiveDir, BOOLEAN disableConfirmation, BOOLEAN receiveSupplierMessages, BOOLEAN sendReplies, BOOLEAN invoices, STRING[100] provider) {
    TRY {
        IF importDir THEN {
            IF exportDir THEN {
                listFiles(importDir,TRUE);
                
                sendRecipientErrorFailed() <- 0;
                supplierOrdersSucceeded() <- 0;
                supplierOrdersFailed() <- 0;
                orderMessagesSucceeded() <- 0;
                orderMessagesFailed() <- 0;
                responsesSucceeded() <- 0;
                responsesFailed() <- 0;
                despatchAdvicesSucceeded() <- 0;
                despatchAdvicesFailed() <- 0;
                invoiceMessagesSucceeded() <- 0;
                invoiceMessagesFailed() <- 0;
                creditNoteMessagesSucceeded() <- 0;
                creditNoteMessagesFailed() <- 0;
                eInvoicesSucceeded() <- 0;
                eInvoicesFailed() <- 0;
                blrwbrCount() <- 0;
                blrdnrCount() <- 0;
                blradfCount() <- 0;
                
                logToFile('edi', provider + ' ReceiveMessages count: ' + (GROUP SUM 1 IF fileName(INTEGER j) AND NOT fileIsDirectory(j) AND lower(right(fileName(j), 4)) = '.xml'));
                
                FOR STRING[255] fileName = fileName(INTEGER i) AND NOT fileIsDirectory(i) AND lower(right(fileName, 4)) = '.xml'
                ORDER getWord(fileName, '_', 2), fileName, i DO {
                    LOCAL file = XMLFILE();
                    READ 'file://' + importDir + fileName TO file;
                    data(i) <- file();
                    documentType(i) <- getDocumentType(fileName);
                    id(i) <- getFileName(fileName);
                    IF archiveDir THEN {
                        TRY{ mkdir(archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd')); }
                        WRITE data(i) TO archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                    }
                    overReceiveMessagesDocuDrive(i, importDir, exportDir, archiveDir, disableConfirmation, receiveSupplierMessages, sendReplies, invoices, provider);
                }
                
                LOCAL textMessage = TEXT();
                IF supplierOrdersSucceeded() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Загружено заказов поставщика: ' + supplierOrdersSucceeded();
                IF supplierOrdersFailed() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Не загружено заказов поставщика: ' + supplierOrdersFailed();
                IF orderMessagesSucceeded() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Загружено сообщений по заказам: ' + orderMessagesSucceeded();
                IF orderMessagesFailed() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Не загружено сообщений по заказам: ' + orderMessagesFailed();
                IF responsesSucceeded() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Загружено ответов по заказам: ' + responsesSucceeded();
                IF responsesFailed() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Не загружено ответов по заказам: ' + responsesFailed();
                IF despatchAdvicesSucceeded() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Загружено уведомлений об отгрузке: ' + despatchAdvicesSucceeded();
                IF despatchAdvicesFailed() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Не загружено уведомлений об отгрузке: ' + despatchAdvicesFailed();
                IF invoiceMessagesSucceeded() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Загружено сообщений по накладным: ' + invoiceMessagesSucceeded();
                IF invoiceMessagesFailed() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Не загружено сообщений по накладным: ' + invoiceMessagesFailed();
                IF creditNoteMessagesSucceeded() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Загружено сообщений по актам приемки: ' + creditNoteMessagesSucceeded();
                IF creditNoteMessagesFailed() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Не загружено сообщений по актам приемки: ' + creditNoteMessagesFailed();
                IF eInvoicesSucceeded() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Загружено электронных накладных: ' + eInvoicesSucceeded();
                IF eInvoicesFailed() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Не загружено электронных накладных: ' + eInvoicesFailed();
                IF eCreditNotesSucceeded() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Загружено электронных актов приемки: ' + eCreditNotesSucceeded();
                IF eCreditNotesFailed() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Не загружено электронных актов приемки: ' + eCreditNotesFailed();
                IF blrwbrCount() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Отвечено на ' + blrwbrCount() + ' BLRWBR';
                IF blrdnrCount() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Отвечено на ' + blrdnrCount() + ' BLRDNR';
                IF blradfCount() > 0 THEN textMessage() <- CONCAT '\n', textMessage(), 'Загружено ' + blradfCount() + ' BLRADF';
                
                IF NOT (GROUP SUM 1 IF fileName(INTEGER j) AND NOT fileIsDirectory(j) AND lower(right(fileName(j), 4)) = '.xml') THEN {
                    MESSAGE (OVERRIDE textMessage(), 'Не найдено новых сообщений') NOWAIT;
                }
            } ELSE {
                logToFile('edi', provider + ' ReceiveMessages: не задан каталог выгрузки сообщений для DocuDrive');
                MESSAGE  provider + ' Сообщения не получены: не задан каталог выгрузки сообщений для DocuDrive' NOWAIT;
            }
        } ELSE {
            logToFile('edi', provider + ' ReceiveMessages: не задан каталог загрузки сообщений от DocuDrive');
            MESSAGE  provider + ' Сообщения не получены: не задан каталог загрузки сообщений от DocuDrive' NOWAIT;
        }
    } CATCH {
        logToFile('edi', CONCAT '\n', provider + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
        MESSAGE  'Сообщения не получены. Обратитесь к администратору' NOWAIT;
    }
}

receiveMessagesDocuDrive (BOOLEAN invoices) {
    receiveMessagesDocuDrive(importDirectoryDocuDrive(), exportDirectoryDocuDrive(), archiveDirEDN(), disableConfirmationEDN(), receiveSupplierMessagesEDN(), TRUE, invoices, 'EDN');
}

//вообще логика сообщений, похоже, дублирует логику apn а в случе если они приходят от сервера edi у них еще и одинаковый номер
//возможно для накладных можно отделить те которые приходят с сервера, или хотя бы не затирать данные по apn. пока дублируем добавлением в номер мимвола m
overReceiveMessagesDocuDrive(INTEGER i, STRING[255] importDir, STRING[255] exportDir, STRING[100] archiveDir, BOOLEAN disableConfirmation, BOOLEAN receiveSupplierMessages, BOOLEAN sendReplies, BOOLEAN invoices, STRING[100] provider) + {
    IF lower(documentType(i)) == 'systemmessage' AND invoices THEN {
        TRY {
            IMPORT systemMessage XML FROM data(i);
            skipSystemmessage() <- NULL;
            overImportSystemmessage();
            IF NOT skipSystemmessage() THEN {
                CASE
                WHEN documentType() == 'BLRWBL' OR documentType() == 'BLRWBR' OR documentType() == 'BLRDLN' OR documentType() == 'BLRDNR' THEN {
                    LOCAL eInvoice = EInvoice();
                    eInvoice() <- CASE
                        WHEN (documentType() == 'BLRWBL' OR documentType() == 'BLRDLN') THEN eInvoiceSupplier(documentNumber())
                        WHEN (documentType() == 'BLRWBR' OR documentType() == 'BLRDNR') THEN eInvoiceCustomer(documentNumber());
                    IF eInvoice() THEN {
                        NEWSESSION NESTED LOCAL {
                            IF NOT eInvoiceMessage(eInvoice(), 'm' + messageDocumentNumber(), EInvoiceMessageKind.in) THEN NEW m = EInvoiceMessage {
                                number(m) <- 'm' + messageDocumentNumber();
                                eInvoice(m) <- eInvoice();
                                kind(m) <- EInvoiceMessageKind.in;
                            }
                            FOR EInvoiceMessage m == eInvoiceMessage(eInvoice(), 'm' + messageDocumentNumber(), EInvoiceMessageKind.in) DO {
                                dateTime(m) <- messageDocumentDate();
                                code(m) <- code();
                                description(m) <- OVERRIDE description(), description(code());
                                type(m) <- CASE
                                    WHEN documentType() == 'BLRWBL' THEN EInvoiceMessageType.systemmessage_blrwbl
                                    WHEN documentType() == 'BLRWBR' THEN EInvoiceMessageType.systemmessage_blrwbr
                                    WHEN documentType() == 'BLRDLN' THEN EInvoiceMessageType.systemmessage_blrdln
                                    WHEN documentType() == 'BLRDNR' THEN EInvoiceMessageType.systemmessage_blrdnr;
                                IF code(m) >= '1350' AND type(m) == EInvoiceMessageType.systemmessage_blrwbr 
                                     //подверждение уже приходило, не трогаем больше
                                    AND NOT (GROUP SUM 1 IF type(EInvoiceMessage em) == EInvoiceMessageType.blrapn_blrwbr AND code(em) == '2550' AND eInvoice(em) == eInvoice() AND NOT kind(em) == EInvoiceMessageKind.out) 
                                    //10 ошибок, значит есть системная проблема и автоматически не убираем признак выгрузки
                                    AND NOT (GROUP SUM 1 IF (code(EInvoiceMessage em) == '1354' OR code(em) == '1354') AND eInvoice(em) == eInvoice()) > 10
                                     THEN {
                                    exportedCustomer(eInvoice(m)) <- NULL;
                                }
                                XMLPath(m) <- archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + id(i);
                                APPLY NESTED LOCAL;
                                IF canceled() THEN {
                                    IF NOT disableConfirmation AND sendReplies THEN {
                                        LOCAL contentSubXML = FILE();
                                        EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = messageDocumentNumber(), code = '1450', description = applyMessage() XML TO contentSubXML;
                                        logToFile('edi', provider + ' RecipientError ' + id(i) +' request sent');
                                        TRY{ mkdir(exportDir + 'SYSTEMMESSAGE'); }
                                        TRY {
                                            WRITE data(i) TO exportDir + 'SYSTEMMESSAGE/' + id(i);
                                            logToFile('edi', provider + ' RecipientError ' + id(i) + ' request succeeded');
                                        } CATCH {
                                            sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                                            logToFile('edi', provider + ' RecipientError ' + id(i) + ': ' + messageCaughtException());
                                            MESSAGE provider + ' Сообщение об ошибке ' + id(i) + ' не выгружено: ' + messageCaughtException() NOWAIT;
                                        }
                                    }
                                    logToFile('edi', provider + ' Import EInvoiceMessage ' + id(i) + ' failed: ' + applyMessage());
                                    invoiceMessagesFailed() <- invoiceMessagesFailed() + 1;
                                } ELSE {
                                    IF NOT disableConfirmation THEN {
                                        TRY {
                                            delete(importDir + fileName(i)); 
                                            logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                                        } CATCH {
                                            logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': ' + messageCaughtException());
                                            MESSAGE  provider + ' Документ ' + id(i) + ' не помечен как обработанный: ' + messageCaughtException() NOWAIT;
                                        }
                                    }
                                    logToFile('edi', provider + ' Import EInvoiceMessage ' + id(i) + ' succeeded');
                                    invoiceMessagesSucceeded() <- invoiceMessagesSucceeded() + 1;
                                }
                            }
                        }
                    } ELSE {
                        IF confirmNotFoundInvoices() THEN {
                            IF NOT disableConfirmation THEN {
                                TRY {
                                    delete(importDir + fileName(i)); 
                                    logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                                } CATCH {
                                    logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': ' + messageCaughtException());
                                    MESSAGE  provider + ' Документ ' + id(i) + ' не помечен как обработанный: ' + messageCaughtException() NOWAIT;
                                }
                            }
                        } ELSE {
                            IF NOT disableConfirmation AND sendReplies THEN {
                                LOCAL contentSubXML = FILE();
                                EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = messageDocumentNumber(), code = '1450', description = (provider + ' Import EInvoiceMessage ' + id(i) + ' failed: ' + 'EInvoice ' + (OVERRIDE documentNumber(), 'NULL') + ' not found') XML TO contentSubXML;
                                logToFile('edi', provider + ' RecipientError ' + id(i) +' request sent');                                       
                                TRY{ mkdir(exportDir + 'SYSTEMMESSAGE'); }
                                TRY {
                                    WRITE data(i) TO exportDir + 'SYSTEMMESSAGE/' + id(i);
                                    logToFile('edi', provider + ' RecipientError ' + id(i) + ' request succeeded');
                                } CATCH {
                                    sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                                    logToFile('edi', provider + ' RecipientError ' + id(i) + ': ' + messageCaughtException());
                                    MESSAGE provider + ' Сообщение об ошибке ' + id(i) + ' не выгружено: ' + messageCaughtException() NOWAIT;
                                }
                            }
                        }
                        logToFile('edi', provider + ' Import EInvoiceMessage ' + id(i) + ' failed: ' + 'EInvoice ' + (OVERRIDE documentNumber(), 'NULL') + ' not found');
                        invoiceMessagesFailed() <- invoiceMessagesFailed() + 1;
                    }
                }
                WHEN documentType() == 'BLRAPN' OR documentType() == 'SYSTEMMESSAGE' THEN {
                    logToFile('edi', provider + ' Parse Invoice Message ' + id(i) + ' skipped for documentType ' + documentType());
                    IF NOT disableConfirmation THEN {
                        TRY {
                            delete(importDir + fileName(i)); 
                            logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
                        } CATCH {
                            logToFile('edi', provider + ' ConfirmDocumentReceived document ' + id(i) + ': ' + messageCaughtException());
                            MESSAGE  provider + ' Документ ' + id(i) + ' не помечен как обработанный: ' + messageCaughtException() NOWAIT;
                        }
                    }
                    invoiceMessagesFailed() <- invoiceMessagesFailed() + 1;
                }
                ELSE {
                    logToFile('edi', provider + ' Parse Invoice Message ' + id(i) + ' warning: unsupported documentType ' + (OVERRIDE documentType(), 'NULL'));
                }
            }
        } CATCH {
            IF NOT disableConfirmation AND sendReplies THEN {
                LOCAL contentSubXML = FILE();
                EXPORT exportSystemMessage OBJECTS documentId = id(i), documentNumber = messageDocumentNumber(), code = '1450', description = (CONCAT '\n', provider + ' Parse EInvoiceMessage ' + id(i) + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException()) XML TO contentSubXML;
                logToFile('edi', provider + ' RecipientError ' + id(i) +' request sent');                                                                       
                TRY{ mkdir(exportDir + 'SYSTEMMESSAGE'); }
                TRY {
                    WRITE data(i) TO exportDir + 'SYSTEMMESSAGE/' + id(i);
                    logToFile('edi', provider + ' RecipientError ' + id(i) + ' request succeeded');
                } CATCH {
                    sendRecipientErrorFailed() <- sendRecipientErrorFailed() + 1;
                    logToFile('edi', provider + ' RecipientError ' + id(i) + ': ' + messageCaughtException());
                    MESSAGE provider + ' Сообщение об ошибке ' + id(i) + ' не выгружено: ' + messageCaughtException() NOWAIT;
                }
            }
            logToFile('edi', CONCAT '\n', provider + ' Parse EInvoiceMessage ' + id(i) + ' error:', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            MESSAGE  'Ошибка при импорте сообщения ' + id(i) +'. Обратитесь к администратору' NOWAIT;
            invoiceMessagesFailed() <- invoiceMessagesFailed() + 1;
        }
    }
}

receiveInvoiceEDN 'Получить сообщения по электронным накладным' () {
    checkIsServer();
    IF isServer() THEN { IF useDocuDrive() THEN {receiveMessagesDocuDrive(TRUE);} ELSE {receiveMessagesEDN(TRUE);} }  
}

EXTEND FORM integrationData
    PROPERTIES() receiveEDN, archiveDirEDN, outputDirEDN, disableConfirmationEDN, receiveSupplierMessagesEDN, receiveInvoiceEDN, useDocuDrive
    PROPERTIES() SHOWIF useDocuDrive() exportDirectoryDocuDrive, importDirectoryDocuDrive
    PROPERTIES() READONLY confirmNotFoundOrdersEDN = confirmNotFoundOrders, confirmNotFoundInvoicesEDN = confirmNotFoundInvoices, disableAutoBlrapnEDN = disableAutoBlrapn
    PROPERTIES() SHOWIF useDocuDrive() READONLY askPasswordEDSServiceEDN = askPasswordEDSService
    OBJECTS lete = LegalEntity
    FILTERS isCompany(lete)
    PROPERTIES(lete) name READONLY, loginEDN, passwordEDN, hostEDN, portEDN
;
    
DESIGN integrationData {
    pane {
        NEW vsEDN {
            caption = 'EDN';
            NEW paramsEDN {
                caption = 'Общие';
                fill = 1;
                MOVE PROPERTY(archiveDirEDN());
                MOVE PROPERTY(outputDirEDN());
                MOVE PROPERTY(disableConfirmationEDN());
                MOVE PROPERTY(receiveSupplierMessagesEDN());
                MOVE BOX(lete);
            }
            NEW colEDN {
                type = CONTAINERH;
                fill = 1;
                NEW ovsEDN {
                    caption = 'Заказы';
                    MOVE PROPERTY(confirmNotFoundOrdersEDN);
                    MOVE PROPERTY(receiveEDN());
                }
                NEW ivsEDN {
                    caption = 'Электронные накладные';
                    MOVE PROPERTY (useDocuDrive());
                    MOVE PROPERTY (importDirectoryDocuDrive());
                    MOVE PROPERTY (exportDirectoryDocuDrive());
                    MOVE PROPERTY (confirmNotFoundInvoicesEDN);
                    MOVE PROPERTY (disableAutoBlrapnEDN);
                    MOVE PROPERTY(receiveInvoiceEDN());
                    MOVE PROPERTY(askPasswordEDSServiceEDN);
                    fill = 1;
                    NEW EDSServiceEDN {
                        type = TABBED;
                        fill = 1;
                        MOVE BOX(lee);
                        MOVE BOX(sedse);
                        MOVE BOX(eedse);
                    }
                }
            }
        }
    }
}