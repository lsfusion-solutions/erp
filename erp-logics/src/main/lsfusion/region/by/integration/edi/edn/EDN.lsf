MODULE EDN;

REQUIRE EDI, TopByApi;

NAMESPACE EDI;

EXTEND CLASS EDIProvider {
    edn 'ЭДиН'
}
prefix(EDIProvider e) += WHEN e == EDIProvider.edn THEN '002-';
name(EDIProvider e) += WHEN e == EDIProvider.edn THEN 'ООО "Электронные документы и накладные"';

loginEDN 'Имя пользователя EDN' = DATA STRING[100] (LegalEntity);
passwordEDN 'Пароль EDN' = DATA STRING[100] (LegalEntity) ECHO;
hostEDN 'Хост SOAP' = DATA STRING[100] (LegalEntity);
portEDN 'Порт' = DATA INTEGER (LegalEntity);
urlApiEDN 'Адрес REST API' = DATA STRING[100](LegalEntity);
extractEDN 'Формат docudrive' = DATA BOOLEAN (LegalEntity); //тут даже не то что распаковывать а вообще обмен в формате docurive
skipUnzip 'Сообщения не упакованы' = DATA BOOLEAN (LegalEntity); 
archiveDirEDN 'Папка принятых сообщений' = DATA STRING[100] ();
outputDirEDN 'Папка отправленных сообщений' = DATA STRING[100] ();
disableConfirmationEDN 'Отключить подтверждение сообщений' = DATA BOOLEAN ();
enableJavaStackEDN 'Включить логирование Java stack trace' = DATA BOOLEAN ();

document = DATA LOCAL RAWFILE();
FORM edocument
    PROPERTIES() document;

//-----------------------------------------------------------Docudrive------------------------------------------------//
useDocuDrive 'Использовать DocuDrive' = DATA BOOLEAN();

legalEntityLogin(STRING login) = GROUP MIN LegalEntity l BY loginEDN(l);
beforeOverReceiveMessages(INTEGER i, STRING[100] login, STRING[100] archiveDir) + {
    IF extractEDN(legalEntityLogin(login)) AND NOT skipUnzip(legalEntityLogin(login)) THEN {
        unzipped(STRING[100] s) <- NULL;
        IMPORT edocument FROM data(i);
        unzipping() <- file(document(), 'zip');
        makeUnzipFile();
        FOR unzipped(STRING[100] s) DO {
            data(i) <- XMLFILE(unzipped(s));
        }
        IF archiveDir THEN {
            WRITE data(i) TO archiveDir + '/received/' + toChar(currentDate(), 'yyyyMMdd') + '/' + id(i) + '_extarcted';
        }
    }
}

lockedEDN = DATA User (STRING) TABLE stringEDI;
lockResultEDN = DATA LOCAL NESTED BOOLEAN ();

lockEDN(STRING object) {
    NEWSESSION {
        lockResultEDN() <- NULL;
        APPLY SERIALIZABLE {
            IF NOT object THEN
                RETURN;
            IF lockedEDN(object) THEN {
                cancel();
            } ELSE {
                lockedEDN(object) <- currentUser();
                lockResultEDN() <- TRUE;
            }
        }
    }
}

unlockEDN(STRING object) {
    NEWSESSION {
        APPLY lockedEDN(object) <- NULL;
    }
}

onStarted() + {
    NEWSESSION {
        lockedEDN(STRING l) <- NULL WHERE lockedEDN(l);
        APPLY;
    }
}

overReceiveMessagesEDN ABSTRACT LIST(LegalEntity);
receiveMessagesEDN () {
    FOR LegalEntity le == [GROUP MIN LegalEntity l BY loginEDN(l)](STRING login) AND passwordEDN(le) DO {
        NEWSESSION {
            lockEDN(login);
            IF lockResultEDN() THEN {
                TRY {
                    overReceiveMessagesEDN(le);
                    receiveMessages(login, passwordEDN(le), ('https://' + hostEDN(le) + (IF portEDN(le) THEN ':' + portEDN(le) ELSE '') + '/topby/DmcService?wsdl'), archiveDirEDN(), disableConfirmationEDN(), 'EDN');
                } FINALLY {
                    unlockEDN(login);
                }
            } ELSE {
                MESSAGE 'Уже выполняется получение сообщений EDN для ' + login + '. Подождите...' NOWAIT;
            }
        }
    }
}

exportDirectoryDocuDrive 'Каталог выгрузки для DocuDrive (c /)' = DATA STRING[255]() CHARWIDTH 50;
importDirectoryDocuDrive 'Каталог загрузки от DocuDrive (c /)' = DATA STRING[255]() CHARWIDTH 50;

overReceiveMessagesDocuDrive ABSTRACT LIST (INTEGER, STRING[255], STRING[255], STRING[100], BOOLEAN, STRING[100]);

getFileName(TEXT txt) = getWord(getWord(txt, '\\', wordCount(txt, '\\')), '/', wordCount(txt, '/'));
getDocumentType(TEXT txt) = getWord(getWord(getWord(txt, '\\', wordCount(txt, '\\')), '/', wordCount(txt, '/')), '_', 1);

receiveMessagesDocuDrive (STRING[255] importDir, STRING[255] exportDir, STRING[100] archiveDir, BOOLEAN disableConfirmation, STRING[100] provider) {
    TRY {
        IF importDir THEN {
            IF exportDir THEN {
                listFiles(importDir, TRUE);

                fillStartParams();

                logToFile('edi', provider + ' ReceiveMessages count: ' + (GROUP SUM 1 IF fileName(INTEGER j) AND NOT fileIsDirectory(j) AND lower(right(fileName(j), 4)) = '.xml'));

                FOR STRING[255] fileName = fileName(INTEGER i) AND NOT fileIsDirectory(i) AND lower(right(fileName, 4)) = '.xml'
                    ORDER getWord(fileName, '_', 2), fileName, i DO {
                    LOCAL file = XMLFILE();
                    READ 'file://' + importDir + fileName TO file;
                    data(i) <- file();
                    documentType(i) <- getDocumentType(fileName);
                    id(i) <- getFileName(fileName);
                    IF archiveDir THEN {
                        TRY{ mkdir(archiveDir + '/received/' + toChar(currentDate(), 'yyyyMMdd')); }
                        WRITE data(i) TO archiveDir + '/received/' + toChar(currentDate(), 'yyyyMMdd') + '/' + id(i);
                    }
                    overReceiveMessagesDocuDrive(i, importDir, exportDir, archiveDir, disableConfirmation, provider);
                }

                fillEndParams();
                IF NOT (GROUP SUM 1 IF fileName(INTEGER j) AND NOT fileIsDirectory(j) AND lower(right(fileName(j), 4)) = '.xml') THEN {
                    MESSAGE (OVERRIDE textMessage(), 'Не найдено новых сообщений') NOWAIT;
                }
            } ELSE {
                logToFile('edi', provider + ' ReceiveMessages: не задан каталог выгрузки сообщений для DocuDrive');
                MESSAGE provider + ' Сообщения не получены: не задан каталог выгрузки сообщений для DocuDrive' NOWAIT;
            }
        } ELSE {
            logToFile('edi', provider + ' ReceiveMessages: не задан каталог загрузки сообщений от DocuDrive');
            MESSAGE provider + ' Сообщения не получены: не задан каталог загрузки сообщений от DocuDrive' NOWAIT;
        }
    } CATCH {
        logToFile('edi', CONCAT '\n', provider + ' error:', messageCaughtException(), javaStackTraceCaughtException() IF logStackForException() IF enableJavaStackEDN(), lsfStackTraceCaughtException());
        MESSAGE 'Сообщения не получены. Обратитесь к администратору' NOWAIT;
    }
}

lockedDocuDrive = DATA User ();
lockResultDocuDrive = DATA LOCAL NESTED BOOLEAN ();

lockDocuDrive() {
    NEWSESSION {
        lockResultDocuDrive() <- NULL;
        APPLY SERIALIZABLE {
            IF lockedDocuDrive() THEN {
                cancel();
            } ELSE {
                lockedDocuDrive() <- currentUser();
                lockResultDocuDrive() <- TRUE;
            }
        }
    }
}

unlockDocuDrive() {
    NEWSESSION {
        APPLY lockedDocuDrive() <- NULL;
    }
}

onStarted() + {
    NEWSESSION {
        lockedDocuDrive() <- NULL WHERE lockedDocuDrive();
        APPLY;
    }
}

receiveMessagesDocuDrive () {
    NEWSESSION {
        lockDocuDrive();
        IF lockResultDocuDrive() THEN {
            TRY {
                receiveMessagesDocuDrive(importDirectoryDocuDrive(), exportDirectoryDocuDrive(), archiveDirEDN(), disableConfirmationEDN(), 'EDN');
            } FINALLY {
                unlockDocuDrive();
            }
        } ELSE {
            MESSAGE 'Уже выполняется получение сообщений DocuDrive. Подождите...' NOWAIT;
        }
    }
}
//-----------------------------------------------------------Docudrive------------------------------------------------//

//-----------------------------------------------------------REST API-------------------------------------------------//
useDocuway 'Не использовать формат СТТ для заказов' = DATA BOOLEAN();

importRequestResult() {
    IF sendRequestEDIStatus() == 200 OR sendRequestEDIStatus() == 202 THEN {
        requestError() <- NULL;
    } ELSE {
        requestError() <- CONCAT ' ', 'Неизвестная ошибка: статус ', STRING[3](sendRequestEDIStatus());
    }
}
// /documents
fileName = DATA LOCAL STRING();

FORM documentsEDN
    PROPERTIES() fileName, documentType, document;

// /documents/new
GROUP headers;

downloadFileName = DATA LOCAL STRING(INTEGER);
processedDateTime = DATA LOCAL ZDATETIME(INTEGER);

FORM getDocumentsEDN
    OBJECTS data = INTEGER
    PROPERTIES(data) IN headers
        id EXTID 'documentId', downloadFileName, documentType EXTID 'type', processedDateTime;

overReceiveMessagesEDN ABSTRACT LIST (INTEGER, STRING[100], STRING[100], TEXT, STRING[100], BOOLEAN, STRING[100]);

receiveMessagesEDN (STRING[100] login, STRING[100] password, TEXT url, STRING[100] archiveDir, BOOLEAN disableConfirmation, STRING[100] provider) {
    TRY {
        IF login AND password THEN {

            headers('Authorization') <- 'Basic ' + encodeText(login + ':' + password, 'base64');
            EXTERNAL HTTP GET url +'/documents/new' HEADERS headers TO sendRequestEDIResponse;
            logToFile('edi', provider + ' (' + login + ') ReceiveMessages request sent' + url +'/documents/new');
            
            sendRequestEDIStatus() <- statusHttp();
            importRequestResult();
            
            IF requestError() THEN {
                logToFile('edi', provider + ' (' + login + ') ReceiveMessages: ' + requestError());
                MESSAGE  provider + ' (' + login + ') Сообщения не получены: ' + requestError() NOWAIT;
            } ELSE {
                IMPORT getDocumentsEDN JSON FROM sendRequestEDIResponse();

                fillStartParams();
                IF (GROUP SUM 1 IF documentType(INTEGER i)) > 0 THEN textMessage() <- CONCAT '\n', textMessage(), provider + '(' + login + ') Сообщений в очереди: ' + (GROUP SUM 1 IF documentType(INTEGER i));
                logToFile('edi', provider + ' (' + login + ') ReceiveMessages count: ' + (GROUP SUM 1 IF documentType(INTEGER i)));

                FOR documentType(INTEGER i) ORDER processedDateTime(i) DO {
                    logToFile('edi', provider + ' (' + login + ') Check Message type:' + documentType(i) + ' id:' + id(i));
                    overReceiveMessagesEDN(i, login, password, url, archiveDir, disableConfirmation, provider);
                }

                fillEndParams();
                IF sendRecipientErrorFailed() == 0 THEN {
                    MESSAGE (OVERRIDE textMessage(), provider + '(' + login + ') Не найдено новых сообщений') NOWAIT;
                }
            }

        } ELSE {
            logToFile('edi', provider + ' (' + login + ') ReceiveMessages: не заданы имя пользователя / пароль / хост');
            MESSAGE  provider + ' (' + login + ') Сообщения не получены: не заданы имя пользователя / пароль / хост' NOWAIT;
        }
    } CATCH {
        logToFile('edi', CONCAT '\n', provider + ' (' + login + ') error:', messageCaughtException(), javaStackTraceCaughtException() IF logStackForException() IF enableJavaStackEDN(), lsfStackTraceCaughtException());
        MESSAGE provider + '(' + login + ') Сообщения не получены. Обратитесь к администратору' NOWAIT;
    }
}

receiveMessagesEDNApi () {
    FOR LegalEntity le == [GROUP MIN LegalEntity l BY loginEDN(l)](STRING login) AND passwordEDN(le) DO {
        NEWSESSION {
            lockEDN(login);
            IF lockResultEDN() THEN {
                TRY {
                    receiveMessagesEDN(login, passwordEDN(le), 'https://' + urlApiEDN(le), archiveDirEDN(), disableConfirmationEDN(), 'EDN');
                } FINALLY {
                    unlockEDN(login);
                }
            } ELSE {
                MESSAGE 'Уже выполняется получение сообщений EDN для ' + login + '. Подождите...' NOWAIT;
            }
        }
    }
}

// APERAK
GROUP systemMessage_Header EXTID 'SystemMessage-Header';
GROUP systemMessageReference EXTID 'SystemMessageReference' : systemMessage_Header;

FORM aperack FORMEXTID 'Document-ApplicationMessage'
    PROPERTIES() IN systemMessageReference
        documentType EXTID 'DocumentType',
        documentNumber EXTID 'DocumentNumber'
    PROPERTIES() IN systemMessage_Header
        messageDocumentNumber EXTID 'SystemMessageNumber',
        messageDocumentDate EXTID 'SystemMessageDate', 
        code EXTID 'SystemMessageCode', 
        description EXTID 'SystemMessageText'
;

overImportAperak ABSTRACT LIST FIRST(INTEGER, STRING[100], STRING[100], TEXT, STRING[100], BOOLEAN, STRING[100] );
overImportAperak(INTEGER i, STRING[100] login, STRING[100] password, TEXT url, STRING[100] archiveDir, BOOLEAN disableConfirmation, STRING[100] provider) + {
    logToFile('edi', provider + ' (' + login + ') Parse Aperack ' + id(i) + ' warning: unsupported Reference documentType ' + (OVERRIDE documentType(), 'NULL'));
}

overReceiveMessagesEDN(INTEGER i, STRING[100] login, STRING[100] password, TEXT url, STRING[100] archiveDir, BOOLEAN disableConfirmation, STRING[100] provider) + {
    IF documentType(i) == 'APERAK' THEN {
        TRY {
            
            EXTERNAL HTTP GET url +'/documents/'+id(i)+ '/content' HEADERS headers TO xmlFile;
            
            IF archiveDir THEN {
                TRY{ mkdir(archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd')); }
                WRITE xmlFile() TO archiveDir + '/received/' + toChar(currentDate(),'yyyyMMdd') + '/' + downloadFileName(i);
            }
            
            IMPORT aperack XML FROM xmlFile();
            
            overImportAperak(i, login, password, url, archiveDir, disableConfirmation, provider);
            
        } CATCH {
            logToFile('edi', CONCAT '\n', provider + ' (' + login + ') Parse Aperack ' + id(i) + ' error:', messageCaughtException(), javaStackTraceCaughtException() IF logStackForException() IF enableJavaStackEDN(), lsfStackTraceCaughtException());
            MESSAGE  'Ошибка при импорте сообщения ' + id(i) +'. Обратитесь к администратору' NOWAIT;
            responsesFailed() <- responsesFailed() + 1;
        }
    }
}

confirmDocument(INTEGER i, STRING[100] login, STRING[100] password, TEXT url) {
    headers('Authorization') <- 'Basic ' + encodeText(login + ':' + password, 'base64');
    EXTERNAL HTTP url +'/documents/'+id(i)+ '/mark-downloaded' HEADERS headers;
    logToFile('edi', 'END (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request sent');

    importRequestResult();
    IF requestError() THEN {
        logToFile('edi', 'END (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': ' + requestError());
        MESSAGE 'END (' + login + ') Документ ' + id(i) + ' не помечен как обработанный: ' + requestError() NOWAIT;
    } ELSE {
        logToFile('edi', 'END (' + login + ') ConfirmDocumentReceived document ' + id(i) + ': request succeeded');
    }
}

//-----------------------------------------------------------REST API-------------------------------------------------//


receiveEDN 'Получить сообщения' () {
    checkIsServer();
    IF isServer() THEN {
        IF useDocuway() THEN {
            receiveMessagesEDNApi();
            skipImportOrders() <- TRUE;
        }
        receiveMessagesEDN();
        IF useDocuDrive() THEN {receiveMessagesDocuDrive();}
    }
}

EXTEND FORM integrationData
    PROPERTIES() receiveEDN, archiveDirEDN, outputDirEDN, disableConfirmationEDN, useDocuway

    OBJECTS lete = LegalEntity
    FILTERS isCompany(lete)
    PROPERTIES(lete) name READONLY, loginEDN, passwordEDN, hostEDN, portEDN, urlApiEDN, extractEDN
;

DESIGN integrationData {
    edi {
        NEW vsEDN {
            caption = 'ЭДиН';
            horizontal = TRUE;
            NEW col1EDN {
                NEW params {
                    caption = 'Общие';
                    MOVE PROPERTY(archiveDirEDN());
                    MOVE PROPERTY(outputDirEDN());
                    MOVE PROPERTY(disableConfirmationEDN());
                    MOVE PROPERTY(useDocuway());
                    MOVE PROPERTY(receiveEDN());
                }
            }
            NEW col2EDN {
                fill = 1;
                MOVE BOX(lete);
            }
        }
    }
}