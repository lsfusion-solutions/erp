MODULE OperationTitanPOS;

REQUIRE Utils, Time, StructureTitanPOS;

onShowError 'Сообщение об ошибках' (STRING emsg) { MESSAGE emsg; }
onShowError 'Сообщение об ошибках' (STRING emsg, INTEGER ecode) { titanECode() <- ecode; MESSAGE emsg; }


onFillDataHeaders 'Заполнение стандартного заголовка' (CashRegister o) {
    pin() <- titanPin(o);
    titanKey() <- titanSid();
    sendCashier() <- STRING[16](OVERRIDE name(currentUser()), login(currentUser()), 'Кассир');
}

onSaveLog 'Запись отдельного лога' (CashRegister o, STRING cmsg, cmsg2) {
    LOCAL ctxt = TEXT ();
    IF NOT logPath(o) THEN RETURN;
    ctxt() <- currentDateTime() + ', ' + cmsg;
    fileToString(exportFile(),'UTF-8');
    ctxt() <- ctxt() + '\n' + resultString() + repeat('-',70) +'\n';
    IF NOT cmsg2 THEN {
        fileToString(titanResult(),'UTF-8');
        ctxt() <- ctxt() + resultString() + repeat('=',70) +'\n';

    } ELSE ctxt() <- ctxt() +  cmsg2 + '\n' + repeat('=',70) +'\n';
    appendToFile(logPath(o),ctxt());
}


onSend 'Передача данных' (CashRegister o, STRING operation, cmsg) {
    LOCAL emsg, hmsg, smsg, vmsg, omsg = STRING ();
    titanEMessage() <- NULL; titanECode() <- NULL; status() <- NULL;
    omsg() <- 'Операция: ' + operation + ', ' + cmsg;
    TRY {
        EXTERNAL HTTP POST 'http://localhost:' + titanPort(o) +'/' + operation PARAMS exportFile() TO titanResult;
        onSaveLog(o, omsg(), NULL);
    } CATCH {
        titanECode() <- IF statusHttp() THEN statusHttp() ELSE 0;
        hmsg() <- trim(toChar(titanECode(), '999')) + ', Ошибка выполнения HTTP запроса.';
        vmsg() <- messageCaughtException();
    }
    IMPORT receiveForm JSON FROM titanResult();
    smsg() <- IF status() THEN 'Статус: ' + trim(toChar(status(),'99')) + ', ' + error();
    IF titanECode() THEN {
        emsg() <- 'Операция: ' + cmsg + '\n' + hmsg();
        titanEMessage() <- 'Операция: ' + cmsg + '\n' + repeat('-',40) + '\n' + hmsg();
        CASE
            WHEN titanECode() = 0 THEN {
                emsg() <- emsg() + ' Ответ от сервера не получен. Проверьте работу службы';
                titanEMessage() <- titanEMessage() + '\nОтвет от сервера не получен\nПроверьте работу службы';
            }
            WHEN titanECode() = 400 THEN {
                emsg() <- emsg() + ' Ошибка в запросе.';
                titanEMessage() <- titanEMessage() + '\nОшибка в запросе';
            }
            WHEN titanECode() = 401 THEN {
                emsg() <- emsg() + ' Неожидаемое значение ID сессии (TitanKey).';
                titanEMessage() <- titanEMessage() + '\nНеожидаемое значение ID сессии (TitanKey)';
            }
            WHEN titanECode() = 404 THEN {
                emsg() <- emsg() + ' Неизвестная операция.';
                titanEMessage() <- titanEMessage() + '\nНеизвестная операция';
            }
            WHEN titanECode() = 405 THEN {
                emsg() <- emsg() + ' Метод не поддерживается.';
                titanEMessage() <- titanEMessage() + '\nМетод не поддерживается';
            }
            WHEN titanECode() = 406 THEN {
                emsg() <- emsg() + ' Ошибка работы с СКО.';
                titanEMessage() <- titanEMessage() + '\nОшибка работы с СКО';
            }
        emsg() <- emsg() + (OVERRIDE ' ' + smsg(),'') + (OVERRIDE ' ' + vmsg(),'');
        titanECode() <- IF status() THEN status() ELSE titanECode();
        titanEMessage() <- titanEMessage() + (OVERRIDE '\n' + smsg(),'') + (OVERRIDE '\n' + vmsg(),'');
        onSaveLog(o, omsg(), emsg());
    }  ELSE {
        IF status() = 0 THEN {
            titanSid() <- titanKey(); // ID сессии - каждый раз новое
            RETURN ;
        }
        titanECode() <- status();
        titanEMessage() <- (OVERRIDE smsg(),'');
    }
}


eqInit 'Инициализация' (CashRegister o) {
    titanKey() <- NULL;
    EXPORT sendForm JSON;
    FOR iterate(INTEGER i,1,100) DO {
        onSend(o,'init','Инициализация СКО');
        CASE
            WHEN NOT titanECode() THEN BREAK;        // нет ошибок
            WHEN titanECode() != 500 THEN BREAK;     // считаем, что идет инициализация СКО, если код = 500
            ELSE
            sleep(100);
    }
}


eqOpen 'Открытия сеанса с СКО' (CashRegister o) {
    IF NOT titanSid() THEN eqInit(o);
    IF titanECode() THEN RETURN;
    onFillDataHeaders(o);
    EXPORT sendOpen JSON;
    onSend(o,'open','Открытие сеанса с СКО');
}


eqClose 'Закрытие сеанса с СКО' (CashRegister o) {
    IF NOT titanSid() THEN RETURN;
    titanKey() <- titanSid();
    EXPORT sendForm JSON;
    onSend(o,'close','Закрытие сеанса с СКО');
    titanSid() <- NULL;
}


eqGetState 'Получение статуса СКО' (CashRegister o) {
    IF NOT titanSid() THEN {
        eqOpen(o);
        IF titanECode() THEN RETURN;
    }
    titanKey() <- titanSid();
    EXPORT sendForm JSON;
    onSend(o,'info','Получение статуса');
    IF titanECode() = 8 OR titanECode() = 401 THEN {  
        // не ожидаемое значение сессионного ключа
        // разные формы, например POS и кассовые операции будут иметь свое значение SID
        // поэтому при ошибке SID повторим операцию ролучения статуса
        titanSid() <- NULL;
        eqOpen(o);
        IF titanECode() THEN RETURN;
        titanKey() <- titanSid();
        EXPORT sendForm JSON;
        onSend(o,'info','Получение статуса');
    }
}


eqOpenShift 'Открытие смены' (CashRegister o) {
    eqGetState(o);
    IF titanECode() THEN { onShowError(titanEMessage()); RETURN; }
    IF shiftOpened() THEN { onShowError('Смена уже открыта',99); RETURN; }
    onFillDataHeaders(o);
    EXPORT sendForm JSON;
    onSend(o,'openShift','Открытие смены');
    IF titanECode() THEN onShowError(titanEMessage());
}


eqXReport 'X-отчет' (CashRegister o) {
    eqGetState(o);
    IF titanECode() THEN { onShowError(titanEMessage()); RETURN; }
    IF NOT shiftOpened() THEN { onShowError('Смена не открыта',99); RETURN; }
    onFillDataHeaders(o);
    EXPORT sendForm JSON;
    onSend(o,'xReport','Z-отчет');
    IF titanECode() THEN onShowError(titanEMessage());
}


eqZReport 'Z-отчет' (CashRegister o) {
    eqGetState(o);
    IF titanECode() THEN { onShowError(titanEMessage()); RETURN; }
    IF NOT shiftOpened() THEN { onShowError('Смена не открыта',99); RETURN; }
    IF totalSum() > 0 THEN {
        LOCAL cmsg = STRING ();
        cmsg() <- 'В кассе присутствуют наличные: ' + trim(toChar(totalSum(),'999999999.99')) + 
                    ' руб.\nНеобходимо выполнить операцию < Изъятие >';
        onShowError(cmsg(),99);
        RETURN;
    }
    onFillDataHeaders(o);
    EXPORT sendForm JSON;
    onSend(o,'closeShift','Z-отчет');
    IF titanECode() THEN { onShowError(titanEMessage()); RETURN; }
    titanSid() <- NULL;
}


FORM sumCashDrawer 'Сумма наличных' PROPERTIES () READONLY totalSum;
DESIGN sumCashDrawer {PROPERTY (totalSum()) {caption = 'Сумма';} }

eqCashMoney 'Сумма наличных' (CashRegister o) {
    eqGetState(o);
    IF titanECode() THEN { onShowError(titanEMessage()); RETURN; }
    SHOW sumCashDrawer;
}


eqCashInCome 'Внесение' (CashRegister o,NUMERIC[10,2] suma) {
    eqGetState(o);
    IF titanECode() THEN { onShowError(titanEMessage()); RETURN; }
    IF NOT shiftOpened() THEN { onShowError('Смена не открыта',99); RETURN; }
    IF NOT suma OR suma = 0.00 THEN { onShowError('Значение суммы не определено',99); RETURN; }
    onFillDataHeaders(o);
    sendTotalSum() <- suma;
    isDeposit() <- TTRUE;
    EXPORT sendInOutMoney JSON;
    onSend(o,'moneyOrder','Операция: Внесение');
    IF titanECode() THEN onShowError(titanEMessage());
}


eqCashOutCome 'Изъятие' (CashRegister o,NUMERIC[10,2] suma) {
    eqGetState(o);
    IF titanECode() THEN { onShowError(titanEMessage()); RETURN; }
    IF NOT shiftOpened() THEN { onShowError('Смена не открыта',99); RETURN; }
    IF NOT suma OR suma = 0.00 THEN { onShowError('Значение суммы не определено',99); RETURN; }
    IF totalSum() < suma THEN { onShowError('Недостаточно наличных',99); RETURN; }
    onFillDataHeaders(o);
    sendTotalSum() <- suma;
    isDeposit() <- TFALSE;
    EXPORT sendInOutMoney JSON;
    onSend(o,'moneyOrder','Операция: Изъятие');
    IF titanECode() THEN onShowError(titanEMessage());
}


CLASS SelectOperation 'Выбор операции' { p1 '1. Копия документа', p2 '2. Копия по номеру', p3 '3. Копия Z-отчета' }
selectOperation = DATA LOCAL SelectOperation ();
nameSelectOperation 'Операция' = staticCaption(selectOperation());

numberDoc '№ документа' = DATA LOCAL INTEGER ();
lastNumberDoc 'Последний чек' = DATA LOCAL INTEGER ();

FORM copyDocs 'Копия документа' PROPERTIES () numberDoc, nameSelectOperation PROPERTIES() READONLY lastNumberDoc;
DESIGN copyDocs {
    GROUP() {
        NEW cnt {
            horizontal = FALSE ;
            MOVE PROPERTY (numberDoc());
            MOVE PROPERTY (lastNumberDoc()) {background= RGB(255, 255, 204);}
            MOVE PROPERTY (nameSelectOperation());
        }
    }
}


eqCopyDoc 'Копия документа' (CashRegister o) {
    eqGetState(o);
    IF titanECode() THEN { onShowError(titanEMessage()); RETURN; }
    selectOperation() <- GROUP MAX (SelectOperation s) IF left(staticCaption(s),1) = '1';
    numberDoc() <- NULL; 
    IF shiftOpened() AND docNumber() > 0 THEN lastNumberDoc() <- docNumber() - 1;  
    DIALOG copyDocs DO {
        onFillDataHeaders(o);
        copyDocNumber() <- NULL; copyZReport() <- NULL;
        CASE
            WHEN left(nameSelectOperation(),1) = '1' THEN {
                EXPORT sendCopyDocNumber JSON;
                onSend(o,'printLast','Копия последнего документа');
            }
            WHEN left(nameSelectOperation(),1) = '2' THEN {
                copyDocNumber() <- numberDoc();
                EXPORT sendCopyDocNumber JSON;
                onSend(o,'printCopy','Копия по номеру');
            }
            WHEN left(nameSelectOperation(),1) = '3' THEN {
                copyZReport() <- numberDoc();
                EXPORT sendCopyDocNumber JSON;
                onSend(o,'printCopyZ','Копия Z отчета');
            }
        IF titanECode() THEN onShowError(titanEMessage());
    }
}


eqSale 'Печать чека' (CashRegister o, Receipt r) {
    LOCAL sale, return = INTEGER ();
    eqGetState(o);
    IF titanECode() THEN { onShowError(titanEMessage()); RETURN; }
    IF NOT shiftOpened() THEN { onShowError('Смена не открыта',99); RETURN; }
    sale() <- GROUP SUM 1 IF receipt(ReceiptDetail d) = r AND d IS ReceiptSaleDetail; // продажа
    return() <- GROUP SUM 1 IF receipt(ReceiptDetail d) = r AND d IS ReceiptReturnDetail; // возврат
    IF sale() AND return() THEN {onShowError('Не допустимые операции\n<Продажа> и <Возврат> в одном чеке',99); RETURN;}
    onFillDataHeaders(o);
    IF sale() THEN receiptRefund() <- TFALSE; ELSE receiptRefund() <- TTRUE; 
    receiptTotalSum() <- NULL; receiptDiscountSum() <- NULL;
    FOR (ReceiptDetail d IS ReceiptDetail) AND receipt(d) = r DO {
        receiptTotalSum() <- receiptTotalSum() (+) sum(d);
        receiptDiscountSum() <- receiptDiscountSum() (+) discountSum(d);
    }
    receiptDiscountSum() <- receiptDiscountSum() (+) discountSum(r);
    EXPORT saleForm FILTERS receipt(lines) = r, receipt(payments) = r JSON;
    onSend(o,'check',IF sale() THEN 'Чек продажи' ELSE 'Возврат товара');
    IF titanECode() THEN onShowError(titanEMessage());
}

