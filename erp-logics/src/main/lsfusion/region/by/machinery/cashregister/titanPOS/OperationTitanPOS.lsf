MODULE OperationTitanPOS;

REQUIRE Utils, Time, StructureTitanPOS, OperationTitanPOSCommon;
// принцип работы СКО.
// Есть три операции для СКО: инициализация (init), открытие сеанса СКО (open) и открытие смены (openShift)
// перед каждой операцией проверяем открытие сеанса (здесь equGetState) или 
// открытие смены для финансовых операций (здесь equOpenShift, которая вызывает также equGetState)
// Если СКО не открыт для работы, будет сделана попытка его открыть или открыть смену.

tsum (NUMERIC[10,2] s) = lpad(trim((IF s THEN (IF s < 1 THEN toChar(s,'0.00') ELSE toChar(s,'9999999.00')) ELSE '0.00')),10,' ') + '\n';

bonusText 'Текст для расчетов по бонусам' (Receipt r) {
    receiptFooter() <- NULL;
    IF NOT numberDiscountCard(r) THEN RETURN;
    receiptFooter() <-
    '----------------------------------------\n' +
        'ИТОГИ ПРИ РАСЧЕТЕ БОНУСАМИ\n' +
        'ФИО: ' + (OVERRIDE trim(nameLegalEntityDiscountCard(r)),'') + '\n' +
        'Код карты: ' + numberDiscountCard(r) + '\n' + 
        'Начислено с продажи:   ' + tsum(signedBonusSum(r)) +
        'Оплачено при продаже:  ' + tsum(bonusPaidReceiptDetail(r)) +
        'Доступно для расчетов: ' + tsum(totalBonuses(r) (-) bonusPaidReceiptDetail(r)) +
        '----------------------------------------';
}

//FORM pay 'Оплаты, Проверка'
//    OBJECTS p = Payment
//    PROPERTIES(p) receipt, sum, namePaymentType, namePaymentMeans, sidPaymentType 
//;
// в методе SHOW pay FILTERS receipt(p) = r;

eqSale 'Печать чека' (CashRegister o, Receipt r) {
    LOCAL sale, return = INTEGER ();
    return() <- NULL; sale() <- NULL;
    eqOpenShift(o, nameEmployee(r));
    IF titanECode() THEN {
        onShowError(titanEMessage()); 
        RETURN;
    }
    receiptTotalSum() <- NULL; receiptDiscountSum() <- NULL;
    FOR (ReceiptDetail d IS ReceiptDetail) AND receipt(d) = r ORDER d DO {
        IF type(d) = 'Продажа' OR type(d) = 'Сертификат' THEN sale() <- 1; ELSE return() <- 1; // тип продажи
        receiptTotalSum() <- receiptTotalSum() (+) sum(d);
        receiptDiscountSum() <- receiptDiscountSum() (+) discountSum(d) (+) bonusPaid(d);
    }
    receiptDiscountSum() <- receiptDiscountSum() (+) discountSum(r);
    IF NOT titanNotInfoBonus(o) THEN bonusText(r); // расчет по бонусам
    IF sale() THEN receiptRefund() <- TFALSE; ELSE receiptRefund() <- TTRUE;
    IF NOT sale() AND receiptDiscountSum() AND version(o) > 2.1 THEN {
        // для чека возврата со скидкой для версии > 2.1 (RF35), для RF36 - надо проверять, возможно как для 2.1
        EXPORT returnForm FILTERS receipt(lines) = r, receipt(payments) = r JSON;
    }  ELSE {
        // для всех прочих чеков возврата и продажи
        EXPORT saleForm FILTERS receipt(lines) = r, receipt(payments) = r JSON;
    }
    onSend(o,'check',IF sale() THEN 'Чек продажи' ELSE 'Возврат товара');
    IF titanECode() THEN {
        onShowError(titanEMessage());
        RETURN;
    }
    number(r) <- INTEGER(number());
    // Дату чека не меняем, так как действует Ограничение: Дата чека должна быть равна дате Z отчета
    time(r) <- TIME(position()); // меняем время, чтобы совпадало с чеком
    // авто-копия чека, если была оплата сертификатом
    IF sale() AND titanAutoCopy(o) THEN {
        IF GROUP MAX (Payment p) IF receipt(p) = r AND sidPaymentType(p) ='giftcard' AND sum(p) THEN {
            numberDoc() <- NULL; copyDocNumber() <- NULL; copyZReport() <- NULL;
            lastNumberDoc() <- INTEGER(number()) - 1;
            onFillDataHeaders(o);
            EXPORT sendCopyDocNumber JSON;
            onSend(o, 'printLast', 'Копия последнего документа, автокопия');
            IF titanECode() THEN {
                titanECode() <- NULL; // сбрасываем чтобы чек провелся
                MESSAGE titanEMessage() + '\nВыполните копию последнего чека\nчерез кнопку на форме'; // но ошибку выводим
            }                        
        }
    }
    eqOpenCashDrawer(o);
}

eqReset 'Аннулировать чек' (CashRegister o, Receipt r) {
    eqOpenShift(o,NULL);
    IF titanECode() THEN { onShowError(titanEMessage()); RETURN; }
    onFillDataHeaders(o);
    resetDocNumber() <- number(r);
    EXPORT sendResetDocNumber JSON;
    onSend(o,'rollback','Операция: Аннулирование чека');
    IF titanECode() THEN onShowError(titanEMessage());
}

eqZReport 'Z-отчет' (CashRegister o) {
    eqGetState(o);
    IF titanECode() THEN { onShowError(titanEMessage()); RETURN; }
    IF NOT shiftOpened() THEN { onShowError('Смена не открыта.\nВыполните операцию: Открыть Z-отчет'); RETURN; }
    IF totalSum() > 0 THEN {
        LOCAL cmsg = STRING ();
        cmsg() <- 'В кассе присутствуют наличные: ' + trim(toChar(totalSum(),'999999999.99')) +
            ' руб.\nНеобходимо выполнить операцию < Изъятие >';
        onShowError(cmsg(),99);
        RETURN;
    }
    onFillDataHeaders(o);
    EXPORT sendForm JSON;
    onSend(o,'closeShift','Z-отчет');
    IF titanECode() THEN {
        onShowError(titanEMessage());
        RETURN;
    }
    IF version(o) > 2.1 THEN {
        IF docNumberRep() THEN {
            fiscalNumber(currentZReport()) <- docNumberRep();
            time(currentZReport()) <- TIME(docDateRep()); // меняем время, чтобы совпадало с чеком отчета
        }
    } ELSE {
        IF number() THEN {
            fiscalNumber(currentZReport()) <- STRING[48](number());
            time(currentZReport()) <- TIME(position()); // меняем время, чтобы совпадало с чеком отчета
        }
    }
}

eqPrntText 'Печать текста' (Receipt r, TEXT text) {
    IF NOT text THEN RETURN;
    eqGetState(currentCashRegister());
    IF titanECode() THEN { onShowError(titanEMessage()); RETURN; }
    text() <- text;
    EXPORT textForm JSON;
    onSend(currentCashRegister(),'printText','Печать прозвольного текста');
    IF titanECode() THEN onShowError(titanEMessage());
}

