MODULE ProductionOrderConsignmentBy;

REQUIRE ConsignmentBy, PricingProductionOutput;

NAMESPACE Production;

@defineConsignmentHeader (order);

DESIGN operation {
    tabContainer {
        NEW consignment {
            caption = 'Оформление накладных';
        }
    }    
}

consignmentType 'Тип накладной' = DATA ConsignmentType (Operation);
nameConsignmentType 'Тип накладной' (Operation o) = staticCaption(consignmentType(o));

EXTEND FORM operation
    PROPERTIES nameConsignmentType(o);
;

DESIGN operation {
    consignment {
        MOVE PROPERTY(nameConsignmentType(o));
    }
}

invoiceNumber 'Номер ТТН' = DATA STRING[48] (Order) IN numbered CHARWIDTH 7;
invoiceSeries 'Серия ТТН' = DATA BPSTRING[2] (Order) IN numbered CHARWIDTH 3 NOFLEX;

invoiceSeriesNumber 'Серия/Номер ТТН' (Order o) = 
    CONCAT '', invoiceSeries(o), invoiceNumber(o) 
    CHARWIDTH 7 MATERIALIZED;
    
EXTEND CLASS Order : Consignment;

EXTEND FORM order
    PROPERTIES(o) invoiceNumber, invoiceSeries
;

EXTEND FORM orders
    PROPERTIES(o) READONLY invoiceNumber, invoiceSeries
;

DESIGN order {
    headerRow3 {
        NEW invoice {
            caption = 'ТТН';
            horizontal = TRUE;
            MOVE PROPERTY (invoiceNumber(o));
            MOVE PROPERTY (invoiceSeries(o));
        }
    }
}

dataDate (Order consignment) += date(consignment);
number (Order consignment) += invoiceNumber(consignment);
series (Order consignment) += invoiceSeries(consignment);

dataPayer (Order consignment) += payer (consignment);

dataTruck (Order consignment) += dataTruck (consignment);
dataTrailer (Order consignment) += dataTrailer (consignment);
dataEmployee (Order consignment) += dataEmployee (consignment);
dataWaybill (Order consignment) += waybill (consignment);

dataAddressSupplierStock (Order consignment) += dataAddressSupplierStock (consignment);
dataAddressCustomerStock (Order consignment) += dataAddressCustomerStock (consignment);

readdressing (Order consignment) += readdressing (consignment);

countPages (Order consignment) += countPages (consignment);

additionalDocuments (Order consignment) += additionalDocuments (consignment);

consignmentType (Order consignment) += consignmentType(operation(consignment));
overShipmentBase (Order consignment) += overShipmentBase (consignment);

issuanceAllowed (Order consignment) += issuanceAllowed (consignment);

issuanceExecuted (Order consignment) += issuanceExecuted (consignment);

dataForwarder (Order consignment) += dataForwarder (consignment);

warrant (Order consignment) += warrant (consignment);
warrantHolder (Order consignment) += warrantHolder (consignment);

goodsAccepted (Order consignment) += goodsAccepted (consignment);

loadingExecuter (Order consignment) += loadingExecuter (consignment);
wayOfLoading (Order consignment) += wayOfLoading (consignment);

unloadingExecuter (Order consignment) += unloadingExecuter (consignment);
wayOfUnloading (Order consignment) += wayOfUnloading (consignment);

codeLoading (Order consignment) += codeLoading (consignment);

dataArrivalTime (Order consignment) += arrivalTime(consignment);
dataDowntime (Order consignment) += downtime(consignment);   
 
raceQuantity (Order consignment) += raceQuantity (consignment);

EXTEND CLASS ProductDetail : ConsignmentDetail;

index (ProductDetail d) += index (d);
consignment (ProductDetail d) += order (d);
dataSku[ConsignmentDetail] (ProductDetail d) += sku (d);  
dataQuantityCustom = ABSTRACT NUMERIC[16,5](ProductDetail);
dataQuantityOver (ProductDetail d) = (OVERRIDE dataQuantityCustom(d), outputQuantity (d));
dataQuantity (ProductDetail d) += dataQuantityOver(d);
skip[ConsignmentDetail](ProductDetail d) += (dataQuantityOver(d) == 0) OR (NOT dataQuantityOver(d));

dataPackQuantity (ProductDetail d) += 1.0 IF dataQuantityOver (d);
dataGrossWeight (ProductDetail d) += NUMERIC[16,5](dataQuantityOver (d)*overNetWeight(sku(d)));

dataSupplier (Order consignment) += componentsLegalEntityStock(consignment);
dataSupplierStock (Order consignment) += componentsStock(consignment);

overPackQuantity 'Общее количество грузовых мест' = DATA NUMERIC[8,2] (Order);
packQuantity (Order c) += WHEN c IS Order THEN overPackQuantity(c);

dataCustomer (Order consignment) += productsLegalEntityStock(consignment);
dataCustomerStock (Order consignment) += productsStock(consignment);

dataCurrency (Order consignment) += currencyProduct(consignment);

dataPrice (ProductDetail detail) += WHEN detail IS ProductDetail THEN price(detail);
dataSumCustom = ABSTRACT NUMERIC[18,4](ProductDetail);
dataSum (ProductDetail detail) += WHEN detail IS ProductDetail THEN (OVERRIDE dataSumCustom(detail), outputProductsSum(detail));
dataVAT (ProductDetail detail) += WHEN detail IS ProductDetail THEN valueVAT(detail);
retVATSumCustom = ABSTRACT NUMERIC[18,4](ProductDetail);
dataSumVAT (ProductDetail detail) += WHEN detail IS ProductDetail THEN (OVERRIDE retVATSumCustom(detail), retVATSum(detail));
dataSumInvoice (ProductDetail detail) += WHEN detail IS ProductDetail THEN (OVERRIDE dataSumCustom(detail), outputProductsSum(detail));

overShipmentBase(Order order) <- (CONCAT '', 'Заказ № ', seriesNumber(order)+' ', 'от '+toDateDDMMYYYY(date(order))) WHEN CHANGED(date(order)) OR CHANGED(seriesNumber(order));

@defineOperationProperty(shipmentBase, 'Основание отпуска (ТТН)', STRING[100], consignment);
dataShipmentBase (Order consignment) += shipmentBase(operation(consignment));

@defineOperationProperty(useEmptyVATConsignment, 'Не печатать НДС', consignment);

useEmptyVAT(ProductDetail d) += WHEN useEmptyVATConsignment(operation(d)) THEN TRUE;

@defineOperationProperty(notUseDriverTruck, 'Не использовать справочники для выбора водителей и машин', consignment);
@defineOperationProperty(notUseIssuanceAllowed, 'Не использовать справочник сотрудников "Отпуск разрешил"', consignment);
@defineOperationProperty(notUseIssuanceExecuted, 'Не использовать справочник сотрудников "Отпуск произвел"', consignment);
@defineOperationProperty(useGoodsAccepted, 'Использовать справочник сотрудников "Принял грузополучатель"', consignment);
@defineOperationProperty(notPrintGr, 'Не писать прописью граммы в ТТН', consignment);
@defineOperationProperty(banOpenedPrint, 'Запрещено печатать непроведенные документы', consignment);

@defineOperationProperty(skipWaybill, 'Пропустить проверку путевого листа', consignment); 

@defineOperationProperty(mandatoryTruck, 'Обязательный выбор автомобиля из справочника', consignment);
@defineOperationProperty(skipTruck, 'Пропустить проверку автомобиля', consignment);     

@defineOperationProperty(mandatoryDriver, 'Обязательный выбор водителя из справочника', consignment);
@defineOperationProperty(skipDriver, 'Пропустить проверку водителя', consignment);

notUseDriverTruck(Order c) += notUseDriverTruck(operation(c));
skipWaybill (Order c) += WHEN skipWaybill(operation(c)) THEN skipWaybill(operation(c));
mandatoryTruck (Order c) += WHEN mandatoryTruck(operation(c)) THEN mandatoryTruck(operation(c));
skipTruck (Order c) += WHEN skipTruck(operation(c)) THEN skipTruck(operation(c));
mandatoryDriver (Order c) += WHEN mandatoryDriver(operation(c)) THEN mandatoryDriver(operation(c));
skipDriver (Order c) += WHEN skipDriver(operation(c)) THEN skipDriver(operation(c));

notUseIssuanceAllowed(Order c) += notUseIssuanceAllowed(operation(c));
notUseIssuanceExecuted(Order c) += notUseIssuanceExecuted(operation(c));
useGoodsAccepted(Order c) += useGoodsAccepted(operation(c));
notPrintGr(Order c) += notPrintGr(operation(c));
banPrint (Order c) += WHEN banOpenedPrint(operation(c)) AND NOT isPosted(c)THEN TRUE;

EXTEND FORM  orders
    PROPERTIES(o)  editAttributes
    PROPERTIES(o) SHOWIF showTTN1(o) READONLYIF banPrint(o)
                     printVerticalA, printVerticalAB, printHorizontalA,
                     printVerticalB, printHorizontalB, printAttach,
                     printVertical, printHorizontal, printAttachXLS, printSimpleAttachXLS,
                     printHorizontalAB, printVerticalAttach, printVerticalABAttach, printHorizontalAttach
    PROPERTIES(o) SHOWIF showTN2(o) READONLYIF banPrint(o)
                     printSimpleHorizontal, printSimpleVertical, printSimpleAttach, printSimpleVerticalAttach, printSimpleHorizontalAttach
;

DESIGN orders {
    printTab {
        NEW consignmentRow1 {
            align = START;
            horizontal = TRUE;

            NEW contOne {
                alignment = STRETCH;
                horizontal = TRUE;
                caption = 'Накладная';
                MOVE PROPERTY(editAttributes(o)) {
                    alignment = STRETCH;
                }
            }
            NEW tn2 {
                alignment = STRETCH;
                type = COLUMNS;
                lines = 3;
                caption = 'ТН-2';
                MOVE PROPERTY(printSimpleVertical(o)){ alignment = STRETCH; }
                MOVE PROPERTY(printSimpleHorizontal(o)){ alignment = STRETCH; }
                MOVE PROPERTY(printSimpleAttach(o)){ alignment = STRETCH; }
                MOVE PROPERTY(printSimpleVerticalAttach(o)) { alignment = STRETCH; }
                MOVE PROPERTY(printSimpleHorizontalAttach(o)) { alignment = STRETCH; }                
                
            }
        }
        NEW consignmentRow2 {
            align = START;
            type = COLUMNS;
            lines = 3;
            caption = 'ТТН-1';           
            MOVE PROPERTY(printVerticalA(o)) { alignment = STRETCH; }
            MOVE PROPERTY(printVerticalAB(o)) { alignment = STRETCH; }
            MOVE PROPERTY(printHorizontalA(o)) { alignment = STRETCH; }
            MOVE PROPERTY(printVerticalB(o)) { alignment = STRETCH; }
            MOVE PROPERTY(printHorizontalB(o)) { alignment = STRETCH; }
            MOVE PROPERTY(printAttach(o)) { alignment = STRETCH; }
            MOVE PROPERTY(printVertical(o)) { alignment = STRETCH; }
            MOVE PROPERTY(printHorizontal(o)) { alignment = STRETCH; }
            MOVE PROPERTY(printHorizontalAB(o)) { alignment = STRETCH; }
            MOVE PROPERTY(printVerticalAttach(o)) { alignment = STRETCH; }
            MOVE PROPERTY(printVerticalABAttach(o)) { alignment = STRETCH; }
            MOVE PROPERTY(printHorizontalAttach(o)) { alignment = STRETCH; }            
        }
        NEW consignmentRow3 {
            horizontal = TRUE;            
            NEW export {
                horizontal = TRUE;
                caption = 'Экспорт';  
                MOVE PROPERTY(printAttachXLS(o)){ alignment = STRETCH; }           
                MOVE PROPERTY(printSimpleAttachXLS(o)){ alignment = STRETCH; }              
            }
        }    
    }
}