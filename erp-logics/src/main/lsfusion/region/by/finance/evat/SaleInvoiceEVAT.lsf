MODULE SaleInvoiceEvat;

REQUIRE SaleInvoiceConsignmentBy, EVAT, CustomsGroup, SaleBlankCodeEVAT;

NAMESPACE Sale;

EXTEND CLASS Sale.Invoice : EVATDocument;
name(Sale.Invoice document) += description(document);
isPosted[EVATDocument](Invoice document) += isPosted(document);
number[EVATDocument](Invoice document) += STRING[100](number(document));
series[EVATDocument](Invoice document) += STRING[2](series(document));
dateTime[EVATDocument](Invoice document) += dateTime(document);

@defineOperationProperty(eVAT, 'Создавать ЭСЧФ', createContainer);

skipCreateEVAT = ABSTRACT BOOLEAN (Invoice);

skipCreateEVAT = ABSTRACT BOOLEAN (InvoiceDetail);

EXTEND CLASS EVATType { sale 'Продажа'}
                        
type[EVATDocument](Sale.Invoice i) += EVATType.sale IF i IS Sale.Invoice;

overCreateEVATSaleInvoice  ABSTRACT LIST ( EVAT, Invoice);
overEVATDetailSaleInvoiceDetail  ABSTRACT LIST ( EVATDetail, InvoiceDetail);

needCreateEVAT[EVATDocument](Sale.Invoice i) += WHEN eVAT(operation(i)) AND quantityInvoiceDetail(i) AND NOT skipCreateEVAT(i) THEN TRUE;

VATSum[EVATDocument] (Sale.Invoice i) += NUMERIC[18,4](VATSumInvoiceDetail(i));

VATSumRange[EVATDocument, Range](Sale.Invoice i, Range r) += [ GROUP SUM VATSum(InvoiceDetail d) BY invoice(d), VAT(d)](i,r);
sumWithVATRange[EVATDocument, Range](Sale.Invoice i, Range r) += [ GROUP SUM invoiceSum(InvoiceDetail d) BY invoice(d), VAT(d)](i,r);
customer[EVATDocument](Sale.Invoice i) += customer(i);

extraCode 'Код ТНВЭД' = ABSTRACT STRING[10] (InvoiceDetail);

createEVATSaleInvoiceHeader(EVAT e, Sale.Invoice i) {
    EVATDocument(e) <- i;        
    type(e) <- EVATType.sale;
    status(e) <- EVATStatus.original;
    
    date(e) <- date(i);
    
    numberContract (e) <- number(contractSku(i));
    dateContract (e) <- dateFrom(contractSku(i));
    codeDocType (e) <- 603;
    blankCodeDoc (e) <- OVERRIDE idBlankCode(i), blankCodeDoc() IF i IS Invoice, blankCodeDefault() IF i IS Invoice;
    seriesDoc(e) <- series(i);
    numberDoc(e) <- number(i);
    unpSender(e) <- UNP(supplier(i));
    
    //Поставщик
    supplier(e) <- supplier(i);
    branchCodeSupplier(e) <- branchCode(supplierStock(i));        
    
    //Получатель
    customer(e) <- customer(i);   
    branchCodeCustomer(e) <- branchCode(customerStock(i));        
    
    //Грузоотправитель
    consignor(e) <- ISTRING[200](OVERRIDE fullName(supplier(i)), name(supplier(i)));
    countryCodeConsignor (e) <- sid(country(supplier(i)));
    unpConsignor (e) <- OVERRIDE UNPForeign(supplier(i)), UNP(supplier(i)); 
    shippingAddressConsignor(e) <- OVERRIDE dataAddressSupplierStock (i), address(supplierStock(i));
    
    //Грузополучатель
    consignee(e) <- ISTRING[200](OVERRIDE fullName(customer(i)), name(customer(i)));
    countryCodeConsignee (e) <- sid(country(customer(i)));
    unpConsignee (e) <- OVERRIDE UNPForeign(customer(i)), UNP(customer(i)); 
    shippingAddressConsignee(e) <- OVERRIDE dataAddressCustomerStock (i), address(customerStock(i));
    
//    noCustomer(e) <- NOT VATSumInvoiceDetail(i);
    
    overCreateEVATSaleInvoice(e,i);
}

overExtraEVATQuantity = ABSTRACT NUMERIC[16,5] (Sale.InvoiceDetail);
overEVATQuantity (Sale.InvoiceDetail d) = quantity(d) (+) overExtraEVATQuantity(d);

createEVATSaleInvoice(EVAT e, Sale.Invoice i) {
    createEVATSaleInvoiceHeader(e,i);
    
    FOR invoice(InvoiceDetail id) == i AND overEVATQuantity(id) > 0 AND NOT skipCreateEVAT(id) INLINE NEW ed = EVATDetail DO {
        evat(ed) <- e;

        name(ed) <- nameSku(id);
        sku(ed) <- sku(id);
        code(ed) <- OVERRIDE extraCode(id), codeCustomsGroup(defaultCountry(), sku(id));
        UOM(ed) <- UOM(sku(id));
        quantity(ed) <- overEVATQuantity(id); 
        price(ed) <- price(id);
        sum(ed) <- sum(id);
        exciseSum(ed) <- 0;
        vatRate(ed) <- valueVAT(id);
        vatSum(ed) <- VATSum(id);
        sumWithVAT(ed) <- invoiceSum(id);
        
        IF valueVAT(id) == 0 THEN
            in(ed, DescriptionType.vatExcemption) <- TRUE;
            
        IF NOT valueVAT(id) == 0 THEN 
            in(ed, DescriptionType.deductionInFull) <- TRUE IF NOT notDeductionInFull();

        overEVATDetailSaleInvoiceDetail(ed,id);
    } 
}


createEVATSaleInvoice 'Накладные (продажа)' (DATE dFrom, DATE dTo)  { 
    FOR eVAT(operation(Invoice i)) AND isPosted(i) AND NOT skipCreateEVAT(i) AND 
        NOT [ GROUP SUM 1 BY (CONCAT '', seriesDoc(EVAT e), numberDoc(e)), date(e)](seriesNumber(i), date(i)) AND
        NOT EVAT(i)
        AND date(i) >= dFrom AND date(i) <= dTo AND 
        quantityInvoiceDetail(i) NEW e = EVAT DO {
        createEVATSaleInvoice(e, i);
    } 
    APPLY;
} CONFIRM;

EXTEND FORM evats
    PROPERTIES createEVATSaleInvoice(dFrom, dTo)
;

DESIGN evats {
    generate {
        MOVE PROPERTY(createEVATSaleInvoice(dFrom, dTo));
    }
}