MODULE EVAT;

REQUIRE System, Finance, LegalEntityBy, Item, Warehouse, LegalEntityCU;

// Атрибуты для счет-фактуры

CLASS ABSTRACT EVATDocument 'Регистр-основание';
TABLE EVATDocument(EVATDocument);

needCreateEVAT 'Необходимо создавать' = ABSTRACT CASE BOOLEAN (EVATDocument);
isPosted 'Проведен' = ABSTRACT BOOLEAN (EVATDocument);
overNeedCreateEVAT (EVATDocument d) = needCreateEVAT(d) AND isPosted(d);

name 'Регистр-основание' = ABSTRACT ISTRING[200] (EVATDocument) ;
number 'Номер' = ABSTRACT STRING[100] (EVATDocument) IN numbered CHARWIDTH 7;
series 'Серия' = ABSTRACT BPSTRING[2] (EVATDocument) IN numbered CHARWIDTH 3 NOFLEX;
seriesNumber 'Серия/Номер' (EVATDocument d) = CONCAT '', series(d), number(d) CHARWIDTH 7;

VATSum 'Сумма НДС' = ABSTRACT NUMERIC[18,4] (EVATDocument) CHARWIDTH 10;
VATSumRange 'Сумма НДС по шкале' = ABSTRACT NUMERIC[18,4] (EVATDocument, Range) CHARWIDTH 10;
sumWithVATRange 'Сумма с НДС по шкале' = ABSTRACT NUMERIC[18,4] (EVATDocument, Range) CHARWIDTH 10;

customer 'Покупатель' = ABSTRACT LegalEntity (EVATDocument);
nameCustomer 'Покупатель' (EVATDocument d)= name(customer(d));

dateTime 'Дата/время' = ABSTRACT DATETIME (EVATDocument);
date 'Дата' (EVATDocument document) = toDate(dateTime(document));
time 'Время' (EVATDocument document) = toTime(dateTime(document));

GROUP consignor 'Реквизиты грузоотправителя' : base;
GROUP consignee 'Реквизиты грузополучателя' : base;
GROUP register 'Основание' : base;

branchCode 'Код подразделения (для ЭСЧФ)' = DATA STRING[10](Warehouse);

EXTEND FORM warehouse
    PROPERTIES(w) branchCode
;

DESIGN warehouse{
    headerMainParams{
        MOVE PROPERTY(branchCode(w));
    }    
}

CLASS EVATType 'Тип счет-фактуры';
TABLE EVATType(EVATType);
name 'Тип' (EVATType t) = staticCaption(t) IF t IS EVATType;

FORM EVATTypes 'Типы счет-фактур'
    OBJECTS t = EVATType GRID
    PROPERTIES(t) READONLY name
    
    LIST EVATType OBJECT t
;

type = ABSTRACT EVATType (EVATDocument);
nameType 'Тип' (EVATDocument d) = name(type(d));

CLASS EVAT 'Электронный счёт-фактура';
TABLE evat(EVAT);
TABLE sessionEvat(Session, EVAT);

CLASS EVATStatus 'Статус' {
    original 'Исходный',
    fixed 'Исправленный',
    additional 'Дополнительный',
    additionalNoRef 'Дополнительный без ссылки',
    cancelled 'Отменённый'
}

FORM evatStatuses
    OBJECTS e = EVATStatus
    PROPERTIES(e) READONLY staticCaption
    LIST EVATStatus OBJECT e
;

CLASS EVATServerStatus 'Статус на сервере' {
    notFound 'NOT_FOUND',
    denied 'DENIED',
    completed 'COMPLETED',
    completedSigned 'COMPLETED_SIGNED',
    inProgress 'IN_PROGRESS',
    inProgressError 'IN_PROGRESS_ERROR',
    cancelled 'CANCELLED',
    onAgreement 'ON_AGREEMENT',
    onAgreementCancel 'ON_AGREEMENT_CANCEL',
    error 'ERROR'
}

FORM evatServerStatuses
    OBJECTS e = EVATServerStatus
    PROPERTIES(e) READONLY staticCaption
    LIST EVATServerStatus OBJECT e
;


CLASS LegalEntityStatus 'Статус' {
    seller 'Продавец',
    consignor 'Комитент',
    commissionaire 'Комиссионер',
    taxDeductionPayer 'Плательщик, передающий налоговые вычеты',
    trustee 'Доверительный управляющий',
    foreignOrganization 'Иностранная организация',
    agent 'Посредник',
    developer 'Заказчик (застройщик)',
    tornoversOnSalePayer 'Плательщик, передающий обороты по реализации',
    customer 'Покупатель',
    consumer 'Потребитель',
    taxDeductionRecipient 'Покупатель, получающий налоговые вычеты',
    foreignOrganizationBuyer 'Покупатель объектов у иностранной организации',
    turnoversOnSaleRecipient 'Покупатель, получающий обороты по реализации'    
}

FORM legalEntityStatuses
    OBJECTS p = LegalEntityStatus
    PROPERTIES(p) READONLY staticCaption
    LIST LegalEntityStatus OBJECT p
;

pathEVAT 'Путь к jar и xsd (EVAT)' = DATA STRING[100] (Computer);
pathEVAT 'Путь к jar и xsd (EVAT)' () = pathEVAT(currentComputer()); 
exportPathEVAT 'Путь для xml-файлов(EVAT)' = DATA STRING[100] (Computer);
exportPathEVAT 'Путь для xml-файлов(EVAT)' () = exportPathEVAT(currentComputer()); 
passwordEVAT 'Пароль (EVAT)' = DATA STRING[100] (Computer) ECHO;
passwordEVAT 'Пароль (EVAT)' () = passwordEVAT(currentComputer());
certIndexEVAT 'Номер (индекс) сертификата (EVAT)' = DATA INTEGER (Computer);
certIndexEVAT 'Номер (индекс) сертификата (EVAT)' () = certIndexEVAT(currentComputer()); 
certNumberEVAT 'Номер сертификата (EVAT)' = DATA STRING (Computer);
certNumberEVAT 'Номер сертификата (EVAT)' () = certNumberEVAT(currentComputer()); 

serviceUrlEVAT 'Адрес  WSDL (EVAT)' = DATA STRING[100] ();
useActiveXEVAT 'Работать через COM-объект (EVAT)' = DATA BOOLEAN (); 

EXTEND FORM computer PROPERTIES(c) pathEVAT, exportPathEVAT, passwordEVAT, certIndexEVAT, certNumberEVAT;
EXTEND FORM computers PROPERTIES(c) AFTER hostname(c) READONLY pathEVAT, exportPathEVAT, passwordEVAT, certIndexEVAT, certNumberEVAT;

EXTEND FORM options PROPERTIES() serviceUrlEVAT, useActiveXEVAT;
DESIGN options {
    pane {
        NEW EVAT {
            caption = 'ЭСЧФ';
            MOVE PROPERTY(serviceUrlEVAT());
            MOVE PROPERTY(useActiveXEVAT());
        }
    }
}

generateXMLAction 'Сгенерировать XML'  INTERNAL  'lsfusion.erp.region.by.finance.evat.GenerateXMLEVATAction'(EVAT); 
generateAndSave 'Сгенерировать XML'  INTERNAL  'lsfusion.erp.region.by.finance.evat.GenerateAndSaveXMLEVATAction'(EVAT); 
generatedXML 'Сгенерированный XML' = DATA LOCAL FILE ();
evatAction  INTERNAL  'lsfusion.erp.region.by.finance.evat.EVATAction'(INTEGER); 
signAndSend 'Сгенерировать, подписать и отправить' (EVAT evat)  { evatAction(0); }
getStatus 'Получить статус ЭСЧФ' ()  { evatAction(1); }

type = DATA EVATType (EVAT);
nameType 'Тип' (EVAT evat) = name(type(evat));

status = DATA EVATStatus (EVAT);
nameStatus 'Статус' (EVAT evat) = staticName(status(evat));
captionStatus 'Статус' (EVAT evat) = staticCaption(status(evat));

@defineNumbered(EVAT, BPSTRING[2]);
@defineNumeratedDefault(EVAT, 'ЭСЧФ', 'ЭС');

exported 'Выгружен' = DATA BOOLEAN (EVAT);
result 'Ответ сервера' = DATA TEXT (EVAT);

CONSTRAINT DROPPED (EVAT e IS EVAT) AND PREV (exported(e)) MESSAGE 'Запрещено удалять Выгруженные счета-фактуры';

//rename to serverStatus
statusServerStatus = DATA EVATServerStatus (EVAT);
nameServerStatus 'Статус на сервере'(EVAT e) = staticName(statusServerStatus(e));  
captionServerStatus 'Статус на сервере'(EVAT e) = staticCaption(statusServerStatus(e));  

EVATDocument 'Регистр' = DATA EVATDocument (EVAT) INDEXED;
EVAT 'ЭСЧФ' (EVATDocument d) = GROUP MAX EVAT e BY EVATDocument(e);

@defineOption(notNullEVATDocument, 'Запрет на отсутствие исходного документа для ЭСЧФ', EVAT);


CONSTRAINT notNullEVATDocument() AND EVAT e IS EVAT AND NOT EVATDocument(e)
    MESSAGE 'У ЭСЧФ должна быть задана ссылка на исходный документ';

seriesNumberEVATDocument 'Регистр (серия/номер)' (EVAT e) = seriesNumber(EVATDocument(e)) CHARWIDTH 7 IN register; 
dateEVATDocument 'Регистр (дата)' (EVAT e) = date(EVATDocument(e)) IN register; 

in 'Вкл.' = DATA LOCAL BOOLEAN (EVAT);
countIn = GROUP SUM 1 IF in(EVAT e);

invoice 'К ЭСЧФ' = DATA STRING[100] (EVAT);
date 'Дата совершения операции' = DATA DATE (EVAT);
dateCancelled 'Дата аннулирования' = DATA DATE (EVAT);
sendToRecipient 'Отобразить получателю' = DATA BOOLEAN (EVAT);
numberInvoicePrincipal 'Номер ЭСЧФ комитента' = DATA STRING[100] (EVAT);
dateInvoicePrincipal 'Дата ЭСЧФ комитента' = DATA DATE (EVAT);
numberInvoiceVendor 'Номер ЭСЧФ продавца' = DATA STRING[100] (EVAT);
dateInvoiceVendor 'Дата ЭСЧФ продавца' = DATA DATE (EVAT);

declarationSupplier 'Регистрационный номер выпуска товаров поставщика' = DATA STRING[100] (EVAT);
dateReleaseSupplier 'Дата выпуска товаров поставщика' = DATA DATE (EVAT);
dateActualExportSupplier 'Дата разрешения на убытие товаров поставщика' = DATA DATE (EVAT);
numberTaxesSupplier 'Номер заявления о ввозе товаров и уплате косвенных налогов поставщика' = DATA STRING[100] (EVAT);
dateTaxesSupplier 'Дата заявления поставщика о ввозе товаров и уплате косвенных налогов поставщика' = DATA DATE (EVAT);

declarationCustomer 'Регистрационный номер выпуска товаров получателя' = DATA STRING[100] (EVAT);
numberTaxesCustomer 'Номер заявления о ввозе товаров и уплате косвенных налогов получателя' = DATA STRING[100] (EVAT);
dateTaxesCustomer 'Дата заявления получателя о ввозе товаров и уплате косвенных налогов получателя' = DATA DATE (EVAT);
dateImportCustomer 'Дата ввоза товаров получателя' = DATA DATE (EVAT);

skipDeliveryCondition 'Пропустить блоки SenderReceiver и DeliveryCondition' = DATA BOOLEAN (EVAT);
numberContract 'Номер договора на поставку товара' = DATA STRING[100] (EVAT);
dateContract 'Дата договора на поставку товара' = DATA DATE (EVAT);
codeDocType 'Код вида документа' = DATA INTEGER (EVAT);
valueDocType 'Название вида документа' = DATA STRING[100] (EVAT);
blankCodeDoc 'Код типа бланка' = DATA STRING[100] (EVAT);
dataDateDoc 'Дата' = DATA DATE (EVAT);
dateDoc 'Дата' (EVAT e)= OVERRIDE dataDateDoc(e), date(e);
seriesDoc 'Серия' = DATA STRING[100] (EVAT);
numberDoc 'Номер' = DATA STRING[100] (EVAT);
descriptionDoc 'Дополнительные сведения' = DATA STRING[100] (EVAT);
unpSender 'Субъект хозяйствования, составляющий ЭСЧФ' = DATA STRING[100](EVAT);
exportYear 'Год для экспорта' = DATA INTEGER (EVAT);
allowZeroVAT 'Разрешён нулевой НДС' = DATA BOOLEAN (EVAT);
exportProviderTaxes 'Выгружать реквизиты заявления о ввозе товаров и уплате косвенных налогов' = DATA BOOLEAN (EVAT);
refund 'Возврат (только Дополнительный)' = DATA BOOLEAN (EVAT);

padNumber = ABSTRACT VALUE STRING[20] (EVAT);
padNumber (EVAT e) += STRING[20](lpad(number(e), 10, '0'));

exportNumber 'Номер для экспорта' (EVAT e) = unpSender(e) + '-' + (OVERRIDE exportYear(e), Time.extractYear(currentDate()) IF e IS EVAT ) + '-' + padNumber(e);
exportDNumber 'Номер для экспорта' (EVAT e) = unpSender(e) + '-' + exportYear(e) + '-' + padNumber(e);
EVATExportNumber 'ЭСЧФ по номеру для экспорта' = GROUP AGGR EVAT e BY exportDNumber(e); 

WHEN SET(exported(EVAT e)) 
     DO exportYear(e) <- Time.extractYear(currentDate());


//Поставщик
supplier 'Поставщик' = DATA LegalEntity(EVAT);
nameSupplier 'Поставщик' (EVAT evat) = OVERRIDE fullName(supplier(evat)), name(supplier(evat));
branchCodeSupplier 'Код филиала поставщика' = DATA STRING[10] (EVAT);
addressSupplier 'Адрес поставщика' (EVAT evat) = address(supplier(evat));
dependentPersonSupplier 'Взаимозависимое лицо' = DATA BOOLEAN (EVAT);
residentsOfOffshoreSupplier 'Сделка с резидентом оффшорной зоны ' = DATA BOOLEAN (EVAT);
specialDealGoodsSupplier 'Спец. сделка' = DATA BOOLEAN (EVAT);
bigCompanySupplier 'Крупный плательщик (поставщик)' = DATA BOOLEAN (EVAT);
//countryConsignor = DATA Country(EVAT);// страна ввоза
//countryCodeSupplier 'Код страны грузоотправителя' (EVAT evat) = sid(OVERRIDE country(supplier(evat)), countryConsignor(evat));
countryCodeSupplier 'Код страны поставщика' (EVAT evat) = sid(country(supplier(evat)));
unpSupplier 'УНП поставщика' (EVAT evat) = OVERRIDE UNPForeign(supplier(evat)), UNP(supplier(evat));
legalEntityStatusSupplier 'Статус поставщика' = DATA LegalEntityStatus (EVAT);
nameLegalEntityStatusSupplier 'Статус поставщика' (EVAT evat) = staticName(legalEntityStatusSupplier(evat));
captionLegalEntityStatusSupplier 'Статус поставщика' (EVAT evat) = staticCaption(legalEntityStatusSupplier(evat));

bigCompanySupplier 'Крупный поставщик' = DATA BOOLEAN (LegalEntity) IN filterEntity;
EXTEND FORM legalEntity
    PROPERTIES (l) SHOWIF isSupplier(l) bigCompanySupplier
;
EXTEND FORM legalEntities
    PROPERTIES (l) READONLYIF isReadonly() bigCompanySupplier
;
WHEN LOCAL CHANGED(supplier(EVAT e)) DO {
    bigCompanySupplier(e) <- bigCompanySupplier(supplier(e));
}

CLASS EVATProviderStatus {
    Customer,
    Consumer,
    Consignor,
    Commissionaire,
    Tax_Deduction_Recipient,
    Foreign_Organization_Buyer,
    Turnovers_On_Sale_Recipient
}
dataEVATProviderStatus = DATA EVATProviderStatus (EVAT);
overProviderStatus 'Статус поставщика' (EVAT evat) = OVERRIDE staticName(dataEVATProviderStatus(evat)), nameLegalEntityStatusSupplier(evat);

//Получатель.
noCustomer 'Без покупателя' = DATA BOOLEAN (EVAT);

customer 'Получатель' = DATA LegalEntity(EVAT);
nameCustomer 'Получатель' (EVAT evat) = OVERRIDE fullName(customer(evat)), name(customer(evat));
branchCodeCustomer 'Код филиала получателя' = DATA STRING[10] (EVAT);
addressCustomer 'Адрес получателя' (EVAT evat) = address(customer(evat));
dependentPersonCustomer 'Взаимозависимое лицо' = DATA BOOLEAN (EVAT);
residentsOfOffshoreCustomer 'Сделка с резидентом оффшорной зоны ' = DATA BOOLEAN (EVAT);
specialDealGoodsCustomer 'Спец. сделка' = DATA BOOLEAN (EVAT);
bigCompanyCustomer 'Крупный плательщик (получатель)' = DATA BOOLEAN (EVAT);
countryCodeCustomer 'Код страны получателя' (EVAT evat) = sid(country(customer(evat)));
skipUnpCustomer 'Не выгружать УНП получателя' = DATA BOOLEAN (EVAT);
unpCustomer 'УНП получателя' (EVAT evat) = OVERRIDE UNPForeign(customer(evat)), UNP(customer(evat));
legalEntityStatusCustomer 'Статус получателя' = DATA LegalEntityStatus (EVAT);
nameLegalEntityStatusCustomer 'Статус получателя' (EVAT evat) = staticName(legalEntityStatusCustomer(evat));
captionLegalEntityStatusCustomer 'Статус получателя' (EVAT evat) = staticCaption(legalEntityStatusCustomer(evat));

//-- Грузоотправитель
consignor 'Грузоотправитель'  = DATA ISTRING[200](EVAT) IN consignor;
countryCodeConsignor 'Код страны грузоотправителя' = DATA STRING[50] (EVAT) IN consignor;
unpConsignor 'УНП грузоотправителя'  = DATA STRING[50] (EVAT) IN consignor;
shippingAddressConsignor 'Адрес отправки' = DATA STRING[250] (EVAT) IN consignor;

//-- 
consignee 'Грузополучатель' = DATA ISTRING[200](EVAT) IN consignee;
countryCodeConsignee 'Код страны грузополучателя' = DATA STRING[50] (EVAT) IN consignee;
unpConsignee 'УНП грузополучателя'  = DATA STRING[50] (EVAT) IN consignee;
shippingAddressConsignee 'Адрес доставки' = DATA STRING[250] (EVAT) IN consignee;

name 'Название документа' (EVAT e) = 'ЭСЧФ' + ' № ' + seriesNumber(e) + ' от ' + date(e) + 
        (IF exported(e) THEN ' Выставлен, ' ELSE '') + (IF NOT exported(e) THEN ' Не выставлен, ' ELSE '') + captionStatus(e);
        
evatCode 'Ед. изм. (ЭСЧФ)' = DATA INTEGER (UOM);

EXTEND FORM attributesItem
    PROPERTIES READONLY evatCode(UOM)
;

EXTEND FORM UOM
    PROPERTIES(u) evatCode
;
EXTEND FORM UOMs
    PROPERTIES(u) READONLYIF isReadonly() evatCode
;
EXTEND FORM dialogUOMs
    PROPERTIES(u) READONLY evatCode
;
        
//Товар
CLASS EVATDetail 'Строка электронного счёта-фактуры';
TABLE evatDetail(EVATDetail);

evat = DATA EVAT (EVATDetail) NONULL DELETE INDEXED;
seriesNumberEVATDocument 'Регистр (серия/номер)' (EVATDetail d) = seriesNumberEVATDocument(evat(d)) IN id;
objValue (EVATDetail d) = INTEGER(d AS EVATDetail);
name 'Наименование' = DATA STRING[255] (EVATDetail);
sku = DATA Sku(EVATDetail);
code 'Код ТНВЭД' = DATA STRING[10] (EVATDetail);
UOM = DATA UOM (EVATDetail);
evatCodeUOM 'Ед. изм. (ЭСЧФ)' (EVATDetail evatDetail) = evatCode(UOM(evatDetail));
codeOced 'Код видов деятельности (ОКЭД)' = DATA STRING[100] (EVATDetail);
quantity 'Количество' = DATA NUMERIC[16,5] (EVATDetail); 
price 'Цена' = DATA NUMERIC[16,5] (EVATDetail);
sum 'Сумма' = DATA NUMERIC[16,5] (EVATDetail) NONULL;
exciseSum 'Сумма акциза' = DATA NUMERIC[16,5] (EVATDetail);
vatRate 'Ставка НДС' = DATA NUMERIC[16,5] (EVATDetail);
vatSum 'Сумма НДС' = DATA NUMERIC[16,5] (EVATDetail);
sumWithVAT 'Сумма с НДС' = DATA NUMERIC[16,5] (EVATDetail);

countEVATDetail 'Кол-во строк ЭСЧФ' = GROUP SUM 1 BY evat(EVATDetail d) MATERIALIZED;

CLASS DescriptionType 'Описание' {
    deductionInFull 'Вычет в полном объеме',
    vatExcemption 'Освобождение от НДС',
    outsideRB 'Реализация за пределами Республики Беларусь',
    importVAT 'Ввозной НДС',
    exciseMark 'товар, маркированный акцизными марками',
    controlMark 'товар, маркированный КИЗ',
    customsExcise 'акциз уплачен на таможне',
    identifiedMark 'товар, маркированный СИ',
    analyzedDeal 'анализируемая сделка'
}

name 'Название в XML' = DATA STRING[250] (DescriptionType);
caption 'Описание' = DATA STRING[100] (DescriptionType);

FORM descriptionType 'Описание'
    OBJECTS d = DescriptionType PANEL
    PROPERTIES(d) name, caption
    
    EDIT DescriptionType OBJECT d
;

FORM descriptionTypes 'Описания'
    OBJECTS d = DescriptionType
    PROPERTIES(d) READONLY name, caption
    PROPERTIES(d) NEWSESSION  NEW, EDIT

    LIST DescriptionType OBJECT d
;

TABLE EVATDetailDescriptionType (EVATDetail, DescriptionType);
in 'Вкл.' = DATA BOOLEAN (EVATDetail, DescriptionType);

@defineOption(notExportControlAndIdentifiedMark, 'Не выгружать в xml признаки Маркированный КИЗ и Маркированный СИ', EVAT);

nameDescriptionTypes (EVATDetail d) = GROUP CONCAT TEXT(name(DescriptionType t)) IF in(d,t) AND ((t != DescriptionType.controlMark AND t != DescriptionType.identifiedMark) OR NOT notExportControlAndIdentifiedMark()), ', ' ORDER t;
captionDescriptionTypes 'Описание' (EVATDetail d)= STRING(GROUP CONCAT TEXT(caption(DescriptionType t)) IF in(d,t), ', ' ORDER t);

FORM EVATDetailDescriptionType 'Описания'
    OBJECTS d = EVATDetail PANEL
    OBJECTS t = DescriptionType
    PROPERTIES(d,t) in
    PROPERTIES(t) READONLY name, caption
    PROPERTIES(t) NEWSESSION  NEW, EDIT
;
DESIGN EVATDetailDescriptionType {
    size = (800, 600);
}

changeDescriptionTypes (EVATDetail d) {
    SHOW EVATDetailDescriptionType OBJECTS d = d;
}

overNameDescriptionType (EVATDetail evatDetail) = nameDescriptionTypes(evatDetail);  // для xml

totalSum 'Сумма (всего)'(EVAT evat) = GROUP SUM sum(EVATDetail evatDetail) BY evat(evatDetail);  
totalExciseSum 'Сумма акциза (всего)' (EVAT evat) = GROUP SUM exciseSum(EVATDetail evatDetail) BY evat(evatDetail);  
totalVATSum 'Сумма НДС (всего)' (EVAT evat) = GROUP SUM vatSum(EVATDetail evatDetail) BY evat(evatDetail);  
totalSumWithVAT 'Сумма с НДС (всего)' (EVAT evat) = GROUP SUM sumWithVAT(EVATDetail evatDetail) BY evat(evatDetail);  
totalQuantity'Количество (всего)'(EVAT evat) = GROUP SUM quantity(EVATDetail evatDetail) BY evat(evatDetail);  

FORM evat 'Электронный счёт-фактура'
    OBJECTS e = EVAT PANEL
    PROPERTIES(e) nameType, captionStatus, unpSender, number, exportYear, exportNumber, invoice, date, dateCancelled, sendToRecipient, exported, result, captionServerStatus,
                  captionLegalEntityStatusSupplier, consignor, unpConsignor, countryCodeConsignor, shippingAddressConsignor,
                  consignee, unpConsignee, countryCodeConsignee, shippingAddressConsignee,  
                  bigCompanySupplier, dependentPersonSupplier, residentsOfOffshoreSupplier, specialDealGoodsSupplier,
                  captionLegalEntityStatusCustomer, bigCompanyCustomer, dependentPersonCustomer, residentsOfOffshoreCustomer, specialDealGoodsCustomer,
                  numberInvoicePrincipal, dateInvoicePrincipal, numberInvoiceVendor,
                  dateInvoiceVendor, dateEVATDocument, seriesNumberEVATDocument,  
                  nameSupplier, unpSupplier, countryCodeSupplier, addressSupplier, 
                  nameCustomer, unpCustomer, skipUnpCustomer, countryCodeCustomer, addressCustomer, 
                  branchCodeSupplier, declarationSupplier, dateReleaseSupplier, dateActualExportSupplier,
                  numberTaxesSupplier, dateTaxesSupplier, branchCodeCustomer, declarationCustomer, numberTaxesCustomer, dateTaxesCustomer, dateImportCustomer,
                  skipDeliveryCondition, numberContract, dateContract, codeDocType, valueDocType, blankCodeDoc, dateDoc, seriesDoc, numberDoc, descriptionDoc, 
                  totalSum, totalExciseSum, totalVATSum, totalSumWithVAT, allowZeroVAT, exportProviderTaxes, refund

    OBJECTS d = EVATDetail
    PROPERTIES(d) name, evatCodeUOM, code, quantity, price, sum, exciseSum, vatRate, vatSum, sumWithVAT, captionDescriptionTypes ON CHANGE changeDescriptionTypes(d), NEW, DELETE
    FILTERS evat(d) == e
    EDIT EVAT OBJECT e
;

DESIGN evat {
    MOVE PROPERTY(nameType(e));
    MOVE PROPERTY(captionStatus(e));
    NEW top {
        tabbed = TRUE;
        fill = 1;
        NEW general {
            caption = 'Общие';
            fill = 1;
            MOVE PROPERTY(unpSender(e));
            MOVE PROPERTY(number(e));
            MOVE PROPERTY(exportYear(e));
            MOVE PROPERTY(exportNumber(e));
            MOVE PROPERTY(date(e));
            MOVE PROPERTY(invoice(e));
            MOVE PROPERTY(dateCancelled(e));
            MOVE PROPERTY(sendToRecipient(e));
            MOVE PROPERTY(result(e));
            MOVE PROPERTY(captionServerStatus(e));
            MOVE PROPERTY(allowZeroVAT(e));
            MOVE PROPERTY(exportProviderTaxes(e));
            MOVE PROPERTY(exported(e));
            MOVE GROUP(register,e);
        }
        NEW supplier{
            caption = 'Поставщик';
            fill = 1;
            MOVE PROPERTY(nameSupplier(e));
            MOVE PROPERTY(unpSupplier(e));
            MOVE PROPERTY(countryCodeSupplier(e));
            MOVE PROPERTY(addressSupplier(e));            
            MOVE PROPERTY(captionLegalEntityStatusSupplier(e));
            MOVE PROPERTY(bigCompanySupplier(e));
            MOVE PROPERTY(dependentPersonSupplier(e));
            MOVE PROPERTY(residentsOfOffshoreSupplier(e));
            MOVE PROPERTY(specialDealGoodsSupplier(e));
            MOVE PROPERTY(numberInvoicePrincipal(e));
            MOVE PROPERTY(dateInvoicePrincipal(e));
            MOVE PROPERTY(numberInvoiceVendor(e));
            MOVE PROPERTY(dateInvoiceVendor(e));
            MOVE PROPERTY(branchCodeSupplier(e));
            MOVE PROPERTY(declarationSupplier(e));
            MOVE PROPERTY(dateReleaseSupplier(e));
            MOVE PROPERTY(dateActualExportSupplier(e));
            MOVE PROPERTY(numberTaxesSupplier(e));
            MOVE PROPERTY(dateTaxesSupplier(e));
            MOVE GROUP(consignor,e) { lines = 1; type = CONTAINERV;}
        }
        NEW customer{
            caption = 'Получатель';
            fill = 1;
            MOVE PROPERTY(nameCustomer(e));
            MOVE PROPERTY(unpCustomer(e));
            MOVE PROPERTY(skipUnpCustomer(e));
            MOVE PROPERTY(countryCodeCustomer(e));
            MOVE PROPERTY(addressCustomer(e));  
            MOVE PROPERTY(captionLegalEntityStatusCustomer(e));
            MOVE PROPERTY(bigCompanyCustomer(e));
            MOVE PROPERTY(dependentPersonCustomer(e));
            MOVE PROPERTY(residentsOfOffshoreCustomer(e));
            MOVE PROPERTY(specialDealGoodsCustomer(e));
            MOVE PROPERTY(branchCodeCustomer(e));
            MOVE PROPERTY(declarationCustomer(e));
            MOVE PROPERTY(numberTaxesCustomer(e));
            MOVE PROPERTY(dateTaxesCustomer(e));
            MOVE PROPERTY(dateImportCustomer(e));
            MOVE GROUP(consignee,e) { lines = 1; type = CONTAINERV;}
        }           
        NEW deliveryCondition {
            caption = 'Условия поставки';
            fill = 1;
            MOVE PROPERTY(skipDeliveryCondition(e));
            MOVE PROPERTY(numberContract(e));
            MOVE PROPERTY(dateContract(e));
            MOVE PROPERTY(codeDocType(e));
            MOVE PROPERTY(valueDocType(e));
            MOVE PROPERTY(blankCodeDoc(e));
            MOVE PROPERTY(dateDoc(e));
            MOVE PROPERTY(seriesDoc(e));
            MOVE PROPERTY(numberDoc(e));
            MOVE PROPERTY(refund(e));
            MOVE PROPERTY(descriptionDoc(e));
        }
        NEW roster {
            caption = 'Данные по товарам';
            fill = 1;
            MOVE PROPERTY(totalSum(e));
            MOVE PROPERTY(totalExciseSum(e));
            MOVE PROPERTY(totalVATSum(e));
            MOVE PROPERTY(totalSumWithVAT(e));            
            MOVE BOX(d);
        }
    }

    MOVE TOOLBARBOX;
}

blankCodeDoc 'Номер бланка (продажа)' = DATA STRING[100] ();
blankCodeReturnDoc 'Номер бланка (продажа-возврат)' = DATA STRING[100] ();

blankCodeDefaultData 'Номер бланка (по умолчанию)' = DATA STRING[100] ();
blankCodeDefault 'Номер бланка (по умолчанию)'() = OVERRIDE blankCodeDefaultData(), '402861';

filterType = DATA LOCAL NESTED EVATType ();
nameFilterType 'Тип' = name(filterType());

showSendEvat() = useActiveXEVAT() OR pathEVAT(currentComputer());

FORM evats 'Электронные счета-фактуры'
    OBJECTS dates = (dFrom = DATE, dTo = DATE) PANEL
    PROPERTIES dFrom = VALUE(dFrom), dTo = VALUE(dTo)
    PROPERTIES() nameFilterType

    OBJECTS e = EVAT
    PROPERTIES(e) in
    PROPERTIES(e) READONLYIF isReadonly() exported, captionStatus, captionServerStatus, dateEVATDocument, seriesNumberEVATDocument, unpSender, number, exportYear, exportNumber, invoice, date, dateDoc, numberDoc, seriesDoc, dateCancelled, sendToRecipient, numberInvoicePrincipal,
                  dateInvoicePrincipal, numberInvoiceVendor, dateInvoiceVendor, nameSupplier, declarationSupplier, dateReleaseSupplier, dateActualExportSupplier,
                  numberTaxesSupplier, dateTaxesSupplier, nameCustomer, declarationCustomer, numberTaxesCustomer, dateTaxesCustomer, dateImportCustomer, totalSum,
                  totalExciseSum, totalVATSum, totalSumWithVAT, allowZeroVAT, exportProviderTaxes, refund
    PROPERTIES(e) TOOLBAR generateXMLAction, signAndSend SHOWIF showSendEvat()
    PROPERTIES() TOOLBAR DRAW e getStatus SHOWIF showSendEvat()
    PROPERTIES(e) NEWSESSION NEW, EDIT, DELETE 
    PROPERTIES(e) d=DELETE GRID
    FILTERS date(e) >= dFrom, date(e) <= dTo,
            type(e) == filterType() OR NOT filterType()
    
     
    OBJECTS d = EVATDetail
    PROPERTIES(d) READONLYIF isReadonly() name, evatCodeUOM, code, quantity, price, sum, exciseSum, vatRate, vatSum, sumWithVAT, captionDescriptionTypes ON CHANGE changeDescriptionTypes(d)
    FILTERS evat(d) == e
    LIST EVAT OBJECT e

    OBJECTS l = LegalEntity PANEL
    PROPERTIES(l) name SELECTOR
    FILTERS isCompany(l)
    
    PROPERTIES() blankCodeDoc, blankCodeReturnDoc
;

DESIGN evats {
    OBJECTS{
        NEW filters BEFORE BOX(e) {
            MOVE BOX(dates) {
                GROUP(,dates) {
                    lines = 1;
                    type = CONTAINERH;
                    PROPERTY(dFrom) {
                        caption = 'Дата с';
                    }
                    PROPERTY(dTo) {
                        caption = 'Дата по';
                    }
                    MOVE PROPERTY(nameFilterType());
                }
            }
        }
        NEW pane AFTER BOX(e){
            tabbed = TRUE;
            fill = 1;
            
            MOVE BOX(d);
            NEW actions {
                caption = 'Действия';
                MOVE BOX(l);
                NEW generate {
                    caption = 'Генерация ЭСЧФ';
                    MOVE PROPERTY(blankCodeDoc());
                    MOVE PROPERTY(blankCodeReturnDoc());
                }
            }
        }
    }
}
@extendFormEditable(evats);

NAVIGATOR {
    financeNavigator {
        NEW FOLDER evat 'ЭСЧФ' {
            NEW evats;
        }
    }
}

@defineOption(notDeductionInFull, 'Не указывать "Вычет в полном объёме"', EVAT);
EXTEND FORM options
    PROPERTIES blankCodeDefault()
;

DESIGN options { EVAT { MOVE PROPERTY(blankCodeDefault()); } }