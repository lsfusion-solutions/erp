MODULE InvoiceConsignmentBy;

REQUIRE Invoice,
        ConsignmentBy;

NAMESPACE Invoice;

@defineConsignmentAbstractHeader(invoice);
@implementConsignmentHeader (Invoice);


EXTEND CLASS InvoiceDetail : ConsignmentDetail;

index[ConsignmentDetail] (InvoiceDetail d) += index (d);
consignment (InvoiceDetail d) += invoice (d);
skip (InvoiceDetail d) += skipConsignment (d);
dataSku[ConsignmentDetail] (InvoiceDetail d) += sku (d);
batch[ConsignmentDetail] (InvoiceDetail d) += batch (d);    
dataQuantity[ConsignmentDetail] (InvoiceDetail d) += quantity (d);

dataPackQuantity (InvoiceDetail d) += packQuantity (d);
dataGrossWeight (InvoiceDetail d) += sumGrossWeight (d);

dataSupplier (Invoice consignment) += from(consignment);
dataSupplierStock[Consignment] (Invoice consignment) += fromStock(consignment);

dataCustomer (Invoice consignment) += to(consignment);
dataCustomerStock[Consignment] (Invoice consignment) += toStock(consignment);

dataCurrency (Invoice consignment) += currency(consignment);

dataPrice (InvoiceDetail detail) += WHEN detail IS InvoiceDetail THEN price(detail);
dataInvoicePrice[ConsignmentDetail](InvoiceDetail detail) +=  WHEN detail IS InvoiceDetail THEN invoicePrice(detail);

dataSum (InvoiceDetail detail) +=  WHEN detail IS InvoiceDetail THEN sum(detail);
dataVAT (InvoiceDetail detail) +=  WHEN detail IS InvoiceDetail THEN valueVAT(detail);

dataSumVAT (InvoiceDetail detail) +=  WHEN detail IS InvoiceDetail THEN VATSum(detail);
dataSumInvoice (InvoiceDetail detail) +=  WHEN detail IS InvoiceDetail THEN invoiceSum(detail);
dataNote[ConsignmentDetail] (InvoiceDetail detail) += note(detail);
extraDescription[ConsignmentDetail] (InvoiceDetail detail) += extraDescription(detail);

DESIGN options { consignment { MOVE PROPERTY(notNullInvoiceVAT()); } }

META defineInvoiceConsignment(contactA, contactB)

    @defineConsignmentInterfaceHeader(invoice);
    @implementConsignmentDocumentHeader(invoice, userInvoice, );

    EXTEND FORM  invoices
        PROPERTIES(i)  editAttributes SHOWIF isOpened(i) AND NOT skipShowEditAttributes(i)
        PROPERTIES(i) SHOWIF showTTN1(i) READONLYIF banPrint(i)
                         printVerticalA, printVerticalAB, printHorizontalA,
                         printVerticalB, printHorizontalB, printAttach, printVerticalABAttach,
                         printVertical, printHorizontal, printHorizontalAB, printAttachXLS, 
                         printVerticalAttach, printHorizontalAttach 
        PROPERTIES(i) SHOWIF showTN2(i) READONLYIF banPrint(i)
                         printSimpleHorizontal, printSimpleVertical, printSimpleAttach, printSimpleVerticalAttach, printSimpleHorizontalAttach,
                         printSimpleAttachXLS
    ;

    DESIGN invoices {
        printTab {
            NEW consignmentRow1 {
                align = START;
                horizontal = TRUE;

                NEW contOne {
                    alignment = STRETCH;
                    horizontal = TRUE;
                    caption = 'Накладная';
                    MOVE PROPERTY(editAttributes(i)) {
                        alignment = STRETCH;
                    }
                }
                NEW tn2 {
                    alignment = STRETCH;
                    lines = 3;
                    caption = 'ТН-2';
                    MOVE PROPERTY(printSimpleVertical(i)) { alignment = STRETCH; }
                    MOVE PROPERTY(printSimpleHorizontal(i)) { alignment = STRETCH; }
                    MOVE PROPERTY(printSimpleAttach(i)) { alignment = STRETCH; }
                    MOVE PROPERTY(printSimpleVerticalAttach(i)) { alignment = STRETCH; }
                    MOVE PROPERTY(printSimpleHorizontalAttach(i)) { alignment = STRETCH; }
                }
            }
            NEW consignmentRow2 {
                align = START;
                lines = 3;
                caption = 'ТТН-1';
                MOVE PROPERTY(printVerticalA(i)) { alignment = STRETCH; }
                MOVE PROPERTY(printVerticalAB(i)) { alignment = STRETCH; }
                MOVE PROPERTY(printHorizontalA(i)) { alignment = STRETCH; }
                MOVE PROPERTY(printVerticalB(i)) { alignment = STRETCH; }
                MOVE PROPERTY(printHorizontalB(i)) { alignment = STRETCH; }
                MOVE PROPERTY(printAttach(i)) { alignment = STRETCH; }
                MOVE PROPERTY(printVertical(i)) { alignment = STRETCH; }
                MOVE PROPERTY(printHorizontal(i)) { alignment = STRETCH; }
                MOVE PROPERTY(printHorizontalAB(i)) { alignment = STRETCH; }
                MOVE PROPERTY(printVerticalAttach(i)) { alignment = STRETCH; }
                MOVE PROPERTY(printVerticalABAttach(i)) { alignment = STRETCH; }
                MOVE PROPERTY(printHorizontalAttach(i)) { alignment = STRETCH; }
            }
            NEW consignmentRow3 {
                horizontal = TRUE;            
                NEW export {
                    horizontal = TRUE;
                    caption = 'Экспорт';  
                    MOVE PROPERTY(printAttachXLS(i)) { alignment = STRETCH; }  
                    MOVE PROPERTY(printSimpleAttachXLS(i)) { alignment = STRETCH; }                                                 
                }
            }    
        }
    }
END

seriesCharToNum = FORMULA 'lpad(CAST(CASE WHEN ASCII($1) < 1049 THEN ASCII($1) - 1039 ELSE ASCII($1) - 1041 END as char(2)), 2, \'0\')';
TTN1series (s) = '861' + seriesCharToNum(left(s,1)) + seriesCharToNum(right(s,1));

ttn1SeriesNumber(Invoice i) = TTN1series(series(i)) + number(i); 
