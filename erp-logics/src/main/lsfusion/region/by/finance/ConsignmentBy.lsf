MODULE ConsignmentBy;

REQUIRE System,
        Consignment,
        LegalEntityBy,
        Stock,
        Sku,
        Employee,
        Utils,
        Transport,
        Numerator,
        StockContract,
        SkuLedger; // вот эту зависимость нужно будет убрать

NAMESPACE Consignment;

CLASS WayOfLoading 'Способ ПРР';
TABLE wayOfLoading (WayOfLoading);

name 'Наименование' = DATA ISTRING[50](WayOfLoading) IN base;

FORM wayOfLoading 'Способ ПРР'
    OBJECTS w = WayOfLoading PANEL 
    PROPERTIES(w) name
    EDIT WayOfLoading OBJECT w
;

FORM dialogWayOfLoading 'Способ ПРР'
    OBJECTS w = WayOfLoading
    PROPERTIES(w) name READONLY, DELETE GRID
    PROPERTIES(w) NEWSESSION NEW, EDIT
    LIST WayOfLoading OBJECT w
;


overSeriesNumber 'Серия/Номер' (consignment) = ABSTRACT BPSTRING[31] (Consignment);

seriesNumber 'Серия/Номер' (Consignment o) = OVERRIDE 
    overSeriesNumber(o),
    (CONCAT '', series(o), number(o))  CHARWIDTH 7;


// ------------- Типы накладной ------------------ //
CLASS ConsignmentType 'Тип накладной' {
    ttn1 'ТТН-1',
    tn2 'ТН-2'
}

FORM consignmentTypes 'Типы накладной'
    OBJECTS t = ConsignmentType
    PROPERTIES(t) READONLY staticCaption
    LIST ConsignmentType OBJECT t
;

DESIGN consignmentTypes {
    PROPERTY(staticCaption(t)) { caption = 'Тип накладной'; } 
}

TABLE consignmentType (ConsignmentType);

consignmentType 'Тип накладной' = ABSTRACT ConsignmentType (Consignment);
hideTTN1 = ABSTRACT BOOLEAN (Consignment);
showTTN1 (Consignment c) = (consignmentType(c) == ConsignmentType.ttn1 OR NOT consignmentType(c)) AND NOT hideTTN1(c);   
hideTN2 = ABSTRACT BOOLEAN (Consignment);
showTN2 (Consignment c) = (consignmentType(c) == ConsignmentType.tn2 OR NOT consignmentType(c)) AND NOT hideTN2(c);   

isTTN1 (Consignment c) = consignmentType(c) == ConsignmentType.ttn1;   
isTN2 (Consignment c) = consignmentType(c) == ConsignmentType.tn2;   

// ---------------------------------- Юридические лица ---------------------- //

countRowsSimpleVertical 'Макс. кол-во строк в бланке (ТН-2 вер.)' = DATA INTEGER ();
countRowsSimpleHorizontal 'Макс. кол-во строк в бланке (ТН-2 гор.)' = DATA INTEGER ();
countRowsVerticalA 'Макс. кол-во строк в бланке (ТТН-1 вер.А)' = DATA INTEGER ();
countRowsVerticalAB 'Макс. кол-во строк в бланке (ТТН-1 вер.А/Б)' = DATA INTEGER ();
countRowsHorizontal 'Макс. кол-во строк в бланке (ТТН-1 гор.А)' = DATA INTEGER ();

skipCountRows 'Не учитывать макс. кол-во строк при печати накладной с приложением' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES() countRowsSimpleVertical, countRowsSimpleHorizontal, countRowsVerticalA, countRowsVerticalAB, countRowsHorizontal, skipCountRows
;

DESIGN options {
    pane {
        NEW consignment  {
            caption = 'Оформление ТТН';
            MOVE PROPERTY(countRowsSimpleVertical());
            MOVE PROPERTY(countRowsSimpleHorizontal());
            MOVE PROPERTY(countRowsVerticalA());
            MOVE PROPERTY(countRowsVerticalAB());
            MOVE PROPERTY(countRowsHorizontal());
            MOVE PROPERTY(skipCountRows());
        }
    }
}

// ---------------------------------- Юридические лица ---------------------- //
printedConsignment 'Распечатан' = DATA BOOLEAN (Consignment);

overUNPSupplier 'УНП получателя' = ABSTRACT STRING[50] (Consignment);
extraUNPSupplier 'УНП получателя' = ABSTRACT STRING[50] (Consignment);
UNPSupplier 'УНП отправителя' (Consignment consignment) = OVERRIDE overUNPSupplier(consignment), extraUNPSupplier(consignment), UNP(supplier(consignment));

extraDescriptionSupplier = ABSTRACT ISTRING[255] (Consignment);  

overUNPCustomer 'УНП получателя' = ABSTRACT STRING[50] (Consignment);
extraUNPCustomer 'УНП получателя' = ABSTRACT STRING[50] (Consignment);
UNPCustomer 'УНП получателя' (Consignment consignment) = OVERRIDE overUNPCustomer(consignment), extraUNPCustomer(consignment), UNP(customer(consignment));

extraDescriptionCustomer = ABSTRACT ISTRING[255] (Consignment);  

extraUNPPayer 'УНП получателя' = ABSTRACT STRING[50] (Consignment);
dataPayer = ABSTRACT LegalEntity (Consignment);
overPayer = ABSTRACT CASE LegalEntity (Consignment);
payer(Consignment c) = OVERRIDE dataPayer(c), overPayer(c);
dataUNPPayer = DATA STRING[9] (Consignment);
UNPPayer 'УНП заказчика' (Consignment consignment) = OVERRIDE dataUNPPayer(consignment), extraUNPPayer(consignment), UNP(payer(consignment));
dataAddressPayer = DATA STRING[150] (Consignment);
addressPayer 'Юр. адрес заказчика' (Consignment consignment) = OVERRIDE dataAddressPayer(consignment),
    address(payer(consignment), date(consignment));

dataFullNamePayer = DATA STRING[200] (Consignment);
fullNamePayer 'Наим-ие заказчика' (Consignment consignment) =
    OVERRIDE dataFullNamePayer(consignment), fullName(payer(consignment)) ;

overChangePayer ABSTRACT (Consignment);

customSelectPayer = ABSTRACT BOOLEAN (Consignment);
overSelectPayer ABSTRACT (Consignment);
overSelectUNPPayer ABSTRACT (Consignment);
overSelectAddressPayer ABSTRACT (Consignment);

changePayer (Consignment consignment) {
    IF customSelectPayer(consignment) THEN {
        overSelectPayer(consignment);
    } ELSE {
        DIALOG LIST LegalEntity = dataPayer(consignment) CHANGE = dataPayer(consignment) NULL;
    }
    overChangePayer(consignment);
}

changeUNPPayer (Consignment consignment) {
    IF customSelectPayer(consignment) THEN {
        overSelectUNPPayer(consignment);
    } 
}

changeAddressPayer (Consignment consignment) {
    IF customSelectPayer(consignment) THEN {
        overSelectAddressPayer(consignment);
    } 
}

// ------------------------------------- Атрибуты --------------------------------- //

defaultTruck = ABSTRACT CASE Truck (Consignment);
dataTruck = ABSTRACT Truck(Consignment);
truck(Consignment consignment) = OVERRIDE dataTruck(consignment), defaultTruck(consignment);  
mandatoryTruck 'Обязательный выбор автомобиля из справочника' = ABSTRACT CASE BOOLEAN (Consignment);

dataNameTruck = DATA STRING[70](Consignment);
nameTruck 'Автомобиль' (Consignment consignment) = OVERRIDE dataNameTruck(consignment), name(truck(consignment)) CHARWIDTH 15 IN carConsignment;
skipTruck 'Пропустить проверку автомобиля' = ABSTRACT CASE BOOLEAN (Consignment);

overChangeTruck  ABSTRACT ( Consignment);

customSelectTruck = ABSTRACT BOOLEAN (Consignment);
overSelectTruck ABSTRACT (Consignment);

changeTruck (Consignment consignment)  {    
    IF notUseDriverTruck(consignment) THEN {
        INPUT s = dataNameTruck(consignment) DO {
            dataNameTruck(consignment) <- s;
        }
    } ELSE {
        IF customSelectTruck(consignment) THEN {
            overSelectTruck(consignment);
        } ELSE {
            DIALOG trucks OBJECTS t = dataTruck(consignment) INPUT NULL DO {
                dataTruck(consignment) <- t;
                dataNameTruck(consignment) <- NULL;
            }
        }
        
        
    }        
    overChangeTruck(consignment);
}

pickTuck 'Выбрать автомобиль из справочника' (Consignment consignment)  { 
    DIALOG trucks OBJECTS t = dataTruck(consignment) INPUT NULL DO {
        dataTruck(consignment) <- t;
        dataNameTruck(consignment) <- NULL;
    }
} ASON CONTEXTMENU nameTruck[Consignment];

editTuck 'Ввести автомобиль' (Consignment consignment)  {
    IF mandatoryTruck(consignment) THEN {
        MESSAGE 'Запрещено вводить автомобиль не из справочника';
        RETURN; 
    }
    DIALOG dialogString OBJECTS s = nameTruck(consignment) INPUT NULL DO {
        dataNameTruck(consignment) <- s;
    }
} ASON CONTEXTMENU nameTruck[Consignment];


CLASS OwnerTrackType 'Владелец автомобиля' {
    supplier 'Грузоотправитель',
    customer 'Грузополучатель'
}

FORM ownerTrackTypes 'Типы владельца автомобиля'
    OBJECTS t = OwnerTrackType
    PROPERTIES(t) READONLY staticCaption
    LIST OwnerTrackType OBJECT t
;

DESIGN ownerTrackTypes {
    PROPERTY(staticCaption(t)) { caption = 'Владелец автомобиля'; } 
}

TABLE ownerTrackType (OwnerTrackType);

ownerTrackType 'Владелец автомобиля' = ABSTRACT OwnerTrackType (Consignment);

ownerTruck 'Владелец автомобиля' (Consignment consignment) = CASE 
    WHEN supplier(consignment) == legalEntity(truck(consignment)) OR ownerTrackType(consignment) == OwnerTrackType.supplier THEN 'Грузоотправитель'
    WHEN customer(consignment) == legalEntity(truck(consignment)) OR ownerTrackType(consignment) == OwnerTrackType.customer THEN 'Грузополучатель'
    WHEN owner(truck(consignment)) THEN owner(truck(consignment));

dataTrailer = ABSTRACT STRING[100] (Consignment);
trailer 'Прицеп' (Consignment consignment) = OVERRIDE dataTrailer(consignment),
                                                     trailer(truck(consignment)) CHARWIDTH 15 IN carConsignment;

ownerTruckLegalEntity 'Владелец автомобиля' (Consignment consignment) = 
    IF ownerTrackType(consignment) == OwnerTrackType.supplier THEN supplier(consignment) ELSE
        IF ownerTrackType(consignment) == OwnerTrackType.customer THEN customer(consignment) ELSE
            legalEntity(truck(consignment));

overPayer(Consignment consignment) += WHEN ownerTruckLegalEntity(consignment) THEN ownerTruckLegalEntity(consignment);

readdressing 'Переадресовка' (consignment) = ABSTRACT STRING[50] (Consignment) CHARWIDTH 40 IN carConsignment; 

// ------------------------------------- Отпуск товара --------------------------------- //

notUseIssuanceExecuted 'Не использовать справочник сотрудников' = ABSTRACT BOOLEAN (Consignment);
dataIssuanceExecuted = DATA STRING[100](Consignment);
overIssuanceExecuted (consignment) = DATA Employee(Consignment);
issuanceExecuted (consignment) = ABSTRACT Employee(Consignment);
nameIssuanceExecuted 'Отпуск произвел' (Consignment consignment) = OVERRIDE  dataIssuanceExecuted(consignment),
                                                                                                positionShortName(issuanceExecuted(consignment)),
                                                                                                positionShortName(overIssuanceExecuted(consignment)) IN issuanceConsignment CHARWIDTH 20;
overChangeIssuanceExecuted ABSTRACT (Consignment);

customSelectIssuanceExecuted = ABSTRACT BOOLEAN (Consignment);
overSelectIssuanceExecuted ABSTRACT (Consignment);

changeIssuanceExecuted(Consignment consignment)  {    
    IF notUseIssuanceExecuted(consignment) THEN {
        INPUT s = dataIssuanceExecuted(consignment) DO {
            dataIssuanceExecuted(consignment) <- s;
        } 
        
    } ELSE {
        IF customSelectIssuanceExecuted(consignment) THEN {
            overSelectIssuanceExecuted(consignment);
        } ELSE {
            DIALOG dialogEmployeesConsignment OBJECTS e = issuanceExecuted(consignment) INPUT NULL DO {
                issuanceExecuted(consignment) <- e;
                IF NOT issuanceExecuted(consignment) THEN {
                    overIssuanceExecuted(consignment) <- e;
                }
            }
        }
    }        
    overChangeIssuanceExecuted(consignment);
}

dataForwarder  = ABSTRACT Employee (Consignment);

dataNameForwarder = DATA STRING[100](Consignment);
overNameForwarder = ABSTRACT STRING[100](Consignment);
forwarder 'Товар к перевозке принял (экспедитор), должность, фамилия, инициалы' (Consignment consignment) = OVERRIDE  
    dataNameForwarder(consignment), 
    overNameForwarder(consignment),
    positionShortName(dataForwarder(consignment)) IN issuanceConsignment CHARWIDTH 30;

customSelectForwarder = ABSTRACT BOOLEAN (Consignment);
overSelectForwarder ABSTRACT (Consignment);
customSelectEmploees = ABSTRACT BOOLEAN (Consignment);
overSelectEmploees ABSTRACT (Consignment);

changeForwarder(Consignment consignment)  {     
    IF notUseDriverTruck(consignment) THEN {
        INPUT s = dataNameForwarder(consignment) DO {
            dataNameForwarder(consignment) <- s;
        }         
    } ELSE {
        IF customSelectEmploees(consignment) THEN
            overSelectEmploees(consignment);
        ELSE
            DIALOG dialogEmployees OBJECTS e = dataForwarder(consignment) INPUT NULL DO {
                dataForwarder(consignment) <- e;
            }
    }        
}

pickForwarder 'Выбрать принимающего товар к перевозке (экспедитора)' (Consignment consignment)  { 
    IF customSelectForwarder(consignment) THEN {
        overSelectForwarder(consignment);
        dataNameForwarder(consignment) <- NULL;
    } 
} ASON CONTEXTMENU forwarder[Consignment];


warrant 'По доверенности (номер, дата)' (consignment) = ABSTRACT VALUE STRING[50] (Consignment) IN issuanceConsignment CHARWIDTH 15;
warrantHolder 'По доверенности выданной ' (consignment) = ABSTRACT STRING[200] (Consignment) IN issuanceConsignment CHARWIDTH 15;

useGoodsAccepted 'Использовать справочник сотрудников' = ABSTRACT BOOLEAN (Consignment);

dataGoodsAccepted = DATA Employee(Consignment);
goodsAccepted 'Принял грузополучатель' (consignment) = ABSTRACT STRING[150] (Consignment) IN issuanceConsignment;
overGoodsAccepted 'Принял грузополучатель'  = OVERRIDE 
    goodsAccepted(Consignment consignment), 
    positionShortName(dataGoodsAccepted(consignment)) IN issuanceConsignment CHARWIDTH 20;
    
changeGoodsAccepted(Consignment consignment)  {    
    IF useGoodsAccepted(consignment) THEN {
        DIALOG dialogEmployees OBJECTS e = dataGoodsAccepted(consignment) INPUT NULL DO {
            dataGoodsAccepted(consignment) <- e;
        }
    } ELSE {
        INPUT s = goodsAccepted(consignment) DO {
            goodsAccepted(consignment) <- s;
        }                   
    }        
}   

sealNumberSupplier 'Номер пломбы грузоотправителя' = ABSTRACT STRING[50] (Consignment) IN issuanceConsignment CHARWIDTH 15;
sealNumberCustomer 'Номер пломбы грузополучателя' = ABSTRACT STRING[50] (Consignment) IN issuanceConsignment CHARWIDTH 15;

// ------------------------------------- Погрузочно-разгрузочные работы --------------------------------- //

GROUP loadingConsignment 'ПРР' : base;

loadingExecuter (consignment) = ABSTRACT LegalEntity(Consignment);
nameLoadingExecuter 'Исполнитель погрузки' (Consignment consignment) = name(loadingExecuter(consignment));
overNameLoadingExecuter 'Исполнитель погрузки' (Consignment consignment)= OVERRIDE nameLoadingExecuter(consignment), 'Грузоотправитель' IF consignment IS Consignment IN loadingConsignment;

wayOfLoading (consignment) = ABSTRACT WayOfLoading(Consignment);
nameWayOfLoading 'Способ погрузки' (Consignment consignment) = name(wayOfLoading(consignment)) IN loadingConsignment;

unloadingExecuter (consignment) = ABSTRACT LegalEntity(Consignment);
nameUnloadingExecuter 'Исполнитель разгрузки' (Consignment consignment) = name(unloadingExecuter(consignment));
overNameUnloadingExecuter 'Исполнитель разгрузки' (Consignment consignment)= OVERRIDE nameUnloadingExecuter(consignment), 'Грузополучатель' IF consignment IS Consignment IN loadingConsignment;

wayOfUnloading (consignment) = ABSTRACT WayOfLoading(Consignment);
nameWayOfUnloading 'Способ разгрузки' (Consignment consignment) = name(wayOfUnloading(consignment)) IN loadingConsignment;

codeLoading 'Код ПРР' (consignment) = ABSTRACT BPSTRING[3] (Consignment)IN loadingConsignment;

notArrivalTimeConsignment 'Не печатать текущее время прибытия в накладной' () = DATA BOOLEAN ();
isArrivalTime 'Печатать текущее время прибытия в накладной' = ABSTRACT BOOLEAN (Consignment);

dataArrivalTime 'Время прибытия' (consignment) = ABSTRACT DATETIME(Consignment);
arrivalTime 'Время прибытия' (Consignment consignment) = OVERRIDE dataArrivalTime(consignment),
                                                        currentDateTime() IF consignment IS Consignment AND NOT notArrivalTimeConsignment(),
                                                        currentDateTime() IF  isArrivalTime(consignment) IN carConsignment;

dataDowntime 'Время простоя (мин.)' = DATA  INTEGER ();

VATText = ABSTRACT STRING[255](Consignment);

EXTEND FORM options
    PROPERTIES() dataDowntime, notArrivalTimeConsignment
;

DESIGN options {
    consignment  {
        MOVE PROPERTY(dataDowntime());
        MOVE PROPERTY(notArrivalTimeConsignment());
    }
}

dataDowntime 'Время простоя' (consignment) = ABSTRACT INTEGER (Consignment);
downtime 'Время простоя' (Consignment consignment) = OVERRIDE dataDowntime(consignment), 
                                                             dataDowntime() IF consignment IS Consignment AND NOT notArrivalTimeConsignment(), 
                                                             dataDowntime() IF isArrivalTime(consignment) IN carConsignment;

departureTime 'Время убытия' (Consignment consignment) = sumMinutes(arrivalTime(consignment), LONG(downtime(consignment))) IN carConsignment;                                                                

raceQuantity 'Количество ездок' (consignment) = ABSTRACT INTEGER (Consignment) IN carConsignment;

countPages 'Кол-во листов в приложении' (consignment) = ABSTRACT INTEGER (Consignment);

additionalDocuments 'С товаром переданы документы' (consignment) = ABSTRACT STRING[250] (Consignment);

dataNote 'Примечание' (consignment) = ABSTRACT STRING[500] (Consignment);
overNote 'Примечание' (consignment) = DATA STRING[500] (Consignment) ;
extraNote 'Примечание' (consignment) = ABSTRACT STRING[500] (Consignment) ;
note 'Примечание' (Consignment consignment) = OVERRIDE overNote(consignment), dataNote(consignment) CHARWIDTH 30;

namePayer 'Заказчик перевозки ' (Consignment consignment) =
    name(payer(consignment)) + ' , ' + UNP(payer(consignment)) IN carConsignment;
    
showNullQuantity = ABSTRACT BOOLEAN (ConsignmentDetail);

// Базовые абстрактные свойства
dataPrice 'Цена' (d) = ABSTRACT CASE NUMERIC[16,4] (ConsignmentDetail);
dataInvoicePrice 'Цена с НДС' (d) = ABSTRACT CASE NUMERIC[16,4] (ConsignmentDetail);

dataSum 'Стоимость' (d) = ABSTRACT CASE NUMERIC[18,4] (ConsignmentDetail);
dataSumInvoice 'Сумма с НДС' (d) = ABSTRACT CASE NUMERIC[18,4] (ConsignmentDetail);

// С учетом "переключений"

isInvoicePrice 'Печатать в качестве цены цену с НДС' (d) = ABSTRACT CASE BOOLEAN (ConsignmentDetail);
priceBy 'Цена' (ConsignmentDetail d) = IF NOT isInvoicePrice(d) THEN dataPrice(d) ELSE dataInvoicePrice(d);
price(ConsignmentDetail d) += priceBy(d);

switchSum (ConsignmentDetail d) = ABSTRACT CASE BOOLEAN (ConsignmentDetail);
sumBy 'Стоимость' (ConsignmentDetail d) = IF NOT switchSum(d) THEN dataSum(d) ELSE dataSumInvoice(d);
sum(ConsignmentDetail d) += sumBy(d);

printWithoutVAT 'Печатать вместо ставки 0 "Без НДС"' (d) = ABSTRACT CASE BOOLEAN (ConsignmentDetail);
printDashVAT 'Печатать вместо ставки 0 "-"' (d) = ABSTRACT CASE BOOLEAN (ConsignmentDetail);

switchSumInvoice (ConsignmentDetail d) = ABSTRACT CASE BOOLEAN (ConsignmentDetail);
sumInvoice 'Сумма с НДС' (ConsignmentDetail d) = IF NOT switchSumInvoice(d) THEN dataSumInvoice(d) ELSE dataSum(d);

// ---------------- Устаревшие свойства, которые надо вырезать

overSumVAT 'Сумма НДС' (d) = ABSTRACT CASE NUMERIC[18,4] (ConsignmentDetail);

// ---------------- Остальные свойства                                                                        
                                                                        
notPrintGr 'Не писать прописью граммы в ТТН' = ABSTRACT BOOLEAN (Consignment);
dataGrossWeight 'Масса груза, кг.' (d) = ABSTRACT NUMERIC[16,5] (ConsignmentDetail);
overGrossWeight 'Масса груза, кг.' (d) = ABSTRACT NUMERIC[16,5] (ConsignmentDetail);
grossWeight 'Масса груза, кг.' (ConsignmentDetail d) = OVERRIDE overGrossWeight(d),
                                                                               dataGrossWeight(d);                                                                         
changeGrossWeight (ConsignmentDetail d)  {    
    INPUT s = NUMERIC[16,5]  DO {
        dataGrossWeight(d) <- s;
    }        
}

grossWeightTon 'Масса груза, т.' (ConsignmentDetail d) = round6(NUMERIC[17,6](grossWeight(d)) / 1000);

dataNote 'Примечание' = ABSTRACT VALUE STRING[500] (ConsignmentDetail) CHARWIDTH 50;
TABLE consignmentDetail(ConsignmentDetail);
overNote 'Примечание' = DATA STRING[500] (ConsignmentDetail) CHARWIDTH 30;
note 'Примечание' (ConsignmentDetail d) = OVERRIDE overNote(d), dataNote(d) CHARWIDTH 30;

extraDescription 'Доп. наименование' (d) = ABSTRACT STRING[1500] (ConsignmentDetail) CHARWIDTH 30;

grossWeightTonConsignmentDetail 'Общая масса груза, т.' (consignment) = GROUP SUM grossWeightTon(ConsignmentDetail d) IF NOT skip(d)
                                                            BY consignment(d) IN sumConsignment;

grossWeightConsignmentDetail 'Общая масса груза, кг.'(consignment) = GROUP SUM grossWeight(ConsignmentDetail d) IF NOT skip(d)
                                                            BY consignment(d) IN sumConsignment;

grossWeight 'Общая масса груза, кг' = ABSTRACT CASE NUMERIC[8,2] (Consignment);
overGrossWeightConsignmentDetail 'Общая масса груза, кг' = OVERRIDE grossWeight(Consignment consignment),
                                                                               grossWeightConsignmentDetail(consignment);

isCustomsFlow 'Расход с СВХ' (consignment) = ABSTRACT BOOLEAN (Consignment);
printDetailCustomsFlow 'Печатать строки' (consignment) = ABSTRACT BOOLEAN (Consignment);

dataCurrency 'Валюта (ИД)' (consignment) = ABSTRACT Currency (Consignment);
overCurrency 'Валюта (ИД)' (consignment) = ABSTRACT CASE Currency (Consignment);
currency 'Валюта (ИД)' (Consignment consignment) = OVERRIDE overCurrency(consignment), dataCurrency(consignment);
shortNameCurrency 'Валюта' (Consignment consignment) = shortName(currency(consignment));
documentNameCurrency 'Валюта (сокр.)' (Consignment consignment) = documentName(currency(consignment));
isCurrency 'Выбрана валюта' (Consignment consignment) = TRUE IF currency(consignment);

sumConsignmentDetail 'Сумма с посудой без НДС (всего)' (consignment) = GROUP SUM sum(ConsignmentDetail d) IF NOT skip(d)
                                                            BY consignment(d) IN sumConsignment;
//
//sumVATIaWConsignmentDetail 'Сумма НДС' (d) = sumVATConsignmentDetail(d) (+) wareVATSumConsignmentDetail(d);
overSumVATIaW = ABSTRACT NUMERIC[18,4] (ConsignmentDetail);
sumVATIaW (ConsignmentDetail detail) = OVERRIDE overSumVATIaW(detail), sumVAT(detail);

sumVATConsignmentDetail 'Сумма НДС (всего)' (consignment) = GROUP SUM sumVATIaW(ConsignmentDetail d) IF NOT skip(d)
                                                            BY consignment(d) IN sumConsignment;
//
sumInvoiceConsignmentDetail 'Сумма с НДС (всего)' (consignment) = GROUP SUM sumInvoice(ConsignmentDetail d) IF NOT skip(d)
                                                            BY consignment(d) IN sumConsignment;

//----------проверка на заполнение атрибутов ---------

stopPrintConsignment = DATA LOCAL BOOLEAN ();

checkMandatoryAttribute  ABSTRACT LIST ( Consignment);

META checkConsignmentAttribute(type, attrib, msg, skipProp)
    checkMandatoryAttribute(Consignment c) + { 
        IF is##type(c) AND NOT attrib(c) AND NOT skipProp(c) THEN {
            stopPrintConsignment() <- TRUE;
            MESSAGE (CONCAT': ', msg, (CONCAT ' ', seriesNumber(c), 'от '+toDateDDMMYY(date(c)))) NOWAIT;
        }
    }
END

@checkConsignmentAttribute(TTN1, nameDriver, 'Для накладной должен быть заполнен водитель', skipDriver);
checkMandatoryAttribute(Consignment c) + { 
    IF mandatoryDriver(c) AND NOT (driver(c) OR dataEmployee(c)) THEN {
        stopPrintConsignment() <- TRUE;
        MESSAGE (CONCAT': ', 'Для накладной должен быть выбран водитель из справочника', (CONCAT ' ', seriesNumber(c), 'от '+toDateDDMMYY(date(c)))) NOWAIT;
    }
}

@checkConsignmentAttribute(TTN1, nameTruck, 'Для накладной должен быть заполнен автомобиль', skipTruck);
checkMandatoryAttribute(Consignment c) + { 
    IF mandatoryTruck(c) AND NOT truck(c) THEN {
        stopPrintConsignment() <- TRUE;
        MESSAGE (CONCAT': ', 'Для накладной должен быть выбран автомобиль из справочника', (CONCAT ' ', seriesNumber(c), 'от '+toDateDDMMYY(date(c)))) NOWAIT;
    }
}

@checkConsignmentAttribute(TTN1, overWaybill, 'Для накладной должен быть заполнен путевой лист', skipWaybill);

// ---------------------------- Формы для накладных --------------------------------- //

useCustomFormSimplePrint = DATA LOCAL NESTED BOOLEAN ();
printAllConsignmentDetail() += useCustomFormSimplePrint();

META defineConsignmentFormSimple(form, caption)

    FORM consignmentSimple###form caption
        OBJECTS c=Consignment PANEL SUBREPORT

        PROPERTIES (c) date, shipmentBase, nameIssuanceAllowed, nameIssuanceExecuted,
                       forwarder, warrant, warrantHolder, overGoodsAccepted,
                       quantityConsignmentDetail, sumConsignmentDetail, sumVATConsignmentDetail,
                       sumInvoiceConsignmentDetail,
                       UNPCustomer, UNPSupplier, addressSupplier, addressCustomer,
                       fullNameSupplier, fullNameCustomer, extraDescriptionSupplier, extraDescriptionCustomer, number, series, seriesNumber, countConsignmentDetail,
                       isCustomsFlow, printDetailCustomsFlow, isCurrency, shortNameCurrency,
                       note, extraNote, documentNameCurrency, countPages, additionalDocuments, useEmptyVATConsignmentDetail, VATText
        PROPERTIES()   DRAW c countRowsSimpleVertical, countRowsSimpleHorizontal
        OBJECTS d=ConsignmentDetail

        PROPERTIES(d) order, index, nameSku, shortNameUOM, quantity, price,
                      sum, vat, useEmptyVAT, sumVAT, sumInvoice,
                      note, extraDescription, printWithoutVAT, printDashVAT
        ORDERS order(d), index(d)
        FILTERS //consignment(d) == c,
                IF NOT useCustomFormSimplePrint() THEN consignment(d) == c ELSE TRUE,
                quantity(d),
                NOT skip(d)
    ;
    printSimple###form caption (Consignment consignment)  { 
        IF NOT printedConsignment(consignment) THEN NEWSESSION {
            printedConsignment(consignment) <- TRUE;
            APPLY;
        }
        PRINT consignmentSimple###form OBJECTS c = consignment; 
    }  IMAGE 'print.png' IN print;
    printSimple###form##Auto caption (Consignment consignment)  { PRINT consignmentSimple###form OBJECTS c = consignment NOPREVIEW; } IMAGE 'print.png' IN print;
END


META defineConsignmentFormSimpleExtra(form, caption)

    FORM consignmentSimple###form caption
        OBJECTS c=Consignment PANEL SUBREPORT

        PROPERTIES (c) date, shipmentBase, nameIssuanceAllowed, nameIssuanceExecuted,
                       forwarder, warrant, warrantHolder, overGoodsAccepted,
                       quantityConsignmentDetail, sumConsignmentDetail, sumVATConsignmentDetail,
                       sumInvoiceConsignmentDetail,
                       UNPCustomer, UNPSupplier, addressSupplier, addressCustomer,
                       fullNameSupplier, fullNameCustomer, extraDescriptionSupplier, extraDescriptionCustomer, number, series, seriesNumber, countConsignmentDetail,
                       isCustomsFlow, printDetailCustomsFlow, isCurrency, shortNameCurrency,
                       note, extraNote, documentNameCurrency, countPages, additionalDocuments, useEmptyVATConsignmentDetail, VATText
        PROPERTIES()   DRAW c countRowsSimpleVertical, countRowsSimpleHorizontal
        OBJECTS d=ConsignmentDetail

        PROPERTIES(d) order, index, nameSku, shortNameUOM, quantity, price,
                      sum, vat, useEmptyVAT, sumVAT, sumInvoice,
                      note, extraDescription, printWithoutVAT, printDashVAT
        ORDERS order(d), index(d)
        FILTERS //consignment(d) == c,
                IF NOT useCustomFormSimplePrint() THEN consignment(d) == c ELSE TRUE,
                quantity(d),
                NOT skip(d)
    ;
    printSimple###form caption (Consignment consignment)  { 
	NEWSESSION {        
	    
	        PRINT consignmentSimple###form OBJECTS c = consignment ;
	        countPages(consignment) <- formPageCount() WHERE NOT countPages(consignment);
	        apply();
	        
	    }
} IMAGE 'print.png' IN print;
    
    printSimple###form##Auto caption (Consignment consignment)  { PRINT consignmentSimple###form OBJECTS c = consignment NOPREVIEW; } IMAGE 'print.png' IN print;        
END

@defineConsignmentFormSimple(vertical, 'ТН-2, вертикальная');
@defineConsignmentFormSimple(horizontal, 'ТН-2, горизонтальная');
@defineConsignmentFormSimpleExtra(attach, 'Приложение к ТН-2');
printSimpleVerticalAttach 'ТН-2, вертикальная с приложением' (Consignment consignment)  { 
	NEWSESSION {
	    LOCAL countRowsSimpleVerticalLocal = INTEGER ();
	    LOCAL countRowsSimpleHorizontalLocal = INTEGER ();
	    IF skipCountRows() THEN {
	        countRowsSimpleVerticalLocal() <- countRowsSimpleVertical();
	        countRowsSimpleHorizontalLocal() <- countRowsSimpleHorizontal();
	        countRowsSimpleVertical() <- 0;
	        countRowsSimpleHorizontal() <- 0;
	    }
	    PRINT consignmentSimpleAttach OBJECTS c = consignment ;
	    countPages(consignment) <- formPageCount() WHERE NOT countPages(consignment);
	    printSimpleVertical(consignment);
	    IF skipCountRows() THEN {
	        countRowsSimpleVertical() <- countRowsSimpleVerticalLocal();
            countRowsSimpleHorizontal() <- countRowsSimpleHorizontalLocal();
	    }
	    apply();
	}
} IMAGE 'print.png' IN print;
printSimpleHorizontalAttach 'ТН-2, горизонтальная с приложением' (Consignment consignment)  { 
	NEWSESSION {
	    LOCAL countRowsSimpleVerticalLocal = INTEGER ();
        LOCAL countRowsSimpleHorizontalLocal = INTEGER ();
        IF skipCountRows() THEN {
            countRowsSimpleVerticalLocal() <- countRowsSimpleVertical();
            countRowsSimpleHorizontalLocal() <- countRowsSimpleHorizontal();
            countRowsSimpleVertical() <- 0;
            countRowsSimpleHorizontal() <- 0;
        }
	    PRINT consignmentSimpleAttach OBJECTS c = consignment ;
	    countPages(consignment) <- formPageCount() WHERE NOT countPages(consignment);
	    printSimpleHorizontal(consignment);
	    IF skipCountRows() THEN {
            countRowsSimpleVertical() <- countRowsSimpleVerticalLocal();
            countRowsSimpleHorizontal() <- countRowsSimpleHorizontalLocal();
        }
	    apply();
	}
} IMAGE 'print.png' IN print;

META defineConsignmentForm(form, caption)  // объявляем форму
    FORM form caption
    ;
END
META defineConsignment(form, prefix)  // добавляем объет на форму (по сторонам)
    EXTEND FORM form 
        OBJECTS prefix=Consignment PANEL SUBREPORT
    ;
END
META defineConsignmentAll(form, prefix, report) // добавляем объет на форму (сквозная)
    EXTEND FORM form 
        OBJECTS prefix=Consignment SUBREPORT report() 
    ;
END

META defineExtendConsignmentForm(form, prefix) // добавляем свойства (по сторонам / сквозная)
    EXTEND FORM form 
        PROPERTIES (prefix) prefix##dateConsignment=date, prefix##UNPCustomerConsignment=UNPCustomer, 
                       prefix##UNPSupplierConsignment=UNPSupplier, prefix##addressSupplierConsignment=addressSupplier, 
                       prefix##addressCustomerConsignment=addressCustomer, prefix##fullNameSupplierConsignment=fullNameSupplier,
                       prefix##fullNameCustomerConsignment=fullNameCustomer, prefix##nameTruckConsignment=nameTruck, 
                       prefix##extraDescriptionSupplier=extraDescriptionSupplier, prefix##extraDescriptionCustomer=extraDescriptionCustomer,
                       prefix##ownerTruckConsignment=ownerTruck, prefix##trailerConsignment=trailer, 
                       prefix##nameDriverConsignment=nameDriver, prefix##overWaybillConsignment=overWaybill,
                       prefix##fullNamePayerConsignment=fullNamePayer, prefix##UNPPayerConsignment=UNPPayer, 
                       prefix##addressPayerConsignment=addressPayer, 
                       prefix##shipmentBaseConsignment=shipmentBase, prefix##addressSupplierStockConsignment=addressSupplierStock, 
                       prefix##addressCustomerStockConsignment=addressCustomerStock,
                       prefix##readdressingConsignment=readdressing, prefix##nameIssuanceAllowedConsignment=nameIssuanceAllowed, 
                       prefix##nameIssuanceExecutedConsignment=nameIssuanceExecuted,
                       prefix##forwarderConsignment=forwarder, prefix##warrantConsignment=warrant, 
                       prefix##warrantHolderConsignment=warrantHolder, prefix##goodsAcceptedConsignment=overGoodsAccepted,
                       prefix##sealNumberSupplier= sealNumberSupplier, prefix##sealNumberCustomer= sealNumberCustomer,  
                       prefix##overNameLoadingExecuterConsignment=overNameLoadingExecuter, prefix##nameWayOfLoadingConsignment=nameWayOfLoading, 
                       prefix##overNameUnloadingExecuterConsignment=overNameUnloadingExecuter, prefix##nameWayOfUnloadingConsignment=nameWayOfUnloading, 
                       prefix##codeLoadingConsignment=codeLoading,
                       prefix##arrivalTimeConsignment=arrivalTime, prefix##departureTimeConsignment=departureTime, 
                       prefix##downtimeConsignment=downtime, prefix##raceQuantityConsignment=raceQuantity,
                       prefix##quantityConsignmentDetailConsignment=quantityConsignmentDetail, 
                       prefix##overPackQuantityConsignmentDetailConsignment=overPackQuantityConsignmentDetail, 
                       prefix##grossWeightTonConsignmentDetailConsignment=grossWeightTonConsignmentDetail, 
                       prefix##grossWeightConsignmentDetailConsignment=grossWeightConsignmentDetail,
                       prefix##sumConsignmentDetailConsignment=sumConsignmentDetail, 
                       prefix##sumVATConsignmentDetailConsignment=sumVATConsignmentDetail, 
                       prefix##sumInvoiceConsignmentDetailConsignment=sumInvoiceConsignmentDetail,
                       prefix##countConsignmentDetailConsignment=countConsignmentDetail, 
                       prefix##seriesConsignment=series, prefix##numberConsignment=number, prefix##seriesNumberConsignment=seriesNumber, 
                       prefix##isCustomsFlowConsignment=isCustomsFlow, prefix##printDetailCustomsFlowConsignment=printDetailCustomsFlow,
                       prefix##isCurrencyConsignment=isCurrency, prefix##shortNameCurrencyConsignment=shortNameCurrency,
                       prefix##noteConsignment=note, prefix##documentNameCurrencyConsignment=documentNameCurrency,    
                       prefix##countPagesConsignment=countPages, prefix##useEmptyVATConsignmentDetailConsignment = useEmptyVATConsignmentDetail,
                       prefix##notPrintGr=notPrintGr, prefix##additionalDocumentsConsignment=additionalDocuments, 
                       prefix##extraNoteConsignment=extraNote, prefix##VATText=VATText
                        
        PROPERTIES()   DRAW prefix prefix##countRowsVerticalA=countRowsVerticalA, prefix##countRowsVerticalAB=countRowsVerticalAB, 
                       prefix##countRowsHorizontal=countRowsHorizontal
 
 
        OBJECTS prefix##d=ConsignmentDetail

        PROPERTIES(prefix##d) prefix##orderConsignmentDetail= order, prefix##indexConsignmentDetail=index, prefix##nameSkuConsignmentDetail=nameSku, prefix##shortNameUOMConsignmentDetail=shortNameUOM, 
                      prefix##quantityConsignmentDetail=quantity, prefix##priceConsignmentDetail=price,
                      prefix##sumConsignmentDetail=sum, prefix##vatConsignmentDetail=vat, prefix##useEmptyVATConsignmentDetail=useEmptyVAT, 
                      prefix##printWithoutVATConsignmentDetail= printWithoutVAT, prefix##printDashVATConsignmentDetail= printDashVAT,
                      prefix##sumVATConsignmentDetail=sumVAT, prefix##sumInvoiceConsignmentDetail=sumInvoice,
                      prefix##packQuantityConsignmentDetail=packQuantity, prefix##grossWeightTonConsignmentDetail=grossWeightTon,
                      prefix##grossWeightConsignmentDetail=grossWeight,prefix##noteConsignmentDetail=note, 
                      prefix##extraDescriptionConsignmentDetail=extraDescription
        ORDERS prefix##orderConsignmentDetail, prefix##indexConsignmentDetail
        FILTERS consignment(prefix##d) == prefix,
                quantity(prefix##d) OR showNullQuantity(prefix##d),
                NOT skip(prefix##d)
    ;        
          
END 
META definePrintConsignmentForm(form, caption, prefix)  //печать накладной по сторонам
    print###form caption (Consignment consignment)  { 
        stopPrintConsignment() <- NULL;
        checkMandatoryAttribute(consignment);
        IF NOT stopPrintConsignment() THEN {
            IF NOT printedConsignment(consignment) THEN NEWSESSION {
                printedConsignment(consignment) <- TRUE;
                APPLY;
            }
            PRINT consignment###form OBJECTS prefix = consignment; 
        }
    } IMAGE 'print.png' IN print;
    print###form##Auto caption (Consignment consignment)  { 
        stopPrintConsignment() <- NULL;
        checkMandatoryAttribute(consignment);
        IF NOT stopPrintConsignment() THEN PRINT consignment###form OBJECTS prefix = consignment NOPREVIEW;
    } IMAGE 'print.png' IN print; 
END 
META definePrintConsignmentFormExtra(form, caption, prefix)  //печать накладной по сторонам
    print###form caption (Consignment consignment)  { 
	    NEWSESSION {
            //stopPrintConsignment() <- NULL;
            checkMandatoryAttribute(consignment);
            IF NOT stopPrintConsignment() THEN {
                PRINT consignment###form OBJECTS prefix = consignment ;
                countPages(consignment) <- formPageCount() WHERE NOT countPages(consignment);
                apply();                
                
            }
        }
} IMAGE 'print.png' IN print;
    print###form##Auto caption (Consignment consignment)  { 
        stopPrintConsignment() <- NULL;
        checkMandatoryAttribute(consignment);
        IF NOT stopPrintConsignment() THEN PRINT consignment###form OBJECTS prefix = consignment NOPREVIEW;
    } IMAGE 'print.png' IN print; 
END 
  
META defineExtendPrintConsignmentFormAll(form, caption, prefixA, prefixB)       //печать накладной сквозная
    print###form caption (Consignment consignment)  { 
        stopPrintConsignment() <- NULL;
        checkMandatoryAttribute(consignment);
        IF NOT stopPrintConsignment() THEN {
            IF NOT printedConsignment(consignment) THEN NEWSESSION {
                printedConsignment(consignment) <- TRUE;
                APPLY;
            }
            PRINT consignment###form OBJECTS prefixA = consignment, prefixB = consignment ;                          
        }
              
    } IMAGE 'print.png' IN print;
    print###form###attach caption###' с приложением' (Consignment consignment)  { 
        NEWSESSION {
///            stopPrintConsignment() <- NULL;
            checkMandatoryAttribute(consignment);
            IF NOT stopPrintConsignment() THEN {
                LOCAL countRowsVerticalALocal = INTEGER ();
                LOCAL countRowsVerticalABLocal = INTEGER ();
                LOCAL countRowsHorizontalLocal = INTEGER ();
                IF skipCountRows() THEN {
                    countRowsVerticalALocal() <- countRowsVerticalA();
                    countRowsVerticalABLocal() <- countRowsVerticalAB();
                    countRowsHorizontalLocal() <- countRowsHorizontal();
                    countRowsVerticalA() <- 0;
                    countRowsVerticalAB() <- 0;
                    countRowsHorizontal() <- 0;
                }
                PRINT consignment###attach OBJECTS c = consignment ;
                countPages(consignment) <- formPageCount() WHERE NOT countPages(consignment);
                PRINT consignment###form OBJECTS prefixA = consignment, prefixB = consignment ;
                IF skipCountRows() THEN {
                    countRowsVerticalA() <- countRowsVerticalALocal();
                    countRowsVerticalAB() <- countRowsVerticalABLocal();
                    countRowsHorizontal() <- countRowsHorizontalLocal();
                }
                IF NOT printedConsignment(consignment) THEN  {
                    printedConsignment(consignment) <- TRUE;
                }                
                apply();
            }            
        }
    } IMAGE 'print.png' IN print;        
                       
    print###form###prefixA##uto caption (Consignment consignment)  { 
        stopPrintConsignment() <- NULL;
        checkMandatoryAttribute(consignment);
        PRINT consignment###form OBJECTS prefixA = consignment, prefixB = consignment NOPREVIEW;
    } IMAGE 'print.png' IN print; 
END   

//-------------------  Создание накладной по сторонам ----------------------//

@defineConsignmentForm(consignmentVerticalA, 'ТТН-1, вертикальная (сторона А)');
@defineConsignmentForm(consignmentHorizontalA, 'ТТН-1, горизонтальная (сторона А)');
@defineConsignmentForm(consignmentVerticalB, 'ТТН-1, вертикальная (сторона Б)');
@defineConsignmentForm(consignmentHorizontalB, 'ТТН-1, горизонтальная (сторона Б)');
@defineConsignmentForm(consignmentAttach, 'Приложение к ТТН-1');
@defineConsignmentForm(consignmentAttachHorizontal, 'Приложение к ТТН-1 (гор.)');
@defineConsignmentForm(consignmentVerticalAB, 'ТТН-1, вертикальная (сторона А/Б)');
@defineConsignmentForm(consignmentHorizontalAB, 'ТТН-1, горизонтальная (сторона А/Б)');

@defineConsignment(consignmentVerticalA, a);
@defineConsignment(consignmentHorizontalA, a);
@defineConsignment(consignmentVerticalB, b);
@defineConsignment(consignmentHorizontalB, b);
@defineConsignment(consignmentAttach, c);
@defineConsignment(consignmentAttachHorizontal, c);
@defineConsignment(consignmentVerticalAB, a);
@defineConsignment(consignmentHorizontalAB, a);

@defineExtendConsignmentForm(consignmentVerticalA, a);
@defineExtendConsignmentForm(consignmentHorizontalA, a);
@defineExtendConsignmentForm(consignmentVerticalB, b);
@defineExtendConsignmentForm(consignmentHorizontalB, b);
@defineExtendConsignmentForm(consignmentAttach, c);
@defineExtendConsignmentForm(consignmentAttachHorizontal, c);
@defineExtendConsignmentForm(consignmentVerticalAB, a);
@defineExtendConsignmentForm(consignmentHorizontalAB, a);

@definePrintConsignmentForm(verticalA, 'ТТН-1, вертикальная (сторона А)', a);
@definePrintConsignmentForm(horizontalA, 'ТТН-1, горизонтальная (сторона А)', a);
@definePrintConsignmentForm(verticalB, 'ТТН-1, вертикальная (сторона Б)', b);
@definePrintConsignmentForm(horizontalB, 'ТТН-1, горизонтальная (сторона Б)', b);
@definePrintConsignmentFormExtra(attach, 'Приложение к ТТН-1', c);
@definePrintConsignmentFormExtra(attachHorizontal, 'Приложение к ТТН-1 (гор.)', c);

printVerticalABAttach 'ТТН-1 вертикальная (А/Б) с приложением' (Consignment consignment)  { 
	NEWSESSION {
	    checkMandatoryAttribute(consignment);
	    IF NOT stopPrintConsignment() THEN {
	        LOCAL countRowsVerticalALocal = INTEGER ();
            LOCAL countRowsVerticalABLocal = INTEGER ();
            LOCAL countRowsHorizontalLocal = INTEGER ();
            IF skipCountRows() THEN {
                countRowsVerticalALocal() <- countRowsVerticalA();
                countRowsVerticalABLocal() <- countRowsVerticalAB();
                countRowsHorizontalLocal() <- countRowsHorizontal();
                countRowsVerticalA() <- 0;
                countRowsVerticalAB() <- 0;
                countRowsHorizontal() <- 0;
            }
	        PRINT consignmentAttach OBJECTS c = consignment ;
	        countPages(consignment) <- formPageCount() WHERE NOT countPages(consignment);
	        PRINT consignmentVerticalAB OBJECTS a = consignment ;
	        IF skipCountRows() THEN {
                countRowsVerticalA() <- countRowsVerticalALocal();
                countRowsVerticalAB() <- countRowsVerticalABLocal();
                countRowsHorizontal() <- countRowsHorizontalLocal();
            }
            IF NOT printedConsignment(consignment) THEN {
                printedConsignment(consignment) <- TRUE;                ;
            }
	        apply();
	    }
	}
} IMAGE 'print.png' IN print;
printHorizontalABAttach 'ТТН-1 горизонтальная (А/Б) с приложением' (Consignment consignment)  { 
	NEWSESSION {
	    checkMandatoryAttribute(consignment);
	    IF NOT stopPrintConsignment() THEN {
	        LOCAL countRowsVerticalALocal = INTEGER ();
            LOCAL countRowsVerticalABLocal = INTEGER ();
            LOCAL countRowsHorizontalLocal = INTEGER ();
            IF skipCountRows() THEN {
                countRowsVerticalALocal() <- countRowsVerticalA();
                countRowsVerticalABLocal() <- countRowsVerticalAB();
                countRowsHorizontalLocal() <- countRowsHorizontal();
                countRowsVerticalA() <- 0;
                countRowsVerticalAB() <- 0;
                countRowsHorizontal() <- 0;
            }
	        PRINT consignmentAttach OBJECTS c = consignment ;
	        countPages(consignment) <- formPageCount() WHERE NOT countPages(consignment);
	        PRINT consignmentHorizontalAB OBJECTS a = consignment ;
	        IF skipCountRows() THEN {
                countRowsVerticalA() <- countRowsVerticalALocal();
                countRowsVerticalAB() <- countRowsVerticalABLocal();
                countRowsHorizontal() <- countRowsHorizontalLocal();
            }
            IF NOT printedConsignment(consignment) THEN {
                printedConsignment(consignment) <- TRUE;                ;
            }            
	        apply();
	    }
	}
} IMAGE 'print.png' IN print;

printAttachXLS 'Приложение к ТТН-1 (xls)' (Consignment consignment)  { PRINT consignmentAttach OBJECTS c = consignment XLSX; } IN print;
printSimpleAttachXLS 'Приложение к ТН-2 (xls)' (Consignment consignment)  { PRINT consignmentSimpleAttach OBJECTS c = consignment XLSX; } IN print;
@definePrintConsignmentForm(verticalAB, 'ТТН-1, вертикальная (сторона А/Б)', a);
@definePrintConsignmentForm(horizontalAB, 'ТТН-1, горизонтальная (сторона А/Б)', a);

//-------------------  Создание сквозной накладной  ----------------------//

@defineConsignmentForm(consignmentVertical, 'ТТН-1, вертикальная');
reportFilePrintConsignmentVerticalA () = 'Consignment_consignmentVerticalA_a.jrxml';
@defineConsignmentAll(consignmentVertical, a, reportFilePrintConsignmentVerticalA);
reportFilePrintConsignmentVerticalB () = 'Consignment_consignmentVerticalB_b.jrxml';
@defineConsignmentAll(consignmentVertical, b, reportFilePrintConsignmentVerticalB);
@defineExtendConsignmentForm(consignmentVertical, a);
@defineExtendConsignmentForm(consignmentVertical, b);
@defineExtendPrintConsignmentFormAll(vertical, 'ТТН-1, вертикальная', a, b);


@defineConsignmentForm(consignmentHorizontal, 'ТТН-1, горизонтальная');
reportFilePrintConsignmentHorizontalA () = 'Consignment_consignmentHorizontalA_a.jrxml';
@defineConsignmentAll(consignmentHorizontal, a, reportFilePrintConsignmentHorizontalA);
reportFilePrintConsignmentHorizontalB () = 'Consignment_consignmentHorizontalB_b.jrxml';
@defineConsignmentAll(consignmentHorizontal, b, reportFilePrintConsignmentHorizontalB);
@defineExtendConsignmentForm(consignmentHorizontal, a);
@defineExtendConsignmentForm(consignmentHorizontal, b);
@defineExtendPrintConsignmentFormAll(horizontal, 'ТТН-1, горизонтальная', a, b);

hidePayerConsignmnet = ABSTRACT BOOLEAN (Consignment);
showPayerConsignment = ABSTRACT BOOLEAN (Consignment);
showPayer(Consignment consignment) = (showTTN1(consignment) AND NOT hidePayerConsignmnet(consignment)) OR showPayerConsignment(consignment) ;

changeTrailer(Consignment c)  { 
    INPUT s = trailer(c) DO {
        dataTrailer(c) <- s;
    }
}

changeWaybill(Consignment c)  { 
    INPUT s = overWaybill(c) DO {
        dataWaybill(c) <- s;
    }
}

changeAddressSupplierStock(Consignment c)  { 
    INPUT s = addressSupplierStock(c) DO {
        dataAddressSupplierStock(c) <- s;
    }
}

changeAddressCustomerStock(Consignment c)  { 
    INPUT s = addressCustomerStock(c) DO {
        dataAddressCustomerStock(c) <- s;
    }
}

EXTEND FORM consignment
    PROPERTIES(c)  UNPCustomer READONLY, UNPSupplier READONLY 
                   
    PROPERTIES(c)  shipmentBase ON CHANGE changeShipmentBase(c),
                   nameIssuanceAllowed ON CHANGE changeIssuanceAllowed(c), nameIssuanceExecuted ON CHANGE changeIssuanceExecuted(c),
                   forwarder ON CHANGE changeForwarder(c), overGoodsAccepted ON CHANGE changeGoodsAccepted(c),
                   sealNumberSupplier, sealNumberCustomer  

    PROPERTIES(c) SHOWIF (showTTN1(c) OR hideTTN1(c))
                   nameTruck ON CHANGE changeTruck(c), //ownerTruck ON CHANGE changeOwnerTruck(c), 
                   trailer ON CHANGE changeTrailer(c), 
                   nameDriver ON CHANGE changeDriver(c), overWaybill ON CHANGE changeWaybill(c),
                   addressSupplierStock ON CHANGE changeAddressSupplierStock(c), addressCustomerStock ON CHANGE changeAddressCustomerStock(c), readdressing,
                   warrant, warrantHolder, overNameLoadingExecuter, nameWayOfLoading, codeLoading,
                   overNameUnloadingExecuter, nameWayOfUnloading,
                   arrivalTime, downtime, departureTime READONLY, raceQuantity
    PROPERTIES(c)  quantityConsignmentDetail, overPackQuantityConsignmentDetail, grossWeightConsignmentDetail,
                   sumConsignmentDetail, sumVATConsignmentDetail, sumInvoiceConsignmentDetail,
                   countConsignmentDetail, note, shortNameCurrency, countPages, additionalDocuments
    PROPERTIES(c) SHOWIF showPayer(c) fullNamePayer ON CHANGE changePayer(c), UNPPayer ON CHANGE changeUNPPayer(c), addressPayer ON CHANGE changeAddressPayer(c)              

    PROPERTIES(d) vat, sumVAT, sumInvoice,
                  packQuantity ON CHANGE changePackQuantity(d), grossWeight ON CHANGE changeGrossWeight(d), note, extraDescription READONLY
;

DESIGN consignment {
    pane {
        mainTab {
            supplier {
                MOVE PROPERTY(UNPSupplier(c)) BEFORE PROPERTY(addressSupplier(c));
            }
        
            customer {
                MOVE PROPERTY(UNPCustomer(c)) BEFORE PROPERTY(addressCustomer(c));
            }
        
            NEW payer {
                alignment = STRETCH;
                caption = 'Заказчик ';
                horizontal = TRUE;
                MOVE PROPERTY(fullNamePayer(c));
                MOVE PROPERTY(UNPPayer(c));
                MOVE PROPERTY(addressPayer(c));
            }
            MOVE GROUP(carConsignment,c) {
                alignment = STRETCH;
                lines = 3;
                PROPERTY(addressCustomerStock(c)) { charWidth = 70; };
            }
            MOVE GROUP(issuanceConsignment,c) {
                alignment = STRETCH;
                lines = 2;
                PROPERTY(forwarder(c)) { charWidth = 50; };
            }
            MOVE GROUP(loadingConsignment,c) {
                alignment = STRETCH;
                lines = 3;
            }
            
            NEW misc {
                alignment = STRETCH;
                caption = 'Дополнительно';
                
                lines = 3;
                MOVE PROPERTY (note(c));
                MOVE PROPERTY (shortNameCurrency(c));
        
                MOVE PROPERTY(countPages(c));
                MOVE PROPERTY(additionalDocuments(c));
            }
        }

        NEW sum {
            caption = 'Суммы';
            horizontal = TRUE;
            MOVE GROUP(sumConsignment,c) {
                lines = 4;
                MOVE PROPERTY(countConsignmentDetail(c));
                MOVE PROPERTY(quantityConsignmentDetail(c));
                MOVE PROPERTY(overPackQuantityConsignmentDetail(c));
                MOVE PROPERTY(grossWeightConsignmentDetail(c));
                MOVE PROPERTY(sumConsignmentDetail(c));
                MOVE PROPERTY(sumVATConsignmentDetail(c));
                MOVE PROPERTY(sumInvoiceConsignmentDetail(c));
            }
        }
    }
    MOVE TOOLBARBOX;
}

skipShowEditAttributes = ABSTRACT BOOLEAN (Consignment);

beforeEditAttributes(Consignment consignment) + {
    IF NOT isArrivalTime(consignment) AND NOT dataArrivalTime(consignment) THEN {
        //        dataArrivalTime(consignment) <- currentDateTime();
        IF NOT notArrivalTimeConsignment() THEN {
            IF date(consignment) <= currentDate() THEN {
                dataArrivalTime(consignment) <- currentDateTime();
            } ELSE {
                dataArrivalTime(consignment) <- dateTimeToDateTime(date(consignment), currentTime());
            }
        }
    }
}

FORM printConsignment 'Печать накладных'
    OBJECTS c=Consignment PANEL

    PROPERTIES (c)  READONLYIF banPrint(c) printSimpleVertical, printSimpleHorizontal, printSimpleAttach,
                    printVerticalA, printVerticalAB, printHorizontalA, printHorizontalAB, printVerticalB,
                    printHorizontalB, printAttach, editAttributes,
                    printVertical, printHorizontal, printAttachXLS, printSimpleAttachXLS
;

DESIGN printConsignment {

    BOX(c) {
        NEW case55{
            NEW contOne {
                caption = 'Накладная';
                MOVE PROPERTY(editAttributes(c));
            }
            NEW tn{
                horizontal = TRUE;
                caption = 'ТН-2';
                MOVE PROPERTY(printSimpleVertical(c));
                MOVE PROPERTY(printSimpleHorizontal(c));
                MOVE PROPERTY(printSimpleAttach(c));
            }
        }
        NEW ttn1{
            horizontal = TRUE;
            caption = 'ТТН-1';
            NEW ttn1V {
                MOVE PROPERTY(printVerticalA(c));
                MOVE PROPERTY(printVerticalB(c));
                MOVE PROPERTY(printVerticalAB(c));
                MOVE PROPERTY(printVertical(c));
                MOVE PROPERTY(printHorizontal(c));
            }
            NEW ttn1H {
                MOVE PROPERTY(printHorizontalA(c));
                MOVE PROPERTY(printHorizontalB(c));
                MOVE PROPERTY(printHorizontalAB(c));
            }
            NEW ttn1A {
                MOVE PROPERTY(printAttach(c));
            }
        }
        NEW export {
            horizontal = TRUE;
            caption = 'Экспорт';  
            MOVE PROPERTY(printAttachXLS(c));
            MOVE PROPERTY(printSimpleAttachXLS(c));
        }
    }
}

print 'Печать' (Consignment consignment)  { SHOW printConsignment OBJECTS c = consignment; }  IMAGE 'print.png';


// ------------------------------------- Метакод по объявлению и имплементации накладных ------------------ //

// ----------------- Объявление заголовка накладной --------------- //

META defineConsignmentHeader (object)
    @defineConsignmentHeaderInner (object, ###object);
END

META defineConsignmentHeaderInner (object, class)
    payer (object) = DATA LegalEntity (class) IN carConsignment;

    dataTruck (object) = DATA Truck (class);
    nameDataTruck 'Автомобиль' (class object) = name(dataTruck(object)) IN carConsignment;
    dataTrailer 'Прицеп' (object) = DATA STRING[50] (class) IN carConsignment;
    dataEmployee (object) = DATA Employee (class);
    nameDataEmployee 'Водитель' (class object) = name[Contact](dataEmployee(object)) IN carConsignment;
    waybill 'Путевой лист' (object) = DATA STRING[20] (class) IN carConsignment;

    dataAddressSupplierStock 'Пункт погрузки' (object) = DATA STRING[250] (class);
    dataAddressCustomerStock 'Пункт разгрузки' (object) = DATA STRING[250] (class);

    readdressing 'Переадресовка' (object) = DATA STRING[50] (class) IN carConsignment;

    overShipmentBase 'Основание отпуска' (object) = DATA STRING (class) IN issuanceConsignment;

    issuanceAllowed (object) = DATA Employee(class);

    issuanceExecuted (object) = DATA Employee(class);

    dataForwarder (object) = DATA Employee (class) IN issuanceConsignment;
    forwarder 'Товар к перевозке принял (экспедитор), должность, фамилия, инициалы' (class object)= name[Contact](dataForwarder(object));
    
    warrant 'По доверенности (номер, дата)' (object) = DATA STRING[50] (class) IN issuanceConsignment;
    warrantHolder 'По доверенности выданной (наименование орг-ии)' (object) = DATA STRING[200] (class) IN issuanceConsignment;

    goodsAccepted 'Принял грузополучатель' (object) = DATA STRING[150] (class) IN issuanceConsignment;    
    sealNumberSupplier (object) = DATA STRING[50] (class) IN issuanceConsignment;
    sealNumberCustomer (object) = DATA STRING[50] (class)IN issuanceConsignment;

    loadingExecuter (object) = DATA LegalEntity(class);
    wayOfLoading (object) = DATA WayOfLoading(class);

    unloadingExecuter (object) = DATA LegalEntity(class);
    wayOfUnloading (object) = DATA WayOfLoading(class);

    codeLoading 'Код ПРР' (object) = DATA BPSTRING[3] (class) IN loadingConsignment;

    arrivalTime 'Время прибытия' (object) = DATA DATETIME(class) IN carConsignment;
    downtime 'Время простоя' (object) = DATA INTEGER (class) IN carConsignment;
    raceQuantity 'Количество ездок' (object) = DATA INTEGER (class) IN carConsignment;
    raceQuantity(class o) <- 1 WHEN SET(o IS class);

    countPages 'Кол-во страниц в приложении' (object) = DATA INTEGER (class);
    
    additionalDocuments 'С товаром переданы документы' (object) = DATA STRING[250] (class);
END

META defineConsignmentAbstractHeader(object)
    @defineConsignmentAbstractHeaderInner(object, ###object);
END

META defineConsignmentAbstractHeaderInner(object, class)

    payer 'Заказчик перевозки (ИД)' (object) = ABSTRACT LegalEntity (class) IN carConsignment;

    dataTruck 'Автомобиль' (object) = ABSTRACT Truck (class);
    nameDataTruck 'Автомобиль' (class object) = name(dataTruck(object)) IN carConsignment;
    
    dataTrailer 'Прицеп' (object) = ABSTRACT STRING[100] (class) IN carConsignment;
    dataEmployee (object) = ABSTRACT Employee (class);
    nameDataEmployee 'Водитель' (class object) = name[Contact](dataEmployee(object)) IN carConsignment;
    waybill 'Путевой лист' (object) = ABSTRACT STRING[20] (class) IN carConsignment;

    dataAddressSupplierStock 'Пункт погрузки' (object) = ABSTRACT STRING[250] (class);
    dataAddressCustomerStock 'Пункт разгрузки' (object) = ABSTRACT STRING[250] (class);

    readdressing 'Переадресовка' (object) = ABSTRACT STRING[50] (class) IN carConsignment;

    overShipmentBase 'Основание отпуска' (object) = ABSTRACT STRING(class) IN issuanceConsignment;

    issuanceAllowed (object) = ABSTRACT Employee(class);

    issuanceExecuted (object) = ABSTRACT Employee(class);

    dataForwarder (object) = ABSTRACT Employee (class) IN issuanceConsignment;
    forwarder 'Товар к перевозке принял (экспедитор), должность, фамилия, инициалы' (class object)= name[Contact](dataForwarder(object));

    warrant 'По доверенности (номер, дата)' (object) = ABSTRACT STRING[50] (class) IN issuanceConsignment;
    warrantHolder 'По доверенности выданной (наименование орг-ии)' (object) = ABSTRACT STRING[200] (class) IN issuanceConsignment;

    goodsAccepted 'Принял грузополучатель' (object) = ABSTRACT STRING[150] (class) IN issuanceConsignment;
    sealNumberSupplier (object) = ABSTRACT STRING[50] (class) IN issuanceConsignment;
    sealNumberCustomer (object) = ABSTRACT STRING[50] (class)IN issuanceConsignment;

    loadingExecuter (object) = ABSTRACT LegalEntity(class);
    wayOfLoading (object) = ABSTRACT WayOfLoading(class);

    unloadingExecuter (object) = ABSTRACT LegalEntity(class);
    wayOfUnloading (object) = ABSTRACT WayOfLoading(class);

    codeLoading 'Код ПРР' (object) = ABSTRACT BPSTRING[3] (class) IN loadingConsignment;

    defaultArrivalTime = ABSTRACT DATETIME(class);
    arrivalTime 'Время прибытия' (object) = ABSTRACT DATETIME(class) IN carConsignment;

    defaultDowntime (object) = ABSTRACT INTEGER (class) IN carConsignment;
    downtime 'Время простоя' (object) = ABSTRACT INTEGER (class) IN carConsignment;
         
    raceQuantity 'Количество ездок' (object) = ABSTRACT INTEGER (class) IN carConsignment;

    countPages 'Кол-во листов в приложении' (object) = ABSTRACT INTEGER (class); 

    additionalDocuments 'С товаром переданы документы' (object) = ABSTRACT STRING[250] (class); 
END

META defineConsignmentInterfaceHeader(object, stockProp)
    @defineConsignmentAbstractHeader (object);
    @defineConsignmentHeader (user###object);
END

META defineConsignmentInterfaceHeader(object)
    @defineConsignmentInterfaceHeader(object, stock);
END

// ----------------- Implement заголовка накладной --------------- //

META implementConsignmentHeader (concrete)
    EXTEND CLASS concrete : Consignment;

    dataDate[Consignment] (concrete consignment) += date(consignment);
    number[Consignment] (concrete consignment) += number(consignment);
    series[Consignment] (concrete consignment) += series(consignment);

    dataPayer[Consignment] (concrete consignment) += payer (consignment);

    dataTruck[Consignment] (concrete consignment) += dataTruck (consignment);
    dataTrailer[Consignment] (concrete consignment) += dataTrailer (consignment);
    dataEmployee[Consignment] (concrete consignment) += dataEmployee (consignment);
    dataWaybill[Consignment] (concrete consignment) += waybill (consignment);

    dataAddressSupplierStock[Consignment] (concrete consignment) += dataAddressSupplierStock (consignment);
    dataAddressCustomerStock[Consignment] (concrete consignment) += dataAddressCustomerStock (consignment);

    readdressing[Consignment] (concrete consignment) += readdressing (consignment);
    
    countPages[Consignment] (concrete consignment) += countPages (consignment);

    additionalDocuments[Consignment] (concrete consignment) += additionalDocuments (consignment);
    
    contract[Consignment](concrete consignment) += contractSku (consignment);
    overShipmentBase[Consignment] (concrete consignment) += overShipmentBase (consignment);

    issuanceAllowed[Consignment] (concrete consignment) += issuanceAllowed (consignment);

    issuanceExecuted[Consignment] (concrete consignment) += issuanceExecuted (consignment);

    dataForwarder[Consignment] (concrete consignment) += dataForwarder (consignment);

    warrant[Consignment] (concrete consignment) += warrant (consignment);
    warrantHolder[Consignment] (concrete consignment) += warrantHolder (consignment);

    goodsAccepted[Consignment] (concrete consignment) += goodsAccepted (consignment);
    sealNumberSupplier [Consignment] (concrete consignment) += sealNumberSupplier(consignment);
    sealNumberCustomer [Consignment] (concrete consignment) += sealNumberCustomer(consignment);

    loadingExecuter[Consignment] (concrete consignment) += loadingExecuter (consignment);
    wayOfLoading[Consignment] (concrete consignment) += wayOfLoading (consignment);

    unloadingExecuter[Consignment] (concrete consignment) += unloadingExecuter (consignment);
    wayOfUnloading[Consignment] (concrete consignment) += wayOfUnloading (consignment);

    codeLoading[Consignment] (concrete consignment) += codeLoading (consignment);

    dataArrivalTime[Consignment] (concrete consignment) += OVERRIDE arrivalTime(consignment), defaultArrivalTime(consignment);
    dataDowntime[Consignment] (concrete consignment) += OVERRIDE downtime(consignment), defaultDowntime(consignment);   
     
    raceQuantity[Consignment] (concrete consignment) += raceQuantity (consignment);
END
                                                                
META implementConsignmentHeaderData (concrete) // без OVERRIDE для dataArrivalTimeConsignment, dataDowntimeConsignment
    EXTEND CLASS concrete : Consignment;

    dataDate[Consignment] (concrete consignment) += date(consignment);
    number[Consignment] (concrete consignment) += number(consignment);
    series[Consignment] (concrete consignment) += series(consignment);

    dataPayer[Consignment] (concrete consignment) += payer (consignment);

    dataTruck[Consignment] (concrete consignment) += dataTruck (consignment);
    dataTrailer[Consignment] (concrete consignment) += dataTrailer (consignment);
    dataEmployee[Consignment] (concrete consignment) += dataEmployee (consignment);
    dataWaybill[Consignment] (concrete consignment) += waybill (consignment);

    dataAddressSupplierStock[Consignment] (concrete consignment) += dataAddressSupplierStock (consignment);
    dataAddressCustomerStock[Consignment] (concrete consignment) += dataAddressCustomerStock (consignment);

    readdressing[Consignment] (concrete consignment) += readdressing (consignment);
    
    countPages[Consignment] (concrete consignment) += countPages (consignment);

    additionalDocuments[Consignment] (concrete consignment) += additionalDocuments (consignment);

    over##concrete##Base[Consignment] (concrete consignment) += over##concrete##Base (consignment);

    issuanceAllowed[Consignment] (concrete consignment) += issuanceAllowed (consignment);

    issuanceExecuted[Consignment] (concrete consignment) += issuanceExecuted (consignment);

    dataForwarder[Consignment] (concrete consignment) += dataForwarder (consignment);

    warrant[Consignment] (concrete consignment) += warrant (consignment);
    warrantHolder[Consignment] (concrete consignment) += warrantHolder (consignment);

    goodsAccepted[Consignment] (concrete consignment) += goodsAccepted (consignment);
    sealNumberSupplier [Consignment] (concrete consignment) += sealNumberSupplier(consignment);
    sealNumberCustomer [Consignment] (concrete consignment) += sealNumberCustomer(consignment);

    loadingExecuter[Consignment] (concrete consignment) += loadingExecuter (consignment);
    wayOfLoading[Consignment] (concrete consignment) += wayOfLoading (consignment);

    unloadingExecuter[Consignment] (concrete consignment) += unloadingExecuter (consignment);
    wayOfUnloading[Consignment] (concrete consignment) += wayOfUnloading (consignment);

    codeLoading[Consignment] (concrete consignment) += codeLoading (consignment);

    dataArrivalTime[Consignment] (concrete consignment) += arrivalTime(consignment);
    dataDowntime[Consignment] (concrete consignment) += downtime(consignment);   
     
    raceQuantity[Consignment] (concrete consignment) += raceQuantity (consignment);
END

META implementConsignmentDocumentHeader (concrete, object, prefix)

    payer (###object concrete) += payer (concrete);
                                                                                  
    dataTruck (###object concrete) += dataTruck (concrete);
    dataTrailer (###object concrete) += dataTrailer (concrete);
    dataEmployee (###object concrete) += dataEmployee (concrete);
    waybill (###object concrete) += waybill (concrete);

    dataAddressSupplierStock (###object concrete) += dataAddressSupplierStock (concrete);
    dataAddressCustomerStock (###object concrete) += dataAddressCustomerStock (concrete);

    readdressing (###object concrete) += readdressing (concrete);

    countPages (###object concrete) += countPages (concrete);

    additionalDocuments (###object concrete) += additionalDocuments (concrete);

    overShipmentBase (###object concrete) += overShipmentBase (concrete);

    issuanceAllowed (###object concrete) += issuanceAllowed (concrete);

    issuanceExecuted (###object concrete) += issuanceExecuted (concrete);

    dataForwarder (###object concrete) += dataForwarder (concrete);

    warrant (###object concrete) += warrant (concrete);
    warrantHolder (###object concrete) += warrantHolder (concrete);

    goodsAccepted (###object concrete) += goodsAccepted (concrete);
    sealNumberSupplier (###object concrete) += sealNumberSupplier(concrete);
    sealNumberCustomer (###object concrete) += sealNumberCustomer(concrete);

    loadingExecuter (###object concrete) += loadingExecuter (concrete);
    wayOfLoading (###object concrete) += wayOfLoading (concrete);

    unloadingExecuter (###object concrete) += unloadingExecuter (concrete);
    wayOfUnloading (###object concrete) += wayOfUnloading (concrete);

    codeLoading (###object concrete) += codeLoading (concrete);

    arrivalTime (###object concrete) += arrivalTime (concrete);
    downtime (###object concrete) += downtime (concrete);
        
    raceQuantity (###object concrete) += raceQuantity (concrete);

END

META implementConsignmentInterfaceHeader(object)
    @implementConsignmentDocumentHeader(object, user###object, );
    @implementConsignmentHeader (object);
END
//--

META implementConsignmentDocumentHeaderPrefix (concrete, object, NS)

    payer[NS.NS] (NS concrete) += payer (concrete);

    dataTruck[NS.NS] (NS concrete) += dataTruck (concrete);
    dataTrailer[NS.NS] (NS concrete) += dataTrailer (concrete);
    dataEmployee[NS.NS] (NS concrete) += dataEmployee (concrete);
    waybill[NS.NS] (NS concrete) += waybill (concrete);

    dataAddressSupplierStock[NS.NS] (NS concrete) += dataAddressSupplierStock (concrete);
    dataAddressCustomerStock[NS.NS] (NS concrete) += dataAddressCustomerStock (concrete);

    readdressing[NS.NS] (NS concrete) += readdressing (concrete);

    overShipmentBase[NS.NS] (NS concrete) += overShipmentBase (concrete);

    issuanceAllowed[NS.NS] (NS concrete) += issuanceAllowed (concrete);

    issuanceExecuted[NS.NS] (NS concrete) += issuanceExecuted (concrete);

    dataForwarder[NS.NS] (NS concrete) += dataForwarder (concrete);

    warrant[NS.NS] (NS concrete) += warrant (concrete);
    warrantHolder[NS.NS] (NS concrete) += warrantHolder (concrete);

    goodsAccepted[NS.NS] (NS concrete) += goodsAccepted (concrete);
    sealNumberSupplier [NS.NS] (NS concrete) += sealNumberSupplier(concrete);
    sealNumberCustomer [NS.NS] (NS concrete) += sealNumberCustomer(concrete);

    loadingExecuter[NS.NS] (NS concrete) += loadingExecuter (concrete);
    wayOfLoading[NS.NS] (NS concrete) += wayOfLoading (concrete);

    unloadingExecuter[NS.NS] (NS concrete) += unloadingExecuter (concrete);
    wayOfUnloading[NS.NS] (NS concrete) += wayOfUnloading (concrete);

    codeLoading[NS.NS] (NS concrete) += codeLoading (concrete);
    
    defaultArrivalTime[NS.NS] (NS concrete) += defaultArrivalTime (concrete);        
    arrivalTime[NS.NS] (NS concrete) += arrivalTime (concrete);
    
    defaultDowntime[NS.NS] (NS concrete) += defaultDowntime (concrete);          
    downtime[NS.NS] (NS concrete) += downtime (concrete);

    raceQuantity[NS.NS] (NS concrete) += raceQuantity (concrete);

    countPages[NS.NS] (NS concrete) += countPages (concrete);

    additionalDocuments[NS.NS] (NS concrete) += additionalDocuments (concrete);
END

// -------------------------- Implement строк накладной -------------------- //

META implementConsignmentDetail (concrete, skuProp, batchProp)
    @implementConsignmentDetailInner (concrete, ###concrete, skuProp, batchProp);
END

META implementConsignmentDetailInner (concrete, concreteClass, skuProp, batchProp)
    EXTEND CLASS concreteClass##Detail : ConsignmentDetail;
    
    index[ConsignmentDetail] (###concrete##Detail d) += index (d);
    consignment (###concrete##Detail d) += concrete (d);
    skip (###concrete##Detail d) += skipConsignment (d);
    skuProp[ConsignmentDetail] (###concrete##Detail d) += skuProp (d);
    batchProp[ConsignmentDetail] (###concrete##Detail d) += batchProp (d);    
    quantity[ConsignmentDetail] (###concrete##Detail d) += quantity (d);

    dataPackQuantity (###concrete##Detail d) += packQuantity (d);
    dataGrossWeight (###concrete##Detail d) += sumGrossWeight (d);
END
META implementConsignmentDetail (concrete)
    @implementConsignmentDetail (concrete, sku, batch);
END

// -------------------------- Implement всей накладной -------------------- //

META implementConsignment(concrete, skuProp)
    @implementConsignmentHeader(concrete);
    @implementConsignmentDetail(concrete, skuProp, batchProp);
END

// ------------------------------------- Отпуск товара --------------------------------- //

truck= DATA Truck (LegalEntity);
nameTruck 'Автомобиль' (LegalEntity l) =name(truck(l)); 

driver= DATA Employee (LegalEntity);
nameDriver 'Водитель' (LegalEntity l) =shortName(driver(l)); 

EXTEND FORM legalEntity 
    PROPERTIES(l) nameTruck, nameDriver
;
DESIGN legalEntity {
    consignment {
        MOVE PROPERTY (nameTruck(l));
        MOVE PROPERTY (nameDriver(l)); 
    }
}

UNPLegalEntity 'УНП получателя' = DATA STRING[50] (Stock) IN invoiceConsignment CHARWIDTH 20; 
overUNPSupplier(Consignment consignment) += UNPLegalEntity(supplierStock(consignment));
overUNPCustomer(Consignment consignment) += UNPLegalEntity(customerStock(consignment));

issuanceAllowed = DATA Employee (Stock);
nameIssuanceAllowed 'Отпуск разрешил' (Stock stock) = name[Contact](issuanceAllowed(stock)) IN invoiceConsignment CHARWIDTH 20;

issuanceExecuted  = DATA Employee(Stock);
nameIssuanceExecuted 'Отпуск произвел' (Stock stock) = name[Contact](issuanceExecuted(stock)) IN invoiceConsignment CHARWIDTH 20;

loadingExecuter = DATA LegalEntity(Stock);
nameLoadingExecuter 'Исполнитель погрузки' (Stock stock) = name(loadingExecuter(stock)) IN invoiceConsignment CHARWIDTH 20;

wayOfLoading = DATA WayOfLoading(Stock);
nameWayOfLoading 'Способ погрузки' (Stock stock) = name(wayOfLoading(stock)) IN invoiceConsignment CHARWIDTH 20;

unloadingExecuter = DATA LegalEntity(Stock);
nameUnloadingExecuter 'Исполнитель разгрузки' (Stock stock) = name(unloadingExecuter(stock)) IN invoiceConsignment CHARWIDTH 20;

wayOfUnloading = DATA WayOfLoading(Stock);
nameWayOfUnloading 'Способ разгрузки' (Stock stock) = name(wayOfUnloading(stock)) IN invoiceConsignment CHARWIDTH 20;

codeLoading 'Код ПРР' = DATA BPSTRING[3] (Stock)IN invoiceConsignment;

META deriveConsignmentProperty(objectClass, property, stockProp)
    property (###objectClass o) <- property(stockProp(o))
        WHEN CHANGED(stockProp(o));
END
META deriveConsignmentPropertyALL(stockProp)
    @deriveConsignmentProperty(userInvoice, issuanceAllowed, stockProp);
    @deriveConsignmentProperty(userInvoice, issuanceExecuted, stockProp);
    @deriveConsignmentProperty(userInvoice, loadingExecuter, stockProp);
    @deriveConsignmentProperty(userInvoice, unloadingExecuter, stockProp);
    @deriveConsignmentProperty(userInvoice, wayOfLoading, stockProp);
    @deriveConsignmentProperty(userInvoice, wayOfUnloading, stockProp);
    @deriveConsignmentProperty(userInvoice, codeLoading, stockProp);          
END

META deriveConsignmentPropertyALL(object, stockProp)
    @deriveConsignmentProperty(object, issuanceAllowed, stockProp);
    @deriveConsignmentProperty(object, issuanceExecuted, stockProp);
    @deriveConsignmentProperty(object, loadingExecuter, stockProp);
    @deriveConsignmentProperty(object, unloadingExecuter, stockProp);
    @deriveConsignmentProperty(object, wayOfLoading, stockProp);
    @deriveConsignmentProperty(object, wayOfUnloading, stockProp);
    @deriveConsignmentProperty(object, codeLoading, stockProp);          
END

innnerDescription  = DATA LOCAL STRING[250] (Consignment);

EXTEND FORM consignmentSimpleVertical
    PROPERTIES (c) innnerDescription
;
EXTEND FORM consignmentSimpleHorizontal
    PROPERTIES (c) innnerDescription
;
EXTEND FORM consignmentSimpleAttach
    PROPERTIES (c) innnerDescription
;
