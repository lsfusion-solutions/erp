MODULE ItemPharmGroupBy;

REQUIRE Item, Pharm;

NAMESPACE Item;

CLASS PharmacyPriceGroup 'Ценовая группа': Group;
TABLE pharmacyPriceGroup(PharmacyPriceGroup);

name 'Наименование' = DATA ISTRING[50](PharmacyPriceGroup);
@defineExternalizable(pharmacyPriceGroup, STRING[100]);
name(PharmacyPriceGroup group) += name(group);

inactive 'Неактивный' = DATA BOOLEAN (PharmacyPriceGroup) IN itemBase;
active 'Активный' (PharmacyPriceGroup group) = group IS PharmacyPriceGroup AND NOT inactive(group);

sumMarkups 'Суммировать надбавки' = DATA BOOLEAN (PharmacyPriceGroup) IN itemBase;

maxTotalLimitMarkup 'Максимальная общая надбавка' =  DATA NUMERIC[8,3] (PharmacyPriceGroup) IN itemBase;

CLASS PharmacyGroupType 'Классификатор ценовых групп': GroupType;
TABLE pharmacyGroupType (PharmacyGroupType);

name 'Наименование' = DATA ISTRING[100](PharmacyGroupType) IN id CHARWIDTH 25;
name(PharmacyGroupType group)+=name(group);

pharmacyTypeGroup = DATA PharmacyGroupType(PharmacyPriceGroup);
namePharmacyTypeGroup 'Наименование классификатора' = name(pharmacyTypeGroup(PharmacyPriceGroup group));

groupType(PharmacyPriceGroup group) += pharmacyTypeGroup(group);

pharmacyPriceGroup = ABSTRACT PharmacyPriceGroup (Sku) MATERIALIZED;
namePharmacyPriceGroup 'Ценовая группа' (Sku sku) = name(pharmacyPriceGroup(sku));

calcMaxTotalLimitMarkup(Sku s, NUMERIC[8,4] baseMarkup) = trunc(((100.0 + maxTotalLimitMarkup(pharmacyPriceGroup(s)))
    /(100.0 + baseMarkup)-1)*100, 2);

group(PharmacyGroupType type, Sku sku) += WHEN type IS PharmacyGroupType AND sku IS Sku THEN pharmacyPriceGroup(sku);

@defineObjectItemAttribute(pharmacyPriceGroup, PharmacyPriceGroup, name, 'Ценовая группа', itemPharmacy);

EXTEND FORM item 
    PROPERTIES (i) namePharmacyPriceGroup SHOWIF showPharmacyPriceGroup(i)
;

EXTEND FORM items 
    PROPERTIES (i) namePharmacyPriceGroup SHOWIF showPharmacyPriceGroup(i) READONLYIF isReadonly()
;

// Продублировал дизайн из ItemPharm, т.к. у некоторых ERP клиентов не подключен ItemPharm
// При изменении необходимо менять в обоих модулях
@defineItemPharmDesign();

@defineObjectItemAttributeBatch (pharmacyPriceGroup, namePharmacyPriceGroup, 'Ценовая группа', sku);
pharmacyPriceGroup(Item sku) += pharmacyPriceGroup(sku);

CLASS PharmacyPriceInterval 'Интервал цен';
TABLE pharmacyPriceInterval(PharmacyPriceInterval);

pharmacyGroupPharmacy= DATA PharmacyPriceGroup (PharmacyPriceInterval) NONULL DELETE;
namePharmacyGroupPharmacy 'Ценовая группа' (PharmacyPriceInterval interval) = name(pharmacyGroupPharmacy(interval));

pharmacyTypeExchange = DATA TypeExchange ();
namePharmacyTypeExchange 'Тип обмена для ценовых групп' ()= name(pharmacyTypeExchange());

EXTEND FORM options
    PROPERTIES() namePharmacyTypeExchange
;
DESIGN options {
    pharmacy {
        MOVE PROPERTY(namePharmacyTypeExchange());
    }
}

pricePharmacy 'Цена от (Базовая величина)' = DATA NUMERIC[16,4] (PharmacyPriceInterval) NONULL DELETE;

fromDatePharmacy 'Дата действия с' = DATA DATE (PharmacyPriceInterval) NONULL DELETE;
toDatePharmacy 'Дата действия по' = DATA DATE (PharmacyPriceInterval);

TABLE pharmacyPriceGroupPharmacyPriceInterval(PharmacyPriceGroup, PharmacyPriceInterval);

wholesaleMarkup '% оптовой надбавки' = DATA NUMERIC[8,3] (PharmacyPriceInterval);
retailMarkup '% розничной надбавки' = DATA NUMERIC[8,3] (PharmacyPriceInterval);
pharmacyExchange (price, DATE date) = price / rateOn(pharmacyTypeExchange(), currencyShortName('БВ'), date);

wholesaleLimitMarkupPharmacy 'Предельный % оптовой надбавки' (priceGroup, NUMERIC[16,4] price, DATE date) =
    GROUP LAST wholesaleMarkup(PharmacyPriceInterval interval)
          ORDER pricePharmacy(interval), interval
          WHERE pharmacyExchange(price AS NUMERIC[16,4], date) > pricePharmacy(interval) AND
                date >= fromDatePharmacy(interval) AND NOT date > toDatePharmacy(interval)
          BY pharmacyGroupPharmacy(interval) COMPLEX;
prevWholesaleLimitMarkupPharmacy 'Предельный % оптовой надбавки (пред.)' (PharmacyPriceGroup priceGroup, NUMERIC[16,4] price, DATE date) = PREV(wholesaleLimitMarkupPharmacy(priceGroup, price, date)) COMPLEX;

retailLimitMarkupPharmacy 'Предельный % розничной надбавки' (priceGroup, NUMERIC[16,4] price, DATE date) =
    GROUP LAST retailMarkup(PharmacyPriceInterval interval)
          ORDER pricePharmacy(interval), interval
          WHERE pharmacyExchange(price AS NUMERIC[16,4], date) > pricePharmacy(interval) AND
                date >= fromDatePharmacy(interval) AND NOT date > toDatePharmacy(interval)
          BY pharmacyGroupPharmacy(interval) COMPLEX;
prevRetailLimitMarkupPharmacy 'Предельный % розничной надбавки (пред.)' (PharmacyPriceGroup priceGroup, NUMERIC[16,4] price, DATE date) = PREV(retailLimitMarkupPharmacy(priceGroup, price, date)) COMPLEX;

wholesaleLimitMarkupPharmacy 'Предельный % оптовой надбавки' (Sku sku, NUMERIC[16,4] price, DATE date) =  wholesaleLimitMarkupPharmacy(pharmacyPriceGroup(sku), price, date) COMPLEX;
prevWholesaleLimitMarkupPharmacy 'Предельный % оптовой надбавки (пред.)' (Sku sku, NUMERIC[16,4] price, DATE date) =  prevWholesaleLimitMarkupPharmacy(pharmacyPriceGroup(sku), price, date);
wholesaleLimitMarkupPharmacy 'Предельный % оптовой надбавки' (Batch batch, NUMERIC[16,4] price, DATE date) =  wholesaleLimitMarkupPharmacy(sku(batch), price, date);

retailLimitMarkupPharmacy 'Предельный % розничной надбавки' (Sku sku, NUMERIC[16,4] price, DATE date) =  retailLimitMarkupPharmacy(pharmacyPriceGroup(sku), price, date);
prevRetailLimitMarkupPharmacy 'ППредельный % розничной надбавки (пред.)' (Sku sku, NUMERIC[16,4] price, DATE date) =  prevRetailLimitMarkupPharmacy(pharmacyPriceGroup(sku), price, date);
retailLimitMarkupPharmacy 'Предельный % розничной надбавки' (Batch batch, NUMERIC[16,4] price, DATE date) =  retailLimitMarkupPharmacy(sku(batch), price, date);

isActive 'Действующий' (PharmacyPriceInterval interval) = 
    (toDatePharmacy(interval) >= currentDate() OR NOT toDatePharmacy(interval)) AND fromDatePharmacy(interval) <= currentDate();

is366 '366-й указ' = DATA BOOLEAN (PharmacyPriceGroup);
is366PharmacyPriceGroup (Sku s) = is366(pharmacyPriceGroup(s));
isNot366PharmacyPriceGroup (Sku s) = id(pharmacyPriceGroup(s)) AND NOT is366(pharmacyPriceGroup(s));

FORM pharmacyMarkups 'Ценовые группы'

    OBJECTS g=PharmacyPriceGroup
    PROPERTIES (g) name, id SHOWIF showIDs(), sumMarkups, maxTotalLimitMarkup, namePharmacyTypeGroup, inactive, is366
    PROPERTIES (g) NEW, DELETE GRID
    ORDERS id(g)
    FILTERGROUP active
        FILTER 'Активные' active(g) DEFAULT

    OBJECTS i=PharmacyPriceInterval
    PROPERTIES fromDatePharmacy(i), toDatePharmacy(i), pricePharmacy(i),
               wholesaleMarkup(i), retailMarkup(i)
    PROPERTIES(i) NEW, DELETE GRID
    FILTERS    pharmacyGroupPharmacy(i)==g
    FILTERGROUP isActive
        FILTER 'Действующие' isActive(i) DEFAULT
    ORDERS pricePharmacy(i)

    OBJECTS nu=NUMERIC[14,3] PANEL
    PROPERTIES val = VALUE(nu)

    OBJECTS t=DATE PANEL
    PROPERTIES value = VALUE(t)
    PROPERTIES(g, nu, t) READONLY wholesaleLimitMarkupPharmacy, retailLimitMarkupPharmacy

;

DESIGN pharmacyMarkups {
    BOX {
        MOVE BOX(g);
        MOVE BOX(i);
        NEW test {
            caption = 'Тестовая форма';
            horizontal = TRUE;
            MOVE PROPERTY (value) {
                caption = 'Выберите дату';
                panelCaptionVertical = TRUE;
                font = 'bold 24';
            }
            MOVE PROPERTY (val) {
                caption = 'Введите цену в рублях';
                panelCaptionVertical = TRUE;
                font = 'bold 24';
            }

            MOVE PROPERTY (wholesaleLimitMarkupPharmacy(g, nu, t)) {
                caption = 'Результат (оптовая надбавка)';
                panelCaptionVertical = TRUE;
                font = 'bold 24';
            }
            MOVE PROPERTY (retailLimitMarkupPharmacy(g, nu, t)) {
                caption = 'Результат (розничная надбавка)';
                panelCaptionVertical = TRUE;
                font = 'bold 24';
            }
        }
        MOVE TOOLBARBOX;
    }
}

NAVIGATOR {
    priceListMasterData {
        NEW pharmacyMarkups;
    }
}

FORM pharmacyPriceGroups 'Ценовые группы'
    OBJECTS g=PharmacyPriceGroup
    PROPERTIES (g) READONLY name, id SHOWIF showIDs(), sumMarkups, maxTotalLimitMarkup, inactive
    ORDERS id(g)
    FILTERGROUP active
        FILTER 'Активные' active(g) DEFAULT

    OBJECTS i=PharmacyPriceInterval
    PROPERTIES READONLY fromDatePharmacy(i), toDatePharmacy(i), pricePharmacy(i),
               wholesaleMarkup(i), retailMarkup(i)
    FILTERS    pharmacyGroupPharmacy(i)==g
    ORDERS pricePharmacy(i)
    FILTERGROUP isActive
        FILTER 'Действующие' isActive(i) DEFAULT

    LIST PharmacyPriceGroup OBJECT g
;

DESIGN pharmacyPriceGroups {
    BOX {
        size = (1024, 768);
    }
}

@defineUniteAttributeItemWithoutExtendForm(pharmacyPriceGroup, namePharmacyPriceGroup, 'ценовая группа', 'ценовые группы', item);

EXTEND FORM attributesItem
    OBJECTS pharmacyPriceGroup=PharmacyPriceGroup
    PROPERTIES in(pharmacyPriceGroup)       
    PROPERTIES (pharmacyPriceGroup) name, id SHOWIF showIDs(), sumMarkups, maxTotalLimitMarkup, namePharmacyTypeGroup, inactive
    PROPERTIES(pharmacyPriceGroup) NEW, DELETE         
    PROPERTIES replace(pharmacyPriceGroup) TOOLBAR        
    ORDERS id(pharmacyPriceGroup)
    FILTERGROUP active
        FILTER 'Активные' active(pharmacyPriceGroup) DEFAULT    

    OBJECTS pharmacyPriceInterval=PharmacyPriceInterval
    PROPERTIES (pharmacyPriceInterval) fromDatePharmacy, toDatePharmacy, pricePharmacy,
                                       wholesaleMarkup, retailMarkup
    PROPERTIES (pharmacyPriceInterval) NEW, DELETE GRID
    FILTERS    pharmacyGroupPharmacy(pharmacyPriceInterval)==pharmacyPriceGroup
    ORDERS pricePharmacy(pharmacyPriceInterval)
    FILTERGROUP isActive
        FILTER 'Действующие' isActive(pharmacyPriceInterval) DEFAULT    

    OBJECTS numeric=NUMERIC[14,3] PANEL
    PROPERTIES val = VALUE(numeric)

    OBJECTS date=DATE PANEL
    PROPERTIES value = VALUE(date)
    PROPERTIES(pharmacyPriceGroup, numeric, date) READONLY wholesaleLimitMarkupPharmacy,retailLimitMarkupPharmacy
;

DESIGN attributesItem{
    tabContainer{
        NEW pharmacyPriceGroupContainer{
            caption = 'ценовые группы';
            MOVE BOX(pharmacyPriceGroup);
            MOVE BOX(pharmacyPriceInterval);
            NEW test {
                caption = 'Тестовая форма';
                horizontal = TRUE;
                MOVE PROPERTY (value) {
                    caption = 'Выберите дату';
                    panelCaptionVertical = TRUE;
                    font = 'bold 24';
                }
                MOVE PROPERTY (val) {
                    caption = 'Введите цену в рублях';
                    panelCaptionVertical = TRUE;
                    font = 'bold 24';
                }
    
                MOVE PROPERTY (wholesaleLimitMarkupPharmacy(pharmacyPriceGroup, numeric, date)) {
                    caption = 'Результат (оптовая надбавка)';
                    panelCaptionVertical = TRUE;
                    font = 'bold 24';
                }
                MOVE PROPERTY (retailLimitMarkupPharmacy(pharmacyPriceGroup, numeric, date)) {
                    caption = 'Результат (розничная надбавка)';
                    panelCaptionVertical = TRUE;
                    font = 'bold 24';
                }
            }
        }
    }
}

// ----------------------------------- Стандартные данные ----------------------------------- //

loadDefaultPharmacyPriceGroup 'Добавить ценовые группы'(ISTRING[50] iname, STRING[100] isid)  { 
    NEW g = PharmacyPriceGroup {
         name(g) <- iname;
         id(g) <- isid;
    }
}

loadDefaultPharmacyPriceInterval 'Добавить интервал цен ценовых групп (by)'(STRING[100] sidGroup, NUMERIC[16,4] priceFrom, NUMERIC[8,3] wMarkup, NUMERIC[8,3] rMarkup)  { 
    NEW i = PharmacyPriceInterval {
         pharmacyGroupPharmacy(i) <- pharmacyPriceGroup(sidGroup);
         pricePharmacy(i) <- priceFrom;
         fromDatePharmacy(i) <- 2016_07_01;
         wholesaleMarkup(i) <- wMarkup;
         retailMarkup(i) <- rMarkup;
    }
}


loadDefaultPharmacyPriceGroups 'Загрузить стандартные ценовые группы(указ 366) и надбавки для них' ()  { 
    loadDefaultPharmacyPriceGroup('Лекарственные средства', 'Лекарственные средства');
        is366(pharmacyPriceGroup('Лекарственные средства')) <- TRUE;
        loadDefaultPharmacyPriceInterval('Лекарственные средства', 0.00, 9.00, 30.00);
        loadDefaultPharmacyPriceInterval('Лекарственные средства', 0.50, 8.00, 25.00);
        loadDefaultPharmacyPriceInterval('Лекарственные средства', 1.00, 7.00, 14.00);
        loadDefaultPharmacyPriceInterval('Лекарственные средства', 1.50, 7.00, 12.00);
        loadDefaultPharmacyPriceInterval('Лекарственные средства', 3.00, 6.00, 10.00);
        loadDefaultPharmacyPriceInterval('Лекарственные средства', 5.00, 4.00, 5.00);
        loadDefaultPharmacyPriceInterval('Лекарственные средства', 10.00, 2.00, 1.00);

    loadDefaultPharmacyPriceGroup('Изделия медицинского назначения', 'Изделия медицинского назначения');
        is366(pharmacyPriceGroup('Изделия медицинского назначения')) <- TRUE;
        loadDefaultPharmacyPriceInterval('Изделия медицинского назначения', 0.00, 11.00, 30.00);
        loadDefaultPharmacyPriceInterval('Изделия медицинского назначения', 0.50, 8.00, 25.00);
        loadDefaultPharmacyPriceInterval('Изделия медицинского назначения', 1.00, 8.00, 21.00);
        loadDefaultPharmacyPriceInterval('Изделия медицинского назначения', 1.50, 8.00, 17.00);
        loadDefaultPharmacyPriceInterval('Изделия медицинского назначения', 5.00, 4.00, 6.00);

    loadDefaultPharmacyPriceGroup('Медицинская техника', 'Медицинская техника');
        is366(pharmacyPriceGroup('Медицинская техника')) <- TRUE;
        loadDefaultPharmacyPriceInterval('Медицинская техника', 0.00, 20.00, 20.00);
        loadDefaultPharmacyPriceInterval('Медицинская техника', 1000.00, 10.00, 0.00);
        loadDefaultPharmacyPriceInterval('Медицинская техника', 5000.00, 8.00, 0.00);
        loadDefaultPharmacyPriceInterval('Медицинская техника', 50000.00, 5.00, 0.00);
        loadDefaultPharmacyPriceInterval('Медицинская техника', 100000.00, 3.00, 0.00);

    loadDefaultPharmacyPriceGroup('Прочее', 'Прочее');        

}IN loadDefault;

@implementLoadDefaultData(loadDefaultPharmacyPriceGroups);

migratePharmRateExchange = DATA BOOLEAN ();
onStarted() +{
    IF NOT migratePharmRateExchange() THEN {
        IF NOT currencyShortName('БВ') THEN NEW c = Currency {
            shortName(c) <- 'БВ';
            name(c) <- 'Базовая величина';
        }
        FOR TypeExchange t==pharmacyTypeExchange() DO {
            name(t) <- 'Базовая величина';
            currency(t) <- currencyShortName('BYN');
        }
        FOR rate(pharmacyTypeExchange(), currencyShortName('USD'), DATE date) DO {
            rate(pharmacyTypeExchange(), currencyShortName('БВ'), date) <- rate(pharmacyTypeExchange(), currencyShortName('USD'), date);
            rate(pharmacyTypeExchange(), currencyShortName('USD'), date) <- NULL WHERE rate(pharmacyTypeExchange(), currencyShortName('USD'), date);
        }
        migratePharmRateExchange() <- TRUE; 
    }
}

//Делаем через общий метакод, что бы методики рассчёта надбавок была схожей в опте и рознице
//Менять сразу во всех метакодах
//Полагаем, что в фарме будут включать глобальный skipCalcPricingManufacturingPrice(), т.к. в этом нет смысла

META defineNotUseManufacturingPrice (class, basePrice)
    //оставляем возможность задать свои условия не использования цены изготовителя как базы для рассчёта надбавки
    extraNotUseManufacturingPrice = ABSTRACT BOOLEAN (###class);
    notUseManufacturingPrice(###class o) =
    //поставщик предоставил скидку на товар с предельной надбавкой по 713, поэтому берем цену поставки, а не изготовителя
        (maxTotalLimitMarkup(pharmacyPriceGroup(sku(o))) AND basePrice(o)<manufacturingPrice(o)) OR extraNotUseManufacturingPrice(o);
END

META defineBasePriceMarkupPharmacy(class)
    basePrice(###class o) = prevCost(batch(o));
    @defineNotUseManufacturingPrice(class, basePrice);
    //алгоритм рассчёта должен быть максимально приближен к pricingPrice из расценки
    basePriceMarkupPharmacy 'База наценки' (###class o) = OVERRIDE manufacturingPrice(o) IF NOT notUseManufacturingPrice(o), basePrice(o);
END

META defineBaseVATPriceMarkupPharmacy(class)
    @defineBasePriceMarkupPharmacy(class);
    baseMVATPrice(###class o) = basePriceMarkupPharmacy(o);
    basePVATPrice(###class o) = NUMERIC[16,4](basePriceMarkupPharmacy(o) * (100.0 + calcValueVAT(o)) / 100.0);
END

META defineNotUseManufacturingPrice (class, stock, basePrice)
    //пока что полагаем, что РОЦ поставщика меняется только через возврат, поэтому берем себестоимость
    notUseManufacturingPrice(###class o, ###stock st) = maxTotalLimitMarkup(pharmacyPriceGroup(sku(o))) AND basePrice(o)<currentManufacturingPrice(o, st);
END

META defineBasePriceMarkupPharmacy(class, stock)
    basePrice(###class o) = cost(o);
    @defineNotUseManufacturingPrice(class, stock, basePrice);
    //алгоритм рассчёта должен быть максимально приближен к pricingPrice из расценки    
    basePriceMarkupPharmacy 'База наценки' (###class o, ###stock st) = 
        OVERRIDE currentManufacturingPrice(o, st) IF isCompany(st) AND NOT notUseManufacturingPrice(o, st), basePrice(o) IF isCompany(st);
END

META defineWholesaleMarkupPharm(class)
    wholesaleMarkupPharm 'Оптовая надбавка(общая), %' (###class o) =
        NUMERIC[17,5](round2([((X*100.0)/Y-100.0)](price(o), baseMVATPrice(o) IF baseMVATPrice(o) != 0.0)));
    wholesaleMarkupPharm 'Оптовая надбавка(общая), %' (User###class o) =
        NUMERIC[17,5](round2([((X*100.0)/Y-100.0)](price(o), baseMVATPrice(o) IF baseMVATPrice(o) != 0.0)));

    //если Цена опт. надб. опускается ниже себестоимости или мы сами импортёры, то надбавка поставщика(стороннего) равна 0%
    supplierMarkupPharmacy 'Надбавка поставщика(стороннего), %' (###class o) =
        IF (round2(min(((prevCost(batch(o))/baseMVATPrice(o))-1)*100,99999) < 0.0) OR import(batch(o)))
        THEN 0.0 ELSE round2(min(((prevCost(batch(o))/baseMVATPrice(o))-1)*100,99999));
    wholesaleMarkupPharmacy 'Оптовая надбавка(собственная), %' (###class o) =
        NUMERIC[8,3](round2(min(round2(((price(o)/baseMVATPrice(o))-1)*100)(-)supplierMarkupPharmacy(o),99999)));    
    supplierMarkupPharmacy 'Надбавка поставщика(стороннего), %' (User###class o) =
        IF (round2(min(((prevCost(batch(o))/baseMVATPrice(o))-1)*100,99999) < 0.0) OR import(batch(o)))
        THEN 0.0 ELSE round2(min(((prevCost(batch(o))/baseMVATPrice(o))-1)*100,99999));
    wholesaleMarkupPharmacy 'Оптовая надбавка(собственная), %' (User###class o) =
        NUMERIC[8,3](round2(min(round2(((price(o)/baseMVATPrice(o))-1)*100)(-)supplierMarkupPharmacy(o),99999)));

    changeWholesaleMarkupPharmacy ABSTRACT LIST (User###class);
    changeWholesaleMarkupPharmacy(User###class o) + {
        INPUT n = NUMERIC[16,4] DO {
            //действие запускается для собственной надбавки, поэтому полагаем, что при включении данного мехнизма ВСЕГДА надо добавлять надбавку поставщика
            price(o) <- trunc(baseMVATPrice(o) * (100 + (n (+) supplierMarkupPharmacy(o))) / 100, 2);
            invoicePrice(o) <- trunc(basePVATPrice(o) * (100 + n) / 100, 2);
        }
    }
END

META implementWholesaleMarkupPharm(class)
    wholesaleMarkupPharm(###class o) += wholesaleMarkupPharm(o);
END    

META defineLimitMarkupPharm(class)
    wholesaleLimitMarkupPharmacy 'Предельный % оптовой надбавки' (###class o) = wholesaleLimitMarkupPharmacy(sku(o), manufacturingPrice(o), date(o));
    prevWholesaleLimitMarkupPharmacy 'Предельный % оптовой надбавки' (###class o) = prevWholesaleLimitMarkupPharmacy(sku(o), manufacturingPrice(o), date(o));

    calcMaxTotalLimitMarkup 'Максимальная общая надбавка, %' (###class o) = NUMERIC[8,4](calcMaxTotalLimitMarkup(sku(o), OVERRIDE importerMarkup(o), 0.0));
    wholesaleLimitPharmacyMarkup (###class o) = MIN prevWholesaleLimitMarkupPharmacy(o), calcMaxTotalLimitMarkup(o);//минимальная между предельной оптовой и общей

    wholesaleLimitMarkupPharmacy 'Предельный % оптовой надбавки' (User###class o) = wholesaleLimitMarkupPharmacy(sku(o), manufacturingPrice(o), date(o));
    prevWholesaleLimitMarkupPharmacy 'Предельный % оптовой надбавки' (User###class o) = prevWholesaleLimitMarkupPharmacy(sku(o), manufacturingPrice(o), date(o));

    calcMaxTotalLimitMarkup 'Максимальная общая надбавка, %' (User###class o) = NUMERIC[8,4](calcMaxTotalLimitMarkup(sku(o), OVERRIDE importerMarkup(o), 0.0));
    wholesaleLimitPharmacyMarkup (User###class o) = MIN prevWholesaleLimitMarkupPharmacy(o), calcMaxTotalLimitMarkup(o);//минимальная между предельной оптовой и общей    
END

//--------------------------------------------------------------------------------------------------------