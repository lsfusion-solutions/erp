MODULE Ware;

REQUIRE System, Historizable, StockTax, Sku;

// ----------------------------------------- Группа посуды ----------------------------- //
CLASS WareGroup 'Группа посуды' : SkuGroup;
TABLE wareGroup (WareGroup);

@defineExternalizable(wareGroup, STRING[100]);

id(WareGroup group) += id(group) IF group IS WareGroup;

name 'Наименование' = DATA ISTRING[100](WareGroup);

name(WareGroup group) += name(group) IF group IS WareGroup;

TABLE wareGroupWareGroup(WareGroup, WareGroup);
@defineHierarchy(wareGroup);

parent (WareGroup wareGroup) += parent(wareGroup);

// ------------------------------------------ Посуда ----------------------------------------------- //
CLASS Ware 'Посуда' : Sku;
TABLE ware(Ware);

@defineExternalizable(ware, STRING[100]);

id(Ware sku) += id(sku);

name 'Наименование' = DATA ISTRING[100](Ware);
wareName = GROUP AGGR Ware ware BY name(ware); 

wareGroup = DATA WareGroup(Ware) AUTOSET NONULL;
skuGroup(Ware ware) += wareGroup(ware);

name(Ware ware) += name(ware) IF ware IS Ware;

nameWareGroup 'Группа посуды' (Ware ware) = name(wareGroup(ware));
canonicalNameWareGroup 'Группа посуды' (Ware ware) = canonicalName(wareGroup(ware)) IN base;

// Товар
skuType (Ware sku) += SkuType.skuTypeItem IF sku IS Ware;

TABLE wareGroupWare (WareGroup, Ware);

isParent (WareGroup wareGroup, Ware ware) = isParent(wareGroup(ware), wareGroup);   //MATERIALIZED

TABLE wareDate(Ware, DATE);

dataPrice 'Цена' = DATA NUMERIC[16,4] (Ware, DATE) IN base;

price 'Цена' (Ware ware, DATE date) = GROUP
                                                                     LAST  dataPrice(ware, DATE dateIn)
                                                                     ORDER dateIn
                                                                     WHERE dataPrice(ware, dateIn) AND dateIn <= (date AS DATE) IN base;

overPrice 'Цена' = OVERRIDE dataPrice(Ware ware, DATE date), price(ware, date) IN base;

price 'Цена' (Ware ware) = price(ware, currentDate()) IN base;

FORM addPriceWare 'Цена'
    OBJECTS a=Ware PANEL, d=DATE PANEL
    PROPERTIES name(a) READONLY, VALUE(d), dataPrice(a, d)
;
DESIGN addPriceWare {
    PROPERTY(name(a)) { focusable = FALSE; }
}

addPrice 'Добавить' (Ware ware)  { SHOW addPriceWare OBJECTS a = ware; }  TOOLBAR IMAGE 'add.png' CHANGEKEY 'INSERT';

FORM dialogPriceWare 'Цена'
    OBJECTS a=Ware PANEL, d=DATE
    PROPERTIES name(a) READONLY, addPrice(a) DRAW d , VALUE(d) READONLY, dataPrice(a, d)
    FILTERS dataPrice(a, d)
;
DESIGN dialogPriceWare {
    PROPERTY(name(a)) { focusable = FALSE; }
}

dialogPrice 'Цена' (Ware ware)  { SHOW dialogPriceWare OBJECTS a = ware; }  ASON CONTEXTMENU price[Ware] ASON CHANGE price[Ware];
    
VAT 'НДС' = DATA Range (Ware, Country);
numberVAT 'НДС, номер' (Ware w, Country c) = number(VAT(w, c));

VAT (Ware sku, Country country) += VAT (sku, country);

CONSTRAINT tax(VAT(Ware ware, Country country)) != Tax.taxVAT OR
           country(VAT(ware, country)) != country AS Country
           CHECKED BY VAT[Ware,Country]
           MESSAGE 'ошибка: Шкала и страна строки должна соответствовать шкале и строке НДС : Ware';

valueVAT 'НДС, %' (Ware ware, Country country, DATE date) = valueRate(VAT(ware, country), date);
valueVAT 'НДС, %' (Ware ware, Country country) = valueVAT(ware, country, currentDate());

VAT 'НДС' (Ware ware) = VAT(ware, defaultCountry()) MATERIALIZED;
numberVAT 'НДС' (Ware ware) = number(VAT(ware));

valueVAT 'НДС, %' (Ware ware, DATE date) = valueRate(VAT(ware), date);
valueVAT 'НДС, %' (Ware ware) = valueVAT(ware, currentDate());

changeNumberVAT(Ware ware)  { 
    DIALOG rangeDialog OBJECTS c = defaultCountry(), r = VAT(ware, defaultCountry()) INPUT NULL DO
        VAT(ware, Country country) <- r WHERE country == defaultCountry();
}
changeValueVAT(Ware ware)  { 
    INPUT n = NUMERIC[10,5] DO
        VAT(ware, Country country) <- valueCurrentVAT(country, n) WHERE country == defaultCountry();
}

// ------------------ Формы  --------------------- //

FORM wareGroup 'Группа посуды'
    OBJECTS g=WareGroup PANEL
    PROPERTIES(g) id SHOWIF showIDs(), name, nameParent
    EDIT WareGroup OBJECT g
;

FORM wareGroups 'Группы посуды'
    TREE treeGroups tg=WareGroup PARENT parent(tg)
    PROPERTIES READONLY name(tg)
    ORDERS name(tg)

    OBJECTS g=WareGroup
    PROPERTIES(g) READONLY name, canonicalName
    PROPERTIES(g) NEWSESSION DELETE , NEW, EDIT
    ORDERS canonicalName(g)

    FILTERS isParent(g, tg)

    LIST WareGroup OBJECT g
;

DESIGN wareGroups {
    BOX {
        size = (1024, 768);
        NEW rootContainer BEFORE TOOLBARBOX{
            fill = 1;
            horizontal = TRUE;

            MOVE BOX(TREE treeGroups);
            MOVE BOX(g) {
                fill = 4;
            }
        }
    }
}


FORM ware 'Посуда'
    OBJECTS w=Ware PANEL
    PROPERTIES(w) name, id SHOWIF showIDs(), canonicalNameWareGroup, price

    PROPERTIES (w)         numberVAT ON CHANGE changeNumberVAT(w) 
    PROPERTIES (w)         valueVAT ON CHANGE changeValueVAT(w)

    EDIT Ware OBJECT w
;
DESIGN ware {
    MOVE BOX(w);
    NEW tabContainer;
    MOVE TOOLBARBOX;
}

FORM wares 'Посуда'

    TREE treeGroups tg=WareGroup PARENT parent(tg)
    PROPERTIES READONLY name(tg)
    ORDERS name(tg)

    OBJECTS w=Ware
    PROPERTIES(w) READONLY name, id SHOWIF showIDs(), canonicalNameWareGroup, price, numberVAT, valueVAT
    PROPERTIES(w) NEWSESSION NEW, EDIT, deletew=DELETE 
    FILTERS isParent(tg, w)

    LIST Ware OBJECT w
;

DESIGN wares {

    NEW pane {
        fill = 1;
        horizontal = TRUE;
        MOVE BOX(TREE treeGroups) {
            caption = 'Группы посуды';
        }
        MOVE BOX(w) {
            fill = 3;
            GRID(w) {
                defaultComponent = TRUE;
            }
        }
    }
    MOVE TOOLBARBOX;
}

@extendFormEditable(wares);

NAVIGATOR {
    skuNavigator {
        NEW wareGroups AFTER UOMs;
        NEW wares AFTER wareGroups;
    }
}
// ------------------ Дополнительные группы --------------- //
TABLE customGroupTypeWare(CustomGroupType, Ware);
customGroup = DATA CustomGroup (CustomGroupType, Ware);
customGroup(CustomGroupType type, Ware item) += customGroup(type, item);

nameCustomGroup 'Имя' (CustomGroupType type, Ware ware) = name(customGroup(type, ware));
canonicalNameCustomGroup'Каноническое имя' (CustomGroupType type, Ware ware) = canonicalName(customGroup(type, ware));
idCustomGroup'Код' (CustomGroupType type, Ware ware) = id(customGroup(type, ware));

CONSTRAINT customGroupType(customGroup(CustomGroupType type, Ware ware)) != type
           CHECKED BY customGroup[CustomGroupType,Ware]
           MESSAGE 'Выбранный объект классификатора SKU имеет неправильный тип';
           
TABLE customGroupTypeWareGroup(CustomGroupType, WareGroup);
dataCustomGroup 'Дополнительная группа (по умолчанию)' = DATA CustomGroup (CustomGroupType, WareGroup);
dataNameCustomGroupCustomGroup 'Дополнительная группа (по умолчанию)' (CustomGroupType customGroupType, WareGroup wareGroup) = name(dataCustomGroup(customGroupType, wareGroup));

levelParentCustomGroup (CustomGroupType customGroupType, WareGroup wareGroup) = GROUP
                                                              MIN level(wareGroup, WareGroup parent) IF dataCustomGroup(customGroupType, parent) MATERIALIZED;    
nearestParentCustomGroup (CustomGroupType customGroupType, WareGroup wareGroup) = wareGroup(wareGroup, levelParentCustomGroup(customGroupType, wareGroup));
nearestCustomGroup (CustomGroupType customGroupType, WareGroup wareGroup) = dataCustomGroup(customGroupType, nearestParentCustomGroup (customGroupType, wareGroup));

customGroup (CustomGroupType customGroupType, WareGroup wareGroup) =
    OVERRIDE dataCustomGroup(customGroupType, wareGroup), 
             nearestCustomGroup (customGroupType, wareGroup) MATERIALIZED;    

nameCustomGroup 'Дополнительная группа (по умолчанию)' (CustomGroupType customGroupType, WareGroup wareGroup) = name(customGroup(customGroupType, wareGroup));

EXTEND FORM ware
    OBJECTS cgt = CustomGroupType
    PROPERTIES name(cgt) READONLY, canonicalNameCustomGroup(cgt, w)
;
DESIGN ware {
    tabContainer{
        fill =1;
        tabbed = TRUE;
        MOVE BOX(cgt);
    }
    
}

EXTEND FORM wareGroup
    OBJECTS dc=CustomGroupType 
    PROPERTIES(dc)   READONLY name, id
    PROPERTIES(dc, g) nameCustomGroup    
;    
DESIGN wareGroup {
    OBJECTS {
        MOVE BOX(dc);
    }
}

WHEN LOCAL CHANGED(wareGroup(Ware w)) AND CustomGroupType dc IS CustomGroupType AND NOT customGroup(dc, w) DO
    customGroup(dc, w) <- customGroup(dc, wareGroup(w));