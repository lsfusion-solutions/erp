MODULE WareItem;

REQUIRE System, Item, Ware;

NAMESPACE Item;

@defineObjectItemAttribute(ware, Ware, name, 'Посуда', itemBase);
@defineUniteAttributeItemWithoutExtendForm(ware, nameWare, 'посуда', 'посуда', item);

EXTEND FORM attributesItem
    TREE treeGroups wareGroup=WareGroup PARENT parent(wareGroup)
    PROPERTIES READONLY name(wareGroup)
    ORDERS name(wareGroup)

    OBJECTS ware=Ware
    PROPERTIES in(ware)    
    PROPERTIES(ware) READONLY name, id SHOWIF showIDs(), canonicalNameWareGroup, price, numberVAT, valueVAT
    PROPERTIES(ware) NEWSESSION NEW, EDIT, DELETE         
    ORDERS name(ware)
    PROPERTIES replace(ware) TOOLBAR    
    FILTERS isParent(wareGroup, ware)
    
    OBJECTS wareItem = Item
    PROPERTIES(wareItem) READONLY idBarcode, name, id[Sku], idSkuGroup
    PROPERTIES(wareItem) nameWare, EDIT NEWSESSION
    FILTERS ware(wareItem) == ware    

;

DESIGN attributesItem{
    tabContainer{
        NEW wareContainer{
            caption = 'Посуда';
            fill = 1;
            horizontal = TRUE;
            MOVE BOX(TREE treeGroups) {
                caption = 'Группы посуды';
            }
            NEW rw {
                fill = 3;
                horizontal = FALSE;
                MOVE BOX(ware) {                   
                    GRID(ware) {
                        defaultComponent = TRUE;
                    }
                }
                MOVE BOX(wareItem);
            }
        }
    }
}
@defineObjectItemAttributeBatch (ware, nameWare, 'Посуда');
@implementItemAttribute(nameWare, 'Посуда', String, itemBase);

@defineItemGroupDefaultObject(ware, 'Посуда', Ware, nameWare);
@defineItemFilterValue(ware, 'Посуда', w);
EXTEND FORM waresSession
    PROPERTIES(t) READONLY valueVAT, price
;


DESIGN ware {
    tabContainer {
        MOVE BOX(TREE groupTree) {
            caption = 'Группы товаров';
        }
    }
}

@defineItemExtractObjectAttribute(ware, nameWare, wareName);

inWare 'Товар в посуде' (Item item) = item IS Item AND ware(item);

overCopy(Item s, Item d) + { 
    ware(d) <- ware(s);
}

//----------------------- Переход на новый основной классификатор ---------------------------//
overReplaceToItemGroup(CustomGroup g, ItemGroup ng) + {
    userShowWare(ng) <- userShowWare(itemGroup(g));
    dataWare(ng) <- prevWare(itemGroup(g));
}
