MODULE RepricingPriceLimitAlcohol;

REQUIRE RepricingPriceListPriceLimit, PriceLimitAlcohol; 

NAMESPACE Repricing;

//alcoholLimitPrice(DepartmentStore d, Sku s, DATETIME dt) = minAlcoholLimitPrice(s, dt)  IF d IS DepartmentStore;
alcoholLimitPrice(DepartmentStore d, Sku s, DATETIME dt) = (IF country(s) == defaultCountry() THEN minAlcoholLimitPriceRB(s, dt) ELSE minAlcoholLimitPrice(s, dt))  IF d IS DepartmentStore;

overSetManagementRetailPrice(DepartmentStore d, DATETIME dt) + { 
    LOCAL limitPrice = NUMERIC[16,4] (Sku);
    limitPrice(Sku sku) <- alcoholLimitPrice(d, sku, dt) WHERE managementRetailPrice(sku);
    managementRetailPrice (Sku sku) <- limitPrice(sku) WHERE limitPrice(sku) > managementRetailPrice (sku) AND NOT skipRepricingPriceLimit(sku); 
}

calculateDescriptionPricing (Sku sku, DepartmentStore d, DATETIME dt) + {
    descriptionPricing (sku, 'Минимальная цена на алкоголь') <- STRING(alcoholLimitPrice(d, sku, dt));
}

//переоценка товаров с ценой меньше
alcoholLimitPrice 'Цена минимальная' = DATA LOCAL NESTED NUMERIC[16,4] (Sku);

createPriceLimitAlcoholRepricing 'Создать переоценку'(Stock d, Operation o, DATETIME dt)  { 
    IF (GROUP SUM 1 IF alcoholLimitPrice(Sku sku)) THEN {
        NEW r = UserRepricing {
            departmentStore(r) <- d;
            operation(r) <- o;
            date(r) <- toDate(dt);
            time(r) <- toTime(dt);  
            isPosted(r) <- TRUE;
            
            incrementValue(defaultNumeratorUserRepricing());
            number(r) <- incrementedValue();
            series(r) <- series(defaultNumeratorUserRepricing());
    
            FOR alcoholLimitPrice(Sku sku) ORDER orderRepricingDetail(sku) NEW rd = UserRepricingDetail DO {
                userRepricing(rd) <- r;
                sku(rd) <- sku;
                quantity(rd) <- currentBalance(sku, d) IF currentBalance(sku, d) > 0;
                retailPrice(rd) <- alcoholLimitPrice(sku);
                curRetailPrice(rd) <- prevRetailPricingPriceB(sku, d, dt);
                price(rd) <- round2(prevPriceA(SystemLedgerPriceListType.supplierPricingPriceListType, sku, d, dt));
            }     
            inRepForm(r) <- TRUE;
        }
    }
};

calculatePriceLimitAlcoholRepricing 'По мин. ценам алкоголя' (DepartmentStore d, DATETIME dt)  { 
    alcoholLimitPrice(Sku sku) <- NULL;
    IF onStockPriceListRepricing() THEN {  // переоценивать товары без остатка, настройка в options pricings (Акты расценки?)
        alcoholLimitPrice (Sku sku) <- alcoholLimitPrice(d, sku, dt) IF prevRetailPricingPriceA(sku, d, dt);
    } ELSE {
        alcoholLimitPrice (Sku sku) <- alcoholLimitPrice(d, sku, dt) IF currentBalance(sku, d) > 0.0;
    }
    alcoholLimitPrice(Sku sku) <- NULL WHERE alcoholLimitPrice(sku) <= prevRetailPricingPriceA(sku, d, dt);
}

priceLimitAlcoholRepricingOperation  = DATA Repricing.Operation ();
namePriceLimitAlcoholRepricingOperation 'Операция для переоценки по мин.ценам алкоголя' = name(priceLimitAlcoholRepricingOperation());

EXTEND FORM options
    PROPERTIES() namePriceLimitAlcoholRepricingOperation
;
DESIGN options {
    rPanel {
        MOVE PROPERTY(namePriceLimitAlcoholRepricingOperation());
    }
}

createPriceLimitAlcoholRepricingAll 'Создать автоматическую переоценку по мин. ценам алкоголя' (DepartmentStore department)  { 
    NEWSESSION {
        calculatePriceLimitAlcoholRepricing(department, currentDateTime());
        createPriceLimitAlcoholRepricing(department, priceLimitAlcoholRepricingOperation(), currentDateTime()); 
        APPLY;
    }
}

createLimitAlcoholRepricing 'Создать переоценку по мин. ценам алкоголя' (DepartmentStore d, Operation o, DATETIME dt)  {
	NEWSESSION NESTED LOCAL  {
	    calculatePriceLimitAlcoholRepricing(d, dt);
	    createPriceLimitAlcoholRepricing(d, o, dt);
	    FOR inRepForm(UserRepricing r) DO {
	        DIALOG userRepricing OBJECTS p = r DOCKED NOCANCEL DO {
                alcoholLimitPrice(Sku sku) <- NULL;      
            }
	    }
	    inRepForm(UserRepricing r) <- NULL;      
	}
}

FORM createLimitAlcoholRepricing 'Переоценка по мин.ценам алкоголя'
    OBJECTS dt = DATETIME PANEL
    PROPERTIES VALUE(dt)
    
    OBJECTS d = DepartmentStore PANEL
    PROPERTIES (d) name SELECTOR
    
    OBJECTS o = Operation PANEL
    PROPERTIES (o) name SELECTOR   
;

seekOperation ()  { 
    SEEK createLimitAlcoholRepricing.o = priceLimitAlcoholRepricingOperation();
}

EXTEND FORM createLimitAlcoholRepricing
    EVENTS
        ON INIT seekOperation() 
;

@extendFormFilterStockAccess(d, createLimitAlcoholRepricing);

createLimitAlcoholRepricing 'Создать переоценку по мин. ценам алкоголя' () {
    DIALOG createLimitAlcoholRepricing OBJECTS dt INPUT, d INPUT, o INPUT DO {
        createLimitAlcoholRepricing(d, o, dt);    
    }   
}

changeInDepartmentStores () {
    DIALOG departmentStores;
}

FORM createLimitAlcoholRepricingMulti 'Переоценка по мин.ценам алкоголя'
    OBJECTS dt = DATETIME PANEL
    PROPERTIES VALUE(dt)
    
    PROPERTIES () namesStocks ON CHANGE changeInDepartmentStores()
    
    OBJECTS o = Operation PANEL
    PROPERTIES (o) name SELECTOR   
;

DESIGN createLimitAlcoholRepricingMulti {
    OBJECTS {
        NEW stocksContainer BEFORE BOX(o) {
            type = CONTAINERH;
            caption = 'Отделы магазинов';
            MOVE PROPERTY(namesStocks());
        }    
    }
}

createLimitAlcoholRepricingMulti 'Создать переоценку по мин. ценам алкоголя (несколько магазинов)' () {
    DIALOG createLimitAlcoholRepricingMulti OBJECTS dt INPUT, o INPUT DO {
        LOCAL NESTED countRepricings = INTEGER();       
        countRepricings() <- 0;
        FOR in(DepartmentStore department) DO NEWSESSION {
            calculatePriceLimitAlcoholRepricing(department, dt);
            IF [GROUP SUM alcoholLimitPrice(Sku sku)]() THEN {
                createPriceLimitAlcoholRepricing(department, o, dt);
                APPLY NESTED LOCAL;
                IF NOT canceled() THEN {
                    countRepricings() <- countRepricings() + 1;
                }            
            } 
        }
        MESSAGE 'Создано актов переоценки: ' + countRepricings();
        in(DepartmentStore department) <- NULL WHERE in(department);
    }
    
} CONFIRM;

EXTEND FORM alcoholLimits
    PROPERTIES createLimitAlcoholRepricing(), createLimitAlcoholRepricingMulti()
;

DESIGN alcoholLimits {
    actionContainer {
        NEW repricing {
            caption = 'Переоценка';
            type = CONTAINERV;
            fill = 1;
            MOVE PROPERTY(createLimitAlcoholRepricing());
            MOVE PROPERTY(createLimitAlcoholRepricingMulti());
        }
    }    
}

minAlcoholLimitPrice 'Минимальная цена на алкогольную продукцию' (UserRepricingDetail d) = 
    IF country(sku(d)) == defaultCountry() THEN minAlcoholLimitPriceRB(sku(d), dateTime(d)) ELSE minAlcoholLimitPrice(sku(d), dateTime(d));

WHEN LOCAL FORMS userRepricing GOAFTER retailPrice[UserRepricingDetail] 
            SETCHANGED(retailPrice(UserRepricingDetail d))
            AND minAlcoholLimitPrice(d) > retailPrice(d) DO {
    retailPrice(d) <- minAlcoholLimitPrice(d);
//    retailMarkup(d) <- calcRetailMarkup(d);
}