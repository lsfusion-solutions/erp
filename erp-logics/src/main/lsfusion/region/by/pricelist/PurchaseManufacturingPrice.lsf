MODULE PurchaseManufacturingPrice;

REQUIRE PurchaseInvoice, PriceListLedger, PriceListCalc;

NAMESPACE Purchase;

//заказ
@defineDocumentInterfaceProperty (order, showManufacturingPrice, 'Цена изготовителя');

// -- Операция
@defineOperationProperty(showManufacturingPrice, 'Цена изготовителя', priceContainer);
@deriveDocumentOperationProperty(UserOrder, showManufacturingPrice);

EXTEND FORM userOrder
    PROPERTIES(o)  showManufacturingPrice

;
DESIGN userOrder {
    headerExtraParams {
        NEW headerManufacturing {
            caption = 'Цена изготовителя';
            MOVE PROPERTY(showManufacturingPrice(o));
        }
    }
}

//накладная
dateManufacturingRateExchange 'Дата калькуляции' = ABSTRACT DATE(Invoice);
dateManufacturingRateExchange 'Дата калькуляции' = DATA DATE(UserInvoice);
dateManufacturingRateExchange(UserInvoice i) += dateManufacturingRateExchange(i);

dateManufacturingRateExchange(UserInvoice i) <- date[Invoice](i) WHEN CHANGED (date[Invoice](i));

rateManufacturingExchange 'Курс' = ABSTRACT NUMERIC[14,6](Invoice) MATERIALIZED;
rateManufacturingExchange 'Курс' = DATA NUMERIC[14,6](UserInvoice);
rateManufacturingExchange(UserInvoice i) += rateManufacturingExchange(i);

rateManufacturingExchange 'Курс' = ABSTRACT NUMERIC[14,6](InvoiceDetail) MATERIALIZED;

dataRateManufacturingExchange 'Курс' = DATA NUMERIC[14,6](UserInvoiceDetail);
rateManufacturingExchange 'Курс' (UserInvoiceDetail d) = OVERRIDE dataRateManufacturingExchange(d),  rateManufacturingExchange(userInvoice(d));
rateManufacturingExchange(UserInvoiceDetail d) += rateManufacturingExchange(d);


WHEN LOCAL FORMS userInvoice CHANGED (dateManufacturingRateExchange(UserInvoice i)) OR
                               CHANGED (typeExchange(i)) OR
                               CHANGED (currency(i)) DO {
    rateManufacturingExchange(i) <- rateOn(typeExchange(i),
                                                               currency(i),
                                                               dateManufacturingRateExchange(i));
}

defaultRound = ABSTRACT INTEGER(InvoiceDetail);

homeManufacturingPrice 'Цена (конв.)' (InvoiceDetail detail) =
    round(price(detail) *
                       rateManufacturingExchange(detail),
                       OVERRIDE defaultRound(detail), defaultRound(homeCurrency(invoice(detail))));

homeManufacturingPrice 'Цена (конв.)' (UserInvoiceDetail detail) =
    round(price(detail) *
                       rateManufacturingExchange(detail),
                       OVERRIDE defaultRound(detail), defaultRound(homeCurrency(detail))) MATERIALIZED;

incomeManufacturingPrice (InvoiceDetail detail) = IF isHomeCurrency(invoice(detail)) THEN
                                                    homeManufacturingPrice(detail)
                                                    ELSE price(detail);
incomeManufacturingSum(invoice) = GROUP SUM incomeManufacturingPrice(InvoiceDetail detail) * quantity(detail) BY invoice(detail);

dataIncomeManufacturingPrice = ABSTRACT NUMERIC[16,4] (InvoiceDetail);
incomeManufacturingPrice (UserInvoiceDetail detail) = 
    OVERRIDE dataIncomeManufacturingPrice(detail),
            (IF isHomeCurrency(userInvoice(detail)) THEN homeManufacturingPrice(detail) ELSE price(detail));
        
incomeManufacturingSum(invoice) = GROUP SUM incomeManufacturingPrice(UserInvoiceDetail detail) * quantity(detail) BY userInvoice(detail);

costManufacturingPrice(InvoiceDetail detail) = ABSTRACT NUMERIC[20,8] (InvoiceDetail);

costManufacturingPrice(UserInvoiceDetail detail) = NUMERIC[20,8](incomeManufacturingPrice(detail) (+) extraCostPrice(detail) (+) customCostPrice(detail) (+) certificateCostPrice(detail));

costManufacturingPrice(UserInvoiceDetail d) += costManufacturingPrice(d);

@defineDocumentInterfaceProperty (invoice, showManufacturingPrice, 'Цена изготовителя');
@defineDocumentInterfaceHeaderProperty (invoice, reverseManufacturingPrice, 'Обратный расчет цены изг.');
dataReverseManufacturingPrice = ABSTRACT BOOLEAN (UserInvoiceDetail);
reverseManufacturingPrice 'Обратный расчет цены изг.' (UserInvoiceDetail d) = OVERRIDE dataReverseManufacturingPrice(d), reverseManufacturingPrice(userInvoice(d));

@defineOperationProperty(reverseManufacturingPrice, 'Обратный расчет цены изг.', priceContainer);

@defineDocumentInterfaceProperty (invoice, calcManufacturingMarkupFromPrices, 'Расчет опт. надбавки от входных цен');

@defineOperationProperty(calcManufacturingMarkupFromPrices, 'Расчет опт. надбавки от входных цен', priceContainer);

// -- Операция
@deriveDocumentOperationProperty(UserInvoice, showManufacturingPrice);
@deriveDocumentOperationProperty(UserInvoice, reverseManufacturingPrice);

@deriveDocumentOperationProperty(UserInvoice, calcManufacturingMarkupFromPrices);

manufacturingPrice 'Цена изготовителя' = ABSTRACT NUMERIC[16,4] (InvoiceDetail) CHARWIDTH 7 MATERIALIZED;
manufacturingPrice 'Цена изготовителя' = DATA NUMERIC[16,4] (UserInvoiceDetail) CHARWIDTH 7 ;

manufacturingPrice (UserInvoiceDetail invoiceDetail) += manufacturingPrice(invoiceDetail);

@defineDocumentInterfaceDetailInclVATCustomPrefix (invoiceDetail);
includeVAT(UserInvoiceDetail detail) <-  fixedPrice(sku(detail)) WHEN CHANGED (sku(detail));

@defineDocumentInterfaceDetailMPVATCustomPrefix (invoiceDetail, manufacturing, );

EXTEND CLASS SystemLedgerPriceListType { manufacturingPriceStockPriceListType 'Изготовителя (последняя по складу)' }
batch (SystemLedgerPriceListType type, Stock stock) += WHEN type == SystemLedgerPriceListType.manufacturingPriceStockPriceListType AND isCompany(stock)
                                               THEN priceBatchLedger(stock);
in (InvoiceDetail ledger, SystemLedgerPriceListType type) += WHEN showManufacturingPrice(ledger) AND price(ledger) AND type == SystemLedgerPriceListType.manufacturingPriceStockPriceListType THEN TRUE;
overLedgerManufacturingPrice = ABSTRACT NUMERIC[16,4] (InvoiceDetail);
price (InvoiceDetail ledger, SystemLedgerPriceListType type) += WHEN showManufacturingPrice(ledger) AND price(ledger) AND type == SystemLedgerPriceListType.manufacturingPriceStockPriceListType THEN OVERRIDE overLedgerManufacturingPrice(ledger), manufacturingPrice(ledger);

addCostPriceToManufacturingPrice 'Учитывать в цене изготовителя доп. расходы' = DATA BOOLEAN (Purchase.Operation);

// -- Операция
manufacturingCalcPriceListType = DATA CalcPriceListType (Purchase.Operation);
nameManufacturingCalcPriceListType 'Вид цен (надбавка к цене изготовителя)' (Operation operation) = name(manufacturingCalcPriceListType(operation));

// Вид цены (надбавка) для всего инвойса
@defineDocumentInterfaceHeaderPriceListType (invoice, calcPriceListType, manufacturing, ' (надбавка)');
@defineDocumentDetailPriceListTypePrefix (invoice, invoiceDetail, calcPriceListType, manufacturing, ' (надбавка)');
@defineDocumentDetailPriceListTypePrefix (userInvoice, userInvoiceDetail, calcPriceListType, manufacturing, ' (надбавка)');

@defineDocumentInterfaceDetailMarkupCustomPrefix (invoiceDetail, manufacturing, ' (к цене изготовителя)');

manufacturingCalcPriceListType (UserInvoice invoice) <- manufacturingCalcPriceListType(operation(invoice))
    WHEN CHANGED(operation(invoice));

manufacturingMarkup(UserInvoiceDetail detail) <- markup(manufacturingCalcPriceListType(detail), sku(detail))
    WHEN CHANGED(manufacturingCalcPriceListType(detail)) OR
         CHANGED(sku(detail));

EXTEND FORM Purchase.operation
    PROPERTIES(o) addCostPriceToManufacturingPrice, nameManufacturingCalcPriceListType 
;

DESIGN Purchase.operation{
    priceContainer{
        NEW manufacturingPriceContainer{
            caption = 'Цена изготовителя';
            MOVE PROPERTY(showManufacturingPrice(o));
            MOVE PROPERTY(addCostPriceToManufacturingPrice(o));
            MOVE PROPERTY(nameManufacturingCalcPriceListType(o));
            MOVE PROPERTY(reverseManufacturingPrice(o));
            MOVE PROPERTY(calcManufacturingMarkupFromPrices(o));            
        }
    }
}

addCostPriceToManufacturingPrice 'Учитывать доп. расходы' (invoice) = DATA BOOLEAN (UserInvoice) IN documentPrm;
addCostPriceToManufacturingPrice(UserInvoice invoice) <- addCostPriceToManufacturingPrice(operation(invoice))
    WHEN CHANGED(operation(invoice));

calcBaseManufacturingPrice (UserInvoiceDetail detail) = IF addCostPriceToManufacturingPrice(userInvoice(detail)) THEN costManufacturingPrice(detail)
                                        ELSE NUMERIC[20,8](incomeManufacturingPrice(detail));

baseManufacturingPrice (UserInvoiceDetail detail) = calcBaseManufacturingPrice (detail) * (100.0 + manufacturingMarkup(detail))/100;
baseReverseManufacturingPrice (UserInvoiceDetail detail) = calcBaseManufacturingPrice (detail) / (100.0 + manufacturingMarkup(detail))*100;

skipChangeManufacturingPrice 'Пропустить' = ABSTRACT BOOLEAN (UserInvoiceDetail);
calcReversePrice(UserInvoiceDetail d) =     
    round(NUMERIC[16,4](manufacturingPrice (d) * (100.0 (+) manufacturingMarkup(d))/100), currency(d));  

updateManufacturingPrice(UserInvoiceDetail d)  { 
    CASE WHEN calcManufacturingMarkupFromPrices(d) THEN manufacturingMarkup(d) <- NUMERIC[8,3]( (calcBaseManufacturingPrice(d) / manufacturingPrice(d) - 1) *100); 
         WHEN reverseManufacturingPrice(d) THEN price(d) <- calcReversePrice(d);
         ELSE
            manufacturingPrice(d) <- 
                IF roundCondition(manufacturingCalcPriceListType[InvoiceDetail](d)) THEN
//                    NUMERIC[16,4](Utils.round(baseManufacturingPrice(d), priceRound(roundCondition(manufacturingCalcPriceListType[InvoiceDetail](d)))))
                    NUMERIC[16,4](round(baseManufacturingPrice(d), roundCondition(manufacturingCalcPriceListType[InvoiceDetail](d))))    // есть лимиты надбавок для импортеров                 
                ELSE
                    NUMERIC[16,4](baseManufacturingPrice(d));    
         
}
overChangePrice (UserInvoiceDetail d) + {
    CASE WHEN calcManufacturingMarkupFromPrices(d) THEN manufacturingMarkup(d) <- NUMERIC[8,3]( (calcBaseManufacturingPrice(d) / manufacturingPrice(d) - 1) *100);
         WHEN reverseManufacturingPrice(d) THEN manufacturingPrice(d) <- baseReverseManufacturingPrice(d);                
    
}

ON LOCAL FORMS userInvoice {
    FOR ((CHANGED(calcBaseManufacturingPrice(UserInvoiceDetail d)) AND NOT reverseManufacturingPrice(d)) OR CHANGED(manufacturingMarkup(d))) 
        AND NOT CHANGED(manufacturingPrice(d)) AND NOT skipChangeManufacturingPrice(d) DO {
        
        updateManufacturingPrice(d);
    }   
}    
 
calcManufacturingMarkup(UserInvoiceDetail d) =     
    NUMERIC[8,3]((manufacturingPrice(d) * 100.0 / calcBaseManufacturingPrice(d)) - 100.0);

customChangeManufacturingPrice ABSTRACT LIST (UserInvoiceDetail);
useCustomChangeManufacturingPrice 'Альтернативный метод расчета ' = ABSTRACT BOOLEAN (UserInvoiceDetail);

overChangeManufacturingPrice  ABSTRACT LIST ( UserInvoiceDetail);

changeManufacturingPrice(UserInvoiceDetail d)  { 
    INPUT n = NUMERIC[16,4] DO {
        manufacturingPrice(d) <- n;
        IF useCustomChangeManufacturingPrice(d) THEN customChangeManufacturingPrice(d);
        ELSE { 
            CASE WHEN calcManufacturingMarkupFromPrices(d) THEN manufacturingMarkup(d) <- NUMERIC[8,3]( (calcBaseManufacturingPrice(d) / manufacturingPrice(d) - 1) *100);      
                WHEN reverseManufacturingPrice(d) THEN price(d) <- calcReversePrice(d);  // пока не учитываем доп. расходы
                ELSE  manufacturingMarkup(d) <- calcManufacturingMarkup(d);        
            invoicePrice(d) <- round2(price(d) * (100 (+) calcValueVAT(d))/100);
            overChangeManufacturingPrice(d);
        } 
    }
}

overChangeManufacturingMarkup  ABSTRACT LIST ( UserInvoiceDetail);

changeManufacturingMarkup(UserInvoiceDetail d)  { 
    INPUT n = NUMERIC[8,3] DO {
        manufacturingMarkup(d) <- n;
        overChangeManufacturingMarkup(d);
    }
}

toFillMarkup 'Проставить надбавку из вида цен'(UserInvoiceDetail detail)  { 
    manufacturingMarkup(detail) <- markup(manufacturingCalcPriceListType(detail), sku(detail));
        EXEC updateManufacturingPrice(detail);
} ASON CONTEXTMENU manufacturingMarkup[UserInvoiceDetail];

toFillMarkupDetails 'Проставить надбавку из вида цен для всех'(UserInvoiceDetail detail)  { 
    FOR [ FILTER userInvoice.d](UserInvoiceDetail det) AND detail IS UserInvoiceDetail DO {
        EXEC toFillMarkup(det);
    }
} ASON CONTEXTMENU manufacturingMarkup[UserInvoiceDetail];

baseManufacturingMarkupSum 'Сумма (надбавка)' (UserInvoiceDetail detail) = calcBaseManufacturingPrice (detail) * quantity(detail) * manufacturingMarkup(detail)/100;
@defineDocumentHeaderSumCustomPrefix(userInvoice, userInvoiceDetail, baseManufacturingMarkup, ' (надбавка) всего');

//overAdditionalValuation(rd, detail) += (rd, detail) {
//    curManufacturingPriceUserRepricingDetail(rd) <- prevPriceBPriceListTypeSkuStockDateTime(SystemLedgerPriceListType.manufacturingPriceStockPriceListType, skuInvoiceDetail(detail), customerStockInvoiceDetail(detail), dateTimeInvoiceDetail(detail));
//    manufacturingPriceUserRepricingDetail(rd) <- manufacturingPriceInvoiceDetail(detail);
//}

//@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch(userInvoice, manufacturingPriceStockPriceListType, manufacturing, sku, customerStock);

@defineDocumentInterfaceDetailDataSumPrefix (invoice, manufacturing, ' изготовителя'); // объявляем сумму изготовителя
@deriveDocumentDetailSumPrefix(userInvoice, manufacturing, currency, quantity); // записываем сумму изготовителя
@defineDocumentInterfaceHeaderSumCustomPrefix (invoice, invoiceDetail, manufacturing, ' (изготовителя) всего');

calcDiscountManufacturingSum (UserInvoiceDetail detail) = manufacturingSum(detail) - sum(detail);
discountManufacturingSum 'Скидка от цены изг. (сумма)' (UserInvoiceDetail detail) = calcDiscountManufacturingSum(detail) IF calcDiscountManufacturingSum(detail) > 0.0;

calcDiscountManufacturingSum (InvoiceDetail detail) = manufacturingSum(detail) - sum(detail);
discountManufacturingSum 'Скидка от цены изг. (сумма)' (InvoiceDetail detail) = calcDiscountManufacturingSum(detail) IF calcDiscountManufacturingSum(detail) > 0.0;

@defineDocumentInterfaceHeaderItemSum (invoice, discountManufacturing, discountManufacturing);
@defineDocumentInterfaceHeaderItemSum (invoice, manufacturing, manufacturing);


showManufacturingPriceHomeCurrency(UserInvoice invoice) = showManufacturingPrice(invoice) AND isHomeCurrency(invoice);

backgroundManufacturing 'Цвет' (Invoice invoice) = RGB(240, 240, 224) IF invoice IS Invoice;
overBackgroundManufacturing 'Цвет'  (d)= ABSTRACT CASE COLOR (InvoiceDetail);
backgroundManufacturing (InvoiceDetail d) = OVERRIDE overBackgroundManufacturing(d), backgroundManufacturing(invoice(d));

EXTEND FORM userInvoice
    PROPERTIES(i) showManufacturingPrice BACKGROUND backgroundManufacturing(i)
    PROPERTIES(i) SHOWIF showManufacturingPrice(i) BACKGROUND backgroundManufacturing(i) addCostPriceToManufacturingPrice,
                  nameManufacturingCalcPriceListType, reverseManufacturingPrice, calcManufacturingMarkupFromPrices
    PROPERTIES(i) SHOWIF showManufacturingPriceHomeCurrency(i) BACKGROUND backgroundManufacturing(i) dateManufacturingRateExchange, rateManufacturingExchange
    PROPERTIES(d) SHOWIF showManufacturingPrice(i) BACKGROUND backgroundManufacturing(d) AFTER invoiceSum(d) 
                  manufacturingMarkup ON CHANGE changeManufacturingMarkup(d),
                  manufacturingPrice ON CHANGE changeManufacturingPrice(d), includeVAT, 
                  manufacturingSum
    PROPERTIES(d) SHOWIF showManufacturingPriceHomeCurrency(i) BACKGROUND backgroundManufacturing(d)
                  rateManufacturingExchange BEFORE manufacturingMarkup(d)
             
                  
//    PROPERTIES(d) BACKGROUND backgroundCurInvoice(i) SHOWIF toShowRepricingPriceInvoice(i) BEFORE curPriceUserInvoiceDetail
//                  curManufacturingPriceUserInvoiceDetail ON CHANGE changeCurManufacturingPriceUserInvoiceDetail(d)
;
DESIGN userInvoice {
    headerExtraParams {
        NEW headerManufacturing {
            caption = 'Цена изготовителя';
            lines = 2;
            MOVE PROPERTY(showManufacturingPrice(i));
            MOVE PROPERTY(addCostPriceToManufacturingPrice(i));
            MOVE PROPERTY(nameManufacturingCalcPriceListType(i));
            MOVE PROPERTY(reverseManufacturingPrice(i));
            MOVE PROPERTY(calcManufacturingMarkupFromPrices(i));                        
            MOVE PROPERTY(dateManufacturingRateExchange(i));
            MOVE PROPERTY(rateManufacturingExchange(i));
        }
    }
}

EXTEND FORM invoices
    PROPERTIES(d) READONLY BACKGROUND backgroundManufacturing(i) SHOWIF showManufacturingPrice(i) AFTER invoiceSum(d)
                  manufacturingMarkup, manufacturingPrice, includeVAT, manufacturingSum
                  
    PROPERTIES(d) SHOWIF showManufacturingPriceHomeCurrency(i) BACKGROUND backgroundManufacturing(i)
                      rateManufacturingExchange BEFORE manufacturingMarkup(d)                  
                  
;
//--
//overPricingPricePricingDetail(detail) += manufacturingPriceInvoiceDetail(invoiceDetailInvoicePricingDetail(detail));
//overPricingPriceUserInvoiceDetail(detail) += manufacturingPriceUserInvoiceDetail(detail);
//
//manufacturingPricePricingDetail(detail) += manufacturingPriceInvoiceDetail(invoiceDetailInvoicePricingDetail(detail));
////--
//overRepricingPriceRepricingDetail(detail) += manufacturingPriceInvoiceDetail(invoiceDetailInvoiceRepricingDetail(detail));
//overRepricingPriceUserInvoiceDetail(detail) += manufacturingPriceUserInvoiceDetail(detail);
//manufacturingPriceRepricingDetail(detail) += manufacturingPriceInvoiceDetail(invoiceDetailInvoiceRepricingDetail(detail));
//
//overCurRepricingPriceRepricingDetail(detail) += curManufacturingPriceInvoiceDetail(invoiceDetailInvoiceRepricingDetail(detail));
//overCurRepricingPriceUserInvoiceDetail(detail) += curManufacturingPriceUserInvoiceDetail(detail);
//curManufacturingPriceRepricingDetail(detail) += curManufacturingPriceInvoiceDetail(invoiceDetailInvoiceRepricingDetail(detail));

// цены в подборе
@extendFormDocumentPriceSku(userOrder, manufacturingPriceStockPriceListType, customerStock, ' изготовителя', userOrder, o, showManufacturingPrice);
@extendFormDocumentPriceBatch(userOrder, manufacturingPriceStockPriceListType,  customerStock, ' изготовителя', userOrder, o, showManufacturingPrice);

@extendFormDocumentPriceSku(userInvoice, manufacturingPriceStockPriceListType, customerStock, ' изготовителя', userInvoice, i, showManufacturingPrice);
@extendFormDocumentPriceBatch(userInvoice, manufacturingPriceStockPriceListType, customerStock, ' изготовителя', userInvoice, i, showManufacturingPrice);

@defineDocumentInterfaceDetailPriceCustomPrefix(orderDetail, manufacturing, ' изготовителя');

@defineDocumentInterfaceDetailMarkupCustomPrefix (orderDetail, manufacturing, ' (к цене изготовителя)');

EXTEND FORM userOrder
    PROPERTIES (d) SHOWIF showManufacturingPrice(o) manufacturingMarkup, manufacturingPrice;

@defineOperationProperty(isManufacturingPrice, 'Должна быть задана цена изготовителя', constraintContainer);

skipCheckManufacturingPrice = ABSTRACT BOOLEAN (UserInvoiceDetail);

WHEN SET(isManufacturingPrice(Operation o)) AND NOT showManufacturingPrice(o) DO {
    showManufacturingPrice (o) <- TRUE;
}

CONSTRAINT (CHANGED(isPosted(UserInvoiceDetail d)) OR CHANGED(operation(d)) OR CHANGED(manufacturingPrice(d))) AND isPosted(d) AND isManufacturingPrice(operation(d)) AND NOT manufacturingPrice(d) AND NOT skipCheckManufacturingPrice(d)
    MESSAGE 'Для строки накладной (закупка) должна быть задана цена изготовителя';