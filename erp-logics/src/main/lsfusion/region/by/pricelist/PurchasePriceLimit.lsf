MODULE PurchasePriceLimit;

REQUIRE PricingPriceLimit, PricingPurchase;

NAMESPACE Purchase;

//------------------ Предельные надбавки ----------------------//

@defineDocumentInterfaceProperty (invoice, showLimitPrice, 'Предельная надбавка');
@defineDocumentInterfaceDetailMarkupPrefix (invoice, limit, ' предельная');

useLimitMarkupValue = ABSTRACT VALUE BOOLEAN (UserInvoiceDetail);

WHEN LOCAL FORMS userInvoice 
             (CHANGED(customerStock(UserInvoiceDetail detail)) OR
              CHANGED(sku(detail)) OR 
              SET(showLimitPrice(detail)))
             AND showLimitPrice(detail) DO {
    limitMarkup(detail) <- OVERRIDE markup(priceLimitPriceListType(customerStock(detail)), sku(detail)), limitMarkupValue() IF useLimitMarkupValue(detail);
}

//----------------------------------------------- Операции -----------------------------------------------------//

// Записываем необходимо ли показывать предельную надбавку по умолчанию из операции расценки, заданной для операции закупка
showLimitPrice (UserInvoice invoice) <- showLimitPrice(pricingOperation(operation(invoice)))
    WHEN CHANGED(operation(invoice));

showIfLimitPrice = showLimitPrice (UserInvoice invoice) AND createPricing(invoice);

EXTEND FORM userInvoice
    PROPERTIES(i) showLimitPrice SHOWIF createPricing(i) BACKGROUND backgroundRetail(i)
    PROPERTIES(pd) SHOWIF showIfLimitPrice(i) BEFORE retailMarkup(pd) limitMarkup BACKGROUND backgroundRetail(i)
;
DESIGN userInvoice{
    headerCreatePricing {
        MOVE PROPERTY (showLimitPrice(i));

    }
}

EXTEND FORM invoices
    PROPERTIES(d) READONLY SHOWIF showLimitPrice(i) BEFORE retailMarkup(d) limitMarkup BACKGROUND backgroundRetail(i)
;

// Имплементим для расчета оптимальной розничной цены

overLimitBasePrice = ABSTRACT VALUE NUMERIC[16,4] (UserInvoiceDetail);
limitBasePrice(UserInvoiceDetail d) = OVERRIDE overLimitBasePrice(d), price(d);
 
limitMarkupPrice (UserInvoiceDetail d) =
                                           round(
                                                [ (X+Y)*(Z+100.0)/100.0](
                                                    limitBasePrice(d),
                                                    limitMarkup(d),
                                                    valueRetailVAT(d)), roundCondition(priceLimitPriceListType(customerStock(d)), sku(d)));

limitPrice = ABSTRACT CASE NUMERIC[16,4] (InvoiceDetail);
limitPrice (UserInvoiceDetail detail) += WHEN detail IS UserInvoiceDetail THEN round(
                                           [ X*(Y+100.0)*(Z+100.0)/10000.0](
                                                    limitBasePrice(detail),
                                                    limitMarkup(detail),
                                                    valueRetailVAT(detail)), roundCondition(priceLimitPriceListType(customerStock(detail)), sku(detail)));

//WHEN LOCAL FORMS userInvoice GOAFTER retailPrice[UserInvoiceDetail] 
//            (SETCHANGED(retailPrice(UserInvoiceDetail d)) OR CHANGED(limitMarkup(d))) AND //  вообще в событии должно быть это условие, но тогда не всегда срабатывает (см. skype с Vitalur за 10.07) 
//             showLimitPrice(d) AND limitMarkup(d) > 0.3 AND limitMarkup(d) <= 1 AND limitMarkup(d) < retailPrice(d) NOINLINE DO {
//    retailPrice(d) <- limitMarkup(d);
//    retailMarkup(d) <- calcRetailMarkup(d);
//}
//
//WHEN LOCAL FORMS userInvoice GOAFTER retailPrice[UserInvoiceDetail] 
//            (SETCHANGED(retailPrice(UserInvoiceDetail d)) OR CHANGED(limitBasePrice(d)) OR CHANGED(limitMarkup(d))) 
//            AND showLimitPrice(d) AND limitMarkup(d) <= 0.3 NOINLINE DO {
//    IF limitMarkupPrice(d) < retailPrice(d) THEN {
//        retailPrice(d) <- limitMarkupPrice(d);
//        retailMarkup(d) <- calcRetailMarkup(d);
//    }
//}
skipLocalLimitPrice = ABSTRACT VALUE BOOLEAN (UserInvoiceDetail);
WHEN LOCAL FORMS userInvoice GOAFTER retailPrice[UserInvoiceDetail] 
            (SETCHANGED(retailPrice(UserInvoiceDetail d)) OR CHANGED(limitBasePrice(d)) OR CHANGED(limitMarkup(d))) AND //  вообще в событии должно быть это условие, но тогда не всегда срабатывает (см. skype с Vitalur за 10.07) 
             showLimitPrice(d) NOINLINE DO { // AND limitMarkup(d) > 1
    IF limitPrice(d) < retailPrice(d) AND NOT skipLocalLimitPrice(d) THEN {
        retailPrice(d) <- limitPrice(d);
        retailMarkup(d) <- calcRetailMarkup(d);
    }
}

showLimitPrice(InvoicePricing pricing) += showLimitPrice(invoice(pricing));
limitMarkup(InvoicePricingDetail detail) += limitMarkup(invoiceDetail(detail));