MODULE ImportEuroopt;

REQUIRE System, Item, ItemDescription, ItemNutrition, PurchasePack, Competitor;

PRIORITY Competitor;

CLASS MainPage 'Главная страница' {
    edostavka 'https://e-dostavka.by'
}
FORM mainPages
    OBJECTS m = MainPage
    PROPERTIES(m) READONLY staticCaption
    LIST MainPage OBJECT m
;

CLASS EurooptItemGroup 'Группа товаров';
TABLE eurooptItemGroup (EurooptItemGroup);

title 'Заголовок' = DATA STRING[100] (EurooptItemGroup);
mainPage 'Главная страница' = DATA MainPage (EurooptItemGroup);
url 'URL' = DATA STRING[255] (EurooptItemGroup) INDEXED;
in 'Вкл.' = DATA LOCAL BOOLEAN (EurooptItemGroup);
eurooptItemGroup = GROUP AGGR EurooptItemGroup e BY url(e);
delete (EurooptItemGroup g, MainPage m) = g IS EurooptItemGroup AND mainPage(g) == m;

CLASS EurooptItemList 'Список товаров';
TABLE eurooptItemList (EurooptItemList);

eurooptItemGroup = DATA EurooptItemGroup(EurooptItemList) NONULL DELETE;
countItemList 'Количество списков' = GROUP SUM 1 BY eurooptItemGroup(EurooptItemList l);
url 'URL' = DATA STRING[255] (EurooptItemList) INDEXED;
mainPage(EurooptItemList l) = mainPage(eurooptItemGroup(l));
dataIn 'Вкл.' = DATA LOCAL BOOLEAN (EurooptItemList);
in 'Вкл.'(EurooptItemList e) = OVERRIDE dataIn(e), in(eurooptItemGroup(e));
eurooptItemList = GROUP AGGR EurooptItemList e BY url(e); 
delete (EurooptItemList l, MainPage m) = l IS EurooptItemList AND mainPage(l) == m;

CLASS EurooptItem 'Товар';
TABLE eurooptItem (EurooptItem);

eurooptItemList = DATA EurooptItemList(EurooptItem);
countItem 'Количество товаров' = GROUP SUM 1 BY eurooptItemGroup(eurooptItemList(EurooptItem i));
idBarcode 'Штрихкод' (EurooptItem e) = DATA STRING[15](EurooptItem);
noBarcode 'Без штрихкода' (EurooptItem e) = DATA BOOLEAN(EurooptItem);
sku(EurooptItem e) = skuBarcode(idBarcode(e));
name 'Наименование' (EurooptItem e) = name(sku(e));
url 'URL' = DATA STRING[255] (EurooptItem) INDEXED;
mainPage(EurooptItem e) = mainPage(eurooptItemList(e));
dataIn 'Вкл.' = DATA LOCAL BOOLEAN (EurooptItem);
in 'Вкл.'(EurooptItem e) = OVERRIDE dataIn(e), in(eurooptItemList(e));
eurooptItem = GROUP AGGR EurooptItem e BY url(e);
delete (EurooptItem e, MainPage m) = e IS EurooptItem AND mainPage(e) == m;

useTor 'Использовать Tor' = DATA BOOLEAN();
mainPage 'Главная страница' = DATA LOCAL MainPage();
captionMainPage() = staticCaption(mainPage());
ignoreItemGroups 'Коды игнорируемых групп товаров, через запятую' = DATA STRING();

synchronizeItemsFile = DATA LOCAL JSONFILE ();
synchronizeItems 'Синхронизировать списки товаров'  INTERNAL  'lsfusion.erp.region.by.pricelist.competitor.euroopt.SynchronizeItemsEurooptAction' ();

synchronizeItemsJSON 'Синхронизировать списки товаров' () {
    
    LOCAL urlGroup = ISTRING[255](INTEGER);
    LOCAL urlList = ISTRING[255](INTEGER);
    LOCAL urlItem = ISTRING[255](INTEGER);
    LOCAL nameGroup = ISTRING[100](INTEGER);
    
    synchronizeItems();
    
    IMPORT JSON FROM synchronizeItemsFile() TO urlGroup = itemGroupURL, urlList = stepUrl, urlItem = href, nameGroup = itemGroupTitle;
        
    FOR [GROUP SUM 1 BY lower(urlGroup(INTEGER i))](STRING[255] url) AND NOT eurooptItemGroup(url) NEW eig = EurooptItemGroup DO {
        url(eig) <- url;
    }
    FOR INTEGER i == [GROUP MIN INTEGER ii BY lower(urlGroup(ii))](STRING[255] url) AND EurooptItemGroup eig = eurooptItemGroup(url) DO {
        title(eig) <- nameGroup(i);
        mainPage(eig) <- mainPage();
    }
    
    FOR INTEGER i == [GROUP MIN INTEGER ii BY lower(urlList(ii))](STRING[255] url) AND NOT eurooptItemList(url) NEW eil = EurooptItemList DO {
        url(eil) <- urlList(i);
        eurooptItemGroup(eil) <- eurooptItemGroup(urlGroup(i));
    }
    
    FOR [GROUP SUM 1 BY lower(urlItem(INTEGER i))](STRING[255] url) AND NOT eurooptItem(url) NEW ei = EurooptItem DO {
        url(ei) <- url;
    }
    FOR INTEGER i == [GROUP MIN INTEGER ii BY lower(urlItem(ii))](STRING[255] url) AND EurooptItem ei = eurooptItem(url) DO {
        eurooptItemList(ei) <- eurooptItemList(urlList(i));
    }
    eurooptItemList(EurooptItem ei) <- NULL WHERE mainPage(eurooptItemGroup(eurooptItemList(ei))) == mainPage() AND NOT (GROUP SUM 1 IF lower(urlItem(INTEGER ii)) == url(ei));
    APPLY;
}

synchronizeItemsEdostavka 'Синхронизировать списки товаров E-dostavka' () {
    mainPage() <- MainPage.edostavka;
    synchronizeItemsJSON();
}

onlyBarcode 'Импортировать только штрихкоды' = DATA BOOLEAN();

importItemsInfoFile = DATA LOCAL JSONFILE ();
importItemsInfo 'Импортировать информацию о товарах'  INTERNAL  'lsfusion.erp.region.by.pricelist.competitor.euroopt.ImportItemsInfoEurooptAction' ();

importItemsInfoJSON 'Импортировать информацию о товарах' () {

    LOCAL itemURL = ISTRING[255](INTEGER);
    LOCAL idBarcode = ISTRING[15](INTEGER);
    LOCAL noBarcode = BOOLEAN (INTEGER);
    LOCAL captionItem = ISTRING[255](INTEGER);
    LOCAL netWeight = NUMERIC[11,5](INTEGER);
    LOCAL descriptionItem = TEXT (INTEGER);
    LOCAL compositionItem = ISTRING[1000](INTEGER);
    LOCAL proteinsItem = NUMERIC[8,2](INTEGER);
    LOCAL fatsItem = NUMERIC[8,2](INTEGER);
    LOCAL carbohydratesItem = NUMERIC[8,2](INTEGER);
    LOCAL energyItem = NUMERIC[8,2](INTEGER);
    LOCAL manufacturerItem = ISTRING[255](INTEGER);
    LOCAL UOMItem = ISTRING[255](INTEGER);
    LOCAL brandItem = ISTRING[255](INTEGER);
    LOCAL countryItem = ISTRING[255](INTEGER);
    
    importItemsInfo();
    
    IMPORT JSON FROM importItemsInfoFile() TO itemURL = itemURL, idBarcode = idBarcode, noBarcode = noBarcode, captionItem = captionItem, netWeight = netWeight, 
        descriptionItem = descriptionItem, compositionItem = compositionItem, proteinsItem = proteinsItem, fatsItem = fatsItem, carbohydratesItem = carbohydratesItem, 
        energyItem = energyItem, manufacturerItem = manufacturerItem, UOMItem = UOMItem, brandItem = brandItem, countryItem = countryItem;
        
    FOR INTEGER i == [GROUP MIN INTEGER ii BY lower(itemURL(ii))](STRING[255] url) AND EurooptItem ei = eurooptItem(url) DO {
        noBarcode(ei) <- noBarcode(i);
        idBarcode(ei) <- idBarcode(i);
    }
    
    FOR INTEGER i == [GROUP MIN INTEGER ii BY lower(itemURL(ii))](STRING[255] url) AND Item s == sku(eurooptItem(url)) AND NOT onlyBarcode() DO {
        caption(s) <- captionItem(i) WHERE NOT caption(s);
        netWeight(s) <- netWeight(i) WHERE NOT netWeight(s);
        description(s) <- descriptionItem(i) WHERE NOT description(s);
        composition(s) <- compositionItem(i) WHERE NOT composition(s);
        proteins(s) <- proteinsItem(i) WHERE NOT proteins(s);
        fats(s) <- fatsItem(i) WHERE NOT fats(s);
        carbohydrates(s) <- carbohydratesItem(i) WHERE NOT carbohydrates(s);
        energy(s) <- energyItem(i) WHERE NOT energy(s);
        manufacturer(s) <- manufacturerName(manufacturerItem(i)) WHERE NOT manufacturer(s);
        UOM(s) <- UOMName(UOMItem(i)) WHERE NOT UOM(s);
        brand(s) <- brandName(brandItem(i)) WHERE NOT brand(s);
        country(s) <- countryName(countryItem(i)) WHERE NOT country(s);
    }
    APPLY;
}

importItemsInfoEdostavka 'Импортировать информацию о товарах E-dostavka' () {
    mainPage() <- MainPage.edostavka;
    importItemsInfoJSON();
}

importImages 'Импортировать изображения' = DATA BOOLEAN();
importPrices 'Импортировать цены' = DATA BOOLEAN();

importImageFile = DATA LOCAL JSONFILE ();
importPriceFile = DATA LOCAL JSONFILE ();
importImageAndPrice 'Импортировать изображения и цены товаров'  INTERNAL  'lsfusion.erp.region.by.pricelist.competitor.euroopt.ImportImageAndPriceEurooptAction' ();

itemUrlEuroopt = DATA LOCAL STRING ();
getItemUrlEuroopt 'Получить ссылку по штрихкоду' (STRING barcode) INTERNAL  'lsfusion.erp.region.by.pricelist.competitor.euroopt.GetItemUrlEurooptAction';

eurooptStock = DATA Stock();
nameEurooptStock 'Эталонный склад для поиска ссылок на товары'() = name(eurooptStock());

getItemsUrls 'Найти товары по штрихкодам'() {
    IF eurooptStock() THEN NEWSESSION {
    
        mainPage() <- MainPage.edostavka;
        
        LOCAL countOld = INTEGER ();
        countOld() <- (GROUP SUM 1 IF idBarcode(EurooptItem ei) == id(Barcode b) AND currentBalance(sku(b), eurooptStock()));
        
        FOR id(Barcode b) AND currentBalance(sku(b), eurooptStock()) AND NOT (GROUP SUM 1 IF idBarcode(EurooptItem ei) == id(b)) DO {
            getItemUrlEuroopt(id(b));
            logToFile('import', (CONCAT ' ', 'getItemUrlEuroopt', id(b), itemUrlEuroopt()));
            IF itemUrlEuroopt() THEN {
                noBarcode(EurooptItem ei) <- NULL;
                idBarcode(EurooptItem ei) <- id(b) WHERE url(ei) == itemUrlEuroopt();
            }
        }
        
        MESSAGE CONCAT ', ', 'Было: ' + countOld(),  'Новых: ' + (GROUP SUM 1 IF CHANGED(idBarcode(EurooptItem ei))) NOWAIT;
        APPLY;
    }
}

importPricesJSON 'Импортировать цены товаров' () {
    
    NEWSESSION NESTED LOCAL {

        LOCAL idPriceList = ISTRING[255](INTEGER);
        LOCAL idOperation = ISTRING[100](INTEGER);
        LOCAL idUserPriceListDetail = ISTRING[100](INTEGER);
        LOCAL idBarcodeSku = ISTRING[15](INTEGER);
        LOCAL idDataPriceListType = ISTRING[100](INTEGER);
        LOCAL namePriceListType = ISTRING[100](INTEGER);
        LOCAL pricePriceListDetail = NUMERIC[16,5](INTEGER);
        LOCAL action = BOOLEAN (INTEGER);
        
        IMPORT JSON FROM importPriceFile() TO idPriceList = idPriceList, idOperation = idOperation, idUserPriceListDetail = idUserPriceListDetail, idBarcodeSku = idBarcodeSku, 
            idDataPriceListType = idDataPriceListType, namePriceListType = namePriceListType, pricePriceListDetail = pricePriceListDetail, action = action;
         
        FOR [GROUP SUM 1 BY namePriceListType(INTEGER i)](STRING[100] name) AND NOT competitor(name) DO NEW c = Competitor {
            name(c) <- name;
        }
           
        FOR [GROUP SUM 1 BY idPriceList(INTEGER i)](STRING[15] id) AND NOT priceList(id) DO NEW p = PriceList {
            id(p) <- id;
        }
        
        FOR [GROUP SUM 1 BY idUserPriceListDetail(INTEGER i)](STRING[15] id) AND NOT priceListDetail(id) DO NEW d = PriceListDetail {
            id(d) <- id;
        }
        
        FOR INTEGER i = [GROUP MIN INTEGER ii BY priceListDetail(idUserPriceListDetail(ii))](PriceListDetail d) DO {
            sku(d) <- skuBarcode(idBarcodeSku(i));
            priceList(d) <- priceList(idPriceList(i));
        }
        
        FOR [GROUP SUM 1 BY priceList(idPriceList(INTEGER i)), competitor(namePriceListType(i))](PriceList p, Competitor c) DO {
            in(p, c) <- TRUE;
        }
        
        FOR imported(INTEGER i) AND PriceListDetail d = priceListDetail(idUserPriceListDetail(i)) AND Competitor c = competitor(namePriceListType(i)) DO {
            IF action(i) THEN {
                promotionPrice(d, c) <- pricePriceListDetail(i);
            }
            ELSE {
                price(d, c) <- pricePriceListDetail(i);
            }
        }
        
        APPLY;
    }
}

importImagesJSON 'Импортировать изображения товаров' () {
    
    NEWSESSION NESTED LOCAL {
        LOCAL image = TEXT (INTEGER);
        LOCAL idBarcode = ISTRING[15](INTEGER);
        
        IMPORT JSON FROM importImageFile() TO image = image, idBarcode = idBarcode;
            
        FOR INTEGER i == [GROUP MIN INTEGER ii BY idBarcode(ii)](STRING[15] id) AND Item s == skuBarcode(id) DO {
            
            image(s) <- decode(image(i),'base64') WHERE NOT image(s);
        }
        APPLY;
    }
}

importImageAndPriceEdostavka 'Импортировать изображения и цены товаров E-dostavka' () {
    mainPage() <- MainPage.edostavka;

    importImageAndPrice();

    IF importImages() THEN {
        importImagesJSON();
    }
    
    IF importPrices() THEN {
        importPricesJSON();
    }
}

idItemGroup 'Код группы товаров' (Barcode barcode) = id(skuGroup(sku(barcode)));

FORM exportEuroopt 'Экспорт товаров'
    OBJECTS mp = MainPage PANEL SUBREPORT
    OBJECTS i = EurooptItem
    PROPERTIES READONLY titleItemGroup 'Заголовок' = title(eurooptItemGroup(eurooptItemList(i))), 
                        urlItemGroup 'URL группы' = url(eurooptItemGroup(eurooptItemList(i))),
                        urlItemList 'URL списка' = url(eurooptItemList(i)),
                        url = url(i),
                        noBarcode 'Без штрихкода' = 1 IF noBarcode(i),
                        idBarcode = idBarcode(i)
    ORDERS urlItemGroup, urlItemList, url
    FILTERS mainPage(i) == mp
;

exportEdostavka 'Экспорт товаров E-dostavka (xls)' ()  { 
    PRINT exportEuroopt OBJECTS mp = MainPage.edostavka XLS;
}

importEuroopt 'Импорт товаров (xls)' ()  { 
    LOCAL NESTED titleItemGroup = STRING[100] (INTEGER);
    LOCAL NESTED urlItemGroup = STRING[255] (INTEGER);
    LOCAL NESTED urlItemList = STRING[255] (INTEGER);
    LOCAL NESTED url = STRING[255] (INTEGER);
    LOCAL NESTED noBarcode = STRING[1] (INTEGER);
    LOCAL NESTED idBarcode = STRING[15] (INTEGER);
    
    INPUT f = EXCELFILE DO { 
        DELETE EurooptItem e WHERE e IS EurooptItem;
        DELETE EurooptItemList e WHERE e IS EurooptItemList;
        DELETE EurooptItemGroup e WHERE e IS EurooptItemGroup;
        apply();
           
        IMPORT XLS NOHEADER
                      FROM f AS EXCELFILE TO titleItemGroup=B, urlItemGroup=C, urlItemList=D, url=E, noBarcode=F, idBarcode=G;
                      
        FOR INTEGER i == [GROUP MIN INTEGER ii IF ii >= 2 BY lower(urlItemGroup(ii))](STRING[255] url) AND NOT eurooptItemGroup(url) NEW eig = EurooptItemGroup DO {
            url(eig) <- urlItemGroup(i);
            title(eig) <- titleItemGroup(i);
            mainPage(eig) <- mainPage();
        }
        apply();
        
        FOR INTEGER i == [GROUP MIN INTEGER ii IF ii >= 2 BY lower(urlItemList(ii))](STRING[255] url) AND NOT eurooptItemList(url) NEW eil = EurooptItemList DO {
            url(eil) <- urlItemList(i);
            eurooptItemGroup(eil) <- eurooptItemGroup(urlItemGroup(i));
        }
        apply();
        
        FOR INTEGER i == [GROUP MIN INTEGER ii IF ii >= 2 BY lower(url(ii))](STRING[255] url) AND NOT eurooptItem(url) NEW ei = EurooptItem DO {
            url(ei) <- url(i);
            eurooptItemList(ei) <- eurooptItemList(urlItemList(i));
            noBarcode(ei) <- TRUE IF noBarcode(i) == '1';
            idBarcode(ei) <- idBarcode(i);
        }
        apply();
    }
}

importEdostavka 'Импорт товаров E-dostavka (xls)' ()  { 
    mainPage() <- MainPage.edostavka;
    importEuroopt();
}

resetSelection() {
    in(EurooptItemGroup g) <- NULL;
    dataIn(EurooptItemList g) <- NULL;
    dataIn(EurooptItem g) <- NULL;
}

EXTEND FORM integrationData
    OBJECTS mp = MainPage ON CHANGE resetSelection() PANEL, eig = EurooptItemGroup, eil = EurooptItemList, ei = EurooptItem
    PROPERTIES(mp) staticCaption SELECTOR
    PROPERTIES() SHOWIF (mp == MainPage.edostavka) synchronizeItemsEdostavka, importItemsInfoEdostavka, importImageAndPriceEdostavka, exportEdostavka, importEdostavka, nameEurooptStock, getItemsUrls             
    PROPERTIES() onlyBarcode, importImages, importPrices, useTor, ignoreItemGroups
    PROPERTIES(eig) READONLY in CHANGEABLE, title, url, countItemList, countItem
    PROPERTIES(eil) in, url READONLY
    PROPERTIES(ei) READONLY in CHANGEABLE, url, noBarcode, idBarcode, name
    FILTERS mainPage(eig) == mp, mainPage(eurooptItemGroup(eil)) == mp
    FILTERGROUP group
        FILTER 'По группе' eurooptItemGroup(eil) == eig DEFAULT     
    FILTERGROUP list
        FILTER 'По списку' eurooptItemList(ei) == eil DEFAULT        
        FILTER 'По главноей странице' mainPage(eurooptItemList(ei)) == mp       
;
DESIGN integrationData {
    pane {
        NEW euroopt {
            caption = 'Евроопт';
            MOVE PROPERTY(staticCaption(mp)) {
                caption = 'Главная страница';
            }
            MOVE PROPERTY(useTor());          
            MOVE PROPERTY(ignoreItemGroups());          
            MOVE PROPERTY(synchronizeItemsEdostavka());
            NEW items {
                caption = 'Импорт товаров';
                MOVE PROPERTY(onlyBarcode());      
                MOVE PROPERTY(importItemsInfoEdostavka());                             
                MOVE PROPERTY(nameEurooptStock());                             
                MOVE PROPERTY(getItemsUrls());                             
            }
            NEW prices {
                caption = 'Импорт изображений и цен';
                MOVE PROPERTY(importImages());
                MOVE PROPERTY(importPrices());
                MOVE PROPERTY(importImageAndPriceEdostavka());
            }
            NEW xls {
                MOVE PROPERTY(exportEdostavka());
                MOVE PROPERTY(importEdostavka());
            }
            NEW eItems {
                type = SPLITH;
                fill = 1;
                NEW left {
                    type = SPLITV;
                    MOVE BOX(eig);
                    MOVE BOX(eil);
                }
                MOVE BOX(ei);
            }
        }
    }
}