MODULE PurchasePriceLimitFixed;

REQUIRE PricingPurchase, PriceList;

NAMESPACE Purchase;

maxLimitPriceListType = DATA DataPriceListType();
nameFixedLimitPriceListType 'Вид цены для ограничений по максимальным ценам' = name(maxLimitPriceListType());

minLimitPriceListType = DATA DataPriceListType();
nameMinLimitPriceListType 'Вид цены для ограничений по минимальным ценам' = name(minLimitPriceListType());

EXTEND FORM options
    PROPERTIES() nameFixedLimitPriceListType, nameMinLimitPriceListType 
;

DESIGN options {
    pricings {
        MOVE PROPERTY(nameFixedLimitPriceListType());
        MOVE PROPERTY(nameMinLimitPriceListType());
    }
}

maxLimitPrice 'Максимальная цена' (UserInvoiceDetail d) = prevPriceA(maxLimitPriceListType(), sku(d), customerStock(d), pricingDateTime(d));

skipMaxMinLimitPrice = ABSTRACT VALUE BOOLEAN (UserInvoiceDetail);
WHEN LOCAL FORMS userInvoice GOAFTER retailPrice[UserInvoiceDetail] 
            SETCHANGED(retailPrice(UserInvoiceDetail d))
            AND maxLimitPrice(d) < retailPrice(d) AND NOT skipMaxMinLimitPrice(d)  DO {
    retailPrice(d) <- maxLimitPrice(d);
    retailMarkup(d) <- calcRetailMarkup(d);
}

minLimitPrice 'Минимальная цена' (UserInvoiceDetail d) = prevPriceA(minLimitPriceListType(), sku(d), customerStock(d), pricingDateTime(d));
WHEN LOCAL FORMS userInvoice GOAFTER retailPrice[UserInvoiceDetail] 
            SETCHANGED(retailPrice(UserInvoiceDetail d))
            AND minLimitPrice(d) > retailPrice(d) AND NOT skipMaxMinLimitPrice(d) DO {
    retailPrice(d) <- minLimitPrice(d);
    retailMarkup(d) <- calcRetailMarkup(d);
}

EXTEND FORM userInvoice
    PROPERTIES(pd) SHOWIF createPricing[Invoice](i) minLimitPrice, maxLimitPrice
;