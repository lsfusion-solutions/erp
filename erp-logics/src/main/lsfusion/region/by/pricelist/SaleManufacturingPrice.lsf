MODULE SaleManufacturingPrice;

REQUIRE SaleInvoice, PriceListLedger, OrderManufacturingPrice, PurchaseManufacturingPrice;

NAMESPACE Sale;

//заказ
@defineDocumentInterfaceProperty (order, showManufacturingPrice, 'Цена изготовителя');

// -- Операция
@defineOperationProperty(showManufacturingPrice, 'Цена изготовителя', showContainer);
@deriveDocumentOperationProperty(UserOrder, showManufacturingPrice);

@defineDocumentInterfaceDetailPriceCustomPrefix(orderDetail, manufacturing, ' изготовителя');
manufacturingPrice[Order.OrderDetail](OrderDetail d) += manufacturingPrice(d);
@defineDocumentInterfaceDetailInclVATCustomPrefix (orderDetail);
includeVAT(UserOrderDetail detail) <-  fixedPrice(sku(detail)) WHEN CHANGED (sku(detail));
@defineDocumentInterfaceDetailMPVATCustomPrefix (orderDetail, manufacturing, );

WHEN LOCAL (CHANGED(supplierStock(UserOrderDetail detail)) OR              
            (CHANGED(dateTime(detail)) AND NOT isPosted(detail)) OR
            CHANGED(batch(detail)) OR SET(showManufacturingPrice(detail)))
            AND batch(detail) AND NOT CHANGED(manufacturingPrice(detail)) DO {
    manufacturingPrice (detail)  <- round2(prevPriceB(SystemLedgerPriceListType.manufacturingPriceStockPriceListType,
                                                      batch(detail),
                                                      supplierStock(detail),
                                                      dateTime(detail)));
}

WHEN LOCAL (CHANGED(supplierStock(UserOrderDetail detail)) OR              
            (CHANGED(dateTime(detail)) AND NOT isPosted(detail)) OR
            DROPPED(batch(detail)) OR CHANGED(sku(detail)) OR SET(showManufacturingPrice(detail)))
            AND NOT batch(detail) AND NOT CHANGED(manufacturingPrice(detail)) DO {
    manufacturingPrice (detail) <- round2(prevPriceB(SystemLedgerPriceListType.manufacturingPriceStockPriceListType,
                                                     sku(detail),
                                                     supplierStock(detail),
                                                     dateTime(detail)));
}

wholesaleMarkup 'Оптовая надбавка (от цены изг.)' (OrderDetail detail) = NUMERIC[17,5](round2([ ((X*100.0)/Y-100.0)](price(detail),manufacturingMVATPrice(detail) IF manufacturingMVATPrice(detail) != 0.0)));
wholesaleMarkup 'Оптовая надбавка (от цены изг.)' (UserOrderDetail detail) = round2([ ((X*100.0)/Y-100.0)](price(detail),manufacturingMVATPrice(detail) IF manufacturingMVATPrice(detail) != 0.0 ));
wholesaleMarkup(OrderDetail d) += wholesaleMarkup(d);

@defineDocumentInterfaceDetailDataSumPrefix (order, manufacturing, ' изготовителя'); // объявляем сумму изготовителя
@deriveDocumentDetailSumPrefix(userOrder, manufacturing, currency, quantity); // записываем сумму изготовителя

@defineDocumentInterfaceHeaderItemSum (order, manufacturing, manufacturing);

overChangeManufacturingPriceUser  ABSTRACT LIST ( OrderDetail);
changeManufacturingPriceUser (OrderDetail detail)  { 
    INPUT n = NUMERIC[16,4] DO {
        manufacturingPrice[UserOrderDetail](detail) <- n;   
        overChangeManufacturingPriceUser(detail);
    }
}

EXTEND FORM userOrder
    PROPERTIES(o)  showManufacturingPrice
    PROPERTIES(d)  SHOWIF showManufacturingPrice(o) AFTER invoiceSum(d)  
                   manufacturingPrice ON CHANGE changeManufacturingPriceUser(d), wholesaleMarkup READONLY,
                   includeVAT, manufacturingSum

;
DESIGN userOrder {
    headerExtraParams {
        NEW headerManufacturing {
            caption = 'Цена изготовителя';
            MOVE PROPERTY(showManufacturingPrice(o));
        }
    }
}

EXTEND FORM orders
    PROPERTIES(d) READONLY  SHOWIF showManufacturingPrice(o) AFTER invoiceSum(d) 
                  manufacturingPrice, wholesaleMarkup, includeVAT, manufacturingSum
;

//накладная
@defineDocumentInterfaceProperty (invoice, showManufacturingPrice, 'Цена изготовителя');

// -- Операция
@deriveDocumentOperationProperty(UserInvoice, showManufacturingPrice);

@defineDocumentInterfaceDetailPriceCustomPrefix(invoiceDetail, manufacturing, ' изготовителя');
@defineDocumentInterfaceDetailInclVATCustomPrefix (invoiceDetail);
includeVAT(UserInvoiceDetail detail) <-  fixedPrice(sku(detail)) WHEN CHANGED (sku(detail));
@defineDocumentInterfaceDetailMPVATCustomPrefix (invoiceDetail, manufacturing, );

// Устанавливаем цену изготовителя из регистра
updateManufacturingPrice 'Изменить цену изготовителя' = DATA BOOLEAN (UserInvoice);
updateManufacturingPrice = updateManufacturingPrice(userInvoice(UserInvoiceDetail d));

disableUpdateManufacturingPrice = ABSTRACT BOOLEAN (UserInvoiceDetail);
WHEN LOCAL (CHANGED(supplierStock(UserInvoiceDetail detail)) OR              
            (CHANGED(dateTime(detail)) AND NOT isPosted(detail)) OR
            CHANGED(batch(detail)) OR DROPPED(updateManufacturingPrice(detail)) OR SET(showManufacturingPrice(detail)))
            AND NOT updateManufacturingPrice(detail) AND batch(detail) AND NOT CHANGED(manufacturingPrice(detail)) AND NOT disableUpdateManufacturingPrice(detail) DO {
    manufacturingPrice (detail) <- round2(prevPriceB(SystemLedgerPriceListType.manufacturingPriceStockPriceListType,
                                                     batch(detail),
                                                     supplierStock(detail),
                                                     dateTime(detail)));
}

WHEN LOCAL (CHANGED(supplierStock(UserInvoiceDetail detail)) OR              
            (CHANGED(dateTime(detail)) AND NOT isPosted(detail)) OR
            DROPPED(batch(detail)) OR DROPPED(updateManufacturingPrice(detail)) OR CHANGED(sku(detail)) OR SET(showManufacturingPrice(detail)))
            AND NOT updateManufacturingPrice(detail) AND NOT batch(detail) AND NOT CHANGED(manufacturingPrice(detail)) AND NOT disableUpdateManufacturingPrice(detail) DO {
    manufacturingPrice (detail) <- round2(prevPriceB(SystemLedgerPriceListType.manufacturingPriceStockPriceListType,
                                                     sku(detail),
                                                     supplierStock(detail),
                                                     dateTime(detail)));
}

WHEN LOCAL SETCHANGED(updateManufacturingPrice(UserInvoiceDetail detail)) AND NOT CHANGED(manufacturingPrice(detail)) AND NOT disableUpdateManufacturingPrice(detail) DO {
    manufacturingPrice (detail) <- price(detail);
}
                                                                                          
@defineOperationProperty(updateManufacturingPrice, 'Изменять цену изготовителя', showContainer);
@deriveDocumentOperationProperty(UserInvoice, updateManufacturingPrice);

skipCalcWholesaleMarkup = ABSTRACT BOOLEAN (InvoiceDetail);

wholesaleMarkup 'Оптовая надбавка (от цены изг.)' (InvoiceDetail detail) = round2([ (X/Y-1)*100](price(detail),manufacturingMVATPrice(detail) IF manufacturingMVATPrice(detail)!= 0.0)) IF NOT skipCalcWholesaleMarkup(detail);
wholesaleMarkup 'Оптовая надбавка (от цены изг.)' (UserInvoiceDetail detail) = round2([ (X/Y-1)*100](price(detail),manufacturingMVATPrice(detail) IF manufacturingMVATPrice(detail)!= 0.0))  IF NOT skipCalcWholesaleMarkup(detail);;

@defineDocumentInterfaceDetailDataSumPrefix (invoice, manufacturing, ' изготовителя'); // объявляем сумму изготовителя
@deriveDocumentDetailSumPrefix(userInvoice, manufacturing, currency, quantity); // записываем сумму изготовителя

@defineDocumentInterfaceHeaderItemSum (invoice, manufacturing, manufacturing);

EXTEND FORM userInvoice
    PROPERTIES(i)  showManufacturingPrice, updateManufacturingPrice
    PROPERTIES(d)  SHOWIF showManufacturingPrice(i) AFTER invoiceSum(d)  
                   manufacturingPrice, wholesaleMarkup READONLY, includeVAT, manufacturingSum

;
DESIGN userInvoice {
    headerExtraParams {
        NEW headerManufacturing {
            caption = 'Цена изготовителя';
            MOVE PROPERTY(showManufacturingPrice(i));
            MOVE PROPERTY(updateManufacturingPrice(i));
        }
    }
}

EXTEND FORM invoices
    PROPERTIES(d) READONLY  SHOWIF showManufacturingPrice(i) AFTER invoiceSum(d) 
                  manufacturingPrice, wholesaleMarkup, includeVAT, manufacturingSum
;

//overPricingPricePricingDetail(detail) += manufacturingPriceInvoiceDetail(invoiceDetailInvoicePricingDetail(detail));
//overPricingPriceUserInvoiceDetail(detail) += manufacturingPriceUserInvoiceDetail(detail);
//
//manufacturingPricePricingDetail(detail) += manufacturingPriceInvoiceDetail(invoiceDetailInvoicePricingDetail(detail));

// цены в подборе
@extendFormDocumentPriceSku(userOrder, manufacturingPriceStockPriceListType, supplierStock, ' изготовителя', userOrder, o, showManufacturingPrice);

showBatchManufacturingPrice (UserOrder o) = showBatch(o) AND showManufacturingPrice(o);
@extendFormDocumentPriceBatch(userOrder, manufacturingPriceStockPriceListType, supplierStock, ' изготовителя', userOrder, o, showBatchManufacturingPrice);

@extendFormDocumentPriceSku(userInvoice, manufacturingPriceStockPriceListType, supplierStock, ' изготовителя', userInvoice, i, showManufacturingPrice);

showBatchManufacturingPrice (UserInvoice i) = showBatch(i) AND showManufacturingPrice(i);
@extendFormDocumentPriceBatch(userInvoice, manufacturingPriceStockPriceListType, supplierStock, ' изготовителя', userInvoice, i, showBatchManufacturingPrice);