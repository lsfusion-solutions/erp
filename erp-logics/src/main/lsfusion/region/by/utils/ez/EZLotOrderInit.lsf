MODULE EZLotOrderInit;

REQUIRE LotOrderInitBy, EZLotOrder, EZLotInit, EZPurchaseInvoice;

NAMESPACE EZ;

//'Отчёт о маркировке'
lotInit  = DATA LOCAL LotInit ();
gtin  = DATA LOCAL STRING[14] ();
isSend 'Отправлен' (Lot l) = status(l) == LotStatus.MARKED;

select 'Отм.' = DATA LOCAL NESTED BOOLEAN (LotInitDetail);
select 'Отм.' (Lot l) = TRUE IF (GROUP SUM 1 IF quantity(LotInitDetail d, l) AND select(d));

filterLot (Lot l) = (GROUP SUM quantity(LotInitDetail d, l) IF lotInit() == lotInit(d)) > 0 AND gtin() == gtin(l) AND NOT isSend(l) AND
    (NOT (GROUP SUM 1 IF select(LotInitDetail d)) OR select(l));
    
exception 'Сообщение' = DATA TEXT (LotInit);
handleException (LotInit i, FILE exception) {
    logToFile('ez', messageCaughtException());
    
    logToFile('ez', exception);
    fileToString(exception);
    MESSAGE CONCAT ' ', 'Ошибка при обращении к ЭЗ', messageCaughtException();

    NEWSESSION NESTED (messageCaughtException, resultString) {
        exception(i) <- CONCAT ', ', messageCaughtException(), resultString();
        APPLY;
    }
}

EXTEND FORM lotInits
    PROPERTIES(i) READONLY exception PANEL SHOWIF exception(i)
;
DESIGN lotInits {
    tabbedPane {
        NEW ez {
            caption = 'Электронный знак';
            MOVE PROPERTY(exception(i)) { panelCaptionVertical = TRUE; fill = 1; };
        }
    }
}

getStatusReport 'Получить статус' (ReportEZ r) {
    EXPORT JSON FROM report_id  = id(r);         
              
    LOCAL result = FILE();   
    
    exception(lotInit(r)) <- NULL;    
    
    TRY {
        EXTERNAL HTTP POST urlEZ() + '/v2/reports' HEADERS ezHeadersLotOrder PARAMS exportFile() TO result;
    } CATCH {
        
        handleException(lotInit(r), result());
        RETURN;
    }       
    fileToString(result());
    //MESSAGE resultString();
    
    LOCAL statusCode = INTEGER ();
    
    FOR iterate(INTEGER i, 1, jsonAttributeCount(resultString())) AND 'status' == jsonAttributeKey(resultString(),i) DO {
        LOCAL subJson1 = STRING (); 
        subJson1() <- STRING(jsonAttributeValue(resultString(),i));        
                
        FOR iterate(INTEGER k, 1, jsonAttributeCount1(subJson1())) AND 'code' == jsonAttributeKey1(subJson1(),k) DO {
            statusCode() <- INTEGER(STRING(jsonAttributeValue1(subJson1(),k))); 
        }
    };   
    status(r) <- statusReport(statusCode());
    
    APPLY;
}    

getStatusReport 'Получить статус по всем' (LotInit i) {
    FOR ReportEZ r IF lotInit(r) == i DO {
        getStatusReport(r);
    }
}
    
FORM addMark 'Отчет о маркировке'

    PROPERTIES group = codeGroup(type(lotInit()))

    OBJECTS labels = Lot
    PROPERTIES (labels) code 
    FILTERS filterLot(labels)
;    

nameSku(LotInit i) = nameSku(GROUP MAX LotInitDetail d IF lotInit(d) == i);

getLabesTypes 'Типы кодов' (LotInit i) {          
    LOCAL result = FILE();       
    exception(i) <- NULL;    
    
    TRY { 
        EXTERNAL HTTP GET urlEZ() + '/labels/types' HEADERS ezHeadersLotOrder TO result;
    } CATCH {
        handleException(i, result());
        RETURN;
    }       
    fileToString(result());
    MESSAGE resultString();
}

code 'Код раздела товаров' = DATA LOCAL STRING ();

getParameters 'Получить параметры' (LotInit i) {
          
    LOCAL result = FILE();   
    
    exception(i) <- NULL;    
    
    TRY {
  //      EXTERNAL HTTP POST urlEZ() + '/catalogs/10002' HEADERS ezHeadersLotOrder TO result; // Обувь
         EXTERNAL HTTP POST urlEZ() + '/catalogs/' + code()  HEADERS ezHeadersLotOrder TO result; // 
    } CATCH {
        handleException(i, result());
        RETURN;
    }       
    fileToString(result());
    MESSAGE resultString();
}    

getCatalogs 'Разделы каталога товаров' (LotInit i) {
          
    LOCAL result = FILE();
    
    exception(i) <- NULL;    
    
    TRY {
  //      EXTERNAL HTTP POST urlEZ() + '/catalogs/10002' HEADERS ezHeadersLotOrder TO result; // Обувь
         EXTERNAL HTTP POST urlEZ() + '/catalogs/'  HEADERS ezHeadersLotOrder TO result; // 
    } CATCH {
        handleException(i, result());
        RETURN;
    }       
    fileToString(result());
    MESSAGE resultString();        
} 

overGtin = ABSTRACT STRING[14] (LotInitDetail);

gtin 'GTIN' (LotInitDetail d) = OVERRIDE overGtin(d), STRING[14](lpad(gtin(sku(d)), 14, '0'));

lastLotInitDetail(LotInit i, STRING[14] gtin) = GROUP LAST LotInitDetail d IF i == lotInit(d) AND gtin == gtin(d) ORDER d;

registrationNumberDeclaration(LotInit i, STRING[14] gtin) = OVERRIDE registrationNumberDeclaration(i), registrationNumberDeclaration(lotOrderDetail(lastLotInitDetail(i, gtin)));
dateDeclaration(LotInit i, STRING[14] gtin) = OVERRIDE dateDeclaration(i), dateDeclaration(lotOrderDetail(lastLotInitDetail(i, gtin)));
sidOrigin2CountryDeclaration(LotInit i, STRING[14] gtin)= OVERRIDE sidOrigin2CountryDeclaration(i), sidOrigin2CountryDeclaration(lotOrderDetail(lastLotInitDetail(i, gtin)));
sidCountryDeclaration(LotInit i, STRING[14] gtin)= OVERRIDE sidCountryDeclaration(i), sidCountryDeclaration(lotOrderDetail(lastLotInitDetail(i, gtin)));

quantitySendLot 'Кол-во отправленных марок' (LotInitDetail d) = GROUP SUM quantity(d, Lot l) * count(l) IF isSend(l);
isSend 'Отправлен' (LotInitDetail d) = quantitySendLot(d) == quantityLot(d) AND quantitySendLot(d);
quantitySendLot 'Кол-во марок' (LotInit i) = GROUP SUM quantitySendLot(LotInitDetail d) IF lotInit(d) = i;
isSend 'Отправлен' (LotInit i) = quantitySendLot(i) == quantityLot(i) AND quantityLot(i);

// !!!смотреть список параметров и коды к ним по действию getParameters
// !!! getParameters брать только на проде api
// 101 Цель маркировки
// 100 Страна экспорта
// 97 Дата выпуска товаров по декларации
// 96 Регистрационный номер декларации на товары
// 95 Способ маркировки (полиграфическая защита)   
// 93 Тип производственного заказа 

markTargetProd () = '101';
markTargetTest () = '137';
markTarget 'Цель маркировки' () = IF testWebService() THEN markTargetTest() ELSE markTargetProd();

exportCountryProd () = '100';
exportCountryTest () = '130';
exportCountry 'Страна экспорта' () = IF testWebService() THEN exportCountryTest() ELSE exportCountryProd();

declarationReleaseDateProd () = '97';
declarationReleaseDateTest () = '127';
declarationReleaseDate 'Дата выпуска товаров по декларации' = IF testWebService() THEN declarationReleaseDateTest() ELSE declarationReleaseDateProd();

declarationNumberProd () = '96';
declarationNumberTest ()= '126';
declarationNumber 'Регистрационный номер декларации на товары' = IF testWebService() THEN declarationNumberTest() ELSE declarationNumberProd();

markMethodProd () = '95';
markMethodTest () = '124';
markMethod 'Способ маркировки (полиграфическая защита)' = IF testWebService() THEN markMethodTest() ELSE markMethodProd();

orderTypeProd () = '93';
orderTypeTest () = '123';
orderType 'Тип производственного заказа' = IF testWebService() THEN orderTypeTest() ELSE orderTypeTest();

// разрешено формировать отчтет только по одному GTIN
addMark 'Отправить отчет'(LotInit i, STRING[14] gtin) {
    lotInit() <- i;
    gtin() <- gtin;
    
    // обновление статусов перед отправкой
    FOR filterLot (Lot l) DO getStatus(l);           
    
    IF (NOT GROUP SUM 1 IF filterLot (Lot l)) THEN {
        RETURN;
    }
    
    EXPORT addMark JSON;
    // Дополнительная обработка JSON к виду { "labels": ["01048113090167242128v8LZVn936rXO", "001048113090167242128v8LZVn936rXO"]}   
    LOCAL strResult = STRING ();
    fileToString(exportFile());   
//    strResult() <- replace(STRING(resultString()),'"code":[{"code":','"labels":[');
    strResult() <- replace(STRING(resultString()),'"code":','');    
    strResult() <- replace(strResult(),'\{','');
    strResult() <- replace(strResult(),'\}','');
    
    // add "params"
    LOCAL listParams = STRING ();
    
    listParams() <- '';
    
    // !!!смотреть список параметров и коды к ним по действию getParameters
    // !!! getParameters брать только на проде api
    // 101 Цель маркировки
    // 100 Страна экспорта
    // 97 Дата выпуска товаров по декларации
    // 96 Регистрационный номер декларации на товары
    // 95 Способ маркировки (полиграфическая защита)   
    // 93 Тип производственного заказа 
    CASE
        // тестовые
//        listParams() <- listParams() + ' \{ "code": 137, "value": "' + codeMode(i) + '"\}';              
//        IF codeProductionType(i) THEN listParams() <- listParams() + ', \{ "code": 123, "value": "' + codeProductionType(i) + '"\}'; 
//        IF codeMethod(i) THEN listParams() <- listParams() + ', \{ "code": 124, "value": "' + codeMethod(i) + '"\}';           
                    
        WHEN mode(i) == LotInitMode.PRODUCTION THEN {            
            listParams() <- listParams() + ' \{ "code": ' + markTarget() + ', "value": "' + codeMode(i) + '"\}';              
            IF codeProductionType(i) THEN listParams() <- listParams() + ', \{ "code": ' + orderType() + ', "value": "' + codeProductionType(i) + '"\}'; 
            IF codeMethod(i) THEN listParams() <- listParams() + ', \{ "code": ' + markMethod() + ', "value": "' + codeMethod(i) + '"\}';            
        }
        WHEN mode(i) == LotInitMode.IMPORT_ THEN {            
            listParams() <- listParams() + '  \{ "code": ' + markTarget() + ', "value": "' + codeMode(i) + '"\}'; 
            IF codeMethod(i) THEN listParams() <- listParams() + ', \{ "code": ' + markMethod() + ', "value": "' + codeMethod(i) + '"\}'; 
            
            IF sidCountryDeclaration(i, gtin) THEN {
                listParams() <- listParams() + ', \{ "code": ' + exportCountry() + ', "value": "' + sidCountryDeclaration(i, gtin) + '"\}';
            } ELSE {
                MESSAGE 'Не задана страна экспорта'NOWAIT;
            }
            
            IF registrationNumberDeclaration(i, gtin) THEN {
                listParams() <- listParams() + ', \{ "code": ' + declarationNumber() + ', "value": "' + registrationNumberDeclaration(i, gtin) + '"\}';
            } ELSE {
                MESSAGE 'Не задан номер декларации' NOWAIT;
            }
            
            IF toChar(dateDeclaration(i, gtin),'YYYY-MM-DD') THEN {
                listParams() <- listParams() + ', \{ "code": ' + declarationReleaseDate() + ', "value": "' + toChar(dateDeclaration(i, gtin),'YYYY-MM-DD') + '"\}';      
            } ELSE {
                MESSAGE 'Не задана дата декларации' NOWAIT;
            }       

            IF NOT sidCountryDeclaration(i, gtin) OR NOT registrationNumberDeclaration(i, gtin) OR NOT toChar(dateDeclaration(i, gtin),'YYYY-MM-DD') THEN
                RETURN;
        }
        WHEN mode(i) == LotInitMode.COMMISSION THEN {
            listParams() <- listParams() + ' \{ "code": ' + markTarget() + ', "value": "' + codeMode(i) + '"\}';  
        }
        WHEN mode(i) == LotInitMode.REMARK THEN {
            listParams() <- listParams() + ' \{ "code": ' + markTarget() + ', "value": "' + codeMode(i) + '"\}';     
        };
        
    strResult() <- '\{' + strResult() + ', "params": [' + listParams() + ']' + '\}';
     
    stringToFile(strResult());
      
    LOCAL result = FILE();      

    exception(i) <- NULL;   
    
    TRY {
        EXTERNAL HTTP POST urlEZ() + '/v2/reports/addMark' HEADERS ezHeadersLotOrder PARAMS resultFile() TO result;
        //isSend(i) <- TRUE;
    } CATCH {
        handleException(i, result());
        RETURN;
    }       
    fileToString(result());       
//    MESSAGE resultString();
    
    // Получение id отчета    
    FOR iterate(INTEGER k, 1, jsonAttributeCount(resultString())) AND 'report_id' == jsonAttributeKey(resultString(),k) DO {
         NEW r = ReportEZ {
            lotInit(r) <- i;
            id(r) <- replace(STRING(jsonAttributeValue(resultString(),k)),'"','');
            getStatusReport(r);
         }  
    }
        
    APPLY;    
}

addMark 'Отправить отчет'(LotInit i) {
    FOR (STRING[14] gtin) AND ((GROUP SUM 1 IF gtin == gtin(LotInitDetail d) AND i == lotInit(d)) > 0) DO {
        addMark(i, gtin);
    }

    // получение статусов для марок
    FOR lotInit(LotInitDetail d) == i DO {
        FOR quantity(d, Lot l) AND NOT isSend(l) DO {
           getStatus(l);
        }
    }

    APPLY;
}

EXTEND FORM lotInits 
    PROPERTIES (i) addMark SHOWIF isPosted(i) AND NOT isSend(i)//, getParameters//, getLabesTypes, getCatalogs
  //  PROPERTIES() code
;

DESIGN lotInits {
    tabbedPane {        
        ez {
            MOVE PROPERTY(addMark(i));
//            MOVE PROPERTY(code());
//            MOVE PROPERTY(getParameters(i));
//            MOVE PROPERTY(getLabesTypes(i));
//            MOVE PROPERTY(getCatalogs(i));
        }
    }
}

EXTEND FORM lotInit 
    PROPERTIES(i) isSend
;

DESIGN lotInit {
    headerRow1 {
        MOVE PROPERTY(isSend(i));
    }
}

EXTEND FORM lotInit   
    PROPERTIES(r) getStatusReport TOOLBAR
    PROPERTIES(i) getStatusReport DRAW r TOOLBAR
    PROPERTIES(d) READONLY isSend, quantitySendLot
    PROPERTIES(l) READONLY nameStatus, isSend
    PROPERTIES(l) getStatusApply
;

EXTEND FORM lotInits   
    PROPERTIES(i) READONLY isSend
    PROPERTIES(d) READONLY isSend
;

EXTEND FORM lots
    PROPERTIES(l) READONLY isSend
;

addMark 'Отправить отчет'(LotInitDetail d) {
    IF (NOT GROUP SUM 1 IF select(LotInitDetail dd) AND lotInit(d) == lotInit(dd)) THEN select(d) <- TRUE;
    
    addMark(lotInit(d));
    
    select(LotInitDetail dd) <- NULL;    
}

EXTEND FORM lotInit
    PROPERTIES (d) select BEFORE index(d), addMark SHOWIF isPosted(i) AND NOT isSend(d)
;

DESIGN lotInit {
    spec {
        NEW tabbedSpec {
            type = TABBED;
            fill = 1;
            MOVE BOX(l) { caption = 'Марки'; }
            
            NEW ez {        
                caption = 'Электронный знак';
                MOVE PROPERTY(addMark(d));
            }
        }
    }   
}