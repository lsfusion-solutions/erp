MODULE EZLotStatus;

REQUIRE EZLegalEntity, LotBy;

NAMESPACE EZ;

status 'Статус (по организации)' = DATA LotStatus (Lot, LegalEntity);
codeStatus 'Код статуса (по организации)' (Lot l, LegalEntity le) = code(status(l, le));
nameStatus 'Статус (по организации)' (Lot l, LegalEntity le) = name(status(l, le));

EXTEND FORM lots
    OBJECTS lez = LegalEntity PANEL BEFORE l
    PROPERTIES(lez) SHOWIF useEZLegalEntity() name SELECTOR
    FILTERS dataToken(lez)

    PROPERTIES(l, lez) READONLY SHOWIF useEZLegalEntity() AFTER nameStatus(l) nameStatus
;

showLotStatus = DATA BOOLEAN();

DESIGN lots {
    PROPERTY (nameStatus(l)) { showIf = NOT useEZLegalEntity() OR showLotStatus(); }
}

jsonAttributeCount (STRING s) = FORMULA INTEGER '(SELECT COUNT(*) FROM json_each(($1)::json))';
jsonAttributeKey (STRING s, INTEGER i) = FORMULA TEXT 'SELECT key FROM json_each(($1)::json) OFFSET (($2)-1) LIMIT 1';
jsonAttributeValue (STRING s, INTEGER i) = FORMULA JSON 'SELECT value FROM json_each(($1)::json) OFFSET (($2)-1) LIMIT 1';

// для 1 уровня вложенности
jsonAttributeCount1(STRING s) = FORMULA INTEGER '(SELECT COUNT(*) FROM json_each(($1)::json))';
jsonAttributeKey1 (STRING s, INTEGER i) = FORMULA TEXT 'SELECT key FROM json_each(($1)::json) OFFSET (($2)-1) LIMIT 1';
jsonAttributeValue1 (STRING s, INTEGER i) = FORMULA JSON 'SELECT value FROM json_each(($1)::json) OFFSET (($2)-1) LIMIT 1';

// для 2 уровня вложенности
jsonAttributeCount2 (STRING s) = FORMULA INTEGER '(SELECT COUNT(*) FROM json_each(($1)::json))';
jsonAttributeKey2 (STRING s, INTEGER i) = FORMULA TEXT 'SELECT key FROM json_each(($1)::json) OFFSET (($2)-1) LIMIT 1';
jsonAttributeValue2 (STRING s, INTEGER i) = FORMULA JSON 'SELECT value FROM json_each(($1)::json) OFFSET (($2)-1) LIMIT 1';

labels = DATA LOCAL STRING(INTEGER);

inExport = DATA LOCAL BOOLEAN (Lot);

FORM exportLots
    OBJECTS labels = Lot
    PROPERTIES(labels) code EXTID 'value'
    FILTERS inExport(labels)
;

label = DATA LOCAL STRING(INTEGER);
found = DATA LOCAL BOOLEAN(INTEGER);

GROUP status EXTID 'status';
lotCode = DATA LOCAL INTEGER(INTEGER);

FORM importLotStatus
    OBJECTS labels = INTEGER
    PROPERTIES(labels) label

    PROPERTIES(labels) IN status
        lotCode EXTID 'code'
;

exportIndex(Lot l) = PARTITION SUM 1 IF in(l) ORDER l;

// ЭЗ принимает не больше 1000
getStatus 'Получить статус' () {
    LOCAL result = FILE();
    LOCAL exportIndex = INTEGER (Lot);

    ezToken() <- token();
    timeoutHttp() <- 300000;

    WHILE (countInLot()) NOINLINE DO {
        exportIndex(Lot l) <- PARTITION SUM 1 IF in(l) ORDER l;
        inExport(Lot l) <- TRUE WHERE exportIndex(l) <= 900;
        in(Lot l) <- NULL WHERE inExport(l);
        exception(Lot l) <- NULL WHERE inExport(l);

        EXPORT exportLots JSON;

        TRY {
            insecureSSL() <- TRUE;
            EXTERNAL HTTP POST urlEZ() + '/v2/labels/' HEADERS ezHeadersLotOrder PARAMS exportFile() TO result;
            fileToString(result());
            

            IMPORT importLotStatus JSON FROM result();
            status(Lot l) <- (GROUP MIN statusLot(lotCode(INTEGER i)) IF code(l) == label(i)) WHERE inExport(l);
            inExport(Lot l) <- NULL;
        } CATCH {
            logToFile('ez', messageCaughtException());

            logToFile('ez', result());
            fileToString(result());
            MESSAGE CONCAT ' ', 'Ошибка при обращении к ЭЗ', messageCaughtException() NOWAIT;

            NEWSESSION NESTED (messageCaughtException, resultString) {
                exception(Lot l) <- CONCAT ', ', messageCaughtException(), resultString() WHERE inExport(l);
                APPLY;
            }
            RETURN;
        }
    }
}
getStatus 'Получить статус' (Lot lot) {
    IF NOT countInLot() THEN {
        in(lot) <- TRUE;
    }
    getStatus();
}

getStatusApply 'Получить статус' (Lot l) {
    getStatus(l);
    APPLY;
}

exception 'Сообщение (по организации)' = DATA TEXT (Lot, LegalEntity);

handleException (Lot l, LegalEntity le, FILE exception) {
    logToFile('ez', messageCaughtException());

    logToFile('ez', exception);
    fileToString(exception);
    MESSAGE CONCAT ' ', 'Ошибка при обращении к ЭЗ', messageCaughtException() NOWAIT;

    NEWSESSION NESTED (messageCaughtException, resultString) {
        exception(l, le) <- CONCAT ', ', messageCaughtException(), resultString();
        APPLY;
    }
}

EXTEND FORM lots
    PROPERTIES(l, lez) READONLY exception PANEL SHOWIF exception(l, lez)
;

DESIGN lots {
    ez {
        MOVE PROPERTY(exception(l, lez)) { panelCaptionVertical = TRUE; fill = 1; };
    }
}

getStatus 'Получить статус' (LegalEntity le) {
    LOCAL result = FILE();
    LOCAL exportIndex = INTEGER (Lot);

    ezToken() <- token(le);
    timeoutHttp() <- 300000;

    WHILE (countInLot()) NOINLINE DO {
        exportIndex(Lot l) <- PARTITION SUM 1 IF in(l) ORDER l;
        inExport(Lot l) <- TRUE WHERE exportIndex(l) <= 900;
        in(Lot l) <- NULL WHERE inExport(l);
        exception(Lot l, le) <- NULL WHERE inExport(l);

        EXPORT exportLots JSON;

        TRY {
            insecureSSL() <- TRUE;
            EXTERNAL HTTP POST urlEZ() + '/v2/labels/' HEADERS ezHeadersLotOrder PARAMS exportFile() TO result;            

            IMPORT importLotStatus JSON FROM result();
            status(Lot l, le) <- (GROUP MIN statusLot(lotCode(INTEGER i)) IF code(l) == label(i)) WHERE inExport(l);
            inExport(Lot l) <- NULL;
        } CATCH {
            logToFile('ez', messageCaughtException());

            logToFile('ez', result());
            fileToString(result());
            MESSAGE CONCAT ' ', 'Ошибка при обращении к ЭЗ', messageCaughtException() NOWAIT;

            NEWSESSION NESTED (messageCaughtException, resultString) {
                exception(Lot l, le) <- CONCAT ', ', messageCaughtException(), resultString() WHERE inExport(l);
                APPLY;
            }
            RETURN;
        }
    }
}

getStatus 'Получить статус' (Lot lot, LegalEntity le) {
    IF NOT countInLot() THEN {
        in(lot) <- TRUE;
    }

    getStatus(le);
}

getStatusApply 'Получить статус' (Lot l, LegalEntity le) {
    getStatus(l, le);
    APPLY;
}