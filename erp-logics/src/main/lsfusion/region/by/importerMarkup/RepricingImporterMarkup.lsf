MODULE RepricingImporterMarkup;

REQUIRE PricingPurchase, PurchasePriceLimit, RepricingPriceListPriceLimit;

NAMESPACE Repricing;

TABLE importerUserUserRepricingDetail(UserRepricingDetail);
importerMarkup '{document.markup} импортера' = ABSTRACT NUMERIC[8,4] (RepricingDetail);
importerMarkup '{document.markup} импортера' = DATA NUMERIC[8,4] (UserRepricingDetail) TABLE importerUserUserRepricingDetail;
importerMarkup (UserRepricingDetail repricingDetail) += importerMarkup(repricingDetail);

showImporterMarkup = DATA  BOOLEAN ();

overShowImporterMarkup = ABSTRACT VALUE BOOLEAN (Repricing);
overShowImporterMarkup(Repricing r) += r IS Repricing AND showImporterMarkup();

EXTEND FORM userRepricing
    PROPERTIES(d) SHOWIF overShowImporterMarkup(p) BEFORE markup(d) importerMarkup
;

EXTEND FORM repricings
    PROPERTIES(d) READONLY SHOWIF overShowImporterMarkup(p) BEFORE markup(d) importerMarkup
;

importerMarkup (PriceListLedger ledger) = MULTI Pricing.importerMarkup[PricingDetail](ledger), importerMarkup[RepricingDetail](ledger);
prevImporterMarkup (PriceListLedger l) = PREV(importerMarkup(l));

skipcalcImporterMarkup = ABSTRACT BOOLEAN ();

WHEN LOCAL  (CHANGED(sku(UserRepricingDetail detail)) OR
            CHANGED(departmentStore(detail)) OR
            (CHANGED(dateTime(detail)) AND NOT isPosted(detail))) AND NOT CHANGED(importerMarkup(detail)) AND NOT skipcalcImporterMarkup() DO {
    importerMarkup (detail) <- prevImporterMarkup(prevRetailPricingPriceListLedgerB( sku(detail), departmentStore(detail), dateTime(detail)));    
}

overRecalculatePrice(UserRepricingDetail detail) +  {
    IF NOT skipcalcImporterMarkup() THEN {
        importerMarkup (detail)  <- prevImporterMarkup(prevRetailPricingPriceListLedgerB( sku(detail), departmentStore(detail), dateTime(detail)));
    }
}

overSetManagementRetailPriceCalc(CalcPriceListType ct, DepartmentStore d,DATETIME dt) + {
    IF NOT skipcalcImporterMarkup() THEN {
        LOCAL importerMarkup = NUMERIC[8,3](Sku);
        importerMarkup(Sku sku) <- prevImporterMarkup(prevRetailPricingPriceListLedgerB( sku, d, dt)) WHERE managementRetailPrice(sku);
        markupCorrect(Sku sku) <- floor(((100.0 + markupCorrect(sku)) / (100 + importerMarkup(sku)) - 1.0) * 100.0, 0.01) WHERE markupCorrect(sku) AND importerMarkup(sku);
    }
}

calculateDescriptionPricingExtra(CalcPriceListType ct,Sku sku, DepartmentStore d,DATETIME dt) + {
    IF NOT skipcalcImporterMarkup() THEN {
        LOCAL importerMarkup = NUMERIC[8,3]();
        importerMarkup() <- prevImporterMarkup(prevRetailPricingPriceListLedgerB( sku, d, dt)) ;
        markupCorrect() <-  floor(((100.0 + markupCorrect())/(100 + importerMarkup())-1.0)*100.0, 0.01) WHERE markupCorrect() AND importerMarkup();
    }
}