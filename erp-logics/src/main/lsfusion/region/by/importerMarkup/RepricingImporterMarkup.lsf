MODULE RepricingImporterMarkup;

REQUIRE RepricingPriceLimit, PricingPurchase, PurchasePriceLimit, RepricingPriceListPriceLimit;

NAMESPACE Repricing;

importerMarkup (PriceListLedger ledger) = MULTI Pricing.importerMarkup[PricingDetail](ledger), importerMarkup[RepricingDetail](ledger);
prevImporterMarkup (PriceListLedger l) = PREV(importerMarkup(l));

importerMarkup (UserRepricingDetail detail)  <- IF batch(detail)
    THEN prevImporterMarkup(prevRetailPricingPriceListLedgerB( batch(detail), departmentStore(detail), dateTime(detail)))
    ELSE prevImporterMarkup(prevRetailPricingPriceListLedgerB( sku(detail), departmentStore(detail), dateTime(detail)))
    WHEN DO CHANGED(sku(detail)) OR
    CHANGED(departmentStore(detail)) OR
    (CHANGED(dateTime(detail)) AND NOT isPosted(detail)) OR
    CHANGED(batch(detail))
    ;

overRecalculatePrice(UserRepricingDetail detail) +  {
    importerMarkup (detail)  <- IF batch(detail)
        THEN prevImporterMarkup(prevRetailPricingPriceListLedgerB( batch(detail), departmentStore(detail), dateTime(detail)))
        ELSE prevImporterMarkup(prevRetailPricingPriceListLedgerB( sku(detail), departmentStore(detail), dateTime(detail)));
}


overSetManagementRetailPriceCalc(CalcPriceListType ct, DepartmentStore d,DATETIME dt) + {
    LOCAL importerMarkup = NUMERIC[8,3](Sku);
    importerMarkup(Sku sku) <- prevImporterMarkup(prevRetailPricingPriceListLedgerB( sku, d, dt)) WHERE managementRetailPrice(sku);
    markupCorrect(Sku sku) <-  floor(((100.0 + markupCorrect(sku))/(100 + importerMarkup(sku))-1.0)*100.0, 0.01) WHERE markupCorrect(sku) AND importerMarkup(sku);
}

calculateDescriptionPricingExtra(CalcPriceListType ct,Sku sku, DepartmentStore d,DATETIME dt) + {
    LOCAL importerMarkup = NUMERIC[8,3]();
    importerMarkup() <- prevImporterMarkup(prevRetailPricingPriceListLedgerB( sku, d, dt)) ;
    markupCorrect() <-  floor(((100.0 + markupCorrect())/(100 + importerMarkup())-1.0)*100.0, 0.01) WHERE markupCorrect() AND importerMarkup();
}