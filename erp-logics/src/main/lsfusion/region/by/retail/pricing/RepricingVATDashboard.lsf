MODULE RepricingVATDashboard;

REQUIRE RepricingVATBatch;

NAMESPACE Repricing;

VAT 'Изменение НДС' = DATA BOOLEAN (Operation);

EXTEND FORM operation
    PROPERTIES(o) VAT
;
DESIGN operation{
    tabContainer {
        paramsContainer {
            MOVE PROPERTY(VAT(o));
        }
    }
}

VAT 'Изменение НДС' = ABSTRACT BOOLEAN (Repricing);
VAT 'Изменение НДС' = DATA BOOLEAN (UserRepricing);

VAT (Repricing r) += OVERRIDE VAT[UserRepricing](r), VAT(operation(r)) IF NOT r IS UserRepricing;

VAT (UserRepricing o) <- VAT(operation(o)) WHEN CHANGED(operation(o));

defaultVATOperation = DATA Operation ();
nameDefaultVATOperation 'Операция переоценки НДС по умолчанию' = name(defaultVATOperation());

EXTEND FORM options
    PROPERTIES() nameDefaultVATOperation
;

DESIGN options {
    rPanel {
        MOVE PROPERTY(nameDefaultVATOperation());
    }
}

skipChangeVATBatch (RepricingDetail d) += d IS RepricingDetail AND NOT VAT(repricing(d));

FORM repricingVATDashboard 'Переоценка НДС'
    PROPERTIES() filterRepricingDateFrom, filterRepricingDateTo, nameFilterRepricingStore, nameFilterRepricingOperation
    
    OBJECTS p = Repricing LAST
    PROPERTIES (p) READONLYIF isReadonly() isClosed
    PROPERTIES (p) READONLYIF isReadonly() BACKGROUND backgroundDraft(p) isPosted, number, series, date, time
    PROPERTIES (p) READONLYIF isReadonly() beforeDate, nameDepartmentStore, nameOperation
    PROPERTIES (p) READONLY countRepricingDetail, diffSumRepricingDetail,
        diffMarkupSumRepricingDetail, diffVATSumRepricingDetail,
        diffRetailSumRepricingDetail
    PROPERTIES (p) READONLYIF isReadonly() numberDisposal, skipChangeLedger,
        note
    FILTERS VAT(p)

    PROPERTIES (p) READONLY PANEL createdNameUser, createdTime, createdHostnameComputer,
        postedNameUser, postedTime, postedHostnameComputer

    PROPERTIES (p) NEWSESSION NEW[UserRepricing], editP = EDIT SHOWIF showEditUser(p), deletep = DELETE SHOWIF showDeleteUser(p)
    PROPERTIES(p)  close[UserRepricing] SHOWIF isOpened[UserRepricing](p), open SHOWIF isClosed[UserRepricing](p)
    PROPERTIES copy(p)
    PROPERTIES (p)  print, printXls
    PROPERTIES () SHOWIF showIfToFillQuantityUserRepricingDetailAllUserRepricings() toFillQuantityUserRepricingDetailAllUserRepricings DRAW p
    OBJECTS d = RepricingDetail
    PROPERTIES (d) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku,
        nameBatch, quantity,

        curPrice, curSum,
        curMarkup, curMarkupSum,
        numberCurVAT, valueCurVAT, curVATSum,
        curRetailPrice, curRetailSum,

        price, sum,
        markup, markupSum,
        numberVAT, valueVAT, VATSum,
        retailPrice, retailSum

    FILTERS repricing(d) == p
    FILTERS filterDateFrom(p),
        filterDateTo(p),
        filterStore(p),
        filterOperation(p),
        accessCompany(currentUser(), legalEntity(departmentStore(p))) OR NOT countAccessCompany(currentUser())
    FILTERS accessCompany(currentUser(),departmentStore(p)) OR NOT departmentStore(p),
            in(currentUser(), operation(p))

    FILTERGROUP repricingfilters6 FILTER 'Открыт' isOpened(p) 'F6' DEFAULT
;

DESIGN repricingVATDashboard {
    NEW pane {
        fill = 1;
        NEW filtersBox {
            fill = 2;
            NEW topFilters {
                caption = 'Фильтры';
                horizontal = TRUE;
                MOVE PROPERTY(filterRepricingDateFrom());
                MOVE PROPERTY(filterRepricingDateTo());
                MOVE PROPERTY(nameFilterRepricingStore());
                MOVE PROPERTY(nameFilterRepricingOperation());
            }
            MOVE BOX(p) {
                fill = 1;
            }
        }

        NEW documentDetail {
            fill = 1;
            tabbed = TRUE;

            MOVE BOX(d) {
                caption = 'Спецификация';
            }
            NEW documentHistory {
                caption = 'История';

                MOVE GROUP(created,p);
                MOVE GROUP(posted,p);
            }
            NEW printTab {
                caption = 'Печатные формы';
                MOVE GROUP(print,p);
            }
            NEW actionContainer {
                caption = 'Действия';
                horizontal = TRUE;
                NEW createdContainer {
                    caption = 'Создание на основе';
                    MOVE PROPERTY (copy(p)) {caption = 'Акт переоценки'; alignment = STRETCH; }
                }
                NEW machineryContainer {
                    caption = 'Загрузка';
                }
                NEW fill {
                    caption = 'Обновление';
                    MOVE PROPERTY(toFillQuantityUserRepricingDetailAllUserRepricings());
                }
            }
        }
    }
    MOVE TOOLBARBOX;
}

@extendFormEditable(repricingVATDashboard);

NAVIGATOR {
    pricingNavigator {
        NEW repricingVATDashboard;
    }
}

createVATRepricings 'Сформировать переоценку НДС' () {
    IF NOT defaultVATOperation() THEN {
        MESSAGE 'Не задана операция переоценки НДС по умолчанию';
    } ELSE NEWSESSION {
        LOCAL filter = BOOLEAN (Batch, Stock);
        filter(Batch batch, DepartmentStore ds) <- TRUE WHERE active(ds) AND currentBalance(batch, ds) AND NOT
            prevLastVatPriceListLedger(batch, ds, currentDateTime()) == VAT(sku(batch));

        FOR [GROUP SUM 1 IF filter(Batch b, DepartmentStore ds) BY ds](DepartmentStore ds) DO NEW p = UserRepricing {
            departmentStore(p) <- ds;
            date(p) <- currentDate();
            time(p) <- currentTime();
            operation(p) <- defaultVATOperation();
            isPosted(p) <- TRUE;

            FOR filter(Batch batch, ds) INLINE NEW d = UserRepricingDetail DO {
                userRepricing(d) <- p;
                sku(d) <- sku(batch);
                batch(d) <- batch;
                quantity(d) <- currentBalance(batch, ds);

                curPrice(d) <- prevPriceB(SystemLedgerPriceListType.supplierPricingPriceListType, batch, ds, dateTime(d));
                price(d) <- curPrice(d);

                curVAT(d) <- prevLastVatPriceListLedger(batch, ds, dateTime(d));
                VAT(d) <- VAT(sku(batch(d)));
                valueCurVAT(d) <- prevLastValueVatPriceListLedger(batch, ds, dateTime(d));
                valueVAT(d) <- valueVAT(sku(batch(d)));

                curManufacturingPrice(d) <- prevPriceB(SystemLedgerPriceListType.manufacturingPriceStockPriceListType, batch, ds, dateTime(d));
                manufacturingPrice(d) <- curManufacturingPrice(d);

                curRetailPrice(d) <- prevPriceB(SystemLedgerPriceListType.retailPricingPriceListType, batch, ds, dateTime(d));
                retailPrice(d) <- NUMERIC[16,4]((curRetailPrice(d) / ((100 (+) valueCurVAT(d)) / 100)) * (1 (+) valueVAT(d) / 100));
            }
            executeLocalEvents('Repricing.userRepricing');
        }
        //APPLY;
    }
}

EXTEND FORM repricingVATDashboard PROPERTIES createVATRepricings() DRAW p TOOLBAR;