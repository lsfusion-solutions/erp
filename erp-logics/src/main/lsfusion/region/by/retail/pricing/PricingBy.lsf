MODULE PricingBy;

REQUIRE PricingSum;

NAMESPACE Pricing;

roundConditionMarkupPrice = DATA RoundCondition();
nameRoundConditionMarkupPrice 'Условие округления розничной цены (надбавка руб.)' = name(roundConditionMarkupPrice());

EXTEND FORM options
    PROPERTIES() nameRoundConditionMarkupPrice
;
DESIGN options {
    pricings {
        MOVE PROPERTY(nameRoundConditionMarkupPrice());

    }
}

    // Цена надбавки   
    @defineDocumentInterfaceDetailPriceCustomPrefix (pricingDetail, markup, ' надбавки');
markupPrice(UserPricingDetail detail) <- retailMarkupSum(detail)/(quantity(detail) IF quantity(detail)!=0)
                WHEN CHANGED(retailMarkupSum(detail)) OR CHANGED (quantity(detail));

//calcRetailUserPricingDetail(UserPricingDetail userPricingDetail, NUMERIC[20,7] markupPrice)  = round(NUMERIC[16,4]([ (X (+) Y)*(Z+100)/100](
//    pricingPrice(userPricingDetail) IF markupPrice IS NUMERIC[20,7],
//    markupPrice AS NUMERIC[20,7] IF userPricingDetail IS UserPricingDetail,
//    valueRetailVAT(userPricingDetail))), roundConditionMarkupPrice());
calcRetailUserPricingDetail(UserPricingDetail userPricingDetail, NUMERIC[20,7] markupPrice)  = round(NUMERIC[16,4]([ (X*(Y+100)/100 (+) W)*(Z+100)/100](
        pricingPrice(userPricingDetail) IF markupPrice IS NUMERIC[20,7],
        markupPrice AS NUMERIC[20,7] IF userPricingDetail IS UserPricingDetail,
        retailExtraPackagingCost(userPricingDetail),
        valueRetailVAT(userPricingDetail))), roundConditionMarkupPrice());


                
changeMarkupPrice(UserPricingDetail userPricingDetail)  { 
    INPUT n = NUMERIC[16,4] DO {
        retailPrice(userPricingDetail) <- calcRetailUserPricingDetail(userPricingDetail, n);
        retailMarkup(userPricingDetail) <- calcRetailMarkup(userPricingDetail) WHERE calcRetailMarkup(userPricingDetail);
    } 
}

@defineDocumentInterfaceProperty (pricing, showMarkupPrice, 'Надбавка (руб.)');

EXTEND FORM userPricing
    PROPERTIES(p) showMarkupPrice
    PROPERTIES(d) BEFORE retailMarkupSum(d) SHOWIF showMarkupPrice(p) BACKGROUND backgroundRetail(p)
                  markupPrice ON CHANGE changeMarkupPrice(d)         
;

EXTEND FORM pricings
    PROPERTIES(d) READONLY BEFORE retailMarkupSum(d) SHOWIF showMarkupPrice[UserPricing](p) BACKGROUND backgroundRetail(p)
                  markupPrice
;

//----------------------------------------------- Операции -----------------------------------------------------//

// Отображение цены надбавки в рублях
@defineDocumentHeaderProperty (operation, showMarkupPrice, 'Надбавка (руб.)');

// Записываем необходимо ли показывать надбавку в рублях по умолчанию из операции
showMarkupPrice (UserPricing pricing) <- showMarkupPrice(operation(pricing))
    WHEN CHANGED(operation(pricing));

EXTEND FORM Pricing.operation
    PROPERTIES(o) showMarkupPrice
;

DESIGN Pricing.operation {
    paramsContainer {
        MOVE PROPERTY(showMarkupPrice(o));
    }
}