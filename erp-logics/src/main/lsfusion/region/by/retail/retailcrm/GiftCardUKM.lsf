MODULE GiftCardUKM;

REQUIRE GiftCardItem;

NAMESPACE GiftCard;

connectionStringExportGiftCards 'Строка подключения' = DATA STRING[255] ();
userExportGiftCards 'Пользователь' = DATA STRING[255] ();
passwordExportGiftCards 'Пароль' = DATA STRING[255] ();
useGiftCardDates 'Использовать дату активации из сертификата (вместо текущей)' = DATA BOOLEAN ();
checkUnderpayExportGiftCards 'check_underpay' = DATA INTEGER ();
monoAccountExportGiftCards 'mono_account' = DATA INTEGER ();

exportedExportGiftCards 'Экспортирован в УКМ' = DATA BOOLEAN (GiftCard);
exportedActive 'Экспортирован (активация) УКМ' = DATA BOOLEAN (GiftCard) INDEXED;
exportGiftCardsUKMCustomJ 'Экспорт в УКМ'  INTERNAL  'lsfusion.erp.region.by.ukm.ExportGiftCardsAction'();

inactiveUKMCustom 'Не выгружать в УКМ' = DATA BOOLEAN ();
exportGiftCardsUKMCustom 'Экспорт в УКМ' () {
    IF NOT inactiveUKMCustom() THEN {
        exportGiftCardsUKMCustomJ();
    }
}

overExportGiftCardsUKMCustomBefore ABSTRACT LIST ();
overExportGiftCardsUKMCustomAfter ABSTRACT LIST ();

exportGiftCardsUKMBeforeAfter 'Экспорт в УКМ' () {
    overExportGiftCardsUKMCustomBefore();
    exportGiftCardsUKMCustom();
    overExportGiftCardsUKMCustomAfter();
}

idDepartmentStore = ABSTRACT ISTRING[10](GiftCard);
isSoldInvoice 'Активировать при выгрузке' = ABSTRACT VALUE BOOLEAN (GiftCard);
isDefect = ABSTRACT BOOLEAN (GiftCard);
useGiftCardDates(GiftCard g) = useGiftCardDates() AND isSoldInvoice(g);

allowReturn = ABSTRACT VALUE BOOLEAN (GiftCard);
allowReturnPayment = ABSTRACT BOOLEAN (GiftCard);

dataAllowReturn 'Разрешить возврат сертификатов' = DATA BOOLEAN (Sku);
allowReturn(GiftCard g) += dataAllowReturn(sku(g));

EXTEND FORM editItemGift PROPERTIES (i) dataAllowReturn;
DESIGN editItemGift {
    mainBox {
        MOVE PROPERTY(dataAllowReturn(i));
    }
}

exportPartQuantity 'Максимальное кол-во сертификатов в запросе экспорта' = DATA INTEGER ();

exportGiftCardsPartUKM 'Экспорт в УКМ' ()  {    
    LOCAL NESTED indexExportGiftCardsLoc = INTEGER (GiftCard);
    LOCAL maxInExportGiftCardsLoc = INTEGER ();
    indexExportGiftCardsLoc(GiftCard g) <- NULL;
    indexExportGiftCardsLoc(GiftCard g) <- PARTITION SUM 1 IF inExportGiftCards(g) ORDER g;
    maxInExportGiftCardsLoc() <- GROUP MAX indexExportGiftCardsLoc(GiftCard g);
    IF maxInExportGiftCardsLoc() > exportPartQuantity() THEN {
        LOCAL partLimitLoc = INTEGER ();
        partLimitLoc() <- (maxInExportGiftCardsLoc() / exportPartQuantity()) + 1;
        FOR iterate(INTEGER i, 1, partLimitLoc()) NOINLINE DO NEWSESSION {
            IF i > 1 THEN sleep(3000);
            inExportGiftCards(GiftCard g) <- TRUE WHERE indexExportGiftCardsLoc(g) > (i - 1) * exportPartQuantity() AND indexExportGiftCardsLoc(g) <= i * exportPartQuantity();
            exportGiftCardsUKMCustom();
        }
        inExportGiftCards(GiftCard g) <- NULL;
    } ELSE {
        exportGiftCardsUKMCustom();
    }
    indexExportGiftCardsLoc(GiftCard g) <- NULL;
    maxInExportGiftCardsLoc() <- NULL;
    
}


exportGiftCardsUKM 'Экспорт в УКМ' ()  {

    inExportGiftCards(GiftCard g) <- NULL WHERE inExportGiftCards(g) AND (exportedActive(g) OR sold(g) IS ReceiptGiftCardSaleDetail);
    IF exportPartQuantity()>0 THEN {
        exportGiftCardsPartUKM();
    }ELSE {
        exportGiftCardsUKMCustom();
    }
};

EXTEND FORM giftCards
    PROPERTIES(g) BEFORE number(g) inExportGiftCards, exportedExportGiftCards, exportedActive READONLYIF isReadonly() 
    PROPERTIES() exportGiftCardsUKM BEFORE generateGiftCards() DRAW g TOOLBAR SHOWIF NOT inactiveUKMCustom()
;


EXTEND FORM integrationData 
    PROPERTIES() inactiveUKMCustom, connectionStringExportGiftCards, userExportGiftCards, passwordExportGiftCards, useGiftCardDates, checkUnderpayExportGiftCards, monoAccountExportGiftCards, exportPartQuantity
;

DESIGN integrationData {
    pane {
        NEW exportGiftCards {
            caption = 'Экспорт сертификатов';
            MOVE PROPERTY(inactiveUKMCustom());
            MOVE PROPERTY(connectionStringExportGiftCards());
            MOVE PROPERTY(userExportGiftCards());
            MOVE PROPERTY(passwordExportGiftCards());
            MOVE PROPERTY(useGiftCardDates());
            MOVE PROPERTY(checkUnderpayExportGiftCards()) {tooltip = '0 - не разрешено, 1 - разрешено, 2 - решение принимает кассир';};
            MOVE PROPERTY(monoAccountExportGiftCards());
            MOVE PROPERTY(exportPartQuantity());
        }    
    }
}

isUKMSold = ABSTRACT BOOLEAN (GiftCard);
isUKM = ABSTRACT BOOLEAN (PaymentGiftCard);

exportGiftCardsUKMOnly 'Экспорт в УКМ' ()  {
    inExportGiftCards(GiftCard g) <- NULL WHERE inExportGiftCards(g)
        AND (exportedActive(g)
            OR (sold(g) IS ReceiptGiftCardSaleDetail AND isUKMSold(g)));
    IF exportPartQuantity()>0 THEN {
        exportGiftCardsPartUKM();
    }ELSE {
        exportGiftCardsUKMCustom();
    }
};

dataExportedUKM = DATA BOOLEAN (PaymentGiftCard) INDEXED;
exportedUKM 'Загружен в УКМ' (PaymentGiftCard c) = OVERRIDE dataExportedUKM(c), c IS PaymentGiftCard AND isUKM(c);
inActiveUKM 'Загружен в УКМ (активный)' (GiftCard g) = OVERRIDE exportedActive(g), sold(g) IS ReceiptGiftCardSaleDetail AND isUKMSold(g);

finishExportUKM (STRING[255] connectionStringUKMLoc, INTEGER version){
    EXTERNAL SQL connectionStringUKMLoc EXEC 'INSERT INTO `signal` (`signal`, version) VALUES(\'incr\', ' + TEXT(version) + ') '
        + 'ON DUPLICATE KEY UPDATE `signal`=VALUES(`signal`);' ;
}

exportLedgerUKMAllGiftCards 'Экспорт списаний УКМ все' () {
    IF connectionStringExportGiftCards() AND NOT inactiveUKMCustom() THEN {
        LOCAL versionLoc = INTEGER (INTEGER);
        versionLoc(INTEGER i) <- NULL;
        LOCAL NESTED versionLoc = INTEGER ();
        LOCAL NESTED connectionStringUKMLoc = STRING[255]();

        connectionStringUKMLoc() <- (connectionStringExportGiftCards() + '?user='+userExportGiftCards()+'&password='+passwordExportGiftCards());

        EXTERNAL SQL connectionStringUKMLoc() EXEC 'SELECT MAX(version) FROM `signal`' TO file;
        IMPORT TABLE FROM file() TO versionLoc;
        versionLoc() <- (GROUP MAX versionLoc(INTEGER i)) (+) 100;

        NEWSESSION {
            FOR dateSold(GiftCard gen) AND expireDate(gen) >= currentDate() AND inActiveUKM(gen)
                AND giftCard(PaymentGiftCard gl) = gen AND gl IS PaymentGiftCard AND NOT exportedUKM(gl) ORDER dateTime(gl), gl DO {
                EXTERNAL SQL connectionStringUKMLoc() EXEC
                'INSERT INTO certificate_operations (number, amount, version, deleted) VALUES('
                    + number(gen) + ','
                    + TEXT(signedSum(gl)) + ','
                    + TEXT(versionLoc()) + ','
                    + '0)';
                dataExportedUKM(gl) <- TRUE;
            }
            IF (GROUP MAX dataExportedUKM(PaymentGiftCard gl) IF gl IS PaymentGiftCard AND NOT PREV(dataExportedUKM(gl))) THEN {
                finishExportUKM(connectionStringUKMLoc(), versionLoc());
                APPLY;
            }
        }
    }
}

exportLedgerSelectedUKMGiftCards 'Экспорт списаний УКМ выбранные' () {
    IF connectionStringExportGiftCards() AND NOT inactiveUKMCustom() THEN {
        LOCAL versionLoc = INTEGER (INTEGER);
        versionLoc(INTEGER i) <- NULL;
        LOCAL NESTED versionLoc = INTEGER ();
        LOCAL NESTED connectionStringUKMLoc = STRING[255]();
        LOCAL NESTED inExportGiftCardsLoc = BOOLEAN (GiftCard);

        connectionStringUKMLoc() <- (connectionStringExportGiftCards() + '?user='+userExportGiftCards()+'&password='+passwordExportGiftCards());

        EXTERNAL SQL connectionStringUKMLoc() EXEC 'SELECT MAX(version) FROM `signal`' TO file;
        IMPORT TABLE FROM file() TO versionLoc;
        versionLoc() <- (GROUP MAX versionLoc(INTEGER i)) (+) 100;

        inExportGiftCardsLoc(GiftCard g) <- NULL;
        inExportGiftCardsLoc(GiftCard g) <- TRUE WHERE inExportGiftCards(g);

        NEWSESSION {
            FOR inExportGiftCardsLoc(GiftCard gen) AND dateSold(gen) AND expireDate(gen) >= currentDate() AND inActiveUKM(gen)
                AND giftCard(PaymentGiftCard gl) = gen AND gl IS PaymentGiftCard AND NOT exportedUKM(gl) ORDER dateTime(gl), gl DO {
                EXTERNAL SQL connectionStringUKMLoc() EXEC
                'INSERT INTO certificate_operations (number, amount, version, deleted) VALUES('
                    + number(gen) + ','
                    + TEXT(signedSum(gl)) + ','
                    + TEXT(versionLoc()) + ','
                    + '0)';
                dataExportedUKM(gl) <- TRUE;
            }
            IF (GROUP MAX dataExportedUKM(PaymentGiftCard gl) IF inExportGiftCardsLoc(giftCard(gl)) AND gl IS PaymentGiftCard AND NOT PREV(dataExportedUKM(gl))) THEN {
                finishExportUKM(connectionStringUKMLoc(), versionLoc());
                APPLY;
            }
        }
    }
}

integrationUKMSold (){
    IF NOT inactiveUKMCustom() THEN {
        inExportGiftCards(GiftCard g) <- TRUE WHERE sold(g) IS ReceiptGiftCardSaleDetail AND NOT isUKMSold(g) AND NOT exportedActive(g);
        exportGiftCardsUKMOnly();
        exportLedgerUKMAllGiftCards();
    }
}

exportCertificate 'Перевыгрузить в УКМ' () {
    IF connectionStringExportGiftCards() AND NOT inactiveUKMCustom() THEN {
        LOCAL versionLoc = INTEGER (INTEGER);
        versionLoc(INTEGER i) <- NULL;
        LOCAL NESTED versionLoc = INTEGER ();
        LOCAL NESTED connectionStringUKMLoc = STRING[255]();
        LOCAL NESTED inExportGiftCardsLoc = BOOLEAN (GiftCard);

        connectionStringUKMLoc() <- (connectionStringExportGiftCards() + '?user='+userExportGiftCards()+'&password='+passwordExportGiftCards());

        EXTERNAL SQL connectionStringUKMLoc() EXEC 'SELECT MAX(version) FROM `signal`' TO file;
        IMPORT TABLE FROM file() TO versionLoc;
        versionLoc() <- (GROUP MAX versionLoc(INTEGER i)) (+) 100;

        inExportGiftCardsLoc(GiftCard g) <- NULL;
        inExportGiftCardsLoc(GiftCard g) <- TRUE WHERE inExportGiftCards(g) AND (exportedExportGiftCards(g) OR inActiveUKM(g));

        NEWSESSION {
            FOR inExportGiftCardsLoc(GiftCard gen) ORDER gen DO {
                EXTERNAL SQL connectionStringUKMLoc() EXEC
                'INSERT INTO certificate (account_type_id, number, active, date_from, date_to, '
                    + 'days_from_after_activate, days_to_after_activate, version, deleted) VALUES('
                    + INTEGER('11' + idBarcode(gen)) + ','
                    + number(gen) + ','
                    + (IF dateSold(gen) THEN 'true,' ELSE 'false,')
                    + (IF dateSold(gen) THEN '\'' +dateSold(gen) + '\',' ELSE 'NULL, ')
                    + (IF expireDate(gen) THEN '\'' +expireDate(gen) + '\',' ELSE 'NULL, ')
                    + '0,'
                    + TEXT(expiryDays(gen)) + ','
                    + TEXT(versionLoc()) + ','
                    + '0) ON DUPLICATE KEY UPDATE '
                    + 'active=' + (IF active(gen) THEN 'true,' ELSE 'false, ')
                    + 'date_from=' + (IF dateSold(gen) THEN '\'' + dateSold(gen) + '\', ' ELSE 'NULL, ')
                    + 'date_to=' + (IF expireDate(gen) THEN '\'' + expireDate(gen) + '\', ' ELSE 'NULL, ')
                    + 'days_from_after_activate=VALUES(days_from_after_activate), '
                    + 'days_to_after_activate=' + TEXT(expiryDays(gen)) + ', '
                    + 'version=VALUES(version), deleted=VALUES(deleted);';
                exportedActive(gen) <- dateSold(gen) AND NOT exportedActive(gen);
            }
            IF (GROUP MAX inExportGiftCardsLoc(GiftCard gen)) THEN {
                finishExportUKM(connectionStringUKMLoc(), versionLoc());
            }
            IF GROUP MAX inExportGiftCardsLoc(GiftCard gen) IF exportedActive(gen) AND NOT PREV(exportedActive(gen)) THEN APPLY;
        }
        inExportGiftCards(GiftCard g) <- NULL;
    }
}

changeExportCertificateOperations 'Изменить цену и отправить в УКМ' () {
    IF connectionStringExportGiftCards() AND NOT inactiveUKMCustom() THEN {
        LOCAL versionLoc = INTEGER (INTEGER);
        versionLoc(INTEGER i) <- NULL;
        LOCAL NESTED versionLoc = INTEGER ();
        LOCAL NESTED connectionStringUKMLoc = STRING[255]();
        LOCAL NESTED inExportGiftCardsLoc = BOOLEAN (GiftCard);

        connectionStringUKMLoc() <- (connectionStringExportGiftCards() + '?user='+userExportGiftCards()+'&password='+passwordExportGiftCards());

        EXTERNAL SQL connectionStringUKMLoc() EXEC 'SELECT MAX(version) FROM `signal`' TO file;
        IMPORT TABLE FROM file() TO versionLoc;
        versionLoc() <- (GROUP MAX versionLoc(INTEGER i)) (+) 100;

        inExportGiftCardsLoc(GiftCard g) <- NULL;
        inExportGiftCardsLoc(GiftCard g) <- TRUE WHERE inExportGiftCards(g) AND (exportedExportGiftCards(g) OR inActiveUKM(g));
        DIALOG dialogNumeric OBJECTS n INPUT DO NEWSESSION {
            FOR inExportGiftCardsLoc(GiftCard gen) ORDER gen DO {
                EXTERNAL SQL connectionStringUKMLoc() EXEC
                'INSERT INTO certificate_operations (number, amount, version, deleted) VALUES('
                    + number(gen) + ','
                    + TEXT(NUMERIC[16,4](n)(-)price(gen)) + ','
                    + TEXT(versionLoc()) + ','
                    + '0)';
                price(gen) <- n;
            }
            IF (GROUP MAX inExportGiftCardsLoc(GiftCard gen) IF price(gen) != PREV(price(gen))) THEN {
                finishExportUKM(connectionStringUKMLoc(), versionLoc());
                APPLY;
            }
        }
        inExportGiftCards(GiftCard g) <- NULL;
    }
}