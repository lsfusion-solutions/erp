MODULE GiftCardUKM;

REQUIRE GiftCardItem;

NAMESPACE GiftCard;

connectionStringExportGiftCards 'Строка подключения' = DATA STRING[255] ();
userExportGiftCards 'Пользователь' = DATA STRING[255] ();
passwordExportGiftCards 'Пароль' = DATA STRING[255] ();
useGiftCardDates 'Использовать дату активации из сертификата (вместо текущей)' = DATA BOOLEAN ();
checkUnderpayExportGiftCards 'check_underpay' = DATA INTEGER ();
monoAccountExportGiftCards 'mono_account' = DATA INTEGER ();

exportedExportGiftCards 'Экспортирован в УКМ' = DATA BOOLEAN (GiftCard);
exportedActive 'Экспортирован (активация) УКМ' = DATA BOOLEAN (GiftCard) INDEXED;
exportGiftCardsUKMCustomJ 'Экспорт в УКМ'  INTERNAL  'lsfusion.erp.region.by.ukm.ExportGiftCardsAction'();

inactiveUKMCustom 'Не выгружать в УКМ' = DATA BOOLEAN ();
exportGiftCardsUKMCustom 'Экспорт в УКМ' () {
    IF NOT inactiveUKMCustom() THEN {
        exportGiftCardsUKMCustomJ();
    }
}

overExportGiftCardsUKMCustomBefore ABSTRACT LIST ();
overExportGiftCardsUKMCustomAfter ABSTRACT LIST ();

exportGiftCardsUKMBeforeAfter 'Экспорт в УКМ' () {
    overExportGiftCardsUKMCustomBefore();
    exportGiftCardsUKMCustom();
    overExportGiftCardsUKMCustomAfter();
}

idDepartmentStore = ABSTRACT ISTRING[10](GiftCard);
isSoldInvoice 'Активировать при выгрузке' = ABSTRACT VALUE BOOLEAN (GiftCard);
isDefect = ABSTRACT BOOLEAN (GiftCard);
useGiftCardDates(GiftCard g) = useGiftCardDates() AND isSoldInvoice(g);

allowReturn = ABSTRACT VALUE BOOLEAN (GiftCard);
allowReturnPayment = ABSTRACT BOOLEAN (GiftCard);

dataAllowReturn 'Разрешить возврат сертификатов' = DATA BOOLEAN (Sku);
allowReturn(GiftCard g) += dataAllowReturn(sku(g));

EXTEND FORM editItemGift PROPERTIES (i) dataAllowReturn;
DESIGN editItemGift {
    mainBox {
        MOVE PROPERTY(dataAllowReturn(i));
    }
}

exportPartQuantity 'Максимальное кол-во сертификатов в запросе экспорта' = DATA INTEGER ();

exportGiftCardsPartUKM 'Экспорт в УКМ' ()  {    
    LOCAL NESTED indexExportGiftCardsLoc = INTEGER (GiftCard);
    LOCAL maxInExportGiftCardsLoc = INTEGER ();
    indexExportGiftCardsLoc(GiftCard g) <- NULL;
    indexExportGiftCardsLoc(GiftCard g) <- PARTITION SUM 1 IF inExportGiftCards(g) ORDER g;
    maxInExportGiftCardsLoc() <- GROUP MAX indexExportGiftCardsLoc(GiftCard g);
    IF maxInExportGiftCardsLoc() > exportPartQuantity() THEN {
        LOCAL partLimitLoc = INTEGER ();
        partLimitLoc() <- (maxInExportGiftCardsLoc() / exportPartQuantity()) + 1;
        FOR iterate(INTEGER i, 1, partLimitLoc()) NOINLINE DO NEWSESSION {
            IF i > 1 THEN sleep(3000);
            inExportGiftCards(GiftCard g) <- TRUE WHERE indexExportGiftCardsLoc(g) > (i - 1) * exportPartQuantity() AND indexExportGiftCardsLoc(g) <= i * exportPartQuantity();
            exportGiftCardsUKMCustom();
        }
        inExportGiftCards(GiftCard g) <- NULL;
    } ELSE {
        exportGiftCardsUKMCustom();
    }
    indexExportGiftCardsLoc(GiftCard g) <- NULL;
    maxInExportGiftCardsLoc() <- NULL;
    
}


exportGiftCardsUKM 'Экспорт в УКМ' ()  {

    inExportGiftCards(GiftCard g) <- NULL WHERE inExportGiftCards(g) AND (exportedActive(g) OR sold(g) IS ReceiptGiftCardSaleDetail);
    IF exportPartQuantity()>0 THEN {
        exportGiftCardsPartUKM();
    }ELSE {
        exportGiftCardsUKMCustom();
    }
};

EXTEND FORM giftCards
    PROPERTIES(g) BEFORE number(g) inExportGiftCards, exportedExportGiftCards, exportedActive READONLYIF isReadonly() 
    PROPERTIES() exportGiftCardsUKM BEFORE generateGiftCards() DRAW g TOOLBAR SHOWIF NOT inactiveUKMCustom()
;


EXTEND FORM integrationData 
    PROPERTIES() inactiveUKMCustom, connectionStringExportGiftCards, userExportGiftCards, passwordExportGiftCards, useGiftCardDates, checkUnderpayExportGiftCards, monoAccountExportGiftCards, exportPartQuantity
;

DESIGN integrationData {
    pane {
        NEW exportGiftCards {
            caption = 'Экспорт сертификатов';
            MOVE PROPERTY(inactiveUKMCustom());
            MOVE PROPERTY(connectionStringExportGiftCards());
            MOVE PROPERTY(userExportGiftCards());
            MOVE PROPERTY(passwordExportGiftCards());
            MOVE PROPERTY(useGiftCardDates());
            MOVE PROPERTY(checkUnderpayExportGiftCards()) {tooltip = '0 - не разрешено, 1 - разрешено, 2 - решение принимает кассир';};
            MOVE PROPERTY(monoAccountExportGiftCards());
            MOVE PROPERTY(exportPartQuantity());
        }    
    }
}
