MODULE  BOMBy;

REQUIRE BOMHumidity;

NAMESPACE BOM;

//-------------------- Технологическая инструкция ------------------//    
       

introductionInstruction 'Вводная часть' = DATA RICHTEXT (BOM);   
characteristicsInstruction 'Характеристики' = DATA RICHTEXT (BOM);  
preparationMaterialInstruction 'Подготовка сырья' = DATA RICHTEXT (BOM);  
cookingSemisInstruction 'Приготовление полуфабрикатов' = DATA RICHTEXT (BOM);  
preparationProductInstruction 'Приготовление готовой продукции' = DATA RICHTEXT (BOM);     
controlProductInstruction 'Приемочный контроль готовой продукции' = DATA RICHTEXT (BOM);     
safetyRequirementsInstruction 'Требования безопасности' = DATA RICHTEXT (BOM);         
sanitaryRequirementsInstruction 'Санитарные требования' = DATA RICHTEXT (BOM);  
responsiblePerson = DATA Employee (BOM); 
nameResponsiblePerson 'Ответсвенное лицо' (BOM b) = name[Contact](responsiblePerson(b));
firstShortNameResponsiblePerson 'И.О. Фамилия'  (BOM b) = firstShortName(responsiblePerson(b));
namePositionResponsiblePerson 'Должность'  (BOM b) = namePosition(responsiblePerson(b));


EXTEND FORM BOM
    PROPERTIES(b) introductionInstruction, characteristicsInstruction, preparationMaterialInstruction,
                  cookingSemisInstruction, preparationProductInstruction, 
                  controlProductInstruction, safetyRequirementsInstruction, sanitaryRequirementsInstruction,
                  nameResponsiblePerson 
;

DESIGN BOM {
    specificationBox {
        NEW instruction {
            fill = 1;
            tabbed = TRUE;
            caption = 'Технологическая инструкция';

            MOVE PROPERTY(introductionInstruction(b)) {
                fill = 1;
                panelCaptionVertical = TRUE;                        
            } 
            MOVE PROPERTY(characteristicsInstruction(b)) {
                fill = 1;    
                panelCaptionVertical = TRUE;                    
            } 
            MOVE PROPERTY(preparationMaterialInstruction(b)) {
                fill = 1;
                panelCaptionVertical = TRUE;                        
            }                                                   
            MOVE PROPERTY(cookingSemisInstruction(b)) {
                fill = 1;  
                panelCaptionVertical = TRUE;                      
            } 
            MOVE PROPERTY(preparationProductInstruction(b)) {
                fill = 1; 
                panelCaptionVertical = TRUE;                       
            } 
            MOVE PROPERTY(controlProductInstruction(b)) {
                fill = 1;
                panelCaptionVertical = TRUE;                        
            } 
            MOVE PROPERTY(safetyRequirementsInstruction(b)) {
                fill = 1; 
                panelCaptionVertical = TRUE;                       
            }   
            MOVE PROPERTY(sanitaryRequirementsInstruction(b)) {
                fill = 1;
                panelCaptionVertical = TRUE;                        
            } 
            NEW instructionPrm {
                caption = 'Доп. параметры';
                type = CONTAINERV;
                MOVE PROPERTY(nameResponsiblePerson(b));
            }                                                    
        }
    }
}

nameOwnershipCompany 'Форма собственности' (BOM BOM) = nameOwnership(company(BOM));
shortNameOwnershipCompany 'Форма собственности (сокр.)' (BOM BOM)  = shortNameOwnership(company(BOM));
firstShortNameChief 'И.О. Фамилия'  (BOM BOM, DATE date) = firstShortName(chief(company(BOM),date));
namePositionChief 'Должность'  (BOM BOM, DATE date) = namePosition(chief(company(BOM),date));

firstShortNameChief 'И.О. Фамилия'  (BOM BOM) = firstShortName(chief(company(BOM),date(BOM)));
namePositionChief 'Должность'  (BOM BOM) = namePosition(chief(company(BOM),date(BOM)));

extractYearBOMs 'Год' (date) = extractYear(date);
extractYearFromDate 'Год' (BOM BOM) = extractYear(fromDate(BOM));

FORM instructionBOM 'Технологическая инструкция'
    OBJECTS dt=DATE PANEL SUBREPORT
    PROPERTIES (dt) date = VALUE, extractYearBOMs 

    OBJECTS b=BOM PANEL 
    PROPERTIES(b)  READONLY products, productsUOM, name, number, series, fromDate, toDate, components, overNettoNetWeightProduct, overNettoNetWeightComponent, pricePercent, note
    PROPERTIES     READONLY    recBruttoQuantity(b,dt), recBruttoDrynessQuantity(b,dt), drynessQuantityComponents(b)
    PROPERTIES(b) nameOwnershipCompany, nameCompany, shortNameOwnershipCompany, recipes, extractYearFromDate
    
    PROPERTIES(b) introductionInstruction, characteristicsInstruction, preparationMaterialInstruction,
                  cookingSemisInstruction, preparationProductInstruction, 
                  controlProductInstruction, safetyRequirementsInstruction, sanitaryRequirementsInstruction,
                  firstShortNameResponsiblePerson, namePositionResponsiblePerson
   
    PROPERTIES(b,dt) firstShortNameChief, namePositionChief

    OBJECTS p = Product
    PROPERTIES(p) READONLY index, idBarcodeSku, id, nameSku, shortNameUOM, percentHumidity, overNettoNetWeight
    PROPERTIES(p,dt) READONLY recBruttoQuantity, recBruttoDrynessQuantity
    PROPERTIES(p) drynessQuantityComponents, calcPercentHumidity
    FILTERS       BOM(p) == b

    OBJECTS c = Component GRID
    FILTERS       BOM(c) == b,
                  material(c) IS Product                                 

    OBJECTS sk = Sku
    PROPERTIES(sk) READONLY Stock.name, percentDryness PANEL 
    PROPERTIES     quantity(c,sk,dt) COLUMNS (c) HEADER nameMaterial(c)
    PROPERTIES     READONLY quantityBom(b,sk,dt), drynessQuantityBom(b,sk,dt) PANEL
    FILTERS        quantityBom(b,sk,dt)
    
    OBJECTS cc = Component
    PROPERTIES(cc) READONLY index, idBarcodeSku, id, nameMaterial, shortNameUOM, overNettoNetWeight
    PROPERTIES    READONLY wastage(cc,dt), overBruttoQuantity(cc,dt), percentDryness(cc), drynessQuantity(cc,dt)    
    FILTERS       BOM(cc) == b,
                  material(cc) IS Sku     
                  
    PROPERTIES READONLY  overNettoNetWeight(c)  COLUMNS (c) FOOTER nameMaterial(c)
    ,quantity(c,dt) COLUMNS (c) FOOTER nameMaterial(c), overBruttoQuantity(c,dt) COLUMNS (c) FOOTER nameMaterial(c)       
                  
                  
    OBJECTS ccc = Component
    PROPERTIES(ccc) READONLY id, nameMaterial, overNettoNetWeight                                                                                        
    FILTERS       BOM(ccc) == b    
                  
    OBJECTS c1 = Component GRID
    PROPERTIES READONLY  overNettoNetWeight(c1)  COLUMNS (c1) FOOTER nameMaterial(c1)  
    FILTERS       BOM(c1) == b,
                  material(c1) IS Product                    

    OBJECTS c2 = Component GRID
    PROPERTIES READONLY  percentHumidityProduct(c2)  COLUMNS (c2) FOOTER nameMaterial(c2)  
    FILTERS       BOM(c2) == b,
                  material(c2) IS Product                      
                  
;
printInstruction 'Технологическая инструкция'(BOM BOM)  { 
    DIALOG dialogDate OBJECTS d INPUT DO
        PRINT instructionBOM OBJECTS dt = d, b = BOM ;
} IMAGE 'print.png' IN print;

EXTEND FORM BOMs
    PROPERTIES(b)  printInstruction    
;
// ----------------- Протокол дегустационной комиссии-------------------- //

testingCommittee (BOM) = DATA ManufacturingCommittee(BOM);
nameTestingCommittee 'Дегустационная комиссия' (BOM BOM) = name(testingCommittee (BOM)) IN documentPrm CHARWIDTH 20;
nameEmployeeTestingCommittee 'Члены комиссии' (BOM BOM)= nameEmployee(testingCommittee(BOM));

inTestingCommittee (BOM BOM, Employee employee) = in(testingCommittee (BOM), employee);
commonNameEmployeeTestingCommittee 'Члены комиссии' (BOM BOM) = namePositionEmployee(testingCommittee (BOM));

numberTestingProtocol 'Номер протокола' = DATA BPSTRING[50] (BOM);

EXTEND FORM BOM
    PROPERTIES(b) nameTestingCommittee, numberTestingProtocol

    OBJECTS e1=Employee
    PROPERTIES(e1) READONLY name[Contact], namePosition
    FILTERS       inTestingCommittee(b,e1)
;
DESIGN BOM {

    specificationBox {
        NEW testing {
            type = CONTAINERV;
            caption = 'Протокол';
            NEW testing1{
                horizontal = TRUE;
                MOVE PROPERTY(nameTestingCommittee(b));
                MOVE PROPERTY(numberTestingProtocol(b));
            }
            MOVE BOX(e1) {caption = 'Члены комиссии';}
        }
    }
}


FORM testingBOM 'Протокол дегустационной комиссии'

    OBJECTS b=BOM PANEL SUBREPORT 
    PROPERTIES(b) READONLY products, productsUOM, name, number, series, fromDate, toDate, date,
                  components, testingCommittee
    PROPERTIES(b) nameOwnershipCompany, nameCompany, shortNameOwnershipCompany, recipes, extractYearFromDate, 
                  firstShortNameChief, namePositionChief, numberStateStandart
   
                         
    PROPERTIES(b) nameTestingCommittee, numberTestingProtocol

    OBJECTS e1=Employee
    PROPERTIES(e1) READONLY name[Contact], namePosition
    FILTERS       inTestingCommittee(b,e1)
                 
                  
;
printTesting 'Протокол дегустационной комиссии' (BOM BOM)  { PRINT testingBOM OBJECTS b = BOM; }   IMAGE 'print.png' IN print;    

EXTEND FORM BOMs
    PROPERTIES(b)  printTesting    
;

overCopy (BOM from, BOM to) + { 
    introductionInstruction(to) <- introductionInstruction(from);
    characteristicsInstruction(to) <- characteristicsInstruction(from);    
    preparationMaterialInstruction(to) <- preparationMaterialInstruction(from);    
    cookingSemisInstruction(to) <- cookingSemisInstruction(from);
    preparationProductInstruction(to) <- preparationProductInstruction(from);    
    controlProductInstruction(to) <- controlProductInstruction(from);        
    safetyRequirementsInstruction(to) <- safetyRequirementsInstruction(from);    
    sanitaryRequirementsInstruction(to) <- sanitaryRequirementsInstruction(from);   
    responsiblePerson(to) <- responsiblePerson(from);    
    testingCommittee(to) <- testingCommittee(from);   
    numberTestingProtocol(to) <- numberTestingProtocol(from);        
}
