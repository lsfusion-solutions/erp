MODULE LegalEntityBy;

REQUIRE LegalEntity;

NAMESPACE LegalEntity;

UNP 'УНП' = DATA STRING[9] (LegalEntity) IN doc CHARWIDTH 9 NOFLEX INDEXED;
OKPO 'ОКПО' = DATA STRING[20] (LegalEntity) IN doc CHARWIDTH 15;
OKYLP 'ОКЮЛП' = DATA STRING[20] (LegalEntity) IN doc CHARWIDTH 15;

legalEntityUNP (unp) = GROUP MAX LegalEntity legalEntity BY UNP(legalEntity);
supplierUNP = GROUP MAX LegalEntity legalEntity IF isSupplier(legalEntity) BY UNP(legalEntity);

META defineDocumentUNPLegalEntity(object, contact, caption)
    UNP###contact 'УНП'###caption (###object object) = UNP(contact(object)) IN documentPrm;
    OKPO###contact 'ОКПО'###caption (###object object) = OKPO(contact(object)) IN documentPrm;
    OKYLP###contact 'ОКЮЛП'###caption (###object object) = OKYLP(contact(object)) IN documentPrm;
END



EXTEND FORM legalEntity

    PROPERTIES(l) SHOWIF toShowUNP(l) UNP  
    PROPERTIES(l) SHOWIF toShow(l) OKPO, OKYLP
;

DESIGN legalEntity{

    column2 {
        MOVE GROUP(doc,l) {
            lines = 3;
        }
    }
}

EXTEND FORM legalEntities
    PROPERTIES(l) READONLY UNP BEFORE shortNameOwnership(l)
;

EXTEND FORM supplierLegalEntities
    PROPERTIES(l) READONLY UNP BEFORE shortNameOwnership(l)
;
skipUnique = ABSTRACT BOOLEAN (LegalEntity);
changeUnique = ABSTRACT BOOLEAN (LegalEntity);

uniqueUNPSupplier 'Запретить повтор УНП для поставщиков' = DATA BOOLEAN ();
CONSTRAINT uniqueUNPSupplier() AND (CHANGED (UNP(LegalEntity l)) OR changeUnique(l)) AND [ GROUP SUM 1 IF isSupplier(LegalEntity ll) AND NOT skipUnique(ll) BY UNP(ll)](UNP(l)) > 1 MESSAGE 'Запрещен повтор УНП для поставщиков';

uniqueUNPCustomer 'Запретить повтор УНП для покупателей' = DATA BOOLEAN ();
CONSTRAINT uniqueUNPCustomer() AND (CHANGED (UNP(LegalEntity l)) OR changeUnique(l)) AND [ GROUP SUM 1 IF isCustomer(LegalEntity ll) AND NOT skipUnique(ll) BY UNP(ll)](UNP(l)) > 1 MESSAGE 'Запрещен повтор УНП для покупателей';

uniqueUNP 'Запретить повтор УНП' = DATA BOOLEAN ();
CONSTRAINT uniqueUNP() AND (CHANGED (UNP(LegalEntity l)) OR changeUnique(l)) AND [ GROUP SUM 1 IF LegalEntity ll IS LegalEntity AND NOT skipUnique(ll) BY UNP(ll)](UNP(l)) > 1 MESSAGE 'Запрещен повтор УНП';

EXTEND FORM options
    PROPERTIES() uniqueUNPSupplier, uniqueUNPCustomer, uniqueUNP
;
DESIGN options {
    legalEntity {
        MOVE PROPERTY(uniqueUNPSupplier());
        MOVE PROPERTY(uniqueUNPCustomer());
        MOVE PROPERTY(uniqueUNP());
    }
}

urlAPIGRP 'URL API (Получение сведений по юридическим лицам)' = DATA STRING[255]();
dataCheckGRP 'Проверять по госреестру' = DATA BOOLEAN (LegalEntityGroup);
levelParentCheckGRP(LegalEntityGroup child)  = GROUP MIN level(child, LegalEntityGroup parent) IF dataCheckGRP(parent) MATERIALIZED;
nearestParentCheckGRP (LegalEntityGroup group) = legalEntityGroup(group, levelParentCheckGRP(group));
nearestCheckGRP (LegalEntityGroup group) = dataCheckGRP(nearestParentCheckGRP(group));
checkGRP 'Проверять по госреестру' (LegalEntityGroup group) = OVERRIDE dataCheckGRP(group), nearestCheckGRP(group) MATERIALIZED;

checkGRP 'Проверять по госреестру' (LegalEntity l) = checkGRP(legalEntityGroup(l));

EXTEND FORM options
    PROPERTIES() urlAPIGRP
    TREE legalEntityGroupTree lg = LegalEntityGroup PARENT parent(lg)
    PROPERTIES READONLY order(lg), lgTreeName = name(lg)
    PROPERTIES checkGRP(lg)
    ORDERS order(lg)
;
DESIGN options {
    legalEntity {
        MOVE PROPERTY(urlAPIGRP());
        MOVE BOX(TREE legalEntityGroupTree){
            caption = 'Группы организаций';
        }
    }
}

GROUP row EXTID 'row';
VUNP = DATA LOCAL NESTED STRING[9]();
VNAIMP = DATA LOCAL NESTED STRING[200]();
VNAIMK = DATA LOCAL NESTED STRING[100]();
VPADRES = DATA LOCAL NESTED STRING[150]();
VKODS = DATA LOCAL NESTED STRING[50]();
validLegalEntity = DATA LOCAL NESTED BOOLEAN();

FORM importGRP
    PROPERTIES() IN row VUNP EXTID 'vunp', VNAIMP EXTID 'vnaimp', VNAIMK EXTID 'vnaimk', VPADRES EXTID 'vpadres', VKODS EXTID 'vkods';
;

overImportGRP ABSTRACT LIST (LegalEntity);

importGRP (LegalEntity l, BOOLEAN fill) {
    validLegalEntity() <- NULL;
    LOCAL name = STRING[100]();
    IF urlAPIGRP() AND UNP(l) THEN {
        logToFile('import','grp: GET: ' + urlAPIGRP() + '?unp=' + UNP(l) + '&charset=UTF-8&type=json');
        LOCAL result = FILE();
        TRY {
            EXTERNAL HTTP GET urlAPIGRP() + '?unp=' + UNP(l) + '&charset=UTF-8&type=json' TO result;
            fileToString(result(), 'UTF-8');
            logToFile('import', 'grp: Result: ' + resultString());
            
            IMPORT importGRP JSON FROM result();
            
            IF VUNP() == UNP(l) THEN {
                IF fill THEN {
                    fullName(l) <- VNAIMP() WHERE VNAIMP();
                    name() <- replace(VNAIMK(),'"','');
                    FOR [GROUP SUM 1 IF left(name(),length(shortName(Ownership o)) + 1) == (shortName(o) + ' ') BY shortName(o)](STRING[10] shortName) DO {
                        name() <- right(name(), length(name()) - length(shortName) - 1);
                    }
                    name(l) <- name() WHERE name();
                    dataAddress(l, DATE d) <- VPADRES() WHERE currentDate() == d AND VPADRES();
                    overImportGRP(l);
                }
                IF NOT VKODS() == 'Действующий' THEN {
                    MESSAGE 'Данная организаация не является действующей!' NOWAIT;
                }
                validLegalEntity() <- TRUE;
            } ELSE {
                MESSAGE 'Не найдена организация с УНП ' + UNP(l) NOWAIT;
            }
        } CATCH {
            logToFile('import', CONCAT '\n', 'grp: Error', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException());
            
            MESSAGE 'Ошибка получения сведений по УНП' NOWAIT;
        }
        
    } ELSE {
        MESSAGE 'Не задан URL API (Получение сведений по юридическим лицам)' NOWAIT;
    }
}

WHEN LOCAL CHANGED(UNP(LegalEntity l)) AND UNP(l) AND checkGRP(l) DO {
    importGRP(l, TRUE);
}

WHEN CHANGED(UNP(LegalEntity l)) AND UNP(l) AND checkGRP(l) DO {
    importGRP(l, NULL);
    IF NOT validLegalEntity() THEN CANCEL;
}