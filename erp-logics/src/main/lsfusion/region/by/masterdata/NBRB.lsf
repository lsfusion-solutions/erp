MODULE NBRB;

REQUIRE System,
        Currency;


//---------------------------------------------- Импорт курсов НБРБ -----------------------------------------------------//

GROUP nbrb 'Курсы НБРБ' : public;

importNBRBExchangeRateDateFrom 'Дата с' = DATA DATE () IN nbrb;
importNBRBExchangeRateDateTo 'Дата по' = DATA DATE () IN nbrb;

importNBRBExchangeRateDaysCount 'Кол-во дней' = DATA INTEGER() IN nbrb;

useHTTP 'Использовать HTTP' = DATA BOOLEAN () IN nbrb;

importNBRBExchangeRateDateFromDateToAction 'Импортировать курсы НБРБ'  INTERNAL  'lsfusion.erp.region.by.masterdata.ImportNBRBExchangeRateDateFromDateToAction' (Currency) IN nbrb;
importNBRBExchangeRateLastDaysAction 'Импортировать последние курсы НБРБ'  INTERNAL  'lsfusion.erp.region.by.masterdata.ImportNBRBExchangeRateLastDaysAction' (Currency) IN nbrb;

skipImportNBRB 'Не импортировать курсы НБРБ' = DATA BOOLEAN (Currency);
EXTEND FORM currency
    PROPERTIES(c) skipImportNBRB 
;
EXTEND FORM currencies
    PROPERTIES(c) READONLY skipImportNBRB
;

importNBRBExchangeRateDateFromDateTo 'Импортировать курсы НБРБ'()  { 
    FOR Currency c IS Currency AND NOT skipImportNBRB(c) DO {
        EXEC importNBRBExchangeRateDateFromDateToAction(c);
    }
    EXEC apply();
} IN nbrb;

importNBRBExchangeRateLastDays 'Импортировать последние курсы НБРБ'()  { 
    FOR Currency c IS Currency AND NOT skipImportNBRB(c) DO {
        EXEC importNBRBExchangeRateLastDaysAction(c);
    }
    EXEC apply();
} IN nbrb;

EXTEND FORM typeExchangeCurrencyDate
    PROPERTIES() importNBRBExchangeRateDateFrom, importNBRBExchangeRateDateTo, importNBRBExchangeRateDateFromDateTo
    PROPERTIES() importNBRBExchangeRateDaysCount, importNBRBExchangeRateLastDays, useHTTP
;

DESIGN typeExchangeCurrencyDate {
    importExchangeRates {
        MOVE GROUP(nbrb) { columns = 1; type = CONTAINERH;}
        NEW lastDaysContainer {
            type = CONTAINERH;
            MOVE PROPERTY(importNBRBExchangeRateDaysCount());
            MOVE PROPERTY(importNBRBExchangeRateLastDays());
            MOVE PROPERTY(useHTTP());
        }
        
    }
}

fillCrossFromTo 'Пересчитать обратный и кросс-курс за период'(DATE dateFrom, DATE dateTo)  { 
    LOCAL dateCur = DATE();
    
    dateCur() <- dateFrom;
    WHILE dateCur() <= dateTo DO { 
        FOR parent(TypeExchange t) DO {
            IF isRevers(t) THEN {    
                rate(t, Currency c, DATE date) <- NUMERIC[15,8]( 1 / (rate(parent(t), currency(t), dateCur()) IF rate(parent(t), currency(t), dateCur())!=0)) 
                    WHERE date == dateCur() AND c ==currency(parent(t));
            } ELSE {
                rate(t, Currency c, DATE date) <- NUMERIC[15,8](rateOn(parent(t), currency(t),dateCur())/(rateOn(parent(t), c, dateCur()) IF rateOn(parent(t), c, dateCur())!=0)) WHERE date == dateCur() AND c IS Currency;
            
            }        
        }
        dateCur() <- sum(dateCur(), 1);
    }
}

fillCrossPeriod 'Пересчитать обратный и кросс-курс за период'()  { 
    IF importNBRBExchangeRateDateFrom() AND importNBRBExchangeRateDateTo() THEN {
        fillCrossFromTo(importNBRBExchangeRateDateFrom(), importNBRBExchangeRateDateTo());
        apply();
    } ELSE {
        MESSAGE 'Не задан период';
    }    
} IN nbrb;

fillCrossLastDays 'Пересчитать обратный и кросс-курс последние'()  {    
    IF importNBRBExchangeRateDaysCount() THEN {        
        fillCrossFromTo(subtract(currentDate(), importNBRBExchangeRateDaysCount()), currentDate());
        apply();
    } ELSE {
        MESSAGE 'Не указано количество дней для пересчета';
    }    
}

EXTEND FORM typeExchangeCurrencyDate
    PROPERTIES() fillCrossPeriod, fillCrossLastDays
;
DESIGN typeExchangeCurrencyDate {
    lastDaysContainer {
        MOVE PROPERTY(fillCrossLastDays());
    }
}

importNBRBExchangeRateLastDaysNew 'Импортировать последние курсы НБРБ (new)' () {
    NEWSESSION {
        IF NOT typeExchange('НБРБ (BYN)') AND NOT typeExchange('НБРБ (BYR)') THEN NEW te = TypeExchange {
            name(te)<-'НБРБ (BYN)';
            currency(te)<-currencyShortName('BYN');
        }
        IF NOT typeExchange('НБРБ (BYN)') AND NOT typeExchange('НБРБ (BYR)') THEN NEW te = TypeExchange {
            name(te)<-'НБРБ (BYN)';
            currency(te)<-currencyShortName('BYN');
        }
        FOR shortName(Currency c) != 'BYN' AND NOT skipImportNBRB(c) AND NOT typeExchange('НБРБ (' +shortName(c)+')') NEW te = TypeExchange DO {
            name(te)<-'НБРБ (' +shortName(c)+')';
            currency(te)<-c;
        }
        FOR  iterate(DATE d, sum(currentDate(), -importNBRBExchangeRateDaysCount()), sum(currentDate(), 1)) DO { 
            LOCAL result = FILE();
            LOCAL Cur_Abbreviation = STRING(INTEGER );
            LOCAL Cur_OfficialRate = NUMERIC[20,13](INTEGER);
            LOCAL Cur_Scale = INTEGER (INTEGER);
            EXTERNAL HTTP GET 'https://api.nbrb.by/exrates/rates?ondate=' + d + '&periodicity=0' TO result;
            IMPORT JSON FROM result() TO Cur_OfficialRate, Cur_Scale, Cur_Abbreviation;
            
            FOR Cur_OfficialRate(INTEGER j) AND shortName(Currency c) == Cur_Abbreviation(j) AND NOT skipImportNBRB(c) DO {
                rate(TypeExchange te, c, d) <- NUMERIC[20,13](Cur_OfficialRate(j)/Cur_Scale(j)) WHERE shortName(currency(te))  = 'BYN' AND left(name(te), 4) == 'НБРБ';
                rate(TypeExchange te, Currency c1, d) <- NUMERIC[20,13](1/(Cur_OfficialRate(j)/Cur_Scale(j))) WHERE shortName(c1)  = 'BYN' AND currency(te) = c AND left(name(te), 4) == 'НБРБ';
            }
        } 
        APPLY ;
    } 
}
