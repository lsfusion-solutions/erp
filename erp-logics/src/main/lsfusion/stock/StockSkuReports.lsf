MODULE StockSkuReports;

REQUIRE StockReports, SkuLedgerTax;

META createGroup(object, name, number)
    g###object name = DATA LOCAL BOOLEAN();
    WHEN LOCAL SET(g###object()) AND countGroup() < 3 DO addGroup(number, name);
    WHEN LOCAL SET(g###object()) AND countGroup() == 3 DO { g###object() <- NULL; };
    WHEN LOCAL DROPPED(g###object()) DO deleteGroup(number);   
END 

order 'Номер' = DATA LOCAL INTEGER(INTEGER);
nameGroup 'Группировка' = DATA LOCAL STRING[100](INTEGER);

countGroup = OVERRIDE (GROUP MAX order(INTEGER i)), 0;

isSkuLastGroup = order(2) == countGroup();
numberSkuGroup = order(2);

addGroup(INTEGER i, STRING[100] name)  { 
    nameGroup(i) <- name;
    order(i) <- (OVERRIDE (GROUP MAX order(INTEGER in)), 0) + 1;
}
reorderGroup()  { 
    order(INTEGER i) <- PARTITION SUM 1 IF nameGroup(i) ORDER order(i);
}
deleteGroup(INTEGER i)  { 
    nameGroup(i) <- NULL;
    order(i) <- NULL;
    reorderGroup();
}

@createGroup(stock, 'По магазину', 1);
@createGroup(sku, 'По товару', 2);
@createGroup(group, 'По группам товара', 3);
@createGroup(supplier, 'По поставщику', 4);

balanceB 'Остаток на начало' = DATA LOCAL NUMERIC[16,5] (Sku, Stock);

costSumB 'Себестоимость на начало' = DATA LOCAL NUMERIC[32,9] (Sku, Stock);

sumB 'Сумма на начало' = DATA LOCAL NUMERIC[18,4] (Sku, Stock);

costVATSum 'Сумма поставщика с НДС' = DATA LOCAL NUMERIC[26,8] (Sku, Stock);

nameGroup1 = DATA LOCAL STRING[255] (Sku, Stock);
nameGroup2 = DATA LOCAL STRING[255] (Sku, Stock);
nameGroup3 = DATA LOCAL STRING[255] (Sku, Stock);

inBackSheet 'Вкл.' = DATA LOCAL BOOLEAN (LegalEntity);

inBackSheetSupplier 'Поставщики' () =
    GROUP CONCAT fullName(LegalEntity le) IF inBackSheet(le) ,', ' ORDER le CHARWIDTH 50;
inBackSheetSupplierId 'Поставщики' () =
    GROUP CONCAT id(LegalEntity le) IF inBackSheet(le) ,',' ORDER le CHARWIDTH 50;
META setNameGroup(number)
    setNameGroup##number () { 
        nameGroup##number(Sku sk, Stock st) <- NULL;
        IF order(1) == number THEN {
            nameGroup##number(Sku sk, Stock st) <- (OVERRIDE name(st), 'Не задано') WHERE inBackSheet(st) AND balanceB(sk,st);
        }
        IF order(2) == number THEN {
            nameGroup##number(Sku sk, Stock st) <- (OVERRIDE name(sk), 'Не задано') WHERE inBackSheet(st) AND balanceB(sk,st);
        }
        IF order(3) == number THEN {
            nameGroup##number(Sku sk, Stock st) <- (OVERRIDE nameSkuGroup(sk), 'Не задано') WHERE inBackSheet(st) AND balanceB(sk,st);
        }
        IF order(4) == number THEN {
            nameGroup##number(Sku sk, Stock st) <- (OVERRIDE fullName(supplierLastOrderBatch(sk)), 'Не задано') WHERE inBackSheet(st) AND balanceB(sk,st);
        }
    }   
END

@setNameGroup(1);

@setNameGroup(2);

@setNameGroup(3);

costB 'Себестоимость на начало дня' (Batch batch, Stock stock, DATETIME dateTime) = balanceB(batch, stock, dateTime) * cost(batch);
costSumB 'Себестоимость на начало дня' (sku, Stock stock, DATETIME dateTime) = GROUP SUM costB(Batch batch, stock, dateTime) BY sku(batch);

fillGroupBalanceSkusStock 'Сформировать'(GroupType gt, DATETIME d)  { 
    balanceB(Sku sk, Stock st) <- NULL;
    costSumB(Sku sk, Stock st) <- NULL; 
    sumB(Sku sk, Stock st) <- NULL; 
    costVATSum(Sku sk, Stock st) <- NULL;
    
    balanceB(Sku sk, Stock st) <- balanceB(sk,st,d) IF inBackSheet(st);
    costSumB(Sku sk, Stock st) <- costSumB(sk,st,d) IF inBackSheet(st);
    sumB(Sku sk, Stock st) <- sumB(sk,st,d) IF inBackSheet(st);
    costVATSum(Sku sk, Stock st) <- NUMERIC[26,8]([GROUP SUM costB(Batch b, Stock s, DATETIME dt)*(1 + Stock.valueVAT(b)/100) BY sku(b), s, dt](sk,st,d)) IF inBackSheet(st);
    
    setNameGroup1();
    setNameGroup2();
    setNameGroup3();
}

FORM printGroupBalanceSkusStock 'Остатки по товарам'
    OBJECTS d = DATETIME PANEL SUBREPORT
    PROPERTIES(d) dateTime = VALUE

    PROPERTIES inBackSheetStocks()

    OBJECTS gt = GroupType PANEL
    PROPERTIES(gt) SELECTOR name

    PROPERTIES() countGroup, isSkuLastGroup, numberSkuGroup

    OBJECTS s = (s = Sku, st = Stock)
    PROPERTIES(s) READONLY name, idBarcode, shortNameUOM
    PROPERTIES(s, st) READONLY balanceB, sumB, costSumB, costVATSum
    PROPERTIES(s, st) nameGroup1, nameGroup2, nameGroup3
    FILTERS inSession(group(gt, s))
    FILTERS inBackSheet(st)
    FILTERS balanceB(s, st)
    FILTERS inBackSheet(supplierLastOrderBatch(s, st))
    FILTERS s IS Sku AND st IS Stock AND d IS DATETIME // фильтр, чтобы сохранилась старая иерархия
    ORDERS nameGroup1(s, st), nameGroup2(s, st), nameGroup3(s, st)
;

printGroupBalanceSkus 'Отчет по остаткам' (DATETIME dateTime, GroupType gtype)  { 
    IF countGroup() == 0 THEN {
        MESSAGE 'Не задана группировка';
        RETURN;
    }
    IF NOT (GROUP SUM 1 IF inBackSheet(Stock st)) THEN {
        MESSAGE 'Не задан склад';
        RETURN;
    }
    IF NOT (GROUP SUM 1 IF inSession(Group gr)) THEN {
        MESSAGE 'Не задана группа';
        RETURN;
    }
    IF NOT (GROUP SUM 1 IF inBackSheet(LegalEntity le)) THEN {
        MESSAGE 'Не задан поставщик';
        RETURN;
    }
    fillGroupBalanceSkusStock(gtype, dateTime);
    PRINT printGroupBalanceSkusStock OBJECTS d = dateTime, gt = gtype; 
} IMAGE 'print.png' IN print;
printXlsxGroupBalanceSkus 'Отчет по остаткам (XLSX)' (DATETIME dateTime, GroupType gtype)  { 
    IF countGroup() == 0 THEN {
        MESSAGE 'Не задана группировка';
        RETURN;
    }
    IF NOT (GROUP SUM 1 IF inBackSheet(Stock st)) THEN {
        MESSAGE 'Не задан склад';
        RETURN;
    }
    IF NOT (GROUP SUM 1 IF inSession(Group gr)) THEN {
        MESSAGE 'Не задана группа';
        RETURN;
    }
    IF NOT (GROUP SUM 1 IF inBackSheet(LegalEntity le)) THEN {
        MESSAGE 'Не задан поставщик';
        RETURN;
    }
    fillGroupBalanceSkusStock(gtype, dateTime);
    PRINT printGroupBalanceSkusStock OBJECTS d = dateTime, gt = gtype XLSX; 
} IMAGE 'print.png' IN print;

FORM dialogSuppliersBackSheet 'Выбор поставщиков'
    OBJECTS s = LegalEntity
    PROPERTIES(s) READONLY id, name, fullName
    PROPERTIES (s) inBackSheet
    ORDERS name(s)
    FILTERS isSupplier(s)

    FILTERGROUP inactiveSupplier FILTER 'Активный' active(s) 'ctrl F10' DEFAULT    
    FILTERGROUP select FILTER 'Отм.' inBackSheet(s) 'F9' 
;

DESIGN dialogSuppliersBackSheet {
    BOX {
        size = (1024, 768);
        MOVE BOX(s) {
            fill = 1;
            GRID(s) {
                defaultComponent = TRUE;
            }
        }
        MOVE TOOLBARBOX;
    }
}

changeSuppliersBackSheet()  { 
    DIALOG dialogSuppliersBackSheet OBJECTS s INPUT DO {
        IF NOT (GROUP SUM 1 IF inBackSheet(LegalEntity le)) THEN
            inBackSheet(s) <- TRUE;
    }
}

changeSuppliersIdBackSheet()  { 
    INPUT s = STRING[1000] DO {
        inBackSheet(LegalEntity l) <- NULL;
        FOR LegalEntity l IF isWordInCSV(id(l), s) DO {
            inBackSheet(l) <- TRUE;
        }
    }
}

EXTEND FORM reportBalanceStock
    PROPERTIES inBackSheetSupplier() ON CHANGE changeSuppliersBackSheet()
    PROPERTIES inBackSheetSupplierId() ON CHANGE changeSuppliersIdBackSheet()
    PROPERTIES() gStock, gSku, gGroup, gSupplier
        
    OBJECTS gr = INTEGER 
    PROPERTIES(gr) READONLY order, nameGroup
    ORDERS order(gr)
    FILTERS nameGroup(gr)
    
    PROPERTIES(d, gt) printGroupBalanceSkus, printXlsxGroupBalanceSkus
;

DESIGN reportBalanceStock {
    topContainer {
        NEW suppliers {
            caption = 'Поставщики';
            type = CONTAINERV;
            MOVE PROPERTY(inBackSheetSupplier()) {caption ='Наименования';};
            MOVE PROPERTY(inBackSheetSupplierId()) {caption ='Коды';};
        }
    }
    tabContainer {
        NEW groupContainer{
            caption = 'Группировка';
            type = CONTAINERV;
            fill = 1;
            NEW grContainer {
                fill = 1;
                type = CONTAINERH;
                caption = 'Группировка';
                NEW checkBoxContainer{
                    type = CONTAINERV;
                    MOVE PROPERTY(gStock());
                    MOVE PROPERTY(gSku());
                    MOVE PROPERTY(gGroup());
                    MOVE PROPERTY(gSupplier());    
                }
                MOVE BOX(gr) { caption = 'Порядок группировки'; };
            }
            NEW printContainer {
                type = CONTAINERH;
                caption = 'Печать';
                MOVE PROPERTY(printGroupBalanceSkus(d,gt));
                MOVE PROPERTY(printXlsxGroupBalanceSkus(d,gt));
             }
        }
    }
}