MODULE StockSnapshot;

REQUIRE SkuLedger, Document, PriceListLedger, StockTax, Item;

NAMESPACE Stock;

////////////////////// Тип отчета ////////////////////////////
CLASS SnapshotType 'Тип аналитического отчета';
TABLE snapshotType (SnapshotType);

name 'Наименование' = DATA BPSTRING[100] (SnapshotType) IN documentHeader;
@defineExternalizable(snapshotType, STRING[100]);
isBatch 'По партиям' = DATA BOOLEAN (SnapshotType);

isQuantity 'Количество' = DATA BOOLEAN (SnapshotType);
isSum 'Сумма ' = DATA BOOLEAN (SnapshotType);

isBalanceB 'Остаток начало' = DATA BOOLEAN (SnapshotType);
isIn 'Приход' = DATA BOOLEAN (SnapshotType);
isOut 'Расход' = DATA BOOLEAN (SnapshotType);
isBalanceA 'Остаток конец' = DATA BOOLEAN (SnapshotType);

isCost 'Себестоимость' = DATA BOOLEAN (SnapshotType);
isVATSupplier 'НДС поставщика' = DATA BOOLEAN (SnapshotType);
isCostVATSupplier 'Себестоимость с НДС' = DATA BOOLEAN (SnapshotType);
isNetWeight 'Вес, кг' = DATA BOOLEAN (SnapshotType);
isDate 'В динамике' = DATA BOOLEAN (SnapshotType);


//-- Выбор складов
TABLE snapshotTypeStockGroup (SnapshotType, StockGroup); 
TABLE snapshotTypeStock (SnapshotType, Stock);

allStockInclude 'Вкл' = DATA BOOLEAN (SnapshotType);
dataInclude 'Вкл' = DATA BOOLEAN (SnapshotType, StockGroup);
dataInclude 'Вкл' = DATA BOOLEAN (SnapshotType, Stock);

levelParentInclude (SnapshotType snapshotType, StockGroup stockGroup) = GROUP
                                                              MIN level(stockGroup, StockGroup parent) IF dataInclude(snapshotType, parent) MATERIALIZED;    
nearestParentInclude (SnapshotType snapshotType, StockGroup stockGroup) = stockGroup(stockGroup, levelParentInclude(snapshotType, stockGroup));
nearestInclude (SnapshotType snapshotType, StockGroup stockGroup) = dataInclude(snapshotType, nearestParentInclude (snapshotType, stockGroup));

include 'Вкл' (SnapshotType snapshotType, StockGroup stockGroup) =
    OVERRIDE dataInclude(snapshotType, stockGroup), 
             nearestInclude (snapshotType, stockGroup),
             allStockInclude(snapshotType) IF stockGroup IS StockGroup MATERIALIZED;

include 'Вкл' (SnapshotType snapshotType, Stock stock) =
    (OVERRIDE dataInclude(snapshotType, stock),
             include(snapshotType, stockGroup(stock))) IF isCompany(stock) MATERIALIZED;
                        
@defineBackgroundNearestBoolean(allStockInclude, include, snapshotType, stock, nearestInclude, isCompany);            
                          
countIncludeStock  (SnapshotType snapshotType) = GROUP SUM 1 IF include(snapshotType, Stock stock);      


nameIncludeStockGroups 'Группы складов (все)' (SnapshotType document)= 
    GROUP 
    CONCAT name(StockGroup stockGroup) IF dataInclude(document, stockGroup), ', ' 
    ORDER stockGroup
    CHARWIDTH 20;

nameIncludeStocks 'Склады (все)' (SnapshotType document)= 
    GROUP 
    CONCAT name(Stock stock) IF dataInclude(document, stock), ', ' 
    ORDER stock
    CHARWIDTH 20;
    
nameIncludeStockGroupsStock 'Группы складов, склады (все)' (SnapshotType document) = CONCAT '; ', nameIncludeStockGroups(document), 
                                                                                             nameIncludeStocks(document) CHARWIDTH 20;   
        
//-- Выбор групп товара  
TABLE snapshotTypeSkuGroup (SnapshotType, SkuGroup);  
     
dataInclude 'Вкл' = DATA BOOLEAN (SnapshotType, SkuGroup);

levelParentInclude (SnapshotType snapshotType, SkuGroup skuGroup) = GROUP
                                                              MIN level(skuGroup, SkuGroup parent) IF dataInclude(snapshotType, parent) MATERIALIZED;    
nearestParentInclude (SnapshotType snapshotType, SkuGroup skuGroup) = skuGroup(skuGroup, levelParentInclude(snapshotType, skuGroup));
nearestInclude (SnapshotType snapshotType, SkuGroup skuGroup) = dataInclude(snapshotType, nearestParentInclude (snapshotType, skuGroup));

include 'Вкл' (SnapshotType snapshotType, SkuGroup skuGroup) =
    OVERRIDE dataInclude(snapshotType, skuGroup), 
             nearestInclude (snapshotType, skuGroup) MATERIALIZED;    

nameIncludeSkuGroups 'Группы товаров (все)' (SnapshotType document)= 
    GROUP 
    CONCAT name(SkuGroup skuGroup) IF dataInclude(document, skuGroup), ', ' 
    ORDER skuGroup
    CHARWIDTH 20;

FORM snapshotType 'Тип аналитического отчета'
    OBJECTS t = SnapshotType PANEL
    PROPERTIES(t) id SHOWIF showIDs(), name, isBatch, isQuantity, isSum, isBalanceB,
                  isIn, isOut, isBalanceA, isCost, isVATSupplier,
                  isCostVATSupplier, isNetWeight, isDate  
                     
//-- выбор складов                  
    TREE stockTree2 a2 = BPSTRING[3], sg2 = StockGroup PARENT parent(sg2) 
    PROPERTIES VALUE(a2) READONLY, allStockInclude(t) DRAW a2 BACKGROUND backgroundAllStockInclude(t), 
               name(sg2) READONLY, include(t,sg2) BACKGROUND backgroundInclude(t,sg2)
    ORDERS name(sg2)
    FILTERS stringEqualsAll(a2)
    OBJECTS ts2 = Stock
    PROPERTIES(ts2) READONLY id, name
    PROPERTIES include(t,ts2)BACKGROUND backgroundInclude(t,ts2)
    ORDERS name(ts2)
    FILTERS isParent(sg2, ts2) OR (ts2 IS Stock AND NOT sg2),
            isCompany(ts2)
    FILTERGROUP inactiveStock2 FILTER 'Активный' active(ts2) 'ctrl F10' DEFAULT         
    FILTERGROUP selectStock2 FILTER 'Отмеченные' include(t,ts2)                                                                                             
          
//-- выбор групп товара     
    TREE skuTree2 sk2 = SkuGroup PARENT parent(sk2)
    PROPERTIES READONLY order(sk2), name(sk2)
    PROPERTIES include(t,sk2)
    ORDERS order(sk2), name(sk2)
    FILTERGROUP inactive2 FILTER 'Активные' active(sk2) 'F6' DEFAULT                                                                  
                     
    EDIT SnapshotType OBJECT t
;
DESIGN snapshotType {
    BOX {
        size = (1024, 768);
        NEW topContainer {
            caption = 'Шапка документа';
            horizontal = TRUE;
            MOVE PROPERTY(id(t));
            MOVE PROPERTY(name(t));
        }
        NEW paramContainer {
            caption = 'Параметры';
            horizontal = TRUE;                      
            NEW row1 {
                horizontal = FALSE; 
                caption = 'Основные';    
                MOVE PROPERTY(isBatch(t));
                MOVE PROPERTY(isDate(t));
            }
            NEW row2 {
                caption = 'Остатки';                 
                MOVE PROPERTY(isBalanceB(t));
                MOVE PROPERTY(isBalanceA(t));   
                                                                                     
            }                    
            NEW row3 {
                horizontal = FALSE;
                caption = 'Колонки';
                type = COLUMNS;
                lines = 4;
                MOVE PROPERTY(isQuantity(t));
                MOVE PROPERTY(isSum(t)); 
                MOVE PROPERTY(isCost(t)); 
                MOVE PROPERTY(isVATSupplier(t));   
                MOVE PROPERTY(isCostVATSupplier(t));     
                MOVE PROPERTY(isNetWeight(t));                   
            }                      
            NEW row5 {
                horizontal = FALSE;
                caption = 'Движение';
                MOVE PROPERTY(isIn(t));  
                MOVE PROPERTY(isOut(t));                     
            }                                                                          
            NEW row6 {
                horizontal = FALSE;
                caption = 'Оборот';  
                type = COLUMNS;
                lines = 2;   
                                       
            }                                                         
        }
        NEW printSettings {
            horizontal = TRUE;                     
            caption = 'Печать отчетов';
        }
        NEW select{
            fill = 1;
            tabbed = TRUE;
            NEW selectStocks{
                fill = 1;
                horizontal = TRUE;
                caption = 'Выбор складов'; 
                MOVE BOX(TREE stockTree2);                                                                    
                MOVE BOX(ts2);                  
            }
            MOVE BOX(TREE skuTree2) {caption = 'Выбор групп'; }   
        }
        MOVE TOOLBARBOX;
    }            
}
FORM snapshotTypes 'Типы аналитических отчетов'
    OBJECTS t = SnapshotType
    PROPERTIES(t) READONLY id SHOWIF showIDs(), name, isBatch, isQuantity, isSum, isBalanceB,
                  isIn, isOut, isBalanceA, isCost, isVATSupplier,
                  isCostVATSupplier, isNetWeight   
    PROPERTIES(t) NEWSESSION NEW, EDIT, DELETE 
    LIST SnapshotType OBJECT t
;
META deriveDocumentSnapshotProperty(property)
    property (Snapshot o) <- property(snapshotType(o))
        WHEN CHANGED(snapshotType(o));
END

//////////////////////Отчет ////////////////////////////

CLASS Snapshot 'Аналитический отчет';
TABLE snapshot (Snapshot);

hintBalanceBBackground 'Лавандовый' = RGB(255,238,238) IF TRUE;     
hintPurchaseBackground 'Розовато-лавандовый'  = RGB(224, 224, 255) IF TRUE;         
hintSaleBackground 'Зеленого чая'  = RGB(204,255,204) IF TRUE;  
hintBalanceABackground 'Небесный'  = RGB(127,199,255) IF TRUE;                                                                                     
hintInBackground 'Лимонный' = RGB(255, 250, 205) IF TRUE;                                                                                   
hintOutBackground 'Бороды Абдель-Керима' = RGB(213, 213, 213) IF TRUE;     // серый

snapshotType= DATA SnapshotType (Snapshot);
nameSnapshotType 'Тип отчета' = name(snapshotType(Snapshot s)) IN documentHeader CHARWIDTH 15;

@defineDocumentHeaderTime(Snapshot);
@defineDocumentHeaderNote(Snapshot);
@defineDocumentHeaderCreated(Snapshot);
@deriveDocumentHeaderTimePrefix(Snapshot, );
@defineDocumentHeaderNumber(Snapshot, BPSTRING[2]);
@defineNumeratedDefault(Snapshot, 'Аналитический отчет', 'ОО');
@defineDocumentHeaderDescription (Snapshot, 'Аналитический отчет');

fromDate 'Дата с' = DATA DATE (Snapshot) IN documentHeader;
toDate 'Дата по' = DATA DATE (Snapshot) IN documentHeader;

countDays 'Кол-во дней' (Snapshot s) = daysBetweenDates(toDate(s), fromDate(s)) + 1; 

startTime 'Время начала формирования' = DATA DATETIME (Snapshot) IN created;
finishTime 'Время окончания формирования' = DATA DATETIME (Snapshot) IN created;

WHEN LOCAL SET(Snapshot o IS Snapshot) DO {
    IF o IS Snapshot AND NOT fromDate(o) THEN fromDate(o) <- currentDate();
    IF o IS Snapshot AND NOT toDate(o) THEN toDate(o) <- currentDate();
};

//-- Параметры отчета
GROUP evidence 'Признаки' : base;

isBatch 'По партиям' = DATA BOOLEAN (Snapshot) IN evidence;

isQuantity 'Количество' = DATA BOOLEAN (Snapshot) IN evidence;
isSum 'Сумма ' = DATA BOOLEAN (Snapshot) IN evidence;

isBalanceB 'Остаток начало' = DATA BOOLEAN (Snapshot) IN evidence;
isIn 'Приход' = DATA BOOLEAN (Snapshot) IN evidence;
isOut 'Расход' = DATA BOOLEAN (Snapshot) IN evidence;
isBalanceA 'Остаток конец' = DATA BOOLEAN (Snapshot) IN evidence;

isCost 'Себестоимость' = DATA BOOLEAN (Snapshot) IN evidence;
isVATSupplier 'НДС поставщика' = DATA BOOLEAN (Snapshot) IN evidence;
isCostVATSupplier 'Себестоимость с НДС' = DATA BOOLEAN (Snapshot) IN evidence;
isNetWeight 'Вес, кг' = DATA BOOLEAN (Snapshot) IN evidence;

@deriveDocumentSnapshotProperty(isBatch);
@deriveDocumentSnapshotProperty(isQuantity);
@deriveDocumentSnapshotProperty(isBalanceB);
@deriveDocumentSnapshotProperty(isIn);
@deriveDocumentSnapshotProperty(isOut);
@deriveDocumentSnapshotProperty(isBalanceA);
@deriveDocumentSnapshotProperty(isCost);
@deriveDocumentSnapshotProperty(isVATSupplier);
@deriveDocumentSnapshotProperty(isCostVATSupplier);
@deriveDocumentSnapshotProperty(isNetWeight);
@deriveDocumentSnapshotProperty(isSum);
//-- Sku на дату

TABLE skuStockSnapshotDate (Sku, Stock, Snapshot, DATE);  

isDate 'В динамике' = DATA BOOLEAN (Snapshot) IN evidence;
@deriveDocumentSnapshotProperty(isDate);

balanceB 'Кол-во начало' = DATA NUMERIC[14,3] (Sku, Stock, Snapshot, DATE);
netWeightB 'Вес начало' = DATA NUMERIC[14,3] (Sku, Stock, Snapshot, DATE);
sumB 'Сумма начало' = DATA NUMERIC[16,2] (Sku, Stock, Snapshot, DATE);
costB 'Себестоимость начало' = DATA NUMERIC[16,2] (Sku, Stock, Snapshot, DATE);
VATSupplierB 'НДС поставщика начало' = DATA NUMERIC[16,2] (Sku, Stock, Snapshot, DATE);
costVATSupplierB 'С/С с НДС начало' = VATSupplierB(Sku sku, Stock stock, Snapshot snapshot, DATE date) (+) 
                                                                costB(sku, stock, snapshot, date);

inQuantity 'Кол-во приход' = DATA NUMERIC[14,3] (Sku, Stock, Snapshot, DATE);
inNetWeight 'Вес приход' = DATA NUMERIC[14,3] (Sku, Stock, Snapshot, DATE);
inSum 'Сумма приход' = DATA NUMERIC[16,2] (Sku, Stock, Snapshot, DATE);

outQuantity 'Кол-во расход' = DATA NUMERIC[14,3] (Sku, Stock, Snapshot, DATE);
outNetWeight 'Вес расход' = DATA NUMERIC[14,3] (Sku, Stock, Snapshot, DATE);
outSum 'Сумма расход' = DATA NUMERIC[16,2] (Sku, Stock, Snapshot, DATE);

balanceA 'Кол-во конец' = DATA NUMERIC[14,3] (Sku, Stock, Snapshot, DATE);
netWeightA 'Вес конец' = DATA NUMERIC[14,3] (Sku, Stock, Snapshot, DATE);
sumA 'Сумма конец' = DATA NUMERIC[16,2] (Sku, Stock, Snapshot, DATE);
costA 'Себестоимость конец' = DATA NUMERIC[16,2] (Sku, Stock, Snapshot, DATE);
VATSupplierA 'НДС поставщика конец' = DATA NUMERIC[16,2] (Sku, Stock, Snapshot, DATE);
costVATSupplierA 'С/С с НДС конец' = VATSupplierA(Sku sku, Stock stock, Snapshot snapshot, DATE date) (+) 
                                                               costA(sku, stock, snapshot, date);
//------------------------------ Sku -------------------------------//

TABLE skuStockSnapshot (Sku, Stock, Snapshot);  
balanceB 'Кол-во начало' = DATA NUMERIC[14,3] (Sku, Stock, Snapshot);
netWeightB 'Вес начало' = DATA NUMERIC[14,3] (Sku, Stock, Snapshot);
sumB 'Сумма начало' = DATA NUMERIC[16,2] (Sku, Stock, Snapshot);
costB 'Себестоимость начало' = DATA NUMERIC[16,2] (Sku, Stock, Snapshot);
VATSupplierB 'НДС поставщика начало' = DATA NUMERIC[16,2] (Sku, Stock, Snapshot);
costVATSupplierB 'С/С с НДС начало' = VATSupplierB(Sku sku, Stock stock, Snapshot snapshot) (+) 
                                                            costB(sku, stock, snapshot);
inQuantity 'Кол-во приход' = DATA NUMERIC[14,3] (Sku, Stock, Snapshot);
inNetWeight 'Вес приход' = DATA NUMERIC[14,3] (Sku, Stock, Snapshot);
inSum 'Сумма приход' = DATA NUMERIC[16,2] (Sku, Stock, Snapshot);

outQuantity 'Кол-во расход' = DATA NUMERIC[14,3] (Sku, Stock, Snapshot);
outNetWeight 'Вес расход' = DATA NUMERIC[14,3] (Sku, Stock, Snapshot);
outSum 'Сумма расход' = DATA NUMERIC[16,2] (Sku, Stock, Snapshot);

balanceA 'Кол-во конец' = DATA NUMERIC[14,3] (Sku, Stock, Snapshot);
netWeightA 'Вес конец' = DATA NUMERIC[14,3] (Sku, Stock, Snapshot);
sumA 'Сумма конец' = DATA NUMERIC[16,2] (Sku, Stock, Snapshot);
costA 'Себестоимость конец' = DATA NUMERIC[16,2] (Sku, Stock, Snapshot);
VATSupplierA 'НДС поставщика конец' = DATA NUMERIC[16,2] (Sku, Stock, Snapshot);
costVATSupplierA 'С/С с НДС конец' = VATSupplierA(Sku sku, Stock stock, Snapshot snapshot) (+) 
                                                           costA(sku, stock, snapshot);                                 
//--По группе рекурсивно
TABLE skuGroupStockSnapshot (SkuGroup, Stock, Snapshot);   
  
//-- группа/склад       
balanceB 'Кол-во начало' = DATA NUMERIC[14,3] (SkuGroup, Stock, Snapshot);
netWeightB 'Вес начало' = DATA NUMERIC[14,3] (SkuGroup, Stock, Snapshot);
sumB 'Сумма начало' = DATA NUMERIC[16,2] (SkuGroup, Stock, Snapshot);
costB 'Себестоимость начало' = DATA NUMERIC[16,2] (SkuGroup, Stock, Snapshot);
VATSupplierB 'НДС поставщика начало' = DATA NUMERIC[16,2] (SkuGroup, Stock, Snapshot);
costVATSupplierB 'С/С с НДС начало' = VATSupplierB(SkuGroup group, Stock stock, Snapshot snapshot) (+) 
                                                                 costB(group, stock, snapshot);                                           
    
inQuantity 'Кол-во приход' = DATA NUMERIC[14,3] (SkuGroup, Stock, Snapshot);       
inNetWeight 'Вес приход' = DATA NUMERIC[14,3] (SkuGroup, Stock, Snapshot);
inSum 'Сумма приход' = DATA NUMERIC[16,2] (SkuGroup, Stock, Snapshot);

outQuantity 'Кол-во расход' = DATA NUMERIC[14,3] (SkuGroup, Stock, Snapshot);
outNetWeight 'Вес расход' = DATA NUMERIC[14,3] (SkuGroup, Stock, Snapshot);
outSum 'Сумма расход' = DATA NUMERIC[16,2] (SkuGroup, Stock, Snapshot);

balanceA 'Кол-во конец' = DATA NUMERIC[14,3] (SkuGroup, Stock, Snapshot);
netWeightA 'Вес конец' = DATA NUMERIC[14,3] (SkuGroup, Stock, Snapshot);
sumA 'Сумма конец' = DATA NUMERIC[16,2] (SkuGroup, Stock, Snapshot);
costA 'Себестоимость конец' = DATA NUMERIC[16,2] (SkuGroup, Stock, Snapshot);
VATSupplierA 'НДС поставщика конец' = DATA NUMERIC[16,2] (SkuGroup, Stock, Snapshot);
costVATSupplierA 'С/С с НДС конец' = VATSupplierA(SkuGroup group, Stock stock, Snapshot snapshot) (+) 
                                                                costA(group, stock, snapshot);                   
                   
//-- группа          
balanceB 'Кол-во начало' (SkuGroup group, Snapshot snapshot) =
    GROUP  SUM balanceB (group, Stock stock, snapshot); 
netWeightB 'Вес начало' (SkuGroup group, Snapshot snapshot) =
    GROUP  SUM netWeightB (group, Stock stock, snapshot);         
sumB 'Сумма начало' (SkuGroup group, Snapshot snapshot) =
    GROUP SUM sumB (group, Stock stock, snapshot);   
costB 'Себестоимость начало' (SkuGroup group, Snapshot snapshot) =
    GROUP SUM costB (group, Stock stock, snapshot);            
VATSupplierB 'НДС поставщика начало' (SkuGroup group, Snapshot snapshot) =
    GROUP SUM VATSupplierB (group, Stock stock, snapshot);            
costVATSupplierB 'С/С с НДС начало' = VATSupplierB(SkuGroup group, Snapshot snapshot) (+) 
                                                            costB(group, snapshot);     
inQuantity 'Кол-во приход' (SkuGroup group, Snapshot snapshot) =
    GROUP  SUM inQuantity (group, Stock stock, snapshot); 
inNetWeight 'Вес приход' (SkuGroup group, Snapshot snapshot) =
    GROUP  SUM inNetWeight (group, Stock stock, snapshot);         
inSum 'Сумма приход' (SkuGroup group, Snapshot snapshot) =
    GROUP SUM inSum (group, Stock stock, snapshot);      
 
outQuantity 'Кол-во расход' (SkuGroup group, Snapshot snapshot) =
    GROUP  SUM outQuantity (group, Stock stock, snapshot); 
outNetWeight 'Вес расход' (SkuGroup group, Snapshot snapshot) =
    GROUP  SUM outNetWeight (group, Stock stock, snapshot);        
outSum 'Сумма расход' (SkuGroup group, Snapshot snapshot) =
    GROUP SUM outSum (group, Stock stock, snapshot);      
    
balanceA 'Кол-во конец' (SkuGroup group, Snapshot snapshot) =
    GROUP  SUM balanceA (group, Stock stock, snapshot); 
netWeightA 'Вес конец' (SkuGroup group, Snapshot snapshot) =
    GROUP  SUM netWeightA (group, Stock stock, snapshot);         
sumA 'Сумма конец' (SkuGroup group, Snapshot snapshot) =
    GROUP SUM sumA (group, Stock stock, snapshot); 
costA 'Себестоимость конец' (SkuGroup group, Snapshot snapshot) =
    GROUP SUM costA (group, Stock stock, snapshot);                                   
VATSupplierA 'НДС поставщика конец' (SkuGroup group, Snapshot snapshot) =
    GROUP SUM VATSupplierA (group, Stock stock, snapshot);                                    
costVATSupplierA 'С/С с НДС конец' = VATSupplierA(SkuGroup group, Snapshot snapshot) (+) 
                                                           costA(group, snapshot); 
//--По складам
balanceB 'Кол-во начало' (Stock stock, Snapshot snapshot) =
    GROUP  SUM balanceB (Sku sku, stock, snapshot); 
netWeightB 'Вес начало' (Stock stock, Snapshot snapshot) =
    GROUP  SUM netWeightB (Sku sku, stock, snapshot);        
sumB 'Сумма начало' (Stock stock, Snapshot snapshot) =
    GROUP SUM sumB (Sku sku, stock, snapshot);        
costB 'Себестоимость начало' (Stock stock, Snapshot snapshot) =
    GROUP SUM costB (Sku sku, stock, snapshot); 
VATSupplierB 'НДС поставщика начало' (Stock stock, Snapshot snapshot) =
    GROUP SUM VATSupplierB (Sku sku, stock, snapshot); 
costVATSupplierB 'С/С с НДС начало' = VATSupplierB(Stock stock, Snapshot snapshot) (+) 
                                                         costB(stock, snapshot);         
            
inQuantity 'Кол-во приход' (Stock stock, Snapshot snapshot) =
    GROUP  SUM inQuantity (Sku sku, stock, snapshot); 
inNetWeight 'Вес приход' (Stock stock, Snapshot snapshot) =
    GROUP  SUM inNetWeight (Sku sku, stock, snapshot);     
inSum 'Сумма приход' (Stock stock, Snapshot snapshot) =
    GROUP SUM inSum (Sku sku, stock, snapshot);      
 
outQuantity 'Кол-во расход' (Stock stock, Snapshot snapshot) =
    GROUP  SUM outQuantity (Sku sku, stock, snapshot); 
outNetWeight 'Вес расход' (Stock stock, Snapshot snapshot) =
    GROUP  SUM outNetWeight (Sku sku, stock, snapshot);         
outSum 'Сумма расход' (Stock stock, Snapshot snapshot) =
    GROUP SUM outSum (Sku sku, stock, snapshot);      
    
balanceA 'Кол-во конец' (Stock stock, Snapshot snapshot) =
    GROUP  SUM balanceA (Sku sku, stock, snapshot); 
netWeightA 'Вес конец' (Stock stock, Snapshot snapshot) =
    GROUP  SUM netWeightA (Sku sku, stock, snapshot);        
sumA 'Сумма конец' (Stock stock, Snapshot snapshot) =
    GROUP SUM sumA (Sku sku, stock, snapshot);   
costA 'Себестоимость конец' (Stock stock, Snapshot snapshot) =
    GROUP SUM costA (Sku sku, stock, snapshot);    
VATSupplierA 'НДС поставщика конец' (Stock stock, Snapshot snapshot) =
    GROUP SUM VATSupplierA (Sku sku, stock, snapshot);    
costVATSupplierA 'С/С с НДС конец' = VATSupplierA(Stock stock, Snapshot snapshot) (+) 
                                                        costA(stock, snapshot);         
//--По складам на дату        
balanceB 'Кол-во начало' (Stock stock, Snapshot snapshot, DATE date) =
    GROUP  SUM balanceB (Sku sku, stock, snapshot, date); 
netWeightB 'Вес начало' (Stock stock, Snapshot snapshot, DATE date) =
    GROUP  SUM netWeightB (Sku sku, stock, snapshot, date);             
sumB 'Сумма начало' (Stock stock, Snapshot snapshot, DATE date) =
    GROUP SUM sumB (Sku sku, stock, snapshot, date);       
costB 'Себестоимость начало' (Stock stock, Snapshot snapshot, DATE date) =
    GROUP SUM costB (Sku sku, stock, snapshot, date);    
VATSupplierB 'НДС поставщика начало' (Stock stock, Snapshot snapshot, DATE date) =
    GROUP SUM VATSupplierB (Sku sku, stock, snapshot, date);     
costVATSupplierB 'С/С с НДС начало' = VATSupplierB(Stock stock, Snapshot snapshot, DATE date) (+) 
                                                             costB(stock, snapshot, date);         
    
inQuantity 'Кол-во приход' (Stock stock, Snapshot snapshot, DATE date) =
    GROUP  SUM inQuantity (Sku sku, stock, snapshot, date); 
inNetWeight 'Вес приход' (Stock stock, Snapshot snapshot, DATE date) =
    GROUP  SUM inNetWeight (Sku sku, stock, snapshot, date);     
inSum 'Сумма приход' (Stock stock, Snapshot snapshot, DATE date) =
    GROUP SUM inSum (Sku sku, stock, snapshot, date);      
 
outQuantity 'Кол-во расход' (Stock stock, Snapshot snapshot, DATE date) =
    GROUP  SUM outQuantity (Sku sku, stock, snapshot, date); 
outNetWeight 'Вес расход' (Stock stock, Snapshot snapshot, DATE date) =
    GROUP  SUM outNetWeight (Sku sku, stock, snapshot, date);         
outSum 'Сумма расход' (Stock stock, Snapshot snapshot, DATE date) =
    GROUP SUM outSum (Sku sku, stock, snapshot, date);      
    
balanceA 'Кол-во конец' (Stock stock, Snapshot snapshot, DATE date) =
    GROUP  SUM balanceA (Sku sku, stock, snapshot, date); 
netWeightA 'Вес конец' (Stock stock, Snapshot snapshot, DATE date) =
    GROUP  SUM netWeightA (Sku sku, stock, snapshot, date);        
sumA 'Сумма конец' (Stock stock, Snapshot snapshot, DATE date) =
    GROUP SUM sumA (Sku sku, stock, snapshot, date);  
costA 'Себестоимость конец' (Stock stock, Snapshot snapshot, DATE date) =
    GROUP SUM costA (Sku sku, stock, snapshot, date);    
VATSupplierA 'НДС поставщика конец' (Stock stock, Snapshot snapshot, DATE date) =
    GROUP SUM VATSupplierA (Sku sku, stock, snapshot, date);     
costVATSupplierA 'С/С с НДС конец' = VATSupplierA(Stock stock, Snapshot snapshot, DATE date) (+) 
                                                             costA(stock, snapshot, date);   
                                                                   
nameBalanceQB (Stock st) = CONCAT ' ', name(st), ' (кол-во начало)';
nameNetWeightB (Stock st) = CONCAT ' ', name(st), ' (вес начало)';
nameSumB (Stock st) = CONCAT ' ', name(st), ' (сумма начало)';
nameCostB (Stock st) = CONCAT ' ', name(st), ' (себестоимость начало)';
nameCostVATSupplierB (Stock st) = CONCAT ' ', name(st), ' (с/с с НДС начало)';
nameVATSupplierB (Stock st) = CONCAT ' ', name(st), ' (НДС поставщика начало)';
nameInQuantity (Stock st) = CONCAT ' ', name(st), ' (кол-во приход)';
nameInNetWeight (Stock st) = CONCAT ' ', name(st), ' (вес приход)';
nameInSum(Stock st) = CONCAT ' ', name(st), ' (сумма приход)';        
nameOutQuantity (Stock st) = CONCAT ' ', name(st), ' (кол-во расход)';
nameOutNetWeight (Stock st) = CONCAT ' ', name(st), ' (вес расход)';
nameOutSum (Stock st) = CONCAT ' ', name(st), ' (сумма расход)';
nameBalanceQA (Stock st) = CONCAT ' ', name(st), ' (кол-во конец)';
nameNetWeightA (Stock st) = CONCAT ' ', name(st), ' (вес конец)';
nameSumA (Stock st) = CONCAT ' ', name(st), ' (сумма конец)';
nameCostA (Stock st) = CONCAT ' ', name(st), ' (себестоимость конец)';   
nameCostVATSupplierA (Stock st) = CONCAT ' ', name(st), ' (с/с с НДС конец)'; 
nameVATSupplierA (Stock st) = CONCAT ' ', name(st), ' (НДС поставщика конец)';
    
//------------------------------ Batch -------------------------------//

TABLE batchStockSnapshot (Batch, Stock, Snapshot);  
balanceB 'Кол-во начало' = DATA NUMERIC[14,3] (Batch, Stock, Snapshot);
netWeightB 'Вес начало' = DATA NUMERIC[14,3] (Batch, Stock, Snapshot);
sumB 'Себестоимость начало' = DATA NUMERIC[16,2] (Batch, Stock, Snapshot);
VATSupplierB 'НДС поставщика начало' = DATA NUMERIC[16,2] (Batch, Stock, Snapshot);
sumVATSupplierB 'С/С с НДС начало' = VATSupplierB(Batch batch, Stock stock, Snapshot snapshot) (+)
                                                             sumB(batch, stock, snapshot);

inQuantity 'Кол-во приход' = DATA NUMERIC[14,3] (Batch, Stock, Snapshot);
inNetWeight 'Вес приход' = DATA NUMERIC[14,3] (Batch, Stock, Snapshot);
inSum 'Себестоимость приход' = DATA NUMERIC[16,2] (Batch, Stock, Snapshot);

outQuantity 'Кол-во расход' = DATA NUMERIC[14,3] (Batch, Stock, Snapshot);
outNetWeight 'Вес расход' = DATA NUMERIC[14,3] (Batch, Stock, Snapshot);
outSum 'Себестоимость расход' = DATA NUMERIC[16,2] (Batch, Stock, Snapshot);

balanceA 'Кол-во конец' = DATA NUMERIC[14,3] (Batch, Stock, Snapshot);
netWeightA 'Вес конец' = DATA NUMERIC[14,3] (Batch, Stock, Snapshot);
sumA 'Себестоимость конец' = DATA NUMERIC[16,2] (Batch, Stock, Snapshot);
VATSupplierA 'НДС поставщика конец' = DATA NUMERIC[16,2] (Batch, Stock, Snapshot);
sumVATSupplierA 'С/С с НДС конец' = VATSupplierA(Batch batch, Stock stock, Snapshot snapshot) (+)
                                                             sumA(batch, stock, snapshot);

//-- По поставщикам
balanceBBatch 'Кол-во начало' (supplier, Snapshot snapshot) =
    GROUP SUM balanceB (Batch batch, Stock stock, snapshot) BY supplier(batch);
netWeightBBatch 'Вес начало' (supplier, Snapshot snapshot) =
    GROUP SUM netWeightB (Batch batch, Stock stock, snapshot) BY supplier(batch);        
sumBBatch 'Себестоимость начало' (supplier, Snapshot snapshot) =
    GROUP SUM sumB (Batch batch, Stock stock, snapshot) BY supplier(batch); 
VATSupplierBBatch 'НДС поставщика начало' (supplier, Snapshot snapshot) =
    GROUP SUM VATSupplierB (Batch batch, Stock stock, snapshot) BY supplier(batch);     
sumVATSupplierBBatch 'С/С с НДС начало' = VATSupplierBBatch(LegalEntity supplier, Snapshot snapshot) (+)
                                                                sumBBatch(supplier, snapshot);   
                                                                 
inQuantityBatch 'Кол-во приход' (supplier, Snapshot snapshot) =
    GROUP SUM inQuantity (Batch batch, Stock stock, snapshot) BY supplier(batch);
inNetWeightBatch 'Вес приход' (supplier, Snapshot snapshot) =
    GROUP SUM inNetWeight (Batch batch, Stock stock, snapshot) BY supplier(batch);        
inSumBatch 'Себестоимость приход' (supplier, Snapshot snapshot) =
    GROUP SUM inSum (Batch batch, Stock stock, snapshot) BY supplier(batch);     
 
outQuantityBatch 'Кол-во расход' (supplier, Snapshot snapshot) =
    GROUP SUM outQuantity (Batch batch, Stock stock, snapshot) BY supplier(batch);
outNetWeightBatch 'Вес расход' (supplier, Snapshot snapshot) =
    GROUP SUM outNetWeight (Batch batch, Stock stock, snapshot) BY supplier(batch);      
outSumBatch 'Себестоимость расход' (supplier, Snapshot snapshot) =
    GROUP SUM outSum (Batch batch, Stock stock, snapshot) BY supplier(batch);     
    
balanceABatch 'Кол-во конец' (supplier, Snapshot snapshot) =
    GROUP SUM balanceA (Batch batch, Stock stock, snapshot) BY supplier(batch);
netWeightABatch 'Вес конец' (supplier, Snapshot snapshot) =
    GROUP SUM netWeightA (Batch batch, Stock stock, snapshot) BY supplier(batch);        
sumABatch 'Себестоимость конец' (supplier, Snapshot snapshot) =
    GROUP SUM sumA (Batch batch, Stock stock, snapshot) BY supplier(batch);   
VATSupplierABatch 'НДС поставщика конец' (supplier, Snapshot snapshot) =
    GROUP SUM VATSupplierA (Batch batch, Stock stock, snapshot) BY supplier(batch);
sumVATSupplierABatch 'С/С с НДС конец' = VATSupplierABatch(LegalEntity supplier, Snapshot snapshot) (+)
                                                               sumABatch(supplier, snapshot);           
       
//-- По складу поставщика
balanceBBatchSupplier 'Кол-во начало' (supplier, Snapshot snapshot) =
    GROUP SUM balanceB (Batch batch, Stock stock, snapshot) BY supplierStock(batch);
netWeightBBatchSupplier 'Вес начало' (supplier, Snapshot snapshot) =
    GROUP SUM netWeightB (Batch batch, Stock stock, snapshot) BY supplierStock(batch);        
sumBBatchSupplier 'Себестоимость начало' (supplier, Snapshot snapshot) =
    GROUP SUM sumB (Batch batch, Stock stock, snapshot) BY supplierStock(batch); 
VATSupplierBBatchSupplier 'НДС поставщика начало' (supplier, Snapshot snapshot) =
    GROUP SUM VATSupplierB (Batch batch, Stock stock, snapshot) BY supplierStock(batch);     
sumVATSupplierBBatchSupplier 'С/С с НДС начало' = VATSupplierBBatchSupplier(Stock supplier, Snapshot snapshot) (+)
                                                                sumBBatchSupplier(supplier, snapshot);   
                                                                 
inQuantityBatchSupplier 'Кол-во приход' (supplier, Snapshot snapshot) =
    GROUP SUM inQuantity (Batch batch, Stock stock, snapshot) BY supplierStock(batch);
inNetWeightBatchSupplier 'Вес приход' (supplier, Snapshot snapshot) =
    GROUP SUM inNetWeight (Batch batch, Stock stock, snapshot) BY supplierStock(batch);        
inSumBatchSupplier 'Себестоимость приход' (supplier, Snapshot snapshot) =
    GROUP SUM inSum (Batch batch, Stock stock, snapshot) BY supplierStock(batch);     
 
outQuantityBatchSupplier 'Кол-во расход' (supplier, Snapshot snapshot) =
    GROUP SUM outQuantity (Batch batch, Stock stock, snapshot) BY supplierStock(batch);
outNetWeightBatchSupplier 'Вес расход' (supplier, Snapshot snapshot) =
    GROUP SUM outNetWeight (Batch batch, Stock stock, snapshot) BY supplierStock(batch);      
outSumBatchSupplier 'Себестоимость расход' (supplier, Snapshot snapshot) =
    GROUP SUM outSum (Batch batch, Stock stock, snapshot) BY supplierStock(batch);     
    
balanceABatchSupplier 'Кол-во конец' (supplier, Snapshot snapshot) =
    GROUP SUM balanceA (Batch batch, Stock stock, snapshot) BY supplierStock(batch);
netWeightABatchSupplier 'Вес конец' (supplier, Snapshot snapshot) =
    GROUP SUM netWeightA (Batch batch, Stock stock, snapshot) BY supplierStock(batch);        
sumABatchSupplier 'Себестоимость конец' (supplier, Snapshot snapshot) =
    GROUP SUM sumA (Batch batch, Stock stock, snapshot) BY supplierStock(batch);   
VATSupplierABatchSupplier 'НДС поставщика конец' (supplier, Snapshot snapshot) =
    GROUP SUM VATSupplierA (Batch batch, Stock stock, snapshot) BY supplierStock(batch);
sumVATSupplierABatchSupplier 'С/С с НДС конец' = VATSupplierABatchSupplier(Stock supplier, Snapshot snapshot) (+)
                                                               sumABatchSupplier(supplier, snapshot);       
    
//-- Выбор складов
TABLE snapshotStockGroup (Snapshot, StockGroup); 
TABLE snapshotStock (Snapshot, Stock);

allStockInclude 'Вкл' = DATA BOOLEAN (Snapshot);
dataInclude 'Вкл' = DATA BOOLEAN (Snapshot, StockGroup);
dataInclude 'Вкл' = DATA BOOLEAN (Snapshot, Stock);

levelParentInclude (Snapshot snapshot, StockGroup stockGroup) = GROUP
                                                              MIN level(stockGroup, StockGroup parent) IF dataInclude(snapshot, parent) MATERIALIZED;    
nearestParentInclude (Snapshot snapshot, StockGroup stockGroup) = stockGroup(stockGroup, levelParentInclude(snapshot, stockGroup));
nearestInclude (Snapshot snapshot, StockGroup stockGroup) = dataInclude(snapshot, nearestParentInclude (snapshot, stockGroup));

include 'Вкл' (Snapshot snapshot, StockGroup stockGroup) =
    OVERRIDE dataInclude(snapshot, stockGroup), 
             nearestInclude (snapshot, stockGroup),
             allStockInclude(snapshot) IF stockGroup IS StockGroup MATERIALIZED;

include 'Вкл' (Snapshot snapshot, Stock stock) =
    (OVERRIDE dataInclude(snapshot, stock),
             include(snapshot, stockGroup(stock))) IF isCompany(stock) MATERIALIZED;
countIncludeStocks (Snapshot r)= GROUP SUM 1 IF include(r,Stock st);

deleteIncludeStocks 'Сбросить отмеченные'(Snapshot r)  { 
    allStockInclude (r) <- NULL;
    dataInclude(r,StockGroup g) <- NULL;
    dataInclude (r,Stock st) <- NULL;
};
             
@defineBackgroundNearestBoolean(allStockInclude, include, snapshot, stock, nearestInclude, isCompany);

                      
countIncludeStock  (Snapshot snapshot) = GROUP SUM 1 IF include(snapshot, Stock stock);      


nameIncludeStockGroups 'Группы складов (все)' (Snapshot document)= 
    GROUP 
    CONCAT name(StockGroup stockGroup) IF dataInclude(document, stockGroup), ', ' 
    ORDER stockGroup
    CHARWIDTH 20;

nameIncludeStocks 'Склады (все)' (Snapshot document)= 
    GROUP 
    CONCAT name(Stock stock) IF dataInclude(document, stock), ', ' 
    ORDER stock
    CHARWIDTH 20;
    
nameIncludeStockGroupsStock 'Группы складов, склады (все)' (Snapshot document) = CONCAT '; ', nameIncludeStockGroups(document), 
                                                                                             nameIncludeStocks(document) CHARWIDTH 20;   
    
allStockInclude (Snapshot o) <- allStockInclude(snapshotType(o))
    WHEN CHANGED(snapshotType(o));  
dataInclude (Snapshot o,StockGroup g) <- dataInclude(snapshotType(o),g) IF g IS StockGroup
    WHEN CHANGED(snapshotType(o));           
dataInclude (Snapshot o,Stock g) <- dataInclude(snapshotType(o),g) IF g IS Stock
    WHEN CHANGED(snapshotType(o));    
            
//-- Выбор групп товара  
TABLE snapshotSkuGroup (Snapshot, SkuGroup);  
     
dataInclude 'Вкл' = DATA BOOLEAN (Snapshot, SkuGroup);

levelParentInclude (Snapshot snapshot, SkuGroup skuGroup) = GROUP
                                                              MIN level(skuGroup, SkuGroup parent) IF dataInclude(snapshot, parent) MATERIALIZED;    
nearestParentInclude (Snapshot snapshot, SkuGroup skuGroup) = skuGroup(skuGroup, levelParentInclude(snapshot, skuGroup));
nearestInclude (Snapshot snapshot, SkuGroup skuGroup) = dataInclude(snapshot, nearestParentInclude (snapshot, skuGroup));

include 'Вкл' (Snapshot snapshot, SkuGroup skuGroup) =
    OVERRIDE dataInclude(snapshot, skuGroup), 
             nearestInclude (snapshot, skuGroup) MATERIALIZED;                        

nameIncludeSkuGroups 'Группы товаров (все)' (Snapshot document)= 
    GROUP 
    CONCAT name(SkuGroup skuGroup) IF dataInclude(document, skuGroup), ', ' 
    ORDER skuGroup
    CHARWIDTH 20;
    
dataInclude (Snapshot o,SkuGroup g) <- dataInclude(snapshotType(o),g) IF g IS SkuGroup
    WHEN CHANGED(snapshotType(o));  

deleteIncludeSkuGroups 'Сбросить отмеченные'(Snapshot r)  { 
    dataInclude(r,SkuGroup g) <- NULL;
};

//-- Выбор поставщиков
TABLE snapshotLegalEntity (Snapshot, LegalEntity);

include 'Вкл' = DATA BOOLEAN (Snapshot, LegalEntity);

deleteIncludeLegalEntities 'Сбросить отмеченные'(Snapshot r)  { 
    include(r,LegalEntity l) <- NULL;
};

countIncludeLegalEntities (Snapshot s) = GROUP SUM 1 IF include(s, LegalEntity l) MATERIALIZED COMPLEX;

//-- Выбор групп брендов
TABLE snapshotBrand (Snapshot, Brand);

include 'Вкл' = DATA BOOLEAN (Snapshot, Brand);

deleteIncludeBrands 'Сбросить отмеченные'(Snapshot r)  { 
    include(r,Brand b) <- NULL;
};

countIncludeBrands (Snapshot s) = GROUP SUM 1 IF include(s, Brand b);

//-- Выбор товара
TABLE snapshotSku (Snapshot, Sku);

dataInclude 'Вкл' = DATA BOOLEAN (Snapshot, Sku);
dataExclude 'Искл.' = ABSTRACT BOOLEAN (Snapshot, Sku);
includeSkuGroup (Snapshot snapshot, Sku sku) = (GROUP MAX 1 IF include(snapshot, SkuGroup g) AND isParent(g, sku));
includeBrand (Snapshot snapshot, Sku sku) = include(snapshot, brand(sku)) OR NOT countIncludeBrands(snapshot);
includeLegalEntity (Snapshot snapshot, Sku sku) = include(snapshot, supplierLastOrderBatch(sku)) OR NOT countIncludeLegalEntities(snapshot);

//skip = ABSTRACT BOOLEAN (Snapshot, Sku);

filterLocal = DATA LOCAL BOOLEAN ();
includeLocal = DATA LOCAL BOOLEAN (Sku);

//include 'Вкл' (Snapshot snapshot, Sku sku) =
//    (includeSkuGroup(snapshot, sku) AND (NOT filterLocal() OR includeLocal(sku))) OR dataInclude(snapshot, sku);

include 'Вкл' (Snapshot snapshot, Sku sku) =
    ((includeSkuGroup(snapshot, sku) AND (NOT filterLocal() OR includeLocal(sku))) OR dataInclude(snapshot, sku)) AND NOT dataExclude(snapshot,sku);
    
    //OVERRIDE dataInclude(snapshot, sku),
             //(includeSkuGroup(snapshot, sku) AND includeBrand(snapshot, sku)) AND NOT skip(snapshot, sku);
             
countIncludeSku 'Вкл' (Snapshot snapshot) = GROUP SUM 1 IF include(snapshot, Sku sku);

deleteIncludeSkus 'Сбросить отмеченные'(Snapshot r)  { 
    dataInclude(r,Sku b) <- NULL;
};

addCommaBarcodeId 'Список ШК' = DATA LOCAL ISTRING[4000]() CHARWIDTH 30 NOFLEX;

addCommaBarcodeId 'Добавить' (Snapshot s)  { 
    IF addCommaBarcodeId() THEN {
        dataInclude(s, Sku sku) <- TRUE WHERE [GROUP SUM 1 IF isWordInCSV(id(Barcode barcode), replace(addCommaBarcodeId(),' ',',')) BY sku(barcode)](sku);
        addCommaBarcodeId() <- NULL;
    }
}

maxCountRowSnapshots 'Максимальное кол-во записей в аналитическом отчете' = DATA INTEGER ();

EXTEND FORM options
    PROPERTIES maxCountRowSnapshots();
    
DESIGN options{
    stock1 {
        MOVE PROPERTY (maxCountRowSnapshots());
    }
}
    
//------------------------------- ACTION -------------------------------//   
overTakeFromTo ABSTRACT LIST ( Snapshot, DATE, DATE); 
overTakeSkuFromTo ABSTRACT LIST ( Snapshot, DATE, DATE);
overTakeBatchFromTo ABSTRACT LIST ( Snapshot, DATE, DATE);

status 'Статус отчета' (Snapshot snapshot) = CASE
                                          WHEN finishTime(snapshot) THEN 'Сформирован'
                                          WHEN snapshot IS Snapshot THEN 'Не сформирован'
                                          CHARWIDTH 10
                                      ;
backgroundStatus 'Цвет' (Snapshot snapshot) =  CASE                                             
                                          WHEN finishTime(snapshot) THEN RGB(212,255,212)
                                          WHEN snapshot IS Snapshot THEN RGB(255,200,216)
                                      ;
//overNetWeightSkuBatch (batch)= OVERRIDE overNetWeightSku(skuBatch(batch)), (sumNetWeightInvoiceDetail(invoiceDetailBatch(batch))/(quantityInvoiceDetail(invoiceDetailBatch(batch)) IF quantityInvoiceDetail(invoiceDetailBatch(batch))!=0));

singleStock = DATA LOCAL Stock();
excludeSku  ABSTRACT LIST (Snapshot);
totalReset ABSTRACT LIST(Snapshot);

totalReset(Snapshot snapshot) + {
    balanceA(Sku sku, Stock stock, snapshot) <- NULL;
    balanceA(SkuGroup skuGroup, Stock stock, snapshot) <- NULL;
    inQuantity(Sku sku, Stock stock, snapshot) <- NULL;
    inQuantity(SkuGroup skuGroup, Stock stock, snapshot) <- NULL;
    outQuantity(Sku sku, Stock stock, snapshot) <- NULL;
    outQuantity(SkuGroup skuGroup, Stock stock, snapshot) <- NULL;
    balanceB(Sku sku, Stock stock, snapshot) <- NULL;
    balanceB(SkuGroup skuGroup, Stock stock, snapshot) <- NULL;
    sumA(Sku sku, Stock stock, snapshot) <- NULL;
    sumA(SkuGroup skuGroup, Stock stock, snapshot) <- NULL;
    inSum(Sku sku, Stock stock, snapshot) <- NULL;
    inSum(SkuGroup skuGroup, Stock stock, snapshot) <- NULL;
    outSum(Sku sku, Stock stock, snapshot) <- NULL;
    outSum(SkuGroup skuGroup, Stock stock, snapshot) <- NULL;
    sumB(Sku sku, Stock stock, snapshot) <- NULL;
    sumB(SkuGroup skuGroup, Stock stock, snapshot) <- NULL;
    costA(Sku sku, Stock stock, snapshot) <- NULL;
    costA(SkuGroup skuGroup, Stock stock, snapshot) <- NULL;
    costB(Sku sku, Stock stock, snapshot) <- NULL;
    costB(SkuGroup skuGroup, Stock stock, snapshot) <- NULL;
    VATSupplierA(Sku sku, Stock stock, snapshot) <- NULL;
    VATSupplierA(SkuGroup skuGroup, Stock stock, snapshot) <- NULL;
    VATSupplierB(Sku sku, Stock stock, snapshot) <- NULL;
    VATSupplierB(SkuGroup skuGroup, Stock stock, snapshot) <- NULL;
    netWeightA(Sku sku, Stock stock, snapshot) <- NULL;
    netWeightA(SkuGroup skuGroup, Stock stock, snapshot) <- NULL;
    inNetWeight(Sku sku, Stock stock, snapshot) <- NULL;
    inNetWeight(SkuGroup skuGroup, Stock stock, snapshot) <- NULL;
    outNetWeight(Sku sku, Stock stock, snapshot) <- NULL;
    outNetWeight(SkuGroup skuGroup, Stock stock, snapshot) <- NULL;
    netWeightB(Sku sku, Stock stock, snapshot) <- NULL;
    netWeightB(SkuGroup skuGroup, Stock stock, snapshot) <- NULL;
    inQuantity(Sku sku, Stock stock, snapshot, DATE date) <- NULL;
    outQuantity(Sku sku, Stock stock, snapshot, DATE date) <- NULL;
    inSum(Sku sku, Stock stock, snapshot, DATE date) <- NULL;
    outSum(Sku sku, Stock stock, snapshot, DATE date) <- NULL;
    inNetWeight(Sku sku, Stock stock, snapshot, DATE date) <- NULL;
    outNetWeight(Sku sku, Stock stock, snapshot, DATE date) <- NULL;
    balanceB(Sku sku, Stock stock, snapshot, DATE date) <- NULL;
    sumB(Sku sku, Stock stock, snapshot, DATE date) <- NULL;
    balanceA(Sku sku, Stock stock, snapshot, DATE date) <- NULL;
    sumA(Sku sku, Stock stock, snapshot, DATE date) <- NULL;
    netWeightB(Sku sku, Stock stock, snapshot, DATE date)  <- NULL;
    netWeightA(Sku sku, Stock stock, snapshot, DATE date) <- NULL;
    costB(Sku sku, Stock stock, snapshot, DATE date) <- NULL;
    costA(Sku sku, Stock stock, snapshot, DATE date) <- NULL;
    VATSupplierB(Sku sku, Stock stock, snapshot, DATE date) <- NULL;
    VATSupplierA(Sku sku, Stock stock, snapshot, DATE date) <- NULL;
    balanceA(Batch batch, Stock stock, snapshot) <- NULL;
    inQuantity(Batch batch, Stock stock, snapshot) <- NULL;
    outQuantity(Batch batch, Stock stock, snapshot) <- NULL;
    balanceB(Batch batch, Stock stock, snapshot) <- NULL;
    inSum(Batch batch, Stock stock, snapshot) <- NULL;
    outSum(Batch batch, Stock stock, snapshot) <- NULL;
    sumA(Batch batch, Stock stock, snapshot) <- NULL;
    sumB(Batch batch, Stock stock, snapshot) <- NULL;
    VATSupplierA(Batch batch, Stock stock, snapshot) <- NULL;
    VATSupplierB(Batch batch, Stock stock, snapshot) <- NULL;
    netWeightA(Batch batch, Stock stock, snapshot) <- NULL;
    inNetWeight(Batch batch, Stock stock, snapshot) <- NULL;
    outNetWeight(Batch batch, Stock stock, snapshot) <- NULL;
    netWeightB(Batch batch, Stock stock, snapshot) <- NULL;
    
}

takeFromTo(Snapshot snapshot, DATE dateFrom, DATE dateTo)   { 
    IF currentUser() IS Employee AND (GROUP SUM 1 IF include(snapshot, Stock st) AND NOT accessCompany(currentUser(), st)) THEN {
        dataInclude(snapshot, Stock st) <- include(snapshot, st) AND accessCompany(currentUser(), st);
        allStockInclude(snapshot) <- NULL;
        dataInclude(snapshot, StockGroup g) <- NULL;
    }
    APPLY;  
    startTime(snapshot) <- currentDateTime();
    
    filterLocal() <- NULL;
    includeLocal(Sku s) <- NULL;
    IF countIncludeBrands(snapshot) THEN {
        filterLocal() <- TRUE;
        includeLocal(Sku sku) <- include(snapshot, brand(sku)) WHERE include(snapshot, brand(sku));
    }
    IF countIncludeLegalEntities(snapshot) THEN {
        IF filterLocal() THEN {
            includeLocal(Sku sku) <- TRUE WHERE includeLocal(sku) AND (GROUP SUM 1 IF include(snapshot, supplierLastOrderBatch(sku, Stock st)) AND include(snapshot, st));
        } ELSE {
            filterLocal() <- TRUE;
            includeLocal(Sku sku) <- TRUE WHERE (GROUP SUM 1 IF include(snapshot, supplierLastOrderBatch(sku, Stock st)) AND include(snapshot, st));
        } 
    }
    excludeSku(snapshot);
    singleStock() <- (GROUP MAX Stock stock IF include(snapshot, stock) AND countIncludeStocks(snapshot) == 1);
       
    IF countIncludeSku(snapshot) AND countIncludeStock(snapshot) THEN {
        IF maxCountRowSnapshots() AND  maxCountRowSnapshots() < countIncludeSku(snapshot) * countIncludeStock(snapshot) THEN {
            MESSAGE 'Количество записей больше заданного максимального количества в настройках';
        } ELSE {
            APPLY {
                totalReset(snapshot);                
                IF isQuantity(snapshot) THEN {         
                        
                    IF isBalanceA(snapshot) THEN {
                        IF singleStock() THEN {
                            balanceA(Sku sku, Stock stock, snapshot) <- NUMERIC[14,3](balanceA(sku, stock, dateTo)) 
                                WHERE stock == singleStock() AND include(snapshot, sku) AND balanceA(sku, stock, dateTo);
                        } ELSE {
                            balanceA(Sku sku, Stock stock, snapshot) <- NUMERIC[14,3](balanceA(sku, stock, dateTo)) 
                                WHERE include(snapshot, stock) AND include(snapshot, sku) AND balanceA(sku, stock, dateTo);
                        }
                        balanceA(SkuGroup skuGroup, Stock stock, snapshot) <- NUMERIC[14,3](GROUP SUM balanceA(Sku sku, stock, snapshot) IF isParent(skuGroup, sku))
                            WHERE (GROUP SUM balanceA(Sku sku, stock, snapshot) IF isParent(skuGroup, sku));
                    }
                            
                    IF isIn(snapshot) THEN {
                        IF singleStock() THEN {
                            inQuantity(Sku sku, Stock stock, snapshot) <- NUMERIC[14,3](quantitySumIn(sku, stock, dateFrom, dateTo)) 
                                WHERE stock == singleStock() AND include(snapshot, sku) AND quantitySumIn(sku, stock, dateFrom, dateTo);
                        } ELSE {
                            inQuantity(Sku sku, Stock stock, snapshot) <- NUMERIC[14,3](quantitySumIn(sku, stock, dateFrom, dateTo)) 
                                WHERE include(snapshot, stock) AND include(snapshot, sku) AND quantitySumIn(sku, stock, dateFrom, dateTo);
                        }
                        inQuantity(SkuGroup skuGroup, Stock stock, snapshot) <- NUMERIC[14,3](GROUP SUM inQuantity(Sku sku, stock, snapshot) IF isParent(skuGroup, sku))
                            WHERE (GROUP SUM inQuantity(Sku sku, stock, snapshot) IF isParent(skuGroup, sku));                        
                    }
        
                    IF isOut(snapshot) THEN {
                        IF singleStock() THEN {
                            outQuantity(Sku sku, Stock stock, snapshot) <- NUMERIC[14,3](quantitySumOut(sku, stock, dateFrom, dateTo)) 
                                WHERE stock == singleStock() AND include(snapshot, sku) AND quantitySumOut(sku, stock, dateFrom, dateTo);
                        } ELSE {
                            outQuantity(Sku sku, Stock stock, snapshot) <- NUMERIC[14,3](quantitySumOut(sku, stock, dateFrom, dateTo)) 
                                WHERE include(snapshot, stock) AND include(snapshot, sku) AND quantitySumOut(sku, stock, dateFrom, dateTo);
                        }
                        outQuantity(SkuGroup skuGroup, Stock stock, snapshot) <- NUMERIC[14,3](GROUP SUM outQuantity(Sku sku, stock, snapshot) IF isParent(skuGroup, sku))
                            WHERE (GROUP SUM outQuantity(Sku sku, stock, snapshot) IF isParent(skuGroup, sku));  
                    }
                    
                    IF isBalanceB(snapshot) THEN {
                        IF isBalanceA(snapshot) AND isIn(snapshot) AND isOut(snapshot) THEN {
                            IF singleStock() THEN {
                                balanceB(Sku sku, Stock stock, snapshot) <- (balanceA(sku, stock, snapshot) (-) inQuantity(sku, stock, snapshot) (+) outQuantity(sku, stock, snapshot))
                                    WHERE stock == singleStock() AND include(snapshot, sku) AND (balanceA(sku, stock, snapshot) (-) inQuantity(sku, stock, snapshot) (+) outQuantity(sku, stock, snapshot));
                            } ELSE {
                                balanceB(Sku sku, Stock stock, snapshot) <- (balanceA(sku, stock, snapshot) (-) inQuantity(sku, stock, snapshot) (+) outQuantity(sku, stock, snapshot))
                                    WHERE include(snapshot, stock) AND include(snapshot, sku) AND (balanceA(sku, stock, snapshot) (-) inQuantity(sku, stock, snapshot) (+) outQuantity(sku, stock, snapshot));
                            }
                        } ELSE {
                            IF singleStock() THEN {
                                balanceB(Sku sku, Stock stock, snapshot) <- NUMERIC[14,3](balanceB(sku, stock, dateFrom)) 
                                    WHERE stock == singleStock() AND include(snapshot, sku) AND balanceB(sku, stock, dateFrom);
                            } ELSE {
                                balanceB(Sku sku, Stock stock, snapshot) <- NUMERIC[14,3](balanceB(sku, stock, dateFrom)) 
                                    WHERE include(snapshot, stock) AND include(snapshot, sku) AND balanceB(sku, stock, dateFrom);
                            }
                        }
                        balanceB(SkuGroup skuGroup, Stock stock, snapshot) <- NUMERIC[14,3](GROUP SUM balanceB(Sku sku, stock, snapshot) IF isParent(skuGroup, sku))
                            WHERE (GROUP SUM balanceB(Sku sku, stock, snapshot) IF isParent(skuGroup, sku));
                    }
                }
                IF isSum(snapshot) THEN {
                    IF isBalanceA(snapshot) THEN {
                        IF singleStock() THEN {
                            sumA(Sku sku, Stock stock, snapshot) <- NUMERIC[16,2](sumA(sku, stock, dateTo)) 
                                WHERE stock == singleStock() AND include(snapshot, sku) AND sumA(sku, stock, dateTo);
                        } ELSE {
                            sumA(Sku sku, Stock stock, snapshot) <- NUMERIC[16,2](sumA(sku, stock, dateTo)) 
                                WHERE include(snapshot, stock) AND include(snapshot, sku) AND sumA(sku, stock, dateTo);
                        }
                        sumA(SkuGroup skuGroup, Stock stock, snapshot) <- NUMERIC[16,2](GROUP SUM sumA(Sku sku, stock, snapshot) IF isParent(skuGroup, sku))
                            WHERE (GROUP SUM sumA(Sku sku, stock, snapshot) IF isParent(skuGroup, sku));
                    }
        
                    IF isIn(snapshot) THEN {
                        IF singleStock() THEN {
                            inSum(Sku sku, Stock stock, snapshot) <- NUMERIC[16,2](sumIn(sku, stock, dateFrom, dateTo)) 
                                WHERE stock == singleStock() AND include(snapshot, sku) AND sumIn(sku, stock, dateFrom, dateTo);
                        } ELSE {
                            inSum(Sku sku, Stock stock, snapshot) <- NUMERIC[16,2](sumIn(sku, stock, dateFrom, dateTo)) 
                                WHERE include(snapshot, stock) AND include(snapshot, sku) AND sumIn(sku, stock, dateFrom, dateTo);
                        }
                        inSum(SkuGroup skuGroup, Stock stock, snapshot) <- NUMERIC[16,2](GROUP SUM inSum(Sku sku, stock, snapshot) IF isParent(skuGroup, sku))
                            WHERE (GROUP SUM inSum(Sku sku, stock, snapshot) IF isParent(skuGroup, sku));
                    }
        
                    IF isOut(snapshot) THEN {
                        IF singleStock() THEN {
                            outSum(Sku sku, Stock stock, snapshot) <- NUMERIC[16,2](sumOut(sku, stock, dateFrom, dateTo)) 
                                WHERE stock == singleStock() AND include(snapshot, sku) AND sumOut(sku, stock, dateFrom, dateTo);
                        } ELSE {
                            outSum(Sku sku, Stock stock, snapshot) <- NUMERIC[16,2](sumOut(sku, stock, dateFrom, dateTo)) 
                                WHERE include(snapshot, stock) AND include(snapshot, sku) AND sumOut(sku, stock, dateFrom, dateTo);
                        }
                        outSum(SkuGroup skuGroup, Stock stock, snapshot) <- NUMERIC[16,2](GROUP SUM outSum(Sku sku, stock, snapshot) IF isParent(skuGroup, sku))
                            WHERE (GROUP SUM outSum(Sku sku, stock, snapshot) IF isParent(skuGroup, sku));
                    }
                    
                    IF isBalanceB(snapshot) THEN {
                        IF isBalanceA(snapshot) AND isIn(snapshot) AND isOut(snapshot) THEN {
                            IF singleStock() THEN {
                                sumB(Sku sku, Stock stock, snapshot) <- (sumA(sku, stock, snapshot) (-) inSum(sku, stock, snapshot) (+) outSum(sku, stock, snapshot))
                                    WHERE stock == singleStock() AND include(snapshot, sku) AND (sumA(sku, stock, snapshot) (-) inSum(sku, stock, snapshot) (+) outSum(sku, stock, snapshot));
                            } ELSE {
                                sumB(Sku sku, Stock stock, snapshot) <- (sumA(sku, stock, snapshot) (-) inSum(sku, stock, snapshot) (+) outSum(sku, stock, snapshot))
                                    WHERE include(snapshot, stock) AND include(snapshot, sku) AND (sumA(sku, stock, snapshot) (-) inSum(sku, stock, snapshot) (+) outSum(sku, stock, snapshot));
                            }
                        } ELSE {
                            IF singleStock() THEN {
                                sumB(Sku sku, Stock stock, snapshot) <- NUMERIC[16,2](sumB(sku, stock, dateFrom)) 
                                    WHERE stock == singleStock() AND include(snapshot, sku) AND sumB(sku, stock, dateFrom);
                            } ELSE {
                                sumB(Sku sku, Stock stock, snapshot) <- NUMERIC[16,2](sumB(sku, stock, dateFrom)) 
                                    WHERE include(snapshot, stock) AND include(snapshot, sku) AND sumB(sku, stock, dateFrom);
                            }
                        }
                        sumB(SkuGroup skuGroup, Stock stock, snapshot) <- NUMERIC[16,2](GROUP SUM sumB(Sku sku, stock, snapshot) IF isParent(skuGroup, sku))
                            WHERE (GROUP SUM sumB(Sku sku, stock, snapshot) IF isParent(skuGroup, sku));  
                    }
                                
                }   
                IF isCost(snapshot) THEN {
                    IF isBalanceA(snapshot) THEN {
                        IF singleStock() THEN {
                            costA(Sku sku, Stock stock, snapshot) <- NUMERIC[16,2](costSumA(sku, stock, dateTo)) 
                                WHERE stock == singleStock() AND include(snapshot, sku) AND costSumA(sku, stock, dateTo);
                        } ELSE { 
                            costA(Sku sku, Stock stock, snapshot) <- NUMERIC[16,2](costSumA(sku, stock, dateTo)) 
                                WHERE include(snapshot, stock) AND include(snapshot, sku) AND costSumA(sku, stock, dateTo);
                        }
                        costA(SkuGroup skuGroup, Stock stock, snapshot) <- NUMERIC[16,2](GROUP SUM costA(Sku sku, stock, snapshot) IF isParent(skuGroup, sku))
                            WHERE (GROUP SUM costA(Sku sku, stock, snapshot) IF isParent(skuGroup, sku));
                    }
                                       
                    IF isBalanceB(snapshot) THEN {
                        IF singleStock() THEN {
                            costB(Sku sku, Stock stock, snapshot) <- NUMERIC[16,2](costSumB(sku, stock, dateFrom)) 
                                WHERE stock == singleStock() AND include(snapshot, sku) AND costSumB(sku, stock, dateFrom);
                        } ELSE {
                            costB(Sku sku, Stock stock, snapshot) <- NUMERIC[16,2](costSumB(sku, stock, dateFrom)) 
                                WHERE include(snapshot, stock) AND include(snapshot, sku) AND costSumB(sku, stock, dateFrom);
                        }
                        costB(SkuGroup skuGroup, Stock stock, snapshot) <- NUMERIC[16,2](GROUP SUM costB(Sku sku, stock, snapshot) IF isParent(skuGroup, sku))
                            WHERE (GROUP SUM costB(Sku sku, stock, snapshot) IF isParent(skuGroup, sku));

                    }        
                }      
                IF isVATSupplier(snapshot) THEN {
                    IF isBalanceA(snapshot) THEN {
                        IF singleStock() THEN {
                            VATSupplierA(Sku sku, Stock stock, snapshot) <- NUMERIC[16,2](costSumA(sku, stock, dateTo)*valueVAT(sku,country(stock),dateTo)/100) 
                                WHERE stock == singleStock() AND include(snapshot, sku) AND costSumA(sku, stock, dateTo);
                        } ELSE {
                            VATSupplierA(Sku sku, Stock stock, snapshot) <- NUMERIC[16,2](costSumA(sku, stock, dateTo)*valueVAT(sku,country(stock),dateTo)/100) 
                                WHERE include(snapshot, stock) AND include(snapshot, sku) AND costSumA(sku, stock, dateTo);
                        }
                        VATSupplierA(SkuGroup skuGroup, Stock stock, snapshot) <- NUMERIC[16,2](GROUP SUM VATSupplierA(Sku sku, stock, snapshot) IF isParent(skuGroup, sku))
                            WHERE (GROUP SUM VATSupplierA(Sku sku, stock, snapshot) IF isParent(skuGroup, sku));
                    }
                    IF isBalanceB(snapshot) THEN {
                        IF singleStock() THEN {
                            VATSupplierB(Sku sku, Stock stock, snapshot) <- NUMERIC[16,2](costSumB(sku, stock, dateFrom)*valueVAT(sku,country(stock),dateTo)/100) 
                                WHERE stock == singleStock() AND include(snapshot, sku) AND costSumB(sku, stock, dateFrom);
                        } ELSE {
                            VATSupplierB(Sku sku, Stock stock, snapshot) <- NUMERIC[16,2](costSumB(sku, stock, dateFrom)*valueVAT(sku,country(stock),dateTo)/100) 
                                WHERE include(snapshot, stock) AND include(snapshot, sku) AND costSumB(sku, stock, dateFrom);
                        }
                        VATSupplierB(SkuGroup skuGroup, Stock stock, snapshot) <- NUMERIC[16,2](GROUP SUM VATSupplierB(Sku sku, stock, snapshot) IF isParent(skuGroup, sku))
                            WHERE (GROUP SUM VATSupplierB(Sku sku, stock, snapshot) IF isParent(skuGroup, sku));
                    }        
                } 
                IF isNetWeight(snapshot) THEN {                             
                    IF isBalanceA(snapshot) THEN {
                        netWeightA(Sku sku, Stock stock, snapshot) <- NUMERIC[14,3](balanceA(sku, stock, dateTo)*overNetWeight(sku)) 
                            WHERE include(snapshot, stock) AND include(snapshot, sku) AND balanceA(sku, stock, dateTo);
                        netWeightA(SkuGroup skuGroup, Stock stock, snapshot) <- NUMERIC[14,3](GROUP SUM netWeightA(Sku sku, stock, snapshot) IF isParent(skuGroup, sku))
                            WHERE (GROUP SUM netWeightA(Sku sku, stock, snapshot) IF isParent(skuGroup, sku));
                    }
                            
                    IF isIn(snapshot) THEN {
                        inNetWeight(Sku sku, Stock stock, snapshot) <- NUMERIC[14,3](quantitySumIn(sku, stock, dateFrom, dateTo)*overNetWeight(sku)) 
                            WHERE include(snapshot, stock) AND include(snapshot, sku) AND quantitySumIn(sku, stock, dateFrom, dateTo);
                        inNetWeight(SkuGroup skuGroup, Stock stock, snapshot) <- NUMERIC[14,3](GROUP SUM inNetWeight(Sku sku, stock, snapshot) IF isParent(skuGroup, sku))
                            WHERE (GROUP SUM inNetWeight(Sku sku, stock, snapshot) IF isParent(skuGroup, sku));
                    }
        
                    IF isOut(snapshot) THEN {
                        outNetWeight(Sku sku, Stock stock, snapshot) <- NUMERIC[14,3](quantitySumOut(sku, stock, dateFrom, dateTo)*overNetWeight(sku)) 
                            WHERE include(snapshot, stock) AND include(snapshot, sku) AND quantitySumOut(sku, stock, dateFrom, dateTo);
                        outNetWeight(SkuGroup skuGroup, Stock stock, snapshot) <- NUMERIC[14,3](GROUP SUM outNetWeight(Sku sku, stock, snapshot) IF isParent(skuGroup, sku))
                            WHERE (GROUP SUM outNetWeight(Sku sku, stock, snapshot) IF isParent(skuGroup, sku));
                    }
                    
                    IF isBalanceB(snapshot) THEN {
                        netWeightB(Sku sku, Stock stock, snapshot) <- NUMERIC[14,3](balanceB(sku, stock, dateFrom)*overNetWeight(sku)) 
                            WHERE include(snapshot, stock) AND include(snapshot, sku) AND balanceB(sku, stock, dateFrom);
                        netWeightB(SkuGroup skuGroup, Stock stock, snapshot) <- NUMERIC[14,3](GROUP SUM netWeightB(Sku sku, stock, snapshot) IF isParent(skuGroup, sku))
                            WHERE (GROUP SUM netWeightB(Sku sku, stock, snapshot) IF isParent(skuGroup, sku));    
                    }
                }                     
                             
                      
                IF isDate(snapshot) THEN {  
                    IF isQuantity(snapshot) THEN {
                        inQuantity(Sku sku, Stock stock, snapshot, DATE date) <- NUMERIC[14,3](quantityIn(sku, stock, date)) 
                            WHERE include(snapshot, stock) AND include(snapshot, sku) AND date AS DATE AND date >= (dateFrom AS DATE) 
                                AND date <= (dateTo AS DATE) AND quantityIn(sku, stock, date) AND isIn(snapshot);
                        outQuantity(Sku sku, Stock stock, snapshot, DATE date) <- NUMERIC[14,3](quantityOut(sku, stock, date)) 
                            WHERE include(snapshot, stock) AND include(snapshot, sku) AND date AS DATE AND date >= (dateFrom AS DATE) 
                                AND date <= (dateTo AS DATE) AND quantityOut(sku, stock, date) AND isOut(snapshot);
                    }               
                    IF isSum(snapshot) THEN {
                        inSum(Sku sku, Stock stock, snapshot, DATE date) <- NUMERIC[16,2](sumIn(sku, stock, date)) 
                            WHERE include(snapshot, stock) AND include(snapshot, sku) AND date AS DATE AND date >= (dateFrom AS DATE) 
                                AND date <= (dateTo AS DATE) AND sumIn(sku, stock, date) AND isOut(snapshot);
                        outSum(Sku sku, Stock stock, snapshot, DATE date) <- NUMERIC[16,2](sumOut(sku, stock, date)) 
                            WHERE include(snapshot, stock) AND include(snapshot, sku) AND date AS DATE AND date >= (dateFrom AS DATE) 
                                AND date <= (dateTo AS DATE) AND sumOut(sku, stock, date) AND isOut(snapshot);              
                    }               
                    IF isNetWeight(snapshot) THEN {                         
                        inNetWeight(Sku sku, Stock stock, snapshot, DATE date) <- NUMERIC[14,3](quantityIn(sku, stock, date)*overNetWeight(sku)) 
                            WHERE include(snapshot, stock) AND include(snapshot, sku) AND date AS DATE AND date >= (dateFrom AS DATE) 
                                AND date <= (dateTo AS DATE) AND quantityIn(sku, stock, date) AND isIn(snapshot);
                        outNetWeight(Sku sku, Stock stock, snapshot, DATE date) <- NUMERIC[14,3](quantityOut(sku, stock, date)*overNetWeight(sku)) 
                            WHERE include(snapshot, stock) AND include(snapshot, sku) AND date AS DATE AND date >= (dateFrom AS DATE) 
                                AND date <= (dateTo AS DATE) AND quantityOut(sku, stock, date) AND isOut(snapshot);
                    }
                    
                    LOCAL balance = NUMERIC[16,5] (Sku, Stock);
                    LOCAL balance = NUMERIC[16,5] (Batch, Stock);
                    LOCAL sumBalance = NUMERIC[18,4] (Sku, Stock);
                    LOCAL dateCur = DATE();           
                    dateCur() <- dateTo;   
                    IF (isQuantity(snapshot) OR isNetWeight(snapshot)) AND (isBalanceB(snapshot) OR isBalanceA(snapshot)) THEN {
                        IF singleStock() THEN {
                            balance(Sku sku,singleStock()) <- balanceA(sku,singleStock(),dateCur())
                                WHERE include(snapshot, sku) AND balanceA(sku, singleStock(), dateCur());
                        } ELSE {
                            balance(Sku sku,Stock stock) <- balanceA(sku,stock,dateCur())
                                WHERE include(snapshot, stock) AND include(snapshot, sku) AND balanceA(sku, stock, dateCur());                    
                        }                        
                    }
                    IF isSum(snapshot) AND (isBalanceB(snapshot) OR isBalanceA(snapshot)) THEN {
                        IF singleStock() THEN {
                            sumBalance(Sku sku,singleStock()) <- sumA(sku,singleStock(),dateCur())
                                WHERE include(snapshot, sku) AND sumA(sku, singleStock(), dateCur());
                        } ELSE {
                            sumBalance(Sku sku,Stock stock) <- sumA(sku,stock,dateCur())
                                WHERE include(snapshot, stock) AND include(snapshot, sku) AND sumA(sku, stock, dateCur());                    
                        }                        
                    }
                    IF (isCost(snapshot) OR isVATSupplier(snapshot)) AND (isBalanceB(snapshot) OR isBalanceA(snapshot)) THEN {
                        IF singleStock() THEN {
                            balance(Batch bt,singleStock()) <- balanceA(bt,singleStock(),dateCur())
                                WHERE include(snapshot, sku(bt)) AND balanceA(bt, singleStock(), dateCur());
                        } ELSE {
                            balance(Batch bt,Stock stock) <- balanceA(bt,stock,dateCur())
                                WHERE include(snapshot, stock) AND include(snapshot, sku(bt)) AND balanceA(bt, stock, dateCur());                    
                        }                
                    }
                                    
                    WHILE dateCur() >= dateFrom DO { // сделано так, иначе происходит зацикливание
                        IF isBalanceA(snapshot) THEN {
                            IF isQuantity(snapshot) THEN {
                                IF singleStock() THEN {
                                    balanceA(Sku sku, singleStock(), snapshot, dateCur()) <- NUMERIC[14,3](balance(sku, singleStock())) 
                                        WHERE balance(sku, singleStock());
                                } ELSE {
                                    balanceA(Sku sku, Stock stock, snapshot, dateCur()) <- NUMERIC[14,3](balance(sku, stock)) 
                                        WHERE balance(sku, stock);
                                }                        
                            }
                            IF isSum(snapshot) THEN {
                                IF singleStock() THEN {
                                    sumA(Sku sku, singleStock(), snapshot, dateCur()) <- NUMERIC[16,2](sumBalance(sku, singleStock())) 
                                        WHERE sumBalance(sku, singleStock());
                                } ELSE {
                                    sumA(Sku sku, Stock stock, snapshot, dateCur()) <- NUMERIC[16,2](sumBalance(sku, stock)) 
                                        WHERE sumBalance(sku, stock);
                                }                         
                            } 
                            IF isNetWeight(snapshot) THEN {
                                IF singleStock() THEN {
                                    netWeightA(Sku sku, singleStock(), snapshot, dateCur()) <- NUMERIC[14,3](balance(sku, singleStock())*overNetWeight(sku)) 
                                        WHERE balance(sku, singleStock());
                                } ELSE {
                                    netWeightA(Sku sku, Stock stock, snapshot, dateCur()) <- NUMERIC[14,3](balance(sku, stock)*overNetWeight(sku)) 
                                        WHERE balance(sku, stock);
                                }                              
                            } 
                            IF isCost(snapshot) THEN {
                                IF singleStock() THEN {
                                    costA(Sku sku, singleStock(), snapshot, dateCur()) <- NUMERIC[16,2](GROUP SUM balance(Batch bt, singleStock())*cost(bt) IF sku(bt)==sku) 
                                        WHERE include(snapshot, sku) AND (GROUP SUM balance(Batch bt, singleStock())*cost(bt) IF sku(bt)==sku);
                                } ELSE {
                                    costA(Sku sku, Stock stock, snapshot, dateCur()) <- NUMERIC[16,2](GROUP SUM balance(Batch bt, stock)*cost(bt) IF sku(bt)==sku) 
                                        WHERE include(snapshot, stock) AND include(snapshot, sku) AND (GROUP SUM balance(Batch bt, stock)*cost(bt) IF sku(bt)==sku);
    
                                }    
                                IF isVATSupplier(snapshot) THEN {
                                    IF singleStock() THEN {
                                        VATSupplierA(Sku sku, singleStock(), snapshot, dateCur()) <- NUMERIC[16,2](costA(sku, singleStock(), snapshot, dateCur())*valueVAT(sku,country(singleStock()),dateCur())/100) 
                                            WHERE include(snapshot, sku)  AND costA(sku, singleStock(), snapshot, dateCur());                                            
                                    } ELSE {
                                        VATSupplierA(Sku sku, Stock stock, snapshot, dateCur()) <- NUMERIC[16,2](costA(sku, stock, snapshot, dateCur())*valueVAT(sku,country(stock),dateCur())/100) 
                                            WHERE include(snapshot, stock) AND include(snapshot, sku)  AND costA(sku, stock, snapshot, dateCur());
        
                                    }                                                             
                                }                     
                            }        
                            IF isVATSupplier(snapshot) AND NOT isCost(snapshot) THEN {
                                IF singleStock() THEN {
                                    VATSupplierA(Sku sku, singleStock(), snapshot, dateCur()) <- NUMERIC[16,2]((GROUP SUM balance(Batch bt, singleStock())*cost(bt) IF sku(bt)==sku)*valueVAT(sku,country(singleStock()),dateCur())/100) 
                                        WHERE include(snapshot, sku)  AND (GROUP SUM balance(Batch bt, singleStock())*cost(bt) IF sku(bt)==sku);                                            
                                } ELSE {
                                    VATSupplierA(Sku sku, Stock stock, snapshot, dateCur()) <- NUMERIC[16,2]((GROUP SUM balance(Batch bt, stock)*cost(bt) IF sku(bt)==sku)*valueVAT(sku,country(stock),dateCur())/100) 
                                        WHERE include(snapshot, stock) AND include(snapshot, sku)  AND (GROUP SUM balance(Batch bt, stock)*cost(bt) IF sku(bt)==sku);
    
                                }                        
                            }                                                                                 
                        }                 
                        //-- Отнимаем движение за день
                        IF (isQuantity(snapshot) OR isNetWeight(snapshot)) AND (isBalanceB(snapshot) OR isBalanceA(snapshot)) THEN {
                            IF singleStock() THEN {
                                balance(Sku sku,singleStock()) <- balance(sku,singleStock()) (-) signedQuantity (sku,singleStock(),dateCur())
                                    WHERE include(snapshot, sku) AND signedQuantity (sku,singleStock(),dateCur());                                                                
                                    
                            } ELSE {
                                balance(Sku sku,Stock stock) <- balance(sku,stock)(-) signedQuantity (sku, stock, dateCur())
                                    WHERE include(snapshot, stock) AND include(snapshot, sku) AND signedQuantity(sku,stock,dateCur());                    
                            }                        
                        }
                        IF isSum(snapshot) AND (isBalanceB(snapshot) OR isBalanceA(snapshot)) THEN {
                            IF singleStock() THEN {
                                sumBalance(Sku sku,singleStock()) <- sumBalance(sku,singleStock()) (-) signedSum (sku,singleStock(),dateCur())
                                    WHERE include(snapshot, sku) AND signedSum (sku,singleStock(),dateCur());
                            } ELSE {
                                sumBalance(Sku sku,Stock stock) <- sumBalance(sku,stock)(-) signedSum (sku,stock,dateCur())
                                    WHERE include(snapshot, stock) AND include(snapshot, sku) AND signedSum (sku,stock,dateCur());                    
                            }                        
                        }
                        IF (isCost(snapshot) OR isVATSupplier(snapshot)) AND (isBalanceB(snapshot) OR isBalanceA(snapshot)) THEN {
                            IF singleStock() THEN {
                                balance(Batch bt,singleStock()) <- balance(bt,singleStock()) (-) signedQuantity (bt,singleStock(),dateCur())
                                    WHERE include(snapshot, sku(bt)) AND signedQuantity (bt,singleStock(),dateCur());                                                                
                                    
                            } ELSE {
                                balance(Batch bt,Stock stock) <- balance(bt,stock)(-) signedQuantity (bt, stock, dateCur())
                                    WHERE include(snapshot, stock) AND include(snapshot, sku(bt)) AND signedQuantity(bt,stock,dateCur());                    
                            }                         
                        }
                        //--                
                        IF isBalanceB(snapshot) THEN {
                            IF isQuantity(snapshot) THEN {
                                IF singleStock() THEN {
                                    balanceB(Sku sku, singleStock(), snapshot, dateCur()) <- NUMERIC[14,3](balance(sku, singleStock())) 
                                        WHERE include(snapshot, sku) AND balance(sku, singleStock());
                                } ELSE {
                                    balanceB(Sku sku, Stock stock, snapshot, dateCur()) <- NUMERIC[14,3](balance(sku, stock)) 
                                        WHERE include(snapshot, stock) AND include(snapshot, sku) AND balance(sku, stock);
                                }                       
                            }
                            IF isSum(snapshot) THEN {
                                IF singleStock() THEN {
                                    sumB(Sku sku, singleStock(), snapshot, dateCur()) <- NUMERIC[16,2](sumBalance(sku, singleStock())) 
                                        WHERE include(snapshot, sku) AND sumBalance(sku, singleStock());
                                } ELSE {
                                    sumB(Sku sku, Stock stock, snapshot, dateCur()) <- NUMERIC[16,2](sumBalance(sku, stock)) 
                                        WHERE include(snapshot, stock) AND include(snapshot, sku) AND sumBalance(sku, stock);
                                }                         
                            }
                            IF isNetWeight(snapshot) THEN {
                                IF singleStock() THEN {
                                    netWeightB(Sku sku, singleStock(), snapshot, dateCur()) <- NUMERIC[14,3](balance(sku, singleStock())*overNetWeight(sku)) 
                                        WHERE include(snapshot, sku) AND balance(sku, singleStock());
                                } ELSE {
                                    netWeightB(Sku sku, Stock stock, snapshot, dateCur()) <- NUMERIC[14,3](balance(sku, stock)*overNetWeight(sku)) 
                                        WHERE include(snapshot, stock) AND include(snapshot, sku) AND balance(sku, stock);
                                }                                                     
                            }   
                            IF isCost(snapshot) THEN {
                                IF singleStock() THEN {
                                    costB(Sku sku, singleStock(), snapshot, dateCur()) <- NUMERIC[16,2](GROUP SUM balance(Batch bt, singleStock())*cost(bt) IF sku(bt)==sku) 
                                        WHERE include(snapshot, sku) AND (GROUP SUM balance(Batch bt, singleStock())*cost(bt) IF sku(bt)==sku);
                                } ELSE {
                                    costB(Sku sku, Stock stock, snapshot, dateCur()) <- NUMERIC[16,2](GROUP SUM balance(Batch bt, stock)*cost(bt) IF sku(bt)==sku) 
                                        WHERE include(snapshot, stock) AND include(snapshot, sku) AND (GROUP SUM balance(Batch bt, stock)*cost(bt) IF sku(bt)==sku);
    
                                } 
                                IF isVATSupplier(snapshot) THEN {
                                    IF singleStock() THEN {
                                        VATSupplierB(Sku sku, singleStock(), snapshot, dateCur()) <- NUMERIC[16,2](costB(sku, singleStock(), snapshot, dateCur())*valueVAT(sku,country(singleStock()),dateCur())/100) 
                                            WHERE include(snapshot, sku)  AND costB(sku, singleStock(), snapshot, dateCur());                                            
                                    } ELSE {
                                        VATSupplierB(Sku sku, Stock stock, snapshot, dateCur()) <- NUMERIC[16,2](costB(sku, stock, snapshot, dateCur())*valueVAT(sku,country(stock),dateCur())/100) 
                                            WHERE include(snapshot, stock) AND include(snapshot, sku)  AND costB(sku, stock, snapshot, dateCur());
        
                                    }                                                             
                                }                        
                            }
                            IF isVATSupplier(snapshot) AND NOT isCost(snapshot) THEN {
                                IF singleStock() THEN {
                                    VATSupplierB(Sku sku, singleStock(), snapshot, dateCur()) <- NUMERIC[16,2]((GROUP SUM balance(Batch bt, singleStock())*cost(bt) IF sku(bt)==sku)*valueVAT(sku,country(singleStock()),dateCur())/100) 
                                        WHERE include(snapshot, sku)  AND (GROUP SUM balance(Batch bt, singleStock())*cost(bt) IF sku(bt)==sku);                                            
                                } ELSE {
                                    VATSupplierB(Sku sku, Stock stock, snapshot, dateCur()) <- NUMERIC[16,2]((GROUP SUM balance(Batch bt, stock)*cost(bt) IF sku(bt)==sku)*valueVAT(sku,country(stock),dateCur())/100) 
                                        WHERE include(snapshot, stock) AND include(snapshot, sku)  AND (GROUP SUM balance(Batch bt, stock)*cost(bt) IF sku(bt)==sku);
    
                                }                        
                            }                                                                      
                        }                                                                                                                         
                        dateCur() <- sum(dateCur(), -1);
                    }                    
                }               
                        
                overTakeSkuFromTo(snapshot, dateFrom, dateTo);      
                             
                IF isBatch(snapshot) THEN {   
                    IF isQuantity(snapshot) THEN {
                        IF isBalanceA(snapshot) THEN {                            
                            IF singleStock () THEN {
                                balanceA(Batch batch, Stock stock, snapshot) <- NUMERIC[14,3](balanceA(batch, stock, dateTo)) 
                                    WHERE stock == singleStock() AND include(snapshot, sku(batch)) AND balanceA(batch, stock, dateTo);
                            } ELSE {
                                balanceA(Batch batch, Stock stock, snapshot) <- NUMERIC[14,3](balanceA(batch, stock, dateTo)) 
                                    WHERE include(snapshot, stock) AND include(snapshot, sku(batch)) AND balanceA(batch, stock, dateTo);
                            }
                        }
                        
                        IF isIn(snapshot) THEN {
                            IF singleStock () THEN {
                                inQuantity(Batch batch, Stock stock, snapshot) <- NUMERIC[14,3](costInBalance(batch, stock, dateFrom, dateTo)) 
                                    WHERE stock == singleStock() AND include(snapshot, sku(batch)) AND costInBalance(batch, stock, dateFrom, dateTo);
                            } ELSE {
                                inQuantity(Batch batch, Stock stock, snapshot) <- NUMERIC[14,3](costInBalance(batch, stock, dateFrom, dateTo)) 
                                    WHERE include(snapshot, stock) AND include(snapshot, sku(batch)) AND costInBalance(batch, stock, dateFrom, dateTo);
                            }
                        }
                
                        IF isOut(snapshot) THEN {                            
                            IF singleStock () THEN {
                                outQuantity(Batch batch, Stock stock, snapshot) <- NUMERIC[14,3](costOutBalance(batch, stock, dateFrom, dateTo)) 
                                    WHERE stock == singleStock() AND include(snapshot, sku(batch)) AND costOutBalance(batch, stock, dateFrom, dateTo);
                            } ELSE {
                                outQuantity(Batch batch, Stock stock, snapshot) <- NUMERIC[14,3](costOutBalance(batch, stock, dateFrom, dateTo)) 
                                    WHERE include(snapshot, stock) AND include(snapshot, sku(batch)) AND costOutBalance(batch, stock, dateFrom, dateTo);
                            }
                        }
        
                        IF isBalanceB(snapshot) THEN {                            
                            IF isBalanceA(snapshot) AND isIn(snapshot) AND isOut(snapshot) THEN {
                                IF singleStock () THEN {
                                    balanceB(Batch batch, Stock stock, snapshot) <- (balanceA(batch, stock, snapshot) (-) inQuantity(batch, stock, snapshot) (+) outQuantity(batch, stock, snapshot))
                                        WHERE stock == singleStock() AND include(snapshot, sku(batch)) AND (balanceA(batch, stock, snapshot) (-) inQuantity(batch, stock, snapshot) (+) outQuantity(batch, stock, snapshot));
                                } ELSE {
                                    balanceB(Batch batch, Stock stock, snapshot) <- (balanceA(batch, stock, snapshot) (-) inQuantity(batch, stock, snapshot) (+) outQuantity(batch, stock, snapshot))
                                        WHERE include(snapshot, stock) AND include(snapshot, sku(batch)) AND (balanceA(batch, stock, snapshot) (-) inQuantity(batch, stock, snapshot) (+) outQuantity(batch, stock, snapshot));
                                }
                            } ELSE {
                                IF singleStock () THEN {
                                    balanceB(Batch batch, Stock stock, snapshot) <- NUMERIC[14,3](balanceB(batch, stock, dateFrom)) 
                                        WHERE stock == singleStock() AND include(snapshot, sku(batch)) AND balanceB(batch, stock, dateFrom);
                                } ELSE {
                                    balanceB(Batch batch, Stock stock, snapshot) <- NUMERIC[14,3](balanceB(batch, stock, dateFrom)) 
                                        WHERE include(snapshot, stock) AND include(snapshot, sku(batch)) AND balanceB(batch, stock, dateFrom);
                                }
                            }    
                        }
                    }
                    IF isCost(snapshot) THEN {  
                        IF isIn(snapshot) THEN {                            
                            IF singleStock () THEN {
                                inSum(Batch batch, Stock stock, snapshot) <- NUMERIC[16,2](costSumInBalance(batch, stock, dateFrom, dateTo)) 
                                    WHERE stock == singleStock() AND include(snapshot, sku(batch)) AND costSumInBalance(batch, stock, dateFrom, dateTo);
                            } ELSE {
                                inSum(Batch batch, Stock stock, snapshot) <- NUMERIC[16,2](costSumInBalance(batch, stock, dateFrom, dateTo)) 
                                    WHERE include(snapshot, stock) AND include(snapshot, sku(batch)) AND costSumInBalance(batch, stock, dateFrom, dateTo);
                            }
                        }
                
                        IF isOut(snapshot) THEN {
                            IF singleStock () THEN {
                                outSum(Batch batch, Stock stock, snapshot) <- NUMERIC[16,2](costSumOutBalance(batch, stock, dateFrom, dateTo)) 
                                    WHERE stock == singleStock() AND include(snapshot, sku(batch)) AND costSumOutBalance(batch, stock, dateFrom, dateTo);
                            } ELSE {
                                outSum(Batch batch, Stock stock, snapshot) <- NUMERIC[16,2](costSumOutBalance(batch, stock, dateFrom, dateTo)) 
                                    WHERE include(snapshot, stock) AND include(snapshot, sku(batch)) AND costSumOutBalance(batch, stock, dateFrom, dateTo);
                            }
                        }               
                    
                        IF isBalanceA(snapshot) THEN {
                            IF singleStock () THEN {
                                sumA(Batch batch, Stock stock, snapshot) <- NUMERIC[16,2](balanceA(batch, stock, dateTo)*cost(batch)) 
                                    WHERE stock == singleStock() AND include(snapshot, sku(batch)) AND balanceA(batch, stock, dateTo);
                            } ELSE {
                                sumA(Batch batch, Stock stock, snapshot) <- NUMERIC[16,2](balanceA(batch, stock, dateTo)*cost(batch)) 
                                    WHERE include(snapshot, stock) AND include(snapshot, sku(batch)) AND balanceA(batch, stock, dateTo);
                            }
                        }                  
                        IF isBalanceB(snapshot) THEN {
                            IF isBalanceA(snapshot) AND isIn(snapshot) AND isOut(snapshot) THEN {
                                IF singleStock () THEN {
                                    sumB(Batch batch, Stock stock, snapshot) <- (sumA(batch, stock, snapshot) (-) inSum(batch, stock, snapshot) (+) outSum(batch, stock, snapshot))
                                        WHERE stock == singleStock() AND include(snapshot, sku(batch)) AND (sumA(batch, stock, snapshot) (-) inSum(batch, stock, snapshot) (+) outSum(batch, stock, snapshot));
                                } ELSE {
                                    sumB(Batch batch, Stock stock, snapshot) <- (sumA(batch, stock, snapshot) (-) inSum(batch, stock, snapshot) (+) outSum(batch, stock, snapshot))
                                        WHERE include(snapshot, stock) AND include(snapshot, sku(batch)) AND (sumA(batch, stock, snapshot) (-) inSum(batch, stock, snapshot) (+) outSum(batch, stock, snapshot));
                                }
                            } ELSE {
                                IF singleStock () THEN {
                                    sumB(Batch batch, Stock stock, snapshot) <- NUMERIC[16,2](balanceB(batch, stock, dateFrom)*cost(batch)) 
                                        WHERE stock == singleStock() AND include(snapshot, sku(batch)) AND balanceB(batch, stock, dateFrom);
                                } ELSE {
                                    sumB(Batch batch, Stock stock, snapshot) <- NUMERIC[16,2](balanceB(batch, stock, dateFrom)*cost(batch)) 
                                        WHERE include(snapshot, stock) AND include(snapshot, sku(batch)) AND balanceB(batch, stock, dateFrom);
                                }
                            }  
                        }             
                    }  
                    IF isVATSupplier(snapshot) THEN {
                        IF singleStock () THEN {
                            VATSupplierA(Batch batch, Stock stock, snapshot) <- NUMERIC[16,2](balanceA(batch, stock, dateTo)*cost(batch)*valueVAT(sku(batch),country(stock),dateTo)/100) 
                                WHERE stock = singleStock() AND include(snapshot, sku(batch)) AND isBalanceA(snapshot) AND balanceA(batch, stock, dateTo);
                        } ELSE {
                            VATSupplierA(Batch batch, Stock stock, snapshot) <- NUMERIC[16,2](balanceA(batch, stock, dateTo)*cost(batch)*valueVAT(sku(batch),country(stock),dateTo)/100) 
                                WHERE include(snapshot, stock) AND include(snapshot, sku(batch)) AND isBalanceA(snapshot) AND balanceA(batch, stock, dateTo);
                        }                          
                        
                        IF singleStock () THEN {
                            VATSupplierB(Batch batch, Stock stock, snapshot) <- NUMERIC[16,2](balanceB(batch, stock, dateFrom)*cost(batch)*valueVAT(sku(batch),country(stock),dateTo)/100) 
                                WHERE stock = singleStock() AND include(snapshot, sku(batch)) AND isBalanceB(snapshot) AND balanceB(batch, stock, dateFrom);
                        } ELSE {
                            VATSupplierB(Batch batch, Stock stock, snapshot) <- NUMERIC[16,2](balanceB(batch, stock, dateFrom)*cost(batch)*valueVAT(sku(batch),country(stock),dateTo)/100) 
                                WHERE include(snapshot, stock) AND include(snapshot, sku(batch)) AND isBalanceB(snapshot) AND balanceB(batch, stock, dateFrom);
                        }                                                               
                    }
                    //-- todo: может надо брать вес от инвойса для партии 
                    IF isNetWeight(snapshot) THEN {
                        IF isBalanceA(snapshot) THEN {                           
                            netWeightA(Batch batch, Stock stock, snapshot) <- NUMERIC[14,3](balanceA(batch, stock, dateTo)*overNetWeight(sku(batch))) 
                                WHERE include(snapshot, stock) AND include(snapshot, sku(batch)) AND balanceA(batch, stock, dateTo);
                        }
                        
                        IF isIn(snapshot) THEN {                            
                            inNetWeight(Batch batch, Stock stock, snapshot) <- NUMERIC[14,3](costInBalance(batch, stock, dateFrom, dateTo)*overNetWeight(sku(batch))) 
                                WHERE include(snapshot, stock) AND include(snapshot, sku(batch)) AND costInBalance(batch, stock, dateFrom, dateTo);
                        }
                
                        IF isOut(snapshot) THEN {
                            outNetWeight(Batch batch, Stock stock, snapshot) <- NUMERIC[14,3](costOutBalance(batch, stock, dateFrom, dateTo)*overNetWeight(sku(batch))) 
                                WHERE include(snapshot, stock) AND include(snapshot, sku(batch)) AND costOutBalance(batch, stock, dateFrom, dateTo);
                        }
        
                        IF isBalanceB(snapshot) THEN {
                            netWeightB(Batch batch, Stock stock, snapshot) <- NUMERIC[14,3](balanceB(batch, stock, dateFrom)*overNetWeight(sku(batch))) 
                                WHERE include(snapshot, stock) AND include(snapshot, sku(batch)) AND balanceB(batch, stock, dateFrom);
                        }
                    }                                 
                                         
                    overTakeBatchFromTo(snapshot, dateFrom, dateTo);     
                }         
                overTakeFromTo(snapshot, dateFrom, dateTo);
                
                finishTime(snapshot) <- currentDateTime();
            }      
        }
    } ELSE {
        MESSAGE 'Не выбраны товары или склады для отчета';
    }           
};

takeData 'Сформировать отчет' (Snapshot snapshot)  { 
    IF finishTime(snapshot) THEN {
        ASK 'Вы действительно хотите выполнить действие "Сформировать отчет?"' DO            
            takeFromTo(snapshot, fromDate(snapshot), toDate(snapshot));
    } ELSE {
        takeFromTo(snapshot, fromDate(snapshot), toDate(snapshot));    
    }
}

extraFilterMove = ABSTRACT CASE BOOLEAN (Sku, Stock, Snapshot);
filterMove (Sku s, Stock st, Snapshot r) = balanceB(s,st,r) OR balanceA(s,st,r) OR 
                                        inQuantity(s,st,r) OR outQuantity(s,st,r) OR
                                        sumB(s,st,r) OR sumA(s,st,r) OR 
                                        inSum(s,st,r) OR outSum(s,st,r)
                                        OR costB(s,st,r) OR costA(s,st,r)
                                        OR extraFilterMove(s,st,r) MATERIALIZED;

extraFilterMove = ABSTRACT CASE BOOLEAN (Sku, Stock, Snapshot, DATE);
filterMove (Sku s, Stock st, Snapshot r, DATE d) = balanceB(s,st,r,d) OR balanceA(s,st,r,d) OR 
                                        inQuantity(s,st,r,d) OR outQuantity(s,st,r,d) OR
                                        sumB(s,st,r,d) OR sumA(s,st,r,d) OR 
                                        inSum(s,st,r,d) OR outSum(s,st,r,d)
                                        OR costB(s,st,r,d) OR costA(s,st,r,d)
                                        OR extraFilterMove(s,st,r,d) MATERIALIZED;  
                                        
filterMove (Snapshot r, DATE d) = GROUP SUM 1 IF filterMove (Sku s, Stock st, r, d) MATERIALIZED;                                        
filterMove (Stock st, Snapshot r, DATE d) = GROUP SUM 1 IF filterMove (Sku s, st, r, d);                                       

extraFilterMove = ABSTRACT CASE BOOLEAN (Batch, Stock, Snapshot);
filterMove (Batch bt,Stock ss,Snapshot r)= balanceB(bt,ss,r) OR balanceA(bt,ss,r) OR 
                                        inQuantity(bt,ss,r) OR outQuantity(bt,ss,r) OR 
                                        sumB(bt,ss,r) OR sumA(bt,ss,r) OR 
                                        inSum(bt,ss,r) OR outSum(bt,ss,r)
                                        OR extraFilterMove(bt,ss,r) MATERIALIZED;

//-- SHOWIF
isQuantityBalanceB = isQuantity(Snapshot snapshot) AND isBalanceB(snapshot);
isQuantityIn = isQuantity(Snapshot snapshot) AND isIn(snapshot);
isQuantityOut = isQuantity(Snapshot snapshot) AND isOut(snapshot);
isQuantityBalanceA = isQuantity(Snapshot snapshot) AND isBalanceA(snapshot);

isSumBalanceB = isSum(Snapshot snapshot) AND isBalanceB(snapshot);
isNetWeightBalanceB = isNetWeight(Snapshot snapshot) AND isBalanceB(snapshot);
isSumIn = isSum(Snapshot snapshot) AND isIn(snapshot);
isNetWeightIn = isNetWeight(Snapshot snapshot) AND isIn(snapshot);
isSumOut = isSum(Snapshot snapshot) AND isOut(snapshot);
isNetWeightOut = isNetWeight(Snapshot snapshot) AND isOut(snapshot);
isSumBalanceA = isSum(Snapshot snapshot) AND isBalanceA(snapshot);
isNetWeightBalanceA = isNetWeight(Snapshot snapshot) AND isBalanceA(snapshot);

isCostBalanceB =  isCost(Snapshot snapshot) AND isBalanceB(snapshot);
isCostVATSupplierBalanceB =  isCostVATSupplier(Snapshot snapshot) AND isBalanceB(snapshot);
isCostBalanceA = isCost(Snapshot snapshot) AND isBalanceA(snapshot);
isCostVATSupplierBalanceA = isCostVATSupplier(Snapshot snapshot) AND isBalanceA(snapshot);

isVATSupplierBalanceB = isVATSupplier(Snapshot snapshot) AND isBalanceB(snapshot);
isVATSupplierBalanceA = isVATSupplier(Snapshot snapshot) AND isBalanceA(snapshot);

//--
isQuantityBalanceBBatch = isQuantity(Snapshot snapshot) AND isBalanceB(snapshot) AND isBatch(snapshot);
isQuantityInBatch = isQuantity(Snapshot snapshot) AND isIn(snapshot) AND isBatch(snapshot);
isQuantityOutBatch = isQuantity(Snapshot snapshot) AND isOut(snapshot) AND isBatch(snapshot);
isQuantityBalanceABatch = isQuantity(Snapshot snapshot) AND isBalanceA(snapshot) AND isBatch(snapshot);

isSumBalanceBBatch = isSum(Snapshot snapshot) AND isBalanceB(snapshot) AND isBatch(snapshot);
isCostVATSupplierBalanceBBatch = isCostVATSupplier(Snapshot snapshot) AND isBalanceB(snapshot) AND isBatch(snapshot);

isCostBalanceBBatch = isCost(Snapshot snapshot) AND isBalanceB(snapshot) AND isBatch(snapshot);
isNetWeightBalanceBBatch = isNetWeight(Snapshot snapshot) AND isBalanceB(snapshot) AND isBatch(snapshot);
isSumInBatch = isSum(Snapshot snapshot) AND isIn(snapshot) AND isBatch(snapshot);
isCostInBatch = isCost(Snapshot snapshot) AND isIn(snapshot) AND isBatch(snapshot);
isNetWeightInBatch = isNetWeight(Snapshot snapshot) AND isIn(snapshot) AND isBatch(snapshot);
isSumOutBatch = isSum(Snapshot snapshot) AND isOut(snapshot) AND isBatch(snapshot);
isCostOutBatch = isCost(Snapshot snapshot) AND isOut(snapshot) AND isBatch(snapshot);
isNetWeightOutBatch = isNetWeight(Snapshot snapshot) AND isOut(snapshot) AND isBatch(snapshot);
isSumBalanceABatch = isSum(Snapshot snapshot) AND isBalanceA(snapshot) AND isBatch(snapshot);
isCostVATSupplierBalanceABatch = isCostVATSupplier(Snapshot snapshot) AND isBalanceA(snapshot) AND isBatch(snapshot);

isCostBalanceABatch = isCost(Snapshot snapshot) AND isBalanceA(snapshot) AND isBatch(snapshot);
isNetWeightBalanceABatch = isNetWeight(Snapshot snapshot) AND isBalanceA(snapshot) AND isBatch(snapshot);

isBalanceBBatchVATSupplier = isBalanceB(Snapshot snapshot) AND isBatch(snapshot) AND isVATSupplier(snapshot);
isBalanceABatchVATSupplier = isBalanceA(Snapshot snapshot) AND isBatch(snapshot) AND isVATSupplier(snapshot);
//--
isQuantityBalanceBDate = isQuantity(Snapshot snapshot) AND isBalanceB(snapshot) AND isDate(snapshot);
isQuantityInDate = isQuantity(Snapshot snapshot) AND isIn(snapshot) AND isDate(snapshot);
isQuantityOutDate = isQuantity(Snapshot snapshot) AND isOut(snapshot) AND isDate(snapshot);
isQuantityBalanceADate = isQuantity(Snapshot snapshot) AND isBalanceA(snapshot) AND isDate(snapshot);

isSumBalanceBDate = isSum(Snapshot snapshot) AND isBalanceB(snapshot) AND isDate(snapshot);
isNetWeightBalanceBDate = isNetWeight(Snapshot snapshot) AND isBalanceB(snapshot) AND isDate(snapshot);
isSumInDate = isSum(Snapshot snapshot) AND isIn(snapshot) AND isDate(snapshot);
isNetWeightInDate = isNetWeight(Snapshot snapshot) AND isIn(snapshot) AND isDate(snapshot);
isSumOutDate = isSum(Snapshot snapshot) AND isOut(snapshot) AND isDate(snapshot);
isNetWeightOutDate = isNetWeight(Snapshot snapshot) AND isOut(snapshot) AND isDate(snapshot);
isSumBalanceADate = isSum(Snapshot snapshot) AND isBalanceA(snapshot) AND isDate(snapshot);
isNetWeightBalanceADate= isNetWeight(Snapshot snapshot) AND isBalanceA(snapshot) AND isDate(snapshot);

isCostBalanceBDate = isCost(Snapshot snapshot) AND isBalanceB(snapshot) AND isDate(snapshot) ;
isCostBalanceADate = isCost(Snapshot snapshot) AND isBalanceA(snapshot) AND isDate(snapshot);

isCostVATSupplierBalanceBDate = isCostVATSupplier(Snapshot snapshot) AND isBalanceB(snapshot) AND isDate(snapshot) ;
isCostVATSupplierBalanceADate = isCostVATSupplier(Snapshot snapshot) AND isBalanceA(snapshot) AND isDate(snapshot);

isVATSupplierBalanceBDate = isVATSupplier(Snapshot snapshot) AND isBalanceB(snapshot) AND isDate(snapshot);
isVATSupplierBalanceADate = isVATSupplier(Snapshot snapshot) AND isBalanceA(snapshot) AND isDate(snapshot);

TABLE snapshotTypeDOW(SnapshotType, DOW);
in 'Вкл.' = DATA BOOLEAN (SnapshotType, DOW);
countDOWsIn (SnapshotType t) = GROUP SUM 1 IF in(t,DOW d);
oneReport 'Отдельный отчет для склада' = DATA BOOLEAN (SnapshotType);
idReport 'Идентификатор для планировщика' = DATA BPSTRING[100] (SnapshotType);
countThreads 'Кол-во потоков для планировщика' = DATA INTEGER (SnapshotType);
countDays 'Количество дней' = DATA INTEGER (SnapshotType);
countDaysDelete 'Количество дней для хранения отчетов' = DATA INTEGER (SnapshotType);


TABLE snapshotTypeDays(SnapshotType, INTEGER);
inDays 'Вкл.' = DATA BOOLEAN (SnapshotType, INTEGER);
countDaysIn (SnapshotType t) = GROUP SUM 1 IF inDays(t,INTEGER i);

daysIn 'Числа' (SnapshotType t)  = GROUP
    CONCAT STRING[2](INTEGER i) IF inDays(t,i), ', '
    ORDER i CHARWIDTH 10;
    
DOWsIn 'Дни недели' (SnapshotType t)  = GROUP
    CONCAT staticCaption(DOW DOW) IF in(t,DOW), ', '
    ORDER number(DOW) CHARWIDTH 15;    
    
EXTEND FORM snapshotTypes
    PROPERTIES READONLY AFTER name(t) DOWsIn(t), daysIn(t)
;

EXTEND FORM snapshotType
    OBJECTS dow = DOW    
    PROPERTIES number(dow) READONLY, staticCaption(dow) READONLY, in(t,dow)
    PROPERTIES(t) oneReport, countDays, countDaysDelete, idReport
    ORDERS number(dow)
    
    OBJECTS i = INTEGER    
    PROPERTIES VALUE(i) READONLY , inDays(t,i)
    FILTERS iterate(i,1,31)
    
;
DESIGN snapshotType {
    NEW paramContainerTab BEFORE TOOLBARBOX{
        fill = 1;
        tabbed = TRUE;
        MOVE select {caption = 'Выбор';}
        NEW createContainer {
            caption = 'Автоматическое формирование';
            NEW createContainer1 {
                horizontal = TRUE;
                MOVE PROPERTY (oneReport(t));
                MOVE PROPERTY (countDays(t));                
                MOVE PROPERTY (idReport(t));
                MOVE PROPERTY (countDaysDelete(t));
            }
            NEW tabContainer {
                fill = 1;
                horizontal = TRUE;
                MOVE BOX(dow);
                MOVE BOX(i) {caption = 'Числа месяца';}
            }
        }         
    }
}
   
in (SnapshotType type, DATE date) = ((countDOWsIn(type) AND in(type, extractDOW(date))) OR (type IS SnapshotType AND date IS DATE AND NOT countDOWsIn(type))) AND
                              ((countDaysIn(type) AND inDays(type, extractDay(date))) OR (type IS SnapshotType AND date IS DATE AND NOT countDaysIn(type)));            
  
createSnapshotString 'Создать отчет'(BPSTRING[100] string, DATE dateTo)  { 
	NEWSESSION { 
	    FOR idReport(SnapshotType type) == string  DO {
	        IF in(type, currentDate()) AND countDays(type) THEN {     
	
	            IF NOT oneReport(type)   THEN {
	
	                NEW r = Snapshot {                    
	                    fromDate(r) <- subtract(dateTo,countDays(type)-1);
	                    toDate(r) <- dateTo;
	                    snapshotType(r) <- type;
	                    takeFromTo(r, fromDate(r), toDate(r));
	                }
	
	            } ELSE {
                    IF countThreads(type) THEN {
                        NEWEXECUTOR
                            FOR include(type, Stock stock) DO
                                NEWTHREAD NEWSESSION NEWSQL {
                                    NEW r = Snapshot {
                                        fromDate(r) <- subtract(dateTo,countDays(type)-1);
                                        toDate(r) <- dateTo;
                                        snapshotType(r) <- type;
                                        dataInclude(r, Stock st) <- NULL;
                                        dataInclude(r, StockGroup st) <- NULL;
                                        dataInclude(r, stock) <- TRUE;
                                        allStockInclude(r) <- NULL;
                                        takeFromTo(r, fromDate(r), toDate(r));
                                    }
                                }
                            THREADS countThreads(type);
                        
                    } ELSE
                        FOR include(type, Stock stock) NEW r = Snapshot DO {
                            fromDate(r) <- subtract(dateTo,countDays(type)-1);
                            toDate(r) <- dateTo;
                            snapshotType(r) <- type;
                            dataInclude(r, Stock st) <- NULL;
                            dataInclude(r, StockGroup st) <- NULL;
                            dataInclude(r, stock) <- TRUE;
                            allStockInclude(r) <- NULL;
                            takeFromTo(r, fromDate(r), toDate(r));
                        }
	            }
	        }
	    }
	}
}

countDaysDeleteSnapshots 'Дней хранить аналитические отчеты без типов' = DATA INTEGER ();

EXTEND FORM options
    PROPERTIES countDaysDeleteSnapshots();
    
DESIGN options{
    stock1 {
        MOVE PROPERTY (countDaysDeleteSnapshots());
    }
}

deleteSnapshots 'Удалить старые аналитические отчеты'() { 
    FOR sum(date(Snapshot r),countDaysDelete(snapshotType(r))) < currentDate()
        OR (NOT snapshotType(r) AND sum(date(r), countDaysDeleteSnapshots()) < currentDate()) DO {
            DELETE  r;
            apply();
        };
}


nameFilterSnapshotSupplier 'Поставщики' = GROUP CONCAT name(LegalEntity l) IF in(l), ', ' ORDER l CHARWIDTH 20;
filterSupplierSnapshot (Batch bt) = in(supplier(bt)) OR (bt IS Batch AND NOT nameFilterSnapshotSupplier());
filterSupplierSnapshot (Sku s,Stock st)   = in(supplierLastOrderBatch(s, st)) OR (s IS Sku AND st IS Stock AND NOT nameFilterSnapshotSupplier());  

changeFilterSnapshotSupplier()  { 
    DIALOG dialogLegalEntities OBJECTS l INPUT DO {
        IF NOT (GROUP SUM 1 IF in(LegalEntity le)) THEN
            in(l) <- TRUE;
    }
}

orderSort 'Порядок (внутри группы)' (SkuGroup g) = PARTITION SUM 1 ORDER sort(g) BY groupType(g), parent(g);
canonicalOrderSort 'Порядок' (SkuGroup g) = STRING[250]((GROUP CONCAT lpad(STRING[3](orderSort(SkuGroup parent)), 3, '0') , '.' ORDER DESC level(g, parent)));
nameLevel4 'Наименование' (SkuGroup g) = STRING[100](repeat('    ', INTEGER(level(g))-1)) + name(g);

FORM snapshot 'Аналитический отчет'                                   
    OBJECTS r = Snapshot PANEL
    PROPERTIES (r) nameNumerator, 
                   number, series, nameSnapshotType, date, time,
                   note, fromDate, toDate,  
                   isQuantity, isSum, isBalanceB BACKGROUND hintBalanceBBackground(), 
                   isIn BACKGROUND hintInBackground(), isOut BACKGROUND hintOutBackground(), 
                   isBalanceA BACKGROUND hintBalanceABackground(),
                   isBatch, isDate, isCost, isVATSupplier, isCostVATSupplier,
                   isNetWeight 
//-- выбор складов                  
    TREE stockTree2 a2 = BPSTRING[3], sg2 = StockGroup PARENT parent(sg2) 
    PROPERTIES VALUE(a2) READONLY, allStockInclude(r) DRAW a2 BACKGROUND backgroundAllStockInclude(r), 
               name(sg2) READONLY, include(r,sg2) BACKGROUND backgroundInclude(r,sg2)
    ORDERS name(sg2)
    PROPERTIES deleteIncludeStocks(r) TOOLBAR
    FILTERS stringEqualsAll(a2)
    OBJECTS ts2 = Stock
    PROPERTIES(ts2) READONLY id, name
    PROPERTIES include(r,ts2)BACKGROUND backgroundInclude(r,ts2)
    ORDERS name(ts2)
    FILTERS isParent(sg2, ts2) OR (ts2 IS Stock AND NOT sg2),
            isCompany(ts2)
    FILTERGROUP inactiveStock2 FILTER 'Активный' active(ts2) 'ctrl F10' DEFAULT         
    FILTERGROUP selectStock2 FILTER 'Отмеченные' include(r,ts2)   
                                                                                 
          
//-- выбор групп товара     
    TREE skuTree2 sk2 = SkuGroup PARENT parent(sk2)
    PROPERTIES READONLY order(sk2), name(sk2)
    PROPERTIES include(r,sk2)
    ORDERS order(sk2), name(sk2)
    FILTERGROUP inactive2 FILTER 'Активные' active(sk2) 'F6' DEFAULT   
    PROPERTIES deleteIncludeSkuGroups(r) TOOLBAR
    
//-- выбор брендов
    OBJECTS b = Brand
    PROPERTIES include(r,b)
    PROPERTIES(b) READONLY id, name
    ORDERS name(b)
    FILTERGROUP inBrand FILTER 'Отмеченные' include(r,b)
    PROPERTIES deleteIncludeBrands(r) TOOLBAR
     
//-- выбор товара
    OBJECTS sku = Sku
    PROPERTIES PANEL addCommaBarcodeId(), addCommaBarcodeId(r)
    PROPERTIES dataInclude(r,sku)
    PROPERTIES(sku) READONLY idBarcode, id SHOWIF showIDs(), name, shortNameUOM
    PROPERTIES(sku) READONLY nameSupplierLastOrderBatch
    ORDERS name(sku)
    FILTERGROUP inSku FILTER 'Отмеченные' dataInclude(r,sku)
    PROPERTIES deleteIncludeSkus(r) TOOLBAR
    
//-- выбор поставщиков
    OBJECTS le = LegalEntity
    PROPERTIES include(r,le)
    PROPERTIES(le) READONLY id, name, fullName
    ORDERS name(le)
    FILTERGROUP isSupplier 
        FILTER 'Поставщики' isSupplier(le) DEFAULT
    FILTERGROUP inLegalEntity FILTER 'Отмеченные' include(r,le)
    PROPERTIES deleteIncludeLegalEntities(r) TOOLBAR
            
//--stock    
    TREE stockTree a = BPSTRING[3], sg = StockGroup PARENT parent(sg), ts = Stock
    PROPERTIES READONLY VALUE(a), name(sg), name(ts)
    ORDERS name(sg)
    FILTERS stringEqualsAll(a),
            stockGroup(ts) == sg,
            isCompany(ts)
    FILTERGROUP inactiveStocks FILTER 'Активный' active(ts) 'ctrl F10' DEFAULT    
    
    TREE skuTree sk = SkuGroup PARENT parent(sk)
    PROPERTIES READONLY order(sk), name(sk)
    ORDERS order(sk), name(sk)
    FILTERGROUP inactivesk FILTER 'Активные' active(sk) 'F6' DEFAULT
    
    PROPERTIES() SHOWIF isBatch(r) nameFilterSnapshotSupplier ON CHANGE changeFilterSnapshotSupplier()
    
    OBJECTS           sts=(st=Stock, s=Sku)
    PROPERTIES        READONLY name(s), idBarcode(s), id(s) SHOWIF showIDs(), nameLegalEntity(st), idStockGroup = id(stockGroup(st)), name(st), nameSupplierLastOrderBatch(s, st)
    FILTERGROUP inactiveStockst FILTER 'Активный' active(st) 'ctrl F10' DEFAULT
    ORDERS          name(s)
        
    FILTERS           isParent(sk, s),
                      st == ts AND sg IS StockGroup OR isParent(sg, st) AND NOT ts OR st IS Stock AND NOT sg AND NOT ts,
                      isCompany(st),
                      include(r,st),
                      filterSupplierSnapshot(s,st),
                      include(r,supplierLastOrderBatch(s, st)) OR NOT countIncludeLegalEntities(r)

    PROPERTIES(s, st, r) READONLY BACKGROUND hintBalanceBBackground() balanceB SHOWIF isQuantityBalanceB(r), 
                         sumB SHOWIF isSumBalanceB(r),                         
                         costB SHOWIF isCostBalanceB(r),                         
                         VATSupplierB SHOWIF isVATSupplierBalanceB(r), 
                         costVATSupplierB SHOWIF isCostVATSupplierBalanceB(r),
                         netWeightB SHOWIF isNetWeightBalanceB(r)
    PROPERTIES(s, st, r) READONLY BACKGROUND hintInBackground() inQuantity SHOWIF isQuantityIn(r), 
                         inSum SHOWIF isSumIn(r),
                         inNetWeight SHOWIF isNetWeightIn(r)
    PROPERTIES(s, st, r) READONLY BACKGROUND hintOutBackground() outQuantity SHOWIF isQuantityOut(r), 
                         outSum SHOWIF isSumOut(r),
                         outNetWeight SHOWIF isNetWeightOut(r)
    PROPERTIES(s, st, r) READONLY BACKGROUND hintBalanceABackground() balanceA SHOWIF isQuantityBalanceA(r), 
                         sumA SHOWIF isSumBalanceA(r),                         
                         costA SHOWIF isCostBalanceA(r),
                         VATSupplierA SHOWIF isVATSupplierBalanceA(r),
                         costVATSupplierA SHOWIF isCostVATSupplierBalanceA(r),                                                                         
                         netWeightA SHOWIF isNetWeightBalanceA(r)                                                                                                               
    PROPERTIES        READONLY nameSkuGroup1(s), nameSkuGroup2(s),nameSkuGroup3(s), nameSkuGroup4(s), nameSkuGroup5(s)   
                                                                                
    FILTERGROUP filtersSold
        FILTER 'С остатком' balanceB(s,st,r) OR balanceA(s,st,r) OR sumB(s,st,r) OR sumA(s,st,r)  'F10'  
        FILTER 'С приходом' inQuantity(s,st,r) OR inSum(s,st,r) 'F9'   
        FILTER 'С расходом' outQuantity(s,st,r) OR outSum(s,st,r) 'F8'
    
    FILTERS filterMove(s,st,r)
                                                                                                                                                                                      
//--batch
    PROPERTIES()      SHOWIF isBatch(r) nameB = nameFilterSnapshotSupplier ON CHANGE changeFilterSnapshotSupplier()
    OBJECTS           stb=(ss=Stock, bt=Batch) GRID
    PROPERTIES        READONLY SHOWIF isBatch(r) nameSku(bt), idBarcodeSku(bt), nameLegalEntity(ss), idStockGroupB = id(stockGroup(ss)), name(ss), name(bt), nameSupplier(bt), nameSupplierStock(bt) 
    ORDERS          nameSku(bt)
    FILTERS           isParent(sk, bt),
                      ss == ts AND sg IS StockGroup OR isParent(sg, ss) AND NOT ts OR ss IS Stock AND NOT sg AND NOT ts,
                      isCompany(ss),
                      include(r,ss),
                      filterSupplierSnapshot(bt)
                      
    FILTERGROUP inactiveStock FILTER 'Активный' active(ss) 'ctrl F10' DEFAULT

    PROPERTIES(bt, ss, r) BACKGROUND hintBalanceBBackground() balanceB SHOWIF isQuantityBalanceBBatch(r), 
                          sumB SHOWIF isCostBalanceBBatch(r),                          
                          VATSupplierB SHOWIF isBalanceBBatchVATSupplier(r),
                          sumVATSupplierB SHOWIF isCostVATSupplierBalanceBBatch(r),                                                    
                          netWeightB SHOWIF isNetWeightBalanceBBatch(r) 
    PROPERTIES(bt, ss, r) BACKGROUND hintInBackground() inQuantity SHOWIF isQuantityInBatch(r), 
                          inSum SHOWIF isCostInBatch(r),
                          inNetWeight SHOWIF isNetWeightInBatch(r)
    PROPERTIES(bt, ss, r) BACKGROUND hintOutBackground() outQuantity SHOWIF isQuantityOutBatch(r), 
                          outSum SHOWIF isCostOutBatch(r),
                          outNetWeight SHOWIF isNetWeightOutBatch(r)                             
    PROPERTIES(bt, ss, r) BACKGROUND hintBalanceABackground() balanceA SHOWIF isQuantityBalanceABatch(r), 
                          sumA SHOWIF isCostBalanceABatch(r),
                          VATSupplierA SHOWIF isBalanceABatchVATSupplier(r),
                          sumVATSupplierA SHOWIF isCostVATSupplierBalanceABatch(r),   
                          netWeightA SHOWIF isNetWeightBalanceABatch(r) 
    PROPERTIES        READONLY SHOWIF isBatch(r) date(bt), nameSkuGroup1(bt), nameSkuGroup2(bt), 
                      nameSkuGroup3(bt), nameSkuGroup4(bt), nameSkuGroup5(bt)
    ORDERS          date(bt)            
        
    FILTERGROUP filtersSoldBatch
        FILTER 'С остатком' balanceB(bt,ss,r) OR balanceA(bt,ss,r) OR sumB(bt,ss,r) OR sumA(bt,ss,r) 'F10'  
        FILTER 'С приходом' inQuantity(bt,ss,r) OR inSum(bt,ss,r) 'F9'   
        FILTER 'С расходом' outQuantity(bt,ss,r) OR outSum(bt,ss,r)'F8'     

    FILTERS filterMove(bt,ss,r)

    PROPERTIES(r)  takeData  
//-- По группам    
    TREE skuTree1 sk1 = SkuGroup PARENT parent(sk1)
    PROPERTIES READONLY order(sk1), name(sk1)
    ORDERS order(sk1), name(sk1)
    FILTERGROUP inactive FILTER 'Активные' active(sk1) 'F6' DEFAULT    
    PROPERTIES(sk1,r) READONLY BACKGROUND hintBalanceBBackground() balanceB SHOWIF isQuantityBalanceB(r), 
                      sumB SHOWIF isSumBalanceB(r),                      
                      costB SHOWIF isCostBalanceB(r),
                      VATSupplierB SHOWIF isVATSupplierBalanceB(r),
                      costVATSupplierB SHOWIF isCostVATSupplierBalanceB(r),
                      netWeightB SHOWIF isNetWeightBalanceB(r)
    PROPERTIES(sk1,r) READONLY BACKGROUND hintBalanceABackground() balanceA SHOWIF isQuantityBalanceA(r), 
                      sumA SHOWIF isSumBalanceA(r),
                      costA SHOWIF isCostBalanceA(r),
                      VATSupplierA SHOWIF isVATSupplierBalanceA(r),
                      costVATSupplierA SHOWIF isCostVATSupplierBalanceA(r),
                      netWeightA SHOWIF isNetWeightBalanceA(r)  
    OBJECTS skg = SkuGroup GRID
    PROPERTIES READONLY nameLevel4(skg), canonicalOrderSort(skg)
    PROPERTIES(skg,r) READONLY BACKGROUND hintBalanceBBackground() balanceB SHOWIF isQuantityBalanceB(r), 
                      sumB SHOWIF isSumBalanceB(r),                      
                      costB SHOWIF isCostBalanceB(r),
                      VATSupplierB SHOWIF isVATSupplierBalanceB(r),
                      costVATSupplierB SHOWIF isCostVATSupplierBalanceB(r),
                      netWeightB SHOWIF isNetWeightBalanceB(r)
    PROPERTIES(skg,r) READONLY BACKGROUND hintBalanceABackground() balanceA SHOWIF isQuantityBalanceA(r), 
                      sumA SHOWIF isSumBalanceA(r),
                      costA SHOWIF isCostBalanceA(r),
                      VATSupplierA SHOWIF isVATSupplierBalanceA(r),
                      costVATSupplierA SHOWIF isCostVATSupplierBalanceA(r),
                      netWeightA SHOWIF isNetWeightBalanceA(r)
    ORDERS canonicalOrderSort(skg)
    FILTERGROUP inactiveg FILTER 'Активные' active(sk1) 'F6' DEFAULT       
       
//-- По складам           
    TREE stockTree1 a1 = BPSTRING[3], sg1 = StockGroup PARENT parent(sg1)
    PROPERTIES READONLY VALUE(a1), name(sg1)
    ORDERS name(sg1)    
        
    OBJECTS ts1 = Stock
    PROPERTIES READONLY name(ts1)   
    ORDERS name(ts1) 
    
    FILTERS stringEqualsAll(a1),
            ts1 IS Stock AND NOT sg1 IS StockGroup OR isParent(sg1, ts1),
            isCompany(ts1),
            include(r,ts1)     
    FILTERGROUP inactiveStock1 FILTER 'Активный' active(ts1) 'ctrl F10' DEFAULT               

    PROPERTIES(ts1,r) READONLY BACKGROUND hintBalanceBBackground() balanceB SHOWIF isQuantityBalanceB(r), 
                      sumB SHOWIF isSumBalanceB(r),
                      costB SHOWIF isCostBalanceB(r),
                      VATSupplierB SHOWIF isVATSupplierBalanceB(r),
                      costVATSupplierB SHOWIF isCostVATSupplierBalanceB(r),                      
                      netWeightB SHOWIF isNetWeightBalanceB(r)   
    PROPERTIES(ts1,r) READONLY BACKGROUND hintInBackground() inQuantity SHOWIF isQuantityIn(r), 
                      inSum SHOWIF isSumIn(r),
                      inNetWeight SHOWIF isNetWeightIn(r)  
    PROPERTIES(ts1,r) READONLY BACKGROUND hintOutBackground() outQuantity SHOWIF isQuantityOut(r), 
                      outSum SHOWIF isSumOut(r),
                      outNetWeight SHOWIF isNetWeightOut(r)  
    PROPERTIES(ts1,r) READONLY BACKGROUND hintBalanceABackground() balanceA SHOWIF isQuantityBalanceA(r), 
                      sumA SHOWIF isSumBalanceA(r),
                      costA SHOWIF isCostBalanceA(r),
                      VATSupplierA SHOWIF isVATSupplierBalanceA(r),
                      costVATSupplierA SHOWIF isCostVATSupplierBalanceA(r),
                      netWeightA SHOWIF isNetWeightBalanceA(r)    
                                  
    FILTERGROUP filtersSoldStock
        FILTER 'С движением' balanceB(ts1,r) OR balanceA(ts1,r) OR inQuantity(ts1,r) OR outQuantity(ts1,r) OR
                             sumB(ts1,r) OR sumA(ts1,r) OR inSum(ts1,r) OR outSum(ts1,r) 'F11' DEFAULT
                             
        FILTER 'С остатком' balanceB(ts1,r) OR balanceA(ts1,r) OR sumB(ts1,r) OR sumA(ts1,r) 'F10'  
        FILTER 'С приходом' inQuantity(ts1,r) OR inSum(ts1,r) 'F9'   
        FILTER 'С расходом' outQuantity(ts1,r) OR outSum(ts1,r) 'F8'   
                                          
//-- По поставщикам                                                
    
    OBJECTS l=LegalEntity GRID
    PROPERTIES READONLY SHOWIF isBatch(r) name(l)
    ORDERS name(l)
    FILTERGROUP inactiveLegalEntity FILTER 'Активная' active(l) 'shift F10' DEFAULT
    FILTERS isSupplier(l)                                              
                                              
    PROPERTIES(l,r) READONLY BACKGROUND hintBalanceBBackground() balanceBBatch SHOWIF isQuantityBalanceBBatch(r), 
                    sumBBatch  SHOWIF isCostBalanceBBatch(r),
                    VATSupplierBBatch SHOWIF isBalanceBBatchVATSupplier(r),
                    sumVATSupplierBBatch SHOWIF isCostVATSupplierBalanceBBatch(r),
                    netWeightBBatch  SHOWIF isNetWeightBalanceBBatch(r)
    PROPERTIES(l,r) READONLY BACKGROUND hintInBackground() inQuantityBatch SHOWIF isQuantityInBatch(r), 
                    inSumBatch  SHOWIF isCostInBatch(r),
                    inNetWeightBatch  SHOWIF isNetWeightInBatch(r)
    PROPERTIES(l,r) READONLY BACKGROUND hintOutBackground() outQuantityBatch SHOWIF isQuantityOutBatch(r), 
                    outSumBatch  SHOWIF isCostOutBatch(r),
                    outNetWeightBatch  SHOWIF isNetWeightOutBatch(r)
    PROPERTIES(l,r) READONLY BACKGROUND hintBalanceABackground() balanceABatch SHOWIF isQuantityBalanceABatch(r), 
                    sumABatch  SHOWIF isCostBalanceABatch(r), 
                    VATSupplierABatch SHOWIF isBalanceABatchVATSupplier(r),
                    sumVATSupplierABatch SHOWIF isCostVATSupplierBalanceABatch(r),
                    netWeightABatch  SHOWIF isNetWeightBalanceABatch(r)                                                                                                                                                          
 
    FILTERGROUP filtersSoldSupplier
        FILTER 'С движением' balanceBBatch(l,r) OR balanceABatch(l,r) OR inQuantityBatch(l,r) OR outQuantityBatch(l,r) OR
                             sumBBatch(l,r) OR sumABatch(l,r) OR inSumBatch(l,r) OR outSumBatch(l,r)  'F11' DEFAULT
        FILTER 'С остатком' balanceBBatch(l,r) OR balanceABatch(l,r) OR sumBBatch(l,r) OR sumABatch(l,r) 'F10'  
        FILTER 'С приходом' inQuantityBatch(l,r) OR inSumBatch(l,r)'F9'   
        FILTER 'С расходом' outQuantityBatch(l,r) OR outSumBatch(l,r) 'F8'
            
//-- По складам поставщика             
    OBJECTS lst=Stock GRID
    PROPERTIES READONLY SHOWIF isBatch(r) nameLegalEntity(lst), name(lst)
    ORDERS nameLegalEntity(lst), name(lst)
    FILTERGROUP inactiveLST FILTER 'Активный' active(lst) 'shift F10' DEFAULT
    FILTERS isSupplier(lst)                                              
                                              
    PROPERTIES(lst,r) READONLY BACKGROUND hintBalanceBBackground() balanceBBatchSupplier SHOWIF isQuantityBalanceBBatch(r), 
                    sumBBatchSupplier  SHOWIF isCostBalanceBBatch(r),
                    VATSupplierBBatchSupplier SHOWIF isBalanceBBatchVATSupplier(r),
                    sumVATSupplierBBatchSupplier SHOWIF isCostVATSupplierBalanceBBatch(r),
                    netWeightBBatchSupplier  SHOWIF isNetWeightBalanceBBatch(r)
    PROPERTIES(lst,r) READONLY BACKGROUND hintInBackground() inQuantityBatchSupplier SHOWIF isQuantityInBatch(r), 
                    inSumBatchSupplier  SHOWIF isCostInBatch(r),
                    inNetWeightBatchSupplier  SHOWIF isNetWeightInBatch(r)
    PROPERTIES(lst,r) READONLY BACKGROUND hintOutBackground() outQuantityBatchSupplier SHOWIF isQuantityOutBatch(r), 
                    outSumBatchSupplier  SHOWIF isCostOutBatch(r),
                    outNetWeightBatchSupplier  SHOWIF isNetWeightOutBatch(r)
    PROPERTIES(lst,r) READONLY BACKGROUND hintBalanceABackground() balanceABatchSupplier SHOWIF isQuantityBalanceABatch(r), 
                    sumABatchSupplier SHOWIF isCostBalanceABatch(r), 
                    VATSupplierABatchSupplier SHOWIF isBalanceABatchVATSupplier(r),
                    sumVATSupplierABatchSupplier SHOWIF isCostVATSupplierBalanceABatch(r),
                    netWeightABatchSupplier  SHOWIF isNetWeightBalanceABatch(r)                                                                                                                                                          
 
    FILTERGROUP filtersSoldSupplierStock
        FILTER 'С движением' balanceBBatchSupplier(lst,r) OR balanceABatchSupplier(lst,r) OR inQuantityBatchSupplier(lst,r) OR outQuantityBatchSupplier(lst,r) OR
                             sumBBatchSupplier(lst,r) OR sumABatchSupplier(lst,r) OR inSumBatchSupplier(lst,r) OR outSumBatchSupplier(lst,r)  'F11'
        FILTER 'С остатком' balanceBBatchSupplier(lst,r) OR balanceABatchSupplier(lst,r) OR sumBBatchSupplier(lst,r) OR sumABatchSupplier(lst,r) 'F10'  
        FILTER 'С приходом' inQuantityBatchSupplier(lst,r) OR inSumBatchSupplier(lst,r)'F9'   
        FILTER 'С расходом' outQuantityBatchSupplier(lst,r) OR outSumBatchSupplier(lst,r) 'F8'            

    FILTERGROUP filtersLStock
        FILTER 'По поставщику' legalEntity(lst) == l 'F6'  DEFAULT  
              
//-- По SKU на дату         
           
    OBJECTS           sts3=(st3=Stock, s3=Sku, d3=DATE) GRID 
    PROPERTIES        READONLY SHOWIF isDate(r) valD3 =VALUE(d3), name(s3), idBarcode(s3), id(s3), nameLegalEntity(st3), idStockGroup3 = id(stockGroup(st3)), name(st3) 
    
    ORDERS          valD3     
    FILTERS           filterMove(r,d3)
    
    FILTERGROUP inactiveStock3 FILTER 'Активный' active(st3) 'ctrl F10' DEFAULT         
        
    FILTERS           isParent(sk, s3),
                      st3 == ts AND sg IS StockGroup OR isParent(sg, st3) AND NOT ts OR st3 IS Stock AND NOT sg AND NOT ts,
                      isCompany(st3),
                      include(r,st3)

    PROPERTIES(s3,st3,r,d3) BACKGROUND hintBalanceBBackground() balanceB SHOWIF isQuantityBalanceBDate(r), 
                            sumB SHOWIF isSumBalanceBDate(r),
                            costB SHOWIF isCostBalanceBDate(r),
                            VATSupplierB SHOWIF isVATSupplierBalanceBDate(r),
                            costVATSupplierB SHOWIF isCostVATSupplierBalanceBDate(r),
                            netWeightB SHOWIF isNetWeightBalanceBDate(r)                             
    PROPERTIES(s3,st3,r,d3) BACKGROUND hintInBackground() inQuantity SHOWIF isQuantityInDate(r), 
                            inSum SHOWIF isSumInDate(r),
                            inNetWeight SHOWIF isNetWeightInDate(r) 
    PROPERTIES(s3,st3,r,d3) BACKGROUND hintOutBackground() outQuantity SHOWIF isQuantityOutDate(r), 
                            outSum SHOWIF isSumOutDate(r),
                            outNetWeight SHOWIF isNetWeightOutDate(r) 
    PROPERTIES(s3,st3,r,d3) BACKGROUND hintBalanceABackground() balanceA SHOWIF isQuantityBalanceADate(r), 
                            sumA SHOWIF isSumBalanceADate(r),
                            costA SHOWIF isCostBalanceADate(r),
                            VATSupplierA SHOWIF isVATSupplierBalanceBDate(r),
                            costVATSupplierA SHOWIF isCostVATSupplierBalanceBDate(r),
                            netWeightA SHOWIF isNetWeightBalanceADate(r)
                                                                                                                                                                             
    PROPERTIES        READONLY SHOWIF isDate(r) nameSkuGroup1(s3), nameSkuGroup2(s3), nameSkuGroup3(s3), 
                      nameSkuGroup4(s3), nameSkuGroup5(s3)
                                                             
    FILTERGROUP filtersSold1
        FILTER 'С остатком' balanceB(s3,st3,r,d3) OR balanceA(s3,st3,r,d3) OR sumB(s3,st3,r,d3) OR sumA(s3,st3,r,d3) 'F10'  
        FILTER 'С приходом' inQuantity(s3,st3,r,d3) OR inSum(s3,st3,r,d3) 'F9'   
        FILTER 'С расходом' outQuantity(s3,st3,r,d3) OR outSum(s3,st3,r,d3) 'F8'         

    FILTERS filterMove(s3,st3,r,d3)

    OBJECTS st4=Stock
    FILTERS           st4 == ts AND sg IS StockGroup OR isParent(sg, st4) AND NOT ts OR st4 IS Stock AND NOT sg AND NOT ts,
                      isCompany(st4),
                      include(r,st4)
    
    OBJECTS d4=DATE GRID  
    PROPERTIES READONLY  SHOWIF isDate(r) valD4 =VALUE(d4)  
    FILTERS           filterMove (r, d4)
        
    PROPERTIES(st4,r,d4) BACKGROUND hintBalanceBBackground() balanceB COLUMNS 'g' (st4) HEADER nameBalanceQB(st4) SHOWIF isQuantityBalanceBDate(r), 
                         sumB COLUMNS 'g' (st4) HEADER nameSumB(st4) SHOWIF isSumBalanceBDate(r),
                         costB COLUMNS 'g' (st4) HEADER nameCostB(st4) SHOWIF isCostBalanceBDate(r),
                         VATSupplierB COLUMNS 'g' (st4) HEADER nameCostB(st4) SHOWIF isVATSupplierBalanceBDate(r),
                         costVATSupplierB COLUMNS 'g' (st4) HEADER nameCostVATSupplierB(st4) SHOWIF isCostVATSupplierBalanceBDate(r),  
                         netWeightB COLUMNS 'g' (st4) HEADER nameNetWeightB(st4) SHOWIF isNetWeightBalanceBDate(r)
    PROPERTIES(st4,r,d4) BACKGROUND hintInBackground() inQuantity COLUMNS 'g' (st4) HEADER nameInQuantity(st4) SHOWIF isQuantityInDate(r), 
                         inSum COLUMNS 'g' (st4) HEADER nameInSum(st4) SHOWIF isSumInDate(r),
                         inNetWeight COLUMNS 'g' (st4) HEADER nameInNetWeight(st4) SHOWIF isNetWeightInDate(r)
    PROPERTIES(st4,r,d4) BACKGROUND hintOutBackground() outQuantity COLUMNS 'g' (st4) HEADER nameOutQuantity(st4) SHOWIF isQuantityOutDate(r), 
                         outSum COLUMNS 'g' (st4) HEADER nameOutSum(st4) SHOWIF isSumOutDate(r),
                         outNetWeight COLUMNS 'g' (st4) HEADER nameOutNetWeight(st4) SHOWIF isNetWeightOutDate(r)
    PROPERTIES(st4,r,d4) BACKGROUND hintBalanceABackground() balanceA COLUMNS 'g' (st4) HEADER nameBalanceQA(st4) SHOWIF isQuantityBalanceADate(r), 
                         sumA COLUMNS 'g' (st4) HEADER nameSumA(st4) SHOWIF isSumBalanceADate(r),
                         costA COLUMNS 'g' (st4) HEADER nameCostA(st4) SHOWIF isCostBalanceADate(r),
                         VATSupplierA COLUMNS 'g' (st4) HEADER nameCostA(st4) SHOWIF isVATSupplierBalanceADate(r),
                         costVATSupplierA COLUMNS 'g' (st4) HEADER nameCostVATSupplierA(st4) SHOWIF isCostVATSupplierBalanceADate(r),
                         netWeightA COLUMNS 'g' (st4) HEADER nameNetWeightA(st4) SHOWIF isNetWeightBalanceADate(r)                                      
   
    EDIT Snapshot OBJECT r
;
DESIGN snapshot {
    BOX {
        size = (1024, 768);
        MOVE BOX(r) {
            horizontal = TRUE;
            MOVE GROUP(documentHeader,r);
            MOVE GROUP(numbered,r); 
            NEW date {
                caption = 'Период';
                horizontal = TRUE;
                MOVE PROPERTY (fromDate(r));
                MOVE PROPERTY (toDate(r));
            }                                  
        };
        NEW top {                     
            fill = 1;
            tabbed = TRUE;
            NEW paramContainer {
                fill = 1;
                caption = 'Параметры';
                MOVE GROUP(evidence,r) {
                    lines = 1;
                    horizontal = TRUE;                      
                    NEW row1 {
                        horizontal = FALSE; 
                        caption = 'Основные';    
                        MOVE PROPERTY(isBatch(r));
                        MOVE PROPERTY(isDate(r));
                    }
                    NEW row2 {
                        caption = 'Остатки';                 
                        MOVE PROPERTY(isBalanceB(r));
                        MOVE PROPERTY(isBalanceA(r));   
                                                                                             
                    }                    
                    NEW row3 {
                        horizontal = FALSE;
                        caption = 'Колонки';
                        type = COLUMNS;
                        lines = 4;
                        MOVE PROPERTY(isQuantity(r));
                        MOVE PROPERTY(isSum(r)); 
                        MOVE PROPERTY(isCost(r)); 
                        MOVE PROPERTY(isVATSupplier(r));   
                        MOVE PROPERTY(isCostVATSupplier(r));     
                        MOVE PROPERTY(isNetWeight(r));                   
                    }                      
                    NEW row5 {
                        horizontal = FALSE;
                        caption = 'Движение';
                        MOVE PROPERTY(isIn(r));  
                        MOVE PROPERTY(isOut(r));                     
                    }                                                                          
                    NEW row6 {
                        horizontal = FALSE;
                        caption = 'Оборот';  
                        type = COLUMNS;
                        lines = 2;   
                                               
                    }                                                         
                }                                   
                MOVE GROUP(documentPrm,r);
                NEW select{
                    fill = 1;
                    tabbed = TRUE;
                    NEW stockTab{
                        fill = 1;
                        horizontal = TRUE;
                        caption = 'Выбор складов'; 
                        MOVE BOX(TREE stockTree2) {                                                       
                            TOOLBARBOX(TREE stockTree2) {
                                MOVE PROPERTY (deleteIncludeStocks(r));
                            }
                        }
                        MOVE BOX(ts2);                       
                    }

                    MOVE BOX(le) { 
                        fill = 1; caption = 'Выбор поставщиков'; 
                        TOOLBARBOX(le) {
                            MOVE PROPERTY (deleteIncludeLegalEntities(r));
                        }
                    }
                    NEW items {
                        fill = 1; caption = 'Выбор товара';
                        horizontal = TRUE;
                        NEW leftI {
                            fill = 1;
                            horizontal = FALSE;
                            MOVE BOX(TREE skuTree2) { 
                                fill = 1; caption = 'Выбор групп'; 
                                TOOLBARBOX(TREE skuTree2) {
                                    MOVE PROPERTY (deleteIncludeSkuGroups(r));
                                }
                            }
                            MOVE BOX(b) {
                                fill = 1; caption = 'Выбор брендов';
                                TOOLBARBOX(b) {
                                    MOVE PROPERTY (deleteIncludeBrands(r));
                                }
                            }
                        }
                        NEW rightI {
                            fill = 1;
                            NEW addBarcode {
                                horizontal = TRUE;
                                MOVE PROPERTY (addCommaBarcodeId());
                                MOVE PROPERTY (addCommaBarcodeId(r));
                            }
                            MOVE BOX(sku){
                                fill = 1; caption = 'Выбор товара';
                                TOOLBARBOX(sku) {
                                    MOVE PROPERTY (deleteIncludeSkus(r));
                                }
                            }
                        }
                    }      
                }   
            }
            
            NEW resultContainer {
                caption = 'Результат';
                MOVE PROPERTY (takeData(r)) { alignment = STRETCH; focusable = FALSE; font = 'bold 36';  }
                NEW resultContainer2 {
                    fill = 7;
                    tabbed = TRUE;
                    NEW tabb1 {
                        caption = 'Таблица';
                        horizontal = TRUE;          
                        NEW firstCase {
                            fill = 1;
                            horizontal = FALSE;
                            MOVE BOX(TREE stockTree) { caption = 'Склады'; }
                            MOVE BOX(TREE skuTree) { caption = 'Группы'; }
                        }
                        NEW secondCase {
                            fill = 3;
                            tabbed = TRUE;
                            NEW skuContainer{
                                fill = 1;
                                caption = 'Товары'; 
                                tabbed = TRUE;
                                MOVE BOX(sts) {
                                    caption = 'Итоги';
                                    MOVE PANEL(sts) FIRST{
                                        caption = 'Фильтр';
                                        MOVE PROPERTY (nameFilterSnapshotSupplier());
                                    }
                                    PROPERTY (idStockGroup) { caption = 'Код Склада'; }
                                    PROPERTY (name(st)) { caption = 'Наименование Склада'; }
                                }
                                MOVE BOX(sts3) {
                                    caption = 'В динамике';
                                    PROPERTY (idStockGroup3) { caption = 'Код Склада'; }
                                    PROPERTY (name(st3)) { caption = 'Наименование Склада'; }
                                }
                            }    
                            MOVE BOX(stb) {caption = 'Партии'; 
                                MOVE PANEL(stb) FIRST{
                                    caption = 'Фильтр';
                                    MOVE PROPERTY (nameB);
                                }                                
                                PROPERTY(date(bt)) { caption = 'Дата прихода'; }
                                PROPERTY (idStockGroupB) { caption = 'Код Склада'; }
                                PROPERTY (name(ss)) { caption = 'Наименование Склада'; }
                            }                                                  
                        }   
                    }
                    NEW tabb2 {
                        caption = 'По складам';
                        horizontal = TRUE; 
                        fill = 1;
                        MOVE BOX(TREE stockTree1);                                                                                 
                        NEW tabb21 { 
                            fill = 3;   
                            tabbed = TRUE;
                            MOVE BOX(ts1) { caption = 'Итоги';}    
                            MOVE BOX(d4) {caption = 'В динамике';}   
                        }      
                    }
                    NEW tabb3 {
                        caption = 'По группам';
                        tabbed = TRUE;
                        fill = 1;
                        MOVE BOX(TREE skuTree1) { caption = 'Дерево'; }
                        MOVE BOX(skg) { caption = 'Таблица'; }
                    }  
                    NEW sup {
                        fill = 1;
                        caption = 'По поставщикам';
                        horizontal = FALSE;
                        MOVE BOX(l) { caption = 'Поставщик'; }   
                        MOVE BOX(lst) { caption = 'Склад поставщика'; }   
                    }                                         
                }                 
            }
        } 
        REMOVE BOX(st4);
        MOVE TOOLBARBOX;
    }
}

@extendFormFilterStockGroupAccess(sg, snapshot);

@extendFormFilterStockGroupAccess(sg1, snapshot);
@extendFormFilterStockGroupAccess(sg2, snapshot);
@extendFormFilterStockAccess(ts2, snapshot);
@extendFormFilterStockAccess(ts, snapshot);
@extendFormFilterStockAccess(st, snapshot);
@extendFormFilterStockAccess(ss, snapshot);
@extendFormFilterStockAccess(ts1, snapshot);

accessCompanyEmployeeStocks = 
    ([GROUP SUM 1 IF accessCompany(currentUser(), Stock stock) AND include(Snapshot r, stock) BY r](Snapshot r) == countIncludeStock(r)) OR (r IS Snapshot AND NOT countIncludeStock(r));

FORM snapshots 'Аналитические отчеты'

    OBJECTS r = Snapshot LAST 
    PROPERTIES (r) READONLY number, series, date, time,
                   fromDate, toDate, nameSnapshotType, status BACKGROUND backgroundStatus(r), 
                   startTime, finishTime, note, nameIncludeStockGroupsStock, nameIncludeSkuGroups,
                   isBatch, isDate, isQuantity, isNetWeight, isSum, isCost, isVATSupplier, 
                   isCostVATSupplier, isBalanceB BACKGROUND hintBalanceBBackground(), 
                   isIn BACKGROUND hintInBackground(),
                   isOut BACKGROUND hintOutBackground(), isBalanceA BACKGROUND hintBalanceABackground()                  
                   
    PROPERTIES (r) NEWSESSION NEW, EDIT, deleter=DELETE   
    PROPERTIES (r) READONLY PANEL createdNameUser, createdTime, createdHostnameComputer   
                         
    LIST Snapshot OBJECT r
;
DESIGN snapshots {
    BOX {
        size = (1024, 768);
        MOVE BOX(r);
        MOVE GROUP(created,r); 
        MOVE TOOLBARBOX;
    }    
} 
EXTEND FORM snapshots FILTERS accessCompanyEmployeeStocks(r);

NAVIGATOR {
    stockNavigator {
        NEW FOLDER reports 'Аналитика' {
            NEW snapshotTypes;
            NEW snapshots;
        }
    }
}

