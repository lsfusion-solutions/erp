MODULE StockContract;

REQUIRE Contract, Stock;

NAMESPACE Contract;

// ------------------------------------ Договора на перемещение товаров ---------------- //

META defineInStockGroupObject(prop, object, objectClass)

    all###prop##Stocks 'Отм' = DATA BOOLEAN (objectClass);

    dataIn###prop 'Отм.' = DATA BOOLEAN (StockGroup, objectClass);

    levelParent###prop##Stock (###object object, StockGroup stockGroup) =
        GROUP MIN level(stockGroup, StockGroup parent) IF dataIn###prop(parent, object) MATERIALIZED;
    nearestParent###prop##contract (###object object, StockGroup stockGroup) = stockGroup(stockGroup, levelParent###prop##Stock(object, stockGroup));
    nearestIn###prop (StockGroup stockGroup, ###object object) =
        dataIn###prop(nearestParent###prop##contract(object, stockGroup), object) MATERIALIZED;

    in###prop 'Отм' (StockGroup stockGroup, ###object object) =
        OVERRIDE dataIn###prop(stockGroup, object),
                 nearestIn###prop(stockGroup, object),
                 all###prop##Stocks(object) AND stockGroup IS StockGroup;

    // Отметка для складов
    dataIn###prop 'Отм.' = DATA BOOLEAN (Stock, objectClass);
    in###prop 'Отм' (Stock stock, ###object object) =
        (OVERRIDE dataIn###prop(stock, object),
                 in###prop(stockGroup(stock), object)) IF in(prop(object), stock) MATERIALIZED;
    replace(Stock s, Stock o) + { dataIn###prop(o, ###object object) <- TRUE WHERE in###prop(s, object) AND NOT in###prop(o, object);}
    preReplace(###object c, ###object object) + { dataIn###prop(Stock s, object) <- TRUE WHERE in###prop(s, c) AND NOT in###prop(s, object);}                 
                 
    countDataIn###prop##StockGroups(###object object) = GROUP SUM 1 IF dataIn###prop(StockGroup stockGroup, object);            
                                  
    backgroundAll###prop##Stocks 'Цвет' (###object object) = IF all###prop##Stocks(object) THEN RGB(0,0,0)
        ELSE RGB(203,203,203) IF countDataIn###prop##StockGroups(object);      
     
    quantityChildWithIn###prop(StockGroup group, ###object object)  = GROUP SUM 1 IF dataIn###prop(StockGroup childGroup, object) AND isParent(childGroup, group) MATERIALIZED;
    quantityParentWithIn###prop(StockGroup group, ###object object)  = GROUP SUM 1 IF dataIn###prop(StockGroup parentGroup, object) AND isParent(group, parentGroup) MATERIALIZED;          
          
    backgroundIn###prop 'Цвет' (StockGroup group, ###object object) = CASE
        WHEN dataIn###prop(group, object) THEN RGB(0,0,0)
        WHEN nearestIn###prop(group, object) THEN RGB(230,248,250) 
        WHEN quantityChildWithIn###prop(group, object) != descendantNumber(group) AND NOT quantityParentWithIn###prop(group, object) THEN RGB(203,203,203);
        
    backgroundIn###prop 'Цвет' (Stock stock, ###object object) = IF dataIn###prop(stock, object) THEN RGB(0,0,0)
        ELSE RGB(230,248,250) 
        IF in###prop(stockGroup(stock), object);  
END

META defineInStockGroupObject(prop, object)
    @defineInStockGroupObject(prop, object, ###object);
END

// ------------------------------------ Макрос для создания договоров по умолчанию ----------------------------- //
META defineContractDefault (contract, partyAClass, stockAClass, partyBClass, stockBClass, prefixA, prefixB)
    @defineContractDefault(contract, prefixA, prefixB);
    @defineContractDefaultStock(contract, ###contract, stockAClass, prefixA, prefixB);
END

META defineContractDefaultStock (contract, contractClass, stockAClass, prefixA, prefixB)
    default###contract###prefixA###prefixB(stockAClass sA, stockAClass sB, DATE dateIn)  = GROUP
            MAX ###contract contract 
        IF in###prefixA(sA,contract) AND in###prefixB(sB,contract)
        AND dateFrom(contract) <= dateIn AND NOT dateTo(contract) < dateIn AND NOT skipContract(contract);
            
    default###contract###prefixA (pA, stockAClass sA, DATE dateIn) = GROUP MAX ###contract contract 
        IF in###prefixA(sA,contract) //AND inCustomerStockContractSku(sB,contract)
        AND dateFrom(contract) <= dateIn AND NOT dateTo(contract) < dateIn AND NOT skipContract(contract)
            BY prefixA(contract);      
                  
    count###contract###prefixA (pA, stockAClass sA, DATE dateIn) = GROUP SUM 1 
        IF in###prefixA(sA,###contract contract) //AND inCustomerStockContractSku(sB,contract)
        AND dateFrom(contract) <= dateIn AND NOT dateTo(contract) < dateIn AND NOT skipContract(contract)
            BY prefixA(contract);  
                                
    default###contract###prefixA###prefixB (pA, stockAClass sA, pB, DATE dateIn) = GROUP MAX ###contract contract 
        IF in###prefixA(sA,contract) //AND inCustomerStockContractSku(sB,contract)
        AND dateFrom(contract) <= dateIn AND NOT dateTo(contract) < dateIn AND NOT skipContract(contract)
            BY prefixA(contract), prefixB(contract);      
                  
    count###contract###prefixA###prefixB (pA, stockAClass sA, pB, DATE dateIn) = GROUP SUM 1 
        IF in###prefixA(sA,###contract contract) //AND inCustomerStockContractSku(sB,contract)
        AND dateFrom(contract) <= dateIn AND NOT dateTo(contract) < dateIn AND NOT skipContract(contract)
            BY prefixA(contract), prefixB(contract);
            
    default###contract###prefixA###prefixB (pA, stockAClass sB, DATE dateIn) = GROUP MAX ###contract contract 
        IF in###prefixB[stockAClass,contractClass](sB,contract)
        AND dateFrom(contract) <= dateIn AND NOT dateTo(contract) < dateIn AND NOT skipContract(contract)
            BY prefixA(contract);    
END

META defineDocumentContract (objectClass, contractType, prefixA, prefixB, partyAMessage, partyBMessage, caption, NS)
    @defineDocumentContract (objectClass, contractType, prefixA, prefixB, default###contractType###prefixA###prefixB, partyAMessage, partyBMessage, caption, NS);
END

META defineDocumentContract (objectClass, contractType, prefixA, prefixB, defaultContractProp, partyAMessage, partyBMessage, caption, NS)
    @defineDocumentContractStock (objectClass, contractType, ###contractType, prefixA, prefixB, defaultContractProp, partyAMessage, partyBMessage, caption, NS);
END

META defineDocumentContractStock (objectClass, contractType, contractTypeClass, prefixA, prefixB, defaultContractProp, partyAMessage, partyBMessage, caption, NS)
    @defineDocumentContract (objectClass, contractType, contractTypeClass, prefixA, prefixB, defaultContractProp, partyAMessage, partyBMessage, caption, NS);

    isCommission 'Продажа на комиссию' = DATA BOOLEAN (objectClass) IN documentPrm;
    isCommission(objectClass o) <- type(contractType(o)) == ContractSkuType.commission
        WHEN CHANGED(contractType(o));

    skipSet###contractType = ABSTRACT VALUE BOOLEAN (###objectClass) PREREAD;
    WHEN LOCAL (CHANGED(prefixA(objectClass o)) OR CHANGED(prefixB(o)) OR CHANGED(prefixA##Stock(o))
                OR CHANGED(prefixB##Stock(o)) OR CHANGED(date(o))) AND NOT CHANGED(contractType(o)) AND NOT skipSet###contractType(o) NOINLINE DO {
                
        contractType(o) <- OVERRIDE defaultContractProp(prefixA##Stock(o), prefixB##Stock(o), date(o)),
                                                 defaultContractProp(prefixA(o), prefixB(o), date(o)),
                                                 single###contractType###prefixA###prefixB(prefixA(o), prefixB(o), date(o)) IF count###contractType###prefixA###prefixB(prefixA(o), prefixB(o), date(o)) == 1; 
    }

    CONSTRAINT contractType(objectClass o) AND count###prefixA##sStock(contractType(o)) AND NOT in###prefixA(prefixA##Stock(o),contractType(o))
        CHECKED BY contractType[objectClass] MESSAGE 'Для документа выбран склад поставщика, который не включен в договор';        
                  
    CONSTRAINT contractType(objectClass o) AND count###prefixB##sStock(contractType(o)) AND NOT in###prefixB(prefixB##Stock(o),contractType(o))
        CHECKED BY contractType[objectClass] MESSAGE 'Для документа выбран склад покупателя, который не включен в договор';                                    
END

META defineDocumentInterfaceContract (objectClass, contractType, prefixA, prefixB, partyAMessage, partyBMessage, caption, NS)
    @defineDocumentAbstractContract(objectClass, contractType);
    @defineDocumentContract(User###objectClass, contractType, prefixA, prefixB, partyAMessage, partyBMessage, caption, NS);
    contractType(User##objectClass o) += contractType(o);
    isCommission(User##objectClass o) += isCommission(o);
END

TABLE stockContract (Stock, Contract);

inPartyA 'Вкл.'  = ABSTRACT BOOLEAN (Stock, Contract) MATERIALIZED INDEXED;
inPartyB 'Вкл.' = ABSTRACT BOOLEAN (Stock, Contract) MATERIALIZED INDEXED;

namePartyAStocks 'Склады поставщика' (Contract contract) = GROUP
                                                 CONCAT name(Stock stock) IF inPartyA(stock, contract) , ', '
                                                 ORDER stock CHARWIDTH 30 MATERIALIZED;
namePartyBStocks 'Склады покупателя' (Contract contract) = GROUP
                                                 CONCAT name(Stock stock) IF inPartyB(stock, contract) , ', '
                                                 ORDER stock CHARWIDTH 30 MATERIALIZED;
EXTEND FORM contracts
    PROPERTIES (c) READONLY namePartyAStocks AFTER namePartyA(c), namePartyBStocks AFTER namePartyB(c)
;

EXTEND FORM contractDialog
    PROPERTIES (c) READONLY namePartyAStocks AFTER namePartyA(c), namePartyBStocks AFTER namePartyB(c)
;

countContract 'Кол-во договоров' (partyA, Stock stockA, partyB, Stock stockB) =
    GROUP SUM 1 IF inPartyA(stockA, Contract contract) AND inPartyB(stockB, contract) BY partyA(contract), partyB(contract);

CLASS ABSTRACT ContractSku 'Договор на поставку' : Contract;
TABLE contractSku(ContractSku);

id 'Код' = ABSTRACT STRING[100] (ContractSku) IN id CHARWIDTH 10;
id(ContractSku c) += id(c);

CLASS UserContractSku 'Договор на поставку (польз.)' : ContractSku;
@defineDocumentInterfaceHeaderNumber(ContractSku, BPSTRING[2]);
@defineExternalizable(userContractSku, STRING[100]);
@defineNumeratedID(UserContractSku, 'Договоры (код)', Id);

id(UserContractSku c) += id(c);

number (ContractSku contract) += number(contract);
series (ContractSku contract) += series(contract);

@defineNumeratedDefault(UserContractSku, 'Договоры', 'ДП');

word 'Файл договора' (UserContractSku) = DATA WORDFILE (UserContractSku);
file 'Файл договора' = DATA FILE (UserContractSku);

saveFile 'Загрузить файл договора' (UserContractSku userContractSku)  { INPUT =file(userContractSku) CHANGE; }
openFile 'Просмотреть файл договора' (UserContractSku userContractSku)  { open(file(userContractSku)); }

supplier = DATA LegalEntity (ContractSku);
nameSupplier 'Поставщик' (ContractSku contract) = name(supplier(contract)) IN id CHARWIDTH 20;
partyA (ContractSku contract) += supplier(contract);

//inSupplierStockContractSku 'Вкл.'  = DATA BOOLEAN (Stock, ContractSku);
TABLE stockGroupContractSku (StockGroup, ContractSku);
@defineInStockGroupObject(supplier, contractSku);
inPartyA (Stock stock, ContractSku contract) += inSupplier(stock,contract);

countSuppliersStock (ContractSku contract) = GROUP SUM 1 IF inSupplier(Stock stock,contract);

CONSTRAINT supplier(ContractSku contract) AND inSupplier(Stock stock, contract) AND NOT
    in(supplier(contract), stock) MESSAGE 'Поставщик и склад поставщика для договора не имеют связи';


//--------------------------------------------//
customer = DATA LegalEntity (ContractSku) INDEXED;
nameCustomer 'Покупатель' (ContractSku contract) = name(customer(contract)) IN id CHARWIDTH 20;
partyB (ContractSku contract) += customer(contract);

INDEX supplier(ContractSku c), customer(c);

@defineInStockGroupObject(customer, contractSku);


inPartyB (Stock stock, ContractSku contract) += inCustomer(stock,contract);

countCustomersStock (ContractSku contract)= GROUP SUM 1 IF inCustomer(Stock stock,contract);

CONSTRAINT customer(ContractSku contract) AND inCustomer(Stock stock, contract) AND NOT
    in(customer(contract), stock) MESSAGE 'Покупатель и склад покупателя для договора не имеют связи';

TABLE supplierCustomer(LegalEntity, LegalEntity);
@defineContractDefault(contractSku, LegalEntity, Stock, LegalEntity, Stock, supplier, customer);
//объединение организаций
replace(LegalEntity l, LegalEntity o) + { 
    supplier(ContractSku contract) <- o WHERE supplier(contract) == l;
    customer(ContractSku contract) <- o WHERE customer(contract) == l;
}   

CLASS ContractSkuType 'Тип договора на поставку' {
    sale 'Договор купли-продажи',
    commission 'Договор комиссии'
}: ContractType;

FORM contractSkuTypes 'Типы договоров на поставку'
    OBJECTS t = ContractSkuType
    PROPERTIES(t) READONLY name
    LIST ContractSkuType OBJECT t
;

type = DATA ContractSkuType (ContractSku);
nameType 'Тип договора' (ContractSku contract) = name(type(contract)) IN base;
isSaleType = ABSTRACT CASE BOOLEAN (ContractSku) MATERIALIZED INDEXED;
isSaleType(ContractSku contract) += WHEN type(contract) == ContractSkuType.sale THEN TRUE;
isCommissionType(ContractSku contract) = type(contract) == ContractSkuType.commission;

type (ContractSku o) <- ContractSkuType.sale WHEN SET(o IS ContractSku);
contractType (ContractSku c) += type(c);

readonlyIsDataDefault = ABSTRACT VALUE BOOLEAN (UserContractSku);

// Формы
FORM userContractSku 'Договор на поставку товаров'
    OBJECTS c = UserContractSku PANEL
    PROPERTIES(c) nameSupplier, nameCustomer, isDataDefault READONLYIF readonlyIsDataDefault(c), nameType,
                  nameNumerator, number, series, dateFrom, dateTo,
                  nameCurrency,  nameTypeExchange, descriptionPaymentCondition,
                  note, saveFile, openFile, id SHOWIF showIDs()

        TREE stockTree a=BPSTRING[3], sg = StockGroup PARENT parent(sg)
        PROPERTIES READONLY VALUE(a),name(sg)
        PROPERTIES(c) allSupplierStocks DRAW a BACKGROUND backgroundAllSupplierStocks(c)
        PROPERTIES(sg,c) inSupplier BACKGROUND backgroundInSupplier(sg,c)
        ORDERS name(sg)
        FILTERS stringEqualsAll(a)
        FILTERS countSupplierStock(sg) OR countCompanyStock(sg)
    
        OBJECTS ss = Stock
        PROPERTIES READONLY  name(ss), id(ss) SHOWIF showIDs()
        PROPERTIES(ss,c)    inSupplier BACKGROUND backgroundInSupplier(ss,c)
        FILTERS ss IS Stock AND NOT sg IS StockGroup OR isParent(sg, ss),
                in(supplier(c), ss),
                isCompany(ss) OR isSupplier(ss)
        FILTERGROUP filters
                FILTER 'Отм.'  inSupplier(ss,c) 'F10'
        FILTERGROUP active FILTER 'Активные' active(ss) 'F6' DEFAULT                   

        TREE stockTree1 b=BPSTRING[3], sg1 = StockGroup PARENT parent(sg1)
        PROPERTIES READONLY VALUE(b), name(sg1)
        PROPERTIES(c) allCustomerStocks DRAW b BACKGROUND backgroundAllCustomerStocks(c)
        PROPERTIES(sg1,c) inCustomer BACKGROUND backgroundInCustomer(sg1,c)
        ORDERS name(sg1)
        FILTERS stringEqualsAll(b)
        FILTERS countCustomerStock(sg1) OR countCompanyStock(sg1)
    
        OBJECTS ss1 = Stock
        PROPERTIES READONLY  name(ss1), id(ss1) SHOWIF showIDs()
        PROPERTIES(ss1,c)    inCustomer BACKGROUND backgroundInCustomer(ss1,c)
        FILTERS ss1 IS Stock AND NOT sg1 IS StockGroup OR isParent(sg1, ss1),
                in(customer(c), ss1),
                isCompany(ss1) OR isCustomer(ss1)
        FILTERGROUP filters1
                FILTER 'Отм.'  inCustomer(ss1,c) 'F10'
        FILTERGROUP active1 FILTER 'Активные' active(ss1) 'F6' DEFAULT                     
      
    EDIT UserContractSku OBJECT c
;


DESIGN userContractSku {
    NEW north {
        type = CONTAINERH;
        MOVE GROUP(numbered,c) {
            lines = 1;
            type = CONTAINERH;
        }
        MOVE GROUP(contract,c) {
            lines = 1;
            type = CONTAINERH;
            MOVE PROPERTY (id(c));
        }
    }
    NEW params {
        type = COLUMNS;
        lines = 3;
        caption = 'Параметры';
        MOVE PROPERTY(nameSupplier(c));
        MOVE PROPERTY(nameCustomer(c));
        MOVE PROPERTY(nameType(c));
        MOVE PROPERTY(isDataDefault(c));
    }
    MOVE GROUP(payment,c);
    NEW text {
        type = CONTAINERH;
        caption = 'Содержание';
        MOVE PROPERTY(saveFile(c));
        MOVE PROPERTY(openFile(c));
    }
    NEW tabContainer {
        fill = 1;
        type = TABBED;
        NEW supplier{
            fill = 1;
            type = SPLITH;
            caption = 'Склады поставщика';
            MOVE BOX(TREE stockTree) {caption = 'Группа складов';}
            MOVE BOX(ss) { fill = 2;}
        }
        NEW customer{
            fill = 1;
            type = SPLITH;
            caption = 'Склады покупателя';
            MOVE BOX(TREE stockTree1) {caption = 'Группа складов';}
            MOVE BOX(ss1) { fill = 2;}
        }
        NEW noteContainer {
            fill = 1;
            caption = 'Примечание';
            MOVE PROPERTY(note(c)) {
                panelCaptionVertical = TRUE;
                fill = 1;
            }
        }
    }
    MOVE TOOLBARBOX;
}

WHEN LOCAL FORMS userContractSku SETCHANGED(supplier(UserContractSku contract)) DO {
    currency(contract) <- OVERRIDE currency(supplier(contract)), defaultCurrency();
}

addUserContractSkuSupplierCustomer 'Добавить'(LegalEntity supplier, LegalEntity customer)  { 
	NESTEDSESSION{
	    NEW uc = UserContractSku {
	        supplier(uc) <- supplier;
	        customer(uc) <- customer;
	        currency(uc) <- OVERRIDE currency(supplier), defaultCurrency();
	        SHOW userContractSku OBJECTS c = uc DOCKED;
	    }
	}
} IMAGE 'add.png' CHANGEKEY 'INSERT' HIDE TOOLBAR;

is (UserContractSku contractSku) = contractSku IS UserContractSku;

show 'Просмотреть' (UserContractSku c) {
    SHOW userContractSku OBJECTS c = c READONLY;
} TOOLBAR;

EXTEND FORM contracts
    PROPERTIES(c) READONLY nameContractType 
    PROPERTIES(c) NEWSESSION show[UserContractSku] SHOWIF skipEdit(c), NEW[UserContractSku]
;

FORM contractSkus 'Договоры на поставку'
    OBJECTS c = ContractSku   
    PROPERTIES in(c)
    PROPERTIES(c) READONLY nameSupplier, namePartyAStocks, nameCustomer, namePartyBStocks, nameContractType,
                  seriesNumber, dateFrom, dateTo, nameCurrency,  nameTypeExchange, note
    PROPERTIES(c) NEWSESSION NEW[UserContractSku], EDIT SHOWIF NOT skipEdit(c), show[UserContractSku] SHOWIF skipEdit(c)

    LIST ContractSku OBJECT c
;
DESIGN contractSkus{
    BOX {
        size = (1024, 768);
    }   
}

NAVIGATOR {
    stockMasterData {
        NEW contracts;
    }
}

// ----------------------------- Расширяем форму организаций ------------------------------------------- //

isCustomer(LegalEntity l,UserContractSku css) = isCustomer(l) AND is(css);
isSupplier(LegalEntity l,UserContractSku csc) = isSupplier(l) AND is(csc);
EXTEND FORM legalEntity

    OBJECTS css = UserContractSku GRID
    PROPERTIES(css) SHOWIF isCustomer(l) READONLY seriesNumber, nameType, dateFrom,
                    dateTo, nameCurrency, note, descriptionPaymentCondition, namePartyAStocks, namePartyBStocks
    PROPERTIES      SHOWIF isCustomer(l) addUserContractSkuSupplierCustomer(s, l) DRAW css 
    PROPERTIES(css) SHOWIF isCustomer(l) NESTEDSESSION EDIT SHOWIF NOT skipEdit(css), show[UserContractSku] SHOWIF skipEdit(css)
    PROPERTIES(css) DELETE SHOWIF isCustomer(l,css) GRID
    
    FILTERS customer(css) == l,
            supplier(css) == s

//    FILTERGROUP filters
//        FILTER 'Есть договор' 'F10' countContractPartyAPartyB(s, l)

    OBJECTS csc = UserContractSku GRID
    PROPERTIES(csc) SHOWIF isSupplier(l) READONLY seriesNumber, nameType, dateFrom,
                    dateTo, nameCurrency, note, descriptionPaymentCondition
    PROPERTIES SHOWIF isSupplier(l) addUserContractSkuSupplierCustomer(l, c) DRAW csc 
    PROPERTIES(csc) SHOWIF isSupplier(l) NESTEDSESSION EDIT SHOWIF NOT skipEdit(csc), show[UserContractSku] SHOWIF skipEdit(csc)
    PROPERTIES(csc) DELETE SHOWIF isSupplier(l,csc) GRID
    FILTERS customer(csc) == c,
            supplier(csc) == l

//    FILTERGROUP filters
//        FILTER 'Есть договор' 'F8' countContractPartyAPartyB(l, c)
;

DESIGN legalEntity {
    docPurchaseContainer {
        MOVE BOX(css) {
            caption = 'Договоры на поставку';
        }
    }
    docSaleContainer {
        MOVE BOX(csc) {
            caption = 'Договоры на поставку';
        }
    }
}

overCopyUser  ABSTRACT LIST ( UserContractSku, UserContractSku);
copyUser 'Копировать' (UserContractSku from) { 
    IF (from IS UserContractSku) THEN {
        NEWSESSION  {
            NEW to = UserContractSku {
                overCopyUser(from, to);
                SHOW userContractSku OBJECTS c = to DOCKED NOCANCEL;    
            }
        }
    }
} CHANGEKEY 'F6' TOOLBAR;

overCopyUser(UserContractSku from, UserContractSku to) +{
    word(to) <- word(from);
    file(to) <- file(from);
    dateFrom(to) <- dateFrom(from);
    dateTo(to) <- dateTo(from);
    currency(to) <- currency(from);
    typeExchange(to) <- typeExchange(from);
    paymentCondition(to) <- paymentCondition(from);
    type(to) <- type(from); 
    note(to) <- note(from);   
        
    supplier(to) <- supplier(from);
    allSupplierStocks(to) <- allSupplierStocks(from);    
    dataInSupplier(StockGroup g,to) <- dataInSupplier(g,from) WHERE dataInSupplier(g,from);
    dataInSupplier(Stock g,to) <- dataInSupplier(g,from) WHERE dataInSupplier(g,from);        
    customer(to) <- customer(from);
    allCustomerStocks(to) <- allCustomerStocks(from);    
    dataInCustomer(StockGroup g,to) <- dataInCustomer(g,from) WHERE dataInCustomer(g,from);
    dataInCustomer(Stock g,to) <- dataInCustomer(g,from) WHERE dataInCustomer(g,from);        
    isDataDefault(to) <- isDataDefault(from);     
}