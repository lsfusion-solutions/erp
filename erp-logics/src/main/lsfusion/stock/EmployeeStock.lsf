MODULE EmployeeStock;

REQUIRE Stock, EmployeeLegalEntity, SystemEvents;

TABLE stockEmployee (Stock, Employee);
in 'Сотрудник подразделения' = DATA BOOLEAN (Stock, Employee);

allowStockEmployee 'Разрешить использование в комиссиях сотрудников из других подразделений' = DATA BOOLEAN ();
EXTEND FORM options
    PROPERTIES () allowStockEmployee
;
DESIGN options {
    stock1 {
        MOVE PROPERTY(allowStockEmployee());
    }
}

TABLE stockGroupEmployee(StockGroup, Employee);
TABLE dataStockGroupEmployee(StockGroup, Employee);
TABLE sessionStockGroupEmployee(Session, StockGroup, Employee);

//--  Компания
dataAccessCompany 'Доступ разрешен (компания)' = DATA BOOLEAN (Employee);
dataAccessCompany 'Доступ разрешен (компания)' = DATA BOOLEAN (Stock, Employee);
dataAccessCompany 'Доступ разрешен (компания)' = DATA BOOLEAN (StockGroup, Employee) TABLE dataStockGroupEmployee;

levelParentCompany (Employee employee, StockGroup stockGroup) = GROUP
                                                               MIN level(stockGroup, StockGroup parent) IF dataAccessCompany(parent, employee) MATERIALIZED;
nearestParentCompany (Employee employee, StockGroup stockGroup) = stockGroup(stockGroup, levelParentCompany(employee, stockGroup));
nearestInCompany (Employee employee, StockGroup stockGroup) =
    dataAccessCompany(nearestParentCompany (employee, stockGroup), employee) MATERIALIZED;

accessCompany 'Доступ разрешен (компания)' (Employee employee, StockGroup stockGroup) = OVERRIDE
    dataAccessCompany(stockGroup, employee),
    nearestInCompany(employee, stockGroup),
    dataAccessCompany(employee) AND stockGroup IS StockGroup,
    employee IS Employee  AND stockGroup IS StockGroup AND NOT limitAccess(employee); // MATERIALIZED;

accessCompany 'Доступ разрешен (компания)' (Employee employee, Stock stock) = OVERRIDE
    dataAccessCompany(stock, employee),
    nearestInCompany(employee, stockGroup(stock)),
    dataAccessCompany(employee) AND isCompany(stock),
    employee IS Employee AND isCompany(stock) AND NOT limitAccess(employee) MATERIALIZED;
countAccessCompanyStock 'Кол-во доступных подразделений (компания)' (Employee employee) =
    GROUP
          SUM 1 IF accessCompany(employee, Stock stock) AND active(stock);
defaultCompanyStock  (Employee employee) =
    GROUP
          MIN  Stock stock IF accessCompany(employee, stock) AND active(stock);
          
companyStocks  'Склады (компания)' (Employee employee) = GROUP
                                       CONCAT name(Stock st) IF accessCompany(employee, st) , ', '
                                       ORDER name(st) CHARWIDTH 20;            
          
          
META defineDocumentStockAccess(objectClass, prefix, filter)
    prefix(objectClass o) <- default###filter###prefix(currentUser()) IF countAccess###filter###prefix (currentUser()) == 1
                                           WHEN SET(o IS objectClass);
END     
                          
accessCompany 'Доступ разрешен (компания)' (Stock s) = accessCompany(currentUser(), s) OR (s IS Stock AND NOT limitAccess(currentUser()));

countAccessCompany 'Кол-во доступных подразделений (компания)' (Employee employee, StockGroup stockGroup) =
    GROUP
          SUM 1 IF accessCompany(employee, Stock stock)
                AND isParent(stockGroup(stock), stockGroup) MATERIALIZED;
          
dataStock = DATA Stock (Employee);
stock (Employee e) = OVERRIDE dataStock(e), defaultCompanyStock(e) IF countAccessCompanyStock (e) == 1 MATERIALIZED;
idStock 'Основной склад' (Employee e) = id(stock(e));
nameStock 'Основной склад' (Employee e) = name(stock(e));

WHEN SETCHANGED(Stock s = stock(Employee e)) AND NOT accessCompany(e, s) DO {
    accessCompany(e, s) <- TRUE;   
}

CONSTRAINT Stock s == dataStock(Employee e) AND NOT accessCompany(e, s) CHECKED BY dataStock[Employee] MESSAGE 'Не разрешен доступ к складу выбранному в качестве основного';

EXTEND FORM employees PROPERTIES(e) READONLY nameStock, companyStocks;

// todo : Удалить потом
//-- Поставщик
dataAccessSupplier 'Доступ разрешен (поставщик)' = DATA BOOLEAN (Employee);
dataAccessSupplier 'Доступ разрешен (поставщик)' = DATA BOOLEAN (Stock, Employee);
dataAccessSupplier 'Доступ разрешен (поставщик)' = DATA BOOLEAN (StockGroup, Employee);

//--  Покупатель
dataAccessCustomer 'Доступ разрешен (покупатель)' = DATA BOOLEAN (Employee);
dataAccessCustomer 'Доступ разрешен (покупатель)' = DATA BOOLEAN (Stock, Employee);
dataAccessCustomer 'Доступ разрешен (покупатель)' = DATA BOOLEAN (StockGroup, Employee);

overCopy(Employee e,Employee employee) + { 
    dataAccessCompany(e) <- dataAccessCompany(employee); 
    dataAccessSupplier(e) <- dataAccessSupplier(employee); 
    dataAccessCustomer(e) <- dataAccessCustomer(employee); 
    dataStock(e) <- dataStock(employee); 
               
    in(Stock l,e) <- in(l,employee) WHERE in(l,employee);       
       
    dataAccessCompany(Stock l,e) <- dataAccessCompany(l,employee) WHERE dataAccessCompany(l,employee);
    dataAccessCompany(StockGroup lg,e) <- dataAccessCompany(lg,employee) WHERE dataAccessCompany(lg,employee);
    
    dataAccessSupplier(Stock l,e) <- dataAccessSupplier(l,employee) WHERE dataAccessSupplier(l,employee);
    dataAccessSupplier(StockGroup lg,e) <- dataAccessSupplier(lg,employee) WHERE dataAccessSupplier(lg,employee);
    
    dataAccessCustomer(Stock l,e) <- dataAccessCustomer(l,employee) WHERE dataAccessCustomer(l,employee);
    dataAccessCustomer(StockGroup lg,e) <- dataAccessCustomer(lg,employee) WHERE dataAccessCustomer(lg,employee);    
};

EXTEND FORM employee

    PROPERTIES nameStock(e)

    TREE stockTree a = BPSTRING[3], sg = StockGroup  PARENT parent(sg)
    PROPERTIES READONLY VALUE(a), sgTreeName = name(sg)
    ORDERS sgTreeName
    FILTERS stringEqualsAll(a)
    PROPERTIES(e)  DRAW a dataAccessSupplier, dataAccessCompany, dataAccessCustomer
    PROPERTIES(e,sg)  accessCompany

    OBJECTS s = Stock GRID
    PROPERTIES(s) READONLY id 
    PROPERTIES(s) READONLY stockName = name, nameLegalEntity
    PROPERTIES(s,e) in 
    ORDERS stockName
    FILTERS isParent(sg, s) OR (s IS Stock AND NOT sg),
            isCompany(s)
    FILTERGROUP inactiveStock FILTER 'Активный' active(s) 'ctrl F10' DEFAULT
    PROPERTIES(e,s) accessCompany
;

DESIGN employee {
    pane {
        NEW stockContainer {
            caption = 'Склады';
            MOVE PROPERTY(nameStock(e));
            NEW stockSplitContainer{
                fill = 1;
                type = SPLITH;
                MOVE BOX(TREE stockTree) { 
                    caption = 'Группы складов';
                    PROPERTY (accessCompany(e,sg)) {valueWidth = 100; }
                    
                };
                MOVE BOX(s) {
                    GRID(s) {
                        defaultComponent = TRUE;
                        PROPERTY (in(s,e)) {valueWidth = 90;}
                        PROPERTY (accessCompany(e,s)) {valueWidth = 100;}
                    }
                }
            }
        }
    }
}

//Временный доступ
CLASS TemporaryAccess 'Временный доступ';
TABLE temporaryAccess (TemporaryAccess);

dateFrom 'Дата с' = DATA DATE (TemporaryAccess);
dateTo 'Дата по' = DATA DATE (TemporaryAccess);
employee 'Сотрудник' = DATA Employee (TemporaryAccess);
stock 'Склад' = DATA Stock (TemporaryAccess);
nameStock 'Склад' (TemporaryAccess t) = name(stock(t));

CONSTRAINT dateTo(TemporaryAccess t) < dateFrom(t)
    MESSAGE 'Дата окончания доступа не может быть меньше даты начала';
CONSTRAINT SET(dateFrom(TemporaryAccess t)) AND dateFrom(t) < currentDate()
    MESSAGE 'Дата начала доступа не может быть меньше текущей даты';

WHEN SET(dateFrom(TemporaryAccess t) <= currentDate()) AND CHANGED(currentDate()) AND currentDate() <= dateTo(t)  DO
    dataAccessCompany(Stock s, Employee e) <- TRUE WHERE s == stock(t) AND e == employee(t);
WHEN SET(dateTo(TemporaryAccess t) < currentDate()) AND CHANGED(currentDate()) DO
    dataAccessCompany(Stock s, Employee e) <- NULL WHERE s == stock(t) AND e == employee(t);

EXTEND FORM employee
    OBJECTS ta = TemporaryAccess GRID 
    PROPERTIES(ta) nameStock, dateFrom, dateTo, DELETE, NEW
    ORDERS nameStock(ta), dateFrom(ta) DESC
    FILTERS employee(ta) == e
;

DESIGN employee {
    stockSplitContainer {
        NEW stocks {
            type = SPLITV;
            fill = 1;
            MOVE BOX(s);
            MOVE BOX (ta);
        }
    }
}

// ----------------------------------- Комиссии ---------------------------------------------------------- //

META defineCommitteeEmployee (committee, prefix, caption)
    prefix = DATA Employee (###committee);
    name###prefix caption (###committee committee) = name[Contact](prefix(committee)) IN id;
    shortName###prefix caption (###committee committee) = shortName(prefix(committee)) IN id;
    namePosition###prefix caption (###committee committee) = namePosition(prefix(committee));
    positionName###prefix caption (###committee committee) = positionName(prefix(committee));  
    positionShortName###prefix caption (###committee committee) = positionShortName(prefix(committee));              
    CONSTRAINT prefix(###committee committee) AND NOT countStock(prefix(committee), committee) AND NOT allowStockEmployee()
        CHECKED BY prefix[###committee] MESSAGE '\''##caption##'\' не входит в выбранные подразделения';
END

META defineCommitteeEmployeePrefix (committee, prefix, caption)
    prefix = DATA Employee (###committee);
    name###prefix caption (###committee committee) = name[Contact](prefix(committee)) IN id;
    shortName###prefix caption (###committee committee) = shortName(prefix(committee)) IN id;
    namePosition###prefix caption (###committee committee) = namePosition(prefix(committee));
    positionName###prefix caption (###committee committee) = positionName(prefix(committee));   
    positionShortName###prefix caption (###committee committee) = positionShortName(prefix(committee));             
    CONSTRAINT prefix(###committee committee) AND NOT countStock(prefix(committee), committee) AND NOT allowStockEmployee()
        CHECKED BY prefix[###committee] MESSAGE '\''##caption##'\' не входит в выбранные подразделения';
END

META defineEmployee (object, prefix, caption)
    prefix = DATA Employee (###object);
    name###prefix caption (###object object) = name[Contact](prefix(object)) IN id;
    shortName###prefix caption (###object object) = shortName(prefix(object)) IN id;
    namePosition###prefix caption (###object object) = namePosition(prefix(object));
    positionName###prefix caption (###object object) = positionName(prefix(object));   
    positionShortName###prefix caption (###object object) = positionShortName(prefix(object));             

END

CLASS ABSTRACT Committee 'Комиссия';
TABLE committee (Committee);

name 'Наименование' = ABSTRACT ISTRING[150](Committee);

TABLE committeeEmployee (Committee, Employee);
in 'Является членом комиссии' (committee, employee) = DATA BOOLEAN (Committee, Employee);

number 'Порядковый номер члены комиссии' = DATA INTEGER (Committee, Employee);
employee (Committee committee, number) = 
    GROUP AGGR Employee employee BY number(committee, employee);  

TABLE committeeStock (Committee, Stock);
in 'Вкл.' = DATA BOOLEAN (Committee, Stock);

countStock  (Employee employee, Committee committee) = GROUP SUM 1 IF in(committee, Stock stock) AND in(stock, employee);
CONSTRAINT in(Committee committee, Employee employee) AND NOT countStock(employee, committee) AND NOT allowStockEmployee()
    CHECKED MESSAGE 'Член комиссии не входит в выбранные подразделения';

@defineCommitteeEmployee(committee, chairman, 'Председатель');

namePositionEmployee 'Члены комиссии' (Committee committee) =
     GROUP
     CONCAT positionName(Employee employee) IF in(committee, employee), ', '
     ORDER number(committee, employee), employee
     CHARWIDTH 50;

shortNamePositionEmployee 'Члены комиссии' (Committee committee) =
    GROUP
    CONCAT positionShortName(Employee employee) IF in(committee, employee), ', '
    ORDER number(committee, employee), employee
    CHARWIDTH 50;

nameEmployee 'Члены комиссии' (Committee committee) =
     GROUP
     CONCAT name[Contact](Employee employee) IF in(committee, employee), ', '
     ORDER number(committee, employee), employee
     CHARWIDTH 50;
     
shortNameEmployee 'Члены комиссии' (Committee committee) =
     GROUP
     CONCAT shortName(Employee employee) IF in(committee, employee), ', '
     ORDER number(committee, employee), employee
     CHARWIDTH 50;     

nameStocks 'Подразделения' (Committee committee) =
     GROUP
     CONCAT name(Stock stock) IF in(committee, stock), ', '
     ORDER stock
     CHARWIDTH 50;

// ---------------------------------- Доступ к складам --------------------------------------------------- //

countAccessCompanyStock (Employee employee, LegalEntity legalEntity) = GROUP
        SUM 1 
    IF in(legalEntity, Stock stock) AND active(stock) AND accessCompany(employee, stock);
 
defaultCompanyStock 'Склад по умолчанию (компания)' (Employee employee, LegalEntity legalEntity)= GROUP
        MIN Stock stock 
    IF in(legalEntity, stock) AND active(stock) AND accessCompany(employee, stock);
                                                                                    
// Для документа, у которого задан склад
META extendFormFilterAccessStock(object, concrete, form, stockProp, filter)
    EXTEND FORM form FILTERS access###filter(currentUser(),stockProp(concrete)) OR NOT stockProp(concrete);
END
META extendFormFilterAccessStockNoNull(object, concrete, form, stockProp, filter)
    EXTEND FORM form FILTERS access###filter(currentUser(),stockProp(concrete));
END
META extendFormFilterAccessStock(concrete, form, stockProp, filter)
    @extendFormFilterAccessStock(, concrete, form, stockProp, filter);
END
META extendFormFilterAccessStockNoNull(concrete, form, stockProp, filter)
    @extendFormFilterAccessStockNoNull(, concrete, form, stockProp, filter);
END

// Когда склад идет объектом
META extendFormFilterStockAccess(concrete, form, filter)
    EXTEND FORM form FILTERS access###filter(currentUser(), concrete);
END
META extendFormFilterStockAccess(concrete, form) // по умолчанию для компании
    @extendFormFilterStockAccess(concrete, form, company);
END
// Для группы складов
META extendFormFilterStockGroupAccess(concrete, form, filter)
    EXTEND FORM form FILTERS countAccess###filter(currentUser(), concrete) OR NOT (limitAccess(currentUser()) OR countStocks(concrete));
END
META extendFormFilterStockGroupAccess(concrete, form) // по умолчанию для компании
    @extendFormFilterStockGroupAccess(concrete, form, company);
END

// ----------------------------- Автоматическое проставление организаций и складов --------------------------------------- //

META defineDocumentLegalEntityStockAccess(objectClass, prefix, filter, form)
    @defineDocumentLegalEntityAccess(objectClass, prefix, filter);

    WHEN LOCAL FORMS form CHANGED(prefix(###form o)) DO {
        IF countAccess###filter##Stock (currentUser(), prefix(o)) == 1 THEN
            prefix##Stock(o) <- default###filter##Stock(currentUser(), prefix(o));
        IF NOT in(prefix(o), prefix##Stock(o)) THEN 
            prefix##Stock(o) <- NULL;
    }
END

META defineDocumentSupplierCustomerStockAccess (objectClass, supplierFilter, customerFilter, form)
    @defineDocumentLegalEntityStockAccess(objectClass, supplier, supplierFilter, form);
    @defineDocumentLegalEntityStockAccess(objectClass, customer, customerFilter, form);
END

// ----------------------------------------- Фильтруем формы, которые объявлены в Stock ----------------------- //
// Нельзя делать в Stock, поскольку иначе будет цикличная связь по модулям

@extendFormFilterStockGroupAccess(sg, companyStocks, company);
@extendFormFilterStockAccess(s, companyStocks, company);

@extendFormFilterStockGroupAccess(sg, companysStock, company);
@extendFormFilterStockAccess(s, companysStock, company);

@extendFormFilterLegalEntityAccess(c, legalEntity, company);
@extendFormFilterLegalEntityAccess(s, legalEntity, company);
