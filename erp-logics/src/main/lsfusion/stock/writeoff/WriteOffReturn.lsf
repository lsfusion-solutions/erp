MODULE WriteOffReturn;

REQUIRE WriteOff;

NAMESPACE WriteOffReturn; 

CLASS WriteOff 'Списание-возврат' : Document;
CLASS WriteOffDetail 'Строка списания-возврат' : DocumentDetail;

CLASS UserWriteOff 'Списание-возврат (польз.)' : WriteOff;
CLASS UserWriteOffDetail 'Строка списания-возврат (польз.)' : WriteOffDetail;

@defineDocumentInterface(writeOff);
@deriveDocumentHeaderTimePrefix(UserWriteOff, );
                
@defineDocumentInterfaceDataStock(writeOff, stock, 'Склад');
@defineDocumentDialogStocks(userWriteOff, stock, company, , );

CONSTRAINT stock(UserWriteOff w) AND NOT  isCompany(stock(w))
    CHECKED BY stock[UserWriteOff]
    MESSAGE 'Выбран склад, который не принадлежит компании';
    
@defineDocumentInterfaceNumber(writeOff, BPSTRING[2]);
@defineNumeratedDefault(UserWriteOff, 'Списания', 'СП', WriteOffReturn);


@defineDocumentInterfacePosted(writeOff);
@defineDocumentInterfaceClosed(writeOff);
@defineDocumentInterfaceDescription (writeOff, 'Списание товара');

@defineDocumentInterfaceCurrency(writeOff);
@deriveDocumentCurrency(userWriteOff, stock);

addressLegalEntity 'Адрес' (WriteOff writeOff) = address(legalEntityStock(writeOff), date(writeOff));
addressLegalEntity 'Адрес' (UserWriteOff userWriteOff) = address(legalEntityStock(userWriteOff), date(userWriteOff));

@defineDocumentInterfaceDetailSku(writeOff, sku);

// Для инвентаризации по партиям
@showDocumentInterfaceDetailBatch(writeOff);
@defineDocumentInterfaceDetailBatch(writeOff, batch);
changeBatch(UserWriteOffDetail userWriteOffDetail)  { 
    DIALOG dialogBatchStockIn OBJECTS st = stock(userWriteOffDetail),
                             t = dateTime(userWriteOffDetail),
                             sk = sku(userWriteOffDetail),
                             bt = batch(userWriteOffDetail) INPUT NULL NEWSESSION DO
        batch(userWriteOffDetail) <- bt;
}
@defineDocumentInterfaceDetailQuantity(writeOff);
@defineDocumentInterfaceDetailPrice(writeOff);
@defineDocumentInterfaceDetailDataSum(writeOff);
@deriveDocumentDetailSum(userWriteOff, quantity);

@deriveDocumentDetailPriceAccountBatch(userWriteOff, sku, stock);

@defineDocumentInterfaceHeaderQuantity(writeOff);
@defineDocumentHeaderSkuQuantity(writeOff, sku);
@defineDocumentHeaderSkuQuantity(userWriteOff, sku);

@defineDocumentInterfaceHeaderSum(writeOff);

@defineDocumentInterfaceHeaderItemSum(writeOff, , );

@defineAddDetailDialogSkuStock(userWriteOff, sku, stock, dialogSku);
@defineAddDetailDialogBarcode(userWriteOff, sku);

@defineDocumentInterfaceHeaderWriteOffCommittee(writeOff, stock);

reason 'Причина списания (ИД)' = ABSTRACT Reason (WriteOff);
reason 'Причина списания (ИД)' = DATA Reason (UserWriteOff);
reason(UserWriteOff writeOff) += reason(writeOff);
nameReason 'Причина списания' (WriteOff writeOff) = name(reason (writeOff)) IN documentPrm;
nameReason 'Причина списания' (UserWriteOff userWriteOff) = name(reason (userWriteOff)) IN documentPrm;


@defineDocumentInterfaceLegalEntity (writeOff, contact, 'Контрагент');

// --------------------- Добрасываем в подбор документа --------------------- //
@implementDocument(writeOff);

@implementDocumentForm(writeOff, wor, 'Списание-возврат', writeOffReturn);

@implementDocumentBatch(writeOff);

@implementDocumentBatchForm(wor);

supplierStock(WriteOff writeOff) += stock(writeOff);

isStockSku (WriteOffDetail writeOffDetail) = isStock(sku(writeOffDetail));
isStockSku (UserWriteOffDetail userWriteOffDetail) = isStock(sku(userWriteOffDetail));

// --------------------------- Формы списания ---------------------------------

FORM userWriteOff 'Списание-возврат'
    OBJECTS w=UserWriteOff PANEL
    PROPERTIES (w) isPosted, nameNumerator, number, series, date, time,
                   nameStock ON CHANGE changeStockCompany(w), nameCurrency, note,
                   countUserWriteOffDetail, quantityUserWriteOffDetail,
                   sumUserWriteOffDetail, nameReason, nameWriteOffCommittee, nameContact

    OBJECTS d=UserWriteOffDetail
    PROPERTIES (d) index, idBarcodeSku, nameSku, shortNameUOMSku,
                   nameBatch ON CHANGE changeBatch(d), quantity,
                   price, sum, nameStock, NEW, deletewd=DELETE GRID

    PROPERTIES(w) DRAW d fillDocument, addDetailDialogSkuStockUserWriteOffDetail,
                           addDetailInputBarcodeUserWriteOffDetail, deleteUserWriteOffDetail
    FILTERS userWriteOff(d)==w

    EVENTS
        ON OK prePost(w)

    EDIT UserWriteOff OBJECT w
;

DESIGN userWriteOff {

    BOX {
        size = (1024, 768);
        NEW mainTabbed {
            tabbed = TRUE;
            fill = 1;
            NEW documentBox {
                fill = 1;
                caption = 'Списание-возврат';   
            
                NEW header {
                    horizontal = TRUE;
        
                    NEW headerRow1 {
                        fill = 1;
        
                        MOVE GROUP(documentHeader,w) {
                            lines = 1;
                            NEW first {
                                horizontal = TRUE;
                                MOVE PROPERTY(isPosted(w));
                                MOVE PROPERTY(nameStock(w));
                            }
                            NEW second { 
                                horizontal = TRUE;
                                MOVE PROPERTY(nameNumerator(w));
                                MOVE PROPERTY(number(w));
                                MOVE PROPERTY(series(w));
                                MOVE PROPERTY(date(w));
                                MOVE PROPERTY(time(w));
                            }    
                        }
        
                        NEW headerTabbedPane {
                            alignment = STRETCH;
                            tabbed = TRUE;
                            NEW headerMainParams {
                                caption = 'Основные параметры';
                                MOVE GROUP(documentPrm,w) {
                                    lines = 2;
                                }
                            }
                            NEW headerExtraParams {
                                caption = 'Дополнительные параметры';
                            }
                            NEW headerCreateDetail {
                                caption = 'Основание';
                            }
                            NEW headerCreateDocuments {
                                caption = 'Производные документы';
                            }
                        }
                    }
        
                    MOVE GROUP(documentSum,w) {
                        lines = 1;
                    }
                }
        
                NEW specificationBox {
                    fill = 1;
                    tabbed = TRUE;
                    MOVE BOX(d) {
                        caption = 'Спецификация';
                    }
                }
            }
        }
        MOVE TOOLBARBOX;

        PROPERTY(formOk()) {
            caption = 'Провести';
        }
    }
}

WHEN LOCAL FORMS userWriteOff CHANGED(batch(UserWriteOffDetail detail)) DO {
    sku (detail)  <- sku(batch(detail)) IF batch(detail);
}
//-- SKU
@defineDocumentSkuStockPriceListTypeSystemLedger(userWriteOff, );
@extendFormDocumentSkuStock(userWriteOff, userWriteOff, w, legalEntityStock, );

@defineDocumentBatchStockPriceListTypeSystemLedger(userWriteOff, );
@extendFormDocumentBatchStock(userWriteOff, userWriteOff, w, legalEntityStock, );

@defineMovementSku(writeOffDetail, stock); //-- показываем по нажатию правой клавиши движение товара
@defineMovementSku(userWriteOffDetail, stock); //-- показываем по нажатию правой клавиши движение товара
@defineBalancesSku(writeOffDetail); //-- показываем по нажатию правой клавиши остатки товара
@defineBalancesSku(userWriteOffDetail); //-- показываем по нажатию правой клавиши остатки товара

@defineBarcodeSku(writeOffDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
@defineBarcodeSku(userWriteOffDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара   

@defineInfoSku(writeOffDetail); //-- показываем по нажатию правой клавиши информацию по товару
@defineInfoSku(userWriteOffDetail); //-- показываем по нажатию правой клавиши информацию по товару

// История по правой кнопке
@defineBalancesBatch(writeOffDetail); //-- показываем по нажатию правой клавиши остатки партии
@defineBalancesBatch(userWriteOffDetail); //-- показываем по нажатию правой клавиши остатки партии
@defineMovementBatch(writeOffDetail, stock); //-- показываем по нажатию правой клавиши движение по партии
@defineMovementBatch(userWriteOffDetail, stock); //-- показываем по нажатию правой клавиши движение по партии

isUserOpened(UserWriteOff w)=  isOpened[WriteOff](w) AND is(w);

FORM writeOffs 'Списания-возврат'
    OBJECTS w=WriteOff
    PROPERTIES (w) READONLYIF isReadonly() isClosed, isPosted, number, series, 
                   date, time, nameStock
    PROPERTIES (w) READONLY nameReason, quantityWriteOffDetail, countWriteOffDetail,
                            sumWriteOffDetail
    PROPERTIES (w) READONLYIF isReadonly() note

    PROPERTIES (w) READONLY PANEL createdTime, createdNameUser, createdHostnameComputer, 
                   postedNameUser, postedTime, postedHostnameComputer
    PROPERTIES (w) NEWSESSION NEW[UserWriteOff], EDIT SHOWIF isOpened(w), deletew=DELETE SHOWIF isUserOpened(w)  
    PROPERTIES (w) close[UserWriteOff] SHOWIF isOpened[UserWriteOff](w), open SHOWIF isClosed[UserWriteOff](w)
    
    OBJECTS d=WriteOffDetail
    PROPERTIES (d) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku, 
                   nameBatch, quantity, price,
                   sum, nameStock

    FILTERS writeOff(d) == w
;
@extendFormFilterAccessStock(WriteOff, w, writeOffs, stock, company);

DESIGN writeOffs {
    NEW pane {
        fill = 1;

        MOVE BOX(w) {
            fill = 2;
        }

        NEW documentDetail {
            fill = 1;
            tabbed = TRUE;

            MOVE BOX(d) {
                caption = 'Спецификация';
            }
            NEW documentHistory {
                caption = 'История';

                MOVE GROUP(created,w);
                MOVE GROUP(posted,w);
            }
            NEW printTab {
                caption = 'Печатные формы';
                NEW printContainer {
                    caption = 'Печать';
                    horizontal = TRUE;
                }
            }
        }
    }

    MOVE TOOLBARBOX;
}
@extendFormEditable(writeOffs);
@defineFilterIsOpened (writeOff, writeOffs, w);
@defineDocumentLogForm(writeOffs, w);
//----------------------------------------------- Операции -----------------------------------------------------//
@defineDocumentInterfaceOperation (writeOff, WriteOff, );
@extendFormFilterRoleAccessNS(writeOff, w, writeOffs,Operation);

@defineDocumentOperationRolePrefix(userWriteOff, );

EXTEND FORM userWriteOff
    PROPERTIES(w) nameOperation
;
DESIGN userWriteOff{
    first{
        MOVE PROPERTY (nameOperation(w)) BEFORE PROPERTY(nameStock(w));
    }
}
EXTEND FORM writeOffs
    PROPERTIES(w) READONLY nameOperation BEFORE nameReason(w)
;
   
//// Основание    
//    
//writeOffDetail (writeOffDetail) = ABSTRACT WriteOff.WriteOffDetail (WriteOffDetail) MATERIALIZED;
//writeOffDetail (userWriteOffDetail) = DATA WriteOff.WriteOffDetail (UserWriteOffDetail);
//writeOffDetail(UserWriteOffDetail detail) += writeOffDetail(detail);
//
//returnQuantity 'Кол-во (возвращено)' (writeOffDetail)= GROUP SUM quantity(WriteOffDetail writeOffDetail) BY writeOffDetail(writeOffDetail) MATERIALIZED;
//returnQuantityWriteOffDetail 'Кол-во (возвращено)' (writeOff) =  GROUP SUM returnQuantity(WriteOff.WriteOffDetail writeOffDetail) BY writeOff(writeOffDetail) MATERIALIZED;
//
//CONSTRAINT returnQuantity(WriteOff.WriteOffDetail detail) > quantity(detail)
//    MESSAGE 'Количество строки возврата больше чем количество строки основания';
//
//CONSTRAINT sku(writeOffDetail(UserWriteOffDetail detail)) !=  sku(detail) CHECKED BY writeOffDetail[UserWriteOffDetail]
//    MESSAGE 'SKU строки основания должен соответствовать SKU строки возврата';
//
//CONSTRAINT contact(writeOffDetail(UserWriteOffDetail detail)) !=  contact(detail) CHECKED BY writeOffDetail[UserWriteOffDetail]
//    MESSAGE 'Контрагент строки основания должен соответствовать Контрагент строки возврата';
//
//CONSTRAINT stock(writeOffDetail(UserWriteOffDetail detail)) != stock(detail) CHECKED BY writeOffDetail[UserWriteOffDetail]
//    MESSAGE 'Склад строки основания должен соответствовать Склад строки возврата';
//
//descriptionWriteOffDetail 'Основание' (WriteOffDetail writeOffDetail) = description(writeOffDetail(writeOffDetail));
//descriptionWriteOffDetail 'Основание' (UserWriteOffDetail userWriteOffDetail) = description(writeOffDetail(userWriteOffDetail));
//
//recalculatedPrice(UserWriteOffDetail detail)  {    //todo: необходимо сделать, чтобы ACTION вызывался после пересчета цены от партии
//    IF writeOffDetail(detail) THEN {
//        price(detail) <-  price(writeOffDetail(detail));
//    }
//}
//    WHEN LOCAL FORMS userWriteOff
//        CHANGED(writeOffDetail[UserWriteOffDetail](WriteOffDetail detail)) OR
//        CHANGED(batch(detail)) OR
//        CHANGED(sku(detail)) OR
//        CHANGED(stock(detail)) OR
//        CHANGED(dateTime(detail))
//            DO EXEC recalculatedPrice(detail);
//
//
//EXTEND FORM userWriteOff PROPERTIES (d) descriptionWriteOffDetail AFTER shortNameUOMSku(d);
//EXTEND FORM WriteOff.userWriteOff PROPERTIES (d) READONLY returnQuantity BEFORE price(d);
//
//EXTEND FORM writeOffs PROPERTIES (d) READONLY descriptionWriteOffDetail AFTER shortNameUOMSku(d);
//EXTEND FORM WriteOff.writeOffs PROPERTIES (d) READONLY returnQuantity BEFORE price(d);
//
//WHEN LOCAL FORMS userWriteOff  CHANGED(writeOffDetail(UserWriteOffDetail detail)) AND countBatchCost(writeOffDetail(detail)) == 1 DO {
//    batch(detail) <- maxBatchCost(writeOffDetail(detail));
//}
//
//   
//CONSTRAINT batch(UserWriteOffDetail detail) AND writeOffDetail(detail) AND
//           NOT cost[SkuLedger,Batch](writeOffDetail(detail), batch(detail))
//           CHECKED BY batch[UserWriteOffDetail], writeOffDetail[UserWriteOffDetail]
//           MESSAGE 'Выбрана партия, которая не была списана в соответствующей строке списания';    
 
CONSTRAINT operation(UserWriteOff writeOff) AND contact(writeOff)
           AND NOT inContact(contact(writeOff), operation(writeOff))
    CHECKED BY contact[UserWriteOff]
    MESSAGE 'Контрагент должен совпадать с отмеченными в операции';

@deriveDocumentOperationLegalEntity(userWriteOff, contact, userWriteOff);
  
NAVIGATOR {
    stockNavigator {
        writeOffNavigator {
            NEW writeOffs;
        }
    }
}

// ------------------------------- Проведение по товарному отчету ------------------------ //
@implementStockDocumentLedgerInc(WriteOff, stock);
type(WriteOff l) += 'Списание-возврат' IF l IS WriteOff;
sumItem (WriteOff ledger) += sumItemWriteOffDetail(ledger);
sumContainer (WriteOff ledger) += sumContainerWriteOffDetail(ledger);

legalEntity(WriteOff ledger) += contact(ledger);  
operation[StockDocumentLedger](WriteOff ledger) += operation(ledger);
close[StockDocumentLedger](WriteOff l) + {  close(l); }

// ------------------------------- Проведение по регистру остатков ------------------------ //
@implementSkuLedgerInLIFO(WriteOffDetail, sku, stock);
quantity[InLIFOSkuLedger] (WriteOffDetail ledger) += quantity(ledger);
batch[SkuLedger](WriteOffDetail ledger) += batch(ledger);
@implementSkuLedgerInLIFOBatchBalance(writeOffDetail, stock);
sum[InSkuLedger](WriteOffDetail ledger) += sum(ledger);

stockDocumentLedger(WriteOffDetail ledger) += writeOff(ledger); 

edit(UserWriteOffDetail d) + {  DIALOG userWriteOff OBJECTS w = userWriteOff(d), d = d DOCKED; }

show 'Просмотреть'  ABSTRACT LIST ( WriteOffDetail) TOOLBAR;
show(UserWriteOffDetail d)  { 
	NEWSESSION {
	    SHOW userWriteOff OBJECTS w = userWriteOff(d), d = d DOCKED READONLY;
	}
}
show(UserWriteOffDetail d) + {  show(d); }
show[SkuLedger](WriteOffDetail d) + {  show(d); }

replace(Sku s, Batch b) + {  sku(UserWriteOffDetail detail) <- s WHERE batch(detail) == b;}
