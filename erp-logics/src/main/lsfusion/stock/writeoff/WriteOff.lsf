MODULE WriteOff;

REQUIRE System,
        Stock,
        PriceListLedger,
        WriteOffOperation,
        Currency,
        Numerator,
        Barcode,
        Document,
        EmployeeStock,
        StockDocumentSkuLedger,
        StockMovement,
        Utils,
        StockSkuDocument,
        OrderLedger,
        Item,
        SkuList;

PRIORITY Stock;

// ---- Добавляем отдельную вкладку на форму Настройки
DESIGN options {
    pane {
        NEW writeOff {
            caption = 'Списания';
        }
    }
}

//--------------------------------Комиссия для списания----------------------------------//
CLASS WriteOffCommittee 'Комиссия для списания товаров' : Committee;

name 'Наименование' = DATA ISTRING[150](WriteOffCommittee);

name(WriteOffCommittee committee) += name(committee) IF committee IS WriteOffCommittee;

@defineCommitteeEmployeePrefix(writeOffCommittee, chairman, 'Председатель');

writeOffCommittee 'Комиссия для списания товаров (ИД)' = DATA WriteOffCommittee (Stock);
nameWriteOffCommittee 'Комиссия для списания товаров' (Stock stock) = name(writeOffCommittee(stock)) IN committee CHARWIDTH 20;
is 'По умолчанию' (WriteOffCommittee writeOffCommittee, Stock stock) = writeOffCommittee(stock) == writeOffCommittee;
CONSTRAINT writeOffCommittee(Stock stock) AND NOT in(writeOffCommittee(stock), stock)
    CHECKED BY writeOffCommittee[Stock] MESSAGE 'Для отдела выбрана комиссия, которая для него не действует';

FORM writeOffCommittee 'Комиссия для списания товаров'
    OBJECTS c=WriteOffCommittee PANEL
    PROPERTIES(c)      name, nameChairman, namePositionChairman 

    TREE stockTree sg = StockGroup PARENT parent(sg)
    PROPERTIES READONLY sgTreeName = name(sg)

    OBJECTS ts=Stock
    PROPERTIES    READONLY tsTreeName = name(ts)
    PROPERTIES(c, ts) in , is

    FILTERS isParent(sg, ts)
    ORDERS tsTreeName


    OBJECTS e=Employee
    PROPERTIES(e)      READONLY name[Contact], firstName, lastName, namePosition
    PROPERTIES(e)      NEWEDIT, EDIT, DELETE GRID

    PROPERTIES(c, e)   number,
                       in
    FILTERS            (countStock (e, c) AND NOT allowStockEmployee()) OR (e IS Employee AND allowStockEmployee())
    FILTERGROUP filters6
        FILTER 'Показывать только членов комиссии' in(c, e) 'F10'

    FILTERGROUP filters5
        FILTER 'Показывать отделы только для данной комиссии' in(c, ts) 'F9'
    FILTERGROUP active FILTER 'Активные' active(e) 'F5'  DEFAULT 
    EDIT WriteOffCommittee OBJECT c
;
@extendFormFilterStockAccess(ts, writeOffCommittee);
@extendFormFilterStockGroupAccess(sg, writeOffCommittee);

DESIGN writeOffCommittee {
    BOX {
        size = (1024, 768);
        PROPERTY(namePositionChairman(c)) {caption = 'Должность';}
        
        OBJECTS {
            NEW caseOne BEFORE BOX(e) {
                fill = 1;
                type = SPLITH;
    
                MOVE BOX(TREE stockTree);
    
                MOVE BOX(ts) {
                    fill = 3;
                }
            }
        }
    }
}

FORM writeOffCommittees 'Комиссии для списания товаров'
    OBJECTS w=WriteOffCommittee
    PROPERTIES(w)      READONLY name, nameChairman, namePositionChairman, 
                                nameStocks, nameEmployee
    PROPERTIES(w)      NEWSESSION NEW, EDIT, DELETE GRID

    LIST WriteOffCommittee OBJECT w
;

DESIGN writeOffCommittees {
    PROPERTY(namePositionChairman(w)) {caption = 'Должность';}
}
// ----------------------------------- Макрос для задания комиссии для документов ------------------------------------------ //

META defineDocumentHeaderWriteOffCommittee(object, stockProp)

    writeOffCommittee (object) = DATA WriteOffCommittee(###object);
    nameWriteOffCommittee 'Комиссия для списания товаров' (###object object) = name(writeOffCommittee(object)) IN documentPrm CHARWIDTH 20;
    writeOffCommittee (###object object) <- writeOffCommittee(stockProp(object))
        WHEN CHANGED(stockProp(object));

    CONSTRAINT writeOffCommittee (###object object) AND NOT in(writeOffCommittee (object), stockProp(object))
        CHECKED BY writeOffCommittee[###object] MESSAGE 'Для документа выбрана комиссия, которая не действует для склада документа';

    inWriteOffCommittee (###object object, Employee employee) = in(writeOffCommittee (object), employee);
    nameEmployeeWriteOffCommittee 'Члены комиссии' (###object object) = namePositionEmployee(writeOffCommittee (object));
    positionShortNameChairmanWriteOffCommittee 'Председатель' (###object object) = positionShortName(chairman(writeOffCommittee (object)));    
    namePositionChairmanWriteOffCommittee 'Должность председателя' (###object object) = namePosition(chairman(writeOffCommittee (object))); 
    shortNameChairmanWriteOffCommittee 'ФИО председателя' (###object object) = shortName(chairman(writeOffCommittee (object)));
END
META defineDocumentHeaderAbstractWriteOffCommittee(object)
    writeOffCommittee (object) = ABSTRACT WriteOffCommittee(###object);
    nameWriteOffCommittee 'Комиссия для списания товаров' (###object object) = name(writeOffCommittee(object)) IN documentPrm CHARWIDTH 20;

    inWriteOffCommittee (###object object, Employee employee) = in(writeOffCommittee (object), employee);
    nameEmployeeWriteOffCommittee 'Члены комиссии' (###object object) = namePositionEmployee(writeOffCommittee (object));
    positionShortNameChairmanWriteOffCommittee 'Председатель' (###object object) = positionShortName(chairman(writeOffCommittee (object)));    
    namePositionChairmanWriteOffCommittee 'Должность председателя' (###object object) = namePosition(chairman(writeOffCommittee (object))); 
    shortNameChairmanWriteOffCommittee 'ФИО председателя' (###object object) = shortName(chairman(writeOffCommittee (object)));
    
END

META defineDocumentInterfaceHeaderWriteOffCommittee (object, stockProp)
    @defineDocumentHeaderAbstractWriteOffCommittee (object);
    @defineDocumentHeaderWriteOffCommittee (user###object, stockProp);
    writeOffCommittee (User###object object) += writeOffCommittee(object);
END

//----------------------------------------------- Списание товара ---------------------------------------------------//
CLASS Reason 'Причина списания';
TABLE reason (Reason);

name 'Наименование' = DATA ISTRING[50](Reason);
reason = GROUP AGGR Reason r BY name(r);

inactive 'Неактивная' = DATA BOOLEAN (Reason);
active 'Активный' (Reason r) = r IS Reason AND NOT inactive(r);

FORM reason 'Причина списания'
    OBJECTS r=Reason  PANEL
    PROPERTIES(r) name, inactive
    EDIT Reason OBJECT r
;

FORM reasons 'Причины списания'
    OBJECTS r=Reason
    PROPERTIES(r) READONLY name
    PROPERTIES(r) NEWSESSION NEW, EDIT, DELETE     
    FILTERGROUP inactive FILTER 'Активные' active(r) 'F5' DEFAULT
        
    LIST Reason OBJECT r       
;
DESIGN reasons { BOX { size = (600, 400); } }

CLASS WriteOff 'Списание' : Document;
CLASS WriteOffDetail 'Строка списания' : DocumentDetail;

CLASS UserWriteOff 'Списание (польз.)' : WriteOff;
CLASS UserWriteOffDetail 'Строка списания (польз.)' : WriteOffDetail;

@defineDocumentInterface(writeOff);

TABLE sessionInvoice(Session, WriteOff);
TABLE sessionInvoiceDetail(Session, WriteOffDetail);

@deriveDocumentHeaderTimePrefix(UserWriteOff, );
                
@defineDocumentInterfaceDataStock(writeOff, stock, 'Склад');

@defineExternalizable(userWriteOff, STRING[100]);

id = DATA STRING[100] (WriteOffDetail);
writeOffDetail (id, writeOff) = GROUP AGGR WriteOffDetail writeOffDetail WHERE writeOffDetail IS WriteOffDetail BY id(writeOffDetail), writeOff(writeOffDetail);

@defineDocumentDialogStocks(userWriteOff, stock, company, , );
@defineDocumentStockAccess(UserWriteOff, stock, company);

CONSTRAINT stock(UserWriteOff w) AND NOT  isCompany(stock(w))
    CHECKED BY stock[UserWriteOff]
    MESSAGE 'Выбран склад, который не принадлежит компании';

@defineDocumentInterfaceNumber(writeOff, BPSTRING[2]);
@defineNumeratedDefault(UserWriteOff, 'Списания', 'СП');


@defineDocumentInterfacePosted(writeOff);
@defineDocumentInterfaceClosed(writeOff);
@defineDocumentClosedConstraint(UserWriteOff);
@defineDocumentInterfaceDescription (writeOff, 'Списание товара');

@defineDocumentInterfaceCurrency(writeOff);
@deriveDocumentCurrency(userWriteOff, stock);

addressLegalEntity 'Адрес' (WriteOff writeOff) = address(legalEntityStock(writeOff), date(writeOff));
addressLegalEntity 'Адрес' (UserWriteOff userWriteOff) = address(legalEntityStock(userWriteOff), date(userWriteOff));

@defineDocumentInterfaceDetailSku(writeOff, sku);

// Для инвентаризации по партиям
@showDocumentInterfaceDetailBatch(writeOff);
@defineDocumentInterfaceDetailBatch(writeOff, batch);

useOverChangeBatch = ABSTRACT BOOLEAN (UserWriteOffDetail);
overChangeBatch ABSTRACT LIST (UserWriteOffDetail);

changeBatch(UserWriteOffDetail detail)  {
    IF  useOverChangeBatch(detail) THEN overChangeBatch(detail);
    ELSE
        DIALOG dialogBatchStockOut OBJECTS st = stock(detail),
                             t = dateTime(detail),
                             sk = sku(detail),
                             bt = batch(detail) INPUT NULL LIST name(bt) NEWSESSION DO
            batch(detail) <- bt;
}
replace(Sku s, Batch b) + {  sku(UserWriteOffDetail detail) <- s WHERE batch(detail) == b;}

@defineDocumentInterfaceDetailQuantity(writeOff);
@defineDocumentInterfaceDetailPrice(writeOff);
@defineDocumentInterfaceDetailDataSum(writeOff);
@deriveDocumentDetailSum(userWriteOff, quantity);

@defineDocumentInterfaceHeaderQuantity(writeOff);
@defineDocumentHeaderSkuQuantity(writeOff, sku);
@defineDocumentHeaderSkuQuantity(userWriteOff, sku);

@defineDocumentInterfaceHeaderSum(writeOff);

@defineDocumentInterfaceHeaderItemSum(writeOff, , );

@defineAddDetailDialogSkuStock(userWriteOff, sku, stock, dialogSku);
@defineAddDetailDialogBarcode(userWriteOff, sku);

@defineDocumentInterfaceHeaderWriteOffCommittee(writeOff, stock);

reason 'Причина списания (ИД)' = ABSTRACT Reason (WriteOff);
reason 'Причина списания (ИД)' = DATA Reason (UserWriteOff);
reason(UserWriteOff writeOff) += reason(writeOff);
nameReason 'Причина списания' (WriteOff writeOff) = name(reason (writeOff)) IN documentPrm;
nameReason 'Причина списания' (UserWriteOff userWriteOff) = name(reason (userWriteOff)) IN documentPrm;

dataReason= ABSTRACT Reason (WriteOffDetail);
dataReason= DATA Reason (UserWriteOffDetail);
dataReason(UserWriteOffDetail d) += dataReason(d);

reason = OVERRIDE dataReason(WriteOffDetail d), reason(writeOff(d));
reason = OVERRIDE dataReason(UserWriteOffDetail d), reason(userWriteOff(d));

nameReason 'Причина списания' (WriteOffDetail d) = name(reason(d));
nameReason 'Причина списания' (UserWriteOffDetail d) = name(reason(d));

@defineDocumentInterfaceLegalEntity (writeOff, contact, 'Контрагент');

@implementDocument(writeOff);

@implementDocumentForm(writeOff, wo, 'Списание');

@implementDocumentBatch(writeOff);

@implementDocumentBatchForm(wo);

supplierStock(WriteOff writeOff) += stock(writeOff);

isStockSku (WriteOffDetail writeOffDetail) = isStock(sku(writeOffDetail));
isStockSku (UserWriteOffDetail userWriteOffDetail) = isStock(sku(userWriteOffDetail));

// --------------------------- Формы списания ---------------------------------

FORM userWriteOff 'Списание'
    OBJECTS w=UserWriteOff PANEL
    PROPERTIES (w) isPosted, nameNumerator, number, series, date, time,
                   nameStock ON CHANGE changeStockCompany(w), nameCurrency, note,
                   countUserWriteOffDetail, quantityUserWriteOffDetail,
                   sumUserWriteOffDetail, nameReason, nameWriteOffCommittee, nameContact

    OBJECTS d=UserWriteOffDetail
    PROPERTIES (d) index, idBarcodeSku, idSku SHOWIF showIDs(), nameSku, shortNameUOMSku,
                   nameBatch ON CHANGE changeBatch(d), quantity,
                   price, sum, nameStock, NEW, deletewd=DELETE GRID

    PROPERTIES(w) DRAW d fillDocument, addDetailDialogSkuStockUserWriteOffDetail,
                           addDetailInputBarcodeUserWriteOffDetail, deleteUserWriteOffDetail
    FILTERS userWriteOff(d)==w

    EVENTS
        ON OK prePost(w)

    EDIT WriteOff OBJECT w
    EDIT UserWriteOff OBJECT w
;

DESIGN userWriteOff {
    BOX {
        size = (1024, 768);
        NEW mainTabbed {
            type = TABBED;
            fill = 1;
            NEW documentBox {
                type = CONTAINERV;
                fill = 1;
                caption = 'Списание';                      
                NEW header {
                    type = CONTAINERH;
        
                    NEW headerRow1 {
                        fill = 1;
        
                        MOVE GROUP(documentHeader,w) {
                            columns = 1;
                            type = CONTAINERV;
                            NEW first {
                                type = CONTAINERH;
                                MOVE PROPERTY(isPosted(w));
                                MOVE PROPERTY(nameStock(w));
                            }
                            NEW second { 
                                type = CONTAINERH;
                                MOVE PROPERTY(nameNumerator(w));
                                MOVE PROPERTY(number(w));
                                MOVE PROPERTY(series(w));
                                MOVE PROPERTY(date(w));
                                MOVE PROPERTY(time(w));
                            }    
                        }                
        
                        NEW headerTabbedPane {
                            alignment = STRETCH;
                            type = TABBED;
                            NEW headerMainParams {
                                caption = 'Основные параметры';
                                MOVE GROUP(documentPrm,w) {
                                    columns = 2;
                                }
                            }
                            NEW headerExtraParams {
                                caption = 'Дополнительные параметры';
                            }
                            NEW headerCreateDetail {
                                caption = 'Основание';
                            }
                            NEW headerCreateDocuments {
                                caption = 'Производные документы';
                            }
                        }
                    }
        
                    MOVE GROUP(documentSum,w) {
                        columns = 1;
                    }
                }
                
                NEW specificationBox {
                    fill = 1;
                    type = TABBED;
                    MOVE BOX(d) {
                        caption = 'Спецификация';
                    }
                }
            }
        }
        MOVE TOOLBARBOX;

        PROPERTY(formOk()) {
            caption = 'Провести';
        }
        PROPERTY(sumUserWriteOffDetail(w)) { charWidth = 13;}
    }
}

@addEventGenerateNumberOnForm(userWriteOff, w, UserWriteOff);

WHEN LOCAL FORMS userWriteOff CHANGED(batch(UserWriteOffDetail detail)) DO {
    sku (detail)  <- sku(batch(detail)) WHERE batch(detail);
}

@deriveDocumentDetailPriceAccountBatch(userWriteOff, sku, stock);

//-- SKU
@defineDocumentSkuStockPriceListTypeSystemLedger(userWriteOff, );
@extendFormDocumentSkuStock(userWriteOff, userWriteOff, w, legalEntityStock, );

@defineDocumentBatchStockPriceListTypeSystemLedger(userWriteOff, );
@extendFormDocumentBatchStock(userWriteOff, userWriteOff, w, legalEntityStock, );

@defineMovementSku(writeOffDetail, stock); //-- показываем по нажатию правой клавиши движение товара
@defineMovementSku(userWriteOffDetail, stock); //-- показываем по нажатию правой клавиши движение товара
@defineBalancesSku(writeOffDetail); //-- показываем по нажатию правой клавиши остатки товара
@defineBalancesSku(userWriteOffDetail); //-- показываем по нажатию правой клавиши остатки товара

@defineInfoSku(writeOffDetail); //-- показываем по нажатию правой клавиши информацию по товару
@defineInfoSku(userWriteOffDetail); //-- показываем по нажатию правой клавиши информацию по товару

@defineBarcodeSku(writeOffDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
@defineBarcodeSku(userWriteOffDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара   

// История по правой кнопке
@defineBalancesBatch(writeOffDetail); //-- показываем по нажатию правой клавиши остатки партии
@defineBalancesBatch(userWriteOffDetail); //-- показываем по нажатию правой клавиши остатки партии
@defineMovementBatch(writeOffDetail, stock); //-- показываем по нажатию правой клавиши движение по партии
@defineMovementBatch(userWriteOffDetail, stock); //-- показываем по нажатию правой клавиши движение по партии

shipmentDateTime(WriteOff writeOff) = dateTime(writeOff);

@extendFormDocumentSkuStockOrderLedger(writeOff, userWriteOff, w, stock);

@extendFormDocumentSkuStockOrderLedgerAll(userWriteOff, userWriteOff, w);

@extendFormDocumentBatchStockOrderLedger(userWriteOff, userWriteOff, w);

skipShowEdit = ABSTRACT BOOLEAN (WriteOff);
skipShowDelete = ABSTRACT BOOLEAN (WriteOff);

overShowEditDelete = ABSTRACT VALUE BOOLEAN (WriteOff);

@defineOperationChangesDocument(writeOff, WriteOff, preventChangesDocument, createdUser);

overShowEditDelete(WriteOff p) += showEditDeleteUser(p);

showEdit (WriteOff w) = isOpened(w) AND overShowEditDelete(w) AND NOT skipShowEdit(w); 
showDelete(UserWriteOff w) = isOpened[WriteOff](w) AND is(w) AND overShowEditDelete(w) AND NOT skipShowDelete(w);

filterWriteOffDateFrom 'Дата с' = DATA LOCAL NESTED DATE ();
filterDateFrom (WriteOff w) = date(w) >= filterWriteOffDateFrom() OR (w IS WriteOff AND NOT filterWriteOffDateFrom());      
    
filterWriteOffDateTo 'Дата по' = DATA LOCAL NESTED DATE ();
filterDateTo (WriteOff w) = date(w) <= filterWriteOffDateTo() OR (w IS WriteOff AND NOT filterWriteOffDateTo());

filterWriteOffStock = DATA LOCAL NESTED Stock();
nameFilterWriteOffStock 'Склад' = name(filterWriteOffStock());
filterWriteOffStock (WriteOff w) = stock(w) == filterWriteOffStock() OR NOT filterWriteOffStock();      

EXTEND FORM userWriteOff

    FILTERGROUP filter
        FILTER 'С остатком' prevCurrentBalance(ks, st) 'F10' DEFAULT
        FILTER 'В документе' quantity(ks, w, st) 'F9'
;

EXTEND FORM userWriteOff

    FILTERGROUP filter3
        FILTER 'С остатком' prevCurrentBalance(b, sto) 'F10' DEFAULT
        FILTER 'В документе' quantity(b, w, sto) 'F9'
        FILTER 'С движением за последний месяц' prevDateTime(b, sto) > subtractDay(dateTime(w), 30)
        FILTER 'С движением за последний год' prevDateTime(b, sto) > subtractDay(dateTime(w), 365)
        FILTER 'С движением' prevCountLedger(b, sto) 'F8'
;

backgroundDraft 'Цвет'  (WriteOff i)= RGB(212,255,212) IF isDraft(i); 
backgroundWriteOff 'Цвет' = ABSTRACT COLOR (WriteOff);
FORM writeOffs 'Списания'
    PROPERTIES () filterWriteOffDateFrom, filterWriteOffDateTo, nameFilterWriteOffStock
   
    OBJECTS w=WriteOff LAST BACKGROUND backgroundWriteOff(w)
    PROPERTIES (w) READONLYIF isReadonly()  isClosed
    PROPERTIES (w) READONLYIF isReadonly() BACKGROUND backgroundDraft(w) isPosted, number, series, 
                   date, time 
    PROPERTIES (w) READONLYIF isReadonly()  nameStock
    PROPERTIES (w) READONLY nameReason, quantityWriteOffDetail, countWriteOffDetail,
                            sumWriteOffDetail
    PROPERTIES (w) READONLYIF isReadonly() note

    PROPERTIES (w) READONLY PANEL createdNameUser, createdTime, createdHostnameComputer, 
                                        postedNameUser, postedTime, postedHostnameComputer
    PROPERTIES (w) NEWSESSION NEW[UserWriteOff], editW = EDIT SHOWIF showEdit(w), deletew = DELETE SHOWIF showDelete[UserWriteOff](w)
    PROPERTIES (w) close[UserWriteOff] SHOWIF isOpened[UserWriteOff](w), open[UserWriteOff] SHOWIF isClosed[UserWriteOff](w)
    
    OBJECTS d=WriteOffDetail
    PROPERTIES (d) READONLY index, idBarcodeSku, idSku SHOWIF showIDs(), nameSku, shortNameUOMSku, nameBatch,
                   quantity, price, sum, nameStock

    FILTERS writeOff(d) == w
    FILTERS filterDateFrom(w), 
            filterDateTo(w),
            filterWriteOffStock(w)
;
@extendFormFilterAccessStock(WriteOff, w, writeOffs, stock, company);

DESIGN writeOffs {
    NEW pane {
        fill = 1;
        type = SPLITV;

        NEW filtersBox {                       
            fill = 1;
            NEW topFilters {
                caption = 'Фильтры';
                type = CONTAINERH;          
                MOVE PROPERTY(filterWriteOffDateFrom());
                MOVE PROPERTY(filterWriteOffDateTo());
                MOVE PROPERTY(nameFilterWriteOffStock());
        } 
            MOVE BOX(w) {
                fill = 2;
            }
        }
        NEW documentDetail {
            fill = 1;
            type = TABBED;

            MOVE BOX(d) {
                caption = 'Спецификация';
            }
            NEW documentHistory {
                caption = 'История';

                MOVE GROUP(created,w);
                MOVE GROUP(posted,w);
            }
            NEW printTab {
                caption = 'Печатные формы';
                NEW printContainer {
                    caption = 'Печать';
                    type = CONTAINERH;
                }
            }
            NEW actionContainer {
                caption = 'Действия';
                type = CONTAINERH;
                NEW createdContainer {
                    caption = 'Создание на основе';
                }
            }
        }
    }

    MOVE TOOLBARBOX;
}
@extendFormEditable(writeOffs);
@defineFilterIsOpened (writeOff, writeOffs, w);
@defineDocumentLogForm(writeOffs, w);

FORM writeOffDetails 'Списание'
    OBJECTS d = WriteOffDetail
    PROPERTIES (d) READONLY index, idBarcodeSku, nameSku, description, 
                   shortNameUOMSku, 
                   quantity, price, sum, nameStock

    LIST WriteOffDetail OBJECT d
;

isStockWriteOffs 'Разрешить ввод списания без склада ' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES() isStockWriteOffs
;

DESIGN options {
    pane {        
        writeOff {
            MOVE PROPERTY(isStockWriteOffs());   
        }
    }
}

CONSTRAINT isPosted(UserWriteOff i) AND NOT isStockWriteOffs() AND NOT  stock(i) 
    MESSAGE 'Для списания должен быть задан склад'; 

//----------------------------------------------- Операции -----------------------------------------------------//
@defineDocumentInterfaceOperation (writeOff, WriteOff, );
@extendFormFilterRoleAccess(writeOff, w, writeOffs);
@defineDocumentOperationConstraint(writeOff, 'списания', WriteOff);
@defineDocumentOperationRolePrefix(userWriteOff, );

EXTEND FORM userWriteOff
    PROPERTIES(w) nameOperation
;
DESIGN userWriteOff{
    first{
        MOVE PROPERTY (nameOperation(w)) BEFORE PROPERTY(nameStock(w));
    }
}
EXTEND FORM writeOffs
    PROPERTIES(w) READONLYIF isReadonly() nameOperation BEFORE nameReason(w)
;

// Причина
reason = DATA Reason (WriteOff.Operation);
nameReason 'Причина списания' (Operation operation) = name(reason(operation));
EXTEND FORM operation
    PROPERTIES(o) nameReason
;
DESIGN operation {
    paramsContainer {
        MOVE PROPERTY(nameReason(o));
    }
}

reason (UserWriteOff w) <- reason(WriteOff.operation(w))
    WHEN CHANGED(operation(w));

TABLE legalEntityOperation(LegalEntity, Operation);
TABLE legalEntityGroupOperation(LegalEntityGroup, Operation);

@defineOperationLegalEntity(contact, , con, 'Контрагенты');

@defineCountLegalEntityOperation(contact, customer);

CONSTRAINT operation(UserWriteOff writeOff) AND contact(writeOff)
           AND NOT inContact(contact(writeOff), operation(writeOff))
    CHECKED BY contact[UserWriteOff]
    MESSAGE 'Контрагент должен совпадать с отмеченными в операции';
        
@deriveDocumentOperationLegalEntity(userWriteOff, contact, userWriteOff);

NAVIGATOR {
    stockNavigator {
        NEW FOLDER writeOffNavigator 'Списания' BEFORE balanceSku {
            NEW writeOffs;
            NEW writeOffCommittees;
            NEW reasons;
            NEW operations;
        }
    }
}


skipStockDocumentLedger 'Не проводить по товарному отчету'  = ABSTRACT BOOLEAN (WriteOff.WriteOff);
skipStockDocumentLedger 'Не проводить по товарному отчету'  = DATA BOOLEAN (WriteOff.UserWriteOff) IN documentPrm;
skipStockDocumentLedger(UserWriteOff w) += skipStockDocumentLedger(w);

EXTEND FORM writeOffs
    PROPERTIES(w) READONLYIF isReadonly() skipStockDocumentLedger
;

EXTEND FORM userWriteOff
    PROPERTIES (w) skipStockDocumentLedger
;

skipStockDocumentLedger 'Не проводить по товарному отчету' = DATA BOOLEAN (Operation);

EXTEND FORM operation
     PROPERTIES(o) skipStockDocumentLedger
 ;
DESIGN operation {
    paramsContainer {
        MOVE PROPERTY(skipStockDocumentLedger(o));
    }
}

skip 'Не проводить по товарному отчету'  = DATA BOOLEAN (Reason);
EXTEND FORM reason
    PROPERTIES (r) skip
;
EXTEND FORM reasons
    PROPERTIES (r) READONLY skip
;

WHEN LOCAL SETCHANGED (operation(UserWriteOff o)) OR CHANGED(reason(o)) DO
    skipStockDocumentLedger (o) <- OVERRIDE skip(reason(o)), skipStockDocumentLedger(operation(o));

// Товарный отчет
@implementStockDocumentLedgerOut(WriteOff, stock);
type(WriteOff l) += STRING[50]('Списание') IF l IS WriteOff;
sumItem (WriteOff ledger) += sumItemWriteOffDetail(ledger);
sumContainer (WriteOff ledger) += sumContainerWriteOffDetail(ledger);

legalEntity(WriteOff ledger) += contact(ledger);  

operation[StockDocumentLedger](WriteOff ledger) += operation(ledger);
close[StockDocumentLedger](WriteOff l) + {  close(l); }
skip(WriteOff l) += skipStockDocumentLedger(l);


// Проводим по регистру
@implementSkuLedgerOutFIFO(WriteOffDetail, sku, stock);
quantity[OutFIFOSkuLedger] (WriteOffDetail ledger) += quantity(ledger);
batch[SkuLedger](WriteOffDetail ledger) += batch(ledger);
@implementSkuLedgerOutFIFOBatchBalance(WriteOffDetail, stock);
sum[OutSkuLedger] (WriteOffDetail ledger) += sum(ledger);

stockDocumentLedger(WriteOffDetail ledger) += writeOff(ledger); 

edit(UserWriteOffDetail d) + {  DIALOG userWriteOff OBJECTS w = userWriteOff(d), d = d DOCKED; }

show 'Просмотреть'  ABSTRACT LIST ( WriteOffDetail) TOOLBAR;
show(UserWriteOffDetail d)  { 
	NEWSESSION {
	    SHOW userWriteOff OBJECTS w = userWriteOff(d), d = d DOCKED READONLY;
	}
}
show(UserWriteOffDetail d) + {  show(d); }
show[SkuLedger](WriteOffDetail d) + {  show(d); }

show 'Просмотреть' (UserWriteOff w)  { 
	NEWSESSION {
	    SHOW userWriteOff OBJECTS w = w DOCKED READONLY;
	}
}TOOLBAR;

showToShow (UserWriteOff w) = is(w) AND NOT showEdit(w);
EXTEND FORM writeOffs
    PROPERTIES show(w) SHOWIF showToShow(w) BEFORE editW
;

firstOrderBatchBalance (Sku sku, Stock stock, NUMERIC[16,5] q) = GROUP LAST Batch batch IF prevAvailableQuantity(batch, stock) >= q
                                                   ORDER DESC dateTime(batch), batch
                                                   BY skuLedger(batch, stock) COMPLEX;


fillBatch 'Проставить партию'(UserWriteOffDetail d)   {    
    batch(d) <- firstOrderBatchBalance(sku(d), stock(d), quantity(d));
} ASON CONTEXTMENU nameBatch[UserWriteOffDetail];

fillAllBatch 'Проставить партии для всех'(UserWriteOffDetail detail)  { 
   FOR userWriteOff(detail) == userWriteOff(UserWriteOffDetail d) AND NOT batch(d) DO
       fillBatch(d);
} ASON CONTEXTMENU nameBatch[UserWriteOffDetail];

@defineMergeDocumentDetails(writeOff, userWriteOff, w);

@defineAddSkuLists(userWriteOff, userWriteOff, w);

@defineNewSkuList(userWriteOff, userWriteOff, writeOffs, w);

DESIGN userWriteOff {
    headerTabbedPane {
        NEW add AFTER headerCreateDocuments {
            caption = 'Подбор';
            type = CONTAINERH;
            alignment = START;
            MOVE PROPERTY(addSkuLists(w));
            MOVE PROPERTY(newSkuList(w));
        }
    }
}
