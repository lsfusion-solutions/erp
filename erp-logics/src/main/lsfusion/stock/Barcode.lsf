MODULE Barcode;

REQUIRE System, Integration, Numerator, SkuLedger, Utils, Document;

CLASS Barcode 'Штрих-код';
TABLE barcode (Barcode);
TABLE sessionBarcode (Session, Barcode);

// After moving to 5.0 'CONTAINS' should be replaced with '=@' (SEARCH)
id 'Штрих-код' = DATA STRING[15] (Barcode) IN id CHARWIDTH 15 NOFLEX INDEXED DEFAULTCOMPARE 'CONTAINS';
WHEN SETCHANGED (id(Barcode b)) INLINE DO id(b) <- replace(id(b), ' ','');
@defineExternalizable(barcode, STRING[200], ext);
extValue = ABSTRACT INTEGER (Barcode);
value(Barcode b) = OVERRIDE extValue(b), LONG (b);

dataDate 'Дата действия' = DATA DATE (Barcode);
date 'Дата действия' = OVERRIDE dataDate(Barcode barcode), (2001_01_01 IF barcode IS Barcode) IN base MATERIALIZED;

caption 'Описание' = DATA ISTRING[30](Barcode);

barcode (id, DATE date) =
    GROUP LAST Barcode barcode
          ORDER date(barcode), barcode
          WHERE date(barcode) <= (date AS DATE)
          BY id(barcode) COMPLEX;

barcode (STRING[15] id) = barcode(id, currentDate());
active 'Активный' (Barcode barcode) = barcode(id(barcode)) == barcode MATERIALIZED;

WHEN CHANGED(id(Barcode b) IF active(b)) AND NOT CHANGED(extId(b)) DO
    extId(b) <- id(b) IF active(b);

dataAmount 'Множитель' = DATA NUMERIC[14,3] (Barcode);
amount 'Множитель' = OVERRIDE dataAmount (Barcode barcode), (1.0 IF barcode IS Barcode) MATERIALIZED CHARWIDTH 4;

allowIncorrectAmount 'Разрешить некорректные множители' = DATA BOOLEAN ();

CONSTRAINT SETCHANGED(Barcode barcode IS Barcode AND NOT amount(barcode) > 0) AND NOT allowIncorrectAmount() 
    MESSAGE 'Множитель должен быть больше 0';

completeBarcode = FORMULA TEXT PG 'completeBarcode($1)', MS 'dbo.completeBarcode($1)';

allowIncorrectBarcode 'Разрешить некорректные штрихкоды' = DATA BOOLEAN();

incorrectBarcode (STRING[15] id) = (length(id) == 8 AND completeBarcode(left(id,7)) != id) OR 
                                           (length(id) == 12 AND completeBarcode('0'+left(id,11)) != '0'+id) OR
                                           (length(id) == 13 AND completeBarcode(left(id,12)) != id) OR 
                                           (length(id) != 8 AND length(id) != 12 AND length(id) != 13);

CONSTRAINT length(id(Barcode barcode)) == 8 AND completeBarcode(left(id(barcode),7)) != id(barcode) 
    AND NOT allowIncorrectBarcode()  
    MESSAGE 'Некорректный EAN-8 штрихкод';

CONSTRAINT length(id(Barcode barcode)) == 12 AND completeBarcode('0'+left(id(barcode),11)) != '0'+id(barcode) 
    AND NOT allowIncorrectBarcode()  
    MESSAGE 'Некорректный UPC штрихкод';

CONSTRAINT length(id(Barcode barcode)) == 13 AND completeBarcode(left(id(barcode),12)) != id(barcode) 
    AND NOT allowIncorrectBarcode()  
    MESSAGE 'Некорректный EAN-13 штрихкод';
    
onlyEANBarcode 'Только EAN или UPC штрихкоды' = DATA BOOLEAN ();

skipCheckShortBarcode = ABSTRACT BOOLEAN (Barcode);

CONSTRAINT ((length(id(Barcode barcode)) > 5 AND length(id(barcode)) < 8)
    OR (length(id(barcode)) > 8 AND length(id(barcode)) < 12) 
    OR (length(id(barcode)) > 13)
    OR (id(barcode) AND NOT onlyDigits(id(barcode))))
    AND onlyEANBarcode()
    AND NOT skipCheckShortBarcode(barcode)
    MESSAGE 'Штрихкод не является EAN или UPC, так как соответствует требованиям длины (больше 5, не равен 8, 12 или 13)';
    
setIdBarcodeSku 'Штрихкод обязателен для товара' = DATA BOOLEAN ();

onlyActiveBarcode 'Запретить неактивные штрихкоды' = DATA BOOLEAN ();

CONSTRAINT id(Barcode b) AND onlyActiveBarcode() AND NOT active(b)
    MESSAGE 'В системе уже присутствует такой штрихкод';

EXTEND FORM options
    PROPERTIES() allowIncorrectBarcode, onlyEANBarcode, setIdBarcodeSku, onlyActiveBarcode, allowIncorrectAmount
;

DESIGN options {
    pane {
        NEW barcodeBox {
            caption = 'Штрихкод';
            MOVE PROPERTY(allowIncorrectBarcode());   
            MOVE PROPERTY(onlyEANBarcode());   
            MOVE PROPERTY(setIdBarcodeSku());   
            MOVE PROPERTY(onlyActiveBarcode());
            MOVE PROPERTY(allowIncorrectAmount());
        }
    }
}

// Sku
sku = DATA Sku(Barcode) IN base NONULL DELETE INDEXED;
nameSku 'Наименование' (Barcode barcode) = name(sku(barcode)) IN id;

idSku 'Код SKU' (Barcode b) = overId(sku(b)) IN id;

skuBarcode (STRING[15] id, DATE date) = sku(barcode(id, date));
skuBarcode (STRING[15] id) = skuBarcode(id, currentDate());
idSkuBarcode (STRING[15] id) = id(skuBarcode(id));

dataBarcode = DATA Barcode (Sku);
CONSTRAINT sku(dataBarcode(Sku item)) != item CHECKED BY dataBarcode[Sku] MESSAGE 'Выбран неверный sku для штрихкода';

//штрихкоды упаковок при копировании копируем а при объединении наоборот игнорируем
toCopy = ABSTRACT CASE BOOLEAN (Barcode);
replace(Sku s, Sku d) + { sku(Barcode barcode) <- d WHERE sku(barcode) == s AND NOT toCopy(barcode);}

overPrimaryBarcode (Sku s) = ABSTRACT Barcode (Sku);
barcode(Sku sku) = OVERRIDE dataBarcode(sku) IF active(dataBarcode(sku)), 
                        overPrimaryBarcode(sku),
                        [ GROUP MIN Barcode barcode IF id(barcode) AND amount(barcode) == 1.0 AND active(barcode) BY sku(barcode)](sku) 
                        MATERIALIZED INDEXED;

primary 'Основной' (Barcode barcode) = barcode(sku(barcode)) == barcode;
changePrimary(Barcode barcode, Sku sku)  { 
    INPUT b = BOOLEAN DO
        IF b THEN
            dataBarcode(sku) <- barcode;
}

allBarcodes 'Все штрих-коды' = GROUP CONCAT id(Barcode b) IF id(b), ',' ORDER id(b), b BY sku(b);

idBarcode 'Штрихкод' (Sku sku) = id(barcode(sku)) IN base MATERIALIZED INDEXED;
idBarcodeSku 'Штрихкод' (STRING[100] id) = idBarcode(skuOverId(id));
idBarcodeSku 'Штрихкод' (Batch batch) = idBarcode(sku(batch));
idBarcodeSku 'Штрихкод' (SkuLedger skuLedger) = idBarcode(sku(skuLedger));
dataDateBarcode 'Дата' (Sku sku) = dataDate(barcode(sku));
amountBarcode 'Множитель' (Sku sku) = amount(barcode(sku));
amountBarcodeSku 'Множитель' = amountBarcode(sku(Batch batch));
idMainBarcode 'Основной штрихкод товара' (Barcode barcode) = idBarcode(sku(barcode));

dataUOM = DATA UOM (Barcode);
UOM = OVERRIDE dataUOM(Barcode barcode), UOM(sku(barcode)) MATERIALIZED;
shortNameUOM 'Единица измерения' (Barcode barcode) = shortName(UOM(barcode));
idUOM 'Код единицы измерения' (Barcode barcode) = id(UOM(barcode));

changeBarcode(Sku sku)  { 
    INPUT s = STRING[15] DO
        IF s THEN { 
            IF barcode(sku) THEN {
                id(Barcode b) <- s WHERE barcode(sku)== b;     
            } ELSE {
                NEW b = Barcode {
                    sku(b) <- sku;
                    id(b) <- s;                
                }    
            }          
        } ELSE
            IF barcode(sku) THEN
                DELETE Barcode b WHERE barcode(sku)== b;
}

// Атрибуты вытянутые от sku

skuGroup (Barcode barcode) = skuGroup(sku(barcode));

split(Barcode barcode) = split(sku(barcode)); 
passScales(Barcode barcode) = passScales(sku(barcode));

country (Barcode barcode) = country(sku(barcode));
nameCountry 'Страна' (Barcode barcode) = name(country(barcode));

manufactureDate 'Дата изготовления' (Barcode barcode, Stock stock) = lastManufactureDate(sku(barcode), stock);
expiryDate 'Годен до' (Barcode barcode, Stock stock) = lastExpiryDate(sku(barcode), stock);

// Генерация штрихкодов

barcodeNumerator = ABSTRACT Numerator (Sku);
overGenerateBarcode  ABSTRACT LIST ( Sku);

generateBarcode 'Сгенерировать штрихкод'(Sku sku)  { 
    NEW b = Barcode {
        sku(b) <- sku;
        incrementValue(barcodeNumerator(sku));
        WHILE barcodeNumerator(sku) AND barcode(completeBarcode(incrementedValue())) DO 
            incrementValue(barcodeNumerator(sku));
        id(b) <- completeBarcode(incrementedValue());
        overGenerateBarcode(sku);
    };
} TOOLBAR CONFIRM;

FORM barcodeDialog 'Штрих-код'
    OBJECTS b = Barcode
    PROPERTIES (b) READONLY id, nameSku, caption, date, shortNameUOM, amount, active, primary
    LIST Barcode OBJECT b
;



// ---------------------------------- Предобработка штрихкода --------------------------- //
overPreprocessedBarcode = ABSTRACT CASE STRING[200] (STRING[200]);
processedBarcode (STRING[200] b) = OVERRIDE overPreprocessedBarcode(b), b AS STRING[200];

weightPrefix 'Префикс весового штрихкода' = DATA STRING[2]();
weightQuantity = DATA LOCAL NUMERIC[14,3]();
overPreprocessedBarcode(STRING[15] barcode) += WHEN length(barcode AS STRING[15]) > 11 AND left(barcode, 2) == weightPrefix() THEN STRING[15](substr(barcode, 3, 5));

EXTEND FORM options
    PROPERTIES () weightPrefix
;
DESIGN options {
    barcodeBox {
        MOVE PROPERTY(weightPrefix());
    }    
}

// ----------------------------------- Форма по вводу штрихкода ---------------------------- //

barcodeInput 'Штрихкод' = DATA LOCAL STRING[15] () EVENTID 'SCANNER';
changeBarcodeInput()  { 
    INPUT s = STRING[15] DO {
        barcodeInput() <- processedBarcode(s);
        formOk();
    }
}
FORM barcodeInput 'Ввод штрихкода'
    PROPERTIES() barcodeInput ON CHANGE changeBarcodeInput()
;

DESIGN barcodeInput {
    PROPERTY (barcodeInput()) {
        caption = 'Штрихкод';
        font = 'bold 64';
        panelCaptionVertical = TRUE;
        changeKey = 'F4';
        focusable = TRUE;
    }
}

// ------------------------------------ Добавление сканированием строк в документ ----------------------//

sessionSku = DATA LOCAL Sku();

createSkuBarcode  ABSTRACT LIST ( STRING[15], DATE);

skuAdded = DATA Sku(User);
setAddedUser(Sku sku)  { 
	NEWSESSION {
	    skuAdded(User u) <- sku WHERE u == currentUser();
	    apply();
	}
}

META defineAddDetailDialogBarcodeCustom(object, idetail, skuProp)
    @defineAddDetailDialogBarcodeCustomInner(object, idetail, ###idetail, skuProp);
END

notFormSku 'Не открывать форму SKU  при поиске штрихкода' = DATA BOOLEAN ();
notCreateItem 'Не создавать товар на основе при поиске штрихкода' = DATA BOOLEAN ();
isShowErrorBarcode() = notFormSku() AND notCreateItem();
errorMessageNotFormSku 'Сообщение об ошибке при поиске штрихкода' = DATA STRING[100]();
requestQuantitySku 'Запрашивать количество товара при сканировании' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES () notFormSku, notCreateItem, errorMessageNotFormSku SHOWIF isShowErrorBarcode(), requestQuantitySku
;
DESIGN options {
    barcodeBox {
        MOVE PROPERTY(notFormSku());
        MOVE PROPERTY(notCreateItem());
        MOVE PROPERTY(errorMessageNotFormSku());
        MOVE PROPERTY(requestQuantitySku());
    }    
}

META defineAddDetailDialogBarcodeCustomInner(object, idetail, idetailClass, skuProp)
    idetail(object, sku) = GROUP MAX ###idetail detail BY object(detail), skuProp(detail);

    afterInputBarcode###idetail ABSTRACT LIST (idetailClass, STRING[200]);

    create###idetail##New (###object object, STRING[200] barcode, Sku skuProp)  { 
        LOCAL dialogBarcodeDetail = idetailClass();
        dialogBarcodeDetail() <- idetail(object, skuProp);
        IF dialogBarcodeDetail() IS idetailClass THEN {
            LOCAL requestedQuantity = NUMERIC[16,5]();
            IF requestQuantitySku() THEN {
                DIALOG dialogNumeric OBJECTS n = (OVERRIDE weightQuantity(), amount(barcode(barcode, date(object)))) INPUT DO {
                    requestedQuantity() <-n;
                }
            } 
            quantity(###idetail detail) <-
                quantity(detail) (+) (OVERRIDE requestedQuantity(), weightQuantity(), amount(barcode(barcode, date(object))) IF detail IS idetailClass)
                WHERE detail == dialogBarcodeDetail();
            seek(dialogBarcodeDetail());
            afterInputBarcode###idetail(dialogBarcodeDetail(), barcode);
        } ELSE {
            NEW w = idetailClass {
                object(w) <- object;
                skuProp(w) <- skuProp;
                quantity(w) <- OVERRIDE weightQuantity(), amount(barcode(barcode, date(object)));
                seek(w);
                afterInputBarcode###idetail(w, barcode);
            }
        }
        setAddedUser(skuProp);
    }

    addDetailBarcode###idetail(###object object, STRING[200] barcode)  { 
        LOCAL dialogBarcode###skuProp = Sku ();
        dialogBarcode###skuProp() <- skuProp##Barcode(barcode, date(object));

        IF dialogBarcode###skuProp() IS Sku THEN {
            create###idetail##New(object, barcode, dialogBarcode###skuProp());
        } ELSE {
            IF NOT notForm###skuProp() THEN {
                DIALOG emptyBarcodeSkus OBJECTS s INPUT DO {
                    dialogBarcode###skuProp() <- s;
                    NEW br = Barcode {
                        id(br) <- barcode;
                        dataDate(br) <- currentDate();
                        skuProp(br) <- s;
                        NEW w = idetailClass {
                            object(w) <- object;
                            skuProp(w) <- s;
                            quantity(w) <- OVERRIDE weightQuantity(), amount(br);
                            seek(w);
                        }
                    }
                } 
            }
            IF NOT notCreateItem() THEN {
                create###skuProp##Barcode(barcode, date(object));
                dialogBarcode###skuProp() <- skuProp##Barcode(barcode, date(object));
            }
            IF dialogBarcode###skuProp() THEN {
                create###idetail##New(object, barcode, dialogBarcode###skuProp());
            }
            IF notForm###skuProp() AND notCreateItem() AND NOT dialogBarcodeSku() AND errorMessageNotFormSku() THEN MESSAGE errorMessageNotFormSku();
        }
    }

    addDetailDialogBarcode###idetail 'Ввод штрихкода'(###object object)  { 
        DIALOG barcodeInput DO
            addDetailBarcode###idetail(object, barcodeInput());
    } TOOLBAR CHANGEKEY 'F4';

    consumedBarcode###idetail = DATA LOCAL BOOLEAN ();
    beforeInputBarcode###idetail ABSTRACT LIST (###object, STRING[200]);
    changeAddDetailInputBarcode###idetail(###object object)  { 
        INPUT s = STRING[200] DO {
            weightQuantity() <- NULL;
            IF length(s) > 11 AND left(s, 2) == weightPrefix() THEN {
                weightQuantity() <- NUMERIC[7,0](substr(s, 8, 5)) / 1000.0;
            }
            beforeInputBarcode###idetail(object, s);
            IF NOT consumedBarcode###idetail() THEN
                addDetailBarcode###idetail(object, processedBarcode(s));
        }
    };
    addDetailInputBarcode###idetail 'Ввод штрихкода :' (object) = DATA LOCAL STRING[200] (###object) TOOLBAR CHARWIDTH 13 CHANGEKEY 'F4' EVENTID 'SCANNER'
                                                                            ON CHANGE { changeAddDetailInputBarcode###idetail(object); }
END

META defineAddDetailDialogBarcode(object, skuProp)
    @defineAddDetailDialogBarcodeCustom(object, object##Detail, skuProp);
END

// ----------------------------------- Расширение подбора товаров ---------------------------- //

seekBarcode 'Штрихкод' = DATA LOCAL STRING[15] () EVENTID 'SCANNER';
seekSkuBarcode()  { 
    INPUT s = STRING[15] DO {
        IF NOT skuBarcode(processedBarcode(s)) THEN {
            MESSAGE 'Штрихкод не найден';
        } ELSE {
            seek(skuBarcode(processedBarcode(s)));
        }
    }
}

EXTEND FORM skus
    PROPERTIES(s) READONLY idBarcode AFTER name(s)
;

EXTEND FORM dialogSkusMobile
    PROPERTIES(s) READONLY idBarcode
;

FORM emptyBarcodeSkus 'Sku'
    TREE skuTree sg = SkuGroup PARENT parent(sg)
    PROPERTIES READONLY order(sg), skuGroupName = name(sg)
    FILTERGROUP inactive FILTER 'Активные' active(sg) 'F5' DEFAULT
    ORDERS order(sg), skuGroupName
    
    OBJECTS s = Sku
    PROPERTIES(s) READONLY name, idBarcode, shortNameUOM
    PROPERTIES() addSku DRAW s
    PROPERTIES(s) EDIT NEWSESSION, copy
    FILTERS isParent(sg, s)
    FILTERS NOT idBarcode(s)
    ORDERS name(s)
;

DESIGN emptyBarcodeSkus {
    BOX {
        size = (1024, 768);

        NEW topContainer {
            fill = 1;
            type = SPLITH;

            MOVE BOX(TREE skuTree);

            MOVE BOX(s) {
                fill = 4;
                GRID(s) {
                    defaultComponent = TRUE;
                }
            }
        }

        MOVE TOOLBARBOX;
    }
}

EXTEND FORM currentBalanceSkuStock
    PROPERTIES(s) BACKGROUND backgroundBalance(s,st) READONLY idBarcode AFTER name(s)
    PROPERTIES seekBarcode() DRAW sts TOOLBAR ON CHANGE seekSkuBarcode()
;
DESIGN currentBalanceSkuStock{
    filter{
        MOVE PROPERTY(seekBarcode()) {
            changeKey = 'F4';
        }
    }
}
EXTEND FORM balanceSkuStock
    PROPERTIES(s) BACKGROUND backgroundBalance(s,st,t) READONLY idBarcode AFTER name(s)
    PROPERTIES seekBarcode() DRAW sts TOOLBAR ON CHANGE seekSkuBarcode()
;
DESIGN balanceSkuStock{
    filter {
        MOVE PROPERTY(seekBarcode()) {
            changeKey = 'F4';
        }
    }    
}    

EXTEND FORM currentBalanceBatchStock
    PROPERTIES(bt) READONLY BACKGROUND backgroundBatch(st, bt) idBarcodeSku AFTER nameSku(bt)
    PROPERTIES seekBarcode() TOOLBAR
    FILTERS (bt IS Batch AND NOT seekBarcode()) OR (skuBarcode(seekBarcode(), currentDate()) == sku(bt))
;
DESIGN currentBalanceBatchStock{
    filter{
        MOVE PROPERTY(seekBarcode()) {
            changeKey = 'F4';
        }
    }    
}

EXTEND FORM balanceBatchStock
    PROPERTIES(bt) READONLY idBarcodeSku AFTER nameSku(bt)
    PROPERTIES seekBarcode() TOOLBAR
    FILTERS (bt IS Batch AND NOT seekBarcode()) OR (skuBarcode(seekBarcode(), currentDate()) == sku(bt))
;
DESIGN balanceBatchStock{
    filter{
        MOVE PROPERTY(seekBarcode()) {
            changeKey = 'F4';
        }
    }
}

EXTEND FORM costSkuLedger
    PROPERTIES(bil) READONLY idBarcodeSku AFTER nameSku(bil)
;
EXTEND FORM skuLedger
    PROPERTIES(s) READONLY idBarcodeSku AFTER nameSku(s)
;
EXTEND FORM dialogBatchStockOut
    PROPERTIES(bt) READONLY idBarcodeSku AFTER nameSku(bt)
;
EXTEND FORM dialogBatchStockIn
    PROPERTIES(bt) READONLY idBarcodeSku AFTER nameSku(bt)
;
EXTEND FORM batches
    PROPERTIES(bt) READONLY idBarcodeSku AFTER nameSku(bt)
;

// ------------------------------------------ Объявление штрихкода в документе ------------------------------------ //

META defineDocumentDetailBarcodeCustomPrefix (detail, skuProp, prefixB, prefixS)
    barcodePack = DATA Barcode (###detail) INDEXED;
    idBarcodePack 'Штрихкод упаковки' (###detail detail) = id(barcodePack(detail));
    shortNameUOMPack 'Ед. изм. упаковки' = shortNameUOM(barcodePack(###detail detail));
    amountPack 'Кол-во в упаковке' = DATA NUMERIC[14,3] (###detail) CHARWIDTH 6;

    CONSTRAINT skuProp(barcodePack(###detail detail)) != skuProp(detail) CHECKED BY barcodePack[###detail]
        MESSAGE 'Выбран штрихкод не соответствующий sku';
END

META defineDocumentAbstractDetailBarcodeCustomPrefix (detail, prefixB)
    barcodePack = ABSTRACT Barcode (###detail);
    idBarcodePack 'Штрихкод упаковки' (###detail detail) = id(barcodePack(detail));
    shortNameUOMPack 'Ед. изм. упаковки' = shortNameUOM(barcodePack(###detail detail));
    amountPack 'Кол-во в упаковке' = ABSTRACT NUMERIC[14,3] (###detail) CHARWIDTH 6;
END

META defineDocumentInterfaceBarcodeCustomPrefix (detail, skuProp, prefixB, prefixS)
    @defineDocumentAbstractDetailBarcodeCustomPrefix(detail, prefixB);
    @defineDocumentDetailBarcodeCustomPrefix(user###detail, skuProp, prefixB, prefixS);
    barcodePack(User###detail detail) += barcodePack(detail);
    amountPack(User###detail detail) += amountPack(detail);
END

META defineDocumentInterfaceBarcodePrefix (object, skuProp, prefixB, prefixS)
    @defineDocumentInterfaceBarcodeCustomPrefix(object###Detail, skuProp, prefixB, prefixS);
END
META defineDocumentInterfaceBarcodePrefix (object, skuProp, prefixB)
    @defineDocumentInterfaceBarcodePrefix(object, skuProp, prefixB, );
END

// ------------------------------------------ Автоматическое проставление штрихкода ------------------------------------ //

//META deriveDocumentDetailBarcodeCustom (detail, skuProp, toShowProp)
//    barcodePack(###detail detail) <- packBarcode(skuProp(detail)) IF toShowProp(detail)
//        WHEN CHANGED(skuProp(detail)) OR CHANGED(toShowProp(detail));
//    amountPack(###detail detail) <- amount(packBarcode(skuProp(detail))) IF toShowProp(detail)
//        WHEN CHANGED(skuProp(detail)) OR CHANGED(toShowProp(detail));
//END

META deriveDocumentDetailBarcodeCustom (detail, skuProp, toShowProp)
    packBarcode = ABSTRACT VALUE Barcode(###detail);   
    packBarcodeChange = ABSTRACT VALUE BOOLEAN(###detail);
    packBarcode (###detail detail) += packBarcode(skuProp(detail));    
    
    barcodePack(###detail detail) <- packBarcode(detail) IF toShowProp(detail)
        WHEN CHANGED(skuProp(detail)) OR CHANGED(toShowProp(detail)) OR packBarcodeChange(detail);
    amountPack(###detail detail) <- amount(packBarcode(detail)) IF toShowProp(detail)
        WHEN CHANGED(skuProp(detail)) OR CHANGED(toShowProp(detail)) OR packBarcodeChange(detail);
END



FORM barcodeSku 'Штрихкоды'
    OBJECTS s = Sku PANEL
    PROPERTIES(s) READONLY name

    OBJECTS b = Barcode
    PROPERTIES(b) READONLY id, date, shortNameUOM,  amount, active, primary
                
    ORDERS date(b)
    FILTERS sku(b) == s
;
DESIGN barcodeSku {
    BOX {
        size = (768, 400);
    }
}

showBarcode'Показать штрихкоды' (Sku sku)  { SHOW barcodeSku OBJECTS s = sku; }  ASON CONTEXTMENU idBarcode[Sku];

META defineBarcodeSku(detail, skuProp, idBarcodeSkuProp)
    showBarcode###skuProp 'Показать штрихкоды' (###detail detail)  { 
        FOR s == skuProp(detail) DO
            SHOW barcodeSku OBJECTS s = s; }  
    ASON CONTEXTMENU idBarcodeSkuProp[###detail];
END
META defineBarcodeSku(detail)
    @defineBarcodeSku(detail,sku,idBarcodeSku);
END