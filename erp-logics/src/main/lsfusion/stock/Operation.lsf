MODULE Operation;

REQUIRE Utils, Historizable, Security, DefaultData;

CLASS ABSTRACT Operation 'Операция';
TABLE operation(Operation);

name 'Наименование' = ABSTRACT ISTRING[100](Operation) MATERIALIZED CHARWIDTH 30 ;
nameReturn 'Наименование' = ABSTRACT ISTRING[100](Operation) MATERIALIZED CHARWIDTH 30;
overName 'Наименование' = OVERRIDE nameReturn(Operation o), name(o) CHARWIDTH 40;

id 'ID' = ABSTRACT ISTRING[100](Operation) MATERIALIZED;

preventChangesDocument 'Запретить редактирование' = ABSTRACT BOOLEAN (UserRole, Operation);
preventChangesDocument (User user, Operation operation) = preventChangesDocument(mainRole(user), operation);

countDaysDocument 'Количество дней для запрета' = ABSTRACT INTEGER (UserRole, Operation);
countDaysDocument (User user, Operation operation) = countDaysDocument(mainRole(user), operation);

FORM operationDialogOperations 'Операции'
    OBJECTS o = Operation.Operation
    PROPERTIES(o) READONLY name, id, objectClassName
    PROPERTIES(o) NEWSESSION NEW, EDIT, DELETE 

    LIST Operation.Operation OBJECT o
;

TABLE userOperation (User, Operation);
in (user, operation) = ABSTRACT BOOLEAN (User, Operation) MATERIALIZED;
countUsers (Operation operation) = GROUP SUM 1 IF in (User user, operation);

// -------------------------------------- Макросы по созданию операций ---------------------------------- //

META defineOperation(postfix)
    @defineOperation(postfix, );
END
META defineOperation(postfix, navigator)

    CLASS Operation 'Операция'##postfix : Operation.Operation;
    TABLE operation(Operation);

    @defineCreated(Operation);
    
    name 'Наименование' = DATA ISTRING[100](Operation) CHARWIDTH 30;
    name(Operation operation) += name(operation);
    
    priceRound 'Количество знаков для округления сумм документов' = DATA INTEGER (Operation);

    id 'ID' = DATA ISTRING[100](Operation);
    id(Operation operation) += id(operation);
    operation (id) = GROUP MAX Operation operation BY id(operation);

    FORM operation 'Операция'##postfix
        OBJECTS o = Operation PANEL
        PROPERTIES(o) name, id, priceRound
        PROPERTIES(o) READONLY createdNameUser, createdTime, createdHostnameComputer

        EDIT Operation OBJECT o
    ;

    DESIGN operation {
        BOX {
            size = (1024, 768);
            NEW topContainer{
                fill = 1;
                type = CONTAINERV;
                NEW headContainer {
                    type = CONTAINERV;
                    NEW propertyContainer{
                        type = CONTAINERH;
                        caption = 'Параметры';
                        MOVE PROPERTY(name(o));
                        MOVE PROPERTY(id(o));
                        MOVE PROPERTY(priceRound(o));
                    }
                    MOVE GROUP(created,o);
                }
                NEW tabContainer {
                    fill = 1;
                    type = TABBED;
                }
            }
            MOVE TOOLBARBOX;
        }
    }

    FORM operations 'Операции'##navigator
        OBJECTS o = Operation
        PROPERTIES(o) READONLY name, id, createdNameUser, createdTime, createdHostnameComputer
        PROPERTIES(o) NEWSESSION NEW, EDIT, DELETE 
    ;

    DESIGN operations 'Операции'##postfix {
    }

    FORM dialogOperations 'Операции' 
        OBJECTS o = Operation
        PROPERTIES(o) READONLY name, id

        LIST Operation OBJECT o
    ;
    
    DESIGN dialogOperations 'Операции'##postfix {
    }

END

// -------------------------------------- Макросы по объявлению операций в документах ---------------------------------- //
META defineDocumentOperationAbstractHeaderPrefix(object, prefix, NSR, caption)
    prefix###operation = ABSTRACT NSR.Operation (###object) MATERIALIZED;
    name###prefix##Operation 'Операция'###caption = name(prefix###operation(###object object));
    id###prefix##Operation 'ID операции'###caption = id(prefix###operation(###object object));
END
META defineDocumentOperationHeaderPrefix(object, prefix, NSR, caption)
    prefix###operation = DATA NSR.Operation (###object);
    name###prefix##Operation 'Операция'###caption = name(prefix###operation(###object object));
    id###prefix##Operation 'ID операции'###caption = id(prefix###operation(###object object));
END
META defineDocumentOperationInterfaceHeaderPrefix(object, prefix, NSR, caption)
    @defineDocumentOperationAbstractHeaderPrefix(object, prefix, NSR, caption);
    @defineDocumentOperationHeaderPrefix(user###object, prefix, NSR, caption);
    prefix###operation(User###object object) += prefix###operation(object);
END
META defineDocumentOperationDetailPrefix(object, detail, prefix, NSR, caption)
    prefix###operation (###detail idetail) = prefix###operation(object(idetail));
    name###prefix##Operation 'Операция'###caption (###detail idetail) = name(prefix###operation(idetail));
    id###prefix##Operation 'ID операции'###caption (###detail idetail) = id(prefix###operation(idetail));
END
META defineDocumentOperationDetailPrefix(object, prefix, NSR, caption)
    @defineDocumentOperationDetailPrefix(object, object##Detail, prefix, NSR, caption);
END
META defineDocumentInterfaceOperationPrefix (object, prefix, NSR, caption)
    @defineDocumentOperationInterfaceHeaderPrefix(object, prefix, NSR, caption);
    @defineDocumentOperationDetailPrefix(object, prefix, NSR, caption);
    @defineDocumentOperationDetailPrefix(user###object, prefix, NSR, caption);
END
META defineDocumentInterfaceOperation (object, NSR, caption)
    @defineDocumentInterfaceOperationPrefix(object, , NSR, caption);
END

META extendFormOperationPrefix(object, char, afterProp, prefix, containerProp)

    EXTEND FORM user###object
        PROPERTIES(char) name###prefix###operationUser###object
    ;

    DESIGN user###object{
        containerProp{
            MOVE PROPERTY (name###prefix###operationUser###object) AFTER PROPERTY(afterProp###object);
        }
    }
END


META defineDocumentOperation(object, char, befProp, befProperty)

    operation###object = ABSTRACT Operation (###object) MATERIALIZED INDEXED;
    name###operation###object 'Операция' = nameOperation(operation###object(object));
    id###operation###object 'ID операции' = idOperation(operation###object(object));
    operationUser###object = DATA Operation (User###object);
    name###operationUser###object 'Операция' = nameOperation(operationUser###object(user###object));
    id###operationUser###object 'ID операции' = idOperation(operationUser###object(user###object));
    operation###object(object) += operationUser###object(object);

    operation###object##Detail 'Операция' (object##Detail) = operation###object(object###object##Detail(object##Detail));
    operationUser###object##Detail 'Операция' (user###object##Detail) = operationUser###object(user###object##User###object##Detail(user###object##Detail));

    EXTEND FORM user###object
        PROPERTIES(char) name###operationUser###object
    ;

    DESIGN user###object{
        documentPrm{
            MOVE PROPERTY(name###operationUser###object) BEFORE PROPERTY(befProp###object);
        }
        PROPERTY(name###operationUser###object) {charWidth = 30;} 
    }
    EXTEND FORM object##s
        PROPERTIES(char) READONLYIF isReadonly() name###operation###object BEFORE befProperty###object(char)
    ;
END

META defineDocumentOperation(object, char)
    @defineDocumentOperation(object, char, nameCurrencyUser, nameCurrency);
END

META defineDocumentOperationContainer(object, char, afProp, befProperty, contProp, typeIdentity, check)

    operation = ABSTRACT Operation (###object) MATERIALIZED INDEXED;
    nameOperation 'Операция' = typeIdentity(operation(###object object));
    idOperation 'ID операции' = id(operation(###object object));
    operation = DATA Operation (User###object);
    nameOperation 'Операция' = typeIdentity(operation(User###object user###object));
    idOperation 'ID операции' = id(operation(User###object user###object));
    operation(User###object object) += operation(object);

    operation 'Операция' (###object##Detail object##Detail) = operation(object(object##Detail));
    nameOperation 'Операция' (###object##Detail d) = name(operation(d));
    idOperation 'ID операции' (###object##Detail d) = id(operation(d));
    
    operation 'Операция' (User###object##Detail user###object##Detail) = operation(user###object(user###object##Detail));
    nameOperation 'Операция' (User###object##Detail d) = name(operation(d));
    idOperation 'ID операции' (User###object##Detail d) = id(operation(d));
    
    backgroundOperation 'Цвет' = ABSTRACT CASE COLOR (###object);
    
    dialogOperations(User###object object)  { 
        DIALOG dialogOperations###check OBJECTS o = operation(object) CHANGE LIST typeIdentity(o);
    }
    
    EXTEND FORM user###object
        PROPERTIES(char) nameOperation ON CHANGE dialogOperations(char)
    ;

    DESIGN user###object{
        contProp {
            MOVE PROPERTY(nameOperation(char));
        }
        PROPERTY(nameOperation(char)) {charWidth = 30;} 
    }
    EXTEND FORM object##s
        PROPERTIES(char) READONLYIF isReadonly() BACKGROUND backgroundOperation(char) nameOperation BEFORE befProperty(char)
    ;
END

META defineDocumentOperationContainer(object, char)
    @defineDocumentOperationContainer(object, char, isPosted###object, nameCurrency, first, name, );
END
META defineDocumentOperationContainer(object, char, typeIdentity)
    @defineDocumentOperationContainer(object, char, isPosted###object, nameCurrency, first, typeIdentity, return);
END

META defineDocumentOperationConstraint(object, caption, NS)
    CONSTRAINT is(###object o) AND NOT operation(o)
        MESSAGE 'У документа '###caption###' должна быть задана операция';        
END

// -------------------------------------- Организации ---------------------------------- //

META defineOperationLegalEntity(prop, propPostfix, object, tabcaption)

    need###propPostfix###prop 'Должен быть задан для документа' = DATA BOOLEAN (Operation);
    // Отметка для групп
    dataIn###prop 'Отм.' = DATA BOOLEAN (LegalEntityGroup, Operation);

    levelParent###propPostfix###prop(Operation operation, LegalEntityGroup legalEntityGroup)  =
        GROUP
              MIN level(legalEntityGroup, LegalEntityGroup parent) IF dataIn###prop(parent, operation) MATERIALIZED;
    nearestParent###propPostfix###prop##Group (Operation operation, LegalEntityGroup legalEntityGroup) = legalEntityGroup(legalEntityGroup, levelParent###propPostfix###prop(operation, legalEntityGroup));
    nearestIn###prop (LegalEntityGroup legalEntityGroup, Operation operation) =
        dataIn###prop(nearestParent###propPostfix###prop##Group(operation, legalEntityGroup), operation) MATERIALIZED;

    in###prop 'Отм' (LegalEntityGroup legalEntityGroup, Operation operation) =
        OVERRIDE dataIn###prop(legalEntityGroup, operation), nearestIn###prop(legalEntityGroup, operation);

    // Отметка для организаций
    dataIn###prop 'Отм.' = DATA BOOLEAN (LegalEntity, Operation);
    in###prop 'Отм' (LegalEntity legalEntity, Operation operation) =
        OVERRIDE dataIn###prop(legalEntity, operation), nearestIn###prop(legalEntityGroup(legalEntity), operation);
        
    quantityChildWithIn###prop(LegalEntityGroup group, Operation operation)  = GROUP SUM 1 IF dataIn###prop(LegalEntityGroup childGroup, operation) AND isParent(childGroup, group) MATERIALIZED;
    quantityParentWithIn###prop(LegalEntityGroup group, Operation operation)  = GROUP SUM 1 IF dataIn###prop(LegalEntityGroup parentGroup, operation) AND isParent(group, parentGroup) MATERIALIZED;          
        
    backgroundIn###prop 'Цвет' (LegalEntityGroup group, Operation operation) = CASE
        WHEN dataIn###prop(group, operation) THEN RGB(0,0,0)
        WHEN nearestIn###prop(group, operation) THEN RGB(230,248,250) 
        WHEN quantityChildWithIn###prop(group, operation) != descendantNumber(group) AND NOT quantityParentWithIn###prop (group, operation) THEN RGB(203,203,203);    
        
    backgroundIn###prop'Цвет' (LegalEntity legalEntity, Operation operation) = IF dataIn###prop(legalEntity, operation) THEN RGB(0,0,0)
        ELSE RGB(230,248,250) IF nearestIn###prop(legalEntityGroup(legalEntity), operation);   

    EXTEND FORM operation
        TREE prop###propPostfix###groupTree object##g = LegalEntityGroup PARENT parent(object##g)
        PROPERTIES READONLY object##gTreeName = name(object##g)
        PROPERTIES in###prop(object##g, o) BACKGROUND backgroundIn###prop(object##g, o)
        PROPERTIES need###propPostfix###prop(o)

        OBJECTS object = LegalEntity
        PROPERTIES(object, o) in###prop BACKGROUND backgroundIn###prop(object, o)
        PROPERTIES(object) READONLY name, fullName, shortNameOwnership, nameLegalEntityGroup,
                               address, phone,
                               isSupplier, isCompany, isCustomer
        FILTERS isParent(legalEntityGroup(object), object##g) OR
                object IS LegalEntity AND NOT object##g IS LegalEntityGroup OR
                (object IS LegalEntity AND object##g IS LegalEntityGroup AND NOT legalEntityGroup(object))
        FILTERGROUP object##filters
                FILTER 'Показывать отмеченные' in###prop(object, o) 'F10'
        FILTERGROUP object##inactiveLegalEntity FILTER 'Активная' active(object) 'shift F10' DEFAULT        
    ;

    DESIGN operation {
        tabContainer {
            NEW prop###propPostfix###Container{
                caption = tabcaption;
                fill = 1;
                MOVE PROPERTY (need###propPostfix###prop(o));
                NEW split###prop###propPostfix###Container{
                    type = SPLITH;
                    fill = 1;
                    MOVE BOX(TREE prop###propPostfix###groupTree);
                    MOVE BOX(object) {
                        fill = 3;
                    }
                }
            }
        }
    } 
END

META defineDocumentOperationLegalEntity(object, prop, caption)
    CONSTRAINT (SETCHANGED(operation(###object object)) OR SETCHANGED(prop(object))) AND operation(object) AND prop(object) 
               AND NOT in###prop(prop(object), operation(object))
        CHECKED BY prop[###object]
        MESSAGE caption##' должен совпадать с отмеченными в операции';
    CONSTRAINT (SETCHANGED(operation(###object object)) OR SET(isPosted(object)) OR DROPPED(prop(object))) AND operation(object) AND isPosted(object)
               AND NOT prop(object) AND need###prop(operation(object))
        MESSAGE caption##' должен быть задан для документа';
END

META defineCountLegalEntityOperation(prop, filter)
    // Подсчет органиизации по умолчанию            
    count###prop(Operation operation)  = GROUP  SUM 1 IF in###prop(LegalEntity legalEntity,operation) AND is###filter(legalEntity);
    default###prop(Operation operation)  = GROUP MIN LegalEntity legalEntity IF in###prop(legalEntity,operation) AND is###filter(legalEntity);   
END

META defineCountLegalEntityOperation(prop)
    // Подсчет органиизации по умолчанию            
    count###prop(Operation operation)  = GROUP SUM 1 IF in###prop(LegalEntity legalEntity,operation);
    default###prop(Operation operation)  = GROUP MIN LegalEntity legalEntity IF in###prop(legalEntity,operation);   
END

META deriveDocumentOperationLegalEntity(objectClass, prop, form)
    WHEN LOCAL FORMS form CHANGED(operation(###objectClass o)) NOINLINE DO {
        prop(o) <- default###prop(operation(o))
            WHERE count###prop(operation(o)) == 1;
    }        
END

//Склады

META defineOperationStock(prop, object, tabcaption)

    need###prop##Stock 'Должен быть задан для документа' = DATA BOOLEAN (Operation);
    // Отметка для групп
    all###prop##Stocks 'Отм' = DATA BOOLEAN (Operation);

    dataIn###prop 'Отм.' = DATA BOOLEAN (StockGroup, Operation);

    levelParent###prop##Stock(Operation operation, StockGroup stockGroup)  =
        GROUP
              MIN level(stockGroup, StockGroup parent) IF dataIn###prop(parent, operation) MATERIALIZED;
    nearestParent###prop##StockGroup (Operation operation, StockGroup stockGroup) = stockGroup(stockGroup, levelParent###prop##Stock(operation, stockGroup));
    nearestIn###prop (StockGroup stockGroup, Operation operation) =
        dataIn###prop(nearestParent###prop##StockGroup(operation, stockGroup), operation) MATERIALIZED;

    in###prop 'Отм' (StockGroup stockGroup, Operation operation) =
        OVERRIDE dataIn###prop(stockGroup, operation),
                 nearestIn###prop(stockGroup, operation),
                 all###prop##Stocks(operation) AND stockGroup IS StockGroup;

    // Отметка для складов
    dataIn###prop 'Отм.' = DATA BOOLEAN (Stock, Operation);
    in###prop 'Отм' (Stock stock, Operation operation) =
        OVERRIDE dataIn###prop(stock, operation),
                 in###prop(stockGroup(stock), operation);
                 
    countDataIn###prop##StockGroups (Operation operation) = GROUP SUM 1 IF  dataIn###prop(StockGroup stockGroup, operation);            
                                  
    backgroundAll###prop##Stocks 'Цвет' (Operation operation) = IF all###prop##Stocks(operation) THEN RGB(0,0,0)
        ELSE RGB(203,203,203) IF countDataIn###prop##StockGroups(operation);      
     
    quantityChildWithIn###prop(StockGroup group, Operation operation)  = GROUP SUM 1 IF dataIn###prop(StockGroup childGroup, operation) AND isParent(childGroup, group) MATERIALIZED;
    quantityParentWithIn###prop(StockGroup group, Operation operation)  = GROUP SUM 1 IF dataIn###prop(StockGroup parentGroup, operation) AND isParent(group, parentGroup) MATERIALIZED;          
          
    backgroundIn###prop 'Цвет' (StockGroup group, Operation operation) = CASE
        WHEN dataIn###prop(group, operation) THEN RGB(0,0,0)
        WHEN nearestIn###prop(group, operation) THEN RGB(230,248,250) 
        WHEN quantityChildWithIn###prop(group, operation) != descendantNumber(group) AND NOT quantityParentWithIn###prop(group, operation) THEN RGB(203,203,203);           
        
        
    backgroundIn###prop 'Цвет' (Stock stock, Operation operation) = IF dataIn###prop(stock, operation) THEN RGB(0,0,0)
        ELSE RGB(230,248,250) 
        IF in###prop(stockGroup(stock), operation);                           
                    

    EXTEND FORM operation
        TREE prop###stockGroupTree object##a=BPSTRING[3], object##g = StockGroup PARENT parent(object##g)
        PROPERTIES READONLY VALUE(object##a), object##gTreeName = name(object##g)
        PROPERTIES(o) all###prop##Stocks DRAW object##a BACKGROUND backgroundAll###prop##Stocks(o)
        PROPERTIES in###prop(object##g, o) BACKGROUND backgroundIn###prop(object##g, o)
        PROPERTIES need###prop##Stock(o)
        FILTERS stringEqualsAll(object##a)

        OBJECTS object = Stock
        PROPERTIES(object, o) in###prop BACKGROUND backgroundIn###prop(object, o)
        PROPERTIES(object) READONLY nameStock###object = name, nameStockGroup
        ORDERS nameStock###object
        FILTERS object IS Stock AND NOT object##g IS StockGroup OR
                isParent(object##g, object)
        FILTERGROUP object##filters3
                FILTER 'Показывать отмеченные' in###prop(object, o) 'F10'
        FILTERGROUP object##inactiveStock FILTER 'Активный' active(object) 'ctrl F10' DEFAULT                    
    ;

    DESIGN operation {
        tabContainer {
            NEW prop###stockContainer{
                caption = tabcaption;
                fill = 1;
                MOVE PROPERTY (need###prop##Stock(o));
                NEW split###prop###stockContainer{
                    type = SPLITH;
                    fill = 1;
                    MOVE BOX(TREE prop###stockGroupTree);
                    MOVE BOX(object) {
                        fill = 3;
                    }
                }
            }
        }
    }
END

META defineDocumentOperationStock(object, prop, caption)
    CONSTRAINT (SETCHANGED(operation(###object object)) OR SETCHANGED(prop##Stock(object))) AND operation(object) AND prop##Stock(object) 
               AND NOT in###prop(prop##Stock(object), operation(object))
        CHECKED BY prop##Stock[###object]
        MESSAGE caption##' должен совпадать с отмеченными в операции';
    CONSTRAINT (SETCHANGED(operation(###object object)) OR SET(isPosted(object)) OR DROPPED(prop##Stock(object))) AND operation(object) AND isPosted(object) 
               AND NOT prop##Stock(object) AND need###prop##Stock(operation(object))
        MESSAGE caption##' должен быть задан для документа';
END

META defineCountStockOperation(prop, filter, filterEntity)
    // Подсчет складов по умолчанию            
    count###prop##Stock(Operation operation)  = GROUP
                                                            SUM 1 IF in###prop(Stock stock,operation)
                                                        AND is###filter(stock) 
                                                        AND in###prop(legalEntity(stock),operation)
                                                        AND is###filterEntity(legalEntity(stock));
    default###prop##Stock(Operation operation)  = GROUP
                                                            MIN Stock stock IF in###prop(stock,operation) 
                                                        AND is###filter(stock) 
                                                        AND in###prop(legalEntity(stock),operation)
                                                        AND is###filterEntity(legalEntity(stock));        
END

META deriveDocumentOperationStock(objectClass, prop, form)
    WHEN LOCAL FORMS form CHANGED(operation(###objectClass o)) NOINLINE DO {
        IF count###prop##Stock(operation(o)) == 1 THEN 
            prop##Stock(o) <- default###prop##Stock(operation(o));
    }
END

//Валюта

META defineOperationCurrency(dumb)
    TABLE currencyOperation(Currency, Operation);
    in 'Отм.' = DATA BOOLEAN (Currency, Operation);

    EXTEND FORM operation
        OBJECTS c = Currency
        PROPERTIES(c, o) in
        PROPERTIES(c) READONLY name
        FILTERGROUP filters4
            FILTER 'Показывать отмеченные' in(c, o) 'F11'
    ;

    DESIGN operation{
        tabContainer {
            NEW currencyContainer{
                caption = 'Валюта';
                MOVE BOX(c);
            }
        }
    }
END

//Тип классификатора

META defineOperationGroupType(dumb)
    groupType = DATA GroupType (Operation);
    nameGroupType 'Тип классификатора' (Operation operation) = name(groupType(operation));

    EXTEND FORM operation
        PROPERTIES(o) nameGroupType
    ;

    DESIGN operation{
        propertyContainer{
            MOVE PROPERTY(nameGroupType(o));
        }
    }
END

META defineOperationRole(dumb)

    allRoles 'Для всех ролей' = DATA BOOLEAN (Operation);
    preventChangesDocumentDefault 'Запретить редактирование' = DATA BOOLEAN (Operation);
    countDaysDocumentDefault 'Количество дней для запрета' = DATA INTEGER (Operation);
    preventCloseDocumentDefault 'Запретить закрытие' = DATA BOOLEAN (Operation);
    preventOpenDocumentDefault 'Запретить открытие' = DATA BOOLEAN (Operation);

    TABLE userRoleOperation (UserRole, Operation);
    dataIn 'Отм.' = DATA BOOLEAN (UserRole, Operation);

    in 'Отм' (UserRole role, Operation operation) =
        OVERRIDE dataIn(role, operation), allRoles(operation) AND role IS UserRole;
    
    TABLE userOperation (User, Operation);
    in (User user, Operation operation) = allRoles(operation) AND user IS User OR 
                                        dataIn(mainRole(user), operation) MATERIALIZED;
    in(User user, Operation operation) += in(user, operation);
    countOperations(User user)  = GROUP SUM 1 IF in(user, Operation operation);
    countUsers (Operation operation) = GROUP SUM 1 IF in (User user, operation);
    defaultOperation 'Операция по умолчанию'(User user)  = GROUP MIN Operation operation IF in(user, operation);
    
    preventChangesDocument 'Запретить редактирование' = DATA BOOLEAN (UserRole, Operation);
    preventChangesDocument (User user, Operation operation) = preventChangesDocument(mainRole(user), operation);
    Operation.preventChangesDocument (UserRole role, Operation operation) += preventChangesDocument(role, operation);
    
    countDaysDocument 'Количество дней для запрета' = DATA INTEGER (UserRole, Operation);
    countDaysDocument (User user, Operation operation) = countDaysDocument(mainRole(user), operation);
    Operation.countDaysDocument (UserRole role, Operation operation) += countDaysDocument(role, operation);
    
    preventCloseDocument 'Запретить закрытие' = DATA BOOLEAN (UserRole, Operation);
    preventCloseDocument (User user, Operation operation) = preventCloseDocument(mainRole(user), operation);

    preventOpenDocument 'Запретить открытие' = DATA BOOLEAN (UserRole, Operation);
    preventOpenDocument (User user, Operation operation) = preventOpenDocument(mainRole(user), operation);

    EXTEND FORM operation
        PROPERTIES(o) allRoles, preventChangesDocumentDefault, countDaysDocumentDefault, preventCloseDocumentDefault, preventOpenDocumentDefault

        OBJECTS r = UserRole
        PROPERTIES(r) READONLY name
        PROPERTIES(r, o) in, preventChangesDocument, countDaysDocument, preventCloseDocument, preventOpenDocument

        FILTERGROUP filtersRole
                FILTER 'Показывать отмеченные' in(r, o) 'F8'
    ;

    DESIGN operation {
        tabContainer {
            NEW roleContainer{
                type = CONTAINERV;
                caption = 'Роли';
                NEW roleContainer1 {
                    type = CONTAINERH;
                    NEW roleContainer11 {
                        MOVE PROPERTY(allRoles(o));
                        caption = 'Для всех';
                        }
                    NEW roleContainer12 {
                        type = CONTAINERH;
                        MOVE PROPERTY(preventChangesDocumentDefault(o));
                        MOVE PROPERTY(countDaysDocumentDefault(o));
                        MOVE PROPERTY(preventCloseDocumentDefault(o));
                        MOVE PROPERTY(preventOpenDocumentDefault(o));
                        caption = 'По умолчанию (для новых ролей)';
                    }
                }
                MOVE BOX(r);
            }
        }
    }
    copy (UserRole userRole, UserRole ur) + { 
        dataIn(ur, Operation o) <- dataIn(userRole,o) WHERE dataIn(userRole,o);
        preventChangesDocument(ur, Operation o) <- preventChangesDocument(userRole,o) WHERE preventChangesDocument(userRole,o);
        
        countDaysDocument(ur, Operation o) <- countDaysDocument(userRole,o) WHERE countDaysDocument(userRole,o);
        preventCloseDocument(ur, Operation o) <- preventCloseDocument(userRole,o) WHERE preventCloseDocument(userRole,o);
        preventOpenDocument(ur, Operation o) <- preventOpenDocument(userRole,o) WHERE preventOpenDocument(userRole,o);    
    }
    preventChangesDocument(UserRole ur, Operation o) <- preventChangesDocumentDefault(o) WHEN SET (ur IS UserRole);
    countDaysDocument(UserRole ur, Operation o) <- countDaysDocumentDefault(o) WHEN SET (ur IS UserRole);
    preventCloseDocument(UserRole ur, Operation o) <- preventCloseDocumentDefault(o) WHEN SET (ur IS UserRole);
    preventOpenDocument(UserRole ur, Operation o) <- preventOpenDocumentDefault(o) WHEN SET (ur IS UserRole);
    @extendFormFilterRole(o, dialogOperations);
END

META extendFormFilterRole(concrete, form)
    EXTEND FORM form FILTERS in(currentUser(), concrete);
END

META extendFormFilterRoleAccessPrefix(object, concrete, form, prefix)
    EXTEND FORM form FILTERS in(currentUser(), operation(concrete));
END

META extendFormFilterRoleAccess(object, concrete, form)
    @extendFormFilterRoleAccessPrefix(object, concrete, form, );    
END
META extendFormFilterRoleAccessNSPrefix(object, concrete, form, prefix, NS)
    EXTEND FORM form FILTERS in(currentUser(), operation(concrete));
END
META extendFormFilterRoleAccessNS(object, concrete, form, NS)
    @extendFormFilterRoleAccessNSPrefix(object, concrete, form, , NS);    
END

META defineDocumentOperationRole(object, objectClass)
    @defineDocumentOperationRolePrefix(object, objectClass, );
END
META defineDocumentOperationRole(object)
    @defineDocumentOperationRole(object, ###object);
END
META defineDocumentOperationRolePrefix(object, objectClass, prefix)
    WHEN LOCAL SET(###object o IS objectClass) AND countOperations(currentUser()) == 1 AND NOT CHANGED(operation(o)) DO {
        operation(o) <- defaultOperation(currentUser());
    }
END
META defineDocumentOperationRolePrefix(object, prefix)
    @defineDocumentOperationRolePrefix(object, ###object, prefix);
END

META defineDocumentOperationRoleOver(object, objectClass, prefix)
    operation(###object o) <- (OVERRIDE defaultOperation(currentUser()) IF countOperations(currentUser()) == 1, default###prefix##Operation())    
        WHEN SET(o IS objectClass);
END
META defineDocumentOperationRoleOver(object, prefix)
    @defineDocumentOperationRoleOver(object, ###object, prefix);
END

META defineOperationProperty(property, caption, type, container)
    property caption = DATA type (Operation) PREREAD;

    EXTEND FORM operation
        PROPERTIES(o) property
    ;
    DESIGN operation {
        container {
            MOVE PROPERTY(property(o));
        }
    }
END


META defineOperationProperty(property, caption, container)
    @defineOperationProperty(property, caption, BOOLEAN, container);
END

META deriveDocumentOperationProperty(objectClass, property)
    property (###objectClass o) <- property(operation(o))
        WHEN CHANGED(operation(o));
END


META defineOperationFilterProperty(object, objectClass, concrete, form, container, befProp)
    
    filter###object##Operation  = DATA LOCAL NESTED Operation ();
    nameFilter###object##Operation 'Операция' = name(filter###object##Operation()) CHARWIDTH 15;          
    filterOperation (###object concrete) = operation(concrete) == filter###object##Operation() OR (concrete IS objectClass AND NOT filter###object##Operation());   


    EXTEND FORM form
        PROPERTIES() nameFilter###object##Operation
        
        FILTERS filterOperation(concrete)
    ;
    DESIGN form {
        container {
            MOVE PROPERTY(nameFilter###object##Operation()) BEFORE PROPERTY(befProp()) { fill = 1; };
        }
    }
END

META defineOperationFilterProperty(object, concrete, form, befProp)
    @defineOperationFilterProperty(object, ###object, concrete, form, topFilters1, befProp);
END


META defineOperationChangesDocumentPrefix(object, objectClass, concreteClass, property, createdUserProp, prefix)
    skipPreventShowEditDelete = ABSTRACT BOOLEAN(###object);
    showEditDeleteUser (###object o) = (o IS objectClass AND NOT (property(currentUser(),operation(o)) AND NOT sum(date(o),countDaysDocument(currentUser(),operation(o))) >= currentDate())) OR skipPreventShowEditDelete(o);          
END

META defineOperationChangesDocument(object, concreteClass, property, createdUserProp)    
    @defineOperationChangesDocumentPrefix(object, ###object, concreteClass, property, createdUserProp, );      
END