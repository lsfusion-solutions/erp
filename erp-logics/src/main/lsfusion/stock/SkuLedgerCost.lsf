MODULE SkuLedgerCost;

REQUIRE SkuLedger, PriceListAccount;

NAMESPACE Stock;

fixedCost 'Фиксированная себестоимость' = ABSTRACT BOOLEAN (SkuLedger) MATERIALIZED;

fromStock = ABSTRACT Stock (SkuLedger) MATERIALIZED;
nameFromStock 'Склад внутреннего перемещения' (SkuLedger l) = name(fromStock(l));

EXTEND FORM costSkuLedger
    PROPERTIES(bil) READONLY fixedCost, nameFromStock
;

// calculated gauss

calculatedCost = DATA LOCAL NESTED NUMERIC[16,4] (Sku, Stock);
calculatedErrors = DATA LOCAL STRING ();
recalculateCostCalculated ABSTRACT LIST (DATE, DATE);

fixedCostQuantity (Sku sku, Stock stock, DATE dFrom, DATE dTo) = 
    GROUP SUM signedQuantity(SkuLedger l) IF fixedCost(l) AND NOT fromStock(l) AND 
              sku(l) = sku AND stock(l) = stock AND 
              date(l) >= dFrom AND date(l) <= dTo;
fixedCostSum (Sku sku, Stock stock, DATE dFrom, DATE dTo) = 
    GROUP SUM signedSum(SkuLedger l) IF fixedCost(l) AND NOT fromStock(l) AND
              sku(l) = sku AND stock(l) = stock AND 
              date(l) >= dFrom AND date(l) <= dTo;

intraCostQuantity (Sku sku, Stock from, Stock to, DATE dFrom, DATE dTo) = 
    GROUP SUM signedQuantity(SkuLedger l) IF sku(l) = sku AND
              fromStock(l) = from AND stock(l) = to AND fromStock(l) != stock(l) AND
              date(l) >= dFrom AND date(l) <= dTo;

calcCostQuantity = DATA LOCAL NUMERIC[16,5] (Sku, Stock);
calcCostSum = DATA LOCAL NUMERIC[18,4] (Sku, Stock);

calcCostIntra = DATA LOCAL NUMERIC[16,5] (Sku, Stock, Stock);
calcCostIntraTo = DATA LOCAL NUMERIC[16,5] (Sku, Stock);

calculateCostGauss INTERNAL 'lsfusion.erp.stock.CalculateCostGaussAction' ();

recalculateCost 'Вкл.' = DATA LOCAL BOOLEAN (Sku);
recalculateAllSkus = DATA LOCAL BOOLEAN () PREREAD;
calcRecalculateCost (Sku sku) = recalculateAllSkus() OR recalculateCost(sku); 

//может быть несколько ЮЮЛ в базе, чтобы была возможность считать по отдельности
recalculateCost 'Вкл.' = DATA LOCAL BOOLEAN (Stock);
recalculateAllStocks = DATA LOCAL BOOLEAN () PREREAD;
calcRecalculateCost (Stock stock) = recalculateAllStocks() OR recalculateCost(stock);

positiveBalance = ABSTRACT BOOLEAN ();

recalculateCostGauss (DATE dFrom, DATE dTo) {
    NEWSESSION NESTED(recalculateCost[Sku], recalculateCost[Stock]) {
        calculatedCost(Sku sku, Stock stock) <- NULL;
        recalculateAllSkus() <- TRUE IF NOT (GROUP SUM 1 IF recalculateCost(Sku sku)); 
        recalculateAllStocks() <- TRUE IF NOT (GROUP SUM 1 IF recalculateCost(Stock stock)); 
    
        calcCostQuantity (Sku sku, Stock stock) <- balanceB(sku, stock, dFrom) IF (NOT positiveBalance() OR balanceB(sku, stock, dFrom) > 0) AND calcRecalculateCost(sku) AND calcRecalculateCost(stock);
        
        logToFile('cost', CONCAT '; ', 'Посчитаны начальные остатки по товарам', GROUP SUM 1 IF calcCostQuantity(Sku sku, Stock stock));
       
        calcCostSum (Sku sku, Stock stock) <- sumB(sku, stock, dFrom) IF (NOT positiveBalance() OR balanceB(sku, stock, dFrom) > 0) AND calcRecalculateCost(sku) AND calcRecalculateCost(stock);
    
        logToFile('cost', 'Посчитаны начальные суммы по товарам');
        
        calcCostQuantity (Sku sku, Stock stock) <- calcCostQuantity(sku, stock) (+) fixedCostQuantity(sku, stock, dFrom, dTo) WHERE fixedCostQuantity(sku, stock, dFrom, dTo) AND calcRecalculateCost(sku) AND calcRecalculateCost(stock);  
    
        logToFile('cost', 'Посчитаны приходы количеств по товарам');
    
        calcCostSum (Sku sku, Stock stock) <- calcCostSum(sku, stock) (+) fixedCostSum(sku, stock, dFrom, dTo) WHERE fixedCostSum(sku, stock, dFrom, dTo) AND calcRecalculateCost(sku) AND calcRecalculateCost(stock);
    
        logToFile('cost', 'Посчитаны приходы сумм по товарам');
    
        calcCostIntra (Sku sku, Stock from, Stock to) <- NULL;
        calcCostIntra (Sku sku, Stock from, Stock to) <- intraCostQuantity(sku, from, to, dFrom, dTo) WHERE intraCostQuantity(sku, from, to, dFrom, dTo) AND calcRecalculateCost(sku) AND calcRecalculateCost(to) AND calcRecalculateCost(from);
        calcCostIntra (Sku sku, Stock from, Stock to) <- NULL WHERE calcCostIntra(sku, from, to) <= 0;
        
        WHILE TRUE DO {
            calcCostIntraTo(Sku sku, Stock to) <- GROUP SUM calcCostIntra(sku, Stock from, to);
    
            logToFile('cost', CONCAT '; ', 'Найдены склады/sku, на которые есть внутренние перемещения', GROUP SUM 1 IF calcCostIntraTo(Sku sku, Stock to));
            
            IF NOT (GROUP SUM 1 IF calcCostIntra(Sku sku, Stock from, Stock to) AND NOT calcCostIntraTo(sku, from)) THEN
                BREAK;
    
            calcCostSum (Sku sku, Stock to) <- (OVERRIDE calcCostSum(sku, to), 0.0) + NUMERIC[16,4](GROUP SUM (calcCostIntra (sku, Stock from, to) * calcCostSum(sku, from) / calcCostQuantity(sku, from)) IF NOT calcCostIntraTo(sku, from)) WHERE
                                                                                                    GROUP SUM (calcCostIntra (sku, Stock from, to) * calcCostSum(sku, from) / calcCostQuantity(sku, from)) IF NOT calcCostIntraTo(sku, from);   
            calcCostQuantity (Sku sku, Stock to) <- (OVERRIDE calcCostQuantity(sku, to), 0.0) + (GROUP SUM calcCostIntra (sku, Stock from, to) IF NOT calcCostIntraTo(sku, from)) WHERE 
                                                                                                (GROUP SUM calcCostIntra (sku, Stock from, to) IF NOT calcCostIntraTo(sku, from));
            
            calcCostIntra(Sku sku, Stock from, Stock to) <- NULL WHERE calcCostIntra(sku, from, to) AND NOT calcCostIntraTo(sku, from);   
        }
        
        
        calculatedCost(Sku sku, Stock stock) <- NUMERIC[16,4](calcCostSum(sku, stock) / calcCostQuantity(sku, stock)) WHERE calcCostQuantity(sku, stock) != 0.0; 
    
        logToFile('cost', CONCAT '; ', 'Рассчитана себестоимость по товарам без циклов', GROUP SUM 1 IF calculatedCost(Sku sku, Stock stock));
        
    //    calcCostQuantity(Sku sku, Stock to) <- (OVERRIDE calcCostQuantity(sku, to), 0.0) + calcCostIntraTo(sku, to) WHERE calcCostIntraTo(sku, to);    
        
        logToFile('cost', CONCAT '; ', 'Запуск алгоритма Гаусса', GROUP SUM 1 IF calcCostIntra(Sku sku, Stock from, Stock to));
        
        calculateCostGauss();
        
        IF calculatedErrors() != '' THEN {
            logToFile('cost', 'Не удалось посчитать себестоимость для sku (внутренний id) : \n' + calculatedErrors());
            MESSAGE 'Не удалось посчитать себестоимость для sku (внутренний id) : \n' + calculatedErrors();
        } 
    
        logToFile('cost', 'Закончен подсчет по методу Гаусса');
    
        recalculateCostCalculated(dFrom, dTo);
    
        logToFile('cost', 'Записаны себестоимости в расходы');
    }
}

// account price
recalculateCostAccount ABSTRACT LIST (DATE, DATE);

recalculateCostAccountBeforeFirst ABSTRACT LIST (DATE, DATE); // в Сборках и Разборках нужно заполнить цены раньше, чем брать их в Учётную
recalculateCostAccountFirst ABSTRACT LIST (DATE, DATE);
recalculateCostAccountAfterFirst ABSTRACT LIST (DATE, DATE); // документы тоже изменяют с/с, но нужно после First

recalculateCostLedger ABSTRACT LIST FIRST (DATE, DATE);
recalculateCostLedger (DATE dFrom, DATE dTo) + {
    recalculateCostAccountBeforeFirst(dFrom, dTo);
    recalculateCostAccountFirst(dFrom, dTo);
    recalculateCostAccountAfterFirst(dFrom, dTo);
    
    recalculateCostAccount(dFrom, dTo);
}

recalulateCostLedgerAllSkus (DATE dFrom, DATE dTo) {
    FOR iterate(DATE d, dFrom, dTo) DO {
        recalculateAllSkus() <- TRUE;
        recalculateCostLedger(d, d);
    }
}

recalulateCostLedgerAllSkus (INTEGER period) {
    recalulateCostLedgerAllSkus(subtract(currentDate(), period), subtract(currentDate(), 1));
}

recalulateCostLedgerSelectedSkus (DATE dFrom, DATE dTo) {
    FOR iterate(DATE d, dFrom, dTo) DO {
        recalculateCostLedger(d, d);
    }
}

// average
disableCalcAccountPrice = DATA LOCAL BOOLEAN () PREREAD;

META defineCalcAveragePrice(obj, stockProp)
    calcAccountPrice (obj d) =
        NUMERIC[16,4]((balanceB(sku(d), stockProp(d), dateTime(d))*accountPriceB(sku(d), stockProp(d), dateTime(d)) +
            quantity(d) * price(d))/(quantity(d) + balanceB(sku(d), stockProp(d), dateTime(d))));

    // пока без PREV, так как нужно хитро пересчитывать при изменении той же даты
    WHEN (SETCHANGED(sku(obj d)) OR SETCHANGED(stockProp(d)) OR SETCHANGED(dateTime(d)) OR 
        SETCHANGED(quantity(d)) OR SETCHANGED(price(d))) AND NOT disableCalcAccountPrice() DO
        accountPrice(d) <- calcAccountPrice(d);
END

