MODULE ItemPack;

REQUIRE Item;

NAMESPACE Item;

// Виды упаковок
CLASS TransportPack 'Вид упаковки' {
    inpack 'Внутренняя упаковка',
    outpack 'Внешняя упаковка',
    oprow 'Ряд паллеты',
    oppl 'Паллета'
}

name 'Наименование' (TransportPack p) = staticCaption(p) IF p IS TransportPack;

FORM transportPacks 'Вид упаковки'
    OBJECTS p = TransportPack
    PROPERTIES(p) READONLY name
    
    LIST TransportPack OBJECT p
;

// штрих-код упаковки
transportPack = DATA TransportPack (Barcode);
nameTransportPack 'Вид упаковки' (Barcode b) = name(transportPack(b)) CHARWIDTH 20;

barcode = GROUP AGGR Barcode b BY sku(b) , transportPack(b);

weight 'Масса брутто, кг' = DATA NUMERIC[11,5] (Barcode);

length 'Длина, мм' = DATA NUMERIC[8,2] (Barcode);
width 'Ширина, мм' = DATA NUMERIC[8,2] (Barcode);
height 'Высота, мм' = DATA NUMERIC[8,2] (Barcode);

EXTEND FORM item 
    PROPERTIES (b) AFTER primary(b) nameTransportPack, weight, length, width, height;

toCopy(Barcode b) += WHEN transportPack(b) AND NOT primary(b) THEN TRUE;

overCopyItem(Barcode new, Barcode old, Sku i) + { 
    IF transportPack(old) AND i IS Sku THEN {
        transportPack(new) <- transportPack(old);
        weight(new) <- weight(old);
        length(new) <- length(old);
        width(new) <- width(old);
        height(new) <- height(old);
    }
}

// -----------------

GROUP itemPack 'Упаковка товара' : public;

META definePackSku (caption, NS)
    packBarcode 'Штрихкод для '##caption = DATA Barcode (Sku);
    pack 'Штрихкод для '##caption (Barcode barcode)=  packBarcode(sku(barcode)) == barcode;
    
    CONSTRAINT sku(packBarcode(Sku item)) != item CHECKED BY packBarcode[Sku] MESSAGE 'Выбран неверный sku для штрихкода упаковки ('##caption##')';
    
    changePack(Barcode barcode, Sku sku)  { 
        INPUT b = BOOLEAN DO
            packBarcode(sku) <- barcode IF b;
    }
    
    EXTEND FORM barcodeDialog
        PROPERTIES (b) READONLY pack##NS = pack
    ;
    EXTEND FORM barcodeSku
        PROPERTIES (b) READONLY pack##NS = pack
    ;
    
    idBarcodePack 'Штрихкод упаковки' (Sku sku)= id(packBarcode(sku));
    shortNameUOMPack 'Ед. изм. упаковки' (Sku sku)= shortNameUOM(packBarcode(sku));
    amountPack 'Кол-во в упаковке'(Sku sku) =amount(packBarcode(sku)) IN itemPack;
    
    changeValuePack(Sku sku, NUMERIC[14,3] n)  { 
        IF n > 0.0 THEN {
            IF NOT packBarcode(sku) THEN {
                NEW b = Barcode {
                   sku(b) <- sku;
                   dataAmount (b) <- n;
    
                   packBarcode(sku) <- b;
                }
            } ELSE {
                dataAmount (Barcode bb) <- n WHERE bb == packBarcode(sku) AND NOT primary(bb);
            }
    
        } ELSE {
            IF packBarcode(sku) THEN {
                DELETE Barcode p WHERE p==packBarcode(sku) AND NOT primary(p);
            }
        }
    }

    changePack(Sku sku)  { 
        INPUT n = NUMERIC[14,3] DO
            changeValuePack(sku, n);
    }
END

// --------------------------- Макрос по добавлению упаковки в документы ---------------------- //

META defineDocumentPack(object, detail, f)

    skipChangePackQuantity = ABSTRACT CASE BOOLEAN (User###object###Detail);
    skipChangeQuantity = ABSTRACT CASE BOOLEAN (User###object###Detail);
    readonlyAmountPack = ABSTRACT CASE BOOLEAN(User###object###Detail);

    // Объявляем галочку по, которой будут показываться колонки с упаковкой
    @defineDocumentInterfaceProperty (object, showPack, 'Упаковка');

    // Добавляем в строки штрихкод
    @defineDocumentInterfaceBarcodePrefix (object, sku, , );
    @deriveDocumentDetailBarcodeCustom (user###detail, sku, showPack);

    // Объявляем первичное свойство количество упаковок
    @defineDocumentInterfaceDetailQuantityPrefix(object, pack, ' упаковок');

    // Автоматически проставляем кол-во упаковок из количества
    packQuantity(User###detail d) <- quantity(d) / (amountPack(d) IF amountPack(d) != 0)
        WHEN CHANGED(quantity(d)) OR CHANGED(amountPack(d));

    // Объявляем действия по изменению количества в упаковке и количества упаковок
    overChangeAmountPackUser  ABSTRACT LIST ( ###detail, NUMERIC[14,3]); 
    changeAmountPackUser(###detail detail)  { 
        INPUT n = NUMERIC[14,3] DO {
            amountPack[User###detail](detail) <- n;
            IF NOT skipChangeQuantity(detail) THEN {
                quantity[User###detail](detail) <- packQuantity[User###detail](detail)*(OVERRIDE amountPack[User###detail](detail), 1.0);
            }        
            overChangeAmountPackUser(detail, n);
        }
    }

    changePackQuantity(User###detail detail)  { 
        INPUT n = NUMERIC[16,5] DO {
            packQuantity(detail) <- n;
            IF NOT skipChangeQuantity(detail) THEN {
                quantity(detail) <- NUMERIC[16,5](packQuantity(detail)*(OVERRIDE amountPack(detail), 1.0));
            }
        }
    }

    // Расширяем формы
    EXTEND FORM user###object
        PROPERTIES (f) showPack
        PROPERTIES (d) SHOWIF showPack(f) BEFORE quantity(d)
                       idBarcodePack, shortNameUOMPack,
                       amountPack ON CHANGE changeAmountPackUser(d) READONLYIF readonlyAmountPack(d), packQuantity ON CHANGE changePackQuantity(d)
    ;

    EXTEND FORM object##s
        PROPERTIES(d) READONLY SHOWIF showPack(f) BEFORE quantity(d)
                      idBarcodePack, shortNameUOMPack,
                      amountPack, packQuantity
    ;

    // Добавляем в копирование инвойсов
    overCopy(###object s, User###object d) + { 
        showPack(d) <- showPack(s);
    }
END

META defineDocumentPack(object, f)
    @defineDocumentPack(object, object##Detail, f);
END

// --------------------------- Макрос по добавлению упаковки в документы (подбор по нескольким складам) ---------------------- //

META defineDocumentPackSkuStock(object, detail, skuProp, stockProp)
    packQuantity###stockProp 'Кол-во упаковок в документе' (sku, object, stock) = GROUP SUM packQuantity(###detail detail)
        BY skuProp(detail), object(detail), stockProp##Stock(detail) CHARWIDTH 7;

    changePackQuantity(###skuProp skuProp, ###object object, Stock stock)  { 
        INPUT n = NUMERIC[14,3] DO
            IF detail###stockProp(sku, object, stock) THEN {
                IF n THEN {
                    packQuantity(###detail detail) <- n WHERE detail == detail###stockProp(sku, object, stock);
                    quantity(###detail detail) <- packQuantity(detail)*(OVERRIDE amountPack(detail), 1.0) 
                                            WHERE detail == detail###stockProp(sku, object, stock) AND NOT skipChangeQuantity(detail###stockProp(sku, object, stock));
                } ELSE {
                    FOR detail###stockProp(sku, object, stock) == ###detail d DO
                        DELETE d;
                }
            } ELSE {
                IF n THEN  {
                    NEW d = ###detail {
                       object(d) <- object;
                       skuProp(d) <- sku;
                       packQuantity (d) <- n;
                       quantity(d) <- packQuantity(d) * (OVERRIDE amountPack(d), 1.0);
                    }
                }
            }
    }
    changeValuePackCustom###object  ABSTRACT (Sku, NUMERIC[14,3]);
    useChangeValuePackCustom = ABSTRACT BOOLEAN (###object);
    changeAmountPack(###skuProp skuProp, ###object object, Stock stock)  { 
        INPUT n = NUMERIC[14,3] DO { 
            IF detail###stockProp(sku, object, stock) THEN {
                IF n THEN {
                    amountPack(###detail detail) <- n WHERE detail == detail###stockProp(sku, object, stock);
                    quantity(###detail detail) <- packQuantity(detail)*(OVERRIDE amountPack(detail), 1.0) 
                                            WHERE detail == detail###stockProp(sku, object, stock) AND packQuantity(detail) AND NOT skipChangeQuantity(detail###stockProp(sku, object, stock));
                } ELSE {
                    amountPack(###detail detail) <- NULL WHERE detail == detail###stockProp(sku, object, stock);
                }
    
            }
            IF NOT useChangeValuePackCustom(object) THEN{
                changeValuePack(sku, n);
            } ELSE {
                changeValuePackCustom###object(sku, n);
            }
            
        }
    }

END
META defineDocumentPackSkuStock(object, skuProp, stockProp)
    @defineDocumentPackSkuStock(object, object##Detail, skuProp, stockProp);
END


META extendFormDocumentPackSkuStock(object, form, concrete, stockProp)
    EXTEND FORM form
        PROPERTIES SHOWIF sh##concrete##wPack(concrete) BEFORE quantity###stockProp(ks, concrete, st)
//                   idBarcodePackSku(ks) READONLY, shortNameUOMPackSku(ks) READONLY,
                   am##concrete##untPack(ks) ON CHANGE changeAm##concrete##untPack(ks, concrete, st),
                   packQuantity###stockProp(ks, concrete, st) ON CHANGE changePackQuantity(ks, concrete, st)
    ;
    DESIGN form {
        PROPERTY(packQuantity###stockProp(ks, concrete, st)) { background = #FFBC02; }  //9AFC9A
    }
        
    
END

// --------------------------- Макрос по добавлению упаковки в документы (подбор по одному складу ) ---------------------- //

META defineDocumentPackSku(object, detail, skuProp, stockProp)
    packQuantity 'Кол-во упаковок в документе' (sku, object) = GROUP SUM packQuantity(###detail detail)
        BY skuProp(detail), object(detail) CHARWIDTH 7;

    changePackQuantity(###skuProp skuProp, ###object object)  { 
        INPUT n = NUMERIC[14,3] DO
            IF detail(sku, object) THEN {
                IF n THEN {
                    packQuantity(###detail detail) <- n WHERE detail == detail(sku, object);
                    quantity(###detail detail) <- packQuantity(detail)*(OVERRIDE amountPack(detail), 1.0) WHERE detail == detail(sku, object) AND NOT skipChangeQuantity(detail(sku, object));
                                    
                } ELSE {
                    FOR detail(sku, object) == ###detail d DO 
                        DELETE d;
                }
            } ELSE {
                IF n THEN
                    NEW d = ###detail {
                        object(d) <- object;
                        skuProp(d) <- sku;
                        packQuantity (d) <- n;
                        quantity(d) <- packQuantity(d) * (OVERRIDE amountPack(d), 1.0);
                    }
            }
    }
    
    changeValuePackCustom###object  ABSTRACT (Sku, NUMERIC[14,3]);
    useChangeValuePackCustom = ABSTRACT BOOLEAN (###object);
    changeAmountPack(###skuProp skuProp, ###object object)  { 
        INPUT n = NUMERIC[14,3] DO {
            IF detail(sku, object) THEN {
                IF n THEN {
                    amountPack(###detail detail) <- n WHERE detail == detail(sku, object);
                    quantity(###detail detail) <- packQuantity(detail)*(OVERRIDE amountPack(detail), 1.0) WHERE detail == detail(sku, object) AND packQuantity(detail) AND NOT skipChangeQuantity(detail(sku, object));
                } ELSE {
                    amountPack(###detail detail) <- NULL WHERE detail == detail(sku, object);
                }
    
            }
            IF NOT useChangeValuePackCustom(object) THEN {
                changeValuePack(sku, n);
            } ELSE {
                changeValuePackCustom###object(sku, n);
            }
        }
    }

END
META defineDocumentPackSku(object, skuProp, stockProp)
    @defineDocumentPackSku(object, object##Detail, skuProp, stockProp);
END


META extendFormDocumentPackSku(object, form, concrete)
    EXTEND FORM form
        PROPERTIES SHOWIF showPack(concrete) BEFORE quant##concrete##ty###form##Deta##concrete##l(ks, concrete)
//                   idBarcodePackSku(ks) READONLY, shortNameUOMPackSku(ks) READONLY,
                   amountPack(ks) ON CHANGE changeAmountPack(ks, concrete),
                   packQuant##concrete##ty(ks, concrete) ON CHANGE changePackQuant##concrete##ty(ks, concrete) SHOWIF showQuant##concrete##tySkuDocument(concrete)
    ;
    DESIGN form {
        PROPERTY(packQuant##concrete##ty(ks, concrete)) { background = #FFBC02;}
    }
END
