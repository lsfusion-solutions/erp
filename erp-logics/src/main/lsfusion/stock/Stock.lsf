MODULE Stock;

REQUIRE System, MasterData, Utils, Hierarchy, LegalEntity, I18n, Geo, EmployeeLegalEntity, Finance, Dashboard;

// ----------------------------------- Склады ------------------------------------------ //
CLASS ABSTRACT StockGroup 'Группа складов';
TABLE stockGroup (StockGroup);

@defineExternalizableAbstract(stockGroup, STRING[100]);

name 'Наименование' = ABSTRACT ISTRING[100](StockGroup) CHARWIDTH 20;

TABLE stockGroupStockGroup(StockGroup, StockGroup);
@defineHierarchyAbstract(stockGroup);

@defineHierarchyPlain(stockGroup);

FORM stockGroups 'Группы складов'

    TREE stockTree a = BPSTRING[3], sg = StockGroup PARENT parent(sg)
    PROPERTIES READONLY VALUE(a), sgTreeName = name(sg)
    ORDERS sgTreeName
    FILTERS stringEqualsAll(a)

    OBJECTS g = StockGroup
    PROPERTIES(g) READONLY name
    ORDERS name(g)
    FILTERS isParent(g, sg) OR (g IS StockGroup AND NOT sg)

    LIST StockGroup OBJECT g
;

DESIGN stockGroups {
    BOX {
        size = (1024, 768);

        NEW topContainer {
            horizontal = TRUE;
            fill = 1;

            MOVE BOX(TREE stockTree) {
                caption = 'Склады';
            }

            MOVE BOX(g) {
                fill = 2;
                GRID(g) {
                    defaultComponent = TRUE;
                }
                PROPERTY(name(g)){
                    charWidth = 35;
                }
            }
        }

        MOVE TOOLBARBOX;
    }
}

CLASS ABSTRACT Stock 'Склад';
TABLE stock(Stock);
TABLE stockDate(Stock, DATE);
TABLE legalEntityStock (LegalEntity, Stock);

@defineExternalizableAbstract(stock, STRING[100]);

name 'Наименование' = ABSTRACT ISTRING[150](Stock) MATERIALIZED INDEXED MATCH CHARWIDTH 20;
prevName 'Наименование' (Stock s) = PREV(name(s));

phone 'Телефон' = ABSTRACT ISTRING[100](Stock) MATERIALIZED INDEXED CHARWIDTH 20;
fullName 'Наименование полное' = ABSTRACT ISTRING[150](Stock) MATERIALIZED INDEXED MATCH CHARWIDTH 20;

stockGroup (stock) = ABSTRACT StockGroup (Stock) MATERIALIZED INDEXED;
nameStockGroup 'Группа' (Stock stock) = name(stockGroup (stock));

legalEntity (stock) = ABSTRACT LegalEntity (Stock) MATERIALIZED INDEXED;
nameLegalEntity 'Компания' (Stock stock) = name(legalEntity(stock));
fullNameLegalEntity 'Компания' (Stock st)= fullName(legalEntity(st));

idLegalEntity 'Компания' (Stock stock) = id(legalEntity(stock));

countStock 'Кол-во складов компании' = GROUP SUM 1 BY legalEntity(Stock stock) MATERIALIZED;

quantityDaysCloseOrders 'Срок автоматического закрытия заказов' = ABSTRACT INTEGER(Stock) MATERIALIZED;
autoCloseOrders 'Автоматически закрывать заказы' = ABSTRACT BOOLEAN (Stock) MATERIALIZED;

isCompany(Stock stock) = isCompany(legalEntity(stock)) MATERIALIZED; // MATERIALIZED так как у компании складов может быть значительно больше чем у других юрлиц, и так статистика будет правильнее  
isSupplier(Stock stock) = isSupplier(legalEntity(stock));
isCustomer(Stock stock) = isCustomer(legalEntity(stock));
isBuyer(Stock stock) = isBuyer(legalEntity(stock));
isSeller(Stock stock) = isSeller(legalEntity(stock));

notCompany(Stock stock) = NOT isCompany(stock);

legalEntityId (STRING[100] stock)= legalEntity(stock(stock));

countCompanyStock 'Кол-во складов' (StockGroup stockGroup) = GROUP
    SUM 1 IF isCompany(Stock stock)
    AND isParent(stockGroup(stock), stockGroup) MATERIALIZED;

countSupplierStock 'Кол-во складов' (StockGroup stockGroup) = GROUP
    SUM 1 IF isSupplier(Stock stock)
    AND isParent(stockGroup(stock), stockGroup) MATERIALIZED;

countCustomerStock 'Кол-во складов' (StockGroup stockGroup) = GROUP
    SUM 1 IF isCustomer(Stock stock)
    AND isParent(stockGroup(stock), stockGroup) MATERIALIZED;

in 'Отм.' (LegalEntity legalEntity, Stock stock) = legalEntity(stock) == legalEntity;
isDefault 'Свой склад' (LegalEntity legalEntity, Stock stock) = legalEntity(stock) == legalEntity;

default 'По умолч.' = DATA BOOLEAN (Stock); 
dataDefaultStock = GROUP AGGR Stock stock WHERE default(stock) BY legalEntity(stock);

countStocks 'Количество складов' (LegalEntity legalEntity) = GROUP SUM 1 IF in(legalEntity, Stock stock);
minStock 'Первый склад' (LegalEntity legalEntity)= GROUP MIN Stock stock IF in(legalEntity, stock);

defaultStock 'Склад по умолчанию' (LegalEntity l) = OVERRIDE dataDefaultStock(l), minStock(l) IF countStocks(l) == 1;

META deriveDocumentLegalEntityDefaultStock(cls, property, form)
    WHEN LOCAL FORMS form CHANGED(property(cls o)) AND NOT CHANGED(property##Stock(o)) AND NOT in(property(o), property##Stock(o)) DO {
        property##Stock(o) <- defaultStock(property(o));
    }
END


currency (Stock stock) = currency(legalEntity(stock)) MATERIALIZED;
language (Stock stock) = language(legalEntity(stock)) MATERIALIZED;

// ------------------------------------ объединение организаций -------------------------- //

replace(LegalEntity l, LegalEntity o) + { 
    legalEntity(Stock stock) <- o WHERE legalEntity(stock) == l;
} 

// ------------------------------------ объединение складов -------------------------- //

in 'Отм.' = DATA LOCAL BOOLEAN (Stock);
countInStock = GROUP SUM 1 IF in(Stock Stock);
namesStocks 'Наименования' () = GROUP CONCAT name(Stock d) IF in(d), ', ' ORDER d CHARWIDTH 50;

FORM confirmReplaceStock 'Объединяемые склады'
    OBJECTS stock = Stock PANEL 

    OBJECTS s = Stock  
    PROPERTIES(s) READONLY name   
    FILTERS s==stock

    OBJECTS s2 = Stock
    PROPERTIES(s2) in
    PROPERTIES(s2) READONLY name
    FILTERS in(s2)
;

DESIGN confirmReplaceStock {
    REMOVE BOX(stock);
    NEW splitContainer{
        fill = 1;
        MOVE BOX(s){
            caption = 'Основной склад';
        }
        MOVE BOX(s2){
            caption = 'Удаляемый склад';
        }           
    }
    MOVE TOOLBARBOX;
}

replace  ABSTRACT LIST ( Stock, Stock);

replace 'Объединить'(Stock stock)  {   
    DIALOG confirmReplaceStock OBJECTS s = stock DO {    
        FOR in(Stock s) AND stock IS Stock AND NOT isCompany(s) AND NOT isCompany(stock) DO {
            IF s != stock THEN {
                replace(s, stock);
                in(s) <- NULL;
                DELETE s;            
            } ELSE {
                MESSAGE 'Выделенный склад не может совпадать с объединяемым и не должен являться складом собственной компанией';
            }
        }
        apply();
    }
    in(Stock s) <- NULL;       
} CONFIRM;

dataStock = DATA Stock (LegalEntity);
stock(LegalEntity legalEntity) = OVERRIDE dataStock(legalEntity) IF active(legalEntity), [ GROUP MIN Stock stock BY legalEntity(stock)](legalEntity) MATERIALIZED;

primaryLegalEntity 'Основной' (Stock stock) = stock(legalEntity(stock)) == stock;
changePrimary(LegalEntity legalEntity, Stock stock)  { 
    INPUT b = BOOLEAN DO
        IF b THEN
            dataStock(legalEntity) <- stock;
}

FORM confirmReplaceStockLegalEntity 'Объединяемые склады'
    OBJECTS l = LegalEntity PANEL 
    OBJECTS l2 = LegalEntity PANEL 

    OBJECTS s = Stock  
    PROPERTIES(s) primaryLegalEntity ON CHANGE changePrimary(l, s)   
    PROPERTIES(s) READONLY name    
    FILTERS l==legalEntity(s)

    OBJECTS s2 = Stock
    PROPERTIES(s2) in
    PROPERTIES(s2) READONLY name
    FILTERS in(s2), 
            l2==legalEntity(s2)
;

DESIGN confirmReplaceStockLegalEntity {
    REMOVE BOX(l);
    REMOVE BOX(l2);
    NEW splitContainer{
        fill = 1;
        MOVE BOX(s){
            caption = 'Основной склад';
        }
        MOVE BOX(s2){
            caption = 'Удаляемый склад';
        }           
    }
    MOVE TOOLBARBOX;
}

preReplace(LegalEntity l, LegalEntity o) + { 
    in(Stock s) <- TRUE WHERE legalEntity(s) == l;
    DIALOG confirmReplaceStockLegalEntity OBJECTS l=o, l2=l DO {        
        FOR in(Stock s) AND l==legalEntity(s) AND legalEntity(Stock stock) == o AND primaryLegalEntity(stock) AND NOT isCompany(s) AND NOT isCompany(stock) DO {
            IF s != stock THEN {
                replace(s, stock);
                in(s) <- NULL;
                DELETE s;            
            } ELSE {
                MESSAGE 'Выделенный склад не может совпадать с объединяемым и не должен являться складом собственной компанией';
            }
        }   
    }
    in(Stock s) <- NULL;       
}

EXTEND CLASS Stock : POI;

name[POI](Stock poi) += name(poi) IF poi IS Stock;

overNameCountry = ABSTRACT ISTRING[50] (Stock);
country (Stock stock) = country(legalEntity(stock)) MATERIALIZED;
nameCountry 'Страна' (Stock stock) = OVERRIDE overNameCountry(stock), name(country(stock));
nameCountry (Stock poi) += nameCountry(poi);

address 'Адрес' (stock) = ABSTRACT ISTRING[150] (Stock) MATERIALIZED CHARWIDTH 30;
mainAddress (Stock poi) += address(poi);

email 'E-mail для заказов' (stock) = ABSTRACT STRING[300] (Stock) MATERIALIZED CHARWIDTH 30;

//latitudeStock 'Координата X' = DATA NUMERIC[10,5](Stock);
//longitudeStock 'Координата Y' = DATA NUMERIC[10,5](Stock);

//latitudePOI(stock) += latitudeStock(stock);
//longitudePOI(stock) += longitudeStock(stock);

TABLE stockGroupStock (StockGroup, Stock);
extraStockGroup = ABSTRACT StockGroup (Stock) MATERIALIZED;
nameExtraStockGroup 'Направление деятельности' (Stock s) = name(extraStockGroup(s)) CHARWIDTH 20;
idExtraStockGroup 'Код направления деятельности' (Stock s) = id(extraStockGroup(s));
isParent (StockGroup stockGroup, Stock stock) = isParent(stockGroup(stock), stockGroup) OR isParent(extraStockGroup(stock), stockGroup) MATERIALIZED;
countStocks (StockGroup stockGroup) = GROUP SUM 1 IF isParent(stockGroup, Stock stock) MATERIALIZED;

GROUP committee 'Комиссии' : public;
GROUP responsibility 'Ответственные лица' : public;
GROUP bookkeeping 'Учет и цены' : public;

// Неактивный
inactive 'Неактивный' = ABSTRACT BOOLEAN (Stock);
active 'Активный' (Stock st) = st IS Stock AND NOT inactive(st) MATERIALIZED;

// -------------------------------------- Регион ------------------------------- //

CLASS Region 'Регион';
TABLE region (Region);

@defineExternalizable(region, STRING[100]);

name 'Наименование' = DATA ISTRING[100](Region) CHARWIDTH 20;
regionName(string) = GROUP NAGGR Region region WHERE region IS Region BY name(region);

region 'Регион' (stock) = ABSTRACT Region (Stock) MATERIALIZED;
nameRegion 'Регион' (Stock stock)= name(region(stock)) CHARWIDTH 20;

region 'Регион' (stockGroup) = ABSTRACT Region (StockGroup) MATERIALIZED;
nameRegion 'Регион' (StockGroup stockGroup)= name(region(stockGroup)) CHARWIDTH 20;

FORM region 'Регион'
    OBJECTS r=Region PANEL
    PROPERTIES(r) name
    EDIT Region OBJECT r
;

FORM regions 'Регионы'
    OBJECTS r=Region
    PROPERTIES(r) READONLY name
    PROPERTIES(r) NEWSESSION NEW, EDIT, DELETE 
    LIST Region OBJECT r
;
DESIGN regions { BOX { size = (600, 400); } }

// ----------------------------------------- Формы --------------------------------- //

FORM stocks 'Склады'

    TREE stockTree a = BPSTRING[3], sg = StockGroup PARENT parent(sg)
    PROPERTIES READONLY VALUE(a), sgTreeName = name(sg)
    ORDERS sgTreeName
    FILTERS stringEqualsAll(a)

    OBJECTS s = Stock
    PROPERTIES(s) READONLY id, stockName = name, nameLegalEntity, nameCountry, address, email
    ORDERS stockName
    FILTERS isParent(sg, s) OR (s IS Stock AND NOT sg) 

    FILTERGROUP inactiveStock FILTER 'Активный' active(s) 'ctrl F10' DEFAULT    

    LIST Stock OBJECT s
;

DESIGN stocks {
    BOX {
        size = (1024, 768);

        NEW topContainer {
            horizontal = TRUE;
            fill = 1;

            MOVE BOX(TREE stockTree) {
                caption = 'Склады';
                width = 70;
            }

            MOVE BOX(s) {
                fill = 3;
                GRID(s) {
                    defaultComponent = TRUE;
                    width = 200;
                }
                PROPERTY(stockName){
                    charWidth = 35;
                }
            }
        }

        MOVE TOOLBARBOX;
    }
}

FORM dialogStocksMobile 'Выбор склада'
    OBJECTS s = Stock
    PROPERTIES(s) READONLY name
    ORDERS name(s) 
;

DESIGN dialogStocksMobile {
    OBJECTS {
        MOVE GRID(s);
        REMOVE TOOLBARBOX(s);
    }
}

FORM dialogMultiStocks 'Выбор складов'
    TREE stockTree a = BPSTRING[3], sg = StockGroup PARENT parent(sg)
    PROPERTIES READONLY VALUE(a), name(sg)
    ORDERS name(sg)
    FILTERS stringEqualsAll(a)

    OBJECTS s = Stock
    PROPERTIES (s) in
    PROPERTIES(s) READONLY id, name
    ORDERS name(s)
    FILTERS isParent(sg, s) OR (s IS Stock AND NOT sg),
            isCompany(s),
            countCompanyStock(sg)

    FILTERGROUP inactiveStock FILTER 'Активный' active(s) 'F6' DEFAULT    
;

DESIGN dialogMultiStocks {
    BOX {
        size = (1024, 768);

        NEW topContainer {
            horizontal = TRUE;
            fill = 1;

            MOVE BOX(TREE stockTree) {
                caption = 'Склады';
            }

            MOVE BOX(s) {
                fill = 3;
                GRID(s) {
                    defaultComponent = TRUE;
                }
                PROPERTY(name(s)){
                    charWidth = 35;
                }
            }
        }

        MOVE TOOLBARBOX;
    }
}

// ---------------------------------------------- Макросы для документов ------------------------------------------------- //

// Склады
META defineDocumentHeaderStock (object, stockClass, stockCaption, prefix)
    @defineDocumentHeaderStockInner (object, stockClass, ###stockClass, stockCaption, prefix);
END

META defineDocumentHeaderStockInner (object, stockClass, stockClassUpper, stockCaption, prefix)
    prefix###stockClass = DATA stockClassUpper(###object);
    name###prefix###stockClass stockCaption (###object object) = name(prefix###stockClass(object)) IN documentHeader
            CHARWIDTH 20;
    fullName###prefix###stockClass stockCaption (###object object) = fullName(prefix###stockClass(object)) IN documentHeader
            CHARWIDTH 20;
    replace(###stockClass s, ###stockClass o) + { prefix###stockClass(###object object) <- o WHERE prefix###stockClass(object) == s;}             
            
    prefix###legalEntityStock (###object object) = legalEntity(prefix###stockClass(object));
    name###prefix##LegalEntityStock 'Компания ('###stockCaption###')' (###object object) = name(prefix###legalEntityStock (object));
    fullName###prefix##LegalEntityStock 'Компания ('###stockCaption###') полное наим-ие' (###object object) = fullName(prefix###legalEntityStock (object));       
    address###prefix##LegalEntityStock 'Адрес компании ('###stockCaption###')' (###object object) = address(prefix###legalEntityStock (object));

    address###prefix##Stock 'Адрес ('###stockCaption###')' (###object object) = address(prefix###stockClass(object));

    prefix###country (###object object) = country(prefix###stockClass(object));
    
    //для CONSTRAINT 
    name###prefix###stockClass##Id stockCaption (###object object) = prevName(prefix###stockClass(object)) IN id;    
END

META defineDocumentAbstractHeaderStock (object, stockClass, stockCaption, prefix)
    @defineDocumentAbstractHeaderStockInner(object, stockClass, ###stockClass, stockCaption, prefix);
END

META defineDocumentAbstractHeaderStockInner (object, stockClass, stockClassUpper, stockCaption, prefix)
    prefix###stockClass = ABSTRACT stockClassUpper(###object) MATERIALIZED INDEXED;
    name###prefix###stockClass stockCaption (###object object) = name(prefix###stockClass(object)) IN documentHeader
            CHARWIDTH 20;
    fullName###prefix###stockClass stockCaption (###object object) = fullName(prefix###stockClass(object)) IN documentHeader
            CHARWIDTH 20;
            
    prefix###legalEntityStock (###object object) = legalEntity(prefix###stockClass(object));
    name###prefix##LegalEntityStock 'Компания ('###stockCaption###')' (###object object) = name(prefix###legalEntityStock (object));
    fullName###prefix##LegalEntityStock 'Компания ('###stockCaption###') полное наим-ие' (###object object) = fullName(prefix###legalEntityStock (object));
    address###prefix##LegalEntityStock 'Адрес компании ('###stockCaption###')' (###object object) = address(prefix###legalEntityStock (object));
    address###prefix##Stock 'Адрес ('###stockCaption###')' (###object object) = address(prefix###stockClass(object));

    prefix###country (###object object) = country(prefix###stockClass(object));
END
META defineDocumentInterfaceHeaderStock (object, stockClass, stockCaption, prefix)
    @defineDocumentAbstractHeaderStock (object, stockClass, stockCaption, prefix);
    @defineDocumentHeaderStock (user###object, stockClass, stockCaption, prefix);
    prefix###stockClass (User###object object) += prefix###stockClass(object);
END

META defineDocumentHeaderStock (object, stockClass, stockCaption)
    @defineDocumentHeaderStock(object, stockClass, stockCaption, );
END
META defineDocumentAbstractHeaderStock (object, stockClass, stockCaption)
    @defineDocumentAbstractHeaderStock(object, stockClass, stockCaption, );
END
META defineDocumentInterfaceHeaderStock (object, stockClass, stockCaption)
    @defineDocumentInterfaceHeaderStock(object, stockClass, stockCaption, );
END

META defineDocumentDetailStock (object, detail, stockClass, stockProp, stockCaption)
    stockProp (###detail idetail) = stockProp(object(idetail));
    name###stockProp stockCaption (###detail idetail) = name(stockProp(idetail)) CHARWIDTH 10;
    prevName###stockProp stockCaption (###detail idetail) = prevName(stockProp(idetail)) CHARWIDTH 10 IN id;
    fullName###stockProp stockCaption (###detail idetail) = fullName(stockProp(idetail)) CHARWIDTH 10;    
    country###stockProp (###detail idetail) = country(stockProp(idetail));
    legalEntity###stockProp (###detail idetail) = legalEntity(stockProp(idetail));
    nameLegalEntity###stockProp 'Компания ('###stockCaption###')' (###detail idetail) = name(legalEntity###stockProp (idetail));
    fullNameLegalEntity###stockProp 'Компания ('###stockCaption###') полное наим-ие' (###detail idetail) = fullName(legalEntity###stockProp (idetail));
END
META defineDocumentDetailStock (object, stockProp, stockCaption)
    @defineDocumentDetailStock (object, object##Detail, stock, stockProp, stockCaption);
END

META defineDocumentDetailDataStock (object, detail, stockClass, stockProp, stockCaption)
    @defineDocumentDetailDataStockInner (object, detail, stockClass, ###stockClass, stockProp, stockCaption);
END

META defineDocumentDetailDataStockInner (object, detail, stockClass, stockClassUpper, stockProp, stockCaption)
    stockProp (###detail idetail) = stockProp(object(idetail)) MATERIALIZED;
    name###stockProp stockCaption (###detail idetail) = name(stockProp(idetail)) CHARWIDTH 10;
    prevName###stockProp stockCaption (###detail idetail) = prevName(stockProp(idetail)) IN id CHARWIDTH 10;
    fullName###stockProp stockCaption (###detail idetail) = fullName(stockProp(idetail)) CHARWIDTH 10;         
    country###stockProp (###detail idetail) = country(stockProp(idetail));
    legalEntity###stockProp (###detail idetail) = legalEntity(stockProp(idetail));
    nameLegalEntity###stockProp 'Компания ('###stockCaption###')' (###detail idetail) = name(legalEntity###stockProp (idetail));
    fullNameLegalEntity###stockProp 'Компания ('###stockCaption###') полное наим-ие' (###detail idetail) = fullName(legalEntity###stockProp (idetail));
    
END

META defineDocumentAbstractDetailDataStock (object, detail, stockClass, stockProp, stockCaption)
    @defineDocumentAbstractDetailDataStockInner (object, detail, stockClass, ###stockClass, stockProp, stockCaption);
END

META defineDocumentAbstractDetailDataStockInner (object, detail, stockClass, stockClassUpper, stockProp, stockCaption)
    stockProp (###detail idetail) = stockProp(object(idetail)) MATERIALIZED INDEXED;
    name###stockProp stockCaption (###detail idetail) = name(stockProp(idetail)) CHARWIDTH 10;
    fullName###stockProp stockCaption (###detail idetail) = fullName(stockProp(idetail)) CHARWIDTH 10;      
    country###stockProp (###detail idetail) = country(stockProp(idetail));
    legalEntity###stockProp (###detail idetail) = legalEntity(stockProp(idetail));
    nameLegalEntity###stockProp 'Компания ('###stockCaption###')' (###detail idetail) = name(legalEntity###stockProp (idetail));
    fullNameLegalEntity###stockProp 'Компания ('###stockCaption###')' (###detail idetail) = fullName(legalEntity###stockProp (idetail));
    
END
META defineDocumentInterfaceDetailDataStock (object, detail, stockClass, stockProp, stockCaption)
    @defineDocumentAbstractDetailDataStock(object, detail, stockClass, stockProp, stockCaption);
    @defineDocumentDetailDataStock(user###object, user###detail, stockClass, stockProp, stockCaption);
END

META defineDocumentDetailDataStock (object, stockClass, stockProp, stockCaption)
    @defineDocumentDetailDataStock (object, object##Detail, stockClass, stockProp, stockCaption);
END
META defineDocumentAbstractDetailDataStock (object, stockClass, stockProp, stockCaption)
    @defineDocumentAbstractDetailDataStock (object, object##Detail, stockClass, stockProp, stockCaption);
END
META defineDocumentInterfaceDetailDataStock (object, stockClass, stockProp, stockCaption)
    @defineDocumentInterfaceDetailDataStock (object, object##Detail, stockClass, stockProp, stockCaption);
END

META defineDocumentStock (object, stockClass, stockCaption, prefix)
    @defineDocumentHeaderStock(object, stockClass, stockCaption, prefix);
    @defineDocumentDetailStock(object, prefix###stockClass, stockCaption);
END
META defineDocumentAbstractStock (object, stockClass, stockCaption, prefix)
    @defineDocumentAbstractHeaderStock(object, stockClass, stockCaption, prefix);
    @defineDocumentDetailStock(object, prefix###stockClass, stockCaption);
END
META defineDocumentInterfaceStock (object, stockClass, stockCaption, prefix)
    @defineDocumentInterfaceHeaderStock(object, stockClass, stockCaption, prefix);
    @defineDocumentDetailStock(object, prefix###stockClass, stockCaption);
    @defineDocumentDetailStock(user###object, prefix###stockClass, stockCaption);
END

META defineDocumentDataStock (object, stockClass, stockCaption, prefix)
    @defineDocumentHeaderStock(object, stockClass, stockCaption, prefix);
    @defineDocumentDetailDataStock(object, stockClass, prefix###stockClass, stockCaption);
END
META defineDocumentAbstractDataStock (object, stockClass, stockCaption, prefix)
    @defineDocumentAbstractHeaderStock(object, stockClass, stockCaption, prefix);
    @defineDocumentAbstractDetailDataStock(object, stockClass, prefix###stockClass, stockCaption);
END
META defineDocumentInterfaceDataStock (object, stockClass, stockCaption, prefix)
    @defineDocumentInterfaceHeaderStock(object, stockClass, stockCaption, prefix);
    @defineDocumentInterfaceDetailDataStock(object, stockClass, prefix###stockClass, stockCaption);
END

META defineDocumentStock (object, stockClass, stockCaption)
    @defineDocumentStock(object, stockClass, stockCaption, );
END
META defineDocumentAbstractStock (object, stockClass, stockCaption)
    @defineDocumentAbstractStock(object, stockClass, stockCaption, );
END
META defineDocumentInterfaceStock (object, stockClass, stockCaption)
    @defineDocumentInterfaceStock(object, stockClass, stockCaption, );
END

META defineDocumentDataStock (object, stockClass, stockCaption)
    @defineDocumentDataStock(object, stockClass, stockCaption, );
END
META defineDocumentAbstractDataStock (object, stockClass, stockCaption)
    @defineDocumentAbstractDataStock(object, stockClass, stockCaption, );
END
META defineDocumentInterfaceDataStock (object, stockClass, stockCaption)
    @defineDocumentInterfaceDataStock(object, stockClass, stockCaption, );
END

// ---------------------------------------------- Агрегированные документы -------------------------------------------- //

// Склады
META defineDocumentAggregationHeaderStockPrefix (primObject, aggrObject, stockClass, stockProp, stockCaption, prefixP, prefixA)
    stockProp###stockClass (###aggrObject object) = stockProp###stockClass(primObject(object)) MATERIALIZED;
    name###stockProp###stockClass stockCaption (###aggrObject object) = name(stockProp###stockClass(object)) CHARWIDTH 20;
    fullName###stockProp###stockClass stockCaption (###aggrObject object) = fullName(stockProp###stockClass(object)) CHARWIDTH 20;    
END
META defineDocumentAggregationHeaderStock (primObject, aggrObject, stockClass, stockProp, stockCaption)
    @defineDocumentAggregationHeaderStockPrefix (primObject, aggrObject, stockClass, stockProp, stockCaption, , );
END

META defineDocumentAggregationDetailStockPrefix (primObject, aggrObject, stockProp, stockCaption, prefixP, prefixA)
    stockProp (###aggrObject##Detail detail) = stockProp(primObject##Detail(detail)) MATERIALIZED;
END
META defineDocumentAggregationDetailStock (primObject, aggrObject, stockProp, stockCaption)
    @defineDocumentAggregationDetailStockPrefix(primObject, aggrObject, stockProp, stockCaption, , );
END

META defineDocumentAggregationStockPrefix (primObject, aggrObject, stockProp, stockCaption, prefixP, prefixA)
    @defineDocumentAggregationHeaderStockPrefix(primObject, aggrObject, stock, stockProp, stockCaption, prefixP, prefixA);
    @defineDocumentAggregationDetailStockPrefix(primObject, aggrObject, stockProp###stock, stockCaption, prefixP, prefixA);
END
META defineDocumentAggregationStock (primObject, aggrObject, stockProp, stockCaption)
    @defineDocumentAggregationStockPrefix(primObject, aggrObject, stockProp, stockCaption, , );
END

// ---------------------------------- Диалоги по выбору складов поставщиков/компаний/покупателей когда есть организация --------------------------- //

FORM stocksCompany 'Собственные склады'
    TREE stockTree a = BPSTRING[3], sg = StockGroup PARENT parent(sg)
    PROPERTIES READONLY VALUE(a), sgTreeName = name(sg)
    ORDERS sgTreeName
    FILTERS stringEqualsAll(a)

    OBJECTS s = Stock
    PROPERTIES(s) READONLY id, stockName = name, nameLegalEntity, nameCountry, address
    PROPERTIES(s) NEWSESSION EDIT
    ORDERS stockName
    FILTERS isParent(sg, s) OR (s IS Stock AND NOT sg),
            isCompany(s)
    FILTERGROUP inactiveStock FILTER 'Активный' active(s) 'ctrl F10' DEFAULT        
;

DESIGN stocksCompany {
    BOX {
        size = (1024, 768);

        NEW topContainer {
            horizontal = TRUE;
            fill = 1;

            MOVE BOX(TREE stockTree) {
                caption = 'Склады';
            }

            MOVE BOX(s) {
                fill = 3;
                GRID(s) {
                    defaultComponent = TRUE;
                }
            }
        }

        MOVE TOOLBARBOX;
    }
}

FORM companyStocks 'Склады'
    OBJECTS l = LegalEntity PANEL NULL

    TREE stockTree a = BPSTRING[3], sg = StockGroup PARENT parent(sg)
    PROPERTIES READONLY VALUE(a), sgTreeName = name(sg)
    ORDERS sgTreeName
    FILTERS stringEqualsAll(a)

    OBJECTS s = Stock
    PROPERTIES(s) READONLY id, stockName = name, nameLegalEntity, nameCountry, address
    PROPERTIES(s) NEWSESSION EDIT
    ORDERS stockName
    FILTERS isParent(sg, s) OR (s IS Stock AND NOT sg),
            in(l,s) OR NOT l,
            isCompany(s)
    FILTERGROUP inactiveStock FILTER 'Активный' active(s) 'ctrl F10' DEFAULT        
;

DESIGN companyStocks {
    BOX {
        size = (1024, 768);

        NEW topContainer {
            horizontal = TRUE;
            fill = 1;

            MOVE BOX(TREE stockTree) {
                caption = 'Склады';
            }

            MOVE BOX(s) {
                fill = 3;
                GRID(s) {
                    defaultComponent = TRUE;
                }
            }
        }

        MOVE TOOLBARBOX;
    }
}

backgroundSupplierStocks 'Цвет' = ABSTRACT CASE COLOR (Stock);

FORM supplierStocks 'Склады'
    OBJECTS l = LegalEntity PANEL NULL

    TREE stockTree a = BPSTRING[3], sg = StockGroup PARENT parent(sg)
    PROPERTIES READONLY VALUE(a), sgTreeName = name(sg)
    ORDERS sgTreeName
    FILTERS stringEqualsAll(a)

    OBJECTS s = Stock
    PROPERTIES(s) READONLY BACKGROUND backgroundSupplierStocks(s) id, stockName = name, nameLegalEntity, nameCountry, address
    PROPERTIES(s) NEWSESSION EDIT
    ORDERS stockName
    FILTERS isParent(sg, s) OR (s IS Stock AND NOT sg),
            in(l,s) OR NOT l,
            isSupplier(s)
    FILTERGROUP inactiveStock FILTER 'Активный' active(s) 'ctrl F10' DEFAULT        
;

DESIGN supplierStocks {
    BOX {
        size = (1024, 768);

        NEW topContainer {
            horizontal = TRUE;
            fill = 1;

            MOVE BOX(TREE stockTree) {
                caption = 'Склады';
            }

            MOVE BOX(s) {
                fill = 3;
                GRID(s) {
                    defaultComponent = TRUE;
                }
            }
        }

        MOVE TOOLBARBOX;
    }
}

backgroundCustomerStocks 'Цвет' = ABSTRACT CASE COLOR (Stock);

FORM customerStocks 'Склады'
    OBJECTS l = LegalEntity PANEL NULL

    TREE stockTree a = BPSTRING[3], sg = StockGroup PARENT parent(sg)
    PROPERTIES READONLY VALUE(a), sgTreeName = name(sg)
    ORDERS sgTreeName
    FILTERS stringEqualsAll(a)

    OBJECTS s = Stock
    PROPERTIES(s) READONLY BACKGROUND backgroundCustomerStocks(s) id, stockName = name, nameLegalEntity, nameCountry, address
    PROPERTIES(s) NEWSESSION EDIT
    ORDERS stockName
    FILTERS isParent(sg, s) OR (s IS Stock AND NOT sg),
            in(l,s) OR NOT l,
            isCustomer(s)
    FILTERGROUP inactiveStock FILTER 'Активный' active(s) 'ctrl F10' DEFAULT        
;

DESIGN customerStocks {
    BOX {
        size = (1024, 768);

        NEW topContainer {
            horizontal = TRUE;
            fill = 1;

            MOVE BOX(TREE stockTree) {
                caption = 'Склады';
            }

            MOVE BOX(s) {
                fill = 3;
                GRID(s) {
                    defaultComponent = TRUE;
                }
                PROPERTY(stockName){
                    charWidth = 40;
                }
            }
        }

        MOVE TOOLBARBOX;
    }
}


META defineDocumentDialogStockEx(objectClass, filter, prefix, dataProp)
    change###dataProp###prefix##Stock###filter(###objectClass o)  { 
        DIALOG filter###stocks OBJECTS l = prefix(o), s = dataProp###prefix##Stock(o) CHANGE;
    }
END

META defineDocumentDialogStock(objectClass, filter, prefix, dataProp)
    change###dataProp###prefix##Stock###filter###over ABSTRACT (###objectClass);
    change###dataProp###prefix##Stock###filter(###objectClass o)  { 
        DIALOG filter###stocks OBJECTS l = prefix(o) NULL, s = dataProp###prefix##Stock(o) CHANGE LIST name(s) DO {
            IF NOT prefix(o) THEN prefix(o) <- legalEntity(dataProp###prefix##Stock(o));
            change###dataProp###prefix##Stock###filter###over(o);
        }
    }
END
META defineDocumentDialogStock(objectClass, filter, prefixA, prefixB, dataProp)
    change###prefixA##Stock###filter(###objectClass o)  { 
        DIALOG filter###stocks OBJECTS l = filter(o) NULL, s = prefixA##Stock(o) CHANGE LIST name(s) DO {
            IF NOT filter(o) THEN filter(o) <- legalEntity(prefixA##Stock(o));
        }
    }
END

META defineDocumentDialogSupplierCustomerStock(objectClass, supplierFilter, customerFilter)
    @defineDocumentDialogStock(objectClass, supplierFilter, supplier, );
    @defineDocumentDialogStock(objectClass, customerFilter, customer, );
END

// -------- Диалоги по выбору складов поставщиков/компаний/покупателей когда нет организация ----------- //

FORM companysStock 'Склады'

    TREE stockTree a = BPSTRING[3], sg = StockGroup PARENT parent(sg)
    PROPERTIES READONLY VALUE(a), sgTreeName = name(sg)
    ORDERS sgTreeName
    FILTERS stringEqualsAll(a)

    OBJECTS s = Stock
    PROPERTIES(s) READONLY id, stockName = name, nameLegalEntity, nameCountry, address
    PROPERTIES(s) NEWSESSION EDIT
    ORDERS stockName
    FILTERS isParent(sg, s) OR (s IS Stock AND NOT sg),
            isCompany(s), accessCompany(currentUser(), legalEntity(s)) OR NOT countAccessCompany(currentUser())

    FILTERGROUP inactiveStock FILTER 'Активный' active(s) 'ctrl F10' DEFAULT        
;

DESIGN companysStock {
    BOX {
        size = (1024, 768);

        NEW topContainer {
            horizontal = TRUE;
            fill = 1;

            MOVE BOX(TREE stockTree) {
                caption = 'Склады';
            }

            MOVE BOX(s) {
                fill = 3;
                GRID(s) {
                    defaultComponent = TRUE;
                }
            }
        }

        MOVE TOOLBARBOX;
    }
}

FORM suppliersStock 'Склады'

    TREE stockTree a = BPSTRING[3], sg = StockGroup PARENT parent(sg)
    PROPERTIES READONLY VALUE(a), sgTreeName = name(sg)
    ORDERS sgTreeName
    FILTERS stringEqualsAll(a)

    OBJECTS s = Stock
    PROPERTIES(s) READONLY id, stockName = name, nameLegalEntity, nameCountry, address
    PROPERTIES(s) NEWSESSION EDIT
    ORDERS stockName
    FILTERS isParent(sg, s) OR (s IS Stock AND NOT sg),
            isSupplier(s)
            
    FILTERGROUP inactiveStock FILTER 'Активный' active(s) 'ctrl F10' DEFAULT        
;

DESIGN suppliersStock {
    BOX {
        size = (1024, 768);

        NEW topContainer {
            horizontal = TRUE;
            fill = 1;

            MOVE BOX(TREE stockTree) {
                caption = 'Склады';
            }

            MOVE BOX(s) {
                fill = 3;
                GRID(s) {
                    defaultComponent = TRUE;
                }
            }
        }

        MOVE TOOLBARBOX;
    }
}

FORM customersStock 'Склады'

    TREE stockTree a = BPSTRING[3], sg = StockGroup PARENT parent(sg)
    PROPERTIES READONLY VALUE(a), sgTreeName = name(sg)
    ORDERS sgTreeName
    FILTERS stringEqualsAll(a)

    OBJECTS s = Stock
    PROPERTIES(s) READONLY id, stockName = name, nameLegalEntity, nameCountry, address
    PROPERTIES(s) NEWSESSION EDIT
    ORDERS stockName
    FILTERS isParent(sg, s) OR (s IS Stock AND NOT sg),
            isCustomer(s)
      
    FILTERGROUP inactiveStock FILTER 'Активный' active(s) 'ctrl F10' DEFAULT        
;

DESIGN customersStock {
    BOX {
        size = (1024, 768);

        NEW topContainer {
            horizontal = TRUE;
            fill = 1;

            MOVE BOX(TREE stockTree) {
                caption = 'Склады';
            }

            MOVE BOX(s) {
                fill = 3;
                GRID(s) {
                    defaultComponent = TRUE;
                }
                PROPERTY(stockName){
                    charWidth = 40;
                }
            }
        }

        MOVE TOOLBARBOX;
    }
}

META defineDocumentDialogStocks(objectClass, stockClass, filter, prefix, dataProp)
    change###stockClass###filter(###objectClass o)  { 
        DIALOG filter##s###stock OBJECTS s = stockClass(o) CHANGE LIST name(s);
    }
END

// ------------------------------------------ Расширение формы организаций ---------------------------- //

EXTEND FORM legalEntity
    TREE stockTree b=BPSTRING[3], sg = StockGroup PARENT parent(sg)
    PROPERTIES READONLY VALUE(b), sgTreeName = name(sg)
    ORDERS sgTreeName
    FILTERS stringEqualsAll(b)

    OBJECTS st=Stock
    PROPERTIES(st) in
    PROPERTIES(st) READONLYIF isReadonly() name, id SHOWIF showIDs(), nameLegalEntity, nameCountry, address
    PROPERTIES(st) TOOLBAR SHOWIF isDefault(l,st) EDIT, DELETE, replace SHOWIF notCompany(st) 
    FILTERS isParent(sg, st) OR (st IS Stock AND NOT sg)
    FILTERS in(l, st)
    FILTERGROUP inactiveStock FILTER 'Активный' active(st) 'ctrl F10' DEFAULT
    
    OBJECTS s=LegalEntity GRID
    PROPERTIES(s) READONLY name  SHOWIF isCustomer(l)
    ORDERS name(s)
    FILTERGROUP sinactiveLegalEntity FILTER 'Активная' active(s) 'shift F10' DEFAULT

    OBJECTS c=LegalEntity GRID
    PROPERTIES(c) READONLY name SHOWIF isSupplier(l)
    ORDERS name(c)
    FILTERGROUP cinactiveLegalEntity FILTER 'Активная' active(c) 'shift F10' DEFAULT
;

DESIGN legalEntity{
    extendContainer {
        NEW stockContainer {
            caption = 'Склады';
            horizontal = TRUE;
            MOVE BOX(TREE stockTree) {
                fill = 1;
                caption = 'Группа складов';
            }
            MOVE BOX(st) {
                fill = 3;
            }
        }

        NEW agreementPurchaseContainer {
            caption = 'Закупка';
            horizontal = TRUE;
            MOVE BOX(s) { caption = 'Поставщики'; }
            NEW docPurchaseContainer {
                fill = 5;
                tabbed = TRUE;
            }
        }

        NEW agreementSaleContainer {
            caption = 'Продажа';
            horizontal = TRUE;
            MOVE BOX(c) { caption = 'Покупатели';}
            NEW docSaleContainer {
                fill = 5;
                tabbed = TRUE;
            }
        }
    }
}

EXTEND FORM legalEntities
    PROPERTIES(l) READONLY countStock
;


//----------------------Отображать на формах списков документы, которые не закрыты---------------//
META defineFilterIsOpened (object, form, obj)   
    EXTEND FORM form
        FILTERGROUP object##filters6 FILTER 'Открыт' isOpened(obj) 'F6' DEFAULT
    ;   
END 



NAVIGATOR {
    NEW FOLDER stockNavigator 'Склад' BEFORE financeNavigator WINDOW toolbar IMAGE 'stock.png' {
        NEW FOLDER stockReports 'Отчеты';
        NEW FOLDER stockMasterData 'Справочники';
    }
}

NAVIGATOR {
    dashboardNavigator {
        NEW FOLDER stockDashboardNavigator 'Склад' {
        }
    }    
}

EXTEND FORM options

    TREE stockTree a = BPSTRING[3], sg = StockGroup PARENT parent(sg)
    PROPERTIES READONLY VALUE(a), name(sg)
    ORDERS name(sg)
    FILTERS stringEqualsAll(a)

    OBJECTS s = Stock
    PROPERTIES(s) READONLY id, name, nameLegalEntity
    ORDERS name(s)
    
    FILTERS isParent(sg, s) OR (s IS Stock AND NOT sg),
            isCompany(s)
    FILTERGROUP inactiveStock FILTER 'Активный' active(s) 'ctrl F10' DEFAULT     
    
;

DESIGN options {
    pane {
        NEW stock {
            caption = 'Склад';
            fill = 1;
            height = 1;
            NEW stock1 {
                lines = 2;
            }
            NEW topContainer {
                horizontal = TRUE;
                fill = 1;            
                
                MOVE BOX(TREE stockTree) {
                    caption = 'Группы складов';
                }
    
                MOVE BOX(s) {
                    fill = 3;
                    GRID(s) {
                        defaultComponent = TRUE;
                    }
                }
            }
        }
    }
}

//---------------- Подсветка отмеченных групп ---------------//
//-- С фильтром
META defineBackgroundNearestBoolean(allProp, property, object1, object2, object2Class, nearestProp, filterProp)

    background###allProp 'Цвет' (###object1 o) = RGB(0,0,0) IF allProp(o);
    
    background###property 'Цвет' (###object1 o, ###object2##Group sg) = IF data###property(o, sg) THEN RGB(0,0,0)
        ELSE RGB(230,248,250) 
        IF (OVERRIDE nearestProp (o, sg), allProp(o) IF sg IS object2Class###group);    
        
    background###property 'Цвет' (###object1 o, ###object2 st) = IF data###property(o, st) AND filterProp(st) THEN RGB(0,0,0)
        ELSE RGB(230,248,250) 
        IF property(o, object2##Group(st)) AND filterProp(st);    
END
META defineBackgroundNearestBoolean(allProp, property, object1, object2, nearestProp, filterProp)

    @defineBackgroundNearestBoolean(allProp, property, object1, object2, ###object2, nearestProp, filterProp); 
END

META lockedObjects(prop,class, NS)
    locked###prop = DATA NS.User (###class);
    lockResult###prop = DATA LOCAL NESTED BOOLEAN ();
    
    lock###prop(###class object)  { 
        NEWSESSION {    
            lockResult###prop() <- NULL;
            APPLY SERIALIZABLE {
                IF NOT object THEN
                    RETURN;
                IF locked###prop(object) THEN {
                    cancel();
                } ELSE {
                    locked###prop(object) <- currentUser();
                    lockResult###prop() <- TRUE;
                }
            }
        }
    }
    
    unlock###prop(###class object)  { 
        NEWSESSION { 
            APPLY locked###prop(object) <- NULL;
        }
    }
    onStarted() + {
        FOR locked###prop(###class c) DO {
            unlock###prop(c);
        }
        
    }
END
META lockedObjects(prop,class)
    @lockedObjects(prop,class,Authentication);
END



META defOnStartMigrate(nm, capt)
    // todo - migration
    nm = DATA BOOLEAN ();
    onStarted() + {
        IF NOT nm() THEN NEWSESSION {
            printToLog('Logic migrate: ' + capt + ' (' + ''##nm##'' + ') - started');
            nm();
            nm() <- TRUE;
            APPLY;
            printToLog('Logic migrate: ' + capt + ' (' + ''##nm##'' + ') - finished');
        }
    }
END
META defOnStartMigrate(nm)
    @defOnStartMigrate(nm, '');
END