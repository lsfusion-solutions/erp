MODULE Store;

REQUIRE System, Utils, Historizable, EmployeeStock, Tax, LegalEntity, Retail, Bank, Cash;

// -------------------------------------- Торговая сеть ------------------------------- //

CLASS ChainStores 'Торговая сеть' : StockGroup;
TABLE chainStores (ChainStores);

@defineExternalizable(chainStores, STRING[100]);

name 'Наименование' = DATA ISTRING[100](ChainStores) IN id;

id(ChainStores g) += id(g);
name(ChainStores group) += name(group) IF group IS ChainStores;

// -------------------------------------- Формат магазина ----------------------------- //

CLASS StoreType 'Формат магазина' : StockGroup;
TABLE storeType (StoreType);

@defineExternalizable(storeType, STRING[100]);

name 'Наименование' = DATA ISTRING[100](StoreType) CHARWIDTH 20;

// Неактивный
inactive 'Неактивный' = DATA BOOLEAN (StoreType);
active 'Активный' (StoreType t) = t IS StoreType AND NOT inactive(t);

id(StoreType g) += id(g);
name(StoreType group) += name(group) IF group IS StoreType;

chainStores = DATA ChainStores (StoreType) NONULL DELETE;
nameChainStores 'Торговая сеть' (StoreType storeType) = name(chainStores(storeType)) IN base;

in(ChainStores chainStores, StoreType storeType) = chainStores(storeType) == chainStores;

parent (StoreType storeType) += chainStores(storeType);

storeType 'Формат магазина по имени и торговой сети' (name, chainStores) = GROUP AGGR StoreType storeType WHERE storeType IS StoreType BY name(storeType), id(chainStores(storeType));

FORM storeType 'Формат магазина'
    OBJECTS t=StoreType PANEL
    PROPERTIES(t) nameChainStores, name, inactive
    EDIT StoreType OBJECT t
;

FORM storeTypes 'Форматы магазинов'
    OBJECTS t=StoreType
    PROPERTIES(t) READONLY nameChainStores, name 
    PROPERTIES(t) NEWSESSION NEW, EDIT, DELETE
    ORDERS name(t)
    LIST StoreType OBJECT t
;
DESIGN storeTypes { BOX { size = (600, 400); } }

FORM chainStores 'Торговая сеть'
    OBJECTS n=ChainStores PANEL
    PROPERTIES(n) name, id SHOWIF showIDs()

    OBJECTS s=StoreType
    PROPERTIES(s) id SHOWIF showIDs(), name, inactive
    PROPERTIES(s) NEW, DELETE GRID
    FILTERS in(n, s)
    FILTERGROUP active
        FILTER 'Активные' active(s) DEFAULT

    EDIT ChainStores OBJECT n
;

FORM chainStoreses 'Торговые сети'
    OBJECTS n=ChainStores 
    PROPERTIES(n) READONLY name, id SHOWIF showIDs()
    PROPERTIES(n) NEWSESSION NEW, EDIT, DELETE
    LIST ChainStores OBJECT n
;

// -------------------------------------- Магазин ------------------------------- //

CLASS Store 'Магазин' : StockGroup, TaxUnit, POI;
TABLE store (Store);

@defineExternalizable(store, STRING[100]);

name 'Наименование' = DATA ISTRING[100](Store) INDEXED IN id;

phone 'Телефон магазина' = DATA STRING[100] (Store) CHARWIDTH 20;

id[StockGroup](Store g) += id(g);
name[StockGroup](Store group) += name(group) IF group IS Store;

legalEntity 'Компания' = DATA LegalEntity (Store) INDEXED NONULL;
nameLegalEntity 'Компания' (Store store) = name(legalEntity(store)) IN base;
fullNameLegalEntity 'Компания' (Store store) = fullName(legalEntity(store));

CONSTRAINT legalEntity(Store store) AND NOT isCompany(legalEntity(store))
    CHECKED BY legalEntity[Store] MESSAGE 'Для магазина выбрана организация, не являющаяся компанией';

bankAccount = DATA Bank.Account (Store);
bankAccount(Store store) <- account(legalEntity(store))
    WHEN CHANGED(legalEntity(store));
numberBankAccount 'Номер счета для инкассаций' = number(bankAccount(Store store));

CONSTRAINT legalEntity(bankAccount(Store store)) != legalEntity(store)
    CHECKED BY bankAccount[Store] MESSAGE 'Организация магазина должна совпадать с организацией расчетного счета';

isCompany(Store store) = isCompany(legalEntity(store));

language (Store store) = language(legalEntity(store));

region = DATA Region (Store);
region(Store sg) += region(sg);
nameRegion 'Регион' (Store store) = name(region(store));

address 'Адрес' = DATA ISTRING[150] (Store);
mainAddress (Store store) += address(store);

email 'E-mail' (warehouse) = DATA STRING[300] (Store) CHARWIDTH 30;

latitude 'Координата X' = DATA NUMERIC[10,5](Store);
longitude 'Координата Y' = DATA NUMERIC[10,5](Store);

chairman = DATA Employee (Store);
nameChairman 'Директор магазина' (Store store) = name[Contact](chairman(store));

openDate 'Дата открытия' = DATA DATE (Store);
closeDate 'Дата закрытия' = DATA DATE (Store);
latitude (Store store) += latitude(store);
longitude (Store store) += longitude(store);

openTime 'Время открытия' = DATA TIME (Store);
closeTime 'Время закрытия' = DATA TIME (Store);

storeType = DATA StoreType (Store) INDEXED AUTOSET;
nameStoreType 'Формат' (Store store) = name(storeType(store)) IN base;

orderNumber 'Порядковый номер магазина' = DATA INTEGER  (Store);

countStore 'Кол-во магазинов' (StoreType storeType) =
    GROUP
    SUM 1 IF storeType(Store store) == storeType;

in (StoreType storeType, Store store) = storeType (store) == storeType;

chainStores (Store store) = chainStores(storeType(store));
nameChainStores 'Торговая сеть' (Store store) = name(chainStores(store)) IN base;

in (ChainStores chainStores, Store store) = chainStores(store) == chainStores;

taxUnitGroup(Store store) += legalEntity(store);
description(Store store) += CONCAT ' ', name(store), address(store);

EXTEND FORM tax
    FILTERGROUP store 
        FILTER 'Магазины' u IS Store 'F9' DEFAULT 
;

in (ChainStores chainStores, StoreType storeType, Store store) =
    (storeType(store) == storeType AND chainStores IS ChainStores) OR
    (chainStores(store) == chainStores AND NOT storeType) OR
    (store IS Store AND NOT storeType AND NOT chainStores);   
        
// Неактивный
inactive 'Неактивный' = DATA BOOLEAN (Store);
active 'Активный' (Store s) = s IS Store AND NOT inactive(s);

// -------------------------------------- Отдел магазина ------------------------------- //

CLASS DepartmentStore 'Отдел магазина' : Stock;
TABLE departmentStore (DepartmentStore);
TABLE departmentStoreDate (DepartmentStore, DATE);

@defineExternalizable(departmentStore, STRING[100]);
id (DepartmentStore s) += id(s);

name 'Наименование' = DATA ISTRING[150](DepartmentStore) INDEXED CHARWIDTH 20 IN id;
fullName 'Наименование полное' = DATA ISTRING[150](DepartmentStore) INDEXED CHARWIDTH 20;

name(DepartmentStore stock) += name(stock) IF stock IS DepartmentStore;
fullName(DepartmentStore stock) += (OVERRIDE fullName(stock), name(stock)) IF stock IS DepartmentStore;

store = DATA Store (DepartmentStore) INDEXED AUTOSET NONULL DELETE;
nameStore 'Магазин' (DepartmentStore departmentStore) = name(store(departmentStore)) IN base CHARWIDTH 20;
dataStockGroup = DATA StockGroup (DepartmentStore);
nameDataStockGroup = name(dataStockGroup(DepartmentStore d));
stockGroup = OVERRIDE dataStockGroup(DepartmentStore departmentStore), store(departmentStore);
nameStockGroup 'Группа складов' = name(stockGroup(DepartmentStore d)) CHARWIDTH 20;

openDate 'Дата открытия' (DepartmentStore d) = openDate(store(d)); 
closeDate 'Дата закрытия' (DepartmentStore d) = closeDate(store(d)); 

stockGroup (DepartmentStore departmentStore) += OVERRIDE dataStockGroup(departmentStore), store(departmentStore);

//in(Store store, DepartmentStore departmentStore) = store(departmentStore) == store;
in(StockGroup stg, DepartmentStore departmentStore)= level(store(departmentStore),stg) > 0;     

storeType(DepartmentStore departmentStore) = storeType(store(departmentStore)) MATERIALIZED INDEXED;
nameStoreType 'Формат' (DepartmentStore departmentStore) = name(storeType(departmentStore));

chainStores(DepartmentStore departmentStore) = chainStores(storeType(departmentStore)) MATERIALIZED INDEXED;

legalEntity (DepartmentStore departmentStore) = legalEntity(store(departmentStore)) MATERIALIZED INDEXED;
legalEntity (DepartmentStore stock) += legalEntity(stock);

quantityDaysClose 'Срок автоматического закрытия заказов' = DATA INTEGER(DepartmentStore);
autoCloseOrders 'Автоматически закрывать заказы' = DATA BOOLEAN (DepartmentStore); 

quantityDaysCloseOrders(DepartmentStore stock) += quantityDaysClose(stock);
autoCloseOrders (DepartmentStore stock) += autoCloseOrders(stock); 

nameLegalEntity 'Компания' (DepartmentStore departmentStore) = name(legalEntity(departmentStore));

dataPhone 'Телефон' = DATA STRING[100] (DepartmentStore); 
phone 'Телефон магазина' (DepartmentStore d) = OVERRIDE dataPhone(d), phone(store(d));
phone(DepartmentStore st) += phone(st);

primaryDepartmentStore 'Основной отдел' (store) =
    GROUP MIN DepartmentStore departmentStore BY store(departmentStore);

countDepartmentStore 'Кол-во отделов' (store) = GROUP SUM 1 IF DepartmentStore dep IS DepartmentStore BY store(dep);

address 'Адрес' (DepartmentStore departmentStore) = address(store(departmentStore));
address (DepartmentStore departmentStore) += address(departmentStore);

email 'E-mail' (DepartmentStore ds) = email(store(ds)) CHARWIDTH 30;
email(DepartmentStore stock) += email(stock);

latitude 'Координата X' (DepartmentStore departmentStore) = latitude(store(departmentStore));
longitude 'Координата Y' (DepartmentStore departmentStore) = longitude(store(departmentStore));

latitude (DepartmentStore departmentStore) += latitude(departmentStore);
longitude (DepartmentStore departmentStore) += longitude(departmentStore);

region(DepartmentStore stock) += region(store(stock));

@defineHistorizable(tradingSquare, , 'Торговая площадь', NUMERIC[10,2], departmentStore, nameDepartmentStore, public);

tradingSquare (store, DATE date) = GROUP SUM tradingSquare(DepartmentStore departmentStore, date) BY store(departmentStore);
tradingSquare 'Торговая площадь' (Store store) = tradingSquare(store, currentDate());

cashAccount 'Счет' = DATA Cash.Account (DepartmentStore);
numberCashAccount 'Номер счета' = number(cashAccount(DepartmentStore departmentStore)) CHARWIDTH 20;

CONSTRAINT legalEntity(DepartmentStore departmentStore) != legalEntity(cashAccount(departmentStore))
    CHECKED BY cashAccount[DepartmentStore] MESSAGE 'Организация отдела магазина должна совпадать с организацией счета';

in (ChainStores chainStores, StoreType storeType, Store store, DepartmentStore department) =
    (store(department) == store AND storeType IS StoreType AND chainStores IS ChainStores) OR
    (storeType(department) == storeType AND chainStores IS ChainStores AND NOT store) OR
    (chainStores(department) == chainStores AND NOT store AND NOT storeType) OR
    (department IS DepartmentStore AND NOT store AND NOT storeType AND NOT chainStores);

in (ChainStores chainStores, StoreType storeType, DepartmentStore departmentStore)= in (chainStores, storeType, store(departmentStore));     

// Неактивный
inactive 'Неактивный' = DATA BOOLEAN (DepartmentStore);
inactive(DepartmentStore st) += inactive(st);

in 'Сотрудник магазина' (store, Employee employee) = GROUP SUM 1 IF in(DepartmentStore d, employee)
    BY store(d);
    
CONSTRAINT chairman(Store store) AND NOT in(store, chairman(store))
    CHECKED BY chairman[Store] MESSAGE 'Работник должен быть сотрудником магазина';

//parent (Store store) += storeType(store);    включить при отключении StoreGroup
// ---------------------------------------------------------- Подгруппы магазинов ---------------------------------------------------- //
CLASS ABSTRACT StoreGroup 'Группа магазина' : StockGroup;

@defineExternalizableAbstract(storeGroup, STRING[100]);

id[StockGroup](StoreGroup storeGroup) += id(storeGroup);

name 'Наименование' = ABSTRACT ISTRING[100](StoreGroup) CHARWIDTH 20;
name[StockGroup](StoreGroup storeGroup) += name(storeGroup) IF storeGroup IS StoreGroup;

// Неактивный
inactive 'Неактивный' = ABSTRACT BOOLEAN (StoreGroup);
active 'Активный' (StoreGroup storeGroup) = storeGroup IS StoreGroup AND NOT inactive(storeGroup);

storeType = ABSTRACT StoreType (StoreGroup);
nameStoreType 'Формат' (StoreGroup storeGroup) = name(storeType(storeGroup)) IN base;

chainStores 'Торговая сеть' (StoreGroup storeGroup) = chainStores(storeType(storeGroup));
nameChainStores 'Торговая сеть' (StoreGroup storeGroup) = name(chainStores(storeGroup)) IN base;

FORM storeGroups 'Группы магазинов'
    OBJECTS sbg=StoreGroup
    PROPERTIES(sbg) READONLY nameChainStores, nameStoreType, name 
    PROPERTIES(sbg) NEWSESSION NEW, EDIT, DELETE
    ORDERS name(sbg)
    LIST StoreGroup OBJECT sbg
;

DESIGN storeGroups { BOX { size = (1000, 400); } }

parent (StoreGroup storeGroup) += storeType(storeGroup);

storeGroup = ABSTRACT StoreGroup (Store);

parent (Store store) += OVERRIDE storeGroup(store), storeType(store);

storeGroup(DepartmentStore departmentStore) = storeGroup(store(departmentStore)) MATERIALIZED INDEXED;
nameStoreGroup 'Группа' (DepartmentStore departmentStore) = name(storeGroup(departmentStore));

//in(StoreType storeType, StoreGroup storeGroup) = storeType(storeGroup) == storeType;

in(StoreType storeType, StockGroup stockGroup) = parent(stockGroup) = storeType;

in (ChainStores chainStores, StoreType storeType, StoreGroup storeGroup, Store store) =
    (storeGroup(store) == storeGroup AND storeType IS StoreType AND chainStores IS ChainStores) OR   
    (storeType(store) == storeType AND chainStores IS ChainStores AND NOT storeGroup) OR
    (chainStores(store) == chainStores AND NOT storeType AND NOT storeGroup) OR
    (store IS Store AND NOT storeType AND NOT chainStores AND NOT storeGroup);

//in (StoreGroup storeGroup, Store store) = storeGroup(store) == storeGroup;
    
//in (StoreType storeType, StoreGroup storeGroup, Store store) = 
//    (storeGroup(store) == storeGroup AND storeType IS StoreType) OR 
//    (storeType(store) == storeType AND NOT storeGroup);

//in (StoreType storeType, StockGroup stockGroup1, StockGroup stockGroup2) = 
//    (parent(stockGroup2) == stockGroup1 AND parent(stockGroup1) = storeType) OR 
//    (parent(stockGroup2) == storeType AND NOT stockGroup1);

//фильтр для отделов
//in (ChainStores chainStores, StoreType storeType, StockGroup stockGroup1, StockGroup stockGroup2, DepartmentStore department) =
//    (stockGroup(department) == stockGroup1 AND chainStores IS ChainStores AND storeType IS StoreType) OR   //версия для тех у кого нет StoreGroup и Store находтся на 1лвл
//    (stockGroup(department) == stockGroup2 AND storeType IS StoreType AND chainStores IS ChainStores) OR   // фильтр по Store 2лвл
//    (parent(stockGroup(department)) == stockGroup1 AND chainStores IS ChainStores AND storeType IS StoreType AND NOT stockGroup2) OR //фильтр по StoreGroup 1лвл
//    (storeType(department) == storeType AND chainStores IS ChainStores AND NOT stockGroup1 AND NOT stockGroup2) OR
//    (chainStores(department) == chainStores AND NOT stockGroup1 AND NOT stockGroup2 AND NOT storeType) OR
//    (department IS DepartmentStore AND NOT stockGroup1 AND NOT stockGroup2 AND NOT storeType AND NOT chainStores);

//in (ChainStores chainStores, StoreType storeType, StoreGroup storeGroup, DepartmentStore departmentStore)= in (chainStores, storeType, storeGroup, store(departmentStore));     

// -------------------------------------- Формы отдела магазинов ------------------------------------------ //

FORM departmentStore 'Отдел магазина'
    OBJECTS d = DepartmentStore PANEL
    PROPERTIES(d) nameDep=name, fullName, phone, nameStore, nameStockGroup, tradingSquare,
                  numberCashAccount SHOWIF isCompany(d), quantityDaysClose SHOWIF isCompany(d), autoCloseOrders SHOWIF isCompany(d),
                  id SHOWIF showIDs(), inactive

    OBJECTS e = Employee GRID
    PROPERTIES(e) SHOWIF isCompany(d) READONLY firstName, lastName
    PROPERTIES(e) SHOWIF isCompany(d) NEWEDIT, EDIT, deletee = DELETE GRID
    FILTERS in(d, e)
    FILTERGROUP active FILTER 'Активные' active(e) 'F5'  DEFAULT 
    EDIT DepartmentStore OBJECT d
;

DESIGN departmentStore {
    BOX {
        size = (1024, 768);
        OBJECTS {
            NEW header {
                alignment = STRETCH;
                type = CONTAINERH;
                NEW headerLeft {
                    fill = 1;
                    NEW headerMainParams {
                        alignment = STRETCH;
                        caption = 'Основные параметры';
                        type = COLUMNS;
                        columns = 3;
                        MOVE PROPERTY(nameDep);
                        MOVE PROPERTY(fullName(d));
                        MOVE PROPERTY(phone(d));
                        MOVE PROPERTY(id(d));
                        MOVE PROPERTY(nameStore(d));
                        MOVE PROPERTY(nameStockGroup(d));
                        MOVE PROPERTY(tradingSquare(d));
                        MOVE PROPERTY(inactive(d)); 
                    }
                    NEW headerExtraParams {
                        alignment = STRETCH;
                        type = COLUMNS;
                        columns = 2;
                        caption = 'Дополнительные параметры';
                        MOVE PROPERTY(numberCashAccount(d));
                        MOVE PROPERTY(quantityDaysClose(d));
                        MOVE PROPERTY(autoCloseOrders(d));
                    }
                }
                NEW headerRight;
            }
            MOVE BOX(e);
        }
    }
}

//FORM departmentStores 'Отделы магазинов'
//    TREE treeStore a=BPSTRING[3], t=ChainStores, st=StoreType, s=Store
//    PROPERTIES READONLY VALUE(a), name(t), name(st), name(s)
//    FILTERS stringEqualsAll(a), in (t, st), in(st, s)
//    FILTERGROUP activeStore FILTER 'Активный' active(s) 'ctrl F10' DEFAULT
//
//    OBJECTS d=DepartmentStore
//    PROPERTIES (d) in
//    PROPERTIES(d) READONLY id SHOWIF showIDs(), depName = name, fullName
//    FILTERS in(t, st, s, d)
//    ORDERS depName
//    FILTERGROUP activeDS FILTER 'Активный' active(d) 'F10' DEFAULT
//
//    LIST DepartmentStore OBJECT d
//;

FORM departmentStores 'Отдел магазина'
    TREE treeStore a = BPSTRING[3], sg = StockGroup PARENT parent(sg)
    PROPERTIES READONLY VALUE(a), sgTreeName = name(sg)
    ORDERS sgTreeName
    FILTERS stringEqualsAll(a), (sg IS ChainStores OR sg IS StoreType OR sg IS StoreGroup OR sg IS Store)
    FILTERGROUP activeStore FILTER 'Активный' (active[Store](sg) OR NOT sg IS Store) 'ctrl F10' DEFAULT

    OBJECTS d=DepartmentStore
    PROPERTIES (d) in
    PROPERTIES(d) READONLY id SHOWIF showIDs(), depName = name, fullName

    FILTERS isParent(sg, d) OR (d IS Stock AND NOT sg) 

    FILTERGROUP activeDS FILTER 'Активный' active(d) 'F10' DEFAULT

    LIST DepartmentStore OBJECT d
;

DESIGN departmentStores {
    BOX {
        size = (1024, 768);

        NEW topContainer {
            fill = 1;
            type = SPLITH;

            MOVE BOX(TREE treeStore) {
                caption = 'Склады';
            }

            MOVE BOX(d) {
                fill = 3;
                GRID(d) {
                    defaultComponent = TRUE;
                }
            }
        }

        MOVE TOOLBARBOX;
    }
}
@extendFormFilterStockAccess(d, departmentStores, company);

change(Store store)  { 
    INPUT s = name(store) DO {
        IF s THEN
            name(DepartmentStore d) <- replace(name(d), name(store), s) WHERE store(d) = store;
        name(store) <- s;
    }
}


FORM store 'Магазин'
    OBJECTS s=Store PANEL
    PROPERTIES(s) name ON CHANGE change(s), address, email, phone, nameStoreType, orderNumber, tradingSquare READONLY, 
                  nameChairman, openDate, closeDate, nameLegalEntity, numberBankAccount SHOWIF isCompany(s), openTime, closeTime,
                  nameRegion, latitude, longitude, showOnMap, calculateCoordinates, id SHOWIF showIDs(), inactive
                  

    OBJECTS d=DepartmentStore
    PROPERTIES(d) READONLYIF isReadonly() name, id SHOWIF showIDs(), nameStockGroup, inactive, tradingSquare
    PROPERTIES(d)          NESTEDSESSION NEW, EDIT, deleteD=DELETE GRID
    FILTERS store(d) == s
//    FILTERS in(s, d)

    FILTERGROUP active
        FILTER 'Активный' NOT inactive(d) DEFAULT 
        
    EDIT Store OBJECT s
;

@extendFormEditable(store);

DESIGN store {
    OBJECTS {
        NEW header {
            NEW headerMainParams {
                caption = 'Основные параметры';
                type = CONTAINERV;
                NEW row1 {
                    type = CONTAINERH;
                    MOVE PROPERTY(name(s));
                    MOVE PROPERTY(id(s));
                    MOVE PROPERTY(nameStoreType(s));
                    MOVE PROPERTY(nameLegalEntity(s));                    
                }
                NEW row2 {
                    type = CONTAINERH;
                    MOVE PROPERTY(inactive(s));
                    MOVE PROPERTY(orderNumber(s));                    
                }
            }
            NEW headerLocationParams {
                caption = 'Координаты';
                NEW firstRow {
                    type = CONTAINERH;
                    MOVE PROPERTY(address(s));
                    MOVE PROPERTY(email(s));
                    MOVE PROPERTY(phone(s));            
                }
                NEW secondRow{
                    type = CONTAINERH;
                    MOVE PROPERTY(latitude(s));
                    MOVE PROPERTY(longitude(s));
                    MOVE PROPERTY(showOnMap(s));
                    MOVE PROPERTY(calculateCoordinates(s));            
                }
            }
            NEW headerPriceParams {
                caption = 'Цены';
                type = COLUMNS;
                columns = 4;
            }
            NEW headerExtraParams {
                caption = 'Дополнительные параметры';
                type = COLUMNS;
                columns = 4;
                MOVE PROPERTY(nameChairman(s));            
                MOVE PROPERTY(numberBankAccount(s));
                MOVE PROPERTY(nameRegion(s));
                MOVE PROPERTY(tradingSquare(s));
                MOVE PROPERTY(openDate(s));
                MOVE PROPERTY(closeDate(s));
                MOVE PROPERTY(openTime(s));
                MOVE PROPERTY(closeTime(s));
            }
       }
    
        MOVE BOX(d);
    }
}

// -------------------------------------- Формы магазинов ------------------------------------------ //

//FORM stores 'Магазины'
//    TREE treeStore a=BPSTRING[3], t=ChainStores, st=StoreType, stg=StoreGroup 
//    PROPERTIES READONLY VALUE(a), name(t), name(st), name(stg)
//
//    FILTERS stringEqualsAll(a)
//    FILTERS in (t, st)
//    FILTERS in (st, stg)
//    
//    FILTERGROUP active
//        FILTER 'Активные' active(st) DEFAULT
//
//    PROPERTIES(t) NEWSESSION addT=NEW[ChainStores] , editT=EDIT[ChainStores] , deletet=DELETE
//
//    OBJECTS s=Store
//    PROPERTIES(s) READONLYIF isReadonly() name, id SHOWIF showIDs(), address, email, phone, nameStoreType, nameLegalEntity, nameRegion, orderNumber 
//    PROPERTIES(s) NEWSESSION NEW, EDIT, DELETE 
//    FILTERS in(t, st, stg, s)
//    FILTERGROUP group1
//        FILTER 'Активные' active(s) 'F10' DEFAULT
//
//    OBJECTS d=DepartmentStore
//    PROPERTIES(d) READONLYIF isReadonly() name, id SHOWIF showIDs()
//    FILTERS in(s, d)
//    LIST Store OBJECT s
//;

FORM stores 'Магазины'
    TREE treeStore a = BPSTRING[3], sg = StockGroup PARENT parent(sg)
    PROPERTIES READONLY VALUE(a), sgTreeName = name(sg)
    ORDERS sgTreeName
    FILTERS stringEqualsAll(a), (sg IS ChainStores OR sg IS StoreType OR sg IS StoreGroup)
    FILTERGROUP activeStore FILTER 'Активный' (active[StoreType](sg) OR NOT sg IS StoreType) 'ctrl F10' DEFAULT

    PROPERTIES(sg) NEWSESSION addT=NEW[ChainStores] , editT=EDIT[ChainStores] , deletet=DELETE

    OBJECTS s=Store
    PROPERTIES(s) READONLYIF isReadonly() name, id SHOWIF showIDs(), address, email, phone, nameStoreType, nameLegalEntity, nameRegion, orderNumber 
    PROPERTIES(s) NEWSESSION NEW, EDIT, DELETE 
    FILTERS isParent(s,sg) OR (s IS Store AND NOT sg), isCompany(s) 
    FILTERGROUP group1
        FILTER 'Активные' active(s) 'F10' DEFAULT

    OBJECTS d=DepartmentStore
    PROPERTIES(d) READONLYIF isReadonly() name, id SHOWIF showIDs()
    FILTERS store(d) == s
    LIST Store OBJECT s
;

DESIGN stores {

    NEW pane {
        fill = 1;
        type = SPLITH;

        MOVE BOX(TREE treeStore) {
            width = 300;
            caption = 'Группы магазинов';
        }

        NEW firstCase {
            fill = 5;
            width = 400;
            type = SPLITV;

            MOVE BOX(s) {
                fill = 2;
            }
            NEW tabbedContainer {
                type = TABBED;
                fill = 1;
                MOVE BOX(d);                
            }
        }
    }

    MOVE TOOLBARBOX;
}
@extendFormEditable(stores);

@extendFormFilterStockGroupAccess(sg, stores, company);

NAVIGATOR {
    retailMasterData {
        NEW stores;
    }
}

// -------------------------------------- Макросы ----------------------------------------------- //

META defineDocumentHeaderDepartmentStore (object)
    @defineDocumentHeaderStock(object, departmentStore, 'Отдел магазина');
END

META defineDocumentDetailDepartmentStoreCustom (object, detail)
   @defineDocumentDetailStock (object, detail, departmentStore, departmentStore, 'Отдел магазина');
   store (###detail detail) = store(departmentStore(detail));
   nameStore 'Магазин' (###detail detail) = name(store(detail));
END
META defineDocumentDetailDepartmentStore (object)
    @defineDocumentDetailDepartmentStoreCustom (object, object##Detail);
END

META defineDocumentDepartmentStore (object)
    @defineDocumentHeaderDepartmentStore(object);
    @defineDocumentDetailDepartmentStore(object);
END

addStore 'Добавить магазин'(LegalEntity legalEntity)  { 
	NESTEDSESSION{
	    NEW st = Store {
	        legalEntity(st) <- legalEntity;
	        SHOW store OBJECTS s = st DOCKED;
	    }
	}
}

EXTEND FORM legalEntity
    PROPERTIES addStore(l) SHOWIF isCompany(l) DRAW st TOOLBAR
;

