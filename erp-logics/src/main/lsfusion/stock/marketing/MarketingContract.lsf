MODULE MarketingContract;

REQUIRE Contract, LegalEntity, Item, Store;

NAMESPACE Marketing;

CLASS ContractMarketing 'Договор маркетинга' : Contract;
TABLE contractMarketing(ContractMarketing);

@defineDocumentHeaderNumber(ContractMarketing, BPSTRING[2]);

@defineExternalizable(contractMarketing, STRING[100]);
@defineNumeratedID(ContractMarketing, 'Договоры маркетинга (код)', Id);

id(ContractMarketing c) += id(c);

number (ContractMarketing contract) += number(contract);
series (ContractMarketing contract) += series(contract);

@defineNumeratedDefault(ContractMarketing, 'Договоры маркетинга', 'ДМ');

dateFrom 'Действует (с)' = DATA DATE (ContractMarketing);
dateTo 'Действует (по)' = DATA DATE (ContractMarketing);
name 'Наименование' = DATA STRING[100](ContractMarketing);
prolongation 'Пролонгация' = DATA BOOLEAN (ContractMarketing);
description 'Описание' = ABSTRACT STRING[250](ContractMarketing) CHARWIDTH 30;
isReverse 'Обратный' = DATA BOOLEAN (ContractMarketing);

supplier = DATA LegalEntity (ContractMarketing);
nameSupplier 'Поставщик' (ContractMarketing c) = name(supplier(c));
partyA (ContractMarketing contract) += supplier(contract);

customer = DATA LegalEntity (ContractMarketing);
nameCustomer 'Получатель' (ContractMarketing c) = name(customer(c));
partyB (ContractMarketing contract) += customer(contract);

paymentDelay 'Отсрочка платежа по договору, дн' = DATA NUMERIC[3,0] (ContractMarketing);

fromCount 'От объема' = DATA BOOLEAN (ContractMarketing);
fromPayment 'От оплат' = DATA BOOLEAN (ContractMarketing);

CLASS ContractType 'Тип договора' {
    infoServices 'Информационные услуги',
    tradeBonus 'Торговая премия',
    audioAd 'Аудио-реклама',
    adServices 'Рекламные услуги'
} : Contract.ContractType;
TABLE contractType (ContractType);
name 'Наименование' (ContractType t) = staticCaption(t) IF t IS ContractType IN id CHARWIDTH 25;

FORM contractTypes 'Типы договоров'
    OBJECTS t = ContractType
    PROPERTIES(t) READONLY name
    LIST ContractType OBJECT t
;

contractType = DATA ContractType (ContractMarketing);
nameContractType 'Тип договора' (ContractMarketing c) = name(contractType(c));
contractType (ContractMarketing c) += contractType(c);

CLASS Weighted 'Весовой' {
    yes 'Весовой',
    no 'Штучный'
}
TABLE weighted(Weighted);
name 'Наименование' (Weighted w) = staticCaption(w) IF w IS Weighted IN id;

FORM weighted 'Типы товара'
    OBJECTS w = Weighted
    PROPERTIES(w) READONLY name
    LIST Weighted OBJECT w
;

CLASS Period 'Период' {
    month 'Месяц',
    quarter 'Квартал'
}
TABLE period (Period);
name 'Наименование' (Period p) = staticCaption(p) IF p IS Period IN id CHARWIDTH 10;

period = DATA Period (ContractMarketing);
namePeriod 'Периодичность выставления' (ContractMarketing c) = name(period(c));

FORM dialogPeriod 'Период'
    OBJECTS p = Period
    PROPERTIES(p) READONLY name
    
    LIST Period OBJECT p
;

personSupplier 'в лице ' = DATA STRING[500](ContractMarketing) CHARWIDTH 50;
basedOnSupplier ', действующего на основании' = DATA STRING[500] (ContractMarketing) CHARWIDTH 50;

scanFile 'Файл' = DATA FILE (ContractMarketing);

inputScanFile 'Загрузить' (ContractMarketing c)  { INPUT f = FILE DO { scanFile(c) <- f; } }
openScanFile 'Просмотреть' (ContractMarketing c)  { open(scanFile(c)); }
deleteScanFile 'Удалить' (ContractMarketing c)  { scanFile(c) <- NULL; }

FORM contractMarketing 'Договор маркетинга'
    OBJECTS c = ContractMarketing PANEL 
    PROPERTIES (c) nameNumerator, number, series, Contract.dateFrom, Contract.dateTo, name, prolongation, 
                   nameSupplier, nameCustomer, isReverse, nameContractType, namePeriod, fromCount, fromPayment, 
                   personSupplier, basedOnSupplier, inputScanFile, openScanFile, deleteScanFile, nameCurrency, nameTypeExchange,
                   descriptionPaymentCondition
    
    EDIT ContractMarketing OBJECT c
;

DESIGN contractMarketing {
    horizontal = FALSE;
    fill = 1;
    NEW params FIRST {
        NEW props  {
            horizontal = TRUE;
            fill = 1;
            MOVE GROUP (numbered, c);
            NEW dates {
                caption = 'Срок действия';
                horizontal = TRUE;
                fill = 1;
                MOVE PROPERTY (dateFrom(c));
                MOVE PROPERTY (dateTo(c));
                MOVE PROPERTY (name(c));
                MOVE PROPERTY (prolongation(c));
                MOVE PROPERTY (namePeriod(c));
            }
        }
        NEW othersParams {
            caption = 'Параметры';
            horizontal = TRUE;
            fill = 1;
            MOVE PROPERTY (nameSupplier(c));
            MOVE PROPERTY (nameCustomer(c));
            MOVE PROPERTY (nameContractType(c));
            MOVE PROPERTY (descriptionPaymentCondition(c));
            MOVE PROPERTY (fromCount(c));
            MOVE PROPERTY (fromPayment(c));
            MOVE PROPERTY (isReverse(c));
            MOVE PROPERTY (nameCurrency(c));
            MOVE PROPERTY (nameTypeExchange(c));
        }
        NEW person {
            caption = 'Строка для задания и акта';
            horizontal = TRUE;
            MOVE PROPERTY (personSupplier(c));
            MOVE PROPERTY (basedOnSupplier(c));
        }
        NEW file {
            horizontal = TRUE;
            caption = 'Файл документа';
            MOVE PROPERTY (inputScanFile(c));
            MOVE PROPERTY (openScanFile(c));
            MOVE PROPERTY (deleteScanFile(c));
        }
    }
    NEW conditions AFTER params {
        tabbed = TRUE;
        fill = 1;
        caption = 'Условия';
    }
}

FORM contractMarketings 'Договоры маркетинга'
    OBJECTS c = ContractMarketing 
    PROPERTIES (c) READONLY number, Contract.dateFrom, Contract.dateTo, name, prolongation, nameSupplier, nameCustomer, 
                   descriptionPaymentCondition, nameContractType, namePeriod, fromCount, fromPayment           
    PROPERTIES (c) NEWSESSION NEW, EDIT, DELETE 
;

DESIGN contractMarketings {
    OBJECTS {
        horizontal = FALSE;
        MOVE BOX (c) FIRST {
            fill = 1;
        }
        NEW conditions AFTER BOX (c) {
            tabbed = TRUE;
            fill = 1;
            caption = 'Условия';
        }
    }
}

FORM dialogContractMarketings 'Договоры маркетинга'
    OBJECTS c = ContractMarketing 
    PROPERTIES (c) READONLY number, Contract.dateFrom, Contract.dateTo, name, prolongation, nameSupplier, nameCustomer, 
                   descriptionPaymentCondition, nameContractType, namePeriod, fromCount, fromPayment   
                   
    LIST ContractMarketing OBJECT c
;

DESIGN dialogContractMarketings {
    size = (1200, 800);
}

CLASS ConditionList 'Сопроводительный лист (маркетинг)';
TABLE conditionList(ConditionList);

dateFrom 'Дата с' = DATA DATE (ConditionList);
dateTo 'Дата по' = DATA DATE (ConditionList);

@defineDocumentHeaderNumber(ConditionList, BPSTRING[2]);
@defineNumeratedDefault(ConditionList, 'Сопроводительные листы (маркетинг)', 'СМ');

contractMarketing = DATA ContractMarketing (ConditionList) NONULL DELETE INDEXED;

supplier (ConditionList l) = supplier(contractMarketing(l)) MATERIALIZED INDEXED;

FORM conditionList 'Сопроводительный лист (маркетинг)'
    OBJECTS l = ConditionList PANEL 
    PROPERTIES (l) nameNumerator, series, number, dateFrom, dateTo
    
    EDIT ConditionList OBJECT l
;

DESIGN conditionList {
    horizontal = FALSE;
    NEW params FIRST {
        MOVE BOX (l);
    }
    NEW conditions AFTER params {
        tabbed = TRUE;
        fill = 1;
    }
}

EXTEND FORM contractMarketing
    
    OBJECTS l = ConditionList
    PROPERTIES (l) seriesNumber, dateFrom, dateTo
    FILTERS contractMarketing(l) = c
;

DESIGN contractMarketing {
    NEW lists AFTER params {
        horizontal = TRUE;
        fill = 1;
        MOVE BOX (l){
            fill = 2;
        }
        MOVE conditions {
            fill = 3;
        }
    }
}

EXTEND FORM contractMarketings
    
    OBJECTS l = ConditionList
    PROPERTIES (l) READONLY seriesNumber, dateFrom, dateTo
    FILTERS contractMarketing(l) = c
;

DESIGN contractMarketings {
    OBJECTS {
        NEW conditionLists AFTER BOX (c) {
            horizontal = TRUE;
            fill = 1;
            MOVE BOX (l){
                fill = 2;
            }
            MOVE conditions {
                fill = 3;
            }
        }
    }
}

CLASS MarketingCondition 'Условие договора маркетинга';
TABLE marketingCondition(MarketingCondition);

conditionList 'Сопроводительный лист' = DATA ConditionList (MarketingCondition)  NONULL DELETE INDEXED;

contractMarketing (MarketingCondition c) = contractMarketing(conditionList(c)) MATERIALIZED INDEXED;

dataDateFrom 'Дата с' = DATA DATE (MarketingCondition);
dataDateTo   'Дата по' = DATA DATE (MarketingCondition);

dateFrom 'Дата с' (MarketingCondition c) = OVERRIDE dataDateFrom(c), dateFrom(conditionList(c)) MATERIALIZED;
dateTo 'Дата по' (MarketingCondition c) = OVERRIDE dataDateTo(c), dateTo(conditionList(c)) MATERIALIZED;

supplier (MarketingCondition c) = supplier(conditionList(c)) MATERIALIZED INDEXED;
customer (MarketingCondition c) = customer(contractMarketing(c)) MATERIALIZED;

CLASS ConditionType 'Вид маркетинга' {
    fixed 'Маркетинг фиксированный'
}
TABLE conditionType (ConditionType);
name 'Наименование' (ConditionType t) = staticCaption(t) IF t IS ConditionType IN id;

notShowIf = ABSTRACT BOOLEAN (ConditionList, ConditionType);
showIf (ConditionList l, ConditionType t) = NOT notShowIf(l, t);
    
conditionType  = DATA ConditionType(MarketingCondition);
nameConditionType 'Вид маркетинга' (MarketingCondition c) = staticCaption(conditionType(c));

CLASS CalcBase 'База расчета' {
    supplierVAT 'Приход поставщика с НДС',
    supplier 'Приход поставщика без НДС',
    turnoverVAT 'Розничный ТО с НДС в учетных ценах',
    turnover 'Розничный ТО без НДС в учетных ценах',
    turnoverCostVAT 'Розничный ТО с НДС в с/с',
    turnoverCost 'Розничный ТО без НДС в с/с'
}
TABLE calcBase (CalcBase);
name 'Наименование' (CalcBase b) = staticCaption(b) IF b IS CalcBase IN id;

TABLE conditionListConditionType (ConditionList, ConditionType);
calcBase = DATA CalcBase (ConditionList, ConditionType);
nameCalcBase 'База расчета' (ConditionList l, ConditionType t) = staticCaption(calcBase(l, t));
overCalcBase = ABSTRACT CalcBase (MarketingCondition);
calcBase (MarketingCondition mc) = OVERRIDE overCalcBase(mc), calcBase(conditionList(mc), conditionType(mc)) MATERIALIZED;

marketingPercent 'Процент маркетинга, %' = DATA NUMERIC[5,2]  (MarketingCondition);

price 'Цена' = DATA NUMERIC[16,5](MarketingCondition);

itemGroup = DATA ItemGroup (MarketingCondition);
nameItemGroup 'Категория' (MarketingCondition c) = name(itemGroup(c));

brand = DATA Brand (MarketingCondition);
nameBrand 'Бренд' (MarketingCondition c) = name(brand(c));

country = DATA Country (MarketingCondition);
nameCountry 'Страна изготовитель' (MarketingCondition c) = name(country(c));

region = DATA Region (MarketingCondition);
nameRegion 'Регион' (MarketingCondition c) = name(region(c));

in 'Вкл.' = DATA BOOLEAN (Item, MarketingCondition);
countItems (MarketingCondition c) = GROUP SUM 1 IF in(Item i, c) MATERIALIZED;
items 'Товары' (MarketingCondition c) = GROUP CONCAT name(Item i) IF in(i, c), ', ' ORDER i CHARWIDTH 50;

item = DATA Item (MarketingCondition);
nameItem 'Товар' (MarketingCondition c) = name(item(c));

weighted = DATA Weighted (MarketingCondition);
nameWeighted 'Вес' (MarketingCondition c) = staticCaption(weighted(c)) CHARWIDTH 10;

isException 'Исключение' = DATA BOOLEAN (MarketingCondition);

TABLE marketingConditionLegalEntity(MarketingCondition, LegalEntity);
inLegalEntityStock 'Отм.' = DATA BOOLEAN (MarketingCondition, LegalEntity);
countLegalEntities (MarketingCondition c) = GROUP SUM 1 IF inLegalEntityStock(c, LegalEntity l) MATERIALIZED; 
legalEntities 'Юр. лица' (MarketingCondition c) = GROUP CONCAT name(LegalEntity l), ',' IF inLegalEntityStock(c, l) ORDER l CHARWIDTH 30;

FORM dialogLegalEntityStocks 'Юр. лица'
    OBJECTS c = MarketingCondition PANEL 
    OBJECTS l = LegalEntity
    PROPERTIES inLegalEntityStock(c, l)
    PROPERTIES (l) READONLY name, id, fullName 
    
    FILTERS isCompany(l)
    FILTERGROUP com FILTER 'Активные' active(l) DEFAULT 
;

showSelectLegalEntities (MarketingCondition c)  { 
    SHOW dialogLegalEntityStocks OBJECTS c = c;
}

TABLE marketingConditionDepartmentStore(MarketingCondition, Stock);

inStock 'Отм.' = DATA BOOLEAN (MarketingCondition, Stock);
countStocks (MarketingCondition c) = GROUP SUM 1 IF inStock(c, Stock s) MATERIALIZED; 
stocks 'Склады' (MarketingCondition c) = GROUP CONCAT name(Stock s), ',' IF inStock(c, s) ORDER s CHARWIDTH 30;

FORM dialogStockMerch 'Склады'
    OBJECTS c = MarketingCondition
    OBJECTS s = Stock
    PROPERTIES inStock(c, s), name(s) READONLY 
    FILTERS isCompany(s)
;

showSelectStocks (MarketingCondition c)  { 
    SHOW dialogStockMerch OBJECTS c = c;
}

CLASS StockGroupMarketing 'Группа складов';
TABLE stockGroupMarketing (StockGroupMarketing);

name 'Наименование' = DATA ISTRING[100] (StockGroupMarketing) CHARWIDTH 15;

in 'Вкл.' = DATA BOOLEAN (MarketingCondition, StockGroupMarketing);
countStockGroups (MarketingCondition c) = GROUP SUM 1 IF in(c, StockGroupMarketing s) MATERIALIZED; 
stockGroups 'Группы складов' (MarketingCondition c) = GROUP CONCAT name(StockGroupMarketing s), ',' IF in(c, s) ORDER s CHARWIDTH 30;

in 'Вкл.' = DATA BOOLEAN (Stock, StockGroupMarketing);
countStockGroups (Stock c) = GROUP SUM 1 IF in(c, StockGroupMarketing s) MATERIALIZED; 
stockGroups 'Группы складов (маркетинг)' (Stock c) = GROUP CONCAT name(StockGroupMarketing s), ',' IF in(c, s) ORDER s CHARWIDTH 30;

inGroup (MarketingCondition c, Stock s) = GROUP SUM 1 IF in(c, StockGroupMarketing g) AND in(s, g);

FORM stockGroupMarketing 'Группа складов'
    OBJECTS o = StockGroupMarketing PANEL
    PROPERTIES(o) name
    
    OBJECTS d = Stock
    PROPERTIES in(d, o), name(d) READONLY 
    FILTERS isCompany(d)
    EDIT StockGroupMarketing OBJECT o
;

FORM stockGroupMarketings 'Группы складов'
    OBJECTS o = StockGroupMarketing
    PROPERTIES(o) READONLY name
    PROPERTIES(o) NEWSESSION NEW, EDIT, DELETE
;

FORM dialogStockGroupMarketingCondition 'Группы складов'
    OBJECTS c = MarketingCondition PANEL 
    OBJECTS o = StockGroupMarketing
    PROPERTIES in(c, o), name(o) READONLY
;

FORM dialogStockGroupStocks 'Группы складов'
    OBJECTS c = Stock PANEL 
    OBJECTS o = StockGroupMarketing
    PROPERTIES in(c, o), name(o) READONLY
;

dialogStockGroupsStocks (Stock d)  { 
    SHOW dialogStockGroupStocks OBJECTS c = d;
}

EXTEND FORM departmentStore PROPERTIES stockGroups(d) ON CHANGE dialogStockGroupsStocks(d);

DESIGN departmentStore {
    headerExtraParams {
        MOVE PROPERTY (stockGroups(d));
    }
}

dialogStockGroupsMarketingCondition (MarketingCondition d)  { 
    SHOW dialogStockGroupMarketingCondition OBJECTS c = d;
}

FORM calcBases 'Базы расчета'
    OBJECTS b = CalcBase
    PROPERTIES READONLY staticCaption(b)
;

dialogTreeItemGroups (MarketingCondition mc)  {   
    DIALOG dialogTreeItemGroups OBJECTS tg = itemGroup(mc) CHANGE;
}

FORM dialogItems 'Товары'
    OBJECTS c = MarketingCondition PANEL 
    OBJECTS i = Item
    PROPERTIES in(i, c)
    PROPERTIES (i) READONLY id, idBarcode, name, nameItemGroup
    
    FILTERGROUP ative
        FILTER 'Активные' active(i) DEFAULT
    
    FILTERGROUP select FILTER 'Отмеченные' in(i, c)
;
DESIGN dialogItems { size = (1024, 768); }

selectItems (MarketingCondition c) {
    DIALOG dialogItems OBJECTS c = c, i INPUT DO {
        IF NOT countItems(c) > 1 THEN {
            in(Item ii, c) <- NULL;
            in(i, c) <- TRUE;
        }
    }
}

META defineConditionTypeMarketing(nameType, captionType)
    EXTEND CLASS ConditionType {
        nameType ''###captionType
    }
    
    show###nameType (ConditionList l) = showIf(l, ConditionType.nameType);
    
    nameCalcBase###nameType 'База расчета' (ConditionList l) = name(calcBase(l, ConditionType.nameType));
    
    EXTEND FORM contractMarketing
        
        PROPERTIES (l) PANEL READONLY nameCalcBase###nameType
        
        OBJECTS nameType = MarketingCondition
        PROPERTIES (##nameType) READONLY nameItemGroup, nameBrand, nameCountry, nameWeighted , nameRegion, legalEntities, stockGroups,
                       stocks, items, marketingPercent, price, isException
        FILTERS conditionList(##nameType) = l, conditionType(##nameType) = ConditionType.nameType
    ;
    
    DESIGN contractMarketing {
        conditions {
            MOVE BOX (##nameType){
                caption = ''###captionType;
                NEW properties###nameType FIRST {
                    horizontal = TRUE;
                    caption = 'Параметры договора';
                    MOVE PROPERTY (nameCalcBase###nameType(l));
                }
                showIf = show###nameType(l);
            }
        }
    }
    
    EXTEND FORM contractMarketings
    
        PROPERTIES (l) PANEL READONLY nameCalcBase###nameType
        
        OBJECTS nameType = MarketingCondition
        PROPERTIES (##nameType) READONLY nameItemGroup, nameBrand, nameCountry, nameWeighted , nameRegion, legalEntities, stockGroups,
                       stocks, items, marketingPercent, price, isException
        FILTERS conditionList(##nameType) = l, conditionType(##nameType) = ConditionType.##nameType
    ;
    
    DESIGN contractMarketings {
        conditions {
            MOVE BOX (##nameType){
                caption = ''###captionType;
                NEW properties###nameType FIRST {
                    horizontal = TRUE;
                    caption = 'Параметры договора';
                    MOVE PROPERTY (nameCalcBase###nameType(l));
                }
                showIf = show###nameType(l);
            }
        }
    }
    
    showCalcBases###nameType (ConditionList l)  { 
        DIALOG calcBases OBJECTS b INPUT DO {
            calcBase(l, ConditionType t) <- b WHERE t == ConditionType.##nameType;
        }
    }
    EXTEND FORM conditionList
        PROPERTIES (l) PANEL nameCalcBase###nameType ON CHANGE showCalcBases###nameType(l)
        
        OBJECTS nameType = MarketingCondition
        PROPERTIES (##nameType) nameItemGroup ON CHANGE dialogTreeItemGroups(##nameType), nameBrand, nameCountry, nameWeighted , nameRegion,  
                        legalEntities ON CHANGE showSelectLegalEntities(##nameType), stockGroups ON CHANGE dialogStockGroupsMarketingCondition(##nameType),
                        stocks ON CHANGE showSelectStocks(##nameType), items ON CHANGE selectItems(nameType), marketingPercent, price, isException, NEW, DELETE 
        FILTERS conditionList(##nameType) = l, conditionType(##nameType) = ConditionType.##nameType
    ;
    
    DESIGN conditionList {
        conditions {
            MOVE BOX (##nameType){
                caption = ''###captionType;
                NEW properties###nameType FIRST {
                    horizontal = TRUE;
                    caption = 'Параметры договора';
                    MOVE PROPERTY (nameCalcBase###nameType(l));
                }
                showIf = show###nameType(l);
            }
        }
    }
END

@defineConditionTypeMarketing(retail, 'Маркетинг розничный');

@defineConditionTypeMarketing(logistic, 'Логистический бонус');

@defineConditionTypeMarketing(merch, 'Мерчендайзинг');

//-------------------------------------Маркетинг фиксированный--------------------------------------------//

CLASS FixedMarketingCondition 'Условие договора маркетинга (фиксированный)';
TABLE fixedMArketingCondition (FixedMarketingCondition);

conditionList = DATA ConditionList(FixedMarketingCondition) NONULL DELETE INDEXED;
contractMarketing (FixedMarketingCondition mc) = contractMarketing(conditionList(mc));

CLASS FixedMarketingType 'Вид' {
    dmp 'ДМП',
    represent 'Представленность'
}
TABLE fixedMarketingType (FixedMarketingType);
name (FixedMarketingType t) = staticCaption(t) IF t IS FixedMarketingType IN id;

type = DATA FixedMarketingType (FixedMarketingCondition);
nameType 'Вид' (FixedMarketingCondition c) = staticCaption(type(c));

currency = DATA Currency (FixedMarketingCondition);
nameCurrency 'Валюта' (FixedMarketingCondition c) = name(currency(c));

monthSum 'Сумма в месяц' = DATA NUMERIC[16,4] (FixedMarketingCondition);
isVAT 'С НДС' = DATA BOOLEAN (FixedMarketingCondition);

in 'Вкл.' = DATA BOOLEAN (FixedMarketingCondition, ItemGroup);
countGroups (FixedMarketingCondition c) = GROUP SUM 1 IF in(c, ItemGroup g);
itemGroups 'Категория' (FixedMarketingCondition c) = GROUP CONCAT name(ItemGroup g) IF in(c, g), ', ' ORDER g CHARWIDTH 20;
FORM dialogFixedItemGroups 'Товарные группы'
    OBJECTS c = FixedMarketingCondition PANEL 
    OBJECTS g = ItemGroup
    PROPERTIES in(c, g)
    PROPERTIES (g) READONLY id, name, canonicalName
    FILTERGROUP in FILTER 'Отмеченные' in(c, g)
    FILTERGROUP active FILTER 'Активные' active(g) DEFAULT 
;

changeItemGroups (FixedMarketingCondition c) {
    SHOW dialogFixedItemGroups OBJECTS c = c;
}

//showFixed (ContractMarketing c) = contractType(c) == ContractType.infoServices OR contractType(c) == ContractType.tradeBonus;
//showFixed (ConditionList l) = showFixed(contractMarketing(l));

EXTEND FORM contractMarketing
    OBJECTS fixed = FixedMarketingCondition
    PROPERTIES (fixed) READONLY nameType, nameCurrency, monthSum, isVAT, itemGroups
    FILTERS conditionList(fixed) = l   
;
DESIGN contractMarketing {
    conditions {
        MOVE BOX (fixed) {
            caption = 'Маркетинг фиксированный';
//            showIf = showFixed(c);
        }
    }
}

EXTEND FORM contractMarketings 
    OBJECTS fixed = FixedMarketingCondition
    PROPERTIES (fixed) READONLY nameType, nameCurrency, monthSum, isVAT, itemGroups
    FILTERS conditionList(fixed) = l
;
DESIGN contractMarketings {
    conditions {
        MOVE BOX (fixed) {
            caption = 'Маркетинг фиксированный';
//            showIf = showFixed(c);
        }
    }
}

EXTEND FORM conditionList
    OBJECTS fixed = FixedMarketingCondition
    PROPERTIES (fixed) nameType, nameCurrency, monthSum, isVAT, itemGroups ON CHANGE changeItemGroups(fixed), NEW, DELETE 
    FILTERS conditionList(fixed) = l
;
DESIGN conditionList {
    conditions {
        MOVE BOX (fixed) {
            caption = 'Маркетинг фиксированный';
//            showIf = showFixed(l);
        }
    }
}

@defineConditionTypeMarketing(defects, 'Браки');

inConditionStock (MarketingCondition c, Stock st) = isCompany(st) AND 
    ((inStock(c, st) OR NOT countStocks(c)) AND (region(st) == region(c) OR NOT region(c)) AND (inGroup(c, st) OR NOT countStockGroups(c))
    AND (inLegalEntityStock(c, legalEntity(st)) OR legalEntity(st) = customer(contractMarketing(c)))) MATERIALIZED;


addConditionList 'Добавить' (ContractMarketing c)  { 
    NEWSESSION NEW l = ConditionList {
        contractMarketing(l) <- c;
        dateFrom(l) <- currentDate();
        SHOW EDIT ConditionList = l DOCKED;
    }
} IMAGE 'add.png';

overCopy  ABSTRACT LIST (MarketingCondition, MarketingCondition);

copyConditionList 'Копировать' (ConditionList l)  { 
    NEWSESSION NEW cl = ConditionList {
        contractMarketing(cl) <- contractMarketing(l);
        dateFrom(cl) <- currentDate();
        calcBase(cl, ConditionType t) <- calcBase(l, t);
        FOR conditionList(MarketingCondition mc) == l NEW nc = MarketingCondition DO {
            conditionList(nc) <- cl;
            conditionType(nc) <- conditionType(mc);
            itemGroup(nc) <- itemGroup(mc);
            brand(nc) <- brand(mc);
            country(nc) <- country(mc);
            weighted(nc) <- weighted(mc);
            region(nc) <- region(mc);
            inStock(nc, Stock st) <- inStock(mc, st);
            inLegalEntityStock(nc, LegalEntity le) <- inLegalEntityStock(mc, le);
            item(nc) <- item(mc);
            price(nc) <- price(mc);
            marketingPercent(nc) <- marketingPercent(mc); 
            overCopy(nc,mc);    
        }
        FOR conditionList(FixedMarketingCondition mc) == l NEW nc = FixedMarketingCondition DO {
            conditionList(nc) <- cl;
            in(nc, ItemGroup g) <- in(mc, g);
            type(nc) <- type(mc);
            currency(nc) <- currency(mc);
            monthSum(nc) <- monthSum(mc);
            isVAT(nc) <- isVAT(mc);
        }
        SHOW EDIT ConditionList = cl DOCKED;
    }
}

overCopy ABSTRACT LIST (ContractMarketing, ContractMarketing);

copyContractMarketing 'Копировать' (ContractMarketing c)  { 
    NEWSESSION NEW nc = ContractMarketing {
        Contract.dateFrom(nc) <- Contract.dateTo(c);
        Contract.dateTo(nc) <- sum(Contract.dateTo(c), 1 + daysBetweenDates(Contract.dateTo(c), Contract.dateFrom(c)));
        prolongation(nc) <- prolongation(c);
        customer(nc) <- customer(c);
        supplier(nc) <- supplier(c);
        paymentCondition(nc) <- paymentCondition(c);
        contractType(nc) <- contractType(c);
        fromPayment(nc) <- fromPayment(c);
        fromCount(nc) <- fromCount(c);
        numerator(nc) <- numerator(c);
        series(nc) <- series(c);
        number(nc) <- number(c);
        name(nc) <- name(c);
        period(nc) <- period(c);
        personSupplier(nc) <- personSupplier(c);
        basedOnSupplier(nc) <- basedOnSupplier(c);
        overCopy(c, nc);
        FOR contractMarketing(ConditionList cl) == c DO NEW ncl = ConditionList {
            contractMarketing(ncl) <- nc;
            dateFrom(ncl) <- dateFrom(cl);
            dateTo(ncl) <- dateTo(cl);
            calcBase(ncl, ConditionType t) <- calcBase(cl, t);
            FOR conditionList(MarketingCondition mc) == cl NEW nmc = MarketingCondition DO {
                conditionList(nmc) <- ncl;
                conditionType(nmc) <- conditionType(mc);
                itemGroup(nmc) <- itemGroup(mc);
                brand(nmc) <- brand(mc);
                country(nmc) <- country(mc);
                weighted(nmc) <- weighted(mc);
                region(nmc) <- region(mc);
                inStock(nmc, Stock st) <- inStock(mc, st);
                inLegalEntityStock(nmc, LegalEntity le) <- inLegalEntityStock(mc, le);
                item(nmc) <- item(mc);
                price(nmc) <- price(mc);
                marketingPercent(nmc) <- marketingPercent(mc);
                overCopy(nmc, mc);
            }
            FOR conditionList(FixedMarketingCondition fc) == cl NEW nfc = FixedMarketingCondition DO {
                conditionList(nfc) <- ncl;
                type(nfc) <- type(fc);
                currency(nfc) <- currency(fc);
                monthSum(nfc) <- monthSum(fc);
                isVAT(nfc) <- isVAT(fc);
                in(nfc, ItemGroup g) <- in(fc, g);    
            }    
        }
        SHOW EDIT ContractMarketing = nc DOCKED;
    }
}
EXTEND FORM contractMarketings PROPERTIES DRAW c TOOLBAR copyContractMarketing(c);

hide = ABSTRACT BOOLEAN (ConditionList);

show 'Просмотреть' (ConditionList l)  {
	NEWSESSION {
	    //SHOW conditionList OBJECTS l = l DOCKED READONLY;
	    SHOW EDIT  ConditionList  = l DOCKED READONLY;
	}    
} TOOLBAR; 

EXTEND FORM contractMarketing
    PROPERTIES DRAW l TOOLBAR SHOWIF PREV (c IS ContractMarketing)  copyConditionList(l), addConditionList(c)
    PROPERTIES (l) SHOWIF (NOT hide(l) AND PREV (c IS ContractMarketing)) NEWSESSION EDIT, DELETE 
    PROPERTIES  show(l) SHOWIF (hide(l) AND PREV (c IS ContractMarketing))
;

//CONSTRAINT NOT (dateFrom(ConditionList d1) > dateTo(ConditionList d2) OR dateTo(d1) < dateFrom(d2))
//    AND contractMarketing(d1) == contractMarketing(d2) AND d1 != d2 MESSAGE 'Пересечение сроков действия сопроводительных листов';

NAVIGATOR {
    dashboardNavigator {
        NEW FOLDER marketing 'Маркетинг' {
            NEW contractMarketings;
            NEW stockGroupMarketings;
        }
    }
}
importContractMarketings 'Импорт договоров' ()  { 
    
    LOCAL groupNumber = INTEGER (INTEGER);
    LOCAL idStock = STRING[10](INTEGER);
    LOCAL inGroup = BOOLEAN (Stock, INTEGER);
    
    LOCAL number = STRING[48](INTEGER);
    LOCAL dfrom = DATE (INTEGER);
    LOCAL dto = DATE (INTEGER);
    LOCAL name = STRING[100](INTEGER);
    LOCAL prolongation = BOOLEAN (INTEGER);
    LOCAL nameSupplier = STRING[100](INTEGER);
    LOCAL idSupplier = STRING[10](INTEGER);
    LOCAL customer = STRING[100](INTEGER);
    LOCAL delay = INTEGER (INTEGER);
    LOCAL contractType = STRING[100](INTEGER);
    LOCAL period = STRING[10](INTEGER);
    LOCAL fromCount = INTEGER (INTEGER);
    LOCAL fromPayment = INTEGER (INTEGER);
    LOCAL idList = STRING[30](INTEGER);
    LOCAL conditionType = STRING[50](INTEGER);
    LOCAL dfList = DATE (INTEGER);
    LOCAL dtList = DATE (INTEGER);
    LOCAL calcBase = STRING[100](INTEGER);
    LOCAL fixedType = STRING[100](INTEGER);
    LOCAL category = STRING[100](INTEGER);
    LOCAL subCategory = STRING[100](INTEGER);
    LOCAL brand = STRING[100](INTEGER);
    LOCAL country = STRING[100](INTEGER);
    LOCAL weight = STRING[100](INTEGER);
    LOCAL region = STRING[100](INTEGER);
    LOCAL stocks = STRING[10](INTEGER);
    LOCAL barcode = STRING[15](INTEGER);
    LOCAL percent = NUMERIC[6,4](INTEGER);
    LOCAL exeption = STRING[15](INTEGER);
    LOCAL currency = STRING[10](INTEGER);
    LOCAL sum = NUMERIC[10,2](INTEGER);
    
    INPUT f = EXCELFILE DO {
    
        IMPORT XLS NOHEADER SHEET 2 FROM f AS EXCELFILE TO groupNumber = A, idStock = B;
        
        FOR imported(INTEGER i) DO {
            inGroup(Stock s, INTEGER g) <- id(s) == idStock(i) WHERE (g == (GROUP MAX groupNumber(INTEGER ii) IF ii < i));
        }
        
        IMPORT XLS NOHEADER FROM f AS EXCELFILE TO number, dfrom, dto, name, prolongation, nameSupplier, idSupplier, customer, 
        delay, contractType, period, fromCount, fromPayment, idList, conditionType, dfList, dtList, calcBase, fixedType, 
        category, subCategory, brand, country, weight, region, stocks, barcode, percent, exeption, currency, sum;

        FOR [GROUP MIN INTEGER i IF i > 0 BY number(i), dfrom(i), dto(i), idSupplier(i)]
        (STRING[48] number, DATE df, DATE dt, STRING[100] sup) NEW c = ContractMarketing DO {
            number(c) <- number;
            Contract.dateFrom(c) <- df;
            Contract.dateTo(c) <- dt;
            supplier(c) <- legalEntity(sup);
        }
        FOR INTEGER i == [GROUP MIN INTEGER ii BY  number(ii), dfrom(ii), dto(ii), idSupplier(ii)](STRING[48] number, DATE df, DATE dt, STRING[10] idsup)
            AND ContractMarketing c == (GROUP LAST ContractMarketing cc  ORDER cc WHERE number(cc) = number AND Contract.dateFrom(cc) == df AND Contract.dateTo(cc) == dt AND id(supplier(cc)) == idsup) DO {
            
            name(c) <- name(i);
            prolongation(c) <- prolongation(i);
            customer(c) <- OVERRIDE (GROUP MAX LegalEntity l IF isSubstring(name(l), customer(i)) AND active(l)), (GROUP MAX LegalEntity l IF id(l) = customer(i) AND active(l));
            paymentCondition(c) <- (GROUP MAX PaymentCondition pc IF countDays(PaymentPeriod pp) == delay(i) AND paymentCondition(pp) == pc) ;
            contractType(c) <- (GROUP MAX ContractType t IF name(t) == contractType(i));
            period(c) <- (GROUP MAX Period p IF name(p) == period(i));
            fromCount(c) <- fromCount(i) == 1;
            fromPayment(c) <- fromPayment(i) == 1;
        }
                
        FOR [GROUP MIN INTEGER i IF i > 0 BY number(i), dfrom(i), dto(i), idSupplier(i), dfList(i), dtList(i)](STRING[48] n, DATE df, DATE dt, STRING[10] ids, DATE dfl, DATE dtl)
            NEW c = ConditionList DO {
                contractMarketing(c) <- (GROUP LAST ContractMarketing m ORDER m WHERE number(m) == n AND Contract.dateFrom(m) = df AND Contract.dateTo(m) = dt AND id(supplier(m)) = ids);
                dateFrom(c) <- dfl;
                dateTo(c) <- dtl;
        }  
        
        FOR imported(INTEGER i) AND number(ContractMarketing c) == number(i) AND Contract.dateFrom(c) == dfrom(i) 
            AND Contract.dateTo(c) == dto(i) AND id(supplier(c)) == idSupplier(i) AND i > 0 DO {
                    
            FOR ConditionList l == (GROUP LAST ConditionList ll ORDER ll WHERE dateFrom(ll) == dfList(i) AND dateTo(ll) == dtList(i) AND contractMarketing(ll) == c) DO {
                                
                IF calcBase(i) THEN NEW mc = MarketingCondition {
                    
                    conditionList(mc) <- l;
                    
                    calcBase(l, ConditionType t) <- (GROUP LAST CalcBase b ORDER b WHERE name(b) == calcBase(i)) 
                                                    WHERE t == (GROUP LAST ConditionType tt ORDER tt WHERE name(tt) == conditionType(i));
                                                    
                    conditionType(mc) <- GROUP LAST ConditionType t ORDER t WHERE name(t) == conditionType(i);
                                                    
                    itemGroup(mc) <- IF upper(subCategory(i)) == 'ВСЕ' THEN GROUP LAST SkuGroup g ORDER g WHERE name(g) == category(i)
                                     ELSE GROUP LAST SkuGroup g ORDER g WHERE name(g) == subCategory(i);
                    
                    brand(mc) <- brandName(brand(i));
                    country(mc) <- countryName(country(i));
                    weighted(mc) <- GROUP LAST Weighted w ORDER w WHERE name(w) == weight(i);
                    region(mc) <- GROUP LAST Region r ORDER r WHERE name(r) == upper(region(i));
                    inStock(mc, Stock s) <- id(s) == stocks(i) OR inGroup(s, INTEGER (stocks(i)));
                    item(mc) <- GROUP LAST Item it ORDER it WHERE id(it) == barcode(i);
                    marketingPercent(mc) <- round2(percent(i) * 100.0);
                    isException(mc) <- exeption(i) == 'Исключение';
                }
                ELSE NEW fc = FixedMarketingCondition {
                    
                    conditionList(fc) <- l;
                    type(fc) <- GROUP LAST FixedMarketingType t ORDER t WHERE name(t) == fixedType(i);
                    
                    LOCAL group = ItemGroup();
                    group() <- IF subCategory(i) == 'Все' THEN GROUP LAST SkuGroup g ORDER g WHERE name(g) == category(i)
                                                          ELSE GROUP LAST SkuGroup g ORDER g WHERE name(g) == subCategory(i);
                    in(fc, ItemGroup g) <- g == group();
                    
                    currency(fc) <- GROUP LAST Currency r ORDER r WHERE shortName(r) == currency(i);
                    monthSum(fc) <- sum(i);
                }
            }
        }
    }
}

EXTEND FORM contractMarketings PROPERTIES DRAW c TOOLBAR importContractMarketings();

CONSTRAINT ContractMarketing c IS ContractMarketing AND NOT isCompany(customer(c)) AND NOT isReverse(c) CHECKED BY customer[ContractMarketing] 
    MESSAGE 'Получатель не является компанией';

CONSTRAINT ContractMarketing c IS ContractMarketing AND NOT isCompany(supplier(c)) AND isReverse(c) CHECKED BY supplier[ContractMarketing] 
    MESSAGE 'Поставщик не является компанией';