MODULE MarketingInvoice;

REQUIRE MarketingContract, PurchaseInvoice, PurchaseReturnInvoice, SaleLedger;

NAMESPACE Marketing;

CLASS MarketingInvoice 'Акт на оплату';
TABLE marketingInvoice(MarketingInvoice);

contract = DATA ContractMarketing(MarketingInvoice) INDEXED;
numberContract 'Номер договора маркетинга' (MarketingInvoice i) = number(contract(i));
nameContract 'Наименование договора' (MarketingInvoice i) = name(contract(i));
dateContract 'Дата договора' (MarketingInvoice i) = Contract.dateFrom(contract(i));
date 'Дата акта' = DATA DATE (MarketingInvoice);
dateTime 'Дата/время создания' = DATA DATETIME (MarketingInvoice);
dateFromContract 'Дата с (договора)' (MarketingInvoice i) = Contract.dateFrom(contract(i));
dateToContract 'Дата по (договора)' (MarketingInvoice i) = Contract.dateTo(contract(i));
nameContractType 'Тип договора' (MarketingInvoice i) = name(contractType(contract(i)));
dateFrom 'Дата с' = DATA DATE (MarketingInvoice);
dateTo 'Дата по' = DATA DATE (MarketingInvoice);
supplier = DATA LegalEntity (MarketingInvoice);
nameSuppler 'Поставщик' (MarketingInvoice i) = name(supplier(i));
customer = DATA LegalEntity (MarketingInvoice);
nameCustomer 'Покупатель' (MarketingInvoice i)= name(customer(i));

scanFile 'Файл' = DATA FILE (MarketingInvoice);

inputScanFile 'Загрузить' (MarketingInvoice i)  { INPUT f = FILE DO { scanFile(i) <- f; } }
openScanFile 'Просмотреть' (MarketingInvoice i)  { open(scanFile(i)); }
deleteScanFile 'Удалить' (MarketingInvoice i)  { scanFile(i) <- NULL; }

@defineDocumentHeaderNumber(MarketingInvoice, BPSTRING[2]);

@defineNumeratedDefault(MarketingInvoice, 'Акты оплаты маркетинга', 'АМ');

@defineDocumentHeaderPosted(MarketingInvoice);
     
CLASS MarketingInvoiceDetail 'Строка акта на оплату';
TABLE marketingInvoiceDetail(MarketingInvoiceDetail);

marketingInvoice 'Акт' = DATA MarketingInvoice (MarketingInvoiceDetail) NONULL DELETE;

countMarketingInvoiceDetail = GROUP SUM 1 BY marketingInvoice(MarketingInvoiceDetail d);

@defineDocumentDetailPosted(marketingInvoice, MarketingInvoiceDetail);

dateFrom 'Дата с' (MarketingInvoiceDetail d) = dateFrom(marketingInvoice(d));
dateTo 'Дата по' (MarketingInvoiceDetail d) = dateTo(marketingInvoice(d));

sku = DATA Sku (MarketingInvoiceDetail);
nameSku 'Товар' (MarketingInvoiceDetail d) = name(sku(d));
idBarcodeSku 'Штрихкод' (MarketingInvoiceDetail d) = idBarcode(sku(d));
idSku 'Код' (MarketingInvoiceDetail d) = id(sku(d));

stock = DATA Stock (MarketingInvoiceDetail);
nameStock 'Склад' (MarketingInvoiceDetail d) = name(stock(d));

conditionTypeMarketing = DATA ConditionType(MarketingInvoiceDetail);
nameConditionType 'Вид маркетинга' (MarketingInvoiceDetail d) = name(conditionTypeMarketing(d)) CHARWIDTH 25;

in (MarketingInvoice i, ConditionType t) = GROUP SUM 1 BY marketingInvoice(MarketingInvoiceDetail d), conditionTypeMarketing(d);
marketingTypes 'Виды маркетинга' (MarketingInvoice i) = GROUP CONCAT name(ConditionType t) IF in(i, t), ', ' ORDER t CHARWIDTH 25;

calcBase = DATA CalcBase (MarketingInvoiceDetail);
nameCalcBase 'База расчета' (MarketingInvoiceDetail d) = name(calcBase(d));

marketingPercent 'Процент маркетинга' = DATA NUMERIC[5,2] (MarketingInvoiceDetail);
quantity 'Кол-во' = DATA NUMERIC[16,5] (MarketingInvoiceDetail);
sum 'Сумма (согл. базе расчета)' = DATA NUMERIC[18,2] (MarketingInvoiceDetail);
returnSum 'Сумма возврата' = DATA NUMERIC[18,2] (MarketingInvoiceDetail);
sumMarketing 'Сумма маркетинга' = DATA NUMERIC[18,5] (MarketingInvoiceDetail);

condition = DATA MarketingCondition (MarketingInvoiceDetail) INDEXED;
conditionList(MarketingInvoiceDetail md) = conditionList(condition(md));

fixedCondition = DATA FixedMarketingCondition (MarketingInvoiceDetail);

INDEX marketingInvoice(MarketingInvoiceDetail d), condition(d);

isCreated 'Создан' (ContractMarketing c, DATE df, DATE dt) =
    GROUP SUM 1 IF contract(MarketingInvoice i) == c AND dateFrom(i) == df AND dateTo(i) == dt;

sumVAT 'Сумма с НДС (расчетная)' (MarketingInvoice i) = 
    round2([GROUP SUM sumMarketing(MarketingInvoiceDetail d) BY marketingInvoice(d)](i));

userSumVAT = DATA NUMERIC[18,2](MarketingInvoice);
overSumVAT 'Сумма с НДС' (MarketingInvoice i) = OVERRIDE userSumVAT(i), sumVAT(i);

VATSum 'Сумма НДС' (MarketingInvoice i) = OVERRIDE (round2(overSumVAT(i) * 0.20 / 1.20) IF NOT contractType(contract(i)) == ContractType.tradeBonus), 0.00;
sum 'Сумма' (MarketingInvoice i) = overSumVAT(i) (-) VATSum(i);
valueVAT 'НДС' (MarketingInvoice i) = (OVERRIDE (20 IF VATSum(i) > 0), 0);

isReverse 'Обратный' (MarketingInvoiceDetail d) = isReverse(contractMarketing(condition(d)));

averageMarketingPercent 'Процент маркетинга' (MarketingInvoice i) = 
    NUMERIC[7,2] (100 * overSumVAT(i) / [GROUP SUM sum(MarketingInvoiceDetail d) BY marketingInvoice(d)](i));

sumCalcBase 'Сумма (согл. базе расчета)' = GROUP SUM (sum(MarketingInvoiceDetail d) (-) returnSum(d)) BY marketingInvoice(d);

sumCalcBaseCustomer (Sku sk, Stock st, MarketingInvoice i) = 
    GROUP MAX (sum(MarketingInvoiceDetail d) (-) returnSum(d)) IF ((legalEntity(stock(d)) == customer(marketingInvoice(d)) AND NOT isReverse(d)) OR (legalEntity(stock(d)) == supplier(marketingInvoice(d)) AND isReverse(d)))  BY sku(d), stock(d), marketingInvoice(d);
sumCalcBaseCustomer 'Сумма (согл. базе расчета) (получателя)' (MarketingInvoice i) = GROUP SUM sumCalcBaseCustomer(Sku sk, Stock st, i);
averageMarketingPercentCustomer 'Процент маркетинга (получателя)' (MarketingInvoice i) = NUMERIC[7,2] (overSumVAT(i) / sumCalcBaseCustomer(i) * 100);

overSumCalcBase 'Сумма (согл. базе расчета)' (MarketingInvoice i) = CASE 
                                WHEN NOT contractType(contract(i)) == ContractType.tradeBonus THEN sumCalcBase(i)
                                WHEN contractType(contract(i)) == ContractType.tradeBonus THEN sumCalcBaseCustomer(i);

overAverageMarketingPercent 'Процент маркетинга' (MarketingInvoice i) = CASE 
                       WHEN NOT contractType(contract(i)) == ContractType.tradeBonus THEN averageMarketingPercent(i)
                       WHEN contractType(contract(i)) == ContractType.tradeBonus THEN averageMarketingPercentCustomer(i);

numberTask 'Номер задания' = DATA STRING[15] (MarketingInvoice);
dateTask 'Дата задания' = DATA DATE (MarketingInvoice);
numberAttachment 'Номер приложения' = DATA STRING[15] (MarketingInvoice);
dateAttachment 'Дата приложения' = DATA DATE (MarketingInvoice);
numberAgreement 'Номер соглашения' = DATA STRING[15] (MarketingInvoice);
dateAgreement 'Дата соглашения' = DATA DATE (MarketingInvoice);
numberProtocol 'Номер протокола' = DATA STRING[15] (MarketingInvoice);
dateFromProtocol 'Дата с протокола' = DATA DATE (MarketingInvoice);
dateToProtocol 'Дата по протокола' = DATA DATE (MarketingInvoice);

overMinSum 'Минимальная сумма закупок' (MarketingInvoice i) = CASE 
    WHEN sumCalcBase(i) >= 10000 AND NOT contractType(contract(i)) == ContractType.tradeBonus THEN (floor(sumCalcBase(i)/1000))*1000
    WHEN sumCalcBase(i) < 10000 AND NOT contractType(contract(i)) == ContractType.tradeBonus  THEN (floor(sumCalcBase(i)/100))*100
    WHEN sumCalcBaseCustomer(i) >= 10000 AND contractType(contract(i)) == ContractType.tradeBonus THEN (floor(sumCalcBaseCustomer(i)/1000))*1000
    WHEN sumCalcBaseCustomer(i) < 10000 AND contractType(contract(i)) == ContractType.tradeBonus  THEN (floor(sumCalcBaseCustomer(i)/100))*100;

numberLE (STRING[100] c) = CASE 
                                    WHEN isSubstring(upper(c), upper('Либретик')) THEN 'Л'
                                    WHEN isSubstring(upper(c), upper('Чистые Родники')) THEN 'ЧР'
                                    WHEN isSubstring(upper(c), upper('Наваколле')) THEN 'Н'
                                    WHEN isSubstring(upper(c), upper('Фудлогистик')) THEN 'Ф'
                                    WHEN isSubstring(upper(c), upper('Зорина')) THEN 'З'
                                    WHEN isSubstring(upper(c), upper('Либретик Групп')) THEN 'ЛГ';

numberCT (STRING[100] c) = CASE 
                                    WHEN isSubstring(upper(c), upper('Торговая премия')) THEN 'Т'
                                    WHEN isSubstring(upper(c), upper('Информационные услуги')) THEN 'И'
                                    WHEN isSubstring(upper(c), upper('Рекламные услуги')) THEN 'Р'
                                    WHEN isSubstring(upper(c), upper('Аудио-реклама')) THEN 'А';

skipMarketingCondition = ABSTRACT BOOLEAN (MarketingCondition, Stock, Sku, NUMERIC[16,5]);

marketingCondition (ContractMarketing cm, ConditionType t, Stock st, Sku sk, DATE d, NUMERIC[16,5] p) = 
    GROUP LAST MarketingCondition c ORDER isException(c), c
    WHERE inConditionStock(c, st)
    AND d >= dateFrom(c) AND NOT d > dateTo(c)
    AND (brand(sk) == brand(c) OR NOT brand(c)) 
    AND (country(sk) == country(c) OR NOT country(c))
    AND (isParent(itemGroup(sk), itemGroup(c)) OR NOT itemGroup(c)) 
    AND (in(sk, c) OR NOT countItems(c))
    AND ((passScales(sk) AND weighted(c) == Weighted.yes) OR (NOT passScales(sk) AND weighted(c) == Weighted.no) OR NOT weighted(c))
    AND (price(c) == p OR NOT price(c))
    AND NOT skipMarketingCondition(c, st, sk, p)
    BY contractMarketing(c), conditionType(c);

overCalcSumMarketing = ABSTRACT NUMERIC[18,2] (MarketingInvoiceDetail);
WHEN LOCAL (CHANGED (sum(MarketingInvoiceDetail d)) OR CHANGED (returnSum(d)) OR CHANGED (marketingPercent(d)) OR CHANGED (overCalcSumMarketing(d))) AND NOT CHANGED (sumMarketing(d)) DO {
        sumMarketing(d) <- OVERRIDE overCalcSumMarketing(d),  ((sum(d) (-) returnSum(d)) * marketingPercent(d) / 100);
}

//CONSTRAINT (conditionTypeMarketing(MarketingInvoiceDetail d) == ConditionType.retail OR conditionTypeMarketing(d) == ConditionType.logistic OR 
//            conditionTypeMarketing(d) == ConditionType.merch OR conditionTypeMarketing(d) == ConditionType.defects) AND NOT condition(d) MESSAGE 'Для строки акта маркетинга должно быть условие маркетинга';

CLASS ConditionRange 'Диапазон условий';
TABLE conditionRange(ConditionRange);

conditionList = DATA ConditionList (ConditionRange) NONULL DELETE INDEXED;
contractMarketing (ConditionRange r) = contractMarketing(conditionList(r));

weightFrom 'Вес от' = DATA NUMERIC[18,4](ConditionRange);
weightTo 'Вес до' = DATA NUMERIC[18,4](ConditionRange);

sumFrom 'Сумма от' = DATA NUMERIC[18,4](ConditionRange);
sumTo 'Сумма до' = DATA NUMERIC[18,4](ConditionRange);

quantityFrom 'Кол-во от' = DATA NUMERIC[18,4](ConditionRange);
quantityTo 'Кол-во до' = DATA NUMERIC[18,4](ConditionRange);

marketingPercent '% маркетинга' = DATA NUMERIC[5,2](ConditionRange);

EXTEND FORM conditionList 
    OBJECTS r = ConditionRange
    PROPERTIES (r) weightFrom, weightTo, sumFrom, sumTo, quantityFrom, quantityTo, marketingPercent, NEW, DELETE 
    FILTERS conditionList(r) == l
;

DESIGN conditionList {
    conditions {
        MOVE BOX (r) { caption = 'Диапазон'; }
    }
}

EXTEND FORM contractMarketing
    OBJECTS r = ConditionRange
    PROPERTIES (r) READONLY weightFrom, weightTo, sumFrom, sumTo, quantityFrom, quantityTo, marketingPercent
    FILTERS conditionList(r) == l
;

DESIGN contractMarketing {
    conditions {
        MOVE BOX (r) { caption = 'Диапазон'; }
    }
}

EXTEND FORM contractMarketings
    OBJECTS r = ConditionRange
    PROPERTIES (r) READONLY weightFrom, weightTo, sumFrom, sumTo, quantityFrom, quantityTo, marketingPercent
    FILTERS conditionList(r) == l
;

DESIGN contractMarketings {
    conditions {
        MOVE BOX (r) { caption = 'Диапазон'; }
    }
}
quantitySku 'Кол-во поступившего/проданного товара' (MarketingInvoice i, MarketingCondition c) = 
    GROUP SUM quantity(MarketingInvoiceDetail dd) IF marketingInvoice(dd) == i AND condition(dd) == c;
sumSku 'Сумма поступившего/проданного товара' (MarketingInvoice i, MarketingCondition c) = 
    GROUP SUM (sum(MarketingInvoiceDetail dd) (-) returnSum(dd)) IF marketingInvoice(dd) == i AND condition(dd) == c;

quantitySku 'Кол-во поступившего/проданного товара' (MarketingInvoiceDetail d) = 
    quantitySku(marketingInvoice(d), condition(d));
sumSku 'Сумма поступившего/проданного товара' (MarketingInvoiceDetail d) = 
    sumSku(marketingInvoice(d), condition(d));
weightSku 'Вес поступившего/проданного товара' (MarketingInvoiceDetail d) = quantitySku(marketingInvoice(d), condition(d)) * netWeight(sku(d));

in (MarketingInvoiceDetail d, ConditionRange r) = conditionList(condition(d)) == conditionList(r) AND 
    NOT quantitySku(d) < quantityFrom(r) AND NOT quantitySku(d) > quantityTo(r) AND 
    NOT sumSku(d) < sumFrom(r) AND NOT sumSku(d) > sumTo(r) AND 
    NOT weightSku(d) < weightFrom(r) AND NOT weightSku(d) > weightTo(r) AND NOT marketingPercent(d);

lastConditionRange (MarketingInvoiceDetail d) = GROUP LAST ConditionRange r ORDER r IF in(d, r);
conditionRange = DATA ConditionRange(MarketingInvoiceDetail);

in = DATA BOOLEAN (MarketingInvoiceDetail, Invoice.InvoiceDetail);

overCreateMarketingInvoice ABSTRACT LIST (ContractMarketing, MarketingInvoice, DATE, DATE);
afterCreateMarketingInvoice ABSTRACT LIST (MarketingInvoice);

skipMarketing = ABSTRACT BOOLEAN (Purchase.UserInvoiceDetail);
skipMarketing = ABSTRACT BOOLEAN (PurchaseReturn.UserInvoiceDetail);

overQuantityMarketing = ABSTRACT NUMERIC[16,5] (Purchase.UserInvoiceDetail);
overSumMarketing = ABSTRACT NUMERIC[18,4] (Purchase.UserInvoiceDetail);
overInvoiceSumMarketing = ABSTRACT NUMERIC[18,4] (Purchase.UserInvoiceDetail);

quantityMarketing(Purchase.UserInvoiceDetail d) = OVERRIDE overQuantityMarketing(d), quantity(d);
sumMarketing(Purchase.UserInvoiceDetail d) = OVERRIDE overSumMarketing(d), sum(d);
invoiceSumMarketing(Purchase.UserInvoiceDetail d) = OVERRIDE overInvoiceSumMarketing(d), invoiceSum(d);

createDetailSale ABSTRACT (MarketingInvoice, ContractMarketing, DATE, DATE);

customCreateMarketingInvoice 'Создать акт на оплату' ABSTRACT LIST (ContractMarketing, DATE,  DATE);
useCustomCreateMarketingInvoice = ABSTRACT BOOLEAN ();

createMarketingInvoice 'Создать акт на оплату' (ContractMarketing c, DATE df, DATE dt)  { 
    NEWSESSION NEW i = MarketingInvoice {
    
        contract(i) <- c;
                 
        date(i) <- jumpWorkdays(defaultCountry(), sum(lastDayOfMonth(dt), 1), -1);
        dateTask(i) <- jumpWorkdays(defaultCountry(), subtract(firstDayOfMonth(df), 1), 1);
        dateAttachment(i) <- df;                        
        dateAgreement(i) <- df;                          
        dateFromProtocol(i) <- df; 
        dateToProtocol(i) <- jumpWorkdays(defaultCountry(), lastDayOfMonth(dt), 1);
        dateFrom (i) <- df;
        dateTo (i) <- dt;
        supplier(i) <- supplier(c);
        customer(i) <- customer(c);
        dateTime(i) <- currentDateTime();

        number(i) <-CONCAT '/', extractDay(date(i)) + lpad(TEXT (extractMonthNumber(currentDate())),2,'0'), numberLE(nameCustomer(c)), numberCT(nameContractType(c)); 
        numberAttachment(i) <- CONCAT '/', extractDay(date(i)) + lpad(TEXT (extractMonthNumber(currentDate())),2,'0'), numberLE(nameCustomer(c)), numberCT(nameContractType(c)); 
        numberAgreement(i) <- CONCAT '/', extractDay(date(i)) + lpad(TEXT (extractMonthNumber(currentDate())),2,'0'), numberLE(nameCustomer(c)), numberCT(nameContractType(c)); 
        numberProtocol(i) <- CONCAT '/', extractDay(date(i)) + lpad(TEXT (extractMonthNumber(currentDate())),2,'0'), numberLE(nameCustomer(c)), numberCT(nameContractType(c)); 
        numberTask(i) <- CONCAT '/', extractDay(date(i)) + lpad(TEXT (extractMonthNumber(currentDate())),2,'0'), numberLE(nameCustomer(c)), numberCT(nameContractType(c)); 
        
        IF isReverse(c) THEN {        
            createDetailSale(i, c, df, dt);
        }
        ELSE {
            LOCAL in = BOOLEAN (Purchase.UserInvoiceDetail);
            in(Purchase.UserInvoiceDetail d) <- TRUE WHERE supplier(d) == supplier(c) AND date(d) >= df AND date(d) <= dt AND isPosted(d) AND NOT skipMarketing(d);
    
            LOCAL marketingCondition = MarketingCondition (Purchase.UserInvoiceDetail, ConditionType);
            marketingCondition (Purchase.InvoiceDetail d, ConditionType t) <- marketingCondition(c, t, customerStock(d), sku(d), date(d), price(d)) WHERE in(d);
    
            LOCAL in = BOOLEAN (PurchaseReturn.UserInvoiceDetail);
            in(PurchaseReturn.UserInvoiceDetail d) <- TRUE WHERE supplier(d) == supplier(c) AND date(d) >= df AND date(d) <= dt AND isPosted(d) AND NOT skipMarketing(d);
            
            LOCAL marketingCondition = MarketingCondition (PurchaseReturn.UserInvoiceDetail, ConditionType);
            marketingCondition (PurchaseReturn.InvoiceDetail d, ConditionType t) <- marketingCondition(c, t, customerStock(d), sku(d), date(d), price(d)) WHERE in(d);
            
            LOCAL quantityPurchase = NUMERIC[16,5] (MarketingCondition, Sku, Stock);
            quantityPurchase(MarketingCondition mc, Sku sk, Stock st) <- [ GROUP SUM quantityMarketing(Purchase.InvoiceDetail d) BY marketingCondition(d, ConditionType t), sku(d), customerStock(d)](mc, sk, st);
    
            LOCAL quantityPurchaseReturn = NUMERIC[16,5] (MarketingCondition, Sku, Stock);
            quantityPurchaseReturn(MarketingCondition mc, Sku sk, Stock st) <- [ GROUP SUM quantity(PurchaseReturn.InvoiceDetail d) BY marketingCondition(d, ConditionType t), sku(d), customerStock(d)](mc, sk, st);
            
            FOR (quantityPurchase(MarketingCondition mc, Sku sk, Stock st) OR quantityPurchaseReturn(mc, sk, st))
                AND (calcBase(mc) == CalcBase.supplier 
                OR calcBase(mc) == CalcBase.supplierVAT)
                INLINE NEW md = MarketingInvoiceDetail DO {
                marketingInvoice(md) <- i;
                condition(md) <- mc;
                conditionTypeMarketing(md) <- conditionType(mc);
                calcBase(md) <- calcBase(mc);
                sku(md) <- sk;
                stock(md) <- st;
                quantity(md) <- quantityPurchase(mc, sk, st) (-) quantityPurchaseReturn(mc, sk, st);
                marketingPercent(md) <- marketingPercent(mc);
                sum (md) <- CASE 
                                WHEN calcBase(mc) == CalcBase.supplierVAT THEN 
                                    [ GROUP SUM invoiceSumMarketing(Purchase.InvoiceDetail d) BY marketingCondition(d, ConditionType t), sku(d), customerStock(d)](mc, sk, st)
                                WHEN calcBase(mc) == CalcBase.supplier THEN 
                                    [ GROUP SUM sumMarketing(Purchase.InvoiceDetail d) BY marketingCondition(d, ConditionType t), sku(d), customerStock(d)](mc, sk, st);
                returnSum(md) <- CASE 
                                    WHEN calcBase(mc) == CalcBase.supplierVAT THEN 
                                        [ GROUP SUM invoiceSum(PurchaseReturn.InvoiceDetail d) BY marketingCondition(d, ConditionType t), sku(d), customerStock(d)](mc, sk, st)
                                    WHEN calcBase(mc) == CalcBase.supplier THEN
                                        [ GROUP SUM sum(PurchaseReturn.InvoiceDetail d) BY marketingCondition(d, ConditionType t), sku(d), customerStock(d)](mc, sk, st);
                       
                in(md, Purchase.InvoiceDetail d) <- TRUE WHERE [GROUP SUM 1 IF date(d) >= df AND date(d) <= dt BY marketingCondition(d, ConditionType t), sku(d), customerStock(d)](mc, sk, st);                 
                in(md, PurchaseReturn.InvoiceDetail d) <- TRUE WHERE [GROUP SUM 1 BY marketingCondition(d, ConditionType t), sku(d), customerStock(d)](mc, sk, st);
            }
        }
                
        IF (GROUP SUM 1 IF contractMarketing(MarketingCondition mc) = c AND (calcBase(mc) == CalcBase.turnoverVAT 
                                                                            OR calcBase(mc) == CalcBase.turnover
                                                                            OR calcBase(mc) == CalcBase.turnoverCost
                                                                            OR calcBase(mc) == CalcBase.turnoverCostVAT)) THEN {

            LOCAL quantity = NUMERIC[16,5] (Sku, Stock);
            quantity(Sku sk, Stock st) <- GROUP SUM quantitySold(Batch b, st, DATE d) IF d >= df AND d <= dt AND supplier(b) == supplier(c) AND sku(b) == sk;
            
            LOCAL sum = NUMERIC[16,5] (Sku, Stock);
            sum(Sku sk, Stock st) <- GROUP SUM sumSold(Batch b, st, DATE d) IF d >= df AND d <= dt AND supplier(b) == supplier(c) AND sku(b) == sk;
            
            LOCAL marketingCondition = MarketingCondition (Sku, Stock, ConditionType);
            marketingCondition (Sku sk, Stock st, ConditionType t) <- marketingCondition(c, t, st, sk, df, round2(sum(sk, st) / quantity(sk, st))) WHERE quantity(sk, st);
            
            FOR NUMERIC[16,5] q == [ GROUP SUM quantity(Sku sk, Stock st) BY marketingCondition(sk, st, ConditionType t), sk, st](MarketingCondition mc, Sku sk, Stock st)
                AND CalcBase cb = calcBase(mc) AND  
                (cb == CalcBase.turnoverVAT 
                 OR cb == CalcBase.turnover
                 OR cb == CalcBase.turnoverCost
                 OR cb == CalcBase.turnoverCostVAT)
                 NOINLINE (cb) NEW md = MarketingInvoiceDetail DO {
                marketingInvoice(md) <- i;
                conditionTypeMarketing(md) <- conditionType(mc);
                calcBase(md) <- calcBase(mc);
                sku(md) <- sk;
                stock(md) <- st;
                condition(md) <- mc;
                quantity(md) <- q;
                marketingPercent(md) <- marketingPercent(mc);
                sum (md) <- CASE
                                WHEN cb == CalcBase.turnoverVAT THEN
                                    [ GROUP SUM sum(Sku ssk, Stock sst) BY marketingCondition(ssk, sst, ConditionType t), ssk, sst](mc, sk, st) 
                                WHEN cb == CalcBase.turnover THEN 
                                    [ GROUP SUM (sumSold(Batch b, Stock s, DATE d) (-) sumVATSold(b, s, d)) IF supplier(b) == supplier(c) AND d >= df AND d <= dt BY marketingCondition(sku(b), s, ConditionType t), sku(b), s](mc, sk, st) 
                                WHEN cb == CalcBase.turnoverCost THEN
                                    [ GROUP SUM costSumSold(Batch b, Stock s, DATE d) IF supplier(b) == supplier(c) AND d >= df AND d <= dt BY marketingCondition(sku(b), s, ConditionType t), sku(b), s](mc, sk, st) 
                                WHEN cb == CalcBase.turnoverCostVAT THEN
                                    [ GROUP SUM (costSumSold(Batch b, Stock s, DATE d) * (100 + valueVAT(b))/100) IF supplier(b) == supplier(c) AND d >= df AND d <= dt BY marketingCondition(sku(b), s, ConditionType t), sku(b), s](mc, sk, st); 
            }
        }
        FOR contractMarketing(FixedMarketingCondition mc) == c AND dateFrom(conditionList(mc)) <= dt AND NOT dateTo(conditionList(mc)) < df DO NEW md = MarketingInvoiceDetail {
            marketingInvoice(md) <- i;
            conditionTypeMarketing(md) <- ConditionType.fixed;
            fixedCondition(md) <- mc;
            sumMarketing(md) <- CASE 
                                    WHEN daysInclBetweenDates(df, dt) <= 31 THEN monthSum(mc) * (OVERRIDE rateOn(typeExchange('НБРБ (BYR)'), currency(mc), date(i)), 1)
                                    WHEN daysInclBetweenDates(df, dt) >= 90 THEN monthSum(mc) * 3 * (OVERRIDE rateOn(typeExchange('НБРБ (BYR)'), currency(mc), date(i)), 1);
        }
        FOR lastConditionRange(MarketingInvoiceDetail d) AND marketingInvoice(d) == i DO {
            marketingPercent(d) <- marketingPercent(lastConditionRange(d));
            conditionRange(d) <- lastConditionRange(d);
        }

        overCreateMarketingInvoice(c, i, df, dt);
        afterCreateMarketingInvoice(i);

        APPLY;
    }
}

selected 'Отм.' = DATA LOCAL BOOLEAN (ContractMarketing);

resetAllSelected 'Сбросить все отмеченные' ()  { 
    FOR selected(ContractMarketing c) DO {
        selected(c) <- NULL;
    }
} 

createMarketingInvoiceMonth 'Отметить договоры за месяц' (DATE df, DATE dt)  { 
    FOR Contract.dateFrom(ContractMarketing c) <= dt AND NOT Contract.dateTo(c) < df AND period(c) == Period.month DO {
        selected(c) <- TRUE;
    }
}

createMarketingInvoiceQuarter 'Отметить договоры за квартал' (DATE df, DATE dt)  { 
    FOR Contract.dateFrom(ContractMarketing c) <= dt AND NOT Contract.dateTo(c) < df AND period(c) == Period.quarter DO {
        selected(c) <- TRUE;
    }
}

//skip = ABSTRACT BOOLEAN(MarketingInvoice, MarketingInvoice);
//
//CONSTRAINT dateFrom(MarketingInvoice i1) == dateFrom(MarketingInvoice i2) AND dateTo(i1) == dateTo(i2) AND contract(i1) == contract(i2) AND i1 != i2 AND NOT skip(i1, i2)
//    MESSAGE 'Акт на оплату с такими датами уже существует';
    
countMarketingInvoices 'К-во актов'  = GROUP SUM 1 BY dateFrom(MarketingInvoice i), dateTo(i), contract(i);
checkMarketingInvoices (MarketingInvoice i) = countMarketingInvoices(dateFrom(i), dateTo(i), contract(i))>1;
skipcountMarketingInvoicesData = ABSTRACT BOOLEAN ();
skipcountMarketingInvoices 'Не проверять количество актов на оплату по договору' = DATA BOOLEAN ();
skipcountMarketingInvoicesOver () =  skipcountMarketingInvoicesData() OR  skipcountMarketingInvoices();
EXTEND FORM options
    PROPERTIES () skipcountMarketingInvoices
;
DESIGN options {
    pane{
        NEW marketing{
            fill = 1;
            caption = 'Маркетинг';
            MOVE PROPERTY (skipcountMarketingInvoices());
        }
    }   
}

CONSTRAINT (CHANGED(dateFrom(MarketingInvoice i)) OR CHANGED(dateTo(i)) OR CHANGED(contract(i)) OR CHANGED (isPosted(i)))
    AND isPosted(i) AND checkMarketingInvoices(i) AND NOT skipcountMarketingInvoicesOver()
        MESSAGE 'Акт на оплату с такими датами уже существует';


FORM marketingInvoicesCreate 'Договоры маркетинга'   

    OBJECTS dates = (df = DATE , dt = DATE ) PANEL 
    PROPERTIES dFrom 'Дата с' = VALUE (df), dTo 'Дата по' = VALUE (dt)

    OBJECTS c = ContractMarketing
    PROPERTIES selected(c)
    PROPERTIES (c) READONLY number, Contract.dateFrom, Contract.dateTo, prolongation, nameSupplier, nameCustomer, nameContractType, namePeriod, fromCount, fromPayment
    FILTERS (Contract.dateFrom(c) <= dt AND NOT Contract.dateTo(c) < df)
    
    PROPERTIES DRAW c TOOLBAR resetAllSelected(), createMarketingInvoiceMonth(df, dt), createMarketingInvoiceQuarter(df, dt)
    
    EVENTS ON OK {        
        FOR selected(ContractMarketing cm) DO { 
            IF (NOT isCreated(cm, df, dt)) THEN {
                IF useCustomCreateMarketingInvoice() THEN customCreateMarketingInvoice(cm, df, dt); 
                ELSE  createMarketingInvoice(cm, df, dt);                
            }
            selected(cm) <- NULL;
        }
    }
;

createMarketingInvoices 'Создать акты' ()  { 
    SHOW marketingInvoicesCreate;
}

copyMarketingInvoice 'Копировать акт' (MarketingInvoice i)  { 
    NEWSESSION NEW ni = MarketingInvoice {
        date(ni) <- date(i);
        dateTime(ni) <- currentDateTime();
        dateFrom(ni) <- dateFrom(i);
        dateTo(ni) <- dateTo(i);
        numerator(ni) <- numerator(i);
        series(ni) <- series(i);
        number(ni) <- number(i);
        customer(ni) <- customer(i);
        supplier(ni) <- supplier(i);
        contract(ni) <- contract(i);
        dateTask(ni) <-  dateTask(i);
        dateAttachment(ni) <- dateAttachment(i);                        
        dateAgreement(ni) <- dateAgreement(i);                          
        dateFromProtocol(ni) <- dateFromProtocol(i); 
        dateToProtocol(ni) <- dateToProtocol(i);
        number(ni) <- number(i);      
        numberAttachment(ni) <- numberAttachment(i);                    
        numberAgreement(ni) <- numberAgreement(i);        
        numberProtocol(ni) <- numberProtocol(i);        
        numberTask(ni) <-  numberTask(i); 
        scanFile(ni) <- scanFile(i);
        FOR marketingInvoice(MarketingInvoiceDetail d) == i NEW nd = MarketingInvoiceDetail DO {
            marketingInvoice(nd) <- ni;
            conditionTypeMarketing(nd) <- conditionTypeMarketing(d);
            calcBase(nd) <- calcBase(d);
            sku(nd) <- sku(d);
            stock(nd) <- stock(d);
            quantity(nd) <- quantity(d);
            marketingPercent(nd) <- marketingPercent(d);
            sum (nd) <- sum(d);
            returnSum(nd) <- returnSum(d);
            
        }
        SHOW EDIT MarketingInvoice = ni DOCKED;
    }
}

backgroundSum (MarketingInvoice i) = userSumVAT(i) == overSumVAT(i);
backgroundSku 'Цвет' = ABSTRACT CASE COLOR (MarketingInvoiceDetail);

FORM marketingInvoice 'Акт на оплату'
    OBJECTS i = MarketingInvoice PANEL 
    PROPERTIES (i) isPosted, date, dateTime, nameNumerator, number, series, dateFrom, dateTo, nameSuppler, nameCustomer, 
                   numberContract, dateFromContract, dateToContract, nameContract, nameContractType,
                   numberTask, dateTask,
                   numberAttachment, dateAttachment,
                   numberAgreement, dateAgreement,
                   numberProtocol, dateFromProtocol, dateToProtocol
                            
    PROPERTIES (i) sum, VATSum, overSumVAT BACKGROUND backgroundSum(i), inputScanFile, openScanFile, deleteScanFile
    
    OBJECTS d = MarketingInvoiceDetail
    PROPERTIES (d) idBarcodeSku BACKGROUND backgroundSku(d), idSku SHOWIF showIDs() BACKGROUND backgroundSku(d), nameSku BACKGROUND backgroundSku(d), 
                   nameStock, nameConditionType, marketingPercent, nameCalcBase, quantity, sum, returnSum, sumMarketing, NEW, DELETE 
    FILTERS marketingInvoice(d) = i
    
    PROPERTIES post(i)
    
    EDIT MarketingInvoice OBJECT i
;

DESIGN marketingInvoice {
    NEW head FIRST {
        type = CONTAINERH;
        NEW left {
            caption = 'Параметры';
            MOVE GROUP (numbered, i) FIRST;
            NEW first {
                type = CONTAINERH;
                MOVE PROPERTY (isPosted(i));
                MOVE PROPERTY (date(i));
                MOVE PROPERTY (dateFrom(i));
                MOVE PROPERTY (dateTo(i));
            }
            NEW second {
                type = CONTAINERH;
                MOVE PROPERTY (dateTime(i));
                MOVE PROPERTY (nameNumerator(i));
                MOVE PROPERTY (number(i));
                MOVE PROPERTY (series(i));
            }
            NEW third {
                type = CONTAINERH;
                MOVE PROPERTY (nameSuppler(i));
                MOVE PROPERTY (nameCustomer(i));
            }
            NEW contract {
                type = CONTAINERV;
                caption = 'Договор маркетиинга';
                NEW top {
                    type = CONTAINERH;
                    MOVE PROPERTY (numberContract(i)){
                        caption = 'Номер';
                    }
                    MOVE PROPERTY (nameContract(i)){
                        caption = 'Наименование';
                    }
                }
                NEW bottom {
                type = CONTAINERH;
                    MOVE PROPERTY (dateFromContract(i)){
                        caption = 'Дата с';
                    }
                    MOVE PROPERTY (dateToContract(i)){
                        caption = 'Дата по';
                    }
                    MOVE PROPERTY (nameContractType(i));
                }
            }
            NEW file {
                type = CONTAINERH;
                caption = 'Файл документа';
                MOVE PROPERTY (inputScanFile(i));
                MOVE PROPERTY (openScanFile(i));
                MOVE PROPERTY (deleteScanFile(i));
            }
        }
        NEW right {
            NEW sums {
                caption = 'Суммы';
                type = CONTAINERH;
                MOVE PROPERTY (sum(i));
                MOVE PROPERTY (VATSum(i));
                MOVE PROPERTY (overSumVAT(i));
            }
            NEW attachments {
                caption = 'Приложения';
                NEW task {
                    type = CONTAINERH;
                    MOVE PROPERTY(numberTask(i));
                    MOVE PROPERTY(dateTask(i));
                }
                NEW attachment {
                    type = CONTAINERH;
                    MOVE PROPERTY(numberAttachment(i));
                    MOVE PROPERTY(dateAttachment(i));
                }
                NEW agreement {
                    type = CONTAINERH;
                    MOVE PROPERTY(numberAgreement(i));
                    MOVE PROPERTY(dateAgreement(i));
                }
                NEW protocol {
                    MOVE PROPERTY(numberProtocol(i));
                    NEW protocolDates {
                        type = CONTAINERH;
                        MOVE PROPERTY(dateFromProtocol(i));
                        MOVE PROPERTY(dateToProtocol(i));
                    }
                }
            }
        }
    }
    TOOLBARRIGHT {
        MOVE PROPERTY (post(i)) BEFORE PROPERTY (formApply());
    }
}

FORM marketingInvoices 'Акты на оплату'
    OBJECTS i = MarketingInvoice LAST 
    PROPERTIES (i) READONLY isPosted, series, number, date, dateTime, dateFrom, dateTo, nameSuppler, nameCustomer, dateContract,
                   numberContract, nameContractType, marketingTypes, sum, VATSum, sumVAT, overSumVAT, overMinSum, averageMarketingPercent, sumCalcBase,
                   sumCalcBaseCustomer, averageMarketingPercentCustomer
    PROPERTIES (i) NEWSESSION EDIT, DELETE 

    OBJECTS d = MarketingInvoiceDetail
    PROPERTIES (d) READONLY idBarcodeSku BACKGROUND backgroundSku(d), idSku SHOWIF showIDs() BACKGROUND backgroundSku(d), nameSku BACKGROUND backgroundSku(d), 
                   nameStock, nameConditionType, nameCalcBase, marketingPercent, quantity, sum, returnSum, sumMarketing
    ORDERS nameSku(d), nameStock(d)
    FILTERS marketingInvoice(d) = i
     
    OBJECTS c = MarketingCondition PANEL 
    PROPERTIES (c) READONLY nameItemGroup, nameBrand, nameCountry, nameWeighted , nameRegion, stockGroups, stocks, nameItem, isException
    PROPERTIES READONLY ig 'Группа товара' = name(itemGroup(sku(d))), br 'Бренд' = name(brand(sku(d))) , ct 'Страна' = name(country(sku(d))), 
               w 'Весовой' = passScales(sku(d)), rg 'Регион' = name(region(stock(d)))
    FILTERS condition(d) == c
        
    PROPERTIES DRAW i TOOLBAR createMarketingInvoices(), copyMarketingInvoice(i),  prePost(i)
;

DESIGN marketingInvoices {
    OBJECTS {
        NEW pane {
            fill = 1;
            type = SPLITV;
            MOVE BOX(i);
            NEW invoiceDetails {               
                fill = 1;
                MOVE BOX(c);
                MOVE BOX(d) {
                    PROPERTY (sumMarketing(d)) { pattern = '#,##0.00'; }
                }
            }
        }
    }
}

NAVIGATOR {
    dashboardNavigator {
        marketing 'Маркетинг' {
            NEW marketingInvoices BEFORE stockGroupMarketings;
        }
    }
}