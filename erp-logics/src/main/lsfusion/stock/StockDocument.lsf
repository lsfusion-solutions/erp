MODULE StockDocument;

REQUIRE System, EmployeeStock, Document, Utils, Operation;

CLASS ABSTRACT StockDocumentLedger 'Учетный документ';
TABLE stockDocumentLedger (StockDocumentLedger) FULL;

CLASS ABSTRACT IncStockDocumentLedger 'Учетный документ (приход)' : StockDocumentLedger;
CLASS ABSTRACT OutStockDocumentLedger 'Учетный документ (расход)' : StockDocumentLedger;

type 'Тип процесса' (ledger) = ABSTRACT STRING[50] (StockDocumentLedger) MATERIALIZED;

overOrder  (ledger) = ABSTRACT INTEGER (StockDocumentLedger);
order 'Порядок' = OVERRIDE overOrder(StockDocumentLedger l), 1000000 IF l IS StockDocumentLedger;

close 'Закрыть'  ABSTRACT LIST ( StockDocumentLedger) TOOLBAR;

dateTime 'Дата/время' (ledger) = ABSTRACT DATETIME (StockDocumentLedger) MATERIALIZED INDEXED;
date 'Дата' (StockDocumentLedger ledger) = toDate(dateTime(ledger)) MATERIALIZED INDEXED IN id;

isPosted 'Проведен' (ledger) = ABSTRACT BOOLEAN (StockDocumentLedger) MATERIALIZED;
isClosed 'Закрыт' (ledger) = ABSTRACT BOOLEAN (StockDocumentLedger) MATERIALIZED;
isOpened 'Не закрыт' (StockDocumentLedger ledger) = ledger IS StockDocumentLedger AND NOT isClosed(ledger);

stock (ledger) = ABSTRACT Stock (StockDocumentLedger) MATERIALIZED INDEXED;
nameStock 'Склад' (StockDocumentLedger ledger) = name(stock(ledger)) IN id;

number 'Номер документа' (ledger) = ABSTRACT STRING[48] (StockDocumentLedger) MATERIALIZED;
series 'Серия документа' (ledger) = ABSTRACT BPSTRING[2] (StockDocumentLedger) MATERIALIZED;
seriesNumber 'Серия/номер документа' (StockDocumentLedger ledger) = CONCAT '', series(ledger), number(ledger) CHARWIDTH 7; 

legalEntity 'Контрагент' (ledger) = ABSTRACT LegalEntity (StockDocumentLedger) MATERIALIZED;
nameLegalEntity 'Контрагент' (StockDocumentLedger ledger) = name(legalEntity(ledger)) IN id;

legalEntityStock 'Склад контрагента' (ledger) = ABSTRACT Stock (StockDocumentLedger) MATERIALIZED;
nameLegalEntityStock 'Склад контрагента' = name(legalEntityStock(StockDocumentLedger ledger));

operation 'Операция' (ledger) = ABSTRACT Operation(StockDocumentLedger) MATERIALIZED;
isReturn 'Возврат' (ledger) = ABSTRACT BOOLEAN (StockDocumentLedger) MATERIALIZED;

captionStockDocument 'Название операции в товарном отчете (закупка)' = ABSTRACT ISTRING[100] (Operation);
returnCaptionStockDocument 'Название операции в товарном отчете (возврат)' = ABSTRACT ISTRING[100] (Operation);

nameOperation 'Операция' (StockDocumentLedger ledger) = IF isReturn(ledger) 
    THEN OVERRIDE returnCaptionStockDocument(operation(ledger)), overName(operation(ledger))
    ELSE OVERRIDE captionStockDocument(operation(ledger)), name(operation(ledger));

TABLE descriptionStockDocumentLedger(StockDocumentLedger);
description 'Название документа' (ledger) = ABSTRACT STRING[200] (StockDocumentLedger) MATERIALIZED IN id TABLE descriptionStockDocumentLedger;

note 'Примечание' (ledger) = ABSTRACT STRING[100] (StockDocumentLedger) MATERIALIZED IN id;

skip 'Не проводить' (ledger) = ABSTRACT BOOLEAN (StockDocumentLedger) MATERIALIZED;
active (StockDocumentLedger ledger) = isPosted(ledger) AND NOT skip(ledger);

GROUP ledgerItem 'Суммы по товару' : public;
sumItem 'Сумма прихода, товар' (ledger) = ABSTRACT NUMERIC[18,4] (IncStockDocumentLedger) MATERIALIZED IN ledgerItem CHARWIDTH 15;
sumItem 'Сумма расхода, товар' (ledger) = ABSTRACT NUMERIC[18,4] (OutStockDocumentLedger) MATERIALIZED IN ledgerItem CHARWIDTH 15;
sumItem 'Сумма, товар' (StockDocumentLedger ledger) = MULTI sumItem[IncStockDocumentLedger](ledger), -sumItem[OutStockDocumentLedger](ledger) MATERIALIZED;

GROUP ledgerContainer 'Суммы по таре' : public;
sumContainer 'Сумма прихода, тара' (ledger) = ABSTRACT NUMERIC[18,4] (IncStockDocumentLedger) MATERIALIZED IN ledgerContainer;
sumContainer 'Сумма расхода, тара' (ledger) = ABSTRACT NUMERIC[18,4] (OutStockDocumentLedger) MATERIALIZED IN ledgerContainer;
sumContainer 'Сумма, тара' (StockDocumentLedger ledger) = MULTI sumContainer[IncStockDocumentLedger](ledger), -sumContainer[OutStockDocumentLedger](ledger) MATERIALIZED;

GROUP ledger 'Суммы (всего)' : public;
sum 'Сумма прихода' (IncStockDocumentLedger ledger) = sumItem(ledger)(+) sumContainer(ledger) MATERIALIZED IN ledger CHARWIDTH 15;
sum 'Сумма расхода' (OutStockDocumentLedger ledger) = sumItem(ledger)(+) sumContainer(ledger) MATERIALIZED IN ledger CHARWIDTH 15;
sum 'Сумма' (StockDocumentLedger ledger) = MULTI sum[IncStockDocumentLedger](ledger), -sum[OutStockDocumentLedger](ledger) MATERIALIZED;

allowedEdit (StockDocumentLedger ledger) = NOT isClosed(ledger) OR allowedEditClosedDocuments(currentUser());

// -------------------------------------- Агрегированные суммы за интервал --------------------------------------------- //

countIncStockDocumentInterval 'Количество приходных док-ов' (stock, DATE dtFrom, DATE dtTo)=
    GROUP SUM 1 IF IncStockDocumentLedger incStockDocumentLedger IS IncStockDocumentLedger AND active(incStockDocumentLedger)
        AND date(incStockDocumentLedger) >= dtFrom AND date(incStockDocumentLedger) <= dtTo
            BY stock(incStockDocumentLedger) IN ledger;

countOutStockDocumentInterval 'Количество расходных док-ов' (stock, DATE dtFrom, DATE dtTo)=
    GROUP SUM 1 IF OutStockDocumentLedger outStockDocumentLedger IS OutStockDocumentLedger AND active(outStockDocumentLedger)
        AND date(outStockDocumentLedger) >= dtFrom AND date(outStockDocumentLedger) <= dtTo
            BY stock(outStockDocumentLedger) IN ledger;


sumItemIncStockDocumentInterval 'Сумма прихода, товар' (stock, DATE dtFrom, DATE dtTo)=
    GROUP SUM sumItem(IncStockDocumentLedger incStockDocumentLedger) IF active(incStockDocumentLedger)
        AND date(incStockDocumentLedger) >= dtFrom AND date(incStockDocumentLedger) <= dtTo
            BY stock(incStockDocumentLedger) IN ledgerItem CHARWIDTH 15;

sumItemOutStockDocumentInterval 'Сумма расхода, товар' (stock, DATE dtFrom, DATE dtTo)=
    GROUP SUM sumItem(OutStockDocumentLedger outStockDocumentLedger) IF active(outStockDocumentLedger)
        AND date(outStockDocumentLedger) >= dtFrom AND date(outStockDocumentLedger) <= dtTo
            BY stock(outStockDocumentLedger) IN ledgerItem CHARWIDTH 15;


sumContainerIncStockDocumentInterval 'Сумма прихода, тара' (stock, DATE dtFrom, DATE dtTo)=
    GROUP SUM sumContainer(IncStockDocumentLedger incStockDocumentLedger) IF active(incStockDocumentLedger)
        AND date(incStockDocumentLedger) >= dtFrom AND date(incStockDocumentLedger) <= dtTo
            BY stock(incStockDocumentLedger) IN ledgerContainer;

sumContainerOutStockDocumentInterval 'Сумма расхода, тара' (stock, DATE dtFrom, DATE dtTo)=
    GROUP SUM sumContainer(OutStockDocumentLedger outStockDocumentLedger) IF active(outStockDocumentLedger)
        AND date(outStockDocumentLedger) >= dtFrom AND date(outStockDocumentLedger) <= dtTo
            BY stock(outStockDocumentLedger) IN ledgerContainer;

// -------------------------------------- Суммы по операциям за интервал --------------------------------------------- //

countIncStockDocumentInterval 'Количество приходных док-ов' (stock, DATE dtFrom, DATE dtTo, operation)=
    GROUP SUM 1 IF IncStockDocumentLedger incStockDocumentLedger IS IncStockDocumentLedger AND active(incStockDocumentLedger)
        AND date(incStockDocumentLedger) >= dtFrom AND date(incStockDocumentLedger) <= dtTo
            BY stock(incStockDocumentLedger), operation(incStockDocumentLedger) IN ledger;

countOutStockDocumentInterval 'Количество расходных док-ов' (stock, DATE dtFrom, DATE dtTo, operation)=
    GROUP SUM 1 IF OutStockDocumentLedger outStockDocumentLedger IS OutStockDocumentLedger AND active(outStockDocumentLedger)
        AND date(outStockDocumentLedger) >= dtFrom AND date(outStockDocumentLedger) <= dtTo
            BY stock(outStockDocumentLedger), operation(outStockDocumentLedger) IN ledger;


sumItemIncStockDocumentInterval 'Сумма прихода, товар' (stock, DATE dtFrom, DATE dtTo, operation)=
    GROUP SUM sumItem(IncStockDocumentLedger incStockDocumentLedger) IF active(incStockDocumentLedger)
        AND date(incStockDocumentLedger) >= dtFrom AND date(incStockDocumentLedger) <= dtTo
            BY stock(incStockDocumentLedger), operation(incStockDocumentLedger) IN ledgerItem CHARWIDTH 15;

sumItemOutStockDocumentInterval 'Сумма расхода, товар' (stock, DATE dtFrom, DATE dtTo, operation)=
    GROUP SUM sumItem(OutStockDocumentLedger outStockDocumentLedger) IF active(outStockDocumentLedger)
        AND date(outStockDocumentLedger) >= dtFrom AND date(outStockDocumentLedger) <= dtTo
            BY stock(outStockDocumentLedger), operation(outStockDocumentLedger) IN ledgerItem CHARWIDTH 15;


sumContainerIncStockDocumentInterval 'Сумма прихода, тара' (stock, DATE dtFrom, DATE dtTo, operation)=
    GROUP SUM sumContainer(IncStockDocumentLedger incStockDocumentLedger) IF active(incStockDocumentLedger)
        AND date(incStockDocumentLedger) >= dtFrom AND date(incStockDocumentLedger) <= dtTo
            BY stock(incStockDocumentLedger), operation(incStockDocumentLedger) IN ledgerContainer;

sumContainerOutStockDocumentInterval 'Сумма расхода, тара' (stock, DATE dtFrom, DATE dtTo, operation)=
    GROUP SUM sumContainer(OutStockDocumentLedger outStockDocumentLedger) IF active(outStockDocumentLedger)
        AND date(outStockDocumentLedger) >= dtFrom AND date(outStockDocumentLedger) <= dtTo
            BY stock(outStockDocumentLedger), operation(outStockDocumentLedger) IN ledgerContainer;
            
//-- Без операции            
countNotOperationIncStockDocumentInterval 'Количество приходных док-ов' (stock, DATE dtFrom, DATE dtTo)=
    GROUP SUM 1 IF IncStockDocumentLedger incStockDocumentLedger IS IncStockDocumentLedger AND active(incStockDocumentLedger)
        AND date(incStockDocumentLedger) >= dtFrom AND date(incStockDocumentLedger) <= dtTo
        AND NOT operation(incStockDocumentLedger)
            BY stock(incStockDocumentLedger)  IN ledger;

countNotOperationOutStockDocumentInterval 'Количество расходных док-ов' (stock, DATE dtFrom, DATE dtTo)=
    GROUP SUM 1 IF OutStockDocumentLedger outStockDocumentLedger IS OutStockDocumentLedger AND active(outStockDocumentLedger)
        AND date(outStockDocumentLedger) >= dtFrom AND date(outStockDocumentLedger) <= dtTo
        AND NOT operation(outStockDocumentLedger)
            BY stock(outStockDocumentLedger) IN ledger;


sumItemNotOperationIncStockDocumentInterval 'Сумма прихода, товар' (stock, DATE dtFrom, DATE dtTo)=
    GROUP SUM sumItem(IncStockDocumentLedger incStockDocumentLedger) IF active(incStockDocumentLedger)
        AND date(incStockDocumentLedger) >= dtFrom AND date(incStockDocumentLedger) <= dtTo
        AND NOT operation(incStockDocumentLedger)        
            BY stock(incStockDocumentLedger) IN ledgerItem CHARWIDTH 15;

sumItemNotOperationOutStockDocumentInterval 'Сумма расхода, товар' (stock, DATE dtFrom, DATE dtTo)=
    GROUP SUM sumItem(OutStockDocumentLedger outStockDocumentLedger) IF active(outStockDocumentLedger)
        AND date(outStockDocumentLedger) >= dtFrom AND date(outStockDocumentLedger) <= dtTo
        AND NOT operation(outStockDocumentLedger)
            BY stock(outStockDocumentLedger) IN ledgerItem CHARWIDTH 15;


sumContainerNotOperationIncStockDocumentInterval 'Сумма прихода, тара' (stock, DATE dtFrom, DATE dtTo)=
    GROUP SUM sumContainer(IncStockDocumentLedger incStockDocumentLedger) IF active(incStockDocumentLedger)
        AND date(incStockDocumentLedger) >= dtFrom AND date(incStockDocumentLedger) <= dtTo
        AND NOT operation(incStockDocumentLedger)        
            BY stock(incStockDocumentLedger) IN ledgerContainer;

sumContainerNotOperationOutStockDocumentInterval 'Сумма расхода, тара' (stock, DATE dtFrom, DATE dtTo)=
    GROUP SUM sumContainer(OutStockDocumentLedger outStockDocumentLedger) IF active(outStockDocumentLedger)
        AND date(outStockDocumentLedger) >= dtFrom AND date(outStockDocumentLedger) <= dtTo
        AND NOT operation(outStockDocumentLedger)
            BY stock(outStockDocumentLedger) IN ledgerContainer;
// -------------------------------------- Остатки по суммам --------------------------------------------- //

currentSumDocumentLedger 'Текущий остаток по документам' (stock) = GROUP SUM sum (StockDocumentLedger ledger) IF active(ledger)
                                                                                           BY stock(ledger);

sumAccountBDocumentLedger 'Остаток на начало' (Stock stock, DATETIME dateTime) = (currentSumDocumentLedger(stock) IF dateTime IS DATETIME) (-)
                                                                          [ GROUP SUM sum (StockDocumentLedger ledger) IF dateTime(ledger) >= dateTime AND active(ledger)
                                                                                 BY stock(ledger)](stock);

sumAccountADocumentLedger 'Остаток на конец' (Stock stock, DATETIME dateTime) = (currentSumDocumentLedger(stock) IF dateTime IS DATETIME) (-)
                                                                         [ GROUP SUM sum (StockDocumentLedger ledger) IF dateTime(ledger) > dateTime AND active(ledger)
                                                                                BY stock(ledger)](stock);

sumAccountBDocumentLedger 'Остаток на начало' (Stock stock, DATE date) = (currentSumDocumentLedger(stock) IF date IS DATE) (-)
                                                                  [ GROUP SUM sum (StockDocumentLedger ledger) IF date(ledger) >= date AND active(ledger)
                                                                         BY stock(ledger)](stock) IN ledger CHARWIDTH 15;

sumAccountADocumentLedger 'Остаток на конец' (Stock stock, DATE date) = (currentSumDocumentLedger(stock) IF date IS DATE) (-)
                                                                 [ GROUP SUM sum (StockDocumentLedger ledger) IF date(ledger) > date AND active(ledger)
                                                                        BY stock(ledger)](stock) IN ledger CHARWIDTH 15;

// -------------------------------------- Остатки по суммам (товар) --------------------------------------------- //

currentSumItemDocumentLedger 'Текущий остаток по документам, товар' (stock) = GROUP SUM sumItem (StockDocumentLedger ledger) IF active(ledger)
                                                                                           BY stock(ledger);

sumItemAccountBDocumentLedger 'Остаток на начало, товар' (Stock stock, DATETIME dateTime) = (currentSumItemDocumentLedger(stock) IF dateTime IS DATETIME) (-)
                                                                                     [ GROUP SUM sumItem (StockDocumentLedger ledger) IF dateTime(ledger) >= dateTime AND active(ledger)
                                                                                            BY stock(ledger)](stock);

sumItemAccountADocumentLedger 'Остаток на конец, товар' (Stock stock, DATETIME dateTime) = (currentSumItemDocumentLedger(stock) IF dateTime IS DATETIME) (-)
                                                                                    [ GROUP SUM sumItem (StockDocumentLedger ledger) IF dateTime(ledger) > dateTime AND active(ledger)
                                                                                           BY stock(ledger)](stock);

sumItemAccountBDocumentLedger 'Остаток на начало, товар' (Stock stock, DATE date) = (currentSumItemDocumentLedger(stock) IF date IS DATE) (-)
                                                                             [ GROUP SUM sumItem (StockDocumentLedger ledger) IF date(ledger) >= date AND active(ledger)
                                                                                    BY stock(ledger)](stock) IN ledgerItem CHARWIDTH 15;

sumItemAccountADocumentLedger 'Остаток на конец, товар' (Stock stock, DATE date) = (currentSumItemDocumentLedger(stock) IF date IS DATE) (-)
                                                                            [ GROUP SUM sumItem (StockDocumentLedger ledger) IF date(ledger) > date AND active(ledger)
                                                                                   BY stock(ledger)](stock) IN ledgerItem  CHARWIDTH 15;

prevSumItemAccountBDocumentLedger 'Остаток на начало, товар' (Stock stock, DATETIME dateTime) = PREV(sumItemAccountBDocumentLedger(stock, dateTime));

// -------------------------------------- Остатки по суммам (тара) --------------------------------------------- //

currentSumContainerDocumentLedger 'Текущий остаток по документам, тара' (stock) = GROUP SUM sumContainer (StockDocumentLedger ledger) IF active(ledger)
                                                                                           BY stock(ledger);
sumContainerAccountBDocumentLedger 'Остаток на начало, тара' (Stock stock, DATETIME dateTime) = (currentSumContainerDocumentLedger(stock) IF dateTime IS DATETIME) (-)
                                                                                         [ GROUP SUM sumContainer (StockDocumentLedger ledger) IF dateTime(ledger) >= dateTime AND active(ledger)
                                                                                                BY stock(ledger)](stock);

sumContainerAccountADocumentLedger 'Остаток на конец, тара' (Stock stock, DATETIME dateTime) = (currentSumContainerDocumentLedger(stock) IF dateTime IS DATETIME) (-)
                                                                                        [ GROUP SUM sumContainer (StockDocumentLedger ledger) IF dateTime(ledger) > dateTime AND active(ledger)
                                                                                               BY stock(ledger)](stock);

sumContainerAccountBDocumentLedger 'Остаток на начало, тара' (Stock stock, DATE date) = (currentSumContainerDocumentLedger(stock) IF date IS DATE) (-)
                                                                                 [ GROUP SUM sumContainer (StockDocumentLedger ledger) IF date(ledger) >= date AND active(ledger)
                                                                                        BY stock(ledger)](stock) IN ledgerContainer;

sumContainerAccountADocumentLedger 'Остаток на конец, тара' (Stock stock, DATE date) = (currentSumContainerDocumentLedger(stock) IF date IS DATE) (-)
                                                                                [ GROUP SUM sumContainer (StockDocumentLedger ledger) IF date(ledger) > date AND active(ledger)
                                                                                       BY stock(ledger)](stock) IN ledgerContainer;

prevSumContainerAccountBDocumentLedger (Stock stock, DATETIME dateTime) = PREV(sumContainerAccountBDocumentLedger(stock, dateTime));

// -------------------------------------- Подитоги --------------------------------------------- //

subtotalItemIncStockDocumentInterval 'Итого с остатком, товар' (Stock stock, DATE dtFrom, DATE dtTo) =
    sumItemAccountBDocumentLedger(stock, dtFrom) (+)
     sumItemIncStockDocumentInterval(stock, dtFrom, dtTo) IN ledgerItem  CHARWIDTH 15;

subtotalContainerIncStockDocumentInterval 'Итого с остатком, тара' (Stock stock, DATE dtFrom, DATE dtTo) =
    sumContainerAccountBDocumentLedger(stock, dtFrom) (+)
     sumContainerIncStockDocumentInterval(stock, dtFrom, dtTo) IN ledgerContainer CHARWIDTH 15;


// ------------------------------------------- Ответственные лица --------------------------------------------- //

@defineHistorizableCustom(responsiblePerson, 'Материально ответственное лицо', Employee, name, customUser, stock, nameStock, responsibility );
isResponsiblePerson 'Материально ответственное лицо' = DATA BOOLEAN (Stock, Employee);
isOverResponsiblePerson 'Материально ответственное лицо' = isResponsiblePerson(Stock st,Employee e) OR responsiblePerson(st) == e;
orderResponsiblePerson 'Порядок отображения в печатной форме' = DATA INTEGER (Stock, Employee);
overOrderResponsiblePerson 'Порядок отображения в печатной форме' = IF responsiblePerson(Stock st) == Employee e THEN -1 ELSE orderResponsiblePerson(st,e);

namePositionResponsiblies 'МОЛ(ы)' (Stock stock) = CONCAT ', ', positionName(responsiblePerson(stock)),
     (GROUP
     CONCAT positionName(Employee employee) IF isResponsiblePerson(stock, employee), ', '
     ORDER employee)
     CHARWIDTH 50;

shortNamePositionResponsiblies 'МОЛ(ы)' (Stock stock) = CONCAT ', ', positionShortName(responsiblePerson(stock)),
    (GROUP
    CONCAT positionShortName(Employee employee) IF isResponsiblePerson(stock, employee), ', '
    ORDER employee)
    CHARWIDTH 50;

nameResponsiblies 'МОЛ(ы)' (Stock stock) = CONCAT ', ', name[Contact](responsiblePerson(stock)),
     (GROUP
     CONCAT name[Contact](Employee employee) IF isResponsiblePerson(stock, employee), ', '
     ORDER employee)
     CHARWIDTH 50;
     
shortNameResponsiblies 'МОЛ(ы)' (Stock stock) = CONCAT ', ', shortName(responsiblePerson(stock)),
     (GROUP
     CONCAT shortName(Employee employee) IF isResponsiblePerson(stock, employee), ', '
     ORDER employee)
     CHARWIDTH 50;  

// Должность ФИО
positionNameResponsiblePerson 'Материально ответственное лицо' (Stock stock) = positionName(responsiblePerson(stock)) IN responsibility; 
namePositionResponsiblePerson 'Материально ответственное лицо (должность)'= namePosition(responsiblePerson(Stock stock));
CONSTRAINT dataResponsiblePerson(Stock stock, DATE date) AND NOT in(stock, dataResponsiblePerson(stock, date))
    CHECKED BY dataResponsiblePerson[Stock,DATE] MESSAGE 'МОЛ не сотрудник отдела';

@defineHistorizableCustom(booker, 'Бухгалтер, принимающий товарный отчет', Employee, name, customUser, stock, nameStock, responsibility );
// Должность ФИО
positionNameBooker 'Бухгалтер, принимающий товарный отчет' (Stock stock) = positionName(booker(stock)) IN responsibility; 
namePositionBooker 'Бухгалтер, принимающий товарный отчет (должность)'= namePosition(booker(Stock stock));
CONSTRAINT dataBooker(Stock stock, DATE date) AND NOT in(stock, dataBooker(stock, date))
    CHECKED BY dataBooker[Stock,DATE] MESSAGE 'Бухгалтер не сотрудник отдела';

@defineHistorizableCustom(controller, 'Кто проверяет товарный отчет', Employee, name, customUser, stock, nameStock, responsibility );

CONSTRAINT dataController(Stock stock, DATE date) AND NOT in(stock, dataController(stock, date))
    CHECKED BY dataController[Stock,DATE] MESSAGE 'Проверяющий не сотрудник отдела';
// Должность ФИО
positionNameController 'Кто проверяет товарный отчет' (Stock stock) = positionName(controller(stock)) IN responsibility; 
namePositionController 'Кто проверяет товарный отчет (должность)'= namePosition(booker(Stock stock));

@defineHistorizableCustom(headPerson, 'Заведующий', Employee, name, customUser, stock, nameStock, responsibility );
// Должность ФИО
positionNameHeader 'Заведующий' (Stock stock) = positionName(headPerson(stock)) IN responsibility; 
namePositionHeader 'Заведующий'= namePosition(headPerson(Stock stock));
CONSTRAINT dataHeadPerson(Stock stock, DATE date) AND NOT in(stock, dataHeadPerson(stock, date))
    CHECKED BY dataHeadPerson[Stock,DATE] MESSAGE 'Заведующий не сотрудник отдела';
    
countStockDocumentInterval 'Количество документов' (Stock ds, DATE dtFrom, DATE dtTo)=  countIncStockDocumentInterval(ds, dtFrom, dtTo) (+) 
                                                                                            countOutStockDocumentInterval(ds, dtFrom, dtTo);

// -------------------------------------- Формы --------------------------------------------- //

FORM sumStockDocumentLedger 'Товарный отчет'
    OBJECTS params = (dtFrom = DATE, dtTo = DATE) PANEL,
            ds = Stock PANEL
    PROPERTIES objFrom = VALUE(dtFrom), objTo = VALUE(dtTo)
    PROPERTIES(ds) SELECTOR name, nameLegalEntity

    PROPERTIES sumAccountBDocumentLedger(ds, dtFrom), sumItemAccountBDocumentLedger(ds, dtFrom), sumContainerAccountBDocumentLedger(ds, dtFrom),
               sumItemAccountADocumentLedger(ds, dtTo), sumContainerAccountADocumentLedger(ds, dtTo), sumAccountADocumentLedger(ds, dtTo)
    PROPERTIES(ds, dtFrom, dtTo) countIncStockDocumentInterval, countOutStockDocumentInterval,
               sumItemIncStockDocumentInterval, sumContainerIncStockDocumentInterval,
               subtotalItemIncStockDocumentInterval, subtotalContainerIncStockDocumentInterval,
               sumItemOutStockDocumentInterval, sumContainerOutStockDocumentInterval

    OBJECTS il = IncStockDocumentLedger
    PROPERTIES(il) READONLY isClosed, isPosted, date,  
                   iObjName = objectClassName, iDescription = description,
                   nameOperation, nameLegalEntity, nameLegalEntityStock, 
                   sumItem, sumContainer, sum
    PROPERTIES(il) EDIT SHOWIF allowedEdit(il) NEWSESSION, close SHOWIF isOpened(il)             
    FILTERS active(il),
            stock(il) == ds,
            date(il) >= dtFrom,
            date(il) <= dtTo,
            isCompany(ds)
    ORDERS date(il)

    OBJECTS ol = OutStockDocumentLedger
    PROPERTIES(ol) READONLY isClosed, isPosted, date, 
                   oObjName = objectClassName, oDescription = description,
                   nameOperation, nameLegalEntity, nameLegalEntityStock, 
                   sumItem, sumContainer, sum
    PROPERTIES(ol) EDIT SHOWIF allowedEdit(ol) NEWSESSION, close SHOWIF isOpened(ol)               
    FILTERS active(ol),
            stock(ol) == ds,
            date(ol) >= dtFrom,
            date(ol) <= dtTo
    ORDERS date(ol)
;
@extendFormFilterStockAccess(ds, sumStockDocumentLedger);


DESIGN sumStockDocumentLedger {

    NEW header {
        type = CONTAINERH;
        NEW dates {
            type = CONTAINERH;
            caption = 'Даты';
            MOVE PROPERTY(objFrom) {
                caption = 'Дата (с)';
            }
            MOVE PROPERTY(objTo) {
                caption = 'Дата (по)';
            }
        }
        NEW department {
            caption = 'Отдел';
            MOVE PROPERTY (name(ds)) {
                caption = 'Название';
            }
        }
        NEW legalEntity {
            caption = 'Организация';
            MOVE PROPERTY (nameLegalEntity(ds)) {
                caption = 'Название';
            }
        }
    }
    NEW print {
        type = CONTAINERH;
        caption = 'Печать';
    }

    NEW sums {
        caption = 'Суммы';
        type = CONTAINERV;
        MOVE GROUP(ledgerItem,ds);
        MOVE GROUP(ledgerContainer,ds);
        MOVE GROUP(ledger,ds);
    }

    NEW topContainer{
        fill = 1;

        type = SPLITV;
        type = CONTAINERV;

        MOVE BOX(il);
        MOVE BOX(ol);
    }

    MOVE TOOLBARBOX;
}

NAVIGATOR {
    stockReports {
        NEW sumStockDocumentLedger;
    }
}
// ------------------------------------------ Макросы ----------------------------------------------------- //
META implementStockDocumentLedger (concrete, stockProp)
    series[StockDocumentLedger] (concrete ledger) += series(ledger);
    number[StockDocumentLedger] (concrete ledger) += number(ledger);
    dateTime[StockDocumentLedger] (concrete ledger) += dateTime(ledger);
    isPosted[StockDocumentLedger] (concrete ledger) += isPosted(ledger);
    isClosed[StockDocumentLedger] (concrete ledger) += isClosed(ledger);
    stock[StockDocumentLedger] (concrete ledger) += stockProp(ledger);
    description[StockDocumentLedger] (concrete ledger) += STRING[200](description(ledger));
END

META implementStockDocumentLedgerInc (concrete, stockProp)
    EXTEND CLASS concrete : IncStockDocumentLedger;
    @implementStockDocumentLedger (concrete, stockProp);
END

META implementStockDocumentLedgerOut (concrete, stockProp)
    EXTEND CLASS concrete : OutStockDocumentLedger;
    @implementStockDocumentLedger (concrete, stockProp);
END

META implementStockDocumentLedgerOver (concrete, stockProp, objClass)

    number###stockProp##DocumentLedger = ABSTRACT STRING[48] (objClass) MATERIALIZED;
    series###stockProp##DocumentLedger = ABSTRACT BPSTRING[2] (objClass) MATERIALIZED;

    series[###stockProp##DocumentLedger] (objClass ledger) += OVERRIDE series###stockProp##DocumentLedger(ledger), series(ledger);
    number[###stockProp##DocumentLedger] (objClass ledger) += OVERRIDE number###stockProp##DocumentLedger(ledger), number(ledger);
    dateTime (objClass ledger) += dateTime(ledger);
    isPosted[###stockProp##DocumentLedger] (objClass ledger) += isPosted(ledger);
    isClosed[###stockProp##DocumentLedger] (objClass ledger) += isClosed(ledger);
    stockProp[###stockProp##DocumentLedger] (objClass ledger) += stockProp(ledger);
    description[###stockProp##DocumentLedger] (objClass ledger) += description(ledger);
END

META implementStockDocumentLedgerIncOver (concrete, stockProp)
    EXTEND CLASS concrete : IncStockDocumentLedger;
    @implementStockDocumentLedgerOver (concrete, stockProp, concrete);
END

META implementStockDocumentLedgerOutOver (concrete, stockProp)
    EXTEND CLASS concrete : OutStockDocumentLedger;
    @implementStockDocumentLedgerOver (concrete, stockProp, concrete);
END

META extendStockFormStockDocumentLedger(form, object)
    EXTEND FORM form
        PROPERTIES(object) SHOWIF isCompany(object) nameCustomUserResponsiblePerson, nameCustomUserBooker, nameCustomUserController
    ;
END
// -------------------------------- NameSpace ---------------------------------- //
META implementStockDocumentLedger (concrete, stockProp, NS)
    series[StockDocumentLedger] (NS.##concrete ledger) += series(ledger);
    number[StockDocumentLedger] (NS.##concrete ledger) += number(ledger);
    dateTime[StockDocumentLedger] (NS.##concrete ledger) += dateTime(ledger);
    isPosted[StockDocumentLedger] (NS.##concrete ledger) += isPosted(ledger);
    isClosed[StockDocumentLedger] (NS.##concrete ledger) += isClosed(ledger);
    stock[StockDocumentLedger] (NS.##concrete ledger) += stockProp(ledger);
    description[StockDocumentLedger] (NS.##concrete ledger) += STRING[200](description(ledger));
END
META implementStockDocumentLedgerInc (concrete, stockProp, NS)
    EXTEND CLASS NS.concrete : IncStockDocumentLedger;
    @implementStockDocumentLedger (concrete, stockProp, NS);
END
META implementStockDocumentLedgerOut (concrete, stockProp, NS)
    EXTEND CLASS NS.concrete : OutStockDocumentLedger;
    @implementStockDocumentLedger (concrete, stockProp, NS);
END
documentsClosedDate 'Дата закрытия документов' = DATA DATE(Stock);
documentsClosedDate (STRING[100] idStock) = documentsClosedDate(stock(idStock));

allowChangeStockDocumentClosed 'Разрешить корректировать документы до даты закрытия' = DATA BOOLEAN (CustomUser);
EXTEND FORM employee
    PROPERTIES(e) allowedEditClosedDocuments, allowChangeStockDocumentClosed
;
DESIGN employee {
    access{
        MOVE PROPERTY (allowedEditClosedDocuments(e));
        MOVE PROPERTY (allowChangeStockDocumentClosed(e));
    }
} 

CONSTRAINT (((CHANGED(date(StockDocumentLedger d)) OR CHANGED(sum(d))) AND active(d)) OR CHANGED(active(d))) 
            AND documentsClosedDate(stock(d)) AND NOT date(d) >= documentsClosedDate(stock(d)) 
            AND NOT allowChangeStockDocumentClosed(currentUser())
    MESSAGE 'Запрещено редактировать документы для склада до даты закрытия';

CONSTRAINT (DROPPED(StockDocumentLedger d IS StockDocumentLedger)) 
            AND documentsClosedDate(PREV(stock(d))) AND NOT PREV(date(d)) >= documentsClosedDate(PREV(stock(d))) AND PREV(active(d)) 
            AND NOT allowChangeStockDocumentClosed(currentUser())
    MESSAGE 'Запрещено удалять документы для склада до даты закрытия';
    
checkClosedDate 'Проверять ограничение "Запрещено изменять дату документам для склада до даты закрытия"' = DATA BOOLEAN ();

EXTEND FORM options

    PROPERTIES checkClosedDate()
;

DESIGN options {
    stock1 {
        MOVE PROPERTY (checkClosedDate());
    }
} 
prevDateActive (StockDocumentLedger d) = PREV(date(d) IF active(d));
CONSTRAINT  CHANGED(date(StockDocumentLedger d)) 
            AND (prevDateActive(d) < documentsClosedDate(stock(d))) 
            AND NOT allowChangeStockDocumentClosed(currentUser())
            AND checkClosedDate()
    MESSAGE 'Запрещено изменять дату документам для склада до даты закрытия';
    

closeDocumentsStocks 'Закрыть документы до Дата (по)'(DATE date, Stock stock)  { 
    IF sum(date, 1) > currentDate() THEN {
        MESSAGE 'Запрещено закрывать период позже текущей даты';
        RETURN;
    }
    documentsClosedDate(stock) <- sum(date,1);
    FOR stock(StockDocumentLedger ledger) == stock AND date(ledger) <= date AND isOpened(ledger) DO {
        close(ledger);
    }
    apply();   
} CONFIRM;


EXTEND FORM sumStockDocumentLedger
    PROPERTIES closeDocumentsStocks(dtTo, ds), documentsClosedDate(ds) READONLY 
;
DESIGN sumStockDocumentLedger {
    header {
        NEW actionContainer {
            caption = 'Действия';
            type = CONTAINERH;
            MOVE PROPERTY (closeDocumentsStocks(dtTo, ds));
            MOVE PROPERTY (documentsClosedDate(ds));
        }
    }
} 

excludeComission 'Исключать договора комиссии из товарного отчета' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES excludeComission()
;

DESIGN options {
    stock1 {
        MOVE PROPERTY (excludeComission());
    }
}

//Учетный документ проводимый только по товарному отчету

CLASS UserStockDocument 'Учетный документ (польз.)';
CLASS UserStockDocumentDetail 'Строка учетного документа (польз.)';

@defineDocumentTables(userStockDocument);
@defineDocumentHeaderTimePrefix(UserStockDocument, , ' документа');
@deriveDocumentHeaderTimePrefix(UserStockDocument, );
@defineDocumentHeaderNumber(UserStockDocument, BPSTRING[2]);
@defineDocumentHeaderStock (userStockDocument, stock, 'Склад', );
@defineDocumentDialogStocks(UserStockDocument, stock, company, , );
@defineDocumentHeaderDescription(UserStockDocument, 'Учетный документ');

@defineDocumentRelation(userStockDocument, UserStockDocumentDetail, );
@defineDocumentDetailIndex(userStockDocument, UserStockDocumentDetail);
@defineDocumentDetailNumber(userStockDocument, UserStockDocumentDetail);
@defineDocumentDetailTimePrefix(userStockDocument, UserStockDocumentDetail, , ' документа');
@defineDocumentDetailDataStockInner (userStockDocument, UserStockDocumentDetail, stock, Stock, stock, 'Склад');
@defineDocumentDetailDescription(userStockDocument, UserStockDocumentDetail);

@defineDocumentHeaderNote(UserStockDocument);
note 'Примечание' = DATA STRING[100] (UserStockDocumentDetail) CHARWIDTH 30 IN documentPrm;

@defineNumeratedDefault(UserStockDocument, 'Учетный документ', 'УД');

@defineDocumentHeaderCreated(UserStockDocument);
@defineDocumentPosted(userStockDocument);
@defineDocumentClosed(userStockDocument);
id = DATA STRING[100] (UserStockDocumentDetail);
userStockDocumentDetail (id, UserStockDocument) = GROUP AGGR UserStockDocumentDetail detail WHERE detail IS UserStockDocumentDetail BY id(detail), userStockDocument(detail);

sumContainer 'Сумма (+/-), тара' = DATA NUMERIC[18,4] (UserStockDocumentDetail); 
sumContainer 'Сумма, тара' = 
    GROUP SUM sumContainer(UserStockDocumentDetail detail) BY userStockDocument(detail) IN documentSum;

sumItem 'Сумма (+/-), товар' = DATA NUMERIC[18,4] (UserStockDocumentDetail); 
sumItem 'Сумма, товар' = 
    GROUP SUM sumItem(UserStockDocumentDetail detail) BY userStockDocument(detail) IN documentSum;

sum 'Суммы (всего)' = DATA NUMERIC[18,4] (UserStockDocumentDetail); 
sum 'Суммы (всего)' = 
    GROUP SUM sum(UserStockDocumentDetail detail) BY userStockDocument(detail) IN documentSum;
 
FORM userStockDocument 'Учетный документ'
    OBJECTS i = UserStockDocument PANEL
    PROPERTIES (i) isPosted, nameNumerator, nameStock ON CHANGE changeStockCompany(i),
                   number, series, date, time,
                   sumContainer, sumItem,
                   sum, note,
                   countUserStockDocumentDetail

    OBJECTS d = UserStockDocumentDetail
    PROPERTIES (d) index, sumContainer, sumItem,
                   sum, note, NEW, DELETE GRID
    FILTERS userStockDocument(d) == i

    EDIT UserStockDocument OBJECT i
    
    EVENTS
        ON OK prePost(i)    
;

DESIGN userStockDocument {
    BOX {
        size = (1024, 768);
        NEW headerBox {
            type = CONTAINERH;
            NEW headerRow1 {
                fill = 1;
                type = CONTAINERV;
                MOVE GROUP(documentHeader,i) {
                    type = CONTAINERV;
                    NEW row1 {
                        type = CONTAINERH;
                        MOVE PROPERTY(isPosted(i));
                        MOVE PROPERTY(nameStock(i));                        
                    }
                    NEW row2 {
                        type = CONTAINERH;
                        MOVE PROPERTY(nameNumerator(i));
                        MOVE PROPERTY(number(i));
                        MOVE PROPERTY(series(i));
                        MOVE PROPERTY(date(i));
                        MOVE PROPERTY(time(i));                        
                    }                    
                }
                MOVE GROUP(documentPrm,i) {
                    columns = 2;
                }
            }
            MOVE GROUP(documentSum,i) {
                columns = 1;
            }
        }
        NEW specificationBox {
            fill = 1;
            type = TABBED;
            MOVE BOX(d) {
                caption = 'Спецификация';
            }
        }
        MOVE TOOLBARBOX;
        PROPERTY (note(i)) { caption = 'Номер справки';}
        PROPERTY(formOk()) {
            caption = 'Провести';
        }
    }
}

skipOpen = ABSTRACT BOOLEAN (UserStockDocument);
showClose (UserStockDocument i) = isOpened(i) AND NOT skipClose(i);   
showOpen (UserStockDocument i) = isClosed(i) AND NOT skipOpen(i);   

FORM stockDocuments 'Учетный документ'
    OBJECTS i = UserStockDocument
    PROPERTIES (i) READONLYIF isReadonly() isClosed, isPosted, number, series, date, time,
                            nameStock
    PROPERTIES (i) READONLY countUserStockDocumentDetail, sumContainer, sumItem, sum 
    PROPERTIES (i) READONLYIF isReadonly() note
    PROPERTIES (i) NEWSESSION NEW, EDIT, DELETE
    
    PROPERTIES (i) READONLY PANEL createdNameUser, createdTime, createdHostnameComputer, 
                                        postedNameUser, postedTime, postedHostnameComputer 

    PROPERTIES (i) close SHOWIF showClose(i), open SHOWIF showOpen(i)

    OBJECTS d = UserStockDocumentDetail
    PROPERTIES (d) READONLY index, sumContainer, sumItem, sum,
                    note

    FILTERS userStockDocument(d) == i

    LIST UserStockDocument OBJECT i
    
    
;
@extendFormFilterAccessStock(UserStockDocument, i, stockDocuments, stock, company);
@defineFilterIsOpened (userStockDocument, stockDocuments, i);

DESIGN stockDocuments {
    BOX {
        size = (1024, 768);
        NEW documentContainer BEFORE TOOLBARBOX {
            fill = 1;
            type = SPLITV;
            MOVE BOX(i) { fill = 2; }
            NEW documentDetail {
                fill = 1;
                type = TABBED;
                MOVE BOX(d) {
                    caption = 'Спецификация';
                }
                NEW documentHistory {
                    caption = 'История';
                    type = CONTAINERV;
                    fill = 1;

                    MOVE GROUP(created,i);
                    MOVE GROUP(posted,i);
                }
            }
        }
        PROPERTY (note(i)) { caption = 'Номер справки';}
    }
}
@extendFormEditable(stockDocuments);

NAVIGATOR {
    stockNavigator {
        NEW FOLDER stockDocumentNavigator 'Изменение товарного отчета'  BEFORE stockReports { 
            NEW stockDocuments;
        }
    }
}

WHEN LOCAL FORMS userStockDocument
    CHANGED(sumContainer(UserStockDocumentDetail detail)) OR CHANGED(sumItem(detail)) DO {
        sum(detail) <- sumItem(detail) (+) sumContainer(detail);    
}   

//проводим по товарному отчету

CLASS OutUserStockDocumentDetail 'Учетный документ (польз.) расход' : OutStockDocumentLedger;
CLASS InUserStockDocumentDetail 'Учетный документ (польз.) приход' : IncStockDocumentLedger;

CONSTRAINT isPosted(UserStockDocumentDetail d) AND sumItem(d) AND sumContainer(d) AND ((sumItem(d) * sumContainer(d)) <0)
    MESSAGE 'Суммы по строке учетного документа (польз.) должны быть одновременно либо положительные, либо отрицательные.';
needToOutLedger = sumItem(UserStockDocumentDetail d) < 0 OR sumContainer(d) <0;

OutUserStockDocumentDetail = AGGR OutUserStockDocumentDetail WHERE needToOutLedger(UserStockDocumentDetail userStockDocumentDetail) MATERIALIZED INDEXED;
isPosted (OutUserStockDocumentDetail ledger) += isPosted(userStockDocumentDetail(ledger));  
isClosed (OutUserStockDocumentDetail ledger) += isClosed(userStockDocumentDetail(ledger));                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
series (OutUserStockDocumentDetail ledger) += series(userStockDocumentDetail(ledger));
number (OutUserStockDocumentDetail ledger) += number(userStockDocumentDetail(ledger));
dateTime (OutUserStockDocumentDetail ledger) += dateTime(userStockDocumentDetail(ledger));
stock (OutUserStockDocumentDetail ledger) += stock(userStockDocumentDetail(ledger));
description (OutUserStockDocumentDetail ledger) += description(userStockDocumentDetail(ledger));                                                                                                                                                                                                                                   
sumContainer(OutUserStockDocumentDetail ledger) += -sumContainer(userStockDocumentDetail(ledger));
sumItem(OutUserStockDocumentDetail ledger) += -sumItem(userStockDocumentDetail(ledger));
edit(OutUserStockDocumentDetail ledger) + {  edit(userStockDocumentDetail(ledger)); }
close(OutUserStockDocumentDetail ledger) + {  isClosed(UserStockDocument s) <- TRUE WHERE s == userStockDocument(userStockDocumentDetail(ledger)); }
type(OutUserStockDocumentDetail l) += STRING[50]('Учетный документ (польз.) расход') IF l IS OutUserStockDocumentDetail;

needToInLedger = sumItem(UserStockDocumentDetail d) > 0 OR sumContainer(d) > 0;
InUserStockDocumentDetail = AGGR InUserStockDocumentDetail WHERE needToInLedger(UserStockDocumentDetail userStockDocumentDetail) MATERIALIZED INDEXED;
                                                                          
isPosted (InUserStockDocumentDetail ledger) += isPosted(userStockDocumentDetail(ledger));  
isClosed (InUserStockDocumentDetail ledger) += isClosed(userStockDocumentDetail(ledger));                                                                                                                                                                                                                                                                                                                                                                                                                                                             
series (InUserStockDocumentDetail ledger) += series(userStockDocumentDetail(ledger));
number (InUserStockDocumentDetail ledger) += number(userStockDocumentDetail(ledger));
dateTime (InUserStockDocumentDetail ledger) += dateTime(userStockDocumentDetail(ledger));
stock (InUserStockDocumentDetail ledger) += stock(userStockDocumentDetail(ledger));
description (InUserStockDocumentDetail ledger) += description(userStockDocumentDetail(ledger));                                                                                                                                                                                                                                   
sumContainer(InUserStockDocumentDetail ledger) += sumContainer(userStockDocumentDetail(ledger));
sumItem(InUserStockDocumentDetail ledger) += sumItem(userStockDocumentDetail(ledger));
edit(InUserStockDocumentDetail ledger) + {  edit(userStockDocumentDetail(ledger)); }
close(InUserStockDocumentDetail ledger) + {  isClosed(UserStockDocument s) <- TRUE WHERE s == userStockDocument(userStockDocumentDetail(ledger)); }
type(InUserStockDocumentDetail l) += STRING[50]('Учетный документ (польз.) приход') IF l IS InUserStockDocumentDetail;

//EXTEND CLASS UserStockDocumentDetail : IncStockDocumentLedger;
//                                                                          
//isPostedStockDocumentLedger (ledger) += TRUE IF ledger IS UserStockDocumentDetail;  
//isClosedStockDocumentLedger (ledger) += TRUE IF ledger IS UserStockDocumentDetail;                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
//seriesStockDocumentLedger (ledger) += seriesUserStockDocumentDetail(ledger);
//numberStockDocumentLedger (ledger) += numberUserStockDocumentDetail(ledger);
//dateTimeStockDocumentLedger (ledger) += dateTimeUserStockDocumentDetail(ledger);
//stockStockDocumentLedger (ledger) += stockUserStockDocumentDetail(ledger);
//descriptionStockDocumentLedger (ledger) += descriptionUserStockDocumentDetail(ledger);                                                                                                                                                                                                                                   
//sumContainerIncStockDocumentLedger(ledger) += sumContainerUserStockDocumentDetail(ledger);
//sumItemIncStockDocumentLedger(ledger) += sumItemUserStockDocumentDetail(ledger);
//editStockDocumentLedger(ledger) += (ledger) NEWSESSION {FORM userStockDocument OBJECTS i = userStockDocumentUserStockDocumentDetail(ledger), d = ledger;}
//closeStockDocumentLedger(ledger) += closeUserStockDocumentDetail(ledger);
//typeStockDocumentLedger(l) += 'Учетный документ' IF l IS UserStockDocumentDetail;


//-------------------- Групповое закрытие периода по магазинам --------------------
isSelect 'Вкл.'= DATA LOCAL BOOLEAN (Stock);

closeDocumentsStocks 'Закрыть документы'()  { 
    IF NOT GROUP SUM 1 IF isSelect(Stock s) THEN MESSAGE 'Не отмечены склады';
    FOR StockDocumentLedger ledger AND isSelect(stock(ledger)) AND date(ledger) < documentsClosedDate(stock(ledger)) AND isOpened(ledger) DO {
        close(ledger);
    }
    apply();   
} CONFIRM TOOLBAR;

FORM closingDocuments 'Закрытие периода'
    TREE stockTree a = BPSTRING[3], sg = StockGroup PARENT parent(sg)
    PROPERTIES READONLY VALUE(a), name(sg)
    ORDERS name(sg)
    FILTERS stringEqualsAll(a)
    
    OBJECTS s = Stock
    PROPERTIES(s) READONLY isSelect CHANGEABLE, id, name, nameLegalEntity, documentsClosedDate CHANGEABLE
    ORDERS name(s)       
    FILTERS isParent(sg, s) OR (s IS Stock AND NOT sg),
            isCompany(s),
            countCompanyStock(sg)
    FILTERGROUP inactiveStock FILTER 'Активный' active(s) 'ctrl F10' DEFAULT
    FILTERGROUP select FILTER 'Отм.' isSelect(s) 'F9'
    
    PROPERTIES closeDocumentsStocks() DRAW s
;

DESIGN closingDocuments {
    BOX {
        NEW pane BEFORE TOOLBARBOX {
            type = SPLITH;
            fill = 1;            
                    
            MOVE BOX(TREE stockTree) {
                caption = 'Группы складов';
            }
        
            MOVE BOX(s) {
                fill = 3;
                GRID(s) {
                    defaultComponent = TRUE;
                }
            }
        }
    }
}

NAVIGATOR {
    application {
        NEW closingDocuments;
    }
}