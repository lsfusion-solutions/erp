MODULE DisparityOperation;

REQUIRE Operation, Disparity;

NAMESPACE Disparity;

@defineOperation(' (изменение сортности)');
@defineOperationRole();

DESIGN operation {
    tabContainer {
        NEW createContainer {
            caption = 'Производные документы';
        }
        NEW paramsContainer {
            caption = 'Параметры';
        }
        NEW showContainer {
            caption = 'Отображение свойств';
        }
    }
}

NAVIGATOR {
    disparityNavigator {
        NEW operations;
    }
}

//------------------------------------------ Опеределение операции для disparity ------------------------------------//
@defineDocumentInterfaceOperation (disparity, Disparity, );

@defineDocumentOperationRolePrefix(userDisparity, );

EXTEND FORM disparity
    PROPERTIES(dis) nameOperation
;

DESIGN disparity{
    GROUP(documentPrm,dis){
        MOVE PROPERTY(nameOperation(dis)) BEFORE PROPERTY(note(dis));
    }
}
EXTEND FORM disparities
    PROPERTIES(dis) READONLYIF isReadonly() nameOperation AFTER nameStock(dis)
;

useDisparityItemDisparity 'Частичная уценка' = DATA BOOLEAN (Operation);
useDisparityItemDisparity (Disparity d) = useDisparityItemDisparity(operation(d));
useDisparityItemDisparity (DisparityDetail d) = useDisparityItemDisparity(operation(d));

CONSTRAINT useDisparityItemDisparity(operation(UserDisparityDetail detail))  
    AND inputSku(detail) AND sku(detail) 
    AND (countItemDisparity(sku(detail)) AND NOT disparityItem(inputSku(detail))==sku(detail))
    CHECKED BY inputSku[DisparityDetail] MESSAGE 'Выбран не уцененный товар';   

childItem = GROUP MAX Item i IF active(i) BY disparityItem(i);
countActiveItemDisparity (Item disparityItem) = GROUP SUM 1 IF disparityItem(Item item) == disparityItem AND active(item);

WHEN LOCAL FORMS disparity SETCHANGED (sku(UserDisparityDetail d)) AND NOT CHANGED(inputSku(d)) AND useDisparityItemDisparity(operation(d))
    AND childItem(sku(d)) AND countActiveItemDisparity(sku(d)) == 1 DO {
    inputSku(d) <- childItem(sku(d));
}

EXTEND FORM operation
    PROPERTIES (o) useDisparityItemDisparity 
;

DESIGN operation {
    paramsContainer {
        MOVE PROPERTY(useDisparityItemDisparity(o));
    }
}

@defineDocumentOperationConstraint(disparity, 'изменения сортности', Disparity);
@extendFormFilterRoleAccess(disparity, dis, disparities);

operation[StockDocumentLedger] (Disparity ledger) += operation(ledger);


//кратность
@defineOperationProperty(showRate, 'Кратность', BOOLEAN, showContainer);

rate 'Кратность'  = DATA NUMERIC[15,4] (UserDisparityDetail);

EXTEND FORM disparity
    PROPERTIES(d) rate SHOWIF showRate(operation(d)) BEFORE inputIdBarcodeSku(d)
;

WHEN LOCAL (CHANGED(rate(UserDisparityDetail d)) OR CHANGED (quantity(d)) OR CHANGED(price(d))) AND rate(d) DO {
    inputQuantity(d) <- quantity(d)*rate(d);
    inputPrice(d) <- round2(price(d)/rate(d));
}

//-- Запрет на изменение документа другим пользователем
@defineOperationChangesDocument(disparity, Disparity, preventChangesDocument, created);

overShowEditDelete(Disparity p) += showEditDeleteUser(p);

@defineOperationProperty(notConduct, 'Не проводить по товарному отчету', BOOLEAN, paramsContainer);

notConduct 'Не проводить по товарному отчету' = DATA BOOLEAN (Disparity) IN documentPrm;

EXTEND FORM disparities
    PROPERTIES(dis) notConduct
;

EXTEND FORM disparity
    PROPERTIES(dis) notConduct
;

@deriveDocumentOperationProperty(Disparity, notConduct);

skip[StockDocumentLedger](Disparity ledger) += ledger IS Disparity AND notConduct(ledger);
