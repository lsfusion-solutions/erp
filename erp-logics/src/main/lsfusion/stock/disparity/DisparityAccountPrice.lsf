MODULE DisparityAccountPrice;

REQUIRE Disparity, SkuLedgerCost, DisparityAccountLedger;

NAMESPACE Disparity;

accountPrice 'Учетная цена (после)' = DATA NUMERIC[16,4] (InputDisparityDetail);
accountLedgerPrice (InputDisparityDetail d) += accountPrice(d);

@defineCalcAveragePrice(InputDisparityDetail, stock);

recalculateCostAccountFirst (DATE dFrom, DATE dTo) + {
    logToFile('cost', 'Начат пересчет цен в изменении сортности');
    APPLY {
        price(DisparityDetail d) <- prevAccountPriceB(sku(d), stock(d), dateTime(d))
            WHERE date(d) >= dFrom AND date(d) <= dTo AND calcRecalculateCost(sku(d)) AND NOT date(d) < documentsClosedDate(stock(d));
    }
    IF canceled() THEN CANCEL;
    logToFile('cost', 'Закончен пересчет цен в сборках');
}

