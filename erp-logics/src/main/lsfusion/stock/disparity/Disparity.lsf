MODULE Disparity;

REQUIRE System,
        Stock,
        StockSkuDocument,
        Currency,
        Numerator,
        Barcode,
        Document,
        Employee,
        StockDocumentSkuLedger,
        Utils,
        Item,
        OrderLedger;

NAMESPACE Disparity;

// ---- Добавляем отдельную вкладку на форму Настройки
DESIGN options {
    pane {
        NEW disparity {
            caption = 'Изменение сортности';
        }
    }
}

//----------------------------------- Пересорт товара -------------------------------------------------------

CLASS ABSTRACT Disparity 'Изменение сортности' : Document;
CLASS ABSTRACT DisparityDetail 'Строка изменения сортности' : DocumentDetail;

CLASS UserDisparity 'Изменение сортности (польз.)': Disparity;
CLASS UserDisparityDetail 'Строка изменения сортности (польз.)' : DisparityDetail;

@defineDocumentInterface(disparity);
TABLE sessionDisparity (Session, Disparity);
TABLE sessionDisparityDetail(Session, DisparityDetail);

@deriveDocumentHeaderTimePrefix(UserDisparity, );

@defineDocumentInterfaceNumber(disparity, BPSTRING[2]);
@defineNumeratedDefault(UserDisparity, 'Изменения сортности', 'ИС');

@defineDocumentInterfaceDataStock (disparity, stock, 'Склад', );

@defineExternalizable(userDisparity, STRING[100]);

id = DATA STRING[100] (UserDisparityDetail);
disparityDetail (id, disparity) = GROUP AGGR UserDisparityDetail disparityDetail WHERE disparityDetail IS DisparityDetail BY id(disparityDetail), userDisparity(disparityDetail);

@defineDocumentDialogStocks(userDisparity, stock, company, , );
@defineDocumentStockAccess(UserDisparity, stock, company);

@defineDocumentInterfacePosted(disparity);
@defineDocumentInterfaceClosed(disparity);
@defineDocumentClosedConstraint(UserDisparity);
@defineDocumentInterfaceDescription (disparity, 'Изменение сортности');
@defineDocumentInterfaceCurrency (disparity);
@deriveDocumentCurrency(userDisparity, stock);

@defineDocumentInterfaceDetailSkuPrefix (disparity, sku, , ' (расход)');
@defineDocumentInterfaceDetailSkuPrefix (disparity, sku, input, ' (приход)');

@showDocumentInterfaceDetailBatch(disparity);
//skipFillBatch = ABSTRACT CASE BOOLEAN (DisparityDetail);
@defineDocumentInterfaceDetailBatch(disparity, batch);
changeBatch(UserDisparityDetail d)  { 
    DIALOG dialogBatchStockOut OBJECTS st = stock(d),
                             t = dateTime(d),
                             sk = sku(d),
                             bt = batch(d) INPUT NULL NEWSESSION DO
        batch(d) <- bt;
}

idBatch 'Код партии' (DisparityDetail detail) = id(batch(detail));
idBatch 'Код партии' (UserDisparityDetail detail) = id(batch(detail));

costBatch 'Себестоимость партии' = ABSTRACT NUMERIC[16,4] (DisparityDetail) MATERIALIZED;
costBatch 'Себестоимость партии' = DATA NUMERIC[16,4] (UserDisparityDetail);
costBatch (UserDisparityDetail detail) += costBatch(detail);

WHEN LOCAL (CHANGED(batch(UserDisparityDetail detail)) OR CHANGED(sku(detail)) OR CHANGED(stock(detail))) DO
    costBatch(detail) <- prevCost(OVERRIDE batch(detail), prevLastOrderBatch(sku(detail), stock(detail)));

expiryDateBatch 'Годен до' = ABSTRACT DATE (DisparityDetail) MATERIALIZED;
expiryDateBatch 'Годен до' = DATA DATE (UserDisparityDetail);
expiryDateBatch (UserDisparityDetail detail) += expiryDateBatch(detail);
expiryDateBatch(UserDisparityDetail detail) <- prevExpiryDate(batch(detail)) WHEN CHANGED(batch(detail));

disallowLineDisparities 'Запретить строки без партий в изменениях сортности' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES() disallowLineDisparities
;

DESIGN options {
    pane {        
        disparity {
            MOVE PROPERTY(disallowLineDisparities());   
        }
    }
}

CONSTRAINT isPosted(UserDisparityDetail d) AND disallowLineDisparities() AND NOT batch(d) 
    MESSAGE 'Для строки изменения сортности должна быть задана партия';  

@defineDocumentInterfaceDetailQuantityPrefix(disparity, , ' (расход)');
@defineDocumentInterfaceDetailQuantityPrefix(disparity, input, ' (приход)');
inputQuantity(UserDisparityDetail detail) <- quantity(detail) WHEN CHANGED(quantity(detail));

@defineDocumentInterfaceDetailPricePrefix(disparity, , ' учетная (расход)');
@deriveDocumentDetailPriceAccountBatch (userDisparity, sku, stock);
@defineDocumentInterfaceDetailPricePrefix(disparity, input, ' учетная (приход)');
inputPrice(UserDisparityDetail detail) <- price(detail) WHEN CHANGED(price(detail));

@defineDocumentInterfaceDetailDataSumPrefix(disparity, , ' учетная (расход)');
@deriveDocumentDetailSum(userDisparity, quantity);
@defineDocumentInterfaceDetailDataSumPrefix(disparity, input, ' учетная (приход)');
@deriveDocumentDetailSumPrefix(userDisparity, input, currency, inputQuantity);

sumDisparityDetail '{document.sum.of} учетная (расход)' (disparity) = GROUP SUM sum(DisparityDetail idetail) BY disparity(idetail) CHARWIDTH 10 IN documentSum MATERIALIZED;
@defineDocumentHeaderSumPrefix(userDisparity, , ' учетная (расход)');

inputSumDisparityDetail '{document.sum.of} учетная (приход)' (disparity) = GROUP SUM inputSum(DisparityDetail idetail) BY disparity(idetail) CHARWIDTH 10 IN documentSum MATERIALIZED;
@defineDocumentHeaderSumPrefix(userDisparity, input, ' учетная (приход)');

@defineDocumentInterfaceHeaderQuantityPrefix(disparity, , ' (расход)');
@defineDocumentInterfaceHeaderQuantityPrefix (disparity, input, ' (приход)');

@defineAddDetailDialogSkuStock(userDisparity, sku, stock, dialogSku);
@defineAddDetailDialogBarcode(userDisparity, sku);

@implementDocument(disparity);

@implementDocumentForm(disparity, dis, 'Изменение сортности');

@implementDocumentBatch(disparity);

@implementDocumentBatchForm(dis);

supplierStock(Disparity disparity) += stock(disparity);

@defineDocumentInterfaceDetailDiffSumCustomPrefix(disparityDetail, sum, , input, ' изменения учетной');
diffSumDisparityDetail 'Сумма' (disparity) =
    GROUP SUM diffSum(DisparityDetail idetail) 
        BY disparity(idetail) IN documentSum;
            
@defineDocumentInterfaceHeaderItemSum(disparity, diff, diff);
// ------------ Проведение по товарному отчету ----------------- //
@implementStockDocumentLedgerOut(Disparity, stock);
type(Disparity l) += STRING[50]('Сортность') IF l IS Disparity;
sumItem (Disparity ledger) += diffSumItemDisparityDetail(ledger);
sumContainer (Disparity ledger) += diffSumContainerDisparityDetail(ledger);

// ------------ Проведение по регистру ----------------- //
@implementSkuLedgerOutFIFO(DisparityDetail, sku, stock);
quantity[OutFIFOSkuLedger] (DisparityDetail ledger) += quantity(ledger);
batch[SkuLedger] (DisparityDetail ledger) += batch(ledger);
sum[OutSkuLedger] (DisparityDetail ledger) += sum(ledger);

stockDocumentLedger(DisparityDetail ledger) += disparity(ledger); 

//----------------------------  Изменение остатка пересорт --------------------------------------------//

CLASS InputDisparityDetail 'Приход пересортицы';
TABLE inputDisparityDetail (InputDisparityDetail);

needToInput (DisparityDetail disparityDetail) = inputQuantity(disparityDetail) > 0
    AND isPosted(disparityDetail);

inputDisparityDetail = AGGR InputDisparityDetail WHERE needToInput(DisparityDetail disparityDetail) MATERIALIZED INDEXED;

@defineDocumentAggregationDetailTime(disparity, inputDisparity);
@defineDocumentAggregationDetailPosted(disparity, inputDisparity);
@defineDocumentAggregationDetailClosed(disparity, inputDisparity);
@defineDocumentAggregationDetailStock(disparity, inputDisparity, stock, 'Склад');
@defineDocumentAggregationDetailSkuPrefix(disparity, inputDisparity, sku, input);
quantity(InputDisparityDetail inputDisparityDetail) = inputQuantity(disparityDetail(inputDisparityDetail));
price(InputDisparityDetail inputDisparityDetail) = inputPrice(disparityDetail(inputDisparityDetail));
sum(InputDisparityDetail inputDisparityDetail) = inputSum(disparityDetail(inputDisparityDetail));
description(InputDisparityDetail inputDisparityDetail) = description(disparityDetail(inputDisparityDetail));
costBatch(InputDisparityDetail inputDisparityDetail) = costBatch(disparityDetail(inputDisparityDetail));
expiryDateBatch (InputDisparityDetail inputDisparityDetail) = expiryDateBatch(disparityDetail(inputDisparityDetail));


@implementBatch(InputDisparityDetail, sku, stock, costBatch);
quantity (InputDisparityDetail ledger) += quantity(ledger);
expiryDate (InputDisparityDetail ledger) += expiryDateBatch(ledger);
sum (InputDisparityDetail ledger) += sum(ledger);
series (InputDisparityDetail ledger) += series(disparity(disparityDetail(ledger)));
number (InputDisparityDetail ledger) += number(disparity(disparityDetail(ledger)));

supplier = DATA LegalEntity (DisparityDetail);
supplier(DisparityDetail detail) <- prevSupplier(batch(detail)) WHEN CHANGED(batch(detail));
nameSupplier = name(supplier(DisparityDetail detail) );

stockDocumentLedger(InputDisparityDetail ledger) += disparity(disparityDetail(ledger));

supplier = OVERRIDE supplier(disparityDetail(InputDisparityDetail detail)), legalEntityStock(disparityDetail(detail));
supplier(InputDisparityDetail batch) += supplier(batch);

supplierStock = DATA Stock (DisparityDetail);
supplierStock(DisparityDetail detail) <- prevSupplierStock(batch(detail)) WHEN CHANGED(batch(detail));
supplierStock = OVERRIDE supplierStock(disparityDetail(InputDisparityDetail detail)), stock(disparityDetail(detail));
supplierStock(InputDisparityDetail batch) += supplierStock(batch);

//CONSTRAINT supplier(DisparityDetail d) AND supplierStock(d) AND NOT in(supplier(d), supplierStock(d))
//    MESSAGE 'Поставщик и склад поставщика в строке изменения сортности не имеют связи';
@defineBarcodeSku(disparityDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
@defineBarcodeSku(userDisparityDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара

//------------------------------------------- Пересорт товара----------------------------------------------------//

//quantityDisparityDetail 'Кол-во для закачки в оборудование (приход)' (sku, disparity) = GROUP SUM inputQuantity(DisparityDetail disparityDetail) BY inputSku(disparityDetail), disparity(disparityDetail);

FORM disparity 'Изменение сортности'

    OBJECTS dis=UserDisparity PANEL

    PROPERTIES(dis) isPosted, nameNumerator, number, series, nameStock ON CHANGE changeStockCompany(dis), 
                    date, time, quantityDisparityDetail, sumDisparityDetail,
                    inputQuantityDisparityDetail, inputSumDisparityDetail, note

    OBJECTS d = UserDisparityDetail
    PROPERTIES(d)   index,
                    idBarcodeSku, idSku SHOWIF showIDs(), nameSku, shortNameUOMSku, idBatch, nameBatch ON CHANGE changeBatch(d),
                    expiryDateBatch,
                    quantity, price, sum,
                    inputIdBarcodeSku, inputIdSku SHOWIF showIDs(), inputNameSku, inputShortNameUOMSku, costBatch,
                    inputQuantity, inputPrice, inputSum
    PROPERTIES(d)   NEW, deletedd=DELETE GRID

    PROPERTIES(dis) DRAW d addDetailDialogSkuStockUserDisparityDetail,
                             addDetailInputBarcodeUserDisparityDetail, deleteUserDisparityDetail

    FILTERS         disparity(d) == dis

    EVENTS
        ON OK prePost(dis)

    EDIT Disparity OBJECT dis
;

DESIGN disparity {
    BOX {
        size = (1024, 768);
        NEW mainTabbed {
            tabbed = TRUE;
            fill = 1;
            NEW documentBox {
                fill = 1;
                type = CONTAINERV;
                caption = 'Изменение сортности';
                NEW headerBox {
                    horizontal = TRUE;
        
                    NEW headerRow1 {
                        fill = 1;
                        MOVE GROUP(documentHeader,dis) {
                            lines = 1;
                            horizontal = TRUE;
                            MOVE PROPERTY(isPosted(dis)) { charWidth = 10; }
                            MOVE PROPERTY(nameStock(dis));
                            MOVE PROPERTY(nameNumerator(dis));
                            MOVE PROPERTY(number(dis));
                            MOVE PROPERTY(series(dis));
                            MOVE PROPERTY(date(dis));
                            MOVE PROPERTY(time(dis));
                        }
        
                        NEW headerTabbedPane {
                            alignment = STRETCH;
                            tabbed = TRUE;
                            NEW headerMainParams {
                                caption = 'Основные параметры';
                                MOVE GROUP(documentPrm,dis) {
                                    type = COLUMNS;
                                    lines = 2;
                                }
                            }
                            NEW headerExtraParams {
                                caption = 'Дополнительные параметры';
                            }
                            NEW headerCreateDetail {
                                caption = 'Основание';
                            }
                            NEW headerCreateDocuments {
                                caption = 'Производные документы';
                            }
                        }
                    }
        
                    MOVE GROUP(documentSum,dis) {
                        lines = 1;
                    }
                }
                NEW specificationBox {
                    fill = 1;
                    tabbed = TRUE;
                    MOVE BOX(d) {
                        caption = 'Спецификация';
                    }
                }
            }
        }
        MOVE TOOLBARBOX;
        PROPERTY(formOk()) {
            caption = 'Провести';
        }
        PROPERTY(sumDisparityDetail(dis)) { charWidth = 13;}
        PROPERTY(inputSumDisparityDetail(dis)) { charWidth = 13;}
    }
}

edit (UserDisparityDetail d) + {  DIALOG disparity OBJECTS dis = disparity(d), d = d DOCKED; }

edit(InputDisparityDetail d) + {  edit(disparityDetail(d)); }

show 'Просмотреть'  ABSTRACT LIST ( DisparityDetail) TOOLBAR;
show 'Просмотреть' (UserDisparityDetail d)  { 
	NEWSESSION {
	    SHOW disparity OBJECTS dis = disparity(d), d = d DOCKED READONLY;
	}
}
show[SkuLedger](InputDisparityDetail batch) + {  show(disparityDetail(batch)); } 
show(UserDisparityDetail d) + {  show(d); } 

@addEventGenerateNumberOnForm(disparity, dis, userDisparity);

//-- SKU
@defineDocumentSkuStockPriceListTypeSystemLedger(userDisparity, );
@extendFormDocumentSkuStock(userDisparity, disparity, dis, legalEntityStock, );

@defineDocumentBatchStockPriceListTypeSystemLedger(userDisparity, );

@defineDocumentHeaderSkuQuantity(disparity, inputSku);


@extendFormDocumentBatchStock(userDisparity, disparity, dis, legalEntityStock, );

shipmentDateTime(Disparity disparity) = dateTime(disparity);
shipmentDateTime(UserDisparity disparity) = dateTime(disparity);

@extendFormDocumentSkuStockOrderLedger(disparity, disparity, dis, stock);

@extendFormDocumentSkuStockOrderLedgerAll(userDisparity, disparity, dis);

@extendFormDocumentBatchStockOrderLedger(userDisparity, disparity, dis);

close[StockDocumentLedger](Disparity l) + {  isClosed(l) <- TRUE; }

migrateCloseUserDisparity = DATA BOOLEAN ();
onStarted() +{ 
    IF NOT migrateCloseUserDisparity() THEN {
        isClosed(UserDisparity d) <- TRUE WHERE isOpened(d) AND isPosted(d) AND date(d) < documentsClosedDate(stock(d));
        migrateCloseUserDisparity() <- TRUE;
    }
}

EXTEND FORM disparity

    FILTERGROUP filter
        FILTER 'С остатком ' prevCurrentBalance(ks, st) 'F10' DEFAULT
        FILTER 'В документе ' quantity(ks, dis, st) 'F9'
;

EXTEND FORM disparity

    FILTERGROUP filter3
        FILTER 'С остатком ' prevCurrentBalance(b, sto) 'F10' DEFAULT
        FILTER 'В документе ' quantity(b, dis, sto) 'F9'
;

skipShowEdit = ABSTRACT BOOLEAN (Disparity);
skipShowDelete = ABSTRACT BOOLEAN (Disparity);
overShowEditDelete = ABSTRACT BOOLEAN (Disparity);

showEdit (Disparity d) = isOpened(d) AND overShowEditDelete(d) AND NOT skipShowEdit(d); 
showDelete(Disparity d) = isOpened(d) AND overShowEditDelete(d) AND NOT skipShowDelete(d);

FORM disparities 'Изменения сортности'

    OBJECTS dis=Disparity
    PROPERTIES (dis) READONLYIF isReadonly() isClosed, isPosted, number, series, date, time, nameStock
    PROPERTIES(dis)  READONLY countDisparityDetail, quantityDisparityDetail, sumDisparityDetail,
                              inputQuantityDisparityDetail, inputSumDisparityDetail
    PROPERTIES (dis) READONLYIF isReadonly() note

    PROPERTIES(dis)  READONLY PANEL createdNameUser, createdTime, createdHostnameComputer, 
                                          postedNameUser, postedTime, postedHostnameComputer

    PROPERTIES (dis) NEWSESSION NEW[UserDisparity], EDIT SHOWIF showEdit(dis)
    PROPERTIES(dis) DRAW dis TOOLBAR close SHOWIF isOpened(dis), open[UserDisparity] SHOWIF isClosed(dis)     
    
    PROPERTIES (dis) NEWSESSION deleted=DELETE SHOWIF showDelete(dis)

    OBJECTS d=DisparityDetail
    PROPERTIES(d)   READONLY index,
                    idBarcodeSku, idSku SHOWIF showIDs(), nameSku, shortNameUOMSku, nameBatch,
                    expiryDateBatch, quantity, price, sum,
                    inputIdBarcodeSku, inputIdSku SHOWIF showIDs(), inputNameSku, inputShortNameUOMSku, costBatch,
                    inputQuantity, inputPrice, inputSum

    FILTERS         disparity(d) == dis
;
@extendFormFilterAccessStock(Disparity, dis, disparities, stock, company);

DESIGN disparities {
    BOX {
        size = (1024, 768);
        NEW documentContainer  {
            fill = 1;
            type = SPLITV;

            MOVE BOX(dis) {
                fill = 2;
            }
            NEW documentDetail {
                fill = 1;
                tabbed = TRUE;

                MOVE BOX(d) {
                    caption = 'Спецификация';
                }
                NEW documentHistory {
                    caption = 'История';

                    MOVE GROUP(created,dis);
                    MOVE GROUP(posted,dis);
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                    }
                }
                NEW actionContainer {
                    caption = 'Действия';
                    horizontal = TRUE;
                }
            }
        }
        MOVE TOOLBARBOX;
    }
}
@extendFormEditable(disparities);
@defineFilterIsOpened (disparity, disparities, dis);
@defineDocumentLogForm(disparities, dis);
@defineDocumentLogForm(disparity, dis, specificationBox);

DESIGN disparity { historyTabs { caption = 'История'; } }
NAVIGATOR {
    stockNavigator {
        NEW FOLDER disparityNavigator 'Изменение сортности' BEFORE balanceSku {
            NEW disparities;
        }
    }
}

//Родительский товар

disparityItem 'Уцененный товар' = DATA Item (Item) INDEXED;
nameSkuDisparityItem 'Уцененный товар' = name(disparityItem(Item item));

countItemDisparity (Item disparityItem) = GROUP SUM 1 IF disparityItem(Item item) == disparityItem; 
countDisparityItem (Item item) = GROUP SUM 1 IF disparityItem(item) == Item disparityItem; 

skipGenerateBarcode = DATA LOCAL BOOLEAN () ;

overCopyDisparityData  ABSTRACT LIST (Item, Item);

copyDisparityData (Item item, Item i)  { 
    disparityItem(i) <- item; 
    itemGroup(i) <- itemGroup(item);
    caption(i) <- caption(item) + ' (УЦЕН.)';
    originalCaption(i) <- originalCaption(item);
    UOM(i) <- UOM(item);
    brand(i) <- brand(item);
    manufacturer(i) <- manufacturer(item);
    composition(i) <- composition(item);
    originalComposition(i) <- originalComposition(item);
    netWeight(i) <- netWeight(item);
    grossWeight(i) <- grossWeight(item);
    country(i) <- country(item);
    dataImage(i) <- dataImage(item);
    skuType(i) <- skuType(item);
    split(i) <- split(item);
    passScales(i) <- passScales(item);
    inactive(i) <- inactive(item);
    
    IF NOT skipGenerateBarcode() THEN
        generateBarcode(i);       
    
    customGroup[CustomGroupType,Item](CustomGroupType type, i) <- customGroup(type, item);
    
    EXEC overCopy(item, i);
    overCopyDisparityData(item, i);    
}

copyDisparity 'Создать уцененный товар'(Item item)  { 
    IF (item IS Item) THEN {
        NEWSESSION NESTED (addedSku[]) {
            NEW i = Item {
                copyDisparityData(item, i);
                DIALOG item OBJECTS i = i DOCKED DO {
                    addedSku() <- i;
                }
            }
        }
    }
} CHANGEKEY 'F6' TOOLBAR;

EXTEND FORM item
    PROPERTIES(i) nameSkuDisparityItem 
    OBJECTS di = Item
    PROPERTIES(di) READONLY idBarcode, name
    FILTERS disparityItem(di)==i 
;

DESIGN item {
    itemDetail {
        NEW disparityItem AFTER calcPriceListTypePrm {
            type = CONTAINERV;
            caption = 'Уценки';
            MOVE PROPERTY(nameSkuDisparityItem(i));
            MOVE BOX(di);
        }
    }    
}

isNotDisparity = Item item IS Item AND NOT disparityItem(item);
hideCopyDisparity = ABSTRACT BOOLEAN (Item);

EXTEND FORM items
    PROPERTIES (i) copyDisparity SHOWIF NOT hideCopyDisparity(i)
    FILTERGROUP disparityFilter
        FILTER 'Без уцен.' isNotDisparity(i) 'F6' DEFAULT
        FILTER 'С уценкой' disparityItem(i) 'ctrl F5' 
;

DESIGN items {
    actionsRow2 {
        NEW disparity {
            caption = 'Уценка';
            horizontal = TRUE;
            MOVE FILTERGROUP(disparityFilter);
            MOVE PROPERTY(copyDisparity(i));
        }
    }
}

EXTEND FORM disparity
    PROPERTIES  copyDisparity(ks)
;

// copy
copy 'Копировать'(Disparity s)  {
    NEWSESSION {
        NEW dis = UserDisparity {
            operation(dis) <- operation(s);
            stock(dis) <- stock(s);

            FOR disparity(DisparityDetail sd) == s DO NEW d = UserDisparityDetail {
                disparity(d) <- dis;
                sku(d) <- sku(sd);
                quantity(d) <- quantity(sd);
                inputSku(d) <- inputSku(sd);
            }

            SHOW disparity OBJECTS dis = dis DOCKED NOCANCEL;
        }
    }
} TOOLBAR;

EXTEND FORM disparities
    PROPERTIES(dis) copy
;

beforeFillBatch ABSTRACT LIST (UserDisparityDetail);
afterFillBatch ABSTRACT LIST (UserDisparityDetail);

fillBatch 'Проставить партию' (UserDisparityDetail d) {
    beforeFillBatch(d);
    batch(d) <- prevFirstOrderBatchAvailable(sku(d), stock(d), quantity(d)) WHERE NOT batch(d);
    afterFillBatch(d);
} ASON CONTEXTMENU nameBatch[UserDisparityDetail];

fillAllBatch 'Проставить партии для всех'(UserDisparityDetail detail)  {
    FOR userDisparity(detail) == userDisparity(UserDisparityDetail d) DO
        fillBatch(d);
} ASON CONTEXTMENU nameBatch[UserDisparityDetail];