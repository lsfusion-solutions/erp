MODULE Zone;

REQUIRE Stock;

CLASS Zone 'Зона хранения' {
    defect 'Зона брака',
    return 'Зона возврата',
    diff 'Зона расхождения' 
}
TABLE zone (Zone);

dataName = DATA BPISTRING[100] (Zone);

name 'Наименование' (Zone z) = OVERRIDE dataName(z), (staticCaption(z) IF z IS Zone) MATERIALIZED CHARWIDTH 12;

inactive 'Неактивная' = DATA BOOLEAN (Zone);
active 'Активный' (Zone z) = z IS Zone AND NOT inactive(z) MATERIALIZED;

FORM zone 'Зона хранения'
    OBJECTS z = Zone PANEL
    PROPERTIES(z) name, inactive
    
    EDIT Zone OBJECT z
;

FORM zones 'Зоны хранения'    
    OBJECTS z = Zone
    PROPERTIES(z) READONLY name 
    PROPERTIES(z) NEWSESSION NEW, EDIT, DELETE
    
    FILTERGROUP active FILTER 'Активные' active(z) DEFAULT

    LIST Zone OBJECT z      
;

// reason

CLASS Reason 'Причина перемещения';
TABLE reason (Reason);

name 'Наименование' = DATA ISTRING[50](Reason);
extraName = ABSTRACT STRING[100](Reason);
emptyName'Наименование' (Reason r) = OVERRIDE name(r), extraName(r);

FORM reason 'Причина перемещения'
    OBJECTS r = Reason PANEL
    PROPERTIES(r) emptyName

    EDIT Reason OBJECT r
;

FORM reasons 'Причины перемещения'
    OBJECTS r = Reason
    PROPERTIES(r) READONLY emptyName
    PROPERTIES(r) NEWSESSION NEW, EDIT, DELETE 

    LIST Reason OBJECT r
;

reasonName = GROUP MAX Reason r BY emptyName(r);

NAVIGATOR {
    stockNavigator {
        NEW FOLDER zoneNavigator 'Зоны хранения' BEFORE stockReports {
            NEW zones;
            NEW reasons;
        }
    }
}

META defineOperationZone(container, prefix, captionPost)
    default###prefix##Zone 'Зона по умолчанию'##captionPost= DATA Zone (Operation);
    default###prefix##ZoneName 'Зона по умолчанию'##captionPost (Operation o) = name(default###prefix##Zone(o)); 
    show###prefix##Zone 'Отображать зону' = DATA BOOLEAN (Operation);
    isReadOnly###prefix##Zone 'Запрет на изменения' = DATA BOOLEAN (Operation);
    
    WHEN LOCAL DROPPED (show###prefix##Zone(Operation o)) DO {
        default###prefix##Zone(o) <- NULL;
    }
    
    EXTEND FORM operation
        PROPERTIES(o) show###prefix##Zone, isReadOnly###prefix##Zone, default###prefix##ZoneName READONLYIF NOT (default###prefix##Zone(o) OR show###prefix##Zone(o))
    ;
    DESIGN operation{
        container {
            NEW ##prefix##zoneContainer {
                type = CONTAINERH;
                caption = 'Зона'##captionPost;
                MOVE PROPERTY(show###prefix##Zone(o));
                MOVE PROPERTY(isReadOnly###prefix##Zone(o));               
                MOVE PROPERTY(default###prefix##ZoneName(o));
            }   
        }    
    }
END

META defineDocumentAbstractZone(objectClass)
    zone = ABSTRACT Zone (###objectClass);
    nameZone 'Зона' = name(zone(###objectClass d));
    zone (###objectClass##Detail d) = zone(objectClass(d));
END

META defineDocumentZone(objectClass)
    zone = DATA Zone (###objectClass);
    nameZone 'Зона' = name(zone(###objectClass o));     
    zone (###objectClass##Detail d) = zone(##objectClass(d));
END

META defineDocumentInterfaceZone(objectClass)   
    @defineDocumentAbstractZone(objectClass);
    @defineDocumentZone(##user###objectClass);
    zone(###user###objectClass o) += zone(o); 
END

META defineDocumentZoneProperty(objectClass, property)
    zone(###objectClass o) = zone(property(o));
END

META defineDocumentInterfaceZoneProperty(objectClass, property)
    @defineDocumentZoneProperty(objectClass, property);
    zone(###objectClass o) += zone(o); 
END

META defineDocumentZoneOperationDefault(objectClass, checkProperty, prefix)
    WHEN LOCAL (CHANGED(operation(###objectClass o)) OR CHANGED(checkProperty(o))) AND NOT CHANGED(zone(o)) DO {
        zone(o) <- default###prefix##Zone(operation(o)) IF checkProperty(o);
    }
END

META defineDocumentZoneOperationDefault(objectClass, prefix)
    WHEN LOCAL CHANGED(operation(###objectClass o)) AND NOT CHANGED(zone(o)) DO {
        zone(o) <- default###prefix##Zone(operation(o));
    }
END

META defineDocumentInterfaceZoneOperation(objectClass, concrete, container, prefix)
    @defineDocumentInterfaceZone(objectClass);

    EXTEND FORM ##objectClass##s
        PROPERTIES(concrete) READONLYIF isReadonly() OR isReadOnly###prefix##Zone(operation(concrete)) nameZone
    ;
    
    EXTEND FORM user###objectClass
        PROPERTIES nameZone(concrete) SHOWIF (show###prefix##Zone(operation(concrete)) OR zone(concrete)) READONLYIF isReadOnly###prefix##Zone(operation(concrete))
    ;
    DESIGN user###objectClass{
        container {
            MOVE PROPERTY(nameZone(concrete)){charWidth = 10;}
        }
    }
END