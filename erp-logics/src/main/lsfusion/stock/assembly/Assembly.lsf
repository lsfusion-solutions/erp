MODULE Assembly;

REQUIRE Stock, Item, Barcode, Document, EmployeeStock, PriceListAccount,
        StockMovement, StockSkuDocument,
        AssemblyOperation;

CLASS Assembly 'Сборка' : Document;
CLASS AssemblyDetail 'Строка сборки' : DocumentDetail;

@defineDocument(assembly);
TABLE sessionAssembly (Session, Assembly);

// header
@deriveDocumentHeaderTimePrefix(Assembly, );

operation = DATA Operation (Assembly) MATERIALIZED;
nameOperation 'Операция' = name(operation(Assembly assembly));

operation 'Операция' (AssemblyDetail assemblyDetail) = operation(assembly(assemblyDetail));

@defineDocumentOperationRolePrefix(assembly, );
@defineDocumentOperationConstraint(assembly, 'сборка', Assembly);

@defineDocumentHeaderNumber(Assembly, BPSTRING[2]);
@defineNumeratedDefault(Assembly, 'Сборка', 'ИС');

@defineDocumentDataStock (assembly, stock, 'Склад', );

countryStock (Assembly a) = country(stock(a));

@defineExternalizable(assembly, STRING[100]);

@defineDocumentDialogStocks(assembly, stock, company, , );
@defineDocumentStockAccess(Assembly, stock, company);

@defineDocumentPosted(assembly);
@defineDocumentClosed(assembly);
@defineDocumentClosedConstraint(Assembly);
@defineDocumentDescription (assembly, 'Сборка товаров');

@defineDocumentCurrency(assembly);
@deriveDocumentCurrency(assembly, stock);

// header sku 
@defineDocumentDetailSkuCustomPrefix(assembly, sku, , );
CONSTRAINT isPosted(Assembly a) AND NOT sku(a)
    MESSAGE 'Для сборки товаров должен быть задан SKU';

@defineDocumentDetailQuantityCustomPrefix(assembly, ,);

@defineDocumentDetailPriceCustomPrefix (assembly, , );

@defineDocumentDetailDataSumCustomPrefix(assembly, ,);

calcPrice = ABSTRACT CASE NUMERIC[16,4] (Assembly);
calcPrice(Assembly assembly) += WHEN (sum(assembly) AND quantity(assembly)) THEN NUMERIC[16,4](round(sum(assembly) / quantity(assembly), currency(assembly)));

price(Assembly a) <- calcPrice(a) WHEN CHANGED(calcPrice(a));

// detail
@defineDocumentDetailSku(assembly, sku);
CONSTRAINT isPosted(AssemblyDetail d) AND NOT sku(d)
    MESSAGE 'Для строки сборки товаров должен быть задан SKU';

@defineDocumentDetailQuantity (assembly);

@defineDocumentDetailPrice (assembly);

@defineDocumentDetailDataSum(assembly);
@deriveDocumentDetailSum(assembly, quantity);

@defineDocumentHeaderQuantity(assembly);
@defineDocumentHeaderSum(assembly);

// batch
@defineOperationProperty(disableShowBatch, 'Не показывать партии', showContainer);
showBatch (Assembly a) = a IS Assembly AND NOT disableShowBatch(operation(a));

@defineDocumentDetailBatchCustomPrefix(assemblyDetail, batch, );
changeBatch(AssemblyDetail d)  { 
    DIALOG dialogBatchStockOut OBJECTS st = stock(d),
                             t = dateTime(d),
                             sk = sku(d),
                             bt = batch(d) INPUT NULL NEWSESSION DO
        batch(d) <- bt;
}

// shortcut

@defineMovementSku(assembly);
@defineBalancesSku(assembly);

@defineBarcodeSku(assembly);
@defineMovementPriceSku(assembly);
@defineInfoSku(assembly);

@defineMovementSku(assemblyDetail);
@defineBalancesSku(assemblyDetail);

@defineBarcodeSku(assemblyDetail);
@defineMovementPriceSku(assemblyDetail);
@defineInfoSku(assemblyDetail);

@defineAddDetailDialogSkuStock(assembly, sku, stock, dialogSku);
@defineAddDetailDialogBarcode(assembly, sku);
isClosed[Document](Assembly assembly) += isClosed(assembly);
isPosted[Document](Assembly assembly) += isPosted(assembly);
number[Document](Assembly assembly) += number(assembly);
series[Document](Assembly assembly) += series(assembly);
date[Document](Assembly assembly) += date(assembly);

index[DocumentDetail](AssemblyDetail detail) += index(detail);
sku[DocumentDetail](AssemblyDetail detail) += sku(detail);
quantity[DocumentDetail](AssemblyDetail detail) += quantity(detail);
price[DocumentDetail](AssemblyDetail detail) += price(detail);

document[DocumentDetail](AssemblyDetail detail) += assembly(detail);

overFillDocument  ABSTRACT LIST ( AssemblyDetail, DocumentDetail); 
fillDocument 'Подбор документа'(Assembly assembly)  { 
    DIALOG documents DO {
        FOR inSession(document(DocumentDetail documentDetail)) NEW i = AssemblyDetail DO {
            assembly(i) <- assembly;
            sku(i) <- sku(documentDetail);
            quantity(i) <- quantity(documentDetail);
            price(i) <- price(documentDetail) WHERE fillPriceDocuments();
            overFillDocument(i, documentDetail);
        }
    }
} TOOLBAR;

@implementDocumentForm(assembly, as, 'Сборка');
supplierStock(Assembly assembly) += stock(assembly);

@defineDocumentSkuStockPriceListTypeSystemLedger(assembly, );

FORM assembly 'Сборка'

    OBJECTS a = Assembly PANEL

    PROPERTIES(a) isPosted, nameOperation, nameNumerator, number, series, nameStock ON CHANGE changeStockCompany(a),
                  idBarcodeSku, idSku SHOWIF showIDs(), nameSku, shortNameUOMSku,
                  quantity, nameCurrency, price, sum, 
                  date, time, quantityAssemblyDetail, sumAssemblyDetail, note

    OBJECTS d = AssemblyDetail
    PROPERTIES(d) index,
                  idBarcodeSku, idSku SHOWIF showIDs(), nameSku, shortNameUOMSku,
                  nameBatch SHOWIF showBatch(a) ON CHANGE changeBatch(d),
                  quantity, price, sum

    PROPERTIES(a) DRAW d addDetailDialogSkuStockAssemblyDetail, addDetailInputBarcodeAssemblyDetail

    PROPERTIES(d) NEW, deleted = DELETE GRID
    FILTERS assembly(d) = a

    EVENTS
        ON OK prePost(a)

    EDIT Assembly OBJECT a
;

DESIGN assembly {
    OBJECTS {
        NEW mainTabbed {
            tabbed = TRUE;
            fill = 1;
            NEW document {
                caption = 'Сборка';                      
                NEW header FIRST {
                    horizontal = TRUE;
                    alignment = STRETCH;
                    NEW headerLeft {
                        MOVE GROUP(documentHeader, a) {
                            lines = 1;
                            horizontal = TRUE;
                            alignment = STRETCH;
                            MOVE PROPERTY(isPosted(a));
                            MOVE PROPERTY(nameOperation(a));
                            MOVE PROPERTY(nameStock(a));
                            MOVE PROPERTY(nameNumerator(a));
                            MOVE PROPERTY(number(a));
                            MOVE PROPERTY(series(a));
                            MOVE PROPERTY(date(a));
                            MOVE PROPERTY(time(a));
                        }
                        NEW headerSku {
                            caption = 'Товар';
                            horizontal = TRUE;
                            alignment = STRETCH;
                            MOVE PROPERTY(idBarcodeSku(a));
                            MOVE PROPERTY(idSku(a));
                            MOVE PROPERTY(nameSku(a)) { notNull = TRUE; }
                            MOVE PROPERTY(shortNameUOMSku(a));
                        }
                        NEW headerParams {
                            caption = 'Параметры';
                            horizontal = TRUE;
                            alignment = STRETCH;
                            MOVE PROPERTY(quantity(a));
                            MOVE PROPERTY(nameCurrency(a));
                            MOVE PROPERTY(price(a));
                            MOVE PROPERTY(sum(a));
                        }
                        MOVE PROPERTY(note(a)) { alignment = STRETCH; }
                    }
                    NEW headerRight {
                        MOVE GROUP(documentSum, a) {
                            lines = 1;
                        }
                    }
                }
                NEW detailsPane {
                    fill = 1;
                    tabbed = TRUE;
                    MOVE BOX(d) {
                        caption = 'Спецификация';
                        PROPERTY(nameSku(d)) { notNull = TRUE; }
                    }
                }
            }
        }
    }
    MOVE TOOLBARBOX;
    PROPERTY(formOk()) {
        caption = 'Провести';
    }
}

edit (AssemblyDetail d) + {  DIALOG assembly OBJECTS a = assembly(d), d = d DOCKED; }

show 'Просмотреть' (Assembly a)  { 
	NEWSESSION {
	    SHOW assembly OBJECTS a = a DOCKED READONLY;
	}
}

show 'Просмотреть' (AssemblyDetail d)  { 
	NEWSESSION {
	    SHOW assembly OBJECTS a = assembly(d), d = d DOCKED READONLY;
	}
}

@addEventGenerateNumberOnForm(assembly, a, assembly);

@extendFormDocumentSkuStock(assembly, assembly, a, stock, );

@defineDocumentBatchStockPriceListTypeSystemLedger(assembly, );
@extendFormDocumentBatchStock(assembly, assembly, a, stock, );


FORM assemblies 'Сборки товаров'

    OBJECTS a = Assembly LAST
    PROPERTIES(a) READONLY isClosed, isPosted, nameOperation, number, series, date, time, nameStock,
                           idBarcodeSku, idSku, nameSku, quantity, sum,
                           countAssemblyDetail, quantityAssemblyDetail
                             
    PROPERTIES(a) READONLY note

    PROPERTIES(a) READONLY PANEL createdNameUser, createdTime, createdHostnameComputer, 
                                 postedNameUser, postedTime, postedHostnameComputer

    PROPERTIES(a) NEWSESSION NEW, EDIT SHOWIF isOpened(a), DELETE SHOWIF isOpened(a) 
    PROPERTIES(a) close SHOWIF isOpened(a), open SHOWIF isClosed(a)     
    
    OBJECTS d = AssemblyDetail
    PROPERTIES(d) READONLY index,
                           idBarcodeSku, idSku SHOWIF showIDs(), nameSku, shortNameUOMSku,
                           quantity, price, sum
    FILTERS assembly(d) = a
;
@extendFormFilterAccessStock(Assembly, a, assemblies, stock, company);

DESIGN assemblies {
    OBJECTS {
        NEW tabbedPane {
            fill = 0.5;
            tabbed = TRUE;

            MOVE BOX(d) {
                caption = 'Спецификация';
            }
            NEW history {
                caption = 'История';

                MOVE GROUP(created,a);
                MOVE GROUP(posted,a);
            }
            NEW print {
                caption = 'Печатные формы';
            }
            NEW actions {
                caption = 'Действия';
            }
        }
    }
}
@defineFilterIsOpened (assembly, assemblies, a);
@extendFormFilterRoleAccess(assembly, a, assemblies);
@defineDocumentLogForm(assemblies, a, history);
@defineDocumentLogForm(assembly, a, detailsPane);

DESIGN assembly { historyTabs { caption = 'История'; } }
NAVIGATOR {
    stockNavigator {
        NEW FOLDER assemblyNavigator 'Сборка' BEFORE balanceSku {
            NEW assemblies;
            NEW operations;
        }
    }
}

// -- цены

WHEN LOCAL (CHANGED(sku(AssemblyDetail d)) OR
            CHANGED(stock(d)) OR
            (CHANGED(dateTime(d)) AND NOT isPosted(d)))
            AND NOT CHANGED(price(d)) DO
    price(d) <- prevAccountPriceB(sku(d), stock(d), dateTime(d));

calcSum = ABSTRACT CASE NUMERIC[18,4] (Assembly);
calcSum(Assembly assembly) += WHEN sumAssemblyDetail(assembly) THEN sumAssemblyDetail(assembly);

WHEN LOCAL (CHANGED(calcSum(Assembly a))) AND 
            NOT CHANGED(sum(a)) DO
    sum(a) <- calcSum(a);

// делаем и без LOCAL, чтобы срабатывало событие при пересчете sum внутри APPLY
WHEN (CHANGED(calcSum(Assembly a))) AND
    NOT CHANGED(sum(a)) DO
    sum(a) <- calcSum(a);

// -- Сборка
   
CLASS AssemblyOutSkuLedger 'Сборка товара (расход)';
TABLE assemblyOutSkuLedger(AssemblyOutSkuLedger);

assemblyOutSkuLedger = AGGR AssemblyOutSkuLedger WHERE isPosted(AssemblyDetail assemblyDetail) MATERIALIZED INDEXED;

dateTime(AssemblyOutSkuLedger l) = dateTime(assemblyDetail(l));
isPosted(AssemblyOutSkuLedger l) = isPosted(assemblyDetail(l));
isClosed(AssemblyOutSkuLedger l) = isClosed(assemblyDetail(l));
sku(AssemblyOutSkuLedger l) = sku(assemblyDetail(l));
stock(AssemblyOutSkuLedger l) = stock(assemblyDetail(l));
description(AssemblyOutSkuLedger l) = description(assemblyDetail(l));
quantity(AssemblyOutSkuLedger l) = quantity(assemblyDetail(l));
sum(AssemblyOutSkuLedger l) = sum(assemblyDetail(l));

@implementSkuLedgerOutFIFO(AssemblyOutSkuLedger, sku, stock);

quantity(AssemblyOutSkuLedger l) += quantity(l);
sum(AssemblyOutSkuLedger l) += sum(l);

batch(AssemblyOutSkuLedger l) += batch(assemblyDetail(l));

show(AssemblyOutSkuLedger l) + { show(assemblyDetail(l)); } 

// Сборка
CLASS AssemblyInSkuLedger 'Сборка товара (приход)';
TABLE assemblyInSkuLedger(AssemblyInSkuLedger);

assemblyInSkuLedger = AGGR AssemblyInSkuLedger WHERE isPosted(Assembly assembly) MATERIALIZED INDEXED;

dateTime(AssemblyInSkuLedger l) = dateTime(assembly(l));
isPosted(AssemblyInSkuLedger l) = isPosted(assembly(l));
isClosed(AssemblyInSkuLedger l) = isClosed(assembly(l));
sku(AssemblyInSkuLedger l) = sku(assembly(l));
stock(AssemblyInSkuLedger l) = stock(assembly(l));
description(AssemblyInSkuLedger l) = description(assembly(l));
quantity(AssemblyInSkuLedger l) = quantity(assembly(l));
price(AssemblyInSkuLedger l) = price(assembly(l));
sum(AssemblyInSkuLedger l) = sum(assembly(l));

@implementBatch(AssemblyInSkuLedger, sku, stock, price);

quantity(AssemblyInSkuLedger l) += quantity(l);
sum(AssemblyInSkuLedger l) += sum(l);

show(AssemblyInSkuLedger l) + { show(assembly(l)); }

@implementStockDocumentLedgerInc(Assembly, stock);

sumItem [IncStockDocumentLedger](Assembly ledger) += sum(ledger);

EXTEND CLASS Assembly : OutStockDocumentLedger;

type(Assembly l) += STRING[50]('Сборка товаров') IF l IS Assembly;
sumItem [OutStockDocumentLedger](Assembly ledger) += sumAssemblyDetail(ledger);

operation[StockDocumentLedger](Assembly ledger) += operation(ledger);

close[StockDocumentLedger](Assembly l) + {  close(l); }

stockDocumentLedger(AssemblyOutSkuLedger ledger) += assembly(assemblyDetail(ledger));
stockDocumentLedger(AssemblyInSkuLedger ledger) += assembly(ledger);

// copy

copy 'Копировать'(Assembly s)  {
    NEWSESSION {
        NEW a = Assembly {
            operation(a) <- operation(s);
            stock(a) <- stock(s);
            sku(a) <- sku(s);
            quantity(a) <- quantity(s);
            
            FOR assembly(AssemblyDetail sd) == s DO NEW d = AssemblyDetail {
                assembly(d) <- a;
                sku(d) <- sku(sd);
                quantity(d) <- quantity(sd);
            }

            SHOW assembly OBJECTS a = a DOCKED NOCANCEL;
        }
    }
} TOOLBAR;

EXTEND FORM assemblies
    PROPERTIES(a) copy
;

@defineOperationProperty(quantityFillCheck, 'Должно быть заполнено количество', BOOLEAN, constraintContainer);

CONSTRAINT (SET (isPosted(AssemblyDetail d)) OR CHANGED (quantity(d))) AND isPosted(d) AND quantityFillCheck(operation(d)) AND NOT quantity(d) > 0
    MESSAGE 'Для текущей операции обязательно заполнение поля "Количество" положительным значением';

@defineOperationProperty(priceFillCheck, 'Должна быть заполнена цена', BOOLEAN, constraintContainer);

CONSTRAINT (SET (isPosted(AssemblyDetail d)) OR CHANGED (price(d))) AND isPosted(d) AND priceFillCheck(operation(d)) AND NOT price(d) > 0
    MESSAGE 'Для текущей операции обязательно заполнение поля "Цена"';

@defineOperationProperty(detailsFillCheck, 'Должны быть строки у документа', BOOLEAN, constraintContainer);

CONSTRAINT (SET (isPosted(Assembly doc)) OR DROPPED (countAssemblyDetail(doc))) AND isPosted(doc) AND detailsFillCheck(operation(doc)) AND NOT countAssemblyDetail(doc)
    MESSAGE 'Для текущей операции обязательно наличие строк спецификации';

@defineOperationProperty(oneDetailCheck, 'Запретить внесение более 1 позиции для сборки', BOOLEAN, constraintContainer);

CONSTRAINT (SET(isPosted(Assembly doc)) OR CHANGED(countAssemblyDetail(doc))) AND isPosted(doc) AND oneDetailCheck(operation(doc)) AND countAssemblyDetail(doc) > 1
    MESSAGE 'Для текущей операции запрещено внесение более 1 позиции для сборки';

@defineOperationProperty(sameGroupCheck, 'Запретить внесение товара не из своей подгруппы товара', BOOLEAN, constraintContainer);

CONSTRAINT (SET(isPosted(AssemblyDetail d)) OR CHANGED(sku(d)) OR CHANGED(sku(assembly(d)))) AND isPosted(d) AND sameGroupCheck(operation(d)) AND 
    NOT skuGroup4(sku(d)) == skuGroup4(sku(assembly(d)))
    MESSAGE 'Для текущей операции запрещено внесение внесение товара не из своей подгруппы товара';

@defineOperationProperty(sameUOMCheck, 'Единицы измерения должны совпадать', BOOLEAN, constraintContainer);

CONSTRAINT (SET(isPosted(AssemblyDetail d)) OR CHANGED(sku(d)) OR CHANGED(sku(assembly(d)))) AND isPosted(d) AND sameUOMCheck(operation(d)) AND
    NOT UOM(sku(d)) == UOM(sku(assembly(d)))
    MESSAGE 'Для текущей операции единицы измерения должны совпадать';

@defineOperationProperty(quantityCheck, 'Запретить расхождение по кол-ву', BOOLEAN, constraintContainer);

CONSTRAINT (SET(isPosted(AssemblyDetail d)) OR CHANGED(UOM(sku(d))) OR CHANGED(UOM(sku(assembly(d)))) OR CHANGED(quantityAssemblyDetail(assembly(d))) 
    OR CHANGED(quantity(assembly(d)))) AND isPosted(d) AND quantityCheck(operation(d)) AND
    (GROUP SUM 1 IF UOM(sku(AssemblyDetail dd)) == UOM(sku(assembly(dd))) AND assembly(dd) == assembly(d)) == countAssemblyDetail(assembly(d)) AND NOT 
    quantity(assembly(d)) == quantityAssemblyDetail(assembly(d))
        MESSAGE 'Для текущей операции запрещено расхождение по кол-ву в документе и в строках';

@defineOperationProperty(skuCheck, 'Запретить одинаковые товары', BOOLEAN, constraintContainer);

CONSTRAINT (SET(isPosted(AssemblyDetail d)) OR CHANGED(sku(d)) OR CHANGED(sku(assembly(d)))) AND isPosted(d) AND
    skuCheck(operation(d)) AND sku(d) == sku(assembly(d))
    MESSAGE 'Для текущей операции запрещены одинаковые товары в документе и в строках';