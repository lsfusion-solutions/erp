MODULE DisassemblyLotMachinery;

REQUIRE DisassemblyLot, CashRegisterPriceTransactionCustomLot;

NAMESPACE Disassembly;

EXTEND CLASS Disassembly : Machinery.PriceTransactionDocument;
isDraft[PriceTransactionDocument] (Disassembly document) += Disassembly.isDraft(document);
description[PriceTransactionDocument] (Disassembly document) += STRING[200](description(document));
date[PriceTransactionDocument] (Disassembly document) += Disassembly.date(document);
time[PriceTransactionDocument] (Disassembly document) += Disassembly.time(document);
series[PriceTransactionDocument] (Disassembly document) += Disassembly.series(document);
number[PriceTransactionDocument] (Disassembly document) += Disassembly.number(document);
operation[PriceTransactionDocument] (Disassembly document) += operation(document);

 
createCashRegisterPriceTransactionDocumentLot 'Загрузить в оборудование' (Disassembly d){
    LOCAL message = TEXT();
    LOCAL sentSomething = BOOLEAN();
    message() <- TEXT('Принято к загрузке в оборудование : \n');
    FOR stock(GroupCashRegister g) = stock(d) AND active(g) NEW t = CashRegisterPriceTransactionLot DO {
        
        groupCashRegister(t) <- g;
        priceTransactionDocument(t) <- d;
        comment(t) <- description(d);
        in(t, Lot l) <- TRUE IF quantity(d, l);
        in(t, CashRegister c) <- TRUE IF groupMachinery(c) = g AND active(c);
        LOCAL countLots = INTEGER ();
        countLots() <- GROUP SUM 1 IF in(t, Lot l);
        message() <- message() + (OVERRIDE name(g), 'Без наименования') + ' - ' + (OVERRIDE  countLots() + ' марок.\n', ' ');
        sent(d) <- TRUE IF isPosted(d) AND countLots();
        sentSomething() <- TRUE;
        APPLY NESTED LOCAL;
        
    }
    IF sentSomething() THEN
        MESSAGE message() NOWAIT;
    ELSE
        IF NOT supressNoNeedMessage() THEN
            MESSAGE 'Загрузка марок в оборудование не требуется: '+ nameStock(d) +'.\n' NOWAIT;
}CONFIRM;

backgroundCreateMachineryPriceTransaction 'Цвет' (PriceTransactionDocument disassembly) = IF countProcess(disassembly) THEN
                                                                            RGB(255,255,128)
                                                                         ELSE
                                                                            RGB(212,255,212) IF NOT sent(disassembly);

EXTEND FORM disassemblies
    PROPERTIES(a) statusMachinery BACKGROUND backgroundCreateMachineryPriceTransaction(a) READONLY AFTER sumDisassemblyDetail(a),        
                  createCashRegisterPriceTransactionDocumentLot SHOWIF useLot(a) READONLYIF isDraft(a)
;

DESIGN disassemblies {
    actions{
        NEW machinery {                 
            caption = 'Загрузки' ;
            type = CONTAINERV;    
            MOVE PROPERTY (createCashRegisterPriceTransactionDocumentLot(a)) { alignment = STRETCH; }
        }
    }
    PROPERTY(statusMachinery(a)) { charWidth = 15; } 
}

@extendFormDocumentMachineryPriceTransactionError(disassemblies, a, disassembly, tabbedPane);