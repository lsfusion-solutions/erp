MODULE Disassembly;

REQUIRE Stock, Item, Barcode, Document, EmployeeStock, PriceListAccount,
        StockMovement, StockSkuDocument,
        DisassemblyOperation;

CLASS Disassembly 'Разборка' : Document;
CLASS DisassemblyDetail 'Строка разборки' : DocumentDetail;

@defineDocument(disassembly);
TABLE sessionDisassembly (Session, Disassembly);

// header
@deriveDocumentHeaderTimePrefix(Disassembly, );

operation = DATA Operation (Disassembly) MATERIALIZED;
nameOperation 'Операция' = name(operation(Disassembly disassembly));

operation 'Операция' (DisassemblyDetail disassemblyDetail) = operation(disassembly(disassemblyDetail));

@defineDocumentOperationRolePrefix(disassembly, );
@defineDocumentOperationConstraint(disassembly, 'разборка', Disassembly);

@defineDocumentHeaderNumber(Disassembly, BPSTRING[2]);

@defineDocumentDetailNumber (disassembly, DisassemblyDetail);

@defineNumeratedDefault(Disassembly, 'Разборка', 'РБ');

@defineDocumentDataStock (disassembly, stock, 'Склад', );

countryStock (Disassembly a) = country(stock(a));

@defineExternalizable(disassembly, STRING[100]);

@defineDocumentDialogStocks(disassembly, stock, company, , );
@defineDocumentStockAccess(Disassembly, stock, company);

@defineDocumentPosted(disassembly);
@defineDocumentClosed(disassembly);
@defineDocumentClosedConstraint(Disassembly);
@defineDocumentDescription (disassembly, 'Разборка товаров');

@defineDocumentCurrency(disassembly);
@deriveDocumentCurrency(disassembly, stock);

// header sku 
@defineDocumentDetailSkuCustomPrefix(disassembly, sku, , );
CONSTRAINT isPosted(Disassembly a) AND NOT sku(a)
    MESSAGE 'Для разборки товаров должен быть задан SKU';

@defineDocumentDetailBatchCustom(disassembly, batch);

CONSTRAINT SETCHANGED(batch(Disassembly disassembly)) AND NOT countLedger(batch(disassembly), stock(disassembly))
    CHECKED BY batch[Disassembly]
    MESSAGE 'Расходовать можно только партию с движением по складу';

@defineDocumentDetailQuantityCustomPrefix(disassembly, ,);

@defineDocumentDetailPriceCustomPrefix (disassembly, , );

@defineDocumentDetailDataSumCustomPrefix(disassembly, ,);
@deriveDocumentDetailSumCustomPrefix(disassembly, , currency, quantity);

// detail
@defineDocumentDetailSku(disassembly, sku);
CONSTRAINT isPosted(DisassemblyDetail d) AND NOT sku(d)
    MESSAGE 'Для строки разборки товаров должен быть задан SKU';

@defineDocumentDetailQuantity (disassembly);

@defineDocumentDetailPrice (disassembly);

@defineDocumentDetailDataSum(disassembly);

calcSum = ABSTRACT CASE NUMERIC[18,4] (DisassemblyDetail);
calcSum(DisassemblyDetail disassemblyDetail) += WHEN quantity(disassemblyDetail) AND price(disassemblyDetail) THEN NUMERIC[18,4](round(quantity(disassemblyDetail) * price(disassemblyDetail), currency(disassemblyDetail))); 
sum (DisassemblyDetail disassemblyDetail) <- calcSum(disassemblyDetail) WHEN CHANGED(calcSum(disassemblyDetail));

@defineDocumentHeaderQuantity(disassembly);
@defineDocumentHeaderSum(disassembly);

weight = ABSTRACT VALUE NUMERIC[12,6] (DisassemblyDetail);
weight (DisassemblyDetail d) += netWeight(sku(d));

// shortcut

@defineMovementSku(disassembly);
@defineBalancesSku(disassembly);

@defineBarcodeSku(disassembly);
@defineMovementPriceSku(disassembly);
@defineInfoSku(disassembly);

@defineMovementSku(disassemblyDetail);
@defineBalancesSku(disassemblyDetail);

@defineBarcodeSku(disassemblyDetail);
@defineMovementPriceSku(disassemblyDetail);
@defineInfoSku(disassemblyDetail);

@defineAddDetailDialogSkuStock(disassembly, sku, stock, dialogSku);
@defineAddDetailDialogBarcode(disassembly, sku);
isClosed[Document](Disassembly disassembly) += isClosed(disassembly);
isPosted[Document](Disassembly disassembly) += isPosted(disassembly);
number[Document](Disassembly disassembly) += number(disassembly);
series[Document](Disassembly disassembly) += series(disassembly);
date[Document](Disassembly disassembly) += date(disassembly);

index[DocumentDetail](DisassemblyDetail detail) += index(detail);
sku[DocumentDetail](DisassemblyDetail detail) += sku(detail);
quantity[DocumentDetail](DisassemblyDetail detail) += quantity(detail);
price[DocumentDetail](DisassemblyDetail detail) += price(detail);

document[DocumentDetail](DisassemblyDetail detail) += disassembly(detail);

overFillDocument  ABSTRACT LIST ( DisassemblyDetail, DocumentDetail); 
fillDocument 'Подбор документа'(Disassembly disassembly)  { 
    DIALOG documents DO {
        FOR inSession(document(DocumentDetail documentDetail)) NEW i = DisassemblyDetail DO {
            disassembly(i) <- disassembly;
            sku(i) <- sku(documentDetail);
            quantity(i) <- quantity(documentDetail);
            price(i) <- price(documentDetail) WHERE fillPriceDocuments();
            overFillDocument(i, documentDetail);
        }
    }
} TOOLBAR;

@implementDocumentForm(disassembly, das, 'Разборка');
supplierStock(Disassembly disassembly) += stock(disassembly);

@defineDocumentSkuStockPriceListTypeSystemLedger(disassembly, );

FORM disassembly 'Разборка'

    OBJECTS a = Disassembly PANEL

    PROPERTIES(a) isPosted, nameOperation, nameNumerator, number, series, nameStock ON CHANGE changeStockCompany(a),
                  idBarcodeSku, idSku SHOWIF showIDs(), nameSku, shortNameUOMSku, nameBatch,
                  quantity, nameCurrency, price, sum, 
                  date, time, quantityDisassemblyDetail, sumDisassemblyDetail, note

    OBJECTS d = DisassemblyDetail
    PROPERTIES(d) index,
                  idBarcodeSku, idSku SHOWIF showIDs(), nameSku, shortNameUOMSku,
                  quantity, price, sum

    PROPERTIES(a) DRAW d addDetailDialogSkuStockDisassemblyDetail, addDetailInputBarcodeDisassemblyDetail

    PROPERTIES(d) NEW, deleted = DELETE GRID
    FILTERS disassembly(d) = a

    EVENTS
        ON OK prePost(a)

    EDIT Disassembly OBJECT a
;

DESIGN disassembly {
    OBJECTS {
        NEW mainTabbed {
            tabbed = TRUE;
            fill = 1;
            NEW document {
                caption = 'Разборка';                      
                NEW header FIRST {
                    horizontal = TRUE;
                    alignment = STRETCH;
                    NEW headerLeft {
                        MOVE GROUP(documentHeader, a) {
                            lines = 1;
                            horizontal = TRUE;
                            alignment = STRETCH;
                            MOVE PROPERTY(isPosted(a));
                            MOVE PROPERTY(nameOperation(a));
                            MOVE PROPERTY(nameStock(a));
                            MOVE PROPERTY(nameNumerator(a));
                            MOVE PROPERTY(number(a));
                            MOVE PROPERTY(series(a));
                            MOVE PROPERTY(date(a));
                            MOVE PROPERTY(time(a));
                        }
                        NEW headerSku {
                            caption = 'Товар';
                            horizontal = TRUE;
                            alignment = STRETCH;
                            MOVE PROPERTY(idBarcodeSku(a));
                            MOVE PROPERTY(idSku(a));
                            MOVE PROPERTY(nameSku(a)) { notNull = TRUE; }
                            MOVE PROPERTY(shortNameUOMSku(a));
                            MOVE PROPERTY(nameBatch(a));
                        }
                        NEW headerParams {
                            caption = 'Параметры';
                            horizontal = TRUE;
                            alignment = STRETCH;
                            MOVE PROPERTY(quantity(a));
                            MOVE PROPERTY(nameCurrency(a));
                            MOVE PROPERTY(price(a));
                            MOVE PROPERTY(sum(a));
                        }
                        MOVE PROPERTY(note(a)) { alignment = STRETCH; }
                    }
                    NEW headerRight {
                        MOVE GROUP(documentSum, a) {
                            lines = 1;
                        }
                    }
                }
                NEW detailsPane {
                    fill = 1;
                    tabbed = TRUE;
                    MOVE BOX(d) {
                        caption = 'Спецификация';
                        PROPERTY(nameSku(d)) { notNull = TRUE; }
                    }
                }
            }
        }
    }
    MOVE TOOLBARBOX;
    PROPERTY(formOk()) {
        caption = 'Провести';
    }
}

edit (DisassemblyDetail d) + {  DIALOG disassembly OBJECTS a = disassembly(d), d = d DOCKED; }

show 'Просмотреть' (Disassembly a)  { 
	NEWSESSION {
	    SHOW disassembly OBJECTS a = a DOCKED READONLY;
	}
}

show 'Просмотреть' (DisassemblyDetail d)  { 
	NEWSESSION {
	    SHOW disassembly OBJECTS a = disassembly(d), d = d DOCKED READONLY;
	}
}

@addEventGenerateNumberOnForm(disassembly, a, disassembly);

@extendFormDocumentSkuStock(disassembly, disassembly, a, stock, );

filterDisassemblyStock = DATA LOCAL NESTED Stock();
nameFilterDisassemblyStock 'Склад' = name(filterDisassemblyStock());
filterDisassemblyStock (Disassembly w) = stock(w) == filterDisassemblyStock() OR NOT filterDisassemblyStock();      

FORM disassemblies 'Разборки товаров'
    PROPERTIES () nameFilterDisassemblyStock

    OBJECTS a = Disassembly LAST
    PROPERTIES(a) READONLYIF isReadonly() isClosed 
    PROPERTIES(a) READONLY isPosted, nameOperation, number, series, date, time, nameStock,
                           idBarcodeSku, idSku, nameSku,
                           countDisassemblyDetail, quantityDisassemblyDetail, sumDisassemblyDetail
                             
    PROPERTIES(a) READONLY note

    PROPERTIES(a) READONLY PANEL createdNameUser, createdTime, createdHostnameComputer, 
                                 postedNameUser, postedTime, postedHostnameComputer

    PROPERTIES(a) NEWSESSION NEW, EDIT SHOWIF isOpened(a), DELETE SHOWIF isOpened(a) 
    PROPERTIES(a) close SHOWIF isOpened(a), open SHOWIF isClosed(a)     
    FILTERS filterDisassemblyStock(a)
    
    OBJECTS d = DisassemblyDetail
    PROPERTIES(d) READONLY index,
                           idBarcodeSku, idSku SHOWIF showIDs(), nameSku, shortNameUOMSku,
                           quantity, price, sum
    FILTERS disassembly(d) = a
;
@extendFormFilterAccessStock(Disassembly, a, disassemblies, stock, company);

@extendFormEditable(disassemblies);

DESIGN disassemblies {
    NEW filters BEFORE OBJECTS {
        horizontal = TRUE;
        caption = 'Фильтры';
        MOVE PROPERTY(nameFilterDisassemblyStock()); 
    }
    OBJECTS {
        NEW tabbedPane {
            fill = 0.5;
            tabbed = TRUE;

            MOVE BOX(d) {
                caption = 'Спецификация';
            }
            NEW history {
                caption = 'История';

                MOVE GROUP(created,a);
                MOVE GROUP(posted,a);
            }
            NEW print {
                caption = 'Печатные формы';
            }
            NEW actions {
                caption = 'Действия';
            }
        }
    }
}
@defineFilterIsOpened (disassembly, disassemblies, a);
@extendFormFilterRoleAccess(disassembly, a, disassemblies);
@defineDocumentLogForm(disassemblies, a, history);
@defineDocumentLogForm(disassembly, a, detailsPane);

DESIGN disassembly { historyTabs { caption = 'История'; } }
NAVIGATOR {
    stockNavigator {
        NEW FOLDER disassemblyNavigator 'Разборка' BEFORE balanceSku {
            NEW disassemblies;
            NEW operations;
        }
    }
}

// -- цены

WHEN LOCAL (CHANGED(sku(Disassembly a)) OR
            CHANGED(stock(a)) OR
            (CHANGED(dateTime(a)) AND NOT isPosted(a)))
            AND NOT CHANGED(price(a)) DO
    price(a) <- prevAccountPriceB(sku(a), stock(a), dateTime(a));

dataPercent 'Процент цены' = DATA NUMERIC[16,2] (DisassemblyDetail);
percent 'Процент цены' (DisassemblyDetail d) = OVERRIDE dataPercent(d), NUMERIC[18,4](weight(d)), 1 IF d IS DisassemblyDetail MATERIALIZED;

calcPrice = ABSTRACT CASE NUMERIC[16,4] (DisassemblyDetail);
calcPrice(DisassemblyDetail d) += WHEN (sum(d) AND quantity(d)) THEN NUMERIC[16,4](round(sum(d) / quantity(d), currency(d)));

useOverSum = ABSTRACT BOOLEAN (DisassemblyDetail);
overSum = ABSTRACT NUMERIC[18,4] (DisassemblyDetail);

extraCalculatePrice ABSTRACT LIST (Disassembly);
calculatePrice 'Рассчитать цены' (Disassembly a) {
    price(a) <- prevAccountPriceB(sku(a), stock(a), dateTime(a));
    
    sum(DisassemblyDetail d) <- IF useOverSum(d) THEN overSum(d) ELSE (PARTITION UNGROUP sum
                                        PROPORTION STRICT ROUND(2) percent(d)
                                        ORDER d
                                        BY disassembly(d)) WHERE disassembly(d) = a;
    price(DisassemblyDetail d) <- calcPrice(d) WHERE disassembly(d) = a;

    extraCalculatePrice(a);
}

EXTEND FORM disassembly
    PROPERTIES(d) percent AFTER quantity(d) BACKGROUND dataPercent(d)
    
    PROPERTIES(a) calculatePrice DRAW d TOOLBAR
;

// Разборка
CLASS DisassemblyOutSkuLedger 'Разборка товара (расход)';
TABLE disassemblyOutSkuLedger(DisassemblyOutSkuLedger);

disassemblyOutSkuLedger = AGGR DisassemblyOutSkuLedger WHERE isPosted(Disassembly disassembly) MATERIALIZED INDEXED;

dateTime(DisassemblyOutSkuLedger l) = dateTime(disassembly(l));
isPosted(DisassemblyOutSkuLedger l) = isPosted(disassembly(l));
isClosed(DisassemblyOutSkuLedger l) = isClosed(disassembly(l));
sku(DisassemblyOutSkuLedger l) = sku(disassembly(l));
batch(DisassemblyOutSkuLedger l) = batch(disassembly(l));
stock(DisassemblyOutSkuLedger l) = stock(disassembly(l));
description(DisassemblyOutSkuLedger l) = description(disassembly(l));
quantity(DisassemblyOutSkuLedger l) = quantity(disassembly(l));
sum(DisassemblyOutSkuLedger l) = sum(disassembly(l));

@implementSkuLedgerOutFIFO(DisassemblyOutSkuLedger, sku, stock);

batch[DataSkuLedger] (DisassemblyOutSkuLedger ledger) += batch(ledger);
@implementSkuLedgerOutFIFOBatchBalance(disassemblyOutSkuLedger, );

quantity(DisassemblyOutSkuLedger l) += quantity(l);
sum(DisassemblyOutSkuLedger l) += sum(l);

show(DisassemblyOutSkuLedger l) + { show(disassembly(l)); } 

// Разборка
CLASS DisassemblyInSkuLedger 'Разборка товара (приход)';
TABLE disassemblyInSkuLedger(DisassemblyInSkuLedger);

disassemblyInSkuLedger = AGGR DisassemblyInSkuLedger WHERE isPosted(DisassemblyDetail disassemblyDetail) MATERIALIZED INDEXED;

dateTime(DisassemblyInSkuLedger l) = dateTime(disassemblyDetail(l));
number(DisassemblyInSkuLedger l) = number(disassemblyDetail(l));
isPosted(DisassemblyInSkuLedger l) = isPosted(disassemblyDetail(l));
isClosed(DisassemblyInSkuLedger l) = isClosed(disassemblyDetail(l));
sku(DisassemblyInSkuLedger l) = sku(disassemblyDetail(l));
stock(DisassemblyInSkuLedger l) = stock(disassemblyDetail(l));
description(DisassemblyInSkuLedger l) = description(disassemblyDetail(l));
quantity(DisassemblyInSkuLedger l) = quantity(disassemblyDetail(l));
price(DisassemblyInSkuLedger l) = price(disassemblyDetail(l));
sum(DisassemblyInSkuLedger l) = sum(disassemblyDetail(l));

@implementBatch(DisassemblyInSkuLedger, sku, stock, price);
number[Batch](DisassemblyInSkuLedger batch) += number(batch);

quantity(DisassemblyInSkuLedger l) += quantity(l);
sum(DisassemblyInSkuLedger l) += sum(l);

show(DisassemblyInSkuLedger l) + { show(disassemblyDetail(l)); } 

DESIGN options {
    pane {
        NEW disassembly {
            caption = 'Разборки товаров';
        }
    }
}

@implementStockDocumentLedgerOut(Disassembly, stock);

sumItem [OutStockDocumentLedger](Disassembly ledger) += sum(ledger);

EXTEND CLASS Disassembly : IncStockDocumentLedger;

type(Disassembly l) += STRING[50]('Разборка товаров') IF l IS Disassembly;
sumItem [IncStockDocumentLedger](Disassembly ledger) += sumDisassemblyDetail(ledger);

operation[StockDocumentLedger](Disassembly ledger) += operation(ledger);

close[StockDocumentLedger](Disassembly l) + {  close(l); }

stockDocumentLedger(DisassemblyOutSkuLedger ledger) += disassembly(ledger);
stockDocumentLedger(DisassemblyInSkuLedger ledger) += disassembly(disassemblyDetail(ledger));

// copy
copy 'Копировать'(Disassembly s)  {
    NEWSESSION {
        NEW a = Disassembly {
            operation(a) <- operation(s);
            stock(a) <- stock(s);
            sku(a) <- sku(s);
            quantity(a) <- quantity(s);

            FOR disassembly(DisassemblyDetail sd) == s DO NEW d = DisassemblyDetail {
                disassembly(d) <- a;
                sku(d) <- sku(sd);
                quantity(d) <- quantity(sd);
                dataPercent(d) <- dataPercent(sd);
            }

            SHOW disassembly OBJECTS a = a DOCKED NOCANCEL;
        }
    }
} TOOLBAR;

EXTEND FORM disassemblies
    PROPERTIES(a) copy
;

@defineOperationProperty(quantityFillCheck, 'Должно быть заполнено количество', BOOLEAN, constraintContainer);


CONSTRAINT (SET (isPosted(DisassemblyDetail d)) OR CHANGED (quantity(d))) AND isPosted(d) AND quantityFillCheck(operation(d)) AND NOT quantity(d) > 0
    MESSAGE 'Для текущей операции обязательно заполнение поля "Количество" положительным значением';

@defineOperationProperty(priceFillCheck, 'Должна быть заполнена цена', BOOLEAN, constraintContainer);

CONSTRAINT (SET (isPosted(DisassemblyDetail d)) OR CHANGED (price(d))) AND isPosted(d) AND priceFillCheck(operation(d)) AND NOT price(d) > 0
    MESSAGE 'Для текущей операции обязательно заполнение поля "Цена"';

@defineOperationProperty(detailsFillCheck, 'Должны быть строки у документа', BOOLEAN, constraintContainer);

CONSTRAINT (SET (isPosted(Disassembly doc)) OR DROPPED (countDisassemblyDetail(doc))) AND isPosted(doc) AND detailsFillCheck(operation(doc)) AND NOT countDisassemblyDetail(doc)
    MESSAGE 'Для текущей операции обязательно наличие строк спецификации';