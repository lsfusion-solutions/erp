MODULE StockSkuLedgerReports;

REQUIRE StockReports, StockTax, SkuLedgerTax, ZReport, SkuLedgerSum;

operation(SkuLedger ledger) = OVERRIDE operationDocument(ledger), CASE 
                                                                                    WHEN ledger IS SaleZReportSkuLedger THEN ZReportOperation.zReportSale
                                                                                    WHEN ledger IS ReturnZReportSkuLedger THEN ZReportOperation.zReportReturn;
nameOperation(SkuLedger ledger) = IF isReturn(ledger) THEN nameReturn(operation(ledger)) ELSE name(operation(ledger));

META createGroup(object, name, number)
    g###object name = DATA LOCAL BOOLEAN();
    WHEN LOCAL SET(g###object()) AND countGroup() < 3 DO addGroup(number, name);
    WHEN LOCAL SET(g###object()) AND countGroup() == 3 DO { g###object() <- NULL; };
    WHEN LOCAL DROPPED(g###object()) DO deleteGroup(number);   
END 

order 'Номер' = DATA LOCAL INTEGER(INTEGER);
nameGroup 'Группировка' = DATA LOCAL STRING[100](INTEGER);

countGroup = OVERRIDE (GROUP MAX order(INTEGER i)), 0;

addGroup(INTEGER i, STRING[100] name)  { 
    nameGroup(i) <- name;
    order(i) <- (OVERRIDE (GROUP MAX order(INTEGER in)), 0) + 1;
}
reorderGroup()  { 
    order(INTEGER i) <- PARTITION SUM 1 IF nameGroup(i) ORDER order(i);
}
deleteGroup(INTEGER i)  { 
    nameGroup(i) <- NULL;
    order(i) <- NULL;
    reorderGroup();
}

@createGroup(document, 'По документу', 1);

@createGroup(stock, 'По магазину', 2);

@createGroup(operation, 'По операции', 3);

@createGroup(sku, 'По товару', 4);


@createGroup(group, 'По подгруппам товара', 5);

@createGroup(date, 'По дате', 6);

@createGroup(legalEntity, 'По организации', 7);

@createGroup(group2, 'По категориям товаров', 8);

@createGroup(group3, 'По группам товара', 9);

inBackSheet 'Вкл.' = DATA LOCAL BOOLEAN (Stock);
inBackSheetStocks 'Склады' () =
    GROUP CONCAT name(Stock st) IF inBackSheet(st) ,', ' ORDER name(st),st CHARWIDTH 50;
    
inSession 'Отм.' = DATA LOCAL BOOLEAN (Operation.Operation);
inReturn 'Возврат' = DATA LOCAL BOOLEAN (Operation.Operation);

inSkuLedger = DATA LOCAL BOOLEAN (SkuLedger);

nameGroup1 = DATA LOCAL STRING[255] (SkuLedger);
nameGroup2 = DATA LOCAL STRING[255] (SkuLedger);
nameGroup3 = DATA LOCAL STRING[255] (SkuLedger);
barcodeSku = DATA LOCAL STRING[15] (SkuLedger);

META setNameGroup(number)
    setNameGroup##number () { 
        nameGroup##number(SkuLedger sl) <- NULL;
        IF order(1) == number THEN {
            nameGroup##number(SkuLedger sl) <- (OVERRIDE numberDocument(sl) + ' от ' + date(stockDocumentLedger(sl)), 'Не задано') IF sl IS SkuLedger WHERE inSkuLedger(sl);
        }
        IF order(2) == number THEN {
            nameGroup##number(SkuLedger sl) <- (OVERRIDE nameStock(sl), 'Не задано') IF sl IS SkuLedger WHERE inSkuLedger(sl);
        }
        IF order(3) == number THEN {
            nameGroup##number(SkuLedger sl) <- (OVERRIDE nameOperation(sl), 'Не задано') IF sl IS SkuLedger WHERE inSkuLedger(sl);
        }
        IF order(4) == number THEN {
            nameGroup##number(SkuLedger sl) <- (OVERRIDE nameSku(sl), 'Не задано') IF sl IS SkuLedger WHERE inSkuLedger(sl);
        }
        IF order(5) == number THEN {
            nameGroup##number(SkuLedger sl) <- (OVERRIDE nameSkuGroup((sku(sl))), 'Не задано') IF sl IS SkuLedger WHERE inSkuLedger(sl);
        }
        IF order(6) == number THEN {
            nameGroup##number(SkuLedger sl) <- (OVERRIDE STRING[255](date(sl)), 'Не задано') IF sl IS SkuLedger WHERE inSkuLedger(sl);
        }
        IF order(7) == number THEN {
            nameGroup##number(SkuLedger sl) <- (OVERRIDE nameLegalEntity(stock(sl)), 'Не задано') IF sl IS SkuLedger WHERE inSkuLedger(sl);
        }
        IF order(8) == number THEN {
            nameGroup##number(SkuLedger sl) <- (OVERRIDE nameSkuGroup2((sku(sl))), 'Не задано') IF sl IS SkuLedger WHERE inSkuLedger(sl);
        }
        IF order(9) == number THEN {
            nameGroup##number(SkuLedger sl) <- (OVERRIDE nameSkuGroup3((sku(sl))), 'Не задано') IF sl IS SkuLedger WHERE inSkuLedger(sl);
        }        
    }   
END 

@setNameGroup(1);
@setNameGroup(2);
@setNameGroup(3);

overFillReportGroupOperationFromTo ABSTRACT (GroupType, DATE, DATE);

fillReportGroupOperationFromTo 'Сформировать'(GroupType gt, DATE df, DATE dt)  {
    IF (GROUP SUM 1 IF inBackSheet(Stock st)) = 1 THEN {
        FOR Stock st = (GROUP MAX Stock sst IF inBackSheet(sst)) NOINLINE DO 
            inSkuLedger(SkuLedger sl) <- stock(sl) = st AND date(sl) >= df AND date(sl) <= dt AND include(gt, sku(sl)) AND isPosted(sl) AND ((inSession(operation(sl)) AND NOT isReturn(sl)) OR (inReturn(operation(sl)) AND isReturn(sl)));
    } ELSE
        inSkuLedger(SkuLedger sl) <- inBackSheet(stock(sl)) AND date(sl) >= df AND date(sl) <= dt AND include(gt, sku(sl)) AND isPosted(sl) AND ((inSession(operation(sl)) AND NOT isReturn(sl)) OR (inReturn(operation(sl)) AND isReturn(sl)));
    
    barcodeSku(SkuLedger sl) <- (OVERRIDE idBarcodeSku(sl), 'Не задано') IF sl IS SkuLedger AND gSku() WHERE inSkuLedger(sl);
    
    setNameGroup1();
    setNameGroup2();
    setNameGroup3();
    
    overFillReportGroupOperationFromTo(gt, df, dt);
}

sum 'Сумма' (SkuLedger sl) = OVERRIDE SkuLedger.sum(sl), Stock.sum(sl);
costSum 'Сумма поставщика без НДС' (SkuLedger sl) = OVERRIDE SkuLedger.costSum(sl), Stock.costSum(sl);

sumVAT 'Сумма НДС' (SkuLedger sl) = OVERRIDE SkuLedger.sumVAT(sl), NUMERIC[18,4]([ X*Y/(100+Y)](sum(sl), valueVAT(sku(sl), stock(sl), date(sl))));

costSumVAT 'Сумма НДС поставщика' (SkuLedger sl) = OVERRIDE SkuLedger.costSumVAT(sl), NUMERIC[18,4]((GROUP SUM costSum(sl, Batch batch)*Stock.valueVAT(batch)/100));

costVATSum 'Сумма поставщика с НДС' (SkuLedger sl) = costSumVAT(sl) (+) costSum(sl);

markup 'Торговая надбавка' (SkuLedger sl) = OVERRIDE overMarkup(sl), sum(sl) (-) costSum(sl) (-) sumVAT(sl);

quantity 'Количество' (SkuLedger sl) = OVERRIDE SkuLedger.quantity(sl), Stock.quantity(sl);

FORM printGroupOperation 'Отчет по операциям'   
    PROPERTIES inBackSheetStocks()

    PROPERTIES() countGroup
    
    OBJECTS sl = SkuLedger SUBREPORT
    PROPERTIES(sl) nameGroup1, nameGroup2, nameGroup3, barcodeSku SHOWIF gSku()
    PROPERTIES(sl) sum, sumVAT, costSumVAT, costSum, costVATSum, markup, quantity
    FILTERS inSkuLedger(sl) 
            
    ORDERS nameGroup1(sl), nameGroup2(sl), nameGroup3(sl)
;

isPrintGroupOperationNew 'Новый отчет по операциям' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES isPrintGroupOperationNew()
;
DESIGN options {
    stock {
        MOVE PROPERTY(isPrintGroupOperationNew());
    }
}

barcodeSku(STRING[255] g1, STRING[255] g2, STRING[255] g3) = GROUP MAX barcodeSku(SkuLedger sl) IF inSkuLedger(sl) BY (OVERRIDE nameGroup1(sl),''), (OVERRIDE nameGroup2(sl),''), (OVERRIDE nameGroup3(sl),'');
sum 'Сумма' (STRING[255] g1, STRING[255] g2, STRING[255] g3) = GROUP SUM sum(SkuLedger sl) IF inSkuLedger(sl) BY (OVERRIDE nameGroup1(sl),''), (OVERRIDE nameGroup2(sl),''), (OVERRIDE nameGroup3(sl),'');
sumVAT 'Сумма НДС' (STRING[255] g1, STRING[255] g2, STRING[255] g3) = GROUP SUM sumVAT(SkuLedger sl) IF inSkuLedger(sl) BY (OVERRIDE nameGroup1(sl),''), (OVERRIDE nameGroup2(sl),''), (OVERRIDE nameGroup3(sl),'');
costSumVAT 'Сумма НДС поставщика' (STRING[255] g1, STRING[255] g2, STRING[255] g3) = GROUP SUM costSumVAT(SkuLedger sl) IF inSkuLedger(sl) BY (OVERRIDE nameGroup1(sl),''), (OVERRIDE nameGroup2(sl),''), (OVERRIDE nameGroup3(sl),'');
costSum 'Сумма поставщика без НДС' (STRING[255] g1, STRING[255] g2, STRING[255] g3) = GROUP SUM costSum(SkuLedger sl) IF inSkuLedger(sl) BY (OVERRIDE nameGroup1(sl),''), (OVERRIDE nameGroup2(sl),''), (OVERRIDE nameGroup3(sl),'');
costVATSum 'Сумма поставщика с НДС' (STRING[255] g1, STRING[255] g2, STRING[255] g3) = GROUP SUM costVATSum(SkuLedger sl) IF inSkuLedger(sl) BY (OVERRIDE nameGroup1(sl),''), (OVERRIDE nameGroup2(sl),''), (OVERRIDE nameGroup3(sl),'');
markup 'Торговая надбавка' (STRING[255] g1, STRING[255] g2, STRING[255] g3) = GROUP SUM markup(SkuLedger sl) IF inSkuLedger(sl) BY (OVERRIDE nameGroup1(sl),''), (OVERRIDE nameGroup2(sl),''), (OVERRIDE nameGroup3(sl),'');
quantity 'Количество' (STRING[255] g1, STRING[255] g2, STRING[255] g3) = GROUP SUM quantity(SkuLedger sl) IF inSkuLedger(sl) BY (OVERRIDE nameGroup1(sl),''), (OVERRIDE nameGroup2(sl),''), (OVERRIDE nameGroup3(sl),'');

inBackSheetGroup () = GROUP CONCAT name(Group g) IF dataInSession(g) ,';' ORDER g;

inBackSheetOperation () = GROUP CONCAT name(Operation.Operation o) IF inSession(o) OR inReturn(o),';' ORDER o;

dFrom = DATA LOCAL DATE ();
dTo = DATA LOCAL DATE ();

FORM printGroupOperationNew 'Отчет по операциям'   
    PROPERTIES inBackSheetStocks()

    PROPERTIES() countGroup
    PROPERTIES() inBackSheetGroup, inBackSheetOperation, dFrom, dTo 
    
    OBJECTS d = (g1 = STRING[255], g2 = STRING[255], g3 = STRING[255]) SUBREPORT
    PROPERTIES nameGroup1 = VALUE(g1), nameGroup2 = VALUE(g2), nameGroup3 = VALUE(g3)
    PROPERTIES(g1,g2,g3) barcodeSku SHOWIF gSku(),
                         sum, sumVAT, costSumVAT, costSum, costVATSum, markup, quantity
    FILTERS sum(g1,g2,g3) OR quantity(g1,g2,g3)
    ORDERS nameGroup1, nameGroup2, nameGroup3
;

printGroupOperation 'Отчет по операциям' (DATE dateFrom, DATE dateTo, GroupType gt)  { 
    IF countGroup() == 0 THEN {
        MESSAGE 'Не задана группировка';
        RETURN;
    }
    IF NOT (GROUP SUM 1 IF inBackSheet(Stock st)) THEN {
        MESSAGE 'Не задан склад';
        RETURN;
    }
    IF NOT (GROUP SUM 1 IF inSession(Group gr)) THEN {
        MESSAGE 'Не задана группа';
        RETURN;
    }
    dFrom()<-dateFrom;
    dTo()<-dateTo;
    
    fillReportGroupOperationFromTo(gt, dateFrom, dateTo);
    IF isPrintGroupOperationNew() THEN {PRINT printGroupOperationNew;} ELSE PRINT printGroupOperation;
}  IMAGE 'print.png' IN print;
    
xlsxGroupOperation 'Отчет по операциям (XLSX)' (DATE dateFrom, DATE dateTo, GroupType gt)  { 
    IF countGroup() == 0 THEN {
        MESSAGE 'Не задана группировка';
        RETURN;
    }
    IF NOT (GROUP SUM 1 IF inBackSheet(Stock st)) THEN {
        MESSAGE 'Не задан склад';
        RETURN;
    }
    IF NOT (GROUP SUM 1 IF inSession(Group gr)) THEN {
        MESSAGE 'Не задана группа';
        RETURN;
    }
    dFrom()<-dateFrom;
    dTo()<-dateTo;
    
    fillReportGroupOperationFromTo(gt, dateFrom, dateTo);
    IF isPrintGroupOperationNew() THEN {PRINT printGroupOperationNew XLSX;} ELSE PRINT printGroupOperation XLSX;
} IMAGE 'print.png' IN print;

FORM dialogStocksBackSheet 'Выбор складов'

    TREE stockTree a = BPSTRING[3], sg = StockGroup PARENT parent(sg)
    PROPERTIES READONLY VALUE(a), name(sg)
    ORDERS name(sg)
    FILTERS stringEqualsAll(a)

    OBJECTS s = Stock
    PROPERTIES(s) READONLY id, name
    PROPERTIES (s) inBackSheet
    ORDERS name(s)
    FILTERS isParent(sg, s) OR (s IS Stock AND NOT sg),
            isCompany(s),
            countCompanyStock(sg)

    FILTERGROUP inactiveStock FILTER 'Активный' active(s) 'ctrl F10' DEFAULT    
    FILTERGROUP select FILTER 'Отм.' inBackSheet(s) 'F9' 
;

DESIGN dialogStocksBackSheet {
    BOX {
        size = (1024, 768);
        NEW topContainer {
            horizontal = TRUE;
            fill = 1;
            MOVE BOX(TREE stockTree) {
                caption = 'Склады';
            }
            MOVE BOX(s) {
                fill = 3;
                GRID(s) {
                    defaultComponent = TRUE;
                }
                PROPERTY(name(s)){
                    charWidth = 35;
                }
            }
        }
        MOVE TOOLBARBOX;
    }
}

@extendFormFilterStockAccess(s, dialogStocksBackSheet, company);
changeStocksBackSheet(GroupType gt, DATE df, DATE dt)  { 
    DIALOG dialogStocksBackSheet OBJECTS s INPUT DO {
        IF NOT (GROUP SUM 1 IF inBackSheet(Stock st)) THEN
            inBackSheet(s) <- TRUE;
    }
}

CLASS SettingOperations 'Настройка операций';
TABLE settingOperations(SettingOperations);

name 'Наименование' = DATA ISTRING[100](SettingOperations);
inSession 'Отм.' = DATA BOOLEAN (SettingOperations,Operation.Operation);
inReturn 'Возврат' = DATA BOOLEAN (SettingOperations, Operation.Operation);


FORM settingOperations 'Настройка операций'
    OBJECTS s = SettingOperations
    PROPERTIES(s) READONLY name
    PROPERTIES(s) deletes=DELETE
    LIST SettingOperations OBJECT s
    
;

nameListOperation 'Наименование списка операций' = DATA LOCAL STRING[15] ();
saveListOperation 'Сохранение операции' (){
        NEW so = SettingOperations {
            name(so)<-nameListOperation() WHERE so IS SettingOperations;
            inSession(so, Operation.Operation o)<-inSession(o) WHERE so IS SettingOperations;
            inReturn(so, Operation.Operation o)<-inReturn(o) WHERE so IS SettingOperations;
            nameListOperation()<-NULL  WHERE so IS SettingOperations;
        }
    APPLY;
}

recoveryListOperation'Восстановление операции' (){
    DIALOG settingOperations OBJECTS s INPUT DO {
            inSession(Operation.Operation o)<-inSession(s, o) WHERE s IS SettingOperations;
            inReturn(Operation.Operation o)<-inReturn(s, o) WHERE s IS SettingOperations;
    }
}

FORM reportGroupOperation 'Отчет по операциям'
    OBJECTS df=DATE PANEL
    PROPERTIES dateFrom = VALUE(df)
   
    OBJECTS dt=DATE PANEL
    PROPERTIES dateTo = VALUE(dt)
    
    OBJECTS gt = GroupType PANEL
    PROPERTIES(gt) SELECTOR name
    
    PROPERTIES inBackSheetStocks() ON CHANGE changeStocksBackSheet(gt, df, dt)
    PROPERTIES nameListOperation(), saveListOperation(), recoveryListOperation()
    
    TREE skuTree sk = Group PARENT parent(sk)
    PROPERTIES inSession(sk) BACKGROUND backgroundInSession(sk)
    PROPERTIES READONLY order(sk), skuTreeName = name(sk)
    ORDERS order(sk), skuTreeName
    FILTERS groupType(sk) == gt
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F6' DEFAULT
    
    OBJECTS o = Operation.Operation
    PROPERTIES(o) inSession , name READONLY, inReturn, nameReturn READONLY
    
    PROPERTIES() gDocument, gStock, gOperation, gSku, gGroup3, gGroup2, gGroup, gDate, gLegalEntity
    
    OBJECTS gr = INTEGER 
    PROPERTIES(gr) READONLY order, nameGroup
    ORDERS order(gr)
    FILTERS nameGroup(gr)
    
    PROPERTIES(df,dt,gt) printGroupOperation, xlsxGroupOperation
    
    EVENTS ON INIT {
        SEEK reportGroupOperation.gt = defaultGroupType() IF defaultGroupType();
    }
;

onInitReportGroupOperation()  { 
    IF countAccessCompanyStock(currentUser()) ==1 THEN {
        inBackSheet(Stock st)  <- TRUE WHERE  defaultCompanyStock(currentUser())== st; 
    }    
}

EXTEND FORM reportGroupOperation 
    EVENTS 
        ON INIT onInitReportGroupOperation()
;

DESIGN reportGroupOperation {
    NEW topContainer {
        horizontal = TRUE;
        NEW dates {
            horizontal = TRUE;
            caption = 'Период';
            MOVE PROPERTY(dateFrom){caption = 'Дата (с)';}
            MOVE PROPERTY(dateTo){caption = 'Дата (по)';}
        }
        MOVE BOX(gt);
        NEW stocks {
            caption = 'Склады';
            horizontal = TRUE;
            MOVE PROPERTY(inBackSheetStocks());        
        }
    }
    NEW bottomContainer {
            fill = 1;
            horizontal = TRUE;
    
            NEW lContainer {
                type = CONTAINERV;
                fill = 1;
                MOVE BOX(TREE skuTree){
                    fill = 1;
                };
                MOVE BOX(o){
                    fill = 1;
                };
            }
            NEW rContainer {
                type = CONTAINERV;
                fill = 1;
                NEW groupContainer {
                    fill = 1;
                    horizontal = TRUE;
                    caption = 'Группировка';
                    NEW checkBoxContainer{
                        type = CONTAINERV;
                        MOVE PROPERTY(gDocument());
                        MOVE PROPERTY(gStock());
                        MOVE PROPERTY(gOperation());
                        MOVE PROPERTY(gSku());
                        MOVE PROPERTY(gGroup2());
                        MOVE PROPERTY(gGroup3());
                        MOVE PROPERTY(gGroup());
                        MOVE PROPERTY(gDate());
                        MOVE PROPERTY(gLegalEntity());
                    }
                    MOVE BOX(gr) { caption = 'Порядок группировки'; };
                }
                NEW printSkuContainer {
                    horizontal = TRUE;
                    caption = 'Печать';
                    MOVE PROPERTY(printGroupOperation(df,dt,gt));
                    MOVE PROPERTY(xlsxGroupOperation(df,dt,gt));
                }
            }
            
        }      
    MOVE TOOLBARBOX;
    TOOLBAR (o){
        MOVE PROPERTY (nameListOperation());
        MOVE PROPERTY (saveListOperation());
        MOVE PROPERTY (recoveryListOperation());
    }
}

NAVIGATOR {
    stockReports{
        NEW reportGroupOperation;
    }
}
