MODULE RevaluationDashboard;

REQUIRE Revaluation, Dashboard, PriceListDashboard, RevaluationPurchaseInvoice, PurchaseDeclarationDetail, PurchaseInvoice, 
        PurchaseInvoiceCharge, PurchaseManufacturingPrice;

NAMESPACE Revaluation;

dutyPriceInvoiceDetail 'Пошлина (ед.)' (Batch batch)= dutyPrice(invoiceDetail(batch));
registrationPriceInvoiceDetail 'Таможенный сбор (ед.)' (Batch batch)= registrationPrice(invoiceDetail(batch));
manufacturingMarkupInvoiceDetail 'Надбавка, % (к цене изготовителя)' (Batch batch)= manufacturingMarkup(invoiceDetail(batch));

rate 'Курс' (Operation operation,Currency currency, DATETIME dateTime)= rateOn(typeExchange(operation),currency,toDate(dateTime AS DATETIME));
rateExchangeA 'Курс обмена' (Batch batch, Stock stock, DATETIME dateTime) = prevPriceA(SystemLedgerPriceListType.rateExchangeStockPriceListType, batch, stock, dateTime);
    
diffPercent '% изменения курса' (Batch batch, Stock stock, Operation operation,Currency currency, DATETIME dateTime)= Utils.round((rate(operation,currency, dateTime) / rateExchangeA(batch,stock,dateTime))*100 - 100.0, 2);

filterPercent (NUMERIC[8,2] nu,Batch bt,Stock st,Operation o,Currency c,DATETIME t) = (diffPercent(bt,st,o,c,t) > (nu AS NUMERIC[8,2]) AND nu >0.0) OR (diffPercent(bt,st,o,c,t) < (nu AS NUMERIC[8,2]) AND nu <0.0);

inRevaluation 'Вкл.' (batch, stock) = DATA LOCAL BOOLEAN (Batch, Stock);

@defineOperationProperty(dontChangePrice, 'Не изменять учетную цену', showContainer);

createManagementRevaluation 'Создать переоценку'(NUMERIC[8,2] numeric, Operation operation, Currency currency, Stock stock, DATETIME time)  { 
    NEW r = UserRevaluation {
        stock(r) <-  stock;
        date(r) <-  toDate(time);
        time(r) <- toTime(time);    
        operation(r) <- operation;          
        
        FOR balanceB(Batch batch,stock,time) AND 
            filterPercent (numeric,batch,stock,operation,currency,time) AND
            inRevaluation(batch, stock) AND 
            currencyInvoiceDetail(batch)==currency NEW rd = UserRevaluationDetail DO {
                userRevaluation(rd) <- r;
                sku(rd) <- sku(batch);
                batch(rd) <- batch;
                quantity(rd) <- balanceB(batch,stock,time);
                manufacturingMarkup(rd) <- manufacturingMarkupInvoiceDetail(batch);
                manufacturingPrice(rd) <- NUMERIC[16,4](calcManufacturingPrice(rd));
                price(rd) <-NUMERIC[16,4](Utils.round(calcBaseManufacturingPrice (rd) * (100.0 (+) manufacturingMarkup[RevaluationDetail](rd))/100,2)) WHERE NOT dontChangePrice(operation(revaluation(rd)));
        }
        SHOW userRevaluation  OBJECTS p = r DOCKED NOCANCEL;
    }
};

WHEN LOCAL FORMS userRevaluation CHANGED(calcBaseManufacturingPrice(RevaluationDetail rd)) DO {
    IF dontChangePrice(operation(revaluation(rd))) THEN
        price[UserRevaluationDetail](rd) <- curPrice[UserRevaluationDetail](rd);
    ELSE 
        price[UserRevaluationDetail](rd) <-NUMERIC[16,4](Utils.round(calcBaseManufacturingPrice (rd) * (100.0 (+) manufacturingMarkup(rd))/100,2));
}

FORM revaluationDashboard 'Переоценка за счет изменения курса'  

    OBJECTS st = Stock PANEL
    PROPERTIES (st) SELECTOR name             
    FILTERS isCompany(st)

    OBJECTS t=DATETIME PANEL
    PROPERTIES(t) VALUE

    OBJECTS c=Currency PANEL
    PROPERTIES(c) SELECTOR name     
             
    OBJECTS o = Revaluation.Operation PANEL
    PROPERTIES (o) SELECTOR name
    FILTERS in(currentUser(), o)             
    PROPERTIES READONLY  nameTypeExchange(o), rate(o,c,t) 
    

    OBJECTS nu=NUMERIC[8,2] PANEL
    PROPERTIES(nu) VALUE  
      
    
    OBJECTS bt=Batch
    PROPERTIES(bt, st) inRevaluation
    PROPERTIES(bt) READONLY nameSku 
    PROPERTIES(bt,st,t) READONLY balanceB
    PROPERTIES(bt) READONLY number, series, dateTime, nameSupplier, name, id, shippedQuantity, 
                   rateExchangeInvoiceDetail 
    PROPERTIES(bt,st,t) rateExchangeA 

    PROPERTIES     diffPercent(bt,st,o,c,t) 
    FILTERS        balanceB(bt,st,t),
                   currencyInvoiceDetail(bt)==c
    FILTERGROUP filters1 FILTER 'Превышают %' filterPercent (nu,bt,st,o,c,t) 'F6' DEFAULT     

    OBJECTS p = Revaluation    

    PROPERTIES (p) READONLY isPosted, number, series, 
                   date, time, beforeDate, nameStock
    PROPERTIES (p) READONLY countRevaluationDetail, diffSumRevaluationDetail
    PROPERTIES (p) READONLY skipChangeLedger, note

    PROPERTIES (p) NEWSESSION NEW[UserRevaluation], EDIT SHOWIF isOpened(p), deletep = DELETE SHOWIF isUserOpened(p)  
    PROPERTIES (p) close[UserRevaluation] SHOWIF isOpened[UserRevaluation](p), open SHOWIF isClosed[UserRevaluation](p)
    PROPERTIES (p) print TOOLBAR
    PROPERTIES (nu,o,c,st,t) createManagementRevaluation TOOLBAR DRAW bt
    
    FILTERGROUP filters2 FILTER 'Переоценки на дату' date(p)==toDate(t) 'F6' DEFAULT         

;

DESIGN revaluationDashboard {
    BOX {
        horizontal = FALSE;

        NEW topContainer {
            horizontal = FALSE;
            NEW row1{
                horizontal = TRUE;
                MOVE BOX(st);
                MOVE BOX(t);
            }
            NEW row2{
                horizontal = TRUE;
                MOVE BOX(c);                    
                MOVE BOX(o);
                MOVE BOX(nu) {caption = '% отклонения курса';};
            }                        
        }
        MOVE BOX(bt) {caption = 'Партии, для которых необходима переоценка';}        
        MOVE BOX(p);
        MOVE TOOLBARBOX;
    }
}
@extendFormFilterStockAccess(st, revaluationDashboard, company);
@extendFormFilterAccessStock(Revaluation, p, revaluationDashboard, stock, company);



NAVIGATOR {
    dashboardNavigator {
        priceListDashboardNavigator {
            NEW revaluationDashboard;        
        }    
    }
}