MODULE RevaluationDisparity;

REQUIRE Disparity,
        Revaluation,
        DisparityOperation,
        PriceListLedger;

NAMESPACE Disparity;

//-- Расширяем операцию
createRevaluation 'Создать акт переоценки (опт.)' = DATA BOOLEAN (Operation);

EXTEND FORM operation
    PROPERTIES(o) createRevaluation
;

DESIGN operation {
    createContainer {
        MOVE PROPERTY(createRevaluation(o));
    }
}


//--

@defineDocumentInterfaceProperty(disparity, createRevaluation, 'Создать акт переоценки');

//------------------------------ Создание агрегированных объектов через операции -----------------------------//

createRevaluation (UserDisparity disparity) <- createRevaluation(operation(disparity))
    WHEN CHANGED(operation(disparity));

revaluationOperation  = DATA Revaluation.Operation (Operation);
nameRevaluationOperation 'Операция переоценки (опт.)' (Operation operation)= name(revaluationOperation(operation));


EXTEND FORM operation
    PROPERTIES(o) nameRevaluationOperation
;
DESIGN operation {
    createContainer {
        MOVE PROPERTY(nameRevaluationOperation(o)) AFTER PROPERTY(createRevaluation(o));
    }
}

// Операция переоценки
@defineDocumentInterfaceOperationPrefix(disparity, revaluation, Revaluation, ' (переоценка)');

revaluationOperation(UserDisparity o) <- revaluationOperation(operation(o))
    WHEN CHANGED(operation(o));


//-- агр.объект

// Комиссия
revaluationNumberDisposal '№ распоряжения на переоценку' (disparity) = ABSTRACT STRING[50] (Disparity) IN documentPrm;

revaluationCommittee (disparity) = ABSTRACT RepricingCommittee(Disparity);
nameRevaluationCommittee 'Комиссия для переоценки' (Disparity disparity) = name(revaluationCommittee(disparity)) IN documentPrm CHARWIDTH 20;

inRevaluationCommittee (Disparity disparity, Employee employee) = in(revaluationCommittee (disparity), employee);
nameEmployeeRevaluationCommittee 'Члены комиссии' (Disparity disparity) = namePositionEmployee(revaluationCommittee (disparity));
shortNameEmployeeRevaluationCommittee 'Члены комиссии' (Disparity disparity) = shortNameEmployee(revaluationCommittee (disparity));
nameChairmanRevaluationCommittee 'Председатель комиссии' (Disparity disparity) = nameChairman(revaluationCommittee(disparity));
shortNameChairmanRevaluationCommittee 'Председатель комиссии' (Disparity disparity) = shortNameChairman(revaluationCommittee(disparity));
namePositionChairmanRevaluationCommittee 'Должность' (Disparity disparity) = namePositionChairman(revaluationCommittee(disparity));

revaluationNumberDisposal '№ распоряжения на переоценку' (disparity) = DATA STRING[50] (UserDisparity) IN documentPrm;

revaluationCommittee (disparity) = DATA RepricingCommittee(UserDisparity);
nameRevaluationCommittee 'Комиссия для переоценки' (UserDisparity disparity) = name(revaluationCommittee(disparity)) IN documentPrm CHARWIDTH 20;
revaluationCommittee (UserDisparity disparity) <- repricingCommittee(stock(disparity))
    WHEN CHANGED(stock(disparity));

CONSTRAINT revaluationCommittee (UserDisparity disparity) AND NOT in(revaluationCommittee (disparity), stock(disparity))
    CHECKED BY revaluationCommittee[UserDisparity] MESSAGE 'Для документа выбрана комиссия, которая не действует для склада документа';

inRevaluationCommittee (UserDisparity disparity, Employee employee) = in(revaluationCommittee (disparity), employee);
nameEmployeeRevaluationCommittee 'Члены комиссии' (UserDisparity disparity) = namePositionEmployee(revaluationCommittee (disparity));
shortNameEmployeeRevaluationCommittee 'Члены комиссии' (UserDisparity disparity) = shortNameEmployee(revaluationCommittee (disparity));
nameChairmanRevaluationCommittee 'Председатель комиссии' (UserDisparity disparity) = nameChairman(revaluationCommittee(disparity));
shortNameChairmanRevaluationCommittee 'Председатель комиссии' (UserDisparity disparity) = shortNameChairman(revaluationCommittee(disparity));
namePositionChairmanRevaluationCommittee 'Должность' (UserDisparity disparity) = namePositionChairman(revaluationCommittee(disparity));

revaluationCommittee (UserDisparity disparity) += revaluationCommittee(disparity);
revaluationNumberDisposal (UserDisparity disparity) += revaluationNumberDisposal(disparity); 

diffInputSum 'Сумма  дооценки (учетная)' (DisparityDetail disparityDetail) =  inputSum(disparityDetail) (-) sum(disparityDetail);
diffInputSum 'Сумма  дооценки (учетная)' (UserDisparityDetail disparityDetail) =  inputSum(disparityDetail) (-) sum(disparityDetail);

@defineDocumentInterfaceHeaderSumPrefix(disparity, diffInput, ' дооценки (учетная)');  
backgroundRevaluation 'Цвет' (Disparity disparity) = RGB(250, 218, 221) IF disparity IS Disparity;
backgroundRevaluation (DisparityDetail detail) = backgroundRevaluation(disparity(detail));  
   
EXTEND FORM disparity
    PROPERTIES(dis) BACKGROUND backgroundRevaluation(dis) createRevaluation
    PROPERTIES(dis) BACKGROUND backgroundRevaluation(dis) SHOWIF createRevaluation(dis) 
                    nameRevaluationCommittee, revaluationNumberDisposal
    PROPERTIES(dis) BACKGROUND backgroundRevaluation(dis) SHOWIF createRevaluation(dis)
                    diffInputSumDisparityDetail
    PROPERTIES(dis) BACKGROUND backgroundRevaluation(dis) SHOWIF createRevaluation(dis) nameRevaluationOperation
;
DESIGN disparity {
    headerCreateDocuments {
        NEW headerCreateRevaluation {
            caption = 'Переоценка (склад)';
            type = COLUMNS;
            lines = 2;            
            MOVE PROPERTY(createRevaluation(dis));
            MOVE PROPERTY(nameRevaluationOperation(dis));
            MOVE PROPERTY(nameRevaluationCommittee(dis));
            MOVE PROPERTY(revaluationNumberDisposal(dis));
        }
    }
}

EXTEND FORM disparities
    PROPERTIES(dis) BACKGROUND backgroundRevaluation(dis) createRevaluation READONLYIF isReadonly(),
                  diffInputSumDisparityDetail READONLY BEFORE note(dis)

;
needToRevaluation (DisparityDetail detail) = price(detail) != inputPrice(detail)
                                               AND inputQuantity(detail) 
                                               AND createRevaluation(detail)
                                               AND isStock(inputSku(detail)) MATERIALIZED;

needToRevaluation (disparity)= GROUP SUM 1 IF needToRevaluation(DisparityDetail detail)
    BY disparity(detail) MATERIALIZED;

CLASS DisparityRevaluation 'Переоценка (сортность)' : Revaluation;
CLASS DisparityRevaluationDetail 'Строка переоценки (сортность)' : RevaluationDetail;

@defineDocumentTables(disparityRevaluation);

@defineDocumentAggregation(disparity, disparityRevaluation, needToRevaluation);
revaluation(DisparityRevaluationDetail detail) += disparityRevaluation(detail);

index(DisparityRevaluationDetail detail) += index(detail);

date(DisparityRevaluation revaluation) += date(revaluation);
time(DisparityRevaluation revaluation) += time(revaluation);

repricingCommittee(DisparityRevaluation revaluation) += revaluationCommittee(disparity(revaluation));
numberDisposal(DisparityRevaluation revaluation) += revaluationNumberDisposal(disparity(revaluation));

stock(DisparityRevaluation revaluation) += stock(disparity(revaluation));

@defineDocumentAggregationPosted(disparity, disparityRevaluation);
isPosted(DisparityRevaluation revaluation) += isPosted(revaluation);

@defineDocumentAggregationClosed(disparity, disparityRevaluation);
isClosed(DisparityRevaluation revaluation) += isClosed(revaluation);

number 'Номер документа' (DisparityRevaluation disparityRevaluation) = number(disparity(disparityRevaluation));
number(DisparityRevaluation revaluation) += number(revaluation);

series 'Серия документа' (DisparityRevaluation disparityRevaluation) = series(disparity(disparityRevaluation));
series(DisparityRevaluation revaluation) += series(revaluation);

seriesNumber 'Серия/номер документа' (DisparityRevaluation disparityRevaluation) = seriesNumber(disparity(disparityRevaluation));

noteDisparity 'Примечание' (DisparityRevaluation disparityRevaluation) = note(disparity(disparityRevaluation));
note(DisparityRevaluation revaluation) += noteDisparity(revaluation);

currency  (DisparityRevaluation disparityRevaluation) = currency(disparity(disparityRevaluation));
currency (DisparityRevaluation revaluation) += currency(revaluation);

//    skipChangeLedgerRevaluation (revaluation) += revaluation IS DisparityRevaluation;
operation(DisparityRevaluation revaluation) += revaluationOperation(disparity(revaluation));

@defineDocumentDescription(disparityRevaluation, DisparityRevaluationDetail, 'Переоценка (сортность)');
description (DisparityRevaluation revaluation) += description(revaluation);

@defineDocumentAggregationDetailSku(disparity, disparityRevaluation, inputSku);
sku(DisparityRevaluationDetail revaluationDetail) +=  inputSku(revaluationDetail);

quantity(DisparityRevaluationDetail revaluationDetail) += inputQuantity(disparityDetail(revaluationDetail));
batch(DisparityRevaluationDetail revaluationDetail) += inputDisparityDetail(disparityDetail(revaluationDetail));

curPrice(DisparityRevaluationDetail revaluationDetail) += price(disparityDetail(revaluationDetail));
curSum(DisparityRevaluationDetail revaluationDetail) += sum(disparityDetail(revaluationDetail));

price(DisparityRevaluationDetail revaluationDetail) += inputPrice(disparityDetail(revaluationDetail));
sum(DisparityRevaluationDetail revaluationDetail) += inputSum(disparityDetail(revaluationDetail));

edit(DisparityRevaluation revaluation) + {  edit(disparity(revaluation)); }
close(DisparityRevaluation revaluation) + {  close(disparity(revaluation)); }
edit(DisparityRevaluationDetail d) + {  edit(disparityDetail(d)); }
show(DisparityRevaluationDetail d) + {  show(disparityDetail(d)); }
skip[SkuLedger](DisparityRevaluationDetail d) += TRUE IF disparityDetail(d);
        