MODULE Revaluation;

REQUIRE RepricingCommittee, StockDocumentSkuLedger, PriceListCalc, PriceListLedgerAccount, RevaluationOperation, StockSkuDocument;

NAMESPACE Revaluation;

//----------------------------------------------- Переоценка (опт) ---------------------------------------------------//

CLASS ABSTRACT Revaluation 'Переоценка';
CLASS ABSTRACT RevaluationDetail 'Строка переоценки': InLIFOSkuLedger;

CLASS UserRevaluation 'Переоценка (польз.)' : Revaluation;
CLASS UserRevaluationDetail 'Строка переоценки (польз.)' : RevaluationDetail;

@defineDocumentInterface(revaluation);
@deriveDocumentHeaderTimePrefix(UserRevaluation, );

@defineDocumentInterfaceTimePrefix(revaluation, before, ' документа (до)');
@deriveDocumentHeaderTimePrefix(UserRevaluation, before);

@defineDocumentInterfaceNumber(revaluation, BPSTRING[2]);
@defineNumeratedDefault(UserRevaluation, 'Переоценки', 'ПО');

@defineDocumentInterfaceDataStock(revaluation, stock, 'Склад');
@defineDocumentDialogStocks(userRevaluation, stock, company, , );

CONSTRAINT stock(UserRevaluation r) AND NOT  isCompany(stock(r))
    CHECKED BY stock[UserRevaluation]
    MESSAGE 'Выбран склад, который не принадлежит компании';
    
@defineDocumentInterfacePosted(revaluation);
@defineDocumentInterfaceClosed(revaluation);

@defineDocumentInterfaceDescription(revaluation, 'Переоценка');

@defineDocumentInterfaceCurrency(revaluation);
@deriveDocumentCurrency(userRevaluation, stock);

// Комиссия
@defineDocumentInterfaceHeaderRepricingCommittee (revaluation, stock);

// Sku
@defineDocumentInterfaceDetailSku(revaluation, sku);

// Кол-во
@defineDocumentInterfaceDetailQuantity(revaluation);

// Партия
@showDocumentInterfaceDetailBatch(revaluation);
@defineDocumentInterfaceDetailBatch(revaluation, batch);

idBatch 'Код партии' (RevaluationDetail d) = id(batch(d)) CHARWIDTH 10;
idBatch 'Код партии' (UserRevaluationDetail d) = id(batch(d)) CHARWIDTH 10;

changeBatch(UserRevaluationDetail userRevaluationDetail)  { 
    DIALOG dialogBatchStockOut OBJECTS st = stock(userRevaluationDetail),
                             t = dateTime(userRevaluationDetail),
                             sk = sku(userRevaluationDetail),
                             bt = batch(userRevaluationDetail) INPUT NULL NEWSESSION DO
        batch(userRevaluationDetail) <- bt;
}

replace(Sku s, Batch b) + {  sku(UserRevaluationDetail detail) <- s WHERE batch(detail) == b;}

// -- До

// Цена учетная
@defineDocumentInterfaceDetailPricePrefix(revaluation, cur, ' учетная до');

// Автоматическое заполнение цен до
@deriveDocumentDetailPriceAccountBatch (userRevaluation, cur, sku, stock);

// -- После

// Цена учетная
@defineDocumentInterfaceDetailPricePrefix(revaluation, , ' учетная после');

// ---- Суммы по строкам ---- //

// -- До
@defineDocumentInterfaceDetailDataSumPrefix (revaluation, cur, ' учетная до');

// -- После
@defineDocumentInterfaceDetailDataSumPrefix (revaluation, , ' учетная после');

// -- Разница
@defineDocumentInterfaceDetailDiffSumPrefix (revaluation, sum, , cur, ' изменения учетной ');

// -- До
@deriveDocumentDetailSumPrefix(userRevaluation, cur, currency, quantity);

// -- После
@deriveDocumentDetailSumPrefix(userRevaluation, , currency, quantity);

// ---- Суммы по документу ---- //

@defineDocumentInterfaceHeaderQuantity(revaluation);
@defineDocumentHeaderSkuQuantity(revaluation, sku);
@defineDocumentHeaderSkuQuantity(userRevaluation, sku);

// -- До
@defineDocumentInterfaceHeaderSumPrefix (revaluation, cur, ' учетная  до');

// -- После
@defineDocumentInterfaceHeaderSumPrefix (revaluation, , ' учетная после');

// -- Разница
@defineDocumentInterfaceHeaderSumPrefix (revaluation, diff, ' изменения учетной');

// Изменение сумм по товару и таре
@defineDocumentInterfaceHeaderItemSum(revaluation, diff, diff);

// Действия по добавлению строк
@defineAddDetailDialogSkuStock(userRevaluation, sku, stock, dialogSku);
@defineAddDetailDialogBarcode(userRevaluation, sku);

// Не изменять текущие цены
@defineDocumentInterfaceHeaderSkip(Revaluation, changeLedger, 'Не изменять текущие цены');
//@defineDocumentInterfaceDetailSkip(revaluation, changeLedger, 'Не изменять текущие цены');

    notSkipChangeLedger = ABSTRACT BOOLEAN (RevaluationDetail);
    notSkipChangeLedger = DATA BOOLEAN (UserRevaluationDetail);
    notSkipChangeLedger (UserRevaluationDetail d) += notSkipChangeLedger(d);

    skipChangeLedger 'Не изменять текущие цены' (RevaluationDetail d) = skipChangeLedger(revaluation(d)) AND NOT notSkipChangeLedger(d);
    skipChangeLedger 'Не изменять текущие цены' (UserRevaluationDetail d) = skipChangeLedger(userRevaluation(d)) AND NOT notSkipChangeLedger(d);
//------------------------------------ Печатные формы акт расценки ------------------------------------------------ //

FORM revaluation 'Переоценка (печать)'

    OBJECTS p = Revaluation PANEL SUBREPORT
    PROPERTIES (p) SELECTOR isPosted

    PROPERTIES (p) number, series, date, time, beforeDate, fullNameStock,
                   diffSumRevaluationDetail, curSumRevaluationDetail, sumRevaluationDetail,
                   quantityRevaluationDetail, countRevaluationDetail,
                   nameRepricingCommittee, skipChangeLedger,
                   note, numberDisposal, repricingCommittee, nameEmployeeCommittee,
                   nameChairman, namePositionChairman

    OBJECTS d = RevaluationDetail
    PROPERTIES (d) index, idBarcodeSku, nameSku,
                   shortNameUOMSku, nameBatch, quantity,
                   curPrice, curSum,
                   price, sum, diffSum

    OBJECTS e=Employee
    PROPERTIES(e) READONLY   name[Contact], namePosition
    FILTERGROUP active FILTER 'Активные' active(e) 'F5'  DEFAULT 
    FILTERS    revaluation(d) == p,
               inCommittee(p, e)

;

print 'Переоценка' (Revaluation revaluation)  { PRINT revaluation OBJECTS p = revaluation; }   IMAGE 'print.png' IN print;

// --------------------------- Формы --------------------------------- //
FORM userRevaluation 'Переоценка'
    OBJECTS p=UserRevaluation PANEL
    PROPERTIES (p) isPosted, nameNumerator, number, series,
                   date, time, beforeDate, nameStock ON CHANGE changeStockCompany(p),
                   diffSumUserRevaluationDetail, note, numberDisposal ON CHANGE changeNumberDisposal(p),
                   nameRepricingCommittee, skipChangeLedger

    OBJECTS d=UserRevaluationDetail
    PROPERTIES (d) index, idBarcodeSku, nameSku,
                   shortNameUOMSku, nameBatch ON CHANGE changeBatch(d), quantity,
                   curPrice, curSum,
                   price, sum, NEW, deleted=DELETE GRID

    PROPERTIES(d) READONLYIF batch(d) SHOWIF showIDs()
                  idBatch ON CHANGE changeBatch(d) BEFORE nameBatch(d)
                  
    PROPERTIES(p) DRAW d addDetailDialogSkuStockUserRevaluationDetail,
                           addDetailInputBarcodeUserRevaluationDetail, deleteUserRevaluationDetail

    FILTERS userRevaluation(d)==p

    EVENTS
        ON OK prePost(p)

    EDIT UserRevaluation OBJECT p
;

DESIGN userRevaluation {
    BOX {
        size = (1024, 768);
        NEW mainTabbed {
            fill = 1;
            type = TABBED;
            NEW documentBox {
                fill = 1;
                type = CONTAINERV;
                caption = 'Переоценка';
                
                NEW header {
                    type = CONTAINERH;
                        
                    NEW headerColumn1 {
                        fill = 1;
                        MOVE GROUP(documentHeader,p) {
                            columns = 1;
                            type = CONTAINERV;
                            NEW first {
                                type = CONTAINERH;
                                MOVE PROPERTY(isPosted(p));
                            }
                            NEW second { 
                                type = CONTAINERH;
                                MOVE PROPERTY(nameNumerator(p));
                                MOVE PROPERTY(number(p));
                                MOVE PROPERTY(series(p));
                                MOVE PROPERTY(date(p));
                                MOVE PROPERTY(time(p));
                            }
                            NEW third {
                                type = CONTAINERH;  
                                MOVE PROPERTY(nameStock(p));       
                                MOVE PROPERTY(beforeDate(p));                                                                                       
                            }                               
                        }
            
                        NEW headerCol1 {
                            type = CONTAINERV;
                            MOVE GROUP(documentPrm,p) {
                                columns = 2;
                            }
                        }
                    }
                    NEW sumContainer {
                        type  = CONTAINERV;
                        MOVE PROPERTY(diffSumUserRevaluationDetail(p)) { charWidth = 13;}                        
                    }
                }   
                NEW specificationBox {
                    fill = 1;
                    MOVE BOX(d) {
                        caption = 'Спецификация';
                    }
                }                 
            }
        }
        MOVE TOOLBARBOX;

        PROPERTY(formOk()) {
            caption = 'Провести';
        }        
    }
}

edit(UserRevaluationDetail d) + {  DIALOG userRevaluation OBJECTS p = userRevaluation(d), d = d DOCKED; }

show 'Просмотреть'  ABSTRACT LIST  ( RevaluationDetail) TOOLBAR;
show(UserRevaluationDetail d)  { 
	NEWSESSION {
	    SHOW userRevaluation OBJECTS p = userRevaluation(d), d = d DOCKED READONLY;
	}
}

show(UserRevaluationDetail d) + {  show(d); }    
show[SkuLedger](RevaluationDetail ledger) + {  show(ledger); }

@defineDocumentSkuPriceListTypeSystemLedger(userRevaluation, stock, );
@extendFormDocumentSku(userRevaluation, userRevaluationDetail, userRevaluation, p, sku, stock);

@defineDocumentBatchPriceListTypeSystemLedger(userRevaluation, stock, );
@extendFormDocumentBatch(userRevaluation, userRevaluation, p);

EXTEND FORM userRevaluation

    FILTERGROUP filter
        FILTER 'С остатком ' currentBalance(ks, p) 'F10' DEFAULT
        FILTER 'В документе ' quantityUserRevaluationDetail(ks, p) 'F9'
;

EXTEND FORM userRevaluation

    FILTERGROUP filter1
        FILTER 'С остатком ' prevCurrentBalance(b, p) 'F10' DEFAULT
        FILTER 'В документе ' quantityUserRevaluationDetail(b, p) 'F9'
;

skipShowEdit = ABSTRACT BOOLEAN (Revaluation);
skipShowDelete = ABSTRACT BOOLEAN (Revaluation);
overShowEditDelete = ABSTRACT VALUE BOOLEAN (Revaluation);

@defineOperationChangesDocument(revaluation, Revaluation, preventChangesDocument, createdUser);

overShowEditDelete(Revaluation p) += showEditDeleteUser(p);

showEditUser (Revaluation i) =  isOpened(i) AND overShowEditDelete(i)  AND NOT skipShowEdit(i); 

isUserOpened(UserRevaluation r)=  isOpened[Revaluation](r) AND is(r);

showDeleteUser (Revaluation i) =  isUserOpened(i) AND overShowEditDelete(i) AND NOT skipShowDelete(i);


FORM revaluations 'Переоценки' 
    OBJECTS p = Revaluation    

    PROPERTIES (p) READONLYIF isReadonly() isClosed, isPosted, number, series, 
                   date, time, beforeDate, nameStock
    PROPERTIES (p) READONLY countRevaluationDetail, diffSumRevaluationDetail
    PROPERTIES (p) READONLYIF isReadonly() numberDisposal, skipChangeLedger, note

    PROPERTIES (p) READONLY PANEL createdNameUser, createdTime, createdHostnameComputer, 
                                        postedNameUser, postedTime, postedHostnameComputer

    PROPERTIES (p) NEWSESSION NEW[UserRevaluation], EDIT SHOWIF showEditUser(p), deletep = DELETE SHOWIF showDeleteUser(p)
    PROPERTIES (p) close[UserRevaluation] SHOWIF isOpened[UserRevaluation](p), open SHOWIF isClosed[UserRevaluation](p)
    PROPERTIES (p) print 


    OBJECTS d = RevaluationDetail
    PROPERTIES (d) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku, nameBatch,
                   quantity, curPrice, curSum, price, sum

    PROPERTIES(d) READONLY SHOWIF showIDs()
                  idBatch BEFORE nameBatch(d)
                      
    FILTERS revaluation(d) == p
;
@extendFormFilterAccessStock(Revaluation, p, revaluations, stock, company);

DESIGN revaluations {
    NEW documentContainer {
        fill = 1;
        type = SPLITV;

        MOVE BOX(p) {
            fill = 2;
        }

        NEW documentDetail {
            fill = 1;
            type = TABBED;

            MOVE BOX(d) {
                caption = 'Спецификация';
            }
            NEW documentHistory {
                caption = 'История';

                MOVE GROUP(created,p);
                MOVE GROUP(posted,p);
            }
            NEW printTab {
                caption = 'Печатные формы';
                MOVE GROUP(print,p);
            }
            NEW actionContainer {
                caption = 'Действия';
                type = CONTAINERH;
                NEW createdContainer {
                    caption = 'Создание на основе';
                }
                NEW machineryContainer {
                    caption = 'Загрузка';
                }
            }
        }
    }

    MOVE TOOLBARBOX;
}
@extendFormEditable(revaluations);
@defineFilterIsOpened (revaluation, revaluations, p);
//----------------------------------------------- Операции -----------------------------------------------------//

@defineDocumentInterfaceOperation (revaluation, Revaluation, );
@extendFormFilterRoleAccess(revaluation, p, revaluations);

@defineDocumentOperationRolePrefix(userRevaluation, );

EXTEND FORM userRevaluation
    PROPERTIES(p) nameOperation
;
DESIGN userRevaluation{
    first{
        MOVE PROPERTY (nameOperation(p));
    }
}
EXTEND FORM revaluations
    PROPERTIES(p) READONLY nameOperation AFTER nameStock(p)
;

NAVIGATOR {
    revaluationNavigator {
        NEW revaluations BEFORE repricingCommitteeDialog;
        NEW Revaluation.operations AFTER repricingCommitteeDialog;
    }
}

// Проведение по товарному отчету
@implementStockDocumentLedgerOut(Revaluation, stock);
type(Revaluation l) += STRING[50]('Переоценка (склад)') IF l IS Revaluation;
sumItem (Revaluation ledger) += -diffSumRevaluationDetail(ledger);
sumContainer (Revaluation ledger) += 0.0 IF ledger IS Revaluation;

operation[StockDocumentLedger](Revaluation ledger) += operation(ledger);
close[StockDocumentLedger](Revaluation l) + {  close(l); }
// Проведение по регистру
@implementSkuLedger(revaluationDetail, sku, stock);
sum[InSkuLedger] (RevaluationDetail ledger) += diffSum(ledger);

stockDocumentLedger(RevaluationDetail ledger) += revaluation(ledger); 

batch[SkuLedger](RevaluationDetail ledger) += batch(ledger);

// ---------------------------- Создание PriceList ----------------------------------- //

EXTEND CLASS RevaluationDetail : PriceListLedger;

fromDateTime (RevaluationDetail ledger) += dateTime(ledger);

isPosted[PriceListLedger](RevaluationDetail ledger) += isPosted(ledger);
skip[PriceListLedger](RevaluationDetail ledger) += skipChangeLedger(ledger);

sku[PriceListLedger] (RevaluationDetail ledger) += sku(ledger);

operation (RevaluationDetail ledger) += operation(ledger);

description[PriceListLedger] (RevaluationDetail ledger) += description(ledger);

in (RevaluationDetail ledger, SystemLedgerPriceListType type) += WHEN price(ledger) AND type == SystemLedgerPriceListType.accountPriceListType THEN TRUE;
price (RevaluationDetail ledger, SystemLedgerPriceListType type) += WHEN price(ledger) AND type == SystemLedgerPriceListType.accountPriceListType THEN price(ledger);

in (RevaluationDetail ledger, Stock stock) += stock(ledger) == stock;
in (RevaluationDetail ledger, Batch batch) += batch(ledger) == batch; 
show[PriceListLedger] (RevaluationDetail ledger) + { show(ledger);};

// ---------------------- Создание переоценки до учетной цены ----------------------- //

addAdjustmentAccountSumDetail 'Привести учетные суммы к ценам партий'(Revaluation revaluation)  { 
    LOCAL sum = NUMERIC[18,4] (Batch);
    sum(Batch b) <- accountSumB(b, stock(revaluation), dateTime(revaluation));
    
    LOCAL sumBatch = NUMERIC[18,4] (Sku);
    sumBatch(Sku s) <- [ GROUP SUM sum(Batch b) BY sku(b)](s);
    
    LOCAL sum = NUMERIC[18,4] (Sku);
    sum(Sku s) <- sumB(s, stock(revaluation), dateTime(revaluation));
    
    LOCAL diffSum = NUMERIC[18,4] (Sku);
    diffSum(Sku s) <- sum(s) (-) sumBatch(s);
    
    FOR diffSum(Sku s) IF diffSum(s) != 0.0 NEW d = UserRevaluationDetail DO {
        userRevaluation(d) <- revaluation;
        sku(d) <- s;
        quantity(d) <- balanceB(s, stock(revaluation), dateTime(revaluation));
        curSum(d) <- sum(s);
        sum(d) <- sumBatch(s);
    }  
} TOOLBAR;

EXTEND FORM userRevaluation
    PROPERTIES(p) addAdjustmentAccountSumDetail DRAW d
;