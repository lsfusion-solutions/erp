MODULE StockArticleDocument;

REQUIRE StockSkuDocument, StockArticle;

NAMESPACE Stock;

nameBalance (Item.Size size) = CONCAT ' ', name(size), ' (остаток/цена)';
nameQuantity (Item.Size size) = CONCAT ' ', name(size), ' (кол-во)';

nameBalanceB (Stock stock)= name(stock) + ' (остаток на начало)' CHARWIDTH 15;    
nameBalanceA (Stock stock)= name(stock) + ' (остаток на конец)' CHARWIDTH 15;  

//----------- Изменение кол-ва для строки при изменении кол-ва для Артикула (несколько складов)---------------//

META defineDocumentArticleStockCustom(object, detail, skuProp, stockProp)
    detail###stockProp (article, color, size, ###object object, Stock stock) =  GROUP MAX detail###stockProp (Item sku, object, stock)
        BY article(skuProp), calcColor(skuProp), calcSize(skuProp);

    quantity###stockProp 'Кол-во товара в документе' (article, color, size, ###object object, Stock stock) = GROUP SUM quantity###stockProp(Item sku, object, stock)
        BY article(skuProp), calcColor(skuProp), calcSize(skuProp);

    quantity###stockProp 'Кол-во товара в документе' (article, ###object object, Stock stock) = GROUP SUM quantity###stockProp(Item sku, object, stock)
        BY article(skuProp);        

    calcQuantity###stockProp 'Кол-во товара в документе' (skuGroup, ###object object, Stock stock) = GROUP SUM quantity###stockProp(###skuProp sku, object, stock)
        BY skuProp##Group(skuProp); 
        
    recQuantity###stockProp 'Кол-во товара в документе рек.' (###skuProp##Group parent, ###object object, Stock stock) = GROUP SUM calcQuantity###stockProp(###skuProp##Group group, object, stock) 
        IF isParent(group, parent);
                                                 

    priceBalance  (Article article, Color color, Item.Size size, Stock stock, ###object object) = CONCAT ', ', prevCurrentBalance(article, color, size, stock), price(max###skuProp (article,color,size), stock, object);


    backgroundQuantity 'Цвет' (Article article, Color color, Item.Size size, ###object object, Stock stock) = RGB(255,128,128) IF quantity###stockProp(article, color, size, object, stock) AND NOT
        (quantity###stockProp(article, color, size, object, stock) <= prevCurrentBalance(article, color, size, stock));

    changeQuantityValue(Article article, Color color, Item.Size size, ###object object, Stock stock, NUMERIC[16,5] n)  { 

        IF detail###stockProp(article, color, size, object, stock) THEN {
            IF n THEN {
                quantity(###detail d) <- n WHERE d == detail###stockProp(article, color, size, object, stock);
            } ELSE {
                FOR detail###stockProp(article, color, size, object, stock) == ###detail d DO
                    DELETE d;
            }

        } ELSE {
            IF n THEN {
                NEW d = ###detail {
                   object(d) <- object;
                   skuProp(d) <- max###skuProp(article, color, size);
                   quantity (d) <- n;
                }
            }
        }
    }
    changeQuantity(Article article, Color color, Item.Size size, ###object object, Stock stock)  { 
        INPUT n = NUMERIC[16,5] DO
            changeQuantityValue(article, color, size, object, stock, n);
    }

END
META defineDocumentArticleStock(object, skuProp, stockProp)
    @defineDocumentArticleStockCustom(object, object##Detail, skuProp, stockProp);
END

META extendFormDocumentArticleStockCustom(object, form, concrete, legalEntityProp, stockProp)

    EXTEND FORM form

        OBJECTS sta=(stk=Stock, ar=Article)
        PROPERTIES READONLY id(ar) SHOWIF showIDs(), caption(ar), name(stk) SHOWIF not###stockProp(concrete)
        FILTERS           isParent(sk, ar),
                          (stk == ts AND sg IS StockGroup OR isParent(sg, stk) AND NOT ts OR stk IS Stock AND NOT sg AND NOT ts) AND NOT stockProp(concrete) OR
                          stk == stockProp(concrete) AND NOT sg AND NOT ts
        FILTERS           legalEntity(stk) == legalEntityProp(concrete),
                          active(stk)
        ORDERS          id(ar), name(stk)

        OBJECTS si=Item.Size
        PROPERTIES(si) name
        FILTERS count(si,ar)

        OBJECTS co=Color
        PROPERTIES(co) READONLY id SHOWIF showIDs(), name
        FILTERS count(co,ar)

        PROPERTIES(ar,co,si,concrete,stk) quantity###legalEntityProp ON CHANGE changeQuantity(ar,co,si,concrete,stk)
                                          COLUMNS (si) HEADER name(si) BACKGROUND backgroundQuantity(ar,co,si,concrete,stk)
        PROPERTIES(ar,co,si,stk,concrete) READONLY priceBalance COLUMNS (si) HEADER nameBalance(si)

//        PROPERTIES(ar,co,si,stk,concrete) priceBalanceArticleColorSizeStock###object ON CHANGE changeQuantityArticleColorSize###object###Stock(ar,co,si,concrete,stk) COLUMNS (si) HEADER nameBalanceSize(si)
// Саше для выявления бага
        FILTERS name(co), name(si)
        ORDERS name(co), name(si)
    ;

    DESIGN form {
        skuSelectPane {
            tabbed = TRUE;
            NEW articleContainer {
                caption = 'Артикулы';
                type = CONTAINERV;
                MOVE BOX(sta) {caption = 'Артикул';};
                MOVE BOX(co);
                REMOVE BOX(si);
            }
        }
        PROPERTY(priceBalance(ar,co,si,stk,concrete)) { background = #FFEEEE; }
    }

END

//----------- Изменение кол-ва для строки при изменении кол-ва для Артикула (один склад)---------------//

META defineDocumentArticleCustom(object, detail, skuProp, stockProp)
    detail (article, color, size, ###object object) =  GROUP MAX detail (Item sku, object)
        BY article(skuProp), calcColor(skuProp), calcSize(skuProp);

    quantity 'Кол-во товара в документе' (article, color, size, ###object object) = GROUP SUM quantity###detail(Item sku, object)
        BY article(skuProp), calcColor(skuProp), calcSize(skuProp);

    quantity 'Кол-во товара в документе' (article, ###object object) = GROUP SUM quantity###detail(Item sku, object)
        BY article(skuProp);
         
    calcQuantity 'Кол-во товара в документе' (skuGroup, ###object object) = GROUP SUM quantity###detail(###skuProp sku, object)
        BY skuProp##Group(skuProp);    
              
    recQuantity 'Кол-во товара в документе рек.' (skuGroup, ###object object) = GROUP SUM calcQuantity(###skuProp##Group group, object) 
        IF isParent(group, ###skuProp##Group parent) BY (parent);              

    priceBalance  (Article article, Color color, Item.Size size, ###object object) = CONCAT ', ', prevCurrentBalance(article, color, size, stockProp(object)),price(max###skuProp (article,color,size), object);


    backgroundQuantity 'Цвет' (Article article, Color color, Item.Size size, ###object object) = RGB(255,128,128) IF quantity(article, color, size, object) AND NOT
        (quantity(article, color, size, object) <= prevCurrentBalance(article, color, size, stockProp(object)));

    changeQuantityValue(Article article, Color color, Item.Size size, ###object object, NUMERIC[16,5] n)  { 

        IF detail(article, color, size, object) THEN {
            IF n THEN {
                quantity(###detail d) <- n WHERE d == detail(article, color, size, object);
            } ELSE {
                FOR detail(article, color, size, object) == ###detail d DO
                    DELETE d;
            }

        } ELSE {
            IF max###skuProp(article, color, size) THEN {               
                IF n THEN {
                    NEW d = ###detail {
                       object(d) <- object;
                       skuProp(d) <- max###skuProp(article, color, size);
                       quantity (d) <- n;
                    }
                }
            } ELSE {
                MESSAGE 'Товар с заданными характеристиками не найден';
            } 
              
        }
    }
    changeQuantity(Article article, Color color, Item.Size size, ###object object)  { 
        INPUT n = NUMERIC[16,5] DO
            changeQuantityValue(article, color, size, object, n);
    }

END
META defineDocumentArticle(object, skuProp, stockProp)
    @defineDocumentArticleCustom(object, object##Detail, skuProp, stockProp);
END

META extendFormDocumentArticleCustom(object, form, concrete, legalEntityProp, stockProp)

    EXTEND FORM form

        OBJECTS ar=Article
        PROPERTIES READONLY id(ar) SHOWIF showIDs(), caption(ar)
        FILTERS           isParent(sk, ar)

        FILTERS           caption(ar)
        ORDERS          id(ar)

        OBJECTS si=Item.Size
        PROPERTIES(si) name
        FILTERS count(si,ar)

        OBJECTS co=Color
        PROPERTIES(co) READONLY id SHOWIF showIDs(), name
        FILTERS count(co,ar)

        PROPERTIES(ar,co,si,concrete) quantity ON CHANGE changeQuantity(ar,co,si,concrete)
                                          COLUMNS (si) HEADER name(si) BACKGROUND backgroundQuantity(ar,co,si,concrete)
        PROPERTIES(ar,co,si,concrete) READONLY priceBalance COLUMNS (si) HEADER nameBalance(si)

//        PROPERTIES(ar,co,si,concrete) priceBalanceArticleColorSize###object ON CHANGE changeQuantityArticleColorSize###object(ar,co,si,concrete) COLUMNS (si) HEADER nameBalanceSize(si)
// Саше для выявления бага
        FILTERS name(co), name(si)
        ORDERS name(co), name(si)
    ;

    DESIGN form {
        skuSelectPane {
            tabbed = TRUE;
            NEW articleContainer {
                caption = 'Артикулы';
                type = CONTAINERV;
                MOVE BOX(ar);
                MOVE BOX(co);
                REMOVE BOX(si);
            }
        }
        PROPERTY(priceBalance(ar,co,si,concrete)) { background = #FFEEEE; }
    }

END
