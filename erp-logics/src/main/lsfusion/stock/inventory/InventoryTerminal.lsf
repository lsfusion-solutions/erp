MODULE InventoryTerminal;

REQUIRE Inventory, Terminal;

NAMESPACE Terminal;

detailCount 'Количество строк на страницу'  = DATA INTEGER (Inventory) IN documentPrm;
isOneListInventory 'Импорт документов из ТСД в 1 опись' = DATA BOOLEAN (Inventory)IN documentPrm;

EXTEND FORM inventory
    PROPERTIES detailCount(in), isOneListInventory(in);

detailCount 'Количество строк на страницу' = DATA INTEGER (Inventory.Operation);
isOneListInventory 'Импорт документов из ТСД в 1 опись' = DATA BOOLEAN (Inventory.Operation);

EXTEND FORM Inventory.operation
     PROPERTIES(o) detailCount, isOneListInventory
 ;
DESIGN Inventory.operation {
    paramsContainer {
        MOVE PROPERTY(detailCount(o));
        MOVE PROPERTY(isOneListInventory(o));
    }
}

@deriveDocumentOperationProperty(Inventory, detailCount);

@deriveDocumentOperationProperty(Inventory, isOneListInventory);

overCreateTerminal ABSTRACT LIST (PageInventory);

getID = FORMULA LONG '$1';
addInventoryDetails(TerminalDocument td,ListInventory li)  { 

    LOCAL quantity = NUMERIC[16,5](TerminalDocumentDetail, Batch);
    FOR terminalDocument(TerminalDocumentDetail d) == td AND iterate(INTEGER j, 1, wordCount(batch(d), ';')) AND STRING str == getWord(batch(d), ';', j) DO {
        quantity(d, Batch b) <- NUMERIC[16,5](getWord(str, ':', 2)) WHERE getID(b) == LONG(getWord(str, ':', 1)); 
    }

    LOCAL countDetail = INTEGER();
    countDetail() <- (OVERRIDE detailCount(inventory(li)), 20);
    
    LOCAL countPages = INTEGER();
    countPages() <- (((GROUP SUM 1 IF quantity(TerminalDocumentDetail d, Batch b) AND terminalDocument(d) == td) (+) countTerminalDocumentDetail(td)) + countDetail() - 1) / countDetail();
    
    FOR iterate(INTEGER i, 1, countPages()) NEW p = PageInventory DO {
        listInventory(p) <- li;
        overCreateTerminal(p);
    }
    
    LOCAL index = INTEGER (PageInventoryDetail);
    
    FOR terminalDocument(TerminalDocumentDetail tdd) == td AND NUMERIC[16,5] qty == quantity(tdd) (-) (GROUP SUM quantity(tdd, Batch b)) INLINE NEW pid = PageInventoryDetail DO {
        sku(pid) <- sku(tdd);
        quantity(pid) <- qty;
        index(pid) <- index(tdd);
    }
    
    FOR terminalDocument(TerminalDocumentDetail tdd) == td AND NUMERIC[16,5] qty == quantity(tdd, Batch b) INLINE NEW pid = PageInventoryDetail DO {
        sku(pid) <- sku(tdd);
        quantity(pid) <- qty;
        batch(pid) <- b;
        index(pid) <- index(tdd);
    }
    
    index(PageInventoryDetail pd) <- PARTITION SUM 1 ORDER index(pd), pd;
    
    pageInventory(PageInventoryDetail pid) <- pageInventoryIndex(li, ((index(pid) - 1)/countDetail()) + 1) WHERE index(pid);
    DELETE PageInventory p WHERE  listInventory(p) == li AND NOT countPageInventoryDetail(p);
}

inOneListInventoryDetails =  GROUP SUM 1 IF include(terminalDocument(TerminalDocumentDetail tdd)) BY sku(tdd);
quantityOneListInventoryDetails (Sku sku) = GROUP SUM quantity(TerminalDocumentDetail tdd) IF include(terminalDocument(tdd)) BY sku(tdd);

createZeroDetail 'Создавать строки описи с количеством "0" при импорте из ТСД, если такие строки были в документе ТСД' = DATA BOOLEAN (Inventory.Operation);
EXTEND FORM Inventory.operation
    PROPERTIES (o) createZeroDetail
;
DESIGN Inventory.operation{
    paramsContainer{
        MOVE PROPERTY (createZeroDetail(o));
    }
}

createZeroDetailData = ABSTRACT BOOLEAN (ListInventory);
createZeroDetail(ListInventory li) = OVERRIDE createZeroDetailData(li), createZeroDetail(operation(inventory(li)));

overAddOneListInventoryDetail  ABSTRACT LIST (PageInventoryDetail);

addOneListInventoryDetails(ListInventory li)  { 
    NEW p = PageInventory {
        listInventory(p) <- li;
        
        LOCAL quantity = NUMERIC[16,5](Sku, Batch);
        FOR include(terminalDocument(TerminalDocumentDetail d)) AND iterate(INTEGER j, 1, wordCount(batch(d), ';')) AND STRING str == getWord(batch(d), ';', j) DO {
            quantity(Sku s, Batch b) <- GROUP SUM NUMERIC[16,5](getWord(str, ':', 2)) IF getID(b) == LONG(getWord(str, ':', 1)) AND sku(d) == s; 
        }

        FOR inOneListInventoryDetails(Sku sku) AND NUMERIC[16,5] qty == (OVERRIDE quantityOneListInventoryDetails(sku), 0.0 IF createZeroDetail(li)) (-) (GROUP SUM quantity(sku, Batch b)) INLINE NEW pid = PageInventoryDetail DO {
            pageInventory(pid) <- p;
            sku(pid) <- sku;
            quantity(pid) <- qty;
            overAddOneListInventoryDetail(pid);
        }
        
        FOR inOneListInventoryDetails(Sku sku) AND NUMERIC[16,5] qty == quantity(sku, Batch b) NEW pid = PageInventoryDetail DO {
            pageInventory(pid) <- p;
            sku(pid) <- sku;
            quantity(pid) <- qty;
            batch(pid) <- b;
        }
    }
}

addDetailDialogTerminal 'Заполнить из документа ТСД' (ListInventory listInventory)  { 
    DIALOG terminalDocuments OBJECTS td INPUT DO {
        used(td) <- TRUE;
        addInventoryDetails(td, listInventory);
    }
} TOOLBAR;
 
addListInventoryDialogTerminal 'Заполнить из документов ТСД' (Stock stock, Inventory inventory)  { 
    DIALOG terminalDocuments DO {
        IF NOT isOneListInventory(inventory) THEN {
            FOR include(TerminalDocument td) NOINLINE NEW  li = ListInventory DO {
                stock(li) <- stock;
                inventory(li) <- inventory;
                addInventoryDetails(td,li);
            }
        }
        ELSE {
            NEW  li = ListInventory {
                inventory(li) <- inventory;
                stock(li) <- stock;
                addOneListInventoryDetails(li);
            }
        }
        used(TerminalDocument td) <- include(td) WHERE include(td);
        include(TerminalDocument td) <- NULL;
    }
} TOOLBAR;

EXTEND FORM listInventory
    PROPERTIES SHOWIF isSku(li) addDetailDialogTerminal(li) DRAW dp
;

EXTEND FORM inventory
    PROPERTIES(ds, in) addListInventoryDialogTerminal
;