MODULE Inventory;

REQUIRE System,
        Stock,
        Sku,
        InventoryOperation,
        PriceListLedger,
        PriceListAccount,
        StockSkuDocument,
        Numerator,
        Barcode,
        Document,
        EmployeeStock,        
        StockDocumentSkuLedger,
        Utils,
        Item,
        SkuList;

// -------------------------------- Комиссия для инвентаризации ----------------------------------//
CLASS InventoryCommittee 'Комиссия для инвентаризации' : Committee;

// Комиссия инвентаризации
GROUP inventoryCommittee 'Комиссия' : public;

name 'Наименование' = DATA ISTRING[150](InventoryCommittee);

name(InventoryCommittee committee) += name(committee) IF committee IS InventoryCommittee;

committee(inventory) = DATA InventoryCommittee (Inventory);
nameCommittee 'Название комиссии' (Inventory inventory) = name(committee(inventory)) IN inventoryCommittee CHARWIDTH 30;
nameChairmanCommittee 'Председатель комиссии' (Inventory inventory) = nameChairman(committee(inventory)) IN inventoryCommittee CHARWIDTH 30;
overNameChairmanCommittee = ABSTRACT ISTRING[201] (Inventory);
overFirstShortNameChairmanCommittee = ABSTRACT ISTRING[201] (Inventory);
namePositionChairman 'Должность председателя' (Inventory inventory)  = OVERRIDE namePositionChairman(committee(inventory)), overNameChairmanCommittee(inventory) IN inventoryCommittee CHARWIDTH 30;
overNamePositionCommittee = ABSTRACT ISTRING[200] (Inventory);
nameEmployee 'Члены комиссии' (Inventory inventory) = OVERRIDE nameEmployee(committee(inventory)), overNamePositionCommittee(inventory) IN inventoryCommittee CHARWIDTH 30;
overIn = ABSTRACT BOOLEAN (Inventory, Employee);
in 'Является членом комиссии' (Inventory inventory, Employee employee) = OVERRIDE in(committee(inventory), employee), overIn(inventory, employee);

FORM inventoryCommittee 'Комиссия для инвентаризации'
    OBJECTS c=InventoryCommittee PANEL
    PROPERTIES(c)      name, nameChairman

    TREE stockTree sg = StockGroup PARENT parent(sg)
    PROPERTIES READONLY sgTreeName = name(sg)

    OBJECTS ts=Stock
    PROPERTIES    READONLY tsTreeName = name(ts)
    PROPERTIES(c, ts) in 
    FILTERGROUP inactiveStock FILTER 'Активный' active(ts) 'ctrl F10' DEFAULT
    FILTERS isParent(sg, ts)
    ORDERS tsTreeName


    OBJECTS e=Employee
    PROPERTIES(e)      READONLY name[Contact], firstName, lastName, namePosition
    PROPERTIES(e)      NEWEDIT, EDIT, DELETE GRID

    PROPERTIES(c, e)   in
    FILTERS            (countStock (e, c) AND NOT allowStockEmployee()) OR (e IS Employee AND allowStockEmployee())
    FILTERGROUP filters6
        FILTER 'Показывать только членов комиссии' in(c, e) 'F10'

    FILTERGROUP filters5
        FILTER 'Показывать отделы только для данной комиссии' in(c, ts) 'F9'
    FILTERGROUP active FILTER 'Активные' active(e) 'F5'  DEFAULT 
    EDIT InventoryCommittee OBJECT c
;
@extendFormFilterStockAccess(ts, inventoryCommittee);
@extendFormFilterStockGroupAccess(sg, inventoryCommittee);

DESIGN inventoryCommittee {
    BOX {
        size = (1024, 768);

        OBJECTS {
            NEW caseOne BEFORE BOX(e) {
                fill = 1;
                type = SPLITH;
    
                MOVE BOX(TREE stockTree) {
                    caption = 'Группы складов';
                }
                MOVE BOX(ts) {
                    fill = 1;
                }
            }
        }
    }
}

FORM inventoryCommittees 'Комиссии для инвентаризации'
    OBJECTS w=InventoryCommittee
    PROPERTIES(w)      READONLY name, nameStocks, nameEmployee, nameChairman
    PROPERTIES(w)      NEWSESSION NEW, EDIT, DELETE

    LIST InventoryCommittee OBJECT w
;

// ------------------------------- Инвентаризация --------------------------------------------- //

CLASS TypeOfAddition 'Тип инвентаризации' {
    register 'Товары из описей',
    remains 'Товары по остаткам',
    many    'Множество товаров'
}
FORM typeOfAdditions 'Типы инвентаризаций'
    OBJECTS t = TypeOfAddition
    PROPERTIES(t) READONLY staticCaption
    LIST TypeOfAddition OBJECT t
;

CLASS Inventory 'Инвентаризация';
TABLE inventory (Inventory);

is (Inventory o) = o IS Inventory;

@defineDocumentHeaderCreated(Inventory);
@defineDocumentHeaderPosted(Inventory) ;

@defineDocumentHeaderTime(Inventory);

@defineDocumentHeaderClosed(Inventory);

@deriveDocumentHeaderTimePrefix(Inventory, );

@defineDocumentHeaderNumber(Inventory, BPSTRING[2]);
@defineNumeratedDefault(Inventory, 'Инвентаризации', 'ИН');

@defineDocumentHeaderNote(Inventory);

@defineExternalizable(inventory, STRING[100]);

isBatch 'По партиям' (inventory) = DATA BOOLEAN (Inventory);
isSku (Inventory inventory) = inventory IS Inventory AND NOT isBatch(inventory);

name 'Название инвентаризации' = DATA STRING[100] (Inventory) IN documentPrm CHARWIDTH 50;

timeFrom 'Начато' (inventory) = DATA DATETIME (Inventory) IN documentPrm;
timeTo 'Закончено' (inventory) = DATA DATETIME (Inventory) IN documentPrm;

headMan (inventory) = DATA Employee (Inventory);
nameHeadMan  'Зав. складом' (Inventory inventory) = name[Contact](headMan(inventory)) IN documentPrm;

TABLE stockInventory (Stock, Inventory);
include 'Вкл' = DATA BOOLEAN (Stock, Inventory);
countStocks 'Кол-во складов' (Inventory in) = GROUP SUM 1 IF include(Stock st, in);
nameStock 'Склады' (Inventory inventory) =
    GROUP
          CONCAT name(Stock stock) IF include(stock, inventory), ', '
          ORDER stock CHARWIDTH 20;
nameOrg 'Организация' (Inventory inventory) =
    GROUP
          CONCAT name(LegalEntity l) IF include(Stock stock, inventory) AND legalEntity(stock) = l, ', '
          ORDER l CHARWIDTH 50;

// Тип инвентаризации
typeOfAddition(inventory) = DATA TypeOfAddition (Inventory);
nameTypeOfAddition 'Тип инвентаризации' (Inventory inventory) = staticCaption(typeOfAddition(inventory)) IN documentPrm CHARWIDTH 20;
isPartly 'Частичная' = DATA BOOLEAN (Inventory);


//-- Выбор групп товара  
TABLE inventorySkuGroup (Inventory, SkuGroup);  
     
dataInclude 'Вкл' = DATA BOOLEAN (Inventory, SkuGroup);

levelParentInclude (Inventory inventory, SkuGroup skuGroup) = GROUP
                                                              MIN level(skuGroup, SkuGroup parent) IF dataInclude(inventory, parent) MATERIALIZED;    
nearestParentInclude (Inventory inventory, SkuGroup skuGroup) = skuGroup(skuGroup, levelParentInclude(inventory, skuGroup));
nearestInclude (Inventory inventory, SkuGroup skuGroup) = dataInclude(inventory, nearestParentInclude (inventory, skuGroup));

include 'Вкл' (Inventory inventory, SkuGroup skuGroup) =
    OVERRIDE dataInclude(inventory, skuGroup), 
             nearestInclude (inventory, skuGroup) MATERIALIZED;    
                      
include 'Вкл' (Inventory inventory, Sku sku) = include(inventory, skuGroup(sku));  
countIncludeSkuGroup 'Вкл' (Inventory inventory) = GROUP SUM 1 IF include(inventory, SkuGroup sku);     
                    
countIncludeSku 'Вкл' (Inventory inventory) = GROUP SUM 1 IF include(inventory, Sku sku);                    

nameIncludeSkuGroups 'Группы товаров' (Inventory document)= 
    GROUP 
    CONCAT name(SkuGroup skuGroup) IF dataInclude(document, skuGroup), ', ' 
    ORDER skuGroup
    CHARWIDTH 20;

resetIncludeSkuGroups  'Сбросить отмеченные'(Inventory in)  { 
    dataInclude(in, SkuGroup g) <- NULL WHERE g IS SkuGroup ;    
}  

FORM selectSkuGroups 'Выбор групп'

    OBJECTS in = Inventory PANEL 

    TREE skuTree2 sk2 = SkuGroup PARENT parent(sk2)
    PROPERTIES READONLY order(sk2), name(sk2)
    PROPERTIES include(in,sk2)
    ORDERS order(sk2), name(sk2)
    PROPERTIES (in) resetIncludeSkuGroups TOOLBAR DRAW sk2 SHOWIF countIncludeSku(in)
    FILTERGROUP inactive2 FILTER 'Активные' active(sk2) 'F5' DEFAULT       
;
DESIGN selectSkuGroups {
    BOX {
        size = (1024, 768);
    }
}

changeSkuGroups (Inventory in)  { 
    IF typeOfAddition(in) == TypeOfAddition.remains THEN {
        SHOW selectSkuGroups OBJECTS in = in ; 
    }
}
isRemains(Inventory in) = typeOfAddition(in) == TypeOfAddition.remains;

CONSTRAINT isPartly(Inventory in) AND NOT isRemains(in)
    MESSAGE 'Признак "Частичная" доступен только для типа инвентаризации "Товары по остаткам".';

userTypeOfAddition(stock, inventory) = DATA TypeOfAddition (Stock, Inventory);
nameUserTypeOfAddition 'Тип инвентаризации' (Stock stock, Inventory inventory) = staticCaption(userTypeOfAddition(stock, inventory));

typeOfAddition(Stock stock, Inventory inventory) = OVERRIDE userTypeOfAddition(stock, inventory),
                                                          typeOfAddition(inventory) IF stock IS Stock;

CONSTRAINT include(Stock stock, Inventory inventory) AND NOT typeOfAddition(stock, inventory) MESSAGE 'Ошибка: Не задан тип сличительной ведомости для выбранного отдела';
userTypeOfAddition(Stock stock, Inventory inventory) => include(stock, inventory) RESOLVE RIGHT;

// ---------------------------------------------- Описи -------------------------------------- //

CLASS ListInventory 'Опись (открытая)' : Document;
TABLE listInventory (ListInventory);

@defineDocumentHeaderStock(listInventory, stock, 'Склад');
@defineDocumentHeaderNote(ListInventory);

@defineDocumentHeaderCurrency(listInventory);
@deriveDocumentCurrency(listInventory, stock);

inventory = DATA Inventory (ListInventory) NONULL DELETE;
nameInventory 'Название инвентаризации' (ListInventory listInventory) = name(inventory(listInventory));

countListInventory 'Кол-во описей' = GROUP SUM 1 BY inventory(ListInventory li);

@defineDocumentDetailTime(inventory, ListInventory);

@defineDocumentDetailIndex(inventory, ListInventory);

name 'Номер описи' = ABSTRACT CASE STRING[100](ListInventory) CHARWIDTH 20;
name(ListInventory listInventory) +=  WHEN listInventory IS ListInventory THEN STRING[100]('Опись ' + index(listInventory));

isBatch (ListInventory listInventory) = isBatch(inventory(listInventory));
isSku (ListInventory listInventory) = isSku(inventory(listInventory));

userCommittee(listInventory) = DATA InventoryCommittee (ListInventory);
committee(ListInventory listInventory) = OVERRIDE userCommittee(listInventory), committee(inventory(listInventory));
nameCommittee 'Название комиссии' (ListInventory listInventory) = name(committee(listInventory)) IN inventoryCommittee CHARWIDTH 30;
nameChairmanCommittee 'Председатель комиссии' (ListInventory listInventory) = OVERRIDE nameChairman(committee(listInventory)), overNameChairmanCommittee(inventory(listInventory)) IN inventoryCommittee CHARWIDTH 30;
namePositionChairman 'Должность председателя' (ListInventory listInventory)  = OVERRIDE namePositionChairman(committee(listInventory)), overNamePositionCommittee(inventory(listInventory)) IN inventoryCommittee CHARWIDTH 30;
nameEmployee 'Члены комиссии' (ListInventory listInventory) = nameEmployee(committee(listInventory)) IN inventoryCommittee CHARWIDTH 30;
in 'Является членом комиссии' (ListInventory listInventory, Employee employee) = OVERRIDE in(committee(listInventory), employee), overIn(inventory(listInventory), employee);
overCommittee = GROUP SUM 1 IF overIn(inventory(ListInventory li), Employee e) BY li;

// --------------------------------------------- Страницы описи ------------------------------------------ //

CLASS PageInventory 'Страница описи';
TABLE pageInventory (PageInventory);

@defineDocumentHeaderNote(PageInventory);

@defineDocumentRelation(listInventory, PageInventory);
@defineDocumentDetailIndex(listInventory, PageInventory);

name 'Номер страницы' (PageInventory pageInventory) = 'Страница ' + index(pageInventory) IN base;
pageInventoryIndex = GROUP MAX PageInventory pi BY listInventory(pi), index(pi);  

// --------------------------------------------- Строки описи -------------------------------------------- //

CLASS PageInventoryDetail 'Строка' :DocumentDetail;
TABLE pageInventoryDetail (PageInventoryDetail);

@defineDocumentRelation(pageInventory);

listInventory(PageInventoryDetail pageInventoryDetail) = listInventory(pageInventory(pageInventoryDetail)) MATERIALIZED INDEXED;
inventory(PageInventoryDetail pageInventoryDetail) = inventory(listInventory(pageInventoryDetail)) MATERIALIZED;

@defineDocumentDetailStock(listInventory, pageInventoryDetail, stock, stock, 'Склад');
@defineDocumentDetailTime(inventory, PageInventoryDetail);

@defineDocumentDetailCurrency(listInventory, pageInventoryDetail);

@defineDocumentDetailIndex(pageInventory);
@defineDocumentDetailSku(pageInventory, sku);

nameSkuTypeSku 'Тип товара' (PageInventoryDetail d) = nameSkuType(sku(d));

// Для инвентаризации по партиям
@defineDocumentDetailBatchCustom(pageInventoryDetail, batch);

idBatch 'Код партии' (PageInventoryDetail detail) = id(batch(detail));

costBatch 'Себестоимость' (PageInventoryDetail pageInventoryDetail) = cost(batch(pageInventoryDetail));

@defineDocumentDetailQuantity(pageInventory);

costSumBatch 'Сумма(себестоимость)' (PageInventoryDetail pageInventoryDetail) = costBatch(pageInventoryDetail) * quantity(pageInventoryDetail);

@defineDocumentDetailPrice(pageInventory);

@defineDocumentDetailDataSum(pageInventory);
@deriveDocumentDetailSum(pageInventory, quantity);

@defineDocumentHeaderQuantity(pageInventory);
@defineDocumentHeaderSum(pageInventory);

WHEN LOCAL (CHANGED(sku(PageInventoryDetail detail)) OR CHANGED(batch(detail)) OR CHANGED (dateTime(detail))) AND batch(detail) DO {
    price (detail)  <- prevAccountPriceB(batch(detail), stock(detail), dateTime(detail));
}

WHEN LOCAL (CHANGED(sku(PageInventoryDetail detail)) OR CHANGED(batch(detail)) OR CHANGED (dateTime(detail))) AND NOT batch(detail) DO {
    price (detail)  <- prevAccountPriceB(sku(detail), stock(detail), dateTime(detail));
}

replace(Sku s, Batch b) + {  sku(PageInventoryDetail detail) <- s WHERE batch(detail) == b;} 
// -------------------------------------------- Сличительная ведомость ----------------------------------------------- //

CLASS ABSTRACT CollationSheet 'Сличительная ведомость';

CLASS RegisterCollationSheet 'Сличительная ведомость по описи' : CollationSheet;
CLASS RemainsCollationSheet 'Сличительная ведомость по остаткам' : CollationSheet;
CLASS ManyCollationSheet 'Сличительная ведомость по множеству товаров' : CollationSheet;

TABLE collationSheet (CollationSheet);

@defineDocumentRelation(inventory, CollationSheet);

@defineDocumentHeaderStock(collationSheet, stock, 'Склад');
numberDisposal 'Основание для инвентаризации'  = DATA ISTRING[100] (CollationSheet) IN documentPrm CHARWIDTH 20;

@defineDocumentDetailTime(inventory, CollationSheet);
@defineDocumentDetailPosted(inventory, CollationSheet);
isClosed 'Закрыт' (CollationSheet d) = isClosed(inventory(d)) MATERIALIZED;

@defineDocumentDetailIndex(inventory, CollationSheet);

isBatch (CollationSheet collationSheet) = isBatch(inventory(collationSheet)) PREREAD;
isSku (CollationSheet collationSheet) = isSku(inventory(collationSheet));

nameInventory 'Название инвентаризации' (CollationSheet collationSheet) = name(inventory(collationSheet));

timeFrom 'Снятие остатков начато' (CollationSheet collationSheet) = timeFrom(inventory(collationSheet));
timeTo 'Снятие остатков закончено' (CollationSheet collationSheet) = timeTo(inventory(collationSheet));
nameHeadMan  'Зав. складом' (CollationSheet collationSheet) = nameHeadMan(inventory(collationSheet));

name 'Внутренний номер' (CollationSheet collationSheet) = seriesNumber(inventory(collationSheet)) + '-' + index(collationSheet) IN id;
number 'Номер' (CollationSheet c) = number(inventory(c)); 
series 'Серия' (CollationSheet c) = series(inventory(c)); 

@defineExternalizable(collationSheet, STRING[100]);

collationSheet 'Сличительная ведомость по складу и инвентаризации' (stock, inventory) =
    GROUP AGGR CollationSheet collationSheet BY stock(collationSheet), inventory(collationSheet);
collationSheet(ListInventory listInventory) = collationSheet(stock(listInventory), inventory(listInventory));
nameCollationSheet 'Название сл. ведомости' (ListInventory listInventory) = name(collationSheet(listInventory));

collationSheet (PageInventoryDetail pageInventoryDetail) = collationSheet(listInventory(pageInventoryDetail)) MATERIALIZED;

INDEX collationSheet(PageInventoryDetail d), sku(d);
INDEX collationSheet(PageInventoryDetail d), batch(d);

typeOfAddition(CollationSheet collationSheet)= typeOfAddition(stock(collationSheet), inventory(collationSheet));
nameTypeOfAddition 'Тип сличительной ведомости' (CollationSheet collationSheet) = staticCaption(typeOfAddition(collationSheet)) IN base CHARWIDTH 20;

in (Inventory inventory, Stock stock, ListInventory listInventory, PageInventory pageInventory, PageInventoryDetail pageInventoryDetail) = OVERRIDE
    stock(pageInventoryDetail) == stock AND inventory == inventory(pageInventoryDetail) AND NOT pageInventory AND NOT listInventory,
    listInventory(pageInventoryDetail) == listInventory AND stock IS Stock AND NOT pageInventory AND inventory IS Inventory,
    pageInventory(pageInventoryDetail) == pageInventory AND listInventory IS ListInventory AND stock IS Stock AND inventory IS Inventory;

description 'Название документа' (CollationSheet collationSheet) = CONCAT ' ', 
    'Сличительная ведомость',
     name(collationSheet),
     'от ' + toDateDDMMYYYY(date(collationSheet));

userPrevDate 'Дата предыдущей инвентаризации' (collationSheet) = DATA DATE (CollationSheet) IN base;

inventoryPrev (Stock stock, Inventory inventory) = PARTITION PREV inventory IF include(stock, inventory) AND isPosted(inventory) AND NOT isPartly(inventory) ORDER DESC date(inventory)
    BY stock;

calcPrevDate 'Дата предыдущей инвентаризации' (CollationSheet collationSheet) = PARTITION PREV date(collationSheet) IF isPosted(collationSheet) AND NOT isPartly(inventory(collationSheet)) ORDER date(collationSheet), collationSheet
    BY stock(collationSheet);
    
//calcPrevCollationSheet = GROUP LAST CollationSheet cs
//                                                  BY stock(cs), DATE dateIn 
//                                                  ORDER date(cs), cs
//                                                  WHERE isPosted(cs) AND date(cs) < dateIn COMPLEX; // возможно следует учитывать операцию    

overPrevDate= ABSTRACT DATE (CollationSheet); // для даты полной инвентаризации
prevDate 'Дата предыдущей инвентаризации' (CollationSheet collationSheet) = OVERRIDE userPrevDate(collationSheet), sum(overPrevDate(collationSheet), 1), sum(calcPrevDate(collationSheet), 1);
//prevDate 'Дата предыдущей инвентаризации' (CollationSheet collationSheet) = OVERRIDE sum(date(calcPrevCollationSheet(stock(collationSheet), date(collationSheet))), 1), userPrevDate(collationSheet);

// Комиссии
committee = committee(inventory(CollationSheet collationSheet));
nameCommittee 'Название комиссии' (CollationSheet collationSheet) = name(committee(collationSheet)) IN inventoryCommittee CHARWIDTH 30;
nameChairmanCommittee 'Председатель комиссии' (CollationSheet collationSheet) = OVERRIDE nameChairman(committee(collationSheet)), overNameChairmanCommittee(inventory(collationSheet)) IN inventoryCommittee CHARWIDTH 30;
firstShortNameChairmanCommittee 'Председатель комиссии (И.О. Фамилия)' (CollationSheet collationSheet) = OVERRIDE firstShortName(chairman(committee(collationSheet))), overFirstShortNameChairmanCommittee(inventory(collationSheet))  IN inventoryCommittee CHARWIDTH 30;
namePositionChairman 'Должность председателя' (CollationSheet collationSheet)  = OVERRIDE namePositionChairman(committee(collationSheet)), overNamePositionCommittee(inventory(collationSheet)) IN inventoryCommittee CHARWIDTH 30;
nameEmployee 'Члены комиссии' (CollationSheet collationSheet) = nameEmployee(committee(collationSheet)) IN inventoryCommittee CHARWIDTH 30;
in 'Является членом комиссии' (CollationSheet collationSheet, Employee employee) = OVERRIDE in(committee(collationSheet), employee), overIn(inventory(collationSheet), employee);
overCommittee = GROUP SUM 1 IF overIn(inventory(CollationSheet cs), Employee e) BY cs;

//---------------------------- Состав сличительной ведомости (Sku) ----------------------------//

TABLE collationSheetSku (CollationSheet, Sku);
TABLE collationSheetSkuGroup (CollationSheet, SkuGroup);

in 'Вкл в ведомость' = DATA BOOLEAN (ManyCollationSheet, Sku) IN base;
quantityBalance 'Кол-во по остаткам' (collationSheet, sku) = DATA NUMERIC[16,5] (CollationSheet, Sku);
priceBalance 'Цена по остаткам' (collationSheet, sku) = DATA NUMERIC[16,4] (CollationSheet, Sku);
sumBalance 'Сумма по остаткам' (collationSheet, sku) = DATA NUMERIC[18,4] (CollationSheet, Sku);

isPrice 'Сумму остатка считать по цене' = DATA BOOLEAN (Inventory) PREREAD;

//---------------------------- Состав сличительной ведомости (Партия) ----------------------------//

TABLE collationSheetBatch (CollationSheet, Batch);

quantityBalance 'Кол-во по остаткам' (collationSheet, batch) = DATA NUMERIC[16,5] (CollationSheet, Batch);

priceBalance 'Цена по остаткам' (collationSheet, batch) = DATA NUMERIC[16,4] (CollationSheet, Batch);

sumBalance 'Сумма по остаткам'  = DATA NUMERIC[18,4] (CollationSheet, Batch); 

costSumBalance 'Сумма по остаткам(себестоимость)' (CollationSheet cs, Batch bt) = quantityBalance(cs, bt) * cost(bt); 
// ------------------------------------- Действия по заполнению сличительной ведомости --------------------------------------- //

GROUP inventoryAction 'Действия' : public;
overRecalculateBalance  ABSTRACT LIST ( Inventory);

excludeBatch = ABSTRACT CASE BOOLEAN (Inventory, Batch);
startTimeRecalculateBalance 'Остатки старт' = DATA DATETIME(Inventory);
endTimeRecalculateBalance 'Остатки конец' = DATA DATETIME(Inventory);
startTimeRecalculateBalance 'Остатки старт' (CollationSheet cs) = startTimeRecalculateBalance(inventory(cs));
endTimeRecalculateBalance 'Остатки конец' (CollationSheet cs)= endTimeRecalculateBalance(inventory(cs));

//----------------------------------------------------- Итоги -------------------------------------------------------- //

//---------------------------- Итоги по описям (Sku) ----------------------------//

countListInventory 'К-во описей' (collationSheet) =
    GROUP SUM 1 IF ListInventory listInventory IS ListInventory BY collationSheet(listInventory);
countPageInventory 'К-во страниц' (collationSheet) =
    GROUP SUM 1 IF PageInventory pageInventory IS PageInventory BY collationSheet(listInventory(pageInventory));

countPageInventoryDetail 'Кол-во строк' (listInventory) = GROUP SUM countPageInventoryDetail(PageInventory pageInventory) BY listInventory(pageInventory) IN documentSum;
quantityPageInventoryDetail 'Кол-во товара' (listInventory) = 
    GROUP SUM quantityPageInventoryDetail(PageInventory pageInventory) BY listInventory(pageInventory) IN documentSum CHARWIDTH 12;
sumPageInventoryDetail 'Сумма товара' (listInventory) = 
    GROUP SUM sumPageInventoryDetail(PageInventory pageInventory) BY listInventory(pageInventory) IN documentSum CHARWIDTH 12;

countPageInventoryDetail 'Кол-во строк' (stock, inventory) =
    GROUP SUM countPageInventoryDetail(ListInventory listInventory) BY stock(listInventory), inventory(listInventory) IN documentSum;
quantityPageInventoryDetail 'Кол-во по описям' (stock, inventory) =
    GROUP SUM quantityPageInventoryDetail(ListInventory listInventory) BY stock(listInventory), inventory(listInventory) IN documentSum;
sumPageInventoryDetail 'Сумма по описям' (stock, inventory) =
    GROUP SUM sumPageInventoryDetail(ListInventory listInventory) BY stock(listInventory), inventory(listInventory) IN documentSum;

overChangeQuantityPageInventoryDetail  ABSTRACT LIST ( CollationSheet, Sku);

quantityPageInventoryDetail 'Кол-во по описям' (collationSheet, sku) = GROUP SUM quantity(PageInventoryDetail pageInventoryDetail)
    BY collationSheet(pageInventoryDetail), sku(pageInventoryDetail) MATERIALIZED;
countPageInventoryDetail 'Кол-во по описям' (collationSheet, sku) = GROUP SUM 1
    BY collationSheet(PageInventoryDetail pageInventoryDetail), sku(pageInventoryDetail);    
pricePageInventoryDetail 'Цена по описям' (collationSheet, sku) = GROUP MAX price(PageInventoryDetail pageInventoryDetail) BY collationSheet(listInventory(pageInventoryDetail)), sku(pageInventoryDetail) // ??????? может нодо  priceSkuStockDateTime
    ;
priceMinPageInventoryDetail 'Цена по описям' (collationSheet, sku) = GROUP MIN price(PageInventoryDetail pageInventoryDetail) BY collationSheet(listInventory(pageInventoryDetail)), sku(pageInventoryDetail) // ??????? может нодо  priceSkuStockDateTime
    ;    
sumPageInventoryDetail 'Сумма по описям' (collationSheet, sku) = GROUP SUM sum(PageInventoryDetail pageInventoryDetail)
    BY collationSheet(pageInventoryDetail), sku(pageInventoryDetail);

quantityPageInventoryDetail 'Кол-во в описи' (listInventory, sku) = GROUP SUM quantity(PageInventoryDetail pageInventoryDetail)
    BY listInventory(pageInventoryDetail), sku(pageInventoryDetail);
pricePageInventoryDetail 'Цена в описи' (listInventory, sku) = GROUP MAX price(PageInventoryDetail pageInventoryDetail)
    BY listInventory(pageInventoryDetail), sku(pageInventoryDetail);
priceMinPageInventoryDetail 'Цена в описи' (listInventory, sku) = GROUP MIN price(PageInventoryDetail pageInventoryDetail)
    BY listInventory(pageInventoryDetail), sku(pageInventoryDetail);    
sumPageInventoryDetail 'Сумма в описи' (listInventory, sku) = GROUP SUM sum(PageInventoryDetail pageInventoryDetail)
    BY listInventory(pageInventoryDetail), sku(pageInventoryDetail);

differentPrice(CollationSheet collationSheet, Sku sku) = pricePageInventoryDetail(collationSheet, sku) != priceBalance(collationSheet, sku);

index 'Номер строки' (ListInventory listInventory, Sku sku) = PARTITION SUM 1 IF  quantityPageInventoryDetail(listInventory, sku) > 0 ORDER name(sku) BY listInventory;
countIndex 'Количество наименований товара'(ListInventory listInventory) = GROUP
    SUM 1 IF quantityPageInventoryDetail(listInventory, Sku sku) > 0 IN documentSum;  
    
CONSTRAINT pricePageInventoryDetail(CollationSheet collationSheet, Sku sku) != priceMinPageInventoryDetail(collationSheet, sku) AND NOT  isBatch(collationSheet)   
    MESSAGE 'В описях присутствует одинаковый товар с разными ценами';
//---------------------------- Итоги по описям (Batch) ----------------------------//
notBatchQuantityPageInventoryDetail (CollationSheet cs, Sku sku) = GROUP SUM quantity(PageInventoryDetail d) IF NOT batch(d) BY collationSheet(d), sku(d);
countNotBatchPageInventoryDetail = GROUP SUM 1 IF sku(PageInventoryDetail d)  AND NOT batch(d) BY collationSheet(d);
isSkuBatch(CollationSheet cs) = isBatch(cs) AND countNotBatchPageInventoryDetail(cs) MATERIALIZED PREREAD; 

calcQuantityPageInventoryDetail 'Кол-во по описям' (collationSheet, batch) = GROUP SUM quantity(PageInventoryDetail pageInventoryDetail)
    BY collationSheet(pageInventoryDetail), batch(pageInventoryDetail);

calcPartitionQuantity (CollationSheet cs, Batch batch) = 
    PARTITION UNGROUP notBatchQuantityPageInventoryDetail
           LIMIT (balanceB(batch, stock(cs), dateTime(cs)) (-) calcQuantityPageInventoryDetail(cs,batch))
           ORDER DESC dateTime(batch), batch                            
           BY cs, sku(batch);
                                                           
partitionQuantity 'По FIFO' (CollationSheet cs, Batch batch) = DATA NUMERIC[16,5](CollationSheet, Batch);    
                                                                                                                                                                   
quantityPageInventoryDetail 'Кол-во по описям' (CollationSheet cs, Batch batch) = calcQuantityPageInventoryDetail(cs, batch) (+) partitionQuantity(cs, batch);
         
//quantityPageInventoryDetail 'Кол-во по описям' (collationSheet, batch) = GROUP SUM quantity(PageInventoryDetail pageInventoryDetail)
//    BY collationSheet(pageInventoryDetail), batch(pageInventoryDetail);
pricePageInventoryDetail 'Цена по описям' (CollationSheet collationSheet, Batch batch) = OVERRIDE [GROUP MAX price(PageInventoryDetail d) BY collationSheet(d), batch(d)](collationSheet, batch), 
    priceBalance(collationSheet, batch);
    
priceMaxPageInventoryDetail 'Цена по описям' (collationSheet, batch) = GROUP MAX price(PageInventoryDetail d) 
    BY collationSheet(d), batch(d);   
        
priceMinPageInventoryDetail 'Цена по описям' (collationSheet, batch) = GROUP MIN price(PageInventoryDetail d) 
    BY collationSheet(d), batch(d);   
//sumPageInventoryDetail 'Сумма по описям' (collationSheet, batch) = GROUP SUM sum(PageInventoryDetail pageInventoryDetail)
//    BY collationSheet(pageInventoryDetail), batch(pageInventoryDetail);

detailSumPageInventoryDetail 'Сумма по описям' (collationSheet, batch) = GROUP SUM sum(PageInventoryDetail pageInventoryDetail)
    BY collationSheet(pageInventoryDetail), batch(pageInventoryDetail);
batchSumPageInventoryDetail (CollationSheet cs, Batch batch) =  NUMERIC[18,4](round2(quantityPageInventoryDetail(cs, batch) * pricePageInventoryDetail(cs, batch))); 
   
sumPageInventoryDetail 'Сумма по описям' (CollationSheet cs, Batch batch) = IF isSkuBatch(cs)
    THEN batchSumPageInventoryDetail(cs,batch)
    ELSE detailSumPageInventoryDetail(cs,batch);
    
detailCostSumPageInventoryDetail 'Сумма по описям(себестоимость)' (collationSheet, batch) = GROUP SUM quantity(PageInventoryDetail pageInventoryDetail) * cost(batch(pageInventoryDetail))
    BY collationSheet(pageInventoryDetail), batch(pageInventoryDetail);
batchCostSumPageInventoryDetail (CollationSheet cs, Batch batch) =  NUMERIC[18,4](round2(quantityPageInventoryDetail(cs, batch) * cost(batch))); 
   
costSumPageInventoryDetail 'Сумма по описям(себестоимость)' (CollationSheet cs, Batch batch) = IF isSkuBatch(cs)
    THEN batchCostSumPageInventoryDetail(cs,batch)
    ELSE detailCostSumPageInventoryDetail(cs,batch);    
    
countPageInventoryDetail  (collationSheet, batch) = GROUP SUM 1 IF batch(PageInventoryDetail pageInventoryDetail)
    BY collationSheet(pageInventoryDetail), batch(pageInventoryDetail);

quantityPageInventoryDetail 'Кол-во в описи' (listInventory, batch) = GROUP SUM quantity(PageInventoryDetail pageInventoryDetail)
    BY listInventory(pageInventoryDetail), batch(pageInventoryDetail);
pricePageInventoryDetail 'Цена в описи' (listInventory, batch) = GROUP MAX price(PageInventoryDetail pageInventoryDetail)
    BY listInventory(pageInventoryDetail), batch(pageInventoryDetail);
priceMinPageInventoryDetail 'Цена в описи' (listInventory, batch) = GROUP MIN price(PageInventoryDetail pageInventoryDetail)
    BY listInventory(pageInventoryDetail), batch(pageInventoryDetail);    
sumPageInventoryDetail 'Сумма в описи' (listInventory, batch) = GROUP SUM sum(PageInventoryDetail pageInventoryDetail)
    BY listInventory(pageInventoryDetail), batch(pageInventoryDetail);
costSumPageInventoryDetail 'Сумма в описи(себестоимость)' = GROUP SUM quantity(PageInventoryDetail pageInventoryDetail) * cost(batch(pageInventoryDetail))
    BY listInventory(pageInventoryDetail), batch(pageInventoryDetail);  

differentPrice(CollationSheet collationSheet, Batch batch) = priceMaxPageInventoryDetail(collationSheet, batch) != priceBalance(collationSheet, batch);

index 'Номер строки' (ListInventory listInventory, Batch batch) = PARTITION SUM 1 IF  quantityPageInventoryDetail(listInventory, batch) > 0 ORDER name(sku(batch)) BY listInventory;
countIndexBatch 'Количество партий' (ListInventory listInventory) = GROUP
    SUM 1 IF quantityPageInventoryDetail(listInventory, Batch batch) > 0 IN documentSum;

quantityBatchPageInventoryDetail 'Кол-во по описям' (CollationSheet collationSheet) =
    GROUP SUM quantityPageInventoryDetail(collationSheet, Batch batch);
sumBatchPageInventoryDetail 'Сумма по описям' (CollationSheet collationSheet) =
    GROUP SUM sumPageInventoryDetail(collationSheet, Batch batch);
    
CONSTRAINT priceMaxPageInventoryDetail(CollationSheet collationSheet, Batch batch) != priceMinPageInventoryDetail(collationSheet, batch) AND  isBatch(collationSheet)   
    MESSAGE 'В описях присутствует партия с разными ценами';    


quantityPageInventoryDetail 'Кол-во по описям' (collationSheet) =
    GROUP SUM quantity(PageInventoryDetail pageInventoryDetail) BY collationSheet(pageInventoryDetail) MATERIALIZED;
//sumPageInventoryDetail 'Сумма по описям' (collationSheet) =
//    GROUP SUM sum(PageInventoryDetail pageInventoryDetail) BY collationSheet(pageInventoryDetail) MATERIALIZED;

sumPageInventoryDetail 'Сумма по описям' (CollationSheet cs) = IF isSkuBatch(cs)
    THEN (GROUP SUM batchSumPageInventoryDetail(cs, Batch batch))
    ELSE [GROUP SUM sum(PageInventoryDetail d) BY collationSheet(d)](cs) MATERIALIZED;
    
// ------------------------------ Определение состава сличительной ведомости (Sku) ------------------------------------ //

include(CollationSheet collationSheet, Sku sku) = MULTI
    collationSheet IS RegisterCollationSheet IF countPageInventoryDetail(collationSheet, sku),
    (OVERRIDE collationSheet IS ManyCollationSheet IF quantityPageInventoryDetail(collationSheet, sku), in(collationSheet, sku)),
    (collationSheet IS RemainsCollationSheet IF (quantityBalance(collationSheet, sku) != 0 OR sumBalance(collationSheet, sku) OR quantityPageInventoryDetail(collationSheet, sku)));
overInclude = ABSTRACT BOOLEAN (CollationSheet, Sku);

// ------------------------------ Определение состава сличительной ведомости (Batch) ------------------------------------ //

include(collationSheet, batch) = DATA BOOLEAN (CollationSheet, Batch);
                        
skipRecalculateBalance = ABSTRACT BOOLEAN (Inventory) PREREAD; 

recalculateBalance 'Заполнить остатки' (Inventory inventory)  {   
    startTimeRecalculateBalance(inventory) <- currentDateTime();
    quantityBalance(CollationSheet cs, Sku sku) <- NULL WHERE inventory(cs) == inventory;
    sumBalance(CollationSheet cs, Sku sku) <- NULL WHERE inventory(cs) == inventory;
    quantityBalance(CollationSheet cs, Batch batch) <- NULL WHERE inventory(cs) == inventory;
    sumBalance(CollationSheet cs, Batch batch) <- NULL WHERE inventory(cs) == inventory;
    
    FOR inventory(CollationSheet cs) = inventory AND DATETIME dt = dateTime(inventory) AND Stock st = stock(cs) AND NOT skipRecalculateBalance(inventory) DO {        
        IF isPartly(inventory) AND isRemains(inventory) THEN { 
            quantityBalance(cs, Sku sku)
                <- balanceB(sku, st, dt)
                WHERE include(inventory, sku) AND balanceB(sku, st, dt);
            IF NOT isPrice(inventory) THEN {
                sumBalance(cs, Sku sku)
                    <- NUMERIC[18,4](sumB(sku, st, dt))
                    WHERE include(inventory, sku) AND sumB(sku, st, dt);        
            } ELSE {
                sumBalance(cs, Sku sku)
                    <- NUMERIC[18,4](round(quantityBalance(cs, sku)*priceBalance(cs, sku),currency(st)))
                    WHERE include(inventory, sku) AND quantityBalance(cs, sku);    
            }   
            
            IF isBatch (inventory) THEN {
                quantityBalance(cs, Batch batch)
                    <- balanceB(batch, st, dt)
                    WHERE include(inventory, skuLedger(batch, st)) AND NOT excludeBatch(inventory,batch) AND balanceB(batch, st, dt);
                IF NOT isPrice(inventory) THEN {
                    IF explicitBatchLedger(st) THEN 
                        sumBalance(cs, Batch batch)
                            <- NUMERIC[18,4](sumB(batch, st, dt)) 
                            WHERE include(inventory, skuLedger(batch, st)) AND NOT excludeBatch(inventory,batch) AND sumB(batch, st, dt);
                    ELSE
                        sumBalance(cs, Batch batch)
                            <- NUMERIC[18,4](round(quantityBalance(cs, batch)*priceBalance(cs, batch),currency(st))) 
                            WHERE include(inventory, skuLedger(batch, st)) AND NOT excludeBatch(inventory,batch) AND quantityBalance(cs, batch);
                } ELSE {
                    sumBalance(cs, Batch batch)
                        <- NUMERIC[18,4](round(quantityBalance(cs, batch)*priceBalance(cs, batch),currency(st)))
                        WHERE include(inventory, skuLedger(batch, st)) AND NOT excludeBatch(inventory,batch) AND quantityBalance(cs, batch);    
                }                
            }    
        } ELSE {
            IF isRemains (inventory) THEN {
                quantityBalance(cs, Sku sku)
                    <- balanceB(sku, st, dt)
                    WHERE balanceB(sku, st, dt);
                IF NOT isPrice(inventory) THEN {
                    sumBalance(cs, Sku sku)
                        <- NUMERIC[18,4](sumB(sku, st, dt))
                        WHERE sumB(sku, st, dt);        
                } ELSE {
                    sumBalance(cs, Sku sku)
                        <- NUMERIC[18,4](round(quantityBalance(cs, sku)*priceBalance(cs, sku),currency(st)))
                        WHERE quantityBalance(cs, sku);    
                }
            } ELSE {
                quantityBalance(cs, Sku sku)
                    <- balanceB(sku, st, dt)
                    WHERE balanceB(sku, st, dt) AND include(cs, sku);
                IF NOT isPrice(inventory) THEN {
                    sumBalance(cs, Sku sku)
                        <- NUMERIC[18,4](sumB(sku, st, dt))
                        WHERE sumB(sku, st, dt) AND include(cs, sku);        
                } ELSE {
                    sumBalance(cs, Sku sku)
                        <- NUMERIC[18,4](round(quantityBalance(cs, sku)*priceBalance(cs, sku),currency(st)))
                        WHERE quantityBalance(cs, sku) AND include(cs, sku);    
                }
            }   
            
            IF isBatch (inventory) THEN {
                IF isRemains(inventory) THEN {
                    quantityBalance(cs, Batch batch)
                        <- balanceB(batch, st, dt)
                        WHERE NOT excludeBatch(inventory,batch) AND balanceB(batch, st, dt);
                    IF NOT isPrice(inventory) THEN {
                        IF explicitBatchLedger(st) THEN 
                            sumBalance(cs, Batch batch)
                                <- NUMERIC[18,4](sumB(batch, st, dt)) 
                                WHERE NOT excludeBatch(inventory,batch) AND sumB(batch, st, dt);
                        ELSE
                            sumBalance(cs, Batch batch)
                                <- NUMERIC[18,4](round(quantityBalance(cs, batch)*priceBalance(cs, batch),currency(st))) 
                                WHERE NOT excludeBatch(inventory,batch) AND quantityBalance(cs, batch);
                    } ELSE {
                        sumBalance(cs, Batch batch)
                            <- NUMERIC[18,4](round(quantityBalance(cs, batch)*priceBalance(cs, batch),currency(st)))
                            WHERE NOT excludeBatch(inventory,batch) AND quantityBalance(cs, batch);    
                    }
                } ELSE {
                    quantityBalance(cs, Batch batch)
                        <- balanceB(batch, st, dt)
                        WHERE include(cs, skuLedger(batch, st)) AND NOT excludeBatch(inventory,batch) AND balanceB(batch, st, dt);
                    IF NOT isPrice(inventory) THEN {
                        IF explicitBatchLedger(st) THEN 
                            sumBalance(cs, Batch batch)
                                <- NUMERIC[18,4](sumB(batch, st, dt)) 
                                WHERE include(cs, skuLedger(batch, st)) AND NOT excludeBatch(inventory,batch) AND sumB(batch, st, dt) ;
                        ELSE
                            sumBalance(cs, Batch batch)
                                <- NUMERIC[18,4](round(quantityBalance(cs, batch)*priceBalance(cs, batch),currency(st))) 
                                WHERE include(cs, skuLedger(batch, st)) AND NOT excludeBatch(inventory,batch) AND quantityBalance(cs, batch);
                    } ELSE {
                        sumBalance(cs, Batch batch)
                            <- NUMERIC[18,4](round(quantityBalance(cs, batch)*priceBalance(cs, batch),currency(st)))
                            WHERE include(cs, skuLedger(batch, st)) AND NOT excludeBatch(inventory,batch) AND quantityBalance(cs, batch);    
                    }
                }
                    
            }
        }
        //для товаров по остаткам include(cs, Sku) появляется только после заполнения количества, поэтому в конце
        include(cs, Batch batch) <- include(cs, skuLedger(batch, st)) IF isBatch(cs); 
    }
    overRecalculateBalance(inventory);
    endTimeRecalculateBalance(inventory) <- currentDateTime();    
} CONFIRM IN inventoryAction;

overPriceBalance = ABSTRACT NUMERIC[16,4](Stock, Sku);
startTimeRecalculatePrice 'Цены старт' = DATA DATETIME(CollationSheet);
endTimeRecalculatePrice 'Цены конец' = DATA DATETIME(CollationSheet);

overRecalculatePrice ABSTRACT LIST (CollationSheet);

recalculatePrice 'Пересчитать цены в сличительной ведомости' (CollationSheet collationSheet)  { 
    startTimeRecalculatePrice(collationSheet) <- currentDateTime();
    
    FOR DATETIME dt = dateTime(collationSheet) AND Stock st = stock(collationSheet) NOINLINE DO {        

        IF isBatch (collationSheet) THEN {
            price(PageInventoryDetail pageInventoryDetail)
                <- OVERRIDE prevAccountPriceB(batch(pageInventoryDetail), st, dt), overPriceBalance(st, sku(pageInventoryDetail))
                WHERE collationSheet(pageInventoryDetail) == collationSheet;
        } ELSE {
            price(PageInventoryDetail pageInventoryDetail)
                <- OVERRIDE prevAccountPriceB(sku(pageInventoryDetail), st, dt), overPriceBalance(st, sku(pageInventoryDetail))
                WHERE collationSheet(pageInventoryDetail) == collationSheet;
        }
    
        IF isPartly(inventory(collationSheet)) AND isRemains(inventory(collationSheet)) THEN { 
            priceBalance(collationSheet, Sku sku)
                <- OVERRIDE prevAccountPriceB(sku, st, dt), overPriceBalance(st, sku)
                WHERE include(inventory(collationSheet), sku);
                
            IF NOT isPrice(inventory(collationSheet)) THEN {
                sumBalance(collationSheet, Sku sku)
                    <- NUMERIC[18,4](sumB(sku, st, dt))
                    WHERE include(inventory(collationSheet), sku);
                        
            } ELSE {
                sumBalance(collationSheet, Sku sku)
                    <- NUMERIC[18,4](round(quantityBalance(collationSheet, sku)*priceBalance(collationSheet, sku), currency(st)))
                    WHERE include(inventory(collationSheet), sku);
            }
            
            IF isBatch (collationSheet) THEN {
                priceBalance(collationSheet, Batch batch)
                    <- prevAccountPriceB(batch, st, dt)
                WHERE include(inventory(collationSheet), skuLedger(batch, st));
            }        
        }
        ELSE {
            IF isRemains(inventory(collationSheet)) THEN {
                priceBalance(collationSheet, Sku sku)
                    <- OVERRIDE prevAccountPriceB(sku, st, dt), overPriceBalance(st, sku);
                IF NOT isPrice(inventory(collationSheet)) THEN {
                    sumBalance(collationSheet, Sku sku)
                        <- NUMERIC[18,4](sumB(sku, st, dt));
                } ELSE {
                    sumBalance(collationSheet, Sku sku)
                        <- NUMERIC[18,4](round(quantityBalance(collationSheet, sku) * priceBalance(collationSheet, sku), currency(st)));
                }
                IF isBatch (collationSheet) THEN {
                    priceBalance(collationSheet, Batch batch)
                        <- prevAccountPriceB(batch, st, dt);
                }
                
            } ELSE {
                priceBalance(collationSheet, Sku sku)
                    <- OVERRIDE prevAccountPriceB(sku, st, dt), overPriceBalance(st, sku)
                        WHERE include(collationSheet, sku);
                    
                IF NOT isPrice(inventory(collationSheet)) THEN {
                    sumBalance(collationSheet, Sku sku)
                        <- NUMERIC[18,4](sumB(sku, st, dt))
                        WHERE include(collationSheet, sku);
                } ELSE {
                    sumBalance(collationSheet, Sku sku)
                        <- NUMERIC[18,4](round(quantityBalance(collationSheet, sku) * priceBalance(collationSheet, sku), currency(st)))
                        WHERE include(collationSheet, sku);
                }
                IF isBatch (collationSheet) THEN {
                    priceBalance(collationSheet, Batch batch)
                        <- prevAccountPriceB(batch, st, dt) WHERE include(collationSheet, skuLedger(batch, st));
                }
            }
        }
        
    }
    
    overRecalculatePrice(collationSheet);
    endTimeRecalculatePrice(collationSheet)<- currentDateTime();
} CONFIRM IN inventoryAction;

recalculatePrice 'Пересчитать цены по всей инвентаризации' (Inventory inventory)  { 
    FOR inventory(CollationSheet collationSheet) == inventory DO {
        EXEC recalculatePrice(collationSheet);
    }
} CONFIRM IN inventoryAction;

WHEN LOCAL SET(include(CollationSheet collationSheet, Sku sku)) DO {
    priceBalance(collationSheet, sku) <- OVERRIDE prevAccountPriceB(
                sku, stock(collationSheet), dateTime(collationSheet)), overPriceBalance(stock(collationSheet), sku);
}

// ------------------------------------ Итоги по сличительной ведомости (Sku) ------------------------------------ //

//sumBalanceCollationSheetSku 'Сумма по остаткам' (collationSheet, sku) =
//    NUMERIC[18,4](roundPriceCurrency(quantityBalanceCollationSheetSku(collationSheet, sku) * priceBalanceCollationSheetSku(collationSheet, sku), currencyStock(stockCollationSheet(collationSheet))));

quantitySkuPageInventoryDetail 'Кол-во по описи' (CollationSheet collationSheet) =
    GROUP SUM quantityPageInventoryDetail(collationSheet, Sku sku) IF include(collationSheet, sku) MATERIALIZED;

quantitySkuBalance 'Кол-во по остаткам' (CollationSheet collationSheet) =
    GROUP SUM quantityBalance(collationSheet, Sku sku) IF include(collationSheet, sku) MATERIALIZED;
sumSkuBalance 'Сумма по остаткам' (CollationSheet collationSheet) =  GROUP SUM sumBalance(collationSheet, Sku sku) IF include(collationSheet, sku) MATERIALIZED;

quantityShortage 'Кол-во недостачи / излишка' (CollationSheet collationSheet, Sku sku) =
    quantityBalance(collationSheet, sku) (-) quantityPageInventoryDetail(collationSheet, sku) MATERIALIZED;
sumShortage 'Сумма недостачи / излишка' (CollationSheet collationSheet, Sku sku) =
    sumBalance(collationSheet, sku) (-) sumPageInventoryDetail(collationSheet, sku) MATERIALIZED;

quantitySkuShortage 'Кол-во недостачи / излишка' (CollationSheet collationSheet) =
    GROUP 
        SUM quantityShortage(collationSheet, Sku sku) IF include(collationSheet, sku) MATERIALIZED;
sumShortageSku 'Сумма недостачи / излишка' (CollationSheet collationSheet) = 
    GROUP 
        SUM sumShortage(collationSheet, Sku sku) IF include(collationSheet, sku) MATERIALIZED;
//-- Отдельно излишки, отдельно недостача
positiveQuantitySkuShortage 'Кол-во недостачи' (CollationSheet collationSheet) =
    GROUP 
        SUM quantityShortage(collationSheet, Sku sku) IF include(collationSheet, sku) AND quantityShortage(collationSheet, sku)>0 MATERIALIZED;
positiveSumShortageSku 'Сумма недостачи' (CollationSheet collationSheet) = 
    GROUP 
        SUM sumShortage(collationSheet, Sku sku) IF include(collationSheet, sku) AND sumShortage(collationSheet, sku)>0 MATERIALIZED;
negativeQuantitySkuShortage 'Кол-во излишки' (CollationSheet collationSheet) =
    GROUP 
        SUM quantityShortage(collationSheet, Sku sku) IF include(collationSheet, sku) AND quantityShortage(collationSheet, sku)<0 MATERIALIZED;
negativeSumShortageSku 'Сумма излишки' (CollationSheet collationSheet) = 
    GROUP 
        SUM sumShortage(collationSheet, Sku sku) IF include(collationSheet, sku) AND sumShortage(collationSheet, sku)<0 MATERIALIZED;


sumItemSkuBalance 'Сумма по остаткам, товар' (CollationSheet collationSheet) = GROUP SUM sumBalance(collationSheet, Sku sku) 
    IF include(collationSheet, sku) IF isItem(sku) MATERIALIZED;
sumContainerSkuBalance 'Сумма по остаткам, тара' (CollationSheet collationSheet) = GROUP SUM sumBalance(collationSheet, Sku sku) 
    IF include(collationSheet, sku) IF isContainer(sku) MATERIALIZED;

sumItemSkuPageInventoryDetail 'Сумма по факту, товар' (CollationSheet collationSheet) = GROUP SUM sumPageInventoryDetail(collationSheet, Sku sku) 
    IF include(collationSheet, sku) IF isItem(sku) MATERIALIZED;
sumContainerSkuPageInventoryDetail 'Сумма по факту, тара' (CollationSheet collationSheet) = GROUP SUM sumPageInventoryDetail(collationSheet, Sku sku) 
    IF include(collationSheet, sku) IF isContainer(sku) MATERIALIZED;

sumItemSkuShortage 'Сумма недостачи / излишка, товар' (CollationSheet collationSheet) = GROUP SUM sumShortage(collationSheet, Sku sku) 
    IF include(collationSheet, sku) IF isItem(sku) MATERIALIZED;
sumContainerSkuShortage 'Сумма недостачи / излишка, тара' (CollationSheet collationSheet) = GROUP SUM sumShortage(collationSheet, Sku sku) 
    IF include(collationSheet, sku) IF isContainer(sku) MATERIALIZED;

// ------------------------------------ Итоги по сличительной ведомости (Batch) ------------------------------------ //

//sumBalance 'Сумма по остаткам' (CollationSheet collationSheet, Batch batch) = explicitBatchLedger
//    NUMERIC[18,4](round(quantityBalance(collationSheet, batch) * priceBalance(collationSheet, batch), currency(stock(collationSheet))));
      
quantityBatchBalance 'Кол-во по остаткам' (CollationSheet collationSheet) =
    GROUP SUM quantityBalance(collationSheet, Batch batch) IF include(collationSheet, batch) MATERIALIZED;
sumBatchBalance 'Сумма по остаткам' (CollationSheet collationSheet) =  GROUP SUM sumBalance(collationSheet, Batch batch) 
    IF include(collationSheet, batch) MATERIALIZED;


quantityShortage 'Кол-во недостачи / излишка' (CollationSheet collationSheet, Batch batch) =
    quantityBalance(collationSheet, batch) (-) quantityPageInventoryDetail(collationSheet, batch) MATERIALIZED;
sumShortage 'Сумма недостачи / излишка' (CollationSheet collationSheet, Batch batch) =
    sumBalance(collationSheet, batch) (-) sumPageInventoryDetail(collationSheet, batch) MATERIALIZED;
    
costSumShortage 'Сумма недостачи / излишка(себестоимость)' (CollationSheet collationSheet, Batch batch) =
    quantityShortage(collationSheet, batch) * cost(batch); 

quantityBatchShortage 'Кол-во недостачи / излишка' (CollationSheet collationSheet) =
    GROUP SUM quantityShortage(collationSheet, Batch batch) IF include(collationSheet, batch) MATERIALIZED;
sumBatchShortage 'Сумма недостачи / излишка' (CollationSheet collationSheet) = GROUP SUM sumShortage(collationSheet, Batch batch) 
    IF include(collationSheet, batch) MATERIALIZED;
    
//-- Отдельно излишки, отдельно недостача    
positiveQuantityBatchShortage 'Кол-во недостачи' (CollationSheet collationSheet) =
    GROUP
        SUM quantityShortage(collationSheet, Batch batch) IF include(collationSheet, batch) AND quantityShortage(collationSheet, batch) >0 MATERIALIZED;
positiveSumBatchShortage 'Сумма недостачи' (CollationSheet collationSheet) = GROUP
    SUM sumShortage(collationSheet, Batch batch) 
    IF include(collationSheet, batch) AND sumShortage(collationSheet, batch) >0 MATERIALIZED;

negativeQuantityBatchShortage 'Кол-во излишки' (CollationSheet collationSheet) =
    GROUP
        SUM quantityShortage(collationSheet, Batch batch) IF include(collationSheet, batch) AND quantityShortage(collationSheet, batch) <0 MATERIALIZED;
negativeSumBatchShortage 'Сумма излишки' (CollationSheet collationSheet) = GROUP
        SUM sumShortage(collationSheet, Batch batch) 
    IF include(collationSheet, batch) AND sumShortage(collationSheet, batch) <0 MATERIALIZED;

sumItemBatchBalance 'Сумма по остаткам, товар' (CollationSheet collationSheet) = GROUP SUM sumBalance(collationSheet, Batch batch) 
    IF include(collationSheet, batch) IF NOT isContainer(batch) MATERIALIZED;
sumContainerBatchBalance 'Сумма по остаткам, тара' (CollationSheet collationSheet) = GROUP SUM sumBalance(collationSheet, Batch batch) 
    IF include(collationSheet, batch) IF isContainer(batch) MATERIALIZED;

sumItemBatchPageInventoryDetail 'Сумма по факту, товар' (CollationSheet collationSheet) = GROUP SUM sumPageInventoryDetail(collationSheet, Batch batch) 
    IF include(collationSheet, batch) IF NOT isContainer(batch) MATERIALIZED;
sumContainerBatchPageInventoryDetail 'Сумма по факту, тара' (CollationSheet collationSheet) = GROUP SUM sumPageInventoryDetail(collationSheet, Batch batch) 
    IF include(collationSheet, batch) IF isContainer(batch) MATERIALIZED;

sumItemBatchShortage 'Сумма недостачи / излишка, товар' (CollationSheet collationSheet) = GROUP SUM sumShortage(collationSheet, Batch batch) 
    IF include(collationSheet, batch) IF NOT isContainer(batch) MATERIALIZED;
sumContainerBatchShortage 'Сумма недостачи / излишка, тара' (CollationSheet collationSheet) = GROUP SUM sumShortage(collationSheet, Batch batch) 
    IF include(collationSheet, batch) IF isContainer(batch) MATERIALIZED;


//---------------------------------- Итоги сличительной ведомости с учетом типа инвентаризации ----------------------------//

quantityBalance 'Кол-во по остаткам' (CollationSheet collationSheet) = IF isBatch(collationSheet)
                                                                        THEN quantityBatchBalance(collationSheet)
                                                                        ELSE quantitySkuBalance(collationSheet);
sumBalance 'Сумма по остаткам' (CollationSheet collationSheet) = IF isBatch(collationSheet)
                                                                    THEN sumBatchBalance(collationSheet)
                                                                    ELSE sumSkuBalance(collationSheet);

quantityShortage 'Кол-во недостачи / излишка' (CollationSheet collationSheet) = IF isBatch(collationSheet)
                                                                        THEN quantityBatchShortage(collationSheet)
                                                                        ELSE quantitySkuShortage(collationSheet);
overSumManageShortage= ABSTRACT NUMERIC[18,4](CollationSheet);                                                                        
sumManageShortage 'Сумма недостачи / излишка' (CollationSheet collationSheet) = (IF isBatch(collationSheet)
                                                                    THEN sumBatchShortage(collationSheet)
                                                                    ELSE sumShortageSku(collationSheet)) (+) overSumManageShortage(collationSheet);
                                                                    
positiveQuantityShortage 'Кол-во недостачи' (CollationSheet collationSheet) = IF isBatch(collationSheet)
                                                                        THEN positiveQuantityBatchShortage(collationSheet)
                                                                        ELSE positiveQuantitySkuShortage(collationSheet);
positiveSumShortage 'Сумма недостачи' (CollationSheet collationSheet) = IF isBatch(collationSheet)
                                                                    THEN positiveSumBatchShortage(collationSheet)
                                                                    ELSE positiveSumShortageSku(collationSheet);                                                                    
                                                                    
negativeQuantityShortage 'Кол-во излишки' (CollationSheet collationSheet) = IF isBatch(collationSheet)
                                                                        THEN negativeQuantityBatchShortage(collationSheet)
                                                                        ELSE negativeQuantitySkuShortage(collationSheet);
negativeSumShortage 'Сумма излишки' (CollationSheet collationSheet) = IF isBatch(collationSheet)
                                                                    THEN negativeSumBatchShortage(collationSheet)
                                                                    ELSE negativeSumShortageSku(collationSheet);

sumItemBalance 'Сумма по остаткам, товар' (CollationSheet collationSheet) = IF isBatch(collationSheet)
                                                                            THEN sumItemBatchBalance(collationSheet)
                                                                            ELSE sumItemSkuBalance(collationSheet);
sumContainerBalance 'Сумма по остаткам, тара' (CollationSheet collationSheet) = IF isBatch(collationSheet)
                                                                                THEN sumContainerBatchBalance(collationSheet)
                                                                                ELSE sumContainerSkuBalance(collationSheet);

sumItemPageInventoryDetail 'Сумма по факту, товар' (CollationSheet collationSheet) = IF isBatch(collationSheet)
                                                                                        THEN sumItemBatchPageInventoryDetail(collationSheet)
                                                                                        ELSE sumItemSkuPageInventoryDetail(collationSheet);
sumContainerPageInventoryDetail 'Сумма по факту, тара' (CollationSheet collationSheet) = IF isBatch(collationSheet)
                                                                                            THEN sumContainerBatchPageInventoryDetail(collationSheet)
                                                                                            ELSE sumContainerSkuPageInventoryDetail(collationSheet);

sumItemManageShortage 'Сумма недостачи / излишка, товар' (CollationSheet collationSheet) = IF isBatch(collationSheet)
                                                                            THEN sumItemBatchShortage(collationSheet)
                                                                            ELSE sumItemSkuShortage(collationSheet);
sumContainerManageShortage 'Сумма недостачи / излишка, тара' (CollationSheet collationSheet) = IF isBatch(collationSheet)
                                                                                THEN sumContainerBatchShortage(collationSheet)
                                                                                ELSE sumContainerSkuShortage(collationSheet);

// Объединение товаров                                                                               

overReplace(Sku od, Sku d) + { 
    quantityBalance(CollationSheet collationSheet, d) <- quantityBalance(collationSheet, d) (+) quantityBalance(collationSheet, od)
        WHERE quantityBalance(collationSheet, od) OR PREV(countPageInventoryDetail(collationSheet, od));

    priceBalance(CollationSheet collationSheet, d)
        <- OVERRIDE prevAccountPriceB(od, stock(collationSheet), dateTime(collationSheet)), overPriceBalance(stock(collationSheet), d)
        WHERE priceBalance(collationSheet, od) OR PREV(countPageInventoryDetail(collationSheet, od));
        
    sumBalance(CollationSheet collationSheet, d)
        <- sumBalance(collationSheet, d) (+) sumBalance(collationSheet, od)
        WHERE (sumBalance(collationSheet, od) OR PREV(countPageInventoryDetail(collationSheet, od)));     
    
    include(CollationSheet collationSheet, Batch batch)<-PREV(include(collationSheet, PREV(sku(batch)))) WHERE PREV(sku(batch)) = od; 
    executeLocalEvents();
    
    price(PageInventoryDetail pd) <- prevAccountPriceB(od, stock(pd), dateTime(pd)) WHERE PREV(sku(pd)) == od AND NOT batch(pd);
    price(PageInventoryDetail pd) <- prevAccountPriceB(batch(pd), stock(pd), dateTime(pd)) WHERE PREV(sku(pd)) == od AND batch(pd);
}                                                                                

//-------------------------------------- Проведение по товарному отчету ----------------------------------------------------//

sumItemAccountB 'Сумма по ТО, товар' = DATA NUMERIC[18,4] (CollationSheet);
sumContainerAccountB 'Сумма по ТО, тара' = DATA NUMERIC[18,4] (CollationSheet);
recalculateSumAccountB 'Пересчитать остатки по ТО'(CollationSheet c)  { 
    sumItemAccountB(c) <- prevSumItemAccountBDocumentLedger(stock(c), dateTime(c));
    sumContainerAccountB (c) <- prevSumContainerAccountBDocumentLedger(stock(c), dateTime(c));
}

WHEN LOCAL CHANGED(stock(CollationSheet c)) OR CHANGED(dateTime(c)) DO
    recalculateSumAccountB(c);

overRecalculateBalance (Inventory i) + { 
    FOR inventory(CollationSheet c) == i DO 
        recalculateSumAccountB(c);
}

sumItemAccountShortage = sumItemAccountB(CollationSheet collationSheet) (-) 
                                          sumItemPageInventoryDetail (collationSheet); 
                                          
sumContainerAccountShortage = sumContainerAccountB(CollationSheet collationSheet) (-) sumContainerPageInventoryDetail (collationSheet); 

skipStockDocumentLedger 'Не проводить по товарному отчету'  = DATA BOOLEAN (Inventory) IN documentPrm;
skipStockDocumentLedger 'Не проводить по товарному отчету' = DATA BOOLEAN (Operation);

skipSkuLedger 'Не изменять остатки'  = DATA BOOLEAN (Inventory) IN documentPrm;
skipSkuLedger 'Не изменять остатки' = DATA BOOLEAN (Operation);

EXTEND FORM operation
     PROPERTIES(o) skipStockDocumentLedger, skipSkuLedger
 ;
DESIGN operation {
    paramsContainer {
        MOVE PROPERTY(skipStockDocumentLedger(o));
        MOVE PROPERTY(skipSkuLedger(o));
    }
}

skipStockDocumentLedger (CollationSheet cs) = skipStockDocumentLedger(inventory(cs));
skip(CollationSheet l) += skipStockDocumentLedger(l);

skipSkuLedger (CollationSheet cs) = skipSkuLedger(inventory(cs));

isShortageStockDocument 'Считать недостачу из товарного отчета' = DATA BOOLEAN (Inventory) IN documentPrm;

isShortageStockDocument 'Считать недостачу из товарного отчета' = DATA BOOLEAN (Operation);

EXTEND FORM operation
     PROPERTIES(o) isShortageStockDocument
 ;
DESIGN operation {
    paramsContainer {
        MOVE PROPERTY(isShortageStockDocument(o));
    }
}

showAccountSums = typeOfAddition(CollationSheet c)==TypeOfAddition.remains AND isShortageStockDocument(inventory(c)) MATERIALIZED;

accountSumItemBalance = IF showAccountSums(CollationSheet collationSheet)
                                                            THEN sumItemAccountB(collationSheet)
                                                            ELSE sumItemBalance(collationSheet);
                                                          
accountSumContainerBalance = IF showAccountSums(CollationSheet collationSheet)
                                                                THEN sumContainerAccountB(collationSheet)
                                                                ELSE sumContainerBalance(collationSheet);
                                                                                                                          
accountSumBalance = IF showAccountSums(CollationSheet collationSheet)
                                                          THEN accountSumItemBalance(collationSheet) (+) accountSumContainerBalance(collationSheet)
                                                          ELSE sumBalance(collationSheet);                                                                                                                          

overSumItemShortage = ABSTRACT NUMERIC[18,4](CollationSheet);
sumItemShortage 'Сумма недостачи / излишка, товар' = (IF showAccountSums(CollationSheet collationSheet)
                                                            THEN sumItemAccountShortage(collationSheet)
                                                            ELSE sumItemManageShortage(collationSheet) (+) overSumItemShortage(collationSheet)) ;
                                                            
sumContainerShortage 'Сумма недостачи / излишка, тара' = IF showAccountSums(CollationSheet collationSheet)
                                                            THEN sumContainerAccountShortage(collationSheet)
                                                            ELSE sumContainerManageShortage(collationSheet);

sumAccountShortage 'Сумма недостачи / излишка по ТО' = sumItemShortage(CollationSheet collationSheet) (+) sumContainerShortage(collationSheet);                                                            
sumShortage 'Сумма недостачи / излишка'  =  IF showAccountSums(CollationSheet collationSheet)
                                                                    THEN sumAccountShortage(collationSheet)
                                                                    ELSE sumManageShortage(collationSheet);                                                           

@implementStockDocumentLedgerOut(CollationSheet, stock);

overSumItem = ABSTRACT NUMERIC[18,4](CollationSheet);

type(CollationSheet l) += STRING[50]('Инвентаризация') IF l IS CollationSheet;
sumItem (CollationSheet ledger) += sumItemShortage(ledger) (+) overSumItem(ledger);
sumContainer (CollationSheet ledger) += sumContainerShortage(ledger);

//---------------------------- Генерация сличительных ведомостей ----------------------------//

// автоматическое создание сличительной ведомости (товары из описей) //
includeRegister(Stock stock, Inventory inventory) =
    include(stock, inventory) AND typeOfAddition(stock, inventory) == TypeOfAddition.register;

// ручная агрегация (AGGR) так как stock и inventory одинаковый для всех
registerCollationSheet (stock, inventory) =
    GROUP AGGR RegisterCollationSheet registerCollationSheet
    WHERE registerCollationSheet IS RegisterCollationSheet BY stock(registerCollationSheet), inventory(registerCollationSheet);

includeRegister(Stock stock, Inventory inventory) => registerCollationSheet(stock, inventory) RESOLVE LEFT;

is(RegisterCollationSheet registerCollationSheet) = registerCollationSheet IS RegisterCollationSheet;
is(RegisterCollationSheet registerCollationSheet) => includeRegister(stock(registerCollationSheet), inventory(registerCollationSheet)) RESOLVE RIGHT;

// автоматическое создание сличительной ведомости (по остаткам) //
includeRemains(Stock stock, Inventory inventory) =
    include(stock, inventory) AND typeOfAddition(stock, inventory) == TypeOfAddition.remains;

// ручная агрегация (AGGR) так как stock и inventory одинаковый для всех
remainsCollationSheet (stock, inventory) =
    GROUP AGGR RemainsCollationSheet remainsCollationSheet
    WHERE remainsCollationSheet IS RemainsCollationSheet BY stock(remainsCollationSheet), inventory(remainsCollationSheet);

includeRemains(Stock stock, Inventory inventory) => remainsCollationSheet(stock, inventory) RESOLVE LEFT;

is(RemainsCollationSheet remainsCollationSheet) = remainsCollationSheet IS RemainsCollationSheet;
is(RemainsCollationSheet remainsCollationSheet) => includeRemains(stock(remainsCollationSheet), inventory(remainsCollationSheet)) RESOLVE RIGHT;

// автоматическое создание сличительной ведомости (по множеству товаров) //
includeMany(Stock stock, Inventory inventory) =
    include(stock, inventory) AND typeOfAddition(stock, inventory) == TypeOfAddition.many;

// ручная агрегация (AGGR) так как stock и inventory одинаковый для всех
manyCollationSheet (stock, inventory) =
    GROUP AGGR ManyCollationSheet manyCollationSheet
    WHERE manyCollationSheet IS ManyCollationSheet BY stock(manyCollationSheet), inventory(manyCollationSheet);

includeMany(Stock stock, Inventory inventory) => manyCollationSheet(stock, inventory) RESOLVE LEFT;

is(ManyCollationSheet manyCollationSheet) = manyCollationSheet IS ManyCollationSheet;
is(ManyCollationSheet manyCollationSheet) => includeMany(stock(manyCollationSheet), inventory(manyCollationSheet)) RESOLVE RIGHT;

//---------------------------- Изменение остатка инвентаризации sku----------------------------//

CLASS ABSTRACT InventorySkuDetail 'Изменение остатка инвентаризации' : DataSkuLedger;
TABLE inventorySkuDetail (InventorySkuDetail);

CLASS OutInventorySkuDetail 'Недостача инвентаризации' : InventorySkuDetail;
CLASS InInventorySkuDetail 'Излишки инвентаризации' : InventorySkuDetail;

needToOutLedger (CollationSheet collationSheet, Sku sku) = 
    (quantityShortage(collationSheet, sku) > 0  OR (sumShortage(collationSheet, sku) > 0 AND NOT quantityShortage(collationSheet, sku)))
    AND include(collationSheet, sku)
    AND NOT skipSkuLedger(collationSheet) 
    AND NOT isBatch(collationSheet)
    AND isPosted(collationSheet);

needToInLedger (CollationSheet collationSheet, Sku sku) = (quantityShortage(collationSheet, sku) < 0 OR (sumShortage(collationSheet, sku) < 0 AND NOT quantityShortage(collationSheet, sku)))
    AND include(collationSheet, sku) 
    AND NOT skipSkuLedger(collationSheet) 
    AND NOT isBatch(collationSheet)
    AND isPosted(collationSheet);

outInventorySkuDetail = AGGR OutInventorySkuDetail WHERE needToOutLedger(CollationSheet collationSheet, Sku sku) MATERIALIZED INDEXED;
inInventorySkuDetail = AGGR InInventorySkuDetail WHERE needToInLedger(CollationSheet collationSheet, Sku sku) MATERIALIZED INDEXED;

collationSheet(InventorySkuDetail inventorySkuDetail) = MULTI collationSheet[OutInventorySkuDetail](inventorySkuDetail),
                                                             collationSheet[InInventorySkuDetail](inventorySkuDetail);

inventory(InventorySkuDetail inventorySkuDetail) = inventory(collationSheet(inventorySkuDetail)) MATERIALIZED;

@defineDocumentDetailTime(inventory, InventorySkuDetail);
@defineDocumentDetailPosted(inventory, InventorySkuDetail);

@defineDocumentDetailClosed(inventory, InventorySkuDetail);

@defineDocumentDetailStock(collationSheet, inventorySkuDetail, stock, stock, 'Склад');
stock(InInventorySkuDetail detail) = stock[InventorySkuDetail](detail) IF detail IS InInventorySkuDetail;
stock(OutInventorySkuDetail detail) = stock[InventorySkuDetail](detail) IF detail IS OutInventorySkuDetail;

quantity (OutInventorySkuDetail inventorySkuDetail) = quantityShortage(collationSheet(inventorySkuDetail), sku(inventorySkuDetail));
quantity (InInventorySkuDetail inventorySkuDetail) = -quantityShortage(collationSheet(inventorySkuDetail), sku(inventorySkuDetail));

sum (OutInventorySkuDetail inventorySkuDetail) = sumShortage(collationSheet(inventorySkuDetail), sku(inventorySkuDetail));
sum (InInventorySkuDetail inventorySkuDetail) = -sumShortage(collationSheet(inventorySkuDetail), sku(inventorySkuDetail));

sku(InventorySkuDetail inventorySkuDetail) = MULTI sku[OutInventorySkuDetail](inventorySkuDetail),
                                                  sku[InInventorySkuDetail](inventorySkuDetail) MATERIALIZED;
nameSku 'Товар' (InventorySkuDetail inventorySkuDetail) = name(sku(inventorySkuDetail)) CHARWIDTH 15;
idBarcode 'Штрихкод' (InventorySkuDetail inventorySkuDetail) =  idBarcode(sku(inventorySkuDetail));

quantity 'Кол-во недостачи / излишка' (InventorySkuDetail inventorySkuDetail) = quantityShortage(collationSheet(inventorySkuDetail), sku(inventorySkuDetail)) MATERIALIZED;
sum 'Сумма недостачи / излишка' (InventorySkuDetail inventorySkuDetail) = sumShortage(collationSheet(inventorySkuDetail), sku(inventorySkuDetail)) MATERIALIZED;

description 'Название документа' (OutInventorySkuDetail inventorySkuDetail) =
    'Недостача по инвентаризации ' + name(collationSheet(inventorySkuDetail)) + ' от ' + date(collationSheet(inventorySkuDetail));

description 'Название документа' (InInventorySkuDetail inventorySkuDetail) =
    'Излишек по инвентаризации ' + name(collationSheet(inventorySkuDetail)) + ' от ' + date(collationSheet(inventorySkuDetail));

description 'Название документа' (InventorySkuDetail inventorySkuDetail) = OVERRIDE description[InInventorySkuDetail](inventorySkuDetail), description[OutInventorySkuDetail](inventorySkuDetail);

@implementSkuLedger(inventorySkuDetail, sku, stock);

EXTEND CLASS OutInventorySkuDetail : OutFIFOSkuLedger;
quantity (OutInventorySkuDetail ledger) += quantity(ledger);
sum (OutInventorySkuDetail ledger) += sum(ledger);
stockDocumentLedger(OutInventorySkuDetail ledger) += collationSheet(ledger);

EXTEND CLASS InInventorySkuDetail : InLIFOSkuLedger;
quantity (InInventorySkuDetail ledger) += quantity(ledger);
sum (InInventorySkuDetail ledger) += sum(ledger);
stockDocumentLedger(InInventorySkuDetail ledger) += collationSheet(ledger);

// Показываем форму по каким партиям произошло расписывание

currentBalance 'Текущий остаток' (CollationSheet cs, Batch b) = currentBalance(b, stock(cs));

FORM collationSheetBatches 'Партии'
    OBJECTS cs = CollationSheet PANEL 
    OBJECTS s = Sku PANEL
    
    OBJECTS d = InventorySkuDetail GRID
    PROPERTIES(d) READONLY dateTime, description, quantity, costed
    FILTERS sku(d) == s, collationSheet(d) == cs
    
    OBJECTS b = Batch
    PROPERTIES(b) READONLY dateTime, name
    PROPERTIES(cs, b) READONLY currentBalance
    PROPERTIES(d, b) cost
    FILTERS sku(b) == s,
            prevCountLedger(b, stock(cs))
    ORDERS dateTime(b)
;

DESIGN collationSheetBatches {
    BOX(b) {
        fill = 2;
    }
}

showCost 'Расписывание по партиям' (CollationSheet cs, Sku s)  { 
    SHOW collationSheetBatches OBJECTS cs = cs, s = s ;
}

//---------------------------- Изменение остатка инвентаризации batch----------------------------//

CLASS ABSTRACT InventoryBatchDetail 'Изменение остатка инвентаризации' : DataSkuLedger;
TABLE inventoryBatchDetail (InventoryBatchDetail);

CLASS OutInventoryBatchDetail 'Недостача инвентаризации' : InventoryBatchDetail;
CLASS InInventoryBatchDetail 'Излишки инвентаризации' : InventoryBatchDetail;

needToOutLedger (CollationSheet collationSheet, Batch batch) = 
    (quantityShortage(collationSheet, batch) > 0  OR (sumShortage(collationSheet, batch) > 0 AND NOT quantityShortage(collationSheet, batch)))
    AND include(collationSheet, batch) 
    AND NOT skipSkuLedger(collationSheet) 
    AND isBatch(collationSheet)
    AND isPosted(collationSheet); 

needToInLedger (CollationSheet collationSheet, Batch batch) =
    (quantityShortage(collationSheet, batch) < 0 OR (sumShortage(collationSheet, batch) < 0 AND NOT quantityShortage(collationSheet, batch)))
    AND include(collationSheet, batch) 
    AND NOT skipSkuLedger(collationSheet) 
    AND isBatch(collationSheet)
    AND isPosted(collationSheet); 

outInventoryBatchDetail = AGGR OutInventoryBatchDetail WHERE needToOutLedger(CollationSheet collationSheet, Batch batch) MATERIALIZED INDEXED;
inInventoryBatchDetail = AGGR InInventoryBatchDetail WHERE needToInLedger(CollationSheet collationSheet, Batch batch) MATERIALIZED INDEXED;

collationSheet(InventoryBatchDetail inventoryBatchDetail) = MULTI collationSheet[OutInventoryBatchDetail](inventoryBatchDetail),
                                                                 collationSheet[InInventoryBatchDetail](inventoryBatchDetail);

inventory(InventoryBatchDetail inventoryBatchDetail) = inventory(collationSheet(inventoryBatchDetail)) MATERIALIZED;

@defineDocumentDetailTime(inventory, InventoryBatchDetail);
@defineDocumentDetailPosted(inventory, InventoryBatchDetail);

@defineDocumentDetailClosed(inventory, InventoryBatchDetail);

@defineDocumentDetailStock(collationSheet, inventoryBatchDetail, stock, stock, 'Склад');
stock(InInventoryBatchDetail detail) = stock[InventoryBatchDetail](detail) IF detail IS InInventoryBatchDetail;
stock(OutInventoryBatchDetail detail) = stock[InventoryBatchDetail](detail) IF detail IS OutInventoryBatchDetail;

quantity (OutInventoryBatchDetail inventoryBatchDetail) = quantityShortage(collationSheet(inventoryBatchDetail), batch(inventoryBatchDetail));
quantity (InInventoryBatchDetail inventoryBatchDetail) = -quantityShortage(collationSheet(inventoryBatchDetail), batch(inventoryBatchDetail));

sum (OutInventoryBatchDetail inventoryBatchDetail) = sumShortage(collationSheet(inventoryBatchDetail), batch(inventoryBatchDetail));
sum (InInventoryBatchDetail inventoryBatchDetail) = -sumShortage(collationSheet(inventoryBatchDetail), batch(inventoryBatchDetail));

batch(InventoryBatchDetail inventoryBatchDetail) = MULTI batch[OutInventoryBatchDetail](inventoryBatchDetail),
                                                        batch[InInventoryBatchDetail](inventoryBatchDetail) MATERIALIZED;
nameBatch 'Партия' (InventoryBatchDetail inventoryBatchDetail) = name(batch(inventoryBatchDetail)) CHARWIDTH 15;

sku (InventoryBatchDetail inventoryBatchDetail) = sku(batch(inventoryBatchDetail));
nameSku 'Товар' (InventoryBatchDetail inventoryBatchDetail) = nameSku(batch(inventoryBatchDetail)) CHARWIDTH 15;
idBarcode 'Штрихкод' (InventoryBatchDetail inventoryBatchDetail) =  idBarcode(sku(inventoryBatchDetail));

quantity 'Кол-во недостачи / излишка' (InventoryBatchDetail inventoryBatchDetail) = quantityShortage(collationSheet(inventoryBatchDetail), batch(inventoryBatchDetail)) MATERIALIZED;
sum 'Сумма недостачи / излишка' (InventoryBatchDetail inventoryBatchDetail) = sumShortage(collationSheet(inventoryBatchDetail), batch(inventoryBatchDetail)) MATERIALIZED;
costSum 'Сумма недостачи / излишка(себестоимость)' (InventoryBatchDetail inventoryBatchDetail) = costSumShortage(collationSheet(inventoryBatchDetail), batch(inventoryBatchDetail)) MATERIALIZED;

includeBatch(InventoryBatchDetail inventoryBatchDetail) = include(collationSheet(inventoryBatchDetail), batch(inventoryBatchDetail)) MATERIALIZED;

description 'Название документа' (OutInventoryBatchDetail inventoryBatchDetail) =
    'Недостача по инвентаризации ' + name(collationSheet(inventoryBatchDetail)) + ' от ' + date(collationSheet(inventoryBatchDetail));

description 'Название документа' (InInventoryBatchDetail inventoryBatchDetail) =
    'Излишек по инвентаризации ' + name(collationSheet(inventoryBatchDetail)) + ' от ' + date(collationSheet(inventoryBatchDetail));

description 'Название документа' (InventoryBatchDetail inventoryBatchDetail) = OVERRIDE description[InInventoryBatchDetail](inventoryBatchDetail), description[OutInventoryBatchDetail](inventoryBatchDetail);

@implementSkuLedger(inventoryBatchDetail, sku, stock);
changed(InventoryBatchDetail ledger) += CHANGED(batch(ledger));
batch(InventoryBatchDetail ledger) += batch(ledger);

EXTEND CLASS OutInventoryBatchDetail : OutFIFOSkuLedger;
quantity (OutInventoryBatchDetail ledger) += quantity(ledger);
sum (OutInventoryBatchDetail ledger) += sum(ledger);
stockDocumentLedger(OutInventoryBatchDetail ledger) += collationSheet(ledger);

EXTEND CLASS InInventoryBatchDetail : InLIFOSkuLedger;
quantity (InInventoryBatchDetail ledger) += quantity(ledger);
sum (InInventoryBatchDetail ledger) += sum(ledger);
stockDocumentLedger(InInventoryBatchDetail ledger) += collationSheet(ledger);

//------------------------------------ Выбор складов для инвентаризации------------------------------------------//

FORM dialogStockInventory 'Выбор складов для инвентаризации'
    OBJECTS in=Inventory PANEL
    PROPERTIES (in) READONLY series, number, name, date

    TREE stockTree a = BPSTRING[3], sg = StockGroup PARENT parent(sg)
    PROPERTIES READONLY VALUE(a), sgTreeName = name(sg)
    ORDERS sgTreeName
    FILTERS stringEqualsAll(a)

    OBJECTS ts=Stock
    PROPERTIES (ts) READONLY id SHOWIF showIDs(), tsTreeName = name
    PROPERTIES (ts, in)      include, nameUserTypeOfAddition
    FILTERS isParent(sg, ts) OR ts IS Stock AND NOT sg 
    
    FILTERGROUP filters
        FILTER 'Только склады компании' isCompany(ts) 'F10' DEFAULT
    FILTERGROUP inactiveStock FILTER 'Активный' active(ts) 'ctrl F10' DEFAULT
    ORDERS tsTreeName
;
@extendFormFilterStockAccess(ts, dialogStockInventory);
@extendFormFilterStockGroupAccess(sg, dialogStockInventory);

DESIGN dialogStockInventory {
    BOX {
        size = (1024, 768);
        MOVE BOX(in) {
            PANEL(in) {
                type = CONTAINERH;
            }
        }
        NEW stockCase {
            fill = 1;
            type = SPLITH;
            MOVE BOX(TREE stockTree);
            MOVE BOX(ts) {
                fill = 3;
            }
        }
        MOVE TOOLBARBOX;
    }
}

dialogStock 'Выбрать склады для инвентаризации' (Inventory inventory) 
    { SHOW dialogStockInventory OBJECTS in = inventory DOCKED; }

//------------------------------------ Выбор SKU для сличительной ведомости ------------------------------------------//

overDialogSkuCollationSheetFilter = ABSTRACT BOOLEAN (CollationSheet, Sku);

FORM dialogSkuCollationSheet 'Выбор SKU для сличительной ведомости'
    OBJECTS cs=ManyCollationSheet PANEL
    PROPERTIES (cs) READONLY name, nameTypeOfAddition

    TREE treeGroup g=SkuGroup PARENT parent(g)
    PROPERTIES READONLY order(g), name(g)
    ORDERS order(g), name(g)
    FILTERGROUP inactive FILTER 'Активные' active(g) 'F5' DEFAULT

    OBJECTS i=Sku
    PROPERTIES(i) READONLY idBarcode, name, shortNameUOM

    PROPERTIES(cs, i) in

    FILTERS isParent(g, i),
            NOT overDialogSkuCollationSheetFilter(cs, i)
    ORDERS name(i)
;

DESIGN dialogSkuCollationSheet {
    MOVE BOX(cs);
    NEW pane {
        fill = 1;
        type = SPLITH;
        MOVE BOX(TREE treeGroup);
        MOVE BOX(i) {
            fill = 3;
        }
    }
    MOVE TOOLBARBOX;
}

dialogSku 'Добавить товар'(ManyCollationSheet collationSheet)  { 
    IF collationSheet IS ManyCollationSheet THEN
        SHOW dialogSkuCollationSheet OBJECTS cs = collationSheet ;
} TOOLBAR;

//------------------------------------ Формы редактирования описей ------------------------------------------//

createPage 'Создать страницу описи с остатками'  (ListInventory listInventory)  { 
    DIALOG dialogSkuGroup DO {    
        NEW p = PageInventory {
            listInventory(p) <- listInventory;
            IF isBatch(inventory(listInventory)) THEN {
                FOR (NUMERIC[16,5] cnt == balanceB(Batch b, stock(listInventory), dateTime(inventory(listInventory))) AND NOT excludeBatch(inventory(listInventory),b) AND cnt > 0 AND inSession(skuGroup(sku(b)))) AND (isItem(sku(b)) OR isContainer(sku(b))) NEW d = PageInventoryDetail DO {
                    pageInventory(d) <- p;
                    sku(d) <- sku(b);
                    batch(d) <- b;
                    quantity(d) <- cnt;
                    price(d) <- accountPriceA(b, stock(listInventory), dateTime(inventory(listInventory)));
                }
            } ELSE {
                FOR (NUMERIC[16,5] cnt == balanceB(Sku sk, stock(listInventory), dateTime(inventory(listInventory))) AND cnt > 0 AND inSession(skuGroup(sk))) AND (isItem(sk) OR isContainer(sk)) ORDER name (sk) NEW d = PageInventoryDetail DO {
                    pageInventory(d) <- p;
                    sku(d) <- sk;
                    quantity(d) <- cnt;
                    price(d) <- prevAccountPriceA(sk, stock(listInventory), dateTime(inventory(listInventory)));
                }        
            }          
        }
    }    
};

addSkuLists 'Создать страницу описи по спискам SKU' (ListInventory listInventory) {
    DIALOG dialogAddLists DO {
        NEW p = PageInventory {
            listInventory(p) <- listInventory;
            FOR in(list(ListDetail ld)) AND NOT [GROUP SUM 1 BY sku(PageInventoryDetail pd), pageInventory(pd)](sku(ld), p) 
            AND (isItem(sku(ld)) OR isContainer(sku(ld))) ORDER name (sku(ld)) NEW d = PageInventoryDetail DO {
                pageInventory(d) <- p;
                sku(d) <- sku(ld);
                quantity(d) <- balanceB(sku(ld), stock(listInventory), dateTime(inventory(listInventory)));
                price(d) <- prevAccountPriceA(sku(ld), stock(listInventory), dateTime(inventory(listInventory)));
            }        
            in(List l) <- NULL;
        }
    }
}

isParentSkuGroup = (isParent(SkuGroup g, sku(PageInventoryDetail detail))) OR (g IS SkuGroup AND NOT sku(detail));

FORM listInventory 'Опись'
    OBJECTS         li=ListInventory PANEL
    PROPERTIES (li) nameStock, nameInventory, name, note,
                    nameCommittee, nameChairmanCommittee, nameEmployee,
                    countPageInventory, countPageInventoryDetail, quantityPageInventoryDetail,
                    sumPageInventoryDetail, createPage, addSkuLists
    
    TREE skuTree g = SkuGroup PARENT parent(g)
    PROPERTIES READONLY order(g), name(g)
    ORDERS order(g), name(g)
    FILTERGROUP inactive FILTER 'Активные' active(g) 'F5' DEFAULT
        
    OBJECTS         pl=PageInventory GRID
    PROPERTIES(pl)  name, note PANEL, countPageInventoryDetail, quantityPageInventoryDetail, sumPageInventoryDetail, NEW, DELETE GRID
    FILTERS         listInventory(pl) == li

    OBJECTS         dp=PageInventoryDetail
    PROPERTIES (dp) index, nameSkuTypeSku, idSku SHOWIF showIDs(), idBarcodeSku, nameSku, idBatch SHOWIF isBatch(li), nameBatch SHOWIF isBatch(li), 
                    quantityGrid = quantity, price,
                    sum, costBatch SHOWIF isBatch(li), costSumBatch SHOWIF isBatch(li), NEW SHOWIF countPageInventory(li), DELETE GRID
    FILTERS         listInventory(pageInventory(dp)) == li, isParentSkuGroup(g, dp)
    FILTERGROUP page
    FILTER 'На странице' pageInventory(dp) == pl DEFAULT 

    OBJECTS         i=Sku GRID
    PROPERTIES (li,i)  index
    PROPERTIES (i)     id SHOWIF showIDs(), idBarcode, name
    PROPERTIES (li,i)  quantityPageInventoryDetail, pricePageInventoryDetail SHOWIF isSku(li),
                       sumPageInventoryDetail SHOWIF isSku(li)
    FILTERS            quantityPageInventoryDetail(li,i), //> 0
                       isParent(g, i)

    OBJECTS         bt=Batch GRID
    PROPERTIES (li,bt) SHOWIF isBatch(li) index
    PROPERTIES (bt)    SHOWIF isBatch(li) idBarcodeSku, nameSku, name, cost
    PROPERTIES (li,bt) SHOWIF isBatch(li) quantityPageInventoryDetail, pricePageInventoryDetail, sumPageInventoryDetail, costSumPageInventoryDetail
    FILTERS            quantityPageInventoryDetail(li,bt), //> 0
                       isParent(g, bt)

    EDIT ListInventory OBJECT li
;

DESIGN listInventory {
    BOX {
        size = (1024, 768);
        NEW header {
            type = CONTAINERH;
            NEW row {
                MOVE GROUP(documentHeader,li) {
                    columns = 1;
                    type = CONTAINERH;
                    MOVE PROPERTY(nameInventory(li));
                    MOVE PROPERTY(name(li));
                }
                MOVE GROUP(inventoryCommittee,li) {
                    columns = 1;
                    type = CONTAINERH;
                }
                NEW createContainer {
                    type = CONTAINERH;
                    MOVE GROUP(documentPrm,li) {
                        columns = 2;
                    }
                    NEW create {
                        type = CONTAINERH;
                        caption = 'Создание';   
                        MOVE PROPERTY(createPage(li));
                        MOVE PROPERTY(addSkuLists(li));
                    }
                }
            }
            MOVE GROUP(documentSum,li) {
                columns = 1;
                PROPERTY(countPageInventory(li)) {
                    caption = 'Количество страниц';
                }
            }
        }
        NEW wor {
            fill = 1;
            type = SPLITH;
            NEW case1 {
                fill = 1;
                type = SPLITV;
                MOVE BOX(pl);
                MOVE BOX(TREE skuTree) {
                    caption = 'Группы';
                    fill = 1;
                }
            }           
            NEW detailPageBox {
                fill = 3;
                type = TABBED; 
                MOVE BOX(dp) {
                    caption = 'Строки';
                }
                MOVE BOX(i) {
                    caption = 'Опись-товар';
                }
                MOVE BOX(bt) {
                    caption = 'Опись-партия';
                }
            }
        }
        MOVE TOOLBARBOX;
    }
}

addListInventory 'Добавить'(Stock stock, Inventory inventory)  { 
	NEWSESSION {
	    NEW g = ListInventory {
	        stock(g) <- stock;
	        inventory(g) <- inventory;
	        inSession(SkuGroup group) <- include(inventory, group);
	        SHOW listInventory OBJECTS li = g DOCKED NOCANCEL;
	    }
	}
} TOOLBAR IMAGE 'add.png';

changeAddDetailInputIdSku(STRING[100] idSku, PageInventory page)  { 
    IF sku(idSku) THEN {  
        NEW  d = PageInventoryDetail {
            pageInventory(d) <- page;   
            sku(d) <- sku(idSku);
            ACTIVATE PROPERTY listInventory.quantityGrid;
            SEEK listInventory.dp = d;
        }        
    } ELSE {
        MESSAGE 'Код товара не найден.';
    }
} 
changeAddDetailInput(PageInventory page)  { 
    INPUT s = BPSTRING[20] DO
        changeAddDetailInputIdSku(s, page);
};
addDetailInput 'Код товара:' (page) = DATA LOCAL BPSTRING[20] (PageInventory) TOOLBAR CHANGEKEY 'F5' 
                                                                        ON CHANGE { changeAddDetailInput(page); } CHARWIDTH 10;  
                                                                     
changeAddDetailInputBarcode(STRING[15] barcode, PageInventory page)  { 
    IF skuBarcode(barcode, date(listInventory(page))) THEN {  
        NEW  d = PageInventoryDetail {
            pageInventory(d) <- page;   
            sku(d) <- skuBarcode(barcode, date(listInventory(page)));
            ACTIVATE PROPERTY listInventory.quantityGrid;
            SEEK listInventory.dp = d;
        }        
    } ELSE {
        MESSAGE 'Штриход товара не найден.';
    }
} 
changeAddDetailInputBarcode(PageInventory page)  { 
    INPUT s = STRING[15] DO 
        changeAddDetailInputBarcode(s, page);
}
addDetailInputBarcode 'Штрихкод товара:' (page) = DATA LOCAL STRING[15] (PageInventory) TOOLBAR CHANGEKEY 'F4' EVENTID 'SCANNER'
                                                                        ON CHANGE { changeAddDetailInputBarcode(page); } CHARWIDTH 15;

EXTEND FORM listInventory
    PROPERTIES (pl) DRAW dp addDetailInputBarcode, addDetailInput  
;




// --------------------------------------------- Формы инвентаризаций ------------------------------------- //


sumPageInventoryDetail 'Сумма по описям' (CollationSheet cs, SkuGroup group) = GROUP
    SUM sumPageInventoryDetail(cs,Sku sku) IF isParent(group, sku) AND include(cs, sku);
sumBalance 'Сумма по описям' (CollationSheet cs, SkuGroup group) = GROUP
    SUM sumBalance(cs,Sku sku) IF isParent(group, sku) AND include(cs, sku);    
sumShortage 'Сумма по описям' (CollationSheet cs, SkuGroup group) = GROUP
    SUM sumShortage(cs,Sku sku) IF isParent(group, sku) AND include(cs, sku);    
    
sumPageInventoryDetailBatches  (CollationSheet cs, SkuGroup group) = GROUP
    SUM sumPageInventoryDetail(cs,Batch b) IF isParent(group, b) AND include(cs,b);
sumBalanceBatches  (CollationSheet cs, SkuGroup group) = GROUP
    SUM sumBalance(cs,Batch b) IF isParent(group, b) AND include(cs,b);
sumShortageBatches  (CollationSheet cs, SkuGroup group) = GROUP
    SUM sumShortage(cs,Batch b) IF isParent(group, b) AND include(cs,b);

overSumPageInventoryDetail 'Сумма по описям' = IF isBatch(CollationSheet cs) THEN sumPageInventoryDetailBatches(cs,SkuGroup g) ELSE sumPageInventoryDetail(cs,g);
overSumBalance 'Сумма по остаткам' = IF isBatch(CollationSheet cs) THEN sumBalanceBatches(cs,SkuGroup g) ELSE sumBalance(cs,g);
overSumShortage 'Сумма недостачи / излишка' = IF isBatch(CollationSheet cs) THEN sumShortageBatches(cs,SkuGroup g) ELSE sumShortage(cs,g);

sumPageInventoryDetail 'Сумма по описям' = DATA LOCAL NUMERIC[18,4] (SkuGroup);
sumBalance 'Сумма по остаткам' = DATA LOCAL NUMERIC[18,4] (SkuGroup);
sumShortage 'Сумма недостачи / излишка' = DATA LOCAL NUMERIC[18,4] (SkuGroup);

fillGroupSums 'Заполнить суммы' (CollationSheet cs) {
    sumPageInventoryDetail(SkuGroup g) <- overSumPageInventoryDetail(cs, g);
    sumBalance(SkuGroup g) <- overSumBalance(cs, g);
    sumShortage(SkuGroup g) <- overSumShortage(cs, g);
}

saved 'Сохранена' (Inventory i) = PREV(i IS Inventory);

backgroundQuantity = ABSTRACT CASE COLOR (CollationSheet, Sku);

showMovementSkuStock 'Показать движение товара по складу' (CollationSheet cs, Sku sku)  { 
    FOR s == sku AND st == stock(cs) DO
        NEWSESSION SHOW movementSkuStock OBJECTS s = s, st = st; 
}

notShowAddListInventory = ABSTRACT BOOLEAN(Inventory);
notShowEditListInventory = ABSTRACT BOOLEAN(Inventory);
notShowDeleteListInventory = ABSTRACT BOOLEAN(Inventory);

filterDateFrom (DocumentDetailLog i) = date(i) >= filterSkuLedgerDateFrom() OR (i IS DocumentDetailLog AND NOT filterSkuLedgerDateFrom());      
filterDateTo (DocumentDetailLog i) = date(i) <= filterSkuLedgerDateTo() OR (i IS DocumentDetailLog AND NOT filterSkuLedgerDateTo());   

FORM movementDocumentDetailSku 'Лог движение товара'
    OBJECTS ss = (s = Sku, cs =CollationSheet) PANEL
    PROPERTIES READONLY name(s), nameStock(cs)
    PROPERTIES () filterSkuLedgerDateFrom, filterSkuLedgerDateTo
                  
    OBJECTS l = DocumentDetailLog
    PROPERTIES (l) READONLY seriesDocument, numberDocument, dateDocument, typeDocument, 
                   index, idSku, nameSku, quantity, price, nameUser, date, time, note
    PROPERTIES  READONLY
                nameSupplierStock 'Склад поставщика' = nameSupplierStock(documentLog(l)),
                nameCustomerStock 'Склад покупателя' = nameCustomerStock(documentLog(l))              
                               
    ORDERS date(l)DESC, time(l) 
    FILTERS sku(l) == s,            
            supplierStock(documentLog(l)) == stock(cs) OR customerStock(documentLog(l)) == stock(cs),
            filterDateFrom(l),
            filterDateTo(l)
            
    FILTERGROUP posted FILTER 'Изменения после инвентаризации' dateDocument(l) <= date(cs) AND date(l) >= date(cs) 'F9' DEFAULT 
;
DESIGN movementDocumentDetailSku {
    BOX {
        NEW header {
            alignment = STRETCH;
            type = CONTAINERH;
            MOVE BOX(ss){ 
                fill = 1; 
                type = CONTAINERH;
                MOVE PROPERTY (name(s)){ caption = 'SKU'; fill = 1; } 
                MOVE PROPERTY (nameStock(cs)){ caption = 'Склад'; fill = 1; } 
            }
            NEW filter {
                caption = 'Фильтры';
                type = CONTAINERH;
                MOVE PROPERTY (filterSkuLedgerDateFrom()){caption = 'Дата изменения с';}
                MOVE PROPERTY (filterSkuLedgerDateTo()){caption = 'Дата изменения по';}
            }
        }
        MOVE BOX(l);
    }
    MOVE TOOLBARBOX;
}
movementDocumentDetailSku'Показать лог движение товара' (Sku sku, CollationSheet cs)  { NEWSESSION SHOW movementDocumentDetailSku OBJECTS s = sku, cs = cs; };

backgroundDiffInventory 'Подсвечивать товары, у которых неправильные значения остатка в инвентаризации'  = DATA BOOLEAN ();
EXTEND FORM options
    PROPERTIES () backgroundDiffInventory
;
DESIGN options {
    pane {        
        NEW inventory {
            caption = 'Инвентаризация';  
            MOVE PROPERTY (backgroundDiffInventory());          
        }
    }
}
backgroundDiffInventoryProp(CollationSheet cs, Sku s) = backgroundDiffInventory() AND
    cs IS CollationSheet AND s IS Sku AND 
    ((quantityBalance(cs,s) OR balanceB(s,stock(cs),dateTime(cs))) AND NOT quantityBalance(cs,s)==balanceB(s,stock(cs),dateTime(cs)) OR 
    ((sumBalance(cs,s) OR sumB(s,stock(cs),dateTime(cs))) AND NOT isPrice(inventory(cs)) AND NOT sumBalance(cs,s)==sumB(s,stock(cs),dateTime(cs))));
    
backgroundDiffInventory(CollationSheet cs, Sku s) = RGB (255,153,153) IF backgroundDiffInventoryProp(cs,s);


FORM inventory 'Инвентаризация'
    OBJECTS          in=Inventory PANEL
    PROPERTIES (in)  isBatch, isPrice, isShortageStockDocument, nameNumerator, number, series,
                     name, nameTypeOfAddition, nameIncludeSkuGroups SHOWIF isPartly(in) ON CHANGE changeSkuGroups(in), date, time,
                     note, nameStock ON CHANGE dialogStock(in), isPartly SHOWIF isRemains(in),
                     recalculatePrice, recalculateBalance,
                     timeFrom, timeTo, nameHeadMan,
                     nameCommittee, nameChairmanCommittee, nameEmployee, skipStockDocumentLedger, skipSkuLedger

    TREE treeStock ds=Stock, li=ListInventory, pl=PageInventory
    PROPERTIES       READONLY name(ds),  name(li), name(pl)
    FILTERS                   include(ds, in),
                              stock(li) == ds,
                              inventory(li) == in,
                              listInventory(pl) == li
    FILTERGROUP inactiveStock FILTER 'Активный' active(ds) 'ctrl F10' DEFAULT
    PROPERTIES(ds, in) READONLY countPageInventoryDetail, quantityPageInventoryDetail, sumPageInventoryDetail
    PROPERTIES(ds, in) addListInventory SHOWIF (saved(in) AND NOT notShowAddListInventory(in))

    PROPERTIES(li)   READONLY countPageInventoryDetail, quantityPageInventoryDetail, sumPageInventoryDetail

    PROPERTIES(li)   NEWSESSION editLI = EDIT SHOWIF (saved(in) AND NOT notShowEditListInventory(in)), deleteli=DELETE SHOWIF (saved(in) AND NOT notShowDeleteListInventory(in))

    PROPERTIES(pl)   READONLY countPageInventoryDetail, quantityPageInventoryDetail, sumPageInventoryDetail

    OBJECTS          dp=PageInventoryDetail GRID
    PROPERTIES (dp)  READONLY index, nameSkuTypeSku, idSku SHOWIF showIDs(), idBarcodeSku, nameSku, idBatch SHOWIF isBatch(li), nameBatch  SHOWIF isBatch(li),
                              quantity, price, sum, costBatch SHOWIF isBatch(li), costSumBatch SHOWIF isBatch(li)
    FILTERS                   in(in, ds, li, pl, dp)

    OBJECTS         it=Sku GRID
    PROPERTIES (li,it) READONLY index
    PROPERTIES (it)    READONLY id SHOWIF showIDs(), idBarcode, itNameSku = name
    PROPERTIES (li,it) READONLY quantityPageInventoryDetail, pricePageInventoryDetail SHOWIF isSku(li),
                       sumPageInventoryDetail SHOWIF isSku(li)
    FILTERS            quantityPageInventoryDetail(li,it)
    ORDERS           itNameSku

    OBJECTS         bt=Batch GRID
    PROPERTIES (li,bt) READONLY SHOWIF isBatch(li) index
    PROPERTIES (bt)    READONLY SHOWIF isBatch(li) idBarcodeSku, nameSku, name, cost
    PROPERTIES (li,bt) READONLY SHOWIF isBatch(li) quantityPageInventoryDetail, pricePageInventoryDetail, sumPageInventoryDetail, costSumPageInventoryDetail
    FILTERS            quantityPageInventoryDetail(li,bt)

    OBJECTS          cs=CollationSheet GRID
    PROPERTIES (cs)              name, nameTypeOfAddition, nameStock, numberDisposal,
                                 quantityPageInventoryDetail, quantityBalance, quantityShortage,
                                 sumPageInventoryDetail, sumBalance, sumItemAccountB SHOWIF showAccountSums(cs) ON CONTEXTMENU recalculateSumAccountB(cs), 
                                 sumContainerAccountB SHOWIF showAccountSums(cs), 
                                 sumShortage, sumItemPageInventoryDetailCollationSheetGrid = sumItemPageInventoryDetail, 
                                 sumItemShortageCollationSheetGrid = sumItemShortage, 
                                 sumContainerPageInventoryDetailCollationSheetGrid = sumContainerPageInventoryDetail, 
                                 sumContainerShortageCollationSheetGrid = sumContainerShortage,
                                 countListInventory, countPageInventory
    PROPERTIES (cs)              dialogSku, prevDate, recalculatePrice GRID, startTimeRecalculateBalance READONLY , endTimeRecalculateBalance READONLY, 
                                 startTimeRecalculatePrice READONLY , endTimeRecalculatePrice READONLY //, deletecs=DELETE TOOLBAR
    PROPERTIES (cs)  PANEL sumItemPageInventoryDetail, sumContainerPageInventoryDetail,
                                 sumItemBalance, sumContainerBalance,
                                 sumItemShortage, sumContainerShortage
    FILTERS                      inventory(cs) == in


    TREE treeGroup g=SkuGroup PARENT parent(g)
    PROPERTIES READONLY order(g), name(g), sumPageInventoryDetail(g), sumBalance(g), sumShortage(g)
    PROPERTIES(cs) fillGroupSums DRAW g TOOLBAR
    ORDERS order(g), name(g)
    FILTERGROUP inactive FILTER 'Активные' active(g) 'F5' DEFAULT

    OBJECTS          i=Sku GRID
    PROPERTIES(i) READONLY                      BACKGROUND backgroundDiffInventory(cs,i) idBarcode, iNameSku = name ON CONTEXTMENU showMovementSkuStock(cs,i) ON CONTEXTMENU movementDocumentDetailSku(i,cs), id
    PROPERTIES(cs, i)                           quantityPageInventoryDetail ON CHANGE overChangeQuantityPageInventoryDetail(cs,i) BACKGROUND backgroundQuantity(cs,i), quantityBalance, quantityShortage ON CONTEXTMENU showCost(cs, i)
    PROPERTIES(cs, i) SHOWIF isSku(in) pricePageInventoryDetail BACKGROUND differentPrice(cs, i),
                                                priceBalance BACKGROUND differentPrice(cs, i)
    PROPERTIES(cs, i) SHOWIF isSku(in) sumPageInventoryDetail, sumBalance, sumShortage
    PROPERTIES(i) READONLY                      nameSkuGroup1, nameSkuGroup2, nameSkuGroup3, nameSkuGroup4, nameSkuGroup5 
    FILTERS                                     include(cs, i) OR overInclude(cs,i),
                                                isParent(g, i)
    FILTERGROUP notEqualsPriceSkuFilters
            FILTER 'Товар с разными ценами' differentPrice(cs, i) 'F10'
    ORDERS                                    iNameSku

    OBJECTS         b=Batch GRID
    PROPERTIES(b) READONLY SHOWIF isBatch(cs) idBarcodeSku, nameSku, name, cost
    PROPERTIES(cs,b) SHOWIF isBatch(cs)       quantityPageInventoryDetail, quantityBalance,
                                                            quantityShortage
    PROPERTIES(cs,b) SHOWIF isBatch(cs)       pricePageInventoryDetail BACKGROUND differentPrice(cs, b),
                                                            priceBalance BACKGROUND differentPrice(cs, b)
    PROPERTIES(cs,b) SHOWIF isBatch(cs)       sumPageInventoryDetail, sumBalance, sumShortage, costSumPageInventoryDetail, costSumBalance, costSumShortage
    FILTERS                                                 include(cs, b),
                                                            isParent(g, b)
    FILTERGROUP notEqualsPriceBatchFilters
            FILTER 'Партии с разными ценами' differentPrice(cs, b) 'F9'
    FILTERGROUP notEqualsPriceBatchFilters2
            FILTER 'Партии с остатками' quantityPageInventoryDetail(cs,b) OR quantityBalance(cs,b) OR sumBalance(cs,b) 'F8' DEFAULT

    EDIT Inventory OBJECT in
;

DESIGN inventory {

    NEW topContainer {
        type = TABBED;
        fill = 1;
        NEW headerBox {
            caption = 'Параметры';
            MOVE GROUP(documentHeader,in) {
                columns = 1;
                type = CONTAINERH;
                MOVE PROPERTY(nameStock(in));
                MOVE PROPERTY(nameNumerator(in));
                MOVE PROPERTY(number(in));
                MOVE PROPERTY(series(in));
                MOVE PROPERTY(date(in));
                MOVE PROPERTY(time(in));
            }
    
            NEW header {
                type = CONTAINERH;
                NEW headerColumn1 {
                    MOVE GROUP(documentPrm,in) {
                        type = COLUMNS;
                        columns = 2;
                        MOVE PROPERTY(nameTypeOfAddition(in));                    
                        MOVE PROPERTY(name(in));
                        MOVE PROPERTY(isBatch(in));
                        MOVE PROPERTY(isPrice(in));
                        MOVE PROPERTY(isPartly(in));
                        MOVE PROPERTY(nameIncludeSkuGroups(in));
                        MOVE PROPERTY(note(in));
                    }
                    MOVE GROUP(inventoryCommittee,in) {
                        columns = 1;
                        type = CONTAINERH;
                    }
    
                    NEW row4 {
                        type = CONTAINERH;
                        NEW balance {
                            caption = 'Снятие остатков';
                            type = CONTAINERH;
                            MOVE PROPERTY(timeFrom(in));
                            MOVE PROPERTY(timeTo(in));
                        }
                        NEW management {
                            caption = 'Руководство';
                            MOVE PROPERTY(nameHeadMan(in));
                        }
                    }
                }
            }
        }
        NEW zBox {
            caption = 'Описи';
            type = SPLITH;
            MOVE BOX(TREE treeStock) {
                PROPERTY (editLI) {
                    caption = 'Редактировать';
                }
            }
            NEW case1  {
                fill = 1;
                type = TABBED;
                MOVE BOX(dp);
                MOVE BOX(it) {
                    caption = 'Опись-товар';
                }
                MOVE BOX(bt) {
                    caption = 'Опись-партия';
                }
            }
        }
    
        NEW xBox {
            caption = 'Сличительные ведомости';
            type = SPLITV;
            NEW pop1 {
                type = CONTAINERH;
                fill = 1;
                NEW pop11 {
                    fill = 1;
                    MOVE GROUP(inventoryAction,in) {
                        columns = 1;
                        type = CONTAINERH;
                    }
                    MOVE BOX(cs) {
                        size = ( -1, 0);
                    }
                }
                MOVE GROUP(,cs) {
                    type = COLUMNS;
                    columns = 1;
                    caption = 'Суммы товар/тара';
                }
            }
            NEW wor1 {
                fill = 3;
                type = SPLITH;
                MOVE BOX(TREE treeGroup) {
                    caption = 'Товарные группы';
                }
                NEW wor11 {
                    fill = 2;
                    type = TABBED;
                    MOVE BOX(i);
                    MOVE BOX(b);
                }
            }
        }
    }
    MOVE TOOLBARBOX;
}

edit (InInventoryBatchDetail d) + {  DIALOG inventory OBJECTS in = inventory(collationSheet(d)), cs = collationSheet(d), b = batch(d) DOCKED; }
edit (InInventorySkuDetail d) + {  DIALOG inventory OBJECTS in = inventory(collationSheet(d)), cs = collationSheet(d), i = sku(d) DOCKED; }

edit (OutInventoryBatchDetail d) + {  DIALOG inventory OBJECTS in = inventory(collationSheet(d)), cs = collationSheet(d), b = batch(d) DOCKED; }
edit (OutInventorySkuDetail d) + {  DIALOG inventory OBJECTS in = inventory(collationSheet(d)), cs = collationSheet(d), i = sku(d) DOCKED; }

show 'Просмотреть' (InInventoryBatchDetail d)  { 
	NEWSESSION {
	    SHOW inventory OBJECTS in = inventory(collationSheet(d)), cs = collationSheet(d), b = batch(d)  DOCKED READONLY ;
	}
}
show(InInventoryBatchDetail d) + {  show(d); }

show 'Просмотреть' (InInventorySkuDetail d)  { 
	NEWSESSION {
	    SHOW inventory OBJECTS in = inventory(collationSheet(d)), cs = collationSheet(d), i = sku(d)  DOCKED READONLY;
	}
}
show(InInventorySkuDetail d) + {  show(d); }

show 'Просмотреть' (OutInventoryBatchDetail d)  { 
	NEWSESSION {
	    SHOW inventory OBJECTS in = inventory(collationSheet(d)), cs = collationSheet(d), b = batch(d)  DOCKED READONLY;
	}
}
show(OutInventoryBatchDetail d) + {  show(d); }

show 'Просмотреть' (OutInventorySkuDetail d)  { 
	NEWSESSION {
	    SHOW inventory OBJECTS in = inventory(collationSheet(d)), cs = collationSheet(d), i = sku(d)  DOCKED READONLY;
	}
}
show(OutInventorySkuDetail d) + {  show(d); }


edit(CollationSheet l) + {  edit(inventory(l)); }

@extendFormFilterStockAccess(ts, dialogStockInventory);

accessCompanyStockCurrentUser (Inventory in) = GROUP SUM 1 IF accessCompany(currentUser(), Stock ts) AND include(ts,in);

overShowEdit = ABSTRACT BOOLEAN (Inventory);
overShowDelete = ABSTRACT BOOLEAN (Inventory);
skipShowEdit = ABSTRACT BOOLEAN (Inventory); 
skipShowDelete = ABSTRACT BOOLEAN (Inventory); 

skipOpen = ABSTRACT BOOLEAN (Inventory);
showClose (Inventory i) = isOpened(i) AND NOT skipClose(i);   
showOpen (Inventory i) = isClosed(i) AND NOT skipOpen(i);   

showPost (Inventory i) = isDraft(i) AND isOpened(i);
showUnpost (Inventory i) = isPosted(i) AND isOpened(i);

quantityShortage 'Кол-во недостачи / излишка' (Inventory in) = GROUP SUM quantityShortage(CollationSheet cs) BY inventory(cs);
sumShortage 'Сумма недостачи / излишка' (Inventory in) = GROUP SUM sumShortage(CollationSheet cs) BY inventory(cs);

showMovementSku 'Показать движение по складу' (Sku ks, CollationSheet cs)  { showMovementSku(ks, stock(cs)); }

FORM inventories 'Инвентаризации'
    OBJECTS in=Inventory LAST
    PROPERTIES(in) READONLYIF isReadonly() isClosed
    PROPERTIES(in) READONLY isPosted , isBatch,  number, series, date, time,
                                        nameStock, name, note, quantityShortage, sumShortage, skipStockDocumentLedger, skipSkuLedger, isShortageStockDocument
    PROPERTIES(in) PANEL READONLY createdNameUser, createdTime, createdHostnameComputer, 
                                        postedNameUser, postedTime, postedHostnameComputer
    
    PROPERTIES(in)                      NEWSESSION NEW, editIn = EDIT SHOWIF overShowEdit(in),// SHOWIF isDraftInventory(in), 
                                        deletein=DELETE SHOWIF overShowDelete(in)
    PROPERTIES(in)                      post SHOWIF showPost(in), unpost SHOWIF showUnpost(in)
    FILTERGROUP open FILTER 'Открыт' isOpened(in) 'F6' DEFAULT
    
    PROPERTIES (in) close SHOWIF showClose(in), open SHOWIF showOpen(in)

    OBJECTS il=InventorySkuDetail GRID
    PROPERTIES(il) READONLY SHOWIF isSku(in) nameStock, idBarcode, nameSku, quantity, sum
    FILTERS                                           inventory(il) == in
    ORDERS                                          nameStock(il), nameSku(il)

    OBJECTS ib=InventoryBatchDetail  GRID
    PROPERTIES(ib) READONLY SHOWIF isBatch(in) nameStock, idBarcode, nameSku,
                                                        nameBatch, quantity, sum, costSum
    FILTERS                                             inventory(ib) == in

    OBJECTS li=ListInventory
    PROPERTIES(li) READONLY name, nameStock, countIndex SHOWIF isSku(li), countIndexBatch SHOWIF isBatch(li),
                            quantityPageInventoryDetail, sumPageInventoryDetail
    FILTERS                 inventory(li) == in
    ORDERS                nameStock(li)

    OBJECTS         i=Sku GRID
    PROPERTIES(li,i) READONLY index
    PROPERTIES(i)    READONLY idBarcode, name, shortNameUOM
    PROPERTIES(li,i) READONLY quantityPageInventoryDetail,
                              pricePageInventoryDetail SHOWIF isSku(li),
                              sumPageInventoryDetail SHOWIF isSku(li)
    FILTERS                   quantityPageInventoryDetail(li,i)
    ORDERS                  index(li,i)

    OBJECTS         b=Batch GRID
    PROPERTIES(li,b) READONLY SHOWIF isBatch(li) index
    PROPERTIES(b)    READONLY SHOWIF isBatch(li) idBarcodeSku, nameSku, name, shortNameUOM, cost
    PROPERTIES(li,b) READONLY SHOWIF isBatch(li) quantityPageInventoryDetail, pricePageInventoryDetail, sumPageInventoryDetail, costSumPageInventoryDetail
    FILTERS quantityPageInventoryDetail(li,b)    

    OBJECTS         cs=CollationSheet
    PROPERTIES(cs)  READONLY             name, nameTypeOfAddition, nameStock,
                                         quantityPageInventoryDetail, quantityBalance, quantityShortage,
                                         sumPageInventoryDetail, sumBalance, sumShortage
    PROPERTIES(cs)  PANEL READONLY sumItemPageInventoryDetail, sumContainerPageInventoryDetail,
                                         sumItemBalance, sumContainerBalance,
                                         sumItemShortage, sumContainerShortage,
                                         sumItemAccountB SHOWIF showAccountSums(cs), sumContainerAccountB SHOWIF showAccountSums(cs)
    FILTERS                              inventory(cs) == in
    ORDERS                             nameStock(cs)

    OBJECTS          it=Sku GRID
    PROPERTIES(it) READONLY                                   nASku=name ON CONTEXTMENU showMovementSku(it, cs), idBarcode
    PROPERTIES(cs,it) READONLY                                quantityPageInventoryDetail, quantityBalance, quantityShortage
    PROPERTIES(cs,it) READONLY SHOWIF isSku(cs) pricePageInventoryDetail BACKGROUND differentPrice(cs, it),
                                                              priceBalance BACKGROUND differentPrice(cs, it)
    PROPERTIES(cs,it) READONLY SHOWIF isSku(cs) sumPageInventoryDetail, sumBalance, sumShortage
    FILTERS                                                   include(cs, it) OR overInclude(cs,it)
    ORDERS                                                  nASku

    OBJECTS         bt=Batch GRID 
    PROPERTIES(bt)    READONLY SHOWIF isBatch(cs) nameSku, idBarcodeSku, name, cost
    PROPERTIES(cs,bt) READONLY SHOWIF isBatch(cs) quantityPageInventoryDetail, quantityBalance, quantityShortage
    PROPERTIES(cs,bt) READONLY SHOWIF isBatch(cs) pricePageInventoryDetail BACKGROUND differentPrice(cs, bt),
                                                                priceBalance BACKGROUND differentPrice(cs, bt)
    PROPERTIES(cs,bt) READONLY SHOWIF isBatch(cs) sumPageInventoryDetail, sumBalance, sumShortage, costSumPageInventoryDetail, costSumBalance, costSumShortage
    
    FILTERS include(cs, bt), 
            quantityPageInventoryDetail(cs,bt) OR quantityBalance(cs,bt) OR sumBalance(cs, bt)            
            
    FILTERS accessCompanyStockCurrentUser(in) OR NOT countStocks(in)
;

DESIGN inventories {
    NEW topContainer{
        fill = 1;
        type = SPLITV;

        MOVE BOX(in);

        NEW wor {
            fill = 2;
            type = TABBED;

            NEW wor1 {
                caption = 'Товары';
                MOVE BOX(il) {
                    caption = 'Товары с недостачей (излишком)';
                }
            }
            NEW wor2 {
                caption = 'Партии';
                MOVE BOX(ib) {
                    caption = 'Партии с недостачей (излишком)';
                }
            }
            NEW wor3 {
                caption = 'Описи';
                type = SPLITH;
                MOVE BOX(li);
                NEW wor31 {
                    fill = 2;
                    type = TABBED;
                    MOVE BOX(i);
                    MOVE BOX(b);
                }
            }
            NEW wor4 {
                caption = 'Ведомости';
                type = SPLITH;
                MOVE BOX(cs);
                NEW wor41 {
                    fill = 1;
                    type = TABBED;
                    MOVE BOX(it);
                    MOVE BOX(bt);
                }
            }

            NEW documentHistory {
                type = CONTAINERV;
                caption = 'История';
                MOVE GROUP(created,in);
                MOVE GROUP(posted,in);
            }
        }
    }

    MOVE TOOLBARBOX;
}

//------------------- Операция -----------------------//

operation = DATA Operation (Inventory);
nameOperation 'Операция' = name(operation(Inventory i));
idOperation 'ID операции' = id(operation(Inventory i)) CHARWIDTH 30;

operation =  operation(inventory(CollationSheet collationSheet));
nameOperation 'Операция' (CollationSheet cs) = name(operation(cs));
idOperation 'ID операции' (CollationSheet cs) = id(operation(cs)) CHARWIDTH 30;

@defineDocumentOperationRole(inventory);

@deriveDocumentOperationProperty(Inventory, skipStockDocumentLedger);
@deriveDocumentOperationProperty(Inventory, skipSkuLedger);
@deriveDocumentOperationProperty(Inventory, isShortageStockDocument);

@defineDocumentOperationConstraint(inventory, 'инвентаризация', Inventory);
@extendFormFilterRoleAccess(inventory, in, inventories);

EXTEND FORM inventory
    PROPERTIES(in) nameOperation
;

DESIGN inventory{
    GROUP(documentHeader,in) {
        columns = 1;    
        type = CONTAINERV;
        NEW first {
            type = CONTAINERH;
            MOVE PROPERTY(nameOperation(in));  
            MOVE PROPERTY(date(in));
            MOVE PROPERTY(time(in));                              
        }
        NEW second {
            type = CONTAINERH;
            MOVE PROPERTY(nameNumerator(in));
            MOVE PROPERTY(number(in));
            MOVE PROPERTY(series(in)); 
            MOVE PROPERTY(nameStock(in));               
        }        
    }
}
EXTEND FORM inventories
    PROPERTIES(in) READONLY nameOperation BEFORE name(in)
;

@defineOperationProperty(isBatch, 'По партиям', paramsContainer);

@deriveDocumentOperationProperty(inventory, isBatch) ;

operation(CollationSheet ledger) += operation(inventory(ledger));

typeOfAddition  = DATA TypeOfAddition (Operation);
nameTypeOfAddition 'Тип инвентаризации' (Operation o) = staticCaption(typeOfAddition(o));

@deriveDocumentOperationProperty(inventory, typeOfAddition) ;

@defineOperationProperty(isPrice, 'Сумму остатка считать по цене', paramsContainer);
@deriveDocumentOperationProperty(inventory, isPrice) ;
@defineOperationProperty(isPartly, 'Частичная', paramsContainer);
@deriveDocumentOperationProperty(inventory, isPartly) ;

EXTEND FORM operation
    PROPERTIES(o) nameTypeOfAddition
;
DESIGN operation {
    paramsContainer {
        MOVE PROPERTY(nameTypeOfAddition(o));
    }
}

EXTEND FORM dialogStockInventory
    FILTERS in(ts,operation(in)) OR  ts IS Stock AND NOT operation(in)
;

CONSTRAINT include(Stock stock,Inventory inventory) AND operation(inventory) AND NOT 
    in(stock,operation(inventory))
        MESSAGE 'В инвентаризацию включены склады, которые не включены в операцию';


NAVIGATOR {
     inventoryNavigator {
         NEW inventories;
         NEW inventoryCommittees;
     }
}

//-- Запрет на изменение документа другим пользователем
@defineOperationChangesDocument(inventory, UserInventory, preventChangesDocument, created);

overShowEdit (Inventory i) += showEditDeleteUser(i) AND isOpened(i) AND NOT skipShowEdit(i);
overShowDelete (Inventory i) += showEditDeleteUser(i) AND isOpened(i) AND NOT skipShowDelete(i); 

skipClose (Inventory i) += WHEN preventCloseDocument(currentUser(), operation(i)) THEN TRUE;


@defineMovementSku(pageInventoryDetail, stock); //-- показываем по нажатию правой клавиши движение товара
@defineBalancesSku(pageInventoryDetail); //-- показываем по нажатию правой клавиши остатки товара

@defineBarcodeSku(pageInventoryDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара

@defineMovementPriceSku(pageInventoryDetail, stock); //-- показываем по нажатию правой клавиши изменение цены товара

@defineBalancesBatch(pageInventoryDetail); //-- показываем по нажатию правой клавиши остатки партии
@defineMovementBatch(pageInventoryDetail, stock); //-- показываем по нажатию правой клавиши движение по партии

@defineInfoSku(pageInventoryDetail); //-- показываем по нажатию правой клавиши информацию по товару

notCheckBatchDetail 'Не проверять наличие партий для строк описи' = DATA BOOLEAN (Operation);

EXTEND FORM operation
    PROPERTIES(o) notCheckBatchDetail SHOWIF isBatch(o)
;
DESIGN operation {
    paramsContainer {
        MOVE PROPERTY(notCheckBatchDetail(o)) AFTER PROPERTY (isBatch(o));
    }
}

CONSTRAINT isPosted(inventory(PageInventoryDetail d)) AND isBatch(inventory(d)) AND NOT notCheckBatchDetail(operation(inventory(d)))  AND NOT batch(d)
    MESSAGE 'В инвентаризации по партиям не должно быть строк описи без партий.';     

batchQuantity 'Расписано по партиям' = GROUP SUM quantityPageInventoryDetail(CollationSheet cs, Batch bt) BY cs, sku(bt);
backgroundQuantity(CollationSheet cs, Sku sk) += WHEN 
    isSkuBatch(cs) AND quantityPageInventoryDetail(cs, sk) AND NOT batchQuantity(cs,sk) == quantityPageInventoryDetail(cs,sk) THEN RGB(255,0,0);
EXTEND FORM inventory
    PROPERTIES (cs,i) batchQuantity READONLY SHOWIF isSkuBatch(cs) 
;

lastOrderNotExcludeBatchB(Inventory inventory, sku, Stock stock, DATETIME dateTimeIn)  =
        GROUP LAST Batch batch
              ORDER dateTime(batch, stock), batch
              WHERE dateTime(batch, stock) < dateTimeIn AND prevCountLedger(batch, stock, dateTimeIn) AND NOT excludeBatch(inventory, batch)
              BY skuLedger(batch, stock);                 

overRecalculateBalance(Inventory inventory) + { 
    FOR inventory(CollationSheet cs) = inventory DO {
        IF isSkuBatch(cs) THEN {
            
            partitionQuantity(cs, Batch bt) <- NULL WHERE partitionQuantity(cs, bt) AND (NOT calcPartitionQuantity(cs, bt) OR excludeBatch(inventory,bt));
            
            IF isPartly(inventory) AND isRemains(inventory) THEN {
                partitionQuantity(cs, Batch bt) <- calcPartitionQuantity(cs,bt) WHERE include(inventory, sku(bt)) AND NOT excludeBatch(inventory,bt) AND calcPartitionQuantity(cs, bt);
                partitionQuantity(cs, Batch bt) <- partitionQuantity(cs,bt) (+) notBatchQuantityPageInventoryDetail (cs, sku(bt)) (-) (GROUP SUM partitionQuantity(cs, Batch btt) IF sku(btt) == sku(bt))  
                    WHERE (notBatchQuantityPageInventoryDetail (cs, sku(bt)) (-) (GROUP SUM partitionQuantity(cs, Batch btt) IF sku(btt) == sku(bt))) > 0.0  AND bt == lastOrderNotExcludeBatchB(inventory, sku(bt), stock(cs), dateTime(cs)) AND include(inventory, sku(bt)); 
            } ELSE {
                partitionQuantity(cs, Batch bt) <- calcPartitionQuantity(cs,bt) WHERE NOT excludeBatch(inventory,bt) AND calcPartitionQuantity(cs, bt); 
                partitionQuantity(cs, Batch bt) <- partitionQuantity(cs,bt) (+) notBatchQuantityPageInventoryDetail (cs, sku(bt)) (-) (GROUP SUM partitionQuantity(cs, Batch btt) IF sku(btt) == sku(bt))  
                    WHERE (notBatchQuantityPageInventoryDetail (cs, sku(bt)) (-) (GROUP SUM partitionQuantity(cs, Batch btt) IF sku(btt) == sku(bt))) > 0.0  AND bt == lastOrderNotExcludeBatchB(inventory, sku(bt), stock(cs), dateTime(cs));
            }
            FOR quantityPageInventoryDetail(cs,Sku sk) AND NOT batchQuantity(cs,sk) == quantityPageInventoryDetail(cs,sk) DO {
                MESSAGE (CONCAT ' ', 'Для товара:', name(sk), '('+id(sk)+')', 'в количестве', quantityPageInventoryDetail(cs,sk)+' единиц', 'нет подходящих партий.') NOWAIT;
            }            
        } ELSE {
            partitionQuantity(cs, Batch bt)<- NULL;
        }
    }    
}

@extendFormEditable(inventories);

show 'Просмотреть' (Inventory i)  { 
	NEWSESSION {
	    SHOW inventory OBJECTS in = i DOCKED READONLY;
	}
}TOOLBAR;

showToShow (Inventory i) = i IS Inventory AND NOT overShowEdit(i);

EXTEND FORM inventories
    PROPERTIES show(in) SHOWIF showToShow(in) BEFORE editIn
;

fillClosedDate 'Заполнять дату закрытия документов после проведения инвентаризации' = DATA BOOLEAN ();
EXTEND FORM options
    PROPERTIES () fillClosedDate
;
DESIGN options {
    inventory{
        MOVE PROPERTY (fillClosedDate());
    }
}

WHEN SET (isPosted(Inventory i)) AND fillClosedDate() DO {
    documentsClosedDate(Stock st) <- date(i) WHERE include(st,i);
}

isClosed[Document](ListInventory d) += isClosed(inventory(d));
isPosted[Document](ListInventory d) += isPosted(inventory(d));
number[Document](ListInventory d) += STRING[48](CONCAT '/', number(inventory(d)), name(d));
series[Document](ListInventory d) += series(inventory(d));
date[Document](ListInventory d) += date(d);
supplierStock[Document](ListInventory d) += stock(d);

index[DocumentDetail](PageInventoryDetail detail) += index(detail);
sku[DocumentDetail](PageInventoryDetail detail) += sku(detail);
quantity[DocumentDetail](PageInventoryDetail detail) += quantity(detail);
price[DocumentDetail](PageInventoryDetail detail) += price(detail);

document[DocumentDetail](PageInventoryDetail detail) += listInventory(detail);

changeSku = ABSTRACT VALUE BOOLEAN (CollationSheet, Sku);
viewChange 'Изменения' = DATA LOCAL BOOLEAN (Inventory);
changeSku(CollationSheet cs, Sku s) +=  CHANGED(quantityPageInventoryDetail(cs,s)) OR
                                        CHANGED(quantityBalance(cs,s)) OR
                                        CHANGED(sumPageInventoryDetail(cs,s)) OR
                                        CHANGED(sumBalance(cs,s)) OR
                                        CHANGED(pricePageInventoryDetail(cs,s)) OR 
                                        CHANGED(priceBalance(cs,s)); 

GROUP prevInventory 'Значения (до)';

EXTEND FORM inventory 
    PROPERTIES (in) viewChange TOOLBAR DRAW i
    FILTERS (viewChange(in) AND changeSku(cs,i)) OR (i IS Item AND NOT viewChange(in))
    PROPERTIES SHOWIF viewChange(in) PANEL IN prevInventory
               prevQP 'Кол-во по описям' = PREV(quantityPageInventoryDetail(cs,i)),
               prevQB 'Кол-во по остаткам' = PREV(quantityBalance(cs,i)),
               prevSP 'Сумма по описям' = PREV(sumPageInventoryDetail(cs,i)),
               prevSB 'Сумма по остаткам' = PREV(sumBalance(cs,i)),
               prevPP 'Цена по описям' = PREV(pricePageInventoryDetail(cs,i)),
               prevPB 'Цена по остаткам' = PREV(priceBalance(cs,i))
;
DESIGN inventory {
//    TOOLBARRIGHT(i) {
//        MOVE PROPERTY (viewChange(in));
//        //MOVE GROUP(,i);
//    }
    PANEL(i) {
        MOVE GROUP(,i){showIf = viewChange(in);}    
    }
}