MODULE StockAdjustment;

REQUIRE System,
        Utils,
        Historizable,
        Stock,
        StockSkuDocument,
        Numerator,
        Document,
        Currency,
        PriceListLedger,
        Employee,
        StockDocument,
        StockMovement,
        StockAdjustmentOperation,
        OrderLedger,
        PriceListAccount,
        Barcode,
        Item,
        SkuList;

NAMESPACE Stock;

CLASS ABSTRACT Adjustment 'Изменение остатков' : Document;
CLASS ABSTRACT AdjustmentDetail 'Строка изменения остатков' : DocumentDetail;

CLASS UserAdjustment 'Изменение остатков (польз.)' : Adjustment;
CLASS UserAdjustmentDetail 'Строка изменения остатков (польз.)' : AdjustmentDetail;

@defineDocumentInterface(adjustment);
@deriveDocumentHeaderTimePrefix(UserAdjustment, );

@defineDocumentInterfaceNumber(adjustment, BPSTRING[2]);
@defineNumeratedDefault(UserAdjustment, 'Изменения остатков', 'ИО');

@defineDocumentInterfaceDataStock(adjustment, stock, 'Склад');
@defineDocumentDialogStocks(userAdjustment, stock, company, , );

@defineExternalizable(userAdjustment, STRING[100]);

@defineDocumentInterfacePosted(adjustment);
@defineDocumentInterfaceClosed(adjustment);
@defineDocumentClosedConstraint(UserAdjustment);

@defineDocumentInterfaceDescription(adjustment, 'Изменение остатков');

@defineDocumentInterfaceCurrency(adjustment);
@deriveDocumentCurrency(userAdjustment, stock);

@defineDocumentInterfaceDetailSku(adjustment, sku);
@showDocumentInterfaceDetailBatch(adjustment);
@defineDocumentInterfaceDetailBatch(adjustment, batch);

replace(Sku s, Batch b) + {  sku(UserAdjustmentDetail detail) <- s WHERE batch(detail) == b;}

@defineDocumentInterfaceDetailQuantity(adjustment);
@defineDocumentInterfaceDetailPrice(adjustment);

id = DATA STRING[100] (UserAdjustmentDetail);
userAdjustmentDetail (id, userAdjustment) = GROUP AGGR UserAdjustmentDetail userAdjustmentDetail WHERE userAdjustmentDetail IS UserAdjustmentDetail BY id(userAdjustmentDetail), userAdjustment(userAdjustmentDetail);

@deriveDocumentDetailPriceAccountBatch(userAdjustment, sku, stock);

@defineDocumentInterfaceDetailDataSum(adjustment);
@deriveDocumentDetailSum(userAdjustment, quantity);

@defineDocumentInterfaceHeaderQuantity(adjustment);
@defineDocumentHeaderSkuQuantity(adjustment, sku);
@defineDocumentHeaderSkuQuantity(userAdjustment, sku);
@defineDocumentInterfaceHeaderSum(adjustment);

@defineAddDetailDialogSkuStock(userAdjustment, sku, stock, dialogSku);
@defineAddDetailDialogBarcode(userAdjustment, sku);

@implementDocument(adjustment);

@implementDocumentForm(adjustment, a, 'Изменение остатков');

@implementDocumentBatch(adjustment);

@implementDocumentBatchForm(a);

supplierStock(Adjustment adjustment) += stock(adjustment);

@defineMovementSku(adjustmentDetail, stock); //-- показываем по нажатию правой клавиши движение товара
@defineMovementSku(userAdjustmentDetail, stock); //-- показываем по нажатию правой клавиши движение товара
@defineBalancesSku(adjustmentDetail); //-- показываем по нажатию правой клавиши остатки товара
@defineBalancesSku(userAdjustmentDetail); //-- показываем по нажатию правой клавиши остатки товара

@defineInfoSku(adjustmentDetail); //-- показываем по нажатию правой клавиши информацию по товару
@defineInfoSku(userAdjustmentDetail); //-- показываем по нажатию правой клавиши информацию по товару

@defineBarcodeSku(userAdjustmentDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
@defineBarcodeSku(adjustmentDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
@defineMovementPriceSku(adjustmentDetail, stock); //-- показываем по нажатию правой клавиши изменение цены товара
@defineMovementPriceSku(userAdjustmentDetail, stock); //-- показываем по нажатию правой клавиши  изменение цены товара

@defineReserveSku(userAdjustmentDetail, stock);
@defineReserveSku(adjustmentDetail, stock);


// --------------------------- Формы ---------------------------------- //

batchDialog(UserAdjustmentDetail userAdjustmentDetail)  { 
    DIALOG dialogBatchStockOut OBJECTS st = stock(userAdjustmentDetail), 
                                       t = dateTime(userAdjustmentDetail),
                                       sk = sku(userAdjustmentDetail),
                                       bt = batch(userAdjustmentDetail) INPUT NULL NEWSESSION DO {
        batch(userAdjustmentDetail) <- bt;
    }
}

FORM userAdjustment 'Изменение остатков'
    OBJECTS i = UserAdjustment PANEL
    PROPERTIES (i) isPosted, nameStock ON CHANGE changeStockCompany(i),
                   nameNumerator, number, series, date, time,
                   nameCurrency,  note,
                   countUserAdjustmentDetail, quantityUserAdjustmentDetail, sumUserAdjustmentDetail,
                   countUserAdjustmentDetailSelection = countUserAdjustmentDetail, quantityUserAdjustmentDetailSelection = quantityUserAdjustmentDetail,
                   sumUserAdjustmentDetailSelection = sumUserAdjustmentDetail

    OBJECTS d = UserAdjustmentDetail
    PROPERTIES (d) index, idBarcodeSku, idSku SHOWIF showIDs(), nameSku, shortNameUOMSku,
                   nameBatch ON CHANGE batchDialog(d), quantity, price, sum,
                   nameStock, NEW, deleted = DELETE GRID

    PROPERTIES(i) DRAW d fillDocument, addDetailDialogSkuStockUserAdjustmentDetail,
                           addDetailInputBarcodeUserAdjustmentDetail, deleteUserAdjustmentDetail
    FILTERS userAdjustment(d) == i

    EVENTS
        ON OK prePost(i)

    EDIT UserAdjustment OBJECT i
;

DESIGN userAdjustment {
    BOX {
        size = (1024, 768);
        NEW mainTabbed {
            type = TABBED;
            fill = 1;
            NEW documentBox {
                type = CONTAINERV;
                fill = 1;
                caption = 'Изменение остатков';
                NEW headerBox {
                    type = CONTAINERH;
        
                    NEW headerRow1 {
                        fill = 1;
        
                        MOVE GROUP(documentHeader,i) {
                            columns = 1;
                            type = CONTAINERV;
                            NEW first {
                                type = CONTAINERH;
                                MOVE PROPERTY(isPosted(i)) { charWidth = 10; }
                                MOVE PROPERTY(nameStock(i));
                            }
                            NEW second { 
                                type = CONTAINERH;
                                MOVE PROPERTY(nameNumerator(i));
                                MOVE PROPERTY(number(i));
                                MOVE PROPERTY(series(i));
                                MOVE PROPERTY(date(i));
                                MOVE PROPERTY(time(i));
                            }                                                                                
                        }
        
                        NEW headerTabbedPane {
                            alignment = STRETCH;
                            type = TABBED;
                            NEW headerMainParams {
                                caption = 'Основные параметры';
                                MOVE GROUP(documentPrm,i) {
                                    columns = 2;
                                }
                            }
                            NEW headerExtraParams {
                                caption = 'Дополнительные параметры';
                            }
                            NEW headerCreateDetail {
                                caption = 'Основание';
                            }
                            NEW headerCreateDocuments {
                                caption = 'Производные документы';
                            }
                        }
                    }
        
                    MOVE GROUP(documentSum,i) {
                        columns = 1;
                    }
                }
        
                NEW specificationBox {
                    fill = 1;
                    type = TABBED;
                    MOVE BOX(d) {
                        caption = 'Спецификация';
                    }
                }
            }
        }
        MOVE TOOLBARBOX;

        PROPERTY(formOk()) {
            caption = 'Провести';
        }
        PROPERTY(sumUserAdjustmentDetail(i)) { charWidth = 13;}
    }
}

//-- SKU
@defineDocumentSkuStockPriceListTypeSystemLedger(userAdjustment, );
@extendFormDocumentSkuStock(userAdjustment, userAdjustment, i, legalEntityStock, );

@defineDocumentBatchStockPriceListTypeSystemLedger(userAdjustment, );
@extendFormDocumentBatchStock(userAdjustment, userAdjustment, i, legalEntityStock, );

EXTEND FORM userAdjustment

    FILTERGROUP filter
        FILTER 'С остатком ' currentBalance(ks,st) 'F10' DEFAULT
        FILTER 'С отрицательным остатком ' currentBalance(ks,st)<0
        FILTER 'В документе ' quantity(ks, i, st) 'F9'

;

EXTEND FORM userAdjustment

    FILTERGROUP filter1
        FILTER 'С остатком ' currentBalance(b,sto) 'F10' DEFAULT
        FILTER 'С отрицательным остатком ' currentBalance(b,sto)<0
        FILTER 'В документе ' quantity(b, i, st) 'F9'
;

//----------------------------------------------- Операции -----------------------------------------------------//
@defineDocumentInterfaceOperation (adjustment, Stock, );

@defineDocumentOperationConstraint(adjustment, 'изменение остатков', Adjustment);
@defineDocumentOperationRolePrefix(userAdjustment, );

EXTEND FORM userAdjustment
    PROPERTIES(i) nameOperation
;
DESIGN userAdjustment{
    first{
        MOVE PROPERTY (nameOperation(i)) BEFORE PROPERTY(nameStock(i));
    }
}

@defineOperationChangesDocument(adjustment, Adjustment, preventChangesDocument, created);

skipShowEdit = ABSTRACT BOOLEAN (Adjustment);
skipShowDelete = ABSTRACT BOOLEAN (Adjustment);

showEdit (Adjustment a) = showEditDeleteUser(a) AND isOpened(a) AND NOT skipShowEdit(a); 
showDelete(UserAdjustment a) = showEditDeleteUser(a) AND isOpened(a) AND is(a) AND NOT skipShowDelete(a);

prevCurrentBalance 'Остаток (до)' (Sku sku, UserAdjustment userAdjustment, Stock stock) = prevBalanceB(sku, stock, dateTime(userAdjustment)) ;
actualBalance 'Остаток фактический' (Sku sku, UserAdjustment userAdjustment, Stock stock)= prevCurrentBalance(sku, userAdjustment, stock) (+) quantity(sku, userAdjustment, stock);

changeActualQuantity(Sku sku, UserAdjustment userAdjustment, Stock stock)  { 
    INPUT n = NUMERIC[16,5] DO
        changeQuantityValue(sku, userAdjustment, stock, n (-) prevCurrentBalance(sku, userAdjustment, stock));
}

EXTEND FORM userAdjustment
    PROPERTIES actualBalance(ks,i,st) ON CHANGE changeActualQuantity(ks,i,st) BEFORE prevCurrentBalance(ks,st)
    PROPERTIES READONLY prevCurrentBalance(ks,i,st) BEFORE prevCurrentBalance(ks,st)
;

prevCurrentBalance 'Остаток (до)' (Batch batch, UserAdjustment userAdjustment, Stock stock) = prevBalanceB(batch, stock, dateTime(userAdjustment)) ;
actualBalance 'Остаток фактический' (Batch batch, UserAdjustment userAdjustment, Stock stock) = 
    prevCurrentBalance(batch, userAdjustment, stock) (+) quantity(batch, userAdjustment, stock);

changeActualQuantity(Batch batch, UserAdjustment userAdjustment, Stock stock)  { 
    INPUT n = NUMERIC[16,5] DO
        changeQuantityValue(batch, userAdjustment, stock, n (-) prevCurrentBalance(batch, userAdjustment, stock));
}

EXTEND FORM userAdjustment
    PROPERTIES actualBalance(b, i, sto) ON CHANGE changeActualQuantity(b,i,sto) BEFORE prevCurrentBalance(b,sto)
    PROPERTIES READONLY prevCurrentBalance(b, i, sto) BEFORE prevCurrentBalance(b,sto)
;

filterAdjustmentDateFrom 'Дата с' = DATA LOCAL DATE ();
filterDateFrom (Adjustment i) = date(i) >= filterAdjustmentDateFrom() OR NOT filterAdjustmentDateFrom();      

filterAdjustmentDateTo 'Дата по' = DATA LOCAL DATE ();
filterDateTo (Adjustment i) = date(i) <= filterAdjustmentDateTo() OR NOT filterAdjustmentDateTo();   

FORM adjustments 'Изменения остатков'
    PROPERTIES () filterAdjustmentDateFrom, filterAdjustmentDateTo   
    
    OBJECTS i = Adjustment
    PROPERTIES (i) READONLYIF isReadonly() isClosed, isPosted, number, series, date, time,
                            nameStock, nameOperation, nameCurrency
    PROPERTIES (i) READONLY countAdjustmentDetail, quantityAdjustmentDetail,
                            sumAdjustmentDetail
    PROPERTIES (i) READONLYIF isReadonly() note

    PROPERTIES (i) READONLY PANEL createdNameUser, createdTime, createdHostnameComputer, 
                                        postedNameUser, postedTime, postedHostnameComputer

    PROPERTIES (i) NEWSESSION NEW[UserAdjustment], editI = EDIT SHOWIF showEdit(i), deletei = DELETE SHOWIF showDelete[UserAdjustment](i)
    PROPERTIES(i)  close[UserAdjustment] SHOWIF isOpened[UserAdjustment](i), open SHOWIF isClosed[UserAdjustment](i)     

    FILTERS filterDateFrom(i),
            filterDateTo(i)
    
    OBJECTS d = AdjustmentDetail
    PROPERTIES (d) READONLY index, idBarcodeSku, idSku SHOWIF showIDs(), nameSku, shortNameUOMSku,
                   nameBatch, quantity, price, sum, nameStock

    FILTERS adjustment(d) == i

    LIST Adjustment OBJECT i
;
@extendFormFilterAccessStock(Adjustment, i, adjustments, stock, company);
@extendFormFilterRoleAccess(adjustment, i, adjustments);

DESIGN adjustments {
    BOX {
        size = (1024, 768);

        NEW filter {
            caption = 'Фильтры';
            type = CONTAINERH;
            MOVE PROPERTY (filterAdjustmentDateFrom());
            MOVE PROPERTY (filterAdjustmentDateTo());
        }

        NEW documentContainer {
            fill = 1;
            type = SPLITV;

            MOVE BOX(i) { fill = 2; }

            NEW documentDetail {
                fill = 1;
                type = TABBED;

                MOVE BOX(d) {
                    caption = 'Спецификация';
                }
                NEW documentHistory {
                    caption = 'История';

                    MOVE GROUP(created,i);
                    MOVE GROUP(posted,i);
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                    }
                }
                NEW actionContainer {
                    caption = 'Действия';
                    type = CONTAINERH;
                    NEW createdContainer {
                        caption = 'Создать новый документ';
                        type = CONTAINERV;
                    }
                }
            }
        }
        
        MOVE TOOLBARBOX; 
    }
}
@extendFormEditable(adjustments);
@defineFilterIsOpened (adjustment, adjustments, i);
@defineDocumentLogForm(adjustments, i);

NAVIGATOR {
    stockNavigator {
        NEW FOLDER adjustmentNavigator 'Изменение остатков' BEFORE balanceSku {
            NEW adjustments;
            NEW operations;
        }
    }
}

//---------------------------- Изменение остатка sku----------------------------//

CLASS ABSTRACT AdjustmentSkuDetail 'Изменение остатка ' : DataSkuLedger;
TABLE adjustmentSkuDetail (AdjustmentSkuDetail);

CLASS OutAdjustmentSkuDetail 'Изменение остатка (-)' : AdjustmentSkuDetail;
CLASS InAdjustmentSkuDetail 'Изменение остатка (+)' : AdjustmentSkuDetail;

needToOutLedger (AdjustmentDetail adjustmentDetail) = ((quantity(adjustmentDetail) < 0 ) OR batch(adjustmentDetail))
    AND isPosted(adjustmentDetail);
needToOutLedger (adjustment) = GROUP SUM 1 IF needToOutLedger(AdjustmentDetail adjustmentDetail)
    BY adjustment(adjustmentDetail);

// Все партии проводим по OutLedger
needToInLedger (AdjustmentDetail adjustmentDetail) = isPosted(adjustmentDetail) AND NOT (quantity(adjustmentDetail) < 0) AND NOT batch(adjustmentDetail);
needToInLedger (adjustment) = GROUP SUM 1 IF needToInLedger(AdjustmentDetail adjustmentDetail)
    BY adjustment(adjustmentDetail);

outAdjustmentSkuDetail = AGGR OutAdjustmentSkuDetail WHERE needToOutLedger(AdjustmentDetail adjustmentDetail) MATERIALIZED INDEXED;
inAdjustmentSkuDetail = AGGR InAdjustmentSkuDetail WHERE needToInLedger(AdjustmentDetail adjustmentDetail) MATERIALIZED INDEXED;

adjustmentDetail(AdjustmentSkuDetail adjustmentSkuDetail) = MULTI adjustmentDetail[OutAdjustmentSkuDetail](adjustmentSkuDetail),
                                                                 adjustmentDetail[InAdjustmentSkuDetail](adjustmentSkuDetail);

@defineDocumentDetailTime(adjustmentDetail, AdjustmentSkuDetail);
@defineDocumentDetailPosted(adjustmentDetail, AdjustmentSkuDetail);
@defineDocumentDetailClosed(adjustmentDetail, AdjustmentSkuDetail);

stock(InAdjustmentSkuDetail adjustmentSkuDetail) = stock(adjustmentDetail(adjustmentSkuDetail));
stock(OutAdjustmentSkuDetail adjustmentSkuDetail) = stock(adjustmentDetail(adjustmentSkuDetail));
stock(AdjustmentSkuDetail adjustmentSkuDetail) = MULTI stock[InAdjustmentSkuDetail](adjustmentSkuDetail),
                                                      stock[OutAdjustmentSkuDetail](adjustmentSkuDetail) MATERIALIZED INDEXED;

batch(InAdjustmentSkuDetail adjustmentSkuDetail) = batch(adjustmentDetail(adjustmentSkuDetail));
batch(OutAdjustmentSkuDetail adjustmentSkuDetail) = batch(adjustmentDetail(adjustmentSkuDetail));
batch(AdjustmentSkuDetail adjustmentSkuDetail) = MULTI batch[InAdjustmentSkuDetail](adjustmentSkuDetail),
                                                      batch[OutAdjustmentSkuDetail](adjustmentSkuDetail) MATERIALIZED INDEXED;

quantity (OutAdjustmentSkuDetail adjustmentSkuDetail) = quantity(adjustmentDetail(adjustmentSkuDetail));
quantity (InAdjustmentSkuDetail adjustmentSkuDetail) = quantity(adjustmentDetail(adjustmentSkuDetail));   // -
quantity 'Кол-во изменения' (AdjustmentSkuDetail adjustmentSkuDetail) = MULTI quantity[OutAdjustmentSkuDetail](adjustmentSkuDetail),
                                                                             quantity[InAdjustmentSkuDetail](adjustmentSkuDetail) MATERIALIZED;

sum (OutAdjustmentSkuDetail adjustmentSkuDetail) = sum(adjustmentDetail(adjustmentSkuDetail));
sum (InAdjustmentSkuDetail adjustmentSkuDetail) = sum(adjustmentDetail(adjustmentSkuDetail));        // -
sum 'Сумма изменения' (AdjustmentSkuDetail adjustmentSkuDetail) = MULTI sum[OutAdjustmentSkuDetail](adjustmentSkuDetail),
                                                                       sum[InAdjustmentSkuDetail](adjustmentSkuDetail) MATERIALIZED;

sku (OutAdjustmentSkuDetail adjustmentSkuDetail) = sku(adjustmentDetail(adjustmentSkuDetail));
sku (InAdjustmentSkuDetail adjustmentSkuDetail) = sku(adjustmentDetail(adjustmentSkuDetail));
sku(AdjustmentSkuDetail adjustmentSkuDetail) = MULTI sku[OutAdjustmentSkuDetail](adjustmentSkuDetail),
                                                    sku[InAdjustmentSkuDetail](adjustmentSkuDetail) MATERIALIZED INDEXED;
nameSku 'Товар' (AdjustmentSkuDetail adjustmentSkuDetail) = name(sku(adjustmentSkuDetail)) CHARWIDTH 15;
idBarcode 'Штрихкод' (AdjustmentSkuDetail adjustmentSkuDetail) =  idBarcode(sku(adjustmentSkuDetail));

description 'Название документа' (OutAdjustmentSkuDetail adjustmentSkuDetail) = description(adjustmentDetail(adjustmentSkuDetail));
description 'Название документа' (InAdjustmentSkuDetail adjustmentSkuDetail) = description(adjustmentDetail(adjustmentSkuDetail));
description 'Название документа' (AdjustmentSkuDetail adjustmentSkuDetail) = MULTI description[OutAdjustmentSkuDetail](adjustmentSkuDetail),
                                                                                  description[InAdjustmentSkuDetail](adjustmentSkuDetail) MATERIALIZED;

adjustment 'Название документа' (AdjustmentSkuDetail adjustmentSkuDetail) = MULTI adjustment(adjustmentDetail[OutAdjustmentSkuDetail](adjustmentSkuDetail)),
                                                                                 adjustment(adjustmentDetail[InAdjustmentSkuDetail](adjustmentSkuDetail)) MATERIALIZED INDEXED;

@implementSkuLedger(adjustmentSkuDetail, sku, stock);

// Не проводим по товарному отчету
//@implementStockDocumentLedgerOut(Adjustment, stock);
//sumOutStockDocumentLedger (ledger) += sumAdjustmentDetailAdjustment(ledger);
//sumItemOutStockDocumentLedger (ledger) += sumAdjustmentDetailAdjustment(ledger);
//sumContainerOutStockDocumentLedger (ledger) += 0.0 IF ledger IS Adjustment;
//
//stockDocumentLedgerSkuLedger(ledger) += adjustmentAdjustmentSkuDetail(ledger);

batch(AdjustmentSkuDetail ledger) += batch(ledger);

skipSkuLedger = ABSTRACT BOOLEAN (AdjustmentSkuDetail);

EXTEND CLASS OutAdjustmentSkuDetail : OutFIFOSkuLedger;
quantity (OutAdjustmentSkuDetail ledger) += -quantity(ledger) IF NOT skipSkuLedger(ledger);
@implementSkuLedgerOutFIFOBatchBalance(outAdjustmentSkuDetail, stock);
sum (OutAdjustmentSkuDetail ledger) += -sum(ledger) IF NOT skipSkuLedger(ledger);

EXTEND CLASS InAdjustmentSkuDetail : InLIFOSkuLedger;
quantity (InAdjustmentSkuDetail ledger) += quantity(ledger) IF NOT skipSkuLedger(ledger);
@implementSkuLedgerInLIFOBatchBalance(inAdjustmentSkuDetail, stock);
sum (InAdjustmentSkuDetail ledger) += sum(ledger) IF NOT skipSkuLedger(ledger);

edit(UserAdjustmentDetail d) + {  DIALOG userAdjustment OBJECTS i = userAdjustment(d), d = d DOCKED; }

edit(InAdjustmentSkuDetail d) + {  edit(adjustmentDetail(d)); }
edit(OutAdjustmentSkuDetail d) + {  edit(adjustmentDetail(d)); }

show 'Просмотреть'  ABSTRACT LIST  ( AdjustmentDetail) TOOLBAR;
show(UserAdjustmentDetail d)  { 
	NEWSESSION {
	    SHOW userAdjustment OBJECTS i = userAdjustment(d), d = d DOCKED READONLY;
	}
}

show(UserAdjustmentDetail d) + {  show(d); }    
show(InAdjustmentSkuDetail d) + {  show(adjustmentDetail(d)); }
show(OutAdjustmentSkuDetail d) + {  show(adjustmentDetail(d)); }

quantityPositiveAdjustmentDetail 'Кол-во приход (всего)' (adjustment) = GROUP SUM quantity(AdjustmentDetail idetail) IF quantity(idetail) >=0
    BY adjustment(idetail) IN documentSum MATERIALIZED;
quantityNegativeAdjustmentDetail 'Кол-во расход (всего)' (adjustment) = GROUP SUM -quantity(AdjustmentDetail idetail) IF quantity(idetail) <0
    BY adjustment(idetail) IN documentSum MATERIALIZED;

sumPositiveAdjustmentDetail 'Сумма приход (всего)' (adjustment) = GROUP SUM sum(AdjustmentDetail idetail) IF quantity(idetail) >=0
    BY adjustment(idetail) IN documentSum MATERIALIZED;
sumNegativeAdjustmentDetail 'Сумма расход (всего)' (adjustment) = GROUP SUM -sum(AdjustmentDetail idetail) IF quantity(idetail) <0
    BY adjustment(idetail) IN documentSum MATERIALIZED;
    
sumNegative = -sum(AdjustmentDetail idetail);
quantityNegative = -quantity(AdjustmentDetail idetail);

@defineDocumentStockAccess(UserAdjustment, stock, company);
    
FORM printAdjustment 'Изменения остатков'
    OBJECTS i = Adjustment PANEL SUBREPORT 
    PROPERTIES (i) READONLY isClosed, isPosted, seriesNumber, number, series, date, time,
                            nameStock, addressStock, nameCurrency
    PROPERTIES (i) READONLY countAdjustmentDetail, quantityAdjustmentDetail,
                            sumAdjustmentDetail, note,
                            quantityPositiveAdjustmentDetail, quantityNegativeAdjustmentDetail, sumPositiveAdjustmentDetail,
                            sumNegativeAdjustmentDetail 

    OBJECTS d = AdjustmentDetail
    PROPERTIES (d) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku,
                   nameBatch, quantity, price, sum, nameStock
    FILTERS adjustment(d) == i,
            quantity(d)>=0
    
    OBJECTS dd = AdjustmentDetail
    PROPERTIES (dd) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku,
                   nameBatch, quantityNegative, price, sumNegative, nameStock
    FILTERS adjustment(dd) == i,
            quantity(dd)<0

;
print 'Изменение остатков' (Adjustment adjustment) 
    { PRINT printAdjustment OBJECTS i = adjustment; }   IMAGE 'print.png' IN print;
    
notPrint = ABSTRACT BOOLEAN (Adjustment);
toShowPrint (Adjustment a) = a IS Adjustment AND NOT notPrint(a);  
    
EXTEND FORM adjustments
    PROPERTIES (i) print SHOWIF toShowPrint(i)
;
DESIGN adjustments{
    printContainer {
        MOVE GROUP(print,i);   
    }
}

active 'Провести по товарному отчету' = ABSTRACT BOOLEAN (Adjustment);
active 'Провести по товарному отчету' = DATA BOOLEAN (UserAdjustment) IN documentPrm;
active(UserAdjustment i) += active(i);

EXTEND FORM adjustments
    PROPERTIES(i) READONLY active
;
EXTEND FORM userAdjustment
    PROPERTIES (i) active
;

@defineOperationProperty(active, 'Провести по товарному отчету', BOOLEAN, paramsContainer);

@defineOperationProperty(allowSumAdjustment, 'Pазрешённая сумма по изменению остатков', NUMERIC[16,3], paramsContainer);

CONSTRAINT (SET (isPosted(UserAdjustment a)) OR SETCHANGED(operation(a)) OR SETCHANGED(sumAdjustmentDetail(a))) AND isPosted(a) AND (abs(sumAdjustmentDetail(a))>allowSumAdjustment(operation(a))) 
    MESSAGE 'Сумма по документу не должна превышать заданной в операции';

@deriveDocumentOperationProperty(UserAdjustment, active);

// ------------ Проведение по товарному отчету ----------------- //

@defineDocumentInterfaceHeaderItemSum (adjustment, , );

CLASS OutAdjustment 'Изменение остатков расход' : OutStockDocumentLedger;
CLASS InAdjustment 'Изменение остатков приход' : IncStockDocumentLedger;

//-- Расход
needToOutStockLedger = Adjustment l IS Adjustment AND NOT sumAdjustmentDetail(l) > 0; //activeAdjustment(l) AND  
OutAdjustment = AGGR OutAdjustment WHERE needToOutStockLedger(Adjustment adjustment) MATERIALIZED INDEXED;

isPosted (OutAdjustment ledger) += isPosted(adjustment(ledger));  
isClosed (OutAdjustment ledger) += isClosed(adjustment(ledger));                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
series (OutAdjustment ledger) += series(adjustment(ledger));
number (OutAdjustment ledger) += number(adjustment(ledger));
dateTime (OutAdjustment ledger) += dateTime(adjustment(ledger));
stock (OutAdjustment ledger) += stock(adjustment(ledger));
description (OutAdjustment ledger) += description(adjustment(ledger));                                                                                                                                                                                                                                   
sumContainer(OutAdjustment ledger) += -sumContainerAdjustmentDetail(adjustment(ledger));
sumItem(OutAdjustment ledger) += -sumItemAdjustmentDetail(adjustment(ledger));
edit(OutAdjustment ledger) + {  edit(adjustment(ledger)); }
close(OutAdjustment ledger) + {  close(adjustment(ledger)); }
type(OutAdjustment ledger) += STRING[50]('Изменение остатков расход') IF ledger IS OutAdjustment;
skip(OutAdjustment ledger) += ledger IS OutAdjustment AND NOT active(adjustment(ledger));
operation[StockDocumentLedger](OutAdjustment ledger) += operation(adjustment(ledger));

//-- Приход
needToInStockLedger = sumAdjustmentDetail(Adjustment l) > 0; //activeAdjustment(l) AND  
InAdjustment = AGGR InAdjustment WHERE needToInStockLedger(Adjustment adjustment) MATERIALIZED INDEXED;

isPosted (InAdjustment ledger) += isPosted(adjustment(ledger));  
isClosed (InAdjustment ledger) += isClosed(adjustment(ledger));                                                                                                                                                                                                                                                                                                                                                                                                                                                                    
series (InAdjustment ledger) += series(adjustment(ledger));
number (InAdjustment ledger) += number(adjustment(ledger));
dateTime (InAdjustment ledger) += dateTime(adjustment(ledger));
stock (InAdjustment ledger) += stock(adjustment(ledger));
description (InAdjustment ledger) += description(adjustment(ledger));                                                                                                                                                                                                                                   
sumContainer(InAdjustment ledger) += sumContainerAdjustmentDetail(adjustment(ledger));
sumItem(InAdjustment ledger) += sumItemAdjustmentDetail(adjustment(ledger));
edit(InAdjustment ledger) + {  edit(adjustment(ledger)); }
close(InAdjustment ledger) + {  close(adjustment(ledger)); }
type(InAdjustment ledger) += STRING[50]('Изменение остатков приход') IF ledger IS InAdjustment;
skip(InAdjustment ledger) += ledger IS InAdjustment AND NOT active(adjustment(ledger));
operation[StockDocumentLedger](InAdjustment ledger) += operation(adjustment(ledger));

stockDocumentLedger(OutAdjustmentSkuDetail d) += [OVERRIDE OutAdjustment(A), InAdjustment(A)] (adjustment(adjustmentDetail[OutAdjustmentSkuDetail](d)));
stockDocumentLedger(InAdjustmentSkuDetail d) += [OVERRIDE OutAdjustment(A), InAdjustment(A)](adjustment(adjustmentDetail[InAdjustmentSkuDetail](d)));

calcSumB (Sku sku,Stock st,DATETIME dateTime) = balanceB(sku,st,dateTime) * prevAccountPriceB(sku, st, dateTime);
needCreateAdjustment = (calcSumB (Sku sku,Stock st,DATETIME dateTime) OR  sumB (sku,st,dateTime)) AND NOT (calcSumB (sku,st,dateTime) ==  sumB (sku,st,dateTime));  

createUserAdjustment(DATETIME dateTime)  { 
    FOR [GROUP SUM 1 IF needCreateAdjustment(Sku sku,Stock st,dateTime) BY st](Stock st) AND isCompany(st) DO {
        NEWSESSION {
            NEW a = UserAdjustment {
                stock(a) <- st;
                isPosted(a) <- TRUE;
                FOR needCreateAdjustment(Sku sku,st,dateTime) NEW  d = UserAdjustmentDetail DO {
                    userAdjustment(d) <- a;
                    sku(d) <- sku;
                    sum(d) <- NUMERIC[18,4](sumB(sku,st,dateTime) (-) calcSumB(sku,st,dateTime));    
                }
            }
            apply();
        }        
    }
} 


dataInSession 'Отм.' = DATA LOCAL BOOLEAN (SkuGroup);

levelParent (SkuGroup group) = GROUP
    MIN level(group, SkuGroup parent) IF dataInSession(parent);

inParent (SkuGroup group) = TRUE IF levelParent(group);

inSession 'Отм.' (SkuGroup group) = OVERRIDE
    dataInSession(group),
    inParent(group);

sessionConcatSkuGroups 'Группы' () =
    GROUP CONCAT name(SkuGroup group) IF inSession(group) AND NOT inSession(parent(group)),'; ' CHARWIDTH 30;

countInSessionSkuGroups  = GROUP SUM 1 IF dataInSession(SkuGroup g);
resetSelectedGroups  'Сбросить отмеченные'()  { 
    dataInSession(SkuGroup g) <- NULL WHERE g IS SkuGroup ;    
}  

dataInSession 'Отм.' = DATA LOCAL BOOLEAN (Sku);

inSession 'Отм.' (Sku sku) = OVERRIDE
    dataInSession(sku),
    inSession(skuGroup(sku));

countInSessionSkus  = GROUP SUM 1 IF inSession(Sku s);

toAdjustment (s,Stock st,DATETIME dt) = GROUP SUM 1 IF 
    balanceB(Batch b,st,dt) >0 AND balanceB(Batch b1,st,dt) <0 AND b !=b1 AND sku(b) == sku(b1)
        BY sku(b);
toAdjustment (Stock st,DATETIME dt) = GROUP SUM 1 IF toAdjustment (Sku s,st,dt);
//abs

toPositiveAdjustment (s,Stock st,DATETIME dt) = GROUP SUM balanceB(Batch b,st,dt) IF 
    balanceB(b,st,dt) >0 
        BY sku(b);
toNegativeAdjustment (s,Stock st,DATETIME dt) = GROUP SUM balanceB(Batch b,st,dt) IF 
    balanceB(b,st,dt) <0 
        BY sku(b);
        
FORM selectParamsAdjustment 'Параметры пересорта'
    OBJECTS st = Stock PANEL 
    PROPERTIES SELECTOR name(st)
    FILTERS isCompany(st)
    
    OBJECTS dt = DATETIME PANEL 
    PROPERTIES val = VALUE (dt)
    
    OBJECTS o = Operation PANEL 
    PROPERTIES SELECTOR name(o)
    
    TREE skuTree sk = SkuGroup PARENT parent(sk)
    PROPERTIES inSession(sk)
    PROPERTIES READONLY order(sk), skuTreeName = name(sk)
    ORDERS order(sk), skuTreeName
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F5' DEFAULT  
    
    OBJECTS sku = Sku
    PROPERTIES inSession(sku)
    PROPERTIES(sku) READONLY id SHOWIF showIDs(), name, idBarcode
    ORDERS name(sku)
    FILTERGROUP inactiveSku FILTER 'Активный' active(sku) 'F6' DEFAULT
    FILTERS isParent(sk,sku) OR (sku IS Sku AND NOT sk)
;
DESIGN selectParamsAdjustment {
    BOX {
        size = (1024, 768);
        NEW top {
            type = CONTAINERH;
            MOVE BOX(st);
            MOVE BOX(o); 
            MOVE BOX(dt) {caption ='Дата/время документа';}
        }
        NEW grids {
            type = SPLITH;
            fill = 1;
            MOVE BOX(TREE skuTree);
            MOVE BOX(sku);
        }
    }
    MOVE TOOLBARBOX;
}

inAdjustment = DATA LOCAL NESTED BOOLEAN (Sku);
inAdjustment = DATA LOCAL NESTED BOOLEAN (Stock);

createBatchUserAdjustmentDetail(UserAdjustment adjustment)  { 

    FOR Stock stock == stock(adjustment) AND DATETIME dateTime == dateTime(adjustment) DO {

        LOCAL balance = NUMERIC[16,5] (Batch);
        balance(Batch b) <- NULL;
        balance(Batch b) <- balanceB(b, stock, dateTime) WHERE balanceB(b, stock, dateTime) AND inAdjustment(sku(b));
        
        LOCAL adjust = NUMERIC[16,5] (Sku);
        adjust (Sku s) <- NULL; 
        adjust (Sku s) <- min(-[ GROUP SUM balance(Batch b) IF balance(b) < 0 BY sku(b)](s), [ GROUP SUM balance(Batch b) IF balance(b) > 0 BY sku(b)](s));
        
        LOCAL adjust = NUMERIC[16,5] (Batch);
        adjust(Batch b) <- NULL; 
        adjust(Batch b) <- PARTITION UNGROUP adjust
                                                LIMIT -balance(b) IF balance(b) < 0
                                                ORDER dateTime(b), b
                                                BY sku(b) WHERE balance(b) < 0;
        
        adjust(Batch b) <- - PARTITION UNGROUP adjust
                                                LIMIT balance(b) IF balance(b) > 0
                                                ORDER dateTime(b), b
                                                BY sku(b) WHERE balance(b) > 0;
    
        FOR adjust(Batch b) ORDER nameSku(b) NEW d = UserAdjustmentDetail DO {            
            userAdjustment(d) <- adjustment;
            sku(d) <- sku(b);
            batch(d) <- b;
            quantity(d) <- adjust(b);
        }
    }
}

defaultOperationBatch 'Операция для документа пересорта по партиям' = DATA Operation ();
nameDefaultOperationBatch 'Операция для документа пересорта по партиям' = name(defaultOperationBatch());

notCreateEmptyAdjustment 'Не создавать документы без строк при регламентных операциях' = DATA BOOLEAN () COMPLEX;

EXTEND FORM options
    PROPERTIES() nameDefaultOperationBatch, notCreateEmptyAdjustment
;

DESIGN options {
    pane {
        NEW stockAdjustment {
            caption = 'Изменение остатков';
            MOVE PROPERTY(nameDefaultOperationBatch());
            MOVE PROPERTY(notCreateEmptyAdjustment());
        }
    }
}

createDialogBatchUserAdjustment 'Пересорт по партиям'()  { 
	NEWSESSION {// NEWSESSION NESTED dataInSession[SkuGroup], chosenObject[BPSTRING[100]], chosenDateTime[BPSTRING[100]]
	    DIALOG selectParamsAdjustment OBJECTS o = defaultOperationBatch() NULL, st INPUT, dt INPUT, o INPUT NOMANAGESESSION DO
	        IF countInSessionSkus() THEN       
	            NEW adjustment = UserAdjustment {  
	                stock(adjustment) <- st;            
	                date(adjustment) <- DATE(dt);
	                time(adjustment) <- TIME(dt);          
	                operation(adjustment) <- o;          
	                inAdjustment(Sku sku) <- NULL;
	                inAdjustment(Sku sku) <- inSession(sku);
	                
	                createBatchUserAdjustmentDetail(adjustment);
	                SHOW userAdjustment OBJECTS i = adjustment DOCKED NOCANCEL;          
	            }        
	}
}

EXTEND FORM adjustments
    PROPERTIES createDialogBatchUserAdjustment()   
;
DESIGN adjustments {
    createdContainer {
        MOVE PROPERTY (createDialogBatchUserAdjustment()) { alignment = STRETCH; };
    }    
}

createBatchUserAdjustment 'Документ пересорта'(Stock stock)  { 

    IF toAdjustment(stock,currentDateTime()) THEN NEWSESSION {
        NEW adjustment = UserAdjustment {  
            stock(adjustment) <- stock;
            date(adjustment) <- currentDate();
            time(adjustment) <- currentTime();  
            isPosted(adjustment) <- TRUE;

            inAdjustment(Sku sku) <- TRUE;
//            inAdjustment(Sku sku) <- TRUE WHERE toAdjustment(sku,stock(adjustment),dateTime(adjustment));
            
            createBatchUserAdjustmentDetail(adjustment);      
        }
        apply();
    }
}//-- для планировщика

//-- Для всех складов
overCreateBatchUserAdjustment  ABSTRACT LIST ( UserAdjustment);

createBatchUserAdjustmentDetailEx   ABSTRACT LIST ( UserAdjustment);

createBatchUserAdjustment 'Документ пересорта'()  { 
    FOR inAdjustment(Stock st) NEW a = UserAdjustment DO {  
        stock(a) <- st;
        date(a) <- currentDate();
        time(a) <- currentTime();  
        isPosted(a) <- TRUE;
        operation(a) <- defaultOperationBatch();
        
        overCreateBatchUserAdjustment(a);
        
        createBatchUserAdjustmentDetail(a);  
        createBatchUserAdjustmentDetailEx(a);
        
        IF notCreateEmptyAdjustment() AND NOT countUserAdjustmentDetail(a) THEN
            DELETE a;
    }
}//-- для планировщика


//------------------------------- Корректировка суммы ТО -----------------------//

defaultOperationSum 'Операция для документа корректировки сумм ТО' = DATA Operation ();
nameDefaultOperationSum 'Операция для документа корректировки сумм ТО' = name(defaultOperationSum());
minSumAdjustment 'Минимальная сумма отклонения' = DATA NUMERIC[16,4] ();

EXTEND FORM options
    PROPERTIES() nameDefaultOperationSum, minSumAdjustment
;

DESIGN options {
    stockAdjustment {
        MOVE PROPERTY(nameDefaultOperationSum());
        MOVE PROPERTY(minSumAdjustment());
    }
}


accountSumB 'Учетная сумма'  (Sku s, Stock st, DATETIME dt)= round2(balanceB(s,st,dt) * prevAccountPriceB(s, st, dt));
diff 'Разница' (Sku s, Stock st, DATETIME dt) = sumB(s,st,dt)(-) accountSumB(s,st,dt);

accountSumB 'Учетная сумма'  (Batch b, Stock st, DATETIME dt)= round2(balanceB(b,st,dt) * prevAccountPriceB(b, st, dt));
diff 'Разница' (Batch b, Stock st, DATETIME dt) = sumB(b,st,dt)(-) accountSumB(b,st,dt);

createSumUserAdjustment (UserAdjustment adjustment)  { 

    // todo : деноминация
    IF explicitBatchLedger(stock(adjustment)) THEN {
        FOR NUMERIC[32,9] sumDiff == diff(Batch b, stock(adjustment), dateTime(adjustment)) AND abs(sumDiff) > (OVERRIDE minSumAdjustment(), 0.1)
        AND inAdjustment(sku(b)) ORDER name(sku(b)), name(b) NEW d = UserAdjustmentDetail DO {            
            userAdjustment(d) <- adjustment;
            sku(d) <- sku(b);
            batch(d) <- b;       
            quantity(d) <- 0.0;
            sum(d) <- NUMERIC[18,4](-sumDiff);
        }
    } ELSE {
        FOR NUMERIC[32,9] sumDiff == diff(Sku s, stock(adjustment), dateTime(adjustment)) AND abs(sumDiff) > (OVERRIDE minSumAdjustment(), 0.1)
        AND inAdjustment(s) ORDER name(s) NEW d = UserAdjustmentDetail DO {            
            userAdjustment(d) <- adjustment;
            sku(d) <- s;       
            quantity(d) <- 0.0;
            sum(d) <- NUMERIC[18,4](-sumDiff);
        }
    }
}

createDialogSumUserAdjustment 'Корректировка суммы ТО'()  { 
	NEWSESSION {// NEWSESSION NESTED dataInSession[SkuGroup], chosenObject[BPSTRING[100]], chosenDateTime[BPSTRING[100]]
	    DIALOG selectParamsAdjustment OBJECTS o = defaultOperationSum() NULL, st INPUT, dt INPUT, o INPUT NOMANAGESESSION DO       
	        IF countInSessionSkus() THEN 
	            NEW adjustment = UserAdjustment {  
	                stock(adjustment) <- st;            
	                date(adjustment) <- DATE(dt);
	                time(adjustment) <- TIME(dt);          
	                operation(adjustment) <- o;          
	                
	                inAdjustment(Sku sku) <- NULL;
	                inAdjustment(Sku sku) <- inSession(sku);
	                
	                createSumUserAdjustment(adjustment);
	                SHOW userAdjustment OBJECTS i = adjustment DOCKED NOCANCEL;          
	            }        
	}
}

EXTEND FORM adjustments
    PROPERTIES createDialogSumUserAdjustment()   
;
DESIGN adjustments {
    createdContainer {
        MOVE PROPERTY (createDialogSumUserAdjustment()) { alignment = STRETCH; };
    }    
}

//-- Для всех складов
overCreateSumUserAdjustment  ABSTRACT LIST ( UserAdjustment);

createSumUserAdjustment 'Корректировка суммы ТО'()  { 
    FOR inAdjustment(Stock st) NEW a = UserAdjustment DO {  
        stock(a) <- st;
        date(a) <- currentDate();
        time(a) <- currentTime();  
        isPosted(a) <- TRUE;
        operation(a) <- defaultOperationSum();
        
        overCreateSumUserAdjustment(a);
        
        createSumUserAdjustment(a);      
        
        IF notCreateEmptyAdjustment() AND NOT countUserAdjustmentDetail(a) THEN
            DELETE a;
    }
}//-- для планировщика

show 'Просмотреть' (UserAdjustment i)  { 
	NEWSESSION {
	    SHOW userAdjustment OBJECTS i = i DOCKED READONLY;
	}
}TOOLBAR;

showToShow (UserAdjustment i) = is(i) AND NOT showEdit(i);
EXTEND FORM adjustments
    PROPERTIES show(i) SHOWIF showToShow(i) BEFORE editI
;

@defineAddSkuLists(userAdjustment, userAdjustment, i);

@defineNewSkuList(userAdjustment, userAdjustment, adjustments, i);

DESIGN userAdjustment {
    headerTabbedPane {
        NEW add AFTER headerCreateDocuments {
            caption = 'Подбор';
            type = CONTAINERH;
            alignment = START;
            MOVE PROPERTY(addSkuLists(i));
            MOVE PROPERTY(newSkuList(i));
        }
    }
    skuMainPane {
        NEW documentSumSelection BEFORE skuSelectPane {
            type = CONTAINERV;
            caption = 'Суммы документа';
            MOVE PROPERTY (countUserAdjustmentDetailSelection);
            MOVE PROPERTY (quantityUserAdjustmentDetailSelection);
            MOVE PROPERTY (sumUserAdjustmentDetailSelection);
        }
    }
}
