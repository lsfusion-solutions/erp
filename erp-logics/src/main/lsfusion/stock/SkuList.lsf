MODULE SkuList;

REQUIRE Sku, Item, Barcode;

NAMESPACE Sku;

CLASS List 'Список SKU';
TABLE list (List);

@defineExternalizable(list, STRING[100]);

order 'Порядок' = DATA INTEGER (List) CHARWIDTH 2;
name 'Наименование' = DATA ISTRING[250](List) IN base CHARWIDTH 20;

@defineHierarchy(list);

@defineHierarchyFilter(List, List, name, 'По наименованию');

in 'Отм.' = DATA LOCAL BOOLEAN (List);

moveList 'Перенести отмеченные группы в текущую'(list)  { 

    FOR in(List i) DO{
        IF i != list THEN {
            parent(i) <- list;
            in(i) <- NULL;
        } ELSE {
            MESSAGE 'Выделенная товарная группа не может совпадать с объединяемой';
        }
    }
}

CLASS ListDetail 'Строка списка SKU';
TABLE listDetail(ListDetail);

list = DATA List(ListDetail) NONULL DELETE;

sku = DATA Sku(ListDetail);
idSku 'Код товара' (ListDetail d) = id(sku(d));
idBarcodeSku 'Штрихкод товара' (ListDetail d) = idBarcode(sku(d));
nameSku 'Наименование товара' (ListDetail d) = name(sku(d));
shortNameUOMSku 'Ед. изм. товара' (ListDetail d) = shortNameUOM(sku(d));
canonicalNameSkuGroup 'Группа товара' (ListDetail d) = canonicalName(skuGroup(sku(d)));
nameBrandSku 'Бренд' (ListDetail d) = nameBrand(sku(d));
nameCountrySku 'Страна' (ListDetail d) = nameCountry(sku(d));
nameManufacturerSku 'Производитель' (ListDetail d) = nameManufacturer(sku(d));

listDetail = GROUP MAX ListDetail d BY sku(d), list(d);

//Доступ
dataAccess 'Доступ разрешен' = DATA BOOLEAN (Stock, List);
dataAccess 'Доступ разрешен' = DATA BOOLEAN (StockGroup, List);
limitAccessStock 'Ограничен доступ' (List l) = GROUP SUM 1 IF dataAccess(Stock s, l) OR dataAccess(stockGroup(s), l) MATERIALIZED COMPLEX;

levelParent (List list, StockGroup stockGroup) = GROUP MIN level(stockGroup, StockGroup parent) IF dataAccess(parent, list) MATERIALIZED;
nearestParent (List list, StockGroup stockGroup) = stockGroup(stockGroup, levelParent(list, stockGroup));
nearestIn (List list, StockGroup stockGroup) =
    dataAccess(nearestParent (list, stockGroup), list) MATERIALIZED;

access 'Доступ разрешен' (List list, StockGroup stockGroup) = OVERRIDE
    dataAccess(stockGroup, list),
    nearestIn(list, stockGroup),
    list IS List AND stockGroup IS StockGroup AND NOT limitAccessStock(list); // MATERIALIZED;

access 'Доступ разрешен' (List list, Stock stock) = OVERRIDE
    dataAccess(stock, list),
    nearestIn(list, stockGroup(stock)),
    list IS List AND stock IS Stock AND NOT limitAccessStock(list);

dataAccess 'Доступ разрешен' = DATA BOOLEAN (UserRole, List);
limitAccessRole 'Ограничен доступ' (List l) = GROUP SUM 1 IF dataAccess(UserRole r, l) MATERIALIZED COMPLEX;

access 'Доступ разрешен' (List list, UserRole role) = OVERRIDE
    dataAccess(role, list),
    list IS List AND role IS UserRole AND NOT limitAccessRole(list);

in 'Вкл.' (List l, Sku s) = TRUE IF [GROUP SUM 1 BY list(ListDetail d),  sku(d)](l, s);

changeIn (List l, Sku s) {
    INPUT b = BOOLEAN DO {
        IF NOT b THEN {
            DELETE ListDetail d WHERE list(d) == l AND sku(d) == s;
        }
        IF b THEN NEW d = ListDetail {
            list(d) <- l;
            sku(d) <- s;
        }
    }
}

CONSTRAINT sku(ListDetail d1) == sku(ListDetail d2) AND list(d1) == list(d2) AND d1 != d2 CHECKED BY sku[ListDetail] MESSAGE 'В списке SKU не должен повторятся товар';

FORM list 'Список SKU'
    OBJECTS l = List PANEL
    PROPERTIES (l) name, nameParent, order, id SHOWIF showIDs()
    ORDERS name(l)
    
    OBJECTS d = ListDetail
    PROPERTIES(d) idSku, idBarcodeSku, nameSku, shortNameUOMSku, canonicalNameSkuGroup, nameBrandSku, nameCountrySku, nameManufacturerSku, NEW, deleteE = DELETE 
    FILTERS list(d) == l
    ORDERS nameSku(d)
    
    TREE stockTree a = BPSTRING[3], sg = StockGroup  PARENT parent(sg)
    PROPERTIES READONLY VALUE(a), sgTreeName = name(sg)
    ORDERS sgTreeName
    FILTERS stringEqualsAll(a)
    PROPERTIES(l,sg) access

    OBJECTS s = Stock GRID
    PROPERTIES(s) READONLY id 
    PROPERTIES(s) READONLY stockName = name, nameLegalEntity
    ORDERS stockName
    FILTERS isParent(sg, s) OR (s IS Stock AND NOT sg)
    FILTERGROUP inactiveStock FILTER 'Активный' active(s) 'ctrl F10' DEFAULT
    PROPERTIES(l,s) access
    
    OBJECTS r = UserRole
    PROPERTIES access(l, r), name(r) READONLY
    ORDERS name(r)
    
    TREE skuTree skg = SkuGroup PARENT parent(skg)
    PROPERTIES READONLY order(skg), skuTreeName = name(skg)
    ORDERS order(skg), skuTreeName
    FILTERGROUP inactive FILTER 'Активные' active(skg) 'F5' DEFAULT

    OBJECTS sk = Sku
    PROPERTIES in(l, sk) ON CHANGE changeIn(l, sk)
    PROPERTIES (sk) READONLY id, idBarcode, name, shortNameUOM, canonicalNameSkuGroup, nameBrand, nameCountry, nameManufacturer
    FILTERGROUP in FILTER 'Отмеченные' in(l, sk)
    FILTERS isParent(skg, sk)
    ORDERS name(sk)
    
    EDIT List OBJECT l
;

DESIGN list {
    OBJECTS {
        NEW tab AFTER BOX (l) {
            type = TABBED;
            fill = 1;
            MOVE BOX (d) { caption = 'Товары'; }
            NEW access {
                caption = 'Доступ';
                NEW stockSplitContainer{
                    fill = 1;
                    type = SPLITH;
                    MOVE BOX(TREE stockTree) { 
                        caption = 'Группы складов';
                        PROPERTY (access(l,sg)) {valueWidth = 100; }
                    };
                    MOVE BOX(s) {
                        GRID(s) {
                            defaultComponent = TRUE;
                            PROPERTY (access(l,s)) {valueWidth = 100;}
                        }
                    }
                }
                MOVE BOX (r) { caption = 'Роли'; }
            }
            NEW select {
                caption = 'Подбор';
                type = SPLITH;
                fill = 1;
                MOVE BOX (TREE skuTree) { fill = 1; }
                MOVE BOX (sk) { fill = 3; }
            }
        }
    }
}

FORM lists 'Списки SKU'
    
    OBJECTS o = List
    PROPERTIES (o) READONLY canonicalName
    PROPERTIES(o) NEWSESSION NEW, EDIT, DELETE
    ORDERS canonicalName(o)
    
    OBJECTS d = ListDetail
    PROPERTIES(d) READONLY idSku, idBarcodeSku, nameSku, shortNameUOMSku, canonicalNameSkuGroup, nameBrandSku, nameCountrySku, nameManufacturerSku
    ORDERS nameSku(d)
    FILTERS list(d) == o
    
    TREE treeGroups g=List PARENT parent(g)
    PROPERTIES in(g), moveList(g) TOOLBAR
    PROPERTIES (g) READONLYIF isReadonly() order, id SHOWIF showIDs(), name, canonicalName
    PROPERTIES(g) NEWSESSION NEW, EDIT, deleteg=DELETE 
    FILTERS inIFilterName(g) OR NOT filterNameList()
    ORDERS order(g), canonicalName(g)
    
    OBJECTS dd = ListDetail
    PROPERTIES(dd) READONLY idSku, idBarcodeSku, nameSku, shortNameUOMSku, canonicalNameSkuGroup, nameBrandSku, nameCountrySku, nameManufacturerSku
    ORDERS nameSku(dd)
    FILTERS isParent(list(dd), g)
;

DESIGN lists {
    OBJECTS {
        NEW tab FIRST {
            fill = 1;
            type = TABBED;
            NEW list {
                caption = 'Список';
                MOVE BOX (o);
                MOVE BOX (d);
            }
            NEW tree {
                caption = 'Дерево';
                MOVE BOX (TREE treeGroups);
                MOVE BOX (dd);
            }
        }
    }
}

FORM dialogLists 'Списки SKU'
    TREE treeGroups tg=List PARENT parent(tg)
    PROPERTIES READONLY order(tg), id(tg) SHOWIF showIDs(), name(tg)
    ORDERS order(tg), name(tg)

    OBJECTS g=List
    PROPERTIES(g) READONLY order, id SHOWIF showIDs(), name, canonicalName 
    ORDERS order(g), canonicalName(g)

    FILTERS isParent(g, tg)

    FILTERGROUP filters
        FILTER 'Все листья' isParentLeaf(g, tg) 'F10' DEFAULT
        FILTER 'Всех потомков' isParent(g, tg) 'F9'
        FILTER 'Только непосредственных потомков' parent(g) == tg 'F8'
    
    LIST List OBJECT g
;

DESIGN dialogLists {
    BOX {
        size = (1280, 720);
        NEW rootContainer BEFORE TOOLBARBOX {
            fill = 1;
            type = SPLITH;
            MOVE BOX(TREE treeGroups);
            MOVE BOX (g) {
                fill = 2;
                GRID(g) { defaultComponent = TRUE; }
            }
        }
    }
}

NAVIGATOR {
    skuNavigator {
        NEW lists;
    }
}

FORM dialogAddLists 'Списки SKU'
    OBJECTS o = List
    PROPERTIES(o) in, name READONLY 
    ORDERS name(o)
    FILTERGROUP in FILTER 'С отметкой' in(o)    
    
    OBJECTS d = ListDetail
    PROPERTIES(d) READONLY idSku, idBarcodeSku, nameSku, shortNameUOMSku, canonicalNameSkuGroup, nameBrandSku, nameCountrySku, nameManufacturerSku
    ORDERS nameSku(d)
    FILTERS list(d) == o
;

DESIGN dialogAddLists {
    size = (1200, 750);
}

addSkuLists 'Отметить списки SKU' () {
    DIALOG dialogAddLists DO {
        FOR [GROUP SUM 1 IF in(list(ListDetail d)) BY sku(d)](Sku sk) DO {
            select(sk, Stock st) <- TRUE WHERE [FILTER currentBalanceSkuStock.sts](st, sk);
        }
    }
    in(List l) <- NULL;
}

EXTEND FORM currentBalanceSkuStock PROPERTIES addSkuLists();

createSkuListIn 'Создать' () {
    NEWSESSION NESTED (in[Item]) NEW l = List {
        FOR in(Item i) DO NEW d = ListDetail {
            sku(d) <- i;
            list(d) <- l;
        }
        SHOW list OBJECTS l = l DOCKED;
    }
}

addToSkuListIn 'Добавить' () {
    NEWSESSION NESTED (in[Item]) DIALOG dialogLists OBJECTS tg INPUT DO {
        FOR in(Item i) AND NOT [GROUP SUM 1 BY sku(ListDetail d), list(d)](i, tg) DO NEW d = ListDetail {
            sku(d) <- i;
            list(d) <- tg;
        }
        SHOW list OBJECTS l = tg DOCKED;
    }
}

addSkuListsIn 'Отметить' () {
    DIALOG dialogAddLists DO {
        FOR [GROUP SUM 1 IF in(list(ListDetail d)) BY sku(d)](Sku sk) DO {
            in(sk) <- TRUE;
        }
    }
    in(List l) <- NULL;
}

EXTEND FORM items PROPERTIES () createSkuListIn, addToSkuListIn, addSkuListsIn;

DESIGN items {
    actionsRow1 {
        NEW actionsSkuList {
            caption = 'Списки SKU';
            type = CONTAINERH;
            alignment = STRETCH;
            MOVE PROPERTY (createSkuListIn());
            MOVE PROPERTY (addToSkuListIn());
            MOVE PROPERTY (addSkuListsIn());
        }
    }
}

inCurrentBalance = DATA LOCAL BOOLEAN (Sku);

createSkuListSelect 'Создать список SKU' () {   

    inCurrentBalance(Sku s) <- TRUE IF GROUP SUM 1 IF select(s, Stock st);
    
    NEWSESSION NESTED (inCurrentBalance[Sku]) NEW l = List {
        FOR inCurrentBalance(Sku i) DO NEW d = ListDetail {
            sku(d) <- i;
            list(d) <- l;
        }
        SHOW list OBJECTS l = l DOCKED;
    }
}

addToSkuListSelect 'Добавить в список SKU' () {
    
    inCurrentBalance(Sku s) <- TRUE IF GROUP SUM 1 IF select(s, Stock st);
    
    NEWSESSION NESTED (inCurrentBalance[Sku]) DIALOG dialogLists OBJECTS g INPUT DO {
        FOR inCurrentBalance(Sku i) AND NOT [GROUP SUM 1 BY sku(ListDetail d), list(d)](i, g) DO NEW d = ListDetail {
            sku(d) <- i;
            list(d) <- g;
        }
        SHOW list OBJECTS l = g DOCKED;
    }
}

EXTEND FORM currentBalanceSkuStock PROPERTIES () addToSkuListSelect, createSkuListSelect;

DESIGN currentBalanceSkuStock {
    actionContainer {
        NEW selected {
            caption = 'Отмеченные';
            MOVE PROPERTY (createSkuListSelect());
            MOVE PROPERTY (addToSkuListSelect());
            MOVE PROPERTY (addSkuLists());
        }
    }
}

META defineAddSkuLists(object, form, concrete)
    addSkuLists 'Подбор списков SKU' (###object object) {
        DIALOG dialogAddLists DO {
            FOR in(list(ListDetail d)) AND NOT [GROUP SUM 1 BY sku(###object##Detail dd), object(dd)](sku(d), object) DO NEW dd = ###object##Detail {
                object(dd) <- object;
                sku(dd) <- sku(d);
            }
            in(List l) <- NULL;
        }
    }
    EXTEND FORM form PROPERTIES addSkuLists(concrete) DRAW d TOOLBAR;
    DESIGN form { TOOLBAR(d) { MOVE PROPERTY (addSkuLists(concrete)) FIRST; } }
END

META defineNewSkuList (object, form, forms, concrete)
    newSkuList 'Создать список SKU на основе' (###object object) {
        NEWSESSION NEW l = List {
            name(l) <- seriesNumber(object);
            FOR [GROUP SUM 1 BY sku(###object##Detail detail), object(detail)](Sku sku, object) DO NEW detail = ListDetail {
                list(detail) <- l;
                sku(detail) <- sku;
            }
            SHOW list OBJECTS l = l DOCKED;
        }
    } CONFIRM;
    
    EXTEND FORM form PROPERTIES newSkuList(concrete) DRAW d TOOLBAR;
    DESIGN form { TOOLBAR(d) { MOVE PROPERTY (addSkuLists(concrete)) FIRST; } }
    EXTEND FORM forms PROPERTIES newSkuList(concrete) DRAW concrete TOOLBAR;
END

META defineNewSkuListSelect (object, form, select)
    newSkuList###object##Select 'Создать список SKU на основе отмеченных' () {
        NEWSESSION NESTED (select[###object]) NEW l = List {
            FOR [GROUP SUM 1 IF select(object(###object##Detail detail)) BY sku(detail)](Sku sku) DO NEW detail = ListDetail {
                list(detail) <- l;
                sku(detail) <- sku;
            }
            SHOW list OBJECTS l = l DOCKED;
        }
    } CONFIRM;
    
    EXTEND FORM form PROPERTIES newSkuList###object##Select();
    DESIGN form { listSku { MOVE PROPERTY (newSkuList###object##Select()); } } 
END

overCopy ABSTRACT LIST (List, List);
overCopy ABSTRACT LIST (ListDetail, ListDetail);
copy 'Копировать' (List l) {
    NEWSESSION NEW n = List {
        name(n) <- name(l);
        order(n) <- order(l);
        parent(n) <- parent(l);
        dataAccess(Stock st, n) <- dataAccess(st, l);
        dataAccess(StockGroup st, n) <- dataAccess(st, l);
        dataAccess(UserRole r, n) <- dataAccess(r, l);
        
        FOR list(ListDetail d) == l DO NEW nd = ListDetail {
            list(nd) <- n;
            sku(nd) <- sku(d);
            overCopy(d,nd);
        }
        overCopy(l, n);
        SHOW list OBJECTS l = n DOCKED;
    }
}

EXTEND FORM lists PROPERTIES copy(o) DRAW o TOOLBAR;

selectFromList 'Добавить из списка' (List l) {
    DIALOG dialogLists OBJECTS g INPUT DO {
        FOR list(ListDetail d) == g AND NOT listDetail(sku(d), l) DO NEW dd = ListDetail {
            list(dd) <- l;
            sku(dd) <- sku(d);
        }
    }
}

EXTEND FORM list PROPERTIES selectFromList(l) DRAW d TOOLBAR;

filterSkuList = DATA LOCAL List();
nameFilterSkuList 'Список SKU' () = name(filterSkuList());

EXTEND FORM currentBalanceSkuStock 
    PROPERTIES nameFilterSkuList()
    FILTERS in(filterSkuList(), s) OR NOT filterSkuList()
;

DESIGN currentBalanceSkuStock {
    filter {
        MOVE PROPERTY (nameFilterSkuList());
    }
}


listDetail(list, sku) = GROUP MAX ListDetail detail BY list(detail), sku(detail);

afterInputBarcodeListDetail ABSTRACT LIST (ListDetail, STRING[200]);

createListDetailNew (List list, STRING[200] barcode, Sku sku)  { 
    LOCAL dialogBarcodeDetail = ListDetail();
    dialogBarcodeDetail() <- listDetail(list, sku);
    IF dialogBarcodeDetail() IS ListDetail THEN {
        seek(dialogBarcodeDetail());
        afterInputBarcodeListDetail(dialogBarcodeDetail(), barcode);
    } ELSE {
        NEW w = ListDetail {
            list(w) <- list;
            sku(w) <- sku;
            seek(w);
            afterInputBarcodeListDetail(w, barcode);
        }
    }
    setAddedUser(sku);
}

addDetailBarcodeListDetail(List list, STRING[200] barcode)  { 
    LOCAL dialogBarcodeSku = Sku ();
    dialogBarcodeSku() <- skuBarcode(barcode);

    IF dialogBarcodeSku() IS Sku THEN {
        createListDetailNew(list, barcode, dialogBarcodeSku());
    } ELSE {
        IF NOT notFormSku() THEN {
            DIALOG emptyBarcodeSkus OBJECTS s INPUT DO {
                dialogBarcodeSku() <- s;
                NEW br = Barcode {
                    id(br) <- barcode;
                    dataDate(br) <- currentDate();
                    sku(br) <- s;
                    NEW w = ListDetail {
                        list(w) <- list;
                        sku(w) <- s;
                        seek(w);
                    }
                }
            } 
        }
        IF NOT notCreateItem() THEN {
            createSkuBarcode(barcode, currentDate());
            dialogBarcodeSku() <- skuBarcode(barcode);
        }
        IF dialogBarcodeSku() THEN {
            createListDetailNew(list, barcode, dialogBarcodeSku());
        }
        IF notFormSku() AND notCreateItem() AND NOT dialogBarcodeSku() AND errorMessageNotFormSku() THEN MESSAGE errorMessageNotFormSku();
    }
}

addDetailDialogBarcodeListDetail 'Ввод штрихкода'(List list)  { 
    DIALOG barcodeInput DO
        addDetailBarcodeListDetail(list, barcodeInput());
} TOOLBAR CHANGEKEY 'F4';

consumedBarcodeListDetail = DATA LOCAL BOOLEAN ();
beforeInputBarcodeListDetail ABSTRACT LIST (List, STRING[200]);
changeAddDetailInputBarcodeListDetail(List list)  { 
    INPUT s = STRING[200] DO {
        weightQuantity() <- NULL;
        IF length(s) > 11 AND left(s, 2) == weightPrefix() THEN {
            weightQuantity() <- NUMERIC[7,0](substr(s, 8, 5)) / 1000.0;
        }
        beforeInputBarcodeListDetail(list, s);
        IF NOT consumedBarcodeListDetail() THEN
            addDetailBarcodeListDetail(list, processedBarcode(s));
    }
}
addDetailInputBarcodeListDetail 'Ввод штрихкода :' (list) = DATA LOCAL STRING[200] (List) TOOLBAR CHARWIDTH 13 CHANGEKEY 'F4' EVENTID 'SCANNER'
                                                                        ON CHANGE { changeAddDetailInputBarcodeListDetail(list); }

EXTEND FORM list 
    PROPERTIES DRAW d TOOLBAR addDetailInputBarcodeListDetail(l)
;

accessStock = GROUP SUM 1 IF accessCompany(currentUser(), Stock st) AND access(List l, st) BY l;
accessRole = GROUP SUM 1 IF access(List l, UserRole r) AND in(currentUser(), r) AND NOT userRoleSID('default') = r BY l;