MODULE StockSkuDocument;

REQUIRE SkuLedger, SystemEvents, Barcode, StockMovement;

NAMESPACE Stock;

// ----------- Подбор (товар / один склад)---------------//     Не забывать имплементить цвет, если нужно!!!!!!!!

META defineDocumentSkuPriceListTypeAgreement(object, stockProp, prefix)
    @defineDocumentSku(object, sku, stock, stockProp);
    priceListType(###object object, Sku sku) = OVERRIDE prefix###priceListType(agreement(object), sku), priceListType(object) IF sku IS Sku;

//    priceSku###object 'Цена' (sku, object) = prevPriceBPriceListTypeSkuStockDateTime(priceListType###object###sku(object, sku), sku, stockProp###object(object), dateTime###object(object));
    ledgerPrice 'Цена (базовая)' (Sku sku, ###object object) = prevPriceB(ledgerPriceListType(priceListType(object, sku)), sku, stockProp##Stock(object), dateTime(object));

    viewPrice 'Цена' (sku, object) = DATA LOCAL NESTED NUMERIC[16,4] (Sku, ###object);

    price 'Цена' (Sku sku, ###object object) = viewPrice(sku, object);

    updateViewPrice (Sku sku, ###object object)  { 
        FOR PriceListType pt == priceListType(object, sku) NOINLINE (pt) DO
            viewPrice(sku, object) <- prevPriceB(pt, sku, stockProp##Stock(object), dateTime(object));
    }
END

META defineDocumentSkuPriceListTypeSystemLedger(object, stockClass, stockProp)
    @defineDocumentSku(object, sku, stockClass, stockProp);
    price 'Цена' (Sku sku, ###object object) = prevAccountPriceB(sku, stockProp###stockClass(object), dateTime(object));
END

META defineDocumentSku(object, detail, skuProp, stockClass, stockProp)
    detail###stockProp (sku, object, stock) =  GROUP MAX ###detail detail
        BY skuProp(detail), object(detail), stockProp###stockClass(detail);
    detail (###skuProp sku, ###object object) = detail###stockProp(sku, object, stockProp###stockClass(object));

    currentBalance 'Остаток' (###skuProp sku, ###object object) = currentBalance(sku, stockProp###stockClass(object));
    prevCurrentBalance 'Остаток' (###skuProp sku, ###object object) = prevCurrentBalance(sku, stockProp###stockClass(object));
//    backgroundQuantitySku###object 'Цвет' (sku, object) = RGB(255,128,128) IF quantity###detail###skuProp###object(sku, object) AND NOT
//        (quantity###detail###skuProp###object(sku, object) <= currentBalanceSku###object(sku, object));
    backgroundQuantity 'Цвет' (sku, object) = ABSTRACT CASE COLOR (Sku, ###object);
    backgroundViewPrice 'Цвет' (sku, object) = ABSTRACT CASE COLOR (Sku, ###object);  

    overChangeQuantityValue###skuProp  ABSTRACT LIST ( ###detail);

    changeQuantityValue(###skuProp skuProp, ###object object, NUMERIC[16,5] n)  { 
        IF detail(sku, object) THEN {
            IF (n AND NOT deleteNullDetail()) OR (deleteNullDetail() AND n != 0) THEN {
                quantity(###detail detail) <- n WHERE detail == detail(sku, object);
                overChangeQuantityValue###skuProp(detail(sku, object));
            } ELSE {
                FOR detail(sku, object) == ###detail d DO
                    DELETE d;
            }
        } ELSE {
            IF (n AND NOT deleteNullDetail()) OR (deleteNullDetail() AND n != 0) THEN {
                NEW d = ###detail {
                    object(d) <- object;
                    skuProp(d) <- sku;
                    quantity (d) <- n;
                    overChangeQuantityValue###skuProp(d);
                }
            }
        }
    }

    changeQuantity(###skuProp skuProp, ###object object)  { 
        INPUT n = NUMERIC[16,5] DO
            changeQuantityValue(sku, object, n);
    }

    // Выбор всего остатка
    allQuantity 'Весь остаток' = DATA LOCAL BOOLEAN (Sku, ###object);
    changeAllQuantity(###skuProp skuProp, ###object object)  { 
        INPUT b = BOOLEAN DO {
            allQuantity (sku,object) <- b;
            changeQuantityValue(sku, object, prevCurrentBalance(sku,object) IF b);
        } 
    }

END
META defineDocumentSku(object, skuProp, stockClass, stockProp)
    @defineDocumentSku(object, object##Detail, skuProp, stockClass, stockProp);
END

META extendFormDocumentSku(object, detail, form, concrete, skuProp, stockProp)

    backgroundPickName 'Цвет в подборе' = ABSTRACT CASE COLOR (Sku, ###object);
    hideQuantity###skuProp##Document = ABSTRACT BOOLEAN (###object);
    showQuantity###skuProp##Document = NOT hideQuantity###skuProp##Document(###object o); 
    
    showMovementSku 'Показать движение по складу' (Sku ks, ###object concrete)  { showMovementSku(ks, stockProp(concrete)); }
    showMovementPriceSku 'Показать изменение цены по складу' (Sku ks, ###object concrete)  { showMovementPriceSku(ks, stockProp(concrete)); }
        
    EXTEND FORM form
        PROPERTIES filterNameSkuGroup()

        TREE skuTree sk = SkuGroup PARENT parent(sk)
        PROPERTIES READONLY order(sk), skuTreeName = name(sk)
        ORDERS order(sk), skuTreeName
        FILTERS inIFilterName(sk) OR NOT filterNameSkuGroup()
        FILTERGROUP inactive FILTER 'Активные' active(sk) 'F6' DEFAULT

        OBJECTS ks=Sku
        PROPERTIES READONLY      inputName = name(ks) ON CONTEXTMENU showMovementSku(ks, concrete) ON CONTEXTMENU showMovementPriceSku(ks, concrete) BACKGROUND backgroundPickName(ks, concrete)
        PROPERTIES(ks) READONLY  BACKGROUND backgroundPickName(ks, concrete) idBarcode, id SHOWIF showIDs(), shortNameUOM
        PROPERTIES(ks, concrete) quantity###detail ON CHANGE changeQuantity(ks, concrete) 
                                    BACKGROUND backgroundQuantity(ks, concrete) SHOWIF showQuantity###skuProp##Document(concrete)
                                    QUICKFILTER inputName,
                                 prevCurrentBalance READONLY,
                                 allQuantity ON CHANGE changeAllQuantity(ks, concrete),
                                 price READONLY BACKGROUND backgroundViewPrice(ks, concrete)
        PROPERTIES               add###skuProp() DRAW ks, editKS = EDIT(ks) NEWSESSION, copy(ks)

        FILTERS                isParent(sk, ks)
        FILTERGROUP activeSku FILTER 'Активные' active(ks) DEFAULT

        ORDERS inputName
    ;

    seek###skuProp##Barcode(###object object, STRING[15] barcode)  { 
        IF skuProp##Barcode(barcode, date(object)) THEN {
            SEEK form.ks = skuProp##Barcode(barcode, date(object));     
        } ELSE {
            MESSAGE 'Штрихкод не найден.';
        }
    }
    
    seekOver###skuProp(###object object)  { 
        INPUT s = STRING[15] DO {
            seek###skuProp##Barcode(object, processedBarcode(s));
        }        
    };
    seek###skuProp 'Поиск по штрихкоду:' (###object object) = DATA LOCAL STRING[15] (###object) TOOLBAR CHANGEKEY 'F4;editing=all' EVENTID 'SCANNER'
                                                                            ON CHANGE { seekOver###skuProp(object); }       
    EXTEND FORM form
        PROPERTIES(concrete) DRAW ks seek###skuProp    
    ;
    DESIGN form {
        mainTabbed {
            NEW itemBox {
                caption = 'Подбор';
                horizontal = TRUE;
                fill = 1;
                NEW skuTreePane {
                    width = 0;
                    fill = 1;
                    NEW skuTreeTopPane {
                        caption = 'Поиск группы';
                        MOVE PROPERTY(filterNameSkuGroup());
                    }
                    MOVE BOX(TREE skuTree) { caption = 'Группы SKU'; }                    
                }
                NEW skuMainPane {
                    fill = 3;
                    horizontal = FALSE;
                    width = 400;
                    NEW skuSelectPane {
                        fill = 1;
                        horizontal = FALSE;
                        NEW skuPane {
                            horizontal = FALSE;
                            caption = 'Товары';
                            fill = 1;
                            NEW skuTopPane {
                                caption = 'Поиск товара';
                                MOVE PROPERTY(seek###skuProp(concrete));
                            }
                            MOVE BOX(ks);               
                        }
                    }
                }
            }
        }
        PROPERTY(prevCurrentBalance(ks, concrete)) { background = #FFEEEE; }
        PROPERTY(quantity###detail(ks, concrete)) { background = #D4FFD4; }
    }
END

META extendFormDocumentSkuPriceListTypeAgreement(eobj, detail, form, concrete, skuProp, stockProp)
    @extendFormDocumentSku(eobj, detail, form, concrete, skuProp, stockProp);

    current###eobj###eobj() = DATA LOCAL NESTED Object ();
    setCurrent###eobj###eobj(Object concrete)  { current###eobj###eobj() <- concrete; }

    EXTEND FORM form
        EVENTS ON CHANGE concrete setCurrent###eobj###eobj(concrete)
    ;

    WHEN LOCAL FORMS form (SET([ VIEW form.ks](###skuProp sku)) AND (Object concrete) == current###eobj###eobj()) OR 
                            ((CHANGED(stockProp[###eobj](concrete)) OR 
                              CHANGED(dateT##concrete##me[###eobj](concrete)) OR
                              CHANGED(pr##concrete##ceL##concrete##stType[###eobj](concrete)) OR
                              CHANGED(agreement[###eobj](concrete))) AND [ VIEW form.ks](sku)) DO
        updateViewPrice(sku, concrete);
END

META extendFormDocumentSku(object, form, concrete)
    @extendFormDocumentSku(object, object##Detail, form, concrete, sku, stock);
END

META extendFormDocumentSkuPriceListTypeAgreement(object, form, concrete, stockProp)
    @extendFormDocumentSkuPriceListTypeAgreement(object, object##Detail, form, concrete, sku, stockProp);
END

// ----------- Подбор (партий / один склад)---------------//    Не забывать имплементить цвет, если нужно!!!!!!!!

viewPrice 'Цена' (batch) = DATA LOCAL NESTED NUMERIC[16,4] (Batch);

META defineDocumentBatchPriceListTypeAgreement(object, stockProp, prefix)
    @defineDocumentBatch(object, batch, sku, stock, stockProp);
    priceListType(###object object, Batch batch) = OVERRIDE prefix###priceListType(agreement(object), sku(batch)), priceListType(object) IF batch IS Batch;

//    priceBatch###object 'Цена' (batch, object) = prevPriceBPriceListTypeBatchStockDateTime(priceListType###object###batch(object, batch), batch, stockProp###object(object), dateTime###object(object));
    ledgerPrice 'Цена (базовая)' (Batch batch, ###object object) = prevPriceB(ledgerPriceListType(priceListType(object, batch)), batch, stockProp##Stock(object), dateTime(object));

    price 'Цена' (Batch batch, ###object object) = viewPrice(batch) IF object IS ###object;
END

META defineDocumentBatchPriceListTypeSystemLedger(object, stockClass, stockProp)
    @defineDocumentBatch(object, batch, sku, stockClass, stockProp);
    price 'Цена' (Batch batch, ###object object) = prevAccountPriceB(batch, stockProp###stockClass(object), dateTime(object));
END

META defineDocumentBatch(object, detail, batchProp, skuProp, stockClass, stockProp)
    detail###stockProp (batch, object, stock) =  GROUP MAX ###detail detail
        BY batchProp(detail), object(detail), stockProp###stockClass(detail);
    detail (###batchProp batch, ###object object) = detail###stockProp(batch, object, stockProp###stockClass(object));

    currentBalance 'Остаток' (###batchProp batch, ###object object) = currentBalance(batch, stockProp###stockClass(object));
    prevCurrentBalance 'Остаток' (###batchProp batch, ###object object) = prevCurrentBalance(batch, stockProp###stockClass(object));

    quantity###detail 'Кол-во товара в документе' (batch, object) = GROUP SUM quantity(###detail detail)
        BY batchProp(detail), object(detail);

    backgroundQuantity 'Цвет' (batch, object) = ABSTRACT CASE COLOR (Batch, ###object);  

    overChangeQuantityValue###batchProp  ABSTRACT LIST ( ###detail);

    changeQuantityValue(###batchProp batchProp, ###object object, NUMERIC[16,5] n)  { 
        IF detail(batch, object) THEN {
            IF (n AND NOT deleteNullDetail()) OR (deleteNullDetail() AND n != 0) THEN {
                quantity(###detail detail) <- n WHERE detail == detail(batch, object);
                overChangeQuantityValue###batchProp(detail(batch, object));
            } ELSE {
                FOR detail(batch, object) == ###detail d DO
                    DELETE d;
            }
        } ELSE {
            IF (n AND NOT deleteNullDetail()) OR (deleteNullDetail() AND n != 0) THEN {
                NEW d = ###detail {
                    object(d) <- object;
                    skuProp(d) <- skuProp(batch);
                    batchProp(d) <- batch;
                    quantity (d) <- n;
                    overChangeQuantityValue###batchProp(d);
                }
            }
        }
    }

    changeQuantity(###batchProp batchProp, ###object object)  { 
        INPUT n = NUMERIC[16,5] DO
            changeQuantityValue(batch, object, n);
    }

    // Выбор всего остатка
    allQuantity 'Весь остаток' = DATA LOCAL BOOLEAN (Batch, ###object);
    changeAllQuantity(###batchProp batchProp, ###object object) { 
        INPUT b = BOOLEAN DO {
            allQuantity (batch,object) <- b;
            changeQuantityValue(batch, object, prevCurrentBalance(batch,object) IF b);
        }
    }

END

META defineDocumentBatch(object, batchProp, skuProp, stockClass, stockProp)
    @defineDocumentBatch(object, object##Detail, batchProp, skuProp, stockClass, stockProp);
END

META extendFormDocumentBatch(object, detail, form, concrete, batchProp)

    EXTEND FORM form

        OBJECTS b=Batch GRID
        PROPERTIES READONLY SHOWIF show###batchProp(concrete) nameSku(b), idBarcodeSku(b), shortNameUOM(b), id(b), name(b)
        PROPERTIES(b, concrete) SHOWIF show###batchProp(concrete) quantity###detail ON CHANGE changeQuantity(b, concrete) 
                                BACKGROUND backgroundQuantity(b, concrete)
                                QUICKFILTER nameSku(b),
                                prevCurrentBalance READONLY,
                                allQuantity ON CHANGE changeAllQuantity(b, concrete),
                                price READONLY
//                                viewPriceBatch###object READONLY

        FILTERS                isParent(sk, b),
                               activeSku(b)

        ORDERS nameSku(b)
    ;                                        

    DESIGN form {
        skuSelectPane {
            tabbed = TRUE;

            MOVE BOX(b) {
                caption = 'Партии';
            }
        }
        PROPERTY(prevCurrentBalance(b, concrete)) { background = #FFEEEE; }
        PROPERTY(quantity###detail(b, concrete)) { background = #D4FFD4; }
    }
END
META extendFormDocumentBatch(object, form, concrete)
    @extendFormDocumentBatch(object, object##Detail, form, concrete, batch);
END

META extendFormDocumentBatchPriceListTypeAgreement(eobj, detail, form, concrete, batchProp, stockProp)
    @extendFormDocumentBatch(eobj, detail, form, concrete, batchProp);
    
    WHEN LOCAL FORMS form 
        ((SET([ VIEW form.b](###batchProp batch)) AND (###eobj concrete) == current###eobj###eobj()) OR
         ((CHANGED(stockProp(concrete)) OR 
           CHANGED(dateTime(concrete)) OR
           CHANGED(priceListType(concrete)) OR
           CHANGED(agreement(concrete))) AND [ VIEW form.b](batch)))
         AND PriceListType pt == priceListType(concrete, batch) NOINLINE (pt) DO
            viewPrice(batch) <- prevPriceB(pt, batch, stockProp(concrete), dateTime(concrete));
END

META extendFormDocumentBatchPriceListTypeAgreement(object, form, concrete, stockProp)
    @extendFormDocumentBatchPriceListTypeAgreement(object, object##Detail, form, concrete, batch, stockProp);
END

//задание цены для подбора

META extendFormDocumentAccountPriceSku (object, stockProp, caption, form, char, showif)
    priceAccountPriceListType 'Цена'##caption (Sku sku, ###form object) = prevAccountPriceB(sku, stockProp(object), dateTime(object));

    EXTEND FORM form
        PROPERTIES(ks, char) READONLY priceAccountPriceListType SHOWIF showif(char)
    ;
END

META extendFormDocumentAccountPriceBatch (object, stockProp, caption, form, char, showif)
    priceAccountPriceListType 'Цена'##caption (Batch batch, ###form object) = prevAccountPriceB(batch, stockProp(object), dateTime(object));

    EXTEND FORM form
        PROPERTIES(b, char) READONLY priceAccountPriceListType SHOWIF showif(char)
    ;
END

META extendFormDocumentPriceSku (object, priceListTypeProp, stockProp, caption, form, char, showif)
    price###priceListTypeProp 'Цена'##caption (Sku sku, ###form object) = prevPriceB(SystemLedgerPriceListType.##priceListTypeProp, sku, stockProp(object), dateTime(object));

    EXTEND FORM form
        PROPERTIES(ks, char) READONLY price###priceListTypeProp SHOWIF showif(char)
    ;
END

META extendFormDocumentPriceBatch (object, priceListTypeProp, stockProp, caption, form, char, showif)
    price###priceListTypeProp 'Цена'##caption (Batch batch, ###form object) = prevPriceB(SystemLedgerPriceListType.##priceListTypeProp, batch, stockProp(object), dateTime(object));

    EXTEND FORM form
        PROPERTIES(b, char) READONLY price###priceListTypeProp SHOWIF showif(char)
    ;
END

// ----------- Подбор (товар / несколько складов)---------------//       Не забывать имплементить цвет, если нужно!!!!!!!!

deleteNullDetail 'Удалять строки с нулевым значением' = DATA BOOLEAN ();
EXTEND FORM options 
    PROPERTIES deleteNullDetail()
;
DESIGN options {
    stock1 {
        MOVE PROPERTY (deleteNullDetail());
    }
}

META defineDocumentSkuStockPriceListTypeAgreement(object, stockProp, dateTimeProp)
    @defineDocumentSkuStock(object, sku, stockProp);
    priceListType(###object object, Sku sku) = OVERRIDE priceListType(agreement(object), sku), priceListType(object) IF sku IS Sku;

//    priceSkuStock###object 'Цена' (sku, stock, object) = prevPriceBPriceListTypeSkuStockDateTime(priceListType###object###sku(object, sku), sku, stock, dateTime###object(object));
    ledgerPrice 'Цена (базовая)' (Sku sku, Stock stock, ###object object) = prevPriceB(ledgerPriceListType(priceListType(object, sku)), sku, stock, dateTime(object));
                                      
    viewPrice 'Цена' (sku, stock, object) = DATA LOCAL NESTED NUMERIC[16,4] (Sku, Stock, ###object) CHARWIDTH 7;

    price 'Цена' (Sku sku, Stock stock, ###object object) = viewPrice(sku, stock, object);

    updateViewPrice (Sku sku, Stock stock, ###object object)  { 
        FOR PriceListType pt == priceListType(object, sku) AND (Stock st = IF overPriceStockUser(object) THEN overPriceStockUser(object) ELSE stock) AND stock IS Stock AND DATETIME dt = dateTimeProp(object) NOINLINE (pt, st, dt) DO
            viewPrice(sku, stock, object) <- prevPriceB(pt, sku, st, dt);
    }
END
META defineDocumentSkuStockPriceListTypeSystemLedger(object, stockProp)
    @defineDocumentSkuStock(object, sku, stockProp);
    price 'Цена учетная' (Sku sku, Stock stock, ###object object) = prevAccountPriceB(sku, stock, dateTime(object));
END

META defineDocumentSkuStock(object, detail, skuProp, stockProp)
    detail###stockProp (sku, object, stock) =  GROUP MAX ###detail detail
        BY skuProp(detail), object(detail), stockProp###stock(detail);

    quantity###stockProp 'Кол-во товара в документе' (sku, object, stock) = GROUP SUM quantity(###detail detail)
        BY skuProp(detail), object(detail), stockProp###stock(detail) CHARWIDTH 7;

//    backgroundQuantitySku###object###Stock 'Цвет' (sku, object, stock) = RGB(255,128,128) IF quantitySku###object###stockProp(sku, object, stock) AND NOT
//        (quantitySku###object###stockProp(sku, object, stock) <= currentBalanceSkuStock(sku, stock));
    backgroundQuantity 'Цвет' (sku, object, stock) = ABSTRACT CASE COLOR (Sku, ###object, Stock);    
    background 'Цвет' (sku, object, stock) = ABSTRACT CASE COLOR (Sku, ###object, Stock);   

    overChangeQuantityValue###skuProp  ABSTRACT LIST ( ###detail);

    changeQuantityValue(###skuProp skuProp, ###object object, Stock stock, NUMERIC[14,3] n)  { 
        IF detail###stockProp(sku, object, stock) THEN {
            IF (n AND NOT deleteNullDetail()) OR (deleteNullDetail() AND n != 0) THEN {
                quantity(###detail detail) <- n WHERE detail == detail###stockProp(sku, object, stock);
                overChangeQuantityValue###skuProp(detail###stockProp(sku, object, stock));
            } ELSE {
                FOR detail###stockProp(sku, object, stock) == ###detail d DO
                    DELETE d;
            }

        } ELSE {
            IF (n AND NOT deleteNullDetail()) OR (deleteNullDetail() AND n != 0) THEN {
                NEW d = ###detail {
                   object(d) <- object;
//                  Пока работаем с одним складом                   
//                   stockProp###stock###detail (d) <- stock;
                   skuProp(d) <- sku;
                   quantity (d) <- n;
                   overChangeQuantityValue###skuProp(d);
                }
            }
        }
    }
    changeQuantity(###skuProp skuProp, ###object object, Stock stock)  { 
        INPUT n = NUMERIC[16,5] DO
            changeQuantityValue(sku, object, stock, n);
    }

    allQuantity###object 'Весь остаток' = DATA LOCAL BOOLEAN (Sku, Stock);
    changeAllQuantity(###skuProp skuProp, ###object object, Stock stock)  { 
        INPUT b = BOOLEAN DO {
            allQuantity###object (sku, stock) <- b;
            changeQuantityValue(sku, object, stock, prevCurrentBalance(sku,stock) IF b);
        }
    }

END
META defineDocumentSkuStock(object, skuProp, stockProp)
    @defineDocumentSkuStock(object, object##Detail, skuProp, stockProp);
END

META extendFormDocumentSkuStock(object, form, concrete, legalEntityProp, stockProp)
    not###stockProp##Stock (###object o) = NOT stockProp###stock(o);
    sortOrder###object 'Порядок сортировки' = ABSTRACT INTEGER (Sku, ###object, Stock) CHARWIDTH 1; 
    
    EXTEND FORM form

        TREE stockTree all = BPSTRING[3], sg = StockGroup PARENT parent(sg), ts = Stock
        PROPERTIES READONLY VALUE(all), sgTreeName = name(sg), tsTreeName = name(ts)
        ORDERS sgTreeName
        FILTERS stringEqualsAll(all),
                stockGroup(ts) == sg
        FILTERGROUP inactiveStock FILTER 'Активный' active(ts) 'ctrl F10' DEFAULT
        
        PROPERTIES filterNameSkuGroup() 
        TREE skuTree sk = SkuGroup PARENT parent(sk)
        PROPERTIES READONLY order(sk), skuTreeName = name(sk)
        ORDERS order(sk), skuTreeName
        FILTERGROUP inactive FILTER 'Активные' active(sk) 'F6' DEFAULT
        FILTERS inIFilterName(sk) OR NOT filterNameSkuGroup() 

        OBJECTS gt = GroupType PANEL
        PROPERTIES(gt) SELECTOR name

        TREE skuTreeX sx = Group PARENT parent(sx)
        PROPERTIES READONLY order(sx), name(sx)
        ORDERS order(sx), name(sx)
        FILTERS groupType(sx) == gt
        FILTERGROUP inactiveX FILTER 'Активные' active(sx) 'F6' DEFAULT

        OBJECTS           sst=Stock
        OBJECTS           sts=(st=Stock, ks=Sku) GRID
        PROPERTIES        READONLY BACKGROUND background(ks, concrete, st) name(ks) ON CONTEXTMENU showMovementSku(ks, st) ON CONTEXTMENU showMovementPriceSku(ks, st), idBarcode(ks), id(ks) SHOWIF showIDs(), shortNameUOM(ks)
        PROPERTIES        READONLY stockName = name(st) SHOWIF not###stockProp##Stock(concrete)
        PROPERTIES        addSku() DRAW sts, edit = EDIT(ks) NEWSESSION, copy(ks), sortOrder###object(ks, concrete, st)

        FILTERS           isParent(sk, ks),
                          // пока отключаем работу по многим складам, а то люди путаются
//                          (st == ts AND sg IS StockGroup OR isParentStockGroupStock(sg, st) AND NOT ts OR st IS Stock AND NOT sg AND NOT ts) AND NOT stockProp###stock###object(concrete) OR
//                          st == stockProp###stock###object(concrete) AND NOT sg AND NOT ts,
//                          legalEntityStock(st) == legalEntityProp###object(concrete),
//                          activeStock(st)
                          st == stockProp###stock(concrete)

        FILTERS           name(ks)
        ORDERS          sortOrder###object(ks, concrete, st), name(ks)

        PROPERTIES        quantity###stockProp(ks, concrete, st) ON CHANGE changeQuantity(ks, concrete, st) 
                                BACKGROUND backgroundQuantity(ks, concrete, st)
                                QUICKFILTER name(ks),
                          prevCurrentBalance(ks, st) READONLY,
                          allQuantity###object(ks, st) ON CHANGE changeAllQuantity(ks, concrete, st),
                          price(ks, st, concrete) AFTER shortNameUOM(ks) READONLY
        FILTERGROUP activeSku FILTER 'Активные' active(ks) DEFAULT
    ;

    DESIGN form {
        REMOVE BOX(sst);
        mainTabbed {
            REMOVE BOX(TREE skuTreeX);
            REMOVE BOX(gt);
            NEW itemBox {
                caption = 'Подбор';
                horizontal = TRUE;
                fill = 1;
                NEW skuFilters {
                    fill = 1;
                    tabbed = TRUE;
                    width = 0;
                    MOVE BOX(TREE skuTree) { 
                        caption = 'Группы SKU'; 
                        NEW filters1Sku BEFORE GRIDBOX(TREE skuTree){
                            caption = 'Фильтр';
                            alignment = STRETCH;
                            MOVE PROPERTY(filterNameSkuGroup()){fill = 1; charWidth=30;}
                        }
                    }
                    MOVE BOX(TREE stockTree) { caption = 'Группы складов'; }
                }
                NEW skuMainPane {
                    fill = 4;
                    horizontal = FALSE;
                    width = 400;
                    NEW skuSelectPane {
                        fill = 1;
                        horizontal = FALSE;
                        MOVE BOX(sts) {
                            caption = 'Товары';
                        }
                        PROPERTY(copy(ks)) { focusable = FALSE; }
                    }
                }
            }
        }
        PROPERTY(prevCurrentBalance(ks, st)) { background = #FFEEEE; }
        PROPERTY(quantity###stockProp(ks, concrete, st)) { background = #D4FFD4; }
    }
END

META extendFormDocumentSkuStockPriceListTypeAgreement(object, form, concrete, legalEntityProp, stockProp, dateTimeProp)
    @extendFormDocumentSkuStock(object, form, concrete, legalEntityProp, stockProp);
    
    current###form###form() = DATA LOCAL NESTED Object ();
    setCurrent###form###form(###object concrete)  { current###form###form() <- concrete; }
    
    EXTEND FORM form
        EVENTS ON CHANGE concrete setCurrent###form###form(concrete)
    ;

    WHEN LOCAL FORMS form (SET([ VIEW form.sts](St##concrete##ck stock, Sku sku)) AND current###form###form() == ###object concrete) OR 
                            ((CHANGED(dateTimeProp[###form](concrete)) OR
                              CHANGED(priceListType[###form](concrete)) OR
                              CHANGED(agreement[###form](concrete))) AND [ VIEW form.sts](stock, sku)) DO 
        updateViewPrice(sku, stock, concrete);
    ;
END

// ----------- Подбор (партия / несколько складов)---------------//      Не забывать имплементить цвет, если нужно!!!!!!!!

META defineDocumentBatchStockPriceListTypeAgreement(object, stockProp, dateTimeProp)
    @defineDocumentBatchStock(object, batch, sku, stockProp);
    priceListType(###object object, Batch batch) = OVERRIDE priceListType(agreement(object), sku(batch)), priceListType(object) IF batch IS Batch;

//    priceBatchStock###object 'Цена' (batch, stock, object) = prevPriceBPriceListTypeBatchStockDateTime(priceListType###object###batch(object, batch), batch, stock, dateTime###object(object));
    ledgerPrice 'Цена (базовая)' (Batch batch, Stock stock, ###object object) = prevPriceB(ledgerPriceListType(priceListType(object, batch)), batch, stock, dateTimeProp(object));

    price 'Цена' (Batch batch, Stock stock, ###object object) = viewPrice(batch) IF stock = stockProp##Stock(object);
END

META defineDocumentBatchStockPriceListTypeSystemLedger(object, stockProp)
    @defineDocumentBatchStock(object, batch, sku, stockProp);
    price 'Цена' (Batch batch, Stock stock, ###object object) = prevAccountPriceB(batch, stock, dateTime(object));
END

META defineDocumentBatchStock(object, detail, batchProp, skuProp, stockProp)
    detail###stockProp (batch, object, stock) =  GROUP MAX ###detail detail
        BY batchProp(detail), object(detail), stockProp###stock(detail);

    detail###stockProp (batch, object) =  GROUP MAX ###detail detail
        BY batchProp(detail), object(detail);

    quantity###stockProp 'Кол-во товара в документе' (batch, object, stockProp###stock) = GROUP SUM quantity(###detail detail)
        BY batchProp(detail), object(detail), stockProp###stock(detail);

//    backgroundQuantityBatch###object###Stock 'Цвет' (batch, object, stock) = RGB(255,128,128) IF quantityBatch###object###stockProp(batch, object, stock) AND NOT
//        quantityBatch###object###stockProp(batch, object, stock) <= currentBalanceBatchStock(batch, stock);
    backgroundQuantity 'Цвет' (batch, object, stock) = ABSTRACT CASE COLOR (Batch, ###object, Stock);

    overChangeQuantityValue###batchProp  ABSTRACT LIST ( ###detail);
    backgroundName###object 'Цвет'  (d)= ABSTRACT CASE COLOR (Batch);

    changeQuantityValue(###batchProp batchProp, ###object object, Stock stock, NUMERIC[16,5] n)  { 
        IF detail###stockProp(batch, object, stock) THEN {
            IF (n AND NOT deleteNullDetail()) OR (deleteNullDetail() AND n != 0) THEN {
                quantity(###detail detail) <- n WHERE detail == detail###stockProp(batch, object, stock);
                overChangeQuantityValue###batchProp(detail###stockProp(batch, object, stock));
            } ELSE {
                FOR detail###stockProp(batch, object, stock) == ###detail d DO
                    DELETE d;
            }
        } ELSE {
            IF (n AND NOT deleteNullDetail()) OR (deleteNullDetail() AND n != 0) THEN {
                NEW d = ###detail {
                    object(d) <- object;
//                    stockProp###stock###detail (d) <- stock;
                    skuProp(d) <- skuProp(batch);
                    batchProp(d) <- batch;
                    quantity (d) <- n;
                    overChangeQuantityValue###batchProp(d);
                }
            }
        }
    }

    changeQuantity(###batchProp batchProp, ###object object, Stock stock)  { 
        INPUT n = NUMERIC[16,5] DO
            changeQuantityValue(batch, object, stock, n);
    }

    allQuantity 'Весь остаток' = DATA LOCAL BOOLEAN (Batch, ###object, Stock);
    changeAllQuantity(###batchProp batchProp, ###object object, Stock stock)  { 
        INPUT b = BOOLEAN DO {
            allQuantity (batch, object, stock) <- b;
            changeQuantityValue(batch, object, stock, prevCurrentBalance(batch, stock) IF b);
        }
    }
END

META defineDocumentBatchStock(object, batchProp, skuProp, stockProp)
    @defineDocumentBatchStock(object, object##Detail, batchProp, skuProp, stockProp);
END

META extendFormDocumentBatchStock(object, form, concrete, legalEntityProp, stockProp)

    EXTEND FORM form
        
        OBJECTS sto = Stock PANEL
        FILTERS sto = stockProp###stock(concrete)
         
        OBJECTS           stb = (b = Batch) GRID
        PROPERTIES(b) READONLY SHOWIF showBatch(concrete)  prevNameSku BACKGROUND backgroundName###object(b), idBarcodeSku, shortNameUOM, id, name
//        PROPERTIES(sto) READONLY SHOWIF showBatch(concrete) stockNameB = name SHOWIF not###stockProp##Stock(concrete)

        FILTERS           isParent(sk, b)
                          // пока отключаем работу по многим складам, а то люди путаются
//                          (sto == ts AND sg IS StockGroup OR isParentStockGroupStock(sg, sto) AND NOT ts OR sto IS Stock AND NOT sg AND NOT ts) AND NOT stockProp###stock###object(concrete) OR
//                          sto == stockProp###stock###object(concrete) AND NOT sg AND NOT ts,
//                          legalEntityStock(sto) == legalEntityProp###object(concrete),
//                          activeStock(sto)
        ORDERS          prevNameSku(b)

        PROPERTIES        SHOWIF showBatch(concrete) quantity###stockProp(b, concrete, sto) ON CHANGE changeQuantity(b, concrete, sto) 
                                    BACKGROUND backgroundQuantity(b, concrete, sto)
                                    QUICKFILTER prevNameSku(b),
                          prevCurrentBalance(b, sto) READONLY,
                          allQuantity(b, concrete, sto) ON CHANGE changeAllQuantity(b, concrete, sto),
                          price(b, sto, concrete) READONLY
    ;

    DESIGN form {
        skuSelectPane {
            tabbed = TRUE;
            MOVE BOX(stb) {
                caption = 'Партии';
            }
        }
        PROPERTY(prevCurrentBalance(b, sto)) { background = #FFEEEE; }
        PROPERTY(quantity###stockProp(b, concrete, sto)) { background = #D4FFD4; }
    }
END

META extendFormDocumentBatchStockPriceListTypeAgreement(object, form, concrete, legalEntityProp, stockProp)
    @extendFormDocumentBatchStock(object, form, concrete, legalEntityProp, stockProp);
    
    WHEN LOCAL FORMS form 
        ((SET([ VIEW form.stb](Batch batch)) AND current###form###form() == ###object concrete) OR
         ((CHANGED(dateTime[###form](concrete)) OR
           CHANGED(priceListType[###form](concrete)) OR
           CHANGED(agreement[###form](concrete)) OR 
           CHANGED(stockProp##Stock(concrete))) AND [ VIEW form.stb](batch))) AND
            PriceListType pt = priceListType(concrete, batch) NOINLINE(pt) DO 
            viewPrice(batch) <- prevPriceB(pt, batch, priceStockUser(concrete), dateTime(concrete));
    ;
END

// ----------- Подбор (товар / несколько складов / несколько складов покупателей)---------------//          Не забывать имплементить цвет, если нужно!!!!!!!!

META defineDocumentSkuStockExtra(object, detail, skuProp, stockProp, stockExtra)

    viewPriceCustomer 'Цена' (sku, stockProp, object, stockExtra) = DATA LOCAL NESTED NUMERIC[16,4] (Sku, Stock, ###object, Stock);

    priceCustomer 'Цена' (###skuProp sku, Stock stockProp, ###object object, Stock stockExtra) = viewPriceCustomer(sku, stockProp, object, stockExtra);

    updateViewPriceCustomer (###skuProp sku, Stock stockProp, ###object object, Stock stockExtra)  { 
        FOR PriceListType pt == priceListType(object, stockExtra, sku) AND stockProp IS Stock NOINLINE (pt) DO
            viewPriceCustomer(sku, stockProp, object, stockExtra) <- prevPriceB(pt, sku, stockProp, dateTime(object));
    }

    detail##SupplierCustomer (sku, object, stockProp, stockExtra) =  GROUP MAX ###detail detail
        BY skuProp(detail), object(detail), stockProp(detail), stockExtra(detail);

    quantitySupplierCustomer 'Кол-во товара в документе' (sku, object, stockProp, stockExtra) = GROUP SUM quantity(###detail detail)
        BY skuProp(detail), object(detail), stockProp(detail), stockExtra(detail);

    quantitySupplier 'Итого' (sku, object, stockProp) = GROUP SUM quantity(###detail detail)
        BY skuProp(detail), object(detail), stockProp(detail);

//    backgroundQuantitySku###object###Stock 'Цвет' (sku, object, stock) = RGB(255,128,128) IF quantitySku###object###stockProp(sku, object, stock) AND NOT
//        (quantitySku###object###stockProp(sku, object, stock) <= currentBalanceSkuStock(sku, stock));
    backgroundQuantity 'Цвет' (sku, object, stock) = ABSTRACT CASE COLOR (Sku, ###object, Stock);  
    
    changeQuantityCustomer(###skuProp skuProp, ###object object, Stock stockProp, Stock stockExtra)  { 
        INPUT n = NUMERIC[16,5] DO
            IF detail##SupplierCustomer(sku, object, stockProp, stockExtra) THEN {
                IF n THEN {
                    quantity(###detail detail) <- n WHERE detail == detail##SupplierCustomer(sku, object, stockProp, stockExtra);
                } ELSE {
                    FOR detail##SupplierCustomer(sku, object, stockProp, stockExtra) == ###detail detail DO
                        DELETE detail;
                }
            } ELSE {
                IF n THEN {
                    NEW d = ###detail {
                       object(d) <- object;
                       skuProp(d) <- sku;
                       stockExtra(d) <- stockExtra;
                       quantity (d) <- n;
                    }
                }
            }
    }
END
META defineDocumentSkuStockExtra(object, skuProp, stockProp, stockExtra)
    @defineDocumentSkuStockExtra(object, object##Detail, skuProp, stockProp, stockExtra);
END

META extendFormDocumentSkuStockExtraCustom(object, form, concrete, legalEntityProp, stockProp, stockExtra)

    nameQuantityCust##concrete##mer (St##concrete##ck stock)= name(stock) + ' (кол-во)' CHARWIDTH 15;
    namePriceCust##concrete##mer (St##concrete##ck stock)= name(stock) + ' (цена)' CHARWIDTH 15;
    nameBalanceCust##concrete##mer (St##concrete##ck stock)= name(stock) + ' (остаток)' CHARWIDTH 15;    
    
    
    n##concrete##t###stockProp (###form o) = NOT stockProp(o);
    EXTEND FORM form

        TREE stockTree a = BPSTRING[3], sg = StockGroup PARENT parent(sg), ts = Stock
        PROPERTIES READONLY SHOWIF n##concrete##t###stockProp(o) VALUE(a), sgTreeName = name(sg), tsTreeName = name(ts)
        ORDERS sgTreeName
        FILTERS stringEqualsAll(a),
                st##concrete##ckGr##concrete##up(ts) == sg
        FILTERGROUP object##inactiveStock1 FILTER 'Активный' active(ts) 'ctrl F10' DEFAULT
        TREE skuTree sk = SkuGroup PARENT parent(sk)
        PROPERTIES READONLY concrete##rder(sk), skuTreeName = name(sk)
        ORDERS concrete##rder(sk), skuTreeName
        FILTERGROUP inactive FILTER 'Активные' active(sk) 'F6' DEFAULT

        OBJECTS cc = Stock GRID
        FILTERGROUP object##inactiveStock2 FILTER 'Активный' active(cc) 'ctrl F10' DEFAULT
        
        OBJECTS           sts=(st=Stock, ks=Sku)
        PROPERTIES        READONLY name(ks) ON CONTEXTMENU sh##concrete##wM##concrete##vementSku(ks, st) ON CONTEXTMENU sh##concrete##wM##concrete##vementPriceSku(ks, st), idBarc##concrete##de(ks), id(ks) SHOWIF sh##concrete##wIDs(), sh##concrete##rtNameU###concrete##M(ks), name(st) SHOWIF n##concrete##t###stockProp(concrete) 
        PROPERTIES        addSku() DRAW sts, EDIT(ks) NEWSESSION, c##concrete##py(ks)
        FILTERS           isParent(sk, ks),
                          (st == ts AND sg IS StockGroup OR isParent(sg, st) AND NOT ts OR st IS Stock AND NOT sg AND NOT ts) AND NOT stockProp(concrete) OR
                          st == stockProp(concrete) AND NOT sg AND NOT ts,
                          legalEntity(st) == legalEntityProp(concrete),
                          active(st)

        ORDERS          name(ks), name(st)

        PROPERTIES quantity###legalEntityProp(ks, concrete, st) READONLY BACKGROUND backgr##concrete##undQuantity(ks, concrete, st)
        PROPERTIES quantity###legalEntityProp##Cust##concrete##mer(ks, concrete, st, cc)  COLUMNS (cc) HEADER nameQuantityCust##concrete##mer(cc) ON CHANGE changeQuantityCust##concrete##mer(ks, concrete, st, cc)
        PROPERTIES READONLY prevCurrentBalance(ks,st)
        PROPERTIES READONLY  priceCust##concrete##mer(ks, st, concrete, cc)  COLUMNS (cc) HEADER namePriceCust##concrete##mer(cc)

        FILTERS in(concrete,cc)
        FILTERGROUP activeSku FILTER 'Активные' active(ks) DEFAULT

        FILTERGROUP object##filter1
            FILTER 'С остатком' prevCurrentBalance(ks, st) 'F10' DEFAULT
            FILTER 'В заказе' quantity###legalEntityProp(ks, concrete, st) 'F9'


    ;

    DESIGN form {
        specificationBox {
            tabbed = TRUE;
            NEW itemBox {
                caption = 'Подбор';
                horizontal = TRUE;

                NEW skuFilters {
                    fill = 1;
                    horizontal = FALSE;
                    MOVE BOX(TREE stockTree) { caption = 'Группы складов'; }
                    MOVE BOX(TREE skuTree) { caption = 'Группы SKU'; }
                }
                NEW skuMainPane {
                    fill = 2.5;
                    horizontal = FALSE;
                    width = 400;
                    NEW skuSelectPane {
                        fill = 1;
                        horizontal = FALSE;
                        MOVE BOX(sts) {
                            caption = 'Товары';
                        }
                        PROPERTY(copy(ks)) { focusable = FALSE; }
                    }
                }
            }
        }
        PROPERTY(prevCurrentBalance(ks, st)) { background = #FFEEEE; } 
        PROPERTY(quantity###legalEntityProp##Customer(ks, concrete, st, cc)) { background = #D4FFD4; }
    }    
    
END

// ----------- Подбор (партия / несколько складов / несколько складов покупателей)---------------//        Не забывать имплементить цвет, если нужно!!!!!!!!

META defineDocumentBatchStockExtraPriceListTypeAgreement(object, stockProp, stockExtra)
    @defineDocumentBatchStockExtra(object, batch, sku, stockProp, stockExtra);
        
    priceListType 'Вид цен для склада пок-ля' (###object object, Stock stockExtra, Batch batch) = priceListType(object, stockExtra, sku(batch));

    ledgerPriceCustomer 'Цена (базовая)' (Batch batch, Stock stockProp, ###object object, Stock stockExtra) = prevPriceB(priceListType(object, stockExtra, batch), batch, stockProp, dateTime(object));

    viewPriceCustomer 'Цена' (batch, stockProp, object, stockExtra) = DATA LOCAL NESTED NUMERIC[16,4] (Batch, Stock, ###object, Stock);

    priceCustomer 'Цена' (Batch batch, Stock stockProp, ###object object, Stock stockExtra) = viewPriceCustomer(batch, stockProp, object, stockExtra);

    updateViewPriceCustomer (Batch batch, Stock stockProp, ###object object, Stock stockExtra)  { 
        FOR PriceListType pt == priceListType(object, stockExtra, batch) AND stockProp IS Stock NOINLINE (pt) DO
            viewPriceCustomer(batch, stockProp, object, stockExtra) <- prevPriceB(pt, batch, stockProp, dateTime(object));
    }
END
META defineDocumentBatchStockExtraPriceListTypeSystemLedger(object, priceListTypeProp, stockProp, stockExtra)
    @defineDocumentBatchStockExtra(object, batch, sku, stockProp, stockExtra);
    priceBatchStock###object###stockExtra 'Цена' (batch, stockProp, object, stockExtra) = prevPriceBPriceListTypeBatchStockDateTime(SystemLedgerPriceListType.##priceListTypeProp, batch, stockProp, dateTime###object(object)) AND stockExtra IS Stock;
END

META defineDocumentBatchStockExtra(object, detail, batchProp, skuProp, stockProp, stockExtra)

    detail##SupplierCustomer (batch, object, stockProp, stockExtra) =  GROUP MAX ###detail detail
        BY batchProp(detail), object(detail), stockProp(detail), stockExtra(detail);

    quantitySupplierCustomer 'Кол-во товара в документе' (batch, object, stockProp, stockExtra) = GROUP SUM quantity(###detail detail)
        BY batchProp(detail), object(detail), stockProp(detail), stockExtra(detail);

    quantitySupplier 'Итого' (batch, object, stockProp) = GROUP SUM quantity(###detail detail)
        BY batchProp(detail), object(detail), stockProp(detail);

    backgroundQuantity 'Цвет' (batch, object, stock) = ABSTRACT CASE COLOR (Batch, ###object, Stock);          

    changeQuantityValueCustomer(###batchProp batchProp, ###object object, Stock stockProp, Stock stockExtra, NUMERIC[16,5] n)  { 
        IF detail##SupplierCustomer(batch, object, stockProp, stockExtra) THEN {
            IF n THEN {
                quantity(###detail detail) <- n WHERE detail == detail##SupplierCustomer(batch, object, stockProp, stockExtra);
            } ELSE {
                FOR detail##SupplierCustomer(batch, object, stockProp, stockExtra) == ###detail detail DO
                    DELETE detail;
            }
        } ELSE {
            IF n THEN {
                NEW d = ###detail {
                   object(d) <- object;
                   skuProp(d) <- skuProp(batch);
                   batchProp(d) <- batch;
                   stockExtra(d) <- stockExtra;
                   quantity (d) <- n;
                }
            }
        }
    }
    changeQuantityCustomer(###batchProp batchProp, ###object object, Stock stockProp, Stock stockExtra)  { 
        INPUT n = NUMERIC[16,5] DO
            changeQuantityValueCustomer(batch, object, stockProp, stockExtra, n);
    }
END
META defineDocumentBatchStockExtra(object, batchProp, skuProp, stockProp, stockExtra)
    @defineDocumentBatchStockExtra(object, object##Detail, batchProp, skuProp, stockProp, stockExtra);
END

META extendFormDocumentBatchStockExtraCustom(object, form, concrete, legalEntityProp, stockProp, stockExtra)

    EXTEND FORM form
        OBJECTS ccc = Stock GRID
        FILTERGROUP object##inactiveStock FILTER 'Активный' active(ccc) 'ctrl F10' DEFAULT

        OBJECTS           stb=(sto=Stock, b=Batch)
        PROPERTIES(b) READONLY   nameSku, idBarc##concrete##deSku, sh##concrete##rtNameU###concrete##M, id SHOWIF sh##concrete##wIDs(), name 
        PROPERTIES(sto) READONLY stockName = name SHOWIF n##concrete##t###stockProp(concrete)

        FILTERS           isParent(sk, b),
                          (sto == ts AND sg IS StockGroup OR isParent(sg, sto) AND NOT ts OR sto IS Stock AND NOT sg AND NOT ts) AND NOT stockProp(concrete) OR
                          sto == stockProp(concrete) AND NOT sg AND NOT ts,
                          legalEntity(sto) == legalEntityProp(o)
        ORDERS          nameSku(b)

        PROPERTIES quantity###legalEntityProp(b, concrete, sto) READONLY BACKGROUND backgr##concrete##undQuantity(b, concrete, sto)
        PROPERTIES quantity###legalEntityProp##Cust##concrete##mer(b, concrete, sto, ccc)  COLUMNS (ccc) HEADER nameQuantityCust##concrete##mer(ccc) ON CHANGE changeQuantityCust##concrete##mer(b, concrete, sto, ccc)
        PROPERTIES READONLY prevCurrentBalance(b,sto)
        PROPERTIES READONLY  priceCust##concrete##mer(b, sto, concrete, ccc)  COLUMNS (ccc) HEADER namePriceCust##concrete##mer(ccc)

        FILTERS in(concrete,ccc)

        FILTERGROUP object##filter2
            FILTER 'С остатком' prevCurrentBalance(b, sto) 'F10' DEFAULT
            FILTER 'В заказе' quantity###legalEntityProp(b, concrete, sto) 'F9'


    ;

    DESIGN form {
        skuSelectPane {
            tabbed = TRUE;
            MOVE BOX(stb) {
                caption = 'Партии';
            }
        }
        PROPERTY(prevCurrentBalance(b, sto)) { background = #FFEEEE; }
        PROPERTY(quantity###legalEntityProp##Cust##concrete##mer(b, concrete, sto, ccc)) { background = #D4FFD4; }
    }
END

// ----------- Подбор (товар / один склад) без количества ---------------//

META defineDocumentSkuStockIn(object, detail, skuProp, stockProp)

    currentBalance 'Остаток' (###skuProp sku, ###object object) = currentBalance(sku, stockProp(object));
    prevCurrentBalance 'Остаток' (###skuProp sku, ###object object) = prevCurrentBalance(sku, stockProp(object));
    detail(sku, object) = GROUP SUM 1 BY skuProp(###detail detail), object(detail);

    in 'Отм.' (###skuProp sku, ###object object) = TRUE IF detail(sku, object);

    changeIn(###skuProp skuProp, ###object object)  { 
        INPUT b = BOOLEAN DO
            IF detail(sku, object) THEN {
                IF NOT b THEN {
                    //FOR sku == skuProp###detail(detail) AND object == object###detail(detail) DO {
                    FOR sku == skuProp(###detail detail) AND object == object(detail) DO 
                        DELETE detail;
                    //}
                }
            } ELSE {
                IF b THEN {
                    NEW d = ###detail {
                       object(d) <- object;
                       skuProp(d) <- sku;
                    }
                }
            }
    }

END
META defineDocumentSkuStockIn(object, skuProp, stockProp)
    @defineDocumentSkuStockIn(object, object##Detail, skuProp, stockProp);
END

META extendFormDocumentSkuStockIn(object, form, concrete)

    EXTEND FORM form

        TREE treeGroup sk=Group PARENT parent(sk)
        PROPERTIES READONLY order(sk), name(sk)
        FILTERS groupType(sk) == groupType(concrete)
        FILTERGROUP object##inactive FILTER 'Активные' active(sk) 'F6' DEFAULT
        ORDERS order(sk), name(sk) 
        OBJECTS ks=Sku
        PROPERTIES             in(ks,concrete) ON CHANGE changeIn(ks, concrete), inputName = name(ks) READONLY
        PROPERTIES(ks)          READONLY idBarcode, id SHOWIF showIDs(), shortNameUOM
        PROPERTIES(ks, concrete)currentBalance READONLY
        PROPERTIES             addSku() DRAW ks, EDIT(ks) NEWSESSION, copy(ks)

        FILTERS                isParent(sk, ks) OR ks IS Sku AND NOT sk

        ORDERS inputName
        FILTERGROUP activeSku FILTER 'Активные' active(ks) DEFAULT

        FILTERGROUP object##filterBalance
            FILTER 'С остатком' prevCurrentBalance(ks, concrete) 'F11'

    ;

    DESIGN form {
        specificationBox {
            tabbed = TRUE;
            NEW itemBox {
                horizontal = TRUE;
                caption = 'Подбор';

                MOVE BOX(TREE treeGroup);
                NEW skuSelectPane {
                    fill = 2;
                    MOVE BOX(ks);
                    PROPERTY(copy(ks)) { focusable = FALSE; }
                }
            }
        }
    }
END

//----------- Подбор (товар / один склад - расширение фильтра поставщиком) -----------//

META defineDocumentSkuStockSupplier (object, form, concrete)
    filterSupplier = DATA LOCAL LegalEntity (###object);
    nameFilterSupplier 'Поставщик' (###form object) = name(filterSupplier(object));
    filterSupplier (###form object, Sku sku) = prevInSupplier(filterSupplier(object), sku) OR
                                                  (sku IS Sku AND NOT filterSupplier(object));

    EXTEND FORM form
        PROPERTIES nameFilterSupplier(concrete) 
        FILTERS    filterSupplier(concrete, ks)
    ;
    DESIGN form {
        skuMainPane {
            MOVE PANEL(concrete) FIRST;
        }
    }
END

//----------- Подбор (партия / один склад - расширение фильтра поставщиком) -----------//

META defineDocumentBatchStockSupplier (object, form, concrete)

    filterSupplier (###form object, Batch batch) = filterSupplier(object) == prevSupplier(batch) OR
                                                  (batch IS Batch AND NOT filterSupplier(object));

    EXTEND FORM form
        FILTERS    filterSupplier(concrete, b)
    ;

END

// -------------------------------------------- Подбор через диалог --------------------------------------- //

META defineDialogSku (form)

    dialogQuantity 'Кол-во' = DATA LOCAL NUMERIC[16,5] (Sku);

    FORM form 'Подбор SKU'
        TREE skuTree sk = SkuGroup PARENT parent(sk)
        PROPERTIES READONLY order(sk), skuTreeName = name(sk)
        ORDERS order(sk), skuTreeName
        FILTERGROUP inactive FILTER 'Активные' active(sk) 'F6' DEFAULT

        OBJECTS s=Sku                                 //form###nameSku 'Наименование' (sku) = IF form###stock() THEN nameSkuStock(sku, form###stock()) ELSE nameSku(sku);
        PROPERTIES READONLY    idBarcode(s), id(s) SHOWIF showIDs(), inputName = name(s) //form###nameSku(s)
        PROPERTIES(s)          dialogQuantity
        PROPERTIES             EDIT(s) NEWSESSION

        FILTERS                isParent(sk, s)
        FILTERGROUP activeSku FILTER 'Активные' active(s) DEFAULT
        ORDERS inputName

        OBJECTS si=Sku
        PROPERTIES READONLY     idBarcode(si), selectedName = name(si)
        PROPERTIES(si)          dialogQuantity
        FILTERS                 dialogQuantity(si)
        ORDERS selectedName
    ;

    DESIGN form {
        BOX {
            size = (1024, 768);
            NEW skuContainer BEFORE TOOLBARBOX {
                fill = 1;
                horizontal = TRUE;

                MOVE BOX(TREE skuTree);
                NEW inputContainer {
                    fill = 2;
                    horizontal = FALSE;

                    NEW filterContainer {
                        align = STRETCH;
                        horizontal = TRUE;
                        //NEW PROPERTY(form###nameStock());
                    }

                    NEW inputSkuContainer {
                        fill = 1;
                        horizontal = FALSE;

                        MOVE BOX(s) {
                            fill = 3;
                        }
                        MOVE BOX(si);
                    }
                }
            }
        }
    }

END

META defineDialogStockSku (form)

    @defineDialogSku (form);

    form##Stock = DATA LOCAL Stock ();
    dialogAll 'Весь остаток' = DATA LOCAL BOOLEAN (Sku);
    form##NameStock 'Склад' () = name(form##Stock()) CHARWIDTH 30;

    dialogBalance 'Остаток' (Sku sku) = currentBalance(sku, form##Stock());
    dialogBalanceFilter (Sku sku) = dialogBalance(sku) OR (sku IS Sku AND NOT form##Stock());

    dialogQuantity(Sku sku) <- dialogBalance(sku) WHEN SET(dialogAll(sku));

    EXTEND FORM form
        PROPERTIES() form##NameStock

        PROPERTIES(s) READONLY dialogBalance SHOWIF form##Stock()
        PROPERTIES(s)          dialogAll SHOWIF form##Stock()
        FILTERGROUP balance
            FILTER 'С остатком' dialogBalanceFilter(s) DEFAULT

        PROPERTIES(si) READONLY dialogBalance SHOWIF form##Stock()
        PROPERTIES(si)          dialogAll SHOWIF form##Stock()
    ;

    DESIGN form {
        filterContainer {
            MOVE PROPERTY(form##NameStock());
        }
    }
END

META defineAddDetailDialogSkuStock (object, skuProp, stockProp, form)
    @defineAddDetailDialogSkuStockCustom (object, object##Detail, , skuProp, stockProp, form);
END

META defineAddDetailDialogSkuStockCustom (object, detail, caption, skuProp, stockProp, form)
    @defineAddDetailDialogSkuStockCustomInner(object, ###object, detail, caption, skuProp, stockProp, form);
END

META defineAddDetailDialogSkuStockCustomInner (object, class, detail, caption, skuProp, stockProp, form)
    @defineAddDetailDialogSkuCustom(object, detail, caption, skuProp, form);
    addDetail###form##Stock###detail 'Подбор товаров'###caption(class object)  { 
        form##Stock() <- stockProp(object);
        dialogAll(###skuProp sku) <- NULL;

        EXEC addDetail###form###detail(object);
    } TOOLBAR;
END

META defineAddDetailDialogSku (object, skuProp, form)
    @defineAddDetailDialogSkuCustom(object, object##Detail, , skuProp, form);
END

META defineAddDetailDialogSkuCustom (object, detail, caption, skuProp, form)
    @defineAddDetailDialogSkuCustomInner (object, ###object, detail, ###detail, caption, skuProp, form);
END

META defineAddDetailDialogSkuCustomInner (object, class, detail, detailClass, caption, skuProp, form)
    addDetail###form###detail 'Подбор товаров'###caption(class object)  { 
        DIALOG form DO {
            FOR dialogQuantity(###skuProp sku) INLINE NEW w = detailClass DO {
                object(w) <- object;
                skuProp(w) <- sku;
                quantity(w) <- dialogQuantity(sku);
            }
        }
        dialogQuantity(###skuProp sku) <- NULL;
    } TOOLBAR;
END

@defineDialogStockSku(dialogSku);

dataInSession 'Отм.' = DATA LOCAL BOOLEAN (Group);

levelParent (Group group) = GROUP
    MIN level(group, Group parent) IF dataInSession(parent);

inParent (Group group) = TRUE IF levelParent(group);

inSession 'Отм.' (Group group) = OVERRIDE
    dataInSession(group),
    inParent(group);

countInSessionGroups = GROUP SUM 1 IF dataInSession(Group g);
    
include 'Отм.' = DATA LOCAL BOOLEAN (Sku);
include 'Отм.' (GroupType groupType, Sku sku) =  OVERRIDE include(sku), inSession(group(groupType, sku));

FORM dialogSkuGroup 'Подбор товарных групп'
    TREE skuTree sk = SkuGroup PARENT parent(sk)
    PROPERTIES inSession(sk)
    PROPERTIES READONLY order(sk), skuTreeName = name(sk)
    ORDERS order(sk), skuTreeName
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F6' DEFAULT

    OBJECTS skg = SkuGroup
    PROPERTIES(skg)         inSession    
    PROPERTIES READONLY     name(skg)
    FILTERS                 inSession(skg)
    ORDERS name(skg)
;

DESIGN dialogSkuGroup {
    BOX {
        size = (1024, 768);
        NEW skuContainer BEFORE TOOLBARBOX {
            fill = 1;
            horizontal = TRUE;
            MOVE BOX(TREE skuTree);
            MOVE BOX(skg);
        }
    }
}


// ----------------------------------------------- Документы с товарами для подбора ---------------------------------------- //

CLASS ABSTRACT Document 'Документ с товарами';
CLASS ABSTRACT DocumentDetail 'Строка документа';

isClosed 'Закрыт' = ABSTRACT BOOLEAN  (Document);
isPosted 'Проведен' = ABSTRACT BOOLEAN (Document);

number 'Номер' = ABSTRACT STRING[48] (Document);
series 'Серия' = ABSTRACT BPSTRING[2] (Document);
date 'Дата' = ABSTRACT DATE(Document);

supplier = ABSTRACT LegalEntity(Document);
nameSupplier 'Поставщик' (Document document) = name(supplier(document));
supplierStock = ABSTRACT Stock(Document);
nameSupplierStock 'Склад поставщика' (Document document) = name(supplierStock(document));

customer = ABSTRACT LegalEntity(Document);
nameCustomer 'Покупатель' (Document document) = name(customer(document));
customerStock = ABSTRACT Stock(Document);
nameCustomerStock 'Склад покупателя'(Document document) = name(customerStock(document));

document = ABSTRACT Document(DocumentDetail);

sku = ABSTRACT Sku(DocumentDetail);
idBarcodeSku 'Штрих-код' (DocumentDetail documentDetail) = idBarcode(sku(documentDetail));
nameSku 'Товар' (DocumentDetail d) = name(sku(d));
quantity 'Кол-во' = ABSTRACT NUMERIC[16,5] (DocumentDetail);
price 'Цена' = ABSTRACT NUMERIC[16,4] (DocumentDetail);
index 'Номер' = ABSTRACT INTEGER(DocumentDetail);

countDocumentDetail 'Кол-во строк' (o) = GROUP SUM 1 BY document(DocumentDetail d);
quantityDocumentDetail 'Кол-во товара' (sku, o) = GROUP SUM quantity(DocumentDetail d) BY sku(d), document(d);
countDocumentDetail 'Кол-во строк товара' (sku, o) = GROUP SUM 1 IF document(DocumentDetail d)==Document do BY sku(d), document(d);

fillPriceDocuments 'Использовать цены' = DATA LOCAL BOOLEAN ();

inSession 'Отм.' = DATA LOCAL BOOLEAN (Document);
numberSelectedDocuments 'Выбранные документы' = GROUP CONCAT number(Document d) IF inSession(d) ,', ' ORDER d CHARWIDTH 50;
FORM documents 'Документы с товарами'
    PROPERTIES()  TOOLBAR fillPriceDocuments, numberSelectedDocuments
;

DESIGN documents {
    BOX {
        size = (1024, 768);
        NEW  tabs {
            tabbed = TRUE;
            fill = 1;
        }
        MOVE TOOLBARBOX {
            MOVE PROPERTY(fillPriceDocuments()) AFTER TOOLBARLEFT;
            MOVE PROPERTY(numberSelectedDocuments()) AFTER PROPERTY(fillPriceDocuments());
        };
    }
}

META implementDocumentPrefix(object, prefixP, prefixQ)
    isClosed[Document](###object object) += isClosed(object);
    isPosted[Document](###object object) += isPosted(object);
    number[Document](###object object) += number(object);
    series[Document](###object object) += series(object);
    date[Document](###object object) += date(object);

    index[DocumentDetail](###object##Detail detail) += index(detail);
    sku[DocumentDetail](###object##Detail detail) += sku(detail);
    quantity[DocumentDetail](###object##Detail detail) += quantity(detail);
    price[DocumentDetail](###object##Detail detail) += prefixP###price(detail);

    document[DocumentDetail](###object##Detail detail) += object(detail);

    overFillDocument  ABSTRACT LIST ( ###object##Detail, DocumentDetail); 
    fillDocument 'Подбор документа'(User###object user###object)  { 
        DIALOG documents DO {
            FOR inSession(document(DocumentDetail documentDetail)) NEW i = User###object##Detail DO {
                user###object(i) <- user###object;
                sku(i) <- sku(documentDetail);
                quantity(i) <- quantity(documentDetail);
                price(i) <- price(documentDetail) WHERE fillPriceDocuments();
                overFillDocument(i, documentDetail);
            }
        }
    } TOOLBAR;

END

META implementDocumentForm(object, char, tabCaption, container)
    EXTEND FORM documents
        OBJECTS char = ###object
        PROPERTIES(char) inSession
        PROPERTIES(char) READONLY number, series, date, nameSupplier, nameSupplierStock,
                         nameCustomer, nameCustomerStock, objectClassName
                         
        OBJECTS char##d = ###object##Detail
        PROPERTIES(char##d) READONLY READONLY index, idBarcodeSku, nameSku, quantity, price SHOWIF fillPriceDocuments()
        
        FILTERS document(char##d)==char
    ;
    
    DESIGN documents {
        tabs {
            NEW container {
                caption = tabCaption;
                horizontal = FALSE;
                MOVE BOX(char);
                MOVE BOX(char##d);
            }
        }
    }
    container##Active() = ACTIVE TAB documents.container;
    
    EXTEND FORM documents
        EVENTS
            ON OK {
                IF container##Active() AND NOT (GROUP SUM 1 IF inSession(Document d)) THEN {
                    inSession(char) <- TRUE;
                } 
            }  
    ;
END

META implementDocumentForm(object, char, tabCaption)
    @implementDocumentForm(object, char, tabCaption, object);
END

META implementDocument(object)

    @implementDocumentPrefix(object, , );
END

META implementDocumentSupplierCustomer(object)

    @implementDocument(object);

    supplier[Document](###object object) += supplier(object);
    supplierStock[Document](###object object) += supplierStock(object);
    customer[Document](###object object) += customer(object);
    customerStock[Document](###object object) += customerStock(object);
END

// ------------------------- Партии ---------------------------- //
batch = ABSTRACT Batch(DocumentDetail);
nameBatch 'Партия' (DocumentDetail d) = name(batch(d));

META implementDocumentBatch(object)
    @implementDocumentBatch(object, );
END

META implementDocumentBatch(object, prefix)
    batch[DocumentDetail](###object##Detail detail) += prefix###batch(detail);
    skipFillBatch = ABSTRACT CASE BOOLEAN (###object##Detail);
    overFillDocument (User###object##Detail i, DocumentDetail d) + { 
        IF NOT skipFillBatch(i) THEN {
            batch(i) <- batch(d);
        }        
    }
END

META implementDocumentBatchForm(char)
    EXTEND FORM documents 
        PROPERTIES(char##d) nameBatch AFTER nameSku(char##d)
    ;
END

//----------------- Объединение строк документов с одинаковыми товарами и ценами ------------------- //

META defineMergeDocumentDetails(object, form, concrete)
    indexDocumentDetail(###object##Detail d) = PARTITION SUM 1 IF NOT batch(d) ORDER d BY object(d), sku(d), price(d);
    
    mergeDocumentDetails 'Объединить строки' (###object o) {
        FOR object(###object##Detail d) == o AND indexDocumentDetail(d) > 1 DO {
            quantity(###object##Detail dd) <- quantity(dd) (+) quantity(d) WHERE object(dd) == o AND sku(dd) == sku(d) AND price(dd) == price(d) AND indexDocumentDetail(dd) == 1;
        }
        DELETE ###object##Detail d WHERE object(d) == o AND indexDocumentDetail(d) > 1;
    }
    
    EXTEND FORM form
        PROPERTIES(concrete) DRAW d mergeDocumentDetails TOOLBAR
    ;
END

//----------------- Логирование изменений в документах ------------------- //

CLASS DocumentLog 'Запись лога документов';
TABLE documentLog(DocumentLog);

dataDisableDocumentLog 'Отключить запись лога документов' = DATA BOOLEAN ();
overDisableDocumentLog = DATA LOCAL BOOLEAN ();
disableDocumentLog 'Отключить запись лога документов' () = dataDisableDocumentLog() OR overDisableDocumentLog() PREREAD;
enableDocumentLog = NOT disableDocumentLog() PREREAD;

EXTEND FORM options
    PROPERTIES() dataDisableDocumentLog
;

DESIGN options { 
    log { 
        MOVE PROPERTY(dataDisableDocumentLog()) FIRST;   
    } 
}

documentId = DATA LONG (DocumentLog);
INDEX documentId(DocumentLog l), l;

documentLog (LONG id) = GROUP LAST DocumentLog l ORDER l BY documentId(l);

numberDocument 'Номер документа' = DATA STRING[48] (DocumentLog) IN id CHARWIDTH 8 INDEXED;
seriesDocument 'Серия документа' = DATA BPSTRING[2] (DocumentLog) IN id CHARWIDTH 3 NOFLEX;
dateDocument 'Дата документа' = DATA DATE(DocumentLog) IN id;
typeDocument 'Тип документа' = DATA BPISTRING[100] (DocumentLog) IN id; 

hostnameComputer 'Имя компьютера' = DATA ISTRING[100] (DocumentLog) CHARWIDTH 20; 
userLogin 'Логин пользователя' = DATA STRING[100] (DocumentLog) CHARWIDTH 20; 
nameContact 'Имя пользователя' =  DATA STRING[100] (DocumentLog) IN id;
dateTimeSession 'Время изменения' = DATA DATETIME (DocumentLog) IN id;
dateSession'Дата изменения' (DocumentLog d) = DATE(dateTimeSession(d));
timeSession 'Время изменения' (DocumentLog d) = TIME(dateTimeSession(d));

supplierStock = DATA Stock(DocumentLog);
nameSupplierStock 'Склад поставщика'(DocumentLog d) = name(supplierStock(d));

customerStock = DATA Stock(DocumentLog);
nameCustomerStock 'Склад покупателя'(DocumentLog d) = name(customerStock(d));

@defineLog (DocumentLog, 'изменений документов', log, dateSession);

CLASS TypeChange 'Тип изменения' {
    add 'Добавление',
    delete 'Удаление',
    addRow 'Добавление строк',
    deleteRow 'Удаление строк',
    changeSeriesNumber 'Изменение серии/номера',
    changeSupplierStock 'Изменение склада поставщика',
    changeCustomerStock 'Изменение склада покупателя',
    changePosted 'Проведение/Распроведение',
    changeClosed 'Закрытие/Открытие',
    changeDate 'Изменение даты'
}

typeChange= DATA TypeChange (DocumentLog);
nameTypeChange 'Тип изменения' (DocumentLog l) = staticCaption(typeChange(l)) IN id CHARWIDTH 25;

note 'Примечание' = DATA STRING[255] (DocumentLog) CHARWIDTH 30;

file 'Файл' = DATA FILE (DocumentLog);
openFile 'Открыть Файл' (DocumentLog l)  { open((file(l))); } TOOLBAR;
showFile = TRUE IF file(DocumentLog dLog);

WHEN SET(Document o IS Document) IF NOT disableDocumentLog() DO {
    NEW d = DocumentLog {
        documentId(d) <- LONG(o);
        typeDocument(d) <- objectClassName(o);
        numberDocument(d) <- number(o);  
        seriesDocument(d) <- series(o); 
        dateDocument(d) <- date(o);   
        typeChange(d) <- TypeChange.add;
        hostnameComputer(d) <- hostnameCurrentComputer();
        userLogin(d) <- login(currentUser()); 
        nameContact(d) <- STRING[100](name(currentUser()));
        dateTimeSession(d) <- currentDateTime();     
        note(d) <- STRING[255]('Добавлен документ');              
        supplierStock(d) <- supplierStock(o);
        customerStock(d) <- customerStock(o);
    }
}
WHEN DROPPED(Document o IS Document) IF NOT disableDocumentLog() DO {
    NEW d = DocumentLog {       
        documentId(d) <- LONG(PREV(o AS Document));
        typeDocument(d) <- prevObjectClassName(o);
        numberDocument(d) <- PREV(number(o));  
        seriesDocument(d) <- PREV(series(o)); 
        dateDocument(d) <- PREV(date(o));   
        typeChange(d) <- TypeChange.delete;
        hostnameComputer(d) <- hostnameCurrentComputer();
        userLogin(d) <- login(currentUser()); 
        nameContact(d) <- STRING[100](name(currentUser()));
        dateTimeSession(d) <- currentDateTime();        
        note(d) <- STRING[255]('Удален документ');         
        supplierStock(d) <- PREV (supplierStock(o));
        customerStock(d) <- PREV (customerStock(o));
    }
}

WHEN (CHANGED(number(Document o)) OR CHANGED(series(o))) AND o IS Document AND NOT SET(o IS Document) AND NOT disableDocumentLog()  DO {
    NEW d = DocumentLog {
        documentId(d) <- LONG(o);
        typeDocument(d) <- objectClassName(o);
        numberDocument(d) <- number(o);  
        seriesDocument(d) <- series(o); 
        dateDocument(d) <- date(o);   
        typeChange(d) <- TypeChange.changeSeriesNumber;
        note(d) <- STRING[255]('Предыдущее значение серия/номер: '+(CONCAT '', PREV(series(o)), PREV(number(o))));      
        hostnameComputer(d) <- hostnameCurrentComputer();
        userLogin(d) <- login(currentUser()); 
        nameContact(d) <- STRING[100](name(currentUser()));
        dateTimeSession(d) <- currentDateTime();                 
        supplierStock(d) <- supplierStock(o);
        customerStock(d) <- customerStock(o);
    }
}

WHEN (INTEGER x== [GROUP SUM 1 IF SET(DocumentDetail d IS DocumentDetail) BY document(d)](Document o)) IF NOT disableDocumentLog() DO {
    NEW d = DocumentLog {
        documentId(d) <- LONG(o);
        typeDocument(d) <- objectClassName(o);
        numberDocument(d) <- number(o);  
        seriesDocument(d) <- series(o); 
        dateDocument(d) <- date(o);   
        typeChange(d) <- TypeChange.addRow;
        note(d) <- STRING[255]('Количество добавленных строк: '+x);  
        hostnameComputer(d) <- hostnameCurrentComputer();
        userLogin(d) <- login(currentUser()); 
        nameContact(d) <- STRING[100](name(currentUser()));
        dateTimeSession(d) <- currentDateTime();                 
        supplierStock(d) <- supplierStock(o);
        customerStock(d) <- customerStock(o);
    }
}

WHEN INTEGER x==[ GROUP SUM 1 IF DROPPED(DocumentDetail d IS DocumentDetail) BY PREV(document(d))](Document o) AND o IS Document AND NOT disableDocumentLog() NOINLINE DO {
    NEW d = DocumentLog {
        documentId(d) <- LONG(o);
        typeDocument(d) <- objectClassName(o);
        numberDocument(d) <- number(o);  
        seriesDocument(d) <- series(o); 
        dateDocument(d) <- date(o);   
        typeChange(d) <- TypeChange.deleteRow;
        note(d) <- STRING[255]('Количество удаленных строк: '+x);  
        hostnameComputer(d) <- hostnameCurrentComputer();
        userLogin(d) <- login(currentUser()); 
        nameContact(d) <- STRING[100](name(currentUser()));
        dateTimeSession(d) <- currentDateTime();                    
        supplierStock(d) <- supplierStock(o);
        customerStock(d) <- customerStock(o);
    }
}

WHEN CHANGED(supplierStock(Document o)) AND o IS Document AND NOT SET(o IS Document) AND NOT disableDocumentLog()  DO {
    NEW d = DocumentLog {
        documentId(d) <- LONG(o);
        typeDocument(d) <- objectClassName(o);
        numberDocument(d) <- number(o);  
        seriesDocument(d) <- series(o); 
        dateDocument(d) <- date(o);   
        typeChange(d) <- TypeChange.changeSupplierStock;
        note(d) <- STRING[255](CONCAT '','Предыдущее значение : ', name(PREV(supplierStock(o))));      
        hostnameComputer(d) <- hostnameCurrentComputer();
        userLogin(d) <- login(currentUser()); 
        nameContact(d) <- STRING[100](name(currentUser()));
        dateTimeSession(d) <- currentDateTime();     
        supplierStock(d) <- supplierStock(o);
        customerStock(d) <- customerStock(o);
    }
}

WHEN CHANGED(customerStock(Document o)) AND o IS Document AND NOT SET(o IS Document) AND NOT disableDocumentLog()  DO {
    NEW d = DocumentLog {
        documentId(d) <- LONG(o);
        typeDocument(d) <- objectClassName(o);
        numberDocument(d) <- number(o);  
        seriesDocument(d) <- series(o); 
        dateDocument(d) <- date(o);   
        typeChange(d) <- TypeChange.changeCustomerStock;
        note(d) <- STRING[255](CONCAT '','Предыдущее значение : ', name(PREV(customerStock(o))));      
        hostnameComputer(d) <- hostnameCurrentComputer();
        userLogin(d) <- login(currentUser()); 
        nameContact(d) <- STRING[100](name(currentUser()));
        dateTimeSession(d) <- currentDateTime();    
        supplierStock(d) <- supplierStock(o);
        customerStock(d) <- customerStock(o);
    }
}

WHEN (CHANGED(isPosted(Document o))) AND o IS Document AND NOT disableDocumentLog()  DO {
    NEW d = DocumentLog {
        documentId(d) <- LONG(o);
        typeDocument(d) <- objectClassName(o);
        numberDocument(d) <- number(o);  
        seriesDocument(d) <- series(o); 
        dateDocument(d) <- date(o);   
        typeChange(d) <- TypeChange.changePosted;
        note(d) <- STRING[255](IF isPosted(o) THEN 'Проведен' ELSE 'Распроведен');      
        hostnameComputer(d) <- hostnameCurrentComputer();
        userLogin(d) <- login(currentUser()); 
        nameContact(d) <- STRING[100](name(currentUser()));
        dateTimeSession(d) <- currentDateTime();    
        supplierStock(d) <- supplierStock(o);
        customerStock(d) <- customerStock(o);
    }
}

WHEN CHANGED(isClosed(Document o)) AND o IS Document AND NOT disableDocumentLog()  DO {
    NEW d = DocumentLog {
        documentId(d) <- LONG(o);
        typeDocument(d) <- objectClassName(o);
        numberDocument(d) <- number(o);  
        seriesDocument(d) <- series(o); 
        dateDocument(d) <- date(o);   
        typeChange(d) <- TypeChange.changeClosed;
        note(d) <- STRING[255](IF isClosed(o) THEN 'Закрыт' ELSE 'Открыт');      
        hostnameComputer(d) <- hostnameCurrentComputer();
        userLogin(d) <- login(currentUser()); 
        nameContact(d) <- STRING[100](name(currentUser()));
        dateTimeSession(d) <- currentDateTime();      
        supplierStock(d) <- supplierStock(o);
        customerStock(d) <- customerStock(o);
    }
}
    
WHEN CHANGED(date(Document o)) AND o IS Document AND NOT SET(o IS Document) AND NOT disableDocumentLog()  DO {
    NEW d = DocumentLog {
        documentId(d) <- LONG(o);
        typeDocument(d) <- objectClassName(o);
        numberDocument(d) <- number(o);  
        seriesDocument(d) <- series(o); 
        dateDocument(d) <- date(o);   
        typeChange(d) <- TypeChange.changeDate;
        note(d) <- STRING[255]('Предыдущее значение Даты: '+toDateDDMMYYYY(PREV(date(o))));      
        hostnameComputer(d) <- hostnameCurrentComputer();
        userLogin(d) <- login(currentUser()); 
        nameContact(d) <- STRING[100](name(currentUser()));
        dateTimeSession(d) <- currentDateTime();   
        supplierStock(d) <- supplierStock(o);
        customerStock(d) <- customerStock(o);
    }
}    

CLASS DocumentDetailLog 'Запись лога строк документов';
TABLE DocumentDetailLog(DocumentDetailLog);

documentId = DATA LONG (DocumentDetailLog) INDEXED;
//documentLog = GROUP MAX DocumentLog log IF documentId(log) == documentId(DocumentDetailLog d) BY d;
documentLog (DocumentDetailLog d) = documentLog(documentId(d));

index 'Номер строки' = DATA INTEGER (DocumentDetailLog);        

numberDocument 'Номер документа' = DATA STRING[48] (DocumentDetailLog) INDEXED;
seriesDocument 'Серия документа' = DATA BPSTRING[2] (DocumentDetailLog);
dateDocument 'Дата документа' = DATA DATE(DocumentDetailLog);
typeDocument 'Тип документа' = DATA BPISTRING[100] (DocumentDetailLog); 

sku = DATA Sku (DocumentDetailLog) INDEXED ;
idSku 'Код' (DocumentDetailLog l) = id(sku(l));
nameSku 'Наименование' (DocumentDetailLog l) = name(sku(l));

prevQuantity 'Кол-во (пред.)' = DATA NUMERIC[16,5] (DocumentDetailLog);
quantity 'Кол-во' = DATA NUMERIC[16,5] (DocumentDetailLog);

price 'Цена' = DATA NUMERIC[16,4] (DocumentDetailLog);

nameUser 'Имя пользователя'  = DATA STRING[100] (DocumentDetailLog);

dateTime 'Время изменения' = DATA DATETIME (DocumentDetailLog);
time 'Время изменения' (DocumentDetailLog d) = TIME(dateTime(d));
date 'Дата изменения' (DocumentDetailLog d) = DATE(dateTime(d));

note 'Примечание' = DATA STRING[20] (DocumentDetailLog);

@defineLog (DocumentDetailLog, 'строк документов', log, date);

overSet  ABSTRACT LIST( DocumentDetailLog, DocumentDetail);

WHEN  SET(DocumentDetail d IS DocumentDetail) AND NOT disableDocumentLog() DO  
    NEW l = DocumentDetailLog{
        documentId(l) <- LONG (document(d));
        index(l) <- index(d);
        numberDocument(l) <- number(document(d));
        seriesDocument(l) <- series(document(d));
        dateDocument(l) <- date(document(d));
        typeDocument(l) <- objectClassName(document(d));
        sku(l) <- sku(d);
        quantity(l) <- quantity(d);
        price(l) <- price(d);
        nameUser(l) <- ISTRING[100](name(currentUser()));
        dateTime(l) <- currentDateTime();
        note(l) <- 'Добавление';
        overSet(l,d);
    }

skipChange = ABSTRACT CASE BOOLEAN (DocumentDetail);

WHEN (CHANGED(price(DocumentDetail d)) OR CHANGED(quantity(d)) OR CHANGED(sku(d)) OR skipChange(d)) AND NOT DROPPED(d IS DocumentDetail) AND NOT SET(d IS DocumentDetail) AND NOT disableDocumentLog() DO  
    NEW l = DocumentDetailLog{
        documentId(l) <- LONG (document(d));
        index(l) <- index(d);
        numberDocument(l) <- number(document(d));
        seriesDocument(l) <- series(document(d));
        dateDocument(l) <- date(document(d));
        typeDocument(l) <- objectClassName(document(d));
        sku(l) <- sku(d);
        prevQuantity(l) <- PREV(quantity(d)); 
        quantity(l) <- quantity(d);
        price(l) <- price(d);
        nameUser(l) <- ISTRING[100](name(currentUser()));
        dateTime(l) <- currentDateTime();
        note(l) <- 'Изменение';
        overSet(l,d);
    }
    
overDropped  ABSTRACT LIST( DocumentDetailLog, DocumentDetail); 
   
WHEN DROPPED(DocumentDetail d IS DocumentDetail) AND NOT disableDocumentLog() DO  
    NEW l = DocumentDetailLog{
        documentId(l) <- LONG(PREV(document(d)));
        index(l) <- PREV(index(d));
        numberDocument(l) <- PREV(number(document(d)));
        seriesDocument(l) <- PREV(series(document(d)));
        dateDocument(l) <- PREV(date(document(d)));
        typeDocument(l) <- prevObjectClassName(PREV(document(d)));
        sku(l) <- PREV(sku(d));
        quantity(l) <- PREV(quantity(d));
        price(l) <- PREV(price(d));
        nameUser(l) <- ISTRING[100](name(currentUser()));
        dateTime(l) <- currentDateTime();
        note(l) <- 'Удаление';
        overDropped(l,d);
    }    

META defineDocumentLogForm(form, concrete)
    @defineDocumentLogForm(form, concrete, documentHistory);
END

META defineDocumentLogForm(form, concrete, container)
    EXTEND FORM form
        OBJECTS dLog=DocumentLog GRID
        PROPERTIES(dLog) READONLY numberDocument, seriesDocument, dateDocument, nameSupplierStock, nameCustomerStock, typeDocument,
                      hostnameComputer, userLogin, nameContact, dateSession, timeSession, nameTypeChange,
                      note
        PROPERTIES (dLog) openFile SHOWIF showFile(dLog)
        FILTERS documentId(dLog) == LONG(concrete)

        OBJECTS ddLog = DocumentDetailLog GRID
        PROPERTIES (ddLog) READONLY index, idSku, nameSku, quantity, price, nameUser, date, time, note
        FILTERS documentId(ddLog) == LONG(concrete)
    ;
    
    DESIGN form {
        container { 
            NEW historyTabs {
                 fill = 1;
                 tabbed = TRUE;
                 showIf = enableDocumentLog();
                 NEW historyLog{
                    caption = 'По документу';
                    horizontal = FALSE;
                    MOVE BOX(dLog);
                 }
                 NEW detailLog{
                     caption = 'По строкам';
                     MOVE BOX(ddLog);
                 }
            }
        }    
    }   
END

background = ABSTRACT CASE COLOR (DocumentLog);

FORM documentLogs 'Журнал изменения документов'
    OBJECTS d=DocumentLog
    PROPERTIES(d) READONLY BACKGROUND background(d)  numberDocument, seriesDocument, dateDocument, nameSupplierStock, nameCustomerStock, typeDocument,
                  hostnameComputer, userLogin, nameContact, dateSession, timeSession, nameTypeChange, note
                  
    OBJECTS l = DocumentDetailLog
    PROPERTIES (l) READONLY seriesDocument, numberDocument, dateDocument, typeDocument, 
                   index, idSku, nameSku, quantity, price, nameUser, date, time, note
    FILTERGROUP documents
        FILTER 'Фильтр по ID документа' documentId(d) == documentId(l) 'F10' DEFAULT
        FILTER 'Фильтр по номеру документа' numberDocument(d) == numberDocument(l) 'F11'
;

DESIGN documentLogs {
    BOX {
        MOVE BOX(d);
        MOVE BOX(l);
        MOVE TOOLBARBOX;        
    }
}

NAVIGATOR {
    logs {
        NEW documentLogs;

    }
}

//документы основания
basisDoc 'Документы основания' = ABSTRACT BOOLEAN (Document, Document) MATERIALIZED;
basisDoc 'Документы основания' = ABSTRACT BOOLEAN (DocumentDetail, Document) MATERIALIZED;

edit (DocumentLog d) + {}
edit (DocumentDetailLog d) + {}