MODULE EGAISLotAdjustment;

REQUIRE LotAdjustment, EGAISStock, EGAISActWriteOffExchange, EGAISActFixBarCodeExchange, EGAISSkuLedgerLot;

PRIORITY Lot;

NAMESPACE EGAIS;

actWriteOff = DATA ActWriteOff (LotAdjustment);
actFixBarCode = DATA ActFixBarCode (LotAdjustment);

defaultLotAdjustmentWriteOffType = DATA WriteOffType ();
idDefaultLotAdjustmentWriteOffType 'Тип списания ЕГАИС для инвентаризации марок (по умолчанию)' () = id (defaultLotAdjustmentWriteOffType());

EXTEND FORM integrationData
    PROPERTIES idDefaultLotAdjustmentWriteOffType()
;

DESIGN integrationData {
    EGAISParams {
        MOVE PROPERTY(idDefaultLotAdjustmentWriteOffType());
    }
}

processWriteOff 'Отправить в ЕГАИС' (LotAdjustment a) {
    NEWSESSION {
        quantity(Lot l) <- GROUP SUM quantity(LotAdjustmentDetail d) IF lotAdjustment(d) == a AND lot(d) == l;

        IF (GROUP SUM 1 IF quantity(Lot l) < 0) THEN NEW w = ActWriteOff {
            actWriteOff(a) <- w;

            number(w) <- seriesNumber(a);
            client(w) <- client(stock(a));
            dateTime(w) <- dateTime(a);
            type(w) <- OVERRIDE defaultLotAdjustmentWriteOffType(), writeOffType('Недостача');
            note(w) <- 'Списание продукции на основе изменения остатков';

            FOR [GROUP SUM 1 IF quantity(Lot l) < 0 BY f2Reg(markCode(id(l)))](F2Reg f) INLINE NEW ps = ActWriteOffPosition DO {
                actWriteOff(ps) <- w;

                product(ps) <- product(f);
                f2Reg(ps) <- f;

                FOR quantity(Lot l) < 0 AND f2Reg(markCode(id(l))) = f INLINE NEW m = ActWriteOffMark DO {
                    actWriteOffPosition(m) <- ps;
                    markCode(m) <- markCode(id(l));
                }
            }
            APPLY;

            IF NOT canceled() THEN {
                process(w);
            }
        }
    }
}

processFixBarCode 'Отправить в ЕГАИС' (LotAdjustment a) {
    NEWSESSION {   
        quantity(Lot l) <- GROUP SUM quantity(LotAdjustmentDetail d) IF lotAdjustment(d) == a AND lot(d) == l;

        LOCAL f2Reg = F2Reg (Lot);
        f2Reg(Lot l) <- (OVERRIDE f2Reg(markCode(id(l))) IF client(f2Reg(markCode(id(l)))) = client(stock(a)),
                                  GROUP LAST F2Reg r ORDER (OVERRIDE (currentBalance(r) (-) currentBalanceMarkCode(r)), 0.0 IF r IS F2Reg), r 
                                        WHERE client(r) = client(stock(a)) AND product(r) = product(markCode(id(l)))) 
                        WHERE quantity(l); 

        IF (GROUP SUM 1 IF quantity(Lot l) > 0) THEN NEW b = ActFixBarCode {
            actFixBarCode(a) <- b;

            number(b) <- seriesNumber(a);
            dateTime(b) <- dateTime(a);
            client(b) <- client(stock(a));
            note(b) <- 'Фиксации штрихкодов на балансе на основе изменения остатков';

            FOR [GROUP SUM 1 IF quantity(Lot l) > 0 BY f2Reg(l)](F2Reg f) INLINE NEW ps = ActFixBarCodePosition DO {
                actFixBarCode(ps) <- b;

                product(ps) <- product(f);
                f2Reg(ps) <- f;

                FOR quantity(Lot l) > 0 IF f2Reg(l) = f INLINE NEW m = ActFixBarCodeMark DO {
                    actFixBarCodePosition(m) <- ps;
                    markCode(m) <- markCode(id(l));
                }
            }
            APPLY;

            IF NOT canceled() THEN {
                process(b);
            }
        }
    }
}

EXTEND FORM lotAdjustments 
    OBJECTS a = ActWriteOff PANEL
    PROPERTIES(a) READONLY posted, canceled, number, date // canceled
    FILTERS a = actWriteOff(i)

    OBJECTS wp = ActWriteOffPosition
    PROPERTIES(wp) READONLY idProduct, fullNameProduct, idF2Reg, overQuantity
    FILTERS actWriteOff(wp) = a

    PROPERTIES(i) DRAW wp TOOLBAR
            processWriteOff SHOWIF isPosted(i) AND NOT activeActWriteOffOutDoc(a)

    PROPERTIES READONLY PANEL
        commentsActWriteOffAct 'Комментарий' = comments(actWriteOffOutDoc(a))

    OBJECTS b = ActFixBarCode PANEL
    PROPERTIES(b) READONLY posted, canceled, number, date // canceled
    FILTERS b = actFixBarCode(i)

    OBJECTS bp = ActFixBarCodePosition
    PROPERTIES(bp) READONLY idProduct, fullNameProduct, idF2Reg, countMarkCodes
    FILTERS actFixBarCode(bp) = b

    PROPERTIES(i) DRAW bp TOOLBAR
        processFixBarCode SHOWIF isPosted(i) AND NOT activeActFixBarCodeOutDoc(b)

    PROPERTIES READONLY PANEL
        commentsActFixBarCodeAct 'Комментарий' = comments(actFixBarCodeOutDoc(b))
;

DESIGN lotAdjustments {
    documentContainer{
        NEW documentDetail {
            fill = 1;
            tabbed = TRUE;
            MOVE BOX(d);
            NEW EGAIS {
                caption = 'ЕГАИС';
                tabbed = TRUE;
                NEW actWriteOff {
                    caption = 'Акт списания';
                    MOVE BOX(a);
                    MOVE BOX(wp);
                    NEW comments {
                        fill = 0.2;
                        horizontal = TRUE;
                        MOVE PROPERTY(commentsActWriteOffAct) { panelCaptionVertical = TRUE; fill = 1; }
                    }
                }
                NEW actFixBarCode {
                    caption = 'Акт фиксации';
                    MOVE BOX(b);
                    MOVE BOX(bp);
                    NEW comments2 {
                        fill = 0.2;
                        horizontal = TRUE;
                        MOVE PROPERTY(commentsActFixBarCodeAct) { panelCaptionVertical = TRUE; fill = 1; }
                    }
                }
            }
        }        
    }
}

processActFixBarCodeTicket (Client c, STRING s) + {
    NEWSESSION {
        LOCAL barcodes = STRING();
        barcodes() <- substrFrom(s, strpos(s, 'штрихкодам:') + 12);
        
        NEW l = LotAdjustment {
            isPosted(l) <- TRUE;
            stock(l) <- stock(c);
            note(l) <- 'Списание марок по уведомлению о пересортице';
            FOR iterate(INTEGER i, 1, wordCount(barcodes(), ',')) AND STRING mc = replace(getWord(barcodes(), ',', i), '\n', '') AND trim(mc) != '' DO NEW d = LotAdjustmentDetail {
                lotAdjustment(d) <- l;
                lot(d) <- lot(mc);
                quantity(d) <- -1;
            }
        }
        APPLY;
    }
}