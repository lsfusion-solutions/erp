MODULE LotInit;

REQUIRE Lot, StockSkuDocument;

NAMESPACE Lot;

CLASS LotInit 'Ввод в оборот';
CLASS LotInitDetail 'Строка ввода в оборот';

id 'Код' = DATA STRING[100] (LotInit) CHARWIDTH 36;
@defineDocument(lotInit);

@defineDocumentHeaderNumber(LotInit, STRING[10]);
@defineNumeratedDefault(LotInit, 'Ввод в оборот', 'ВО');

@deriveDocumentHeaderTime(LotInit);

@defineDocumentStock(lotInit, stock, 'Склад');
CONSTRAINT stock(LotInit i) AND NOT isCompany(stock(i))
    CHECKED BY stock[LotInit]
    MESSAGE 'Для ввода в оборот выбран склад, который не принадлежит компании';
@defineDocumentStockAccess(LotInit, stock, company);
@defineDocumentDialogStocks(lotInit, stock, company, , );

@defineDocumentPosted(lotInit);
canceled 'Отменен' = DATA BOOLEAN (LotInit); 

type 'Тип' = DATA LotType (LotInit) NONULL;
nameType 'Тип' (LotInit i) = name(type(i));
idType 'Код типа' (LotInit i) = id(type(i));

@defineDocumentDetailNumber(lotInit, LotInitDetail);
@defineDocumentDetailSku(lotInit, sku);

@defineMovementSku(lotInitDetail, stock);
@defineBalancesSku(lotInitDetail);
@defineMovementPriceSku(lotInitDetail, stock);
@defineInfoSku(lotInitDetail);

@defineDocumentDetailQuantity(lotInit);

@defineDocumentHeaderSkuQuantity(lotInit, sku);

FORM lotInit 'Ввод в оборот'
    OBJECTS i = LotInit PANEL
    PROPERTIES(i) isPosted, canceled, nameNumerator, number, series, date, time, 
                  nameType, nameStock ON CHANGE changeStockCompany(i), note
    
    OBJECTS d = LotInitDetail
    PROPERTIES(d) index READONLY, idBarcodeSku, idSku, nameSku, shortNameUOMSku, quantity, NEW, DELETE
    FILTERS lotInit(d) = i
    
    EDIT LotInit OBJECT i
;

DESIGN lotInit {
    OBJECTS {
        NEW mainTabbed {
            tabbed = TRUE;
            fill = 1;
            NEW documentBox {
                caption = 'Заказ';
                NEW header {
                    NEW headerRow1 {
                        horizontal = TRUE;
                        alignment = STRETCH;
                        MOVE PROPERTY(isPosted(i));
                        MOVE PROPERTY(canceled(i));
                        MOVE PROPERTY(nameNumerator(i));
                        MOVE PROPERTY(number(i));
                        MOVE PROPERTY(series(i));
                        MOVE PROPERTY(date(i));
                        MOVE PROPERTY(time(i));
                    }
                    NEW headerRow2 {
                        horizontal = TRUE;
                        alignment = STRETCH;
                        MOVE PROPERTY(nameType(i)) { notNull = TRUE; }
                        MOVE PROPERTY(nameStock(i));
                    }
                    MOVE PROPERTY(note(i));
                }
                NEW specificationBox {
                    fill = 1;
                    tabbed = TRUE;
                    MOVE BOX(d) {
                        caption = 'Спецификация';
                    }
                }
            }
        }
    }
}

// Подбор
@defineDocumentSku(lotInit, sku, stock, );

price 'Цена' (Sku s, LotInit o) = prevAccountPriceB(s, stock(o), dateTime(o));
@extendFormDocumentSku(lotInit, lotInit, i);

EXTEND FORM lotInit
    FILTERGROUP filterLot
        FILTER 'Маркируется' lotType(ks) DEFAULT

    FILTERGROUP filterSku
        FILTER 'С остатком' prevCurrentBalance(ks, stock(i)) 'F10' DEFAULT
        FILTER 'В документе' quantityLotInitDetail(ks, i) 'F9'
;

@defineAddDetailDialogBarcodeCustomInner(lotInit, lotInitDetail, LotInitDetail, sku);
EXTEND FORM lotInit
    PROPERTIES(i) DRAW d addDetailInputBarcodeLotInitDetail
;

FORM lotInits 'Ввод в оборот'
    OBJECTS i = LotInit
    PROPERTIES(i) READONLY isPosted, canceled, id, number, series, date, time, 
                           nameType, nameStock, note, countLotInitDetail
    PROPERTIES(i) NEWSESSION NEW, EDIT, DELETE

    OBJECTS d = LotInitDetail
    PROPERTIES(d) READONLY index, idBarcodeSku, idSku, nameSku, shortNameUOMSku, quantity
    FILTERS lotInit(d) = i
;

DESIGN lotInits {
    OBJECTS {
        NEW tabbedPane {
            tabbed = TRUE;
            fill = 1;
            MOVE BOX(d) { caption = 'Товары'; }
        }
    }
}

@extendFormFilterAccessStock(LotInit, i, lotInits, stock, company);

useLot (LotInit i) = i IS LotInit;
@defineDocumentLotIn(lotInit, quantity, i, lotInits, isPosted);

lotInit (Lot l) = GROUP MAX lotInit(LotInitDetail d) IF quantity(d, l) MATERIALIZED INDEXED;

NAVIGATOR {
    lotNavigator {
        NEW lotInits;
    }
}

// copy
copy ABSTRACT LIST (LotInitDetail, LotInitDetail);
copy (LotInitDetail nd, LotInitDetail d) + {
    sku(nd) <- sku(d);
    quantity(nd) <- quantity(d);
    quantity(nd, Lot l) <- quantity(d, l);
}

copy ABSTRACT LIST (LotInit, LotInit);
copy (LotInit ni, LotInit i) + {
    type(ni) <- type(i);
    stock(ni) <- stock(i);
    FOR lotInit(LotInitDetail d) = i INLINE NEW nd = LotInitDetail DO {
        lotInit(nd) <- ni;
        copy(nd, d);
    }
}

copy 'Копировать' (LotInit i)  { 
    NEWSESSION {
        NEW ni = LotInit {
            copy(ni, i);
            SHOW lotInit OBJECTS i = ni DOCKED;
        }
    }
}
EXTEND FORM lotInits PROPERTIES(i) TOOLBAR copy;