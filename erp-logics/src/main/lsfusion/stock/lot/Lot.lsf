MODULE Lot;

REQUIRE Sku, LotType;

NAMESPACE Stock;

dataGtin 'GTIN' (Sku s) = DATA STRING[14] (Sku) IN itemBase;
overGtin = ABSTRACT STRING[14] (Sku);
gtin 'GTIN' (Sku s) = OVERRIDE dataGtin(s), overGtin(s), STRING[14](lpad(idBarcode(s), 14, '0')) MATERIALIZED INDEXED;

skuFromGtin = GROUP MAX Sku s BY gtin(s);

EXTEND FORM item
    PROPERTIES(i) dataGtin
;

// lot
CLASS Lot 'Марка';

id 'Код' = DATA STRING[200] (Lot) INDEXED IN id;
lot = GROUP AGGR Lot l BY id(l); 

translateBarcode = FORMULA STRING[200] 'SELECT CASE WHEN ($1) ~* \'[а-яА-Я]\' THEN translate(left(($1), 31), \'ЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭ/ЯЧСМИТЬБЮ,йцукенгшщзхъфывапролджэячсмитьбю.\', \'QWERTYUIOP{}ASDFGHJKL:"|ZXCVBNM<>?qwertyuiop[]asdfghjkl;\'\'zxcvbnm,./\') ELSE left(($1), 31) END';

barcodeToId = ABSTRACT CASE STRING[200] (STRING[200]);
barcodeToId (STRING[200] s) += WHEN s IS STRING[200] THEN translateBarcode(s);

tail 'Хвост' = DATA STRING[200] (Lot);

barcodeToTail = ABSTRACT CASE STRING[200] (STRING[200]);
barcodeToTail (STRING[200] s) += WHEN s IS STRING[200] THEN STRING[200](substrFrom(s, 32)); 

code 'КИ' (Lot l) = CONCAT '', id(l), tail(l);

idToGtin (STRING[200] s) = substr(s, 3, 14);
idToSeries (STRING[200] s) = substr(s, 19, 13);
 
gtin 'GTIN' (Lot l) = idToGtin(id(l));
series 'Серия' (Lot l) = idToSeries(id(l));

sku 'Товар' = DATA Sku (Lot) NONULL DELETE INDEXED;
idSku 'Код товара' (Lot l) = id(sku(l)) IN id;
nameSku 'Наименование товара' (Lot l) = name(sku(l)) IN id;
idBarcodeSku 'Штрихкод' (Lot l) = idBarcode(sku(l)) IN id;

overPreprocessedBarcode(STRING[200] s) += WHEN lotType(sku(lot(barcodeToId(s)))) THEN idBarcode(sku(lot(barcodeToId(s))));

changeSku 'Заменить товар' (Lot l) {
    DIALOG skus OBJECTS s INPUT DO {
        ASK 'Вы уверены, что хотите изменить товар для контрольной марки ' + id(l) + ' на ' + name(s) + '?\n Все ограничения будут временно отключены. Во всех существущих документах останется предыдущий товар.' DO {
            sku(l) <- s;
            setNoCancelInTransaction();
            APPLY;
        }
    }
}

count 'Штук' = ABSTRACT VALUE INTEGER (Lot);
count (Lot l) += 1 IF l IS Lot; 

FORM lot 'Марка'
    OBJECTS l = Lot PANEL
    PROPERTIES(l) id, idSku, nameSku, tail
    
    EDIT Lot OBJECT l 
;

FORM dialogLots 'Марки'
    OBJECTS l = Lot
    PROPERTIES(l) READONLY id, idSku, nameSku
    
    LIST Lot OBJECT l
;

FORM lots 'Марки'
    OBJECTS l = Lot
    PROPERTIES(l) READONLY id, idSku, nameSku
    PROPERTIES(l) NEWSESSION EDIT
    PROPERTIES(l) changeSku TOOLBAR
;

DESIGN lots {
    OBJECTS {
        NEW tabbedPane {
            type = TABBED;
            fill = 1;
        }
    }
}

NAVIGATOR {
    stockNavigator {
        NEW FOLDER lotNavigator 'Марки' {
            NEW lots;
        }
    }
}

// dialogs

quantity 'Кол-во' = DATA LOCAL NUMERIC[16,5] (Lot);

FORM dialogInLots 'Список марок'
    OBJECTS l = Lot
    PROPERTIES(l) READONLY id
    PROPERTIES(l) count
    PROPERTIES(l) READONLY quantity
    PROPERTIES(l) DELETE
    FILTERS quantity(l)
;

removeLot 'Убрать' (Lot l) {
    quantity(l) <- NULL;
} TOOLBAR CHANGEKEY 'ctrl DELETE';

FORM dialogOutLots 'Список марок'
    OBJECTS l = Lot
    PROPERTIES(l) READONLY id, count, quantity
    PROPERTIES(l) removeLot
    FILTERS quantity(l)
;

// meta
@defineOption(skipCheckDocumentLot, 'Не проверять КМ в документе', stock1);

META defineDocumentLot (doc, quantityProp, postedProp)
    quantity 'Кол-во' = DATA NUMERIC[16,5] (###doc##Detail, Lot);
    
    CONSTRAINT quantity(###doc##Detail d, Lot l) AND NOT sku(l) = sku(d)
        MESSAGE 'Товар марки не соответствует товару строки документа';
    
    quantityLot 'Кол-во марок' (###doc##Detail d) = GROUP SUM quantity(d, Lot l) * count(l) MATERIALIZED;
    quantityLot 'Кол-во марок' (###doc i) = GROUP SUM quantityLot(###doc##Detail d) IF doc(d) = i MATERIALIZED;
    quantity 'Кол-во марок' (###doc i, Lot l) = GROUP SUM quantity(###doc##Detail d, l) IF doc(d) = i;
    
    CONSTRAINT SET((quantityProp(###doc##Detail d) OR quantityLot(d)) AND postedProp(d) AND NOT quantityProp(d) = OVERRIDE quantityLot(d), 0.0) 
               IF explicitLot(sku(d)) AND NOT skipCheckDocumentLot()
        MESSAGE 'Для строки документа неправильно заданы марки';
    
    backgroundQuantityLot (###doc##Detail d) = (IF quantityLot(d) = quantityProp(d) THEN RGB(224,255,224) ELSE RGB(255,224,224)) 
                                                           IF lotType(sku(d));
END

META defineDocumentLotType(doc)
    in 'Вкл' = DATA BOOLEAN (###doc, LotType);
    
    countSku (###doc w, LotType t) = GROUP SUM 1 IF doc(###doc##Detail d) = w AND lotType(sku(d)) = t AND quantityLot(d);
    WHEN useLot(operation(###doc w)) AND (GROUP SUM 1 IF (CHANGED(sku(###doc##Detail d)) OR CHANGED(quantityLot(d))) AND doc(d) = w) DO {
        in(w, LotType t) <- TRUE IF countSku(w, t); 
    }
    
    recalculateLotType 'Заполнить типы марок' (###doc w) {
        NEWSESSION {
            in(w, LotType t) <- TRUE IF countSku(w, t);
            APPLY;
        } 
    }
END

lotBarcode() = DATA LOCAL STRING[200] ();

META defineDocumentLotBarcodeIn (doc, quantityProp)
    EXTEND FORM doc
        OBJECTS cd = ###doc##Detail PANEL
        FILTERS cd = d
    ;
    
    beforeInputBarcode###doc##Detail(###doc i, STRING[200] s) + {
        lotBarcode() <- NULL;
        consumedBarcode###doc##Detail() <- NULL;
        IF length(s) > 20 THEN {
            lotBarcode() <- barcodeToId(s);
            FOR [FILTER doc.cd](###doc##Detail d) AND lotType(sku(d)) DO {
                FOR Lot l = lot(lotBarcode()) DO {
                    IF quantity(i, l) = 1.0 THEN {
                        MESSAGE 'Марка уже была отсканирована в текущем документе';
                        consumedBarcode###doc##Detail() <- TRUE;
                    } ELSE
                        IF sku(l) = sku(d) THEN {
                            quantity(d, l) <- 1.0;
                            IF NOT quantityProp(d) >= quantityLot(d) THEN
                                quantityProp(d) <- quantityLot(d);
                            consumedBarcode###doc##Detail() <- TRUE;
                        }
                } ELSE {
                    NEW l = Lot {
                        id(l) <- lotBarcode();
                        sku(l) <- sku(d);
                        quantity(d, l) <- 1.0;
                        IF NOT quantityProp(d) >= quantityLot(d) THEN
                            quantityProp(d) <- quantityLot(d);
                        consumedBarcode###doc##Detail() <- TRUE;
                    }
                }
            }
        }
    }
    
    afterInputBarcode###doc##Detail(###doc##Detail d, STRING[200] barcode) + {
        IF lotBarcode() THEN
            quantity(d, Lot l) <- 1.0 WHERE l = lot(lotBarcode());
    }
END

META defineDocumentLotIn(doc, quantityProp, obj, formList, postedProp)
    @defineDocumentLot(doc, quantityProp, postedProp);

    changeQuantityLot (###doc##Detail d) {
        quantity(Lot l) <- quantity(d, l);
        SHOW dialogInLots;    
    }
    
    EXTEND FORM doc
        PROPERTIES(d) quantityLot AFTER quantityProp(d) ON CHANGE changeQuantityLot(d) 
                      BACKGROUND backgroundQuantityLot(d) 
                      SHOWIF useLot(obj)
                      READONLYIF NOT lotType(sku(d))
    ;

    EXTEND FORM formList
        PROPERTIES(obj) READONLY quantityLot

        PROPERTIES(d) READONLY quantityLot AFTER quantityProp(d) 
                      BACKGROUND backgroundQuantityLot(d) 
                      SHOWIF useLot(obj)
                      READONLYIF NOT lotType(sku(d))
    ;
    
    @defineDocumentLotBarcodeIn(doc, quantityProp);
END

META defineDocumentLotBarcodeOut (doc, stock)
    beforeInputBarcode###doc##Detail(###doc i, STRING[200] s) + {
        lotBarcode() <- NULL;
        consumedBarcode###doc##Detail() <- NULL;
        IF length(s) > 20 THEN {
            FOR STRING[200] bc = barcodeToId(s) AND Lot l = lot(bc) DO {
                lotBarcode() <- bc;
                IF quantity(i, l) = 1.0 THEN {
                    MESSAGE 'Марка уже была отсканирована в текущем документе';
                    consumedBarcode###doc##Detail() <- TRUE;
                } ELSE {
                    IF explicitBatchLedger(stock(i)) AND batch(l) THEN {
                        FOR ###doc##Detail d = doc##Detail(batch(l), i) DO {
                            quantity(d, l) <- 1.0;
                            IF NOT quantity(d) >= quantityLot(d) THEN
                                quantity(d) <- quantityLot(d);
                            seek(d);
                            consumedBarcode###doc##Detail() <- TRUE;
                        } ELSE {
                            NEW d = ###doc##Detail {
                                doc(d) <- i;
                                sku(d) <- sku(l);
                                batch(d) <- batch(l);
                                quantity(d, l) <- 1.0;
                                quantity(d) <- quantityLot(d);
                                seek(d);
                                consumedBarcode###doc##Detail() <- TRUE;
                            }
                        }
                    } ELSE
                        FOR ###doc##Detail d = doc##Detail(i, sku(l)) DO {
                            quantity(d, l) <- 1.0;
                            IF NOT quantity(d) >= quantityLot(d) THEN
                                quantity(d) <- quantityLot(d);
                            seek(d);
                            consumedBarcode###doc##Detail() <- TRUE;
                        }
                }
            }
        }
    }
    
    afterInputBarcode###doc##Detail(###doc##Detail d, STRING[200] barcode) + {
        IF lotBarcode() THEN
            quantity(d, Lot l) <- 1.0 WHERE l = lot(lotBarcode());
            IF explicitBatchLedger(stock(d)) THEN {
                batch(d) <- batch(lot(lotBarcode()));
            }
    }
END

META defineDocumentLotOut(doc, stock, quantityProp, obj, postedProp)
    @defineDocumentLot(doc, quantityProp, postedProp);

    changeQuantityLot (###doc##Detail d) {
        quantity(Lot l) <- quantity(d, l);
        DIALOG dialogOutLots DO {
            quantity(d, Lot l) <- quantity(l);
        }    
    }

    fillLotBalance 'Заполнить марки из остатков' (###doc o) {
        quantity(###doc##Detail d, Lot l) <- prevCurrentBalance(l, stock(o)) 
            WHERE doc(d) = o AND NOT quantityLot(d) AND lotType(sku(d)) AND sku(l) = sku(d) AND [FILTER doc.d](d); 
    }

    fillLotBatch 'Заполнить марки из партий' (###doc o) {
        quantity(###doc##Detail d, Lot l) <- prevCurrentBalance(l, stock(o)) 
            WHERE doc(d) = o AND NOT quantityLot(d) AND lotType(sku(d)) AND batch(l) = batch(d) AND [FILTER doc.d](d); 
    }
    
    dropLotBatch 'Сбросить марки' (###doc o) {
        quantity(###doc##Detail d, Lot l) <- NULL 
            WHERE doc(d) = o AND [FILTER doc.d](d); 
    }
    
    EXTEND FORM doc
        PROPERTIES(d) quantityLot AFTER quantity(d) ON CHANGE changeQuantityLot(d) 
                      ON CONTEXTMENU fillLotBalance(obj) ON CONTEXTMENU fillLotBatch(obj) ON CONTEXTMENU dropLotBatch(obj)  
                      BACKGROUND backgroundQuantityLot(d) 
                      SHOWIF useLot(operation(obj))
                      READONLYIF NOT lotType(sku(d))
    ;
    
    @defineDocumentLotBarcodeOut(doc, stock);
END