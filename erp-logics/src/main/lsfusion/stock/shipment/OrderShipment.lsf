MODULE OrderShipment;

REQUIRE Order, Shipment;

NAMESPACE Shipment;

quantityShipmentDetail = ABSTRACT NUMERIC[16,5] (Order, Shipment);

shipped 'Кол-во (поставлено)' = ABSTRACT NUMERIC[16,5] (OrderDetail);
toShip 'Не поставлено' (OrderDetail d) = quantity (d) - OVERRIDE shipped(d), 0.0;

shippedOrderDetail 'Кол-во (поставлено)' = ABSTRACT NUMERIC[16,5] (Order);

backgroundShipped 'Цвет' (Order order) = RGB(255, 224, 255) IF order IS Order;

createShipment = ABSTRACT BOOLEAN (Order);

overCreateMultiUserShipment  ABSTRACT LIST (Order);

addUserShipment ABSTRACT LIST (Order);

META defineOrderShipment(sign, stockProp)

    orderDetail = ABSTRACT OrderDetail (ShipmentDetail) MATERIALIZED INDEXED;
    orderDetail = DATA OrderDetail (UserShipmentDetail);
    orderDetail(UserShipmentDetail shipmentDetail) += orderDetail(shipmentDetail);
    
    order(ShipmentDetail d) = order(orderDetail(d));
    
    overCopy[UserShipmentDetail,UserShipmentDetail](UserShipmentDetail d, UserShipmentDetail detail) + {       
        orderDetail(d) <- orderDetail(detail);             
    } 

    CONSTRAINT supplier(UserShipmentDetail shipmentDetail) != supplier(orderDetail(shipmentDetail)) OR
               customer(shipmentDetail) != customer(orderDetail(shipmentDetail))
        CHECKED BY orderDetail[UserShipmentDetail]
            MESSAGE 'Поставщик и покупатель в заказе и поставке должны соответствовать друг другу';

    descriptionOrder 'Заказ' (ShipmentDetail shipmentDetail) = description(orderDetail(shipmentDetail)) IN order;
    descriptionOrder 'Заказ' (UserShipmentDetail userShipmentDetail) = description(orderDetail(userShipmentDetail)) IN order;

    quantityShipmentDetail (order, shipment) = GROUP SUM quantity(ShipmentDetail shipmentDetail) BY order(shipmentDetail), shipment(shipmentDetail);
    quantityShipmentDetail (Order order, Shipment shipment) += quantityShipmentDetail (order, shipment);
    countShipmentDetail = GROUP SUM 1 BY order(orderDetail(ShipmentDetail shipmentDetail)), shipment(shipmentDetail) MATERIALIZED;
    
    orders 'Заказы'(Shipment shipment)  = GROUP
                                               CONCAT ISTRING[255](description(Order order)) IF countShipmentDetail(order, shipment) , ', '
                                               ORDER order IN order CHARWIDTH 30;

    shipments 'Поставки'(Order order)  = GROUP
                                             CONCAT ISTRING[255](description(Shipment shipment)) IF countShipmentDetail(order, shipment) , ', '
                                             ORDER shipment
                                             CHARWIDTH 30;                                             

//-- Подсчет поставленного к-ва по заказу

    shipped 'Кол-во (поставлено)' (OrderDetail orderDetail) = GROUP SUM quantity(ShipmentDetail shipmentDetail) IF isPosted(shipmentDetail)
                                                                                                                    BY orderDetail(shipmentDetail) CHARWIDTH 7 MATERIALIZED;
                                                              
    shipped(OrderDetail d) += shipped(d);
    quantityCustom = ABSTRACT NUMERIC[16,5] (OrderDetail);
    toShip 'Не поставлено' (OrderDetail d) = MAX ((OVERRIDE quantityCustom(d), quantity (d)) - (OVERRIDE shipped(d), 0.0)), 0.0;
    prevToShip 'Не поставлено' (OrderDetail orderDetail) = PREV(toShip(orderDetail));
    toShipOrderDetail 'Не поставлено по складу' (stock, order) = GROUP SUM toShip(OrderDetail orderDetail) IF toShip(orderDetail) > 0
                                                                                     BY stockProp(orderDetail), order(orderDetail);

    shippedOrderDetail 'Кол-во (поставлено)' (order) = GROUP SUM shipped(OrderDetail orderDetail) BY order(orderDetail) IN documentSum CHARWIDTH 8 MATERIALIZED;
    shippedOrderDetail(Order o) += shippedOrderDetail(o);

    // Создание поставки на основе заказа //
    FORM shipmentOrders 'Заказы'###sign
        OBJECTS s = LegalEntity PANEL
        PROPERTIES (s) READONLY name
        OBJECTS ss = Stock PANEL
        PROPERTIES (ss) READONLY name

        OBJECTS c = LegalEntity PANEL
        PROPERTIES (c) READONLY name
        OBJECTS cs = Stock PANEL
        PROPERTIES (cs) READONLY name

        OBJECTS o = Order
        PROPERTIES (o) READONLY isPosted, number, series, date, time, nameSupplier, nameSupplierStock,
                                nameCustomer, nameCustomerStock, nameCurrency, countOrderDetail, quantityOrderDetail,
                                shippedOrderDetail BACKGROUND backgroundShipped(o), sumOrderDetail, note
        FILTERS isPosted(o),
                inSupplier(o, s),
                customer(o) == c,
                customerStock(o) == cs
//        FILTERGROUP order
//            FILTER 'Заказы с непоставленными товарами со склада' 'F10' toShipOrderDetailStockOrder(s, o) DEFAULT
//            FILTER 'Заказы со склада' 'F9' countOrderDetailStockOrder(s, o)

        OBJECTS d = OrderDetail
        PROPERTIES (d) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku
        PROPERTIES (d) READONLY quantity, shipped BACKGROUND backgroundShipped(o), price, sum, name###stockProp,
                       toShip
        FILTERS order(d) == o
//        FILTERGROUP orderDetail
//            FILTER 'Строки с непоставленными товарами со склада' 'F10' stockOrderDetail(d) == s AND toShipOrderDetail(d) > 0 DEFAULT
//            FILTER 'Строки со склада' 'F9' stockOrderDetail(d) == s
    ;

    DESIGN shipmentOrders {
        BOX {
            size = (1024, 768);
            NEW header {
                horizontal = TRUE;
                MOVE BOX(s);
                MOVE BOX(ss);
                MOVE BOX(c);
                MOVE BOX(cs);
            }
            MOVE BOX(o);
            MOVE BOX(d);
            MOVE TOOLBARBOX;
            PROPERTY(toShip(d)) { background = #FFFFCC; }
        }
    }

    in (OrderDetail orderDetail, UserShipment userShipment) = IF differentStocksInDetails(customerStock(orderDetail))
        THEN orderDetail IS OrderDetail AND userShipment IS UserShipment
        ELSE supplierStock(orderDetail) == supplierStock(userShipment);

    overFillOrder ABSTRACT LIST (UserShipmentDetail, OrderDetail);
    overFillOrder ABSTRACT LIST (UserShipment, Order);

    fillHeader (UserShipment s, Order o) {
        date(s) <- currentDate();
        time(s) <- currentTime();
        
        supplier(s) <- supplier(o) WHERE supplier(o);
        supplierStock(s) <- supplierStock(o) WHERE supplierStock(o);

        customer(s) <- customer(o) WHERE customer(o);
        customerStock(s) <- customerStock(o) WHERE customerStock(o);

        date(s) <- shipmentDate(o) WHERE isShipmentDate(operation(o)) AND shipmentDate(o); 
        
        note(s) <- note(o) WHERE note(o);
        
        overFillOrder(s, o);
    }
    
    toShip (Batch b, OrderDetail d) = PARTITION UNGROUP toShip
        LIMIT STRICT currentBalance(b, stockProp(d)) IF skuCurrentBalance(b, stockProp(d)) == sku(d)
        ORDER dateTime(b), b
        BY d;

    createDetail(UserShipment userShipment, Order order)  {
        IF explicitBatchLedger(stockProp(order)) THEN {
            // проходим по строкам, для которых не задана партия
            FOR order(OrderDetail orderDetail) == order AND NUMERIC[16,5] q == toShip(Batch batch, orderDetail) AND NOT batch(orderDetail) NEW d = UserShipmentDetail DO {
                userShipment(d) <- userShipment;
                orderDetail(d) <- orderDetail;
                sku(d) <- sku(orderDetail);
                batch(d) <- batch;
                quantity (d) <- q;

                overFillOrder(d, orderDetail);
            }
            // проходим по строкам, для которых задана партия
            FOR order(OrderDetail orderDetail) == order AND PREV(toShip(orderDetail)) AND batch(orderDetail) NEW d = UserShipmentDetail DO {
                userShipment(d) <- userShipment;
                orderDetail(d) <- orderDetail;
                sku(d) <- sku(orderDetail);
                batch(d) <- batch(orderDetail);
                quantity (d) <- PREV(toShip(orderDetail));

                overFillOrder(d, orderDetail);
            }
        } ELSE {
            FOR order(OrderDetail orderDetail) == order AND toShip(orderDetail) > 0 NEW d = UserShipmentDetail DO {
                userShipment(d) <- userShipment;
                orderDetail(d) <- orderDetail;
                sku(d) <- sku(orderDetail);
                batch(d) <- batch(orderDetail);
                quantity (d) <- toShip(orderDetail);

                overFillOrder(d, orderDetail);
            }
        }    
    }
    
    fillOrder 'Заполнить на основе заказа'(UserShipment s)   { 
        DIALOG shipmentOrders OBJECTS s = supplier(s), ss = supplierStock(s),
                                    c = customer(s), cs = customerStock(s), o INPUT DO {
            createDetail(s, o);
        }
    } IN order;

    createMultiUserShipment(Order order)  { 
        NEWSESSION NESTED (selected[Order.Order]) {
            NEW s = UserShipment {
                fillHeader(s, order);
                
                FOR selected(Order.Order o) DO {
                    createDetail(s, o);   
                }     
                              
                SHOW userShipment OBJECTS s = s DOCKED NOCANCEL;
            }
        }
    }
    overCreateMultiUserShipment(Order o) + { IF o IS Order THEN createMultiUserShipment(o); }
    
    addUserShipment 'Поставка'##sign (Order o)   { 
	    NEWSESSION {
	        NEW s = UserShipment {
	            fillHeader(s, o);
                createDetail(s, o);
                SHOW userShipment OBJECTS s = s DOCKED NOCANCEL;
            }
	    }
    } TOOLBAR;
    addUserShipment (Order o) + { IF o IS Order THEN addUserShipment(o); }
    
    notShowShipped = ABSTRACT BOOLEAN (Order);
    toShowShipped = Order o IS Order AND NOT notShowShipped(o);
    EXTEND FORM userOrder
        PROPERTIES(o) READONLY BACKGROUND backgroundShipped(o) shippedOrderDetail
        PROPERTIES(d) READONLY BACKGROUND backgroundShipped(o)  SHOWIF toShowShipped(o) shipped BEFORE namePriceListType(d)
    ;

    EXTEND FORM orders
        PROPERTIES(o) READONLY BACKGROUND backgroundShipped(o) shippedOrderDetail AFTER quantityOrderDetail(o)
        PROPERTIES(d) READONLY BACKGROUND backgroundShipped(o) SHOWIF toShowShipped(o) shipped BEFORE namePriceListType(d)
        FILTERGROUP  filter10
            FILTER   'Непоставленные товары' NOT shipped (d) ==  quantity (d) 'F10'            
    ;

    EXTEND FORM userShipment
        PROPERTIES(s) fillOrder, orders READONLY
        PROPERTIES(d) descriptionOrder BEFORE deletesd
    ;
    DESIGN userShipment { headerCreateDetail { MOVE GROUP(order,s) { lines = 1; type = CONTAINERV; }}}


    EXTEND FORM shipments
        PROPERTIES(s) READONLY orders
        PROPERTIES(d) READONLY descriptionOrder
    ;

//--  Резервирование
    toShipQuantity (OrderDetail ledger) += toShip(ledger);

    // цены в подборе
    @extendFormDocumentAccountPriceSku(userOrder, stockProp, ' учетная', userOrder, o, is);
    @extendFormDocumentAccountPriceBatch(userOrder, stockProp, ' учетная', userOrder, o, showBatch);
END

META defineOrderShipmentPack(showPackage)
    EXTEND FORM shipmentOrders
        PROPERTIES (d) READONLY SHOWIF showPack(o) BEFORE quantity(d)
                       idBarcodePack, shortNameUOMPack,
                       amountPack, packQuantity
    ;

    overFillOrder(UserShipmentDetail s, OrderDetail o) + { 
        barcodePack(s) <- barcodePack(o);
        amountPack(s) <- amountPack(o);
        packQuantity (s) <- toShip(o)/amountPack(o);
    }
END

META defineOrderShipmentExecution (dumb)

    shippedShipmentDetail 'Кол-во (поставлено)' (order) = GROUP SUM shipped(OrderDetail d)
        IF isPosted(d) BY order(d);
                                                               
    percentQuantityExecution '% исп. заявки (кол-во)' (Order order)= shippedShipmentDetail(order)*100.00 /
        (quantityNotChargeOrderDetail(order) IF quantityNotChargeOrderDetail(order)!= 0);                                                              
    
    countShippedOrderDetail (order) = GROUP SUM 1 IF shipped(OrderDetail d) >= quantity(d) 
        AND isPosted(d) BY order(d);   
    percentCountExecution '% исп. заявки (позиции)' (Order order) = countShippedOrderDetail (order)*100.00/
        (countNotChargeOrderDetail(order) IF countNotChargeOrderDetail(order)!=0);
    
    sumShippedOrderDetail (order) = GROUP SUM round(shipped(OrderDetail d)*price(d), currency(d)) 
        IF isPosted(d) BY order(d);   
    percentSumExecution '% исп. заявки (сумма)' (Order order) = sumShippedOrderDetail(order)*100.00/
    (sumNotChargeOrderDetail(order) IF sumNotChargeOrderDetail(order)!=0);    
    
    EXTEND FORM orders
        PROPERTIES(o) READONLY BACKGROUND backgroundSku(o) percentQuantityExecution, percentCountExecution, percentSumExecution     
    ;       
END
META defineOrderInvoiceSupplierExecution (NS, sign, access)
                                                      
    shippedShipmentDetail (supplier, DATE dateFrom, DATE dateTo)= GROUP SUM shippedShipmentDetail(Order order) 
        IF date(order) >= dateFrom AND date(order) <= dateTo AND isPosted(order)
            BY supplier(order);                                                   
    quantityShipmentDetail (supplier, DATE dateFrom, DATE dateTo)= GROUP SUM quantityOrderDetail(Order order) 
        IF date(order) >= dateFrom AND date(order) <= dateTo AND isPosted(order)
            BY supplier(order);                                                                         
    percentQuantityExecution '% исп. заявки (кол-во)' (LegalEntity supplier, DATE dateFrom, DATE dateTo)= shippedShipmentDetail (supplier, dateFrom, dateTo)*100.00 /
        (quantityShipmentDetail(supplier, dateFrom, dateTo) IF quantityShipmentDetail(supplier, dateFrom, dateTo)!= 0);                                                              
//--    
    countShipped (supplier, DATE dateFrom, DATE dateTo)= GROUP SUM countShippedOrderDetail(Order order) 
        IF date(order) >= dateFrom AND date(order) <= dateTo AND isPosted(order)
            BY supplier(order);                                                   
    count (supplier, DATE dateFrom, DATE dateTo)= GROUP SUM countOrderDetail(Order order) 
        IF date(order) >= dateFrom AND date(order) <= dateTo AND isPosted(order)
            BY supplier(order);      
    percentCountExecution '% исп. заявки (позиции)' (LegalEntity supplier, DATE dateFrom, DATE dateTo) = countShipped (supplier, dateFrom, dateTo)*100.00 /
        (count(supplier, dateFrom, dateTo) IF count(supplier, dateFrom, dateTo)!=0);
//--    
    sumShipped (supplier, DATE dateFrom, DATE dateTo)= GROUP SUM sumShippedOrderDetail(Order order) 
        IF date(order) >= dateFrom AND date(order) <= dateTo AND isPosted(order)
            BY supplier(order);                                                   
    sum (supplier, DATE dateFrom, DATE dateTo)= GROUP SUM sumOrderDetail(Order order) 
        IF date(order) >= dateFrom AND date(order) <= dateTo AND isPosted(order)
            BY supplier(order);      
    percentSumExecution '% исп. заявки (сумма)' (LegalEntity supplier, DATE dateFrom, DATE dateTo) = sumShipped(supplier, dateFrom, dateTo)*100.00 /
        (sum(supplier, dateFrom, dateTo) IF sum(supplier, dateFrom, dateTo)!=0);    
    
//--
    percentQuantityExecution '% исп. заявки (кол-во)' (OrderDetail d)= shipped(d)*100.00 /
        (quantity(d) IF quantity(d)!= 0);
    shippedSum 'Сумма (поставлено)' (OrderDetail d) =   round(shipped(d)*price(d), currency(d));
    percentSumExecution '% исп. заявки (сумма)' (OrderDetail d)= shippedSum(d)*100.00 /
        (sum(d) IF sum(d)!= 0); 
        
        
    selectOrder 'Вкл.' = DATA LOCAL BOOLEAN (LegalEntity);
    selectOrder 'Вкл.' = DATA LOCAL BOOLEAN (Sku);    
    selectOrder 'Вкл.' = DATA LOCAL BOOLEAN (Stock);    
    selectOrder 'Вкл.' = DATA LOCAL BOOLEAN (OrderDetail);  
    
    fillSelectOrder  'Заполнить данные '  ABSTRACT LIST ( DATE, DATE);
    resetSelectOrder ()  { 
        selectOrder(OrderDetail d) <- NULL; 
        formRefresh();
    }
    FORM executionSupplierOrder 'Исполнение заявок' 
    
        OBJECTS dates = (dFrom = DATE, dTo = DATE) PANEL
        PROPERTIES valFrom = VALUE(dFrom), valTo = VALUE(dTo)
       
        OBJECTS s = LegalEntity
        PROPERTIES READONLY name(s), percentQuantityExecution(s,dFrom,dTo), percentCountExecution(s,dFrom,dTo),
                   percentSumExecution(s,dFrom,dTo)       
        FILTERS    quantityShipmentDetail(s,dFrom,dTo)  
        OBJECTS o = Order
        PROPERTIES (o) READONLY isPosted, isClosed, number, series, date, time,
                                nameSupplier, nameSupplierStock, nameCustomer, nameCustomerStock, 
                                countOrderDetail, quantityOrderDetail, sumOrderDetail, VATSumOrderDetail, invoiceSumOrderDetail,
                                percentQuantityExecution, percentCountExecution, percentSumExecution
        PROPERTIES (o) NEWSESSION editO = EDIT  SHOWIF overShowEdit(o)
        PROPERTIES show(o) SHOWIF showToShow(o)
        FILTERS isPosted(o),
                supplier(o) == s,
                date(o) >= dFrom,
                date(o) <= dTo
                                
        OBJECTS l = LegalEntity
        PROPERTIES(l) READONLY name, id, selectOrder CHANGEABLE 
        FILTERS active(l)    
        FILTERGROUP selectL FILTER 'Отм.' selectOrder(l) 'F6' 
        
        OBJECTS st = Stock
        PROPERTIES(st) READONLY name, id, selectOrder CHANGEABLE
        FILTERS isCompany(st), active(st)         
        FILTERGROUP selectSt FILTER 'Отм.' selectOrder(st) 'F6'
        
        TREE skuTree sg = SkuGroup PARENT parent(sg)
        PROPERTIES READONLY order(sg), skuGroupName = name(sg)
        FILTERGROUP inactive FILTER 'Активные' active(sg) 'F6' DEFAULT
        ORDERS order(sg), skuGroupName
         
        OBJECTS sk = Sku
        PROPERTIES(sk) READONLY id 
        PROPERTIES(sk) READONLY name, shortNameUOM, selectOrder CHANGEABLE
        FILTERS isParent(sg, sk),
                name(sk),
                active(sk)
        ORDERS name(sk)               
        FILTERGROUP selectSk FILTER 'Отм.' selectOrder(sk) 'F6'
                
        OBJECTS d = OrderDetail
        PROPERTIES (d) READONLY isPosted, isClosed, number, series, date, time,
                                nameSupplier, nameSupplierStock, nameCustomer, nameCustomerStock, 
                                idSku, idBarcodeSku, nameSku, shortNameUOMSku, quantity, shipped, percentQuantityExecution, 
                                sum, shippedSum, percentSumExecution, VATSum, invoiceSum
                                 
        PROPERTIES(d) NEWSESSION EDIT 
        PROPERTIES fillSelectOrder(dFrom,dTo) TOOLBAR DRAW d
        FILTERS selectOrder(d)              
        EVENTS ON CHANGE dFrom resetSelectOrder ()         
        EVENTS ON CHANGE dTo resetSelectOrder ()
    ; 
    
    @extendFormFilterAccessStock(Order, o, executionSupplierOrder, ##access##Stock, company);
    @extendFormFilterStockAccess(st, executionSupplierOrder, company);
    DESIGN executionSupplierOrder 'Исполнение заявок'###sign {
        OBJECTS {

            NEW dates{
                horizontal = TRUE;
                caption = 'Период';
                MOVE PROPERTY(valFrom){
                    caption = 'Дата с';
                }
                MOVE PROPERTY(valTo){
                    caption = 'Дата по';
                }
            }
            NEW tab {
                fill = 1;
                tabbed = TRUE;
                NEW tab1 {
                    caption = 'По организации';
                    fill = 1;
                    horizontal = FALSE;
                    MOVE BOX(s);
                    MOVE BOX(o);                    
                }
                NEW tab2 {
                    caption = 'По товару';
                    fill = 1;
                    horizontal = FALSE;
                    NEW tab21 {
                        type = SPLITH;
                        fill = 1;
                        NEW tab211 {
                            fill = 1;
                            type = SPLITH;  
                            MOVE BOX(l);
                            MOVE BOX (st);                            
                        }                     

                        NEW tab212 {
                            fill = 1;
                            type = SPLITH;
                            MOVE BOX(TREE skuTree);
                
                            MOVE BOX(sk) {
                                fill = 1;
                                GRID(sk) {
                                    defaultComponent = TRUE;
                                }
                            }
                        }
                    }
                    MOVE BOX(d);                   
                }                
            }


            
        }
    }   
//    WHEN LOCAL FORMS executionSupplierOrder CHANGED(selectOrder(LegalEntity l)) OR CHANGED(selectOrder(Stock st)) OR CHANGED(selectOrder(Sku sk)) DO {
//        resetSelectOrder ();
//    }     
    NAVIGATOR {
        NS##sReports {
            NEW executionSupplierOrder;
        }
    }                     
END