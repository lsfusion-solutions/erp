MODULE InvoiceShipment;

REQUIRE Invoice, Shipment;

NAMESPACE Shipment;

GROUP invoices 'Приемка по накладным' : base;

@defineDocumentAbstractDetailPricePrefix(invoice, shipment, ' учетная');
@defineDocumentAbstractDetailDataSumCustomPrefix (invoiceDetail, shipment, ' учетная');
@defineDocumentHeaderSumPrefix(invoice, shipment, ' учетная');
shipmentDate 'Дата поставки' = ABSTRACT DATE (Invoice) IN documentHeader;

createShipment 'Создать поставку' (invoice) = ABSTRACT BOOLEAN(Invoice);

invoiceDetail = ABSTRACT InvoiceDetail (ShipmentDetail) MATERIALIZED INDEXED;
descriptionIndexInvoiceDetail 'Строка накладной' (ShipmentDetail detail) = descriptionIndex(invoiceDetail(detail));

@defineDocumentAbstractDetailQuantityCustomPrefix(invoiceDetail, shipment, ' (поставлено)');
@defineDocumentHeaderQuantityCustomPrefix (invoice, invoiceDetail, shipment, ' (поставлено)');
quantityShipmentDetail (invoice, shipment) = GROUP SUM quantity(ShipmentDetail shipmentDetail) BY invoice(invoiceDetail(shipmentDetail)), shipment(shipmentDetail);
relationInvoice 'Связь' (Shipment shipment) = GROUP SUM 1 IF quantityShipmentDetail (Invoice invoice, shipment);

invoices 'Накладные' (Shipment shipment) = GROUP
                                                CONCAT STRING[255](description(Invoice invoice)) IF quantityShipmentDetail(invoice, shipment) , ', '
                                                ORDER invoice CHARWIDTH 30;

shipped 'Кол-во (поставлено)' (invoiceDetail) = GROUP SUM quantity(ShipmentDetail shipmentDetail) IF isPosted(shipmentDetail)
                                                                   BY invoiceDetail(shipmentDetail) MATERIALIZED;
                                                                   
shipped 'Кол-во (поставлено) по накладной' (invoice) = GROUP SUM shipped(InvoiceDetail detail)
                                                                   BY invoice(detail) MATERIALIZED;   
                                                                   
notShipped (Invoice invoice) = invoice IS Invoice AND NOT shipped(invoice);
                                                                                                                                       
toShip 'Не поставлено' (InvoiceDetail invoiceDetail) = quantity (invoiceDetail) (-) shipped(invoiceDetail);

toShipNotChargeInvoiceDetail 'Не поставлено по накладной (кроме услуг)' (invoice) =
    GROUP SUM toShip(InvoiceDetail invoiceDetail) IF toShip(invoiceDetail) > 0 AND isNotCharge(sku(invoiceDetail))
          BY invoice(invoiceDetail);                       
          
addUserShipment   ABSTRACT CASE ( Invoice);

receiveShipment 'Принять полностью'  ABSTRACT LIST ( Invoice);
overReceiveShipment ABSTRACT LIST ( Invoice);

createMultiShipment 'Принять полностью'(Invoice invoice)  { 
	NEWSESSION {
	    IF createShipment(invoice) THEN {
	        MESSAGE 'Для данного инвойса уже создана накладная'; 
	    } ELSE {
	        receiveShipment(invoice);
	        apply();
	        overReceiveShipment(invoice);
	    }
	}
}

deleteCreate   ABSTRACT CASE ( Shipment);
deleteMulti 'Удалить полностью'(Shipment shipment)  { 
	NEWSESSION {
	    IF shipment IS Shipment AND NOT isUser(shipment) THEN {
	        deleteCreate(shipment); 
	    }
	    apply();
	}
}


isShipped = shipped(Invoice invoice) OR NOT quantityNotChargeInvoiceDetail(invoice) > 0.0;

statusShipped 'Статус приемки' (Invoice invoice)= IF isShipped (invoice) AND toShipNotChargeInvoiceDetail(invoice)  
                                                    THEN 'Расхождение'
                                                    ELSE 
                                                        IF isShipped (invoice) 
                                                            THEN 'Оприходована' 
                                                            ELSE 'Не оприходована' IF invoice IS Invoice;

backgroundShip 'Цвет' (Invoice invoice)= RGB(212,255,212) IF invoice IS Invoice AND NOT isShipped(invoice);  

META defineInvoiceShipment(sign, stockProp, filter, NS)

    invoiceDetail = ABSTRACT InvoiceDetail (ShipmentDetail) MATERIALIZED INDEXED;
    invoiceDetail = DATA InvoiceDetail (UserShipmentDetail);
    invoiceDetail(UserShipmentDetail shipmentDetail) += invoiceDetail(shipmentDetail);
    invoiceDetail[Shipment.ShipmentDetail](ShipmentDetail shipmentDetail) += invoiceDetail(shipmentDetail);
    
    overCopy[UserShipmentDetail,UserShipmentDetail](UserShipmentDetail d, UserShipmentDetail detail) + {       
        invoiceDetail(d) <- invoiceDetail(detail);             
    }   

    CONSTRAINT supplier(UserShipmentDetail detail) != supplier(invoiceDetail(detail))
        CHECKED BY invoiceDetail[UserShipmentDetail]
            MESSAGE 'Поставщик в накладной и поставке должны соответствовать друг другу';
    CONSTRAINT customer(UserShipmentDetail detail) != customer(invoiceDetail(detail))
        CHECKED BY invoiceDetail[UserShipmentDetail]
            MESSAGE 'Покупатель в накладной и поставке должны соответствовать друг другу';
    CONSTRAINT sku(UserShipmentDetail detail) != sku(invoiceDetail(detail))
        CHECKED BY invoiceDetail[UserShipmentDetail]
            MESSAGE 'Товар в накладной и поставке должны соответствовать друг другу';

    descriptionIndexInvoiceDetail 'Строка накладной' (ShipmentDetail detail) = descriptionIndex(invoiceDetail(detail));
    descriptionIndexInvoiceDetail 'Строка накладной' (UserShipmentDetail detail) = descriptionIndex(invoiceDetail(detail));

    quantityShipmentDetail (invoice, shipment) = GROUP SUM quantity(ShipmentDetail shipmentDetail) BY invoice(invoiceDetail(shipmentDetail)), shipment(shipmentDetail);
    relationInvoice 'Связь'(Shipment shipment)  = GROUP SUM 1 IF quantityShipmentDetail (Invoice invoice, shipment);

    invoices 'Накладные'(Shipment shipment)  = GROUP
                                                    CONCAT STRING[255](description(Invoice invoice)) IF quantityShipmentDetail(invoice, shipment) , ', '
                                                    ORDER invoice IN invoice CHARWIDTH 30 MATERIALIZED;

    shipped 'Кол-во (поставлено)' (invoiceDetail) = GROUP SUM quantity(ShipmentDetail shipmentDetail) IF isPosted(shipmentDetail)
                                                                       BY invoiceDetail(shipmentDetail) MATERIALIZED;
                                                                       
    shipped 'Кол-во (поставлено) по накладной' (invoice) = GROUP SUM shipped(InvoiceDetail detail) IF isPosted(detail)
                                                                       BY invoice(detail) MATERIALIZED;  
    shippedNotCharge 'Кол-во (поставлено) по накладной (кроме услуг)' (invoice) = GROUP SUM shipped(InvoiceDetail detail) IF isPosted(detail) AND isNotCharge(sku(detail))
                                                                       BY invoice(detail) MATERIALIZED;                                                                           
                                                                         
                                                                                                                                          
    shipmentQuantityInvoiceDetail 'Кол-во товара в документе' (sku, invoice) = 
        GROUP SUM shipped(InvoiceDetail idetail)
              BY  sku(idetail),
                  invoice(idetail);
                                                                                                                                                              
    notShipped = NOT shipped(Invoice invoice);

    TABLE shipmentDetailBatch (ShipmentDetail, Batch);
    cost = ABSTRACT NUMERIC[16,5] (ShipmentDetail, Batch) MATERIALIZED;

    TABLE invoiceDetailBatch (InvoiceDetail, Batch);
    cost (invoiceDetail, Batch batch) = GROUP SUM cost(ShipmentDetail shipmentDetail, batch) BY invoiceDetail(shipmentDetail) MATERIALIZED;
    in (InvoiceDetail invoiceDetail, Batch batch) = [ GROUP SUM 1 IF cost(ShipmentDetail shipmentDetail, batch) BY invoiceDetail(shipmentDetail)](invoiceDetail) OR 
                                                     batch(invoiceDetail) == batch MATERIALIZED; // приходится делать OR, так как если количество 0, то партии не расписываются

    countBatch 'Кол-во партий'(InvoiceDetail invoiceDetail)  = GROUP SUM 1 IF in(invoiceDetail, Batch batch) MATERIALIZED;
    prevCountBatch (InvoiceDetail d) = PREV(countBatch(d));
    maxBatch(InvoiceDetail invoiceDetail)  = GROUP MAX Batch batch IF in(invoiceDetail, batch);
    prevMaxBatch (InvoiceDetail d) = PREV(maxBatch(d));

    toShip 'Не поставлено' (InvoiceDetail invoiceDetail) = (quantity(invoiceDetail) (-) shipped(invoiceDetail)) IF NOT isCharge(sku(invoiceDetail));
    prevToShip 'Не поставлено' (InvoiceDetail invoiceDetail) = PREV(toShip(invoiceDetail));
    toShip 'Не поставлено' (Invoice invoice) = quantityInvoiceDetail(invoice) (-) shipped(invoice) (-) quantityChargeInvoiceDetail(invoice);

    toShipInvoiceDetail 'Не поставлено по складу' (stock, invoice) =
        GROUP SUM toShip(InvoiceDetail invoiceDetail) IF toShip(invoiceDetail) > 0
              BY stockProp(invoiceDetail), invoice(invoiceDetail);

    toShipInvoiceDetail 'Не поставлено по накладной' (invoice) =
        GROUP SUM toShip(InvoiceDetail invoiceDetail) IF toShip(invoiceDetail) > 0
              BY invoice(invoiceDetail);
    toShipNotChargeInvoiceDetail 'Не поставлено по накладной (кроме услуг)' (invoice) =
        GROUP SUM toShip(InvoiceDetail invoiceDetail) IF toShip(invoiceDetail) > 0 AND isNotCharge(sku(invoiceDetail))
              BY invoice(invoiceDetail);
    // Создание поставки на основе инвойса //

    backgroundShipped 'Цвет' (Invoice invoice) = RGB(255, 224, 255) IF invoice IS Invoice;
    backgroundShipped (InvoiceDetail detail) = backgroundShipped(invoice(detail));

    FORM shipmentInvoices 'Накладные'###sign
        OBJECTS s = LegalEntity PANEL
        PROPERTIES (s) READONLY name
        OBJECTS c = LegalEntity PANEL
        PROPERTIES (c) READONLY name

        OBJECTS i = Invoice
        PROPERTIES (i) READONLY isPosted, number, series, date, time,
                                nameSupplier, nameSupplierStock, nameCustomer, nameCustomerStock,
                                nameCurrency, seriesNumberContractSku, isCommission,
                                countInvoiceDetail, quantityInvoiceDetail, sumInvoiceDetail,
                                VATSumInvoiceDetail, invoiceSumInvoiceDetail, orders,
                                note
        FILTERS supplier(i) == s,
                customer(i) == c,
                isPosted(i)

        OBJECTS d = InvoiceDetail
        PROPERTIES (d) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku
        PROPERTIES (d) READONLY quantity, shipped, price, sum,
                       numberVAT, valueVAT, VATSum, invoiceSum,
                       descriptionOrder
        FILTERS invoice(d) == i

//        DIALOG Invoice OBJECT i
    ;

    DESIGN shipmentInvoices {
        BOX {
            size = (1024, 768);
            NEW header {
                horizontal = TRUE;
                MOVE BOX(s) { caption = 'Поставщик';};
                MOVE BOX(c) { caption = 'Покупатель';};
            }
            MOVE BOX(i);
            MOVE BOX(d);
            MOVE TOOLBARBOX;
        }
    }
    overFillInvoice  ABSTRACT LIST ( UserShipment, Invoice);                          // документ
    overFillInvoice  ABSTRACT LIST ( UserShipmentDetail, InvoiceDetail);  // детайл

    fillInvoice 'Заполнить на основе накладной'(UserShipment userShipment)   { 
        DIALOG shipmentInvoices OBJECTS s = supplier(userShipment), c = customer(userShipment), i INPUT DO {
            overFillInvoice(userShipment, i);

            FOR invoice(InvoiceDetail invoiceDetail) == i AND
                toShip(invoiceDetail) > 0
                NEW d = UserShipmentDetail DO {
                    userShipment(d) <- userShipment;
                    invoiceDetail(d) <- invoiceDetail;
                    orderDetail(d) <- orderDetail(invoiceDetail);

                    sku(d) <- sku(invoiceDetail);

                    quantity (d) <- toShip(invoiceDetail);

                    overFillInvoice(d, invoiceDetail);
            }
        }
    } IN invoice;

// Создание поставки на основе нескольких инвойсов //

    TABLE invoiceUserShipment (Invoice, UserShipment);
    include 'Вкл. в приемку' = DATA BOOLEAN (Invoice, UserShipment) CHARWIDTH 10;
    includeInvoices 'Накладные в приемке'(UserShipment userShipment)  = GROUP
                                                        CONCAT STRING[255](description(Invoice invoice)) IF include(invoice, userShipment) , ', '
                                                        ORDER invoice IN invoices CHARWIDTH 30 MATERIALIZED;
    FORM includeInvoicesUserShipment 'Накладные'
        OBJECTS s = UserShipment PANEL

        OBJECTS i = Invoice
        PROPERTIES (i) READONLY isPosted, number, series, date, time,
                                nameSupplier, nameSupplierStock, nameCustomer, nameCustomerStock,
                                nameCurrency, seriesNumberContractSku, isCommission,
                                countInvoiceDetail, quantityInvoiceDetail, sumInvoiceDetail,
                                VATSumInvoiceDetail, invoiceSumInvoiceDetail, orders,
                                note

        FILTERS supplier(i) == supplier(s),
                customer(i) == customer(s),
                supplierStock(i) == supplierStock(s),
                customerStock(i) == customerStock(s),
                isPosted(i),
                toShipInvoiceDetail(i)
        PROPERTIES(i,s) BACKGROUND backgroundShipped(i) include BEFORE isPosted(i)
    ;

    dialogIncludeInvoices 'Включить накладные в поставку' (UserShipment userShipment)  { SHOW includeInvoicesUserShipment OBJECTS s = userShipment; }  IN invoices;

    shipmentDimension = ABSTRACT ShipmentDimension (InvoiceDetail);
    nameShipmentDimension 'Регистр хранения' (InvoiceDetail detail) = name(shipmentDimension(detail));
    shipmentDimension = ABSTRACT ShipmentDimension (UserInvoiceDetail);
    nameShipmentDimension 'Регистр хранения' (UserInvoiceDetail detail) = name(shipmentDimension(detail));
    shipmentDimension(UserInvoiceDetail detail) += shipmentDimension(detail);
    defaultInvoiceDetail (sku, UserShipment userShipment) = GROUP MAX InvoiceDetail detail IF include(invoice(detail), userShipment)
        BY sku(detail);
    defaultInvoiceDetail (sku, dimension, UserShipment userShipment) = GROUP MAX InvoiceDetail detail IF include(invoice(detail), userShipment)
        BY sku(detail), shipmentDimension(detail);

    fillInvoiceDetail 'Привязать поставку к накладным'(UserShipmentDetail detail, ShipmentDimension dimension)  { 

        invoiceDetail(detail) <- IF dimension IS ShipmentDimension
                                    THEN defaultInvoiceDetail(sku(detail), dimension, userShipment(detail))
                                    ELSE defaultInvoiceDetail(sku(detail), userShipment(detail));
    };

    fillInvoiceDetail 'Привязать поставку к накладным'(UserShipment userShipment, ShipmentDimension dimension)  { 
        FOR userShipment(UserShipmentDetail detail) == userShipment DO {
            fillInvoiceDetail(detail, dimension);
        }
    } IN invoices;
    fillInvoiceDetail 'Привязать поставку к накладным' (UserShipment userShipment)  { fillInvoiceDetail(userShipment, shipmentDimension(userShipment)); } IN invoices;

    WHEN LOCAL FORMS userShipment
        (CHANGED(shipmentDimension(UserShipmentDetail detail)) OR CHANGED(sku(detail))) AND NOT invoiceDetail(detail) AND ShipmentDimension s==shipmentDimension(detail)
            DO EXEC fillInvoiceDetail(detail, s);

    EXTEND FORM userShipment
        PROPERTIES(s) fillInvoice, invoices READONLY
        PROPERTIES(s) dialogIncludeInvoices, includeInvoices READONLY, fillInvoiceDetail
        PROPERTIES(d) descriptionIndexInvoiceDetail BEFORE deletesd
    ;
    DESIGN userShipment {
        headerCreateDetail {
            MOVE GROUP(invoice,s) {
                lines = 1;
            }
            MOVE GROUP(invoices,s) {
                lines = 1;
            }
        }
    }


    EXTEND FORM shipments
        PROPERTIES(s) READONLY invoices
        PROPERTIES(d) READONLY descriptionIndexInvoiceDetail
    ;

//-- агр.объект

    @defineDocumentInterfaceDetailPricePrefix(invoice, shipment, ' (учетная)');
    shipmentPrice[Invoice.InvoiceDetail](InvoiceDetail detail) += shipmentPrice(detail);
    @defineDocumentInterfaceDetailQuantityPrefix (invoice, shipment, ' (поставлено)');
    shipmentQuantity[Invoice.InvoiceDetail](InvoiceDetail d)+=shipmentQuantity(d);
    @defineDocumentInterfaceHeaderQuantityCustomPrefix (invoice, invoiceDetail, shipment, ' (поставлено)');
    
    @defineDocumentInterfaceDetailDataSumPrefix (invoice, shipment, ' (учетная)');
    @deriveDocumentDetailSumCustomRoundPrefix(userInvoiceDetail, shipment, currency, shipmentQuantity, homePriceRound);
    shipmentSum[Invoice.InvoiceDetail](InvoiceDetail detail) += shipmentSum(detail);
    @defineDocumentInterfaceHeaderCreateShipment (invoice);
    createShipment[Invoice.Invoice](Invoice invoice) += createShipment(invoice);
    @defineDocumentInterfaceHeaderSumPrefix (invoice, shipment, ' (учетная)');

    @defineDocumentInterfaceHeaderItemSum (invoice, shipment, shipment);
    @defineDocumentInterfaceHeaderItemSumDouble (invoice, range, shipment, shipment, , VAT);
    @defineDocumentInterfaceHeaderTimePrefix(Invoice, shipment, ' поставки');
    shipmentDate[Invoice.Invoice](Invoice i) += shipmentDate(i);

    shipmentDate(UserInvoice i) <- date(i) WHEN CHANGED(date(i));
    shipmentTime(UserInvoice i) <- (IF shipmentDate(i) > date(i) THEN (IF shipmentDate(i) > currentDate() THEN 00:00 ELSE currentTime()) ELSE time(i)) WHEN CHANGED(time(i)) OR CHANGED(shipmentDate(i));
    
    @defineDocumentInterfaceDetailTimePrefix(invoice, InvoiceDetail, shipment,' поставки');
    @defineDocumentInterfaceDetailExpiryDate(invoice);
    @defineDocumentInterfaceDetailManufactureDate(invoice);
    
    overExpiryDate = ABSTRACT DATE (UserInvoiceDetail);
    calcExpiryDate (UserInvoiceDetail d) = OVERRIDE 
        overExpiryDate(d),
        (IF expiryMonth(sku(d)) 
            THEN sumMonth(manufactureDate(d), expiryMonth(sku(d)))
            ELSE sum(manufactureDate(d), expiryDays(sku(d))));
        
    WHEN LOCAL FORMS userInvoice (CHANGED(manufactureDate(UserInvoiceDetail d)) OR CHANGED(sku(d))) AND NOT batch(d) AND manufactureDate(d) AND calcExpiryDate(d) DO {
        expiryDate(d) <- calcExpiryDate(d);            
    } 
    overManufactureDate = ABSTRACT DATE (UserInvoiceDetail);
    calcManufactureDate (UserInvoiceDetail d) = OVERRIDE 
        overManufactureDate(d),
        (IF expiryMonth(sku(d)) 
            THEN sumMonth(expiryDate(d), -expiryMonth(sku(d)))
            ELSE sum(expiryDate(d), -expiryDays(sku(d))));     
           
    WHEN LOCAL FORMS userInvoice (CHANGED(expiryDate(UserInvoiceDetail d)) OR CHANGED(sku(d))) AND NOT batch(d) AND expiryDate(d) AND calcManufactureDate(d) DO {
        manufactureDate(d) <- calcManufactureDate(d);            
    }            

    conformityShipmentDateInvoices 'Соответствие даты поставки с датой накладной '##sign = DATA BOOLEAN ();
    
    EXTEND FORM options
        PROPERTIES() NS##conformityShipmentDateInvoices = conformityShipmentDateInvoices
    ;
    
    DESIGN options {
        invoice##NS {
            MOVE PROPERTY(NS##conformityShipmentDateInvoices);
        }
    }

    CONSTRAINT isPosted(UserInvoice i) AND conformityShipmentDateInvoices() AND NOT (shipmentDate(i)==date(i))
        MESSAGE 'Дата поставки должна быть равна дате накладной '##sign; 
    
    overCopy(UserInvoice s, UserInvoice d) + { 
        createShipment(d) <- createShipment(s);
    }

    skipCreateShipment = ABSTRACT BOOLEAN (InvoiceDetail) MATERIALIZED;
    createShipment 'Создать поставку' (InvoiceDetail invoiceDetail) = createShipment(invoice(invoiceDetail)) AND
                                                                     isStockSku(invoiceDetail) AND
                                                                     NOT skipCreateShipment(invoiceDetail) AND 
                                                                     NOT isCharge(sku(invoiceDetail)) MATERIALIZED;

    createShipment 'Создать поставку' (UserInvoiceDetail invoiceDetail) = createShipment(userInvoice(invoiceDetail)) AND
                                                                         isStockSku(invoiceDetail);
                                                                        
    skipChangedShipmentQuantity = ABSTRACT BOOLEAN (UserInvoiceDetail);
    shipmentQuantity(UserInvoiceDetail detail) <- quantity(detail) IF createShipment(detail)
        WHEN (CHANGED(quantity(detail)) OR CHANGED(createShipment(detail))) AND NOT skipChangedShipmentQuantity(detail);
    

    readonlyShipmentQuantity = ABSTRACT BOOLEAN (UserInvoiceDetail);
    showCreateShipment = ABSTRACT VALUE BOOLEAN(Invoice);
    showCreateShipment(Invoice i) += createShipment(i);
    showShipment (Invoice invoice) =  invoice IS Invoice AND NOT showCreateShipment(invoice);
    skipShowShipmentQuantity = ABSTRACT BOOLEAN (Invoice);
    showShipmentQuantity = showCreateShipment(Invoice invoice) AND NOT skipShowShipmentQuantity(invoice);
        
    EXTEND FORM userInvoice
        PROPERTIES(i) BACKGROUND backgroundShipped(i) createShipment
        PROPERTIES(i) BACKGROUND backgroundShipped(i) SHOWIF showCreateShipment(i) shipmentSumUserInvoiceDetail
        PROPERTIES(i) BACKGROUND backgroundShipped(i) SHOWIF createShipment(i)  shipmentDate, shipmentTime
        PROPERTIES(d) BEFORE deleteid SHOWIF showCreateShipment[Invoice](i) BACKGROUND backgroundShipped(i)
                      manufactureDate, expiryDate, shipmentSum
        PROPERTIES(d) BEFORE deleteid BACKGROUND backgroundShipped(i) shipmentPrice
        PROPERTIES(d) READONLY shipped AFTER quantity(d) SHOWIF showShipment(i) BACKGROUND backgroundShipped(i)
        PROPERTIES(d) READONLYIF readonlyShipmentQuantity(d) shipmentQuantity AFTER quantity(d) SHOWIF showShipmentQuantity(i) BACKGROUND backgroundShipped(i)
    ;
    DESIGN userInvoice {
        headerCreateDocuments {
            NEW headerCreateShipment {
                caption = 'Поставка';
                horizontal = TRUE;
                MOVE PROPERTY(createShipment(i));
                MOVE PROPERTY(shipmentDate(i));
                MOVE PROPERTY(shipmentTime(i));
            }
            PROPERTY(shipmentSumUserInvoiceDetail(i)) { charWidth = 13;}                       
        }
    }

    EXTEND FORM invoices
        PROPERTIES(i) READONLY BACKGROUND backgroundShipped(i) shipmentQuantityInvoiceDetail, shipmentSumInvoiceDetail BEFORE orders(i)
        PROPERTIES(d) READONLY SHOWIF showCreateShipment(i) BACKGROUND backgroundShipped(i)
                      manufactureDate, expiryDate, shipmentPrice, shipmentSum
        PROPERTIES(d) READONLY shipped AFTER quantity(d) SHOWIF showShipment(i) BACKGROUND backgroundShipped(i)
        PROPERTIES(d) READONLY shipmentQuantity AFTER quantity(d) SHOWIF showCreateShipment(i) BACKGROUND backgroundShipped(i)
        FILTERGROUP filter11
                    FILTER  'Непоставленные товары' NOT shipped(d) == quantity (d) 'F10'  
    ;
    EXTEND FORM shipmentInvoices
        PROPERTIES (d) READONLY BACKGROUND backgroundShipped(i)  toShip, shipmentPrice
    ;
    
    overCopy[UserInvoiceDetail,UserInvoiceDetail](UserInvoiceDetail d, UserInvoiceDetail detail) + { 
        manufactureDate(d) <- manufactureDate(detail);  
        expiryDate(d) <- expiryDate(detail);
        //shipmentPriceUserInvoiceDetail(d) <- shipmentPriceUserInvoiceDetail(detail);           
    }        
    

    CLASS InvoiceShipment 'Поставка на основе накладной'###sign : Shipment;
    CLASS InvoiceShipmentDetail 'Строка поставки на основе накладной'###sign : ShipmentDetail;

    @defineDocumentTables(invoiceShipment);

    @defineDocumentAggregation(invoice, invoiceShipment, createShipment);
    shipment(InvoiceShipmentDetail detail) += invoiceShipment(detail);

    index(InvoiceShipmentDetail detail) += index(detail);

    date(InvoiceShipment shipment) += shipmentDate(invoice(shipment));
    time(InvoiceShipment shipment) += shipmentTime(invoice(shipment));

    @defineDocumentAggregationStockPrefix(invoice, invoiceShipment, supplier, 'Склад поставщика', , );
    supplierStock(InvoiceShipment shipment) += supplierStock(shipment);
    @defineDocumentAggregationStockPrefix(invoice, invoiceShipment, customer, 'Склад покупателя', , );
    customerStock(InvoiceShipment shipment) += customerStock(shipment);

    @defineDocumentAggregationLegalEntityPrefix(invoice, invoiceShipment, supplier, 'Поставщик', , );
    supplier(InvoiceShipment shipment) += supplier(shipment);
    @defineDocumentAggregationLegalEntityPrefix(invoice, invoiceShipment, customer, 'Покупатель', , );
    customer(InvoiceShipment shipment) += customer(shipment);

    @defineDocumentAggregationPosted(invoice, invoiceShipment);
    isPosted(InvoiceShipment shipment) += isPosted(shipment);

    @defineDocumentAggregationClosed(invoice, invoiceShipment);
    isClosed(InvoiceShipment shipment) += isClosed(shipment);

    number 'Номер документа' (InvoiceShipment invoiceShipment) = number(invoice(invoiceShipment));
    number(InvoiceShipment shipment) += number(shipment);

    series 'Серия документа' (InvoiceShipment invoiceShipment) = series(invoice(invoiceShipment));
    series(InvoiceShipment shipment) += series(shipment);

    seriesNumber 'Серия/номер документа' (InvoiceShipment invoiceShipment) = seriesNumber(invoice(invoiceShipment));

    noteInvoice 'Примечание' (InvoiceShipment invoiceShipment) = note(invoice(invoiceShipment));
    note(InvoiceShipment shipment) += noteInvoice(shipment);
    currencyOver = ABSTRACT Currency (InvoiceShipment);
    currency  (InvoiceShipment invoiceShipment) = OVERRIDE currencyOver(invoiceShipment), currency(invoice(invoiceShipment));
    currency (InvoiceShipment shipment) += currency(shipment);

    @defineDocumentDescription(invoiceShipment, InvoiceShipmentDetail, 'Поставка на основе накладной'###sign);
    description (InvoiceShipment shipment) += description(shipment);

    @defineDocumentAggregationDetailProperty (invoice, invoiceShipment, orderDetail, 'Заказ');
    orderDetail (InvoiceShipmentDetail shipmentDetail) += orderDetail(shipmentDetail);

    @defineDocumentAggregationDetailSku(invoice, invoiceShipment, sku);
    sku(InvoiceShipmentDetail shipmentDetail) +=  sku(shipmentDetail);

    quantity(InvoiceShipmentDetail shipmentDetail) += shipmentQuantity(invoiceDetail(shipmentDetail));
    expiryDate(InvoiceShipmentDetail shipmentDetail) += expiryDate(invoiceDetail(shipmentDetail));
    manufactureDate(InvoiceShipmentDetail shipmentDetail) += manufactureDate(invoiceDetail(shipmentDetail));

    price(InvoiceShipmentDetail invoiceShipmentDetail) = shipmentPrice(invoiceDetail(invoiceShipmentDetail));
    price(InvoiceShipmentDetail shipmentDetail) += price(shipmentDetail);

    sum(InvoiceShipmentDetail invoiceShipmentDetail) = shipmentSum(invoiceDetail(invoiceShipmentDetail));
    sum(InvoiceShipmentDetail shipmentDetail) += sum(shipmentDetail);

    invoiceDetail(InvoiceShipmentDetail shipmentDetail) += invoiceDetail(shipmentDetail);

    edit(InvoiceShipment shipment) + {  edit(invoice(shipment)); }
    close(InvoiceShipment shipment) + {  close(invoice(shipment)); }
    edit(InvoiceShipmentDetail d) + {  edit(invoiceDetail(d)); }
    show(InvoiceShipmentDetail d) + {  show(invoiceDetail(d)); }
    createdUser(InvoiceShipment shipment) += createdUser(invoice(shipment));

    show(InvoiceShipment shipment) + {  show(invoice(shipment)); }
    
    // цены в подборе
    @extendFormDocumentAccountPriceSku(userInvoice, stockProp, ' учетная', userInvoice, i, is);
    @extendFormDocumentAccountPriceBatch(userInvoice, stockProp, ' учетная', userInvoice, i, showBatch);
END

META defineInvoiceShipmentBatch(dumb)
    EXTEND FORM shipmentInvoices
        PROPERTIES (d) READONLY nameBatch AFTER shortNameUOMSku(d)
    ;

    overFillInvoice (UserShipmentDetail sd, InvoiceDetail id) + {  batch (sd) <- batch(id); }

    @defineDocumentAggregationDetailBatch (invoice, invoiceShipment);
    batch (InvoiceShipmentDetail shipmentDetail) += batch(shipmentDetail);

    expiryDate(UserInvoiceDetail detail) <- prevExpiryDate(batch(detail)) WHEN CHANGED (batch(detail));
    manufactureDate(UserInvoiceDetail detail) <- prevManufactureDate(batch(detail)) WHEN CHANGED (batch(detail));
END

META defineInvoiceShipmentPack(dumb)
    EXTEND FORM shipmentInvoices
        PROPERTIES (d) READONLY SHOWIF showPack(i) BEFORE quantity(d)
                       idBarcodePack, shortNameUOMPack,
                       amountPack, packQuantity
    ;
    overFillInvoice(UserShipmentDetail s, InvoiceDetail i) + { 
        barcodePack(s) <- barcodePack(i);
        amountPack(s) <- amountPack(i);
        packQuantity(s) <- toShip(i)/amountPack(i);
    }

    showPack(InvoiceShipment shipment) += showPack(invoice(shipment));
    barcodePack(InvoiceShipmentDetail shipmentDetail) +=  barcodePack(invoiceDetail(shipmentDetail));
    amountPack(InvoiceShipmentDetail shipmentDetail) +=  amountPack(invoiceDetail(shipmentDetail));
    packQuantity(InvoiceShipmentDetail shipmentDetail) +=  packQuantity(invoiceDetail(shipmentDetail));
END

//-- Действие

META defineInvoiceShipmentAction (sign)
    addUserShipment 'Поставка'###sign(Invoice invoice)   { 
	NEWSESSION{
	
	        NEW s = UserShipment {
	
	            supplier(s) <- supplier(invoice);
	            supplierStock(s) <- supplierStock(invoice);
	            customer(s) <- customer(invoice);
	            customerStock(s) <- customerStock(invoice);
	            currency(s) <- currency(invoice);
	            number(s) <- number(invoice);
	            series(s) <- series(invoice);
	            note(s) <- note(invoice);
	            overFillInvoice(s, invoice);
	
	            FOR invoice(InvoiceDetail detail) == invoice  NEW d = UserShipmentDetail DO {
	                userShipment(d) <- s;
	                invoiceDetail(d) <- detail;
	                orderDetail(d) <- orderDetail(detail);
	
	                sku(d) <- sku(detail);
	                quantity (d) <- toShip(detail);
	                
	                price(d) <- shipmentPrice(detail);
	                overFillInvoice(d, detail);
	            }
	
	            SHOW userShipment OBJECTS s = s DOCKED NOCANCEL;
	        }
	    }
} TOOLBAR;
    addUserShipment(Invoice invoice) + WHEN invoice IS Invoice THEN {  addUserShipment(invoice); }

    EXTEND FORM invoices
        PROPERTIES(i) addUserShipment
    ;
    DESIGN invoices {
        createdContainer{
            MOVE PROPERTY(addUserShipment(i)) { alignment = STRETCH; }
        }
    }
END

