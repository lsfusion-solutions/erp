MODULE Shipment;

REQUIRE Document, StockSkuDocument, Barcode, Operation, PriceListAccount;

CLASS ABSTRACT Shipment 'Поставка' : Document;
CLASS ABSTRACT ShipmentDetail 'Строка поставки' : DocumentDetail;

@defineDocumentAbstract(shipment);
@defineDocumentAbstractNumber(shipment, BPSTRING[2]);

@defineDocumentAbstractLegalEntity(shipment, supplier, 'Поставщик');
@defineDocumentAbstractLegalEntity(shipment, customer, 'Покупатель');

@defineDocumentAbstractHeaderStock(shipment, stock, 'Склад поставщика', supplier);
@defineDocumentAbstractHeaderStock(shipment, stock, 'Склад покупателя', customer);

@defineDocumentAbstractHeaderStock(shipment, stock, 'Склад (с)', from);
fromStock (ShipmentDetail idetail) = fromStock(shipment(idetail));
nameFromStock 'Склад (с)' (ShipmentDetail idetail) = name(fromStock(idetail)) CHARWIDTH 10;

@defineDocumentAbstractHeaderStock(shipment, stock, 'Склад (на)', to);
toStock (ShipmentDetail idetail) = toStock(shipment(idetail));
nameToStock 'Склад (на)' (ShipmentDetail idetail) = name(toStock(idetail)) CHARWIDTH 10;

@defineDocumentAbstractPosted(shipment);
@defineDocumentAbstractClosed(shipment);

overShowEdit = ABSTRACT BOOLEAN (Shipment);
overShowDelete = ABSTRACT BOOLEAN (Shipment);

@defineDocumentAbstractDetailSku(shipment, sku);

@defineDocumentAbstractDetailPriceCustomPrefix(shipmentDetail, , );

@defineDocumentAbstractDetailQuantity(shipment);
@defineDocumentDetailGrossWeight(shipment, sku);
@defineDocumentAbstractDetailQuantityPrefix(shipment, pack, ' (упаковок)');
@defineDocumentHeaderSkuQuantity(shipment, sku);

@defineDocumentAbstractDetailDataSumCustomPrefix (shipmentDetail, , );

@defineDocumentHeaderSum(shipment);
@defineDocumentHeaderQuantity(shipment);
@defineDocumentHeaderGrossWeight(shipment);

@defineDocumentHeaderItemSum (shipment, , );
        
isUser = ABSTRACT BOOLEAN (Shipment);

operation = ABSTRACT Operation.Operation(Shipment);
nameOperation 'Операция' (Shipment shipment) = name(operation(shipment));

in 'Приходная' = ABSTRACT BOOLEAN (Shipment);
in 'Приходная' (ShipmentDetail d) = in(shipment(d)); 
out 'Расходная' (Shipment shipment) = shipment IS Shipment AND NOT in(shipment);
out 'Расходная' (ShipmentDetail d) = out(shipment(d)); 

DESIGN options {
    pane {
        NEW shipments {
            caption = 'Поставки';
        }
    }
}
    
filterShipmentInterval 'Показывать поставки за последние N дней' = DATA INTEGER () COMPLEX; 

EXTEND FORM options PROPERTIES() filterShipmentInterval;
DESIGN options { shipments { MOVE PROPERTY(filterShipmentInterval()); } }

// ----------------------------------- Создавать поставку по умолчанию для склада ------------------------------------------ //

META defineDocumentHeaderCreateShipment(object)
    createShipment 'Создать поставку' (object) = DATA BOOLEAN(###object) IN documentPrm;
END
META defineDocumentAbstractHeaderCreateShipment(object)
    createShipment 'Создать поставку' (object) = ABSTRACT BOOLEAN(###object);
END

META defineDocumentInterfaceHeaderCreateShipment (object)
    @defineDocumentAbstractHeaderCreateShipment (object);
    @defineDocumentHeaderCreateShipment (user###object);
    createShipment (User###object object) += createShipment(object);
END

//----------------------------------------------- Поставка ---------------------------------------------------//

META defineShipment(captions, sign, stockProp, supplierFilter, customerFilter, filter, NS, char)

    CLASS ABSTRACT Shipment 'Поставка'###sign : Shipment.Shipment;
    CLASS ABSTRACT ShipmentDetail 'Строка поставки'###sign : Shipment.ShipmentDetail;

    CLASS UserShipment 'Поставка (польз.)'###sign : Shipment;
    CLASS UserShipmentDetail 'Строка поставки (польз.)'###sign : ShipmentDetail;

    @defineDocumentInterface(shipment);
    @deriveDocumentHeaderTimePrefix(UserShipment, );
    shipment[Shipment.ShipmentDetail] (ShipmentDetail detail) += shipment(detail);
    date[Shipment.Shipment] (Shipment shipment) += date(shipment);
    time[Shipment.Shipment] (Shipment shipment) += time(shipment);
    isUser(UserShipment shipment) += is(shipment);
    index[Shipment.ShipmentDetail](ShipmentDetail d) += index(d);
    
    createdUser = ABSTRACT CustomUser (Shipment);
    createdNameUser 'Создан пользователем' (Shipment shipment) = name[Contact](createdUser(shipment)) CHARWIDTH 10 IN created;
    createdUser(UserShipment shipment) += createdUser(shipment) IF shipment IS UserShipment;    

    @defineDocumentInterfaceNumber(shipment, BPSTRING[2]);
    number[Shipment.Shipment] (Shipment shipment) += number(shipment);
    series[Shipment.Shipment] (Shipment shipment) += series(shipment);
    
    @defineNumeratedDefault(UserShipment, 'Поставки'###sign, 'ПС', NS);

    @defineDocumentInterfaceLegalEntity (shipment, supplier, 'Поставщик');
    @defineDocumentInterfaceLegalEntity (shipment, customer, 'Покупатель');
    supplier[Shipment.Shipment](Shipment shipment) += supplier(shipment);
    customer[Shipment.Shipment](Shipment shipment) += customer(shipment);
    
    is###filter##Supplier 'Приход от компании' (ShipmentDetail d) = is###filter(supplier(d)); 

    @defineDocumentInterfaceDataStock(shipment, stock, 'Склад поставщика', supplier);
    @defineDocumentInterfaceDataStock(shipment, stock, 'Склад покупателя', customer);
    supplierStock[Shipment.Shipment](Shipment shipment) += supplierStock(shipment);
    customerStock[Shipment.Shipment](Shipment shipment) += customerStock(shipment);

    CONSTRAINT supplier(UserShipment userShipment) AND supplierStock(userShipment) AND NOT
    in(supplier(userShipment), supplierStock(userShipment))
        CHECKED BY supplierStock[UserShipment]
            MESSAGE 'Поставщик и склад поставщика для поставки не имеют связи';
    CONSTRAINT customer(UserShipment userShipment) AND customerStock(userShipment) AND NOT
    in(customer(userShipment), customerStock(userShipment))
        CHECKED BY customerStock[UserShipment]
            MESSAGE 'Покупатель и склад покупателя для поставки не имеют связи';

    @defineDocumentInterfacePosted(shipment);
    isPosted[Shipment.Shipment] (Shipment shipment) += isPosted(shipment);

    @defineDocumentInterfaceClosed(shipment);
    @defineDocumentClosedConstraint(UserShipment);
    isClosed[Shipment.Shipment] (Shipment shipment) += isClosed(shipment);
    
    @defineDocumentInterfaceDescription(shipment, 'Поставка'###sign);

    @defineDocumentInterfaceCurrency(shipment);
    @deriveDocumentCurrency(userShipment, stockProp###stock);

    @defineDocumentInterfaceDetailSku(shipment, sku);
    INDEX sku(ShipmentDetail d), customerStock(d);
    sku[Shipment.ShipmentDetail](ShipmentDetail detail) += sku(detail);
    
    blankLineShipments 'Разрешить строки без SKU в поставках '##sign = DATA BOOLEAN ();
    
    EXTEND FORM options
        PROPERTIES() NS##blankLineShipments = blankLineShipments
    ;
    
    DESIGN options {
        shipments {
            MOVE PROPERTY(NS##blankLineShipments);
        }
    }

    CONSTRAINT isPosted(UserShipmentDetail d) AND NOT sku(d) AND NOT blankLineShipments()
        MESSAGE 'Для строки поставки '##sign##' должен быть задан SKU';

    @defineDocumentInterfaceDetailQuantity(shipment);
    quantity[Shipment.ShipmentDetail](ShipmentDetail detail) += quantity(detail);

    @defineDocumentInterfaceDetailExpiryDate(shipment);
    @defineDocumentInterfaceDetailManufactureDate(shipment);
    
    @defineDocumentInterfaceDetailPrice(shipment);
    price[Shipment.ShipmentDetail](ShipmentDetail detail) += price(detail);
    
    @defineDocumentInterfaceDetailDataSum(shipment);
    @deriveDocumentDetailSum(userShipment, quantity);
    sum[Shipment.ShipmentDetail](ShipmentDetail detail) += sum(detail);

    @defineDocumentInterfaceHeaderQuantity(shipment);
    @defineDocumentHeaderSkuQuantity(shipment, sku);
    @defineDocumentHeaderSkuQuantity(userShipment, sku);
    @defineDocumentInterfaceHeaderSum(shipment);

    @defineDocumentInterfaceHeaderItemSum (shipment, , );

    @defineAddDetailDialogSkuStock(userShipment, sku, stockProp###stock, dialogSku);
//    @defineAddDetailDialogBarcode(userShipment, sku);

    @implementDocumentSupplierCustomer(shipment);
    
    @implementDocumentForm(NS.###shipment, char##s, 'Поставка'###sign, NS###shipment);
   
    @defineMovementSku(shipmentDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение товара
    @defineMovementSku(userShipmentDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение товара
    @defineBalancesSku(shipmentDetail); //-- показываем по нажатию правой клавиши остатки товара
    @defineBalancesSku(userShipmentDetail); //-- показываем по нажатию правой клавиши остатки товара
    
    @defineBarcodeSku(shipmentDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
    @defineBarcodeSku(userShipmentDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
    
    @defineInfoSku(shipmentDetail); //-- показываем по нажатию правой клавиши информацию по товару
    @defineInfoSku(userShipmentDetail); //-- показываем по нажатию правой клавиши информацию по товару
    
    @defineDocumentDialogSupplierCustomerStock(userShipment, supplierFilter, customerFilter);
    @defineDocumentDialogSupplierCustomerLegalEntity(userShipment, supplierFilter, customerFilter);

    @defineMovementPriceSku(shipmentDetail, stockProp###stock); //-- показываем по нажатию правой клавиши изменение цены товара
    @defineMovementPriceSku(userShipmentDetail, stockProp###stock); //-- показываем по нажатию правой клавиши  изменение цены товара

// ------------------------------------ Добавление сканированием строк в документ ----------------------//

    CLASS ABSTRACT ShipmentDimension 'Регистр хранения' ;
    CLASS UserShipmentDimension : ShipmentDimension;
    TABLE shipmentDimension (ShipmentDimension);

    name 'Наименование' = ABSTRACT ISTRING[100](ShipmentDimension);

    shipmentDimension = ABSTRACT ShipmentDimension (ShipmentDetail);
    nameShipmentDimension 'Регистр хранения' (ShipmentDetail detail) = name(shipmentDimension(detail));
    shipmentDimension = ABSTRACT ShipmentDimension (UserShipmentDetail);
    nameShipmentDimension 'Регистр хранения' (UserShipmentDetail detail) = name(shipmentDimension(detail));
    shipmentDimension(UserShipmentDetail detail) += shipmentDimension(detail);

    shipmentDimension= ABSTRACT ShipmentDimension (UserShipment);

    userShipmentDetail(shipment, sku, dimension) = GROUP MAX UserShipmentDetail detail BY userShipment(detail), sku(detail), shipmentDimension(detail);
    userShipmentDetail(shipment, sku) = GROUP MAX UserShipmentDetail detail BY userShipment(detail), sku(detail);

    afterInputBarcodeUserShipmentDetail ABSTRACT LIST (UserShipmentDetail, STRING[200]);

    addDetailBarcodeUserShipmentDetail(UserShipment shipment, STRING[15] barcode, ShipmentDimension dimension)  { 
        LOCAL dialogBarcodeSku = Sku ();
        dialogBarcodeSku() <- skuBarcode(barcode, date(shipment));

        IF dialogBarcodeSku() IS Sku THEN {
            LOCAL dialogBarcodeDetail = UserShipmentDetail();
            dialogBarcodeDetail() <- IF dimension IS ShipmentDimension
                                                THEN userShipmentDetail(shipment, dialogBarcodeSku(), dimension)
                                                ELSE userShipmentDetail(shipment, dialogBarcodeSku());


            IF dialogBarcodeDetail() IS UserShipmentDetail THEN {
                quantity(UserShipmentDetail detail) <-
                    quantity(detail) (+) (amount(barcode(barcode, date(shipment))) IF detail IS UserShipmentDetail)
                    WHERE detail == dialogBarcodeDetail();
                seek(dialogBarcodeDetail());
                afterInputBarcodeUserShipmentDetail(dialogBarcodeDetail(), barcode);
            } ELSE {
                NEW w = UserShipmentDetail {
                    userShipment(w) <- shipment;
                    sku(w) <- dialogBarcodeSku();
                    quantity(w) <- amount(barcode(barcode, date(shipment)));
                    seek(w);
                    afterInputBarcodeUserShipmentDetail(w, barcode);
                }
            }
            setAddedUser(dialogBarcodeSku());
        } ELSE {
            dialogBarcodeSku() <- NULL;
            DIALOG emptyBarcodeSkus OBJECTS s INPUT DO {
                dialogBarcodeSku() <- s;
                NEW br = Barcode {
                    id(br) <- barcode;
                    dataDate(br) <- currentDate();
                    sku(br) <- s;
                    NEW w = UserShipmentDetail {
                        userShipment(w) <- shipment;
                        sku(w) <- s;
                        quantity(w) <- amount(br);
                        seek(w);
                        afterInputBarcodeUserShipmentDetail(w, barcode);
                    }
                }
            }
            IF NOT dialogBarcodeSku() THEN {
                createSkuBarcode(barcode, date(shipment));
                dialogBarcodeSku() <- skuBarcode(barcode, date(shipment));
            }
            setAddedUser(dialogBarcodeSku());
        }
    }

    consumedBarcodeUserShipmentDetail = DATA LOCAL BOOLEAN ();
    beforeInputBarcodeUserShipmentDetail ABSTRACT LIST (UserShipment, STRING[200]);
    processInputBarcodeUserShipmentDetail(UserShipment userShipment, STRING[200] s) {
        weightQuantity() <- NULL;
        IF length(s) > 11 AND left(s, 2) == weightPrefix() THEN {
            weightQuantity() <- NUMERIC[7,0](substr(s, 8, 5)) / 1000.0;
        }
        beforeInputBarcodeUserShipmentDetail(userShipment, s);
        IF NOT consumedBarcodeUserShipmentDetail() THEN
            addDetailBarcodeUserShipmentDetail(userShipment, processedBarcode(s), shipmentDimension(userShipment));
    } 
    
    changeAddDetailInputBarcodeDimensionUserShipmentDetail(UserShipment userShipment)  { 
        INPUT s = STRING[200] DO {
            logBarcode(LONG(userShipment), s);
            processInputBarcodeUserShipmentDetail(userShipment, s);
        }
    };
    addDetailInputBarcodeDimensionUserShipmentDetail 'Ввод штрихкода :' (userShipment) = DATA LOCAL STRING[200] (UserShipment) TOOLBAR CHANGEKEY 'F4;editing=all' EVENTID 'SCANNER'
                                                                            ON CHANGE { changeAddDetailInputBarcodeDimensionUserShipmentDetail(userShipment); }

// --------------------------- Формы --------------------------------- //

    backgroundSku 'Цвет'  (d)= ABSTRACT CASE COLOR (UserShipmentDetail);
 
    editSku 'Редактировать SKU' (UserShipmentDetail d)  { NEWSESSION { edit(sku(d)); } }
    FORM userShipment 'Поставка'###sign
        OBJECTS s = UserShipment PANEL
        PROPERTIES (s) isPosted, nameSupplier ON CHANGE changeSupplier###supplierFilter(s),
                       nameCustomer ON CHANGE changeCustomer###customerFilter(s),
                       nameSupplierStock ON CHANGE changeSupplierStock###supplierFilter(s),
                       nameCustomerStock ON CHANGE changeCustomerStock###customerFilter(s),
                       nameNumerator, number, series, date, time,
                       nameCurrency, note, countUserShipmentDetail, quantityUserShipmentDetail,
                       sumUserShipmentDetail

        OBJECTS d = UserShipmentDetail
        PROPERTIES (d) index
        PROPERTIES (d) ON EDIT editSku(d) idBarcodeSku BACKGROUND backgroundSku(d), 
                        idSku SHOWIF showIDs(), nameSku BACKGROUND backgroundSku(d), shortNameUOMSku
        PROPERTIES (d) quantity, price, sum, manufactureDate, expiryDate,
                       NEW, deletesd=DELETE GRID
        ORDERS index(d)

        PROPERTIES(s) DRAW d fillDocument, addDetailDialogSkuStockUserShipmentDetail,
                               addDetailInputBarcodeDimensionUserShipmentDetail, deleteUserShipmentDetail
        FILTERS userShipment(d) == s

        EVENTS
            ON OK prePost(s)

        EDIT UserShipment OBJECT s
    ;

    DESIGN userShipment {
        BOX {
            size = (1024, 768);
            NEW mainTabbed {
                type = TABBED;
                fill = 1;
                    NEW documentBox {
                        type = CONTAINERV;
                        fill = 1;
                        caption = 'Поставка';
                        NEW headerDocumentBox {
                            type = CONTAINERH;
            
                            NEW headerRow1 {
                                fill = 1;
                                type = CONTAINERV;
                                
                                MOVE GROUP(documentHeader,s) {
                                    columns = 1;
                                    type = CONTAINERV;
                                    NEW first {
                                        type = CONTAINERH;
                                        MOVE PROPERTY(isPosted(s));
                                    }
                                    NEW second { 
                                        type = CONTAINERH;
                                        MOVE PROPERTY(nameNumerator(s));
                                        MOVE PROPERTY(number(s));
                                        MOVE PROPERTY(series(s));
                                        MOVE PROPERTY(date(s));
                                        MOVE PROPERTY(time(s));
                                    }    
                                }                    
                                NEW headerRow11 {
                                    type = CONTAINERH;
                                    NEW headerRow111 {
                                        caption = 'Поставщик';
                                        type = CONTAINERH;
                                        MOVE PROPERTY(nameSupplier(s)) { caption = ''; }
                                        MOVE PROPERTY(nameSupplierStock(s)) { caption = 'Склад'; }
                                    }
                                    NEW headerRow112 {
                                        caption = 'Покупатель';
                                        type = CONTAINERH;
                                        MOVE PROPERTY(nameCustomer(s)) { caption = ''; }
                                        MOVE PROPERTY(nameCustomerStock(s)) { caption = 'Склад'; }
                                    }
                                }
            
                                NEW headerTabbedPane {
                                    fill = 1;
                                    type = TABBED;
                                    NEW headerMainParams {
                                        caption = 'Основные параметры';
                                        type = CONTAINERV;
                                        MOVE GROUP(documentPrm,s) {
                                            columns = 2;
                                        }
                                    }
                                    NEW headerExtraParams {
                                        caption = 'Дополнительные параметры';
                                        type = COLUMNS;
                                        columns = 4;
                                    }
                                    NEW headerCreateDetail {
                                        caption = 'Основание';
                                        type = COLUMNS;
                                        columns = 2;
                                    }
                                    NEW headerCreateDocuments {
                                        caption = 'Производные документы';
                                        type = COLUMNS;
                                        columns = 3;
                                    }
                                }
                            }
            
                            MOVE GROUP(documentSum,s) {
                                columns = 1;
                            }
                        }
        
                    NEW specificationBox {
                        fill = 1;
                        type = TABBED;
                        MOVE BOX(d);
                    }
                }
            }
        }
        MOVE TOOLBARBOX;

        PROPERTY(formOk()) {
            caption = 'Провести';
        }
        PROPERTY(sumUserShipmentDetail(s)) { charWidth = 13;}  
        PROPERTY(deleteUserShipmentDetail(s)){focusable = FALSE;}
    }

    @defineDocumentSkuPriceListTypeSystemLedger(userShipment, stock, stockProp);
    @extendFormDocumentSku(userShipment, userShipmentDetail, userShipment, s, sku, stockProp##Stock);
    
    overCopy  ABSTRACT LIST ( UserShipmentDetail, ShipmentDetail);
    overCopy  ABSTRACT LIST ( Shipment, UserShipment);

    copy 'Копировать'(Shipment shipment)  { 
	NEWSESSION {
	        NEW s = UserShipment {
	            supplier(s) <- supplier(shipment);
	            supplierStock(s) <- supplierStock(shipment);
	            customer(s) <- customer(shipment);
	            customerStock(s) <- customerStock(shipment);
	            currency(s) <- currency(shipment);
	            note(s) <- note(shipment);
	
	            overCopy(shipment, s);
	
	            FOR shipment(ShipmentDetail shipmentDetail) == shipment DO {
	                NEW d=UserShipmentDetail {
	                    userShipment(d) <- s;
	                    sku(d) <- sku(shipmentDetail);
	                    quantity(d) <- quantity(shipmentDetail);
	                    price(d) <- price(shipmentDetail);
	                    expiryDate(d) <- expiryDate(shipmentDetail);
	                    manufactureDate(d) <- manufactureDate(shipmentDetail);
	                    
	                    overCopy(d, shipmentDetail);
	                }
	            }
	
	            SHOW userShipment OBJECTS s = s DOCKED NOCANCEL;
	        }
	    }
} TOOLBAR;
    
//-- Копирование строк     
    overCopy  ABSTRACT LIST ( UserShipmentDetail, UserShipmentDetail);

    copy 'Копировать'(UserShipmentDetail detail)  { 
        NEW d = UserShipmentDetail {          

            userShipment(d) <- userShipment(detail);
            sku(d) <- sku(detail);
            quantity(d) <- quantity(detail);
            price(d) <- price(detail);
            expiryDate(d) <- expiryDate(detail);
            manufactureDate(d) <- manufactureDate(detail);
            
            overCopy(d, detail);                              
        }
    } TOOLBAR;
    
    EXTEND FORM userShipment PROPERTIES(d) copy ;
    DESIGN userShipment { PROPERTY(copy(d)) { focusable = FALSE; } }
     
    isUserOpened(UserShipment s)=  isOpened[Shipment](s) AND is(s);
    
    filterShipmentDateFrom 'Дата с' = DATA LOCAL DATE ();
    filterDateFrom (Shipment s) = date(s) >= filterShipmentDateFrom() OR (s IS Shipment AND NOT filterShipmentDateFrom());      
    
    filterShipmentDateTo 'Дата по' = DATA LOCAL DATE ();
    filterDateTo (Shipment s) = date(s) <= filterShipmentDateTo() OR (s IS Shipment AND NOT filterShipmentDateTo());      
    
    filterShipmentCustomer  = DATA LOCAL LegalEntity ();
    nameFilterShipmentCustomer 'Покупатель' = name(filterShipmentCustomer()) CHARWIDTH 15;          
    filterCustomer (Shipment s) = customer(s) == filterShipmentCustomer() OR (s IS Shipment AND NOT filterShipmentCustomer());    

    filterShipmentCustomerStock  = DATA LOCAL Stock ();
    nameFilterShipmentCustomerStock 'Склад покупателя' = name(filterShipmentCustomerStock()) CHARWIDTH 15;          
    filterCustomerStock (Shipment s) = customerStock(s) == filterShipmentCustomerStock() OR (s IS Shipment AND NOT filterShipmentCustomerStock());  

    filterShipmentSupplier = DATA LOCAL LegalEntity ();
    nameFilterShipmentSupplier 'Поставщик' = name(filterShipmentSupplier()) CHARWIDTH 15;          
    filterSupplier (Shipment s) = supplier(s) == filterShipmentSupplier() OR (s IS Shipment AND NOT filterShipmentSupplier());      

    filterShipmentSupplierStock  = DATA LOCAL Stock ();
    nameFilterShipmentSupplierStock 'Склад поставщика' = name(filterShipmentSupplierStock()) CHARWIDTH 15;          
    filterSupplierStock (Shipment s) = supplierStock(s) == filterShipmentSupplierStock() OR (s IS Shipment AND NOT filterShipmentSupplierStock());      

    filterShipmentCustomUser  = DATA LOCAL CustomUser ();
    nameFilterShipmentCustomUser 'Создан пользователем' = name[Contact](filterShipmentCustomUser()) CHARWIDTH 15;          
    filterCustomUser (Shipment i) = createdUser[UserShipment](i) == filterShipmentCustomUser() OR (i IS Shipment AND NOT filterShipmentCustomUser());  

    filterShipmentComputer = DATA LOCAL Computer ();
    nameFilterShipmentComputer 'Создан на компьютере' = hostname(filterShipmentComputer()) CHARWIDTH 15;          
    filterComputer (Shipment i) = createdComputer(i) == filterShipmentComputer() OR (i IS Shipment AND NOT filterOrderComputer());    
    
    overShowEdit = ABSTRACT BOOLEAN (Shipment);
    overShowDelete = ABSTRACT BOOLEAN (Shipment); 
    skipShowEdit = ABSTRACT BOOLEAN (Shipment);
    skipShowDelete = ABSTRACT BOOLEAN (Shipment); 
    
    overShowEdit[Shipment.Shipment](Shipment i) += overShowEdit(i);
    overShowDelete[Shipment.Shipment](Shipment i) += overShowDelete(i);
        
    backgroundDraft 'Цвет' (Shipment s) = RGB(212,255,212) IF isDraft(s); 
    FORM shipments captions 
    
        PROPERTIES() filterShipmentDateFrom, filterShipmentDateTo, nameFilterShipmentSupplier, nameFilterShipmentSupplierStock, 
                     nameFilterShipmentCustomer, nameFilterShipmentCustomerStock, nameFilterShipmentCustomUser, nameFilterShipmentComputer 
    
        OBJECTS s = Shipment LAST
        PROPERTIES (s) READONLYIF isReadonly() isClosed 
        PROPERTIES (s) READONLYIF isReadonly() BACKGROUND backgroundDraft(s) isPosted, number, series, date, time
        PROPERTIES (s) READONLYIF isReadonly() nameSupplier, nameSupplierStock, nameCustomer,
                       nameCustomerStock, nameCurrency
        PROPERTIES (s) READONLY countShipmentDetail, quantityShipmentDetail, sumShipmentDetail
        PROPERTIES (s) READONLYIF isReadonly() note
        PROPERTIES (s) READONLY PANEL createdNameUser[UserShipment], createdTime, createdHostnameComputer, 
                                            postedNameUser, postedTime, postedHostnameComputer

        PROPERTIES (s) NEWSESSION NEW[UserShipment], EDIT SHOWIF overShowEdit(s), deletes = DELETE SHOWIF overShowDelete(s) 
        PROPERTIES (s) copy
        PROPERTIES (s) close[UserShipment] SHOWIF isOpened[UserShipment](s), open SHOWIF isClosed[UserShipment](s)

        OBJECTS d = ShipmentDetail
        PROPERTIES (d) READONLY index, idBarcodeSku, idSku SHOWIF showIDs(), nameSku, shortNameUOMSku
        PROPERTIES (d) READONLY quantity, price, sum, manufactureDate, expiryDate
        ORDERS index(d)
        FILTERS shipment(d) == s
        FILTERS filterDateFrom(s), 
                filterDateTo(s),
                filterSupplier(s),
                filterSupplierStock(s),
                filterCustomer(s),
                filterCustomerStock(s),
                filterCustomUser(s),
                filterComputer(s)                
                
        EVENTS ON INIT {
            IF filterShipmentInterval() THEN
                filterShipmentDateFrom() <- subtract(currentDate(), filterShipmentInterval()); 
        }         
                
        LIST Shipment OBJECT s
    ;

    DESIGN shipments captions###sign {
        NEW documentContainer BEFORE TOOLBARBOX {
            fill = 1;
            type = SPLITV;

            NEW filtersBox {                       
                fill = 1;
                NEW topFilters {
                    caption = 'Фильтры';
                    type = CONTAINERV; 
                    NEW topFilters1 {
                        type = CONTAINERH; 
                        MOVE PROPERTY(filterShipmentDateFrom());
                        MOVE PROPERTY(filterShipmentDateTo());                            
                        MOVE PROPERTY(nameFilterShipmentSupplier());
                        MOVE PROPERTY(nameFilterShipmentSupplierStock());    
                        MOVE PROPERTY(nameFilterShipmentCustomer());
                        MOVE PROPERTY(nameFilterShipmentCustomerStock());                                               
                    }
                    NEW topFilters2 {
                        type = CONTAINERH;  
                        MOVE PROPERTY(nameFilterShipmentCustomUser());
                        MOVE PROPERTY(nameFilterShipmentComputer());                            
                    }            
                }
                MOVE BOX(s) {
                    fill = 1;
                }
            }

            NEW documentDetail {
                fill = 1;
                type = TABBED;

                MOVE BOX(d) {
                    caption = 'Спецификация';
                }
                NEW documentHistory {
                    caption = 'История';

                    MOVE GROUP(created,s);
                    MOVE GROUP(posted,s);
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                    }
                }
                NEW actionContainer {
                    caption = 'Действия';
                    type = CONTAINERH;
                    NEW createdContainer {
                        caption = 'Создание на основе';
                        type = CONTAINERV;
                        MOVE PROPERTY(copy(s)) { caption = 'Поставка'###sign; alignment = STRETCH; }
                    }
                }
            }
        }
    }
    @extendFormEditable(shipments);
    @defineFilterIsOpened (shipment, shipments, s);
    @defineDocumentLogForm(shipments, s);
    @defineDocumentLogBarcode(userShipment, s, specificationBox, userShipment);

    edit(UserShipmentDetail d) + {  DIALOG userShipment OBJECTS s = userShipment(d), d = d DOCKED; }
    
    show 'Просмотреть'  ABSTRACT LIST  ( ShipmentDetail) TOOLBAR;
    show(UserShipmentDetail d)  { 
	NEWSESSION {
	        SHOW userShipment OBJECTS s = userShipment(d), d = d DOCKED READONLY;
	    }
}
    
    show(UserShipmentDetail d) + {  show(d); }          
    
END

META defineShipmentBatch(stockProp)
    @showDocumentInterfaceDetailBatch(shipment);
    @defineDocumentInterfaceDetailBatch(shipment, batch);
    overCopy[UserShipmentDetail,UserShipmentDetail](UserShipmentDetail d, UserShipmentDetail detail) + {       
        batch(d) <- batch(detail);
    } 
    overCopy(UserShipmentDetail d, ShipmentDetail detail) + {       
        batch(d) <- batch(detail);
    }     

    // История по правой кнопке мыши
    @defineBalancesBatch(shipmentDetail); //-- показываем по нажатию правой клавиши остатки партии
    @defineBalancesBatch(userShipmentDetail); //-- показываем по нажатию правой клавиши остатки партии
    @defineMovementBatch(shipmentDetail, stockProp); //-- показываем по нажатию правой клавиши движение по партии
    @defineMovementBatch(userShipmentDetail, stockProp); //-- показываем по нажатию правой клавиши движение по партии

    // Подбор по партиям
    @defineDocumentBatchPriceListTypeSystemLedger(userShipment, stock, supplier);
    @extendFormDocumentBatch(userShipment, userShipment, s);

    replace(Sku s, Batch b) + {  sku(UserShipmentDetail detail) <- s WHERE batch[ShipmentDetail](detail) == b;}
END

META defineShipmentBatchDialogStock(stockProp, dialog)

    changeBatch(UserShipmentDetail userShipmentDetail)  { 
        DIALOG dialogBatchStock##dialog OBJECTS st = stockProp(userShipmentDetail),
                                 t = dateTime(userShipmentDetail),
                                 sk = sku(userShipmentDetail),
                                 bt = batch(userShipmentDetail) INPUT NULL NEWSESSION DO
            batch(userShipmentDetail) <- bt;
    }

    EXTEND FORM userShipment PROPERTIES (d) nameBatch ON CHANGE changeBatch(d) AFTER shortNameUOMSku(d);
    EXTEND FORM shipments PROPERTIES (d) READONLY nameBatch AFTER shortNameUOMSku(d);
END

META defineShipmentBatchDialog(dumb)

    changeBatch(UserShipmentDetail userShipmentDetail)  { 
        DIALOG dialogBatch OBJECTS sk = sku(userShipmentDetail), bt = batch(userShipmentDetail) INPUT NULL NEWSESSION DO
            batch(userShipmentDetail) <- bt;
    }

    EXTEND FORM userShipment PROPERTIES (d) nameBatch ON CHANGE changeBatch(d) AFTER shortNameUOMSku(d);
    EXTEND FORM shipments PROPERTIES (d) READONLY nameBatch AFTER shortNameUOMSku(d);

END

META defineShipmentStockDestination(fromStockProp, toStockProp)
    fromStock(Shipment shipment) += fromStockProp(shipment);
    toStock(Shipment shipment) += toStockProp(shipment);
END