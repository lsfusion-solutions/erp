MODULE NaturalLoss;

REQUIRE NaturalLossDefault;

CLASS Type 'Тип отчета'{
    eu 'Естественная убыль',
    waste 'Технологические отходы'
}

CLASS SubNaturalLossGroupDetail 'Строка группы естественной убыли';
TABLE subNaturalLossGroupDetail(SubNaturalLossGroupDetail);

subNaturalLossGroup = DATA SubNaturalLossGroup (SubNaturalLossGroupDetail) NONULL DELETE;
dayFrom 'День' = DATA INTEGER (SubNaturalLossGroupDetail);
monthFrom = DATA Month (SubNaturalLossGroupDetail);
nameMonthFrom 'Месяц' = staticCaption(monthFrom(SubNaturalLossGroupDetail subNaturalLossGroupDetail));
dayTo 'День' = DATA INTEGER (SubNaturalLossGroupDetail);
monthTo = DATA Month (SubNaturalLossGroupDetail);
nameMonthTo 'Месяц' = staticCaption(monthTo(SubNaturalLossGroupDetail subNaturalLossGroupDetail));
percent '% естественной убыли' = DATA NUMERIC[10,5] (SubNaturalLossGroupDetail);

TABLE subNaturalLossGroupDetailNaturalLossStockType(SubNaturalLossGroupDetail,NaturalLossStockType);
percent '% естественной убыли' = DATA NUMERIC[10,5] (SubNaturalLossGroupDetail,NaturalLossStockType);

overPercent '% естественной убыли' (SubNaturalLossGroupDetail d, Stock st) = OVERRIDE percent(d, naturalLossStockType(st)), percent(d);

dateToNumber(prm1, prm2) = prm2*32 + prm1;
dateToNumberIntersect(prm1, prm2) = prm2*32 + (prm1*12);
inInterval(INTEGER prm1, INTEGER prm2, INTEGER prm3, INTEGER prm4, INTEGER prm5, INTEGER prm6) = (dateToNumber(prm1, prm2) >= dateToNumber(prm3, prm4))
                                               AND (dateToNumber(prm1, prm2) <= dateToNumber(prm5, prm6));

inInterval (DATE date, SubNaturalLossGroupDetail subNaturalLossGroupDetail) =
    inInterval(extractDay(date), extractMonthNumber(date),
    dayFrom(subNaturalLossGroupDetail),
    number(monthFrom(subNaturalLossGroupDetail)),
    dayTo(subNaturalLossGroupDetail),
    number(monthTo(subNaturalLossGroupDetail))) AND date IS DATE;

castInterval (SubNaturalLossGroupDetail subNaturalLossGroupDetail) =
    dayFrom(subNaturalLossGroupDetail) + ' ' +
    nameMonthFrom(subNaturalLossGroupDetail) + ' - ' +
    dayTo(subNaturalLossGroupDetail) + ' ' +
    nameMonthTo(subNaturalLossGroupDetail);

concatDetail (subNaturalLossGroup) =
    GROUP CONCAT STRING[15](percent(SubNaturalLossGroupDetail subNaturalLossGroupDetail)), ','
        ORDER subNaturalLossGroupDetail
        BY subNaturalLossGroup(subNaturalLossGroupDetail)
        CHARWIDTH 10;

in (SubNaturalLossGroup subNaturalLossGroup, SubNaturalLossGroupDetail subNaturalLossGroupDetail) =
 subNaturalLossGroup(subNaturalLossGroupDetail) ==  subNaturalLossGroup;

rateSubNaturalLossGroup 'Норма естественной убыли, %' (Country country, Sku sku) =
    concatDetail(subNaturalLossGroup(country, sku)) IN rate;

inParent(NaturalLossGroup naturalLossGroup, SubNaturalLossGroup subNaturalLossGroup) =
    parent(subNaturalLossGroup ) == naturalLossGroup;


numberFrom (SubNaturalLossGroupDetail subNaturalLossGroupDetail) =
    dateToNumber(dayFrom(subNaturalLossGroupDetail),
    number(monthFrom(subNaturalLossGroupDetail)));

numberTo (SubNaturalLossGroupDetail subNaturalLossGroupDetail) =
    dateToNumber(dayTo(subNaturalLossGroupDetail),
    number(monthTo(subNaturalLossGroupDetail)));

intersect(INTEGER prm1, INTEGER prm2, INTEGER prm3, INTEGER prm4) = (prm4-prm1)*(prm2-prm3) >= 0;

intersect(SubNaturalLossGroupDetail interval1, SubNaturalLossGroupDetail interval2) = intersect(numberFrom(interval1),
                                                    numberTo(interval1),
                                                    numberFrom(interval2),
                                                    numberTo(interval2));

CONSTRAINT intersect(SubNaturalLossGroupDetail interval1, SubNaturalLossGroupDetail interval2) AND interval1 != interval2
        AND subNaturalLossGroup(interval1) == subNaturalLossGroup(interval2)
        CHECKED BY intersect[SubNaturalLossGroupDetail,SubNaturalLossGroupDetail] MESSAGE 'Интервалы не могут пересекаться';

CONSTRAINT dayFrom(SubNaturalLossGroupDetail subNaturalLossGroupDetail) < 1  OR dayFrom(subNaturalLossGroupDetail) > 31
    CHECKED BY dayFrom[SubNaturalLossGroupDetail] MESSAGE 'Задайте корректный день месяца';

CONSTRAINT dayTo(SubNaturalLossGroupDetail subNaturalLossGroupDetail) < 1 OR dayTo(subNaturalLossGroupDetail) > 31
    CHECKED BY dayTo[SubNaturalLossGroupDetail] MESSAGE 'Задайте корректный день месяца';



FORM subNaturalLossGroupDetail 'Строка группы естественной убыли'

    OBJECTS s = SubNaturalLossGroupDetail
    PROPERTIES(s) READONLY dayFrom, nameMonthFrom,
                           dayTo, nameMonthTo, percent

    LIST SubNaturalLossGroupDetail OBJECT s
;


EXTEND FORM naturalLossGroups    
    PROPERTIES(sg) READONLY  nameCountry AFTER name(sg)
    OBJECTS d=SubNaturalLossGroupDetail

    OBJECTS t = NaturalLossStockType
    PROPERTIES(d)  dayFrom, nameMonthFrom,
        dayTo, nameMonthTo,
        percent
    PROPERTIES percent(d,t) COLUMNS (t) HEADER name(t)
    PROPERTIES(d)  NEW, DELETE GRID
    FILTERS in(sg, d)

    
;

//FORM naturalLossGroups 'Справочник норм естественной убыли'
//    OBJECTS c=Country PANEL
//    PROPERTIES(c) name
//    
//    PROPERTIES showAllContries()
//
//    TREE treeNaturalLoss a =BPSTRING[3], n=NaturalLossGroup
//    PROPERTIES READONLY VALUE(a)
//    PROPERTIES READONLY name(n), nameCountry(n)
//    PROPERTIES NEWSESSION NEW(n), deleten=DELETE(n) 
//    ORDERS name(n)
//
//    OBJECTS sg=SubNaturalLossGroup, d=SubNaturalLossGroupDetail
//    PROPERTIES(sg) READONLY name, nameCountry, nameParent,
//                   code
//    PROPERTIES(sg) NEWSESSION EDIT, NEW DRAW sg, deletesg=DELETE
//    OBJECTS t = NaturalLossStockType
//    PROPERTIES(d)  dayFrom, nameMonthFrom,
//                   dayTo, nameMonthTo,
//                   percent
//    PROPERTIES percent(d,t) COLUMNS (t) HEADER name(t)
//    PROPERTIES(d)  NEW, DELETE GRID 
//    FILTERS stringEqualsAll(a), inParentNull(n, sg),  in(sg, d)
//    ORDERS name(sg)
//    
//    FILTERS country(n) == c OR n IS NaturalLossGroup AND (NOT c OR showAllContries()), 
//            country(sg) == c OR sg IS SubNaturalLossGroup AND (NOT c OR showAllContries())
//;

seekDefaultCountryNaturalLoss()  { 
    IF defaultCountry() THEN {
        SEEK naturalLossGroups.c = defaultCountry(); 
    }
}
EXTEND FORM naturalLossGroups
    EVENTS ON INIT seekDefaultCountryNaturalLoss()
;

DESIGN naturalLossGroups {
    firstCase {
        fill = 3;
        firstCaseTab{
            MOVE BOX(d) FIRST;
        }
    }
}

//------------------------------------- Ведомость расчета естественной убыли ----------------------------------//

CLASS NaturalLoss 'Ведомость естественной убыли';
CLASS NaturalLossDetail 'Строка ведомости естественной убыли';

@defineDocument(naturalLoss);
TABLE sessionNaturalLoss(Session, NaturalLoss); 
TABLE sessionNaturalLossDetail(Session, NaturalLossDetail); 

@deriveDocumentHeaderTimePrefix(NaturalLoss, );

@defineDocumentDataStock (naturalLoss, stock, 'Склад', );
@defineDocumentDialogStocks(naturalLoss, stock, company, , );
CONSTRAINT stock(NaturalLoss o) AND NOT isCompany(stock(o))
    CHECKED BY stock[NaturalLoss]
        MESSAGE 'Для ведомости естественной убыли выбран склад, которые не принадлежит компании.';

@defineDocumentPosted(naturalLoss);

@defineDocumentHeaderNumber(NaturalLoss, BPSTRING[2]);
@defineNumeratedDefault(NaturalLoss, 'Естественные убыли', 'ЕУ');

@defineDocumentDetailSku(naturalLoss, sku);
//@defineDocumentDetailSkuItem(naturalLoss);

//@defineDocumentDetailQuantity(naturalLoss){
//    @defineDocumentDetailQuantityPrefix(naturalLoss, , ){
//    @defineDocumentDetailQuantityCustomPrefix(naturalLossDetail, , ){
//    quantityNaturalLossDetail 'Кол-во' = DATA NUMERIC[14,3] (NaturalLossDetail);
//};
//};
//};
quantity 'Кол-во' = DATA NUMERIC[14,4] (NaturalLossDetail);


@defineDocumentHeaderQuantity(naturalLoss);

@defineAddDetailDialogSkuStock(naturalLoss, sku, stock, dialogSku);
@defineAddDetailDialogBarcode(naturalLoss, sku);

//countryNaturalLoss(naturalLoss) = countryLegalEntity(legalEntityStore(storeDepartmentStore(departmentStoreNaturalLoss(naturalLoss))));
country(NaturalLossDetail naturalLossDetail) = country(naturalLoss(naturalLossDetail));

GROUP fillNaturalLoss 'Автоматическое заполнение' : public;
dateFrom 'Дата с' = DATA DATE (NaturalLoss) IN fillNaturalLoss;
dateTo 'Дата по' = DATA DATE (NaturalLoss) IN fillNaturalLoss;

dateFrom 'Дата с' (NaturalLossDetail naturalLossDetail) = dateFrom(naturalLoss(naturalLossDetail));
dateTo 'Дата по' (NaturalLossDetail naturalLossDetail) = dateTo(naturalLoss(naturalLossDetail));

subNaturalLossGroup = DATA SubNaturalLossGroup (NaturalLossDetail);
nameSubNaturalLossGroup 'Группа естественной убыли' =
    name(subNaturalLossGroup(NaturalLossDetail naturalLossDetail));
code 'Код нормы естественной убыли' =
    code(subNaturalLossGroup(NaturalLossDetail naturalLossDetail));

quantityLoss 'Кол-во' = DATA NUMERIC[14,3] (NaturalLossDetail);
quantityLossNaturalLossDetail 'Кол-во (всего)' (naturalLoss) = GROUP SUM quantityLoss(NaturalLossDetail idetail) 
    BY naturalLoss(idetail) IN documentSum MATERIALIZED;
@showDocumentDetailBatch(naturalLoss);
@defineDocumentDetailBatchCustomPrefix(naturalLossDetail, batch, );
quantityLoss(NaturalLossDetail naturalLossDetail) <- shippedQuantity(batch(naturalLossDetail))
    WHEN CHANGED(batch(naturalLossDetail));

@defineDocumentDetailPricePrefix (naturalLoss, , ' учетная ');
@deriveDocumentDetailPriceAccountBatch (naturalLoss, sku, stock);
@defineDocumentHeaderClosed(NaturalLoss);

skipOpen = ABSTRACT BOOLEAN (NaturalLoss);
showClose (NaturalLoss n) = isOpened(n) AND NOT skipClose(n);   
showOpen (NaturalLoss n) = isClosed(n) AND NOT skipOpen(n);

dataType = DATA Type(NaturalLoss);
type (NaturalLoss l) = OVERRIDE dataType(l), Type.eu IF l IS NaturalLoss;
nameType 'Тип отчета' (NaturalLoss l) = staticCaption(type(l)) CHARWIDTH 20 IN documentPrm;
type (NaturalLossDetail l) = type(naturalLoss(l));

overIsEU = ABSTRACT CASE BOOLEAN (NaturalLoss);
isEU (NaturalLoss l) = type(l) == Type.eu;
isWaste(NaturalLoss l) = type(l) == Type.waste;

overIsEU(NaturalLoss l) += WHEN isEU(l) THEN TRUE;

subNaturalDetail = DATA SubNaturalLossGroupDetail(NaturalLossDetail); //NONULL

CONSTRAINT (SET(NaturalLossDetail d IS NaturalLossDetail) OR CHANGED (subNaturalDetail(d)) OR CHANGED (dataType(naturalLoss(d)))) AND type(d) == Type.eu
    AND NOT subNaturalDetail(d) 
    MESSAGE 'Свойство subNaturalDetail [NaturalLoss.subNaturalDetail[NaturalLoss.NaturalLossDetail]] не задано!';

nameSubNaturalDetail 'Период' (NaturalLossDetail naturalLossDetail) =
    castInterval(subNaturalDetail(naturalLossDetail));
captionPercent = ABSTRACT CASE STRING (NaturalLossDetail);
captionPercent(NaturalLossDetail d) += WHEN isEU(naturalLoss(d)) THEN 'Норма естественной убыли, %';

percent 'Норма естественной убыли, %' = DATA NUMERIC[10,3] (NaturalLossDetail);
percent(NaturalLossDetail naturalLossDetail) <- overPercent(subNaturalDetail(naturalLossDetail), stock(naturalLossDetail))
    WHEN CHANGED(subNaturalDetail(naturalLossDetail)) OR
         CHANGED(stock(naturalLossDetail));

castNameSubGroup 'Группа естественной убыли' (NaturalLossDetail naturalLossDetail) =
    nameSubNaturalLossGroup(naturalLossDetail) + ' ' + nameSubNaturalDetail(naturalLossDetail);

CONSTRAINT subNaturalLossGroup(NaturalLossDetail naturalLossDetail) != subNaturalLossGroup(subNaturalDetail(naturalLossDetail))
    CHECKED BY subNaturalDetail[NaturalLossDetail] MESSAGE 'Группа естественной убыли товара должна соответствовать группе периода';

quantity (NaturalLossDetail naturalLossDetail) <- percent(naturalLossDetail) * quantityLoss(naturalLossDetail) /100
    WHEN CHANGED(percent(naturalLossDetail)) OR
         CHANGED(quantityLoss(naturalLossDetail));

quantitySaleDepartment 'Продано' (sku, stock, DATE dateFrom, DATE dateTo, SubNaturalLossGroupDetail subNaturalLossGroupDetail) =
    GROUP SUM quantity(SaleLedger ledger) IF active(ledger) AND date(ledger) >= dateFrom AND date(ledger) <= dateTo
              AND inInterval(date(ledger), subNaturalLossGroupDetail)
              AND subNaturalLossGroup(country(stock(ledger)), sku(ledger)) == subNaturalLossGroup(subNaturalLossGroupDetail)
              BY sku(ledger), stock(ledger);
              
quantitySaleDepartment 'Продано' (sku, stock, DATE dateFrom, DATE dateTo, SubNaturalLossGroupDetail subNaturalLossGroupDetail, price) =
    GROUP SUM quantity(SaleLedger ledger) IF active(ledger) AND date(ledger) >= dateFrom AND date(ledger) <= dateTo
              AND inInterval(date(ledger), subNaturalLossGroupDetail)
              AND subNaturalLossGroup(country(stock(ledger)), sku(ledger)) == subNaturalLossGroup(subNaturalLossGroupDetail)
              BY sku(ledger), stock(ledger), price(ledger);              

sum 'Сумма' (naturalLossDetail) = DATA NUMERIC[18,4] (NaturalLossDetail);
sum (NaturalLossDetail naturalLossDetail) <- price(naturalLossDetail) * quantity(naturalLossDetail)
    WHEN CHANGED(price(naturalLossDetail)) OR
         CHANGED(quantity(naturalLossDetail));

sum 'Сумма' (naturalLoss) = GROUP SUM sum(NaturalLossDetail naturalLossDetail)
    BY naturalLoss(naturalLossDetail) IN documentSum;

overSaleFillDetail  ABSTRACT LIST ( NaturalLoss);
overPurchaseFillDetail  ABSTRACT LIST ( NaturalLoss);

toSaleFillDetail 'Заполнить на основе продаж'(NaturalLoss naturalLoss)  { 
    IF countNaturalLossDetail(naturalLoss) THEN {
        ASK 'Существующие строки будут удалены.' DO
            DELETE NaturalLossDetail d WHERE naturalLoss(d) == naturalLoss;
    }
    type(naturalLoss) <- Type.eu;
    FOR quantitySaleDepartment(  Sku sku,
                                                    stock(naturalLoss),
                                                    dateFrom(naturalLoss),
                                                    dateTo(naturalLoss),
                                                    SubNaturalLossGroupDetail subNaturalLossGroupDetail,
                                                    NUMERIC[16,4] price) > 0 ORDER name(sku), subNaturalLossGroupDetail
          DO {
          NEW d = NaturalLossDetail {
              naturalLoss(d) <- naturalLoss;
              sku(d) <- sku;
              subNaturalLossGroup(d) <- subNaturalLossGroup(country(naturalLoss(d)), sku);
              quantityLoss(d) <- quantitySaleDepartment(
                                                                      sku,
                                                                      stock(naturalLoss),
                                                                      dateFrom(naturalLoss),
                                                                      dateTo(naturalLoss),
                                                                      subNaturalLossGroupDetail,
                                                                      price);
              subNaturalDetail(d) <- subNaturalLossGroupDetail;
              percent(d) <- overPercent(subNaturalLossGroupDetail, stock(naturalLoss));
              quantity (d) <- percent(d) * quantityLoss(d) /100;
              price(d) <- NUMERIC[16,4](price);
          }
    }
    overSaleFillDetail(naturalLoss);
} IN fillNaturalLoss;

//--
skipNatulassLoss = ABSTRACT BOOLEAN (PurchaseLedger);

quantityPurchaseDepartment 'Поступило' (sku, stock, DATE dateFrom, DATE dateTo, SubNaturalLossGroupDetail subNaturalLossGroupDetail) =
    GROUP SUM quantity(PurchaseLedger ledger) IF active(ledger) AND date(ledger) >= dateFrom AND date(ledger) <= dateTo AND NOT skipNatulassLoss(ledger)
              AND inInterval(date(ledger), subNaturalLossGroupDetail)
              AND subNaturalLossGroup(country(stock(ledger)), sku(ledger)) == subNaturalLossGroup(subNaturalLossGroupDetail)
              BY sku(ledger), stock(ledger);
              
toPurchaseFillDetail 'Заполнить на основе поступлений'(NaturalLoss naturalLoss)  { 

    IF countNaturalLossDetail(naturalLoss) THEN {
        ASK 'Существующие строки будут удалены.' DO
            DELETE NaturalLossDetail d WHERE naturalLoss(d) == naturalLoss;
    }
    type(naturalLoss) <- Type.eu;
    FOR quantityPurchaseDepartment( Sku sku,
                                              stock(naturalLoss),
                                              dateFrom(naturalLoss),
                                              dateTo(naturalLoss),
                                              SubNaturalLossGroupDetail subNaturalLossGroupDetail) ORDER name(sku), subNaturalLossGroupDetail
        DO {
        NEW d = NaturalLossDetail {
            naturalLoss(d) <- naturalLoss;
            sku(d) <- sku;
            subNaturalLossGroup(d) <- subNaturalLossGroup(country(naturalLoss(d)), sku);
            quantityLoss(d) <- quantityPurchaseDepartment(
                                                                    sku,
                                                                    stock(naturalLoss),
                                                                    dateFrom(naturalLoss),
                                                                    dateTo(naturalLoss),
                                                                    subNaturalLossGroupDetail);
            subNaturalDetail(d) <- subNaturalLossGroupDetail;
            percent(d) <- overPercent(subNaturalLossGroupDetail, stock(naturalLoss));
            quantity (d) <- percent(d) * quantityLoss(d) /100;
        }
    }
    overPurchaseFillDetail(naturalLoss);
} IN fillNaturalLoss;

backgroundNameSubNaturalLossGroup = ABSTRACT COLOR (NaturalLossDetail);

FORM naturalLoss 'Ведомость естественной убыли'
    OBJECTS s=NaturalLoss PANEL
    PROPERTIES(s) isPosted, nameNumerator, number, series, nameStock ON CHANGE changeStockCompany(s), time,
                  date, dateFrom, dateTo, toSaleFillDetail, toPurchaseFillDetail,
                  quantityNaturalLossDetail, sum, note, nameType READONLY 
    OBJECTS d=NaturalLossDetail
    PROPERTIES(d) index, idBarcodeSku, nameSku, shortNameUOMSku,
                  nameBatch, quantityLoss, nameSubNaturalLossGroup BACKGROUND backgroundNameSubNaturalLossGroup(d) SHOWIF overIsEU(s),
                  code SHOWIF overIsEU(s), nameSubNaturalDetail SHOWIF overIsEU(s), percent HEADER captionPercent(d), quantity, price,
                  sum, nameStock, NEW, DELETE GRID

    PROPERTIES(s) DRAW d addDetailDialogSkuStockNaturalLossDetail,
                           addDetailInputBarcodeNaturalLossDetail, deleteNaturalLossDetail

    FILTERS in(s, d)

    EVENTS
        ON OK prePost(s)

    EDIT NaturalLoss OBJECT s
;

DESIGN naturalLoss {
    BOX {
        size = (1024, 768);
        NEW mainTabbed {
            fill = 1;
            tabbed = TRUE;                       
            NEW documentBox {
                fill = 1;
                caption = 'Ведомость';
 
                NEW headerBox {
                    horizontal = TRUE;
        
                    NEW headerCol1 {
                        fill = 1;
        
                        MOVE GROUP(documentHeader,s) {
                            lines = 1;
                            horizontal = TRUE;
                            MOVE PROPERTY(isPosted(s));
                            MOVE PROPERTY(nameStock(s));
                            MOVE PROPERTY(nameNumerator(s));
                            MOVE PROPERTY(number(s));
                            MOVE PROPERTY(series(s));
                            MOVE PROPERTY(date(s));
                            MOVE PROPERTY(time(s));
                        }
        
                        MOVE GROUP(documentPrm,s) {
                            lines = 2;
                        }
                        MOVE GROUP(fillNaturalLoss,s) {
                            lines = 4;
                        }
                    }
        
                    MOVE GROUP(documentSum,s) {
                        lines = 1;
                    }
                }
                NEW specificationBox {
                    fill = 1;
                    tabbed = TRUE;
                    MOVE BOX(d) {
                        caption = 'Спецификация';
                    }
                }
            }
        }
        MOVE TOOLBARBOX;
        PROPERTY(sum(s)) { charWidth = 13;}

        PROPERTY(formOk()) {
            caption = 'Провести';
        }
    }
}

//-- SKU
@defineDocumentSkuStockPriceListTypeSystemLedger(naturalLoss, );
@extendFormDocumentSkuStock(naturalLoss, naturalLoss, s, legalEntityStock, );

@defineDocumentBatchStockPriceListTypeSystemLedger(naturalLoss, );
@extendFormDocumentBatchStock(naturalLoss, naturalLoss, s, legalEntityStock, );
skipEdit = ABSTRACT VALUE BOOLEAN (NaturalLoss);
skipDelete = ABSTRACT VALUE BOOLEAN (NaturalLoss);

skipEdit(NaturalLoss n) += isClosed(n);
skipDelete(NaturalLoss n) += isClosed(n);

showEdit (NaturalLoss n) = n IS NaturalLoss AND NOT skipEdit(n);
showDelete (NaturalLoss n) = n IS NaturalLoss AND NOT skipDelete(n);
showToShow (NaturalLoss n) =  n IS NaturalLoss AND NOT showEdit(n);

show 'Просмотреть' (NaturalLoss i)   { 
    NEWSESSION{
        SHOW naturalLoss OBJECTS s = i DOCKED READONLY;
    }
    
}TOOLBAR;
        
filterNaturalLossDateFrom 'Дата с' = DATA LOCAL DATE ();
filterDateFrom (NaturalLoss n) = date(n) >= filterNaturalLossDateFrom() OR (n IS NaturalLoss AND NOT filterNaturalLossDateFrom());      

filterNaturalLossDateTo 'Дата по' = DATA LOCAL DATE ();
filterDateTo (NaturalLoss n) = date(n) <= filterNaturalLossDateTo() OR (n IS NaturalLoss AND NOT filterNaturalLossDateTo());      

filterNaturalLossDateFromPeriod 'Дата с' = DATA LOCAL DATE ();
filterDateFromPeriod (NaturalLoss n) = dateTo(n) >= filterNaturalLossDateFromPeriod() OR (n IS NaturalLoss AND NOT filterNaturalLossDateFromPeriod());      

filterNaturalLossDateToPeriod 'Дата по' = DATA LOCAL DATE ();
filterDateToPeriod (NaturalLoss n) = dateFrom(n) <= filterNaturalLossDateToPeriod() OR (n IS NaturalLoss AND NOT filterNaturalLossDateToPeriod());      

idStock 'Код склада' (NaturalLoss n) = id(stock(n));

FORM naturalLosses 'Ведомости естественной убыли'
    PROPERTIES () filterNaturalLossDateFrom, filterNaturalLossDateTo, filterNaturalLossDateFromPeriod, filterNaturalLossDateToPeriod
    OBJECTS s=NaturalLoss
    PROPERTIES(s) READONLYIF isReadonly() isClosed, isPosted,number, series, date, time,
                           idStock SHOWIF showIDs(), nameStock, dateFrom, dateTo,
                           quantityNaturalLossDetail, sum, note, nameType
    PROPERTIES (s) close SHOWIF showClose(s), open SHOWIF showOpen(s)
    PROPERTIES(s) NEWSESSION NEW, EDIT SHOWIF showEdit(s), show SHOWIF showToShow(s),  deletes=DELETE SHOWIF showDelete(s)
    PROPERTIES(s) READONLYIF isReadonly() PANEL createdNameUser, createdTime, createdHostnameComputer, 
                                 postedNameUser, postedTime, postedHostnameComputer
    FILTERS filterDateFrom(s), filterDateTo(s), filterDateFromPeriod(s), filterDateToPeriod(s)
    FILTERGROUP open FILTER 'Открыт' isOpened(s) 'F6' DEFAULT 
    
    OBJECTS d=NaturalLossDetail
    PROPERTIES(d) READONLYIF isReadonly() index, idBarcodeSku, nameSku, shortNameUOMSku,
                           nameBatch, quantityLoss,
                           nameSubNaturalLossGroup SHOWIF overIsEU(s), code SHOWIF overIsEU(s), nameSubNaturalDetail SHOWIF overIsEU(s),
                           percent HEADER captionPercent(d), quantity, price, sum, nameStock

    FILTERS in(s, d)
;
@extendFormFilterAccessStock(NaturalLoss, s, naturalLosses, stock, company);
@extendFormEditable(naturalLosses);

DESIGN naturalLosses {
    PANEL {
        NEW dates {
            horizontal = TRUE;
            caption = 'Дата документа';
            MOVE PROPERTY (filterNaturalLossDateFrom());
            MOVE PROPERTY (filterNaturalLossDateTo());
        }
        NEW datesPeriod {
            horizontal = TRUE;
            caption = 'Период действия';
            MOVE PROPERTY (filterNaturalLossDateFromPeriod());
            MOVE PROPERTY (filterNaturalLossDateToPeriod());
        }
    }
    NEW documentContainer BEFORE TOOLBARBOX {
        fill = 1;

        MOVE BOX(s) { fill = 2; }

        NEW documentDetail {
            fill = 1;
            tabbed = TRUE;

            MOVE BOX(d) {
                caption = 'Спецификация';
            }
            NEW documentHistory {
                caption = 'История';

                MOVE GROUP(created,s);
                MOVE GROUP(posted,s);
            }
            NEW printTab {
                caption = 'Печатные формы';
                NEW printContainer {
                    caption = 'Печать';
                }
            }
        }
    }
}

NAVIGATOR {
    naturalLossNavigator {
        NEW naturalLosses;
        NEW naturalLossGroups;
    }
}

//------------------- Справочник норм естественной убыли----------------------------//

loadDefaultNaturalLossGroup 'Добавить нормы естественной убыли' (BPSTRING[3] idCountry, ISTRING[250] string)  { 
    NEW cg = NaturalLossGroup {
         name(cg) <- string;
         country(cg) <- country(idCountry);
    }
}

loadDefaultSubNaturalLossGroup 'Добавить нормы естественной убыли' (BPSTRING[3] idCountry, ISTRING[250] string, ISTRING[250] stringOne, BPSTRING[5] stringTwo, NUMERIC[10,5] numeric)  { 
    NEW g = SubNaturalLossGroup {
        parent(g) <- naturalLossGroup(string);
        name(g) <-  stringOne;
        country(g) <- country(idCountry);
        code(g) <- stringTwo;

        NEW d = SubNaturalLossGroupDetail {
            subNaturalLossGroup(d) <- g;
            percent(d) <- numeric;
            dayFrom(d) <- 1;
            monthFrom(d) <- Month.january;
            dayTo(d) <- 31;
            monthTo(d) <- Month.december;
        }
    }
}

//-- Для сезонов
overLoadDefaultSubNaturalLossGroup 'Добавить нормы естественной убыли' (BPSTRING[3] idCountry, ISTRING[250] string, ISTRING[250] stringOne, BPSTRING[5] stringTwo)  { 
    NEW g = SubNaturalLossGroup {
        parent(g) <- naturalLossGroup(string);
        name(g) <-  stringOne;
        country(g) <- country(idCountry);
        code(g) <- stringTwo;
    }
}

overLoadDefaultSubNaturalLossGroupDetail 'Добавить нормы естественной убыли' (BPSTRING[5] id, NUMERIC[10,5] numeric, INTEGER dayFrom, INTEGER monthFrom, INTEGER dayTo, INTEGER monthTo)  { 
    NEW d = SubNaturalLossGroupDetail {
        subNaturalLossGroup(d) <- subNaturalLossGroupId(id);
        percent(d) <- numeric;
        dayFrom(d) <- dayFrom;
        monthFrom(d) <-month(monthFrom);
        dayTo(d) <- dayTo;
        monthTo(d) <- month(monthTo);
    }
}

loadDefaultNaturalLossGroups 'Загрузить стандартные группы естественной убыли'  ABSTRACT LIST ( ) IN loadDefault;

@implementLoadDefaultData(loadDefaultNaturalLossGroups);

FORM printNaturalLossDefault 'Ведомость естественной убыли'
    OBJECTS s=NaturalLoss PANEL SUBREPORT
    PROPERTIES(s) READONLY SELECTOR number, series, fullNameStock, time,
        date, dateFrom, dateTo, addressStock,
        quantityNaturalLossDetail, sum, note
    OBJECTS d=NaturalLossDetail
    PROPERTIES(d) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku,
        nameBatch, quantityLoss, nameSubNaturalLossGroup,
        code, nameSubNaturalDetail, percent, quantity,
        price, sum

    FILTERS in(s, d)
;

printDefault 'Ведомость естественной убыли' (NaturalLoss naturalLoss)  { PRINT printNaturalLossDefault OBJECTS s = naturalLoss; }   IMAGE 'print.png' IN print;
printDefaultXlsx 'Ведомость естественной убыли (XLSX)' (NaturalLoss naturalLoss)  { PRINT printNaturalLossDefault OBJECTS s = naturalLoss   XLSX; } IMAGE 'print.png' IN print;

skipPrint = ABSTRACT VALUE BOOLEAN (NaturalLoss);
EXTEND FORM naturalLosses
    PROPERTIES(s)  SHOWIF NOT skipPrint(s) printDefault, printDefaultXlsx
;

DESIGN naturalLosses {
    printTab {
        MOVE GROUP(print,s);
    }
}