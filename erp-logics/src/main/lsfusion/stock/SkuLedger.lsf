MODULE SkuLedger;

REQUIRE Stock, Sku, EmployeeStock, Document;

NAMESPACE Stock;

// ----------------------------------- Ledger ------------------------------------------ //

CLASS ABSTRACT COMPLEX SkuLedger 'Изменение остатка по товару';
TABLE skuLedger (SkuLedger) FULL;

CLASS ABSTRACT InSkuLedger 'Приход' : SkuLedger;
CLASS ABSTRACT OutSkuLedger 'Расход' : SkuLedger;

CLASS ABSTRACT Batch 'Партия' : InSkuLedger;

CLASS ABSTRACT DataSkuLedger 'Изменение остатка с первичной себестоимостью' : SkuLedger;

CLASS ABSTRACT InLIFOSkuLedger 'Приход по LIFO' : InSkuLedger, DataSkuLedger;
CLASS ABSTRACT OutFIFOSkuLedger 'Расход по FIFO' : OutSkuLedger, DataSkuLedger;

show 'Просмотреть'  ABSTRACT MULTI ( SkuLedger) TOOLBAR CHANGEMOUSE 'DBLCLK';
replace  ABSTRACT LIST ( Sku, Batch);
beforeReplace  ABSTRACT LIST ( Sku, Batch);
// --------------------------------- Партии ------------------------------------------------ //

TABLE batch(Batch);
TABLE skuLedgerBatch (SkuLedger, Batch);
TABLE batchStock(Batch, Stock);

dateTime 'Дата/время' (batch) = ABSTRACT DATETIME (Batch) MATERIALIZED INDEXED;
date 'Дата' (Batch batch) = toDate(dateTime(batch));
time 'Время' (Batch batch) = toTime(dateTime(batch));
prevDateTime (Batch b) = PREV(dateTime(b));

isPosted 'Проведен' (batch) = ABSTRACT BOOLEAN (Batch) MATERIALIZED;

isClosed 'Закрыт' (batch) = ABSTRACT BOOLEAN (Batch);

sku (batch) = ABSTRACT Sku (Batch) MATERIALIZED INDEXED;
prevSku (Batch b) = PREV(sku(b));
idSku 'Код товара' = id(sku(Batch b)) IN id;
nameSku 'Наименование' (Batch batch) = name(sku(batch)) IN id;

// Наименование для документов
overDocumentNameSku = ABSTRACT ISTRING[255] (Batch) MATERIALIZED;
documentNameSku 'Наименование (для документов)' (Batch batch) = OVERRIDE overDocumentNameSku(batch), nameSku(batch);

useDocumentNameSku 'Использовать наименование для документов' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES() useDocumentNameSku
;

DESIGN options {
    pane {
        stock1 {
            MOVE PROPERTY(useDocumentNameSku());
        }
    }
}

lastBatch (sku) = GROUP LAST Batch batch
    ORDER dateTime(batch), batch
    WHERE dateTime(batch) 
    BY sku(batch);

netWeightSku 'Вес нетто' (Batch batch) = netWeight(sku(batch));
grossWeightSku 'Вес брутто' (Batch batch) = grossWeight(sku(batch));
prevNameSku 'Наименование' (Batch batch) = prevName(sku(batch)) IN id;
activeSku 'Активные' (Batch batch) = active(sku(batch));

UOM(Batch batch)= UOM(sku(batch));
shortNameUOM 'Единица измерений' (Batch batch)= shortNameUOM(sku(batch));

country (Batch batch) = country(sku(batch));
sidOrigin2Country (Batch batch) = sidOrigin2(country(batch));

stock (batch) = ABSTRACT Stock (Batch) MATERIALIZED INDEXED ;
nameStock 'Склад' (Batch batch) = name(stock(batch));

cost 'Себестоимость' (batch) = ABSTRACT NUMERIC[16,4] (Batch) MATERIALIZED;
prevCost 'Себестоимость' (Batch batch) = PREV(cost(batch));

description 'Описание' (batch) = ABSTRACT ISTRING[200] (Batch) IN id CHARWIDTH 30;

expiryDate 'Годен до' (batch) = ABSTRACT DATE (Batch) MATERIALIZED INDEXED;
prevExpiryDate 'Годен до' (Batch batch) = PREV(expiryDate(batch));

manufactureDate 'Дата изготовления' (batch) = ABSTRACT DATE (Batch) MATERIALIZED INDEXED;
prevManufactureDate 'Дата изготовления' (Batch batch) = PREV(manufactureDate(batch));

number 'Номер документа' = ABSTRACT STRING[48] (Batch) CHARWIDTH 8 MATERIALIZED;
series 'Серия документа' = ABSTRACT BPSTRING[2] (Batch) CHARWIDTH 3 NOFLEX MATERIALIZED;
seriesNumber 'Серия/Номер' (Batch o) = CONCAT '', series(o), number(o) CHARWIDTH 7;
    
supplier = ABSTRACT LegalEntity (Batch) MATERIALIZED;
prevSupplier (Batch batch) = PREV(supplier(batch));

INDEX supplier(Batch b), sku(b);

nameSupplier 'Поставщик' (Batch batch) = name(supplier(batch));
fullNameSupplier 'Поставщик' (Batch batch) = fullName(supplier(batch));
idSupplier 'Код поставщика' (Batch batch) = id(supplier(batch));

name 'Название' (Batch batch) = ISTRING[200](CONCAT '/ ', BPSTRING[10](date(batch)), seriesNumber(batch), fullNameSupplier(batch)) CHARWIDTH 20;

supplierStock = ABSTRACT Stock (Batch) MATERIALIZED;
nameSupplierStock 'Склад поставщика' (Batch batch) = name(supplierStock(batch));
idSupplierStock 'Код склада поставщика' (Batch batch) = id(supplierStock(batch));
prevSupplierStock (Batch batch) = PREV(supplierStock(batch));

INDEX supplierStock(Batch b), sku(b);

id 'Код' = ABSTRACT STRING[100] (Batch) MATERIALIZED INDEXED CHARWIDTH 10 IN id;
batch = GROUP MAX Batch b BY id(b);

@defineOption(disableUniqueIdBatch, 'Не контролировать уникальность кодов партий', stock1);
CONSTRAINT SETCHANGED(id(Batch b)) AND [ GROUP SUM 1 BY id(Batch bb)](id(b)) > 1 AND NOT disableUniqueIdBatch() MESSAGE 'Нарушена уникальность свойства Код партии';

expires(Batch batch, DATETIME dateTime, LONG period) = expiryDate(batch) < sum(toDate(dateTime), period);
expires(Batch batch, DATE date, LONG period) = expiryDate(batch) < sum(date, period);

isBatch (Batch batch, Sku sku) = sku(batch) == sku;

isParent (SkuGroup skuGroup, Batch batch) = isParent(skuGroup, sku(batch));
isParent (Group group, Batch batch) = isParent(group, sku(batch));

isItem 'Товар' = isItem(sku(Batch bt));
isContainer 'Тара' = isContainer(sku(Batch bt));

isNotItem 'Не товар' = isNotItem(sku(Batch bt));
isNotContainer 'Не тара' = isNotContainer(sku(Batch bt));

batch = ABSTRACT Batch (SkuLedger) MATERIALIZED INDEXED;
nameBatch 'Партия' (SkuLedger l) = name(batch(l));

//---------------------------- Количественные регистры (конкретная реализация) ----------------------------------------//

dateTime 'Дата/время' = ABSTRACT DATETIME (DataSkuLedger);

isPosted 'Проведен' = ABSTRACT BOOLEAN (DataSkuLedger);

isClosed 'Закрыт' = ABSTRACT BOOLEAN (DataSkuLedger);

sku = ABSTRACT Sku (DataSkuLedger);

stock = ABSTRACT Stock(DataSkuLedger);

description 'Название документа' = ABSTRACT ISTRING[200] (DataSkuLedger);

changed = ABSTRACT BOOLEAN (DataSkuLedger);

// -------------------------------- Для всего ledger'а -------------------- //

dateTime 'Дата/время' (SkuLedger ledger) = MULTI dateTime[DataSkuLedger] (ledger), dateTime[Batch] (ledger) MATERIALIZED INDEXED IN id;
date 'Дата' (SkuLedger ledger) = toDate(dateTime(ledger)) MATERIALIZED INDEXED;

isPosted 'Проведен' (SkuLedger ledger) = MULTI isPosted[DataSkuLedger] (ledger), isPosted[Batch] (ledger) MATERIALIZED;

isClosed 'Закрыт' (SkuLedger ledger) = MULTI isClosed[DataSkuLedger] (ledger), isClosed[Batch] (ledger);

sku (SkuLedger ledger) = MULTI sku[DataSkuLedger] (ledger), sku[Batch] (ledger) MATERIALIZED;
idSku 'ИД Sku' (SkuLedger ledger) = id(sku(ledger)) IN id;
nameSku 'SKU' (SkuLedger ledger) = name(sku(ledger)) IN id;

INDEX sku(SkuLedger l), dateTime(l), l;

canonicalNameSkuGroup 'Группа' (SkuLedger ledger) = canonicalName[Group](skuGroup(sku(ledger)));

countSkuLedger = GROUP SUM 1 BY sku(SkuLedger ledger);

stock (SkuLedger ledger) = MULTI stock[DataSkuLedger] (ledger), stock[Batch] (ledger) MATERIALIZED;
nameStock 'Склад' (SkuLedger ledger) = name(stock(ledger)) IN id;
isCompanyStock (SkuLedger ledger) = isCompany(stock(ledger));
idStock (SkuLedger ledger) = id(stock(ledger));

INDEX stock(SkuLedger l), sku(l), dateTime(l), l;

TABLE descriptionSkuLedger(SkuLedger);
description 'Описание' (SkuLedger ledger) = MULTI description[DataSkuLedger] (ledger), description[Batch] (ledger) MATERIALIZED TABLE descriptionSkuLedger CHARWIDTH 30 IN id;

isItem 'Товар' = isItem(sku(SkuLedger l));
isContainer 'Тара' = isContainer(sku(SkuLedger l));

isNotItem 'Не товар' = isNotItem(sku(SkuLedger l));
isNotContainer 'Не тара' = isNotContainer(sku(SkuLedger l));

// -------------------------------- Количества ---------------------------- //

quantity 'Кол-во в партии' = ABSTRACT NUMERIC[16,5] (Batch) MATERIALIZED;

extraShippedQuantity = ABSTRACT NUMERIC[16,5] (Batch);
shippedQuantity 'Кол-во в партии (всего)' (Batch batch) = quantity(batch) (+) extraShippedQuantity(batch) MATERIALIZED;

quantity 'Кол-во' (ledger) = ABSTRACT NUMERIC[16,5] (InLIFOSkuLedger);

quantity 'Кол-во' (InSkuLedger ledger) = MULTI quantity[Batch](ledger),
                                              quantity[InLIFOSkuLedger](ledger);

quantity 'Кол-во' = ABSTRACT NUMERIC[16,5] (OutFIFOSkuLedger);

quantity 'Кол-во' (SkuLedger ledger) = MULTI quantity[InSkuLedger](ledger),
                                            quantity[OutFIFOSkuLedger](ledger) MATERIALIZED;

signedQuantity 'Кол-во' (SkuLedger ledger) = MULTI quantity[InSkuLedger](ledger),
                                                  -quantity[OutFIFOSkuLedger](ledger) CHARWIDTH 7 MATERIALIZED;

// -------------------------------------------- Расчет себестоимости -------------------------------------- //

explicitBatchLedger 'Обязательный партионный учет' = ABSTRACT BOOLEAN (Stock) MATERIALIZED PREREAD IN bookkeeping;
skipExplicitBatch 'Разрешить регистр без партии' = ABSTRACT BOOLEAN (SkuLedger);
CONSTRAINT explicitBatchLedger(stock(SkuLedger l)) AND isPosted(l) AND NOT batch(l) AND NOT skuType(sku(l))== SkuType.skuTypeCharge AND NOT skipExplicitBatch(l)
    MESSAGE 'Не выбрана партия для строки движения товара';
    
showPriceBatchLedger(Stock s) = isCompany(s) AND NOT explicitBatchLedger(s);   
dataPriceBatchLedger 'Использовать свои цены для каждой партии' = ABSTRACT BOOLEAN (Stock);
priceBatchLedger 'Использовать свои цены для каждой партии' (Stock s) = dataPriceBatchLedger(s) OR explicitBatchLedger(s) MATERIALIZED;  

//order (DataSkuLedger ledger) = STRUCT(dateTime(ledger), ledger);

// Свойства для расчета себестоимости
quantity 'Кол-во' (Batch ledger, Batch batch) = quantity(ledger) IF batch == ledger;

cost 'Расписано из партии (перв.)' (ledger, batch) = DATA NUMERIC[16,5] (DataSkuLedger, Batch);

cost 'Расписано из партии' (SkuLedger ledger, Batch batch) = MULTI quantity[Batch,Batch](ledger, batch),
                                                                 cost[DataSkuLedger,Batch](ledger, batch) MATERIALIZED;

maxBatchCost 'Последняя партия, из которой расписано' (SkuLedger ledger) = GROUP MAX Batch batch IF  cost(ledger, batch);
countBatchCost 'Кол-во партий' (SkuLedger ledger) = GROUP SUM 1 IF cost(ledger, Batch batch);


signedCost (SkuLedger ledger, Batch batch) = IF ledger IS OutSkuLedger
                                              THEN -cost(ledger, batch)
                                              ELSE cost(ledger, batch);

// Расчет себестоимости по Action
//costed 'Расписано' (ledger) = GROUP SUM cost (DataSkuLedger ledger, Batch batch) BY ledger MATERIALIZED;
costed 'Расписано' (SkuLedger ledger) = GROUP SUM cost (ledger, Batch batch) MATERIALIZED;
notCosted 'Не расписано' (SkuLedger ledger) = quantity(ledger) (-) costed(ledger);
signedNotCosted 'Не расписано' (SkuLedger ledger) = IF ledger IS OutSkuLedger THEN
                                                                        quantity(ledger) (-) costed(ledger)
                                                                    ELSE
                                                                        costed(ledger) (-) quantity(ledger);

// Суммы

costSum 'Сумма поставщика без НДС' (SkuLedger ledger, Batch batch) = NUMERIC[16,3](cost(ledger, batch) * cost(batch));
costSum 'Сумма поставщика без НДС' (SkuLedger ledger) = GROUP SUM costSum(ledger, Batch batch);

// ---------------------------- Учетные цены и суммы ------------------------------- //

// сумма операции
sum 'Сумма' (ledger) = ABSTRACT NUMERIC[18,4] (InSkuLedger);
sum 'Сумма' (ledger) = ABSTRACT NUMERIC[18,4] (OutSkuLedger);

sum 'Сумма' = MULTI sum[InSkuLedger](SkuLedger ledger),
                             sum[OutSkuLedger](ledger) MATERIALIZED;
                              
signedSum 'Сумма' (SkuLedger ledger) = MULTI sum[InSkuLedger](ledger),
                                            -sum[OutSkuLedger](ledger) CHARWIDTH 9 MATERIALIZED;
                                            
signedPrice 'Цена' (SkuLedger ledger)= NUMERIC[18,4](signedSum(ledger) / signedQuantity(ledger)) CHARWIDTH 7;                                            

// ---------------------------- Остаток по товару -------------------------------- //

TABLE skuStock(Sku, Stock);
TABLE sessionSkuStock(Session, Sku, Stock);

TABLE extraSkuStock(Sku, Stock);
TABLE skuStockDate(Sku, Stock, DATE);
TABLE batchStockDate(Batch, Stock, DATE);

TABLE skuGroupStock(SkuGroup, Stock);
TABLE sessionSkuGroupStock (Session, SkuGroup, Stock);

TABLE skuStockGroup(Sku, StockGroup);

META defineSkuLedgerBalanceProperties(postfix, caption)
    skip 'Не проводить по учету'###caption = ABSTRACT BOOLEAN (SkuLedger) MATERIALIZED;
    active 'Активен'###caption (SkuLedger ledger) = isPosted(ledger) AND NOT skip(ledger) MATERIALIZED;

    signedQuantityActive(SkuLedger ledger) = signedQuantity(ledger) IF active(ledger) MATERIALIZED;

    currentBalance 'Текущий остаток'###caption (sku, stock) =
        GROUP SUM signedQuantityActive(SkuLedger ledger) BY sku(ledger), stock(ledger) CHARWIDTH 7 MATERIALIZED;
    prevCurrentBalance 'Текущий остаток'###caption (Sku sku, Stock stock) = PREV(currentBalance(sku, stock)) CHARWIDTH 7;
    prevCurrentBalance 'Текущий остаток'###caption(Sku sku)  = GROUP SUM prevCurrentBalance(sku, Stock stock) CHARWIDTH 7;
    countLedger 'Кол-во движений'###caption (sku, stock) =
        GROUP SUM 1 IF signedQuantityActive(SkuLedger ledger) BY sku(ledger), stock(ledger) MATERIALIZED TABLE extraSkuStock;

    quantityInActive(InSkuLedger ledger) = quantity(ledger) IF active(ledger);
    quantityIn (sku, stock, date) =
        GROUP SUM quantityInActive(InSkuLedger ledger) BY sku(ledger), stock(ledger), date(ledger) MATERIALIZED;

    quantityOutActive(OutFIFOSkuLedger ledger) = quantity(ledger) IF active(ledger);
    quantityOut (sku, stock, date) =
        GROUP SUM quantityOutActive(OutFIFOSkuLedger ledger) BY sku[SkuLedger](ledger), stock[SkuLedger](ledger), date[SkuLedger](ledger) MATERIALIZED;

    quantity (Sku sku, Stock stock, DATE date) = quantityIn(sku, stock, date)
                                                         (+)
                                                         quantityOut(sku, stock, date) MATERIALIZED;

    signedQuantity (Sku sku, Stock stock, DATE date) = quantityIn(sku, stock, date)
                                                               (-)
                                                               quantityOut(sku, stock, date) MATERIALIZED;

    quantitySumIn 'Кол-во товара пришедшего за период'(Sku sku, Stock stock, DATE date1, DATE date2)  =
        GROUP
        SUM quantityIn(sku, stock, DATE dateIn) IF dateIn>=date1 IF dateIn<=date2;
    quantitySumIn 'Кол-во товара пришедшего за период'(Group group, Stock stock, DATE date1, DATE date2)  =
        GROUP
        SUM quantitySumIn(Sku sku, stock, date1, date2) IF isParent(group, sku);

    quantitySumOut 'Кол-во товара ушедшего за период'(Sku sku, Stock stock, DATE date1, DATE date2)  =
        GROUP
        SUM quantityOut(sku, stock, DATE dateIn) IF dateIn>=date1 IF dateIn<=date2;
    quantitySumOut 'Кол-во товара ушедшего за период'(Group group, Stock stock, DATE date1, DATE date2)  =
        GROUP
        SUM quantitySumOut (Sku sku, stock, date1, date2) IF isParent(group, sku);

    // без учета текущей даты/времени
    balanceB 'Остаток на начало дня'###caption (Sku sku, Stock stock, DATE date) = currentBalance(sku, stock)
                                                                      (-) (GROUP
                                                                                 SUM signedQuantity (sku, stock, DATE dateIn) IF dateIn >= date) CHARWIDTH 7;

    // с учетом текущей даты/времени
    balanceA 'Остаток на конец дня'###caption (Sku sku, Stock stock, DATE date) = currentBalance(sku, stock)
                                                                     (-) (GROUP
                                                                                SUM signedQuantity (sku, stock, DATE dateIn) IF dateIn > date) CHARWIDTH 7;

    // без учета текущей даты/времени
    balanceB 'Остаток (до)'###caption (Sku sku, Stock stock, DATETIME dateTime) = currentBalance(sku, stock)
                                                                              (-) [ GROUP SUM signedQuantityActive(SkuLedger ledger) IF dateTime(ledger) >= dateTime
                                                                                         BY sku(ledger), stock(ledger)](sku, stock) CHARWIDTH 7;
    prevBalanceB 'Остаток (до)'###caption (Sku sku, Stock stock, DATETIME dateTime) = PREV(balanceB(sku, stock, dateTime) IF dateTime IS DATETIME);

    // с учетом текущей даты/времени
    balanceA 'Остаток (после)'###caption (Sku sku, Stock stock, DATETIME dateTime) = currentBalance(sku, stock)
                                                                             (-) [ GROUP SUM signedQuantityActive(SkuLedger ledger) IF dateTime(ledger) > dateTime
                                                                                        BY sku(ledger), stock(ledger)](sku, stock) CHARWIDTH 7;
    prevBalanceA 'Остаток (после)'###caption (Sku sku, Stock stock, DATETIME dateTime) = PREV(balanceA(sku, stock, dateTime) IF dateTime IS DATETIME);

    balanceA 'Остаток (после)'###caption (Group group,  stock, DATETIME dateTime) =
        GROUP SUM balanceA (Sku sku, Stock sstock, dateTime) IF isParent(group, sku)
        BY stock(SkuLedger ledger);
        
    balanceB 'Остаток на начало дня'(Stock stock, DATE date)  = GROUP SUM balanceB(Sku sku, stock, date);

    currentBalance 'Остаток (всего)'###caption(Sku sku)  = GROUP SUM currentBalance(sku, Stock stock);

    signedQuantityActive(SkuLedger ledger, Batch batch) = signedCost(ledger, batch) IF active(ledger) MATERIALIZED;
    
    signedActiveCostSum 'Себестоимость' (SkuLedger ledger, Batch batch) = NUMERIC[16,4](signedQuantityActive(ledger, batch) * cost(batch));
    signedActiveCostSum 'Себестоимость' (SkuLedger ledger) = GROUP SUM signedActiveCostSum(ledger, Batch batch);
    
    currentBalance 'Текущий остаток'###caption (Batch batch, stock) = GROUP SUM signedQuantityActive(SkuLedger ledger, batch)
                                                                                           BY stock(ledger) MATERIALIZED;
    negativeBalance (Batch batch, Stock stock) = currentBalance(batch, stock) < 0;
    
    skuCurrentBalance (Batch batch, Stock stock) = sku(batch) IF currentBalance(batch, stock) MATERIALIZED;
    prevSkuCurrentBalance (Batch batch, Stock stock) = PREV(skuCurrentBalance(batch, stock));
    INDEX skuCurrentBalance(Batch batch, Stock stock), stock;
    prevCurrentBalance 'Текущий остаток'###caption (Batch batch, Stock stock) = PREV(currentBalance(batch, stock));
    prevCurrentBalance 'Текущий остаток'###caption(Batch batch)  = GROUP SUM prevCurrentBalance(batch, Stock stock);    

    countBatch 'Кол-во партий' (sku, Stock stock) = GROUP SUM 1  BY skuCurrentBalance (Batch batch, stock);
    
    defaultBatch 'Партия по умолчанию' (sku, Stock stock)= GROUP MIN Batch batch BY skuCurrentBalance(batch, stock);
    
    countPositiveBatch 'Кол-во партий' (sku, Stock stock) = GROUP SUM 1  IF currentBalance(Batch batch, stock) >0
                                                                 BY skuCurrentBalance(batch, stock);
    defaultPositiveBatch 'Партия по умолчанию' (sku, Stock stock)= GROUP MIN Batch batch IF currentBalance(batch, stock) >0
                                                                        BY skuCurrentBalance(batch, stock);

    TABLE extraBatchStock(Batch, Stock);
    countLedger 'Кол-во движений'###caption (Batch batch, stock) =
        GROUP SUM 1 IF signedQuantityActive(SkuLedger ledger, batch) BY stock(ledger) MATERIALIZED TABLE extraBatchStock;
    prevCountLedger 'Кол-во движений'###caption (Batch b, Stock s) = PREV(countLedger(b, s));

    countLedger 'Кол-во движений'###caption (Batch b, Stock s, DATETIME dt) = 
        GROUP SUM 1 IF signedQuantityActive(SkuLedger ledger, b) AND dateTime(ledger) < dt BY stock(ledger);
    prevCountLedger 'Кол-во движений'###caption (Batch b, Stock s, DATETIME dt) = PREV(countLedger(b, s, dt));
            
    skuLedger (Batch batch, Stock stock) = sku(batch) IF countLedger(batch, stock) MATERIALIZED TABLE extraBatchStock;
    prevSkuLedger (Batch batch, Stock stock) = PREV(skuLedger(batch, stock));
    dateTime 'Дата/время' (Batch batch, Stock stock) = dateTime(batch) IF countLedger(batch, stock) MATERIALIZED TABLE extraBatchStock;
    prevDateTime 'Дата/время' (Batch b, Stock s) = PREV(dateTime(b, s));
    INDEX skuLedger (Batch batch, Stock stock), stock, dateTime(batch, stock), batch;

    countLedger 'Кол-во движений за период'###caption (Batch batch, stock, DATE dateFrom, DATE dateTo) =
        GROUP SUM 1 IF signedQuantityActive(SkuLedger ledger, batch) AND date(ledger) >= dateFrom AND date(ledger) <= dateTo AND sku(ledger) = sku(batch)
        BY stock(ledger);
        
    lastOrderBatch(sku, Stock stock)  =
        GROUP LAST Batch batch
              ORDER dateTime(batch, stock), batch
              BY skuLedger(batch, stock) MATERIALIZED INDEXED TABLE extraSkuStock;
              
              
    lastOrderBatchA(sku, Stock stock, DATE date)  =
        GROUP LAST Batch batch
              ORDER dateTime(batch, stock), batch
              WHERE dateTime(batch, stock) < DATETIME(sum(date,1))
              BY skuLedger(batch, stock);   
                         
    lastOrderBatchA(sku, Stock stock, DATETIME dateTimeIn)  =
        GROUP LAST Batch batch
              ORDER dateTime(batch, stock), batch
              WHERE dateTime(batch, stock) <= dateTimeIn
              BY skuLedger(batch, stock);
    prevLastOrderBatchA(Sku sk, Stock st, DATETIME dt) = PREV(lastOrderBatchA(sk, st, dt));
               
    lastOrderBatchB(sku, Stock stock, DATE date)  =
        GROUP LAST Batch batch
              ORDER dateTime(batch, stock), batch
              WHERE dateTime(batch, stock) < DATETIME(date)
              BY skuLedger(batch, stock);   
    prevLastOrderBatchB(Sku sk, Stock st, DATE dt) = PREV(lastOrderBatchB(sk, st, dt));   
                         
    lastOrderBatchB(sku, Stock stock, DATETIME dateTimeIn)  =
        GROUP LAST Batch batch
              ORDER dateTime(batch, stock), batch
              WHERE dateTime(batch, stock) < dateTimeIn
              BY skuLedger(batch, stock);              
    prevLastOrderBatchB(Sku sk, Stock st, DATETIME dt) = PREV(lastOrderBatchB(sk, st, dt));   
               
              
//    orderBatch##postfix##SkuStock (sku, stock) = GROUP MAX orderBatch(batch) IF countLedger##postfix##BatchStock(batch, stock)
//                                                       BY skuBatch(batch), stock MATERIALIZED;
//    lastOrderBatch##postfix##SkuStock(sku, stock) = orderBatch##postfix##SkuStock(sku, stock)[2] MATERIALIZED;
    prevLastOrderBatch(Sku sku, Stock stock) = PREV(lastOrderBatch(sku, stock));
    dateTimeLastOrderBatch 'Время последней партии' (Sku sku, Stock stock) = dateTime(lastOrderBatch(sku, stock));
    prevDateTimeLastOrderBatch 'Время последней партии' (Sku sku, Stock stock) = prevDateTime(lastOrderBatch(sku, stock));
    supplierLastOrderBatch (Sku sku, Stock stock) = supplier(lastOrderBatch(sku, stock));
    prevSupplierLastOrderBatch (Sku sku, Stock stock) = PREV(supplier(lastOrderBatch(sku, stock)));
    nameSupplierLastOrderBatch 'Поставщик последней партии' (Sku sku, Stock stock) = nameSupplier(lastOrderBatch(sku, stock));
    supplierStockLastOrderBatch (Sku sku, Stock stock) = supplierStock(lastOrderBatch(sku, stock));
    
    lastBatchManufactureDate 'Дата изготовления последней партии' (Sku sku, Stock stock) = manufactureDate(lastOrderBatch(sku, stock));
    lastBatchExpiryDate 'Срок годности последней партии' (Sku sku, Stock stock) = expiryDate(lastOrderBatch(sku, stock));

    batchLastManufactureDate (sku, Stock stock)  =
        GROUP LAST manufactureDate(Batch batch)
              ORDER dateTime(batch, stock), batch
              WHERE manufactureDate(batch)
              BY skuLedger(batch, stock) COMPLEX;
              
    batchLastExpiryDate (sku, Stock stock)  =
        GROUP LAST expiryDate(Batch batch)
              ORDER dateTime(batch, stock), batch
              WHERE expiryDate(batch)
              BY skuLedger(batch, stock) COMPLEX;    
    
    useFillBatchProperty 'Использовать последние: срок годности, дату и время изготовления' = DATA BOOLEAN () PREREAD;
    EXTEND FORM options
        PROPERTIES() useFillBatchProperty
    ;
    DESIGN options {
        stock1 {
            MOVE PROPERTY(useFillBatchProperty());
        }
    }
    lastManufactureDate 'Дата изготовления' (Sku sku, Stock stock) = IF useFillBatchProperty() 
        THEN batchLastManufactureDate(sku, stock)
        ELSE manufactureDate(lastOrderBatch(sku, stock));
    lastExpiryDate 'Срок годности (дата)' (Sku sku, Stock stock) = IF useFillBatchProperty()
        THEN batchLastExpiryDate(sku, stock)
        ELSE expiryDate(lastOrderBatch(sku, stock));    
    
    lastOrderBatch(Sku sku)  = GROUP MAX lastOrderBatch(sku, Stock stock);

    supplierLastOrderBatch (Sku sku) = supplier(lastOrderBatch(sku));
    prevSupplierLastOrderBatch (Sku sku) = PREV(supplierLastOrderBatch (sku));

    nameSupplierLastOrderBatch 'Поставщик (поставка)' (Sku sku) = name(supplierLastOrderBatch(sku)); 

    currentBalance 'Остаток (всего)'###caption(Batch batch)  = GROUP SUM currentBalance(batch, Stock stock);
    outcome 'Расходовано'###caption (Batch batch) = MAX shippedQuantity(batch) (-) currentBalance(batch), 0;

    balanceA 'Остаток (после)' (SkuLedger ledger) = balanceA(sku(ledger), stock(ledger), dateTime(ledger));
    balanceB 'Остаток (до)' (SkuLedger ledger) = balanceB(sku(ledger), stock(ledger), dateTime(ledger));
    // ---------------------------- Суммы по товару -------------------------------- //

    signedSumActive(SkuLedger ledger) = signedSum(ledger) IF isPosted(ledger) AND NOT skip(ledger) MATERIALIZED;
    currentSum 'Сумма остатка'###caption (sku, stock) =
        GROUP SUM signedSumActive(SkuLedger ledger) BY sku(ledger), stock(ledger) CHARWIDTH 9 MATERIALIZED;
    prevCurrentSum 'Сумма остатка'###caption (Sku sk, Stock st) = PREV(currentSum(sk, st));
    //-- по дате
    sumInActive(InSkuLedger ledger) = sum(ledger) IF active(ledger);
    sumIn (sku, stock, date) =
        GROUP SUM sumInActive(InSkuLedger ledger) BY sku(ledger), stock(ledger), date(ledger) MATERIALIZED;

    sumOutActive(OutSkuLedger ledger)  = sum(ledger) IF active(ledger);
    sumOut (sku, stock, date) =
        GROUP SUM sumOutActive(OutSkuLedger ledger) BY sku(ledger), stock(ledger), date(ledger) MATERIALIZED;

    signedSum (Sku sku, Stock stock, DATE date) = sumIn(sku, stock, date)
                                                               (-)
                                                               sumOut(sku, stock, date) MATERIALIZED;

    // без учета текущей даты/времени
    sumB 'Сумма на начало дня'###caption (Sku sku, Stock stock, DATE date) = currentSum(sku, stock)
                                                                      (-) (GROUP
                                                                                 SUM signedSum (sku, stock, DATE dateIn) IF dateIn >= date) CHARWIDTH 9;

    sumB 'Сумма на начало дня'(Stock stock, DATE date)  = GROUP SUM sumB(Sku sku, stock, date);

    sumBSku 'Сумма на начало дня (по группе)' (group, Stock stock, DATE date) =
        GROUP SUM sumB (Sku sku, stock, date)
        BY group(GroupType groupType, sku);

    sumRecBSku 'Сумма на начало дня (всего)'(Group group, Stock stock, DATE date)  =
        GROUP
        SUM sumB (Sku sku, stock, date) IF isParent(group, sku);

    // с учетом текущей даты/времени
    sumA 'Сумма на конец дня'###caption (Sku sku, Stock stock, DATE date) = currentSum(sku, stock)
                                                                     (-) (GROUP
                                                                                SUM signedSum (sku, stock, DATE dateIn) IF dateIn > date) CHARWIDTH 9;

    sumASku 'Сумма на конец дня (по группе)' (group, Stock stock, DATE date) =
        GROUP SUM sumA (Sku sku, stock, date)
        BY group(GroupType groupType, sku);

    sumRecASku 'Сумма на конец дня (всего)'(Group group, Stock stock, DATE date)  =
        GROUP
        SUM sumA (Sku sku, stock, date) IF isParent(group, sku);

    // без учета текущей даты/времени
    sumB 'Сумма (до)'###caption (Sku sku, Stock stock, DATETIME dateTime) = currentSum(sku, stock)
                                                                     (-) [ GROUP SUM signedSumActive(SkuLedger ledger) IF dateTime(ledger) >= dateTime
                                                                                BY sku(ledger), stock(ledger)](sku, stock) CHARWIDTH 9;
    //-- использовать только при условии explicitBatchLedger для склада                                                                            
    sumB 'Сумма (до)'###caption (Batch batch, Stock stock, DATETIME dateTime) = GROUP SUM signedSumActive(SkuLedger ledger) IF dateTime(ledger) < dateTime
                                                                                    BY batch(ledger), stock(ledger) CHARWIDTH 9;
                                                                                       
                                                                                       
    sumRecBSku 'Учетная сумма (всего)'(Group group, Stock stock, DATETIME dateTime)  =
        GROUP
        SUM sumB (Sku sku, stock, dateTime) IF isParent(group, sku);
        
    // с учетом текущей даты/времени
    sumA 'Сумма (после)'###caption (Sku sku, Stock stock, DATETIME dateTime) = currentSum(sku, stock)
                                                                     (-) [ GROUP SUM signedSumActive(SkuLedger ledger) IF dateTime(ledger) > dateTime
                                                                                BY sku(ledger), stock(ledger)](sku, stock) CHARWIDTH 9;

    sumA 'Сумма (после)' (SkuLedger ledger) = sumA(sku(ledger), stock(ledger), dateTime(ledger));
    sumB 'Сумма (до)' (SkuLedger ledger) = sumB(sku(ledger), stock(ledger), dateTime(ledger));

    priceA 'Цена (после)' (SkuLedger ledger) = sumA(ledger) / balanceA(ledger) CHARWIDTH 7;
    priceB 'Цена (до)' (SkuLedger ledger) = sumB(ledger) / balanceB(ledger) CHARWIDTH 7;
    
    // суммы для периодов
    sumIn 'Сумма товара пришедшего за период'(Sku sku, Stock stock, DATE dateFrom, DATE dateTo)  =
        GROUP
               SUM sumIn(sku, stock, DATE dateIn) IF dateIn >= dateFrom AND dateIn <= dateTo;
    sumInSku 'Сумма товара пришедшего за период(по группе)' (group, Stock stock, DATE dateFrom, DATE dateTo) =
        GROUP SUM sumIn (Sku sku, stock, dateFrom, dateTo)
        BY group(GroupType groupType, sku);
    sumRecInSku 'Сумма товара пришедшего за период(всего)'(Group group, Stock stock, DATE dateFrom, DATE dateTo)  =
        GROUP
        SUM sumIn (Sku sku, stock, dateFrom, dateTo) IF isParent(group, sku);

    sumOut 'Сумма товара ушедшего за период'(Sku sku, Stock stock, DATE dateFrom, DATE dateTo)  =
        GROUP
               SUM sumOut(sku, stock, DATE dateOut) IF dateOut >= dateFrom AND dateOut <= dateTo;
    sumOutSku 'Сумма товара ушедшего за период(по группе)' (group, Stock stock, DATE dateFrom, DATE dateTo) =
        GROUP SUM sumOut (Sku sku, stock, dateFrom, dateTo)
        BY group(GroupType groupType, sku);
    sumRecOutSku 'Сумма товара ушедшего за период(всего)'(Group group, Stock stock, DATE dateFrom, DATE dateTo)  =
        GROUP
        SUM sumOut (Sku sku, stock, dateFrom, dateTo) IF isParent(group, sku);

    averagePrice 'Цена (средневзв.)'###caption (Sku sku, Stock stock) = currentSum(sku, stock) / currentBalance(sku, stock) CHARWIDTH 7; // IF NOT currentBalance##postfix##SkuStock(sku, stock) == 0; (возможно не нужно, так как 0 не может быть в GROUP SUM )
    averagePriceA 'Цена (средневзв.)'###caption (Sku sku, Stock stock, DATETIME dateTime) = sumA(sku, stock, dateTime) / balanceA(sku, stock, dateTime) CHARWIDTH 7; // IF NOT currentBalance##postfix##SkuStock(sku, stock) == 0; (возможно не нужно, так как 0 не может быть в GROUP SUM )
    prevAveragePriceA 'Цена (средневзв.)'###caption (Sku sku, Stock stock, DATETIME dateTime) = PREV(averagePriceA(sku, stock, dateTime)) CHARWIDTH 7;
    averagePriceB 'Цена (средневзв.)'###caption (Sku sku, Stock stock, DATETIME dateTime) = sumB(sku, stock, dateTime) / balanceB(sku, stock, dateTime) CHARWIDTH 7; // IF NOT currentBalance##postfix##SkuStock(sku, stock) == 0; (возможно не нужно, так как 0 не может быть в GROUP SUM )
    prevAveragePriceB 'Цена (средневзв.)'###caption (Sku sku, Stock stock, DATETIME dateTime) = PREV(averagePriceB(sku, stock, dateTime)) CHARWIDTH 7;
END

@defineSkuLedgerBalanceProperties(,);

skipShowEdit = ABSTRACT BOOLEAN (SkuLedger);
allowedEdit (SkuLedger d) = (NOT isClosed(d) OR allowedEditClosedDocuments(currentUser())) AND NOT skipShowEdit(d);
allowedShow  (SkuLedger d) = d IS SkuLedger AND NOT allowedEdit(d);
// -------------------------------------- Последнее движение ---------------------------------- //

dateTimeLastMoved 'Время последнего движения' (sku, stock) =
    GROUP LAST dateTime(SkuLedger ledger)
    ORDER dateTime(ledger), ledger
    WHERE active(ledger)
    BY sku(ledger), stock(ledger) MATERIALIZED TABLE extraSkuStock;

dateTimeLastMoved 'Время последнего движения' (sku) =
    GROUP LAST dateTime(SkuLedger ledger)
    ORDER dateTime(ledger), ledger
    WHERE active(ledger)
    BY sku(ledger);

dateTimeLastMoved 'Время последнего движения'  =
    GROUP LAST dateTime(SkuLedger ledger)
    ORDER dateTime(ledger), ledger
    WHERE active(ledger) AND dateTime(ledger)< (DATETIME dateTime AS DATETIME)
    BY sku(ledger),stock(ledger),dateTime;

moved (Sku item, Stock departmentStore, DATETIME dateTime, LONG period) =
    dateTimeLastMoved(item, departmentStore) >= toDateTime(subtract(toDate(dateTime), period));

balance (Sku item, Stock departmentStore, DATETIME dateTime, LONG period) =
    moved (item, departmentStore, dateTime, period) OR balanceB(item, departmentStore, dateTime);

moved (Sku item, Stock departmentStore, DATE date, LONG period) =
    dateTimeLastMoved(item, departmentStore) >= toDateTime(subtract(date, period));

balance (Sku item, Stock departmentStore, DATE date, LONG period) =
    moved (item, departmentStore, date, period) OR balanceA(item, departmentStore, date);

currentBalance (Sku item, Stock departmentStore, LONG period) =
    moved (item, departmentStore, currentDate(), period) OR currentBalance(item, departmentStore);

//----------------------------------------- По партиям ---------------------------------------------//

signedQuantity = GROUP SUM signedCost (SkuLedger ledger, Batch batch) IF isPosted(ledger)
                                     BY batch, stock(ledger), date(ledger) MATERIALIZED; 
                                     
// без учета текущей даты/времени
balanceB 'Остаток на начало дня' (Batch batch, Stock stock, DATE date) = currentBalance(batch, stock)
    (-) (GROUP
           SUM signedQuantity(batch, stock, DATE dateIn) IF dateIn >= date);

// с учетом текущей даты/времени
balanceA 'Остаток на конец дня' (Batch batch, Stock stock, DATE date) = currentBalance(batch, stock)
    (-) (GROUP
           SUM signedQuantity(batch, stock, DATE dateIn) IF dateIn > date);

// без учета текущей даты/времени
balanceB 'Остаток (до)' (Batch batch, Stock stock, DATETIME dateTime) = currentBalance(batch, stock)
    (-) [ GROUP SUM signedQuantityActive (SkuLedger ledger, batch) IF dateTime(ledger) >= dateTime AND sku(ledger) = sku(batch)
    BY stock(ledger)](stock);
prevBalanceB 'Остаток (до)' (Batch batch, Stock stock, DATETIME dateTime) = PREV(balanceB(batch,stock,dateTime) IF dateTime IS DATETIME);

// с учетом текущей даты/времени
balanceA 'Остаток (после)' (Batch batch, Stock stock, DATETIME dateTime) = currentBalance(batch, stock)
    (-) [ GROUP SUM signedQuantityActive (SkuLedger ledger, batch) IF dateTime(ledger) > dateTime AND sku(ledger) = sku(batch)
    BY stock(ledger)](stock);

// Остатки по себестоимости
costB 'Себестоимость на начало дня' (Batch batch, Stock stock, DATE date) = balanceB(batch, stock, date) * cost(batch);
  
costA 'Себестоимость на конец дня' (Batch batch, Stock stock, DATE dateTo) = balanceA(batch, stock, dateTo) * cost(batch);          

// Итоги по складам
costB 'Себестоимость на начало дня' (Stock s, DATE d) = GROUP SUM costB(Batch b, s, d);
costA 'Себестоимость на конец дня' (Stock s, DATE d) = GROUP SUM costA(Batch b, s, d);

//---------------------------------------------- За период ------------------------------------------//

costInBalance 'Приход' (Batch batch, stock, DATE dateFrom, DATE dateTo) = GROUP SUM cost (InSkuLedger ledger, batch)
    IF ledger IS InSkuLedger AND isPosted(ledger)
    AND date(ledger) >= dateFrom AND date(ledger)<= dateTo
    BY stock(ledger);

costSumInBalance 'Сумма прихода' (Batch batch, Stock stock, DATE dateFrom, DATE dateTo) =
    cost(batch) * costInBalance(batch, stock, dateFrom, dateTo);

costOutBalance 'Расход' (Batch batch, stock, DATE dateFrom, DATE dateTo) = GROUP SUM cost (OutSkuLedger ledger, batch)
    IF ledger IS OutSkuLedger AND isPosted(ledger)
    AND date(ledger) >= dateFrom AND date(ledger)<= dateTo
    BY stock(ledger);

costSumOutBalance 'Сумма расхода' (Batch batch, Stock stock, DATE dateFrom, DATE dateTo) =
    cost(batch) * costOutBalance(batch, stock, dateFrom, dateTo);
    
//---------------------------------------------- Себестоимость ------------------------------------------//    
    
currentCostSum 'Текущая себестоимость' (sku, stock) =
    GROUP SUM signedActiveCostSum(SkuLedger ledger) BY sku(ledger), stock(ledger);
    
// без учета текущей даты/времени
costSumB 'Себестоимость на начало дня' (sku, Stock stock, DATE date) = GROUP SUM costB(Batch batch, stock, date) BY sku(batch);

// с учетом текущей даты/времени
costSumA 'Себестоимость на конец дня' (sku, Stock stock, DATE date) = GROUP SUM costA(Batch batch, stock, date) BY sku(batch); 

// ------------------------------------------------ Формы для партий ------------------------------ //
FORM batches 'Партии'

    TREE skuTree sk = SkuGroup PARENT parent(sk)
    PROPERTIES READONLY order(sk), skuTreeName = name(sk)
    ORDERS order(sk), skuTreeName
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F6' DEFAULT

    OBJECTS           bt=Batch
    PROPERTIES(bt)    READONLY number, series, dateTime, nameSupplier, nameSku, id SHOWIF showIDs(), 
                               name, nameStock, shippedQuantity, cost, expiryDate, currentBalance
    PROPERTIES(bt)    EDIT SHOWIF allowedEdit(bt) NEWSESSION, show SHOWIF allowedShow(bt)
    FILTERS           isParent(sk, bt)
    ORDERS          dateTime(bt)

    FILTERGROUP filterBalance
        FILTER 'Партии пришедшие за последний 1 день' date(bt) >= subtract(currentDate(), 1) 'F10'
        FILTER 'Партии пришедшие за последние 7 дней' date(bt) >= subtract(currentDate(), 7) 'F9'
        FILTER 'Партии пришедшие за последние 30 дней' date(bt) >= subtract(currentDate(), 30) 'F8'

    FILTERGROUP filterExpiry
        FILTER 'Партии с истекшим сроком годности' expiryDate(bt) < currentDate() 'F7'
        FILTER 'Партии со сроком годности, истекающим через 1 день' expires(bt, currentDate(), 1) 'F6'
        FILTER 'Партии со сроком годности, истекающим через 7 дней' expires(bt, currentDate(), 7) 'F6'
        FILTER 'Партии со сроком годности, истекающим через 30 дней' expires(bt, currentDate(), 30) 'F4'

    LIST Batch OBJECT bt
;

DESIGN batches {
    BOX {
        size = (1024, 768);

        NEW topContainer {
            fill = 1;
            type = SPLITH;
            MOVE BOX(TREE skuTree) { caption = 'Группы'; }
            MOVE BOX(bt) { fill = 3; caption = 'Партии'; }
        }
        MOVE TOOLBARBOX;
    }
}
@extendFormFilterAccessStock(Batch, bt, batches, stock, company);

FORM dialogBatch 'Партии'
    OBJECTS sk = Sku PANEL

    OBJECTS bt = Batch
    PROPERTIES (bt) READONLY number, series, dateTime, nameSupplier, nameStock,
                    nameSku, name, id SHOWIF showIDs(), shippedQuantity, cost, expiryDate
    FILTERS sku(bt) == sk

    ORDERS dateTime(bt)
;

FORM dialogBatchStockOut 'Партии (расход)'
    OBJECTS st = Stock PANEL
    OBJECTS t = DATETIME PANEL
    OBJECTS sk = Sku PANEL

    OBJECTS bt = Batch
    PROPERTIES (bt) READONLY number, series, dateTime, nameSupplier, nameSku, id SHOWIF showIDs(), name, shippedQuantity, cost, expiryDate
    PROPERTIES  READONLY balanceB(bt, st, t)
    PROPERTIES  READONLY currentBalance(bt, st)
    FILTERS sku(bt) == sk
    ORDERS dateTime(bt)
    
    FILTERGROUP ledger
        FILTER 'С движением по складу' skuLedger(bt, st) == sk 'F6' DEFAULT 
    
    FILTERGROUP batch
        FILTER 'Партии с остатком до операции' balanceB(bt, st, t) 'F11'
        FILTER 'Партии с положительным остатком' currentBalance(bt, st) > 0 'F9'
        FILTER 'Партии с остатком' skuCurrentBalance(bt, st) == sk 'F8' DEFAULT
;
DESIGN dialogBatchStockOut {
    BOX {
        PROPERTY (balanceB(bt,st,t)) {
            caption = 'Остаток до операции';
        }
    }
}

FORM dialogBatchStockIn 'Партии (приход)'
    OBJECTS st = Stock PANEL
    OBJECTS t = DATETIME PANEL
    OBJECTS sk = Sku PANEL

    OBJECTS bt = Batch
    PROPERTIES (bt) READONLY number, series
    PROPERTIES      READONLY dateTime(bt, st) 
    PROPERTIES (bt) READONLY nameSupplier, nameSku, id SHOWIF showIDs(), name, shippedQuantity, cost, expiryDate
    PROPERTIES  READONLY balanceB(bt, st, t)
    PROPERTIES  READONLY currentBalance(bt, st)
    FILTERS sku(bt) == sk
    ORDERS dateTime(bt, st)
    
    FILTERGROUP ledger
        FILTER 'С движением по складу' skuLedger(bt, st) == sk 'F6' 
    
    FILTERGROUP batch
        FILTER 'Партии с остатком до операции' balanceB(bt, st, t) 'F11'
        FILTER 'Партии с положительным остатком' currentBalance(bt, st) > 0 'F9'
        FILTER 'Партии с остатком' skuCurrentBalance(bt, st) == sk 'F8'
;
DESIGN dialogBatchStockIn {
    BOX {
        PROPERTY (balanceB(bt,st,t)) {
            caption = 'Остаток до операции';
        }
    }
}

// ------------------------------------------------- Себестоимость --------------------------- //

// Расчет себестоимости

TABLE notCostedSkuLedger (SkuLedger);
needToCost 'Требуется расчет себестоимости' (SkuLedger ledger) = signedQuantityActive(ledger)
                                                                        AND quantity(ledger) != (OVERRIDE costed(ledger), 0.0) MATERIALIZED TABLE notCostedSkuLedger;

order = ABSTRACT LONG (InLIFOSkuLedger, Batch);
limitNew = IF InLIFOSkuLedger ledger IS InLIFOSkuLedger THEN (
                                                     IF batch(ledger) THEN
                                                        quantity[SkuLedger](ledger) IF Batch batch == batch(ledger)
                                                     ELSE
                                                        outcome(batch) IF
                                                        skuLedger(batch, stock[SkuLedger](ledger)) == sku[SkuLedger](ledger));

quantity (InLIFOSkuLedger ledger, Batch batch) =
        PARTITION UNGROUP quantity[SkuLedger]
                  LIMIT STRICT limitNew(ledger, batch)
                  ORDER DESC order(ledger, batch), dateTime(batch), batch
                  BY ledger;

order = ABSTRACT LONG (OutFIFOSkuLedger, Batch);
reserve = ABSTRACT NUMERIC[16,5] (Batch, OutFIFOSkuLedger); 
limitNew = IF OutFIFOSkuLedger ledger IS OutFIFOSkuLedger THEN (
                                                     IF batch(ledger) THEN
                                                        quantity[SkuLedger](ledger) IF Batch batch == batch(ledger)
                                                     ELSE
                                                        OVERRIDE ((currentBalance(batch, stock[SkuLedger](ledger)) - OVERRIDE reserve(batch, ledger), 0.0 ) IF skuCurrentBalance(batch, stock[SkuLedger](ledger)) == sku[SkuLedger](ledger)), 
                                                                 0.0 IF batch == lastOrderBatch(sku[SkuLedger](ledger), stock[SkuLedger](ledger))); 
//                                                               0.0 IF skuLedger(batch, stock[SkuLedger](ledger)) == sku[SkuLedger](ledger));

quantity (OutFIFOSkuLedger ledger, Batch batch) =
        PARTITION UNGROUP quantity[SkuLedger]
                  LIMIT STRICT limitNew(ledger, batch)
                  ORDER order(ledger, batch), dateTime(batch), batch
                  BY ledger;

quantity (DataSkuLedger ledger, Batch batch) = MULTI quantity[InLIFOSkuLedger,Batch](ledger, batch) (+) 0, // (+) 0 делается, чтобы все 0 стали NULL 
                                                   quantity[OutFIFOSkuLedger,Batch](ledger, batch);

changedSession = DATA LOCAL BOOLEAN (DataSkuLedger);

it = DATA LOCAL BOOLEAN (DataSkuLedger);
overCostSkuLedgerBatch  ABSTRACT ( ); 

updateDataSkuLedgerBatchCost()  { 
    cost(DataSkuLedger ledger, Batch batch) <- NULL WHERE changedSession(ledger);

    LOCAL ordered = INTEGER (DataSkuLedger);
    ordered(DataSkuLedger ledger) <- PARTITION SUM 1 IF changedSession(ledger) ORDER dateTime[SkuLedger](ledger), ledger BY sku[SkuLedger](ledger);

    FOR iterate(INTEGER i, 1, (GROUP MAX ordered(DataSkuLedger ledger))) DO {
        it(DataSkuLedger ledger) <- ordered(ledger) == i; // чтобы определились классы
        
        overCostSkuLedgerBatch();
        
        cost(DataSkuLedger ledger, Batch batch) <- quantity(ledger, batch) WHERE it(ledger);
    }
}

ON { // eventChangeLedger - так как внутрь рекурсивного события толь
    LOCAL eventChanged = BOOLEAN (DataSkuLedger); 
    eventChanged(DataSkuLedger ledger) <- SET(isPosted[SkuLedger](ledger)) OR ((
                                  CHANGED(quantity(ledger))
                                  OR CHANGED(sku[SkuLedger](ledger))
                                  OR CHANGED(batch(ledger))
                                  OR CHANGED(stock[SkuLedger](ledger))
                                  OR CHANGED(changed(ledger)))
                                 AND isPosted[SkuLedger](ledger));

    IF (GROUP MAX eventChanged(DataSkuLedger ledger)) THEN
        NEWSESSION NESTED (eventChanged[DataSkuLedger]) SINGLE {
            changedSession(DataSkuLedger ledger) <- eventChanged(ledger);
            updateDataSkuLedgerBatchCost();
        }
}

// Сбрасываем расписывание, если изменился sku у партии
WHEN SETCHANGED(sku(Batch b)) AND PREV(sku(b)) DO
    cost(SkuLedger l, b) <- NULL;

resetCost 'Перерассчитать себестоимость'(DataSkuLedger ledger)  { //NEWSESSION AUTOAPPLY {
    changedSession(DataSkuLedger l) <- NULL;
    changedSession(ledger) <- TRUE;
    updateDataSkuLedgerBatchCost();
}

setDataSkuLedgerBatchCost 'Дорассчитать себестоимость'()  { 
	NEWSESSION {
	    APPLY SINGLE { 
	        changedSession(DataSkuLedger ledger) <- needToCost(ledger);
	        updateDataSkuLedgerBatchCost();
	    }
	}
} CONFIRM;

resetDataSkuLedgerBatchCost 'Перерассчитать себестоимость'()  { 
	NEWSESSION {
	    DIALOG dialogDate OBJECTS d INPUT DO
	        APPLY SINGLE { 
	            changedSession(DataSkuLedger ledger) <- date[SkuLedger](ledger) >= d AND isPosted[SkuLedger](ledger);
	            updateDataSkuLedgerBatchCost();
	        }
	}
} CONFIRM;

clearDataSkuLedgerBatchCost 'Сбросить всю себестоимость'()  { 
	NEWSESSION {
	    cost(DataSkuLedger ledger, Batch batch) <- NULL;
	    apply();
	}
} CONFIRM;

currentBalance 'Текущий остаток' (SkuLedger bil, Batch bt) = currentBalance(bt, stock(bil));
countLedger 'Кол-во движений' (SkuLedger bil, Batch bt) = countLedger(bt, stock(bil));

FORM costSkuLedger 'Себестоимость (операции)'
    OBJECTS dates = (dFrom = DATE, dTo = DATE) PANEL
    PROPERTIES dFrom = VALUE(dFrom), dTo = VALUE(dTo)

    OBJECTS bil = SkuLedger
    PROPERTIES(bil) READONLY dateTime, date, description, idSku, nameSku, nameStock, countBatchCost,
                             quantity, costed, sum
    PROPERTIES(bil)          resetCost GRID
    PROPERTIES(bil)          EDIT SHOWIF allowedEdit(bil) NEWSESSION, show SHOWIF allowedShow(bil)
    FILTERS active(bil), dateTime(bil) >= DATETIME(dFrom), dateTime(bil) < DATETIME(sum(dTo,1)) 
    ORDERS dateTime(bil)

    FILTERGROUP needToCostDataSkuLedger
        FILTER 'Нерасписанные строки' needToCost(bil) 'F9'

    OBJECTS bt = Batch
    PROPERTIES(bt) READONLY number, series, dateTime, nameSupplier, name, shippedQuantity, cost, currentBalance
    PROPERTIES(bil, bt)   cost, currentBalance, countLedger
    FILTERS sku(bt) == sku(bil)
    ORDERS dateTime(bt) DESC

    FILTERGROUP inSkuLedgerBatch
        FILTER 'Только расписанные партии' cost (bil, bt) 'F10' DEFAULT

    FILTERGROUP currentBalance
        FILTER 'Только партии с остатком на складе' currentBalance (bil, bt) 'F11'

    PROPERTIES() setDataSkuLedgerBatchCost, resetDataSkuLedgerBatchCost, clearDataSkuLedgerBatchCost
;

DESIGN costSkuLedger {
    NEW filterContainer {
        type = CONTAINERH;
        MOVE PROPERTY(dFrom);
        MOVE PROPERTY(dTo);
    }
    NEW topContainer{
        fill = 1;
        type = SPLITV;

        MOVE BOX(bil);
        MOVE BOX(bt);
    }

    NEW buttonContainer {
        type = CONTAINERH;
        MOVE PROPERTY(setDataSkuLedgerBatchCost());
        MOVE PROPERTY(resetDataSkuLedgerBatchCost());
        MOVE PROPERTY(clearDataSkuLedgerBatchCost());
    }

    MOVE TOOLBARBOX;
}
@extendFormFilterAccessStock(SkuLedger, bil, costSkuLedger, stock, company);

FORM costSkuBatchLedger 'Себестоимость (партии)'
    OBJECTS i = Sku PANEL
    PROPERTIES(i) SELECTOR name//, idBarcodeSku

    OBJECTS bt = Batch
    PROPERTIES(bt) READONLY number, series, dateTime, nameSupplier, nameStock, name, shippedQuantity, cost, currentBalance

    OBJECTS bil = SkuLedger
    PROPERTIES(bil) READONLY dateTime, description, nameStock,
                             quantity, costed
//    PROPERTIES(bil)          resetCostSkuLedger
    ORDERS dateTime(bil)

    FILTERGROUP needToCostSkuLedger
        FILTER 'Нерасписанные строки' needToCost(bil) 'F9'


    PROPERTIES(bil, bt)     READONLY cost 
    FILTERS sku(bt) == i,
            sku(bil) == i

    ORDERS dateTime(bt) DESC

    FILTERGROUP inSkuLedgerBatch
        FILTER 'Только расписанные партии' cost (bil, bt) 'F10' DEFAULT
;

DESIGN costSkuBatchLedger {
    NEW mainContainer{
        type=CONTAINERV;
        fill=1;
        MOVE BOX(i);
        NEW topContainer {
            fill = 1;
            type = SPLITV;
    
            MOVE BOX(bt);
            MOVE BOX(bil);
        }    
    }
    MOVE TOOLBARBOX;
}

// ------------------------------------------------ Остатки по товарам ---------------------------------------- //

select 'Отм.' = DATA LOCAL NESTED BOOLEAN (Sku) CHANGEKEY 'ADD';
resetAllSelectedSku 'Сбросить для всех'()  { 
    select(Sku sku) <- NULL WHERE select(sku);
} ASON CONTEXTMENU select[Sku];

select 'Отм.' = DATA LOCAL NESTED BOOLEAN (Sku, Stock) CHANGEKEY 'ADD';
resetAllSelectedSkuStock 'Сбросить для всех'()  { 
    select(Sku sku, Stock stock) <- NULL WHERE select(sku, stock);
} ASON CONTEXTMENU select[Sku,Stock];

countSelectSkus 'Отм.' = GROUP SUM 1 IF select(Sku sku) CHARWIDTH 3 TOOLBAR ;
countSelectSkuStocks 'Отм.' = GROUP SUM 1 IF select(Sku sku, Stock stock) CHARWIDTH 3 TOOLBAR;

multipleStores 'Несколько складов' = DATA LOCAL BOOLEAN ();
singleStore = NOT multipleStores();

// Пока вот так, так иначе будет циклическая зависимость, а Extend'ить ON CONTEXTMENU нельзя
showBalanceMovementSku 'Показать движение товара по складу' (sku, stock)  ABSTRACT ( Sku, Stock);
showBalancePriceSku 'Показать изменение цены товара по складу' (sku, stock)  ABSTRACT ( Sku, Stock);
showBalanceReserveSku 'Показать резерв товара по складу' (sku, stock)  ABSTRACT ( Sku, Stock);

backgroundBalance  = ABSTRACT CASE COLOR (Sku, Stock);
backgroundBalance  = ABSTRACT CASE COLOR (Sku, Stock, DATETIME);

backgroundBalanceId = ABSTRACT VALUE COLOR (Sku, Stock);
backgroundBalanceId (Sku s, Stock st) += backgroundBalance(s, st);

overFilterGroup = ABSTRACT BOOLEAN (Sku);
overFilterStock = ABSTRACT BOOLEAN (Stock);

FORM currentBalanceSkuStock 'Текущие остатки'
    PROPERTIES() multipleStores
    
    OBJECTS ss = Stock PANEL
    PROPERTIES(ss) name SELECTOR SHOWIF singleStore()
    FILTERS isCompany(ss)
    
    TREE stockTree a = BPSTRING[3], sg = StockGroup PARENT parent(sg), ts = Stock
    PROPERTIES SHOWIF multipleStores() READONLY VALUE(a), sgTreeName = name(sg), tsTreeName = name(ts)
    ORDERS sgTreeName
    FILTERS stringEqualsAll(a),
            stockGroup(ts) == sg,
            isCompany(ts)
    FILTERGROUP tsinactiveStock FILTER 'Активный' active(ts) 'ctrl F10' DEFAULT
    
    TREE skuTree sk = SkuGroup PARENT parent(sk)
    PROPERTIES READONLY order(sk), skuTreeName = name(sk)
    ORDERS order(sk), skuTreeName
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F6' DEFAULT

    OBJECTS           sts=(st=Stock, s=Sku)
    PROPERTIES        select(s,st)
    PROPERTIES        BACKGROUND backgroundBalance(s,st) READONLY name(s) ON CONTEXTMENU showBalanceMovementSku(s, st) ON CONTEXTMENU showBalancePriceSku(s, st) ON CONTEXTMENU showBalanceReserveSku(s,st), nameCountry(s), 
                      stockName 'Склад' = name(st) SHOWIF multipleStores(), nameUOM(s)  //  idBarcodeSku
    PROPERTIES BACKGROUND backgroundBalanceId(s, st) READONLY id(s) SHOWIF showIDs() BEFORE nameCountry(s)
    FILTERS           isParent(sk, s) OR overFilterGroup(s),
                      IF multipleStores() THEN 
                        st == ts AND sg IS StockGroup OR isParent(sg, st) AND NOT ts OR st IS Stock AND NOT sg AND NOT ts OR overFilterStock(st)
                      ELSE 
                        st == ss,
                      isCompany(st) OR NOT multipleStores()
    ORDERS          name(s)
    FILTERGROUP inactiveStock 
        FILTER 'Активный' (active(st) OR NOT multipleStores()) AND active(s) 'ctrl F10' DEFAULT
        FILTER 'Неактивный' inactive(s) 'shift F10'
    FILTERGROUP container 
        FILTER 'Товар' isItem(s) 
        FILTER 'Тара' isContainer(s)
        
    PROPERTIES(s, st) READONLY currentBalance, averagePrice, currentSum, dateTimeLastMoved, nameSupplierLastOrderBatch
    PROPERTIES(s)     READONLY idSkuGroup, canonicalNameSkuGroup    
    PROPERTIES() READONLY countSelectSkuStocks SHOWIF countSelectSkuStocks() DRAW sts 
    FILTERGROUP filters
        FILTER 'Товары с остатком' currentBalance(s, st) OR currentSum(s, st) 'F10' DEFAULT
        FILTER 'Товары с движением не позднее 1 дня' currentBalance(s, st, 1) 'F9'
        FILTER 'Товары с движением не позднее 7 дней' currentBalance(s, st, 7) 'F8'
        FILTER 'Товары с движением не позднее 30 дней' currentBalance(s, st, 30) 'F7'
        FILTER 'Товары с отрицательным остатком' currentBalance(s, st) < 0 'F6'
    
    OBJECTS bil=SkuLedger
    PROPERTIES(bil) READONLY dateTime, description, nameBatch,
                    signedQuantity, signedPrice, signedSum, balanceA, priceA, sumA, skip
                    
    FILTERS isPosted(bil) AND sku(bil)==s AND stock(bil)==st
    ORDERS dateTime(bil) DESC

    OBJECTS bt=Batch
    PROPERTIES(bt) READONLY      number, series, dateTime, nameSupplier, name, id, shippedQuantity, cost, expiryDate
    PROPERTIES(bt, st) READONLY  currentBalance
    FILTERS isPosted(bt),
            sku(bt) == s,
            countLedger(bt, st)
    
    ORDERS dateTime(bt) DESC
;

DESIGN currentBalanceSkuStock {
    BOX {
        size = (1024, 768);
        NEW filter {
            alignment = STRETCH;
            type = CONTAINERH;
            MOVE PROPERTY (multipleStores());
            MOVE PROPERTY (name(ss));
        }
        NEW topContainer {
            fill = 1;
            type = SPLITH;

            NEW firstBottom {
                fill = 1;
                width = 100;
                type = SPLITV;
                MOVE BOX(TREE stockTree) { caption = 'Склады'; }
                MOVE BOX(TREE skuTree) { caption = 'Группы'; }
            }

            NEW secondCase {
                fill = 3;
                width = 300;
                type = SPLITV;
                NEW skuBox {
                    fill = 2;
//                    height = 200;
                    MOVE BOX(sts) {
                        fill = 2;
                    }
                }
                NEW ledgerBox {
                    fill = 1;
//                    height = 100;
                    tabbed = TRUE;
                    MOVE BOX(bil);
                    MOVE BOX(bt);
                    NEW actionContainer {
                        caption = 'Действия';
                        type = CONTAINERH;
                    }
                }
            }
        }

        MOVE TOOLBARBOX;
    }
}
@extendFormFilterStockGroupAccess(sg, currentBalanceSkuStock);
EXTEND FORM currentBalanceSkuStock FILTERS accessCompany(currentUser(), st) OR NOT multipleStores();

@extendFormFilterStockAccess(ss, currentBalanceSkuStock);

@extendFormFilterStockAccess(ts, currentBalanceSkuStock);

//resetSelectedSkuStock 'Сбросить для текущих' = () {
//    FOR [ FILTER currentBalanceSkuStock.sts](st,s) DO {
//        selectSkuStock(s, st) <- NULL WHERE selectSkuStock(s, st);
//    }
//} ASON CONTEXTMENU selectSkuStock;

FORM balanceSkuStock 'Остатки на дату'

    OBJECTS t=DATETIME PANEL
    PROPERTIES valT = VALUE(t)

    PROPERTIES() multipleStores
    
    OBJECTS ss = Stock PANEL
    PROPERTIES(ss) name SELECTOR SHOWIF singleStore()
    FILTERS isCompany(ss)    

    TREE stockTree a = BPSTRING[3], sg = StockGroup PARENT parent(sg), ts = Stock
    PROPERTIES READONLY SHOWIF multipleStores() VALUE(a), sgTreeName = name(sg), tsTreeName = name(ts)
    ORDERS sgTreeName
    FILTERS stringEqualsAll(a),
            stockGroup(ts) == sg,
            isCompany(ts)
    FILTERGROUP sginactiveStock FILTER 'Активный' active(ts) 'ctrl F10' DEFAULT
    TREE skuTree sk = SkuGroup PARENT parent(sk)
    PROPERTIES READONLY order(sk), skuTreeName = name(sk)
    ORDERS order(sk), skuTreeName
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F6' DEFAULT

    OBJECTS           sts=(st=Stock, s=Sku)
    PROPERTIES        select(s,st)
    PROPERTIES        READONLY BACKGROUND backgroundBalance(s,st,t) name(s) ON CONTEXTMENU showBalanceMovementSku(s, st) ON CONTEXTMENU showBalancePriceSku(s, st) ON CONTEXTMENU showBalanceReserveSku(s,st), id(s) SHOWIF showIDs(), nameCountry(s), stockName = name(st) SHOWIF multipleStores(), nameUOM(s)  //  idBarcodeSku
    FILTERS           isParent(sk, s),
                      IF multipleStores() THEN 
                          st == ts AND sg IS StockGroup OR isParent(sg, st) AND NOT ts OR st IS Stock AND NOT sg AND NOT ts
                        ELSE 
                            st == ss,
                      isCompany(st) OR NOT multipleStores()

    FILTERGROUP inactiveStock 
            FILTER 'Активный' (active(st) OR NOT multipleStores()) AND active(s) 'ctrl F10' DEFAULT
            FILTER 'Неактивный' inactive(s) 'shift F10'

    PROPERTIES(s, st, t) READONLY balanceB, averagePriceB, sumB 
    PROPERTIES(s, st) READONLY dateTimeLastMoved, nameSupplierLastOrderBatch
    PROPERTIES(s)     READONLY idSkuGroup, canonicalNameSkuGroup   
    
    FILTERGROUP container 
        FILTER 'Товар' isItem(s) 
        FILTER 'Тара' isContainer(s)
        
    FILTERGROUP filters
        FILTER 'Товары с остатком' balanceB(s, st, t) OR sumB(s, st, t) 'F10' DEFAULT
        FILTER 'Товары с движением не позднее 1 дня' balance(s, st, t, 1) 'F9'
        FILTER 'Товары с движением не позднее 7 дней' balance(s, st, t, 7) 'F8'
        FILTER 'Товары с движением не позднее 30 дней' balance(s, st, t, 30) 'F7'

    OBJECTS bil=SkuLedger
    PROPERTIES(bil) READONLY dateTime, description, nameBatch,
                    signedQuantity, signedPrice, signedSum, skip
    FILTERS isPosted(bil) AND sku(bil)==s AND stock(bil)==st
    ORDERS dateTime(bil) DESC

    OBJECTS bt=Batch
    PROPERTIES(bt) READONLY      number, series, dateTime, nameSupplier, name, id, shippedQuantity, cost
    PROPERTIES(bt, st, t) READONLY  balanceB
    FILTERS isPosted(bt),
            sku(bt) == s,
            countLedger(bt, st)
    ORDERS dateTime(bt) DESC
;

DESIGN balanceSkuStock {
    BOX {
        size = (1024, 768);
        NEW filter {
            alignment = STRETCH;
            type = CONTAINERH;
            MOVE PROPERTY (valT);
            MOVE PROPERTY (multipleStores());
            MOVE PROPERTY (name(ss));
        }
        NEW topContainer {
            fill = 1;
            type = SPLITH;
            
            NEW firstCaseTwo {
                fill = 1;
                type = SPLITV;
                MOVE BOX(TREE stockTree) { caption = 'Склады'; }
                MOVE BOX(TREE skuTree) { caption = 'Группы'; }
            }

            NEW secondCase {
                fill = 3;
                type = SPLITV;
                NEW skuBox {
                    fill = 2;
                    MOVE BOX(sts) {
                        fill = 2;
                    }
                }
                NEW ledgerBox {
                    fill = 1;
                    tabbed = TRUE;
                    MOVE BOX(bil);
                    MOVE BOX(bt);
                }
            }
        }
        MOVE TOOLBARBOX;
    }
}
@extendFormFilterStockGroupAccess(sg, balanceSkuStock);
EXTEND FORM balanceSkuStock FILTERS accessCompany(currentUser(), st) OR NOT multipleStores();

@extendFormFilterStockAccess(ss, balanceSkuStock);

@extendFormFilterStockAccess(ts, balanceSkuStock);

// ------------------------------------------------ Остатки по партиям ---------------------------------------- //

backgroundBatch = ABSTRACT CASE COLOR (Stock, Batch);
backgroundBatch = ABSTRACT CASE COLOR (SkuLedger);

FORM currentBalanceBatchStock 'Текущие остатки по партиям'

    PROPERTIES() multipleStores
    
    OBJECTS ss = Stock PANEL
    PROPERTIES(ss) name SELECTOR SHOWIF singleStore()
    FILTERS isCompany(ss)   

    TREE stockTree a = BPSTRING[3], sg = StockGroup PARENT parent(sg), ts = Stock
    PROPERTIES READONLY SHOWIF multipleStores() VALUE(a), sgTreeName = name(sg), tsTreeName = name(ts)
    ORDERS sgTreeName
    FILTERS stringEqualsAll(a),
            stockGroup(ts) == sg,
            isCompany(ts)
    FILTERGROUP sginactiveStock FILTER 'Активный' active(ts) 'ctrl F10' DEFAULT
    TREE skuTree sk = SkuGroup PARENT parent(sk)
    PROPERTIES READONLY order(sk), skuTreeName = name(sk)
    ORDERS order(sk), skuTreeName
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F6' DEFAULT
       
    OBJECTS           stb=(st=Stock, bt=Batch)
    PROPERTIES        READONLY BACKGROUND backgroundBatch(st, bt) nameSku(bt), stockName = name(st) SHOWIF multipleStores(), documentNameSku(bt) SHOWIF useDocumentNameSku()
    PROPERTIES        READONLY currentBalance(bt, st) BACKGROUND negativeBalance(bt, st)
    PROPERTIES(bt)    READONLY BACKGROUND backgroundBatch(st, bt) number, series, dateTime, nameSupplier, name, id, shippedQuantity, cost, expiryDate
    FILTERS           isParent(sk, bt),
                      IF multipleStores() THEN 
                          st == ts AND sg IS StockGroup OR isParent(sg, st) AND NOT ts OR st IS Stock AND NOT sg AND NOT ts
                        ELSE 
                            st == ss,    
//                      st == ts AND sg IS StockGroup OR isParentStockGroupStock(sg, st) AND NOT ts OR st IS Stock AND NOT sg AND NOT ts,
                      isCompany(st) OR NOT multipleStores()
//    FILTERGROUP inactiveStock FILTER 'Активный' active(st) OR NOT multipleStores() 'ctrl F10' DEFAULT
    ORDERS          dateTime(bt)

    OBJECTS bil=SkuLedger
    PROPERTIES(bil) READONLY BACKGROUND backgroundBatch(bil) dateTime, description,
                    signedQuantity, signedPrice, signedSum, skip
    PROPERTIES      READONLY cost(bil, bt) AFTER signedQuantity(bil)
    FILTERS isPosted(bil) AND (cost(bil, bt) OR batch(bil)==bt) AND stock(bil)==st   //skuSkuLedger(bil)==skuBatch(bt)
    ORDERS dateTime(bil) DESC
    FILTERGROUP container 
        FILTER 'Товар' isItem(bt) 
        FILTER 'Тара' isContainer(bt)
    
    FILTERGROUP filterBalance
        FILTER 'Партии с остатком' currentBalance(bt, st) 'F11' DEFAULT
        FILTER 'Партии с движением по складу' countLedger(bt, st)
        FILTER 'Партии пришедшие за последний 1 день' date(bt) >= subtract(currentDate(), 1) 'F10'
        FILTER 'Партии пришедшие за последние 7 дней' date(bt) >= subtract(currentDate(), 7) 'F9'
        FILTER 'Партии пришедшие за последние 30 дней' date(bt) >= subtract(currentDate(), 30) 'F8'

    FILTERGROUP filterExpiry
        FILTER 'Партии с истекшим сроком годности' expiryDate(bt) < currentDate() 'F7'
        FILTER 'Партии со сроком годности, истекающим через 1 день' expires(bt, currentDate(), 1) 'F6'
        FILTER 'Партии со сроком годности, истекающим через 7 дней' expires(bt, currentDate(), 7) 'F6'
        FILTER 'Партии со сроком годности, истекающим через 30 дней' expires(bt, currentDate(), 30) 'F4'
;

DESIGN currentBalanceBatchStock {
    BOX {
        size = (1024, 768);
        NEW filter {
            alignment = STRETCH;
            type = CONTAINERH;
            MOVE PROPERTY (multipleStores());
            MOVE PROPERTY (name(ss));
        }
        NEW topContainer {
            fill = 1;
            type = SPLITH;

            NEW firstCase {
                fill = 1;
                width = 100;
                type = SPLITV;
                MOVE BOX(TREE stockTree) { caption = 'Склады'; }
                MOVE BOX(TREE skuTree) { caption = 'Группы'; }
            }
            NEW secondCase {
                fill = 3;
                width = 300;
                type = SPLITV;
                NEW skuBox {
                    fill = 2;
                    MOVE BOX(stb) {
                        caption = 'Партии';
                        fill = 2;
                    }
                }
                NEW ledgerBox {
                    fill = 1;
                    tabbed = TRUE;
                    MOVE BOX(bil) {caption = 'Движение';}
                }
             }            
            
        }

        MOVE TOOLBARBOX;
    }
}
@extendFormFilterStockGroupAccess(sg, currentBalanceBatchStock);
EXTEND FORM currentBalanceBatchStock FILTERS accessCompany(currentUser(), st) OR NOT multipleStores();

@extendFormFilterStockAccess(ss, currentBalanceBatchStock);

@extendFormFilterStockAccess(ts, currentBalanceBatchStock);

FORM balanceBatchStock 'Остатки по партиям на дату'

    OBJECTS t=DATETIME PANEL
    PROPERTIES   valT = VALUE(t)
    
    PROPERTIES() multipleStores
    
    OBJECTS ss = Stock PANEL
    PROPERTIES(ss) name SELECTOR SHOWIF singleStore()
    FILTERS isCompany(ss)  
    
    TREE stockTree a = BPSTRING[3], sg = StockGroup PARENT parent(sg), ts = Stock
    PROPERTIES READONLY SHOWIF multipleStores() VALUE(a), sgTreeName = name(sg), tsTreeName = name(ts)
    ORDERS sgTreeName
    FILTERS stringEqualsAll(a),
            stockGroup(ts) == sg,
            isCompany(ts)
    FILTERGROUP sginactiveStock FILTER 'Активный' active(ts) 'ctrl F10' DEFAULT
    TREE skuTree sk = SkuGroup PARENT parent(sk)
    PROPERTIES READONLY order(sk), skuTreeName = name(sk)
    ORDERS order(sk), skuTreeName
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F6' DEFAULT

    OBJECTS           stb=(st=Stock, bt=Batch)
    PROPERTIES        READONLY BACKGROUND backgroundBatch(st, bt) stockName = name(st) SHOWIF multipleStores(), nameSku(bt)
    PROPERTIES        READONLY  balanceB(bt, st, t)
    PROPERTIES(bt)    READONLY BACKGROUND backgroundBatch(st, bt) number, series, dateTime, nameSupplier, name, id, shippedQuantity, cost, expiryDate
    FILTERS           isParent(sk, bt),
                      IF multipleStores() THEN 
                          st == ts AND sg IS StockGroup OR isParent(sg, st) AND NOT ts OR st IS Stock AND NOT sg AND NOT ts
                        ELSE 
                            st == ss,    
                      isCompany(st) OR NOT multipleStores()
    FILTERGROUP inactiveStock FILTER 'Активный' active(st) OR NOT multipleStores() 'ctrl F10' DEFAULT
    ORDERS          dateTime(bt)

    OBJECTS bil=SkuLedger
    PROPERTIES(bil) READONLY dateTime, description,
                    signedQuantity, signedPrice, signedSum, skip
    PROPERTIES      READONLY cost(bil, bt) AFTER signedQuantity(bil)
    FILTERS isPosted(bil) AND (cost(bil, bt) OR batch(bil)==bt) AND stock(bil)==st,
            dateTime(bil) < t
    ORDERS dateTime(bil) DESC
    FILTERGROUP container 
        FILTER 'Товар' isItem(bt) 
        FILTER 'Тара' isContainer(bt)
        
    FILTERGROUP filterBalance
        FILTER 'Партии с остатком' balanceB(bt, st, t) 'F11' DEFAULT
        FILTER 'Партии с движением по складу' countLedger(bt, st)
        FILTER 'Партии пришедшие за последний 1 день' dateTime(bt) >= subtractSeconds(currentDateTime(), 1) 'F10'
        FILTER 'Партии пришедшие за последние 7 дней' dateTime(bt) >= subtractSeconds(currentDateTime(), 7) 'F9'
        FILTER 'Партии пришедшие за последние 30 дней' dateTime(bt) >= subtractSeconds(currentDateTime(), 30) 'F8'

    FILTERGROUP filterExpiry
        FILTER 'Партии с истекшим сроком годности' expiryDate(bt) < toDate(t) 'F7'
        FILTER 'Партии со сроком годности, истекающим через 1 день' expires(bt, t, 1) 'F6'
        FILTER 'Партии со сроком годности, истекающим через 7 дней' expires(bt, t, 7) 'F6'
        FILTER 'Партии со сроком годности, истекающим через 30 дней' expires(bt, t, 30) 'F4'
;

DESIGN balanceBatchStock {
    BOX {
        size = (1024, 768);
        NEW filter {
            alignment = STRETCH;
            type = CONTAINERH;
            MOVE PROPERTY (valT);
            MOVE PROPERTY (multipleStores());
            MOVE PROPERTY (name(ss));
        }
        NEW topContainer {
            fill = 1;
            type = SPLITH;
            
            NEW firstCaseTwo {
                fill = 1;
                type = SPLITV;
                MOVE BOX(TREE stockTree) { caption = 'Склады'; }
                MOVE BOX(TREE skuTree) { caption = 'Группы'; }
            }
            NEW secondCase {
                fill = 3;
                type = SPLITV;
                NEW skuBox {
                    fill = 2;
                    MOVE BOX(stb) {
                        caption = 'Партии';
                        fill = 2;
                    }
                }

                NEW ledgerBox {
                    fill = 1;
                    tabbed = TRUE;
                    MOVE BOX(bil) {caption = 'Движение';}

                }
            }            
            
            
        }

        MOVE TOOLBARBOX;
    }
}
@extendFormFilterStockGroupAccess(sg, balanceBatchStock);

EXTEND FORM balanceBatchStock FILTERS accessCompany(currentUser(), st) OR NOT multipleStores();

@extendFormFilterStockAccess(ss, balanceBatchStock);

@extendFormFilterStockAccess(ts, balanceBatchStock);

FORM skuLedger 'Регистр движений'

    OBJECTS dates = (dFrom = DATE, dTo = DATE) PANEL
    PROPERTIES valFrom = VALUE(dFrom), valTo = VALUE(dTo)

    OBJECTS s = SkuLedger
    PROPERTIES(s) READONLY date, dateTime, canonicalNameSkuGroup, nameSku, description, nameStock,
                           signedQuantity, signedPrice, signedSum, costSum
    PROPERTIES(s) EDIT SHOWIF allowedEdit(s) NEWSESSION, show SHOWIF allowedShow(s)
    ORDERS date(s) DESC
    FILTERS isPosted(s)

    FILTERS date(s) >= dFrom, date(s) <= dTo
    
    FILTERGROUP container 
        FILTER 'Товар' isItem(s) 
        FILTER 'Тара' isContainer(s)    
;

DESIGN skuLedger {
    MOVE BOX(dates) {
        type = CONTAINERH;
    }
    MOVE BOX(s) {
        type = CONTAINERV;
    }
    MOVE TOOLBARBOX;
}

@extendFormFilterAccessStock(SkuLedger, s, skuLedger, stock, company);

NAVIGATOR {
    stockNavigator {
        NEW FOLDER balanceSku 'Остатки по товару' BEFORE stockReports {
            NEW currentBalanceSkuStock;
            NEW balanceSkuStock;
        }
        NEW FOLDER balanceBatch 'Остатки по партиям' BEFORE stockReports {
            NEW currentBalanceBatchStock;
            NEW balanceBatchStock;
            NEW batches;
        }
        NEW FOLDER stockCost 'Себестоимость' BEFORE stockReports {
            NEW costSkuLedger;
            NEW costSkuBatchLedger;
        }
        stockReports{
            NEW skuLedger;
        }
    }
}

// ----------------------------------------------------------------------------- //

nameSkuGroup 'Группа' (Batch batch) = name(skuGroup(sku(batch)));

skuGroup1 'Категория' (Batch batch) = skuGroup1(sku(batch));
nameSkuGroup1 'Категория' (Batch batch) = name(skuGroup1(batch));
 
skuGroup2 'Направление' (Batch batch) = skuGroup2(sku(batch));
nameSkuGroup2 'Направление' (Batch batch) = name(skuGroup2(batch));

skuGroup3 'Группа' (Batch batch) = skuGroup3(sku(batch));
nameSkuGroup3 'Группа' (Batch batch) = name(skuGroup3(batch));

skuGroup4 'Подгруппа' (Batch batch) = skuGroup4(sku(batch));
nameSkuGroup4 'Подгруппа' (Batch batch) = name(skuGroup4(batch));

skuGroup5 'Субгруппа' (Batch batch) = skuGroup5(sku(batch));
nameSkuGroup5 'Субгруппа' (Batch batch) = name(skuGroup5(batch));

// ---------------------------------------------- Макросы ------------------------------------------------ //

META implementSkuLedger(object, skuProp, stockProp)
    dateTime[Data###skuProp##Ledger] (###object ledger) += dateTime(ledger);
    isPosted[Data###skuProp##Ledger] (###object ledger) += isPosted(ledger);
    isClosed[Data###skuProp##Ledger] (###object ledger) += isClosed(ledger);
    skuProp[Data###skuProp##Ledger] (###object ledger) += skuProp(ledger);
    stock[Data###skuProp##Ledger] (###object ledger) += stockProp(ledger);
    description[Data###skuProp##Ledger] (###object ledger) += ISTRING[200](description(ledger));
END

META defineSkuLedgerAggregation(primObject, aggrObject, skuProp, stockProp)
    dateTime (###aggrObject batch) = dateTime(primObject(batch));
    isPosted (###aggrObject batch) = isPosted(primObject(batch));
    isClosed (###aggrObject batch) = isClosed(primObject(batch));
    skuProp (###aggrObject batch) = skuProp(primObject(batch));
    stock (###aggrObject batch) = stockProp(primObject(batch));
    description (###aggrObject batch) = description(primObject(batch));
END

META implementSkuLedgerInLIFO(object, skuProp, stockProp)
    EXTEND CLASS object : InLIFOSkuLedger;
    @implementSkuLedger(object, skuProp, stockProp);
END

META implementSkuLedgerInLIFOBatchBalancePostfix (object, stockProp, postfix)
    changed(###object ledger) += CHANGED(batch(ledger));
END

META implementSkuLedgerInLIFOBatchBalance (object, stockProp)
    @implementSkuLedgerInLIFOBatchBalancePostfix(object, stockProp, );
END

META implementSkuLedgerOutFIFO(object, skuProp, stockProp)
    EXTEND CLASS object : OutFIFOSkuLedger;
    @implementSkuLedger(object, skuProp, stockProp);
END

META implementSkuLedgerOutFIFOBatchBalancePostfix (object, stockProp, postfix)
    changed(###object ledger) += CHANGED(batch(ledger));
END

META implementSkuLedgerOutFIFOBatchBalance (object, stockProp)
    @implementSkuLedgerOutFIFOBatchBalancePostfix(object, stockProp, );
END

META implementBatchCustom(object, skuProp, stockProp, costProp)
    dateTime[Batch] (object batch) += dateTime(batch);
    isPosted[Batch] (object batch) += isPosted(batch);
    isClosed[Batch] (object batch) += isClosed(batch);
    skuProp[Batch] (object batch) += skuProp(batch);
    stockProp[Batch] (object batch) += stockProp(batch);
    description[Batch] (object batch) += description(batch);
    cost[Batch] (object batch) += costProp(batch);
END //-- (не забывать имплементить nameBatch)

META implementBatch(object, skuProp, stockProp, costProp)
    EXTEND CLASS object : Batch;
    @implementBatchCustom(object, skuProp, stockProp, costProp);
END

META defineConstraintSkuLedgerCosted (concrete, caption)
    CONSTRAINT (SET(changedCostDataSkuLedger(detail)) OR CHANGED(costedDataSkuLedger(detail))) AND isPosted###concrete##Detail(detail) AND NOT quantity###concrete##Detail(detail) == costedDataSkuLedger(detail)
        MESSAGE caption;
END

//-------------------------------------------------- Добавление партий в документ --------------------------------------//

META defineDocumentDetailBatchCustomPrefix(detail, batchProp, prefix)
    @defineDocumentDetailBatchCustomPrefixInner(detail, batchProp, ###batchProp, prefix);
END

META defineDocumentDetailBatchCustomPrefixInner(detail, batchProp, batchClass, prefix)
    batchProp = DATA batchClass (###detail) INDEXED;
    name##batchClass 'Партия' (###detail detail) = name(batchProp(detail)) CHARWIDTH 20;
    documentName##batchClass 'Наименование (для документов)' (###detail detail) = documentNameSku(batchProp(detail)) CHARWIDTH 20;
    
    CONSTRAINT sku(batchProp(###detail detail)) != sku(detail) CHECKED BY batchProp[###detail]
        MESSAGE 'Товар партии строки должен соответствовать SKU строки';

    CONSTRAINT batchProp(###detail detail) AND NOT sku(detail) CHECKED BY batchProp[###detail]
        MESSAGE 'Для строки задана партия, но не задан товар';
END

//META defineDocumentDetailBatchCustom(detail, batchProp)
//    batch###detail = DATA batchProp (Detail);
//    descriptionBatch###detail 'Партия' (detail) = descriptionBatch(batch###detail(detail)) CHARWIDTH 20;
//
//    CONSTRAINT skuBatch(batch###detail(detail)) != sku###detail(detail) CHECKED BY batch###detail
//        MESSAGE 'Товар партии строки должен соответствовать SKU строки';
//
//    CONSTRAINT batch###detail(detail) AND NOT sku###detail(detail) CHECKED BY batch###detail
//        MESSAGE 'Для строки задана парктия, но не задан товар';
//END
META defineDocumentDetailBatchCustom(detail, batchProp)
    @defineDocumentDetailBatchCustomPrefix(detail, batchProp, );
END

META defineDocumentAbstractDetailBatchCustom(detail, batchProp)
    @defineDocumentAbstractDetailBatchCustomInner(detail, batchProp, ###batchProp);
END

META defineDocumentAbstractDetailBatchCustomInner(detail, batchProp, batchClass)
    batchProp = ABSTRACT batchClass (###detail) MATERIALIZED INDEXED;
    name##batchClass 'Партия' (###detail detail) = name(batchProp(detail)) CHARWIDTH 20;
    documentName##batchClass 'Наименование (для документов)' (###detail detail) = documentNameSku(batchProp(detail)) CHARWIDTH 20;
END
META defineDocumentInterfaceDetailBatchCustom(detail, batchProp)
    @defineDocumentAbstractDetailBatchCustom(detail, batchProp);
    @defineDocumentDetailBatchCustom(user###detail, batchProp);
    batchProp(User###detail detail) += batchProp(detail);
END

META defineDocumentDetailBatch(object, batchProp)
    @defineDocumentDetailBatchCustom(object##Detail, batchProp);
END
META defineDocumentAbstractDetailBatch(object, batchProp)
    @defineDocumentAbstractDetailBatchCustom(object##Detail, batchProp);
END
META defineDocumentInterfaceDetailBatch(object, batchProp)
    @defineDocumentInterfaceDetailBatchCustom(object##Detail, batchProp);
END
META showDocumentInterfaceDetailBatch(object)
    disableShowBatch = ABSTRACT BOOLEAN (###object);
    showBatch (###object i) = is(i) AND NOT disableShowBatch(i);
    showBatch (User###object i) = is(i) AND NOT disableShowBatch(i);
END
META showDocumentDetailBatch(object)
    disableShowBatch = ABSTRACT BOOLEAN (###object);
    showBatch = is(###object i) AND NOT disableShowBatch(i);
END

META defineDocumentDetailExpiryDateCustomPrefix(detail, prefix)
    prefix###expiryDate 'Годен до' = DATA DATE (###detail);
END
META defineDocumentAbstractDetailExpiryDateCustomPrefix(detail, prefix)
    prefix###expiryDate 'Годен до' = ABSTRACT DATE (###detail) MATERIALIZED;
END
META defineDocumentInterfaceDetailExpiryDateCustomPrefix(detail, prefix)
    @defineDocumentAbstractDetailExpiryDateCustomPrefix(detail, prefix);
    @defineDocumentDetailExpiryDateCustomPrefix(user###detail, prefix);
    prefix###expiryDate(User###detail detail) += prefix###expiryDate(detail);
END

META defineDocumentInterfaceDetailExpiryDatePrefix(object, prefix)
    @defineDocumentInterfaceDetailExpiryDateCustomPrefix(object##Detail, prefix);
END

META defineDocumentInterfaceDetailExpiryDate(object)
    @defineDocumentInterfaceDetailExpiryDatePrefix(object, );
END

META defineDocumentDetailManufactureDateCustomPrefix(detail, prefix)
    prefix###manufactureDate 'Дата изготовления' = DATA DATE (###detail);
END
META defineDocumentAbstractDetailManufactureDateCustomPrefix(detail, prefix)
    prefix###manufactureDate 'Дата изготовления' = ABSTRACT DATE (###detail) MATERIALIZED;
END
META defineDocumentInterfaceDetailManufactureDateCustomPrefix(detail, prefix)
    @defineDocumentAbstractDetailManufactureDateCustomPrefix(detail, prefix);
    @defineDocumentDetailManufactureDateCustomPrefix(user###detail, prefix);
    prefix###manufactureDate(User###detail detail) += prefix###manufactureDate(detail);
END

META defineDocumentInterfaceDetailManufactureDatePrefix(object, prefix)
    @defineDocumentInterfaceDetailManufactureDateCustomPrefix(object##Detail, prefix);
END

META defineDocumentInterfaceDetailManufactureDate(object)
    @defineDocumentInterfaceDetailManufactureDatePrefix(object, );
END

// ---------------------------------- Остаток (до) ----------------------- //

META defineDocumentDetailSkuBalanceCustom (detail)
    balanceBSku 'Количество до' (detail) = DATA NUMERIC[16,5] (###detail);

END
META defineDocumentAbstractDetailSkuBalanceCustom (detail)
    balanceBSku 'Количество до' (detail) = ABSTRACT NUMERIC[16,5] (###detail) MATERIALIZED;
END

META defineDocumentInterfaceDetailSkuBalanceCustom(detail)
    @defineDocumentAbstractDetailSkuBalanceCustom(detail);
    @defineDocumentDetailSkuBalanceCustom(user###detail);
    balanceBSku(User###detail detail) += balanceBSku(detail);
END
META defineDocumentInterfaceDetailSkuBalance(object)
    @defineDocumentInterfaceDetailSkuBalanceCustom(object##Detail);
END

META deriveDocumentDetailSkuBalanceCustom (detail, skuProp, stockProp)
    balanceB###skuProp (###detail detail)  <- prevBalanceB(skuProp(detail), stockProp(detail), dateTime(detail))
        WHEN CHANGED(skuProp(detail)) OR CHANGED(stockProp(detail)) OR CHANGED(dateTime(detail));
END
META deriveDocumentDetailSkuBalance (object, skuProp, stockProp)
    @deriveDocumentDetailSkuBalanceCustom(object##Detail, skuProp, stockProp);
END

//замена товара у партии
allowReplaceItem = DATA LOCAL BOOLEAN ();

setSku 'Сменить товар'(Batch batch)  { 
    DIALOG skus OBJECTS s INPUT DO {  
        allowReplaceItem() <- TRUE;
        replace(s, batch);
        apply();
    }       
} CONFIRM TOOLBAR;

EXTEND FORM currentBalanceBatchStock
	PROPERTIES(bt) setSku 
;

checkDateTimeSkuLedger 'Для регистра движения должна быть задана дата/время' = DATA BOOLEAN ();
EXTEND FORM options
    PROPERTIES () checkDateTimeSkuLedger
;
DESIGN options {
    commons {
        MOVE PROPERTY(checkDateTimeSkuLedger());
    }
}

CONSTRAINT SET (isPosted(SkuLedger l) AND NOT dateTime(l))  AND checkDateTimeSkuLedger()
    MESSAGE 'Для регистра движения должна быть задана дата/время';

META fillBatchSeveralLines (typeDetail, nameDocumentProperty, nameStockProperty, fifoLifo, order)

    fillLineFromExample##fifoLifo ABSTRACT LIST (typeDetail, typeDetail, Batch, NUMERIC[16,5]);

    fillBatchSeveralLines##fifoLifo 'Распределить партии по '##fifoLifo##' с разбиением строк' (typeDetail d) {
        LOCAL qty = NUMERIC[16,5] (Batch);
        qty(Batch batch) <- prevAvailableQuantity(batch, nameStockProperty(d)) IF prevAvailableQuantity(batch, nameStockProperty(d)) > 0 AND skuLedger(batch, nameStockProperty(d)) = sku(d);

        LOCAL qtySpreading = NUMERIC[16,5] ();
        LOCAL qtySpreaded = NUMERIC[16,5] ();

        qtySpreading() <- GROUP SUM quantity(typeDetail detail) IF nameDocumentProperty(detail) = nameDocumentProperty(d) AND sku(detail) = sku(d);
        quantity(d) <- NULL;

        // Оставляем только одну строку с текущей номенклатурой, будем использовать ее как образец
        FOR typeDetail detail AND nameDocumentProperty(detail) = nameDocumentProperty(d) AND detail != d AND sku(detail) = sku(d) DO {
            DELETE detail;
        }

        FOR qtySpreading() > 0 AND qty(Batch batch) > 0 ORDER ###order dateTime(batch), batch DO {

            qtySpreaded() <- MIN qtySpreading(), qty(batch);

            IF NOT quantity(d) THEN {
                // Первая строка
                fillLineFromExample##fifoLifo(d, d, batch, qtySpreaded());
            }
            ELSE NEW newDetail = typeDetail {
                fillLineFromExample##fifoLifo(d, newDetail, batch, qtySpreaded());
            }

            qtySpreading() <- qtySpreading() - qtySpreaded();

            IF qtySpreading() = 0 THEN BREAK;
        }
        IF qtySpreading() > 0 THEN NEW newDetail = typeDetail {
            fillLineFromExample##fifoLifo(d, newDetail, NULL, qtySpreading());
        }
    }
    // В процедуру вынесено только заполнение основных реквизитов, если нужно заполнить что-то еще - дополняем процедуру имплементацией
    fillLineFromExample##fifoLifo (typeDetail detailFrom, typeDetail detailTo, Batch batch, NUMERIC[16,5] quantity) + {

        quantity(detailTo) <- quantity;
        batch(detailTo) <- batch;
        sku(detailTo) <- sku(detailFrom);

        nameDocumentProperty(detailTo) <- nameDocumentProperty(detailFrom) WHERE detailTo IS typeDetail AND NOT nameDocumentProperty(detailTo);

    }

END

META fillBatchSeveralLinesFIFO (typeDetail, nameDocumentProperty, nameStockProperty)
    
   @fillBatchSeveralLines (typeDetail, nameDocumentProperty, nameStockProperty, FIFO, );
    
END

META fillBatchSeveralLinesLIFO (typeDetail, nameDocumentProperty, nameStockProperty)

    @fillBatchSeveralLines (typeDetail, nameDocumentProperty, nameStockProperty, LIFO, dESC);
    
END 