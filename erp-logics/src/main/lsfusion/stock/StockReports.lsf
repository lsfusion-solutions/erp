MODULE StockReports;

REQUIRE EmployeeStock, Barcode, PriceListLedger, StockSkuDocument, OrderLedger;

quantityChildWithSession (Group group) = GROUP SUM 1 IF dataInSession(Group childGroup) AND isParent(childGroup, group);
quantityParentWithSession (Group group) = GROUP SUM 1 IF dataInSession(Group parentGroup) AND isParent(group, parentGroup);                                                                        
                                                                           
backgroundInSession 'Цвет' (Group group) = CASE 
    WHEN dataInSession(group) THEN RGB(0,0,0)
    WHEN inParent(group) THEN RGB(230,248,250) 
    WHEN quantityChildWithSession (group) != descendantNumber(group) AND NOT quantityParentWithSession (group) THEN RGB(203,203,203);

backgroundInclude 'Цвет' (GroupType groupType, Sku sku) = IF include(sku) 
    THEN RGB(0,0,0) 
    ELSE RGB(230,248,250) IF inSession(group(groupType, sku));

countIncludeSku 'Кол-во непосредственных товаров в группе' (Group group, GroupType groupType) =
    GROUP
    SUM 1 IF group(groupType, Sku sku) == group AND include(groupType,sku);
    
sessionConcatGroups 'Группы' (GroupType groupType) =
    GROUP
    CONCAT name(Group group) IF countIncludeSku(group, groupType),',' ORDER group;

// --------------------------------- Оптимизация с хранимыми свойствами ------------------------------------- //
 
// ---- Оборотная ведомость

balanceB 'Остаток на начало' = DATA LOCAL NUMERIC[16,5] (Sku);
sumB 'Сумма на начало' = DATA LOCAL NUMERIC[18,4] (Sku);

quantityIn 'Кол-во пришедшего' = DATA LOCAL NUMERIC[16,5] (Sku);
sumIn 'Сумма пришедшего' = DATA LOCAL NUMERIC[18,4] (Sku);

quantityOut 'Кол-во ушедшего' = DATA LOCAL NUMERIC[16,5] (Sku);
sumOut 'Сумма ушедшего' = DATA LOCAL NUMERIC[18,4] (Sku);

balanceA 'Остаток на конец' = DATA LOCAL NUMERIC[16,5] (Sku);
sumA 'Сумма на конец' = DATA LOCAL NUMERIC[18,4] (Sku);

balanceB 'Остаток на начало' = DATA LOCAL NUMERIC[16,5] (Group);
sumB 'Сумма на начало' = DATA LOCAL NUMERIC[18,4] (Group);

quantityIn 'Кол-во пришедшего' = DATA LOCAL NUMERIC[16,5] (Group);
sumIn 'Сумма пришедшего' = DATA LOCAL NUMERIC[18,4] (Group);

quantityOut 'Кол-во ушедшего' = DATA LOCAL NUMERIC[16,5] (Group);
sumOut 'Сумма ушедшего' = DATA LOCAL NUMERIC[18,4] (Group);

balanceA 'Остаток на конец' = DATA LOCAL NUMERIC[16,5] (Group);
sumA 'Сумма на конец' = DATA LOCAL NUMERIC[18,4] (Group);

inBackSheet 'Вкл.' = DATA LOCAL BOOLEAN (Stock);
inBackSheetDialog 'Вкл.' = DATA LOCAL BOOLEAN (Stock);

inBackSheetStocks 'Склады' () =
    GROUP CONCAT STRING(name(Stock st)) IF inBackSheet(st) ,', ' ORDER name(st),st CHARWIDTH 50;

overFillReportBackSheetFromTo  ABSTRACT ( GroupType, DATE, DATE);

fillReportBackSheetFromTo 'Сформировать'(GroupType gt, DATE df, DATE dt)  { 

    balanceB(Sku sk) <- NULL;           
    quantityIn(Sku sk) <- NULL;  
    quantityOut(Sku sk) <- NULL;  
    balanceA(Sku sk) <- NULL;  
    sumB(Sku sk) <- NULL;           
    sumIn(Sku sk) <- NULL;  
    sumOut(Sku sk) <- NULL;  
    sumA(Sku sk) <- NULL;  

    balanceB(Group g) <- NULL;           
    quantityIn(Group g) <- NULL;  
    quantityOut(Group g) <- NULL;  
    balanceA(Group g) <- NULL;  
    sumB(Group g) <- NULL;           
    sumIn(Group g) <- NULL;  
    sumOut(Group g) <- NULL;  
    sumA(Group g) <- NULL;  

    balanceA(Sku sk) <- NUMERIC[16,5]((GROUP SUM balanceA(sk, Stock st, dt) IF inBackSheet(st)));           
    sumA(Sku sk) <- NUMERIC[18,4]((GROUP SUM sumA(sk, Stock st, dt) IF inBackSheet(st)));  

    quantityIn(Sku sk) <- NUMERIC[16,5]((GROUP SUM quantitySumIn(sk, Stock st, df, dt) IF inBackSheet(st)));           
    sumIn(Sku sk) <- NUMERIC[18,4]((GROUP SUM sumIn(sk, Stock st, df, dt) IF inBackSheet(st)));  

    quantityOut(Sku sk) <- NUMERIC[16,5]((GROUP SUM quantitySumOut(sk, Stock st, df, dt) IF inBackSheet(st)));           
    sumOut(Sku sk) <- NUMERIC[18,4]((GROUP SUM sumOut(sk, Stock st, df, dt) IF inBackSheet(st)));  

    balanceB(Sku sk) <- NUMERIC[16,5]((GROUP SUM balanceB(sk, Stock st, df) IF inBackSheet(st)));           
    sumB(Sku sk) <- NUMERIC[18,4]((GROUP SUM sumB(sk, Stock st, df) IF inBackSheet(st)));  

    balanceA(Group g) <- [GROUP SUM balanceA(Sku sk) BY group(GroupType ggt, sk)](g) IF  groupType(g) == gt;           
    sumA(Group g) <- [GROUP SUM sumA(Sku sk) BY group(GroupType ggt, sk)](g) IF  groupType(g) == gt;   

    quantityIn(Group g) <- [GROUP SUM quantityIn(Sku sk) BY group(GroupType ggt, sk)](g) IF  groupType(g) == gt;          
    sumIn(Group g) <- [GROUP SUM sumIn(Sku sk) BY group(GroupType ggt, sk)](g) IF  groupType(g) == gt; 

    quantityOut(Group g) <- [GROUP SUM quantityOut(Sku sk) BY group(GroupType ggt, sk)](g) IF  groupType(g) == gt;          
    sumOut(Group g) <- [GROUP SUM sumOut(Sku sk) BY group(GroupType ggt, sk)](g) IF  groupType(g) == gt; 

    balanceB(Group g) <- [GROUP SUM balanceB(Sku sk) BY group(GroupType ggt, sk)](g) IF  groupType(g) == gt;           
    sumB(Group g) <- [GROUP SUM sumB(Sku sk) BY group(GroupType ggt, sk)](g) IF  groupType(g) == gt;   

    overFillReportBackSheetFromTo(gt, df, dt);      
}

recBalanceB 'Остаток на начало периода' (Group parent) = GROUP SUM balanceB (Group child) IF isParent(child, parent);
recSumB 'Сумма на начало периода' (Group parent) = GROUP SUM sumB (Group child) IF isParent(child, parent);
recSumIn 'Сумма пришедшего' (Group parent) = GROUP SUM sumIn (Group child) IF isParent(child, parent);
recSumOut 'Сумма ушедшего' (Group parent) = GROUP SUM sumOut (Group child) IF isParent(child, parent);
recSumA 'Сумма на конец периода' (Group parent) = GROUP SUM sumA (Group child) IF isParent(child, parent);

sumB 'Итоговая сумма отчета' (GroupType groupType) = GROUP SUM sumB(Sku sku) IF include(groupType, sku) ;
sumIn 'Итоговая сумма пришедшего товара отчета' (GroupType groupType) = GROUP SUM sumIn(Sku sku) IF include(groupType, sku);
sumOut 'Итоговая сумма ушедшего товара отчета' (GroupType groupType)  = GROUP SUM sumOut(Sku sku) IF include(groupType, sku);
sumA 'Итоговая сумма отчета' (GroupType groupType) = GROUP SUM sumA(Sku sku) IF include(groupType, sku);

// ---- Отчет по остаткам

balanceB 'Остаток (до)' = DATA LOCAL NUMERIC[16,5] (Batch);
fillBatch 'По партиям' = DATA LOCAL BOOLEAN ();
filterGroups 'Для отмеченных групп' = DATA LOCAL BOOLEAN ();
inGroup (GroupType gt, Sku sk) = IF filterGroups() THEN (inSession(group(gt,sk))) ELSE TRUE;

overFillReportBalanceData  ABSTRACT ( GroupType, DATETIME);

fillReportBalanceData 'Рассчитать'(GroupType gt, DATETIME dt)  { 

    IF (GROUP SUM 1 IF inBackSheet(Stock st)) == 1 THEN
    {
        FOR Stock st = (GROUP MIN Stock sst IF inBackSheet(sst)) NOINLINE DO {
            balanceB(Sku sk) <- balanceB(sk, st, dt) IF inGroup(gt,sk);
            sumB(Sku sk) <- sumB(sk, st, dt) IF inGroup(gt,sk);
            IF fillBatch() THEN {
                balanceB(Batch batch) <- balanceB(batch, st, dt) IF inGroup(gt,sku(batch));
            }
        }
    }  
    ELSE
    {
        balanceB(Sku sk) <- NUMERIC[16,5]((GROUP SUM balanceB(sk, Stock st, dt) IF inBackSheet(st)) IF inGroup(gt,sk));
        sumB(Sku sk) <- NUMERIC[18,4]((GROUP SUM sumB(sk, Stock st, dt) IF inBackSheet(st)) IF inGroup(gt,sk)); 
        
        IF fillBatch() THEN {
            balanceB(Batch batch) <- NUMERIC[16,5]((GROUP SUM balanceB(batch, Stock st, dt) IF inBackSheet(st))) IF inGroup(gt,sku(batch));
        }
    }   
    
    balanceB(Group g) <- [GROUP SUM balanceB(Sku sk) IF inGroup(GroupType ggt, sk) BY group(ggt, sk)](g) IF  groupType(g) == gt;
    sumB(Group g) <- [GROUP SUM sumB(Sku sk) IF inGroup(GroupType ggt, sk) BY group(ggt, sk)](g) IF  groupType(g) == gt;
       
    overFillReportBalanceData(gt,dt);
}
// --------------------------------- Конец оптимизации с хранимыми свойствами ------------------------------------- //
overFilterBalanceBAInOut = ABSTRACT BOOLEAN (Sku);


filterBalanceBAInOut (Sku s) = (balanceB(s) OR
    balanceA(s) OR
    sumIn(s) OR
    sumOut(s) OR 
    overFilterBalanceBAInOut(s)) ;

setInSession = DATA LOCAL BOOLEAN();

//остатки по товарам
FORM printListBalanceSkusStock 'Остатки по товарам'
    OBJECTS d = DATETIME PANEL SUBREPORT
    PROPERTIES(d) dateTime = VALUE
    PROPERTIES currentDateTime()

    PROPERTIES inBackSheetStocks()

    OBJECTS gt = GroupType PANEL
    PROPERTIES(gt) SELECTOR name
    PROPERTIES(gt) READONLY sessionConcatGroups
    PROPERTIES sumB(gt)

    OBJECTS s = Sku
    PROPERTIES(s) READONLY idBarcode, name, shortNameUOM
    FILTERS inSession(group(gt, s))
    ORDERS name(s)

    PROPERTIES(s) READONLY balanceB, sumB
    FILTERS balanceB(s)
    FILTERS s IS Sku AND d IS DATETIME // фильтр, чтобы сохранилась старая иерархия
;

printListBalanceSkus 'Списком' (DATETIME dateTime, GroupType gtype, Group g)  { 
    IF NOT countInSessionGroups() THEN {
        setInSession() <- TRUE;
        dataInSession(g) <- TRUE;       
    }      
    
    PRINT printListBalanceSkusStock OBJECTS d = dateTime, gt = gtype; 

    IF setInSession() THEN {
        dataInSession(g) <- NULL;       
        setInSession() <- NULL;
    }      
} IMAGE 'print.png' IN print;  

accountPriceB 'Цена учетная' (Sku sku, DATETIME dateTime) = 
    NUMERIC[16,4]((GROUP MAX prevAccountPriceB(sku, Stock st, dateTime) IF inBackSheet(st)));

FORM printBalanceSkusStock 'Остатки по товарам'
    OBJECTS d = DATETIME PANEL SUBREPORT
    PROPERTIES(d) dateTime = VALUE
    PROPERTIES currentDateTime()

    PROPERTIES inBackSheetStocks()

    OBJECTS gt = GroupType PANEL
    PROPERTIES(gt) SELECTOR name
    PROPERTIES(gt) READONLY sessionConcatGroups
    PROPERTIES sumB(gt)

    OBJECTS sk = Group
    PROPERTIES READONLY canonicalName(sk)
    ORDERS canonicalName(sk)
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F6' DEFAULT

    FILTERS inSession(sk) AND countSku(sk, gt)
    FILTERS groupType(sk) == gt
    PROPERTIES(sk) READONLY sumB

    OBJECTS s = Sku
    PROPERTIES(s) READONLY idBarcode, name, shortNameUOM
    ORDERS name(s)
    FILTERS group(gt, s) == sk

    PROPERTIES(s) READONLY balanceB, sumB
    PROPERTIES(s, d) READONLY accountPriceB
    FILTERS balanceB(s)
;

printBalanceSkus 'По группам' (DATETIME dateTime, GroupType gtype, Group g)  { 
    IF NOT countInSessionGroups() THEN {
        setInSession() <- TRUE;
        dataInSession(g) <- TRUE;       
    }      
    
    PRINT printBalanceSkusStock OBJECTS d = dateTime, gt = gtype; 

    IF setInSession() THEN {
        dataInSession(g) <- NULL;       
        setInSession() <- NULL;
    }      
} IMAGE 'print.png' IN print;

FORM dialogStocksBackSheet 'Выбор складов'

    TREE stockTree a = BPSTRING[3], sg = StockGroup PARENT parent(sg)
    PROPERTIES READONLY VALUE(a), name(sg)
    ORDERS name(sg)
    FILTERS stringEqualsAll(a)

    OBJECTS s = Stock
    PROPERTIES(s) READONLY id, name
    PROPERTIES (s) inBackSheetDialog
    ORDERS name(s)
    FILTERS isParent(sg, s) OR (s IS Stock AND NOT sg),
            isCompany(s),
            countCompanyStock(sg)

    FILTERGROUP inactiveStock FILTER 'Активный' active(s) 'ctrl F10' DEFAULT    
    FILTERGROUP select FILTER 'Отм.' inBackSheet(s) 'F9'
    
    EVENTS
        ON INIT {
            inBackSheetDialog(Stock st) <- inBackSheet(st);
        },
        ON OK {
            inBackSheet(Stock st) <- inBackSheetDialog(st);
        }
;

DESIGN dialogStocksBackSheet {
    BOX {
        size = (1024, 768);
        NEW topContainer {
            horizontal = TRUE;
            fill = 1;
            MOVE BOX(TREE stockTree) {
                caption = 'Склады';
            }
            MOVE BOX(s) {
                fill = 3;
                GRID(s) {
                    defaultComponent = TRUE;
                }
                PROPERTY(name(s)){
                    charWidth = 35;
                }
            }
        }
        MOVE TOOLBARBOX;
    }
}

@extendFormFilterStockAccess(s, dialogStocksBackSheet, company); 

changeStocksBalance(GroupType gt, DATETIME dt)  { 
    DIALOG dialogStocksBackSheet OBJECTS s INPUT DO {
        IF NOT (GROUP SUM 1 IF inBackSheet(Stock st)) THEN
            inBackSheet(s) <- TRUE;
        fillReportBalanceData(gt, dt);
    }
}

changeFillBalance(GroupType gt, DATETIME dt)  { 
    INPUT b = BOOLEAN DO {
        fillBatch() <- b;
        fillReportBalanceData(gt, dt);
    }
}

showMovementSkuBackSheet 'Показать движение товара по складу' (Sku sku)  { 
    NEWSESSION NESTED(inBackSheet) 
        SHOW movementSkuStock OBJECTS s = sku, st = (GROUP MIN Stock st IF inBackSheet(st)) ; 
}

showMovementPriceSkuBackSheet 'Показать изменение цены товара по складу' (Sku sku)  { 
    NEWSESSION NESTED(inBackSheet) 
        SHOW movementPriceSkuStock OBJECTS s = sku, st = (GROUP MIN Stock st IF inBackSheet(st)) ; 
}

showReserveSkuBackSheet 'Показать резерв товара по складу' (Sku sku)  { 
    NEWSESSION NESTED(inBackSheet) 
        SHOW orderSkuLedgerNotDate OBJECTS sk = sku, st = (GROUP MIN Stock st IF inBackSheet(st)) ;
}

showMovementBatchBackSheet 'Показать движение по партии и складу' (Batch batch)  { 
    NEWSESSION NESTED(inBackSheet)
        SHOW movementBatchStock OBJECTS bt = batch, st = (GROUP MIN Stock st IF inBackSheet(st)) ; 
}

showMovementSkuBackSheet 'Показать движение товара по складу' (Batch batch)  { 
    FOR s == sku(batch) DO
        NEWSESSION NESTED(inBackSheet)
            SHOW movementSkuStock OBJECTS s = s, st = (GROUP MIN Stock st IF inBackSheet(st)) ;
}

FORM reportBalanceStock 'Отчет по остаткам'
    OBJECTS d=DATETIME PANEL
    PROPERTIES(d) VALUE

    OBJECTS gt = GroupType PANEL
    PROPERTIES(gt) SELECTOR name
//    PROPERTIES sumBGroupTypeStockDate(gt, st ,d)
//    PROPERTIES(gt) READONLY sessionConcatGroups

    PROPERTIES inBackSheetStocks() ON CHANGE changeStocksBalance(gt, d)
    
    PROPERTIES filterGroups(), fillBatch() ON CHANGE changeFillBalance(gt, d)

    TREE skuTree sk = Group PARENT parent(sk)
    PROPERTIES inSession(sk) BACKGROUND backgroundInSession(sk)
    PROPERTIES READONLY order(sk), skuTreeName = name(sk)
    PROPERTIES(sk) READONLY recBalanceB, recSumB
    ORDERS order(sk), skuTreeName
    FILTERS groupType(sk) == gt
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F6' DEFAULT

    OBJECTS s = Sku
    PROPERTIES(s) READONLY id SHOWIF showIDs(), idBarcode, name ON CONTEXTMENU showMovementSkuBackSheet(s) ON CONTEXTMENU showMovementPriceSkuBackSheet(s), shortNameUOM
    ORDERS name(s)
    FILTERS isParent(sk, s)

    PROPERTIES(s) READONLY balanceB, sumB
    PROPERTIES(d, gt,sk) printListBalanceSkus, printBalanceSkus
    FILTERGROUP balance 
        FILTER 'С остатком (кол-во)' balanceB(s) 'F7' DEFAULT
        FILTER 'С остатком (кол-во/сумма)' balanceB(s) OR sumB(s) 'F8'   

    OBJECTS           bt=Batch
    PROPERTIES(bt)    SHOWIF fillBatch() READONLY date, name ON CONTEXTMENU showMovementBatchBackSheet(bt), idBarcodeSku, 
                      nameSku ON CONTEXTMENU showMovementSkuBackSheet(bt), shortNameUOM//, shippedQuantityBatch
    FILTERS           isParent(sk, bt)
    ORDERS          date(bt), name(bt), nameSku(bt)

    PROPERTIES(bt) SHOWIF fillBatch() READONLY balanceB
    FILTERS balanceB(bt)

    EVENTS 
        ON CHANGE gt fillReportBalanceData(gt, d),
        ON CHANGE d fillReportBalanceData(gt, d)
    EVENTS ON INIT {
        SEEK reportBalanceStock.gt = defaultGroupType() IF defaultGroupType();
    }
;

DESIGN reportBalanceStock {
    NEW topContainer{
        horizontal = TRUE;
        MOVE BOX(gt);        
        MOVE BOX(d);
        NEW stocks {
            caption = 'Склады';
            horizontal = TRUE;
            MOVE PROPERTY(inBackSheetStocks());        
        }
    }
    NEW optionsComtainer {
        horizontal = TRUE;
        MOVE PROPERTY (filterGroups());
        MOVE PROPERTY (fillBatch());
    }
    NEW bottomContainer {
        fill = 1;
        horizontal = TRUE;
        MOVE BOX(TREE skuTree);
        NEW tabContainer {
            fill = 3;
            tabbed = TRUE;
            NEW skuContainer{
                caption = 'Товары';
                NEW printSkuContainer{
                    horizontal = TRUE;
                    caption = 'Печать';
                    MOVE PROPERTY(printListBalanceSkus(d,gt,sk));
                    MOVE PROPERTY(printBalanceSkus(d,gt,sk));
                }
                MOVE BOX(s);
            }
            NEW batchContainer{
                caption = 'Партии';
                NEW printBatchContainer {
                    horizontal = FALSE;
                    caption = 'Печать';
                    NEW print1{
                        horizontal = TRUE;
                    }

                }
                MOVE BOX(bt);
            }
        }
    }
    MOVE TOOLBARBOX;
}

//-- Печатные формы для оборотной ведомости списком и по группам--//

FORM printListBackSheet 'Оборотная ведомость'
    OBJECTS df=DATE PANEL SUBREPORT
    PROPERTIES dateFrom = VALUE(df)

    OBJECTS dt=DATE PANEL
    PROPERTIES dateTo = VALUE(dt)

    PROPERTIES inBackSheetStocks()

    OBJECTS gt = GroupType PANEL
    PROPERTIES(gt) SELECTOR name
    PROPERTIES(gt) READONLY sessionConcatGroups
    PROPERTIES(gt) READONLY sumB, sumIn, sumOut, sumA

    OBJECTS s = Sku
    PROPERTIES(s) READONLY idBarcode, name, shortNameUOM
    ORDERS name(s)

    PROPERTIES(s) READONLY balanceB, sumB
    PROPERTIES(s) READONLY quantityIn, sumIn, quantityOut, sumOut
    PROPERTIES(s) READONLY balanceA, sumA
    FILTERS include(gt, s)
    FILTERS filterBalanceBAInOut (s)
    FILTERS s IS Sku AND df IS DATE AND dt IS DATE // фильтр, чтобы сохранилась старая иерархия
;

refreshLocalProp ABSTRACT LIST (DATE, DATE, GroupType);

printListBackSheet 'Списком' (DATE dateFrom, DATE dateTo, GroupType gt) { 
    refreshLocalProp(dateFrom,dateTo,gt);
    PRINT printListBackSheet OBJECTS df = dateFrom, dt = dateTo, gt = gt; 
}  IMAGE 'print.png' IN print;
xlsListBackSheet 'Списком (XLS)' (DATE dateFrom, DATE dateTo, GroupType gt) { 
    refreshLocalProp(dateFrom,dateTo,gt);
    PRINT printListBackSheet OBJECTS df = dateFrom, dt = dateTo, gt = gt XLS; 
} IMAGE 'print.png' IN print;

FORM printBackSheet 'Оборотная ведомость'
    OBJECTS df=DATE PANEL SUBREPORT
    PROPERTIES dateFrom = VALUE(df)

    OBJECTS dt=DATE PANEL
    PROPERTIES dateTo = VALUE(dt)

    PROPERTIES inBackSheetStocks()

    OBJECTS gt = GroupType PANEL
    PROPERTIES(gt) SELECTOR name
    PROPERTIES(gt) READONLY sessionConcatGroups
    PROPERTIES(gt) READONLY sumB, sumIn, sumOut, sumA

    OBJECTS sk = Group
    PROPERTIES READONLY canonicalName(sk)
    ORDERS canonicalName(sk)
    FILTERS countIncludeSku(sk, gt)
    FILTERS groupType(sk) == gt
    PROPERTIES(sk) READONLY sumB, sumIn, sumOut, sumA
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F6' DEFAULT
    FILTERS sk IS Group AND df IS DATE AND dt IS DATE // фильтр, чтобы сохранилась старая иерархия

    OBJECTS s = Sku
    PROPERTIES(s) READONLY idBarcode, name, shortNameUOM
    ORDERS name(s)
    FILTERS group(gt, s) == sk

    PROPERTIES(s) READONLY balanceB, sumB
    PROPERTIES(s) READONLY quantityIn, sumIn, quantityOut, sumOut
    PROPERTIES(s) READONLY balanceA, sumA
    FILTERS include(gt, s)
    FILTERS filterBalanceBAInOut (s)
    FILTERS s IS Sku AND df IS DATE AND dt IS DATE // фильтр, чтобы сохранилась старая иерархия
;

printBackSheet 'По группам' (DATE dateFrom, DATE dateTo, GroupType gt) { 
    refreshLocalProp(dateFrom,dateTo,gt);
    PRINT printBackSheet OBJECTS df = dateFrom, dt = dateTo, gt = gt; 
}  IMAGE 'print.png' IN print;

xlsBackSheet 'По группам (XLS)' (DATE dateFrom, DATE dateTo, GroupType gt) { 
    refreshLocalProp(dateFrom,dateTo,gt);
    PRINT printBackSheet OBJECTS df = dateFrom, dt = dateTo,  gt=gt XLS; 
} IMAGE 'print.png' IN print;

fillDocumentReport 'Подбор документа'(GroupType gt, DATE df, DATE dt)  { 
    DIALOG documents DO {
        include(Sku sku) <- TRUE WHERE [GROUP SUM 1 IF inSession(document(DocumentDetail d)) BY sku(d)](sku);
        formRefresh();
        fillReportBackSheetFromTo(gt, df, dt);
    }
} TOOLBAR;

deleteInDataSessionReport 'Очистить выборку'(GroupType gt, DATE df, DATE dt)  { 
    include(Sku sku) <- NULL;
    formRefresh();
    fillReportBackSheetFromTo(gt, df, dt);
} TOOLBAR;
   
changeStocksBackSheet(GroupType gt, DATE df, DATE dt)  { 
    DIALOG dialogStocksBackSheet OBJECTS s INPUT DO {
        IF NOT (GROUP SUM 1 IF inBackSheet(Stock st)) THEN
            inBackSheet(s) <- TRUE;
        fillReportBackSheetFromTo(gt, df, dt);
    }
}

backgroundReportBackSheet  = ABSTRACT CASE COLOR (Sku);

FORM reportBackSheet 'Отчет по товарообороту'
    OBJECTS df=DATE PANEL
    PROPERTIES dateFrom = VALUE(df)

    OBJECTS dt=DATE PANEL
    PROPERTIES dateTo = VALUE(dt)

    OBJECTS gt = GroupType PANEL
    PROPERTIES(gt) SELECTOR name
    PROPERTIES (gt) READONLY sumB, sumIn, sumOut, sumA

    PROPERTIES inBackSheetStocks() ON CHANGE changeStocksBackSheet(gt, df, dt)

    TREE skuTree sk = Group PARENT parent(sk)
    PROPERTIES inSession(sk) BACKGROUND backgroundInSession(sk)
    PROPERTIES READONLY order(sk), skuTreeName = name(sk)
    PROPERTIES(sk) READONLY recSumB, recSumIn, recSumOut, recSumA
    ORDERS order(sk), skuTreeName
    FILTERS groupType(sk) == gt
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F6' DEFAULT

    OBJECTS s = Sku
    PROPERTIES(gt,s) include BACKGROUND backgroundInclude(gt,s)
    PROPERTIES(s) READONLY BACKGROUND backgroundReportBackSheet(s) idBarcode, name  ON CONTEXTMENU showMovementSkuBackSheet(s) ON CONTEXTMENU showMovementPriceSkuBackSheet(s) ON CONTEXTMENU showReserveSkuBackSheet(s), shortNameUOM
    ORDERS name(s)
    
    PROPERTIES(s) READONLY BACKGROUND backgroundReportBackSheet(s) balanceB, sumB
    PROPERTIES(s) READONLY BACKGROUND backgroundReportBackSheet(s) quantityIn, sumIn, quantityOut, sumOut
    PROPERTIES(s) READONLY BACKGROUND backgroundReportBackSheet(s) balanceA, sumA
    PROPERTIES(df, dt, gt) printListBackSheet, xlsListBackSheet, printBackSheet, xlsBackSheet

    FILTERGROUP include FILTER 'Отмеченные' include(gt, s) DEFAULT 
    
    FILTERS filterBalanceBAInOut (s)    
    PROPERTIES(gt, df, dt) DRAW s fillDocumentReport, deleteInDataSessionReport
    
    EVENTS 
        ON CHANGE gt fillReportBackSheetFromTo(gt, df, dt), 
        ON CHANGE df fillReportBackSheetFromTo(gt, df, dt), 
        ON CHANGE dt fillReportBackSheetFromTo(gt, df, dt)
    EVENTS ON INIT {
        SEEK reportBackSheet.gt = defaultGroupType() IF defaultGroupType();
    }
;

onInitReportBackSheet()  { 
    IF countAccessCompanyStock(currentUser()) ==1 THEN {
        inBackSheet(Stock st)  <- TRUE WHERE  defaultCompanyStock(currentUser())== st; 
        fillReportBackSheetFromTo(SystemGroupType.skuGroupType,currentDate(),currentDate());
    }    
}

EXTEND FORM reportBackSheet 
    EVENTS 
        ON INIT onInitReportBackSheet()
;

DESIGN reportBackSheet {
    NEW topContainer {
        horizontal = TRUE;
        NEW dates {
            horizontal = TRUE;
            caption = 'Период';
            MOVE PROPERTY(dateFrom){caption = 'Дата (с)';}
            MOVE PROPERTY(dateTo){caption = 'Дата (по)';}
        }
        MOVE BOX(gt);
        NEW stocks {
            caption = 'Склады';
            horizontal = TRUE;
            MOVE PROPERTY(inBackSheetStocks());        
        }
    }
    NEW sumContainer{
        horizontal = TRUE;
        caption = 'Итоговые суммы';
        MOVE PROPERTY(sumB(gt)){caption = 'Начала периода';}
        MOVE PROPERTY(sumIn(gt)){caption = 'Товара пришедшего за период';}
        MOVE PROPERTY(sumOut(gt)){caption = 'Товара ушедшего за период';}
        MOVE PROPERTY(sumA(gt)){caption = 'Конца периода';}
    }
    NEW bottomContainer {
        fill = 1;
        horizontal = TRUE;

        MOVE BOX(TREE skuTree);

        NEW tabContainer {
            fill = 2;
            tabbed = TRUE;
            NEW skuContainer{
                caption = 'Товары';
                NEW printSkuContainer {
                    horizontal = TRUE;
                    caption = 'Печать';
                    MOVE PROPERTY(printListBackSheet(df,dt,gt));
                    MOVE PROPERTY(xlsListBackSheet(df,dt,gt));
                    MOVE PROPERTY(printBackSheet(df,dt,gt));
                    MOVE PROPERTY(xlsBackSheet(df,dt,gt));
                }
                MOVE BOX(s);
                PROPERTY(balanceB(s)){caption = 'Остаток на начало периода';}
                PROPERTY(sumB(s)){caption = 'Сумма на начало периода';}
                PROPERTY(balanceA(s)){caption = 'Остаток на конец периода';}
                PROPERTY(sumA(s)){caption = 'Сумма на конец периода';}
            }
        }
    }
    MOVE TOOLBARBOX;
}

NAVIGATOR {
    stockReports{
        NEW reportBalanceStock;
        NEW reportBackSheet;
    }
}