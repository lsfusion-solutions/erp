MODULE BlanketOrder;

REQUIRE Order;

//----------------------------------------------- Множественнвй Заказ ---------------------------------------------------//

META defineBlanketOrder(sign, supplierFilter, customerFilter, NS)

    CLASS BlanketOrder 'Множественный заказ'###sign;
    CLASS BlanketOrderDetail 'Строка множественного заказа'###sign;

    CLASS BlanketOrderClosed 'Закрытый множественный заказ'###sign : BlanketOrder;

    @defineDocument(blanketOrder);
    @deriveDocumentHeaderTimePrefix(BlanketOrder, );
    @defineDocumentHeaderLegalEntity (blanketOrder, supplier, 'Поставщик');
    @defineDocumentHeaderLegalEntity (blanketOrder, customer, 'Покупатель');
    @defineDocumentDetailLegalEntity (blanketOrder, blanketOrderDetail, supplier, 'Поставщик');
    @defineDocumentDetailLegalEntity (blanketOrder, blanketOrderDetail, customer, 'Покупатель');

    @defineDocumentHeaderStock(blanketOrder, stock, 'Склад поставщика', supplier);
    @defineDocumentDetailDataStock (blanketOrder, stock, supplierStock, 'Склад поставщика');

    CONSTRAINT supplier(BlanketOrder blanketOrder) AND supplierStock(blanketOrder) AND NOT
    in(supplier(blanketOrder), supplierStock(blanketOrder))
        CHECKED BY supplier[BlanketOrder], supplierStock[BlanketOrder]
            MESSAGE 'Поставщик и склад поставщика для множественного заказа не имеют связи';

    @defineDocumentPosted(blanketOrder);
    @defineDocumentClosed (blanketOrder);

    @defineDocumentDataTimePrefix (blanketOrder, shipment, ' поставки');

    @defineDocumentHeaderNumber(BlanketOrder, BPSTRING[2]);
    
    @defineNumeratedDefault(BlanketOrder, 'Множественные заказы'###sign, 'ЗМ');
    @defineDocumentDescription(blanketOrder, 'Множественный заказ'###sign);

    @defineDocumentCurrency (blanketOrder);
    @deriveDocumentCurrency(blanketOrder, supplierStock);

    TABLE blanketOrderStock(BlanketOrder, Stock);

    customerFilter##Stock (blanketOrderDetail) = DATA Stock (BlanketOrderDetail);
    name###customerFilter##Stock 'Склад покупателя' (BlanketOrderDetail blanketOrderDetail) = name(customerFilter##Stock(blanketOrderDetail));

    closeDate 'Дата автоматического закрытия' = DATA DATE (BlanketOrder) IN documentPrm;
    closeDate(BlanketOrder o) <- sum(shipmentDate(o), quantityDaysCloseOrders(supplierStock(o)))
        WHEN CHANGED(shipmentDate(o)) OR CHANGED(supplierStock(o));    
    
    closeDataDate 'Дата автоматического закрытия' = DATA DATE (BlanketOrderDetail) IN documentPrm;

    closeDate 'Дата автоматического закрытия' (BlanketOrderDetail detail) = OVERRIDE closeDataDate(detail), closeDate(blanketOrder(detail)) MATERIALIZED;

    closeDataDate(BlanketOrderDetail detail) <- sum(shipmentDate(detail), quantityDaysCloseOrders(customerFilter##Stock(detail)))
        WHEN CHANGED(shipmentDate(detail)) OR CHANGED(customerFilter##Stock(detail));    

    defaultClosed(BlanketOrderDetail detail) = closeDate(detail) < currentDate();
    WHEN SET (closeDate(BlanketOrder order) <= currentDate()) DO close(order);    

    @defineDocumentDetailSku(blanketOrder, sku);
    @defineDocumentDetailQuantity(blanketOrder);
    CONSTRAINT negativeValueOrders() AND BlanketOrderDetail detail IS BlanketOrderDetail AND quantity(detail) < 0
        MESSAGE 'Количество в строке заказа должно быть не отрицательным';

    quantityBlanketOrderDetail###customerFilter 'Кол-во (всего)' (blanketOrder, customerStock) = 
        GROUP SUM quantity(BlanketOrderDetail idetail) 
              BY blanketOrder(idetail), customerFilter##Stock(idetail) 
              IN documentSum;
              
    @defineDocumentHeaderQuantity(blanketOrder);

    quantityBlanketOrderDetail###customerFilter 'Кол-во товара в документе' (sku, blanketOrder, customerStock) = 
        GROUP SUM quantity(BlanketOrderDetail idetail)
              BY  sku(idetail),
                  blanketOrder(idetail),
                  customerFilter##Stock(idetail);

    @defineDocumentHeaderSkuQuantity(blanketOrder, sku);

    countBlanketOrderDetail 'Кол-во строк по складу '(stock, blanketOrder) = GROUP SUM 1 BY supplierStock(BlanketOrderDetail blanketOrderDetail), blanketOrder(blanketOrderDetail);
    in 'В заказе' (blanketOrder, stock) = DATA BOOLEAN (BlanketOrder, Stock); //customerStock
    in###customerFilter 'Отм.' (BlanketOrder blanketOrder, Stock stock) = in(customerFilter(blanketOrder), stock);
    replace(Stock s, Stock o) + { in(BlanketOrder blanketOrder, o) <- TRUE WHERE in(blanketOrder, s) AND NOT in(blanketOrder, o);}   

    @defineDocumentHeaderAgreement (blanketOrder);
    @deriveDocumentHeaderAgreement (blanketOrder, supplier, customer, 'множественный заказ'###sign, NS);

    @defineDocumentInterfaceHeaderAgreement (BlanketOrder, Stock, supplier, customer);

    priceListType (blanketOrder, stock) = DATA PriceListType (BlanketOrder, Stock);
    namePriceListType 'Вид цены' (BlanketOrder blanketOrder, Stock stock) = name(priceListType (blanketOrder, stock)) IN documentPrm CHARWIDTH 5;
    backgroundPriceListType (BlanketOrder blanketOrder, Stock stock) = RGB(200,200,200) IF agreement (blanketOrder, stock);

    @defineDocumentDetailPrice(blanketOrder); // объявляем цену без НДС

    @defineDocumentDetailVAT(blanketOrder, countrySupplierStock); // объявляем шкалу
    // записываем значение ставки
    overVAT = ABSTRACT VALUE Range (BlanketOrderDetail);
    overVAT(BlanketOrderDetail d) += VAT (sku(d), country(supplierStock(d)));
    
    WHEN LOCAL
        (CHANGED(sku(BlanketOrderDetail detail)) OR CHANGED (supplierStock(detail)) OR 
         CHANGED(overVAT(detail))) AND NOT CHANGED(VAT(detail)) DO {
            VAT(detail) <- overVAT(detail);
        } 
    @deriveDocumentDetailValueVAT(blanketOrder);
    
    @defineDocumentDetailPriceCustomPrefix (blanketOrderDetail, invoice, ' с НДС'); // объявляем цену с НДС

    // объявляем Action'ы для ON CHANGE по изменению цен
    @defineDocumentDetailPriceVATOnChange(blanketOrder);
    @defineDocumentDetailNumberVATOnChange(blanketOrder, supplierStock);
    @defineDocumentDetailValueVATOnChange(blanketOrder);
    @defineDocumentDetailInvoicePriceVATOnChange(blanketOrder);

    //  объявляем виды цен
    @defineDocumentDetailPriceListType(blanketOrder, blanketOrderDetail);

    priceListType (BlanketOrder blanketOrder, Stock stock, Sku sku) =
        IF agreement(blanketOrder, stock) THEN
            priceListType(agreement(blanketOrder, stock), sku)
        ELSE
            priceListType(blanketOrder, stock) IF sku IS Sku;
    // записываем вид цены из соглашения
     priceListType (BlanketOrderDetail detail) <- IF agreement (blanketOrder(detail), customerFilter##Stock(detail))
        THEN priceListType(agreement(blanketOrder(detail), customerFilter##Stock(detail)), sku(detail))
        ELSE priceListType(blanketOrder(detail), customerFilter##Stock(detail))
     WHEN CHANGED(agreement(blanketOrder(detail), customerFilter##Stock(detail))) OR
          CHANGED(priceListType(blanketOrder(detail), customerFilter##Stock(detail)));
//    @deriveDocumentDetailPricePriceListTypeVAT (blanketOrder, supplierStock); // записываем цены с НДС и без НДС на основе priceListType

    @defineDocumentDetailDataSum (blanketOrder); // объявляем сумму без НДС
    @deriveDocumentDetailSum(blanketOrder, quantity);

    @defineDocumentDetailVATDataSum (blanketOrder, invoice); // объявляем суммы НДС и с НДС
    @deriveDocumentDetailVATDataSum(blanketOrder); // записываем сумму НДС
    @deriveDocumentDetailVATPrefixSum (blanketOrder, invoice); // записываем сумму с НДС

    @defineDocumentHeaderVATSum (blanketOrder, blanketOrderDetail, invoice);

    sumBlanketOrderDetail###customerFilter 'Сумма' (blanketOrder, customerStock) = 
        GROUP SUM sum(BlanketOrderDetail idetail) 
              BY blanketOrder(idetail), 
                 customerFilter##Stock(idetail)  
              IN documentSum;

    @defineDocumentHeaderSum (blanketOrder);

    countBlanketOrderDetail###customerFilter 'Количество строк в документе' (order, stock) =
        GROUP SUM 1 BY blanketOrder(BlanketOrderDetail d), customerFilter##Stock(d) MATERIALIZED IN documentSum;

    CONSTRAINT customerFilter##Stock(BlanketOrderDetail blanketOrderDetail) AND NOT in(blanketOrder(blanketOrderDetail), customerFilter##Stock(blanketOrderDetail))
        CHECKED BY customerFilter##Stock[BlanketOrderDetail]
            MESSAGE 'Для строки множественного заказа выбран склад не включенный в заказ';

    customerFilter##Stocks 'Контрагенты'(BlanketOrder blanketOrder)  =
        GROUP
        CONCAT name(Stock stock) IF in(blanketOrder, stock), ', '
        ORDER stock CHARWIDTH 20 MATERIALIZED;

    number '{numerator.number.numerator}' = DATA STRING[48] (BlanketOrder, Stock) CHARWIDTH 8;
    series '{numerator.series.numerator}' = DATA BPSTRING[2] (BlanketOrder, Stock) CHARWIDTH 3 NOFLEX;
    seriesNumber '{numerator.series.number.numerator}' (BlanketOrder blanketOrder, Stock stock) = CONCAT '', series(blanketOrder, stock), number(blanketOrder, stock) CHARWIDTH 8 MATERIALIZED;

    numerator = DATA Numerator (BlanketOrder, Stock);
    nameNumerator '{numerator.numerator}' (BlanketOrder blanketOrder, Stock stock) = name(numerator(blanketOrder, stock)) CHARWIDTH 7;

    setValueSessionNumerated '{numerator.generate.number}'(BlanketOrder blanketOrder, Stock stock)  { 
        number(blanketOrder, stock) <- curStringValue(numerator(blanketOrder, stock));
        series(blanketOrder, stock) <- series(numerator(blanketOrder, stock));
        EXEC incrementValueSession(numerator(blanketOrder, stock));
    } ASON CONTEXTMENU number[BlanketOrder,Stock];

    WHEN CHANGED(numerator(BlanketOrder blanketOrder, Stock stock)) AND
         NOT CHANGED(number(blanketOrder, stock)) AND
         NOT CHANGED(series(blanketOrder, stock))
         DO EXEC setValueSessionNumerated(blanketOrder, stock);

    @defineMovementSku(blanketOrderDetail, supplierStock); //-- показываем по нажатию правой клавиши движение товара
    @defineBalancesSku(blanketOrderDetail); //-- показываем по нажатию правой клавиши остатки товара
    @defineBarcodeSku(blanketOrderDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара 
    @defineMovementPriceSku(blanketOrderDetail, supplierStock); //-- показываем по нажатию правой клавиши изменение цены товара
    @defineInfoSku(blanketOrderDetail); //-- показываем по нажатию правой клавиши информацию по товару

    @defineDocumentDialogStock(blanketOrder, supplierFilter, supplier, );
    @defineDocumentDialogStockEx(blanketOrderDetail, customerFilter, customer, );
    @defineDocumentDialogSupplierCustomerLegalEntity(blanketOrder, supplierFilter, customerFilter);
// --------------------------- Формы Заказа ---------------------------------

    FORM blanketOrder 'Множественный заказ'###sign
        OBJECTS o = BlanketOrder PANEL
        PROPERTIES (o) isPosted, nameSupplier ON CHANGE changeSupplier###supplierFilter(o),
                       nameSupplierStock ON CHANGE changeSupplierStock###supplierFilter(o),
                       nameNumerator, number, series, date, time,
                       nameCurrency, note,
                       name###customerFilter ON CHANGE change###customerFilter###customerFilter(o), nameAgreement,
                       countBlanketOrderDetail, quantityBlanketOrderDetail, sumBlanketOrderDetail,
                       VATSumBlanketOrderDetail, invoiceSumBlanketOrderDetail, shipmentDate, 
                       shipmentTime, closeDate

        OBJECTS d = BlanketOrderDetail
        PROPERTIES (d) index, idBarcodeSku, nameSku, shortNameUOMSku,
                       quantity, namePriceListType,

                       price ON CHANGE changePrice(d), sum,
                       numberVAT ON CHANGE changeNumberVAT(d),
                       valueVAT ON CHANGE changeValueVAT(d),
                       invoicePrice ON CHANGE changeInvoicePrice(d),
                       VATSum, invoiceSum,
                       nameSupplierStock,
                       name###customerFilter##Stock ON CHANGE change###customerFilter##Stock###customerFilter(d),
                       shipmentDate, shipmentTime, NEW, DELETE GRID

        OBJECTS c = Stock
        PROPERTIES     name(c) READONLY, in(o,c)
        PROPERTIES(o,c) nameNumerator, number, series,
                        nameAgreement, namePriceListType BACKGROUND backgroundPriceListType(o, c)
        PROPERTIES(o,c) READONLY countBlanketOrderDetail###customerFilter, quantityBlanketOrderDetail###customerFilter, sumBlanketOrderDetail###customerFilter

        PROPERTIES(o) DRAW d deleteBlanketOrderDetail

        FILTERS blanketOrder(d) == o,
                in###customerFilter(o,c)
        FILTERGROUP inactiveStock FILTER 'Активный' active(c) 'ctrl F10' DEFAULT
        EVENTS
            ON OK prePost(o)

        EDIT BlanketOrder OBJECT o
    ;

    DESIGN blanketOrder {

        BOX {
            size = (1024, 768);
            NEW headerBox {
                type = CONTAINERH;

                NEW headerRow1 {
                    fill = 1;
                    type = CONTAINERV;

                    MOVE GROUP(documentHeader,o) {
                        columns = 1;
                        type = CONTAINERH;
                        MOVE PROPERTY(isPosted(o)) { charWidth = 10; }
                        MOVE PROPERTY(nameNumerator(o));
                        MOVE PROPERTY(number(o));
                        MOVE PROPERTY(series(o));
                        MOVE PROPERTY(date(o));
                        MOVE PROPERTY(time(o));
                    }
                    NEW headerRow11 {
                        type = CONTAINERH;
                        NEW headerRow111 {
                            type = CONTAINERH;
                            caption = 'Поставщик';
                            MOVE PROPERTY(nameSupplier(o));
                            MOVE PROPERTY(nameSupplierStock(o));
                        }
                        NEW headerRow112 {
                            caption = 'Покупатель';
                            type = CONTAINERH;
                            MOVE PROPERTY(name###customerFilter(o));
                        }
                    }
                    NEW headerRow12 {
                        type = CONTAINERH;
                        MOVE GROUP(documentPrm,o) {
                            columns = 2;
                        }
                        NEW documentShipmentGroup {
                            caption = 'Исполнение';
                            type = COLUMNS;
                            columns = 1;
                            MOVE PROPERTY(shipmentDate(o));
                            MOVE PROPERTY(shipmentTime(o));
                        }
                    }
                }
                MOVE GROUP(documentSum,o) {
                    columns = 1;
                }
            }

            NEW specificationBox {
                fill = 1;
                type = TABBED;
                MOVE BOX(c) {caption = 'Контрагент';}
                MOVE BOX(d) {caption = 'Спецификация';}
            }

            MOVE TOOLBARBOX;

            PROPERTY(formOk()) {
                caption = 'Провести';
            }
            PROPERTY(sumBlanketOrderDetail(o)) { charWidth = 13;}
            PROPERTY(VATSumBlanketOrderDetail(o)) { charWidth = 13;}  
            PROPERTY(invoiceSumBlanketOrderDetail(o)) { charWidth = 13;}            
        }
    }

    edit(BlanketOrderDetail d) + {  DIALOG blanketOrder OBJECTS o = blanketOrder(d), d = d DOCKED; }

//-- SKU
    @defineDocumentSkuStockExtra(blanketOrder, sku, supplierStock, customerStock);
    @extendFormDocumentSkuStockExtraCustom(blanketOrder, blanketOrder, o, supplier, supplierStock, customerStock);
    
    currentBlanketOrderBlanketOrder() = DATA LOCAL Object ();
    setCurrentBlanketOrderBlanketOrder(Object o)  { currentBlanketOrderBlanketOrder() <- o; }
    
    EXTEND FORM blanketOrder
        EVENTS ON CHANGE o setCurrentBlanketOrderBlanketOrder(o)
    ;

    WHEN LOCAL FORMS blanketOrder ((CHANGED(in(BlanketOrder o, Stock cs)) OR 
                                CHANGED(priceListType(o, cs)) OR 
                                CHANGED(agreement(o, cs))) AND [ VIEW blanketOrder.sts](Stock stock, Sku sku))
                            OR (
                            ((SET([ VIEW blanketOrder.sts](stock, sku)) AND currentBlanketOrderBlanketOrder() == o) OR 
                            (CHANGED(dateTime(o)) AND [ VIEW blanketOrder.sts](stock, sku))) AND in(o, cs)) DO 
        updateViewPrice###customerFilter(sku, stock, o, cs);
    ;      
        
    @defineDocumentSkuStockSupplier (blanketOrder, blanketOrder, o);
    
    overCopy  ABSTRACT LIST ( BlanketOrder, BlanketOrder);
    overCopy  ABSTRACT LIST ( BlanketOrderDetail, BlanketOrderDetail);
    copy 'Копировать'(BlanketOrder order)  { 
	NEWSESSION {
	        NEW o = BlanketOrder {
	            supplier(o) <- supplier(order);
	            supplierStock(o) <- supplierStock(order);
	            customerFilter(o) <- customerFilter(order);
	            
	            in(o,Stock stock) <- in(order,stock) WHERE stock IS Stock;
	            agreement(o,Stock stock) <- agreement(order,stock) WHERE stock IS Stock;
	            priceListType(o,Stock stock) <- priceListType(order,stock) WHERE stock IS Stock;
	            
	            currency(o) <- currency(order);
	            agreement(o) <- agreement(order);
	            note(o) <- note(order);
	
	            EXEC overCopy(o, order);
	
	            FOR blanketOrder(BlanketOrderDetail detail) == order DO {
	                NEW d=BlanketOrderDetail {
	                    blanketOrder(d) <- o;
	                    sku(d) <- sku(detail);
	                    quantity(d) <- quantity(detail);
	                    
	                    customerFilter##Stock(d) <- customerFilter##Stock(detail);
	                    
	                    overCopy(d, detail);
	                }
	            }
	
	            SHOW blanketOrder OBJECTS o = o DOCKED;
	        }
	    }
} TOOLBAR;

    FORM blanketOrders 'Множественные заказы' 
        OBJECTS o = BlanketOrder LAST
        PROPERTIES (o) READONLYIF isReadonly() isClosed, isPosted, number, series, date, time,
                                nameSupplier, nameSupplierStock, name###customerFilter, nameCurrency
        PROPERTIES (o) READONLY countBlanketOrderDetail, quantityBlanketOrderDetail, sumBlanketOrderDetail,
                                VATSumBlanketOrderDetail, invoiceSumBlanketOrderDetail
        PROPERTIES (o) READONLYIF isReadonly() shipmentDate, shipmentTime, customerFilter##Stocks,
                                note

        PROPERTIES (o) READONLY PANEL createdNameUser, createdTime, createdHostnameComputer, 
                                            postedNameUser, postedTime, postedHostnameComputer

        PROPERTIES (o) NEWSESSION NEW, EDIT SHOWIF isOpened(o), copy
        PROPERTIES (o) close SHOWIF isOpened(o), open SHOWIF isClosed(o)
        PROPERTIES (o) NEWSESSION deleteo=DELETE SHOWIF isOpened(o)
        


        OBJECTS d=BlanketOrderDetail
        PROPERTIES (d) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku,
                       quantity, namePriceListType,
                       price, sum,
                       numberVAT, valueVAT, VATSum, invoiceSum,
                       nameSupplierStock, name###customerFilter##Stock,
                       shipmentDate, shipmentTime


        FILTERS blanketOrder(d) == o
        LIST BlanketOrder OBJECT o
    ;

    DESIGN blanketOrders 'Множественные заказы'###sign {
        NEW documentContainer BEFORE TOOLBARBOX {
            fill = 1;
            type = SPLITV;

            MOVE BOX(o) { fill = 2; }

            NEW documentDetail {
                fill = 1;
                type = TABBED;

                MOVE BOX(d) {
                    caption = 'Спецификация';
                }
                NEW documentHistory {
                    caption = 'История';

                    MOVE GROUP(created,o);
                    MOVE GROUP(posted,o);
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                    }
                }
            }
        }
    }
    @extendFormEditable(blanketOrders);
    @defineFilterIsOpened (blanketOrder, blanketOrders, o);
END

META defineOrderBlanketOrder(sign)

    CLASS BlanketOrderOrder 'Заказ на основе множественного'###sign : Order;
    CLASS BlanketOrderOrderDetail 'Строка заказа на основе множественного'###sign : OrderDetail;

    @defineDocumentTables(blanketOrderOrder);

    needToOrder (BlanketOrderDetail blanketOrderDetail, Stock stock) = quantity(blanketOrderDetail)
        AND isPosted(blanketOrderDetail) AND customerStock(blanketOrderDetail) == stock;

    needToOrder (BlanketOrder blanketOrder, Stock stock) = quantityBlanketOrderDetailCustomer(blanketOrder, stock)
        AND isPosted(blanketOrder);

//-- object
    blanketOrderOrder = AGGR BlanketOrderOrder WHERE needToOrder(BlanketOrder blanketOrder, Stock stock) MATERIALIZED INDEXED;

    supplier(BlanketOrderOrder order) += supplier(blanketOrder(order));
    customer(BlanketOrderOrder order) += customer(blanketOrder(order));

    @defineDocumentAggregationHeaderStock (blanketOrder, blanketOrderOrder, stock, supplier, 'Склад поставщика');
    supplierStock(BlanketOrderOrder order) += supplierStock(order);

    customerStock(BlanketOrderOrder order) += stock(order);

    shipmentDate(BlanketOrderOrder order) += shipmentDate(blanketOrder(order));
    shipmentTime(BlanketOrderOrder order) += shipmentTime(blanketOrder(order));

    currency(BlanketOrderOrder order) += currency(blanketOrder(order));
    priceListType(BlanketOrderOrder order) += priceListType(blanketOrder(order), stock(order));

    @defineDocumentAggregationHeaderNote (blanketOrder, blanketOrderOrder);
    note(BlanketOrderOrder order) += note(order);

    series(BlanketOrderOrder order) += series(blanketOrder(order), stock(order));
    number(BlanketOrderOrder order) += number(blanketOrder(order), stock(order));
    seriesNumber 'Серия/Номер' (BlanketOrderOrder blanketOrderOrder) = CONCAT '',
        series(blanketOrder(blanketOrderOrder), stock(blanketOrderOrder)),
        number(blanketOrder(blanketOrderOrder), stock(blanketOrderOrder));

//-- detail
    blanketOrderOrderDetail = AGGR BlanketOrderOrderDetail WHERE needToOrder(BlanketOrderDetail blanketOrderDetail, Stock stock) MATERIALIZED INDEXED;

    blanketOrderOrder (BlanketOrderOrderDetail blanketOrderOrderDetail) =
        blanketOrderOrder(blanketOrder(blanketOrderDetail(blanketOrderOrderDetail)),
                                           customerStock(blanketOrderDetail(blanketOrderOrderDetail)));
    order(BlanketOrderOrderDetail detail) += blanketOrderOrder(detail);

    @defineDocumentHeaderCount(blanketOrderOrder);
    @defineDocumentDetailIndex(blanketOrderOrder);

    @defineDocumentAggregationTime(blanketOrder, blanketOrderOrder);
    date(BlanketOrderOrder order) += date(order);
    time(BlanketOrderOrder order) += time(order);

    @defineDocumentAggregationPosted(blanketOrder, blanketOrderOrder);
    isPosted(BlanketOrderOrder order) += isPosted(order);
    
    @defineDocumentAggregationClosed(blanketOrder, blanketOrderOrder);
    isClosed(BlanketOrderOrder order) += isClosed(order);
    
    @defineDocumentAggregationDetailSku (blanketOrder, blanketOrderOrder, sku);
    sku(BlanketOrderOrderDetail detail) +=  sku(detail);

    @defineDocumentAggregationDetailQuantity (blanketOrder, blanketOrderOrder);
    quantity(BlanketOrderOrderDetail detail) +=  quantity(detail);

    shipmentDataDate(BlanketOrderOrderDetail detail) += shipmentDataDate(blanketOrderDetail(detail));
    shipmentDataTime(BlanketOrderOrderDetail detail) += shipmentDataTime(blanketOrderDetail(detail));

    priceListType(BlanketOrderOrderDetail detail) += priceListType(blanketOrderDetail(detail));

    price(BlanketOrderOrderDetail detail) += price(blanketOrderDetail(detail));
    sum(BlanketOrderOrderDetail detail) += sum(blanketOrderDetail(detail));

    VAT(BlanketOrderOrderDetail detail) += VAT(blanketOrderDetail(detail));
    valueVAT(BlanketOrderOrderDetail detail) += valueVAT(blanketOrderDetail(detail));

    invoicePrice(BlanketOrderOrderDetail detail) += invoicePrice(blanketOrderDetail(detail));

    invoiceSum(BlanketOrderOrderDetail detail) += invoiceSum(blanketOrderDetail(detail));
    VATSum(BlanketOrderOrderDetail detail) += VATSum(blanketOrderDetail(detail));

    edit(BlanketOrderOrder order) + {  edit(blanketOrder(order)); }
    createdUser(BlanketOrderOrder order) += createdUser(blanketOrder(order));

END

// Партии приход
META defineBlanketOrderBatch(legalEntityProp, stockProp, stockExtra)
    @defineDocumentDetailBatch(blanketOrder, batch);
    idBatch 'Код партии' (BlanketOrderDetail d) = id(batch(d));
    overCopy(BlanketOrderDetail d, BlanketOrderDetail detail) + {       
        batch(d) <- batch(detail);
    } 

//    overCopyUserOrderDetail(d, detail) += (d, detail) {      
//        batchUserOrderDetail(d) <- batchUserOrderDetail(detail);
//    } 

    // Пишем в цену заказа из вида цен в зависимости от партии
    @deriveDocumentDetailPricePriceListTypeVATBatch(blanketOrder, stockProp, blanketOrder);

    // История по правой кнопке
    @defineBalancesBatch(blanketOrderDetail); //-- показываем по нажатию правой клавиши остатки партии
    @defineMovementBatch(blanketOrderDetail, stockProp); //-- показываем по нажатию правой клавиши движение по партии


    // Подбор
    @defineDocumentBatchStockExtraPriceListTypeAgreement(blanketOrder, stockProp, stockExtra);      
    @extendFormDocumentBatchStockExtraCustom(blanketOrder, blanketOrder, o, legalEntityProp, stockProp, stockExtra);
END

META defineBlanketOrderBatchDialogStock(stockProp)
    changeBatch(BlanketOrderDetail blanketOrderDetail)  { 
        DIALOG dialogBatchStockOut OBJECTS st = stockProp(blanketOrderDetail),
                                      t = dateTime(blanketOrderDetail),
                                      sk = sku(blanketOrderDetail),
                                      bt = batch(blanketOrderDetail) INPUT NULL NEWSESSION DO 
            batch(blanketOrderDetail) <- bt;
    }

    EXTEND FORM blanketOrder
        PROPERTIES (d) AFTER shortNameUOMSku(d) idBatch, nameBatch ON CHANGE changeBatch(d)
    ;
    EXTEND FORM blanketOrders PROPERTIES (d) READONLY AFTER shortNameUOMSku(d) idBatch, nameBatch;
END

