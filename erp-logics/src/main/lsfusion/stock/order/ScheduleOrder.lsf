MODULE ScheduleOrder;

REQUIRE System,
        Time,
        Utils,
        Historizable,
        Stock,
        Numerator,
        Document,
        Order;

CLASS GenType 'Тип генерации' {
    genDays 'Генерация через N дней',
    genNumber 'Генерация по числам',
    genDayMonth 'Генерация по дням недели и месяца'
}
FORM genTypes 'Типы генерации графиков'
    OBJECTS t = GenType
    PROPERTIES(t) READONLY staticCaption
    LIST GenType OBJECT t
;

CLASS ABSTRACT ScheduleOrder 'График';
TABLE scheduleOrder(ScheduleOrder);
TABLE sessionScheduleOrder(Session, ScheduleOrder);

CLASS ABSTRACT ScheduleOrderDetail 'Заказ по графику';
TABLE scheduleOrderDetail(ScheduleOrderDetail);
TABLE sessionScheduleOrderDetail(Session, ScheduleOrderDetail);

show 'Просмотреть'  ABSTRACT MULTI ( ScheduleOrder) TOOLBAR;

//isClosedScheduleOrderDetail 'Аннулирован' = ABSTRACT BOOLEAN (ScheduleOrderDetail);
//isOpenedScheduleOrderDetail= d IS ScheduleOrderDetail AND NOT isClosedScheduleOrderDetail(d);

scheduleOrder = ABSTRACT ScheduleOrder (ScheduleOrderDetail)MATERIALIZED;

operation = ABSTRACT Operation.Operation (ScheduleOrder) MATERIALIZED;
nameOperation 'Операция' (ScheduleOrder scheduleOrder) = name(operation(scheduleOrder));

startDate 'Дата начала' = ABSTRACT DATE (ScheduleOrder) IN base;
endDate 'Дата окончания' = ABSTRACT DATE (ScheduleOrder) IN base;

type 'Тип генерации графика' = ABSTRACT GenType (ScheduleOrder);
nameType 'Тип генерации графика' (ScheduleOrder scheduleOrder) = staticCaption(type(scheduleOrder)) IN base;

supplier = ABSTRACT LegalEntity(ScheduleOrder);
nameSupplier 'Поставщик' (ScheduleOrder scheduleOrder) = name(supplier(scheduleOrder)) IN base;
customer = ABSTRACT LegalEntity(ScheduleOrder);
nameCustomer 'Покупатель' (ScheduleOrder scheduleOrder) = name(customer(scheduleOrder)) IN base;

supplierStock = ABSTRACT Stock(ScheduleOrder);
nameSupplierStock 'Склад поставщика' (ScheduleOrder scheduleOrder) = name(supplierStock(scheduleOrder));
//customerStockScheduleOrder = ABSTRACT Stock(ScheduleOrder);
//nameCustomerStockScheduleOrder 'Склад покупателя' (scheduleOrder) = nameStock(customerStockScheduleOrder(scheduleOrder));

// ---------------------  Склады, для которых действует график заказов

stocks 'Склады' (scheduleOrder) = ABSTRACT STRING[500] (ScheduleOrder) CHARWIDTH 20 MATERIALIZED;

addScheduleOrderSupplierCustomer 'Добавить'  ABSTRACT LIST ( LegalEntity, LegalEntity) IMAGE 'add.png' CHANGEKEY 'INSERT' HIDE TOOLBAR;

GROUP schedule 'График' : public;
countDaysPreOrders 'Кол-во дней для предварительных заказов' = DATA INTEGER () IN schedule;

addScheduleOrderDetail 'Сгенерировать заказы по графикам без даты окончания'  ABSTRACT LIST ( ) IN schedule;

defaultGenType = DATA GenType ();
nameDefaultGenType 'Тип генерации (по умолчанию)' ()= staticCaption(defaultGenType()) IN schedule;

allowNotCustomer 'Разрешить графики без покупателя' = DATA BOOLEAN ();

EXTEND FORM options PROPERTIES() countDaysPreOrders, nameDefaultGenType, addScheduleOrderDetail, allowNotCustomer;
DESIGN options {
    orders {
        MOVE PROPERTY(countDaysPreOrders());
        MOVE PROPERTY(nameDefaultGenType());
        MOVE PROPERTY(addScheduleOrderDetail());
        MOVE PROPERTY(allowNotCustomer());
    }
}

META defineScheduleOrder(sign, supplierFilter, customerFilter, stockFilter)

    CLASS ScheduleOrder 'График поставок'##sign : ScheduleOrder.ScheduleOrder;
    CLASS ScheduleOrderDetail 'Заказ по графику'##sign : ScheduleOrder.ScheduleOrderDetail;
    
    @defineExternalizable(scheduleOrder, STRING[100]);
    
    //общие свойства
    type 'Тип генерации графика (ИД)' = DATA GenType (ScheduleOrder);
    type(ScheduleOrder scheduleOrder) += type(scheduleOrder);
    nameType 'Тип генерации графика' (ScheduleOrder scheduleOrder) = staticCaption(type(scheduleOrder)) IN base;
    type(ScheduleOrder o) <- defaultGenType() WHEN SET(o IS ScheduleOrder);
    
    supplier 'Поставщик (ИД)' = DATA LegalEntity(ScheduleOrder) INDEXED;
    nameSupplier 'Поставщик' (ScheduleOrder scheduleOrder) = name(supplier(scheduleOrder)) IN id;
    fullNameSupplier 'Поставщик' (ScheduleOrder scheduleOrder) = fullName(supplier(scheduleOrder)) IN base;    

    customer 'Покупатель (ИД)' = DATA LegalEntity(ScheduleOrder);
    nameCustomer 'Покупатель' (ScheduleOrder scheduleOrder) = name(customer(scheduleOrder)) IN base;
    fullNameCustomer 'Покупатель' (ScheduleOrder scheduleOrder) = fullName(customer(scheduleOrder)) IN base;
    
    supplier(ScheduleOrder scheduleOrder) += supplier(scheduleOrder);
    customer(ScheduleOrder scheduleOrder) += customer(scheduleOrder);

    supplierStock = DATA Stock(ScheduleOrder);
    nameSupplierStock 'Склад поставщика' (ScheduleOrder scheduleOrder) = name(supplierStock(scheduleOrder));

    @defineDocumentHeaderCreated(ScheduleOrder);
    note 'Примечание' = DATA ISTRING[100] (ScheduleOrder) CHARWIDTH 30 IN documentPrm;
 
    supplierStock(ScheduleOrder scheduleOrder) += supplierStock(scheduleOrder);
    
    CONSTRAINT supplier(ScheduleOrder scheduleOrder) AND supplierStock(scheduleOrder) AND NOT
    in(supplier(scheduleOrder), supplierStock(scheduleOrder))
        CHECKED BY supplierStock[ScheduleOrder]
            MESSAGE 'Поставщик и склад поставщика для графика заказов не имеют связи';

    // ---------------------  Склады, для которых действует график заказов
    
    allStocks 'Отм' = DATA BOOLEAN (ScheduleOrder);
    
    TABLE ScheduleOrderStockGroup(ScheduleOrder, StockGroup);
    dataIn 'Отм' = DATA BOOLEAN (ScheduleOrder, StockGroup);
    
    TABLE ScheduleOrderStock(ScheduleOrder, Stock);
    dataIn 'Отм' = DATA BOOLEAN (ScheduleOrder, Stock);
    
    levelParent(ScheduleOrder scheduleOrder, StockGroup stockGroup)  = GROUP
                                                                   MIN level(stockGroup, StockGroup parent) IF dataIn(scheduleOrder, parent) MATERIALIZED;
    
    inParent (ScheduleOrder scheduleOrder, StockGroup stockGroup) = TRUE IF levelParent (scheduleOrder, stockGroup) MATERIALIZED;
    
    in 'Отм' (ScheduleOrder scheduleOrder, StockGroup stockGroup) = OVERRIDE
        dataIn(scheduleOrder, stockGroup),
        inParent (scheduleOrder, stockGroup),
        allStocks(scheduleOrder) AND stockGroup IS StockGroup;
    
    in 'Отм' (ScheduleOrder scheduleOrder, Stock stock) =
        (OVERRIDE dataIn(scheduleOrder, stock),                  
                  in(scheduleOrder, stockGroup(stock)))
        AND is###customerFilter(stock)
        //AND in(customer(scheduleOrder), stock) 
        MATERIALIZED;
         
         
    backgroundAllStocks 'Цвет' (ScheduleOrder scheduleOrder) = RGB(0,0,0) IF allStocks(scheduleOrder);      
           
    background 'Цвет' (ScheduleOrder scheduleOrder, StockGroup stockGroup) = IF dataIn(scheduleOrder, stockGroup) THEN RGB(0,0,0)
        ELSE RGB(230,248,250) 
        IF (OVERRIDE inParent (scheduleOrder, stockGroup), allStocks(scheduleOrder) AND stockGroup IS StockGroup);    
        
    background'Цвет' (ScheduleOrder scheduleOrder, Stock stock) = IF dataIn(scheduleOrder, stock) AND is###customerFilter(stock) AND in(customer(scheduleOrder), stock) THEN RGB(0,0,0)
        ELSE RGB(230,248,250) 
        IF in(scheduleOrder, stockGroup(stock)) AND is###customerFilter(stock) AND in(customer(scheduleOrder), stock);           
         
         
    
    stocks 'Склады' (ScheduleOrder scheduleOrder) = STRING[500]((GROUP
                                           CONCAT name(Stock stock) IF in(scheduleOrder, stock) , ', '
                                           ORDER stock)) CHARWIDTH 20 MATERIALIZED IN id;
    stocks(ScheduleOrder scheduleOrder) += stocks(scheduleOrder);            
                                                                                                           
    startDate 'Дата начала' = DATA DATE (ScheduleOrder) NONULL IN base;
    endDate 'Дата окончания' = DATA DATE (ScheduleOrder) IN base;

    startDate (ScheduleOrder scheduleOrder) += startDate(scheduleOrder);
    endDate (ScheduleOrder scheduleOrder) += endDate(scheduleOrder);

    dataDayBefore 'За сколько дней формировать заказ' = DATA INTEGER (ScheduleOrder);
    dayBefore 'За сколько дней формировать заказ' (ScheduleOrder s) = OVERRIDE dataDayBefore(s), 1 IF s IS ScheduleOrder;

    //свойства "Каждые N недель"
    period 'Кол-во недель между поставками' = DATA INTEGER (ScheduleOrder);
    overPeriod 'Кол-во недель между поставками' (ScheduleOrder scheduleOrder) = OVERRIDE period(scheduleOrder), 1 IF scheduleOrder IS ScheduleOrder;

    //свойства "Каждые N дней"
    dayAfter 'Через сколько дней после последней поставки делать заказ' = DATA INTEGER (ScheduleOrder);
    dayLastOrder 'Дата последнего заказа' = DATA DATE (ScheduleOrder);

    //свойства "По числам"
    stringNumber 'Числа месяца поставок (указывать через запятую)' = DATA STRING[100] (ScheduleOrder);
    transferDay 'День на который переносить поставки с Субботы и Воскресенья (ИД)' = DATA DOW (ScheduleOrder);
    nameTransferDay 'День на который переносить поставки с Субботы и Воскресенья' (ScheduleOrder scheduleOrder) = staticCaption(transferDay(scheduleOrder));
    CONSTRAINT transferDay(ScheduleOrder scheduleOrder) != DOW.friday AND transferDay(scheduleOrder) != DOW.monday CHECKED MESSAGE 'Выберите день с ПН по ПТ';

    //свойства "По дням недели и месяца"
    TABLE scheduleOrderMonth(ScheduleOrder, Month);
    inScheduleOrder 'Включать' = DATA BOOLEAN (ScheduleOrder, Month);
    inAllMonth 'Включить все месяцы' = DATA BOOLEAN (ScheduleOrder);
    inAllMonth (ScheduleOrder s) <- TRUE WHEN SET(type(s) == GenType.genDayMonth);
    inScheduleOrder(ScheduleOrder scheduleOrder, Month month) <- inAllMonth(scheduleOrder) WHEN SET(inAllMonth(scheduleOrder) AND month IS Month);

    CLASS ScheduleOrderTime 'День недели';
    TABLE scheduleOrderTime (ScheduleOrderTime);

    @defineExternalizable(scheduleOrderTime, STRING[100]);
        
    scheduleOrder 'График поставок' = DATA ScheduleOrder (ScheduleOrderTime) NONULL DELETE;
    
    orderDOW 'День недели заказа' = DATA DOW (ScheduleOrderTime) NONULL;
    orderNameDOW 'День недели заказа' (ScheduleOrderTime d) = staticCaption(orderDOW(d)) IN id;
    
    shipmentDOW 'День недели поставки' = DATA DOW (ScheduleOrderTime) NONULL;
    shipmentNameDOW 'День недели поставки' (ScheduleOrderTime d) = staticCaption(shipmentDOW(d)) IN id;

    shipmentWeeks 'Кол-во недель до поставки' = DATA INTEGER (ScheduleOrderTime);
    shipmentTime 'Кол-во дней до поставки' (ScheduleOrderTime d) = OVERRIDE distanceDOWDOW(orderDOW(d), shipmentDOW(d)) (+) ((OVERRIDE shipmentWeeks(d),0 IF d IS ScheduleOrderTime)*7), 
                                                                        0 IF d IS ScheduleOrderTime MATERIALIZED;

    INDEX scheduleOrder(ScheduleOrderTime d), shipmentDOW(d);
    shipmentScheduleOrderTime = GROUP AGGR ScheduleOrderTime d BY scheduleOrder(d), shipmentDOW(d); 

    toShowGenDay (ScheduleOrder scheduleOrder) = type(scheduleOrder) == GenType.genDays;
    toShowGenNumber (ScheduleOrder scheduleOrder) = type(scheduleOrder) == GenType.genNumber;
    toShowGenDayMonth (ScheduleOrder scheduleOrder) = type(scheduleOrder) == GenType.genDayMonth;
    toShowMonths (ScheduleOrder scheduleOrder) = type(scheduleOrder) == GenType.genDayMonth AND NOT inAllMonth(scheduleOrder);
    
    dateOrder 'Дата заказа' = DATA DATE (ScheduleOrderDetail) IN id;
    dateSupply 'Дата поставки' = DATA DATE (ScheduleOrderDetail) IN id;
    
    isClosed  'Аннулирован' = DATA BOOLEAN (ScheduleOrderDetail );
    isOpened  'Не аннулирован' (ScheduleOrderDetail o) = o IS ScheduleOrderDetail  AND NOT isClosed (o) MATERIALIZED;
    INDEX isOpened(ScheduleOrderDetail o), dateOrder(o);

    close  'Аннулировать' (ScheduleOrderDetail o)  { 
	NEWSESSION { isClosed (o) <- TRUE; apply(); }
} TOOLBAR CONFIRM;

    open  'Отменить аннулирование' (ScheduleOrderDetail o)  { 
	NEWSESSION { isClosed (o) <- NULL; apply(); }
} TOOLBAR CONFIRM;
    
//    isClosedScheduleOrderDetail(d) += isClosedScheduleOrderDetail(d);
    
    scheduleOrder 'График поставок' = DATA ScheduleOrder(ScheduleOrderDetail) NONULL DELETE INDEXED;
    scheduleOrder(ScheduleOrderDetail d) += scheduleOrder(d);
    
    operation = DATA Operation (ScheduleOrder);
    nameOperation 'Операция' = name(operation(ScheduleOrder scheduleOrder));
    idOperation 'ID операции' = id(operation(ScheduleOrder scheduleOrder));
    operation(ScheduleOrder scheduleOrder) += operation(scheduleOrder);

    operation (ScheduleOrderDetail scheduleOrderDetail) = operation(scheduleOrder(scheduleOrderDetail));    
    nameOperation 'Операция' (ScheduleOrderDetail scheduleOrderDetail) = name(operation(scheduleOrderDetail));    

    supplier(ScheduleOrderDetail scheduleOrderDetail) = supplier(scheduleOrder(scheduleOrderDetail)) MATERIALIZED;
    nameSupplier 'Поставщик' (ScheduleOrderDetail scheduleOrderDetail) = name(supplier(scheduleOrderDetail)) IN id;

    note 'Примечание' (ScheduleOrderDetail scheduleOrderDetail) = note(scheduleOrder(scheduleOrderDetail));    

    supplierStock(ScheduleOrderDetail scheduleOrderDetail) = supplierStock(scheduleOrder(scheduleOrderDetail));
    nameSupplierStock 'Склад поставщика' (ScheduleOrderDetail scheduleOrderDetail) = name(supplierStock(scheduleOrderDetail));

//    customerStockScheduleOrderDetail(scheduleOrderDetail) = customerStockScheduleOrder(scheduleOrderScheduleOrderDetail(scheduleOrderDetail));
//    nameCustomerStockScheduleOrderDetail 'Склад покупателя' (scheduleOrderDetail) = nameStock(customerStockScheduleOrderDetail(scheduleOrderDetail));

    customerStock(scheduleOrderDetail) = DATA Stock (ScheduleOrderDetail);
    nameCustomerStock 'Склад покупателя' (ScheduleOrderDetail scheduleOrderDetail) = name(customerStock(scheduleOrderDetail)) IN id;

    customer(ScheduleOrderDetail scheduleOrderDetail) = OVERRIDE customer(scheduleOrder(scheduleOrderDetail)), legalEntity(customerStock(scheduleOrderDetail));
    nameCustomer 'Покупатель' (ScheduleOrderDetail scheduleOrderDetail) = name(customer(scheduleOrderDetail));

    INDEX dateSupply(ScheduleOrderDetail d), customerStock(d);
    INDEX scheduleOrder(ScheduleOrderDetail d), customerStock(d), dateSupply(d), d;
    
    countDetails (scheduleOrder, dateSupply, dateOrder, customerStock)= GROUP SUM 1
        BY  scheduleOrder(ScheduleOrderDetail d), dateSupply(d), dateOrder(d), customerStock(d);   
        
    CONSTRAINT scheduleOrder(ScheduleOrderDetail scheduleOrderDetail1) == scheduleOrder(ScheduleOrderDetail scheduleOrderDetail2) AND
               dateSupply(scheduleOrderDetail1) == dateSupply(scheduleOrderDetail2) AND
               dateOrder(scheduleOrderDetail1) == dateOrder(scheduleOrderDetail2) AND 
               customerStock(scheduleOrderDetail1) == customerStock(scheduleOrderDetail2) AND NOT
               scheduleOrderDetail1 == scheduleOrderDetail2 MESSAGE 'Совпадение даты заказа и даты поставки';    
                   
    CONSTRAINT scheduleOrder(ScheduleOrderDetail d) AND customerStock(d) AND isOpened(d) AND NOT in[ScheduleOrder, Stock](scheduleOrder(d), customerStock(d))
        MESSAGE 'Для предварительного заказа выбран склад покупателя, который не включен в график поставок.';                                     

    timeToOrder 'Время, до которого сделать заказ' = DATA TIME (ScheduleOrderTime);
    timeToOrder 'Время, до которого сделать заказ' = DATA TIME (ScheduleOrderDetail);
    timeToOrder 'Время, до которого сделать заказ' = DATA TIME (ScheduleOrder);
    
    tmpDate = DATA LOCAL DATE();
    tmpDateP = DATA LOCAL DATE();
    tmpDateS = DATA LOCAL DATE();
    
    overCreate  ABSTRACT LIST ( ScheduleOrderDetail); 
    
    lastShipment = GROUP MAX dateSupply(ScheduleOrderDetail d) IF dateSupply(d) <= DATE date BY scheduleOrder(d), date;
    lastDateSupply = GROUP MAX dateSupply(ScheduleOrderDetail d) BY scheduleOrder(d), customerStock(d) MATERIALIZED;

    create 'Сгенерировать предварительные заказы'(ScheduleOrder scheduleOrder)  { 
        LOCAL toDate = DATE ();    
        toDate() <- OVERRIDE endDate(scheduleOrder), sum(currentDate(), countDaysPreOrders());
        
        logToFile('order', 'Генерирация точек заказа для графика ' + (CONCAT ' - ', nameSupplier(scheduleOrder), nameCustomer(scheduleOrder)));
    
        // генерация через N дней
        IF type(scheduleOrder) == GenType.genDays THEN {
            tmpDate() <- dayLastOrder(scheduleOrder);
            // итерируемся по всем датам через n дней
            WHILE tmpDate() <= toDate() DO {
            
                IF tmpDate() >= ( IF endDate(scheduleOrder) THEN startDate(scheduleOrder) ELSE (MAX startDate(scheduleOrder), currentDate())) THEN {
                    FOR in(scheduleOrder, Stock stock) AND active(stock) DO { 
                        NEW o = ScheduleOrderDetail {
                            dateOrder(o) <- subtract(tmpDate(), dayBefore(scheduleOrder));
                            dateSupply(o) <- tmpDate();
                            scheduleOrder(o) <- scheduleOrder;
                            timeToOrder(o) <- timeToOrder(scheduleOrder); 
                            customerStock(o) <- stock;
                            
                            // удаляем ненужны, т.е. если уже был заказ с аналогичными датами заказа, поставки и складом покупателя
                            DELETE o WHERE countDetails(scheduleOrder(o), dateSupply(o), dateOrder(o), stock) > 1 ;
                        }
                    }
                }
                tmpDate() <- sum(tmpDate(), dayAfter(scheduleOrder));
            }
        }

        // генерация по числам
        IF type(scheduleOrder) == GenType.genNumber THEN {
            tmpDate() <- (IF endDate(scheduleOrder) THEN startDate(scheduleOrder) ELSE (MAX startDate(scheduleOrder), currentDate()));
            // итерируемся по всем датам через 1 день
            WHILE tmpDate() <= toDate() DO {
                IF isWordInCSV(extractDay(tmpDate()), stringNumber(scheduleOrder)) THEN {
                    FOR in(scheduleOrder, Stock stock) AND active(stock) DO {                     
                        NEW o = ScheduleOrderDetail {
                            tmpDateS() <- tmpDate();
                            scheduleOrder(o) <- scheduleOrder;
                            customerStock(o) <- stock;                            
                            // если попали на субботу или воскресенье
                            IF extractDOWNumber(tmpDateS()) == 0 OR extractDOWNumber(tmpDateS()) == 6 THEN {
                                IF number(transferDay(scheduleOrder)) == 1 THEN {
                                // если нужно переносить на понедельник, то добавляем
                                    WHILE extractDOWNumber(tmpDateS()) != 1 DO tmpDateS() <- sum(tmpDateS(), 1);
                                }
                                ELSE {
                                    // если нужно переносить на пятницу, то отнимаем
                                    WHILE extractDOWNumber(tmpDateS()) != 5 DO tmpDateS() <- subtract(tmpDateS(), 1);
                                }
                            }
                            dateSupply(o) <- tmpDateS();
                            dateOrder(o) <- subtract(tmpDateS(), dayBefore(scheduleOrder));
                            timeToOrder(o) <- timeToOrder(scheduleOrder); 
                            
                            IF (extractDOWNumber(subtract(tmpDateS(), dayBefore(scheduleOrder))) == 0 OR extractDOWNumber(subtract(tmpDateS(), dayBefore(scheduleOrder))) == 6) THEN {
                                dateOrder(o) <- subtract(tmpDateS(), dayBefore(scheduleOrder)+(IF extractDOWNumber(subtract(tmpDateS(), dayBefore(scheduleOrder))) == 0 THEN 2 ELSE 1));                                    
                            } ELSE {
                                dateOrder(o) <- subtract(tmpDateS(), dayBefore(scheduleOrder));
                            }
                            // удаляем ненужны, т.е. если уже был заказ с аналогичными датами заказа, поставки и складом покупателя
                            DELETE o WHERE countDetails(scheduleOrder(o), dateSupply(o), dateOrder(o), stock) > 1 ;
                        }
                    }
                }
                tmpDate() <- sum(tmpDate(), 1);
            }
        }

        // генерация по дням и месяцам
        IF type(scheduleOrder) == GenType.genDayMonth THEN {
            //если в графике уже есть  точки то начинаем с последней из них, иначе генерация раз в 2 недели не всегда работает
            tmpDate() <- MAX startDate(scheduleOrder), (OVERRIDE lastShipment(scheduleOrder, currentDate()), currentDate());
            // итерируемся по всем датам через 1 день
            WHILE tmpDate() <= toDate() DO {
                tmpDateP() <- tmpDate();
                WHILE tmpDate() < sum(tmpDateP(), 7) AND tmpDate() <= toDate() DO {
                    IF inScheduleOrder(scheduleOrder, extractMonth(tmpDate())) AND shipmentScheduleOrderTime(scheduleOrder, extractDOW(tmpDate())) THEN {
                        LOCAL time = ScheduleOrderTime();
                        time() <- shipmentScheduleOrderTime(scheduleOrder,extractDOW(tmpDate()));
                        LOCAL orderDate = DATE();
                        orderDate() <- subtract(tmpDate(), shipmentTime(time()));
                        FOR in(scheduleOrder, Stock stock) AND active(stock) AND NOT tmpDate() <= lastDateSupply(scheduleOrder, stock) DO { //AND NOT countDetails(scheduleOrder, tmpDate(), orderDate(), stock) DO {                      
                            NEW o = ScheduleOrderDetail {
                                dateOrder(o) <- orderDate();
                                dateSupply(o) <- tmpDate();
                                scheduleOrder(o) <- scheduleOrder;
                                customerStock(o) <- stock; 
                                timeToOrder(o) <- OVERRIDE timeToOrder(time()), timeToOrder(scheduleOrder); 
                                overCreate(o);                                                                                                                                                               
                            }
                        }
                    }
                    tmpDate() <- sum(tmpDate(), 1);
                }
                IF overPeriod(scheduleOrder) >= 1 THEN
                    tmpDate() <- sum(tmpDate(), (overPeriod(scheduleOrder) - 1) * 7);
            }
        }

        //EXEC apply();
    } TOOLBAR;
    
    countDetailsCurrent = GROUP SUM 1 IF isOpened[ScheduleOrderDetail](ScheduleOrderDetail d) AND dateOrder[ScheduleOrderDetail](d) >= currentDate()  
        BY scheduleOrder[ScheduleOrderDetail](d); 
    
    addScheduleOrderDetail()  { 

        FOR [GROUP SUM 1 IF ScheduleOrder o IS ScheduleOrder AND ((NOT endDate(o)) OR (endDate(o) >= currentDate() AND NOT countDetailsCurrent(o))) BY supplier(o)](LegalEntity l) DO NEWSESSION {
            FOR ScheduleOrder o IS ScheduleOrder AND ((NOT endDate(o)) OR (endDate(o) >= currentDate() AND NOT countDetailsCurrent(o))) AND supplier(o) == l DO {
                create(o);
            }             
            APPLY;
        }                	    
    }  
    
    addScheduleOrderDetail() + {  addScheduleOrderDetail(); }

    monthInDate 'Месяц'(ScheduleOrderDetail scheduleOrderDetail) = extractMonthName(dateSupply(scheduleOrderDetail));
    DOWInDate 'День недели'(ScheduleOrderDetail scheduleOrderDetail) = extractDOWName(dateSupply(scheduleOrderDetail));

    next(ScheduleOrderDetail d) = PARTITION PREV d IF isOpened(d) ORDER DESC dateSupply(d), d BY scheduleOrder(d), stockFilter##Stock(d) MATERIALIZED;
    dateSupplyNext(ScheduleOrderDetail scheduleOrderDetail) = dateSupply(next(scheduleOrderDetail));

    scheduleOrderDetail = DATA ScheduleOrderDetail(UserOrder) INDEXED;
    skip = ABSTRACT BOOLEAN (ScheduleOrderDetail,Order);
    quantityOrders 'Кол-во заказов'(ScheduleOrderDetail scheduleOrderDetail)  =
        GROUP
               SUM 1 IF supplierStock(Order order) = supplierStock(scheduleOrderDetail) AND
                       customerStock(order) = customerStock(scheduleOrderDetail) AND
                       shipmentDate(order) = dateSupply(scheduleOrderDetail) AND
                       date(order) = dateOrder(scheduleOrderDetail) AND
                       isOpened(scheduleOrderDetail) AND NOT 
                       skip(scheduleOrderDetail, order) MATERIALIZED;
               
    isLast (ScheduleOrderDetail sd, DATE d)= dateOrder(sd) <= d AND NOT dateOrder(next(sd)) <= d;           

    isCycled 'Циклический' = DATA BOOLEAN (ScheduleOrder);
    
    lastCreatedOrder (ScheduleOrder o) = 
        GROUP LAST Order order 
            ORDER date(order), order 
            BY scheduleOrder(scheduleOrderDetail(order));
 
    prevLastCreatedOrder (ScheduleOrder o) = PREV(lastCreatedOrder(o));
    
    reCreate  'Перегенерировать предварительные заказы'(ScheduleOrder scheduleOrder)  { 
        DELETE ScheduleOrderDetail d WHERE d IS ScheduleOrderDetail AND scheduleOrder(d) == scheduleOrder AND isOpened(d) AND NOT [GROUP SUM 1 BY scheduleOrderDetail( UserOrder o)](d);
        create(scheduleOrder);    
    } TOOLBAR;
    
 
    overCreate  ABSTRACT LIST ( UserOrder);
    overCreateDetail  ABSTRACT LIST ( UserOrder);
    isRecommended = DATA LOCAL BOOLEAN (UserOrder);
    createScheduleUser 'Создать заказ'(ScheduleOrderDetail scheduleOrderDetail)  { 
	NEWSESSION {
	        isRecommended(UserOrder o) <- NULL;
	        
	        NEW o = UserOrder {
	            scheduleOrderDetail(o) <- scheduleOrderDetail;
	            date(o) <- currentDate();
	            time(o) <- currentTime();
	            shipmentDate(o) <- dateSupply(scheduleOrderDetail);
	            shipmentTime(o) <- currentTime();
	            nextShipmentDate(o) <- dateSupplyNext(scheduleOrderDetail);
	            supplier(o) <- supplier(scheduleOrderDetail);
	            customer(o) <- customer(scheduleOrderDetail);
	            supplierStock(o) <- supplierStock(scheduleOrderDetail);
	            customerStock(o) <- customerStock(scheduleOrderDetail);
	            ASK 'Заполнить рекомендуемым количеством?' DO {
	                isRecommended(o) <- TRUE;
	            }
	            IF operation(scheduleOrderDetail) THEN
	                operation(o) <- operation(scheduleOrderDetail);
	            ELSE
	                IF countOperationSupplierCustomerSupplierCustomer(supplier(o), customer(o), supplierStock(o), customerStock(o), currentUser()) == 1 THEN 
	                    operation(o) <- defaultOperationSupplierCustomerSupplierCustomer(supplier(o), customer(o), supplierStock(o), customerStock(o), currentUser());
	                    
	            IF defaultPriceListType(operation(o)) THEN
	                priceListType(o) <- defaultPriceListType(operation(o)); 
	
	            overCreate(o);
	            overCreateDetail(o);
	
	            SHOW userOrder OBJECTS o = o DOCKED;
	        }
	    }
} TOOLBAR;
    @defineDocumentDetailActions(scheduleOrder, ScheduleOrderDetail);
    @defineDocumentDialogStock(scheduleOrder, supplierFilter, supplier, );

    @defineDocumentDialogSupplierCustomerLegalEntity(scheduleOrder, supplierFilter, customerFilter);
       
    countShipmentScheduleOrderTime (scheduleOrder, dow) = GROUP SUM 1 BY scheduleOrder(ScheduleOrderTime d), shipmentDOW(d);   
    scheduleOrderTimeIn 'Вкл.' (ScheduleOrder scheduleOrder, DOW dow)= TRUE IF [GROUP SUM 1 BY scheduleOrder(ScheduleOrderTime d), shipmentDOW(d)](scheduleOrder, dow);   
    overCreateScheduleOrderTime ABSTRACT LIST (ScheduleOrderTime, ScheduleOrder, DOW);
    setScheduleOrderTimeIn(ScheduleOrder scheduleOrder, DOW dow)  { 
        IF NOT scheduleOrderTimeIn(scheduleOrder, dow) THEN {
            LOCAL transfer = INTEGER();
            NEW  t = ScheduleOrderTime {
                scheduleOrder(t) <- scheduleOrder;
                shipmentDOW(t) <- dow; 

                IF number(dow) == 0 THEN transfer() <- 7; ELSE IF number(dow) < dayBefore(scheduleOrder) THEN transfer() <- 5; ELSE transfer() <- 0; //+7-2
                
                CASE WHEN transfer() + number(dow) - dayBefore(scheduleOrder) == 0 THEN orderDOW(t) <- DOW.friday;
                WHEN transfer() + number(dow) - dayBefore(scheduleOrder) == 6 THEN orderDOW(t) <- DOW.friday;
                ELSE orderDOW(t) <- DOW(transfer() + number(dow) - dayBefore(scheduleOrder));
                overCreateScheduleOrderTime(t,scheduleOrder,dow);      
            }
        }
    }
    
    changeScheduleOrderTimeIn(ScheduleOrder scheduleOrder, DOW dow)  { 
        INPUT b = BOOLEAN DO
            IF b THEN
                setScheduleOrderTimeIn(scheduleOrder, dow);
            ELSE
                DELETE ScheduleOrderTime t WHERE t IS ScheduleOrderTime AND scheduleOrder(t) == scheduleOrder AND shipmentDOW(t) == dow;
    }    
    
    FORM scheduleOrder 'График поставок'##sign
        OBJECTS s=ScheduleOrder PANEL
        PROPERTIES (s) nameSupplier ON CHANGE changeSupplier###supplierFilter(s), 
                       nameSupplierStock ON CHANGE changeSupplierStock###supplierFilter(s), 
                       nameCustomer ON CHANGE changeCustomer###customerFilter(s), nameOperation,
                       startDate, endDate, nameType, timeToOrder,
                       overPeriod SHOWIF toShowGenDayMonth(s), inAllMonth SHOWIF toShowGenDayMonth(s), dayBefore,
                       dayLastOrder SHOWIF toShowGenDay(s), dayAfter SHOWIF toShowGenDay(s), 
                       stringNumber SHOWIF toShowGenNumber(s), nameTransferDay SHOWIF toShowGenNumber(s),
                       note

        OBJECTS dow=DOW GRID 
        PROPERTIES(dow) READONLY SHOWIF toShowGenDayMonth(s) staticCaption, number
        PROPERTIES      SHOWIF toShowGenDayMonth(s) scheduleOrderTimeIn(s,dow) ON CHANGE changeScheduleOrderTimeIn(s,dow)    
        ORDERS number(dow)
        OBJECTS m=Month GRID
        PROPERTIES(m) READONLY staticCaption SHOWIF toShowMonths(s)
        PROPERTIES(s, m) inScheduleOrder SHOWIF toShowMonths(s)

        OBJECTS d=ScheduleOrderTime GRID
        PROPERTIES(d) SHOWIF toShowGenDayMonth(s) orderNameDOW, shipmentNameDOW, shipmentWeeks, shipmentTime, timeToOrder, NEW, DELETE GRID
        FILTERS scheduleOrder(d) == s
        
        TREE stockTree a=BPSTRING[3], sg = StockGroup PARENT parent(sg)
        PROPERTIES READONLY VALUE(a), sgTreeName = name(sg)
        PROPERTIES(s) allStocks DRAW a BACKGROUND backgroundAllStocks(s)
        PROPERTIES(s, sg) in BACKGROUND background(s, sg)
        ORDERS sgTreeName
        FILTERS stringEqualsAll(a)
        FILTERS count###customerFilter##Stock(sg)
    
        OBJECTS ts = Stock
        PROPERTIES READONLY  name(ts)
        PROPERTIES(s, ts)    in BACKGROUND background(s, ts)
        FILTERS ts IS Stock AND NOT sg IS StockGroup OR isParent(sg, ts),
                in(customer(s), ts) OR (ts IS Stock AND allowNotCustomer() AND NOT customer(s)),
                is###customerFilter(ts)
        FILTERGROUP filters2
                FILTER 'Выбранные склады' in(s, ts) 'F11' 
        FILTERGROUP inactiveStock FILTER 'Активный' active(ts) 'ctrl F10' DEFAULT        

        OBJECTS sd=ScheduleOrderDetail
        PROPERTIES (sd) isClosed, dateOrder, dateSupply
        PROPERTIES (sd) READONLY timeToOrder, monthInDate, DOWInDate,
                        nameSupplier, nameSupplierStock,
                        nameCustomer, nameCustomerStock,
                        nameOperation
        PROPERTIES (sd) createScheduleUser, deletesd=DELETE GRID
        ORDERS dateSupply(sd)
        PROPERTIES  DRAW sd create(s), reCreate(s)

        PROPERTIES(sd) NEW 
        PROPERTIES(s) DRAW sd deleteScheduleOrderDetail
        FILTERS scheduleOrder(sd)==s

        EDIT ScheduleOrder OBJECT s
    ;
    
    change(ScheduleOrder s, DOW dow)  { 
        IF scheduleOrderTimeIn(s, dow) THEN
            SEEK scheduleOrder.d = [ GROUP MAX ScheduleOrderTime d BY scheduleOrder(d), shipmentDOW(d)](s, dow);
    }
    EXTEND FORM scheduleOrder
        EVENTS
            ON CHANGE dow change(s, dow)
    ;

    DESIGN scheduleOrder {
        BOX {
            size = (1024, 768);
            NEW header {
                type = CONTAINERH;
                NEW suppContainer {
                    caption = 'Поставщик';
                    type = COLUMNS;
                    columns = 1;
                    MOVE PROPERTY(nameSupplier(s));
                    MOVE PROPERTY(nameSupplierStock(s));
                }
                
                NEW secondContainer{
                    type = CONTAINERV;
                    NEW custContainer {
                        caption = 'Покупатель';
                        type = COLUMNS;
                        columns = 1;
                        MOVE PROPERTY(nameCustomer(s));
                    }
                    
                    NEW operationContainer {
                        caption = 'Операция';
                        type = COLUMNS;
                        columns = 1;
                        MOVE PROPERTY(nameOperation(s));
                    }                    
                }
    
                NEW dateContainer {
                    caption = 'Сроки';
                    type = COLUMNS;
                    columns = 1;
                    MOVE PROPERTY(startDate(s));
                    MOVE PROPERTY(endDate(s));
                }
            }
            MOVE GROUP(documentPrm,s){
                columns = 1; 
                type = CONTAINERH;
            }
    
            NEW bottomContainer {
                fill = 1;
                type = TABBED;
                NEW stocksContainer {
                    fill = 1;
                    caption = 'Склады';
                    type = SPLITH;
                    MOVE BOX(TREE stockTree) {
                        caption = 'Группы складов';
                    }
                    MOVE BOX(ts) {
                        fill = 2;
                    }
                }    
                  
                NEW params {
                    caption = 'Параметры';
                    NEW paramsHeader {
                        type = CONTAINERH;
                        NEW paramsProps {
                            caption = 'Общие';
                            type = CONTAINERH;
                            MOVE PROPERTY(nameType(s));
                            MOVE PROPERTY(dayBefore(s));
                            MOVE PROPERTY(timeToOrder(s));
                        }
    
                        NEW paramsCustom {
                            caption = 'Параметры графика';
                            type = CONTAINERH;
                            MOVE PROPERTY(overPeriod(s));
                            MOVE PROPERTY(inAllMonth(s));
                            MOVE PROPERTY(dayLastOrder(s));
                            MOVE PROPERTY(dayAfter(s));
                            MOVE PROPERTY(stringNumber(s));
                            MOVE PROPERTY(nameTransferDay(s));
                        }
                    }
    
                    NEW days {
                        fill = 1;
                        type = CONTAINERH;
                        MOVE BOX(dow) {
                            PROPERTY (staticCaption(dow)) { caption = 'День недели поставки';}
                        }
                        MOVE BOX(d);
                        MOVE BOX(m);
                    }
                }
                
                MOVE BOX(sd) {
                    caption = 'Предварительные заказы';
                }
            }
            MOVE TOOLBARBOX;
        }
    }
    
    overCopy  ABSTRACT LIST ( ScheduleOrder, ScheduleOrder);
    copy 'Копировать'(ScheduleOrder scheduleOrder)  { 
	NEWSESSION {
	        NEW o = ScheduleOrder {
	            supplier(o) <- supplier(scheduleOrder);
	            supplierStock(o) <- supplierStock(scheduleOrder);
	            customer(o) <- customer(scheduleOrder);
	//            customerStockScheduleOrder(o) <- customerStockScheduleOrder(scheduleOrder);
	            type(o) <- type(scheduleOrder);
	            dayBefore(o) <- dayBefore(scheduleOrder);
	            dayLastOrder(o) <- dayLastOrder(scheduleOrder);
	            dayAfter(o) <- dayAfter(scheduleOrder);
	            startDate(o) <- startDate(scheduleOrder);
	            endDate(o) <- endDate(scheduleOrder);
	            stringNumber(o) <- stringNumber(scheduleOrder);
	            transferDay(o) <- transferDay(scheduleOrder);  
	            
	            FOR scheduleOrder(ScheduleOrderTime scheduleOrderTime) == scheduleOrder NEW sot=ScheduleOrderTime DO {
	                scheduleOrder(sot) <- o;
	                orderDOW(sot) <- orderDOW(scheduleOrderTime);
	                shipmentDOW(sot) <- shipmentDOW(scheduleOrderTime); 
	            }          
	                   
	            EXEC overCopy(scheduleOrder, o);
	
	            SHOW scheduleOrder OBJECTS s = o DOCKED;
	        }
	    }
} TOOLBAR;
                
    edit (ScheduleOrderDetail detail) + {  edit(scheduleOrder(detail)); }
    show 'Просмотреть' (ScheduleOrder s)  { 
    	NEWSESSION {
    	    SHOW scheduleOrder OBJECTS s = s DOCKED READONLY;
    	}
    } TOOLBAR;
    show(ScheduleOrder.ScheduleOrder o) + {  show[ScheduleOrder](o); }
    
    show 'Просмотреть' (ScheduleOrderDetail detail)  { show(scheduleOrder(detail)); } TOOLBAR;
    addScheduleOrderSupplierCustomer 'Добавить'##sign(LegalEntity supplier, LegalEntity customer)  { 
	NESTEDSESSION {
	        NEW s = ScheduleOrder {
	            supplier(s) <- supplier;
	            customer(s) <- customer;
	
	            SHOW scheduleOrder OBJECTS s = s DOCKED;
	        }
	    }
} IMAGE 'add.png' CHANGEKEY 'INSERT' HIDE TOOLBAR;

    addScheduleOrderSupplierCustomer(LegalEntity supplier, LegalEntity customer) + {  addScheduleOrderSupplierCustomer(supplier, customer); }

    supplier = DATA LOCAL LegalEntity();
    nameSupplier 'Поставщик' = name(supplier());
    customer = DATA LOCAL LegalEntity();
    nameCustomer 'Покупатель' = name(customer());
    supplierStock = DATA LOCAL Stock();
    nameSupplierStock 'Склад поставщика' = name(supplierStock());
    customerStock = DATA LOCAL Stock();
    nameCustomerStock 'Склад покупателя' = name(customerStock());

    CONSTRAINT supplier() AND supplierStock() AND NOT in(supplier(), supplierStock())
        CHECKED BY supplierStock[] MESSAGE 'Поставщик и склад поставщика для графика заказов не имеют связи';

    CONSTRAINT customer() AND customerStock() AND NOT in(customer(), customerStock())
        CHECKED BY customerStock[] MESSAGE 'Покупатель и склад покупателя для графика заказов не имеют связи';

    background 'Цвет' = ABSTRACT CASE COLOR (ScheduleOrderDetail);
    FORM scheduleOrderDetails 'Заказы по графику'

        OBJECTS d=DATE PANEL
        PROPERTIES dv=VALUE(d)
        PROPERTIES () nameSupplier, nameCustomer, nameSupplierStock, nameCustomerStock

        OBJECTS sd=ScheduleOrderDetail
        PROPERTIES (sd) READONLY BACKGROUND  background(sd) isClosed, dateOrder, dateSupply, timeToOrder,
                        monthInDate, DOWInDate, 
                        nameSupplier, nameSupplierStock,
                        nameCustomer, nameCustomerStock, nameOperation, note, quantityOrders
        PROPERTIES (sd) createScheduleUser, EDIT NEWSESSION, show
        PROPERTIES (sd) close  SHOWIF isOpened (sd), open  SHOWIF isClosed (sd)
//        FILTERGROUP openFilter
//            FILTER 'Не аннулированные' 'F6' isOpenedScheduleOrderDetail(sd)  
                    
        ORDERS dateOrder(sd)

        FILTERS supplier(sd) == supplier() OR (sd IS ScheduleOrderDetail AND NOT supplier()),
                supplierStock(sd) == supplierStock() OR (sd IS ScheduleOrderDetail AND NOT supplierStock()),
                customer(sd) == customer() OR (sd IS ScheduleOrderDetail AND NOT customer()),
                customerStock(sd) == customerStock() OR (sd IS ScheduleOrderDetail AND NOT customerStock())

        FILTERGROUP dateFilter
            FILTER 'Без заказов' sd IS ScheduleOrderDetail  AND NOT quantityOrders(sd) 'F11' DEFAULT
        FILTERGROUP countFilter
            FILTER 'Последний на дату' isLast(sd,d) 'F10' DEFAULT      
            FILTER 'На дату' dateOrder(sd) <= d 'F9'
        FILTERGROUP openedSchedule
            FILTER 'Открыт' isOpened(sd) DEFAULT
             
        OBJECTS o = Order
        PROPERTIES (o) READONLY isPosted, number, series, date, time,
                                nameSupplier, nameSupplierStock, nameCustomer, nameCustomerStock,
                                countOrderDetail, quantityOrderDetail, sumOrderDetail,
                                VATSumOrderDetail, invoiceSumOrderDetail, shipmentDate, shipmentTime, 
                                closeDate, note            
        PROPERTIES (o) NEWSESSION NEW[UserOrder], EDIT SHOWIF overShowEdit(o), deleteo = DELETE SHOWIF overShowDelete(o)
        PROPERTIES (o) close[UserOrder] SHOWIF showClose(o)
        PROPERTIES (o) open SHOWIF showOpen(o)
            
        FILTERS supplier(o) == supplier() OR (o IS Order AND NOT supplier()),
                supplierStock(o) == supplierStock() OR (o IS Order AND NOT supplierStock()),
                customer(o) == customer() OR (o IS Order AND NOT customer()),
                customerStock(o) == customerStock() OR (o IS Order AND NOT customerStock())            
        
        FILTERGROUP date
            FILTER 'На дату' date(o) == d 'F10' DEFAULT         

        FILTERGROUP opened
            FILTER 'Открыт' isOpened(o) 'F9' DEFAULT         
                          
        OBJECTS dd=OrderDetail
        PROPERTIES (dd) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku
        PROPERTIES (dd) READONLY quantity, price, sum,
                       numberVAT, valueVAT, VATSum, invoiceSum,
                       nameCustomerStock, shipmentDate, shipmentTime
        ORDERS index(dd)

        FILTERS order(dd) == o                  
                          
    ;

    DESIGN scheduleOrderDetails {
        NEW header {
            type = CONTAINERH;
            MOVE PROPERTY(dv);
            MOVE PROPERTY(nameSupplier());
            MOVE PROPERTY(nameSupplierStock());
            MOVE PROPERTY(nameCustomer());
            MOVE PROPERTY(nameCustomerStock());
        }
        MOVE BOX(sd);
        NEW documentDetail {
            fill = 1;
            type = TABBED;
            MOVE BOX(o);
            MOVE BOX(dd) {
                fill = 1;
                caption = 'Спецификация';
            }
        
        }    
        MOVE TOOLBARBOX;
    }
    @extendFormFilterAccessStock(ScheduleOrderDetail, sd, scheduleOrderDetails, stockFilter##Stock, company);
    
    @extendFormFilterAccessStock(Order, o, scheduleOrderDetails, stockFilter##Stock, company);

    FORM scheduleOrders 'Графики поставок'

        OBJECTS d=DATE PANEL
        PROPERTIES dv=VALUE(d)
        PROPERTIES () nameSupplier, nameCustomer, nameSupplierStock, nameCustomerStock

        OBJECTS s=ScheduleOrder
        PROPERTIES(s) READONLY nameSupplier, nameSupplierStock,
                      nameCustomer, nameType

        PROPERTIES(s) NEWSESSION NEW, EDIT, DELETE 

        OBJECTS sd=ScheduleOrderDetail
        PROPERTIES(sd) READONLY isClosed, dateOrder, dateSupply, timeToOrder, 
                       monthInDate, DOWInDate,
                       nameSupplier, nameSupplierStock,
                       nameCustomer, nameCustomerStock
        PROPERTIES (sd) close  SHOWIF isOpened (sd), open  SHOWIF isClosed (sd)
        FILTERGROUP openFilter
            FILTER 'Не аннулированные' isOpened(sd) 'F6' DEFAULT  
            
        ORDERS dateSupply(sd)

        FILTERS supplier(sd) == supplier() OR (sd IS ScheduleOrderDetail AND NOT supplier()),
                supplierStock(sd) == supplierStock() OR (sd IS ScheduleOrderDetail AND NOT supplierStock()),
                customer(sd) == customer() OR (sd IS ScheduleOrderDetail AND NOT customer()),
                customerStock(sd) == customerStock() OR (sd IS ScheduleOrderDetail AND NOT customerStock())

        FILTERGROUP dateFilter
            FILTER 'На дату' dateSupply(sd) == d 'F10'

        FILTERGROUP orderFilter
            FILTER 'Текущего графика' scheduleOrder(sd) == s 'F11' DEFAULT
    ;

    DESIGN scheduleOrders {
        NEW header {
            type = CONTAINERH;
            MOVE PROPERTY(dv);
            MOVE PROPERTY(nameSupplier());
            MOVE PROPERTY(nameSupplierStock());
            MOVE PROPERTY(nameCustomer());
            MOVE PROPERTY(nameCustomerStock());
        }
        MOVE BOX(s);
        MOVE BOX(sd);

        MOVE TOOLBARBOX;
    }
    
    //----------------- Логирование предварительных заказов ------------------- //
    
    CLASS ScheduleOrderDetailLog 'Запись лога предварительных заказов';
    TABLE scheduleOrderDetailLog(ScheduleOrderDetailLog);
    
    scheduleOrder = DATA ScheduleOrder (ScheduleOrderDetailLog) INDEXED;
    
    dateOrder 'Дата заказа' = DATA DATE (ScheduleOrderDetailLog);
    dateSupply 'Дата поставки' = DATA DATE (ScheduleOrderDetailLog);
    nameSupplier 'Поставщик' = DATA STRING[150] (ScheduleOrderDetailLog);
    nameCustomerStock 'Склад покупателя' = DATA STRING[150] (ScheduleOrderDetailLog);
    
    
    nameUser 'Имя пользователя' = DATA STRING[100] (ScheduleOrderDetailLog);
    dateTime 'Время изменения' = DATA DATETIME (ScheduleOrderDetailLog);
    
    typeChange= DATA TypeChange (ScheduleOrderDetailLog);
    nameTypeChange 'Тип изменения' (ScheduleOrderDetailLog l) = staticCaption(typeChange(l));
    
    WHEN SET(ScheduleOrderDetail d IS ScheduleOrderDetail) DO {
        NEW l = ScheduleOrderDetailLog {
            scheduleOrder(l) <- scheduleOrder(d);
            dateOrder(l) <- dateOrder(d);
            dateSupply(l) <- dateSupply(d);
            nameSupplier(l) <- nameSupplier(d);
            nameCustomerStock(l) <- nameCustomerStock(d);
            nameUser(l) <- ISTRING[100](name(currentUser()));
            dateTime(l) <- currentDateTime();
            typeChange(l) <- TypeChange.add;
        }
    }
    WHEN DROPPED(ScheduleOrderDetail d IS ScheduleOrderDetail) DO {
        NEW l = ScheduleOrderDetailLog {       
            scheduleOrder(l) <- PREV(scheduleOrder(d));
            dateOrder(l) <- PREV(dateOrder(d));
            dateSupply(l) <- PREV(dateSupply(d));
            nameSupplier(l) <- name(PREV(supplier(d)));
            nameCustomerStock(l) <- name(PREV(customerStock(d)));
            nameUser(l) <- ISTRING[100](name(currentUser()));
            dateTime(l) <- currentDateTime();
            typeChange(l) <- TypeChange.delete;
        }
    }
    
    EXTEND FORM scheduleOrder
        OBJECTS log = ScheduleOrderDetailLog
        PROPERTIES(log) READONLY dateOrder, dateSupply, nameSupplier, nameCustomerStock, nameUser, dateTime, nameTypeChange
        FILTERS s == scheduleOrder(log)
    ;
        
    DESIGN scheduleOrder {
        bottomContainer {
            NEW detail {
                type = TABBED;
                fill = 1;
                caption = 'Предварительные заказы';
                MOVE BOX(sd) {
                    caption = 'Основные';
                }
                MOVE BOX(log) {
                    caption = 'История';
                }
            }
        }
    }

END

filterCompanySupplier(LegalEntity legalEntity, LegalEntity legalFilt) = (isCompany(legalEntity) AND isSupplier(legalFilt)) OR
                                               (isCustomer(legalEntity) AND isCompany(legalFilt));

filterCompanyCustomer(LegalEntity legalEntity, LegalEntity legalFilt) = (isCompany(legalEntity) AND isCustomer(legalFilt)) OR
                                               (isSupplier(legalEntity) AND isCompany(legalFilt));

EXTEND FORM legalEntity

    OBJECTS ss=ScheduleOrder GRID
    PROPERTIES(ss) SHOWIF isCustomer(l) READONLY startDate, endDate, nameSupplierStock, stocks, nameType
    PROPERTIES(ss) SHOWIF isCustomer(l) DELETE , EDIT
    PROPERTIES(ss) SHOWIF isCustomer(l) show
    
    FILTERS filterCompanySupplier(l, s)
    FILTERS supplier(ss) == s, customer(ss) == l

    OBJECTS sc=ScheduleOrder GRID 
    PROPERTIES(sc) SHOWIF isSupplier(l) READONLY startDate, endDate, nameSupplierStock, stocks, nameType
    PROPERTIES(sc) SHOWIF isSupplier(l) DELETE , EDIT
    PROPERTIES(sc) SHOWIF isSupplier(l) show
    
    FILTERS filterCompanyCustomer(l, c)
    FILTERS customer(sc) == c, supplier(sc) == l


;

DESIGN legalEntity {
    extendContainer {
        docPurchaseContainer{
            MOVE BOX(ss);
        }

        docSaleContainer{
            MOVE BOX(sc);
        }
    }
}

META defineScheduleOrderDashboard(sign, stockFilter)

    countRemaining 'Кол-во оставшихся заказов'##sign (scheduleOrder,DATE date) = GROUP SUM 1 IF dateSupply(ScheduleOrderDetail d) >= (date AS DATE) 
                                                                                            BY scheduleOrder(d); 
    lastScheduleOrderSupplierCustomer (s,ss,c,Stock cs) = 
        GROUP LAST ScheduleOrder scheduleOrder IF endDate(scheduleOrder) AND in(scheduleOrder, cs)
               ORDER endDate(scheduleOrder), scheduleOrder 
               WHERE scheduleOrder IS ScheduleOrder
               BY supplier(scheduleOrder), supplierStock(scheduleOrder), customer(scheduleOrder);  
                                                                                                                                                                                       
//isLastScheduleOrder 'Последний график' (s)= 
//    lastScheduleOrderSupplierStockCustomerStock(supplierScheduleOrder(s),supplierStockScheduleOrder(s),customerScheduleOrder(s),customerStockScheduleOrder(s)) ==s;
    isActive(ScheduleOrder scheduleOrder, DATE date) = (startDate(scheduleOrder) <= (date AS DATE) AND endDate(scheduleOrder) >= date) OR
                                                     (startDate(scheduleOrder) <= (date AS DATE) AND NOT endDate(scheduleOrder));   
    background 'Цвет' (ScheduleOrder scheduleOrder, DATE date) = CASE WHEN startDate(scheduleOrder) > date THEN RGB(224,255,224)
                                                  WHEN endDate(scheduleOrder) < date THEN RGB(255,224,224);                                                                                                                                                                                                                           
                                                                                                                                                                                                                          
    FORM scheduleOrderDashboard 'Графики заказов' 

        OBJECTS d=DATE PANEL
        PROPERTIES dv=VALUE(d)
        PROPERTIES () nameSupplier, nameCustomer, nameSupplierStock
        
        OBJECTS s=ScheduleOrder
        PROPERTIES(s) READONLYIF isReadonly() startDate, endDate, nameSupplier, nameSupplierStock,
                      nameCustomer, stocks, nameType, note
        PROPERTIES(s,d) READONLY countRemaining
        PROPERTIES(s)            copy 
        PROPERTIES(s) NEWSESSION EDIT 
        PROPERTIES(s) show
        ORDERS endDate(s)

        FILTERS supplier(s) == supplier() OR (s IS ScheduleOrder AND NOT supplier()),
                supplierStock(s) == supplierStock() OR (s IS ScheduleOrder AND NOT supplierStock()),
                customer(s) == customer() OR (s IS ScheduleOrder AND NOT customer())

        FILTERGROUP countFilter1
            FILTER 'Заканчивается в течение 3 дн.' endDate(s) <= sum(d,2) AND endDate(s) >= d 'F10' DEFAULT
            FILTER 'Заканчивается в течение 5 дн.' endDate(s) <= sum(d,4) AND endDate(s) >= d 'F9' 
                              
        OBJECTS ss=ScheduleOrder
        PROPERTIES(ss) BACKGROUND background(ss,d) READONLYIF isReadonly() startDate, endDate, nameSupplier, nameSupplierStock,
                      nameCustomer, stocks, nameType, note     
        PROPERTIES(ss) NEWSESSION NEW, EDIT, DELETE               
        PROPERTIES(ss) show
        ORDERS startDate(ss)
              
        PROPERTIES (ss) READONLY PANEL createdTime, createdNameUser, createdHostnameComputer
              
        FILTERS supplier(ss) == supplier() OR (ss IS ScheduleOrder AND NOT supplier()),
                supplierStock(ss) == supplierStock() OR (ss IS ScheduleOrder AND NOT supplierStock()),
                customer(ss) == customer() OR (ss IS ScheduleOrder AND NOT customer())
 
    FILTERGROUP inactiveScheduleOrder
        FILTER 'Текущие' isActive(ss,d) 'F11'            
        FILTER 'Активные' isActive(ss,d) OR (startDate(ss) > d) 'F10' DEFAULT                                                        
                                         
    ;

    DESIGN scheduleOrderDashboard 'Графики заказов'###sign {
        NEW header {
            type = CONTAINERH;
            MOVE PROPERTY(dv);
            MOVE PROPERTY(nameSupplier());
            MOVE PROPERTY(nameSupplierStock());
            MOVE PROPERTY(nameCustomer());
        }
        NEW headBox {
            fill = 1;
            type = SPLITV;
            MOVE BOX(s);
            MOVE BOX(ss) { fill = 2;}           
        }
        MOVE TOOLBARBOX;
    }
    @extendFormFilterAccessLegalEntity(ScheduleOrder, s, scheduleOrderDashboard, stockFilter, company);
    @extendFormFilterAccessLegalEntity(ScheduleOrder, ss, scheduleOrderDashboard, stockFilter, company);
    @extendFormEditable(scheduleOrderDashboard);
    
END

