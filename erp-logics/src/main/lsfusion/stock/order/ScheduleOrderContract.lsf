MODULE ScheduleOrderContract;

REQUIRE ScheduleOrder, StockContract;

contractSku = ABSTRACT ContractSku (ScheduleOrder) MATERIALIZED ;
seriesNumberContractSku 'Номер договора' (ScheduleOrder o) = seriesNumber[Contract](contractSku(o)) IN documentPrm;
dateFromContractSku 'Дата договора' (ScheduleOrder o) = dateFrom(contractSku(o)) IN documentPrm;

descriptionContractSku 'Описание договора' (ScheduleOrder o)= CONCAT ' ', seriesNumberContractSku(o), ' от ' + dateFromContractSku(o);

isCommission 'Продажа на комиссию' = ABSTRACT BOOLEAN (ScheduleOrder) IN documentPrm MATERIALIZED;

contractSku (ScheduleOrderDetail d) = contractSku(scheduleOrder(d));
seriesNumberContractSku 'Номер договора' (ScheduleOrderDetail d) = seriesNumber[Contract](contractSku (d));


META defineScheduleOrderContract (contractType, contractClass, caption, NS)
    contractType = DATA contractClass (ScheduleOrder);
    seriesNumber###contractType 'Номер договора' (ScheduleOrder o) = seriesNumber[Contract](contractType(o)) IN documentPrm;
    dateFrom###contractType 'Дата договора' (ScheduleOrder o) = dateFrom(contractType(o)) IN documentPrm;
    
    description###contractType 'Описание договора' (ScheduleOrder o)= CONCAT ' ', seriesNumber###contractType(o), ' от ' + dateFrom###contractType(o);
    
    replace(contractClass c, contractClass o) + { contractType(ScheduleOrder object) <- o WHERE contractType(object) == c;}
    
    isCommission 'Продажа на комиссию' = DATA BOOLEAN (ScheduleOrder) IN documentPrm;
    
    contractType (ScheduleOrderDetail d) = contractType(scheduleOrder(d));
    seriesNumber###contractType 'Номер договора' (ScheduleOrderDetail d) = seriesNumber[Contract](contractType (d));
    
    contractType(ScheduleOrder o) += contractType(o);
    isCommission(ScheduleOrder o) += isCommission(o);
    
    isCommission(ScheduleOrder o) <- type(contractType(o)) == ContractSkuType.commission
        WHEN CHANGED(contractType(o));
    
    
    WHEN LOCAL (CHANGED(supplier(ScheduleOrder o)) OR CHANGED(supplierStock(o)) OR CHANGED(customer(o)) OR CHANGED(startDate(o))) 
        AND NOT CHANGED(contractType(o)) DO {
                
        contractType(o) <- default###contractType##SupplierCustomer(supplier(o), supplierStock(o), customer(o), startDate(o))
                                        IF count###contractType##SupplierCustomer(supplier(o), supplierStock(o), customer(o), startDate(o)) == 1;
    
    }
     
    dateFromConstraintContractScheduleOrder 'Дата начала контроля сроков договора графиков поставок'##caption = DATA DATE ();  
    
    EXTEND FORM options 
        PROPERTIES NS###dateFromConstraintContract###scheduleOrder = dateFromConstraintContractScheduleOrder()    
    ;
        
    DESIGN options {
        contract {
            MOVE PROPERTY(NS###dateFromConstraintContract###scheduleOrder);
        }
    }     
    
    CONSTRAINT contractType(ScheduleOrder o) AND NOT (dateFrom(contractType(o)) <= startDate(o) AND NOT (dateTo(contractType(o)) < startDate(o)))
               AND NOT (dateFromConstraintContractScheduleOrder() > startDate(o))
               CHECKED BY contractType[ScheduleOrder]
               MESSAGE 'Договор графика поставки просрочен или еще не действует';    
    
    CONSTRAINT contractType(ScheduleOrder o) AND NOT supplier(o) == partyA(contractType(o))
        CHECKED BY contractType[ScheduleOrder] MESSAGE 'Организация (поставщик) договора графика поставок не соответствует организации (поставщик) графика поставок';
    
    CONSTRAINT contractType(ScheduleOrder o) AND NOT customer(o) == partyB(contractType(o))
        CHECKED BY contractType[ScheduleOrder] MESSAGE 'Организация (покупатель) договора графика поставок не соответствует организации (покупатель) графика поставок';
                         
    CONSTRAINT contractType(ScheduleOrder o) AND countSuppliersStock(contractType(o)) AND NOT inSupplier(supplierStock(o),contractType(o))
        CHECKED BY contractType[ScheduleOrder] MESSAGE 'Для графика поставок выбран склад поставщика, который не включен в договор';
    
    
    EXTEND FORM scheduleOrder
        PROPERTIES (s) seriesNumber###contractType, isCommission
    ;
    
    EXTEND FORM scheduleOrderDashboard
        PROPERTIES (s) READONLY seriesNumber###contractType AFTER stocks(s)
        PROPERTIES (ss) READONLY seriesNumber###contractType AFTER stocks(ss)
    ;
END

META defineScheduleOrderContract (contractType, caption, NS)
    @defineScheduleOrderContract (contractType, ###contractType, caption, NS);
END

