MODULE Order;

REQUIRE System,
        LogTools,
        Historizable,
        Numerator,
        Document,
        Currency,
        Barcode,
        PriceListType,
        PriceListLedger,
        Agreement,
        OrderLedger,
        EmployeeStock,
        Operation,
        StockMovement,
        StockContract,
        StockTax,
        SkuList;


PRIORITY Utils, Stock;

@defineLogRotate(order, 5, weekly);

CLASS ABSTRACT Order 'Заказ' : Document;
CLASS ABSTRACT OrderDetail 'Строка заказа' : DocumentDetail, OrderLedger;

selected 'Отм.' = DATA LOCAL BOOLEAN (Order);
countSelectedOrder 'Кол-во отм.' = GROUP SUM 1 IF selected(Order order);

@defineDocumentAbstract(order);
@defineDocumentAbstractNumber(order, BPSTRING[2]);
//@defineDocumentDetailIndex(order);

@defineDocumentAbstractLegalEntity(order, supplier, 'Поставщик');
@defineDocumentAbstractLegalEntity(order, customer, 'Покупатель');

@defineDocumentAbstractLegalEntity(order, from, 'Отправитель');
@defineDocumentAbstractLegalEntity(order, to, 'Получатель');

closeDate 'Дата автоматического закрытия' = ABSTRACT DATE (Order) IN documentPrm MATERIALIZED;

externalStock = ABSTRACT Stock (Order);
idExternalStock (Order o) = id(externalStock(o));

@defineDocumentAbstractHeaderTimePrefix(Order, shipment, ' поставки');
shipmentDate 'Дата поставки' = ABSTRACT DATE (OrderDetail) IN documentHeader MATERIALIZED;
shipmentTime 'Время поставки' = ABSTRACT TIME (OrderDetail) IN documentHeader MATERIALIZED;
shipmentDateTime 'Дата/время поставки' (OrderDetail d) = dateTimeToDateTime(shipmentDate(d), shipmentTime(d)) MATERIALIZED;

@defineDocumentAbstractDataStock(order, stock, 'Склад поставщика', supplier);
@defineDocumentAbstractDataStock(order, stock, 'Склад покупателя', customer);

@defineDocumentAbstractDataStock(order, stock, 'Склад отправителя', from);
@defineDocumentAbstractDataStock(order, stock, 'Склад получателя', to);

@defineDocumentAbstractPosted(order);
@defineDocumentAbstractClosed(order);

@defineDocumentAbstractDetailSku(order, sku);
INDEX sku(OrderDetail d), customerStock(d);

@defineDocumentAbstractDetailBatch(order, batch);
idBatch 'Код партии' (OrderDetail d)= id(batch(d));

@defineDocumentAbstractDetailPrice(order);
@defineDocumentAbstractDetailPriceCustomPrefix(orderDetail, invoice, ' с НДС');
@defineDocumentAbstractDetailDataSumCustomPrefix (orderDetail, , );
@defineDocumentAbstractDetailVAT(order, , );
@defineDocumentAbstractDetailVATDataSumCustom (orderDetail, invoice);

@defineDocumentAbstractDetailQuantity(order);
@defineDocumentDetailGrossWeight(order, sku);
@defineDocumentAbstractDetailQuantityPrefix(order, pack, ' (упаковок)');
packQuantityOrderDetail 'Кол-во (упаковок)(всего)' (order) = GROUP SUM packQuantity(OrderDetail idetail) BY order(idetail) IN documentSum MATERIALIZED;

@defineDocumentHeaderSkuQuantity(order, sku);

@defineDocumentHeaderQuantity(order);
@defineDocumentHeaderVATSum(order, orderDetail, invoice);
@defineDocumentHeaderSum (order);

@defineDocumentHeaderGrossWeight(order);
@defineDocumentAbstractHeaderCurrency (order);

taxNumberSupplier 'Налоговый номер постащика' = ABSTRACT STRING[9] (Order);

createdUser = ABSTRACT CustomUser (Order);
createdNameUser 'Создан пользователем' (Order order) = name[Contact](createdUser(order)) CHARWIDTH 10 IN created;

operation = ABSTRACT Operation.Operation (Order) MATERIALIZED;
nameOperation 'Операция' (Order order) = name(operation(order));  ////

quantityFrom 'Кол-во со склада' (order, stock) = GROUP SUM quantity(OrderDetail orderDetail) BY order(orderDetail),
                                                                                                         fromStock(orderDetail);

quantityTo 'Кол-во на склад' (order, stock) = GROUP SUM quantity(OrderDetail orderDetail) BY order(orderDetail),
                                                                                                      toStock(orderDetail);

in 'Приходный' = ABSTRACT BOOLEAN (Order);

out 'Расходный' = ABSTRACT BOOLEAN (Order);

isReturn 'Возвратный' = ABSTRACT BOOLEAN (Order);

@defineDocumentAbstractHeaderDescription(Order);
@defineDocumentDetailDescription(order, OrderDetail);

@defineDocumentAbstractContract(Order, contractSku, ContractSku);

negativeValueOrders 'Запретить ввод отрицательных значений в заказах' = DATA BOOLEAN ();
EXTEND FORM options
    PROPERTIES() negativeValueOrders
;

DESIGN options {
    pane {
        NEW orders {
            caption = 'Заказы';
            NEW optionsContainer {
                MOVE PROPERTY(negativeValueOrders());            
            }
        }
    }
}

CLASS AcquisitionTarget 'Цель приобретения';
TABLE acquisitionTarget(AcquisitionTarget);

@defineExternalizable(acquisitionTarget, STRING[100]);

name 'Наименование' = DATA ISTRING[150](AcquisitionTarget);

FORM acquisitionTarget 'Цель приобретения'
    OBJECTS t=AcquisitionTarget PANEL
    PROPERTIES(t) name,  id SHOWIF showIDs()
    EDIT AcquisitionTarget OBJECT t
;

FORM acquisitionTargets 'Цели приобретения'
    OBJECTS t=AcquisitionTarget
    PROPERTIES(t) READONLY name, id SHOWIF showIDs() 
    PROPERTIES(t) NEWSESSION NEW, EDIT, deleteb = DELETE
    ORDERS name(t)
    LIST AcquisitionTarget OBJECT t
;
DESIGN acquisitionTargets { BOX { size = (600, 400); } }

acquisitionTarget = ABSTRACT AcquisitionTarget(Order);
nameAcquisitionTarget 'Цель приобретения' = name(acquisitionTarget(Order o));

filterOrderInterval 'Показывать заказы за последние N дней' = DATA INTEGER () COMPLEX;

EXTEND FORM options PROPERTIES() filterOrderInterval;
DESIGN options { orders { MOVE PROPERTY(filterOrderInterval()); } }


//----------------------------------------------- Заказ ---------------------------------------------------//

META defineOrder(sign, legalEntityProp, stockProp, supplierFilter, customerFilter, filter, priceListTypePrefix, NS, char)

    CLASS ABSTRACT Order 'Заказ'###sign : Order.Order;
    CLASS ABSTRACT OrderDetail 'Строка заказа'###sign : Order.OrderDetail;

    CLASS UserOrder 'Заказ (польз.)'###sign : Order;
    CLASS UserOrderDetail 'Строка заказа (польз.)'###sign : OrderDetail;
    
    TABLE sessionOrder(Session, Order);
    TABLE sessionOrderDetail(Session, OrderDetail);
    
    backgroundSku 'Цвет'  (d)= ABSTRACT CASE COLOR (Order);

    @defineExternalizable(userOrder, STRING[100]);
    @defineExternalizable(userOrderDetail, STRING[100]);

    @defineDocumentInterface(order);
    note[Order.Order] (Order order) += note(order);
    index[Order.OrderDetail](OrderDetail d) += index(d);
    
    createdUser = ABSTRACT CustomUser (Order);
    createdNameUser 'Создан пользователем' (Order order) = name[Contact](createdUser(order)) CHARWIDTH 10 IN created;
    createdUser(UserOrder order) += createdUser(order) IF order IS UserOrder;    
    createdUser[Order.Order](Order order) += createdUser(order);    
    @deriveDocumentHeaderTimePrefix(UserOrder, );
    order[Order.OrderDetail] (OrderDetail detail) += order(detail);
    date[Order.Order] (Order order) += date(order);
    time[Order.Order] (Order order) += time(order);

    @defineDocumentInterfaceNumber(order, BPSTRING[2]);
    number[Order.Order] (Order order) += number(order);
    series[Order.Order] (Order order) += series(order);

    INDEX number(Order o);

    @defineNumeratedDefault(UserOrder, 'Заказы'###sign, 'ЗК', NS);

    @defineDocumentInterfaceLegalEntity (order, supplier, 'Поставщик');
    @defineDocumentInterfaceLegalEntity (order, customer, 'Покупатель');
    supplier[Order.Order](Order order) += supplier(order);
    customer[Order.Order](Order order) += customer(order);

    @defineDocumentInterfaceDataStock(order, stock, 'Склад поставщика', supplier);
    @defineDocumentInterfaceDataStock(order, stock, 'Склад покупателя', customer);
    supplierStock[Order.Order](Order order) += supplierStock(order);
    customerStock[Order.Order](Order order) += customerStock(order);

    CONSTRAINT supplier(UserOrder userOrder) AND supplierStock(userOrder) AND NOT
               in(supplier(userOrder), supplierStock(userOrder))
        CHECKED BY supplierStock[UserOrder]
            MESSAGE 'Поставщик и склад поставщика для заказа не имеют связи';
    CONSTRAINT customer(UserOrder userOrder) AND customerStock(userOrder) AND NOT
               in(customer(userOrder), customerStock(userOrder))
        CHECKED BY customerStock[UserOrder]
            MESSAGE 'Покупатель и склад покупателя для заказа не имеют связи';

    @defineDocumentInterfaceContract(Order, contractSku, supplier, customer,
                                     'Организация (поставщик) договора заказа не соответствует организация (поставщик) заказа',
                                     'Организация (покупатель) договора заказа не соответствует организация (покупатель) заказа',
                                     'заказ'###sign, NS);
    contractSku[Order.Order] (Order order) += contractSku (order);
    
    contractSku (UserOrderDetail detail) = contractSku(userOrder(detail));
    
    acquisitionTarget = ABSTRACT AcquisitionTarget(Order);
    nameAcquisitionTarget 'Цель приобретения' = name(acquisitionTarget(Order o));
    acquisitionTarget = DATA AcquisitionTarget(UserOrder);
    nameAcquisitionTarget 'Цель приобретения' = name(acquisitionTarget(UserOrder o)) IN documentPrm;    
    acquisitionTarget(UserOrder o) += acquisitionTarget(o);
    acquisitionTarget[Order.Order](Order o) += acquisitionTarget(o);
    
    @defineDocumentInterfacePosted(order);
    isPosted[Order.Order] (Order order) += isPosted(order);
    
    @defineDocumentInterfaceClosed(order);
    isClosed[Order.Order] (Order order) += isClosed(order);
    
    @defineDocumentInterfaceDataTimePrefix(order, shipment, ' поставки');
    shipmentTime[Order.Order](Order order) += shipmentTime(order);
    shipmentDate[Order.Order](Order order) += shipmentDate(order);    
    shipmentTime(OrderDetail d) += shipmentTime(d);
    shipmentDate(OrderDetail d) += shipmentDate(d);
    
    overCloseDate  = ABSTRACT DATE (Order);
    closeDate 'Дата автоматического закрытия' = ABSTRACT DATE (Order) IN documentPrm;
    closeDate 'Дата автоматического закрытия' = DATA DATE (UserOrder) IN documentPrm;
    closeDate(UserOrder order) += closeDate(order);
    closeDate[Order.Order] (Order order) += closeDate(order);
    
    overCloseDate  = ABSTRACT DATE (OrderDetail);
    closeDataDate 'Дата автоматического закрытия' = ABSTRACT DATE (OrderDetail) IN documentPrm;
    closeDataDate 'Дата автоматического закрытия' = DATA DATE (UserOrderDetail) IN documentPrm;
    closeDataDate(UserOrderDetail detail) += closeDataDate(detail);

    closeDate 'Дата автоматического закрытия' (OrderDetail detail) = OVERRIDE closeDataDate(detail), closeDate(order(detail)) MATERIALIZED;
    closeDate 'Дата автоматического закрытия' (UserOrderDetail detail) = OVERRIDE closeDataDate(detail), closeDate(userOrder(detail)) MATERIALIZED;
    
    dataQuantityDaysCloseOrders 'Срок автоматического закрытия заказов'###sign = DATA INTEGER(Stock);
    
    closeDataDate(UserOrderDetail detail) <- OVERRIDE overCloseDate(detail), sum(shipmentDate(detail), (OVERRIDE dataQuantityDaysCloseOrders(stockProp##Stock(detail)),quantityDaysCloseOrders(stockProp##Stock(detail))))
        WHEN CHANGED(shipmentDate(detail)) OR CHANGED(stockProp##Stock(detail)) OR CHANGED(overCloseDate(detail));
    closeDate(UserOrder order) <- OVERRIDE overCloseDate(order), sum(shipmentDate(order), (OVERRIDE dataQuantityDaysCloseOrders(stockProp##Stock(order)),quantityDaysCloseOrders(stockProp##Stock(order))))
            WHEN CHANGED(shipmentDate(order)) OR CHANGED(stockProp##Stock(order)) OR CHANGED(overCloseDate(order));    

    clearApplicationLog () + { 
    	NEWSESSION {
            isClosed(Order order) <- TRUE WHERE isOpened(order) AND closeDate(order) <= currentDate();
            setNoCancelInTransaction();
            APPLY;
        }
    } 

    @defineDocumentInterfaceDescription(order, 'Заказ'###sign);
    description[Order.Order](Order order) += description(order);    
    
    @defineDocumentInterfaceCurrency(order);
    @deriveDocumentCurrency(userOrder, supplier, currencyLegalEntity);
    currency[Order.Order](Order order) += currency(order);

    @defineDocumentInterfaceAgreement(order);
    @deriveDocumentHeaderAgreement (userOrder, supplier, customer, 'заказ'###sign, NS);

    matches (UserOrder i, Agreement a) = fromDateTime(a) <= dateTime(i) AND NOT (toDateTime(a) < dateTime(i))
                                                   AND inSupplier(a, supplier(i)) AND inCustomer(a, customer(i)); 

    countInSku (UserOrder i) = 
        GROUP SUM 1 IF matches(i, Agreement a) AND currency(i) = currency(a) AND [GROUP SUM 1 IF in(a, sku(UserOrderDetail d)) BY userOrder(d)](i);

    maxAgreementInSku (UserOrder i) = 
        GROUP MAX Agreement a IF matches(i, a) AND [GROUP SUM 1 IF in(a, sku(UserOrderDetail d)) BY userOrder(d)](i);

    @defineDocumentInterfaceDetailSku(order, sku);
    INDEX sku(OrderDetail d), customerStock(d);
    sku[Order.OrderDetail](OrderDetail detail) += sku(detail);

    blankLineOrders 'Разрешить строки без SKU в заказах '##sign = DATA BOOLEAN ();
    
    EXTEND FORM options
        PROPERTIES() NS##blankLineOrders = blankLineOrders
    ;
    
    DESIGN options {
        optionsContainer {
            MOVE PROPERTY(NS##blankLineOrders);
        }
    }

    CONSTRAINT isPosted(UserOrderDetail d) AND NOT sku(d) AND NOT blankLineOrders()
        MESSAGE 'Для строки заказа '##sign##' должен быть задан SKU';   

    @defineDocumentInterfaceDetailQuantity(order);
    quantity[Order.OrderDetail](OrderDetail detail) += quantity(detail);
    CONSTRAINT CHANGED(quantity(OrderDetail detail)) AND negativeValueOrders() AND quantity(detail) < 0
        MESSAGE 'Количество в строке заказа должно быть не отрицательным';

    @defineDocumentInterfaceDetailPrice(order); // объявляем цену без НДС
    price[Order.OrderDetail](OrderDetail detail) += price(detail);

    overPriceStockUser = ABSTRACT CASE Stock (Order) MATERIALIZED;
    priceStockUser(Order o) = OVERRIDE overPriceStockUser(o), stockProp##Stock(o);
    priceStock(UserOrderDetail d) = priceStockUser(userOrder(d)); 

    priceDateTime = ABSTRACT CASE DATETIME (UserOrder) MATERIALIZED;
    priceDateTime (UserOrder o) += WHEN o IS UserOrder THEN dateTime(o); 
    priceDateTime(UserOrderDetail d) = priceDateTime(userOrder(d)); 

    @defineDocumentInterfaceDetailVAT(order, country###stockProp###stock, , ); // объявляем шкалу
    
    overVAT = ABSTRACT VALUE Range (UserOrderDetail);
    overVAT(UserOrderDetail d) += VAT (sku(d), country(supplierStock(d)));
    changedVAT = ABSTRACT VALUE BOOLEAN (UserOrderDetail);
    
    WHEN LOCAL
        (SETCHANGED(sku(UserOrderDetail detail)) OR SETCHANGED (supplierStock(detail)) OR changedVAT(detail)) AND NOT CHANGED(VAT(detail)) DO {
            VAT(detail) <- overVAT(detail);
        } // записываем шкалу

    @deriveDocumentDetailValueVAT(userOrder); // записываем значение ставки

    VAT[Order.OrderDetail](OrderDetail detail) += VAT(detail);
    valueVAT[Order.OrderDetail](OrderDetail detail) += valueVAT(detail);

    @defineDocumentInterfaceDetailPricePrefix (order, invoice, ' с НДС'); // объявляем цену с НДС
    invoicePrice[Order.OrderDetail](OrderDetail d) += invoicePrice(d);
    // объявляем Action'ы для ON CHANGE
    @defineDocumentDetailPriceVATOnChange(userOrder);
    @defineDocumentDetailNumberVATOnChange(userOrder, stockProp###stock);
    @defineDocumentDetailValueVATOnChange(userOrder);
    @defineDocumentDetailInvoicePriceVATOnChange(userOrder);

    @defineDocumentInterfacePriceListType(order); // объявляем вид цены
    @deriveDocumentDetailPriceListTypeAgreement(userOrder, priceListTypePrefix); // записываем вид цены из соглашения
//    @deriveDocumentDetailPricePriceListTypeVAT (userOrder, stockProp); // записываем цены с НДС и без НДС на основе priceListType

    // суммма без НДС
    @defineDocumentInterfaceDetailDataSum(order);
    @deriveDocumentDetailSum(userOrder, quantity);
    sum[Order.OrderDetail](OrderDetail detail) += sum(detail);

    // суммы НДС и с НДС
    @defineDocumentInterfaceDetailVATDataSum (order, invoice); // объявляем свойства суммы НДС и суммы с НДС
    @deriveDocumentDetailVATDataSum(userOrder); // записываем сумму НДС
    @deriveDocumentDetailVATPrefixSum (userOrder, invoice); // записываем сумму с НДС

    VATSum[Order.OrderDetail](OrderDetail detail) += VATSum(detail);
    invoiceSum[Order.OrderDetail](OrderDetail detail) += invoiceSum(detail);

    @defineDocumentInterfaceHeaderVATSum (order, orderDetail, invoice);

    @defineDocumentInterfaceHeaderQuantity(order);
    @defineDocumentHeaderSkuQuantity(order, sku);
    //Order.quantityOrderSku (order, sku) += quantityOrderDetailSkuOrder(sku, order);

    @defineDocumentHeaderSkuQuantity(userOrder, sku);
        
    sumOrderDetail '{document.sum.of}' (order) = GROUP SUM sum(OrderDetail idetail) BY order(idetail) CHARWIDTH 10 IN documentSum MATERIALIZED;
    @defineDocumentHeaderSum(userOrder);
    
    @defineDocumentInterfaceHeaderItemQuantity(order);
    @defineDocumentInterfaceHeaderItemCount(order);    
    @defineDocumentInterfaceHeaderItemSum (order, VAT, VAT); //-- сумма НДС поставщика (с разбивкой по таре, товару...)
    @defineDocumentInterfaceHeaderItemSum (order, , ); //-- сумма поставщика (с разбивкой по таре, товару...)   
    @defineDocumentInterfaceHeaderItemSum(order, invoice, invoice); //-- сумма поставщика с НДС (с разбивкой по таре, товару...)  
        
    @defineDocumentInterfaceHeaderItemSumDouble (order, range, VAT, VAT, , VAT); //-- сумма НДС поставщика (с разбивкой по таре, товару...) по документу и по шкале
    @defineDocumentInterfaceHeaderItemSumDouble (order, range, , , , VAT);  //сумма без НДС поставщика (с разбивкой по таре, товару...) по документу и по шкале
    @defineDocumentInterfaceHeaderItemSumDouble (order, range, invoice, invoice, , VAT);  //сумма с НДС (с разбивкой по таре, товару...) по документу и по шкале    

    @defineAddDetailDialogSkuStock(userOrder, sku, stockProp###stock, dialogSku);
    @defineAddDetailDialogBarcode(userOrder, sku);

    noAgreement (UserOrder order) = order IS UserOrder AND NOT agreement(order);

    countOrderDetail 'Кол-во строк по складу '(stock, order) = GROUP SUM 1 BY stockProp##Stock(OrderDetail orderDetail), order(orderDetail);

//-- Дата следующей поставки
    @defineDocumentInterfaceDatePrefix (order, nextShipment, ' следующей поставки');
    quantityDaysNextShipment 'Кол-во дней до след. поставки' (UserOrder userOrder) =  daysBetweenDates(nextShipmentDate(userOrder), date(userOrder)) + 1;

    @implementDocumentSupplierCustomer(order);
    
    @implementDocumentForm(NS.###order, char##o, 'Заказ'###sign, NS###order);
    
    @defineMovementSku(orderDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение товара
    @defineMovementSku(userOrderDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение товара
    @defineBalancesSku(orderDetail); //-- показываем по нажатию правой клавиши остатки товара
    @defineBalancesSku(userOrderDetail); //-- показываем по нажатию правой клавиши остатки товара
    @defineBarcodeSku(orderDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
    @defineBarcodeSku(userOrderDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
    @defineMovementPriceSku(orderDetail, stockProp###stock); //-- показываем по нажатию правой клавиши изменение цены товара
    @defineMovementPriceSku(userOrderDetail, stockProp###stock); //-- показываем по нажатию правой клавиши  изменение цены товара
    @defineInfoSku(orderDetail); //-- показываем по нажатию правой клавиши информацию по товару
    @defineInfoSku(userOrderDetail); //-- показываем по нажатию правой клавиши информацию по товару

    @defineDocumentDialogSupplierCustomerStock(userOrder, supplierFilter, customerFilter);
    @defineDocumentDialogSupplierCustomerLegalEntity(userOrder, supplierFilter, customerFilter);
    
    backgroundQuantity 'Цвет'  (d)= ABSTRACT CASE COLOR (UserOrderDetail);
    backgroundPrice 'Цвет'  (d)= ABSTRACT CASE COLOR (UserOrderDetail);
    backgroundName 'Цвет'  (d)= ABSTRACT CASE COLOR (UserOrderDetail);
    
    backgroundCustomer 'Цвет'  (d)= ABSTRACT CASE COLOR (UserOrder);
// --------------------------- Формы Заказа ---------------------------------
    foregroundSku 'Цвет шрифта' = ABSTRACT CASE COLOR (UserOrderDetail, UserOrder);
    backgroundSku 'Цвет' (d) = ABSTRACT CASE COLOR (UserOrderDetail);

    editSku 'Редактировать SKU' (UserOrderDetail d)  { NEWSESSION { edit(sku(d)); } }
    
    backgroundParam = RGB(212,255,212) IF OrderDetail orderDetail IS OrderDetail; 
    backgroundPriceParam = OVERRIDE backgroundPrice(OrderDetail d), backgroundParam(d);; 
    backgroundQuantityParam = OVERRIDE backgroundQuantity(OrderDetail d), backgroundParam(d);
    disablePosted 'Запретить проведение' = ABSTRACT BOOLEAN (UserOrder); 
    overPrePost 'Провести' (UserOrder o)  { 
        IF NOT disablePosted(o) THEN {
            isPosted(o) <- TRUE;
        } 
    }
    
    hideWithoutVAT = ABSTRACT BOOLEAN (Order);    
    hideWithVAT = ABSTRACT BOOLEAN (Order);
        
    FORM userOrder 'Заказ'###sign
        OBJECTS o = UserOrder PANEL
        PROPERTIES (o) isPosted, nameSupplier ON CHANGE changeSupplier###supplierFilter(o),
                       nameCustomer ON CHANGE changeCustomer###customerFilter(o) BACKGROUND backgroundCustomer(o),
                       nameSupplierStock ON CHANGE changeSupplierStock###supplierFilter(o),
                       nameCustomerStock ON CHANGE changeCustomerStock###customerFilter(o) BACKGROUND backgroundCustomer(o),
                       nameNumerator, number, series, date, time,
                       nameCurrency, nameAgreement, namePriceListType SHOWIF noAgreement(o), note, nameAcquisitionTarget
        PROPERTIES (o) READONLY countUserOrderDetail, quantityUserOrderDetail, sumUserOrderDetail SHOWIF NOT hideWithoutVAT(o),
                       VATSumUserOrderDetail, invoiceSumUserOrderDetail
        PROPERTIES (o) shipmentDate, shipmentTime, closeDate, nextShipmentDate,
                       quantityDaysNextShipment READONLY,
                       seriesNumberContractSku, isCommission

        OBJECTS d = UserOrderDetail
        PROPERTIES (d) index 
        PROPERTIES (d) ON EDIT editSku(d) FOREGROUND foregroundSku(d, o) BACKGROUND backgroundSku(d) 
                       idBarcodeSku, idSku, nameSku BACKGROUND backgroundName(d), shortNameUOMSku
        PROPERTIES (d) quantity BACKGROUND backgroundQuantityParam(d), namePriceListType,
                       price ON CHANGE changePrice(d) BACKGROUND backgroundPriceParam(d) SHOWIF NOT hideWithoutVAT(o), 
                       sum SHOWIF NOT hideWithoutVAT(o),
                       numberVAT ON CHANGE changeNumberVAT(d) SHOWIF NOT hideWithoutVAT(o),
                       valueVAT ON CHANGE changeValueVAT(d) SHOWIF NOT hideWithoutVAT(o),
                       invoicePrice ON CHANGE changeInvoicePrice(d) SHOWIF NOT hideWithVAT(o),
                       VATSum, invoiceSum,
                       shipmentDate, shipmentTime, 
                       closeDate, NEW, deleteod = DELETE GRID
        ORDERS index(d)

        PROPERTIES(o) DRAW d fillDocument, addDetailDialogSkuStockUserOrderDetail,
                               addDetailInputBarcodeUserOrderDetail, deleteUserOrderDetail
        FILTERS userOrder(d) == o

        EVENTS
            ON OK overPrePost(o)

        EDIT UserOrder OBJECT o
    ;
    
    DESIGN userOrder {

        BOX {
            size = (1024, 768);
            NEW mainTabbed {
                type = TABBED;
                fill = 1;
                NEW documentBox{
                    fill = 1;
                    caption = 'Заказ';
                    NEW headerBox {
                        type = CONTAINERH;
                        alignment = STRETCH;
        
                        NEW headerRow1 {
                            fill = 1;
        
                            MOVE GROUP(documentHeader,o) {
                                lines = 1;
                                alignment = STRETCH;
                                type = CONTAINERV;
                                NEW first {
                                    alignment = STRETCH;
                                    type = CONTAINERH;
                                    MOVE PROPERTY(isPosted(o));
                                }
                                NEW second { 
                                    alignment = STRETCH;
                                    type = CONTAINERH;
                                    MOVE PROPERTY(nameNumerator(o));
                                    MOVE PROPERTY(number(o)) { flex = 200; }
                                    MOVE PROPERTY(series(o));
                                    MOVE PROPERTY(date(o));
                                    MOVE PROPERTY(time(o));
                                }    
                            }                    
                            
                            NEW headerRow11 {
                                type = CONTAINERH;
                                alignment = STRETCH;
                                NEW headerRow111 {
                                    caption = 'Поставщик';
                                    type = CONTAINERH;
                                    fill = 1;
                                    MOVE PROPERTY(nameSupplier(o)) { caption = ''; };
                                    MOVE PROPERTY(nameSupplierStock(o)) { caption = 'Склад'; };
                                }
                                NEW headerRow112 {
                                    caption = 'Покупатель';
                                    type = CONTAINERH;
                                    fill = 1;
                                    MOVE PROPERTY(nameCustomer(o)) { caption = ''; };
                                    MOVE PROPERTY(nameCustomerStock(o)) { caption = 'Склад'; };
                                }
                            }
                            NEW headerTabbedPane {
                                fill = 1;
                                type = TABBED;
                                NEW headerMainParams {
                                    caption = 'Основные параметры';
                                    NEW headerContract {
                                        type = CONTAINERH;
                                        caption = 'Договор';
                                        MOVE PROPERTY(seriesNumberContractSku(o));
                                        MOVE PROPERTY(isCommission(o));
                                    }
                                    MOVE GROUP(documentPrm,o) {
                                        lines = 3;
                                        alignment = STRETCH;
                                    }
                                    MOVE PROPERTY(note(o));
                                }
                                NEW headerExtraParams {
                                    caption = 'Дополнительные параметры';
                                    type = COLUMNS;
                                    lines = 3;                                
                                    NEW documentShipmentGroup {
                                        caption = 'Исполнение';
                                        type = COLUMNS;
                                        lines = 1;
                                        MOVE PROPERTY(shipmentDate(o));
                                        MOVE PROPERTY(shipmentTime(o));
                                    }
                                    NEW headerRow121 {
                                        caption = 'Поставка';
                                        type = COLUMNS;
                                        lines = 1;
                                        MOVE PROPERTY(nextShipmentDate(o));
                                        MOVE PROPERTY(quantityDaysNextShipment(o));
                                    }
                                    NEW headerDate {
                                        caption = 'Закрытие';
                                        type = CONTAINERV;
                                        MOVE PROPERTY(closeDate(o));
                                    }
                                }
                                NEW headerCreateDetail {
                                    caption = 'Основание';
                                    type = CONTAINERV;
                                }
                                NEW headerCreateDocuments {
                                    caption = 'Производные документы';
                                    type = CONTAINERH;
                                }
                                NEW import {
                                    caption = 'Импорт';
                                    type = CONTAINERH;
                                }
                                NEW add {
                                    caption = 'Подбор';
                                    type = CONTAINERH;
                                    alignment = START;
                                    MOVE PROPERTY(fillDocument(o));
                                    MOVE PROPERTY(addDetailDialogSkuStockUserOrderDetail(o));
                                }
                            }
                        }
        
                        MOVE GROUP(documentSum,o) {
                            lines = 1;
                        }
                    }
                    NEW specificationBox {
                        fill = 1;
                        type = TABBED;
                        MOVE BOX(d) {
                            caption = 'Спецификация';
                        }
                    }
                }
            }
            MOVE TOOLBARBOX;

            PROPERTY(formOk()) {
                caption = 'Провести';
            }                        
            PROPERTY(sumUserOrderDetail(o)) { charWidth = 13;}
            PROPERTY(VATSumUserOrderDetail(o)) { charWidth = 13;}
            PROPERTY(invoiceSumUserOrderDetail(o)) { charWidth = 13;}
            PROPERTY(deleteUserOrderDetail(o)){focusable = FALSE;}
            
        }
    }

    @addEventGenerateNumberOnForm(userOrder, o, userOrder);
    @defineDocumentSkuStockPriceListTypeAgreement(userOrder, stockProp, priceDateTime);
    @extendFormDocumentSkuStockPriceListTypeAgreement(userOrder, userOrder, o, legalEntityProp, stockProp, priceDateTime);

    isUserOpened(UserOrder o)=  isOpened[Order](o) AND is(o);

    overCopy  ABSTRACT LIST ( UserOrderDetail, OrderDetail);
    overCopy  ABSTRACT LIST ( Order, UserOrder);
    copy 'Копировать'(Order order)  { 
	NEWSESSION {
	        NEW o = UserOrder {
	            supplier(o) <- supplier(order);
	            supplierStock(o) <- supplierStock(order) IF active(supplierStock(order));
	            customer(o) <- customer(order);
	            customerStock(o) <- customerStock(order) IF active(customerStock(order));
	            currency(o) <- currency(order);
	            agreement(o) <- agreement(order);
	            priceListType(o) <- priceListType(order);
	            note(o) <- note(order);
	
	            overCopy(order, o);
	
	            FOR order(OrderDetail orderDetail) == order DO {
	                NEW d=UserOrderDetail {
	                    userOrder(d) <- o;
	                    sku(d) <- sku(orderDetail);
	                    quantity(d) <- quantity(orderDetail);
	                    
	                    overCopy(d, orderDetail);
	                }
	            }
	
	            SHOW userOrder OBJECTS o = o DOCKED;
	        }
	    }
} TOOLBAR;
    
//-- Копирование строк     
    overCopy  ABSTRACT LIST ( UserOrderDetail, UserOrderDetail);

    copy 'Копировать'(UserOrderDetail detail)  { 
        NEW d = UserOrderDetail {          

            userOrder(d) <- userOrder(detail);
            sku(d) <- sku(detail);
            quantity(d) <- quantity(detail);
            price(d) <- price(detail);
            priceListType(d) <- priceListType(detail);      
            shipmentDataDate(d) <- shipmentDataDate(detail);         
            shipmentDataTime(d) <- shipmentDataTime(detail);        
            closeDataDate(d) <- closeDataDate(detail);  
            
            EXEC overCopy(d, detail);                              
        }
    } CHANGEKEY 'F6' TOOLBAR;
    
    EXTEND FORM userOrder PROPERTIES(d) copy ;
    DESIGN userOrder { PROPERTY(copy(d)) { focusable = FALSE; } }
    
    filterOrderDateFrom 'Дата с' = DATA LOCAL DATE ();
    filterDateFrom (Order o) = date(o) >= filterOrderDateFrom() OR (o IS Order AND NOT filterOrderDateFrom());      
    
    filterOrderDateTo 'Дата по' = DATA LOCAL DATE ();
    filterDateTo (Order o) = date(o) <= filterOrderDateTo() OR (o IS Order AND NOT filterOrderDateTo());      
    
    filterOrderCustomer  = DATA LOCAL LegalEntity ();
    nameFilterOrderCustomer 'Покупатель' = name(filterOrderCustomer()) CHARWIDTH 15;          
    filterCustomer (Order o) = customer(o) == filterOrderCustomer() OR (o IS Order AND NOT filterOrderCustomer());    

    filterOrderCustomerStock  = DATA LOCAL Stock ();
    nameFilterOrderCustomerStock 'Склад покупателя' = name(filterOrderCustomerStock()) CHARWIDTH 15;          
    filterCustomerStock (Order o) = customerStock(o) == filterOrderCustomerStock() OR (o IS Order AND NOT filterOrderCustomerStock());  

    filterOrderSupplier = DATA LOCAL LegalEntity ();
    nameFilterOrderSupplier 'Поставщик' = name(filterOrderSupplier()) CHARWIDTH 15;          
    filterSupplier (Order o) = supplier(o) == filterOrderSupplier() OR (o IS Order AND NOT filterOrderSupplier());      

    filterOrderSupplierStock  = DATA LOCAL Stock ();
    nameFilterOrderSupplierStock 'Склад поставщика' = name(filterOrderSupplierStock()) CHARWIDTH 15;          
    filterSupplierStock (Order o) = supplierStock(o) == filterOrderSupplierStock() OR (o IS Order AND NOT filterOrderSupplierStock()); 
           
    filterOrderCustomUser  = DATA LOCAL CustomUser ();
    nameFilterOrderCustomUser 'Создан пользователем' = name[Contact](filterOrderCustomUser()) CHARWIDTH 15;          
    filterCustomUser (Order i) = createdUser[UserOrder](i) == filterOrderCustomUser() OR (i IS Order AND NOT filterOrderCustomUser());  

    filterOrderComputer = DATA LOCAL Computer ();
    nameFilterOrderComputer 'Создан на компьютере' = hostname(filterOrderComputer()) CHARWIDTH 15;          
    filterComputer (Order i) = createdComputer(i) == filterOrderComputer() OR (i IS Order AND NOT filterOrderComputer());
    
    overShowEdit = ABSTRACT VALUE BOOLEAN (Order);
    overShowDelete = ABSTRACT VALUE BOOLEAN (Order);      
    skipShowEdit = ABSTRACT VALUE BOOLEAN (Order);
    skipShowDelete = ABSTRACT VALUE BOOLEAN (Order);
    
    skipOpen = ABSTRACT BOOLEAN (UserOrder);
    showClose (UserOrder o) = isOpened(o) AND NOT skipClose(o);
    showOpen (UserOrder o) = isClosed(o) AND NOT skipOpen(o);
    
    backgroundDraft 'Цвет' (Order o) = RGB(212,255,212) IF isDraft(o);      
    overBackgroundDraft(Order o) = OVERRIDE backgroundSku(o), backgroundDraft(o);
    
    backgroundShipmentDate 'Цвет' = ABSTRACT VALUE COLOR (Order);
    backgroundShipmentDate(Order o) += backgroundSku(o);
    
    backgroundSkuDetail 'Цвет' (d) = ABSTRACT CASE COLOR (OrderDetail);
    
    FORM orders 'Заказы' AUTOREFRESH 60 
    
        PROPERTIES() filterOrderDateFrom, filterOrderDateTo, nameFilterOrderSupplier, nameFilterOrderSupplierStock, 
                     nameFilterOrderCustomer, nameFilterOrderCustomerStock, nameFilterOrderCustomUser, nameFilterOrderComputer
        FILTERS is###supplierFilter(filterOrderSupplier())    
            
        OBJECTS o = Order LAST
        PROPERTIES (o) selected
        PROPERTIES (o) READONLYIF isReadonly() BACKGROUND backgroundSku(o) isClosed
        PROPERTIES (o) READONLYIF isReadonly() BACKGROUND overBackgroundDraft(o) isPosted, number, series, date, time
        PROPERTIES (o) READONLYIF isReadonly() BACKGROUND backgroundSku(o) nameSupplier, nameSupplierStock, nameCustomer, nameCustomerStock, nameCurrency,
                                nameAgreement, seriesNumberContractSku
        PROPERTIES (o) READONLY BACKGROUND backgroundSku(o) countOrderDetail, quantityOrderDetail, sumOrderDetail,
                                VATSumOrderDetail, invoiceSumOrderDetail
        PROPERTIES (o) READONLYIF isReadonly() BACKGROUND backgroundShipmentDate(o) shipmentDate, shipmentTime
        PROPERTIES (o) READONLYIF isReadonly() BACKGROUND backgroundSku(o) closeDate, note

        PROPERTIES (o) READONLY PANEL createdNameUser[UserOrder], createdTime, createdHostnameComputer, 
                                            postedNameUser, postedTime, postedHostnameComputer

        PROPERTIES (o) NEWSESSION addUserOrder = NEW[UserOrder], editO = EDIT  SHOWIF overShowEdit(o)
        PROPERTIES (o) copy
        PROPERTIES (o) close[UserOrder] SHOWIF showClose[UserOrder](o), open SHOWIF showOpen[UserOrder](o)
        PROPERTIES     NEWSESSION deleteo=DELETE(o) SHOWIF overShowDelete(o) //isUserOpenedOrder(o)

        OBJECTS d=OrderDetail
        PROPERTIES (d) READONLY index, idBarcodeSku BACKGROUND backgroundSkuDetail(d), 
                       idSku BACKGROUND backgroundSkuDetail(d), nameSku BACKGROUND backgroundSkuDetail(d), shortNameUOMSku BACKGROUND backgroundSkuDetail(d)
        PROPERTIES (d) READONLY quantity BACKGROUND backgroundQuantityParam(d), namePriceListType, 
                       price BACKGROUND backgroundPriceParam(d) SHOWIF NOT hideWithoutVAT(o), sum SHOWIF NOT hideWithoutVAT(o),
                       numberVAT SHOWIF NOT hideWithoutVAT(o), valueVAT SHOWIF NOT hideWithoutVAT(o), 
                       invoicePrice SHOWIF NOT hideWithVAT(o),
                       VATSum, invoiceSum,
                       name###stockProp##Stock, shipmentDate, shipmentTime
        ORDERS index(d)

        FILTERS order(d) == o
        FILTERS filterDateFrom(o), 
                filterDateTo(o),
                filterSupplier(o),
                filterSupplierStock(o),
                filterCustomer(o),
                filterCustomerStock(o),
                filterCustomUser(o),
                filterComputer(o)                            
        
        EVENTS ON INIT {
            IF filterOrderInterval() THEN
                filterOrderDateFrom() <- subtract(currentDate(), filterOrderInterval()); 
        }
        
        LIST Order OBJECT o
    ;

    DESIGN orders 'Заказы'###sign {
        NEW documentContainer BEFORE TOOLBARBOX {
            fill = 1;
            type = SPLITV;

            NEW filtersBox {                       
                fill = 1;
                NEW topFilters {  
                    caption = 'Фильтры';
                    alignment = STRETCH;
                    NEW topFilters1 {
                        type = CONTAINERH; 
                        alignment = STRETCH;
                        MOVE PROPERTY(filterOrderDateFrom());
                        MOVE PROPERTY(filterOrderDateTo());                            
                        MOVE PROPERTY(nameFilterOrderCustomUser()) { fill = 1; }
                        MOVE PROPERTY(nameFilterOrderComputer()) { fill = 1; }                            
                    }
                    NEW topFilters2 {
                        type = CONTAINERH; 
                        alignment = STRETCH;
                        MOVE PROPERTY(nameFilterOrderSupplier()) { fill = 1; }
                        MOVE PROPERTY(nameFilterOrderSupplierStock()) { fill = 1; }     
                        MOVE PROPERTY(nameFilterOrderCustomer()) { fill = 1; }
                        MOVE PROPERTY(nameFilterOrderCustomerStock()) { fill = 1; }                                               
                    }                
                }
                MOVE BOX(o) {
                    fill = 1;
                }
            }
//            NEW BOX(o) {
//                fill = 2;
//            }

            NEW documentDetail {
                fill = 1;
                type = TABBED;

                MOVE BOX(d) {
                    fill = 1;
                    caption = 'Спецификация';
                }
                NEW documentHistory {
                    caption = 'История';
                    type = CONTAINERV;

                    MOVE GROUP(created,o) { alignment = STRETCH; }
                    MOVE GROUP(posted,o) { alignment = STRETCH; }
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                        type = CONTAINERV;
                    }
                }
                NEW actionContainer {
                    caption = 'Действия';
                    type = CONTAINERH;
                    NEW createdContainer {
                        caption = 'Создание на основе';
                        type = COLUMNS;
                        lines = 1;

                        MOVE PROPERTY(copy(o)) { caption = 'Заказ'###sign; alignment = STRETCH; }
                    }
                }
            }
        }
    }
    @extendFormEditable(orders);
    @defineFilterIsOpened (order, orders, o); 
    @defineDocumentLogForm(orders, o);
    @defineDocumentLogForm(userOrder, o, specificationBox);
    DESIGN userOrder { historyTabs { caption = 'История'; } }
    
    edit(UserOrderDetail d) + {  DIALOG userOrder OBJECTS o = userOrder(d), d = d DOCKED; }
    
    show 'Просмотреть' (UserOrder i)   { 
        NEWSESSION{
            SHOW userOrder OBJECTS o = i DOCKED READONLY;
        }
        
    }TOOLBAR;
    show 'Просмотреть' (UserOrderDetail i)   { 
        NEWSESSION{
            SHOW userOrder OBJECTS o = userOrder(i), d = i DOCKED READONLY;
        }
        
    }TOOLBAR;
            
    showToShow (UserOrder i) = is(i) AND NOT overShowEdit(i);
    EXTEND FORM orders 
        PROPERTIES show(o) SHOWIF showToShow(o) BEFORE editO
    
    ;
    
    @defineAddSkuLists(userOrder, userOrder, o);
    @defineNewSkuList(userOrder, userOrder, orders, o);
    
    DESIGN userOrder {
        add {
            MOVE PROPERTY(addSkuLists(o));
            MOVE PROPERTY(newSkuList(o));
        }
    }  
    DESIGN orders {
        actionContainer {
            NEW listSku {
                caption = 'Списки SKU';
                MOVE PROPERTY (newSkuList(o));
            }
        }
    } 
END

META deriveShipmentDate(dumb) 
    skipShipmentDateDerive = ABSTRACT BOOLEAN(UserOrder);
    shipmentDate(UserOrder order) <- sum(date(order), (OVERRIDE daysBeforeShipmentDate(operation(order)), 0)) WHEN CHANGED(date(order)) AND NOT skipShipmentDateDerive(order);
    shipmentTime(UserOrder order) <- time(order) WHEN CHANGED(time(order));
END

META implementOrderDestination(fromProp, toProp)
    from(Order order) += fromProp(order);
    to(Order order) += toProp(order);
    fromStock(Order order) += fromProp##Stock(order);
    toStock(Order order) += toProp##Stock(order);
END

// Партии приход
META defineOrderBatch(legalEntityProp, stockProp, char)
    @showDocumentInterfaceDetailBatch(order);
    @defineDocumentInterfaceDetailBatch(order, batch);
    batch[Order.OrderDetail](OrderDetail d) += batch(d);
    
    overCopy[UserOrderDetail,UserOrderDetail](UserOrderDetail d, UserOrderDetail detail) + {       
        batch(d) <- batch(detail);
    } 
    overCopy(UserOrderDetail d, OrderDetail detail) + {       
        batch(d) <- batch(detail);
    } 
    replace(Sku s, Batch b) + {  sku(UserOrderDetail detail) <- s WHERE batch(detail) == b;}
    // Пишем в цену заказа из вида цен в зависимости от партии
    @deriveDocumentDetailPricePriceListTypeVATBatch(userOrder, priceStock, priceDateTime, userOrder);

    // История по правой кнопке
    @defineBalancesBatch(orderDetail); //-- показываем по нажатию правой клавиши остатки партии
    @defineBalancesBatch(userOrderDetail); //-- показываем по нажатию правой клавиши остатки партии
    @defineMovementBatch(orderDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение по партии
    @defineMovementBatch(userOrderDetail, stockProp###stock); //-- показываем по нажатию правой клавиши движение по партии

    // Подбор
    @defineDocumentBatchStockPriceListTypeAgreement(userOrder, stockProp, priceDateTime);
    @extendFormDocumentBatchStockPriceListTypeAgreement(userOrder, userOrder, o, legalEntityProp, stockProp);
    @implementDocumentBatch(order);
    
    @implementDocumentBatchForm(char##o);
    
//    overFillDocumentOrderDetailDocumentDetail(o, d) += (o, d) { batchUserOrderDetail(o) <- batchDocumentDetail(d);}                    
END

META defineOrderBatchDialog(dumb)
    changeBatch(UserOrderDetail userOrderDetail)  { 
        DIALOG dialogBatch OBJECTS sk = sku(userOrderDetail), bt = batch(userOrderDetail) INPUT NULL NEWSESSION DO {
            batch(userOrderDetail) <- bt;
        }
    }

    EXTEND FORM userOrder
        PROPERTIES (d) SHOWIF showBatch[Order](o) nameBatch ON CHANGE changeBatch(d) AFTER shortNameUOMSku(d)
    ;
    EXTEND FORM orders PROPERTIES (d) READONLY SHOWIF showBatch(o) nameBatch AFTER shortNameUOMSku(d);
END

META defineOrderBatchDialogStock(stockProp, dialog)
    changeBatch(UserOrderDetail d)  { 
        DIALOG dialogBatchStock##dialog OBJECTS st = stockProp(d),
                                 t = dateTime(d),
                                 sk = sku(d),
                                 bt = batch(d) INPUT NULL NEWSESSION DO
            batch(d) <- bt;
    }

    EXTEND FORM userOrder
        PROPERTIES (d) SHOWIF showBatch(o) AFTER shortNameUOMSku(d) nameBatch ON CHANGE changeBatch(d), documentNameBatch ON CHANGE changeBatch(d)
    ;
    EXTEND FORM orders PROPERTIES (d) READONLY SHOWIF showBatch(o) AFTER shortNameUOMSku(d) nameBatch, documentNameBatch;
END
