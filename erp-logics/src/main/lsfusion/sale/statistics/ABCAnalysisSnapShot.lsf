MODULE ABCAnalysisSnapShot;

REQUIRE Store, SaleLedger, Utils;

NAMESPACE ABCAnalysis;

CLASS StatusAllType 'Приоритет рейтинга ABC' {
    markup 'По доходу',
    sum 'По выручке'
};

TABLE StatusAllType (StatusAllType);

isMarkupSum (StatusAllType type) = type == StatusAllType.markup;
isSum (StatusAllType type) = type == StatusAllType.sum;

FORM StatusAllType 'Приоритет рейтинга ABC'
    OBJECTS ct = StatusAllType PANEL
    PROPERTIES(ct) staticCaption
    EDIT StatusAllType OBJECT ct
;

FORM StatusAllTypes 'Приоритет рейтинга ABC'
    OBJECTS ct = StatusAllType
    PROPERTIES(ct) READONLY staticCaption
    ORDERS staticCaption(ct)
    LIST StatusAllType OBJECT ct
;

////////////////////// Операции ABC-отчета ////////////////////////////
CLASS Operation 'Операции ABC-отчета';
TABLE operation (Operation);

name 'Наименование' = DATA BPSTRING[100] (Operation) IN documentHeader;
@defineExternalizable(operation, STRING[100]);

percA 'A, %' = DATA NUMERIC[8,3](Operation);
percB 'B, %' = DATA NUMERIC[8,3](Operation);
percC 'C, %' = DATA NUMERIC[8,3](Operation);

CONSTRAINT (CHANGED(percA(Operation oper)) OR CHANGED(percB(oper)) OR CHANGED(percC(oper))) AND NOT ( (percA(oper)+percB(oper)+percC(oper)) == 100 )
    MESSAGE 'Сумма процентов для групп A, B и C должна быть равна 100 !';

groupType = DATA GroupType (Operation);
nameGroupType 'Тип классификатора SKU' (Operation s)= name(groupType(s));

// уровень товарного классификатора, в рамках которого необходимо рассчитывать рейтинг
levelGroup 'Уровень групп товаров' = DATA LONG (Operation);

statusAllType = DATA StatusAllType (Operation);
nameStatusAllType'Приоритет рейтинга ABC' (Operation o) = staticCaption(statusAllType(o));

percX 'X, коэф-т' = DATA NUMERIC[8,3](Operation);
percY 'Y, коэф-т' = DATA NUMERIC[8,3](Operation);

CONSTRAINT (CHANGED(percX(Operation oper)) OR CHANGED(percY(oper))) AND ( NOT percX(oper) OR NOT percY(oper) )
    MESSAGE 'Не введены коэффициенты для групп X, Y !';
CONSTRAINT (CHANGED(percX(Operation oper)) OR CHANGED(percY(oper))) AND percX(oper) > percY(oper)
    MESSAGE 'Коэффициент для группы X должен быть меньше коэффициента для группы Y !';
CONSTRAINT (CHANGED(percX(Operation oper)) OR CHANGED(percY(oper))) AND percX(oper)+percY(oper) >= 1
    MESSAGE 'Сумма коэффициентов для групп X и Y должна быть меньше 1 !';

//-- Выбор складов
TABLE OperationStockGroup (Operation, StockGroup); 
TABLE OperationStock (Operation, Stock);

allStockInclude 'Вкл' = DATA BOOLEAN (Operation);
dataInclude 'Вкл' = DATA BOOLEAN (Operation, StockGroup);
dataInclude 'Вкл' = DATA BOOLEAN (Operation, Stock);

levelParentInclude (Operation Operation, StockGroup stockGroup) = GROUP
                                                              MIN level(stockGroup, StockGroup parent) IF dataInclude(Operation, parent) MATERIALIZED;    
nearestParentInclude (Operation operation, StockGroup stockGroup) = stockGroup(stockGroup, levelParentInclude(operation, stockGroup));
nearestInclude (Operation operation, StockGroup stockGroup) = dataInclude(operation, nearestParentInclude (operation, stockGroup));

include 'Вкл' (Operation operation, StockGroup stockGroup) =
    OVERRIDE dataInclude(operation, stockGroup), 
             nearestInclude (operation, stockGroup),
             allStockInclude(operation) IF stockGroup IS StockGroup MATERIALIZED;

include 'Вкл' (Operation Operation, Stock stock) =
    (OVERRIDE dataInclude(Operation, stock),
             include(Operation, stockGroup(stock))) IF isCompany(stock) MATERIALIZED;
                        
@defineBackgroundNearestBoolean(allStockInclude, include, Operation, stock, nearestInclude, isCompany);            
                          
countIncludeStock  (Operation Operation) = GROUP SUM 1 IF include(Operation, Stock stock);      


nameIncludeStockGroups 'Группы складов (все)' (Operation document)= 
    GROUP 
    CONCAT name(StockGroup stockGroup) IF dataInclude(document, stockGroup), ', ' 
    ORDER stockGroup
    CHARWIDTH 20;

nameIncludeStocks 'Склады (все)' (Operation document)= 
    GROUP 
    CONCAT name(Stock stock) IF dataInclude(document, stock), ', ' 
    ORDER stock
    CHARWIDTH 20;
    
nameIncludeStockGroupsStock 'Группы складов, склады (все)' (Operation document) = CONCAT '; ', nameIncludeStockGroups(document), 
                                                                                             nameIncludeStocks(document) CHARWIDTH 20;   
        
//-- Выбор групп товара  
TABLE OperationSkuGroup (Operation, SkuGroup);  
     
dataInclude 'Вкл' = DATA BOOLEAN (Operation, SkuGroup);

levelParentInclude (Operation Operation, SkuGroup skuGroup) = GROUP
                                                              MIN level(skuGroup, SkuGroup parent) IF dataInclude(Operation, parent) MATERIALIZED;    
nearestParentInclude (Operation Operation, SkuGroup skuGroup) = skuGroup(skuGroup, levelParentInclude(Operation, skuGroup));
nearestInclude (Operation Operation, SkuGroup skuGroup) = dataInclude(Operation, nearestParentInclude (Operation, skuGroup));

include 'Вкл' (Operation Operation, SkuGroup skuGroup) =
    OVERRIDE dataInclude(Operation, skuGroup), 
             nearestInclude (Operation, skuGroup) MATERIALIZED;    
                      
include 'Вкл' (Operation Operation, Sku sku) = include(Operation, skuGroup(sku));  
                    
countIncludeSku 'Вкл' (Operation Operation) = GROUP SUM 1 IF include(Operation, Sku sku);                    

nameIncludeSkuGroups 'Группы товаров (все)' (Operation document)= 
    GROUP 
    CONCAT name(SkuGroup skuGroup) IF dataInclude(document, skuGroup), ', ' 
    ORDER skuGroup
    CHARWIDTH 20;

FORM operation 'Операции ABC-отчет'
    OBJECTS t = Operation PANEL
    PROPERTIES(t) id SHOWIF showIDs(), name, nameGroupType, levelGroup, percA, percB, percC, nameStatusAllType, percX, percY
    
//-- выбор складов                  
    TREE stockTree2 a2 = BPSTRING[3], sg2 = StockGroup PARENT parent(sg2), ts2 = Stock
    PROPERTIES VALUE(a2) READONLY, allStockInclude(t) DRAW a2 BACKGROUND backgroundAllStockInclude(t), 
               name(sg2) READONLY, include(t,sg2) BACKGROUND backgroundInclude(t,sg2),
               name(ts2) READONLY, include(t,ts2) BACKGROUND backgroundInclude(t,ts2)
    ORDERS name(sg2)
    FILTERS stringEqualsAll(a2),
            stockGroup(ts2) == sg2,
            isCompany(ts2)
    FILTERGROUP inactiveStock2 FILTER 'Активный' active(ts2) 'ctrl F10' DEFAULT                                                                                  
          
//-- выбор групп товара     
    TREE skuTree2 sk2 = SkuGroup PARENT parent(sk2)
    PROPERTIES READONLY order(sk2), name(sk2)
    PROPERTIES include(t,sk2)
    ORDERS order(sk2), name(sk2)
    FILTERS groupType(sk2)==groupType(t)
    FILTERGROUP inactive2 FILTER 'Активные' active(sk2) 'F5' DEFAULT                                                                  
                     
    EDIT Operation OBJECT t
;
DESIGN operation {
    BOX {
        size = (1024, 768);
        NEW topContainer {
            caption = 'Шапка документа';
            type = CONTAINERH;
            MOVE PROPERTY(id(t));
            MOVE PROPERTY(name(t));
            MOVE PROPERTY (nameGroupType(t)){ caption = 'Тип классификатора SKU';}
        }
        NEW paramContainer {
            caption = 'Параметры';
            type = CONTAINERH;                                  
            MOVE PROPERTY (levelGroup(t)){ caption = 'Уровень групп товаров';}
            MOVE PROPERTY(percA(t));
            MOVE PROPERTY(percB(t));
            MOVE PROPERTY(percC(t));
            MOVE PROPERTY (nameStatusAllType(t)){ caption = 'Приоритет рейтинга ABC';}
            MOVE PROPERTY(percX(t));
            MOVE PROPERTY(percY(t));
        }
        NEW select{
            fill = 1;
            type = SPLITH;
            MOVE BOX(TREE stockTree2) { fill = 1; caption = 'Выбор складов'; }   
            MOVE BOX(TREE skuTree2) { fill = 1; caption = 'Выбор групп'; }   
        }
        MOVE TOOLBARBOX;
    }            
}
FORM operations 'Операции ABC-отчет'
    OBJECTS t = Operation
    PROPERTIES(t) READONLY id SHOWIF showIDs(), name, nameGroupType, levelGroup, percA, percB, percC, nameStatusAllType, percX, percY 
    PROPERTIES(t) NEWSESSION NEW, EDIT, DELETE 
    LIST Operation OBJECT t
;

META deriveDocumentSnapshotABCProperty(property)
    property (SnapshotABC o) <- property(operation(o))
        WHEN CHANGED(operation(o));
END



//////////////////////Отчет ////////////////////////////

CLASS SnapshotABC 'ABC-анализ';
TABLE snapshotABC (SnapshotABC);

operation = DATA Operation (SnapshotABC);
nameOperation 'Операция отчета' = name(operation(SnapshotABC s)) IN documentHeader CHARWIDTH 15;

@defineDocumentHeaderTime(SnapshotABC);
@defineDocumentHeaderNote(SnapshotABC);
@defineDocumentHeaderCreated(SnapshotABC);
@deriveDocumentHeaderTimePrefix(SnapshotABC, );
@defineDocumentHeaderNumber(SnapshotABC, BPSTRING[2]);
@defineNumeratedDefault(SnapshotABC, 'ABC-анализ', 'AB');
@defineDocumentHeaderDescription (SnapshotABC, 'ABC-анализ');

fromDate 'Дата с' = DATA DATE (SnapshotABC) IN documentHeader;
toDate 'Дата по' = DATA DATE (SnapshotABC) IN documentHeader;

countDays 'Кол-во дней' (SnapshotABC s) = daysBetweenDates(toDate(s), fromDate(s)) + 1; 

startTime 'Время начала формирования' = DATA DATETIME (SnapshotABC) IN created;
finishTime 'Время окончания формирования' = DATA DATETIME (SnapshotABC) IN created;

WHEN LOCAL SET(SnapshotABC o IS SnapshotABC) DO {
    IF o IS SnapshotABC AND NOT fromDate(o) THEN fromDate(o) <- currentDate();
    IF o IS SnapshotABC AND NOT toDate(o) THEN toDate(o) <- currentDate();
};

//-- Параметры отчета
percA 'A, %' = DATA NUMERIC[8,3](SnapshotABC);
@deriveDocumentSnapshotABCProperty(percA);

percB 'B, %' = DATA NUMERIC[8,3](SnapshotABC);
@deriveDocumentSnapshotABCProperty(percB);

percC 'C, %' = DATA NUMERIC[8,3](SnapshotABC);
@deriveDocumentSnapshotABCProperty(percC);

groupType 'Тип классификатора SKU' = DATA GroupType (SnapshotABC);
@deriveDocumentSnapshotABCProperty(groupType);
nameGroupType 'Тип классификатора SKU' (SnapshotABC s) = name(groupType(s)) CHARWIDTH 10;

levelGroup 'Уровень групп товаров' = DATA LONG (SnapshotABC);
@deriveDocumentSnapshotABCProperty(levelGroup);

statusAllType 'Приоритет рейтинга ABC' = DATA StatusAllType (SnapshotABC);
@deriveDocumentSnapshotABCProperty(statusAllType);
nameStatusAllType'Приоритет рейтинга ABC' (SnapshotABC s) = staticCaption(statusAllType(s));

percX 'X, коэф-т' = DATA NUMERIC[8,3](SnapshotABC);
@deriveDocumentSnapshotABCProperty(percX);
percY 'Y, коэф-т' = DATA NUMERIC[8,3](SnapshotABC);
@deriveDocumentSnapshotABCProperty(percY);

//--


//-- Выбор складов
TABLE snapshotStockGroup (SnapshotABC, StockGroup); 
TABLE snapshotStock (SnapshotABC, Stock);

allStockInclude 'Вкл' = DATA BOOLEAN (SnapshotABC);
dataInclude 'Вкл' = DATA BOOLEAN (SnapshotABC, StockGroup);
dataInclude 'Вкл' = DATA BOOLEAN (SnapshotABC, Stock);

levelParentInclude (SnapshotABC snapshot, StockGroup stockGroup) = GROUP
                                                              MIN level(stockGroup, StockGroup parent) IF dataInclude(snapshot, parent) MATERIALIZED;    
nearestParentInclude (SnapshotABC snapshot, StockGroup stockGroup) = stockGroup(stockGroup, levelParentInclude(snapshot, stockGroup));
nearestInclude (SnapshotABC snapshot, StockGroup stockGroup) = dataInclude(snapshot, nearestParentInclude (snapshot, stockGroup));

include 'Вкл' (SnapshotABC snapshot, StockGroup stockGroup) =
    OVERRIDE dataInclude(snapshot, stockGroup), 
             nearestInclude (snapshot, stockGroup),
             allStockInclude(snapshot) IF stockGroup IS StockGroup MATERIALIZED;

include 'Вкл' (SnapshotABC snapshot, Stock stock) =
    (OVERRIDE dataInclude(snapshot, stock),
              include(snapshot, stockGroup(stock))) IF isCompany(stock) MATERIALIZED;
countIncludeStocks (SnapshotABC r)= GROUP SUM 1 IF include(r,Stock st);

deleteIncludeStocks 'Сбросить отмеченные'(SnapshotABC r)  { 
    allStockInclude (r) <- NULL;
    dataInclude(r,StockGroup g) <- NULL;
    dataInclude (r,Stock st) <- NULL;
};
             
@defineBackgroundNearestBoolean(allStockInclude, include, snapshotABC, stock, nearestInclude, isCompany);

                      
countIncludeStock  (SnapshotABC snapshot) = GROUP SUM 1 IF include(snapshot, Stock stock);      


nameIncludeStockGroups 'Группы складов (все)' (SnapshotABC document)= 
    GROUP 
    CONCAT name(StockGroup stockGroup) IF dataInclude(document, stockGroup), ', ' 
    ORDER stockGroup
    CHARWIDTH 20;

nameIncludeStocks 'Склады (все)' (SnapshotABC document)= 
    GROUP 
    CONCAT name(Stock stock) IF dataInclude(document, stock), ', ' 
    ORDER stock
    CHARWIDTH 20;
    
nameIncludeStockGroupsStock 'Группы складов, склады (все)' (SnapshotABC document) = CONCAT '; ', nameIncludeStockGroups(document), 
                                                                                             nameIncludeStocks(document) CHARWIDTH 20;   
    
allStockInclude (SnapshotABC o) <- allStockInclude(operation(o))
    WHEN CHANGED(operation(o));  
dataInclude (SnapshotABC o,StockGroup g) <- dataInclude(operation(o),g) IF g IS StockGroup
    WHEN CHANGED(operation(o));           
dataInclude (SnapshotABC o,Stock g) <- dataInclude(operation(o),g) IF g IS Stock
    WHEN CHANGED(operation(o));    
            
//-- Выбор групп товара  
TABLE snapshotSkuGroup (SnapshotABC, SkuGroup);  
     
dataInclude 'Вкл' = DATA BOOLEAN (SnapshotABC, SkuGroup);

levelParentInclude (SnapshotABC snapshot, SkuGroup skuGroup) = GROUP
                                                              MIN level(skuGroup, SkuGroup parent) IF dataInclude(snapshot, parent) MATERIALIZED;    
nearestParentInclude (SnapshotABC snapshot, SkuGroup skuGroup) = skuGroup(skuGroup, levelParentInclude(snapshot, skuGroup));
nearestInclude (SnapshotABC snapshot, SkuGroup skuGroup) = dataInclude(snapshot, nearestParentInclude (snapshot, skuGroup));

include 'Вкл' (SnapshotABC snapshot, SkuGroup skuGroup) =
    OVERRIDE dataInclude(snapshot, skuGroup), 
             nearestInclude (snapshot, skuGroup) MATERIALIZED;

dataExclude 'Искл.' = DATA BOOLEAN (SnapshotABC, SkuGroup); 
dataExclude 'Искл.' = DATA BOOLEAN (SnapshotABC, Sku);

levelParentExclude (SnapshotABC snapshot, SkuGroup group) = GROUP
                                                              MIN level(group, SkuGroup parent) IF dataExclude(snapshot, parent) MATERIALIZED;
nearestParentExclude (SnapshotABC snapshot, SkuGroup group) = group(group, levelParentExclude(snapshot, group));
nearestExclude 'Вкл.' (SnapshotABC snapshot, SkuGroup group) =
    dataExclude(snapshot, nearestParentExclude (snapshot, group)) MATERIALIZED;
             
exclude 'Искл.' (SnapshotABC snapshot, SkuGroup group) =
    OVERRIDE dataExclude(snapshot, group), nearestExclude(snapshot, group) MATERIALIZED;
    
exclude 'Искл.' (SnapshotABC snapshot, Sku sku) =
    OVERRIDE dataExclude(snapshot, sku), exclude(snapshot, group(groupType(snapshot), sku));
    
include 'Вкл' = DATA BOOLEAN (SnapshotABC, Manufacturer);
countSelectedManufacturer (SnapshotABC snapshot) = GROUP SUM 1 IF include(snapshot, Manufacturer m);

fltLegalEntity 'Поставщик' = DATA LegalEntity (SnapshotABC);
                      
include 'Вкл' (SnapshotABC snapshot, Sku sku) = 
    include(snapshot, skuGroup(sku)) AND groupType(skuGroup(sku)) == groupType(snapshot) AND 
    (NOT countSelectedManufacturer(snapshot) OR include(snapshot, manufacturer(sku))) AND 
    NOT exclude(snapshot, sku);  
                        
countIncludeSku 'Вкл' (SnapshotABC snapshot) = GROUP SUM 1 IF include(snapshot, Sku sku);                    

nameIncludeSkuGroups 'Группы товаров (все)' (SnapshotABC document)= 
    GROUP 
    CONCAT name(SkuGroup skuGroup) IF dataInclude(document, skuGroup), ', ' 
    ORDER skuGroup
    CHARWIDTH 20;
    
dataInclude (SnapshotABC o,SkuGroup g) <- dataInclude(operation(o),g) IF g IS SkuGroup
    WHEN CHANGED(operation(o));  

deleteIncludeSkuGroups 'Сбросить отмеченные'(SnapshotABC r)  { 
    dataInclude(r,SkuGroup g) <- NULL;
};


//------------------------------ Sku -------------------------------//

TABLE skuSnapshotABC (Sku, SnapshotABC);

markupSumSold 'Доход' = DATA NUMERIC[18,4] (Sku, SnapshotABC);
sumSold 'Выручка' = DATA NUMERIC[18,4] (Sku, SnapshotABC);

percMarkupSold 'ВД (доход), %' = DATA NUMERIC[18,4] (Sku, SnapshotABC);
percInMarkupSold 'Удельный вес (доход), %'= DATA NUMERIC[18,4] (Sku, SnapshotABC);
indexMarkupBest 'Номер п/п (доход)' = DATA INTEGER (Sku, SnapshotABC);
partitionMarkupBest = DATA NUMERIC[18,4] (Sku, SnapshotABC);  // сумма с накоплением

percMarkupOrder 'Накопленный процент (доход)' = DATA NUMERIC[18,4] (Sku, SnapshotABC);
statusMarkup 'Рейтинг (доход)' = DATA ISTRING[1] (Sku, SnapshotABC) CHARWIDTH 7;

percInSumSold 'Удельный вес (сумма), %'= DATA NUMERIC[18,4] (Sku, SnapshotABC);
indexSumBest 'Номер п/п (сумма)' = DATA INTEGER (Sku, SnapshotABC);
partitionSumBest = DATA NUMERIC[18,4] (Sku, SnapshotABC);  // сумма с накоплением

percSumOrder 'Накопленный процент (сумма)' = DATA NUMERIC[18,4] (Sku, SnapshotABC);
statusSum 'Рейтинг (сумма)' = DATA ISTRING[1] (Sku, SnapshotABC) CHARWIDTH 7;

statusAll 'Рейтинг ABC' = DATA ISTRING[3] (Sku, SnapshotABC) CHARWIDTH 7;
statusGlobal 'Рейтинг общий' = DATA ISTRING[4] (Sku, SnapshotABC) CHARWIDTH 7;

backgroundStatusMarkup(Sku sku, SnapshotABC s) = CASE 
    WHEN  statusMarkup(sku,s) == 'A' THEN RGB(204,255,204)
    WHEN  statusMarkup(sku,s) == 'B' THEN RGB(255, 250, 205)
    WHEN  statusMarkup(sku,s) THEN  RGB(255,238,238)
;
backgroundStatusSum(Sku sku, SnapshotABC s) = CASE 
    WHEN  statusSum(sku,s) == 'A' THEN RGB(204,255,204)
    WHEN  statusSum(sku,s) == 'B' THEN RGB(255, 250, 205)
    WHEN  statusSum(sku,s) THEN  RGB(255,238,238)
;

averageSold 'Средняя продажа за день' = DATA NUMERIC[16,5] (Sku, SnapshotABC);
dispersionSold 'Дисперсия однодневных продаж' = DATA NUMERIC[16,5] (Sku, SnapshotABC);
percKoeffVar 'Коэффициент вариации' = DATA NUMERIC[14,4] (Sku, SnapshotABC);

statusQuantity 'Рейтинг XYZ' = DATA ISTRING[1] (Sku, SnapshotABC) CHARWIDTH 7;
backgroundStatusQuantity(Sku sku, SnapshotABC s) = CASE 
    WHEN  statusQuantity(sku,s) == 'X' THEN RGB(204,255,204)
    WHEN  statusQuantity(sku,s) == 'Y' THEN RGB(255, 250, 205)
    WHEN  statusQuantity(sku,s) THEN  RGB(255,238,238)
;

//------------------------------ Общие итоги по отчету -------------------------------//

markupSumSold 'Доход' (SnapshotABC snapshot) = GROUP SUM markupSumSold(Sku sk, snapshot) ;
sumSold 'Выручка' (SnapshotABC snapshot) = GROUP SUM sumSold(Sku sk, snapshot) ;

//------------------------------ Итоги по группе товаров указанного уровня -------------------------------//

markupSumSold 'Доход' (Group group, SnapshotABC snapshot) =
    GROUP SUM markupSumSold(Sku sk, snapshot) 
    BY groupRoot(group(groupType(snapshot), sk), levelGroup(snapshot));

sumSold 'Выручка' (Group group, SnapshotABC snapshot) =
    GROUP SUM sumSold(Sku sk, snapshot) 
    BY groupRoot(group(groupType(snapshot), sk), levelGroup(snapshot));

//------------------------------- ACTION -------------------------------//   
//overTakeFromTo ABSTRACT LIST ( SnapshotABC, DATE, DATE); 
//overTakeSkuFromTo ABSTRACT LIST ( SnapshotABC, DATE, DATE);
//overTakeBatchFromTo ABSTRACT LIST ( SnapshotABC, DATE, DATE);

status 'Статус отчета' (SnapshotABC snapshot) = CASE
                                          WHEN finishTime(snapshot) THEN 'Сформирован'
                                          WHEN snapshot IS SnapshotABC THEN 'Не сформирован'
                                          CHARWIDTH 10
                                      ;
backgroundStatus 'Цвет' (SnapshotABC snapshot) =  CASE                                             
                                          WHEN finishTime(snapshot) THEN RGB(212,255,212)
                                          WHEN snapshot IS SnapshotABC THEN RGB(255,200,216)
                                      ;
//-- если три параметра                                      
useThreeParams = ABSTRACT BOOLEAN (SnapshotABC);                                      
percMarkupA = ABSTRACT NUMERIC[8,3](SnapshotABC);
percMarkupB = ABSTRACT NUMERIC[8,3](SnapshotABC);
percMarkupC = ABSTRACT NUMERIC[8,3](SnapshotABC);

percSumA = ABSTRACT NUMERIC[8,3](SnapshotABC);
percSumB = ABSTRACT NUMERIC[8,3](SnapshotABC);
percSumC = ABSTRACT NUMERIC[8,3](SnapshotABC);

percMarkupAOver (SnapshotABC r) = IF useThreeParams(r) THEN percMarkupA(r) ELSE percA(r);
percMarkupBOver (SnapshotABC r) = IF useThreeParams(r) THEN percMarkupB(r) ELSE percB(r);
percMarkupCOver (SnapshotABC r) = IF useThreeParams(r) THEN percMarkupC(r) ELSE percC(r);

percSumAOver (SnapshotABC r) = IF useThreeParams(r) THEN percSumA(r) ELSE percA(r);
percSumBOver (SnapshotABC r) = IF useThreeParams(r) THEN percSumB(r) ELSE percB(r);
percSumCOver (SnapshotABC r) = IF useThreeParams(r) THEN percSumC(r) ELSE percC(r);

takeFromToOver  ABSTRACT LIST (SnapshotABC);
takeFromToReturn  ABSTRACT LIST (SnapshotABC);
resetProps (SnapshotABC snapshot){
    markupSumSold(Sku sku, snapshot) <- NULL;
    sumSold(Sku sku, snapshot) <- NULL;   
    percMarkupSold(Sku sku, snapshot)<- NULL;   
    
    percInMarkupSold (Sku sku, snapshot) <- NULL;
    indexMarkupBest(Sku sku, snapshot) <- NULL;
    partitionMarkupBest(Sku sku, snapshot) <- NULL;
    percMarkupOrder(Sku sku, snapshot) <- NULL; 
    statusMarkup (Sku sku, snapshot) <- NULL;
    
    percInSumSold (Sku sku, snapshot) <- NULL;
    indexSumBest(Sku sku, snapshot) <- NULL;
    partitionSumBest(Sku sku, snapshot) <- NULL;
    percSumOrder(Sku sku, snapshot) <- NULL; 
    statusSum (Sku sku, snapshot) <- NULL; 
    
    averageSold(Sku sku, snapshot) <- NULL; 
    dispersionSold(Sku sku, snapshot) <- NULL; 
    percKoeffVar(Sku sku, snapshot) <- NULL;   
    
    statusAll(Sku sku, snapshot) <- NULL;   
    statusGlobal(Sku sku, snapshot) <- NULL;  
    statusQuantity(Sku sku, snapshot) <- NULL; 
}

stop = DATA LOCAL NESTED BOOLEAN (SnapshotABC);

takeFromToBefore ABSTRACT LIST (SnapshotABC);

takeFromTo(SnapshotABC snapshot)   { 
    stop(snapshot) <- NULL;
    
    IF currentUser() IS Employee AND (GROUP SUM 1 IF include(snapshot, Stock st) AND NOT accessCompany(currentUser(), st)) THEN {
        dataInclude(snapshot, Stock st) <- include(snapshot, st) AND accessCompany(currentUser(), st);
        allStockInclude(snapshot) <- NULL;
        dataInclude(snapshot, StockGroup g) <- NULL;
    }    
    apply();  
    startTime(snapshot) <- currentDateTime();  
        
    IF NOT (countIncludeSku(snapshot) AND countIncludeStock(snapshot)) THEN {      
        MESSAGE 'Не выбраны группы товаров или склады для отчета !' NOWAIT ;
        stop(snapshot) <- TRUE;
    }        

    IF NOT ((percSumAOver(snapshot)+percSumBOver(snapshot)+percSumCOver(snapshot) == 100) AND 
            (percMarkupAOver(snapshot)+percMarkupBOver(snapshot)+percMarkupCOver(snapshot) == 100)) THEN {
        MESSAGE 'Сумма процентов для групп A, B и C должна быть равна 100 !' NOWAIT ;
        stop(snapshot) <- TRUE;  
    }
      
    IF NOT percX(snapshot) OR NOT percY(snapshot) THEN {
        MESSAGE 'Не введены коэффициенты для групп X, Y !' NOWAIT ;
        stop(snapshot) <- TRUE;
    }        
    IF percX(snapshot) > percY(snapshot) THEN {
        MESSAGE 'Коэффициент для группы X должен быть меньше коэффициента для группы Y !' NOWAIT ;
        stop(snapshot) <- TRUE;
    }        
    IF percX(snapshot)+percY(snapshot) >= 1 THEN {
        MESSAGE 'Сумма коэффициентов для групп X и Y должна быть меньше 1 !' NOWAIT ;
        stop(snapshot) <- TRUE;
    } 

    takeFromToReturn(snapshot);    
    IF stop(snapshot) THEN {
        RETURN;
    }
    LOCAL skip  = BOOLEAN(Sku,Stock,DATE);
    takeFromToBefore(snapshot);
    
    // Количество продаж товара (для XYZ-отчета)
    LOCAL quantitySold = NUMERIC[16,5] (Sku, DATE);            
    quantitySold (Sku sku, DATE date) <- (GROUP
            SUM quantitySold(sku, Stock st, date) 
            IF include(snapshot, st) AND NOT skip(sku,st,date) AND 
               (fltLegalEntity(snapshot) == supplierLastOrderBatch(sku, st) OR NOT fltLegalEntity(snapshot))) 
            WHERE include(snapshot, sku) AND 
               date >= fromDate(snapshot) AND date <= toDate(snapshot);
    
    // по товарам
    
    resetProps(snapshot);

    LOCAL markupSumSold = NUMERIC[16,5] (Sku, DATE);
    LOCAL sumSold = NUMERIC[16,5] (Sku, DATE);

    markupSumSold (Sku sku, DATE date) <-(GROUP
        SUM markupSumSold(sku, Stock st, date)
            IF include(snapshot, st) AND NOT skip(sku,st,date) AND
                (fltLegalEntity(snapshot) == supplierLastOrderBatch(sku, st) OR NOT fltLegalEntity(snapshot)))
        WHERE include(snapshot, sku) AND date >= fromDate(snapshot) AND date <= toDate(snapshot);

    sumSold (Sku sku, DATE date) <-  (GROUP
        SUM sumSold(sku, Stock st, date)
            IF include(snapshot, st) AND NOT skip(sku,st,date) AND
                (fltLegalEntity(snapshot) == supplierLastOrderBatch(sku, st) OR NOT fltLegalEntity(snapshot)))
        WHERE include(snapshot, sku) AND date >= fromDate(snapshot) AND date <= toDate(snapshot);
    
    markupSumSold (Sku sku, snapshot) <-OVERRIDE (GROUP
            SUM markupSumSold(sku, Stock st, fromDate(snapshot), toDate(snapshot)) 
            IF include(snapshot, st) AND 
               (fltLegalEntity(snapshot) == supplierLastOrderBatch(sku, st) OR NOT fltLegalEntity(snapshot))), 0.0 
            WHERE include(snapshot, sku);
    
    sumSold (Sku sku, snapshot) <- OVERRIDE (GROUP
            SUM sumSold(sku, Stock st, fromDate(snapshot), toDate(snapshot)) 
            IF include(snapshot, st) AND 
            (fltLegalEntity(snapshot) == supplierLastOrderBatch(sku, st) OR NOT fltLegalEntity(snapshot))), 0.0 
            WHERE include(snapshot, sku);
    
    percMarkupSold(Sku sku, snapshot) <- OVERRIDE round2(markupSumSold(sku, snapshot)*100.00 / sumSold(sku, snapshot)), 0.0 WHERE include(snapshot, sku);
    
    IF levelGroup(snapshot) == 1 THEN {
        // считать проценты относительно общей суммы всех товаров
        
        percInMarkupSold (Sku sku, snapshot) <- round4(markupSumSold(sku, snapshot)*100.00 / markupSumSold(snapshot)) WHERE include(snapshot, sku);
        indexMarkupBest(Sku sku, snapshot) <- PARTITION SUM 1 IF markupSumSold(sku, snapshot) ORDER DESC markupSumSold(sku, snapshot), name(sku) BY snapshot WHERE include(snapshot, sku);
        partitionMarkupBest(Sku sku, snapshot) <- PARTITION SUM markupSumSold(sku, snapshot) ORDER indexMarkupBest(sku, snapshot) BY snapshot WHERE include(snapshot, sku);
        percMarkupOrder(Sku sku, snapshot) <- round4(partitionMarkupBest(sku, snapshot)*100.00 / markupSumSold(snapshot)) WHERE include(snapshot, sku);
        
        statusMarkup (Sku sku, snapshot) <- CASE 
            WHEN  percMarkupOrder(sku, snapshot) <= percMarkupAOver(snapshot) THEN 'A'
            WHEN  percMarkupOrder(sku, snapshot) <= percMarkupAOver(snapshot)+percMarkupBOver(snapshot) AND percMarkupOrder(sku, snapshot) > percMarkupAOver(snapshot) THEN 'B'
            WHEN  percMarkupOrder(sku, snapshot) >  percMarkupAOver(snapshot)+percMarkupBOver(snapshot) THEN 'C' WHERE include(snapshot, sku)
        ;
        
        percInSumSold (Sku sku, snapshot) <- OVERRIDE round4(sumSold(sku, snapshot)*100.00 / sumSold(snapshot)), 0.0 WHERE include(snapshot, sku);
        indexSumBest(Sku sku, snapshot) <- PARTITION SUM 1 IF sumSold(sku, snapshot) ORDER DESC sumSold(sku, snapshot), name(sku) BY snapshot WHERE include(snapshot, sku);
        partitionSumBest(Sku sku, snapshot) <- PARTITION SUM sumSold(sku, snapshot) ORDER indexSumBest(sku, snapshot) BY snapshot WHERE include(snapshot, sku);
        percSumOrder(Sku sku, snapshot) <- round4(partitionSumBest(sku, snapshot)*100.00 / sumSold(snapshot)) WHERE include(snapshot, sku);
        
        statusSum (Sku sku, snapshot) <- CASE 
            WHEN  percSumOrder(sku, snapshot) <= percSumAOver(snapshot) THEN 'A'
            WHEN  percSumOrder(sku, snapshot) <= percSumAOver(snapshot)+percSumBOver(snapshot) AND percSumOrder(sku, snapshot) > percSumAOver(snapshot) THEN 'B'
            WHEN  percSumOrder(sku, snapshot) >  percSumAOver(snapshot)+percSumBOver(snapshot) THEN 'C' WHERE include(snapshot, sku)
        ;
    }
    
    ELSE {
        // считать проценты относительно определенного уровня группы товаров
        
        percInMarkupSold (Sku sku, snapshot) <- OVERRIDE round4(markupSumSold(sku, snapshot)*100.00 /
                markupSumSold(groupRoot(group(groupType(snapshot), sku), levelGroup(snapshot)), snapshot)), 0.0 WHERE include(snapshot, sku);
        
        indexMarkupBest(Sku sku, snapshot) <- PARTITION SUM 1 IF markupSumSold(sku, snapshot) ORDER DESC markupSumSold(sku, snapshot), name(sku)
                BY groupRoot(group(groupType(snapshot), sku), levelGroup(snapshot)), snapshot WHERE include(snapshot, sku);
                
        partitionMarkupBest(Sku sku, snapshot) <- PARTITION SUM markupSumSold(sku, snapshot) ORDER indexMarkupBest(sku, snapshot) 
                BY groupRoot(group(groupType(snapshot), sku), levelGroup(snapshot)), snapshot WHERE include(snapshot, sku);
                
        percMarkupOrder(Sku sku, snapshot) <- OVERRIDE round4(partitionMarkupBest(sku, snapshot)*100.00 / 
                markupSumSold(groupRoot(group(groupType(snapshot), sku), levelGroup(snapshot)), snapshot)), 0.0 WHERE include(snapshot, sku);
        
        statusMarkup (Sku sku, snapshot) <- CASE 
            WHEN  percMarkupOrder(sku, snapshot) <= percMarkupAOver(snapshot) THEN 'A'
            WHEN  percMarkupOrder(sku, snapshot) <= percMarkupAOver(snapshot)+percMarkupBOver(snapshot) AND percMarkupOrder(sku, snapshot) > percMarkupAOver(snapshot) THEN 'B'
            WHEN  percMarkupOrder(sku, snapshot) >  percMarkupAOver(snapshot)+percMarkupBOver(snapshot) THEN 'C' WHERE include(snapshot, sku)
        ;        
        
        percInSumSold (Sku sku, snapshot) <- round4(sumSold(sku, snapshot)*100.00 /
                sumSold(groupRoot(group(groupType(snapshot), sku), levelGroup(snapshot)), snapshot)) WHERE include(snapshot, sku);
                
        indexSumBest(Sku sku, snapshot) <- PARTITION SUM 1 IF sumSold(sku, snapshot)  ORDER DESC sumSold(sku, snapshot), name(sku)
                BY groupRoot(group(groupType(snapshot), sku), levelGroup(snapshot)), snapshot WHERE include(snapshot, sku);
                
        partitionSumBest(Sku sku, snapshot) <- PARTITION SUM sumSold(sku, snapshot) ORDER indexSumBest(sku, snapshot) 
                BY groupRoot(group(groupType(snapshot), sku), levelGroup(snapshot)), snapshot WHERE include(snapshot, sku);
                
        percSumOrder(Sku sku, snapshot) <- round4(partitionSumBest(sku, snapshot)*100.00 / 
                sumSold(groupRoot(group(groupType(snapshot), sku), levelGroup(snapshot)), snapshot)) WHERE include(snapshot, sku);
        
        statusSum (Sku sku, snapshot) <- CASE 
            WHEN  percSumOrder(sku, snapshot) <= percSumAOver(snapshot) THEN 'A'
            WHEN  percSumOrder(sku, snapshot) <= percSumAOver(snapshot)+percSumBOver(snapshot) AND percSumOrder(sku, snapshot) > percSumAOver(snapshot) THEN 'B'
            WHEN  percSumOrder(sku, snapshot) >  percSumAOver(snapshot)+percSumBOver(snapshot) THEN 'C' WHERE include(snapshot, sku)
        ;        
    }    
                
    
    
    ///// XYZ
    //  Среднее кол-во продаж в день
    averageSold(Sku sku, snapshot) <- round3( (GROUP
        SUM quantitySold (sku, Stock st, fromDate(snapshot), toDate(snapshot))  
        IF include(snapshot, st) AND 
           (fltLegalEntity(snapshot) == supplierLastOrderBatch(sku, st) OR NOT fltLegalEntity(snapshot)))
        / daysInclBetweenDates(fromDate(snapshot),toDate(snapshot))) WHERE include(snapshot, sku);

    //  Дисперсия однодневных продаж 
    dispersionSold(Sku sku, snapshot) <- round3( sqrt((GROUP SUM sqr((OVERRIDE quantitySold(sku, DATE date), 0.0 IF sku IS Sku )
        -  averageSold(sku, snapshot))
        IF iterate(date, fromDate(snapshot), toDate(snapshot))) / 
        daysInclBetweenDates(fromDate(snapshot),toDate(snapshot)))) WHERE include(snapshot, sku) ;
    
    dispersionSold(Sku sku, snapshot) <- 0.0 WHERE include(snapshot, sku) AND NOT dispersionSold(sku, snapshot); 
    
    // Коэффициент вариации
    percKoeffVar(Sku sku, snapshot) <- round4(dispersionSold(sku, snapshot) / averageSold(sku, snapshot)) WHERE include(snapshot, sku);
    
    // рейтинг XYZ
    statusQuantity(Sku sku, snapshot) <- CASE 
        WHEN  percKoeffVar(sku, snapshot) <= percX(snapshot) THEN 'X'
        WHEN  percKoeffVar(sku, snapshot) <= percY(snapshot) AND percKoeffVar(sku, snapshot) > percX(snapshot) THEN 'Y'
        WHEN  percKoeffVar(sku, snapshot) >  percY(snapshot) THEN 'Z' WHERE include(snapshot, sku)
    ;
    IF NOT useThreeParams(snapshot) THEN {
        // Рейтинг ABC (2 символа) возможно 3
        IF isMarkupSum(statusAllType(snapshot)) THEN {
            statusAll(Sku sku, snapshot) <- CONCAT '', statusMarkup(sku, snapshot), statusSum(sku, snapshot) WHERE include(snapshot, sku); } 
        ELSE {
            statusAll(Sku sku, snapshot) <- CONCAT '', statusSum(sku, snapshot), statusMarkup(sku, snapshot) WHERE include(snapshot, sku); } 
        // Общий рейтинг (3 символа) возможно 4
        statusGlobal(Sku sku, snapshot) <- CONCAT '', statusAll(sku, snapshot), statusQuantity(sku, snapshot) WHERE include(snapshot, sku);
    } ELSE {
        takeFromToOver(snapshot);
    }    
    /////
    
    finishTime(snapshot) <- currentDateTime();      
    apply();
    
};



takeData 'Сформировать отчет' (SnapshotABC snapshot)  { 
    IF finishTime(snapshot) THEN {
        ASK 'Вы действительно хотите выполнить действие "Сформировать отчет?"' DO            
            takeFromTo(snapshot);
    } ELSE {
        takeFromTo(snapshot);    
    }    
}




TABLE operationDOW(Operation, DOW);
in 'Вкл.' = DATA BOOLEAN (Operation, DOW);
countDOWsIn (Operation t) = GROUP SUM 1 IF in(t,DOW d);
oneReport 'Отдельный отчет для склада' = DATA BOOLEAN (Operation);
idReport 'Идентификатор для планировщика' = DATA BPSTRING[100] (Operation);
countDays 'Количество дней' = DATA INTEGER (Operation);
countDaysDelete 'Количество дней для хранения отчетов' = DATA INTEGER (Operation);


TABLE snapshotTypeDays(Operation, INTEGER);
inDays 'Вкл.' = DATA BOOLEAN (Operation, INTEGER);
countDaysIn (Operation t) = GROUP SUM 1 IF inDays(t,INTEGER i);

daysIn 'Числа' (Operation t)  = GROUP
    CONCAT STRING[2](INTEGER i) IF inDays(t,i), ', '
    ORDER i CHARWIDTH 10;
    
DOWsIn 'Дни недели' (Operation t)  = GROUP
    CONCAT staticCaption(DOW DOW) IF in(t,DOW), ', '
    ORDER number(DOW) CHARWIDTH 15;    
    
EXTEND FORM operations
    PROPERTIES READONLY AFTER name(t) DOWsIn(t), daysIn(t)
;

EXTEND FORM operation
    OBJECTS dow = DOW    
    PROPERTIES number(dow) READONLY, staticCaption(dow) READONLY, in(t,dow)
    PROPERTIES(t) oneReport, countDays, countDaysDelete, idReport
    ORDERS number(dow)
    
    OBJECTS i = INTEGER    
    PROPERTIES VALUE(i) READONLY , inDays(t,i)
    FILTERS iterate(i,1,31)
    
;
DESIGN operation {
    NEW paramContainerTab BEFORE TOOLBARBOX{
        fill = 1;
        type = TABBED;
        MOVE select {caption = 'Выбор';}
        NEW createContainer {
            caption = 'Автоматическое формирование';
            NEW createContainer1 {
                type = CONTAINERH;
                MOVE PROPERTY (oneReport(t));
                MOVE PROPERTY (countDays(t));                
                MOVE PROPERTY (idReport(t));
                MOVE PROPERTY (countDaysDelete(t));
            }
            NEW tabContainer {
                fill = 1;
                type = SPLITH;
                MOVE BOX(dow);
                MOVE BOX(i) {caption = 'Числа месяца';}
            }
        }         
    }
}
   
in (Operation type, DATE date) = ((countDOWsIn(type) AND in(type, extractDOW(date))) OR (type IS Operation AND date IS DATE AND NOT countDOWsIn(type))) AND
                              ((countDaysIn(type) AND inDays(type, extractDay(date))) OR (type IS Operation AND date IS DATE AND NOT countDaysIn(type)));            



  
createSnapshotString 'Создать отчет' (BPSTRING[100] string, DATE dateTo)  { 
	NEWSESSION { 
	    FOR idReport(Operation type) == string  DO {
	        IF in(type, currentDate()) AND countDays(type) THEN {     
	
	            IF NOT oneReport(type)   THEN {
	
	                NEW r = SnapshotABC {                    
	                    fromDate(r) <- subtract(dateTo,countDays(type)-1);
	                    toDate(r) <- dateTo;
	                    operation(r) <- type;
	                    takeFromTo(r);                
	                }
    	            
	            } ELSE {
	                FOR include(type, Stock stock) NEW r = SnapshotABC DO {
	                    fromDate(r) <- subtract(dateTo,countDays(type)-1);
	                    toDate(r) <- dateTo;
	                    operation(r) <- type;
	                    dataInclude(r, Stock st) <- NULL;
	                    dataInclude(r, StockGroup st) <- NULL;
	                    dataInclude(r, stock) <- TRUE;
	                    allStockInclude(r) <- NULL;
	                    takeFromTo(r);                      
	                }
	            }
	
	            apply();
	        }
	    }
	}
}

countDaysDeleteSnapshotsABC 'Дней хранить ABC-отчеты без операции' = DATA INTEGER ();

EXTEND FORM options
    PROPERTIES countDaysDeleteSnapshotsABC();
    
DESIGN options{
    stock1 {
        MOVE PROPERTY (countDaysDeleteSnapshotsABC());
    }
}

deleteSnapshotsABC 'Удалить старые ABC-отчеты'() { 
    FOR sum(date(SnapshotABC r),countDaysDelete(operation(r))) < currentDate()
        OR (NOT operation(r) AND sum(date(r), countDaysDeleteSnapshotsABC()) < currentDate()) DO {
            DELETE  r;
            apply();
        };
}

orderSort 'Порядок (внутри группы)' (SkuGroup g) = PARTITION SUM 1 ORDER sort(g) BY groupType(g), parent(g);
canonicalOrderSort 'Порядок' (SkuGroup g) = STRING[250]((GROUP CONCAT lpad(STRING[3](orderSort(SkuGroup parent)), 3, '0') , '.' ORDER DESC level(g, parent)));
nameLevel4 'Наименование' (SkuGroup g) = STRING[100](repeat('    ', INTEGER(level(g))-1)) + name(g);

FORM snapshotABC 'ABC-отчет'                                   
    OBJECTS r = SnapshotABC PANEL
    PROPERTIES (r) nameNumerator, 
                   number, series, nameOperation, date, time,
                   note, fromDate, toDate,  
                   nameGroupType, levelGroup, percA, percB, percC, nameStatusAllType, percX, percY,
                   markupSumSold READONLY ,
                   sumSold READONLY
                   
//-- выбор складов                  
    TREE stockTree2 a2 = BPSTRING[3], sg2 = StockGroup PARENT parent(sg2), ts2 = Stock
    PROPERTIES VALUE(a2) READONLY, allStockInclude(r) DRAW a2 BACKGROUND backgroundAllStockInclude(r), 
               name(sg2) READONLY, include(r,sg2) BACKGROUND backgroundInclude(r,sg2),
               name(ts2) READONLY, include(r,ts2) BACKGROUND backgroundInclude(r,ts2)
    ORDERS name(sg2)
    PROPERTIES deleteIncludeStocks(r) TOOLBAR
    
    FILTERS stringEqualsAll(a2),
            stockGroup(ts2) == sg2,
            isCompany(ts2)
    FILTERGROUP inactiveStock2 FILTER 'Активный' active(ts2) 'ctrl F10' DEFAULT                                                                                  
          
//-- выбор групп товара     
    TREE skuTree2 sk2 = SkuGroup PARENT parent(sk2)
    PROPERTIES READONLY order(sk2), name(sk2)
    PROPERTIES include(r,sk2), exclude(r, sk2)
    ORDERS order(sk2), name(sk2)
    FILTERS groupType(sk2)==groupType(r)
    FILTERGROUP inactive2 FILTER 'Активные' active(sk2) 'F5' DEFAULT   
    PROPERTIES deleteIncludeSkuGroups(r) TOOLBAR
    
    
    TREE skuTree sk = SkuGroup PARENT parent(sk)
    PROPERTIES READONLY order(sk), name(sk), markupSumSold(sk,r), sumSold(sk,r)
    ORDERS order(sk), name(sk)
    FILTERGROUP inactivesk FILTER 'Активные' active(sk) 'F5' DEFAULT
    
    
    OBJECTS s=Sku
    FILTERS indexMarkupBest(s,r) AND isParent(sk, s)

    PROPERTIES (s,r)  indexMarkupBest
    PROPERTIES        READONLY name(s), idBarcode(s), id(s) SHOWIF showIDs()
    PROPERTIES (s) nameSupplierLastOrderBatch
    PROPERTIES (s,r)  READONLY markupSumSold,
                      percMarkupSold,  percInMarkupSold, percMarkupOrder,
                      statusMarkup BACKGROUND backgroundStatusMarkup(s,r),
                      sumSold,
                      percInSumSold, percSumOrder,
                      statusSum BACKGROUND backgroundStatusSum(s,r),
                      statusAll,
                      averageSold, dispersionSold, percKoeffVar,
                      statusQuantity BACKGROUND backgroundStatusQuantity(s,r),
                      statusGlobal

    ORDERS             indexMarkupBest(s,r)
    
    EDIT SnapshotABC OBJECT r
    PROPERTIES(r)  takeData ;


DESIGN snapshotABC {
    BOX {
        size = (1024, 768);
        MOVE BOX(r) {
            type = CONTAINERH;
            MOVE GROUP(documentHeader,r);
            MOVE GROUP(numbered,r); 
            NEW date {
                caption = 'Период';
                type = CONTAINERH;
                MOVE PROPERTY (fromDate(r));
                MOVE PROPERTY (toDate(r));
            }                                  
        };
        
        NEW top {                     
            fill = 1;
            type = TABBED;
            NEW paramContainer {
                fill = 1;
                caption = 'Параметры';
                    NEW row1 {
                        type = CONTAINERH; 
                        caption = 'Основные';
                        MOVE PROPERTY(nameGroupType(r));
                        MOVE PROPERTY(levelGroup(r));
                        MOVE PROPERTY(percA(r));
                        MOVE PROPERTY(percB(r));
                        MOVE PROPERTY(percC(r));
                        MOVE PROPERTY (nameStatusAllType(r)){ caption = 'Приоритет рейтинга ABC';}
                        MOVE PROPERTY(percX(r));
                        MOVE PROPERTY(percY(r));
                    }
                
                    MOVE GROUP(documentPrm,r);   
                    
                    NEW itogi {
                        caption = 'Итоги';
                        type = CONTAINERH;
                        MOVE PROPERTY(markupSumSold(r)) { charWidth = 15;}
                        MOVE PROPERTY(sumSold(r)) { charWidth = 15;}
                    }
                
                NEW select{
                    fill = 1;
                    type = SPLITH;
                    MOVE BOX(TREE stockTree2) { 
                        fill = 1; caption = 'Выбор складов'; 
                        TOOLBARBOX(TREE stockTree2) {
                            MOVE PROPERTY (deleteIncludeStocks(r));
                        }
                    }   
                    MOVE BOX(TREE skuTree2) { 
                        fill = 1; caption = 'Выбор групп'; 
                        TOOLBARBOX(TREE skuTree2) {
                            MOVE PROPERTY (deleteIncludeSkuGroups(r));
                        }
                    }   
                }   
            }
            
            NEW resultContainer {
                caption = 'Результат';
                MOVE PROPERTY (takeData(r)) { alignment = STRETCH; focusable = FALSE; font = 'bold 36';  }
                NEW resultContainer2 {
                    fill = 7;
                    type = TABBED;
                    NEW tabb1 {
                        caption = 'Отчет';
                        type = SPLITH;          
                        NEW firstCase {
                            fill = 1;
                            type = CONTAINERV;
                            MOVE BOX(TREE skuTree) { caption = 'Группы'; }
                        }
                        NEW secondCase {
                            fill = 2;
                            type = TABBED;
                            MOVE BOX(s) {caption = 'Товары';}
                        }
                    }
                }                 
            }
        } 
        MOVE TOOLBARBOX;
    }
}


FORM snapshotsABC 'ABC-отчеты'

    OBJECTS r = SnapshotABC LAST 
    PROPERTIES (r) READONLY number, series, date, time,
                   fromDate, toDate, nameOperation, status BACKGROUND backgroundStatus(r), 
                   startTime, finishTime, note, nameIncludeStockGroupsStock, nameIncludeSkuGroups,
                   nameGroupType, levelGroup, percA, percB, percC, percX, percY
                   
    PROPERTIES (r) NEWSESSION NEW, EDIT, deleter=DELETE   
    PROPERTIES (r) READONLY PANEL createdNameUser, createdTime, createdHostnameComputer   
                         
    LIST SnapshotABC OBJECT r
;
DESIGN snapshotsABC {
    BOX {
        size = (1024, 768);
        MOVE BOX(r);
        MOVE GROUP(created,r); 
        MOVE TOOLBARBOX;
    }    
} 

NAVIGATOR {
    retailNavigator {
        NEW FOLDER abcNavigatorSnapShot 'ABC-анализ' {
            NEW operations;
            NEW snapshotsABC;
        }
    }
}

