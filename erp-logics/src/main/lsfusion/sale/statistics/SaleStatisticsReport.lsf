MODULE SaleStatisticsReport;

REQUIRE SaleStatistics;

NAMESPACE Sale;

////////////////////// Тип отчета ////////////////////////////

CLASS StatisticReportType 'Тип статистического отчета';
CLASS StatisticReportTypeDetail 'Строка типа статистического отчета';

name 'Наименование' = DATA ISTRING[255] (StatisticReportType) CHARWIDTH 20 IN documentPrm;
statisticReportType = GROUP AGGR StatisticReportType s BY name(s);

@defineDocument(statisticReportType);
@deriveDocumentHeaderTimePrefix(StatisticReportType, );


@deriveDocumentHeaderTimePrefix(StatisticReportType, );

statisticGroupType = DATA StatisticGroupType (StatisticReportType) AUTOSET NONULL;
nameStatisticGroupType 'Тип классификатора' = name(statisticGroupType(StatisticReportType r)) IN documentPrm;

isSumReport 'Сумовой отчет' = DATA BOOLEAN (StatisticReportType) IN documentPrm;
notSumReport = StatisticReportType r IS StatisticReportType AND NOT isSumReport(r);
rate 'Кратность для отчета'  = DATA NUMERIC[15,4] (StatisticReportType) IN documentPrm;
isPositiveReport 'Только положительные' = DATA BOOLEAN (StatisticReportType) IN documentPrm;

//------------------------------ Строки -------------------------------//

name 'Наименование' = DATA ISTRING[255] (StatisticReportTypeDetail);
nameUOM 'Ед. изм.' = DATA ISTRING[100] (StatisticReportTypeDetail);
round 'Точность' = DATA INTEGER (StatisticReportTypeDetail);

statisticGroup  = DATA StatisticGroup (StatisticReportTypeDetail);
nameStatisticGroup 'Наименование группы' = name(statisticGroup(StatisticReportTypeDetail d));
sidStatisticGroup 'Код группы' = sid(statisticGroup(StatisticReportTypeDetail d));

CONSTRAINT statisticGroup(StatisticReportTypeDetail d) AND statisticGroupType(statisticReportType(d)) 
    AND NOT groupType(statisticGroup(d)) == statisticGroupType(statisticReportType(d))
    CHECKED BY statisticGroup[StatisticReportTypeDetail]
    MESSAGE 'Для строки типа статистического отчета выбрана группа, которая не соответствует выбранному классификатору.';

number 'Код строки' = DATA BPSTRING[10] (StatisticReportTypeDetail);    

TABLE statisticReportTypeDetailStatisticReportTypeDetail(StatisticReportTypeDetail, StatisticReportTypeDetail);

in 'Вкл.' (StatisticReportTypeDetail child, StatisticReportTypeDetail parent) = DATA BOOLEAN (StatisticReportTypeDetail, StatisticReportTypeDetail); //(child,parent)
count (StatisticReportTypeDetail parent) = GROUP SUM 1 IF in(StatisticReportTypeDetail child, parent); 
count = GROUP SUM 1 IF in(StatisticReportTypeDetail child, StatisticReportTypeDetail parent) BY statisticReportType(parent);//BY statisticReportType(statisticReportTypeDetail (StatisticReportTypeDetail d)); 

CONSTRAINT in(StatisticReportTypeDetail child, StatisticReportTypeDetail parent) AND NOT (statisticReportType(child) == statisticReportType(child))
    MESSAGE 'Ссылка на строки другого типа статистического отчета.';
CONSTRAINT in(StatisticReportTypeDetail child, StatisticReportTypeDetail parent) AND parent == child
    MESSAGE 'У строки не может быть ссылка на саму себя.';
        
childNumbers 'Строки' (StatisticReportTypeDetail parent) =
    GROUP
    CONCAT number(StatisticReportTypeDetail child) IF in(child, parent),'; ' 
    ORDER number(child), child  CHARWIDTH 10;

changeStatisticGroup(StatisticReportTypeDetail d)  { 
    DIALOG statisticGroupDialog OBJECTS c = statisticGroupType(statisticReportType(d)) NULL, s = statisticGroup(d) CHANGE;
}

FORM statisticReportType 'Тип статистического отчета'

    OBJECTS r = StatisticReportType PANEL
    PROPERTIES (r) name, note,  nameStatisticGroupType, isSumReport, rate SHOWIF isSumReport(r), isPositiveReport
                
    PROPERTIES (r) countStatisticReportTypeDetail

    OBJECTS d = StatisticReportTypeDetail
    PROPERTIES (d) index, name, number, nameStatisticGroup ON CHANGE changeStatisticGroup(d),
                   sidStatisticGroup ON CHANGE changeStatisticGroup(d), nameUOM, round    
    PROPERTIES READONLY childNumbers(d)                
    PROPERTIES (d) NEW, deleteid=DELETE GRID              
    ORDERS index(d)
    PROPERTIES(r) DRAW d deleteStatisticReportTypeDetail    
    FILTERS statisticReportType(d) == r
    
    OBJECTS dd = StatisticReportTypeDetail
    PROPERTIES (dd) READONLY index, name, number, nameStatisticGroup,
                   sidStatisticGroup, nameUOM, round                
    PROPERTIES (dd,d) in 
    ORDERS index(dd) 
    FILTERS statisticReportType(dd) == r,
            dd != d    

    EDIT StatisticReportType OBJECT r
;

DESIGN statisticReportType {
    BOX {
        size = (1024, 768);
        NEW headerBox {
            horizontal = TRUE;

            MOVE GROUP(documentPrm,r) {
               lines = 2;
            }
            MOVE GROUP(documentSum,r) {
                lines = 1;
            }
        }
        NEW specificationBox {
            fill = 1;
            horizontal = FALSE;
            MOVE BOX(d) {
                caption = 'Спецификация';
                fill = 2;
            }
            MOVE BOX(dd) {
                caption = 'Состав';
            }
        }
        MOVE TOOLBARBOX;
        PROPERTY (index(d)) {caption ='Порядок';}
        PROPERTY (index(dd)) {caption ='Порядок';}
    }
}

copy 'Копировать' (StatisticReportType type)  { 
	NEWSESSION {
	    NEW r = StatisticReportType {
	        name(r) <- ISTRING[255](name(type)+ ' (копия)');  
	         
	        statisticGroupType (r) <- statisticGroupType (type);        
	        isSumReport (r) <- isSumReport (type);
	        rate (r) <- rate (type);
	        isPositiveReport (r) <- isPositiveReport (type);
	        
	        LOCAL parent =  StatisticReportTypeDetail (StatisticReportTypeDetail);   
	        parent(StatisticReportTypeDetail d) <- NULL;
	                                        
	        FOR statisticReportType(StatisticReportTypeDetail detail) == type NEW d = StatisticReportTypeDetail DO {
	            statisticReportType(d) <- r;
	            name (d) <- name(detail);
	            nameUOM (d) <- nameUOM(detail);
	            round (d) <- round(detail); 
	            number(d) <- number(detail);
	            statisticGroup  (d) <- statisticGroup(detail);
	            parent(d) <- detail;
	        }
	        in(StatisticReportTypeDetail d, StatisticReportTypeDetail parent) <- in(parent(d), parent(parent)) WHERE statisticReportType(d) == r AND statisticReportType(parent) == r;
	        SHOW statisticReportType OBJECTS r = r DOCKED NOCANCEL;
	    }
	}
} TOOLBAR ;

FORM statisticReportTypes 'Типы статистических отчетов'

    OBJECTS r = StatisticReportType 
    PROPERTIES (r) READONLY name, nameStatisticGroupType, note, isSumReport
                
    PROPERTIES (r) READONLY countStatisticReportTypeDetail
    PROPERTIES (r) NEWSESSION NEW, EDIT, deleter=DELETE   
    PROPERTIES (r) READONLY PANEL createdNameUser, createdTime, createdHostnameComputer 
    PROPERTIES (r) copy 
      
    OBJECTS d = StatisticReportTypeDetail
    PROPERTIES (d) READONLY index, name, number, nameStatisticGroup,
                   sidStatisticGroup, nameUOM, round 
    ORDERS index(d)

    FILTERS statisticReportType(d) == r
                
    LIST StatisticReportType OBJECT r
;
DESIGN statisticReportTypes {
    BOX {
        size = (1024, 768);

        NEW documentContainer BEFORE TOOLBARBOX {
            fill = 1;

            horizontal = FALSE;
            MOVE BOX(r);    

            NEW documentDetail {
                fill = 1;
                tabbed = TRUE;

                MOVE BOX(d) {
                    fill = 1;
                    caption = 'Спецификация';
                }
                NEW documentHistory {
                    caption = 'История';
                    horizontal = FALSE;

                    MOVE GROUP(created,r);                       
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                        horizontal = FALSE;
                    }
                }
            }
        }
        PROPERTY (index(d)) {caption ='Порядок';}
    }
}

//загрузка стандартных данных
loadDefaultStatisticReportType 'Добавить тип статистического отчета' (STRING[255] name, STRING[20] group, BOOLEAN isSum, NUMERIC[15,4] rate)  { 
    NEW s = StatisticReportType {
        name(s) <- name;
        statisticGroupType(s) <- statisticGroupTypeId(group);
        isSumReport(s) <- isSum;
        rate(s) <- rate;
    }
}

loadDefaultStatisticReportTypeDetail 'Добавить строку типа статистического отчета' (STRING[255] type, INTEGER index, STRING[255] name, STRING[10] number, BPSTRING[12] group, STRING[100] nameUOM, INTEGER round)  { 
    NEW d = StatisticReportTypeDetail {
        statisticReportType(d) <- statisticReportType(type);
        index(d) <- index;
        name(d) <- name;
        number(d) <- number;
        statisticGroup(d) <- groupIdTypeIdGroup(id(statisticGroupType(statisticReportType(type))), group);
        nameUOM(d) <- nameUOM;
        round(d) <- round;
    }
}

loadDefaultStStatisticReportType 'Загрузить стандартные статистические отчеты' ()  ABSTRACT LIST ( )  IN loadDefault;
@implementLoadDefaultData(loadDefaultStStatisticReportType);

//////////////////////Отчет ////////////////////////////

CLASS StatisticReport 'Статистический отчет';
CLASS StatisticReportDetail 'Строка статистического отчета';

name 'Наименование' = DATA ISTRING[255] (StatisticReport) CHARWIDTH 20;
@defineDocument(statisticReport);
@deriveDocumentHeaderTimePrefix(StatisticReport, );

isClosed 'Закрыт' = DATA BOOLEAN (StatisticReport);
isOpened 'Не закрыт' (StatisticReport o) = o IS StatisticReport AND NOT isClosed(o) MATERIALIZED;

close 'Закрыть' (StatisticReport o)  { 
	NEWSESSION { isClosed(o) <- TRUE; apply(); }
} TOOLBAR CONFIRM;

open 'Открыть' (StatisticReport o)  { 
	NEWSESSION { isClosed(o) <- NULL; apply(); }
} TOOLBAR CONFIRM;

isClosed 'Закрыт' (StatisticReportDetail d) = isClosed(statisticReport(d));
isOpened 'Не закрыт' (StatisticReportDetail d) = d IS StatisticReportDetail AND NOT isClosed(d);
//
//
//
//@deriveDocumentHeaderTimePrefix(StatisticReport, ){
//    WHEN LOCAL SET(StatisticReport o IS StatisticReport) DO {
//        IF o IS StatisticReport AND NOT date(o) THEN date(o) <- currentDate();
//        IF o IS StatisticReport AND NOT time(o) THEN time(o) <- currentTime();
//    };
//    WHEN LOCAL CHANGED(date(StatisticReport o)) AND NOT CHANGED(time(o)) DO {
//        time(o) <- IF date(o) > currentDate() THEN 00:00 ELSE currentTime();
//    } 
//};
@defineDocumentHeaderNumber(StatisticReport, BPSTRING[2]);
@defineNumeratedDefault(StatisticReport, 'Статистический отчет', 'СО');
@defineDocumentHeaderDescription (StatisticReport, 'Статистический отчет');

fromDate 'Дата с' = DATA DATE (StatisticReport) IN documentHeader;
toDate 'Дата по' = DATA DATE (StatisticReport) IN documentHeader;

fromDate 'Дата с' = fromDate(statisticReport(StatisticReportDetail d));
toDate 'Дата по' = toDate(statisticReport(StatisticReportDetail d));

startTime 'Время начала формирования' = DATA DATETIME (StatisticReport) IN created;
finishTime 'Время окончания формирования' = DATA DATETIME (StatisticReport) IN created;

WHEN LOCAL SET(StatisticReport o IS StatisticReport) DO {
    IF o IS StatisticReport AND NOT fromDate(o) THEN fromDate(o) <- currentDate();
    IF o IS StatisticReport AND NOT toDate(o) THEN toDate(o) <- currentDate();
};

statisticGroupType = DATA StatisticGroupType (StatisticReport) AUTOSET NONULL DELETE;
nameStatisticGroupType 'Тип классификатора' = name(statisticGroupType(StatisticReport r)) IN documentPrm CHARWIDTH 20;

statisticReportType = DATA StatisticReportType (StatisticReport);
nameStatisticReportType 'Тип отчета' = name(statisticReportType(StatisticReport r)) CHARWIDTH 20 ;

@defineDocumentDataStock(statisticReport, stock, 'Склад', );
@defineDocumentDialogStocks(statisticReport, stock, company, , );

@defineDocumentLegalEntity(statisticReport, company, 'Организация');
@defineDocumentDialogLegalEntity(statisticReport, company, company);

CONSTRAINT company(StatisticReport r) AND NOT isCompany(company(r))
    CHECKED BY company[StatisticReport]
    MESSAGE 'Для статистического отчета выбрана организация, не являющаяся компанией';

CLASS ReportKind 'Вид отчета' {
    stock 'Отчет по складу',
    region 'Отчет по региону',
    consolidate 'Объединенный'
}

FORM reportKinds 'Виды отчета'
    OBJECTS k = ReportKind
    PROPERTIES(k) READONLY staticCaption
    FILTERS k != ReportKind.consolidate
    LIST ReportKind OBJECT k
;

DESIGN reportKinds {
    PROPERTY(staticCaption(k)) { caption = 'Наименование'; } 
}

rate 'Кратность для отчета' (StatisticReport r) = rate(statisticReportType(r));

overShowIfThingSum = ABSTRACT BOOLEAN (StatisticReport);

isThing(StatisticReport r) = notSumReport(statisticReportType(r)) OR overShowIfThingSum(r);
isSum(StatisticReport r) = isSumReport(statisticReportType(r)) OR overShowIfThingSum(r);

isPositiveReport 'Только со знаком "+"' (StatisticReport r)= isPositiveReport(statisticReportType(r));

reportKind = DATA ReportKind (StatisticReport);
nameReportKind 'Вид отчета'(StatisticReport r) = staticCaption(reportKind(r));

TABLE statisticReportStatisticReport(StatisticReport, StatisticReport);

in 'Отм' = DATA BOOLEAN (StatisticReport, StatisticReport); // (new , reports)
isPeriod 'Суммарный за один и тот же период' = DATA BOOLEAN (StatisticReport);
countIn (StatisticReport new) = GROUP SUM 1 IF in(new, StatisticReport report);

selectReports 'Отчеты' (StatisticReport new) =
    GROUP
    CONCAT seriesNumber(StatisticReport report) IF in(new, report),'; ' 
    ORDER seriesNumber(report), report  CHARWIDTH 20;

isStock(StatisticReport r) = reportKind(r) == ReportKind.stock;
isStockThing(StatisticReport r) = isStock(r) AND notSumReport(statisticReportType(r)) AND NOT countIn(r);
isStockSum(StatisticReport r) = isStock(r) AND isSumReport(statisticReportType(r)) AND NOT countIn(r);

isRegion(StatisticReport r) = reportKind(r) == ReportKind.region;
isRegionThing(StatisticReport r) = isRegion(r) AND notSumReport(statisticReportType(r)) AND NOT countIn(r);
isRegionSum(StatisticReport r) = isRegion(r) AND isSumReport(statisticReportType(r)) AND NOT countIn(r);

isConsolidate(StatisticReport r) = reportKind(r) == ReportKind.consolidate;
notConsolidate(StatisticReport r) = reportKind(r) != ReportKind.consolidate;

WHEN LOCAL SET ( StatisticReport r IS StatisticReport) AND NOT reportKind(r) DO {
    reportKind(r) <- ReportKind.stock;
}

WHEN LOCAL SETCHANGED ( reportKind(StatisticReport r)) AND NOT company(r) AND isRegion(r) DO {
    company(r) <- defaultCompany();
}

region = DATA Region (StatisticReport);
nameRegion 'Регион' (StatisticReport r) = name(region(r));
consolidateStocks 'Склады/Регионы' = DATA STRING[255](StatisticReport) CHARWIDTH 20;

nameStockRegion 'Склад/Регион' (StatisticReport r) = CASE 
    WHEN isStock(r) THEN nameStock(r) 
    WHEN isRegion(r) THEN nameRegion(r)
    WHEN isConsolidate(r) THEN consolidateStocks(r);
//------------------------------ Строки -------------------------------//

name 'Наименование' = DATA ISTRING[255] (StatisticReportDetail);
nameUOM 'Ед. изм.' = DATA ISTRING[100] (StatisticReportDetail);
round 'Точность' = DATA INTEGER (StatisticReportDetail);
number 'Код строки' = DATA BPSTRING[10] (StatisticReportDetail);

statisticGroup  = DATA StatisticGroup (StatisticReportDetail) INDEXED;
nameStatisticGroup 'Наименование группы' = name(statisticGroup(StatisticReportDetail d));
sidStatisticGroup 'Код группы' = sid(statisticGroup(StatisticReportDetail d));

CONSTRAINT statisticGroup(StatisticReportDetail d) AND statisticGroupType(statisticReport(d)) 
    AND NOT groupType(statisticGroup(d)) == statisticGroupType(statisticReport(d))
    CHECKED BY statisticGroup[StatisticReportDetail]
    MESSAGE 'Для строки статистического отчета выбрана группа, которая не соответствует выбранному классификатору.';
    
sold 'Продано всего' = DATA NUMERIC[16,3] (StatisticReportDetail);
soldResident 'Продано отечественного' = DATA NUMERIC[16,3] (StatisticReportDetail);
balance 'Запас всего' = DATA NUMERIC[16,3] (StatisticReportDetail);
balanceResident 'Запас отечественного' = DATA NUMERIC[16,3] (StatisticReportDetail);

soldSum 'Продано всего' = DATA NUMERIC[16,3] (StatisticReportDetail);
soldSumCorporate 'Продано в фирменных  магазинах' = DATA NUMERIC[16,3] (StatisticReportDetail);
soldSumInternet'Продано в интернет-магазинах' = DATA NUMERIC[16,3] (StatisticReportDetail);
soldSumResident 'Продано отечественного' = DATA NUMERIC[16,3] (StatisticReportDetail);
balanceSum 'Запас всего' = DATA NUMERIC[16,3] (StatisticReportDetail);
  
TABLE statisticReportDetailStatisticReportDetail(StatisticReportDetail, StatisticReportDetail);

in 'Вкл.' = DATA BOOLEAN  (StatisticReportDetail, StatisticReportDetail );//(child,parent)
count (StatisticReportDetail parent) = GROUP SUM 1 IF in(StatisticReportDetail child, parent); 

CONSTRAINT in(StatisticReportDetail child, StatisticReportDetail parent) AND NOT (statisticReport(parent) == statisticReport(child))
    MESSAGE 'Ссылка на строки другого статистического отчета.';
CONSTRAINT in(StatisticReportDetail child, StatisticReportDetail parent) AND parent == child
    MESSAGE 'У строки не может быть ссылка на саму себя.';
    
childNumbers 'Строки' (StatisticReportDetail parent) =
    GROUP
    CONCAT number(StatisticReportDetail child) IF in(child, parent),'; ' 
    ORDER number(child), child  CHARWIDTH 10;
    
overFillData  ABSTRACT LIST ( StatisticReport);
overFillData4  ABSTRACT LIST ( StatisticReport);
overFillData3  ABSTRACT LIST ( StatisticReport);
skip = ABSTRACT BOOLEAN (StatisticReportDetail);

fillData 'Заполнить данные'(StatisticReport report)  { 
    sold(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;
    soldResident(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;
    balance(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;    
    balanceResident(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;
    
    FOR StatisticGroup s == statisticGroup(StatisticReportDetail d) AND statisticReport(d) == report AND 
        Stock st == stock(report) AND DATE dFrom == fromDate(report) AND DATE dTo == toDate(report) NOINLINE DO { 
    
        sold(d) <- NUMERIC[16,3](valueBy(s, st, dFrom, dTo));
        soldResident(d) <- NUMERIC[16,3](valueResidentBy(s, st, dFrom, dTo));
        balance(d) <- NUMERIC[16,3](valueByTo(s, st, dTo));
        balanceResident(d) <- NUMERIC[16,3](valueResidentByTo(s, st, dTo));
    }   
    overFillData(report);                                                                                                                                               
    
    sold(StatisticReportDetail d) <- round(sold(d), round(d)) WHERE round(d) AND statisticReport(d) == report;
    soldResident(StatisticReportDetail d) <- round(soldResident(d), round(d)) WHERE round(d) AND statisticReport(d) == report;
    balance(StatisticReportDetail d) <- round(balance(d), round(d)) WHERE round(d) AND statisticReport(d) == report;
    balanceResident(StatisticReportDetail d) <- round(balanceResident(d), round(d)) WHERE round(d) AND statisticReport(d) == report;
        
    IF isPositiveReport(report) THEN {
        sold(StatisticReportDetail d) <- 0.0 WHERE sold(d) <0 AND statisticReport(d) == report;
        soldResident(StatisticReportDetail d) <- 0.0 WHERE soldResident(d) <0 AND statisticReport(d) == report;
        balance(StatisticReportDetail d) <- 0.0 WHERE balance(d) <0 AND statisticReport(d) == report;
        balanceResident(StatisticReportDetail d) <- 0.0 WHERE balanceResident(d) <0 AND statisticReport(d) == report;   
        soldResident(StatisticReportDetail d) <- min(soldResident(d), sold(d)) WHERE statisticReport(d) == report;
        balanceResident(StatisticReportDetail d) <- min(balanceResident(d), balance(d)) WHERE statisticReport(d) == report;        
    }
    
    sold(StatisticReportDetail d) <- (GROUP SUM sold(StatisticReportDetail detail) IF in(detail, d)) WHERE count(d) AND statisticReport(d) == report AND NOT skip(d);
    soldResident(StatisticReportDetail d) <- (GROUP SUM soldResident(StatisticReportDetail detail)  IF in(detail, d)) WHERE count(d) AND statisticReport(d) == report AND NOT skip(d);
    balance(StatisticReportDetail d) <- (GROUP SUM balance(StatisticReportDetail detail)  IF in(detail, d)) WHERE count(d) AND statisticReport(d) == report AND NOT skip(d);
    balanceResident(StatisticReportDetail d) <- (GROUP SUM balanceResident(StatisticReportDetail detail)  IF in(detail, d)) WHERE count(d) AND statisticReport(d) == report AND NOT skip(d);
    overFillData4(report);    
}

overFillDataRegion  ABSTRACT LIST ( StatisticReport);
overFillDataRegion1  ABSTRACT LIST ( StatisticReport);
fillRegionData 'Заполнить данные'(StatisticReport report)  { 
    sold(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;
    soldResident(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;
    balance(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;    
    balanceResident(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;
    
    FOR StatisticGroup s == statisticGroup(StatisticReportDetail d) AND statisticReport(d) == report AND 
        LegalEntity c == company(report) AND Region r == region(report) AND DATE dFrom == fromDate(report) AND DATE dTo == toDate(report) 
        NOINLINE DO {
    
        sold(d) <- NUMERIC[16,3](valueBy(s, c, r, dFrom, dTo));
        soldResident(d) <- NUMERIC[16,3](valueResidentBy(s, c, r, dFrom, dTo));
        balance(d) <- NUMERIC[16,3](valueByTo(s, c, r, dTo));
        balanceResident(d) <- NUMERIC[16,3](valueResidentByTo(s, c, r, dTo));

    }
    overFillDataRegion(report);
                                                                                                                                                      
    sold(StatisticReportDetail d) <- round(sold(d), round(d)) WHERE round(d) AND statisticReport(d) == report;
    soldResident(StatisticReportDetail d) <- round(soldResident(d), round(d)) WHERE round(d) AND statisticReport(d) == report;
    balance(StatisticReportDetail d) <- round(balance(d), round(d)) WHERE round(d) AND statisticReport(d) == report;
    balanceResident(StatisticReportDetail d) <- round(balanceResident(d), round(d)) WHERE round(d) AND statisticReport(d) == report;
            
    IF isPositiveReport(report) THEN {
        sold(StatisticReportDetail d) <- 0.0 WHERE sold(d) <0 AND statisticReport(d) == report;
        soldResident(StatisticReportDetail d) <- 0.0 WHERE soldResident(d) <0 AND statisticReport(d) == report;
        balance(StatisticReportDetail d) <- 0.0 WHERE balance(d) <0 AND statisticReport(d) == report;
        balanceResident(StatisticReportDetail d) <- 0.0 WHERE balanceResident(d) <0 AND statisticReport(d) == report;           
        soldResident(StatisticReportDetail d) <- min(soldResident(d), sold(d)) WHERE statisticReport(d) == report;
        balanceResident(StatisticReportDetail d) <- min(balanceResident(d), balance(d)) WHERE statisticReport(d) == report;
    }
    
    sold(StatisticReportDetail d) <- (GROUP SUM sold(StatisticReportDetail detail)  IF in(detail, d)) WHERE count(d) AND statisticReport(d) == report AND NOT skip(d);
    soldResident(StatisticReportDetail d) <- (GROUP SUM soldResident(StatisticReportDetail detail)  IF in(detail, d)) WHERE count(d) AND statisticReport(d) == report AND NOT skip(d);
    balance(StatisticReportDetail d) <- (GROUP SUM balance(StatisticReportDetail detail)  IF in(detail, d)) WHERE count(d) AND statisticReport(d) == report AND NOT skip(d);
    balanceResident(StatisticReportDetail d) <- (GROUP SUM balanceResident(StatisticReportDetail detail)  IF in(detail, d)) WHERE count(d) AND statisticReport(d) == report AND NOT skip(d);    
    overFillData4(report);    
}
//суммы

overFillSumData  ABSTRACT LIST ( StatisticReport);
overFillSumData1  ABSTRACT LIST ( StatisticReport);
fillSumData 'Заполнить данные'(StatisticReport report)  { 
    soldSum(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;
    soldSumResident(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;
    soldSumCorporate(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;
    soldSumInternet(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;

    balanceSum(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;    
    
    FOR StatisticGroup s == statisticGroup(StatisticReportDetail d) AND statisticReport(d) == report AND 
        Stock st == stock(report) AND DATE dFrom == fromDate(report) AND DATE dTo == toDate(report) NOINLINE DO { 
    
        soldSum(d) <- NUMERIC[16,3](totalSumSoldBy(s, st, dFrom, dTo));
        soldSumResident(d) <- NUMERIC[16,3](totalSumResidentSoldBy(s, st, dFrom, dTo));
        balanceSum(d) <- NUMERIC[16,3](sumBalanceABy(s, st, dTo));
    }                                                                                                                  
    overFillSumData(report);
    
    soldSum(StatisticReportDetail d) <- NUMERIC[16,3](soldSum(d) / rate(report)) WHERE statisticReport(d) == report;
    soldSumCorporate(StatisticReportDetail d) <- NUMERIC[16,3](soldSumCorporate(d) / rate(report)) WHERE statisticReport(d) == report;
    soldSumInternet(StatisticReportDetail d) <- NUMERIC[16,3](soldSumInternet(d) / rate(report)) WHERE statisticReport(d) == report;
    soldSumResident(StatisticReportDetail d) <- NUMERIC[16,3](soldSumResident(d)/ rate(report)) WHERE statisticReport(d) == report;
    balanceSum(StatisticReportDetail d) <- NUMERIC[16,3](balanceSum(d)/ rate(report)) WHERE statisticReport(d) == report;                           
    
    soldSum(StatisticReportDetail d) <- round(soldSum(d), round(d)) WHERE round(d) AND statisticReport(d) == report;
    soldSumCorporate(StatisticReportDetail d) <- round(soldSumCorporate(d), round(d)) WHERE round(d) AND statisticReport(d) == report;
    soldSumInternet(StatisticReportDetail d) <- round(soldSumInternet(d), round(d)) WHERE round(d) AND statisticReport(d) == report;
    soldSumResident(StatisticReportDetail d) <- round(soldSumResident(d), round(d)) WHERE round(d) AND statisticReport(d) == report;
    balanceSum(StatisticReportDetail d) <- round(balanceSum(d), round(d)) WHERE round(d) AND statisticReport(d) == report;
        
    IF isPositiveReport(report) THEN {
        soldSum(StatisticReportDetail d) <- 0.0 WHERE soldSum(d) <0 AND statisticReport(d) == report;
        soldSumResident(StatisticReportDetail d) <- 0.0 WHERE soldSumResident(d) <0 AND statisticReport(d) == report;
        soldSumCorporate(StatisticReportDetail d) <- 0.0 WHERE soldSumResident(d) <0 AND statisticReport(d) == report;
        soldSumInternet(StatisticReportDetail d) <- 0.0 WHERE soldSumResident(d) <0 AND statisticReport(d) == report;
        balanceSum(StatisticReportDetail d) <- 0.0 WHERE balanceSum(d) <0 AND statisticReport(d) == report;  
        soldSumResident(StatisticReportDetail d) <- min(soldSumResident(d), soldSum(d)) WHERE statisticReport(d) == report;
    }
    
    soldSum(StatisticReportDetail d) <- (GROUP SUM soldSum(StatisticReportDetail detail)  IF in(detail, d)) WHERE count(d) AND statisticReport(d) == report AND NOT skip(d);
    soldSumCorporate(StatisticReportDetail d) <- (GROUP SUM soldSumCorporate(StatisticReportDetail detail)  IF in(detail, d)) WHERE count(d) AND statisticReport(d) == report AND NOT skip(d);
    soldSumInternet(StatisticReportDetail d) <- (GROUP SUM soldSumInternet(StatisticReportDetail detail)  IF in(detail, d)) WHERE count(d) AND statisticReport(d) == report AND NOT skip(d);
    soldSumResident(StatisticReportDetail d) <- (GROUP SUM soldSumResident(StatisticReportDetail detail)  IF in(detail, d)) WHERE count(d) AND statisticReport(d) == report AND NOT skip(d);
    balanceSum(StatisticReportDetail d) <- (GROUP SUM balanceSum(StatisticReportDetail detail)  IF in(detail, d)) WHERE count(d) AND statisticReport(d) == report AND NOT skip(d);
    overFillData3(report);
}

overFillSumRegionData  ABSTRACT LIST ( StatisticReport);
overFillSumRegionData1  ABSTRACT LIST ( StatisticReport);
fillSumRegionData 'Заполнить данные'(StatisticReport report)  { 
    soldSum(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;
    soldSumCorporate(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;
    soldSumInternet(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;
    soldSumResident(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;
    balanceSum(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == report;    
    
    FOR StatisticGroup s == statisticGroup(StatisticReportDetail d) AND statisticReport(d) == report AND 
        LegalEntity c == company(report) AND Region r == region(report) AND DATE dFrom == fromDate(report) AND DATE dTo == toDate(report) 
        NOINLINE DO {
    
        soldSum(d) <- NUMERIC[16,3](totalSumSoldBy(s, c, r, dFrom, dTo));
        soldSumResident(d) <- NUMERIC[16,3](totalSumResidentSoldBy(s, c, r, dFrom, dTo));
        balanceSum(d) <- NUMERIC[16,3](sumBalanceABy(s, c, r, dTo));
    }
    overFillSumRegionData(report);
    
    soldSum(StatisticReportDetail d) <- NUMERIC[16,3](soldSum(d) / rate(report)) WHERE statisticReport(d) == report;
    soldSumCorporate(StatisticReportDetail d) <- NUMERIC[16,3](soldSumCorporate(d)/ rate(report)) WHERE statisticReport(d) == report;
    soldSumInternet(StatisticReportDetail d) <- NUMERIC[16,3](soldSumInternet(d)/ rate(report)) WHERE statisticReport(d) == report;
    soldSumResident(StatisticReportDetail d) <- NUMERIC[16,3](soldSumResident(d)/ rate(report)) WHERE statisticReport(d) == report;
    balanceSum(StatisticReportDetail d) <- NUMERIC[16,3](balanceSum(d)/ rate(report)) WHERE statisticReport(d) == report;                                                                                                         
   
    soldSum(StatisticReportDetail d) <- round(soldSum(d), round(d)) WHERE round(d) AND statisticReport(d) == report;
    soldSumCorporate(StatisticReportDetail d) <- round(soldSumCorporate(d), round(d)) WHERE round(d) AND statisticReport(d) == report;
    soldSumInternet(StatisticReportDetail d) <- round(soldSumInternet(d), round(d)) WHERE round(d) AND statisticReport(d) == report;
    soldSumResident(StatisticReportDetail d) <- round(soldSumResident(d), round(d)) WHERE round(d) AND statisticReport(d) == report;
    balanceSum(StatisticReportDetail d) <- round(balanceSum(d), round(d)) WHERE round(d) AND statisticReport(d) == report;
       
    IF isPositiveReport(report) THEN {
        soldSum(StatisticReportDetail d) <- 0.0 WHERE soldSum(d) <0 AND statisticReport(d) == report;
        soldSumCorporate(StatisticReportDetail d) <- 0.0 WHERE soldSumCorporate(d) <0 AND statisticReport(d) == report;
        soldSumInternet(StatisticReportDetail d) <- 0.0 WHERE soldSumInternet(d) <0 AND statisticReport(d) == report;
        soldSumResident(StatisticReportDetail d) <- 0.0 WHERE soldSumResident(d) <0 AND statisticReport(d) == report;
        balanceSum(StatisticReportDetail d) <- 0.0 WHERE balanceSum(d) <0 AND statisticReport(d) == report;  
        soldSumResident(StatisticReportDetail d) <- min(soldSumResident(d), soldSum(d)) WHERE statisticReport(d) == report;
    }
    soldSum(StatisticReportDetail d) <- (GROUP SUM soldSum(StatisticReportDetail detail)  IF in(detail, d)) WHERE count(d) AND statisticReport(d) == report AND NOT skip(d);
    soldSumCorporate(StatisticReportDetail d) <- (GROUP SUM soldSumCorporate(StatisticReportDetail detail)  IF in(detail, d)) WHERE count(d) AND statisticReport(d) == report AND NOT skip(d);
    soldSumInternet(StatisticReportDetail d) <- (GROUP SUM soldSumInternet(StatisticReportDetail detail)  IF in(detail, d)) WHERE count(d) AND statisticReport(d) == report AND NOT skip(d);
    soldSumResident(StatisticReportDetail d) <- (GROUP SUM soldSumResident(StatisticReportDetail detail)  IF in(detail, d)) WHERE count(d) AND statisticReport(d) == report AND NOT skip(d);
    balanceSum(StatisticReportDetail d) <- (GROUP SUM balanceSum(StatisticReportDetail detail)  IF in(detail, d)) WHERE count(d) AND statisticReport(d) == report AND NOT skip(d);        
    overFillData3(report);
}

statisticReportDetail = GROUP MAX StatisticReportDetail detail BY statisticReport(detail), number(detail);
changeStatisticReportType  ABSTRACT LIST ( StatisticReportDetail, StatisticReportTypeDetail);

changeStatisticReportType (StatisticReport r)  { 
    DIALOG statisticReportTypes OBJECTS r INPUT rt DO {
        statisticReportType(r) <- rt;
        name(r) <- name(statisticReportType(r));
        statisticGroupType(r) <- statisticGroupType(statisticReportType(r));     
        DELETE StatisticReportDetail d WHERE statisticReport(d) ==r;
        LOCAL parent =  StatisticReportTypeDetail (StatisticReportDetail);   
        parent(StatisticReportDetail d) <- NULL;
        
        FOR statisticReportType(r) == statisticReportType(StatisticReportTypeDetail detail) NEW d = StatisticReportDetail DO {
            statisticReport(d) <-r;
            index(d) <- index(detail);
            number(d) <-number(detail);
            name(d) <- name(detail);
            statisticGroup(d) <- statisticGroup(detail);
            nameUOM(d) <- nameUOM(detail);
            round(d) <- round(detail);   
            parent(d) <- detail;   
            changeStatisticReportType(d,detail);
        } 
        in(StatisticReportDetail d, StatisticReportDetail parent) <- in(parent(d), parent(parent)) WHERE statisticReport(d) == r AND statisticReport(parent) == r;         
    }
}
showDD = count(statisticReportType(StatisticReport r));
showThingDD = showDD(StatisticReport r) AND isThing(r);
showSumDD = showDD(StatisticReport r) AND isSum(r);
FORM statisticReport 'Статистический отчет'

    OBJECTS r = StatisticReport PANEL
    PROPERTIES (r) name, nameReportKind READONLYIF isConsolidate(r), 
                nameStock SHOWIF isStock(r) ON CHANGE changeStockCompany(r),  
                nameCompany SHOWIF isRegion(r),
                nameRegion SHOWIF isRegion(r), 
                consolidateStocks SHOWIF isConsolidate(r) READONLY,
                nameStatisticReportType ON CHANGE changeStatisticReportType(r) READONLYIF isConsolidate(r),
                nameNumerator, number, series, date, time,
                note, fromDate, toDate, nameStatisticGroupType               
                
    PROPERTIES (r) countStatisticReportDetail

    OBJECTS d = StatisticReportDetail
    PROPERTIES (d) index, name, number, nameStatisticGroup,
                   sidStatisticGroup, nameUOM, round, childNumbers READONLY SHOWIF showDD(r)
    PROPERTIES (d) SHOWIF isThing(r) sold, soldResident, balance, balanceResident  
    PROPERTIES (d) SHOWIF isSum(r) soldSum, soldSumResident, soldSumCorporate, soldSumInternet, balanceSum                
    PROPERTIES (d) NEW, deleteid=DELETE GRID
              
    PROPERTIES(r) TOOLBAR fillData DRAW d SHOWIF isStockThing(r) ,
                fillRegionData DRAW d SHOWIF isRegionThing(r),
                fillSumData DRAW d SHOWIF isStockSum(r) ,
                fillSumRegionData DRAW d SHOWIF isRegionSum(r)    
    ORDERS index(d)
    PROPERTIES(r) DRAW d deleteStatisticReportDetail    
    FILTERS statisticReport(d) == r   
    
    OBJECTS dd = StatisticReportDetail GRID
    PROPERTIES (dd) SHOWIF showDD(r)  READONLY index, name, number, nameStatisticGroup,
                   sidStatisticGroup, nameUOM, round
    PROPERTIES (dd) READONLY SHOWIF showThingDD(r) sold, soldResident, balance, balanceResident  
    PROPERTIES (dd) READONLY SHOWIF showSumDD(r) soldSum, soldSumResident, balanceSum    
                       
    ORDERS index(dd)
    FILTERS statisticReport(dd) == r,
            dd != d
    PROPERTIES in (dd, d) SHOWIF showDD(r)
    
    FILTERGROUP select
        FILTER 'Отмеченные' in (dd, d) 'F11' DEFAULT 

    EDIT StatisticReport OBJECT r
;

DESIGN statisticReport {
    BOX {
        size = (1024, 768);
        NEW headerBox {
            horizontal = TRUE;
            PROPERTY (index(d)) {caption ='Порядок';}
            NEW headerParams {
                fill = 1;
                horizontal = FALSE;
                MOVE GROUP(documentHeader,r) {
                    lines = 1;
                    horizontal = FALSE;
                    NEW doc1 {
                        horizontal = TRUE;
                        MOVE PROPERTY(nameStatisticReportType(r));
                        MOVE PROPERTY(name(r));                        
                        MOVE PROPERTY(fromDate(r));
                        MOVE PROPERTY(toDate(r));                                                
                    }
                    NEW doc2 { 
                        horizontal = TRUE;
                        MOVE PROPERTY(nameReportKind(r));
                        MOVE PROPERTY(nameCompany(r));
                        MOVE PROPERTY(nameStock(r));
                        MOVE PROPERTY(nameRegion(r));
                        MOVE PROPERTY(consolidateStocks(r));                                                
                    } 
                    NEW doc3 { 
                        horizontal = TRUE;
                        MOVE PROPERTY(nameNumerator(r));
                        MOVE PROPERTY(number(r));
                        MOVE PROPERTY(series(r));
                        MOVE PROPERTY(date(r));
                        MOVE PROPERTY(time(r));
                    }                       
                }
                MOVE GROUP(documentPrm,r);
            }
            MOVE GROUP(documentSum,r) {
                lines = 1;
            }
        }
        NEW specificationBox {
            fill = 1;
            horizontal = FALSE;
            MOVE BOX(d) {
                caption = 'Спецификация';
                fill = 2;
            }
            MOVE BOX(dd) {
                caption = 'Состав';
            }
        }
        MOVE TOOLBARBOX;
    }
}

in 'Отм' = DATA LOCAL NESTED BOOLEAN (StatisticReport);
countIn = GROUP SUM 1 IF in(StatisticReport r);

balance = GROUP LAST balance(StatisticReportDetail d) 
    ORDER toDate(d)
    WHERE in(statisticReport(d)) 
    BY stock(d), statisticGroup(d) ;
balance  = GROUP LAST balance(StatisticReportDetail d) 
    ORDER toDate(d)
    WHERE in(statisticReport(d)) 
    BY region(statisticReport(d)), statisticGroup(d) ;
    
balanceSum = GROUP LAST balanceSum(StatisticReportDetail d) 
    ORDER toDate(d)
    WHERE in(statisticReport(d)) 
    BY stock(d), statisticGroup(d) ;
balanceSum  = GROUP LAST balanceSum(StatisticReportDetail d) 
    ORDER toDate(d)
    WHERE in(statisticReport(d)) 
    BY region(statisticReport(d)), statisticGroup(d) ;
    
balanceResident = GROUP LAST balanceResident(StatisticReportDetail d) 
    ORDER toDate(d)
    WHERE in(statisticReport(d)) 
    BY stock(d), statisticGroup(d) ;
balanceResident  = GROUP LAST balanceResident(StatisticReportDetail d) 
    ORDER toDate(d)
    WHERE in(statisticReport(d)) 
    BY region(statisticReport(d)), statisticGroup(d) ;


createSumReport 'Создать суммарный отчет'() { 
	NEWSESSION {
	    IF (GROUP SUM 1 IF [GROUP SUM 1 IF in(StatisticReport r) BY statisticReportType(r) ](StatisticReportType str)) > 1 THEN {
	        MESSAGE 'Выбраны отчеты разных типов';
	        RETURN;
	    }
	    IF (GROUP SUM 1 IF [GROUP SUM 1 IF in(StatisticReport r) BY reportKind(r) ](ReportKind str)) > 1 THEN {
	        MESSAGE 'Выбраны отчеты разных видов';
	        RETURN;
	    }
	    IF NOT countIn() THEN {
	        MESSAGE 'Не выбраны отчеты для объединения';
	        RETURN;
	    }
	    NEW s = StatisticReport {
	        statisticReportType(s) <- (GROUP MAX statisticReportType(StatisticReport r) IF in(r));
	        reportKind(s) <- ReportKind.consolidate;
	        consolidateStocks(s) <- OVERRIDE (GROUP CONCAT [GROUP MAX nameStockRegion(StatisticReport r) IF in(r) BY nameStockRegion(r) ](ISTRING[255] str), ',' ORDER str);
	        fromDate(s) <- (GROUP MIN fromDate(StatisticReport r) IF in(r));
	        toDate(s) <- (GROUP MAX toDate(StatisticReport r) IF in(r));
	        name(s) <- 'Суммарный отчет ' + name(statisticReportType(s));
	        statisticGroupType(s) <- statisticGroupType(statisticReportType(s));     
	        
	        FOR statisticReportType(s) == statisticReportType(StatisticReportTypeDetail detail) NEW d = StatisticReportDetail DO {
	            statisticReport(d) <-s;
	            index(d) <- index(detail);
	            number(d) <-number(detail);
	            name(d) <- name(detail);
	            statisticGroup(d) <- statisticGroup(detail);
	            nameUOM(d) <- nameUOM(detail);
	            round(d) <- round(detail);
	            
	            sold(d) <- [GROUP SUM sold(StatisticReportDetail sd) IF in(statisticReport(sd)) BY statisticGroup(sd)](statisticGroup(d));
	            soldResident(d) <- [GROUP SUM soldResident(StatisticReportDetail sd) IF in(statisticReport(sd)) BY statisticGroup(sd)](statisticGroup(d));
	            balance(d) <- IF (GROUP MAX reportKind(StatisticReport r) IF in(r)) == ReportKind.stock THEN [ GROUP SUM balance(Stock ss,StatisticGroup sg) BY sg](statisticGroup(d))
	                ELSE IF (GROUP MAX reportKind(StatisticReport r) IF in(r)) == ReportKind.region THEN [ GROUP SUM balance(Region rs,StatisticGroup sg) BY sg](statisticGroup(d));
	            balanceResident(d) <- IF (GROUP MAX reportKind(StatisticReport r) IF in(r)) == ReportKind.stock THEN [ GROUP SUM balanceResident(Stock ss,StatisticGroup sg) BY sg](statisticGroup(d))
	                ELSE IF (GROUP MAX reportKind(StatisticReport r) IF in(r)) == ReportKind.region THEN [ GROUP SUM balanceResident(Region rs,StatisticGroup sg) BY sg](statisticGroup(d));
	                
	            soldSum(d) <- [GROUP SUM soldSum(StatisticReportDetail sd) IF in(statisticReport(sd)) BY statisticGroup(sd)](statisticGroup(d));
	            soldSumResident(d) <- [GROUP SUM soldSumResident(StatisticReportDetail sd) IF in(statisticReport(sd)) BY statisticGroup(sd)](statisticGroup(d));
	            balanceSum(d) <- IF (GROUP MAX reportKind(StatisticReport r) IF in(r)) == ReportKind.stock THEN [ GROUP SUM balanceSum(Stock ss,StatisticGroup sg) BY sg](statisticGroup(d))
	                ELSE IF (GROUP MAX reportKind(StatisticReport r) IF in(r)) == ReportKind.region THEN [ GROUP SUM balanceSum(Region rs,StatisticGroup sg) BY sg](statisticGroup(d));
	        }
	        SHOW statisticReport OBJECTS r = s DOCKED NOCANCEL;
	    }
	    in(StatisticReport r) <- NULL;
	}
} 

FORM selectSatisticReport 'Выбор отчетов'
    
    OBJECTS r = StatisticReport PANEL 
    
    OBJECTS ri = StatisticReport 
    
    PROPERTIES (r,ri) in
    PROPERTIES (ri) READONLY number, series, date, time, name, nameStockRegion,  nameStatisticReportType,                   
                    fromDate, toDate, note, nameStatisticGroupType   

    PROPERTIES (ri) READONLY countStatisticReportDetail     
    FILTERS statisticReportType(r) == statisticReportType(ri),
            r != ri,
            (fromDate(r) == fromDate(ri) AND toDate(r) == toDate(ri) AND isPeriod(r)) OR (fromDate(ri) >= fromDate(r)  AND toDate(ri) <= toDate(r) AND NOT isPeriod(r))
    FILTERGROUP selects
        FILTER 'Отмеченные' in (r, ri) 'F10'         
;
changeReports (StatisticReport r)  { SHOW selectSatisticReport OBJECTS r = r ; }

fillSumReportData ABSTRACT LIST (StatisticReport);
fillSumReport 'Заполнить данные'(StatisticReport s) { 

    IF NOT countIn(s) THEN {
        MESSAGE 'Не выбраны отчеты для объединения';
        RETURN;
    }
    IF (GROUP SUM 1 IF in(s, StatisticReport report) AND statisticReportType(s) == statisticReportType(report)) != countIn(s) THEN {
        MESSAGE 'Выбраны отчеты разных типов';
        RETURN;
    }
    sold(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == s;
    soldResident(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == s;
    balance(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == s;
    balanceResident(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == s;
        
    soldSum(StatisticReportDetail d) <- NULL WHERE statisticReport(d) == s;
    soldSumResident(StatisticReportDetail d) <-  NULL WHERE statisticReport(d) == s;
    balanceSum(StatisticReportDetail d) <-  NULL WHERE statisticReport(d) == s;
    
    //--------------
    sold(StatisticReportDetail d) <- [GROUP SUM sold(StatisticReportDetail sd) IF in(s, statisticReport(sd)) BY statisticGroup(sd)](statisticGroup(d)) WHERE statisticReport(d) == s;
    soldResident(StatisticReportDetail d) <- [GROUP SUM soldResident(StatisticReportDetail sd) IF in(s, statisticReport(sd)) BY statisticGroup(sd)](statisticGroup(d)) WHERE statisticReport(d) == s;            
    soldSum(StatisticReportDetail d) <-  [GROUP SUM soldSum(StatisticReportDetail sd) IF in(s, statisticReport(sd)) BY statisticGroup(sd)](statisticGroup(d)) WHERE statisticReport(d) == s;
    soldSumResident(StatisticReportDetail d) <-  [GROUP SUM soldSumResident(StatisticReportDetail sd) IF in(s, statisticReport(sd)) BY statisticGroup(sd)](statisticGroup(d)) WHERE statisticReport(d) == s;
    
    IF isPeriod(s) THEN {
        balance(StatisticReportDetail d) <- [GROUP SUM balance(StatisticReportDetail sd) IF in(s, statisticReport(sd)) BY statisticGroup(sd)](statisticGroup(d)) WHERE statisticReport(d) == s;
        balanceResident(StatisticReportDetail d) <- [GROUP SUM balanceResident(StatisticReportDetail sd) IF in(s, statisticReport(sd)) BY statisticGroup(sd)](statisticGroup(d)) WHERE statisticReport(d) == s;
        balanceSum(StatisticReportDetail d) <-  [GROUP SUM balanceSum(StatisticReportDetail sd) IF in(s, statisticReport(sd)) BY statisticGroup(sd)](statisticGroup(d)) WHERE statisticReport(d) == s;
    } ELSE {
        balance(StatisticReportDetail d) <- [GROUP SUM balance(StatisticReportDetail sd) IF in(s, statisticReport(sd)) AND toDate(s) == toDate(statisticReport(sd)) BY statisticGroup(sd)](statisticGroup(d)) WHERE statisticReport(d) == s;
        balanceResident(StatisticReportDetail d) <- [GROUP SUM balanceResident(StatisticReportDetail sd) IF in(s, statisticReport(sd)) AND toDate(s) == toDate(statisticReport(sd)) BY statisticGroup(sd)](statisticGroup(d)) WHERE statisticReport(d) == s;
        balanceSum(StatisticReportDetail d) <-  [GROUP SUM balanceSum(StatisticReportDetail sd) IF in(s, statisticReport(sd)) AND toDate(s) == toDate(statisticReport(sd)) BY statisticGroup(sd)](statisticGroup(d)) WHERE statisticReport(d) == s;    
    }
    fillSumReportData(s);
} 

EXTEND FORM statisticReport    
    PROPERTIES isPeriod(r), selectReports(r) ON CHANGE changeReports(r), fillSumReport(r) SHOWIF countIn(r) TOOLBAR DRAW d
;

DESIGN statisticReport {
    headerParams {
        NEW sum {
            caption = 'Дополнительные параметры';
            horizontal = TRUE;
            MOVE PROPERTY (isPeriod(r));
            MOVE PROPERTY (selectReports(r));
        }                                 
    }
}

FORM statisticReports 'Статистические отчеты'

    OBJECTS r = StatisticReport 
    PROPERTIES (r) in
    PROPERTIES (r) READONLYIF isReadonly() isClosed 
    
    PROPERTIES (r) READONLY name, nameStockRegion, 
                   number, series, date, time,
                   note, fromDate, toDate, nameStatisticGroupType   

    PROPERTIES (r) READONLY countStatisticReportDetail    
    PROPERTIES (r) READONLY PANEL createdNameUser, createdTime, createdHostnameComputer 
    PROPERTIES createSumReport()
    
    PROPERTIES (r) close SHOWIF isOpened(r), open SHOWIF isClosed(r)
    PROPERTIES (r) NEWSESSION NEW, EDIT SHOWIF isOpened(r), deleter=DELETE SHOWIF isOpened(r)  
                                       
    OBJECTS d = StatisticReportDetail
    PROPERTIES (d) READONLY index, name, number, nameStatisticGroup,
                   sidStatisticGroup, nameUOM, round, childNumbers
    PROPERTIES (d) READONLY SHOWIF isThing(r) sold, soldResident, balance, balanceResident  
    PROPERTIES (d) READONLY SHOWIF isSum(r) soldSum, soldSumCorporate, soldSumInternet, soldSumResident, balanceSum
    ORDERS index(d)
    FILTERS statisticReport(d) == r
                
    LIST StatisticReport OBJECT r
;
DESIGN statisticReports {
    BOX {
        size = (1024, 768);

        NEW documentContainer BEFORE TOOLBARBOX {
            fill = 1;

            horizontal = FALSE;
            MOVE BOX(r);    

            NEW documentDetail {
                fill = 1;
                tabbed = TRUE;

                MOVE BOX(d) {
                    fill = 1;
                    caption = 'Спецификация';
                }
                NEW documentHistory {
                    caption = 'История';
                    horizontal = FALSE;

                    MOVE GROUP(created,r);                       
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                        horizontal = FALSE;
                    }
                }
                NEW action {
                    caption = 'Действия';
                    MOVE PROPERTY (createSumReport());
                }
            }
        }
        PROPERTY (index(d)) {caption ='Порядок';}
    }
}

EXTEND FORM statisticReports
    FILTERGROUP openFilter FILTER 'Открыт' isOpened(r) 'F6' DEFAULT
; 

@extendFormEditable(statisticReports);

NAVIGATOR {
    statisticsNavigator {
        NEW FOLDER statisticsReports 'Отчеты' {
            NEW statisticReportTypes;
            NEW statisticReports;        
        }

    }    
}

// ---------------------------------------------- Копирование cтатистического отчета --------------------------------------- //

overCopy ABSTRACT LIST (StatisticReport, StatisticReport);
overCopy ABSTRACT LIST (StatisticReportDetail, StatisticReportDetail);

copyData(StatisticReport old, StatisticReport new) {
    name(new) <- name(old);
    note(new) <- note(old);
    fromDate(new) <- fromDate(old);
    toDate(new) <- toDate(old);
    statisticGroupType(new) <- statisticGroupType(old);
    statisticReportType(new) <- statisticReportType(old);
    stock(new) <- stock(old);
    company(new) <- company(old);
    reportKind(new) <- reportKind(old);
    in(new, StatisticReport r) <- in(old,r);
    isPeriod(new) <- isPeriod(old);
    region(new) <- region(old);
    overCopy(old,new);
    
    FOR statisticReport(StatisticReportDetail oldd) == old ORDER index(oldd) NEW newd = StatisticReportDetail DO {
        statisticReport(newd) <- new;
        name(newd) <- name(oldd);
        nameUOM(newd) <- nameUOM(oldd);
        round(newd) <- round(oldd);
        number(newd) <- number(oldd);
        statisticGroup(newd) <- statisticGroup(oldd);
        in(newd, StatisticReportDetail d) <- in(oldd,d);
        overCopy(oldd,newd);
    }
}

copy 'Копировать'(StatisticReport report) {
	NEWSESSION {
	    NEW r = StatisticReport {
	        copyData(report, r);
	        
	        SHOW statisticReport OBJECTS r = r DOCKED;
	    };
	}
} TOOLBAR;

EXTEND FORM statisticReports
    PROPERTIES(r) copy
;

DESIGN statisticReports {
    TOOLBAR(r){
        MOVE PROPERTY(copy(r)) BEFORE PROPERTY(close(r));
    }
}