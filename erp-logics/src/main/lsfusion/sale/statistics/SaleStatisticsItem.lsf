MODULE SaleStatisticsItem;

REQUIRE SaleStatistics, Item;

NAMESPACE Sale;

statistic 'Статистическая группа' = DATA StatisticGroup (StatisticGroupType, Item) INDEXED;
name 'Статистическая группа' = name(statistic(StatisticGroupType type, Item item));
sid 'Код группы' = sid(statistic(StatisticGroupType type, Item item));
canonicalName 'Каноническое имя' = canonicalName(statistic(StatisticGroupType type, Item item));

CONSTRAINT groupType(parent(StatisticGroup group)) != groupType(group)
           CHECKED BY parent[StatisticGroup] MESSAGE 'Родительский объект статистической группы имеет неправильный тип классификатора';

statistic (StatisticGroupType type, Item sku) += statistic (type, sku);

overCopy(Item s, Item d) + { 
    statistic(StatisticGroupType type, d) <- statistic(type, s) WHERE statistic(type, s);
}

CONSTRAINT groupType(statistic(StatisticGroupType type, Item item))!=type
    MESSAGE 'Данная группа не соответствует изменяемому типу группы';
    
EXTEND FORM item
    OBJECTS sgt = StatisticGroupType
    PROPERTIES(sgt) READONLY name, id
    FILTERS country(sgt) == c

    PROPERTIES(sgt,i) canonicalName
;
DESIGN item { regionalPrm { MOVE BOX(sgt);} }

TABLE statisticGroupTypeItemGroup(StatisticGroupType, ItemGroup);
@defineItemDefaultValue(statisticGroup, 'Статистическая группа (по умолчанию)', StatisticGroup, nameStatisticGroup, statisticGroupType);
dataSidStatisticGroupStatisticGroup 'Код группы' (StatisticGroupType statisticGroupType, ItemGroup itemGroup) = sid(dataStatisticGroup(statisticGroupType, itemGroup)) IN defaultItemGroup;

sidStatisticGroup 'Код группы' (StatisticGroupType statisticGroupType, ItemGroup itemGroup) = sid(statisticGroup(statisticGroupType, itemGroup)) IN defaultItemGroup;
prevSidStatisticGroup 'Код группы' (StatisticGroupType statisticGroupType, ItemGroup itemGroup) = sid(prevStatisticGroup(statisticGroupType, itemGroup)) IN defaultItemGroup;

assignStatisticGroupItems 'Назначить всем товарам группы' (ItemGroup group)  { 
	NEWSESSION {
	    statistic(StatisticGroupType t, Item i) <- statisticGroup(t, itemGroup(i)) WHERE isParent(group, i);
	    apply();
	}
} TOOLBAR CONFIRM;

EXTEND FORM itemGroup
    OBJECTS t=StatisticGroupType 
    PROPERTIES(t)   READONLY name, id
    PROPERTIES(t, g)  prevSidStatisticGroup, prevNameStatisticGroup
    PROPERTIES(g) assignStatisticGroupItems DRAW t
    FILTERS country(t) == defaultCountry()
;    

DESIGN itemGroup {
    defaultPane {
        MOVE BOX(t) { caption = 'Статистический классификатор';}
    }         
}

WHEN LOCAL CHANGED(itemGroup(Item i)) AND StatisticGroupType t IS StatisticGroupType AND (NOT statistic(t, i) OR autoSyncDefaultItemGroup()) DO
    statistic(t, i) <- statisticGroup(t, itemGroup(i));

changeStatisticGroupTypeItem 'Стат. группа товара и товарной группы должны быть равны' = DATA BOOLEAN ();
EXTEND FORM options
    PROPERTIES () changeStatisticGroupTypeItem
;

DESIGN options {
    statistics {
        MOVE PROPERTY(changeStatisticGroupTypeItem());   
    }
}

WHEN LOCAL CHANGED(statisticGroup(StatisticGroupType type,itemGroup(Item item)))  AND changeStatisticGroupTypeItem()
    AND NOT CHANGED(statistic(type, item)) AND statisticGroup(type, itemGroup(item)) DO {
    
        statistic(type, item) <- statisticGroup(type, itemGroup(item));
}
    


change(StatisticGroupType type, Item item)  { 
    DIALOG statisticGroupDialog OBJECTS c = type, s = statistic(type, item) INPUT NULL DO
        statistic(type, item) <- s;
}
changeData(StatisticGroupType type, ItemGroup itemGroup)  { 
    DIALOG statisticGroupDialog OBJECTS c = type, s = dataStatisticGroup(type, itemGroup) INPUT NULL DO   
        dataStatisticGroup(type, itemGroup) <- s;
}

fill 'Заполнить стат. группу для всех товаров'(StatisticGroupType type, ItemGroup itemGroup)  { 
    statistic(type, Item item) <- statisticGroup(type,itemGroup) WHERE isParent(itemGroup,item);
} TOOLBAR;

changeBackground = RGB(224, 224, 255);

isLeaf 'Только листья' = DATA LOCAL BOOLEAN ();

FORM statisticGroupsPrint 'Привязка групп'
    OBJECTS ssc = (ss=Country, c=StatisticGroupType) PANEL SUBREPORT

    TREE skuTree sk = ItemGroup PARENT parent(sk)
    PROPERTIES(sk)  READONLY order, nameSkuGroup1,  nameSkuGroup2, nameSkuGroup3, nameSkuGroup4, nameSkuGroup5, name  

           
    PROPERTIES READONLY nameStatisticGroup(c,sk),  sidStatisticGroup(c,sk)
    ORDERS nameSkuGroup1(sk),  nameSkuGroup2(sk), nameSkuGroup3(sk), nameSkuGroup4(sk), nameSkuGroup5(sk), name(sk)
    FILTERS (isLeaf(sk) AND isLeaf()) OR (sk IS ItemGroup AND NOT isLeaf())
    FILTERS  active(sk) 
;

statisticGroupsPrint 'Привязка групп (xlsx)' (Country ss, StatisticGroupType c)  { 
    isLeaf() <- NULL;
    PRINT statisticGroupsPrint OBJECTS ss=ss, c=c XLSX;
} IMAGE 'print.png' IN print;

statisticGroupsLeafPrint 'Привязка групп (xlsx) только листья' (Country ss, StatisticGroupType c)  { 
    isLeaf() <- TRUE;
    PRINT statisticGroupsPrint OBJECTS ss=ss, c=c XLSX;
} IMAGE 'print.png' IN print;

EXTEND FORM statisticGroups
    TREE skuTree sk = ItemGroup PARENT parent(sk)
    PROPERTIES READONLY order(sk), name(sk)     
    PROPERTIES dataNameStatisticGroupStatisticGroup(c,sk) ON CHANGE changeData(c,sk) ON CONTEXTMENU fill(c,sk) BACKGROUND changeBackground()
    PROPERTIES dataSidStatisticGroupStatisticGroup(c,sk) ON CHANGE changeData(c,sk) ON CONTEXTMENU fill(c,sk) BACKGROUND changeBackground()
           
    PROPERTIES READONLY nameStatisticGroup(c,sk),  sidStatisticGroup(c,sk)
    ORDERS order(sk), name(sk)
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F5' DEFAULT
    
    OBJECTS i = Item
    PROPERTIES (i) READONLY name, idBarcode, id[Sku] SHOWIF showIDs()
    PROPERTIES name(c,i) ON CHANGE change(c,i)
    PROPERTIES sid(c,i) ON CHANGE change(c,i)
    FILTERS isParent(sk,i)
    FILTERGROUP inactive1 FILTER 'Активные' active(i) 'F5' DEFAULT
    PROPERTIES(ss,c) TOOLBAR DRAW sk statisticGroupsPrint, statisticGroupsLeafPrint 
;
DESIGN statisticGroups {
    specificationBox {
        NEW relation {
            fill = 1;
            caption = 'Привязка групп';
            type = SPLITV;
            MOVE BOX(TREE skuTree) {caption = 'Товарные группы';}
            MOVE BOX(i); 
            PROPERTY (dataNameStatisticGroupStatisticGroup(c,sk)) {caption = 'Статистическая группа';}
            PROPERTY (nameStatisticGroup(c,sk)) {caption = 'Статистическая группа (перегруженная)';}
        }
    }
}

//----------------------- Переход на новый основной классификатор ---------------------------//
overReplaceToItemGroup(CustomGroup g, ItemGroup ng) + {
    dataStatisticGroup(StatisticGroupType sgt, ng) <- prevStatisticGroup(sgt,itemGroup(g));
}