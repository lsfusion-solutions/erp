MODULE SalePurchaseInvoice;

REQUIRE SaleInvoice, PurchaseInvoice, SalePurchaseOperation;

PRIORITY Sale;

//----------------------------------------------------------------------------//

// Создание накладной на основе накладной //

FORM invoiceInvoices 'Накладные'
    OBJECTS s = LegalEntity PANEL
    PROPERTIES (s) READONLY name
    OBJECTS c = LegalEntity PANEL
    PROPERTIES (c) READONLY name

    OBJECTS ss = Stock PANEL
    PROPERTIES (ss) READONLY name
    OBJECTS cs = Stock PANEL
    PROPERTIES (cs) READONLY name

    OBJECTS t=DATE PANEL
    PROPERTIES(t) VALUE

    OBJECTS o = Invoice
    PROPERTIES (o) READONLY isPosted, number, series, date, time, nameCurrency,
                            countInvoiceDetail, quantityInvoiceDetail, sumInvoiceDetail,
                            note
    FILTERS supplier(o) == s,
            customer(o) == c,
            supplierStock(o) == ss,
            customerStock(o) == cs,
            isPosted(o)

    FILTERGROUP filters1
        FILTER 'Только этой даты' date(o) == t 'F11' DEFAULT

    OBJECTS d = InvoiceDetail

    PROPERTIES (d) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku
    PROPERTIES (d) READONLY SHOWIF showPack(o) idBarcodePack, shortNameUOMPack, amountPack, packQuantity
    PROPERTIES (d) READONLY quantity, price, sum, numberVAT, valueVAT,
                            VATSum, invoiceSum, nameSupplierStock

    FILTERS invoice(d) == o
;

DESIGN invoiceInvoices {
    BOX {
        size = (1124, 768);
        fill = 1;
        NEW documentContainer BEFORE TOOLBARBOX {

            type = CONTAINERV;
            fill = 1;
            NEW headerBox1 {
                type = CONTAINERH;
                NEW headerBox11 {
                    type = CONTAINERH;
                    fill =1;
                    caption = 'Поставщик';
                    MOVE BOX(s);
                    MOVE BOX(ss);
                }
                NEW headerBox12 {
                    type = CONTAINERH;
                    caption = 'Покупатель';
                    MOVE BOX(c);
                    MOVE BOX(cs);
                }
            }
            NEW headerBox2 {
                type = CONTAINERH;
                MOVE BOX(t);
            }
            NEW specBox {
                type = SPLITV;
                fill =1;
                
                MOVE BOX(o) {
                    fill =1;
                };
                NEW documentDetail {
                    type = TABBED;
                    fill =1;
                    MOVE BOX(d) {
                        caption = 'Спецификация';
                        fill =1;
                    }
                    NEW printTab {
                        caption = 'Печатные формы';
                        NEW printContainer {
                            caption = 'Печать';
                        }
                    }
                }
            }
        }
    }
}

notUseBatchPurchaseInvoice 'Не проставлять партии при выполнении действия "Накладная (закупка)"' = DATA BOOLEAN (Operation); 
EXTEND FORM operation
    PROPERTIES notUseBatchPurchaseInvoice(o)
;
DESIGN operation {
    purchaseContainer {
        MOVE PROPERTY (notUseBatchPurchaseInvoice(o));
    }
}

invoiceDetail = ABSTRACT InvoiceDetail (Purchase.InvoiceDetail) MATERIALIZED INDEXED;
invoiceDetail = DATA InvoiceDetail (Purchase.UserInvoiceDetail) INDEXED;
invoiceDetail(Purchase.UserInvoiceDetail invoiceDetail) += invoiceDetail(invoiceDetail);

setPropertiesPurchaseSale  ABSTRACT LIST ( Purchase.UserInvoiceDetail, InvoiceDetail);
setPropertiesPurchaseSale  ABSTRACT LIST ( Purchase.UserInvoice);
fillInvoice 'Заполнить на основе накладной'(Purchase.UserInvoice userInvoice)   { 
    DIALOG invoiceInvoices OBJECTS s = supplier(userInvoice), c = customer(userInvoice),
                                   ss = supplierStock(userInvoice), cs = customerStock(userInvoice),
                                   t = date(userInvoice), o INPUT DO {
        FOR invoice(InvoiceDetail invoiceDetail) == o NEW d = Purchase.UserInvoiceDetail DO {
            userInvoice(d) <- userInvoice;
            invoiceDetail(d) <- invoiceDetail;
            setPropertiesPurchaseSale(d, invoiceDetail); 
        }
        setPropertiesPurchaseSale(userInvoice);
    }
};

setPropertiesPurchaseSale(Purchase.UserInvoiceDetail d, InvoiceDetail invoiceDetail) + { 
            sku(d) <- sku(invoiceDetail);
            batch(d) <- batch(invoiceDetail)  WHERE NOT (notUseBatchPurchaseInvoice(operation(invoice(invoiceDetail))) OR skipFillBatch(d));
            barcodePack(d) <- barcodePack(invoiceDetail);
            amountPack(d) <- amountPack(invoiceDetail);
            packQuantity(d) <- packQuantity(invoiceDetail);
            quantity (d) <- quantity(invoiceDetail);
            VAT(d) <- VAT(invoiceDetail);
            valueVAT(d) <- valueVAT(invoiceDetail);
            price(d) <- price(invoiceDetail);
            invoicePrice(d) <- invoicePrice(invoiceDetail);    
}
//----------------------------------------------------------------------------//

createPurchaseInvoice 'Создать накладную (закупка)' = ABSTRACT BOOLEAN (Invoice) MATERIALIZED;
createPurchaseInvoice 'Создать накладную (закупка)' = DATA BOOLEAN (UserInvoice) MATERIALIZED;
createPurchaseInvoice(UserInvoice invoice) += createPurchaseInvoice(invoice);

createPurchaseInvoice 'Создать накладную (закупка)' (InvoiceDetail invoiceDetail) = createPurchaseInvoice(invoice(invoiceDetail))MATERIALIZED;
createPurchaseInvoice 'Создать накладную (закупка)' (UserInvoiceDetail userInvoiceDetail) = createPurchaseInvoice(userInvoice(userInvoiceDetail));
backgroundPurchase 'Цвет' (Invoice invoice) = RGB(255, 255, 190) IF invoice IS Invoice;

isCompanyCustomer (UserInvoice userInvoice) =  isCompany(customer(userInvoice));
EXTEND FORM userInvoice
    PROPERTIES(i) BACKGROUND backgroundPurchase(i) SHOWIF isCompanyCustomer(i) createPurchaseInvoice
;
DESIGN userInvoice {
    headerCreateDocuments {
        NEW headerCreatePurchase {
            type = CONTAINERH;
            caption = 'Накладная (закупка)';
            MOVE PROPERTY(createPurchaseInvoice(i));
        }
    }
}

//--  Связь поставки с поставкой

notNullSaleReference 'Должна быть ссылка на расходную накладную' = DATA BOOLEAN (Purchase.Operation) COMPLEX;
equalsSkuSale 'Должны совпадать товары в приходной и расходной накладной' = DATA BOOLEAN (Purchase.Operation) COMPLEX;
equalsPriceSale 'Должны совпадать цены в приходной и расходной накладной' = DATA BOOLEAN (Purchase.Operation) COMPLEX;
EXTEND FORM Purchase.operation
    PROPERTIES(o) notNullSaleReference, equalsSkuSale, equalsPriceSale
;

DESIGN Purchase.operation {
    constraintContainer {
        NEW salePurchase {
            caption = 'Накладная на основе продажи';
            MOVE PROPERTY(notNullSaleReference(o));
            MOVE PROPERTY(equalsSkuSale(o));
            MOVE PROPERTY(equalsPriceSale(o));
        }
    }
}

CONSTRAINT notNullSaleReference(operation(Purchase.UserInvoiceDetail d)) AND NOT invoiceDetail(d)
    MESSAGE 'Для строки накладной (закупка) должна быть задана ссылка на строку накладной (продажа)'; 

CONSTRAINT SET(invoiceDetail(Purchase.UserInvoiceDetail d)) AND NOT Purchase.sku(d) = sku(invoiceDetail(d)) AND equalsSkuSale(operation(d))
    CHECKED BY invoiceDetail[Purchase.UserInvoiceDetail] 
        MESSAGE 'Sku в строке накладной закупки и продажи должны совпадать'; 

CONSTRAINT equalsPriceSale(operation(Purchase.UserInvoiceDetail d)) AND invoiceDetail(d) AND NOT Purchase.price(d) == price(invoiceDetail(d))
    MESSAGE 'Цена в строке накладной закупки и продажи должна совпадать'; 

skipStockConstraint = ABSTRACT BOOLEAN (Purchase.UserInvoiceDetail);

CONSTRAINT invoiceDetail(Purchase.UserInvoiceDetail d) AND NOT supplier(invoiceDetail(d)) = supplier(d) 
    CHECKED BY invoiceDetail[Purchase.UserInvoiceDetail]
    MESSAGE 'Поставщик строки накладной закупки должен соответствовать поставщику строки накладной продажи';

CONSTRAINT invoiceDetail(Purchase.UserInvoiceDetail d) AND NOT supplierStock(invoiceDetail(d)) = supplierStock(d) 
           AND NOT skipStockConstraint(d) 
    CHECKED BY invoiceDetail[Purchase.UserInvoiceDetail]
    MESSAGE 'Склад поставщика строки накладной закупки должен соответствовать складу поставщика строки накладной продажи';

CONSTRAINT invoiceDetail(Purchase.UserInvoiceDetail d) AND NOT customer(invoiceDetail(d)) = customer(d) 
    CHECKED BY invoiceDetail[Purchase.UserInvoiceDetail]
    MESSAGE 'Покупатель строки накладной закупки должен соответствовать покупателю строки накладной продажи';

CONSTRAINT invoiceDetail(Purchase.UserInvoiceDetail d) AND NOT customerStock(invoiceDetail(d)) = customerStock(d)
           AND NOT skipStockConstraint(d) 
    CHECKED BY invoiceDetail[Purchase.UserInvoiceDetail]
    MESSAGE 'Склад покупателя строки накладной закупки должен соответствовать складу покупателя строки накладной продажи';

//CONSTRAINT (supplier(Purchase.UserInvoiceDetail detail) != supplier(invoiceDetail(detail)) OR
//            supplierStock(detail) != supplierStock(invoiceDetail(detail)) OR
//            customer(detail) != customer(invoiceDetail(detail)) OR
//            customerStock(detail) != customerStock(invoiceDetail(detail))) 
//           AND NOT skipStockConstraint(detail)
////           Purchase.skuInvoiceDetail(detail) != skuInvoiceDetail(invoiceDetailUserInvoiceDetail(detail)) // пока отключаем, чтобы при перемещении в производстве (с изменением sku) работало
//    CHECKED BY invoiceDetail[Purchase.UserInvoiceDetail]
//        MESSAGE 'Поставщик, покупатель, склад поставщика и склад покупателя в накладной и накладной на основе накладной должны соответствовать друг другу';


descriptionIndexInvoiceDetail 'Строка накладной (продажа)' (Purchase.InvoiceDetail detail) = descriptionIndex(invoiceDetail(detail));
descriptionIndexInvoiceDetail 'Строка накладной (продажа)' (Purchase.UserInvoiceDetail detail) = descriptionIndex(invoiceDetail(detail));

TABLE PurchaseInvoiceSaleInvoice(Purchase.Invoice, Sale.Invoice);
countInvoiceDetail (sale, purchase) = GROUP SUM 1 BY invoice(invoiceDetail(Purchase.InvoiceDetail detail)), invoice(detail) MATERIALIZED;

saleInvoices 'Накладные (продажа)' (Purchase.Invoice purchase) = GROUP
                                                        CONCAT STRING[255](description(Invoice sale)) IF countInvoiceDetail(sale, purchase) , ', '
                                                        ORDER sale CHARWIDTH 30;

invoiced 'Кол-во (выписано)' (invoiceDetail) = GROUP SUM quantity(Purchase.InvoiceDetail detail) IF isPosted(detail)
                                                                   BY invoiceDetail(detail) MATERIALIZED;

invoiced 'Кол-во (выписано)' = GROUP SUM invoiced(InvoiceDetail detail) BY invoice(detail);

statusInvoice 'Статус' = CASE WHEN invoiced(Invoice i) THEN 'Создано поступление'
                                                                        ELSE 'Не создано поступление';

toInvoiced 'Не выписано' (InvoiceDetail invoiceDetail) = quantity (invoiceDetail) (-) invoiced(invoiceDetail);

EXTEND FORM Purchase.userInvoice
    PROPERTIES(i) fillInvoice, saleInvoices READONLY
    PROPERTIES (d) descriptionIndexInvoiceDetail
;
DESIGN Purchase.userInvoice { 
    headerCreateDetail{ 
        NEW salePurchase{
            caption = 'Накладная (продажа)';
            type = CONTAINERV;
            MOVE PROPERTY (fillInvoice(i));
            MOVE PROPERTY (saleInvoices(i));
        }
    }
}


CLASS PurchaseInvoice 'Накладная на основе накладной': Purchase.Invoice;
CLASS PurchaseInvoiceDetail 'Строка накладной на основе накладной' : Purchase.InvoiceDetail;

@defineDocumentTables(purchaseInvoice);

@defineDocumentAggregation(invoice, purchaseInvoice, createPurchaseInvoice);
invoice(PurchaseInvoiceDetail d) += purchaseInvoice(d);

index(PurchaseInvoiceDetail d) += index(d);

date(PurchaseInvoice invoice) += date(invoice);
time(PurchaseInvoice invoice) += time(invoice);

@defineDocumentAggregationStockPrefix(invoice, purchaseInvoice, supplier, 'Склад поставщика', , );
supplierStock(PurchaseInvoice invoice) += supplierStock(invoice);
@defineDocumentAggregationStockPrefix(invoice, purchaseInvoice, customer, 'Склад покупателя', , );
customerStock(PurchaseInvoice invoice) += customerStock(invoice);

@defineDocumentAggregationLegalEntityPrefix(invoice, purchaseInvoice, supplier, 'Поставщик', , );
supplier(PurchaseInvoice invoice) += supplier(invoice);
@defineDocumentAggregationLegalEntityPrefix(invoice, purchaseInvoice, customer, 'Покупатель', , );
customer(PurchaseInvoice invoice) += customer(invoice);

@defineDocumentAggregationPosted(invoice, purchaseInvoice);
isPosted(PurchaseInvoice invoice) += isPosted(invoice);

@defineDocumentAggregationClosed(invoice, purchaseInvoice);
isClosed(PurchaseInvoice invoice) += isClosed(invoice);

number(PurchaseInvoice invoice) += number(invoice(invoice));
series(PurchaseInvoice invoice) += series(invoice(invoice));
seriesNumber 'Серия/номер документа' (PurchaseInvoice purchaseInvoice) = seriesNumber(invoice(purchaseInvoice));

noteInvoice 'Примечание' (PurchaseInvoice purchaseInvoice) = note(invoice(purchaseInvoice));
note(PurchaseInvoice invoice) += noteInvoice(invoice);

currency  (PurchaseInvoice purchaseInvoice) = currency(invoice(purchaseInvoice));
currency (PurchaseInvoice invoice) += currency(invoice);

agreement  (PurchaseInvoice purchaseInvoice) = agreement(invoice(purchaseInvoice));
agreement (PurchaseInvoice invoice) += agreement(invoice);

priceListType  (PurchaseInvoice purchaseInvoice) = priceListType(invoice(purchaseInvoice));
priceListType (PurchaseInvoice invoice) += priceListType(invoice);

@defineDocumentDescription(purchaseInvoice, PurchaseInvoiceDetail, 'Накладная на основе накладной');
description (PurchaseInvoice invoice) += description(invoice);

contractSku (PurchaseInvoice invoice) += contractSku(invoice(invoice));
isCommission (PurchaseInvoice invoice) += isCommission(invoice(invoice));

@defineDocumentAggregationDetailSku(invoice, purchaseInvoice, sku);
sku(PurchaseInvoiceDetail invoiceDetail) +=  sku(invoiceDetail);

@defineDocumentAggregationDetailBatch(invoice, purchaseInvoice);
overSkipBatch = ABSTRACT VALUE BOOLEAN (PurchaseInvoiceDetail);
batch(PurchaseInvoiceDetail invoiceDetail) += batch(invoiceDetail) IF NOT overSkipBatch(invoiceDetail);

quantity(PurchaseInvoiceDetail invoiceDetail) += quantity(invoiceDetail(invoiceDetail));
priceListType(PurchaseInvoiceDetail invoiceDetail) += priceListType(invoiceDetail(invoiceDetail));

price(PurchaseInvoiceDetail invoiceDetail) += price(invoiceDetail(invoiceDetail));
sum(PurchaseInvoiceDetail invoiceDetail) += sum(invoiceDetail(invoiceDetail));
VAT(PurchaseInvoiceDetail invoiceDetail) += VAT(invoiceDetail(invoiceDetail));
valueVAT(PurchaseInvoiceDetail invoiceDetail) += valueVAT(invoiceDetail(invoiceDetail));
invoicePrice(PurchaseInvoiceDetail invoiceDetail) += invoicePrice(invoiceDetail(invoiceDetail));
VATSum(PurchaseInvoiceDetail invoiceDetail) += VATSum(invoiceDetail(invoiceDetail));
invoiceSum(PurchaseInvoiceDetail invoiceDetail) += invoiceSum(invoiceDetail(invoiceDetail));
sumNetWeight(PurchaseInvoiceDetail invoiceDetail) += sumNetWeight(invoiceDetail(invoiceDetail));
sumGrossWeight(PurchaseInvoiceDetail invoiceDetail) += sumGrossWeight(invoiceDetail(invoiceDetail));

edit(PurchaseInvoice invoice) + {  edit(invoice(invoice)); }
close(PurchaseInvoice invoice) + {  close(invoice(invoice)); }
createdUser(PurchaseInvoice invoice) += createdUser(invoice(invoice));

showPack(PurchaseInvoice invoice) +=  showPack(invoice(invoice));
barcodePack(PurchaseInvoiceDetail invoiceDetail) += barcodePack(invoiceDetail(invoiceDetail));
amountPack(PurchaseInvoiceDetail invoiceDetail) +=  amountPack(invoiceDetail(invoiceDetail));
packQuantity(PurchaseInvoiceDetail invoiceDetail) +=  packQuantity(invoiceDetail(invoiceDetail));

invoiceDetail(PurchaseInvoiceDetail invoiceDetail) += invoiceDetail(invoiceDetail);

edit(PurchaseInvoiceDetail d) + {  edit(invoiceDetail(d)); }
show(PurchaseInvoiceDetail d) + {  show(invoiceDetail(d)); }

//------------------------------ Создание агрегированных объектов через операции -----------------------------//

// -- Операция
createPurchaseInvoice 'Накладная (закупка) ' = DATA BOOLEAN (Operation);

EXTEND FORM operation
    PROPERTIES(o) createPurchaseInvoice
;
DESIGN operation {
    purchaseContainer {
        MOVE PROPERTY(createPurchaseInvoice(o)) BEFORE PROPERTY(namePurchaseOperation(o));
    }
}

@deriveDocumentOperationProperty(UserInvoice, createPurchaseInvoice);

@defineDocumentInterfaceOperationPrefix (invoice, purchase, Purchase, ' (закупка)');

// Записываем операцию для закупки по умолчанию из операции
purchaseOperation (UserInvoice invoice) <- purchaseOperation(operation(invoice))
    WHEN CHANGED(operation(invoice));

operation(PurchaseInvoice invoice) += purchaseOperation(invoice(invoice));

EXTEND FORM userInvoice
    PROPERTIES(i) BACKGROUND backgroundPurchase(i) SHOWIF createPurchaseInvoice(i) namePurchaseOperation

;
DESIGN userInvoice {
    headerCreatePurchase {
        MOVE PROPERTY(namePurchaseOperation(i)) AFTER PROPERTY(createPurchaseInvoice(i));
    }
}

//-- Действие

overFillInvoice  ABSTRACT LIST ( Purchase.UserInvoice, Invoice);
overFillInvoice2  ABSTRACT LIST ( Purchase.UserInvoice, Invoice);
overFillInvoice  ABSTRACT LIST ( Purchase.UserInvoiceDetail, InvoiceDetail);

moveUserInvoice 'Накладная (закупка)'(Invoice invoice)   { 
	NEWSESSION{
	
	    NEW i = Purchase.UserInvoice {
	
	        agreement(i) <- agreement(invoice);
	        priceListType(i) <- priceListType(invoice);
	        supplier(i) <- supplier(invoice);
	        customer(i) <- customer(invoice);
	        supplierStock(i) <- supplierStock(invoice);
	        customerStock(i) <- customerStock(invoice);
	        number(i) <- number(invoice);
	        series(i) <- series(invoice);
	        note(i) <- note(invoice);
	        currency(i) <- currency(invoice);
	        contractSku(i) <- contractSku(invoice);
	        isCommission(i) <- isCommission(invoice);
	        showPack(i) <- showPack(invoice);
	        operation(i) <- purchaseOperation(operation(invoice));
	        EXEC overFillInvoice(i, invoice);
	
	        FOR invoice(InvoiceDetail detail)==invoice NEW d = Purchase.UserInvoiceDetail DO {
	
	            userInvoice(d) <- i;
	            invoiceDetail(d) <- detail;
	
	            priceListType(d) <- priceListType(detail) WHERE in(priceListType(detail), operation(i)) OR NOT operation(i);
	
	            sku(d) <- sku(detail);
	            quantity (d) <- quantity(detail);
	            VAT (d) <- VAT(detail);
	            price (d) <- price(detail);
	            invoicePrice (d) <- invoicePrice(detail);
	
	            barcodePack (d) <- barcodePack(detail);
	            amountPack (d) <- amountPack(detail);
	            packQuantity (d) <- packQuantity(detail);
	
	            batch(d) <- batch(detail) WHERE NOT (notUseBatchPurchaseInvoice(operation(invoice)) OR skipFillBatch(d));	            
	            EXEC overFillInvoice(d,detail);
	        }
	        
	        EXEC overFillInvoice2(i, invoice);
	
	    SHOW Purchase.userInvoice OBJECTS i = i DOCKED NOCANCEL;
	    }
	}
} TOOLBAR;
//overSkipBatch(PurchaseInvoiceDetail d) += notUseBatchPurchaseInvoice(operation(invoiceDetail(d)));
EXTEND FORM invoices
    PROPERTIES(i) moveUserInvoice
;
DESIGN invoices {
    createdContainer{
        MOVE PROPERTY(moveUserInvoice(i)) { alignment = STRETCH; };
    }
}

