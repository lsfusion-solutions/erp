MODULE SaleReturnInvoice;

REQUIRE OrderInvoice, SaleReturnOrder, SaleInvoice, SaleOperation, InvoiceContract;

PRIORITY Sale, Operation;

NAMESPACE SaleReturn;

//----------------------------------------------- Накладная ---------------------------------------------------//
@defineInvoice(' (продажа-возврат)', supplier, company, customer, return, SaleReturn, sr);
@extendFormFilterAccessStock(Invoice, i, invoices, supplierStock, company);

INDEX customer(InvoiceDetail d), supplier(d), sku(d);

in(Invoice i) += i IS Invoice;

// Добавляем партии
@defineInvoiceBatch(supplier, return, SaleReturn, ' ((продажа-возврат)', sr);
batch[Invoice.InvoiceDetail](InvoiceDetail d) += batch(d);
@defineInvoiceBatchDialogStock(supplierStock, In);

// Добавляем операцию
@defineDocumentOperationContainer(invoice, i, overName);
@deriveDocumentDetailPricePriceListTypeVATBatchCustomOperation (userInvoiceDetail);

CONSTRAINT isPosted(InvoiceDetail d) AND banNegativeQuantityInvoice(operation(d)) AND (quantity(d) < 0.0) //AND isPosted(d)
    MESSAGE 'Запрещено вводить отрицательное количество в накладную';  
@extendFormFilterRoleAccess(invoice, i, invoices);
@defineDocumentOperationConstraint(invoice, 'накладная (продажа-возврат)', SaleReturn);

@defineOrderInvoice(' (продажа-возврат)', supplier);

@defineInvoiceReturn(Sale, SaleReturn, supplierStock, customerStock);
@defineInvoiceDestination(customer, supplier);
@defineInvoiceStockDestination(customerStock, supplierStock);

@defineDocumentSkuStockSupplier (userInvoice, userInvoice, i);
@defineDocumentBatchStockSupplier(userInvoice, userInvoice, i);

// условия оплаты
@defineInvoicePaymentCondition(' (продажа-возврат)');

//----------------------------------------------- Операции -----------------------------------------------------//

@defineDocumentOperationPriceListType(userInvoice, 'накладной (продажа-возврат)', userInvoice, return);

CONSTRAINT CHANGED(operation(UserInvoice i)) AND forbidInvoice(operation(i))
    CHECKED BY operation[UserInvoice]
    MESSAGE 'Запрещено вводить накладные по выбранной операции';            

@defineDocumentOperationLegalEntity(userInvoice, supplier, 'Поставщик');
@deriveDocumentOperationLegalEntity(userInvoice, supplier, userInvoice);
@defineDocumentOperationLegalEntity(userInvoice, customer, 'Покупатель');
@deriveDocumentOperationLegalEntity(userInvoice, customer, userInvoice);
@defineDocumentOperationStock(userInvoice, supplier, 'Склад поставщика');
@deriveDocumentOperationStock(userInvoice, supplier, userInvoice);
@defineDocumentOperationStock(userInvoice, customer, 'Склад покупателя');
@deriveDocumentOperationStock(userInvoice, customer, userInvoice);

@defineDocumentOperationRole(userInvoice);

operation[Invoice.Invoice](Invoice o) += operation(o);
// Добавляем в копирование инвойсов
overCopy(Invoice s, UserInvoice d) + { 
    operation(d) <- operation(s);
}

@defineOperationFilterProperty(invoice, i, invoices, nameFilterInvoiceCustomUser);
//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplier(UserInvoice userInvoice) AND NOT isCompany(supplier(userInvoice))
    CHECKED BY supplier[UserInvoice] MESSAGE 'Для накладной выбрана в качестве поставщика организация, не являющаяся компанией: возврат';
CONSTRAINT customer(UserInvoice userInvoice) AND NOT isCustomer(customer(userInvoice))
    CHECKED BY customer[UserInvoice] MESSAGE 'Для накладной выбрана в качестве покупателя организация, не являющаяся покупателем: возврат';
    
CONSTRAINT filterInvoiceSupplier() AND NOT isCompany(filterInvoiceSupplier())
    CHECKED BY filterInvoiceSupplier[] MESSAGE 'Для фильтра в накладной выбрана в качестве поставщика организация, не являющаяся компанией';
CONSTRAINT filterInvoiceSupplierStock() AND NOT isCompany(filterInvoiceSupplierStock())
    CHECKED BY filterInvoiceSupplierStock[] MESSAGE 'Для фильтра в накладной выбран в качестве склада поставщика склад, который не принадлежит компании';   
        
CONSTRAINT filterInvoiceCustomer() AND NOT isCustomer(filterInvoiceCustomer())
    CHECKED BY filterInvoiceCustomer[] MESSAGE 'Для фильтра в накладной выбрана в качестве покупателя организация, не являющаяся покупателем';  
       
CONSTRAINT filterInvoiceSupplier() AND filterInvoiceSupplierStock() AND NOT in(filterInvoiceSupplier(), filterInvoiceSupplierStock())
    CHECKED BY filterInvoiceSupplierStock[] MESSAGE 'Поставщик и склад поставщика в фильтре для накладной не имеют связи';
CONSTRAINT filterInvoiceCustomer() AND filterInvoiceCustomerStock() AND NOT in(filterInvoiceCustomer(), filterInvoiceCustomerStock())
    CHECKED BY filterInvoiceCustomerStock[] MESSAGE 'Покупатель и склад покупателя в фильтре для накладной не имеют связи';         

//------------------------------ Автоматическое проставление свойств -----------------------------//

@deriveDocumentLegalEntityDefaultStock(UserInvoice, customer, userInvoice);

@defineDocumentLegalEntityStockAccess(UserInvoice, supplier, company, userInvoice);

//------------------------------ Ввод в упаковках -----------------------------//

@defineDocumentPack(invoice, i);
packQuantity[Invoice.InvoiceDetail](InvoiceDetail detail) += packQuantity(detail);
DESIGN userInvoice {
    headerExtraParams {
        NEW headerPack {
            caption = 'Упаковка';
            MOVE PROPERTY(showPack(i));
        }
    }
}

@defineOrderInvoicePack(showPack);

@defineDocumentPackSku(userInvoice, sku, supplierStock);
@extendFormDocumentPackSku(userInvoice, userInvoice, i);

overChangeQuantityValueSku(UserInvoiceDetail detail) + { 
    IF  packBarcode(sku(detail)) THEN {
        packQuantity(detail) <- quantity(detail)/amountPack(detail);
    }
}
overChangeQuantityValueBatch(UserInvoiceDetail detail) + { 
    IF packBarcode(sku(batch(detail))) THEN {
        packQuantity(detail) <- quantity(detail)/amountPack(detail);
    }
}

// -- Операция
@deriveDocumentOperationProperty(UserInvoice, showPack);

//------------------------------ Расширение формы -----------------------------//

// Фильтры
in (UserInvoice userInvoice, Sku sku)= inCustomer(customer(userInvoice), sku);
EXTEND FORM userInvoice

    FILTERGROUP filter
        FILTER 'С остатком ' prevCurrentBalance(ks, i) OR isCharge(ks) 'F10' DEFAULT
        FILTER 'В документе ' quantityUserInvoiceDetail(ks, i) 'F9'

    FILTERGROUP filter2
        FILTER 'С продажей ' in(i, ks) 'F8'
        FILTER 'В прайсе' ledgerPrice(ks, i) 'F7'
;

in (UserInvoice userInvoice, Batch batch)= inCustomer(customer(userInvoice), sku(batch));
EXTEND FORM userInvoice

    FILTERGROUP filter3
        FILTER 'С остатком ' prevCurrentBalance(b, i) 'F10' DEFAULT
        FILTER 'В документе ' quantityUserInvoiceDetail(b,i) 'F9'

    FILTERGROUP filter4
        FILTER 'С продажей ' in(i,b) 'F8'
        FILTER 'В прайсе' ledgerPrice(b, i) 'F7'

;

// Резервы
@extendFormDocumentSkuOrderLedger(invoice, userInvoice, i, supplierStock);
@extendFormDocumentSkuOrderLedgerAll(userInvoice, userInvoice, i);

@extendFormDocumentBatchOrderLedger(userInvoice, userInvoice, i, supplierStock);
@extendFormDocumentBatchOrderLedgerAll(userInvoice, userInvoice, i);

// --------------------------- Проведение по регистру продаж ------------------------------------ //
@implementSaleLedger(Invoice, sku, supplierStock);

overQuantity = ABSTRACT NUMERIC[16,5] (InvoiceDetail);
overInvoiceSum = ABSTRACT NUMERIC[18,4] (InvoiceDetail);

operation (InvoiceDetail ledger) += operation(ledger);
quantity[SaleLedger] (InvoiceDetail ledger) += OVERRIDE overQuantity(ledger),-quantity(ledger);
VAT[SaleLedger] (InvoiceDetail ledger) += VAT(ledger);
sum[SaleLedger] (InvoiceDetail ledger) += OVERRIDE overInvoiceSum(ledger),-invoiceSum(ledger);
price[SaleLedger] (InvoiceDetail ledger) += invoicePrice(ledger);
customer (InvoiceDetail ledger) += customer(ledger);
customerStock (InvoiceDetail ledger) += customerStock(ledger);
skip (InvoiceDetail ledger) += WHEN ledger IS SaleReturn.InvoiceDetail THEN skipSaleLedger(operation(ledger));
numberDocument (InvoiceDetail ledger) += number(ledger);

//-- Запрет на изменение документа другим пользователем
@defineOperationChangesDocument(invoice, UserInvoice, preventChangesDocument, created);

overShowEdit (Invoice i) += showEditDeleteUser(i) AND isOpened(i) AND NOT skipShowEdit(i);
overShowDelete (UserInvoice i) += showEditDeleteUser(i) AND isUserOpened(i)AND NOT skipShowDelete(i); 

skipClose (UserInvoice i) += WHEN preventCloseDocument(currentUser(), operation(i)) THEN TRUE;

NAVIGATOR {
    saleReturnNavigator {
        NEW invoices;
    }
}

CONSTRAINT  isPosted(UserInvoice i) AND isContract(operation(i)) AND NOT contractSku[Invoice](i) 
    MESSAGE 'Для накладной (продажа-возврат) обязан быть задан договор';
    
disableShowBatch(Invoice i) += disableShowBatch(operation(i));

skipSaleBatch = ABSTRACT VALUE BOOLEAN (UserInvoiceDetail);

CONSTRAINT isPosted(UserInvoiceDetail d) AND isSaleReturnBatch(operation(d)) AND sku(d) AND NOT skipSaleBatch(d) AND NOT batch(d) 
    MESSAGE 'Для строки накладной (продажа-возврат) должна быть задана партия'; 
    
CONSTRAINT isPosted(Invoice i) AND isCharLength(operation(i)) AND NOT (length(number(i)) == 7 AND onlyDigits(number(i)))
    MESSAGE 'У накладной (продажа-возврат) номер должен состоять из семи цифр';

@defineMergeDocumentDetails(invoice, userInvoice, i);