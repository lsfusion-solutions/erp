MODULE SaleInvoice;

REQUIRE SaleOrder, OrderInvoice, StockTax, SaleOperation, SkuList, InvoiceContract;

NAMESPACE Sale;

//----------------------------------------------- Накладная ---------------------------------------------------//
@defineInvoice(' (продажа)', supplier, company, customer, , Sale, s);
@extendFormFilterAccessStock(Invoice, i, invoices, supplierStock, company);

INDEX customer(InvoiceDetail d), supplier(d), sku(d);

out(Invoice i) += i IS Invoice;

idCustomerStock(Invoice invoice) = id(customerStock(invoice));
idSupplierStock(Invoice invoice) = id(supplierStock(invoice));

// Добавляем партии
@defineInvoiceBatch(supplier, , Sale, ' (продажа)', s);
batch[Invoice.InvoiceDetail](InvoiceDetail d) += batch(d);
@defineInvoiceBatchDialogStock(supplierStock, Out);

@defineInvoiceDestination(supplier, customer);
@defineInvoiceStockDestination(supplierStock, customerStock);

@defineDocumentSkuStockSupplier (userInvoice, userInvoice, i);
@defineDocumentBatchStockSupplier(userInvoice, userInvoice, i);

// условия оплаты
@defineInvoicePaymentCondition(' (продажа)');

//-------------------------- Операции ----------------------------//

@defineDocumentOperationContainer(invoice, i);
@deriveDocumentDetailPricePriceListTypeVATBatchCustomOperation (userInvoiceDetail);

@defineInvoiceNegativeQuantityConstraint();

CONSTRAINT CHANGED(operation(UserInvoice i)) AND forbidInvoice(operation(i))
    CHECKED BY operation[UserInvoice]
    MESSAGE 'Запрещено вводить накладные по выбранной операции';            

@extendFormFilterRoleAccess(invoice, i, invoices);
@defineDocumentOperationConstraint(invoice, 'накладная (продажа)', Sale);
@defineDocumentOperationPriceListType(userInvoice, 'накладной (продажа)', userInvoice);

@defineDocumentOperationLegalEntity(userInvoice, supplier, 'Поставщик');
@deriveDocumentOperationLegalEntity(userInvoice, supplier, userInvoice);
@defineDocumentOperationLegalEntity(userInvoice, customer, 'Покупатель');
@deriveDocumentOperationLegalEntity(userInvoice, customer, userInvoice);
@defineDocumentOperationStock(userInvoice, supplier, 'Склад поставщика');
@deriveDocumentOperationStock(userInvoice, supplier, userInvoice);
@defineDocumentOperationStock(userInvoice, customer, 'Склад покупателя');
@deriveDocumentOperationStock(userInvoice, customer, userInvoice);

@defineDocumentOperationRole(userInvoice);

operation[Invoice.Invoice](Invoice o) += operation(o);

// Добавляем в копирование инвойсов
overCopy(Invoice s, UserInvoice d) + { 
    operation(d) <- operation(s);
}

@defineOperationFilterProperty(invoice, i, invoices, nameFilterInvoiceCustomUser);
// ---------------------------------------------- Создание инвойса по заказу ---------------------------------- //

notFillPriceInvoiceOrder 'Не использовать цены в накладной из заказа' = DATA BOOLEAN (Operation);
EXTEND FORM operation
    PROPERTIES(o) notFillPriceInvoiceOrder
;

DESIGN operation {
    paramsContainer {
        MOVE PROPERTY(notFillPriceInvoiceOrder(o));
    }
}

@defineOrderInvoice(' (продажа)', supplier);

//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplier(UserInvoice userInvoice) AND NOT isCompany(supplier(userInvoice))
    CHECKED BY supplier[UserInvoice] MESSAGE 'Для накладной выбрана в качестве поставщика организация, не являющаяся компанией: продажа';
CONSTRAINT customer(UserInvoice userInvoice) AND NOT isCustomer(customer(userInvoice))
    CHECKED BY customer[UserInvoice] MESSAGE 'Для накладной выбрана в качестве покупателя организация, не являющаяся покупателем: продажа';
    
CONSTRAINT filterInvoiceSupplier() AND NOT isCompany(filterInvoiceSupplier())
    CHECKED BY filterInvoiceSupplier[] MESSAGE 'Для фильтра в накладной выбрана в качестве поставщика организация, не являющаяся компанией';
CONSTRAINT filterInvoiceSupplierStock() AND NOT isCompany(filterInvoiceSupplierStock())
    CHECKED BY filterInvoiceSupplierStock[] MESSAGE 'Для фильтра в накладной выбран в качестве склада поставщика склад, который не принадлежит компании';     
    
CONSTRAINT filterInvoiceCustomer() AND NOT isCustomer(filterInvoiceCustomer())
    CHECKED BY filterInvoiceCustomer[] MESSAGE 'Для фильтра в накладной выбрана в качестве покупателя организация, не являющаяся покупателем';   
        
CONSTRAINT filterInvoiceSupplier() AND filterInvoiceSupplierStock() AND NOT in(filterInvoiceSupplier(), filterInvoiceSupplierStock())
    CHECKED BY filterInvoiceSupplierStock[] MESSAGE 'Поставщик и склад поставщика в фильтре для накладной не имеют связи';
CONSTRAINT filterInvoiceCustomer() AND filterInvoiceCustomerStock() AND NOT in(filterInvoiceCustomer(), filterInvoiceCustomerStock())
    CHECKED BY filterInvoiceCustomerStock[] MESSAGE 'Покупатель и склад покупателя в фильтре для накладной не имеют связи';      

//------------------------------ Ввод в упаковках -----------------------------//

//skipChangePackQuantity = ABSTRACT CASE BOOLEAN (Sku, UserInvoice);
//skipChangeQuantity = ABSTRACT CASE BOOLEAN (Sku, UserInvoice);

@defineDocumentPack(invoice, i);
packQuantity[Invoice.InvoiceDetail](InvoiceDetail detail) += packQuantity(detail);
DESIGN userInvoice {
    headerExtraParams {
        NEW headerPack {
            caption = 'Упаковка';
            MOVE PROPERTY(showPack(i));
        }
    }
}

@defineOrderInvoicePack(showPack);

@defineDocumentPackSku(userInvoice, sku, supplierStock);
@extendFormDocumentPackSku(userInvoice, userInvoice, i);

overChangeQuantityValueSku(UserInvoiceDetail detail) + { 
    IF packBarcode(sku(detail)) AND NOT skipChangePackQuantity(detail) THEN {
        packQuantity(detail) <- quantity(detail)/amountPack(detail);
    }
}
overChangeQuantityValueBatch(UserInvoiceDetail detail) + { 
    IF packBarcode(sku(batch(detail))) THEN {
        packQuantity(detail) <- quantity(detail)/amountPack(detail);
    }
}

// -- Операция
@deriveDocumentOperationProperty(UserInvoice, showPack);

// ---------------- Проставление партий в инвойсе с использование партий заказа -------- //

useExplicitBatchDetailUserInvoice (Order order) += WHEN order IS Sale.Order THEN TRUE;

//------------------------------ Автоматическое проставление свойств -----------------------------//

@deriveDocumentLegalEntityDefaultStock(UserInvoice, customer, userInvoice);

@defineDocumentLegalEntityStockAccess(UserInvoice, supplier, company, userInvoice);

//------------------------------ Расширение формы -----------------------------//

// Фильтры
in (UserInvoice userInvoice, Sku sku)= inCustomer(customer(userInvoice), sku);
EXTEND FORM userInvoice

    FILTERGROUP filter
        FILTER 'С остатком ' prevCurrentBalance(ks, i) OR isCharge(ks) 'F10' DEFAULT
        FILTER 'В документе ' quantityUserInvoiceDetail(ks, i) 'F9'

    FILTERGROUP filter2
        FILTER 'С продажей ' in(i, ks) 'F8'
        FILTER 'В прайсе' ledgerPrice(ks, i) 'F7'

;
in (UserInvoice userInvoice, Batch batch)= inCustomer(customer(userInvoice), sku(batch));
EXTEND FORM userInvoice

    FILTERGROUP filter3
        FILTER 'С остатком ' prevCurrentBalance(b,i) 'F10' DEFAULT
        FILTER 'В документе ' quantityUserInvoiceDetail(b,i) 'F9'
        FILTER 'С движением за последний месяц' prevDateTime(b,supplierStock(i)) > subtractDay(dateTime(i), 30)
        FILTER 'С движением за последний год' prevDateTime(b,supplierStock(i)) > subtractDay(dateTime(i), 365)
        FILTER 'С движением' prevCountLedger(b,supplierStock(i))

    FILTERGROUP filter4
        FILTER 'С продажей ' in(i,b) 'F8'
        FILTER 'В прайсе' ledgerPrice(b, i) 'F7'

;

// Резервы
@extendFormDocumentSkuOrderLedger(invoice, userInvoice, i, supplierStock);
@extendFormDocumentSkuOrderLedgerAll(userInvoice, userInvoice, i);

@extendFormDocumentBatchOrderLedger(userInvoice, userInvoice, i, supplierStock);
@extendFormDocumentBatchOrderLedgerAll(userInvoice, userInvoice, i);

// --------------- Заполнение кода партии ----------------- //

idBatch 'Код партии' (InvoiceDetail d) = id(batch(d)) CHARWIDTH 10;
idBatch 'Код партии' (UserInvoiceDetail d) = id(batch(d)) CHARWIDTH 10;

@defineMovementIdBatch(invoiceDetail, batch, supplierStock);
@defineBalancesIdBatch(invoiceDetail, batch);
@defineMovementIdBatch(userInvoiceDetail, batch, supplierStock);
@defineBalancesIdBatch(userInvoiceDetail, batch);

EXTEND FORM userInvoice
    PROPERTIES(d) READONLYIF batch(d) SHOWIF showBatch[Invoice](i)
                  idBatch ON CHANGE changeBatch(d) BEFORE nameBatch(d)
;
EXTEND FORM invoices
    PROPERTIES(d) READONLY SHOWIF showBatch(i)
                  idBatch AFTER nameBatch(d)
;

// --------------------------- Проведение по регистру продаж ------------------------------------ //
@implementSaleLedger(Invoice, sku, supplierStock);

overQuantity = ABSTRACT NUMERIC[16,5] (InvoiceDetail);
overInvoiceSum = ABSTRACT NUMERIC[18,4] (InvoiceDetail);

operation (InvoiceDetail ledger) += operation(ledger);
quantity[SaleLedger] (InvoiceDetail ledger) += OVERRIDE overQuantity(ledger), quantity(ledger);
VAT[SaleLedger] (InvoiceDetail ledger) += VAT(ledger);
price[SaleLedger] (InvoiceDetail ledger) += invoicePrice(ledger);
sum[SaleLedger] (InvoiceDetail ledger) += OVERRIDE overInvoiceSum(ledger), invoiceSum(ledger);
customer (InvoiceDetail ledger) += customer(ledger);
customerStock (InvoiceDetail ledger) += customerStock(ledger);
skip (InvoiceDetail ledger) += WHEN ledger IS Sale.InvoiceDetail THEN skipSaleLedger(operation(ledger));
numberDocument (InvoiceDetail ledger) += number(ledger);


//-- Запрет на изменение документа другим пользователем
@defineOperationChangesDocument(invoice, UserInvoice, preventChangesDocument, created);

overShowEdit (Invoice i) += showEditDeleteUser(i) AND isOpened(i) AND NOT skipShowEdit(i);
overShowDelete (UserInvoice i) += showEditDeleteUser(i) AND isUserOpened(i)AND NOT skipShowDelete(i); 

skipClose(UserInvoice i) += WHEN preventCloseDocument(currentUser(), operation(i)) THEN TRUE;

//--

//orderBatch (sku, stock, dateTime) = GROUP MIN order(Batch batch) IF balanceB(batch, Stock stock, DATETIME dateTime)
//                                                   BY skuLedger(batch, stock), stock, dateTime;
//firstOrderBatch(Sku sku, Stock stock, DATETIME dateTime) = orderBatch(sku, stock, dateTime)[2];

firstOrderBatchBalance (Sku sku, Stock stock, NUMERIC[16,5] q) = GROUP LAST Batch batch IF availableQuantity(batch, stock) >= q
                                                   ORDER DESC dateTime(batch), batch
                                                   BY skuLedger(batch, stock) COMPLEX;
prevFirstOrderBatchBalance (Sku sku, Stock stock, NUMERIC[16,5] q) = PREV(firstOrderBatchBalance(sku, stock, q));
//firstOrderBatchBalance(Sku sku, Stock stock, DATETIME dateTime, NUMERIC[16,5] q) = orderBatchBalance(sku, stock, dateTime, q)[2];

fillBatch 'Проставить партию'(UserInvoiceDetail d)   {    
    batch(d) <- prevFirstOrderBatchBalance(sku(d), supplierStock(d), quantity(d)); 
} ASON CONTEXTMENU nameBatch[UserInvoiceDetail];

fillAllBatch 'Проставить партии для всех'(UserInvoiceDetail detail)  { 
   FOR userInvoice(detail) = userInvoice(UserInvoiceDetail d) AND NOT batch(d) AND Stock stock = supplierStock(d) NOINLINE (stock) DO
        batch(d) <- prevFirstOrderBatchBalance(sku(d), stock, quantity(d)); 
} ASON CONTEXTMENU nameBatch[UserInvoiceDetail];

NAVIGATOR {
    saleSaleNavigator {
        NEW invoices;
    }
}
   
CONSTRAINT (CHANGED(isPosted(UserInvoice i)) OR CHANGED (operation(i)) OR CHANGED (contractSku(i))) AND isPosted(i) AND isContract(operation(i)) AND NOT contractSku(i) 
    MESSAGE 'Для накладной (продажа) обязан быть задан договор';      
    
disableShowBatch(Invoice i) += disableShowBatch(operation(i));

skipSalePrice = ABSTRACT BOOLEAN (UserInvoiceDetail);
CONSTRAINT (CHANGED(isPosted(UserInvoiceDetail d)) OR CHANGED(operation(d)) OR CHANGED(price(d))) AND isPosted(d) AND isPrice(operation(d)) AND NOT price(d) AND NOT skipSalePrice(d)
    MESSAGE 'Для строки накладная (продажа) должна быть задана цена'; 
                    
skipSaleBatch = ABSTRACT VALUE BOOLEAN (UserInvoiceDetail);

CONSTRAINT (CHANGED(isPosted(UserInvoiceDetail d)) OR CHANGED(operation(d)) OR CHANGED(sku(d)) OR CHANGED(batch(d))) AND
    isPosted(d) AND isSaleBatch(operation(d)) AND sku(d) AND NOT batch(d) AND NOT skipSaleBatch(d)
        MESSAGE 'Для строки накладной (продажа) должна быть задана партия'; 
 
 skipNumberCheck = ABSTRACT BOOLEAN (Invoice); 
    
CONSTRAINT (CHANGED(isPosted(Invoice i)) OR CHANGED(operation(i)) OR CHANGED(number(i))) AND 
    isPosted(i) AND isCharLength(operation(i)) AND NOT (length(number(i)) == 7 AND onlyDigits(number(i))) AND NOT skipNumberCheck(i)
        MESSAGE 'У накладной (продажа) номер должен состоять из семи цифр';
    
CONSTRAINT (CHANGED(sum(UserInvoiceDetail d)) OR CHANGED(VATSum(d)) OR CHANGED(invoiceSum(d)) OR CHANGED(operation(d)) OR CHANGED(isPosted(d))) AND
    isPosted(d) AND abs(invoiceSum(d) (-) sum(d) (-) VATSum(d)) > invoiceSumDeviation(operation(d)) 
        MESSAGE 'Отклонение Суммы с НДС превышает допустимое';

CONSTRAINT (CHANGED(sum(UserInvoiceDetail d)) OR CHANGED (quantity(d)) OR CHANGED (price(d)) OR CHANGED(operation(d)) OR CHANGED (isPosted(d))) AND
    isPosted(d) AND abs(sum(d) (-) (OVERRIDE quantity(d), 0.0) * (OVERRIDE price(d), 0.0)) > invoiceSumDeviation(operation(d)) 
        MESSAGE 'Отклонение Суммы превышает допустимое';

CONSTRAINT (CHANGED(isPosted(UserInvoice i)) OR CHANGED(series(i)) OR CHANGED (operation(i))) AND isSeriesInvoices(operation(i)) AND isPosted(i) AND NOT series(i) AND NOT skipNumberCheck(i)
        MESSAGE 'Для накладной должна быть задана серия';

@defineMergeDocumentDetails(invoice, userInvoice, i);
