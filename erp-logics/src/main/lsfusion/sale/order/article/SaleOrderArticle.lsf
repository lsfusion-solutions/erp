MODULE SaleOrderArticle;

REQUIRE SaleOrder, OrderLedgerArticle;

NAMESPACE Sale;

//------------------------------ Расширение формы (артикул)-----------------------------//

@defineDocumentArticleStock(userOrder, sku, supplier);
//@extendFormDocumentArticleStockCustom(userOrder, userOrder, o, supplier, supplierStock);

CLASS RowType 'Тип' {
    balanceSupplier 'Остаток скл. пост-ка',
    inDocument 'В документе',
    balanceCustomer 'Остаток скл. пок-ля'
}
TABLE rowType(RowType);

name 'Тип' (RowType t) = staticCaption(t) IF t IS RowType CHARWIDTH 20;  

dataOrder 'Порядок' = DATA INTEGER (RowType);
defaultOrder 'Порядок' = ABSTRACT CASE INTEGER (RowType);
order 'Порядок' (RowType ty)= OVERRIDE dataOrder(ty), defaultOrder(ty) MATERIALIZED;  

defaultOrder(RowType ty) += WHEN ty == RowType.balanceSupplier  THEN 1; 
defaultOrder(RowType ty) += WHEN ty == RowType.inDocument  THEN 3;
defaultOrder(RowType ty) += WHEN ty == RowType.balanceCustomer  THEN 4;

prevCurrentBalanceCustomer(Article ar, Color co, Size si, UserOrder o)= prevCurrentBalance(ar, co, si, customerStock(o));

quantitySupplier = ABSTRACT CASE NUMERIC[14,3] (Article,Color,Size,UserOrder,Stock, RowType);

quantitySupplier (Article ar,Color co,Size si,UserOrder o,Stock stk,RowType ty) +=  
                                          WHEN ty == RowType.balanceSupplier AND o IS UserOrder AND ar IS Article AND co IS Color AND si IS Size AND stk IS Stock THEN NUMERIC[14,3](prevCurrentBalance(ar, co, si, stk))
                                          ;
quantitySupplier (Article ar,Color co,Size si,UserOrder o,Stock stk,RowType ty) +=  
                                          WHEN ty == RowType.inDocument AND o IS UserOrder AND ar IS Article AND co IS Color AND si IS Size AND stk IS Stock THEN NUMERIC[14,3](quantitySupplier(ar,co,si,o,stk))
                                          ;
quantitySupplier (Article ar,Color co,Size si,UserOrder o,Stock stk,RowType ty) +=  
                                          WHEN ty == RowType.balanceCustomer AND stk IS Stock AND o IS UserOrder AND ar IS Article AND co IS Color AND si IS Size THEN NUMERIC[14,3](prevCurrentBalanceCustomer(ar, co, si, o))
                                          ;                                          

changeQuantity(Article article, Color color, Size size, UserOrder userOrder, Stock stock, RowType type)  { 
    IF type == RowType.inDocument THEN { 
        INPUT n = NUMERIC[16,5] DO
            changeQuantityValue(article, color, size, userOrder, stock, n);
    }               
}

backgroundQuantity(Article article, Color color, Size size, UserOrder userOrder, Stock stock, RowType type) = 
    IF type == RowType.inDocument THEN 
        IF quantitySupplier(article, color, size, userOrder, stock) 
                AND NOT (quantitySupplier(article, color, size, userOrder, stock) <= prevCurrentBalance(article, color, size, stock)) THEN
            RGB(255,128,128) 
        ELSE
            RGB(204,255,204)
    ;

background 'Цвет' (RowType type) = RGB(204,255,204) IF  type == RowType.inDocument;

currentBalanceCustomer 'Текущий остаток (пок-ля)' (Article article, UserOrder order )=  prevCurrentBalance(article, customerStock(order));

EXTEND FORM userOrder

    OBJECTS sta=(stk=Stock, ar=Article)
    PROPERTIES READONLY id(ar) SHOWIF showIDs(), caption(ar), name(stk) SHOWIF notSupplierStock(o), image(ar) PANEL 
    PROPERTIES READONLY prevCurrentBalance(ar,stk)
    FILTERS           isParent(sk, ar),
                      (stk == ts AND sg IS StockGroup OR isParent(sg, stk) AND NOT ts OR stk IS Stock AND NOT sg AND NOT ts) AND NOT supplierStock(o) OR
                      stk == supplierStock(o) AND NOT sg AND NOT ts,
                      legalEntity(stk) == supplier(o),
                      active(stk)
    ORDERS          id(ar), name(stk)

    OBJECTS si=Size
    PROPERTIES(si) name
    FILTERS count(si,ar)

    OBJECTS cor=(co=Color, ty=RowType) 
    PROPERTIES(co) READONLY BACKGROUND background(ty) id SHOWIF showIDs(), name
    PROPERTIES(ty) READONLY BACKGROUND background(ty) name 
    FILTERS count(co,ar)

    PROPERTIES(ar,co,si,o,stk,ty) quantitySupplier ON CHANGE changeQuantity(ar,co,si,o,stk,ty)
                                      COLUMNS (si) HEADER nameQuantity(si) BACKGROUND backgroundQuantity(ar,co,si,o,stk,ty)

    PROPERTIES(ty)  order
    ORDERS name(co), name(si), order(ty)
    
    FILTERGROUP balance FILTER 'С остатком скл. пост-ка' prevCurrentBalance(ar,st) 'ctrl F6'   
                        FILTER 'С остатком скл. пок-ля' currentBalanceCustomer(ar,o) 'ctrl F7' 
                        FILTER 'С остатком' prevCurrentBalance(ar,st) OR currentBalanceCustomer(ar,o) 'ctrl F8' DEFAULT    
;

DESIGN userOrder {
    skuSelectPane {
        tabbed = TRUE;
        NEW articleContainer {
            caption = 'Артикулы';
            type = CONTAINERV;
            NEW articleTop {
                fill = 1;
                type = SPLITV;
                NEW topArticle {
                    fill = 1;
                    type = SPLITH;
                    MOVE BOX(sta) {caption = 'Артикул';fill = 3;}
                    NEW imageBox {
                        fill = 2;
                        caption = 'Изображение';                     
                        MOVE PROPERTY(image(ar)) {
                            caption = '';
                            fill = 1;
                        }
                    } 
                }    
                MOVE BOX(cor);
            }
            REMOVE BOX(si);
        }
    }
    PROPERTY(prevCurrentBalance(ar,stk)) { caption = 'Текущий остаток (пост-ка)'; background = #FFEEEE; } 
}

// Реализация по складу, артикулу, цвету, размеру за период
quantitySold 'Продано за интервал (кол-во)' (article, color, size, Stock stock, DATE dateFrom, DATE dateTo) = GROUP SUM
        quantitySold(Item sku, stock, DATE date) IF date >= dateFrom AND date <= dateTo
        BY article(sku), calcColor(sku), calcSize(sku);
        
quantitySoldOneWeek 'Продано за последнюю неделю (кол-во)' (Article article, Color color, Size size, UserOrder order)= quantitySold(article, color, size, customerStock(order), subtract(date(order),7), date(order));        
quantitySoldTwoWeek 'Продано за предпоследнюю неделю (кол-во)' (Article article, Color color, Size size, UserOrder order)= quantitySold(article, color, size, customerStock(order), subtract(date(order),14), subtract(date(order),7));        

//quantitySoldArticleStockDateFromTo 'Продано за интервал (кол-во)' (article, stock, dateFrom, dateTo) = GROUP SUM
//        quantitySoldSkuStockDate(sku, stock, date) IF date >= dateFrom AND date <= dateTo
//        BY articleItem(sku), stock, dateFrom, dateTo;

EXTEND CLASS RowType { selling7 'Реал-ия скл. пок-ля последняя нед.' }
quantitySupplier (Article ar,Color co,Size si,UserOrder o,Stock stk, RowType ty) += 
    WHEN ty ==  RowType.selling7 AND stk IS Stock AND o IS UserOrder AND ar IS Article AND co IS Color AND si IS Size 
        THEN NUMERIC[14,3](quantitySoldOneWeek(ar,co,si,o))
    ;     

//-- 
EXTEND CLASS RowType { selling14 'Реал-ия скл. пок-ля предпоследняя нед.' }
quantitySupplier (Article ar,Color co,Size si,UserOrder o,Stock stk, RowType ty) += 
    WHEN ty ==  RowType.selling14 AND stk IS Stock AND o IS UserOrder AND ar IS Article AND co IS Color AND si IS Size
        THEN NUMERIC[14,3](quantitySoldTwoWeek(ar,co,si,o))
    ; 
defaultOrder(RowType ty) += WHEN ty == RowType.selling7  THEN 5; 
defaultOrder(RowType ty) += WHEN ty == RowType.selling14  THEN 6;

@extendFormDocumentArticleStockOrderLedger(userOrder);