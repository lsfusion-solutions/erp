MODULE SaleReturnOrder;

REQUIRE Order, SaleShipment, SaleOperation, SalePack;

PRIORITY Sale, Operation;

NAMESPACE SaleReturn;

@defineOrder(' (продажа-возврат)', supplier, supplier, company, customer, company, return, SaleReturn, sr);
@extendFormFilterAccessStock(Order, o, orders, supplierStock, company);

externalStock (Order o) += customerStock(o);

in(Order o) += o IS Order;
isReturn(Order o) += o IS Order;

@defineOrderBatch(supplier, supplier, sr);
@defineOrderBatchDialog();

@implementOrderDestination(customer, supplier);

@defineDocumentSkuStockSupplier (userOrder, userOrder, o);
@defineDocumentBatchStockSupplier(userOrder, userOrder, o);

//----------------------------------------------- Операции -----------------------------------------------------//

@defineDocumentOperationContainer(order, o, overName) ;
@deriveDocumentDetailPricePriceListTypeVATBatchCustomOperation (userOrderDetail);
@extendFormFilterRoleAccess(order, o, orders);
@defineDocumentOperationConstraint(order, 'заказ (продажа-возврат)', SaleReturn);
operation[Order.Order](Order order) += operation(order);
@defineDocumentOperationPriceListType(userOrder, 'заказа (продажа-возврат)', userOrder, return);

@defineDocumentOperationLegalEntity(userOrder, supplier, 'Поставщик');
@deriveDocumentOperationLegalEntity(userOrder, supplier, userOrder);
@defineDocumentOperationLegalEntity(userOrder, customer, 'Покупатель');
@deriveDocumentOperationLegalEntity(userOrder, customer, userOrder);
@defineDocumentOperationStock(userOrder, supplier, 'Склад поставщика');
@deriveDocumentOperationStock(userOrder, supplier, userOrder);
@defineDocumentOperationStock(userOrder, customer, 'Склад покупателя');
@deriveDocumentOperationStock(userOrder, customer, userOrder);

@defineDocumentOperationRole(userOrder);

overCopy(Order s, UserOrder d) + { 
    operation(d) <- operation(s);
}
@defineReturnOperationFilterProperty(order, o, orders, nameFilterOrderCustomUser);

@deriveShipmentDate();

//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplier(UserOrder userOrder) AND NOT isCompany(supplier(userOrder))
    CHECKED BY supplier[UserOrder] MESSAGE 'Для заказа выбрано в качестве поставщика организация, не являющаяся компанией';
CONSTRAINT customer(UserOrder userOrder) AND NOT isCustomer(customer(userOrder))
    CHECKED BY customer[UserOrder] MESSAGE 'Для заказа выбрано в качестве покупателя организация, не являющаяся покупателем';
    
CONSTRAINT filterOrderSupplier() AND NOT isCompany(filterOrderSupplier())
    CHECKED BY filterOrderSupplier[] MESSAGE 'Для фильтра в заказе выбрана в качестве поставщика организация, не являющаяся компанией';
CONSTRAINT filterOrderSupplierStock() AND NOT isCompany(filterOrderSupplierStock())
    CHECKED BY filterOrderSupplierStock[] MESSAGE 'Для фильтра в заказе выбран в качестве склада поставщика склад, который не принадлежит компании';          
CONSTRAINT filterOrderCustomer() AND NOT isCustomer(filterOrderCustomer())
    CHECKED BY filterOrderCustomer[] MESSAGE 'Для фильтра в заказе выбрана в качестве покупателя организация, не являющаяся покупателем';       

CONSTRAINT filterOrderSupplier() AND filterOrderSupplierStock() AND NOT in(filterOrderSupplier(), filterOrderSupplierStock())
    CHECKED BY filterOrderSupplierStock[]   MESSAGE 'Поставщик и склад поставщика в фильтре для заказа не имеют связи';
CONSTRAINT filterOrderCustomer() AND filterOrderCustomerStock() AND NOT in(filterOrderCustomer(), filterOrderCustomerStock())
    CHECKED BY filterOrderCustomerStock[] MESSAGE 'Покупатель и склад покупателя в фильтре для заказа не имеют связи';

//------------------------------ Автоматическое проставление свойств -----------------------------//

@deriveDocumentLegalEntityDefaultStock(UserOrder, customer, userOrder);

@defineDocumentLegalEntityStockAccess(UserOrder, supplier, company, userOrder);

//------------------------------ Ввод в упаковках -----------------------------//

@defineDocumentPack(order, o);
packQuantity[Order.OrderDetail](OrderDetail detail) += packQuantity(detail);
DESIGN userOrder {
    headerExtraParams {
        NEW headerPack {
            caption = 'Упаковка';
            MOVE PROPERTY(showPack(o));
        }
    }
}

@defineDocumentPackSkuStock(userOrder, sku, supplier);
@extendFormDocumentPackSkuStock(userOrder, userOrder, o, supplier);

overChangeQuantityValueSku(UserOrderDetail detail) + { 
    IF  packBarcode(sku(detail)) THEN {
        packQuantity(detail) <- quantity(detail)/amountPack(detail);
    }
}

@deriveDocumentOperationProperty(UserOrder, showPack);

//------------------------------ Расширение формы -----------------------------//

// Фильтры
in (UserOrder userOrder, Sku sku) = inCustomer(customer(userOrder), sku);
EXTEND FORM userOrder

    FILTERGROUP filter
        FILTER 'С остатком ' prevCurrentBalance(ks, st) 'F10' //DEFAULT
        FILTER 'В заказе ' quantitySupplier(ks, o, st) 'F9'

    FILTERGROUP filter1
        FILTER 'С продажей' in(o, ks) 'F8'
        FILTER 'В прайсе' price(ks, st, o) 'F7'

;

in (UserOrder userOrder, Batch batch)= inCustomer(customer(userOrder), sku(batch));
EXTEND FORM userOrder

    FILTERGROUP filter3
        FILTER 'С остатком ' prevCurrentBalance(b, st) 'F10' DEFAULT
        FILTER 'В документе ' quantitySupplier(b, o, st) 'F9'

    FILTERGROUP filter4
        FILTER 'С продажей ' in(o,b) 'F8'
        FILTER 'В прайсе' ledgerPrice(b, st, o) 'F7'
;

// Резервы
@extendFormDocumentSkuStockOrderLedger(order, userOrder, o, supplierStock);
@extendFormDocumentSkuStockOrderLedgerAll(userOrder, userOrder, o);

@extendFormDocumentBatchStockOrderLedger(userOrder, userOrder, o);
@extendFormDocumentBatchStockOrderLedgerAll(userOrder, userOrder, o);

//--------------------- Проводим по регистру резерва ------------------//
@implementPurchaseOrderLedger(Order, sku, shipmentDateTime, supplierStock, customer);
operation[OrderLedger](OrderDetail ledger) += operation(ledger);
show[OrderLedger](OrderDetail ledger) + { show[UserOrderDetail](ledger);};

note[OrderLedger](OrderDetail ledger) += note(order(ledger));

//-- Запрет на изменение документа другим пользователем
@defineOperationChangesDocument(order, UserOrder, preventChangesDocument, created);

overShowEdit (Order i) += showEditDeleteUser(i) AND isOpened(i) AND NOT skipShowEdit(i);
overShowDelete (UserOrder i) += showEditDeleteUser(i) AND isUserOpened(i) AND NOT skipShowEdit(i); 

NAVIGATOR {
    saleReturnNavigator {
        NEW orders;
    }
}

CONSTRAINT  isPosted(UserOrder i) AND isContract(operation(i)) AND NOT contractSku[Order](i) 
    MESSAGE 'Для заказа (продажа-возврат) обязан быть задан договор';  
disableShowBatch(Order o) += disableShowBatch(operation(o));

CONSTRAINT noFractQuantity() AND (CHANGED (sku(UserOrderDetail d)) OR CHANGED (quantity(d)))
    AND noDivisibleUOM(UOM(sku(d))) AND INTEGER(quantity(d)) != quantity(d)
    MESSAGE 'Количество должно быть целым';