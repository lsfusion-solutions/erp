MODULE SaleOrder;

REQUIRE Order, SaleOperation, SalePack, SaleLedger, PurchaseLedger;

NAMESPACE Sale;

@defineOrder(' (продажа)', supplier, supplier, company, customer, company, , Sale, s);
@extendFormFilterAccessStock(Order, o, orders, supplierStock, company);

externalStock (Order o) += customerStock(o);

out(Order o) += o IS Order;

@defineOrderBatch(supplier, supplier, s);
@defineOrderBatchDialogStock(supplierStock, Out);

@implementOrderDestination(supplier, customer);

@defineDocumentSkuStockSupplier (userOrder, userOrder, o);
@defineDocumentBatchStockSupplier(userOrder, userOrder, o);

//использовать цены склада покупателя
usePriceCustomerStock 'Использовать цены для склада покупателя' = ABSTRACT BOOLEAN (Order);
usePriceCustomerStock 'Использовать цены для склада покупателя'  = DATA BOOLEAN (UserOrder);

usePriceCustomerStock(UserOrder order) += usePriceCustomerStock(order);

EXTEND FORM userOrder
    PROPERTIES (o) usePriceCustomerStock         
;          

DESIGN userOrder {
    headerExtraParams{
        NEW prices {
            caption = 'Цены';
            MOVE PROPERTY(usePriceCustomerStock(o));
        }         
    }
}

overPriceStockUser(UserOrder o) += WHEN usePriceCustomerStock(o) THEN customerStock(o); 

//----------------------------------------------- Операции -----------------------------------------------------//

@defineDocumentOperationContainer(order, o);
@deriveDocumentDetailPricePriceListTypeVATBatchCustomOperation (userOrderDetail);

@extendFormFilterRoleAccess(order, o, orders);
@defineDocumentOperationConstraint(order, 'заказ (продажа)', Sale);
operation[Order.Order](Order order) += operation(order);
@defineDocumentOperationPriceListType(userOrder, 'заказа (продажа)', userOrder);

@defineDocumentOperationLegalEntity(userOrder, supplier, 'Поставщик');
@deriveDocumentOperationLegalEntity(userOrder, supplier, userOrder);
@defineDocumentOperationLegalEntity(userOrder, customer, 'Покупатель');
@deriveDocumentOperationLegalEntity(userOrder, customer, userOrder);
@defineDocumentOperationStock(userOrder, supplier, 'Склад поставщика');
@deriveDocumentOperationStock(userOrder, supplier, userOrder);
@defineDocumentOperationStock(userOrder, customer, 'Склад покупателя');
@deriveDocumentOperationStock(userOrder, customer, userOrder);

@defineDocumentOperationRole(userOrder);


overCopy(Order s, UserOrder d) + { 
    operation(d) <- operation(s);
}
@defineOperationFilterProperty(order, o, orders, nameFilterOrderCustomUser);

@defineOperationProperty(usePriceCustomerStock, 'Использовать цены для склада покупателя', paramsContainer);
@deriveDocumentOperationProperty(userOrder, usePriceCustomerStock);

@deriveShipmentDate();

// ----------------------------- Автоматическая отсылка почты ---------------------------------- //

FORM emailOrder 'Заказ'
    OBJECTS o = Order PANEL SUBREPORT
    PROPERTIES (o) number, series, nameSupplier, nameCustomer, nameSupplierStock, nameCustomerStock,
                   date, time, nameCurrency, note,
                   countOrderDetail, quantityOrderDetail, sumOrderDetail,
                   VATSumOrderDetail, invoiceSumOrderDetail, shipmentDate

    OBJECTS d = OrderDetail
    PROPERTIES (d) index, idBarcodeSku, nameSku, shortNameUOMSku,
                   quantity, price,  sum, valueVAT,
                   VATSum, invoiceSum

    FILTERS order(d) == o
;

emailCustomer 'Выслать подтвержденный заказ покупателю' (Order order)  { 
    
    LOCAL file = FILE ();
    PRINT emailOrder OBJECTS o=order PDF TO file;
    
    LOCAL bodyFile = FILE ();
    PRINT emailOrder OBJECTS o=order HTML TO bodyFile;
    
    EMAIL
    FROM email(supplier(order))
    SUBJECT 'Подтверждение заказа №' + seriesNumber(order) + ' от '  + date(order)
    TO email(customer(order))
    BODY bodyFile()
    ATTACH file()
           NAME 'Заказ №' + seriesNumber(order) + ' от ' + date(order)
; }

//WHEN isPostedOrder(order) AND emailLegalEntity(customerOrder(order)) DO EXEC emailCustomerOrder(order);

//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplier(UserOrder userOrder) AND NOT isCompany(supplier(userOrder))
    CHECKED BY supplier[UserOrder] MESSAGE 'Для заказа выбрана в качестве поставщика организация, не являющаяся компанией';
CONSTRAINT customer(UserOrder userOrder) AND NOT isCustomer(customer(userOrder))
    CHECKED BY customer[UserOrder] MESSAGE 'Для заказа выбрана в качестве покупателя организация, не являющаяся покупателем';
    
CONSTRAINT filterOrderSupplier() AND NOT isCompany(filterOrderSupplier())
    CHECKED BY filterOrderSupplier[] MESSAGE 'Для фильтра в заказе выбрана в качестве поставщика организация, не являющаяся компанией';
CONSTRAINT filterOrderSupplierStock() AND NOT isCompany(filterOrderSupplierStock())
    CHECKED BY filterOrderSupplierStock[] MESSAGE 'Для фильтра в заказе выбран в качестве склада поставщика склад, который не принадлежит компании';         
CONSTRAINT filterOrderCustomer() AND NOT isCustomer(filterOrderCustomer())
    CHECKED BY filterOrderCustomer[] MESSAGE 'Для фильтра в заказе выбрана в качестве покупателя организация, не являющаяся покупателем';  
      
CONSTRAINT filterOrderSupplier() AND filterOrderSupplierStock() AND NOT in(filterOrderSupplier(), filterOrderSupplierStock())
    CHECKED BY filterOrderSupplierStock[]   MESSAGE 'Поставщик и склад поставщика в фильтре для заказа не имеют связи';
CONSTRAINT filterOrderCustomer() AND filterOrderCustomerStock() AND NOT in(filterOrderCustomer(), filterOrderCustomerStock())
    CHECKED BY filterOrderCustomerStock[] MESSAGE 'Покупатель и склад покупателя в фильтре для заказа не имеют связи';      

//------------------------------ Автоматическое проставление свойств -----------------------------//

@deriveDocumentLegalEntityDefaultStock(UserOrder, customer, userOrder);

@defineDocumentLegalEntityStockAccess(UserOrder, supplier, company, userOrder);

//------------------------------ Ввод в упаковках -----------------------------//

@defineDocumentPack(order, o);
packQuantity[Order.OrderDetail](OrderDetail detail) += packQuantity(detail);
DESIGN userOrder {
    headerExtraParams {
        NEW headerPack {
            caption = 'Упаковка';
            MOVE PROPERTY(showPack(o));
        }
    }
}

@defineDocumentPackSkuStock(userOrder, sku, supplier);
@extendFormDocumentPackSkuStock(userOrder, userOrder, o, supplier);

overChangeQuantityValueSku(UserOrderDetail detail) + { 
    IF packBarcode(sku(detail)) AND NOT skipChangePackQuantity(detail) THEN {
        packQuantity(detail) <- quantity(detail)/amountPack(detail);
    }
}

@deriveDocumentOperationProperty(UserOrder, showPack);

//------------------------------ Расширение формы -----------------------------//

// Фильтры
in (UserOrder userOrder, Sku sku)= inCustomer(customer(userOrder), sku);
EXTEND FORM userOrder

    FILTERGROUP filter
        FILTER 'С остатком ' prevCurrentBalance(ks, st) OR isCharge(ks) OR quantitySupplier(ks, o, st) 'F10' DEFAULT
        FILTER 'В заказе ' quantitySupplier(ks, o, st) 'F9'

    FILTERGROUP filter1
        FILTER 'С продажей' in(o, ks) 'F8'
        FILTER 'В прайсе' ledgerPrice(ks, st, o) 'F7'
;

in (UserOrder userOrder, Batch batch)= inCustomer(customer(userOrder), sku(batch));
EXTEND FORM userOrder

    FILTERGROUP filter3
        FILTER 'С остатком ' prevCurrentBalance(b, sto) OR quantitySupplier(b, o, sto) 'F10' DEFAULT
        FILTER 'В документе ' quantitySupplier(b, o, sto) 'F9'
        
    FILTERGROUP filter4
        FILTER 'С продажей ' in(o, b) 'F8'
        FILTER 'В прайсе' ledgerPrice(b, sto, o) 'F7'
;

// Резервы
@extendFormDocumentSkuStockOrderLedger(order, userOrder, o, supplierStock);
@extendFormDocumentSkuStockOrderLedgerAll(userOrder, userOrder, o);

@extendFormDocumentBatchStockOrderLedger(userOrder, userOrder, o);
@extendFormDocumentBatchStockOrderLedgerAll(userOrder, userOrder, o);

//--------------------- Проводим по регистру резерва ------------------//
@implementSaleOrderLedger(Order, sku, shipmentDateTime, supplierStock, customer);
operation[OrderLedger](OrderDetail ledger) += operation(ledger);
show[OrderLedger](OrderDetail ledger) + { show[UserOrderDetail](ledger);}; //-- пока только от userOrder (не учитываем агрегации)

note[OrderLedger](OrderDetail ledger) += note(order(ledger));

//-- Запрет на изменение документа другим пользователем
@defineOperationChangesDocument(order, UserOrder, preventChangesDocument, created);

overShowEdit (Order i) += showEditDeleteUser(i) AND isOpened(i) AND NOT skipShowEdit(i);
overShowDelete (UserOrder i) += showEditDeleteUser(i) AND isUserOpened(i) AND NOT skipShowEdit(i); 

fillBatch 'Проставить партию'(UserOrderDetail d)   {    
    batch(d) <- prevFirstOrderBatchAvailable(sku(d), supplierStock(d), quantity(d)) 
        WHERE NOT batch(d);
} ASON CONTEXTMENU nameBatch[UserOrderDetail];

fillAllBatch 'Проставить партии для всех'(UserOrderDetail detail)  { 
   FOR userOrder(detail) == userOrder(UserOrderDetail d) DO
       fillBatch(d);
} ASON CONTEXTMENU nameBatch[UserOrderDetail];

NAVIGATOR {
    saleSaleNavigator {
        NEW orders;
    }
}

skipIsContract = ABSTRACT BOOLEAN (UserOrder);
CONSTRAINT  isPosted(UserOrder i) AND isContract(operation(i)) AND NOT skipIsContract(i) AND NOT contractSku[Order](i) 
    MESSAGE 'Для заказа (продажа) обязан быть задан договор';  
disableShowBatch(Order o) += disableShowBatch(operation(o));
skipSalePrice = ABSTRACT VALUE BOOLEAN (UserOrderDetail);
CONSTRAINT  (CHANGED(isPosted(UserOrderDetail d)) OR CHANGED (operation(d))OR CHANGED (price(d))) AND
    isPosted(d) AND isPrice(operation(d)) AND NOT price(d) AND NOT skipSalePrice(d) 
    MESSAGE 'Для строки заказа (продажа) должна быть задана цена';  
    
skipSaleBatch = ABSTRACT VALUE BOOLEAN (UserOrderDetail);
CONSTRAINT (CHANGED(isPosted(UserOrderDetail d)) OR CHANGED (operation(d)) OR CHANGED (sku(d)) OR CHANGED(batch(d)))  AND
    isPosted(d) AND isSaleBatch(operation(d)) AND sku(d) AND NOT batch(d) AND NOT skipSaleBatch(d)
    MESSAGE 'Для строки заказа (продажа) должна быть задана партия'; 
