MODULE SaleLedger;

REQUIRE System, Stock, SkuLedgerTax, EmployeeStock, Sale, PriceRound, StockSkuDocument, SaleOperation;

CLASS ABSTRACT SaleLedger 'Продажа товара';
TABLE saleLedger(SaleLedger) FULL;

dateTime 'Дата/время' (ledger) = ABSTRACT DATETIME (SaleLedger) MATERIALIZED INDEXED;
hour 'Час' (SaleLedger ledger) = extractHour(dateTime(ledger));  
date 'Дата' (SaleLedger ledger) = toDate(dateTime(ledger)) MATERIALIZED;
nameDOW 'День недели' (SaleLedger ledger) = extractDOWName(date(ledger));
nameMonth 'Месяц' (SaleLedger ledger) = extractMonthName(date(ledger));
nameYear 'Год' (SaleLedger ledger) = extractYear(date(ledger));

isPosted 'Проведен' (ledger) = ABSTRACT BOOLEAN (SaleLedger) MATERIALIZED;
show 'Просмотреть'  ABSTRACT MULTI ( SaleLedger) TOOLBAR;

isClosed 'Закрыт' (ledger) = ABSTRACT BOOLEAN (SaleLedger);
skipShowEdit = ABSTRACT BOOLEAN (SaleLedger);
allowedEdit (SaleLedger d) = (NOT isClosed(d) OR allowedEditClosedDocuments(currentUser())) AND NOT skipShowEdit(d);
allowedShow (SaleLedger d) = d IS SaleLedger AND NOT allowedEdit(d);

skip 'Не проводить' (ledger) = ABSTRACT CASE BOOLEAN (SaleLedger) MATERIALIZED; 

active (SaleLedger ledger) = isPosted(ledger) AND NOT skip(ledger);

sku (ledger) = ABSTRACT Sku (SaleLedger) MATERIALIZED;
INDEX sku(SaleLedger ledger), date(ledger);
idSku 'Код SKU' (SaleLedger s) = id(sku(s));
nameSku 'SKU' (SaleLedger ledger) = name(sku(ledger));

canonicalNameSkuGroup 'Группа (полная)' (SaleLedger ledger) = canonicalName[Group](skuGroup(sku(ledger)));
idSkuGroupSku 'Группа' = idSkuGroup(sku(SaleLedger ledger));
nameSkuGroup1Sku 'Категория' = nameSkuGroup1(sku(SaleLedger ledger));
nameSkuGroup2Sku 'Направление' = nameSkuGroup2(sku(SaleLedger ledger));
nameSkuGroup3Sku 'Группа' = nameSkuGroup3(sku(SaleLedger ledger));
nameSkuGroup4Sku 'Подгруппа' = nameSkuGroup4(sku(SaleLedger ledger));
nameSkuGroup5Sku 'Субгруппа' = nameSkuGroup5(sku(SaleLedger ledger));

stock (ledger) = ABSTRACT Stock (SaleLedger) MATERIALIZED;
INDEX stock(SaleLedger ledger), date(ledger);
INDEX stock(SaleLedger ledger), sku(ledger), date(ledger);
idStock 'Склад' (SaleLedger ledger) = id(stock(ledger));
nameStock 'Склад' (SaleLedger ledger) = name(stock(ledger));

operation  (ledger) = ABSTRACT Sale.Operation (SaleLedger) MATERIALIZED;
overNameOperation= ABSTRACT ISTRING[100] (SaleLedger);
nameOperation 'Операция' (SaleLedger ledger) = OVERRIDE overNameOperation(ledger), name(operation(ledger));

description 'Название документа' (ledger) = ABSTRACT STRING[200] (SaleLedger) MATERIALIZED;
numberDocument 'Номер документа' (ledger) = ABSTRACT STRING[48] (SaleLedger) MATERIALIZED;

quantity 'Кол-во' (ledger) = ABSTRACT NUMERIC[16,5] (SaleLedger) MATERIALIZED;

price 'Цена продажи' (ledger) = ABSTRACT NUMERIC[16,4] (SaleLedger);// todo: MATERIALIZED;
sum 'Сумма продажи' (ledger) = ABSTRACT NUMERIC[18,4] (SaleLedger) MATERIALIZED;

discountSum 'Сумма скидки' (d) = ABSTRACT NUMERIC[18,4] (SaleLedger) MATERIALIZED;

costSum 'Себестоимость продажи' (ledger) = ABSTRACT CASE NUMERIC[16,3] (SaleLedger) MATERIALIZED;

customer (ledger) = ABSTRACT LegalEntity (SaleLedger) MATERIALIZED INDEXED;
nameCustomer 'Покупатель' (SaleLedger ledger) = name(customer(ledger));

INDEX date(SaleLedger s), stock(s), customer(s);

customerStock (ledger) = ABSTRACT Stock (SaleLedger) MATERIALIZED INDEXED;
nameCustomerStock 'Склад покупателя' (SaleLedger ledger) = name(customerStock(ledger));

inCustomer 'Кол-во продано' (legalEntity, sku)= GROUP SUM quantity(SaleLedger ledger) IF active(ledger)
    BY customer(ledger), sku(ledger) MATERIALIZED;
prevInCustomer 'Были продажи (пред.)' (LegalEntity legalEntity, Sku sku) = PREV(inCustomer(legalEntity, sku));

sumSold 'Сумма продажи валюта' (TypeExchange typeExchange, SaleLedger saleLedger) = sum(saleLedger)*
    rateOn(typeExchange, currency(stock(saleLedger)), date(saleLedger));

CONSTRAINT quantity(SaleLedger l) == 0 AND active(l) MESSAGE 'ошибка: Количество продажи не должно быть равно нулю';

averagePrice 'Цена продажи (средняя)' (SaleLedger saleLedger) = NUMERIC[16,4](sum(saleLedger) / quantity(saleLedger));
averageDiscountPrice 'Цена продажи (средняя) полная' (SaleLedger saleLedger) = NUMERIC[16,4]((sum(saleLedger) (+) discountSum(saleLedger))/quantity(saleLedger));

averagePriceSold 'Цена продажи (валюта)' (TypeExchange typeExchange, SaleLedger saleLedger)= averagePrice (saleLedger)*
    rateOn(typeExchange, currency(stock(saleLedger)), date(saleLedger));

VAT (ledger) = ABSTRACT Range (SaleLedger) MATERIALIZED;
valueVAT 'НДС, %' (SaleLedger ledger) = valueRate(VAT(ledger), date(ledger)) MATERIALIZED;

sumVAT 'Сумма НДС' (SaleLedger ledger) = ABSTRACT VALUE NUMERIC[18,4] (SaleLedger);
sumVAT (SaleLedger ledger) += NUMERIC[18,4]([ X*Y/(100+Y)](sum(ledger), valueVAT(ledger)));

markupSum 'Надбавка' (SaleLedger ledger) = sum(ledger) (-) sumVAT(ledger) (-) costSum(ledger);

TABLE soldSkuStockDate(Sku, Stock, DATE);

//по складу и SKU
quantitySold (sku, stock, date) = GROUP SUM quantity(SaleLedger ledger) IF active(ledger)
    BY sku(ledger), stock(ledger), date(ledger) MATERIALIZED TABLE soldSkuStockDate;

costSumSold (sku, stock, date) = GROUP SUM costSum(SaleLedger ledger) IF active(ledger)
    BY sku(ledger), stock(ledger), date(ledger) MATERIALIZED TABLE soldSkuStockDate;

markupSumSold (sku, stock, date) = GROUP SUM markupSum(SaleLedger ledger) IF active(ledger)
    BY sku(ledger), stock(ledger), date(ledger) MATERIALIZED TABLE soldSkuStockDate;

sumVATSold (sku, stock, date) = GROUP SUM sumVAT(SaleLedger ledger) IF active(ledger)
    BY sku(ledger), stock(ledger), date(ledger) MATERIALIZED TABLE soldSkuStockDate;

sumSold (sku, stock, date) = GROUP SUM sum(SaleLedger ledger) IF active(ledger)
    BY sku(ledger), stock(ledger), date(ledger) MATERIALIZED TABLE soldSkuStockDate;

//по складу, покупателю и SKU
quantitySold (sku, stock, customer, date) = GROUP SUM quantity(SaleLedger ledger) IF active(ledger)
    BY sku(ledger), stock(ledger), customer(ledger), date(ledger);// MATERIALIZED;

costSumSold (sku, stock, customer, date) = GROUP SUM costSum(SaleLedger ledger) IF active(ledger)
    BY sku(ledger), stock(ledger), customer(ledger), date(ledger);// MATERIALIZED;

markupSumSold (sku, stock, customer, date) = GROUP SUM markupSum(SaleLedger ledger) IF active(ledger)
    BY sku(ledger), stock(ledger), customer(ledger), date(ledger);// MATERIALIZED;
    
discountSumSold (sku, stock, customer, date) = GROUP SUM discountSum(SaleLedger ledger) IF active(ledger)
    BY sku(ledger), stock(ledger), customer(ledger), date(ledger);    

sumVATSold (sku, stock, customer, date) = GROUP SUM sumVAT(SaleLedger ledger) IF active(ledger)
    BY sku(ledger), stock(ledger), customer(ledger), date(ledger);// MATERIALIZED;

sumSold (sku, stock, customer, date) = GROUP SUM sum(SaleLedger ledger) IF active(ledger)
    BY sku(ledger), stock(ledger), customer(ledger), date(ledger);// MATERIALIZED;

extraQuantitySold = ABSTRACT NUMERIC[16,5](Sku,Stock,DATE);
extraSumSold = ABSTRACT NUMERIC[18,4](Sku,Stock,DATE);

//по складу и SKU
quantitySold 'Продано за интервал (кол-во)' (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) = GROUP
        SUM
        quantitySold(sku, stock, DATE date) (+) extraQuantitySold(sku, stock, date) IF date >= dateFrom AND date <= dateTo CHARWIDTH 7;

costSumSold 'Себестоимость проданного за интервал' (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) = GROUP
        SUM
        costSumSold(sku, stock, DATE date) IF date >= dateFrom AND date <= dateTo CHARWIDTH 9;

markupSumSold 'Надбавка проданного за интервал' (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) = GROUP
        SUM
        markupSumSold(sku, stock, DATE date) IF date >= dateFrom AND date <= dateTo CHARWIDTH 9;

sumVATSold 'Сумма НДС проданного за интервал' (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) = GROUP
        SUM
        sumVATSold(sku, stock, DATE date) IF date >= dateFrom AND date <= dateTo CHARWIDTH 8;

sumSold 'Продано за интервал (сумма)' (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) = GROUP
        SUM
        sumSold(sku, stock, DATE date) (+) extraSumSold(sku, stock, date) IF date >= dateFrom AND date <= dateTo CHARWIDTH 9;

//по складу, покупателю и SKU
quantitySold 'Продано за интервал (кол-во)' (Sku sku, Stock stock, LegalEntity customer, DATE dateFrom, DATE dateTo) = GROUP
        SUM
        quantitySold(sku, stock, customer, DATE date) IF date >= dateFrom AND date <= dateTo CHARWIDTH 7;

costSumSold 'Себестоимость проданного за интервал' (Sku sku, Stock stock, LegalEntity customer, DATE dateFrom, DATE dateTo) = GROUP
        SUM
        costSumSold(sku, stock, customer, DATE date) IF date >= dateFrom AND date <= dateTo CHARWIDTH 9;

markupSumSold 'Надбавка проданного за интервал' (Sku sku, Stock stock, LegalEntity customer, DATE dateFrom, DATE dateTo) = GROUP
        SUM
        markupSumSold(sku, stock, customer, DATE date) IF date >= dateFrom AND date <= dateTo CHARWIDTH 9;

sumVATSold 'Сумма НДС проданного за интервал' (Sku sku, Stock stock, LegalEntity customer, DATE dateFrom, DATE dateTo) = GROUP
        SUM
        sumVATSold(sku, stock, customer, DATE date) IF date >= dateFrom AND date <= dateTo CHARWIDTH 8;

sumSold 'Продано за интервал (сумма)' (Sku sku, Stock stock, LegalEntity customer, DATE dateFrom, DATE dateTo) = GROUP
        SUM
        sumSold(sku, stock, customer, DATE date) IF date >= dateFrom AND date <= dateTo CHARWIDTH 9;

//по SKU
quantitySold 'Продано за интервал (кол-во)' (Sku sku, DATE dateFrom, DATE dateTo) = GROUP
        SUM
        quantitySold(sku, Stock stock, DATE date) IF date >= dateFrom AND date <= dateTo CHARWIDTH 7;

sumSold 'Продано за интервал (сумма)' (Sku sku, DATE dateFrom, DATE dateTo) = GROUP
        SUM
        sumSold(sku, Stock stock, DATE date) IF date >= dateFrom AND date <= dateTo CHARWIDTH 9;

quantityDays 'Кол-во дней' (DATE dateTo, DATE dateFrom) = daysBetweenDates(dateTo, dateFrom) + 1;
averageSold 'Продаж в день' (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) =  quantitySold(sku, stock, dateFrom, dateTo) / quantityDays(dateTo, dateFrom);

//------------------------------ Партии --------------------------------//

TABLE saleLedgerBatch (SaleLedger, Batch);

cost 'Расписано из партии' = ABSTRACT NUMERIC[16,5] (SaleLedger, Batch) MATERIALIZED;

coeff 'Удельный вес' (SaleLedger ledger, Batch batch) =
    NUMERIC[22,8](cost(ledger, batch) / quantity(ledger));

sum 'Сумма продажи' (SaleLedger ledger, Batch batch) = NUMERIC[18,4](sum(ledger) * coeff(ledger, batch));
costSum 'Себестоимость' (SaleLedger ledger, Batch batch) = NUMERIC[18,4](cost(ledger, batch) * cost(batch));
sumVAT 'Сумма НДС' (SaleLedger s, Batch b) = NUMERIC[18,4](sum(s,b) * valueVAT(s) / (100 + valueVAT(s)));
markupSum 'Надбавка' (SaleLedger ledger, Batch batch) = NUMERIC[18,4](sum(ledger, batch) - sumVAT(ledger, batch) - costSum(ledger, batch));

//по складу и Batch на дату
quantitySold (Batch batch, stock, date) = GROUP SUM cost(SaleLedger ledger, batch) IF active(ledger)
    BY stock(ledger), date(ledger) MATERIALIZED;

costSumSold (Batch batch, stock, date) = GROUP SUM costSum(SaleLedger ledger, batch) 
    IF active(ledger) BY stock(ledger), date(ledger) MATERIALIZED;

markupSumSold (Batch batch, stock, date) = GROUP SUM markupSum(SaleLedger ledger, batch) 
    IF active(ledger) BY stock(ledger), date(ledger) MATERIALIZED;

sumVATSold (Batch batch, stock, date) = GROUP SUM sumVAT(SaleLedger ledger, batch)  
    IF active(ledger) BY stock(ledger), date(ledger) MATERIALIZED;

sumSold (Batch batch, stock, date) = GROUP SUM sum(SaleLedger ledger, batch)  
    IF active(ledger) BY stock(ledger), date(ledger) MATERIALIZED;       
    
//по складу и Batch за интервал
    
quantitySold 'Продано за интервал (кол-во)' (Batch batch, Stock stock, DATE dateFrom, DATE dateTo)= GROUP SUM quantitySold(batch, stock, DATE date) 
    IF date >= dateFrom AND date <= dateTo; 
    
costSumSold 'Себестоимость проданного за интервал' (Batch batch, Stock stock, DATE dateFrom, DATE dateTo)= GROUP SUM  costSumSold(batch, stock, DATE date) 
    IF date >= dateFrom AND date <= dateTo;   
        
markupSumSold 'Надбавка проданного за интервал' (Batch batch, Stock stock, DATE dateFrom, DATE dateTo)= GROUP SUM  markupSumSold(batch, stock, DATE date) 
    IF date >= dateFrom AND date <= dateTo;  
     
sumVATSold 'Сумма НДС проданного за интервал' (Batch batch, Stock stock, DATE dateFrom, DATE dateTo)= GROUP SUM  sumVATSold(batch, stock, DATE date) 
    IF date >= dateFrom AND date <= dateTo;   
                       
sumSold 'Продано за интервал (сумма)' (Batch batch, Stock stock, DATE dateFrom, DATE dateTo)= GROUP SUM  sumSold(batch, stock, DATE date) 
    IF date >= dateFrom AND date <= dateTo;    


averagePriceSold 'Цена за интервал' (Batch batch, Stock stock, DATE dateFrom, DATE dateTo) = sumSold(batch, stock, dateFrom, dateTo)/
    quantitySold(batch, stock, dateFrom, dateTo);
averageMarkupSold 'Средний процент надбавки' (Batch batch, Stock stock, DATE dateFrom, DATE dateTo) = markupSumSold(batch, stock, dateFrom, dateTo)/
    costSumSold(batch, stock, dateFrom, dateTo)*100.0;    
    
//---------------------------------Тип обмена---------------------------------------//

sumSold (TypeExchange typeExchange, Sku sku, Stock stock, DATE date)= round((sumSold (sku, stock, date)/ rateOn(typeExchange, currency(stock), date)), currency(typeExchange));

sumSold 'Продано за интервал (сумма-валюта)' (TypeExchange typeExchange, Sku sku, Stock stock, DATE dateFrom, DATE dateTo) = GROUP
        SUM
        sumSold (typeExchange, sku, stock, DATE date) IF date >= dateFrom AND date <= dateTo;

sumSold 'Продано за интервал (сумма-валюта)' (TypeExchange typeExchange, Sku sku, DATE dateFrom, DATE dateTo) = GROUP SUM
        sumSold(typeExchange, sku, Stock stock, dateFrom, dateTo);


skuStockAverageInterval 'Интервал расчета продаж в день' = DATA INTEGER ();

averageSold 'Продаж в день' = DATA NUMERIC[14,3] (Sku, Stock);

calcQuantitySoldInterval(DATE dateFrom, DATE dateTo)  { 
    LOCAL balance = NUMERIC[14,3] (Sku, Stock);
    LOCAL days = INTEGER (Sku, Stock);
    LOCAL dateCur = DATE();

    dateCur() <- dateFrom;
    balance(Sku sku, Stock stock) <- balanceB(sku, stock, dateFrom);

    WHILE dateCur() <= dateTo DO {
        days(Sku sku, Stock stock) <- days(sku, stock) (+)
                   (1 IF ((balance(sku, stock) > 0) OR (quantity(sku, stock, dateCur()) > 0) OR (quantitySold(sku, stock, dateCur()) > 0)));
        balance(Sku sku, Stock stock) <- balance(sku, stock) (+)
                   signedQuantity(sku, stock, dateCur());
        dateCur() <- sum(dateCur(), 1);
    }

    averageSold(Sku sku, Stock stock) <- quantitySold (sku, stock, dateFrom, dateTo) / days(sku, stock);
}
calcCurrentQuantitySoldInterval 'Пересчитать однодневные продажи'()  { 
	NEWSESSION {
	    EXEC calcQuantitySoldInterval(subtract(currentDate(), skuStockAverageInterval()), subtract(currentDate(), 1));
	    apply();
	}
}

EXTEND FORM options
    PROPERTIES() skuStockAverageInterval, calcCurrentQuantitySoldInterval
;
DESIGN options {
    sale {
        MOVE PROPERTY(skuStockAverageInterval());
        MOVE PROPERTY(calcCurrentQuantitySoldInterval());
    }
}

//---------------------------------------------- Формы продаж -------------------------------------//
saleOperation 'Операция' = DATA LOCAL Sale.Operation ();
nameSaleOperation 'Операция' = name(saleOperation());

filterSaleOperation = operation(SaleLedger ledger)==saleOperation() OR (ledger IS SaleLedger AND NOT saleOperation());

saleCustomer = DATA LOCAL LegalEntity ();
nameSaleCustomer 'Покупатель' = name(saleCustomer());
filterSaleCustomer = customer(SaleLedger ledger)==saleCustomer() OR (ledger IS SaleLedger AND NOT saleCustomer());

saleCustomerStock  = DATA LOCAL Stock ();
nameSaleCustomerStock 'Склад покупателя' = name(saleCustomerStock());
filterSaleCustomerStock = customerStock(SaleLedger ledger)==saleCustomerStock() OR (ledger IS SaleLedger AND NOT saleCustomerStock());

CONSTRAINT saleCustomer() AND saleCustomerStock() AND NOT in(saleCustomer(), saleCustomerStock())
    CHECKED BY saleCustomerStock[] MESSAGE 'Покупатель и склад покупателя в фильтре для регистра продаж не имеют связи';     

saleStock  = DATA LOCAL Stock ();
nameSaleStock 'Склад' = name(saleStock());
filterSaleStock = stock(SaleLedger ledger)==saleStock() OR (ledger IS SaleLedger AND NOT saleStock());

idBarcodeSku 'Штрихкод' (SaleLedger l) = idBarcode(sku(l));

dataInSession 'Отм.' = DATA LOCAL BOOLEAN (SkuGroup);

levelParent (SkuGroup group) = GROUP
    MIN level(group, SkuGroup parent) IF dataInSession(parent);

inParent (SkuGroup group) = TRUE IF levelParent(group);

inSession 'Отм.' (SkuGroup group) = OVERRIDE
    dataInSession(group),
    inParent(group);   

sessionConcatSkuGroups 'Группы' () =
    GROUP CONCAT name(SkuGroup group) IF inSession(group) AND NOT inSession(parent(group)),'; ' ORDER group CHARWIDTH 30;
    
    
countInSessionSkuGroups  = GROUP SUM 1 IF dataInSession(SkuGroup g);

backgroundInSession 'Цвет' (SkuGroup g) = CASE 
    WHEN dataInSession(g) THEN RGB(0,0,0)
    WHEN levelParent(g) THEN RGB(230,248,250) 
    WHEN (GROUP SUM 1 IF dataInSession(SkuGroup gg) AND isParent(gg,g)) THEN RGB(203,203,203);  
    
resetSelectedGroups  'Сбросить отмеченные'()  { 
    dataInSession(SkuGroup g) <- NULL WHERE g IS SkuGroup ;    
}  

backgroundMarkupPercent = ABSTRACT CASE COLOR (SaleLedger);
  
FORM filterGroupType 'Фильтр по группам'    
     
     TREE treeGroup g=SkuGroup PARENT parent(g)
     PROPERTIES READONLY order(g), id(g) SHOWIF showIDs(), name(g)
     PROPERTIES inSession(g) ON CONTEXTMENU resetSelectedGroups()    

     ORDERS order(g), name(g)
     FILTERGROUP inactive FILTER 'Активные' active(g) 'F5' DEFAULT        
     PROPERTIES resetSelectedGroups() DRAW g
;   
selectSkuGroups 'Выбор групп'()  { 
    SHOW filterGroupType ;
} 

FORM saleLedger 'Регистр продаж'
    PROPERTIES() nameSaleStock, nameSaleOperation, nameSaleCustomer, nameSaleCustomerStock, sessionConcatSkuGroups ON CHANGE selectSkuGroups()

    OBJECTS dates = (dFrom = DATE, dTo = DATE) PANEL
    PROPERTIES valFrom = VALUE(dFrom), valTo = VALUE(dTo)

    OBJECTS te = TypeExchange PANEL
    PROPERTIES nameType = name(te) SELECTOR, nameCurrency(te) READONLY

    OBJECTS s = SaleLedger
    PROPERTIES(s) READONLY nameYear, nameMonth, nameDOW, date, hour, dateTime, 
                           nameStock, nameCustomer, nameCustomerStock, nameOperation,
                           nameSkuGroup1Sku, nameSkuGroup2Sku, nameSkuGroup3Sku, nameSkuGroup4Sku, nameSkuGroup5Sku, 
                           canonicalNameSkuGroup, idSku, nameSku, idBarcodeSku, description, numberDocument,
                           quantity, costSum, markupSum BACKGROUND backgroundMarkupPercent(s), valueVAT,
                           sumVAT, sum, discountSum, averagePrice, averageDiscountPrice
    PROPERTIES    READONLY sumSold (te, s)    
    PROPERTIES(s) NEWSESSION EDIT SHOWIF allowedEdit(s)
    ORDERS date(s)
    
    FILTERS active(s), filterSaleStock(s), filterSaleOperation(s), filterSaleCustomer(s), filterSaleCustomerStock(s)
    FILTERS date(s) >= dFrom, date(s) <= dTo
    
    FILTERS inSession(skuGroup(sku(s))) OR (s IS SaleLedger AND NOT countInSessionSkuGroups())
;
@extendFormFilterAccessStock(SaleLedger, s, saleLedger, stock, company);

DESIGN saleLedger {
    NEW top {
        type = CONTAINERH;
        MOVE BOX(dates) {
            type = CONTAINERH;
        }            
        MOVE BOX(te) {
            type = CONTAINERH;
            PROPERTY(nameCurrency(te)) { caption = 'Валюта'; charWidth = 20;}
            PROPERTY(nameType) { caption = 'Тип обмена'; charWidth = 20;}
        }
    }
    NEW operationContainer{
        type = CONTAINERH;
        caption = 'Фильтры';
        MOVE PROPERTY(nameSaleStock());
        MOVE PROPERTY(nameSaleOperation());
        MOVE PROPERTY(nameSaleCustomer());
        MOVE PROPERTY(nameSaleCustomerStock()); 
        MOVE PROPERTY(sessionConcatSkuGroups());
    }
    MOVE BOX(s);
    MOVE TOOLBARBOX;
}

NAVIGATOR {

    saleNavigator {
        NEW FOLDER salesReports 'Отчеты' {
            NEW saleLedger;
        }
    }
}

//---------------------------------------------- Расширение формы подбор товаров -------------------------------------//
META defineCustomerDialogStockSku (form)

    form##Customer = DATA LOCAL LegalEntity ();
    form##NameCustomer 'Покупатель' () = name(form##Customer()) CHARWIDTH 30;
    dialogCustomersFilter (Sku sku) =  inCustomer(form##Customer(), sku) OR (sku IS Sku AND NOT form##Customer());

    EXTEND FORM form
        PROPERTIES() form##NameCustomer
        FILTERS dialogCustomersFilter(s)
    ;

    DESIGN form {
        filterContainer {
            MOVE PROPERTY(form##NameCustomer());
        }
    }
END
@defineCustomerDialogStockSku(dialogSku);

//---------------------------------------------- Макросы для имплементаций -------------------------------------//

META implementSaleLedgerCustom(concrete, skuProp, stockProp)
    dateTime[SaleLedger] (concrete##Detail ledger) += dateTime(ledger);
    isPosted[SaleLedger] (concrete##Detail ledger) += isPosted(ledger);
    isClosed[SaleLedger] (concrete##Detail ledger) += isClosed(ledger);
    skuProp[SaleLedger] (concrete##Detail ledger) += skuProp(ledger);
    stock[SaleLedger] (concrete##Detail ledger) += stockProp(ledger);
    description[SaleLedger] (concrete##Detail ledger) += description(ledger);
    show[SaleLedger] (concrete##Detail ledger) + { show(ledger);};
END
META implementSaleLedger(concrete, skuProp, stockProp)
    EXTEND CLASS concrete##Detail : SaleLedger;
    @implementSaleLedgerCustom(concrete, skuProp, stockProp);
END

EXTEND FORM currentBalanceSkuStock PROPERTIES(s, st) averageSold READONLY;
EXTEND FORM balanceSkuStock PROPERTIES(s, st) averageSold READONLY;