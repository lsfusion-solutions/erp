MODULE SaleReturnInternetOrderInvoice;

REQUIRE SaleInternetOrderInvoice, SaleReturnShipment;

NAMESPACE SaleReturn;

internetOrderDetail = ABSTRACT InternetOrderDetail (InvoiceDetail);

TABLE internetUserInvoiceDetail(UserInvoiceDetail);
internetOrderDetail = DATA InternetOrderDetail (UserInvoiceDetail) TABLE internetUserInvoiceDetail;
INDEX internetOrderDetail(UserInvoiceDetail d), d;

internetOrderDetail(UserInvoiceDetail detail) += internetOrderDetail(detail);
userInvoiceDetailReturn = GROUP MAX UserInvoiceDetail d BY internetOrderDetail(d);

relation = GROUP SUM 1 BY deliveryReport(internetOrderDetail(InvoiceDetail d)), invoice(d);
countDeliveryReport = GROUP SUM 1 BY deliveryReport(internetOrderDetail(InvoiceDetail d));
notDeliveryReport (DeliveryReport r)= returnQuantityInternetOrderDetail(r) AND NOT countDeliveryReport(r) ;

overCreateReturnInvoice  ABSTRACT LIST ( UserInvoiceDetail);

createReturnInvoice 'Создать возврат' (DeliveryReport r)  { 
    IF returnQuantityInternetOrderDetail(r) AND NOT countDeliveryReport(r) THEN {
        NEWSESSION {
            FOR [GROUP SUM returnQuantity(InternetOrderDetail d) BY deliveryReport(d), Sale.supplierStock[InternetOrderDetail](d)](r, Stock st) NEW i = UserInvoice DO {
                SaleReturn.date(i) <- currentDate();
                SaleReturn.time(i) <- currentTime();
                SaleReturn.supplier(i) <- legalEntity(st);
                SaleReturn.supplierStock(i) <- st;
                SaleReturn.customer(i) <- legalEntity(internetStock());
                SaleReturn.customerStock(i) <- internetStock();
                SaleReturn.operation(i) <- internetOperation();
                SaleReturn.priceListType(i) <- defaultPriceListType(operation(i));
                SaleReturn.isPosted(i) <- TRUE ;
                SaleReturn.createShipment(i) <- TRUE;
                
                FOR returnQuantity(InternetOrderDetail detail) AND deliveryReport(detail) == r AND Sale.supplierStock[InternetOrderDetail](detail) == st NEW d = UserInvoiceDetail DO {
                    userInvoice(d) <- i;
                    sku(d) <- sku(detail);
                    batch(d) <- batch(detail);
                    quantity(d) <- returnQuantity(detail);
                    priceListType(d) <- OVERRIDE priceListType(agreement(userInvoice(d)), sku(d)),
                                                 priceListType(userInvoice(d));   
                    invoiceDetail(d) <- userInvoiceDetail(detail);   
                    internetOrderDetail(d) <- detail;                                                                                                                    

                    executeLocalEvents();
                    price(d) <- price(userInvoiceDetail(detail));
                    VAT(d) <- VAT(userInvoiceDetail(detail));
                    valueVAT(d) <- valueVAT(userInvoiceDetail(detail));
                    invoicePrice(d) <- invoicePrice(userInvoiceDetail(detail));                        
                    overCreateReturnInvoice(d);                                                                                                                                                                                   
                }                
                SHOW userInvoice OBJECTS i = i DOCKED NOCANCEL; 
            }
        }
    }       
}

EXTEND FORM deliveryDashboard
    OBJECTS ri = Invoice
                            
    PROPERTIES (ri) READONLY isPosted, number, series, date, time                                
    PROPERTIES (ri) READONLY nameSupplier, nameSupplierStock, nameCustomer, nameCustomerStock,
                            nameCurrency,  seriesNumberContractSku
    PROPERTIES (ri) READONLY countInvoiceDetail, quantityInvoiceDetail, sumInvoiceDetail,
                            VATSumInvoiceDetail, invoiceSumInvoiceDetail
    PROPERTIES (ri) READONLY note
    FILTERS relation(r,ri)
    
    PROPERTIES (r) createReturnInvoice TOOLBAR DRAW ri SHOWIF notDeliveryReport(r)
    PROPERTIES (ri) NEWSESSION EDIT SHOWIF overShowEdit(ri), deleteri = DELETE SHOWIF overShowDelete(ri)
;
DESIGN deliveryDashboard {
    tab {
        MOVE BOX(ri);
    }        
}

