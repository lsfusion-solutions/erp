MODULE SaleInternetPicking;

REQUIRE SaleInternetOrder;

NAMESPACE Sale;

CLASS Picking 'Комплектация';

TABLE picking (Picking);

picking = DATA Picking (InternetOrderDetail) INDEXED;
in 'Вкл.' (Picking o, InternetOrderDetail d) = picking(d) == o;
@defineDocumentHeaderCount(picking, InternetOrderDetail);

relation = GROUP SUM 1 IF in(Picking o, InternetOrderDetail d) BY o, internetOrder(d);

seriesNumberInternetOrders 'Интернет-заказы' (Picking picking) = GROUP
                                                 CONCAT seriesNumber(InternetOrder order) IF relation(picking, order) , ', '
                                                 ORDER order  CHARWIDTH 30;   

dataPickingIndex 'Номер строки' = DATA INTEGER (InternetOrderDetail) INDEXED; 
defaultPickingIndex 'Номер строки (авт.)' (InternetOrderDetail d) =
    PARTITION SUM 1
    ORDER internetOrder(d),d BY picking(d) CHARWIDTH 4;
indexPicking 'Номер строки' (InternetOrderDetail d) = OVERRIDE dataPickingIndex(d), defaultPickingIndex(d) IN id;  

sortOrder 'Порядок сортировки' (d) = ABSTRACT STRING[100] (InternetOrderDetail);
sortOrderInternetOrderDetail = GROUP SUM 1 IF sortOrder(InternetOrderDetail d) BY picking(d);

updateSortOrder 'Сортировать'(InternetOrderDetail detail)  { 
    IF sortOrderInternetOrderDetail(picking(detail)) THEN {    
        LOCAL int = INTEGER();
        int() <- NULL;
        int() <-1;
        
        FOR picking(detail) == picking(InternetOrderDetail d) ORDER sortOrder(d) DO {
            dataIndex(d) <- int();
             int() <-  int()+1;
        }  
    } ELSE {
        MESSAGE 'Не задано условие сортировки';
    }
} ASON CONTEXTMENU indexPicking[InternetOrderDetail];  

@defineDocumentHeaderTimePrefix(Picking, , ' документа');
@defineDocumentHeaderNote(Picking);
@defineCreated(Picking);
@deriveDocumentHeaderTimePrefix(Picking, );

@defineDocumentHeaderNumber(Picking, BPSTRING[2]);

@defineNumeratedDefault(Picking, 'Комплектации', 'КК');
@defineDocumentHeaderStock (picking, stock, 'Склад', );

@defineDocumentHeaderDescription(Picking, 'Комплектация');

@defineDocumentHeaderQuantityCustomPrefix(picking, internetOrderDetail, , );
@defineDocumentHeaderSumCustom(picking, internetOrderDetail, );

@defineDocumentHeaderSkuQuantity(picking, internetOrderDetail, sku, );

CONSTRAINT Sale.supplierStock[InternetOrderDetail](InternetOrderDetail d) AND stock(picking(d)) AND NOT Sale.supplierStock[InternetOrderDetail](d) == stock(picking(d))
    MESSAGE 'Склад поставщика для строки интернет заказа не соответсвует складу в комплектации.';


CLASS StatusPicking 'Статус' {
    new 'Новый',
    inWork 'В работе',
    picked 'Собрано'
}

FORM statusPicking 'Статус'
    OBJECTS o = StatusPicking
    PROPERTIES(o) READONLY staticCaption
    
    LIST StatusPicking OBJECT o 
;  

status = DATA StatusPicking(Picking);
nameStatus 'Статус' (Picking p) = staticCaption(status(p)) IN documentPrm CHARWIDTH 8;

status (Picking o) <- StatusPicking.new WHEN SET(o IS Picking);

pickingQuantity 'Собрано' = DATA NUMERIC[16,5](InternetOrderDetail);
showPickingQuantityCustom = ABSTRACT BOOLEAN (Picking);
showPickingQuantity (Picking p) = status(p) == StatusPicking.picked OR showPickingQuantityCustom(p);// OR (PREV(status(p)) == StatusPicking.picked);

@defineDocumentHeaderQuantityCustomPrefix(internetOrder, internetOrderDetail, picking, ' собрано');

pickingSum 'Сумма собрано' = DATA NUMERIC[18,4] (InternetOrderDetail);
calcPickingSum = ABSTRACT VALUE NUMERIC[18,4] (InternetOrderDetail);
calcPickingSum(InternetOrderDetail internetOrderDetail) += NUMERIC[18,4](round(pickingQuantity(internetOrderDetail) * price(internetOrderDetail), currency(internetOrderDetail))); 
pickingSum (InternetOrderDetail internetOrderDetail) <- calcPickingSum(internetOrderDetail)
                WHEN DO CHANGED(pickingQuantity(internetOrderDetail)) OR CHANGED (price(internetOrderDetail)) OR CHANGED(currency(internetOrderDetail));

pickingSumInternetOrderDetail 'Сумма (всего) собрано'  = GROUP SUM pickingSum(InternetOrderDetail idetail) BY internetOrder(idetail) IN documentSum MATERIALIZED;
pickingSumInternetOrderDetail 'Сумма (всего) собрано'  = GROUP SUM pickingSum(InternetOrderDetail idetail) BY picking(idetail) IN documentSum MATERIALIZED;
pickingQuantityInternetOrderDetail 'Кол-во (всего) собрано'  = GROUP SUM pickingQuantity(InternetOrderDetail idetail) BY picking(idetail) IN documentSum MATERIALIZED;

discountSumPicking 'Сумма со скидкой' (InternetOrderDetail d) = NUMERIC[18,4](round(pickingQuantity(d) * discountPrice(d), currency(d))); 
diffDiscountSumPicking(InternetOrderDetail d) = pickingSum(d) (-) discountSumPicking(d);

carrier = DATA Carrier (Picking); 
nameCarrier 'Перевозчик' (Picking p) = name(carrier(p)) CHARWIDTH 20;

executor = DATA Employee(Picking);
nameExecutor 'Исполнитель' (Picking p) = name(executor(p)) CHARWIDTH 15;

notNeedExecutorStockConstraint = ABSTRACT BOOLEAN ();

CONSTRAINT executor(Picking p) AND NOT in(stock(p), executor(p)) AND NOT notNeedExecutorStockConstraint()
    CHECKED BY executor[Picking]
    MESSAGE 'Не является сотрудником склада';

EXTEND FORM internetOrder
    PROPERTIES (d) pickingQuantity AFTER quantity(d)
;

EXTEND FORM internetOrders
    PROPERTIES (d) READONLY pickingQuantity
;
overChangeStatus  ABSTRACT LIST ( Picking);
isOverChangeStatus = ABSTRACT BOOLEAN (Picking);

changeStatus (Picking picking)  { 
    IF NOT isOverChangeStatus(picking) THEN  {      
        DIALOG statusPicking OBJECTS o = status(picking) INPUT DO {
            status(picking) <- o;
   
        }    
    } ELSE {
        overChangeStatus(picking);
    }
}

FORM picking 'Комплектация'
    OBJECTS p = Picking PANEL
    PROPERTIES (p) nameStock, nameCarrier, nameStatus ON CHANGE changeStatus(p),
                   nameNumerator, number, series, date, time, nameExecutor, 
                   note, countInternetOrderDetail, pickingQuantityInternetOrderDetail, pickingSumInternetOrderDetail                   

    OBJECTS d = InternetOrderDetail
    PROPERTIES     in(p, d)
    PROPERTIES (d) indexPicking 
    PROPERTIES (d) READONLY idBarcodeSku, idSku, nameSku, shortNameUOMSku
    PROPERTIES (d) nameBatch ON CHANGE changeBatch(d) , cost READONLY, quantity READONLY    
    PROPERTIES (d) pickingQuantity SHOWIF showPickingQuantity(p)
    PROPERTIES (d) READONLY price, discountPrice, pickingSum, nameSupplierStock, 
                   seriesNumber, date, time, nameInternetCustomer, addressInternetCustomer, phoneInternetCustomer

    ORDERS indexPicking(d)                   

    FILTERS picking(d) == p

    EDIT Picking OBJECT p
;

DESIGN picking {

    BOX {
        size = (1024, 768);
        OBJECTS {
            NEW specificationBox{
                fill = 1;
                MOVE BOX(d) {
                    caption = 'Спецификация';
                    PANEL(d) {
                        type = CONTAINERV;
                    }
                }
            }
    
            NEW headerBox BEFORE specificationBox {
                horizontal = TRUE;
    
                NEW headerRow1 {
                    fill = 1;
    
                    MOVE GROUP(documentHeader,p) {
                        lines = 1;
                        horizontal = TRUE;
                        MOVE PROPERTY(nameStock(p));
                        MOVE PROPERTY(nameNumerator(p));
                        MOVE PROPERTY(number(p));
                        MOVE PROPERTY(series(p));
                        MOVE PROPERTY(date(p));
                        MOVE PROPERTY(time(p));
                    }
                    NEW executor {
                        fill = 1;
                        horizontal = TRUE;
                        MOVE PROPERTY(nameExecutor(p));  
                    }
                    MOVE GROUP(documentPrm,p);
                }
                NEW sumContainer {
                    MOVE GROUP(documentSum,p) {
                        lines = 1;
                    }
                }
            }
        }
    }
}

FORM pickings 'Комплектации'

    OBJECTS p = Picking
    PROPERTIES (p) READONLY nameStatus, number, series, date, time, nameStock, nameExecutor, countInternetOrderDetail, 
                   pickingQuantityInternetOrderDetail, pickingSumInternetOrderDetail, seriesNumberInternetOrders
    PROPERTIES (p) PANEL READONLY createdTime, createdNameUser, createdHostnameComputer  
    PROPERTIES(p) NEWSESSION NEW, EDIT , deletep = DELETE  
        
    OBJECTS d = InternetOrderDetail
    PROPERTIES (d) READONLY  indexPicking 
    PROPERTIES (d) READONLY  idBarcodeSku, idSku, nameSku, shortNameUOMSku
    PROPERTIES (d) READONLY  nameBatch, quantity 
    PROPERTIES (d) READONLY  pickingQuantity   
    PROPERTIES (d) READONLY  price, discountPrice, pickingSum, 
                   seriesNumber, date, time, nameInternetCustomer, addressInternetCustomer, phoneInternetCustomer
    ORDERS indexPicking(d) 
    FILTERS picking(d)==p          

    LIST Picking OBJECT p
;
DESIGN pickings {
    NEW documentContainer BEFORE TOOLBARBOX {
        horizontal = FALSE;
        fill = 1;
        type = CONTAINERV;

        MOVE BOX(p) { fill = 2; }

        NEW documentDetail {
            tabbed = TRUE;
            fill = 2;

            MOVE BOX(d) {
                caption = 'Спецификация';
            }
            NEW documentHistory {
                fill = 1;
                caption = 'История';
                MOVE GROUP(created,p);

            }
            NEW printTab {
                fill = 1;
                caption = 'Печатные формы';
                NEW printContainer {
                    fill = 1;
                    caption = 'Печать';
                    type = CONTAINERV;
                }
            }
            NEW actionContainer {
                fill = 1;
                caption = 'Действия';
                horizontal = TRUE;
                NEW createdContainer {
                    fill = 1;
                    caption = 'Создание на основе';
                    type = CONTAINERV;
                    //MOVE PROPERTY(copy(p)) { caption = 'Комплектация';}
                }
            }
        }
    }
}


select 'Отм.' = DATA LOCAL NESTED BOOLEAN (InternetOrder);
countInternetOrders  = GROUP SUM 1 IF select(InternetOrder o);

skipFilter = ABSTRACT BOOLEAN (InternetOrderDetail);

useCustomfilterDashboard = ABSTRACT BOOLEAN ();
customFilterDashboard = ABSTRACT BOOLEAN (InternetOrderDetail);
customFilterDashboard = ABSTRACT INTEGER (InternetOrder);

filterDashboardCalc (InternetOrderDetail detail)= select(internetOrder(detail)) AND status(internetOrder(detail)) == StatusInternetOrder.agreed  
    AND NOT picking(detail) AND NOT skipFilter(detail);
filterDashboard (InternetOrderDetail detail)= IF useCustomfilterDashboard() THEN customFilterDashboard(detail) ELSE filterDashboardCalc(detail);
    
filterDashboardCalc = GROUP SUM 1 IF status(internetOrder(InternetOrderDetail detail)) == StatusInternetOrder.agreed AND NOT picking(detail) AND NOT skipFilter(detail) AND NOT isClosed(detail)  
    BY internetOrder(detail);
filterDashboard (InternetOrder i)= IF useCustomfilterDashboard() THEN customFilterDashboard(i) ELSE filterDashboardCalc(i);    
    
useCustomCreatePicking = ABSTRACT BOOLEAN ();
customCreatePicking  ABSTRACT (InternetOrder);

createPicking 'Создать комплектацию' (InternetOrder order)  { 
    IF NOT useCustomCreatePicking() THEN {
        IF NOT countInternetOrders() THEN {
            select(order) <- TRUE;
        } 
        IF countInternetOrders() THEN  {      
            LOCAL NESTED  ok = BOOLEAN ();
            ok() <- NULL;
            FOR [GROUP SUM 1 IF select(internetOrder(InternetOrderDetail d)) AND NOT picking(d) AND filterDashboard(d) BY Sale.supplierStock[InternetOrderDetail](d), carrier(internetOrder(d))](Stock stock, Carrier carrier) DO {
                NEWSESSION {
                    NEW p = Picking{
                        stock(p) <- stock;
                        carrier(p) <- carrier;
                        FOR Sale.supplierStock[InternetOrderDetail](InternetOrderDetail detail) == stock AND carrier(internetOrder(detail)) == carrier AND filterDashboard(detail) DO {                       
                                picking(detail) <- p;
                                IF  isItem(sku(detail)) AND NOT batch(detail) THEN {
                                    batch(detail) <- prevFirstOrderBatchBalance(sku(detail), stock, quantity(detail));
                                    overFillBatchPicking(detail);
                                }                        
                        }                   
                        DIALOG picking OBJECTS p = p DOCKED NOCANCEL DO {
                            ok() <- TRUE;
                        }
                    }
                }                           
            }            
            IF ok() THEN {
                status(InternetOrder o) <- StatusInternetOrder.isPicking WHERE select(o);
                apply();
            }       
            select(InternetOrder o) <- NULL;
            ok() <- NULL;
        } ELSE {
            MESSAGE 'Вначале необходимо отметить интернет заказы.';
        }
    } ELSE {
        customCreatePicking(order);
    }
}


FORM pickingDashboard 'Комплектации' AUTOREFRESH 60
    
    OBJECTS o = InternetOrder LAST 
    PROPERTIES (o) select
    PROPERTIES (o) READONLY isPosted, nameStatus, 
                   nameNumerator, number, series, date, time, nameCurrency, note,
                   deliveryDate, supplierStocks, nameInternetCustomer, addressInternetCustomer, phoneInternetCustomer
    PROPERTIES (o) READONLY countInternetOrderDetail, quantityInternetOrderDetail, sumInternetOrderDetail
                  
    PROPERTIES (o) READONLY namePaymentTypeInternetOrder, paymentCashSumInternetOrder, paymentCardSumInternetOrder, paymentERIPSumInternetOrder, paymentDateInternetOrder,
                   numberPaymentDocumentInternetOrder, deliverySumInternetOrder, deliveryTimeFromInternetOrder, deliveryTimeToInternetOrder
    FILTERS filterDashboard(o)       
    PROPERTIES createPicking(o) TOOLBAR           
                   
    OBJECTS d = InternetOrderDetail
    PROPERTIES (d) READONLY index
    PROPERTIES (d) READONLY idBarcodeSku, idSku, nameSku, shortNameUOMSku, nameBatch, quantity, 
                   price, discountPrice, sum, nameSupplierStock,
                   seriesNumber, date, time, nameInternetCustomer, addressInternetCustomer, phoneInternetCustomer
    ORDERS index(d)
    FILTERS internetOrder(d) == o 
                      
    OBJECTS p = Picking LAST
    PROPERTIES (p) READONLY nameStatus, number, series, date, time, nameStock, nameCarrier, nameExecutor, countInternetOrderDetail, 
                   pickingQuantityInternetOrderDetail, pickingSumInternetOrderDetail, seriesNumberInternetOrders
    PROPERTIES (p) PANEL READONLY createdTime, createdNameUser, createdHostnameComputer  
    PROPERTIES (p) NEWSESSION NEW, EDIT, DELETE  
           
    OBJECTS pd = InternetOrderDetail
    PROPERTIES (pd) READONLY indexPicking 
    PROPERTIES (pd) READONLY idBarcodeSku, idSku, nameSku, shortNameUOMSku, nameBatch, quantity
    PROPERTIES (pd) READONLY pickingQuantity 
    PROPERTIES (pd) READONLY price, pickingSum,  discountPrice, discountSumPicking,
                    seriesNumber, date, time, nameInternetCustomer, addressInternetCustomer, phoneInternetCustomer, nameSupplierStock
    ORDERS indexPicking(pd) 
    FILTERS picking(pd)==p       
          
    
                  
//    FILTERGROUP filters1 FILTER 'На дату' date(o)<=dt 'F6' DEFAULT 
//    FILTERGROUP filters2 FILTER 'На дату' date(p)==dt 'F6' DEFAULT
                   
;
DESIGN pickingDashboard {
    BOX {
        NEW top {
            fill = 1;
            NEW top1{
                horizontal = TRUE;
//                MOVE BOX(dt);
            }
            NEW body {
                fill = 1;
                horizontal = FALSE;
                MOVE BOX(o);
                NEW specification {
                    tabbed = TRUE;
                    fill = 2;
                    NEW specPick{
                        caption = 'Комплектации';
                        fill = 1;
                        type = SPLITH;
                        MOVE BOX(p);
                        MOVE BOX(pd);//{ fill = 2;}
                    }
                    MOVE BOX(d){ caption ='Спецификация интернет заказа';}
                }
            }
        }
        MOVE TOOLBARBOX;
    }    
}

NAVIGATOR {
    eShop  {
        NEW pickingDashboard;
    }
}

CONSTRAINT DROPPED(InternetOrderDetail detail IS InternetOrderDetail) AND PREV(picking(detail))
    MESSAGE 'Нельзя удалять строки ИЗ включенные в комплектацию';
discountSumPickingNew (InternetOrderDetail d) = IF full() THEN discountSum(d) ELSE discountSumPicking(d);
diffDiscountSumPickingNew  (InternetOrderDetail d) = IF full() THEN diffDiscountSum(d) ELSE diffDiscountSumPicking(d);
pickingSumNew  (InternetOrderDetail d) = IF full() THEN discountSum(d) ELSE discountSumPicking(d);
pickingQuantityNew  (InternetOrderDetail d) = IF full() THEN quantity(d) ELSE pickingQuantity(d);
pickingValueData = DATA LOCAL LONG (InternetOrderDetail);
pickingValue (InternetOrderDetail d) = OVERRIDE pickingValueData(d), LONG(1);

EXTEND FORM internetOrderPrint
    PROPERTIES (d) discountSumPicking, diffDiscountSumPicking, pickingSum, pickingQuantity
    PROPERTIES (d) discountSumPickingNew, diffDiscountSumPickingNew, pickingSumNew, pickingQuantityNew, pickingValue
;
internetOrderPickingPrint 'Счет-заказ (собрано)' (InternetOrder o)  { 
    in(InternetOrder order) <- NULL;
    skip(InternetOrderDetail d) <- NULL;   
     
    full() <- NULL ;   
    in(o) <- TRUE;    
    skip(InternetOrderDetail d) <- TRUE WHERE NOT pickingQuantity(d) AND in(internetOrder(d));
     
    PRINT internetOrderPrint;
} IMAGE 'print.png' IN print;

EXTEND FORM internetOrders
    PROPERTIES (o) internetOrderPickingPrint
;
DESIGN internetOrders {
    printContainer {
        MOVE PROPERTY (internetOrderPickingPrint(o));
    }
}