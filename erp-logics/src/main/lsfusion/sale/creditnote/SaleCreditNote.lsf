MODULE SaleCreditNote;

REQUIRE CreditNote, SaleShipment;

NAMESPACE Sale;

//----------------------------------------------- Акт ---------------------------------------------------//

@defineCreditNote(' (продажа)', supplier, supplier, company, customer, Sale);
@defineCreditNotePaymentCondition(' (продажа)');

accessCompanyExtra = ABSTRACT VALUE BOOLEAN (CreditNote);
EXTEND FORM creditNotes FILTERS accessCompany(currentUser(),supplierStock(c)) OR accessCompanyExtra(c) OR NOT supplierStock(c);

@defineCreditNoteBatch(supplier, supplier);
@defineCreditNoteBatchDialogStock(supplierStock, Out);


//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplier(UserCreditNote userCreditNote) AND NOT isCompany(supplier(userCreditNote))
    CHECKED BY supplier[UserCreditNote] MESSAGE 'Для акта расхождения выбрано в качестве поставщика организация, не являющаяся компанией';
CONSTRAINT customer(UserCreditNote userCreditNote) AND NOT isCustomer(customer(userCreditNote))
    CHECKED BY customer[UserCreditNote] MESSAGE 'Для акта расхождения выбрано в качестве покупателя организация, не являющаяся покупателем';

//------------------------------ Автоматическое проставление свойств -----------------------------//

@deriveDocumentLegalEntityDefaultStock(UserCreditNote, customer, userCreditNote);

@defineDocumentLegalEntityStockAccess(UserCreditNote, supplier, company, userCreditNote);

// -- Операция
@defineDocumentOperationContainer(creditNote ,c);
@extendFormFilterRoleAccess(creditNote, c, creditNotes);
@defineDocumentOperationConstraint(creditNote, 'акт расхождения (продажа)', Sale);
@defineDocumentOperationRole(userCreditNote);
@defineOperationProperty(createCreditNote, 'Акт расхождения', createContainer);
@deriveDocumentOperationProperty(UserInvoice, createCreditNote);

@defineOperationProperty(checkDateTimeCreditNote, 'Акт расхождения (польз.) должен быть создан позже даты поставки в накладной', constraintContainer);
checkDateTimeCreditNote 'Акт расхождения (польз.) должен быть создан позже даты поставки в накладной' (UserCreditNoteDetail d) = checkDateTimeCreditNote(operation(d));
CONSTRAINT (SETCHANGED (invoiceDetail(UserCreditNoteDetail d)) OR SETCHANGED (operation(d)) OR SETCHANGED (dateTime(d)) OR SET(isPosted(d))) 
    AND isPosted(d) AND checkDateTimeCreditNote(d) AND dateTime(d) <= shipmentDateTime(invoiceDetail(d))
        MESSAGE 'Акт расхождения (польз.) должен быть создан позже даты поставки в накладной';

@defineDocumentOperationLegalEntity(userCreditNote, supplier, 'Поставщик');
@deriveDocumentOperationLegalEntity(userCreditNote, supplier, userCreditNote);
@defineDocumentOperationLegalEntity(userCreditNote, customer, 'Покупатель');
@deriveDocumentOperationLegalEntity(userCreditNote, customer, userCreditNote);
@defineDocumentOperationStock(userCreditNote, supplier, 'Склад поставщика');
@deriveDocumentOperationStock(userCreditNote, supplier, userCreditNote);
@defineDocumentOperationStock(userCreditNote, customer, 'Склад покупателя');
@deriveDocumentOperationStock(userCreditNote, customer, userCreditNote);

operation(InvoiceCreditNote creditNote) += operation(invoice(creditNote));

//------------------------------ Расширение формы -----------------------------//

// Фильтры
EXTEND FORM userCreditNote

    FILTERGROUP filter
        FILTER 'С остатком ' currentBalance(ks, st) 'F10' DEFAULT
        FILTER 'В документе ' quantitySupplier(ks, c, st) 'F9'

;

EXTEND FORM userCreditNote

    FILTERGROUP filter3
        FILTER 'С остатком ' prevCurrentBalance(b, sto) 'F10' DEFAULT
        FILTER 'В документе ' quantitySupplier(b, c, sto) 'F9'
;

NAVIGATOR {
    saleSaleNavigator {
        NEW creditNotes;
    }
}

incl 'Отм.' = DATA LOCAL BOOLEAN (CreditNote);
countIncl = GROUP SUM 1 IF incl(CreditNote c);

//запрет строк без количеств
banEmptyCreditNoteDetail 'Запрет строк без кол-ва (акт расхождения продажа)' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES () banEmptyCreditNoteDetail
;

DESIGN options {
    sale {
        MOVE PROPERTY(banEmptyCreditNoteDetail());
    }
}

CONSTRAINT (OVERRIDE quantity(UserCreditNoteDetail detail), 0.0 IF detail IS UserCreditNoteDetail)=0.0 AND banEmptyCreditNoteDetail()
    AND CHANGED(quantity(detail))
    MESSAGE 'Для строки акта расхождения должно быть задано количество';
    
shipmentSumUserCreditnoteDetail = GROUP SUM shipmentSum(UserCreditNoteDetail detail) BY userCreditNote(detail);

filterCreditNoteDateFrom 'Дата с' = DATA LOCAL DATE ();
filterDateFrom (CreditNote c) = date(c) >= filterCreditNoteDateFrom() OR (c IS CreditNote AND NOT filterCreditNoteDateFrom());

filterCreditNoteDateTo 'Дата по' = DATA LOCAL DATE ();
filterDateTo (CreditNote c) = date(c) <= filterCreditNoteDateTo() OR (c IS CreditNote AND NOT filterCreditNoteDateTo());

filterCreditNoteOperation  = DATA LOCAL Operation ();
nameFilterCreditNoteOperation 'Операция' = name(filterCreditNoteOperation()) CHARWIDTH 15;
filterOperation (CreditNote c) = operation(c) == filterCreditNoteOperation() OR (c IS CreditNote AND NOT filterCreditNoteOperation());

filterCreditNoteCustomer  = DATA LOCAL LegalEntity ();
nameFilterCreditNoteCustomer 'Покупатель' = name(filterCreditNoteCustomer()) CHARWIDTH 15;
filterCustomer (CreditNote c) = customer(c) == filterCreditNoteCustomer() OR (c IS CreditNote AND NOT filterCreditNoteCustomer());

filterCreditNoteCustomerStock  = DATA LOCAL Stock ();
nameFilterCreditNoteCustomerStock 'Склад покупателя' = name(filterCreditNoteCustomerStock()) CHARWIDTH 15;
filterCustomerStock (CreditNote c) = customerStock(c) == filterCreditNoteCustomerStock() OR (c IS CreditNote AND NOT filterCreditNoteCustomerStock());

filterCreditNoteSupplier = DATA LOCAL LegalEntity ();
nameFilterCreditNoteSupplier 'Поставщик' = name(filterCreditNoteSupplier()) CHARWIDTH 15;
filterSupplier (CreditNote c) = supplier(c) == filterCreditNoteSupplier() OR (c IS CreditNote AND NOT filterCreditNoteSupplier());

filterCreditNoteSupplierStock  = DATA LOCAL Stock ();
nameFilterCreditNoteSupplierStock 'Склад поставщика' = name(filterCreditNoteSupplierStock()) CHARWIDTH 15;
filterSupplierStock (CreditNote c) = supplierStock(c) == filterCreditNoteSupplierStock() OR (c IS CreditNote AND NOT filterCreditNoteSupplierStock());

EXTEND FORM creditNotes

    PROPERTIES() filterCreditNoteDateFrom, filterCreditNoteDateTo, nameFilterCreditNoteOperation,
        nameFilterCreditNoteSupplier, nameFilterCreditNoteSupplierStock, nameFilterCreditNoteCustomer, nameFilterCreditNoteCustomerStock

    FILTERS filterDateFrom(c),
        filterDateTo(c),
        filterOperation(c),
        filterSupplier(c),
        filterSupplierStock(c),
        filterCustomer(c),
        filterCustomerStock(c)
;

DESIGN creditNotes {
    BOX {
        NEW topFilters FIRST {
            caption = 'Фильтры';
            horizontal = TRUE;
            alignment = STRETCH;
            MOVE PROPERTY(filterCreditNoteDateFrom());
            MOVE PROPERTY(filterCreditNoteDateTo());
            MOVE PROPERTY(nameFilterCreditNoteOperation());
            MOVE PROPERTY(nameFilterCreditNoteSupplier());
            MOVE PROPERTY(nameFilterCreditNoteSupplierStock());
            MOVE PROPERTY(nameFilterCreditNoteCustomer());
            MOVE PROPERTY(nameFilterCreditNoteCustomerStock());
        }
    }
}