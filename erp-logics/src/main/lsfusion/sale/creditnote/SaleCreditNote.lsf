MODULE SaleCreditNote;

REQUIRE CreditNote, SaleShipment;

NAMESPACE Sale;

//----------------------------------------------- Акт ---------------------------------------------------//

@defineCreditNote(' (продажа)', supplier, supplier, company, customer, Sale);
@defineCreditNotePaymentCondition(' (продажа)');
@extendFormFilterAccessStock(CreditNote, c, creditNotes, supplierStock, company);
@defineCreditNoteBatch(supplier, supplier);
@defineCreditNoteBatchDialogStock(supplierStock, Out);


//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplier(UserCreditNote userCreditNote) AND NOT isCompany(supplier(userCreditNote))
    CHECKED BY supplier[UserCreditNote] MESSAGE 'Для акта расхождения выбрано в качестве поставщика организация, не являющаяся компанией';
CONSTRAINT customer(UserCreditNote userCreditNote) AND NOT isCustomer(customer(userCreditNote))
    CHECKED BY customer[UserCreditNote] MESSAGE 'Для акта расхождения выбрано в качестве покупателя организация, не являющаяся покупателем';

//------------------------------ Автоматическое проставление свойств -----------------------------//

@deriveDocumentLegalEntityDefaultStock(UserCreditNote, customer, userCreditNote);

@defineDocumentLegalEntityStockAccess(UserCreditNote, supplier, company, userCreditNote);

// -- Операция
@defineDocumentOperationContainer(creditNote ,c);
@extendFormFilterRoleAccess(creditNote, c, creditNotes);
@defineDocumentOperationConstraint(creditNote, 'акт расхождения (продажа)', Sale);
@defineDocumentOperationRole(userCreditNote);
@defineOperationProperty(createCreditNote, 'Акт расхождения', createContainer);
@deriveDocumentOperationProperty(UserInvoice, createCreditNote);

@defineDocumentOperationLegalEntity(userCreditNote, supplier, 'Поставщик');
@deriveDocumentOperationLegalEntity(userCreditNote, supplier, userCreditNote);
@defineDocumentOperationLegalEntity(userCreditNote, customer, 'Покупатель');
@deriveDocumentOperationLegalEntity(userCreditNote, customer, userCreditNote);
@defineDocumentOperationStock(userCreditNote, supplier, 'Склад поставщика');
@deriveDocumentOperationStock(userCreditNote, supplier, userCreditNote);
@defineDocumentOperationStock(userCreditNote, customer, 'Склад покупателя');
@deriveDocumentOperationStock(userCreditNote, customer, userCreditNote);

operation(InvoiceCreditNote creditNote) += operation(invoice(creditNote));

//------------------------------ Расширение формы -----------------------------//

// Фильтры
EXTEND FORM userCreditNote

    FILTERGROUP filter
        FILTER 'С остатком ' currentBalance(ks, st) 'F10' DEFAULT
        FILTER 'В документе ' quantitySupplier(ks, c, st) 'F9'

;

EXTEND FORM userCreditNote

    FILTERGROUP filter3
        FILTER 'С остатком ' prevCurrentBalance(b, sto) 'F10' DEFAULT
        FILTER 'В документе ' quantitySupplier(b, c, sto) 'F9'
;

NAVIGATOR {
    saleSaleNavigator {
        NEW creditNotes;
    }
}

incl 'Отм.' = DATA LOCAL BOOLEAN (CreditNote);
countIncl = GROUP SUM 1 IF incl(CreditNote c);