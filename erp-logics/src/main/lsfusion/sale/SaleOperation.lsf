MODULE SaleOperation;

REQUIRE Operation, PriceListType, Sale;

NAMESPACE Sale;

@defineOperation(' (продажа)');
nameReturn 'Наименование (возврат)' = DATA ISTRING[100](Operation);
nameReturn(Operation operation) += nameReturn(operation);
EXTEND FORM operation 
    PROPERTIES(o)  nameReturn AFTER name(o)
;  
DESIGN operation {
    propertyContainer{
        MOVE PROPERTY(nameReturn(o)) AFTER PROPERTY(name(o));
    }
} 
overName 'Наименование' = OVERRIDE nameReturn(Operation o), name(o);
 
FORM dialogOperationsReturn 'Операции (продажа-возврат)' 
    OBJECTS o = Operation
    PROPERTIES(o) READONLY overName, id, createdNameUser, createdTime, createdHostnameComputer
; 
 
@defineOperationPriceListType();

TABLE legalEntityOperation(LegalEntity, Operation);
TABLE legalEntityGroupOperation(LegalEntityGroup, Operation);

@defineOperationLegalEntity(supplier, , s, 'Поставщики');
@defineCountLegalEntityOperation(supplier, company);
@defineOperationLegalEntity(customer, , c, 'Покупатели');
@defineCountLegalEntityOperation(customer, buyer);

TABLE stockOperation(Stock, Operation);
TABLE stockGroupOperation(StockGroup, Operation);

@defineOperationStock(supplier, sts, 'Склады поставщика');
@defineCountStockOperation(supplier, company, seller);
@defineOperationStock(customer, stc, 'Склады покупателя');
@defineCountStockOperation(customer, customer, buyer);

// Подсчет операций для складов поставщика и покупателя по умолчанию            
EXTEND FORM operation
    FILTERS //countCompanyStock(stsg),
//            isCompany(sts),
//            countCustomerStock(stcg),
//            isCustomer(stc),
            inSupplier(legalEntity(sts), o),
            inCustomer(legalEntity(stc), o),
            isSeller(legalEntity(sts)),
            isBuyer(legalEntity(stc))
;

@defineOperationRole();

@extendFormFilterRole(o, dialogOperationsReturn);

//@extendFormFilterRole(o, operations);     //-- пока не нужен

EXTEND FORM operation
    FILTERS isCompany(s),
            isBuyer(c)
;

countOperationSupplierCustomerSupplierCustomer 'Кол-во операций' (LegalEntity s, LegalEntity c, Stock ss, Stock cs, User u) = 
    GROUP SUM 1 IF inSupplier(s, Operation o) AND inSupplier(ss, o)
               AND inCustomer(c, o) AND inCustomer(cs, o) 
               AND in(u, o) COMPLEX;   

defaultOperationSupplierCustomerSupplierCustomer 'Операция по умолчанию' (LegalEntity s, LegalEntity c, Stock ss, Stock cs, User u) = 
    GROUP MAX Operation o IF inSupplier(s, o) AND inSupplier(ss, o)
               AND inCustomer(c, o) AND inCustomer(cs, o) 
               AND in(u, o) COMPLEX;   

DESIGN operation{
    tabContainer {
        NEW createContainer {
            caption = 'Производные документы';
            NEW saleContainer;
        }
        NEW showContainer {
            caption = 'Отображение свойств';
        }
        NEW constraintContainer {
            caption = 'Ограничения';
        }
        NEW paramsContainer {
            caption = 'Параметры';
        }
    }
}

@defineOperationProperty(showPack, 'Упаковка', showContainer);

@defineOperationProperty(skipSaleLedger, 'Не проводить по регистру продаж', paramsContainer);

@defineOperationProperty(userShippedQuantity, 'Использовать в регистре продаж поставленное количество', paramsContainer);

@defineOperationProperty(useCountVAT, 'Использовать расчетную ставку НДС', paramsContainer);
@defineOperationProperty(disableShowBatch, 'Не показывать партии', showContainer);

NAVIGATOR {
    saleMasterData {
        NEW operations;
    }
}

@defineOperationProperty(isContract, 'Должен быть задан договор', constraintContainer);
@defineOperationProperty(isPrice, 'Должна быть задана цена', constraintContainer);

@defineOperationProperty(isSaleBatch, 'Запретить оприходование накладных и заказов (продажа) без партий', BOOLEAN, constraintContainer);
@defineOperationProperty(isSaleReturnBatch, 'Запретить оприходование накладных из заказов (продажа-возврат) без партий', BOOLEAN, constraintContainer);

@defineOperationProperty(isShipmentPrice, 'Должна быть задана учетная цена', BOOLEAN, constraintContainer);

@defineOperationProperty(forbidInvoice, 'Запретить создание накладных', BOOLEAN, constraintContainer);

@defineOperationProperty(isCharLength, 'Проверять номер накладной', constraintContainer);

@defineOperationProperty(isShipmentDate, 'Создавать накладную по заказу с датой поставки', paramsContainer); 
@defineOperationProperty(banNegativeQuantityInvoice, 'Запретить ввод отрицательного количества в накладную', constraintContainer);

@defineOperationProperty(daysBeforeShipmentDate, 'Дней до поставки по умолчанию', INTEGER, paramsContainer);

@defineOperationProperty(invoiceSumDeviation, 'Допустимое отклонение Суммы с НДС, руб', NUMERIC[8,3], constraintContainer);

@defineOperationProperty(isSeriesInvoices, 'Запретить ввод накладных без серии', constraintContainer);

@defineOperationProperty(forbidNullOrderDetailInvoiceDetail, 'Запретить проведение накладных без привязки строк к заказу', constraintContainer);

@defineOperationProperty(defaultPriceRound, 'Количество знаков для округления цен в заказах и накладных', INTEGER, paramsContainer);