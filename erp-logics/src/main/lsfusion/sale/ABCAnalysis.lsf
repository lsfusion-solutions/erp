MODULE ABCAnalysis;

REQUIRE Store, SaleLedger;

round4 (number) = round(number, 4);

CLASS ABCType 'Тип отчета' {
    sum 'По выручке',
    markup 'По доходу',
    quantity 'По количеству'
};

TABLE ABCType (ABCType);

isSum (ABCType type) = type == ABCType.sum;
isMarkupSum (ABCType type) = type == ABCType.markup;
isQuantity (ABCType type) = type == ABCType.quantity;

FORM ABCType 'Тип отчета'
    OBJECTS ct = ABCType PANEL
    PROPERTIES(ct) staticCaption
    EDIT ABCType OBJECT ct
;

FORM ABCTypes 'Тип отчета'
    OBJECTS ct = ABCType
    PROPERTIES(ct) READONLY staticCaption
    ORDERS staticCaption(ct)
    LIST ABCType OBJECT ct
;

dataInSession 'Отм.' = DATA LOCAL BOOLEAN (Group);

levelParent (Group group) = GROUP
    MIN level(group, Group parent) IF dataInSession(parent);
nearestParentGroupInSession (Group g) =  group(g, levelParent(g));
nearestInSession (Group g) =
    dataInSession(nearestParentGroupInSession(g)) MATERIALIZED;

inParent (Group group) = TRUE IF levelParent(group) AND isLeaf(group);

inSession 'Отм.' (Group group) = OVERRIDE
    dataInSession(group),
    inParent(group);

sessionConcatGroups 'Группы' (groupType) =
    GROUP CONCAT name(Group group) IF inSession(group) AND NOT inSession(parent(group)),'; ' ORDER group
    BY groupType(group);
    

quantityChildWithSession (Group parent) = GROUP SUM 1 IF dataInSession(Group child) AND isParent(child, parent) MATERIALIZED;
quantityParentWithSession (Group child) = GROUP SUM 1 IF dataInSession(Group parent) AND isParent(child, parent) MATERIALIZED;                                                                        
                                                                           
backgroundInSession 'Цвет' (Group g) = CASE 
    WHEN dataInSession(g) THEN RGB(0,0,0)
    WHEN nearestInSession(g) THEN RGB(230,248,250) 
    WHEN quantityChildWithSession (g) != descendantNumber(g) AND NOT quantityParentWithSession (g) THEN RGB(203,203,203);
  
  
  
countInSessionSkuGroups  = GROUP SUM 1 IF dataInSession(Group g) BY groupType(g);

resetSelectedGroups  'Сбросить отмеченные'()  { 
    dataInSession(Group g) <- NULL WHERE g IS Group ;    
}  
//selectLeaf  'Отметить листья'(GroupType t)  { 
//    dataInSession(Group g)<- TRUE WHERE groupType(g) == t AND isLeaf(g); 
//}
 
select 'Отм.' = DATA LOCAL BOOLEAN (Stock);
countSelectStocks = GROUP SUM 1 IF select(Stock l);
nameSelectStocks 'Склады' = GROUP CONCAT name(Stock st) IF select(st),', ' ORDER st CHARWIDTH 30;
idSelectStocks 'Склады' = GROUP CONCAT id(Stock st) IF select(st),', ' ORDER st CHARWIDTH 30;
//--

markupSumSold 'Доход'(GroupType groupType, Group g, DATE df, DATE dt) =
    GROUP SUM markupSumSold(Sku sk, Stock st, df, dt) IF  isParent(g, sk) AND inSession(group(groupType, sk)) AND select(st);
                                                   
quantitySold 'Кол-во'(GroupType groupType, Group g, DATE df, DATE dt) =
    GROUP SUM quantitySold(Sku sk, Stock st, df, dt) IF  isParent(g, sk) AND inSession(group(groupType, sk)) AND select(st);
                                                       
sumSold 'Выручка'(GroupType groupType, Group g, DATE df, DATE dt) =
    GROUP SUM sumSold(Sku sk, Stock st, df, dt) IF  isParent(g, sk) AND inSession(group(groupType, sk)) AND select(st); 


markupSumSold 'Доход'(GroupType groupType, Sku sk, DATE df, DATE dt) =
    GROUP SUM markupSumSold(sk, Stock st, df, dt) IF  inSession(group(groupType, sk)) AND select(st);

quantitySold 'Кол-во'(GroupType groupType, Sku sk, DATE df, DATE dt) =
    GROUP SUM quantitySold(sk, Stock st, df, dt) IF  inSession(group(groupType, sk)) AND select(st);
                                                       
sumSold 'Выручка'(GroupType groupType, Sku sk, DATE df, DATE dt) =
    GROUP SUM sumSold(sk, Stock st, df, dt) IF  inSession(group(groupType, sk)) AND select(st);                                                
//--
                                               
markupSumSold 'Доход'(GroupType groupType, DATE df, DATE dt) =
    GROUP SUM markupSumSold(Sku sk, Stock st, df, dt) IF inSession(group(groupType, sk))  AND select(st);
                                                   
quantitySold 'Кол-во'(GroupType groupType, DATE df, DATE dt) =
    GROUP SUM quantitySold(Sku sk, Stock st, df, dt) IF inSession(group(groupType, sk))  AND select(st);
                                                       
sumSold 'Выручка'(GroupType groupType, DATE df, DATE dt) =
    GROUP SUM sumSold(Sku sk, Stock st, df, dt) IF inSession(group(groupType, sk))  AND select(st);                                                 
                                               
                                               

ab 'AB, %' = DATA NUMERIC[8,3]();
bc 'BC, %' = DATA NUMERIC[8,3]();

best 'Количество топ лучших' = DATA INTEGER ();
worst 'Количество топ худших' = DATA INTEGER ();

EXTEND FORM options
    PROPERTIES () ab, bc, best, worst
;
DESIGN options {
    pane{
        NEW abc{
            caption = 'ABC-анализ';
            fill = 1;
            horizontal = TRUE;
            MOVE PROPERTY (ab());
            MOVE PROPERTY (bc());
            MOVE PROPERTY (best());
            MOVE PROPERTY (worst());                    
                    
        }

    }
}


markupSumSold 'Доход' = DATA LOCAL NUMERIC[18,4] (GroupType) CHARWIDTH 15;
quantitySold 'Кол-во' = DATA LOCAL NUMERIC[18,4] (GroupType) CHARWIDTH 15;
sumSold 'Выручка' = DATA LOCAL NUMERIC[18,4] (GroupType) CHARWIDTH 15;

markupSumSold 'Доход' = DATA LOCAL NUMERIC[18,4] (Group);
quantitySold 'Кол-во' = DATA LOCAL NUMERIC[18,4] (Group);
sumSold 'Выручка' = DATA LOCAL NUMERIC[18,4] (Group);

markupSumSold 'Доход' = DATA LOCAL NUMERIC[18,4] (Sku);
quantitySold 'Кол-во' = DATA LOCAL NUMERIC[18,4] (Sku);
sumSold 'Выручка' = DATA LOCAL NUMERIC[18,4] (Sku);

percMarkupSold 'ВД, %' (Group g) = round2(markupSumSold(g)*100.00 / sumSold(g)); 
percMarkupSold 'ВД, %' (GroupType t) = round2(markupSumSold(t)*100.00 / sumSold(t)); 
percMarkupSold 'ВД, %' (Sku s) = round2(markupSumSold(s)*100.00 / sumSold(s)); 

   
percInSumSold 'Удельный вес выручка, %'  (GroupType t,Group g) = round4(sumSold(g)*100.00 / sumSold(t));                                         
percInMarkupSumSold 'Удельный вес доход, %'  (GroupType t,Group g) = round4(markupSumSold(g)*100.00 / markupSumSold(t));  
percInQuantitySold 'Удельный вес кол-во, %'  (GroupType t,Group g) = round4(quantitySold(g)*100.00 / quantitySold(t));

percInSumSold 'Удельный вес выручка, %'  (GroupType t,Sku s) = round4(sumSold(s)*100.00 / sumSold(t));                                         
percInMarkupSumSold 'Удельный вес доход, %'  (GroupType t,Sku s) = round4(markupSumSold(s)*100.00 / markupSumSold(t));  
percInQuantitySold 'Удельный вес кол-во, %'  (GroupType t,Sku s) = round4(quantitySold(s)*100.00 / quantitySold(t));

 
averagePrice 'Средняя розничная цена' (Sku s) = round2(sumSold(s) / quantitySold(s)); 
averageMarkup 'Средняя надбавка' (Sku s) = round2(markupSumSold(s) / quantitySold(s)); 
averageDaysSum 'Средняя дневная выручка' (Sku s, DATE df, DATE dt) = round2(sumSold(s) / NUMERIC[18,4](daysInclBetweenDates(df,dt))); 
averageDaysMarkupSum 'Средний дневной доход' (Sku s, DATE df, DATE dt) = round2(markupSumSold(s) / NUMERIC[18,4](daysInclBetweenDates(df,dt))); 
averageDaysQuantity 'Среднее дневное кол-во продаж' (Sku s, DATE df, DATE dt) = round2(quantitySold(s) / NUMERIC[18,4](daysInclBetweenDates(df,dt))); 

averagePrice 'Средняя розничная цена' (Group g) = round2(sumSold(g) / quantitySold(g)); 
averageMarkup 'Средняя надбавка' (Group g) = round2(markupSumSold(g) / quantitySold(g)); 
averageDaysSum 'Средняя дневная выручка' (Group g, DATE df, DATE dt) = round2(sumSold(g) / NUMERIC[18,4](daysInclBetweenDates(df,dt))); 
averageDaysMarkupSum 'Средний дневной доход' (Group g, DATE df, DATE dt) = round2(markupSumSold(g) / NUMERIC[18,4](daysInclBetweenDates(df,dt))); 
averageDaysQuantity 'Среднее дневное кол-во продаж' (Group g, DATE df, DATE dt) = round2(quantitySold(g) / NUMERIC[18,4](daysInclBetweenDates(df,dt))); 


averagePrice 'Средняя розничная цена' (GroupType t) = round2(sumSold(t) / quantitySold(t));  
averageMarkup 'Средняя надбавка' (GroupType t) = round2(markupSumSold(t) / quantitySold(t)); 
averageDaysSum 'Средняя дневная выручка' (GroupType t, DATE df, DATE dt) = round2(sumSold(t) / NUMERIC[18,4](daysInclBetweenDates(df,dt))); 
averageDaysMarkupSum 'Средний дневной доход' (GroupType t, DATE df, DATE dt) = round2(markupSumSold(t) / NUMERIC[18,4](daysInclBetweenDates(df,dt))); 
averageDaysQuantity 'Среднее дневное кол-во продаж' (GroupType t, DATE df, DATE dt) = round2(quantitySold(t) / NUMERIC[18,4](daysInclBetweenDates(df,dt))); 

//-- Лучшие
indexSumBest 'Номер п/п' (Group g)= PARTITION SUM 1 IF sumSold(g) ORDER DESC sumSold(g), name(g) BY groupType(g)  CHARWIDTH 3 CHARWIDTH 6;
indexMarkupBest 'Номер п/п' (Group g)= PARTITION SUM 1 IF markupSumSold(g) ORDER DESC markupSumSold(g), name(g) BY groupType(g)  CHARWIDTH 3 CHARWIDTH 6;
indexQuantityBest 'Номер п/п' (Group g)= PARTITION SUM 1 IF quantitySold(g) ORDER DESC quantitySold(g), name(g) BY groupType(g)  CHARWIDTH 3 CHARWIDTH 6;

indexSumBest 'Номер п/п' (Sku s)= PARTITION SUM 1 IF sumSold(s) ORDER DESC sumSold(s), name(s) BY skuType(s)  CHARWIDTH 3 CHARWIDTH 6;
indexMarkupBest 'Номер п/п' (Sku s)= PARTITION SUM 1 IF markupSumSold(s) ORDER DESC markupSumSold(s), name(s) BY skuType(s)  CHARWIDTH 3 CHARWIDTH 6;
indexQuantityBest 'Номер п/п' (Sku s)= PARTITION SUM 1 IF quantitySold(s) ORDER DESC quantitySold(s), name(s) BY skuType(s)  CHARWIDTH 3 CHARWIDTH 6;

partitionSumBest  (Group g)= PARTITION SUM sumSold(g) ORDER indexSumBest(g) BY groupType(g)  CHARWIDTH 3 CHARWIDTH 6;
partitionMarkupBest  (Group g)= PARTITION SUM markupSumSold(g) ORDER indexMarkupBest(g) BY groupType(g)  CHARWIDTH 3 CHARWIDTH 6;
partitionQuantityBest (Group g)= PARTITION SUM quantitySold(g) ORDER indexQuantityBest(g) BY groupType(g)  CHARWIDTH 3 CHARWIDTH 6;

partitionSumBest  (Sku s)= PARTITION SUM sumSold(s) ORDER indexSumBest(s) BY skuType(s)  CHARWIDTH 3 CHARWIDTH 6;
partitionMarkupBest  (Sku s)= PARTITION SUM markupSumSold(s) ORDER indexMarkupBest(s) BY skuType(s)  CHARWIDTH 3 CHARWIDTH 6;
partitionQuantityBest (Sku s)= PARTITION SUM quantitySold(s) ORDER indexQuantityBest(s) BY skuType(s)  CHARWIDTH 3 CHARWIDTH 6;

sumBest = GROUP SUM sumSold(Group g) IF indexSumBest(g) <= best() BY groupType(g); 
markupBest = GROUP SUM markupSumSold(Group g) IF indexMarkupBest(g) <= best() BY groupType(g); 
quantityBest = GROUP SUM quantitySold(Group g) IF indexQuantityBest(g) <= best() BY groupType(g); 

sumBestSku = GROUP SUM sumSold(Sku s) IF indexSumBest(s) <= best() BY groupType(skuGroup(s)); 
markupBestSku = GROUP SUM markupSumSold(Sku s) IF indexMarkupBest(s) <= best() BY groupType(skuGroup(s)); 
quantityBestSku = GROUP SUM quantitySold(Sku s) IF indexQuantityBest(s) <= best() BY groupType(skuGroup(s)); 

percInSumBest 'Уд. вес' (GroupType t, Group g) = round4(sumSold(g)*100.00 / sumBest(t)); 
percInMarkupBest 'Уд. вес'(GroupType t, Group g) = round4(markupSumSold(g)*100.00 / markupBest(t)); 
percInQuantityBest 'Уд. вес' (GroupType t, Group g) = round4(quantitySold(g)*100.00 / quantityBest(t)); 

percInSumBest 'Уд. вес' (GroupType t, Sku s) = round4(sumSold(s)*100.00 / sumBestSku(t)); 
percInMarkupBest 'Уд. вес'(GroupType t, Sku s) = round4(markupSumSold(s)*100.00 / markupBestSku(t)); 
percInQuantityBest 'Уд. вес' (GroupType t, Sku s) = round4(quantitySold(s)*100.00 / quantityBestSku(t)); 


percOrderInSumBest 'Накопленный процент' (GroupType t, Group g) = round4(partitionSumBest(g)*100.00 / sumBest(t)); 
percOrderInMarkupBest 'Накопленный процент'(GroupType t, Group g) = round4(partitionMarkupBest(g)*100.00 / markupBest(t)); 
percOrderInQuantityBest 'Накопленный процент' (GroupType t, Group g) = round4(partitionQuantityBest(g)*100.00 / quantityBest(t)); 

percOrderInSumBest 'Накопленный процент' (GroupType t, Sku s) = round4(partitionSumBest(s)*100.00 / sumBestSku(t)); 
percOrderInMarkupBest 'Накопленный процент'(GroupType t, Sku s) = round4(partitionMarkupBest(s)*100.00 / markupBestSku(t)); 
percOrderInQuantityBest 'Накопленный процент' (GroupType t, Sku s) = round4(partitionQuantityBest(s)*100.00 / quantityBestSku(t)); 

percOrderSum 'Накопленный процент' (GroupType t, Group g) = round4(partitionSumBest(g)*100.00 / sumSold(t)); 
percOrderMarkup 'Накопленный процент'(GroupType t, Group g) = round4(partitionMarkupBest(g)*100.00 / markupSumSold(t)); 
percOrderQuantity 'Накопленный процент' (GroupType t, Group g) = round4(partitionQuantityBest(g)*100.00 / quantitySold(t)); 

percOrderSum 'Накопленный процент' (GroupType t, Sku s) = round4(partitionSumBest(s)*100.00 / sumSold(t)); 
percOrderMarkup 'Накопленный процент'(GroupType t, Sku s) = round4(partitionMarkupBest(s)*100.00 / markupSumSold(t)); 
percOrderQuantity 'Накопленный процент' (GroupType t, Sku s) = round4(partitionQuantityBest(s)*100.00 / quantitySold(t)); 

index '№ п/п' (Group g, ABCType type) = CASE 
    WHEN isSum(type) THEN indexSumBest(g)
    WHEN isMarkupSum(type) THEN indexMarkupBest(g)    
    WHEN isQuantity(type) THEN indexQuantityBest(g)
;

index '№ п/п' (Sku s, ABCType type) = CASE 
    WHEN isSum(type) THEN indexSumBest(s)
    WHEN isMarkupSum(type) THEN indexMarkupBest(s)    
    WHEN isQuantity(type) THEN indexQuantityBest(s)
;

percOrder 'Накопленный процент' (GroupType t, Group g, ABCType type) = CASE 
    WHEN isSum(type) THEN percOrderSum(t,g)
    WHEN isMarkupSum(type) THEN percOrderMarkup(t,g)    
    WHEN isQuantity(type) THEN percOrderQuantity(t,g)
;

percOrder 'Накопленный процент' (GroupType t, Sku s, ABCType type) = CASE 
    WHEN isSum(type) THEN percOrderSum(t,s)
    WHEN isMarkupSum(type) THEN percOrderMarkup(t,s)    
    WHEN isQuantity(type) THEN percOrderQuantity(t,s)
;

status 'Рейтинг' (GroupType t, Group g, ABCType type) = CASE 
    WHEN  percOrder(t,g,type) <= ab() THEN 'A'
    WHEN  percOrder(t,g,type) <= bc() AND percOrder(t,g,type) > ab() THEN 'B'
    WHEN  percOrder(t,g,type) THEN 'C'
;

status 'Рейтинг' (GroupType t, Sku s, ABCType type) = CASE 
    WHEN  percOrder(t,s,type) <= ab() THEN 'A'
    WHEN  percOrder(t,s,type) <= bc() AND percOrder(t,s,type) > ab() THEN 'B'
    WHEN  percOrder(t,s,type) THEN 'C'
;

backgroundStatus(GroupType t, Group g, ABCType type) = CASE 
    WHEN  percOrder(t,g,type) <= ab() THEN RGB(204,255,204)
    WHEN  percOrder(t,g,type) <= bc() AND percOrder(t,g,type) > ab() THEN RGB(255, 250, 205)
    WHEN  percOrder(t,g,type) THEN  RGB(255,238,238)
;

backgroundStatus(GroupType t, Sku s, ABCType type) = CASE 
    WHEN  percOrder(t,s,type) <= ab() THEN RGB(204,255,204)
    WHEN  percOrder(t,s,type) <= bc() AND percOrder(t,s,type) > ab() THEN RGB(255, 250, 205)
    WHEN  percOrder(t,s,type) THEN  RGB(255,238,238)
;

//-- Худшие
indexSumWorst  (Group g)= PARTITION SUM 1 IF sumSold(g) ORDER sumSold(g), name(g) BY groupType(g)  CHARWIDTH 3 CHARWIDTH 6;
indexMarkupWorst  (Group g)= PARTITION SUM 1 IF markupSumSold(g) ORDER markupSumSold(g), name(g) BY groupType(g)  CHARWIDTH 3 CHARWIDTH 6;
indexQuantityWorst (Group g)= PARTITION SUM 1 IF quantitySold(g) ORDER quantitySold(g), name(g) BY groupType(g)  CHARWIDTH 3 CHARWIDTH 6;

indexSumWorst  (Sku s)= PARTITION SUM 1 IF sumSold(s) ORDER sumSold(s), name(s) BY groupType(skuGroup(s))  CHARWIDTH 3 CHARWIDTH 6;
indexMarkupWorst  (Sku s)= PARTITION SUM 1 IF markupSumSold(s) ORDER markupSumSold(s), name(s) BY groupType(skuGroup(s))  CHARWIDTH 3 CHARWIDTH 6;
indexQuantityWorst (Sku s)= PARTITION SUM 1 IF quantitySold(s) ORDER quantitySold(s), name(s) BY groupType(skuGroup(s))  CHARWIDTH 3 CHARWIDTH 6;

partitionSumWorst  (Group g)= PARTITION SUM  sumSold(g) ORDER indexSumWorst(g) BY groupType(g)  CHARWIDTH 3 CHARWIDTH 6;
partitionMarkupWorst  (Group g)= PARTITION SUM markupSumSold(g) ORDER indexMarkupWorst(g) BY groupType(g)  CHARWIDTH 3 CHARWIDTH 6;
partitionQuantityWorst (Group g)= PARTITION SUM quantitySold(g) ORDER indexQuantityWorst(g) BY groupType(g)  CHARWIDTH 3 CHARWIDTH 6;

partitionSumWorst  (Sku s)= PARTITION SUM  sumSold(s) ORDER indexSumWorst(s) BY groupType(skuGroup(s))  CHARWIDTH 3 CHARWIDTH 6;
partitionMarkupWorst  (Sku s)= PARTITION SUM markupSumSold(s) ORDER indexMarkupWorst(s) BY groupType(skuGroup(s))  CHARWIDTH 3 CHARWIDTH 6;
partitionQuantityWorst (Sku s)= PARTITION SUM quantitySold(s) ORDER indexQuantityWorst(s) BY groupType(skuGroup(s))  CHARWIDTH 3 CHARWIDTH 6;

sumWorst = GROUP SUM sumSold(Group g) IF indexSumWorst(g) <= worst() BY groupType(g); 
markupWorst = GROUP SUM markupSumSold(Group g) IF indexMarkupWorst(g) <= worst() BY groupType(g); 
quantityWorst = GROUP SUM quantitySold(Group g) IF indexQuantityWorst(g) <= worst() BY groupType(g); 
sumWorstSku = GROUP SUM sumSold(Sku s) IF indexSumWorst(s) <= worst() BY groupType(skuGroup(s)); 
markupWorstSku = GROUP SUM markupSumSold(Sku s) IF indexMarkupWorst(s) <= worst() BY groupType(skuGroup(s)); 
quantityWorstSku = GROUP SUM quantitySold(Sku s) IF indexQuantityWorst(s) <= worst() BY groupType(skuGroup(s)); 


percInSumWorst(GroupType t, Group g) = round4(sumSold(g)*100.00 / sumWorst(t)); 
percInMarkupWorst(GroupType t, Group g) = round4(markupSumSold(g)*100.00 / markupWorst(t)); 
percInQuantityWorst(GroupType t, Group g) = round4(quantitySold(g)*100.00 / quantityWorst(t)); 

percInSumWorst(GroupType t, Sku s) = round4(sumSold(s)*100.00 / sumWorstSku(t)); 
percInMarkupWorst(GroupType t, Sku s) = round4(markupSumSold(s)*100.00 / markupWorstSku(t)); 
percInQuantityWorst(GroupType t, Sku s) = round4(quantitySold(s)*100.00 / quantityWorstSku(t)); 

percOrderInSumWorst 'Накопленный процент' (GroupType t, Group g) = round4(partitionSumWorst(g)*100.00 / sumWorst(t)); 
percOrderInMarkupWorst 'Накопленный процент'(GroupType t, Group g) = round4(partitionMarkupWorst(g)*100.00 / markupWorst(t)); 
percOrderInQuantityWorst 'Накопленный процент' (GroupType t, Group g) = round4(partitionQuantityWorst(g)*100.00 / quantityWorst(t)); 

percOrderInSumWorst 'Накопленный процент' (GroupType t, Sku s) = round4(partitionSumWorst(s)*100.00 / sumWorstSku(t)); 
percOrderInMarkupWorst 'Накопленный процент'(GroupType t, Sku s) = round4(partitionMarkupWorst(s)*100.00 / markupWorstSku(t)); 
percOrderInQuantityWorst 'Накопленный процент' (GroupType t, Sku s) = round4(partitionQuantityWorst(s)*100.00 / quantityWorstSku(t)); 

fillPropertySku 'Заполнить' (GroupType t, ABCType type, DATE df, DATE dt)  { 
    IF countSelectStocks() AND countInSessionSkuGroups(t) THEN {
        markupSumSold(Sku s) <- NULL;
        quantitySold(Sku s) <- NULL;
        sumSold(Sku s) <- NULL;
        markupSumSold(Group g) <- NULL;
        quantitySold(Group g) <- NULL;
        sumSold(Group g) <- NULL;
        
        markupSumSold(t) <- NULL;
        quantitySold(t) <- NULL;
        sumSold(t) <- NULL;               
    

        markupSumSold(Sku s) <- NUMERIC[18,4](markupSumSold(t,s,df,dt)) WHERE inSession(group(t, s)) AND isLeaf(skuGroup(s));
        quantitySold(Sku s) <- NUMERIC[18,4](quantitySold(t,s,df,dt)) WHERE inSession(group(t, s)) AND isLeaf(skuGroup(s));
        sumSold(Sku s) <- NUMERIC[18,4](sumSold(t,s,df,dt)) WHERE inSession(group(t, s)) AND isLeaf(skuGroup(s));
        
        markupSumSold(t) <- NUMERIC[18,4](markupSumSold(t,df,dt));
        quantitySold(t) <- NUMERIC[18,4](quantitySold(t,df,dt));
        sumSold(t) <- NUMERIC[18,4](sumSold(t,df,dt));                    
                        
    } ELSE {
        MESSAGE 'Не выбраны группы или склады';
    }
   
}

fillPropertyLeaf 'Заполнить листья' (GroupType t, ABCType type, DATE df, DATE dt)  { 
    IF countSelectStocks() AND countInSessionSkuGroups(t) THEN {
        markupSumSold(Sku s) <- NULL;
        quantitySold(Sku s) <- NULL;
        sumSold(Sku s) <- NULL;
        markupSumSold(Group g) <- NULL;
        quantitySold(Group g) <- NULL;
        sumSold(Group g) <- NULL;
        
        markupSumSold(t) <- NULL;
        quantitySold(t) <- NULL;
        sumSold(t) <- NULL;               
    
        markupSumSold(Group g) <- NUMERIC[18,4](markupSumSold(t,g,df,dt)) WHERE inSession(g) AND isLeaf(g) AND groupType(g) == t;
        quantitySold(Group g) <- NUMERIC[18,4](quantitySold(t,g,df,dt)) WHERE inSession(g) AND isLeaf(g) AND groupType(g) == t;
        sumSold(Group g) <- NUMERIC[18,4](sumSold(t,g,df,dt)) WHERE inSession(g) AND isLeaf(g) AND groupType(g) == t;

        markupSumSold(t) <- NUMERIC[18,4](markupSumSold(t,df,dt));
        quantitySold(t) <- NUMERIC[18,4](quantitySold(t,df,dt));
        sumSold(t) <- NUMERIC[18,4](sumSold(t,df,dt));                    
                        
    } ELSE {
        MESSAGE 'Не выбраны группы или склады';
    }
   
}

fillPropertyGroup 'Заполнить по группам' (GroupType t, ABCType type, DATE df, DATE dt)  { 
    IF countSelectStocks() AND countInSessionSkuGroups(t) THEN {
        markupSumSold(Sku s) <- NULL;
        quantitySold(Sku s) <- NULL;
        sumSold(Sku s) <- NULL;
        markupSumSold(Group g) <- NULL;
        quantitySold(Group g) <- NULL;
        sumSold(Group g) <- NULL;
        
        markupSumSold(t) <- NULL;
        quantitySold(t) <- NULL;
        sumSold(t) <- NULL;               
    
        markupSumSold(Group g) <- NUMERIC[18,4](markupSumSold(t,g,df,dt)) WHERE inSession(g) AND NOT isLeaf(g) AND groupType(g) == t;
        quantitySold(Group g) <- NUMERIC[18,4](quantitySold(t,g,df,dt)) WHERE inSession(g) AND NOT isLeaf(g) AND groupType(g) == t;
        sumSold(Group g) <- NUMERIC[18,4](sumSold(t,g,df,dt)) WHERE inSession(g) AND NOT isLeaf(g) AND groupType(g) == t;
        
        markupSumSold(t) <- NUMERIC[18,4](markupSumSold(t,df,dt));
        quantitySold(t) <- NUMERIC[18,4](quantitySold(t,df,dt));
        sumSold(t) <- NUMERIC[18,4](sumSold(t,df,dt));                    
                        
    } ELSE {
        MESSAGE 'Не выбраны группы или склады';
    }
   
}

deleteProperty 'Сбросить' ()  { 
    markupSumSold(Group g) <- NULL;
    quantitySold(Group g) <- NULL;
    sumSold(Group g) <- NULL;
    
    markupSumSold(GroupType t) <- NULL;
    quantitySold(GroupType t) <- NULL;
    sumSold(GroupType t) <- NULL; 
       
    formRefresh();   
}

FORM abcAnalysisPrint 'ABC-анализ'

    OBJECTS dates = (df = DATE, dt = DATE, t = GroupType, type= ABCType) PANEL SUBREPORT
    PROPERTIES valFrom = VALUE(df), valTo = VALUE(dt)   
        
    PROPERTIES(t) SELECTOR name
    PROPERTIES (t) quantitySold, sumSold, markupSumSold, averagePrice, averageMarkup, percMarkupSold
    PROPERTIES (t,df,dt) averageDaysSum, averageDaysMarkupSum, averageDaysQuantity        

    PROPERTIES (type) READONLY staticCaption, isSum, isQuantity, isMarkupSum
     
    PROPERTIES nameSelectStocks(), ab(), bc()    
    
    OBJECTS gg=Group 
    PROPERTIES READONLY  id(gg), name(gg)
    FILTERS groupType(gg) == t,
            inSession(gg),
            percOrder(t,gg,type), 
            sumSold(gg)  OR quantitySold(gg) OR markupSumSold(gg)

    PROPERTIES (gg) READONLY quantitySold, sumSold, markupSumSold, percMarkupSold, averagePrice, averageMarkup
    
    PROPERTIES (t,gg) READONLY percInSumSold, percInMarkupSumSold, percInQuantitySold
    PROPERTIES (gg,df,dt) averageDaysSum, averageDaysMarkupSum, averageDaysQuantity
    PROPERTIES index(gg,type)
    ORDERS index(gg,type) 
    PROPERTIES (t,gg,type) percOrder, status   

;
abcAnalysisPrint 'ABC-анализ' (GroupType t, ABCType type, DATE dateFrom, DATE dateTo) 
    { PRINT abcAnalysisPrint OBJECTS df = dateFrom, dt = dateTo, t = t, type = type; }   IMAGE 'print.png' IN print;

FORM abcAnalysis 'ABC-анализ'

    OBJECTS dates = (df = DATE, dt = DATE) PANEL
    PROPERTIES valFrom = VALUE(df), valTo = VALUE(dt)   
    
    TREE stockTree a = BPSTRING[3], sg = StockGroup PARENT parent(sg)
    PROPERTIES READONLY VALUE(a), sgTreeName = name(sg)
    ORDERS sgTreeName
    FILTERS stringEqualsAll(a), countCompanyStock(sg)
    
    OBJECTS st = Stock 
    PROPERTIES (st) READONLY name
    PROPERTIES (st) select
    FILTERS isCompany(st),
            st IS DepartmentStore,
            isParent(sg, st) OR (st IS Stock AND NOT sg)
    FILTERGROUP select
        FILTER 'Отмеченные' select(st) 
            
    OBJECTS t = GroupType PANEL 
    PROPERTIES(t) SELECTOR name
    PROPERTIES (t) quantitySold, sumSold, markupSumSold
    
    OBJECTS type= ABCType PANEL 
    PROPERTIES (type) SELECTOR staticCaption
    
    TREE groupTree g=Group PARENT parent(g)   
    PROPERTIES READONLY  order(g), name(g)
    PROPERTIES (g) inSession BACKGROUND backgroundInSession(g)
    PROPERTIES  TOOLBAR DRAW g resetSelectedGroups() //, selectLeaf(t)
    ORDERS order(g), name(g)
    FILTERS groupType(g) == t
    
    OBJECTS gg=Group 
    PROPERTIES READONLY  index(gg,type), id(gg), name(gg)
    FILTERS groupType(gg) == t,
            inSession(gg),
            percOrder(t,gg,type), 
            sumSold(gg)  OR quantitySold(gg) OR markupSumSold(gg)

    PROPERTIES (gg) READONLY quantitySold, sumSold, markupSumSold, percMarkupSold

    PROPERTIES (t,gg) READONLY percInSumSold SHOWIF isSum(type), 
                               percInMarkupSumSold SHOWIF isMarkupSum(type), 
                               percInQuantitySold SHOWIF isQuantity(type)
    PROPERTIES (t,gg,type) percOrder, status BACKGROUND backgroundStatus(t,gg,type)   
    PROPERTIES (gg) READONLY   averagePrice 
    PROPERTIES (gg,df,dt) READONLY averageDaysSum SHOWIF isSum(type),
                                   averageDaysMarkupSum SHOWIF isMarkupSum(type), 
                                   averageDaysQuantity SHOWIF isQuantity(type)                                                                                                               
                            
    ORDERS index(gg,type) 
    
    PROPERTIES  TOOLBAR DRAW gg fillPropertyLeaf(t,type,df,dt), fillPropertyGroup(t,type,df,dt), abcAnalysisPrint(t,type,df,dt)
    
    OBJECTS s=Sku
    PROPERTIES READONLY  index(s,type), name(s)
    FILTERS inSession(group(t, s)),
            percOrder(t,s,type), 
            sumSold(s)  OR quantitySold(s) OR markupSumSold(s)

    PROPERTIES (s) READONLY quantitySold, sumSold, markupSumSold, percMarkupSold

    PROPERTIES (t,s) READONLY percInSumSold SHOWIF isSum(type), 
                               percInMarkupSumSold SHOWIF isMarkupSum(type), 
                               percInQuantitySold SHOWIF isQuantity(type)
    PROPERTIES (t,s,type) percOrder, status BACKGROUND backgroundStatus(t,s,type)   
    PROPERTIES (s) READONLY   averagePrice 
    PROPERTIES (s,df,dt) READONLY averageDaysSum SHOWIF isSum(type),
                                   averageDaysMarkupSum SHOWIF isMarkupSum(type), 
                                   averageDaysQuantity SHOWIF isQuantity(type)                                                                                                               
                            
    ORDERS index(s,type) 
    
    PROPERTIES  TOOLBAR DRAW s fillPropertySku(t,type,df,dt)  
    
    EVENTS ON CHANGE df deleteProperty() 
    EVENTS ON CHANGE dt deleteProperty() 
    EVENTS ON CHANGE t deleteProperty()
    EVENTS ON INIT {
        SEEK abcAnalysis.t = defaultGroupType() IF defaultGroupType(); 
    }
;
DESIGN abcAnalysis {
    BOX {
        NEW header { 
            caption = 'Шапка';
            horizontal = TRUE;
            MOVE BOX(dates);
            MOVE BOX(st);
            MOVE BOX(t);
            MOVE BOX(type) {
                MOVE PROPERTY (staticCaption(type)){ caption = 'Наименование';}
            }
        }
        NEW sum {
            caption = 'Итоги';
            horizontal = TRUE;
            MOVE PROPERTY (quantitySold(t)) { charWidth = 15;}
            MOVE PROPERTY (sumSold(t)) { charWidth = 15;}
            MOVE PROPERTY (markupSumSold(t)) { charWidth = 15;}
        }
        NEW tab {
            fill = 1;
            tabbed = TRUE;
            NEW param {
                caption = 'Параметры';
                NEW param1{
                    fill = 1;
                    horizontal = TRUE;
                    caption = 'Склады';
                    MOVE BOX(TREE stockTree);
                    MOVE BOX(st);
                }
                MOVE BOX(TREE groupTree){caption = 'Группы';}
            }
            
            MOVE BOX(gg){caption = 'Результат по группам'; }
            MOVE BOX(s){caption = 'Результат по товарам'; }
           
        }
         
    }
    MOVE TOOLBARBOX;
}


NAVIGATOR {
    retailNavigator {
        NEW FOLDER abcNavigator 'ABC-анализ' {
            NEW abcAnalysis;
        }
    }
}
statusSumBest 'Рейтинг' (GroupType t, Group g) = CASE 
    WHEN  percOrderInSumBest(t,g) <= ab() THEN 'A'
    WHEN  percOrderInSumBest(t,g) <= bc() AND percOrderInSumBest(t,g) > ab() THEN 'B'
    WHEN  percOrderInSumBest(t,g) THEN 'C'
;
statusMarkupBest 'Рейтинг' (GroupType t, Group g) = CASE
    WHEN  percOrderInMarkupBest(t,g) <= ab() THEN 'A'
    WHEN  percOrderInMarkupBest(t,g) <= bc() AND percOrderInMarkupBest(t,g) > ab() THEN 'B'
    WHEN  percOrderInMarkupBest(t,g) THEN 'C'
;
statusQuantityBest 'Рейтинг' (GroupType t, Group g) = CASE
    WHEN  percOrderInQuantityBest(t,g) <= ab() THEN 'A'
    WHEN  percOrderInQuantityBest(t,g) <= bc() AND percOrderInQuantityBest(t,g) > ab() THEN 'B'
    WHEN  percOrderInQuantityBest(t,g) THEN 'C'
;
statusSumBest 'Рейтинг' (GroupType t, Sku s) = CASE 
    WHEN  percOrderInSumBest(t,s) <= ab() THEN 'A'
    WHEN  percOrderInSumBest(t,s) <= bc() AND percOrderInSumBest(t,s) > ab() THEN 'B'
    WHEN  percOrderInSumBest(t,s) THEN 'C'
;
statusMarkupBest 'Рейтинг' (GroupType t, Sku s) = CASE
    WHEN  percOrderInMarkupBest(t,s) <= ab() THEN 'A'
    WHEN  percOrderInMarkupBest(t,s) <= bc() AND percOrderInMarkupBest(t,s) > ab() THEN 'B'
    WHEN  percOrderInMarkupBest(t,s) THEN 'C'
;
statusQuantityBest 'Рейтинг' (GroupType t, Sku s) = CASE
    WHEN  percOrderInQuantityBest(t,s) <= ab() THEN 'A'
    WHEN  percOrderInQuantityBest(t,s) <= bc() AND percOrderInQuantityBest(t,s) > ab() THEN 'B'
    WHEN  percOrderInQuantityBest(t,s) THEN 'C'
;

//--
statusSumWorst 'Рейтинг' (GroupType t, Group g) = CASE 
    WHEN  percOrderInSumWorst(t,g) <= ab() THEN 'A'
    WHEN  percOrderInSumWorst(t,g) <= bc() AND percOrderInSumWorst(t,g) > ab() THEN 'B'
    WHEN  percOrderInSumWorst(t,g) THEN 'C'
;
statusMarkupWorst 'Рейтинг' (GroupType t, Group g) = CASE
    WHEN  percOrderInMarkupWorst(t,g) <= ab() THEN 'A'
    WHEN  percOrderInMarkupWorst(t,g) <= bc() AND percOrderInMarkupWorst(t,g) > ab() THEN 'B'
    WHEN  percOrderInMarkupWorst(t,g) THEN 'C'
;
statusQuantityWorst 'Рейтинг' (GroupType t, Group g) = CASE
    WHEN  percOrderInQuantityWorst(t,g) <= ab() THEN 'A'
    WHEN  percOrderInQuantityWorst(t,g) <= bc() AND percOrderInQuantityWorst(t,g) > ab() THEN 'B'
    WHEN  percOrderInQuantityWorst(t,g) THEN 'C'
;
statusSumWorst 'Рейтинг' (GroupType t, Sku s) = CASE 
    WHEN  percOrderInSumWorst(t,s) <= ab() THEN 'A'
    WHEN  percOrderInSumWorst(t,s) <= bc() AND percOrderInSumWorst(t,s) > ab() THEN 'B'
    WHEN  percOrderInSumWorst(t,s) THEN 'C'
;
statusMarkupWorst 'Рейтинг' (GroupType t, Sku s) = CASE
    WHEN  percOrderInMarkupWorst(t,s) <= ab() THEN 'A'
    WHEN  percOrderInMarkupWorst(t,s) <= bc() AND percOrderInMarkupWorst(t,s) > ab() THEN 'B'
    WHEN  percOrderInMarkupWorst(t,s) THEN 'C'
;

statusQuantityWorst 'Рейтинг' (GroupType t, Sku s) = CASE
    WHEN  percOrderInQuantityWorst(t,s) <= ab() THEN 'A'
    WHEN  percOrderInQuantityWorst(t,s) <= bc() AND percOrderInQuantityWorst(t,s) > ab() THEN 'B'
    WHEN  percOrderInQuantityWorst(t,s) THEN 'C'
;

FORM abcBestPrint 'Топ лучших'

    OBJECTS dates = (df = DATE, dt = DATE, t = GroupType, type= ABCType) PANEL SUBREPORT
    PROPERTIES valFrom = VALUE(df), valTo = VALUE(dt)    

    PROPERTIES (type) READONLY staticCaption, isSum, isQuantity, isMarkupSum
                
    PROPERTIES(t) SELECTOR name
    PROPERTIES (t) sumWorst, markupWorst, quantityWorst, sumBest, markupBest, quantityBest
     
    PROPERTIES nameSelectStocks(), ab(), bc(), best(), worst()    
    
    // выручка
    OBJECTS gg=Group 
    PROPERTIES READONLY  indexSumBest(gg), id(gg), name(gg)
    FILTERS groupType(gg) == t,
            inSession(gg),
            sumSold(gg)  OR quantitySold(gg) OR markupSumSold(gg),
            indexSumBest(gg) <= best()
    ORDERS indexSumBest(gg)
    PROPERTIES (gg) READONLY quantitySold, sumSold, markupSumSold, percMarkupSold

    PROPERTIES (t,gg) READONLY percInSumBest, percOrderInSumBest

    PROPERTIES (t,gg) statusSumBest 
    PROPERTIES (gg) READONLY   averagePrice 
    PROPERTIES (gg,df,dt) READONLY averageDaysSum    
    
    // доход
    OBJECTS ggg=Group 
    PROPERTIES READONLY  indexMarkupBest(ggg), id(ggg), name(ggg)
    FILTERS groupType(ggg) == t,
            inSession(ggg),
            sumSold(ggg)  OR quantitySold(ggg) OR markupSumSold(ggg),
            indexMarkupBest(ggg) <= best()
    ORDERS indexMarkupBest(ggg)
    PROPERTIES (ggg) READONLY quantitySold, sumSold, markupSumSold, percMarkupSold

    PROPERTIES (t,ggg) READONLY percInMarkupBest, percOrderInMarkupBest

    PROPERTIES (t,ggg) statusMarkupBest 
    PROPERTIES (ggg) READONLY   averagePrice 
    PROPERTIES (ggg,df,dt) READONLY averageDaysMarkupSum  
     
    // кол-во
    OBJECTS g=Group 
    PROPERTIES READONLY  indexQuantityBest(g), id(g), name(g)
    FILTERS groupType(g) == t,
            inSession(g),
            sumSold(g)  OR quantitySold(g) OR markupSumSold(g),
            indexQuantityBest(g) <= best()
    ORDERS indexQuantityBest(g)
    PROPERTIES (g) READONLY quantitySold, sumSold, markupSumSold, percMarkupSold

    PROPERTIES (t,g) READONLY percInQuantityBest, percOrderInQuantityBest

    PROPERTIES (t,g) statusQuantityBest 
    PROPERTIES (g) READONLY   averagePrice 
    PROPERTIES (g,df,dt) READONLY averageDaysQuantity
    
    // выручка по товару
    OBJECTS ss=Sku 
    PROPERTIES READONLY  indexSumBest(ss), id(ss), name(ss)
    FILTERS groupType(skuGroup(ss)) == t,
            inSession(skuGroup(ss)),
            sumSold(ss)  OR quantitySold(ss) OR markupSumSold(ss),
            indexSumBest(ss) <= best()
    ORDERS indexSumBest(ss)
    PROPERTIES (ss) READONLY quantitySold, sumSold, markupSumSold, percMarkupSold

    PROPERTIES (t,ss) READONLY percInSumBest, percOrderInSumBest

    PROPERTIES (t,ss) statusSumBest 
    PROPERTIES (ss) READONLY   averagePrice 
    PROPERTIES (ss,df,dt) READONLY averageDaysSum    
    
    // доход по товару
    OBJECTS sss=Sku 
    PROPERTIES READONLY  indexMarkupBest(sss), id(sss), name(sss)
    FILTERS groupType(skuGroup(sss)) == t,
            inSession(skuGroup(sss)),
            sumSold(sss)  OR quantitySold(sss) OR markupSumSold(sss),
            indexMarkupBest(sss) <= best()
    ORDERS indexMarkupBest(sss)
    PROPERTIES (sss) READONLY quantitySold, sumSold, markupSumSold, percMarkupSold

    PROPERTIES (t,sss) READONLY percInMarkupBest, percOrderInMarkupBest

    PROPERTIES (t,sss) statusMarkupBest 
    PROPERTIES (sss) READONLY   averagePrice 
    PROPERTIES (sss,df,dt) READONLY averageDaysMarkupSum  
     
    // кол-во по товару
    OBJECTS s = Sku 
    PROPERTIES READONLY  indexQuantityBest(s), id(s), name(s)
    FILTERS groupType(skuGroup(s)) == t,
            inSession(skuGroup(s)),
            sumSold(s)  OR quantitySold(s) OR markupSumSold(s),
            indexQuantityBest(s) <= best()
    ORDERS indexQuantityBest(s)
    PROPERTIES (s) READONLY quantitySold, sumSold, markupSumSold, percMarkupSold

    PROPERTIES (t,s) READONLY percInQuantityBest, percOrderInQuantityBest

    PROPERTIES (t,s) statusQuantityBest 
    PROPERTIES (s) READONLY   averagePrice 
    PROPERTIES (s,df,dt) READONLY averageDaysQuantity       
           
;
abcBestPrint 'Топ лучших' (GroupType t, ABCType type, DATE dateFrom, DATE dateTo) 
    { PRINT abcBestPrint OBJECTS df = dateFrom, dt = dateTo, t = t, type = type; }   IMAGE 'print.png' IN print;

abcBestPrintSku 'Топ лучших' (GroupType t, ABCType type, DATE dateFrom, DATE dateTo) 
    { PRINT abcBestPrint OBJECTS df = dateFrom, dt = dateTo, t = t, type = type; }   IMAGE 'print.png' IN print;

    
FORM abcWorstPrint 'Топ худших'

    OBJECTS dates = (df = DATE, dt = DATE, t = GroupType, type= ABCType) PANEL SUBREPORT
    PROPERTIES valFrom = VALUE(df), valTo = VALUE(dt)    

    PROPERTIES (type) READONLY staticCaption, isSum, isQuantity, isMarkupSum  
        
    PROPERTIES(t) SELECTOR name
    PROPERTIES (t) sumWorst, markupWorst, quantityWorst, sumBest, markupBest, quantityBest
     
    PROPERTIES nameSelectStocks(), ab(), bc(), best(), worst()    
    
    // выручка
    OBJECTS gg=Group 
    PROPERTIES READONLY  indexSumWorst(gg), id(gg), name(gg)
    FILTERS groupType(gg) == t,
            inSession(gg),
            sumSold(gg)  OR quantitySold(gg) OR markupSumSold(gg),
            indexSumWorst(gg) <= worst()
    ORDERS indexSumWorst(gg)
    PROPERTIES (gg) READONLY quantitySold, sumSold, markupSumSold, percMarkupSold

    PROPERTIES (t,gg) READONLY percInSumWorst, percOrderInSumWorst

    PROPERTIES (t,gg) statusSumWorst 
    PROPERTIES (gg) READONLY   averagePrice 
    PROPERTIES (gg,df,dt) READONLY averageDaysSum    
    
    // доход
    OBJECTS ggg=Group 
    PROPERTIES READONLY  indexMarkupWorst(ggg), id(ggg), name(ggg)
    FILTERS groupType(ggg) == t,
            inSession(ggg),
            sumSold(ggg)  OR quantitySold(ggg) OR markupSumSold(ggg),
            indexMarkupWorst(ggg) <= worst()
    ORDERS indexMarkupWorst(ggg)
    PROPERTIES (ggg) READONLY quantitySold, sumSold, markupSumSold, percMarkupSold

    PROPERTIES (t,ggg) READONLY percInMarkupWorst, percOrderInMarkupWorst

    PROPERTIES (t,ggg) statusMarkupWorst 
    PROPERTIES (ggg) READONLY   averagePrice 
    PROPERTIES (ggg,df,dt) READONLY averageDaysMarkupSum  
     
    // кол-во
    OBJECTS g=Group 
    PROPERTIES READONLY  indexQuantityWorst(g), id(g), name(g)
    FILTERS groupType(g) == t,
            inSession(g),
            sumSold(g)  OR quantitySold(g) OR markupSumSold(g),
            indexQuantityWorst(g) <= worst()
    ORDERS indexQuantityWorst(g)
    PROPERTIES (g) READONLY quantitySold, sumSold, markupSumSold, percMarkupSold

    PROPERTIES (t,g) READONLY percInQuantityWorst, percOrderInQuantityWorst

    PROPERTIES (t,g) statusQuantityWorst 
    PROPERTIES (g) READONLY   averagePrice 
    PROPERTIES (g,df,dt) READONLY averageDaysQuantity
     // выручка по товару
     OBJECTS ss=Sku 
     PROPERTIES READONLY  indexSumWorst(ss), id(ss), name(ss)
     FILTERS groupType(skuGroup(ss)) == t,
             inSession(skuGroup(ss)),
             sumSold(ss)  OR quantitySold(ss) OR markupSumSold(ss),
             indexSumWorst(ss) <= worst()
     ORDERS indexSumWorst(ss)
     PROPERTIES (ss) READONLY quantitySold, sumSold, markupSumSold, percMarkupSold
 
     PROPERTIES (t,ss) READONLY percInSumWorst, percOrderInSumWorst
 
     PROPERTIES (t,ss) statusSumWorst 
     PROPERTIES (ss) READONLY   averagePrice 
     PROPERTIES (ss,df,dt) READONLY averageDaysSum    
     
     // доход по товару
     OBJECTS sss=Sku 
     PROPERTIES READONLY  indexMarkupWorst(sss), id(sss), name(sss)
     FILTERS groupType(skuGroup(sss)) == t,
             inSession(skuGroup(sss)),
             sumSold(sss)  OR quantitySold(sss) OR markupSumSold(sss),
             indexMarkupWorst(sss) <= worst()
     ORDERS indexMarkupWorst(sss)
     PROPERTIES (sss) READONLY quantitySold, sumSold, markupSumSold, percMarkupSold
 
     PROPERTIES (t,sss) READONLY percInMarkupWorst, percOrderInMarkupWorst
 
     PROPERTIES (t,sss) statusMarkupWorst 
     PROPERTIES (sss) READONLY   averagePrice 
     PROPERTIES (sss,df,dt) READONLY averageDaysMarkupSum  
                
    // кол-во по товару
    OBJECTS s=Sku
    PROPERTIES READONLY  indexQuantityWorst(s), id(s), name(s)
    FILTERS groupType(skuGroup(s)) == t,
            inSession(skuGroup(s)),
            sumSold(s)  OR quantitySold(s) OR markupSumSold(s),
            indexQuantityWorst(s) <= worst()
    ORDERS indexQuantityWorst(s)
    PROPERTIES (s) READONLY quantitySold, sumSold, markupSumSold, percMarkupSold

    PROPERTIES (t,s) READONLY percInQuantityWorst, percOrderInQuantityWorst

    PROPERTIES (t,s) statusQuantityWorst 
    PROPERTIES (s) READONLY   averagePrice 
    PROPERTIES (s,df,dt) READONLY averageDaysQuantity       
           
;
abcWorstPrint 'Топ худших' (GroupType t, ABCType type, DATE dateFrom, DATE dateTo) 
    { PRINT abcWorstPrint OBJECTS df = dateFrom, dt = dateTo, t = t, type = type; }   IMAGE 'print.png' IN print;

abcWorstPrintSku'Топ худших' (GroupType t, ABCType type, DATE dateFrom, DATE dateTo) 
    { PRINT abcWorstPrint OBJECTS df = dateFrom, dt = dateTo, t = t, type = type; }   IMAGE 'print.png' IN print;

    
EXTEND FORM abcAnalysis 
    PROPERTIES  TOOLBAR DRAW gg abcBestPrint(t,type,df,dt), abcWorstPrint(t,type,df,dt)
    PROPERTIES  TOOLBAR DRAW s abcBestPrintSku(t,type,df,dt), abcWorstPrintSku(t,type,df,dt)
;