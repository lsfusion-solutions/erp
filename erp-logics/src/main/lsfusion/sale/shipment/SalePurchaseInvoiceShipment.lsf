MODULE SalePurchaseInvoiceShipment;

REQUIRE PurchaseShipment, SalePurchaseInvoice, SaleShipment, SalePurchaseShipment;

PRIORITY Sale;

//----------------------------------------------------------------------------//

GROUP shipment 'Информация о поставке' : base;

// Галочка по созданию акта расценки на закупке
@defineDocumentInterfaceProperty (invoice, createPurchaseShipment, 'Создать поставку (закупка)');

// -- Операция
@defineOperationProperty(createPurchaseShipment, 'Поставка (закупка)', purchaseContainer);
@deriveDocumentOperationProperty(UserInvoice, createPurchaseShipment);
createPurchase (UserShipment o) <- createPurchaseShipment(operation(o))
    WHEN CHANGED(operation(o));

backgroundPurchaseShipment 'Цвет' (Invoice invoice) = RGB(238, 250, 200) IF invoice IS Invoice;
//--
createShipment(PurchaseInvoice invoice) += createPurchaseShipment(invoice(invoice));

@defineDocumentInterfaceDetailPricePrefix(invoice, purchaseShipment, ' учетная (закупка)');
@defineDocumentInterfaceDetailQuantityPrefix (invoice, purchaseShipment, ' поставлено (закупка)');

skipChangedPurchaseShipmentQuantity =  ABSTRACT BOOLEAN (UserInvoiceDetail);

purchaseShipmentQuantity(UserInvoiceDetail detail) <- shipmentQuantity(detail) WHEN CHANGED(shipmentQuantity(detail)) AND NOT skipChangedPurchaseShipmentQuantity(detail);

@defineDocumentInterfaceDetailExpiryDatePrefix(invoice, purchase);
purchaseExpiryDate(UserInvoiceDetail detail) <- prevExpiryDate(batch(detail)) WHEN CHANGED (batch(detail));
expiryDate(PurchaseInvoiceDetail detail) += purchaseExpiryDate(invoiceDetail(detail));

@defineDocumentInterfaceDetailManufactureDatePrefix(invoice, purchase);
purchaseManufactureDate(UserInvoiceDetail detail) <- prevManufactureDate(batch(detail)) WHEN CHANGED (batch(detail));
manufactureDate(PurchaseInvoiceDetail detail) += purchaseManufactureDate(invoiceDetail(detail));

@defineDocumentInterfaceHeaderTimePrefix(Invoice, purchaseShipment, ' поставки (закупка)');
WHEN LOCAL (CHANGED(shipmentDate(UserInvoice i)) OR CHANGED(shipmentTime(i)) OR SET(createPurchaseShipment(i))) AND createPurchaseShipment(i) DO {
    purchaseShipmentDate(i) <- shipmentDate(i);    
    purchaseShipmentTime(i) <- shipmentTime(i);    
}

@defineDocumentInterfaceDetailDataSumPrefix (invoice, purchaseShipment, ' учетная (закупка)');
@deriveDocumentDetailSumPrefix(userInvoice, purchaseShipment, currency, purchaseShipmentQuantity);

@defineDocumentInterfaceHeaderCreateShipment (invoice);
@defineDocumentInterfaceHeaderSumPrefix (invoice, purchaseShipment, ' учетная (закупка)');

shipmentDate(PurchaseInvoice invoice) += purchaseShipmentDate(invoice(invoice));
shipmentTime(PurchaseInvoice invoice) += purchaseShipmentTime(invoice(invoice));

shipmentQuantity(PurchaseInvoiceDetail detail) += purchaseShipmentQuantity(invoiceDetail(detail));
shipmentPrice(PurchaseInvoiceDetail detail) += purchaseShipmentPrice(invoiceDetail(detail));
shipmentSum (PurchaseInvoiceDetail detail) += purchaseShipmentSum(invoiceDetail(detail));

showPurchaseShipment(UserInvoice i) = createPurchaseShipment(i) OR createPurchaseInvoice(i); 
showPurchaseShipment(UserInvoiceDetail d) = showPurchaseShipment(userInvoice(d)); 

EXTEND FORM userInvoice
    PROPERTIES(i) BACKGROUND backgroundPurchaseShipment(i) SHOWIF createPurchaseInvoice(i) createPurchaseShipment
    PROPERTIES(i) BACKGROUND backgroundPurchaseShipment(i) SHOWIF createPurchaseShipment(i) purchaseShipmentSumUserInvoiceDetail,
                  purchaseShipmentDate, purchaseShipmentTime
    PROPERTIES(d) BEFORE deleteid SHOWIF createPurchaseShipment[Invoice](i) BACKGROUND backgroundPurchaseShipment(i)
                  purchaseExpiryDate, purchaseManufactureDate, nameCustomerStock, purchaseShipmentSum
    PROPERTIES(d) BEFORE purchaseShipmentSum(d) SHOWIF showPurchaseShipment(i) BACKGROUND backgroundPurchaseShipment(i)
                  purchaseShipmentPrice  
    PROPERTIES(d) purchaseShipmentQuantity AFTER quantity(d) SHOWIF createPurchaseShipment[Invoice](i) BACKGROUND backgroundPurchaseShipment(i)
;
DESIGN userInvoice {
    headerCreateDocuments{
        NEW headerCreatePurchaseShipment {
            caption = 'Поставка (закупка)';
            horizontal = TRUE;
            MOVE PROPERTY(createPurchaseShipment(i));
            MOVE PROPERTY(purchaseShipmentDate(i));
            MOVE PROPERTY(purchaseShipmentTime(i));
        }
    }
}

EXTEND FORM invoices
    PROPERTIES(i) READONLY BACKGROUND backgroundPurchaseShipment(i) purchaseShipmentSumInvoiceDetail BEFORE orders(i)
    PROPERTIES(d) READONLY SHOWIF createPurchaseShipment(i) BACKGROUND backgroundPurchaseShipment(i)
                  purchaseExpiryDate, purchaseManufactureDate, nameCustomerStock, purchaseShipmentPrice, purchaseShipmentSum
    PROPERTIES(d) READONLY purchaseShipmentQuantity AFTER quantity(d) SHOWIF createPurchaseShipment(i) BACKGROUND backgroundPurchaseShipment(i)
;

// ------------------------------- Расчет учетной цены для поставки ------------------------ //
overPurchaseShipmentPrice = ABSTRACT NUMERIC[16,4] (UserInvoiceDetail) MATERIALIZED;
calcPurchaseShipmentPrice (UserInvoiceDetail detail) = OVERRIDE overPurchaseShipmentPrice(detail), price(detail) MATERIALIZED;

extraPurchaseShipmentPrice = ABSTRACT NUMERIC[16,4] (UserInvoiceDetail) MATERIALIZED;    // на всякий случай

// Цены учетные

purchaseShipmentPrice(UserInvoiceDetail detail) <- calcPurchaseShipmentPrice(detail) (+) extraPurchaseShipmentPrice(detail) WHEN
    (CHANGED(calcPurchaseShipmentPrice(detail)) OR
     CHANGED(extraPurchaseShipmentPrice(detail)) OR
     CHANGED(showPurchaseShipment(detail)))
        AND showPurchaseShipment(detail);

receiveShipment (PurchaseInvoice invoice)+ { 
    IF invoice IS PurchaseInvoice THEN {
        createPurchaseShipment(Invoice i) <- TRUE WHERE i == invoice(invoice);
        purchaseShipmentDate(Invoice i) <- currentDate() WHERE i == invoice(invoice);
        purchaseShipmentTime(Invoice i) <- currentTime() WHERE i == invoice(invoice);
    } 
};

deleteCreate (Purchase.InvoiceShipment shipment)+ WHEN invoice(shipment) IS PurchaseInvoice THEN  { 
    createPurchaseShipment(Invoice invoice) <- NULL WHERE invoice == invoice(invoice(shipment));          
};

//-- Расчет документов, которые в пути

// продажа
quantityPurchaseShipmentDetail 'Поставлено' (saleInvoiceDetail) = GROUP SUM quantity(Purchase.ShipmentDetail d) BY invoiceDetail(invoiceDetail(d));

quantityPurchase 'Поставлено' (ShipmentDetail d) = quantityPurchaseShipmentDetail(invoiceDetail(d));
quantityPurchaseShipmentDetail 'Поставлено' (d) = GROUP SUM quantity(Purchase.ShipmentDetail pd) BY shipmentDetail(pd);

quantityShippedSale 'Поставлено (кол-во)' (s) = GROUP SUM (quantityPurchaseShipmentDetail(ShipmentDetail d) (+) quantityPurchase(d)) BY shipment(d);

isTransitSale 'В пути' (Shipment s) = isCompany(supplier(s)) AND isCompany(customer(s)) AND customer(s) == supplier(s) AND NOT quantityShippedSale(s);
