MODULE SaleReturnShipment;

REQUIRE Shipment, SaleReturnInvoice, OrderShipment, InvoiceShipment, PriceListLedger, StockDocumentSkuLedger;

PRIORITY Sale, Operation;

NAMESPACE SaleReturn;


//----------------------------------------------- Поставка ---------------------------------------------------//

@defineShipment('Возвраты', ' (продажа-возврат)', supplier, company, customer, company, SaleReturn, sr);
@extendFormFilterAccessStock(Shipment, s, shipments, supplierStock, company);

@defineShipmentBatch(supplierStock);
@implementDocumentBatch(shipment);

@implementDocumentBatchForm(srs);

@defineShipmentBatchDialog();

in(Shipment s) += s IS Shipment;

expiryDate(UserShipmentDetail detail) <- prevExpiryDate(batch(detail)) WHEN CHANGED (batch(detail));

@defineShipmentStockDestination(customerStock, supplierStock);

@defineOrderShipment(' (продажа-возврат)', supplierStock);
@defineInvoiceShipment(' (продажа-возврат)', supplierStock, company, SaleReturn);
@defineInvoiceShipmentAction(' (продажа-возврат)');

@defineInvoiceShipmentBatch();

@defineDocumentSkuStockSupplier (userShipment, userShipment, s);
@defineDocumentBatchStockSupplier(userShipment, userShipment, s);

//------------------------------------------------- Операции ------------------------------------------------------//

@defineDocumentOperationContainer(shipment, s, overName);
operation[Shipment.Shipment](Shipment s)+=operation(s);
@extendFormFilterRoleAccess(shipment, s, shipments);
@defineDocumentOperationConstraint(shipment, 'поставка (продажа-возврат)', SaleReturn);

@defineDocumentOperationLegalEntity(userShipment, supplier, 'Поставщик');
@deriveDocumentOperationLegalEntity(userShipment, supplier, userShipment);
@defineDocumentOperationLegalEntity(userShipment, customer, 'Покупатель');
@deriveDocumentOperationLegalEntity(userShipment, customer, userShipment);
@defineDocumentOperationStock(userShipment, supplier, 'Склад поставщика');
@deriveDocumentOperationStock(userShipment, supplier, userShipment);
@defineDocumentOperationStock(userShipment, customer, 'Склад покупателя');
@deriveDocumentOperationStock(userShipment, customer, userShipment);

@defineDocumentOperationRole(userShipment);

@deriveDocumentOperationProperty(UserInvoice, createShipment);
createShipment(Order o) += createShipment(operation(o));

overFillInvoice(UserShipment s, Invoice i) + { 
    operation(s) <- operation(i);
}
operation(InvoiceShipment shipment) += operation(invoice(shipment));

overFillOrder(UserShipment s, Order o) + { 
    operation(s) <- operation(o);
}

// Добавляем в копирование поставок
overCopy(Shipment s, UserShipment d) + { 
    operation(d) <- operation(s);
}
@defineReturnOperationFilterProperty(shipment, s, shipments, nameFilterShipmentSupplier);
//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplier(UserShipment userShipment) AND NOT isCompany(supplier(userShipment))
    CHECKED BY supplier[UserShipment] MESSAGE 'Для поставки выбрано в качестве поставщика организация, не являющаяся компанией';
CONSTRAINT customer(UserShipment userShipment) AND NOT isCustomer(customer(userShipment))
    CHECKED BY customer[UserShipment] MESSAGE 'Для поставки выбрано в качестве покупателя организация, не являющаяся покупателем';
    
CONSTRAINT filterShipmentSupplier() AND NOT isCompany(filterShipmentSupplier())
    CHECKED BY filterShipmentSupplier[] MESSAGE 'Для фильтра в поставке выбрана в качестве поставщика организация, не являющаяся компанией';
CONSTRAINT filterShipmentSupplierStock() AND NOT isCompany(filterShipmentSupplierStock())
    CHECKED BY filterShipmentSupplierStock[] MESSAGE 'Для фильтра в поставке выбран в качестве склада поставщика склад, который не принадлежит компании';  
CONSTRAINT filterShipmentCustomer() AND NOT isCustomer(filterShipmentCustomer())
    CHECKED BY filterShipmentCustomer[] MESSAGE 'Для фильтра в поставке выбрана в качестве покупателя организация, не являющаяся покупателем';    

CONSTRAINT filterShipmentSupplier() AND filterShipmentSupplierStock() AND NOT in(filterShipmentSupplier(), filterShipmentSupplierStock())
    CHECKED BY filterShipmentSupplierStock[] MESSAGE 'Поставщик и склад поставщика в фильтре для поставки не имеют связи';
CONSTRAINT filterShipmentCustomer() AND filterShipmentCustomerStock() AND NOT in(filterShipmentCustomer(), filterShipmentCustomerStock())
    CHECKED BY filterShipmentCustomerStock[] MESSAGE 'Покупатель и склад покупателя в фильтре для поставки не имеют связи';      
//------------------------------ Ввод в упаковках -----------------------------//

@defineDocumentPack(shipment, s);
packQuantity[Shipment.ShipmentDetail](ShipmentDetail detail) += packQuantity(detail);
DESIGN userShipment {
    headerExtraParams {
        NEW headerPack {
            caption = 'Упаковка';
            MOVE PROPERTY(showPack(s));
        }
    }
}

@deriveDocumentOperationProperty(UserShipment, showPack);

@defineOrderShipmentPack();
@defineInvoiceShipmentPack();

//------------------------------ Автоматическое проставление свойств -----------------------------//

@deriveDocumentLegalEntityDefaultStock(UserShipment, customer, userShipment);

@defineDocumentLegalEntityStockAccess(UserShipment, supplier, company, userShipment);

//------------------------------ Расширение формы -----------------------------//

// Фильтры
in (UserShipment userShipment, Sku sku)= inCustomer(customer(userShipment), sku);
EXTEND FORM userShipment

    FILTERGROUP filter
        FILTER 'С остатком ' prevCurrentBalance(ks, s) 'F10' DEFAULT
        FILTER 'В документе ' quantityUserShipmentDetail(ks, s) 'F9'

    FILTERGROUP filter2
        FILTER 'С продажей ' in(s, ks) 'F8'
//        FILTER 'В прайсе' 'F7' ledgerPriceSkuUserShipment(ks, s)

;
in (UserShipment userShipment, Batch batch)= inCustomer(customer(userShipment), sku(batch));
EXTEND FORM userShipment

    FILTERGROUP filter3
        FILTER 'С остатком ' prevCurrentBalance(b,s) 'F10' DEFAULT
        FILTER 'В документе ' quantityUserShipmentDetail(b,s) 'F9'

    FILTERGROUP filter4
        FILTER 'С продажей ' in(s,b) 'F8'
//        FILTER 'В прайсе' 'F7' ledgerPriceBatchUserShipment(b, s)

;

// Резервы
@extendFormDocumentSkuOrderLedger(shipment, userShipment, s, supplierStock);
@extendFormDocumentSkuOrderLedgerAll(userShipment, userShipment, s);

@extendFormDocumentBatchOrderLedger(userShipment, userShipment, s, supplierStock);
@extendFormDocumentBatchOrderLedgerAll(userShipment, userShipment, s);

// ------------------------------- Расчет учетной цены для поставки ------------------------ //

disableUpdateShipmentPrice = ABSTRACT VALUE BOOLEAN (UserInvoiceDetail);
saleReturnShipmentPriceBatch  = ABSTRACT NUMERIC[16,4] (UserInvoiceDetail); //использовать цены от склада партии, если нет цены для склада поставщика

WHEN LOCAL (CHANGED(supplierStock(UserInvoiceDetail detail)) OR
            (CHANGED(dateTime(detail)) AND NOT isPosted(detail)) OR
            SETCHANGED(batch(detail))) AND batch(detail) AND NOT CHANGED(shipmentPrice(detail)) AND NOT disableUpdateShipmentPrice(detail) AND NOT skipUpdatePriceAccount() DO
    shipmentPrice (detail) <- OVERRIDE prevAccountPriceB(batch(detail), supplierStock(detail), dateTime(detail)), saleReturnShipmentPriceBatch(detail);

WHEN LOCAL (CHANGED(sku(UserInvoiceDetail detail)) OR
            CHANGED(supplierStock(detail)) OR
            (CHANGED(dateTime(detail)) AND NOT isPosted(detail)) OR
            DROPPED(batch(detail))) AND NOT batch(detail) AND NOT CHANGED(shipmentPrice(detail)) AND NOT disableUpdateShipmentPrice(detail) AND NOT skipUpdatePriceAccount() DO
    shipmentPrice (detail) <- prevAccountPriceB(sku(detail), supplierStock(detail), dateTime(detail));



@deriveDocumentDetailPriceAccountBatchDisable (userShipment, sku, supplierStock);

// ------------------------------- Проведение по товарному отчету ------------------------ //
@implementStockDocumentLedgerInc(Shipment, supplierStock);
type(Shipment l) += STRING[50]('Продажа-возврат') IF l IS Shipment;
overSumItemShipmentDetail = ABSTRACT NUMERIC[18,4] (Shipment);
sumItem (Shipment ledger) += OVERRIDE overSumItemShipmentDetail(ledger), sumItemShipmentDetail(ledger);

overSumContainerShipmentDetail = ABSTRACT NUMERIC[18,4] (Shipment);
sumContainer (Shipment ledger) += OVERRIDE overSumContainerShipmentDetail(ledger), sumContainerShipmentDetail(ledger);

legalEntity(Shipment ledger) += customer(ledger);  
legalEntityStock(Shipment ledger) += customerStock(ledger);  

operation[StockDocumentLedger](Shipment ledger) += operation(ledger);
isReturn(Shipment ledger) += ledger IS Shipment;
close[StockDocumentLedger](Shipment l) + {  close(l); }

// ------------------------------- Проведение по регистру остатков ------------------------ //
@implementSkuLedgerInLIFO(ShipmentDetail, sku, supplierStock);
quantity[InLIFOSkuLedger] (ShipmentDetail ledger) += quantity(ledger);
batch[SkuLedger](ShipmentDetail ledger) += batch(ledger);
@implementSkuLedgerInLIFOBatchBalance(shipmentDetail, supplierStock);

overSum = ABSTRACT NUMERIC[18,4] (ShipmentDetail);
sum[InSkuLedger](ShipmentDetail ledger) += OVERRIDE overSum(ledger), sum(ledger);
stockDocumentLedger(ShipmentDetail ledger) += shipment(ledger);
cost(ShipmentDetail detail, Batch batch) += cost[SkuLedger,Batch](detail, batch) IF detail IS ShipmentDetail;
  
show[SkuLedger](ShipmentDetail d) + {  show(d); }
// ------------------------------- Себестоимость продажи ------------------------ //
costSale (invoiceDetail) = GROUP SUM costSum(ShipmentDetail shipmentDetail) BY invoiceDetail(shipmentDetail);
costSum(InvoiceDetail ledger) += WHEN ledger IS SaleReturn.InvoiceDetail THEN -costSale(ledger);
cost(InvoiceDetail ledger, Batch batch) += -cost (ledger, batch) ;

receiveShipment (UserInvoice invoice)+ { 
    IF invoice IS UserInvoice THEN {
        createShipment(invoice) <- TRUE;           
    }
};

deleteCreate (InvoiceShipment shipment)+ WHEN invoice(shipment) IS UserInvoice THEN  { 
    createShipment(Invoice invoice) <- NULL WHERE invoice == invoice(shipment);          
};

//-- Запрет на изменение документа другим пользователем
@defineOperationChangesDocument(shipment, UserShipment, preventChangesDocument, created);

overShowEdit (Shipment i) += showEditDeleteUser(i) AND isOpened(i) AND NOT skipShowEdit(i);
overShowDelete (UserShipment i) += showEditDeleteUser(i) AND isUserOpened(i) AND NOT skipShowDelete(i);  

NAVIGATOR {
    saleStockNavigator {
        NEW shipments;
    }
}

CONSTRAINT isPosted(ShipmentDetail d) AND isShipmentPrice(operation(d)) AND NOT price(d)
    MESSAGE 'Для документа (продажа-возврат) должна быть задана учетная цена';