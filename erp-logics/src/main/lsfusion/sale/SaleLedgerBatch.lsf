MODULE SaleLedgerBatch;

REQUIRE SaleLedger, TaxItem, SkuLedgerTax, PriceListLedgerAccount;

NAMESPACE SaleLedger;

//------------------- Продажи по партиям -------------------------//

nameBatchBalanceB (Stock stock)= name(stock) + ' (остаток на начало)';    
nameBatchSumB (Stock stock)= name(stock) + ' (сумма на начало)';    
nameBatchBalanceA (Stock stock)= name(stock) + ' (остаток на конец)';    
nameBatchSumA (Stock stock)= name(stock) + ' (сумма на конец)';    
nameBatchQuantitySold (Stock stock)= name(stock) + ' (продано кол-во)';    
nameBatchSumSold (Stock stock)= name(stock) + ' (продано сумма)';    
 
inBatchReport 'Отм.' = DATA LOCAL BOOLEAN (Stock);
                  
filterBalanceDate 'С остатком' (Batch b,DATE dFrom, DATE dTo) = GROUP
    SUM 1 IF inBatchReport(Stock st) AND (balanceB(b,st,dFrom) OR balanceA(b,st,dTo));
filterSoldDate 'С продажей' (Batch b,DATE dFrom,DATE dTo) = GROUP 
    SUM quantitySold(b,Stock st,dFrom,dTo) IF inBatchReport(st);           
       
//-------------------------------------------------------------------------//
   
backgroundLavender 'Розовато-лавандовый' (Batch b) = RGB(255,238,238) IF b IS Batch;  
backgroundGreenTea 'Зеленого чая' (Batch b) = RGB(204,255,204) IF b IS Batch;  
backgroundSky 'Небесный' (Batch b) = RGB(127,199,255) IF b IS Batch;  

dbalanceB 'Остаток на начало дня' = DATA LOCAL NUMERIC[14,3] (Batch, Stock);
dcostB 'Себестоимость на начало дня' = DATA LOCAL NUMERIC[18,4] (Batch, Stock);
dVATSumB 'НДС поставщика на начало дня' = DATA LOCAL NUMERIC[18,4] (Batch, Stock);
dSumB 'Сумма поставщика с НДС на начало дня' = DATA LOCAL NUMERIC[18,4] (Batch, Stock);
daccountSumB 'Учетная сумма на начало дня' = DATA LOCAL NUMERIC[18,4] (Batch, Stock);
        
dquantitySold 'Продано за интервал (кол-во)' = DATA LOCAL NUMERIC[14,3] (Batch, Stock);  
dcostSumSold 'Себестоимость проданного за интервал' = DATA LOCAL NUMERIC[22,8] (Batch, Stock);   
dmarkupSumSold 'Надбавка проданного за интервал' = DATA LOCAL NUMERIC[22,8] (Batch, Stock);  

dsumVATSold 'Сумма НДС проданного за интервал' = DATA LOCAL NUMERIC[22,8] (Batch, Stock);  
daveragePriceSold 'Цена за интервал' = DATA LOCAL NUMERIC[22,8] (Batch, Stock);  
dsumSold 'Продано за интервал (сумма)' = DATA LOCAL NUMERIC[22,8] (Batch, Stock);  
daverageMarkupSold 'Средний процент надбавки' = DATA LOCAL NUMERIC[22,8] (Batch, Stock);  
   
dbalanceA 'Остаток на конец дня' = DATA LOCAL NUMERIC[14,3] (Batch, Stock);
dcostA 'Себестоимость на конец дня' = DATA LOCAL NUMERIC[18,4] (Batch, Stock);
dVATSumA 'НДС поставщика на конец дня' = DATA LOCAL NUMERIC[18,4] (Batch, Stock);
dSumA 'Сумма поставщика с НДС на конец дня' = DATA LOCAL NUMERIC[18,4] (Batch, Stock);
daccountSumA 'Учетная сумма на конец дня' = DATA LOCAL NUMERIC[18,4] (Batch, Stock);                     
    
dmoved = DATA LOCAL BOOLEAN (Batch, Stock);

skipBatchReport = ABSTRACT CASE BOOLEAN (Batch);

overFillPropertyFromTo  ABSTRACT LIST ( DATE, DATE);   
                   
fillPropertyBatchStockFromTo 'Заполнить данные'(DATE dFrom,DATE dTo)   { 
    dbalanceB(Batch bb,Stock sts) <- balanceB(bb,sts,dFrom) IF inBatchReport(sts) AND NOT skipBatchReport(bb);
    dcostB(Batch bb,Stock sts) <- NUMERIC[18,4](dbalanceB(bb,sts) * cost(bb)); 
    dVATSumB(Batch bb, Stock sts) <- NUMERIC[18,4](dcostB(bb, sts) * valueVAT(sts, bb, date(bb)) / 100.0);
    dSumB(Batch bb, Stock sts) <- NUMERIC[18,4](dcostB(bb, sts) (+) dVATSumB(bb, sts));         
    
    daccountSumB(Batch bb,Stock sts) <- NULL;
    daccountSumB(Batch bb,Stock sts) <- NUMERIC[18,4](dbalanceB(bb,sts) * accountPriceB(bb,sts,dFrom)) WHERE dbalanceB(bb,sts); 
//--            
    dquantitySold(Batch bb,Stock sts) <- quantitySold(bb,sts,dFrom,dTo) IF inBatchReport(sts) AND NOT skipBatchReport(bb);
    dcostSumSold(Batch bb,Stock sts) <- costSumSold(bb,sts,dFrom,dTo) IF inBatchReport(sts) AND NOT skipBatchReport(bb);
    dmarkupSumSold(Batch bb,Stock sts) <- markupSumSold(bb,sts,dFrom,dTo) IF inBatchReport(sts) AND NOT skipBatchReport(bb);
    dsumVATSold(Batch bb,Stock sts) <- sumVATSold(bb,sts,dFrom,dTo) IF inBatchReport(sts) AND NOT skipBatchReport(bb);
    dsumSold(Batch bb,Stock sts) <- sumSold(bb,sts,dFrom,dTo) IF inBatchReport(sts) AND NOT skipBatchReport(bb);
    daveragePriceSold(Batch bb,Stock sts) <- NUMERIC[22,8](dsumSold(bb,sts) / dquantitySold(bb,sts)); 
    daverageMarkupSold(Batch bb,Stock sts) <- NUMERIC[22,8](dmarkupSumSold(bb,sts) / dcostSumSold(bb,sts) * 100.0);
    //--

    dbalanceA(Batch bb,Stock sts) <- balanceA(bb,sts,dTo) IF inBatchReport(sts) AND NOT skipBatchReport(bb);
    dcostA(Batch bb,Stock sts) <- NUMERIC[18,4](dbalanceA(bb,sts) * cost(bb)) IF inBatchReport(sts) AND NOT skipBatchReport(bb);
    dVATSumA(Batch bb, Stock sts) <- NUMERIC[18,4](dcostA(bb, sts) * valueVAT(sts, bb, date(bb)) / 100.0);
    dSumA(Batch bb, Stock sts) <- NUMERIC[18,4](dcostA(bb, sts) (+) dVATSumA(bb, sts));
               
    daccountSumA(Batch bb,Stock sts) <- NULL;
    daccountSumA(Batch bb,Stock sts) <- NUMERIC[18,4](dbalanceA(bb,sts) * accountPriceA(bb,sts,dTo)) WHERE dbalanceA(bb,sts); 
    
    dmoved(Batch bb, Stock sts) <- dquantitySold(bb,sts) OR dbalanceB(bb,sts) OR dbalanceA(bb,sts);
    
    overFillPropertyFromTo(dFrom,dTo);
}                      
        
FORM saleBatch 'Продажи по партиям'

    OBJECTS dates = (dFrom = DATE, dTo = DATE) PANEL
    PROPERTIES valFrom = VALUE(dFrom), valTo = VALUE(dTo)
       
    OBJECTS gt = GroupType PANEL
    PROPERTIES(gt) SELECTOR name    
   
    TREE skuTree sk = Group PARENT parent(sk)
    PROPERTIES READONLY order(sk), skuTreeName = name(sk)
    ORDERS order(sk), skuTreeName
    FILTERS groupType(sk) == gt
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F6' DEFAULT       
     
    OBJECTS ts = Stock
    PROPERTIES tsTreeName = name(ts) READONLY, nameLegalEntity(ts) READONLY, inBatchReport(ts)
    ORDERS tsTreeName
    FILTERS isCompany(ts)     
    FILTERGROUP inactiveStock FILTER 'Активный' active(ts) 'ctrl F10' DEFAULT  
    OBJECTS st = Stock      
    FILTERS inBatchReport(st)
    OBJECTS b = Batch 
    PROPERTIES(b)  READONLY nameSku, idBarcodeSku, nameSkuGroup3, nameSkuGroup4, date, cost,                     
                   currentValueVAT                    
    FILTERGROUP inactiveStock2 FILTER 'Активный' active(st) 'ctrl F10' DEFAULT                   
    PROPERTIES     READONLY BACKGROUND backgroundLavender(b) balanceB(b,st,dFrom)  COLUMNS (st) HEADER nameBatchBalanceB(st)
    PROPERTIES     READONLY BACKGROUND backgroundLavender(b) accountSumB(b,st,dFrom)  COLUMNS (st) HEADER nameBatchSumB(st)
    PROPERTIES     READONLY BACKGROUND backgroundGreenTea(b) quantitySold(b,st,dFrom,dTo)  COLUMNS (st) HEADER nameBatchQuantitySold(st)  
    PROPERTIES     READONLY BACKGROUND backgroundGreenTea(b) sumSold(b,st,dFrom,dTo)  COLUMNS (st) HEADER nameBatchSumSold(st)                       
    PROPERTIES     READONLY BACKGROUND backgroundSky(b) balanceA(b,st,dTo)  COLUMNS (st) HEADER nameBatchBalanceA(st)
    PROPERTIES     READONLY BACKGROUND backgroundSky(b) accountSumA(b,st,dTo)  COLUMNS (st) HEADER nameBatchSumA(st)    
                
    FILTERS isParent(sk, b),
            NOT skipBatchReport(b)
                            
    FILTERGROUP filtersSold
        FILTER 'С движением' filterSoldDate(b,dFrom,dTo) OR filterBalanceDate(b,dFrom,dTo) 'F11' DEFAULT
        FILTER 'С продажей' filterSoldDate(b,dFrom,dTo) 'F10'
        FILTER 'С остатком' filterBalanceDate(b,dFrom,dTo) 'F9'      
                             
    OBJECTS stb = (sts=Stock, bb=Batch)                              
    PROPERTIES(sts)READONLY stsName = name                          
    PROPERTIES(bb) READONLY nameSku, idBarcodeSku, nameSupplier, nameSkuGroup3, nameSkuGroup4, date,  
                   cost
    PROPERTIES(sts, bb) READONLY currentValueVAT
                       
    PROPERTIES(bb,sts,dFrom) READONLY READONLY BACKGROUND backgroundLavender(bb) balanceB, 
                   costB, accountSumB         
    PROPERTIES(bb,sts,dFrom,dTo) READONLY BACKGROUND backgroundGreenTea(bb) quantitySold, 
                   costSumSold, markupSumSold
    PROPERTIES(bb,sts,dFrom,dTo) READONLY BACKGROUND backgroundGreenTea(bb) sumVATSold, averagePriceSold,  
                   sumSold, averageMarkupSold
    FILTERGROUP inactiveStock3 FILTER 'Активный' active(sts) 'ctrl F10' DEFAULT
                                       
    PROPERTIES(bb,sts,dTo) READONLY BACKGROUND backgroundSky(bb) balanceA, costA, accountSumA                 
                             
    FILTERS inBatchReport(sts),
            isParent(sk, bb),
            NOT skipBatchReport(bb)
    FILTERGROUP filtersSold1
        FILTER 'С движением' quantitySold(bb,sts,dFrom,dTo) OR balanceB(bb,sts,dFrom) OR balanceA(bb,sts,dTo) 'F11' DEFAULT
        FILTER 'С продажей' quantitySold(bb,sts,dFrom,dTo) 'F10'
        FILTER 'С остатком' balanceB(bb,sts,dFrom) OR balanceA(bb,sts,dTo) 'F9'      

//-- Таблица                                                 
    OBJECTS stbs = (stst=Stock, bbb=Batch)                              
    PROPERTIES(stst)READONLY name                          
    PROPERTIES(bbb)  READONLY image PANEL
    PROPERTIES(bbb) READONLY nameSku, idBarcodeSku, nameSupplier, nameSkuGroup3, nameSkuGroup4, date,  
                   cost
    PROPERTIES(stst, bbb) READONLY currentValueVAT
                       
    PROPERTIES(bbb,stst) READONLY READONLY BACKGROUND backgroundLavender(bbb) dbalanceB, 
                   dcostB, dVATSumB, dSumB, daccountSumB         
    PROPERTIES(bbb,stst) READONLY BACKGROUND backgroundGreenTea(bbb) dquantitySold, 
                   dcostSumSold, dmarkupSumSold
    PROPERTIES(bbb,stst) READONLY BACKGROUND backgroundGreenTea(bbb) dsumVATSold, daveragePriceSold,  
                   dsumSold, daverageMarkupSold
                   
                   
    FILTERGROUP inactiveStock4 FILTER 'Активный' active(stst) 'ctrl F10' DEFAULT
                                       
    PROPERTIES(bbb,stst) READONLY BACKGROUND backgroundSky(bbb) dbalanceA, 
                    dcostA, dVATSumA, dSumA, daccountSumA                 
                             
    FILTERS inBatchReport(stst),
            isParent(sk, bbb),
            NOT skipBatchReport(bbb)
    FILTERGROUP filtersSold2
        FILTER 'С движением' dmoved(bbb, stst) 'F11' DEFAULT 
        FILTER 'С продажей' dquantitySold(bbb,stst) 'F10'
        FILTER 'С остатком' dbalanceB(bbb,stst) OR dbalanceA(bbb,stst) 'F9'                                                      
    PROPERTIES fillPropertyBatchStockFromTo(dFrom,dTo) DRAW  stbs TOOLBAR
    
    EVENTS ON INIT {
        SEEK saleBatch.gt = defaultGroupType() IF defaultGroupType();
    }
;

EXTEND FORM saleBatch FILTERS (ts IS Stock AND NOT limitAccess(currentUser())) OR accessCompany(currentUser(),ts);
EXTEND FORM saleBatch FILTERS (st IS Stock AND NOT limitAccess(currentUser())) OR accessCompany(currentUser(),st);
EXTEND FORM saleBatch FILTERS (sts IS Stock AND NOT limitAccess(currentUser())) OR accessCompany(currentUser(),sts);
EXTEND FORM saleBatch FILTERS (stst IS Stock AND NOT limitAccess(currentUser())) OR accessCompany(currentUser(),stst);
DESIGN saleBatch {
    NEW top {
        horizontal = TRUE;
        MOVE BOX(dates) {
            horizontal = TRUE;
        }
        MOVE BOX(gt);
    }
    REMOVE BOX(st);
    NEW article {
        type = SPLITH;
        fill = 1;
        NEW skuFilters {
            fill = 1;
            horizontal = FALSE;
            NEW column{
                fill = 1.5;
                horizontal = FALSE;
                MOVE BOX(ts);
                MOVE BOX(TREE skuTree) { caption = 'Группы SKU'; }
            }    
            NEW imageBox {
                fill = 1;
                caption = 'Изображение';                     
                MOVE PROPERTY(image(bbb)) {
                    caption = '';
                    fill = 1;
                }
            }
        }
        NEW insetContainer {
            fill = 2.5;
            tabbed = TRUE;            
            MOVE BOX(stbs) { caption = 'Партия/склад (таблица)';}
            MOVE BOX(stb) { caption = 'Партия/склад';}
            MOVE BOX(b); 
        }            
    } 
    MOVE TOOLBARBOX;
}

//регистр продаж по партиям

averagePrice 'Цена продажи (средняя)'(SaleLedger s,Batch b) = NUMERIC[18,4](averagePrice(s) * coeff(s,b));

saleSupplier = DATA LOCAL LegalEntity ();
nameSaleSupplier 'Поставщик' = name(saleSupplier());
filterSaleSupplier = supplier(Batch batch)==saleSupplier() OR (batch IS Batch AND NOT saleSupplier());

saleSupplierStock  = DATA LOCAL Stock ();
nameSaleSupplierStock 'Склад поставщика' = name(saleSupplierStock());
filterSaleSupplierStock = supplierStock(Batch batch)==saleSupplierStock() OR (batch IS Batch AND NOT saleSupplierStock());

CONSTRAINT saleSupplier() AND saleSupplierStock() AND NOT in(saleSupplier(), saleSupplierStock())
    CHECKED BY saleSupplierStock[] MESSAGE 'Поставщик и склад поставщика в фильтре для регистра продаж не имеют связи';

FORM saleLedgerBatch 'Регистр продаж по партиям'
    PROPERTIES() nameSaleStock, nameSaleOperation, nameSaleCustomer, nameSaleCustomerStock, sessionConcatSkuGroups ON CHANGE selectSkuGroups(),
            nameSaleSupplier, nameSaleSupplierStock
    OBJECTS dates = (dFrom = DATE, dTo = DATE) PANEL
    PROPERTIES valFrom = VALUE(dFrom), valTo = VALUE(dTo)

    OBJECTS sb = (s = SaleLedger, b = Batch)
    PROPERTIES(s) READONLY nameMonth, nameDOW, date, hour, dateTime, 
                           nameStock, nameCustomer, nameOperation, description, 
                           numberDocument, nameSkuGroup2Sku, nameSkuGroup3Sku, nameSkuGroup4Sku, 
                           nameSku, idBarcodeSku
    PROPERTIES(b) READONLY shippedQuantity, cost, name, nameSupplier, nameSupplierStock
    PROPERTIES(s,b) READONLY cost, costSum, markupSum, sumVAT, sum, averagePrice
    PROPERTIES(s) READONLY valueVAT
    PROPERTIES READONLY valueVAT(b)
    ORDERS date(s)
    
    FILTERS active(s), filterSaleStock(s), filterSaleOperation(s), filterSaleCustomer(s), filterSaleCustomerStock(s),
            filterSaleSupplier(b), filterSaleSupplierStock(b),
            date(s) >= dFrom, date(s) <= dTo    
    FILTERS cost(s,b)    
    FILTERS inSession(skuGroup(sku(s))) OR (s IS SaleLedger AND NOT countInSessionSkuGroups())
;

DESIGN saleLedgerBatch {
    NEW top {
        horizontal = TRUE;
        MOVE BOX(dates) {
            horizontal = TRUE;
        }
        NEW supCont{
            horizontal = TRUE;
            caption = 'Поставщик';
            MOVE PROPERTY(nameSaleSupplier());
            MOVE PROPERTY(nameSaleSupplierStock()); 
        }
    }
    NEW operationContainer{
        horizontal = TRUE;
        caption = 'Фильтры';
        MOVE PROPERTY(nameSaleStock());
        MOVE PROPERTY(nameSaleOperation());
        MOVE PROPERTY(nameSaleCustomer());
        MOVE PROPERTY(nameSaleCustomerStock()); 
        MOVE PROPERTY(sessionConcatSkuGroups());
    }

    MOVE BOX(sb);
    MOVE TOOLBARBOX;
}

NAVIGATOR {                                              
    salesReports{
        NEW saleBatch;
        NEW saleLedgerBatch;
    }
}