MODULE SaleFullPrice;

REQUIRE SaleInvoice, PriceList;

NAMESPACE Sale;
    

@defineDocumentInterfaceDetailPricePrefix (order, full, ' (полная)');

percDiscount '% скидки' = ABSTRACT NUMERIC[8,4] (Order);
percDiscount '% скидки' = DATA NUMERIC[8,4] (UserOrder) IN documentPrm;
percDiscount(UserOrder o) += percDiscount(o);

skipPercDiscount = ABSTRACT BOOLEAN (UserOrderDetail);
percDiscount '% скидки' = ABSTRACT NUMERIC[8,4] (OrderDetail);
dataPercDiscount '% скидки' = DATA NUMERIC[8,4] (UserOrderDetail);
percDiscount '% скидки' (UserOrderDetail d) = OVERRIDE dataPercDiscount(d), percDiscount(userOrder(d)) IF isItem(sku(d));
percDiscount(UserOrderDetail d) += percDiscount(d);
percDiscountNotSkip '% скидки' (UserOrderDetail d) = (OVERRIDE dataPercDiscount(d), percDiscount[UserOrder](userOrder(d))) IF isItem(sku(d)) AND NOT skipPercDiscount(d);

@defineOperationProperty(showFullPrice, 'Показывать полную цену и скидку', paramsContainer);
skipShowFullPrice = ABSTRACT BOOLEAN (Order);
showFullPrice 'Показывать полную цену и скидку' (Order o) = showFullPrice(operation(o)) AND NOT skipShowFullPrice(o);

prevList (PriceListType t, UserOrderDetail d) += WHEN t IS PriceListType AND isItem(sku(d)) AND percDiscount(d) AND NOT skipPercDiscount(d) THEN
                    NUMERIC[16,4](round2(prevPriceB(t, sku(d), priceStock(d), dateTime(d)) * (100.0 (-) percDiscount(d)) / 100.0));

useCustomRecalculateDiscountPrice = ABSTRACT BOOLEAN (UserOrderDetail);
customRecalculateDiscountPrice ABSTRACT (UserOrderDetail);

recalculateDiscountPrice(UserOrderDetail d)  { 
    IF useCustomRecalculateDiscountPrice(d) THEN
        customRecalculateDiscountPrice(d);
    ELSE {
        price(d) <- round2(fullPrice(d) * (100.0 (-) percDiscountNotSkip (d)) / 100.0);
        invoicePrice(d) <- round2(price (d) * (100 + calcValueVAT(d)) / 100);
    }
}

// заполнение полной цены 
fullPrevList (priceListType, userOrderDetail) = ABSTRACT CASE NUMERIC[16,4] (PriceListType, UserOrderDetail); 
fullPrevList (PriceListType priceListType, UserOrderDetail userOrderDetail) += WHEN priceListType IS PriceListType AND sku(userOrderDetail) THEN  
                                                     prevPriceB(priceListType, sku(userOrderDetail), priceStock(userOrderDetail), dateTime(userOrderDetail));

fullPrevList (PriceListType priceListType, UserOrderDetail userOrderDetail) += WHEN priceListType IS PriceListType AND batch(userOrderDetail) THEN
                                                     prevPriceB(priceListType, batch(userOrderDetail), priceStock(userOrderDetail), dateTime(userOrderDetail));
                                                        
disableUpdateOrderFullPrice = ABSTRACT VALUE BOOLEAN (UserOrderDetail);                                                        

WHEN LOCAL FORMS userOrder GOAFTER valueVAT[UserOrderDetail] 
        (((CHANGED(priceStock(UserOrderDetail d)) OR CHANGED(dateTime(d))) AND NOT isPosted(d)) OR
         (CHANGED(priceListType(d)) OR CHANGED(agreement(d)) OR CHANGED(sku(d)) OR CHANGED(batch(d))))
         AND NOT CHANGED(fullPrice(d)) AND PriceListType pt == priceListType(d) AND isItem(sku(d))
         AND includeVAT(pt) AND NOT disableUpdateOrderFullPrice(d) 
         AND showFullPrice(order(d))
         NOINLINE (pt) DO {
    fullPrice(d) <- round2(fullPrevList(pt, d) * 100.0 /(100.0 (+) calcValueVAT(d)));    
}

WHEN LOCAL FORMS userOrder GOAFTER valueVAT[UserOrderDetail] 
        (((CHANGED(priceStock(UserOrderDetail d)) OR CHANGED(dateTime(d))) AND NOT isPosted(d)) OR
         (CHANGED(priceListType(d)) OR CHANGED(agreement(d)) OR CHANGED(sku(d)) OR CHANGED(batch(d))))
         AND NOT CHANGED(fullPrice(d)) AND PriceListType pt == priceListType(d) AND isItem(sku(d))
         AND NOT includeVAT(pt) AND NOT disableUpdateOrderFullPrice(d) 
         AND showFullPrice(order(d))
         NOINLINE (pt) DO {
    fullPrice(d) <- fullPrevList(pt, d);    
}
    
// при изменении полной цены пересчитывается цена 
skipRecalculateDiscountPrice = ABSTRACT BOOLEAN (OrderDetail);
WHEN LOCAL FORMS userOrder GOAFTER valueVAT[UserOrderDetail] 
        (CHANGED(fullPrice(UserOrderDetail d)))
         AND NOT CHANGED(percDiscount(d)) 
         AND showFullPrice(order(d))
         AND isItem(sku(d)) AND NOT skipRecalculateDiscountPrice(d) DO {
    recalculateDiscountPrice(d);
}

// при изменении % скидки пересчитывается цена 
WHEN LOCAL FORMS userOrder GOAFTER fullPrice[UserOrderDetail] 
        (CHANGED(percDiscount(UserOrderDetail d)))
         AND NOT CHANGED(price(d)) 
         AND showFullPrice(order(d))
         AND fullPrice(d) AND isItem(sku(d)) AND NOT skipRecalculateDiscountPrice(d) DO {
    recalculateDiscountPrice(d);
}

// при изменении цены меняется % скидки
overChangePrice(UserOrderDetail d) + { 
    IF fullPrice(d) AND isItem(sku(d)) THEN {
        dataPercDiscount(d) <- NUMERIC[8,4](round2((1.0 - (price(d)/fullPrice(d)))*100.0));     
    }   
}
WHEN LOCAL FORMS userOrder GOAFTER price[UserOrderDetail] (CHANGED(price(UserOrderDetail d)))  AND 
                             fullPrice(d) AND isItem(sku(d)) AND
                             showFullPrice(order(d)) AND
                             NOT CHANGED(percDiscount(d)) AND NOT CHANGED(fullPrice(d))DO {
    dataPercDiscount(d) <- NUMERIC[8,4](round2((1.0 - (price(d)/fullPrice(d)))*100.0));
}

overRecalculateFullPrice  ABSTRACT LIST ( UserOrderDetail);

recalculateFullPriceUserOrderDetail 'Пересчитать цены'()  { 
    FOR PriceListType pt == priceListType(UserOrderDetail d) AND isItem(sku(d)) AND [ FILTER userOrder.d](d) NOINLINE (pt) DO {
        IF includeVAT(pt) THEN
            fullPrice(d) <- round2(fullPrevList(pt, d) * 100.0 /(100.0 (+) calcValueVAT(d)));
        ELSE
            fullPrice(d) <- fullPrevList(pt, d);

        overRecalculateFullPrice(d);               
    }
} ASON CONTEXTMENU fullPrice[UserOrderDetail];

@defineOption(readonlySaleDiscount, 'Запретить редактирование % скидки в строках (продажа)', sale);

@defineOption(readonlySaleReturnDiscount, 'Запретить редактирование % скидки в строках (продажа-возврат)', sale);

EXTEND FORM userOrder
    PROPERTIES (o) SHOWIF showFullPrice(o) percDiscount 
    PROPERTIES (d) SHOWIF showFullPrice(o) BEFORE price(d) fullPrice, percDiscountNotSkip READONLYIF readonlySaleDiscount()
;

EXTEND FORM orders
    PROPERTIES (d) READONLY  SHOWIF showFullPrice(o) BEFORE price(d) fullPrice, percDiscountNotSkip
;

overCopy (UserOrder o, UserOrder order) + { 
    percDiscount(order) <- percDiscount(o);  
} 

// только для копирования строки, при копировании документа заполняется стандартными значениями
overCopy[UserOrderDetail, UserOrderDetail](UserOrderDetail d, UserOrderDetail detail) + { 
    fullPrice(d) <- fullPrice(detail);  
    dataPercDiscount(d) <- dataPercDiscount(detail);  
} 

// В накладную копируется всё из заказа. Cоглашение в заказе и накладной должно совпадать.
@defineDocumentInterfaceDetailPricePrefix (invoice, full, ' (полная)');

percDiscount '% скидки' = ABSTRACT NUMERIC[8,4] (Invoice);
percDiscount '% скидки' = DATA NUMERIC[8,4] (UserInvoice) IN documentPrm;
percDiscount(UserInvoice o) += percDiscount(o);

skipPercDiscount = ABSTRACT BOOLEAN (UserInvoiceDetail);
percDiscount '% скидки' = ABSTRACT NUMERIC[8,4] (InvoiceDetail);
dataPercDiscount '% скидки' = DATA NUMERIC[8,4] (UserInvoiceDetail);
percDiscount '% скидки' (UserInvoiceDetail d) = OVERRIDE dataPercDiscount(d), percDiscount(userInvoice(d)) IF isItem(sku(d));
percDiscount(UserInvoiceDetail d) += percDiscount(d);
percDiscountNotSkip '% скидки' (UserInvoiceDetail d) = (OVERRIDE dataPercDiscount(d), percDiscount(userInvoice(d))) IF isItem(sku(d)) AND NOT skipPercDiscount(d);
skipShowFullPrice = ABSTRACT BOOLEAN (Invoice);
showFullPrice 'Показывать полную цену и скидку' (Invoice o) = showFullPrice(operation(o)) AND NOT skipShowFullPrice(o);

prevList (PriceListType t, UserInvoiceDetail d) += WHEN t IS PriceListType AND isItem(sku(d)) AND percDiscount(d) AND NOT skipPercDiscount(d) THEN
                    NUMERIC[16,4](round2(prevPriceB(t, sku(d), supplierStock(d), dateTime(d)) * (100.0 (-) percDiscount(d)) / 100.0));

useCustomRecalculateDiscountPrice = ABSTRACT BOOLEAN (UserInvoiceDetail);
customRecalculateDiscountPrice ABSTRACT (UserInvoiceDetail);

recalculateDiscountPrice(UserInvoiceDetail d)  { 
    IF useCustomRecalculateDiscountPrice(d) THEN
        customRecalculateDiscountPrice(d);
    ELSE {
        price(d) <- round2(fullPrice(d) * (100.0 (-) percDiscountNotSkip (d)) / 100.0);
        invoicePrice(d) <- round2(price (d) * (100 + calcValueVAT(d)) / 100);
    }
}

// заполнение полной цены 
fullPrevList = ABSTRACT CASE NUMERIC[16,4] (PriceListType, UserInvoiceDetail); 
fullPrevList (PriceListType priceListType, UserInvoiceDetail detail) += WHEN priceListType IS PriceListType AND sku(detail) THEN  
                                                     prevPriceB(priceListType, sku(detail), supplierStock(detail), dateTime(detail));

fullPrevList (PriceListType priceListType, UserInvoiceDetail detail) += WHEN priceListType IS PriceListType AND batch(detail) THEN
                                                     prevPriceB(priceListType, batch(detail), supplierStock(detail), dateTime(detail));
fullPrevList (PriceListType t, UserInvoiceDetail d) += WHEN t == priceListType(d) AND orderDetail(d) AND NOT notFillPriceInvoiceOrder(operation(d)) AND NOT skipDeriveOrderPrice(d) THEN fullPrice(orderDetail(d));                                        
                                                        
disableUpdateInvoiceFullPrice = ABSTRACT VALUE BOOLEAN (UserInvoiceDetail);                                                        

WHEN LOCAL FORMS userInvoice GOAFTER valueVAT[UserInvoiceDetail] 
        (((CHANGED(supplierStock(UserInvoiceDetail d)) OR CHANGED(dateTime(d))) AND NOT isPosted(d)) OR
         (CHANGED(priceListType(d)) OR CHANGED(agreement(d)) OR CHANGED(sku(d)) OR CHANGED(batch(d))))
         AND NOT CHANGED(fullPrice(d)) AND PriceListType pt == priceListType(d) AND isItem(sku(d))
         AND includeVAT(pt) AND NOT disableUpdateInvoiceFullPrice(d) 
         AND showFullPrice(invoice(d))
         NOINLINE (pt) DO {
    fullPrice(d) <- round2(fullPrevList(pt, d) * 100.0 /(100.0 (+) calcValueVAT(d)));    
}

WHEN LOCAL FORMS userInvoice GOAFTER valueVAT[UserInvoiceDetail] 
        (((CHANGED(supplierStock(UserInvoiceDetail d)) OR CHANGED(dateTime(d))) AND NOT isPosted(d)) OR
         (CHANGED(priceListType(d)) OR CHANGED(agreement(d)) OR CHANGED(sku(d)) OR CHANGED(batch(d))))
         AND NOT CHANGED(fullPrice(d)) AND PriceListType pt == priceListType(d) AND isItem(sku(d))
         AND NOT includeVAT(pt) AND NOT disableUpdateInvoiceFullPrice(d) 
         AND showFullPrice(invoice(d))
         NOINLINE (pt) DO {
    fullPrice(d) <- fullPrevList(pt, d);    
}

// при изменении полной цены пересчитывается цена
skipRecalculateDiscountPrice = ABSTRACT BOOLEAN (InvoiceDetail);
WHEN LOCAL //FORMS userInvoice 
        GOAFTER valueVAT[UserInvoiceDetail] 
        (CHANGED(fullPrice(UserInvoiceDetail d)))
         AND NOT CHANGED(percDiscount(d)) 
         AND showFullPrice(invoice(d))
         AND isItem(sku(d))
         AND NOT skipRecalculateDiscountPrice(d) DO {
    recalculateDiscountPrice(d);
}

// при изменении % скидки пересчитывается цена 
WHEN LOCAL FORMS userInvoice 
        GOAFTER fullPrice[UserInvoiceDetail] 
        (CHANGED(percDiscount(UserInvoiceDetail d)))
         AND NOT CHANGED(price(d)) 
         AND showFullPrice(invoice(d))
         AND fullPrice(d) AND isItem(sku(d))
         AND NOT skipRecalculateDiscountPrice(d) DO {
    recalculateDiscountPrice(d);
}

// при изменении цены меняется % скидки
overChangePrice(UserInvoiceDetail d) + { 
    IF fullPrice(d) AND isItem(sku(d)) THEN {
        dataPercDiscount(d) <- NUMERIC[8,4](round2((1.0 - (price(d)/fullPrice(d)))*100.0));     
    }   
}

WHEN LOCAL FORMS userInvoice GOAFTER price[UserInvoiceDetail] (CHANGED(price(UserInvoiceDetail d)))  AND 
                             fullPrice(d) AND isItem(sku(d)) 
                             AND showFullPrice(invoice(d)) AND
                             NOT CHANGED(percDiscount(d)) AND NOT CHANGED(fullPrice(d))DO {
    dataPercDiscount(d) <- NUMERIC[8,4](round2((1.0 - (price(d)/fullPrice(d)))*100.0));
}

overRecalculateFullPrice  ABSTRACT LIST ( UserInvoiceDetail);

recalculateFullPriceUserInvoiceDetail 'Пересчитать цены'()  { 
    FOR PriceListType pt == priceListType(UserInvoiceDetail d) AND isItem(sku(d)) AND [ FILTER userInvoice.d](d) NOINLINE (pt) DO {
        IF includeVAT(pt) THEN
            fullPrice(d) <- round2(fullPrevList(pt, d) * 100.0 /(100.0 (+) calcValueVAT(d)));
        ELSE
            fullPrice(d) <- fullPrevList(pt, d);

        overRecalculateFullPrice(d);               
    }
} ASON CONTEXTMENU fullPrice[UserInvoiceDetail];

EXTEND FORM userInvoice
    PROPERTIES (i) SHOWIF showFullPrice(i) percDiscount 
    PROPERTIES (d) SHOWIF showFullPrice(i) BEFORE price(d) fullPrice, percDiscountNotSkip READONLYIF readonlySaleDiscount()
;

EXTEND FORM invoices
    PROPERTIES (d) READONLY SHOWIF showFullPrice(i) BEFORE price(d) fullPrice, percDiscountNotSkip
;

skipEqualAgreements = ABSTRACT BOOLEAN (UserInvoice);

CONSTRAINT agreement(Order o) != agreement(UserInvoice i) AND include(o,i) AND NOT skipEqualAgreements(i)
    CHECKED BY agreement[UserInvoice] MESSAGE 'Соглашения в заказе и накладной должны совпадать';

overFill (UserInvoice i, Order o) + { 
    IF NOT notFillPriceInvoiceOrder(operation(o)) THEN {
        percDiscount(i) <- percDiscount(o);
    }
}
overFill (UserInvoiceDetail id, OrderDetail od) + { 
    IF NOT notFillPriceInvoiceOrder(operation(od)) THEN {
        fullPrice(id) <- fullPrice(od);
        dataPercDiscount(id) <- dataPercDiscount(od);  
    }  
}

overCopy (UserInvoice i, UserInvoice invoice) + { 
    percDiscount(invoice) <- percDiscount(i);  
} 

// только для копирования строки, при копировании документа заполняется стандартными значениями
overCopy[UserInvoiceDetail, UserInvoiceDetail](UserInvoiceDetail d, UserInvoiceDetail detail) + { 
    fullPrice(d) <- fullPrice(detail);  
    dataPercDiscount(d) <- dataPercDiscount(detail);  
} 