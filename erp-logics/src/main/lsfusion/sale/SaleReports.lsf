MODULE SaleReports;

REQUIRE SaleLedger, StockMovement;

//отчет по продажам

dataInSession 'Отм.' = DATA LOCAL BOOLEAN (Group);

levelParent (Group group) = GROUP
    MIN level(group, Group parent) IF dataInSession(parent);

inParent (Group group) = TRUE IF levelParent(group);

inSession 'Отм.' (Group group) = OVERRIDE
    dataInSession(group),
    inParent(group);

sessionConcatGroups 'Группы' (groupType) =
    GROUP CONCAT name(Group group) IF inSession(group) AND NOT inSession(parent(group)),'; ' ORDER group
    BY groupType(group);

// --------------------------------- Оптимизация с хранимыми свойствами ------------------------------------- //

quantityStock 'Количество' = DATA LOCAL NUMERIC[16,5] (Sku); 
costSumStock 'Себестоимость' = DATA LOCAL NUMERIC[18,4] (Sku); 
markupSumStock 'Надбавка' = DATA LOCAL NUMERIC[18,4] (Sku);
sumVATStock 'Сумма НДС' = DATA LOCAL NUMERIC[18,4] (Sku);
sumStock 'Сумма' = DATA LOCAL NUMERIC[18,4] (Sku);

quantityStock 'Количество' = DATA LOCAL NUMERIC[16,5] (Group); 
sumVATStock 'Сумма НДС' = DATA LOCAL NUMERIC[18,4] (Group);
costSumStock 'Себестоимость' = DATA LOCAL NUMERIC[18,4] (Group);
markupSumStock 'Надбавка' = DATA LOCAL NUMERIC[18,4] (Group);
sumStock 'Сумма' = DATA LOCAL NUMERIC[18,4] (Group);

inSaleReport 'Вкл.' = DATA LOCAL BOOLEAN (Stock);
inSaleReportDialog 'Вкл.' = DATA LOCAL BOOLEAN (Stock);

@defineOption(useReportStockCodes, 'Использовать коды складов в отчетах', sale);

inSaleReportStocks 'Склады' () =
    GROUP CONCAT (OVERRIDE id(Stock st) IF useReportStockCodes(), name(st)) IF inSaleReport(st) ,',' ORDER st CHARWIDTH 30;
defaultStockSaleReport = GROUP MIN Stock st IF inSaleReport(st);

skipSaleReport = ABSTRACT CASE BOOLEAN (Sku,Stock);

overfillSaleReportFromTo  ABSTRACT ( GroupType, DATE, DATE);

fillSaleReportFromTo 'Сформировать'(GroupType gt, DATE df, DATE dt)  { 

    quantityStock(Sku sk) <- NULL;           
    sumStock(Sku sk) <- NULL;  
    sumVATStock(Sku sk) <- NULL;  
    costSumStock(Sku sk) <- NULL;  
    markupSumStock(Sku sk) <- NULL;  

    quantityStock(Group g) <- NULL;  
    sumStock(Group g) <-NULL;  
    sumVATStock(Group g) <- NULL;  
    costSumStock(Group g) <- NULL;  
    markupSumStock(Group g) <- NULL; 

    quantityStock(Sku sk) <- NUMERIC[16,5]((GROUP SUM quantitySold(sk, Stock st, df, dt) IF inSaleReport(st) AND NOT skipSaleReport(sk,st)));           
    sumStock(Sku sk) <- NUMERIC[18,4]((GROUP SUM sumSold(sk, Stock st, df, dt) IF inSaleReport(st) AND NOT skipSaleReport(sk,st)));   
    sumVATStock(Sku sk) <- NUMERIC[18,4]((GROUP SUM sumVATSold(sk, Stock st, df, dt) IF inSaleReport(st) AND NOT skipSaleReport(sk,st)));   
    costSumStock(Sku sk) <- NUMERIC[18,4]((GROUP SUM costSumSold(sk, Stock st, df, dt) IF inSaleReport(st) AND NOT skipSaleReport(sk,st)));   
    markupSumStock(Sku sk) <- sumStock(sk) (-) sumVATStock(sk) (-) costSumStock(sk);

    quantityStock(Group g) <- [ GROUP SUM quantityStock(Sku sk) BY group(GroupType ggt, sk)](g) IF  groupType(g) == gt;
    sumStock(Group g) <- [ GROUP SUM sumStock(Sku sk) BY group(GroupType ggt, sk)](g) IF groupType(g) == gt;
    sumVATStock(Group g) <- [ GROUP SUM sumVATStock(Sku sk) BY group(GroupType ggt, sk)](g) IF groupType(g) == gt;
    costSumStock(Group g) <- [ GROUP SUM costSumStock(Sku sk) BY group(GroupType ggt, sk)](g) IF groupType(g) == gt;
    markupSumStock(Group g) <- [ GROUP SUM markupSumStock(Sku sk) BY group(GroupType ggt, sk)](g) IF groupType(g) == gt; 
       
    overfillSaleReportFromTo(gt, df, dt);                 
}

filterFromTo (Sku s,Stock st,DATE df,DATE dt) =   quantitySold(s,st,df,dt) OR 
                                                     sumSold(s,st,df,dt) OR
                                                     sumVATSold(s,st,df,dt) OR 
                                                     costSumSold(s,st,df,dt);

recSumStock 'Сумма' (Group parent) =
    GROUP
    SUM sumStock (Group child) IF isParent(child, parent);
recSumVATStock 'Сумма НДС' (Group parent) =
    GROUP
    SUM sumVATStock (Group child) IF isParent(child, parent);
recCostSumStock 'Себестоимость' (Group parent) =
    GROUP
    SUM costSumStock (Group child) IF isParent(child, parent);
recMarkupSumStock 'Надбавка' (Group parent) =
    GROUP
    SUM markupSumStock (Group child) IF isParent(child, parent);
recQuantityStock 'Кол-во' (Group parent) =
    GROUP
    SUM quantityStock (Group child) IF isParent(child, parent);
    
// --------------------------------- Сравнение с интервалом ------------------------------------- //

quantityStockCompare 'Количество (сравнение)' = DATA LOCAL NUMERIC[16,5] (Sku); 
costSumStockCompare 'Себестоимость (сравнение)' = DATA LOCAL NUMERIC[18,4] (Sku); 
markupSumStockCompare 'Надбавка (сравнение)' = DATA LOCAL NUMERIC[18,4] (Sku);
sumVATStockCompare 'Сумма НДС (сравнение)' = DATA LOCAL NUMERIC[18,4] (Sku);
sumStockCompare 'Сумма (сравнение)' = DATA LOCAL NUMERIC[18,4] (Sku);

quantityStockCompare 'Количество (сравнение)' = DATA LOCAL NUMERIC[16,5] (Group); 
sumVATStockCompare 'Сумма НДС (сравнение)' = DATA LOCAL NUMERIC[18,4] (Group);
costSumStockCompare 'Себестоимость (сравнение)' = DATA LOCAL NUMERIC[18,4] (Group);
markupSumStockCompare 'Надбавка (сравнение)' = DATA LOCAL NUMERIC[18,4] (Group);
sumStockCompare 'Сумма (сравнение)' = DATA LOCAL NUMERIC[18,4] (Group);

compare 'Сравнить с' = DATA LOCAL BOOLEAN ();

overfillSaleReportFromToCompare  ABSTRACT ( GroupType, DATE, DATE);

fillSaleReportFromToCompare 'Сформировать сравнение' (GroupType gt, DATE df, DATE dt)   { 
    IF compare() THEN {
        quantityStockCompare(Sku sk) <- NULL;           
        sumStockCompare(Sku sk) <- NULL;  
        sumVATStockCompare(Sku sk) <- NULL;  
        costSumStockCompare(Sku sk) <- NULL;  
        markupSumStockCompare(Sku sk) <- NULL;  
    
        quantityStockCompare(Group g) <- NULL;  
        sumStockCompare(Group g) <-NULL;  
        sumVATStockCompare(Group g) <- NULL;  
        costSumStockCompare(Group g) <- NULL;  
        markupSumStockCompare(Group g) <- NULL; 
    
        quantityStockCompare(Sku sk) <- NUMERIC[16,5]((GROUP SUM quantitySold(sk, Stock st, df, dt) IF inSaleReport(st) AND NOT skipSaleReport(sk,st)));           
        sumStockCompare(Sku sk) <- NUMERIC[18,4]((GROUP SUM sumSold(sk, Stock st, df, dt) IF inSaleReport(st) AND NOT skipSaleReport(sk,st)));   
        sumVATStockCompare(Sku sk) <- NUMERIC[18,4]((GROUP SUM sumVATSold(sk, Stock st, df, dt) IF inSaleReport(st) AND NOT skipSaleReport(sk,st)));   
        costSumStockCompare(Sku sk) <- NUMERIC[18,4]((GROUP SUM costSumSold(sk, Stock st, df, dt) IF inSaleReport(st) AND NOT skipSaleReport(sk,st)));   
        markupSumStockCompare(Sku sk) <- sumStockCompare(sk) (-) sumVATStockCompare(sk) (-) costSumStockCompare(sk);
    
        quantityStockCompare(Group g) <- [ GROUP SUM quantityStockCompare(Sku sk) BY group(GroupType ggt, sk)](g) IF  groupType(g) == gt;
        sumStockCompare(Group g) <- [ GROUP SUM sumStockCompare(Sku sk) BY group(GroupType ggt, sk)](g) IF groupType(g) == gt;
        sumVATStockCompare(Group g) <- [ GROUP SUM sumVATStockCompare(Sku sk) BY group(GroupType ggt, sk)](g) IF groupType(g) == gt;
        costSumStockCompare(Group g) <- [ GROUP SUM costSumStockCompare(Sku sk) BY group(GroupType ggt, sk)](g) IF groupType(g) == gt;
        markupSumStockCompare(Group g) <- [ GROUP SUM markupSumStockCompare(Sku sk) BY group(GroupType ggt, sk)](g) IF groupType(g) == gt;

        overfillSaleReportFromToCompare(gt, df, dt);
    }                 
}

recSumStockCompare 'Сумма (сравнение)' (Group parent) =
    GROUP
    SUM sumStockCompare (Group child) IF isParent(child, parent);
recSumVATStockCompare 'Сумма НДС (сравнение)' (Group parent) =
    GROUP
    SUM sumVATStockCompare (Group child) IF isParent(child, parent);
recCostSumStockCompare 'Себестоимость (сравнение)' (Group parent) =
    GROUP
    SUM costSumStockCompare (Group child) IF isParent(child, parent);
recMarkupSumStockCompare 'Надбавка (сравнение)' (Group parent) =
    GROUP
    SUM markupSumStockCompare (Group child) IF isParent(child, parent);
recQuantityStockCompare 'Кол-во (сравнение)' (Group parent) =
    GROUP
    SUM quantityStockCompare (Group child) IF isParent(child, parent);
    
//цвета ячеек
lessColor = #FFEEEE;
moreColor = #EEFFEE;
markupSumStockColor(Sku sk) = IF markupSumStockCompare(sk) > markupSumStock(sk) THEN moreColor() ELSE lessColor();
sumStockColor(Sku sk) = IF sumStockCompare(sk) > sumStock(sk) THEN moreColor() ELSE lessColor();
recMarkupSumStockColor(Group gr) = IF recMarkupSumStockCompare(gr) > recMarkupSumStock(gr) THEN moreColor() ELSE lessColor();
recSumStockColor(Group gr) = IF recSumStockCompare(gr) > recSumStock(gr) THEN moreColor() ELSE lessColor();
            
//суммы продаж по группе рекурсивно 
sumRecSalesSku 'Сумма продаж (всего)' (Group group, stock, DATE dateFrom, DATE dateTo) =
    GROUP SUM sum(SaleLedger saleLedger) IF isParent(group, sku(saleLedger)) AND
                                           active(saleLedger) AND
                                           date(saleLedger) >= dateFrom AND
                                           date(saleLedger) <= dateTo AND
                                           NOT skipSaleReport(sku(saleLedger),stock(saleLedger))
    BY stock(saleLedger);

//суммы продаж по покупателю
costSumSalesStock 'Себестоимость продаж (по покупателю)' (GroupType groupType, customer, DATE dateFrom, DATE dateTo) =
    GROUP SUM costSum(SaleLedger saleLedger) IF active(saleLedger) AND
                                               inSession(group(groupType, sku(saleLedger))) AND
                                               date(saleLedger) >= dateFrom AND
                                               date(saleLedger) <= dateTo AND
                                               inSaleReport(stock(saleLedger)) AND
                                               NOT skipSaleReport(sku(saleLedger),stock(saleLedger))
    BY customer(saleLedger);
markupSumSalesStock 'Надбавка (по покупателю)'(GroupType groupType, customer, DATE dateFrom, DATE dateTo) =
    GROUP SUM markupSum(SaleLedger saleLedger) IF active(saleLedger) AND
                                               inSession(group(groupType, sku(saleLedger))) AND
                                               date(saleLedger) >= dateFrom AND
                                               date(saleLedger) <= dateTo AND
                                               inSaleReport(stock(saleLedger)) AND
                                               NOT skipSaleReport(sku(saleLedger),stock(saleLedger))
    BY customer(saleLedger);
sumVATSalesStock 'Сумма НДС (по покупателю)'(GroupType groupType, customer, DATE dateFrom, DATE dateTo) =
    GROUP SUM sumVAT(SaleLedger saleLedger) IF active(saleLedger) AND
                                              inSession(group(groupType, sku(saleLedger))) AND
                                              date(saleLedger) >= dateFrom AND
                                              date(saleLedger) <= dateTo AND 
                                              inSaleReport(stock(saleLedger)) AND
                                              NOT skipSaleReport(sku(saleLedger),stock(saleLedger))
    BY customer(saleLedger);
sumSalesStock 'Сумма продаж (по покупателю)' (GroupType groupType, customer, DATE dateFrom, DATE dateTo) =
    GROUP SUM sum(SaleLedger saleLedger) IF active(saleLedger) AND
                                           inSession(group(groupType, sku(saleLedger))) AND
                                           date(saleLedger) >= dateFrom AND
                                           date(saleLedger) <= dateTo AND
                                           inSaleReport(stock(saleLedger)) AND
                                           NOT skipSaleReport(sku(saleLedger),stock(saleLedger))
    BY customer(saleLedger);

//суммы продаж по складу покупателю
costSumSalesStock 'Себестоимость продаж (по покупателю)' (GroupType groupType, customer, DATE dateFrom, DATE dateTo) =
    GROUP SUM costSum(SaleLedger saleLedger) IF active(saleLedger) AND
                                               inSession(group(groupType, sku(saleLedger))) AND
                                               date(saleLedger) >= dateFrom AND
                                               date(saleLedger) <= dateTo AND
                                               inSaleReport(stock(saleLedger)) AND
                                               NOT skipSaleReport(sku(saleLedger),stock(saleLedger))
    BY customerStock(saleLedger);
markupSumSalesStock 'Надбавка (по покупателю)'(GroupType groupType, customer, DATE dateFrom, DATE dateTo) =
    GROUP SUM markupSum(SaleLedger saleLedger) IF active(saleLedger) AND
                                               inSession(group(groupType, sku(saleLedger))) AND
                                               date(saleLedger) >= dateFrom AND
                                               date(saleLedger) <= dateTo AND
                                               inSaleReport(stock(saleLedger)) AND
                                               NOT skipSaleReport(sku(saleLedger),stock(saleLedger))
    BY customerStock(saleLedger);
sumVATSalesStock 'Сумма НДС (по покупателю)'(GroupType groupType, customer, DATE dateFrom, DATE dateTo) =
    GROUP SUM sumVAT(SaleLedger saleLedger) IF active(saleLedger) AND
                                              inSession(group(groupType, sku(saleLedger))) AND
                                              date(saleLedger) >= dateFrom AND
                                              date(saleLedger) <= dateTo AND 
                                              inSaleReport(stock(saleLedger)) AND
                                              NOT skipSaleReport(sku(saleLedger),stock(saleLedger))
    BY customerStock(saleLedger);
sumSalesStock 'Сумма продаж (по покупателю)' (GroupType groupType, customer, DATE dateFrom, DATE dateTo) =
    GROUP SUM sum(SaleLedger saleLedger) IF active(saleLedger) AND
                                           inSession(group(groupType, sku(saleLedger))) AND
                                           date(saleLedger) >= dateFrom AND
                                           date(saleLedger) <= dateTo AND
                                           inSaleReport(stock(saleLedger)) AND
                                           NOT skipSaleReport(sku(saleLedger),stock(saleLedger))
    BY customerStock(saleLedger);
    
// склад покупателя 
inCustomerStockSaleReport 'Вкл.' = DATA LOCAL BOOLEAN (Stock);
countInCustomerStockSaleReport = GROUP SUM 1 IF inCustomerStockSaleReport(Stock st) ;    
inSaleReportCustomerStocks 'Склады' () =
    GROUP CONCAT name(Stock st) IF inCustomerStockSaleReport(st) ,', ' ORDER st CHARWIDTH 30;

//суммы продаж по складу покупателю
costSumSalesStock 'Себестоимость продаж (по покупателю)' (GroupType groupType, DATE dateFrom, DATE dateTo) =
    GROUP
    SUM costSum(SaleLedger saleLedger) IF active(saleLedger) AND
                                               inSession(group(groupType, sku(saleLedger))) AND
                                               date(saleLedger) >= dateFrom AND
                                               date(saleLedger) <= dateTo AND
                                               inSaleReport(stock(saleLedger)) AND
                                               NOT skipSaleReport(sku(saleLedger),stock(saleLedger)) AND
                                               ((inCustomerStockSaleReport(customerStock(saleLedger)) IF countInCustomerStockSaleReport()) OR (customerStock(saleLedger) AND NOT countInCustomerStockSaleReport()));
markupSumSalesStock 'Надбавка (по покупателю)'(GroupType groupType, DATE dateFrom, DATE dateTo) =
    GROUP
    SUM markupSum(SaleLedger saleLedger) IF active(saleLedger) AND
                                               inSession(group(groupType, sku(saleLedger))) AND
                                               date(saleLedger) >= dateFrom AND
                                               date(saleLedger) <= dateTo AND
                                               inSaleReport(stock(saleLedger)) AND
                                               NOT skipSaleReport(sku(saleLedger),stock(saleLedger)) AND
                                               ((inCustomerStockSaleReport(customerStock(saleLedger)) IF countInCustomerStockSaleReport()) OR (customerStock(saleLedger) AND NOT countInCustomerStockSaleReport()));
sumVATSalesStock 'Сумма НДС (по покупателю)'(GroupType groupType, DATE dateFrom, DATE dateTo) =
    GROUP
    SUM sumVAT(SaleLedger saleLedger) IF active(saleLedger) AND
                                              inSession(group(groupType, sku(saleLedger))) AND
                                              date(saleLedger) >= dateFrom AND
                                              date(saleLedger) <= dateTo AND 
                                              inSaleReport(stock(saleLedger)) AND
                                              NOT skipSaleReport(sku(saleLedger),stock(saleLedger)) AND
                                              ((inCustomerStockSaleReport(customerStock(saleLedger)) IF countInCustomerStockSaleReport()) OR (customerStock(saleLedger) AND NOT countInCustomerStockSaleReport()));
sumSalesStock 'Сумма продаж (по покупателю)' (GroupType groupType, DATE dateFrom, DATE dateTo) =
    GROUP
    SUM sum(SaleLedger saleLedger) IF active(saleLedger) AND
                                           inSession(group(groupType, sku(saleLedger))) AND
                                           date(saleLedger) >= dateFrom AND
                                           date(saleLedger) <= dateTo AND
                                           inSaleReport(stock(saleLedger)) AND
                                           NOT skipSaleReport(sku(saleLedger),stock(saleLedger)) AND
                                           ((inCustomerStockSaleReport(customerStock(saleLedger)) IF countInCustomerStockSaleReport()) OR (customerStock(saleLedger) AND NOT countInCustomerStockSaleReport()));

//суммы продаж по SKU    
costSumStock 'Итоговая себестоимость продаж' (GroupType groupType) =
    GROUP                                                
        SUM costSumStock(Sku sku) IF inSession(group(groupType, sku)) CHARWIDTH 15;
markupSumStock 'Итоговая надбавка продаж' (GroupType groupType) =
    GROUP                                                
        SUM markupSumStock(Sku sku) IF inSession(group(groupType, sku)) CHARWIDTH 15;
sumVATStock 'Итоговая сумма НДС продаж' (GroupType groupType) =
    GROUP                                                
        SUM sumVATStock(Sku sku) IF inSession(group(groupType, sku)) CHARWIDTH 15;
sumStock 'Итоговая сумма продаж' (GroupType groupType) =
    GROUP                                                
        SUM sumStock(Sku sku) IF inSession(group(groupType, sku)) CHARWIDTH 15;       

//формы
FORM printListSalesReport 'Отчет по продажам'
    OBJECTS df=DATE PANEL SUBREPORT
    PROPERTIES dateFrom = VALUE(df)
    PROPERTIES inSaleReportStocks()
    
    OBJECTS dt=DATE PANEL
    PROPERTIES dateTo = VALUE(dt)

    OBJECTS gt = GroupType PANEL
    PROPERTIES(gt) SELECTOR name
    PROPERTIES(gt) READONLY costSumStock, markupSumStock,
                                sumVATStock, sumStock
    PROPERTIES(gt) READONLY sessionConcatGroups

    OBJECTS s = SaleLedger
    PROPERTIES(s) READONLY dateTime, nameStock, nameCustomer, nameSku, description,
                           quantity, costSum, markupSum, sumVAT, sum, averagePrice
    ORDERS nameSku(s)
    FILTERS active(s),
            inSaleReport(stock(s)),
            date(s) >= df,
            date(s) <= dt,
            inSession(group(gt, sku(s))),
            NOT skipSaleReport(sku(s),stock(s))
;

printListSalesReport 'Списком' (GroupType groupType, DATE dateFrom, DATE dateTo) 
    { PRINT printListSalesReport OBJECTS  gt = groupType, df = dateFrom, dt = dateTo; }   IMAGE 'print.png' IN print;
printListSalesReportXLS 'Списком (XLS)' (GroupType groupType, DATE dateFrom, DATE dateTo) 
    { PRINT printListSalesReport OBJECTS gt = groupType, df = dateFrom, dt = dateTo XLS; } IMAGE 'print.png' IN print;    
    
inReport 'Отм.' = DATA LOCAL BOOLEAN (Sku);
filterStock (Sku s) =   quantityStock(s) OR 
                                      costSumStock(s) OR
                                      markupSumStock(s) OR 
                                      sumVATStock(s) OR
                                      sumStock(s) OR 
                                      (compare() AND 
                                      (quantityStockCompare(s) OR 
                                      costSumStockCompare(s) OR
                                      markupSumStockCompare(s) OR 
                                      sumVATStockCompare(s) OR
                                      sumStockCompare(s)));
                                      
filterStock (Group g) = quantityStock(g) OR 
                                      costSumStock(g) OR
                                      markupSumStock(g) OR 
                                      sumVATStock(g) OR
                                      sumStock(g);


FORM printListSkuSalesReport 'Отчет по продажам'
    OBJECTS df=DATE PANEL SUBREPORT
    PROPERTIES dateFrom = VALUE(df)

    OBJECTS dt=DATE PANEL
    PROPERTIES dateTo = VALUE(dt)
    PROPERTIES inSaleReportStocks()
    
    OBJECTS gt = GroupType PANEL
    PROPERTIES(gt) SELECTOR name
    PROPERTIES(gt) READONLY costSumStock, markupSumStock,
                               sumVATStock, sumStock
    PROPERTIES(gt) READONLY sessionConcatGroups

    OBJECTS s = Sku
    PROPERTIES(s) READONLY name
    PROPERTIES(s) READONLY quantityStock, costSumStock, markupSumStock,
                                       sumVATStock, sumStock
    ORDERS name(s)
    FILTERS inSession(group(gt, s)),
            inReport(s) AND dt IS DATE AND df IS DATE
;

printListSkuSalesReport 'Списком(по товарам)' (GroupType groupType, DATE dateFrom, DATE dateTo)  { 
    inReport(Sku sku) <- NULL;
    inReport(Sku sku) <- filterStock (sku) WHERE filterStock (sku);
    PRINT printListSkuSalesReport OBJECTS gt = groupType, df = dateFrom, dt = dateTo ;
    
} IMAGE 'print.png' IN print;
printListSkuSalesReportXLS 'Списком(по товарам) (XLS)' (GroupType groupType, DATE dateFrom, DATE dateTo)  { 
    inReport(Sku sku) <- NULL;
    inReport(Sku sku) <- filterStock (sku) WHERE filterStock (sku);
    PRINT printListSkuSalesReport OBJECTS gt = groupType, df = dateFrom, dt = dateTo XLS;
    
} IMAGE 'print.png' IN print;     

FORM printSalesReport 'Отчет по продажам'
    OBJECTS df=DATE PANEL SUBREPORT
    PROPERTIES dateFrom = VALUE(df)
    PROPERTIES inSaleReportStocks()
    
    OBJECTS dt=DATE PANEL
    PROPERTIES dateTo = VALUE(dt)

    OBJECTS gt = GroupType PANEL
    PROPERTIES(gt) SELECTOR name
    PROPERTIES(gt) READONLY costSumStock, markupSumStock,
                                        sumVATStock, sumStock
    PROPERTIES(gt) READONLY sessionConcatGroups

    OBJECTS sk = Group
    PROPERTIES READONLY canonicalName(sk)
    ORDERS canonicalName(sk)
    PROPERTIES(sk) READONLY costSumStock, markupSumStock, sumVATStock, sumStock
    FILTERS inSession(sk) AND countSku(sk, gt),
            groupType(sk) == gt
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F5' DEFAULT

    OBJECTS s = SaleLedger
    PROPERTIES(s) READONLY dateTime, nameStock, nameCustomer, nameSku, description,
                           quantity, costSum, markupSum, sumVAT, sum, averagePrice
    ORDERS nameSku(s)
    FILTERS active(s),
            inSaleReport(stock(s)),
            date(s) >= df,
            date(s) <= dt,
            group(gt, sku(s)) == sk,
            NOT skipSaleReport(sku(s),stock(s))
;

printSalesReport 'По группам' (GroupType groupType, DATE dateFrom, DATE dateTo) 
    { PRINT printSalesReport OBJECTS gt = groupType, df = dateFrom, dt = dateTo; }   IMAGE 'print.png' IN print;
printSalesReportXLS 'По группам (XLS)' (GroupType groupType, DATE dateFrom, DATE dateTo) 
    { PRINT printSalesReport OBJECTS gt = groupType, df = dateFrom, dt = dateTo XLS; } IMAGE 'print.png' IN print;
    
FORM printSkuSalesReport 'Отчет по продажам'
    OBJECTS df=DATE PANEL SUBREPORT
    PROPERTIES dateFrom = VALUE(df)
    PROPERTIES inSaleReportStocks()
    OBJECTS dt=DATE PANEL
    PROPERTIES dateTo = VALUE(dt)

    OBJECTS gt = GroupType PANEL
    PROPERTIES(gt) SELECTOR name
    PROPERTIES(gt) READONLY costSumStock, markupSumStock, sumVATStock, sumStock
    PROPERTIES(gt) READONLY sessionConcatGroups

    OBJECTS sk = Group
    PROPERTIES READONLY canonicalName(sk)
    ORDERS canonicalName(sk)
    PROPERTIES(sk) READONLY costSumStock, markupSumStock, sumVATStock, sumStock
    FILTERS inSession(sk) AND countSku(sk, gt),
            groupType(sk) == gt
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F5' DEFAULT

    OBJECTS s = Sku
    PROPERTIES(s) READONLY name
    PROPERTIES(s) READONLY quantityStock, costSumStock, markupSumStock, sumVATStock, sumStock
    ORDERS name(s)
    FILTERS group(gt, s) == sk,
            filterStock(s) AND dt IS DATE AND df IS DATE
;

printSkuSalesReport 'По товарам(группы)' (GroupType groupType, DATE dateFrom, DATE dateTo) 
    { PRINT printSkuSalesReport OBJECTS gt = groupType, df = dateFrom, dt = dateTo; }   IMAGE 'print.png' IN print;
printSkuSalesReportXLS 'По товарам(группы) (XLS)' (GroupType groupType, DATE dateFrom, DATE dateTo) 
    { PRINT printSkuSalesReport OBJECTS gt = groupType, df = dateFrom, dt = dateTo XLS; } IMAGE 'print.png' IN print;
    
FORM printGroupSalesReport 'Отчет по продажам'
    OBJECTS df=DATE PANEL SUBREPORT
    PROPERTIES dateFrom = VALUE(df)
    PROPERTIES inSaleReportStocks()
    OBJECTS dt=DATE PANEL
    PROPERTIES dateTo = VALUE(dt)

    OBJECTS gt = GroupType PANEL
    PROPERTIES(gt) SELECTOR name
    PROPERTIES(gt) READONLY costSumStock, markupSumStock, sumVATStock, sumStock
    PROPERTIES(gt) READONLY sessionConcatGroups

    OBJECTS sk = Group
    PROPERTIES READONLY canonicalName(sk)
    ORDERS canonicalName(sk)
    PROPERTIES(sk) READONLY costSumStock, markupSumStock, sumVATStock, sumStock
    FILTERS inSession(sk) AND countSku(sk, gt),
            groupType(sk) == gt,
            filterStock(sk) AND dt IS DATE AND  df IS DATE
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F5' DEFAULT
;

printGrSalesReport 'По группам' (GroupType groupType, DATE dateFrom, DATE dateTo) 
    { PRINT printGroupSalesReport OBJECTS gt = groupType, df = dateFrom, dt = dateTo; }   IMAGE 'print.png' IN print;
printGrSalesReportXLS 'По группам (XLS)' (GroupType groupType, DATE dateFrom, DATE dateTo) 
    { PRINT printGroupSalesReport OBJECTS gt = groupType, df = dateFrom, dt = dateTo XLS; } IMAGE 'print.png' IN print;
    
FORM printGroupCustomerSalesReport 'Отчет по продажам'
    OBJECTS df=DATE PANEL SUBREPORT
    PROPERTIES dateFrom = VALUE(df)
    PROPERTIES inSaleReportStocks()
    OBJECTS dt=DATE PANEL
    PROPERTIES dateTo = VALUE(dt)

    OBJECTS gt = GroupType PANEL
    PROPERTIES(gt) SELECTOR name
    PROPERTIES(gt) READONLY costSumStock, markupSumStock,sumVATStock, sumStock
    PROPERTIES(gt) READONLY sessionConcatGroups

    OBJECTS l = LegalEntity
    PROPERTIES READONLY name(l)
    ORDERS name(l)
    PROPERTIES(gt, l, df, dt) READONLY costSumSalesStock, markupSumSalesStock,
                                           sumVATSalesStock, sumSalesStock
    FILTERS isBuyer(l)
    FILTERGROUP inactiveLegalEntity FILTER 'Активная' active(l) 'shift F10' DEFAULT
    
    OBJECTS s = SaleLedger
    PROPERTIES(s) READONLY dateTime, nameStock, nameCustomer, nameSku, description,
                           quantity, costSum, markupSum, sumVAT, sum, averagePrice
    ORDERS nameSku(s)
    FILTERS active(s),
            inSession(group(gt, sku(s))),
            inSaleReport(stock(s)),
            date(s) >= df,
            date(s) <= dt,
            customer(s) == l,
            NOT skipSaleReport(sku(s),stock(s))
;

printGrCustomerSalesReport 'По покупателям' (GroupType groupType, DATE dateFrom, DATE dateTo) 
    { PRINT printGroupCustomerSalesReport OBJECTS gt = groupType, df = dateFrom, dt = dateTo; }   IMAGE 'print.png' IN print;
printGrCustomerSalesReportXLS 'По покупателям (XLS)' (GroupType groupType, DATE dateFrom, DATE dateTo) 
    { PRINT printGroupCustomerSalesReport OBJECTS gt = groupType, df = dateFrom, dt = dateTo XLS; } IMAGE 'print.png' IN print;


FORM dialogCustomerStocksSaleReport 'Выбор складов (не обязательно)'

    OBJECTS dates = (dFrom = DATE, dTo = DATE) PANEL    
    OBJECTS gt = GroupType PANEL
        
    TREE stockTree a = BPSTRING[3], sg = StockGroup PARENT parent(sg)
    PROPERTIES READONLY VALUE(a), name(sg)
    ORDERS name(sg)
    FILTERS stringEqualsAll(a)

    OBJECTS s = Stock
    PROPERTIES(s) READONLY id, name
    PROPERTIES (s) inCustomerStockSaleReport
    ORDERS name(s)
    FILTERS isParent(sg, s) OR (s IS Stock AND NOT sg),
            isBuyer(s),
            countCompanyStock(sg) OR countCustomerStock(sg)

    FILTERGROUP inactiveStock FILTER 'Активный' active(s) 'ctrl F10' DEFAULT    
    FILTERGROUP select FILTER 'Отм.' inCustomerStockSaleReport(s) 'F9' 
    FILTERGROUP sold FILTER 'С продажей' sumSalesStock(gt,s,dFrom,dTo) 'F8'
;

DESIGN dialogCustomerStocksSaleReport {
    BOX {
        size = (1024, 768);        
        NEW topContainer {
            type = SPLITH;
            fill = 1;

            MOVE BOX(TREE stockTree) {
                caption = 'Склады';
            }

            MOVE BOX(s) {
                fill = 3;
                GRID(s) {
                    defaultComponent = TRUE;
                }
                PROPERTY(name(s)){
                    charWidth = 35;
                }
            }
        }

        MOVE TOOLBARBOX;
    }
}
    
FORM printGroupCustomerStockSalesReport 'Отчет по продажам'
    OBJECTS df=DATE PANEL SUBREPORT
    PROPERTIES dateFrom = VALUE(df)
    PROPERTIES inSaleReportStocks()
    OBJECTS dt=DATE PANEL
    PROPERTIES dateTo = VALUE(dt)

    OBJECTS gt = GroupType PANEL
    PROPERTIES(gt) SELECTOR name
    PROPERTIES(gt,df,dt) READONLY costSumSalesStock, markupSumSalesStock, sumVATSalesStock, sumSalesStock
    PROPERTIES(gt) READONLY sessionConcatGroups

    OBJECTS l = Stock
    PROPERTIES READONLY name(l), nameLegalEntity(l)
    ORDERS name(l)
    PROPERTIES(gt, l, df, dt) READONLY costSumSalesStock, markupSumSalesStock, sumVATSalesStock, sumSalesStock
    FILTERS isBuyer(l),
            (inCustomerStockSaleReport(l) AND countInCustomerStockSaleReport()) OR (l IS Stock AND NOT countInCustomerStockSaleReport())
    
    FILTERGROUP inactiveLegalEntity FILTER 'Активная' active(l) 'shift F10' DEFAULT
    
    OBJECTS s = SaleLedger
    PROPERTIES(s) READONLY dateTime, nameStock, nameCustomer, nameSku, description,
                           quantity, costSum, markupSum, sumVAT, sum, averagePrice
    ORDERS nameSku(s)
    FILTERS active(s),
            inSession(group(gt, sku(s))),
            inSaleReport(stock(s)),
            date(s) >= df,
            date(s) <= dt,
            customerStock(s) == l,
            NOT skipSaleReport(sku(s),stock(s))
;
printGrCustomerStockSalesReport 'По складам покупателя' (GroupType groupType, DATE dateFrom, DATE dateTo)  { 
    inCustomerStockSaleReport(Stock l) <- NULL;
    DIALOG dialogCustomerStocksSaleReport OBJECTS gt = groupType, dFrom = dateFrom, dTo = dateTo DO
        PRINT printGroupCustomerStockSalesReport OBJECTS gt = groupType, df = dateFrom, dt = dateTo;
    inCustomerStockSaleReport(Stock l) <- NULL;     
    
}   IMAGE 'print.png' IN print;
printGrCustomerStockSalesReportXLS 'По складам покупателя (XLS)' (GroupType groupType, DATE dateFrom, DATE dateTo)  { 
    inCustomerStockSaleReport(Stock l) <- NULL;
    DIALOG dialogCustomerStocksSaleReport OBJECTS gt = groupType, dFrom = dateFrom, dTo = dateTo DO
        PRINT printGroupCustomerStockSalesReport OBJECTS gt = groupType, df = dateFrom, dt = dateTo XLS;
    inCustomerStockSaleReport(Stock l) <- NULL;     
    
}   IMAGE 'print.png' IN print;
    
    
quantitySold 'Продано за интервал (кол-во)' (Sku sku, LegalEntity customer, DATE dateFrom, DATE dateTo) = GROUP
        SUM
        quantitySold(sku, Stock stock, customer, dateFrom, dateTo) IF inSaleReport(stock) AND NOT skipSaleReport(sku,stock);

costSumSold 'Себестоимость проданного за интервал' (Sku sku, LegalEntity customer, DATE dateFrom, DATE dateTo) = GROUP
        SUM        
        costSumSold(sku, Stock stock, customer, dateFrom, dateTo) IF inSaleReport(stock) AND NOT skipSaleReport(sku,stock);

markupSumSold 'Надбавка проданного за интервал' (Sku sku, LegalEntity customer, DATE dateFrom, DATE dateTo) = GROUP
        SUM
        markupSumSold(sku, Stock stock, customer, dateFrom, dateTo) IF inSaleReport(stock) AND NOT skipSaleReport(sku,stock);

sumVATSold 'Сумма НДС проданного за интервал' (Sku sku, LegalEntity customer, DATE dateFrom, DATE dateTo) = GROUP
        SUM
        sumVATSold(sku, Stock stock, customer, dateFrom, dateTo) IF inSaleReport(stock) AND NOT skipSaleReport(sku,stock);

sumSold 'Продано за интервал (сумма)' (Sku sku, LegalEntity customer, DATE dateFrom, DATE dateTo) = GROUP
        SUM
        sumSold(sku, Stock stock, customer, dateFrom, dateTo) IF inSaleReport(stock) AND NOT skipSaleReport(sku,stock);
    
    
FORM printGroupCustomerSkuSalesReport 'Отчет по продажам'
    OBJECTS df=DATE PANEL SUBREPORT
    PROPERTIES dateFrom = VALUE(df)
    PROPERTIES inSaleReportStocks()
    OBJECTS dt=DATE PANEL
    PROPERTIES dateTo = VALUE(dt)

    OBJECTS gt = GroupType PANEL
    PROPERTIES(gt) SELECTOR name
    PROPERTIES(gt) READONLY costSumStock, markupSumStock, sumVATStock, sumStock
    PROPERTIES(gt) READONLY sessionConcatGroups

    OBJECTS l = LegalEntity
    PROPERTIES READONLY name(l)
    ORDERS name(l)
    PROPERTIES(gt, l, df, dt) READONLY costSumSalesStock, markupSumSalesStock,
                                           sumVATSalesStock, sumSalesStock
    FILTERS isBuyer(l)
    FILTERGROUP inactiveLegalEntity FILTER 'Активная' active(l) 'shift F10' DEFAULT
    
    OBJECTS s = Sku
    PROPERTIES(s) READONLY name
    PROPERTIES(s, l, df, dt) READONLY quantitySold, costSumSold, markupSumSold,
                                          sumVATSold, sumSold
    ORDERS name(s)
    FILTERS inSession(group(gt, s)),
            quantitySold(s, l, df, dt) OR costSumSold(s, l, df, dt) OR
            markupSumSold(s, l, df, dt) OR sumVATSold(s, l, df, dt) OR
            sumSold(s, l, df, dt)
;

printGroupCustomerSkuSalesReport 'По товарам(покупатели)' (GroupType groupType, DATE dateFrom, DATE dateTo) 
    { PRINT printGroupCustomerSkuSalesReport OBJECTS gt = groupType, df = dateFrom, dt = dateTo; }   IMAGE 'print.png' IN print;
printGroupCustomerSkuSalesReportXLS 'По товарам(покупатели) (XLS)' (GroupType groupType, DATE dateFrom, DATE dateTo) 
    { PRINT printGroupCustomerSkuSalesReport OBJECTS gt = groupType, df = dateFrom, dt = dateTo XLS; } IMAGE 'print.png' IN print;
    
FORM printCustomerSalesReport 'Отчет по продажам'
    OBJECTS df=DATE PANEL SUBREPORT
    PROPERTIES dateFrom = VALUE(df)
    PROPERTIES inSaleReportStocks()
    OBJECTS dt=DATE PANEL
    PROPERTIES dateTo = VALUE(dt)

    OBJECTS gt = GroupType PANEL
    PROPERTIES(gt) SELECTOR name
    PROPERTIES(gt) READONLY costSumStock, markupSumStock, sumVATStock, sumStock
    PROPERTIES(gt) READONLY sessionConcatGroups

    OBJECTS l = LegalEntity
    PROPERTIES READONLY name(l)
    ORDERS name(l)
    PROPERTIES(gt, l, df, dt) READONLY costSumSalesStock, markupSumSalesStock,
                                           sumVATSalesStock, sumSalesStock
    FILTERS isBuyer(l),
            costSumSalesStock(gt, l, df, dt) OR markupSumSalesStock(gt, l, df, dt) OR
            sumVATSalesStock(gt, l, df, dt) OR sumSalesStock(gt, l, df, dt)
    FILTERGROUP inactiveLegalEntity FILTER 'Активная' active(l) 'shift F10' DEFAULT        
;

printCustomerSalesReport 'По покупателям' (GroupType groupType, DATE dateFrom, DATE dateTo) 
    { PRINT printCustomerSalesReport OBJECTS gt = groupType, df = dateFrom, dt = dateTo; }   IMAGE 'print.png' IN print;
printCustomerSalesReportXLS 'По покупателям (XLS)' (GroupType groupType, DATE dateFrom, DATE dateTo) 
    { PRINT printCustomerSalesReport OBJECTS gt = groupType, df = dateFrom, dt = dateTo XLS; } IMAGE 'print.png' IN print;
    
FORM printCustomerStockSalesReport 'Отчет по продажам'
    OBJECTS df=DATE PANEL SUBREPORT
    PROPERTIES dateFrom = VALUE(df)
    PROPERTIES inSaleReportStocks()
    OBJECTS dt=DATE PANEL
    PROPERTIES dateTo = VALUE(dt)

    OBJECTS gt = GroupType PANEL
    PROPERTIES(gt) SELECTOR name
    PROPERTIES(gt,df,dt) READONLY costSumSalesStock, markupSumSalesStock, sumVATSalesStock, sumSalesStock
    PROPERTIES(gt) READONLY sessionConcatGroups

    OBJECTS l = Stock
    PROPERTIES READONLY name(l), nameLegalEntity(l)
    ORDERS name(l)
    PROPERTIES(gt, l, df, dt) READONLY costSumSalesStock, markupSumSalesStock, sumVATSalesStock, sumSalesStock
    FILTERS isBuyer(l),
            (inCustomerStockSaleReport(l) AND countInCustomerStockSaleReport()) OR (l IS Stock AND NOT countInCustomerStockSaleReport()),    
            costSumSalesStock(gt, l, df, dt) OR markupSumSalesStock(gt, l, df, dt) OR
            sumVATSalesStock(gt, l, df, dt) OR sumSalesStock(gt, l, df, dt)
    FILTERGROUP inactiveLegalEntity FILTER 'Активная' active(l) 'shift F10' DEFAULT        
;

printCustomerStockSalesReport 'По складам покупателя' (GroupType groupType, DATE dateFrom, DATE dateTo)  { 
    inCustomerStockSaleReport(Stock l) <- NULL;
    DIALOG dialogCustomerStocksSaleReport OBJECTS gt = groupType, dFrom = dateFrom, dTo = dateTo DO
        PRINT printCustomerStockSalesReport OBJECTS gt = groupType, df = dateFrom, dt = dateTo ;
    inCustomerStockSaleReport(Stock l) <- NULL;     
    
}   IMAGE 'print.png' IN print;
printCustomerStockSalesReportXLS 'По складам покупателя (XLS)' (GroupType groupType, DATE dateFrom, DATE dateTo)  { 
    inCustomerStockSaleReport(Stock l) <- NULL;
    DIALOG dialogCustomerStocksSaleReport OBJECTS gt = groupType, dFrom = dateFrom, dTo = dateTo DO
        PRINT printCustomerStockSalesReport OBJECTS gt = groupType, df = dateFrom, dt = dateTo XLS;
    inCustomerStockSaleReport(Stock l) <- NULL;     
    
}   IMAGE 'print.png' IN print;
    
    
FORM dialogStocksSaleReport 'Выбор складов'

    TREE stockTree a = BPSTRING[3], sg = StockGroup PARENT parent(sg)
    PROPERTIES READONLY VALUE(a), name(sg)
    ORDERS name(sg)
    FILTERS stringEqualsAll(a)

    OBJECTS s = Stock
    PROPERTIES(s) READONLY id, name
    PROPERTIES (s) inSaleReportDialog
    ORDERS name(s)
    FILTERS isParent(sg, s) OR (s IS Stock AND NOT sg),
            isCompany(s),
            countCompanyStock(sg)

    FILTERGROUP inactiveStock FILTER 'Активный' active(s) 'ctrl F10' DEFAULT    
    FILTERGROUP select FILTER 'Отм.' inSaleReport(s) 'F9'
    
    EVENTS 
        ON INIT {
            inSaleReportDialog(Stock st) <- inSaleReport(st);
        },
        ON OK {
            inSaleReport(Stock st) <- inSaleReportDialog(st);
        }
;

DESIGN dialogStocksSaleReport {
    BOX {
        size = (1024, 768);

        NEW topContainer {
            type = SPLITH;
            fill = 1;

            MOVE BOX(TREE stockTree) {
                caption = 'Склады';
            }

            MOVE BOX(s) {
                fill = 3;
                GRID(s) {
                    defaultComponent = TRUE;
                }
                PROPERTY(name(s)){
                    charWidth = 35;
                }
            }
        }

        MOVE TOOLBARBOX;
    }
}
@extendFormFilterStockAccess(s, dialogStocksSaleReport, company);    
changeStocksSalesReport(GroupType gt, DATE df, DATE dt, DATE dfc, DATE dtc)  { 
    DIALOG dialogStocksSaleReport DO {
        fillSaleReportFromTo(gt, df, dt);
        fillSaleReportFromToCompare(gt, dfc, dtc);
    }
}
 
showMovementSkuStocksSale 'Показать движение товара по складу' (Sku sku)  { NEWSESSION NESTED(inSaleReport) SHOW movementSkuStock OBJECTS s = sku, st = (GROUP MIN Stock st IF inSaleReport(st)) ; }
showMovementPriceSkuStocksSale 'Показать изменение цены товара по складу' (Sku sku)  { NEWSESSION NESTED(inSaleReport) SHOW movementPriceSkuStock OBJECTS s = sku, st = (GROUP MIN Stock st IF inSaleReport(st)) ; }
    
FORM salesReport 'Отчет по продажам'
    OBJECTS df=DATE PANEL
    PROPERTIES dateFrom = VALUE(df)

    OBJECTS dt=DATE PANEL
    PROPERTIES dateTo = VALUE(dt)          
    
    OBJECTS dfc=DATE PANEL
    PROPERTIES dateFromCompare = VALUE(dfc) SHOWIF compare()
    
    OBJECTS dtc=DATE PANEL
    PROPERTIES dateToCompare = VALUE(dtc) SHOWIF compare()
    
    PROPERTIES compare() 
    
    OBJECTS gt = GroupType PANEL
    PROPERTIES(gt) SELECTOR name
    PROPERTIES(gt) READONLY sumStock
    
    PROPERTIES inSaleReportStocks() ON CHANGE changeStocksSalesReport(gt, df, dt, dfc, dtc)
    
    TREE skuTree sk = Group PARENT parent(sk)
    PROPERTIES inSession(sk)
    PROPERTIES READONLY order(sk), skuTreeName = name(sk)
    PROPERTIES(sk) READONLY recQuantityStock, recCostSumStock, recMarkupSumStock, 
                                        recSumVATStock, recSumStock
    PROPERTIES(sk) READONLY SHOWIF compare() recQuantityStockCompare AFTER recQuantityStock(sk), recCostSumStockCompare AFTER recCostSumStock(sk), 
                   recMarkupSumStockCompare AFTER recMarkupSumStock(sk) BACKGROUND recMarkupSumStockColor(sk), recSumVATStockCompare AFTER recSumVATStock(sk),
                   recSumStockCompare AFTER recSumStock(sk) BACKGROUND recSumStockColor(sk)
                                            
    ORDERS order(sk), skuTreeName
    FILTERS groupType(sk) == gt
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F5' DEFAULT

    OBJECTS s = SaleLedger
    PROPERTIES(s) READONLY dateTime, nameStock, nameCustomer, nameCustomerStock, nameSku, idSku SHOWIF showIDs(), description,
                           quantity, costSum, markupSum, sumVAT, sum, averagePrice
    ORDERS nameSku(s)
    FILTERS isParent(sk, sku(s)),
            active(s),
            inSaleReport(stock(s)),
            date(s) >= df,
            date(s) <= dt,
            NOT skipSaleReport(sku(s),stock(s))
            
    OBJECTS sku = Sku
    PROPERTIES(sku) in
    PROPERTIES(sku) READONLY name ON CONTEXTMENU showMovementSkuStocksSale[Sku](sku) ON CONTEXTMENU showMovementPriceSkuStocksSale[Sku](sku), id SHOWIF showIDs()
    PROPERTIES(sku) READONLY quantityStock, costSumStock, markupSumStock, sumVATStock, sumStock
    PROPERTIES(sku) READONLY SHOWIF compare() quantityStockCompare AFTER quantityStock(sku), costSumStockCompare AFTER costSumStock(sku),
                    markupSumStockCompare AFTER markupSumStock(sku) BACKGROUND markupSumStockColor(sku), sumVATStockCompare AFTER sumVATStock(sku),
                    sumStockCompare AFTER sumStock(sku) BACKGROUND sumStockColor(sku)
    FILTERS isParent(sk, sku),
            filterStock(sku)
    ORDERS name(sku)
            
    PROPERTIES(gt,df, dt) printListSalesReport, printListSkuSalesReport, printSalesReport, printSkuSalesReport, printGrSalesReport,
                           printGrCustomerSalesReport, printGrCustomerStockSalesReport, printGroupCustomerSkuSalesReport, printCustomerSalesReport, printCustomerStockSalesReport
    PROPERTIES(gt,df, dt) printListSalesReportXLS, printListSkuSalesReportXLS, printSalesReportXLS, printSkuSalesReportXLS, printGrSalesReportXLS,
                           printGrCustomerSalesReportXLS, printGrCustomerStockSalesReportXLS, printGroupCustomerSkuSalesReportXLS, printCustomerSalesReportXLS, printCustomerStockSalesReportXLS
    EVENTS 
        ON CHANGE gt fillSaleReportFromTo(gt, df, dt), 
        ON CHANGE df fillSaleReportFromTo(gt, df, dt), 
        ON CHANGE dt fillSaleReportFromTo(gt, df, dt),
        ON CHANGE dfc fillSaleReportFromToCompare(gt, dfc, dtc),
        ON CHANGE dtc fillSaleReportFromToCompare(gt, dfc, dtc),
        ON CHANGE gt fillSaleReportFromToCompare(gt, dfc, dtc)
    EVENTS ON INIT {
        SEEK salesReport.gt = defaultGroupType() IF defaultGroupType();
    }
;

setDateToCompare(DATE dateFromCompare, DATE dateFrom, DATE dateTo)  { 
    SEEK salesReport.dtc = sum(dateFromCompare, daysInclBetweenDates(dateTo, dateFrom) - 1);
}

EXTEND FORM salesReport
    EVENTS 
        ON CHANGE dfc setDateToCompare(dfc, dt, df)
;

DESIGN salesReport {
    NEW top {
        type = CONTAINERH;
        NEW intervalsContainer{
            caption = 'Период';
            type = CONTAINERV;
            NEW dateContainer{           
                type = CONTAINERH;
                MOVE PROPERTY(dateFrom){caption = 'Дата (с)';}
                MOVE PROPERTY(dateTo){caption = 'Дата (по)';}
            }
            MOVE PROPERTY(compare());
            NEW dateCompareContainer{           
                type = CONTAINERH;
                MOVE PROPERTY(dateFromCompare){caption = 'Дата (с)';}
                MOVE PROPERTY(dateToCompare){caption = 'Дата (по)';}
            }
        }
        
        MOVE BOX(gt){
            PROPERTY (name(gt)){caption = '';}
        };
        NEW stocks {
            caption = 'Склады';
            type = CONTAINERH;
            MOVE PROPERTY(inSaleReportStocks());        
        }
        NEW sumContainer{
            caption = 'Итоговые суммы';
            type = CONTAINERH;
            MOVE PROPERTY(sumStock(gt)){caption = 'Сумма продаж';};
        }
    }

    NEW center {
        fill = 1;
        type = SPLITH;
        NEW center1 {
            fill = 1;
            type = CONTAINERV ;
            width = 0;
            MOVE BOX(TREE skuTree);
        }
        NEW tab {
            caption = 'Результат';
            fill = 1;   
            type = CONTAINERV;

            NEW tabContainer {
                fill = 1;
                type = TABBED;
                MOVE BOX(sku) { caption = 'Товар';}
                MOVE BOX(s) { caption = 'Регистр';}
                NEW salesContainer {
                    type = CONTAINERV;
                    caption = 'Печать';
                    fill = 1;

                    NEW rowSalesContainer{
                        type = CONTAINERH;
                        caption = 'Печать';
                        NEW firstColumnSalesContainer{
                            caption = 'С детализацией';
                            type = COLUMNS;
                            columns = 2;
                            MOVE PROPERTY(printSalesReport(gt,df,dt));
                            MOVE PROPERTY(printSkuSalesReport(gt,df,dt));
                            MOVE PROPERTY(printGrCustomerSalesReport(gt,df,dt));
                            MOVE PROPERTY(printGrCustomerStockSalesReport(gt,df,dt));
                            MOVE PROPERTY(printGroupCustomerSkuSalesReport(gt,df,dt));
                        }
                        NEW secondColumnSalesContainer{
                            caption = 'Без детализации';
                            type = CONTAINERV;
                            MOVE PROPERTY(printGrSalesReport(gt,df,dt));
                            MOVE PROPERTY(printCustomerSalesReport(gt,df,dt));
                            MOVE PROPERTY(printCustomerStockSalesReport(gt,df,dt));
                        }
                        NEW thirdColumnSalesContainer{
                            caption = 'Список';
                            type = CONTAINERV;
                            MOVE PROPERTY(printListSalesReport(gt,df,dt));
                            MOVE PROPERTY(printListSkuSalesReport(gt,df,dt));                            
                        }
                    }
                    NEW rowSalesContainerXLS{
                        type = CONTAINERH;
                        caption = 'Экспорт XLS';
                        NEW firstColumnSalesContainerXLS{
                            caption = 'С детализацией';
                            type = COLUMNS;
                            columns = 2;
                            MOVE PROPERTY(printSalesReportXLS(gt,df,dt));
                            MOVE PROPERTY(printSkuSalesReportXLS(gt,df,dt));
                            MOVE PROPERTY(printGrCustomerSalesReportXLS(gt,df,dt));
                            MOVE PROPERTY(printGrCustomerStockSalesReportXLS(gt,df,dt));
                            MOVE PROPERTY(printGroupCustomerSkuSalesReportXLS(gt,df,dt));
                        }
                        NEW secondColumnSalesContainerXLS{
                            caption = 'Без детализации';
                            type = CONTAINERV;
                            MOVE PROPERTY(printGrSalesReportXLS(gt,df,dt));
                            MOVE PROPERTY(printCustomerSalesReportXLS(gt,df,dt));
                            MOVE PROPERTY(printCustomerStockSalesReportXLS(gt,df,dt));
                        }
                        NEW thirdColumnSalesContainerXLS{
                            caption = 'Список';
                            type = CONTAINERV;
                            MOVE PROPERTY(printListSalesReportXLS(gt,df,dt));
                            MOVE PROPERTY(printListSkuSalesReportXLS(gt,df,dt));
                        }
                    }               
                                        
                }
            }
        }
    }
    MOVE TOOLBARBOX;
}

onInitSalesReport()  { 
    IF countAccessCompanyStock(currentUser()) ==1 THEN {
        inSaleReport(Stock st)  <- TRUE WHERE  defaultCompanyStock(currentUser())== st; 
        fillSaleReportFromTo(SystemGroupType.skuGroupType,currentDate(),currentDate());
    }    
}
EXTEND FORM salesReport 
    EVENTS 
        ON INIT onInitSalesReport()
;


NAVIGATOR {
    salesReports {
        NEW salesReport;
    }
}

orderSort 'Порядок (внутри группы)' (Group g) = PARTITION SUM 1 ORDER order(g), name(g) BY groupType(g), parent(g);
canonicalOrderSort 'Порядок (полный)' (Group g) = STRING[250]((GROUP CONCAT lpad(STRING[3](orderSort(Group parent)), 3, '0') , '.' ORDER DESC level(g, parent)));
nameLevel4 'Наименование (со сдвигом)' (Group g) = STRING[100](repeat('    ', INTEGER(level(g))-1)) + name(g);

FORM saleReportGroupTree 'Отчет по продажам'
    OBJECTS gt = GroupType PANEL SUBREPORT 
    
    OBJECTS g = Group
    PROPERTIES (g) nameLevel4, recQuantityStock, recCostSumStock, recMarkupSumStock, recSumVATStock, recSumStock, canonicalOrderSort
    ORDERS canonicalOrderSort(g)
    
    FILTERS groupType(g) == gt
;

printSaleReportGroupTreeXls 'Экспорт в xls' (GroupType gt)  { 
    PRINT saleReportGroupTree OBJECTS gt = gt XLS;
}

EXTEND FORM salesReport PROPERTIES DRAW sk TOOLBAR printSaleReportGroupTreeXls(gt);