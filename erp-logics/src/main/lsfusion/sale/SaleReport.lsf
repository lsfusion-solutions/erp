MODULE SaleReport;

REQUIRE PurchaseShipment, PurchaseOrderStatus, SaleLedger;

NAMESPACE SaleReports;

//////////////////////Акты реализацииа////////////////////////////

CLASS SaleReport 'Акт реализации' : Document;
CLASS SaleReportDetail 'Строка акта реализации' : DocumentDetail;

@defineDocument(saleReport);
@deriveDocumentHeaderTimePrefix(SaleReport, );

@defineDocumentHeaderNumber(SaleReport, BPSTRING[2]);
@defineNumeratedDefault(SaleReport, 'Акты реализации', 'АР');

@defineDocumentDataStock(saleReport, stock, 'Склад', company);

@defineDocumentDescription (saleReport, 'Акт реализации');
@defineDocumentCurrency (saleReport);

@defineDocumentDetailSkuCustomPrefix(saleReportDetail, sku, , );
@defineDocumentDetailBatchCustomPrefix(saleReportDetail, batch, );
replace(Sku s, Batch b) + {  sku(SaleReportDetail detail) <- s WHERE batch(detail) == b;} 

@defineDocumentPosted(saleReport);

@defineDocumentClosed(saleReport);

@defineDocumentHeaderLegalEntity(saleReport, supplier, 'Поставщик');

CONSTRAINT  supplier(SaleReport o) AND NOT isSupplier(supplier(o))
    CHECKED BY supplier[SaleReport] MESSAGE 'В качестве поставщика в "Акте реализации" выбрана организация, которая не является поставщиком.';

company = DATA LegalEntity (SaleReport);
nameCompany 'Компания' (SaleReport o) = name(company(o)) IN documentPrm;

currency (SaleReport saleReport) <- OVERRIDE currency(companyStock(saleReport)), currency(company(saleReport)) 
    WHEN CHANGED(companyStock(saleReport)) OR CHANGED (company(saleReport));

skipCheck = ABSTRACT BOOLEAN (SaleReport);

CONSTRAINT  company(SaleReport o) AND NOT isCompany(company(o)) AND NOT skipCheck(o)
    CHECKED BY company[SaleReport] MESSAGE 'В качестве компании в "Акте реализации" выбрана организация, которая не является компанией.';

CONSTRAINT companyStock(SaleReport o) AND company(o) AND NOT in(company(o),companyStock(o)) AND NOT skipCheck(o)
    CHECKED BY companyStock[SaleReport] MESSAGE 'Выбранный склад не принадлежит компании в "Акте реализации".';   

contractSku = DATA ContractSku (SaleReport);
numberContractSku 'Договор (номер)' (SaleReport o) = number[Contract](contractSku(o)) IN documentPrm;
descriptionContractSku 'Договор' (SaleReport o) = description(contractSku(o)) IN documentPrm;

INDEX contractSku(SaleReport s), companyStock(s), s;

replace(ContractSku c, ContractSku o) + { contractSku(SaleReport object) <- o WHERE contractSku(object) == c;}

CONSTRAINT contractSku(SaleReport o) AND NOT company(o) == partyB(contractSku(o)) AND NOT skipCheck(o)
    CHECKED BY contractSku[SaleReport] MESSAGE 'Организация (покупатель) договора не соответствует компании в акте реализации';    

CONSTRAINT contractSku(SaleReport o) AND NOT supplier(o) == partyA(contractSku(o)) AND NOT skipCheck(o)
    CHECKED BY contractSku[SaleReport] MESSAGE 'Организация (поставщик) договора не соответствует поставщику в акте реализации'; 

fromDate 'Дата с' = DATA DATE (SaleReport) IN documentHeader;
toDate 'Дата по' = DATA DATE (SaleReport) IN documentHeader;

quantity 'Кол-во' = DATA NUMERIC[14,3] (SaleReportDetail);
price 'Цена' = DATA NUMERIC[16,4] (SaleReportDetail);

VAT = DATA Range (SaleReportDetail);
numberVAT 'НДС, номер' (SaleReportDetail d) = number(VAT(d));
valueVAT 'НДС, %' = DATA NUMERIC[10,5] (SaleReportDetail);

sum 'Сумма поставщика' = DATA NUMERIC[18,4] (SaleReportDetail);
VATSum 'Сумма НДС поставщика' = DATA NUMERIC[18,4] (SaleReportDetail);
invoiceSum 'Сумма поставщика с НДС' = DATA NUMERIC[18,4] (SaleReportDetail);

sumBalanceB 'Остаток с НДС (начало)' = DATA NUMERIC[18,4] (SaleReportDetail);
sumBalanceA 'Остаток с НДС (конец)' = DATA NUMERIC[18,4] (SaleReportDetail);
sumReturn 'Возврат с НДС' = DATA NUMERIC[18,4] (SaleReportDetail);

quantityBalanceB 'Остаток количество (начало)' = DATA NUMERIC[16,5] (SaleReportDetail);
quantityBalanceA 'Остаток количество (конец)' = DATA NUMERIC[16,5] (SaleReportDetail);

sumBalanceBReportDetail 'Остаток с НДС (начало)' (saleReport) = GROUP SUM sumBalanceB(SaleReportDetail idetail) BY saleReport(idetail) IN documentSum MATERIALIZED;
sumBalanceAReportDetail 'Остаток с НДС (конец)' (saleReport) = GROUP SUM sumBalanceA(SaleReportDetail idetail) BY saleReport(idetail) IN documentSum MATERIALIZED;
sumReturnReportDetail 'Возврат с НДС' (saleReport) = GROUP SUM sumReturn(SaleReportDetail idetail) BY saleReport(idetail) IN documentSum MATERIALIZED;

CONSTRAINT tax(VAT(SaleReportDetail d)) != Tax.taxVAT OR
           country(VAT(d)) != country(legalEntity(companyStock(d)))
           CHECKED BY VAT[SaleReportDetail]
           MESSAGE 'ошибка: Шкала и страна строки должна соответствовать шкале и строке НДС: Tax';

@defineDocumentHeaderQuantityPrefix (saleReport, , );

@defineDocumentHeaderSumPrefix (saleReport, , ' поставщика');

@defineDocumentHeaderSumPrefix (saleReport, VAT, ' НДС поставщика');

@defineDocumentHeaderSumPrefix (saleReport, invoice, ' поставщика с НДС');

inSalereport 'Вкл. в отчет "Акт реализации"' = DATA BOOLEAN (Stock);

EXTEND FORM options 
    PROPERTIES (s) inSalereport
;
       
quantitySoldCompanyFromTo 'Продано за интервал (кол-во)' = GROUP SUM quantitySold(Batch bt,Stock st,DATE dFrom,DATE dTo) IF inSalereport(st)
    BY  bt,legalEntity(st),dFrom,dTo;  
       
balanceBCompanyFrom 'Остаток начало (кол-во)' = GROUP SUM balanceB(Batch bt,Stock st,DATE dFrom) IF inSalereport(st)
    BY  bt,legalEntity(st),dFrom;          
balanceACompanyTo 'Остаток конец (кол-во)' = GROUP SUM balanceA(Batch bt,Stock st,DATE dTo) IF inSalereport(st)
    BY  bt,legalEntity(st),dTo; 
     
quantityReturnFromTo 'Возвращено' = GROUP SUM (-cost(PurchaseLedger ledger, Batch batch)) IF cost(ledger, batch) <0 
    AND date(ledger) >= DATE dateFrom AND date(ledger) <= DATE dateTo
    BY batch, stock(ledger), dateFrom, dateTo;

quantityReturnCompanyFromTo 'Возвращено' = GROUP SUM (-cost(PurchaseLedger ledger, Batch batch)) IF cost(ledger, batch) <0 
    AND date(ledger) >= DATE dateFrom AND date(ledger) <= DATE dateTo AND inSalereport(stock(ledger))
    BY batch, legalEntity(stock(ledger)), dateFrom, dateTo;

skipSaleReport = ABSTRACT BOOLEAN (Batch);     
       
originalBatch = ABSTRACT Batch(Batch);
batchOver (Batch b) = OVERRIDE originalBatch(b), b IF b IS Batch;

useCustomReport = ABSTRACT BOOLEAN (SaleReport);
fillDataCustomReport  ABSTRACT (SaleReport);
quantityNested  = DATA LOCAL NESTED NUMERIC[16,5](Batch);
reportNested  = DATA LOCAL NESTED BOOLEAN (Batch);

fillData 'Заполнить данные'(SaleReport report)  {    
    IF supplier(report) AND contractSku(report) AND company(report) THEN {
        DELETE SaleReportDetail d WHERE d IS SaleReportDetail AND saleReport(d)== report;
        
        LOCAL report = BOOLEAN (Batch);
        LOCAL quantity = NUMERIC[16,5](Batch);
        LOCAL sum = NUMERIC[18,4](Batch);
        LOCAL quantityReturn = NUMERIC[16,5](Batch);
        LOCAL balanceB = NUMERIC[16,5](Batch);
        LOCAL balanceA = NUMERIC[16,5](Batch);
        LOCAL price = NUMERIC[16,4](Batch);
        LOCAL value = NUMERIC[10,5](Batch);
         
        report(Batch batch) <- TRUE WHERE supplier(report) == supplier(batchOver(batch)) AND contractSku(report) == contractSku(invoice(invoiceDetail(batchOver(batch)))) AND NOT skipSaleReport(batch);
        
        quantity(Batch batch) <- (IF companyStock(report)
            THEN quantitySold(batch, companyStock(report), fromDate(report), toDate(report))
            ELSE quantitySoldCompanyFromTo(batch, company(report), fromDate(report), toDate(report))) WHERE report(batch);
        IF useCustomReport(report) THEN {
            quantityNested(Batch batch)<- NULL;
            reportNested(Batch batch)<-  report(batch) AND quantity(batch);
            fillDataCustomReport(report);
            quantity(Batch batch)<- quantity(batch) (-) quantityNested(batch) WHERE quantityNested(batch);
        }
            
        quantityReturn(Batch batch) <- (IF companyStock(report) 
                    THEN quantityReturnFromTo(batch, companyStock(report), fromDate(report), toDate(report))
                    ELSE quantityReturnCompanyFromTo(batch, company(report), fromDate(report), toDate(report))) WHERE report(batch); 
        balanceB(Batch batch) <- (IF companyStock(report) 
                    THEN balanceB(batch, companyStock(report), fromDate(report))
                    ELSE balanceBCompanyFrom(batch, company(report), fromDate(report))) WHERE report(batch);                            
        balanceA(Batch batch) <- (IF companyStock(report) 
                    THEN balanceA(batch, companyStock(report), toDate(report))
                    ELSE balanceACompanyTo(batch, company(report), toDate(report))) WHERE report(batch); 
        report(Batch batch) <- NULL WHERE report(batch) AND NOT (quantity(batch) OR quantityReturn(batch) OR balanceB(batch) OR balanceA(batch));                      
        price(Batch batch) <- price(invoiceDetail(batchOver(batch))) WHERE report(batch);
        value(Batch batch) <- (OVERRIDE valueVAT(batchOver(batch)), valueVAT(sku(batch))) WHERE report(batch);   
        sum(Batch batch) <- NUMERIC[18,4](round(NUMERIC[14,3](quantity(batch)) * price(batch), currency(report))) WHERE report(batch);

        FOR report(Batch batch) NEW d = SaleReportDetail DO {        
    
            saleReport(d) <- report;
            batch(d) <- batch;
            sku(d) <- sku(batch);
            
            quantity(d) <- NUMERIC[14,3](quantity(batch));
            price(d) <- price(batch);
            VAT(d) <- OVERRIDE VAT(batchOver(batch)), VAT(sku(batch));
            valueVAT(d) <- value(batch);
            
            sum(d) <- sum(batch);
            VATSum(d) <- NUMERIC[18,4](round(sum(batch) * value(batch) / 100.0, currency(report)));                                                                                                                              
            invoiceSum(d) <- NUMERIC[18,4](sum(batch) (+) NUMERIC[18,4](round(sum(batch) * value(batch) / 100.0, currency(report))));  
                                                                                                                                                   
            sumBalanceB(d) <- NUMERIC[18,4](round(balanceB(batch) * price(batch) * (100 (+) value(batch)) / 100.0, currency(report)));                                                                                                                                         
            sumBalanceA(d) <- NUMERIC[18,4](round(balanceA(batch) * price(batch) * (100 (+) value(batch)) / 100.0, currency(report)));                                                                                                                                         
            sumReturn(d) <- NUMERIC[18,4](round(quantityReturn(batch) * price(batch) * (100 (+) value(batch)) / 100.0, currency(report)));
                                                                                                                                                                                                                                                                                                            
            quantityBalanceB(d) <- balanceB(batch);
            quantityBalanceA(d) <- balanceA(batch);
        }         
        
    } ELSE {
        MESSAGE 'Не задан поставщик, компания или договор.';
    }
}

@defineDocumentDialogLegalEntity(saleReport, supplier, supplier);
@defineDocumentDialogLegalEntity(saleReport, company, company);
@defineDocumentDialogStock(saleReport, company, company, );

note(SaleReport r) <- STRING[100](CONCAT ' ', nameSupplier(r), nameCompanyStock(r), 'с '+toDateDDMMYY(fromDate(r)), 'по '+toDateDDMMYY(toDate(r)))
    WHEN  CHANGED(fromDate(r)) OR CHANGED(toDate(r)) OR CHANGED (companyStock(r)) OR CHANGED (supplier(r));

FORM saleReport 'Акт реализации'

    OBJECTS r = SaleReport PANEL
    PROPERTIES (r) isPosted, nameCompany ON CHANGE changeCompanyCompany(r), nameCompanyStock ON CHANGE changeCompanyStockCompany(r), nameNumerator, 
                   number, series, date, time,
                   nameCurrency, note, fromDate, toDate,
                   nameSupplier ON CHANGE changeSupplierSupplier(r), numberContractSku                   
                                                              
    PROPERTIES (r) READONLY countSaleReportDetail, sumBalanceBReportDetail, sumReturnReportDetail, quantitySaleReportDetail, 
                   sumSaleReportDetail,  VATSumSaleReportDetail, invoiceSumSaleReportDetail, sumBalanceAReportDetail                    


    OBJECTS d = SaleReportDetail
    PROPERTIES (d) index
    PROPERTIES (d) idBarcodeSku, nameSku, shortNameUOMSku,
                   nameBatch
    PROPERTIES (d) sumBalanceB, sumReturn, quantity, price, sum, numberVAT, 
                   valueVAT, VATSum, invoiceSum, sumBalanceA 
                
    PROPERTIES (d) NEW, deleteid=DELETE GRID
    
    PROPERTIES(r)  fillData TOOLBAR DRAW d  
    
    ORDERS index(d)

    PROPERTIES(r) DRAW d deleteSaleReportDetail
    
    FILTERS saleReport(d) == r
    
    EVENTS
        ON OK prePost(r)

    EDIT SaleReport OBJECT r
;

DESIGN saleReport {
    BOX {
        size = (1024, 768);
        OBJECTS {
            NEW headerBox {
                type = CONTAINERH;
    
                NEW headerParams {
                    fill = 1;
                    type = CONTAINERV;
                    MOVE GROUP(documentHeader,r) {
                        columns = 1;
                        type = CONTAINERV;
                        NEW first {
                            type = CONTAINERH;
                            MOVE PROPERTY (isPosted(r));
                            MOVE PROPERTY(nameNumerator(r));
                            MOVE PROPERTY(number(r));
                            MOVE PROPERTY(series(r));
                            MOVE PROPERTY(date(r));
                            MOVE PROPERTY(time(r));                 
                        }
                        NEW second { 
                            type = CONTAINERH;
    
                            MOVE PROPERTY(fromDate(r));
                            MOVE PROPERTY(toDate(r));
                            MOVE PROPERTY(nameCompany(r));
                            MOVE PROPERTY(nameCompanyStock(r));
                            MOVE PROPERTY(nameSupplier(r));   
                            MOVE PROPERTY(numberContractSku(r));    
                        }                                                                                                                       
                    }
                    MOVE GROUP(documentPrm,r);
                }
                MOVE GROUP(documentSum,r) {
                    columns = 1;
                }
            }
            NEW specificationBox {
                fill = 1;
                MOVE BOX(d) {
                    caption = 'Спецификация';
                }
            }
            PROPERTY(formOk()) {
                caption = 'Провести';
            }
        }
    }
}

FORM reportsSales 'Акты реализации'

    OBJECTS r = SaleReport 
    PROPERTIES (r) READONLYIF isReadonly()  isClosed, isPosted, postedGrid = postedNameUser,  nameCompany, nameCompanyStock, 
                   number, series, date, time,
                   nameCurrency, note, fromDate, toDate,
                   fullNameSupplier, numberContractSku 
                
    PROPERTIES (r) READONLYIF isReadonly()  countSaleReportDetail, sumBalanceBReportDetail, sumReturnReportDetail, quantitySaleReportDetail, 
                   sumSaleReportDetail,  VATSumSaleReportDetail, invoiceSumSaleReportDetail, sumBalanceAReportDetail
                   
    PROPERTIES (r) NEWSESSION NEW, EDIT SHOWIF isOpened(r), deleter=DELETE SHOWIF isOpened(r)  
    PROPERTIES (r) READONLY PANEL createdNameUser, createdTime, createdHostnameComputer,
                    postedNameUser, postedTime, postedHostnameComputer 
    PROPERTIES (r) close SHOWIF isOpened(r), open SHOWIF isClosed(r)
        
    OBJECTS d = SaleReportDetail
    PROPERTIES (d) READONLYIF isReadonly() index
    PROPERTIES (d) READONLYIF isReadonly() idBarcodeSku, nameSku, shortNameUOMSku,
                   nameBatch
    PROPERTIES (d) READONLYIF isReadonly() sumBalanceB, sumReturn, quantity, price, sum, numberVAT, 
                   valueVAT, VATSum, invoiceSum, sumBalanceA 
    
    ORDERS index(d)

    FILTERS saleReport(d) == r
                
    LIST SaleReport OBJECT r
;
DESIGN reportsSales {
    BOX {
        size = (1024, 768);

        NEW documentContainer BEFORE TOOLBARBOX {
            fill = 1;

            type = SPLITV;
            MOVE BOX(r);    

            NEW documentDetail {
                fill = 1;
                type = TABBED;

                MOVE BOX(d) {
                    fill = 1;
                    caption = 'Спецификация';
                }
                NEW documentHistory {
                    caption = 'История';
                    type = CONTAINERV;

                    MOVE GROUP(created,r);
                    MOVE GROUP(posted,r);
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                        type = CONTAINERV;
                    }
                }
                NEW actionContainer {
                    caption = 'Действия';
                    type = CONTAINERH;
                    NEW createdContainer {
                        caption = 'Создание на основе';
                    }
                }
            }
        }
    }
}
@extendFormEditable(reportsSales);
@defineFilterIsOpened(saleReport, reportsSales, r);
@defineDocumentLogForm(reportsSales, r);

// История по правой кнопке
@defineBalancesBatch(saleReportDetail); //-- показываем по нажатию правой клавиши остатки партии
@defineMovementBatch(saleReportDetail, companyStock); //-- показываем по нажатию правой клавиши движение по партии

@defineMovementSku(saleReportDetail, companyStock); //-- показываем по нажатию правой клавиши движение товара
@defineBalancesSku(saleReportDetail); //-- показываем по нажатию правой клавиши остатки товара

@defineMovementPriceSku(saleReportDetail, companyStock); //-- показываем по нажатию правой клавиши изменение цены товара

@defineInfoSku(saleReportDetail); //-- показываем по нажатию правой клавиши информацию по товару

// -- Печатные формы

FORM detailSaleReport 'Акт реализации'

    OBJECTS r = SaleReport PANEL SUBREPORT
    PROPERTIES (r) nameCompany, nameCompanyStock, seriesNumber, 
                   number, series, date, time,
                   nameCurrency, note, fromDate, toDate,
                   nameSupplier, numberContractSku, descriptionContractSku                   
                                                              
    PROPERTIES (r) READONLY countSaleReportDetail, sumBalanceBReportDetail, sumReturnReportDetail, quantitySaleReportDetail, 
                   sumSaleReportDetail,  VATSumSaleReportDetail, invoiceSumSaleReportDetail, sumBalanceAReportDetail 
                   
    OBJECTS d = SaleReportDetail
    PROPERTIES (d) index
    PROPERTIES (d) idBarcodeSku, nameSku, shortNameUOMSku,
                   nameBatch
    PROPERTIES (d) quantity, price, sum, numberVAT, valueVAT, VATSum, invoiceSum,
                   sumBalanceB, sumBalanceA, sumReturn 
    
    ORDERS index(d)    
    FILTERS saleReport(d) == r
;
printDetail 'Акт реализации' (SaleReport report) 
    { PRINT detailSaleReport OBJECTS r = report; }   IMAGE 'print.png' IN print;

EXTEND FORM reportsSales
    PROPERTIES(r) printDetail     
;
DESIGN reportsSales {
    printContainer {
        MOVE GROUP(print,r);
    }    
}

@extendFormFilterAccessStock(SaleReport, r, reportsSales, companyStock, company);

NAVIGATOR {
    salesReports {
        NEW reportsSales;
    }
}

selected 'Отм.' = DATA LOCAL BOOLEAN (SaleReport); 
isSent 'Отправлен' (o) = DATA BOOLEAN (SaleReport);
sentDateTime 'Дата отправления' (o) = DATA DATETIME (SaleReport);

logSendDocumentSaleReport(Object o)  { 
	NEW d = DocumentLog {
        documentId(d) <- LONG(o);
        typeDocument(d) <- objectClassName(o);
        numberDocument(d) <- number[Document](o);  
        seriesDocument(d) <- series[Document](o); 
        dateDocument(d) <- date[Document](o);   
        note(d) <- 'Отправлен';  
        hostnameComputer(d) <- hostnameCurrentComputer();
        userLogin(d) <- login(currentUser()); 
        nameContact(d) <- STRING[100](name[Contact](currentUser()));
        dateTimeSession(d) <- currentDateTime();  
        supplierStock(d) <- supplierStock[Document](o);
        customerStock(d) <- customerStock[Document](o);
	}
}

FORM messageSaleReports 'Сообщение'
    OBJECTS s = SaleReport PANEL
    PROPERTIES(s) nameCompanyStock, fromDate, toDate
    PROPERTIES () messageEmailOrders DRAW s
;

calcEmailSupplier 'Отправить акт поставщику' (SaleReport report)  { 
    
    LOCAL file = FILE ();
    PRINT detailSaleReport OBJECTS r=report XLSX TO file;
    
    LOCAL bodyFile = FILE ();
    PRINT messageSaleReports OBJECTS s=report HTML TO bodyFile;
    
    TRY {
        EMAIL
        FROM OVERRIDE email(createdUser(report)) IF NOT notUseUserEmail(), fromEmailOrders()
        SUBJECT 'Акт реализации по ' + (OVERRIDE ('магазину ' + nameCompanyStock(report)), ('организации ' + nameCompany(report))) + ' за период с '  + fromDate(report)+ ' по ' + toDate(report)
        TO email(supplier(report))
        BODY bodyFile()
        ATTACH file() 
               NAME number(report) + '/' + fromDate(report)+ '/' + toDate(report);// без кирилицы должно быть         
    } CATCH {
        MESSAGE CONCAT ' ', 'Ошибка при отправке акта реализации на адрес ', email(supplier(report)), ' поставщику ', name(supplier(report)), ' : ', messageCaughtException();
        isSent(report) <- NULL;
    }
}
    
emailSupplierSingle  'Отправить акт поставщику' (SaleReport report) { 
    NEWSESSION {
        IF email(supplier(report)) THEN { 
    
            isSent(report) <- TRUE;
            IF NOT disableDocumentLog() THEN logSendDocumentSaleReport(report);
            sentDateTime(report) <- currentDateTime();
            calcEmailSupplier(report);
            
            APPLY;
        } ELSE  {
            MESSAGE 'У поставщика ' + nameSupplier(report) + ' не задан e-mail' NOWAIT;
        }
    }
}

emailSupplier 'Отправить акты поставщикам' (SaleReport report) { 
    selected(report) <- TRUE;
    
    FOR selected(SaleReport r) DO 
        emailSupplierSingle (r);
        
    selected(SaleReport r) <- NULL;
} TOOLBAR;

EXTEND FORM reportsSales
    PROPERTIES (r) selected BEFORE isClosed(r)
    PROPERTIES (r) READONLY isSent, sentDateTime
    PROPERTIES (r) emailSupplier
;

partSale 'Формировать два акта реализации за месяц' = ABSTRACT BOOLEAN (ContractSku);
partSale 'Формировать два акта реализации за месяц' = DATA BOOLEAN (UserContractSku);
partSale(UserContractSku c) += partSale(c);

skipSaleLedger 'Не создавать автоматич. акт реализации' = ABSTRACT BOOLEAN (ContractSku);
skipSaleLedger 'Не создавать автоматич. акт реализации' = DATA BOOLEAN (UserContractSku);
skipSaleLedger(UserContractSku c) += skipSaleLedger(c);

EXTEND FORM userContractSku 
    PROPERTIES (c) partSale, skipSaleLedger
;
DESIGN userContractSku{
    params {
        MOVE PROPERTY (partSale(c));
        MOVE PROPERTY (skipSaleLedger(c));
    }
}
EXTEND FORM contracts 
    PROPERTIES (c) READONLY  partSale[ContractSku]
;
EXTEND FORM contractSkus 
    PROPERTIES (c) READONLY  partSale
;

overCopyUser(UserContractSku from, UserContractSku to) +{
    partSale(to) <- partSale(from);
    skipSaleLedger(to) <- skipSaleLedger(from);
}
overCreateSaleReport = ABSTRACT BOOLEAN (ContractSku);
overFillData  ABSTRACT (SaleReport);

createAutoSaleReport 'Создать акты реализации'(LegalEntity company, DATE dateFrom, DATE dateTo)  { 
    FOR ContractSku c IS ContractSku AND (type(paymentCondition(c)) == AgreementPaymentType.implement OR overCreateSaleReport(c)) 
        AND inSalereport(Stock stock) AND partyB(c) == company AND in(partyB(c),stock) AND NOT skipSaleLedger(c) DO {
        NEWSESSION  {
            NEW r = SaleReport {
            
            supplier(r) <- partyA(c);
            company(r) <- partyB(c);
            companyStock(r) <- stock;
            contractSku(r) <- c;
            fromDate(r) <- dateFrom;
            toDate(r) <- dateTo;
            fillData(r);
            overFillData(r);
            IF countSaleReportDetail(r)  
                THEN {
                    apply();
                } ELSE {
                    cancel();
                }            
            }
        }
    }
}
firstSaleDate = firstDayOfMonth(sumMonth(currentDate(), -1));
firstDateCurrentMonth = firstDayOfMonth(currentDate());
lastSaleDate = lastDayOfMonth(sumMonth(currentDate(), -1));
fromDateFull(ContractSku c) = IF partSale(c) THEN sum(firstSaleDate(),15)
                                      ELSE firstSaleDate();

saleReport = GROUP MAX SaleReport r BY companyStock(r), contractSku(r), fromDate(r), toDate(r);

createAutoSaleReportdFull 'Создать акты реализации (месяц)'(LegalEntity company)  { 
    FOR ContractSku c IS ContractSku AND (type(paymentCondition(c)) == AgreementPaymentType.implement OR overCreateSaleReport(c)) 
        AND inSalereport(Stock stock) AND partyB(c) == company
        AND NOT saleReport(stock, c, fromDateFull(c), lastSaleDate())
        AND in(partyB(c),stock) AND NOT skipSaleLedger(c) DO {
        NEWSESSION {
            NEW r = SaleReport {
        
            supplier(r) <- partyA(c);
            company(r) <- partyB(c);
            companyStock(r) <- stock;
            contractSku(r) <- c;
            fromDate(r) <- fromDateFull(c);
            toDate(r) <- lastSaleDate();
            fillData(r);
            overFillData(r);            
            IF countSaleReportDetail(r)  
                THEN {
                    apply();
                } ELSE {
                    cancel();
                }
            }
        }
    }
}
createAutoSaleReportdPart 'Создать акты реализации (полмесяца)'(LegalEntity company)  { 
    FOR ContractSku c IS ContractSku AND (type(paymentCondition(c)) == AgreementPaymentType.implement OR overCreateSaleReport(c)) 
        AND inSalereport(Stock stock) AND partyB(c) == company AND  partSale(c) 
        AND NOT saleReport(stock, c, firstDateCurrentMonth(), sum(firstDateCurrentMonth(),14)) 
        AND in(partyB(c),stock) AND NOT skipSaleLedger(c) DO {
        NEWSESSION {
            NEW r = SaleReport {
                supplier(r) <- partyA(c);
                company(r) <- partyB(c);
                companyStock(r) <- stock;
                contractSku(r) <- c;
                fromDate(r) <- firstDateCurrentMonth();
                toDate(r) <- sum(firstDateCurrentMonth(),14);
                fillData(r);
                overFillData(r);
                IF countSaleReportDetail(r)  
                    THEN {
                        apply();
                    }
            }
        }

    }
}

createAutoSaleReportPrevMonth 'Создать акты реализации (за пред.месяц)'(LegalEntity company)  { 
    createAutoSaleReport(company, firstSaleDate(), lastSaleDate());    
}


createSchedulerAutoSaleReportdFull 'Создать акты реализации (за месяц)'()  { 
    FOR isCompany(LegalEntity l) DO {
        createAutoSaleReportdFull(l);    
    }
}

createSchedulerAutoSaleReportdPart 'Создать акты реализации (за полмесяца)'()  { 
    FOR isCompany(LegalEntity l) DO {
        createAutoSaleReportdPart(l);    
    }    
}

EXTEND FORM options 
    OBJECTS df = DATE PANEL, dt=DATE PANEL,l=LegalEntity PANEL 
    PROPERTIES dateFrom = VALUE (df), dateTo = VALUE (dt), name(l) SELECTOR 
    PROPERTIES createAutoSaleReport(l,df,dt), createAutoSaleReportdFull(l), createAutoSaleReportdPart(l)
    FILTERS isCompany(l)
; 

DESIGN options {
    stock {
        NEW saleRepotrs {
            caption = 'Акты реализации';
            type = CONTAINERV;
            NEW saleRepotrs1 {
                caption = 'За период';
                type = CONTAINERH;
                MOVE PROPERTY(dateFrom) {caption = 'Дата с';}
                MOVE PROPERTY(dateTo) {caption = 'Дата по';}    
                MOVE PROPERTY(name(l));
                MOVE PROPERTY(createAutoSaleReport(l,df,dt));                             
            }
            NEW saleRepotrs2 {
                caption = 'Предыдущий месяц';
                type = CONTAINERH;
                MOVE PROPERTY(createAutoSaleReportdFull(l)); 
                MOVE PROPERTY(createAutoSaleReportdPart(l)); 
            }
        }
    }
}

maxToDatePostedSaleSupplier = GROUP MAX toDate(SaleReport r) IF isPosted(r) AND NOT skipCheck(r)
    AND SaleReport report AS SaleReport AND NOT skipCheck(report) AND NOT r == report 
        BY report, companyStock(r), contractSku(r);

CONSTRAINT (SETCHANGED (fromDate(SaleReport r) ) OR SET(isPosted(r) OR SETCHANGED (companyStock(r)) OR SETCHANGED (contractSku(r))) OR CHANGED (skipCheck(r))) AND NOT skipCheck(r)
    AND fromDate(r) <= maxToDatePostedSaleSupplier(r, companyStock(r), contractSku(r)) 
    MESSAGE 'Есть акты реализации с периодом позже данного. Необходимо распровести более поздние акты';
    
WHEN LOCAL FORMS saleReport (SET(SaleReport r IS SaleReport) OR SETCHANGED (companyStock(r)) OR SETCHANGED (contractSku(r)) OR CHANGED (skipCheck(r))) AND NOT skipCheck(r) DO {
    fromDate(r) <- OVERRIDE sum(maxToDatePostedSaleSupplier(r, companyStock(r), contractSku(r)), 1), firstDayOfMonth(currentDate());
}
WHEN LOCAL FORMS saleReport SET (SaleReport r IS SaleReport) DO {
    toDate(r) <- lastDayOfMonth(currentDate());
}

isClosed[Document](SaleReport saleReport) += isClosed(saleReport);
isPosted[Document](SaleReport saleReport) += isPosted(saleReport);
number[Document](SaleReport saleReport) += number(saleReport);
series[Document](SaleReport saleReport) += series(saleReport);
date[Document](SaleReport saleReport) += date(saleReport);

supplier[Document](SaleReport saleReport) += supplier(saleReport);
customer[Document](SaleReport saleReport) += company(saleReport);
customerStock[Document](SaleReport saleReport) += companyStock(saleReport);

index[DocumentDetail](SaleReportDetail detail) += index(detail);
sku[DocumentDetail](SaleReportDetail detail) += sku(detail);
quantity[DocumentDetail](SaleReportDetail detail) += quantity(detail);
price[DocumentDetail](SaleReportDetail detail) += price(detail);

document[DocumentDetail](SaleReportDetail detail) += saleReport(detail);