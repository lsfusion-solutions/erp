MODULE Employee;

REQUIRE System, Authentication, MasterData, Security, Email, Hierarchy, Utils, Integration;

// ------------------------------------- Должности -------------------------------------- //
CLASS Position 'Должность';
TABLE position(Position);

@defineExternalizable(position, STRING[100]);

name 'Наименование' = DATA ISTRING[200](Position);

position(employee) = DATA Position (Employee);

FORM position 'Должность'
    OBJECTS of=Position PANEL
    PROPERTIES(of) name, id
    EDIT Position OBJECT of
;

FORM positions 'Должности'
    OBJECTS of=Position
    PROPERTIES(of) READONLY name, id SHOWIF showIDs()
    PROPERTIES(of) NEWSESSION NEW, EDIT, DELETE 
    LIST Position OBJECT of
;

// ------------------------------------- Доступ ------------------------------------------ //

// ------------------------------------- Сотрудники -------------------------------------- //

CLASS Employee 'Сотрудник' : CustomUser;
TABLE employee(Employee);
TABLE sessionEmployee(Session, Employee);
TABLE employeeEmployee (Employee, Employee);

@defineExternalizable(employee, STRING[100]);

overExternalPassword 'Пароль во внешней системе' = ABSTRACT STRING[100] (Employee) CHARWIDTH 10;
externalPassword 'Пароль во внешней системе' (Employee e) = OVERRIDE overExternalPassword(e), id(e);

initialsEmployee 'Инициалы (И.О.)' = DATA ISTRING[10] (Contact) CHARWIDTH 5;
shortName 'Фамилия И.О.' (Contact contact) = CONCAT ' ', lastName(contact), 
                                                        (OVERRIDE initialsEmployee(contact), firstName(contact)) IN id INDEXED MATCH MATERIALIZED;
firstShortName 'И.О. Фамилия' (Contact contact) = CONCAT ' ', (OVERRIDE initialsEmployee(contact), firstName(contact)),
                                                        lastName(contact) MATERIALIZED INDEXED MATCH;
idPosition 'Должность сотрудника' (Employee employee) = id(position(employee));
namePosition 'Должность сотрудника' (Employee employee) = name(position(employee)) IN base CHARWIDTH 15;

positionName 'Должность ФИО' (Employee employee) =  CONCAT ' ', namePosition(employee), name[Contact](employee) IF employee IS Employee;
positionShortName 'Должность ФИО (инициалы)' (Employee employee) =  CONCAT ' ', namePosition(employee), shortName(employee) IF employee IS Employee;

limitAccess 'Ограничить доступ' = DATA BOOLEAN (Employee) COMPLEX;
showLimitAccess = limitAccess(Employee e) AND showIDs();

inactive 'Неактивный' = DATA BOOLEAN (Employee);
active 'Активный' (Employee e) =  e IS Employee AND NOT inactive(e);

notLockedEmployee 'Не блокировать пользователя, если не задан логин' =DATA BOOLEAN ();
EXTEND FORM options
    PROPERTIES () notLockedEmployee
;
DESIGN options{
    commons{
        MOVE PROPERTY (notLockedEmployee());
    }
}

WHEN SET (Employee e IS Employee AND NOT login(e)) DO {
    limitAccess(e) <- TRUE;
    IF NOT notLockedEmployee() THEN {
        isLocked(e)<- TRUE;       
    }
}

FORM employee 'Сотрудник'
    OBJECTS e=Employee PANEL
    PROPERTIES(e) objectClassName, lastName, firstName, initialsEmployee, id SHOWIF showIDs(), namePosition, login, 
                  sha256Password ON CHANGE changeSHA256Password(e),
                  email, nameMainRole, limitAccess, isLocked, inactive,         
                  useClientLocale, userLanguage SHOWIF NOT useClientLocale(e), userCountry SHOWIF NOT useClientLocale(e),
                  userTimeZone, userTwoDigitYearStart,
                  fontSize
    OBJECTS r = UserRole
    PROPERTIES (r) READONLY name, sid
    PROPERTIES in(e,r)
    
    EDIT Employee OBJECT e
;

DESIGN employee {
    BOX {
        size = (1024, 768);
        NEW header {
            horizontal = TRUE;
            NEW personal {
                caption = 'Личные данные';
                type = COLUMNS;
                lines = 1;
                MOVE PROPERTY(lastName(e));
                MOVE PROPERTY(firstName(e));   
                MOVE PROPERTY(initialsEmployee(e));                  
                MOVE PROPERTY(id(e));
                MOVE PROPERTY(objectClassName(e)) {
                    caption = 'Тип';
                }
                MOVE PROPERTY(namePosition(e));
            }
            NEW authentication {
                caption = 'Данные пользователя';
                type = COLUMNS;
                lines = 1;
                MOVE PROPERTY(login(e));
                MOVE PROPERTY(sha256Password(e));
                MOVE PROPERTY(email(e));
                MOVE PROPERTY(nameMainRole(e));
            }
            NEW access {
                caption = 'Доступ';
                horizontal = FALSE;
                MOVE PROPERTY(limitAccess(e));
                MOVE PROPERTY(isLocked(e));
                MOVE PROPERTY(inactive(e)); 
            }
        }
        NEW pane {
            fill = 1;
            tabbed = TRUE;
            MOVE BOX(r) {
                fill = 1;
                caption= 'Дополнительные роли';                
            }
            NEW system {
                caption = 'Системные настройки';
                MOVE PROPERTY (useClientLocale(e));
                MOVE PROPERTY (userLanguage(e));
                MOVE PROPERTY (userCountry(e));
                MOVE PROPERTY (userTimeZone(e));
                MOVE PROPERTY (userTwoDigitYearStart(e));
                MOVE PROPERTY (fontSize(e));
            }
        }
        MOVE TOOLBARBOX;
    }
}
overCopy  ABSTRACT LIST ( Employee, Employee);
copyEmployee 'Копировать'(User employee)  { 
	NEWSESSION {
	    NEW e = Employee {
	
	        position(e) <- position(employee);
	        mainRole[User](e) <- mainRole(employee);
	        limitAccess(e) <- limitAccess(employee);
	        in(e,UserRole r) <- in(employee,r) WHERE in(employee,r);
	
	        overCopy(e, employee);
	
	        SHOW employee OBJECTS e = e DOCKED;
	    }
	}
} TOOLBAR;

userRoles 'Доп. роли' (Employee e) = GROUP CONCAT name(UserRole role) IF in(e, role), ', ' ORDER name(role) CHARWIDTH 15;

FORM employees 'Сотрудники'
    PROPERTIES isEditable()
    OBJECTS e=Employee
    PROPERTIES(e) READONLYIF isReadonly() inactive, lastName, firstName, initialsEmployee, id SHOWIF showIDs(), namePosition, shortName, login, nameMainRole, userRoles, isLocked, lastActivity
    PROPERTIES(e) NEWSESSION addE=NEW, editE=EDIT, deleteE=DELETE
    PROPERTIES(e)            copyEmployee
    
    FILTERGROUP active FILTER 'Активные' active(e) 'F6'  DEFAULT              
;

FORM dialogEmployees 'Сотрудники'
    OBJECTS e = Employee
    PROPERTIES (e) READONLY inactive, lastName, firstName, namePosition, nameMainRole, userRoles
    
    FILTERGROUP active FILTER 'Активные' active(e) 'F6'  DEFAULT 
    
    LIST Employee OBJECT e
;

DESIGN dialogEmployees {
    size = (800, 600);
    PROPERTY (lastName(e)) {
        charWidth = 15;
    }
    PROPERTY (firstName(e)) {
        charWidth = 25;
    }
    PROPERTY (namePosition(e)) {
        charWidth = 30;
    }
    PROPERTY (nameMainRole(e)) {
        charWidth = 25;
    }
}

DESIGN employees {
    MOVE TOOLBARBOX{
        MOVE PROPERTY(isEditable()) BEFORE TOOLBARRIGHT;
    }
}

NAVIGATOR {
    masterData {
        NEW employees BEFORE regionalData;
    }
}

// При создании пользователя автоматически делать его сотрудником

WHEN SET(CustomUser u IS CustomUser) AND NOT u IS Employee DO {
    CHANGECLASS u TO Employee;
}