MODULE ItemDescription;

REQUIRE System, Item;

NAMESPACE Item;

GROUP itemDescription 'Описание' : public;

// Вид
CLASS Type 'Вид товара';
TABLE type(Type);

name 'Наименование' = DATA ISTRING[100](Type) IN id;
typeName = GROUP AGGR Type type BY name(type); 

FORM type 'Вид товара'
    OBJECTS t=Type PANEL
    PROPERTIES(t) name
    EDIT Type OBJECT t
;

FORM types 'Виды товара'
    OBJECTS t=Type
    PROPERTIES(t) READONLY name
    PROPERTIES(t) NEWSESSION NEW, EDIT, DELETE
    ORDERS name(t)
    LIST Type OBJECT t
;
DESIGN types { BOX { size = (600, 400); } }

@defineObjectItemAttribute(type, Type, name, 'Вид', itemDescription);
@defineObjectItemAttributeBatch (type, nameType, 'Вид');
@implementItemAttribute(nameType, 'Вид', String, itemType);

@defineItemGroupDefaultObject(type, 'Вид', Type, nameType);
@defineItemFilterValue(type, 'Вид', t);

@defineUniteFilterAttributeItem(type, name, 'вид товара', 'виды товара', item);
@defineItemExtractObjectAttribute(type, nameType, typeName);

// Тип
CLASS Kind 'Тип товара';
TABLE kind(Kind);

name 'Наименование' = DATA ISTRING[100](Kind) IN id;
kindName = GROUP AGGR Kind kind BY name(kind); 

FORM kind 'Тип товара'
    OBJECTS t=Kind PANEL
    PROPERTIES(t) name
    EDIT Kind OBJECT t
;

FORM kinds 'Типы товара'
    OBJECTS t=Kind
    PROPERTIES(t) READONLY name 
    PROPERTIES(t) NEWSESSION NEW, EDIT, DELETE
    ORDERS name(t)
    LIST Kind OBJECT t
;
DESIGN kinds { BOX { size = (600, 400); } }

@defineObjectItemAttribute(kind, Kind, name, 'Тип', itemDescription);
@defineObjectItemAttributeBatch (kind, nameKind, 'Тип');
@implementItemAttribute(nameKind, 'Тип', String, itemKind);

@defineItemGroupDefaultObject(kind, 'Тип', Kind, nameKind);
@defineItemFilterValue(kind, 'Тип', t);

@defineUniteFilterAttributeItem(kind, name, 'тип товара', 'типы товара', item);
@defineItemExtractObjectAttribute(kind, nameKind, kindName);

// Сорт
CLASS Sort 'Сорт товара';
TABLE sort(Sort);

name 'Наименование' = DATA ISTRING[100](Sort) IN id;
sortName = GROUP AGGR Sort sort BY name(sort); 

FORM sort 'Сорт товара'
    OBJECTS t=Sort PANEL
    PROPERTIES(t) name
    EDIT Sort OBJECT t
;

FORM sorts 'Сорта товара'
    OBJECTS t=Sort
    PROPERTIES(t) READONLY name 
    PROPERTIES(t) NEWSESSION NEW, EDIT, DELETE
    ORDERS name(t)
    LIST Sort OBJECT t
;
DESIGN sorts { BOX { size = (600, 400); } }

@defineObjectItemAttribute(sort, Sort, name, 'Сорт', itemDescription);
@defineObjectItemAttributeBatch (sort, nameSort, 'Сорт');
@implementItemAttribute(nameSort, 'Сорт', String, itemSort);

@defineItemGroupDefaultObject(sort, 'Сорт', Sort, nameSort);
@defineItemFilterValue(sort, 'Сорт', t);

@defineUniteFilterAttributeItem(sort, name, 'сорт товара', 'сорта товара', item);
@defineItemExtractObjectAttribute(sort, nameSort, sortName);

// Форма
CLASS Form 'Форма товара';
TABLE form(Form);

name 'Наименование' = DATA ISTRING[100](Form) IN id;
formName = GROUP AGGR Form form BY name(form); 

FORM form 'Форма товара'
    OBJECTS t=Form PANEL
    PROPERTIES(t) name
    EDIT Form OBJECT t
;

FORM forms 'Формы товара'
    OBJECTS t=Form
    PROPERTIES(t) READONLY name 
    PROPERTIES(t) NEWSESSION NEW, EDIT, DELETE
    ORDERS name(t)
    LIST Form OBJECT t
;
DESIGN forms { BOX { size = (600, 400); } }

@defineObjectItemAttribute(form, Form, name, 'Форма', itemDescription);
@defineObjectItemAttributeBatch (form, nameForm, 'Форма');
@implementItemAttribute(nameForm, 'Форма', String, itemForm);

@defineItemGroupDefaultObject(form, 'Форма', Form, nameForm);
@defineItemFilterValue(form, 'Форма', t);

@defineUniteFilterAttributeItem(form, name, 'форма товара', 'формы товара', item);
@defineItemExtractObjectAttribute(form, nameForm, formName);

// Особенность
CLASS Feature 'Особенность товара';
TABLE feature(Feature);

name 'Наименование' = DATA ISTRING[255](Feature);
featureName = GROUP AGGR Feature feature BY name(feature); 

FORM feature 'Особенность товара'
    OBJECTS t=Feature PANEL
    PROPERTIES(t) name
    EDIT Feature OBJECT t
;

FORM features 'Особенности товара'
    OBJECTS t=Feature
    PROPERTIES(t) READONLY name 
    PROPERTIES(t) NEWSESSION NEW, EDIT, DELETE
    ORDERS name(t)
    LIST Feature OBJECT t
;
DESIGN features { BOX { size = (600, 400); } }

@defineObjectItemAttribute(feature, Feature, name, 'Особенность', itemDescription);
@defineObjectItemAttributeBatch (feature, nameFeature, 'Особенность');
@implementItemAttribute(nameFeature, 'Особенность', String, itemFeature);

@defineItemGroupDefaultObject(feature, 'Особенность', Feature, nameFeature);

DESIGN itemGroup {
    PROPERTY (prevNameFeature(g)) {charWidth = 20;}
}

@defineItemFilterValue(feature, 'Особенность', t);

@defineUniteFilterAttributeItem(feature, name, 'особенность товара', 'особенности товара', item);
@defineItemExtractObjectAttribute(feature, nameFeature, featureName);

// Упаковка
CLASS PackType 'Упаковка';
TABLE packtype(PackType);

name 'Наименование' = DATA ISTRING[200](PackType) CHARWIDTH 15;
packTypeName = GROUP AGGR PackType packType BY name(packType); 

FORM packType 'Упаковка товара'
    OBJECTS t=PackType PANEL
    PROPERTIES(t) name
    EDIT PackType OBJECT t
;

FORM packTypes 'Упаковки товара'
    OBJECTS t=PackType
    PROPERTIES(t) READONLY name 
    PROPERTIES(t) NEWSESSION NEW, EDIT, DELETE
    ORDERS name(t)
    LIST PackType OBJECT t
;
DESIGN packTypes { BOX { size = (600, 400); } }

@defineObjectItemAttribute(packType, PackType, name, 'Упаковка', itemDescription);
@defineObjectItemAttributeBatch (packType, namePackType, 'Упаковка');
@implementItemAttribute(namePackType, 'Упаковка', String, itemPackType);

@defineItemGroupDefaultObject(packType, 'Упаковка', PackType, namePackType);
@defineItemFilterValue(packType, 'Упаковка', t);

@defineUniteFilterAttributeItem(packType, name, 'упаковка товара', 'упаковки товара', item);
@defineItemExtractObjectAttribute(packType, namePackType, packTypeName);

// Фасовка
CLASS Pack 'Фасовка';
TABLE pack(Pack);

name 'Наименование' = DATA ISTRING[100](Pack) CHARWIDTH 10;
packName = GROUP AGGR Pack pack BY name(pack);

FORM pack 'Фасовка товара'
    OBJECTS t=Pack PANEL
    PROPERTIES(t) name
    EDIT Pack OBJECT t
;

FORM packs 'Фасовки товара'
    OBJECTS t=Pack
    PROPERTIES(t) READONLY name 
    PROPERTIES(t) NEWSESSION NEW, EDIT, DELETE
    ORDERS name(t)
    LIST Pack OBJECT t
;
DESIGN packs { BOX { size = (600, 400); } }


@defineObjectItemAttribute(pack, Pack, name, 'Фасовка', itemDescription);
@defineObjectItemAttributeBatch (pack, namePack, 'Фасовка');
@implementItemAttribute(namePack, 'Фасовка', String, itemPack);

@defineItemGroupDefaultObject(pack, 'Фасовка', Pack, namePack);
@defineItemFilterValue(pack, 'Фасовка', t);

@defineUniteFilterAttributeItem(pack, name, 'фасовка товара', 'фасовки товара', item);
@defineItemExtractObjectAttribute(pack, namePack, packName);

// Свойство
@defineStringItemAttribute(property, STRING[100], 'Свойство', itemDescription);
@defineItemAttributeBatch (property, 'Свойство');
@implementItemAttribute(property, 'Свойство', String, itemProperty);
@defineItemExtractStringAttribute(property);

// Кол-во компонентов
@defineIntegerItemAttribute(numberComponents, 'Кол-во компонентов', itemDescription);
@defineItemAttributeBatch (numberComponents, 'Кол-во компонентов');
@implementItemAttribute(numberComponents, 'Кол-во компонентов', Integer, itemNumberComponents);

// Код артикула
@defineStringItemAttribute(manufacturerCode, STRING[20], 'Код производителя', itemDescription);
@defineItemAttributeBatch (manufacturerCode, 'Код производителя');
@implementItemAttribute(manufacturerCode, 'Код производителя', String, itemManufacturerCode);

// Описание
@defineStringItemAttribute(description, TEXT, 'Описание', itemDescription);
@defineItemAttributeBatch (description, 'Описание');

DESIGN items {
    PROPERTY(description(i)) {
        valueSize = (200, 14);
    }
}

overCopy(Item s, Item d) + { 
    type(d) <- type(s);
    kind(d) <- kind(s);
    sort(d) <- sort(s);
    form(d) <- form(s);
    feature(d) <- feature(s);
    packType(d) <- packType(s);
    pack(d) <- pack(s);
    property(d) <- property(s);
    numberComponents(d) <- numberComponents(s);
    manufacturerCode(d) <- manufacturerCode(s);
    description(d) <- description(s);
}


DESIGN item {
    itemPrimaryColumn1 {
        MOVE GROUP(itemDescription,i) {
            alignment = STRETCH;
            columns = 2;
        }
        NEW description {
            caption = 'Характеристика';
            fill = 1;
            MOVE PROPERTY(description(i)) {
                fill = 1;
                caption = '';
                font = '"Courier New"';
                valueSize = (400, 128);
            }
        }
    }
}

DESIGN itemGroup {
    attributes {
        MOVE GROUP(itemDescription,g) {
            columns = 6;
        }
    }
}

//----------------------- Переход на новый основной классификатор ---------------------------//
overReplaceToItemGroup(CustomGroup g, ItemGroup ng) + {
    userShowType(ng) <- userShowType(itemGroup(g));
    userShowKind(ng) <- userShowKind(itemGroup(g));
    userShowSort(ng) <- userShowSort(itemGroup(g));
    userShowForm(ng) <- userShowForm(itemGroup(g));
    userShowFeature(ng) <- userShowFeature(itemGroup(g));
    userShowPackType(ng) <- userShowPackType(itemGroup(g));
    userShowPack(ng) <- userShowPack(itemGroup(g));
    userShowProperty(ng) <- userShowProperty(itemGroup(g));
    userShowNumberComponents(ng) <- userShowNumberComponents(itemGroup(g));
    userShowManufacturerCode(ng) <- userShowManufacturerCode(itemGroup(g));
    userShowDescription(ng) <- userShowDescription(itemGroup(g));
    dataType(ng) <- prevType(itemGroup(g));
    dataKind(ng) <- prevKind(itemGroup(g));
    dataSort(ng) <- prevSort(itemGroup(g));
    dataForm(ng) <- prevForm(itemGroup(g));
    dataFeature(ng) <- prevFeature(itemGroup(g));
    dataPackType(ng) <- prevPackType(itemGroup(g));
    dataPack(ng) <- prevPack(itemGroup(g)); 
}