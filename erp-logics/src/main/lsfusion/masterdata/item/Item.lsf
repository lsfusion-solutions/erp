MODULE Item;

REQUIRE System, Stock, Sku, Hierarchy, Barcode, PriceListType, PriceListCalc, Image;

// ------------------------------------ Классификатор товаров --------------------------- //

CLASS ItemGroup 'Товарная группа' : SkuGroup;
TABLE itemGroup (ItemGroup);

@defineExternalizable(itemGroup, STRING[100]);
@defineNumeratedID(ItemGroup, 'Товарные группы');

GROUP paramsItemGroup 'Параметры' : base;

extId 'Код' = DATA STRING[100] (ItemGroup);
overId 'Код' (ItemGroup g) = OVERRIDE extId(g), id(g);

name 'Наименование' = DATA ISTRING[250](ItemGroup) IN base CHARWIDTH 20;
order 'Порядок' = DATA INTEGER (ItemGroup) CHARWIDTH 2 IN paramsItemGroup;

name(ItemGroup group) += name(group) IF group IS ItemGroup;
order(ItemGroup group) += order(group) IF group IS ItemGroup;
id(ItemGroup group) += id(group) IF group IS ItemGroup;

TABLE itemGroupItemGroup(ItemGroup, ItemGroup);
@defineHierarchy(itemGroup);
@defineHierarchyFilter(ItemGroup, ItemGroup, name, 'По наименованию');

CONSTRAINT DROPPED(ItemGroup g IS ItemGroup) AND PREV(parent(ItemGroup child) = g) AND child IS ItemGroup
        MESSAGE 'Запрещено удалять группы, на которые ссылаются другие группы';

idParent (ItemGroup itemGroup) = overId(parent(itemGroup));

parent (ItemGroup itemGroup) += parent(itemGroup);

in 'Отм.' = DATA LOCAL BOOLEAN (ItemGroup);

skipMoveItemGroupOver = DATA BOOLEAN ();// если что-то пойдет не так
moveItemGroupOver ABSTRACT LIST(ItemGroup, ItemGroup);

moveItemGroup 'Перенести отмеченные группы в текущую'(itemGroup)  { 

    FOR in(ItemGroup i) DO{
        IF i != itemGroup THEN {
            IF NOT skipMoveItemGroupOver()THEN {
                moveItemGroupOver(itemGroup, i);
            }       
            parent(i) <- itemGroup;
            in(i) <- NULL;
        } ELSE {
            MESSAGE 'Выделенная товарная группа не может совпадать с объединяемой';
        }
    }
}

// ------------------ Формы  --------------------- //

FORM itemGroup 'Товарная группа'
    OBJECTS g=ItemGroup PANEL
    PROPERTIES(g) name, order, id SHOWIF showIDs(), nameParent    
    EDIT ItemGroup OBJECT g
;

FORM itemGroups 'Товарные группы'
    PROPERTIES filterNameItemGroup()

    TREE treeGroups g=ItemGroup PARENT parent(g)
    PROPERTIES in(g), moveItemGroup(g) TOOLBAR
    PROPERTIES READONLYIF isReadonly() order(g), id(g) SHOWIF showIDs(), name(g), canonicalName (g)
    PROPERTIES(g) NEWSESSION NEW, EDIT, deleteg=DELETE 
    FILTERS inIFilterName(g) OR NOT filterNameItemGroup()
    ORDERS order(g), canonicalName(g)
;

@extendFormEditable(itemGroups);

FORM dialogItemGroups 'Товарные группы'
    TREE treeGroups tg=ItemGroup PARENT parent(tg)
    PROPERTIES READONLY order(tg), id(tg) SHOWIF showIDs(), name(tg)
    ORDERS order(tg), name(tg)

    OBJECTS g=ItemGroup
    PROPERTIES(g) READONLY order , id SHOWIF showIDs(), name, canonicalName 
    PROPERTIES(g) NEWSESSION NEW, EDIT, DELETE
    ORDERS order(g), canonicalName(g)

    FILTERS isParent(g, tg)

    FILTERGROUP filters
        FILTER 'Все листья' isParentLeaf(g, tg) 'F10' DEFAULT
        FILTER 'Всех потомков' isParent(g, tg) 'F9'
        FILTER 'Только непосредственных потомков' parent(g) == tg 'F8'

    LIST ItemGroup OBJECT g
;

FORM dialogTreeItemGroups 'Товарные группы'
    TREE treeGroups tg=ItemGroup PARENT parent(tg)
    PROPERTIES READONLY order(tg), id(tg) SHOWIF showIDs(), name(tg)
    ORDERS order(tg), name(tg)
;
DESIGN dialogTreeItemGroups {
    size = (800, 600);
}

DESIGN dialogItemGroups {
    BOX {
        size = (1280, 1024);
        NEW rootContainer BEFORE TOOLBARBOX {
            fill = 1;
            type = SPLITH;
            MOVE BOX(TREE treeGroups);
            MOVE BOX(g) {
                fill = 2;
                GRID(g) { defaultComponent = TRUE; }
            }
        }
    }
}

NAVIGATOR {
    skuNavigator {
        NEW itemGroups BEFORE UOMs;
    }
}
// ----------------------------------- Товары ----------------------------------- //

CLASS Item 'Товар' : Sku;
TABLE item(Item) FULL;
TABLE sessionItem (Session, Item);

TABLE itemDate (Item, DATE);
TABLE itemCountry (Item, Country);
TABLE sessionItemCountry (Session, Item, Country);
TABLE itemCountryDate (Item, Country, DATE);

DESIGN options {
    pane {
        NEW items {
            caption = 'Товары';
        }
    }
};


id 'Код' = DATA STRING[100] (Item) IN id INDEXED CHARWIDTH 10;

TABLE itemId (STRING[100]);
item (id) = GROUP AGGR (Item item) BY id (item) MATERIALIZED TABLE itemId; // нужно MATERIALIZED, чтобы не допускало одинаковых кодов, а кидала UPDATE_CONFLICT

@defineOption(replaceSpacesInItemId, 'Замещать пробелы в коде товара', items);
WHEN LOCAL CHANGED (id(Item i)) AND replaceSpacesInItemId()  INLINE DO id(i) <- replace(id(i), ' ', '');

@defineNumeratedID(Item, 'Товары');

id(Item sku) += id(sku); 

CONSTRAINT active(Sku sku) AND sku IS Item AND NOT idBarcode(sku) AND setIdBarcodeSku()
    MESSAGE 'Для товара должен быть задан штрихкод';

// Связь с группой товаров
itemGroup 'Группа товара' = DATA ItemGroup(Item) AUTOSET INDEXED;
skuGroup(Item item) += itemGroup(item);
countItem 'Кол-во товаров' (g) = GROUP SUM 1 BY itemGroup(Item i);

nameItemGroup 'Группа товара' (Item item) = name(itemGroup(item)) IN id;
canonicalNameItemGroup 'Группа товара' (Item item) = canonicalName(itemGroup(item)) IN base;
idItemGroup 'Код группы товаров' (Item item) = id(itemGroup(item));

TABLE itemGroupItem (ItemGroup, Item);

isParent (ItemGroup itemGroup, Item item) = isParent(itemGroup(item), itemGroup) MATERIALIZED;


checkIsLeafItemGroup 'Товар должен быть привязан к нижнему узлу основного классификатора' = DATA BOOLEAN () COMPLEX;
noEventsInTransactionItem 'Отключить событие при объединении товаров' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES checkIsLeafItemGroup (), noEventsInTransactionItem()
;
DESIGN options {
    items {
        MOVE PROPERTY (checkIsLeafItemGroup ());
        MOVE PROPERTY (noEventsInTransactionItem ());
    }
}

CONSTRAINT CHANGED(itemGroup(Item i)) AND parent(itemGroup(i)) AND NOT isLeaf(itemGroup(i)) AND checkIsLeafItemGroup()
    CHECKED BY itemGroup[Item]
    MESSAGE 'Запрещено привязывать товар к промежуточным узлам основного классификатора';

// ------------------ Дополнительные группы --------------- //
TABLE customGroupTypeItem(CustomGroupType, Item);
TABLE sessionCustomGroupTypeItem(Session, CustomGroupType, Item);
customGroup = DATA CustomGroup (CustomGroupType, Item);
customGroup(CustomGroupType type, Item item) += customGroup(type, item);

nameCustomGroup 'Имя' (CustomGroupType type, Item item) = name(customGroup(type, item));
canonicalNameCustomGroup 'Каноническое имя' (CustomGroupType type, Item item) = canonicalName(customGroup(type, item));
idCustomGroup 'Код' (CustomGroupType type, Item item) = id(customGroup(type, item));

CONSTRAINT customGroupType(customGroup(CustomGroupType type, Item item)) != type
           CHECKED BY customGroup[CustomGroupType,Item]
           MESSAGE 'Выбранный объект классификатора SKU имеет неправильный тип';

// Атрибуты
dataImage 'Изображение' = DATA IMAGEFILE (Item);
loadImage 'Загрузить изображение' (Item item)  { INPUT =dataImage(item) CHANGE; }
overImage '' = ABSTRACT VALUE IMAGEFILE (Item);

image (Item item) = OVERRIDE dataImage (item), overImage (item);
openImage 'Открыть изображение' (Item item)  { open(image(item)); }
hasImage 'Есть изображение' (Item item) = TRUE IF image(item) MATERIALIZED;

nullImage 'Сбросить'(Item item)  { 
    image(item) <- NULL;
}

showItemImage 'Показывать изображение товара на форме "Товары"' = DATA BOOLEAN ();
defaultItemImage 'Показывать изображение товара на форме "Товары"' = DATA IMAGEFILE ();
loadDefaultItemImage 'Загрузить изображение по умолчанию на форме "Товары"' ()  { INPUT =defaultItemImage() CHANGE; }
openDefaultItemImage 'Открыть изображение по умолчанию на форме "Товары"' ()  { open(defaultItemImage()); }

EXTEND FORM options
    PROPERTIES () showItemImage, loadDefaultItemImage, openDefaultItemImage
;
DESIGN options {
    items{
        MOVE PROPERTY (showItemImage());
        MOVE PROPERTY (loadDefaultItemImage());
        MOVE PROPERTY (openDefaultItemImage());
    }
}

migrateShowItemImage = DATA BOOLEAN ();
onStarted() + {
    IF NOT migrateShowItemImage() THEN NEWSESSION {
        showItemImage() <- TRUE IF(GROUP SUM 1 IF image(Item i)) ;
        migrateShowItemImage() <- TRUE;
        APPLY;
    }
}

image 'Изображение' (Batch batch) = image(sku(batch)); 

smallImage = DATA IMAGEFILE (Item);
smallImageSize 'Размер уменьшенного изображения по горизонтали' = DATA INTEGER () PREREAD;

WHEN SETCHANGED (image(Item i)) AND smallImageSize() DO { 
    TRY {
        resizeImage(image(i), smallImageSize(), NULL);
        smallImage(i) <- resizedImage();
    }
}

WHEN DROPPED (image(Item i)) DO { 
    smallImage(i) <- NULL;
}

// -------------------------------- Надбавки для расчетных видов цен --------------------------------//

currentBasePrice 'Базовая цена' (CalcPriceListType type, Sku sku, Stock stock) = PREV(priceA[PriceListType,Sku,Stock,DATETIME](basePriceListType(type), sku, stock, currentDateTime()));
currentCalcPrice 'Расчетная цена' (PriceListType type, Sku sku, Stock stock) = PREV(priceA(type, sku, stock, currentDateTime()));

// ------------------------------------ Формы -------------------------- //
backgroundCurrentCalcPrice = ABSTRACT CASE COLOR (CalcPriceListType, Sku, Stock);

FORM item 'Товар'

    OBJECTS i=Item PANEL

    PROPERTIES(i) canonicalNameItemGroup, idBarcode ON CHANGE changeBarcode(i) EVENTID 'SCANNER',
                  dataImage, loadImage, nullImage, id SHOWIF showIDs()

    OBJECTS b=Barcode
    PROPERTIES(b)       id, date, caption, shortNameUOM,
                        amount, active, primary ON CHANGE changePrimary(b,i)
    PROPERTIES(i)       generateBarcode DRAW b 
    PROPERTIES(b)       NEW, deleteb=DELETE GRID
    FILTERS sku(b) == i

    OBJECTS cgt = CustomGroupType
    PROPERTIES name(cgt) READONLY, canonicalNameCustomGroup(cgt, i)

    OBJECTS dtr = DATE PANEL
    PROPERTIES (dtr) VALUE BACKGROUND dateDiffersCurrent(dtr)

    OBJECTS c = Country 
    PROPERTIES (c) READONLY name

    OBJECTS st2 = Stock PANEL
    PROPERTIES(st2) SELECTOR name
    FILTERS isCompany(st2)
    
    OBJECTS ct = CalcPriceListType
    PROPERTIES(ct) READONLY name, includeVAT[PriceListType], nameCurrency, nameRoundCondition,
                            nameBasePriceListType
    PROPERTIES(ct, i, st2) READONLY currentBasePrice
    PROPERTIES(ct, i) markup
    PROPERTIES(ct, i, st2) READONLY currentCalcPrice BACKGROUND  backgroundCurrentCalcPrice(ct, i, st2)

    EDIT Item OBJECT i
;

DESIGN item {
    BOX {
        NEW itemHeader BEFORE TOOLBARBOX {
            alignment = STRETCH;
            type = COLUMNS;
            columns = 2;
            MOVE PROPERTY(canonicalNameItemGroup(i)) {
                caption = 'Полное имя группы';
            }
            MOVE PROPERTY(idBarcode(i));
            MOVE PROPERTY(id(i));
        }
        NEW itemDetail BEFORE TOOLBARBOX {
            type = TABBED;
            fill = 1;
            NEW itemPrimary {
                caption = 'Основные данные';
                NEW itemPrimaryScroll {
                    type = SCROLL;
                    fill = 1;
                    height = 1;
                    NEW itemPrimaryPane {
        
                        NEW itemPrimaryRow1 {
                            alignment = STRETCH;
                            type = CONTAINERH;
                            NEW itemPrimaryColumn1 {
                                flex = 2;
                            }
                            NEW itemPrimaryColumn2 {
                                flex = 1;
                            }
                        }
                    }
                }
            }
            MOVE BOX(b) { caption = 'Штрих-коды'; }
            NEW itemGroup {
                type = CONTAINERV;
                caption = 'Классификаторы';
                MOVE BOX(cgt);
            }
            NEW regionalPrm {
                type = CONTAINERV;
                caption = 'Региональные параметры';
                MOVE BOX(dtr);
                MOVE BOX(c);
            }
            NEW calcPriceListTypePrm {
                type = CONTAINERV;
                caption = 'Цены';
                type = CONTAINERV;
                MOVE BOX(st2);
                MOVE BOX(ct);
            }
            NEW itemImage {
                type = CONTAINERV;
                caption = 'Изображение';
                MOVE PROPERTY(dataImage(i)) {
                    caption = '';
                    fill = 1;
                }
                MOVE PROPERTY(loadImage(i));
                MOVE PROPERTY(nullImage(i));
            }
        }
    }
}

seekBarcode 'Штрихкод' = DATA LOCAL STRING[15] ();
seekSkuBarcode()  { 
    INPUT s = STRING[15] DO {
        seek(skuBarcode(s, currentDate()));
        IF NOT skuBarcode(s, currentDate()) THEN
            MESSAGE 'Штрихкод не найден';
    }
}

disallowEditing 'Запретить редактирование' = ABSTRACT BOOLEAN (Item);
enableEditing = Item s IS Item AND NOT disallowEditing(s);
disallowEditing[Sku](Item sku) += disallowEditing(sku);

edit(Item item) + { 
    IF NOT disallowEditing(item) THEN {
        DIALOG EDIT Item = item DOCKED;
    } ELSE {
        MESSAGE 'Запрещено редактировать товар после обработки.';
    } 
};
addItem()  { 
    NEWSESSION {
        NEW i=Item AUTOSET
            REQUEST 
                edit(i);
            DO 
                seek(i);
    }
}
addSku () + {  addItem(); }

background = ABSTRACT CASE COLOR (Item);

FORM items 'Товары'

    OBJECTS gt=GroupType PANEL
    PROPERTIES(gt) SELECTOR name

    TREE groupTree g=Group PARENT parent(g)
    PROPERTIES READONLY order(g), id(g), name(g)
    FILTERS groupType(g) == gt, g IS Group AND NOT (g IS SkuGroup AND NOT g IS ItemGroup)
    ORDERS order(g), name(g)
    FILTERGROUP inactive1 FILTER 'Активные' active(g) 'F5' DEFAULT
    
    OBJECTS i=Item  
    PROPERTIES(i) READONLYIF isReadonly() idBarcode ON CHANGE changeBarcode(i) BACKGROUND background(i), image PANEL SHOWIF showItemImage(), id SHOWIF showIDs() BACKGROUND background(i)
    PROPERTIES(i) NEWSESSION NEW, edit = EDIT SHOWIF enableEditing(i), deletei=DELETE 
    PROPERTIES seekBarcode() ON CHANGE seekSkuBarcode() EVENTID 'SCANNER'
    PROPERTIES READONLY PANEL  defaultItemImage() SHOWIF (showItemImage() AND NOT i IS Item)
    LIST Item OBJECT i  
;

seekSkuGroupType()  { SEEK items.gt = SystemGroupType.skuGroupType; }
EXTEND FORM items
    EVENTS
        ON INIT seekSkuGroupType()
;

DESIGN items {
    NEW root {
        type = SPLITH;
        fill = 1;
        NEW filters {
            width = 300;
            MOVE BOX(gt);
            NEW itemImage {               
                fill = 1;
                type = SPLITV;
                MOVE BOX(TREE groupTree) { fill = 2; caption = 'Группы';}         
                NEW   itemImageCustom { 
                    fill = 1; 
                    type = SPLITV;  
                    MOVE PROPERTY (image(i)) {
                        fill = 1;
                        caption = '';
                    }
                    MOVE PROPERTY (defaultItemImage()) {
                        fill = 1;
                        caption = '';
                    }  
                }                              
            }  
        }
        NEW pane {
            fill = 5;
            width = 400;
            type = CONTAINERV;
            MOVE BOX(i) {
                fill = 5;
                GRID(i) {
                    defaultComponent = TRUE;
                }
            }
            NEW tab {
                type = TABBED;
                fill = 1;
                NEW actionsTab {
                    caption = 'Действия';
                    NEW actionsScroll {
                        fill = 1;
                        type = SCROLL;
                        width = 1;
                        height = 1;
                        NEW actions {
                            NEW actionsRow1 {
                                type = CONTAINERH;
                                NEW seek {
                                    caption = 'Поиск';
                                    type = CONTAINERH;
                                    alignment = STRETCH;
                                    MOVE PROPERTY(seekBarcode()) {
                                        changeKey = 'F4';
                                    }
                                }
                            }
                            NEW actionsRow2 {
                                type = CONTAINERH;
                            }
                            NEW actionsRow3 {
                                type = CONTAINERH;
                                NEW actionsImport {
                                    caption = 'Импорт';
                                    type = CONTAINERH;
                                    alignment = STRETCH;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    MOVE TOOLBARBOX;
}

NAVIGATOR {
    skuNavigator {
        NEW items BEFORE itemGroups;
    }
}

@extendFormEditable(items);

// ----------------------------------- Атрибуты товаров ------------------------------------------ //

CLASS ABSTRACT ItemAttribute 'Атрибут товара';
TABLE itemAttribute(ItemAttribute);
TABLE itemItemAttribute(Item, ItemAttribute);

// Отображение
META defineItemAttribute (attribute, caption, group)
    userShow###attribute caption (itemGroup) = DATA BOOLEAN (ItemGroup) IN group;

    quantityChildWith###attribute(ItemGroup itemGroup)  = GROUP SUM 1 IF userShow###attribute(ItemGroup childItemGroup) AND isParent(childItemGroup, itemGroup) MATERIALIZED;
    quantityParentWith###attribute(ItemGroup itemGroup)  = GROUP SUM 1 IF userShow###attribute(ItemGroup parentItemGroup) AND isParent(itemGroup, parentItemGroup) MATERIALIZED;

    show###attribute caption (ItemGroup itemGroup) = TRUE IF (quantityChildWith###attribute (itemGroup) (+) quantityParentWith###attribute (itemGroup)) > 0 MATERIALIZED;
    showAny###attribute caption (ItemGroup itemGroup) = show###attribute(itemGroup) OR NOT itemGroup IS ItemGroup;

    show###attribute caption (Item item) = TRUE IF quantityParentWith###attribute(itemGroup(item));

    backgroundShow###attribute (ItemGroup itemGroup) =
        IF userShow###attribute(itemGroup) THEN
            RGB(0,0,0) IF itemGroup IS ItemGroup
        ELSE
            RGB(203,203,206) IF quantityChildWith###attribute (itemGroup) != descendantNumber(itemGroup)
                             AND NOT quantityParentWith###attribute (itemGroup);

    setNullShow###attribute 'Снять признак для всех потомков'(ItemGroup itemGroup)  { 
        FOR isParent (ItemGroup childGroup, itemGroup) DO {
            userShow###attribute(childGroup) <- NULL;
        }
    } ASON CONTEXTMENU userShow###attribute[ItemGroup] CONFIRM;
END

// Объявление
value = ABSTRACT ISTRING[255] (Item, ItemAttribute) MATERIALIZED;

META defineItemAttribute(attribute, formProperty, caption, group)
    @defineItemAttribute(attribute, caption, group);

    EXTEND FORM itemGroup PROPERTIES(g) userShow###attribute;
    EXTEND FORM itemOptions PROPERTIES(g) READONLYIF  isReadonly() show###attribute BACKGROUND backgroundShow###attribute(g);
    
    background###attribute = ABSTRACT COLOR (Item);
    EXTEND FORM item PROPERTIES(i) formProperty###attribute SHOWIF show###attribute(i) BACKGROUND background###attribute(i);
    EXTEND FORM items PROPERTIES(i) READONLYIF isReadonly() BEFORE deletei formProperty###attribute SHOWIF showAny###attribute(g);
END

// Примитивный тип
META definePrimitiveItemAttribute(attribute, type, caption, group)
    attribute caption = DATA type (Item) IN group;
    @defineItemAttribute(attribute, , caption, group);
END

META implementItemAttribute(property, caption, itemType, attributeClass)
    EXTEND CLASS itemType##ItemAttribute { attributeClass caption }
    value[Item,itemType##ItemAttribute](Item i, itemType##ItemAttribute a) += WHEN a == itemType##ItemAttribute.##attributeClass AND i IS Item THEN property(i);
END

// Форма настройки артибутов
FORM itemOptions 'Настройка атрибутов'
    OBJECTS ia = ItemAttribute
    PROPERTIES staticIA= staticCaption(ia)

    TREE groups g=ItemGroup PARENT parent(g)
    PROPERTIES (g) READONLY order, id SHOWIF showIDs(), name
    PROPERTIES (g) NEWSESSION EDIT
    ORDERS order(g), name(g)    
    
    TREE treeGroups tg=ItemGroup PARENT parent(tg)
    PROPERTIES (tg) READONLY order, id SHOWIF showIDs(), name
    ORDERS order(tg), name(tg)    
    
    OBJECTS ia1 = ItemAttribute
    PROPERTIES staticIA1= staticCaption(ia1)   
    FILTERGROUP filterA1
        FILTER 'Все' staticCaption(ia1) 
;

DESIGN itemOptions {
    NEW itemTab {
        fill = 1;
        type = TABBED;
        MOVE BOX(ia) {caption = 'Общие';};
        NEW show {
            caption = 'Отображение';
            fill = 1;
            MOVE BOX(TREE groups);
        }
        NEW items1 {
            fill = 1;
            caption = 'Для групп';
            type = SPLITH;
            MOVE BOX(TREE treeGroups);
            MOVE BOX(ia1);
        }
    }
    MOVE TOOLBARBOX;
}

@extendFormEditable(itemOptions);

NAVIGATOR {
    skuNavigator {
        NEW itemOptions;
    }
}

META defineItemAttributeBatch (attribute, formProperty, caption, skuClass)
    show###attribute caption (Batch batch)= show###attribute(sku(batch));
    attribute caption (Batch batch) = attribute[Item](sku(batch));

    EXTEND FORM batches PROPERTIES(bt) READONLY  formProperty SHOWIF showAny###attribute(sk);
END

META defineItemAttributeBatchClass (attribute, caption, skuClass)
    @defineItemAttributeBatch (attribute, attribute, caption, skuClass);
END

META defineItemAttributeBatch (attribute, formProperty, caption)
    @defineItemAttributeBatch(attribute, formProperty, caption, item);
END
META defineItemAttributeBatch (attribute, caption)
    @defineItemAttributeBatch (attribute, attribute, caption);
END

META defineObjectItemAttributeBatch(attribute, identity, caption)
    @defineObjectItemAttributeBatch(attribute, identity, caption, item);
END

META defineObjectItemAttributeBatch(attribute, identity, caption, skuClass)
    identity caption (Batch batch) = identity(sku(batch));
    @defineItemAttributeBatch(attribute, identity, caption, skuClass);
END

FORM attributesItem 'Атрибуты товаров'
;

DESIGN attributesItem {
    NEW tabContainer {
        fill = 1;    
        type = TABBED;
    }
    MOVE TOOLBARBOX;
}

META defineUniteAttributeItem(object, nameProp, caption1, caption2, object2)
    in 'Отм.' = DATA LOCAL NESTED BOOLEAN (###object);
    allowReplace###object = DATA LOCAL BOOLEAN ();
    
    FORM confirmReplace###object 'Объединяемые '##caption2
        OBJECTS object = ###object PANEL 
    
        OBJECTS o = ###object  
        PROPERTIES(o) READONLY nameProp
        FILTERS o==object
    
        OBJECTS o2 = ###object
        PROPERTIES(o2) in
        PROPERTIES(o2) READONLY nameProp
        FILTERS in(o2)
    ;
    
    DESIGN confirmReplace###object {
        REMOVE BOX(object);
        NEW splitContainer{
            type = SPLITV;
            fill = 1;
            MOVE BOX(o){
                caption = 'Основной '##caption1;
            }
            MOVE BOX(o2){
                caption = 'Удаляемый '##caption1;
            }           
        }
        MOVE TOOLBARBOX;
    }
    
    overReplace(oTo, oFrom)  ABSTRACT LIST ( ###object, ###object);
    replace 'Объединить'(###object object)  {   
        DIALOG confirmReplace###object OBJECTS o=object DO {
            allowReplace###object() <- TRUE;
            FOR in(###object o) AND allowReplace###object() DO{
                IF o != object THEN {
                    object(###object2 object2) <- object WHERE object(object2) == o;
                    overReplace(object, o);
                    in(o) <- NULL;
                    DELETE o;            
                } ELSE {
                    MESSAGE 'Выделенный '##caption1##' не может совпадать с объединяемым';
                }
            }
            apply();
        }   
    };
    
    EXTEND FORM attributesItem
        OBJECTS object = ###object
        PROPERTIES in(object)
        PROPERTIES READONLY nameProp(object)
        PROPERTIES(object) NEWSESSION NEW, EDIT, delete###object =DELETE         
        ORDERS nameProp(object)
        PROPERTIES replace(object) TOOLBAR
        
        OBJECTS object##Item = Item
        PROPERTIES(object##Item) READONLY idBarcode, nameProp, id[Sku], idSkuGroup
        PROPERTIES(object##Item) nameProp###object, EDIT NEWSESSION 
        FILTERS object(object##Item) == object
    ;
    
    DESIGN attributesItem {
        tabContainer {
            NEW object##Tab {
                type = SPLITV;
                caption = ''###caption2;
                MOVE BOX(object) { fill = 3; };
                NEW object##TabBottomContainer{
                    type = TABBED;
                    fill = 1;
                    MOVE BOX(object##Item);
                }
            }
        }
    }

END

META defineUniteFilterAttributeItem(object, nameProp, caption1, caption2, object2)
    @defineUniteAttributeItem(object, nameProp, caption1, caption2, object2);
    overReplace(###object oTo, ###object oFrom) + {  
        dataIn (oTo, ###object2##Group g) <- dataIn (oFrom, g) WHERE dataIn(oFrom, g);
    }
END

META defineUniteAttributeItemWithoutExtendForm(object, nameProp, caption1, caption2, object2)
    in 'Отм.' = DATA LOCAL NESTED BOOLEAN (###object);
    
    FORM confirmReplace###object 'Объединяемые '##caption2
        OBJECTS object = ###object PANEL 
    
        OBJECTS o = ###object  
        PROPERTIES(o) READONLY name
        FILTERS o==object
    
        OBJECTS o2 = ###object
        PROPERTIES(o2) in
        PROPERTIES(o2) READONLY name
        FILTERS in(o2)
    ;
    
    DESIGN confirmReplace###object {
        REMOVE BOX(object);
        NEW splitContainer{
            type = SPLITV;
            fill = 1;
            MOVE BOX(o){
                caption = 'Основной '##caption1;
            }
            MOVE BOX(o2){
                caption = 'Удаляемый '##caption1;
            }           
        }
        MOVE TOOLBARBOX;
    }
    
    replace 'Объединить'(###object object)  { 
        DIALOG confirmReplace###object OBJECTS o=object DO {
            FOR in(###object o) DO {
                IF o != object THEN {
                    object(###object2 object2) <- object WHERE object(object2) == o;
                    in(o) <- NULL;
                    DELETE o;            
                } ELSE {
                    MESSAGE 'Выделенный '##caption1##' не может совпадать с объединяемым';
                }
            }
            apply();
        }
        in(###object o) <- NULL;           
    } CONFIRM;
END

NAVIGATOR {
    skuNavigator {
        NEW attributesItem;
    }
}

// -------------------------------------------- Формирование наименования ----------------------------------- //

prefixInName 'Префикс' = DATA STRING[20] (ItemAttribute);
postfixInName 'Постфикс' = DATA STRING[20] (ItemAttribute);

EXTEND FORM itemOptions PROPERTIES(ia) prefixInName, postfixInName;

completeName (Item item, ItemAttribute attribute) = CONCAT '', prefixInName(attribute) IF item IS Item, value(item, attribute), postfixInName(attribute) IF item IS Item;

overName 'Наименование (перегруженное)' = ABSTRACT ISTRING[255](Item);

META defineItemAttributeName (prefix, caption, group)
    @defineItemDefaultValueCustom(numberInName###prefix, 'Порядковый номер в наименовании'##caption, INTEGER, itemAttribute);

    numberInName###prefix 'Порядковый номер в наименовании'##caption = DATA INTEGER (ItemAttribute) IN base;
    numberInNameItemAttribute###prefix(ItemGroup itemGroup)  = GROUP SUM numberInName###prefix(ItemAttribute attribute, itemGroup);
    numberInName###prefix 'Порядковый номер в наименовании'##caption (ItemAttribute attribute, Item item) = 
        IF numberInNameItemAttribute###prefix(itemGroup(item))
            THEN numberInName###prefix(attribute, itemGroup(item))
            ELSE numberInName###prefix(attribute);
    
    nameConcat###prefix##Attribute (Item item) = GROUP CONCAT completeName(item, ItemAttribute attribute)
                                                   IF numberInName###prefix(attribute, item) AND value(item, attribute), ' ' ORDER numberInName###prefix(attribute, item), attribute MATERIALIZED;
    name###prefix##Attribute 'Наименование'###caption (Item item) = OVERRIDE overName(item),
                            ISTRING[255](
                    nameConcat###prefix##Attribute(item))
                    IN group MATERIALIZED CHARWIDTH 40 INDEXED MATCH;
    
    background###prefix (ItemAttribute a, ItemGroup g) = RGB(203,203,206) IF numberInName###prefix(a, g) AND NOT numberInName###prefix(a, g) == dataNumberInName###prefix(a,g);   
    EXTEND FORM itemOptions 
        PROPERTIES(ia) numberInName###prefix
        PROPERTIES(ia1, tg) numberInName###prefix BACKGROUND background###prefix(ia1, tg)
        EXTEND FILTERGROUP filterA1
            FILTER 'В наименовании'##caption numberInName###prefix(ia1, tg)  
    ;
END

// -------------------------------------- Типы атрибутов ------------------------------- //

// Строка
CLASS StringItemAttribute 'Строковый атрибут' : ItemAttribute;

value = ABSTRACT CASE EXCLUSIVE ISTRING[255] (Item, StringItemAttribute) MATERIALIZED;
value(Item item, StringItemAttribute attribute) += value(item, attribute);

META defineStringItemAttribute(attribute, type, caption, group)
    @definePrimitiveItemAttribute(attribute, type, caption, group);
    WHEN LOCAL FORMS item, items SETCHANGED (attribute(Item i)) AND trimAttributes() DO {
        attribute(i) <- type(trim(attribute(i)));
    } 
END

// Целое число
CLASS IntegerItemAttribute 'Целочисленный атрибут' : ItemAttribute;

value = ABSTRACT CASE EXCLUSIVE INTEGER (Item, IntegerItemAttribute) MATERIALIZED;
string(Item item, IntegerItemAttribute attribute) = STRING[255](value(item, attribute));
value(Item item, IntegerItemAttribute attribute) += string(item, attribute);

META defineIntegerItemAttribute(attribute, caption, group)
    @definePrimitiveItemAttribute(attribute, INTEGER, caption, group);
END

// Дробное число
CLASS DoubleItemAttribute 'Дробный атрибут' : ItemAttribute;

value = ABSTRACT CASE EXCLUSIVE DOUBLE (Item, DoubleItemAttribute) MATERIALIZED;
string(Item item, DoubleItemAttribute attribute) = STRING[255]([ FORMULA TEXT PG 'convert_numeric_to_string(CAST(($1) AS numeric))', MS 'dbo.convert_numeric_to_string(CAST(($1) AS numeric(38,19)))'](value(item, attribute)));
value(Item item, DoubleItemAttribute attribute) += string(item, attribute);

META defineDoubleItemAttribute(attribute, type, caption, group)
    @definePrimitiveItemAttribute(attribute, type, caption, group);
END

// ------------------------------- Значения для групп по умолчанию ------------------------------------- //

GROUP defaultItemGroup 'По умолчанию' : base;
META defineItemGroupObject(property, caption, type, typeIdentity, group)
    data###property caption = DATA type (ItemGroup);
    data###typeIdentity caption (ItemGroup itemGroup) = name(data###property(itemGroup)) IN group;
    
    levelParent###property(ItemGroup itemGroup)  = GROUP
                                                                  MIN level(itemGroup, ItemGroup parent) IF data###property(parent) MATERIALIZED;    
    nearestParent###property (ItemGroup itemGroup) = itemGroup(itemGroup, levelParent###property(itemGroup));
    nearest###property (ItemGroup itemGroup) = data###property(nearestParent###property (itemGroup));
    property (ItemGroup itemGroup) =
        OVERRIDE data###property(itemGroup), 
                 nearest###property (itemGroup) MATERIALIZED;
                 
    prev###property (ItemGroup itemGroup) =     
        OVERRIDE data###property(itemGroup), 
                 PREV(nearest###property (itemGroup));
    
    typeIdentity caption (ItemGroup itemGroup) = name(property(itemGroup)) IN group;
    prev###typeIdentity caption (ItemGroup itemGroup) = name(prev###property(itemGroup)) IN group;    

    EXTEND FORM itemGroup PROPERTIES(g) prev###typeIdentity;
END 

META defineItemGroupObject(property, caption, type, typeIdentity)
    @defineItemGroupObject(property, caption, type, typeIdentity, paramsItemGroup);
END

META defineItemGroupDefaultObject(property, caption, type, typeIdentity)
    @defineItemGroupObject(property, caption, type, typeIdentity, defaultItemGroup);

    WHEN LOCAL CHANGED(itemGroup(Item i)) AND NOT property(i) DO
        property(i) <- property(itemGroup(i));
END

//META defineItemGroupValue(property, caption, type, typeIdentity)  
//    @defineItemGroupValue(property, caption, type, typeIdentity, typeIdentity);
//END 

META defineItemGroupValue(property, caption, type, group)
    data###property caption = DATA type (ItemGroup) IN group;
    
    levelParent###property(ItemGroup child)  = GROUP
                                                                  MIN level(child, ItemGroup parent) IF data###property(parent) MATERIALIZED;    
    nearestParent###property (ItemGroup itemGroup) = itemGroup(itemGroup, levelParent###property(itemGroup));
    nearest###property (ItemGroup itemGroup) = data###property(nearestParent###property (itemGroup));
    property caption (ItemGroup itemGroup) =
        OVERRIDE data###property(itemGroup), 
                 nearest###property (itemGroup) MATERIALIZED IN group;        

    prev###property caption (ItemGroup itemGroup) =
        OVERRIDE data###property(itemGroup), 
                 PREV(nearest###property (itemGroup)) IN group;        
    
    EXTEND FORM itemGroup PROPERTIES(g) prev###property; 
END 

META defineItemGroupValue(property, caption, type)
    @defineItemGroupValue(property, caption, type, paramsItemGroup);
END  

META defineItemGroupValueGrid(property, caption, type)
    @defineItemGroupValue(property, caption, type, paramsItemGroup);

    quantityChildWith###property(ItemGroup itemGroup) = GROUP SUM 1 IF data###property(ItemGroup childItemGroup) AND isParent(childItemGroup, itemGroup) MATERIALIZED;
    quantityParentWith###property(ItemGroup itemGroup) = GROUP SUM 1 IF data###property(ItemGroup parentItemGroup) AND isParent(itemGroup, parentItemGroup) MATERIALIZED;

    backgroundShow###property (ItemGroup itemGroup) =
        IF data###property(itemGroup) THEN
            RGB(0,0,0) IF itemGroup IS ItemGroup
        ELSE
            RGB(203,203,206) IF quantityChildWith###property (itemGroup) != descendantNumber(itemGroup)
                             AND NOT quantityParentWith###property (itemGroup);

    setNull###property 'Снять признак для всех потомков'(ItemGroup itemGroup)  { 
        FOR isParent (ItemGroup childGroup, itemGroup) DO {
            data###property(childGroup) <- NULL;
        }
    } ASON CONTEXTMENU prev###property[ItemGroup] CONFIRM;
    
    EXTEND FORM itemGroups PROPERTIES(g) READONLYIF isReadonly() property BACKGROUND backgroundShow###property(g);
END

META defineItemGroupDefaultValue(property, caption, type)
    @defineItemGroupValue(property, caption, type, defaultItemGroup);

    WHEN LOCAL CHANGED(itemGroup(Item i)) AND NOT property(i) DO
        property(i) <- property(itemGroup(i));
END
//-- Для двух объектов: задание значения для групы по умолчанию (иерархия)
META defineItemDefaultValue(property, caption, type, typeIdentity, object)
    data##type caption = DATA type (###object, ItemGroup);
    data###typeIdentity##type caption (###object object, ItemGroup itemGroup) = name(data##type(object, itemGroup)) IN defaultItemGroup;
    
    levelParent##type (###object object, ItemGroup itemGroup) = GROUP MIN level(itemGroup, ItemGroup parent) IF data##type(object, parent) MATERIALIZED;    
    nearestParent##type (###object object, ItemGroup itemGroup) = itemGroup(itemGroup, levelParent##type(object, itemGroup));
    nearest##type (###object object, ItemGroup itemGroup) = data##type(object, nearestParent##type (object, itemGroup));
    
    property (###object object, ItemGroup itemGroup) =
        OVERRIDE data##type(object, itemGroup), 
                 nearest##type (object, itemGroup) MATERIALIZED;    

    prev###property (###object object, ItemGroup itemGroup) =
        OVERRIDE data##type(object, itemGroup), 
                 PREV(nearest##type (object, itemGroup));    
    
    typeIdentity caption (###object object, ItemGroup itemGroup) = name(property(object, itemGroup)) IN defaultItemGroup;
    prev###typeIdentity caption (###object object, ItemGroup itemGroup) = name(prev###property(object, itemGroup)) IN defaultItemGroup;
END 

META defineItemDefaultValueCustom(property, caption, type, object)
    data###property caption = DATA type (###object, ItemGroup);
    
    levelParent###property (###object object, ItemGroup itemGroup) = GROUP MIN level(itemGroup, ItemGroup parent) IF data###property(object, parent) MATERIALIZED;    
    nearestParent###property (###object object, ItemGroup itemGroup) = itemGroup(itemGroup, levelParent###property(object, itemGroup));
    nearest###property (###object object, ItemGroup itemGroup) = data###property(object, nearestParent###property (object, itemGroup));
    
    property caption (###object object, ItemGroup itemGroup) =
        OVERRIDE data###property(object, itemGroup), 
                 nearest###property (object, itemGroup) MATERIALIZED;
                 
    quantityChild###property (###object object, ItemGroup itemGroup) = GROUP SUM 1 IF 
        data###property(object, ItemGroup childItemGroup) AND isParent(childItemGroup, itemGroup) MATERIALIZED;
    quantityParent###property (###object object, ItemGroup itemGroup) = GROUP SUM 1 IF 
        data###property(object, ItemGroup parentItemGroup) AND isParent(itemGroup, parentItemGroup) MATERIALIZED;                 

    backgroundWith###property (###object object, ItemGroup itemGroup) =
        IF data###property(object, itemGroup) THEN
            RGB(127,199,255) //IF itemGroup IS ItemGroup
        ELSE
            RGB(203,203,206) IF quantityChild###property (object, itemGroup) != descendantNumber(itemGroup)
                             AND NOT quantityParent###property (object, itemGroup);
                 
                 
END 

// Ограничения на выбор значений справочника
META defineItemAttributeForm(attribute, formProperty, caption, group)
    @defineItemAttribute(attribute, caption, group);
    
    EXTEND FORM itemGroup PROPERTIES(g) userShow###attribute;
    EXTEND FORM itemOptions PROPERTIES(g) READONLYIF  isReadonly() showAny###attribute BACKGROUND backgroundShow###attribute(g);
    
    background###attribute = ABSTRACT COLOR (Item);
END

deleteUnusedAttributes 'Удалить неиспользуемые атрибуты'  ABSTRACT LIST( );
trimAttributes 'Удалять пробелы в начале и в конце наименования атрибутов' = DATA BOOLEAN ();
EXTEND FORM options PROPERTIES() deleteUnusedAttributes, trimAttributes;
DESIGN options {
    items {
        MOVE PROPERTY(deleteUnusedAttributes());
        MOVE PROPERTY(trimAttributes());
    }
};

META defineObjectItemAttribute(attribute, attributeClass, identity, caption, group)
    attribute = DATA attributeClass (Item);
    deleteUnusedAttributes() + {  
        NEWSESSION { 
            FOR (attributeClass o IS attributeClass) AND NOT [ GROUP SUM 1 BY attribute(Item item)](o) DO DELETE o; 
            apply();
        }
    };    
    identity###attribute caption (Item item) = identity(attribute(item)) IN group;

    CONSTRAINT DROPPED(attributeClass o IS attributeClass) AND [ GROUP SUM 1 IF NOT attribute(Item io) BY PREV(attribute(io))](o)
        MESSAGE 'Запрещено удалять атрибут ('##caption##'), так как на него есть ссылки в справочнике товаров';

    @defineItemAttributeForm(attribute, identity, caption, group);
END

@addRoleApplicationSetting(autoSetGroupAttribute, 'Автоматически проставлять привязки атрибутов к группам', BOOLEAN);

META defineItemFilterValue(object, captionProp, o)
    TABLE object##ItemGroup (###object, ItemGroup);
      
    dataIn 'Вкл' = DATA BOOLEAN (###object, ItemGroup);
    
    levelParentIn (###object object, ItemGroup itemGroup) = GROUP MIN level(itemGroup, ItemGroup parent) IF dataIn(object, parent) MATERIALIZED;    
    nearestParentIn (###object object, ItemGroup itemGroup) = itemGroup(itemGroup, levelParentIn(object, itemGroup));
    nearestIn (###object object, ItemGroup itemGroup) = dataIn(object, nearestParentIn (object, itemGroup));
    
    in 'Вкл' (###object object, ItemGroup itemGroup) =
        OVERRIDE dataIn(object, itemGroup), 
                 nearestIn (object, itemGroup) MATERIALIZED;    
                 
    quantityChild (###object object, ItemGroup itemGroup) = GROUP SUM 1 IF 
        dataIn(object, ItemGroup childItemGroup) AND isParent(childItemGroup, itemGroup) MATERIALIZED;
    quantityParent (###object object, ItemGroup itemGroup) = GROUP SUM 1 IF 
        dataIn(object, ItemGroup parentItemGroup) AND isParent(itemGroup, parentItemGroup) MATERIALIZED;                 

    backgroundWith (###object object, ItemGroup itemGroup) =
        IF dataIn(object, itemGroup) THEN
            RGB(0,0,0) //IF itemGroup IS ItemGroup
        ELSE
            RGB(203,203,206) IF quantityChild (object, itemGroup) != descendantNumber(itemGroup)
                             AND NOT quantityParent (object, itemGroup);
 
    countRec 'Кол-во (рек.)' (###object object, ItemGroup parent) = GROUP SUM 1 IF 
        in(object, ItemGroup child) AND isParent(child, parent) MATERIALIZED;              
    countDataItemGroup 'Кол-во групп' (###object object) = GROUP SUM 1 IF 
        dataIn(object, ItemGroup itemGroup) MATERIALIZED;            

    WHEN autoSetGroupAttribute(mainRole[CustomUser](currentUser())) AND (CHANGED(object(Item item)) OR CHANGED(itemGroup(item))) AND countDataItemGroup(object(item)) AND NOT countRec(object(item), itemGroup(item)) DO {
        dataIn(###object o, ItemGroup g) <- TRUE WHERE o == object(item) AND g == itemGroup(item);
    }
    moveItemGroupOver(ItemGroup parent, ItemGroup gg) +{
        IF autoSetGroupAttribute(mainRole[CustomUser](currentUser())) THEN {
            //dataIn(###object o, g)<- TRUE WHERE countDataItemGroup(o) AND (GROUP SUM 1 IF object(Item it)==o AND isParent(g, it)) AND NOT countRec(o,g);
            dataIn(###object o, parent)<- TRUE WHERE countRec(o,gg) AND NOT countRec(o,parent);
        }
    }

    CONSTRAINT object(Item item) AND itemGroup(item) AND countDataItemGroup(object(item)) AND NOT countRec(object(item), itemGroup(item))
        CHECKED BY object[Item]  
            MESSAGE captionProp##' должен быть доступен для товарной группы (товар)';    

    EXTEND FORM object
        TREE groupTree g=ItemGroup PARENT parent(g)
        PROPERTIES READONLY order(g), name(g)
        PROPERTIES in(o,g) BACKGROUND backgroundWith(o,g)
        
        ORDERS order(g), name(g)
        FILTERS active(g)
    ;
    DESIGN object {
        OBJECTS {
            MOVE BOX(TREE groupTree);
        }
    }
    
    FORM object###session 'Добавить'    
        OBJECTS gg = ItemGroup PANEL 
           
        OBJECTS v = ISTRING[100] PANEL    
        PROPERTIES (v) val = VALUE 
    ;    
    
    DESIGN object###session { 
        BOX { 
            REMOVE BOX(gg);
            size = (600, 400); 
            MOVE BOX(v) {        
                caption = captionProp;
                PROPERTY (val) {
                    caption = 'Наименование';
                    panelCaptionVertical = TRUE;
                    font = 'bold 24';
                }
            }
            MOVE TOOLBARBOX;
        }
    }    
    FORM object##s###session captionProp
        OBJECTS gg = ItemGroup PANEL
    
        OBJECTS t= ###object
        PROPERTIES(t) name READONLY
        ORDERS name(t)
    ;
    DESIGN object##s###session { BOX { size = (600, 400); } }    
  
    add###object 'Добавить'(ItemGroup gg)  { 
        DIALOG object###session OBJECTS gg = gg, v INPUT DO {
            LOCAL loc = ###object();
            LOCAL localName = ISTRING[100]();
            localName() <- IF trimAttributes() THEN trim(v) ELSE v;
            NEWSESSION NESTED (localName, loc) {
                IF object##Name(localName()) THEN {
                    dataIn(###object t, gg) <- TRUE WHERE  t == object##Name(localName());
                } ELSE {
                    NEW p = ###object {
                        name(p) <- localName();
                        dataIn(p, gg) <- TRUE;
                        loc() <- p;
                    }
                }
                APPLY NESTED LOCAL;
            }
            SEEK object##s###session.t = (IF object##Name(localName()) THEN object##Name(localName()) ELSE loc());
        }
    } TOOLBAR IMAGE 'add.png' CHANGEKEY 'INSERT';
    
    EXTEND FORM object##s###session
        PROPERTIES            add###object(gg) DRAW t
        PROPERTIES NEWSESSION EDIT(t), deletet = DELETE(t) 
    ; 
    
    change###object(Item i)  { 
        DIALOG object##s###session OBJECTS gg = itemGroup(i), t = object(i) CHANGE LIST name(t);
    }    
    EXTEND FORM item PROPERTIES(i) name###object SHOWIF show###object(i) BACKGROUND background###object(i) ON CHANGE change###object(i);
    EXTEND FORM items PROPERTIES(i) READONLYIF isReadonly() BEFORE deletei name###object SHOWIF showAny###object(g) ON CHANGE change###object(i);

END

// ---------------------------- Выделение атрибутов -------------------------------- //

skipExtractAttribute = ABSTRACT BOOLEAN (Item);

// -------------- Символьное --------------------- //
FORM extractStringAttributeItem 'Выделение атрибута'
    OBJECTS from = STRING[100] PANEL
    PROPERTIES(from) from = VALUE
    
    OBJECTS to = STRING[100] PANEL
    PROPERTIES(to) to = VALUE
;

possibleStringAttributeValue = DATA LOCAL BOOLEAN (STRING[100]);
changePossibleStringAttributeValue(STRING[100] v)  { 
    SEEK extractStringAttributeItem.to = v;
}
 
EXTEND FORM extractStringAttributeItem
    OBJECTS v = STRING[100] GRID
    PROPERTIES(v) value = VALUE ON CHANGE changePossibleStringAttributeValue(v) 
    FILTERS possibleStringAttributeValue(v)
    ORDERS value
;

DESIGN extractStringAttributeItem {
    PROPERTY(from) {
        caption = 'Последовательность символов, которую извлечь';
        font = '32';
        panelCaptionVertical = TRUE;
    }
    PROPERTY(to) {
        caption = 'Последовательность символов, на которую заменить';
        font = '32';
        panelCaptionVertical = TRUE;
    }
    BOX(v) {
        caption = 'Возможные значения';
        PROPERTY(value) {
            caption = 'Значение';
        }
    }
}

assignStringToFrom(STRING[100] from)  { 
    SEEK extractStringAttributeItem.to = from; 
} 
EXTEND FORM extractStringAttributeItem
    EVENTS 
        ON CHANGE from assignStringToFrom(from);
;

META defineItemExtractObjectAttribute(object, objectIdentity, identityObject)
    extract###object##FromCaption 'Выделить из названия'(Item i)  { 
        IF i IS Item THEN {
            possibleStringAttributeValue(STRING[100] s) <- TRUE IF [ GROUP SUM 1 IF in(###object object, ItemGroup g) BY name(object), g](s, itemGroup(i));
            DIALOG extractStringAttributeItem OBJECTS from INPUT, to INPUT DO {
                LOCAL object = ###object();
                object() <- identityObject(trim(to));
                IF NOT object() THEN {
                    NEW a = ###object {
                        name(a) <- trim(to);
                        object() <- a;
                    }
                }
                LOCAL selected = BOOLEAN (Item);
                selected(Item item) <- isSubstring(caption(item), from) AND [ FILTER items.i](item) AND NOT skipExtractAttribute(item);
                dataIn(###object a, ItemGroup g) <- TRUE WHERE a == object() AND [ GROUP SUM 1 IF selected(Item item) BY itemGroup(item)](g);
                object(Item item) <- object() WHERE selected(item);
                // вырезаем двойные пробелы, а также ненужные символы в начале и конце
                caption(Item item) <- rtrim(
                                        ltrim(
                                            replace(
                                                replace(
                                                    replace(
                                                        replace(
                                                            replace(caption(item), from, ''), 
                                                            '  ', ' '),
                                                        '" "', ''),
                                                    '""', ''),
                                                '  ', ' '),
                                            ' ,.'), 
                                        ' ,.') WHERE selected(item);
            }
        }
    } ASON CONTEXTMENU objectIdentity[Item];
END

META defineItemExtractPrimitiveAttribute(property, form)
    extract###property##FromCaption 'Выделить из названия'(Item i)  { 
        IF i IS Item THEN {
            possibleStringAttributeValue(STRING[100] s) <- NULL;
            DIALOG form OBJECTS from INPUT, to INPUT DO {
                LOCAL selected = BOOLEAN (Item);
                selected(Item item) <- isSubstring(caption(item), from) AND [ FILTER items.i](item) AND NOT skipExtractAttribute(item);
                property(Item item) <- trim(to) WHERE selected(item);
                // вырезаем двойные пробелы, а также ненужные символы в начале и конце
                caption(Item item) <- rtrim(
                                        ltrim(
                                            replace(
                                                replace(
                                                    replace(
                                                        replace(
                                                            replace(caption(item), from, ''), 
                                                            '  ', ' '),
                                                        '" "', ''),
                                                    '""', ''),
                                                '  ', ' '),
                                            ' ,.'), 
                                        ' ,.') WHERE selected(item);
            }
        }
    } ASON CONTEXTMENU property[Item];
END

// -------------- Символьное --------------------- //

META defineItemExtractStringAttribute(property)
    @defineItemExtractPrimitiveAttribute(property, extractStringAttributeItem);
END

// -------------- Числовое --------------------- //
FORM extractDoubleAttributeItem 'Выделение атрибута'
    OBJECTS from = STRING[100] PANEL
    PROPERTIES(from) from = VALUE
    
    OBJECTS to = NUMERIC[20,7] PANEL
    PROPERTIES(to) to = VALUE
;

DESIGN extractDoubleAttributeItem {
    PROPERTY(from) {
        caption = 'Последовательность символов, которую извлечь';
        font = '32';
        panelCaptionVertical = TRUE;
    }
    PROPERTY(to) {
        caption = 'Число, которое использовать';
        font = '32';
        panelCaptionVertical = TRUE;
    }
}

assignDoubleToFrom(STRING[100] from)  { 
    SEEK extractDoubleAttributeItem.to = toInteger(replace(from AS STRING[100], '%', ''));
} 
EXTEND FORM extractDoubleAttributeItem
    EVENTS 
        ON CHANGE from assignDoubleToFrom(from);
;

META defineItemExtractDoubleAttribute(property)
    @defineItemExtractPrimitiveAttribute(property, extractDoubleAttributeItem, chosenNumeric);
END

// ---------------------------- Конкретные свойства -------------------------------- //

GROUP itemBase 'Базовые свойства' : base;
GROUP itemOriginal 'Оригинальные свойства' : base;

// Неактивный
inactive 'Неактивная' = DATA BOOLEAN (ItemGroup);
active 'Активный' (ItemGroup group) = group IS ItemGroup AND NOT inactive(group);
inactive(ItemGroup group) += inactive(group);

EXTEND FORM itemGroup PROPERTIES(g) inactive;
EXTEND FORM itemGroups
    PROPERTIES(g) READONLYIF isReadonly() inactive BEFORE canonicalName(g)
    FILTERGROUP inactive FILTER 'Активные' active(g) 'F10' DEFAULT
;
EXTEND FORM dialogItemGroups
    FILTERGROUP inactive FILTER 'Активные' active(tg) 'F10' DEFAULT
    FILTERGROUP inactive1 FILTER 'Активные' active(g) 'F10' DEFAULT;

// Группа
@implementItemAttribute(nameItemGroup, 'Группа товаров', String, itemItemGroup);

// ------ Базовые свойства товара ------ //

// Название
caption 'Название' = DATA ISTRING[255] (Item) CHARWIDTH 20 IN itemBase;
@defineItemAttribute(caption, , 'Название', itemBase);
WHEN LOCAL FORMS item, items SETCHANGED (caption(Item i)) AND trimAttributes() DO {
    caption(i) <- trim(caption(i));
} 

@defineItemGroupDefaultValue(caption, 'Название', ISTRING[255]);

@defineItemAttributeBatch (caption, 'Название');
@implementItemAttribute(caption, 'Название', String, itemCaption);

extractStringCaption 'Заменить в названии'(Item i)  { 
    IF i IS Item THEN {
        possibleStringAttributeValue(STRING[100] s) <- NULL;
        DIALOG extractStringAttributeItem OBJECTS from INPUT, to INPUT DO {
            LOCAL selected = BOOLEAN (Item);
            selected(Item item) <- isSubstring(caption(item), from) AND [ FILTER items.i](item) AND NOT skipExtractAttribute(item);
            // вырезаем двойные пробелы, а также ненужные символы в начале и конце
            caption(Item item) <- rtrim(
                                    ltrim(
                                        replace(
                                            replace(
                                                replace(
                                                    replace(
                                                        replace(caption(item), from, to), 
                                                        '  ', ' '),
                                                    '" "', ''),
                                                '""', ''),
                                            '  ', ' '),
                                        ' ,.'), 
                                    ' ,.') WHERE selected(item);
        }
    }
} ASON CONTEXTMENU caption[Item];

@defineStringItemAttribute(originalCaption, ISTRING[100], 'Название (ориг.)', itemOriginal);
@defineItemAttributeBatch (originalCaption, 'Название (ориг.)');

// Единица измерения
@defineObjectItemAttribute(UOM, UOM, name, 'Единица измерения', itemBase);
@defineObjectItemAttributeBatch (UOM, nameUOM, 'Единица измерения', sku);

shortNameUOM 'Единица измерения' (Item item) = shortName(UOM(item)) IN itemBase;
UOM(Item item) += UOM(item);

@defineItemGroupDefaultObject(UOM, 'Ед. изм.', UOM, nameUOM); 
@defineItemFilterValue(UOM, 'Ед. изм.', u);

//@implementObjectShortItemAttribute(UOM, 'Единица измерения (сокр.)');
@implementItemAttribute(shortNameUOM, 'Единица измерения (сокр.)', String, itemShortUOM);

@defineUniteFilterAttributeItem(UOM, name, 'единица измерения', 'единицы измерения', item);
EXTEND FORM attributesItem
    PROPERTIES(UOM) READONLY AFTER name(UOM) grossWeight, netWeight, split, factor, genitiveName, 
                                                shortNameBase, shortName, id SHOWIF showIDs()   
;

// Бренд
CLASS Brand 'Бренд';
TABLE brand(Brand);

EXTEND CLASS Brand {
    none 'Без бренда'
}

@defineExternalizable(brand, STRING[100]);

name 'Наименование' = DATA ISTRING[50](Brand) IN id;
brandName = GROUP NAGGR Brand brand BY name(brand);

emptyName 'Наименование' (Brand b) = OVERRIDE name(b), 'Не задан';

site 'Адрес сайта' = DATA ISTRING[100](Brand);

FORM brand 'Бренд'
    OBJECTS t=Brand PANEL
    PROPERTIES(t) name, emptyName READONLY, site, id SHOWIF showIDs()
    EDIT Brand OBJECT t
;

FORM brands 'Бренды'
    OBJECTS t=Brand
    PROPERTIES(t) READONLY name, emptyName, site, id SHOWIF showIDs() 
    PROPERTIES(t) NEWSESSION NEW, EDIT, deleteb=DELETE
    ORDERS name(t)
    LIST Brand OBJECT t
;
DESIGN brands { BOX { size = (600, 400); } }

@defineObjectItemAttribute(brand, Brand, name, 'Бренд', itemBase);

idBrand(Barcode barcode) = id(brand(sku(barcode)));
nameBrand(Barcode barcode) = name(brand(sku(barcode)));

@defineObjectItemAttributeBatch (brand, nameBrand, 'Бренд');
@implementItemAttribute(nameBrand, 'Бренд', String, itemBrand);

@defineItemFilterValue(brand, 'Бренд', t);
@defineItemExtractObjectAttribute(brand, nameBrand, brandName);

@defineUniteFilterAttributeItem(brand, name, 'бренд', 'бренды', item);
EXTEND FORM attributesItem
    PROPERTIES(brand) AFTER name(brand) READONLY site, id SHOWIF showIDs()
;

INDEX brand(Item i);

// Страна
@defineObjectItemAttribute(country, Country, name, 'Страна', itemBase);
@defineObjectItemAttributeBatch (country, nameCountry, 'Страна', sku);
sidCountry 'Код страны' (Batch batch) = sidCountry(sku(batch));
sidOrigin2Country 'Код 2 знака (ориг.)' (Batch batch) = sidOrigin2Country(sku(batch));
sidOrigin3Country 'Код 3 знака (ориг.)' (Batch batch) = sidOrigin3Country(sku(batch));
@implementItemAttribute(nameCountry, 'Страна', String, itemCountry);

@defineItemFilterValue(country, 'Страна', c);

@defineUniteFilterAttributeItem(country, name, 'страна', 'страны', item);
EXTEND FORM attributesItem
    PROPERTIES(country) READONLY AFTER name(country) nameLanguage, nameCurrency, resident, 
                                                            sidOrigin3, sidOrigin2, sid, nameOrigin
;

resident 'Отечественное производство' (Item item) = resident(country(item)) IN itemBase;
country(Item sku) += country(sku);

INDEX country(Item i);

// Производитель
CLASS Manufacturer 'Производитель товара';
TABLE manufacturer(Manufacturer);

@defineExternalizable(manufacturer, STRING[200]);

name 'Наименование' = DATA ISTRING[200](Manufacturer) IN id CHARWIDTH 15;
manufacturerName = GROUP NAGGR Manufacturer m BY name(m);
address 'Адрес производителя' = DATA STRING[255] (Manufacturer) CHARWIDTH 20;

originalName 'Наименование (ориг.)' = DATA ISTRING[100](Manufacturer) CHARWIDTH 15;
originalAddress 'Адрес производителя (ориг.)' = DATA STRING[255] (Manufacturer) CHARWIDTH 20;

country = DATA Country (Manufacturer);
nameCountry 'Страна' = name(country(Manufacturer m)) CHARWIDTH 20;

FORM manufacturer 'Производитель товара'
    OBJECTS m=Manufacturer PANEL
    PROPERTIES(m) name, address, id SHOWIF showIDs(), originalName, originalAddress,
                  nameCountry
    EDIT Manufacturer OBJECT m
;

DESIGN manufacturer {
    BOX {
        PROPERTY(name(m)){
            charWidth = 50;    
        }
    }       
}

FORM manufacturerDialog 'Производители товара'
    OBJECTS m=Manufacturer
    PROPERTIES(m) READONLY name, id SHOWIF showIDs(), originalName, originalAddress, nameCountry 
    PROPERTIES(m) NEWSESSION NEW, EDIT, deleteManufacturer = DELETE
    ORDERS name(m)
    LIST Manufacturer OBJECT m
;
DESIGN manufacturerDialog { BOX { size = (600, 400); } }

@defineObjectItemAttribute(manufacturer, Manufacturer, name, 'Производитель', itemBase);
@defineObjectItemAttributeBatch (manufacturer, nameManufacturer, 'Производитель');
@implementItemAttribute(nameManufacturer, 'Производитель', String, itemManufacturer);

@defineItemFilterValue(manufacturer, 'Производитель', m);

@defineUniteFilterAttributeItem(manufacturer, name, 'производитель', 'производители', item);
EXTEND FORM attributesItem
    PROPERTIES READONLY AFTER name(manufacturer) id(manufacturer) SHOWIF showIDs(),
                        originalName(manufacturer), originalAddress(manufacturer), nameCountry(manufacturer)

;

addressManufacturer 'Адрес производителя' (Item item) = address(manufacturer(item)); 

INDEX manufacturer(Item i);

//  Состав
@defineStringItemAttribute(composition, STRING[1000], 'Состав', itemBase);
@defineItemAttributeBatchClass (composition, 'Состав', sku);
composition (Item sku) += composition(sku);
DESIGN items{
    PROPERTY (composition(i)){charWidth = 40;}
}

@defineStringItemAttribute(originalComposition, STRING[255], 'Состав (ориг.)', itemOriginal);

// Тара
skuType = DATA SkuType (Item) NONULL;
skuType (Item sku) += skuType(sku);

skuType(Item item) <- SkuType.skuTypeItem WHEN SET(item IS Item);

nameSkuType 'Тип SKU' (Item item) = staticCaption(skuType(item)) CHARWIDTH 10 IN itemBase;
EXTEND FORM item PROPERTIES(i) nameSkuType;
EXTEND FORM items PROPERTIES(i) READONLYIF isReadonly() nameSkuType;

// Весовой
@definePrimitiveItemAttribute(split, BOOLEAN, 'Дробный', itemBase);
split(Item sku) += split(sku);

split(Item i) <- split(UOM(i)) WHEN CHANGED(UOM(i));

// Фиксированная цена
@definePrimitiveItemAttribute(fixedPrice, BOOLEAN, 'Товар с фиксированной ценой', itemBase);
fixedPrice(Item sku) += fixedPrice(sku);

// Неактивный
inactive 'Неактивный' = DATA BOOLEAN (Item) IN itemBase;
prevInactive (Item i) = PREV(inactive(i));

active 'Активный' (Item item) = item IS Item AND NOT inactive(item);
prevActive = Item i IS Item AND NOT prevInactive(i);

inactive(Item sku) += inactive(sku);
EXTEND FORM item PROPERTIES(i) inactive;
EXTEND FORM items
    PROPERTIES(i) READONLYIF isReadonly() inactive
    FILTERGROUP inactive2 FILTER 'Активные' prevActive(i) 'F10' DEFAULT
;

DESIGN item {
    itemPrimaryColumn1 {
        MOVE GROUP(itemBase,i) {
            alignment = STRETCH;
            columns = 2;
            PROPERTY(composition(i)) {
                charWidth = 20;
            }
        }
        MOVE GROUP(itemOriginal,i) {
            alignment = STRETCH;
            columns = 2;
        }
    }
}
DESIGN item {
    itemPrimaryColumn1 {
        NEW regionPrm AFTER GROUP(itemBase,i) {
            alignment = STRETCH;
            type = COLUMNS;
            columns = 2;
            caption = 'Региональные свойства';
        }
    }
}

// ------ Габариты товара ------ //

GROUP itemSize 'Габариты товара' : public;

// Вес нетто
@defineDoubleItemAttribute(netWeight, NUMERIC[11,5], 'Вес нетто, кг', itemSize);
@defineItemAttributeBatchClass (netWeight, 'Вес нетто, кг', sku);
@implementItemAttribute(netWeight, 'Вес нетто, кг', Double, itemNetWeight);
netWeight(Item sku) += netWeight(sku);
netWeight(Item i) <- netWeight(UOM(i)) WHEN CHANGED(UOM(i)) AND netWeight(UOM(i));

// Вес брутто
@defineDoubleItemAttribute(grossWeight, NUMERIC[11,5], 'Вес брутто, кг', itemSize);
@defineItemAttributeBatchClass (grossWeight, 'Вес брутто, кг', sku);
grossWeight(Item sku) += grossWeight(sku);

skipChangeGrossWeight = ABSTRACT BOOLEAN (Item);

WHEN LOCAL (CHANGED(netWeight(Item sku)) OR (CHANGED(UOM(sku) AND grossWeight(UOM(sku))))) AND NOT CHANGED(grossWeight(sku)) AND NOT skipChangeGrossWeight(sku) DO
    grossWeight(sku) <- OVERRIDE grossWeight(UOM(sku)), netWeight(sku);

// Кол-во в грузовом месте
// todo : здесь скорее всего надо будет рефакторить на более сложную логику
//@defineDoubleItemAttribute(packQuantity, NUMERIC[9,3], 'Количество в грузовом месте', itemSize);
//packQuantitySku(sku) += packQuantityItem(sku);

DESIGN item {
    itemPrimaryColumn2 {
        MOVE GROUP(itemSize,i) {
            alignment = STRETCH;
            columns = 2;
        }
    }
}

loadDefaultItemAttributes 'Загрузить стандартные атрибуты товаров'  ABSTRACT LIST ( );
@implementLoadDefaultData(loadDefaultItemAttributes);

// ---------------------------------------------- Формирование наименований -------------------------------------- //

TABLE itemAttributeItemGroup(ItemAttribute, ItemGroup);

@defineItemDefaultValueCustom(required, 'Обязательный для заполнения', BOOLEAN , itemAttribute);

quantityChildWithRequired (ItemAttribute a, ItemGroup parent) = GROUP SUM 1 IF dataRequired(a, ItemGroup child) AND isParent(child, parent) ;
quantityParentWithRequired (ItemAttribute a, ItemGroup child) = GROUP SUM 1 IF dataRequired(a, ItemGroup parent) AND isParent(child, parent) ;

backgroundRequired (ItemAttribute a, ItemGroup g) =
    IF dataRequired(a, g) THEN
        RGB(0,0,0)
    ELSE
        RGB(203,203,206) IF quantityChildWithRequired (a, g) != descendantNumber(g)
                         AND NOT quantityParentWithRequired (a, g);

EXTEND FORM itemOptions 
    PROPERTIES(ia1, tg) required BACKGROUND backgroundRequired(ia1, tg);

constraintRequired(ItemAttribute a, Item i) = (DROPPED (value(i, a)) OR SET (i IS Item)) AND required(a, itemGroup(i)) AND NOT value(i, a);

CONSTRAINT  constraintRequired(ItemAttribute a, Item i)
    MESSAGE 
    (GROUP CONCAT ('Для товара должен быть задан атрибут ' + staticCaption(ItemAttribute ia)) IF 
                    (GROUP SUM 1 IF constraintRequired(ia,Item ii)), '\n' ORDER ia);

// Базовое наименование
@defineItemAttributeName( , , id);


saveImage 'Сохранить изображение' (Item item)  { 
    LOCAL fileName=STRING[255]();
    fileName() <- nameAttribute(item);
    WRITE CLIENT DIALOG image(item) TO fileName();
} ASON CONTEXTMENU image[Item];

backgroundNameAttribute = RGB(127,199,255) IF overName(Item i);
changeNameAttribute  ABSTRACT ( Item);

EXTEND FORM item PROPERTIES(i) nameAttribute BACKGROUND backgroundNameAttribute(i) ON CHANGE changeNameAttribute(i);
DESIGN item { itemHeader {MOVE PROPERTY(nameAttribute(i)); } }

name(Item item) += nameAttribute(item);
loadDefaultItemAttributes() + { 
    numberInName(StringItemAttribute a) <- 1 WHERE a == StringItemAttribute.itemCaption;
}

EXTEND FORM items
    PROPERTIES READONLY BACKGROUND background(i) AFTER idBarcode(i) nameAttribute(i) // вообще надо использовать nameAttributeGroupGroupTypeItem(g, gt, i) для скорости, но тогда не будет работать отбор без групп
    PROPERTIES READONLYIF isReadonly() BACKGROUND background(i) AFTER nameAttribute(i) idItemGroup(i) , canonicalNameGroup(gt,i) 

    FILTERGROUP groupFilters
        FILTER 'С группами' isParent(g, i) 'F9' DEFAULT
        FILTER 'Без групп' gt IS GroupType AND NOT group(gt,i) 'F8'

    ORDERS nameAttribute(i)
;

DESIGN items {
    PROPERTY(canonicalNameGroup(gt,i)) {
        caption = 'Полное имя группы';
    }
}    
// Кассы
@defineItemAttributeName(cashRegister, ' (кассы)', public);
dataTitleCashRegister 'Наименование для касс' = DATA STRING[100] (Barcode);
titleCashRegister 'Наименование для касс' = OVERRIDE dataTitleCashRegister(Barcode barcode), nameCashRegisterAttribute(sku(barcode)) CHARWIDTH 30;
loadDefaultItemAttributes() + { 
    numberInNameCashRegister(StringItemAttribute a) <- 1 WHERE a == StringItemAttribute.itemCaption;
}
// Весы
@defineItemAttributeName(scales, ' (весы)', public);
dataTitleScales 'Наименование для весов' = DATA STRING[100] (Barcode);
titleScales 'Наименование для весов' = OVERRIDE dataTitleScales(Barcode barcode), nameScalesAttribute(sku(barcode)) CHARWIDTH 30;
loadDefaultItemAttributes() + { 
    numberInNameScales(StringItemAttribute a) <- 1 WHERE a == StringItemAttribute.itemCaption;
}

// Сроки годности
GROUP itemExpiry 'Сроки годности' : public;

expiryDays 'Срок годности в днях' = DATA INTEGER (Item) IN itemExpiry;
expiryDays(Item i) += expiryDays(i);

expiryMonth 'Срок годности в месяцах' = DATA INTEGER (Item) IN itemExpiry;
expiryMonth(Item i) += expiryMonth(i);

hoursExpiryPack 'Срок годности в часах' = DATA INTEGER (Item) IN itemExpiry;

overChangeExpiryMonth  ABSTRACT LIST (Item, INTEGER );    
changeExpiryMonth (Item i) {
    INPUT int = INTEGER DO {
        expiryMonth(i) <-  int;
        overChangeExpiryMonth(i,int);           
    } 
}

overChangeExpiryDays  ABSTRACT LIST (Item, INTEGER );    
changeExpiryDays (Item i) {
    INPUT int = INTEGER DO {
        expiryDays(i) <-  int;
        overChangeExpiryDays(i,int);           
    } 
}

overChangeHoursExpiryPack  ABSTRACT LIST (Item, INTEGER );    
changeHoursExpiryPack (Item i) {
    INPUT int = INTEGER DO {
        hoursExpiryPack(i) <-  int;
        overChangeHoursExpiryPack(i,int);           
    } 
}

expiry 'Срок годности' = DATA BOOLEAN (Item) IN itemExpiry;

@defineItemAttribute(expiry, 'Срок годности', itemExpiry);

EXTEND FORM itemGroup PROPERTIES(g) userShowExpiry;
EXTEND FORM itemOptions PROPERTIES(g) READONLYIF  isReadonly() showExpiry BACKGROUND backgroundShowExpiry(g);
EXTEND FORM item PROPERTIES(i) SHOWIF showExpiry(i) hoursExpiryPack ON CHANGE changeHoursExpiryPack(i), expiryDays ON CHANGE changeExpiryDays(i), expiryMonth ON CHANGE changeExpiryMonth(i);
EXTEND FORM items PROPERTIES(i) READONLYIF isReadonly() BEFORE deletei SHOWIF showExpiry(g) hoursExpiryPack, expiryDays, expiryMonth;
DESIGN item {
    itemPrimaryColumn2 {
        MOVE GROUP(itemExpiry,i) {
            alignment = STRETCH;
            PROPERTY(expiryDays(i)) { caption = 'В днях'; }
            PROPERTY(hoursExpiryPack(i)) { caption = 'В часах'; }
            PROPERTY(expiryMonth(i)) { caption = 'В месяцах'; }
            columns = 2;
        }
    }    
}


// --------------------------------------- Генерация штрихкодов --------------------------------------------- //

META defineNumeratorItemGroup (prefix, caption, group)
    data###prefix##Numerator = DATA Numerator (ItemGroup);
    levelParent###prefix##Numerator(ItemGroup itemGroup)  = GROUP
                                                                  MIN level(itemGroup, ItemGroup parent) IF data###prefix##Numerator(parent) MATERIALIZED;
    nearestParent###prefix##Numerator (ItemGroup itemGroup) = itemGroup(itemGroup, levelParent###prefix##Numerator(itemGroup));
    nearest###prefix##Numerator (ItemGroup itemGroup) = data###prefix##Numerator(nearestParent###prefix##Numerator(itemGroup)) MATERIALIZED;

    prefix##Numerator (ItemGroup itemGroup) =
        OVERRIDE data###prefix##Numerator(itemGroup), nearest###prefix##Numerator(itemGroup) MATERIALIZED;
    name###prefix##Numerator caption (ItemGroup itemGroup) = name(prefix##Numerator(itemGroup)) CHARWIDTH 5 IN group;

    background###prefix##Numeratot (ItemGroup itemGroup) = IF data###prefix##Numerator(itemGroup) THEN
                                                                      RGB(190,190,190) IF itemGroup IS ItemGroup
                                                                  ELSE
                                                                      RGB(230,230,230) IF prefix##Numerator (itemGroup);

    EXTEND FORM itemGroup PROPERTIES(g)  AFTER nameParent(g) name###prefix##Numerator;
    EXTEND FORM itemGroups PROPERTIES(g) AFTER canonicalName(g) READONLYIF isReadonly() name###prefix##Numerator  BACKGROUND background###prefix##Numeratot(g);
END

@defineNumeratorItemGroup (piece, 'Нумератор штрихкодов (для штучного товара)', paramsItemGroup);
pieceNumerator (Item item) = pieceNumerator(itemGroup(item));

overNumerator = ABSTRACT CASE Numerator (Item);
barcodeNumerator(Item item) += OVERRIDE overNumerator(item), pieceNumerator(item);

DESIGN itemGroup {
    BOX {
        NEW itemGroupHeader BEFORE TOOLBARBOX {
            alignment = STRETCH ;
            NEW itemGroupHeader1 {
                caption = 'Товарная группа';
                alignment = STRETCH;
                type = COLUMNS;
                columns = 3;
                MOVE PROPERTY(name(g));
                MOVE PROPERTY(order(g));
                MOVE PROPERTY(id(g));
                MOVE PROPERTY(nameParent(g));
                MOVE PROPERTY(inactive(g));
            }

//            NEW itemGroupHeader2 {
//                caption = 'Нумераторы';
//                type = CONTAINERH;
//                MOVE PROPERTY(namePieceNumerator(g));
//            }
        }

        NEW pane BEFORE TOOLBARBOX {
            fill = 1;
            type = TABBED;
            NEW params {
                fill = 1;
                caption = 'Параметры';
                MOVE GROUP(paramsItemGroup,g);
            }
            NEW attributes {
                fill = 1;
                caption = 'Атрибуты';
                MOVE GROUP(itemBase,g) {
                    columns = 6;
                }
                MOVE GROUP(itemOriginal,g) {
                    columns = 6;            
                }
                MOVE GROUP(itemSize,g) {
                    columns = 6;
                }
                NEW itemGroupDetail1 {
                    type = CONTAINERH;
                    MOVE GROUP(itemExpiry,g) { columns = 1; type = CONTAINERH; }
                }                    
            }
        }
    }
}

// ---------------------------------------- Копирование товара ----------------------- //
overCopy  ABSTRACT LIST ( Item, Item);
overCopyEx  ABSTRACT LIST ( Item, Item);
overCopyItem  ABSTRACT LIST ( Barcode, Barcode, Sku);

copyDataItem(Item item, Item i)  { 
    itemGroup(i) <- itemGroup(item);
    caption(i) <- caption(item);
    originalCaption(i) <- originalCaption(item);
    UOM(i) <- UOM(item);
    brand(i) <- brand(item);
    manufacturer(i) <- manufacturer(item);
    composition(i) <- composition(item);
    originalComposition(i) <- originalComposition(item);
    netWeight(i) <- netWeight(item);
    grossWeight(i) <- grossWeight(item);
    country(i) <- country(item);
    dataImage(i) <- dataImage(item);
    skuType(i) <- skuType(item);
    split(i) <- split(item);
    inactive(i) <- inactive(item);
    expiryDays(i) <- expiryDays(item);
    expiryMonth(i) <- expiryMonth(item);
    hoursExpiryPack(i) <- hoursExpiryPack(item);

    FOR sku(Barcode barcode) == item AND toCopy(barcode) DO {
        NEW b = Barcode {
            sku(b) <- i;
            dataDate(b) <- dataDate(barcode);
            dataUOM(b) <- dataUOM(barcode);
            dataAmount(b) <- dataAmount(barcode);
            dataTitleScales(b) <- dataTitleScales(barcode);
            dataTitleCashRegister(b) <- dataTitleCashRegister(barcode);
            
            overCopyItem(b, barcode, i);
        }
    }

    customGroup[CustomGroupType,Item](CustomGroupType type, i) <- customGroup[CustomGroupType,Item](type, item);

    overCopy(item, i);
    overCopyEx(item, i);
}

copy 'Копировать' (Item item) { 
    IF (item IS Item) THEN {
        NEWSESSION NESTED (addedSku[]) {
            NEW i = Item {
                copyDataItem(item, i);
                DIALOG item OBJECTS i = i DOCKED NOCANCEL DO {
                    addedSku() <- i;
                }
            }
        }
    }
} CHANGEKEY 'F5' TOOLBAR;

copyItems 'Копировать' (Item item)  { 
    copy(item);
    IF (addedSku()) THEN {
        SEEK items.i = addedSku();
    }
} CHANGEKEY 'F5' TOOLBAR;

EXTEND FORM items PROPERTIES (i) copyItems;
DESIGN items { PROPERTY(copyItems(i)) { focusable = FALSE; } }

copy(Item sku) + {  copy(sku); }

createItemBarcode (STRING[15] barcode, DATE date) { 
	NEWSESSION {
	
	    LOCAL copy = BOOLEAN();
	    copy() <- NULL;
	    IF skuAdded(currentUser()) IS Item THEN {
	        ASK 'Создать товар на основе последнего созданного ?' DO
	            copy() <- TRUE;
	    }
	
	    IF copy() THEN {
	        NEW i = Item {
	            copyDataItem(skuAdded(currentUser()), i);
	            NEW bc = Barcode { //коприрование шк сейчас включено только для шк упаковки
	                id(bc) <- barcode;
	                dataDate(bc) <- date;
	                sku(bc) <- i;
	            }
	            SHOW item OBJECTS i = i WAIT DOCKED;
	        }
	    } ELSE {
	        NEW bc = Barcode {
	            id(bc) <- barcode;
	            dataDate(bc) <- date;
	
	            NEW s = Item {
	                sku(bc) <- s;
	                SHOW item OBJECTS i = s, b = bc WAIT DOCKED;
	            }
	        }
	    }
	}
}

createSkuBarcode(STRING[15] barcode, DATE date) + {  createItemBarcode(barcode, date); }

in 'Отм.' = DATA LOCAL BOOLEAN (Item);

countInItem = GROUP SUM 1 IF in(Item item);

checkReplace  ABSTRACT ( Item);

FORM confirmReplaceItem 'Объединяемые товары'
    OBJECTS item = Item PANEL 

    OBJECTS i = Item  
    PROPERTIES(i) READONLY idBarcode, nameAttribute
    FILTERS i==item

    OBJECTS i2 = Item
    PROPERTIES(i2) in
    PROPERTIES(i2) READONLY idBarcode, nameAttribute
    FILTERS in(i2)
;

DESIGN confirmReplaceItem {
    REMOVE BOX(item);
    NEW splitContainer{
        type = SPLITV;
        fill = 1;
        MOVE BOX(i){
            caption = 'Основной товар';
        }
        MOVE BOX(i2){
            caption = 'Удаляемый товар';
        }           
    }
    MOVE TOOLBARBOX;
}

replaceDelNames 'Удаленные товары' = DATA LOCAL NESTED STRING[500]();

replace 'Объединить' (Item item) { 
    IF noEventsInTransactionItem() THEN setNoEventsInTransaction();
    DIALOG confirmReplaceItem OBJECTS item=item DO {
        allowReplaceItem() <- TRUE;
        checkReplace(item);
        replaceDelNames() <- '';
        FOR in(Item i) AND allowReplaceItem() AND item IS Item DO {
            IF i != item THEN {
                replaceBefore(i,item);    
                replace(i, item);
                overReplace(i, item);
                in(i) <- NULL;                
                replaceDelNames() <- CONCAT ' ', replaceDelNames(), nameAttribute(i) + ',';             
                DELETE i;            
            } ELSE {
                MESSAGE 'Выделенный товар не может совпадать с объединяемым';
            }
        }
        replaceAfter(item);       
        apply();
    }
    in(Item i) <- NULL;           
    IF noEventsInTransactionItem() THEN dropNoEventsInTransaction();   
} CONFIRM;

changeGroupItem 'Изменить группу' ()  { 
    DIALOG dialogItemGroups OBJECTS g INPUT DO
        FOR in(Item i) DO {
            itemGroup(i) <- g;
        }
}


EXTEND FORM items
    PROPERTIES(i) in BEFORE idBarcode(i), replace 
;
DESIGN items {
    actionsRow1 {
        NEW replace {
            caption = 'Слияние товаров';
            alignment = STRETCH;
            MOVE PROPERTY(replace(i));
        }
    }
}

// -------------------- Автоматическое проставление даты параметров ------------------ //

defaultItemDate 'Дата для региональных параметров по умолчанию' = DATA DATE();
EXTEND FORM options PROPERTIES() defaultItemDate;
DESIGN options { 
    items { 
        MOVE PROPERTY(defaultItemDate()); 
    } 
}

seekItemDate()  { 
    IF defaultItemDate() THEN {
        SEEK item.dtr = defaultItemDate();
    }
}
EXTEND FORM item
    EVENTS ON INIT seekItemDate()
;

//----------- Задание значения по умолчанию ----------------//
TABLE customGroupTypeItemGroup(CustomGroupType, ItemGroup);
@defineItemDefaultValue(customGroup, 'Дополнительная группа (по умолчанию)', CustomGroup, nameCustomGroup, customGroupType);

assignCustomGroupItems 'Назначить всем товарам группы' (ItemGroup group)  { 
	NEWSESSION {
	    FOR CustomGroupType t IS CustomGroupType  DO {
            IF customGroup(t, group) 
                THEN customGroup(t, Item i) <- customGroup(t, itemGroup(i)) WHERE isParent(group, i);
                ELSE {
                    ASK 'Для типа классификатора '+ name(t)+ ' не задана группа. Очистить значение этого классификатора для всех товаров группы?' DO {
                                        customGroup(t, Item i) <- customGroup(t, itemGroup(i)) WHERE isParent(group, i);    
                                    }    
                }        
	    }
	    apply();
	}
} TOOLBAR CONFIRM;

assignCustomGroupItems 'Назначить всем товарам группы' (ItemGroup group, CustomGroupType t)  { 
	NEWSESSION {
        customGroup(t, Item i) <- customGroup(t, itemGroup(i)) WHERE isParent(group, i);
	    apply();
	}
} CONFIRM;
EXTEND FORM itemGroup
    OBJECTS dc=CustomGroupType 
    PROPERTIES(dc)   READONLY name, id
    PROPERTIES(dc, g) prevNameCustomGroup
    PROPERTIES  assignCustomGroupItems(g,dc) GRID, assignCustomGroupItems(g) DRAW dc
;    
DESIGN itemGroup {

    pane {
        NEW default {
            fill = 1;
            caption = 'Значения по умолчанию';
            MOVE GROUP(defaultItemGroup,g) {
                caption ='';
                alignment = STRETCH;
                columns = 3;
                PROPERTY(prevCaption(g)) {charWidth = 20;}
            }
            NEW defaultPane {
                fill = 1;
                type = TABBED;
                MOVE BOX(dc) { caption = 'Дополнительный классификатор';}
            }            
        }
    }
}

WHEN LOCAL CHANGED(itemGroup(Item i)) AND CustomGroupType dc IS CustomGroupType AND NOT customGroup(dc, i) DO
    customGroup(dc, i) <- customGroup(dc, itemGroup(i));

// форма просмотра информации по товару
FORM itemInfo 'Информация по товару'
    OBJECTS dates = (df = DATE, dt = DATE) PANEL
    PROPERTIES dFrom = VALUE(df), dTo = VALUE(dt)

    OBJECTS s = Sku PANEL
    PROPERTIES(s) READONLY id SHOWIF showIDs(), idBarcode, name, nameUOM, canonicalNameSkuGroup, nameCountry, nameBrand, resident, nameManufacturer, valueVAT
    
    OBJECTS st = Stock
    PROPERTIES(st) READONLY name 
    PROPERTIES(s,st) READONLY valueVAT
    FILTERS isCompany(st),
            accessCompany(st)
    
    OBJECTS st1 = Stock PANEL 
    PROPERTIES(st1) name SELECTOR
    FILTERS isCompany(st1),
            accessCompany(st1)
    
    OBJECTS b = Batch
    PROPERTIES(b) READONLY name, nameSupplier, shippedQuantity, currentBalance, cost, dateTime, seriesNumber
    PROPERTIES(b,st1) currentBalance
    ORDERS dateTime(b) DESC 
    FILTERS sku(b) == s
;

setDates()  { 
    SEEK itemInfo.df = sum(currentDate(), -7);
}

EXTEND FORM itemInfo
    EVENTS ON INIT setDates()
;

DESIGN itemInfo {
    BOX {
        size = (1024, 768);
        NEW topContainer {
            caption = 'Информация';
            alignment = STRETCH;
            NEW firstLine {
                type = CONTAINERH;
                fill = 1;
                MOVE PROPERTY(name(s)) { alignment = STRETCH; }
                NEW secondFirstLine {
                    type = CONTAINERH;
                    MOVE PROPERTY(id(s));
                    MOVE PROPERTY(idBarcode(s));
                    MOVE PROPERTY(nameUOM(s));
                }
            }
            MOVE PROPERTY(canonicalNameSkuGroup(s)) { 
                alignment = STRETCH; 
                caption = 'Товарная группа';
            }
            NEW secondLine {
                type = CONTAINERH;
                alignment = STRETCH;
                MOVE PROPERTY(nameCountry(s));
                MOVE PROPERTY(nameBrand(s));
                MOVE PROPERTY(nameManufacturer(s));
                MOVE PROPERTY(resident(s));
                MOVE PROPERTY(valueVAT(s));
            }
        }
        NEW stockFilter {
            caption = 'Фильтр';
            MOVE PROPERTY(name(st1)) { caption = 'Склад'; charWidth = 50; }
        }
        NEW bottomContainer {
            type = TABBED;
            fill = 1;
            NEW stocks {
                caption = 'По складам';
                NEW dates {
                    caption = 'Интервал';
                    type = CONTAINERH;
                    MOVE PROPERTY(dFrom) {caption = 'Дата с';}
                    MOVE PROPERTY(dTo) {caption = 'Дата по';}
                }
                MOVE BOX(st);
            }
            NEW batches {
                caption = 'По партиям';
                MOVE BOX(b);
            }
        }
    }
    MOVE TOOLBARBOX;
}

showInfoSku 'Показать информацию по товару' (Item item)  { NEWSESSION { SHOW itemInfo OBJECTS s = item AS Item; } } ASON CONTEXTMENU name[Item];
showInfoSkuA 'Показать информацию по товару' (Item item)  { NEWSESSION { SHOW itemInfo OBJECTS s = item AS Item; } } ASON CONTEXTMENU nameAttribute[Item];

META defineInfoSku(detail, skuProp, nameSkuProp)
    showInfo###skuProp 'Показать информацию по товару' (###detail detail) { 
        FOR s == skuProp(detail) DO
            SHOW itemInfo OBJECTS s = s; }  
    ASON CONTEXTMENU nameSkuProp[###detail];
END
META defineInfoSku(detail)
    @defineInfoSku(detail, sku, nameSku);
END

// ------------------------------------------------------
EXTEND FORM options
    PROPERTIES() nameDefaultGroupType
;
DESIGN options {
    items {
        MOVE PROPERTY(nameDefaultGroupType());
    }
}

// Ценовой сегмент

CLASS PriceSegment 'Ценовой сегмент';
TABLE priceSegment (PriceSegment);

name 'Наименование' = DATA ISTRING[100](PriceSegment) CHARWIDTH 10;
priceSegment = GROUP AGGR PriceSegment p BY name(p);
background 'Подсветка' = DATA COLOR (PriceSegment);

order 'Порядок' = DATA INTEGER (PriceSegment);

FORM priceSegment 'Ценовые сегменты'
    OBJECTS t = PriceSegment PANEL
    PROPERTIES(t) name, order, background
    EDIT PriceSegment OBJECT t
;

FORM priceSegments 'Ценовые сегменты'
    OBJECTS t = PriceSegment
    PROPERTIES(t) READONLY name, order, background 
    PROPERTIES(t) NEWSESSION NEW, EDIT, DELETE
    ORDERS order(t), name(t)
    LIST PriceSegment OBJECT t
;
DESIGN priceSegments { BOX { size = (600, 400); } }

@defineObjectItemAttribute(priceSegment, PriceSegment, name, 'Ценовой сегмент', itemBase);

priceSegmentName = GROUP NAGGR PriceSegment p BY name(p);

@defineItemFilterValue(priceSegment, 'Ценовой сегмент', t);
@defineUniteFilterAttributeItem(priceSegment, name, 'ценовой сегмент', 'ценовые сегменты', item);

@definePrimitiveItemAttribute(banPurchase, BOOLEAN, 'Запрет закупки', itemBase);
banPurchase 'Запрет закупки' = DATA BOOLEAN (LegalEntity) IN filterEntity;
EXTEND FORM legalEntity
    PROPERTIES(l) banPurchase
;

//----------------------- Переход на новый основной классификатор ---------------------------//

FORM copyToCustomGroupDialog 'Создать копию основного классификатора'
    OBJECTS i = STRING[100] PANEL, n = STRING[50] PANEL
    PROPERTIES id = VALUE(i), name = VALUE(n)
;
DESIGN copyToCustomGroupDialog {
    OBJECTS {
        MOVE PROPERTY(id) {caption='Код';}
        MOVE PROPERTY(name) {caption='Наименование';}
    }
}

overCopyToCustomGroup ABSTRACT LIST (ItemGroup, CustomGroup);

copyToCustomGroup 'Создать копию основного классификатора' () {
    NEWSESSION DIALOG copyToCustomGroupDialog OBJECTS i INPUT, n INPUT DO {
        NEW gt = CustomGroupType {
            id(gt) <- i;
            name(gt) <- n;
            
            FOR ItemGroup g IS ItemGroup ORDER level(g), g DO NEW ng = CustomGroup {
                customGroupType(ng) <- gt;
                id(ng) <- id(g);
                name(ng) <- name(g);
                parent(ng) <- customGroup(id(parent(g)),gt);
                
                overCopyToCustomGroup(g,ng);
            }
            FOR itemGroup(Item item) DO {
                customGroup(gt,item) <- customGroup(id(itemGroup(item)),gt);
            }
        }
        APPLY;
    }
}

new = DATA LOCAL BOOLEAN (ItemGroup);
itemGroup 'Соответствие' = DATA LOCAL ItemGroup (CustomGroup);
nameItemGroup 'Соответствие' (CustomGroup g) = name(itemGroup(g));

FORM replaceToItemGroupDialog 'Соответствие групп для переноса настроек'
    OBJECTS t = CustomGroupType PANEL
    PROPERTIES(t) READONLY name
    
    TREE treeGroups g=CustomGroup PARENT parent(g)
    PROPERTIES(g) READONLY id, name, canonicalName
    PROPERTIES(g) nameItemGroup
    FILTERS customGroupType(g) == t
    ORDERS canonicalName(g)
;

overReplaceToItemGroup ABSTRACT LIST (CustomGroup, ItemGroup);

overOkReplaceToItemGroupDialog 'OK' (CustomGroupType t) {
    IF (GROUP SUM 1 IF customGroupType(CustomGroup g) == t AND NOT itemGroup(g)) THEN
        ASK 'Не для всех групп задано соответствие. Хотите продолжить замену?' DO {
        } ELSE {
            RETURN;
        }
    printToLog('' + currentDateTime() + ' Creating new ItemGroups');
    FOR customGroupType(CustomGroup g) == t AND NOT id(g) == 'Все' ORDER level(g), g DO NEW ng = ItemGroup {
        id(ng) <- 'tst_' + id(g);
        name(ng) <- name(g);
        parent(ng) <- IF id(parent(g)) == 'Все' THEN itemGroup('Все') ELSE itemGroup('tst_' + id(parent(g)));
        order(ng) <- order(g);

        pieceNumerator(ng) <- pieceNumerator(itemGroup(g));
        userShowCaption(ng) <- userShowCaption(itemGroup(g));
        userShowUOM(ng) <- userShowUOM(itemGroup(g));
        userShowBrand(ng) <- userShowBrand(itemGroup(g));
        userShowCountry(ng) <- userShowCountry(itemGroup(g));
        userShowManufacturer(ng) <- userShowManufacturer(itemGroup(g));
        userShowComposition(ng) <- userShowComposition(itemGroup(g));
        userShowSplit(ng) <- userShowSplit(itemGroup(g));
        userShowFixedPrice(ng) <- userShowFixedPrice(itemGroup(g));
        userShowPriceSegment(ng) <- userShowPriceSegment(itemGroup(g));
        userShowBanPurchase(ng) <- userShowBanPurchase(itemGroup(g));
        userShowOriginalCaption(ng) <- userShowOriginalCaption(itemGroup(g));
        userShowOriginalComposition(ng) <- userShowOriginalComposition(itemGroup(g));
        userShowNetWeight(ng) <- userShowNetWeight(itemGroup(g));
        userShowGrossWeight(ng) <-userShowGrossWeight(itemGroup(g));
        userShowExpiry(ng) <- userShowExpiry(itemGroup(g));
        dataCaption(ng) <- prevCaption(itemGroup(g));
        dataUOM(ng) <- prevUOM(itemGroup(g));
        dataCustomGroup(CustomGroupType cgt, ng) <- prevCustomGroup(cgt,itemGroup(g));

        overReplaceToItemGroup(g,ng);

        new(ng) <- TRUE;
    }
    TRY {
        setNoCancelInTransaction();
        APPLY NESTED LOCAL;
        IF canceled() THEN {
            printToLog('' + currentDateTime() + ' ERROR ' + applyMessage());
        } ELSE {
            printToLog('' + currentDateTime() + ' Changing itemGroup in Items');
            itemGroup(Item item) <- itemGroup('tst_' + id(customGroup(t,item)));
            setNoCancelInTransaction();
            APPLY NESTED LOCAL;
            IF canceled() THEN {
                printToLog('' + currentDateTime() + ' ERROR ' + applyMessage());
            } ELSE {
                printToLog('' + currentDateTime() + ' Setting old ItemGroups as inactive');
                id(ItemGroup g) <- 'old_' + id(g) WHERE g IS ItemGroup AND NOT new(g) AND NOT id(g) == 'Все';
                inactive(ItemGroup g) <- TRUE WHERE g IS ItemGroup AND NOT new(g) AND NOT id(g) == 'Все';
                setNoCancelInTransaction();
                APPLY NESTED LOCAL;
                IF canceled() THEN {
                    printToLog('' + currentDateTime() + ' ERROR ' + applyMessage());
                } ELSE {
                    printToLog('' + currentDateTime() + ' Changing ids');
                    id(ItemGroup g) <- STRING[100](replace(id(g),'tst_',''));
                    setNoCancelInTransaction();
                    APPLY NESTED LOCAL;
                    IF canceled() THEN {
                        printToLog('' + currentDateTime() + ' ERROR ' + applyMessage());
                    } ELSE formOk();
                }
            }
        }
    } CATCH {
        printToLog('' + currentDateTime() + ' ERROR ' + messageCaughtException());
    }
    
} CHANGEKEY 'ctrl ENTER';


//fillId 'Проставить соответствие по коду' (CustomGroupType t) {
//    itemGroup(CustomGroup g) <- itemGroup(id(g)) WHERE customGroupType(g) == t;
//}

EXTEND FORM replaceToItemGroupDialog
    PROPERTIES(t) overOkReplaceToItemGroupDialog//, fillId
;
DESIGN replaceToItemGroupDialog {
    TOOLBARRIGHT {
        REMOVE PROPERTY(formOk());
        MOVE PROPERTY(overOkReplaceToItemGroupDialog(t)) BEFORE PROPERTY(formCancel());
    }
}

replaceToItemGroup 'Заменить основной классификатор' (CustomGroupType t) {
    IF (GROUP SUM 1 IF customGroupType(CustomGroup g) == t AND NOT id(g)) THEN {
        MESSAGE 'Не для всех групп дополнительного классификатора задан Код';
        RETURN;
    }
    NEWSESSION SHOW replaceToItemGroupDialog;
}

EXTEND FORM customGroupTypes
    PROPERTIES TOOLBAR copyToCustomGroup() DRAW t, replaceToItemGroup(t)
;
DESIGN customGroupTypes {
    TOOLBARRIGHT(t) {
        MOVE PROPERTY(copyToCustomGroup()) BEFORE TOOLBAR(t);
        MOVE PROPERTY(replaceToItemGroup(t)) AFTER PROPERTY(copyToCustomGroup());
    }
}

@defineOption(copyBarcodeInItemId, 'Копировать штрихкод товара в код', items);

WHEN LOCAL CHANGED (barcode(Item i)) AND copyBarcodeInItemId() INLINE DO 
    id(i) <- idBarcode(i);
    
needManufacturingDate 'Обазательна дата изготовления' = ABSTRACT BOOLEAN (Sku);   
needManufacturingDate (Barcode b) = needManufacturingDate(sku(b));