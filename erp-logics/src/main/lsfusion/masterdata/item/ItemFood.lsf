MODULE ItemFood;

REQUIRE System, Item;

NAMESPACE Item;

GROUP itemFood 'Пищевые характеристики' : public;

// Вкус
CLASS Taste 'Вкус товара';
TABLE taste(Taste);

name 'Наименование' = DATA ISTRING[100](Taste);
tasteName = GROUP AGGR Taste taste BY name(taste); 

FORM taste 'Вкус товара'
    OBJECTS t=Taste PANEL
    PROPERTIES(t) name
    EDIT Taste OBJECT t
;

FORM tastes 'Вкусы товара'
    OBJECTS t=Taste
    PROPERTIES(t) READONLY name 
    PROPERTIES(t) NEWSESSION NEW, EDIT, DELETE
    ORDERS name(t)
    LIST Taste OBJECT t
;
DESIGN tastes { BOX { size = (600, 400); } }

@defineObjectItemAttribute(taste, Taste, name, 'Вкус', itemFood);
@defineObjectItemAttributeBatch (taste, nameTaste, 'Вкус');
@implementItemAttribute(nameTaste, 'Вкус', String, itemTaste);

@defineItemGroupDefaultObject(taste, 'Вкус', Taste, nameTaste);
@defineItemFilterValue(taste, 'Вкус', t);

@defineUniteFilterAttributeItem(taste, name, 'вкус товара', 'вкусы товара', item);
@defineItemExtractObjectAttribute(taste, nameTaste, tasteName);

// Степень охлаждения
CLASS CoolingDegree 'Степень охлаждения товара';
TABLE coolingDegree(CoolingDegree);

name 'Наименование' = DATA ISTRING[100](CoolingDegree);
coolingDegreeName = GROUP AGGR CoolingDegree d BY name(d); 

FORM coolingDegree 'Степень охлаждения товара'
    OBJECTS t=CoolingDegree PANEL
    PROPERTIES(t) name
    EDIT CoolingDegree OBJECT t
;

FORM coolingDegrees 'Степени охлаждения товара'
    OBJECTS t=CoolingDegree
    PROPERTIES(t) READONLY name 
    PROPERTIES(t) NEWSESSION NEW, EDIT, DELETE
    ORDERS name(t)
    LIST CoolingDegree OBJECT t
;
DESIGN coolingDegrees { BOX { size = (600, 400); } }

@defineObjectItemAttribute(coolingDegree, CoolingDegree, name, 'Степень охлаждения', itemFood);
@defineObjectItemAttributeBatch (coolingDegree, nameCoolingDegree, 'Степень охлаждения');

@implementItemAttribute(nameCoolingDegree, 'Степень охлаждения', String, itemCoolingDegree);
@defineItemFilterValue(coolingDegree, 'Степень охлаждения', t);

@defineUniteFilterAttributeItem(coolingDegree, name, 'степень охлаждения', 'степени охлаждения', item);
@defineItemExtractObjectAttribute(coolingDegree, nameCoolingDegree, coolingDegreeName);
//@implementObjectShortItemAttribute(coolingDegree, 'Степень охлаждения (сокр.)');

// Жирность
CLASS Fat 'Жирность';
TABLE fat(Fat);

name 'Наименование' = DATA ISTRING[50](Fat);
fatName = GROUP AGGR Fat fat BY name(fat); 

FORM fat 'Жирность товара'
    OBJECTS t=Fat PANEL
    PROPERTIES(t) name
    EDIT Fat OBJECT t
;

FORM fats 'Жирность товара'
    OBJECTS t=Fat
    PROPERTIES(t) READONLY name
    PROPERTIES(t) NEWSESSION NEW, EDIT, DELETE
    ORDERS name(t)
    LIST Fat OBJECT t
;
DESIGN fats { BOX { size = (600, 400); } }

@defineObjectItemAttribute(fat, Fat, name, 'Жирность', itemFood);
@defineObjectItemAttributeBatch (fat, nameFat, 'Жирность');
@implementItemAttribute(nameFat, 'Жирность', String, itemFat);

@defineItemGroupDefaultObject(fat, 'Жирность', Fat, nameFat);
@defineItemFilterValue(fat, 'Жирность', t);

@defineUniteFilterAttributeItem(fat, name, 'жирность', 'жирности', item);
@defineItemExtractObjectAttribute(fat, nameFat, fatName);

// % Жирности
//@defineDoubleItemAttribute(percentFat, NUMERIC[5,1], '% жирности', itemFood);
//@defineItemAttributeBatch (percentFat, '% жирности');
//@implementItemAttribute(percentFat, '% жирности', Double, itemPercentFat);
//
//@defineItemExtractDoubleAttribute(percentFat);

// Алкоголь
CLASS Alcohol 'Содержание алкоголя';
TABLE alcohol(Alcohol);

name 'Наименование' = DATA ISTRING[50](Alcohol);
alcoholName = GROUP AGGR Alcohol alcohol BY name(alcohol); 

FORM alcohol 'Содержание алкоголя'
    OBJECTS t=Alcohol PANEL
    PROPERTIES(t) name
    EDIT Alcohol OBJECT t
;

FORM alcohols 'Содержания алкоголя'
    OBJECTS t=Alcohol
    PROPERTIES(t) READONLY name 
    PROPERTIES(t) NEWSESSION NEW, EDIT, DELETE
    ORDERS name(t)
    LIST Alcohol OBJECT t
;
DESIGN alcohols { BOX { size = (600, 400); } }

@defineObjectItemAttribute(alcohol, Alcohol, name, 'Содержание алкоголя', itemFood);
@defineObjectItemAttributeBatch (alcohol, nameAlcohol, 'Содержание алкоголя');
@implementItemAttribute(nameAlcohol, 'Содержание алкоголя', String, itemAlcohol);

@defineItemGroupDefaultObject(alcohol, 'Содержание алкоголя', Alcohol, nameAlcohol);
@defineItemFilterValue(alcohol, 'Содержание алкоголя', t);

@defineUniteFilterAttributeItem(alcohol, name, 'cодержание алкоголя', 'cодержание алкоголя', item);
@defineItemExtractObjectAttribute(alcohol, nameAlcohol, alcoholName);

value 'Содержание алкоголя, %' = DATA NUMERIC[8,3] (Alcohol);
alcoholValue = GROUP MAX Alcohol a BY value(a);

EXTEND FORM attributesItem
    PROPERTIES (alcohol) READONLY value;
    
EXTEND FORM alcohols
    PROPERTIES (t) READONLY value;
    
EXTEND FORM alcohol 
    PROPERTIES (t) value;

EXTEND FORM alcoholsSession PROPERTIES (t) READONLY value;

// Алкоголь
//@defineDoubleItemAttribute(percentAlcohol, NUMERIC[5,1], '% алкоголя', itemFood);
//@defineItemAttributeBatch (percentAlcohol, '% алкоголя');
//@implementItemAttribute(percentAlcohol, '% алкоголя', Double, itemPercentAlcohol);
//
//@defineItemExtractDoubleAttribute(percentAlcohol);

overCopy(Item s, Item d) + { 
    taste(d) <- taste(s);
    coolingDegree(d) <- coolingDegree(s);
    fat(d) <- fat(s);
//    percentFatItem(d) <- percentFatItem(s);
    alcohol(d) <- alcohol(s);
//    percentAlcoholItem(d) <- percentAlcoholItem(s);
}

DESIGN item {
    itemPrimaryColumn1 {
        MOVE GROUP(itemFood,i) {
            alignment = STRETCH;
            lines = 2;
        }
    }
}

DESIGN itemGroup {
    attributes {
        MOVE GROUP(itemFood,g) {
            lines = 6;
        }
    }
}

//----------------------- Переход на новый основной классификатор ---------------------------//
overReplaceToItemGroup(CustomGroup g, ItemGroup ng) + {
    userShowTaste(ng) <- userShowTaste(itemGroup(g));
    userShowCoolingDegree(ng) <- userShowCoolingDegree(itemGroup(g));
    userShowFat(ng) <- userShowFat(itemGroup(g));
    userShowAlcohol(ng) <- userShowAlcohol(itemGroup(g));
    dataTaste(ng) <- prevTaste(itemGroup(g));
    dataFat(ng) <- prevFat(itemGroup(g));
    dataAlcohol(ng) <- prevAlcohol(itemGroup(g));
}