MODULE ItemSSC;

REQUIRE Item, PriceListPromotion;

NAMESPACE Item;

GROUP itemSSC 'Самообслуживание' : base;

@defineItemAttribute(itemSSC, 'Самообслуживание, отображение', itemSSC);
EXTEND FORM itemGroup PROPERTIES(g) userShowItemSSC;
EXTEND FORM itemOptions PROPERTIES(g) READONLYIF  isReadonly() showItemSSC BACKGROUND backgroundShowItemSSC(g);
DESIGN itemGroup {
    params {
        MOVE GROUP(itemSSC,g);
    }
}

META difineSSCAttribute (class, param, title)
    over###param title = ABSTRACT class (Item);
    data###param title = DATA class (Item) CHARWIDTH 20 IN itemSSC;
    @defineItemGroupValue(param, title, class, itemSSC);
    param title (Item i) = OVERRIDE data###param(i), param(itemGroup(i)), over###param(i) IN itemSSC;

    EXTEND FORM item PROPERTIES(i) param SHOWIF showItemSSC(i);
    EXTEND FORM items PROPERTIES(i) READONLYIF isReadonly() BEFORE deletei param SHOWIF showAnyItemSSC(g);
END;

@difineSSCAttribute(BOOLEAN, antiTheftDevice, 'Товар оснащен устройством против кражи');
@difineSSCAttribute(INTEGER, age, 'Возраст');
@difineSSCAttribute(BOOLEAN, ageVerify, 'Необходимо подтверждение возраста');
@difineSSCAttribute(BOOLEAN, visualVerify, 'Необходима визуальная проверка товара');
@difineSSCAttribute(BOOLEAN, lowWeight, 'Легкий товар');
@difineSSCAttribute(BOOLEAN, weightControlBypass, 'Пропускать товар при контроле веса');
@difineSSCAttribute(BOOLEAN, inaccurateReferenceWeight, 'Неточный контрольный вес');
@difineSSCAttribute(BOOLEAN, requireQuantityManual, 'Обязательный ввод количества');
@difineSSCAttribute(BOOLEAN, requireQuantityScales, 'Обязательное взвешивание товара');

hasPromotionPrice 'Акционный товар' (Item i, Stock st) = GROUP SUM 1 IF promotionPriceListDetailA(i, st, currentDate()) AND active(st);

@difineSSCAttribute(BOOLEAN, requireProductSelection, 'Товар требует выбора ');

// Установка параметра для единицы измерения
requireQuantityScales 'Обязательное взвешивание товара' =  DATA BOOLEAN (UOM);

EXTEND FORM UOM
    PROPERTIES(u) requireQuantityScales
;
EXTEND FORM UOMs
    PROPERTIES(u) READONLY requireQuantityScales
;

dataRequireQuantityScales(Item i) <- requireQuantityScales(UOM(i)) WHEN CHANGED(UOM(i));

@difineSSCAttribute(NUMERIC[8,3], taraCapacity, 'Масса тары, кг');

DESIGN item{
    itemPrimaryColumn2{
        MOVE GROUP (itemSSC, i){
            lines = 2;
        };
    }
}

//----------------------- Переход на новый основной классификатор ---------------------------//
overReplaceToItemGroup(CustomGroup g, ItemGroup ng) + {
    userShowItemSSC(ng) <- userShowItemSSC(itemGroup(g));
    dataAge(ng) <- prevAge(itemGroup(g));
    dataAgeVerify(ng) <- prevAgeVerify(itemGroup(g));
    dataVisualVerify(ng) <- prevVisualVerify(itemGroup(g));
    dataLowWeight(ng) <- prevLowWeight(itemGroup(g));
    dataWeightControlBypass(ng) <- prevWeightControlBypass(itemGroup(g));
    dataRequireQuantityManual(ng) <- prevRequireQuantityManual(itemGroup(g));
    dataRequireQuantityScales(ng) <- prevRequireQuantityScales(itemGroup(g));
    dataTaraCapacity(ng) <- prevTaraCapacity(itemGroup(g));
}