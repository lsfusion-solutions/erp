MODULE ItemArticle;

REQUIRE System, Item, Tax;

NAMESPACE Item;

GROUP itemArticle 'Артикул' : base;

// Артикул
CLASS Article 'Артикул';
TABLE article(Article);

@defineExternalizable(article, STRING[100]);
caption 'Название' = DATA ISTRING[255](Article) IN itemBase CHARWIDTH 20;
originalCaption 'Наименование (ориг.)' = DATA ISTRING[100] (Article) IN itemOriginal CHARWIDTH 20;

itemGroup 'Группа товара' = DATA ItemGroup(Article);
nameItemGroup 'Группа товара' (Article Article) = name(itemGroup(Article));
idItemGroup 'Код группы' (Article Article) = id(itemGroup(Article));

skuGroup1 'Категория' (Article article) = skuGroup1(itemGroup(article));
nameSkuGroup1 'Категория' (Article article) = name(skuGroup1(article));

skuGroup2 'Направление' (Article article) = skuGroup2(itemGroup(article));
nameSkuGroup2 'Направление' (Article article) = name(skuGroup2(article));

skuGroup3 'Группа' (Article article) = skuGroup3(itemGroup(article));
nameSkuGroup3 'Группа' (Article article) = name(skuGroup3(article));

skuGroup4 'Подгруппа' (Article article) = skuGroup4(itemGroup(article));
nameSkuGroup4 'Подгруппа' (Article article) = name(skuGroup4(article));

skuGroup5 'Субгруппа' (Article article) = skuGroup5(itemGroup(article));
nameSkuGroup5 'Субгруппа' (Article article) = name(skuGroup5(article));

WHEN LOCAL CHANGED(itemGroup(Article a)) AND NOT caption(a) DO
    caption(a) <- caption(itemGroup(a));

TABLE itemGroupArticle(ItemGroup, Article);
isParent(ItemGroup group, Article article) = isParent(itemGroup(article), group) MATERIALIZED INDEXED;
canonicalNameItemGroup 'Группа товара' (Article article) = canonicalName[Group](itemGroup(article)) CHARWIDTH 40;

// --- Дополнительные группы
TABLE customGroupTypeArticle(CustomGroupType, Article);
customGroup = DATA CustomGroup (CustomGroupType, Article);
nameCustomGroup 'Имя' (CustomGroupType customGroupType, Article article) = name(customGroup(customGroupType, article));
canonicalNameCustomGroup 'Каноническое имя' (CustomGroupType customGroupType, Article article) = canonicalName(customGroup(customGroupType, article));

CONSTRAINT customGroupType(customGroup(CustomGroupType type, Article article)) != type
           CHECKED BY customGroup[CustomGroupType,Article]
           MESSAGE 'Выбранный объект классификатора SKU имеет неправильный тип';

// Бренд
brand 'Бренд' = DATA Brand (Article);
nameBrand 'Бренд' (Article a) = name(brand(a)) IN itemBase;
idBrand 'Бренд' (Article a) = id(brand(a));
siteBrand 'Адрес сайта' (Article a) = site(brand(a));
overReplace (Brand new,Brand o) + { 
    brand(Article article) <- new WHERE brand(article) == o;
}

CONSTRAINT brand(Article article) AND itemGroup(article) AND countDataItemGroup(brand(article)) AND NOT countRec(brand(article), itemGroup(article))
    CHECKED BY brand[Article], itemGroup[Article]  
        MESSAGE 'Бренд должен быть доступен для товарной группы (артикул)';  

// Производитель
manufacturer 'Производитель' = DATA Manufacturer (Article);
nameManufacturer 'Производитель' (Article a) = name(manufacturer(a)) IN itemBase;
overReplace (Manufacturer new,Manufacturer o) + { 
    manufacturer(Article article) <- new WHERE manufacturer(article) == o;
}
// Производитель
country = DATA Country (Article);
nameCountry 'Страна' (Article a) = name(country(a)) IN itemBase;
overReplace (Country new,Country o) + { 
    country(Article article) <- new WHERE country(article) == o;
}
// Изображение артикула
TABLE imagesArticle (Article);
image 'Изображение' = DATA IMAGEFILE (Article) TABLE imagesArticle;
loadImage 'Загрузить изображение' (Article a)  { INPUT =image(a) CHANGE; }

saveImage 'Сохранить изображение' (Article article)  { 
    LOCAL fileName=STRING[255]();
    fileName() <- OVERRIDE caption(article), id(article);
    WRITE CLIENT DIALOG image(article) TO fileName();
} ASON CONTEXTMENU image[Article];

FORM article 'Артикул'
    OBJECTS a=Article PANEL
    PROPERTIES(a) caption, originalCaption, id SHOWIF showIDs(), canonicalNameItemGroup, nameBrand, 
                  nameManufacturer, nameCountry, image

    OBJECTS c = Country
    PROPERTIES (c) READONLY name
    FILTERGROUP filters1
            FILTER 'Страны, у которых есть НДС' countRange (Tax.taxVAT, c) 'F11' DEFAULT

    EDIT Article OBJECT a
;
DESIGN article {
    OBJECTS {
        NEW articleHeader {
            type = COLUMNS;
            columns = 2;
            MOVE PROPERTY(canonicalNameItemGroup(a));
            MOVE PROPERTY(id(a));
        }
        NEW articleDetail {
            fill = 1;
            type = TABBED;
            NEW articlePrimary {
                type = CONTAINERV;
                caption = 'Основные данные';
                MOVE GROUP(itemBase,a) {
                    type = COLUMNS;
                    columns = 4;
                }
                MOVE GROUP(itemOriginal,a) {
                    type = COLUMNS;
                    columns = 4;
                }
                NEW regionPrm {
                    caption = 'Региональные свойства';
                    type = CONTAINERH;
                }
            }
            NEW regionalPrm {
                caption = 'Региональные параметры';
                MOVE BOX(c);
            }
            NEW imageBox {
                caption = 'Изображение';
                MOVE PROPERTY(image(a)) {
                    fill = 1;
                    caption = '';
                }
            }
        }
    }
}


FORM articles 'Артикулы'

    TREE groupTree g=ItemGroup PARENT parent(g)
    PROPERTIES READONLY order(g), name(g)
    ORDERS order(g), name(g)
    FILTERGROUP inactive FILTER 'Активные' active(g) 'F5' DEFAULT

    OBJECTS a=Article
    PROPERTIES(a) READONLYIF isReadonly() caption, originalCaption, id SHOWIF showIDs(), canonicalNameItemGroup, 
                  nameBrand, nameManufacturer, image PANEL 
    PROPERTIES(a) NEWSESSION NEW, EDIT, deletea=DELETE 
    ORDERS caption(a)
    FILTERGROUP groupFilters
        FILTER 'С группами' isParent(g, a) 'F9' DEFAULT
        FILTER 'Без групп' NOT itemGroup(a) 'F8'   
    
    LIST Article OBJECT a
;

DESIGN articles {
    BOX {
        size = (1024, 768);
        NEW rootContainer {
            fill = 1;
            type = SPLITH;
            NEW articleImage {
                fill = 1;
                type = SPLITV;
                MOVE BOX(TREE groupTree);
                MOVE PROPERTY (image(a)) {
                    fill = 1; 
                    caption = ''; 
                }
            }           
            NEW articleItemBox {
                fill = 3;
                MOVE BOX(a) {
                    fill = 2;
                    defaultComponent = TRUE;
                }
            }    
        }
        MOVE TOOLBARBOX;
    }
}
@extendFormEditable(articles);

article = DATA Article (Item) INDEXED;
idArticle 'Артикул' (Item item) = id(article(item)) IN itemArticle;
@defineItemAttribute(article, id, 'Артикул', itemArticle);

@defineObjectItemAttributeBatch (article, idArticle, 'Артикул');
captionArticle 'Артикул' (Batch batch) = caption(article(sku(batch)));

@implementItemAttribute(idArticle, 'Артикул', String, itemArticle);

captionArticle 'Aртикула' (Item item) = caption(article(item));
imageArticle 'Изображение (артикул)' (Item item) = image(article(item));
overImage (Item item) += imageArticle (item);

countItem 'Кол-во товаров' (a) = GROUP SUM 1 BY article(Item i);
prevCountItem (Article a) = PREV(countItem(a));


equalBrandItemArticle 'Бренд артикула должен соответствовать бренду товара' = DATA BOOLEAN ();        
        
EXTEND FORM options
    PROPERTIES () equalBrandItemArticle
;
DESIGN options {
    items {
        MOVE PROPERTY (equalBrandItemArticle());
    }
}        
CONSTRAINT brand(article(Item i)) AND brand(i) AND equalBrandItemArticle() AND NOT (brand(article(i)) == brand(i))
    CHECKED BY brand[Article], brand[Item]  
        MESSAGE 'Бренд артикула должен соответствовать бренду товара';  

//nameCountryArticle 'Страна' (a) = GROUP MAX nameCountryItem(i) BY articleItem(i); 
// Цвет
CLASS Color 'Цвет товара';
TABLE color (Color);

@defineExternalizable(color, STRING[100]);
name 'Наименование' = DATA ISTRING[50](Color) CHARWIDTH 15;
colorName 'Цвет' = GROUP AGGR Color color BY name(color);

FORM color 'Цвет товара'
    OBJECTS t=Color PANEL
    PROPERTIES(t) name, id SHOWIF showIDs()
    EDIT Color OBJECT t
;

FORM colors 'Цвета товара'
    OBJECTS t=Color
    PROPERTIES(t) READONLY name, id SHOWIF showIDs() 
    PROPERTIES(t) NEWSESSION NEW, EDIT, DELETE
    ORDERS name(t)
    LIST Color OBJECT t
;
DESIGN colors { BOX { size = (600, 400); } }

@extendFormEditable(colors);
@defineObjectItemAttribute(color, Color, name, 'Цвет', itemArticle);
@defineObjectItemAttributeBatch (color, nameColor, 'Цвет');
@implementItemAttribute(nameColor, 'Цвет', String, itemColor);

@defineItemFilterValue(color, 'Цвет', t);

@defineUniteFilterAttributeItem(color, name, 'цвет товара', 'цвета товара', item);
EXTEND FORM attributesItem
    PROPERTIES READONLY AFTER name(color) id(color) SHOWIF showIDs()
;

idColor 'Код цвета'(Item item) = id(color(item));

TABLE colorArticle(Color, Article);
EXTEND CLASS Color  {
    none 'None'
}
calcColor (Item item)= OVERRIDE color(item), (Color.none IF item IS Item);
count 'Кол-во цветов для артикула' (color,article) = GROUP SUM 1 BY calcColor(Item item), article(item) MATERIALIZED;

color  = DATA Color(Article);
nameColor 'Цвет' (Article Article) = name(color(Article)) IN itemArticle;
overReplace (Color new,Color o) + { 
    color(Article article) <- new WHERE color(article) == o;
}
EXTEND FORM article PROPERTIES(a) nameColor;
DESIGN article  {
    articlePrimary {
        MOVE GROUP(itemArticle,a) { columns = 1; type = CONTAINERH; }
    }
}
EXTEND FORM articles PROPERTIES(a) BEFORE deletea READONLYIF isReadonly() nameColor;

//  Ед. изм.
UOM  = DATA UOM (Article);
idUOM 'Единица измерения' (Article article) = id(UOM(article));
nameUOM 'Единица измерения' (Article article) = name(UOM(article)) IN itemBase CHARWIDTH 10;
shortNameUOM 'Краткое наименование' (Article article)=  shortName(UOM(article)) IN itemBase CHARWIDTH 3;

WHEN LOCAL CHANGED(itemGroup(Article a)) AND NOT UOM(a) DO
    UOM(a) <- UOM(itemGroup(a));
overReplace (UOM new,UOM o) + { 
    UOM(Article article) <- new WHERE UOM(article) == o;
}
//  Состав
composition 'Состав' = DATA STRING[255] (Article) IN itemBase CHARWIDTH 30;
originalComposition 'Состав (ориг.)' = DATA STRING[255] (Article) IN itemOriginal CHARWIDTH 30;

EXTEND FORM article PROPERTIES(a) composition, originalComposition, nameUOM;
EXTEND FORM articles PROPERTIES(a) BEFORE nameColor(a) READONLYIF isReadonly() nameUOM, composition, originalComposition;

//  Габариты
netWeight 'Вес нетто, кг' = DATA NUMERIC[11,5] (Article) IN itemSize;// CHARWIDTH 8;
grossWeight 'Вес брутто, кг' = DATA NUMERIC[11,5] (Article) IN itemSize;// CHARWIDTH 8;

EXTEND FORM article PROPERTIES(a) netWeight, grossWeight;
DESIGN article {
    articlePrimary {
        MOVE GROUP(itemSize,a) { columns = 1; type = CONTAINERH; }
    }
}
EXTEND FORM articles PROPERTIES(a) BEFORE deletea READONLYIF isReadonly() netWeight, grossWeight;


// Пол
CLASS Gender 'Пол';
TABLE gender (Gender);

@defineExternalizable(gender, STRING[100]);
name 'Наименование' = DATA ISTRING[50](Gender);
shortName 'Краткое наименование' = DATA ISTRING[10] (Gender);

FORM gender 'Пол'
    OBJECTS t=Gender PANEL
    PROPERTIES(t) name, shortName, id SHOWIF showIDs()
    EDIT Gender OBJECT t
;

FORM genders 'Пол'
    OBJECTS t=Gender
    PROPERTIES(t) READONLY name, shortName, id SHOWIF showIDs() 
    PROPERTIES(t) NEWSESSION NEW, EDIT, DELETE
    ORDERS name(t)
    LIST Gender OBJECT t
;
DESIGN genders { BOX { size = (600, 400); } }

gender  = DATA Gender (Brand);
nameGender 'Пол' (Brand b) = name(gender(b)) IN itemArticle;
shortNameGender 'Пол' (Brand b) = shortName(gender(b)) IN itemArticle;
EXTEND FORM brand PROPERTIES(t) nameGender, shortNameGender;
EXTEND FORM brands PROPERTIES(t) BEFORE deleteb READONLYIF isReadonly() nameGender;

dataGender  = DATA Gender (Article);
gender (Article article) = OVERRIDE dataGender(article), gender(brand(article)) MATERIALIZED;

nameGender 'Пол' (Article a) = name(gender(a));
shortNameGender 'Пол' (Article a) = shortName(gender(a));

//gender (Item i) = gender(article(i));
//nameGender 'Пол' (Item i) = name(gender(i));
//shortNameGender 'Пол' (Item i) = shortName(gender(i));

//gender  (Batch batch) = gender(sku(batch));
//nameGender 'Пол' (Batch batch) = name(gender(batch));
//shortNameGender 'Пол' (Batch batch) = shortName(gender(batch));

EXTEND FORM article PROPERTIES(a) nameGender;
EXTEND FORM articles PROPERTIES(a) BEFORE deletea READONLYIF isReadonly() nameGender;

// Размер
CLASS Size 'Размер товара';
TABLE size(Size);

@defineExternalizable(size, STRING[100]);

name 'Наименование' = DATA ISTRING[50](Size) CHARWIDTH 5;
sizeName = GROUP MAX Size size BY name(size);
shortName 'Краткое наименование' = DATA BPISTRING[10](Size);
order 'Порядок' = DATA INTEGER (Size);

nameOriginal 'Наименование (оригинальное)' = DATA ISTRING[50](Size);
sizeNameOriginal = GROUP MAX Size size BY nameOriginal(size);

sizeName = GROUP MAX Size size BY name(size), nameOriginal(size);

WHEN LOCAL CHANGED(name(Size s)) AND NOT nameOriginal(s) DO nameOriginal(s) <- name(s);

FORM size 'Размер товара'
    OBJECTS t=Size PANEL
    PROPERTIES(t) name, id SHOWIF showIDs(), shortName, nameOriginal, order
    EDIT Size OBJECT t
;

FORM sizes 'Размеры товара'
    OBJECTS t=Size
    PROPERTIES(t) READONLY name, id SHOWIF showIDs(), shortName, nameOriginal, order 
    PROPERTIES(t) NEWSESSION NEW, EDIT, DELETE
    ORDERS name(t)
    LIST Size OBJECT t
;
DESIGN sizes { BOX { size = (600, 400); } }

@defineObjectItemAttribute(size, Size, name, 'Размер', itemArticle);

nameOriginalSize 'Размер (оригинальный)' (Item item) = nameOriginal(size(item)) IN itemArticle;
dataOriginalSize 'Размер (оригинальный)' = DATA ISTRING[50](Item);
originalSize 'Размер (оригинальный)' (Item i) = OVERRIDE dataOriginalSize(i), nameOriginalSize(i) CHARWIDTH 3;
@implementItemAttribute(originalSize, 'Размер (оригинальный)', String, itemOriginalSize);

@defineObjectItemAttributeBatch (size, nameSize, 'Размер');
@implementItemAttribute(nameSize, 'Размер', String, itemSize);

@defineItemFilterValue(size, 'Размер', t);

@defineUniteFilterAttributeItem(size, name, 'размер товара', 'размеры товара', item);
EXTEND FORM attributesItem
    PROPERTIES(size) AFTER name(size) READONLY nameOriginal, shortName, id SHOWIF showIDs(), order READONLY 
;

TABLE sizeArticle(Size, Article);
EXTEND CLASS Size  {
    none 'None'
}
calcSize (Item item)= OVERRIDE size(item), (Size.none IF item IS Item);
count 'Кол-во размеров для артикля' (size,article) = GROUP SUM 1 BY calcSize(Item item), article(item) MATERIALIZED;

maxSku (article, color, size) = GROUP MAX Item sku
    BY article(sku), calcColor(sku), calcSize(sku);

overCopy(Item s, Item d) + { 
    article(d) <- article(s);
    color(d) <- color(s);
    size(d) <- size(s);
}

DESIGN item {
    itemPrimaryColumn2 {
        MOVE GROUP(itemArticle,i) {
            columns = 2;
        }
    }
}


DESIGN itemGroup {
    attributes {
        MOVE GROUP(itemArticle,g) {
            columns = 6;
        }
    }
}

NAVIGATOR {
    skuNavigator {
        NEW articles AFTER itemGroups;
    }
}

//replaceSizeSize  ABSTRACT LIST ( Size, Size);
//inSize 'Отм.' = DATA LOCAL BOOLEAN (Size);
//
//replaceSize 'Объединить' = (size) {
//    FOR inSize(s) DO{
//        IF s != size THEN {
//            sizeItem(item) <- size WHERE sizeItem(item) == s;
//            
//            replaceSizeSize(s,size);
//            
//            inSize(s) <- NULL;
//            DELETE s;
//        } ELSE {
//            MESSAGE 'Выделенный артикул не может совпадать с объединяемым';
//        }
//    }
//    apply();
//} CONFIRM;
//
//
//EXTEND FORM sizes
//    PROPERTIES(t) inSize BEFORE nameSize(t), replaceSize TOOLBAR
//;

//-------------------------- Размерная сетка ------------------------//
CLASS SizeGroup 'Размерная сетка';
TABLE sizeGroup(SizeGroup);
 
@defineExternalizable(sizeGroup, STRING[100]);
 
name 'Наименование' = DATA ISTRING[50](SizeGroup);
shortName 'Краткое наименование' = DATA BPISTRING[10](SizeGroup);

TABLE sizeGroupSize(SizeGroup, Size);
in 'Вкл.' = DATA BOOLEAN (SizeGroup, Size);
order 'Порядковый номер' = DATA INTEGER (SizeGroup, Size); 
FORM sizeGroup 'Размерная сетка'
    OBJECTS t=SizeGroup PANEL
    PROPERTIES(t) name, id SHOWIF showIDs(), shortName
    
    OBJECTS s=Size 
    PROPERTIES(s) READONLY name, id SHOWIF showIDs(), shortName, nameOriginal  
    PROPERTIES(t,s) in, order   
    FILTERGROUP filters1
            FILTER 'Только включенные' in(t,s) 'F11'
                 
    EDIT SizeGroup OBJECT t
;

FORM sizeGroups 'Размерные сетки'
    OBJECTS t=SizeGroup 
    PROPERTIES(t) READONLY name, id SHOWIF showIDs(), shortName
    
    OBJECTS s=Size 
    PROPERTIES(s) READONLY name, id SHOWIF showIDs(), shortName, nameOriginal  
    PROPERTIES(t,s) READONLY in, order
    PROPERTIES(t) NEWSESSION NEW, EDIT
    
    ORDERS  name(t), order(t,s)       
    FILTERS in(t,s)
     
    LIST SizeGroup OBJECT t
;
DESIGN sizes { BOX { size = (600, 400); } }

sizeGroup = DATA SizeGroup (Article);
nameSizeGroup 'Размерная сетка' (Article a) = name(sizeGroup(a)) IN itemArticle;

EXTEND FORM article
    PROPERTIES(a) nameSizeGroup
;
EXTEND FORM articles
    PROPERTIES(a) READONLYIF isReadonly() nameSizeGroup 
;

@defineUniteAttributeItemWithoutExtendForm(sizeGroup, nameSizeGroup, 'размерная сетка', 'размерные сетки', article);

EXTEND FORM attributesItem
    OBJECTS sizeGroup=SizeGroup 
    PROPERTIES in(sizeGroup)    
    PROPERTIES(sizeGroup) READONLY name, id SHOWIF showIDs(), shortName
    PROPERTIES(sizeGroup) NEWSESSION NEW, EDIT, DELETE         
    ORDERS name(sizeGroup)
    PROPERTIES replace(sizeGroup) TOOLBAR    
    
    OBJECTS size2=Size 
    PROPERTIES(size2) READONLY name, id SHOWIF showIDs(), shortName, nameOriginal  
    PROPERTIES(sizeGroup,size2) READONLY in, order
    
    ORDERS  name(sizeGroup), order(sizeGroup,size2)       
    FILTERS in(sizeGroup,size2)
;

DESIGN attributesItem{
    tabContainer{
        NEW sizeGroupContainer {
            caption = 'Размерные сетки';
            MOVE BOX(sizeGroup);
            MOVE BOX(size2);
        }
    }
} 

// ------------------ Добавляем на форму артикулов товары в отдельную вкладку ---------------------- //
EXTEND FORM article

    OBJECTS i = Item
    PROPERTIES (i) idBarcode, id, caption, composition, nameUOM, nameColor,                        
                   nameSize
    PROPERTIES (i) NEW, deletei = DELETE GRID   
                                                                    
    FILTERS article(i) == a      
;
DESIGN article {
    articleDetail{
        MOVE BOX(i);
    }
} 

EXTEND FORM articles

    OBJECTS i = Item
    PROPERTIES (i) READONLY caption, composition, nameUOM, nameColor, 
                   nameSize       
    
    FILTERS article(i) == a      
    
;

DESIGN articles {
    articleItemBox{
        MOVE BOX(i);
    }
} 

// ------------------------- Объединение артикулов ---------------------- //

replace  ABSTRACT LIST ( Article, Article);
in 'Отм.' = DATA LOCAL BOOLEAN (Article);
resetInArticles 'Сбросить Отм.' () {
    in(Article a) <- NULL;
}

FORM confirmReplaceArticle 'Объединяемые артикулов'
    OBJECTS article = Article PANEL 

    OBJECTS a = Article  
    PROPERTIES(a) READONLY id, caption
    FILTERS a==article

    OBJECTS a2 = Article
    PROPERTIES(a2) in
    PROPERTIES(a2) READONLY id, caption
    FILTERS in(a2)
;

DESIGN confirmReplaceArticle {
    REMOVE BOX(article);
    NEW splitContainer{
        type = SPLITV;
        fill = 1;
        MOVE BOX(a){
            caption = 'Основной артикул';
        }
        MOVE BOX(a2){
            caption = 'Удаляемый артикул';
        }           
    }
    MOVE TOOLBARBOX;
}

replace 'Объединить'(Article article)  { 
    IF noEventsInTransactionItem() THEN setNoEventsInTransaction();
    DIALOG confirmReplaceArticle OBJECTS a=article DO {
        FOR in(Article a) AND article IS Article DO {
            IF a != article THEN {
                article(Item item) <- article WHERE article(item) == a;
                replace(a, article);
                in(a) <- NULL;
                DELETE a;            
            } ELSE {
                MESSAGE 'Выделенный артикул не может совпадать с объединяемым';
            }
        }
        apply();
    }
    in(Item i) <- NULL;           
    IF noEventsInTransactionItem() THEN dropNoEventsInTransaction();   
} CONFIRM;


EXTEND FORM articles
    PROPERTIES(a) in BEFORE caption(a) ON CONTEXTMENU resetInArticles(), replace TOOLBAR
;

// ------------------------- Автоматическое проставление свойств товара для артикула ---------------------- //
useDiffProperty 'Использовать разные значения для артикула и товара' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES () useDiffProperty
;

DESIGN options {
    items {
        MOVE PROPERTY(useDiffProperty());
    }
}

META defineEventChangedArticle(property)
    WHEN LOCAL CHANGED(property(article(Item i))) AND NOT CHANGED(property(i)) AND NOT useDiffProperty() DO         
        property(i) <- property(article(i));
END

//@defineEventChangedArticle(caption);

WHEN LOCAL CHANGED(caption(article(Item i))) AND NOT CHANGED(caption(i)) AND NOT useDiffProperty() DO         
    caption(i) <- caption(article(i));

@defineEventChangedArticle(itemGroup);
@defineEventChangedArticle(country);
      
WHEN LOCAL CHANGED(customGroup(CustomGroupType type, article(Item i))) AND NOT CHANGED(customGroup(type, i)) AND NOT useDiffProperty() DO         
    customGroup(type, i) <- customGroup(type, article(i));

//WHEN LOCAL (CHANGED(customGroupCustomGroupTypeArticle(type, article)) OR CHANGED(articleItem(i))) AND NOT CHANGED(customGroupCustomGroupTypeItem(type, i)) DO         
//    customGroupCustomGroupTypeItem(type, i) <- customGroupCustomGroupTypeArticle(type, article) WHERE articleItem(i)==article;

@defineEventChangedArticle(brand);

@defineEventChangedArticle(manufacturer);

@defineEventChangedArticle(composition);

@defineEventChangedArticle(UOM);

@defineEventChangedArticle(color);

@defineEventChangedArticle(netWeight);

@defineEventChangedArticle(grossWeight);

//----------------------- Переход на новый основной классификатор ---------------------------//
overReplaceToItemGroup(CustomGroup g, ItemGroup ng) + {
    userShowArticle(ng) <- userShowArticle(itemGroup(g));
    userShowColor(ng) <- userShowColor(itemGroup(g));
    userShowSize(ng) <- userShowSize(itemGroup(g));
}

overChangeItemGroup(CustomGroupType t) + {
    printToLog('' + currentDateTime() + ' Changing itemGroup in Articles');
    itemGroup(Article article) <- itemGroup('tst_' + id(customGroup(t,article)));
}
