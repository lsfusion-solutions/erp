MODULE Currency;

REQUIRE SystemEvents, Time, MasterData, DefaultData;

CLASS Currency 'Валюта';
TABLE currency(Currency);

name 'Наименование' = DATA ISTRING[50](Currency) IN id;
sid 'Код валюты' = DATA BPSTRING[3] (Currency);

symbol 'Символ' = DATA BPSTRING[5] (Currency);
shortName 'Наименование (сокр.)' = DATA BPSTRING[3] (Currency);
documentName 'Наименование (в документах)' = DATA BPSTRING[10] (Currency);
currencyShortName (string) = GROUP AGGR Currency currency WHERE currency IS Currency BY shortName(currency);

defaultCurrency = DATA Currency (); 
nameDefaultCurrency 'Валюта по умолчанию' = name(defaultCurrency()) CHARWIDTH 30;

currency (sid) = GROUP AGGR (Currency currency) BY sid(currency);

// Формы

FORM currency 'Валюта'
    OBJECTS c = Currency PANEL
    PROPERTIES (c)  name, shortName, sid, symbol, documentName

    EDIT Currency OBJECT c
;

FORM currencies 'Валюты'
    OBJECTS c = Currency
    PROPERTIES(c) READONLY name, shortName, sid, symbol, documentName
    ORDERS name(c)    

    PROPERTIES(c) NEWSESSION NEW, EDIT, DELETE 
;

FORM dialogCurrencies 'Валюты'
    OBJECTS c = Currency
    PROPERTIES(c) READONLY name, shortName
    ORDERS name(c)

    LIST Currency OBJECT c
;

EXTEND FORM options
    PROPERTIES() nameDefaultCurrency
;

DESIGN options {
    commons {
        MOVE PROPERTY(nameDefaultCurrency());
    }
}

// ---------------------------------- Типы обмена ---------------------------- //

CLASS TypeExchange 'Тип обмена';
TABLE typeExchange(TypeExchange);
TABLE rateExchange (TypeExchange, Currency, DATE);

name 'Наименование' = DATA ISTRING[50](TypeExchange) IN id;

currency 'Валюта типа обмена'= DATA Currency (TypeExchange);
nameCurrency 'Валюта типа обмена' (TypeExchange typeExchange) = name(currency(typeExchange)) IN base;

FORM typeExchange 'Тип обмена'
    OBJECTS t = TypeExchange PANEL
    PROPERTIES(t) name, nameCurrency
    
    EDIT TypeExchange OBJECT t
;

FORM dialogTypeExchange 'Типы обмена'
    OBJECTS t = TypeExchange PANEL
    PROPERTIES(t) READONLY name, nameCurrency
    
    LIST TypeExchange OBJECT t
;
// Расчет курсов на дату

rate 'Курс обмена' = DATA NUMERIC[20,13] (TypeExchange, Currency, DATE);
typeExchange (name) = GROUP AGGR TypeExchange typeExchange WHERE typeExchange IS TypeExchange BY name(typeExchange);

rateOn 'Курс обмена' (TypeExchange typeExchange, Currency currency, DATE date) =
    GROUP
          LAST rate(typeExchange, currency, DATE dateIn)
          ORDER dateIn
          WHERE rate(typeExchange, currency, dateIn) AND dateIn <= date COMPLEX;

curRate 'Текущий курс обмена' (TypeExchange typeExchange, Currency currency) =
    rateOn(typeExchange, currency, currentDate());

// -------------------------------------------- Курсы валют --------------------------------- //

FORM dialogTypeExchangeCurrency 'Курс обмена на дату'
    OBJECTS t=TypeExchange PANEL
    OBJECTS c=Currency PANEL
    OBJECTS d=DATE PANEL
    PROPERTIES READONLY name(t),  nameCurrency(t), name(c)
    PROPERTIES val=VALUE(d), rate(t,c,d)

;
DESIGN dialogTypeExchangeCurrency {
    BOX {
        type = CONTAINERV;
        MOVE BOX(t) {
            MOVE PROPERTY(name(t)) { focusable = FALSE; charWidth = 40;}
        }
        MOVE BOX(c){
            type = CONTAINERV;
            MOVE BOX(d) {
                horizontal = TRUE;

                MOVE PROPERTY(rate(t,c,d));
            };
            NEW row {
                caption = 'Валюты обмена';
                horizontal = TRUE;
                MOVE PROPERTY(name(c)) { caption = 'Валюта (из)'; charWidth = 20;}
                MOVE PROPERTY(nameCurrency(t)) { caption = 'Валюта (в)'; charWidth = 20;}
            }
        }
    }
    MOVE TOOLBARBOX;
}

dialog 'Добавить' (TypeExchange typeExchange, Currency currency)  { SHOW dialogTypeExchangeCurrency OBJECTS t = typeExchange, c = currency; }  TOOLBAR;
delete 'Удалить' (TypeExchange typeExchange, Currency currency, DATE date)  { rate(typeExchange, currency, date) <- NULL; } IMAGE 'delete.png';


parent = DATA TypeExchange (TypeExchange);
nameParent 'Родительский '  = name(parent(TypeExchange t));

//typeTypeExchangeCurrency = GROUP AGGR t BY parentTypeExchange(t), currencyTypeExchange(t);

isRevers 'Обратный' = DATA BOOLEAN (TypeExchange);

EXTEND FORM typeExchange    
    PROPERTIES(t) nameParent, isRevers
;

//createCrosTypeExchangeCurrency 'Создать кросс-курс' = (type, currency) {
//    IF NOT typeTypeExchangeCurrency(type, currency) THEN {
//        NEW t = TypeExchange {
//            currencyTypeExchange(t) <- currency;
//            nameTypeExchange(t) <- ISTRING[50](CONCAT '', 'Кросс '+nameTypeExchange(type), '-('+shortNameCurrency(currency)+')');   
//            parentTypeExchange(t) <- type;
//            
//            FOR  curRateTypeExchangeCurrency(type, c) DO {
//                rateExchange(t, c, date) <- NUMERIC[20,13](curRateTypeExchangeCurrency(type, currency)/(curRateTypeExchangeCurrency(type, c) IF curRateTypeExchangeCurrency(type, c)!=0)) WHERE date == currentDate();   
//            }
//        }    
//    } ELSE {
//        MESSAGE 'Кросс-курс уже существует для данной валюты и типа обмена';
//    } 
//};


FORM typeExchangeCurrencyDate 'Курсы валют'

    OBJECTS t = TypeExchange
    PROPERTIES(t) READONLY name, nameCurrency, nameParent, isRevers
    PROPERTIES(t) NEWSESSION NEW, EDIT, DELETE 
    ORDERS nameCurrency(t)

    OBJECTS c = Currency
    PROPERTIES(c) READONLY name
    PROPERTIES(c) NEWSESSION NEW, EDIT, DELETE 
    PROPERTIES(t, c) READONLY curRate
//    PROPERTIES(t, c)  createCrosTypeExchangeCurrency TOOLBAR
    ORDERS name(c) 

    FILTERGROUP inactive FILTER 'Есть курс' curRate(t, c) 'F11' DEFAULT    

    OBJECTS d = DATE LAST
    PROPERTIES(d) READONLY VALUE

    PROPERTIES(t, c, d) rate
    PROPERTIES(t, c) dialog DRAW d 
    PROPERTIES(t, c, d) delete GRID

    FILTERS rate(t, c, d)

    LIST TypeExchange OBJECT t

;

DESIGN typeExchangeCurrencyDate {
    BOX {
        type = CONTAINERV;
        NEW split {
            fill = 1;
            type = SPLITV;
            MOVE BOX(t);
            NEW topContainer {
                fill = 2;
                tabbed = TRUE;
                NEW currentExchangeRates {
                    caption = 'Текущие курсы';
                    type = SPLITH;
                    MOVE BOX(c);
                    MOVE BOX(d);
                }
                NEW importExchangeRates {
                    caption = 'Импорт курсов';
                }
            }
        }
        MOVE TOOLBARBOX;
    }
}

NAVIGATOR {
    masterData {
        NEW FOLDER currencyNavigator 'Валюты и курсы' {
            NEW currencies;
            NEW typeExchangeCurrencyDate;
        }
    }
}

// --------------------------------------------------- Макросы по добавлению валюты в документы ------------------------------------ //
META defineDocumentHeaderCurrency (object)
    currency (object) = DATA Currency (###object);
    nameCurrency 'Валюта' (###object object)= name(currency(object)) IN documentPrm CHARWIDTH 10;
    shortNameCurrency 'Валюта (сокр.)' (###object object) = shortName(currency(object));
END
META defineDocumentAbstractHeaderCurrency (object)
    currency (object) = ABSTRACT Currency (###object) MATERIALIZED;
    nameCurrency 'Валюта' (###object object)= name(currency(object)) IN documentPrm CHARWIDTH 10;
    shortNameCurrency 'Валюта (сокр.)' (###object object) = shortName(currency(object));
END
META defineDocumentInterfaceHeaderCurrency (object)
    @defineDocumentAbstractHeaderCurrency(object);
    @defineDocumentHeaderCurrency(user###object);
    currency (User###object object) += currency(object);
END

META defineDocumentDetailCurrency (object, detail)
    currency (###detail idetail) = currency(object(idetail)) MATERIALIZED;
    nameCurrency 'Валюта' (###detail idetail) = nameCurrency(object(idetail));
    shortNameCurrency 'Валюта (сокр.)' (###detail idetail) = shortName(currency(idetail));
END
META defineDocumentInterfaceDetailCurrency (object, detail)
    @defineDocumentDetailCurrency(object, detail);
    @defineDocumentDetailCurrency(user###object, user###detail);
END

META defineDocumentCurrency (object, detail)
    @defineDocumentHeaderCurrency(object);
    @defineDocumentDetailCurrency(object, detail);
END
META defineDocumentAbstractCurrency (object, detail)
    @defineDocumentAbstractHeaderCurrency(object);
    @defineDocumentDetailCurrency(object, detail);
END
META defineDocumentInterfaceCurrency (object, detail)
    @defineDocumentInterfaceHeaderCurrency(object);
    @defineDocumentInterfaceDetailCurrency(object, detail);
END

META defineDocumentCurrency (object)
    @defineDocumentCurrency(object, object##Detail);
END
META defineDocumentAbstractCurrency (object)
    @defineDocumentAbstractCurrency(object, object##Detail);
END
META defineDocumentInterfaceCurrency (object)
    @defineDocumentInterfaceCurrency(object, object##Detail);
END

META deriveDocumentCurrency (object, stockProp)
    @deriveDocumentCurrency(object, stockProp, currencyStock);
END

META deriveDocumentCurrency (object, objectProp, currencyProp)
    currency (###object object) <- currency(objectProp(object)) WHEN CHANGED(objectProp(object));
END