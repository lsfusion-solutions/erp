MODULE Contract;

REQUIRE System, Historizable, LegalEntity, Numerator, Document, PaymentCondition;

// ---------------------------------------- Договора ------------------------------------ //

CLASS ABSTRACT Contract 'Договор';
TABLE contract (Contract);
TABLE contractDate (Contract, DATE);

GROUP contract 'Реквизиты' : id;

id 'Код' = ABSTRACT STRING[100] (Contract) IN id CHARWIDTH 10 MATERIALIZED ;

number 'Номер' = ABSTRACT STRING[48] (Contract) IN numbered MATERIALIZED CHARWIDTH 7;
series 'Серия' = ABSTRACT BPSTRING[2] (Contract) IN numbered MATERIALIZED CHARWIDTH 3 NOFLEX; 

seriesNumber 'Серия/Номер' (Contract o) = 
    CONCAT '', series(o), number(o) 
    CHARWIDTH 7 INDEXED MATERIALIZED;

dateFrom 'Действует (с)' = DATA DATE (Contract) IN contract;
dateTo 'Действует (по)' = DATA DATE (Contract) IN contract;
active 'Действуюший' (Contract contract, DATE date) =
    dateFrom(contract) <= date AND NOT dateTo(contract) < date;

description 'Описание' (Contract contract) = CONCAT '', seriesNumber(contract),
                                                       ' от '+ toDateDDMMYYYY(dateFrom(contract));

GROUP party 'Контрагенты' : id;

partyA = ABSTRACT LegalEntity (Contract) MATERIALIZED INDEXED;
namePartyA 'Организация (поставщик)' (Contract contract) = name(partyA(contract)) IN party;
addressPartyA 'Адрес организация (поставщик)' (Contract contract) = address(partyA(contract)) IN party;

partyB = ABSTRACT LegalEntity (Contract) MATERIALIZED INDEXED;
namePartyB 'Организация (покупатель)' (Contract contract) = name(partyB(contract)) IN party;
addressPartyB 'Адрес организация (покупатель)' (Contract contract) = address(partyB(contract)) IN party;

countContract 'Кол-во договоров' (LegalEntity partyA, LegalEntity partyB) =
    GROUP SUM 1 IF partyA(Contract contract) == partyA AND partyB(contract) == partyB;

GROUP payment 'Оплата' : public;

//договор по умолчанию
isDefault 'По умолчанию' = ABSTRACT BOOLEAN (Contract) IN party;
  
// Валюты
currency = DATA Currency (Contract);
nameCurrency 'Валюта взаиморасчетов' (Contract contract) = name(currency(contract)) IN payment;
shortNameCurrency 'Валюта взаиморасчетов' (Contract contract) = shortName(currency(contract)) IN payment;
symbolCurrency 'Символ' (Contract contract) = symbol(currency(contract)) IN payment;

typeExchange (contract) = DATA TypeExchange (Contract);
nameTypeExchange 'Тип обмена' (Contract contract) = name(typeExchange(contract)) IN payment;

CONSTRAINT currency(Contract contract) != currency(typeExchange(contract))
    CHECKED BY typeExchange[Contract] MESSAGE 'Валюта типа обмена должна соответствовать валюте договора';

// Условия оплаты
paymentCondition 'Условия оплаты' =  DATA PaymentCondition (Contract);
typePayment 'Тип оплаты' (Contract contract) = type(paymentCondition(contract));
descriptionPaymentCondition 'Условия оплаты' (Contract contract) = description(paymentCondition(contract)) IN payment;
shortDescriptionPaymentCondition 'Условия оплаты' (Contract contract) = shortDescription(paymentCondition(contract)) IN payment;

note 'Примечание' = DATA STRING[100] (Contract) CHARWIDTH 20;

//для договора
CLASS ContractType 'Тип договора';

contractType = ABSTRACT ContractType (Contract);
nameContractType 'Тип договора'  = staticCaption(contractType(Contract c));

skipEdit = ABSTRACT BOOLEAN (Contract);

FORM contracts 'Договоры'
    OBJECTS c = Contract
    PROPERTIES(c) READONLYIF isReadonly() namePartyA, namePartyB, id SHOWIF showIDs(),
                           seriesNumber, dateFrom, dateTo, isDefault, nameCurrency, 
                           nameTypeExchange, descriptionPaymentCondition, note
    PROPERTIES(c) NEWSESSION EDIT SHOWIF NOT skipEdit(c), DELETE 

    LIST Contract OBJECT c
;

DESIGN options {
    pane{
        NEW contract {
            caption = 'Договор';
        }
    }
}

contractSupplier= DATA LOCAL LegalEntity();
nameContractSupplier 'Поставщик' = name(contractSupplier()) CHARWIDTH 15;

contractCustomer= DATA LOCAL LegalEntity();
nameContractCustomer 'Покупатель' = name(contractCustomer()) CHARWIDTH 15;

FORM contractDialog 'Договоры'
    OBJECTS dt = DATE PANEL 
    PROPERTIES val = VALUE (dt)
    PROPERTIES nameContractSupplier(), nameContractCustomer() 
    
    OBJECTS c = Contract
    PROPERTIES(c) READONLY namePartyA, namePartyB, seriesNumber, dateFrom, dateTo, isDefault, nameCurrency, 
                           nameTypeExchange, descriptionPaymentCondition, note
    FILTERS partyA(c) == contractSupplier() OR c IS Contract AND NOT contractSupplier(),
            partyB(c) == contractCustomer() OR c IS Contract AND NOT contractCustomer()
    FILTERGROUP active 
        FILTER 'Активные' dateFrom(c) <= dt AND NOT dateTo(c) < dt 'F5' DEFAULT      
;
DESIGN contractDialog {
    BOX {
        size = (1024, 768);
        NEW top {
            type = CONTAINERH;
            caption = 'Шапка';
            MOVE PROPERTY (val) {caption = 'Дата';}
            MOVE PROPERTY(nameContractSupplier());
            MOVE PROPERTY(nameContractCustomer());
        }
        MOVE BOX(c);
        MOVE TOOLBARBOX;
    }
}

// ----------------- Объединение ------------------------

in 'Отм.' = DATA LOCAL BOOLEAN (Contract);
countInContract = GROUP SUM 1 IF in(Contract c);

FORM confirmReplaceContract 'Объединяемые договора'
    OBJECTS contract = Contract PANEL 

    OBJECTS c = Contract  
    PROPERTIES(c) READONLY seriesNumber, namePartyA, namePartyB
    FILTERS c==contract

    OBJECTS c2 = Contract
    PROPERTIES(c2) in
    PROPERTIES(c2) READONLY seriesNumber, namePartyA, namePartyB
    FILTERS in(c2)
;

DESIGN confirmReplaceContract {
    REMOVE BOX(contract);
    NEW splitContainer{
        type = SPLITV;
        fill = 1;
        MOVE BOX(c){
            caption = 'Основной договор';
        }
        MOVE BOX(c2){
            caption = 'Удаляемый договор';
        }           
    }
    MOVE TOOLBARBOX;
}

replace  ABSTRACT LIST ( Contract, Contract);
preReplace  ABSTRACT LIST ( Contract, Contract);

replace 'Объединить'(Contract contract)  { 
    setNoEventsInTransaction();
    DIALOG confirmReplaceContract OBJECTS contract = contract DO {
        FOR in(Contract c) AND contract IS Contract DO {
            IF c != contract THEN {
                IF partyA(c) == partyA(contract) AND partyB(c) == partyB(contract) THEN {
                    preReplace(c, contract);
                    replace(c, contract);
                    in(c) <- NULL;
                    DELETE c;
                } ELSE {
                    MESSAGE 'Выделенные договоры не могут быть объединены. Поставщик и покупатель должны быть одинаковыми';
                }
            }
        }
        apply();
    }
    
    in(Contract c) <- NULL;
               
    dropNoEventsInTransaction();
} CONFIRM;

EXTEND FORM contracts
    PROPERTIES(c) in BEFORE namePartyA(c), replace
;

DESIGN contracts {
   TOOLBARRIGHT (c) {
    MOVE PROPERTY (replace(c)) BEFORE TOOLBAR(c);
   }
}

META defineContractDefault (contract, prefixA, prefixB)
    isDataDefault 'По умолчанию' = DATA BOOLEAN (###contract);
    isDefault(###contract contract) += isDataDefault(contract);
    skipContract 'По умолчанию' = ABSTRACT BOOLEAN (###contract) MATERIALIZED;
    
    count###contract###prefixA###prefixB (pA, pB, DATE dateIn)= GROUP SUM 1 
        IF dateFrom(###contract contract) <= dateIn AND NOT dateTo(contract) < dateIn AND NOT skipContract(contract)
            BY prefixA(contract), prefixB(contract);

    single###contract###prefixA###prefixB (pA, pB, DATE dateIn) = GROUP MAX ###contract contract 
        IF dateFrom(contract) <= dateIn AND NOT dateTo(contract) < dateIn AND NOT skipContract(contract)
            BY prefixA(contract), prefixB(contract);

    default###contract###prefixA###prefixB (pA, pB, DATE dateIn) = GROUP MAX ###contract contract IF isDataDefault(contract) 
        AND dateFrom(contract) <= dateIn AND NOT dateTo(contract) < dateIn AND NOT skipContract(contract)
            BY prefixA(contract), prefixB(contract);
END

META defineDocumentAbstractContract (objectClass, contractType)
    @defineDocumentAbstractContract(objectClass, contractType, ###contractType);
END

META defineDocumentAbstractContract (objectClass, contractType, contractTypeClass)
    contractType = ABSTRACT contractTypeClass (objectClass) MATERIALIZED INDEXED;
    seriesNumber###contractType 'Номер договора' (objectClass o) = seriesNumber[Contract](contractType(o)) IN documentPrm;
    dateFrom###contractType 'Дата договора' (objectClass o) = dateFrom(contractType(o)) IN documentPrm;
    
    description###contractType 'Описание договора' (objectClass o)= CONCAT ' ', seriesNumber###contractType(o), ' от ' + toDateDDMMYYYY(dateFrom###contractType(o));

    isCommission 'Продажа на комиссию' = ABSTRACT BOOLEAN (objectClass) MATERIALIZED IN documentPrm;
END

META defineDocumentContract (objectClass, contractType, contractTypeClass, prefixA, prefixB, defaultContractProp, partyAMessage, partyBMessage, caption, NS)
    contractType = DATA contractTypeClass (objectClass);
    number###contractType 'Договор (номер)' (objectClass o) = number[Contract](contractType(o)) IN documentPrm;
    seriesNumber###contractType 'Договор (серия/номер)' (objectClass o) = seriesNumber[Contract](contractType(o)) IN documentPrm;
    dateFrom###contractType 'Дата договора' (objectClass o) = dateFrom(contractType(o)) IN documentPrm;

    description###contractType 'Описание договора' (objectClass o)= description(contractType(o));
    
    replace(contractTypeClass c, contractTypeClass o) + { contractType(objectClass object) <- o WHERE contractType(object) == c;}

    CONSTRAINT contractType(objectClass o) AND NOT prefixA(o) == partyA(contractType(o))
        CHECKED BY contractType[objectClass] MESSAGE partyAMessage;

    CONSTRAINT contractType(objectClass o) AND NOT prefixB(o) == partyB(contractType(o))
        CHECKED BY contractType[objectClass] MESSAGE partyBMessage;
    
    dateFromConstraintContract##objectClass 'Дата начала контроля сроков договора '##caption = DATA DATE () PREREAD;  
    
    EXTEND FORM options 
        PROPERTIES NS###dateFromConstraintContract##objectClass = dateFromConstraintContract##objectClass()    
    ;
        
    DESIGN options {
        contract {
            MOVE PROPERTY(NS###dateFromConstraintContract##objectClass);
        }
    }      
    skipCheckDateContract = ABSTRACT BOOLEAN (objectClass);
    CONSTRAINT contractType(objectClass o) AND NOT (dateFrom(contractType(o)) <= date(o) 
               AND NOT (dateTo(contractType(o)) < date(o))) AND NOT (dateFromConstraintContract##objectClass() > date(o))
               AND NOT skipCheckDateContract(o)
               CHECKED BY contractType[objectClass]
               MESSAGE 'Договор просрочен или еще не действует '##objectClass;
END

@extendFormEditable(contracts);