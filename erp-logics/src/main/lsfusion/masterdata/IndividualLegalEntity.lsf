MODULE IndividualLegalEntity;

REQUIRE System, Utils, LegalEntityDefault;

EXTEND CLASS LegalEntity: Contact;

EXTEND CLASS Ownership { individual 'Физическое лицо' }

overLoadDefaultOwnerships () + { 
    loadDefaultStaticOwnership('Физическое лицо', 'Ф.Л.', '112', Ownership.individual);
}

isIndividual 'Физ.лицо' (LegalEntity legalEntity) =  ownership(legalEntity) == Ownership.individual;

passportNumber 'Номер паспорта' = DATA BPSTRING[10] (LegalEntity);

// Уникальность
legalEntityPassportNumber =
    GROUP AGGR LegalEntity legalEntity WHERE legalEntity IS LegalEntity
        BY passportNumber(legalEntity);

WHEN LOCAL CHANGED(name[Contact](LegalEntity legalEntity)) AND isIndividual(legalEntity) DO {
    name(legalEntity) <- name[Contact](legalEntity);
}

WHEN LOCAL CHANGED(phone[Contact](LegalEntity legalEntity)) AND isIndividual(legalEntity) DO {
    dataPhone(legalEntity, DATE date) <- phone[Contact](legalEntity) WHERE date == currentDate();
}
WHEN LOCAL CHANGED(phone(LegalEntity legalEntity)) AND isIndividual(legalEntity) DO {
    phone[Contact](legalEntity) <- phone(legalEntity);
}

WHEN LOCAL CHANGED(postAddress[Contact](LegalEntity legalEntity)) AND isIndividual(legalEntity) DO {
    dataPostAddress(legalEntity, DATE date) <- postAddress[Contact](legalEntity) WHERE date == currentDate();
}

WHEN LOCAL CHANGED(postAddress[Contact](LegalEntity legalEntity)) AND isIndividual(legalEntity) DO {
    dataAddress(legalEntity, DATE date) <- postAddress[Contact](legalEntity) WHERE date == currentDate();
}

WHEN LOCAL GOAFTER dataAddress[LegalEntity,DATE] CHANGED(postAddress(LegalEntity legalEntity)) AND isIndividual(legalEntity) DO {
    postAddress[Contact](legalEntity) <- postAddress(legalEntity);
}

WHEN LOCAL GOAFTER dataAddress[LegalEntity,DATE] CHANGED(postAddress(LegalEntity legalEntity)) AND isIndividual(legalEntity) DO {
    postAddress[Contact](legalEntity) <- address(legalEntity);
}

WHEN LOCAL CHANGED(email[Contact](LegalEntity legalEntity)) AND isIndividual(legalEntity) DO {
    email(legalEntity) <- email[Contact](legalEntity);
}
WHEN LOCAL CHANGED(email(LegalEntity legalEntity)) AND isIndividual(legalEntity) DO {
    email[Contact](legalEntity) <- email(legalEntity);
}
toShowIndividual(LegalEntity legalEntity) += isIndividual(legalEntity);

requireFillingAttributesContact 'Требовать заполнения контактной информации для физических лиц' = DATA BOOLEAN ();

CONSTRAINT requireFillingAttributesContact() AND shortNameOwnership(LegalEntity l) == 'Ф.Л.' AND NOT passportNumber(l)
    MESSAGE 'Не заполнен номер паспорта';
    
CONSTRAINT requireFillingAttributesContact() AND shortNameOwnership(LegalEntity l) == 'Ф.Л.' AND NOT phone[Contact](l)
    MESSAGE 'Не заполнен номер телефона';
        
CONSTRAINT requireFillingAttributesContact() AND shortNameOwnership(LegalEntity l) == 'Ф.Л.' AND NOT name(l)
    MESSAGE 'Не заполнены ФИО';
            
CONSTRAINT requireFillingAttributesContact() AND shortNameOwnership(LegalEntity l) == 'Ф.Л.' AND NOT postAddress[Contact](l)
    MESSAGE 'Не заполнен почтовый адрес';   
             
EXTEND FORM options
    PROPERTIES requireFillingAttributesContact()              
;           

DESIGN options {
    legalEntity {
        MOVE PROPERTY(requireFillingAttributesContact());
    }
}

EXTEND FORM legalEntity

    PROPERTIES(l) SHOWIF toShowIndividual(l)  firstName, lastName, passportNumber, 
                         pc = phone[Contact], pac = postAddress[Contact], birthday, ec = email[Contact]
;

DESIGN legalEntity {
    GROUP(contact,l) {
        MOVE PROPERTY(pc);
        MOVE PROPERTY(pac);
        MOVE PROPERTY(ec);
    }
    column1 {
        NEW contact AFTER regionContainer{
            caption = 'Личные данные';
            horizontal = TRUE;
            MOVE PROPERTY(firstName(l));
            MOVE PROPERTY(lastName(l));
            MOVE PROPERTY(birthday(l));
            MOVE PROPERTY(passportNumber(l));
        }
    }
}

EXTEND FORM legalEntities
    PROPERTIES(l) READONLYIF isReadonly() firstName, lastName, passportNumber, 
                                          pc = phone[Contact], postAddress[Contact], birthday, ec = email[Contact] 
;

