MODULE PurchaseAutoOrder;

REQUIRE PurchaseDemand, PurchaseScheduleOrder, PriceListPromotion, Time, SaleLedgerDaysChange;

NAMESPACE Purchase;

@defineGroupDefaultValue(countSoldDays, 'Количество дней для расчета однодневных продаж', INTEGER, skuGroup);

@defineGroupDefaultValue(coeffPromotion, 'Акц. коэфф.', NUMERIC[14,3], skuGroup);
coeffPromotion 'Акц. коэфф.' (Sku s) = OVERRIDE coeffPromotion(skuGroup(s)), 1.0;

fromSoldDate (Sku s)= subtract(currentDate() ,countSoldDays(skuGroup(s)));      
toSoldDate (Sku s)= subtract(currentDate(), 1) IF s IS Sku ;   

TABLE promotionSkuStock (Sku, Stock);
promotionDetail = DATA PriceListDetail (Sku, Stock) TABLE promotionSkuStock INDEXED;
dateFromPromotion 'Дата начала акции' = DATA DATE (Sku, Stock) TABLE promotionSkuStock;
dateToPromotion 'Дата окончания акции' = DATA DATE (Sku, Stock) TABLE promotionSkuStock;
averageSoldPromotion 'Продаж в день за акцию' = DATA NUMERIC[14,3] (Sku, Stock) TABLE promotionSkuStock;   

//расчет данных по замененным товарам модуль ItemReplace
//overAverageSold (Sku sku, Stock stock) = ABSTRACT NUMERIC[14,3](Sku, Stock);
//overAverageSoldPromotion (Sku sku, Stock stock) = ABSTRACT NUMERIC[14,3](Sku, Stock);
overPrevCurrentBalance 'Остаток замен' (Sku sku, Stock stock) = ABSTRACT NUMERIC[16,5](Sku, Stock);
overPrevCurrentReserve 'Резерв замен' (Sku sku, Stock stock) = ABSTRACT NUMERIC[16,5](Sku, Stock);

regularPromotionDetail = DATA PriceListDetail (Sku, Stock) TABLE promotionSkuStock INDEXED;
dateFromRegular 'Дата начала продаж' = DATA DATE (Sku, Stock) TABLE promotionSkuStock;
dateToRegular 'Дата окончания продаж' = DATA DATE (Sku, Stock) TABLE promotionSkuStock;

quantityDaysPromotionCalc 'Кол-во дней' (Sku s, UserOrder o) = quantityDays((MIN dateToPromotion(s, customerStock(o)), nextShipmentDate(o)), (MAX date(o), dateFromPromotion(s, customerStock(o)))) IF dateToPromotion(s, customerStock(o)) >= date(o);

quantityDaysPromotion 'Кол-во дней' (Sku s, UserOrder o) = quantityDaysPromotionCalc(s,o) IF quantityDaysPromotionCalc(s,o) >0;

planPromotion 'Планируемые продажи' (Sku s, UserOrder o) = quantityDaysPromotion(s, o) * averageSoldPromotion(s, customerStock(o));
 
quantityDaysRegular 'Кол-во дней' (Sku s, UserOrder o) = (quantityDaysNextShipment(o) (-) quantityDaysPromotion(s, o));
planRegular 'Планируемые продажи' (Sku s, UserOrder o) = quantityDaysRegular(s, o) * averageSold(s, customerStock(o)); 

plan 'Планируемые продажи' (Sku s, UserOrder o) =
    planPromotion(s, o) (+) planRegular(s, o);

@defineGroupDefaultValue(seasonalityCoeff, 'Коэфф. сезонности (упр.)', NUMERIC[14,3], skuGroup);
overSeasonalityCoeff 'Коэфф. сезонности (упр.)' (SkuGroup g) = OVERRIDE seasonalityCoeff(g), 0.0 IF g IS SkuGroup;

coeffSeason 'Сезонный коэффициент (расч.)' = DATA NUMERIC[16,5] (SkuGroup);

coeffSeason 'Коэффициент сезонности' (Sku s) = 
    (1.0  IF s IS Sku) (+) (coeffSeason(skuGroup(s)) -1.0) * overSeasonalityCoeff(skuGroup(s)) MATERIALIZED;

@defineGroupDefaultValue(countSeason, 'Количество дней для расчета сезонного коэффициента продаж', INTEGER, skuGroup);

dispersionSold 'Дисперсия однодневных продаж' = DATA NUMERIC[14,3] (Sku, Stock);  

@defineGroupDefaultValue(safetyCoeff, 'Z-оценка (упр.)', NUMERIC[14,3], skuGroup);

zScore 'Z-оценка' (Sku sk) = safetyCoeff(skuGroup(sk));

@defineGroupDefaultValue(countAfterPromotion, 'Минимальное количество дней после акции', INTEGER, skuGroup);


//расчет значений
lastYearCurrent = DATE(sumYear(currentDate(),-1));
skipCoeffSeason = ABSTRACT BOOLEAN (Stock);

fromSold = DATA LOCAL DATE ();
toSold = DATA LOCAL DATE ();

sumSoldAuto 'Продано за интервал (сумма)' (Sku sku, Stock stock, DATE dateFrom, DATE dateTo) = GROUP
        SUM
        sumSold(sku, stock, DATE date) (+) extraSumSold(sku, stock, date) IF date >= dateFrom AND date <= dateTo AND date >= fromSold() AND  date <= toSold();

calcQuantitySoldInterval 'Рассчитать однодневные продажи'()  {
    IF useDaysChange() THEN
        averageSold(Sku sku, Stock stock) <- averageSoldOnStock(sku, stock, fromSoldDate(sku), toSoldDate(sku));
    ELSE 
        averageSold(Sku sku, Stock stock) <- NUMERIC[14,3](quantitySold (sku, stock, fromSoldDate(sku), toSoldDate(sku)) / countSoldDays(skuGroup(sku)));
    APPLY;

    fromSold() <- GROUP MIN subtract(lastYearCurrent(), countSeason(SkuGroup s));
    toSold() <- GROUP MAX sum(lastYearCurrent(), countSeason(SkuGroup s)-1);
    
    coeffSeason(SkuGroup sk) <- max (min([X/Y]([GROUP SUM sumSoldAuto(Sku s, Stock st, lastYearCurrent(), sum(lastYearCurrent(), countSeason(skuGroup(s))-1)) IF isCompany(st) AND NOT skipCoeffSeason(st) BY skuGroup(s)](sk), 
                                         [GROUP SUM sumSoldAuto(Sku s, Stock st, subtract(lastYearCurrent(), countSeason(skuGroup(s))), subtract(lastYearCurrent(),1)) IF isCompany(st) AND NOT skipCoeffSeason(st) BY skuGroup(s)](sk)), 5), 0.2); 
                                             
    APPLY;
    
    dispersionSold(Sku sku, Stock stock) <- sqrt((GROUP SUM sqr((OVERRIDE quantitySold(sku, stock, DATE date) (+) extraQuantitySold(sku, stock, date), 0.0 IF sku IS Sku AND stock IS Stock AND date IS DATE) -  averageSold(sku, stock)) 
                                                            IF iterate(date, fromSoldDate(sku), toSoldDate(sku))) / countSoldDays(skuGroup(sku)));
    APPLY;   
}


overCalcQuantityPromotionSoldIntervalNew  ABSTRACT LIST(); 

calcQuantityPromotionSoldIntervalNew 'Рассчитать однодневные продажи (акции)' ()  { 
    LOCAL NESTED in = BOOLEAN (Stock);
    in(Stock st) <- isCompany(st) AND active(st);

    // логика не поддерживает ситуацию, когда есть наложение акций, и более поздняя заканчивается раньше 
    promotionDetail(Sku s, Stock st) <- NULL WHERE in(st);
    promotionDetail(Sku s, Stock st) <- lastPromotionPriceListDetail(s, st) WHERE toDate(lastPromotionPriceListDetail(s, st), st) >= subtract(currentDate(), countSoldDays(skuGroup(s))) AND in(st);

    dateFromPromotion(Sku s, Stock st) <- NULL WHERE in(st);
    dateFromPromotion(Sku s, Stock st) <- fromDate(promotionDetail(s, st)) WHERE promotionDetail(s, st) AND in(st);   

    dateToPromotion(Sku s, Stock st) <- NULL WHERE in(st);
    dateToPromotion(Sku s, Stock st) <- toDate(promotionDetail(s, st)) WHERE promotionDetail(s, st) AND in(st);   

    APPLY;
      
    regularPromotionDetail(Sku s, Stock st) <- NULL WHERE in(st);
    regularPromotionDetail(Sku s, Stock st) <- lastRegularPromotionDetail(s, st) WHERE dateFromPromotion(s, st) AND toDate(lastPromotionPriceListDetail(s, st), st) >= subtract(currentDate(), countSoldDays(skuGroup(s))) AND in(st);

    overCalcQuantityPromotionSoldIntervalNew();   

    dateToRegular(Sku s, Stock st) <- NULL WHERE in(st);
    dateToRegular(Sku s, Stock st) <- IF dateToPromotion(s, st) < subtract(currentDate(),(OVERRIDE countAfterPromotion(skuGroup(s)),1)) THEN subtract(currentDate(), 1) ELSE (MIN subtract(currentDate(), 1), subtract(fromDate(regularPromotionDetail(s, st), st), 1)) WHERE regularPromotionDetail(s, st) AND in(st);
    
    dateFromRegular(Sku s, Stock st) <- NULL WHERE in(st);
    dateFromRegular(Sku s, Stock st) <- IF dateToPromotion(s, st) < subtract(currentDate(), (OVERRIDE countAfterPromotion(skuGroup(s)),1)) THEN sum(dateToPromotion(s, st), 1) ELSE (MAX sum(prevToDatePromotion(regularPromotionDetail(s, st), st), 1), subtract(dateToRegular(s, st), countSoldDays(skuGroup(s)))) WHERE regularPromotionDetail(s, st) AND in(st);
    
    APPLY;
    
    averageSold(Sku sku, Stock stock) <- NUMERIC[14,3](averageSold (sku, stock, dateFromRegular(sku, stock), dateToRegular(sku, stock))) 
                                                                WHERE dateToRegular(sku, stock) AND in(stock);

    averageSoldPromotion(Sku sku, Stock stock) <- NULL WHERE in(stock);
    averageSoldPromotion(Sku sku, Stock stock) <- NUMERIC[14,3](averageSold (sku, stock, dateFromPromotion(sku, stock), MIN dateToPromotion(sku, stock), subtract(currentDate(), 1)))  WHERE dateFromPromotion(sku, stock) < currentDate() AND in(stock);
    averageSoldPromotion(Sku sku, Stock stock) <- NUMERIC[14,3](averageSold (sku, stock) * coeffPromotion(sku))
                                                        WHERE dateFromPromotion(sku, stock) >= currentDate() AND in(stock);
    APPLY;

    dispersionSold(Sku sku, Stock stock) <- sqrt((GROUP SUM NUMERIC[20,6](sqr((OVERRIDE quantitySold(sku, stock, DATE date) (+) extraQuantitySold(sku, stock, date), 0.0 IF sku IS Sku AND stock IS Stock AND date IS DATE) -  averageSold(sku, stock))) 
                                                            IF iterate(date, dateFromRegular(sku, stock), dateToRegular(sku, stock))) / daysBetweenDates(dateToRegular(sku, stock), dateFromRegular(sku, stock))) 
                                                            WHERE dateFromPromotion(sku, stock) AND in(stock);
    APPLY;
}

FORM soldParams 'Параметры автозаказа'

    TREE skuTree sk = SkuGroup PARENT parent(sk)
    PROPERTIES READONLY order(sk), skuTreeName = name(sk)
    ORDERS order(sk), skuTreeName
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F6' DEFAULT    
    PROPERTIES(sk) countSoldDays, countSeason, overSeasonalityCoeff, safetyCoeff, coeffPromotion, countAfterPromotion
;

DESIGN soldParams {
    PROPERTY(safetyCoeff(sk)) {
        toolTip = 'Коэффициент, который определяет величину страхового запаса с необходимой вероятностью доступности товара (99% : 2.575, 95% : 1.950, 90% : 1.645, 70% : 1.035, 50% : 0.675)';
    }
}

NAVIGATOR {
    purchasePurchaseNavigator {
        NEW soldParams;        
    }
}

EXTEND FORM userOrder
    PROPERTIES READONLY PANEL DRAW sts averageSold(ks,st), quantityDaysRegular(ks, o), planRegular(ks,o), 
                                       insuranceReserve(ks,o), purchaseReserve(ks,o), extraReserve(ks,o) SHOWIF extraReserve(ks,o),
                                       dispersionSold(ks,st), zScore(ks), coeffSeason(ks)
    PROPERTIES READONLY PANEL SHOWIF dateFromPromotion(ks, st) dateFromPromotion(ks, st), dateToPromotion(ks, st), coeffPromotion(ks), 
                                     averageSoldPromotion(ks, st), quantityDaysPromotion(ks, o), planPromotion(ks, o) 
;
DESIGN userOrder {
    PANEL(sts) {
        caption = 'Кол-во к заказу';
        horizontal = TRUE;
        NEW sales {
            caption = 'Продажи';
            MOVE PROPERTY (averageSold(ks, st));
            MOVE PROPERTY (quantityDaysRegular(ks, o));
            MOVE PROPERTY (planRegular(ks, o));
        }
        NEW insurance {
            caption = 'Расчетный запас';
            MOVE PROPERTY (dispersionSold(ks, st));
            MOVE PROPERTY (zScore(ks));
            MOVE PROPERTY (coeffSeason(ks));            
        }
        NEW buffer {
            caption = 'Буферы';
            MOVE PROPERTY (insuranceReserve(ks, o));
            MOVE PROPERTY (purchaseReserve(ks, o));
            MOVE PROPERTY (extraReserve(ks,o));
        }
        NEW promotion {
            caption = 'Акции';
            lines = 2;
            MOVE PROPERTY (dateFromPromotion(ks, st));
            MOVE PROPERTY (dateToPromotion(ks, st));
            MOVE PROPERTY (coeffPromotion(ks));
            MOVE PROPERTY (averageSoldPromotion(ks, st));
            MOVE PROPERTY (quantityDaysPromotion(ks, o));
            MOVE PROPERTY (planPromotion(ks, o));
        }
    }
}

createUserOrderAuto 'Автозаказ'  = DATA BOOLEAN (ScheduleOrder) IN documentPrm;
createUserOrderAuto 'Автозаказ' (ScheduleOrderDetail d) = createUserOrderAuto(scheduleOrder(d)); 

EXTEND FORM scheduleOrder
    PROPERTIES(s) createUserOrderAuto   
;
DESIGN scheduleOrder {
    BOX {
        MOVE GROUP(documentPrm,s) AFTER header { 
            horizontal = TRUE;
        }    
    }   

}

EXTEND FORM scheduleOrderDashboard
    PROPERTIES(ss) READONLYIF isReadonly() createUserOrderAuto
;

EXTEND FORM scheduleOrderDetails
    PROPERTIES(sd) READONLY createUserOrderAuto
;

isAuto 'Автозаказ' = ABSTRACT BOOLEAN (Order);
isAuto 'Автозаказ' = DATA BOOLEAN (UserOrder);
isAuto[Order](UserOrder o) += isAuto(o);

EXTEND FORM orders
    PROPERTIES READONLY isAuto(o)
    FILTERGROUP auto
        FILTER 'Автозаказ' isAuto(o) 'F7'     
;

skipDefaultAuto = ABSTRACT BOOLEAN (Order);
backgroundSku(Order o) += WHEN isAuto(o) AND NOT skipDefaultAuto(o) THEN RGB(140,225,255); 

autoOrderNumerator 'Нумератор для автозаказа' = DATA Numerator ();
nameAutoOrderNumerator 'Нумератор для автозаказа' () = name(autoOrderNumerator());

EXTEND FORM options PROPERTIES() nameAutoOrderNumerator;
DESIGN options { orders { MOVE PROPERTY(nameAutoOrderNumerator()); } }

autoQuantity 'Кол-во (автозаказ)' = ABSTRACT NUMERIC[16,5] (OrderDetail) MATERIALIZED;
autoQuantity 'Кол-во (автозаказ)' = DATA NUMERIC[16,5] (UserOrderDetail);

autoQuantity (UserOrderDetail orderDetail) += autoQuantity(orderDetail);
EXTEND FORM userOrder
    PROPERTIES (d) READONLY SHOWIF isAuto(o) autoQuantity BEFORE quantity(d) 
;
EXTEND FORM orders
    PROPERTIES (d) READONLY SHOWIF isAuto(o) autoQuantity BEFORE quantity(d) 
;

banDroppedAutoDetail 'Запрещено удалять строки автозаказа' = DATA BOOLEAN ();
banQuantityAutoDetail 'Запрещено заказывать меньше чем "Кол-во (автозаказ)"' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES () banDroppedAutoDetail, banQuantityAutoDetail
;
DESIGN options { 
    orders  { 
        MOVE PROPERTY(banDroppedAutoDetail()); 
        MOVE PROPERTY(banQuantityAutoDetail()); 
    } 
}

skipBanDropAutoDetail = ABSTRACT VALUE BOOLEAN (UserOrderDetail);
CONSTRAINT DROPPED (UserOrderDetail d IS UserOrderDetail) AND banDroppedAutoDetail() AND isAuto(PREV(userOrder(d))) AND PREV(autoQuantity(d)) AND NOT skipBanDropAutoDetail(d) MESSAGE 'Запрещено удалять строки автозаказа';

CONSTRAINT autoQuantity(UserOrderDetail d) AND banQuantityAutoDetail() AND isAuto(userOrder(d)) AND NOT (quantity(d) >= autoQuantity(d))
    MESSAGE 'Запрещено заказывать меньше чем "Кол-во (автозаказ)"';

overCreateAuto ABSTRACT LIST (UserOrder);

useCreateAutoAfter = ABSTRACT BOOLEAN (UserOrder);
createAutoAfter  ABSTRACT LIST (UserOrder);

createAutoOrdersExtra ABSTRACT LIST ();

toCreate = DATA LOCAL NESTED BOOLEAN (ScheduleOrderDetail);

//-- где дата заказа больше даты окончания графика
closeScheduleOrderDetailsEndDate 'Аннулировать точки заказов'()  { 
    NEWSESSION {
        isClosed(Purchase.ScheduleOrderDetail d) <- TRUE WHERE dateOrder(d)>= currentDate() AND endDate(scheduleOrder(d)) < dateOrder(d);
        APPLY;
    }    
}
skipAutoClosed = ABSTRACT BOOLEAN ();
autoClosed ABSTRACT LIST(ScheduleOrderDetail);
createAutoOrdersBefore ABSTRACT LIST();
createExtraLog  ABSTRACT (ScheduleOrderDetail);
createAutoOrders 'Создание автозаказов' () {    
    toCreate(ScheduleOrderDetail d)<- NULL;
    toCreate(ScheduleOrderDetail d) <- TRUE WHERE dateOrder(d) == currentDate() AND createUserOrderAuto(scheduleOrder(d)) 
            AND active(customerStock(d)) AND NOT isClosed(d) AND NOT (GROUP SUM 1 IF scheduleOrderDetail(Order o) == d AND isOpened(o)) 
            AND NOT dateOrder(d)>endDate(scheduleOrder(d));
    createAutoOrdersBefore();
    
    FOR toCreate(ScheduleOrderDetail scheduleOrderDetail) DO {                 
        NEWSESSION {
            printToLog(CONCAT ' ', 'Автозаказ:', currentDate(), nameSupplierStock(scheduleOrderDetail), nameCustomerStock(scheduleOrderDetail));
            IF NOT skipAutoClosed() THEN {
                isClosed(UserOrder o) <- TRUE WHERE supplierStock(o) == supplierStock(scheduleOrderDetail) AND customerStock(o) == customerStock(scheduleOrderDetail) AND shipmentDate(o) < currentDate();
            } ELSE {
                autoClosed(scheduleOrderDetail);
            }
            APPLY;

            NEW o = UserOrder {
                scheduleOrderDetail(o) <- scheduleOrderDetail;
                numerator(o) <- OVERRIDE autoOrderNumerator(), defaultNumeratorUserOrder();
                date(o) <- currentDate();
                time(o) <- currentTime();
                shipmentDate(o) <- dateSupply(scheduleOrderDetail);
                shipmentTime(o) <- currentTime();
                nextShipmentDate(o) <- dateSupplyNext(scheduleOrderDetail);
                supplier(o) <- supplier(scheduleOrderDetail);
                customer(o) <- customer(scheduleOrderDetail);
                supplierStock(o) <- supplierStock(scheduleOrderDetail);
                customerStock(o) <- customerStock(scheduleOrderDetail);
                isAuto(o) <- TRUE;
    
                IF operation(scheduleOrderDetail) THEN {
                    operation(o) <- operation(scheduleOrderDetail);
                }                        
                IF defaultPriceListType(operation(o)) THEN
                    priceListType(o) <- defaultPriceListType(operation(o)); 
    
                isRecommended(o) <- TRUE;
                overCreate(o);
                overCreateDetail(o);
                
                printToLog(CONCAT ' ', 'Автозаказ:', currentDate(), nameSupplierStock(scheduleOrderDetail), nameCustomerStock(scheduleOrderDetail), 'количество строк - ' + STRING[10]([GROUP SUM 1 BY order(Purchase.OrderDetail d)](o)));
                
                priceListType(UserOrderDetail d) <-  OVERRIDE priceListType(agreement(userOrder(d)), sku(d)), priceListType(userOrder(d)) WHERE userOrder(d) == o;
                VAT(UserOrderDetail d) <- overVAT(d) WHERE userOrder(d) == o;
                valueVAT (UserOrderDetail d) <- calcValueVAT(d) WHERE userOrder(d) == o; // заполняем НДС, чтобы в момент расчета prevListPVAT он там уже был
                FOR PriceListType pt == priceListType(UserOrderDetail d) AND sku(d) AND userOrder(d) == o NOINLINE (pt) DO {
                    price(d) <- NUMERIC[16,4](prevListMVAT (pt, d));
                    invoicePrice(d) <- NUMERIC[16,4](prevListPVAT (pt, d));
                }
                overCreateAuto(o);
                
                IF NOT useCreateAutoAfter(o) THEN {                                      
                    DELETE o WHERE NOT countUserOrderDetail(o);                     
                    IF countUserOrderDetail(o) THEN {
                        generateNumber(o); 
                        APPLY;
                        IF canceled() THEN {
                            printToLog(CONCAT ' ', 'Автозаказ. ERROR:', currentDate(), nameSupplierStock(scheduleOrderDetail), nameCustomerStock(scheduleOrderDetail), applyMessage());
                            createExtraLog(scheduleOrderDetail); 
                        }                
                    }
                } ELSE {
                    createAutoAfter(o);
                }
            }
        }
    }
    createAutoOrdersExtra();
    toCreate(ScheduleOrderDetail d)<- NULL;
}

EXTEND FORM options
    PROPERTIES () createAutoOrders
;

DESIGN options {
    purchase{
        MOVE PROPERTY (createAutoOrders());
    }
}