MODULE PurchaseOrder;

REQUIRE Order, PurchaseOperation, PurchasePack, PriceListLedger, PurchaseLedger;

NAMESPACE Purchase;

@defineOrder(' (закупка)', customer, customer, supplier, company, company, , Purchase, p);
@extendFormFilterAccessStock(Order, o, orders, customerStock, company);

externalStock (Order o) += supplierStock(o);

in(Order o) += o IS Order;

@defineOrderBatch(customer, customer, p);

usePriceShipmentDateTime 'Использовать дату/время поставки при определении цены поставщика' = DATA BOOLEAN () COMPLEX;
EXTEND FORM options
    PROPERTIES() usePriceShipmentDateTime
;
DESIGN options {
    orders {
        MOVE PROPERTY(usePriceShipmentDateTime());
    }
}

priceDateTime(UserOrder d) += WHEN usePriceShipmentDateTime() AND d IS UserOrder THEN shipmentDateTime(d);

prevList (LedgerPriceListType priceListType, UserOrderDetail userOrderDetail) += WHEN sku(userOrderDetail) AND differentOrganizations(priceListType) AND NOT overPriceStockUser(userOrder(userOrderDetail)) THEN  
                                                     prevPriceA(priceListType,
                                                                sku(userOrderDetail),
                                                                priceStock(userOrderDetail),
                                                                supplier(userOrderDetail),
                                                                priceDateTime(userOrderDetail));

@defineOrderBatchDialog();

@implementOrderDestination(supplier, customer);

//использовать цены склада поставщика
usePriceSupplierStock 'Использовать цены для склада поставщика' = ABSTRACT BOOLEAN (Order);
usePriceSupplierStock 'Использовать цены для склада поставщика'  = DATA BOOLEAN (UserOrder);

usePriceSupplierStock(UserOrder order) += usePriceSupplierStock(order);

EXTEND FORM userOrder
    PROPERTIES (o) usePriceSupplierStock         
;          

DESIGN userOrder {
    headerExtraParams{
        NEW prices {
            caption = 'Цены';
            type = COLUMNS;
            columns = 1;
            MOVE PROPERTY(usePriceSupplierStock(o));
        }         
    }
}

overPriceStockUser(UserOrder o) += WHEN usePriceSupplierStock(o) THEN supplierStock(o); 

EXTEND FORM userOrder
    PROPERTIES READONLY DRAW sts AFTER prevCurrentBalance(ks, st) prevCurrentBalance(ks, sst)
                           
    FILTERS sst == supplierStock(o), 
            legalEntity(sst) == supplier(o),
            isCompany(sst),
            active(sst)     
;

DESIGN userOrder {
    PROPERTY(prevCurrentBalance(ks, sst)){
        caption = 'Текущий остаток (поставщик)';
        background = RGB(240, 240, 224);
    }
}

//----------------------------------------------- Операции -----------------------------------------------------//

@defineDocumentOperationContainer(order, o);
@deriveDocumentDetailPricePriceListTypeVATBatchCustomOperation (userOrderDetail);
@extendFormFilterRoleAccess(order, o, orders);
@defineDocumentOperationConstraint(order, 'заказ (закупка)', Purchase);
operation[Order.Order](Order order) += operation(order);
@defineDocumentOperationPriceListType(userOrder, 'заказа (закупка)', userOrder);

@defineDocumentOperationLegalEntity(userOrder, supplier, 'Поставщик');
@deriveDocumentOperationLegalEntity(userOrder, supplier, userOrder);
@defineDocumentOperationLegalEntity(userOrder, customer, 'Покупатель');
@deriveDocumentOperationLegalEntity(userOrder, customer, userOrder);
@defineDocumentOperationStock(userOrder, supplier, 'Склад поставщика');
@deriveDocumentOperationStock(userOrder, supplier, userOrder);
@defineDocumentOperationStock(userOrder, customer, 'Склад покупателя');
@deriveDocumentOperationStock(userOrder, customer, userOrder);


@defineDocumentOperationRoleOver(userOrder, purchase);

overCopy(Order s, UserOrder d) + { 
    operation(d) <- operation(s);
}

@defineOperationFilterProperty(order, o, orders, nameFilterOrderCustomUser);

@defineOperationProperty(usePriceSupplierStock, 'Использовать цены для склада поставщика', paramsContainer);
@deriveDocumentOperationProperty(userOrder, usePriceSupplierStock);

@deriveShipmentDate();
       
//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplier(UserOrder userOrder) AND NOT isSupplier(supplier(userOrder))
    CHECKED BY supplier[UserOrder] MESSAGE 'Для заказа выбрано в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT customer(UserOrder userOrder) AND NOT isCompany(customer(userOrder))
    CHECKED BY customer[UserOrder] MESSAGE 'Для заказа выбрано в качестве покупателя организация, не являющаяся компанией';
    
CONSTRAINT filterOrderSupplier() AND NOT isSupplier(filterOrderSupplier())
    CHECKED BY filterOrderSupplier[] MESSAGE 'Для фильтра в заказе выбрана в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT filterOrderCustomer() AND NOT isCompany(filterOrderCustomer())
    CHECKED BY filterOrderCustomer[] MESSAGE 'Для фильтра в заказе выбрана в качестве покупателя организация, не являющаяся компанией';  
CONSTRAINT filterOrderCustomerStock() AND NOT isCompany(filterOrderCustomerStock())
    CHECKED BY filterOrderCustomerStock[] MESSAGE 'Для фильтра в заказе выбрана в качестве склада покупателя склад, который не принадлежит компании';      
        
CONSTRAINT filterOrderSupplier() AND filterOrderSupplierStock() AND NOT in(filterOrderSupplier(), filterOrderSupplierStock())
    CHECKED BY filterOrderSupplierStock[]   MESSAGE 'Поставщик и склад поставщика в фильтре для заказа не имеют связи';
CONSTRAINT filterOrderCustomer() AND filterOrderCustomerStock() AND NOT in(filterOrderCustomer(), filterOrderCustomerStock())
    CHECKED BY filterOrderCustomerStock[] MESSAGE 'Покупатель и склад покупателя в фильтре для заказа не имеют связи';            

//------------------------------ Автоматическое проставление свойств -----------------------------//

@deriveDocumentLegalEntityDefaultStock(UserOrder, supplier, userOrder);

@defineDocumentLegalEntityStockAccess(UserOrder, customer, company, userOrder);

//------------------------------ Ввод в упаковках -----------------------------//

@defineDocumentPack(order, o);
DESIGN userOrder {
    PROPERTY(packQuantity(d)) { background = #FFBC02; }
}
DESIGN orders {
    PROPERTY(packQuantity(d)) { background = #FFBC02; }
}

packQuantity[Order.OrderDetail](OrderDetail detail) += packQuantity(detail);
DESIGN userOrder {
    headerExtraParams {
        NEW headerPack {
            caption = 'Упаковка';
            MOVE PROPERTY(showPack(o));
        }
    }
}

@defineDocumentPackSkuStock(userOrder, sku, customer);
@extendFormDocumentPackSkuStock(userOrder, userOrder, o, customer);

overChangeQuantityValueSku(UserOrderDetail detail) + { 
    IF packBarcode(detail) AND NOT skipChangePackQuantity(detail) THEN {
        packQuantity(detail) <- quantity(detail)/amountPack(detail);
    }
}

overChangeQuantityValueBatch(UserOrderDetail detail) + { 
    IF (packBarcode(sku(batch(detail))) OR packBarcode(detail))  THEN {
        packQuantity(detail) <- quantity(detail)/amountPack(detail);
    }
}

@deriveDocumentOperationProperty(UserOrder, showPack);

//------------------------------ Расширение формы -----------------------------//

// Фильтры
inAssortment (Sku sku, Stock stock, UserOrder userOrder) =
    companyA(ledgerPriceListType(priceListType(userOrder, sku)),
                                                sku, stock, dateTime(userOrder)) == supplier(userOrder);

EXTEND FORM userOrder

    FILTERGROUP filter
        FILTER 'В заказе' quantityCustomer(ks, o, st) 'F9'
        FILTER 'С остатком' prevCurrentBalance(ks, st) OR isCharge(ks) 'F10'
        
    FILTERGROUP filter1
        FILTER 'С поступлением' countPurchaseSupplier(supplier(o), ks) 'F8' 
        FILTER 'С поступлением со склада' quantityPurchaseSupplier (supplierStock(o), ks) 'shift F8'                                                                                             
                                                                                             
;

EXTEND FORM userOrder

    FILTERGROUP filter4
        FILTER 'С остатком ' prevCurrentBalance(b, sto) 'F10' DEFAULT
        FILTER 'В документе ' quantityCustomer(b, o, sto) 'F9'
        
    FILTERGROUP filter5
        FILTER 'С поступлением ' countPurchaseSupplier(supplier(o), sku(b)) 'F8'
        FILTER 'В прайсе ' companyA(priceListType(o, b), b, customerStock(o), dateTime(o)) == supplier(o) 'F7'
;

// Резервы
@extendFormDocumentSkuStockOrderLedger(order, userOrder, o, customerStock);
@extendFormDocumentSkuStockOrderLedgerAll(userOrder, userOrder, o);

@extendFormDocumentBatchStockOrderLedger(userOrder, userOrder, o);
@extendFormDocumentBatchStockOrderLedgerAll(userOrder, userOrder, o);

EXTEND FORM userOrder
    PROPERTIES READONLY DRAW sts AFTER prevCurrentBalance(ks, sst)
            prevAvailableQuantity(ks, sst, o)
                           
    FILTERS sst == supplierStock(o), 
            legalEntity(sst) == supplier(o),
            isCompany(sst),
            active(sst)     
;

DESIGN userOrder {
    PROPERTY(prevAvailableQuantity(ks, sst, o)){
        caption = 'Доступное кол-во (поставщик)';
        background = RGB(240, 240, 224);
    }
}

//--------------------- Проводим по регистру резерва ------------------//
quantityCustomCalc = ABSTRACT NUMERIC[16,5](OrderDetail);
EXTEND CLASS OrderDetail : OrderLedger;
dateTime (OrderDetail ledger) += shipmentDateTime(ledger);
overIsPosted = ABSTRACT VALUE BOOLEAN (OrderDetail);
isPosted (OrderDetail ledger) += isPosted(ledger) OR overIsPosted(ledger);
isClosed (OrderDetail ledger) += isClosed(ledger);
sku[OrderLedger] (OrderDetail ledger) += sku(ledger);
batch[OrderLedger] (OrderDetail ledger) += batch(ledger);
stock (OrderDetail ledger) += customerStock(ledger);
description (OrderDetail ledger) += description(ledger);
quantity[OrderLedger] (OrderDetail ledger) += OVERRIDE quantityCustomCalc(ledger), quantity(ledger);
isPurchase (OrderDetail ledger) += ledger IS OrderDetail;
contact (OrderDetail ledger) += supplier(ledger);
contactStock (OrderDetail ledger) += supplierStock(ledger);

operation[OrderLedger](OrderDetail ledger) += operation(ledger);
show[OrderLedger](OrderDetail ledger) + { show[UserOrderDetail](ledger);};

note[OrderLedger](OrderDetail ledger) += note(order(ledger));

//-- Запрет на изменение документа другим пользователем
@defineOperationChangesDocument(order, UserOrder, preventChangesDocument, created);
//skipToShowEdit = ABSTRACT BOOLEAN (Order);
//skipToShowDelete = ABSTRACT BOOLEAN (Order);
//overShowEdit (Order i) += showEditDeleteUser(i) AND isOpened(i) AND NOT skipToShowEdit(i);
//overShowDelete (UserOrder i) += showEditDeleteUser(i) AND isUserOpened(i) AND NOT skipToShowDelete(i); 
overShowEdit (Order i) += showEditDeleteUser(i) AND isOpened(i) AND NOT skipShowEdit(i);
overShowDelete (UserOrder i) += showEditDeleteUser(i) AND isUserOpened(i) AND NOT skipShowEdit(i); 

skipClose (UserOrder i) += WHEN preventCloseDocument(currentUser(), operation(i)) THEN TRUE;
skipOpen (UserOrder i) += IF preventOpenDocument(currentUser(), operation(i)) THEN TRUE;

NAVIGATOR {
    purchasePurchaseNavigator {
        NEW orders;
    }
}

CONSTRAINT  isPosted(UserOrder i) AND isContract(operation(i)) AND NOT contractSku[Order](i) 
    MESSAGE 'Для заказа (закупка) обязан быть задан договор';   
    
skipSalePrice = ABSTRACT BOOLEAN (UserOrderDetail);    
CONSTRAINT  isPosted(UserOrderDetail d) AND isPrice(operation(d)) AND NOT price(d) AND NOT skipSalePrice(d) 
    MESSAGE 'Для строки заказа (закупка) должна быть задана цена';

skipBanPurchaseSku = ABSTRACT VALUE BOOLEAN (Order);

EXTEND FORM userOrder
    FILTERS NOT banPurchase(ks) OR skipBanPurchaseSku(o);
    
CONSTRAINT (SET(isPosted(OrderDetail d)) OR SETCHANGED(sku(d))) AND isPosted(d) AND banPurchase(sku(d)) AND NOT skipBanPurchaseSku(order(d))
        MESSAGE 'В заказ включены товары запрещенные к закупке';

CONSTRAINT (SET(isPosted(Order o)) OR SETCHANGED(supplier(o))) AND isPosted(o) AND banPurchase(supplier(o))
    MESSAGE 'Ассортимент поставщика запрещен к закупке';