MODULE PurchaseDemandLog;

REQUIRE PurchaseDemand;

NAMESPACE Purchase;

CLASS PurchaseDemandLog 'Лог автозаказа';
TABLE purchaseDemandLog(PurchaseDemandLog);

dateTime 'Дата/время' = DATA DATETIME (PurchaseDemandLog);
date 'Дата' (PurchaseDemandLog l) = toDate(dateTime(l)) MATERIALIZED INDEXED;
userOrder 'Заказ' = DATA UserOrder (PurchaseDemandLog) INDEXED;
seriesNumberUserOrder 'Номер заказа' (PurchaseDemandLog l) = seriesNumber(userOrder(l));
supplier 'Поставщик' = DATA LegalEntity (PurchaseDemandLog);
nameSupplier 'Поставщик' (PurchaseDemandLog l) = name(supplier(l));
customerStock 'Склад покупателя' = DATA Stock (PurchaseDemandLog);
nameCustomerStock 'Склад покупателя' (PurchaseDemandLog l) = name(customerStock(l));
sku 'Товар' = DATA Sku (PurchaseDemandLog);
idBarcodeSku 'Штрихкод' (PurchaseDemandLog l) = idBarcode(sku(l));
nameSku 'Товар' (PurchaseDemandLog l) = name(sku(l));
quantitySold 'Продано за последний период' = DATA NUMERIC[16,5] (PurchaseDemandLog) CHARWIDTH 7;
purchaseReserve 'Страховой запас (ручн)' = DATA NUMERIC[16,5] (PurchaseDemandLog) CHARWIDTH 7;
insuranceReserve 'Страховой запас (авто)' = DATA NUMERIC[16,5] (PurchaseDemandLog) CHARWIDTH 7;
recommendedQuantity 'Рекомендуемое кол-во' = DATA NUMERIC[16,5] (PurchaseDemandLog) CHARWIDTH 7;
currentBalance 'Текущий остаток' = DATA NUMERIC[16,5] (PurchaseDemandLog) CHARWIDTH 7;
currentReservePurchase 'Резерв закупка (всего)' = DATA NUMERIC[16,5] (PurchaseDemandLog) CHARWIDTH 7;
currentReserveSale 'Резерв продажа (всего)' = DATA NUMERIC[16,5] (PurchaseDemandLog) CHARWIDTH 7;

@defineLog (PurchaseDemandLog, 'автозаказа', log, date);

filterDemandLogDateFrom 'Дата с' = DATA LOCAL DATE ();
filterDateFrom(PurchaseDemandLog i) = date(i) >= filterDemandLogDateFrom() OR (i IS PurchaseDemandLog AND NOT filterDemandLogDateFrom());      

filterDemandLogDateTo 'Дата по' = DATA LOCAL DATE ();
filterDateTo(PurchaseDemandLog i) = date(i) <= filterDemandLogDateTo() OR (i IS PurchaseDemandLog AND NOT filterDemandLogDateTo());      

filterDemandLogSupplier = DATA LOCAL LegalEntity ();
nameFilterDemandLogSupplier 'Поставщик' = name(filterDemandLogSupplier()) CHARWIDTH 30;
filterSupplier(PurchaseDemandLog d) = supplier(d) == filterDemandLogSupplier() OR (d IS PurchaseDemandLog AND NOT filterDemandLogSupplier());

changeFilterSupplier()  { 
    DIALOG supplierLegalEntities OBJECTS l = filterDemandLogSupplier() CHANGE;
} 

filterDemandLogCustomerStock = DATA LOCAL Stock();
nameFilterDemandLogCustomerStock 'Склад покупателя' = name(filterDemandLogCustomerStock()) CHARWIDTH 30;
filterCustomerStock(PurchaseDemandLog d) = customerStock(d) == filterDemandLogCustomerStock() OR (d IS PurchaseDemandLog AND NOT filterDemandLogCustomerStock());

changeFilterCustomerStock()  { 
    DIALOG companysStock OBJECTS s = filterDemandLogCustomerStock() CHANGE;
} 

FORM purchaseDemandLog 'Лог автозаказа'
    PROPERTIES() filterDemandLogDateFrom, filterDemandLogDateTo, nameFilterDemandLogSupplier ON CHANGE changeFilterSupplier(), nameFilterDemandLogCustomerStock ON CHANGE changeFilterCustomerStock()

    OBJECTS l = PurchaseDemandLog
    PROPERTIES(l) READONLY dateTime, seriesNumberUserOrder, nameSupplier, nameCustomerStock, idBarcodeSku, nameSku,
                           quantitySold, purchaseReserve, insuranceReserve, currentBalance,
                           currentReservePurchase, currentReserveSale, recommendedQuantity
    FILTERS filterDateFrom(l), 
            filterDateTo(l),
            filterSupplier(l),
            filterCustomerStock(l)    
;

DESIGN purchaseDemandLog {
    BOX {    
        NEW filters {
            caption = 'Фильтры';
            horizontal = TRUE; 
            MOVE PROPERTY (filterDemandLogDateFrom());
            MOVE PROPERTY (filterDemandLogDateTo());
            MOVE PROPERTY (nameFilterDemandLogSupplier());
            MOVE PROPERTY (nameFilterDemandLogCustomerStock());
        } 
        MOVE BOX(l);
        MOVE TOOLBARBOX; 
    }
}

NAVIGATOR {
    purchasePurchaseNavigator {
        NEW purchaseDemandLog;
    }
}

EXTEND FORM orders
    OBJECTS l = PurchaseDemandLog
    PROPERTIES(l) READONLY dateTime, seriesNumberUserOrder, nameSupplier, nameCustomerStock, idBarcodeSku, nameSku,
                           quantitySold, purchaseReserve, insuranceReserve, currentBalance,
                           currentReservePurchase, currentReserveSale, recommendedQuantity
    FILTERGROUP demandLog
        FILTER 'По заказу' userOrder(l) == o DEFAULT
        FILTER 'По поставщику и складу' supplier(l) == supplier(o) AND customerStock(l) == customerStock(o) AND date(l) == date(o) 
;
DESIGN orders {
    documentDetail {
        MOVE BOX(l);
    }
}

enablePurchaseDemandLog 'Включить логирование строк автозаказа' = DATA BOOLEAN ();
limitPurchaseDemandLog 'Максимальное кол-во строк, при котором автозаказ логируется' = DATA INTEGER ();

EXTEND FORM options
    PROPERTIES() enablePurchaseDemandLog, limitPurchaseDemandLog
;
DESIGN options {
    purchase {
        MOVE PROPERTY(enablePurchaseDemandLog());
        MOVE PROPERTY(limitPurchaseDemandLog());
    }
}

overFill ABSTRACT LIST (PurchaseDemandLog);
overFill ABSTRACT LIST (PurchaseDemandLog, Sku,UserOrder);

overFill(PurchaseDemandLog l, Sku sku, UserOrder userOrder )+{
    dateTime(l) <- currentDateTime();
    userOrder(l) <- userOrder;
    supplier(l) <- supplier(userOrder);
    customerStock(l) <- customerStock(userOrder);
    sku(l) <- sku;
    quantitySold(l) <- quantitySold(sku,userOrder);
    purchaseReserve(l) <- purchaseReserve(sku,customerStock(userOrder),userOrder);
    insuranceReserve(l) <- insuranceReserve(sku,userOrder);
    recommendedQuantity(l) <- recommendedQuantity(sku,userOrder);
    currentBalance(l) <- prevCurrentBalance(sku,customerStock(userOrder));
    currentReservePurchase(l) <- prevCurrentReservePurchase(sku,customerStock(userOrder));
    currentReserveSale(l) <- prevCurrentReserveSale(sku,customerStock(userOrder));    
};
overFillRecommended (UserOrder userOrder) + {
    IF enablePurchaseDemandLog() AND (GROUP SUM 1 IF in(Sku sku)) <= limitPurchaseDemandLog() THEN {
        FOR in(Sku sku) INLINE NEW l = PurchaseDemandLog DO {
            overFill(l, sku, userOrder);            
            overFill(l);
        }
    }
}
