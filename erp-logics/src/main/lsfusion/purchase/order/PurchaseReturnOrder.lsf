MODULE PurchaseReturnOrder;

REQUIRE Order, PurchaseShipment, PurchaseOperation, PurchasePack;

PRIORITY Purchase, Operation;

NAMESPACE PurchaseReturn;

@defineOrder(' (закупка-возврат)', customer, customer, supplier, company, company, return, PurchaseReturn, pr);
@extendFormFilterAccessStock(Order, o, orders, customerStock, company);

externalStock (Order o) += supplierStock(o);

out(Order o) += o IS Order;
isReturn(Order o) += o IS Order;

@defineOrderBatch(customer, customer, pr);
@defineOrderBatchDialogStock(customerStock, Out);

@implementOrderDestination(customer, supplier);

//----------------------------------------------- Операции -----------------------------------------------------//

@defineDocumentOperationContainer(order, o, overName);
@deriveDocumentDetailPricePriceListTypeVATBatchCustomOperation (userOrderDetail);

@extendFormFilterRoleAccess(order, o, orders);
@defineDocumentOperationConstraint(order, 'заказ (закупка-возврат)', PurchaseReturn);
operation[Order.Order](Order order) += operation(order);
@defineDocumentOperationPriceListType(userOrder, 'заказа (закупка-возврат)', userOrder, return);

@defineDocumentOperationLegalEntity(userOrder, supplier, 'Поставщик');
@deriveDocumentOperationLegalEntity(userOrder, supplier, userOrder);
@defineDocumentOperationLegalEntity(userOrder, customer, 'Покупатель');
@deriveDocumentOperationLegalEntity(userOrder, customer, userOrder);
@defineDocumentOperationStock(userOrder, supplier, 'Склад поставщика');
@deriveDocumentOperationStock(userOrder, supplier, userOrder);
@defineDocumentOperationStock(userOrder, customer, 'Склад покупателя');
@deriveDocumentOperationStock(userOrder, customer, userOrder);

@defineDocumentOperationRole(userOrder);

overCopy(Order s, UserOrder d) + { 
    operation(d) <- operation(s);
}
@defineReturnOperationFilterProperty(order, o, orders, nameFilterOrderCustomUser);

@deriveShipmentDate();

//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplier(UserOrder userOrder) AND NOT isSupplier(supplier(userOrder))
    CHECKED BY supplier[UserOrder] MESSAGE 'Для заказа выбрано в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT customer(UserOrder userOrder) AND NOT isCompany(customer(userOrder))
    CHECKED BY customer[UserOrder] MESSAGE 'Для заказа выбрано в качестве покупателя организация, не являющаяся компанией';
    
CONSTRAINT filterOrderSupplier() AND NOT isSupplier(filterOrderSupplier())
    CHECKED BY filterOrderSupplier[] MESSAGE 'Для фильтра в заказе выбрана в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT filterOrderCustomer() AND NOT isCompany(filterOrderCustomer())
    CHECKED BY filterOrderCustomer[] MESSAGE 'Для фильтра в заказе выбрана в качестве покупателя организация, не являющаяся компанией';       
CONSTRAINT filterOrderCustomerStock() AND NOT isCompany(filterOrderCustomerStock())
    CHECKED BY filterOrderCustomerStock[] MESSAGE 'Для фильтра в заказе выбрана в качестве склада покупателя склад, который не принадлежит компании';     
    
CONSTRAINT filterOrderSupplier() AND filterOrderSupplierStock() AND NOT in(filterOrderSupplier(), filterOrderSupplierStock())
    CHECKED BY filterOrderSupplierStock[]   MESSAGE 'Поставщик и склад поставщика в фильтре для заказа не имеют связи';
CONSTRAINT filterOrderCustomer() AND filterOrderCustomerStock() AND NOT in(filterOrderCustomer(), filterOrderCustomerStock())
    CHECKED BY filterOrderCustomerStock[] MESSAGE 'Покупатель и склад покупателя в фильтре для заказа не имеют связи';

//------------------------------ Автоматическое проставление свойств -----------------------------//

@deriveDocumentLegalEntityDefaultStock(UserOrder, supplier, userOrder);

@defineDocumentLegalEntityStockAccess(UserOrder, customer, company, userOrder);

//------------------------------ Ввод в упаковках -----------------------------//

@defineDocumentPack(order, o);
packQuantity[Order.OrderDetail](OrderDetail detail) += packQuantity(detail);
DESIGN userOrder {
    headerExtraParams {
        NEW headerPack {
            caption = 'Упаковка';
            MOVE PROPERTY(showPack(o));
        }
    }
}

@defineDocumentPackSkuStock(userOrder, sku, customer);
@extendFormDocumentPackSkuStock(userOrder, userOrder, o, customer);

overChangeQuantityValueSku(UserOrderDetail detail) + { 
    IF packBarcode(sku(detail)) AND NOT skipChangePackQuantity(detail) THEN {
        packQuantity(detail) <- quantity(detail)/amountPack(detail);
    }
}

overChangeQuantityValueBatch(UserOrderDetail detail) + { 
    IF packBarcode(sku(batch(detail))) THEN {
        packQuantity(detail) <- quantity(detail)/amountPack(detail);
    }
}

@deriveDocumentOperationProperty(UserOrder, showPack);

//------------------------------ Расширение формы -----------------------------//

// Фильтры

EXTEND FORM userOrder

    FILTERGROUP filter
        FILTER 'С остатком ' currentBalance(ks, st) 'F10' DEFAULT
        FILTER 'В заказе ' quantityCustomer(ks, o, st) 'F9'

   FILTERGROUP filter1
        FILTER 'С поступлением' countPurchaseSupplier(supplier(o), ks) 'F8'
        FILTER 'В прайсе' priceA(ledgerPriceListType(priceListType(o, ks)),
                                                                                      ks,
                                                                                      st,
                                                                                      supplier(o),
                                                                                      dateTime(o)) 'F7'
;


EXTEND FORM userOrder

    FILTERGROUP filter4
        FILTER 'С остатком ' prevCurrentBalance(b, sto) 'F10' DEFAULT
        FILTER 'В документе ' quantityCustomer(b, o, sto) 'F9'

    FILTERGROUP filter5
        FILTER 'С поступлением ' supplier(o) = prevSupplier(b) 'F8' DEFAULT
        FILTER 'В прайсе ' companyA(priceListType(o, b), 
                                                                              b, 
                                                                              customerStock(o), 
                                                                              dateTime(o)) == supplier(o) 'F7'
;

// Резервы
@extendFormDocumentSkuStockOrderLedger(order, userOrder, o, customerStock);
@extendFormDocumentSkuStockOrderLedgerAll(userOrder, userOrder, o);

@extendFormDocumentBatchStockOrderLedger(userOrder, userOrder, o);
@extendFormDocumentBatchStockOrderLedgerAll(userOrder, userOrder, o);

//--------------------- Проводим по регистру резерва ------------------//
@implementSaleOrderLedger(Order, sku, shipmentDateTime, customerStock, supplier);
operation[OrderLedger](OrderDetail ledger) += operation(ledger);
show[OrderLedger](OrderDetail ledger) + { show[UserOrderDetail](ledger);};

note[OrderLedger](OrderDetail ledger) += note(order(ledger));

//-- Запрет на изменение документа другим пользователем
@defineOperationChangesDocument(order, UserOrder, preventChangesDocument, created);

overShowEdit (Order i) += showEditDeleteUser(i) AND isOpened(i) AND NOT skipShowEdit(i);
overShowDelete (UserOrder i) += showEditDeleteUser(i) AND isUserOpened(i) AND NOT skipShowEdit(i); 

skipClose (UserOrder i) += WHEN preventCloseDocument(currentUser(), operation(i)) THEN TRUE;
skipOpen (UserOrder i) += IF preventOpenDocument(currentUser(), operation(i)) THEN TRUE;

NAVIGATOR {
    purchaseReturnNavigator {
        NEW orders;
    }
}

CONSTRAINT  isPosted(UserOrder i) AND isContract(operation(i)) AND NOT contractSku[Order](i) 
    MESSAGE 'Для заказа (закупка-возврат) обязан быть задан договор';

beforeFillBatch ABSTRACT LIST (UserOrderDetail);
afterFillBatch ABSTRACT LIST (UserOrderDetail);
disableStandartFillBatch = ABSTRACT BOOLEAN (UserOrderDetail);

fillBatch 'Проставить партию' (UserOrderDetail d) {
    beforeFillBatch(d);
    batch(d) <- prevFirstOrderBatchAvailable(sku(d), customerStock(d), quantity(d)) WHERE NOT batch(d) AND NOT disableStandartFillBatch(d);
    afterFillBatch(d);
} ASON CONTEXTMENU nameBatch[UserOrderDetail];

fillAllBatch 'Проставить партии для всех'(UserOrderDetail detail)  {
    FOR userOrder(detail) == userOrder(UserOrderDetail d) DO
        fillBatch(d);
} ASON CONTEXTMENU nameBatch[UserOrderDetail];