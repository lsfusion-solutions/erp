MODULE PurchaseDemandOrder;

REQUIRE System,
        Utils,
        Historizable,
        Stock,
        Barcode,
        PurchaseOrder,
        PurchaseDemand,
        PriceList,
        Document;

NAMESPACE Purchase;

fillDemandUserOrder (UserOrder o, LegalEntity supplier, Stock stock, PriceListType priceListType, DATETIME dateTime, DATE dFrom, DATE dTo)  { 

    date(o) <- toDate(dateTime);
    time(o) <- currentTime();

    nextShipmentDate(o) <- sum(shipmentDate(o), daysBetweenDates(dTo, dFrom) IF dTo >= dFrom);

    supplier(o) <- supplier;
    supplierStock(o) <- defaultStock(supplier) IF countStocks (supplier) == 1;
    customer(o) <- legalEntity(stock);
    customerStock(o) <- stock;

    IF countOperationSupplierCustomerSupplierCustomer(supplier(o), customer(o), supplierStock(o), customerStock(o), currentUser()) == 1 THEN 
        operation(o) <- defaultOperationSupplierCustomerSupplierCustomer(supplier(o), customer(o), supplierStock(o), customerStock(o), currentUser());
    
    priceListType(o) <- priceListType;
    
    dateFromSoldPeriod(o) <- dFrom;
    dateToSoldPeriod (o) <- dTo;

    fillRecommendedQuantityStock(o);

    SHOW userOrder OBJECTS o = o DOCKED NOCANCEL;
}

createDemandUserOrder 'Создать заказ'(LegalEntity supplier, Stock stock, PriceListType priceListType, DATETIME dateTime, DATE dFrom, DATE dTo)  { 
	NEWSESSION {
	    NEW o = Purchase.UserOrder {
	        fillDemandUserOrder(o, supplier, stock, priceListType, dateTime, dFrom, dTo);
	    }
	}
}

recQuantityDemandOrder  (Sku sku, Stock stock, DATETIME dateTime, DATE dFrom, DATE dTo) =  totalReserve(stock, sku, DATE(dateTime AS DATETIME)) (+) 
                                                                            quantitySold(sku, stock, dFrom, dTo) (-)
                                                                            currentReservePurchase(sku, stock) (-) 
                                                                           (currentBalance(sku, stock) IF currentBalance(sku, stock) > 0.0) ; 

recommendedQuantityDemandOrder 'Рекомендуемое к закупке кол-во' (Sku sku, Stock stock, DATETIME dateTime, DATE dFrom, DATE dTo) = 
    (ceilRecommendedQuantity(sku, recQuantityDemandOrder(sku, stock, dateTime, dFrom, dTo))) IF recQuantityDemandOrder(sku, stock, dateTime, dFrom, dTo) > 0;

numberSkuPurchaseSupplier 'Кол-во товаров' = DATA LOCAL INTEGER (LegalEntity);
recalculateNumberSkuPurchaseSupplier 'Рассчитать потребность'(Stock stock, PriceListType priceListType, INTEGER int, DATETIME dateTime)  { 
    numberSkuPurchaseSupplier(LegalEntity supplier) <- numberSkuPurchaseReserve(supplier, stock, ledgerPriceListType(priceListType), int, dateTime);
} TOOLBAR;

nameCompanyA 'Организация' (PriceListType type, Sku sku, Stock stock, DATETIME dateTime) =name(companyA(ledgerPriceListType(type), sku, stock, dateTime));

backgroundDemand 'Цвет' = ABSTRACT CASE COLOR (Sku, Stock);

FORM demandOrder 'Заказы по потребностям'
    OBJECTS dt = DATETIME PANEL
    PROPERTIES valDt = VALUE(dt)

    OBJECTS st = Stock PANEL
    PROPERTIES (st) SELECTOR name
    FILTERS isCompany(st)

    OBJECTS p = PriceListType PANEL
    PROPERTIES (p) SELECTOR name
    
    OBJECTS i = INTEGER PANEL 
    PROPERTIES valI = VALUE (i)
    
    OBJECTS dFrom = DATE PANEL, dTo = DATE PANEL
    PROPERTIES valFrom = VALUE(dFrom), valTo = VALUE(dTo)

    OBJECTS l = LegalEntity GRID
    PROPERTIES(l) READONLY name, numberSkuPurchaseSupplier
    PROPERTIES createDemandUserOrder(l, st, p, dt, dFrom, dTo) DRAW l TOOLBAR
    ORDERS name(l)
    FILTERS isSupplier(l)
    FILTERGROUP inactiveLegalEntity FILTER 'Активная' active(l) 'shift F10' DEFAULT
    PROPERTIES recalculateNumberSkuPurchaseSupplier(st, p, i, dt) DRAW l
    FILTERGROUP filtersLegalEntity
        FILTER 'Необходим заказ' numberSkuPurchaseSupplier(l) > 0 'F10'

    TREE skuTree sk = SkuGroup PARENT parent(sk)
    PROPERTIES order(sk) READONLY, skuTreeName = name(sk) READONLY
    ORDERS order(sk), skuTreeName
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F6' DEFAULT

    OBJECTS s = Sku
    PROPERTIES READONLY BACKGROUND backgroundDemand(s, st) idBarcode(s), name(s) ON CONTEXTMENU showBalanceMovementSku(s, st) ON CONTEXTMENU showBalancePriceSku(s, st) ON CONTEXTMENU showBalanceReserveSku(s, st) , shortNameUOM(s) 
    PROPERTIES READONLY amountPack(s)
    ORDERS name(s)
    FILTERS isParent(sk, s)

    PROPERTIES READONLY overPurchaseReserve(st, s, dt), averageSold(s, st), quantitySold(s, st, dFrom, dTo), currentBalance(s, st), currentReserve(s, st),
        diffPurchaseReserve(st, s, i, dt), recommendedQuantityDemandOrder(s, st, dt, dFrom, dTo), nameCompanyA(p, s, st, dt),
        priceA(p, s, st, dt), dateTimeLastOrderBatch(s,st), dateTimeLastMoved(s, st) 
    PROPERTIES READONLY accountPriceA(s,st,dt)
    
    FILTERGROUP filterActive
        FILTER 'Активные' active(s) DEFAULT 
    
    FILTERGROUP filterdiff
        FILTER 'С потребностью' calcDiffPurchaseReserve(st, s, i, dt) > 0 
        FILTER 'С рекомендацией' recommendedQuantityDemandOrder(s, st, dt, dFrom, dTo)
        FILTER 'С остатком' currentBalance(s, st)
        FILTER 'С продажами' quantitySold(s, st, dFrom, dTo)
        FILTER 'С остатком или продажами' currentBalance(s, st) OR quantitySold(s, st, dFrom, dTo) DEFAULT

    FILTERGROUP filterSupplier
        FILTER 'По поставщику' priceA(p, s, st, l, dt)
                                       //companyALedgerPriceListTypeSkuStockDateTime(p, s, st, dt) == l
        
    OBJECTS o = Order
    PROPERTIES (o) READONLY isPosted, number, series, date, time,
                            nameSupplier, nameSupplierStock, nameCustomer, nameCustomerStock,
                            countOrderDetail, quantityOrderDetail, sumOrderDetail,
                            VATSumOrderDetail, invoiceSumOrderDetail, shipmentDate, shipmentTime, 
                            closeDate, note            
    PROPERTIES (o) NEWSESSION NEW[UserOrder], EDIT SHOWIF overShowEdit(o), deleteo = DELETE SHOWIF overShowDelete(o)  
    FILTERS  customerStock(o) ==st
//             supplierOrder(o) == l
             
    FILTERGROUP dateFilter
        FILTER 'Заказы на дату' date(o) == toDate(dt) 'F9' DEFAULT
;

@defineOption(defaultDemandOrderInteger, 'Дней до поставки для заказов по потребностям', INTEGER, purchase);

seekDefaultDemandOrder  { 
    SEEK demandOrder.p = defaultDemandOrderPriceListType();
    SEEK demandOrder.i = defaultDemandOrderInteger();
    SEEK demandOrder.dFrom = subtract(currentDate(), defaultDemandOrderPeriod());
}
EXTEND FORM demandOrder
    EVENTS ON INIT seekDefaultDemandOrder()
;

DESIGN demandOrder {
    BOX {
        NEW mainPane {
            fill = 1;
            type = SPLITV;
            NEW header {
                fill = 1;
                type = SPLITH;
                
                NEW left {
                    fill = 1;
                    type = CONTAINERV;
                    MOVE BOX(dt);
                    MOVE BOX(st) {
                        MOVE PROPERTY(name(st)) {
                            alignment = STRETCH;
                        }
                    }
                    MOVE BOX(p);
                    MOVE BOX(i){caption = 'Количество дней до поставки';};
                    NEW period{
                        caption = 'Период для реализации';                   
                        type = CONTAINERH;
                        MOVE PROPERTY (valFrom);
                        MOVE PROPERTY (valTo);
                    }
                }     
                NEW right {
                    type = CONTAINERH;
                    fill = 2;
                    MOVE BOX(l) {
                        fill = 1;
                    }
                }
            }            
            
            NEW colum {
                fill = 3;
                type = TABBED;
                NEW column1 {
                    caption = 'Товары';                   
                    type = CONTAINERH;
                    MOVE BOX(TREE skuTree);
                    MOVE BOX(s) { 
                        fill = 3;
                        PROPERTY(nameCompanyA(p, s, st, dt)){
                            caption = 'Последний поставщик';
                        } 
                    }
                }
                MOVE BOX(o) {
                    caption = 'Заказы';
                }
            }            
        }
        MOVE TOOLBARBOX;
    }
}

@extendFormFilterRoleAccess(order, o, demandOrder); 

@extendFormFilterStockAccess(st, demandOrder);

NAVIGATOR {
    purchaseDashboardNavigator {
        NEW demandOrder;
    }
}

DESIGN demandOrder {
        PROPERTY(amountPack(s)) { background = #FFBC02;}
        PROPERTY(overPurchaseReserve(st, s, dt)) { background = #FFEEEE; }
        PROPERTY(currentBalance(s, st)) { background = #F4FFBD; }
        PROPERTY(diffPurchaseReserve(st, s, i, dt)) { background = #D4FFD4; }
        PROPERTY(recommendedQuantityDemandOrder(s, st, dt, dFrom, dTo)) { background = #BDE3FF; }
}

EXTEND FORM demandOrder
    FILTERGROUP myOrders
        FILTER 'Мои' createdUser(o) == currentUser() 'F7' DEFAULT
;

EXTEND FORM userOrder PROPERTIES READONLY MOQ(ks);