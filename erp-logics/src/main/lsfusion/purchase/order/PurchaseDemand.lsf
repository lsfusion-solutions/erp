MODULE PurchaseDemand;

REQUIRE PurchaseOrder, SaleLedger;

NAMESPACE Purchase;

//-----------------------------------------------------------------------------------------------------------//
defaultDemandOrderPriceListType = DATA PriceListType();
nameDefaultDemandOrderPriceListType 'Вид цены для заказов по потребностям' = name(defaultDemandOrderPriceListType());

EXTEND FORM options PROPERTIES() nameDefaultDemandOrderPriceListType;
DESIGN options { purchase { MOVE PROPERTY(nameDefaultDemandOrderPriceListType()); } }

defaultDemandOrderLedgerPriceListType = ledgerPriceListType(defaultDemandOrderPriceListType()) MATERIALIZED;

@defineOption(defaultDemandOrderPeriod, 'Период (дней) для заказов по потребностям', INTEGER, purchase);

dateFromSoldPeriod 'Дата с' = DATA DATE (UserOrder);
dateToSoldPeriod 'Дата по' = DATA DATE (UserOrder);

skipDateFromSoldPeriod = ABSTRACT BOOLEAN (UserOrder);
skipDateToSoldPeriod = ABSTRACT BOOLEAN  (UserOrder);
readOnlySoldPeriod = ABSTRACT BOOLEAN  (UserOrder);

fromShipmentDate 'Начало периода' (UserOrder userOrder) = subtract(date(userOrder), (OVERRIDE quantityDaysNextShipment(userOrder), defaultDemandOrderPeriod()));   

WHEN LOCAL CHANGED (fromShipmentDate(UserOrder o)) AND NOT CHANGED(dateFromSoldPeriod(o)) AND NOT skipDateFromSoldPeriod(o) DO {
    dateFromSoldPeriod(o) <- fromShipmentDate(o);   
}
WHEN LOCAL CHANGED (date(UserOrder o)) AND NOT CHANGED(dateToSoldPeriod(o)) AND NOT skipDateToSoldPeriod(o) DO {
    dateToSoldPeriod(o) <- subtract(date(o),1);   
}

quantitySold 'Продано' (Sku sku, UserOrder userOrder) = quantitySold(sku, customerStock(userOrder), dateFromSoldPeriod(userOrder), dateToSoldPeriod(userOrder));

insuranceReserve 'Страховой запас (авто)' = ABSTRACT NUMERIC[16,5](Sku, UserOrder);
purchaseReserve 'Страховой запас (ручн)' = ABSTRACT NUMERIC[16,5](Stock, Sku, DATE) CHARWIDTH 7;
extraReserve 'Страховой запас (доп)' = ABSTRACT NUMERIC[16,5](Stock, Sku, DATE);
totalReserve 'Страховой запас (кол-во)' (Stock st, Sku sk, DATE d) = purchaseReserve(st, sk, d) (+) extraReserve(st, sk, d);

extraDemand 'Потребность (доп)' = ABSTRACT NUMERIC[16,5](Stock, Sku, DATE);

recommendedQuantity 'Рекомендуемое к закупке кол-во' = ABSTRACT NUMERIC[16,5] (Sku, UserOrder) CHARWIDTH 7;    

purchaseReserve 'Страховой запас (кол-во)' (Sku sku, Stock stock, UserOrder userOrder) = totalReserve(stock, sku, date(userOrder));
purchaseReserve 'Страховой запас (ручн)' (Sku sk, UserOrder o) = purchaseReserve(customerStock(o), sk, date(o));
extraReserve 'Страховой запас (доп)' (Sku sk, UserOrder o) = extraReserve(customerStock(o), sk, date(o));


calcDiffPurchaseReserve 'Потребность' (Stock stock, Sku sku, INTEGER int, DATE date) =
    averageSold(sku, stock) * (int AS INTEGER) (+) totalReserve(stock, sku, date) (-) currentReservePurchase(sku, stock) (-) (currentBalance(sku, stock) IF currentBalance(sku, stock) > 0.0) (+) extraDemand(stock, sku, date);
calcDiffPurchaseReserve 'Потребность' (Stock stock, Sku sku, INTEGER int, DATETIME dateTime) = calcDiffPurchaseReserve(stock, sku, int, toDate(dateTime));

//diffPurchaseReserveStockSkuIntegerDate 'Потребность' (stock, sku, int, date) = calcDiffPurchaseReserveStockSkuIntegerDate(stock, sku, int, date) IF calcDiffPurchaseReserveStockSkuIntegerDate(stock, sku, int, date) > 0; 
diffPurchaseReserve 'Потребность' (Stock stock, Sku sku, INTEGER int, DATE date) = 
    calcDiffPurchaseReserve(stock, sku, int, date) IF calcDiffPurchaseReserve(stock, sku, int, date) > 0; 
diffPurchaseReserve 'Потребность' (Stock stock, Sku sku, INTEGER int, DATETIME dateTime) = diffPurchaseReserve(stock, sku, int, toDate(dateTime));

overPurchaseReserve 'Страховой запас (кол-во)'(Stock stock, Sku sku, DATETIME dateTime) = totalReserve(stock, sku, toDate(dateTime));

numberSkuPurchaseReserve 'Кол-во товаров' (supplier, Stock stock, LedgerPriceListType priceListType, INTEGER int, DATETIME dateTime) =
    GROUP SUM 1 IF calcDiffPurchaseReserve(stock, Sku sku, int, dateTime) > 0 IF priceA(priceListType, sku, stock, LegalEntity l, dateTime)
          BY l;

limitRecommendedQuantity = ABSTRACT VALUE BOOLEAN (Sku, UserOrder);

MOQ 'Минимальное кол-во для заказа' = ABSTRACT NUMERIC[16,5] (Sku);
overRecommendedQuantity  ABSTRACT LIST ( UserOrderDetail,Sku);
skipCeil = ABSTRACT BOOLEAN (Sku,UserOrder);
ceilRecommendedQuantity(Sku sku, NUMERIC[16,5] r) = IF (MIN MOQ(sku), amountPack(sku)) > 0 THEN ceil(r, (MIN MOQ(sku), amountPack(sku))) ELSE (IF split(sku) THEN r ELSE ceil(r));
useCustomRecommended = ABSTRACT BOOLEAN (UserOrder);
fillRecommendedQuantityStockCustom  ABSTRACT (UserOrder);
in = DATA LOCAL BOOLEAN (Sku);
overFillRecommended ABSTRACT LIST (UserOrder);

fillRecommendedBase (UserOrder userOrder) {
        in(Sku sku) <- prevPriceA(
                                  (OVERRIDE ledgerPriceListType(priceListType(userOrder, sku)), defaultDemandOrderLedgerPriceListType()),
                                  sku, customerStock(userOrder), supplier(userOrder), dateTime(userOrder))
                              AND NOT limitRecommendedQuantity(sku, userOrder); 
        FOR in(Sku sku) AND NUMERIC[16,5] r == recommendedQuantity (sku, userOrder) NEW d = UserOrderDetail DO {
                userOrder(d) <- userOrder;
                sku(d) <- sku;
                quantity (d) <- IF skipCeil(sku,userOrder) THEN r ELSE ceilRecommendedQuantity(sku, r);                
                overRecommendedQuantity(d,sku);
        }
        overFillRecommended(userOrder);
}        

fillRecommendedQuantityStock 'Заполнить рекомендуемым'(UserOrder userOrder)  { 
    IF NOT useCustomRecommended(userOrder) THEN {
        fillRecommendedBase(userOrder);
    } ELSE {
        fillRecommendedQuantityStockCustom(userOrder);
    }
} TOOLBAR CONFIRM;

fillRecommendedQuantityStockDialog 'Заполнить рекомендуемым'(UserOrder userOrder)  { 
    IF NOT useCustomRecommended(userOrder) THEN {
        IF countUserOrderDetail(userOrder) THEN {
            ASK 'Заказ уже содержит строки. Удалить их и заполнить заказ рекомендацией?' DO { 
                DELETE UserOrderDetail detail WHERE userOrder(detail)=userOrder;
                fillRecommendedBase(userOrder);
             }
        } ELSE {
            fillRecommendedBase(userOrder);
        }  
    } ELSE {
        fillRecommendedQuantityStockCustom(userOrder);
    }
} TOOLBAR CONFIRM;
                              
EXTEND FORM userOrder
    PROPERTIES(o) DRAW sts PANEL READONLYIF readOnlySoldPeriod(o) dateFromSoldPeriod, dateToSoldPeriod

    PROPERTIES READONLY AFTER prevCurrentBalance(ks,st) quantitySold(ks, o), purchaseReserve(ks,st,o)
    PROPERTIES READONLY AFTER quantityCustomer(ks, o, st)
        recommendedQuantity(ks, o) ON CONTEXTMENU fillRecommendedQuantityStockDialog(o)
;

DESIGN userOrder {
    BOX(sts) {           
        NEW filterDate FIRST {
            caption= 'Период для расчета продаж';
            type = CONTAINERH;
            MOVE PROPERTY (dateFromSoldPeriod(o));
            MOVE PROPERTY (dateToSoldPeriod(o));
        }
    }
}
    
EXTEND FORM userOrder 
    OBJECTS day = DATE
    PROPERTIES READONLY VALUE(day), balanceB(ks, st, day), 'Продано за день' = quantitySold(ks, st, day),
                        price 'Средняя цена' = NUMERIC[16,2] (sumSold(ks, st, day) / quantitySold(ks, st, day))
    
    FILTERS iterate(day, dateFromSoldPeriod(o), dateToSoldPeriod(o))
    
    OBJECTS po = OrderDetail
    PROPERTIES (po) READONLY date,series, number, nameSupplierStock, quantity
    FILTERS customerStock(po) = st,
            sku(po) = ks,
            isPosted(po)
            
    ORDERS date(po) DESC          
;

DESIGN userOrder {
    itemBox {
        NEW days FIRST {
            fill = 1;
            type = SPLITV;
            width = 0;
            MOVE skuFilters { fill = 2; }
            NEW tabContainer{
                
                fill = 1;
                type = TABBED;
                MOVE BOX(po) {
                    caption = 'История закупок';       
                }  
                MOVE BOX (day) {
                    caption = 'История продаж';                     
                    PROPERTY (balanceB(ks, st, day)) { charWidth = 6; }
                    PROPERTY (quantitySold(ks, st, day)) { charWidth = 6; }
                    PROPERTY (price) { charWidth = 6; }
                }                             
            }
        }
    }
}