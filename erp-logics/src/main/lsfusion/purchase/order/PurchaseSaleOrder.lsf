MODULE PurchaseSaleOrder;

REQUIRE PurchaseOrder, SaleOrder, PurchaseSaleOperation;

PRIORITY Purchase;

//----------------------------------------------------------------------------//

GROUP orderSale 'Информация о заказе' : public;

createSale 'Создать заказ (продажа)' = ABSTRACT BOOLEAN (Order) MATERIALIZED;
createSale 'Создать заказ (продажа)' = DATA BOOLEAN (UserOrder) MATERIALIZED;
createSale(UserOrder order) += createSale(order);

createSale 'Создать заказ (продажа)' (OrderDetail orderDetail) = createSale(order(orderDetail))MATERIALIZED;
createSale 'Создать заказ (продажа)' (UserOrderDetail userOrderDetail) = createSale(userOrder(userOrderDetail));
backgroundSale 'Цвет' (Order order) = RGB(255, 214, 214) IF order IS Order;
EXTEND FORM userOrder
    PROPERTIES(o) BACKGROUND backgroundSale(o) createSale
;
DESIGN userOrder {
    headerCreateDocuments{
        NEW headerOrder{
            caption = 'Заказ';
            type = CONTAINERH;
            MOVE PROPERTY(createSale(o));
        }
    }
}

CLASS SaleOrder 'Заказ на основе заказа': Sale.Order;
CLASS SaleOrderDetail 'Строка заказа на основе заказа' : Sale.OrderDetail;

@defineDocumentTables(saleOrder);

@defineDocumentAggregation(order, saleOrder, createSale);
order(SaleOrderDetail detail) += saleOrder(detail);

index(SaleOrderDetail detail) += index(detail);

date(SaleOrder order) += date(order);
time(SaleOrder order) += time(order);

shipmentDate(SaleOrder order) += shipmentDate(order(order));
shipmentDataDate(SaleOrderDetail detail) += shipmentDataDate(orderDetail(detail));

shipmentTime(SaleOrder order) += shipmentTime(order(order));
shipmentDataTime(SaleOrderDetail detail) += shipmentDataTime(orderDetail(detail));

agreement(SaleOrder order) += agreement(order(order));
priceListType(SaleOrder order) += priceListType(order(order));
priceListType(SaleOrderDetail detail) += priceListType(orderDetail(detail));

@defineDocumentAggregationStockPrefix(order, saleOrder, supplier, 'Склад поставщика', , );
supplierStock(SaleOrder order) += supplierStock(order);
@defineDocumentAggregationStockPrefix(order, saleOrder, customer, 'Склад покупателя', , );
customerStock(SaleOrder order) += customerStock(order);

@defineDocumentAggregationLegalEntityPrefix(order, saleOrder, supplier, 'Поставщик', , );
supplier(SaleOrder order) += supplier(order);
@defineDocumentAggregationLegalEntityPrefix(order, saleOrder, customer, 'Покупатель', , );
customer(SaleOrder order) += customer(order);

@defineDocumentAggregationPosted(order, saleOrder);
isPosted(SaleOrder order) += isPosted(order);

@defineDocumentAggregationClosed(order, saleOrder);
isClosed(SaleOrder order) += isClosed(order);

number(SaleOrder order) += number(order(order));
series(SaleOrder order) += series(order(order));
seriesNumber 'Серия/номер документа' (SaleOrder saleOrder) = seriesNumber(order(saleOrder));

noteOrder 'Примечание' (SaleOrder saleOrder) = note(order(saleOrder));
note(SaleOrder order) += noteOrder(order);

currency  (SaleOrder saleOrder) = currency(order(saleOrder));
currency (SaleOrder order) += currency(order);

@defineDocumentDescription(saleOrder, SaleOrderDetail, 'Заказ (продажа) на основе заказа (закупка)');
description (SaleOrder order) += description(order);

@defineDocumentAggregationDetailSku(order, saleOrder, sku);
sku(SaleOrderDetail orderDetail) +=  sku(orderDetail);

quantity(SaleOrderDetail orderDetail) += quantity(orderDetail(orderDetail));
price(SaleOrderDetail orderDetail) += price(orderDetail(orderDetail));
sum(SaleOrderDetail orderDetail) += sum(orderDetail(orderDetail));

VAT(SaleOrderDetail orderDetail) +=VAT(orderDetail(orderDetail));
valueVAT(SaleOrderDetail orderDetail) += valueVAT(orderDetail(orderDetail));
VATSum(SaleOrderDetail orderDetail) += VATSum(orderDetail(orderDetail));
invoicePrice(SaleOrderDetail orderDetail) += invoicePrice(orderDetail(orderDetail));
invoiceSum(SaleOrderDetail orderDetail) += invoiceSum(orderDetail(orderDetail));

showPack(SaleOrder order) +=  showPack(order(order));
barcodePack(SaleOrderDetail orderDetail) +=  barcodePack(orderDetail(orderDetail));
amountPack(SaleOrderDetail orderDetail) +=  amountPack(orderDetail(orderDetail));
packQuantity(SaleOrderDetail orderDetail) +=  packQuantity(orderDetail(orderDetail));

edit(SaleOrder order) + {  edit(order(order)); }
createdUser(SaleOrder order) += createdUser(order(order));
edit(SaleOrderDetail order) + {  edit(orderDetail(order)); }

@defineOperationProperty(createSale, 'Заказ (продажа)', createContainer);

@deriveDocumentOperationProperty(UserOrder, createSale);

@defineDocumentInterfaceOperationPrefix (order, sale, Sale, ' (продажа)');

@deriveDocumentOperationProperty(UserOrder, saleOperation);

// Записываем операцию для закупки по умолчанию из операции
saleOperation (UserOrder order) <- saleOperation(operation(order))
    WHEN CHANGED(operation(order));

operation(SaleOrder order) += saleOperation(order(order));

EXTEND FORM userOrder
    PROPERTIES(o) BACKGROUND backgroundSale(o) SHOWIF createSale[Order](o) nameSaleOperation

;
DESIGN userOrder {
    headerOrder {
        MOVE PROPERTY(nameSaleOperation(o)) AFTER PROPERTY(createSale(o));
    }
}
//-- Действие
overMoveUserOrderDetail(Purchase.OrderDetail detail, Sale.UserOrderDetail d) ABSTRACT LIST;

moveUserOrder 'Заказ (продажа)'(Order order)   { 
	NEWSESSION{
	    NEW o = Sale.UserOrder {
	
	        shipmentDate(o) <- shipmentDate(order);
	        shipmentTime(o) <- shipmentTime(order);
	        agreement(o) <- agreement(order);
	        priceListType(o) <- priceListType(order);
	        supplier(o) <- supplier(order);
	        customer(o) <- customer(order);
	        supplierStock(o) <- supplierStock(order);
	        customerStock(o) <- customerStock(order);
	        number(o) <- number(order);
	        series(o) <- series(order);
	        note(o) <- note(order);
	        currency(o) <- currency(order);
	        showPack(o) <- showPack(order);
	        closeDate(o) <- closeDate(order);
	        operation(o) <- saleOperation(operation(order));
	
	        FOR order(OrderDetail detail)==order NEW d = Sale.UserOrderDetail DO {
	
	            userOrder(d) <- o;
	            shipmentDataDate(d) <- shipmentDataDate(detail);
	            shipmentDataTime(d) <- shipmentDataTime(detail);
	            priceListType(d) <- priceListType(detail);
	
	            sku(d) <- sku(detail);
	            quantity (d) <- quantity(detail);
	            VAT (d) <- VAT(detail);
	            valueVAT (d) <- valueVAT(detail);
	            price (d) <- price(detail);
	            invoicePrice (d) <- invoicePrice(detail);
	
	            barcodePack (d) <- barcodePack(detail);
	            amountPack (d) <- amountPack(detail);
	            packQuantity (d) <- packQuantity(detail);
	            closeDataDate (d) <- closeDataDate(detail);
	                        
	            overMoveUserOrderDetail(detail, d);
	        }
	
	    SHOW Sale.userOrder OBJECTS o = o DOCKED;
	    }
	}
} TOOLBAR;

EXTEND FORM orders
    PROPERTIES(o) moveUserOrder
;
DESIGN orders {
    createdContainer{
        MOVE PROPERTY(moveUserOrder(o)) { alignment = STRETCH; } 
    }
}


descriptionPurchaseOrder 'Заказ (закупка)' (Sale.Order order) = description(order(order)); 

//order = DATA Purchase.Order (Sale.Order);
//descriptionPurchaseOrder 'Заказ (закупка)' (Sale.Order order) = description(order(order)); 
//
//
//EXTEND FORM Sale.orders
//    PROPERTIES(o) READONLY descriptionPurchaseOrder
//;