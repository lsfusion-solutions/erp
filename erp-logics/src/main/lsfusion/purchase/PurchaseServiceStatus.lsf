MODULE PurchaseServiceStatus;

REQUIRE PurchaseShipment, PurchaseOrderStatus;

NAMESPACE Purchase;
       
dataPercService 'Качество сервиса (контроль), %' = DATA NUMERIC[16,2] (LegalEntity);

CLASS ServiceStatus 'Статус качества сервиса' {
    good 'Хорошо',
    warning 'Предупреждение',
    fine 'Штраф',
//    finePay 'Штраф оплачен',
    stopping 'Стоп лист'    
} 
TABLE serviceStatus (ServiceStatus);
order 'Порядок' (ServiceStatus s) = CASE 
        WHEN  ServiceStatus.good==s THEN 1
        WHEN  ServiceStatus.warning==s THEN 2
        WHEN  ServiceStatus.fine==s THEN 3                                                                           
        WHEN  ServiceStatus.stopping==s THEN 4 MATERIALIZED CHARWIDTH 2;  


FORM serviceStatus 'Статус качества сервиса' 
    OBJECTS t = ServiceStatus
    PROPERTIES(t) READONLY order, staticCaption
    ORDERS order(t)
    LIST ServiceStatus OBJECT t
;


CLASS ServiceStatusDetail 'Статус качества';
TABLE serviceStatusDetail (ServiceStatusDetail);

legalEntity = DATA LegalEntity(ServiceStatusDetail) NONULL;
namelegalEntity 'Организация' (ServiceStatusDetail d) = name(legalEntity(d)) IN id;

fromDate 'Дата с' = DATA DATE (ServiceStatusDetail);
toDate 'Дата по' = DATA DATE (ServiceStatusDetail);

percService 'Качество сервиса, %' = DATA NUMERIC[16,2] (ServiceStatusDetail);
isChange 'Изменение вручную' = DATA BOOLEAN (ServiceStatusDetail);

serviceStatus  = DATA ServiceStatus (ServiceStatusDetail);
nameServiceStatus 'Статус качества сервиса' (ServiceStatusDetail d) = staticCaption(serviceStatus(d)) IN id;

@defineCreated(ServiceStatusDetail);

lastServiceStatusDetail   =
    GROUP LAST ServiceStatusDetail d
        ORDER toDate(d), d
        BY legalEntity(d);
INDEX legalEntity(ServiceStatusDetail d), toDate(d), d;


nameServiceStatus 'Статус качества сервиса' (LegalEntity l) = staticCaption(serviceStatus(lastServiceStatusDetail(l))); 
percService 'Качество сервиса, %' (LegalEntity l) = percService(lastServiceStatusDetail(l)); 

backgroundServiceStatus (LegalEntity l) = CASE 
    WHEN serviceStatus(lastServiceStatusDetail(l)) == ServiceStatus.stopping THEN RGB(255,0,0)
    WHEN serviceStatus(lastServiceStatusDetail(l)) == ServiceStatus.warning THEN RGB(255,255,0) 
    ELSE RGB(255,255,255) 
;



isChange = DATA LOCAL NESTED BOOLEAN (LegalEntity);


@defineItemGroupValue(excludePercService, 'Исключить из подстчета "Качество сервиса"', BOOLEAN);
EXTEND FORM itemGroups 
    PROPERTIES(g) READONLYIF isReadonly() excludePercService
;
overExcludeService  = ABSTRACT VALUE BOOLEAN (Purchase.Order);
excludeGroupService 'Исключить из подстчета "Качество сервиса"' (Purchase.Order o) = [GROUP SUM 1 IF sum(OrderDetail idetail) AND excludePercService(skuGroup(sku(idetail))) BY order(idetail)](o);
excludeService 'Исключить из подстчета "Качество сервиса"' (Purchase.Order o) =excludeGroupService(o) OR overExcludeService(o);

overCreateServiceStatusDetail  ABSTRACT LIST ( );

EXTEND FORM legalEntity    
    PROPERTIES (l) notCalcServiceStatus, dataPercService , nameServiceStatus BACKGROUND backgroundServiceStatus(l), percService READONLY

    OBJECTS sd = ServiceStatusDetail
    
    PROPERTIES (sd) READONLY fromDate, toDate, percService, nameServiceStatus
    PROPERTIES (sd) READONLY createdTime, createdNameUser, createdHostnameComputer
    ORDERS fromDate(sd) DESC
    FILTERS legalEntity(sd) == l    
;
DESIGN legalEntity {
    extendContainer{
        NEW status {
            fill = 1;
            type = CONTAINERV;
            caption = 'Статус качества сервиса';
            NEW status1 {
                type = CONTAINERH; 
                MOVE PROPERTY (notCalcServiceStatus(l));
                MOVE PROPERTY (nameServiceStatus(l));
                MOVE PROPERTY (percService(l));
                MOVE PROPERTY (dataPercService(l));
            }
            MOVE BOX(sd);
        }
    }
}
EXTEND FORM legalEntities
    PROPERTIES(l) READONLYIF isReadonly() notCalcServiceStatus
    PROPERTIES(l) READONLY nameServiceStatus BACKGROUND backgroundServiceStatus(l)
;
