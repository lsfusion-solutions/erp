MODULE PurchaseInputBalance;

REQUIRE PurchaseInvoice, PricingPurchase, PurchaseManufacturingPrice;

NAMESPACE Purchase;

CLASS InputBalance 'Ввод начальных остатков';
CLASS InputBalanceDetail 'Строка начальных остатков';

@defineDocument(inputBalance);
@deriveDocumentHeaderTimePrefix(InputBalance, );

@defineDocumentHeaderNumber(InputBalance, BPSTRING[2]);
@defineNumeratedDefault(InputBalance, 'Ввод начальных остатков', 'НО');

@defineDocumentHeaderLegalEntity(inputBalanceDetail, supplier, 'Поставщик');
@defineDocumentDialogLegalEntity(inputBalanceDetail, supplier, supplier);

@defineDocumentDataStock (inputBalance, stock, 'Склад', );
@defineDocumentDialogStocks(inputBalance, stock, company, , );

@defineDocumentDescription (inputBalance, 'Ввод начальных остатков');
@defineDocumentCurrency (inputBalance);
@deriveDocumentCurrency(inputBalance, stock);
@defineDocumentDetailSku(inputBalance, sku);

@defineDocumentDetailQuantity (inputBalance);
@defineDocumentDetailPriceCustomPrefix (inputBalanceDetail, , ' поставщика');

@defineDocumentDetailPriceCustomPrefix(inputBalanceDetail, retail, ' розничная');

@defineDocumentDetailPriceCustomPrefix(inputBalanceDetail, manufacturing, ' изготовителя');

@defineDocumentHeaderQuantity (inputBalance);

@defineAddDetailDialogSkuStock(inputBalance, sku, stock, dialogSku);
@defineAddDetailDialogBarcode(inputBalance, sku);

FORM inputBalance 'Ввод начальных остатков'

    OBJECTS i=InputBalance PANEL

    PROPERTIES(i) nameNumerator, number, series, nameStock ON CHANGE changeStockCompany(i), 
                  date, time, nameCurrency, quantityInputBalanceDetail, countInputBalanceDetail, note

    OBJECTS d = InputBalanceDetail
    PROPERTIES(d)   index,
                    idBarcodeSku, nameSku, shortNameUOMSku, nameSupplier ON CHANGE changeSupplierSupplier(d),                    
                    quantity, price, retailPrice, manufacturingPrice                    
                    
    PROPERTIES(d)   NEW, deletedd=DELETE GRID

    PROPERTIES(i) DRAW d addDetailDialogSkuStockInputBalanceDetail,
                             addDetailInputBarcodeInputBalanceDetail, deleteInputBalanceDetail

    FILTERS         inputBalance(d) == i

    EDIT InputBalance OBJECT i
;
DESIGN inputBalance {
    BOX {
        size = (1024, 768);
        NEW headerBox {
            horizontal = TRUE;

            NEW headerRow1 {
                fill = 1;
                MOVE GROUP(documentHeader,i) {
                    lines = 1;
                    type = CONTAINERV;
                    NEW first {
                        horizontal = TRUE;
                        MOVE PROPERTY(nameStock(i));
                    }
                    NEW second { 
                        horizontal = TRUE;
                        MOVE PROPERTY(nameNumerator(i));
                        MOVE PROPERTY(number(i));
                        MOVE PROPERTY(series(i));
                        MOVE PROPERTY(date(i));
                        MOVE PROPERTY(time(i));
                    }                
                }

                NEW headerTabbedPane {
                    alignment = STRETCH;
                    NEW headerMainParams {
                        caption = 'Основные параметры';
                        MOVE GROUP(documentPrm,i) {
                            type = COLUMNS;
                            lines = 2;
                        }
                    }
                }
            }

            MOVE GROUP(documentSum,i) {
                lines = 1;
            }
        }
        NEW specificationBox {
            fill = 1;
            MOVE BOX(d) {
                caption = 'Спецификация';
            }
        }
        MOVE TOOLBARBOX;
    }
}

FORM inputBalances 'Ввод начальных остатков'

    OBJECTS i=InputBalance
    PROPERTIES (i) READONLYIF isReadonly() number, series, date, time, nameStock, nameCurrency
    PROPERTIES(i)  READONLY countInputBalanceDetail, quantityInputBalanceDetail
    PROPERTIES (i) READONLYIF isReadonly() note

    PROPERTIES(i)  READONLY PANEL createdNameUser, createdTime, createdHostnameComputer

    PROPERTIES (i) NEWSESSION NEW, EDIT 
    
    PROPERTIES (i) NEWSESSION deleted=DELETE  

    OBJECTS d=InputBalanceDetail
    PROPERTIES(d)   READONLY index,
                    idBarcodeSku, nameSku, shortNameUOMSku, nameSupplier,
                    quantity, price, retailPrice, manufacturingPrice

    FILTERS         inputBalance(d) == i
;
@extendFormFilterAccessStock(InputBalance, i, inputBalances, stock, company);

DESIGN inputBalances {
    BOX {
        size = (1024, 768);
        NEW documentContainer  {
            fill = 1;
            type = SPLITV;

            MOVE BOX(i) {
                fill = 2;
            }
            NEW documentDetail {
                fill = 1;
                tabbed = TRUE;

                MOVE BOX(d) {
                    caption = 'Спецификация';
                }
                NEW documentHistory {
                    caption = 'История';

                    MOVE GROUP(created,i);
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                    }
                }   
            }
        }
        MOVE TOOLBARBOX;
    }
}
@extendFormEditable(inputBalances);

NAVIGATOR {
    purchasePurchaseNavigator {
        NEW inputBalances;
    }
}


CONSTRAINT supplier(InputBalanceDetail d) AND NOT isSupplier(supplier(d))
    CHECKED BY supplier[InputBalanceDetail] MESSAGE 'Для строки ввода начальных остатков выбрана в качестве поставщика организация, не являющаяся поставщиком';             
    

relation (supplier, balance) = GROUP SUM quantity(InputBalanceDetail detail) BY supplier(detail), inputBalance(detail);

operation = DATA Operation (InputBalance);
nameOperation 'Операция (закупка)' (InputBalance i) = name(operation(i));
idOperation 'ID операции (закупка)' (InputBalance i) = id(operation(i));

EXTEND FORM inputBalance
    PROPERTIES(i) nameOperation
;

DESIGN inputBalance{
    first {
        MOVE PROPERTY(nameOperation(i));
    }
    PROPERTY(nameOperation(i)) {charWidth = 20;} 
}
EXTEND FORM inputBalances
    PROPERTIES(i) READONLYIF isReadonly() nameOperation BEFORE nameCurrency(i)
;

createInvoices 'Создать накладные (закупка)'  (InputBalance balance)  { 
    FOR relation(LegalEntity l, balance) DO {
        NEWSESSION {
            NEW invoice = Purchase.UserInvoice {
                supplier(invoice) <- l;
                customer(invoice) <- legalEntity(stock(balance));
                supplierStock(invoice) <- defaultStock(l);
                customerStock(invoice) <- stock(balance);
                currency(invoice) <- currency(balance);
                operation(invoice) <- operation(balance);
                isPosted(invoice) <- TRUE;
                
                FOR supplier(InputBalanceDetail detail) == l AND inputBalance(detail) == i NEW d = Purchase.UserInvoiceDetail DO {
                    userInvoice(d) <- invoice;
                    sku(d) <- sku(detail);
                    quantity(d) <- quantity(detail);
                    price(d) <- price(detail);
                    VAT(d) <- VAT(sku(d), country(customerStock(d)));
                    retailPrice(d) <- retailPrice(detail);
                    manufacturingPrice(d) <- manufacturingPrice(detail);                    
                }
            }
            apply();
        }
    }    
} TOOLBAR;

EXTEND FORM inputBalances
    PROPERTIES (i)  createInvoices
;
DESIGN inputBalances {
    documentDetail {
        NEW actionContainer {
            caption = 'Действия';
            horizontal = TRUE;
            NEW createdContainer {
                caption = 'Создание на основе';
                type = CONTAINERV;
        
                MOVE PROPERTY(createInvoices(i)) { alignment = STRETCH; };
            }
        }              
    }

}