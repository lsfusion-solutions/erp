MODULE PurchaseCreditNote;

REQUIRE CreditNote, PurchaseShipment, PurchaseOperation;

NAMESPACE Purchase;

//----------------------------------------------- Акт ---------------------------------------------------//

@defineCreditNote(' (закупка)', customer, customer, supplier, company, Purchase);
@defineCreditNotePaymentCondition(' (закупка)');
@extendFormFilterAccessStock(CreditNote, c, creditNotes, customerStock, company);
@defineCreditNoteBatch(customer, customer);
@defineCreditNoteBatchDialog();

CONSTRAINT supplier(UserCreditNote userCreditNote) AND NOT isSupplier(supplier(userCreditNote))
    CHECKED BY supplier[UserCreditNote] MESSAGE 'Для акта расхождения выбрано в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT customer(UserCreditNote userCreditNote) AND NOT isCompany(customer(userCreditNote))
    CHECKED BY customer[UserCreditNote] MESSAGE 'Для акта расхождения выбрано в качестве покупателя организация, не являющаяся компанией';

//------------------------------ Автоматическое проставление свойств -----------------------------//

@deriveDocumentLegalEntityDefaultStock(UserCreditNote, supplier, userCreditNote);
@defineDocumentLegalEntityStockAccess(UserCreditNote, customer, company, userCreditNote);

// -- Операция
@defineDocumentOperationContainer(creditNote ,c);
@extendFormFilterRoleAccess(creditNote, c, creditNotes);
@defineDocumentOperationConstraint(creditNote, 'акт расхождения (закупка)', Purchase);

@defineDocumentOperationRoleOver(userCreditNote, purchase);
@defineOperationProperty(createCreditNote, 'Акт расхождения', createContainer);
@deriveDocumentOperationProperty(UserInvoice, createCreditNote);

@defineOperationProperty(checkDateTimeCreditNote, 'Акт расхождения (польз.) должен быть создан позже даты поставки в накладной', constraintContainer);
checkDateTimeCreditNote 'Акт расхождения (польз.) должен быть создан позже даты поставки в накладной' (UserCreditNoteDetail d) = checkDateTimeCreditNote(operation(d));
CONSTRAINT (SETCHANGED (invoiceDetail(UserCreditNoteDetail d)) OR SETCHANGED (operation(d)) OR SETCHANGED (dateTime(d)) OR SET(isPosted(d)))
    AND isPosted(d) AND checkDateTimeCreditNote(d) AND dateTime(d) <= shipmentDateTime(invoiceDetail(d))
    MESSAGE 'Акт расхождения (польз.) должен быть создан позже даты поставки в накладной';

@defineDocumentOperationLegalEntity(userCreditNote, supplier, 'Поставщик');
@deriveDocumentOperationLegalEntity(userCreditNote, supplier, userCreditNote);
@defineDocumentOperationLegalEntity(userCreditNote, customer, 'Покупатель');
@deriveDocumentOperationLegalEntity(userCreditNote, customer, userCreditNote);
@defineDocumentOperationStock(userCreditNote, supplier, 'Склад поставщика');
@deriveDocumentOperationStock(userCreditNote, supplier, userCreditNote);
@defineDocumentOperationStock(userCreditNote, customer, 'Склад покупателя');
@deriveDocumentOperationStock(userCreditNote, customer, userCreditNote);


operation(InvoiceCreditNote creditNote) += operation(invoice(creditNote));

//------------------------------ Расширение формы -----------------------------//

// Фильтры
EXTEND FORM userCreditNote

    FILTERGROUP filter
        FILTER 'С остатком ' currentBalance(ks, st) 'F10' 
        FILTER 'В документе ' quantityCustomer(ks, c, st) 'F9'

;

EXTEND FORM userCreditNote

    FILTERGROUP filter3
        FILTER 'С остатком ' prevCurrentBalance(b, sto) 'F10' DEFAULT
        FILTER 'В документе ' quantityCustomer(b, c, sto) 'F9'
;

NAVIGATOR {
    purchasePurchaseNavigator {
        NEW creditNotes;
    }
}

//------------------- Печатные формы ----------------------//

overShortNameUOMSku = ABSTRACT ISTRING[100] (InvoiceCreditNoteDetail);

FORM creditNotePrint 'Акт расхождений'
    OBJECTS c = CreditNote PANEL SUBREPORT 
    PROPERTIES (c) READONLY seriesNumber, date, fullNameSupplier, nameSupplierStock, 
                            fullNameCustomer, addressCustomer, nameCustomerStock, addressCustomerStock,
                            seriesNumberContractSku, quantityCreditNoteDetail, sumCreditNoteDetail,
                            VATSumCreditNoteDetail, invoiceSumCreditNoteDetail, note

    OBJECTS d = CreditNoteDetail
    PROPERTIES (d) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku, overShortNameUOMSku,
                            quantity, price, sum, numberVAT, 
                            valueVAT, VATSum, invoiceSum,
                            documentQuantity, documentVATSum, documentInvoiceSum,
                            shipmentQuantity, shipmentVATSum, shipmentInvoiceSum
    ORDERS index(d)
    FILTERS creditNote(d) == c
;        

print 'Акт расхождения' (CreditNote creditNote)  { PRINT creditNotePrint OBJECTS c = creditNote; }  IMAGE 'print.png';
EXTEND FORM creditNotes 
    PROPERTIES(c) print  
;
DESIGN creditNotes {
    printContainer{
        MOVE PROPERTY(print(c));
    }    
}

printCreditNote 'Акт расхождения' (Invoice invoice)  { print(invoiceCreditNote(invoice)); } IMAGE 'print.png' IN print; 

EXTEND FORM invoices
    PROPERTIES(i)  printCreditNote SHOWIF invoiceCreditNote(i)
;

DESIGN invoices{
    printContainer{
        MOVE PROPERTY(printCreditNote(i));
    }
}

quantityCreditNoteDetail 'Кол-во' (UserInvoice i) = quantityCreditNoteDetail(invoiceCreditNote(i)) IN creditNote;
sumCreditNoteDetail 'Сумма без НДС' (UserInvoice i) = sumCreditNoteDetail(invoiceCreditNote(i)) IN creditNote;
VATSumCreditNoteDetail 'Сумма НДС' (UserInvoice i) = VATSumCreditNoteDetail(invoiceCreditNote(i)) IN creditNote;
invoiceSumCreditNoteDetail 'Сумма с НДС' (UserInvoice i) = invoiceSumCreditNoteDetail(invoiceCreditNote(i)) IN creditNote;

filterCreditNoteDateFrom 'Дата с' = DATA LOCAL DATE ();
filterDateFrom (CreditNote c) = date(c) >= filterCreditNoteDateFrom() OR (c IS CreditNote AND NOT filterCreditNoteDateFrom());      

filterCreditNoteDateTo 'Дата по' = DATA LOCAL DATE ();
filterDateTo (CreditNote c) = date(c) <= filterCreditNoteDateTo() OR (c IS CreditNote AND NOT filterCreditNoteDateTo());      

filterCreditNoteOperation  = DATA LOCAL Operation ();
nameFilterCreditNoteOperation 'Операция' = name(filterCreditNoteOperation()) CHARWIDTH 15;          
filterOperation (CreditNote c) = operation(c) == filterCreditNoteOperation() OR (c IS CreditNote AND NOT filterCreditNoteOperation());  

filterCreditNoteCustomer  = DATA LOCAL LegalEntity ();
nameFilterCreditNoteCustomer 'Покупатель' = name(filterCreditNoteCustomer()) CHARWIDTH 15;          
filterCustomer (CreditNote c) = customer(c) == filterCreditNoteCustomer() OR (c IS CreditNote AND NOT filterCreditNoteCustomer());    

filterCreditNoteCustomerStock  = DATA LOCAL Stock ();
nameFilterCreditNoteCustomerStock 'Склад покупателя' = name(filterCreditNoteCustomerStock()) CHARWIDTH 15;          
filterCustomerStock (CreditNote c) = customerStock(c) == filterCreditNoteCustomerStock() OR (c IS CreditNote AND NOT filterCreditNoteCustomerStock());  

filterCreditNoteSupplier = DATA LOCAL LegalEntity ();
nameFilterCreditNoteSupplier 'Поставщик' = name(filterCreditNoteSupplier()) CHARWIDTH 15;          
filterSupplier (CreditNote c) = supplier(c) == filterCreditNoteSupplier() OR (c IS CreditNote AND NOT filterCreditNoteSupplier());      

filterCreditNoteSupplierStock  = DATA LOCAL Stock ();
nameFilterCreditNoteSupplierStock 'Склад поставщика' = name(filterCreditNoteSupplierStock()) CHARWIDTH 15;          
filterSupplierStock (CreditNote c) = supplierStock(c) == filterCreditNoteSupplierStock() OR (c IS CreditNote AND NOT filterCreditNoteSupplierStock());      

EXTEND FORM creditNotes

    PROPERTIES() filterCreditNoteDateFrom, filterCreditNoteDateTo, nameFilterCreditNoteOperation, 
                 nameFilterCreditNoteSupplier, nameFilterCreditNoteSupplierStock, nameFilterCreditNoteCustomer, nameFilterCreditNoteCustomerStock
                 
    FILTERS filterDateFrom(c), 
            filterDateTo(c),
            filterOperation(c),
            filterSupplier(c),
            filterSupplierStock(c),
            filterCustomer(c),
            filterCustomerStock(c)
;

DESIGN creditNotes {
    BOX {
        NEW topFilters FIRST {
            caption = 'Фильтры';
            type = CONTAINERH; 
            alignment = STRETCH; 
            MOVE PROPERTY(filterCreditNoteDateFrom());
            MOVE PROPERTY(filterCreditNoteDateTo());
            MOVE PROPERTY(nameFilterCreditNoteOperation());
            MOVE PROPERTY(nameFilterCreditNoteSupplier());
            MOVE PROPERTY(nameFilterCreditNoteSupplierStock());  
            MOVE PROPERTY(nameFilterCreditNoteCustomer());
            MOVE PROPERTY(nameFilterCreditNoteCustomerStock());     
        }
    }
}