MODULE PurchaseSaleCreditNote;

REQUIRE PurchaseCreditNote, SaleCreditNote, SalePurchaseInvoice, PurchaseSaleOperation;

NAMESPACE Purchase;

//----------------------------------------------------------------------------//

// Создание акта расхождения на основе акта расхождения //

FORM creditNoteCreditNotes 'Акты расхождения'
    OBJECTS s = LegalEntity PANEL
    PROPERTIES (s) READONLY name
    OBJECTS c = LegalEntity PANEL
    PROPERTIES (c) READONLY name

    OBJECTS ss = Stock PANEL
    PROPERTIES (ss) READONLY name
    OBJECTS cs = Stock PANEL
    PROPERTIES (cs) READONLY name

    OBJECTS t=DATE PANEL
    PROPERTIES(t) VALUE

    OBJECTS o = CreditNote
    PROPERTIES (o) READONLY isPosted, number, series, date, time, nameCurrency,
                            countCreditNoteDetail, quantityCreditNoteDetail, sumCreditNoteDetail,
                            note
    FILTERS supplier(o) == s,
            customer(o) == c,
            supplierStock(o) == ss,
            customerStock(o) == cs,
            isPosted(o)

    FILTERGROUP filters1
        FILTER 'Только этой даты' date(o) == t 'F11' DEFAULT

    OBJECTS d = CreditNoteDetail

    PROPERTIES (d) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku
    PROPERTIES (d) READONLY quantity, price, sum, numberVAT, valueVAT,
                            VATSum, invoiceSum

    FILTERS creditNote(d) == o
;

DESIGN creditNoteCreditNotes {
    BOX {
        size = (1024, 768);
        NEW documentContainer BEFORE TOOLBARBOX {
            
            type = CONTAINERV;
            fill = 1;
            
            NEW headerBox1 {               
                type = CONTAINERV;
                NEW headerBox11 {
                    type = CONTAINERH;
                    caption = 'Поставщик';
                    MOVE BOX(s);
                    MOVE BOX(ss);
                }
                NEW headerBox12 {
                    type = CONTAINERH;
                    caption = 'Покупатель';
                    MOVE BOX(c);
                    MOVE BOX(cs);
                }
                MOVE BOX(t);
            }
            MOVE BOX(o) {fill = 1;}
            NEW documentDetail {
                fill = 1;
                type = TABBED;

                MOVE BOX(d) {
                    caption = 'Спецификация';
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                    }
                }
            }
        }
    }
}

overFillCreditNoteDetail ABSTRACT LIST (Sale.UserCreditNoteDetail, CreditNoteDetail);

fillCreditNote 'Заполнить на основе акта расхождения (закупка)'(Sale.UserCreditNote userCreditNote)   { 
    DIALOG creditNoteCreditNotes OBJECTS s = supplier(userCreditNote), c = customer(userCreditNote),
                                   ss = supplierStock(userCreditNote), cs = customerStock(userCreditNote),
                                   t = date(userCreditNote), o INPUT DO {
        FOR creditNote(CreditNoteDetail creditNoteDetail) == o NEW d = Sale.UserCreditNoteDetail DO {
            userCreditNote(d) <- userCreditNote;
            sku(d) <- sku(creditNoteDetail);
            batch(d) <- batch(creditNoteDetail);
            quantity (d) <- quantity(creditNoteDetail);
            VAT(d) <- VAT(creditNoteDetail);
            valueVAT(d) <- valueVAT(creditNoteDetail);
            price(d) <- price(creditNoteDetail);
            EXEC overFillCreditNoteDetail(d,creditNoteDetail);
        }
    }
} IN creditNote; // 

//----------------------------------------------------------------------------//

//GROUP creditNote 'Информация об акте расхождения' : base;

createSaleCreditNote 'Создать акт расхождения (продажа)' = ABSTRACT BOOLEAN (CreditNote) MATERIALIZED;
createSaleCreditNote 'Создать акт расхождения (продажа)' = DATA BOOLEAN (UserCreditNote);
createSaleCreditNote(UserCreditNote creditNote) += createSaleCreditNote(creditNote);

createSaleCreditNote 'Создать акт расхождения (продажа)' (CreditNoteDetail creditNoteDetail) = createSaleCreditNote(creditNote(creditNoteDetail))MATERIALIZED;
createSaleCreditNote 'Создать акт расхождения (продажа)' (UserCreditNoteDetail userCreditNoteDetail) = createSaleCreditNote(userCreditNote(userCreditNoteDetail));
backgroundSale 'Цвет' (CreditNote creditNote) = RGB(238, 220, 130) IF creditNote IS CreditNote;

isCompanyCustomer (UserCreditNote userCreditNote) =  isCompany(customer(userCreditNote));

//-- Задание договора 
returnContractSku = ABSTRACT ContractSku (CreditNote) MATERIALIZED;
seriesNumberReturnContractSku 'Номер договора' (CreditNote o) = seriesNumber[Contract](returnContractSku(o)) IN documentPrm;
dateFromReturnContractSku 'Дата договора' (CreditNote o) = dateFrom(returnContractSku(o)) IN documentPrm;

descriptionReturnContractSku 'Описание договора' (CreditNote o)= CONCAT ' ', seriesNumberReturnContractSku(o), ' от ' + dateFromReturnContractSku(o);

isCommissionReturn 'Продажа на комиссию' = ABSTRACT BOOLEAN (CreditNote) MATERIALIZED IN documentPrm;

returnContractSku = DATA ContractSku (UserCreditNote);
numberReturnContractSku 'Договор (номер)' (UserCreditNote o) = number[Contract](returnContractSku(o)) IN documentPrm;
seriesNumberReturnContractSku 'Договор (серия/номер)' (UserCreditNote o) = seriesNumber[Contract](returnContractSku(o)) IN documentPrm;
dateFromReturnContractSku 'Дата договора' (UserCreditNote o) = dateFrom(returnContractSku(o)) IN documentPrm;

descriptionReturnContractSku 'Описание договора' (UserCreditNote o)= CONCAT ' ', seriesNumberReturnContractSku(o), ' от ' + dateFromReturnContractSku(o);

replace(ContractSku c, ContractSku o) + { contractSku(UserCreditNote object) <- o WHERE contractSku(object) == c;}

isCommissionReturn 'Продажа на комиссию' = DATA BOOLEAN (UserCreditNote) IN documentPrm;
isCommissionReturn(UserCreditNote o) <- type(returnContractSku(o)) == ContractSkuType.commission
    WHEN CHANGED(returnContractSku(o));

WHEN LOCAL (CHANGED(supplier(UserCreditNote o)) OR CHANGED(customer(o)) OR CHANGED(supplierStock(o))
            OR CHANGED(customerStock(o)) OR CHANGED(date(o))) AND NOT CHANGED(contractSku(o)) DO {
            
    returnContractSku(o) <- OVERRIDE defaultContractSkuSupplierCustomer(supplierStock(o), customerStock(o), date(o)),
                                                   defaultContractSkuSupplierCustomer(supplier(o), customer(o), date(o)),
                                                   singleContractSkuSupplierCustomer(supplier(o), customer(o), date(o)) IF countContractSkuSupplierCustomer(supplier(o), customer(o), date(o)); 
}                                     
                                      

CONSTRAINT returnContractSku(UserCreditNote o) AND NOT supplier(o) == partyA(returnContractSku(o))
    CHECKED BY returnContractSku[UserCreditNote] MESSAGE 'Организация (поставщик) договора накладной не соответствует организация (поставщик) накладной';

CONSTRAINT returnContractSku(UserCreditNote o) AND NOT customer(o) == partyB(returnContractSku(o))
    CHECKED BY returnContractSku[UserCreditNote] MESSAGE 'Организация (покупатель) договора накладной не соответствует организация (покупатель) накладной';    
    
returnContractSku(UserCreditNote o) += returnContractSku(o);
isCommissionReturn(UserCreditNote o) += isCommissionReturn(o);


EXTEND FORM userCreditNote
    PROPERTIES(c) BACKGROUND backgroundSale(c) SHOWIF isCompanyCustomer(c) createSaleCreditNote
    PROPERTIES(c) BACKGROUND backgroundSale(c) SHOWIF createSaleCreditNote(c) seriesNumberReturnContractSku
;
DESIGN userCreditNote {
    headerRow12 {
        NEW headerCreateSale {              
            type = CONTAINERV;
            caption = 'Акт расхождения (продажа)';                
            MOVE PROPERTY(createSaleCreditNote(c));
            MOVE PROPERTY(seriesNumberReturnContractSku(c));
        }
    }
}

//--  Связь акта с актом

creditNoteDetail = ABSTRACT CreditNoteDetail (Sale.CreditNoteDetail) MATERIALIZED INDEXED;
creditNoteDetail = DATA CreditNoteDetail (Sale.UserCreditNoteDetail) INDEXED;
creditNoteDetail(Sale.UserCreditNoteDetail creditNoteDetail) += creditNoteDetail(creditNoteDetail);

CONSTRAINT supplier(Sale.UserCreditNoteDetail detail) != supplier(creditNoteDetail(detail)) OR
           supplierStock(detail) != supplierStock(creditNoteDetail(detail)) OR
           customer(detail) != customer(creditNoteDetail(detail)) OR
           customerStock(detail) != customerStock(creditNoteDetail(detail)) OR
           sku(detail) != sku(creditNoteDetail(detail))
    CHECKED BY creditNoteDetail[Sale.UserCreditNoteDetail]
        MESSAGE 'Поставщик, покупатель, склад поставщика и склад покупателя в акте расхождения и в акте расхождения на основе акта должны соответствовать друг другу';


descriptionIndexCreditNoteDetail 'Строка акта расхождения (закупка)' (Sale.CreditNoteDetail detail) = descriptionIndex(creditNoteDetail(detail));
descriptionIndexCreditNoteDetail 'Строка акта расхождения (закупка)' (Sale.UserCreditNoteDetail detail) = descriptionIndex(creditNoteDetail(detail));

quantityCreditNoteDetail (purchase, sale) = GROUP SUM quantity(Sale.CreditNoteDetail detail) BY creditNote(creditNoteDetail(detail)), creditNote(detail);

purchaseCreditNotes 'Накладные (закупка)' (Sale.CreditNote sale) = GROUP
                                                        CONCAT STRING[255](description(CreditNote purchase)) IF quantityCreditNoteDetail(purchase, sale) , ', '
                                                        ORDER sale IN creditNote CHARWIDTH 30 MATERIALIZED;

relationSale 'Связь' (Sale.CreditNote sale) = GROUP SUM quantityCreditNoteDetail (CreditNote purchase, sale) MATERIALIZED;

EXTEND FORM Sale.userCreditNote
    PROPERTIES(c) fillCreditNote, purchaseCreditNotes READONLY
;
DESIGN Sale.userCreditNote { headerRow12{ type = CONTAINERH; MOVE GROUP(creditNote,c) { columns = 1; type = CONTAINERV; }}}



CLASS SaleCreditNote 'Акт расхождения на основе акта расхождений': Sale.CreditNote;
CLASS SaleCreditNoteDetail 'Строка акта расхождений на основе акта расхождений' : Sale.CreditNoteDetail;

@defineDocumentTables(saleCreditNote);

@defineDocumentAggregation(creditNote, saleCreditNote, createSaleCreditNote);
creditNote(SaleCreditNoteDetail detail) += saleCreditNote(detail);

index(SaleCreditNoteDetail detail) += index(detail);

date(SaleCreditNote creditNote) += date(creditNote);
time(SaleCreditNote creditNote) += time(creditNote);

@defineDocumentAggregationStockPrefix(creditNote, saleCreditNote, supplier, 'Склад поставщика', , );
@defineDocumentAggregationStockPrefix(creditNote, saleCreditNote, customer, 'Склад покупателя', , );

@defineDocumentAggregationLegalEntityPrefix(creditNote, saleCreditNote, supplier, 'Поставщик', , );
@defineDocumentAggregationLegalEntityPrefix(creditNote, saleCreditNote, customer, 'Покупатель', , );

supplierStock(SaleCreditNote creditNote) += IF returnContractSku(creditNote(creditNote))
                                                THEN customerStock(creditNote)
                                                ELSE supplierStock(creditNote);
customerStock(SaleCreditNote creditNote) += IF returnContractSku(creditNote(creditNote))
                                                THEN supplierStock(creditNote)
                                                ELSE customerStock(creditNote);

supplier(SaleCreditNote creditNote) += IF returnContractSku(creditNote(creditNote))
                                                THEN customer(creditNote)
                                                ELSE supplier(creditNote);
customer(SaleCreditNote creditNote) += IF returnContractSku(creditNote(creditNote))
                                                THEN supplier(creditNote)
                                                ELSE customer(creditNote);

@defineDocumentAggregationPosted(creditNote, saleCreditNote);
isPosted[Sale.CreditNote](SaleCreditNote creditNote) += isPosted(creditNote);

@defineDocumentAggregationClosed(creditNote, saleCreditNote);
isClosed[Sale.CreditNote](SaleCreditNote creditNote) += isClosed(creditNote);

number[Sale.CreditNote](SaleCreditNote creditNote) += number(creditNote(creditNote));
series[Sale.CreditNote](SaleCreditNote creditNote) += series(creditNote(creditNote));
seriesNumber 'Серия/номер документа' (SaleCreditNote saleCreditNote) = seriesNumber(creditNote(saleCreditNote));

noteCreditNote 'Примечание' (SaleCreditNote saleCreditNote) = note(creditNote(saleCreditNote));
note[Sale.CreditNote](SaleCreditNote creditNote) += noteCreditNote(creditNote);

currency  (SaleCreditNote saleCreditNote) = currency(creditNote(saleCreditNote));
currency (SaleCreditNote creditNote) += currency(creditNote);

@defineDocumentDescription(saleCreditNote, SaleCreditNoteDetail, 'Акт расхождения на основе акта расхождения');
description[Sale.CreditNote] (SaleCreditNote creditNote) += description(creditNote);

contractSku (SaleCreditNote creditNote) += IF returnContractSku(creditNote(creditNote)) 
                                               THEN returnContractSku(creditNote(creditNote))
                                               ELSE contractSku(creditNote(creditNote));
isCommission (SaleCreditNote creditNote) += IF returnContractSku(creditNote(creditNote))
                                                THEN isCommissionReturn(creditNote(creditNote))
                                                ELSE isCommission(creditNote(creditNote));

@defineDocumentAggregationDetailSku(creditNote, saleCreditNote, sku);
sku[Sale.CreditNoteDetail](SaleCreditNoteDetail creditNoteDetail) +=  sku(creditNoteDetail);

@defineDocumentAggregationDetailBatch(creditNote, saleCreditNote);
batch[Sale.CreditNoteDetail](SaleCreditNoteDetail creditNoteDetail) += batch(creditNoteDetail);

quantity[Sale.CreditNoteDetail](SaleCreditNoteDetail creditNoteDetail) += quantity(creditNoteDetail(creditNoteDetail));
//Sale.priceListTypeCreditNoteDetail(creditNoteDetail) += priceListTypeCreditNoteDetail(creditNoteDetailSaleCreditNoteDetail(creditNoteDetail));

price(SaleCreditNoteDetail creditNoteDetail) += price(creditNoteDetail(creditNoteDetail));
sum[Sale.CreditNoteDetail](SaleCreditNoteDetail creditNoteDetail) += sum(creditNoteDetail(creditNoteDetail));
VAT(SaleCreditNoteDetail creditNoteDetail) += VAT(creditNoteDetail(creditNoteDetail));
valueVAT(SaleCreditNoteDetail creditNoteDetail) += valueVAT(creditNoteDetail(creditNoteDetail));
VATSum(SaleCreditNoteDetail creditNoteDetail) += VATSum(creditNoteDetail(creditNoteDetail));
invoiceSum(SaleCreditNoteDetail creditNoteDetail) += invoiceSum(creditNoteDetail(creditNoteDetail));

edit(SaleCreditNote creditNote) + {  edit(creditNote(creditNote)); }

creditNoteDetail(SaleCreditNoteDetail creditNoteDetail) += creditNoteDetail(creditNoteDetail);

@defineDocumentInterfaceOperationPrefix (creditNote, sale, Sale, ' (продажа)');

operation[Sale.CreditNote](SaleCreditNote creditNote) += saleOperation(creditNote(creditNote));

EXTEND FORM userCreditNote
    PROPERTIES(c) BACKGROUND backgroundSale(c) SHOWIF createSaleCreditNote(c) nameSaleOperation

;

DESIGN userCreditNote {
    headerCreateSale {                        
        MOVE PROPERTY(nameSaleOperation(c));
    }
}

//-- Действие

overFillCreditNote  ABSTRACT LIST ( Sale.UserCreditNote, CreditNote);
overFillCreditNote  ABSTRACT LIST ( Sale.UserCreditNoteDetail, CreditNoteDetail);

moveUserCreditNote 'Акт расхождения (продажа)'(CreditNote creditNote)   { 
	NEWSESSION{
	
	    NEW i = Sale.UserCreditNote {
	
	        supplier(i) <- supplier(creditNote);
	        customer(i) <- customer(creditNote);
	        supplierStock(i) <- supplierStock(creditNote);
	        customerStock(i) <- customerStock(creditNote);
	        number(i) <- number(creditNote);
	        series(i) <- series(creditNote);
	        note(i) <- note(creditNote);
	        currency(i) <- currency(creditNote);
	        contractSku(i) <- contractSku(creditNote);
	        isCommission(i) <- isCommission(creditNote);
	        operation(i) <- saleOperation(operation(creditNote));
	        EXEC overFillCreditNote(i, creditNote);
	
	        FOR creditNote(CreditNoteDetail detail)==creditNote NEW d = Sale.UserCreditNoteDetail DO {
	
	            userCreditNote(d) <- i;
	
	            sku(d) <- sku(detail);
	            quantity (d) <- quantity(detail);
	            VAT (d) <- VAT(detail);
	            price (d) <- price(detail);
	
	            batch(d) <- batch(detail);
	            EXEC overFillCreditNote(d,detail);
	        }
	
	    SHOW Sale.userCreditNote OBJECTS c = i DOCKED NOCANCEL;
	    }
	}
} TOOLBAR;

EXTEND FORM creditNotes
    PROPERTIES(c) moveUserCreditNote
;
DESIGN creditNotes {
    createdContainer{
        MOVE PROPERTY(moveUserCreditNote(c)) { alignment = STRETCH; };
    }
}

