MODULE PurchaseInvoiceRRP;

REQUIRE PurchaseInvoice, AgreementRRP;

NAMESPACE Purchase;

//------------------------- Рекомендуемая розничная цена-------------------------//
@defineDocumentInterfaceHeaderProperty (invoice, showRRP, 'RRP');

// -- Операция
@defineOperationProperty(showRRP, 'RRP', commonContainer);
@deriveDocumentOperationProperty(UserInvoice, showRRP);

@defineDocumentInterfaceDetailPriceListType (invoice, priceListType, RRP, ' (RRP)');

RRPPriceListType(UserInvoiceDetail userInvoiceDetail) <- RRPPriceListType(agreement(userInvoice(userInvoiceDetail)))
    WHEN CHANGED (agreement(userInvoice(userInvoiceDetail)));

currencyRRP (UserInvoiceDetail userInvoiceDetail) = currency(RRPPriceListType(userInvoiceDetail));
nameCurrencyRRP 'Валюта (RRP)' (UserInvoiceDetail userInvoiceDetail) = name(currencyRRP(userInvoiceDetail));

currencyRRP (InvoiceDetail invoiceDetail) = currency(RRPPriceListType(invoiceDetail));
nameCurrencyRRP 'Валюта (RRP)' (InvoiceDetail invoiceDetail) = name(currencyRRP(invoiceDetail));

@defineDocumentInterfaceDetailPriceCustomPrefix (invoiceDetail, RRP, ' (RRP)');
WHEN LOCAL (CHANGED(RRPPriceListType(UserInvoiceDetail detail)) OR
         CHANGED(sku(detail)) OR
         CHANGED(customerStock(detail)) OR
         CHANGED(dateTime(detail))) AND PriceListType pt == RRPPriceListType(detail) NOINLINE (pt) DO
    RRPPrice (detail)  <-  prevPriceB(pt,
                                                                                    sku(detail),
                                                                                    customerStock(detail),
                                                                                    dateTime(detail));

EXTEND FORM userInvoice
    PROPERTIES(i) showRRP
    PROPERTIES(d) SHOWIF showRRP(i) BEFORE deleteid nameRRPPriceListType, nameCurrencyRRP READONLY, RRPPrice
;
DESIGN userInvoice {
    headerExtraParams {
        NEW headerRRP {
            caption = 'RRP';
            MOVE PROPERTY(showRRP(i));
        }
    }
}


EXTEND FORM invoices
    PROPERTIES(d) READONLY SHOWIF showRRP(i) nameRRPPriceListType, nameCurrencyRRP, RRPPrice
;

// Создаем виды цен
EXTEND CLASS SystemLedgerPriceListType { purchaseRRPInvoiceStockPriceListType 'RRP (последняя по складу)' }
batch (SystemLedgerPriceListType type, Stock stock) += WHEN type == SystemLedgerPriceListType.purchaseRRPInvoiceStockPriceListType AND isCompany(stock)
                                               THEN priceBatchLedger(stock);
in (InvoiceDetail ledger, SystemLedgerPriceListType type) += WHEN ledger IS InvoiceDetail AND type == SystemLedgerPriceListType.purchaseRRPInvoiceStockPriceListType THEN TRUE;
price (InvoiceDetail ledger, SystemLedgerPriceListType type) += WHEN ledger IS InvoiceDetail AND type == SystemLedgerPriceListType.purchaseRRPInvoiceStockPriceListType THEN RRPPrice(ledger);

//// Тип обмена для RRP, пок не используется.
//RRPTypeExchangeInvoiceDetail  (invoiceDetail) = ABSTRACT TypeExchange (InvoiceDetail) MATERIALIZED;
//nameRRPTypeExchangeInvoiceDetail 'Тип обмена (RRP)' (invoiceDetail)= name(RRPTypeExchangeInvoiceDetail(invoiceDetail)) CHARWIDTH 10;
//
//RRPTypeExchangeUserInvoiceDetail (userInvoiceDetail) = DATA TypeExchange (UserInvoiceDetail);
//nameRRPTypeExchangeUserInvoiceDetail 'Тип обмена (RRP)' (userInvoiceDetail)= name(RRPTypeExchangeUserInvoiceDetail(userInvoiceDetail)) CHARWIDTH 10;
//
//CONSTRAINT currencyRRPUserInvoiceDetail(detail) != currencyTypeExchange(RRPTypeExchangeUserInvoiceDetail(detail))
//    CHECKED BY RRPTypeExchangeUserInvoiceDetail MESSAGE 'В накладной валюта типа обмена RRP не соавпадает с валютой вида цены RRP';
//
//RRPTypeExchangeInvoiceDetail(invoiceDetail) += RRPTypeExchangeUserInvoiceDetail(invoiceDetail);
//
//@defineDocumentInterfaceDetailPriceCustomPrefix (invoiceDetail, RRPExchange, ' (RRP) конвертированная');
//
//RRPExchangePriceUserInvoiceDetail (detail)  <-  roundPriceCurrency(           // Какое ставить округление?????
//    RRPPriceUserInvoiceDetail (detail)*rateOnTypeExchangeCurrencyDate(
//        RRPTypeExchangeUserInvoiceDetail(detail), currencyUserInvoiceDetail(detail), dateUserInvoiceDetail(detail)),
//            currencyUserInvoiceDetail(detail))
//
//        WHEN CHANGED(RRPTypeExchangeUserInvoiceDetail(detail)) OR
//             CHANGED(currencyUserInvoiceDetail(detail)) OR
//             CHANGED(dateUserInvoiceDetail(detail)) OR
//             CHANGED(RRPPriceUserInvoiceDetail (detail));
//
//showRRPExchangePriceInvoice(invoice) = [ GROUP SUM 1 IF NOT currencyInvoiceDetail(invoiceDetail) == currencyRRPInvoiceDetail(invoiceDetail) BY invoiceInvoiceDetail(invoiceDetail)](
//    invoice) AND showRRPInvoice(invoice);
