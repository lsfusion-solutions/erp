MODULE PurchaseInvoiceWholesalePrice;

REQUIRE PurchaseInvoice, PriceListCalc;

NAMESPACE Purchase;

//------------------------- Оптовая цена-------------------------//
@defineDocumentInterfaceHeaderProperty(invoice, showWholesalePrice, 'Оптовая цена');

// -- Операция
@defineOperationProperty(showWholesalePrice, 'Оптовые цены', priceContainer);
@deriveDocumentOperationProperty(UserInvoice, showWholesalePrice);

// Вид цены (надбавка) для всего инвойса
@defineDocumentInterfaceHeaderPriceListType (invoice, calcPriceListType, wholesale, ' (надбавка)');
wholesaleCalcPriceListType = DATA CalcPriceListType (Operation);
nameWholesaleCalcPriceListType 'Вид цен (надбавка) оптовая' (Operation operation) = name(wholesaleCalcPriceListType(operation));

EXTEND FORM operation
    PROPERTIES(o) nameWholesaleCalcPriceListType
;
DESIGN operation {
    priceContainer {
        NEW wholesalePriceContainer{
            caption = 'Оптовая цена';
            MOVE PROPERTY(showWholesalePrice(o));
            MOVE PROPERTY(nameWholesaleCalcPriceListType(o));
        }
    }
}

wholesaleCalcPriceListType (UserInvoice invoice) <- wholesaleCalcPriceListType(operation(invoice))
    WHEN CHANGED(operation(invoice));


@defineDocumentInterfaceDetailPriceListType (invoice, calcPriceListType, wholesale, ' (опт)');

overWholesaleCalcPriceListType = ABSTRACT CASE  CalcPriceListType (UserInvoiceDetail);

WHEN LOCAL FORMS userInvoice
    (CHANGED(sku(UserInvoiceDetail detail)) OR
     CHANGED(supplierStock(detail)) OR
     CHANGED(customerStock(detail)) OR
     (CHANGED(dateTime(detail)) AND NOT isPosted(detail))) DO
     wholesaleCalcPriceListType(detail) <- OVERRIDE overWholesaleCalcPriceListType(detail), wholesaleCalcPriceListType(userInvoice(detail));

// Объявляем цену для строки
@defineDocumentInterfaceDetailPriceCustomPrefix (invoiceDetail, wholesale, ' (оптовая)');
@defineDocumentInterfaceDetailMarkupCustomPrefix (invoiceDetail, wholesale, ' (оптовая)');

overBasePrice = ABSTRACT NUMERIC[16,4] (InvoiceDetail);
overBasePrice = ABSTRACT NUMERIC[16,4] (UserInvoiceDetail);
overBasePrice (UserInvoiceDetail detail) += overBasePrice(detail);

extraWholesalePrice = ABSTRACT NUMERIC[16,4] (InvoiceDetail) MATERIALIZED;

basePrice (InvoiceDetail detail) = OVERRIDE overBasePrice(detail), price(detail) MATERIALIZED;
basePrice (UserInvoiceDetail detail) = OVERRIDE overBasePrice(detail), price(detail) MATERIALIZED;

wholesaleMarkup(UserInvoiceDetail detail) <- markup(wholesaleCalcPriceListType(detail), sku(detail))
    WHEN CHANGED(wholesaleCalcPriceListType(detail)) OR
         CHANGED(sku(detail));

wholesalePrice(UserInvoiceDetail detail) <- round((basePrice(detail) * (wholesaleMarkup(detail) + 100)/ 100),
                                                                    roundCondition(wholesaleCalcPriceListType(detail))) (+) extraWholesalePrice(detail)
    WHEN CHANGED(basePrice(detail)) OR
         CHANGED(wholesaleMarkup(detail)) OR
         CHANGED(wholesaleCalcPriceListType(detail)) OR
         CHANGED(currency(detail));

calcWholesaleMarkup(UserInvoiceDetail detail)  = [ round2((X/Y-1)*100)](
    wholesalePrice(detail),
    basePrice(detail) IF basePrice(detail)!= 0.0);

changeWholesalePrice(UserInvoiceDetail detail)  { 
    INPUT n = NUMERIC[16,4] DO {
        wholesalePrice(detail) <- n;
        wholesaleMarkup(detail) <- calcWholesaleMarkup(detail);
    }
}

changeWholesaleMarkup (UserInvoiceDetail detail)  { 
    INPUT n = NUMERIC[8,3] DO {
        wholesaleMarkup(detail) <- n;
        IF n THEN
            wholesalePrice(detail) <- round((basePrice(detail) * (wholesaleMarkup(detail) + 100)/ 100),
                                                                                roundCondition(wholesaleCalcPriceListType(detail))) (+) extraWholesalePrice(detail);
        ELSE                                                                                
            wholesalePrice(detail) <- basePrice(detail) (+) extraWholesalePrice(detail);  
    }
} 

calcWholesalePrice(UserInvoiceDetail detail)  = round([ X*(Y+100)/100](
    basePrice(detail),
    wholesaleMarkup(detail)),currency(detail));

backgroundWholesale 'Цвет' (Invoice invoice) = RGB(238, 250, 200) IF invoice IS Invoice;

EXTEND FORM userInvoice
    PROPERTIES(i) BACKGROUND backgroundWholesale(i) showWholesalePrice, nameWholesaleCalcPriceListType SHOWIF showWholesalePrice(i)
    PROPERTIES(d) BACKGROUND backgroundWholesale(i) SHOWIF showWholesalePrice(i) BEFORE deleteid nameWholesaleCalcPriceListType, 
                  wholesaleMarkup ON CHANGE changeWholesaleMarkup(d),
                  wholesalePrice ON CHANGE changeWholesalePrice(d)
;
DESIGN userInvoice {
    headerExtraParams {
        NEW headerWholesale {
            caption = 'Оптовая цена';
            MOVE PROPERTY(showWholesalePrice(i));
            MOVE PROPERTY(nameWholesaleCalcPriceListType(i));
        }
    }
}

EXTEND FORM invoices
    PROPERTIES(d) READONLY BACKGROUND backgroundWholesale(i) SHOWIF showWholesalePrice(i) nameWholesaleCalcPriceListType, wholesaleMarkup, wholesalePrice
;

// Создаем виды цен
EXTEND CLASS SystemLedgerPriceListType { purchaseWholesaleInvoiceStockPriceListType 'Оптовая (последняя по складу)' }
batch (SystemLedgerPriceListType type, Stock stock) += WHEN type == SystemLedgerPriceListType.purchaseWholesaleInvoiceStockPriceListType AND isCompany(stock)
                                               THEN priceBatchLedger(stock);
in (InvoiceDetail ledger, SystemLedgerPriceListType type) += WHEN wholesalePrice(ledger) AND type == SystemLedgerPriceListType.purchaseWholesaleInvoiceStockPriceListType THEN TRUE;
price (InvoiceDetail ledger, SystemLedgerPriceListType type) += WHEN wholesalePrice(ledger) AND type == SystemLedgerPriceListType.purchaseWholesaleInvoiceStockPriceListType THEN wholesalePrice(ledger);
