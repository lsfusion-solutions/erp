MODULE PurchaseInvoiceArticle;

REQUIRE PurchaseInvoice, OrderLedgerArticle, CustomsGroupArticle;

NAMESPACE Purchase;


//------------------------------ Расширение формы (артикул)-----------------------------//

@defineDocumentArticle(userInvoice, sku, customerStock);
@extendFormDocumentArticleCustom(userInvoice, userInvoice, i, customer, customerStock);

@extendFormDocumentArticleOrderLedger(userInvoice, customerStock);

//--------------------- Добавление товара --------------------//

CLASS UserInvoiceArticleDetail 'Строка накладной/артикул (польз.) (закупка)';

@defineDocumentRelation(userInvoice, UserInvoice, UserInvoiceArticleDetail, );

article = DATA Article (UserInvoiceArticleDetail);
idArticle 'Код артикула' (UserInvoiceArticleDetail d) = id(article(d));
originalCaptionArticle 'Наименование (ориг.)' (UserInvoiceArticleDetail d) = originalCaption(article(d));
originalCompositionArticle 'Состав (ориг.)' (UserInvoiceArticleDetail d) = originalComposition(article(d));
originalCustomsGroupArticle 'Код ТНВЭД' (UserInvoiceArticleDetail d) = originalCustomsGroup(article(d));
nameSizeGroupArticle 'Размерная сетка' (UserInvoiceArticleDetail d) = nameSizeGroup(article(d));
nameCountryArticle 'Страна' (UserInvoiceArticleDetail d) = nameCountry(article(d));
nameBrandArticle 'Бренд' (UserInvoiceArticleDetail d) = nameBrand(article(d));
canonicalNameItemGroupArticle 'Группа' (UserInvoiceArticleDetail d) = canonicalNameItemGroup(article(d));

price 'Цена' = DATA NUMERIC[16,4] (UserInvoiceArticleDetail);

userInvoiceArticleDetail = DATA UserInvoiceArticleDetail (UserInvoiceDetail);

replace(Article a, Article article) + { article(UserInvoiceArticleDetail d) <- article WHERE article(d) == a;}

//CONSTRAINT  d IS UserInvoiceDetail AND userInvoiceArticleDetailUserInvoiceDetail(d) 
//    AND NOT articleUserInvoiceArticleDetail(userInvoiceArticleDetailUserInvoiceDetail(d)) == articleItem(skuUserInvoiceDetail(d))
//        MESSAGE 'Артикул для строки накладной/артикул (польз.) (закупка) и артикл товара для строки накладной (польз.) (закупка) не соответствуют друг другу';

changeIdArticle(UserInvoiceArticleDetail detail)  { 
    INPUT s = STRING[100] DO
        IF article(s) OR NOT s THEN {
            article(detail) <- article(s);    
        } ELSE {
            ASK 'Артикула с таким кодом нет, хотите добавить?' DO {
                NEW a = Article {
                    id(a) <- s;  
                    article(detail) <- a;  
                }
            }    
        }
    } 

changeOriginalCaptionArticle(UserInvoiceArticleDetail detail)  { 
    INPUT s = ISTRING[100] DO
        IF article(detail) THEN {
            originalCaption(Article a) <- s WHERE  article(detail) == a;
        } ELSE {
            MESSAGE 'Задайте вначале код артикула';   
        }
}

changeOriginalCompositionArticle(UserInvoiceArticleDetail detail)  { 
    INPUT s = STRING[255] DO
        IF article(detail) THEN {
            originalComposition(Article a) <- s WHERE  article(detail) == a;
        } ELSE {
            MESSAGE 'Задайте вначале код артикула';   
        }
}

changeOriginalCustomsGroupArticle(UserInvoiceArticleDetail detail)  { 
    INPUT s = BPSTRING[10] DO
        IF article(detail) THEN {
            originalCustomsGroup(Article a) <- s WHERE  article(detail) == a;
        } ELSE {
            MESSAGE 'Задайте вначале код артикула';   
        }
}

changeSizeGroupArticle(UserInvoiceArticleDetail detail)  { 
    DIALOG sizeGroups OBJECTS t INPUT DO 
        IF article(detail) THEN {
            sizeGroup(Article a) <- t WHERE article(detail) == a;
        } ELSE {
            MESSAGE 'Задайте вначале код артикула';   
        }
}

changeCountryArticle(UserInvoiceArticleDetail detail)  { 
    DIALOG countries OBJECTS c INPUT DO
        IF article(detail) THEN {
            country(Article a) <- c WHERE article(detail) == a;
        } ELSE {
            MESSAGE 'Задайте вначале код артикула';   
        }
}
changeBrandArticle(UserInvoiceArticleDetail detail)  { 
    DIALOG brands OBJECTS t INPUT DO
        IF article(detail) THEN {
            brand(Article a) <- t WHERE  article(detail) == a;
        } ELSE {
            MESSAGE 'Задайте вначале код артикула';   
        }
}
changeItemGroupArticle(UserInvoiceArticleDetail detail)  { 
    DIALOG dialogItemGroups OBJECTS g INPUT DO
        IF article(detail) THEN {
            itemGroup(Article a) <- g WHERE  article(detail) == a;
        } ELSE {
            MESSAGE 'Задайте вначале код артикула';   
        }
}

quantity 'Кол-во товара в документе' (cod,sid,detail, stock)=  GROUP SUM  quantity(UserInvoiceDetail userInvoiceDetail)
    BY  calcColor(sku(userInvoiceDetail)), calcSize(sku(userInvoiceDetail)), 
        userInvoiceArticleDetail(userInvoiceDetail), customerStock(userInvoiceDetail);
quantity 'Кол-во товара в документе' (Color color, Item.Size size, UserInvoiceArticleDetail detail) = quantity(color, size, detail, customerStock(userInvoice(detail)));
quantity 'Итого по артиклу' (Color color, UserInvoiceArticleDetail detail) = GROUP
    SUM quantity(color, Item.Size size, detail);
quantityUserInvoiceArticleDetails 'Итого' (Color color) = GROUP
    SUM quantity(color, Item.Size size, UserInvoiceArticleDetail detail);

userInvoiceDetail (color, size, detail, stock) = GROUP MAX UserInvoiceDetail userInvoiceDetail
    BY  calcColor(sku(userInvoiceDetail)), calcSize(sku(userInvoiceDetail)), 
        userInvoiceArticleDetail(userInvoiceDetail), customerStock(userInvoiceDetail);

userInvoiceDetail (Color color, Item.Size size, UserInvoiceArticleDetail detail)= userInvoiceDetail(color, size, detail, customerStock(userInvoice(detail)));
                       
changeQuantityValue(Color color, Item.Size size, UserInvoiceArticleDetail articleDetail, NUMERIC[14,3] n)  { 
    IF userInvoiceDetail(color, size, articleDetail) THEN {
        IF n THEN {
            quantity(UserInvoiceDetail d) <- n WHERE d == userInvoiceDetail(color, size, articleDetail);
        } ELSE {
            DELETE UserInvoiceDetail d WHERE d == userInvoiceDetail(color, size, articleDetail);
        }

    } ELSE {
        IF maxSku(article(articleDetail), color, size) THEN {               
            IF n THEN {
                NEW d = UserInvoiceDetail {
                   userInvoice(d) <- userInvoice(articleDetail);
                   userInvoiceArticleDetail(d) <- articleDetail;
                   sku(d) <- maxSku(article(articleDetail), color, size);
                   quantity (d) <- n;
                }
            }
        } ELSE {
            IF n THEN {
                ASK 'Товар с заданными характеристиками не найден, хотите добавить?' DO {
                    NEW i = Item { 
                        article(i) <- article(articleDetail);                      
                        color(i) <- color;
                        size(i) <- size;                          
                        
                        NEW d = UserInvoiceDetail {
                           userInvoice(d) <- userInvoice(articleDetail);
                           userInvoiceArticleDetail(d) <- articleDetail;
                           sku(d) <- i;
                           quantity (d) <- n;
                        }                                               
                    }
                }
            }    
        } 
          
    }
}
changeQuantity(Color color, Item.Size size, UserInvoiceArticleDetail articleDetail)  { 
    INPUT n = NUMERIC[14,3] DO
        changeQuantityValue(color, size, articleDetail, n);
}                                       
                                     
order (UserInvoiceArticleDetail detail, Item.Size size) = order(sizeGroup(article(detail)), size);                                         
   
quantity 'Кол-во' (articleDetail) = GROUP SUM quantity(UserInvoiceDetail d) BY userInvoiceArticleDetail(d);  
sum 'Сумма' (UserInvoiceArticleDetail articleDetail) = quantity(articleDetail) * price(articleDetail);  
count 'Кол-во строк' (articleDetail) = GROUP SUM 1 BY userInvoiceArticleDetail(UserInvoiceDetail d);  

WHEN LOCAL FORMS userInvoice CHANGED(price(userInvoiceArticleDetail(UserInvoiceDetail d))) DO {
    price(d) <- price(userInvoiceArticleDetail(d));            
} 

WHEN LOCAL FORMS userInvoice DROPPED(userInvoiceArticleDetail(UserInvoiceDetail d)) DO {
    DELETE d;
}        
                                       
EXTEND FORM userInvoice

    OBJECTS ad=UserInvoiceArticleDetail
    PROPERTIES(ad)  idArticle SHOWIF showIDs() ON CHANGE changeIdArticle(ad), 
                    nameSizeGroupArticle ON CHANGE changeSizeGroupArticle(ad),
                    nameCountryArticle ON CHANGE changeCountryArticle(ad),
                    nameBrandArticle ON CHANGE changeBrandArticle(ad),
                    canonicalNameItemGroupArticle ON CHANGE changeItemGroupArticle(ad),
                    originalCaptionArticle ON CHANGE changeOriginalCaptionArticle(ad), 
                    originalCompositionArticle ON CHANGE changeOriginalCompositionArticle(ad),
                    originalCustomsGroupArticle ON CHANGE changeOriginalCustomsGroupArticle(ad),
                    quantity READONLY, price, sum READONLY, 
                    NEW, deletead=DELETE GRID                      
                        
    FILTERS userInvoice(ad) == i
    
        OBJECTS sid=Item.Size
        PROPERTIES(sid) name          
        PROPERTIES order(ad,sid)
        FILTERS    in(sizeGroup(article(ad)), sid)
        
        OBJECTS cod=Color
        PROPERTIES(cod) READONLY id SHOWIF showIDs(), name

        PROPERTIES(cod,sid,ad) quantity ON CHANGE changeQuantity(cod,sid,ad)
                                    COLUMNS (sid) HEADER name(sid)
                                    
        PROPERTIES READONLY quantity(cod, ad)  
        PROPERTIES(cod)  NEWSESSION NEW, EDIT, DELETE 
        ORDERS name(cod), 
                 order(ad,sid)                                      
;

DESIGN userInvoice {
    specificationBox {
        NEW colorArticleContainer AFTER BOX(d){
            caption = 'Артикул';
            MOVE BOX(ad);
            MOVE BOX(cod);
            REMOVE BOX(sid);                
        }
    }
} 

