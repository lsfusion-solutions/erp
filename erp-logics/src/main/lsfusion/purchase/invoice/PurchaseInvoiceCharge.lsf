MODULE PurchaseInvoiceCharge;

REQUIRE PurchaseInvoice;

NAMESPACE Purchase;

@defineDocumentInterfaceProperty(invoice, showChargePrice, 'Услуги');

// -- Операция
DESIGN operation {
    showContainer {
        NEW chargeContainer {
            caption = 'Услуги';
        }
    }
}
@defineOperationProperty(showChargePrice, 'Услуги', chargeContainer);
@deriveDocumentOperationProperty(UserInvoice, showChargePrice);

@defineDocumentInterfaceDetailPriceCustomPrefix (invoiceDetail, charge, ' услуг за ед.'); // объявляем цену услуг
@defineDocumentInterfaceDetailDataSumCustomPrefix (invoiceDetail, charge, ' услуг'); // объявляем сумму услуг
@deriveDocumentDetailSumCustomPrefix(userInvoiceDetail, charge, currency, quantity); // записываем сумму услуг

@defineOperationProperty(isRateablyGrossWeight, 'Услуги расписывать пропорционально весу', chargeContainer);

isRateablyGrossWeight 'Услуги расписывать пропорционально весу' = ABSTRACT BOOLEAN (Invoice);
isRateablyGrossWeight 'Услуги расписывать пропорционально весу' = DATA BOOLEAN (UserInvoice);
isRateablyGrossWeight(UserInvoice i) += isRateablyGrossWeight(i);

@deriveDocumentOperationProperty(userInvoice, isRateablyGrossWeight) ;

extraCostPrice[UserInvoiceDetail](UserInvoiceDetail detail) += chargePrice(detail);
extraCostSum[UserInvoiceDetail](UserInvoiceDetail detail) += chargeSum(detail);

chargeSumUserInvoiceDetail 'Сумма услуг' (i) = GROUP SUM chargeSum(UserInvoiceDetail idetail)
    BY userInvoice(idetail) IN documentSum CHARWIDTH 15;
chargeSumInvoiceDetail 'Сумма услуг' (i) = GROUP SUM chargeSum(InvoiceDetail idetail)
    BY invoice(idetail) IN documentSum CHARWIDTH 15;

chargePercent '% услуг' (userInvoiceDetail) = DATA NUMERIC[12,6] (UserInvoiceDetail) CHARWIDTH 8;

chargePercent '% услуг' (UserInvoice i) = NUMERIC[12,6](chargeSumUserInvoiceDetail(i) * 100.0 / (incomeSum(i) IF incomeSum(i) != 0)) CHARWIDTH 10 NOFLEX MATERIALIZED;
chargePercent '% услуг' (Invoice i) = NUMERIC[12,6](chargeSumInvoiceDetail(i) * 100.0 / (incomeSum(i) IF incomeSum(i) != 0)) CHARWIDTH 10 NOFLEX MATERIALIZED;

setChargePercent(UserInvoice userInvoice, NUMERIC[12,6] percent)  { 
    chargePercent(UserInvoiceDetail d) <- percent WHERE userInvoice(d) == userInvoice;
}

WHEN LOCAL FORMS userInvoice GOAFTER chargePercent[UserInvoiceDetail] (CHANGED(chargePercent(UserInvoiceDetail d)) OR CHANGED(incomePrice(d))) AND chargePercent(d) DO
    chargePrice(d) <- chargePercent(d) * incomePrice(d) / 100.0;


changeChargePercent(UserInvoice userInvoice)  { 
    INPUT n = NUMERIC[12,6] DO
        setChargePercent(userInvoice, n);
}

changeChargeSumUserInvoiceDetailExtra(UserInvoice userInvoice, NUMERIC[12,6] sum)  {    
    IF NOT isRateablyGrossWeight(userInvoice) THEN {
        setChargePercent(userInvoice, sum * 100.000000 / (incomeSum(userInvoice) IF incomeSum(userInvoice) != 0));
    } ELSE {
        chargePercent(UserInvoiceDetail d) <- [ (X*sum)/(Z*W)*100.000000](sumGrossWeight(d),sumGrossWeightUserInvoiceDetail(userInvoice),(incomePrice(d) * quantity(d)))  WHERE userInvoice(d) == userInvoice; 
// либо записывать сразу в цену услуги и не трогать процент
//        chargePriceUserInvoiceDetail(d) <- [ (X*Y)/(Z*W)](sumGrossWeightUserInvoiceDetail(d),requestedNumeric(),sumGrossWeightUserInvoiceDetailUserInvoice(userInvoice),quantityUserInvoiceDetail(d))  WHERE userInvoiceUserInvoiceDetail(d) == userInvoice;
    }    
}

changeChargeSumUserInvoiceDetail(UserInvoice userInvoice)  { 
    INPUT n = NUMERIC[18,4] DO
        changeChargeSumUserInvoiceDetailExtra(userInvoice, n);  
}

backgroundChargeInvoice 'Цвет' = RGB(224, 255, 128);

EXTEND FORM userInvoice
    PROPERTIES(i) BACKGROUND backgroundChargeInvoice() showChargePrice
    PROPERTIES(i) BACKGROUND backgroundChargeInvoice() SHOWIF showChargePrice(i)
                                                        isRateablyGrossWeight,
                                                        chargePercent ON CHANGE changeChargePercent(i),
                                                        chargeSumUserInvoiceDetail ON CHANGE changeChargeSumUserInvoiceDetail(i)
    PROPERTIES(d) BACKGROUND backgroundChargeInvoice() SHOWIF showChargePrice(i) BEFORE numberVAT(d)
                                                        chargePercent, chargePrice, chargeSum
;


DESIGN userInvoice {
    headerExtraParams {
        NEW headerCharge {
            caption = 'Услуги';
            MOVE PROPERTY(showChargePrice(i));
            MOVE PROPERTY(isRateablyGrossWeight(i));
            MOVE PROPERTY(chargePercent(i));
            MOVE PROPERTY(chargeSumUserInvoiceDetail(i));
        }
    }
}

EXTEND FORM invoices
    PROPERTIES(d) BACKGROUND backgroundChargeInvoice() SHOWIF showChargePrice(i) READONLY BEFORE numberVAT(d)
                                                        chargePrice, chargeSum
;

// ----------------------- Расчет по услугам, которые включаются в накладную отдельной строкой ------------------------ //

calcChargePrice  (UserInvoiceDetail detail) = [ (X*Y)/(Z*W)](
    sum(detail),
    sumChargeUserInvoiceDetail(userInvoice(detail)),
    sumNotChargeUserInvoiceDetail(userInvoice(detail)),
    quantity(detail)
) IF isStockSku[InvoiceDetail](detail);

deriveChargePrice 'Разнести услуги'(UserInvoice userInvoice)  { 
    chargePrice(UserInvoiceDetail detail) <- calcChargePrice(detail) WHERE userInvoice(detail) == userInvoice;
}

EXTEND FORM userInvoice
    PROPERTIES(i) SHOWIF sumChargeUserInvoiceDetail(i) deriveChargePrice DRAW d TOOLBAR
;