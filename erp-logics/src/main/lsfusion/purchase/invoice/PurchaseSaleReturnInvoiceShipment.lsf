MODULE PurchaseSaleReturnInvoiceShipment;

REQUIRE SaleReturnShipment, PurchaseSaleReturnInvoice, PurchaseSaleReturnShipment, PurchaseReturnShipment;

PRIORITY PurchaseReturn;

//----------------------------------------------------------------------------//

GROUP shipment 'Информация о поставке' : base;

// Галочка по созданию акта расценки на закупке
@defineDocumentInterfaceProperty (invoice, createSaleReturnShipment, 'Создать поставку (продажа-возврат)');

@deriveDocumentOperationProperty(UserInvoice, createSaleReturnShipment);

backgroundSaleReturnShipment 'Цвет' (Invoice invoice) = RGB(238, 250, 200) IF invoice IS Invoice;
//--
createShipment(SaleReturnInvoice invoice) += createSaleReturnShipment(invoice(invoice));

@defineDocumentInterfaceDetailPricePrefix(invoice, saleReturnShipment, ' учетная (продажа-возврат)');
@defineDocumentInterfaceDetailQuantityPrefix (invoice, saleReturnShipment, ' поставлено (продажа-возврат)');
saleReturnShipmentQuantity(UserInvoiceDetail detail) <- quantity(detail) WHEN CHANGED(quantity(detail));

@defineDocumentInterfaceDetailExpiryDatePrefix(invoice, saleReturn);
saleReturnExpiryDate(UserInvoiceDetail detail) <- prevExpiryDate(batch(detail)) WHEN CHANGED (batch(detail));
expiryDate(SaleReturnInvoiceDetail detail) += saleReturnExpiryDate[UserInvoiceDetail](invoiceDetail(detail));

@defineDocumentInterfaceDetailManufactureDatePrefix(invoice, saleReturn);
saleReturnManufactureDate(UserInvoiceDetail detail) <- prevExpiryDate(batch(detail)) WHEN CHANGED (batch(detail));
manufactureDate(SaleReturnInvoiceDetail detail) += saleReturnManufactureDate[UserInvoiceDetail](invoiceDetail(detail));

@defineDocumentInterfaceHeaderTimePrefix(Invoice, saleReturnShipment, ' поставки (продажа-возврат)');

saleReturnShipmentDate(UserInvoice i) <- date(i) WHEN CHANGED(date(i));
saleReturnShipmentTime(UserInvoice i) <- time(i) WHEN CHANGED(time(i));

@defineDocumentInterfaceDetailDataSumPrefix (invoice, saleReturnShipment, ' учетная (продажа-возврат)');
@deriveDocumentDetailSumPrefix(userInvoice, saleReturnShipment, currency, saleReturnShipmentQuantity);

@defineDocumentInterfaceHeaderCreateShipment (invoice);
@defineDocumentInterfaceHeaderSumPrefix (invoice, saleReturnShipment, ' учетная (продажа-возврат)');

shipmentDate(SaleReturnInvoice invoice) += saleReturnShipmentDate(invoice(invoice));
shipmentTime(SaleReturnInvoice invoice) += saleReturnShipmentTime(invoice(invoice));

shipmentQuantity(SaleReturnInvoiceDetail detail) += saleReturnShipmentQuantity(invoiceDetail(detail));
shipmentPrice(SaleReturnInvoiceDetail detail) += saleReturnShipmentPrice(invoiceDetail(detail));
shipmentSum (SaleReturnInvoiceDetail detail) += saleReturnShipmentSum(invoiceDetail(detail));

showSaleReturnShipment(UserInvoice i) = createSaleReturnShipment(i) OR createSaleReturnInvoice(i); 
showSaleReturnShipment(UserInvoiceDetail d) = showSaleReturnShipment(userInvoice(d)); 

EXTEND FORM userInvoice
    PROPERTIES(i) BACKGROUND backgroundSaleReturnShipment(i) SHOWIF createSaleReturnInvoice(i) createSaleReturnShipment
    PROPERTIES(i) BACKGROUND backgroundSaleReturnShipment(i) SHOWIF createSaleReturnShipment(i) saleReturnShipmentSumUserInvoiceDetail,
                  saleReturnShipmentDate, saleReturnShipmentTime
    PROPERTIES(d) BEFORE deleteid SHOWIF createSaleReturnShipment[Invoice](i) BACKGROUND backgroundSaleReturnShipment(i)
                  saleReturnExpiryDate, saleReturnShipmentSum
    PROPERTIES(d) BEFORE saleReturnShipmentSum(d) SHOWIF showSaleReturnShipment(i) BACKGROUND backgroundSaleReturnShipment(i)
                  saleReturnShipmentPrice  
    PROPERTIES(d) saleReturnShipmentQuantity AFTER quantity(d) SHOWIF createSaleReturnShipment[Invoice](i) BACKGROUND backgroundSaleReturnShipment(i)
;
DESIGN userInvoice {
    headerCreateDocuments{
        NEW headerCreateSaleReturnShipment {
            caption = 'Поставка (продажа-возврат)';
            horizontal = TRUE;
            NEW CreateSaleReturnShipment1{
                MOVE PROPERTY(createSaleReturnShipment(i));
            }
            NEW CreateSaleReturnShipment2{
                MOVE PROPERTY(saleReturnShipmentDate(i));
                MOVE PROPERTY(saleReturnShipmentTime(i));
            }
        }
    }
}

EXTEND FORM invoices
    PROPERTIES(i) READONLY BACKGROUND backgroundSaleReturnShipment(i) saleReturnShipmentSumInvoiceDetail BEFORE orders(i)
    PROPERTIES(d) READONLY SHOWIF createSaleReturnShipment(i) BACKGROUND backgroundSaleReturnShipment(i)
                  saleReturnExpiryDate, saleReturnShipmentPrice, saleReturnShipmentSum
    PROPERTIES(d) READONLY saleReturnShipmentQuantity AFTER quantity(d) SHOWIF createSaleReturnShipment(i) BACKGROUND backgroundSaleReturnShipment(i)
;

// ------------------------------- Расчет учетной цены для поставки ------------------------ //

saleReturnShipmentPriceBatch  = ABSTRACT NUMERIC[16,4] (UserInvoiceDetail); //использовать цены от склада партии, если нет цены для склада поставщика

WHEN LOCAL (CHANGED(supplierStock(UserInvoiceDetail detail)) OR
            (CHANGED(dateTime(detail)) AND NOT isPosted(detail)) OR
            SETCHANGED(batch(detail))) AND batch(detail) AND NOT CHANGED(saleReturnShipmentPrice(detail)) AND NOT skipUpdatePriceAccount() DO
    saleReturnShipmentPrice (detail) <- OVERRIDE prevAccountPriceB(batch(detail), supplierStock(detail), dateTime(detail)), saleReturnShipmentPriceBatch(detail);    

WHEN LOCAL (CHANGED(sku(UserInvoiceDetail detail)) OR
            CHANGED(supplierStock(detail)) OR
            (CHANGED(dateTime(detail)) AND NOT isPosted(detail)) OR
            DROPPED(batch(detail))) AND NOT batch(detail) AND NOT CHANGED(saleReturnShipmentPrice(detail)) AND NOT skipUpdatePriceAccount() DO
    saleReturnShipmentPrice (detail) <- OVERRIDE prevAccountPriceB(sku(detail), supplierStock(detail), dateTime(detail));

receiveShipment (SaleReturnInvoice invoice)+ { 
    IF invoice IS SaleReturnInvoice THEN {
        createSaleReturnShipment(Invoice i) <- TRUE WHERE i == invoice(invoice);
        saleReturnShipmentDate(Invoice i) <- currentDate() WHERE i == invoice(invoice);
        saleReturnShipmentTime(Invoice i) <- currentTime() WHERE i == invoice(invoice);
    } 
};

deleteCreate (SaleReturn.InvoiceShipment shipment)+ WHEN invoice(shipment) IS SaleReturnInvoice THEN  { 
    createSaleReturnShipment(Invoice invoice) <- NULL WHERE invoice == invoice(invoice(shipment));          
};

//-- возврат поставщику
quantitySaleReturnShipmentDetail 'Поставлено' (purchaseReturnInvoiceDetail) = GROUP SUM quantity(SaleReturn.ShipmentDetail d) BY PurchaseSaleReturnInvoice.invoiceDetail(invoiceDetail(d));

quantitySaleReturn 'Поставлено' (ShipmentDetail d) = quantitySaleReturnShipmentDetail(invoiceDetail(d));
quantitySaleReturnShipmentDetail 'Поставлено' (d) = GROUP SUM quantity(SaleReturn.ShipmentDetail sd) BY shipmentDetail(sd);

quantityShippedPurchaseReturn 'Поставлено (кол-во)' (s) = GROUP SUM (quantitySaleReturnShipmentDetail(ShipmentDetail d) (+) quantitySaleReturn(d)) BY shipment(d);

isTransitPurchaseReturn 'В пути' (Shipment s) = isCompany(supplier(s)) AND isCompany(customer(s)) AND supplier(s) == customer(s) AND NOT quantityShippedPurchaseReturn(s);

