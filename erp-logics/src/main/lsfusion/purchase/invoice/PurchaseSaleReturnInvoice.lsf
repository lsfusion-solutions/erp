MODULE PurchaseSaleReturnInvoice;

REQUIRE SaleReturnInvoice, PurchaseReturnInvoice, PurchaseSaleReturnOperation;

PRIORITY PurchaseReturn;

//----------------------------------------------------------------------------//

//Создание накладной на основе накладной //

FORM invoiceInvoices 'Накладные (закупка-возврат)'
    OBJECTS s = LegalEntity PANEL
    PROPERTIES (s) READONLY name
    OBJECTS c = LegalEntity PANEL
    PROPERTIES (c) READONLY name

    OBJECTS ss = Stock PANEL
    PROPERTIES (ss) READONLY name
    OBJECTS cs = Stock PANEL
    PROPERTIES (cs) READONLY name

    OBJECTS t=DATE PANEL
    PROPERTIES(t) VALUE

    OBJECTS o = Invoice
    PROPERTIES (o) READONLY isPosted, number, series, date, time, nameCurrency,
                            countInvoiceDetail, quantityInvoiceDetail, sumInvoiceDetail,
                            note, nameSupplierStock
    FILTERS supplier(o) == s,
            customer(o) == c,            
            customerStock(o) == cs,
            isPosted(o)

    FILTERGROUP filters1
        FILTER 'Только этой даты' date(o) == t 'F11' DEFAULT
        
    FILTERGROUP filters2
        FILTER 'Только этого cклада поставщика' supplierStock(o) == ss 'F10' DEFAULT        

    OBJECTS d = InvoiceDetail

    PROPERTIES (d) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku
    PROPERTIES (d) READONLY SHOWIF showPack(o) idBarcodePack, shortNameUOMPack, amountPack, packQuantity
    PROPERTIES (d) READONLY quantity, price, sum, numberVAT, valueVAT,
                            VATSum, invoiceSum, nameSupplierStock

    FILTERS invoice(d) == o
;

DESIGN invoiceInvoices {
    BOX {
        size = (1124, 768);
        fill = 1;
        NEW documentContainer BEFORE TOOLBARBOX {
            fill = 1;
            NEW headerBox1 {
                horizontal = TRUE;
                NEW headerBox11 {
                    horizontal = TRUE;
                    fill =1;
                    caption = 'Поставщик';
                    MOVE BOX(s);
                    MOVE BOX(ss);
                }
                NEW headerBox12 {
                    horizontal = TRUE;
                    caption = 'Покупатель';
                    MOVE BOX(c);
                    MOVE BOX(cs);
                }
            }
            NEW headerBox2 {
                horizontal = TRUE;
                MOVE BOX(t);
            }
            NEW specBox {
                fill =1;
                
                MOVE BOX(o) {
                    fill =1;
                };
                NEW documentDetail {
                    tabbed = TRUE;
                    fill =1;
                    MOVE BOX(d) {
                        caption = 'Спецификация';
                        fill =1;
                    }
                    NEW printTab {
                        caption = 'Печатные формы';
                        NEW printContainer {
                            caption = 'Печать';
                        }
                    }
                }
            }
        }
    }
}

invoiceDetail = ABSTRACT InvoiceDetail (SaleReturn.InvoiceDetail) MATERIALIZED INDEXED;
invoiceDetail = DATA InvoiceDetail (SaleReturn.UserInvoiceDetail) INDEXED;
invoiceDetail(SaleReturn.UserInvoiceDetail invoiceDetail) += invoiceDetail(invoiceDetail);

setPropertiesPurchaseReturnSaleReturn  ABSTRACT LIST ( SaleReturn.UserInvoiceDetail, InvoiceDetail);
setPropertiesPurchaseReturnSaleReturn  ABSTRACT LIST ( SaleReturn.UserInvoice, Invoice);

fillInvoice 'Заполнить на основе накладной (закупка-возврат)'(SaleReturn.UserInvoice userInvoice)   { 
    DIALOG invoiceInvoices OBJECTS s = supplier(userInvoice), c = customer(userInvoice),
                                   ss = supplierStock(userInvoice), cs = customerStock(userInvoice),
                                   t = date(userInvoice), o INPUT DO {
        FOR invoice(InvoiceDetail invoiceDetail) == o NEW d = SaleReturn.UserInvoiceDetail DO {
            userInvoice(d) <- userInvoice;
            invoiceDetail(d) <- invoiceDetail;
            setPropertiesPurchaseReturnSaleReturn(d, invoiceDetail);
        }

        setPropertiesPurchaseReturnSaleReturn(userInvoice, o);
    }
};

setPropertiesPurchaseReturnSaleReturn(SaleReturn.UserInvoiceDetail d, InvoiceDetail invoiceDetail) + { 
    sku(d) <- sku(invoiceDetail);
    batch(d) <- batch(invoiceDetail);
    barcodePack(d) <- barcodePack(invoiceDetail);
    amountPack(d) <- amountPack(invoiceDetail);
    packQuantity(d) <- packQuantity(invoiceDetail);
    quantity (d) <- quantity(invoiceDetail);
    VAT(d) <- VAT(invoiceDetail);
    valueVAT(d) <- valueVAT(invoiceDetail);
    price(d) <- price(invoiceDetail);
    invoicePrice(d) <- invoicePrice(invoiceDetail);    
}

//----------------------------------------------------------------------------//

createSaleReturnInvoice 'Создать накладную (продажа-возврат)' = ABSTRACT BOOLEAN (Invoice) MATERIALIZED;
createSaleReturnInvoice 'Создать накладную (продажа-возврат)' = DATA BOOLEAN (UserInvoice) MATERIALIZED;
createSaleReturnInvoice(UserInvoice invoice) += createSaleReturnInvoice(invoice);

createSaleReturnInvoice 'Создать накладную (продажа-возврат)' (InvoiceDetail invoiceDetail) = createSaleReturnInvoice(invoice(invoiceDetail))MATERIALIZED;
createSaleReturnInvoice 'Создать накладную (продажа-возврат)' (UserInvoiceDetail userInvoiceDetail) = createSaleReturnInvoice(userInvoice(userInvoiceDetail));
backgroundSaleReturn 'Цвет' (Invoice invoice) = RGB(255, 255, 190) IF invoice IS Invoice;

isCompanyCustomer (UserInvoice userInvoice) =  isCompany(customer(userInvoice));
EXTEND FORM userInvoice
    PROPERTIES(i) BACKGROUND backgroundSaleReturn(i) SHOWIF isCompanyCustomer(i) createSaleReturnInvoice
;
DESIGN userInvoice {
    headerCreateDocuments {
        NEW headerCreateSaleReturn {
            caption = 'Накладная (продажа-возврат)';
            MOVE PROPERTY(createSaleReturnInvoice(i));
        }
    }
}

//--  Связь поставки с поставкой

CONSTRAINT supplier(SaleReturn.UserInvoiceDetail detail) != supplier(invoiceDetail(detail)) OR
           customer(detail) != customer(invoiceDetail(detail)) OR
           customerStock(detail) != customerStock(invoiceDetail(detail))
//           sku[SaleReturn.InvoiceDetail](detail) != sku(invoiceDetail(detail)) // пока отключаем, чтобы при перемещении в производстве (с изменением sku) работало
    CHECKED BY invoiceDetail[SaleReturn.UserInvoiceDetail]
        MESSAGE 'Поставщик, покупатель, склад покупателя в накладной и накладной на основе накладной должны соответствовать друг другу';


descriptionIndexInvoiceDetail 'Строка накладной (закупка-возврат)' (SaleReturn.InvoiceDetail detail) = descriptionIndex(invoiceDetail(detail));
descriptionIndexInvoiceDetail 'Строка накладной (закупка-возврат)' (SaleReturn.UserInvoiceDetail detail) = descriptionIndex(invoiceDetail(detail));

quantityInvoiceDetail (purchaseReturn, saleReturn) = GROUP SUM quantity(SaleReturn.InvoiceDetail detail) BY invoice(invoiceDetail(detail)), invoice(detail);

purchaseReturnInvoices 'Накладные (закупка-возврат)' (SaleReturn.Invoice saleReturn) = GROUP
                                                        CONCAT STRING[255](description(Invoice purchaseReturn)) IF quantityInvoiceDetail (purchaseReturn, saleReturn), ', '
                                                        ORDER purchaseReturn CHARWIDTH 30 MATERIALIZED;

relationSaleReturn 'Связь' (SaleReturn.Invoice saleReturn) = GROUP SUM quantityInvoiceDetail (Invoice purchaseReturn, saleReturn) MATERIALIZED;

invoiced 'Кол-во (выписано)' (invoiceDetail) = GROUP SUM quantity(SaleReturn.InvoiceDetail detail) IF isPosted(detail)
                                                                   BY invoiceDetail(detail) MATERIALIZED;
invoiced 'Кол-во (выписано)' = GROUP SUM invoiced(InvoiceDetail detail) BY invoice(detail);                                                                   
                                                                   
statusInvoice 'Статус' = CASE WHEN invoiced(Invoice i) THEN 'Создан возврат'
                                                                        ELSE 'Не создан возврат';                                                                   
                                                                   

toInvoiced 'Не выписано' (InvoiceDetail invoiceDetail) = quantity (invoiceDetail) (-) invoiced(invoiceDetail);

EXTEND FORM SaleReturn.userInvoice
    PROPERTIES(i) fillInvoice, purchaseReturnInvoices READONLY
;
DESIGN SaleReturn.userInvoice { 
    headerCreateDetail{ 
        NEW purchaseSale{
            caption = 'Накладная (закупка-возврат)';
            MOVE PROPERTY (fillInvoice(i));
            MOVE PROPERTY (purchaseReturnInvoices(i));
        }
    }
}



CLASS SaleReturnInvoice 'Накладная возврат на основе накладной возврат': SaleReturn.Invoice;
CLASS SaleReturnInvoiceDetail 'Строка накладной возврат на основе накладной возврат' : SaleReturn.InvoiceDetail;

@defineDocumentTables(saleReturnInvoice);

@defineDocumentAggregation(invoice, saleReturnInvoice, createSaleReturnInvoice);
invoice(SaleReturnInvoiceDetail detail) += saleReturnInvoice(detail);

index(SaleReturnInvoiceDetail detail) += index(detail);

date(SaleReturnInvoice invoice) += date(invoice);
time(SaleReturnInvoice invoice) += time(invoice);

@defineDocumentAggregationStockPrefix(invoice, saleReturnInvoice, supplier, 'Склад поставщика', , );
supplierStock(SaleReturnInvoice invoice) += supplierStock(invoice);
@defineDocumentAggregationStockPrefix(invoice, saleReturnInvoice, customer, 'Склад покупателя', , );
customerStock(SaleReturnInvoice invoice) += customerStock(invoice);

@defineDocumentAggregationLegalEntityPrefix(invoice, saleReturnInvoice, supplier, 'Поставщик', , );
supplier(SaleReturnInvoice invoice) += supplier(invoice);
@defineDocumentAggregationLegalEntityPrefix(invoice, saleReturnInvoice, customer, 'Покупатель', , );
customer(SaleReturnInvoice invoice) += customer(invoice);

@defineDocumentAggregationPosted(invoice, saleReturnInvoice);
isPosted(SaleReturnInvoice invoice) += isPosted(invoice);

@defineDocumentAggregationClosed(invoice, saleReturnInvoice);
isClosed(SaleReturnInvoice invoice) += isClosed(invoice);

number(SaleReturnInvoice invoice) += number(invoice(invoice));
series(SaleReturnInvoice invoice) += series(invoice(invoice));
seriesNumber 'Серия/номер документа' (SaleReturnInvoice saleReturnInvoice) = seriesNumber(invoice(saleReturnInvoice));

noteInvoice 'Примечание' (SaleReturnInvoice saleReturnInvoice) = note(invoice(saleReturnInvoice));
note(SaleReturnInvoice invoice) += noteInvoice(invoice);

currency  (SaleReturnInvoice saleReturnInvoice) = currency(invoice(saleReturnInvoice));
currency (SaleReturnInvoice invoice) += currency(invoice);

agreement  (SaleReturnInvoice saleReturnInvoice) = agreement(invoice(saleReturnInvoice));
agreement (SaleReturnInvoice invoice) += agreement(invoice);

priceListType  (SaleReturnInvoice saleReturnInvoice) = priceListType(invoice(saleReturnInvoice));
priceListType (SaleReturnInvoice invoice) += priceListType(invoice);

@defineDocumentDescription(saleReturnInvoice, SaleReturnInvoiceDetail, 'Накладная возврат на основе накладной возврат');
description (SaleReturnInvoice invoice) += description(invoice);

contractSku (SaleReturnInvoice invoice) += contractSku(invoice(invoice));
isCommission (SaleReturnInvoice invoice) += isCommission(invoice(invoice));

@defineDocumentAggregationDetailSku(invoice, saleReturnInvoice, sku);
sku(SaleReturnInvoiceDetail invoiceDetail) +=  sku(invoiceDetail);

@defineDocumentAggregationDetailBatch(invoice, saleReturnInvoice);
batch(SaleReturnInvoiceDetail invoiceDetail) += batch(invoiceDetail);

quantity(SaleReturnInvoiceDetail invoiceDetail) += quantity(invoiceDetail(invoiceDetail));
priceListType(SaleReturnInvoiceDetail invoiceDetail) += priceListType(invoiceDetail(invoiceDetail));

price(SaleReturnInvoiceDetail invoiceDetail) += price(invoiceDetail(invoiceDetail));
sum(SaleReturnInvoiceDetail invoiceDetail) += sum(invoiceDetail(invoiceDetail));
VAT(SaleReturnInvoiceDetail invoiceDetail) += VAT(invoiceDetail(invoiceDetail));
valueVAT(SaleReturnInvoiceDetail invoiceDetail) += valueVAT(invoiceDetail(invoiceDetail));
invoicePrice(SaleReturnInvoiceDetail invoiceDetail) += invoicePrice(invoiceDetail(invoiceDetail));
VATSum(SaleReturnInvoiceDetail invoiceDetail) += VATSum(invoiceDetail(invoiceDetail));
invoiceSum(SaleReturnInvoiceDetail invoiceDetail) += invoiceSum(invoiceDetail(invoiceDetail));

edit(SaleReturnInvoice invoice) + {  edit(invoice(invoice)); }
close(SaleReturnInvoice invoice) + {  close(invoice(invoice)); }
edit(SaleReturnInvoiceDetail invoiceDetail) + {  edit(invoiceDetail(invoiceDetail)); }
createdUser(SaleReturnInvoice invoice) += createdUser(invoice(invoice));

showPack(SaleReturnInvoice invoice) +=  showPack(invoice(invoice));
barcodePack(SaleReturnInvoiceDetail invoiceDetail) += barcodePack(invoiceDetail(invoiceDetail));
amountPack(SaleReturnInvoiceDetail invoiceDetail) +=  amountPack(invoiceDetail(invoiceDetail));
packQuantity(SaleReturnInvoiceDetail invoiceDetail) +=  packQuantity(invoiceDetail(invoiceDetail));

invoiceDetail(SaleReturnInvoiceDetail invoiceDetail) += invoiceDetail(invoiceDetail);

//------------------------------ Создание агрегированных объектов через операции -----------------------------//

// -- Операция
createSaleReturnInvoice 'Накладная (продажа-возврат) ' = DATA BOOLEAN (Purchase.Operation);

EXTEND FORM Purchase.operation
    PROPERTIES(o) createSaleReturnInvoice
;
DESIGN Purchase.operation {
    saleReturnContainer {
        MOVE PROPERTY(createSaleReturnInvoice(o)) BEFORE PROPERTY(nameSaleReturnOperation(o));
    }
}

@deriveDocumentOperationProperty(UserInvoice, createSaleReturnInvoice);

@defineDocumentInterfaceOperationPrefix (invoice, saleReturn, Sale, ' (продажа-возврат)');

// Записываем операцию для закупки по умолчанию из операции
saleReturnOperation (UserInvoice invoice) <- saleReturnOperation(operation(invoice))
    WHEN CHANGED(operation(invoice));

operation(SaleReturnInvoice invoice) += saleReturnOperation(invoice(invoice));

EXTEND FORM userInvoice
    PROPERTIES(i) BACKGROUND backgroundSaleReturn(i) SHOWIF createSaleReturnInvoice(i) nameSaleReturnOperation

;
DESIGN userInvoice {
    headerCreateSaleReturn {
        MOVE PROPERTY(nameSaleReturnOperation(i)) AFTER PROPERTY(createSaleReturnInvoice(i));
    }
}

    
// ------------------------ Проставление партий, если идет возврат на склад, на котором партионный учет

useExplicitBatchDetailUserInvoice (Order order) += WHEN order IS PurchaseReturn.Order THEN TRUE;
forceExplicitBatchDetailUserInvoice(Order o) += createSaleReturnInvoice(operation(o)) AND explicitBatchLedger(supplierStock(o));

//-- Действие

overFillInvoice  ABSTRACT LIST ( SaleReturn.UserInvoice, Invoice);
overFillInvoice  ABSTRACT LIST ( SaleReturn.UserInvoiceDetail, InvoiceDetail);

overFillInvoiceExtra  ABSTRACT LIST ( SaleReturn.UserInvoice, Invoice);
moveUserInvoice 'Накладная (продажа-возврат)'(Invoice invoice)   { 
	NEWSESSION{
	
	    NEW i = SaleReturn.UserInvoice {
	
	        agreement(i) <- agreement(invoice);
	        priceListType(i) <- priceListType(invoice) WHERE NOT notUsePriceListTypeSaleReturnInvoice(operation(invoice));
	        supplier(i) <- supplier(invoice);
	        customer(i) <- customer(invoice);
	        supplierStock(i) <- supplierStock(invoice);
	        customerStock(i) <- customerStock(invoice);
	        number(i) <- number(invoice);
	        series(i) <- series(invoice);
	        note(i) <- note(invoice);
	        currency(i) <- currency(invoice);
	        contractSku(i) <- contractSku(invoice);
	        isCommission(i) <- isCommission(invoice);
	        showPack(i) <- showPack(invoice);
	        operation(i) <- saleReturnOperation(operation(invoice));
	        overFillInvoice(i, invoice);
	
	        FOR invoice(InvoiceDetail detail)==invoice NEW d = SaleReturn.UserInvoiceDetail DO {
	
	            userInvoice(d) <- i;
	            invoiceDetail(d) <-detail; 
	            priceListType(d) <- priceListType(detail) WHERE (in(priceListType(detail), operation(i)) OR NOT operation(i)) AND NOT notUsePriceListTypeSaleReturnInvoice(operation(invoice));
	
	            sku(d) <- sku(detail);
	            quantity (d) <- quantity(detail);
	            VAT (d) <- VAT(detail);
	            price (d) <- price(detail);
	            invoicePrice (d) <- invoicePrice(detail);
	
	            barcodePack (d) <- barcodePack(detail);
	            amountPack (d) <- amountPack(detail);
	            packQuantity (d) <- packQuantity(detail);

	            batch(d) <- batch(detail);
	            overFillInvoice(d,detail);
	        }
	        overFillInvoiceExtra (i, invoice);
	
	        SHOW SaleReturn.userInvoice OBJECTS i = i DOCKED NOCANCEL;
	    }
	}
} TOOLBAR;

EXTEND FORM invoices
    PROPERTIES(i) moveUserInvoice
;
DESIGN invoices {
    createdContainer{
        MOVE PROPERTY(moveUserInvoice(i)) { alignment = STRETCH; };
    }
}

