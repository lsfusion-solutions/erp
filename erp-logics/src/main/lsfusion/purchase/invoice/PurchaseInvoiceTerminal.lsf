MODULE PurchaseInvoiceTerminal;

REQUIRE PurchaseInvoice, Terminal;

NAMESPACE Purchase;

terminalDocument 'Документ ТСД' = DATA TerminalDocument (UserInvoice);

@defineAddDetailDialogTerminal(userInvoice, sku, customerStock);

EXTEND FORM userInvoice 
    PROPERTIES(i) addDetailDialogTerminalUserInvoiceDetail
;
DESIGN userInvoice {
    import {
        NEW importTSD {
            caption = 'ТСД';
            MOVE PROPERTY(addDetailDialogTerminalUserInvoiceDetail(i));
        }
    }
}

@defineOption(PurchaseUseTerminalDocumentDialog, 'Запрашивать выбор документа ТСД при создании накладной на основе заказа', invoicePurchase);

inPurchase 'Для накладных закупки'= DATA BOOLEAN (TerminalDocumentType);

EXTEND FORM groupTerminalDocumentType 
    PROPERTIES (tdt) inPurchase;
EXTEND FORM groupTerminalDocumentTypes 
    PROPERTIES (tdt) READONLY inPurchase;

countDocuments = GROUP SUM 1 IF NOT used(TerminalDocument td) AND NOT isClosed(td) AND inPurchase((terminalDocumentType(td))) BY stock(td);

overAddDialogTerminalUserInvoice  ABSTRACT LIST (Purchase.Order);
    
beforeCreateInvoice(Purchase.Order o) + { 

    IF countDocuments(customerStock(o)) AND PurchaseUseTerminalDocumentDialog() AND NOT invoiceCreated(o) THEN {
        in(TerminalDocumentType t) <- inPurchase(t);
        filterStock() <- customerStock(o);
        overAddDialogTerminalUserInvoice(o);
        DIALOG terminalDocuments OBJECTS td INPUT DO {
            NEW i = Purchase.UserInvoice {
                fillHeader(i, o);
                userInvoice(o) <- i;
                used(td) <- TRUE;
                overAddDialogTerminalUserInvoice(i, td);
    
                include(o,i) <- TRUE;
                FOR terminalDocument(TerminalDocumentDetail tdd) == td ORDER number(tdd) NEW d = Purchase.UserInvoiceDetail DO {
                    userInvoice(d) <- i;
                    sku(d) <- sku(tdd);
                    quantity(d) <- quantity(tdd);
                    overAddDetailDialogTerminalUserInvoiceDetail(d, tdd);
                }
                overCreate (o, i);
                executeLocalEvents();
            }

            invoiceCreated(o) <- TRUE;
        }
    }

}