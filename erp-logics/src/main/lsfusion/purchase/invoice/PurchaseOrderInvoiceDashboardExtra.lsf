MODULE PurchaseOrderInvoiceDashboardExtra;

REQUIRE PurchaseOrderInvoiceDashboard;

NAMESPACE Purchase;

countInvoiceDetails = GROUP SUM 1 BY orderDetail(InvoiceDetail id);
backgroundInvoiceDetails = RGB (212,255,212) IF OrderDetail d IS OrderDetail AND countInvoiceDetails(d);
perform  ABSTRACT LIST ( UserInvoiceDetail, OrderDetail);


perform 'Принять'(OrderDetail od, UserInvoice invoice)  { 
    NEW d = UserInvoiceDetail {    
        
        userInvoice(d) <- invoice;  

        orderDetail(d) <- od;
        sku(d) <- sku(od);
        quantity (d) <- toInvoice(od);
                                
        fill(d, od);
        overFill(d, od);        
        perform (d,od);
    }   
} TOOLBAR CHANGEKEY 'BACK_SPACE';

priceLocal 'Цена' = DATA LOCAL NUMERIC[16,4] (OrderDetail);
quantityLocal 'Количество' = DATA LOCAL NUMERIC[14,3](OrderDetail);

FORM quantityPrice 'Цена и количество'
    OBJECTS od = OrderDetail PANEL
    PROPERTIES (od) READONLY nameSku
    PROPERTIES (od) quantityLocal    
    PROPERTIES (od) priceLocal
        
;
DESIGN quantityPrice {
    BOX {
        MOVE BOX(od) {
            caption = '';
            NEW row1 {
                MOVE PROPERTY (nameSku(od)) {caption = 'Товар'; focusable = FALSE; font = 'bold 22';}
            }
            NEW row2 {
                horizontal = TRUE;
                MOVE PROPERTY (quantityLocal(od)) {font = 'bold 22';}
                MOVE PROPERTY (priceLocal(od)) {font = 'bold 22';}
            }
        }
        MOVE TOOLBARBOX;
    }
}
 

correct  ABSTRACT LIST ( UserInvoiceDetail, OrderDetail);
correctLocalUser  ABSTRACT LIST ( OrderDetail);

correct 'Корректировать'(OrderDetail od, UserInvoice invoice)  { 
    quantityLocal(od) <- quantity(od);
    priceLocal(od) <- price(od);
    correctLocalUser(od);
    SHOW quantityPrice OBJECTS od = od ;

    NEW d = UserInvoiceDetail {    
        
        userInvoice(d) <- invoice;  

        orderDetail(d) <- od;
        sku(d) <- sku(od);
        quantity (d) <- OVERRIDE quantityLocal(od), toInvoice(od);
                                
        VAT(d) <- VAT(od);
        valueVAT(d) <- valueVAT(od);
        priceListType(d) <- priceListType(od);
        IF NOT notFillPriceInvoiceOrder(operation(od)) THEN {
            price(d) <- OVERRIDE priceLocal(od), price(od);
            invoicePrice (d) <- price (d) * (100 + calcValueVAT(d)) / 100;

        }

        overFill(d, od);
        correct (d,od);
    }   
} TOOLBAR CHANGEKEY 'F9';

EXTEND FORM userInvoice
    OBJECTS od = OrderDetail GRID
    PROPERTIES READONLY SHOWIF countIncludeOrders(i) BACKGROUND backgroundInvoiceDetails(od) index(od), idBarcodeSku(od), nameSku(od), shortNameUOMSku(od),
               quantity(od), price(od), sum(od), invoiceSum(od) 
    PROPERTIES SHOWIF countIncludeOrders(i) perform(od,i), correct(od,i)               
               
    ORDERS  index(od)          
    FILTERS  include(order(od), i)         
    FILTERGROUP orderFilter
        FILTER 'Без выписки' NOT countInvoiceDetails(od) DEFAULT 
              
    OBJECTS oid = UserInvoiceDetail GRID
    PROPERTIES (oid) SHOWIF countIncludeOrders(i) index
    PROPERTIES (oid) SHOWIF countIncludeOrders(i) ON EDIT editSku(oid) BACKGROUND backgroundSku(oid) idBarcodeSku, 
                   nameSku, shortNameUOMSku
    PROPERTIES (oid) SHOWIF countIncludeOrders(i) quantity READONLYIF readonlyQuantity(oid),//SHOWIF showQuantityInvoice(i) 
                   namePriceListType,
                   price ON CHANGE changePrice(oid), sum,
                   numberVAT ON CHANGE changeNumberVAT(oid) BACKGROUND backgroundVAT(oid),
                   valueVAT ON CHANGE changeValueVAT(oid) BACKGROUND backgroundVAT(oid),
                   invoicePrice ON CHANGE changeInvoicePrice(oid),
                   VATSum, invoiceSum, NEW, deleteoid=DELETE GRID            
    FILTERS  userInvoice(oid) == i         
;

DESIGN userInvoice {
    NEW gippo {
        fill = 1;
        tabbed = TRUE;
        NEW invoices {
            fill = 1;
            caption = 'Накладная';
            MOVE headerBox;
            MOVE specificationBox;
        }
        MOVE itemBox {
            tabbed = TRUE;
            NEW orders{
                fill = 1;
                horizontal = TRUE;
                caption = 'По строкам заказа';
            
                MOVE BOX(od);
                MOVE BOX(oid);
            }
            NEW itemBox1 {
                horizontal = TRUE;
                fill = 1;
                caption = 'По товарам';
                MOVE skuTreePane;
                MOVE skuMainPane;          
            }
        }             	
    }
    MOVE TOOLBARBOX;
}

extraCreateMultiUserInvoice 'Создать накладную (без строк)'(Order order) { 
	NEWSESSION {
	    IF order IS Order THEN {
	        NEW i = UserInvoice {
	
	            fillHeader(i, order);               
	            include(order, i)<- TRUE;
	                          
	            SHOW userInvoice OBJECTS i = i DOCKED NOCANCEL;
	        }
	    }
	}
}

numberInvoice 'Номер накладной' = DATA LOCAL NESTED INTEGER (OrderDetail);
countNumberInvoice = GROUP SUM 1 IF numberInvoice(OrderDetail d) BY order(d); 

FORM selectOrderOrderDetail 'Формирование нескольких накладных'

    OBJECTS o = Order PANEL 
    
    TREE skuTree sg = SkuGroup PARENT parent(sg)
    PROPERTIES READONLY order(sg), skuGroupName = name(sg)
    FILTERGROUP inactive FILTER 'Активные' active(sg) 'F6' DEFAULT
    ORDERS order(sg), skuGroupName
    
    OBJECTS d=OrderDetail
    PROPERTIES (d) READONLY index, idBarcodeSku, idSku, nameSku, shortNameUOMSku
    PROPERTIES (d) READONLY quantity, namePriceListType, price , sum,
                   numberVAT, valueVAT, VATSum, invoiceSum,
                   toInvoice BACKGROUND backgroundQuantityParam(d)
    PROPERTIES(d)  numberInvoice              
    ORDERS index(d)

    FILTERS order(d) == o
    FILTERGROUP filterInvoiced 
        FILTER 'Не оприходованы' toInvoice(d) 'F9' DEFAULT
        
    FILTERGROUP filterGroup 
        FILTER 'По группам' isParent(sg, sku(d)) 'F8' DEFAULT
    
;
DESIGN selectOrderOrderDetail {
    BOX {
//        size = (1024, 768);  
        MOVE BOX(o);
        NEW top {
            fill = 1;
            horizontal = TRUE;
            MOVE BOX(TREE skuTree);
            MOVE BOX(d) { 
                fill = 2; 
                PROPERTY (numberInvoice(d)) {background = #FFEEEE;}                
            }
        }
        MOVE TOOLBARBOX;
    }
}

extraCreateInvoices 'Создать несколько накладных'(Order order) { 
    numberInvoice(OrderDetail od) <- NULL WHERE order(od) == order;
    DIALOG selectOrderOrderDetail OBJECTS o = order DO {
        IF countNumberInvoice(order) THEN {
            FOR [GROUP SUM 1 BY numberInvoice(OrderDetail d), order(d)](INTEGER num,order) DO {
                NEWSESSION {
                    NEW i = UserInvoice {
        
                        fillHeader(i, order);               
                        include(order, i)<- TRUE;
                        
                        FOR order(OrderDetail orderDetail) == order AND numberInvoice(orderDetail) == num AND toInvoice(orderDetail) >0
                            AND in(orderDetail, i) AND NOT skipCreateUserInvoice(orderDetail)
                            ORDER orderCreateUserInvoice(orderDetail) 
                            NEW d = UserInvoiceDetail DO {
                                userInvoice(d) <- i;
                                orderDetail(d) <- orderDetail;
                                sku(d) <- sku(orderDetail);
                                IF NOT skipFillBatch(d) THEN {
                                    batch(d) <- batch(orderDetail);
                                }                                
                                quantity (d) <- toInvoice(orderDetail);
            
                                fill(d, orderDetail);
                                overFill(d, orderDetail);
                        }
                                  
                        SHOW userInvoice OBJECTS i = i DOCKED NOCANCEL;
                    }
                }
            }
            numberInvoice(OrderDetail od) <- NULL WHERE order(od) == order;
        } ELSE {
            MESSAGE 'Не задано количество накладных для формирования';
        }
        
    }    
}

EXTEND FORM orderInvoiceDashboard
PROPERTIES(o) TOOLBAR   AFTER createMultiUserInvoice(o) extraCreateMultiUserInvoice, extraCreateInvoices
                       
;
