MODULE PurchaseReturnInvoice;

REQUIRE OrderInvoice, PurchaseReturnOrder, PurchaseOperation, InvoiceContract;

PRIORITY Purchase, Operation;

NAMESPACE PurchaseReturn;

//----------------------------------------------- Накладная ---------------------------------------------------//

@defineInvoice(' (закупка-возврат)', customer, supplier, company, return, PurchaseReturn, pr);
@extendFormFilterAccessStock(Invoice, i, invoices, customerStock, company);

INDEX supplier(InvoiceDetail d), customer(d), sku(d);

out(Invoice i) += i IS Invoice;

@defineDocumentOperationContainer(invoice, i, overName);

@defineInvoiceNegativeQuantityConstraint();
    
@extendFormFilterRoleAccess(invoice, i, invoices);
@defineDocumentOperationConstraint(invoice, 'накладная (закупка-возврат)', PurchaseReturn);

// Добавляем партии
@defineInvoiceBatch(customer, return, PurchaseReturn, ' (закупка-возврат)', pr);
@deriveDocumentDetailPricePriceListTypeVATBatchCustomOperation (userInvoiceDetail);

batch[Invoice.InvoiceDetail](InvoiceDetail d) += batch(d);
@defineInvoiceBatchDialogStock(customerStock, Out);

@defineInvoiceReturn(Purchase, PurchaseReturn, customerStock, supplierStock);

@defineInvoiceDestination(customer, supplier);
@defineInvoiceStockDestination(customerStock, supplierStock);

@defineOrderInvoice(' (закупка-возврат)', customer);

// вторая валюта
@defineInvoiceHomeCurrency(customer);

// условия оплаты
@defineInvoicePaymentCondition(' (закупка-возврат)');

//----------------------------------------------- Операции -----------------------------------------------------//

@defineDocumentOperationPriceListType(userInvoice, 'накладной (закупка-возврат)', userInvoice, return);

CONSTRAINT CHANGED(operation(UserInvoice i)) AND forbidInvoice(operation(i))
    CHECKED BY operation[UserInvoice]
    MESSAGE 'Запрещено вводить накладные по выбранной операции';            

@defineDocumentOperationLegalEntity(userInvoice, supplier, 'Поставщик');
@deriveDocumentOperationLegalEntity(userInvoice, supplier, userInvoice);
@defineDocumentOperationLegalEntity(userInvoice, customer, 'Покупатель');
@deriveDocumentOperationLegalEntity(userInvoice, customer, userInvoice);
@defineDocumentOperationStock(userInvoice, supplier, 'Склад поставщика');
@deriveDocumentOperationStock(userInvoice, supplier, userInvoice);
@defineDocumentOperationStock(userInvoice, customer, 'Склад покупателя');
@deriveDocumentOperationStock(userInvoice, customer, userInvoice);

@defineDocumentOperationRole(userInvoice);

@deriveDocumentOperationProperty(UserInvoice, isHomeCurrency);

operation[Invoice.Invoice](Invoice o) += operation(o);
isReturn[Invoice.Invoice](Invoice o) += o IS PurchaseReturn.Invoice;
// Добавляем в копирование инвойсов
overCopy(Invoice s, UserInvoice d) + { 
    operation(d) <- operation(s);
}

@defineOperationFilterProperty(invoice, i, invoices, nameFilterInvoiceCustomUser);
//------------------------------ Ограничение на выбор поставщиков -----------------------------//

CONSTRAINT supplier(UserInvoice userInvoice) AND NOT isSupplier(supplier(userInvoice))
    CHECKED BY supplier[UserInvoice] MESSAGE 'Для накладной выбрана в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT customer(UserInvoice userInvoice) AND NOT isCompany(customer(userInvoice))
    CHECKED BY customer[UserInvoice] MESSAGE 'Для накладной выбрана в качестве покупателя организация, не являющаяся компанией';
    
CONSTRAINT filterInvoiceSupplier() AND NOT isSupplier(filterInvoiceSupplier())
    CHECKED BY filterInvoiceSupplier[] MESSAGE 'Для фильтра в накладной выбрана в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT filterInvoiceCustomer() AND NOT isCompany(filterInvoiceCustomer())
    CHECKED BY filterInvoiceCustomer[] MESSAGE 'Для фильтра в накладной выбрана в качестве покупателя организация, не являющаяся компанией';     
CONSTRAINT filterInvoiceCustomerStock() AND NOT isCompany(filterInvoiceCustomerStock())
    CHECKED BY filterInvoiceCustomerStock[] MESSAGE 'Для фильтра в накладной выбран в качестве склада покупателя склад, который не принадлежит компании'; 
     
CONSTRAINT filterInvoiceSupplier() AND filterInvoiceSupplierStock() AND NOT in(filterInvoiceSupplier(), filterInvoiceSupplierStock())
    CHECKED BY filterInvoiceSupplierStock[] MESSAGE 'Поставщик и склад поставщика в фильтре для накладной не имеют связи';
CONSTRAINT filterInvoiceCustomer() AND filterInvoiceCustomerStock() AND NOT in(filterInvoiceCustomer(), filterInvoiceCustomerStock())
    CHECKED BY filterInvoiceCustomerStock[] MESSAGE 'Покупатель и склад покупателя в фильтре для накладной не имеют связи';     

//------------------------------ Автоматическое проставление свойств -----------------------------//

@deriveDocumentLegalEntityDefaultStock(UserInvoice, supplier, userInvoice);

@defineDocumentLegalEntityStockAccess(UserInvoice, customer, company, userInvoice);

//------------------------------ Ввод в упаковках -----------------------------//

@defineDocumentPack(invoice, i);
packQuantity[Invoice.InvoiceDetail](InvoiceDetail detail) += packQuantity(detail);
DESIGN userInvoice {
    headerExtraParams {
        NEW headerPack {
            caption = 'Упаковка';
            MOVE PROPERTY(showPack(i));
        }
    }
}

@defineOrderInvoicePack(showPack);

@defineDocumentPackSku(userInvoice, sku, customerStock);
@extendFormDocumentPackSku(userInvoice, userInvoice, i);

overChangeQuantityValueSku(UserInvoiceDetail detail) + { 
    IF packBarcode(sku(detail)) THEN {
        packQuantity(detail) <- quantity(detail)/amountPack(detail);
    }
}
overChangeQuantityValueBatch(UserInvoiceDetail detail) + { 
    IF packBarcode(sku(batch(detail))) THEN {
        packQuantity(detail) <- quantity(detail)/amountPack(detail);
    }
}

// -- Операция
@deriveDocumentOperationProperty(UserInvoice, showPack);

// --------------- Проведение по регистру закупок ------------- //

@implementPurchaseLedger(Invoice, sku, customerStock);
supplier (InvoiceDetail ledger) += supplier(ledger);
supplierStock (InvoiceDetail ledger) += supplierStock(ledger);
quantity[PurchaseLedger] (InvoiceDetail ledger) += -quantity(ledger);
VAT[PurchaseLedger] (InvoiceDetail ledger) += VAT(ledger);
sum[PurchaseLedger] (InvoiceDetail ledger) += -invoiceSum(ledger);
sumVAT[PurchaseLedger] (InvoiceDetail ledger) += -VATSum(ledger);
price[PurchaseLedger] (InvoiceDetail ledger) += price(ledger);
currency(InvoiceDetail ledger) += currency(ledger);
skip (InvoiceDetail ledger) += skipPurchaseLedger(operation(ledger));

//------------------------------ Расширение формы -----------------------------//

EXTEND FORM userInvoice

    FILTERGROUP filter
        FILTER 'С остатком ' prevCurrentBalance(ks, i) OR isCharge(ks) 'F10' DEFAULT
        FILTER 'В документе ' quantityUserInvoiceDetail(ks, i) 'F9'
        
    FILTERGROUP filter2
        FILTER 'С поступлением ' countPurchaseSupplier(supplier(i), ks) 'F8'
        FILTER 'В прайсе ' priceA(priceListType(i, ks), ks, customerStock(i), supplier(i), dateTime(i)) 'F7'
;
EXTEND FORM userInvoice

    FILTERGROUP filter3
        FILTER 'С остатком' prevCurrentBalance(b, i) 'F10' DEFAULT
        FILTER 'В документе ' quantityUserInvoiceDetail(b, i) 'F9'
        FILTER 'С движением за последний месяц' prevDateTime(b, customerStock(i)) > subtractDay(dateTime(i), 30)
        FILTER 'С движением за последний год' prevDateTime(b, customerStock(i)) > subtractDay(dateTime(i), 365)
        FILTER 'С движением' prevCountLedger(b, customerStock(i))
        
    FILTERGROUP filter4
        FILTER 'С поступлением ' countPurchaseSupplier(supplier(i), sku(b)) 'F8'
        FILTER 'В прайсе ' companyA(priceListType(i, b), b, customerStock(i), dateTime(i)) == supplier(i) 'F7'

    FILTERGROUP filter5
        FILTER 'По поставщику' prevSupplier(b) = supplier(i) DEFAULT
;

// Резервы
@extendFormDocumentSkuOrderLedger(invoice, userInvoice, i, customerStock);
@extendFormDocumentSkuOrderLedgerAll(userInvoice, userInvoice, i);

@extendFormDocumentBatchOrderLedger(userInvoice, userInvoice, i, customerStock);
@extendFormDocumentBatchOrderLedgerAll(userInvoice, userInvoice, i);

//-- Запрет на изменение документа другим пользователем
@defineOperationChangesDocument(invoice, UserInvoice, preventChangesDocument, created);

overShowEdit (Invoice i) += showEditDeleteUser(i) AND isOpened(i) AND NOT skipShowEdit(i);
overShowDelete (UserInvoice i) += showEditDeleteUser(i) AND isUserOpened(i) AND NOT skipShowDelete(i); 

skipClose (UserInvoice i) += WHEN preventCloseDocument(currentUser(), operation(i)) THEN TRUE;

NAVIGATOR {
    purchaseReturnNavigator {
        NEW invoices;
    }
}

dataBaseInvoiceDetail 'Дата запрета выписки накладных (закупка-возврат) без основания'  = DATA DATE (Stock); 

CONSTRAINT  isPosted(InvoiceDetail d) AND date(d) >= dataBaseInvoiceDetail(customerStock(d)) AND NOT invoiceDetail(d)
        MESSAGE 'Не задано основание в накладной (закупка-возврат)'; 

EXTEND FORM options
    PROPERTIES(s) dataBaseInvoiceDetail
;

CONSTRAINT (SET(isPosted(UserInvoice i)) OR DROPPED(contractSku[Invoice](i)) OR CHANGED(operation(i))) AND 
           isPosted(i) AND isContract(operation(i)) AND NOT contractSku[Invoice](i) 
    MESSAGE 'Для накладной (закупка-возврат) обязан быть задан договор';   
    
CONSTRAINT  isPosted(UserInvoiceDetail d) AND isPrice(operation(d)) AND NOT price(d)
    MESSAGE 'Для строки накладная (закупка-возврат) должна быть задана цена'; 
    
CONSTRAINT isPosted(UserInvoiceDetail d) AND isPurchaseReturnBatch(operation(d)) AND sku(d) AND NOT batch(d) AND NOT skipFillBatch(d)
    MESSAGE 'Для строки накладной (закупка-возврат) должна быть задана партия'; 
    
skipNumberCheck = ABSTRACT BOOLEAN (Invoice);    
    
CONSTRAINT isPosted(Invoice i) AND isCharLength(operation(i)) AND NOT (length(number(i)) == 7 AND onlyDigits(number(i))) AND NOT skipNumberCheck(i)
    MESSAGE 'У накладной (закупка-возврат) номер должен состоять из семи цифр';

@defineMergeDocumentDetails(invoice, userInvoice, i);