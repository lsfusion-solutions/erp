MODULE PurchaseInvoiceExtraCharge;

REQUIRE PurchaseInvoiceCharge;

NAMESPACE Purchase;

TABLE invoiceInvoice (Invoice, Invoice);
inExtraCharge 'Вкл.' = ABSTRACT BOOLEAN (Invoice, InvoiceDetail);
inExtraCharge 'Вкл.' = DATA BOOLEAN (Invoice, UserInvoice);

inDataExtraCharge = DATA BOOLEAN  (Invoice, UserInvoiceDetail);

inExtraCharge 'Вкл.' (Invoice invoice, UserInvoiceDetail detail) =
    OVERRIDE inDataExtraCharge(invoice, detail), inExtraCharge(invoice, userInvoice(detail));
inExtraCharge(Invoice invoice, UserInvoiceDetail detail) += inExtraCharge(invoice, detail);

inExtraCharge (Invoice charge, invoice) = GROUP SUM 1 IF inExtraCharge(charge, InvoiceDetail d) BY invoice(d) MATERIALIZED ;
useExtraCharge (Invoice invoice) = GROUP SUM 1 IF inExtraCharge (Invoice charge, invoice);
nameSuppliers 'Поставщики' (Invoice charge) =GROUP 
    CONCAT  nameSupplier(Invoice invoice) IF inExtraCharge(charge, invoice), '; ' ORDER invoice CHARWIDTH 20;
seriesNumberSuppliers 'Накладные' (Invoice charge) =GROUP 
    CONCAT  seriesNumber(Invoice invoice) IF inExtraCharge(charge, invoice), '; ' ORDER invoice CHARWIDTH 20;  

overCopy(UserInvoiceDetail d, UserInvoiceDetail detail) + {       
    inDataExtraCharge(Invoice i,d) <- inDataExtraCharge(i,detail);
} 

backgroupExtraChargeInvoiceUser = ABSTRACT COLOR (InvoiceDetail);

TABLE invoiceUserInvoiceDetail(Invoice, UserInvoiceDetail);
extraChargePrice 'Цена доп. услуг за ед.' = ABSTRACT NUMERIC[16,4] (Invoice, InvoiceDetail);
extraChargePrice 'Цена доп. услуг за ед.' = DATA NUMERIC[16,4] (Invoice, UserInvoiceDetail);
extraChargePrice (Invoice i,UserInvoiceDetail d) += extraChargePrice(i,d);

extraChargeSum 'Сумма доп. услуг' = ABSTRACT NUMERIC[18,4] (Invoice, InvoiceDetail);
extraChargeSum 'Сумма доп. услуг' = DATA NUMERIC[18,4] (Invoice, UserInvoiceDetail);
extraChargeSum (Invoice i,UserInvoiceDetail d) += extraChargeSum(i,d);

extraChargePrice(Invoice i, UserInvoiceDetail d) => inExtraCharge(i, d) RESOLVE RIGHT;
extraChargeSum(Invoice i, UserInvoiceDetail d) => inExtraCharge(i, d) RESOLVE RIGHT;

changeExtraChargeSum(Invoice i, UserInvoiceDetail d)  { 
    INPUT n = NUMERIC[18,4] DO {
        extraChargeSum(i,d) <- n;
        IF n THEN
            extraChargePrice(i,d) <- NUMERIC[16,4](extraChargeSum(i,d)/quantity(d));
    }
}

extraChargeSum (Invoice i, UserInvoiceDetail d) <- NUMERIC[18,4](round(quantity(d) * extraChargePrice(i,d), currency(i)))
                WHEN DO CHANGED(quantity(d)) OR CHANGED (extraChargePrice(i,d)) OR CHANGED(currency(i));

extraChargeSumInvoiceDetail 'Сумма доп. услуг (расписанная)' (Invoice i) = GROUP SUM extraChargeSum(i,InvoiceDetail d);
extraChargeSumUserInvoiceDetail 'Сумма доп. услуг (расписанная)' (Invoice i) = GROUP SUM extraChargeSum(i,UserInvoiceDetail d);

extraChargePrice 'Цена доп. услуг' (o, UserInvoiceDetail d) = GROUP SUM extraChargePrice(Invoice i,d) IF isPosted(i) BY operation(i);
extraChargeSum  'Сумма доп. услуг' (o, UserInvoiceDetail d) = GROUP SUM extraChargeSum(Invoice i,d) IF isPosted(i) BY operation(i);

@defineOperationProperty(showExtraCharge, 'Доп. услуги', chargeContainer);
@defineDocumentInterfaceProperty (invoice, showExtraCharge, 'Доп. услуги');
@deriveDocumentOperationProperty(UserInvoice, showExtraCharge);

filterOperationExtraCharge= DATA LOCAL Operation (UserInvoice);
nameFilterOperationExtraCharge 'Операция' = name(filterOperationExtraCharge(UserInvoice i));
   
FORM extraChargeInvoices 'Выбрать накладные'
    OBJECTS i=UserInvoice PANEL                          
    PROPERTIES nameFilterOperationExtraCharge(i)
    OBJECTS ui=UserInvoice
    PROPERTIES (i, ui) inExtraCharge
    PROPERTIES (ui) READONLY isPosted[Invoice], isClosed[Invoice], number, series, date, time, 
                    nameSupplier, nameCustomer, nameCurrency
    FILTERS filterOperationExtraCharge(i) == operation(ui) OR TRUE AND NOT filterOperationExtraCharge(i)
    
    OBJECTS uid=UserInvoiceDetail
    PROPERTIES(i, uid) inExtraCharge
    PROPERTIES(uid) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku, 
                            quantity, price, sumGrossWeight
    FILTERS filterOperationExtraCharge(i) == operation(uid) OR TRUE AND NOT filterOperationExtraCharge(i)
            
    FILTERGROUP filters1
        FILTER 'Отмеченные' inExtraCharge(i, ui) 'F10' 
    FILTERGROUP filters2
        FILTER 'По инвойсу' userInvoice(uid) == ui 'F11' DEFAULT 
    FILTERGROUP filters3
        FILTER 'Отмеченные' inExtraCharge(i, uid) 'F10'         
;

DESIGN extraChargeInvoices {
    BOX {
        size = (1024, 768);
        NEW split {
            fill = 1;
            NEW header {
                fill = 1;
                NEW header1 {                    
                    caption = 'Фильтры';
                    horizontal = TRUE;
                    MOVE PROPERTY (nameFilterOperationExtraCharge(i));
                }
                MOVE BOX(i);
                MOVE BOX(ui);
            }
            MOVE BOX(uid);
        }
        MOVE TOOLBARBOX;
    }
}

selectExtraCharge 'Выбрать накладные'(UserInvoice i)  {   
    filterOperationExtraCharge(i) <- operation('purchase_external'); // todo: пока пишем явно операцию
    SHOW extraChargeInvoices OBJECTS i=i ;
} TOOLBAR;

@defineOperationProperty(toWeightExtraCharge, 'Доп. услуги расписывать пропорционально весу', chargeContainer);
@defineDocumentInterfaceProperty (invoice, toWeightExtraCharge, 'Доп. услуги расписывать пропорционально весу');
@deriveDocumentOperationProperty(UserInvoice, toWeightExtraCharge);
backgroundExtraChargeInvoice 'Цвет' = RGB(224, 255, 128);
extraOrder'Сортировка'(UserInvoice i, UserInvoiceDetail d) = PARTITION SUM 1 IF inExtraCharge(i, d) ORDER userInvoice(d), index(d)  BY i CHARWIDTH 1;
EXTEND FORM userInvoice
    PROPERTIES(i) showExtraCharge          
    OBJECTS uid = UserInvoiceDetail GRID
    PROPERTIES (uid) READONLY SHOWIF showExtraCharge(i) index, seriesNumber[InvoiceDetail], date, idBarcodeSku, 
                   idSku, nameSku, shortNameUOMSku
    PROPERTIES (uid) READONLY SHOWIF showExtraCharge(i) quantity, 
                   price, sum, numberVAT, valueVAT, invoicePrice,
                   VATSum, invoiceSum, sumNetWeight, 
                   sumGrossWeight
    PROPERTIES(i,uid) SHOWIF showExtraCharge(i) extraChargePrice BACKGROUND backgroundExtraChargeInvoice(), 
                    extraChargeSum BACKGROUND backgroundExtraChargeInvoice() ON CHANGE changeExtraChargeSum(i,uid), extraOrder                           
    FILTERS inExtraCharge(i,uid)   
    ORDERS extraOrder(i,uid)
                                        
    PROPERTIES SHOWIF showExtraCharge(i) toWeightExtraCharge(i), extraChargeSumUserInvoiceDetail(i) BACKGROUND backgroundExtraChargeInvoice(),
               nameSuppliers(i) READONLY BACKGROUND backgroundExtraChargeInvoice(), seriesNumberSuppliers(i) READONLY BACKGROUND backgroundExtraChargeInvoice()
;
DESIGN userInvoice {
    specificationBox {        
        NEW headerExtraChargeParams {
            caption = 'Доп. услуги';
            fill = 1;
            NEW paneExtra {
                horizontal = TRUE;
                MOVE PROPERTY (toWeightExtraCharge(i));
                MOVE PROPERTY (extraChargeSumUserInvoiceDetail(i)) {charWidth = 15;}
                MOVE PROPERTY (nameSuppliers(i)) {charWidth = 15;}
                MOVE PROPERTY (seriesNumberSuppliers(i)) {charWidth = 15;}
            }
            MOVE BOX(uid);
        }        
    }
}
EXTEND FORM invoices 
    PROPERTIES READONLY BACKGROUND backgroundExtraChargeInvoice() nameSuppliers(i) , seriesNumberSuppliers(i) 
;

calcChargeSum(Invoice i) = NUMERIC[18,4](IF isHomeCurrency(i) THEN homeSumInvoiceDetail(i) ELSE sumInvoiceDetail(i));

beforeFillExtraCharge ABSTRACT(Invoice);
afterFillExtraCharge ABSTRACT(Invoice);

fillExtraChargePriceUser 'Расписать услуги'(Invoice i)  { 
    IF currency(i) THEN {    
        beforeFillExtraCharge(i);
        
        IF toWeightExtraCharge(i) THEN {
            extraChargeSum(i, UserInvoiceDetail d) <- 
                PARTITION UNGROUP calcChargeSum
                                    PROPORTION STRICT ROUND(2) sumGrossWeight(d) IF inExtraCharge(i, d) AND isNotCharge(sku(d)) 
                                    BY i;
            extraChargePrice(i, UserInvoiceDetail d) <-
                extraChargeSum(i, d) / quantity(d) WHERE inExtraCharge[Invoice, InvoiceDetail](i, d) AND isNotCharge(sku[InvoiceDetail](d));
        
        } ELSE {
            extraChargeSum(i, UserInvoiceDetail d) <- 
                PARTITION UNGROUP calcChargeSum
                                  PROPORTION STRICT ROUND(2) (IF isHomeCurrency(d) THEN homeSum(d) ELSE sum(d)) IF inExtraCharge(i, d) AND isNotCharge(sku(d))
                                  BY i;
            extraChargePrice(i, UserInvoiceDetail d) <-
                extraChargeSum(i, d) / quantity(d) WHERE inExtraCharge[Invoice, InvoiceDetail](i, d) AND isNotCharge(sku[InvoiceDetail](d));
        }
        
        afterFillExtraCharge(i);
    } ELSE {
        MESSAGE 'Для инвойса не задана валюта.';
    }
}

EXTEND FORM userInvoice 
    PROPERTIES TOOLBAR DRAW uid SHOWIF showExtraCharge(i)  selectExtraCharge(i), fillExtraChargePriceUser(i)
;

calcExtraChargePrice (UserInvoiceDetail d) = GROUP SUM extraChargePrice(UserInvoice i,d) IF isPosted(i); //IF isPostedUserInvoiceDetail(d)
calcExtraChargeSum (UserInvoiceDetail d) = GROUP SUM extraChargeSum(UserInvoice i,d) IF isPosted(i); //IF isPostedUserInvoiceDetail(d)

WHEN CHANGED(calcExtraChargePrice(UserInvoiceDetail d)) DO
    chargePrice (d) <- calcExtraChargePrice(d);

WHEN CHANGED(calcExtraChargeSum(UserInvoiceDetail d)) DO
    chargeSum (d) <- calcExtraChargeSum(d);
    
FORM extraCharge 'Доп. услуги'
    OBJECTS d = InvoiceDetail PANEL 
    PROPERTIES (d) READONLY nameSku, chargePrice BACKGROUND backgroundChargeInvoice(), chargeSum BACKGROUND backgroundChargeInvoice()
    
    OBJECTS i = Invoice
    PROPERTIES (i) READONLY date, time, nameOperation, nameSupplier, nameSupplierStock
    PROPERTIES (i,d) READONLY BACKGROUND backgroundChargeInvoice() extraChargePrice, extraChargeSum
    FILTERS extraChargePrice(i,d) OR extraChargeSum(i,d),
            isPosted(i)
    ORDERS date(i)
;

DESIGN extraCharge {
    BOX {
        NEW top {
            caption = 'Строка приходной накладной';
            horizontal = TRUE;
            MOVE PROPERTY (nameSku(d)) { charWidth = 50;}
            MOVE PROPERTY (chargePrice(d)) {charWidth = 15;}
            MOVE PROPERTY (chargeSum(d)){charWidth = 15;}
        }
        MOVE BOX(i) {caption = 'Услуги';}
    }
    MOVE TOOLBARBOX;
}
showExtraChargePrice 'Показать доп. услуги' (InvoiceDetail d)  { 
	NEWSESSION { SHOW extraCharge OBJECTS d = d; }
} ASON CONTEXTMENU chargePrice[InvoiceDetail];
showExtraChargeSum 'Показать доп. услуги' (InvoiceDetail d)  { 
	NEWSESSION { SHOW extraCharge OBJECTS d = d; }
} ASON CONTEXTMENU chargeSum[InvoiceDetail];

showExtraChargePrice 'Показать доп. услуги' (UserInvoiceDetail d)  { 
	NEWSESSION { SHOW extraCharge OBJECTS d = d; }
} ASON CONTEXTMENU chargePrice[UserInvoiceDetail];
showExtraChargeSum 'Показать доп. услуги' (UserInvoiceDetail d)  { 
	NEWSESSION { SHOW extraCharge OBJECTS d = d; }
} ASON CONTEXTMENU chargeSum[UserInvoiceDetail];    
    
FORM extraChargeParams 'Параметры'
    OBJECTS i = Invoice PANEL
         
    OBJECTS o = Operation PANEL 
    PROPERTIES SELECTOR name(o)
    FILTERS showExtraCharge(o)

    OBJECTS s = LegalEntity PANEL 
    PROPERTIES SELECTOR name(s)
    
    OBJECTS sk = Sku PANEL 
    PROPERTIES SELECTOR name(sk)    
    FILTERS isCharge(sk)
    
    OBJECTS c = Currency PANEL 
    PROPERTIES SELECTOR shortName(c)    
    
    OBJECTS nu = NUMERIC[18,4] PANEL 
    PROPERTIES val = VALUE (nu)    
;
DESIGN extraChargeParams {
    BOX {
//        size = (800, 600); 
        NEW top {
            horizontal = TRUE;
            MOVE BOX(o);
            MOVE BOX(s) { caption = 'Поставщик услуг';}
            MOVE BOX(sk) { 
                caption = 'Услуга'; 
                PROPERTY (name(sk)) {charWidth = 20;}
            }
//            MOVE BOX(c){PROPERTY (nameCurrency(c)) {charWidth = 10;}}
            MOVE BOX(nu) { 
                caption = 'Сумма';
                horizontal = TRUE;
                MOVE PROPERTY (shortName(c)) {caption = 'Валюта'; charWidth = 5;}
                MOVE PROPERTY (val) {
                    caption = 'Сумма услуг';
                    charWidth = 15;
                }
            }
        }
        MOVE TOOLBARBOX;
    }
}

seekDefaultOperatioParams()  { 
    SEEK extraChargeParams.o = operation('purchase_charge');
}
changeDefaultCurrencyParams(LegalEntity s)  { 
    SEEK extraChargeParams.c = currency(s);
}    

EXTEND FORM extraChargeParams
    EVENTS ON INIT seekDefaultOperatioParams()     
    EVENTS ON CHANGE s changeDefaultCurrencyParams(s)
;

overCreateExtraCharge ABSTRACT LIST(Invoice, UserInvoice);  
    
createExtraChargeUser 'Накладная (закупка) доп. услуги' (Invoice invoice)  { 
	NEWSESSION {   
	    DIALOG extraChargeParams OBJECTS o INPUT, s INPUT, sk INPUT, nu INPUT, c INPUT DO {
	        NEW i = UserInvoice {
	            operation(i) <- o;
	            supplier(i) <- s;
	            customer(i) <- customer(invoice);
	            currency(i) <- c;
	            isHomeCurrency(i) <- TRUE WHERE (OVERRIDE homeCurrency(invoice) IF isHomeCurrency(invoice), currency(invoice)) != currency(i);
	            dateRateExchange(i) <- currentDate() WHERE isHomeCurrency[Invoice](i);
	            rateExchange(i) <- rateOn(typeExchange(i),currency(i),dateRateExchange(i)) WHERE isHomeCurrency[Invoice](i);                                                                                   
	            
	            overCreateExtraCharge(invoice, i);
	            
	            NEW d = UserInvoiceDetail {
	                userInvoice(d) <- i;   
	                sku(d) <- sk;
	                quantity(d) <- 1.0; 
	                price(d) <- nu;                    
	            }
	            inExtraCharge[Invoice,UserInvoice](i,invoice) <- TRUE;
	            fillExtraChargePriceUser(i);
	            SHOW userInvoice OBJECTS i=i DOCKED NOCANCEL;
	        }
	    }
	}
}
EXTEND FORM invoices
    PROPERTIES (i) createExtraChargeUser TOOLBAR 
;
DESIGN invoices {
    createdContainer {
        MOVE PROPERTY (createExtraChargeUser(i)) { alignment = STRETCH; };
    }    
}

