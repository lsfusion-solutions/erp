MODULE PurchaseInvoiceLedgerCompact;

REQUIRE PurchaseInvoice, PricingPurchase, PriceListLedger;

NAMESPACE Purchase;

TABLE compactLedger() NODEFAULT;

countDaysNotCompactLedger 'Количество дней старше которых очищать регистр цен' = DATA INTEGER ();
intervalCompactLedger 'Количество дней для очистки регистра цен' = DATA INTEGER ();
dateLastCompactLedger 'Дата до которой очищен регистр цен' = DATA DATE () TABLE compactLedger;


compactLedger 'Очистить регистр цен'(DATE dFrom, DATE dTo)  { 
    NEWSESSION {
        
        LOCAL countMove = INTEGER (Sku, DepartmentStore);
        countMove(Sku s, DepartmentStore st) <- [ GROUP SUM 1 IF date(UserInvoiceDetail d) >= dFrom AND date(d) <= dTo BY sku(d), customerStock(d)](s, st);
        MESSAGE 'Общее число строк: ' + (GROUP SUM countMove(Sku s, DepartmentStore st)) NOWAIT;
        
        LOCAL NESTED price = NUMERIC[16,5] (Sku, DepartmentStore);
        price(Sku s, DepartmentStore st) <- prevPriceB(SystemLedgerPriceListType.purchaseInvoiceStockPriceListType, s, st, DATETIME(dFrom)) WHERE countMove(s,st);
        
        LOCAL NESTED shipmentPrice = NUMERIC[16,5] (Sku, DepartmentStore);
        shipmentPrice(Sku s, DepartmentStore st) <- prevAccountPriceB(s, st, DATETIME(dFrom)) WHERE countMove(s, st);
        
        FOR iterate(DATE dt, dFrom, dTo) DO {

            FOR date(InvoiceDetail d) == dt AND Sku s == sku(d) AND DepartmentStore st == customerStock(d) AND st IS DepartmentStore AND skuType(s) == SkuType.skuTypeItem
                AND NOT explicitBatchLedger(customerStock(d)) AND NOT skipChangeLedger(d) 
            ORDER dateTime(d) DO {
                
                IF price(s, st) == price(d) AND shipmentPrice(s, st) == shipmentPrice(d) AND prevRetailPricingPriceB(s, st, shipmentDateTime(d)) == retailPrice(d) THEN {
                    
                    dataSkipChangeLedger(d) <- TRUE WHERE NOT currentBalance(overBatch(d), st) > 0.0;
                    
                } ELSE {
                    price(s, st) <- price(d);
                    shipmentPrice(s, st) <- shipmentPrice(d);
                }
            }

            countMove(Sku s, DepartmentStore st) <- [ GROUP SUM 1 BY sku(UserInvoiceDetail d), customerStock(d), date( d)](s, st, dt);
            IF (GROUP SUM 1 IF countMove(Sku s, DepartmentStore st)) THEN 
                MESSAGE CONCAT '', STRING[10](dt), ' - Всего:' + (GROUP SUM 1 IF countMove(Sku s, DepartmentStore st)), ' Очищено:' + (GROUP SUM 1 IF CHANGED (dataSkipChangeLedger(InvoiceDetail d))) NOWAIT;
            
            dateLastCompactLedger() <- dt;
            APPLY ;
        }
        
    }
}

nextDateCompactLedger 'Новая дата очистки' = (MIN sum(dateLastCompactLedger(), intervalCompactLedger()), subtract(currentDate(), countDaysNotCompactLedger()));

compactLedgerPeriod 'Очистить регистр цен'()  { 
    compactLedger(sum(dateLastCompactLedger(), 1), nextDateCompactLedger());
}

EXTEND FORM options
    PROPERTIES () countDaysNotCompactLedger, intervalCompactLedger, dateLastCompactLedger, nextDateCompactLedger READONLY, compactLedgerPeriod;
    
DESIGN options {
    purchase {
        MOVE PROPERTY (countDaysNotCompactLedger());
        MOVE PROPERTY (intervalCompactLedger());
        MOVE PROPERTY (dateLastCompactLedger());
        MOVE PROPERTY (nextDateCompactLedger());
        MOVE PROPERTY (compactLedgerPeriod());
    }
}