MODULE PurchaseReturnInvoiceDiscount;

REQUIRE PurchaseReturnInvoice, StockContractSku;

PRIORITY Purchase, Operation;

NAMESPACE PurchaseReturn;

percReturnDiscount '% отпускной цены поставщика при возврате' = DATA NUMERIC[8,3] (ContractSku, Sku);
percReturnDiscount '% отпускной цены поставщика при возврате' = DATA NUMERIC[8,3] (ContractSku);
overPercReturnDiscount '% отпускной цены поставщика при возврате' (ContractSku c, Sku s) = 
    OVERRIDE percReturnDiscount(c,s), percReturnDiscount(c) IF s IS Sku;
    
EXTEND FORM userContractSku
    PROPERTIES (c) percReturnDiscount
    TREE skuTree g = SkuGroup PARENT parent(g)
    PROPERTIES READONLY order(g), id(g), name(g)
    ORDERS order(g), name(g)
    FILTERGROUP inactive FILTER 'Активные' active(g) DEFAULT    
    
    OBJECTS s = Sku
    PROPERTIES (s) READONLY idBarcode, name, id SHOWIF showIDs()
    PROPERTIES (c, s) overPercReturnDiscount
    FILTERGROUP sku 
        FILTER 'Заполнен %' overPercReturnDiscount(c, s)
        
    FILTERS isParent(g,s)
;

DESIGN userContractSku {
    tabContainer{
        NEW perc {
            caption = 'SKU';
            fill = 1;
            type = CONTAINERV;
            NEW panPerc {
                MOVE PROPERTY (percReturnDiscount(c));
            }
            NEW perc1{            
                fill = 1;
                horizontal = TRUE;
                MOVE BOX(TREE skuTree){ caption = 'Группы товара';}
                MOVE BOX(s);            
            }
        }       
    }
}

overCopyUser(UserContractSku from, UserContractSku to) +{
    percReturnDiscount(to) <- percReturnDiscount(from);  
    percReturnDiscount(to,Sku s) <- percReturnDiscount(from,s) WHERE percReturnDiscount(from,s);      
}

@defineDocumentInterfaceProperty (invoice, showPercReturnDiscount, '% отпускной цены поставщика при возврате');

countPercReturnDiscount (ContractSku c) = GROUP SUM 1 IF overPercReturnDiscount(c, Sku s);
isPercReturnDiscount (ContractSku c) = TRUE IF countPercReturnDiscount(c);

showPercReturnDiscount(UserInvoice o) <- isPercReturnDiscount(contractSku(o))
    WHEN CHANGED(contractSku(o));
    
percReturnDiscountPrice '% отпускной цены поставщика при возврате' = ABSTRACT NUMERIC[16,4] (InvoiceDetail) MATERIALIZED;
percReturnDiscountPrice '% отпускной цены поставщика при возврате' = DATA NUMERIC[16,4] (UserInvoiceDetail);
percReturnDiscountPrice (UserInvoiceDetail d) += percReturnDiscountPrice(d);

//percReturnDiscountPrice (UserInvoiceDetail d) <- percReturnDiscount(contractSku(d), sku(d))
//                WHEN ((CHANGED(contractSku(d)) 
//                    OR CHANGED (sku(d))) AND showPercReturnDiscount(userInvoice(d)))
//                    OR (SET(showPercReturnDiscount(userInvoice(d))) AND NOT PREV(percReturnDiscountPrice(d)));

@defineDocumentInterfaceDetailPricePrefix (invoice, full, ' (полная)');

prevList (PriceListType t, UserInvoiceDetail d) += WHEN t IS PriceListType AND percReturnDiscountPrice(d) AND sku(d) AND showPercReturnDiscount(d) THEN  
                                                     round2(NUMERIC[16,4](prevPriceB(t,sku(d),customerStock(d),dateTime(d)) * percReturnDiscountPrice(d) / 100.0));
prevList (PriceListType t, UserInvoiceDetail d) += WHEN t IS PriceListType AND percReturnDiscountPrice(d) AND batch(d) AND showPercReturnDiscount(d) THEN  
                                                     round2(NUMERIC[16,4](prevPriceB(t,batch(d),customerStock(d),dateTime(d)) * percReturnDiscountPrice(d) / 100.0));

WHEN LOCAL FORMS userInvoice GOAFTER valueVAT[UserInvoiceDetail] // цены берем на начало сессии, а не этого event'а
        (((CHANGED(customerStock(UserInvoiceDetail d)) OR
         CHANGED(dateTime(d))) AND NOT isPosted(d)) OR
         (CHANGED(priceListType(d)) OR
         CHANGED(batch(d)) OR
         CHANGED(sku(d))))          
         AND NOT CHANGED(fullPrice(d))  
         AND PriceListType pt == priceListType(d) AND sku(d) NOINLINE (pt) DO {
    fullPrice(d) <- IF batch(d) THEN prevPriceB(pt,batch(d),customerStock(d),dateTime(d))
                                ELSE prevPriceB(pt,sku(d),customerStock(d),dateTime(d));
}
recalculatedFullPrice(UserInvoiceDetail detail)  {    //todo: необходимо сделать, чтобы ACTION вызывался после пересчета цены от партии
    IF invoiceDetail(detail) THEN {
        fullPrice(detail) <-  price(invoiceDetail(detail));

    }
}
WHEN LOCAL FORMS userInvoice
    CHANGED(invoiceDetail[UserInvoiceDetail](InvoiceDetail detail)) OR
    CHANGED(batch(detail)) OR
    CHANGED(priceListType(detail)) OR
    CHANGED(sku(detail)) OR
    CHANGED(customerStock(detail)) OR
    CHANGED(dateTime(detail)) 
        DO EXEC recalculatedFullPrice(detail); 

changePercReturnDiscountPrice (UserInvoiceDetail d)  { 
    INPUT n = NUMERIC[8,3] DO
        IF n THEN { 
            percReturnDiscountPrice (d) <- n;        
            price(d) <- round(NUMERIC[16,4](fullPrice(d) * percReturnDiscountPrice(d) / 100.0), defaultRoundCondition(currency(d))) WHERE fullPrice(d);
            invoicePrice(d) <- prevListPVAT (priceListType(d), d);
        } ELSE {
            percReturnDiscountPrice(d) <- NULL;
            price(d) <- fullPrice(d) WHERE fullPrice(d);     
        }  
}

changeFullPrice (UserInvoiceDetail d)  { 
    INPUT n = NUMERIC[16,4] DO
        IF n THEN { 
            fullPrice (d) <- n;        
            price(d) <- round(NUMERIC[16,4](fullPrice(d) * percReturnDiscountPrice(d) / 100.0), defaultRoundCondition(currency(d))) WHERE percReturnDiscountPrice(d); 
            invoicePrice(d) <- prevListPVAT (priceListType(d), d);
        } ELSE {
            fullPrice(d) <- NULL;
    //        price(d) <- fullPrice(d) WHERE fullPrice(d);     
        }  
}

//WHEN LOCAL FORMS userInvoice ((CHANGED(contractSku(UserInvoiceDetail d)) OR CHANGED (sku(d))) AND showPercReturnDiscount(userInvoice(d)))
//                                                OR (SET(showPercReturnDiscount(userInvoice(d)))) DO {
//    IF overPercReturnDiscount(contractSku(d), sku(d)) AND NOT PREV(percReturnDiscountPrice (d)) THEN {
//        percReturnDiscountPrice (d) <- overPercReturnDiscount(contractSku(d), sku(d));                                               
//        price(d) <- round(NUMERIC[16,4](fullPrice(d) * percReturnDiscountPrice(d) / 100.0), defaultRoundCondition(currency(d))) WHERE fullPrice(d);
//        invoicePrice(d) <- prevListPVAT (priceListType(d), d);
//    }    
//}

WHEN LOCAL FORMS userInvoice SET(showPercReturnDiscount(userInvoice(UserInvoiceDetail d))) AND overPercReturnDiscount(contractSku(d), sku(d)) AND NOT PREV(percReturnDiscountPrice(d)) DO {
    percReturnDiscountPrice (d) <- overPercReturnDiscount(contractSku(d), sku(d));
}
WHEN LOCAL FORMS userInvoice GOAFTER fullPrice[UserInvoiceDetail] (CHANGED(contractSku(UserInvoiceDetail d)) OR CHANGED(sku(d)) OR CHANGED(batch(d))) AND showPercReturnDiscount(userInvoice(d)) DO {

    IF overPercReturnDiscount(contractSku(d), sku(d)) AND NOT PREV(percReturnDiscountPrice (d)) THEN {
        percReturnDiscountPrice (d) <- overPercReturnDiscount(contractSku(d), sku(d));   
    }                    
    price(d) <- round(NUMERIC[16,4](fullPrice(d) * percReturnDiscountPrice(d) / 100.0), defaultRoundCondition(currency(d))) WHERE fullPrice(d);
    invoicePrice(d) <- prevListPVAT(priceListType(d), d);
}

WHEN LOCAL FORMS userInvoice DROPPED(showPercReturnDiscount(userInvoice(UserInvoiceDetail d))) NOINLINE DO {
    price(d) <- prevListMVAT (priceListType(d), d);
    invoicePrice(d) <- prevListPVAT (priceListType(d), d);
}

EXTEND FORM userInvoice
    PROPERTIES (i) showPercReturnDiscount
    PROPERTIES (d) SHOWIF showPercReturnDiscount(i) BEFORE price(d) fullPrice ON CHANGE changeFullPrice(d), 
                          percReturnDiscountPrice ON CHANGE changePercReturnDiscountPrice(d)
;
EXTEND FORM invoices
    PROPERTIES (d) READONLY SHOWIF showPercReturnDiscount(i) BEFORE price(d) fullPrice, percReturnDiscountPrice
;