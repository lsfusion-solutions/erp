MODULE PurchaseShipment;

REQUIRE Shipment, PurchaseInvoice, PurchaseOperation, OrderShipment, InvoiceShipment, PriceListLedger, StockDocumentSkuLedger;

NAMESPACE Purchase;

//----------------------------------------------- Поставка ---------------------------------------------------//

@defineShipment('Поставки', ' (закупка)', customer, supplier, company, company, Purchase, p);

selected 'Отм.' = DATA LOCAL BOOLEAN (Shipment); 

EXTEND FORM shipments
    PROPERTIES(s) selected BEFORE isClosed(s)
;

@extendFormFilterAccessStock(Shipment, s, shipments, customerStock, company);

@defineShipmentBatch(customerStock);
@defineShipmentBatchDialog();

@defineExternalizable(userShipment, STRING[100]);
@defineExternalizable(userShipmentDetail, STRING[100]);

in(Shipment s) += s IS Shipment;

expiryDate(UserShipmentDetail detail) <- prevExpiryDate(batch(detail)) WHEN CHANGED (batch(detail));

@defineShipmentStockDestination(supplierStock, customerStock);

@defineOrderShipment(' (закупка)', customerStock);
@defineInvoiceShipment(' (закупка)', customerStock, company, Purchase);
//
//EXTEND FORM invoices
//    PROPERTIES (i) numberByTime
//;

@defineInvoiceShipmentAction(' (закупка)');

@defineInvoiceShipmentBatch();

overCostPrice(d) = ABSTRACT NUMERIC[16,4] (ShipmentDetail);
extraCostPrice(d) = ABSTRACT VALUE NUMERIC[16,4] (ShipmentDetail);
costPrice(ShipmentDetail d) = OVERRIDE extraCostPrice(d), overCostPrice(d), price(d);

isShipped = shipped(Invoice invoice) OR (invoice IS Invoice AND NOT quantityNotChargeInvoiceDetail(invoice) > 0.0);

CLASS StatusShipped {
    differ 'Расхождение',
    shipped 'Оприходована',
    notShipped  'Не оприходована'
}

statusShipped 'Статус приемки' = ABSTRACT CASE StatusShipped (Invoice) MATERIALIZED;
nameStatusShipped 'Статус приемки' (Invoice invoice) = staticCaption(statusShipped(invoice)) CHARWIDTH 15;
//statusShipped 'Статус приемки' (Invoice invoice)= IF isShipped (invoice) AND toShipNotChargeInvoiceDetail(invoice)  
//                                                    THEN 'Расхождение'
//                                                    ELSE 
//                                                        IF isShipped (invoice) 
//                                                            THEN 'Оприходована' 
//                                                            ELSE 'Не оприходована' IF invoice IS Invoice;

statusShipped (Invoice invoice) += WHEN isShipped (invoice) AND toShipNotChargeInvoiceDetail(invoice) THEN StatusShipped.differ;
statusShipped (Invoice invoice) += WHEN isShipped(invoice) AND NOT toShipNotChargeInvoiceDetail(invoice) THEN StatusShipped.shipped;
statusShipped (Invoice invoice) += WHEN invoice IS Invoice AND NOT isShipped(invoice) THEN StatusShipped.notShipped;
                                                                                                                                                                                                                     
backgroundShip 'Цвет' (Invoice invoice)= RGB(212,255,212) IF invoice IS Invoice AND NOT isShipped(invoice);  

EXTEND FORM invoices
    PROPERTIES (i) READONLY nameStatusShipped BACKGROUND backgroundShip(i) AFTER isCommission(i)
    
    FILTERGROUP shipped 
        FILTER 'Не оприходованы' statusShipped(i)==StatusShipped.notShipped 'F11'
        FILTER 'Оприходованы' statusShipped(i)==StatusShipped.shipped OR statusShipped(i)==StatusShipped.differ 'F10'
;   
@defineOrderShipmentExecution(); 
@defineOrderInvoiceSupplierExecution(purchase, ' (закупка)', customer);
skipSelectSku = ABSTRACT BOOLEAN ();
fillSelectSku  ABSTRACT LIST ( DATE, DATE);
fillSelectOrder(DATE df, DATE dt) + { 
    IF df IS DATE AND dt IS DATE THEN {
        selectOrder(OrderDetail d) <- NULL;
        IF NOT (GROUP SUM 1 IF selectOrder(LegalEntity l))  THEN {
            selectOrder(LegalEntity l) <- TRUE WHERE active(l) AND isSupplier(l);    
        }
        IF NOT (GROUP SUM 1 IF selectOrder(Stock st))  THEN {
            selectOrder(Stock st) <- TRUE WHERE active(st) AND isCompany(st) AND accessCompany(currentUser(), st); 
        }
        IF NOT skipSelectSku() THEN {
            IF NOT (GROUP SUM 1 IF selectOrder(Sku s))  THEN {
                selectOrder(Sku s) <- TRUE WHERE active(s) AND name(s); 
            } 
            selectOrder(OrderDetail d) <- TRUE WHERE isPosted(d) AND date(d) >= df AND date(d) <= dt AND selectOrder(supplier(d)) AND selectOrder(customerStock(d)) AND selectOrder(sku(d));            
        } ELSE {
            fillSelectSku(df,dt);
        }
              
    }
    formRefresh(); 
}
EXTEND FORM executionSupplierOrder
    FILTERS isSupplier(l)
;

//----------------------------------------------- Операции -----------------------------------------------------//

@defineDocumentOperationContainer(shipment, s);
operation[Shipment.Shipment](Shipment s)+=operation(s);
@extendFormFilterRoleAccess(shipment, s, shipments);
@defineDocumentOperationConstraint(shipment, 'поставка (закупка)', Purchase);

@defineDocumentOperationLegalEntity(userShipment, supplier, 'Поставщик');
@deriveDocumentOperationLegalEntity(userShipment, supplier, userShipment);
@defineDocumentOperationLegalEntity(userShipment, customer, 'Покупатель');
@deriveDocumentOperationLegalEntity(userShipment, customer, userShipment);
@defineDocumentOperationStock(userShipment, supplier, 'Склад поставщика');
@deriveDocumentOperationStock(userShipment, supplier, userShipment);
@defineDocumentOperationStock(userShipment, customer, 'Склад покупателя');
@deriveDocumentOperationStock(userShipment, customer, userShipment);

@defineDocumentOperationRoleOver(userShipment, purchase);

@defineOperationProperty(createShipment, 'Поставка', createContainer);
@deriveDocumentOperationProperty(UserInvoice, createShipment);
createShipment(Order o) += createShipment(operation(o));

@defineOperationProperty(checkExpiryDate, 'Проверять сроки годности', constraintContainer);

CONSTRAINT (CHANGED(expiryDate(UserShipmentDetail d)) OR CHANGED(operation(d)) OR SET(isPosted(d))) AND checkExpiryDate(operation(d)) AND expiryDate(d) < date(d) AND isPosted(d)
        MESSAGE 'Срок годности товара должен быть больше либо равен дате документа'; 
CONSTRAINT (CHANGED(expiryDate(UserInvoiceDetail d)) OR CHANGED(operation(d)) OR SET(isPosted(d))) AND checkExpiryDate(operation(d)) AND expiryDate(d) < date(d) AND isPosted(d)
        MESSAGE 'Срок годности товара должен быть больше либо равен дате документа'; 

overFillInvoice(UserShipment s, Invoice i) + { 
    operation(s) <- operation(i);
}
operation(InvoiceShipment shipment) += operation(invoice(shipment));

overFillOrder(UserShipment s, Order o) + { 
    operation(s) <- operation(o);
}

// Добавляем в копирование поставок
overCopy(Shipment s, UserShipment d) + { 
    operation(d) <- operation(s);
}
@defineOperationFilterProperty(shipment, s, shipments, nameFilterShipmentSupplier);
//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplier(UserShipment userShipment) AND NOT isSupplier(supplier(userShipment))
    CHECKED BY supplier[UserShipment] MESSAGE 'Для поставки выбрано в качестве поставщика организация, не являющаяся поставщиком: закупка';
CONSTRAINT customer(UserShipment userShipment) AND NOT isCompany(customer(userShipment))
    CHECKED BY customer[UserShipment] MESSAGE 'Для поставки выбрано в качестве покупателя организация, не являющаяся компанией: закупка';
    
CONSTRAINT filterShipmentSupplier() AND NOT isSupplier(filterShipmentSupplier())
    CHECKED BY filterShipmentSupplier[] MESSAGE 'Для фильтра в поставке выбрана в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT filterShipmentCustomer() AND NOT isCompany(filterShipmentCustomer())
    CHECKED BY filterShipmentCustomer[] MESSAGE 'Для фильтра в поставке выбрана в качестве покупателя организация, не являющаяся компанией';   
CONSTRAINT filterShipmentCustomerStock() AND NOT isCompany(filterShipmentCustomerStock())
    CHECKED BY filterShipmentCustomerStock[] MESSAGE 'Для фильтра в поставке выбран в качестве склада покупателя склад, который не принадлежит компании';   
        
CONSTRAINT filterShipmentSupplier() AND filterShipmentSupplierStock() AND NOT in(filterShipmentSupplier(), filterShipmentSupplierStock())
    CHECKED BY filterShipmentSupplierStock[] MESSAGE 'Поставщик и склад поставщика в фильтре для поставки не имеют связи';
CONSTRAINT filterShipmentCustomer() AND filterShipmentCustomerStock() AND NOT in(filterShipmentCustomer(), filterShipmentCustomerStock())
    CHECKED BY filterShipmentCustomerStock[] MESSAGE 'Покупатель и склад покупателя в фильтре для поставки не имеют связи';     
//------------------------------ Ввод в упаковках -----------------------------//

@defineDocumentPack(shipment, s);
packQuantity[Shipment.ShipmentDetail](ShipmentDetail detail) += packQuantity(detail);
DESIGN userShipment {
    headerExtraParams {
        NEW headerPack {
            caption = 'Упаковка';
            MOVE PROPERTY(showPack(s));
        }
    }
}
@deriveDocumentOperationProperty(UserShipment, showPack);

@defineOrderShipmentPack();
@defineInvoiceShipmentPack();

//------------------------------ Автоматическое проставление свойств -----------------------------//

@deriveDocumentLegalEntityDefaultStock(UserShipment, supplier, userShipment);

@defineDocumentLegalEntityStockAccess(UserShipment, customer, company, userShipment);

//------------------------------ Расширение формы -----------------------------//

EXTEND FORM userShipment

    FILTERGROUP filter
        FILTER 'С остатком ' prevCurrentBalance(ks, s) 'F10'
        FILTER 'В документе ' quantityUserShipmentDetail(ks, s) 'F9'
    FILTERGROUP filter2
        FILTER 'С поступлением ' countPurchaseSupplier(supplier(s), ks) 'F8'
//        FILTER 'В прайсе ' 'F7' companyALedgerPriceListTypeSkuStockDateTime(priceListTypeUserShipmentSku(s, ks), ks, customerStockUserShipment(s), dateTimeUserShipment(s)) == supplierUserShipment(s)
;
EXTEND FORM userShipment

    FILTERGROUP filter3
        FILTER 'С остатком ' prevCurrentBalance(b, s) 'F10'
        FILTER 'В документе ' quantityUserShipmentDetail(b, s) 'F9'
    FILTERGROUP filter4
        FILTER 'С поступлением ' countPurchaseSupplier(supplier(s), sku(b)) 'F8'
//        FILTER 'В прайсе ' 'F7' companyALedgerPriceListTypeBatchStockDateTime(priceListTypeUserShipmentBatch(s, b), b, customerStockUserShipment(s), dateTimeUserShipment(s)) == supplierUserShipment(s)
;

// Резервы
@extendFormDocumentSkuOrderLedger(shipment, userShipment, s, customerStock);
@extendFormDocumentSkuOrderLedgerAll(userShipment, userShipment, s);

@extendFormDocumentBatchOrderLedger(userShipment, userShipment, s, customerStock);
@extendFormDocumentBatchOrderLedgerAll(userShipment, userShipment, s);

// ------------------------------- Расчет учетной цены для поставки ------------------------ //
calcShipmentPrice = ABSTRACT CASE NUMERIC[16,4] (UserInvoiceDetail) MATERIALIZED;
calcShipmentPrice (UserInvoiceDetail detail) += WHEN costPrice(detail) THEN costPrice(detail);

extraShipmentPrice = ABSTRACT NUMERIC[16,4] (UserInvoiceDetail) MATERIALIZED;

// Цены учетные
shipmentPrice(UserInvoiceDetail detail) <- calcShipmentPrice(detail) (+) extraShipmentPrice(detail) WHEN
    CHANGED(calcShipmentPrice(detail)) OR
    CHANGED(extraShipmentPrice(detail));
price (UserShipmentDetail detail) <- shipmentPrice(invoiceDetail(detail))
    WHEN CHANGED(shipmentPrice(invoiceDetail(detail)));

// Цену записываем всегда, чтобы она проставлялась при создании поставки отдельно
//      OR
//     CHANGED(createShipmentUserInvoiceDetail(detail)))
//        AND createShipmentUserInvoiceDetail(detail);

// ------------------------------- Коды партии ----------------------------------- //

idBatch 'Код партии' = ABSTRACT STRING[100] (ShipmentDetail) CHARWIDTH 10;
idBatch 'Код партии' = DATA STRING[100] (UserShipmentDetail) CHARWIDTH 10;
idBatch(UserShipmentDetail detail) += idBatch(detail);

idBatch(InvoiceShipmentDetail detail) += idBatch(invoiceDetail(detail));

@defineMovementIdBatch(shipmentDetail, batch, customerStock);
@defineBalancesIdBatch(shipmentDetail, batch);
@defineMovementIdBatch(userShipmentDetail, batch, customerStock);
@defineBalancesIdBatch(userShipmentDetail, batch);

EXTEND FORM userShipment
    PROPERTIES(d) READONLYIF batch(d) SHOWIF showIDs()
                  idBatch AFTER nameBatch(d)
;
EXTEND FORM shipments
    PROPERTIES(d) READONLY SHOWIF showIDs()
                  idBatch AFTER nameBatch(d)
;

// ------------------------------- Проведение по товарному отчету ------------------------ //
@implementStockDocumentLedgerInc(Shipment, customerStock);
type(Shipment l) += STRING[50]('Закупка') IF l IS Shipment;
sumItemInStockDocumentLedger 'Сумма приход, товар' (ledger) = ABSTRACT NUMERIC[18,4] (Shipment) MATERIALIZED;
sumItem (Shipment ledger) += OVERRIDE sumItemInStockDocumentLedger(ledger), sumItemShipmentDetail(ledger);
sumContainer (Shipment ledger) += sumContainerShipmentDetail(ledger);

legalEntity(Shipment ledger) += supplier(ledger);  
legalEntityStock(Shipment ledger) += supplierStock(ledger);  

operation[StockDocumentLedger](Shipment ledger) += operation(ledger);

close[StockDocumentLedger](Shipment l) + {  close(l); }


overSkipStockDocumentLedger = ABSTRACT BOOLEAN (Shipment);

skip(Shipment l) += (isCommission(invoice(l)) IF excludeCommission()) OR overSkipStockDocumentLedger(l);

// -------------------------------- Наименования для документов --------------------------- //
documentNameSku 'Наименование (для документов)' = ABSTRACT ISTRING[255] (ShipmentDetail) CHARWIDTH 30;
documentNameSku 'Наименование (для документов)' = DATA ISTRING[255] (UserShipmentDetail) CHARWIDTH 30;
documentNameSku(UserShipmentDetail detail) += documentNameSku(detail);

documentNameSku(InvoiceShipmentDetail detail) += documentNameSku(invoiceDetail(detail));

EXTEND FORM userShipment
    PROPERTIES(d) documentNameSku AFTER nameSku(d) SHOWIF useDocumentNameSku()
;
EXTEND FORM shipments
    PROPERTIES(d) documentNameSku AFTER nameSku(d) SHOWIF useDocumentNameSku()
;

// ------------------------------- Проведение по регистру остатков ------------------------ //

skipCreateBatch = ABSTRACT BOOLEAN (ShipmentDetail);
createBatch (ShipmentDetail detail) = detail IS ShipmentDetail AND NOT batch(detail) AND NOT skipCreateBatch(detail);

// Создаем партию
CLASS ShipmentBatch 'Партия на основе закупки';
shipmentBatch = AGGR ShipmentBatch WHERE createBatch(ShipmentDetail shipmentDetail) MATERIALIZED INDEXED;

@defineSkuLedgerAggregation(shipmentDetail, shipmentBatch, sku, customerStock);

quantity (ShipmentBatch batch) = quantity(shipmentDetail(batch));
quantity(ShipmentBatch b) += quantity(b);
price (ShipmentBatch batch) = price(shipmentDetail(batch));
costPrice (ShipmentBatch batch) = costPrice(shipmentDetail(batch));

replace(Sku s, ShipmentBatch b) + {  sku(UserShipmentDetail detail) <- s WHERE shipmentBatch(detail) == b;}
replace(Sku s, ShipmentBatch b) + {  sku(UserInvoiceDetail detail) <- s WHERE detail == invoiceDetail[UserShipmentDetail](shipmentDetail(b));}

@implementBatch(ShipmentBatch, sku, stock, costPrice);
manufactureDate(ShipmentBatch batch) += manufactureDate(shipmentDetail(batch)); 
id(ShipmentBatch ledger) += idBatch(shipmentDetail(ledger));
expiryDate (ShipmentBatch ledger) += expiryDate(shipmentDetail(ledger));
sum (ShipmentBatch ledger) += sum(shipmentDetail(ledger));
series (ShipmentBatch ledger) += series(shipment(shipmentDetail(ledger)));
number (ShipmentBatch ledger) += number(shipment(shipmentDetail(ledger)));

overSupplier = ABSTRACT LegalEntity(ShipmentBatch);
supplier (ShipmentBatch ledger) += OVERRIDE overSupplier(ledger), supplier(shipmentDetail(ledger));
supplierStock (ShipmentBatch ledger) += supplierStock(shipmentDetail(ledger));

overDocumentNameSku (ShipmentBatch ledger) += documentNameSku(shipmentDetail(ledger)); 

batch(Batch ledger) += ledger AS Batch;

stockDocumentLedger(ShipmentBatch ledger) += shipment(shipmentDetail(ledger)); 

cost(InvoiceDetail ledger, Batch batch) += cost (ledger, batch); 
in (InvoiceDetail ledger, Batch batch) += TRUE IF in(ledger, batch); 

edit(ShipmentBatch batch) + {  edit(shipmentDetail(batch)); }
show[SkuLedger](ShipmentBatch batch) + {  show(shipmentDetail(batch)); }

// Создаем просто inLIFOSkuLedger
createSkuLedger (ShipmentDetail detail) = detail IS ShipmentDetail AND NOT createBatch(detail);

CLASS ShipmentSkuLedger 'Изменение остатка на основе закупки';
TABLE shipmentSkuLedger (ShipmentSkuLedger);
shipmentSkuLedger = AGGR ShipmentSkuLedger WHERE createSkuLedger(ShipmentDetail shipmentDetail) MATERIALIZED INDEXED;

@defineSkuLedgerAggregation(shipmentDetail, shipmentSkuLedger, sku, customerStock);

quantity (ShipmentSkuLedger ledger) = quantity(shipmentDetail(ledger));
price (ShipmentSkuLedger ledger) = price(shipmentDetail(ledger));
batch (ShipmentSkuLedger ledger) = batch(shipmentDetail(ledger));

quantityShipmentSkuLedger (batch) = GROUP SUM quantity (ShipmentSkuLedger ledger) 
                                                   IF NOT isCompanySupplier(shipmentDetail(ledger)) 
                                               BY batch(ledger);
extraShippedQuantity(Batch b) += quantityShipmentSkuLedger(b); 

@implementSkuLedgerInLIFO(ShipmentSkuLedger, sku, stock);
quantity (ShipmentSkuLedger ledger) += quantity (ledger);
changed(ShipmentSkuLedger ledger) += CHANGED(batch(ledger));
sum (ShipmentSkuLedger ledger) += sum(shipmentDetail(ledger));

batch(ShipmentSkuLedger ledger) += batch(ledger);

stockDocumentLedger (ShipmentSkuLedger ledger) += shipment(shipmentDetail(ledger)); 

ledgerBatch (ShipmentDetail detail) = OVERRIDE batch(detail), shipmentBatch(detail);
@implementDocumentBatch(shipment, ledger);

@implementDocumentBatchForm(ps);

cost(ShipmentDetail detail, Batch batch) += quantity(detail) IF batch == ledgerBatch(detail);
// было вот так - теоретически так правильнее в случае, если на приходе будет себестоимость в cost, но из-за этого появляется зависимость между cost[SkuLedger,Batch], который меняют все, и priceListLedger для Batch
//skuLedger (ShipmentDetail detail) = IF createBatch(detail) THEN shipmentBatch(detail) ELSE shipmentSkuLedger(detail);
//cost(ShipmentDetail detail, Batch batch) += cost(skuLedger(detail), batch);

batch[Invoice.InvoiceDetail](InvoiceDetail d) += OVERRIDE ledgerBatch(invoiceShipmentDetail(d)), batch(d);

edit(ShipmentSkuLedger shipmentSkuLedger) + {  edit(shipmentDetail(shipmentSkuLedger)); }
show[SkuLedger](ShipmentSkuLedger shipmentSkuLedger) + {  show(shipmentDetail(shipmentSkuLedger)); }

overBatch(InvoiceDetail detail)= OVERRIDE ledgerBatch(invoiceShipmentDetail(detail)), batch(detail);  

//
defaultUserShipmentDetail (sku, shipment, price) = GROUP MIN UserShipmentDetail detail IF NOT batch(detail)
    BY sku(detail), userShipment(detail), price(detail);

defaultUserShipmentDetail(UserShipmentDetail detail) = defaultUserShipmentDetail(sku(detail), userShipment(detail), price(detail));

mergeBatch 'Соединить партии'(UserShipment shipment)  { 
    ASK 'Документ будет автоматически сохранен, вы действительно хотите выполнить действие "Соединить партии?"' DO {
        apply();
        FOR userShipment(UserShipmentDetail detail) == shipment
            AND NOT defaultUserShipmentDetail(detail) == detail
            AND NOT batch(detail) DO {
                batch(detail) <- shipmentBatch(defaultUserShipmentDetail(detail));

        }
    }
} TOOLBAR;

EXTEND FORM userShipment
    PROPERTIES(s) DRAW d mergeBatch
;
//Строка накладной партии
invoiceDetail = ABSTRACT InvoiceDetail (Batch);
invoiceDetail(ShipmentBatch b) += invoiceDetail(shipmentDetail(b));

barcodePack (Batch batch) = barcodePack(invoiceDetail(batch));
captionBarcodePack 'Упаковка' (Batch batch) = caption(barcodePack(batch));
idBarcodePack 'Штрихкод упаковки' (Batch batch) = id(barcodePack(batch));
//invoiceDetailBatch 'Строка накладной партии' = invoiceDetailShipmentDetail(shipmentDetailShipmentBatch(batch));

descriptionInvoiceDetailInvoiceDetail 'Строка накладной партии' = description(invoiceDetail(Batch batch));
priceInvoiceDetail 'Цена закупки' (Batch batch) = price(invoiceDetail(batch));
invoicePriceInvoiceDetail 'Цена закупки с НДС' (Batch batch) = OVERRIDE 
    invoicePrice(invoiceDetail(batch)),
    (invoiceSum(invoiceDetail(batch)) / (quantity(invoiceDetail(batch)) IF quantity(invoiceDetail(batch))!=0));

currencyInvoiceDetail 'Валюта закупки' (Batch batch) = currency(invoiceDetail(batch));
shortNameCurrencyInvoiceDetail 'Валюта закупки' (Batch batch) = shortName(currencyInvoiceDetail(batch));
rateExchangeInvoiceDetail 'Курс' (Batch batch) = rateExchange(invoiceDetail(batch));
homePriceInvoiceDetail 'Цена закупки (кон.)' (Batch batch) = homePrice(invoiceDetail(batch));

receiveShipment (UserInvoice invoice)+ { 
    IF invoice IS UserInvoice THEN {
        createShipment(invoice) <- TRUE;           
    }
};


deleteCreate (InvoiceShipment shipment)+ WHEN invoice(shipment) IS UserInvoice THEN  { 
    createShipment(Invoice invoice) <- NULL WHERE invoice == invoice(shipment);          
};

EXTEND FORM batches 
    PROPERTIES(bt)  READONLY BEFORE cost(bt) priceInvoiceDetail 
    PROPERTIES (bt) READONLY captionBarcodePack, idBarcodePack
; 

//-- Запрет на изменение документа другим пользователем
@defineOperationChangesDocument(shipment, UserShipment, preventChangesDocument, created);

overShowEdit (Shipment i) += showEditDeleteUser(i) AND isOpened(i) AND NOT skipShowEdit(i);
overShowDelete (UserShipment i) += showEditDeleteUser(i) AND isUserOpened(i) AND NOT skipShowDelete(i); 

// --------------- Проведение по регистру закупок ------------- //
shipmentQuantity[PurchaseLedger] (InvoiceDetail ledger) += shipmentQuantity(ledger);

NAVIGATOR {
    purchaseStockNavigator {
        NEW shipments;
    }
}

EXTEND FORM invoices
    OBJECTS dsLog = DocumentDetailLog GRID
    PROPERTIES (dsLog) SHOWIF enableDocumentLog() READONLY index, idSku, nameSku, quantity, price, nameUser, date, time, note
    FILTERS documentId(dsLog) == LONG(invoiceShipment(i))
;

DESIGN invoices {
    documentHistory { 
        historyTabs {
             NEW detailShipmentLog{
                 caption = 'По строкам (поставка)';
                 MOVE BOX(dsLog);
             }
        }
    }    
} 

skipCheckShipmentPrice = ABSTRACT BOOLEAN (ShipmentDetail);
CONSTRAINT isPosted(ShipmentDetail d) AND isShipmentPrice(operation(d)) AND NOT price(d) AND NOT skipCheckShipmentPrice(d)
    MESSAGE 'Для документа (закупка) должна быть задана учетная цена';
    
shipmentDateTime(InvoiceDetail l) += shipmentDateTime(l);