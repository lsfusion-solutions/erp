MODULE PurchaseShipmentAccountPrice;

REQUIRE PurchaseShipmentAccountLedger, SkuLedgerCost, SalePurchaseShipment;

NAMESPACE Purchase;

accountPrice 'Учетная цена (после)' = DATA NUMERIC[16,4] (ShipmentDetail);
accountLedgerPrice (ShipmentDetail d) += accountPrice(d);

@defineCalcAveragePrice(ShipmentDetail, customerStock);

EXTEND FORM currentBalanceSkuStock
    OBJECTS sd = ShipmentDetail
    PROPERTIES (sd) READONLY dateTime, number, quantity, price, accountPrice, balanceB
    ORDERS dateTime(sd) DESC
    FILTERS sku(sd) = s, customerStock(sd) = st
;

DESIGN currentBalanceSkuStock {
    ledgerBox {
        MOVE BOX(sd) {
            caption = 'Поставки (закупка)';
        }
    }
}

// считаем кол-во за один момент, чтобы исключить проблемы с одним товаром разными строками за одно время
// в оперативном расчете пока это не учитываем в целях производительности
quantityShipmentDetail (Sku sk, DATETIME dt, Stock st) = GROUP SUM quantity(ShipmentDetail d) BY sku(d), dateTime(d), customerStock(d);

calcIntraAccountPrice (ShipmentDetail d) =
    NUMERIC[16,4]((balanceB(d)*accountPriceB(d) +
           (OVERRIDE quantityShipmentDetail(sku(d), dateTime(d), customerStock(d)), 0.0) * (IF shipmentDetail(d) THEN accountPriceB(sku(d), supplierStock(d), dateTime(d)) ELSE price(d)))
        / ((OVERRIDE quantityShipmentDetail(sku(d), dateTime(d), customerStock(d)), 0.0) + balanceB(d)));

recalculateCostLedger (DATE dFrom, DATE dTo) + {
    LOCAL ordered = INTEGER (ShipmentDetail);
    ordered (ShipmentDetail d) <- PARTITION SUM 1 IF date(d) >= dFrom AND date(d) <= dTo AND calcRecalculateCost(sku(d)) ORDER dateTime(d), d BY sku(d), dFrom, dTo;

    FOR iterate(INTEGER i, 1, (GROUP MAX ordered(ShipmentDetail d))) DO 
        NEWSESSION NESTED (ordered) {
            APPLY NESTED LOCAL {
                LOCAL it = BOOLEAN (ShipmentDetail);
                it(ShipmentDetail d) <- ordered(d) == i; // чтобы определились классы

                accountPrice(ShipmentDetail d) <- calcIntraAccountPrice(d)
                    WHERE it(d) AND NOT date(d) < documentsClosedDate(customerStock(d));
            }
        }
}
