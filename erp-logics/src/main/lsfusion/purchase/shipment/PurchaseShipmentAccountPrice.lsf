MODULE PurchaseShipmentAccountPrice;

REQUIRE PurchaseShipmentAccountLedger, SkuLedgerCost, SalePurchaseShipment;

NAMESPACE Purchase;

accountPrice 'Учетная цена (после)' = DATA NUMERIC[16,4] (ShipmentDetail);
accountLedgerPrice (ShipmentDetail d) += accountPrice(d);

calcAccountPrice (ShipmentDetail d) = IF balanceB(d) > 0.0 THEN
                                            round2((balanceB(d)*accountPriceB(d) + quantity(d)*price(d))/(quantity(d) + balanceB(d)))
                                            ELSE price(d);

// пока без PREV, так как нужно хитро пересчитывать при изменении той же даты
WHEN SETCHANGED(sku(ShipmentDetail d)) OR SETCHANGED(customerStock(d)) OR SETCHANGED(dateTime(d)) OR SETCHANGED(quantity(d)) OR SETCHANGED(price(d)) DO
    accountPrice(d) <- calcAccountPrice(d);


EXTEND FORM currentBalanceSkuStock
    OBJECTS sd = ShipmentDetail
    PROPERTIES (sd) READONLY dateTime, number, quantity, price, accountPrice, balanceB
    ORDERS dateTime(sd) DESC
    FILTERS sku(sd) = s, customerStock(sd) = st
;

DESIGN currentBalanceSkuStock {
    ledgerBox {
        MOVE BOX(sd) {
            caption = 'Поставки (закупка)';
        }
    }
}

calcIntraAccountPrice (ShipmentDetail d) = IF balanceB(d) > 0.0 THEN
    round2((balanceB(d)*accountPriceB(d) + 
            quantity(d)* (IF shipmentDetail(d) THEN accountPriceB(sku(d), supplierStock(d), dateTime(d)) ELSE price(d)))
        / (quantity(d) + balanceB(d)))
    ELSE price(d);

recalculateCostLedger (DATE dFrom, DATE dTo) + {
    LOCAL ordered = INTEGER (ShipmentDetail);
    ordered (ShipmentDetail d) <- PARTITION SUM 1 IF date(d) >= dFrom AND date(d) <= dTo AND calcRecalculateCost(sku(d)) ORDER dateTime(d), d BY sku(d);

    FOR iterate(INTEGER i, 1, (GROUP MAX ordered(ShipmentDetail d))) DO 
        NEWSESSION NESTED (ordered) {
            APPLY {
                LOCAL it = BOOLEAN (ShipmentDetail);
                it(ShipmentDetail d) <- ordered(d) == i; // чтобы определились классы

                accountPrice(ShipmentDetail d) <- calcIntraAccountPrice(d)
                    WHERE it(d) AND NOT date(d) < documentsClosedDate(customerStock(d));
            }
        }
}
