MODULE PurchaseSaleReturnShipment;

REQUIRE SaleReturnShipment, PurchaseReturnShipment, PurchaseSaleReturnOperation;

PRIORITY PurchaseReturn;

//----------------------------------------------------------------------------//

// -- Операция
createSaleReturnShipment 'Поставка (продажа-возврат)' = DATA BOOLEAN (Purchase.Operation);

EXTEND FORM Purchase.operation
    PROPERTIES(o) createSaleReturnShipment
;
DESIGN Purchase.operation {
    saleReturnContainer {
        MOVE PROPERTY(createSaleReturnShipment(o));
    }
}

GROUP shipment 'Информация о поставке' : base;

createSaleReturn 'Создать поставку (продажа-возврат)' = ABSTRACT BOOLEAN (Shipment) MATERIALIZED;
createSaleReturn 'Создать поставку (продажа-возврат)' = DATA BOOLEAN (UserShipment) MATERIALIZED;
createSaleReturn(UserShipment shipment) += createSaleReturn(shipment);

createSaleReturn (UserShipment o) <- createSaleReturnShipment(operation(o))
    WHEN CHANGED(operation(o));

createSaleReturn 'Создать поставку (продажа-возврат)' (ShipmentDetail shipmentDetail) = createSaleReturn(shipment(shipmentDetail))MATERIALIZED;
createSaleReturn 'Создать поставку (продажа-возврат)' (UserShipmentDetail userShipmentDetail) = createSaleReturn(userShipment(userShipmentDetail));
backgroundSaleReturn 'Цвет' (Shipment shipment) = RGB(255, 224, 255) IF shipment IS Shipment;

@defineDocumentInterfaceHeaderTimePrefix(Shipment, saleReturnShipment, ' поставки (продажа-возврат)');
saleReturnShipmentDate(UserShipment i) <- date(i) WHEN CHANGED(date(i));
saleReturnShipmentTime(UserShipment i) <- time(i) WHEN CHANGED(time(i));

@defineDocumentInterfaceOperationPrefix (shipment, saleReturn, Sale, ' (продажа-возврат)');

// Записываем операцию для закупки по умолчанию из операции
saleReturnOperation (UserShipment shipment) <- saleReturnOperation(operation(shipment))
    WHEN CHANGED(operation(shipment));

EXTEND FORM userShipment
    PROPERTIES(s) BACKGROUND backgroundSaleReturn(s) createSaleReturn
    PROPERTIES(s) BACKGROUND backgroundSaleReturn(s) SHOWIF createSaleReturn(s) nameSaleReturnOperation,
                  saleReturnShipmentDate, saleReturnShipmentTime
;
DESIGN userShipment {
    headerCreateDocuments{
        NEW headerShipment{
            caption = 'Поставка';
            type = CONTAINERH;
            MOVE PROPERTY(createSaleReturn(s));
            MOVE PROPERTY(nameSaleReturnOperation(s));
            MOVE PROPERTY(saleReturnShipmentDate(s));
            MOVE PROPERTY(saleReturnShipmentTime(s));
        }
    }
}

//--  Связь поставки с поставкой

shipmentDetail = ABSTRACT ShipmentDetail (SaleReturn.ShipmentDetail) MATERIALIZED INDEXED;
shipmentDetail = DATA ShipmentDetail (SaleReturn.UserShipmentDetail) INDEXED;
shipmentDetail(SaleReturn.UserShipmentDetail shipmentDetail) += shipmentDetail(shipmentDetail);

CONSTRAINT supplier(SaleReturn.UserShipmentDetail detail) != supplier(shipmentDetail(detail)) OR
           supplierStock(detail) != supplierStock(shipmentDetail(detail)) OR
           customer(detail) != customer(shipmentDetail(detail)) OR
           customerStock(detail) != customerStock(shipmentDetail(detail)) OR
           sku(detail) != sku(shipmentDetail(detail))
    CHECKED BY shipmentDetail[SaleReturn.UserShipmentDetail]
        MESSAGE 'Поставщик, покупатель, склад поставщика и склад покупателя в поставке и поставке на основе поставке должны соответствовать друг другу';


descriptionIndexShipmentDetail 'Строка поставки (закупка-возврат)' (SaleReturn.ShipmentDetail detail) = descriptionIndex(shipmentDetail(detail));
descriptionIndexShipmentDetail 'Строка поставки (закупка-возврат)' (SaleReturn.UserShipmentDetail detail) = descriptionIndex(shipmentDetail(detail));

overCopy[SaleReturn.UserShipmentDetail,SaleReturn.UserShipmentDetail](SaleReturn.UserShipmentDetail d, SaleReturn.UserShipmentDetail detail) + {       
    shipmentDetail(d) <- shipmentDetail(detail);             
} 

quantityShipmentDetail (purchaseReturn, saleReturn) = GROUP SUM quantity(SaleReturn.ShipmentDetail detail) BY shipment(shipmentDetail(detail)), shipment(detail);

saleShipments 'Поставки (закупка-возврат)' (SaleReturn.Shipment saleReturn) = GROUP
                                                        CONCAT STRING[255](description(Shipment purchaseReturn)) IF quantityShipmentDetail(purchaseReturn, saleReturn) , ', '
                                                        ORDER purchaseReturn IN shipment CHARWIDTH 30 MATERIALIZED;

relationSaleReturn 'Связь' (SaleReturn.Shipment saleReturn) = GROUP SUM quantityShipmentDetail (Shipment purchaseReturn, saleReturn) MATERIALIZED;

shipped 'Кол-во (поставлено)' (shipmentDetail) = GROUP SUM quantity(SaleReturn.ShipmentDetail detail) IF isPosted(detail)
                                                                   BY shipmentDetail(detail) MATERIALIZED;

toShip 'Не поставлено' (ShipmentDetail shipmentDetail) = quantity (shipmentDetail) (-) shipped(shipmentDetail);

CLASS SaleReturnShipment 'Поставка возврат на основе поставки возврат': SaleReturn.Shipment;
CLASS SaleReturnShipmentDetail 'Строка поставки возврат на основе поставки возврат' : SaleReturn.ShipmentDetail;

@defineDocumentTables(saleReturnShipment);

@defineDocumentAggregation(shipment, saleReturnShipment, createSaleReturn);
shipment(SaleReturnShipmentDetail detail) += saleReturnShipment(detail);

index(SaleReturnShipmentDetail detail) += index(detail);

date(SaleReturnShipment shipment) += saleReturnShipmentDate(shipment(shipment));
time(SaleReturnShipment shipment) += saleReturnShipmentTime(shipment(shipment));

@defineDocumentAggregationStockPrefix(shipment, saleReturnShipment, supplier, 'Склад поставщика', , );
supplierStock(SaleReturnShipment shipment) += supplierStock(shipment);
@defineDocumentAggregationStockPrefix(shipment, saleReturnShipment, customer, 'Склад покупателя', , );
customerStock(SaleReturnShipment shipment) += customerStock(shipment);

@defineDocumentAggregationLegalEntityPrefix(shipment, saleReturnShipment, supplier, 'Поставщик', , );
supplier(SaleReturnShipment shipment) += supplier(shipment);
@defineDocumentAggregationLegalEntityPrefix(shipment, saleReturnShipment, customer, 'Покупатель', , );
customer(SaleReturnShipment shipment) += customer(shipment);

@defineDocumentAggregationPosted(shipment, saleReturnShipment);
isPosted(SaleReturnShipment shipment) += isPosted(shipment);

@defineDocumentAggregationClosed(shipment, saleReturnShipment);
isClosed(SaleReturnShipment shipment) += isClosed(shipment);

number(SaleReturnShipment shipment) += number(shipment(shipment));
series(SaleReturnShipment shipment) += series(shipment(shipment));
seriesNumber 'Серия/номер документа' (SaleReturnShipment saleReturnShipment) = seriesNumber(shipment(saleReturnShipment));

noteShipment 'Примечание' (SaleReturnShipment saleReturnShipment) = note(shipment(saleReturnShipment));
note(SaleReturnShipment shipment) += noteShipment(shipment);

currency  (SaleReturnShipment saleReturnShipment) = currency(shipment(saleReturnShipment));
currency (SaleReturnShipment shipment) += currency(shipment);

@defineDocumentDescription(saleReturnShipment, SaleReturnShipmentDetail, 'Поставка возврат на основе поставки возврат ');
description (SaleReturnShipment shipment) += description(shipment);
operation(SaleReturnShipment shipment) += saleReturnOperation(shipment(shipment));

@defineDocumentAggregationDetailSku(shipment, saleReturnShipment, sku);
sku(SaleReturnShipmentDetail shipmentDetail) +=  sku(shipmentDetail);

@defineDocumentAggregationDetailBatch(shipment, saleReturnShipment);
batch(SaleReturnShipmentDetail shipmentDetail) += batch(shipmentDetail);

quantity(SaleReturnShipmentDetail shipmentDetail) += quantity(shipmentDetail(shipmentDetail));
expiryDate(SaleReturnShipmentDetail shipmentDetail) += expiryDate(shipmentDetail(shipmentDetail));

price(SaleReturnShipmentDetail shipmentDetail) += price(shipmentDetail(shipmentDetail));

sum(SaleReturnShipmentDetail shipmentDetail) += sum(shipmentDetail(shipmentDetail));

edit(SaleReturnShipment shipment) + {  edit(shipment(shipment)); }
close(SaleReturnShipment shipment) + {  close(shipment(shipment)); }
createdUser(SaleReturnShipment shipment) += createdUser(shipment(shipment));
edit(SaleReturnShipmentDetail shipmentDetail) + {  edit(shipmentDetail(shipmentDetail)); }
show(SaleReturnShipmentDetail shipmentDetail) + {  show(shipmentDetail(shipmentDetail)); }

showPack(SaleReturnShipment shipment) +=  showPack(shipment(shipment));
barcodePack(SaleReturnShipmentDetail shipmentDetail) += barcodePack(shipmentDetail(shipmentDetail));
amountPack(SaleReturnShipmentDetail shipmentDetail) +=  amountPack(shipmentDetail(shipmentDetail));
packQuantity(SaleReturnShipmentDetail shipmentDetail) +=  packQuantity(shipmentDetail(shipmentDetail));

shipmentDetail(SaleReturnShipmentDetail shipmentDetail) += shipmentDetail(shipmentDetail);

// Создание поставки на основе поставки //

FORM shipmentShipments 'Поставки (закупка-возврат)'
    OBJECTS s = LegalEntity PANEL
    PROPERTIES (s) READONLY name
    OBJECTS c = LegalEntity PANEL
    PROPERTIES (c) READONLY name

    OBJECTS ss = Stock PANEL
    PROPERTIES (ss) READONLY name
    OBJECTS cs = Stock PANEL
    PROPERTIES (cs) READONLY name

    OBJECTS o = Shipment
    PROPERTIES (o) READONLY isPosted, number, series, date, time, nameCurrency,
                            countShipmentDetail, quantityShipmentDetail, sumShipmentDetail,
                            note
    FILTERS supplier(o) == s,
            customer(o) == c,
            supplierStock(o) == ss,
            customerStock(o) == cs,
            isPosted(o) AND NOT createSaleReturn(o)

    OBJECTS d = ShipmentDetail

    PROPERTIES (d) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku,
                            quantity
    PROPERTIES (d) READONLY SHOWIF showPack(o) idBarcodePack, shortNameUOMPack, amountPack, packQuantity
    PROPERTIES (d) READONLY price, sum,
                            nameSupplierStock, toShip BACKGROUND backgroundSaleReturn(o)
    FILTERS shipment(d) == o
;

DESIGN shipmentShipments {
    BOX {
        size = (1024, 768);
        OBJECTS {
            NEW documentContainer {
                fill = 1;    
                type = CONTAINERV;
                NEW headerBox {
                    type = CONTAINERH;
                    NEW headerBox1 {
                        type = CONTAINERH;
                        caption = 'Поставщик';
                        MOVE BOX(s);
                        MOVE BOX(ss);
                    }
                    NEW headerBox2 {
                        type = CONTAINERH;
                        caption = 'Покупатель';
                        MOVE BOX(c);
                        MOVE BOX(cs);
                    }
                }
                MOVE BOX(o);
                NEW documentDetail {
                    type = TABBED;
                    fill = 1;
    
                    MOVE BOX(d) {
                        caption = 'Спецификация';
                    }
                    NEW printTab {
                        caption = 'Печатные формы';
                        NEW printContainer {
                            caption = 'Печать';
                        }
                    }
                }
            }
        }
    }
}


fillShipment 'Заполнить на основе поставки (закупка-возврат)'(SaleReturn.UserShipment userShipment)   {       // подставляем все количество ???
    DIALOG shipmentShipments OBJECTS s = supplier(userShipment), c = customer(userShipment),
                                   ss = supplierStock(userShipment), cs = customerStock(userShipment), o INPUT DO {
        FOR shipment(ShipmentDetail shipmentDetail) == o NEW d = SaleReturn.UserShipmentDetail DO {
            userShipment(d) <- userShipment;
            shipmentDetail(d) <- shipmentDetail;

            price(d) <- price(shipmentDetail);

            sku(d) <- sku(shipmentDetail);
            batch(d) <- batch(shipmentDetail);
            quantity (d) <- quantity(shipmentDetail);

            barcodePack(d) <- barcodePack(shipmentDetail);
            amountPack(d) <- amountPack(shipmentDetail);
            packQuantity(d) <- packQuantity(shipmentDetail);
        }
    }
} IN shipment;

EXTEND FORM SaleReturn.userShipment
    PROPERTIES(s) fillShipment, saleShipments READONLY
    PROPERTIES(d) descriptionIndexShipmentDetail BEFORE deletesd
;
DESIGN SaleReturn.userShipment { headerCreateDetail{ MOVE GROUP(shipment,s) {  lines = 1; type = CONTAINERV; }}}

EXTEND FORM SaleReturn.shipments
//    PROPERTIES(s) READONLY saleShipmentsShipment
    PROPERTIES(d) READONLY descriptionIndexShipmentDetail SHOWIF relationSaleReturn(s)
;

//-- Действие

moveUserShipment 'Поставка (продажа-возврат)'(Shipment shipment)   { 
	NEWSESSION{
	
	    NEW s = SaleReturn.UserShipment {
	
	        supplier(s) <- supplier(shipment);
	        customer(s) <- customer(shipment);
	        supplierStock(s) <- supplierStock(shipment);
	        customerStock(s) <- customerStock(shipment);
	        number(s) <- number(shipment);
	        series(s) <- series(shipment);
	        note(s) <- note(shipment);
	        currency(s) <- currency(shipment);
	
	        showPack(s) <- showPack(shipment);
	        operation(s) <- saleReturnOperation(operation(shipment));
	
	        FOR shipment(ShipmentDetail detail)==shipment NEW d = SaleReturn.UserShipmentDetail DO {
	
	            userShipment(d) <- s;
	            shipmentDetail(d) <- detail;
	
	            sku(d) <- sku(detail);
	            quantity (d) <- quantity(detail);
	            price (d) <- price(detail);
	
	            barcodePack (d) <- barcodePack(detail);
	            amountPack (d) <- amountPack(detail);
	            packQuantity (d) <- packQuantity(detail);
	
	            batch(d) <- batch(detail);
	        }
	
	    SHOW SaleReturn.userShipment OBJECTS s = s DOCKED NOCANCEL;
	    }
	}
} TOOLBAR;

EXTEND FORM shipments
    PROPERTIES(s) moveUserShipment
;
DESIGN shipments {
    createdContainer{
        MOVE PROPERTY(moveUserShipment(s)) { alignment = STRETCH; };
    }
}

