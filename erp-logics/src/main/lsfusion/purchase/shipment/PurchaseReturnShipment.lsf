MODULE PurchaseReturnShipment;

REQUIRE Shipment, PurchaseReturnInvoice, OrderShipment, InvoiceShipment, PriceListLedger, StockDocumentSkuLedger, PurchaseLedger;

PRIORITY Purchase, Operation;

NAMESPACE PurchaseReturn;

//----------------------------------------------- Поставка ---------------------------------------------------//
@defineShipment('Возвраты', ' (закупка-возврат)', customer, supplier, company, company, PurchaseReturn, pr);
@extendFormFilterAccessStock(Shipment, s, shipments, customerStock, company);

@defineShipmentBatch(customerStock);
@implementDocumentBatch(shipment);

@implementDocumentBatchForm(prs);

@defineShipmentBatchDialogStock(customerStock, Out);

expiryDate(UserShipmentDetail detail) <- expiryDate(batch(detail)) WHEN CHANGED (batch(detail));

@defineShipmentStockDestination(customerStock, supplierStock);

@defineOrderShipment(' (закупка-возврат)', customerStock);
@defineInvoiceShipment(' (закупка-возврат)', customerStock, company, PurchaseReturn);
@defineInvoiceShipmentAction(' (закупка-возврат)');

@defineInvoiceShipmentBatch();

//----------------------------------------------- Операции -----------------------------------------------------//

@defineDocumentOperationContainer(shipment, s, overName);
operation[Shipment.Shipment](Shipment s)+=operation(s);
@extendFormFilterRoleAccess(shipment, s, shipments);
@defineDocumentOperationConstraint(shipment, 'поставка (закупка-возврат)', PurchaseReturn);

@defineDocumentOperationLegalEntity(userShipment, supplier, 'Поставщик');
@deriveDocumentOperationLegalEntity(userShipment, supplier, userShipment);
@defineDocumentOperationLegalEntity(userShipment, customer, 'Покупатель');
@deriveDocumentOperationLegalEntity(userShipment, customer, userShipment);
@defineDocumentOperationStock(userShipment, supplier, 'Склад поставщика');
@deriveDocumentOperationStock(userShipment, supplier, userShipment);
@defineDocumentOperationStock(userShipment, customer, 'Склад покупателя');
@deriveDocumentOperationStock(userShipment, customer, userShipment);

@defineDocumentOperationRole(userShipment);

@deriveDocumentOperationProperty(UserInvoice, createShipment);
createShipment(Order o) += createShipment(operation(o));

overFillInvoice(UserShipment s, Invoice i) + { 
    operation(s) <- operation(i);
}

operation(InvoiceShipment shipment) += operation(invoice(shipment));

overFillOrder(UserShipment s, Order o) + { 
    operation(s) <- operation(o);
}
// Добавляем в копирование поставок
overCopy(Shipment s, UserShipment d) + { 
    operation(d) <- operation(s);
}

@defineOperationFilterProperty(shipment, s, shipments, nameFilterShipmentSupplier);
//------------------------------ Ограничение на выбор контрагентов -----------------------------//

CONSTRAINT supplier(UserShipment userShipment) AND NOT isSupplier(supplier(userShipment))
    CHECKED BY supplier[UserShipment] MESSAGE 'Для поставки выбрано в качестве поставщика организация, не являющаяся поставщиком: закупка-возврат';
CONSTRAINT customer(UserShipment userShipment) AND NOT isCompany(customer(userShipment))
    CHECKED BY customer[UserShipment] MESSAGE 'Для поставки выбрано в качестве покупателя организация, не являющаяся компанией: закупка-возврат';
       
CONSTRAINT filterShipmentSupplier() AND NOT isSupplier(filterShipmentSupplier())
    CHECKED BY filterShipmentSupplier[] MESSAGE 'Для фильтра в поставке выбрана в качестве поставщика организация, не являющаяся поставщиком';
CONSTRAINT filterShipmentCustomer() AND NOT isCompany(filterShipmentCustomer())
    CHECKED BY filterShipmentCustomer[] MESSAGE 'Для фильтра в поставке выбрана в качестве покупателя организация, не являющаяся компанией';  
CONSTRAINT filterShipmentCustomerStock() AND NOT isCompany(filterShipmentCustomerStock())
    CHECKED BY filterShipmentCustomerStock[] MESSAGE 'Для фильтра в поставке выбран в качестве склада покупателя склад, который не принадлежит компании';   
        
CONSTRAINT filterShipmentSupplier() AND filterShipmentSupplierStock() AND NOT in(filterShipmentSupplier(), filterShipmentSupplierStock())
    CHECKED BY filterShipmentSupplierStock[] MESSAGE 'Поставщик и склад поставщика в фильтре для поставки не имеют связи';
CONSTRAINT filterShipmentCustomer() AND filterShipmentCustomerStock() AND NOT in(filterShipmentCustomer(), filterShipmentCustomerStock())
    CHECKED BY filterShipmentCustomerStock[] MESSAGE 'Покупатель и склад покупателя в фильтре для поставки не имеют связи';      
//------------------------------ Ввод в упаковках -----------------------------//

@defineDocumentPack(shipment, s);
packQuantity[Shipment.ShipmentDetail](ShipmentDetail detail) += packQuantity(detail);
DESIGN userShipment {
    headerExtraParams {
        NEW headerPack {
            caption = 'Упаковка';
            MOVE PROPERTY(showPack(s));
        }
    }
}

@deriveDocumentOperationProperty(UserShipment, showPack);

@defineOrderShipmentPack();
@defineInvoiceShipmentPack();

//------------------------------ Автоматическое проставление свойств -----------------------------//

@deriveDocumentLegalEntityDefaultStock(UserShipment, supplier, userShipment);

@defineDocumentLegalEntityStockAccess(UserShipment, customer, company, userShipment);

//------------------------------ Расширение формы -----------------------------//

EXTEND FORM userShipment

    FILTERGROUP filter
        FILTER 'С остатком ' prevCurrentBalance(ks, s) 'F10'
        FILTER 'В документе ' quantityUserShipmentDetail(ks, s) 'F9'
    FILTERGROUP filter2
        FILTER 'С поступлением ' countPurchaseSupplier(supplier(s), ks) 'F8'
//        FILTER 'В прайсе ' 'F7' companyALedgerPriceListTypeSkuStockDateTime(priceListTypeUserShipmentSku(s, ks), ks, customerStockUserShipment(s), dateTimeUserShipment(s)) == supplierUserShipment(s)
;
EXTEND FORM userShipment

    FILTERGROUP filter3
        FILTER 'С остатком ' prevCurrentBalance(b, s) 'F10'
        FILTER 'В документе ' quantityUserShipmentDetail(b, s) 'F9'
    FILTERGROUP filter4
        FILTER 'С поступлением ' countPurchaseSupplier(supplier(s), sku(b)) 'F8'
//        FILTER 'В прайсе ' 'F7' companyALedgerPriceListTypeBatchStockDateTime(priceListTypeUserShipmentBatch(s, b), b, customerStockUserShipment(s), dateTimeUserShipment(s)) == supplierUserShipment(s)
;

// Резервы
@extendFormDocumentSkuOrderLedger(shipment, userShipment, s, customerStock);
@extendFormDocumentSkuOrderLedgerAll(userShipment, userShipment, s);

@extendFormDocumentBatchOrderLedger(userShipment, userShipment, s, customerStock);
@extendFormDocumentBatchOrderLedgerAll(userShipment, userShipment, s);

// --------------------------- Расчет учетной цены для поставки --------------------- //

// Для поставки
@deriveDocumentDetailPriceAccountBatch (userShipment, sku, customerStock);

disableUpdateShipmentPrice = ABSTRACT VALUE BOOLEAN (UserInvoiceDetail);

WHEN LOCAL (CHANGED(customerStock(UserInvoiceDetail detail)) OR
            (CHANGED(dateTime(detail)) AND NOT isPosted(detail)) OR
            SETCHANGED(batch(detail))) AND batch(detail) AND NOT CHANGED(shipmentPrice(detail)) AND NOT skipUpdatePriceAccount() AND NOT disableUpdateShipmentPrice(detail) DO
    shipmentPrice (detail) <- prevAccountPriceB(batch(detail), customerStock(detail), dateTime(detail));

WHEN LOCAL (CHANGED(sku(UserInvoiceDetail detail)) OR
            CHANGED(customerStock(detail)) OR
            (CHANGED(dateTime(detail)) AND NOT isPosted(detail)) OR
            DROPPED(batch(detail))) AND NOT batch(detail) AND NOT CHANGED(shipmentPrice(detail)) AND NOT skipUpdatePriceAccount() AND NOT disableUpdateShipmentPrice(detail) DO
    shipmentPrice (detail) <- prevAccountPriceB(sku(detail), customerStock(detail), dateTime(detail));


// ------------------------------- Проведение по товарному отчету ------------------------ //
@implementStockDocumentLedgerOut(Shipment, customerStock);

overSumItem = ABSTRACT  NUMERIC[18,4](Shipment);
overSumContainer = ABSTRACT NUMERIC[18,4](Shipment);

type(Shipment l) += STRING[50]('Закупка-возврат') IF l IS Shipment;
sumItem (Shipment ledger) += OVERRIDE overSumItem(ledger), sumItemShipmentDetail(ledger);
sumContainer (Shipment ledger) += OVERRIDE overSumContainer(ledger), sumContainerShipmentDetail(ledger);

legalEntity(Shipment ledger) += supplier(ledger);  
legalEntityStock(Shipment ledger) += supplierStock(ledger);
  
operation[StockDocumentLedger](Shipment ledger) += operation(ledger);
isReturn(Shipment ledger) += ledger IS Shipment;

close[StockDocumentLedger](Shipment l) + {  close(l); }

overSkipStockDocumentLedger = ABSTRACT BOOLEAN (Shipment);

skip(Shipment l) += (isCommission(invoice(l)) IF excludeCommission()) OR overSkipStockDocumentLedger(l);

// ------------------------------- Проведение по регистру остатков ------------------------ //
@implementSkuLedgerOutFIFO(ShipmentDetail, sku, customerStock);
quantity[OutFIFOSkuLedger] (ShipmentDetail ledger) += quantity(ledger);
batch[SkuLedger](ShipmentDetail ledger) += batch(ledger);
@implementSkuLedgerOutFIFOBatchBalance(shipmentDetail, customerStock);

overSum = ABSTRACT NUMERIC[18,4] (ShipmentDetail);
sum[OutSkuLedger] (ShipmentDetail ledger) += OVERRIDE overSum(ledger), sum(ledger);

cost(ShipmentDetail detail, Batch batch) += cost[SkuLedger,Batch](detail, batch) IF detail IS ShipmentDetail;
cost(InvoiceDetail ledger, Batch batch) += -cost (ledger, batch); 

show[SkuLedger](ShipmentDetail d) + {  show(d); }
// ------------------------------- Проведение по товарному отчету ------------------------ //

stockDocumentLedger(ShipmentDetail ledger) += shipment(ledger);

//-- Запрет на изменение документа другим пользователем
@defineOperationChangesDocument(shipment, UserShipment, preventChangesDocument, created);

overShowEdit (Shipment i) += showEditDeleteUser(i) AND isOpened(i) AND NOT skipShowEdit(i);
overShowDelete (UserShipment i) += showEditDeleteUser(i) AND isUserOpened(i) AND NOT skipShowDelete(i); 

// --------------- Проведение по регистру закупок ------------- //
shipmentQuantity[PurchaseLedger] (InvoiceDetail ledger) += -shipmentQuantity(ledger);


NAVIGATOR {
    purchaseStockNavigator {
        NEW shipments;
    }
}

skipCheckShipmentPrice = ABSTRACT BOOLEAN (ShipmentDetail);
CONSTRAINT isPosted(ShipmentDetail d) AND isShipmentPrice(operation(d)) AND NOT price(d) AND NOT skipCheckShipmentPrice(d)
    MESSAGE 'Для документа (закупка-возврат) должна быть задана учетная цена';
    
shipmentDateTime(InvoiceDetail l) += shipmentDateTime(l);