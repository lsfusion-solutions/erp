MODULE PurchaseShipmentAccountLedger;

REQUIRE PurchaseShipment, PriceListLedgerAccount;

NAMESPACE Purchase;

// ------------------------------- Проведение регистру учетных цен ------------------------ //

accountLedgerPrice = ABSTRACT VALUE NUMERIC[16,4] (ShipmentDetail);
accountLedgerPrice (ShipmentDetail d) += price(d);

accountPrice(ShipmentBatch b) = accountLedgerPrice(shipmentDetail(b));

// Новая партия
supplier (ShipmentBatch ledger) = supplier(shipmentDetail(ledger));
show (ShipmentBatch ledger)  { show(shipmentDetail(ledger));};
@implementSystemLedgerPriceListType(account, ShipmentBatch, supplier, stock, account);
in(ShipmentBatch ledger, ShipmentBatch batch) += (ledger AS ShipmentBatch) == batch;
skipChangeLedger 'Не изменять текущие цены' = ABSTRACT VALUE BOOLEAN(ShipmentBatch);
skipChangeLedger(ShipmentBatch b) += dataSkipChangeLedger(invoiceDetail(shipmentDetail(b)));
skipChangeLedger(ShipmentBatch b) += onlyPositivePriceLedger(operation(shipmentDetail(b))) AND NOT quantity(shipmentDetail(b)) >0;

skip[PriceListLedger](ShipmentBatch ledger) += skipChangeLedger(ledger);

// Просто движение
accountPrice(ShipmentSkuLedger l) = accountLedgerPrice(shipmentDetail(l));

supplier (ShipmentSkuLedger ledger) = supplier(shipmentDetail(ledger));
show (ShipmentSkuLedger batch)  { show(shipmentDetail(batch));};
@implementSystemLedgerPriceListType(account, ShipmentSkuLedger, supplier, stock, account);
in (ShipmentSkuLedger ledger, Batch batch) += batch(shipmentDetail(ledger)) == batch; 

skipChangeLedger 'Не изменять текущие цены' = ABSTRACT VALUE BOOLEAN(ShipmentSkuLedger);
skipChangeLedger(ShipmentSkuLedger b) += dataSkipChangeLedger(invoiceDetail(shipmentDetail(b)));
skipChangeLedger(ShipmentSkuLedger l) += onlyPositivePriceLedger(operation(shipmentDetail(l))) AND NOT quantity(shipmentDetail(l)) > 0;
skip[PriceListLedger](ShipmentSkuLedger ledger) += skipChangeLedger(ledger);

accountPriceB (ShipmentDetail d) = accountPriceB(sku(d), customerStock(d), dateTime(d));