MODULE PurchaseServiceStatusContract;

REQUIRE PurchaseServiceStatus;

NAMESPACE Purchase;

contractSku = DATA ContractSku(ServiceStatusDetail);// NONULL;
descriptionContractSku 'Договор' (ServiceStatusDetail d) = description(contractSku(d)) IN id;

replace(ContractSku c, ContractSku o) + { contractSku(ServiceStatusDetail object) <- o WHERE contractSku(object) == c;}

CONSTRAINT legalEntity(ServiceStatusDetail d) AND contractSku(d) AND NOT supplier(contractSku(d)) == legalEntity(d)
    MESSAGE 'Поставщик "Статус качества" не соответствует поставщику договора';
    
overPercService 'Качество сервиса (контроль), %' = DATA NUMERIC[16,2] (ContractSku);
dataPercService 'Качество сервиса (контроль), %' (ContractSku c) = OVERRIDE overPercService(c), dataPercService(supplier(c));

lastServiceStatusDetail   =
    GROUP LAST ServiceStatusDetail d
        ORDER toDate(d), d
        WHERE d IS ServiceStatusDetail
        BY contractSku(d);
        
nameServiceStatus 'Статус качества сервиса' (ContractSku c) = staticCaption(serviceStatus(lastServiceStatusDetail(c))); 
percService 'Качество сервиса, %' (ContractSku c) = percService(lastServiceStatusDetail(c)); 
isStopping 'В стоп-листе' (ContractSku c) = serviceStatus(lastServiceStatusDetail(c)) == ServiceStatus.stopping;

backgroundServiceStatus (ContractSku c) = CASE 
    WHEN serviceStatus(lastServiceStatusDetail(c)) == ServiceStatus.stopping THEN RGB(255,0,0)
    WHEN serviceStatus(lastServiceStatusDetail(c)) == ServiceStatus.warning THEN RGB(255,255,0) 
    ELSE RGB(255,255,255) 
;

prevStatus 'Статус качества сервиса'  =
    GROUP LAST serviceStatus(ServiceStatusDetail d)
        ORDER toDate(d), d
        WHERE fromDate(d)<= DATE date AND date <= toDate(d) AND NOT isChange(d)
        BY contractSku(d), date;
prevServiceStatusDetail 'Статус качества сервиса'  =
    GROUP LAST ServiceStatusDetail d
        ORDER toDate(d), d
        WHERE fromDate(d)<= DATE date AND date <= toDate(d) AND NOT isChange(d)
        BY contractSku(d), date;

isChange = DATA LOCAL NESTED BOOLEAN (ContractSku);

sumShippedService (contract, DATE dateFrom, DATE dateTo)= GROUP SUM sumShippedOrderDetail(Order order) 
    IF shipmentDate(order) >= dateFrom AND shipmentDate(order) <= dateTo AND isPosted(order) AND isSent(order) AND NOT excludeService(order)
        BY contractSku(order);                                                   
sumService (contract, DATE dateFrom, DATE dateTo)= GROUP SUM sumOrderDetail(Order order) 
    IF shipmentDate(order) >= dateFrom AND shipmentDate(order) <= dateTo AND isPosted(order) AND isSent(order) AND NOT excludeService(order)
        BY contractSku(order);      
percentSumExecutionService '% исп. заявки (сумма)' (ContractSku c, DATE dateFrom, DATE dateTo) = sumShippedService(c, dateFrom, dateTo)*100.00 /
    (sumService(c, dateFrom, dateTo) IF sumService(c, dateFrom, dateTo)!=0);   

percFine '% штрафа' = DATA NUMERIC[18,5](ContractSku) IN payment;

EXTEND FORM userContractSku
    PROPERTIES (c) percFine
;
EXTEND FORM contracts
    PROPERTIES (c) READONLY GRID percFine
;

useExclude 'Есть категории-исключения' = DATA BOOLEAN (ServiceStatusDetail);
sum 'Сумма недопоставки' = DATA NUMERIC[18,5](ServiceStatusDetail);
percFine '% штрафа' = DATA NUMERIC[18,5](ServiceStatusDetail);
sumFine 'Сумма штрафа' (ServiceStatusDetail d) = round2(sum(d)*percFine(d)/100.0) IF serviceStatus(d)==ServiceStatus.fine AND NOT useExclude(d);
isPay 'Оплачен' = DATA BOOLEAN (ServiceStatusDetail);
sumPay 'Сумма (оплачено)' = DATA NUMERIC[18,4] (ServiceStatusDetail);
datePay 'Дата (оплачено)' = DATA DATE (ServiceStatusDetail);

sumFine 'Сумма штрафа' (ContractSku c) = sumFine(lastServiceStatusDetail(c));
isPay 'Оплачен' (ContractSku c) = isPay(lastServiceStatusDetail(c));
sumPay 'Сумма (оплачено)' (ContractSku c) = sumPay(lastServiceStatusDetail(c));
datePay 'Дата (оплачено)' (ContractSku c) = datePay(lastServiceStatusDetail(c));

countExcludeService (ContractSku c, DATE dateFrom, DATE dateTo)= GROUP SUM excludeGroupService(Order order) 
    IF shipmentDate(order) >= dateFrom AND shipmentDate(order) <= dateTo AND isPosted(order) AND isSent(order) 
        BY contractSku(order); 



@defineNumbered(ServiceStatusDetail, BPSTRING[2]);

@defineNumeratedDefault(ServiceStatusDetail, 'Качество сервиса', 'КС', Service);

overCreateServiceStatusDetailContract  ABSTRACT LIST ( );
createServiceStatusDetail 'Заполнить статусы качества' (DATE dFrom, DATE dTo)  { 

    isChange(ContractSku c) <- NULL;
    
    LOCAL NESTED prev = ServiceStatus(ContractSku);
    LOCAL  NESTED in = BOOLEAN (ContractSku);
    prev(ContractSku c) <- NULL;
    in(ContractSku c) <- NULL;
    
    in(ContractSku c) <- TRUE WHERE isSupplier(supplier(c)) AND isCompany(customer(c)) AND NOT isCompany(supplier(c)) AND dateFrom(c) <= dTo AND NOT dateTo(c) <dFrom AND NOT notCalcServiceStatus(supplier(c));
    prev(ContractSku c) <- serviceStatus(lastServiceStatusDetail(c))  WHERE in(c);
                           
     
    FOR in(ContractSku c) DO NEWSESSION NESTED (prev[ContractSku], in[ContractSku]) {
        NEW d = ServiceStatusDetail {
            
            contractSku(d) <- c;
            legalEntity(d) <- supplier(c);
            fromDate(d) <- dFrom;
            toDate(d) <- dTo;
            useExclude(d) <- TRUE IF countExcludeService(c,dFrom,dTo);
            sum(d) <- (sumService(c,dFrom,dTo) (-) sumShippedService(c,dFrom,dTo)) WHERE (sumService(c,dFrom,dTo) (-) sumShippedService(c,dFrom,dTo))>0.0;
            percFine(d) <- percFine(c);
            percService(d) <- NUMERIC[16,2](OVERRIDE percentSumExecutionService(c,dFrom,dTo), 0.0 IF sumService(c,dFrom,dTo));

            IF percService(d) AND dataPercService(c) THEN {
                IF percService(d) >= dataPercService(c) THEN {                    
                    serviceStatus(d) <- CASE 
                            WHEN prev(c) ==ServiceStatus.fine AND NOT isPay(lastServiceStatusDetail(c)) AND NOT useExclude(d) THEN ServiceStatus.stopping                                     
                            ELSE ServiceStatus.good;
                    
                } ELSE {
                    serviceStatus(d) <- CASE 
                            WHEN prev(c) ==ServiceStatus.fine AND NOT useExclude(d) THEN ServiceStatus.stopping
                            WHEN prev(c) == ServiceStatus.warning AND NOT useExclude(d) THEN ServiceStatus.fine
                            ELSE ServiceStatus.warning
                            ;  
                }                 
            }
            isChange(c) <- TRUE WHERE (prev(c) OR serviceStatus(d)) AND NOT (prev(c) == serviceStatus(d));       
            generateSeriesNumber(d);      
        }
        APPLY;
    }         
    
    overCreateServiceStatusDetailContract();	
}
//планировщик
createServiceStatusDetail()  { 
    createServiceStatusDetail(firstDayOfMonth(sumMonth (currentDate(), -1)), lastDayOfMonth(sumMonth (currentDate(), -1)));
};

changeServiceStatusContract (ContractSku c)  { 
    NEWSESSION {
        IF NOT notCalcServiceStatus(supplier(c)) THEN {
            DIALOG serviceStatus OBJECTS t INPUT DO {
                isChange(c) <- NULL;
                
                LOCAL prev = ServiceStatus(ContractSku);
                prev(c) <- IF serviceStatus(lastServiceStatusDetail(c)) THEN serviceStatus(lastServiceStatusDetail(c)) ELSE serviceStatus(lastServiceStatusDetail(supplier(c)));                
                
                NEW  d = ServiceStatusDetail {
                    contractSku(d) <- c;
                    legalEntity(d) <- supplier(c);
                    fromDate(d) <- currentDate();
                    toDate(d) <- currentDate();   
                    serviceStatus(d) <- t;
                    isChange(d) <- TRUE;
                    isChange(c) <- TRUE WHERE (prev(c) OR serviceStatus(d)) AND NOT (prev(c) == serviceStatus(d));
                }            
                apply();
                overCreateServiceStatusDetailContract();
            }   
        } ELSE {
            MESSAGE 'Для данного поставщика не заполняется статус качества';
        }
    }    
}


EXTEND FORM legalEntity
    
    OBJECTS cs = ContractSku
    PROPERTIES (cs) SHOWIF isSupplier(l) READONLY number, series, dateFrom, dateTo,
                dataPercService CHANGEABLE , nameServiceStatus ON CHANGE changeServiceStatusContract(cs) BACKGROUND backgroundServiceStatus(cs) CHANGEABLE, 
                percService, sumFine
    PROPERTIES (cs) SHOWIF (isSupplier(l) AND sumFine(cs)) READONLY isPay, sumPay, datePay
                 
    FILTERS supplier(cs) == l
    OBJECTS sdc = ServiceStatusDetail
    PROPERTIES (sdc) SHOWIF isSupplier(l) READONLY series, number      
    PROPERTIES (sdc) SHOWIF isSupplier(l) READONLY fromDate, toDate, percService, sum, percFine, sumFine, isPay, sumPay, datePay, useExclude, nameServiceStatus
    PROPERTIES (sdc) SHOWIF isSupplier(l) READONLY createdTime, createdNameUser, createdHostnameComputer         
    ORDERS fromDate(sdc) DESC
    FILTERS legalEntity(sdc) == l,
            contractSku(sdc) == cs
        
;
DESIGN legalEntity {
    status {
        fill = 1;
        caption = 'Статус качества сервиса';
        tabbed = TRUE;
        NEW statusC {
            fill = 1;
            horizontal = FALSE;
            caption = 'По договору';
        
            MOVE BOX(cs);
            MOVE BOX(sdc) { fill = 2;}                
        } 
        NEW statusL {
            fill = 1;
            type = CONTAINERV;
            caption = 'По организации';
        
            MOVE status1;
            MOVE BOX(sd);                
        }
    }    
}

EXTEND FORM userContractSku
    PROPERTIES (c) READONLY 
                dataPercService CHANGEABLE , nameServiceStatus ON CHANGE changeServiceStatusContract(c) BACKGROUND backgroundServiceStatus(c) CHANGEABLE, 
                percService, sumFine 
    PROPERTIES (c) SHOWIF (sumFine(c)) READONLY isPay
    
    OBJECTS sdc = ServiceStatusDetail
    
    PROPERTIES (sdc) READONLY series, number, fromDate, toDate, percService, sum, percFine, sumFine, isPay, sumPay, datePay, useExclude, nameServiceStatus
    PROPERTIES (sdc) READONLY createdTime, createdNameUser, createdHostnameComputer 
    
    ORDERS fromDate(sdc) DESC
    FILTERS legalEntity(sdc) == supplier(c),
            contractSku(sdc) == c
;
DESIGN userContractSku{
    tabContainer {
        NEW status {
            fill = 1;
            type = CONTAINERV ;
            caption = 'Статус качества сервиса';
            NEW status1 {
                horizontal = TRUE;                 
                MOVE PROPERTY (nameServiceStatus(c));
                MOVE PROPERTY (percService(c));
                MOVE PROPERTY (dataPercService(c));
                MOVE PROPERTY (sumFine(c));
                MOVE PROPERTY (isPay(c));                
            }            
            MOVE BOX(sdc);
        }
    }  
}