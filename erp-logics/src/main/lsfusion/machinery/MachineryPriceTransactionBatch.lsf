MODULE MachineryPriceTransactionBatch;

REQUIRE MachineryPriceTransactionBalance, Item;

NAMESPACE Machinery;

overBalance = ABSTRACT NUMERIC[16,5](Batch, Barcode, Stock);
useOverOverBalance = ABSTRACT BOOLEAN ();

TABLE machineryPriceTransactionBarcodeBatch (MachineryPriceTransaction, Barcode, Batch);

in 'Вкл' = DATA BOOLEAN (MachineryPriceTransaction, Barcode, Batch);
in 'Вкл' (MachineryPriceTransaction t, Sku s, Batch bt) = GROUP MAX in(t, Barcode b, bt) BY sku(b);

balance 'Баланс' (Batch bt, Barcode b, Stock st) = IF useOverOverBalance() THEN overBalance(bt, b, st) ELSE (currentBalance(bt, st) IF sku(bt)==sku(b));
price 'Цена' (Batch bt, Barcode b, GroupMachinery g) = priceA(priceListType(g),bt,stock(g),currentDateTime()) IF sku(bt)==sku(b);

countDaysSendBatches 'Кол-во дней движения по партии для загрузки в оборудование' = DATA INTEGER ();

EXTEND FORM options
    PROPERTIES countDaysSendBatches()
;

DESIGN options {
    machinery {
        MOVE PROPERTY(countDaysSendBatches());
    }
}

createAttribute(MachineryPriceTransaction t) + {
    in(t, Barcode barcode, Batch batch) <- TRUE 
        WHERE in(t, barcode) AND price(batch, barcode, groupMachinery(t)) AND 
              (balance(batch, barcode, stock(t)) OR countLedger(batch, stock(t), subtract(currentDate(),(OVERRIDE countDaysSendBatches(),7)), currentDate()));            
}

name 'Наименование' = DATA STRING[255] (MachineryPriceTransaction, Barcode, Batch);
name(MachineryPriceTransaction t, Barcode barcode, Batch batch)  => in(t, barcode, batch) RESOLVE RIGHT;

price 'Цена' = DATA NUMERIC[16,4] (MachineryPriceTransaction, Barcode, Batch);
price(MachineryPriceTransaction t, Barcode barcode, Batch batch)  => in(t, barcode, batch) RESOLVE RIGHT;

// INDEX groupInMachineryPriceTransactionBarcode + barcode + Batch
//groupIn = groupMachinery(MachineryPriceTransaction transaction) IF in(transaction, Barcode barcode, Batch bt) 
//    AND NOT skipLastTransaction(groupMachinery(transaction)) MATERIALIZED;
//
//dateTimeIn = dateTime(MachineryPriceTransaction transaction) IF in(transaction, Barcode barcode, Batch bt) 
//    AND NOT skipLastTransaction(groupMachinery(transaction)) MATERIALIZED;
    
//INDEX groupIn(MachineryPriceTransaction t, Barcode b, Batch bt), b, dateTimeIn(t,b,bt), t, bt;
    
//lastTransaction (Batch bt, Barcode barcode, groupMachinery) = 
//    GROUP LAST MachineryPriceTransaction transaction
//          ORDER dateTimeIn(transaction, barcode, bt), transaction
//          WHERE NOT canceled(transaction) 
//          BY groupIn(transaction, barcode, bt) MATERIALIZED;
//prevLastTransaction (Batch bt, Barcode b, GroupMachinery g) = lastTransaction(bt, b, g);

//lastTransaction (sku, stock) =
//    GROUP LAST lastTransaction(Barcode b, GroupMachinery g)
//          ORDER dateTimeIn(lastTransaction(b, g), b), lastTransaction(b, g)
//          WHERE lastTransaction(b, g) 
//          BY sku(b), stock(g);
          
lastFullTransaction (Batch bt, Barcode barcode, groupMachinery) = 
    GROUP LAST MachineryPriceTransaction transaction
          ORDER dateTime(transaction), transaction
          WHERE in(transaction, barcode, bt) AND NOT canceled(transaction) 
          BY groupMachinery(transaction);
          
prevLastFullTransaction (Batch bt, Barcode barcode, GroupMachinery groupMachinery) = PREV(lastFullTransaction (bt, barcode, groupMachinery));

//Остаток

balance 'Остаток' = DATA NUMERIC[16,5] (MachineryPriceTransaction, Barcode, Batch);
balance(MachineryPriceTransaction t, Barcode barcode, Batch bt) => in(t, barcode, bt) RESOLVE RIGHT;
prevTransactionBalance 'Остаток (тек.)' (Batch bt, Barcode barcode, GroupMachinery groupMachinery)  =
    balance(prevLastFullTransaction(bt, barcode, groupMachinery), barcode, bt);

snapshotAttribute(MachineryPriceTransaction t, GroupMachinery groupMachinery) +
    {  balance(t, Barcode barcode, Batch bt) <- prevTransactionBalance(bt, barcode, groupMachinery) WHERE in(t, barcode, bt); }
    
balanceBlister 'Остаток(блистеры)' = ABSTRACT NUMERIC[10,0] (MachineryPriceTransaction, Barcode, Batch);    

EXTEND FORM machineryPriceTransaction
    OBJECTS batch=Batch
    PROPERTIES(batch) READONLY id, idBarcodeSku, nameSku, name
    PROPERTIES(t, b, batch) in, name, price
    FILTERS in(t, b, batch)
;

DESIGN machineryPriceTransaction{
    barcodes{
        horizontal = FALSE;    
        MOVE BOX(batch);
    }
}

EXTEND FORM machineryPriceTransactions
    OBJECTS batch=Batch
    PROPERTIES(batch) READONLY id, idBarcodeSku, nameSku, name
    PROPERTIES(t, b, batch) READONLY in, name, price
    FILTERS in(t, b, batch)
    
    OBJECTS bbatch=Batch
    PROPERTIES(bbatch) READONLY id, idBarcodeSku, nameSku, name
    PROPERTIES(mt, bb, bbatch) READONLY in, name, price
    FILTERS in(mt, bb, bbatch)    
;

DESIGN machineryPriceTransactions{
    barcodes{
        horizontal = FALSE;
        MOVE BOX(batch);
    }
    barcodeContainer{
        MOVE BOX(bbatch) AFTER BOX(bb);
    }
}

EXTEND FORM machineryPriceTransaction PROPERTIES(t, b, batch) balance,  balanceBlister;
EXTEND FORM machineryPriceTransactions PROPERTIES(t, b, batch) READONLY balance, balanceBlister;
EXTEND FORM machineryPriceTransactions PROPERTIES(mt, bb, bbatch) READONLY balance, balanceBlister;

// -------------------- Создание новых атрибутов ----------------- //

META defineMachineryPriceTransactionAttributeBaseBatch(object, caption, nameProp)
    prevTransaction###object caption###' (тек.)' (Batch batch, Barcode barcode, GroupMachinery groupMachinery)  =
        object(prevLastFullTransaction(batch, barcode, groupMachinery), barcode, batch);

    snapshotAttribute(MachineryPriceTransaction t, GroupMachinery groupMachinery) +
        {  object(t, Barcode barcode, Batch batch) <- prevTransaction###object(batch, barcode, groupMachinery) WHERE in(t, barcode, batch); }

    EXTEND FORM machineryPriceTransaction PROPERTIES(t, b, batch) nameProp###object;
    EXTEND FORM machineryPriceTransactions PROPERTIES(t, b, batch) READONLY nameProp###object;
    EXTEND FORM machineryPriceTransactions PROPERTIES(mt, bb, bbatch) READONLY  nameProp###object;
END

META defineMachineryPriceTransactionAttributeActionBatch(object, caption, type, nameProp)
    @defineMachineryPriceTransactionAttributeBaseBatch(object, caption, nameProp);
    over###object = ABSTRACT type (MachineryPriceTransaction, Barcode, Batch);
    createAttribute(MachineryPriceTransaction t) + {  object(t, Barcode barcode, Batch batch) <- OVERRIDE over###object(t, barcode, batch), object(batch)
                                                          WHERE in(t, barcode, batch); }
END

META defineMachineryPriceTransactionAttributeBatch(object, caption, type)
    object caption = DATA type (MachineryPriceTransaction, Barcode, Batch);
    object(MachineryPriceTransaction t, Barcode barcode, Batch batch) => in(t, barcode, batch) RESOLVE RIGHT;
    @defineMachineryPriceTransactionAttributeActionBatch(object, caption, type, );
END

META defineMachineryPriceTransactionAttributeBatch(object, caption, type, nameProp)
    object = DATA type (MachineryPriceTransaction, Barcode, Batch);
    object(MachineryPriceTransaction t, Barcode barcode, Batch batch) => in(t, barcode, batch) RESOLVE RIGHT;
    nameProp##type caption (MachineryPriceTransaction transaction, Barcode barcode, Batch batch) =
        nameProp(object(transaction, barcode, batch));
    @defineMachineryPriceTransactionAttributeActionBatch(object, caption, type, nameProp);
END

META defineMachineryPriceTransactionAttributeStockActionBatch(type, object, caption, nameProp)
    @defineMachineryPriceTransactionAttributeBaseBatch(object, caption, nameProp);
    over###object = ABSTRACT type (MachineryPriceTransaction, Barcode, Batch);
    createAttribute(MachineryPriceTransaction t, Stock stock) + {  object(t, Barcode barcode, Batch batch) <- OVERRIDE over###object(t, barcode, batch), object(batch, stock)
                                                                      WHERE in(t, barcode, batch); }
END
META defineMachineryPriceTransactionAttributeStockBatch(object, caption, type)
    object caption = DATA type (MachineryPriceTransaction, Barcode, Batch);
    object(MachineryPriceTransaction t, Barcode barcode, Batch batch) => in(t, barcode, batch) RESOLVE RIGHT;
    @defineMachineryPriceTransactionAttributeStockActionBatch(type, object, caption, );
END

createAttribute(MachineryPriceTransaction t) + {
    price(t, Barcode barcode, Batch bt) <- price(bt, barcode, groupMachinery(t)) WHERE in(t, barcode, bt);              
}

createAttribute(MachineryPriceTransaction t, Stock stock) + {  
    IF NOT balanceToDate() THEN {
        balance(t, Barcode barcode, Batch bt) <- OVERRIDE balance(bt, barcode, stock), 0.0 WHERE in(t, barcode, bt) AND NOT extraLoad(sku(barcode)) AND NOT extraLoad(stock); 
    } ELSE {
        balance(t, Barcode barcode, Batch bt) <- OVERRIDE prevBalanceB(bt, stock, dateTime(t)), 0.0 WHERE in(t, barcode, bt) AND NOT extraLoad(sku(barcode)) AND NOT extraLoad(stock);  
    }
    
}

balanceDate 'Дата остатка' = DATA DATETIME (MachineryPriceTransaction, Barcode, Batch);
balanceDate(MachineryPriceTransaction t, Barcode barcode, Batch bt) => in(t, barcode, bt) RESOLVE RIGHT;
@defineMachineryPriceTransactionAttributeBaseBatch(balanceDate, 'Дата остатка', );

createAttribute(MachineryPriceTransaction t, Stock s) + {  
    balanceDate(t, Barcode b, Batch bt) <- OVERRIDE balanceDate(s), currentDateTime() WHERE in(t, b, bt) AND NOT extraLoad(sku(b));
}

@defineMachineryPriceTransactionAttributeBatch(idSku, 'Код товара', STRING[100]);

@defineMachineryPriceTransactionAttributeBatch(id, 'Код партии', STRING[100]);

@defineMachineryPriceTransactionAttributeBatch(date, 'Дата партии', DATE);

@defineMachineryPriceTransactionAttributeBatch(idBarcodeSku, 'Штрихкод', STRING[15]);

@defineMachineryPriceTransactionAttributeBatch(expiryDate, 'Срок годности (дата)', DATE);

@defineMachineryPriceTransactionAttributeBatch(manufactureDate, 'Дата изготовления', DATE);

@defineMachineryPriceTransactionAttributeBatch(nameManufacturer, 'Производитель', STRING[200]);

@defineMachineryPriceTransactionAttributeBatch(nameCountry, 'Страна', STRING[250]);

@defineMachineryPriceTransactionAttributeBatch(sidCountry, 'Код страны', STRING[250]);

retailPrice 'Цена до' = ABSTRACT NUMERIC[16,4] (Batch, Stock);
retailPrice 'Цена до' = DATA NUMERIC[16,4] (MachineryPriceTransaction, Barcode, Batch);
retailPrice(MachineryPriceTransaction t, Barcode barcode, Batch batch) => in(t, barcode, batch) RESOLVE RIGHT;
@defineMachineryPriceTransactionAttributeStockActionBatch(NUMERIC[16,4], retailPrice, 'Цена до', );

//Фарм

//Серия лекарственного средства
seriesPharmacy 'Серия лекарственного средства' = DATA STRING[20] (MachineryPriceTransaction, Barcode, Batch);
seriesPharmacy(MachineryPriceTransaction t, Barcode barcode, Batch batch) => in(t, barcode, batch) RESOLVE RIGHT;
prevTransactionSeriesPharmacy 'Серия лекарственного средства (тек.)' (Batch batch, Barcode barcode, GroupMachinery groupMachinery)  =
    seriesPharmacy(prevLastFullTransaction(batch, barcode, groupMachinery), barcode, batch);

snapshotAttribute(MachineryPriceTransaction t, GroupMachinery groupMachinery) +
    {  seriesPharmacy(t, Barcode barcode, Batch batch) <- prevTransactionSeriesPharmacy(batch, barcode, groupMachinery) WHERE in(t, barcode, batch); }

EXTEND FORM machineryPriceTransaction PROPERTIES(t, b, batch) seriesPharmacy;
EXTEND FORM machineryPriceTransactions PROPERTIES(t, b, batch) READONLY seriesPharmacy;
EXTEND FORM machineryPriceTransactions PROPERTIES(mt, bb, bbatch) READONLY  seriesPharmacy;
overSeriesPharmacy = ABSTRACT STRING[20] (MachineryPriceTransaction, Barcode, Batch);
createAttribute(MachineryPriceTransaction t) + {seriesPharmacy(t, Barcode barcode, Batch batch) <- overSeriesPharmacy(t, barcode, batch) WHERE in(t, barcode, batch);}

//МНН
nameATCGroup 'МНН' = DATA ISTRING[250] (MachineryPriceTransaction, Barcode, Batch);
nameATCGroup(MachineryPriceTransaction t, Barcode barcode, Batch batch) => in(t, barcode, batch) RESOLVE RIGHT;
prevTransactionNameATCGroup 'МНН (тек.)' (Batch batch, Barcode barcode, GroupMachinery groupMachinery)  =
    nameATCGroup(prevLastFullTransaction(batch, barcode, groupMachinery), barcode, batch);

snapshotAttribute(MachineryPriceTransaction t, GroupMachinery groupMachinery) +
    {  nameATCGroup(t, Barcode barcode, Batch batch) <- prevTransactionNameATCGroup(batch, barcode, groupMachinery) WHERE in(t, barcode, batch); }

EXTEND FORM machineryPriceTransaction PROPERTIES(t, b, batch) nameATCGroup;
EXTEND FORM machineryPriceTransactions PROPERTIES(t, b, batch) READONLY nameATCGroup;
EXTEND FORM machineryPriceTransactions PROPERTIES(mt, bb, bbatch) READONLY  nameATCGroup;
overNameATCGroup = ABSTRACT ISTRING[250] (MachineryPriceTransaction, Barcode, Batch);
createAttribute(MachineryPriceTransaction t) + {nameATCGroup(t, Barcode barcode, Batch batch) <- overNameATCGroup(t, barcode, batch) WHERE in(t, barcode, batch);}

//Блистеры
blisterAmount 'Кол-во блистеров (в ед.)' = DATA INTEGER (MachineryPriceTransaction, Barcode, Batch);
blisterAmount(MachineryPriceTransaction t, Barcode barcode, Batch batch) => in(t, barcode, batch) RESOLVE RIGHT;
prevBlisterAmount 'Кол-во блистеров (в ед.) (тек.)' (Batch batch, Barcode barcode, GroupMachinery groupMachinery)  =
    blisterAmount(prevLastFullTransaction(batch, barcode, groupMachinery), barcode, batch);

snapshotAttribute(MachineryPriceTransaction t, GroupMachinery groupMachinery) +
    {  blisterAmount(t, Barcode barcode, Batch batch) <- prevBlisterAmount(batch, barcode, groupMachinery) WHERE in(t, barcode, batch); }

EXTEND FORM machineryPriceTransaction PROPERTIES(t, b, batch) blisterAmount;
EXTEND FORM machineryPriceTransactions PROPERTIES(t, b, batch) READONLY blisterAmount;
EXTEND FORM machineryPriceTransactions PROPERTIES(mt, bb, bbatch) READONLY  blisterAmount;
overBlisterAmount = ABSTRACT INTEGER (MachineryPriceTransaction, Barcode, Batch);
createAttribute(MachineryPriceTransaction t) + {blisterAmount(t, Barcode barcode, Batch batch) <- overBlisterAmount(t, barcode, batch) WHERE in(t, barcode, batch);}

//Флаги
flag 'Флаги' = DATA INTEGER (MachineryPriceTransaction, Barcode, Batch);
flag(MachineryPriceTransaction t, Barcode barcode, Batch batch) => in(t, barcode, batch) RESOLVE RIGHT;
prevTransactionFlag 'Флаги (тек.)' (Batch batch, Barcode barcode, GroupMachinery groupMachinery)  =
    flag(prevLastFullTransaction(batch, barcode, groupMachinery), barcode, batch);

snapshotAttribute(MachineryPriceTransaction t, GroupMachinery groupMachinery) +
    {  flag(t, Barcode barcode, Batch batch) <- prevTransactionFlag(batch, barcode, groupMachinery) WHERE in(t, barcode, batch); }

EXTEND FORM machineryPriceTransaction PROPERTIES(t, b, batch) flag;
EXTEND FORM machineryPriceTransactions PROPERTIES(t, b, batch) READONLY flag;
EXTEND FORM machineryPriceTransactions PROPERTIES(mt, bb, bbatch) READONLY  flag;
overFlag = ABSTRACT INTEGER (MachineryPriceTransaction, Barcode, Batch);
createAttribute(MachineryPriceTransaction t) + {flag(t, Barcode barcode, Batch batch) <- overFlag(t, barcode, batch) WHERE in(t, barcode, batch);}

info 'Дополнительное поле' = DATA TEXT (MachineryPriceTransaction, Barcode, Batch);

overClearMachineryPriceTransaction() + {
    in(MachineryPriceTransaction t, Barcode b, Batch bt) <- NULL WHERE in(t,b,bt) AND NOT in(t,b) AND date(t) <= subtract(currentDate(), countDaysClearMachineryPriceTransaction());
    apply();
}	    

//Рейтинг 
saleRating 'Рейтинг' = DATA INTEGER (MachineryPriceTransaction, Barcode, Batch);
saleRating(MachineryPriceTransaction t, Barcode barcode, Batch batch) => in(t, barcode, batch) RESOLVE RIGHT;
prevTransactionSaleRating 'Рейтинг (тек.)' (Batch batch, Barcode barcode, GroupMachinery groupMachinery)  =
    saleRating(prevLastFullTransaction(batch, barcode, groupMachinery), barcode, batch);

snapshotAttribute(MachineryPriceTransaction t, GroupMachinery groupMachinery) +
    {  saleRating(t, Barcode barcode, Batch batch) <- prevTransactionSaleRating(batch, barcode, groupMachinery) WHERE in(t, barcode, batch); }    

EXTEND FORM machineryPriceTransaction PROPERTIES(t, b, batch) saleRating;
EXTEND FORM machineryPriceTransactions PROPERTIES(t, b, batch) READONLY saleRating;
EXTEND FORM machineryPriceTransactions PROPERTIES(mt, bb, bbatch) READONLY  saleRating;
overSaleRating = ABSTRACT INTEGER (MachineryPriceTransaction, Barcode, Batch);
createAttribute(MachineryPriceTransaction t) + {saleRating(t, Barcode barcode, Batch batch) <- overSaleRating(t, barcode, batch) WHERE in(t, barcode, batch);}

//Бонус при продаже
saleBonus 'Бонус при продажи' = DATA INTEGER (MachineryPriceTransaction, Barcode, Batch);
saleRating(MachineryPriceTransaction t, Barcode barcode, Batch batch) => in(t, barcode, batch) RESOLVE RIGHT;
prevTransactionSaleBonus 'Бонус при продажи (тек.)' (Batch batch, Barcode barcode, GroupMachinery groupMachinery)  =
    saleBonus(prevLastFullTransaction(batch, barcode, groupMachinery), barcode, batch);

snapshotAttribute(MachineryPriceTransaction t, GroupMachinery groupMachinery) +
    {  saleBonus(t, Barcode barcode, Batch batch) <- prevTransactionSaleBonus(batch, barcode, groupMachinery) WHERE in(t, barcode, batch); }

EXTEND FORM machineryPriceTransaction PROPERTIES(t, b, batch) saleBonus;
EXTEND FORM machineryPriceTransactions PROPERTIES(t, b, batch) READONLY saleBonus;
EXTEND FORM machineryPriceTransactions PROPERTIES(mt, bb, bbatch) READONLY  saleBonus;
overSaleBonus = ABSTRACT INTEGER (MachineryPriceTransaction, Barcode, Batch);
createAttribute(MachineryPriceTransaction t) + {saleBonus(t, Barcode barcode, Batch batch) <- overSaleBonus(t, barcode, batch) WHERE in(t, barcode, batch);}

//Ряд
row 'Ряд' = DATA INTEGER (MachineryPriceTransaction, Barcode, Batch);
row(MachineryPriceTransaction t, Barcode barcode, Batch batch) => in(t, barcode, batch) RESOLVE RIGHT;
prevTransactionRow 'Ряд (тек.)' (Batch batch, Barcode barcode, GroupMachinery groupMachinery)  =
    row(prevLastFullTransaction(batch, barcode, groupMachinery), barcode, batch);

snapshotAttribute(MachineryPriceTransaction t, GroupMachinery groupMachinery) +
    {  row(t, Barcode barcode, Batch batch) <- prevTransactionRow(batch, barcode, groupMachinery) WHERE in(t, barcode, batch); }

EXTEND FORM machineryPriceTransaction PROPERTIES(t, b, batch) row;
EXTEND FORM machineryPriceTransactions PROPERTIES(t, b, batch) READONLY row;
EXTEND FORM machineryPriceTransactions PROPERTIES(mt, bb, bbatch) READONLY  row;
overRow = ABSTRACT INTEGER (MachineryPriceTransaction, Barcode, Batch);
createAttribute(MachineryPriceTransaction t) + {row(t, Barcode barcode, Batch batch) <- overRow(t, barcode, batch) WHERE in(t, barcode, batch);}

//Полка
shelf 'Полка' = DATA INTEGER (MachineryPriceTransaction, Barcode, Batch);
shelf(MachineryPriceTransaction t, Barcode barcode, Batch batch) => in(t, barcode, batch) RESOLVE RIGHT;
prevTransactionShelf 'Полка (тек.)' (Batch batch, Barcode barcode, GroupMachinery groupMachinery)  =
    shelf(prevLastFullTransaction(batch, barcode, groupMachinery), barcode, batch);

snapshotAttribute(MachineryPriceTransaction t, GroupMachinery groupMachinery) +
    {  shelf(t, Barcode barcode, Batch batch) <- prevTransactionShelf(batch, barcode, groupMachinery) WHERE in(t, barcode, batch); }

EXTEND FORM machineryPriceTransaction PROPERTIES(t, b, batch) shelf;
EXTEND FORM machineryPriceTransactions PROPERTIES(t, b, batch) READONLY shelf;
EXTEND FORM machineryPriceTransactions PROPERTIES(mt, bb, bbatch) READONLY  shelf;
overShelf = ABSTRACT INTEGER (MachineryPriceTransaction, Barcode, Batch);
createAttribute(MachineryPriceTransaction t) + {shelf(t, Barcode barcode, Batch batch) <- overShelf(t, barcode, batch) WHERE in(t, barcode, batch);}

artixParams (MachineryPriceTransaction t, Barcode barcode, Batch batch) = '\{"artix": \{' +
    (CONCAT ', ',
        '"rating":"' + overSaleRating(t,barcode,batch) + '"',
        '"bonusonsale":"' + overSaleBonus(t,barcode,batch) + '"',
        '"row":"' + overRow(t,barcode,batch) + '"',
        '"shelf":"' + overShelf(t,barcode,batch) + '"'                
    ) + '\}\}'
;

createAttribute(MachineryPriceTransaction t) + {
    info(t, Barcode barcode, Batch batch) <- artixParams(t,barcode,batch) WHERE in(t, barcode, batch) AND sid(model(groupMachinery(t)))=='Artix';
}

idDosage 'Код (дозировка)' = ABSTRACT STRING[255] (MachineryPriceTransaction, Barcode, Batch);
descriptionDosage 'Описание (дозировка)' = ABSTRACT STRING[255] (MachineryPriceTransaction, Barcode, Batch);
