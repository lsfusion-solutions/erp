MODULE StopList;

REQUIRE System,
        Stock,
        StockTax,
        Machinery,
        Numerator,        
        Utils,
        MachineryPriceTransaction;

NAMESPACE StopList;

//----------------------------------- Запрет продаж по кассе -------------------------------------------------------

CLASS StopList 'Запрет продаж по кассе';
CLASS StopListDetail 'Строка запрета продаж по кассе';

@defineDocument(stopList);
createdTime 'Время создания' = createdTime(stopList(StopListDetail d)); 
createdUser = createdUser(stopList(StopListDetail d)); 
createdNameUser 'Создан пользователем' = name[Contact](createdUser(StopListDetail d)); 
createdComputer 'Создан на компьютере' = createdComputer(stopList(StopListDetail d)); 
createdHostnameComputer 'Создан на компьютере' = hostname(createdComputer(StopListDetail d)); 

@deriveDocumentHeaderTimePrefix(StopList, );

@defineDocumentTimePrefix (stopList, from, ' с');
@deriveDocumentHeaderTimePrefix(StopList, from);

@defineDocumentTimePrefix (stopList, to, ' по');

@defineDocumentHeaderNumber(StopList, BPSTRING[2]);
@defineDocumentDetailNumber(stopList, StopListDetail);

@defineNumeratedDefault(StopList, 'Запрет продаж по кассе', 'ЗП');

@defineDocumentHeaderLegalEntity(stopList, company, 'Компания');

exclude 'Исключить из запрета'  = DATA BOOLEAN (StopList) IN documentPrm;
exclude 'Исключить из запрета' (StopListDetail d) = exclude(stopList(d)) MATERIALIZED; 


TABLE stockStopList (Stock ,StopList);
TABLE stockStopListDetail (Stock ,StopListDetail);

in 'Вкл.' = DATA BOOLEAN (Stock ,StopList);
stocks 'Склады' (StopList stopList) = ISTRING[2000](GROUP
                                         CONCAT name(Stock stock) IF in(stock, stopList) , ', '
                                         ORDER stock)
                                         CHARWIDTH 30;
CONSTRAINT  in(Stock stock, StopList stopList) AND NOT isCompany(stock)
    MESSAGE 'Для Запрета продаж по кассе выбран склад, который не принадлежит компании';                                       

TABLE groupMachineryStopList (GroupMachinery, StopList);
in 'Вкл.' = DATA BOOLEAN (GroupMachinery, StopList);
overIn 'Вкл.' (GroupMachinery gm, StopList sl) = OVERRIDE in(gm,sl), in(stock(gm),sl) AND NOT (GROUP SUM 1 IF in(GroupMachinery m,sl) AND stock(m) == stock(gm));

@defineDocumentPosted(stopList);
@defineDocumentClosed(stopList);
@defineDocumentDescription (stopList, 'Запрет продаж по кассе');

@defineDocumentDetailSkuPrefix (stopList, sku, , '');

overIdSku(StopListDetail d) = overId(sku(d));

idSkuGroup (StopListDetail stopListDetail) = idSkuGroup(sku(stopListDetail));
nameSkuGroup (StopListDetail stopListDetail) = nameSkuGroup(sku(stopListDetail));
idUOM (StopListDetail stopListDetail) = id(UOM(sku(stopListDetail)));
innerIdUOM (StopListDetail stopListDetail) = INTEGER(UOM(sku(stopListDetail)));

splitSku (StopListDetail stopListDetail) = split(sku(stopListDetail));
passScalesSku (StopListDetail stopListDetail) = passScales(sku(stopListDetail));
flagsSku (StopListDetail stopListDetail) = flags(barcode(sku(stopListDetail)));
valueVATSku (StopListDetail stopListDetail) = valueVAT(sku(stopListDetail), country(sku(stopListDetail)), date(stopListDetail));

barcodes (StopListDetail d) = GROUP CONCAT STRING(value(Barcode b)) IF id(b) AND active(b) AND sku(b) == sku(d), ',' ORDER b;

info = ABSTRACT STRING (StopListDetail);

@defineExternalizable(stopListDetail, STRING[100]);
succeeded 'Загружен в оборудование' = DATA BOOLEAN (Stock, StopList);
notSucceeded 'Не загружен в оборудование' (Stock stock, StopList stopList) = stock IS Stock AND stopList IS StopList AND NOT succeeded(stock, stopList);   

countSucceededStocks (StopList list)  = GROUP SUM 1 IF in(Stock stock, list) AND succeeded(stock, list) MATERIALIZED;
countStocks (StopList list)  = GROUP SUM 1 IF in(Stock stock, list) MATERIALIZED;

succeeded = countSucceededStocks(StopList l) == countStocks(l);

toExport 'К загрузке' = countStocks(StopList l) AND NOT succeeded(l);  

statusSucceededStocks 'Статус загрузки' = CASE 
    WHEN succeeded(StopList l) AND isPosted(l) THEN 'Успешно загружен'
    WHEN countSucceededStocks(l) < countStocks(l)  AND isPosted(l) THEN 'Частично загружен'
    WHEN  l IS StopList THEN 'Не загружался' CHARWIDTH 10;
    
backgroundStatusSucceededStocks = CASE 
    WHEN succeeded(StopList l) AND isPosted(l)  THEN RGB(212,255,212)
    WHEN countSucceededStocks(l) < countStocks(l) AND isPosted(l) THEN RGB(255,238,165)    
    WHEN l IS StopList THEN RGB(255,255,255);

stopList (number) = GROUP AGGR StopList stopList BY number(stopList);

//--------------------Сообщения об ошибках при загрузке в кассы--------------------//
CLASS StopListError 'Ошибка';
TABLE stopListError (StopListError);

data 'Сообщение об ошибке' = DATA STRING[200] (StopListError) IN base;
date 'Время возникновения' = DATA DATETIME (StopListError) IN base;
toDate 'Дата возникновения' (StopListError e) = DATE(date(e));
errorTrace 'След исключения' = DATA TEXT (StopListError) IN base;
stopList 'Запрет продаж по кассе (ID)' = DATA StopList(StopListError) IN base;
quantityStopListError 'Количество ошибок' (StopList) = GROUP SUM 1 BY stopList (StopListError stopListError) IN base;

@defineLog (StopListError, 'ошибок загрузки стоп-листов', log, toDate);

//-- SKU
stopListDetail (sku, stopList) =  GROUP MAX StopListDetail stopListDetail
    BY sku(stopListDetail), stopList(stopListDetail);

count 'Вкл.' (Sku sku, StopList stopList) =  TRUE IF [GROUP SUM 1 
    BY sku(StopListDetail stopListDetail), stopList(stopListDetail)](sku, stopList);    

in (GroupMachinery groupMachinery, Sku sku, StopList stopList) =count(sku, stopList) AND in(groupMachinery, sku);
in (GroupMachinery groupMachinery, StopListDetail stopListDetail) =in(groupMachinery, sku(stopListDetail), stopList(stopListDetail));                                         
    
changeValue(Sku sku, StopList stopList)  { 
    INPUT b = BOOLEAN DO
        IF stopListDetail(sku, stopList) THEN {
            IF NOT b THEN {
                DELETE StopListDetail d WHERE d == stopListDetail(sku, stopList);
            } 
        } ELSE {
            IF b THEN {
                NEW d = StopListDetail {
                   stopList(d) <- stopList;
                   sku(d) <- sku;
                }
            }
        }
}


active(Stock stock, StopListDetail detail) = in(stock, stopList(detail)) AND isPosted(detail) MATERIALIZED;
sku(Stock stock, StopListDetail detail) = sku(detail) IF active(stock, detail) MATERIALIZED; 
include(Stock stock, StopListDetail detail) = active(stock, detail) AND NOT exclude(detail) MATERIALIZED;
fromDateTime(Stock stock, StopListDetail detail) = fromDateTime(detail) IF active(stock, detail) MATERIALIZED; 
toDateTime(Stock stock, StopListDetail detail) = toDateTime(detail) IF active(stock, detail) MATERIALIZED; 

INDEX sku(Stock stock, StopListDetail detail), stock, fromDateTime(stock, detail), detail;
   
inStopList (sku, Stock stock, DATETIME dateTime) =
    GROUP LAST include(stock, StopListDetail detail)
          ORDER fromDateTime(stock, detail) , detail 
          WHERE dateTime >= fromDateTime(stock, detail) 
                AND NOT dateTime >  toDateTime(stock, detail)
          BY   sku(stock, detail) COMPLEX;        

lastStopListDetail (sku, Stock stock, DATETIME dateTime) =
    GROUP LAST StopListDetail detail IF include(stock, detail)
          ORDER fromDateTime(stock, detail) , detail 
          WHERE dateTime >= fromDateTime(stock, detail) 
                AND NOT dateTime >  toDateTime(stock, detail)
          BY   sku(stock, detail) COMPLEX;        

skipMachineryPriceTransaction(Sku sku, Stock stock, DATETIME dateTime) += inStopList(sku, stock, dateTime); 

FORM stopList 'Запрет продаж по кассе'

    OBJECTS sl=StopList PANEL

    PROPERTIES(sl) isPosted, nameNumerator, number, series, date, time,
                   countStopListDetail, note,
                   fromDate, fromTime, toDate, toTime, exclude
                   
    TREE stockTree sg = StockGroup PARENT parent(sg)
    PROPERTIES READONLY name(sg)

    OBJECTS ts=Stock
    PROPERTIES    READONLY tsTreeName = name(ts)
    PROPERTIES(ts, sl)  in, succeeded 

    FILTERS isParent(sg, ts)
    ORDERS name(sg)
    
    OBJECTS gm = GroupMachinery
    PROPERTIES(gm) READONLY active, npp, name, objectClassName
    PROPERTIES(gm,sl) in
    FILTERS stock(gm) == ts
    ORDERS npp(gm)
    
    FILTERGROUP active FILTER 'Активные' active(gm) DEFAULT

    OBJECTS d = StopListDetail
    PROPERTIES(d)   index,
                    idBarcodeSku, nameSku, shortNameUOMSku

    PROPERTIES(d)   NEW, deletedd=DELETE GRID

    PROPERTIES(sl) DRAW d deleteStopListDetail

    FILTERS         stopList(d) == sl
    
    
    TREE skuTree sk = SkuGroup PARENT parent(sk)
    PROPERTIES READONLY order(sk), name(sk)
    ORDERS order(sk), name(sk)

    OBJECTS           ks=Sku 
    PROPERTIES        READONLY name(ks), idBarcode(ks), shortNameUOM(ks)
    PROPERTIES        addSku() DRAW ks, EDIT(ks) NEWSESSION, copy(ks), count(ks,sl) ON CHANGE changeValue(ks,sl)
    ORDERS          name(ks) 
    FILTERS           isParent(sk, ks),
                      name(ks)
      
    FILTERGROUP inDocument FILTER 'В док-те' count(ks,sl) 'F10'      

    EVENTS
        ON OK prePost(sl)

    EDIT StopList OBJECT sl
;

DESIGN stopList {
    BOX {
        size = (1024, 768);
        NEW headerBox {
            horizontal = TRUE;

            NEW headerRow1 {
                fill = 1;
                type = CONTAINERV;
                MOVE GROUP(documentHeader,sl) {
                    lines = 1;
                    horizontal = TRUE;
                    MOVE PROPERTY(isPosted(sl)) { charWidth = 10; }
                    MOVE PROPERTY(nameNumerator(sl));
                    MOVE PROPERTY(number(sl));
                    MOVE PROPERTY(series(sl));
                    MOVE PROPERTY(date(sl));
                    MOVE PROPERTY(time(sl));
                }
                NEW timeContainer {
                    caption = 'Период действия';
                    horizontal = TRUE;
                    MOVE PROPERTY (fromDate(sl));
                    MOVE PROPERTY (fromTime(sl));
                    MOVE PROPERTY (toDate(sl));
                    MOVE PROPERTY (toTime(sl));   
                }
                MOVE GROUP(documentPrm,sl);
            }

            MOVE GROUP(documentSum,sl) {
                lines = 1;
            }
        }
        NEW row {
            fill = 1;
            tabbed = TRUE;
            NEW selectStock {
                caption = 'Выбор складов';
                type = SPLITH;
                fill = 1;
                MOVE BOX(TREE stockTree) {caption = 'Группы складов';}
                NEW stocks {
                    fill = 2;
                    type = SPLITV;
                    MOVE BOX(ts) { fill = 3;}
                    MOVE BOX(gm) {fill = 1;}
                }          
            }
            NEW specificationBox {
                caption = 'Спецификация';
                fill = 1;
                tabbed = TRUE;
                MOVE BOX(d);
                NEW itemBox {
                    caption = 'Подбор';
                    type = SPLITH;
                    MOVE BOX(TREE skuTree) { caption = 'Группы SKU'; }
                    MOVE BOX(ks) { fill = 2;}
                }
            }
        }    
        MOVE TOOLBARBOX;
        PROPERTY(formOk()) {
            caption = 'Провести';
        }
    }
}

@addEventGenerateNumberOnForm(stopList, sl, stopList);

FORM stopLists 'Запреты продаж по оборудованию'

    OBJECTS sl=StopList
    PROPERTIES (sl) READONLY statusSucceededStocks BACKGROUND backgroundStatusSucceededStocks(sl)
    PROPERTIES (sl) READONLYIF isReadonly() isClosed, isPosted, exclude, number, series, date, time
    PROPERTIES(sl)  READONLY fromDate, fromTime, toDate, toTime, countStopListDetail
    PROPERTIES (sl) READONLYIF isReadonly() note
    PROPERTIES (sl) READONLY quantityStopListError, stocks

    PROPERTIES(sl)  READONLY PANEL createdNameUser, createdTime, createdHostnameComputer, 
                                          postedNameUser, postedTime, postedHostnameComputer

    PROPERTIES (sl) NEWSESSION NEW, EDIT SHOWIF isOpened(sl)
    PROPERTIES(sl)  close SHOWIF isOpened(sl), open SHOWIF isClosed(sl)     
    
    PROPERTIES (sl) NEWSESSION deleted=DELETE SHOWIF isOpened(sl)

    OBJECTS d=StopListDetail
    PROPERTIES(d)   READONLY index,
                    idBarcodeSku, nameSku, shortNameUOMSku
    FILTERS         stopList(d) == sl
    
    OBJECTS e=StopListError
    PROPERTIES(e)   READONLY data, date, errorTrace
    FILTERS         stopList(e) == sl
    
    OBJECTS st = Stock GRID
    PROPERTIES (st) READONLY name, id SHOWIF showIDs()
    PROPERTIES READONLY in(st,sl), succeeded(st,sl)
    FILTERS in(st,sl) 
;

DESIGN stopLists {
    BOX {
        size = (1024, 768);
        NEW documentContainer  {
            fill = 1;
            type = SPLITV;

            MOVE BOX(sl) {
                fill = 2;
            }
            NEW documentDetail {
                fill = 1;
                tabbed = TRUE;

                MOVE BOX(d) {
                    caption = 'Спецификация';
                }
                NEW documentHistory {
                    caption = 'История';

                    MOVE GROUP(created,sl);
                    MOVE GROUP(posted,sl);
                }
                NEW errors {
                    caption = 'Ошибки';                    
                    MOVE BOX(e);
                }
                MOVE BOX(st);
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                    }
                }
            }
        }
        MOVE TOOLBARBOX;
    }
}
@extendFormEditable(stopLists);
@defineFilterIsOpened (stopList, stopLists, sl);
NAVIGATOR {
    machineryExport {
        NEW stopLists;
    }
}

//--
statusStopList 'Запрет продаж' (Sku sku, Stock stock)= IF lastStopListDetail(sku, stock, currentDateTime())
    THEN 'В стоп-листе'
    ELSE 'Нет запрета' CHARWIDTH 10;
backgroundStopList 'Цвет' (Sku sku, Stock stock) = RGB (255,0,0) IF lastStopListDetail(sku, stock, currentDateTime());


notResetStopListSelectSku 'Не сбрасывать отмеченные товары при создании стоп-листа' = DATA BOOLEAN ();
EXTEND FORM options
    PROPERTIES() notResetStopListSelectSku
;
DESIGN options {
    stock1 {
        MOVE PROPERTY(notResetStopListSelectSku());
    }
}

skip 'Отм.' = ABSTRACT BOOLEAN (Sku, Stock);

createRequestStopList 'Включить в стоп-лист'()   { 

    IF (GROUP SUM 1 IF select(Sku sku, Stock stock)) THEN {
        NEWSESSION NESTED (select[Sku,Stock]) {
            NEW sl = StopList {
                in(Stock st, sl) <- TRUE WHERE (GROUP SUM 1 IF select(Sku sku, st));  
                FOR [ GROUP SUM 1 IF select(Sku sku, Stock stock) AND NOT skip(sku, stock) BY sku](Sku sku) NEW d = StopListDetail DO {
                    stopList(d) <- sl;
                    sku(d) <- sku;            
                } 
                 SHOW stopList OBJECTS sl = sl DOCKED;
            }
        }
        IF NOT notResetStopListSelectSku() THEN {
            select(Sku sku, Stock stock) <- NULL;
        }
    } ELSE {
        MESSAGE 'Не отмечены товары, по которым надо создать Стоп-лист.';
    }

} TOOLBAR;
excludeRequestStopList 'Исключить из стоп-листа'()   { 

    IF (GROUP SUM 1 IF select(Sku sku, Stock stock)) THEN {
        NEWSESSION NESTED (select[Sku,Stock]) {
            NEW sl = StopList {
                exclude(sl) <- TRUE;
                in(Stock st, sl) <- TRUE WHERE (GROUP SUM 1 IF select(Sku sku, st));  
                FOR [ GROUP SUM 1 IF select(Sku sku, Stock stock) BY sku](Sku sku) NEW d = StopListDetail DO {
                    stopList(d) <- sl;
                    sku(d) <- sku;            
                } 
                 SHOW stopList OBJECTS sl = sl DOCKED;
            }
        }
        IF NOT notResetStopListSelectSku() THEN {
            select(Sku sku, Stock stock) <- NULL;
        }
    } ELSE {
        MESSAGE 'Не отмечены товары, которые надо исключить из Стоп-листа.';
    }
} TOOLBAR;

EXTEND FORM currentBalanceSkuStock
    PROPERTIES READONLY statusStopList(s,st) BACKGROUND backgroundStopList(s,st) BEFORE currentBalance(s,st)
    PROPERTIES  DRAW sts createRequestStopList(), excludeRequestStopList()
;
DESIGN currentBalanceSkuStock {
    actionContainer {
        NEW stopListContainer {
            caption = 'Запрет продаж по кассе';
            type = CONTAINERV;
            MOVE PROPERTY (createRequestStopList());
            MOVE PROPERTY (excludeRequestStopList());
        } 
    }
}

countChangedSkus =  GROUP SUM 1 IF SETCHANGED (sku(StopListDetail d)) BY stopList(d);

WHEN FORMS stopList CHANGED(exclude(StopList l)) OR CHANGED(countChangedSkus(l)) AND isPosted(l) DO {
    succeeded(Stock st, l) <- NULL WHERE st IS Stock;    
}

FORM historyStopList 'История запрета продаж товара на кассе'
    OBJECTS st = Stock PANEL
    OBJECTS s = Sku PANEL 
    
    OBJECTS d = StopListDetail
    PROPERTIES(d) READONLY createdTime, createdNameUser, createdHostnameComputer, number, exclude
    FILTERS sku(d) == s,
            in(st, stopList(d))
;

DESIGN historyStopList {
    REMOVE BOX(st);
    REMOVE BOX(s);
}

showHistoryStopList 'Показать историю запрета продаж товара на кассе' (Sku sku, Stock stock)  
    { SHOW historyStopList OBJECTS s = sku, st = stock; }  ASON CONTEXTMENU statusStopList[Sku,Stock];

countDaysClearStopList 'За сколько дней хранить стоп-листы' = DATA INTEGER (); 

EXTEND FORM options PROPERTIES countDaysClearStopList();
DESIGN options { log { MOVE PROPERTY(countDaysClearStopList());} }    
        
lastStopListDetail (StopListDetail d) = GROUP SUM 1 IF in(Stock s, stopList(d)) AND d == lastStopListDetail(sku(d), s, currentDateTime());

clearApplicationLog () + { 
	NEWSESSION {
	    IF countDaysClearStopList() THEN {
            DELETE StopListDetail d WHERE d IS StopListDetail AND date(d) <= subtract(currentDate(), countDaysClearStopList()) AND NOT lastStopListDetail(d);
	        apply();
	        
	        DELETE StopList s WHERE s IS StopList AND NOT [ GROUP SUM 1 BY stopList(StopListDetail d)](s);
	        apply();
	    }
	}
}    