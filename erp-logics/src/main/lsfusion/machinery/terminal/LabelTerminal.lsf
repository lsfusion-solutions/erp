MODULE LabelTerminal;

REQUIRE Label, Terminal;

NAMESPACE Label;

addDetailDialogTerminalLabelTransactionDetail 'Импорт из ТСД' (LabelTransaction labelTransaction)  { 
    DIALOG terminalDocuments OBJECTS td INPUT DO {
        used(td) <- TRUE;
        FOR terminalDocument(TerminalDocumentDetail tdd) == td DO {
            NEW o = LabelTransactionDetail {
                labelTransaction(o) <- labelTransaction;
                sku(o) <- sku(tdd);
                name(o) <- name(sku(tdd));
                quantity(o) <- INTEGER(quantity(tdd));
                createAttribute(o);
            }
        }
    }
} TOOLBAR;

EXTEND FORM customLabelTransaction
    PROPERTIES(l) DRAW d addDetailDialogTerminalLabelTransactionDetail
;

@defineDocumentHeaderSkuQuantity(terminalDocument, sku);

EXTEND CLASS TerminalDocument : Label.PriceTransactionDocument;
description (TerminalDocument document) += STRING[200](Terminal.description(document));

createAttribute  ABSTRACT LIST ( TerminalDocumentDetail, LabelTransactionDetail);

createLabelTransaction 'Распечатать ценники'(TerminalDocument terminalDocument)  {
    NEWSESSION {
        // бежим по всем типам ценников из управленческих параметров
        // для каждого создаем по операции печати ценников
        FOR Stock stock == stock(terminalDocument) NOINLINE DO {
            select(Sku sku, LabelType labelType, stock) <- TRUE IF countTerminalDocumentDetail(sku, terminalDocument) AND inPrint(labelType, sku, stock);
        }

        FOR [GROUP SUM 1 IF select(Sku s, LabelType l, stock(terminalDocument)) BY l](LabelType labelType) ORDER labelType NEW t = LabelTransaction DO {
            departmentStore(t) <- stock(terminalDocument);
            priceTransactionDocument(t) <- terminalDocument;
            labelType(t) <- labelType;

            FOR terminalDocument(TerminalDocumentDetail dd) == terminalDocument AND
                quantity(dd) > 0 AND
                select(sku(dd), labelType, stock(terminalDocument)) AND
                PriceListType pt == overPriceListType(t) ORDER dateTimeScan(dd), dd NOINLINE (pt) INLINE NEW d = LabelTransactionDetail DO {
                
                labelTransaction(d) <- t;
                sku(d) <- sku(dd);

                name(d) <- IF batch(d) THEN documentNameSku(batch(d)) ELSE name(sku(d));
                createAttribute(d);

                quantity(d) <- INTEGER(quantity(dd));

                price(d) <- calcPrice(pt, d);
                retailPrice(d) <- overRetailPrice(d);
                createAttribute(dd, d);
            }
            DELETE LabelTransactionDetail d WHERE labelTransaction(d) == t AND NOT price(d) AND NOT printNullPrice(d);

            IF notCheckEqualRetailPrice() THEN
                DELETE LabelTransactionDetail d WHERE labelTransaction(d) == t AND NOT retailPrice(d) AND notPrintRetailPrice(d) AND NOT skipDelete(d);
            ELSE
                DELETE LabelTransactionDetail d WHERE labelTransaction(d) == t AND NOT discountPercent(d) > 0 AND notPrintRetailPrice(d) AND NOT skipDelete(d);

            DELETE LabelTransactionDetail d WHERE labelTransaction(d) == t AND passScales(sku(d)) AND notPrintNetItem(d);

            print(t);
        }
        printed(terminalDocument) <- TRUE WHERE is(terminalDocument);
        used(terminalDocument) <- TRUE WHERE is(terminalDocument);

        apply();
    }
} TOOLBAR CONFIRM;

in = DATA LOCAL BOOLEAN (Sku);   

createSnapshotTerminalDocumentLabel(TerminalDocument terminalDocument, LabelType l)  { 
    IF NOT countSelectType() THEN {  
        select(LabelType type) <- TRUE WHERE type == l;
    }                                        
    FOR select(LabelType type) NEW t = LabelTransaction DO {              
        departmentStore(t) <- stock(terminalDocument);
        priceTransactionDocument(t) <- terminalDocument;
        labelType(t) <- type;

        FOR terminalDocument(TerminalDocumentDetail dd) == terminalDocument AND quantity(dd) > 0
            AND in(Sku sku) AND sku == sku(dd) AND NOT exclude(type, sku)
            AND PriceListType pt == overPriceListType(t) ORDER dateTimeScan(dd), dd NOINLINE (pt)
            NEW d = LabelTransactionDetail DO {
                labelTransaction(d) <- t;
                sku(d) <- sku;

                name(d) <- IF batch(d) THEN documentNameSku(batch(d)) ELSE name(sku(d));
                documentQuantity(d) <- quantity(dd); 
                
                price(d) <- OVERRIDE documentPrice(d), calcPrice(pt, d);
                retailPrice(d) <- overRetailPrice(d) WHERE overRetailPrice(d);                       
                                                           
                quantity(d) <- IF NOT countLabel(departmentStore(d)) 
                                                         THEN INTEGER(documentQuantity(d))
                                                         ELSE countLabel(departmentStore(d));                                              
                                                           
                                                           
                
                
                createAttribute(d);
                createAttribute(dd, d);
        }
        overCreate(t);
        
        IF change(stock(terminalDocument)) THEN {
            LOCAL printed = BOOLEAN();
            printed() <- NULL;
            DIALOG customLabelTransaction OBJECTS l = t NOMANAGESESSION DO {    
                print(t);
                printed() <- TRUE;
            }             
            IF NOT printed() THEN {
                cancel();
            }             
        } ELSE {
            print(t);
        }                        
    }
    printed(terminalDocument) <- TRUE WHERE is(terminalDocument);    
    used(terminalDocument) <- TRUE WHERE is(terminalDocument); 
    
    APPLY; 
}

createSnapshotTerminalDocumentLabel 'Перепечатать ценники'(TerminalDocument terminalDocument)  { 
	NEWSESSION {
	        
	    in(Sku sku) <- TRUE IF countTerminalDocumentDetail(sku, terminalDocument);
	    
	    DIALOG selectLabelTypes OBJECTS ds =  stock(terminalDocument), l INPUT NOMANAGESESSION DO {
	        createSnapshotTerminalDocumentLabel(terminalDocument, l);
	    }                                                                                                                        
	    
	}
} TOOLBAR;

showPrintLabelTransaction 'Показывать' (TerminalDocument terminalDocument) = isOpened(terminalDocument) AND NOT skip(terminalDocument);
                                                                           
backgroundPrintLabelTransaction 'Цвет' (TerminalDocument terminalDocument) = RGB(212,255,212) IF showPrintLabelTransaction(terminalDocument) AND NOT printed(terminalDocument);

EXTEND FORM terminalDocuments
    PROPERTIES(td) statusLabel BACKGROUND backgroundPrintLabelTransaction(td) READONLY,
                       createLabelTransaction SHOWIF showPrintLabelTransaction(td), 
                       createSnapshotTerminalDocumentLabel SHOWIF isOpened(td)
;

DESIGN terminalDocuments {
    machineryContainer{
        NEW label {
            caption = 'Ценники' ;
            MOVE PROPERTY (createLabelTransaction(td));
            MOVE PROPERTY (createSnapshotTerminalDocumentLabel(td));
        }
    }
}

labelTerminalDocumentType = DATA TerminalDocumentType();
nameLabelTerminalDocumentType 'Тип документа ТСД для печати ценников' = name(labelTerminalDocumentType());
EXTEND FORM options 
    PROPERTIES () nameLabelTerminalDocumentType;

DESIGN options{
    label{
        MOVE PROPERTY (nameLabelTerminalDocumentType());
    }
}

backgroundTerminalDocumentDetail = ABSTRACT COLOR (TerminalDocumentDetail);

countSkuTerminalDocumentDetail 'Кол-во SKU к печати' (TerminalDocument td) = 
        GROUP SUM 1 IF quantity(TerminalDocumentDetail d) > 0 BY terminalDocument(d);
                      		
FORM labelTerminalDashboard 'Печать ценников ТСД'
    OBJECTS d=DATE PANEL 
    PROPERTIES val = VALUE (d)
    OBJECTS td=TerminalDocument
    PROPERTIES(td)  READONLY id, date, time, nameStock, nameGroupTerminal, nameTerminalDocumentType, idTerminalHandbookType1, 
                    idTerminalHandbookType2, title, quantity,
                    countSkuTerminalDocumentDetail,
                    countScanned 'Кол-во отсканированных ценников' = countTerminalDocumentDetail,
                    countToPrint 'Ценников к печати (всего)' = quantityTerminalDocumentDetail

    PROPERTIES(td)  NEWSESSION NEW, EDIT, DELETE 
    PROPERTIES (td) close SHOWIF isOpened(td), open SHOWIF isClosed(td)
    
    FILTERS terminalDocumentType(td) == labelTerminalDocumentType()
    FILTERGROUP date FILTER 'На дату' date(td) <= d 'F6' DEFAULT
    FILTERGROUP filterUse
        FILTER 'Неиспользованные' notUsed(td) 'F7' DEFAULT        
    FILTERGROUP open FILTER 'Открыт' isOpened(td) 'F6' DEFAULT        
            
    OBJECTS l = LabelTransaction
    PROPERTIES(l) READONLY nameLabelType, description, date, time
    PROPERTIES(l) READONLY createdNameUser, createdTime, createdHostnameComputer
    PROPERTIES(l) NEWSESSION EDIT , DELETE  
    PROPERTIES(l) printTo TOOLBAR 
    ORDERS date(l), time(l)    
    
    FILTERGROUP date1 FILTER 'На дату' date(l) == d 'F6' DEFAULT    
    
    OBJECTS tdd=TerminalDocumentDetail
    PROPERTIES(tdd) READONLY BACKGROUND backgroundTerminalDocumentDetail(tdd) number, barcode, name, price, quantity, sum

    FILTERS terminalDocument(tdd) == td

    PROPERTIES(td) statusLabel BACKGROUND backgroundPrintLabelTransaction(td) READONLY,
                       createLabelTransaction SHOWIF showPrintLabelTransaction(td), 
                       createSnapshotTerminalDocumentLabel SHOWIF isOpened(td)

;
DESIGN labelTerminalDashboard {
	PROPERTY (countSkuTerminalDocumentDetail(td)) { charWidth = 8; }
    PROPERTY (countScanned) { charWidth = 15; }
    PROPERTY (countToPrint) { charWidth = 10; }

    MOVE BOX(d);
    MOVE BOX(td);
    NEW tabContainer {
        fill = 1;
        tabbed = TRUE;
        MOVE BOX(l);
        MOVE BOX(tdd);
    }
    MOVE TOOLBARBOX;
}

@extendFormFilterAccessStock(TerminalDocument, td, labelTerminalDashboard, stock, company);
@extendFormFilterAccessStock(LabelTransaction, l, labelTerminalDashboard, departmentStore, company);

NAVIGATOR {
    retailDashboardNavigator {
        NEW labelTerminalDashboard;
    } 
}