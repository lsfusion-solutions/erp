MODULE TerminalTeamWork;

REQUIRE Terminal, System, TerminalHandler;

NAMESPACE Terminal;


CLASS TeamWorkDocument 'Документ совместной приемки';
TABLE teamWorkDocument (TeamWorkDocument);

TABLE teamWorkDocumentId(ISTRING[1000]) NODEFAULT;
TABLE teamWorkDocumentBarcode(TeamWorkDocument, STRING[30]);
TABLE teamWorkDocumentIdLogin(TeamWorkDocument, STRING[100], ISTRING[100]);

id 'Код' = DATA STRING[100] (TeamWorkDocument) IN id INDEXED CHARWIDTH 10;
teamWorkDocument (id) = GROUP AGGR (TeamWorkDocument td) BY id (td) MATERIALIZED TABLE teamWorkDocumentId;

number 'Имя' = DATA STRING[100] (TeamWorkDocument) IN base CHARWIDTH 20;
comment 'Комментарий' = DATA STRING[100] (TeamWorkDocument) IN base CHARWIDTH 20;
quantity 'Количество' = DATA NUMERIC[14,3] (TeamWorkDocument) IN base;

ana1 'Аналитика 1' = DATA STRING (TeamWorkDocument) IN base;
ana2 'Аналитика 2' = DATA STRING (TeamWorkDocument) IN base;
ana3 'Аналитика 3' = DATA STRING (TeamWorkDocument) IN base;

used 'Использован' (teamWorkDocument) = DATA BOOLEAN (TeamWorkDocument) IN base;
notUsed 'Неиспользован' (TeamWorkDocument teamWorkDocument) = teamWorkDocument IS TeamWorkDocument AND NOT used(teamWorkDocument) MATERIALIZED INDEXED;

createdUser = DATA CustomUser (TeamWorkDocument);
createdNameUser 'Создан пользователем' (TeamWorkDocument td) = name[Contact](createdUser(td)) CHARWIDTH 10 IN created;

createdTime 'Время создания'= DATA DATETIME (TeamWorkDocument) IN created;
createdTime (TeamWorkDocument o) <- currentDateTime() WHEN SET(o IS TeamWorkDocument);

stock = DATA Stock (TeamWorkDocument) INDEXED;
nameStock 'Склад' (TeamWorkDocument document) = name(stock (document)) IN documentHeader;

terminalDocumentType = DATA TerminalDocumentType (TeamWorkDocument) INDEXED;
nameTerminalDocumentType 'Тип документа' (TeamWorkDocument d) = name(terminalDocumentType(d));
idTerminalDocumentType 'Тип документа' (TeamWorkDocument d) = id(terminalDocumentType(d));

numberOrders 'Заказы' = DATA STRING (TeamWorkDocument) IN base;

CLASS TeamWorkDocumentDetail 'Строка документа совместной приемки';
TABLE teamWorkDocumentDetail (TeamWorkDocumentDetail);

teamWorkDocument = DATA TeamWorkDocument(TeamWorkDocumentDetail) NONULL DELETE INDEXED;

@defineDocumentTimePrefix(teamWorkDocument, , ' документа');
@deriveDocumentHeaderTimePrefix(TeamWorkDocument, );


id 'Код' = DATA STRING[100] (TeamWorkDocumentDetail) IN base;
login 'Логин' = DATA ISTRING[100] (TeamWorkDocumentDetail) IN base;

teamWorkDocumentDetail = GROUP AGGR TeamWorkDocumentDetail d BY teamWorkDocument(d), id(d), login(d) MATERIALIZED;

barcode 'Штрихкод' = DATA STRING[30] (TeamWorkDocumentDetail) IN base;
quantity 'Количество' = DATA NUMERIC[14,3] (TeamWorkDocumentDetail) IN base;
quantity = GROUP SUM quantity(TeamWorkDocumentDetail d) BY teamWorkDocument(d), barcode(d) MATERIALIZED;
price 'Цена' = DATA NUMERIC[16,4] (TeamWorkDocumentDetail) IN base;
sum 'Сумма' = DATA NUMERIC[18,4] (TeamWorkDocumentDetail) IN base;
sum(TeamWorkDocumentDetail d) <- round2(quantity(d) * price(d)) WHEN CHANGED(quantity(d)) OR CHANGED(price(d));

comment 'Комментарий' = DATA STRING[100] (TeamWorkDocumentDetail) IN base;
dateTimeScan 'Время сканирования' = DATA DATETIME (TeamWorkDocumentDetail) IN base;

extraDate1 'Дата 1' = DATA DATE (TeamWorkDocumentDetail) IN base;
extraDate2 'Дата 2' = DATA DATE (TeamWorkDocumentDetail) IN base;
extraField1 'Поле 1' = DATA STRING[100] (TeamWorkDocumentDetail) IN base;
extraField2 'Поле 2' = DATA STRING[100] (TeamWorkDocumentDetail) IN base;
extraField3 'Поле 3' = DATA STRING[100] (TeamWorkDocumentDetail) IN base;
extraQuantity 'Доп. количество' = DATA NUMERIC[14,3] (TeamWorkDocumentDetail) IN base;
marking 'Маркировка' = DATA STRING (TeamWorkDocumentDetail) IN base;
ana1 'Аналитика 1' = DATA STRING (TeamWorkDocumentDetail) IN base;
ana2 'Аналитика 2' = DATA STRING (TeamWorkDocumentDetail) IN base;
image 'Изображение' = DATA IMAGEFILE (TeamWorkDocumentDetail) IN base;
lots 'Марки' = DATA STRING (TeamWorkDocumentDetail) IN base;

sku = DATA Sku (TeamWorkDocumentDetail) INDEXED;
nameSku 'Наименование товара' (TeamWorkDocumentDetail d) = name(sku(d));
idSku 'Код товара' (TeamWorkDocumentDetail d) = id(sku(d));
nameUOMSku 'Ед. изм.' (TeamWorkDocumentDetail d) = nameUOM(sku(d));
dataName 'Наименование' = DATA STRING[200] (TeamWorkDocumentDetail);
name 'Наименование' (TeamWorkDocumentDetail d) = OVERRIDE dataName(d), nameSku(d) IN base;


WHEN LOCAL SETCHANGED(barcode(TeamWorkDocumentDetail d)) DO {
    sku(d) <- OVERRIDE skuBarcode(barcode(d)), sku(barcode(d));
}

@defineDocumentHeaderClosed(TeamWorkDocument);
INDEX isOpened(TeamWorkDocument o), o;

@defineDocumentHeaderCount(teamWorkDocument);
@defineDocumentHeaderQuantity(teamWorkDocument);
sumTeamWorkDocumentDetail '{document.sum.of}' (teamWorkDocument) = GROUP SUM sum(TeamWorkDocumentDetail idetail) BY teamWorkDocument(idetail) CHARWIDTH 10 MATERIALIZED IN documentSum;

CLASS TeamWorkDocumentLog 'Лог документа совместной приемки';
TABLE teamWorkDocumentLog (TeamWorkDocumentLog);

teamWorkDocument = DATA TeamWorkDocument (TeamWorkDocumentLog) NONULL DELETE INDEXED;
dateTime 'Время' = DATA DATETIME (TeamWorkDocumentLog) IN base;
command 'Команда' = DATA INTEGER (TeamWorkDocumentLog);
error 'Сообщение об ошибке'= DATA STRING (TeamWorkDocumentLog);

id 'Код' = DATA STRING[100] (TeamWorkDocumentLog) IN id  CHARWIDTH 10;
user = DATA CustomUser  (TeamWorkDocumentLog);
nameUser 'Пользователель' (TeamWorkDocumentLog td) = name[Contact](user(td)) CHARWIDTH 10;

barcode 'Штрихкод' = DATA STRING[30] (TeamWorkDocumentLog) IN base;

quantity 'Количество' = DATA NUMERIC[14,3] (TeamWorkDocumentLog) IN base;
price 'Цена' = DATA NUMERIC[16,4] (TeamWorkDocumentLog) IN base;

comment 'Комментарий' = DATA STRING[100] (TeamWorkDocumentLog) IN base;

extraDate1 'Дата 1' = DATA DATE (TeamWorkDocumentLog) IN base;
extraDate2 'Дата 2' = DATA DATE (TeamWorkDocumentLog) IN base;
extraField1 'Поле 1' = DATA STRING[100] (TeamWorkDocumentLog) IN base;
extraField2 'Поле 2' = DATA STRING[100] (TeamWorkDocumentLog) IN base;
extraField3 'Поле 3' = DATA STRING[100] (TeamWorkDocumentLog) IN base;
extraQuantity 'Доп. количество' = DATA NUMERIC[14,3] (TeamWorkDocumentLog) IN base;
ana1 'Аналитика 1' = DATA STRING (TeamWorkDocumentLog) IN base;
ana2 'Аналитика 2' = DATA STRING (TeamWorkDocumentLog) IN base;
lots 'Марки' = DATA STRING (TeamWorkDocumentLog) IN base;

// ----------------------------------------------- Формы документов ------------------------------------------ //

FORM teamWorkDocument 'Документ совместной приемки'
    OBJECTS td=TeamWorkDocument PANEL
    PROPERTIES(td)  id, nameStock, date, time, number, ana1, ana2, ana3, numberOrders, nameTerminalDocumentType, comment, quantity, 
        sumTeamWorkDocumentDetail, used, createdNameUser READONLY

    OBJECTS tdd = TeamWorkDocumentDetail
    PROPERTIES(tdd) id, login, barcode, name, quantity, price, sum, comment, dateTimeScan, extraQuantity,
        extraDate1, extraDate2, extraField1, extraField2, extraField3, ana1, ana2, image,
        NEW, deletetdd = DELETE GRID

    FILTERS teamWorkDocument(tdd) == td

    EDIT TeamWorkDocument OBJECT td;
;

DESIGN teamWorkDocument {
    OBJECTS {
        BOX(td){
            NEW row1 {
                horizontal = TRUE;
                MOVE PROPERTY(id(td));
                MOVE PROPERTY(number(td));
                MOVE PROPERTY(numberOrders(td));
                MOVE PROPERTY(comment(td));
                MOVE PROPERTY(createdNameUser(td));
            }
            NEW row2 {
                horizontal = TRUE;
                MOVE PROPERTY(quantity(td));
                MOVE PROPERTY(sumTeamWorkDocumentDetail(td));
                MOVE PROPERTY(used(td));
            }
        }
        MOVE BOX(tdd);
    }
}

FORM teamWorkDocuments 'Документы совместной приемки'
    OBJECTS td = TeamWorkDocument
    PROPERTIES(td) READONLY id, date, time, number, ana1, ana2, ana3, numberOrders, nameTerminalDocumentType, comment, quantity,
        countTeamWorkDocumentDetail, quantityTeamWorkDocumentDetail, sumTeamWorkDocumentDetail, createdNameUser, createdTime
    PROPERTIES(td) NEWSESSION NEW, EDIT, DELETE
    PROPERTIES (td) close SHOWIF isOpened(td), open SHOWIF isClosed(td)

    OBJECTS tdd = TeamWorkDocumentDetail
    PROPERTIES(tdd) READONLY id, login, barcode, name, quantity, price, sum, comment, dateTimeScan, extraQuantity,
        extraDate1, extraDate2, extraField1, extraField2, extraField3, ana1, ana2, image, lots
    FILTERS teamWorkDocument(tdd) == td
    FILTERGROUP filterUse
        FILTER 'Неиспользованные' notUsed(td) 'F10' DEFAULT
    FILTERGROUP open FILTER 'Открыт' isOpened(td) 'F6' DEFAULT

    OBJECTS tdl = TeamWorkDocumentLog
    PROPERTIES(tdl) READONLY dateTime, command, id, nameUser, barcode, quantity, price, comment, extraQuantity, 
        extraDate1, extraDate2, extraField1, extraField2, extraField3, ana1, ana2, lots, error
    FILTERS teamWorkDocument(tdl) == td
    
    EVENTS 
        ON SCHEDULE PERIOD 60 { formRefresh();}
;

DESIGN teamWorkDocuments {
    OBJECTS {
        MOVE BOX(td);
        NEW detail {
            tabbed =TRUE;
            fill = 1;
            MOVE BOX (tdd);
            MOVE BOX (tdl);
        }
    }
}

@extendFormFilterAccessStock(TeamWorkDocument, td, teamWorkDocuments, stock, company);

NAVIGATOR {
    terminalNavigator {
        NEW teamWorkDocuments;
    }
    
}

error = DATA LOCAL NESTED STRING();

GROUP document;

FORM exportTeamWork
    PROPERTIES error()
    
    OBJECTS document = TeamWorkDocument 
    PROPERTIES (document) IN document id, dateTime EXTID 'date', number, idTerminalDocumentType EXTID 'vop', comment,
        numberOrders, ana1, ana2, ana3
    
    OBJECTS  d = STRING EXTID 'detail'
    PROPERTIES  barcode = VALUE(d), 
                quantityTotal = quantity(document, d)
    FILTERS quantity(document, d)
;

//merge(STRING a, STRING b) = FORMULA STRING '($1)::jsonb||($2)::jsonb';

process(INTEGER command, FILE file, CustomUser user, STRING[100] idStock) {

    fileToString(file);
    logToFile('terminal', 'file: ' + resultString());
    
    IF command > 2 THEN {
        LOCAL idDocument = STRING ();
        IMPORT JSON FROM file TO () idDocument;
        IF used(teamWorkDocument(idDocument())) THEN {
            EXPORT JSON FROM error = 'Документ уже закрыт';
            RETURN;
        }
    }
    
    CASE
    WHEN command == 1 THEN { //создание документа
        
        LOCAL id, number, vop, ana1, ana2, ana3, comment, numberOrders = STRING ();
        LOCAL date = DATETIME ();
        IMPORT JSON FROM file TO () id, date, number, vop, ana1, ana2, ana3, comment, numberOrders

        IF teamWorkDocument(id()) THEN {
            EXPORT JSON FROM error = 'Документ уже присутствует в системе';
        } ELSE {
            NEW t = TeamWorkDocument {
                id(t) <- id();
                date(t) <- DATE(date());
                time(t) <- TIME(date());
                number(t) <- number();
                ana1(t) <- ana1();
                ana2(t) <- ana2();
                ana3(t) <- ana3();
                terminalDocumentType(t) <- terminalDocumentType(vop());
                comment(t) <- comment();
                numberOrders(t) <- numberOrders();
                stock(t) <- OVERRIDE stock(idStock), stock(user);
                createdUser(t) <- user;
                NEW d = TeamWorkDocumentLog {
                    teamWorkDocument(d) <- t;
                    dateTime(d) <- currentDateTime();
                    command(d) <- command;
                    user(d) <- user;
                }
            }
            APPLY;
        }
    }
    WHEN command == 2 THEN { //список доступных документов
        EXPORT JSON FROM id(TeamWorkDocument d), date = dateTime(d), number(d), vop = idTerminalDocumentType(d), comment(d),
            ana1(d), ana2(d), ana3(d), numberOrders(d), loginUser = login(createdUser(d)), nameUser = shortName(createdUser(d)) 
            WHERE stock(d) == (OVERRIDE stock(idStock), stock(user)) AND notUsed(d);
    }
    WHEN command == 3 THEN { //закрытие документа
        LOCAL idDocument = STRING ();
        IMPORT JSON FROM file TO () idDocument;

        FOR id(TeamWorkDocument doc) == idDocument() DO {
            APPLY NESTED LOCAL {
                used(doc) <- TRUE;
                NEW d = TeamWorkDocumentLog {
                    teamWorkDocument(d) <- doc;
                    dateTime(d) <- currentDateTime();
                    command(d) <- command;
                    user(d) <- user;
                }
            }
            
            NEW t = TerminalDocument {
                id(t) <- id(doc);
                date(t) <- date(doc);
                time(t) <- time(doc);
                terminalDocumentType(t) <- terminalDocumentType(doc);
                title(t) <- number(doc);
                parentDocument(t) <- numberOrders(doc);
                createdUser(t) <- user;
                comment(t) <- comment(doc);
                idTerminalHandbookType1(t) <- ana1(doc);
                idTerminalHandbookType2(t) <- ana2(doc);
                stock(t) <- stock(doc);
                FOR quantity(doc, STRING bar) NEW d = TerminalDocumentDetail DO {
                    terminalDocument(d) <- t;
                    barcode(d) <- bar;
                    quantity(d) <- quantity(doc, bar);
                    extraQuantity(d) <- GROUP SUM extraQuantity(TeamWorkDocumentDetail td) IF teamWorkDocument(td) == doc AND barcode(td) == bar;
                    dateTimeScan(d) <- GROUP MAX dateTimeScan(TeamWorkDocumentDetail td) IF teamWorkDocument(td) == doc AND barcode(td) == bar;
                    extraField1(d) <- GROUP MAX extraField1(TeamWorkDocumentDetail td) IF teamWorkDocument(td) == doc AND barcode(td) == bar;
                    extraField2(d) <- GROUP MAX extraField2(TeamWorkDocumentDetail td) IF teamWorkDocument(td) == doc AND barcode(td) == bar;
                    extraField3(d) <- GROUP MAX extraField3(TeamWorkDocumentDetail td) IF teamWorkDocument(td) == doc AND barcode(td) == bar;
                    ana1(d) <- GROUP MAX ana1(TeamWorkDocumentDetail td) IF teamWorkDocument(td) == doc AND barcode(td) == bar;
                    ana2(d) <- GROUP MAX ana2(TeamWorkDocumentDetail td) IF teamWorkDocument(td) == doc AND barcode(td) == bar;
                    comment(d) <- GROUP MAX comment(TeamWorkDocumentDetail td) IF teamWorkDocument(td) == doc AND barcode(td) == bar;
                    price(d) <- GROUP MAX price(TeamWorkDocumentDetail td) IF teamWorkDocument(td) == doc AND barcode(td) == bar;
                    extraDate1(d) <- GROUP MAX extraDate1(TeamWorkDocumentDetail td) IF teamWorkDocument(td) == doc AND barcode(td) == bar;
                    extraDate2(d) <- GROUP MAX extraDate2(TeamWorkDocumentDetail td) IF teamWorkDocument(td) == doc AND barcode(td) == bar;
                    marking(d) <- replace((GROUP CONCAT lots(TeamWorkDocumentDetail td) IF teamWorkDocument(td) == doc AND barcode(td) == bar, '' ORDER td), '][', ',');
                    image(d) <- (GROUP LAST image(TeamWorkDocumentDetail td) ORDER td WHERE image(td) AND teamWorkDocument(td) == doc AND barcode(td) == bar);
                }
                processMessage() <- NULL;
                process(t);
                IF processMessage() THEN {
                    error() <-  processMessage();
                } ELSE {
                    APPLY;
                    IF canceled() THEN {
                        error() <- applyMessage();
                    }
                }
            }

        }
        IF error() THEN {
            EXPORT JSON FROM error = 'Неизвестная команда';
        }

    }
    WHEN command == 4 OR command == 6 THEN { //добавление строки / обновление
        LOCAL idDocument, id, barcode, field1, field2, field3, ana1, ana2, comment, lots = STRING ();
        LOCAL quantity, extraQuantity, price, quantityMax = NUMERIC ();
        LOCAL date1, date2 = DATE ();
        LOCAL image = IMAGEFILE ();
        LOCAL detail = TeamWorkDocumentDetail();
        
        IMPORT JSON FROM file TO () idDocument, id, barcode, field1, field2, field3, ana1, ana2, comment, quantity, 
                extraQuantity, price, quantityMax, date1, date2, lots, image
        
        error() <- NULL;
        APPLY NESTED LOCAL {
            detail() <- teamWorkDocumentDetail(teamWorkDocument(idDocument()), id(), login(user));
            IF quantity(teamWorkDocument(idDocument()), barcode()) (-) quantity(detail()) (+) quantity() > quantityMax() THEN {
                error() <- 'Количество превышает максимальное, уже принято: ' + (OVERRIDE quantity(teamWorkDocument(idDocument()), barcode()), 0)
                    + ', максимальное: ' + quantityMax();
            } ELSE {
                IF NOT detail() THEN {
                    NEW d = TeamWorkDocumentDetail {
                        teamWorkDocument(d) <- teamWorkDocument(idDocument());
                        id(d) <- id();
                        login(d) <- login(user);
                        dateTimeScan(d) <- currentDateTime();
                        barcode(d) <- barcode();
                        extraField1(d) <- field1();
                        extraField2(d) <- field2();
                        extraField3(d) <- field3();
                        ana1(d) <- ana1();
                        ana2(d) <- ana2();
                        comment(d) <- comment();
                        quantity(d) <- quantity();
                        extraQuantity(d) <- extraQuantity();
                        price(d) <- price();
                        extraDate1(d) <- date1();
                        extraDate2(d) <- date2();
                        lots(d) <- lots();
                        image(d) <- image();
                    }
                } ELSE {
                    id(detail()) <-id();
                    login(detail()) <- login(user);
                    barcode(detail()) <- barcode();
                    extraField1(detail()) <- field1();
                    extraField2(detail()) <- field2();
                    extraField3(detail()) <- field3();
                    ana1(detail()) <- ana1();
                    ana2(detail()) <- ana2();
                    comment(detail()) <- comment();
                    quantity(detail()) <- quantity();
                    extraQuantity(detail()) <- extraQuantity();
                    price(detail()) <- price();
                    extraDate1(detail()) <- date1();
                    extraDate2(detail()) <- date2();
                    lots(detail()) <- lots();
                    image(detail()) <- image();
                }
            }

            NEW d = TeamWorkDocumentLog {
                teamWorkDocument(d) <- teamWorkDocument(idDocument());
                dateTime(d) <- currentDateTime();
                command(d) <- command;
                user(d) <- user;
                id(d) <- id();
                barcode(d) <- barcode();
                extraField1(d) <- field1();
                extraField2(d) <- field2();
                extraField3(d) <- field3();
                ana1(d) <- ana1();
                ana2(d) <- ana2();
                comment(d) <- comment();
                quantity(d) <- quantity();
                extraQuantity(d) <- extraQuantity();
                price(d) <- price();
                extraDate1(d) <- date1();
                extraDate2(d) <- date2();
                lots(d) <- lots();
                error(d) <- error();
            }
        }
        IF canceled() THEN {
            error() <- applyMessage();
        }
        
        EXPORT exportTeamWork OBJECTS document = teamWorkDocument(idDocument()) JSON;
    }
    WHEN command == 5 THEN { //выгрузка документа по запросу
        LOCAL idDocument = STRING ();
        IMPORT JSON FROM file TO () idDocument;

        EXPORT exportTeamWork OBJECTS document = teamWorkDocument(idDocument()) JSON;
    }
    ELSE {
        EXPORT JSON FROM error = 'Неизвестная команда';
    }

}
