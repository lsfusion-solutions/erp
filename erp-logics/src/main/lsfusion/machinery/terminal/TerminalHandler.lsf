MODULE TerminalHandler; 

REQUIRE Terminal, PriceListAccount, Item, PurchasePack, TerminalPreferences, StockDocumentSkuLedger, MachineryPriceTransaction;

processMessage = DATA LOCAL NESTED STRING ();

process 'Обработка документа ТСД' (terminalDocument)  ABSTRACT LIST ( TerminalDocument);
process (TerminalDocument document) + { 
    sku(TerminalDocumentDetail d) <- OVERRIDE skuBarcode(barcode(d)), sku(barcode(d)) WHERE terminalDocument(d) == document;
}; 

//журнал подключений 
checkIdTerminal 'Ограничение доступа по коду терминала' = DATA BOOLEAN ();

@defineExternalizable(terminal, STRING[100]);
blocked 'Заблокирован' = DATA BOOLEAN (Terminal);
lastConnectionTime 'Последнее подключение' = DATA DATETIME (Terminal);
lastUser 'Пользователь' = DATA CustomUser (Terminal);
shortNameLastUser 'Пользователь' (Terminal terminal) = shortName(lastUser(terminal));
nameStockLastUser 'Склад пользователя' (Terminal terminal) = nameStock(lastUser(terminal));
applicationVersion 'Версия приложения' = DATA STRING[50] (Terminal);
deviceModel 'Модель терминала' = DATA STRING[50] (Terminal);

maxNpp () = GROUP MAX npp(Terminal t) IF t IS Terminal;
defaultGroupTerminal() = GROUP MIN GroupTerminal gt IF gt IS GroupTerminal AND NOT stock(gt);

EXTEND FORM groupTerminal PROPERTIES(t) AFTER npp(t) id, blocked, lastConnectionTime, shortNameLastUser, nameStockLastUser, applicationVersion, deviceModel;
EXTEND FORM groupsTerminal
    PROPERTIES () checkIdTerminal
    PROPERTIES(t) AFTER npp(t) READONLY id, blocked, lastConnectionTime, shortNameLastUser, nameStockLastUser, applicationVersion, deviceModel;


hostTerminalServer 'Хост' = DATA STRING[30] ();
portTerminalServer 'Порт' = DATA INTEGER ();
restrictLockedUsers 'Запретить доступ заблокированным пользователям' = DATA BOOLEAN ();
restricted (CustomUser user) = isLocked(user) AND restrictLockedUsers();

accessList (Employee e) = '[' + (GROUP CONCAT ('\{"id":"'+id(Stock s)+'","name":"'+escapeJSONValue(name(s))+'","main":'+(IF stock(e) == s THEN 'true' ELSE 'false')+'\}') 
                                        IF (limitAccess(e) AND accessCompany(e, s) OR stock(e) == s) AND id(s),
                                        ',' ORDER s) + ']';

//товары
priceBefore 'Старая цена' = ABSTRACT NUMERIC[16,4](Sku, Stock);
priceBeforeIdBarcodeId(STRING[15] sku, STRING[100] stock) = priceBefore(skuBarcode(sku), stock(stock));

manufacturer = ABSTRACT LegalEntity (Item);
nameManufacturerOver (Sku s) = OVERRIDE name(manufacturer(s)), nameManufacturer(s);
nameManufacturer (Barcode b) = nameManufacturerOver(sku(b));

isWeight(Barcode barcode) = passScales(sku(barcode)) AND split(sku(barcode));

terminalName = ABSTRACT ISTRING[255](Barcode, Stock);
overNameSku (Barcode b, Stock s) = OVERRIDE terminalName(b, s), nameSku(b);
skipItem = ABSTRACT BOOLEAN (Barcode, Stock, User, STRING );
overNameSku (Barcode b, Stock s, User u, STRING vop) = overNameSku(b, s) IF NOT skipItem(b, s, u, vop);

color 'Цвет' = ABSTRACT COLOR (Sku, Stock);
color(Barcode b, Stock s) = color(sku(b), s);

extInfo 'Дополнительная информация' = ABSTRACT TEXT (Barcode, Stock);
fld3 = ABSTRACT TEXT (Barcode, Stock);
fld4 = ABSTRACT TEXT (Barcode, Stock);
fld5 = ABSTRACT TEXT (Barcode, Stock);

CLASS TerminalBarcodeFlags {
    needManufacturingDate 'Обязательна дата изготовления',
    goodInternetStore 'Признак товара интернет магазина',
    goodMarking 'Признак маркированного товара',
    goodNotInRange 'Признак товара не входящего в ассортимент магазина',
    voicePromotion 'Акционный'
}
order(TerminalBarcodeFlags f) = CASE 
    WHEN f = TerminalBarcodeFlags.needManufacturingDate THEN 0l
    WHEN f = TerminalBarcodeFlags.goodInternetStore THEN 5l
    WHEN f = TerminalBarcodeFlags.goodMarking THEN 6l
    WHEN f = TerminalBarcodeFlags.goodNotInRange THEN 7l
    WHEN f = TerminalBarcodeFlags.voicePromotion THEN 8l;
    
in = ABSTRACT CASE BOOLEAN (Sku, Stock, TerminalBarcodeFlags);
flag (TerminalBarcodeFlags f) = LONG(power(2l, order(f)));
flags(Sku s, Stock st) = GROUP SUM flag(TerminalBarcodeFlags f) IF in(s, st, f);
flags(Barcode b, Stock st) = flags(sku(b), st);

image(Barcode b) = smallImage(sku(b)) IF hasImage(sku(b));

amountPack (Barcode b) = amountPack(sku(b));

overNameSkuGroup 'Товарная группа' = ABSTRACT ISTRING[255](Barcode);
nameSkuGroup (Barcode b) = OVERRIDE overNameSkuGroup(b), nameSkuGroup(sku(b));

sendAllItems 'Загружать в терминал все товары без цен' = DATA BOOLEAN () PREREAD;
sendOnlyActiveItems 'Загружать только активные товары' = DATA BOOLEAN () PREREAD;

useOverPriceInTerminal = ABSTRACT BOOLEAN (Stock) PREREAD;
overCurrentPriceInTerminal = ABSTRACT NUMERIC[16,4] (Sku, Stock);
currentPriceInTerminal 'Текущая цена' (Sku sku, Stock stock) = IF useOverPriceInTerminal(stock)
    THEN overCurrentPriceInTerminal(sku, stock) 
    ELSE prevAccountPriceA(sku, stock, currentDateTime());
currentPriceInTerminal 'Текущая цена' (Barcode barcode, Stock stock) = currentPriceInTerminal(sku(barcode), stock);

overCurrentPriceInTerminal = ABSTRACT NUMERIC[16,4] (Batch, Stock);
currentPriceInTerminal 'Текущая цена' (Batch batch, Stock stock) = IF useOverPriceInTerminal(stock)
    THEN overCurrentPriceInTerminal(batch, stock)
    ELSE cost(batch) IF stock IS Stock;

useCurrentQuantityInTerminal 'Загружать в терминал текущие остатки' = DATA BOOLEAN () PREREAD;
@addRoleApplicationSetting(blockCurrentQuantityInTerminal, 'Запретить выгрузку остатков в ТСД', BOOLEAN);
currentBalance (Barcode barcode, Stock st, CustomUser user) = currentBalance(sku(barcode), st) IF NOT blockCurrentQuantityInTerminal(mainRole(user));

filterCurrentQuantityInTerminal 'Загрудать только товары с остатком' = DATA BOOLEAN () PREREAD;
currentBalance (Barcode barcode, Stock stock) = currentBalance(sku(barcode), stock);
activeItem (Barcode barcode) = NOT inactive(sku(barcode));

skipGoodsInReadBase 'Не выгружать товары при выгрузке базы целиком' = DATA BOOLEAN () PREREAD;
imagesInReadBase 'Выгружать изображения товаров при выгрузке базы целиком' = DATA BOOLEAN ();
baseZipDirectory 'Папка для файлов base.zip' = DATA STRING ();

skipGoods = ABSTRACT BOOLEAN (Barcode, Stock, User);
overGoods = ABSTRACT BOOLEAN (Barcode, Stock, User);
filterGoods(Barcode b, Stock st, User u) = b IS Barcode AND st IS Stock AND u IS User AND 
    (((sendAllItems() OR currentPriceInTerminal(b, st)) AND 
    (NOT filterCurrentQuantityInTerminal() OR currentBalance(sku(b), st)) AND
    (NOT sendOnlyActiveItems() OR activeItem(b)) AND
    NOT skipGoods(b, st, u))
    OR overGoods(b, st, u));

extraBarcodes = ABSTRACT STRING (Sku, Stock);

//партии    
countDaysFilterBatches 'Количество дней для выгрузки партий' = DATA INTEGER ();

filterBatch(Batch b, Stock st) = b IS Batch AND st IS Stock AND 
    (sendAllItems() OR currentPriceInTerminal(skuLedger(b, st), st)) AND 
    (NOT filterCurrentQuantityInTerminal() OR currentBalance(skuLedger(b, st), st)) AND
    (NOT sendOnlyActiveItems() OR active(skuLedger(b, st))) AND
    dateTime(b, st) > subtractDay(currentDateTime(), countDaysFilterBatches());
    
extraField = ABSTRACT STRING (Batch, Stock);

//Ассортимент
dataPriceListTypeTerminal = DATA LedgerPriceListType();
defaultPriceListTypeTerminal = ABSTRACT LedgerPriceListType();
priceListTypeTerminal = OVERRIDE dataPriceListTypeTerminal(), defaultPriceListTypeTerminal() MATERIALIZED PREREAD;
namePriceListTypeTerminal 'Вид цен (фильтр ассортимента поставщика)' = name(priceListTypeTerminal());

terminalBarcode = ABSTRACT STRING[100](Sku);
overIdBarcode (Sku sk) = OVERRIDE terminalBarcode(sk), idBarcode(sk);

useOverAssortmentPriceInTerminal = ABSTRACT BOOLEAN (Stock) PREREAD;
overAssortmentPrice = ABSTRACT NUMERIC[16,4] (Sku, Stock, Stock);
price 'Цена' (Sku sku, Stock stock, Stock le) = IF useOverAssortmentPriceInTerminal(stock) 
    THEN overAssortmentPrice(sku, stock, le)
    ELSE prevPriceA(priceListTypeTerminal(), sku, stock, legalEntity(le), currentDateTime()) ; 
maxDeviationPrice 'Макс. цена' = ABSTRACT NUMERIC[29,10] (Sku, Stock, Stock); 
minDeviationPrice 'Мин. цена' = ABSTRACT NUMERIC[29,10] (Sku, Stock, Stock);

quantity = ABSTRACT NUMERIC[16,5] (Sku, Stock, Stock);

supplier = ABSTRACT Stock (Sku, Stock, Stock);
idSupplier(Sku s, Stock st, Stock sup) = id(supplier(s, st,sup));

skipAssortment = ABSTRACT BOOLEAN (Sku, Stock, Stock, STRING[1]);
filterAssortment (Sku sku, Stock stock, Stock le, STRING[1] idApplication) = price(sku, stock, le) AND NOT skipAssortment(sku, stock, le, idApplication);

checkOrderResult = DATA LOCAL STRING();
checkOrder ABSTRACT (STRING);

checkOrderDetail ABSTRACT (STRING, STRING);

changeStatusTerminalOrder ABSTRACT LIST (STRING, STRING, STRING);


EXTEND FORM options
    PROPERTIES() hostTerminalServer, portTerminalServer, restrictLockedUsers,
    sendAllItems, sendOnlyActiveItems, useCurrentQuantityInTerminal, filterCurrentQuantityInTerminal, 
    namePriceListTypeTerminal, skipGoodsInReadBase, imagesInReadBase, baseZipDirectory, countDaysFilterBatches
;
DESIGN options {
    machinery {
        NEW terminalServer {
            caption = 'Настройки ТСД';
            MOVE PROPERTY(hostTerminalServer());
            MOVE PROPERTY(portTerminalServer());
            MOVE PROPERTY(restrictLockedUsers());
            NEW terminalServerPrices {
                caption = 'Цены';
                MOVE PROPERTY(sendAllItems());
                MOVE PROPERTY(sendOnlyActiveItems());
            }
            MOVE PROPERTY(useCurrentQuantityInTerminal());
            MOVE PROPERTY(filterCurrentQuantityInTerminal());
            MOVE PROPERTY(namePriceListTypeTerminal());
            MOVE PROPERTY(skipGoodsInReadBase());
            MOVE PROPERTY(imagesInReadBase());
            MOVE PROPERTY(baseZipDirectory());
            MOVE PROPERTY(countDaysFilterBatches());
        }
    }
}    

restartTerminal 'Перестартовать' INTERNAL 'lsfusion.erp.machinery.terminal.RestartTerminalAction' ();  

EXTEND FORM options PROPERTIES() restartTerminal;
DESIGN options {
    machinery {
        terminalServer {
            MOVE PROPERTY(restartTerminal()) AFTER PROPERTY(portTerminalServer());          
        }
    }
}

templatePriceHtml = DATA FILE ();
loadTemplatePriceHtml 'Загрузить шаблон (цена товара)'()  { INPUT = templatePriceHtml() CHANGE; }
deleteTemplatePriceHtml 'Удалить шаблон (цена товара)'()  { templatePriceHtml() <- NULL; } CONFIRM;

templateNotFoundPriceHtml = DATA FILE ();
loadTemplateNotFoundPriceHtml 'Загрузить шаблон (товар не найден)'()  { INPUT = templateNotFoundPriceHtml() CHANGE; }
deleteTemplateNotFoundPriceHtml 'Удалить шаблон (товар не найден)'()  { templateNotFoundPriceHtml() <- NULL; } CONFIRM;

EXTEND FORM options PROPERTIES() loadTemplatePriceHtml, deleteTemplatePriceHtml, loadTemplateNotFoundPriceHtml, deleteTemplateNotFoundPriceHtml;;

DESIGN options {
    machinery {
        terminalServer {
            NEW androidPriceChecker {
                caption = 'Android прайс-чекер';
                MOVE PROPERTY (loadTemplatePriceHtml());
                MOVE PROPERTY (deleteTemplatePriceHtml());
                MOVE PROPERTY (loadTemplateNotFoundPriceHtml());
                MOVE PROPERTY (deleteTemplateNotFoundPriceHtml());
            }
        }
    }
}

field1Property 'Свойство поле 1' = DATA Property (TerminalHandbookType);
canonicalNameField1Property 'Свойство поле 1' (t) = canonicalName(field1Property(t)) CHARWIDTH 30; 
field2Property 'Свойство поле 2' = DATA Property (TerminalHandbookType);
canonicalNameField2Property 'Свойство поле 2' (t) = canonicalName(field2Property(t)) CHARWIDTH 30; 
field3Property 'Свойство поле 3' = DATA Property (TerminalHandbookType);
canonicalNameField3Property 'Свойство поле 3' (t) = canonicalName(field3Property(t)) CHARWIDTH 30; 

flagsProperty 'Свойство флаги' = DATA Property (TerminalHandbookType);
canonicalNameFlagsProperty 'Свойство флаги' (t) = canonicalName(flagsProperty(t)) CHARWIDTH 30; 

EXTEND FORM terminalHandbookType 
           PROPERTIES(t) canonicalNameField1Property, canonicalNameField2Property, canonicalNameField3Property, canonicalNameFlagsProperty;

EXTEND FORM terminalHandbookTypes 
    PROPERTIES (t) READONLY canonicalNameField1Property, canonicalNameField2Property, canonicalNameField3Property, canonicalNameFlagsProperty;


exportMoves(Sku s, Stock st) {
    EXPORT JSON FROM  numberDocument(SkuLedger move), seriesDocument(move), date(move), dateTime(move), 
        description(move), nameOperationDocument(move), nameLegalEntityDocument(move), nameLegalEntityStockDocument(move), 
        signedQuantity(move), signedPrice(move), signedSum(move) , balanceA(move), priceA(move), sumA(move)
        WHERE sku(move) == s AND stock(move) == st AND isPosted(move) ORDER dateTime(move) DESC;
}

CLASS TerminalFlags {
    FLG_VOP_GROUP 'Включает накопление товаров в документе при вводе',//    0  // 1
    FLG_VOP_NPP 'Включает ввод порядкового номера в документе при вводе',//    1  // 2
    FLG_VOP_ZAYAVKA 'Определяет, что при создании документа будет доступен выбор заявок',//   2  // 4
    FLG_VOP_IN_ZAYAVKA 'Включает контроль наличия товара в документе (работает в паре с флагом 4)',//  3  // 8
    FLG_VOP_IN_ASSORT 'Включает контроль наличия товара в ассортименте поставщика',//  4  // 16
    FLG_VOP_ZEROQUANT_DEFAULT 'При вводе документа нулевое количество по умолчанию',// 5  // 32
    FLG_VOP_NEWGOODS 'Разрешить ввод нового товара',//   6  // 64
    FLG_VOP_NPPDEFAULT 'Фокус по умолчанию на ввод порядкового номера(WinCE). Траектория сканирования (Android)(с флагом 4)',//   7  // 128
    FLG_VOP_ONLINE 'ON-LINE запрос товара',//    8  // 256
    FLG_VOP_OL_INTERNAL_GOODS 'Подтверждение ввода нового товара',// 9  // 512
    FLG_VOP_QUANT_CONTROL 'Контроль количества при вводе',//   10  // 1024
    FLG_VOP_INPPRICE 'Запрос цены',//   11  // 2048
    FLG_VOP_DATE1 'Запрос ввода даты 1',//    12  // 4096
    FLG_VOP_DATE2 'Запрос ввода даты 2',//    13  // 8192
    FLG_VOP_ZEROQUANT 'Разрешить нулевое значение в поле "количество"', //  14  // 16384 
    FLG_VOP_FIELD1 'Запрос дополнительного поля 1', //  15  // 32768 
    FLG_VOP_FIELD2 'Запрос дополнительного поля 2', //   16  // 65536 
    FLG_VOP_FIELD3 'Запрос дополнительного поля 3', //   17  // 131072 
    FLG_VOP_NOQUANT 'Скрыть поле "количество"',  //  18  // 262144 
    FLG_VOP_QUANTZAKAZ 'Подставлять количество из заказа при добавлении позиции',  //  19  // 524288  
    FLG_VOP_ORDER_SINGLE_CHOICE 'Одиночный выбор заказа',  //  20  // 1048576  
    FLG_VOP_DATE1_REQUIRED 'Обязательное поле "Дата1"',  //  21  // 2097152   
    FLG_VOP_DATE2_REQUIRED 'Обязательное поле "Дата2"',  //  22  // 4194304   
    FLG_VOP_FIELD1_REQUIRED 'Обязательное поле 1',  //  23  // 8388608   
    FLG_VOP_FIELD2_REQUIRED 'Обязательное поле 2',  //  24  // 16777216  
    FLG_VOP_FIELD3_REQUIRED 'Обязательное поле 3',  //  25  // 33554432
    FLG_VOP_DATE1_NOEXPIRED 'Запрет ввода даты "Дата1" меньше текущей',  // 26  // 67108864   
    FLG_VOP_DATE2_NOEXPIRED 'Запрет ввода даты "Дата2" меньше текущей',  // 27
    FLG_VOP_EXTRA_QUANT 'Запрос дополнительного количества',   // 28   
    FLG_VOP_DISABLE_EDIT_QUANT 'Запрет радактирования количества в документе',   // 29
    FLG_VOP_DISABLE_EDIT_DOCNUM 'Запрет редактирования номера документа',   // 30       
    FLG_VOP_ENABLE_BATCH 'Включить партионный учет',   // 31 
    FLG_VOP_ENABLE_MARKING 'Маркировка',   // 32 
    FLG_VOP_ENABLE_EXPORT 'Разрешить экспорт документа',   // 33
    FLG_VOP_PRICE_CONTROL 'Проверка ценников', // 34
    FLG_VOP_DATA1_FOR_WEIGHT 'Запрос даты 1 только для весового товара', // 35
    FLG_VOP_ALLOW_NO_ASSORT 'Разрешить ввод товара вне ассортимента поставщика', // 36
    FLG_VOP_NO_FRACTION_FOR_PIECE 'Запретить дробное количество для штучного товара', // 37
    FLG_VOP_SHOW_ONLY_MY_ORDERS 'Выбор только своих заказов', // 38
    FLG_VOP_VOICE_PROMO_ITEM 'Озвучивать акционный товар', // 39
    FLG_VOP_CHECK_ALCO_LOTS 'Контроль алко-марок при расходе', // 40
    FLG_VOP_ALLOW_DELETE_LOTS 'Разрешить удаление марок', // 41
    FLG_VOP_ALLOW_NEW_LOT 'Разрешить ввод новой марки', // 42
    FLG_VOP_HIDE_PRICE 'Не отображать цену товара', // 43
    FLG_VOP_HIDE_BALANCE 'Не отображать остаток товара', // 44
    FLG_VOP_IGNORE_MAIN_BARCODE 'Игнорировать основной штрихкод', // 45
    FLG_VOP_MARKING_MODE_BOX_LOT 'Маркировка (режим коробка-марка)', //46    
    FLG_VOP_ALLOW_TEAM_WORK 'Разрешить совместную работу с документом' // 50
    
}
TABLE terminalFlags (TerminalFlags);

order(TerminalFlags f) = CASE 
    WHEN f = TerminalFlags.FLG_VOP_GROUP THEN 0l // 1
    WHEN f = TerminalFlags.FLG_VOP_NPP THEN 1l  // 2
    WHEN f = TerminalFlags.FLG_VOP_ZAYAVKA THEN 2l  // 4
    WHEN f = TerminalFlags.FLG_VOP_IN_ZAYAVKA THEN 3l  // 8
    WHEN f = TerminalFlags.FLG_VOP_IN_ASSORT THEN 4l  // 16
    WHEN f = TerminalFlags.FLG_VOP_ZEROQUANT_DEFAULT THEN 5l  // 32
    WHEN f = TerminalFlags.FLG_VOP_NEWGOODS THEN 6l  // 64
    WHEN f = TerminalFlags.FLG_VOP_NPPDEFAULT THEN 7l  // 128
    WHEN f = TerminalFlags.FLG_VOP_ONLINE THEN 8l  // 256
    WHEN f = TerminalFlags.FLG_VOP_OL_INTERNAL_GOODS THEN 9l  // 512
    WHEN f = TerminalFlags.FLG_VOP_QUANT_CONTROL THEN 10l  // 1024
    WHEN f = TerminalFlags.FLG_VOP_INPPRICE THEN 11l  // 2048
    WHEN f = TerminalFlags.FLG_VOP_DATE1 THEN 12l  // 4096
    WHEN f = TerminalFlags.FLG_VOP_DATE2 THEN 13l  // 8192
    WHEN f = TerminalFlags.FLG_VOP_ZEROQUANT THEN 14l  // 16384
    WHEN f = TerminalFlags.FLG_VOP_FIELD1 THEN 15l  // 32768
    WHEN f = TerminalFlags.FLG_VOP_FIELD2 THEN 16l  // 65536
    WHEN f = TerminalFlags.FLG_VOP_FIELD3 THEN 17l  // 131072
    WHEN f = TerminalFlags.FLG_VOP_NOQUANT THEN 18l  // 262144
    WHEN f = TerminalFlags.FLG_VOP_QUANTZAKAZ THEN 19l  // 524288 
    WHEN f = TerminalFlags.FLG_VOP_ORDER_SINGLE_CHOICE THEN 20l  // 1048576 
    WHEN f = TerminalFlags.FLG_VOP_DATE1_REQUIRED THEN 21l  // 2097152
    WHEN f = TerminalFlags.FLG_VOP_DATE2_REQUIRED THEN 22l  // 4194304 
    WHEN f = TerminalFlags.FLG_VOP_FIELD1_REQUIRED THEN 23l  // 8388608
    WHEN f = TerminalFlags.FLG_VOP_FIELD2_REQUIRED THEN 24l  // 16777216 
    WHEN f = TerminalFlags.FLG_VOP_FIELD3_REQUIRED THEN 25l  // 33554432 
    WHEN f = TerminalFlags.FLG_VOP_DATE1_NOEXPIRED THEN 26l  // 67108864
    WHEN f = TerminalFlags.FLG_VOP_DATE2_NOEXPIRED THEN 27l // 134217728
    WHEN f = TerminalFlags.FLG_VOP_EXTRA_QUANT THEN 28l
    WHEN f = TerminalFlags.FLG_VOP_DISABLE_EDIT_QUANT THEN 29l
    WHEN f = TerminalFlags.FLG_VOP_DISABLE_EDIT_DOCNUM THEN 30l
    WHEN f = TerminalFlags.FLG_VOP_ENABLE_BATCH THEN 31l // Включить партионный учет 
    WHEN f = TerminalFlags.FLG_VOP_ENABLE_MARKING THEN 32l 
    WHEN f = TerminalFlags.FLG_VOP_ENABLE_EXPORT THEN 33l 
    WHEN f = TerminalFlags.FLG_VOP_PRICE_CONTROL THEN 34l
    WHEN f = TerminalFlags.FLG_VOP_DATA1_FOR_WEIGHT THEN 35l
    WHEN f = TerminalFlags.FLG_VOP_ALLOW_NO_ASSORT THEN 36l
    WHEN f = TerminalFlags.FLG_VOP_NO_FRACTION_FOR_PIECE THEN 37l
    WHEN f = TerminalFlags.FLG_VOP_SHOW_ONLY_MY_ORDERS THEN 38l
    WHEN f = TerminalFlags.FLG_VOP_VOICE_PROMO_ITEM THEN 39l
    WHEN f = TerminalFlags.FLG_VOP_CHECK_ALCO_LOTS THEN 40l
    WHEN f = TerminalFlags.FLG_VOP_ALLOW_DELETE_LOTS THEN 41l
    WHEN f = TerminalFlags.FLG_VOP_ALLOW_NEW_LOT THEN 42l
    WHEN f = TerminalFlags.FLG_VOP_HIDE_PRICE THEN 43l
    WHEN f = TerminalFlags.FLG_VOP_HIDE_BALANCE THEN 44l
    WHEN f = TerminalFlags.FLG_VOP_IGNORE_MAIN_BARCODE THEN 45l
    WHEN f = TerminalFlags.FLG_VOP_MARKING_MODE_BOX_LOT THEN 46l
    WHEN f = TerminalFlags.FLG_VOP_ALLOW_TEAM_WORK THEN 50l MATERIALIZED;
    
flag 'Число'(TerminalFlags f) = LONG (power(2l, order(f)));

in 'Вкл.'  = DATA LOCAL NESTED BOOLEAN (TerminalDocumentType, TerminalFlags);

FORM showFlags 'Флаги'
    OBJECTS t = TerminalDocumentType PANEL
    
    OBJECTS f = TerminalFlags
    PROPERTIES in(t, f), flag(f) READONLY, staticCaption(f) READONLY
    ORDERS flag(f)
;

bitwiseAndLong = FORMULA LONG '$1 & $2';

showFlags 'Показать расшифровку' (TerminalDocumentType t)  { 
    in(t, TerminalFlags f) <- bitwiseAndLong(flag(t), flag(f)) == flag(f);
    NEWSESSION { 
        SHOW showFlags OBJECTS t = t;
        flag(t) <- (GROUP SUM flag(TerminalFlags f) IF in(t, f));
        APPLY;
    }
} ASON CONTEXTMENU flag[TerminalDocumentType];

// log connections

CLASS TerminalConnection 'Подключение терминала';
terminal = DATA Terminal (TerminalConnection) INDEXED;
idTerminal 'Код терминала' (TerminalConnection c) = id(terminal(c));

dateTime 'Время' = DATA DATETIME (TerminalConnection);
dateTime(TerminalConnection t) <- currentDateTime() WHEN SET(t IS TerminalConnection);

date 'Дата' (TerminalConnection c) = DATE(dateTime(c));

user = DATA CustomUser (TerminalConnection);
shortNameUser 'Пользователь' (TerminalConnection c) = shortName(user(c));
nameStockUser 'Склад пользователя' (TerminalConnection c) = nameStock(user(c));

ip 'IP' = DATA STRING[50] (TerminalConnection);
application 'ID приложения' = DATA STRING[50] (TerminalConnection);
applicationVersion 'Версия приложения' = DATA STRING[50] (TerminalConnection);
deviceModel 'Модель терминала' = DATA STRING[50] (TerminalConnection);

processTerminalConnection(Terminal terminal, CustomUser user, STRING[50] ip, STRING[50] application, STRING[50] applicationVersion, STRING[50] deviceModel) {
    lastConnectionTime(terminal) <- currentDateTime();
    lastUser(terminal) <- user;
    applicationVersion(terminal) <- applicationVersion;
    deviceModel(terminal) <- deviceModel;
    NEW tc = TerminalConnection {
        terminal(tc) <- terminal;
        dateTime(tc) <- currentDateTime();
        user(tc) <- user;
        ip(tc) <- ip;
        application(tc) <- application;
        applicationVersion(tc) <- applicationVersion;
        deviceModel(tc) <- deviceModel;
    }
}

EXTEND FORM groupsTerminal
    OBJECTS tc = TerminalConnection
    PROPERTIES(tc) READONLY idTerminal, dateTime, date, shortNameUser, nameStockUser, ip, application, applicationVersion, deviceModel
    FILTERS groupTerminal(terminal(tc)) = grt 
;

DESIGN groupsTerminal {
     pane {
         MOVE BOX(tc) {
             caption = 'Подключения';
         }
     }
}
