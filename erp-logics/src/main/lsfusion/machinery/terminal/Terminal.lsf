MODULE Terminal;

REQUIRE System, Machinery;//, Pricing;

// Группы
CLASS GroupTerminal 'Группы ТСД' : GroupMachinery;
TABLE groupTerminal (GroupTerminal);

stock = DATA Stock (GroupTerminal);
stock (GroupTerminal groupMachinery) += stock(groupMachinery);

inactive 'Неактивный' = DATA BOOLEAN (GroupTerminal);
active 'Активный' (GroupTerminal group) = group IS GroupTerminal AND NOT inactive(group);
inactive(GroupTerminal g) += inactive(g);

// Модели
CLASS TerminalModel 'Модель ТСД' : Model;
TABLE terminalModel (TerminalModel);

name 'Наименование' = DATA ISTRING[110](TerminalModel);

name(TerminalModel model) += name(model) IF model IS TerminalModel;

FORM terminalModel 'Модель ТСД'
    OBJECTS t=TerminalModel PANEL
    PROPERTIES(t) name, note, handler, maxProduct
    EDIT TerminalModel OBJECT t
;

FORM terminalModels 'Модели ТСД'
    OBJECTS m=TerminalModel
    PROPERTIES(m) READONLY name, maxProduct, handler, note
    PROPERTIES(m) NEWSESSION NEW, EDIT, DELETE 
;

// Терминалы
CLASS Terminal 'ТСД' : Machinery;
TABLE terminal (Terminal);

groupTerminal = DATA GroupTerminal (Terminal) NONULL DELETE;
groupMachinery(Terminal machinery) += groupTerminal(machinery);

directory 'Директория обмена с ТСД' = DATA STRING[100] (GroupTerminal) IN base;
directory (GroupTerminal groupMachinery) += directory(groupMachinery);
groupTerminalDirectory (npp) = GROUP MAX GroupTerminal groupTerminal BY directory(groupTerminal);

terminalModel = DATA TerminalModel (GroupTerminal);
model(GroupTerminal groupMachinery) += terminalModel(groupMachinery);

groupTerminal (npp) = GROUP AGGR GroupTerminal groupTerminal WHERE groupTerminal IS GroupTerminal BY npp(groupTerminal);  

FORM terminal 'ТСД'
    OBJECTS t=Terminal PANEL
    PROPERTIES(t) nameGroupMachinery, npp, description, port
    EDIT Terminal OBJECT t
;

// ------------------------------------- Виды справочников ТСД --------------------------------- //

CLASS TerminalHandbookType 'Вид справочника ТСД';
TABLE terminalHandbookType(TerminalHandbookType);

@defineExternalizable(terminalHandbookType, STRING[100]);

name 'Наименование' = DATA STRING[100] (TerminalHandbookType);
propertyID 'Свойство ID' = DATA Property (TerminalHandbookType);
canonicalNamePropertyID 'Свойство ID' (t) = canonicalName(propertyID(t)) CHARWIDTH 30; 
propertyName 'Свойство наименование' = DATA Property (TerminalHandbookType);
canonicalNamePropertyName 'Свойство наименование' (t) = canonicalName(propertyName(t)) CHARWIDTH 30; 

filterProperty 'Свойство для фильтра' = DATA Property (TerminalHandbookType);
canonicalNameFilterProperty 'Свойство для фильтра' (t) = canonicalName(filterProperty(t)) CHARWIDTH 30; 

extInfoProperty 'Свойство для доп. информации' = DATA Property (TerminalHandbookType);
canonicalNameExtInfoProperty 'Свойство для доп. информации' (t) = canonicalName(extInfoProperty(t)) CHARWIDTH 30; 

useForExport 'Использовать для выгрузки заказов' = DATA BOOLEAN (TerminalHandbookType);
skipPrefix 'Не выгружать префикс' = DATA BOOLEAN (TerminalHandbookType);
exportId(TerminalHandbookType t) = IF skipPrefix(t) THEN '' ELSE id(t);
terminalHandbookType() = GROUP MAX TerminalHandbookType t IF useForExport(t);
exportId() = exportId(terminalHandbookType());

FORM terminalHandbookType 'Вид справочника ТСД'
    OBJECTS t = TerminalHandbookType PANEL
    PROPERTIES(t) name, id, canonicalNamePropertyID, canonicalNamePropertyName, canonicalNameFilterProperty, 
                  canonicalNameExtInfoProperty, skipPrefix, useForExport
    EDIT TerminalHandbookType OBJECT t
;

FORM terminalHandbookTypes 'Виды справочников ТСД'
    OBJECTS t=TerminalHandbookType GRID
    PROPERTIES(t) READONLY name, id, canonicalNamePropertyID, canonicalNamePropertyName, canonicalNameFilterProperty, 
                  canonicalNameExtInfoProperty, skipPrefix, useForExport
    PROPERTIES(t) NEWSESSION NEW, EDIT, DELETE 
    LIST TerminalHandbookType OBJECT t
;

// ------------------------ Группы типов документов ------------------------- //
CLASS GroupTerminalDocumentType 'Группа типов документов';
TABLE groupTerminalDocumentType (GroupTerminalDocumentType);
TABLE groupTerminalDocumentTypeUserRole (GroupTerminalDocumentType, UserRole);

name 'Наименование группы' = DATA STRING[200] (GroupTerminalDocumentType) IN base CHARWIDTH 10;
groupTerminalDocumentType 'Группа типов документов' = DATA GroupTerminalDocumentType (GroupTerminal);
nameGroupTerminalDocumentType 'Группа типов документов' (GroupTerminal groupTerminal) = name(groupTerminalDocumentType(groupTerminal));
skip 'Не передавать в онлайн-режиме' = DATA BOOLEAN (GroupTerminalDocumentType) IN base;
//---------------------------- типы документов ----------------------------------------//

CLASS TerminalDocumentType 'Тип документов';
TABLE terminalDocumentType (TerminalDocumentType);

groupTerminalDocumentType 'Группа типов документов' = DATA GroupTerminalDocumentType (TerminalDocumentType) NONULL DELETE;
nameGroupTerminalDocumentType 'Группа типов документов' (TerminalDocumentType terminalDocumentType) = name(groupTerminalDocumentType(terminalDocumentType));
notSkip (TerminalDocumentType terminalDocumentType) = NOT skip(groupTerminalDocumentType(terminalDocumentType));

notSkip (TerminalDocumentType tdt, GroupTerminal gt) = groupTerminalDocumentType(tdt) == groupTerminalDocumentType(gt);

name 'Название' = DATA STRING[200] (TerminalDocumentType) IN base CHARWIDTH 10;
flag 'Флаг' = DATA LONG (TerminalDocumentType) IN base;

@defineExternalizable(terminalDocumentType, STRING[100]);

terminalHandbookType1 = DATA TerminalHandbookType (TerminalDocumentType);
idTerminalHandbookType1 'Код' (TerminalDocumentType terminalDocumentType) = 
    id (terminalHandbookType1(terminalDocumentType));
nameTerminalHandbookType1 'Имя' (TerminalDocumentType terminalDocumentType) = 
    name(terminalHandbookType1(terminalDocumentType));

nameInHandbook1 'Наименование в справочнике 1' = DATA STRING[200] (TerminalDocumentType) IN base;
nameInHandbook1(TerminalDocumentType terminalDocumentType) <- nameTerminalHandbookType1(terminalDocumentType) 
    WHEN CHANGED(terminalHandbookType1(terminalDocumentType));

terminalHandbookType2 = DATA TerminalHandbookType (TerminalDocumentType);
idTerminalHandbookType2 'Код' (TerminalDocumentType terminalDocumentType) = 
    id (terminalHandbookType2(terminalDocumentType));
nameTerminalHandbookType2 'Имя' (TerminalDocumentType terminalDocumentType) = 
    name(terminalHandbookType2(terminalDocumentType));

nameInHandbook2 'Наименование в справочнике 2' = DATA STRING[200] (TerminalDocumentType) IN base;
nameInHandbook2(TerminalDocumentType terminalDocumentType) <- nameTerminalHandbookType2(terminalDocumentType) 
    WHEN CHANGED(terminalHandbookType2(terminalDocumentType));
    
terminalHandbookType1Detail = DATA TerminalHandbookType (TerminalDocumentType);
idTerminalHandbookType1Detail 'Код' (TerminalDocumentType terminalDocumentType) = 
    id (terminalHandbookType1Detail(terminalDocumentType));
nameTerminalHandbookType1Detail 'Имя' (TerminalDocumentType terminalDocumentType) = 
    name(terminalHandbookType1Detail(terminalDocumentType));

nameInHandbook1Detail 'Наименование в справочнике 1 (для строк)' = DATA STRING[200] (TerminalDocumentType) IN base;
nameInHandbook1Detail(TerminalDocumentType terminalDocumentType) <- nameTerminalHandbookType1Detail(terminalDocumentType) 
    WHEN CHANGED(terminalHandbookType1Detail(terminalDocumentType));
    

FORM terminalDocumentTypes
    OBJECTS t = TerminalDocumentType
    PROPERTIES(t) READONLY id, name 
    
    LIST TerminalDocumentType OBJECT t
;

FORM groupTerminalDocumentType 'Группа типов документов'
    OBJECTS gtdt=GroupTerminalDocumentType PANEL
    PROPERTIES(gtdt) name, skip

    OBJECTS tdt=TerminalDocumentType
    PROPERTIES(tdt)   id, name, flag,
                      idTerminalHandbookType1, nameInHandbook1,
                      idTerminalHandbookType2, nameInHandbook2,
                      idTerminalHandbookType1Detail, nameInHandbook1Detail,
                      NEW, DELETE GRID

    FILTERS groupTerminalDocumentType(tdt) == gtdt

    EDIT GroupTerminalDocumentType OBJECT gtdt
;

FORM groupTerminalDocumentTypes 'Группы типов документов'
    OBJECTS gtdt=GroupTerminalDocumentType
    PROPERTIES(gtdt) READONLY name , skip
    PROPERTIES(gtdt) NEWSESSION NEW, EDIT, DELETE 

    OBJECTS tdt=TerminalDocumentType
    PROPERTIES(tdt) READONLY id, name, flag,
                             idTerminalHandbookType1, nameInHandbook1,
                             idTerminalHandbookType2, nameInHandbook2,
                             idTerminalHandbookType1Detail, nameInHandbook1Detail

    FILTERS groupTerminalDocumentType (tdt) == gtdt
    
    LIST GroupTerminalDocumentType OBJECT gtdt
;

DESIGN groupTerminalDocumentTypes {
    NEW topContainer{
        type = SPLITV;
        fill = 1;

        MOVE BOX(gtdt);
        MOVE BOX(tdt);
    }
    MOVE TOOLBARBOX;
}

FORM groupTerminal 'Группа ТСД'
    OBJECTS grt=GroupTerminal PANEL
    PROPERTIES(grt) npp, nameStock, name,
                    nameGroupTerminalDocumentType, nameModel,
                    filterSku, showFilterSku SHOWIF filterSku(grt),
                    namePriceListType, directory, inactive

    OBJECTS t=Terminal
    PROPERTIES(t)   nameGroupMachinery, npp, description, port, NEW, DELETE GRID

    FILTERGROUP filters3
        FILTER 'Показывать только для данной группы' groupTerminal(t) == grt 'F10' DEFAULT

    EDIT GroupTerminal OBJECT grt
;

FORM groupsTerminal 'Группы ТСД'
    OBJECTS grt=GroupTerminal, t=Terminal
    PROPERTIES(grt)  READONLY active, npp, nameStock, name,
                     nameGroupTerminalDocumentType, nameModel,
                     filterSku, showFilterSku SHOWIF filterSku(grt) GRID,
                     namePriceListType, directory

    PROPERTIES(grt)  NEWSESSION NEW, EDIT, DELETE 

    PROPERTIES(t) READONLY npp, description, port
    FILTERS groupTerminal(t) == grt
    
    FILTERGROUP active1
        FILTER 'Активные' active(grt) 'F5' DEFAULT       
;

DESIGN groupsTerminal {
    NEW topContainer {
        type = SPLITV;
        fill = 1;

        MOVE BOX(grt);
        NEW pane {
            type = TABBED;
            fill = 1;
            MOVE BOX(t) { 
                caption = 'Терминалы';
            }
        }
    }
    MOVE TOOLBARBOX;
}

// ------------------------------------ Документы ТСД ------------------------------- //

CLASS TerminalDocument 'Документ ТСД';
TABLE terminalDocument (TerminalDocument);
TABLE sessionTerminalDocument (Session, TerminalDocument);

TABLE terminalDocumentId(ISTRING[1000]);

id 'Код' = DATA STRING[1000] (TerminalDocument) IN id INDEXED CHARWIDTH 10;
terminalDocument (id) = GROUP AGGR (TerminalDocument td) BY id (td) MATERIALIZED TABLE terminalDocumentId;

title 'Имя' = DATA STRING[1000] (TerminalDocument) IN base CHARWIDTH 20;
comment 'Комментарий' = DATA STRING[100] (TerminalDocument) IN base CHARWIDTH 20;
quantity 'Количество' = DATA NUMERIC[14,3] (TerminalDocument) IN base;
idTerminalHandbookType1 'Код в справочнике 1' = DATA STRING[100] (TerminalDocument) IN base CHARWIDTH 10;
idTerminalHandbookType2 'Код в справочнике 2' = DATA STRING[100] (TerminalDocument) IN base CHARWIDTH 10;

terminalDocumentType = DATA TerminalDocumentType (TerminalDocument) INDEXED;
nameTerminalDocumentType 'Тип документа' (TerminalDocument d) = name(terminalDocumentType(d));

groupTerminal = DATA GroupTerminal (TerminalDocument);
nameGroupTerminal 'Группа ТСД' (TerminalDocument terminalDocument) = name(groupTerminal(terminalDocument));

idTerminalDocumentType (TerminalDocument terminalDocument) = id (terminalDocumentType (terminalDocument));

used 'Использован' (terminalDocument) = DATA BOOLEAN (TerminalDocument) IN base;
notUsed 'Неиспользован' (TerminalDocument terminalDocument) = terminalDocument IS TerminalDocument AND NOT used(terminalDocument) MATERIALIZED INDEXED;

createdUser = DATA CustomUser (TerminalDocument);
createdNameUser 'Создан пользователем' (TerminalDocument td) = name[Contact](createdUser(td)) CHARWIDTH 10 IN created;
createdUser (TerminalDocument o) <- currentUser() WHEN SET(o IS TerminalDocument);

createdTerminal = DATA Terminal (TerminalDocument);

dataStock = DATA Stock (TerminalDocument);
stock (TerminalDocument document) = OVERRIDE dataStock(document), stock(groupTerminal(document)) MATERIALIZED;
INDEX stock(TerminalDocument d), d;

nameStock 'Склад' (TerminalDocument document) = name(stock (document)) IN documentHeader;
dataStock(TerminalDocument d) <- stock(createdUser(d)) WHEN SET (createdUser(d));

createdTime 'Время создания'= DATA DATETIME (TerminalDocument) IN created;
createdTime (TerminalDocument o) <- currentDateTime() WHEN SET(o IS TerminalDocument);

terminalDocument = DATA TerminalDocument(TerminalDocumentDetail) NONULL DELETE INDEXED;

@defineDocumentTimePrefix(terminalDocument, , ' документа');
@deriveDocumentHeaderTimePrefix(TerminalDocument, );

CLASS TerminalDocumentDetail 'Строка документа ТСД';
TABLE terminalDocumentDetail (TerminalDocumentDetail);
TABLE sessionTerminalDocumentDetail (Session, TerminalDocumentDetail);

id 'Код' = DATA STRING[1000] (TerminalDocumentDetail) IN id INDEXED CHARWIDTH 10;

number 'Номер' = DATA INTEGER (TerminalDocumentDetail) IN base;
index 'Номер строки ' (TerminalDocumentDetail d) =
    PARTITION SUM 1
    ORDER number(d), d BY terminalDocument(d) CHARWIDTH 4;
barcode 'Штрихкод' = DATA STRING[30] (TerminalDocumentDetail) IN base;
quantity 'Количество' = DATA NUMERIC[14,3] (TerminalDocumentDetail) IN base;
price 'Цена' = DATA NUMERIC[16,4] (TerminalDocumentDetail) IN base;
sum 'Сумма' = DATA NUMERIC[18,4] (TerminalDocumentDetail) IN base;
sum(TerminalDocumentDetail d) <- round2(quantity(d) * price(d)) WHEN CHANGED(quantity(d)) OR CHANGED(price(d)); 

comment 'Комментарий' = DATA STRING[100] (TerminalDocumentDetail) IN base;
dateTimeScan 'Время сканирования' = DATA DATETIME (TerminalDocumentDetail) IN base;

extraDate1 'Дата 1' = DATA DATE (TerminalDocumentDetail) IN base;
extraDate2 'Дата 2' = DATA DATE (TerminalDocumentDetail) IN base;
extraField1 'Поле 1' = DATA STRING[100] (TerminalDocumentDetail) IN base;
extraField2 'Поле 2' = DATA STRING[100] (TerminalDocumentDetail) IN base;
extraField3 'Поле 3' = DATA STRING[100] (TerminalDocumentDetail) IN base;
parentDocument 'Родительские документы' = DATA STRING (TerminalDocument) IN base;
extraQuantity 'Доп. количество' = DATA NUMERIC[14,3] (TerminalDocumentDetail) IN base;
batch 'Партии' = DATA STRING (TerminalDocumentDetail) IN base;
marking 'Маркировка' = DATA STRING (TerminalDocumentDetail) IN base;
raplace 'Замена' = DATA STRING (TerminalDocumentDetail) IN base;
ana1 'Аналитика 1' = DATA STRING (TerminalDocumentDetail) IN base;
ana2 'Аналитика 2' = DATA STRING (TerminalDocumentDetail) IN base;
image 'Изображение' = DATA IMAGEFILE (TerminalDocumentDetail) IN base;

stock 'Склад' (TerminalDocumentDetail detail) = stock(terminalDocument(detail)) MATERIALIZED INDEXED;  
nameStock 'Склад' (TerminalDocumentDetail detail) = name(stock(detail));  

sku = DATA Sku (TerminalDocumentDetail) INDEXED;
nameSku 'Наименование товара' (TerminalDocumentDetail d) = name(sku(d));
idSku 'Код товара' (TerminalDocumentDetail d) = id(sku(d));
nameUOMSku 'Ед. изм.' (TerminalDocumentDetail d) = nameUOM(sku(d));
dataName 'Наименование' = DATA STRING[200] (TerminalDocumentDetail);
name 'Наименование' (TerminalDocumentDetail d) = OVERRIDE dataName(d), nameSku(d) IN base;

terminalDocumentDetail(terminalDocument, sku) = GROUP MAX TerminalDocumentDetail detail BY terminalDocument(detail), sku(detail);

WHEN LOCAL SETCHANGED(barcode(TerminalDocumentDetail d)) DO {
    sku(d) <- OVERRIDE skuBarcode(barcode(d)), sku(barcode(d));
}

terminalIdTerminalId (documentDetail, document) = GROUP AGGR TerminalDocumentDetail terminalDocumentDetail 
    BY id (terminalDocument(terminalDocumentDetail)), id(terminalDocumentDetail);    

description 'Название документа' (TerminalDocument o) =
    'Документ ТСД' + ' № ' + id(o) + ' от ' + date(o) CHARWIDTH 30;
    
@defineDocumentIs(TerminalDocument, TerminalDocumentDetail);
@defineDocumentHeaderClosed(TerminalDocument);
INDEX isOpened(TerminalDocument o), o;

@defineDocumentHeaderCount(terminalDocument);
@defineDocumentHeaderQuantity(terminalDocument);
sumTerminalDocumentDetail '{document.sum.of}' (terminalDocument) = GROUP SUM sum(TerminalDocumentDetail idetail) BY terminalDocument(idetail) CHARWIDTH 10 MATERIALIZED IN documentSum;

include 'Отм.' = DATA LOCAL BOOLEAN (TerminalDocument);
countInclide = GROUP SUM 1 IF include(TerminalDocument td);

replace 'Объединить' (TerminalDocument td) {
    NEWSESSION NESTED (include[TerminalDocument]){
        IF NOT countInclide() THEN {
            MESSAGE 'Не выбраты документы для объединения';
            RETURN;
        }
        
        include(td) <- TRUE;
        
        IF GROUP MAX (PARTITION SUM 1 BY stock(TerminalDocument tdi), terminalDocumentType(tdi) IF include(tdi)) != countInclide() THEN {
            MESSAGE 'Выбранные документы относятся к разным складам или разным типам';
            RETURN;
        }
        
        terminalDocument(TerminalDocumentDetail tdd) <- td WHERE include(terminalDocument(tdd));
        
        LOCAL quantity = NUMERIC[14,3] (STRING[15]);
        quantity(STRING[15] bar) <- GROUP SUM quantity(TerminalDocumentDetail tdd) IF barcode(tdd) = bar AND terminalDocument(tdd) = td;
        
        DELETE TerminalDocumentDetail tdd WHERE terminalDocument(tdd) = td AND (PARTITION SUM 1 ORDER tdd BY terminalDocument(tdd), barcode(tdd)) > 1;
        
        quantity(TerminalDocumentDetail tdd) <- quantity(barcode(tdd)) WHERE terminalDocument(tdd) = td;
    
        DELETE TerminalDocument tdi WHERE include(tdi) AND NOT td = tdi;
        
        APPLY;
    }
    
} TOOLBAR;

// ----------------------------------------------- Формы документов ------------------------------------------ //

FORM terminalDocument 'Документ ТСД'
    OBJECTS td=TerminalDocument PANEL
    PROPERTIES(td)  id, nameGroupTerminal, nameStock, date, time,
                    nameTerminalDocumentType, idTerminalHandbookType1,
                    idTerminalHandbookType2, title, parentDocument, comment, quantity, sumTerminalDocumentDetail, 
                    used, createdNameUser READONLY

    OBJECTS tdd=TerminalDocumentDetail
    PROPERTIES(tdd) number, barcode, name, quantity, price, sum, comment, dateTimeScan, extraQuantity,
                    extraDate1, extraDate2, extraField1, extraField2, extraField3, batch,ana1,ana2,image,
                    NEW, deletetdd=DELETE GRID

    FILTERS terminalDocument(tdd) == td

    EDIT TerminalDocument OBJECT td;
;

DESIGN terminalDocument {
    OBJECTS {
        BOX(td){
            type = CONTAINERV;
    
            NEW row1 {
                type = CONTAINERH;
                MOVE PROPERTY(id(td));
                MOVE PROPERTY(nameGroupTerminal(td));
                MOVE PROPERTY(nameTerminalDocumentType(td));
                MOVE PROPERTY(title(td));
                MOVE PROPERTY(parentDocument(td));
                MOVE PROPERTY(comment(td));
                MOVE PROPERTY(createdNameUser(td));
            }
            NEW row2 {
                type = CONTAINERH;
                MOVE PROPERTY(idTerminalHandbookType1(td));
                MOVE PROPERTY(idTerminalHandbookType2(td));
                MOVE PROPERTY(quantity(td));
                MOVE PROPERTY(sumTerminalDocumentDetail(td));
                MOVE PROPERTY(used(td));
            }
        }
        MOVE BOX(tdd);
    }
}

FORM terminalDocumentPrint 'Документ ТСД'
    OBJECTS td=TerminalDocument PANEL SUBREPORT 
    PROPERTIES(td)  READONLY id, date, time, nameGroupTerminal, 
                    nameTerminalDocumentType, idTerminalHandbookType1, idTerminalHandbookType2,
                    title, comment, quantity, countTerminalDocumentDetail, 
                    quantityTerminalDocumentDetail, sumTerminalDocumentDetail, createdNameUser , createdTime 

    OBJECTS tdd=TerminalDocumentDetail
    PROPERTIES(tdd) READONLY number, barcode, name, price, quantity, sum, dateTimeScan
    ORDERS number(tdd)

    FILTERS terminalDocument(tdd) == td
;
terminalDocumentPrint 'Печать документа ТСД' (TerminalDocument td)  { PRINT terminalDocumentPrint OBJECTS td = td; }  IMAGE 'print.png' IN print;

in = DATA LOCAL BOOLEAN (TerminalDocumentType);
filterStock = DATA LOCAL Stock ();

backgroundTerminalDocumentDetail = ABSTRACT CASE COLOR (TerminalDocumentDetail);

FORM terminalDocuments 'Документы ТСД' AUTOREFRESH 60
    OBJECTS td=TerminalDocument
    PROPERTIES(td)  include
    PROPERTIES(td)  READONLY id, date, time, nameGroupTerminal, nameStock,
                    nameTerminalDocumentType, idTerminalHandbookType1, idTerminalHandbookType2,
                    title, parentDocument, comment, quantity, countTerminalDocumentDetail, 
                    quantityTerminalDocumentDetail, sumTerminalDocumentDetail, createdNameUser PANEL, createdTime PANEL
    PROPERTIES(td)  NEWSESSION NEW, EDIT, DELETE 
    PROPERTIES(td)             replace
    PROPERTIES (td) close SHOWIF isOpened(td), open SHOWIF isClosed(td)
    FILTERS in(terminalDocumentType(td)) OR (td IS TerminalDocument AND NOT (GROUP SUM 1 IF in(TerminalDocumentType t))),
            stock(td) == filterStock() OR (td IS TerminalDocument AND NOT filterStock())
    OBJECTS tdd=TerminalDocumentDetail
    PROPERTIES(tdd) READONLY BACKGROUND backgroundTerminalDocumentDetail(tdd) id, number, barcode, name, quantity, price, sum, 
        comment, dateTimeScan, extraQuantity, extraDate1, extraDate2, extraField1, extraField2, extraField3, batch, ana1, ana2, image

    FILTERS terminalDocument(tdd) == td
    FILTERGROUP filterUse
        FILTER 'Неиспользованные' notUsed(td) 'F10' DEFAULT
        
    FILTERGROUP open FILTER 'Открыт' isOpened(td) 'F6' DEFAULT
    PROPERTIES terminalDocumentPrint(td)  
;

@extendFormFilterAccessStock(TerminalDocument, td, terminalDocuments, stock, company);


DESIGN terminalDocuments {
    BOX {
        size = (1024, 768);
        NEW topContainer{
            type = SPLITV;
            fill = 1;

            MOVE BOX(td);
            NEW documentDetail {
                fill = 1;
                type = TABBED;

                MOVE BOX(tdd) {
                    fill = 1;
                    caption = 'Спецификация';
                }
                NEW documentHistory {
                    caption = 'История';
                    type = CONTAINERV;
                    MOVE GROUP(created,td);
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                        type = CONTAINERV;
                        MOVE GROUP(print,td);
                    }
                }
                NEW actionContainer {
                    caption = 'Действия';
                    type = CONTAINERH;
                    NEW createdContainer {
                        caption = 'Создание на основе';
                        type = CONTAINERV;
                    }
                    NEW machineryContainer {
                        caption = 'Загрузка';
                        type = CONTAINERV;
                    }
                }
            }
        }
    }
    MOVE TOOLBARBOX;
}

//----------------------------- Макросы для документов --------------------------------//

//META defineAddDetailDialogTerminal (object, skuProp, stockProp)
//    @defineAddDetailDialogTerminalInner (object, ###object, skuProp, stockProp);
//END
//
//META defineAddDetailDialogTerminalInner (object, class, skuProp, stockProp)
//    in = ABSTRACT BOOLEAN (TerminalDocumentType, class);
//    overAddDialogTerminal##class  ABSTRACT ( class, TerminalDocument);
//    overAddDetailDialogTerminal##class##Detail  ABSTRACT ( class##Detail, TerminalDocumentDetail);
//    
//    addDetailDialogTerminal##class##Detail 'Импорт из ТСД' (class object)  { 
//        in(TerminalDocumentType t) <- in(t, object);
//        filterStock() <- stockProp(object);
//        
//        DIALOG terminalDocuments OBJECTS td INPUT DO {
//            used(td) <- TRUE ;
//            overAddDialogTerminal##class(object, td);
//
//            FOR terminalDocument(TerminalDocumentDetail tdd) == td ORDER number(tdd) NEW o = class##Detail DO {
//                object(o) <- object;
//                skuProp(o) <- sku(tdd);
//                quantity(o) <- quantity(tdd);
//                overAddDetailDialogTerminal##class##Detail(o, tdd);
//            }
//        }
//    } TOOLBAR;
//END

META defineAddDetailDialogTerminal (object, skuProp, stockProp)
    @defineAddDetailDialogTerminalInner (object, ###object, skuProp, stockProp);
END

processed = DATA LOCAL BOOLEAN(TerminalDocument);

META defineAddDetailDialogTerminalInner (object, class, skuProp, stockProp)
    in = ABSTRACT BOOLEAN (TerminalDocumentType, class);
    overAddDialogTerminal##class  ABSTRACT LIST ( class, TerminalDocument);
    overAddDetailDialogTerminal##class##Detail  ABSTRACT LIST ( class##Detail, TerminalDocumentDetail);
    beforeAddDialogTerminal##class  ABSTRACT LIST ( class);

    addDetailDialogTerminal##class##Detail 'Импорт из ТСД' (class object)  { 
        IF isPosted(object) THEN {
            MESSAGE 'Вы пытаетесь импортировать в проведенный документ. Распроведите его.';
        } ELSE {
            in(TerminalDocumentType t) <- in(t, object);
            filterStock() <- stockProp(object);
            beforeAddDialogTerminal##class (object);
            DIALOG terminalDocuments OBJECTS td INPUT DO {
                IF NOT (GROUP SUM 1 IF include(TerminalDocument ttd)) THEN {
                    include(td) <- TRUE;
                }
                used(td) <- TRUE;
                overAddDialogTerminal##class(object, td);
                
                IF explicitBatchLedger(stockProp(object)) THEN {      
                    used(TerminalDocument t) <- TRUE WHERE include(t);
                    LOCAL quantity = NUMERIC[16,5] (Sku);
                    quantity(Sku sku) <- [GROUP SUM quantity(TerminalDocumentDetail tdd) IF include(terminalDocument(tdd)) BY skuProp(tdd)](sku);   
                    FOR [GROUP SUM quantity(TerminalDocumentDetail tdd) IF include(terminalDocument(tdd)) BY skuProp(tdd)](Sku sku) DO {
                        FOR explicitBatchLedger(stockProp(object)) AND quantity(sku(Batch b)) AND sku(b) == sku AND 
                            prevAvailableQuantity(b, stockProp(object)) (-) [GROUP SUM quantity(class##Detail detail) BY batch(detail), object(detail)](b, object) > 0.0 
                            ORDER dateTime(b) NEW o = class##Detail DO {
                            object(o) <- object;
                            sku(o) <- sku;
                            quantity(o) <- IF quantity(sku(b)) > (prevAvailableQuantity(b, stockProp(object)) (-) [GROUP SUM quantity(class##Detail detail) BY batch(detail), object(detail)](b, object))
                                THEN prevAvailableQuantity(b, stockProp(object)) (-) [GROUP SUM quantity(class##Detail detail) BY batch(detail), object(detail)](b, object)
                                ELSE quantity(sku(b));
                            IF NOT skipFillBatch(o) THEN {
                                batch(o) <- b;
                            }                             
                            quantity(sku) <- quantity(sku) (-) quantity(o);
                            IF sku IS Sku AND NOT quantity(sku)
                                THEN BREAK;
                        } 
                        FOR quantity(sku) NEW o = class##Detail DO {
                            object(o) <- object;
                            sku(o) <- sku; 
                            quantity(o) <- quantity(sku);   
                            quantity(sku) <- quantity(sku) (-) quantity(o); 
                            IF sku IS Sku AND NOT quantity(sku)
                                THEN BREAK;                                                                         
                        }                           
                    } 
                }    
                ELSE {   
                    FOR terminalDocument(TerminalDocumentDetail tdd) == td AND NOT processed(td) ORDER number(tdd) NEW o = class##Detail DO {
                        object(o) <- object;
                        skuProp(o) <- sku(tdd);
                        quantity(o) <- quantity(tdd);
                        overAddDetailDialogTerminal##class##Detail(o, tdd);
                    }                    
                }
                include(TerminalDocument t) <- NULL;
            }
        }   
    } TOOLBAR;        
END

// ------------------------------------------------ Стандартные значения ------------------------------------ //

terminalSID (model) = GROUP MAX TerminalModel tmodel BY sid (tmodel) IF tmodel IS TerminalModel;

// Модели терминалов сбора данных
loadDefaultTerminalModel 'Добавить модель терминала'(STRING[20] sid, ISTRING[110] name, STRING[200] handler)  { 
    IF NOT terminalSID(sid) THEN {
        NEW tm = TerminalModel {
             sid(tm) <- sid;   
             name(tm) <- name;
             handler(tm) <- handler;
        }
    }
}

loadDefaultTerminalModels 'Загрузить стандартные модели ТСД'()  ABSTRACT LIST ( ) IN loadDefault;
@implementLoadDefaultData(loadDefaultTerminalModels);

// Виды справочников терминалов сбора данных
loadDefaultTerminalHandbookType 'Добавить вид справочника ТСД'(STRING[100] n, STRING[100] s)  { 
    NEW t = TerminalHandbookType {
        name(t) <- n;
        id(t) <- s;
    }
}

loadDefaultTerminalHandbookTypes 'Загрузить стандартные виды справочников ТСД'()  { 
    loadDefaultTerminalHandbookType('Организация', 'ПС');
} IN loadDefault;

@implementLoadDefaultData(loadDefaultTerminalHandbookTypes);

// Типы документов терминалов сбора данных
loadDefault 'Добавить тип документа ТСД'(STRING[200] nameString, GroupTerminalDocumentType gtdt, STRING[100] idTypeString, LONG flagLong, STRING[100] handbook1String, STRING[100] handbook2String)  { 
    NEW tdt = TerminalDocumentType {
        name(tdt) <- nameString;
        groupTerminalDocumentType(tdt) <- gtdt;
        terminalHandbookType1(tdt) <- terminalHandbookType(handbook1String);
        terminalHandbookType2(tdt) <- terminalHandbookType(handbook2String);
        id(tdt) <- idTypeString;
        flag(tdt) <-flagLong;
    }
}

loadDefaultTerminalDocumentTypes 'Загрузить стандартные типы документов ТСД'()  { 
    NEW gtdt = GroupTerminalDocumentType {
        name(gtdt) <- 'Группа типов документов';
        EXEC loadDefault('Инвентаризация', gtdt, '01', 31l, ' ', ' ');
        EXEC loadDefault('Приход', gtdt, '02', 31l, '01', ' ');
        EXEC loadDefault('Отгрузка по безналичному расчёту', gtdt, '03', 31l, '01', ' ');
    }
} IN loadDefault;

@implementLoadDefaultData(loadDefaultTerminalDocumentTypes);

// ------------------------------------------ Генерация групп терминалов сбора данных ------------------------------ //
loadDefault 'Сгенерировать группу терминалов'(Stock stock, TerminalModel model, GroupTerminalDocumentType gtdt, INTEGER num)  { 
    NEW g = GroupTerminal {
        stock(g) <- stock;
        name(g) <- 'Группа ТСД по умолчанию';
        groupTerminalDocumentType(g) <- gtdt;

        LOCAL numTerminal = INTEGER();
        numTerminal() <- 0;
        WHILE numTerminal() < num DO {
            NEW t = Terminal {
                groupTerminal(t) <- g;
                numTerminal() <- numTerminal() + 1;
                npp(t) <- numTerminal();
                terminalModel(g) <- model;
            }
        }
    }
}

EXTEND FORM defaultData
    OBJECTS         tm=TerminalModel PANEL
    PROPERTIES(tm)  SELECTOR name

    OBJECTS         gtdt=GroupTerminalDocumentType PANEL
    PROPERTIES(gtdt) SELECTOR name

    OBJECTS         cTerminal=INTEGER PANEL
    PROPERTIES(cTerminal)   intValueTerminal = VALUE
    PROPERTIES (s, tm, gtdt, cTerminal)  loadDefault
;

DESIGN defaultData {
    PROPERTY(name(tm)) {
        caption = 'Модель ТСД';
    }
    PROPERTY(name(gtdt)) {
        caption = 'Группа типов документов';
    }
    PROPERTY(intValueTerminal) {
        caption = 'Количество ТСД';
    }
    machinery {
        NEW terminal {
            caption = 'ТСД';
            MOVE PROPERTY(name(tm));
            MOVE PROPERTY(name(gtdt));
            MOVE PROPERTY(intValueTerminal);
            MOVE PROPERTY(loadDefault(s,tm,gtdt,cTerminal));
        }
    }
}

NAVIGATOR {
    machineryNavigator {
        NEW FOLDER terminalNavigator 'Терминалы сбора данных' {
            NEW terminalDocuments;
            NEW groupsTerminal;
            NEW terminalModels;
            NEW groupTerminalDocumentTypes;
            NEW terminalHandbookTypes;
        }
    }
}

countDaysClearTerminalDocument 'За сколько дней хранить документы ТСД' = DATA INTEGER (); 

skipDelete = ABSTRACT VALUE BOOLEAN (TerminalDocument);

EXTEND FORM options PROPERTIES countDaysClearTerminalDocument();
DESIGN options { log { MOVE PROPERTY(countDaysClearTerminalDocument());} }    
        
clearApplicationLog () + { 
	NEWSESSION {
	    IF countDaysClearTerminalDocument() THEN {
	        DELETE TerminalDocument d WHERE d IS TerminalDocument AND date(d) <= subtract(currentDate(), countDaysClearTerminalDocument()) AND NOT skipDelete(d);
	        apply();
	    }
	}
}

access 'Доступ' = DATA BOOLEAN (UserRole, GroupTerminalDocumentType);

EXTEND FORM securityPolicy
    OBJECTS g = GroupTerminalDocumentType
    PROPERTIES name(g) READONLY, access(ur, g)
;

DESIGN securityPolicy {
    rolePolicyContainer {
        MOVE BOX (g);
    }
}

access (TerminalDocumentType t, CustomUser u) = GROUP SUM 1 IF access(UserRole r, groupTerminalDocumentType(t)) AND has(u, r);
accessAll (CustomUser u) = NOT (GROUP SUM 1 IF access(UserRole r, GroupTerminalDocumentType g) AND has(u, r));

notSkip 'Доступно' (TerminalDocumentType t, CustomUser u) = NOT skip(groupTerminalDocumentType(t)) AND (access(t, u) OR accessAll(u));

//-------------------------------------------------- Импорт поставленного кол-ва --------------------------------------------------

META defineAddToDetailDialogTerminal (object, skuProp, stockProp, NS)
    @defineAddToDetailDialogTerminalInner (object, ###object, skuProp, stockProp, NS);
END

META defineAddToDetailDialogTerminalInner (object, class, skuProp, stockProp, NS)
    skipCreateDetailAddToDetailDialogTerminal 'Не создавать строки при импорте поставленного кол-ва из ТСД' = DATA BOOLEAN();
    
    EXTEND FORM options
        PROPERTIES() NS##skipCreateDetailAddToDetailDialogTerminal = skipCreateDetailAddToDetailDialogTerminal
    ;
    
    DESIGN options {
        invoice##NS {
            MOVE PROPERTY(NS##skipCreateDetailAddToDetailDialogTerminal);
        }
    }
    
    inAdd = ABSTRACT BOOLEAN (TerminalDocumentType, class);
    overAddDialogTerminalTo##class  ABSTRACT LIST ( class, TerminalDocument);

    addDetailDialogTerminalTo##class##Detail 'Импорт из ТСД' (class object)  { 
        in(TerminalDocumentType t) <- inAdd(t, object);
        DIALOG terminalDocuments OBJECTS td INPUT DO {
            IF NOT (GROUP SUM 1 IF include(TerminalDocument ttd)) THEN {
                include(td) <- TRUE;
            }
            used(TerminalDocument t) <- TRUE WHERE include(t);
            overAddDialogTerminalTo##class(userInvoice, td);
    
            LOCAL quantity = NUMERIC[16,5] (Sku, class);
            quantity(Sku sku, object) <- [GROUP SUM quantity(TerminalDocumentDetail tdd) IF include(terminalDocument(tdd)) BY skuProp(tdd)](sku);
            FOR invoice(class##Detail o) == object DO {
                shipmentQuantity(o) <- OVERRIDE (PARTITION UNGROUP quantity LIMIT STRICT quantity(o) IF invoice(o) == object ORDER index(o), o BY sku(o), invoice(o)), 0.0;
            }
            IF NOT skipCreateDetailAddToDetailDialogTerminal() THEN {
                FOR quantity(Sku sku, object) AND NOT (GROUP SUM 1 IF invoice(class##Detail o) == object AND sku(o) == sku) NEW d = UserInvoiceDetail DO {
                    userInvoice(d) <- userInvoice;
                    sku(d) <- sku;
                    quantity(d) <- 0.0;
                    shipmentQuantity(d) <- quantity(sku, object);
                }
                FOR INTEGER n == (GROUP SUM 1 IF barcode(TerminalDocumentDetail tdd) AND NOT skuProp(tdd) AND include(terminalDocument(tdd))) DO {
                    MESSAGE 'В системе не найдено ' + n + ' товаров со шрихкодами: ' +
                        (GROUP CONCAT barcode(TerminalDocumentDetail tdd) IF include(terminalDocument(tdd)) AND NOT skuProp(tdd),', ' ORDER barcode(tdd), tdd);
                }
            }
                
            include(TerminalDocument t) <- NULL;
        }  
    } TOOLBAR;        
END