MODULE PriceChecker;

REQUIRE System, Machinery;

// Группы
CLASS GroupPriceChecker 'Группы прайс чекеров' : GroupMachinery;

stock = DATA Stock (GroupPriceChecker);
stock (GroupPriceChecker groupMachinery) += stock(groupMachinery);

CONSTRAINT stock(GroupPriceChecker s) AND NOT isCompany(stock(s))
    CHECKED BY stock[GroupPriceChecker]
        MESSAGE 'Для группы прайс-чекеров должен быть задан склад, который принадлежит компании.';
        
inactive 'Неактивный' = DATA BOOLEAN (GroupPriceChecker);
active 'Активный' (GroupPriceChecker group) = group IS GroupPriceChecker AND NOT inactive(group);
inactive(GroupPriceChecker g) += inactive(g);

// Модели
CLASS PriceCheckerModel 'Модель прайс чекеров' : Model;

name 'Наименование' = DATA ISTRING[110](PriceCheckerModel);

name(PriceCheckerModel model) += name(model) IF model IS PriceCheckerModel;

FORM priceCheckerModel 'Модель прайс чекера'
    OBJECTS ch=PriceCheckerModel PANEL
    PROPERTIES(ch) name, note, handler, maxProduct
    EDIT PriceCheckerModel OBJECT ch
;

FORM priceCheckerModels 'Модели прайс чекеров'
    OBJECTS m=PriceCheckerModel
    PROPERTIES(m) READONLY name, maxProduct, handler, note
    PROPERTIES(m) NEWSESSION NEW, EDIT, DELETE 
;

// Прайс-чекеры
CLASS PriceChecker 'Прайс чекер' : Machinery;
TABLE priceCheck(PriceChecker);
is (GroupPriceChecker machinery) = machinery IS GroupPriceChecker;

groupPriceChecker = DATA GroupPriceChecker (PriceChecker) NONULL DELETE;
groupMachinery(PriceChecker machinery) += groupPriceChecker(machinery);

priceCheckerModel = DATA PriceCheckerModel (GroupPriceChecker);
model(GroupPriceChecker groupMachinery) += priceCheckerModel(groupMachinery);

groupPriceChecker (npp) = GROUP AGGR GroupPriceChecker groupPriceChecker WHERE groupPriceChecker IS GroupPriceChecker BY npp(groupPriceChecker);  

ip 'IP' = DATA STRING[100] (PriceChecker);
priceChecker (ip) = GROUP AGGR PriceChecker priceChecker BY ip (priceChecker);
stockIP(STRING[100] ip) = stock(groupPriceChecker(priceChecker(ip)));

weightPrefix 'Весовой префикс' = DATA STRING[2] (GroupPriceChecker);
weightPrefixIP(STRING[100] ip) = weightPrefix(groupPriceChecker(priceChecker(ip)));

piecePrefix 'Штучный префикс' = DATA STRING[2] (GroupPriceChecker);
piecePrefixIP(STRING[100] ip) = piecePrefix(groupPriceChecker(priceChecker(ip)));

charset 'Кодировка' = DATA STRING[100] (PriceChecker);
charsetIP(STRING[100] ip) = charset(priceChecker(ip));

FORM priceChecker 'Прайс чекер'
    OBJECTS ch=PriceChecker PANEL
    PROPERTIES(ch) nameGroupMachinery, npp, description, port, ip
    EDIT PriceChecker OBJECT ch
;

FORM groupPriceChecker 'Группа прайс чекеров'
    OBJECTS grch=GroupPriceChecker PANEL
    PROPERTIES(grch) npp, nameStock, name, weightPrefix, piecePrefix,
                     filterSku, showFilterSku SHOWIF filterSku(grch),
                     namePriceListType, inactive

    OBJECTS ch=PriceChecker
    PROPERTIES(ch)  nameGroupMachinery, npp, description, port, ip, charset, NEW, DELETE GRID
    FILTERGROUP filters3
        FILTER 'Показывать только для данной группы' groupPriceChecker(ch) == grch 'F10' DEFAULT
    EDIT GroupPriceChecker OBJECT grch
;

FORM groupsPriceChecker 'Группы прайс чекеров'
    OBJECTS grch=GroupPriceChecker
    PROPERTIES(grch) READONLY npp, nameStock, name, weightPrefix, piecePrefix,
                              filterSku, showFilterSku SHOWIF filterSku(grch) GRID
    PROPERTIES(grch)          NEWSESSION NEW, EDIT, DELETE 

    OBJECTS ch=PriceChecker
    PROPERTIES(ch)   READONLY npp, description, port, ip, charset
    FILTERS groupPriceChecker(ch) == grch
    
    FILTERGROUP active1
        FILTER 'Активные' active(grch) 'F6' DEFAULT    
;

DESIGN groupsPriceChecker {
    NEW topContainer{
        fill = 1;
        MOVE BOX(grch);
        MOVE BOX(ch);
    }
    MOVE TOOLBARBOX;
}
@extendFormFilterAccessStock(GroupPriceChecker, grch, groupsPriceChecker, stock, company);

// ------------------------------------------------ Стандартные значения ------------------------------------ //
priceCheckerSID (model) = GROUP MAX PriceCheckerModel pmodel BY sid (pmodel) IF pmodel IS PriceCheckerModel;

loadDefaultPriceCheckerModel 'Добавить модель прайс-чекера'(ISTRING[110] name, STRING[20] sid, STRING[200] handler)  { 
    IF NOT priceCheckerSID(sid) THEN {
        NEW pcm = PriceCheckerModel {
            name(pcm) <- name;
            sid(pcm) <- sid;
            handler(pcm) <- handler;
        }
    }
}

loadDefaultPriceCheckerModels 'Загрузить стандартные модели прайс-чекеров'()  ABSTRACT LIST ( ) IN loadDefault;

loadDefaultPriceCheckerModels() + { 
    EXEC loadDefaultPriceCheckerModel('Прайс-чекеры NewLand', 'NewLand', NULL);
    EXEC loadDefaultPriceCheckerModel('Прайс-чекеры Shuttle', 'Shuttle', NULL);
    EXEC loadDefaultPriceCheckerModel('Прайс-чекеры Shtrih', 'Shtrih', NULL);
};

@implementLoadDefaultData(loadDefaultPriceCheckerModels);

// --------------------------------------- Генерация групп прайс-чекеров -------------------------------- //
loadDefaultGroup 'Сгенерировать группу прайс-чекеров'(Stock stock, PriceCheckerModel model, INTEGER num)  { 
    NEW g = GroupPriceChecker {
        stock(g) <- stock;
        name(g) <- 'Группа прайс-чекеров по умолчанию';

        LOCAL numPriceChecker = INTEGER();
        numPriceChecker() <- 0;
        WHILE numPriceChecker() < num DO {
            NEW pc = PriceChecker {
                groupPriceChecker(pc) <- g;
                numPriceChecker() <- numPriceChecker() + 1;
                npp(pc) <- numPriceChecker();
                priceCheckerModel(g) <- model;
            }
        }
    }
} IN loadDefault;

EXTEND FORM defaultData
    OBJECTS         pm=PriceCheckerModel PANEL
    PROPERTIES(pm)  SELECTOR name

    OBJECTS         cPriceChecker=INTEGER PANEL
    PROPERTIES(cPriceChecker)   intValuePriceChecker = VALUE
    PROPERTIES (s, pm, cPriceChecker)  loadDefaultGroup
;

DESIGN defaultData {
    PROPERTY(name(pm)) {
        caption = 'Модель прайс-чекеров';
    }
    PROPERTY(intValuePriceChecker) {
        caption = 'Количество прайс-чекеров';
    }
    machinery {
        NEW priceChecker {
            caption = 'Прайс-чекеры';
            MOVE PROPERTY(name(pm));
            MOVE PROPERTY(intValuePriceChecker);
            MOVE PROPERTY(loadDefaultGroup(s,pm,cPriceChecker));
        }
    }
}

NAVIGATOR {
    machineryNavigator {
        NEW FOLDER priceCheckerNavigator 'Прайс-чекеры' {
            NEW groupsPriceChecker;
            NEW priceCheckerModels;
        }
    }
}