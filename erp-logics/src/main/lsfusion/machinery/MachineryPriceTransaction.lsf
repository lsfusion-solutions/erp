MODULE MachineryPriceTransaction;

REQUIRE Machinery, StockSkuDocument;

NAMESPACE Machinery;

//---------------------------- Загрузка в ВУ  ----------------------------------------//
CLASS ABSTRACT PriceTransactionDocument 'Документ, требующий загрузки в оборудование';
TABLE priceTransactionDocument (PriceTransactionDocument);

isDraft 'Не проведен' = ABSTRACT BOOLEAN (PriceTransactionDocument) MATERIALIZED;
isPosted 'Проведен' (PriceTransactionDocument document) = NOT isDraft(document);
description 'Название документа загрузки' = ABSTRACT STRING[200] (PriceTransactionDocument) MATERIALIZED;
skip 'Не загружать' = ABSTRACT CASE BOOLEAN (PriceTransactionDocument) MATERIALIZED;

sent 'Принят к загрузке в оборудование' = DATA BOOLEAN (PriceTransactionDocument);
sent(PriceTransactionDocument document) <- NULL WHEN SET(isDraft(document));

isClosed 'Закрыт' = ABSTRACT BOOLEAN (PriceTransactionDocument);
date 'Дата' = ABSTRACT DATE (PriceTransactionDocument);
time 'Время' = ABSTRACT TIME (PriceTransactionDocument);
series 'Серия' = ABSTRACT BPSTRING[2] (PriceTransactionDocument);
number 'Номер' = ABSTRACT STRING[48] (PriceTransactionDocument);
stock 'Склад' = ABSTRACT Stock (PriceTransactionDocument);
legalEntity 'Организация' = ABSTRACT LegalEntity (PriceTransactionDocument);
nameLegalEntity 'Организация' (PriceTransactionDocument document) = name(legalEntity(document));
operation = ABSTRACT Operation(PriceTransactionDocument);
nameOperation 'Операция' (PriceTransactionDocument document) = name(operation(document));

META implementPriceTransactionDocument(concrete)
    EXTEND CLASS concrete : Machinery.PriceTransactionDocument;
    isDraft[PriceTransactionDocument] (concrete document) += isDraft(document);
    description[PriceTransactionDocument] (concrete document) += STRING[200](description(document));
    date[PriceTransactionDocument] (concrete document) += date(document);
    time[PriceTransactionDocument] (concrete document) += time(document);
    series[PriceTransactionDocument] (concrete document) += series(document);
    number[PriceTransactionDocument] (concrete document) += number(document);
    operation[PriceTransactionDocument] (concrete document) += operation(document);
END

META implementPriceTransactionDocument(concrete, le)
    @implementPriceTransactionDocument(concrete);
    legalEntity[PriceTransactionDocument] (concrete document) += le(document);
END

META implementPriceTransactionDocumentStock(concrete, st)
    @implementPriceTransactionDocument(concrete);
    stock[PriceTransactionDocument] (concrete document) += st(document);
    isClosed[PriceTransactionDocument] (concrete document) += isClosed(document);
END

META implementPriceTransactionDocumentStock(concrete, st, legalEntity)
    @implementPriceTransactionDocument(concrete, legalEntity);
    stock[PriceTransactionDocument] (concrete document) += st(document);
    isClosed[PriceTransactionDocument] (concrete document) += isClosed(document);
END

createMachineryPriceTransaction 'Загрузить в оборудование'  ABSTRACT ( PriceTransactionDocument) TOOLBAR CONFIRM;
createSnapshotMachineryPriceTransaction 'Перегрузить все позиции'  ABSTRACT ( PriceTransactionDocument) TOOLBAR CONFIRM;

showCreateMachineryPriceTransaction = ABSTRACT BOOLEAN (PriceTransactionDocument);

CLASS ABSTRACT PriceTransactionDocumentDetail 'Строка документа, требующиего загрузки в оборудование';
TABLE priceTransactionDocumentDetail (PriceTransactionDocumentDetail);

priceTransactionDocument = ABSTRACT PriceTransactionDocument(PriceTransactionDocumentDetail);
sku = ABSTRACT Sku (PriceTransactionDocumentDetail);
idBarcodeSku 'Штрих-код'(PriceTransactionDocumentDetail detail) = idBarcode(sku(detail));
nameSku 'Наименование' (PriceTransactionDocumentDetail detail) = name(sku(detail));
quantity 'Кол-во' = ABSTRACT NUMERIC[16,5](PriceTransactionDocumentDetail);
price 'Цена' = ABSTRACT NUMERIC[16,4](PriceTransactionDocumentDetail);

WHEN (SETCHANGED(sku(PriceTransactionDocumentDetail d)) OR SETCHANGED(price(d))) AND sent(priceTransactionDocument(d)) DO {
    sent( PriceTransactionDocument t) <- NULL WHERE t == priceTransactionDocument(d);   
}; 

META implementPriceTransactionDocumentDetail(object, class)
    EXTEND CLASS class##Detail : Machinery.PriceTransactionDocumentDetail;
    priceTransactionDocument (class##Detail detail) += object(detail);
    sku[PriceTransactionDocumentDetail] (class##Detail detail) += sku(detail);
    quantity[PriceTransactionDocumentDetail](class##Detail detail) += quantity(detail);
END

META implementPriceTransactionDocumentDetail(object)
    @implementPriceTransactionDocumentDetail(object, ###object);
END
//----------------------------------- Загрузка в ВУ -------------------------------------------------------

CLASS ABSTRACT MachineryPriceTransaction 'Загрузка прайса в оборудование';
TABLE machineryPriceTransaction (MachineryPriceTransaction);

@defineCreated(MachineryPriceTransaction);

groupMachinery (transaction) = ABSTRACT GroupMachinery (MachineryPriceTransaction) MATERIALIZED;
nameGroupMachinery 'Группа оборудования' (MachineryPriceTransaction transaction) = name(groupMachinery(transaction));
nppGroupMachinery 'Номер группы оборудования' (MachineryPriceTransaction transaction) = npp(groupMachinery(transaction));

stock (MachineryPriceTransaction transaction) = stock(groupMachinery(transaction));
nameStock 'Склад' (MachineryPriceTransaction transaction) = name(stock(transaction));
idStock (MachineryPriceTransaction transaction) = id(stock(transaction));

// Дата/время
date 'Дата' = DATA DATE (MachineryPriceTransaction);
date (MachineryPriceTransaction transaction) <- currentDate() WHEN SET(transaction IS MachineryPriceTransaction);

time 'Время' = DATA TIME (MachineryPriceTransaction);
time (MachineryPriceTransaction transaction) <- currentTime() WHEN SET(transaction IS MachineryPriceTransaction);

dateTime 'Дата/время' (MachineryPriceTransaction transaction) = dateTimeToDateTime(date(transaction), time(transaction)) MATERIALIZED;

// Статус
snapshot 'Целиком' = DATA BOOLEAN (MachineryPriceTransaction);
skipSnapshot = ABSTRACT BOOLEAN (MachineryPriceTransaction);

@addRoleApplicationSetting(skipSnapshotMachinery, 'Запрещено загружать в оборудование целиком', BOOLEAN);

TABLE processMachineryPriceTransaction (MachineryPriceTransaction);
dateTimeProcessing 'Принята в обработку' = DATA DATETIME (MachineryPriceTransaction) TABLE processMachineryPriceTransaction;
succeeded 'Загружена' = DATA BOOLEAN (MachineryPriceTransaction);
notSucceeded 'Не загружена' (MachineryPriceTransaction machineryPriceTransaction) = NOT succeeded(machineryPriceTransaction);
dateTimeSucceeded 'Время загрузки' = DATA DATETIME (MachineryPriceTransaction);
canceled 'Отменена' = DATA BOOLEAN (MachineryPriceTransaction);
process 'Требуется загрузка' (MachineryPriceTransaction machineryPriceTransaction) =
    machineryPriceTransaction IS MachineryPriceTransaction AND NOT
    succeeded(machineryPriceTransaction) AND NOT
    canceled(machineryPriceTransaction) MATERIALIZED INDEXED;


// Основание
comment 'Примечание' = DATA STRING[100] (MachineryPriceTransaction);

priceTransactionDocument = DATA PriceTransactionDocument (MachineryPriceTransaction) INDEXED;
descriptionPriceTransactionDocument 'Основание загрузки' (MachineryPriceTransaction transaction) =
    description(priceTransactionDocument(transaction));

// todo : persistent почему-то не работает
description 'Основание' (MachineryPriceTransaction document) =
    OVERRIDE comment(document), descriptionPriceTransactionDocument(document);

countProcess 'Кол-во ожидающих транзакций' (document) = GROUP SUM 1 IF process(MachineryPriceTransaction transaction)
                                                                                 BY priceTransactionDocument(transaction) MATERIALIZED;

succeeded 'Загружен в оборудование' (PriceTransactionDocument document) = sent (document) IF NOT countProcess(document);

//-- Частичная загрузка
cleared 'Выполнена очистка' = DATA BOOLEAN(Machinery, MachineryPriceTransaction);
succeeded 'Загружено' = DATA BOOLEAN(Machinery, MachineryPriceTransaction);
dateTimeSucceeded 'Время загрузки' = DATA DATETIME(Machinery, MachineryPriceTransaction);

countSucceededMachineries'Кол-во загруженного оборудования' (t) = 
    GROUP SUM 1 IF succeeded(Machinery m, MachineryPriceTransaction mt) OR 
                   (succeeded(mt) AND groupMachinery(m) == groupMachinery(mt)) 
          BY priceTransactionDocument(mt) MATERIALIZED;
    
countSucceededMachineries'Кол-во загруженного оборудования' (MachineryPriceTransaction t) = GROUP SUM 1 
    IF succeeded(Machinery m,t) MATERIALIZED;

countMachineries 'Кол-во оборудования в группе' (gm) =GROUP SUM 1 BY groupMachinery(Machinery m);
countMachineries 'Кол-во оборудования в группе' (priceTransactionDocument) = GROUP SUM countMachineries(groupMachinery(MachineryPriceTransaction t)) BY priceTransactionDocument(t);
concatSucceededMachineries 'Кол-во оборудования' (PriceTransactionDocument t)  = CONCAT '/', countSucceededMachineries(t), countMachineries(t); 

statusMachinery 'Статус загрузки в оборудование' (PriceTransactionDocument document) =
    CASE
        WHEN skip(document) THEN 'Загрузка не требуется' IF document IS PriceTransactionDocument        
        WHEN countSucceededMachineries(document) != countMachineries(document) THEN (CONCAT ' ', 'Частично загружен', concatSucceededMachineries(document))
        WHEN succeeded(document) THEN 'Успешно загружен' IF document IS PriceTransactionDocument        
        WHEN sent(document) THEN 'Принят к загрузке' IF document IS PriceTransactionDocument
        ELSE 'Не загружен' IF document IS PriceTransactionDocument
    MATERIALIZED;

// Загруженные штрихкоды
TABLE machineryPriceTransactionBarcode (MachineryPriceTransaction, Barcode);

in 'Вкл' = DATA BOOLEAN (MachineryPriceTransaction, Barcode) INDEXED;
countBarcodes 'Кол-во строк' = GROUP SUM 1 IF in(MachineryPriceTransaction t, Barcode b) BY t;

name 'Наименование' = DATA STRING[255] (MachineryPriceTransaction, Barcode);
name(MachineryPriceTransaction t, Barcode barcode)  => in(t, barcode) RESOLVE RIGHT;

price 'Цена' = DATA NUMERIC[16,4] (MachineryPriceTransaction, Barcode);
price(MachineryPriceTransaction t, Barcode barcode)  => in(t, barcode) RESOLVE RIGHT;

// Текущие загруженные штрихкоды
TABLE barcodeGroupMachinery (Barcode, GroupMachinery);

skipLastTransaction 'Не учитывать для определения текущих цен в оборудовании' = ABSTRACT BOOLEAN (GroupMachinery);

// INDEX groupInMachineryPriceTransactionBarcode + barcode 
groupIn = groupMachinery(MachineryPriceTransaction transaction) IF in(transaction, Barcode barcode) 
    AND NOT skipLastTransaction(groupMachinery(transaction)) MATERIALIZED;

dateTimeIn = dateTime(MachineryPriceTransaction transaction) IF in(transaction, Barcode barcode) 
    AND NOT skipLastTransaction(groupMachinery(transaction)) MATERIALIZED;
    
INDEX groupIn(MachineryPriceTransaction t, Barcode b), b, dateTimeIn(t,b), t;
    
lastTransaction (Barcode barcode, groupMachinery) = 
    GROUP LAST MachineryPriceTransaction transaction
          ORDER dateTimeIn(transaction, barcode), transaction
          WHERE NOT canceled(transaction) 
          BY groupIn(transaction, barcode) MATERIALIZED;
prevLastTransaction (Barcode b, GroupMachinery g) = lastTransaction(b, g);

lastTransaction (sku, stock) =
    GROUP LAST lastTransaction(Barcode b, GroupMachinery g)
          ORDER dateTimeIn(lastTransaction(b, g), b), lastTransaction(b, g)
          WHERE lastTransaction(b, g) 
          BY sku(b), stock(g);
          
lastFullTransaction (Barcode barcode, groupMachinery) = 
    GROUP LAST MachineryPriceTransaction transaction
          ORDER dateTime(transaction), transaction
          WHERE in(transaction, barcode) AND NOT canceled(transaction) 
          BY groupMachinery(transaction);
          
prevLastFullTransaction (Barcode barcode, GroupMachinery groupMachinery) = PREV(lastFullTransaction (barcode, groupMachinery));

transactionName 'Текущее наименование в оборудовании' (Barcode barcode, GroupMachinery groupMachinery)  =
    name(lastTransaction(barcode, groupMachinery), barcode);
prevTransactionName(Barcode barcode, GroupMachinery groupMachinery) = name(prevLastFullTransaction(barcode, groupMachinery), barcode);

transactionPrice 'Текущая цена в оборудовании' (Barcode barcode, GroupMachinery groupMachinery)  =
    price(lastTransaction(barcode, groupMachinery), barcode) MATERIALIZED;
prevTransactionPrice (Barcode barcode, GroupMachinery groupMachinery) = price(prevLastFullTransaction(barcode, groupMachinery),barcode);

transactionPrice 'Текущая цена в оборудовании' (Barcode barcode, stock) =
    GROUP LAST transactionPrice(barcode, GroupMachinery g)
          ORDER dateTimeIn(lastTransaction(barcode, g), barcode), lastTransaction(barcode, g)
          WHERE lastTransaction(barcode, g) 
          BY stock(g);

transactionPrice 'Текущая цена в оборудовании' (Sku sku, Stock stock) =
    transactionPrice(barcode(sku), stock) MATERIALIZED TABLE extraSkuStock;
transactionPriceIdBarcodeId 'Текущая цена в оборудовании' (STRING[15] sku, STRING[100] stock) = transactionPrice(skuBarcode(sku), stock(stock));

priceA(LedgerPriceListType pt, Sku sku, Stock stock, Stock sup, DATETIME dt) = priceA(pt, sku, stock, legalEntity(sup), dt);

countDaysClearMachineryPriceTransaction 'За сколько дней хранить загрузки прайсов в оборудование' = DATA INTEGER (); 

EXTEND FORM options PROPERTIES countDaysClearMachineryPriceTransaction();
DESIGN options { log { MOVE PROPERTY(countDaysClearMachineryPriceTransaction());} }    

clearApplicationLog () + { 
	NEWSESSION {
	    IF countDaysClearMachineryPriceTransaction() THEN {
	    in(MachineryPriceTransaction t, Barcode b) <- NULL WHERE NOT t == lastTransaction(b, groupMachinery(t)) AND date(t) <= subtract(currentDate(), countDaysClearMachineryPriceTransaction());
	    apply();
	    
	    DELETE MachineryPriceTransaction t WHERE  t IS MachineryPriceTransaction AND NOT (GROUP SUM 1 IF in(t, Barcode b));
	    apply();
	    }
	}
}   

//--------------------Сообщения об ошибках транзакций--------------------//
CLASS MachineryPriceTransactionError 'Ошибка';
TABLE machineryPriceTransactionError (MachineryPriceTransactionError);

data 'Сообщение об ошибке' = DATA STRING (MachineryPriceTransactionError) IN base;
date 'Время возникновения' = DATA DATETIME (MachineryPriceTransactionError) IN base;
toDate 'Дата возникновения' (MachineryPriceTransactionError d) = DATE(date(d));
errorTrace 'След исключения' = DATA TEXT (MachineryPriceTransactionError) IN base;
priority (MachineryPriceTransaction m) = priority(groupMachinery(m));
filter (MachineryPriceTransaction m) = m AS MachineryPriceTransaction;
machineryPriceTransaction 'Транзакция (ID)' = DATA MachineryPriceTransaction(MachineryPriceTransactionError) NONULL DELETE IN base INDEXED;
quantityMachineryPriceTransactionError 'Количество ошибок' (MachineryPriceTransaction) = GROUP SUM 1 BY machineryPriceTransaction (MachineryPriceTransactionError machineryPriceTransactionError) MATERIALIZED IN base TABLE processMachineryPriceTransaction;
lastDateMachineryPriceTransactionError 'Время последней ошибки' (MachineryPriceTransaction) = GROUP MAX date(MachineryPriceTransactionError machineryPriceTransactionError) BY machineryPriceTransaction (machineryPriceTransactionError) MATERIALIZED TABLE processMachineryPriceTransaction;

lastTransaction (Barcode barcode, stock) =
    GROUP LAST lastTransaction(barcode, GroupMachinery g)
          ORDER dateTimeIn(lastTransaction(barcode, g), barcode), lastTransaction(barcode, g)
          WHERE lastTransaction(barcode, g)
          BY stock(g);

backgroundLastTransaction (Sku sku, Stock stock) = RGB (255,0,0) IF quantityMachineryPriceTransactionError(lastTransaction(barcode(sku), stock)) AND NOT
    succeeded(lastTransaction (barcode(sku), stock));  

INDEX groupMachinery(MachineryPriceTransaction t), dateTime(t), t; 
lastErrorTime (GroupMachinery g) = GROUP LAST dateTime(MachineryPriceTransaction t) IF quantityMachineryPriceTransactionError(t) ORDER dateTime(t), t WHERE process(t) BY groupMachinery(t);

@defineLog (MachineryPriceTransactionError, 'ошибок загрузки прайсов', log, toDate);

// Загрузка в конкретные устройства
TABLE machineryPriceTransactionMachinery (MachineryPriceTransaction, Machinery);
in 'Вкл' = DATA BOOLEAN (MachineryPriceTransaction, Machinery);
npps 'Номера устройств' (MachineryPriceTransaction transaction) =
    GROUP
          CONCAT BPSTRING[3](npp(Machinery machinery)) IF in(transaction, machinery), ','
          ORDER machinery CHARWIDTH 10 MATERIALIZED;

// перезагрузка прайса целиком
selected 'Вкл' = DATA LOCAL BOOLEAN (GroupMachinery);
selected 'Вкл' = DATA LOCAL BOOLEAN (Machinery);

countSelectedMachinery() = GROUP SUM 1 IF selected(Machinery m);

GROUP snapshotMachineryPrice 'Перезагрузка прайса целиком с выбором группы' : public;

FORM groupMachineryInput 'Выбор оборудования для перезагрузки прайса'

    OBJECTS s = Stock PANEL
    PROPERTIES(s) READONLY sname = name

    OBJECTS g = GroupMachinery
    PROPERTIES(g) selected
    PROPERTIES(g) READONLY npp, name, nameStock, nameModel
    FILTERS stock(g) == s,
            active(g)
        
    OBJECTS m = Machinery
    PROPERTIES(m)          selected
    PROPERTIES(m) READONLY npp, shortDescription, description, port

    FILTERS groupMachinery(m) == g
    
    FILTERGROUP mActive
        FILTER 'Активные' NOT inactive(m) DEFAULT 
;

DESIGN groupMachineryInput {
    BOX {
        size = (1024, 768);
    }
    PROPERTY(sname) {
        focusable = FALSE;
    }
}

// ---------------------------------------- Формы загрузки прайса --------------------------------------- //

FORM machineryPriceTransaction 'Загрузка прайса в оборудование'
    OBJECTS t = MachineryPriceTransaction PANEL
    PROPERTIES(t) nppGroupMachinery, nameGroupMachinery, date, time,
                  snapshot, dateTimeProcessing SHOWIF notSucceeded(t), succeeded, 
                  dateTimeSucceeded SHOWIF succeeded(t), canceled

    OBJECTS b = Barcode
    PROPERTIES(b) READONLY id
    PROPERTIES(t, b)       in, name, price
    FILTERS in(t, b)

    EDIT MachineryPriceTransaction OBJECT t;
;

DESIGN machineryPriceTransaction {
    OBJECTS {
        NEW pane {
            fill = 1;
            type = TABBED;
            
            NEW barcodes{
                caption ='Штрихкод';
                MOVE BOX(b);
            }
        }
    }
}

FORM machineryPriceTransactions 'Загрузки прайса в оборудование'
    OBJECTS s = Stock PANEL
    PROPERTIES name(s) SELECTOR
    FILTERS isCompany(s)

    OBJECTS t = MachineryPriceTransaction LAST
    PROPERTIES(t) READONLY
                           VALUE, snapshot, nameGroupMachinery, nameStock, objectClassName, countBarcodes, date, 
                           time, description, dateTimeProcessing 
    PROPERTIES(t) READONLYIF isReadonly()
                           succeeded , dateTimeSucceeded, canceled, 
                           quantityMachineryPriceTransactionError BACKGROUND quantityMachineryPriceTransactionError(t),
                           npps TOOLBAR SHOWIF snapshot(t)
    PROPERTIES(t) READONLY createdNameUser, createdHostnameComputer
    PROPERTIES(t)          NEWSESSION EDIT, DELETE 
    FILTERS stock(t) == s

    OBJECTS b = Barcode
    PROPERTIES(b)    READONLY id
    PROPERTIES(t, b) READONLY name, price

    FILTERS in(t, b)

    OBJECTS e = MachineryPriceTransactionError LAST
    PROPERTIES(e)  READONLY data, date
    PROPERTIES(e)  PANEL  errorTrace
    FILTERS machineryPriceTransaction(e) == t
;
@extendFormFilterStockAccess(s, machineryPriceTransactions);

@extendFormEditable(machineryPriceTransactions);

DESIGN machineryPriceTransactions {
    NEW header {
        type = CONTAINERH;
        MOVE BOX(s) {
            fill = 1;
            MOVE PROPERTY(name(s)) {
                alignment = STRETCH;
            }
        }
        alignment = STRETCH;
    }
    NEW pane {
        fill = 1;
        type = SPLITV;
        MOVE BOX(t);
        NEW specContainer{
            fill = 2;
            type = TABBED;
            NEW barcodes{
                caption ='Штрихкод';
                MOVE BOX(b);
            }
            NEW errorContainer {
                fill = 1;
                caption = 'Сообщения об ошибках';
                type = SPLITH;
                MOVE BOX(e);
                MOVE PROPERTY(errorTrace(e)) {
                    fill = 1;
                    panelCaptionVertical = TRUE;
                }
            }
        }
    }
    MOVE TOOLBARBOX;
}

// ------------------------------------------------ Действия по загрузке ------------------------------------ //

CLASS RequestExchangeType 'Тип запроса' {
    salesInfo 'Перегрузить продажи',
    checkZReport 'Сверить суммы z-отчетов',
    terminalOrder 'Загрузить заказы',
    cashierInfo 'Загрузить данные о кассирах'
}

FORM requestExchangeTypes 'Типы запросов'
    OBJECTS r = RequestExchangeType
    PROPERTIES(r) READONLY staticCaption
    LIST RequestExchangeType OBJECT r
;

CLASS RequestExchange 'Запрос обмена данными';
TABLE requestExchange (RequestExchange);

stock 'Склад' = DATA Stock (RequestExchange);// NONULL;
nameStock 'Склад' (RequestExchange requestExchange) = name(stock(requestExchange)) IN id;

CONSTRAINT stock(RequestExchange r) AND NOT isCompany(stock(r))
    CHECKED BY stock[RequestExchange]
    MESSAGE 'Склад запроса обмена данными должен быть складом компании';

TABLE stockRequestExchange(Stock, RequestExchange);
in 'Вкл' = DATA BOOLEAN (Stock, RequestExchange);  
extraStocks (RequestExchange requestExchange) = GROUP 
                                                CONCAT name(Stock stock) IF in(stock, requestExchange), ', '
                                                ORDER name(stock) CHARWIDTH 30 MATERIALIZED;                                                                         
dateFrom 'Дата с' = DATA DATE (RequestExchange) NONULL IN id;
dateTo 'Дата по' = DATA DATE (RequestExchange) NONULL;
requestExchangeType 'Тип запроса' = DATA RequestExchangeType (RequestExchange) NONULL;
nameRequestExchangeType 'Тип запроса' (RequestExchange requestExchange) = staticName(requestExchangeType(requestExchange)) IN id;
captionRequestExchangeType 'Тип запроса' (RequestExchange requestExchange) = staticCaption(requestExchangeType(requestExchange));
succeeded 'Выгружен' = DATA BOOLEAN (RequestExchange);
notSucceeded 'Не выгружен' (RequestExchange requestExchange) = requestExchange IS RequestExchange AND NOT succeeded(requestExchange);
dateTimeSucceeded 'Время выгрузки' = DATA DATETIME (RequestExchange);

overShowExtraStocks = ABSTRACT BOOLEAN(RequestExchange);
showExtraStocks(RequestExchange requestExchange) = requestExchangeType(requestExchange) == RequestExchangeType.checkZReport OR 
                                   requestExchangeType(requestExchange) == RequestExchangeType.salesInfo OR 
                                   requestExchangeType(requestExchange) == RequestExchangeType.cashierInfo OR 
                                   overShowExtraStocks(requestExchange);

TABLE machineryRequestExchange(Machinery, RequestExchange);
dataIn 'Вкл' = DATA BOOLEAN (Machinery, RequestExchange); 
machineries 'Оборудование' (RequestExchange requestExchange) = GROUP SUM 1 IF dataIn(Machinery m, requestExchange);  
in (Machinery machinery, RequestExchange requestExchange) = dataIn(machinery, requestExchange) OR NOT machineries(requestExchange);     
     
CLASS RequestExchangeLog 'Лог обмена данными';
TABLE requestExchangeLog (RequestExchangeLog);

machinery 'Касса' = DATA Machinery (RequestExchangeLog);
nppMachinery 'Касса' (RequestExchangeLog requestExchangeLog) = npp(machinery(requestExchangeLog));
message 'Сообщение' = DATA TEXT (RequestExchangeLog);
date 'Время' = DATA DATETIME (RequestExchangeLog);
requestExchange = DATA RequestExchange (RequestExchangeLog);

CLASS RequestExchangeError 'Ошибки обмена данными';
TABLE requestExchangeError (RequestExchangeError);

erTrace 'След ошибки' = DATA TEXT (RequestExchangeError);
date 'Время' = DATA DATETIME (RequestExchangeError);
requestExchange = DATA RequestExchange (RequestExchangeError);
note 'Примечание' = DATA STRING[100] (RequestExchange) CHARWIDTH 30;

inGroupMachinery (Stock stock) = [ GROUP SUM 1 BY stock(GroupMachinery gr)](stock);
CONSTRAINT stock(RequestExchange r) AND NOT inGroupMachinery(stock(r)) CHECKED BY stock[RequestExchange]
    MESSAGE 'Склад без групп касс';

FORM requestExchange 'Запрос обмена данными'
    OBJECTS r = RequestExchange PANEL
    PROPERTIES(r) nameStock, dateFrom, dateTo, captionRequestExchangeType, succeeded, note
 
    OBJECTS s = Stock GRID
    PROPERTIES(s, r) SHOWIF showExtraStocks(r) in
    PROPERTIES(s) READONLY SHOWIF showExtraStocks(r) id, name, nameLegalEntity
    ORDERS nameLegalEntity(s)
    FILTERS isCompany(s), active(s), inGroupMachinery(s)
    
    OBJECTS m = Machinery 
    PROPERTIES(m, r) dataIn
    PROPERTIES(m) READONLY npp, shortDescription, description, objectClassName
    FILTERS stock(m) == stock(r), NOT inactive(m)  
    
    EDIT RequestExchange OBJECT r
;

DESIGN requestExchange {
    BOX {
        NEW topContainer{
            caption = 'Запрос обмена данными';
            NEW firstRow {
                type = CONTAINERH;
                MOVE PROPERTY(nameStock(r));
                MOVE PROPERTY(dateFrom(r));
                MOVE PROPERTY(dateTo(r));
                MOVE PROPERTY(captionRequestExchangeType(r));                
            }
            NEW secondRow {
                type = CONTAINERH;
                MOVE PROPERTY(succeeded(r));
                MOVE PROPERTY(note(r));                
            }            
        }
        NEW tabbedPanel {
            fill = 1;
            type = TABBED;
            MOVE BOX(s);
            MOVE BOX(m);
        }
        MOVE TOOLBARBOX;
    }
}

overCopy ABSTRACT LIST (RequestExchange, RequestExchange);

copy 'Копировать'(RequestExchange request)  { 
	NEWSESSION {
	    NEW r = RequestExchange {
	        stock(r) <- stock(request);
	        dateFrom(r) <- dateFrom(request);
	        dateTo(r) <- dateTo(request);
	        note(r) <- note(request);
	        requestExchangeType(r) <- requestExchangeType(request);
	        
	        FOR in(Stock stock, request) DO {
	            in(stock, r) <- in(stock, request);
	        }
	        
	        FOR dataIn(Machinery machinery, request) DO {
	            dataIn(machinery, r) <- dataIn(machinery, request);
	        }
	        
	        overCopy(request, r);
	        
	        SHOW requestExchange OBJECTS r = r DOCKED;
	    }   
	}
} TOOLBAR;

allStocks 'Склады' (RequestExchange requestExchange)= 
    CONCAT ',', nameStock(requestExchange), extraStocks(requestExchange) 
    CHARWIDTH 30 MATERIALIZED; 

FORM requestExchanges 'Запросы обмена данными'
    
    OBJECTS r = RequestExchange LAST
    PROPERTIES(r) READONLY allStocks, dateFrom, dateTo, 
                           captionRequestExchangeType, succeeded, dateTimeSucceeded, note
    PROPERTIES(r)          NEWSESSION NEW, EDIT, DELETE 
    PROPERTIES(r)                     copy
    
    OBJECTS rl = RequestExchangeLog
    PROPERTIES(rl) READONLY nppMachinery, message, date
    FILTERS requestExchange(rl) == r    
    
    OBJECTS re = RequestExchangeError
    PROPERTIES(re) READONLY erTrace, date
    FILTERS requestExchange(re) == r    
;

DESIGN requestExchanges {
    BOX {
        NEW requestExchangeContainer {
            fill = 1;
            type = SPLITV;
            MOVE BOX(r);
            NEW tabbedContainer {
                type = TABBED;
                fill = 1;
                NEW logTabbedContainer {
                    fill = 1;
                    caption = 'Лог';
                    MOVE BOX(rl);
                }
                NEW errorTabbedContainer {
                    fill = 1;
                    caption = 'Ошибки';
                    MOVE BOX(re);
                }
                NEW actionContainer {
                    fill = 1;
                    caption = 'Действия';
                }            
            }
        }
        MOVE TOOLBARBOX;
    }
}

createMachineryPriceTransaction  ABSTRACT LIST ( GroupMachinery);

skipIn = ABSTRACT CASE BOOLEAN (GroupMachinery, Sku);
in 'Вкл' (GroupMachinery groupMachinery, Sku sku) = groupMachinery IS GroupMachinery
                                                    AND sku IS Sku
                                                         AND NOT (filterSku(groupMachinery) AND NOT in(groupMachinery, skuGroup(sku)))
                                                         AND NOT skipIn(groupMachinery, sku);
                                                         
skip = ABSTRACT CASE BOOLEAN (GroupMachinery, Barcode);
skipMachineryPriceTransaction 'Запретить загрузку в оборудование' = ABSTRACT BOOLEAN (Sku, Stock, DATETIME);
skipMachineryPriceTransaction 'Не загружать в оборудование' = DATA BOOLEAN (Barcode);
skip(GroupMachinery groupMachinery, Barcode barcode) += WHEN groupMachinery IS GroupMachinery AND skipMachineryPriceTransaction(barcode) THEN TRUE;

// Перезагрузка целиком
snapshotAttribute  ABSTRACT LIST ( MachineryPriceTransaction, GroupMachinery);

addedTransaction = DATA LOCAL MachineryPriceTransaction();

snapshotGroupMachinery 'Ранее загруженные'(Stock stock)  { 
	NEWSESSION {
	    DIALOG groupMachineryInput OBJECTS s = stock DO {
	        FOR selected(GroupMachinery groupMachinery) DO {
	            addedTransaction() <- NULL;
	            createMachineryPriceTransaction(groupMachinery);
	            FOR MachineryPriceTransaction t == addedTransaction() DO {
	                groupMachinery(t) <- groupMachinery;
	                comment(t) <- 'Перезагрузка прайса целиком';
	                IF NOT skipSnapshot(t) THEN {
	                    snapshot(t) <- TRUE;
	                }
	                in(t, Machinery machinery) <- selected(machinery) WHERE groupMachinery(machinery) == groupMachinery;
	
	                LOCAL in = BOOLEAN (Barcode);
	
	                in(Barcode barcode) <- TRUE IF prevLastFullTransaction(barcode, groupMachinery);
	
	                // делаем разными запросами, чтобы было проще PostgreSQL
	                in(Barcode barcode) <- active(barcode) WHERE in(barcode); // если активный штрихкод
	
	                in(Barcode barcode) <- in(groupMachinery, sku(barcode)) WHERE in(barcode); // если на эту группу оборудования должна закачиваться
	                
	                in(Barcode barcode) <- NOT skuType(sku(barcode)) != SkuType.skuTypeItem WHERE in(barcode); // если это не товар
	                
	                in(Barcode barcode) <- NULL WHERE in(barcode) AND skip(groupMachinery, barcode); // если на эту группу оборудования должна закачиваться
	                in(Barcode barcode) <- NULL WHERE in(barcode) AND (skipMachineryPriceTransaction(sku(barcode), stock, currentDateTime()) OR inactive(sku(barcode))); // если есть запрет на загрузку
	
	                in(t, Barcode barcode) <- in(barcode); // важно, что товар должен быть активным на текущий момент
	                name(t, Barcode barcode) <- prevTransactionName(barcode, groupMachinery) WHERE in(t, barcode);
	                snapshotAttribute(t, groupMachinery);
	                price(t, Barcode barcode) <- prevTransactionPrice(barcode, groupMachinery) WHERE in(t, barcode);
	            }
	        }
	        apply();
	    }
	}
} IN snapshotMachineryPrice;

// Инкрементная загрузка
GROUP incrementMachineryPrice 'Инкрементная загрузка' : public;

// ------------------------------- Определение цены, по которой загружать ------------------------------- //

priceListType = ABSTRACT LedgerPriceListType (GroupMachinery, Barcode);

price 'Цена' (Barcode b, GroupMachinery g) = priceA((OVERRIDE priceListType(g, b), priceListType(g)),
                                                                     sku(b),
                                                                     stock(g),
                                                                     currentDateTime());

createMachineryPriceTransactionAll = DATA LOCAL BOOLEAN(); // установка флага на полное удаление старых товаров из кассы
createMachineryPriceTransactionSnapshot = DATA LOCAL BOOLEAN (); // загрузка не только изменившихся цен

createMachineryPriceTransaction = DATA LOCAL BOOLEAN (Sku);

createMachineryPriceTransactionDocument = DATA LOCAL PriceTransactionDocument();
createMachineryPriceTransactionComment = DATA LOCAL STRING[100] ();

createAttribute  ABSTRACT LIST ( MachineryPriceTransaction);
createAttribute  ABSTRACT LIST ( MachineryPriceTransaction, Stock);
createAttribute  ABSTRACT LIST ( MachineryPriceTransaction, GroupMachinery);


exclude = DATA LOCAL BOOLEAN (GroupMachinery);

supressNoNeedMessage() = DATA LOCAL BOOLEAN (); // не выдавать сообщение если загрузка не требуется
skipChangePrice = ABSTRACT VALUE BOOLEAN (Barcode);

inMachineryPriceTransaction 'Создавать пустую транзакцию' = DATA LOCAL NESTED BOOLEAN (); 
extraLoad = ABSTRACT BOOLEAN (Sku);

overCreateMachineryPriceTransaction ABSTRACT LIST (GroupMachinery);

send = DATA LOCAL BOOLEAN (Barcode);
price = DATA LOCAL NUMERIC[16,4] (Barcode);

createMachineryPriceTransaction 'Создать транзакцию'(Stock stock)  { 
    LOCAL message = TEXT();
    LOCAL sentSomething = BOOLEAN();
    message() <- TEXT('Принято к загрузке в оборудование : \n');

    FOR stock(GroupMachinery groupMachinery) == stock AND active(groupMachinery) AND NOT exclude(groupMachinery) ORDER DESC skipLastTransaction(groupMachinery)  DO {

        send(Barcode barcode) <- createMachineryPriceTransaction(sku(barcode));

        // делаем разными запросами, чтобы было проще PostgreSQL
        send(Barcode barcode) <- active(barcode) WHERE send(barcode); // если активный штрихкод

        send(Barcode barcode) <- in(groupMachinery, sku(barcode)) WHERE send(barcode); // если на эту группу оборудования должна закачиваться

        send(Barcode barcode) <- NULL WHERE send(barcode) AND skip(groupMachinery, barcode); // если на эту группу оборудования должна закачиваться

        send(Barcode barcode) <- NOT skuType(sku(barcode)) != SkuType.skuTypeItem WHERE send(barcode) AND NOT extraLoad(sku(barcode)); // если это не товар

        price(Barcode barcode) <- price(barcode, groupMachinery) WHERE send(barcode);
        
        send(Barcode barcode) <- NULL WHERE send(barcode) AND NOT price(barcode); // если есть цена
        
        overCreateMachineryPriceTransaction(groupMachinery);

        IF NOT createMachineryPriceTransactionAll() AND NOT createMachineryPriceTransactionSnapshot() AND NOT explicitBatchLedger(stock(groupMachinery)) THEN
            send(Barcode barcode) <- TRUE IF NOT (price(barcode) == OVERRIDE transactionPrice(barcode, groupMachinery), transactionPrice(barcode, stock(groupMachinery)) IF skipLastTransaction(groupMachinery)) 
                WHERE send(barcode) AND NOT skipChangePrice(barcode);
            
        send(Barcode barcode) <- NULL WHERE send(barcode) AND (skipMachineryPriceTransaction(sku(barcode), stock, currentDateTime()) OR inactive(sku(barcode))); // если есть запрет на загрузку
        
        LOCAL countBarcode = INTEGER();
        countBarcode() <- (GROUP SUM 1 IF send(Barcode barcode));
        LOCAL countSku = INTEGER();
        countSku() <- (GROUP SUM 1 IF [ GROUP SUM 1 IF send(Barcode barcode) BY sku(barcode)](Sku sku));        
        IF countBarcode() OR inMachineryPriceTransaction() THEN {
            addedTransaction() <- NULL;
            createMachineryPriceTransaction(groupMachinery);
            FOR MachineryPriceTransaction t == addedTransaction() DO {
                in(t, Machinery machinery) <- selected(machinery) WHERE groupMachinery(machinery) == groupMachinery;
                groupMachinery(t) <- groupMachinery;
                priceTransactionDocument(t) <- createMachineryPriceTransactionDocument();
                comment(t) <- createMachineryPriceTransactionComment();
                in(t, Barcode barcode) <- send(barcode);
                createAttribute(t);
                createAttribute(t, stock);
                createAttribute(t, groupMachinery(t));
                price(t, Barcode barcode) <- price(barcode) WHERE in(t, barcode);
                
                IF createMachineryPriceTransactionAll() AND NOT skipSnapshot(t) THEN {
                    snapshot(t) <- TRUE;
                    canceled(MachineryPriceTransaction tr) <- TRUE WHERE process(tr) AND groupMachinery(tr) == groupMachinery  AND NOT tr == t AND NOT countSelectedMachinery();
                }                    
                message() <- message() + (OVERRIDE name(groupMachinery), 'Без наименования') + ' - ' + (OVERRIDE countSku() + ' товаров ('+countBarcode()+' штрих-кодов).\n', ' ');
                sentSomething() <- TRUE;
            }
        }
    }

    IF sentSomething() THEN
        MESSAGE message() NOWAIT;
    ELSE
        IF NOT supressNoNeedMessage() THEN
            MESSAGE 'Загрузка прайса в оборудование не требуется: '+name(stock)+'.\n' NOWAIT;
};

createBalanceMachineryPriceTransaction 'Остатки'(Stock stock)  { 
	NEWSESSION {
	    createMachineryPriceTransaction(Sku sku) <- TRUE IF currentBalance(sku, stock) OR extraLoad(sku);
	    createMachineryPriceTransactionComment() <- 'Инкрементная загрузка остатков';
	    createMachineryPriceTransaction(stock);
	    apply();
	}
} CONFIRM IN incrementMachineryPrice;

createBalanceSnapshotMachineryPriceTransaction 'Остатки (целиком)'(Stock stock)  { 
	NEWSESSION {
	    createMachineryPriceTransaction(Sku sku) <- TRUE IF currentBalance(sku, stock) OR extraLoad(sku);
        createMachineryPriceTransactionComment() <- 'Загрузка остатков (целиком)';
        createMachineryPriceTransactionAll() <- TRUE;
	    createMachineryPriceTransaction(stock);
	    apply();
	}
} CONFIRM IN incrementMachineryPrice;

createPriceMachineryPriceTransaction 'Все товары'(Stock stock)  { 
	NEWSESSION {
	    createMachineryPriceTransaction(Sku sku) <- TRUE;
	    createMachineryPriceTransactionComment() <- 'Инкрементная загрузка товаров';
	    createMachineryPriceTransaction(stock);
	    apply();
	}
} CONFIRM IN incrementMachineryPrice;

createPriceSnapshotMachineryPriceTransaction'Все товары (целиком)'(Stock stock)  { 
	NEWSESSION {
	    createMachineryPriceTransaction(Sku sku) <- TRUE;
	    createMachineryPriceTransactionComment() <- 'Загрузка все товары (целиком)';
        createMachineryPriceTransactionAll() <- TRUE;
	    createMachineryPriceTransaction(stock);
	    apply();
	}
} CONFIRM IN incrementMachineryPrice;

include 'Вкл.' = DATA LOCAL BOOLEAN (GroupMachinery);

FORM selectGroupMachinery 'Выбор групп оборудования'
    OBJECTS st = Stock PANEL 
    PROPERTIES(st) READONLY name    
    
    OBJECTS gm = GroupMachinery 
    PROPERTIES(gm) include 
    PROPERTIES(gm) READONLY npp, name, ports, objectClassName
    FILTERS active(gm)
    FILTERGROUP isStock
        FILTER 'По складу' stock(gm) == st DEFAULT 
            
    OBJECTS m = Machinery
    PROPERTIES(m)          selected
    PROPERTIES(m) READONLY npp, shortDescription, description, port

    FILTERS groupMachinery(m) == gm
    
    FILTERGROUP mActive
        FILTER 'Активные' NOT inactive(m) DEFAULT 
;
DESIGN selectGroupMachinery { BOX { size = (1024, 768); } }

countSendAllMovedDays 'При загрузке целиком остатков включать товары с движением позже, дней' = DATA INTEGER ();

EXTEND FORM options
    PROPERTIES countSendAllMovedDays()
;

DESIGN options {
    machinery {
        MOVE PROPERTY(countSendAllMovedDays());
    }
}

createBalanceSelectMachineryPriceTransaction 'Остатки'(Stock stock)  { 
	NEWSESSION {
	    DIALOG selectGroupMachinery OBJECTS st = stock DO
	        FOR [ GROUP SUM 1 IF include(GroupMachinery gm) BY stock(gm)](Stock stk) DO {
	            exclude(GroupMachinery gm) <- TRUE WHERE stock(gm) == stk AND NOT include(gm);
	            
	            createMachineryPriceTransaction(Sku sku) <-  currentBalance(sku, stk) OR sum(DATE(dateTimeLastMoved(sku, stk)), countSendAllMovedDays()) > currentDate();
	            createMachineryPriceTransactionComment() <- 'Выборочная загрузка остатков по группе оборудования';
	            createMachineryPriceTransactionAll() <- TRUE;
	            createMachineryPriceTransaction(stk);
	            APPLY NESTED (include[GroupMachinery]);
	        }
	        include(GroupMachinery g) <- NULL;
	}
} IN snapshotMachineryPrice;

createSelectMachineryPriceTransaction 'Все товары'(Stock stock)  { 
	NEWSESSION {
	    DIALOG selectGroupMachinery OBJECTS st = stock DO
	        FOR [ GROUP SUM 1 IF include(GroupMachinery gm) BY stock(gm)](Stock stk) DO {
	            exclude(GroupMachinery gm) <- TRUE WHERE stock(gm) == stk AND NOT include(gm);
	            
	            createMachineryPriceTransaction(Sku sku) <- TRUE;
	            createMachineryPriceTransactionComment() <- 'Выборочная загрузка товаров по группе оборудования';
	            createMachineryPriceTransactionAll() <- TRUE;
	            createMachineryPriceTransaction(stk);
	            APPLY NESTED (include[GroupMachinery]);
	        }
	        include(GroupMachinery g) <- NULL;
	}
} IN snapshotMachineryPrice;



GROUP documentMachineryPrice 'Из документа' : public;
createDocumentMachineryPriceTransaction 'Из документа'(Stock stock)  { 
	NEWSESSION {
	    DIALOG documents DO {
	        createMachineryPriceTransaction(Sku sku) <- TRUE WHERE countDocumentDetail(sku, (GROUP MAX Document d IF inSession(d)));
	        createMachineryPriceTransactionDocument() <- (GROUP MAX Document d IF inSession(d));
	        createMachineryPriceTransactionSnapshot() <- TRUE ;
	        createMachineryPriceTransaction(stock);
	    }
	}
} IN documentMachineryPrice;

EXTEND FORM machineryPriceTransactions
    PROPERTIES(s) createBalanceMachineryPriceTransaction, createPriceMachineryPriceTransaction, 
                  createBalanceSelectMachineryPriceTransaction, createSelectMachineryPriceTransaction, 
                  snapshotGroupMachinery, createDocumentMachineryPriceTransaction
;

DESIGN machineryPriceTransactions {
    header {
        MOVE GROUP(incrementMachineryPrice,s);
        MOVE GROUP(snapshotMachineryPrice,s);
        MOVE GROUP(documentMachineryPrice,s);
    }
}

// -------------------- Создание новых атрибутов ----------------- //

META defineMachineryPriceTransactionAttributeBase(object, caption, nameProp)
    prevTransaction###object caption###' (тек.)' (Barcode barcode, GroupMachinery groupMachinery)  =
        object(prevLastFullTransaction(barcode, groupMachinery), barcode);

    snapshotAttribute(MachineryPriceTransaction t, GroupMachinery groupMachinery) +
        {  object(t, Barcode barcode) <- prevTransaction###object(barcode, groupMachinery) WHERE in(t, barcode); }

    EXTEND FORM machineryPriceTransaction PROPERTIES(t, b) nameProp###object;
    EXTEND FORM machineryPriceTransactions PROPERTIES(t, b) READONLY nameProp###object;
    EXTEND FORM machineryPriceTransactions PROPERTIES(mt, bb) READONLY  nameProp###object;
END

META defineMachineryPriceTransactionAttributeAction(object, caption, type, nameProp)
    @defineMachineryPriceTransactionAttributeBase(object, caption, nameProp);
    over###object = ABSTRACT type (MachineryPriceTransaction, Barcode);
    createAttribute(MachineryPriceTransaction t) + {  object(t, Barcode barcode) <- OVERRIDE over###object(t, barcode), object(barcode)
                                                          WHERE in(t, barcode); }
END

META defineMachineryPriceTransactionAttribute(object, caption, type)
    object caption = DATA type (MachineryPriceTransaction, Barcode);
    object(MachineryPriceTransaction t, Barcode barcode) => in(t, barcode) RESOLVE RIGHT;
    @defineMachineryPriceTransactionAttributeAction(object, caption, type, );
END

META defineMachineryPriceTransactionAttribute(object, caption, type, nameProp)
    object = DATA type (MachineryPriceTransaction, Barcode);
    object(MachineryPriceTransaction t, Barcode barcode) => in(t, barcode) RESOLVE RIGHT;
    nameProp##type caption (MachineryPriceTransaction transaction, Barcode barcode) =
        nameProp(object(transaction, barcode));
    @defineMachineryPriceTransactionAttributeAction(object, caption, type, nameProp);
END

META defineMachineryPriceTransactionAttributeStockAction(type, object, caption, nameProp)
    @defineMachineryPriceTransactionAttributeBase(object, caption, nameProp);
    over###object = ABSTRACT type (MachineryPriceTransaction, Barcode);
    createAttribute(MachineryPriceTransaction t, Stock stock) + {  object(t, Barcode barcode) <- OVERRIDE over###object(t, barcode), object(barcode, stock)
                                                                      WHERE in(t, barcode); }
END
META defineMachineryPriceTransactionAttributeStock(object, caption, type)
    object caption = DATA type (MachineryPriceTransaction, Barcode);
    object(MachineryPriceTransaction t, Barcode barcode) => in(t, barcode) RESOLVE RIGHT;
    @defineMachineryPriceTransactionAttributeStockAction(type, object, caption, );
END

// Номер PLU
pluNumber 'Номер PLU' = ABSTRACT INTEGER (MachineryPriceTransaction, Barcode);

// Набор флагов
flags 'Флаги' = ABSTRACT INTEGER (MachineryPriceTransaction, Barcode);
flags 'Флаги' = ABSTRACT INTEGER (Barcode);

snapshotDocumentMachineryPriceTransaction 'Загружать в оборудование все позиции документа' = DATA BOOLEAN ();
EXTEND FORM options
    PROPERTIES() snapshotDocumentMachineryPriceTransaction
;
DESIGN options {
    machinery {
        MOVE PROPERTY(snapshotDocumentMachineryPriceTransaction());
    }
}

@defineOption(closeDocumentMachineryPriceTransaction, 'Закрывать документы при загрузке в оборудование', machinery);

// Подключение свойств к документу
META defineDocumentMachineryPriceTransaction (document, detailProp, skuProp, stockProp)
    conditionBanTransaction = ABSTRACT BOOLEAN (###document);
    createMachineryPriceTransaction 'Загрузить в оборудование'(###document document)  { 
	NEWSESSION {
	        IF is(document) THEN
	            ASK 'Данный документ не проведен или дата документа не задана или больше текущей. Цены из него не будут учтены. Продолжить?' IF (isDraft(document) OR NOT (dateTime(document) <= currentDateTime())) AND NOT conditionBanTransaction(document) DO { 
	                IF snapshotDocumentMachineryPriceTransaction() THEN
	                    createMachineryPriceTransactionSnapshot() <- TRUE;
	                createMachineryPriceTransaction(###skuProp sku) <- TRUE IF count###detailProp##Detail(sku, document);
	                exclude(GroupMachinery group) <- skipMachineryPriceTransaction(group);
	                createMachineryPriceTransactionDocument() <- document;
	                createMachineryPriceTransaction(stockProp(document));
	                sent(document) <- TRUE WHERE isPosted(document) AND (GROUP SUM 1 IF createMachineryPriceTransaction(###skuProp sku));
	                isClosed(document) <- TRUE WHERE isPosted(document) AND closeDocumentMachineryPriceTransaction();
	                apply();
	            }
	    }
} TOOLBAR CONFIRM;
    
    createMachineryPriceTransaction(###document document) + {  createMachineryPriceTransaction(document); }
    
    createSnapshotMachineryPriceTransaction 'Перегрузить все позиции'(###document document)  { 
	NEWSESSION {
	        IF is(document) THEN
	            ASK 'Данный документ не проведен или дата документа не задана или больше текущей. Цены из него не будут учтены. Продолжить?' IF (isDraft(document) OR NOT (dateTime(document) <= currentDateTime())) AND NOT conditionBanTransaction(document) DO { 
	                createMachineryPriceTransactionSnapshot() <- TRUE;
	                createMachineryPriceTransaction(###skuProp sku) <- TRUE IF count###detailProp##Detail(sku, document);
	                createMachineryPriceTransactionDocument() <- document;
	                exclude(GroupMachinery group) <- skipMachineryPriceTransaction(group);
	                createMachineryPriceTransaction(stockProp(document));
	                sent(document) <- TRUE WHERE isPosted(document);
	                isClosed(document) <- TRUE WHERE isPosted(document) AND closeDocumentMachineryPriceTransaction();
	                apply();
	            }
	    }
} CONFIRM;
    
    createSnapshotMachineryPriceTransaction(###document document) + {  createSnapshotMachineryPriceTransaction(document); }

    showCreateMachineryPriceTransaction 'Показывать' (###document document) = isPosted(document) AND NOT Machinery.skip(document)
                                                                                                           AND NOT sent(document);
    showCreateMachineryPriceTransaction (###document document) += showCreateMachineryPriceTransaction(document);
                                                                                                           
    backgroundCreateMachineryPriceTransaction 'Цвет' (PriceTransactionDocument document) = IF countProcess(document) THEN
                                                                                RGB(255,255,128)
                                                                             ELSE
                                                                                RGB(212,255,212) IF showCreateMachineryPriceTransaction[###document](document);
END

META defineDocumentMachineryPriceTransaction (document, skuProp, stockProp)
    @defineDocumentMachineryPriceTransaction (document, document, skuProp, stockProp);
END


META extendFormDocumentMachineryPriceTransaction(form, object, document, afterProp, propContainer)
    EXTEND FORM form
        PROPERTIES(object) statusMachinery BACKGROUND backgroundCreateMachineryPriceTransaction(object) READONLY AFTER afterProp(object),        
                           createMachineryPriceTransaction SHOWIF showCreateMachineryPriceTransaction(object),
                           createSnapshotMachineryPriceTransaction SHOWIF isPosted(object)
    ;
    DESIGN form {
        propContainer{
            NEW machinery {                 
                caption = 'Загрузки' ;
                type = CONTAINERV;    
                        
                MOVE PROPERTY (createMachineryPriceTransaction(object)) { alignment = STRETCH; }
                MOVE PROPERTY (createSnapshotMachineryPriceTransaction(object)) { alignment = STRETCH; }
            }
        }
    }
END

META extendFormDocumentMachineryPriceTransactionError(form, object, document, propContainer)
    EXTEND FORM form
        OBJECTS machError = MachineryPriceTransactionError
        PROPERTIES(machError) READONLY data, date 
        FILTERS object == priceTransactionDocument(machineryPriceTransaction(machError))
    ;
    DESIGN form {
        propContainer{
            NEW machineryErrors {                 
                caption = 'Ошибки загрузки в оборудование' ;
                MOVE BOX(machError);
            }
        }
    }
END

NAVIGATOR {
    machineryExport {
        NEW machineryPriceTransactions;
        NEW requestExchanges;
    }
}

//--

notResetMachinerySelectSku 'Не сбрасывать отмеченные товары при загрузке в оборудование' = DATA BOOLEAN ();
EXTEND FORM options
    PROPERTIES() notResetMachinerySelectSku
;
DESIGN options {
    machinery {
        MOVE PROPERTY(notResetMachinerySelectSku());
    }
}

createSelectedSkuPriceTransactionDocument 'Загрузить в оборудование'(Stock stock)  { 
	NEWSESSION NESTED (select[Sku]) {
	    IF (GROUP SUM 1 IF select(Sku sku)) THEN {
	        createMachineryPriceTransactionSnapshot() <- TRUE;
	        createMachineryPriceTransaction(Sku sku) <- TRUE IF select(sku);
	        createMachineryPriceTransaction(stock);
	        
	        IF NOT notResetMachinerySelectSku() THEN {
	            select(Sku sku) <- NULL;
	        }
	        APPLY NESTED LOCAL;
	        IF canceled() THEN {
	            cancel();
	        }
	    } ELSE {
	        MESSAGE 'Не отмечены товары, необходимые к загрузке';
	    }
	}
} TOOLBAR ;

createApplySelectedSkuPriceTransactionDocument 'Загрузить в оборудование'(Stock stock)  { 
    APPLY NESTED (select[Sku]);
    IF NOT canceled() THEN {
        createSelectedSkuPriceTransactionDocument(stock);
    }
}

createSelectedSkuStockPriceTransactionDocument 'Загрузить в оборудование'()  { 
	NEWSESSION NESTED (select[Sku,Stock], createMachineryPriceTransactionSnapshot[], createMachineryPriceTransaction[Sku]) {
	    IF (GROUP SUM 1 IF select(Sku sku, Stock stock)) THEN {
	        FOR [ GROUP SUM 1 IF select(Sku sku, Stock stock) BY stock](Stock stock) DO {
	            createMachineryPriceTransactionSnapshot() <- TRUE;
	            createMachineryPriceTransaction(Sku sku) <- TRUE IF select(sku, stock);
	            exclude(GroupMachinery group) <- skipMachineryPriceTransaction(group);
	            createMachineryPriceTransaction(stock);
	        }
	        IF NOT notResetMachinerySelectSku() THEN {
	            select(Sku sku, Stock stock) <- NULL;
	        }
	        APPLY NESTED LOCAL;
	        IF canceled() THEN {
	            cancel();
	        }
	    }
	}
} TOOLBAR ;

EXTEND  FORM currentBalanceSkuStock
    PROPERTIES() createSelectedSkuStockPriceTransactionDocument DRAW sts
;
DESIGN currentBalanceSkuStock {
    actionContainer {
        NEW machineryContainer {
            caption = 'Загрузки';
            type = CONTAINERV;
            MOVE PROPERTY (createSelectedSkuStockPriceTransactionDocument());
        } 
    }
}
//-- Частичная загрузка
filter (Machinery machinery, MachineryPriceTransaction transaction)= IF npps(transaction) 
                                                                        THEN in(transaction, machinery) AND groupMachinery(machinery) == groupMachinery(transaction)
                                                                        ELSE groupMachinery(machinery) == groupMachinery(transaction); 
EXTEND FORM machineryPriceTransaction
    OBJECTS m = Machinery GRID
    PROPERTIES(m) READONLY npp, shortDescription, description, objectClassName//, dataDirectoryCashRegister
    PROPERTIES(t, m) in
    FILTERS groupMachinery(m) == groupMachinery(t) 
    PROPERTIES(m, t) cleared SHOWIF snapshot(t), 
                     succeeded, dateTimeSucceeded                     
;

DESIGN machineryPriceTransaction {
    pane {
        MOVE BOX(m);
    }
}


//filterInMachineryPriceTransactionBarcodeStock (bb,s)= GROUP SUM 1 IF inMachineryPriceTransactionBarcode(mt, bb) BY bb, stockMachineryPriceTransaction(mt);
EXTEND FORM machineryPriceTransactions

    OBJECTS m = Machinery GRID
    PROPERTIES(m) READONLY  npp, shortDescription, description, port, objectClassName//dataDirectoryCashRegister
    PROPERTIES(t, m) READONLY in
    FILTERS filter(m, t) 
    PROPERTIES(m, t) READONLY cleared SHOWIF snapshot(t),
                              succeeded, dateTimeSucceeded
    FILTERGROUP mActive
        FILTER 'Активные' NOT inactive(m) DEFAULT 

    OBJECTS dt = DATE PANEL
    PROPERTIES(dt) val = VALUE 

    OBJECTS tt = MachineryPriceTransaction LAST
    PROPERTIES(tt) READONLY VALUE, snapshot READONLY, nameGroupMachinery, nameStock, objectClassName, date, 
                            time, description, dateTimeProcessing
    PROPERTIES(tt) READONLYIF isReadonly()
                            succeeded, dateTimeSucceeded, canceled, 
                            quantityMachineryPriceTransactionError BACKGROUND quantityMachineryPriceTransactionError(tt),
                            npps TOOLBAR SHOWIF snapshot(tt)
    PROPERTIES(tt) READONLY  createdNameUser, createdHostnameComputer
    PROPERTIES(tt)          NEWSESSION addTt = NEW, EDIT, DELETE 
    FILTERS NOT succeeded(tt) AND NOT canceled(tt) //OR (countSucceededMachineriesMachineryPriceTransaction(tt) != countMachineriesGroupMachinery(groupMachineryMachineryPriceTransaction(tt)))
    FILTERGROUP stockFilter
        FILTER 'По складу' stock(tt) == s 'F11'      
    FILTERGROUP dateFilter
        FILTER 'На дату' date(tt) == dt 'F10'  
          
    OBJECTS bt = Barcode
    PROPERTIES(bt)    READONLY id
    PROPERTIES(tt, bt) READONLY name, price
    
    FILTERS in(tt, bt)
    
    OBJECTS et = MachineryPriceTransactionError LAST
    PROPERTIES(et)  READONLY data, date
    PROPERTIES(et)  PANEL  errorTrace
    FILTERS machineryPriceTransaction(et) == tt    
      
    OBJECTS mtt = Machinery GRID
    PROPERTIES(mtt) READONLY npp, shortDescription, description, port, objectClassName//, dataDirectoryCashRegister
    PROPERTIES(tt, mtt) in
    FILTERS groupMachinery(mtt) == groupMachinery(tt) 
    PROPERTIES(mtt, tt) cleared SHOWIF snapshot(t),
                        succeeded, dateTimeSucceeded
    FILTERGROUP mttActive
        FILTER 'Активные' NOT inactive(mtt) DEFAULT 
//--
    OBJECTS bb = Barcode
    PROPERTIES(bb)    READONLY id, nameSku, idSku
    FILTERGROUP price
        FILTER 'Ранее загруженные' transactionPrice(bb,s) 'F8' DEFAULT

    OBJECTS mt = MachineryPriceTransaction
    PROPERTIES(mt) READONLY snapshot, nameGroupMachinery, objectClassName, date, 
                           time, description, dateTimeProcessing, 
                           succeeded, dateTimeSucceeded, canceled, 
                           quantityMachineryPriceTransactionError BACKGROUND quantityMachineryPriceTransactionError(mt),
                           npps TOOLBAR SHOWIF snapshot(mt)
    PROPERTIES(mt) READONLY createdNameUser, createdHostnameComputer
    
    PROPERTIES(mt, bb) READONLY name, price
    ORDERS date(mt) DESC, time(mt) DESC
    FILTERS stock(mt) == s
    FILTERS in(mt, bb)          
;

@extendFormFilterAccessStock(MachineryPriceTransaction, tt, machineryPriceTransactions, stock, company);

DESIGN machineryPriceTransactions{
    pane {        
        type = TABBED ;
        NEW headerContainer{ 
            fill = 1;
            type = SPLITV;
            caption = 'Загрузка';
            MOVE BOX(t);
            MOVE specContainer {
                NEW machinery {
                    fill = 1;
                    caption = 'Оборудование';
                    MOVE BOX(m);
                } 
            }
        }
        NEW notSucceeded {
            fill = 1;
            caption = 'Незагруженные';
            type = SPLITV;
            NEW dttt {
                fill = 1;
                MOVE BOX(dt);
                MOVE BOX(tt);                       
            }
            NEW specContainer2{
                fill = 1;
                type = TABBED;
                MOVE BOX(bt);
                NEW errorContainer2 {
                    fill = 1;
                    caption = 'Сообщения об ошибках';
                    type = SPLITH;
                    MOVE BOX(et);
                    MOVE PROPERTY(errorTrace(et)) {
                        fill = 1;
                        panelCaptionVertical = TRUE;
                    }
                }
                NEW machinery2 {
                    fill = 1;
                    caption = 'Оборудование';
                    MOVE BOX(mtt);
                } 
            }
        } 
        NEW barcodeContainer {
            fill = 1;
            caption = 'Загрузка по позиции';
            MOVE BOX(bb);
            MOVE BOX(mt);            
        }               
    }
}
// --------------- Атрибуты по умолчанию ------------------ //
@defineMachineryPriceTransactionAttribute(skuGroup, 'Группа товара', SkuGroup, canonicalName);

@defineMachineryPriceTransactionAttribute(split, 'Дробный товар', BOOLEAN);
@defineMachineryPriceTransactionAttribute(passScales, 'Передавать на весы', BOOLEAN);
@defineMachineryPriceTransactionAttribute(shortNameUOM, 'Единица измерения', STRING[100]);
@defineMachineryPriceTransactionAttribute(idUOM, 'Код единицы измерения', STRING[100]);
@defineMachineryPriceTransactionAttributeStock(manufactureDate, 'Дата изготовления', DATE);
manufactureDays 'Дней с даты производства' = ABSTRACT INTEGER (MachineryPriceTransaction, Barcode);
@defineMachineryPriceTransactionAttributeStock(expiryDate, 'Срок годности (дата)', DATE);

expiryDays 'Срок годности в днях' = expiryDays(sku(Barcode barcode));
@defineMachineryPriceTransactionAttribute(expiryDays, 'Срок годности в днях', INTEGER);

//в большинстве хэндлеров без MachineryPriceTransactionPromotion вчегда будет равна price см. flags 
dataMinPrice 'Минимальная цена' = ABSTRACT NUMERIC[16,4] (Barcode, Stock);

dataMinPrice 'Минимальная цена (предв.)' = DATA NUMERIC[16,4] (MachineryPriceTransaction, Barcode);
dataMinPrice(MachineryPriceTransaction t, Barcode barcode) => in(t, barcode) RESOLVE RIGHT;
@defineMachineryPriceTransactionAttributeStockAction(NUMERIC[16,4], dataMinPrice, 'Минимальная цена', );
minPrice 'Минимальная цена (рез.)' (MachineryPriceTransaction m, Barcode b) =  min(dataMinPrice(m, b), price(m, b));

EXTEND FORM machineryPriceTransaction PROPERTIES(t, b) minPrice;
EXTEND FORM machineryPriceTransactions PROPERTIES(t, b) READONLY minPrice;
EXTEND FORM machineryPriceTransactions PROPERTIES(mt, bb) READONLY  minPrice;

retailPrice 'Цена до' = ABSTRACT NUMERIC[16,4] (Barcode, Stock);
retailPrice 'Цена до' = DATA NUMERIC[16,4] (MachineryPriceTransaction, Barcode);
retailPrice(MachineryPriceTransaction t, Barcode barcode) => in(t, barcode) RESOLVE RIGHT;
@defineMachineryPriceTransactionAttributeStockAction(NUMERIC[16,4], retailPrice, 'Цена до', );

info 'Дополнительное поле' = DATA TEXT (MachineryPriceTransaction);
info 'Дополнительное поле' = DATA TEXT (MachineryPriceTransaction, Barcode);

EXTEND FORM machineryPriceTransaction PROPERTIES info(t), info(t, b);
EXTEND FORM machineryPriceTransactions PROPERTIES READONLY info(t, b);
EXTEND FORM machineryPriceTransactions PROPERTIES READONLY  info(mt, bb);