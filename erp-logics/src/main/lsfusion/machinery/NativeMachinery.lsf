MODULE NativeMachinery;

REQUIRE MachineryPriceTransaction;

NAMESPACE Machinery;

isNative (GroupMachinery g) = left(handlerModel(g), 4) = 'lsf.';
isNative (MachineryPriceTransaction t) = isNative(groupMachinery(t));
isNative (Machinery m) = isNative(groupMachinery(m));

hasNativeMachinery(Stock s) = GROUP SUM 1 IF isNative(Machinery m) AND active(groupMachinery(m)) AND stock(m) == s;
hasNativeMachinery(RequestExchange r) = GROUP SUM 1 IF hasNativeMachinery(Stock s) AND (stock(r) == s OR in(s, r));

succeededNative 'Выгружен (Native)' = DATA BOOLEAN (RequestExchange);
dateTimeSucceededNative 'Время выгрузки (Native)' = DATA DATETIME (RequestExchange);

EXTEND FORM requestExchanges
    PROPERTIES AFTER captionRequestExchangeType(r) SHOWIF hasNativeMachinery(r) succeededNative(r), dateTimeSucceededNative(r)//, hasNativeMachinery(r)
;

EXTEND FORM requestExchange
PROPERTIES AFTER captionRequestExchangeType(r) SHOWIF hasNativeMachinery(r) succeededNative(r);

DESIGN requestExchange {
    secondRow {
        MOVE PROPERTY(succeededNative(r));              
    }            
}

sendDeltaRests ABSTRACT LIST (MachineryPriceTransaction);

sendMachineryPriceTransaction ABSTRACT LIST (MachineryPriceTransaction);

receiveGroupMachinery ABSTRACT LIST (GroupMachinery);

addMachineryError ABSTRACT (Object, STRING, TEXT);

addMachineryError (Object t, STRING data) {
    addMachineryError (t, data, System.messageCaughtException());
}

addMachineryError (Object t) {
    addMachineryError (t, System.messageCaughtException());
}

brokenIp = DATA LOCAL NESTED STRING (STRING);

sendMachineryPriceTransactions 'Загрузка прайса в оборудование (native)' () {
    brokenIp(STRING s) <- NULL;
    FOR process(MachineryPriceTransaction t) AND isNative(t) ORDER dateTime(t), t NOINLINE DO
        TRY {
            sendMachineryPriceTransaction(t);
        } CATCH {
            addMachineryError(t);        
        }
}

receiveGroupsMachinery 'Получение данных из оборудования (native)' () {
    FOR GroupMachinery g IS GroupMachinery AND isNative(g) AND active(g) NOINLINE DO
        TRY {
            receiveGroupMachinery(g);
        } CATCH {
            MESSAGE CONCAT '/n', 'error: ' + System.messageCaughtException(), 'on: ' + name(g) NOWAIT;
        }
}

addMachineryError (MachineryPriceTransaction t, STRING data, TEXT errorTrace) + {
    NEW e = MachineryPriceTransactionError {
        machineryPriceTransaction(e) <- t;
        data(e) <- data;
        errorTrace(e) <- errorTrace;
        date(e) <- currentDateTime();
    }
}

sendRequestExchange 'Передать запрос' ABSTRACT CASE (Machinery, RequestExchange); 

sendRequestExchange 'Запрос обмена данными (native)' () {
    FOR isNative(Machinery m) AND in(m, RequestExchange re) AND NOT succeededNative(re) DO {
        sendRequestExchange(m, re);
    }
}

addMachineryError (RequestExchange t, STRING data, TEXT errorTrace) + {
    NEW e = RequestExchangeError {
        requestExchange(e) <- t;
        note[RequestExchange](e) <- STRING[100](data);
        erTrace(e) <- errorTrace;
        date(e) <- currentDateTime();
    }
}

//EXTEND FORM machineryPriceTransactions PROPERTIES sendMachineryPriceTransactions(), receiveGroupsMachinery();