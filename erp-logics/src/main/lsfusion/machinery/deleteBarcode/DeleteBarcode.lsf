MODULE DeleteBarcode;

REQUIRE System, CashRegisterStore, StockTax, CashRegisterItem;

CLASS DeleteBarcode 'Запрос удаления штрихкода';
TABLE deleteBarcode(DeleteBarcode);

groupMachinery = DATA GroupMachinery(DeleteBarcode) NONULL;
nppGroupMachinery (DeleteBarcode d) = npp(groupMachinery(d)); 
overDepartmentNumberGroupMachinery(DeleteBarcode d) = overDepartmentNumberCashRegister(groupMachinery(d));
nameGroupMachinery 'Группа оборудования' (DeleteBarcode d) = name(groupMachinery(d)); 
nameModelGroupMachinery 'Модель оборудования' (DeleteBarcode d) = nameModel(groupMachinery(d)); 
handlerModelGroupMachinery (DeleteBarcode d) = handlerModel(groupMachinery(d)); 
directoryGroupMachinery (DeleteBarcode d) = directory(groupMachinery(d)); 
idDepartmentStoreGroupMachinery(DeleteBarcode d) = idStock[GroupCashRegister](groupMachinery(d));
activeGroupMachinery (DeleteBarcode d) = NOT inactive(groupMachinery(d)); 

succeeded 'Выполнен' = DATA BOOLEAN (DeleteBarcode); 
dateTimeProcessing 'Принят в обработку' = DATA DATETIME (DeleteBarcode);
dateTimeSucceeded 'Дата выполнения' = DATA DATETIME (DeleteBarcode);
barcodeObject = DATA LONG (DeleteBarcode) NONULL;
barcode 'Штрихкод' = DATA STRING[100] (DeleteBarcode) NONULL;
idSku 'Код товара' = DATA STRING[100] (DeleteBarcode) NONULL;
nameSku 'Наименование товара' = DATA ISTRING[255] (DeleteBarcode) NONULL;
idUOMSku 'Код единицы измерения товара' = DATA STRING[100] (DeleteBarcode);
shortNameUOMSku 'Ед. изм. товара' = DATA STRING[100] (DeleteBarcode);
valueVATSku 'НДС, %' = DATA NUMERIC[10,5] (DeleteBarcode);
idItemGroup 'Код группы товара' = DATA STRING[100] (DeleteBarcode);
nameItemGroup 'Наименование группы товара' = DATA STRING[250] (DeleteBarcode);
overIdSkuGroup = DATA STRING[100] (DeleteBarcode);
passScales = DATA BOOLEAN (DeleteBarcode);
split = DATA BOOLEAN (DeleteBarcode);

finishDeleteBarcode(INTEGER nppGroupMachinery, BOOLEAN markSucceeded)  { 
    IF markSucceeded THEN {
        succeeded(DeleteBarcode d) <- TRUE WHERE NOT succeeded(d) AND groupMachinery(d) == groupMachineryNpp(nppGroupMachinery);
        dateTimeSucceeded(DeleteBarcode d) <- currentDateTime() WHERE NOT dateTimeSucceeded(d) AND groupMachinery(d) == groupMachineryNpp(nppGroupMachinery);
    } ELSE {
        dateTimeProcessing(DeleteBarcode d) <- currentDateTime() WHERE NOT dateTimeProcessing(d) AND NOT succeeded(d) AND groupMachinery(d) == groupMachineryNpp(nppGroupMachinery);
    }
}

succeedDeleteBarcode(INTEGER nppGroupMachinery, STRING[48] barcode)  { 
    //todo: присылать не nppGroupMachinery, а directory (потребует изменения equ-api)
    succeeded(DeleteBarcode d) <- TRUE WHERE NOT succeeded(d) AND directory(groupMachinery(d)) == directory(groupMachineryNpp(nppGroupMachinery)) AND barcode(d) == barcode;
    dateTimeSucceeded(DeleteBarcode d) <- currentDateTime() WHERE NOT dateTimeSucceeded(d) AND directory(groupMachinery(d)) == directory(groupMachineryNpp(nppGroupMachinery)) AND barcode(d) == barcode;
}

CLASS DeleteBarcodeError 'Ошибка';
TABLE deleteBarcodeError (DeleteBarcodeError);

groupMachinery = DATA GroupMachinery(DeleteBarcodeError) NONULL;
data 'Сообщение об ошибке' = DATA STRING[200] (DeleteBarcodeError) IN base;
date 'Время возникновения' = DATA DATETIME (DeleteBarcodeError) IN base;
errorTrace 'След исключения' = DATA TEXT (DeleteBarcodeError) IN base;

disableDeleteBarcode 'Отключить создание заданий' = DATA BOOLEAN ();

FORM deleteBarcodes 'Запросы удаления штрихкодов'
    PROPERTIES disableDeleteBarcode()

    OBJECTS d = DeleteBarcode
    PROPERTIES (d) nameGroupMachinery, nameModelGroupMachinery
    PROPERTIES (d) READONLY succeeded, dateTimeProcessing, dateTimeSucceeded
    PROPERTIES (d) barcode, idSku, nameSku, idUOMSku, shortNameUOMSku, valueVATSku, idItemGroup, nameItemGroup, NEW
    
    OBJECTS e = DeleteBarcodeError
    PROPERTIES(e) READONLY data, date, errorTrace
    FILTERS groupMachinery(e) == groupMachinery(d)
;

NAVIGATOR {
    machineryExport {
        NEW deleteBarcodes;
    }
}

WHEN (DROPPED (Barcode b IS Barcode) OR DROPPED (active(b)) OR CHANGED(sku(b))) AND PREV(id(b)) AND NOT disableDeleteBarcode() DO {
    FOR GroupMachinery gm == [GROUP MIN GroupMachinery ggm IF active(ggm) AND ggm IS GroupCashRegister BY directory(ggm)](STRING[200] dir) NEW d = DeleteBarcode DO {
        barcodeObject(d) <- PREV(value(b));
        barcode(d) <- PREV (id(b));
        idSku(d) <- PREV(idSku(b));
        nameSku(d) <- OVERRIDE PREV(nameSku(b)), ' ';
        idUOMSku(d) <- PREV(idUOM(b));
        shortNameUOMSku(d) <- PREV(shortNameUOM(b));
        valueVATSku(d) <- PREV(valueVAT(sku(b), country(sku(b)), currentDate()));
        idItemGroup(d) <- PREV(id(skuGroup(sku(b))));
        nameItemGroup(d) <- name(PREV(skuGroup(sku(b))));
        groupMachinery(d) <- gm;
        overIdSkuGroup(d) <- OVERRIDE PREV(overIdSkuGroup(b)), '0';
        passScales(d) <- PREV(passScales(b));
        split(d) <- PREV(split(b));
    } 
}