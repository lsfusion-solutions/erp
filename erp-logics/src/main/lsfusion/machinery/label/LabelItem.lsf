MODULE LabelItem;

REQUIRE Label, Item;


// ------------------------------ Добавляем атрибуты в ценники ----------------------------- //

@defineLabelTransactionAttribute(captionItem, 'Название', STRING[255], Item, caption);

@defineLabelTransactionAttribute(nameBrandItem, 'Бренд', STRING[100], Item, nameBrand);

@defineLabelTransactionAttribute(nameManufacturerItem, 'Производитель', STRING[255], Item, nameManufacturer);
@defineLabelTransactionAttribute(addressManufacturerItem, 'Адрес производителя', BPSTRING[255], Item, addressManufacturer);

nameAddressManufacturerItem 'Производитель' (LabelTransactionDetail d) = CONCAT ', ', nameManufacturerItem(d), addressManufacturerItem(d);
EXTEND FORM printLabelTransaction PROPERTIES(d) READONLY nameAddressManufacturerItem;
EXTEND FORM customLabelTransaction PROPERTIES(d) nameAddressManufacturerItem;
EXTEND FORM labelTransactions PROPERTIES(dt) READONLY nameAddressManufacturerItem;

createItemLabelsTransaction 'Сформировать ценники'(Sku item, DepartmentStore stock)  { 
	NEWSESSION {
	     FOR inPrint(LabelType labelType, item, stock)
	         NEW t = LabelTransaction DO {
	             departmentStore(t) <- stock;
	             labelType(t) <- labelType;
	             
	             FOR PriceListType pt == overPriceListType(t) NOINLINE (pt) NEW d = LabelTransactionDetail DO {
	                 labelTransaction(d) <- t;
	                 sku(d) <- item;
	                 name(d) <- name(item);
	 
	                 createAttribute(d);
	 
	                 price(d) <- calcPrice(pt, d);
	                 retailPrice(d) <- overRetailPrice(d); 
	             } 
	             print(t);
	     }
	 }
}

createItemTransaction 'Сформировать ценник'(Sku item, DepartmentStore stock, LabelType labelType)  { 
	IF NOT exclude(labelType, item) THEN{
        NEWSESSION {
            NEW t = LabelTransaction {
                    departmentStore(t) <- stock;
                    labelType(t) <- labelType;
                    
                    FOR PriceListType pt == overPriceListType(t) NOINLINE (pt) NEW d = LabelTransactionDetail DO {
                        labelTransaction(d) <- t;
                        sku(d) <- item;
                        name(d) <- name(item);
                        quantity(d) <- count(labelType, sku(d));
                                                                                     
                        createAttribute(d);
        
                        price(d) <- calcPrice(pt, d);
                        retailPrice(d) <- overRetailPrice(d); 
                    } 
                    // вызываем печатную форму для каждого из них
                    print(t);
            }
        }	
	} ELSE MESSAGE 'Для данного типа ценника и товара запрещена печать';	

} IMAGE 'print.png';

EXTEND FORM item
    OBJECTS ld = DepartmentStore PANEL
    PROPERTIES(ld) SELECTOR name  
    PROPERTIES (i, ld) createItemLabelsTransaction
    FILTERS isCompany(ld)
        
    OBJECTS lt = LabelType
    PROPERTIES (lt) READONLY   name
    PROPERTIES (lt) NEWSESSION NEW, EDIT, DELETE  
    PROPERTIES (lt, i) in
    PROPERTIES (i, ld, lt) createItemTransaction GRID
    FILTERGROUP inactive FILTER 'Активные' active(lt) 'F10' DEFAULT
;

DESIGN item {
   itemDetail {
        NEW itemLabel {
            caption = 'Ценники';
            MOVE BOX(ld);
            MOVE BOX(lt);
        }    
    }
}    