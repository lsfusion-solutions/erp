MODULE LabelDirectPrint;

REQUIRE Label, Printer, Com, LabelItem;

NAMESPACE Label;

CLASS NetworkPrinter 'Сетевой принтер';
TABLE networkPrinter(NetworkPrinter);
TABLE networkPrinterEmployee(NetworkPrinter, Employee);

name 'Имя принтера' = DATA STRING[100](NetworkPrinter) IN base;
path 'Путь к принтеру' = DATA STRING[100](NetworkPrinter) IN base;

@defineExternalizable(networkPrinter, STRING[100]);

stock = DATA Stock (NetworkPrinter);
nameStock 'Склад' (NetworkPrinter p) = name(stock(p));

CLASS NetworkPrinterType 'Тип печати' {
    clientPrintService 'Служба печати на клиенте',
    clientComPort 'COM-порт на клиенте',
    clientFile 'Файловая система на клиенте',
    serverPrintService 'Служба печати на сервере',
    serverSocket 'Сокет на сервере'
}
name(NetworkPrinterType t) = staticCaption(t) IF t IS NetworkPrinterType IN id;

networkPrinterType = DATA NetworkPrinterType (NetworkPrinter);
overNetworkPrinterType(NetworkPrinter p) = OVERRIDE networkPrinterType(p), NetworkPrinterType.clientPrintService IF p IS NetworkPrinter;
nameNetworkPrinterType 'Тип печати' (NetworkPrinter p) = name(overNetworkPrinterType(p));

CONSTRAINT stock(NetworkPrinter p) AND NOT isCompany(stock(p)) CHECKED BY stock[NetworkPrinter] MESSAGE 'Склад для принтера не является складом компании'; 

countNetworkPrinter(s) = GROUP SUM 1 BY stock(NetworkPrinter p); 

in 'Отм' = DATA BOOLEAN (NetworkPrinter, Employee);

FORM networkPrinters 'Выбор принтера'
    OBJECTS s = Stock PANEL
    OBJECTS p = NetworkPrinter
    PROPERTIES (p) READONLY name, path, nameNetworkPrinterType
    FILTERS s == stock(p), in(p, currentUser())
;

FORM networkPrintersList 'Принтеры этикеток'
    OBJECTS p = NetworkPrinter
    PROPERTIES (p) id, name, path, nameStock, nameNetworkPrinterType, NEW, DELETE GRID
    PROPERTIES () getAvailablePrinters TOOLBAR DRAW p

    OBJECTS e = Employee
    PROPERTIES in(p, e)
    PROPERTIES (e) READONLY shortName, namePosition, nameMainRole
    FILTERS accessCompany(e, stock(p))
    FILTERGROUP access
        FILTER 'Основной склад' stock(p) == stock(e) 'F4'
;

DESIGN networkPrintersList {
    NEW top{
        fill = 1;
        type = CONTAINERH ;
        MOVE BOX(p);
    }
    NEW bottom {
        fill = 1;
        MOVE BOX(e);
    }
    MOVE TOOLBARBOX;
}

NAVIGATOR {
    labelNavigator {
        NEW networkPrintersList;
    }
}

CLASS TypeDirectPrint 'Тип печати'{
    dpl 'DPL',
    zpl 'ZPL',
    tspl 'TSPL'
};
TABLE barcodeTypePrint (TypeDirectPrint);

name 'Наименование' (TypeDirectPrint o) = staticCaption(o) IF o IS TypeDirectPrint CHARWIDTH 15;

FORM dialogTypeDirectPrints 'Тип печати'
    OBJECTS o = TypeDirectPrint
    PROPERTIES(o) READONLY name
    
    LIST TypeDirectPrint OBJECT o
;

dataTypeDirectPrint = DATA TypeDirectPrint(LabelType);
typeDirectPrint(LabelType lt) = OVERRIDE dataTypeDirectPrint(lt), TypeDirectPrint.dpl;
nameTypeDirectPrint 'Тип печати' (LabelType lt) = name(typeDirectPrint(lt));

CLASS CodepageDirectPrint 'Кодировка' {
    cp1251 'cp1251',
    utf8 'UTF-8',
    cp866 'cp866'
};
TABLE barcodeCodepagePrint (CodepageDirectPrint);

name 'Наименование' (CodepageDirectPrint o) = staticCaption(o) IF o IS CodepageDirectPrint CHARWIDTH 15;

FORM dialogCodepageDirectPrints 'Кодировка'
    OBJECTS o = CodepageDirectPrint
    PROPERTIES(o) READONLY name
    
    LIST CodepageDirectPrint OBJECT o
;

codepageDirectPrint(LabelType lt) = DATA CodepageDirectPrint(LabelType);
nameCodepageDirectPrint 'Кодировка' (LabelType lt) = name(codepageDirectPrint(lt));

textTemplate 'Текст шаблона' = DATA TEXT (LabelType);
printMessage 'Сообщение перед печатью' = DATA  STRING[250] (LabelType) CHARWIDTH 50;

EXTEND FORM labelType PROPERTIES textTemplate(l), nameTypeDirectPrint(l), printMessage(l), nameCodepageDirectPrint(l);

DESIGN labelType {
    specification{
        NEW itemtextCase{
            caption = 'Текст шаблона';
            fill = 1;
            MOVE PROPERTY (textTemplate(l) ){valueSize = (600, 450); panelCaptionVertical = TRUE;};
            MOVE PROPERTY (nameTypeDirectPrint(l) );
            MOVE PROPERTY (nameCodepageDirectPrint(l) );
            MOVE PROPERTY (printMessage(l) );
        }
    }
    
}

text (LabelTransactionDetail labelTransDet) = replace(textTemplate(labelType(labelTransaction(labelTransDet))),'\n','\r');

formattedText = DATA LOCAL TEXT ();
fullFormattedText = DATA LOCAL TEXT ();
extraFullFormattedText = DATA LOCAL TEXT ();
tempName = DATA  LOCAL TEXT ();
charset = DATA  LOCAL STRING[10]();

substrToWrap = FORMULA TEXT 'substring(substring(($1) from 1 for ($2)) from 1 for ($2) - CASE WHEN char_length(($1)) > ($2) THEN position(\' \' in reverse(substring(($1) from 1 for ($2)))) ELSE 0 END ) ';
replaceFirst = FORMULA TEXT 'regexp_replace(($1),($2),($3))';

toDateDDMMYYYYUS = FORMULA STRING[10] 'to_char(($1),\'DD/MM/YYYY\')';

needCustomPrint (LabelTransaction labelTrans) += TRUE IF textTemplate(labelType(labelTrans));

skipComletBarcode 'Не дополнять 5-и значные штрихкоды' = DATA BOOLEAN (LabelType);

prefixCompleteBarcode = ABSTRACT BPSTRING[2]();
completedIdBarcode(LabelTransactionDetail ld) =  IF length(idBarcode(ld)) == 5 AND prefixCompleteBarcode() 
    THEN IF skipComletBarcode(labelType(ld)) 
        THEN prefixCompleteBarcode() + idBarcode(ld)
        ELSE completeBarcode(prefixCompleteBarcode() + idBarcode(ld) + '00000') 
    ELSE idBarcode(ld);

lpad1Char 'Для 1 разряда' = DATA INTEGER (LabelType);
lpad2Char 'Для 2 разрядов' = DATA INTEGER (LabelType);
lpad3Char 'Для 3 разрядов' = DATA INTEGER (LabelType);
lpad4Char 'Для 4 разрядов' = DATA INTEGER (LabelType);

EXTEND FORM labelType
    PROPERTIES (l) lpad1Char, lpad2Char, lpad3Char, lpad4Char, skipComletBarcode
;

DESIGN labelType{
    itemtextCase{
        MOVE PROPERTY (skipComletBarcode(l));
        NEW lpad{
            caption = 'Отступы слева для цены';
            type = CONTAINERH;
            MOVE PROPERTY (lpad1Char(l));
            MOVE PROPERTY (lpad2Char(l));
            MOVE PROPERTY (lpad3Char(l));
            MOVE PROPERTY (lpad4Char(l));
        }
    }
}

caseLpad(TEXT t, LabelType lt) = CASE
    WHEN length(t) == 4 THEN OVERRIDE lpad4Char(lt), 8
    WHEN length(t) == 3 THEN OVERRIDE lpad3Char(lt), 10
    WHEN length(t) == 2 THEN OVERRIDE lpad2Char(lt), 11
    WHEN length(t) == 1 THEN OVERRIDE lpad1Char(lt), 13
    ELSE 10;

dynamicLpad(INTEGER p, LabelType lt) = lpad(TEXT(p), caseLpad(TEXT(p), lt),' ');

beforeDirectPrint  ABSTRACT LIST (LabelTransaction);
beforeDirectPrint  ABSTRACT LIST (LabelTransactionDetail);
overDirectPrint  ABSTRACT LIST (LabelTransactionDetail);

discountPercentPrefix = ABSTRACT STRING ();
skipPrintDiscountPrice = ABSTRACT BOOLEAN (LabelTransactionDetail);

overPrintNameSku = ABSTRACT STRING[255](LabelTransactionDetail);
overLabelDirectDate = ABSTRACT ISTRING[50](LabelTransaction);

dataSkuNameLineLength = DATA INTEGER(LabelType);
dataSkuNameLineLength = DATA INTEGER();
skuNameLineLength 'Длина строки наменования' (LabelType t) = OVERRIDE dataSkuNameLineLength(t), dataSkuNameLineLength(), 30;

EXTEND FORM labelType
    PROPERTIES (l) skuNameLineLength;
;

DESIGN labelType{
    itemtextCase{
        MOVE PROPERTY (skuNameLineLength(l));
    }
}

DESIGN options {
    label{
        NEW networkPrinter{
            caption = 'Сетевой принтер';
        }
    }
} 
 
@defineOption(notShowNetworkPrinterDialog, 'Не отображать диалог выбора принтера', networkPrinter);
@defineOption(baudrateComNetworkPrinder, 'Скорость COM-порта', INTEGER, networkPrinter);

countPrinters = GROUP SUM 1 IF in(NetworkPrinter p, currentUser()) BY stock( p);
currentPrinter = GROUP MIN NetworkPrinter p IF in(p, currentUser()) BY stock(p);

printer = DATA LOCAL NetworkPrinter ();

extraPrinter 'Дополнительный принтер этикеток' = DATA NetworkPrinter (DepartmentStore);
nameExtraPrinter 'Дополнительный принтер этикеток' (DepartmentStore s) = name(extraPrinter(s)) CHARWIDTH 15;

sendToNetworkPrinter (Stock st) { 
    printed() <- NULL;
    
    IF NOT printer() THEN {
        IF countPrinters(st) == 1 AND notShowNetworkPrinterDialog() THEN {
            printer() <- currentPrinter(st);
            } ELSE {
                DIALOG networkPrinters OBJECTS s = st, p INPUT NOMANAGESESSION DO 
                    printer() <- p;
        
        }
    }
    
    TRY {
        CASE WHEN networkPrinterType(printer()) == NetworkPrinterType.serverSocket 
                THEN {
                    writeToServerSocket(fullFormattedText(), charset(), getWord(path(printer()), ':', 1), INTEGER(getWord(path(printer()), ':', 2)));
                }
            WHEN networkPrinterType(printer()) == NetworkPrinterType.serverPrintService 
                THEN writeToServerPrinter(fullFormattedText(), charset(), path(printer()));
            WHEN networkPrinterType(printer()) == NetworkPrinterType.clientComPort
                THEN {
                    stringToFile(fullFormattedText(), charset(), '');
                    writeToComPort(resultFile(), (OVERRIDE baudrateComNetworkPrinder(), 9600), INTEGER (replace(path(printer()), 'COM', ''))); 
                    printed() <- TRUE;
                }
            WHEN networkPrinterType(printer()) == NetworkPrinterType.clientFile
                THEN {
                    stringToFile(fullFormattedText(), charset(), '');
                    WRITE CLIENT resultFile() TO path(printer());
                    printed() <- TRUE;
                }
        ELSE writeToPrinter(fullFormattedText(), charset(), path(printer())) ;
    } FINALLY {
        printer() <- NULL;
    }
}

isExtraPrinter 'Дополнительный принтер этикеток' = ABSTRACT BOOLEAN (LabelTransactionDetail);

customPrint(LabelTransaction labelTrans) + { 
    fullFormattedText() <- NULL;
    extraFullFormattedText() <- NULL;
    
    beforeDirectPrint(labelTrans);
    
    FOR labelTrans == labelTransaction(LabelTransactionDetail ld) ORDER ld DO {
        formattedText() <- text(ld);
        
        beforeDirectPrint(ld);
            
        CASE 
        WHEN isSubstring(formattedText(),'#EncodeWindows = Yes') OR isSubstring(formattedText(),'CODEPAGE 1251') OR codepageDirectPrint(labelType(labelTrans)) == CodepageDirectPrint.cp1251 THEN {
            charset() <-  'CP1251';
            formattedText() <- replace(formattedText(), '#EncodeWindows = Yes', '');
        } 
        WHEN codepageDirectPrint(labelType(labelTrans)) == CodepageDirectPrint.utf8 THEN{
            charset() <-  'UTF-8';
        }
        ELSE {
            charset() <-  'CP866';         
        }
        
        formattedText() <- replace(formattedText(),'@6.18.4@', CONCAT '/', 'руб', lower(shortNameUOMSku(ld)));
        formattedText() <- replace(formattedText(),'@32.1@', CASE 
            WHEN length(completedIdBarcode(ld)) == 8 THEN 
                CASE WHEN typeDirectPrint(labelType(labelTrans)) = TypeDirectPrint.zpl THEN 'B8'
                     WHEN typeDirectPrint(labelType(labelTrans)) = TypeDirectPrint.tspl THEN 'EAN8'
                     ELSE 'G'
            WHEN length(completedIdBarcode(ld)) == 12 THEN 
                CASE WHEN typeDirectPrint(labelType(labelTrans)) = TypeDirectPrint.zpl THEN 'BU'
                     WHEN typeDirectPrint(labelType(labelTrans)) = TypeDirectPrint.tspl THEN 'UPCA'
                     ELSE'B'
            WHEN length(completedIdBarcode(ld)) == 13 THEN 
                CASE WHEN typeDirectPrint(labelType(labelTrans)) = TypeDirectPrint.zpl THEN 'BE'
                     WHEN typeDirectPrint(labelType(labelTrans)) = TypeDirectPrint.tspl THEN 'EAN13'
                     ELSE 'F' 
            ELSE 
                CASE WHEN typeDirectPrint(labelType(labelTrans)) = TypeDirectPrint.zpl THEN 'B3' 
                     WHEN typeDirectPrint(labelType(labelTrans)) = TypeDirectPrint.tspl THEN '39' 
                ELSE 'E' );

        IF completedIdBarcode(ld) THEN {
            formattedText() <- replace(formattedText(),'@31.13.8@', completedIdBarcode(ld));
        } ELSE formattedText() <- replace(formattedText(),'@31.13.8@', '');
        
        formattedText() <- replace(formattedText(),'@11.10.2@', (OVERRIDE overLabelDirectDate(labelTrans), lpad(STRING[10](toDateDDMMYYYYUS(date(labelTrans))), 10,' ')));
      
        IF typeDirectPrint(labelType(labelTrans)) = TypeDirectPrint.tspl THEN {
            name(ld) <- replace(name(ld), '"', ' \\["]');
        }
        
        IF nameSku(ld) THEN { 
            formattedText() <- replaceFirst(formattedText(),'@10.30.1@', substrToWrap(name(ld), skuNameLineLength(labelType(labelTrans))));
            tempName() <- ltrim(replace(name(ld), substrToWrap(name(ld), skuNameLineLength(labelType(labelTrans))), ''));
            formattedText() <- replaceFirst(formattedText(),'@10.30.1@', substrToWrap(tempName(), skuNameLineLength(labelType(labelTrans))));
            tempName() <- ltrim(replace( tempName(), substrToWrap(tempName(), skuNameLineLength(labelType(labelTrans))), ''));
            formattedText() <- replaceFirst(formattedText(),'@10.30.1@', substrToWrap(tempName(), skuNameLineLength(labelType(labelTrans))));
            tempName() <- ltrim(replace( tempName(), substrToWrap(tempName(), skuNameLineLength(labelType(labelTrans))), ''));
            formattedText() <- replaceFirst(formattedText(),'@10.30.1@', substrToWrap(tempName(), skuNameLineLength(labelType(labelTrans))));
            tempName() <- ltrim(replace( tempName(), substrToWrap(tempName(), skuNameLineLength(labelType(labelTrans))), ''));
            formattedText() <- replaceFirst(formattedText(),'@10.30.1@', substrToWrap(tempName(), skuNameLineLength(labelType(labelTrans))));
            
            formattedText() <- replace(formattedText(),'@nameSku@', substrToWrap(name(ld), 150));
        }
        
        IF overPrintNameSku(ld) THEN {
            formattedText() <- replaceFirst(formattedText(),'@3.25.1@', substrToWrap(overPrintNameSku(ld), 25));    
        } ELSE {
            IF nameSku(ld) THEN 
                formattedText() <- replaceFirst(formattedText(),'@3.25.1@', substrToWrap(nameSku(ld), 25)); 
        }
        
        IF nameCountrySku(ld) THEN {
            formattedText() <- replaceFirst(formattedText(),'@52.25.1@', nameCountrySku(ld));   
            formattedText() <- replaceFirst(formattedText(),'@5.70.1@', nameCountrySku(ld));  
        }

        IF nameManufacturerItem(ld) THEN {
            formattedText() <- replaceFirst(formattedText(),'@52.25.1@', substrToWrap(nameManufacturerItem(ld), 25));
            tempName() <- ltrim(replace(nameManufacturerItem(ld), substrToWrap(nameManufacturerItem(ld), 25), ''));
            formattedText() <- replaceFirst(formattedText(),'@52.25.1@', substrToWrap(tempName(), 25));
            tempName() <- ltrim(replace( tempName(), substrToWrap(tempName(), 25), ''));
            formattedText() <- replaceFirst(formattedText(),'@52.25.1@', substrToWrap(tempName(), 25));   
            
            formattedText() <- replaceFirst(formattedText(),'@5.70.1@', substrToWrap(nameManufacturerItem(ld), 70));
            tempName() <- ltrim(replace(nameManufacturerItem(ld), substrToWrap(nameManufacturerItem(ld), 70), ''));
            formattedText() <- replaceFirst(formattedText(),'@5.70.1@', substrToWrap(tempName(), 70));
        } ELSE {
            formattedText() <- replace(formattedText(),'@52.25.1@', '');
            formattedText() <- replace(formattedText(),'@5.70.1@', '');
        }
        IF discountSum(ld) > 0.0 AND NOT skipPrintDiscountPrice(ld) THEN {
            formattedText() <- replace(formattedText(),'@YourDiscount@', 'Ваша скидка:');
        } ELSE formattedText() <- replace(formattedText(),'@YourDiscount@', '');
               
        //цены с копейками 
        IF priceRubB(ld) THEN {
            formattedText() <- replace(formattedText(),'@priceRub@', dynamicLpad(priceRubB(ld), labelType(ld) )) WHERE priceRubB(ld);
        } ELSE formattedText() <- replace(formattedText(),'@priceRub@', '');
        IF discountPriceRubB(ld) AND discountSum(ld) > 0.0 AND NOT skipPrintDiscountPrice(ld) THEN {
            formattedText() <- replace(formattedText(),'@discountPriceRub@', dynamicLpad(discountPriceRubB(ld), labelType(ld)) + '.') WHERE discountPriceRubB(ld);
        } ELSE formattedText() <- replace(formattedText(),'@discountPriceRub@', '');
        IF retailPriceRubB(ld) AND NOT skipPrintDiscountPrice(ld) THEN {
            formattedText() <- replace(formattedText(),'@retailPriceRub@', dynamicLpad(retailPriceRubB(ld), labelType(ld))) WHERE retailPriceRubB(ld);
        } ELSE formattedText() <- replace(formattedText(),'@retailPriceRub@', '');    
        
        IF priceKopB(ld) THEN {
            formattedText() <- replace(formattedText(),'@priceKop@', priceKopB(ld));
        } ELSE formattedText() <- replace(formattedText(),'@priceKop@', '');
        IF discountPriceKopB(ld) AND discountSum(ld) > 0.0 AND NOT skipPrintDiscountPrice(ld) THEN {
            formattedText() <- replace(formattedText(),'@discountPriceKop@', discountPriceKopB(ld)) ;
        } ELSE formattedText() <- replace(formattedText(),'@discountPriceKop@', '');
        IF retailPriceKopB(ld) AND NOT skipPrintDiscountPrice(ld)THEN {
            formattedText() <- replace(formattedText(),'@retailPriceKop@', retailPriceKopB(ld));
        } ELSE formattedText() <- replace(formattedText(),'@retailPriceKop@', '');
        
        IF discountPercent(ld) > 0 AND NOT skipPrintDiscountPrice(ld) THEN {
            formattedText() <- replace(formattedText(),'@discountPercent@', (OVERRIDE discountPercentPrefix(), '') + discountPercent(ld) + '%');
        } ELSE formattedText() <- replace(formattedText(),'@discountPercent@', '');
        
        formattedText() <- replace(formattedText(),'@33.4@', STRING[4](OVERRIDE quantity(ld), 1 IF ld IS LabelTransactionDetail));
        
        overDirectPrint(ld); 
        
        IF isExtraPrinter(ld) AND extraPrinter(departmentStore(labelTrans)) THEN {
            extraFullFormattedText() <- CONCAT '', extraFullFormattedText() , formattedText();
            formattedText() <- NULL;
        }
        
        fullFormattedText() <- CONCAT '', fullFormattedText() , formattedText();
        
    }
    
    IF countNetworkPrinter(departmentStore(labelTrans)) AND [ GROUP SUM 1 BY labelTransaction(LabelTransactionDetail d)](labelTrans) THEN {
        
        IF printMessage(labelType(labelTrans)) THEN MESSAGE printMessage(labelType(labelTrans));
        
        sendToNetworkPrinter(departmentStore(labelTrans));
        
        IF extraPrinter(departmentStore(labelTrans)) AND extraFullFormattedText() THEN {
            fullFormattedText() <- extraFullFormattedText();
            printer() <- extraPrinter(departmentStore(labelTrans));
            sendToNetworkPrinter(departmentStore(labelTrans));
        }
        
        IF NOT printed() THEN {
            DELETE labelTrans;
        }
    }

};
