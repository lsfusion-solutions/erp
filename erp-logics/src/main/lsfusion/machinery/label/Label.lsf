MODULE Label;

REQUIRE System, Store, Stock, Barcode, PriceListType, PriceRoundStore, PurchaseLedger;

// Ориентация страницы
CLASS PrintOrientation 'Ориентация' {
    portrait 'Книжная',
    landscape 'Альбомная'
}
TABLE printOrientation(PrintOrientation);

fileTemplate 'Файл шаблона' = DATA STRING[200] (PrintOrientation);

FORM printOrientation 'Ориентация'
    OBJECTS o = PrintOrientation PANEL 
    PROPERTIES(o) staticCaption, fileTemplate  
    EDIT PrintOrientation OBJECT o
;

FORM printOrientations 'Ориентации'
    OBJECTS o = PrintOrientation
    PROPERTIES(o) READONLY staticCaption, fileTemplate  
    PROPERTIES(o) NEWSESSION NEW, EDIT, DELETE 
    LIST PrintOrientation OBJECT o
;

onStarted() + { 
    fileTemplate(PrintOrientation o) <- 'Label_printLabelTransaction.jrxml' WHERE o == PrintOrientation.landscape; 
    fileTemplate(PrintOrientation o) <- 'Label_printLabelTransaction_P.jrxml' WHERE o == PrintOrientation.portrait; 
}

// типы ценников
CLASS LabelType 'Тип ценника';
TABLE labelType(LabelType);

name 'Наименование' = DATA ISTRING[50](LabelType);

@defineExternalizable(labelType, STRING[100]);
width 'Ширина' = DATA INTEGER (LabelType);
height 'Высота' = DATA INTEGER (LabelType);

orientation = DATA PrintOrientation (LabelType);
nameOrientation 'Ориентация' (LabelType labelType) = staticCaption(orientation(labelType));

fileTemplate 'Файл шаблона' = DATA STRING[200] (LabelType);

priceListType = DATA PriceListType (LabelType);
namePriceListType 'Вид цен' (LabelType labelType) = name(priceListType(labelType));

TABLE labelTypeStoreType (LabelType, StoreType);
TABLE labelTypeStore (LabelType, Store);
TABLE labelTypeDepartmentStore (LabelType, DepartmentStore);

in 'Включен' = DATA BOOLEAN (LabelType);
in(LabelType labelType) <- TRUE WHEN SET(labelType IS LabelType);

inData 'Включен' (labelType, storeType) = DATA BOOLEAN (LabelType, StoreType);
in 'Включен' (LabelType labelType, StoreType storeType) =
    OVERRIDE inData(labelType, storeType), in(labelType) AND storeType IS StoreType;
inData 'Включен' (labelType, store) = DATA BOOLEAN (LabelType, Store);
in 'Включен' (LabelType labelType, Store store) =
    OVERRIDE inData(labelType, store), in(labelType, storeType(store));
inData 'Включен' (labelType, departmentStore) = DATA BOOLEAN (LabelType, DepartmentStore);
in 'Включен' (LabelType labelType, DepartmentStore departmentStore) =
    OVERRIDE inData(labelType, departmentStore), in(labelType, store(departmentStore)) MATERIALIZED;

groupType = DATA GroupType (LabelType);
nameGroupType 'Тип классификатора' (LabelType labelType) = name(groupType(labelType));

TABLE labelTypeGroup (LabelType, Group);
dataIn 'Вкл.' = DATA BOOLEAN (LabelType, Group);
dataExclude 'Искл.' = DATA BOOLEAN (LabelType, Group); 

TABLE labelTypeSku (LabelType, Sku);
dataIn 'Вкл.' = DATA BOOLEAN (LabelType, Sku);
dataExclude 'Искл.' = DATA BOOLEAN (LabelType, Sku);

levelParent (LabelType labelType, Group group) = GROUP
                                                              MIN level(group, Group parent) IF dataIn(labelType, parent) MATERIALIZED;
nearestParent (LabelType labelType, Group group) = group(group, levelParent (labelType, group));
nearestIn 'Вкл.' (LabelType labelType, Group group) =
    dataIn(labelType, nearestParent (labelType, group)) MATERIALIZED;
    
levelParentExclude (LabelType labelType, Group group) = GROUP
                                                              MIN level(group, Group parent) IF dataExclude(labelType, parent) MATERIALIZED;
nearestParentExclude (LabelType labelType, Group group) = group(group, levelParentExclude (labelType, group));
nearestExclude 'Вкл.' (LabelType labelType, Group group) =
    dataExclude(labelType, nearestParentExclude (labelType, group)) MATERIALIZED;

in 'Вкл.' (LabelType labelType, Group group) =
    OVERRIDE dataIn(labelType, group), nearestIn(labelType, group) MATERIALIZED;
exclude 'Искл.' (LabelType labelType, Group group) =
    OVERRIDE dataExclude(labelType, group), nearestExclude(labelType, group) MATERIALIZED;
    
in 'Вкл.' (LabelType labelType, Sku sku) =
    OVERRIDE dataIn(labelType, sku), in(labelType, group(groupType(labelType), sku));
exclude 'Искл.' (LabelType labelType, Sku sku) =
    OVERRIDE dataExclude(labelType, sku), exclude(labelType, group(groupType(labelType), sku));
    
over = ABSTRACT VALUE BOOLEAN (LabelType, Sku, DepartmentStore);
skip = ABSTRACT VALUE BOOLEAN (LabelType, Sku, DepartmentStore);
in (LabelType labelType, Sku sku, DepartmentStore departmentStore) = ((in(labelType, sku) 
    AND in(labelType, departmentStore)) AND NOT skip(labelType, sku, departmentStore)) OR over(labelType, sku, departmentStore);
inPrint(LabelType labelType, Sku sku, DepartmentStore departmentStore)  = in(labelType, sku, departmentStore) AND NOT exclude(labelType, sku); 


quantityChildWithExclude(Group group, LabelType labelType) = GROUP SUM 1 IF dataExclude(labelType, Group childGroup) AND isParent(childGroup, group) MATERIALIZED;
quantityParentWithExclude (Group group, LabelType labelType) = GROUP SUM 1 IF dataExclude(labelType, Group parentGroup) AND isParent(group, parentGroup) MATERIALIZED;          
    
backgroundExclude 'Цвет' (Group group, LabelType labelType) = CASE
    WHEN dataExclude(labelType, group) THEN RGB(0,0,0)
    WHEN nearestExclude(labelType, group) THEN RGB(230,248,250) 
    WHEN quantityChildWithExclude(group, labelType) != descendantNumber(group) AND NOT quantityParentWithExclude (group, labelType) THEN RGB(203,203,203);    


//-- Множитель
dataCount 'Множитель' = DATA INTEGER (LabelType, Group);
dataCount 'Множитель' = DATA INTEGER (LabelType, Sku);

levelParentCountLabel (LabelType labelType, Group group) = GROUP
                                                              MIN level(group, Group parent) IF dataCount(labelType, parent) MATERIALIZED;
nearestParentCountLabel (LabelType labelType, Group group) = group(group, levelParentCountLabel (labelType, group));
nearestCountLabel 'Множитель' (LabelType labelType, Group group) =
    dataCount(labelType, nearestParentCountLabel (labelType, group)) MATERIALIZED;

count 'Множитель' (LabelType labelType, Group group) = OVERRIDE
    dataCount(labelType, group),
    nearestCountLabel(labelType, group),
    1 IF group IS Group IF labelType IS LabelType MATERIALIZED;

count 'Множитель' (LabelType labelType, Sku sku) =
    OVERRIDE dataCount(labelType, sku), count(labelType, group(groupType(labelType), sku));

//-- Количество для печати ценника брать множитель или из документа.
include 'Из документа'= DATA BOOLEAN (LabelType);
dataInclude 'Из документа' = DATA BOOLEAN (LabelType, Group);
dataInclude 'Из документа' = DATA BOOLEAN (LabelType, Sku);

levelParentIncludeLabel (LabelType labelType, Group group) = GROUP
                                                              MIN level(group, Group parent) IF dataInclude(labelType, parent) MATERIALIZED;
nearestParentIncludeLabel (LabelType labelType, Group group) = group(group, levelParentIncludeLabel (labelType, group));
nearestIncludeLabel 'Из документа' (LabelType labelType, Group group) =
    dataInclude(labelType, nearestParentIncludeLabel (labelType, group)) MATERIALIZED;

include 'Из документа' (LabelType labelType, Group group) = OVERRIDE
    dataInclude(labelType, group),
    nearestIncludeLabel(labelType, group),
    include(labelType) AND group IS Group MATERIALIZED;

include 'Из документа' (LabelType labelType, Sku sku) = OVERRIDE
    dataInclude(labelType, sku),
    include(labelType, group(groupType(labelType), sku));

//печать для нулевых цен
printNullPrice 'Включать позиции без цен' = DATA BOOLEAN (LabelType);

notPrintRetailPrice 'Не печатать без цены до' = DATA BOOLEAN (LabelType);

//не печеать весовой товары
notPrintNetItem 'Не печатать весовой товар' = DATA BOOLEAN (LabelType);

// Неактивный
inactive 'Неактивный' = DATA BOOLEAN (LabelType);
active 'Активный' (LabelType t) = t IS LabelType AND NOT inactive(t);

TABLE labelTypeComputer(LabelType, Computer);
customPrinter 'Имя принтера по умолчанию' = DATA STRING[250] (LabelType, Computer);

FORM labelType 'Тип ценника'
    OBJECTS l = LabelType PANEL
    PROPERTIES(l) id, name, width, height, nameOrientation, fileTemplate,
                  namePriceListType, nameGroupType, printNullPrice, notPrintRetailPrice,
                  notPrintNetItem, inactive

    TREE treeStore a =BPSTRING[3], st=StoreType, s=Store
    PROPERTIES READONLY VALUE(a), name[StockGroup](st), name(s)
    FILTERS stringEqualsAll(a), in(st, s)

    OBJECTS d=DepartmentStore
    PROPERTIES(d) READONLY depName = name
    FILTERS (d IS DepartmentStore AND NOT s IS Store AND NOT st IS StoreType) OR
            (store(d)==s AND st IS StoreType) OR
            (storeType(d)==st AND NOT s IS Store)
    PROPERTIES(l) DRAW a  in, include
    PROPERTIES in(l,st), in(l,s), in(l,d)

    ORDERS depName

    TREE treeGroup g=Group PARENT parent(g)
    PROPERTIES READONLY order(g), name(g)
    FILTERS groupType(g) == groupType(l)
    ORDERS order(g), name(g)
    FILTERGROUP inactive FILTER 'Активные' active(g) 'F5' DEFAULT

    PROPERTIES(l, g) in, count, include, exclude BACKGROUND backgroundExclude(g,l)

    OBJECTS sk = Sku
    PROPERTIES(sk) READONLY name, idBarcode
    FILTERS isParent(g, sk) OR sk IS Sku AND NOT g
    PROPERTIES(l, sk) in, count, include, exclude
    
    OBJECTS co = Computer
    PROPERTIES(co) READONLY hostname
    PROPERTIES(l, co) customPrinter

    EDIT LabelType OBJECT l
;
@extendFormFilterStockAccess(d, labelType);
@extendFormFilterStockGroupAccess(st, labelType);
@extendFormFilterStockGroupAccess(s, labelType);

DESIGN labelType {
    BOX {
        size = (1024, 768);

        MOVE BOX(l) {
            NEW wor0 {
                type = CONTAINERH;
                MOVE PROPERTY(notPrintRetailPrice(l));
                MOVE PROPERTY(notPrintNetItem(l));
                MOVE PROPERTY(inactive(l));
            }
            NEW wor1 {
                type = CONTAINERH;
                MOVE PROPERTY(name(l));
                MOVE PROPERTY(width(l));
                MOVE PROPERTY(height(l));
                MOVE PROPERTY(nameOrientation(l));
                MOVE PROPERTY(printNullPrice(l));
            }
            NEW wor2 {
                type = CONTAINERH;
                MOVE PROPERTY(id(l));
                MOVE PROPERTY(fileTemplate(l));
                MOVE PROPERTY(namePriceListType(l));
                MOVE PROPERTY(nameGroupType(l));
            }
        };
        NEW specification{
            type = TABBED;
            fill = 1;
            NEW departmentCase {
                caption = 'Склады';
                type = CONTAINERH;
                MOVE BOX(TREE treeStore);
                MOVE BOX(d) {fill = 2;}
            }
            NEW itemCase {
                caption = 'Товары';
                NEW row1 {
                    caption = 'Классификатор';
                    MOVE PROPERTY(nameGroupType(l));
                }
                NEW row2 {
                    fill = 1;
                    type = CONTAINERH;
                    MOVE BOX(TREE treeGroup);
                    MOVE BOX(sk) {fill = 2;}
                }
            }
            
            NEW computerCase {
                caption = 'Рабочие места';
                MOVE BOX (co);
            }
        }
        MOVE TOOLBARBOX;
    }
}

FORM labelTypes 'Типы ценников'
    OBJECTS l = LabelType
    PROPERTIES(l) READONLY id, name, width, height, nameOrientation, fileTemplate, namePriceListType, printNullPrice, notPrintRetailPrice, notPrintNetItem, active
    PROPERTIES(l)          NEWSESSION NEW, EDIT, DELETE     
    FILTERGROUP inactive FILTER 'Активные' active(l) 'F10' DEFAULT
    LIST LabelType OBJECT l
;

//---------------------------- Документы для печати ценников ----------------------------------------//

CLASS ABSTRACT PriceTransactionDocument 'Документ, требующий загрузки в оборудование';
TABLE priceTransactionDocument (PriceTransactionDocument);

isDraft 'Не проведен' = ABSTRACT BOOLEAN (PriceTransactionDocument) MATERIALIZED;
description 'Название документа загрузки' = ABSTRACT STRING[200] (PriceTransactionDocument) MATERIALIZED;
skip 'Не загружать' = ABSTRACT BOOLEAN (PriceTransactionDocument) MATERIALIZED;

printed 'Распечатан' = DATA BOOLEAN (PriceTransactionDocument);
printed(PriceTransactionDocument document) <- NULL WHEN SET(isDraft(document));

META implementPriceTransactionDocument(concrete)
    EXTEND CLASS concrete : Label.PriceTransactionDocument;
    isDraft[PriceTransactionDocument] (concrete document) += isDraft(document);
    description[PriceTransactionDocument] (concrete document) += STRING[200](description(document));
END

createLabelTransaction 'Распечатать ценники'  ABSTRACT ( PriceTransactionDocument) TOOLBAR CONFIRM;
createSnapshotLabelTransaction 'Перепечатать ценники'  ABSTRACT ( PriceTransactionDocument) TOOLBAR;
departmentChoise = DATA LOCAL Stock();

showPrintLabelTransaction = ABSTRACT BOOLEAN (PriceTransactionDocument);

//----------------------------------- Печать ценников -------------------------------------------------------

CLASS LabelTransaction 'Печать ценников';
TABLE labelTransaction(LabelTransaction);

@defineCreated(LabelTransaction);

date 'Дата' = DATA DATE (LabelTransaction);
date (LabelTransaction transaction) <- currentDate() WHEN SET(transaction IS LabelTransaction);

time 'Время' = DATA TIME (LabelTransaction);
time (LabelTransaction transaction) <- currentTime() WHEN SET(transaction IS LabelTransaction);

dateTime 'Дата/время' (LabelTransaction t) = dateTimeToDateTime(date(t), time(t)) MATERIALIZED IN id;

departmentStore = DATA DepartmentStore (LabelTransaction);
nameDepartmentStore 'Отдел магазина' (LabelTransaction transaction) = name(departmentStore(transaction)) IN id;
nameStore 'Магазин' (LabelTransaction transaction) = name(store(departmentStore(transaction)));
addressStore 'Адрес магазина' (LabelTransaction transaction) = address(store(departmentStore(transaction)));

nameLegalEntity 'Компания' (LabelTransaction transaction) = nameLegalEntity(departmentStore(transaction));
fullNameLegalEntity 'Компания (полное наименование)' (LabelTransaction transaction) = fullName(legalEntity(departmentStore(transaction)));

labelType 'Тип ценника' = DATA LabelType (LabelTransaction) NONULL;
nameLabelType 'Тип ценника' (LabelTransaction transaction) = name(labelType(transaction)) IN id;

//CONSTRAINT labelTypeLabelTransaction(transaction) AND NOT inLabelTypeDepartmentStore(labelTypeLabelTransaction(transaction), departmentStoreLabelTransaction(transaction))
//           CHECKED BY labelTypeLabelTransaction MESSAGE 'Тип ценника запрещен для выбранного подразделения';
           
priceListType = DATA PriceListType (LabelTransaction);     
namePriceListType 'Вид цен' (LabelTransaction labelTransaction) = name(priceListType(labelTransaction));         
localPriceListType = DATA LOCAL PriceListType ();
overPriceListType(LabelTransaction d) = OVERRIDE priceListType(d), priceListType(labelType(d)) MATERIALIZED;

fileTemplate 'Файл шаблона' (LabelTransaction transaction) = fileTemplate(labelType(transaction));

topFileTemplate 'Файл шаблона (верхний)' = fileTemplate(orientation(labelType(LabelTransaction transaction)));

priceTransactionDocument = DATA PriceTransactionDocument (LabelTransaction) INDEXED;
description 'Основание загрузки' (LabelTransaction transaction) =
    description(priceTransactionDocument(transaction));

labelTransaction (PriceTransactionDocument d) = GROUP LAST LabelTransaction l ORDER dateTime(l), l BY priceTransactionDocument(l);
labelTransaction (PriceTransactionDocument d, LabelType t) = GROUP LAST LabelTransaction l ORDER dateTime(l), l BY priceTransactionDocument(l), labelType(l);

statusLabel 'Статус печати ценника' (PriceTransactionDocument document) =
                                                        CASE
                                                            WHEN skip(document) THEN 'Загрузка не требуется' IF document IS PriceTransactionDocument
                                                            WHEN printed(document) THEN 'Распечатан' IF document IS PriceTransactionDocument
                                                            ELSE 'Не распечатан' IF document IS PriceTransactionDocument
                                                        ;

CLASS LabelTransactionDetail 'Строка печати ценников';
TABLE LabelTransactionDetail(LabelTransactionDetail);

labelTransaction = DATA LabelTransaction (LabelTransactionDetail) NONULL DELETE INDEXED;

labelType (LabelTransactionDetail d) = labelType(labelTransaction(d));
nameLabelType 'Тип ценника' (LabelTransactionDetail d) = name(labelType(d));
description 'Основание загрузки' (LabelTransactionDetail d) = description(labelTransaction(d));

priceListType(LabelTransactionDetail d) = overPriceListType(labelTransaction(d)) MATERIALIZED; 

printNullPrice = printNullPrice(labelType(LabelTransactionDetail detail));
notPrintRetailPrice = notPrintRetailPrice(labelType(LabelTransactionDetail detail));

notPrintNetItem = notPrintNetItem(labelType(LabelTransactionDetail detail));

departmentStore (LabelTransactionDetail d) = departmentStore(labelTransaction(d)) MATERIALIZED;

dateTime 'Дата/время' (LabelTransactionDetail d) = dateTime(labelTransaction(d)) MATERIALIZED;
date 'Дата' (LabelTransactionDetail d) = date(labelTransaction(d));
time 'Время' (LabelTransactionDetail d) = time(labelTransaction(d));

createdNameUser 'Создан пользователем' (LabelTransactionDetail d) = createdNameUser(labelTransaction(d));
createdTime 'Время создания' (LabelTransactionDetail d) = createdTime(labelTransaction(d)) MATERIALIZED;
createdHostnameComputer 'Создан на компьютере' (LabelTransactionDetail d) = createdHostnameComputer(labelTransaction(d));

sku = DATA Sku (LabelTransactionDetail);
idSku 'Код товара' = id(sku(LabelTransactionDetail detail));     
INDEX sku(LabelTransactionDetail d), departmentStore(d), createdTime(d), d;
nameSku 'SKU' (LabelTransactionDetail d) = name(sku(d));
dataBarcode = DATA Barcode (LabelTransactionDetail) INDEXED;
idBarcode 'Штрихкод' (LabelTransactionDetail d) = OVERRIDE id(dataBarcode(d)), idBarcode(sku(d)) CHARWIDTH 15; 

batch = DATA Batch (LabelTransactionDetail) INDEXED;
nameBatch 'Партия' (LabelTransactionDetail d) = name(batch(d));

quantity 'Кол-во' = DATA INTEGER (LabelTransactionDetail);
name 'Наименование' = DATA STRING[255] (LabelTransactionDetail);  
price 'Цена' = DATA NUMERIC[16,4] (LabelTransactionDetail);
retailPrice 'Цена до'  = DATA NUMERIC[16,4] (LabelTransactionDetail);
overRetailPrice = ABSTRACT NUMERIC[16,4] (LabelTransactionDetail);
discountPercent 'Процент экономии' (LabelTransactionDetail detail) = round0((1-price(detail)/retailPrice(detail))*100);
operation = ABSTRACT Operation.Operation (LabelTransactionDetail);
nameOperation 'Операция' = name(operation(LabelTransactionDetail detail));
discountSum 'Скидка' (LabelTransactionDetail d) = retailPrice(d) - price(d);
currency(LabelTransactionDetail d) = currency(priceListType(d));
nameCurrency 'Валюта' (LabelTransactionDetail d) = name(currency(d));

fullNameLegalEntity 'Компания (полное наименование)' (LabelTransactionDetail d) = fullNameLegalEntity(labelTransaction(d));

lastLabelTransactionDetail 'Текущая цена на ценниках' (sku, stock) =
    GROUP LAST LabelTransactionDetail ledger
          ORDER createdTime(ledger), ledger
          BY sku(ledger), departmentStore(ledger) MATERIALIZED TABLE extraSkuStock;
                    
priceLabelTransactionDetail 'Текущая цена на ценниках' (Sku s, Stock st) = (price(lastLabelTransactionDetail(s,st)) / OVERRIDE amount(dataBarcode(lastLabelTransactionDetail(s,st))), 1.0);
          
prevPriceLabelTransactionDetail'Текущая цена на ценниках'(Sku sk, Stock st) = PREV(priceLabelTransactionDetail(sk, st));

firstSort = ABSTRACT VALUE STRING[100] (LabelTransactionDetail);
secondSort = ABSTRACT VALUE STRING[100] (LabelTransactionDetail);

skipPrint 'Пропустить' = DATA LOCAL BOOLEAN (LabelTransactionDetail);
skip 'Не печатать на ценник' = ABSTRACT CASE BOOLEAN (LabelTransactionDetail);

FORM printLabelTransaction 'Печать ценников'
    OBJECTS l = LabelTransaction PANEL SUBREPORT
    PROPERTIES(l) READONLY nameLabelType, nameDepartmentStore, description,
                  date, time, nameStore, nameLegalEntity, 
                  fullNameLegalEntity, dateTime                  
    
    OBJECTS d = LabelTransactionDetail
    PROPERTIES(d) READONLY idBarcode, idSku, nameSku, nameBatch,
                           quantity, name, nameCurrency, price, 
                           retailPrice, discountSum, discountPercent, fullNameLegalEntity,
                           firstSort, secondSort
    FILTERS labelTransaction(d) == l,
            NOT skipPrint(d),
            NOT skip(d)
    ORDERS firstSort(d), secondSort(d)
    REPORT topFileTemplate(l)
    REPORTFILES l fileTemplate(l) 
;

checkPrint  ABSTRACT (LabelTransaction);
notPrint = DATA LOCAL NESTED BOOLEAN (); 

needCustomPrint = ABSTRACT BOOLEAN (LabelTransaction);
customPrint  ABSTRACT (LabelTransaction);

labelPrintAuto = DATA LOCAL NESTED BOOLEAN ();
lCustomPrinter = DATA LOCAL NESTED STRING[250]();
customPrinter(LabelTransaction l) = OVERRIDE lCustomPrinter(), customPrinter(labelType(l), currentComputer());

print(LabelTransaction t)  {
    checkPrint(t); 
    IF NOT notPrint() THEN {
        IF needCustomPrint(t) THEN
            customPrint(t);
        ELSE
            IF labelPrintAuto() THEN {
                PRINT printLabelTransaction OBJECTS l = t NOPREVIEW TO customPrinter(t);
            } ELSE {
                PRINT printLabelTransaction OBJECTS l = t TO customPrinter(t);
            }
    }
}

selected 'Отм.' = DATA LOCAL BOOLEAN (LabelTransactionDetail);
deleteNotSelectedDetail 'Удалить кроме отмеченных'(LabelTransaction t)  { 
    DELETE LabelTransactionDetail d WHERE labelTransaction(d) == t AND NOT selected(d);
} TOOLBAR;

changeBarcode(LabelTransactionDetail d)   { 
    IF [ GROUP SUM 1 IF id(Barcode b) BY sku(b)](sku(d)) > 1 THEN {
        DIALOG barcodeSku OBJECTS s = sku(d), b = dataBarcode(d) INPUT NULL DO
            dataBarcode(d) <- b;
    }
}

FORM labelTypesDialog 'Доступные типы ценников'
    OBJECTS ds = DepartmentStore  PANEL   
    FILTERS isCompany(ds)

    OBJECTS l = LabelType
    PROPERTIES(l) READONLY id, name, width, height, nameOrientation, fileTemplate, namePriceListType, printNullPrice, notPrintNetItem
    FILTERS in(l,ds)
    FILTERGROUP inactive FILTER 'Активные' active(l) 'F10' DEFAULT
;
//DESIGN labelTypesDialog { BOX { size = (800, 600); } } 

changeLabelType(LabelTransaction t)   { 
    DIALOG labelTypesDialog OBJECTS ds = departmentStore(t), l = labelType(t) INPUT NULL DO
        labelType(t) <- l;
}

background  = ABSTRACT CASE COLOR (LabelTransactionDetail);

FORM customLabelTransaction 'Печать ценников'
    OBJECTS l = LabelTransaction PANEL
    PROPERTIES(l) nameLabelType ON CHANGE changeLabelType(l), nameDepartmentStore, date, time,
                  description READONLY 
                   
    OBJECTS d = LabelTransactionDetail
    PROPERTIES(d) BACKGROUND background(d) selected, idSku READONLY, idBarcode ON CHANGE changeBarcode(d), nameSku READONLY, nameBatch,
                  nameOperation, quantity, name, nameCurrency, price, retailPrice,
                  discountSum, discountPercent, DELETE GRID
    FILTERS labelTransaction(d) == l
    
    PROPERTIES(l) DRAW d deleteNotSelectedDetail                      
    
    EDIT LabelTransaction OBJECT l    
;
DESIGN customLabelTransaction {
    BOX {
//        size = (1024, 768);
        NEW mainTabbed {
            fill = 1;
            type = TABBED;
            NEW documentBox {
                fill = 1;
                type = CONTAINERV;
                caption = 'Печать ценников';

                MOVE BOX(l);
                NEW specificationBox {
                    fill = 1;
                    MOVE BOX(d) {
                        caption = 'Спецификация';
                    }
                }
                MOVE TOOLBARBOX;
            }
        }
    }
}

@extendFormFilterAccessStock(labelTransaction, l, customLabelTransaction, departmentStore, company);

addLabelTransaction 'Добавить'(DepartmentStore dep)  { 
	NEWSESSION {
	    NEW l = LabelTransaction {
	        departmentStore(l) <- dep;
	        DIALOG customLabelTransaction OBJECTS l=l DOCKED NOCANCEL DO { 
	            print(l);
	        }
	    }
	}
} TOOLBAR IMAGE 'add.png';

printTo 'Печать ценников' (LabelTransaction labelTransaction)  { 
        print(labelTransaction);
} IMAGE 'print.png' IN print;

select 'Отм.' = DATA LOCAL BOOLEAN (LabelTransactionDetail);
countSelectLabelTransactionDetails = GROUP SUM 1 IF select(LabelTransactionDetail d);

deleteSelect 'Очистить все' ()  { 
    select(LabelTransactionDetail d) <- NULL;   
} ASON CONTEXTMENU select[LabelTransactionDetail];


countSelectedLabelTransactions (t)  =   GROUP SUM 1 IF select(LabelTransactionDetail d) BY labelTransaction(d);

printLabelTransactionDetails 'Печать ценников'()   { 
    IF countSelectLabelTransactionDetails() THEN NEWSESSION NESTED (select[LabelTransactionDetail]) {
        FOR countSelectedLabelTransactions(t)  DO {
            skipPrint(LabelTransactionDetail d) <- TRUE WHERE labelTransaction(d) ==t AND NOT select(d);
            print(t);
        }  
        apply();
    } ELSE {
        MESSAGE 'Вначале надо отметить строки для печати.';
    }

}
printLabelTransactionDetail 'Печать ценника' (LabelTransactionDetail d)  { 
    select(d) <- TRUE;  
    printLabelTransactionDetails();
}

FORM labelTransactions 'Печать ценников'
    OBJECTS d = DepartmentStore PANEL
    PROPERTIES name(d) SELECTOR

    OBJECTS l = LabelTransaction
    PROPERTIES(l) READONLY nameLabelType, description, date, time
    PROPERTIES(l) READONLY createdNameUser, createdTime, createdHostnameComputer
    PROPERTIES(d) addLabelTransaction DRAW l  
    PROPERTIES(l) NEWSESSION EDIT , DELETE  
    PROPERTIES(l) printTo  
    FILTERS departmentStore(l) == d
    ORDERS date(l), time(l)
    FILTERGROUP inactive FILTER 'Активные' active(labelType(l)) 'F10' DEFAULT

    OBJECTS dt = LabelTransactionDetail
    PROPERTIES(dt) select
    PROPERTIES(dt) READONLY BACKGROUND background(dt) idBarcode, idSku, nameSku, nameBatch,
                            quantity, name, nameCurrency, price, retailPrice, discountSum, discountPercent 
    FILTERS labelTransaction(dt) == l
    PROPERTIES printLabelTransactionDetails() TOOLBAR DRAW dt SHOWIF countSelectLabelTransactionDetails()
 // по определенной позиции и складу  
    OBJECTS s = Sku
    PROPERTIES(s)    READONLY idBarcode, name, id
    FILTERGROUP price
        FILTER 'Ранее загруженные' prevPriceLabelTransactionDetail(s, d) 'F8' DEFAULT
   
    OBJECTS dts = LabelTransactionDetail
    PROPERTIES(dts) READONLY BACKGROUND background(dts) nameLabelType, description, date, time,
            createdNameUser, createdTime, createdHostnameComputer,
            idBarcode, idSku, nameSku, nameBatch,
            quantity, name, nameCurrency, price, retailPrice, discountSum, discountPercent
            
    PROPERTIES printLabelTransactionDetail(dts) TOOLBAR 
    ORDERS date(dts) DESC, time(dts) DESC
    FILTERS sku(dts) == s,
            departmentStore(dts) == d
;

@extendFormFilterStockAccess(d, labelTransactions);

DESIGN labelTransactions {
    BOX {
        MOVE BOX(d);
        NEW pane{
            fill = 1;
            type = TABBED ;
            NEW topContainer{
                type = SPLITV;
                fill = 1;
                caption = 'Печать ценников';
    
                MOVE BOX(l);
                NEW documentDetail {
                    fill = 1;
                    type = TABBED;
        
                    MOVE BOX(dt) {
                        caption = 'Спецификация';
                    } 
                    NEW printTab {
                        caption = 'Печатные формы';
                        MOVE GROUP(print,l);
                    } 
                }              
            }
            NEW skuContainer{
                type = SPLITV;
                fill = 1;
                caption = 'Печать ценников по позиции';  
                          
                MOVE BOX(s);
                MOVE BOX(dts);
            }     
        }
        MOVE TOOLBARBOX;
    }
}

countDaysClearLabelTransaction 'За сколько дней хранить журнал печати ценников' = DATA INTEGER (); 

EXTEND FORM options PROPERTIES countDaysClearLabelTransaction();
DESIGN options { log { MOVE PROPERTY(countDaysClearLabelTransaction());} } 

lastTransaction 'Текущая цена на ценниках' (sku, stock) =
    GROUP LAST LabelTransactionDetail d
          ORDER dateTime(d), d
          WHERE d IS LabelTransactionDetail
          BY sku(d), departmentStore(d);

clearApplicationLog () + { 
	NEWSESSION {
	    IF countDaysClearLabelTransaction() THEN {
	        DELETE LabelTransactionDetail d WHERE d IS LabelTransactionDetail AND NOT d == lastTransaction(sku(d), departmentStore(d)) AND date(d) <= subtract(currentDate(), countDaysClearLabelTransaction());
	        apply();
	        
	        DELETE LabelTransaction t WHERE  t IS LabelTransaction AND NOT [ GROUP SUM 1 BY labelTransaction(LabelTransactionDetail d)](t);
	        apply();
	    }
	}
}

createAttribute  ABSTRACT LIST ( LabelTransactionDetail);

// -------------------------------- Добавление новых атрибутов -------------------------- //
META defineLabelTransactionAttributeAction(object, skuClass, skuProp)
    createAttribute(LabelTransactionDetail d) +
        {  object(d) <- skuProp(sku(d)); }

    EXTEND FORM printLabelTransaction PROPERTIES(d) READONLY object;
    EXTEND FORM customLabelTransaction PROPERTIES(d) object;
    EXTEND FORM labelTransactions PROPERTIES(dt) READONLY object PROPERTIES(dts) READONLY object;   
END

META defineLabelTransactionAttribute(object, caption, type, skuClass, skuProp)
    object caption  = DATA type (LabelTransactionDetail);
    @defineLabelTransactionAttributeAction(object, skuClass, skuProp);
END

META defineLabelTransactionOverAttributeAction(object, skuClass, skuProp)
    createAttribute(LabelTransactionDetail d) +
        {  object(d) <- OVERRIDE over###skuProp(d), skuProp(sku(d)); }

    EXTEND FORM printLabelTransaction PROPERTIES(d) READONLY object;
    EXTEND FORM customLabelTransaction PROPERTIES(d) object;
    EXTEND FORM labelTransactions PROPERTIES(dt) READONLY object PROPERTIES(dts) READONLY object;   
END

META defineLabelTransactionOverAttribute(object, caption, type, skuClass, skuProp)
    object caption  = DATA type (LabelTransactionDetail);
    over###skuProp caption  = ABSTRACT type (LabelTransactionDetail);
    @defineLabelTransactionOverAttributeAction(object, skuClass, skuProp);
END

// ---------- Атрибуты по умолчанию ------ //
@defineLabelTransactionAttribute(shortNameUOMSku, 'Ед. изм.', ISTRING[100], Sku, shortNameUOM);
// -------------------------------------------- Действия по печати ценников ------------------------------ //

documentQuantity = DATA LOCAL NUMERIC[14,3] (LabelTransactionDetail);
documentPrice = DATA LOCAL NUMERIC[16,4] (LabelTransactionDetail);

calcPrice (PriceListType pt, LabelTransactionDetail d) =
    IF  batch(d) THEN
        prevPriceA(pt, batch(d), departmentStore(d), dateTime(d))
    ELSE
        prevPriceA(pt, sku(d), departmentStore(d), dateTime(d));
skipCustomPrice = ABSTRACT BOOLEAN (LabelTransactionDetail);
WHEN LOCAL FORMS customLabelTransaction
    (CHANGED(labelType(LabelTransactionDetail d)) OR SETCHANGED (dataBarcode(d))) AND NOT skipCustomPrice(d) AND PriceListType pt == priceListType(d) NOINLINE (pt) DO {
        price(d) <- OVERRIDE 
            documentPrice(d), 
            round(calcPrice(pt, d) * (OVERRIDE amount(dataBarcode(d)), 1.0 IF d IS LabelTransactionDetail), roundCondition(departmentStore(d)));
        retailPrice(d) <- overRetailPrice(d) WHERE overRetailPrice(d);   
        
        shortNameUOMSku(d) <- shortNameUOM(dataBarcode(d)) WHERE SETCHANGED (dataBarcode(d)) AND shortNameUOM(dataBarcode(d));
}

WHEN LOCAL FORMS customLabelTransaction
    CHANGED(labelType(LabelTransactionDetail d)) DO {
        quantity(d) <- IF include(labelType(d), sku(d)) THEN 
                                                INTEGER(documentQuantity(d))
                                             ELSE 
                                                count(labelType(d), sku(d));
}

@defineLabelTransactionAttribute(nameSkuGroupSku, 'Тов. группа', STRING[250], Sku, nameSkuGroup);

@defineLabelTransactionOverAttribute(nameCountrySku, 'Страна изготовления', STRING[50], Sku, nameCountry);
manufactureDateBatch 'Дата изготовления'  = DATA DATE (LabelTransactionDetail);
useOverManufactureDate = ABSTRACT BOOLEAN (LabelTransactionDetail);
overManufactureDate = ABSTRACT DATE (LabelTransactionDetail);
createAttribute(LabelTransactionDetail d) +  //нельзя использовать override т.к. надо чтобы возвращало пустое значение если оно есть
    {  manufactureDateBatch(d) <- CASE WHEN useOverManufactureDate(d) THEN overManufactureDate(d) ELSE manufactureDate(lastOrderBatch(sku(d), departmentStore(d))); }

expiryDateBatch 'Годен до'  = DATA DATE (LabelTransactionDetail);
useOverExpiryDate = ABSTRACT BOOLEAN (LabelTransactionDetail);
overExpiryDate = ABSTRACT DATE (LabelTransactionDetail);
createAttribute(LabelTransactionDetail d) + //нельзя использовать override т.к. надо чтобы возвращало пустое значение если оно есть
    {  expiryDateBatch(d) <- CASE WHEN useOverExpiryDate(d) THEN  overExpiryDate(d) ELSE expiryDate(lastOrderBatch(sku(d), departmentStore(d))); }

EXTEND FORM printLabelTransaction PROPERTIES(d) READONLY manufactureDateBatch, expiryDateBatch;
EXTEND FORM customLabelTransaction PROPERTIES(d) manufactureDateBatch, expiryDateBatch;
EXTEND FORM labelTransactions PROPERTIES(dt) READONLY manufactureDateBatch, expiryDateBatch PROPERTIES(dts) READONLY manufactureDateBatch, expiryDateBatch;
   
residentCountrySku 'Отечественный производитель' (LabelTransactionDetail d) = resident(country(sku(d)));
supplierSku = supplierLastOrderBatch(sku(LabelTransactionDetail d), departmentStore(d));
nameSupplierSku 'Поставщик' (LabelTransactionDetail d) = name(supplierSku(d));
fullNameSupplierSku 'Поставщик полное наименование' (LabelTransactionDetail d) = fullName(supplierSku(d));
shortNameOwnershipSupplierSku 'Форма собственности (сокр.)' (LabelTransactionDetail d) =shortNameOwnership(supplierSku(d));

EXTEND FORM printLabelTransaction 
    PROPERTIES(d) READONLY residentCountrySku, nameSupplierSku, 
                  fullNameSupplierSku, shortNameOwnershipSupplierSku
    PROPERTIES(l) addressStore                  
                  
;

EXTEND FORM customLabelTransaction 
    PROPERTIES(d) residentCountrySku, nameSupplierSku, 
                  fullNameSupplierSku, shortNameOwnershipSupplierSku
    PROPERTIES(l) addressStore                   
;                  
EXTEND FORM labelTransactions 
    PROPERTIES(dt) READONLY residentCountrySku, nameSupplierSku, 
                   fullNameSupplierSku, shortNameOwnershipSupplierSku
    PROPERTIES(l) addressStore                
;        
nameAddressPhoneLegalEntity 'Наименование/Адрес/Телефон юрлица' (LabelTransactionDetail d) = 
    CONCAT ', ', 
           fullName(legalEntity(departmentStore(d))), 
           address(legalEntity(departmentStore(d))),
           'Тел. ' + phone(legalEntity(departmentStore(d)));
EXTEND FORM printLabelTransaction PROPERTIES(d) READONLY nameAddressPhoneLegalEntity;
EXTEND FORM customLabelTransaction PROPERTIES(d) nameAddressPhoneLegalEntity;
EXTEND FORM labelTransactions PROPERTIES(dt) READONLY nameAddressPhoneLegalEntity;

//-------------------------------------- Подбор ------------------------//

addDetailDialogSkuLabelTransactionDetail 'Подбор товаров'(LabelTransaction labelTransaction)  { 
    DIALOG dialogSku DO {
        FOR dialogQuantity(Sku sku) INLINE NEW w = LabelTransactionDetail DO {
            labelTransaction(w) <- labelTransaction;
            sku(w) <- sku;
            name(w) <- name(sku);
            quantity(w) <- INTEGER(dialogQuantity(sku));
            documentQuantity(w) <- dialogQuantity(sku); 
            createAttribute(w);               
        }
    }
    dialogQuantity(Sku sku) <- NULL;
} TOOLBAR;

addDetailDialogSkuStockLabelTransactionDetail 'Подбор товаров'(LabelTransaction labelTransaction)  { 
    dialogSkuStock() <- departmentStore(labelTransaction);
    dialogAll(Sku sku) <- NULL;

    addDetailDialogSkuLabelTransactionDetail(labelTransaction);
} TOOLBAR;
            
@defineDocumentDetailActions(labelTransaction);

@defineDocumentHeaderSkuQuantity(labelTransaction, sku);

quantityLabelTransactionDetail 'Кол-во товара в документе'  = 
    GROUP SUM quantity(LabelTransactionDetail idetail)
          BY  labelTransaction(idetail);
          
defaultIndex 'Номер строки (авт.)' (LabelTransactionDetail d) =
    PARTITION SUM 1
    ORDER d BY labelTransaction(d) CHARWIDTH 4;          

//-- Подбор товар/партии

labelTransactionDetail (sku, labelTransaction, stock) =  GROUP MAX LabelTransactionDetail labelTransactionDetail
    BY sku(labelTransactionDetail), labelTransaction(labelTransactionDetail), departmentStore(labelTransactionDetail);
labelTransactionDetail (Sku sku, LabelTransaction labelTransaction) = labelTransactionDetail(sku, labelTransaction, departmentStore(labelTransaction));

currentBalance 'Остаток' (Sku sku, LabelTransaction labelTransaction) = currentBalance(sku, departmentStore(labelTransaction));
prevCurrentBalance 'Остаток' (Sku sku, LabelTransaction labelTransaction) = prevCurrentBalance(sku, departmentStore(labelTransaction));
backgroundQuantity 'Цвет' (sku, labelTransaction) = ABSTRACT CASE COLOR (Sku, LabelTransaction);  

changeQuantityValue(Sku sku, LabelTransaction labelTransaction, NUMERIC[14,3] n)  { 
    IF labelTransactionDetail(sku, labelTransaction) THEN {
        IF n THEN {
            quantity(LabelTransactionDetail labelTransactionDetail) <- INTEGER(n) WHERE labelTransactionDetail == labelTransactionDetail(sku, labelTransaction);
            documentQuantity(LabelTransactionDetail labelTransactionDetail) <- n WHERE labelTransactionDetail == labelTransactionDetail(sku, labelTransaction);
            name(LabelTransactionDetail labelTransactionDetail) <- name(sku(labelTransactionDetail)) WHERE labelTransactionDetail == labelTransactionDetail(sku, labelTransaction);         
        } ELSE {
            DELETE LabelTransactionDetail d WHERE d == labelTransactionDetail(sku, labelTransaction);
        }
    } ELSE {
        IF n THEN {
            NEW d = LabelTransactionDetail {
                labelTransaction(d) <- labelTransaction;
                sku(d) <- sku;
                name(d) <- name(sku);                
                quantity (d) <- INTEGER(n);
                documentQuantity(d) <- n;
                createAttribute(d);
            }
        }
    }
}

changeQuantity(Sku sku, LabelTransaction labelTransaction)  { 
    INPUT n = NUMERIC[14,3] DO
        changeQuantityValue(sku, labelTransaction, n);
}

// Выбор всего остатка
allQuantity 'Весь остаток' = DATA LOCAL BOOLEAN (Sku, LabelTransaction);
changeAllQuantity(Sku sku, LabelTransaction labelTransaction)  { 
    INPUT b = BOOLEAN DO {
        allQuantity (sku,labelTransaction) <- b;
        changeQuantityValue(sku, labelTransaction, prevCurrentBalance(sku,labelTransaction) IF b);
    }
}
price 'Цена' (Sku sku, LabelTransaction labelTransaction) = prevPriceB(priceListType(labelType(labelTransaction)), sku, departmentStore(labelTransaction), dateTime(labelTransaction));
backgroundViewPrice 'Цвет' (sku, userInvoice) = ABSTRACT CASE COLOR (Sku, LabelTransaction); 

@extendFormDocumentSku(labelTransaction, labelTransactionDetail, customLabelTransaction, l, sku, departmentStore);
                           
EXTEND FORM customLabelTransaction 
    
    PROPERTIES(l) DRAW d addDetailDialogSkuStockLabelTransactionDetail
    
    FILTERGROUP filter
        FILTER 'С остатком ' prevCurrentBalance(ks, l) 'F10' DEFAULT
        FILTER 'В документе ' quantityLabelTransactionDetail(ks, l) 'F9'
                  
;

// ------------------------- Подключение печати ценников в документ --------------------- //
notChangePrintPrice 'Не печатать ценники, если цена не изменилась' = ABSTRACT VALUE BOOLEAN (LabelTransaction);
skipNotChangePrintPrice = ABSTRACT VALUE BOOLEAN (LabelTransactionDetail);
printExistingPrice 'Печатать готовые ценники' = ABSTRACT VALUE BOOLEAN (LabelTransaction);

inLabel 'Отм.' = DATA LOCAL BOOLEAN (Sku);
filterLabel 'Отм.' = DATA LOCAL BOOLEAN (Sku);
ok = DATA LOCAL NESTED BOOLEAN ();  
 

FORM selectLabelSkus 'Выбор товаров'
    OBJECTS s = Sku
    PROPERTIES (s) READONLY inLabel CHANGEABLE, id, idBarcode, name, canonicalNameSkuGroup, nameSkuGroup  
    FILTERS filterLabel(s)
    
    FILTERGROUP inactive FILTER 'Активные' active(s) 'F10' DEFAULT
    FILTERGROUP select FILTER 'Отм.' inLabel(s) 'F9' 
;
DESIGN selectLabelSkus{
    BOX {
        size = (1024, 768);
    }
}

overCreateLabelTransaction ABSTRACT LIST (LabelTransaction);
overCreateDocumentLabelTransaction ABSTRACT LIST (LabelTransaction);

META defineDocumentLabelTransaction (document, cls, detailProp, skuProp, batchProp, stockProp, prefix)

    createAttribute  ABSTRACT LIST ( ###detailProp##Detail, LabelTransactionDetail);    
    
    createLabelTransactionParam (cls document)  {       
        // бежим по всем типам ценников из управленческих параметров
        // для каждого создаем по операции печати ценников
        FOR ([ GROUP SUM 1 IF inLabel(###skuProp sku) AND inPrint(LabelType labelType, sku, DepartmentStore departmentStore) BY labelType, departmentStore](LabelType labelType, stockProp(document))) ORDER labelType
            NEW t = LabelTransaction DO {
                departmentStore(t) <- stockProp(document);
                priceTransactionDocument(t) <- document;
                labelType(t) <- labelType;
                
                overCreateLabelTransaction(t);
                
                LOCAL lastPriceLabel = NUMERIC[16,4] (LabelTransactionDetail);
                
                FOR PriceListType pt == overPriceListType(t) NOINLINE DO {
                    FOR document(###detailProp##Detail dd) == document AND 
                        inLabel(skuProp(dd)) AND 
                        inPrint(labelType, skuProp(dd), stockProp(document)) ORDER index(dd), dd INLINE 
                        NEW d = LabelTransactionDetail DO {
        
                        IF notChangePrintPrice(t) THEN {
                            lastPriceLabel(d) <- NUMERIC[16,4](prevPriceLabelTransactionDetail(skuProp(dd), departmentStore(t)));
                        }
                        labelTransaction(d) <- t;
                        skuProp(d) <- skuProp(dd);
                        batch(d) <- batchProp(dd) WHERE explicitBatchLedger(departmentStore(t));
                        name(d) <- IF batch(d) THEN documentName###skuProp(batch(d)) ELSE name(skuProp(d));
                        createAttribute(d);
        
                        quantity(d) <- IF include(labelType, skuProp(d))
                                                                THEN INTEGER(prefix###quantity(dd))
                                                             ELSE count(labelType, skuProp(d));
        
                        price(d) <- OVERRIDE documentPrice(d), calcPrice(pt, d);
                        IF notChangePrintPrice(t) THEN {
                            DELETE d WHERE price(d) == lastPriceLabel(d) AND NOT skipNotChangePrintPrice(d);
                        }
                        retailPrice(d) <- overRetailPrice(d);
                        createAttribute(dd, d);
                    }
                }
                overCreateDocumentLabelTransaction(t);

                DELETE LabelTransactionDetail d WHERE labelTransaction(d) == t AND NOT price(d) AND NOT printNullPrice(d);
            
                IF notCheckEqualRetailPrice() THEN
                    DELETE LabelTransactionDetail d WHERE labelTransaction(d) == t AND NOT retailPrice(d) AND notPrintRetailPrice(d) AND NOT skipDelete(d);
                ELSE
                    DELETE LabelTransactionDetail d WHERE labelTransaction(d) == t AND NOT discountPercent(d) > 0 AND notPrintRetailPrice(d) AND NOT skipDelete(d);
                
                DELETE LabelTransactionDetail d WHERE labelTransaction(d) == t AND passScales(sku(d)) AND notPrintNetItem(d);
                    
                IF [GROUP SUM 1 BY labelTransaction(LabelTransactionDetail d)](t) THEN {
                    Label.ok() <- TRUE;
                    print(t);
                } ELSE {
                    DELETE t WHERE t IS LabelTransaction;
                }
                
        }   
    };      
    
    createLabelTransaction 'Распечатать ценники'(cls document)  { 
        IF document IS cls THEN {
            IF printExistingPrice(labelTransaction(document)) THEN {
                FOR LabelTransaction t == labelTransaction(document, LabelType type) DO {
                    print(t);
                }
                printed(document) <- TRUE WHERE isPosted(document);
                APPLY;
            } ELSE
            NEWSESSION {       		       	    
                ASK 'Данный документ не проведен или дата документа не задана или больше текущей. Цены из него не будут учтены. Продолжить?' IF isDraft(document) OR NOT (dateTime(document) <= currentDateTime()) DO {             
                    Label.ok() <- NULL;
                    inLabel(###skuProp sku) <- NULL;
                    inLabel(###skuProp sku) <- TRUE IF count###detailProp##Detail(sku, document);                      
                    createLabelTransactionParam(document);             
                    printed(document) <- TRUE WHERE isPosted(document);
                    APPLY;
                    IF NOT Label.ok() THEN {
                        MESSAGE 'В данном документе нет подходящих товаров для печати ценников.';
                    }            
                }
            }
        }
    } TOOLBAR CONFIRM;
    
    overCreateLabelTransactionChoice ABSTRACT LIST (###document);
    
    createLabelTransactionChoice 'Распечатать ценники (частично)'(cls document)  {
        NEWSESSION {       		       	    
            ASK 'Данный документ не проведен или дата документа не задана или больше текущей. Цены из него не будут учтены. Продолжить?' IF isDraft(document) OR NOT (dateTime(document) <= currentDateTime()) DO {             
                Label.ok() <- NULL;
                inLabel(###skuProp sku) <- NULL;
                filterLabel(###skuProp sku) <- NULL;
                filterLabel(###skuProp sku) <- TRUE IF count###detailProp##Detail(sku, document);                   
                             
                overCreateLabelTransactionChoice(document);
                departmentChoise()<- stockProp(document);   
                
                DIALOG selectLabelSkus OBJECTS s INPUT NOMANAGESESSION DO {
                    IF NOT (GROUP SUM 1 IF inLabel(###skuProp skuProp)) THEN {
                        inLabel(s) <- TRUE;
                    }
                    createLabelTransactionParam(document);             
                    printed(document) <- TRUE WHERE isPosted(document);
                    APPLY;
                    IF NOT Label.ok() THEN {
                        MESSAGE 'В данном документе нет подходящих товаров для печати ценников.';
                    }                    
                }                                                              
            }
        }
    } TOOLBAR CONFIRM;    


    
    createLabelTransaction(cls document) + {  createLabelTransaction(document); }

    overIndex = ABSTRACT INTEGER (###detailProp##Detail);

    createSnapshotLabelTransactionParam (cls document)  { 
	                
        DIALOG selectLabelTypes OBJECTS ds = stockProp(document), l INPUT NOMANAGESESSION DO {
            IF NOT countSelectType() THEN {  
                select(l) <- TRUE;
            }                                        
            FOR select(LabelType type) NEW t = LabelTransaction DO {              
                departmentStore(t) <- stockProp(document);
                priceTransactionDocument(t) <- document;
                labelType(t) <- type;

                overCreateLabelTransaction(t);
    
                FOR PriceListType pt == overPriceListType(t) NOINLINE DO {
                    FOR document(###detailProp##Detail dd) == document AND inLabel(skuProp(dd))
                        AND NOT exclude(type, skuProp(dd)) ORDER overIndex(dd), index(dd), dd INLINE
                        NEW d = LabelTransactionDetail DO {
                            labelTransaction(d) <- t;
                            skuProp(d) <- skuProp(dd);
                            batch(d) <- batchProp(dd) WHERE explicitBatchLedger(departmentStore(t));
        
                            name(d) <- IF batch(d) THEN documentName###skuProp(batch(d)) ELSE name(skuProp(d));
                            documentQuantity(d) <- prefix###quantity(dd); 
                            
                            createAttribute(d);
                            price(d) <- OVERRIDE documentPrice(d), calcPrice(pt, d);
                            retailPrice(d) <- overRetailPrice(d) WHERE overRetailPrice(d);                       
                                                                       
                            quantity(d) <- IF NOT countLabel(departmentStore(d)) 
                                                                     THEN (IF include(labelType(d), skuProp(d)) 
                                                                        THEN INTEGER(documentQuantity(d))
                                                                         ELSE count(labelType(d), skuProp(d)))
                                                                     ELSE countLabel(departmentStore(d));                                             
                                                                                                                                                                                          
                            createAttribute(dd, d);
                    }
                }
                overCreate(t);
                IF change(stockProp(document)) THEN {
                    LOCAL printed = BOOLEAN();
                    printed() <- NULL;
                    DIALOG customLabelTransaction OBJECTS l = t NOMANAGESESSION DO {
                        print(t);
                        printed() <- TRUE;
                    }
                    IF NOT printed() THEN {
                        cancel();
                    }             
                } ELSE {
                    DELETE LabelTransactionDetail d WHERE labelTransaction(d) == t AND NOT price(d) AND NOT printNullPrice(d);
        
                    IF notCheckEqualRetailPrice() THEN
                        DELETE LabelTransactionDetail d WHERE labelTransaction(d) == t AND NOT retailPrice(d) AND notPrintRetailPrice(d) AND NOT skipDelete(d);
                    ELSE
                        DELETE LabelTransactionDetail d WHERE labelTransaction(d) == t AND NOT discountPercent(d) > 0 AND notPrintRetailPrice(d) AND NOT skipDelete(d);
                        
                    DELETE LabelTransactionDetail d WHERE labelTransaction(d) == t AND passScales(sku(d)) AND notPrintNetItem(d);
            
                    print(t);
                }                        
            }
            APPLY; 
        }                                                                                                        

    } TOOLBAR;


    createSnapshotLabelTransaction 'Перепечатать ценники'(cls document)  { 
	NEWSESSION {	
	        IF is(document) THEN 
	            ASK 'Данный документ не проведен или дата документа не задана или больше текущей. Цены из него не будут учтены. Продолжить?' IF isDraft(document) OR NOT (dateTime(document) <= currentDateTime()) DO{ 
	                
	                inLabel(###skuProp sku) <- NULL;
	                inLabel(###skuProp sku) <- TRUE IF count###detailProp##Detail(sku, document);
	                createSnapshotLabelTransactionParam(document);                                                                                                        
	            }            
	        
	    }
    } TOOLBAR;

    createSnapshotLabelTransactionChoice 'Перепечатать ценники (частично)'(cls document)  { // todo: пока не используется, возможно со временем
	    NEWSESSION {	
	        IF is(document) THEN 
	            ASK 'Данный документ не проведен или дата документа не задана или больше текущей. Цены из него не будут учтены. Продолжить?' IF isDraft(document) OR NOT (dateTime(document) <= currentDateTime()) DO{ 
	                
                inLabel(###skuProp sku) <- NULL;
                filterLabel(###skuProp sku) <- NULL;
                filterLabel(###skuProp sku) <- TRUE IF count###detailProp##Detail(sku, document);                   
                
                DIALOG selectLabelSkus OBJECTS s INPUT NOMANAGESESSION DO {
                    IF NOT (GROUP SUM 1 IF inLabel(###skuProp skuProp)) THEN {
                        inLabel(s) <- TRUE;
                    } 
                    createSnapshotLabelTransactionParam(document);                                                                                                        
	            }            
	        }
	    }
    } TOOLBAR;

    
    createSnapshotLabelTransaction(cls document) + {  createSnapshotLabelTransaction(document); }

    showPrintLabelTransaction 'Показывать' (cls document) = isPosted(document) AND NOT Label.skip(document);
                                                                                               //AND NOT printedPriceTransactionDocument(document);
    showPrintLabelTransaction (cls document) += showPrintLabelTransaction(document);
    
    backgroundPrintLabelTransaction 'Цвет' (cls document) = RGB(212,255,212) IF showPrintLabelTransaction(document) AND NOT printed(document);
END

META defineDocumentLabelTransaction (document, cls, skuProp, batchProp, stockProp, prefix)
    @defineDocumentLabelTransaction (document, cls, document, skuProp, batchProp, stockProp, prefix);
END

META defineDocumentLabelTransaction (document, cls, skuProp, batchProp, stockProp)
    @defineDocumentLabelTransaction (document, cls, skuProp, batchProp, stockProp, );
END

META extendFormDocumentLabelTransaction(form, object, document, afterProp, propContainer)
    EXTEND FORM form
        PROPERTIES(object) statusLabel BACKGROUND backgroundPrintLabelTransaction(object) READONLY AFTER afterProp(object),
                           createLabelTransaction SHOWIF showPrintLabelTransaction(object), 
                           createSnapshotLabelTransaction SHOWIF isPosted(object)
    ;

    DESIGN form {
        propContainer{
            NEW label {
                caption = 'Ценники' ;
                type = CONTAINERV;
                
                MOVE PROPERTY (createLabelTransaction(object));
                MOVE PROPERTY (createSnapshotLabelTransaction(object));
            }
        }
    }
END

NAVIGATOR {
    retailNavigator {
        NEW FOLDER labelNavigator 'Ценники' {
            NEW labelTransactions;
            NEW labelTypes;
        }
    }
}

select = DATA LOCAL BOOLEAN (Sku, LabelType, DepartmentStore);
overCreate  ABSTRACT LIST ( LabelTransaction); //существует еще overCreateDocumentLabelTransaction, который вызывается по другим кнопкам, возможно их нужно объединить
overQuantityPrint = DATA LOCAL NESTED INTEGER (Sku);

addedTransaction = DATA LOCAL LabelTransaction();

notCheckEqualRetailPrice 'Не печатать ценники только БЕЗ цены до' = DATA BOOLEAN ();
skipDelete = ABSTRACT VALUE BOOLEAN (LabelTransactionDetail);

createLabelTransaction 'Распечатать ценники'(DepartmentStore departmentStore)  { 
    // бежим по всем типам ценников из управленческих параметров
    // для каждого создаем по операции печати ценников
    FOR [ GROUP SUM 1 IF select(Sku s,LabelType l,departmentStore) AND NOT exclude(l,s) BY l](LabelType labelType) ORDER labelType NEW t = LabelTransaction DO { 
        departmentStore(t) <- departmentStore;
        labelType(t) <- labelType;
        addedTransaction() <- t;
        priceListType(t) <- localPriceListType() WHERE localPriceListType();
        
        inLabel (Sku sku) <- select(sku, labelType, departmentStore) AND NOT exclude(labelType,sku);
        overCreateLabelTransaction(t);
        
        FOR inLabel(Sku sku) AND PriceListType pt == overPriceListType(t) NOINLINE (pt) INLINE NEW d = LabelTransactionDetail DO {
            
            labelTransaction(d) <- t;
            sku(d) <- sku;

            name(d) <- name(sku(d));
            createAttribute(d);

            quantity(d) <-  OVERRIDE overQuantityPrint(sku(d)), 
                                     (IF include(labelType, sku(d)) THEN INTEGER(currentBalance(sku, departmentStore))
                                                         ELSE count(labelType, sku(d)));
                                                 
            price(d) <- OVERRIDE documentPrice(d), calcPrice(pt, d);
            retailPrice(d) <- overRetailPrice(d);
        } 
        overCreate(t);
        // вызываем печатную форму для каждого из них       

        DELETE LabelTransactionDetail d WHERE labelTransaction(d) == t AND NOT price(d) AND NOT printNullPrice(d);

        IF notCheckEqualRetailPrice() THEN
            DELETE LabelTransactionDetail d WHERE labelTransaction(d) == t AND NOT retailPrice(d) AND notPrintRetailPrice(d) AND NOT skipDelete(d);
        ELSE
            DELETE LabelTransactionDetail d WHERE labelTransaction(d) == t AND NOT discountPercent(d) > 0 AND notPrintRetailPrice(d) AND NOT skipDelete(d);
            
        DELETE LabelTransactionDetail d WHERE labelTransaction(d) == t AND passScales(sku(d)) AND notPrintNetItem(d);
         
        print(t);                 
    }
} TOOLBAR;

select 'Вкл.' = DATA LOCAL BOOLEAN (LabelType);
change 'Изменить данные' = DATA LOCAL BOOLEAN (DepartmentStore);
countLabel 'Количество ценников' = DATA LOCAL INTEGER (DepartmentStore);
countSelectType = GROUP SUM 1 IF select(LabelType t);


createSnapshotLabelTransactionDepartmentStore 'Перепечатать ценники'(Stock departmentStore, LabelType labelType)  { 

    NEW t = LabelTransaction {
        departmentStore(t) <- departmentStore;
        labelType(t) <- labelType;
        addedTransaction() <- t;
        priceListType(t) <- localPriceListType() WHERE localPriceListType();
        
        inLabel (Sku sku) <- select(sku) AND NOT exclude(labelType,sku);
        overCreateLabelTransaction(t);
        
        FOR PriceListType pt == overPriceListType(t) NOINLINE DO {
            FOR inLabel(Sku sku) ORDER nameSkuGroup2(sku), nameSkuGroup3(sku), nameSkuGroup4(sku), name(sku) INLINE NEW d = LabelTransactionDetail DO {
                labelTransaction(d) <- t;
                sku(d) <- sku;
        
                name(d) <- name(sku(d));
                documentQuantity(d) <- currentBalance(sku, departmentStore); 
        
                createAttribute(d);           
                
        
                price(d) <- OVERRIDE documentPrice(d), calcPrice(pt, d);
                retailPrice(d) <- overRetailPrice(d) WHERE overRetailPrice(d);   
        
                quantity(d) <- IF NOT countLabel(departmentStore) 
                                                         THEN (IF include(labelType(d), sku(d)) 
                                                            THEN INTEGER(documentQuantity(d))
                                                             ELSE count(labelType(d), sku(d)))
                                                         ELSE countLabel(departmentStore);     
            }
        }
        overCreate(t);
        IF change(departmentStore) THEN {
            LOCAL printed = BOOLEAN();
            printed() <- NULL;
            DIALOG customLabelTransaction OBJECTS l = t NOMANAGESESSION DO {    
                print(t);
                printed() <- TRUE;
            }             
            IF NOT printed() THEN {
                cancel();
            }             
        } ELSE {
            DELETE LabelTransactionDetail d WHERE labelTransaction(d) == t AND NOT price(d) AND NOT printNullPrice(d);

            IF notCheckEqualRetailPrice() THEN
                DELETE LabelTransactionDetail d WHERE labelTransaction(d) == t AND NOT retailPrice(d) AND notPrintRetailPrice(d) AND NOT skipDelete(d);
            ELSE
                DELETE LabelTransactionDetail d WHERE labelTransaction(d) == t AND NOT discountPercent(d) > 0 AND notPrintRetailPrice(d)  AND NOT skipDelete(d);
                
            DELETE LabelTransactionDetail d WHERE labelTransaction(d) == t AND passScales(sku(d)) AND notPrintNetItem(d);
        
            print(t);
        }     
    }  
} TOOLBAR ;


// --------------------------------- Печать ценников по отмеченным по складу ------------------------- //

notChangePrintPrice 'Не печатать ценники, если цена не изменилась' = DATA BOOLEAN ();
notResetLabelSelectSku 'Не сбрасывать отмеченные товары при печати ценников' = DATA BOOLEAN ();
printExistingPrice 'Печатать готовые ценники' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES() notResetLabelSelectSku, notChangePrintPrice, notCheckEqualRetailPrice, printExistingPrice
;
DESIGN options {
    pane {
        NEW label {
            type = CONTAINERV;
            caption = 'Ценник/стикер';
            MOVE PROPERTY(notResetLabelSelectSku());
            MOVE PROPERTY (notChangePrintPrice());
            MOVE PROPERTY (notCheckEqualRetailPrice());
            MOVE PROPERTY (printExistingPrice());
        }
    }
}

createSelectedSkuStockLabelTransaction 'Распечатать ценники'()  { 
    IF (GROUP SUM 1 IF select(Sku sku, Stock stock)) THEN {
        NEWSESSION NESTED (select[Sku,Stock]) {
            FOR [ GROUP SUM 1 IF select(Sku sku, Stock stock) BY stock] (DepartmentStore stock) AND stock IS DepartmentStore DO {        
                select(Sku sku, LabelType labelType, stock) <- select(sku, stock) AND inPrint(labelType, sku, stock);   
                createLabelTransaction(stock);
            }
            
            apply();
        }
        IF NOT notResetLabelSelectSku() THEN {
            select(Sku sku, Stock stock) <- NULL;
        }
    }
} TOOLBAR;

FORM selectLabelTypes 'Доступные типы ценников'
    OBJECTS ds = DepartmentStore  PANEL   
    PROPERTIES(ds) SELECTOR name
    PROPERTIES change(ds), countLabel(ds) 
    OBJECTS l = LabelType GRID
    PROPERTIES(l) select
    PROPERTIES(l) READONLY id, name, width, height, nameOrientation, fileTemplate,
                  namePriceListType, nameGroupType, printNullPrice, notPrintRetailPrice, notPrintNetItem
    FILTERS in(l,ds)
    FILTERGROUP inactive FILTER 'Активные' active(l) 'F10' DEFAULT
;

DESIGN selectLabelTypes { BOX { size = (800, 600); } }  

createSelectedSkuStockSnapshotLabelTransaction 'Перепечатать ценники'()  { 
    IF (GROUP SUM 1 IF select(Sku sku, Stock stock)) THEN {            
        NEWSESSION NESTED (select[Sku,Stock]) {

            FOR [ GROUP SUM 1 IF select(Sku sku, Stock stock) BY stock](DepartmentStore stock) AND stock IS DepartmentStore DO {  
                DIALOG selectLabelTypes OBJECTS ds = stock, l INPUT NOMANAGESESSION DO { 
                    select(Sku sku) <- select(sku, stock);     
                    IF NOT countSelectType() THEN {
                        select(l) <- TRUE;
                    }            
                    FOR select(LabelType type) DO {
                        createSnapshotLabelTransactionDepartmentStore(stock, type);
                    }                     
                }                                                  
            }                      
            APPLY;
        }
        IF NOT notResetLabelSelectSku() THEN {
            select(Sku sku, Stock stock) <- NULL;
        }
    }
} TOOLBAR;

EXTEND  FORM currentBalanceSkuStock
    PROPERTIES() DRAW sts createSelectedSkuStockLabelTransaction, createSelectedSkuStockSnapshotLabelTransaction 
;
// --------------------------------- Печать ценников по отмеченным по sku ------------------------- //

printSelectedSkuLabelTransaction 'Распечатать ценники'(DepartmentStore departmentStore)  { 
    IF (GROUP SUM 1 IF select(Sku sku)) THEN {
        NEWSESSION NESTED (select[Sku]) {
            select(Sku sku, LabelType labelType, departmentStore) <- select(sku) AND inPrint(labelType, sku, departmentStore);   
            createLabelTransaction(departmentStore);
            apply();
        }
        IF NOT notResetLabelSelectSku() THEN {
            select(Sku sku) <- NULL;
        }
        formRefresh();
    } ELSE {
        MESSAGE 'Не отмечены товары, для которых необходима печать ценников.';
    }
} TOOLBAR;
printSelectedSkuSnapshotLabelTransactionDepartmentStore 'Перепечатать ценники'(Stock departmentStore)  { 
    IF (GROUP SUM 1 IF select(Sku sku)) THEN  { 
        NEWSESSION NESTED (select[Sku]) {
            DIALOG selectLabelTypes OBJECTS ds = departmentStore, l INPUT NOMANAGESESSION DO {       
                IF NOT countSelectType() THEN {
                    select(l) <- TRUE;
                }                                                            
                FOR select(LabelType type) DO {
                    createSnapshotLabelTransactionDepartmentStore(departmentStore, type);
                }             
                apply();
            }
        }
        IF NOT notResetLabelSelectSku() THEN {
            select(Sku sku) <- NULL;
        }
        formRefresh();
    } ELSE {
        MESSAGE 'Не отмечены товары, для которых необходима печать ценников.';
    }
} TOOLBAR;

// Инкрементная загрузка
GROUP incrementMachineryLabel 'Инкрементная печать ценников' : public;

needLabelTransactionDepartmentStore (PriceListType type, Sku sku, Stock stock) = 
    prevPriceA(type, sku, stock, currentDateTime()) AND NOT prevPriceA(type,  sku, stock, currentDateTime()) == prevPriceLabelTransactionDetail(sku, stock); 

createAllLabelTransaction 'Все товары'(DepartmentStore stock)  { 
    select(Sku sku, LabelType labelType, stock) <- needLabelTransactionDepartmentStore(priceListType(labelType), sku, stock) 
                AND inPrint(labelType, sku, stock);   
    
    createLabelTransaction(stock);

    apply();
    IF canceled() THEN {
        cancel();
    }        
} IN incrementMachineryLabel;

createBalanceLabelTransaction 'Остатки'(DepartmentStore stock)  { 
    select(Sku sku, LabelType labelType, stock) <- needLabelTransactionDepartmentStore(priceListType(labelType), sku, stock) 
                AND inPrint(labelType, sku, stock) AND balanceA(sku, stock, currentDateTime());   
                
    createLabelTransaction(stock);

    apply();
    IF canceled() THEN {
        cancel();
    }        
} IN incrementMachineryLabel;


EXTEND FORM labelTransactions 
    PROPERTIES(d) createBalanceLabelTransaction, createAllLabelTransaction
;
DESIGN labelTransactions {
    NEW header BEFORE pane{
        type = CONTAINERH;
        MOVE BOX(d);
        MOVE GROUP(incrementMachineryLabel,d);
    }
} 


DESIGN currentBalanceSkuStock {
    actionContainer {
        NEW labelContainer {
            caption = 'Ценники';
            type = CONTAINERV;
            MOVE PROPERTY (createSelectedSkuStockLabelTransaction());
            MOVE PROPERTY (createSelectedSkuStockSnapshotLabelTransaction());
        } 
    }
}

// ----------------- Делим на рубли и копейки -------------- //
trunc = FORMULA INTEGER 'trunc($1)';

priceRubB 'Рубли' (LabelTransactionDetail d) = trunc(price(d));
priceKopB 'Копейки' (LabelTransactionDetail d) = lpad((OVERRIDE STRING[2](round0(abs(priceRubB(d) (-) price(d))*100.0)), '' IF priceRubB(d)), 2, '0');

retailPriceRubB 'Рубли (цена до)' (LabelTransactionDetail d) = trunc(retailPrice(d));
retailPriceKopB 'Копейки (цена до)' (LabelTransactionDetail d) = lpad((OVERRIDE STRING[2](round0(abs(retailPriceRubB(d) (-) retailPrice(d))*100.0)), '' IF retailPriceRubB(d)), 2, '0');

discountPriceRubB 'Рубли (скидка)' (LabelTransactionDetail d) = trunc(discountSum(d));
discountPriceKopB 'Копейки (скидка)' (LabelTransactionDetail d) = lpad((OVERRIDE STRING[2](round0(abs(discountPriceRubB(d) (-) discountSum(d))*100.0)), '' IF discountPriceRubB(d)), 2, '0');

EXTEND FORM printLabelTransaction PROPERTIES(d) READONLY priceRubB, priceKopB, retailPriceRubB, retailPriceKopB, discountPriceRubB, discountPriceKopB;
EXTEND FORM customLabelTransaction PROPERTIES(d) priceRubB, priceKopB, retailPriceRubB, retailPriceKopB, discountPriceRubB, discountPriceKopB;
EXTEND FORM labelTransactions 
    PROPERTIES(dt) READONLY priceRubB, priceKopB, retailPriceRubB, retailPriceKopB, discountPriceRubB, discountPriceKopB 
    PROPERTIES(dts) READONLY priceRubB, priceKopB, retailPriceRubB, retailPriceKopB, discountPriceRubB, discountPriceKopB
;

//базовое изображение для ценников
imageLabel = DATA IMAGEFILE ();
loadLabel 'Загрузить изображение на ценник' ()  { INPUT =imageLabel() CHANGE; }
openLabel 'Просмотреть изображение на ценник' ()  { open(imageLabel()); }
deleteLabel 'Удалить изображение на ценник' ()  { imageLabel() <- NULL; }

EXTEND FORM options
    PROPERTIES() loadLabel, openLabel, deleteLabel
;

DESIGN options {
    label {                         
        MOVE PROPERTY(loadLabel());
        MOVE PROPERTY(openLabel());
        MOVE PROPERTY(deleteLabel());
    }         

}
EXTEND FORM printLabelTransaction 
    PROPERTIES() READONLY imageLabel
;
