MODULE KS4010Scales;

REQUIRE NativeMachinery, ScalesSelfService;

NAMESPACE RBS;

loadDefaultScalesModels () + { 
    loadDefaultScalesModel('Весы РБС KS4010', 'KS4010', 'lsf.machinery.scales.rbs.KS4010');
}

isSelfService(GroupScales s) += sidModel(s) == 'KS4010';
scalesGroup (MachineryPriceTransaction t, Barcode b) += group(dataCustomGroupType(groupScales(t)), sku(b)) IF t IS MachineryPriceTransaction AND sidModel(groupScales(t)) == 'KS4010';

skilLoadImages 'Не выгружать изображения в весы' = ABSTRACT BOOLEAN (GroupScales) PREREAD;

imageRBS = DATA IMAGEFILE (Item);
WHEN CHANGED (image(Item i)) DO { 
    imageRBS(i) <- NULL;
}
barcodeRBS 'Параметр barcode (весы РБС)' = DATA INTEGER (Item) IN scales;
unitIndexRBS 'Параметр price_unit_index (весы РБС)' = DATA INTEGER (Item) IN scales;
@defineItemAttribute(barcodeRBS, 'Параметры для весов РБС', scales);
EXTEND FORM itemGroup PROPERTIES(g) userShowBarcodeRBS;
EXTEND FORM itemOptions PROPERTIES(g) READONLYIF  isReadonly() showBarcodeRBS BACKGROUND backgroundShowBarcodeRBS(g);

EXTEND FORM item PROPERTIES(i) SHOWIF showBarcodeRBS(i) barcodeRBS, unitIndexRBS;
EXTEND FORM items PROPERTIES(i) READONLYIF isReadonly() SHOWIF showAnyBarcodeRBS(g) BEFORE deletei barcodeRBS, unitIndexRBS;

code = DATA LOCAL INTEGER ();
message = DATA LOCAL STRING(INTEGER);
FORM result
    PROPERTIES () code
    OBJECTS message = INTEGER
    PROPERTIES(message) message EXTID 'value';

idCategoryNum = ABSTRACT INTEGER (MachineryPriceTransaction, Group);
idCategoryNum = ABSTRACT INTEGER (MachineryPriceTransaction, Barcode);

sendMachineryPriceTransaction(MachineryPriceTransaction t) + {
    IF handlerModel(groupMachinery(t)) = 'lsf.machinery.scales.rbs.KS4010' THEN NEWSESSION {
        NEWSESSION {
            dateTimeProcessing(t) <- currentDateTime();
            APPLY;
        }

        LOCAL groups = JSONFILE();
        LOCAL groupsImages = FILE();
        EXPORT JSON FROM
            category_num = (OVERRIDE idCategoryNum(t, Group g), INTEGER (id(g))),	//The index of the category //только цифры, если будет неверный код шлем без категории
            category_name = name(g), //The name of the category
            describ = '', //The description of the category.
            order = (OVERRIDE order(g), INTEGER (id(g)), 1000), //The order index of the category. The smaller the number, the higher priority it has when sorting categories. //пока не работает
            image = ('cat_' + id(g) + '.png') IF hasScalesImage(g) AND NOT skilLoadImages(groupMachinery(t))
            WHERE GROUP SUM 1 IF in(t, Barcode b) AND g == (OVERRIDE (scalesGroup(t, b)), skuGroup(t, b)) AND INTEGER (id(g))
            TO groups;
            
        FOR [GROUP SUM 1 IF in(t, Barcode b) BY (OVERRIDE (scalesGroup(t, b)), skuGroup(t, b))](Group g) AND hasScalesImage(g) AND NOT skilLoadImages(groupMachinery(t)) DO
            zipping(STRING[1000] f) <- FILE(scalesImage(g)) WHERE f == 'cat_' + id(g) + '.png';
        IF GROUP SUM 1 IF zipping(STRING[1000] f) THEN {
            makeZipFile();
            groupsImages()<- zipped();
        }
        
        LOCAL items = JSONFILE();
        LOCAL itemsImages = FILE();
        EXPORT JSON FROM
            product_number = (OVERRIDE STRING(pluNumber(t, Barcode b)), id(b)),
            product_code = id(b),
            product_name = name(t,b),
            name_sort = name(t,b),
            product_abbr =name(t,b),
            abbr_sort =name(t, b),
            category_num = (OVERRIDE idCategoryNum(t, b), INTEGER (idSkuGroup(t, b))),
            department_num = '1',
            sales_price = 0.0,
            original_price  = price(t, b),
            price_unit_index = 0, //-1:/pc, 0:/kg, 1:/100g, 2:/g
            ingredients = left(description(t, b), 1450), //по идее нужно именно 3000 байт посчитать, но пока так
            used_by_days = STRING (expiryDays(t, b)),
            image_filename = IF hasImage(sku(b)) AND NOT skilLoadImages(groupMachinery(t)) THEN 'item_' + id(b) + '.jpg' ELSE '',
            disabled = '0',
            barcode = (OVERRIDE barcodeRBS(sku(b)),0),
            exp_date = STRING(expiryDate(t, b)),
            pre_tare_value = (OVERRIDE tareWeight(t, b), tareWeight(b)),
            pre_tare_unit_index = 1 IF tareWeight(t, b) OR tareWeight(b) //0:kg, 1:g, 2:tj, 3:gj, 4:lb, 5:oz, 6:lz
            WHERE in(t, b)
            TO items;
        
        FOR in(t, Barcode b) AND hasImage(sku(b)) AND NOT skilLoadImages(groupMachinery(t)) AND NOT imageRBS(sku(b)) DO {
            convertedImage()<-NULL;
            TRY {
                convertImage((OVERRIDE smallImage(sku(b)), image(sku(b))), 'jpg');
                imageRBS(sku(b)) <- convertedImage();
            }
        }
        
        zipping(STRING[1000] f) <- NULL;
        FOR in(t, Barcode b) AND hasImage(sku(b)) AND NOT skilLoadImages(groupMachinery(t)) DO
            zipping(STRING[1000] f) <- FILE(imageRBS(sku(b))) WHERE f == 'item_' + id(b) + '.jpg';
        IF GROUP SUM 1 IF zipping(STRING[1000] f) THEN {
            makeZipFile();
            itemsImages() <- zipped();
        }
        
        timeoutHttp() <- 900000;
        FOR groupMachinery(Machinery m) == groupMachinery(t) AND (in(t, m) OR NOT npps(t)) AND NOT succeeded(m,t) AND NOT inactive(m) NOINLINE DO {
            
            LOCAL error = BOOLEAN ();
            LOCAL result = JSONFILE ();
            TRY {
                IF snapshot(t) AND NOT cleared(m, t) THEN {
                    LOCAL id = STRING (INTEGER );
                    
                    EXPORT JSON FROM value = 'ALL'  WHERE INTEGER i == 1;
                    EXTERNAL HTTP DELETE 'http://'+ port(m) + ':1235/category' PARAMS exportFile() TO result;
                    
                    EXTERNAL HTTP DELETE 'http://'+ port(m) + ':1235/products' PARAMS exportFile() TO result;
                    
                    cleared(m, t) <- TRUE;
                }
                
                IF groupsImages() THEN EXTERNAL HTTP POST 'http://'+ port(m) + ':1235/upload/categoryImage' BODYPARAMNAMES 'file' PARAMS groupsImages() TO result;
                
                EXTERNAL HTTP POST 'http://'+ port(m) + ':1235/category' PARAMS groups() TO result;
                IMPORT JSON FROM result() TO() code;
                IF code() THEN throwException('Ошибка выгрузки категорий');
                
                IF itemsImages() THEN EXTERNAL HTTP POST 'http://'+ port(m) + ':1235/upload/productImage' BODYPARAMNAMES 'file' PARAMS itemsImages() TO result;
                
                EXTERNAL HTTP POST 'http://'+ port(m) + ':1235/products' PARAMS items() TO result;
                IMPORT JSON FROM result() TO() code;
                IF code() THEN throwException('Ошибка выгрузки товаров');
                
            } CATCH {
                error() <- TRUE;
                NEW er = MachineryPriceTransactionError {
                    IMPORT result JSON FROM result();
                    machineryPriceTransaction(er) <- t;
                    data(er) <- CONCAT ' ', messageCaughtException(), 'код: ' + code(), 'сообщение: ' + GROUP CONCAT message(INTEGER r), '; ' ORDER r;
                    date(er) <- currentDateTime();
                    errorTrace(er) <- CONCAT '\n\n', lsfStackTraceCaughtException(), javaStackTraceCaughtException ();
                }
            }
            
            IF NOT error() THEN {
                succeeded(m, t) <- TRUE;
                dateTimeSucceeded (m, t) <- currentDateTime();
            }
            
        }
        
        IF (GROUP SUM 1 IF groupMachinery(Machinery m) == groupMachinery(t) AND (in(t, m) OR NOT npps(t)) AND NOT inactive(m)) ==
            (GROUP SUM 1 IF groupMachinery(Machinery m) == groupMachinery(t) AND succeeded(m, t)) THEN {
                succeeded(t) <- TRUE;
                dateTimeSucceeded (t) <- currentDateTime();
            }
            
        APPLY;
    }
}

migrateToJPG = DATA BOOLEAN ();

onStarted() +{
    IF NOT migrateToJPG() THEN {
        NEWSESSION {
            migrateToJPG() <- TRUE;
            imageRBS(Item i) <- NULL;
            APPLY;
        }
    }
}