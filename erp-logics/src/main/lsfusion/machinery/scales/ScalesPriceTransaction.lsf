MODULE ScalesPriceTransaction;

REQUIRE Scales, MachineryPriceTransaction;

NAMESPACE Scales;
// ----------------------------------------- Загрузка в ВУ -------------------------------------- //

CLASS ScalesPriceTransaction 'Загрузка прайса в весы' : MachineryPriceTransaction;
groupScales 'Группа весов' = DATA GroupScales (ScalesPriceTransaction);
groupMachinery (ScalesPriceTransaction transaction) += groupScales(transaction);

EXTEND FORM groupMachineryInput
    PROPERTIES(m) READONLY SHOWIF is(g)       number
;

createMachineryPriceTransaction (GroupScales groupMachinery) + { 
    IF groupMachinery IS GroupScales THEN
        NEW o = ScalesPriceTransaction
            addedTransaction() <- o;
}

skip(GroupScales groupMachinery, Barcode barcode) += WHEN groupMachinery IS GroupScales AND length(id(barcode)) != 5 THEN TRUE;

skipSnapshot 'Отключить загрузку целиком' = DATA BOOLEAN (GroupScales);
EXTEND FORM groupScales
    PROPERTIES(grs) skipSnapshot
;

EXTEND FORM groupsScales
    PROPERTIES(grs) READONLYIF isReadonly() skipSnapshot
;

skipSnapshot(ScalesPriceTransaction t) += ((groupScales(t) AND skipSnapshotMachinery(mainRole(currentUser()))) OR skipSnapshot(groupScales(t))) AND NOT allUserSnapshot(model(groupMachinery(t)));

skipLastTransaction(GroupScales g) += g IS GroupScales;

countDaysActiveScales 'Количество дней для неактивности' = DATA INTEGER ();

closeInactiveScales 'Отключить загрузку в неактивные весы' () {
    NEWSESSION {
        inactive(Scales s) <- TRUE WHERE active(groupScales(s)) AND (GROUP MAX dateTime(ScalesPriceTransaction pt) IF filter(s, pt) ) > sumDay(currentDateTime(), -countDaysActiveScales())
            AND NOT (GROUP MAX dateTimeSucceeded(s, ScalesPriceTransaction pt) IF filter(s, pt)) > sumDay(currentDateTime(), -countDaysActiveScales());
        
        IF (GROUP SUM 1 IF CHANGED(inactive(Scales s)))  THEN {
            MESSAGE 'Отключено ' + (GROUP SUM 1 IF CHANGED(inactive(Scales s) )) + ' весов' NOWAIT;
            APPLY;
        }
    }
}

openOldTransactions 'Открывть старые загрузки в оборудование при активации' = DATA BOOLEAN ();

openInactiveScales 'Проверить неактивные весы на активность' () {
    NEWSESSION {
        FOR active(groupScales(Scales s)) AND inactive(s) AND (PARTITION SUM 1 BY port(s)) == 1 DO { //не проверяем задвоенные весы, возможно они переехали в другую модель оборудования
            ping(port(s));
            IF NOT pingError() THEN {
                inactive(s) <- NULL;
                FOR openOldTransactions() AND ScalesPriceTransaction pt == (GROUP LAST ScalesPriceTransaction ppt ORDER dateTimeSucceeded(s,  ppt)) DO {
                    succeeded(ScalesPriceTransaction spt) <- NULL WHERE groupMachinery(spt) == groupMachinery(s) AND dateTime(spt) > dateTime(pt);
                }
            }
        }
        
        IF (GROUP SUM 1 IF CHANGED(inactive(Scales s)))  THEN {
            MESSAGE 'Включено ' + (GROUP SUM 1 IF CHANGED(inactive(Scales s) )) + ' весов' NOWAIT;
            APPLY;
        }
    }
}

closeOldTransactions 'Закрыть старые загрузки в оборудование' () {
    NEWSESSION {
        succeeded(ScalesPriceTransaction t) <- TRUE WHERE process(t) AND date(t) <= subtract(currentDate(), countDaysActiveScales());
        APPLY;
    }
}

EXTEND FORM groupsScales 
    PROPERTIES countDaysActiveScales(), closeOldTransactions(), closeInactiveScales(), openOldTransactions(), openInactiveScales();
    
DESIGN groupsScales {
    actionContainer{
        NEW options{
            MOVE PROPERTY (countDaysActiveScales());
            MOVE PROPERTY (openOldTransactions());
            
        }
        MOVE PROPERTY (closeOldTransactions());
        MOVE PROPERTY (closeInactiveScales());
        MOVE PROPERTY (openInactiveScales());
    }
}

plu 'Номер PLU' = ABSTRACT INTEGER (Barcode, Stock);
plu 'Номер PLU' = ABSTRACT INTEGER (GroupMachinery, Barcode);

pluNumber(GroupMachinery g, Barcode b) = OVERRIDE plu(g, b), plu(b, stock(g));

@defineMachineryPriceTransactionAttributeStock(plu, 'Номер PLU', INTEGER);
overPlu(MachineryPriceTransaction t, Barcode b) += plu(groupMachinery(t), b);

pluNumber (MachineryPriceTransaction t, Barcode b) += plu(t, b);