MODULE ScalesPLU;

REQUIRE ScalesPriceTransaction, Scales, Store;

NAMESPACE Scales;

dataPluNumber = ABSTRACT INTEGER (GroupScales, Sku);
pluNumber 'Номер PLU' = DATA INTEGER (GroupScales, Barcode);
plu (GroupMachinery g, Barcode b) += OVERRIDE pluNumber(g, b), dataPluNumber(g, sku(b));
maxPluNumber 'Максимальное значение PLU' = DATA INTEGER (GroupScales);
quantityNullPluNumber 'Кол-во не назнач. PLU' (GroupScales g) = GROUP SUM 1 IF passScales(sku(Barcode b)) AND active(sku(b)) AND in(g, sku(b)) AND NOT pluNumber(g,b);

countItemPLU (GroupScales g, INTEGER plu) = GROUP SUM 1 IF plu == pluNumber(g, Barcode b);
CONSTRAINT countItemPLU(GroupMachinery gs, INTEGER plu) > 1
    MESSAGE 'PLU уже используется в данной группе весов';

CONSTRAINT CHANGED(pluNumber(GroupScales g, Barcode b)) AND pluNumber(g, b) < 1
    MESSAGE 'Номер PLU должен быть больше 0';

CONSTRAINT (CHANGED(pluNumber(GroupScales g, Barcode b)) OR CHANGED (maxPluNumber(g))) AND pluNumber(g,b) > maxPluNumber(g)
    MESSAGE 'Номер PLU превышает максимальный';

minIndex (GroupScales g) = GROUP MIN INTEGER index IF iterate(index, 1, maxPluNumber(g)) AND NOT countItemPLU(g, index);

fillPLU 'Проставить PLU' (GroupScales g, Barcode b) { 
    IF NOT pluNumber(g,b) THEN {
        IF NOT maxPluNumber(g) THEN {
            MESSAGE 'Не задано максимальное значение PLU' NOWAIT;
            RETURN;
        }
        LOCAL i = INTEGER();
        i() <- minIndex(g);
        
        IF i() THEN {
            pluNumber(g,b) <- i();
        } ELSE {
            MESSAGE 'Счетчик PLU переполнен. Обратитесь к администартору или удалите неиспользуемые номера.' NOWAIT;
        }
    }
};

CONSTRAINT CHANGED(in(GroupScales g, sku(Barcode b))) AND pluNumber(g,b) AND NOT in(g,sku(b))
    MESSAGE 'Должна быть доступна группа для товара, у которого задан PLU';

inPrint = DATA LOCAL BOOLEAN(Barcode);

FORM printPLU 'PLU'
    OBJECTS g = GroupScales PANEL
    PROPERTIES(g) READONLY name
    
    OBJECTS s = Barcode
    PROPERTIES READONLY pluNumber(g,s), id(s), nameSku(s)
    FILTERS pluNumber(g,s)
    FILTERS inPrint(s)
    ORDERS nameSku(s)
;

activeSku'Активный'(Barcode b) = active(sku(b));

FORM pluDashboard 'Задание PLU'
    OBJECTS d = DepartmentStore PANEL
    PROPERTIES(d) name SELECTOR
    FILTERS accessCompany(currentUser(), d)
    
    OBJECTS g = GroupScales
    PROPERTIES(g) READONLY npp, name
    PROPERTIES(g) maxPluNumber, quantityNullPluNumber READONLY
    FILTERS stock(g) == d
    FILTERGROUP activeGroup FILTER 'Активные' active(g) DEFAULT
    
    TREE skuTree sk = SkuGroup PARENT parent(sk)
    PROPERTIES READONLY order(sk), name(sk)
    ORDERS order(sk), name(sk)
    FILTERGROUP inactive FILTER 'Активные' active(sk) DEFAULT
    
    OBJECTS b = Barcode
    PROPERTIES pluNumber(g,b)
    PROPERTIES(b) READONLY id, nameSku, idSku, activeSku
    PROPERTIES fillPLU(g,b) SHOWIF NOT pluNumber(g,b) TOOLBAR
    FILTERS passScales(b) AND length(id(b)) < 6 AND active(b) AND in(g,sku(b))
    FILTERS isParent(sk,sku(b))
    FILTERGROUP activeSku FILTER 'Активные' activeSku(b) DEFAULT
    FILTERGROUP plu FILTER 'Без PLU' NOT pluNumber(g,b)
                    FILTER 'С PLU' pluNumber(g,b)
    FILTERGROUP filter FILTER 'С ценой' prevPriceA(priceListType(g),sku(b),stock(g),currentDateTime()) DEFAULT
                       FILTER 'С остатком' currentBalance(sku(b),stock(g))
;

DESIGN pluDashboard {
    OBJECTS {
        type = CONTAINERV;
        NEW filters {
            MOVE PROPERTY(name(d)){
                caption='Магазин';
                charWidth = 40;
            }
        }
        NEW tables {
            type = SPLITH;
            fill = 1;
            NEW left {
                type = SPLITV;
                fill = 1;
                MOVE BOX(g){fill=1;}
                MOVE BOX (TREE skuTree){fill=2;}
            }
            MOVE BOX(b){fill=2;}
        }
    }
}

printPLU 'Список PLU' (GroupScales g) {
    inPrint(Barcode b) <- [ FILTER pluDashboard.b](b);
    PRINT printPLU OBJECTS g = g;
} IMAGE 'print.png';
printPLUXLS 'Список PLU(xls)' (GroupScales g) {
    inPrint(Barcode b) <- [ FILTER pluDashboard.b](b);
    PRINT printPLU OBJECTS g = g XLSX;
} IMAGE 'print.png';

fillPLU 'Проставить PLU (по фильтру)' (GroupScales g) {
    IF NOT maxPluNumber(g) THEN {
        MESSAGE 'Не задано максимальное значение PLU' NOWAIT;
        RETURN;
    } ELSE {
        IF (GROUP SUM 1 IF [ FILTER pluDashboard.b](Barcode b) AND b IS Barcode AND NOT pluNumber(g,b)) > (GROUP SUM 1 IF iterate(INTEGER index, 1, maxPluNumber(g)) AND NOT countItemPLU(g, index)) THEN {
            MESSAGE 'Счетчик PLU переполнен. Обратитесь к администартору или удалите неиспользуемые номера.' NOWAIT;
        } ELSE FOR [ FILTER pluDashboard.b](Barcode b) AND b IS Barcode AND NOT pluNumber(g,b) DO {
            pluNumber(g,b) <- minIndex(g);
        }
        APPLY;
    }
}
EXTEND FORM pluDashboard
    PROPERTIES(g) TOOLBAR printPLU, printPLUXLS
    PROPERTIES fillPLU(g) TOOLBAR DRAW b
;

NAVIGATOR {
    retailDashboardNavigator {
        NEW pluDashboard;
    }
}