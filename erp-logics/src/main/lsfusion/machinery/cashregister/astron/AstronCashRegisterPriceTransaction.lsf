MODULE AstronCashRegisterPriceTransaction;

REQUIRE CashRegisterPriceTransaction, LotTypeBy, EDIGTIN;

NAMESPACE Astron;


sendGTIN 'Выгружать GTIN' = DATA BOOLEAN (CashRegisterModel);
sendLotType 'Выгружать признак маркировки' = DATA BOOLEAN (CashRegisterModel);

CONSTRAINT DROPPED(sendLotType(CashRegisterModel m)) AND (GROUP SUM 1 IF lotType(Item i) OR (UKZ(i)==TTRUE)) 
    MESSAGE 'Есть товары с признаком марткировки! Перед отключеним выгрузки нужно выгрузить их без признака маркировки! ' + [STRING[150](GROUP CONCAT idBarcode(Item i) IF lotType(i), ',' ORDER i)]();

CONSTRAINT sendLotType(CashRegisterModel m) AND NOT sendGTIN(m) 
    MESSAGE 'При выгрузке маркировки должна быть включена выгрузка GTIN';

EXTEND FORM cashRegisterModel
    PROPERTIES (c) SHOWIF sid(c) LIKE 'Astron%' sendGTIN, sendLotType;

DESIGN cashRegisterModel {
    BOX (c) {
        MOVE PROPERTY (sendGTIN(c));
        MOVE PROPERTY (sendLotType(c));
    }
}


overAstronInfo1 = ABSTRACT TEXT (MachineryPriceTransaction, Barcode);
overAstronInfo2 = ABSTRACT TEXT (MachineryPriceTransaction, Barcode);
localAstronInfo = DATA LOCAL TEXT (MachineryPriceTransaction, Barcode);

beforeCreateAstronPriceTransaction ABSTRACT LIST (MachineryPriceTransaction);

astronInfo2(MachineryPriceTransaction mpt, Barcode b) = (JSON FROM
    'astron2' = JSON FROM
        'numbers' = JSON FROM
            'numberId' = INTEGER numberId,
            'numberValue' = CASE 
                    WHEN numberId == 103 THEN 1 
                    WHEN numberId == 104 THEN 2 
                    WHEN numberId == 105 THEN 3 
                    ELSE 0,
            'numberName' = CASE 
                    WHEN numberId == 103 
                    THEN 'подлежит маркировке СИ' 
                    WHEN numberId == 104 THEN 'подлежит УКЗ' 
                    WHEN numberId == 105 THEN 'подлежит маркировке и СИ и УКЗ'     
                ELSE 'не подлежит маркировке'
            WHERE iterate (numberId, 102, 105),
        'numProperty' = JSON FROM
            'numPropertyKey' = INTEGER numPropertyKey,
            'propertyGrpId' = value(b),
            'numberId' = CASE
                    WHEN idLotType(sku(b)) != 'ukz' AND (UKZ(sku(b))==TTRUE ) THEN 105
                    WHEN idLotType(sku(b)) == 'ukz' OR (UKZ(sku(b))==TTRUE) THEN 104
                    WHEN idLotType(sku(b)) THEN 103
                    ELSE 102
            WHERE numPropertyKey == 29,
        'propertyGrp' = JSON FROM
            'propertyGrpId' = INTEGER propertyGrpId,
            'propertyGrpName' = 'Свойства для '+value(b)
            WHERE propertyGrpId == value(b),
        'propertyGrpId' = value(b)
    ) IF in(mpt, b) AND sendLotType(model(groupMachinery(mpt)));

gtinAstron(Sku s) = OVERRIDE 'G:' + (IF lotType(s) OR UKZ(s)==TTRUE THEN lpad((OVERRIDE GTIN(s), idBarcode(s) IF length(idBarcode(s)) == 13), 14, '0') ELSE GTIN(s)), 'C';
createAttribute(MachineryPriceTransaction mpt) + {
    IF sidModel(groupMachinery(mpt)) LIKE 'Astron%' THEN {
        localAstronInfo(mpt, Barcode b) <- NULL; //очищаем в первом действии, следить чтобы дальше добавлялись позже

        localAstronInfo(mpt, Barcode b) <- (CONCAT ',', localAstronInfo(mpt, b), '"gtin":"' + gtinAstron(sku(b)) + '"')
            WHERE in(mpt, b) AND sendGTIN(model(groupMachinery(mpt)));
    }
}

//стараемся выполнять последним
createAttribute(MachineryPriceTransaction mpt, GroupMachinery gm) + {
    IF sidModel(gm) LIKE 'Astron%' THEN {
        beforeCreateAstronPriceTransaction(mpt);
        info(mpt, Barcode b) <- TEXT(merge((OVERRIDE JSON('\{"astron":\{'+
                (CONCAT ',',
                    overAstronInfo1(mpt, b),
                    overAstronInfo2(mpt, b),
                    localAstronInfo(mpt, b)
                )
                +'\}\}'), JSON('\{\}')),
            (OVERRIDE astronInfo2(mpt, b), JSON('\{\}'))
        )) WHERE in(mpt, b);
    }
} 