MODULE Ukm5PickList;

REQUIRE Ukm5PriceTransaction, PickList, ExportCSO;

NAMESPACE Ukm5;

pickListGroupType() = DATA CustomGroupType ();
namePickListGroupType 'Классификатор пик-листа' = name(pickListGroupType());

pickListGroup(Group g) = IF groupType(g) = pickListGroupType() THEN TRUE;


EXTEND FORM integrationData
    PROPERTIES namePickListGroupType();
    
DESIGN integrationData{
    ukm5{
        MOVE PROPERTY (namePickListGroupType());
    }
}

idExt (Item i) = '"' + idBarcode(i) +'"';
productsByGroup = ABSTRACT STRING (Group, DepartmentStore);

idPickList = ABSTRACT INTEGER (CustomGroup, DepartmentStore);
idPickList = ABSTRACT STRING (CustomGroup);

GROUP stores;

FORM pickList FORMEXTID 'null'
    OBJECTS elements = CustomGroup
    
    OBJECTS d = DepartmentStore PANEL EXTID ''
    
    PROPERTIES idPickList(elements) EXTID 'id', name(elements) EXTID 'name', = TFALSE IF elements IS CustomGroup EXTID 'isGlobal',
        = TFALSE IF elements IS CustomGroup EXTID 'delete', productsByGroup(elements, d) EXTID 'items'
    FILTERS pickListGroup(elements) AND level(elements) > 1
    
    OBJECTS stores = DepartmentStore
    
    PROPERTIES = idStore(stores) IF elements IS CustomGroup AND stores IS DepartmentStore EXTID 'id'
    FILTERS Stock.in(stores)
; 

exportPickList 'Экспорт пик-лсиста УКМ5'(DepartmentStore d){
    NEWSESSION {
        LOCAL answer = FILE ();
        Stock.in(d) <- TRUE;
        EXPORT pickList OBJECTS d = d JSON;
        LOCAL group = GroupMachinery();
        fileToString(exportFile());
        logToFile('ukm5', resultString());
        group() <- GROUP MAX GroupCashRegister g IF stock(g) = d AND isUkm5(g);
        TRY{
            EXTERNAL HTTP POST urlServerUkm5(group()) + '/api/v1/import/picklists' PARAMS exportFile() TO answer;
            fileToString(answer());
            IF statusHttp() = 200 THEN MESSAGE 'Загрузка пик-листа успешно завершена\nСклад: ' + name(d);
        }
        CATCH MESSAGE messageCaughtException();
    }
}

EXTEND FORM integrationData
     PROPERTIES exportPickList(cs);
     
DESIGN integrationData{
    kso{
        MOVE PROPERTY (exportPickList(cs));
    }
}

//выгрузка изображений
GROUP images;

ftpConnectionStringUkm 'Строка подключения (ftp://username:password@host:port/path/)' = DATA STRING[250]();

sendImageItemToFtp(Item i){
    IF extension(FILE(dataImage(i))) != 'png' THEN {
        convertImage(dataImage(i), 'png');
        WRITE convertedImage() TO CONCAT '', ftpConnectionStringUkm(), 'items/', idBarcode(i);
    } ELSE {
        WRITE dataImage(i) TO CONCAT '', ftpConnectionStringUkm(), 'items/', idBarcode(i);
    }
}

sendImageGroupToFtp(CustomGroup c){
    IF extension(FILE(image(c))) != 'png' THEN {
        convertImage(image(c), 'png');
        WRITE convertedImage() TO CONCAT '', ftpConnectionStringUkm(), 'groups/', idPickList(c);
    } ELSE {
        WRITE image(c) TO CONCAT '', ftpConnectionStringUkm(), 'groups/', idPickList(c);
    }
}

//задание для планировщика
sendUkmImageToFTP 'Выгрузка изображений на FTP'(){
    LOCAL errorsImagesItems = BOOLEAN (Item);
    LOCAL errorsImagesGroups = BOOLEAN (CustomGroup);
    FOR customGroup[Stock.CustomGroupType,Item.Item](pickListGroupType(), Item i) 
        AND dataImage(i) AND active(i) AND (changedImage(i) OR NOT loadOnlyChangedImages())  DO {
        TRY {
            sendImageItemToFtp(i);
            changedImage(i) <- NULL;
        }
        CATCH {
            errorsImagesItems(i) <- TRUE;
        }
    }
    FOR hasImage(CustomGroup c) IF pickListGroup(c) AND active(c) AND (changedImage(c) OR NOT loadOnlyChangedImages())  DO
        TRY {
            sendImageGroupToFtp(c);
            changedImage(c) <- NULL;
        }
            CATCH {
            errorsImagesGroups(c) <- TRUE;
        }
    IF (GROUP SUM 1 IF errorsImagesGroups(CustomGroup c) OR errorsImagesItems(Item i)) THEN {
        MESSAGE 'Изображения не выгружены для:\n ' + CONCAT '\n\n', 
            'ТОВАРОВ\n' + (GROUP CONCAT name(Item i) IF errorsImagesItems(i), '\n' ORDER i),
            'ТОВАРНЫХ ГРУПП\n' + (GROUP CONCAT name(CustomGroup c) IF errorsImagesGroups(c), '\n' ORDER c)
    NOWAIT;
    }
    APPLY;
}

EXTEND FORM integrationData
    PROPERTIES ftpConnectionStringUkm(), sendUkmImageToFTP();

DESIGN integrationData{
    ukm5{
        NEW pickListUkm5{
            caption = 'Пиклист';
            MOVE PROPERTY (ftpConnectionStringUkm());
            MOVE PROPERTY (sendUkmImageToFTP());
        }
    }
}