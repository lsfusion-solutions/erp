MODULE Ukm5PriceTransaction;

REQUIRE Item, CashRegisterPriceTransaction, NativeMachinery, LogTools, MachineryPriceTransactionLotBy, StopList;

NAMESPACE Ukm5;

//кассы

isUkm5 (GroupCashRegister g) = TRUE IF handlerModel(g) = 'lsf.ukm5';
idStore 'ID магазина UKM5' = ABSTRACT STRING (DepartmentStore);
idStore 'ID магазина UKM5' (GroupCashRegister g) = idStore(stock(g));
urlServerUkm5 'URL сервера УКМ5' = DATA STRING[300] (GroupCashRegister);
directoryExchange 'Директория обмена УКМ5' = DATA STRING[300] (GroupCashRegister);
accepted(STRING result) = TRUE IF result = 'Accepted to processing\r\n';   

uploadedUkm5 'Загружен в УКМ5' = DATA BOOLEAN (Sku);
uploadedUkm5 'Загружен в УКМ5' = DATA BOOLEAN (Group);
uploadedUkm5Properties 'Загружен в УКМ5' = DATA BOOLEAN (Sku);

EXTEND FORM groupCashRegister 
    PROPERTIES (grc) SHOWIF isUkm5(grc) idStore, urlServerUkm5, directoryExchange;

DESIGN groupCashRegister{
    topContainer{
        MOVE PROPERTY (idStore(grc));
        MOVE PROPERTY (urlServerUkm5(grc));
        MOVE PROPERTY (directoryExchange(grc));
    }
}

//атрибуты
@defineStaticObject(Attribut, );

EXTEND CLASS Attribut{
    alcohol 'alcohol', 
    tobacco 'tobacco', 
    egais 'egais', 
    markedTobacco 'markedTobacco', 
    markedGoods 'markedGoods', 
    advance 'advance', 
    noSellerRequired 'noSellerRequired', 
    service 'service'
}

skuTransaction(Sku s, MachineryPriceTransaction t) = GROUP LAST Barcode b ORDER b
    WHERE (in(t,b) AND sku(b) == s);

attributes = ABSTRACT STRING (Sku);

filterAttribut = ABSTRACT CASE BOOLEAN (Item, Attribut);
isCatchWeight (Sku i) = IF (id(UOM(i)) = 'кг.') THEN TRUE;

FORM importItems 'Импорт товаров'
    OBJECTS t = MachineryPriceTransaction
    
    OBJECTS elements = Item
    PROPERTIES = IF elements IS Item THEN 1 EXTID 'taxgroupId', = id(itemGroup(elements)) EXTID 'itemGroup',
         = OVERRIDE shortNameUOM(elements), '' EXTID 'measure', = OVERRIDE name(elements), '' EXTID 'name',
         = OVERRIDE idBarcode(elements), '' EXTID 'id', = IF active(elements) THEN TFALSE ELSE TTRUE EXTID 'delete', 
         = IF split(elements) OR isCatchWeight(elements) THEN 3 ELSE 0 EXTID 'measprec', 
         = IF elements IS Item THEN ' ' EXTID 'descr'
    
    FILTERS skuTransaction(elements, t) AND NOT uploadedUkm5(elements)
    
    OBJECTS barcodes = Barcode
    PROPERTIES id(barcodes) EXTID 'id', = IF isCatchWeight(sku(barcodes)) THEN 0.000 ELSE amount(barcodes) EXTID 'quantity'
    FILTERS in(t,barcodes) AND sku(barcodes) = elements
    
    OBJECTS a = Attribut EXTID 'attributes'
    PROPERTIES = name(a) EXTID 'id'
    FILTERS filterAttribut(elements, a);
;
            
owner = DATA LOCAL STRING(INTEGER);

attributes (ItemGroup g) = IF g IS ItemGroup THEN '[]';

skuGroupTransaction(SkuGroup sc, MachineryPriceTransaction t) = GROUP LAST Barcode b ORDER b
    WHERE (in(t,b) AND skuGroup(t,b) == sc) OR (level(skuGroup(t,b), sc));

FORM groupItems
    OBJECTS t = MachineryPriceTransaction EXTID ''
    
    OBJECTS elements = ItemGroup
    PROPERTIES = OVERRIDE id(parent(elements)), '0' EXTID 'owner', = OVERRIDE name(elements) EXTID 'name',
        = OVERRIDE id(elements) EXTID 'id', = IF NOT active(elements) THEN TTRUE ELSE TFALSE EXTID 'delete', 
        = attributes(elements) 
    
    FILTERS skuGroupTransaction(elements, t) AND NOT uploadedUkm5(elements)
;

FORM barcodePrices 'Импорт цен, назначенных на штрихкоды товара'
    OBJECTS t = MachineryPriceTransaction
    
    OBJECTS elements = Barcode
    PROPERTIES dataMinPrice(t, elements) EXTID 'minprice', price(t, elements), 
        = IF t IS CashRegisterPriceTransaction AND elements IS Barcode THEN TFALSE EXTID 'isPromoPrice', 
        = IF NOT active(elements) THEN TTRUE ELSE TFALSE EXTID 'delete', 
        = IF elements IS Barcode THEN toChar(DATETIME('2020-01-01'), 'yyyy-MM-ddThh24:mi:ss') EXTID 'dateFrom',
        = IF elements IS Barcode THEN toChar(DATETIME('2099-01-01'), 'yyyy-MM-ddThh24:mi:ss') EXTID 'dateTo',
        = IF t IS CashRegisterPriceTransaction AND elements IS Barcode THEN idStore(groupMachinery(t)) EXTID 'storeId',
        = OVERRIDE id(elements), '' EXTID 'barcodeId'
        
    FILTERS in(t,elements) AND skuTransaction(sku(elements), t)
;

isPromo = ABSTRACT TBOOLEAN (MachineryPriceTransaction, Item);
minPrice = ABSTRACT NUMERIC[18,4] (MachineryPriceTransaction, Item);

FORM itemPrices 'Импорт цен на товары'
    OBJECTS t = MachineryPriceTransaction
    
    OBJECTS elements = Item
    PROPERTIES = OVERRIDE idBarcode(elements), '' EXTID 'itemId',
        = OVERRIDE isPromo(t, elements), TFALSE IF elements IS Item EXTID 'isPromoPrice',
        minPrice(t, elements) EXTID 'minprice', = price(t, barcode(elements)) EXTID 'price',
        = IF NOT active(elements) THEN TTRUE ELSE TFALSE EXTID 'delete', 
        = IF elements IS Item THEN toChar(DATETIME('2020-01-01'), 'yyyy-MM-ddThh24:mi:ss') EXTID 'dateFrom',
        = IF elements IS Item THEN toChar(DATETIME('2099-01-01'), 'yyyy-MM-ddThh24:mi:ss') EXTID 'dateTo'
    
    FILTERS skuTransaction(elements, t)
;

skipUkz = ABSTRACT BOOLEAN (Item);
valueProp = ABSTRACT CASE STRING (STRING, Item);

valueProp (STRING s, Item i) += WHEN s = 'GTIN' AND i IS Item THEN GTIN(i);
valueProp (STRING s, Item i) += WHEN s = 'RB_MARK' AND i IS Item AND UKZ(i) == TTRUE AND NOT skipUkz(i) THEN 'RB_MARK';

FORM itemProperties 'Дополнительные свойства товаров'
    OBJECTS t = MachineryPriceTransaction

    OBJECTS elements = Item
    PROPERTIES = OVERRIDE idBarcode(elements), '' EXTID 'itemId',
        = IF active(elements) THEN TFALSE ELSE TTRUE EXTID 'deleted'
    FILTERS skuTransaction(elements, t) AND NOT uploadedUkm5Properties(elements)

    OBJECTS s = STRING EXTID 'properties'
    PROPERTIES = s IF valueProp(s, elements) EXTID 'name',
        = valueProp(s, elements) EXTID 'id',
        = TFALSE IF valueProp(s, elements) EXTID 'showToCashier',
        = TFALSE IF valueProp(s, elements) EXTID 'printOnReceipt'
    FILTERS valueProp(s, elements)

    OBJECTS v = STRING EXTID 'values'
    PROPERTIES = 'default' IF valueProp(v, elements) EXTID 'name'
    PROPERTIES = valueProp(v, elements) EXTID 'id'
    FILTERS v = s
;

sendPriceTransactionAPI(CashRegisterPriceTransaction t){
    LOCAL answer = FILE ();
    IF (GROUP SUM 1 IF NOT uploadedUkm5(Group g) AND skuGroupTransaction(g, t)) THEN {
        EXPORT groupItems OBJECTS t = t JSON ;
        EXTERNAL HTTP POST urlServerUkm5(groupCashRegister(t)) + '/api/v1/import/groupItems' PARAMS exportFile() TO answer;
        fileToString(answer());
        IF statusHttp() = 200 THEN uploadedUkm5(Group g) <- TRUE IF skuGroupTransaction(g, t) AND NOT uploadedUkm5(g);
        ELSE {
             addMachineryError(t, (CONCAT ' : ' , nameGroupMachinery(t), 
             'Ошибка при импорте товаров', resultString()));
             logToFile('Ukm5PriceTransaction', CONCAT ': ', 'Ошибка при импорте товаров', resultString());
             APPLY;
             RETURN;
        }
    }
    IF (GROUP SUM 1 IF NOT uploadedUkm5(Item i) AND skuTransaction(i, t)) THEN {
        EXPORT importItems OBJECTS t = t JSON;
        EXTERNAL HTTP POST urlServerUkm5(groupCashRegister(t)) + '/api/v1/import/items' PARAMS exportFile() TO answer;
        fileToString(answer());
        IF statusHttp() = 200 THEN uploadedUkm5(Item i) <- TRUE IF skuTransaction(i, t) AND NOT uploadedUkm5(i);
        ELSE {
            addMachineryError(t, (CONCAT ' : ' , nameGroupMachinery(t), 
                'Ошибка при импорте товаров', resultString()));
            logToFile('Ukm5PriceTransaction', CONCAT ': ', 'Ошибка при импорте товаров', resultString());
            APPLY;
            RETURN;
        }
    }
    IF (GROUP SUM 1 IF NOT uploadedUkm5Properties(Item i) AND skuTransaction(i, t)) THEN {
        EXPORT itemProperties OBJECTS t = t JSON;
        EXTERNAL HTTP POST urlServerUkm5(groupCashRegister(t)) + '/api/v1/import/itemProperties' PARAMS exportFile() TO answer;
        fileToString(answer());
        IF statusHttp() = 200 THEN uploadedUkm5Properties(Item i) <- TRUE IF skuTransaction(i, t) AND NOT uploadedUkm5Properties(i);
        ELSE {
            addMachineryError(t, (CONCAT ' : ' , nameGroupMachinery(t),
                'Ошибка при импорте свойств товаров', resultString()));
            logToFile('Ukm5PriceTransaction', CONCAT ': ', 'Ошибка при импорте товаров', resultString());
            APPLY ;
            RETURN;
        }
    }
    EXPORT itemPrices OBJECTS t = t JSON;
    EXTERNAL HTTP POST CONCAT '' , urlServerUkm5(groupCashRegister(t)) + '/api/v1/import/store/',
        idStore(groupCashRegister(t)), '/itemPrices' PARAMS exportFile() TO answer;
    fileToString(answer());
    IF statusHttp() = 200 THEN {
        succeeded(t) <- TRUE;
        dateTimeSucceeded(t) <- currentDateTime();
        APPLY;
    } ELSE {
        addMachineryError(t, (CONCAT ' : ' , nameGroupMachinery(t),
            'Ошибка при импорте прайса', resultString()));
        logToFile('Ukm5PriceTransaction', CONCAT ': ', 'Ошибка при импорте прайса', resultString());
        APPLY ;
        RETURN;
    }
}

hasUkm5GroupMachinery (Stock s) = GROUP  SUM 1 IF stock(GroupMachinery g) = s AND handlerModel(g) = 'lsf.ukm5';
isPromo = ABSTRACT TBOOLEAN (Stock, Item);
minTransactionPrice 'Текущая минимальня цена в оборудовании' (Barcode barcode, GroupMachinery groupMachinery)  =
    minPrice(lastTransaction(barcode, groupMachinery), barcode) MATERIALIZED;

minTransactionPrice 'Текущая минимальня цена в оборудовании' (Barcode barcode, stock) =
    GROUP LAST minTransactionPrice(barcode, GroupMachinery g)
    ORDER dateTimeIn(lastTransaction(barcode, g), barcode), lastTransaction(barcode, g)
    WHERE lastTransaction(barcode, g)
    BY stock(g)
;

skuTransaction(Sku s, Stock st) = GROUP SUM 1 IF sku(st, StopListDetail d) = s AND NOT succeeded(st, stopList(d)) 
    AND stock(GroupMachinery g) = st AND handlerModel(g) = 'lsf.ukm5' AND in(g, stopList(d)) AND active(g);
include(Sku s, Stock st) = GROUP SUM 1 IF include(st, StopListDetail d) AND sku(st, d) = s;

FORM stopListImport 'Импорт стоп-листа'
    OBJECTS s = Stock

    OBJECTS elements = Item
    PROPERTIES = OVERRIDE idBarcode(elements), '' EXTID 'itemId',
        = OVERRIDE isPromo(s, elements), TFALSE IF elements IS Item EXTID 'isPromoPrice',
        = minTransactionPrice(barcode(elements), s) EXTID 'minprice', = transactionPrice(barcode(elements), s) EXTID 'price',
        = IF NOT active(elements) OR include(elements, s) THEN TTRUE ELSE TFALSE EXTID 'delete',
        = IF elements IS Item THEN toChar(DATETIME('2020-01-01'), 'yyyy-MM-ddThh24:mi:ss') EXTID 'dateFrom',
        = IF elements IS Item THEN toChar(DATETIME('2099-01-01'), 'yyyy-MM-ddThh24:mi:ss') EXTID 'dateTo'

    FILTERS skuTransaction(elements, s)
;

stopListImport  'Импорт стоп-листа (склад)' (Stock s){
    LOCAL answer = FILE ();
    EXPORT stopListImport OBJECTS s = s JSON;
    EXTERNAL HTTP POST CONCAT '' , urlServerUkm5(groupCashRegister(s)) + '/api/v1/import/store/',
        idStore(groupCashRegister(s)), '/itemPrices' PARAMS exportFile() TO answer;
    fileToString(answer());
    IF statusHttp() = 200 THEN {
        succeeded(s, StopList sl) <- TRUE;
        APPLY;
    } ELSE {
        logToFile('Ukm5PriceTransaction', CONCAT ': ', 'Ошибка при импорте стоп-листа', resultString());
        APPLY ;
        RETURN;
    }
}

stopListImport  'Импорт стоп-листа' () {
    FOR hasUkm5GroupMachinery(Stock s) DO {
        stopListImport(s);
    }
}

DESIGN integrationData{
    pane{
        NEW ukm5{
            caption = 'УКМ5';
        }
    }
}

sendMachineryPriceTransaction(MachineryPriceTransaction t) + {
    IF handlerModel(groupMachinery(t)) = 'lsf.ukm5' AND t IS CashRegisterPriceTransaction AND notSucceeded(t) 
        THEN NEWSESSION {
        NEWSESSION { dateTimeProcessing(t) <- currentDateTime(); APPLY; }
        TRY sendPriceTransactionAPI(t);
        CATCH addMachineryError(t, (CONCAT ' : ' , nameGroupMachinery(t), 'Ошибка при отправке прайса', 
              messageCaughtException()), messageCaughtException());
    }
}