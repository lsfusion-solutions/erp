MODULE Set10SaleDeniedRestriction;

REQUIRE Set10PriceTransaction, SkuLedger;

NAMESPACE Set10;

CLASS SaleDeniedRestriction 'Запрет продажи Set10';
TABLE saleDeniedRestriction(SaleDeniedRestriction);

@defineDocumentHeaderCreated(SaleDeniedRestriction);
sinceDate(SaleDeniedRestriction r) = toChar(createdTime(r), 'YYYY-MM-DD"T"HH24:MI:SS');

is (SaleDeniedRestriction r) = r IS SaleDeniedRestriction;

sku = DATA Sku(SaleDeniedRestriction);
nameSku 'Товар' (SaleDeniedRestriction r) = name(sku(r));
idSku 'Код товара' (SaleDeniedRestriction r) = id(sku(r));
idBarcodeSku 'Штрихкод товара' (SaleDeniedRestriction r) = idBarcode(sku(r));

stock = DATA Stock (SaleDeniedRestriction);
nameStock 'Склад' (SaleDeniedRestriction r) = name(stock(r));

dateTimeExported 'Дата выгрузки' = DATA DATETIME (SaleDeniedRestriction);
dateTimeDeleted 'Дата удаления' = DATA DATETIME (SaleDeniedRestriction);
balance 'Остаток при создании' = DATA NUMERIC[16,5] (SaleDeniedRestriction);
deleted 'Удален' = DATA BOOLEAN (SaleDeniedRestriction);
active 'Активен' (SaleDeniedRestriction r) = dateTimeExported(r) AND NOT deleted(r);

tiExport 'TI' = DATA STRING (SaleDeniedRestriction);
tiDeleted 'TI' = DATA STRING (SaleDeniedRestriction);

messageError 'Сообщение об ошибке' = DATA STRING (SaleDeniedRestriction);

set10Stock (Stock c) = GROUP MAX GroupCashRegister grc IF isSet10(grc) AND active(grc) BY stock(grc) MATERIALIZED;
shopIndices (SaleDeniedRestriction r) = idStoreSet(set10Stock(stock(r)));

FORM saleDeniedRestrictions 'Запреты продаж Set10'
    OBJECTS r = SaleDeniedRestriction
    PROPERTIES(r) READONLY createdTime ORDER DESC, createdNameUser, createdHostnameComputer, dateTimeExported, dateTimeDeleted, idSku, idBarcodeSku,nameSku, nameStock, balance, deleted, active, messageError
    FILTERGROUP default
        FILTER 'Активные' active(r)
        FILTER  'Успешно удаленые' deleted(r) AND dateTimeDeleted(r)
    
    LIST SaleDeniedRestriction OBJECT r
;
currentBalanceRestriction = ABSTRACT CASE NUMERIC[16,5](Sku, Stock);
currentBalanceRestriction(Sku s, Stock st) += WHEN passScales(s)  AND st IS Stock THEN  currentBalance(s, st) + 2;
currentBalanceRestriction(Sku s, Stock st) += WHEN s IS Sku AND NOT passScales(s) AND st IS Stock THEN  currentBalance(s, st);

useSaleDeniedRestrictions 'Использовать запрет продаж для отрицательного остатка' = DATA BOOLEAN () PREREAD;
exportSaleAfterTransaction 'Отправлять удаленные запреты после транзакции' = DATA BOOLEAN () PREREAD;

EXTEND FORM integrationData
    PROPERTIES useSaleDeniedRestrictions(), exportSaleAfterTransaction()
;
DESIGN integrationData{
    set10{
        MOVE PROPERTY (useSaleDeniedRestrictions());
        MOVE PROPERTY (exportSaleAfterTransaction());
    }
}
//
restriction = GROUP MAX SaleDeniedRestriction r IF createdTime(r) AND NOT deleted(r) BY sku(r), stock(r);

//WHEN (SETCHANGED(currentBalanceRestriction(Sku s, Stock st)) AND (currentBalanceRestriction(s, st) < 0))
//        AND set10Stock(st) AND useSaleDeniedRestrictions() AND NOT restriction(s, st) DO NEW r = SaleDeniedRestriction{
//    stock(r) <- st;
//    sku(r) <- s;
//    balance(r) <- OVERRIDE currentBalanceRestriction(s, st), 0;
//}


//
FORM saleRestrictionExport FORMEXTID 'goods-catalog'
    OBJECTS d = SaleDeniedRestriction EXTID 'sale-denied-restriction'
    PROPERTIES DRAW d = STRING(d) EXTID 'id' ATTR, = IF is(d) THEN 'GOOD' EXTID 'subject-type' ATTR, idSku(d) EXTID 'subject-code' ATTR, 
        type = 'SALE_DENIED' ATTR, value = IF deleted(d) THEN 'false' ELSE 'true' ATTR,
        shopIndices(d) EXTID 'shop-indices',
        sinceDate(d) EXTID 'since-date',
        deleted = IF deleted(d) THEN 'true' ELSE 'false'
;

exportSaleRestrictionTI 'Отправить в SET' (SaleDeniedRestriction r) {
    NEWSESSION {
        IF NOT shopIndices(r) THEN{
            MESSAGE 'Не указан код магазина SET10';
            RETURN;
        }

        LOCAL outerXML = TEXT();
        LOCAL error = STRING ();
        IF urlServerSet10() THEN {
            EXPORT saleRestrictionExport FILTERS d = r XML;
            fileToString(exportFile());
            encodeBase64(resultString());
            goodsCatalogXML() <- encodedBase64();
            LOCAL headersSet = STRING (STRING);
            headersSet('Content-Type') <- 'application/xml';
            generateUUID();
            
            TI() <- generatedUUID();
            LOCAL answer = FILE();
            LOCAL req = FILE();
            EXPORT requestItem XML TO req;

            TRY {
                EXTERNAL HTTP urlServerSet10() + 'SET-ERPIntegration/SET/WSGoodsCatalogImport' HEADERS headersSet PARAMS req() TO answer;
            } CATCH {
                error() <- messageCaughtException();
            }

            IF NOT error() THEN {
                tiExport(r) <- TI();
                APPLY;
            } ELSE {
                tiExport(r) <- NULL;
                messageError(r) <- error();
                APPLY;
            }
        }
    }
}

getFeedback 'Получить статус' (SaleDeniedRestriction r){
    IF tiExport(r) THEN NEWSESSION {
        ti() <- tiExport(r);
        
        LOCAL outerXML = TEXT();
        LOCAL error = STRING ();
        LOCAL answer = FILE();
        
        EXPORT getFeedbackRequest XML;
        LOCAL headersSet = STRING (STRING);
        headersSet('Content-Type') <- 'application/xml';
        TRY {
            EXTERNAL HTTP POST urlServerSet10() + 'SET-ERPIntegration/SET/FeedbackWS' HEADERS headersSet
                PARAMS exportFile() TO answer;
            fileToString(answer());
            IF useOutSet10Log() THEN logToFile('set10', (CONCAT ' ', 'Get Feedback', resultString()));
            IMPORT getFeedbackAnswer XML FROM answer();
            IF status() = '3' THEN {
                IF deleted(r) THEN dateTimeDeleted(r) <- currentDateTime();
                dateTimeExported(r) <- currentDateTime() WHERE NOT deleted(r);
                tiExport(r) <- NULL;
                APPLY;
            }
            IF status() != '2' THEN {
                error() <- status_message();
            }
        } CATCH{
            error() <- messageCaughtException();
        }
        IF error() THEN {
            messageError(r) <- error();
            APPLY;
        }
    }
}

needExport(SaleDeniedRestriction r) = (NOT dateTimeExported(r) AND NOT deleted(r)) OR (deleted(r) AND NOT dateTimeDeleted(r));

processDeniedRestrictions 'Обработка запретов продаж'(){
    FOR createdTime(SaleDeniedRestriction r)  AND needExport(r) AND NOT tiExport(r) AND set10Stock(stock(r))  DO {
        exportSaleRestrictionTI(r);
    }
    FOR tiExport(SaleDeniedRestriction r) DO{
        getFeedback(r);
    }
}

exportSaleRestriction 'Отправить в SET' (SaleDeniedRestriction r) {
    NEWSESSION {
        IF NOT shopIndices(r) THEN{
            MESSAGE 'Не указан код магазина SET10';
            RETURN;
        }
        
        LOCAL outerXML = TEXT();
        LOCAL error = STRING ();
        IF urlServerSet10() THEN {
            EXPORT saleRestrictionExport FILTERS d = r XML;
            fileToString(exportFile());
            encodeBase64(resultString());
            goodsCatalogXML()<- encodedBase64();
            LOCAL headersSet = STRING (STRING);
            headersSet('Content-Type') <- 'application/xml';
            generateUUID();
            TI() <- generatedUUID();
            LOCAL answer = FILE();
            LOCAL req = FILE();
            EXPORT requestItem XML TO req;

            TRY {
                EXTERNAL HTTP urlServerSet10() + 'SET-ERPIntegration/SET/WSGoodsCatalogImport' HEADERS headersSet PARAMS req() TO answer;
            } CATCH {
                error() <- messageCaughtException();
            }


            IF NOT error() THEN {

                ti() <- TI();
                EXPORT getFeedbackRequest XML;

                LOCAL count = INTEGER ();
                WHILE TRUE DO {

                    sleep(1000);

                    TRY {
                        EXTERNAL HTTP POST urlServerSet10() + 'SET-ERPIntegration/SET/FeedbackWS' HEADERS headersSet
                            PARAMS exportFile() TO answer;
                        fileToString(answer());
                        IF useOutSet10Log() THEN logToFile('set10', (CONCAT ' ', 'Get Feedback', resultString()));
                        IMPORT getFeedbackAnswer XML FROM answer();
                        IF status() = '3' THEN BREAK;
                        IF status() != '2' THEN {
                            error() <- status_message();
                            BREAK;
                        }
                    } CATCH{
                        error() <- messageCaughtException();
                        BREAK;
                    }

                    count() <- count() (+) 1;
                    IF count() > 60 THEN {
                        error() <- 'Не получен ответ от сервера';
                        BREAK;
                    }
                }
            }

            IF NOT error() THEN {
                dateTimeExported(r) <- currentDateTime();
                APPLY;
                MESSAGE 'Выгрузка завершена' NOWAIT;
            } ELSE {
                APPLY;
                MESSAGE TEXT(CONCAT '\n', '!!!Выгрузка завершилась ошибкой', error()) NOWAIT;
            }
        } ELSE {
            MESSAGE 'Не задан "Адрес:порт сервера SET10"' NOWAIT;
        }
    }
} TOOLBAR;


deleteSaleRestriction 'Удалить в SET' (SaleDeniedRestriction r) {
    NEWSESSION {
        IF NOT shopIndices(r) THEN{
            MESSAGE 'Не указан код магазина SET10';
            RETURN;
        }
        deleted(r) <- TRUE;
        tiExport(r) <- NULL;
        APPLY;
        IF exportSaleAfterTransaction() THEN exportSaleRestrictionTI(r);
    }
} TOOLBAR;

EXTEND FORM saleDeniedRestrictions
    PROPERTIES TOOLBAR exportSaleRestrictionTI(r), getFeedback(r) SHOWIF tiExport(r)
    PROPERTIES tiExport(r) READONLY 
;

in (MachineryPriceTransaction t, SaleDeniedRestriction r) = stock(t) = stock(r) AND in(t, barcode(sku(r))) AND active(r);
saleDeniedRestrictions (MachineryPriceTransaction t) = GROUP SUM 1 IF in(t, SaleDeniedRestriction r);


afterExportTransaction(MachineryPriceTransaction t) +{
    IF useSaleDeniedRestrictions() AND saleDeniedRestrictions(t) THEN{
        FOR in(t, SaleDeniedRestriction r) AND currentBalanceRestriction(sku(r), stock(r)) > 0 DO{
            deleteSaleRestriction(r);
        }
    }
}

createRestriction 'Создать запреты продаж Set10'(){
    FOR set10Stock(Stock stock) DO NEWSESSION {
        LOCAL restriction = SaleDeniedRestriction (Sku);
        restriction(Sku s) <- GROUP MAX SaleDeniedRestriction r IF createdTime(r) AND NOT deleted(r) AND sku(r) = s AND stock(r) = stock;

        FOR (currentBalanceRestriction(Sku s, stock) < 0 OR (NOT currentBalanceRestriction(s, stock) AND dateTimeLastMoved(s, stock))) AND NOT restriction(s) DO NEW r = SaleDeniedRestriction{
            stock(r) <- stock;
            sku(r) <- s;
            balance(r) <- OVERRIDE currentBalanceRestriction(s, stock), 0;
        }
        APPLY;
    }
}

//
NAVIGATOR {
    machineryExport{
        NEW saleDeniedRestrictions;
    }
}