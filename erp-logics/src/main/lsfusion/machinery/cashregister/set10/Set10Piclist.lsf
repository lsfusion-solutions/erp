MODULE Set10Piclist;

REQUIRE Set10PriceTransaction;

NAMESPACE Set10;

customGroupPicList = DATA CustomGroupType();
nameCustomGroupPicList 'Классификатор пиклиста' = name(customGroupPicList());

in = DATA LOCAL BOOLEAN (Group, DepartmentStore);
in = DATA LOCAL BOOLEAN (Item, DepartmentStore);

in(CustomGroup g, Item s) = group(groupType(g), s);
isNotParrent(CustomGroup g) = TRUE IF NOT parent(g) AND g IS CustomGroup;

index =  PARTITION SUM 1 ORDER name(Item i) BY in(i, DepartmentStore ds), customGroup(customGroupPicList(),i), ds;
maxIndex(CustomGroup g, DepartmentStore ds) = GROUP MAX index(Item i, ds) BY customGroup(customGroupPicList(),i);

useCustomOrderGroup = ABSTRACT BOOLEAN ();
customOrderGroup = ABSTRACT STRING (CustomGroup);
orderGroup (CustomGroup g) = IF useCustomOrderGroup() THEN customOrderGroup(g) ELSE name(g);


indexNULL (CustomGroup g, DepartmentStore ds) = PARTITION SUM 1 ORDER orderGroup(g) BY in(g, ds), ds;
maxIndexNULL() = GROUP MAX indexNULL(CustomGroup gg, DepartmentStore ds) IF in(gg, ds) AND isNotParrent(gg);
indexNoNULL (CustomGroup g, DepartmentStore ds) = PARTITION SUM 1 ORDER orderGroup(g) BY in(g, ds), parent(g);

indexGroup(CustomGroup g, DepartmentStore ds) = IF parent(g) THEN indexNoNULL(g, ds) ELSE indexNULL(g, ds);
maxIndexGroup(CustomGroup g, DepartmentStore ds) = GROUP MAX indexGroup(CustomGroup gg, ds) IF in(gg, ds) BY parent(gg);

indexItemExt(Item i, DepartmentStore ds) = IF mod(index(i, ds), 16) = 0 THEN 16 ELSE mod(index(i, ds), 16);
indexItem(Item i, DepartmentStore ds) = maxIndexGroup(customGroup(customGroupPicList(),i), ds) (+) index(i, ds);
maxIndexItem(CustomGroup g, DepartmentStore ds) = maxIndexGroup(g, ds) (+) maxIndex(g, ds);

inPage(Item i, INTEGER index, DepartmentStore ds) = indexItem(i, ds) AND indexItem(i, ds) - 1 >= index * 16 AND indexItem(i, ds) - 1 < (index + 1) * 16;
inPage(CustomGroup g, INTEGER index, DepartmentStore ds) =  indexGroup(g, ds) AND indexGroup(g, ds) - 1 >= index * 16 AND indexGroup(g, ds) - 1 < (index + 1) * 16;

usePrefixCSIAPI 'Использовать префикс при выгрузке ШК для пиклистов (API CSI-K)' = DATA BOOLEAN ();
prefixCSIAPI 'Префикс ШК' = DATA STRING () CHARWIDTH 10;
prefixPieceCSIAPI 'Префикс ШК (шт)' = DATA STRING () CHARWIDTH 10;
overPrefixCSIAPI (Item i) = IF istartsWith(shortNameUOM(barcode(i)), 'шт') THEN prefixPieceCSIAPI() ELSE prefixCSIAPI();

contentBarcode (Item i) = CONCAT '', overPrefixCSIAPI(i) IF usePrefixCSIAPI() AND passScales(i), idBarcode(i);
replaceNameAPI (Item i) = replace(replace(replace(Stock.name(i), '\\', '/'), '"', '\''), '\n', '');
content (Item i, DepartmentStore ds) = IF idBarcode(i) AND in(i, ds) THEN '\{' + (CONCAT ',' ,
    '"index": ' + (indexItemExt(i, ds) - 1),
    '"name": "' + replaceNameAPI(i) + '"',
    '"barcode": "' + contentBarcode(i) + '"',
    '"sku": "' + overSet10Id(i, ds) + '"'
    ) + '\}';

tilesGroup4(CustomGroup g, INTEGER index, DepartmentStore ds) = '\{ "tiles": [' +
    (CONCAT ',' , (GROUP CONCAT content(Item i, ds) IF in(g, i) == g AND inPage(i, index, ds), ', ' ORDER i))
    + ']\}';

contentPage4 (CustomGroup g, DepartmentStore ds) = IF in(g, ds) THEN '\{' + (CONCAT ',' ,
    '"index": ' + (indexGroup(g, ds) - 1),
    '"name": "' + Stock.name(g) + '"',
    '"sortType": "manual"',
    '"pages": [' + (GROUP CONCAT tilesGroup4(g, INTEGER i, ds) IF iterate(i, 0, maxIndexItem(g, ds) / 16), ', ' ORDER i) + ']'
    ) + '\}';

tilesGroup3(CustomGroup g, INTEGER index, DepartmentStore ds) = '\{ "tiles": [' +
    (CONCAT ',',
        (CONCAT ',' , (GROUP CONCAT contentPage4(CustomGroup cg, ds) IF parent(cg) = g AND level(g) == 3 AND inPage(cg, index, ds), ', ' ORDER index, cg)),
        (CONCAT ',' , (GROUP CONCAT content(Item i, ds) IF in(g, i) == g AND inPage(i, index, ds), ', ' ORDER i))
        )
    + ']\}';

contentPage3 (CustomGroup g, DepartmentStore ds) = IF in(g, ds) THEN '\{' + (CONCAT ',' ,
    '"index": ' + (indexGroup(g, ds) - 1),
    '"name": "' + Stock.name(g) + '"',
    '"sortType": "manual"',
    '"pages": [' + (GROUP CONCAT tilesGroup3(g, INTEGER i, ds) IF iterate(i, 0, maxIndexItem(g, ds) / 16), ', ' ORDER i) + ']'
    ) + '\}';

tilesGroup2(CustomGroup g, INTEGER index, DepartmentStore ds) = '\{ "tiles": [' +
    (CONCAT ',',
        (CONCAT ',' , (GROUP CONCAT contentPage3(CustomGroup cg, ds) IF parent(cg) = g AND level(g) == 2 AND inPage(cg, index, ds), ', ' ORDER index, cg)),
        (CONCAT ',' , (GROUP CONCAT content(Item i, ds) IF in(g, i) == g AND inPage(i, index, ds), ', ' ORDER i))
        )
    + ']\}';

contentPage2 (CustomGroup g, DepartmentStore ds) = IF in(g, ds) THEN '\{' + (CONCAT ',' ,
    '"index": ' + (indexGroup(g, ds) - 1),
    '"name": "' + Stock.name(g) + '"',
    '"sortType": "manual"',
    '"pages": [' + (GROUP CONCAT tilesGroup2(g, INTEGER i, ds) IF iterate(i, 0, maxIndexItem(g, ds) / 16), ', ' ORDER i) + ']'
    ) + '\}';

tilesGroup1(CustomGroup g, INTEGER index, DepartmentStore ds) = '\{ "tiles": [' +
    (CONCAT ',',
        (CONCAT ',' , (GROUP CONCAT contentPage2(CustomGroup cg, ds) IF parent(cg) = g AND level(g) == 1 AND inPage(cg, index, ds), ', ' ORDER index, cg)),
        (CONCAT ',' , (GROUP CONCAT content(Item i, ds) IF in(g, i) == g AND inPage(i, index, ds), ', ' ORDER i))
        )
    + ']\}';

contentPage1 (CustomGroup g, DepartmentStore ds) = IF in(g, ds) THEN '\{' + (CONCAT ',' ,
    '"index": ' + (indexGroup(g, ds) - 1),
    '"maxIndex": ' + maxIndexItem(g, ds),
    '"name": "' + Stock.name(g) + '"',
    '"sortType": "manual"',
    '"pages": [' + (GROUP CONCAT tilesGroup1(g, INTEGER i, ds) IF iterate(i, 0, maxIndexItem(g, ds) / 16), ', ' ORDER i) + ']'
    ) + '\}';

tilesGroup(CustomGroupType gt, INTEGER index, DepartmentStore ds) = '\{ "tiles": [' +
    (CONCAT ',' , (GROUP CONCAT contentPage1(CustomGroup cg, ds) IF groupType(cg) = gt AND NOT parent(cg) AND inPage(cg, index, ds), ', ' ORDER indexGroup(cg, ds)))
    + ']\}';

content (CustomGroupType gt, DepartmentStore ds) = '\{' + (CONCAT ',' ,
    '"sortType": "manual"',
    '"pages": [' + (GROUP CONCAT tilesGroup(gt, INTEGER i, ds) IF iterate(i, 0, maxIndexNULL() / 16), ', ' ORDER i) + ']'
    ) + '\}';


templateGuid 'GUID шаблона пиклиста' = DATA STRING ();
cashTemplates 'Код шаблона касс' = DATA STRING ();

exportCSIAPIurl 'Адрес для API запросов CSI-K (Touch)' = DATA STRING ();
//exportImagesCSIAPIurl 'Адрес каталога изображений для API запросов CSI-K' = DATA STRING () CHARWIDTH 50;

useExportCSIAPI 'Использовать API для выгрузки в CSI' = DATA BOOLEAN ();
isUseShopNumber 'Выгружать номер магазина' = DATA BOOLEAN ();

EXTEND FORM integrationData
    PROPERTIES () templateGuid, cashTemplates, exportCSIAPIurl, usePrefixCSIAPI, prefixCSIAPI, prefixPieceCSIAPI,
        useExportCSIAPI, isUseShopNumber, nameCustomGroupPicList
;

DESIGN integrationData {
    set10{
        NEW piclistSet10{
            caption = 'Пиклист';
            MOVE PROPERTY (templateGuid());
            MOVE PROPERTY (cashTemplates());
            MOVE PROPERTY (exportCSIAPIurl());
            MOVE PROPERTY (usePrefixCSIAPI());
            MOVE PROPERTY (prefixCSIAPI());
            MOVE PROPERTY (prefixPieceCSIAPI());
            MOVE PROPERTY (useExportCSIAPI());
            MOVE PROPERTY (isUseShopNumber());
            MOVE PROPERTY (nameCustomGroupPicList());
        }
    }
}



FORM exportCSIformAPI
    PROPERTIES templateType = 'PERMANENT',
        templateGuid = templateGuid(),
        cashTemplates = '[' + cashTemplates() + ']'
    
    OBJECTS g = GroupCashRegister EXTID 'menuTemplates'
    PROPERTIES = IF isSet10(g) THEN 'CSI_K' EXTID 'cashType',
        menuName = ('CSI-K ТО ' + idStoreSet(g)),
        shopNumbers = ('[' + INTEGER(idStoreSet(g)) + ']'),
        content = content(customGroupPicList(), stock(g)) EXTID 'content:escapeInnerJSON'
    FILTERS isSet10(g)
;

idStoreSet(DepartmentStore ds) = idStoreSet(GROUP MAX GroupCashRegister g IF isSet10(g) AND stock(g) = ds);

exportCSIAPI 'Экспорт пиклиста CSI' () {
    IF exportCSIAPIurl() THEN {
        in(Item i, DepartmentStore ds) <- TRUE WHERE currentBalance(i, ds) AND idStoreSet(ds);
        in(CustomGroup g, DepartmentStore ds) <- TRUE WHERE groupType(g) == customGroupPicList()
            AND GROUP SUM 1 IF isParent(g, Item sku) AND in(sku, ds);
        
        IF GROUP SUM 1 IF isSet10(GroupMachinery g) AND  customGroupPicList() THEN {
            EXPORT exportCSIformAPI JSON;

            timeoutHttp() <- 60000;
            LOCAL result = FILE ();
            LOCAL errorCode = STRING[10] ();
            LOCAL description = STRING[255] ();
            EXTERNAL HTTP POST exportCSIAPIurl() PARAMS exportFile() TO result;
            IMPORT JSON FROM result() TO() errorCode, description;
            IF NOT errorCode() THEN {
               MESSAGE 'Пиклист успешно выгружен' NOWAIT ;
            }
            ELSE {
                MESSAGE CONCAT '\n', 'Ошибка при выполнении запроса API CSI-K (' + errorCode() + ')', description() NOWAIT;
            } 
        }
        ELSE {
           MESSAGE  'Нет данных для выгрузки' NOWAIT ;
        }
    }
    ELSE
        MESSAGE 'Не указан адресc для API запросов CSI-K (Touch)' NOWAIT;
}
EXTEND FORM groupCashRegister
    PROPERTIES () exportCSIAPI SHOWIF isSet10(grc)
;


DESIGN groupCashRegister{
    topContainer{
        MOVE PROPERTY (exportCSIAPI());
    }
}