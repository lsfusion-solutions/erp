MODULE Set10Piclist;

REQUIRE Set10PriceTransaction;

NAMESPACE Set10;

customGroupPicList = DATA CustomGroupType();
nameCustomGroupPicList 'Классификатор пиклиста' = name(customGroupPicList());

in = DATA LOCAL BOOLEAN (Group, DepartmentStore);
in = DATA LOCAL BOOLEAN (Item, DepartmentStore);

in(CustomGroup g, Item s) = group(groupType(g), s);
isNotParrent(CustomGroup g) = TRUE IF NOT parent(g) AND g IS CustomGroup;

index =  PARTITION SUM 1 ORDER name(Item i) BY in(i, DepartmentStore ds), customGroup(customGroupPicList(),i), ds;
maxIndex(CustomGroup g, DepartmentStore ds) = GROUP MAX index(Item i, ds) BY customGroup(customGroupPicList(),i);

useCustomOrderGroup = ABSTRACT BOOLEAN ();
customOrderGroup = ABSTRACT STRING (CustomGroup);
orderGroup (CustomGroup g) = IF useCustomOrderGroup() THEN customOrderGroup(g) ELSE name(g);

indexNULL (CustomGroup g, DepartmentStore ds) = PARTITION SUM 1 ORDER orderGroup(g) BY in(g, ds), ds;
maxIndexNULL() = GROUP MAX indexNULL(CustomGroup gg, DepartmentStore ds) IF in(gg, ds) AND isNotParrent(gg);
indexNoNULL (CustomGroup g, DepartmentStore ds) = PARTITION SUM 1 ORDER orderGroup(g) BY in(g, ds), parent(g);

indexGroup(CustomGroup g, DepartmentStore ds) = IF parent(g) THEN indexNoNULL(g, ds) ELSE indexNULL(g, ds);
maxIndexGroup(CustomGroup g, DepartmentStore ds) = GROUP MAX indexGroup(CustomGroup gg, ds) IF in(gg, ds) BY parent(gg);

indexItemExt(Item i, DepartmentStore ds) = IF mod(index(i, ds), 16) = 0 THEN 16 ELSE mod(index(i, ds), 16);
indexItem(Item i, DepartmentStore ds) = maxIndexGroup(customGroup(customGroupPicList(),i), ds) (+) index(i, ds);
maxIndexItem(CustomGroup g, DepartmentStore ds) = maxIndexGroup(g, ds) (+) maxIndex(g, ds);

inPage(Item i, INTEGER index, DepartmentStore ds) = indexItem(i, ds) AND indexItem(i, ds) - 1 >= index * 16 AND indexItem(i, ds) - 1 < (index + 1) * 16;
inPage(CustomGroup g, INTEGER index, DepartmentStore ds) =  indexGroup(g, ds) AND indexGroup(g, ds) - 1 >= index * 16 AND indexGroup(g, ds) - 1 < (index + 1) * 16;

usePrefixCSIAPI 'Использовать префикс при выгрузке ШК для пиклистов (API CSI-K)' = DATA BOOLEAN ();
prefixCSIAPI 'Префикс ШК' = DATA STRING () CHARWIDTH 10;
prefixPieceCSIAPI 'Префикс ШК (шт)' = DATA STRING () CHARWIDTH 10;
overPrefixCSIAPI (Item i) = IF istartsWith(shortNameUOM(barcode(i)), 'шт') THEN prefixPieceCSIAPI() ELSE prefixCSIAPI();

contentBarcode (Item i) = CONCAT '', overPrefixCSIAPI(i) IF usePrefixCSIAPI() AND passScales(i), idBarcode(i);
replaceNameAPI (Item i) = replace(replace(replace(Stock.name(i), '\\', '/'), '"', '\''), '\n', '');
content (Item i, DepartmentStore ds) = IF idBarcode(i) AND in(i, ds) THEN '\{' + (CONCAT ',' ,
    '"index": ' + (indexItemExt(i, ds) - 1),
    '"name": "' + replaceNameAPI(i) + '"',
    '"barcode": "' + contentBarcode(i) + '"',
    '"sku": "' + overSet10Id(i, ds) + '"'
    ) + '\}';

tilesGroup4(CustomGroup g, INTEGER index, DepartmentStore ds) = '\{ "tiles": [' +
    (CONCAT ',' , (GROUP CONCAT content(Item i, ds) IF in(g, i) == g AND inPage(i, index, ds), ', ' ORDER i))
    + ']\}';

contentPage4 (CustomGroup g, DepartmentStore ds) = IF in(g, ds) THEN '\{' + (CONCAT ',' ,
    '"index": ' + (indexGroup(g, ds) - 1),
    '"name": "' + Stock.name(g) + '"',
    '"sortType": "manual"',
    '"pages": [' + (GROUP CONCAT tilesGroup4(g, INTEGER i, ds) IF iterate(i, 0, maxIndexItem(g, ds) / 16), ', ' ORDER i) + ']'
    ) + '\}';

tilesGroup3(CustomGroup g, INTEGER index, DepartmentStore ds) = '\{ "tiles": [' +
    (CONCAT ',',
        (CONCAT ',' , (GROUP CONCAT contentPage4(CustomGroup cg, ds) IF parent(cg) = g AND level(g) == 3 AND inPage(cg, index, ds), ', ' ORDER index, cg)),
        (CONCAT ',' , (GROUP CONCAT content(Item i, ds) IF in(g, i) == g AND inPage(i, index, ds), ', ' ORDER i))
        )
    + ']\}';

contentPage3 (CustomGroup g, DepartmentStore ds) = IF in(g, ds) THEN '\{' + (CONCAT ',' ,
    '"index": ' + (indexGroup(g, ds) - 1),
    '"name": "' + Stock.name(g) + '"',
    '"sortType": "manual"',
    '"pages": [' + (GROUP CONCAT tilesGroup3(g, INTEGER i, ds) IF iterate(i, 0, maxIndexItem(g, ds) / 16), ', ' ORDER i) + ']'
    ) + '\}';

tilesGroup2(CustomGroup g, INTEGER index, DepartmentStore ds) = '\{ "tiles": [' +
    (CONCAT ',',
        (CONCAT ',' , (GROUP CONCAT contentPage3(CustomGroup cg, ds) IF parent(cg) = g AND level(g) == 2 AND inPage(cg, index, ds), ', ' ORDER index, cg)),
        (CONCAT ',' , (GROUP CONCAT content(Item i, ds) IF in(g, i) == g AND inPage(i, index, ds), ', ' ORDER i))
        )
    + ']\}';

contentPage2 (CustomGroup g, DepartmentStore ds) = IF in(g, ds) THEN '\{' + (CONCAT ',' ,
    '"index": ' + (indexGroup(g, ds) - 1),
    '"name": "' + Stock.name(g) + '"',
    '"sortType": "manual"',
    '"pages": [' + (GROUP CONCAT tilesGroup2(g, INTEGER i, ds) IF iterate(i, 0, maxIndexItem(g, ds) / 16), ', ' ORDER i) + ']'
    ) + '\}';

tilesGroup1(CustomGroup g, INTEGER index, DepartmentStore ds) = '\{ "tiles": [' +
    (CONCAT ',',
        (CONCAT ',' , (GROUP CONCAT contentPage2(CustomGroup cg, ds) IF parent(cg) = g AND level(g) == 1 AND inPage(cg, index, ds), ', ' ORDER index, cg)),
        (CONCAT ',' , (GROUP CONCAT content(Item i, ds) IF in(g, i) == g AND inPage(i, index, ds), ', ' ORDER i))
        )
    + ']\}';

contentPage1 (CustomGroup g, DepartmentStore ds) = IF in(g, ds) THEN '\{' + (CONCAT ',' ,
    '"index": ' + (indexGroup(g, ds) - 1),
    '"maxIndex": ' + maxIndexItem(g, ds),
    '"name": "' + Stock.name(g) + '"',
    '"sortType": "manual"',
    '"pages": [' + (GROUP CONCAT tilesGroup1(g, INTEGER i, ds) IF iterate(i, 0, maxIndexItem(g, ds) / 16), ', ' ORDER i) + ']'
    ) + '\}';

tilesGroup(CustomGroupType gt, INTEGER index, DepartmentStore ds) = '\{ "tiles": [' +
    (CONCAT ',' , (GROUP CONCAT contentPage1(CustomGroup cg, ds) IF groupType(cg) = gt AND NOT parent(cg) AND inPage(cg, index, ds), ', ' ORDER indexGroup(cg, ds)))
    + ']\}';

content (CustomGroupType gt, DepartmentStore ds) = '\{' + (CONCAT ',' ,
    '"sortType": "manual"',
    '"pages": [' + (GROUP CONCAT tilesGroup(gt, INTEGER i, ds) IF iterate(i, 0, maxIndexNULL() / 16), ', ' ORDER i) + ']'
    ) + '\}';


templateGuid 'GUID шаблона пиклиста' = DATA STRING ();
cashTemplates 'Код шаблона касс' = DATA STRING ();

exportCSIAPIurl 'Адрес для API запросов' = DATA STRING ();

useExportCSIAPI 'Использовать API для выгрузки в CSI' = DATA BOOLEAN ();
isUseShopNumber 'Выгружать номер магазина' = DATA BOOLEAN ();

EXTEND FORM integrationData
    PROPERTIES () templateGuid, cashTemplates, exportCSIAPIurl, usePrefixCSIAPI, prefixCSIAPI, prefixPieceCSIAPI,
        useExportCSIAPI, isUseShopNumber, nameCustomGroupPicList
;

DESIGN integrationData {
    set10{
        NEW piclistSet10{
            caption = 'Пиклист';
            MOVE PROPERTY (templateGuid());
            MOVE PROPERTY (cashTemplates());
            MOVE PROPERTY (exportCSIAPIurl());
            MOVE PROPERTY (usePrefixCSIAPI());
            MOVE PROPERTY (prefixCSIAPI());
            MOVE PROPERTY (prefixPieceCSIAPI());
            MOVE PROPERTY (useExportCSIAPI());
            MOVE PROPERTY (isUseShopNumber());
            MOVE PROPERTY (nameCustomGroupPicList());
        }
    }
}


FORM exportCSIformAPI
    PROPERTIES templateType = 'PERMANENT',
        templateGuid = templateGuid(),
        cashTemplates = '[' + cashTemplates() + ']'
    
    OBJECTS g = GroupCashRegister EXTID 'menuTemplates'
    PROPERTIES = IF isSet10(g) THEN 'CSI_K' EXTID 'cashType',
        menuName = ('CSI-K ТО ' + idStoreSet(g)),
        shopNumbers = ('[' + INTEGER(idStoreSet(g)) + ']'),
        content = content(customGroupPicList(), stock(g)) EXTID 'content:escapeInnerJSON'
    FILTERS isSet10(g)
;

idStoreSet(DepartmentStore ds) = idStoreSet(GROUP MAX GroupCashRegister g IF isSet10(g) AND stock(g) = ds);

exportCSIAPI 'Экспорт пиклиста CSI' () {
    IF exportCSIAPIurl() THEN {
        in(Item i, DepartmentStore ds) <- TRUE WHERE currentBalance(i, ds) AND idStoreSet(ds);
        in(CustomGroup g, DepartmentStore ds) <- TRUE WHERE groupType(g) == customGroupPicList()
            AND GROUP SUM 1 IF isParent(g, Item sku) AND in(sku, ds);
        
        IF GROUP SUM 1 IF isSet10(GroupMachinery g) AND customGroupPicList() THEN {
            EXPORT exportCSIformAPI JSON;

            timeoutHttp() <- 60000;
            LOCAL result = FILE ();
            LOCAL errorCode = STRING[10] ();
            LOCAL description = STRING[255] ();
            EXTERNAL HTTP POST exportCSIAPIurl() PARAMS exportFile() TO result;
            IMPORT JSON FROM result() TO() errorCode, description;
            IF NOT errorCode() THEN {
               MESSAGE 'Пиклист успешно выгружен' NOWAIT ;
            }
            ELSE {
                MESSAGE CONCAT '\n', 'Ошибка при выполнении запроса API CSI-K (' + errorCode() + ')', description() NOWAIT;
            } 
        }
        ELSE {
           MESSAGE  'Нет данных для выгрузки' NOWAIT ;
        }
    }
    ELSE
        MESSAGE 'Не указан адресc для API запросов CSI-K (Touch)' NOWAIT;
}
EXTEND FORM groupCashRegister
    PROPERTIES () exportCSIAPI SHOWIF isSet10(grc)
;


DESIGN groupCashRegister{
    topContainer{
        MOVE PROPERTY (exportCSIAPI());
    }
}
//setTouch
maxItemsPerPage 'Макс.кол-во элементов на странице' = DATA INTEGER ();
EXTEND FORM integrationData
    PROPERTIES maxItemsPerPage()
;
DESIGN integrationData{
    set10{
        MOVE PROPERTY (maxItemsPerPage());
    }
}

CLASS ABSTRACT TouchElement;
name = ABSTRACT ISTRING (TouchElement);
img = ABSTRACT STRING (TouchElement);
type = ABSTRACT STRING (TouchElement);
iconId = ABSTRACT STRING (TouchElement);
level = ABSTRACT INTEGER (TouchElement);
parentLoc = DATA LOCAL TouchElement (TouchElement);
level (TouchElement child, TouchElement parent) = RECURSION 1l IF child IS TouchElement AND parent == child
    STEP 2l IF parent == parentLoc($parent) MATERIALIZED;
tiles = DATA LOCAL JSON (TouchElement);
parent = ABSTRACT TouchElement (TouchElement);
filter = ABSTRACT BOOLEAN (TouchElement);
order = ABSTRACT CASE LONG (TouchElement);

itemId = ABSTRACT STRING (TouchElement);
barcode = ABSTRACT STRING (TouchElement);

indexParent=  PARTITION SUM 1 ORDER parent(TouchElement t) BY parent(t), t;
longParent (TouchElement t) = (IF parent(t) THEN LONG(parent(t)) ELSE 1L) IF filter(t);
index2 (TouchElement t) = PARTITION SUM 1 ORDER name(t), t BY longParent(t);
index(TouchElement t) = PARTITION SUM 1 ORDER order(t), name(t), t BY longParent(t);
indexMod(TouchElement t) = mod(index2(t), 5);
countTiles (TouchElement t) = GROUP SUM 1 IF customGroup(customGroupPicList(), Item i) = t;

CLASS TemporaryTouchElemnt : TouchElement;

name = DATA STRING[30] (TemporaryTouchElemnt);
name (TemporaryTouchElemnt t) += name(t);
int = DATA INTEGER (TemporaryTouchElemnt);
parent (TouchElement c, INTEGER i) = IF i = 1 THEN c 
    ELSE GROUP MAX TemporaryTouchElemnt t IF int(t) <= i AND level(t, c);
parent (Item item, INTEGER i) = IF i = 0 THEN parent(item)
    ELSE GROUP MAX TemporaryTouchElemnt t IF int(t) <= i AND level(t, parent(item))
;
level = DATA INTEGER (TemporaryTouchElemnt);
level(TemporaryTouchElemnt t) += level(t);

parentLoc = DATA LOCAL BOOLEAN (TouchElement, TouchElement);
iconId(TemporaryTouchElemnt t) += 'DIR';

order(TemporaryTouchElemnt t) += WHEN t IS TemporaryTouchElemnt THEN 1000;

CLASS StaticTouch{
    topSale 'Топ продаж'
} : TouchElement;

name (StaticTouch t) += ISTRING(staticCaption(t));
type (StaticTouch t) += 'GT';
level (StaticTouch t) += IF t = StaticTouch.topSale THEN 1;
order(StaticTouch t) += WHEN t = StaticTouch.topSale THEN 0;

parent(TouchElement child, TouchElement parent) = IF parent IS StaticTouch THEN parentLoc(child, parent) ELSE parent = parentLoc(child);
filter(TemporaryTouchElemnt t) += TRUE;

EXTEND CLASS CustomGroup : TouchElement;
name(CustomGroup t) += Stock.name(t);
parent(CustomGroup t) += Stock.parent(t);
level (CustomGroup t) += Stock.level(t);
filter(CustomGroup t) += customGroupType(t) = customGroupPicList();
iconId(CustomGroup t) += 'DIR';
order(CustomGroup t) += WHEN t IS CustomGroup THEN Stock.order(t);

EXTEND CLASS Item : TouchElement;
name(Item t) += Stock.name(t);
parent(Item i) += customGroup(customGroupPicList(), i) IF active(i);
filter(Item i) += TRUE IF (customGroup(customGroupPicList(), i) OR (GROUP SUM 1 IF parentLoc(i, TouchElement t))) AND active(i);
itemId (Item i) += id(i);
barcode (Item i) += idBarcode(i);
maxItems = DATA LOCAL INTEGER(TouchElement);
indexT1 = DATA LOCAL INTEGER (TouchElement);
order(Item i) += WHEN i IS Item THEN 500;
countTemporary = DATA LOCAL INTEGER(TouchElement);
maxIndexItem = DATA LOCAL INTEGER (TouchElement);

FORM exportPiclist
    OBJECTS t1 = TouchElement EXTID 'value'
    PROPERTIES (t1) name, itemId, barcode, img, indexT1 EXTID 'index' ORDER
    PROPERTIES = IF level(t1) THEN 5 EXTID 'columns', = IF level(t1) THEN 'GT' EXTID 'type'
    FILTERS level(t1) = 1, filter(t1)
;

in = DATA LOCAL BOOLEAN (INTEGER, CustomGroup);
parentLevel = DATA LOCAL TouchElement (TouchElement, TouchElement);
indexSet  = DATA LOCAL INTEGER (TouchElement, TouchElement);

content = DATA LOCAL STRING(DepartmentStore);


FORM exportTouch2
    PROPERTIES templateType = 'PERMANENT',
        templateGuid = templateGuid(),
        cashTemplates = '[' + cashTemplates() + ']'

    OBJECTS g = GroupCashRegister EXTID 'menuTemplates'
    PROPERTIES = IF isSet10(g) THEN 'TOUCH_2' EXTID 'cashType',
        menuName = ('TOUCH_2 ' + idStoreSet(g)),
        shopNumbers = ('[' + INTEGER(idStoreSet(g)) + ']'),
        = IF isSet10(g) THEN content(stock(g)) EXTID 'content:escapeInnerJSON'
;

needTemporary = DATA LOCAL INTEGER (CustomGroup);

maxIndex = DATA LOCAL INTEGER (TouchElement);
levelExt (TouchElement child)  = GROUP SUM 1 IF level(child, TouchElement parent);

fillPicList ABSTRACT LIST (DepartmentStore);
indexExport = DATA LOCAL INTEGER (TouchElement, TouchElement);

CLASS PiclistType{
    csi 'CSI',
    touch 'Touch'
}

typePiclistSet10  = DATA PiclistType (GroupCashRegister);
nameTypePiclistSet10 'Пиклист' (GroupCashRegister g) = staticCaption(typePiclistSet10(g));

EXTEND FORM groupCashRegister
    PROPERTIES (grc) nameTypePiclistSet10 SHOWIF isSet10(grc)
;
DESIGN groupCashRegister{
    topContainer{
        MOVE PROPERTY (nameTypePiclistSet10(grc));
    }
}

exportTouchAPI 'Экспорт пиклиста Touch' () {
    IF exportCSIAPIurl() THEN {
        DELETE TemporaryTouchElemnt tt WHERE tt IS TemporaryTouchElemnt;
        
        FOR typePiclistSet10(GroupCashRegister g) = PiclistType.touch AND isSet10(g) AND  customGroupPicList() DO{

            parentLoc(TouchElement t) <- parent(t) IF t IS CustomGroup;

            maxIndex(TouchElement c) <- GROUP MAX index(TouchElement i) IF parent(i) = c;

            needTemporary(CustomGroup c) <- maxIndex(c) / (maxItemsPerPage() - 2);

            LOCAL group = CustomGroup (TemporaryTouchElemnt);

            FOR INTEGER x = needTemporary(CustomGroup c) AND x > 0 DO{
                FOR iterate(INTEGER i, 1, MIN x, 4) NEW t = TemporaryTouchElemnt DO{
                    int(t) <- i;
                    name(t) <- 'Далее ' + i;
                    level(t) <- level(c) + i;
                    parentLoc(t) <- parent(c, i);
                    group(t) <- c;
                }
            }

            countTemporary(TouchElement c) <- GROUP SUM 1 IF parentLoc(TemporaryTouchElemnt tt) = c AND tt IS TemporaryTouchElemnt;

            maxItems(TouchElement c) <- CASE
                WHEN level(c) = 1 THEN maxItemsPerPage() (-) countTemporary(c)
                WHEN level(c) >= 2 THEN maxItemsPerPage() - 1 (-) countTemporary(c)
            ;

            maxIndexItem(TouchElement t) <-
            CASE
                WHEN t IS CustomGroup THEN maxItems(t)
                WHEN t IS TemporaryTouchElemnt THEN
                GROUP SUM maxItems(TouchElement tt) IF level(t, tt) AND level(tt) >= level(group(t))
            ;

            parentLevel(TouchElement i, TouchElement c) <-
                IF index(i) <= maxIndexItem(c) AND c = parent(i) THEN parent(i)
                ELSE
                GROUP LAST TemporaryTouchElemnt cc ORDER DESC maxIndexItem(cc) WHERE index(i) <= maxIndexItem(cc) AND level(cc, c) AND cc IS TemporaryTouchElemnt
            ;

            parentLoc(TouchElement i) <-
                parentLevel(i, parent(i)) WHERE i IS Item AND filter(i)
            ;

            fillPicList(stock(g));
            indexExport(TouchElement child, TouchElement parent) <- (PARTITION SUM 1 IF parent(child, parent) AND filter(child) ORDER order(child), indexSet(child, parent), child BY parent(child, parent), parent) - 1;
            indexT1(TouchElement t1) <- (PARTITION SUM 1 IF level(t1) = 1 AND filter(t1) ORDER order(t1), t1);
            EXPORT exportPiclist JSON;

            fileToString(exportFile());
            content(stock(g)) <- resultString();
            DELETE TemporaryTouchElemnt tt WHERE tt IS TemporaryTouchElemnt;
        }
        
        EXPORT exportTouch2 FILTERS content(stock(g)) JSON;

        timeoutHttp() <- 60000;
        LOCAL result = FILE ();
        LOCAL errorCode = STRING[10] ();
        LOCAL description = STRING[255] ();

        EXTERNAL HTTP POST exportCSIAPIurl() PARAMS exportFile() TO result;

        IMPORT JSON FROM result() TO() errorCode, description;
        IF NOT errorCode() THEN {
            MESSAGE 'Пиклист успешно выгружен' NOWAIT ;
        }
        ELSE MESSAGE CONCAT '\n', 'Ошибка при выполнении запроса API CSI-K (' + errorCode() + ')', description() NOWAIT;
    }
    ELSE
        MESSAGE 'Не указан адресc для API запросов CSI-K (Touch)' NOWAIT;
}

META addTilesLevel(lev, par)
    EXTEND FORM exportPiclist
        OBJECTS t###lev = TouchElement EXTID 'tiles'
        PROPERTIES (t###lev) name, itemId, barcode, iconId, type, img
        PROPERTIES indexExport(t###lev, t###par) EXTID 'index' ORDER
        FILTERS //level(t###lev) = lev, 
            filter(t###lev), parent(t###lev, t###par)
        
;
END

@addTilesLevel(2, 1);
@addTilesLevel(3, 2);
@addTilesLevel(4, 3);
@addTilesLevel(5, 4);
@addTilesLevel(6, 5);
@addTilesLevel(7, 6);
@addTilesLevel(8, 7);

exportTouchAPI 'Экспорт пиклиста Touch' (GroupCashRegister g){
    exportTouchAPI();
}
EXTEND FORM groupCashRegister
    PROPERTIES exportTouchAPI(grc) SHOWIF isSet10(grc)
;
DESIGN groupCashRegister{
    topContainer{
        MOVE PROPERTY (exportTouchAPI(grc));
    }
}

EXTEND FORM items
    PROPERTIES index(i)
;