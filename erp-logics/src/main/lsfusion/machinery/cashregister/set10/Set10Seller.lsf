MODULE Set10Seller;

REQUIRE Set10WebServer, EmployeeStock, EmployeeBarcode;

NAMESPACE Set10;

useShopIndex 'Разграничить продавцов по складам' = DATA BOOLEAN ();

shopIndex (Employee e) = GROUP CONCAT idStoreSet(GroupCashRegister gcr) IF isSet10(gcr) 
    AND accessCompany(e, stock(gcr)) AND useShopIndex(), ' ' ORDER idStoreSet(gcr);
    
in = DATA LOCAL BOOLEAN (Employee);

isSeller (Employee e) = TRUE IF idPosition(e) = 'seller';

dateTimeUploaded 'Загруженно в Set10' = DATA DATETIME (Employee);

customLocked = ABSTRACT CASE BOOLEAN (Employee);
blockedSeller (Employee e) = OVERRIDE customLocked(e), isLocked(e);

WHEN SETCHANGED (lastName(Employee e)) OR CHANGED (firstName(e))
    OR CHANGED (idBarcode(e)) OR SETCHANGED (blockedSeller(e)) OR DROPCHANGED (blockedSeller(e)) 
    DO dateTimeUploaded(e) <- NULL;

EXTEND FORM employees
    PROPERTIES dateTimeUploaded(e) READONLY
;

FORM sellers
    OBJECTS seller = Employee
    PROPERTIES id(seller) EXTID 'codeNum', = (OVERRIDE lastName(seller), '') EXTID 'lastName', 
        = OVERRIDE firstName(seller), '' EXTID 'firstName', = (OVERRIDE '-', lastName(seller)) EXTID 'middleName',
        = IF blockedSeller(seller) THEN TTRUE ELSE TFALSE  EXTID 'blocked' , codeNum = idBarcode(seller) EXTID 'codeNum', barCode = idBarcode(seller) EXTID 'barCode',
        shopIndex(seller) EXTID 'shop-index', = TFALSE IF seller IS Employee EXTID 'deleted'
    FILTERS in(seller)
;
xmlBase64Data = DATA LOCAL STRING ();
GROUP bodyRequestSellers EXTID 'soapenv:Body';
GROUP importSellers EXTID 'ws:importSellers' : bodyRequestSellers;

FORM requestSellers FORMEXTID 'soapenv=http://schemas.xmlsoap.org/soap/envelope/:Envelope'
    PROPERTIES ATTR ='http://ws.sellers.ERPIntegration.crystals.ru/' EXTID 'xmlns:ws'
    PROPERTIES() header EXTID 'soapenv:Header'
    PROPERTIES() IN importSellers xmlBase64Data EXTID 'XML', TI
;

//обработка ответа
//GROUP body1 EXTID 'soap:Body';
GROUP importSellersResponse 
    EXTID 'ns2=http://ws.sellers.ERPIntegration.crystals.ru/:importSellersResponse' : bodyAnswer;

FORM answerSellers FORMEXTID 'soap=http://schemas.xmlsoap.org/soap/envelope/:Envelope'
    PROPERTIES() IN importSellersResponse return;

count = GROUP SUM 1 IF in(Employee e);

uploadSellersSet10 'Выгрузить продавцов' (){
    EXPORT sellers XML;
    fileToString(exportFile());
    encodeBase64(resultString());
    logToFile('set10Seller', resultString());
    xmlBase64Data()<- encodedBase64();
    LOCAL headersSet = STRING (STRING);
    headersSet('Content-Type') <- 'application/xml';
    generateUUID();
    TI() <- generatedUUID();
    EXPORT requestSellers XML;
    LOCAL answer = FILE();
    TRY{
        EXTERNAL HTTP POST urlServerSet10() + 'SET-ERPIntegration/SellersImportWS' HEADERS headersSet PARAMS exportFile() TO answer;
        IMPORT answerSellers XML FROM answer();
        fileToString(answer());
        IF return() = 'true' THEN {
            MESSAGE 'Успешно выгружен справочник продавцов.\nПродавцы: ' + count() NOWAIT;
            dateTimeUploaded(Employee e) <- currentDateTime() WHERE in(e);
            APPLY;
        }
        ELSE MESSAGE CONCAT '\n', 'Произошла ошибка', resultString();
    }
        CATCH {
        fileToString(answer());
        MESSAGE CONCAT '\n', messageCaughtException(), resultString();
        APPLY;
    }
}

uploadAllSellersSet10 'Выгрузить всех продавцов' (){
    NEWSESSION {
        in(Employee e) <- TRUE IF idBarcode(e) AND isSeller(e);
        IF NOT count() THEN {
            MESSAGE 'Нет продавцов для выгрузки';
            RETURN;
        }ELSE {
            uploadSellersSet10();
        }
    }
}
uploadChangedSellersSet10 'Выгрузить продавцов(изм)' (){
    NEWSESSION {
        in(Employee e) <- TRUE IF idBarcode(e) AND isSeller(e) AND NOT dateTimeUploaded(e);
        IF count() THEN uploadSellersSet10();
    }
}

fillSellerReceipt 'Заполнять продавцов в чеках' = DATA BOOLEAN () PREREAD;
EXTEND FORM integrationData
    PROPERTIES() uploadAllSellersSet10, uploadChangedSellersSet10, useShopIndex, fillSellerReceipt
;

DESIGN integrationData{
    set10{
        NEW sellersSet10{
            caption = 'Продавцы';
            MOVE PROPERTY (useShopIndex());
            MOVE PROPERTY (uploadAllSellersSet10());
            MOVE PROPERTY (uploadChangedSellersSet10());
            MOVE PROPERTY (fillSellerReceipt());
        }
    }
}

seller = DATA Employee (ReceiptDetail) INDEXED;
nameSeller 'Продавец' (ReceiptDetail d) = name(seller(d));

overCreateReceiptDetail(ReceiptDetail d, INTEGER i) +{
    IF key(i) = 'seller' AND fillSellerReceipt() THEN seller(d) <- idBarcodeSeller(value(i));
}

EXTEND FORM zReports
    PROPERTIES READONLY nameSeller(d)
;

EXTEND FORM zReport
    PROPERTIES nameSeller(d)
;

CONSTRAINT DROPPED(Employee e IS Employee) AND PREV([GROUP MIN ReceiptDetail d BY seller(d)](e))
    MESSAGE 'Запрещено удалять сотрудников, у которых уже есть личные продажи';
    
CONSTRAINT DROPPED(Employee e IS Employee) AND PREV(dateTimeUploaded(e))
    MESSAGE 'Запрещено удалять сотрудников, которые уже выгружались в Set';    
