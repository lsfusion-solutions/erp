MODULE Set10WebServer;

REQUIRE Set10PriceTransaction, ZReport;

NAMESPACE Set10;

useWebServerSet10 'Использовать Web Server Set10' = DATA BOOLEAN ();
useInSet10Log 'Логировать вх. запросы set10' = DATA BOOLEAN () PREREAD;
EXTEND FORM integrationData
    PROPERTIES useInSet10Log();
DESIGN integrationData{
    set10{
        MOVE PROPERTY (useInSet10Log());
    }
}

GROUP original_purchase EXTID 'original-purchase';
GROUP discountCards;
GROUP card;
GROUP positions;

GROUP plugin_property EXTID 'plugin-property';
GROUP payments;
GROUP payment : payments;

operDay = DATA LOCAL DATE(INTEGER);
shop = DATA LOCAL STRING(INTEGER);
cash = DATA LOCAL STRING(INTEGER);
shift = DATA LOCAL STRING(INTEGER);
number = DATA LOCAL STRING(INTEGER);
saletime = DATA LOCAL ZDATETIME(INTEGER);
returndayinday = DATA LOCAL STRING(INTEGER);
discountCard = DATA LOCAL STRING(INTEGER);
type = DATA LOCAL STRING(INTEGER);
number1 = DATA LOCAL STRING(INTEGER);
purchasePosition = DATA LOCAL INTEGER(INTEGER);
key = DATA LOCAL STRING(INTEGER);
value = DATA LOCAL STRING(INTEGER);
order = DATA LOCAL STRING(INTEGER);
departNumber = DATA LOCAL STRING(INTEGER);
goodsCode = DATA LOCAL STRING(INTEGER);
barCode = DATA LOCAL STRING(INTEGER);
count = DATA LOCAL STRING(INTEGER);
cost = DATA LOCAL STRING(INTEGER);
nds = DATA LOCAL STRING(INTEGER);
ndsSum = DATA LOCAL STRING(INTEGER);
discountValue = DATA LOCAL STRING(INTEGER);
costWithDiscount = DATA LOCAL STRING(INTEGER);
amount = DATA LOCAL STRING(INTEGER);
dateCommit = DATA LOCAL ZDATETIME(INTEGER);
key1 = DATA LOCAL STRING(INTEGER);
value1 = DATA LOCAL STRING(INTEGER);
position = DATA LOCAL STRING(INTEGER);
purchasePayment = DATA LOCAL INTEGER(INTEGER);
paymentPayment = DATA LOCAL INTEGER(INTEGER);
key2 = DATA LOCAL STRING(INTEGER);
value2 = DATA LOCAL STRING(INTEGER);
payment = DATA LOCAL STRING(INTEGER);
typeClass = DATA LOCAL STRING(INTEGER);
amount1 = DATA LOCAL STRING(INTEGER);
description = DATA LOCAL STRING(INTEGER);
tabNumber = DATA LOCAL STRING(INTEGER);
userName = DATA LOCAL STRING(INTEGER);
operationType = DATA LOCAL STRING(INTEGER);
operDay1 = DATA LOCAL DATE(INTEGER);
shop1 = DATA LOCAL STRING(INTEGER);
cash1 = DATA LOCAL STRING(INTEGER);
shift1 = DATA LOCAL STRING(INTEGER);
number2 = DATA LOCAL STRING(INTEGER);
saletime1 = DATA LOCAL ZDATETIME(INTEGER);
begintime = DATA LOCAL ZDATETIME(INTEGER);
amount2 = DATA LOCAL STRING(INTEGER);
discountAmount = DATA LOCAL STRING(INTEGER);
inn = DATA LOCAL STRING(INTEGER);
count1 = DATA LOCAL NESTED STRING();
paymentPluginPayment = DATA LOCAL INTEGER(INTEGER);

FORM purchasesImport FORMEXTID 'purchases'
    PROPERTIES() count1 EXTID 'count' ATTR

    OBJECTS purchase = INTEGER

    PROPERTIES(purchase) returndayinday ATTR, tabNumber ATTR, userName ATTR, operationType ATTR, 
        operDay1 EXTID 'operDay' ATTR, shop1 EXTID 'shop' ATTR, cash1 EXTID 'cash' ATTR, shift1 EXTID 'shift' ATTR,
        number2 EXTID 'number' ATTR, saletime1 EXTID 'saletime' ATTR, begintime ATTR, amount2 EXTID 'amount' ATTR,
        discountAmount ATTR, inn ATTR
    PROPERTIES(purchase) IN original_purchase operDay ATTR, shop ATTR, cash ATTR, shift ATTR, number ATTR, saletime ATTR
    FILTERS imported(purchase)

    OBJECTS position = INTEGER IN positions
    FILTERS purchasePosition(position) == purchase
    PROPERTIES(position) order ATTR, departNumber ATTR, goodsCode ATTR, barCode ATTR, count ATTR, cost ATTR, nds ATTR, 
        ndsSum ATTR, discountValue ATTR, costWithDiscount ATTR, amount ATTR, dateCommit ATTR
    PROPERTIES(position) IN plugin_property key ATTR, value ATTR
    FILTERS imported(position)
    PROPERTIES(position) key1 EXTID 'key' ATTR, value1 EXTID 'value' ATTR

//    OBJECTS payment = INTEGER IN payments
//    FILTERS purchasePayment(payment) == purchase
//    FILTERS paymentPayment(payment) == payment
//    PROPERTIES(payment) key2 EXTID 'key' ATTR, value2 EXTID 'value' ATTR
//    FILTERS imported(payment)
//    PROPERTIES(payment) typeClass ATTR, amount1 EXTID 'amount' ATTR, description ATTR

    OBJECTS payment = INTEGER IN payments
    FILTERS purchasePayment(payment) == purchase
    FILTERS paymentPayment(payment) == payment
    PROPERTIES(payment) typeClass ATTR, amount1 EXTID 'amount' ATTR, description ATTR


    OBJECTS pluginPayment = INTEGER EXTID 'plugin-property' IN payment
    FILTERS paymentPluginPayment(pluginPayment) == purchase
    PROPERTIES(pluginPayment) key2 EXTID 'key' ATTR, value2 EXTID 'value' ATTR
    FILTERS imported(pluginPayment)

;

idReceipt = DATA LOCAL STRING(INTEGER);
idReceiptDetail = DATA LOCAL STRING(INTEGER);
zReportById = DATA LOCAL ZReport(INTEGER);
index = PARTITION SUM 1 ORDER d BY purchasePayment(d), typeClass(d) CHARWIDTH 4;

skuCustom = ABSTRACT Sku (INTEGER);
overCreateReceiptDetail ABSTRACT LIST (ReceiptDetail, INTEGER);

afterCancelledTransaction ABSTRACT LIST (STRING);

extraPaymentType = ABSTRACT CASE PaymentType (STRING);
cashRegister(INTEGER i) = GROUP MAX CashRegister c IF idStoreSet(c) = shop1(i) AND idCashRegisterSet(c) = cash1(i);

idCashier (INTEGER i) = tabNumber(i) + '_' + userName(i);
overCreateReceipt ABSTRACT LIST (Receipt, INTEGER);
beforeCreateReceipts ABSTRACT LIST ();
skipCashierImport = ABSTRACT BOOLEAN ();

overCreateReceiptDetail(ReceiptDetail d, INTEGER j) +{
    IF weightCode(groupCashRegister(cashRegister(receipt(d)))) AND NOT sku(d) THEN {
        sku(d) <- skuBarcode(substrFrom(barCode(j), 3));
    }
}

overCreateZReport ABSTRACT LIST(ZReport);

useDeletePaymentSet10 = DATA BOOLEAN ();

paymentTypeExtra = DATA LOCAL PaymentType (INTEGER);
importReceiptExtra  ABSTRACT LIST(STRING);

paymentFill ABSTRACT LIST (Payment, INTEGER);

importReceipts(STRING purchases){
    stringToFile(purchases);
    IMPORT purchasesImport XML FROM resultFile();

    LOCAL idZReport = STRING (INTEGER);
    idZReport(INTEGER i) <- STRING[100](operDay1(i) + '_' + shop1(i) + '_' + cash1(i) + '_' + shift1(i));

    FOR INTEGER x = [GROUP MAX INTEGER i BY idZReport(i)](STRING id) AND NOT zReport(id) NEW z = ZReport DO{
        id(z) <- id;
        cashRegister(z) <- GROUP MAX CashRegister c IF idStoreSet(c) = shop1(x) AND idCashRegisterSet(c) = cash1(x);
        isPosted(z) <- TRUE;
        date(z) <- DATE(operDay1(x));
        number(z) <- STRING[48](shift1(x));
        overCreateZReport(z);
    }

    idReceipt(INTEGER i) <- operDay1(i) + '_' + shop1(i) + '_' + cash1(i) + '_' + shift1(i) + '_' + number2(i);
    idReceiptDetail (INTEGER i) <- operationType(purchasePosition(i)) + '_' + idReceipt(purchasePosition(i)) + '_' + order(i);
    zReportById(INTEGER i) <- zReport(idZReport(i));

    LOCAL isSale = BOOLEAN (INTEGER);
    LOCAL isReturn = BOOLEAN (INTEGER);

    isSale(INTEGER i) <- operationType(i) = 'true';
    isReturn(INTEGER i) <- operationType(i) = 'false';

    //оплаты
    LOCAL paymenId = STRING (INTEGER);
    LOCAL sumChange = NUMERIC[18,4] (INTEGER);
    LOCAL shop = GroupCashRegister (STRING);
    LOCAL startDateValid = BOOLEAN (INTEGER);

    paymenId (INTEGER i) <- STRING[100](idReceipt(purchasePayment(i)) + '_' + typeClass(i)) + '_' + index(i);
    sumChange(INTEGER i) <- NUMERIC[18,4](GROUP MAX amount1(INTEGER j) IF typeClass(j) = 'CashChangePaymentEntity' AND purchasePayment(j) = i);
    shop(STRING id) <- GROUP MAX GroupCashRegister g IF idStoreSet(g) = id AND active(g);
    startDateValid(INTEGER i) <- DATE(saletime1(i)) >= startDate(shop(shop1(i))) OR (NOT startDate(shop(shop1(i))) AND saletime1(i)) AND cashRegister(i);

    IF NOT skipCashierImport() THEN {

        FOR INTEGER x = [GROUP MAX INTEGER i BY idCashier(i)](STRING id) AND NOT employee(id) NEW e = Employee DO{
            id(e) <- id;
            lastName(e) <- ISTRING[100](getWord(userName(x), ' ', 1));
            firstName(e) <- ISTRING[100](replace(userName(x), getWord(userName(x), ' ', 1), ''));
        }
    }
    beforeCreateReceipts();

    //создание чеков

    FOR INTEGER x = [GROUP MAX INTEGER i IF startDateValid(i) BY idReceipt(i)](STRING id) AND NOT receipt(id)
        AND ZReport z = zReportById(x) DO NEW r = Receipt{
        id(r) <- id;
        zReport(r) <- z;
    }

    FOR INTEGER x = [GROUP MAX INTEGER i IF startDateValid(i) BY idReceipt(i)](STRING id) AND Receipt r = receipt(id) DO{
        employee(r) <- employee(idCashier(x)) WHERE NOT skipCashierImport();
        date(r) <- DATE(saletime1(x));
        time(r) <- TIME(DATETIME(saletime1(x)));
        number(r) <- INTEGER (number2(x));
    }

    LOCAL saleReceipt = Receipt(INTEGER);
    saleReceipt(INTEGER i) <- receipt(operDay(i) + '_' + shop(i) + '_' + cash(i) + '_' + shift(i) + '_' + number(i)) IF isReturn(i);

    FOR INTEGER x = [GROUP MAX INTEGER i BY idReceiptDetail(i)](STRING id) AND isSale(purchasePosition(x)) AND Receipt r = receipt(idReceipt(purchasePosition(x)))
        AND NOT receiptDetail(id) NEW d = ReceiptSaleDetail DO {
        id(d) <- id;
        receipt(d) <- r;
    }
    FOR INTEGER x = [GROUP MAX INTEGER i BY idReceiptDetail(i)](STRING id) AND isReturn(purchasePosition(x)) AND Receipt r = receipt(idReceipt(purchasePosition(x)))
        AND NOT receiptDetail(id) NEW d = ReceiptReturnDetail DO {
        id(d) <- id;
        receipt(d) <- r;
    }

    
    LOCAL receiptSaleDetail = ReceiptSaleDetail (INTEGER);
    LOCAL receiptReturnDetail = ReceiptReturnDetail (INTEGER);

    receiptSaleDetail(INTEGER i ) <- GROUP MAX ReceiptSaleDetail d IF id(d) = idReceiptDetail(i);

    receiptReturnDetail(INTEGER i ) <- GROUP MAX ReceiptReturnDetail d IF id(d) = idReceiptDetail(i);

    FOR ReceiptSaleDetail d = receiptSaleDetail(INTEGER j) DO{
        idBarcode(d) <- STRING[15](barCode(j));
        sku(d) <- OVERRIDE skuCustom(j), skuBarcode(barCode(j));
        price(d) <- NUMERIC[16,4](cost(j));
        quantity(d) <- NUMERIC[16,5](count(j));
        discountSum(d) <- NUMERIC[16,4] (discountValue(j));
        sum(d) <- NUMERIC[16,4](amount(j));
    }

    FOR ReceiptReturnDetail d = receiptReturnDetail(INTEGER j) DO{
        idBarcode(d) <- STRING[15](barCode(j));
        sku(d) <- OVERRIDE skuCustom(j), skuBarcode(barCode(j));
        price(d) <- NUMERIC[16,4](cost(j));
        quantity(d) <- NUMERIC[16,5](count(j));
        discountSum(d) <- NUMERIC[16,4] (discountValue(j));
        sum(d) <- NUMERIC[16,4](amount(j));
        saleReceipt(d) <- saleReceipt(j);
    }

    LOCAL paymentType = PaymentType (INTEGER);
    paymentTypeExtra(INTEGER j) <- NULL;        
    importReceiptExtra(purchases);
    
    paymentType(INTEGER j) <- (IF typeClass(j) = 'CashPaymentEntity' THEN 
        typePaymentSID('cash') 
        ELSE
        OVERRIDE paymentTypeExtra(j), extraPaymentType(typeClass(j)), typePaymentSID('card')
    ) IF purchasePayment(j);
    


    LOCAL sumPayment = NUMERIC[18,4] (INTEGER);
    sumPayment(INTEGER j) <- NUMERIC[18,4](
        (IF typeClass(j) = 'CashPaymentEntity' THEN NUMERIC[18,4](amount1(j)) (-) sumChange(purchasePayment(j))
        ELSE 
        NUMERIC[18,4] (amount1(j)))
        * (IF isSale(purchasePayment(j)) THEN 1 ELSE -1)
    ) IF purchasePayment(j);


    IF useDeletePaymentSet10() THEN{
        FOR Receipt r = receipt(idReceipt(purchasePayment(INTEGER j))) DO
            DELETE Payment p WHERE receipt(p) = r;
    }
    
    FOR Receipt r = receipt(idReceipt(purchasePayment(INTEGER j))) AND NOT payment(paymenId(j))
        AND NOT typeClass(j) = 'CashChangePaymentEntity' NEW p = Payment DO{

        id(p) <- STRING[100](paymenId(j));
        receipt(p) <- r;
        sum(p) <- sumPayment(j);
        paymentType(p) <- paymentType(j);

    }
    
    FOR Receipt r = receipt(idReceipt(purchasePayment(INTEGER j))) AND Payment p = payment(paymenId(j)) DO{
        
        sum(p) <- sumPayment(j);
        paymentType(p) <- paymentType(j);

    }

    //доп.обработки
    FOR INTEGER x = [GROUP MAX INTEGER i IF startDateValid(i) BY idReceipt(i)](STRING id) AND Receipt r = receipt(id) DO{
        overCreateReceipt(r, x);
    }
    FOR ReceiptSaleDetail d = receiptSaleDetail(INTEGER j) DO{
        overCreateReceiptDetail(d, j);
    }
    FOR ReceiptReturnDetail d = receiptReturnDetail(INTEGER j) DO{
        overCreateReceiptDetail(d, j);
    }

    FOR Receipt r = receipt(idReceipt(purchasePayment(INTEGER j))) AND Payment p = payment(paymenId(j)) DO{
        paymentFill(p, j);
    }

    APPLY NESTED LOCAL;
}

importReceipt(STRING purchases){
    NEWSESSION {
        importReceipts(purchases);
        IF canceled() THEN {
            logToFile('set10', (CONCAT ' : ', 'purchases canceled', applyMessage()));
            afterCancelledTransaction(purchases);
        }
    }
}

GROUP processPurchases EXTID 'ns2=http://purchases.erpi.crystals.ru:processPurchases' : bodyAnswer;

purchases = DATA LOCAL STRING();
version = DATA LOCAL STRING();

FORM purchasesRequest FORMEXTID 'soap=http://schemas.xmlsoap.org/soap/envelope/:Envelope'
    PROPERTIES ATTR IN processPurchases ='http://purchases.erpi.crystals.ru' EXTID 'xmlns:ns2'
    PROPERTIES() IN processPurchases purchases, version
;

//только прием
onlySaveRequestSet10 'Только сохранять запросы set10' = DATA BOOLEAN () PREREAD; 

CLASS SetReceipts 'Чеки Set10';
TABLE setReceipts (SetReceipts);

dateTime 'Дата и время' = DATA DATETIME (SetReceipts);
data 'Данные' = DATA STRING (SetReceipts);
imported 'Импортировано' = DATA DATETIME (SetReceipts);

importReceipts 'Импорт Set10'(){
    FOR dateTime(SetReceipts r) AND NOT imported(r) DO NEWSESSION {
        
        importReceipts(data(r));
        imported(r) <- currentDateTime();
        APPLY;
    }
}

import 'Импорт чеков' (SetReceipts r){
    importReceipts(data(r));
}

FORM setReceiptsLogs 'Журнал чеков Set10'
    OBJECTS s = SetReceipts
    PROPERTIES (s) READONLY dateTime, data, imported
    PROPERTIES TOOLBAR importReceipts(), import(s) 
;

set_purchases(FILE f) {
    TRY{
        fileToString(f);
        IMPORT purchasesRequest XML FROM f;
        IF purchases() THEN {
            decodeBase64(purchases());
            IF useInSet10Log() THEN logToFile('set10', (CONCAT ' ', 'purchases', decodedBase64()));
            IF onlySaveRequestSet10() THEN NEW r = SetReceipts{
                dateTime(r) <- currentDateTime();
                data(r) <- decodedBase64();
                APPLY NESTED LOCAL;
            }
            ELSE {
                importReceipt(decodedBase64());
            }
            IF canceled() THEN {
                logToFile('set10', (CONCAT ' : ', 'purchases error', applyMessage()));
                statusHttpTo() <- 500;
            }
            ELSE
                logToFile('set10', (CONCAT ' : ', 'purchases imported', count1() + ' receipts'));
        }
        ELSE statusHttpTo() <- 500; 
    }
    CATCH {
        logToFile('set10', (CONCAT ' : ', 'purchases exception', messageCaughtException()));
        statusHttpTo() <- 500;
    }
}@@noauth;

//запросы обмена данными
reImportReceipt(STRING purchases, STRING shopId){
    importReceipts(purchases);
    NEWSESSION {
        stringToFile(purchases);
        IMPORT purchasesImport XML FROM resultFile();
        beforeCreateReceipts();

        LOCAL idZReport = STRING (INTEGER);
        idZReport(INTEGER i) <- STRING[100](operDay1(i) + '_' + shop1(i) + '_' + cash1(i) + '_' + shift1(i));

        FOR INTEGER x = [GROUP MAX INTEGER i BY idZReport(i)](STRING id) AND NOT zReport(id) NEW z = ZReport DO{
            id(z) <- id;
            cashRegister(z) <- GROUP MAX CashRegister c IF idStoreSet(c) = shop1(x) AND idCashRegisterSet(c) = cash1(x);
            isPosted(z) <- TRUE;
            date(z) <- DATE(operDay1(x));
            number(z) <- STRING[48](shift1(x));
            overCreateZReport(z);
        }

        idReceipt(INTEGER i) <- operDay1(i) + '_' + shop1(i) + '_' + cash1(i) + '_' + shift1(i) + '_' + number2(i);
        idReceiptDetail (INTEGER i) <- operationType(purchasePosition(i)) + '_' + idReceipt(purchasePosition(i)) + '_' + order(i);
        zReportById(INTEGER i) <- zReport(idZReport(i));

        //оплаты
        LOCAL paymenId = STRING (INTEGER);
        LOCAL sumChange = NUMERIC[18,4] (INTEGER);
        LOCAL shop = GroupCashRegister (STRING);
        LOCAL startDateValid = BOOLEAN (INTEGER);

        paymenId (INTEGER i) <- STRING[100](idReceipt(purchasePayment(i)) + '_' + typeClass(i)) + '_' + index(i);
        sumChange(INTEGER i) <- NUMERIC[18,4](GROUP MAX amount1(INTEGER j) IF typeClass(j) = 'CashChangePaymentEntity' AND purchasePayment(j) = i);
        shop(STRING id) <- GROUP MAX GroupCashRegister g IF idStoreSet(g) = id AND active(g);
        startDateValid(INTEGER i) <- DATE(saletime1(i)) >= startDate(shop(shop1(i))) OR (NOT startDate(shop(shop1(i))) AND saletime1(i));
        
        paymentTypeExtra(INTEGER j) <- NULL;
        importReceiptExtra(purchases);
        
        FOR imported(INTEGER i) AND Receipt r = receipt(idReceipt(i)) AND shopId = shop1(i) DO{
            date(r) <- DATE(saletime1(i));
            time(r) <- TIME(DATETIME(saletime1(i)));
            employee(r) <- employee(idCashier(i)) WHERE NOT skipCashierImport();
            number(r) <- INTEGER (number2(i));
            overCreateReceipt(r, i);
            zReport(r) <- zReportById(i);
            IF NOT number(zReport(r)) THEN number(zReport(r)) <- STRING[48](shift1(i)); 
            FOR purchasePosition(INTEGER j) = i AND ReceiptDetail d = receiptDetail(idReceiptDetail(j)) DO {
        
                idBarcode(d) <- STRING[15](barCode(j));
                sku(d) <- OVERRIDE skuCustom(j), skuBarcode(barCode(j));
                price(d) <- NUMERIC[16,4](cost(j));
                quantity(d) <- NUMERIC[16,5](count(j));
                discountSum(d) <- NUMERIC[16,4] (discountValue(j));
                sum(d) <- NUMERIC[16,4](amount(j));
                receipt(d) <- r;
                sumVAT(d) <- NUMERIC[18,4](ndsSum(j));
                VAT(d) <- valueCurrentVAT(defaultCountry(), NUMERIC[18,4](nds(j))) WHERE nds(j) !='-1';
                VAT(d) <- valueCurrentVAT(defaultCountry(), 0.0) WHERE nds(j) ='-1';
                saleReceipt(d) <- receipt(operDay(i) + '_' + shop(i) + '_' + cash(i) + '_' + shift(i) + '_' + number(i));
                overCreateReceiptDetail(d, j);
            
            }
            FOR purchasePayment(INTEGER j) == i AND Payment p = payment(paymenId(j)) 
                AND NOT typeClass(j) = 'CashChangePaymentEntity' DO {
            
                id(p) <- paymenId(j);
                receipt(p) <- r;
                sum(p) <- NUMERIC[18,4]((IF typeClass(j) = 'CashPaymentEntity' THEN 
                    (NUMERIC[18,4](amount1(j)) (-) sumChange(i))
                    ELSE  NUMERIC[18,4] (amount1(j))) * (IF operationType(i) = 'true' THEN 1 ELSE -1));
                paymentType(p) <- IF typeClass(j) = 'CashPaymentEntity' THEN typePaymentSID('cash')
                    ELSE OVERRIDE paymentTypeExtra(j), extraPaymentType(typeClass(j)), typePaymentSID('card');
            }
        }
        APPLY;
    }
}

//запрос обмена данными

monthCaption (INTEGER i) = CASE
    WHEN i = 1 THEN 'JANUARY'
    WHEN i = 2 THEN 'FEBRUARY'
    WHEN i = 3 THEN 'MARCH'
    WHEN i = 4 THEN 'APRIL'
    WHEN i = 5 THEN 'MAY'
    WHEN i = 6 THEN 'JUNE'
    WHEN i = 7 THEN 'JULY'
    WHEN i = 8 THEN 'AUGUST'
    WHEN i = 9 THEN 'SEPTEMBER'
    WHEN i = 10 THEN 'OCTOBER'
    WHEN i = 11 THEN 'NOVEMBER'
    WHEN i = 12 THEN 'DECEMBER'
;
                     
monthCaption (DATE d) = monthCaption(extractMonthNumber(d));                     

GROUP body EXTID 'soapenv:Body';
GROUP getPurchasesByOperDayData EXTID 'plug:getPurchasesByOperDayData' : bodyRequest;

year = DATA LOCAL STRING();
mobth = DATA LOCAL STRING();
day = DATA LOCAL STRING();

FORM requestExchangeReq FORMEXTID 'soapenv=http://schemas.xmlsoap.org/soap/envelope/:Envelope'
    PROPERTIES ATTR ='http://plugins.operday.ERPIntegration.crystals.ru/' EXTID 'xmlns:plug'
    PROPERTIES() header EXTID 'soapenv:Header'
    PROPERTIES() IN getPurchasesByOperDayData year EXTID 'Year', mobth EXTID 'Mobth', day EXTID 'Day';

GROUP getPurchasesByOperDayDataResponse EXTID 'ns2=http://plugins.operday.ERPIntegration.crystals.ru/:getPurchasesByOperDayDataResponse' : bodyAnswer;

FORM requestExchangeAnswer FORMEXTID 'soap=http://schemas.xmlsoap.org/soap/envelope/:Envelope'
    PROPERTIES ATTR IN getPurchasesByOperDayDataResponse ='http://plugins.operday.ERPIntegration.crystals.ru/' EXTID 'xmlns:ns2'
    PROPERTIES() IN getPurchasesByOperDayDataResponse return;

senRequestExchange(DATE d, GroupCashRegister g){
    year() <- STRING(extractYear(d));
    mobth() <- monthCaption(d);
    day() <- STRING(extractDay(d));
    EXPORT requestExchangeReq XML;
    LOCAL headersSet = STRING (STRING);
    headersSet('Content-Type') <- 'application/xml';
    LOCAL answer = FILE ();
    EXTERNAL HTTP POST urlServerSet10() + 'SET-ERPIntegration/FiscalInfoExport' HEADERS headersSet PARAMS exportFile() TO answer;
    IMPORT requestExchangeAnswer XML FROM answer();
    fileToString(answer());
    logToFile('set10', (CONCAT ' ', 'purchases request', d,  resultString()));
    IF return() THEN {
        decodeBase64(return());
        importReceipts(decodedBase64());
    }
}

EXTEND CLASS RequestExchangeType{
    salesInfoSet10 'Перезагрузить продажи Set10',
    salesInfoSet10WithDiscountCalc 'Перезагрузить продажи Set10(с расчетом скидок)'
}

setGroup (Stock c) = GROUP MIN GroupCashRegister g IF active(g) AND isSet10(g) BY stock(g);

//запрос с параметрами

GROUP getPurchasesByParams EXTID 'plug:getPurchasesByParams' : bodyRequest;
GROUP getPurchasesByParamsDataResponse EXTID 'ns2=http://plugins.operday.ERPIntegration.crystals.ru/:getPurchasesByParamsResponse' : bodyAnswer;

operDay = DATA LOCAL DATE ();
shopNumber = DATA LOCAL STRING();

FORM requestExchangeParamsReq FORMEXTID 'soapenv=http://schemas.xmlsoap.org/soap/envelope/:Envelope'
    PROPERTIES ATTR ='http://plugins.operday.ERPIntegration.crystals.ru/' EXTID 'xmlns:plug'
    PROPERTIES() header EXTID 'soapenv:Header'
    PROPERTIES IN getPurchasesByParams = toChar(operDay(), 'yyyy-MM-dd') EXTID 'dateOperDay', shopNumber() EXTID 'shopNumber'
;

FORM requestExchangeParamsAnswer FORMEXTID 'soap=http://schemas.xmlsoap.org/soap/envelope/:Envelope'
    PROPERTIES ATTR IN getPurchasesByOperDayDataResponse ='http://plugins.operday.ERPIntegration.crystals.ru/' EXTID 'xmlns:ns2'
    PROPERTIES() IN getPurchasesByParamsDataResponse return
;

senRequestExchangeByStore(DATE d, STRING id){
    operDay() <- d;
    shopNumber() <- id;
    EXPORT requestExchangeParamsReq XML;
    LOCAL headersSet = STRING (STRING);
    headersSet('Content-Type') <- 'application/xml';
    LOCAL answer = FILE ();
    EXTERNAL HTTP POST urlServerSet10() + 'SET-ERPIntegration/FiscalInfoExport' HEADERS headersSet PARAMS exportFile() TO answer;
    IMPORT requestExchangeParamsAnswer XML FROM answer();
    IF return() THEN {
        decodeBase64(return());
        importReceipt(decodedBase64());
    }
}

salesInfoSet10ByStore 'Перезагрузить продажи Set10(по магазинам)' (RequestExchange r){
    TRY {
        FOR iterate(DATE d, dateFrom(r), dateTo(r)) DO senRequestExchangeByStore(d, idStoreSet(setGroup(stock(r))));
        succeededNative(r) <- TRUE;
        dateTimeSucceededNative(r) <- currentDateTime();
    }
    CATCH {
        NEW er = RequestExchangeError{
            requestExchange(er) <- r;
            date(er) <- currentDateTime();
            erTrace(er) <- messageCaughtException();
        }
    }
    FINALLY {
        APPLY;
    }
}
//с расчетом скидок

GROUP getFullPurchasesByParams EXTID 'plug:getFullPurchasesByParams' : bodyRequest;
GROUP getFullPurchasesByParamsDataResponse EXTID 'ns2=http://plugins.operday.ERPIntegration.crystals.ru/:getFullPurchasesByParamsResponse' : bodyAnswer;


FORM getFullPurchasesByParamsReq FORMEXTID 'soapenv=http://schemas.xmlsoap.org/soap/envelope/:Envelope'
    PROPERTIES ATTR ='http://plugins.operday.ERPIntegration.crystals.ru/' EXTID 'xmlns:plug'
    PROPERTIES() header EXTID 'soapenv:Header'
    PROPERTIES IN getPurchasesByParams = toChar(operDay(), 'yyyy-MM-dd') EXTID 'dateOperDay', shopNumber() EXTID 'shopNumber'
;

FORM getFullPurchasesByParamsAnswer FORMEXTID 'soap=http://schemas.xmlsoap.org/soap/envelope/:Envelope'
    PROPERTIES ATTR IN getFullPurchasesByParamsDataResponse ='http://plugins.operday.ERPIntegration.crystals.ru/' EXTID 'xmlns:ns2'
    PROPERTIES() IN getFullPurchasesByParamsDataResponse return
;
senRequestExchangeWithDoscount (DATE d, STRING id){
    operDay() <- d;
    shopNumber() <- id;
    EXPORT getFullPurchasesByParamsReq XML;
    LOCAL headersSet = STRING (STRING);
    headersSet('Content-Type') <- 'application/xml';
    LOCAL answer = FILE ();
    EXTERNAL HTTP POST urlServerSet10() + 'SET-ERPIntegration/FiscalInfoExport' HEADERS headersSet PARAMS exportFile() TO answer;
    IMPORT getFullPurchasesByParamsAnswer XML FROM answer();
    IF return() THEN {
        decodeBase64(return());
        importReceipt(decodedBase64());
    }
}

salesInfoSet10WithDiscountCalc 'Перезагрузить продажи Set10(по магазинам)' (RequestExchange r){
    TRY {
        FOR iterate(DATE d, dateFrom(r), dateTo(r)) DO senRequestExchangeWithDoscount(d, idStoreSet(setGroup(stock(r))));
        succeededNative(r) <- TRUE;
        dateTimeSucceededNative(r) <- currentDateTime();
    }
        CATCH {
        NEW er = RequestExchangeError{
            requestExchange(er) <- r;
            date(er) <- currentDateTime();
            erTrace(er) <- messageCaughtException();
        }
    }
        FINALLY {
        APPLY;
    }
}

//
salesInfoSet10 'Перезагрузить продажи Set10' (RequestExchange r){
    TRY {
        FOR iterate(DATE d, dateFrom(r), dateTo(r)) DO senRequestExchange(d, setGroup(stock(r)));
        succeededNative(r) <- TRUE;
        dateTimeSucceededNative(r) <- currentDateTime();
    }
    CATCH {
        NEW er = RequestExchangeError{
            requestExchange(er) <- r;
            date(er) <- currentDateTime();
            erTrace(er) <- messageCaughtException();
        }
    }
    FINALLY {
        APPLY;
    }
}

EXTEND FORM requestExchange
    PROPERTIES (r) salesInfoSet10 SHOWIF requestExchangeType(r) == RequestExchangeType.salesInfoSet10
    PROPERTIES (r) salesInfoSet10WithDiscountCalc SHOWIF requestExchangeType(r) == RequestExchangeType.salesInfoSet10WithDiscountCalc;

DESIGN requestExchange{
    secondRow{
        MOVE PROPERTY (salesInfoSet10(r));
        MOVE PROPERTY (salesInfoSet10WithDiscountCalc(r));
    }
}   
EXTEND FORM integrationData
    PROPERTIES onlySaveRequestSet10()
;

DESIGN integrationData{
    set10{
        MOVE PROPERTY (onlySaveRequestSet10());
    }
}

NAVIGATOR {
    logs{
        NEW setReceiptsLogs;
    }
}