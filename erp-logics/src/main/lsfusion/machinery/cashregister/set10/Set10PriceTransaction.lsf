MODULE Set10PriceTransaction;

REQUIRE MachineryPriceTransactionStockTax, NativeMachinery, Item, CashRegisterPriceTransaction, LogTools;

NAMESPACE Set10;

@defineLogRotate(set10, 5, weekly);

isSet10 (GroupCashRegister g) = TRUE IF handlerModel(g) = 'lsf.set10';
idStoreSet 'Код магазина Set10' = DATA STRING[20] (GroupCashRegister);
idStoreSet (CashRegister c) = idStoreSet(groupCashRegister(c));
idCashRegisterSet 'Номер кассы' = DATA STRING[20] (CashRegister);

EXTEND FORM groupCashRegister
    PROPERTIES (grc) SHOWIF isSet10(grc) idStoreSet
    PROPERTIES (c) idCashRegisterSet AFTER npp(c)
;

DESIGN groupCashRegister{
    topContainer{
        MOVE PROPERTY (idStoreSet(grc));
    }
}

EXTEND FORM groupsCashRegister
    PROPERTIES (grc) READONLY idStoreSet
    PROPERTIES (c) READONLY idCashRegisterSet AFTER npp(c)
;

urlServerSet10 'Адрес:порт сервера SET10' = DATA STRING ();

EXTEND FORM integrationData
    PROPERTIES urlServerSet10();

DESIGN integrationData{
    pane{
        NEW set10{
            caption = 'SET10';
            MOVE PROPERTY (urlServerSet10());
        }
    }
}

//обработка ответа
GROUP bodyRequest EXTID 'soapenv:Body';
GROUP bodyAnswer EXTID 'soap:Body';
GROUP getGoodsCatalogWithTiResponse 
    EXTID 'ns2=http://plugins.products.ERPIntegration.crystals.ru/:getGoodsCatalogWithTiResponse' : bodyAnswer;

return = DATA LOCAL STRING();

FORM answer FORMEXTID 'soap=http://schemas.xmlsoap.org/soap/envelope/:Envelope'
    PROPERTIES() IN getGoodsCatalogWithTiResponse return;
;

GROUP fault EXTID 'soap:Fault' : bodyAnswer;

faultcode = DATA LOCAL STRING();
faultstring = DATA LOCAL STRING();

FORM fault FORMEXTID 'soap=http://schemas.xmlsoap.org/soap/envelope/:Envelope'
    PROPERTIES() IN fault faultcode, faultstring
;

//выгрузка товаров
GROUP bar_code EXTID 'bar-code';
GROUP good;
GROUP group;

GROUP parent_group EXTID 'parent-group' : group;
GROUP parent_group1 EXTID 'parent-group' : parent_group;
GROUP measure_type EXTID 'measure-type';
GROUP country;

productType = ABSTRACT CASE STRING (Sku);
productType (Sku s) += WHEN passScales(s) AND split(s) THEN 'ProductWeightEntity';
productType (Sku s) += WHEN passScales(s) AND NOT split(s) THEN 'ProductPieceWeightEntity';

value (STRING s, Barcode b, MachineryPriceTransaction m) = CASE 
    WHEN s = 'precision' AND in(m, b) AND (passScales(m, b) OR split(m, b)) THEN '0.001'
    WHEN s = 'precision' AND in(m, b) AND NOT (passScales(m, b) OR split(m, b)) THEN '1.0'
    WHEN s = 'composition' AND in(m, b) AND expiryDate(m, b) THEN  'Годен до ' + toChar(expiryDate(m, b), 'dd.MM.yyyyy')
    WHEN s = 'composition' AND in(m, b) AND expiryDays(m, b) THEN  'Срок годности ' + expiryDays(m, b) + ' дней'
;

FORM goodsCatalog FORMEXTID 'goods-catalog'
    OBJECTS m = MachineryPriceTransaction PANEL EXTID ''
    
    OBJECTS good = Barcode.Barcode
    PROPERTIES name(m, good), = OVERRIDE VAT(m, good), 0 EXTID 'vat', 
        = idSku(good) EXTID 'marking-of-the-good' ATTR,=  IF in(m, good) THEN 'false' EXTID 'delete-from-cash',
        = OVERRIDE productType(sku(good)), 'ProductPieceEntity' EXTID 'product-type',
        = IF good IS Barcode THEN idStoreSet(groupMachinery(m)) EXTID 'shop-indices'
    PROPERTIES IN measure_type = OVERRIDE shortNameUOM(m, good) EXTID 'id' ATTR, shortNameUOM(m, good) EXTID 'name'
    
    PROPERTIES IN group = idItemGroup(sku(good)) EXTID 'id' ATTR, = canonicalNameItemGroup(sku(good)) EXTID 'name'
    
    OBJECTS plugin_property = STRING EXTID 'plugin-property'
    PROPERTIES value(plugin_property, good, m) ATTR EXTID 'value', VALUE(plugin_property) EXTID 'key' ATTR
    FILTERS value(plugin_property, good, m)
    
    FILTERS in(m, good)
;

FORM barcodesCatalog FORMEXTID 'goods-catalog'
    OBJECTS m = MachineryPriceTransaction PANEL EXTID ''
    
    OBJECTS good = Barcode.Barcode EXTID 'bar-code'
    PROPERTIES = idSku(good) EXTID 'marking-of-the-good' ATTR, id(good) EXTID 'code' ATTR , 
        = IF primary(good) THEN 'true' ELSE 'false' EXTID 'default-code'  
    FILTERS in(m, good)     
;

GROUP department;
   
FORM priceEntry FORMEXTID 'goods-catalog'
    OBJECTS m = MachineryPriceTransaction PANEL EXTID ''
    
    OBJECTS good = Barcode.Barcode EXTID 'price-entry'
    PROPERTIES = idSku(good) EXTID 'marking-of-the-good' ATTR, = round2(price(m, good)) EXTID 'price' ATTR,
        = IF in(m, good) THEN 'false' EXTID 'deleted' ATTR, = IF in(m, good) THEN '1' EXTID 'number'
    PROPERTIES IN department = IF in(m, good) THEN '1' EXTID 'number'
    FILTERS in(m, good)
;
    
GROUP getGoodsCatalogWithTi EXTID 'plug:getGoodsCatalogWithTi' : bodyRequest;

header = DATA LOCAL STRING();
goodsCatalogXML = DATA LOCAL STRING();
TI = DATA LOCAL STRING[100]();

FORM requestItem FORMEXTID 'soapenv=http://schemas.xmlsoap.org/soap/envelope/:Envelope'
    PROPERTIES ATTR ='http://plugins.products.ERPIntegration.crystals.ru/' EXTID 'xmlns:plug'
    PROPERTIES() header EXTID 'soapenv:Header'
    PROPERTIES() IN getGoodsCatalogWithTi goodsCatalogXML, TI
;

statusTransaction = DATA STRING[100] (MachineryPriceTransaction, STRING);

sendRequsetGoods(FILE f, STRING type, MachineryPriceTransaction t){
    fileToString(f);
    encodeBase64(resultString());
    goodsCatalogXML()<- encodedBase64();
    LOCAL headersSet = STRING (STRING);
    headersSet('Content-Type') <- 'application/xml';
    generateUUID();
    TI() <- generatedUUID();
    LOCAL answer = FILE();
    LOCAL req = FILE();
    EXPORT requestItem XML TO req;
    TRY{
        EXTERNAL HTTP POST urlServerSet10() + 'SET-ERPIntegration/SET/WSGoodsCatalogImport' HEADERS headersSet PARAMS req() TO answer;
        IMPORT answer XML FROM answer();
        IF return() = 'true' THEN statusTransaction(t, type) <- TI();
    }
    CATCH {
        fileToString(answer());
        addMachineryError(t, 'Ошибка загрузки ' + type, (CONCAT '\n', messageCaughtException(), resultString()));
        APPLY;
    }
    APPLY;
}

//get feedback
GROUP getPackageStatus EXTID 'feed:getPackageStatus' : bodyRequest;
GROUP xmlGetstatus : getPackageStatus;
GROUP importRequest EXTID 'import' : xmlGetstatus;
isCorrect (MachineryPriceTransaction t) = IF (GROUP SUM 1 IF statusTransaction(t, STRING s) = 'correct') 
    = (GROUP SUM 1 IF statusTransaction(t, STRING s)) THEN TRUE;


import = DATA LOCAL STRING();
ti = DATA LOCAL STRING();

FORM getFeedbackRequest FORMEXTID 'soapenv=http://schemas.xmlsoap.org/soap/envelope/:Envelope'
    PROPERTIES ATTR ='http://feedback.ERPIntegration.crystals.ru/' EXTID 'xmlns:feed'
    PROPERTIES() header EXTID 'soapenv:Header'
    PROPERTIES() IN xmlGetstatus import
    PROPERTIES() IN importRequest ti ATTR
;

GROUP getPackageStatusResponse EXTID 'ns2=http://feedback.ERPIntegration.crystals.ru/:getPackageStatusResponse' : bodyAnswer;
GROUP xmlGetstatusAnswer EXTID 'xmlGetstatus': getPackageStatusResponse;
GROUP importAnswer EXTID 'import' : xmlGetstatusAnswer;

status_message = DATA LOCAL STRING();
status = DATA LOCAL STRING();

FORM getFeedbackAnswer FORMEXTID 'soap=http://schemas.xmlsoap.org/soap/envelope/:Envelope'
    PROPERTIES ATTR IN getPackageStatusResponse ='http://feedback.ERPIntegration.crystals.ru/' EXTID 'xmlns:ns2'
    PROPERTIES() IN importAnswer status_message EXTID 'status-message' ATTR, status ATTR, ti ATTR
;

getFeedback(MachineryPriceTransaction t){
    LOCAL message = STRING ();
    FOR statusTransaction(t, STRING s) DO{
        LOCAL answer = FILE ();
        TRY{
            ti() <- statusTransaction(t, s);
            EXPORT getFeedbackRequest XML;
            LOCAL headersSet = STRING (STRING);
            headersSet('Content-Type') <- 'application/xml';
            EXTERNAL HTTP POST urlServerSet10() + 'SET-ERPIntegration/SET/FeedbackWS' HEADERS headersSet 
                PARAMS exportFile() TO answer;
            fileToString(answer());
            logToFile('set10', (CONCAT ' ', 'Get Feedback',  resultString()));
            IMPORT getFeedbackAnswer XML FROM answer();
            CASE
                WHEN status() = '2' THEN message() <- CONCAT '\n', message(), s, status_message();
                WHEN status() = '3' THEN statusTransaction(t, s) <- status_message();
                ELSE {
                    addMachineryError(t, (CONCAT ' : ', s, status_message()), resultString());
                    statusTransaction(t, s) <- 'fault';
                } 
        }
        CATCH{
            addMachineryError(t, (CONCAT ' : ', s, status_message()), resultString()); 
        }
    }
    IF isCorrect(t) THEN {
        succeeded(t) <-TRUE;
        dateTimeSucceeded(t) <- currentDateTime();
    }
    IF (GROUP SUM 1 IF statusTransaction(t, STRING s) = 'fault') THEN statusTransaction(t, STRING s) <- NULL;
    APPLY;
}

sendSet10Transaction(MachineryPriceTransaction t){
    EXPORT goodsCatalog OBJECTS m = t XML;
    sendRequsetGoods(exportFile(), 'item', t);

    EXPORT barcodesCatalog OBJECTS m = t XML;
    sendRequsetGoods(exportFile(), 'barcode', t);

    EXPORT priceEntry OBJECTS m = t XML;
    sendRequsetGoods(exportFile(), 'price', t);
}

sendPriceTransaction (MachineryPriceTransaction t){
    TRY{
        IF (GROUP SUM 1 IF statusTransaction(t, STRING s)) THEN getFeedback(t);
        ELSE {
            NEWSESSION { dateTimeProcessing(t) <- currentDateTime(); APPLY; }
            sendSet10Transaction(t);
        }
    }
    CATCH {
        addMachineryError(t, (CONCAT ' : ' , nameGroupMachinery(t), 'Ошибка при выполнении операции ', 
            messageCaughtException()), messageCaughtException());
    }
}

sendMachineryPriceTransaction(MachineryPriceTransaction t) + {
    IF handlerModel(groupMachinery(t)) = 'lsf.set10' AND countBarcodes(t) AND t IS CashRegisterPriceTransaction
        AND notSucceeded(t) THEN NEWSESSION {
        sendPriceTransaction(t);
    }
}

setNULL(MachineryPriceTransaction t){
    statusTransaction(t, STRING s) <- NULL;
    APPLY;
}