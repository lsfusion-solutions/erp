MODULE Artix;

REQUIRE CashRegisterPriceTransaction, ItemSSC;


overArtixInfo = ABSTRACT TEXT (MachineryPriceTransaction, Barcode);

//стараемся выполнять последним
createAttribute(MachineryPriceTransaction mpt, GroupMachinery gm) + {
    IF sidModel(gm) == 'Artix' THEN {
      
        info(mpt, Barcode b) <- ('\{"artix":\{'+
                (CONCAT ',',
                    '"age": "' + age(sku(b)) + '"',
                    '"ageverify":1' IF ageVerify(sku(b)),
                    '"visualverify":1' IF visualVerify(sku(b)),
                    '"lowweight":1' IF lowWeight(sku(b)),
                    '"weightcontrolbypass":1' IF weightControlBypass(sku(b)),
                    '"requirequantitymanual":1' IF requireQuantityManual(sku(b)),
                    '"requirequantityscales":1' IF requireQuantityScales(sku(b)),
                    overArtixInfo(mpt,b)
                )
                +'\}\}') WHERE in(mpt, b);
    }
}

dataCustomGroupTypeArtix = DATA CustomGroupType(GroupCashRegister);
nameCustomGroupTypeArtix 'Тип классификатора КСО'(GroupCashRegister gs) = name(dataCustomGroupTypeArtix(gs));

imageArtix = DATA IMAGEFILE (Item);

WHEN CHANGED (image(Item i)) DO { 
    imageArtix(i) <- NULL;
}

imageArtix 'Изображение для Artix' = DATA IMAGEFILE (CustomGroup);

EXTEND FORM customGroups
    PROPERTIES imageArtix(g) READONLY;
    
EXTEND FORM customGroup
    PROPERTIES imageArtix(g) ;
    
encodeBase64 = FORMULA STRING 'regexp_replace(encode(($1),\'base64\'), E\'[\\n\\r]+\', \' \', \'g\' )';

skipFilterBalance 'Не фильтровать по остаткам' = DATA LOCAL NESTED BOOLEAN ();
doClear 'С очисткой' = DATA LOCAL NESTED BOOLEAN ();
export = DATA LOCAL BOOLEAN (CustomGroup);
idParent = DATA LOCAL STRING (Sku);
beforeExport  ABSTRACT LIST (GroupCashRegister);

directoryPickList 'Директория для пиклиста' = DATA STRING[250](GroupCashRegister);

exportPickList 'Выгрузить' (GroupCashRegister gm) {
    NEWSESSION {
        
        IF NOT directoryPickList(gm) THEN {
            MESSAGE name(gm) +': Не задан путь выгрузки пиклиста' NOWAIT;
            RETURN;
        }
        
        export(CustomGroup cg) <- customGroupType(cg) == dataCustomGroupTypeArtix(gm); 
        
        idParent(Sku s) <- id(customGroup(dataCustomGroupTypeArtix(gm), s)) IF ((currentBalance(s, stock(gm)) OR sum(DATE(dateTimeLastMoved(s, stock(gm))), countSendAllMovedDays()) > currentDate()) OR skipFilterBalance()) 
                        AND customGroup(dataCustomGroupTypeArtix(gm), s) AND active(s); 
        
        beforeExport(gm);
        
        IF NOT (GROUP SUM 1 IF idParent(Sku s)) THEN {
            MESSAGE name(gm) +': Нет товаров к выгрузке' NOWAIT;
            RETURN;
        }
        
        FOR idParent(Sku s) AND hasImage(s) AND NOT imageArtix(s) DO {
            TRY {
                convertedImage() <- NULL;
                convertImage((OVERRIDE smallImage(s), image(s)), 'png');
                imageArtix(s) <- convertedImage();
                getFileSize(FILE(convertedImage()));
                IF fileSize() > 40000 THEN {
                    resizeImage(convertedImage(), sqrt(DOUBLE(fileSize())/30000));
                    imageArtix(s) <- resizedImage();
                }
            }
        }
        LOCAL rezult = TEXT ();
        
        IF doClear() THEN {
            rezult() <-'\{"command": "clearPicklist"\}\n---\n';
        }
        
        rezult() <- CONCAT '', rezult(),
                        (GROUP CONCAT ('\{"command": "addPicklist","picklist": \{' + 
                            (CONCAT ',', 
                                '"code": "' + id(CustomGroup cg) + '"',
                                '"name": "' + escapeJSONValue(name(cg)) + '"',
                                '"image": "' + encodeBase64(imageArtix(cg)) + '"',
                                '"parent": ' + (OVERRIDE '"'+id(parent(cg))+'"', 'null')
                            ) 
                        + '\}\}') IF export(cg), '\n---\n' ORDER level(cg), cg)
                    +'\n---\n';
        rezult() <- CONCAT '', rezult(),
                        (GROUP CONCAT ('\{"command": "addPicklist","picklist": \{' + 
                            (CONCAT ',', 
                                '"code": "' + id(Sku s) + '"',
                                '"name": "' + escapeJSONValue(name(s)) + '"',
                                '"image": "' + encodeBase64(imageArtix(s)) + '"',
                                '"parent": "' + idParent(s) + '"',
                                '"tmccode": "' + overId(s) + '"'
                            ) 
                        + '\}\}') IF idParent(s), '\n---\n' ORDER s)
                    +'\n---\n';
        
        LOCAL aif = FILE ();
        stringToFile(rezult(),'UTF-8','aif');
        aif() <- resultFile();
        
        LOCAL flz = FILE ();
        stringToFile('','UTF-8','flz');
        flz() <- resultFile();
        
        LOCAL name = STRING[50]();
        name() <- 'pos' + toChar(currentDateTime(), 'YYYYMMDDHH24MISS');
    
        WRITE aif() TO 'file://' + directoryPickList(gm) + '/'+ name();
        WRITE flz() TO 'file://' + directoryPickList(gm) + '/'+ name();
        
        APPLY;
        
        MESSAGE name(gm) +': Пиклист выгружен' NOWAIT;
    }
}

exportPickListAndClose 'Выгрузить' (GroupMachinery gm) {
    exportPickList(gm);
    formClose();
}

FORM exportParams 'Пиклист'
    OBJECTS gm = GroupCashRegister PANEL
    PROPERTIES () skipFilterBalance, doClear
    PROPERTIES (gm) exportPickListAndClose
;
DESIGN exportParams {
    NEW a{
        MOVE PROPERTY (skipFilterBalance());
        MOVE PROPERTY (doClear());
        NEW b{
            type = CONTAINERH;
            MOVE PROPERTY (exportPickListAndClose(gm));
            MOVE PROPERTY (formClose());
        }
    }
    REMOVE TOOLBARBOX ;
}

exportPickListForm 'Выгрузить Пиклист' (GroupCashRegister gm) {
    SHOW exportParams OBJECTS gm = gm;
}

EXTEND FORM groupCashRegister 
    PROPERTIES (grc) SHOWIF sidModel(grc) == 'Artix' nameCustomGroupTypeArtix, directoryPickList, exportPickListForm;
    
DESIGN groupCashRegister{
    topContainer{
        MOVE PROPERTY (nameCustomGroupTypeArtix(grc));
        MOVE PROPERTY (directoryPickList(grc));
        MOVE PROPERTY (exportPickListForm(grc));
    }
}
