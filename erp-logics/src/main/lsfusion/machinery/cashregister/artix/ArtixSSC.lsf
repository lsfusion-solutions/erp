MODULE ArtixSSC;

REQUIRE CashRegisterPriceTransaction, ItemSSC;

NAMESPACE Artix;

overArtixInfo = ABSTRACT TEXT (MachineryPriceTransaction, Barcode);

//стараемся выполнять последним
createAttribute(MachineryPriceTransaction mpt, GroupMachinery gm) + {
    IF sidModel(gm) == 'Artix' THEN {
      
        info(mpt, Barcode b) <- ('\{"artix":\{'+
                (CONCAT ',',
                    '"age":"' + age(sku(b)) + '"',
                    '"ageverify":1' IF ageVerify(sku(b)),
                    '"visualverify":1' IF visualVerify(sku(b)),
                    '"lowweight":1' IF lowWeight(sku(b)),
                    '"weightcontrolbypass":1' IF weightControlBypass(sku(b)),
                    '"requirequantitymanual":1' IF requireQuantityManual(sku(b)),
                    '"requirequantityscales":1' IF requireQuantityScales(sku(b)),
                    '"taracapacity":"' + taraCapacity(sku(b)) + '"',
                    overArtixInfo(mpt,b)
                )
                +'\}\}') WHERE in(mpt, b);
    }
}

dataCustomGroupTypeArtix = DATA CustomGroupType(GroupCashRegister);
nameCustomGroupTypeArtix 'Тип классификатора КСО'(GroupCashRegister gs) = name(dataCustomGroupTypeArtix(gs));

overName = ABSTRACT ISTRING[255](Item);

imageArtix = DATA IMAGEFILE (Item);

WHEN CHANGED (image(Item i)) DO { 
    imageArtix(i) <- NULL;
}

imageArtix 'Изображение для Artix' = DATA IMAGEFILE (CustomGroup);
orderArtix 'Порядок отображения для Artix' = DATA INTEGER (CustomGroup);

EXTEND FORM customGroups
    PROPERTIES (g) READONLY imageArtix,orderArtix;
    
EXTEND FORM customGroup
    PROPERTIES (g) imageArtix, orderArtix;
    
encodeBase64 = FORMULA STRING 'regexp_replace(encode(($1),\'base64\'), E\'[\\n\\r]+\', \' \', \'g\' )';

skipFilterBalance 'Не фильтровать по остаткам' = DATA LOCAL NESTED BOOLEAN ();
doClear 'С очисткой' = DATA LOCAL NESTED BOOLEAN ();
export = DATA LOCAL BOOLEAN (CustomGroup);
idParent = DATA LOCAL STRING (Sku);

skipFilterBalance = ABSTRACT BOOLEAN (GroupCashRegister, Sku);
beforeExport ABSTRACT LIST (GroupCashRegister);

directoryPickList 'Директория для пиклиста' = DATA STRING[250](GroupCashRegister);

convertImageArtix(Sku s, IMAGEFILE f){
    TRY {
        convertedImage() <- NULL;
        convertImage(f, 'jpg');
        imageArtix(s) <- convertedImage();
        
        getFileSize(FILE(imageArtix(s)));
        LOCAL count = INTEGER ();
        count() <- 0;
        
        WHILE fileSize() > 45000 AND count() < 5 DO {
            resizeImage(imageArtix(s), sqrt(DOUBLE(fileSize())/40000));
            imageArtix(s) <- resizedImage();
            
            getFileSize(FILE(imageArtix(s)));
            count() <- count() + 1;
        }
    }
}

createFilePickList (GroupCashRegister gm) {
    LOCAL rezult = TEXT ();
    
    IF doClear() THEN {
        rezult() <-'\{"command": "clearPicklist"\}\n---\n';
    }
    
    rezult() <- CONCAT '', rezult(),
                    (GROUP CONCAT ('\{"command": "addPicklist","picklist": \{' + 
                        (CONCAT ',', 
                            '"code": "' + id(CustomGroup cg) + '"',
                            '"name": "' + escapeJSONValue(name(cg)) + '"',
                            '"image": "' + encodeBase64(imageArtix(cg)) + '"',
                            '"parent": ' + (OVERRIDE '"'+id(parent(cg))+'"', 'null'),
                            '"itemorder": ' + INTEGER(orderArtix(cg))
                        ) 
                    + '\}\}') IF export(cg), '\n---\n' ORDER level(cg), cg)
                +'\n---\n';
    rezult() <- CONCAT '', rezult(),
                    (GROUP CONCAT ('\{"command": "addPicklist","picklist": \{' + 
                        (CONCAT ',', 
                            '"code": "' + id(Sku s) + '"',
                            '"name": "' + escapeJSONValue(OVERRIDE overName(s), name(s)) + '"',
                            '"image": "' + encodeBase64(imageArtix(s)) + '"',
                            '"parent": "' + idParent(s) + '"',
                            '"tmccode": "' + idBarcode(s) + '"'
                        ) 
                    + '\}\}') IF idParent(s), '\n---\n' ORDER s)
                +'\n---\n';
    
    LOCAL aif = FILE ();
    stringToFile(rezult(),'UTF-8','aif');
    aif() <- resultFile();
    
    LOCAL flz = FILE ();
    stringToFile('','UTF-8','flz');
    flz() <- resultFile();
    
    LOCAL name = STRING[50]();
    name() <- 'pos' + toChar(currentDateTime(), 'YYYYMMDDHH24MISS');

    WRITE aif() TO 'file://' + directoryPickList(gm) + '/'+ name();
    WRITE flz() TO 'file://' + directoryPickList(gm) + '/'+ name();
}

exportPickList 'Выгрузить' (GroupCashRegister gm) {       
    IF NOT directoryPickList(gm) THEN {
        MESSAGE name(gm) +': Не задан путь выгрузки пиклиста' NOWAIT;
        RETURN;
    }
    
    idParent(Sku s) <- id(customGroup(dataCustomGroupTypeArtix(gm), s)) IF (currentBalance(s, stock(gm)) OR skipFilterBalance(gm, s) OR skipFilterBalance()) 
                    AND customGroup(dataCustomGroupTypeArtix(gm), s) AND active(s); 
    
    export(CustomGroup cg) <- customGroupType(cg) == dataCustomGroupTypeArtix(gm) AND (GROUP SUM 1 IF isParent(cg, Sku s) AND idParent(s)); 
    
    beforeExport(gm);
    
    IF NOT (GROUP SUM 1 IF idParent(Sku s)) THEN {
        MESSAGE name(gm) +': Нет товаров к выгрузке' NOWAIT;
        RETURN;
    }
    
    NEWSESSION NESTED LOCAL {
        FOR idParent(Sku s) AND hasImage(s) AND NOT imageArtix(s) DO {
            convertImageArtix(s, (OVERRIDE smallImage(s), image(s)));
        }
        APPLY NESTED LOCAL;
    }
    
    createFilePickList(gm);
    
    MESSAGE name(gm) +': Пиклист выгружен' NOWAIT;
}

exportPickListAndClose 'Выгрузить' (GroupMachinery gm) {
    exportPickList(gm);
    formClose();
}

FORM exportParams 'Пиклист'
    OBJECTS gm = GroupCashRegister PANEL
    PROPERTIES () skipFilterBalance, doClear
    PROPERTIES (gm) exportPickListAndClose
;
DESIGN exportParams {
    NEW a{
        MOVE PROPERTY (skipFilterBalance());
        MOVE PROPERTY (doClear());
        NEW b{
            type = CONTAINERH;
            MOVE PROPERTY (exportPickListAndClose(gm));
            MOVE PROPERTY (formClose());
        }
    }
    REMOVE TOOLBARBOX ;
}

exportPickListForm 'Выгрузить Пиклист' (GroupCashRegister gm) {
    SHOW exportParams OBJECTS gm = gm;
}

EXTEND FORM groupCashRegister 
    PROPERTIES (grc) SHOWIF sidModel(grc) == 'Artix' nameCustomGroupTypeArtix, directoryPickList, exportPickListForm;
    
DESIGN groupCashRegister{
    topContainer{
        MOVE PROPERTY (nameCustomGroupTypeArtix(grc));
        MOVE PROPERTY (directoryPickList(grc));
        MOVE PROPERTY (exportPickListForm(grc));
    }
}

createAttribute(MachineryPriceTransaction mpt, GroupMachinery gm) + {
    IF sidModel(gm) == 'Artix' AND dataCustomGroupTypeArtix(gm) THEN {
        
        //выгрузка в пиклист
        idParent(Sku s) <- id(customGroup(dataCustomGroupTypeArtix(gm), s)) IF (currentBalance(s, stock(gm)) OR skipFilterBalance(gm, s) OR skipFilterBalance()) 
                        AND customGroup(dataCustomGroupTypeArtix(gm), s) AND active(s) AND (GROUP SUM 1 IF in(mpt, Barcode b) AND s == sku(b)); 
        
        beforeExport(gm);
         
        IF (GROUP SUM 1 IF idParent(Sku s)) THEN {
            createFilePickList(gm);
        }
    }
}