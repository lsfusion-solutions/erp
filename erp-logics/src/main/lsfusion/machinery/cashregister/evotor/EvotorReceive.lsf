MODULE EvotorReceive;

REQUIRE EvotorPriceTransaction, ZReport;

NAMESPACE Evotor;

deviceUuid = DATA STRING (ZReport);
sessionUuid = DATA STRING (ZReport);

CLASS EvotorReceipt 'Чек Эвотор' : Receipt;

uuid = DATA STRING (EvotorReceipt);
deviceUuid (EvotorReceipt r) = deviceUuid(zReport(r));
sessionUuid (EvotorReceipt r) = sessionUuid(zReport(r));


//форма импорта чеков
GROUP extras;
GROUP value;
GROUP purchasesBack;
GROUP sales;
GROUP quantityPurchases;
GROUP purchases;
GROUP quantitySales;
GROUP salesBack;

deviceUuid = DATA LOCAL STRING(INTEGER);
closeUserUuid = DATA LOCAL STRING(INTEGER);
closeUserCode = DATA LOCAL STRING(INTEGER);
openUserCode = DATA LOCAL STRING(INTEGER);
valueTransactions = DATA LOCAL INTEGER(INTEGER);
extraKeys = DATA LOCAL STRING(INTEGER);
transactionsExtraKeys = DATA LOCAL INTEGER(INTEGER);
alcoholByVolume = DATA LOCAL STRING(INTEGER);
balanceQuantity = DATA LOCAL STRING(INTEGER);
alcoholProductKindCode = DATA LOCAL STRING(INTEGER);
price = DATA LOCAL STRING(INTEGER);
fprintSection = DATA LOCAL STRING(INTEGER);
costPrice = DATA LOCAL STRING(INTEGER);
commodityType = DATA LOCAL STRING(INTEGER);
measureName = DATA LOCAL STRING(INTEGER);
positionId = DATA LOCAL STRING(INTEGER);
tareVolume = DATA LOCAL STRING(INTEGER);
mark = DATA LOCAL STRING(INTEGER);
commodityName = DATA LOCAL STRING(INTEGER);
taxSum = DATA LOCAL STRING(INTEGER);
commodityUuid = DATA LOCAL STRING(INTEGER);
resultPrice = DATA LOCAL STRING(INTEGER);
resultSum = DATA LOCAL STRING(INTEGER);
tax = DATA LOCAL STRING(INTEGER);
resultTaxSum = DATA LOCAL STRING(INTEGER);
commodityCode = DATA LOCAL STRING(INTEGER);
taxPercent = DATA LOCAL STRING(INTEGER);
barcode = DATA LOCAL STRING(INTEGER);
taxRateCode = DATA LOCAL STRING(INTEGER);
paymentType = DATA LOCAL STRING(INTEGER);
baseDocumentNumber = DATA LOCAL STRING(INTEGER);
couponNumber = DATA LOCAL STRING(INTEGER);
clientName = DATA LOCAL STRING(INTEGER);
baseDocumentUUID = DATA LOCAL STRING(INTEGER);
clientPhone = DATA LOCAL STRING(INTEGER);
quantity = DATA LOCAL STRING(INTEGER);
denomination = DATA LOCAL STRING(INTEGER);
paymentCategoryId = DATA LOCAL STRING(INTEGER);
sum = DATA LOCAL STRING(INTEGER);
purchasesBackSumm = DATA LOCAL STRING(INTEGER);
reversal = DATA LOCAL STRING(INTEGER);
summ = DATA LOCAL STRING(INTEGER);
transactionsSections = DATA LOCAL INTEGER(INTEGER);
number = DATA LOCAL STRING(INTEGER);
value1 = DATA LOCAL STRING(INTEGER);
documentNumber = DATA LOCAL STRING(INTEGER);
purchasesReversal = DATA LOCAL STRING(INTEGER);
salesBackReversal = DATA LOCAL STRING(INTEGER);
type = DATA LOCAL STRING(INTEGER);
reversal1 = DATA LOCAL STRING(INTEGER);
summ1 = DATA LOCAL STRING(INTEGER);
transactionsSections1 = DATA LOCAL INTEGER(INTEGER);
number1 = DATA LOCAL STRING(INTEGER);
name1 = DATA LOCAL STRING(INTEGER);
value2 = DATA LOCAL STRING(INTEGER);
salesReversal = DATA LOCAL STRING(INTEGER);
cashOut = DATA LOCAL STRING(INTEGER);
revenue = DATA LOCAL STRING(INTEGER);
proceeds = DATA LOCAL STRING(INTEGER);
cashOutQuantity = DATA LOCAL STRING(INTEGER);
reversal2 = DATA LOCAL STRING(INTEGER);
quantity1 = DATA LOCAL STRING(INTEGER);
back = DATA LOCAL STRING(INTEGER);
reversalBack = DATA LOCAL STRING(INTEGER);
salesBackSumm = DATA LOCAL STRING(INTEGER);
purchasesSumm = DATA LOCAL STRING(INTEGER);
quantitySalesReversalBack = DATA LOCAL STRING(INTEGER);
id = DATA LOCAL STRING(INTEGER);
cash = DATA LOCAL STRING(INTEGER);
quantityPurchasesReversalBack = DATA LOCAL STRING(INTEGER);
reversal3 = DATA LOCAL STRING(INTEGER);
summ2 = DATA LOCAL STRING(INTEGER);
transactionsSections2 = DATA LOCAL INTEGER(INTEGER);
number2 = DATA LOCAL STRING(INTEGER);
name2 = DATA LOCAL STRING(INTEGER);
value3 = DATA LOCAL STRING(INTEGER);
salesSumm = DATA LOCAL STRING(INTEGER);
collection = DATA LOCAL STRING(INTEGER);
creationDate = DATA LOCAL STRING(INTEGER);
purchasesSections = DATA LOCAL STRING(INTEGER);
salesBackSections = DATA LOCAL STRING(INTEGER);
nonzeroSumPurchases = DATA LOCAL STRING(INTEGER);
userUuid = DATA LOCAL STRING(INTEGER);
cashIn = DATA LOCAL STRING(INTEGER);
quantityPurchasesReversal = DATA LOCAL STRING(INTEGER);
sessionPurchasesResults = DATA LOCAL STRING(INTEGER);
timezone = DATA LOCAL STRING(INTEGER);
quantityPurchasesBack = DATA LOCAL STRING(INTEGER);
userCode = DATA LOCAL STRING(INTEGER);
quantitySalesBack = DATA LOCAL STRING(INTEGER);
total = DATA LOCAL STRING(INTEGER);
purchasesBackSections = DATA LOCAL STRING(INTEGER);
receiptNumber = DATA LOCAL STRING(INTEGER);
cashInQuantity = DATA LOCAL STRING(INTEGER);
salesSections = DATA LOCAL STRING(INTEGER);
reversal4 = DATA LOCAL STRING(INTEGER);
quantity2 = DATA LOCAL STRING(INTEGER);
back1 = DATA LOCAL STRING(INTEGER);
reversalBack1 = DATA LOCAL STRING(INTEGER);
nonzeroSumSales = DATA LOCAL STRING(INTEGER);
sessionSalesResults = DATA LOCAL STRING(INTEGER);
purchasesBackReversal = DATA LOCAL STRING(INTEGER);
quantitySalesQuantity = DATA LOCAL STRING(INTEGER);
reversal5 = DATA LOCAL STRING(INTEGER);
summ3 = DATA LOCAL STRING(INTEGER);
transactionsSections3 = DATA LOCAL INTEGER(INTEGER);
number3 = DATA LOCAL STRING(INTEGER);
name3 = DATA LOCAL STRING(INTEGER);
value4 = DATA LOCAL STRING(INTEGER);
quantityPurchasesQuantity = DATA LOCAL STRING(INTEGER);
sessionNumber = DATA LOCAL STRING(INTEGER);
quantitySalesReversal = DATA LOCAL STRING(INTEGER);
getPurchases = DATA LOCAL STRING(INTEGER);
zreportNumber = DATA LOCAL STRING(INTEGER);
type1 = DATA LOCAL STRING(INTEGER);
deviceId = DATA LOCAL STRING(INTEGER);
uuid1 = DATA LOCAL STRING(INTEGER);
version = DATA LOCAL STRING(INTEGER);
closeDate = DATA LOCAL STRING(INTEGER);
closeResultSum = DATA LOCAL STRING(INTEGER);
closeSum = DATA LOCAL STRING(INTEGER);
number4 = DATA LOCAL STRING(INTEGER);
sessionNumber1 = DATA LOCAL STRING(INTEGER);
sessionUUID = DATA LOCAL STRING(INTEGER);
openDate = DATA LOCAL STRING(INTEGER);
completeInventory = DATA LOCAL STRING(INTEGER);
openUserUuid = DATA LOCAL STRING(INTEGER);
discountType = DATA LOCAL STRING(INTEGER);
discountPositionPrice = DATA LOCAL NUMERIC(INTEGER);
discountSum = DATA LOCAL NUMERIC(INTEGER);
percent = DATA LOCAL NUMERIC(INTEGER);

FORM importRec FORMEXTID 'null'

OBJECTS value = INTEGER

PROPERTIES (value) deviceUuid, closeUserUuid, closeUserCode, openUserCode, storeUuid, 
    type1 EXTID 'type', deviceId, uuid1 EXTID 'uuid', version, closeDate, closeResultSum, closeSum, 
    number4 EXTID 'number', sessionNumber1 EXTID 'sessionNumber', sessionUUID, openDate, completeInventory, openUserUuid
FILTERS imported(value)

OBJECTS transactions = INTEGER
FILTERS valueTransactions(transactions) == value
PROPERTIES (transactions) alcoholByVolume, balanceQuantity, alcoholProductKindCode, discountType, discountPositionPrice, discountSum, percent,
    price, fprintSection, costPrice, commodityType, measureName, positionId, tareVolume, mark, commodityName, taxSum, 
    commodityUuid, resultPrice, resultSum, tax, resultTaxSum, commodityCode, taxPercent, barcode, taxRateCode, 
    paymentType, baseDocumentNumber, couponNumber, clientName, baseDocumentUUID, clientPhone, quantity, denomination, 
    paymentCategoryId, sum, purchasesBackSumm, documentNumber, purchasesReversal, salesBackReversal, type, uuid, salesReversal, 
    cashOut, revenue, proceeds, cashOutQuantity, salesBackSumm, purchasesSumm, quantitySalesReversalBack, id, cash, quantityPurchasesReversalBack, 
    salesSumm, collection, creationDate, purchasesSections, salesBackSections, nonzeroSumPurchases, userUuid, cashIn, quantityPurchasesReversal, 
    sessionPurchasesResults, timezone, quantityPurchasesBack, userCode, quantitySalesBack, total, purchasesBackSections, receiptNumber, cashInQuantity, 
    salesSections, nonzeroSumSales, sessionSalesResults, purchasesBackReversal, quantitySalesQuantity, quantityPurchasesQuantity, sessionNumber, 
    quantitySalesReversal, getPurchases, zreportNumber
FILTERS imported(transactions)

OBJECTS extraKeys = INTEGER
PROPERTIES(extraKeys) extraKeys EXTID 'value'
FILTERS imported(extraKeys)
FILTERS transactionsExtraKeys(extraKeys) == transactions
PROPERTIES(transactions) IN purchasesBack reversal, summ
FILTERS imported(transactions) ;


zreportUuid (STRING uuid) = GROUP LAST ZReport z ORDER z WHERE id(z) == uuid;
receiptUuid (ISTRING[36] s) = GROUP AGGR Receipt r BY OVERRIDE id(r);
receiptDetailUuid (INTEGER id, Receipt r) = GROUP LAST ReceiptDetail rd ORDER rd WHERE number(rd) == id AND receipt(rd) == r;
paymentEvotor (STRING z) = CASE WHEN z == 'CASH' THEN PaymentMeans.paymentMeansCash
    WHEN z == 'CARD' THEN  PaymentMeans.paymentMeansCard;
lastReceipt (CashRegister c) = GROUP LAST Receipt r ORDER date(r) WHERE cashRegister(r) == c;       

afterCreateReceipts ABSTRACT LIST (CashRegister);

importReceiptsEvotor(GroupCashRegister gc){
    FOR groupCashRegister(CashRegister c) == gc DO NEWSESSION {
        LOCAL req = FILE ();
        LOCAL f = FILE();    
        LOCAL dateLastReceipt = STRING ();
        LOCAL headers = TEXT(STRING[100]);
        headers('X-Authorization') <- tokenXAuth(token(evotorStore(gc)));
        IF lastReceipt(c) THEN
            dateLastReceipt() <- '&gtCloseDate=' + CONCAT '', date(lastReceipt(c)),'Z', time(lastReceipt(c)), '.000+0000';
        EXTERNAL HTTP GET CONCAT '','https://api.evotor.ru/api/v1/inventories/stores/', uidEvotorStore(gc),
            '/documents?deviceUuid=' + uuidEvotor(c), dateLastReceipt() 
            HEADERS headers TO f;
        IMPORT importRec FROM f();
        //z-отчеты
        FOR imported(INTEGER a) IF (type1(a) == 'OPEN_SESSION' AND sessionUUID(a))  AND NOT zreportUuid(sessionUUID(a))  NEW z = ZReport DO {
            date(z) <- DATE(closeDate(a));
            time(z) <- TIME(DATETIME(closeDate(a)));
            number(z) <- STRING[48](sessionNumber1(a));
            cashRegister(z) <- cashRegisterByUidInStore(deviceUuid(a), gc);
            id(z) <- sessionUUID(a);
            isPosted(z) <- TRUE;
        }
        //чеки продажи 
        FOR imported(INTEGER b) IF (type1(b) == 'SELL' AND sessionUUID(b)) AND NOT receiptUuid(uuid1(b)) NEW rec = Receipt DO {
            id(rec) <- uuid1(b);
            number(rec) <- INTEGER (number4(b));
            zReport(rec) <- zreportUuid(sessionUUID(b));
            date(rec) <- DATE(closeDate(b));
            time(rec) <- TIME(DATETIME(closeDate(b)));
            FOR valueTransactions(INTEGER s) == b AND type(s) == 'REGISTER_POSITION' NEW detail = ReceiptSaleDetail DO{
                receipt(detail) <- rec;
                sku(detail) <- IF(sku(commodityCode(s))) THEN sku(commodityCode(s));
                idBarcode(detail) <- IF NOT (sku(commodityCode(s))) THEN commodityCode(s);
                quantity(detail) <- NUMERIC[16,5] (quantity(s));
                price(detail) <- NUMERIC[16,2] (price(s));
                sum(detail) <- NUMERIC[16,2] (resultSum(s));
                discountSum(detail) <- NUMERIC[18,4](sum(s)) - NUMERIC[18,4](resultSum(s));
                number(detail) <- INTEGER(id(s));
            }
            LOCAL paymentSumCash = NUMERIC[16,2] ();
            paymentSumCash() <- GROUP SUM NUMERIC[16,2](sum(INTEGER s)) IF valueTransactions(s) == b AND paymentType(s) == 'CASH';
        
            LOCAL paymentSumCard = NUMERIC[16,2] ();
            paymentSumCard() <- GROUP SUM NUMERIC[16,2](sum(INTEGER s)) IF valueTransactions(s) == b AND paymentType(s) == 'CARD';
            //оплата наличными
            IF(paymentSumCash()) THEN NEW payment = Payment{
                receipt(payment) <- rec;
                paymentType(payment) <- GROUP LAST PaymentType p ORDER p WHERE paymentMeans(p) == PaymentMeans.paymentMeansCash;
                sum(payment) <- paymentSumCash();
            }
            //оплата картой
            IF paymentSumCard() THEN NEW payment = Payment{
                receipt(payment) <- rec;
                paymentType(payment) <- GROUP LAST PaymentType p ORDER p WHERE paymentMeans(p) == PaymentMeans.paymentMeansCard;
                sum(payment) <- paymentSumCard();
            }

        }
        //чеки возврата
        FOR imported(INTEGER r) IF (type1(r) == 'PAYBACK' AND sessionUUID(r)) AND NOT receiptUuid(uuid1(r)) NEW rec = Receipt DO{
            id(rec) <- uuid1(r);
            number(rec) <- INTEGER (number4(r));
            zReport(rec) <- zreportUuid(sessionUUID(r));
            date(rec) <- DATE(closeDate(r));
            time(rec) <- TIME(DATETIME(closeDate(r)));
            FOR valueTransactions(INTEGER s) == r AND type(s) == 'REGISTER_POSITION' NEW detail = ReceiptReturnDetail DO{
                receipt(detail) <- rec;
                sku(detail) <- IF(sku(commodityCode(s))) THEN sku(commodityCode(s));
                idBarcode(detail) <- IF NOT (sku(commodityCode(s))) THEN STRING[15] (commodityCode(s));
                quantity(detail) <- abs(NUMERIC[16,5] (quantity(s)));
                price(detail) <- abs(NUMERIC[16,2] (price(s)));
                sum(detail) <- abs(NUMERIC[16,2] (resultSum(s)));
                discountSum(detail) <- abs(NUMERIC[18,4](sum(s)) - NUMERIC[18,4](resultSum(s)));
                number(detail) <- INTEGER(id(s));
            }
            LOCAL paymentSumCash = NUMERIC[16,2] ();
            paymentSumCash() <- GROUP SUM NUMERIC[16,2](sum(INTEGER s)) IF valueTransactions(s) == r AND paymentType(s) == 'CASH';
                
            LOCAL paymentSumCard = NUMERIC[16,2] ();
            paymentSumCard() <- GROUP SUM NUMERIC[16,2](sum(INTEGER s)) IF valueTransactions(s) == r AND paymentType(s) == 'CARD';
            //возврат наличными
            IF(paymentSumCash()) THEN NEW payment = Payment{
                receipt(payment) <- rec;
                paymentType(payment) <- GROUP LAST PaymentType p ORDER p WHERE paymentMeans(p) == PaymentMeans.paymentMeansCash;
                sum(payment) <- paymentSumCash();
            }
            //возврат картой
            IF paymentSumCard() THEN NEW payment = Payment{
                receipt(payment) <- rec;
                paymentType(payment) <- GROUP LAST PaymentType p ORDER p WHERE paymentMeans(p) == PaymentMeans.paymentMeansCard;
                sum(payment) <- paymentSumCard();
            }
        }
        afterCreateReceipts(c);
        APPLY;
    }
}

receiveGroupMachinery(GroupCashRegister g) + {
    IF isEvotor(g) THEN importReceiptsEvotor(g);
}

paymentCashReceipt (Receipt r) = GROUP LAST Payment p ORDER p WHERE 
    receipt(p) == r AND paymentMeans(paymentType(p)) == PaymentMeans.paymentMeansCash;
paymentCardReceipt (Receipt r) = GROUP LAST Payment p ORDER p WHERE 
    receipt(p) == r AND paymentMeans(paymentType(p)) == PaymentMeans.paymentMeansCard;


//переприём продаж за переиод
reImportReceiptsEvotor(CashRegister c, DATE from, DATE to, RequestExchange request) {
    NEWSESSION {
        LOCAL req = FILE ();
        LOCAL f = FILE();    
        LOCAL dateFilter = STRING ();
        LOCAL headers = TEXT(STRING[100]);
        headers('X-Authorization') <- tokenXAuth(token(evotorStore(groupCashRegister(c))));
        IF from AND to THEN
           dateFilter() <- '&gtCloseDate=' + CONCAT '', from,'T00:00:01.757+0000',
           '&ltCloseDate=', to, 'T23:59:59.757+0000';
        EXTERNAL HTTP GET CONCAT '','https://api.evotor.ru/api/v1/inventories/stores/', uidEvotorStore(groupCashRegister(c)),
            '/documents?deviceUuid=' + uuidEvotor(c), dateFilter() 
            HEADERS headers TO f;
        IMPORT importRec FROM f();
            
        //обновление чеков продажи
        FOR imported(INTEGER b) IF (type1(b) == 'SELL' AND sessionUUID(b)) AND receiptUuid(uuid1(b)) DO {
            number(receiptUuid(uuid1(b))) <-  INTEGER (number4(b));
            zReport(receiptUuid(uuid1(b))) <- zreportUuid(sessionUUID(b));
            date(receiptUuid(uuid1(b))) <- DATE(closeDate(b));
            time(receiptUuid(uuid1(b))) <- TIME(DATETIME(closeDate(b)));
            //добавление позиций
            FOR valueTransactions(INTEGER s) == b AND type(s) == 'REGISTER_POSITION' AND NOT receiptDetailUuid(INTEGER (id(s)),receiptUuid(uuid1(b))) NEW detail = ReceiptSaleDetail DO{
                receipt(detail) <- receiptUuid(uuid1(b));
                sku(detail) <- IF(sku(commodityCode(s))) THEN sku(commodityCode(s));
                idBarcode(detail) <- IF NOT (sku(commodityCode(s))) THEN commodityCode(s);
                quantity(detail) <- NUMERIC[16,5] (quantity(s));
                price(detail) <- NUMERIC[16,2] (price(s));
                sum(detail) <- NUMERIC[16,2] (resultSum(s));
                discountSum(detail) <- NUMERIC[18,4](sum(s)) - NUMERIC[18,4](resultSum(s));
                number(detail) <- INTEGER (id(s));
            }
            
            //обновление позиций
            FOR valueTransactions(INTEGER s) == b AND type(s) == 'REGISTER_POSITION' AND receiptDetailUuid(INTEGER (id(s)), receiptUuid(uuid1(b))) DO{
                receipt(receiptDetailUuid(INTEGER (id(s)), receiptUuid(uuid1(b)))) <- receiptUuid(uuid1(b));            
                sku(receiptDetailUuid(INTEGER (id(s)), receiptUuid(uuid1(b)))) <- IF(sku(commodityCode(s))) THEN sku(commodityCode(s));
                idBarcode(receiptDetailUuid(INTEGER (id(s)), receiptUuid(uuid1(b)))) <- IF NOT (sku(commodityCode(s))) THEN commodityCode(s);
                quantity(receiptDetailUuid(INTEGER (id(s)), receiptUuid(uuid1(b)))) <- NUMERIC[16,5] (quantity(s));
                price(receiptDetailUuid(INTEGER (id(s)), receiptUuid(uuid1(b)))) <- NUMERIC[16,2] (price(s));
                sum(receiptDetailUuid(INTEGER (id(s)), receiptUuid(uuid1(b)))) <- NUMERIC[16,2] (sum(s));
            }
            //оплата по чеку
            LOCAL paymentSumCash = NUMERIC[16,2] ();
            paymentSumCash() <- GROUP SUM NUMERIC[16,2](sum(INTEGER s)) IF valueTransactions(s) == b AND paymentType(s) == 'CASH';
                        
            LOCAL paymentSumCard = NUMERIC[16,2] ();
            paymentSumCard() <- GROUP SUM NUMERIC[16,2](sum(INTEGER s)) IF valueTransactions(s) == b AND paymentType(s) == 'CARD';
            //обновление наличной оплаты
            IF(paymentSumCash() AND paymentCashReceipt(receiptUuid(uuid1(b)))) THEN {
                receipt(paymentCashReceipt(receiptUuid(uuid1(b)))) <- receiptUuid(uuid1(b));
                paymentType(paymentCashReceipt(receiptUuid(uuid1(b)))) <- GROUP LAST PaymentType p ORDER p 
                    WHERE paymentMeans(p) == PaymentMeans.paymentMeansCash;
                sum(paymentCashReceipt(receiptUuid(uuid1(b)))) <- paymentSumCash();
            }
            //добавление наличной оплаты
            IF(paymentSumCash() AND NOT paymentCashReceipt(receiptUuid(uuid1(b)))) THEN NEW payment = Payment{
                receipt(payment) <- receiptUuid(uuid1(b));
                paymentType(payment) <- GROUP LAST PaymentType p ORDER p WHERE paymentMeans(p) == PaymentMeans.paymentMeansCash;
                sum(payment) <- paymentSumCash();
            }
            //обновление оплаты картой
            IF(paymentSumCard() AND paymentCardReceipt(receiptUuid(uuid1(b)))) THEN {
                receipt(paymentCardReceipt(receiptUuid(uuid1(b)))) <- receiptUuid(uuid1(b));
                paymentType(paymentCardReceipt(receiptUuid(uuid1(b)))) <- GROUP LAST PaymentType p ORDER p 
                    WHERE paymentMeans(p) == PaymentMeans.paymentMeansCard;
                sum(paymentCardReceipt(receiptUuid(uuid1(b)))) <- paymentSumCard();
            }
            //добавление оплаты картой
            IF(paymentSumCard() AND NOT paymentCardReceipt(receiptUuid(uuid1(b)))) THEN NEW payment = Payment{
                receipt(payment) <- receiptUuid(uuid1(b));
                paymentType(payment) <- GROUP LAST PaymentType p ORDER p WHERE paymentMeans(p) == PaymentMeans.paymentMeansCard;
                sum(payment) <- paymentSumCard();
            }
        }
        
        //добавление чеков продажи
        FOR imported(INTEGER b) IF (type1(b) == 'SELL' AND sessionUUID(b)) AND NOT receiptUuid(uuid1(b)) NEW rec = Receipt DO {
            id(rec) <- uuid1(b);
            number(rec) <- INTEGER (number4(b));
            zReport(rec) <- zreportUuid(sessionUUID(b));
            date(rec) <- DATE(closeDate(b));
            time(rec) <- TIME(DATETIME(closeDate(b)));
            FOR valueTransactions(INTEGER s) == b AND type(s) == 'REGISTER_POSITION' NEW detail = ReceiptSaleDetail DO{
                receipt(detail) <- rec;
                sku(detail) <- IF(sku(commodityCode(s))) THEN sku(commodityCode(s));
                idBarcode(detail) <- IF NOT (sku(commodityCode(s))) THEN commodityCode(s);
                quantity(detail) <- NUMERIC[16,5] (quantity(s));
                price(detail) <- NUMERIC[16,2] (price(s));
                sum(detail) <- NUMERIC[16,2] (resultSum(s));
                discountSum(detail) <- NUMERIC[18,4](sum(s)) - NUMERIC[18,4](resultSum(s));
            }
            LOCAL paymentSumCash = NUMERIC[16,2] ();
            paymentSumCash() <- GROUP SUM NUMERIC[16,2](sum(INTEGER s)) IF valueTransactions(s) == b AND paymentType(s) == 'CASH';
            
            LOCAL paymentSumCard = NUMERIC[16,2] ();
            paymentSumCard() <- GROUP SUM NUMERIC[16,2](sum(INTEGER s)) IF valueTransactions(s) == b AND paymentType(s) == 'CARD';
            //оплата наличными
            IF(paymentSumCash()) THEN NEW payment = Payment{
                receipt(payment) <- rec;
                paymentType(payment) <- GROUP LAST PaymentType p ORDER p WHERE paymentMeans(p) == PaymentMeans.paymentMeansCash;
                sum(payment) <- paymentSumCash();
            }
            //оплата картой
            IF paymentSumCard() THEN NEW payment = Payment{
                receipt(payment) <- rec;
                paymentType(payment) <- GROUP LAST PaymentType p ORDER p WHERE paymentMeans(p) == PaymentMeans.paymentMeansCard;
                sum(payment) <- paymentSumCard();
            }
    
        }                    
        //обновление чеков возврата
        FOR imported(INTEGER b) IF (type1(b) == 'PAYBACK' AND sessionUUID(b)) AND receiptUuid(uuid1(b)) DO {
            number(receiptUuid(uuid1(b))) <-  INTEGER (number4(b));
            zReport(receiptUuid(uuid1(b))) <- zreportUuid(sessionUUID(b));
            date(receiptUuid(uuid1(b))) <- DATE(closeDate(b));
            time(receiptUuid(uuid1(b))) <- TIME(DATETIME(closeDate(b)));
            //добавление позиций
            FOR valueTransactions(INTEGER s) == b AND type(s) == 'REGISTER_POSITION' AND NOT receiptDetailUuid(INTEGER (id(s)), receiptUuid(uuid1(b))) NEW detail = ReceiptReturnDetail DO{
                receipt(detail) <- receiptUuid(uuid1(b));
                sku(detail) <- IF(sku(commodityCode(s))) THEN sku(commodityCode(s));
                idBarcode(detail) <- IF NOT (sku(commodityCode(s))) THEN commodityCode(s);
                quantity(detail) <- abs(NUMERIC[16,5] (quantity(s)));
                price(detail) <- abs(NUMERIC[16,2] (price(s)));
                sum(detail) <- NUMERIC[16,2] (resultSum(s));
                discountSum(detail) <- NUMERIC[18,4](sum(s)) - NUMERIC[18,4](resultSum(s));
            }
            //обновление позиций
            FOR valueTransactions(INTEGER s) == b AND type(s) == 'REGISTER_POSITION' AND receiptDetailUuid(INTEGER (id(s)), receiptUuid(uuid1(b))) DO{
                receipt(receiptDetailUuid(INTEGER (id(s)), receiptUuid(uuid1(b)))) <- receiptUuid(uuid1(b));            
                sku(receiptDetailUuid(INTEGER (id(s)), receiptUuid(uuid1(b)))) <- IF(sku(commodityCode(s))) THEN sku(commodityCode(s));
                idBarcode(receiptDetailUuid(INTEGER (id(s)), receiptUuid(uuid1(b)))) <- IF NOT (sku(commodityCode(s))) THEN commodityCode(s);
                quantity(receiptDetailUuid(INTEGER (id(s)), receiptUuid(uuid1(b)))) <- abs(NUMERIC[16,5](quantity(s)));
                price(receiptDetailUuid(INTEGER (id(s)), receiptUuid(uuid1(b)))) <- abs(NUMERIC[16,2] (price(s)));
                sum(receiptDetailUuid(INTEGER (id(s)), receiptUuid(uuid1(b)))) <- abs(NUMERIC[16,2] (sum(s)));
            }        
            //оплата по чеку
            LOCAL paymentSumCash = NUMERIC[16,2] ();
            paymentSumCash() <- GROUP SUM NUMERIC[16,2](sum(INTEGER s)) IF valueTransactions(s) == b AND paymentType(s) == 'CASH';
                                
            LOCAL paymentSumCard = NUMERIC[16,2] ();
            paymentSumCard() <- GROUP SUM NUMERIC[16,2](sum(INTEGER s)) IF valueTransactions(s) == b AND paymentType(s) == 'CARD';
            //обновление наличной оплаты
            IF(paymentSumCash() AND paymentCashReceipt(receiptUuid(uuid1(b)))) THEN {
                receipt(paymentCashReceipt(receiptUuid(uuid1(b)))) <- receiptUuid(uuid1(b));
                paymentType(paymentCashReceipt(receiptUuid(uuid1(b)))) <- GROUP LAST PaymentType p ORDER p 
                    WHERE paymentMeans(p) == PaymentMeans.paymentMeansCash;
                sum(paymentCashReceipt(receiptUuid(uuid1(b)))) <- paymentSumCash();
            }
            //добавление наличной оплаты
            IF(paymentSumCash() AND NOT paymentCashReceipt(receiptUuid(uuid1(b)))) THEN NEW payment = Payment{
                receipt(payment) <- receiptUuid(uuid1(b));
                paymentType(payment) <- GROUP LAST PaymentType p ORDER p WHERE paymentMeans(p) == PaymentMeans.paymentMeansCash;
                sum(payment) <- paymentSumCash();
            }
            //обновление оплаты картой
            IF(paymentSumCard() AND paymentCardReceipt(receiptUuid(uuid1(b)))) THEN {
                receipt(paymentCardReceipt(receiptUuid(uuid1(b)))) <- receiptUuid(uuid1(b));
                paymentType(paymentCardReceipt(receiptUuid(uuid1(b)))) <- GROUP LAST PaymentType p ORDER p 
                    WHERE paymentMeans(p) == PaymentMeans.paymentMeansCard;
                sum(paymentCardReceipt(receiptUuid(uuid1(b)))) <- paymentSumCard();
            }
            //добавление оплаты картой
            IF(paymentSumCard() AND NOT paymentCardReceipt(receiptUuid(uuid1(b)))) THEN NEW payment = Payment{
                receipt(payment) <- receiptUuid(uuid1(b));
                paymentType(payment) <- GROUP LAST PaymentType p ORDER p WHERE paymentMeans(p) == PaymentMeans.paymentMeansCard;
                sum(payment) <- paymentSumCard();
            }
        }
        //добавление чеков возрата
        FOR imported(INTEGER r) IF (type1(r) == 'PAYBACK' AND sessionUUID(r)) AND NOT receiptUuid(uuid1(r)) NEW rec = Receipt DO{
            id(rec) <- uuid1(r);
            number(rec) <- INTEGER (number4(r));
            zReport(rec) <- zreportUuid(sessionUUID(r));
            date(rec) <- DATE(closeDate(r));
            time(rec) <- TIME(DATETIME(closeDate(r)));
            FOR valueTransactions(INTEGER s) == r AND type(s) == 'REGISTER_POSITION' NEW detail = ReceiptReturnDetail DO{
                receipt(detail) <- rec;
                sku(detail) <- IF(sku(commodityCode(s))) THEN sku(commodityCode(s));
                idBarcode(detail) <- IF NOT (sku(commodityCode(s))) THEN STRING[15] (commodityCode(s));
                quantity(detail) <- abs(NUMERIC[16,5] (quantity(s)));
                price(detail) <- abs(NUMERIC[16,2] (price(s)));
                sum(detail) <- abs(NUMERIC[16,2] (resultSum(s)));
                discountSum(detail) <- abs(NUMERIC[18,4](sum(s)) - NUMERIC[18,4](resultSum(s)));
            }
            LOCAL paymentSumCash = NUMERIC[16,2] ();
            paymentSumCash() <- GROUP SUM NUMERIC[16,2](sum(INTEGER s)) IF valueTransactions(s) == r AND paymentType(s) == 'CASH';        
            LOCAL paymentSumCard = NUMERIC[16,2] ();
            paymentSumCard() <- GROUP SUM NUMERIC[16,2](sum(INTEGER s)) IF valueTransactions(s) == r AND paymentType(s) == 'CARD';
            //возврат наличными
            IF(paymentSumCash()) THEN NEW payment = Payment{
                receipt(payment) <- rec;
                paymentType(payment) <- GROUP LAST PaymentType p ORDER p WHERE paymentMeans(p) == PaymentMeans.paymentMeansCash;
                sum(payment) <- paymentSumCash();
            }
            //возврат картой
            IF paymentSumCard() THEN NEW payment = Payment{
                receipt(payment) <- rec;
                paymentType(payment) <- GROUP LAST PaymentType p ORDER p WHERE paymentMeans(p) == PaymentMeans.paymentMeansCard;
                sum(payment) <- paymentSumCard();
            }
        }    
        NEW log = RequestExchangeLog{
            requestExchange(log) <- request;
            date(log) <- currentDateTime();
            machinery(log) <- c;
            message(log) <- 'Загрузка данных успешна';
        }
        afterCreateReceipts(c);
        APPLY;
    }
}


//Запрос
EXTEND CLASS RequestExchangeType{
    salesInfoEvotor 'Перезагрузить продажи Эвотор'
}

salesInfoEvotor 'Перезагрузить продажи Эвотор' (RequestExchange r){
    TRY {
        FOR (in(CashRegister c, r) AND isEvotor(groupCashRegister(c))
            AND requestExchangeType(r) == RequestExchangeType.salesInfoEvotor) DO NEWSESSION {
            reImportReceiptsEvotor(c, dateFrom(r), dateTo(r), r);
        }
        succeededNative(r) <- TRUE;
        dateTimeSucceededNative(r) <- currentDateTime();
    }
    CATCH {
        NEW er = RequestExchangeError{
            requestExchange(er) <- r;
            date(er) <- currentDateTime();
            erTrace(er) <- messageCaughtException();
        }
    }
    FINALLY {
        APPLY;
    }
}

EXTEND FORM requestExchanges
    PROPERTIES (r) salesInfoEvotor SHOWIF requestExchangeType(r) == RequestExchangeType.salesInfoEvotor;