MODULE BerlioReceive;

REQUIRE NativeMachinery, ItemBerlio, ZReportSection, GiftCard, ZReportFuelLtr, CashOperationCashOrder;

NAMESPACE Berlio;

CLASS KindOperation 'Вид операции в Берлио';
TABLE kindOperation(KindOperation);

id 'Код' = DATA INTEGER (KindOperation);
kindOperation = GROUP AGGR KindOperation k BY id(k);
name 'Наименование' = DATA STRING[40](KindOperation);

paymentType = DATA PaymentType(KindOperation);
namePaymentType 'Тип платежа' (KindOperation k) = name(paymentType(k));

FORM kindOperations 'Виды операций Берлио'
    OBJECTS k = KindOperation
    PROPERTIES (k) name, id, namePaymentType, NEW, DELETE
    LIST KindOperation OBJECT k 
;

kindOperation = DATA KindOperation (Payment);
idKindOperation 'Вид операции' (Payment p) = id(kindOperation(p));

CLASS BerlioCard 'Карта Berlio';
TABLE berlioCard (BerlioCard);

number 'Номер' = DATA STRING[48] (BerlioCard) IN numbered INDEXED CHARWIDTH 13;
berlioNumber = GROUP MAX BerlioCard dberlioCard BY number(dberlioCard);

berlioCard = DATA BerlioCard (Receipt);
numberBerlioCard 'Номер карты Berlio' (Receipt receipt) = number(berlioCard(receipt));

berlioFile 'Имя файла Берлио' = DATA STRING[15](ZReport) INDEXED IN documentHeader;

EXTEND FORM zReports
    PROPERTIES READONLY berlioFile(z)
    PROPERTIES READONLY numberBerlioCard(b) BEFORE sumReceiptDetail(b)
    PROPERTIES READONLY idKindOperation(p)
;
EXTEND FORM zReport
    PROPERTIES READONLY berlioFile(z)
    PROPERTIES numberBerlioCard(b) BEFORE sumReceiptDetail(b)
    PROPERTIES idKindOperation(p)
;

dateStartlistFilesberlio = DATA DATE();
cashRegister = GROUP MAX CashRegister c BY npp(c);

receiveFromBerlio (GroupCashRegister gcr) {
    listFiles(directory(gcr)+'/S');
    FOR ISTRING fn = fileName(INTEGER i) AND NOT fileIsDirectory(i) 
        AND right(fileName(i), 3) == 'dbf' AND INTEGER(substr(fileName(i), 2, 2)) == npp(gcr) 
        AND substr(fileName(i), 4, 4) >= (OVERRIDE toChar(dateStartlistFilesberlio(), 'YYMM'), '2409')
        AND NOT (GROUP SUM 1 IF fn == berlioFile(ZReport z)) ORDER fn DO {
        NEWSESSION {
            READ directory(gcr) +'/S/'+ fn TO file;
                
            LOCAL shiftDate, date = DATE (INTEGER);
            LOCAL time = TIME (INTEGER);
            LOCAL shiftIime = TIME ();
            LOCAL vid, kind, receipt, npp, dep, skno, index = INTEGER (INTEGER);
            LOCAL shift, lDate, code, cardNum, item = STRING (INTEGER);
            LOCAL idZReport, idReceipt, idReceiptDetail = STRING (INTEGER);
            LOCAL qty, density, weight, price, sum, discountSum, discount, mixCash, mixBank, mixOther = NUMERIC(INTEGER);
            
            IMPORT DBF FROM file() TO shift = SHIFTNO, lDate = DT, time = TM, code = CODE, vid = VID, kind = KIND, qty = REL,
                    density = SOL, weight = RELKG, price = PRICEW, sum = 'SUM', discountSum = DISCSUM, discount = DISCOUNT,
                    cardNum = CARDNUM, receipt = CHECKNUM, npp = KKM, dep = DEPNO, skno = SKNO, item = NOMNUM, mixCash = MIXCASH,
                    mixBank = MIXBANK, mixOther = MIXOTHER;

            FOR [GROUP SUM 1 IF npp(INTEGER rr) > 0 BY npp(rr)](INTEGER npp) AND NOT cashRegister(npp) ORDER npp DO NEW c = CashRegister {
                groupCashRegister(c) <- gcr;
                npp(c) <- npp;
            }

            date(INTEGER r) <- toDateFormat(lDate(r), 'DD.MM.YYYY');
            index(INTEGER r) <- (PARTITION SUM 1 ORDER r BY npp(r), receipt(r)) WHERE imported(r) AND skno(r) > 0;
            FOR INTEGER open == (GROUP MIN INTEGER r IF code(r) == 'OPEN') DO {
                shiftDate(INTEGER r) <- date(open) WHERE imported(r);
                shiftIime() <- time(open);
            }
            
            FOR [GROUP SUM 1 IF npp(INTEGER rr) == npp(CashRegister crr) BY crr](CashRegister cr) DO {
                
                idZReport(INTEGER r) <- (CONCAT '_', nppGroupMachinery(cr), npp(cr), shift(r), shiftDate(r)) IF npp(cr) == npp(r);
                idReceipt(INTEGER r) <- (CONCAT '_', idZReport(r), receipt(r)) IF index(r) AND npp(cr) == npp(r);
                idReceiptDetail(INTEGER r) <- (CONCAT '_', idReceipt(r), index(r)) IF index(r) AND npp(cr) == npp(r);

                FOR INTEGER r == [GROUP MIN INTEGER rr BY idZReport(rr)](STRING idZreport) AND NOT zReport(idZreport) NEW z = ZReport DO {
                    id(z) <- idZreport;
                    isPosted(z) <- TRUE;
                    date(z) <- date(r);
                    time(z) <- shiftIime();
                    cashRegister(z) <- cr;
                    number(z) <- shift(r);
                    berlioFile(z) <- fn;
                }

                FOR [GROUP SUM 1 IF kind(INTEGER r) == 2 BY cardNum(r)](STRING berlio) AND NOT berlioNumber(berlio) NEW g = BerlioCard DO {
                    number(g) <- berlio;
                }

                FOR INTEGER r == [GROUP MIN INTEGER rr BY idReceipt(rr)](STRING idReceipt) AND NOT receipt(idReceipt) ORDER receipt(r) NEW rc = Receipt DO {
                    id(rc) <- idReceipt;
                    zReport(rc) <- zReport(idZReport(r));
                    berlioCard(rc) <- berlioNumber(cardNum(r));
                    number(rc) <- receipt(r);
                    date(rc) <- date(r);
                    time(rc) <- time(r);
                }

                FOR INTEGER r == [GROUP MIN INTEGER rr BY idReceiptDetail(rr)](STRING idReceiptDetail) AND NOT receiptDetail(idReceiptDetail)
                    AND vid(r) == 1 ORDER index(r) NEW d = ReceiptSaleDetail DO {
                    id(d) <- idReceiptDetail;
                    receipt(d) <- receipt(idReceipt(r));
                }

                FOR INTEGER r == [GROUP MIN INTEGER rr BY idReceiptDetail(rr)](STRING idReceiptDetail) AND NOT receiptDetail(idReceiptDetail)
                    AND vid(r) == 2 ORDER index(r) NEW d = ReceiptReturnDetail DO {
                    id(d) <- idReceiptDetail;
                    receipt(d) <- receipt(idReceipt(r));
                }

                FOR INTEGER r == [GROUP MIN INTEGER rr BY idReceiptDetail(rr)](STRING idReceiptDetail) AND ReceiptDetail d == receiptDetail(idReceiptDetail) DO {
                    idBarcode(d) <- code(r);
                    sku(d) <- OVERRIDE itemIdBerlio(INTEGER(item(r))), itemIdBarcodeBerlio(INTEGER(code(r))), skuBarcode(code(r)) IF length(code(r)) > 3;
                    quantity(d) <- IF vid(r) == 2 THEN -qty(r) ELSE qty(r);
                    weight(d) <- weight(r);
                    density(d) <- density(r);
                    price(d) <- price(r);
                    sum(d) <- sum(r);
                    discountPercent(d) <- -discount(r) IF discount(r) != 0.0;
                    discountSum(d) <- -discountSum(r) IF discountSum(r) != 0.0;
                    section(d) <- section(STRING[100](dep(r)));
                }

                //сертификат
                FOR [GROUP SUM 1 IF paymentType(kindOperation(kind(INTEGER r))) == minGiftCardPaymentType() OR (kind(r) == 88 AND mixOther(r) != 0) BY cardNum(r)](STRING giftCard) AND NOT giftCard(giftCard) NEW g = GiftCard DO {
                    id(g) <- giftCard;
                    number(g) <- giftCard;
                }

                FOR INTEGER r == [GROUP MIN INTEGER rr BY idReceipt(rr)](STRING idReceipt) AND paymentType(kindOperation(kind(r))) == minGiftCardPaymentType() AND NOT payment(idReceipt + '_' + kind(r)) NEW p = PaymentGiftCard DO {
                    id(p) <- idReceipt + '_' + kind(r);
                    receipt(p) <- receipt(idReceipt);
                    paymentType(p) <- minGiftCardPaymentType();
                    ZReport.sum(p) <- sumReceiptDetail(receipt(idReceipt));
                    giftCard(p) <- giftCard(cardNum(r));
                }

                //смешаная оплата
                FOR INTEGER r == [GROUP MIN INTEGER rr BY idReceipt(rr)](STRING idReceipt) AND kind(r) == 88 DO {
                    IF NOT payment(idReceipt + '_' + kind(r) +'_'+ 1) AND mixCash(r) !=0 THEN NEW p = Payment {
                        id(p) <- idReceipt + '_' + kind(r) +'_'+ 1;
                        receipt(p) <- receipt(idReceipt);
                        paymentType(p) <- minCashPaymentType();
                        sum(p) <- mixCash(r);
                    }
                    IF NOT payment(idReceipt + '_' + kind(r) +'_'+ 2) AND mixBank(r) != 0 THEN NEW p = Payment {
                        id(p) <- idReceipt + '_' + kind(r) +'_'+ 2;
                        receipt(p) <- receipt(idReceipt);
                        paymentType(p) <- minCardPaymentType();
                        sum(p) <- mixBank(r);
                    }
                    IF NOT payment(idReceipt + '_' + kind(r) +'_'+ 3) AND mixOther(r) != 0 THEN NEW p = PaymentGiftCard {
                        id(p) <- idReceipt + '_' + kind(r) +'_'+ 3;
                        receipt(p) <- receipt(idReceipt);
                        paymentType(p) <- minGiftCardPaymentType();
                        ZReport.sum(p) <- mixOther(r);
                    }
                }

                //other
                FOR INTEGER r == [GROUP MIN INTEGER rr BY idReceipt(rr)](STRING idReceipt) AND (kind(r) != 88 AND NOT paymentType(kindOperation(kind(r))) == minGiftCardPaymentType()) AND NOT payment(idReceipt + '_' + kind(r)) NEW p = Payment DO {
                    id(p) <- idReceipt + '_' + kind(r);
                    receipt(p) <- receipt(idReceipt);
                    kindOperation(p) <- kindOperation(kind(r));
                    paymentType(p) <- paymentType(kindOperation(kind(r)));
                    sum(p) <- sumReceiptDetail(receipt(idReceipt));
                }
                
                //кассовые операции
                FOR vid(INTEGER r) == INTEGER(id(CashOperation.Operation o)) AND discountSum(r) !=0 AND idZReport(r) AND NOT cashDocument(idZReport(r) + '_' + vid(r) + '_' + time(r)) DO {
                    IF allowIncomeCashOperation(o) THEN NEW ic = IncomeCashOperation {
                        id(ic) <- idZReport(r) + '_' + vid(r) + '_' + time(r);
                        date(ic) <- date(r);
                        time(ic) <- time(r);
                        cashRegister(ic) <- cr;
                        zReport(ic) <- zReport(idZReport(r));
                        operation(ic) <- CashOperation.operation(STRING(vid(r)));
                        sumCash(ic) <- -discountSum(r);
                    } ELSE NEW oc = OutcomeCashOperation {
                        id(oc) <- idZReport(r) + '_' + vid(r) + '_' + time(r);
                        date(oc) <- date(r);
                        time(oc) <- time(r);
                        cashRegister(oc) <- cr;
                        zReport(oc) <- zReport(idZReport(r));
                        operation(oc) <- CashOperation.operation(STRING(vid(r)));
                        sumCash(oc) <- discountSum(r);
                    }
                }

            }
            
            APPLY NESTED LOCAL;
        }   
    }
}

receiveGroupMachinery(GroupMachinery g) + {
    IF isBerlio(g) THEN {
        receiveFromBerlio(g);
    }
}