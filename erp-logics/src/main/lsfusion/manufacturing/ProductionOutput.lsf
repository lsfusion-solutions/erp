MODULE  ProductionOutput;

REQUIRE ProductionOrder, StockDocumentSkuLedger;

NAMESPACE Production;

// ---------------- Производство ------------------- //

CLASS ABSTRACT Output 'Производство' : Document;
CLASS ABSTRACT OutputDetail 'Строка производства' : DocumentDetail;

CLASS UserOutput 'Производство (польз.)': Output;
CLASS UserOutputDetail 'Строка производства (польз.)' : OutputDetail;

@defineDocumentInterface(output);
@deriveDocumentHeaderTimePrefix(UserOutput, );

@defineDocumentInterfaceNumber(output, BPSTRING[2]);
@defineNumeratedDefault(UserOutput, 'Производство', 'НП');

@defineDocumentInterfaceStock(output, stock, 'Склад', );
@defineDocumentDialogStocks(userOutput, stock, company, , );
@defineDocumentInterfacePosted(output);
@defineDocumentInterfaceClosed(output);
@defineDocumentClosedConstraint(UserOutput);
@defineDocumentInterfaceDescription(output, 'Производство');

@defineDocumentInterfaceCurrency(output);
@deriveDocumentCurrency(userOutput, stock);

@defineDocumentInterfacePriceListType(output); // объявляем вид цены
priceListType(UserOutputDetail detail) <- priceListType(userOutput(detail))
        WHEN CHANGED(priceListType(userOutput(detail)));

@defineDocumentInterfaceDetailSku(output, sku);

CONSTRAINT sku(UserOutputDetail d) AND NOT isProductGroup(sku(d)) CHECKED  BY sku[UserOutputDetail]
    MESSAGE 'В качестве изделия выбран товар, который не входит в группу: Готовые изделия';

@defineDocumentInterfaceDetailQuantity(output);

@defineDocumentInterfaceDetailPrice(output); // объявляем цену. Записываем цену: см ниже.

// суммма
@defineDocumentInterfaceDetailDataSum(output);
@deriveDocumentDetailSum(userOutput, quantity);

// сроки годности
expiryDate 'Годен до'= ABSTRACT DATE (OutputDetail);
expiryDate 'Годен до'= DATA DATE (UserOutputDetail);
expiryDate(UserOutputDetail outputDetail) += expiryDate (outputDetail);

// кол-во в шапке документа
@defineDocumentInterfaceHeaderQuantity(output);
@defineDocumentHeaderSkuQuantity(output, sku);

@defineDocumentHeaderSkuQuantity(userOutput, sku);
@defineDocumentInterfaceHeaderSum(output);

@defineDocumentHeaderItemSum(output, , );
@defineDocumentHeaderItemSum(userOutput, , );

@defineAddDetailDialogSkuStock(userOutput, sku, stock, dialogSku);
@defineAddDetailDialogBarcode(userOutput, sku);

// Подбор документа
@implementDocument(output);

@implementDocumentForm(output, o, 'Производство');

customerStock(Output output) += stock(output);
close[StockDocumentLedger](Output l) + {  close(l); }

//--  Связь заказа и акта производства

GROUP order 'Информация о заказе' : public;

productDetail = ABSTRACT ProductDetail (OutputDetail) MATERIALIZED INDEXED ;
productDetail = DATA ProductDetail (UserOutputDetail);
productDetail(UserOutputDetail outputDetail) += productDetail(outputDetail);

CONSTRAINT stock[OutputDetail](UserOutputDetail detail) != productsStock(productDetail(detail)) OR
           sku[OutputDetail](detail) != sku(productDetail(detail))
    CHECKED BY productDetail[UserOutputDetail]
        MESSAGE 'Склад ГП и товар в производстве и производственном заказе должны соответствовать друг другу';


descriptionIndexProductDetail 'Строка изделия' (OutputDetail detail) = descriptionIndex(productDetail(detail));
descriptionIndexProductDetail 'Строка изделия' (UserOutputDetail detail) = descriptionIndex(productDetail(detail));

quantityOutputDetail (order, output) = GROUP SUM quantity(OutputDetail outputDetail) BY order(productDetail(outputDetail)), output(outputDetail);

orders 'Заказы' (Output output) = GROUP
                                                CONCAT STRING[255](description(Order order)) IF quantityOutputDetail(order, output) , ', '
                                                ORDER order IN order CHARWIDTH 30 MATERIALIZED;

output 'Кол-во (произведено)' (productDetail) = GROUP SUM quantity(OutputDetail outputDetail) IF isPosted(outputDetail)
                                                                   BY productDetail(outputDetail) MATERIALIZED;

toOutput 'Не произведено' (ProductDetail productDetail) = quantity (productDetail) (-) output(productDetail);

toOutputProductDetail 'Не прозиведено по заказу' (order) =
    GROUP SUM toOutput(ProductDetail productDetail) IF toOutput(productDetail) > 0
          BY order(productDetail);

EXTEND FORM productDetails
    PROPERTIES(d) READONLY toOutput
;
DESIGN productDetails {
    BOX {
        PROPERTY(toOutput(d)) { background = #FFFFCC; }
    }
}

price(UserOutputDetail detail) <- IF priceListType(detail) THEN
                                    prevPriceB(priceListType(detail),
                                                                            sku(detail),
                                                                            stock(detail),
                                                                            dateTime(detail))
                                    ELSE price(productDetail(detail))
    WHEN CHANGED(priceListType(detail)) OR
         CHANGED(sku(detail)) OR
         CHANGED(stock(detail)) OR
         CHANGED(dateTime(detail)) OR
         CHANGED(productDetail(detail));

// -- Заполнение на основе производственных заказов ---- //

FORM outputOrders 'Производственные заказы'

    OBJECTS s = Stock PANEL

    OBJECTS o = Order
    PROPERTIES(o) READONLY isPosted , number, series, date, time,
                  nameComponentsStock, nameProductsStock, fromDate, toDate, quantityProductDetail,
                  sumProductDetail,
                  nameCalcPriceListType, namePriceListType, note
    FILTERS isPosted(o),
            componentsStock(o) == s,
            toOutputProductDetail(o)

    OBJECTS pd=ProductDetail
    PROPERTIES(pd) READONLY index, nameSku, nameProduct, shortNameUOM, quantity,
                   calcComponentsPrice, componentsPrice, markup, price, sum
    FILTERS order(pd)==o

    OBJECTS cd = ComponentDetail
    PROPERTIES(cd) READONLY index, nameSku, nameComponent,
                   shortNameUOM, quantity
    FILTERS order(cd)==o
;

DESIGN outputOrders {
    BOX {
        size = (1024, 768);
        NEW documentContainer BEFORE TOOLBARBOX {
            fill = 1;
            type = SPLITV;

            MOVE BOX(o);
            NEW documentDetail {
                fill = 1;
                tabbed = TRUE;
                MOVE BOX(pd) {
                    caption = 'Изделия';
                }
                MOVE BOX(cd) {
                    caption = 'Компоненты';
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                        type = CONTAINERV;
                    }
                }
            }
        }
    }
}

fillOrder 'Заполнить на основе производственного заказа'(UserOutput userOutput)   { 
    DIALOG outputOrders OBJECTS s = stock(userOutput), o INPUT DO {
        FOR order(ProductDetail productDetail) == o NEW d = UserOutputDetail DO {
            userOutput(d) <- userOutput;
            productDetail(d) <- productDetail;
            sku(d) <- sku(productDetail);
            quantity (d) <- toOutput(productDetail);              // возможно надо quantityProductDetail   ?
        }
    }
} IN order;

operation = ABSTRACT Operation (Output);

// Товарный отчет
@implementStockDocumentLedgerIncOver(Output, stock);
operation[StockDocumentLedger] (Output ledger) += operation(ledger);
type(Output l) += STRING[50]('Производство') IF l IS Output;
sumItemInStockDocumentLedger 'Сумма приход, товар' (ledger) = ABSTRACT NUMERIC[18,4] (Output) MATERIALIZED;
sumItem (Output ledger) += OVERRIDE sumItemInStockDocumentLedger(ledger), sumItemOutputDetail(ledger);
sumContainer (Output ledger) += sumContainerOutputDetail(ledger);

// Проводим по регистру
overCostPrice = ABSTRACT NUMERIC[16,4] (OutputDetail);
costPrice(OutputDetail d) = OVERRIDE overCostPrice(d), price(d);

@implementBatch(OutputDetail, sku, stock, costPrice);
quantity[Batch] (OutputDetail ledger) += quantity(ledger);
expiryDate[Batch] (OutputDetail ledger) += OVERRIDE expiryDate(ledger), expiryDate(productDetail(ledger));
manufactureDate (OutputDetail ledger) += manufactureDate(productDetail(ledger));
valueSum = ABSTRACT VALUE NUMERIC[18,4](OutputDetail);
valueSum(OutputDetail ledger) += sum(ledger);
sum[InSkuLedger] (OutputDetail ledger) += valueSum(ledger);

series (OutputDetail ledger) += series(output(ledger));
number (OutputDetail ledger) += number(output(ledger));
supplier (OutputDetail ledger) += OVERRIDE supplier(productDetail(ledger)), legalEntity(stock(ledger));
supplierStock (OutputDetail ledger) += stock(ledger);

stockDocumentLedger(OutputDetail ledger) += output(ledger);

// Создание агрегированного производства

@defineDocumentHeaderProperty (order, createOutput, 'Создать документ производства');
@defineDocumentDetailProperty (order, productDetail, createOutput, 'Создать документ производства');

@defineOperationProperty(createOutput, 'Создать документ производства', createContainer);
@deriveDocumentOperationProperty(Order, createOutput);

@defineDocumentDetailQuantityCustomPrefix (productDetail, output, '(произведено)');
outputQuantity(ProductDetail detail) <- quantity(detail) WHEN CHANGED(quantity(detail));

outputProductsSum 'Сумма произведенного изделия' = DATA NUMERIC[18,4] (ProductDetail);

calcOutputSum = ABSTRACT VALUE NUMERIC[18,4] (ProductDetail);
calcOutputSum(ProductDetail productDetail) += NUMERIC[18,4](round2(outputQuantity(productDetail) * price(productDetail))); 
outputProductsSum(ProductDetail productDetail) <- calcOutputSum(productDetail)
    WHEN CHANGED (outputQuantity(productDetail)) OR
         CHANGED (price(productDetail)) OR
         CHANGED (productsStock(productDetail));

overFillOutputQuantityProductDetail  ABSTRACT ( Order);
fillOutputQuantityProductDetail 'Заполнить из остатков' (Order order)  { 
    createOutput(order) <- TRUE;

    outputQuantity(ProductDetail d) <- (- balanceA(sku(d), productsStock(d), date(d))) 
        IF balanceA(sku(d), productsStock(d), date(d)) < 0 
        WHERE order(d) == order;
    
    overFillOutputQuantityProductDetail(order);
} TOOLBAR;        

outputProductsSumProductDetail 'Сумма произведенных изделий' (order) = GROUP SUM outputProductsSum(ProductDetail detail) BY order(detail) IN documentSum;
outputProductsSumProductDetail 'Сумма произведенных изделий' (order, BOM) = GROUP SUM outputProductsSum(ProductDetail detail) BY order(detail), BOM(detail) IN documentSum;

outputQuantityProductDetail 'Кол-во произведенных изделий' (order) = GROUP SUM outputQuantity(ProductDetail detail) BY order(detail) IN documentSum;
outputQuantityProductDetail 'Кол-во произведенных изделий' (order, BOM) = GROUP SUM outputQuantity(ProductDetail detail) BY order(detail), BOM(detail) IN documentSum;

backgroundOutput 'Цвет' (Order order) = RGB(255, 224, 255) IF order IS Order;
showOutput (Order order) =  order IS Order AND NOT createOutput(order);

EXTEND FORM order
    PROPERTIES(o) BACKGROUND backgroundOutput(o) createOutput
    PROPERTIES(o) READONLY BACKGROUND backgroundOutput(o) SHOWIF createOutput(o) outputProductsSumProductDetail
    PROPERTIES(o) fillOutputQuantityProductDetail DRAW pd    

    PROPERTIES(pd) BEFORE deletepd SHOWIF createOutput(o) BACKGROUND backgroundOutput(o) outputProductsSum

    PROPERTIES(pd) READONLY output AFTER quantity(pd) SHOWIF showOutput(o) BACKGROUND backgroundOutput(o)
    PROPERTIES(pd) outputQuantity AFTER quantity(pd) SHOWIF createOutput(o) BACKGROUND backgroundOutput(o)
;
DESIGN order {
    headerRow112 {
        NEW headerRow1122 {
            caption = 'Производство';
            MOVE PROPERTY(createOutput(o));
        }
    }
    
    GROUP(documentSum,o) {
        MOVE PROPERTY(outputProductsSumProductDetail(o)) AFTER PROPERTY(sumProductDetail(o)) { charWidth = 13;}
    }
}

EXTEND FORM orders
    PROPERTIES(o)  READONLY BACKGROUND backgroundOutput(o) outputProductsSumProductDetail AFTER sumProductDetail(o)

    PROPERTIES(pd) READONLY SHOWIF createOutput(o) BACKGROUND backgroundOutput(o) outputProductsSum
    PROPERTIES(pd) READONLY output AFTER quantity(pd) SHOWIF showOutput(o) BACKGROUND backgroundOutput(o)
    PROPERTIES(pd) READONLY outputQuantity AFTER quantity(pd) SHOWIF createOutput(o) BACKGROUND backgroundOutput(o)
;

// Создание агрегированного документа

CLASS OrderOutput 'Производство на основе заказа' : Output;
CLASS OrderOutputDetail 'Строка производства на основе заказа' : OutputDetail;

@defineDocumentTables(orderOutput);

@defineDocumentAggregationHeader(order, orderOutput, createOutput);
isProduction(Order o, LONG d) += WHEN d == LONG(orderOutput(o)) THEN TRUE;

@defineOperationProperty(ledgerPrice, 'Изделия с количеством равным 0 проводить по регистру цены', paramsContainer);
 
needToOutputDetail (ProductDetail d) = createOutput(d) AND (outputQuantity(d) >0 OR ledgerPrice(operation(d)));

orderOutputDetail = AGGR OrderOutputDetail WHERE needToOutputDetail(ProductDetail productDetail) MATERIALIZED INDEXED;
overCostPrice(OrderOutputDetail d) += costPrice(productDetail(d));

orderOutput (OrderOutputDetail detail) = orderOutput(order(productDetail(detail)));
output(OrderOutputDetail detail) += orderOutput(detail);
@defineDocumentDetailIndex(orderOutput);

date 'Дата' (OrderOutputDetail orderOutputDetail) = date(productDetail(orderOutputDetail));
time 'Время' (OrderOutputDetail orderOutputDetail) = time(productDetail(orderOutputDetail));
dateTime 'Дата/время' (OrderOutputDetail orderOutputDetail) = date(productDetail(orderOutputDetail));

date(OrderOutput output) += date(output);
time(OrderOutput output) += time(output);

stock(OrderOutput output) += productsStock(order(output));
isPosted(OrderOutput output) += isPosted(order(output));
isClosed(OrderOutput output) += isClosed(order(output));

number 'Номер документа' (OrderOutput orderOutput) = number(order(orderOutput));
number(OrderOutput output) += number(output);

series 'Серия документа' (OrderOutput orderOutput) = series(order(orderOutput));
series(OrderOutput output) += series(output);

seriesNumber 'Серия/номер документа' (OrderOutput orderOutput) = seriesNumber(order(orderOutput));

note(OrderOutput output) += note(order(output));
currency (OrderOutput output) += currencyProduct(order(output));

priceListType(OrderOutput output) += productsPriceListType(order(output));

@defineDocumentDescription(orderOutput, OrderOutputDetail, 'Производство на основе заказа');
description (OrderOutput output) += description(output);


productDetail (OrderOutputDetail outputDetail) += productDetail(outputDetail);
sku(OrderOutputDetail outputDetail) +=  sku(productDetail(outputDetail));
quantity(OrderOutputDetail outputDetail) += outputQuantity(productDetail(outputDetail));

priceListType(OrderOutputDetail outputDetail) += calcPriceListType(productDetail(outputDetail));

priceCustom = ABSTRACT NUMERIC[16,4](OrderOutputDetail);
sumCustom = ABSTRACT NUMERIC[18,4](OrderOutputDetail);

price(OrderOutputDetail outputDetail) += OVERRIDE priceCustom(outputDetail), price(productDetail(outputDetail));
sum(OrderOutputDetail outputDetail) += OVERRIDE sumCustom(outputDetail), outputProductsSum(productDetail(outputDetail));

edit(OrderOutput output) + {  edit(order(output)); }
close(OrderOutput output) + {  isClosed(Order o) <- TRUE WHERE o == order(output); }

valueVAT (OrderOutputDetail batch) += valueVAT(productDetail(batch)) IF VATProduct(productDetail(batch));

operation(OrderOutput output) += operation(order(output));

// --------------------------- Формы Списания ---------------------------------

FORM userOutput 'Производство'
    OBJECTS o = UserOutput PANEL
    PROPERTIES (o) isPosted, nameStock ON CHANGE changeStockCompany(o), nameNumerator, number, series, date, time,
                   nameCurrency, namePriceListType, note,
                   countUserOutputDetail, quantityUserOutputDetail, sumUserOutputDetail,
                   fillOrder, orders READONLY

    OBJECTS d = UserOutputDetail
    PROPERTIES (d) index, idBarcodeSku, nameSku, shortNameUOMSku,
                   namePriceListType, expiryDate, quantity, price, sum,
                   descriptionIndexProductDetail, NEW, deleted=DELETE GRID

    PROPERTIES(o) DRAW d fillDocument, addDetailDialogSkuStockUserOutputDetail,
                           addDetailInputBarcodeUserOutputDetail, deleteUserOutputDetail
    FILTERS userOutput(d) == o

    EVENTS
        ON OK prePost(o)

    HINTTABLE LIST dateTime[UserOutputDetail], sku[UserOutputDetail], stock[UserOutputDetail],
                   priceListType[UserOutputDetail], currency[UserOutputDetail], price[UserOutputDetail]

    EDIT UserOutput OBJECT o
;

DESIGN userOutput {

    BOX {
        size = (1024, 768);
        NEW specificationBox BEFORE TOOLBARBOX{
            fill = 1;
            MOVE BOX(d) {
                caption = 'Спецификация';
            }
        }

        NEW headerBox BEFORE specificationBox {
            horizontal = TRUE;

            NEW headerRow1 {
                type = CONTAINERV;

                MOVE GROUP(documentHeader,o) {
                    lines = 1;
                    horizontal = TRUE;
                    MOVE PROPERTY(isPosted(o)) { charWidth = 10; }
                    MOVE PROPERTY(nameStock(o));
                    MOVE PROPERTY(nameNumerator(o));
                    MOVE PROPERTY(number(o));
                    MOVE PROPERTY(series(o));
                    MOVE PROPERTY(date(o));
                    MOVE PROPERTY(time(o));
                }
                NEW headerRow12 {
                    type = CONTAINERV;
                    NEW headerRow122 {
                        type = CONTAINERV;
                        MOVE GROUP(documentPrm,o) {
                            lines = 1;
                            horizontal = TRUE;
                        }
                        MOVE GROUP(order,o){
                            lines = 1;
                            horizontal = TRUE;
                        }
                    }
                }
            }

            MOVE GROUP(documentSum,o) {
                lines = 1;
            }
        }

        PROPERTY(formOk()) {
            caption = 'Провести';
        }
        PROPERTY(sumUserOutputDetail(o)) { charWidth = 13;}
    }
}

show 'Просмотреть'  ABSTRACT LIST  ( OutputDetail) TOOLBAR;
show(UserOutputDetail d)  { 
	NEWSESSION {
	    SHOW userOutput OBJECTS o = userOutput(d), d = d DOCKED READONLY ;
	}
}
show(UserOutputDetail d) + {  show(d); }

edit(UserOutputDetail d) + {  DIALOG userOutput OBJECTS o = userOutput(d), d = d DOCKED; }
edit(OrderOutputDetail d) + {  edit(productDetail(d)); }

show[SkuLedger](OutputDetail batch) + {  show(batch); }
show(OrderOutputDetail d) + {  show(productDetail(d)); }                       
//-- SKU

copy 'Копировать'(UserOutput userOutput)  { 
	NEWSESSION {
	    NEW o = UserOutput {
	        stock(o) <- stock(userOutput);
	        currency(o) <- currency(userOutput);
	        priceListType(o) <- priceListType(userOutput);
	        note(o) <- note(userOutput);
	
	        FOR userOutput(UserOutputDetail userOutputDetail) == userOutput DO {
	            NEW d=UserOutputDetail {
	                userOutput(d) <- o;
	                sku(d) <- sku(userOutputDetail);
	                quantity(d) <- quantity(userOutputDetail);
	                priceListType(d) <- priceListType(userOutputDetail);
	                productDetail(d) <- productDetail(userOutputDetail);
	            }
	        }
	        SHOW userOutput OBJECTS o = o DOCKED NOCANCEL;
	    }
	}
} TOOLBAR;

isUserOpened(UserOutput o)=  isOpened[Output](o) AND is(o);
FORM outputs 'Производство'
    OBJECTS o = Output
    PROPERTIES (o) READONLYIF isReadonly() isClosed, isPosted, number, series, date, time,
                            nameStock, nameCurrency, namePriceListType 
    PROPERTIES (o) READONLY countOutputDetail, quantityOutputDetail, sumOutputDetail
    PROPERTIES (o) READONLYIF isReadonly() note

    PROPERTIES (o) READONLY PANEL createdNameUser, createdTime, createdHostnameComputer, 
                                        postedNameUser, postedTime, postedHostnameComputer

    PROPERTIES (o) NEWSESSION NEW[UserOutput], EDIT SHOWIF isOpened(o), deleteo = DELETE SHOWIF isUserOpened(o)  
    PROPERTIES (o) copy
    PROPERTIES(o)  close[UserOutput] SHOWIF isOpened[UserOutput](o), open SHOWIF isClosed[UserOutput](o)     

    OBJECTS d=OutputDetail
    PROPERTIES (d) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku
    PROPERTIES (d) READONLY namePriceListType, expiryDate, quantity, price,
                   sum, descriptionIndexProductDetail

    FILTERS output(d) == o
    LIST Output OBJECT o
;
@extendFormFilterAccessStock(Output, o, outputs, stock, company);

DESIGN outputs {
    NEW documentContainer BEFORE TOOLBARBOX {
        type = SPLITV;
        fill = 1;

        MOVE BOX(o);

        NEW documentDetail {
            tabbed = TRUE;
            fill = 1;
            MOVE BOX(d) {
                caption = 'Спецификация';
            }
            NEW documentHistory {
                caption = 'История';

                MOVE GROUP(created,o);
                MOVE GROUP(posted,o);
            }
            NEW printTab {
                caption = 'Печатные формы';
                NEW printContainer {
                    caption = 'Печать';
                    type = CONTAINERV;
                }
            }
        }
    }
}
@extendFormEditable(outputs);
@defineFilterIsOpened (output, outputs, o);
@defineDocumentLogForm(outputs, o);
NAVIGATOR {
    manufacturingDocuments {
        NEW outputs;
    }
}