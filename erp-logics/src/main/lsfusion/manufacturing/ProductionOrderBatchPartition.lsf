MODULE ProductionOrderBatchPartition;

REQUIRE ProductionOrder;

NAMESPACE Production;

subQuantity 'В заказ' = DATA NUMERIC[16,5](Order,Substitute);
originalSubQuantity 'В заказ (исходный компонент)' (Order o, Substitute s) = subQuantity(o, s) / multiplier(s);
originalSubQuantity (Sku s, Order o) = NUMERIC[16,5] ( GROUP SUM originalSubQuantity(o, Substitute sb) IF fromSku(sb) = s);

subQuantity 'В заказ' (Order o, Sku from, Sku to) = GROUP SUM subQuantity(o,Substitute su) IF multiplier(su) >0.0 AND  fromSku(su)==from AND toSku(su)==to;
subQuantity 'В заказ' (Order o, Sku to) = GROUP SUM subQuantity(o,Substitute su) IF multiplier(su) > 0.0 AND toSku(su)==to;
EXTEND FORM order
    PROPERTIES (o,su) subQuantity
;

quantity 'Кол-во к списанию' = DATA LOCAL NUMERIC[16,5] (Sku, BOM);
product 'Полуфабрикат' = DATA LOCAL Product (Sku, BOM);
component 'Полуфабрикат' = DATA LOCAL Component (Sku, BOM);
quantity 'Кол-во к списанию' = DATA LOCAL NUMERIC[16,5] (Substitute, BOM);
taken (Sku s, BOM b) = GROUP SUM quantity(Substitute r, b) IF fromSku(r) = s;  

multiplier 'Коэффициент замены' = DATA LOCAL NUMERIC[16,5] (Sku, BOM, Sku);
quantity 'Кол-во к списанию замены' = DATA LOCAL NUMERIC[16,5] (Sku, BOM, Sku);
originalQuantity 'Кол-во к списанию в базовом компоненте' = DATA LOCAL NUMERIC[16,5] (Sku, BOM, Sku);

toConsumePart 'Кол-во всего по товару' = DATA LOCAL NUMERIC[16,5] (Sku);

toConsume 'Кол-во из партии' = DATA LOCAL NUMERIC[16,5] (Batch);

toConsume 'Кол-во из партии' = DATA LOCAL NUMERIC[16,5] (Sku, BOM, Batch);
takenBatch 'Расписано по партиям (замена)' (Sku s, BOM b, Sku sr) = GROUP SUM toConsume(s, b, Batch bt) IF sku(bt) = sr;
originalTakenBatch 'Расписано по партиям (в исходном количестве)' (Sku s, BOM b) = GROUP SUM NUMERIC[16,5](toConsume(s, b, Batch bt) / (OVERRIDE multiplier(s, b, sku(bt)), 1.0));

lastDetail = GROUP LAST ComponentDetail d ORDER d BY order(d), bruttoSku(d), BOM(d), batch(d); 

lack 'Не хватает' = DATA LOCAL NUMERIC[16,5] (Sku); 
replaceSub 'Заменить' = DATA LOCAL NUMERIC[16,5] (Substitute);
replaceSub 'Заменить' (Sku s) = GROUP SUM replaceSub(Substitute sb) IF toSku(sb) = s;  

createBatchComponentDetailOver  ABSTRACT LIST (Order);
prevCurrentBalanceZero(Sku s, Order o) = GROUP SUM prevCurrentBalance(Batch b, componentsStock(o)) IF  dateTime(b)<dateTime(o) AND prevCurrentBalance(b, componentsStock(o)) >0 AND sku(b)==s;

returnCreateBatch = DATA LOCAL BOOLEAN (Order);
createBatchComponentDetailFirst ABSTRACT LIST(Order);

createBatchComponentDetail 'Рассчитать партии по FIFO' (Order o) {
    returnCreateBatch(o)<- NULL;   
    createBatchComponentDetailFirst(o);
    IF NOT returnCreateBatch(o) THEN {
        // общая потребность по компонентам
        quantity(Sku s, BOM b) <- GROUP SUM bruttoQuantity(ComponentDetail d) IF bruttoSku(d) = s AND BOM(d) = b AND order(d) = o;
        product(Sku s, BOM b) <- GROUP MAX product(ComponentDetail d) IF  bruttoQuantity(d) AND bruttoSku(d) = s AND BOM(d) = b AND order(d) = o;
        component(Sku s, BOM b) <- GROUP MAX component(ComponentDetail d) IF  bruttoQuantity(d) AND bruttoSku(d) = s AND BOM(d) = b AND order(d) = o;
        // рассчитываем куда расписать количество, которого не хватает
        lack (Sku s) <- NULL;
        LOCAL brutto = NUMERIC[16,5] (Sku);
        brutto (Sku s) <-  bruttoQuantity(s, o);  
        
        LOCAL prevBalance = NUMERIC[16,5](Sku);
        prevBalance(Sku s) <- prevCurrentBalanceZero(s,o) WHERE (brutto(s) OR originalSubQuantity(s, o));
                              
        lack (Sku s) <- (brutto(s) (-) originalSubQuantity(s, o) (-) prevBalance(s)) WHERE (brutto(s) OR originalSubQuantity(s, o));
        lack (Sku s) <- NULL WHERE lack(s) <= 0.0;
    
        LOCAL subBalance = NUMERIC[16,5] (Substitute);
        LOCAL subDateTime = DATETIME (Substitute);
        LOCAL prevBalance = NUMERIC[16,5](Substitute);
        prevBalance(Substitute s) <- prevCurrentBalanceZero(toSku(s), o) WHERE lack(fromSku(s));    
        subBalance(Substitute s) <- prevBalance(s) / multiplier(s) WHERE lack(fromSku(s));
        subDateTime(Substitute s) <- prevDateTimeLastOrderBatch(toSku(s), componentsStock(o)) WHERE lack(fromSku(s));
        
        replaceSub (Substitute s) <- subQuantity(o, s);
        FOR lack(Sku s) DO {
            replaceSub (Substitute sb) <- PARTITION UNGROUP lack
                                                    LIMIT subBalance(sb) (-) replaceSub(toSku(sb)) (-) brutto (toSku(sb))
                                                    ORDER subDateTime(sb), sb
                                                    BY fromSku(sb)
                WHERE fromSku(sb) = s AND NOT replaceSub(sb);
        }
            
        // расписываем замены по BOM'ам (many to many, поэтому без FOR не получится)
        quantity(Substitute s, BOM bm) <- NULL;
        FOR replaceSub(Substitute s) DO {
            quantity(s, BOM bm) <- PARTITION UNGROUP replaceSub
                                                            LIMIT STRICT (quantity(fromSku(s), bm) (-) taken(fromSku(s), bm)) IF use(s, bm) 
                                                            ORDER bm
                                                            BY s;
        }
        
        // запоминаем коэффициент
        multiplier(Sku s, BOM b, Sku r) <- GROUP MAX multiplier(Substitute sb) IF quantity(sb, b) AND fromSku(sb) = s AND toSku(sb) = r;
        
        // считаем назад в единицах замен
        quantity(Sku s, BOM b, Sku r) <- NUMERIC[16,5](GROUP SUM quantity(Substitute sb, b) * multiplier(sb) IF fromSku(sb) = s AND toSku(sb) = r);
        
        // все оставшееся пойдет по обычному товару
        quantity(Sku s, BOM b, Sku r) <- quantity(s, b) (-) taken(s, b) WHERE r = s;
        
        // считаем общее количество по товару, который нужно списать
        toConsumePart(Sku r) <- GROUP SUM quantity(Sku s, BOM b, r);
        
        // Расписываем партии по FIFO
        FOR Stock st = componentsStock(o) DO {
            LOCAL balance = NUMERIC[16,5] (Batch);
            balance (Batch b) <- prevCurrentBalance(b, st) WHERE toConsumePart(prevSkuCurrentBalance(b, st)) AND dateTime(b)<dateTime(o) AND prevCurrentBalance(b, st) >0;
            
            toConsume(Batch b) <- PARTITION UNGROUP toConsumePart
                                        LIMIT balance(b)
                                        ORDER dateTime(b), b 
                                        BY sku(b);
        }
        
        // Раскидываем партии по строкам заказа
        toConsume(Sku s, BOM b, Batch bt) <- NULL;
        FOR toConsume(Batch bt) DO {
            toConsume(Sku s, BOM b, bt) <- PARTITION UNGROUP toConsume
                                                   LIMIT STRICT quantity(s, b, sku(bt)) - (OVERRIDE takenBatch(s, b, sku(bt)), 0.0)
                                                   ORDER s, b
                                                   BY bt;
        }
        
        // Создаем строки по расписанным партиям
        FOR toConsume(Sku s, BOM b, Batch bt) AND NOT lastDetail(o, s, b, bt) ORDER b, s, dateTime(bt), bt NEW d = ComponentDetail DO {
            order(d) <- o;
            bruttoSku(d) <- s;
            component(d)<- component(s,b);
            product(d)<- product(s,b);
            BOM(d) <- b;
            substituteSku(d) <- sku(bt) IF sku(bt) != s;
            batch(d) <- bt;
        }
        
        LOCAL bruttoQuantity = NUMERIC[16,5] (Sku, BOM, Batch);
        bruttoQuantity (Sku s, BOM bom, Batch b) <- NUMERIC[16,5](toConsume(s, bom, b) / (OVERRIDE multiplier(s, bom, sku(b)), 1.0)); 
        
        // Исходное количество
        bruttoQuantity(ComponentDetail d) <- bruttoQuantity(bruttoSku(d), BOM(d), batch(d)) WHERE order(d) = o;
        
        // Кол-во с учетом замены
        substituteQuantity(ComponentDetail d) <- toConsume(bruttoSku(d), BOM(d), batch(d)) WHERE order(d) = o AND bruttoSku(d) != sku(batch(d));
        
        DELETE ComponentDetail d WHERE order(d) = o AND NOT d = lastDetail(o, bruttoSku(d), BOM(d), batch(d));
        
        // Добавляем компоненты, по которым нету ни одной партии
        FOR NUMERIC[16,5] q = (quantity(Sku s, BOM b) (-) originalTakenBatch(s, b)) IF ( IF originalTakenBatch(s, b) THEN q >0.00001 ELSE q > 0 )  NEW d = ComponentDetail DO {
            order(d) <- o;
            bruttoSku(d) <- s;
            component(d)<- component(s,b);
            product(d)<- product(s,b);
            BOM(d) <- b;
            bruttoQuantity(d) <- q;
        }
        
        createBatchComponentDetailOver(o);
    }
}

quantity 'Кол-во к списанию' (Sku s) = GROUP SUM quantity(s, BOM b); 
quantity 'Кол-во к списанию' (Sku s, Sku r) = GROUP SUM quantity(s, BOM b, r); 

EXTEND FORM order
    OBJECTS bs = Sku
    PROPERTIES(bs) READONLY name, quantity
    PROPERTIES READONLY 'Остаток' = prevCurrentBalance(bs, componentsStock(o))
    FILTERS quantity(bs) 
    
    OBJECTS sb = Substitute
    PROPERTIES(sb) READONLY nameFromSku, nameToSku, multiplier, replaceSub
    FILTERS fromSku(sb) = bs,
            replaceSub(sb)
    
    OBJECTS br = Sku
    PROPERTIES(br) READONLY name
    PROPERTIES READONLY quantity(bs, br)    
    PROPERTIES READONLY 'Остаток' = prevCurrentBalance(br, componentsStock(o))
    PROPERTIES(br) READONLY toConsumePart
    FILTERS quantity(bs, br)
    
    OBJECTS bom = BOM
    PROPERTIES(bom) READONLY fullName
    PROPERTIES READONLY quantity(bs, bom), quantity(bs, bom, br), multiplier(bs, bom, br), originalQuantity(bs, bom, br), originalTakenBatch(bs, bom), takenBatch(bs, bom, br)
    FILTERS quantity(bs, bom)
    
    OBJECTS bbt = Batch
    PROPERTIES(bbt) READONLY name, toConsume
    PROPERTIES READONLY 'Остаток' = prevCurrentBalance(bbt, componentsStock(o))
    PROPERTIES READONLY toConsume(bs, bom, bbt)
    FILTERS prevSkuCurrentBalance(bbt, componentsStock(o)) = br
    
    PROPERTIES(o) createBatchComponentDetail
    
    PROPERTIES(su) replaceSub
;

DESIGN order {
    specificationBox {
        NEW calcDetails {
            caption = 'Расчет';
            NEW calcDetailsRow1 {
                fill = 1;
                horizontal = TRUE;
                MOVE BOX(bs);
                MOVE BOX(sb);
                MOVE BOX(br);
            }
            NEW calcDetailsRow2 {
                fill = 1;
                horizontal = TRUE;
                MOVE BOX(bom);
                MOVE BOX(bbt);
            }
            MOVE PROPERTY(createBatchComponentDetail(o));
        }
    }
}

lack 'Не хватает' = DATA LOCAL NUMERIC[16,5] (Sku, BOM);
replaceSub 'Заменить' = DATA LOCAL NUMERIC[16,5] (Substitute, BOM);
replaceSub 'Заменить' (Sku s, BOM bm) = GROUP SUM replaceSub(Substitute sb, bm) IF toSku(sb) = s;

originalSubQuantity = DATA LOCAL NUMERIC[16,5] (BOM, Substitute);
originalSubQuantity = GROUP  SUM originalSubQuantity(BOM b, Substitute s) BY b, fromSku(s);
replaceSubBom 'Заменить' (Sku s) = GROUP SUM replaceSub(Substitute sb, BOM bm) IF toSku(sb) = s;

createBatchComponentDetailNew 'Рассчитать партии по FIFO new' (Order o) {
    returnCreateBatch(o)<- NULL;
    createBatchComponentDetailFirst(o);
    IF NOT returnCreateBatch(o) THEN {
        // общая потребность по компонентам
        quantity(Sku s, BOM b) <- GROUP SUM bruttoQuantity(ComponentDetail d) IF bruttoSku(d) = s AND BOM(d) = b AND order(d) = o;
        product(Sku s, BOM b) <- GROUP MAX product(ComponentDetail d) IF  bruttoQuantity(d) AND bruttoSku(d) = s AND BOM(d) = b AND order(d) = o;
        component(Sku s, BOM b) <- GROUP MAX component(ComponentDetail d) IF  bruttoQuantity(d) AND bruttoSku(d) = s AND BOM(d) = b AND order(d) = o;
//        // рассчитываем куда расписать количество, которого не хватает
//        lack (Sku s) <- NULL;
        LOCAL brutto = NUMERIC[16,5] (Sku);
        brutto (Sku s) <-  bruttoQuantity(s, o);

        LOCAL prevBalance = NUMERIC[16,5](Sku);
        prevBalance(Sku s) <- prevCurrentBalanceZero(s,o) WHERE (brutto(s) OR originalSubQuantity(s, o));

        //--
        lack (Sku s, BOM bm) <- NULL;
        LOCAL brutto = NUMERIC[16,5] (Sku, BOM);
        brutto (Sku s, BOM bm) <-   GROUP SUM bruttoQuantity(ComponentDetail cd) IF bruttoSku(cd)==s AND order(cd)==o AND BOM(cd)==bm;

        //LOCAL originalSubQuantity = NUMERIC[16,5] (BOM, Substitute);

        FOR originalSubQuantity(o, Substitute sb) DO {
            originalSubQuantity(BOM bm, sb) <- PARTITION UNGROUP originalSubQuantity
                LIMIT (brutto(fromSku(sb),bm) (-) originalSubQuantity(bm,fromSku(sb))) IF use(sb,bm)
                ORDER bm
                BY o,sb;            
        }
        LOCAL originalSubQuantity = NUMERIC[16,5] (Sku, BOM);
        originalSubQuantity(Sku s, BOM bm) <- GROUP SUM originalSubQuantity(bm,  Substitute sb) IF fromSku(sb)==s;
        
        LOCAL prevBalance = NUMERIC[16,5] (Sku, BOM);
        prevBalance(Sku s, BOM bm) <- PARTITION UNGROUP prevBalance
            LIMIT (brutto(s,bm) (-) originalSubQuantity(s, bm))
            ORDER bm, s
            BY s;

        lack (Sku s, BOM bm) <- (brutto(s,bm) (-) originalSubQuantity(s, bm) (-) prevBalance(s, bm)) WHERE (brutto(s, bm) OR originalSubQuantity(s, bm));
        lack (Sku s, BOM bm) <- NULL WHERE lack(s, bm) <= 0.0;

        LOCAL subBalance = NUMERIC[16,5] (Substitute, BOM);
        LOCAL subDateTime = DATETIME (Substitute, BOM);
        LOCAL prevBalance = NUMERIC[16,5](Substitute, BOM);

        prevBalance(Substitute s, BOM bm) <- prevCurrentBalanceZero(toSku(s), o) WHERE lack(fromSku(s), bm);
        subBalance(Substitute s, BOM bm) <- prevBalance(s, bm) / multiplier(s) WHERE lack(fromSku(s), bm);
        subDateTime(Substitute s, BOM bm) <- prevDateTimeLastOrderBatch(toSku(s), componentsStock(o)) WHERE lack(fromSku(s), bm);

        replaceSub (Substitute s, BOM bm) <- NUMERIC[16,5](originalSubQuantity(bm,s)*multiplier(s));
        FOR lack(Sku s, BOM bm) DO {
            replaceSub (Substitute sb, bm) <- PARTITION UNGROUP lack
                LIMIT (subBalance(sb, bm) (-) replaceSubBom(toSku(sb)) (-) brutto (toSku(sb))) IF use(sb,bm)
                ORDER subDateTime(sb, bm), sb, bm
                BY fromSku(sb), bm
                WHERE fromSku(sb) = s AND NOT replaceSub(sb,bm) AND use(sb,bm);
        }


        // расписываем замены по BOM'ам (many to many, поэтому без FOR не получится)
        quantity(Substitute s, BOM bm) <- NULL;
        quantity(Substitute s, BOM bm) <- replaceSub(s,bm);

        // запоминаем коэффициент
        multiplier(Sku s, BOM b, Sku r) <- GROUP MAX multiplier(Substitute sb) IF quantity(sb, b) AND fromSku(sb) = s AND toSku(sb) = r;

        // считаем назад в единицах замен
        quantity(Sku s, BOM b, Sku r) <- NUMERIC[16,5](GROUP SUM quantity(Substitute sb, b) * multiplier(sb) IF fromSku(sb) = s AND toSku(sb) = r);

        // все оставшееся пойдет по обычному товару
        quantity(Sku s, BOM b, Sku r) <- quantity(s, b) (-) taken(s, b) WHERE r = s;

        // считаем общее количество по товару, который нужно списать
        toConsumePart(Sku r) <- GROUP SUM quantity(Sku s, BOM b, r);

        // Расписываем партии по FIFO
        FOR Stock st = componentsStock(o) DO {
            LOCAL balance = NUMERIC[16,5] (Batch);
            balance (Batch b) <- prevCurrentBalance(b, st) WHERE toConsumePart(prevSkuCurrentBalance(b, st)) AND dateTime(b)<dateTime(o) AND prevCurrentBalance(b, st) >0;

            toConsume(Batch b) <- PARTITION UNGROUP toConsumePart
                LIMIT balance(b)
                ORDER dateTime(b), b
                BY sku(b);
        }

        // Раскидываем партии по строкам заказа
        toConsume(Sku s, BOM b, Batch bt) <- NULL;
        FOR toConsume(Batch bt) DO {
            toConsume(Sku s, BOM b, bt) <- PARTITION UNGROUP toConsume
                LIMIT STRICT quantity(s, b, sku(bt)) - (OVERRIDE takenBatch(s, b, sku(bt)), 0.0)
                ORDER s, b
                BY bt;
        }

        // Создаем строки по расписанным партиям
        FOR toConsume(Sku s, BOM b, Batch bt) AND NOT lastDetail(o, s, b, bt) ORDER b, s, dateTime(bt), bt NEW d = ComponentDetail DO {
            order(d) <- o;
            bruttoSku(d) <- s;
            component(d)<- component(s,b);
            product(d)<- product(s,b);
            BOM(d) <- b;
            substituteSku(d) <- sku(bt) IF sku(bt) != s;
            batch(d) <- bt;
        }

        LOCAL bruttoQuantity = NUMERIC[16,5] (Sku, BOM, Batch);
        bruttoQuantity (Sku s, BOM bom, Batch b) <- NUMERIC[16,5](toConsume(s, bom, b) / (OVERRIDE multiplier(s, bom, sku(b)), 1.0));

        // Исходное количество
        bruttoQuantity(ComponentDetail d) <- bruttoQuantity(bruttoSku(d), BOM(d), batch(d)) WHERE order(d) = o;

        // Кол-во с учетом замены
        substituteQuantity(ComponentDetail d) <- toConsume(bruttoSku(d), BOM(d), batch(d)) WHERE order(d) = o AND bruttoSku(d) != sku(batch(d));

        DELETE ComponentDetail d WHERE order(d) = o AND NOT d = lastDetail(o, bruttoSku(d), BOM(d), batch(d));

        // Добавляем компоненты, по которым нету ни одной партии
        FOR NUMERIC[16,5] q = (quantity(Sku s, BOM b) (-) originalTakenBatch(s, b)) IF ( IF originalTakenBatch(s, b) THEN q >0.00001 ELSE q > 0 )  NEW d = ComponentDetail DO {
            order(d) <- o;
            bruttoSku(d) <- s;
            component(d)<- component(s,b);
            product(d)<- product(s,b);
            BOM(d) <- b;
            bruttoQuantity(d) <- q;
        }

        createBatchComponentDetailOver(o);
    }
}

//-- С сохранением компонентов
product 'Полуфабрикат' = DATA LOCAL Product (Sku, BOM, Component);
quantity 'Кол-во к списанию' = DATA LOCAL NUMERIC[16,5] (Sku, BOM, Component);
quantity 'Кол-во к списанию' = DATA LOCAL NUMERIC[16,5] (Substitute, BOM, Component);
taken (Sku s, BOM b, Component c) = GROUP SUM quantity(Substitute r, b, c) IF fromSku(r) = s;

multiplier 'Коэффициент замены' = DATA LOCAL NUMERIC[16,5] (Sku, BOM, Sku, Component);
quantity 'Кол-во к списанию замены' = DATA LOCAL NUMERIC[16,5] (Sku, BOM, Sku, Component);
toConsume 'Кол-во из партии' = DATA LOCAL NUMERIC[16,5] (Sku, BOM, Batch, Component);
takenBatch 'Расписано по партиям (замена)' (Sku s, BOM b, Sku sr, Component c) = GROUP SUM toConsume(s, b, Batch bt, c) IF sku(bt) = sr;
lastDetail = GROUP LAST ComponentDetail d ORDER d BY order(d), bruttoSku(d), BOM(d), batch(d), component(d);

originalTakenBatch 'Расписано по партиям (в исходном количестве)' (Sku s, BOM b, Component c) = GROUP SUM NUMERIC[16,5](toConsume(s, b, Batch bt, c) / (OVERRIDE multiplier(s, b, sku(bt), c), 1.0));

lack 'Не хватает' = DATA LOCAL NUMERIC[16,5] (Sku, BOM, Component);
replaceSub 'Заменить' = DATA LOCAL NUMERIC[16,5] (Substitute, BOM, Component);
replaceSub 'Заменить' (Sku s, BOM bm, Component c) = GROUP SUM replaceSub(Substitute sb, bm, c) IF toSku(sb) = s;

originalSubQuantity = DATA LOCAL NUMERIC[16,5] (BOM, Substitute, Component);
originalSubQuantity = GROUP  SUM originalSubQuantity(BOM b, Substitute s, Component c) BY b, fromSku(s), c;

replaceSubCalc 'Заменить' (Sku s) = GROUP SUM replaceSub(Substitute sb, BOM bm  , Component c) IF toSku(sb) = s;

createBatchComponentDetailComponent 'Расписать партии FIFO' (Order o) {
    returnCreateBatch(o)<- NULL;
    createBatchComponentDetailFirst(o);
    IF NOT returnCreateBatch(o) THEN {
        // общая потребность по компонентам
        quantity(Sku s, BOM b, Component c) <- GROUP SUM bruttoQuantity(ComponentDetail d) IF bruttoSku(d) = s AND BOM(d) = b AND order(d) = o AND component(d)==c;
        product(Sku s, BOM b, Component c) <- GROUP MAX product(ComponentDetail d) IF  bruttoQuantity(d) AND bruttoSku(d) = s AND BOM(d) = b AND order(d) = o AND component(d)==c;
        //        component(Sku s, BOM b) <- GROUP MAX component(ComponentDetail d) IF  bruttoQuantity(d) AND bruttoSku(d) = s AND BOM(d) = b AND order(d) = o;
        // рассчитываем куда расписать количество, которого не хватает
        lack (Sku s) <- NULL;
        LOCAL brutto = NUMERIC[16,5] (Sku);
        brutto (Sku s) <-  bruttoQuantity(s, o);

        LOCAL prevBalance = NUMERIC[16,5](Sku);
        prevBalance(Sku s) <- prevCurrentBalanceZero(s,o) WHERE (brutto(s) OR originalSubQuantity(s, o));

        //---------------
        lack (Sku s, BOM bm, Component c) <- NULL;
        LOCAL brutto = NUMERIC[16,5] (Sku, BOM, Component);
        brutto (Sku s, BOM bm, Component c) <-   GROUP SUM bruttoQuantity(ComponentDetail cd) IF bruttoSku(cd)==s AND order(cd)==o AND BOM(cd)==bm AND  component(cd)==c;
        LOCAL brutto = NUMERIC[16,5] (BOM, Component);
        brutto (BOM bm, Component c) <-   GROUP SUM bruttoQuantity(ComponentDetail cd) IF  BOM(cd)==bm AND order(cd)==o AND  component(cd)==c;

        FOR originalSubQuantity(o, Substitute sb) DO {
            originalSubQuantity(BOM bm, sb, Component c) <- PARTITION UNGROUP originalSubQuantity
                LIMIT (brutto(fromSku(sb),bm,c) (-) originalSubQuantity(bm,fromSku(sb),c)) IF use(sb,BOM(c))
                ORDER bm
                BY o,sb;
        }
        LOCAL originalSubQuantity = NUMERIC[16,5] (Sku, BOM, Component);
        originalSubQuantity(Sku s, BOM bm, Component c) <- GROUP SUM originalSubQuantity(bm,  Substitute sb, c) IF fromSku(sb)==s;

        LOCAL prevBalance = NUMERIC[16,5] (Sku, BOM, Component);
        prevBalance(Sku s, BOM bm, Component c) <- PARTITION UNGROUP prevBalance
            LIMIT (brutto(s,bm,c) (-) originalSubQuantity(s, bm,c))
            ORDER bm, c, s
            BY s;

        lack (Sku s, BOM bm, Component c) <- (brutto(s,bm,c) (-) originalSubQuantity(s, bm,c) (-) prevBalance(s, bm,c)) WHERE (brutto(s, bm,c) OR originalSubQuantity(s, bm,c));
        lack (Sku s, BOM bm, Component c) <- NULL WHERE lack(s, bm, c) <= 0.0;

        LOCAL subBalance = NUMERIC[16,5] (Substitute, BOM, Component);
        LOCAL subDateTime = DATETIME (Substitute, BOM, Component);
        LOCAL prevBalance = NUMERIC[16,5](Substitute, BOM, Component);

        prevBalance(Substitute s, BOM bm, Component c) <- prevCurrentBalanceZero(toSku(s), o) WHERE lack(fromSku(s), bm, c);
        subBalance(Substitute s, BOM bm, Component c) <- prevBalance(s, bm, c) / multiplier(s) WHERE lack(fromSku(s), bm, c);
        subDateTime(Substitute s, BOM bm, Component c) <- prevDateTimeLastOrderBatch(toSku(s), componentsStock(o)) WHERE lack(fromSku(s), bm, c);

        replaceSub (Substitute s, BOM bm, Component c) <- NUMERIC[16,5](originalSubQuantity(bm,s,c)*multiplier(s));

        FOR lack(Sku s, BOM bm, Component c)  DO {
            replaceSub (Substitute sb, bm, c) <- PARTITION UNGROUP lack
                LIMIT (subBalance(sb, bm, c) (-) replaceSubCalc(toSku(sb)) (-) brutto(toSku(sb))) IF use(sb,BOM(c))
                ORDER subDateTime(sb, bm, c), sb, bm
                BY fromSku(sb), bm, c
                WHERE fromSku(sb) = s AND NOT replaceSub(sb,bm, c) AND use(sb,BOM(c));
        }

        quantity(Substitute s, BOM bm, Component c) <- NULL;
        quantity(Substitute s, BOM bm, Component c) <- replaceSub(s,bm,c);

        // запоминаем коэффициент
        multiplier(Sku s, BOM b, Sku r, Component c) <- GROUP MAX multiplier(Substitute sb) IF quantity(sb, b, c) AND fromSku(sb) = s AND toSku(sb) = r;

        // считаем назад в единицах замен
        quantity(Sku s, BOM b, Sku r, Component c) <- NUMERIC[16,5](GROUP SUM quantity(Substitute sb, b, c) * multiplier(sb) IF fromSku(sb) = s AND toSku(sb) = r);

        // все оставшееся пойдет по обычному товару
        quantity(Sku s, BOM b, Sku r, Component c) <- quantity(s, b, c) (-) taken(s, b, c) WHERE r = s;

        // считаем общее количество по товару, который нужно списать
        toConsumePart(Sku r) <- GROUP SUM quantity(Sku s, BOM b, r, Component c);

        // Расписываем партии по FIFO
        FOR Stock st = componentsStock(o) DO {
            LOCAL balance = NUMERIC[16,5] (Batch);
            balance (Batch b) <- prevCurrentBalance(b, st) WHERE toConsumePart(prevSkuCurrentBalance(b, st)) AND dateTime(b)<dateTime(o) AND prevCurrentBalance(b, st) >0;

            toConsume(Batch b) <- PARTITION UNGROUP toConsumePart
                LIMIT balance(b)
                ORDER dateTime(b), b
                BY sku(b);
        }

        // Раскидываем партии по строкам заказа
        toConsume(Sku s, BOM b, Batch bt, Component c) <- NULL;
        FOR toConsume(Batch bt) DO {
            toConsume(Sku s, BOM b, bt, Component c ) <- PARTITION UNGROUP toConsume
                LIMIT STRICT quantity(s, b, sku(bt), c) - (OVERRIDE takenBatch(s, b, sku(bt), c), 0.0)
                ORDER s, b, c
                BY bt;
        }

        // Создаем строки по расписанным партиям
        FOR toConsume(Sku s, BOM b, Batch bt, Component c) AND NOT lastDetail(o, s, b, bt, c) ORDER b, s, dateTime(bt), bt, c NEW d = ComponentDetail DO {
            order(d) <- o;
            bruttoSku(d) <- s;
            component(d)<- c;
            product(d)<- product(s,b,c);
            BOM(d) <- b;
            substituteSku(d) <- sku(bt) IF sku(bt) != s;
            batch(d) <- bt;
        }

        LOCAL bruttoQuantity = NUMERIC[16,5] (Sku, BOM, Batch, Component);
        bruttoQuantity (Sku s, BOM bom, Batch b, Component c) <- NUMERIC[16,5](toConsume(s, bom, b, c) / (OVERRIDE multiplier(s, bom, sku(b), c), 1.0));

        // Исходное количество
        bruttoQuantity(ComponentDetail d) <- bruttoQuantity(bruttoSku(d), BOM(d), batch(d), component(d)) WHERE order(d) = o;

        // Кол-во с учетом замены
        substituteQuantity(ComponentDetail d) <- toConsume(bruttoSku(d), BOM(d), batch(d), component(d)) WHERE order(d) = o AND bruttoSku(d) != sku(batch(d));

        DELETE ComponentDetail d WHERE order(d) = o AND NOT d = lastDetail(o, bruttoSku(d), BOM(d), batch(d), component(d));

        // Добавляем компоненты, по которым нету ни одной партии
        FOR NUMERIC[16,5] q = (quantity(Sku s, BOM b, Component c) (-) originalTakenBatch(s, b, c)) IF ( IF originalTakenBatch(s, b, c) THEN q >0.00001 ELSE q > 0 )  NEW d = ComponentDetail DO {
            order(d) <- o;
            bruttoSku(d) <- s;
            component(d)<- c;
            product(d)<- product(s,b,c);
            BOM(d) <- b;
            bruttoQuantity(d) <- q;
        }

        createBatchComponentDetailOver(o);
    }
}