MODULE  PricingProductionOutput;

REQUIRE ProductionOutput, PricingSum;

NAMESPACE Production;
// ----------------  Расценка ------------------- //

@defineDocumentInterfaceHeaderPricingCommittee (output, stock);
@defineDocumentInterfaceProperty (output, createPricing, 'Создать акт расценки');

// Операция расценки
@defineDocumentInterfaceOperationPrefix (output, pricing, Pricing, ' (расценка)');

@defineDocumentInterfaceDetailPricePrefix(output, supplier, ' входная');
supplierPrice(UserOutputDetail detail) <- componentsPrice(productDetail(detail))
    WHEN CHANGED(productDetail(detail));

@defineDocumentInterfaceDetailDataSumPrefix (output, supplier, ' входная');

@deriveDocumentDetailSumPrefix(userOutput, supplier, currency, quantity);

@defineDocumentHeaderSumCustomPrefix (output, outputDetail, supplier,' входная');

@defineDocumentInterfaceDetailPricePrefix(output, retail, ' выходная');
retailPrice(UserOutputDetail detail) <- price(productDetail(detail))
                  WHEN CHANGED(productDetail(detail));
@defineDocumentInterfaceDetailVAT(output, countryStock, retail, );
valueRetailVAT(UserOutputDetail detail) <- valueVAT(productDetail(detail))
                  WHEN CHANGED(productDetail(detail));


@defineDocumentInterfaceDetailMarkupPrefix (output, retail, );
@defineDocumentInterfaceDetailDataSumPrefix (output, retail, ' выходная');
@deriveDocumentDetailSumPrefix(userOutput, retail, currency, quantity);

@defineDocumentInterfaceHeaderSumPrefix (output, retail, ' выходная');

@defineDocumentInterfaceDetailVATDataSumPrefix (output, retail, ' розничная');
@defineDocumentInterfaceDetailMarkupSumPrefix (output, retail);

VATMarkupSum 'НДС и надбавка' (UserOutputDetail userOutputDetail) =  retailSum(userOutputDetail) (-) supplierSum(userOutputDetail);

retailVATSum(UserOutputDetail userOutputDetail) <- round([ X*Y/(100+Y)](VATMarkupSum(userOutputDetail), valueRetailVAT(userOutputDetail)), currency(userOutputDetail))
        WHEN CHANGED(VATMarkupSum(userOutputDetail)) OR
             CHANGED(valueRetailVAT(userOutputDetail)) OR
             CHANGED(currency(userOutputDetail));

retailMarkupSum (UserOutputDetail userOutputDetail) <- VATMarkupSum(userOutputDetail) (-) retailVATSum(userOutputDetail)
        WHEN CHANGED(VATMarkupSum(userOutputDetail)) OR
             CHANGED(retailVATSum(userOutputDetail));

retailMarkup(UserOutputDetail userOutputDetail) <-[ round2(X*100/Y)](retailMarkupSum(userOutputDetail),supplierSum(userOutputDetail))
        WHEN CHANGED(retailMarkupSum(userOutputDetail)) OR
             CHANGED(supplierSum(userOutputDetail));

@defineDocumentInterfaceHeaderSumPrefix (output, retailMarkup, ' надбавки');
@defineDocumentInterfaceHeaderSumPrefix (output, retailVAT, ' НДС');

//-- агр.расценка на основе заказа
@defineDocumentHeaderProperty (order, createPricing, 'Создать акт расценки');
@defineDocumentOperationHeaderPrefix(order, pricing, Pricing, ' (расценка)');
@defineDocumentOperationDetailPrefix(order, productDetail, pricing, Pricing, ' (расценка)');
@defineDocumentOperationDetailPrefix(order, componentDetail, pricing, Pricing, ' (расценка)');

@defineOperationProperty(createPricing, 'Создать акт расценки', createContainer);
@deriveDocumentOperationProperty(Order, createPricing);
@defineDocumentOperationHeaderPrefix(operation, pricing, Pricing, ' (расценка)');
EXTEND FORM operation
    PROPERTIES(o)namePricingOperation AFTER createPricing(o)
;
DESIGN operation {
    createContainer {
        MOVE PROPERTY(namePricingOperation(o));
    }
}
pricingOperation (Order o) <- pricingOperation(operation(o))
    WHEN CHANGED(operation(o));

backgroundRetail 'Цвет' (Order order) = RGB(224, 255, 255) IF order IS Order;
backgroundRetail 'Цвет' = ABSTRACT CASE COLOR(ProductDetail);
backgroundRetail(ProductDetail d) += WHEN d IS ProductDetail THEN backgroundRetail(order(d));

@defineDocumentHeaderPricingCommittee(order, componentsStock, );

//-- Свойства для агрегированных производств/расценок
useRoundPriceTest = DATA BOOLEAN ();
roundPriceCalc(ProductDetail d) = OVERRIDE roundPrice(d) IF useRoundPriceTest(), defaultRound(currency(d)); 
componentsSum 'Сумма компонентов произведенного изделия' (ProductDetail productDetail) = NUMERIC[18,4](round((componentsPrice(productDetail)*outputQuantity(productDetail)),roundPriceCalc(productDetail)));
costSum 'Сумма себестоимости произведенного изделия' (ProductDetail productDetail) = NUMERIC[18,4](round((costPrice(productDetail)*outputQuantity(productDetail)),roundPriceCalc(productDetail)));
VATMarkupSum 'НДС и надбавка' (ProductDetail productDetail) =  NUMERIC[18,4](outputProductsSum(productDetail) (-) componentsSum(productDetail));
retailVATSum 'Сумма НДС' (ProductDetail productDetail) = NUMERIC[18,4](round([ X*Y/(100+Y)](VATMarkupSum(productDetail), valueVAT(productDetail)), roundPriceCalc(productDetail)));
retailMarkupSum 'Сумма надбавки' (ProductDetail productDetail) = NUMERIC[18,4](VATMarkupSum(productDetail) (-) retailVATSum(productDetail));
retailMarkup 'Надбавка, %'(ProductDetail productDetail) = NUMERIC[8,3]([ round2(X*100/Y)](retailMarkupSum(productDetail), componentsSum(productDetail)));

//--  если стоит галочка isVATOrder
retVATSum 'Сумма НДС' (ProductDetail productDetail) = NUMERIC[18,4](round([ X*Y/(100+Y)](outputProductsSum(productDetail), valueVAT(productDetail)), roundPriceCalc(productDetail)));
retMarkupSum 'Сумма надбавки' (ProductDetail productDetail) = NUMERIC[18,4](round(outputProductsSum(productDetail) (-) retVATSum(productDetail) (-) componentsSum(productDetail), roundPriceCalc(productDetail)));
retMarkup 'Надбавка, %'(ProductDetail productDetail) = NUMERIC[8,3]([ round2(X*100/Y)](retMarkupSum(productDetail), componentsSum(productDetail)));

overVATSum 'Сумма НДС' (ProductDetail d) = IF addVAT(d) THEN retVATSum(d) ELSE retailVATSum(d);
overMarkupSum 'Сумма надбавки' (ProductDetail d) = IF addVAT(d) THEN retMarkupSum(d) ELSE retailMarkupSum(d);
overMarkupExtra (ProductDetail d) = ABSTRACT NUMERIC[8,3](ProductDetail);
overMarkup 'Надбавка, %' (ProductDetail d) = IF addVAT(d) THEN retMarkup(d) ELSE (OVERRIDE overMarkupExtra(d), retailMarkup(d));

pricingCommittee(OrderOutput output) += pricingCommittee(order(output));
dataFormedMan(OrderOutput output) += dataFormedMan(order(output));
dataCheckedMan (OrderOutput output) += dataCheckedMan(order(output));
dataLabeledMan (OrderOutput output) += dataLabeledMan(order(output));
dataAccountantMan (OrderOutput output) += dataAccountantMan(order(output));
dataHeadMan (OrderOutput output) += dataHeadMan(order(output));     

createPricing(OrderOutput output) += createPricing(order(output));
pricingOperation(OrderOutput output) += pricingOperation(order(output));


//переопределение цены поставщика по производственному заказу
@defineOperationProperty(componentsPriceSupplierPriceLedger, 'Цена пост. из цены компонентов' , paramsContainer);

componentsPriceSupplierPriceLedger 'Цена пост. из цены компонентов' = DATA BOOLEAN (Order);
componentsPriceSupplierPriceLedger = componentsPriceSupplierPriceLedger(order(productDetail(OrderOutputDetail outputDetail)));

@deriveDocumentOperationProperty(order, componentsPriceSupplierPriceLedger);

EXTEND FORM order
    PROPERTIES (o) componentsPriceSupplierPriceLedger
;    

DESIGN order {
    options2 {
        MOVE PROPERTY(componentsPriceSupplierPriceLedger(o));
    }    
}

supplierPrice(OrderOutputDetail outputDetail) += 
    IF componentsPriceSupplierPriceLedger(outputDetail) 
        THEN componentsPrice(productDetail(outputDetail))
        ELSE costPrice(productDetail(outputDetail));
        
supplierSum(OrderOutputDetail outputDetail) += 
    IF componentsPriceSupplierPriceLedger(outputDetail) 
        THEN componentsSum(productDetail(outputDetail))
        ELSE costSum(productDetail(outputDetail));

valueRetailVAT(OrderOutputDetail outputDetail) += valueVAT(productDetail(outputDetail));
retailMarkup(OrderOutputDetail outputDetail) += overMarkup(productDetail(outputDetail));
retailVATSum(OrderOutputDetail outputDetail)+= overVATSum(productDetail(outputDetail));
retailMarkupSum(OrderOutputDetail outputDetail) += overMarkupSum(productDetail(outputDetail));
retailPrice(OrderOutputDetail outputDetail) += price(productDetail(outputDetail));
retailSum(OrderOutputDetail outputDetail) += outputProductsSum(productDetail(outputDetail));

EXTEND FORM order
    PROPERTIES(o)  BACKGROUND backgroundRetail(o) createPricing, namePricingOperation SHOWIF createPricing(o),
                   namePricingCommittee SHOWIF createPricing(o)
    PROPERTIES(pd) BACKGROUND backgroundRetail(pd) SHOWIF createPricing(o) READONLY BEFORE outputProductsSum(pd)
                   componentsSum, overMarkup, overMarkupSum, overVATSum
;
DESIGN order {
    options1 {
        NEW headerRow13 {
            caption = 'Расценка';
            horizontal = TRUE;
            MOVE PROPERTY(createPricing(o));
            MOVE PROPERTY(namePricingOperation(o));
            MOVE PROPERTY(namePricingCommittee(o));
        }
    }
}

EXTEND FORM orders
    PROPERTIES(pd) BACKGROUND backgroundRetail(pd) SHOWIF createPricing(o) READONLY BEFORE outputProductsSum(pd)
                   componentsSum, overMarkup, overMarkupSum, overVATSum
;


//-- агр.расценка на основе производства

backgroundRetail 'Цвет' (Output output) = RGB(224, 255, 255) IF output IS Output;

EXTEND FORM userOutput
    PROPERTIES(o)  BACKGROUND backgroundRetail(o) createPricing, namePricingOperation SHOWIF createPricing(o),
                   namePricingCommittee SHOWIF createPricing(o)

    PROPERTIES (d) BEFORE deleted SHOWIF createPricing(o) BACKGROUND backgroundRetail(o)
                   supplierPrice, supplierSum, retailMarkup, retailMarkupSum,
                   valueRetailVAT, retailVATSum, retailPrice, retailSum
;
DESIGN userOutput {
    headerRow12 {
        NEW headerRow121 BEFORE headerRow122 {
            caption = 'Расценка';
            horizontal = TRUE;
            MOVE PROPERTY(createPricing(o));
            MOVE PROPERTY(namePricingOperation(o));
            MOVE PROPERTY(namePricingCommittee(o));
        }
    }
}

EXTEND FORM outputs
    PROPERTIES(d) READONLY SHOWIF createPricing(o) BACKGROUND backgroundRetail(o) supplierPrice, supplierSum, retailMarkup, retailMarkupSum,
                  valueRetailVAT, retailVATSum, retailPrice, retailSum
;

CLASS OutputPricing 'Акт расценки на основе производства' : Pricing;
CLASS OutputPricingDetail 'Строка акта расценки на основе производства' : PricingDetail;

@defineDocumentTables(outputPricing);

@defineDocumentAggregation(output, outputPricing, createPricing);

printPricing 'Акт расценки' (Output output)  { print(outputPricing(output)); } IMAGE 'print.png' IN print;
EXTEND FORM outputs
    PROPERTIES(o)  printPricing SHOWIF createPricing(o)
;
DESIGN outputs {printTab { MOVE GROUP(print,o) {align = START;}}}

pricing(OutputPricingDetail detail) += outputPricing(detail);

index(OutputPricingDetail detail) += index(detail);

date(OutputPricing pricing) += date(pricing);
time(OutputPricing pricing) += time(pricing);


departmentStore(OutputPricing pricing) += stock(output(pricing)) AS DepartmentStore;

supplier(OutputPricing pricing) += legalEntityStock(output(pricing));

@defineDocumentAggregationPosted(output, outputPricing);
isPosted(OutputPricing pricing) += isPosted(pricing);

@defineDocumentAggregationClosed(output, outputPricing);
isClosed(OutputPricing pricing) += isClosed(pricing);

number 'Номер документа' (OutputPricing outputPricing) = number(output(outputPricing));
number(OutputPricing pricing) += number(pricing);
series 'Серия документа' (OutputPricing outputPricing) = series(output(outputPricing));
series(OutputPricing pricing) += series(pricing);
seriesNumber 'Серия/номер документа' (OutputPricing outputPricing) = seriesNumber(output(outputPricing));


note(OutputPricing pricing) += note(output(pricing));
currency (OutputPricing pricing) += currency(output(pricing));
pricingCommittee(OutputPricing pricing) += pricingCommittee(output(pricing));
dataFormedMan (OutputPricing pricing) += dataFormedMan(output(pricing));
dataCheckedMan (OutputPricing pricing) += dataCheckedMan(output(pricing));
dataLabeledMan (OutputPricing pricing) += dataLabeledMan(output(pricing));
dataAccountantMan (OutputPricing pricing) += dataAccountantMan(output(pricing));
dataHeadMan (OutputPricing pricing) += dataHeadMan(output(pricing));  

operation(OutputPricing pricing) += pricingOperation(output(pricing));

@defineDocumentDescription(outputPricing, OutputPricingDetail, 'Акт расценки на основе производства');
description (OutputPricing pricing) += description(pricing);

sku(OutputPricingDetail pricingDetail) += sku(outputDetail(pricingDetail));
batch(OutputPricingDetail pricingDetail) += outputDetail(pricingDetail);
quantity(OutputPricingDetail pricingDetail) += quantity(outputDetail(pricingDetail));

show[PricingDetail](OutputPricingDetail d) + {  show(outputDetail(d)); }

//-------------------------- Ценовые характеристики------------------------------------------
@defineDocumentAggregationDetailProperty (output, outputPricing, supplierPrice, 'Цена входная');
price(OutputPricingDetail pricingDetail) += supplierPrice(pricingDetail);
@defineDocumentAggregationDetailProperty (output, outputPricing, supplierSum, 'Сумма входная');
sum(OutputPricingDetail pricingDetail) += supplierSum(pricingDetail);

@defineDocumentAggregationDetailProperty (output, outputPricing, retailPrice, 'Цена выходная');
retailPrice(OutputPricingDetail pricingDetail) += retailPrice(pricingDetail);
@defineDocumentAggregationDetailProperty (output, outputPricing, retailSum, 'Сумма выходная');
retailSum(OutputPricingDetail pricingDetail) += retailSum(pricingDetail);

@defineDocumentAggregationDetailProperty (output, outputPricing, retailMarkup, 'Надбавка');
retailMarkup(OutputPricingDetail pricingDetail) += retailMarkup(pricingDetail);
@defineDocumentAggregationDetailProperty (output, outputPricing, retailMarkupSum, 'Сумма надбавки');
retailMarkupSum(OutputPricingDetail pricingDetail) += retailMarkupSum(pricingDetail);

@defineDocumentAggregationDetailProperty (output, outputPricing, valueRetailVAT, 'НДС, %');      // пока только значение ставки, без самой шкалы.!!!!!
valueRetailVAT(OutputPricingDetail pricingDetail) += valueRetailVAT(pricingDetail);
@defineDocumentAggregationDetailProperty (output, outputPricing, retailVATSum, 'Сумма НДС');
retailVATSum(OutputPricingDetail pricingDetail) += retailVATSum(pricingDetail);

edit (OutputPricingDetail d)+ {  edit(outputDetail(d)); }

edit (OutputPricing p)+ {  edit(output(p)); }
//--
quantity (output, outputPricing) = GROUP SUM quantity(outputDetail(OutputPricingDetail detail)) BY output(outputDetail(detail)), outputPricing(detail);

outputs 'Документы производства' (OutputPricing outputPricing) = GROUP
                                                CONCAT STRING[255](description(Output output)) IF quantity (output, outputPricing) , ', '
                                                ORDER output CHARWIDTH 30 MATERIALIZED;
//descriptionDocumentPricing(pricing) += outputsOutputPricing(pricing);
//EXTEND FORM pricings
//    PROPERTIES(p)  outputsOutputPricing
//;

printPricing 'Акт расценки' (Order order)  { printPricing(orderOutput(order)); } IMAGE 'print.png' IN print;

EXTEND FORM orders
    PROPERTIES(o)  printPricing SHOWIF createPricing(o)
;
DESIGN orders {printTab { MOVE GROUP(print,o) {align = START;}}}

priceB 'Розничная цена (до)' (ProductDetail d) = prevRetailPricingPriceB(sku(d), productsStock(d), dateTime(d));

backgroundPriceB (ProductDetail d) = CASE 
    WHEN priceB(d) > price(d) THEN RGB(250,150,150)
    WHEN priceB(d) < price(d) THEN RGB(150,250,200);
    
EXTEND FORM order
    PROPERTIES (pd) READONLY BEFORE deletepd priceB BACKGROUND backgroundPriceB(pd) SHOWIF createPricing(o)
;

