MODULE ProductionOrderWorkshopSku;

REQUIRE ProductionOrderSku, ProductionOrderWorkshop;

NAMESPACE Production;

TABLE inWorkshop(ItemGroup,Order);
inWorkshop 'Вкл' = DATA BOOLEAN (ItemGroup, Order);
nameInWorkshopGroups 'Группы товаров' (Order o) = GROUP CONCAT name(ItemGroup g) IF inWorkshop(g,o),', ' ORDER name(g),g;
countInWorkshopGroups 'Вкл' (Order o) = GROUP SUM 1 IF inWorkshop(ItemGroup g, o);       

resetInWorkshopGroups  'Сбросить отмеченные'(Order o)  { 
    inWorkshop(ItemGroup g, o) <- NULL WHERE g IS ItemGroup ;    
}  

inWorkshop (Item i, Order o)= GROUP SUM 1 IF isParent(ItemGroup g, i) AND inWorkshop(g,o);

WHEN LOCAL CHANGED(workshopStock(Order o)) AND NOT (GROUP SUM 1 IF CHANGED (inWorkshop(ItemGroup g,o))) DO {
    inWorkshop(ItemGroup g,o)<- inWorkshop(g,workshopStock(o));
}

showWorkshopGroup (Order o) = workshopStock(o) AND (id(operation(o))=='storeProduction' OR id(operation(o))=='KulinarProd' );

toWorkshopStock 'Записать группы в цех' (Order o) {
    IF workshopStock(o) THEN {
        LOCAL NESTED st = Stock();
        LOCAL NESTED incl = BOOLEAN (ItemGroup);
            st() <- workshopStock(o);
            incl(ItemGroup g)<- TRUE IF inWorkshop(g,o);
        NEWSESSION {
            inWorkshop(ItemGroup g, st()) <- TRUE IF  incl(g);      
            APPLY;
            IF NOT canceled() THEN {
                MESSAGE 'Группы записаны' NOWAIT;    
            }
        }
    } ELSE {
        MESSAGE 'Не задан цех';
    }
}

EXTEND FORM order
    PROPERTIES nameInWorkshopGroups(o)
    TREE skuTree22 sk22 = SkuGroup PARENT parent(sk22)
    PROPERTIES READONLY order(sk22), id(sk22), name(sk22)
    PROPERTIES inWorkshop(sk22,o)
    ORDERS order(sk22), name(sk22)
    PROPERTIES (o) resetInWorkshopGroups TOOLBAR DRAW sk22 SHOWIF countInWorkshopGroups(o)
    PROPERTIES toWorkshopStock(o) TOOLBAR DRAW sk22 SHOWIF countInWorkshopGroups(o)
    FILTERGROUP inactive2 FILTER 'Активные' active(sk22) 'F6' DEFAULT     
;
DESIGN order {
    specificationBox{
        NEW workshopGroup{
            type = CONTAINERV;
            showIf = showWorkshopGroup(o);
            caption = 'Группы товаров (цех)';      
            NEW panelWorkshopGroup{
                MOVE PROPERTY(nameInWorkshopGroups(o));
            }
            MOVE BOX(TREE skuTree22);                                                                
        }  
    }
}


fillNegativeBalanceWorkshopProductDetail 'Заполнить изделия по остаткам' (Order o) {
    FOR balanceA(Sku sk, productsStock(o), date(o)) < 0 AND inWorkshop(sk,o)  DO NEW d = ProductDetail {
        order(d) <- o;
        sku(d) <- sk;
        quantity(d) <- abs(balanceA(sk, productsStock(o), date(o)));
        product(d) <- GROUP MAX Product p IF isActive(BOM(p)) AND in(BOM(p), componentsStock(o)) AND sku(p) == sk;
    }        
}

@defineOperationProperty(showFillNegativeBalance, 'Показывать кнопку добавления строк с отриц. остатком', BOOLEAN, showContainer);

EXTEND FORM order PROPERTIES fillNegativeBalanceWorkshopProductDetail(o) SHOWIF showFillNegativeBalance(operation(o)) DRAW pd TOOLBAR;