MODULE  Menu;

REQUIRE Stock,
        Sku,
        StockSkuDocument,
        Numerator,
        Barcode,
        Document,
        PriceListType,
        Manufacturing,
        ProductionOperation,
        Utils;
PRIORITY Production;
NAMESPACE Menu;
        
//------------------------------Меню--------------------------------//        

CLASS ABSTRACT Menu 'Меню';
CLASS ABSTRACT MenuDetail 'Строка меню';

CLASS UserMenu 'Меню (польз.)' : Menu;
CLASS UserMenuDetail 'Строка меню (польз.)' : MenuDetail;

@defineDocumentInterface(menu);
@deriveDocumentHeaderTimePrefix(UserMenu, );

@defineDocumentInterfaceNumber(menu, BPSTRING[2]);
@defineNumeratedDefault(UserMenu, 'Меню', 'МЮ');

@defineDocumentInterfaceDataStock(menu, stock, 'Склад', );
@defineDocumentDialogStocks(userMenu, stock, company, , );

@defineDocumentInterfacePosted(menu);
@defineDocumentInterfaceClosed(menu);

//@defineDocumentClosed (menu);

@defineDocumentInterfaceDescription(menu, 'Меню');

@defineDocumentInterfaceCurrency(menu);
@deriveDocumentCurrency(userMenu, stock);

@defineDocumentInterfaceDetailSku(menu, sku);

@defineDocumentInterfaceDetailPrice(menu); // объявляем цену

@defineDocumentInterfacePriceListType(menu); // объявляем вид цены
priceListType(UserMenuDetail detail) <- priceListType(userMenu(detail)) WHEN CHANGED(priceListType(userMenu(detail)));
@deriveDocumentDetailPricePriceListTypeCustom (userMenuDetail, stock); // записываем цену

composition 'Состав' = ABSTRACT STRING[2550] (MenuDetail) CHARWIDTH 30;
composition 'Состав' = DATA STRING[2550] (UserMenuDetail) CHARWIDTH 30;
composition(UserMenuDetail detail)+= composition(detail);
composition(UserMenuDetail detail) <-  STRING[2550](composition(sku(detail))) WHEN CHANGED(sku(detail));

groupType = ABSTRACT GroupType (Menu);
nameGroupType 'Тип классификатора' (Menu menu) = name(groupType(menu));

groupType = DATA GroupType (UserMenu);
nameGroupType 'Тип классификатора' (UserMenu userMenu) = name(groupType(userMenu)) IN documentPrm;
groupType(UserMenu menu) += groupType(menu);

productYield 'Выход' = ABSTRACT STRING[100] (MenuDetail) CHARWIDTH 20;
productYield 'Выход' = DATA STRING[100] (UserMenuDetail) CHARWIDTH 20;
productYield(UserMenuDetail detail)+= productYield(detail);

// --------------------------- Формы Меню ---------------------------------
count 'Количество позиций в группе' (userMenu,group)= GROUP SUM 1
    BY userMenu(UserMenuDetail detail), group(groupType(userMenu(detail)), sku(detail));
count 'Количество позиций в группе' (menu,group)= GROUP SUM 1
    BY menu(MenuDetail detail), group(groupType(menu(detail)), sku(detail));

hasParent 'Количество позиций в группе' (UserMenu userMenu, Group group)=  GROUP SUM count(userMenu,Group child)
    IF isParent(child, group);
hasParent 'Количество позиций в группе' (Menu menu, Group group)=  GROUP SUM count(menu,Group child)
    IF isParent(child, group);

is (UserMenuDetail detail, Group group)= group(groupType(userMenu(detail)), sku(detail))==group;
is (MenuDetail detail, Group group)= group(groupType(menu(detail)), sku(detail))==group;

TABLE menuDetailGroup(MenuDetail, Group);
positionNumber 'Порядок' = ABSTRACT INTEGER (MenuDetail, Group);
positionNumber 'Порядок' = DATA INTEGER (UserMenuDetail, Group);
positionNumber(UserMenuDetail detail, Group group) += positionNumber(detail, group);

TABLE menuGroup(Menu, Group);
positionNumber 'Порядок' = ABSTRACT INTEGER (Menu, Group);
positionNumber 'Порядок' = DATA INTEGER (UserMenu, Group);
positionNumber(UserMenu menu, Group group) += positionNumber(menu, group);
//--
hasParentUser 'Количество позиций в группе' (Group child, Group group)=  GROUP SUM count(UserMenu userMenu,child)
    IF isParent(child, group);
hasParent 'Количество позиций в группе' (Group child, Group group)=  GROUP SUM count(Menu menu,child)
    IF isParent(child, group);

hasParentUser (UserMenuDetail detail,Group group)= hasParentUser(group(groupType(userMenu(detail)), sku(detail)), group);
hasParent (MenuDetail detail,Group group)= hasParent(group(groupType(menu(detail)), sku(detail)), group);

//---------------------------Формы----------------------------//

FORM userMenu 'Меню'
    OBJECTS m = UserMenu PANEL
    PROPERTIES (m) isPosted, nameGroupType, nameStock ON CHANGE changeStockCompany(m), nameNumerator, number, series, date, time,
                   nameCurrency, namePriceListType, note, countUserMenuDetail


    OBJECTS d = UserMenuDetail
    PROPERTIES (d) index, idBarcodeSku, nameSku, shortNameUOMSku, namePriceListType,
                   price, composition, productYield, NEW, DELETE GRID

    PROPERTIES(m) DRAW d deleteUserMenuDetail

    FILTERS userMenu(d) == m


    TREE tGroup g=Group PARENT parent(g)
    PROPERTIES READONLY name(g)
    PROPERTIES(m,g) hasParent, positionNumber
    FILTERS groupType(g) == groupType(m),
            hasParent(m,g)
    ORDERS positionNumber(m,g)
    FILTERGROUP inactive FILTER 'Активные' active(g) 'F6' DEFAULT

    OBJECTS dd = UserMenuDetail
    PROPERTIES (dd) idBarcodeSku, nameSku, price, composition,
                    productYield

    PROPERTIES (dd,g) positionNumber
    FILTERS  is(dd,g),
             userMenu(dd) == m
    ORDERS positionNumber(dd,g)


    EVENTS
        ON OK prePost(m)

    HINTTABLE LIST dateTime[UserMenuDetail], sku[UserMenuDetail],stock[UserMenuDetail],
                   priceListType[UserMenuDetail], currency[UserMenuDetail], price[UserMenuDetail]

    EDIT UserMenu OBJECT m
;

DESIGN userMenu {

    BOX {
        size = (1024, 768);
        NEW specificationBox BEFORE TOOLBARBOX{
            fill = 1;
            tabbed = TRUE;
            MOVE BOX(d) {
                fill = 1;
                caption = 'Спецификация';
            }
            NEW treeContainer{
                caption = 'Группировка';
                horizontal = TRUE;

                MOVE BOX(TREE tGroup);
                MOVE BOX(dd) {
                    fill = 2;
                }
            }
        }

        NEW headerBox BEFORE specificationBox {
            horizontal = TRUE;

            NEW headerRow1 {
                MOVE GROUP(documentHeader,m) {                                       
                    lines = 1;
                    NEW first {
                        horizontal = TRUE;
                        MOVE PROPERTY(isPosted(m)) { charWidth = 30; }
                        MOVE PROPERTY(nameStock(m));
                    }
                    NEW second { 
                        horizontal = TRUE;
                        MOVE PROPERTY(nameNumerator(m));
                        MOVE PROPERTY(number(m));
                        MOVE PROPERTY(series(m));
                        MOVE PROPERTY(date(m));
                        MOVE PROPERTY(time(m));
                    }                                                               
                }
                MOVE GROUP(documentPrm,m) {
                    lines = 3;
                }

            }
            MOVE GROUP(documentSum,m) {
                lines = 1;
            }
        }

        PROPERTY(formOk()) {
            caption = 'Провести';
        }
    }
}

@defineDocumentSkuStockIn(userMenu, sku, stock);
@extendFormDocumentSkuStockIn(UserMenu, userMenu, m);

isUserOpened(UserMenu m)=  isOpened[Menu](m) AND is(m);

copy 'Копировать'(UserMenu userMenu)  { 
	NEWSESSION {
	    NEW m = UserMenu {
	        stock(m) <- stock(userMenu);
	        currency(m) <- currency(userMenu);
	        priceListType(m) <- priceListType(userMenu);
	        note(m) <- note(userMenu);
	        groupType(m) <- groupType(userMenu);
	        FOR positionNumber(userMenu,Group group) DO {
	            positionNumber(m,group) <- positionNumber(userMenu,group);
	        }
	        FOR userMenu(UserMenuDetail userMenuDetail) == userMenu DO {
	            NEW d=UserMenuDetail {
	                userMenu(d) <- m;
	                sku(d) <- sku(userMenuDetail);
	                composition(d) <- composition(userMenuDetail);
	                productYield(d) <- productYield(userMenuDetail);
	                FOR positionNumber(userMenuDetail,Group group) DO {
	                    positionNumber(d,group) <- positionNumber(userMenuDetail,group);
	                }
	            }
	
	        }
	
	
	        SHOW userMenu OBJECTS m = m DOCKED;
	    }
	}
} TOOLBAR;




FORM menus 'Меню'
    OBJECTS m = Menu
    PROPERTIES (m) READONLYIF isReadonly() isClosed, isPosted, number, series, date, time,
                   nameStock, nameCurrency, namePriceListType
    PROPERTIES (m) READONLY countMenuDetail
    PROPERTIES (m) READONLYIF isReadonly() note

    PROPERTIES (m) READONLY PANEL createdNameUser, createdTime, createdHostnameComputer, 
                                        postedNameUser, postedTime, postedHostnameComputer

    PROPERTIES (m) NEWSESSION NEW[UserMenu], EDIT SHOWIF isOpened(m)
    PROPERTIES (m) copy
    PROPERTIES (m) close[UserMenu] SHOWIF isOpened[UserMenu](m), open SHOWIF isClosed[UserMenu](m)    
    PROPERTIES     NEWSESSION deletem=DELETE(m) SHOWIF isUserOpened(m)
    OBJECTS d=MenuDetail
    PROPERTIES (d) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku
    PROPERTIES (d) READONLY namePriceListType, price, composition, productYield

    FILTERS menu(d) == m

    LIST Menu OBJECT m
;
@extendFormFilterAccessStock(Menu, m, menus, stock, company);

DESIGN menus {
    NEW documentContainer BEFORE TOOLBARBOX {
        fill = 1;

        MOVE BOX(m) {
            fill = 1;
        }

        NEW documentDetail {
            tabbed = TRUE;
            fill = 1;

            MOVE BOX(d) {
                fill = 1;
                caption = 'Спецификация';

            }
            NEW documentHistory {
                caption = 'История';

                MOVE GROUP(created,m);
                MOVE GROUP(posted,m);
            }
            NEW printTab {
                caption = 'Печатные формы';
            }
        }
    }
}
@extendFormEditable(menus);
@defineFilterIsOpened (menu, menus, m);
////----------------------------------------------- Операции -----------------------------------------------------//

groupType = DATA GroupType (Operation);
nameGroupType 'Тип классификатора' (Operation operation) = name(groupType(operation));

menuPriceListType = DATA PriceListType (Operation);
nameMenuPriceListType 'Вид цен (меню)' (Operation operation) = name(menuPriceListType(operation));

EXTEND FORM operation
    PROPERTIES(o) nameGroupType, nameMenuPriceListType
;
DESIGN operation{
    paramsContainer {
        NEW menu {
            caption = 'Меню';
            MOVE PROPERTY(nameGroupType(o));
            MOVE PROPERTY(nameMenuPriceListType(o));
        }
    }
}

@defineDocumentOperationContainer(menu, m);
@defineDocumentOperationRole(userMenu);
@deriveDocumentOperationProperty(userMenu, groupType);
priceListType (UserMenu o) <- menuPriceListType(operation(o))
    WHEN CHANGED(operation(o));

NAVIGATOR {
    manufacturingDocuments 'Документы' {
        NEW menus;
    }
}

isMenu 'Меню' = DATA BOOLEAN (GroupType);
EXTEND FORM customGroupType
    PROPERTIES (t) isMenu
;

EXTEND FORM customGroupTypes
    PROPERTIES (t) READONLY isMenu
;

@defineOperationProperty(checkMenuGroupType, 'Тип классификатор меню должен быть с признаком "Меню"', constraintContainer);

DESIGN operation{
    menu {
        MOVE PROPERTY(checkMenuGroupType(o));
    }
}

CONSTRAINT (SETCHANGED(operation(UserMenu u)) OR SETCHANGED (groupType(u))) AND groupType(u) AND checkMenuGroupType(operation(u)) AND NOT isMenu(groupType(u))
    CHECKED BY groupType[UserMenu]
        MESSAGE 'Тип классификатор меню должен быть с признаком "Меню"';
//--Удалить, со временем. Пока оставлено для миграции
menuNumber 'Порядок (меню)' = DATA INTEGER (Group);
//
//isMenu 'Меню' (CustomGroup g) = isMenu(customGroupType(g));
//
//EXTEND FORM customGroup
//    PROPERTIES (g) menuNumber SHOWIF isMenu(g)
//;
//EXTEND FORM customGroups
//    PROPERTIES (g) READONLY menuNumber SHOWIF isMenu(g)
//;

WHEN LOCAL CHANGED(groupType(UserMenu u)) DO {
    positionNumber(u,Group g)<- (order(g) IF groupType(g)==groupType(u)) WHERE NOT CHANGED (positionNumber(u,g));
}
