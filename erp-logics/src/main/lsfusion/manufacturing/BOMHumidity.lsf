MODULE BOMHumidity;

REQUIRE ItemHumidity, BOMNutrition;


// ------------------------------------------------------------------- //
GROUP humidity 'Влажность' : base;

showHumidity 'Отображать влажность' = DATA BOOLEAN(BOM) IN documentPrm;

percentHumidity 'Влажность, %' = DATA NUMERIC[8,2] (Product) IN itemHumidity;

dataPercentDryness = DATA NUMERIC[12,2] (Product);
percentDryness 'Массовая доля сухих веществ, %' (Product p) = OVERRIDE dataPercentDryness(p),
    (100 - (OVERRIDE percentHumidity(p), 0 IF p IS Product)) IN itemHumidity; 
percentHumidityItem 'Влажность, % (товар)' (Product p) = percentHumidity(sku(p));
percentDrynessItem 'Массовая доля сухих веществ, % (товар)' (Product p) = percentDryness(sku(p));

overCopy (BOM from, BOM to) + { 
    showHumidity(to) <- showHumidity(from);
}
overCopy (Product to, Product from) + { 
    percentHumidity(to) <- percentHumidity(from);       
}

// Влажность изделия
//percentHumidity 'Влажность, %' (Product p) = percentHumidity(sku(p)) IN itemHumidity;
//@changeNutrition(product, sku, percentHumidity)
changePercentHumidity(Product product)   {
    INPUT n = NUMERIC[8,2] DO {
        percentHumidity(product) <- n;
        dataPercentDryness(product) <- NULL;
    }
}

//percentDryness 'Массовая доля сухих веществ, %' (Product p) = percentDryness(sku(p)) IN itemHumidity;
changePercentDryness(Product product)   { 
    INPUT n = NUMERIC[8,2] DO {
        percentHumidity(product) <- NUMERIC[8,2](100 - n);
        dataPercentDryness(product) <- NULL;
    }
}

// Влажность компонент
percentHumidity 'Влажность, %' (Component component) = percentHumidity[Item](sku(component));
@changeNutrition(component, sku, percentHumidity);
percentDryness 'Массовая доля сухих веществ, %' (Component component) = percentDryness[Item](sku(component)) IN itemHumidity;     
changePercentDryness(Component component)   { 
    INPUT n = NUMERIC[8,2] DO
        percentHumidity(Item item) <- (100-n) WHERE item == sku(component);
}                                           
                                              
//------------------------- Производственная рецептура --------------------------//

overBruttoQuantity 'Выход полуфабрикатов' (Component c,DATE dt)=bruttoQuantity(c,dt)* (OVERRIDE overNetWeight(c), 1.0 IF c IS Component);

// -- по всей спецификации

recBruttoDrynessQuantity 'В сухих веществах' (BOM BOM, Item sku, DATE date)= recBruttoQuantity (BOM, sku, date) *
    (OVERRIDE netWeight(sku), 1.0 IF sku IS Sku) *
    percentDryness(sku)/100;

quantity 'Кол-во для компонента, если он полуфабрикат' (Component component, Sku sku, DATE date)= recBruttoQuantity (BOM(material(component)), sku, date) *
    bruttoQuantity(component, date)/
    (quantity[Product](material(component)) IF quantity[Product](material(component))!=0) *
    (OVERRIDE netWeight[Item](sku), 1.0 IF sku IS Sku)
    ;
quantityBom 'Кол-во по спец. для полуфабрикатов' (BOM, Sku sku, DATE date) = GROUP SUM quantity(Component component, sku, date) BY BOM(component);
quantity 'Итого сырья на полуфабрикаты' (Component component, DATE date) = GROUP SUM quantity(component, Sku sku, date);

drynessQuantityBom 'Кол-во по спец. для полуфабрикатов в сухих веществах'= quantityBom(BOM BOM, Item sku, DATE date)*percentDryness(sku)/100;

recBruttoQuantity 'Кол-во компонентов в натуре' (BOM BOM, DATE date) = GROUP SUM recBruttoQuantity (BOM, Sku sku, date)*(OVERRIDE netWeight[Item](sku), 1.0 IF sku IS Sku);
recBruttoDrynessQuantity 'В сухих веществах' (BOM BOM, DATE date) = GROUP SUM recBruttoDrynessQuantity(BOM, Item sku, date);

drynessQuantity 'Кол-во для комонента(товар) в сухих веществах' (Component cc,DATE dt)=  bruttoQuantity(cc,dt) * 
                                                                                       (OVERRIDE overNetWeight(cc), 1.0 IF cc IS Component) *
                                                                                       percentDryness(cc)/100;
drynessQuantity 'Кол-во для комонентов сухих веществах' (Component c) = (overNettoNetWeight(c) * percentDryness(c)/100) IF NOT isPack(c);
drynessQuantityComponents 'Кол-во по комонентам в сухих веществах' (b) = GROUP SUM drynessQuantity(Component c) BY BOM(c);
calcPercentHumidity 'Массовая доля сухих веществ, %' (BOM b)= drynessQuantityComponents(b)/(overNettoNetWeightComponent(b) IF overNettoNetWeightComponent(b)!=0)*100; 

//--
recBruttoQuantity 'Кол-во компонентов в натуре' (Product product, DATE date) = recBruttoQuantity(BOM(product),date);
recBruttoDrynessQuantity 'В сухих веществах' (Product product, DATE date) = recBruttoDrynessQuantity(BOM(product),date);
drynessQuantityComponents 'Кол-во по комонентам в сухих веществах' (Product product) =drynessQuantityComponents(BOM(product));
//--
calcPercentHumidity 'Массовая доля сухих веществ, %' (Product product) =calcPercentHumidity(BOM(product));

percentHumidityProduct 'Влажность' (Component c) = percentHumidity(material(c));

//-- Альтернатива для расчета "Массовая доля сухих веществ, %" т.е. берем не по компонентам, а для всех sku рекурсивно
// todo: может быть так правильнее ????

drynessQuantity'Кол-во в сухих веществах для нетто' (BOM BOM,Item sku) = recNettoQuantity(BOM,sku) *
                                                                          (OVERRIDE netWeight(sku) , 1.0 IF BOM IS BOM) *
                                                                          percentDryness(sku)/100;
nettoQuantity 'Кол-во нетто' (BOM BOM,Sku sku) = recNettoQuantity(BOM,sku) * (OVERRIDE netWeight[Item](sku) , 1.0 IF BOM IS BOM);  
nettoQuantity 'Кол-во нетто' (BOM BOM) = GROUP SUM nettoQuantity(BOM,Sku sku);                                                                        
                                                                          
overDrynessQuantity 'Кол-вов сухих веществах для нетто' (BOM BOM) = GROUP SUM drynessQuantity(BOM,Item sku);
overCalcPercentHumidity 'Массовая доля сухих веществ, %' (BOM b)= overDrynessQuantity(b)/(nettoQuantity(b) IF nettoQuantity(b)!=0)*100;                                                                                                                                                     

productsUOM 'Изделия' (BOM) = GROUP CONCAT STRING[255](shortNameUOM(Product p)), ', '
                                       ORDER index(p)
                                       BY BOM(p) CHARWIDTH 30 MATERIALIZED;

nameBOMMaterial 'Наименование изделия' (Component c) = name(BOM(material(c)));

FORM productionRecipe 'Производственная рецептура'
    OBJECTS dt=DATE PANEL SUBREPORT
    PROPERTIES (dt) date = VALUE

    OBJECTS b=BOM PANEL 
    PROPERTIES(b)  READONLY products, productsUOM, name, number, series, fromDate, toDate, components, overNettoNetWeightProduct, overNettoNetWeightComponent, pricePercent, note
    PROPERTIES     READONLY    recBruttoQuantity(b,dt), recBruttoDrynessQuantity(b,dt), drynessQuantityComponents(b)
    OBJECTS p = Product
    PROPERTIES(p) READONLY index, idBarcodeSku, id, nameSku, shortNameUOM, percentHumidity, overNettoNetWeight
    PROPERTIES(p,dt) READONLY recBruttoQuantity, recBruttoDrynessQuantity
    PROPERTIES(p) drynessQuantityComponents, calcPercentHumidity
    FILTERS       BOM(p) == b

    OBJECTS c = Component GRID
    FILTERS       BOM(c) == b,
                  material(c) IS Product                                 

    OBJECTS sk = Sku
    PROPERTIES(sk) READONLY name, percentDryness PANEL 
    PROPERTIES     quantity(c,sk,dt) COLUMNS (c) HEADER nameMaterial(c) FOOTER nameBOMMaterial(c)
    PROPERTIES     READONLY quantityBom(b,sk,dt), drynessQuantityBom(b,sk,dt) PANEL
    FILTERS        quantityBom(b,sk,dt)
    
    OBJECTS cc = Component
    PROPERTIES(cc) READONLY index, idBarcodeSku, id, nameMaterial, shortNameUOM, overNettoNetWeight
    PROPERTIES    READONLY wastage(cc,dt), overBruttoQuantity(cc,dt), percentDryness(cc), drynessQuantity(cc,dt)    
    FILTERS       BOM(cc) == b,
                  material(cc) IS Sku     
                  
    PROPERTIES READONLY  overNettoNetWeight(c)  COLUMNS (c) FOOTER nameMaterial(c)
    ,quantity(c,dt) COLUMNS (c) FOOTER nameMaterial(c), overBruttoQuantity(c,dt) COLUMNS (c) FOOTER nameMaterial(c)       
                  
                  
    OBJECTS ccc = Component
    PROPERTIES(ccc) READONLY id, nameMaterial, overNettoNetWeight                                                                                        
    FILTERS       BOM(ccc) == b    
                  
    OBJECTS c1 = Component GRID
    PROPERTIES READONLY  overNettoNetWeight(c1)  COLUMNS (c1) FOOTER nameMaterial(c1)  
    FILTERS       BOM(c1) == b,
                  material(c1) IS Product                    

    OBJECTS c2 = Component GRID
    PROPERTIES READONLY  percentHumidityProduct(c2)  COLUMNS (c2) FOOTER nameMaterial(c2)  
    FILTERS       BOM(c2) == b,
                  material(c2) IS Product                      
                  
;
printProductionRecipe 'Производственная рецептура'(BOM BOM)   { 
    DIALOG dialogDate OBJECTS d INPUT DO
        PRINT productionRecipe OBJECTS dt = d, b = BOM;
} IMAGE 'print.png' IN print;

//------------------------- Расчет пищевой ценности --------------------------//

recBruttoNetQuantity 'В натуре' (BOM BOM, Sku sku, DATE d)= recBruttoQuantity(BOM, sku, d) *
    (OVERRIDE netWeight[Item](sku), 1.0 IF sku IS Sku);

//-- все берем на 100 грамм

netGramsQuantity 'Кол-во на 100 гр. изделия в натуре' (Product p,Sku sku,DATE d)= recBruttoNetQuantity(BOM(p), sku, d)/ (overNettoNetWeight(p) IF overNettoNetWeight(p) !=0) *1000/10;
netGramsDrynessQuantity 'Кол-во на 100 гр. изделия в сухих веществах' (Product p,Item sku,DATE d)= netGramsQuantity(p,sku,d)* percentDryness(sku)/100;



proteinsGramsQuantity 'Белки в рецепте' (Product p,Item sku,DATE d)= netGramsQuantity(p,sku,d)*proteins(sku)/100;
fatsGramsQuantity 'Жиры в рецепте' (Product p,Item sku,DATE d)= netGramsQuantity(p,sku,d)*fats(sku)/100;
carbohydratesGramsQuantity 'Углеводы в рецепте' (Product p,Item sku,DATE d)= netGramsQuantity(p,sku,d)*carbohydrates(sku)/100;
energyGramsQuantity 'Энергетическая ценность в рецепте' (Product p,Item sku,DATE d)= netGramsQuantity(p,sku,d)*energy(sku)/100;


//-- по всему изделию
netGramsQuantity  'Кол-во на 100 гр. изделия в натуре всего' (Product p,DATE d) = GROUP SUM netGramsQuantity(p,Sku sku,d);
netGramsDrynessQuantity  'Кол-во на 100 гр. изделия в сухих веществах всего' (Product p,DATE d) = GROUP SUM netGramsDrynessQuantity(p,Item sku,d);

overGramsQuantityComponents = ABSTRACT NUMERIC[80,32] (Product);
gramsQuantityComponents 'Кол-во на 100 гр. изделия в сухих веществах по компонентам' (Product p)= OVERRIDE
    overGramsQuantityComponents(p), (drynessQuantityComponents(BOM(p))/ (overNettoNetWeight(p) IF overNettoNetWeight(p) !=0) *1000/10);

coeffGramsDrynessQuantity 'Коэффициент' (Product p,DATE d) = gramsQuantityComponents(p)/netGramsDrynessQuantity(p,d);

proteinsGramsQuantity  'Белки в рецепте' (Product p,DATE d) = GROUP SUM proteinsGramsQuantity(p,Item sku,d);
fatsGramsQuantity  'Жиры в рецепте' (Product p,DATE d) = GROUP SUM fatsGramsQuantity(p,Item sku,d);
carbohydratesGramsQuantity  'Углеводы в рецепте' (Product p,DATE d) = GROUP SUM carbohydratesGramsQuantity(p,Item sku,d);
energyGramsQuantity  'Энергетическая ценность в рецепте' (Product p,DATE d) = GROUP SUM energyGramsQuantity(p,Item sku,d);

netProteinsGramsQuantity  'Белки в рецепте' (Product p,DATE d) = proteinsGramsQuantity(p,d)*coeffGramsDrynessQuantity(p,d);
netFatsGramsQuantity  'Жиры в рецепте' (Product p,DATE d) = fatsGramsQuantity(p,d)*coeffGramsDrynessQuantity(p,d);
netCarbohydratesGramsQuantity 'Углеводы в рецепте' (Product p,DATE d) = carbohydratesGramsQuantity(p,d)*coeffGramsDrynessQuantity(p,d);
netEnergyGramsQuantity 'Энергетическая ценность в рецепте' (Product p,DATE d) = energyGramsQuantity(p,d)*coeffGramsDrynessQuantity(p,d);

calcNetEnergyGramsQuantity'Энергетическая ценность в рецепте' (Product p,DATE d) = 
    netProteinsGramsQuantity(p,d)*4 (+)
    netFatsGramsQuantity(p,d)*9 (+)
    netCarbohydratesGramsQuantity(p,d)*4;
 
netProteinsGramsQuantityRound  'Белки в рецепте' (Product p,DATE d) = humidityParamsRound(NUMERIC[18,5](netProteinsGramsQuantity(p,d)));
netFatsGramsQuantityRound  'Жиры в рецепте' (Product p,DATE d) = humidityParamsRound(NUMERIC[18,5](netFatsGramsQuantity(p,d)));
netCarbohydratesGramsQuantityRound 'Углеводы в рецепте' (Product p,DATE d) = humidityParamsRound(NUMERIC[18,5](netCarbohydratesGramsQuantity(p,d))); 
netEnergyGramsQuantityRound 'Энергетическая ценность в рецепте' (Product p,DATE d) = energyParamsRound(NUMERIC[18,5](netEnergyGramsQuantity(p,d)));

calcNetEnergyGramsQuantityRound'Энергетическая ценность в рецепте' (Product p,DATE d) = 
    energyParamsRound(NUMERIC[18,5]( netProteinsGramsQuantityRound(p,d)*4 (+) netFatsGramsQuantityRound(p,d)*9 (+) netCarbohydratesGramsQuantityRound(p,d)*4));    

fillHumidityItem 'Заполнять энерг.ценность и в карточку товара из спецификации'  = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES () fillHumidityItem
;
DESIGN options{
    manufacturing{
        MOVE PROPERTY (fillHumidityItem());
    }
}

notFillHumidityItem() = TRUE IF NOT fillHumidityItem();

fillNutritionItem 'Записать в карточку товара' (BOM BOM)  { 
    FOR BOM(Product p) == BOM DO {
        IF showNutrition(BOM) THEN {
            proteins(Item item)<- proteins(p) WHERE item == sku(p);
            fats(Item item)<- fats(p) WHERE item == sku(p);
            carbohydrates(Item item)<- carbohydrates(p) WHERE item == sku(p);
            energy(Item item)<- energy(p) WHERE item == sku(p);         
        }
        IF showHumidity(BOM) THEN {
            percentHumidity(Item item) <-  percentHumidity(p) WHERE item == sku(p);        
        }
    }
} TOOLBAR; 

WHEN LOCAL FORMS BOM CHANGED(proteins(Product p))  AND fillHumidityItem() AND showNutrition(BOM(p)) DO {
    proteins(Item item)<- proteins(p) WHERE item == sku(p);
}
WHEN LOCAL FORMS BOM CHANGED(fats(Product p))  AND fillHumidityItem() AND showNutrition(BOM(p)) DO {
    fats(Item item)<- fats(p) WHERE item == sku(p);
}
WHEN LOCAL FORMS BOM CHANGED(carbohydrates(Product p)) AND fillHumidityItem() AND showNutrition(BOM(p)) DO {
    carbohydrates(Item item)<- carbohydrates(p) WHERE item == sku(p);
}
WHEN LOCAL FORMS BOM CHANGED(energy(Product p)) AND fillHumidityItem() AND showNutrition(BOM(p)) DO {
    energy(Item item)<- energy(p) WHERE item == sku(p);
}
WHEN LOCAL FORMS BOM CHANGED(percentHumidity(Product p))  AND fillHumidityItem() AND showHumidity(BOM(p)) DO {
    percentHumidity(Item item)<- percentHumidity(p) WHERE item == sku(p);
}

overFillNutrition ABSTRACT LIST (Product);
customFillNutrition ABSTRACT LIST (BOM);
isFillNutrition = ABSTRACT BOOLEAN (Product);

netGramsQuantity = DATA LOCAL NUMERIC[16,5](Item);          
coeffGramsDrynessQuantity = DATA LOCAL NUMERIC[22,8]();
netGramsQuantity = DATA LOCAL NUMERIC[16,5](Component);          

gramsQuantityComponentsGG 'Кол-во на 100 гр. изделия в сухих веществах по компонентам' (Product p)= drynessQuantityComponents(BOM(p))/ (overNettoNetWeight(p) IF overNettoNetWeight(p) !=0) *1000/10;

banUseCoeffGramsDrynessQuantity 'Не использовать "Коэфф. сухого количества"' = ABSTRACT BOOLEAN (BOM);
skipFillHumidity = ABSTRACT BOOLEAN (BOM);

fillNutrition 'Рассчитать ценность' (BOM BOM)  { 
    FOR BOM(Product p) == BOM DO {
        netGramsQuantity(Item i) <- NULL;
        coeffGramsDrynessQuantity() <- NULL;
        netGramsQuantity(Component c) <- NULL;
        
        IF showNutrition(BOM) THEN {            
            IF countProduct(BOM) == 1 THEN {
                netGramsQuantity(Component c) <- NULL;
                netGramsQuantity(Component c) <- NUMERIC[16,5](overNettoNetWeight(c)/ (overNettoNetWeight(p) IF overNettoNetWeight(p) !=0) *100.0) WHERE BOM(c)==BOM AND NOT isPack(c);                                                                                                  
                coeffGramsDrynessQuantity() <- NUMERIC[22,8](gramsQuantityComponents(p)/(GROUP SUM netGramsQuantity(Component c)* (OVERRIDE percentDryness[Product](material(c)),percentDryness[Item](material(c)))/100.0));  
                IF banUseCoeffGramsDrynessQuantity(BOM) THEN {
                    coeffGramsDrynessQuantity() <- 1.0;
                }
                IF NOT isFillNutrition(p) THEN { //чтобы избежать двойного округления
                    proteins(p)<- NUMERIC[8,2](humidityParamsRound(NUMERIC[18,5]((GROUP SUM netGramsQuantity(Component c)*proteinsProduct(c)/100.0)*coeffGramsDrynessQuantity())));
                    fats(p)<- NUMERIC[8,2](humidityParamsRound(NUMERIC[18,5]((GROUP SUM netGramsQuantity(Component c)*fatsProduct(c)/100.0)*coeffGramsDrynessQuantity())));
                    carbohydrates(p)<- NUMERIC[8,2](humidityParamsRound(NUMERIC[18,5]((GROUP SUM netGramsQuantity(Component c)*carbohydratesProduct(c)/100.0)*coeffGramsDrynessQuantity())));
                    energy(p)<- NUMERIC[8,2](energyParamsRound(NUMERIC[18,5]((GROUP SUM netGramsQuantity(Component c)*energyProduct(c)/100.0)*coeffGramsDrynessQuantity())));           
                } ELSE {
                    overFillNutrition(p);  
                }                              
            } ELSE {
                netGramsQuantity(Item i) <- NUMERIC[16,5](recBruttoNetQuantity(BOM(p), i, currentDate())/ (overNettoNetWeight(p) IF overNettoNetWeight(p) !=0) *100.0) WHERE recBruttoNetQuantity(BOM(p), i, currentDate());                  
                coeffGramsDrynessQuantity() <- NUMERIC[22,8](gramsQuantityComponents(p)/(GROUP SUM netGramsQuantity(Item sku)* percentDryness(sku)/100.0));
                IF banUseCoeffGramsDrynessQuantity(BOM) THEN {
                    coeffGramsDrynessQuantity() <- 1.0;
                }                                                    
                IF NOT isFillNutrition(p) THEN { //чтобы избежать двойного округления
                    proteins(p)<- NUMERIC[8,2](humidityParamsRound(NUMERIC[18,5]((GROUP SUM netGramsQuantity(Item sku)*proteins(sku)/100.0)*coeffGramsDrynessQuantity())));
                    fats(p)<- NUMERIC[8,2](humidityParamsRound(NUMERIC[18,5]((GROUP SUM netGramsQuantity(Item sku)*fats(sku)/100.0)*coeffGramsDrynessQuantity())));
                    carbohydrates(p)<- NUMERIC[8,2](humidityParamsRound(NUMERIC[18,5]((GROUP SUM netGramsQuantity(Item sku)*carbohydrates(sku)/100.0)*coeffGramsDrynessQuantity())));
                    energy(p)<- NUMERIC[8,2](energyParamsRound(NUMERIC[18,5]((GROUP SUM netGramsQuantity(Item sku)*energy(sku)/100.0)*coeffGramsDrynessQuantity())));       
                } ELSE {
                    overFillNutrition(p);              
                }
            }
        }
        IF showHumidity(BOM) AND NOT skipFillHumidity(BOM) THEN {
            percentHumidity(p) <-  NUMERIC[8,2](round2(gramsQuantityComponents(p)));    
        }
        customFillNutrition(BOM);
    }
} TOOLBAR;    

FORM nutritionalValue 'Пищевая ценность'
    OBJECTS dt=DATE PANEL SUBREPORT
    PROPERTIES (dt) date = VALUE

    OBJECTS b=BOM PANEL 
    PROPERTIES(b)  READONLY products, name, number, series, components, overNettoNetWeightProduct, overNettoNetWeightComponent, pricePercent, note

    OBJECTS p = Product
    PROPERTIES(p) READONLY nameSku, shortNameUOM, percentHumidity, overNettoNetWeight, gramsQuantityComponents
    PROPERTIES(p,dt) READONLY recBruttoQuantity, recBruttoDrynessQuantity
    PROPERTIES(p) drynessQuantityComponents, calcPercentHumidity
    FILTERS       BOM(p) == b    
    
    PROPERTIES(p,dt) READONLY netGramsQuantity, netGramsDrynessQuantity,
                     proteinsGramsQuantity, fatsGramsQuantity, 
                     carbohydratesGramsQuantity, energyGramsQuantity,
                     netProteinsGramsQuantity, netFatsGramsQuantity,
                     netCarbohydratesGramsQuantity, netEnergyGramsQuantity,
                     calcNetEnergyGramsQuantity, coeffGramsDrynessQuantity                              

    OBJECTS sk = Sku
    PROPERTIES(sk) READONLY PANEL name GRID, percentDryness, proteins, fats, carbohydrates, energy
                                                          
    PROPERTIES(p,sk,dt)  READONLY PANEL netGramsQuantity GRID, netGramsDrynessQuantity,
                        proteinsGramsQuantity, fatsGramsQuantity, 
                        carbohydratesGramsQuantity, energyGramsQuantity 
    FILTERS recBruttoQuantity(b,sk,dt)                                      
;
printNutritionalValue 'Расчет пищевой ценности'(BOM BOM)   { 
	NEWSESSION {
	    DIALOG dialogDate OBJECTS d INPUT DO
	        PRINT nutritionalValue OBJECTS dt = d, b = BOM;
	}
} IMAGE 'print.png' IN print;



// Расширяем формы
showNutritionBOM(BOM b) += showHumidity(b);

backgroundPercentHumidity (Product p) = IF (percentHumidity(p) OR percentHumidityItem(p)) AND NOT percentHumidityItem(p) == percentHumidity(p) THEN RGB(255,153,153) ELSE RGB(244,255,189);
EXTEND FORM BOM
    PROPERTIES(b) showHumidity
    PROPERTIES(pp) AFTER energy (pp) SHOWIF showHumidity(b) percentHumidity ON CHANGE changePercentHumidity(pp) BACKGROUND backgroundPercentHumidity(pp), percentDryness ON CHANGE changePercentDryness(pp) BACKGROUND backgroundPercentHumidity(pp)
    PROPERTIES(pp) SHOWIF showHumidity(b) AFTER energyItem (pp) READONLY percentHumidityItem, percentDrynessItem
        
    PROPERTIES(cc) BACKGROUND  background(cc) SHOWIF showHumidity(b) percentHumidity ON CHANGE  changePercentHumidity(cc),
                   percentDryness ON CHANGE changePercentDryness(cc)
                   
    PROPERTIES(b) TOOLBAR  DRAW pp fillNutrition, fillNutritionItem SHOWIF notFillHumidityItem()                      
;

DESIGN BOM {
    kitchen {
        MOVE PROPERTY(showHumidity(b));        
    }
}
EXTEND FORM BOMs
    PROPERTIES(b) READONLY BACKGROUND background(b) showHumidity
    PROPERTIES(p) SHOWIF showHumidity(b) READONLY percentHumidity
    PROPERTIES(c) BACKGROUND  background(c) SHOWIF showHumidity(b) READONLY percentHumidity
    PROPERTIES(b)  printProductionRecipe, printNutritionalValue
    PROPERTIES(p1)  percentHumidity, percentDryness
    PROPERTIES(c2)  percentHumidity, percentDryness
    
;
EXTEND FORM BOMsDialog
    PROPERTIES(b) READONLY BACKGROUND background(b) showHumidity
    PROPERTIES(p) SHOWIF showHumidity(b) READONLY percentHumidity
    PROPERTIES(c) BACKGROUND  background(c) SHOWIF showHumidity(b) READONLY percentHumidity    
;

