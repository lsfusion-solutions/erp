MODULE ManufacturingTransferDashboard;

REQUIRE SalePurchaseInvoice,  BOM, Substitute,  ProductionOrderPurchaseShipment,  SaleOrder, Store;

NAMESPACE Purchase;

cateringSaleOperation = DATA Sale.Operation();
nameCateringSaleOperation 'Операция (расход на цех)' = name(cateringSaleOperation());

cateringPurchaseOperation = DATA Purchase.Operation();
nameCateringPurchaseOperation 'Операция (приход на цех)' = name(cateringPurchaseOperation());

EXTEND FORM options
    PROPERTIES() nameCateringSaleOperation, nameCateringPurchaseOperation
;
DESIGN options {
    manufacturing {        
        MOVE PROPERTY(nameCateringSaleOperation());
        MOVE PROPERTY(nameCateringPurchaseOperation());
    }
}

purchaseSku 'Компонент' = DATA Sku(Sale.UserOrderDetail);

purchaseSku = DATA LOCAL Sku (Sale.InvoiceDetail);
namePurchaseSku 'Компонент' (Sale.InvoiceDetail d) = name(purchaseSku(d));
CONSTRAINT purchaseSku(Sale.InvoiceDetail d) AND NOT isComponentGroup(purchaseSku(d))
    CHECKED BY purchaseSku[Sale.InvoiceDetail] MESSAGE 'Выбран SKU, который не является компонентом';
    
//CONSTRAINT purchaseSkuInvoiceDetail(d) AND NOT isComponentGroupSku(purchaseSkuInvoiceDetail(d))
//    CHECKED BY purchaseSkuInvoiceDetail MESSAGE 'Выбран SKU, который не является компонентом';    

coeffPurchase 'Коэфф.' = DATA LOCAL NUMERIC[10,5] (Sale.InvoiceDetail);
productionCoeffPurchase 'Параметры партии' = DATA LOCAL NUMERIC[8,3] (Sale.InvoiceDetail);

backgroundSelectParams = RGB(212, 255, 255);

FORM skusTransfer 'Sku'
    TREE skuTree sg = SkuGroup PARENT parent(sg)
    PROPERTIES READONLY order(sg), skuGroupName = name(sg)
    FILTERGROUP inactive FILTER 'Активные' active(sg) 'F6' DEFAULT
    FILTERGROUP component FILTER 'Сырье' filterComponent(sg) 'shift F5' DEFAULT
    ORDERS order(sg), skuGroupName
     
    OBJECTS s = Sku
    PROPERTIES(s) READONLY id SHOWIF showIDs()
    PROPERTIES(s) READONLY name, idBarcode, shortNameUOM
    PROPERTIES() addSku DRAW s
    PROPERTIES(s) EDIT NEWSESSION, copy
    FILTERS isParent(sg, s),
            name(s)
    ORDERS name(s)

;

DESIGN skusTransfer {
    BOX {
        size = (1024, 768);

        NEW topContainer {
            fill = 1;
            horizontal = TRUE;

            MOVE BOX(TREE skuTree);

            MOVE BOX(s) {
                fill = 4;
                GRID(s) {
                    defaultComponent = TRUE;
                }
            }
        }

        MOVE TOOLBARBOX;
    }
}
changePurchaseSku(Sale.InvoiceDetail d)  { 
    DIALOG skusTransfer OBJECTS s = purchaseSku(d) CHANGE;
}


wholeCatering = ABSTRACT BOOLEAN (Sale.Invoice);// Без расценки, оптовые склады
wholeCatering (Sale.InvoiceDetail d) = wholeCatering(invoice(d));


FORM selectParams 'Перемещение на цех'
    OBJECTS si = Sale.Invoice PANEL
    
    OBJECTS sd = Sale.InvoiceDetail
    PROPERTIES(sd) READONLY index, nameSku, price
    FILTERS invoice(sd) == si
    
    PROPERTIES(sd) BACKGROUND backgroundSelectParams() namePurchaseSku ON CHANGE changePurchaseSku(sd), coeffPurchase, 
                    productionCoeffPurchase SHOWIF NOT wholeCatering(si)
;
DESIGN selectParams{
    BOX {
        size = (1024, 768);    
    }
}

useCateringRoundCondition 'Использовать условие округления для цены общепита' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES () useCateringRoundCondition
;

DESIGN options {
    manufacturing {
        MOVE PROPERTY(useCateringRoundCondition());
    }
}
createManufacturingPurchaseSaleBefore  ABSTRACT LIST (Sale.InvoiceDetail, Purchase.UserInvoiceDetail);
createManufacturingPurchaseSaleOver  ABSTRACT LIST (Sale.InvoiceDetail, Purchase.UserInvoiceDetail);
createManufacturingPurchaseSaleOver  ABSTRACT LIST (Sale.Invoice, Purchase.UserInvoice);
substituteToOver = ABSTRACT Substitute(Sku);
lastSubstituteToOver (Sku s) = OVERRIDE  substituteToOver(s), lastSubstituteTo(s);

okManufacturingPurchaseSale = DATA LOCAL BOOLEAN ();
createManufacturingPurchaseSale 'Создать поступление на цех'(Sale.Invoice si)  { 
	NEWSESSION {
	    FOR invoice(Sale.InvoiceDetail sd)==si DO {
	        IF uniqueSubstituteFromTo(purchaseSku(orderDetail(sd)), sku(sd)) THEN {
	            purchaseSku(sd) <- purchaseSku(orderDetail(sd));
	            coeffPurchase(sd) <- multiplier(uniqueSubstituteFromTo(purchaseSku(orderDetail(sd)), sku(sd)));
	        } ELSE {
	            purchaseSku(sd) <- fromSku(lastSubstituteToOver(sku(sd)));
	            coeffPurchase(sd) <- IF lastSubstituteToOver(sku(sd)) THEN 
	                                                    multiplier(lastSubstituteToOver(sku(sd)))
	                                              ELSE
	                                                    netWeight(sku(sd)) WHERE invoice(sd) == si;
	        }
	    }
        okManufacturingPurchaseSale() <- NULL;
	    DIALOG selectParams OBJECTS si = si NOMANAGESESSION DO {
            okManufacturingPurchaseSale() <- TRUE;
	    }
        IF okManufacturingPurchaseSale() THEN {
            FOR NUMERIC[10,5] coeff = [ GROUP MAX coeffPurchase(Sale.InvoiceDetail ssd) BY invoice(ssd), purchaseSku(ssd), sku(ssd)](si, Sku psku,  Sku sku) AND NOT uniqueSubstituteFromTo(psku, sku) NEW s = Substitute DO {
                fromSku(s) <- psku;
                toSku(s) <- sku;
                multiplier(s) <- coeff;
            }
            NEW pi = UserInvoice {
                supplier(pi) <- supplier(si);
                customer(pi) <- customer(si);
                supplierStock(pi) <- supplierStock(si);
                customerStock(pi) <- customerStock(si);
                number(pi) <- number(si);
                series(pi) <- series(si);
                note(pi) <- note(si);
                currency(pi) <- currency(si);
                IF NOT wholeCatering(si) THEN {
                    operation(pi) <- cateringPurchaseOperation();
                }
                createManufacturingPurchaseSaleOver(si,pi);

                FOR invoice(Sale.InvoiceDetail sd) == si NEW pd = UserInvoiceDetail DO {

                    userInvoice(pd) <- pi;
                    invoiceDetail(pd) <- sd;

                    sku(pd) <- purchaseSku(sd);
                    quantity (pd) <- NUMERIC[16,5](quantity(sd) * coeffPurchase(sd));
                    VAT (pd) <- IF valueVAT(sd) == 0 THEN VAT(sku[Sale.UserInvoiceDetail](sd), country(supplierStock[Sale.UserInvoiceDetail](sd))) ELSE VAT(sd);
                    valueVAT (pd) <- IF valueVAT(sd) == 0 THEN valueRate(VAT (pd), date(pd)) ELSE valueVAT(sd);

                    price (pd) <- NUMERIC[16,4](price(sd) / coeffPurchase(sd));
                    invoicePrice (pd) <- NUMERIC[16,4](invoicePrice(sd) / coeffPurchase(sd));
                    createManufacturingPurchaseSaleBefore(sd,pd);

                    productionCoeff (pd) <- productionCoeffPurchase(sd);
                    createManufacturingPurchaseSaleOver(sd,pd);
                }
                SHOW Purchase.userInvoice OBJECTS i = pi DOCKED NOCANCEL;
            }    
        }        
	}
} TOOLBAR;

extraConditionSale = ABSTRACT BOOLEAN (Sale.Invoice);
extraConditionPurchase = ABSTRACT BOOLEAN (UserInvoice);

FORM manufacturingTransfer 'Перемещение на цех производства'
    OBJECTS d = DATE PANEL
    PROPERTIES(d) VALUE
    
    OBJECTS si = Sale.Invoice
    PROPERTIES (si) READONLY isClosed  
    PROPERTIES (si) READONLY BACKGROUND background(si) isPosted,
                                        number, series, date, time                                
    PROPERTIES (si) READONLY nameSupplierStock, nameCustomerStock, statusInvoice
    PROPERTIES (si) createManufacturingPurchaseSale
    FILTERS operation(si) == cateringSaleOperation() OR extraConditionSale(si)
    
    FILTERGROUP saleDate
        FILTER 'На дату' date(si) == d DEFAULT 

    FILTERGROUP invoiced
        FILTER 'Не создано поступление' NOT invoiced(si) DEFAULT 
    OBJECTS pi = UserInvoice 
    PROPERTIES (pi) READONLY isClosed[Invoice]  
    PROPERTIES (pi) READONLY BACKGROUND background(pi) isPosted[Invoice],
                                        number[Invoice], series[Invoice], date[Invoice], time[Invoice]                                
    PROPERTIES (pi) READONLY nameSupplierStock[Invoice], nameCustomerStock[Invoice]
    PROPERTIES (pi) NEWSESSION EDIT SHOWIF isOpened[Invoice](pi), DELETE SHOWIF isOpened[Invoice](pi) 
    FILTERS operation[Invoice](pi) == cateringPurchaseOperation() OR extraConditionPurchase(pi)
    FILTERGROUP purchaseDate
        FILTER 'На дату' date[Invoice](pi) == d DEFAULT 
;

@extendFormFilterAccessStock(Invoice, si, manufacturingTransfer, supplierStock, company);

@extendFormFilterAccessStock(UserInvoice, pi, manufacturingTransfer, supplierStock, company);

DESIGN manufacturingTransfer {
    MOVE BOX(d);
    NEW pane {
        fill = 1;
        MOVE BOX(si) {
            caption = 'Отгрузка на цех';
        }
        NEW tab {
            fill = 1;
            tabbed = TRUE;        
            MOVE BOX(pi) {
                caption = 'Поступление на цех';
            }
            NEW printTab {
                fill = 1;
                caption = 'Печатные формы';
            }
        }
    }
    
    MOVE TOOLBARBOX;
}


saleIdSku 'Код товара (исходный)' (InvoiceDetail d) = idSku(invoiceDetail(d));
saleNameSku 'Товар (исходный)' (InvoiceDetail d) = nameSku(invoiceDetail(d));
saleQuantity 'Кол-во (исходное)' (InvoiceDetail d) = quantity(invoiceDetail(d));

coeff 'Коэффициент' = quantity(InvoiceDetail d) / quantity(invoiceDetail(d)); 
productionOrders 'Используется в заказах' = [ GROUP CONCAT number(Production.Order o), ',' IF [ GROUP SUM 1 BY order(ComponentDetail d), batch(d)](o, Batch b) ORDER o BY b](batch(Invoice.InvoiceDetail d));

coeffSku 'Коэфф. перевода'= quantity(invoiceDetail(invoiceDetail(Batch bt))) /
    (quantity(invoiceDetail(bt)) IF quantity(invoiceDetail(bt)) !=0.0); 
    
filterInvoiceDetailDateFrom 'Дата с' = DATA LOCAL DATE ();
filterDateFrom (InvoiceDetail i) = date(i) >= filterInvoiceDetailDateFrom() OR (i IS InvoiceDetail AND NOT filterInvoiceDetailDateFrom());      

filterInvoiceDetailDateTo 'Дата по' = DATA LOCAL DATE ();
filterDateTo (InvoiceDetail i) = date(i) <= filterInvoiceDetailDateTo() OR (i IS InvoiceDetail AND NOT filterInvoiceDetailDateTo());      

filterInvoiceDetailSupplierStock  = DATA LOCAL Stock ();
nameFilterInvoiceDetailSupplierStock 'Склад поставщика' = name(filterInvoiceDetailSupplierStock()) CHARWIDTH 15;          
filterSupplierStock (InvoiceDetail i) = supplierStock(i) == filterInvoiceDetailSupplierStock() OR (i IS InvoiceDetail AND NOT filterInvoiceDetailSupplierStock());  

CONSTRAINT filterInvoiceDetailSupplierStock() AND NOT isCompany(filterInvoiceDetailSupplierStock())
    CHECKED BY filterInvoiceDetailSupplierStock[]
        MESSAGE 'В фильтре выбран склад, который не принадлежит компании.';

filterInvoiceDetailSku  = DATA LOCAL Sku ();
nameFilterInvoiceDetailSku 'Компонент' = name(filterInvoiceDetailSku()) CHARWIDTH 15;   
filterSku (InvoiceDetail i) = sku(i) == filterInvoiceDetailSku() OR (i IS InvoiceDetail AND NOT filterInvoiceDetailSku());  

CONSTRAINT SETCHANGED(filterInvoiceDetailSku()) AND NOT isComponentGroup(filterInvoiceDetailSku()) AND NOT skipCheckComponentGroup()
    CHECKED BY filterInvoiceDetailSku[]
    MESSAGE 'В фильтре выбран Компонент, который не входит в группу "Сырье".';

FORM manufacturingTransferLedger 'Реестр перемещений в цех производства'
    PROPERTIES () filterInvoiceDetailDateFrom, filterInvoiceDetailDateTo, nameFilterInvoiceDetailSupplierStock, nameFilterInvoiceDetailSku

    OBJECTS d = InvoiceDetail
    PROPERTIES(d) READONLY isPosted, nameSupplierStock, date, time, number, series 
    PROPERTIES(d) idSku, nameSku, coeff READONLY, quantity READONLY, productionCoeff 
    PROPERTIES(d) READONLY saleIdSku, saleNameSku, saleQuantity
    PROPERTIES(d) READONLY productionOrders
    FILTERS operation(d) == cateringPurchaseOperation(),
            filterDateFrom(d),
            filterDateTo(d),
            filterSupplierStock(d),
            filterSku(d)
    
    FILTERGROUP opened
        FILTER 'Открыт' isOpened(invoice(d)) DEFAULT

    EVENTS ON INIT {
        IF filterInvoiceInterval() THEN
            filterInvoiceDetailDateFrom() <- subtract(currentDate(), filterInvoiceInterval());
    }
;

DESIGN manufacturingTransferLedger {
    BOX {
        NEW filter {
            caption = 'Фильтры';
            horizontal = TRUE;
            MOVE PROPERTY (filterInvoiceDetailDateFrom());
            MOVE PROPERTY (filterInvoiceDetailDateTo());        
            MOVE PROPERTY (nameFilterInvoiceDetailSupplierStock());  
            MOVE PROPERTY (nameFilterInvoiceDetailSku());   
        }
        MOVE BOX(d);
        MOVE TOOLBARBOX;
        PROPERTY(nameSku(d)) {
            background = #FFDDFF;
        }
        PROPERTY(saleIdSku(d)) {
            background = #DDFFFF;
        }
        PROPERTY(saleNameSku(d)) {
            background = #DDFFFF;
        }
        PROPERTY(saleQuantity(d)) {
            background = #DDFFFF;
        }
    }
}

EXTEND FORM manufacturingTransferLedger FILTERS accessCompany(currentUser(),supplierStock[UserInvoiceDetail](d)) OR NOT supplierStock[UserInvoiceDetail](d);

NAVIGATOR {
    manufacturingDashboardNavigator {
        NEW manufacturingTransfer;
        NEW manufacturingTransferLedger;
    }
}
