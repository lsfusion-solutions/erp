MODULE ProductionOrderBatch;

REQUIRE ProductionOrder;

NAMESPACE Production;

currentBalancePriceStock 'Текущий остаток' (Batch batch, Order order) = currentBalance(batch, priceStock(order)); 
prevCurrentBalancePriceStock 'Текущий остаток' (Batch batch, Order order) = prevCurrentBalance(batch, priceStock(order)); 
priceStock 'Цена' (Batch batch, Order order)= OVERRIDE prevPriceB(priceListType(order), batch, priceStock(order), dateTime(order)), priceStock(sku(batch),order);                                                                                                                                                               

quantityComponentDetail (bt,s,o)=  GROUP SUM quantity(ComponentDetail d)  BY  batch(d), sku(d), order(d);
nameBatches 'Партии' (Sku s,Order o) = GROUP
    CONCAT name(Batch bt) IF quantityComponentDetail(bt,s,o) , ', '
    ORDER bt CHARWIDTH 30;
use 'Использовать партию'(Batch bt,Sku sk,Order o)   { 
    batch(ComponentDetail d) <- bt WHERE sku(d) == sk AND order(d) == o;
    cost(sk,o) <- cost(bt);
    dataBruttoPrice(sk,o) <- priceStock(bt,o);
    valueVAT(sk, o) <- valueVAT(bt);
}

defaultBatchPriceStock = GROUP LAST Batch batch
    ORDER currentBalancePriceStock(batch,Order order), batch
    WHERE currentBalancePriceStock(batch,order) >0
    BY sku(batch), order;

useBatchSkuAll 'Партия с max остатком (для всех)'(Order o)   { 
    batch(ComponentDetail d) <- defaultBatchPriceStock(sku(d), o) WHERE  order(d) == o AND defaultBatchPriceStock(sku(d), o);//skuComponentDetail(d) == sk
    cost(Sku sk,o) <- cost(defaultBatchPriceStock(sk, o)) WHERE defaultBatchPriceStock(sk, o) AND quantityComponentDetail(sk,o);
    dataBruttoPrice(Sku sk,o) <- priceStock(defaultBatchPriceStock(sk, o),o) WHERE defaultBatchPriceStock(sk, o) AND quantityComponentDetail(sk,o); 
    valueVAT(Sku sk, o) <- valueVAT(defaultBatchPriceStock(sk, o)) WHERE defaultBatchPriceStock(sk, o) AND quantityComponentDetail(sk,o);
}
maxBatch (Sku s,Order o)=  GROUP MAX Batch bt IF quantityComponentDetail (bt,s,o);

changeBatch(Sku s,Order o)  { 
    DIALOG dialogBatchStockOrder OBJECTS st = componentsStock(o),
                             t = dateTime(o),
                             sk = s ,
                             bt = maxBatch(s,o) INPUT NULL NEWSESSION DO {
        IF bt IS Batch THEN
            use(bt, s, o);
        ELSE
            batch(ComponentDetail d) <- NULL WHERE sku(d) == s AND order(d) == o;
    }                              
}

EXTEND FORM order 
    PROPERTIES nameBatches(sk,o) ON CHANGE changeBatch(sk,o) SHOWIF showBatchComponent(o)

    OBJECTS bt = Batch
    PROPERTIES(bt) READONLY name, nameSku, idBarcodeSku, shortNameUOM
    PROPERTIES READONLY currentBalancePriceStock(bt,o), cost(bt), priceStock(bt,o)
    PROPERTIES TOOLBAR use(bt,sk,o), useBatchSkuAll(o) DRAW bt

    FILTERS sku(bt) == sk     
    FILTERGROUP filter2bt
        FILTER 'С остатком' currentBalancePriceStock(bt,o) 'F8' DEFAULT     
;

DESIGN order {
    price2a {    
        NEW priceTab AFTER price2a1 {
            fill = 1;
            tabbed = TRUE;
            MOVE BOX(sku);
            MOVE BOX(bt);
        }
    }   
}

productionNorm 'Норма партии' = DATA NUMERIC[20,9] (Component);
overCopy (Component c, Component component) + {     
    productionNorm(c) <- productionNorm(component);
}
EXTEND FORM BOM
    PROPERTIES(c) productionNorm
;

countProductionNormComponent(s) = GROUP SUM 1 IF productionNorm(Component c) BY sku(c) MATERIALIZED;

productionCoeff 'Параметры партии' = ABSTRACT NUMERIC[20,9] (Batch) MATERIALIZED;
productionCoeff (ComponentDetail d) += NUMERIC[20,9]((100.0 - (productionNorm(component(d)) - productionCoeff(batch(d)))) / 100.0);

notNullProductionCoeff 'Проверять на наличие параметров партии' = DATA BOOLEAN ();
EXTEND FORM options
    PROPERTIES notNullProductionCoeff()
;
DESIGN options {
    manufacturing {
        MOVE PROPERTY(notNullProductionCoeff());
    }
}

CONSTRAINT notNullProductionCoeff() AND countProductionNormComponent(sku(Batch b)) AND NOT productionCoeff(b)
    MESSAGE 'Не заданы параметры партии для товара, по которому есть нормы в спецификации';

productionNorm 'Норма' = productionNorm(component(ComponentDetail d));
productionCoeffBatch 'Параметры партии' = productionCoeff(batch(ComponentDetail d));

WHEN LOCAL FORMS order CHANGED(batch(ComponentDetail d)) AND component(d) AND productionNorm(component(d)) DO {
    bruttoQuantity(d) <- calcComponentBruttoQuantity (d);
    BOMQuantity(d)  <- calcComponentBOMQuantity(d);
}
WHEN LOCAL FORMS order CHANGED(batch(ComponentDetail d)) AND NOT component(d) AND productionNorm(component(d)) DO {
    bruttoQuantity(d) <- calcSkuBruttoQuantity (d);
    BOMQuantity(d)  <- calcSkuBOMQuantity(d);
}