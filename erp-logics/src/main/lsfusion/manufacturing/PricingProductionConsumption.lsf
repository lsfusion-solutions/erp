MODULE  PricingProductionConsumption;

REQUIRE ProductionConsumption, PricingSum, CostCardOrderBy;

NAMESPACE Production;

// ----------------  Расценка ------------------- //
roundCondition(UserConsumptionDetail userWriteOffDetail) = roundCondition(stock(userWriteOffDetail));

@defineDocumentInterfaceHeaderPricingCommittee (consumption, stock);
@defineDocumentInterfaceProperty (consumption, createPricing, 'Создать акт расценки');

// Операция расценки
@defineDocumentInterfaceOperationPrefix (consumption, pricing, Pricing, ' (расценка)');

@defineDocumentInterfaceDetailPricePrefix(consumption, supplier, ' входная');
@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch(userConsumption, supplierPricingPriceListType, supplier, sku, stock);

@defineDocumentInterfaceDetailDataSumPrefix (consumption, supplier, ' входная');

@deriveDocumentDetailSumPrefix(userConsumption, supplier, currency, quantity);

@defineDocumentHeaderSumCustomPrefix (consumption, consumptionDetail, supplier,' входная');

@defineDocumentInterfaceDetailPricePrefix(consumption, retail, ' выходная');
@deriveDocumentDetailPriceSystemLedgerPriceListTypeBatch(userConsumption, retailPricingPriceListType, retail, sku, stock);
@defineDocumentInterfaceDetailVAT(consumption, countryStock, retail, );
// Не проставляется НДС, поскольку для прихода он равен НДС поставщика
@deriveDocumentDetailVAT(userConsumption, retail, date, sku, stock);
@deriveDocumentDetailValueVAT(userConsumption, retail);


@defineDocumentInterfaceDetailMarkupPrefix (consumption, retail, );
@defineDocumentInterfaceDetailDataSumPrefix (consumption, retail, ' выходная');
@deriveDocumentDetailSumPrefix(userConsumption, retail, currency, quantity);

@defineDocumentInterfaceHeaderSumPrefix (consumption, retail, ' выходная');

@defineDocumentInterfaceDetailVATDataSumPrefix (consumption, retail, ' розничная');
@deriveDocumentDetailReverseVATSumPrefix(userConsumption, retail, retail);
@defineDocumentInterfaceDetailMarkupSumPrefix (consumption, retail);

@deriveDocumentDetailMarkupSumPrefix(userConsumption, retail, retail, supplier);

@defineDocumentInterfaceHeaderSumPrefix (consumption, retailMarkup, ' надбавки');
@defineDocumentInterfaceHeaderSumPrefix (consumption, retailVAT, ' НДС');


// Объявление действий, которые будут срабатывать по изменению надбавки и розничной цены
@changeDocumentDetailMarkupCustomPrefix(userConsumptionDetail, retail, , retail, retail);
@changeDocumentDetailPriceCustomPrefix(userConsumptionDetail, retail, , retail, retail);

// Автоматический расчет розничной надбавки
retailMarkup(UserConsumptionDetail userConsumptionDetail)  <- [ round2((((X - X*Y/(100+Y))/Z)-1)*100)](
    retailPrice(userConsumptionDetail),
    valueRetailVAT(userConsumptionDetail),
    supplierPrice(userConsumptionDetail))
    WHEN CHANGED(retailPrice(userConsumptionDetail)) OR
         CHANGED (valueRetailVAT(userConsumptionDetail)) OR
         CHANGED(supplierPrice(userConsumptionDetail));


backgroundRetail 'Цвет' (Consumption consumption) = RGB(224, 255, 255) IF consumption IS Consumption;

EXTEND FORM userConsumption
    PROPERTIES(o)  BACKGROUND backgroundRetail(o) createPricing, namePricingOperation SHOWIF createPricing(o),
                   namePricingCommittee SHOWIF createPricing(o)

    PROPERTIES (d) BEFORE deleted SHOWIF createPricing(o) BACKGROUND backgroundRetail(o)
                   supplierPrice, supplierSum, retailMarkup ON CHANGE changeRetailMarkup(d), 
                   retailMarkupSum, valueRetailVAT, retailVATSum, 
                   retailPrice ON CHANGE changeRetailPrice(d), retailSum
;
DESIGN userConsumption {
    headerRow12 {
        NEW headerRow121 BEFORE GROUP(order,o) {
            caption = 'Расценка';
            horizontal = TRUE;
            MOVE PROPERTY(createPricing(o));
            MOVE PROPERTY(namePricingOperation(o));
            MOVE PROPERTY(namePricingCommittee(o));
        }
    }
}

EXTEND FORM consumptions
    PROPERTIES(d) READONLY SHOWIF createPricing(o) BACKGROUND backgroundRetail(o) supplierPrice, supplierSum, retailMarkup, retailMarkupSum,
                  valueRetailVAT, retailVATSum, retailPrice, retailSum
;

CLASS ConsumptionPricing 'Акт расценки на основе списания сырья' : Pricing;
CLASS ConsumptionPricingDetail 'Строка акта расценки на основе списания сырья' : PricingDetail;

@defineDocumentTables(consumptionPricing);

@defineDocumentAggregation(consumption, consumptionPricing, createPricing);

printPricing 'Акт расценки' (Consumption consumption)  { print(consumptionPricing(consumption)); } IMAGE 'print.png' IN print;
EXTEND FORM consumptions
    PROPERTIES(o)  printPricing SHOWIF createPricing(o)
;
DESIGN consumptions {printTab { MOVE GROUP(print,o) {align = START;}}}

pricing(ConsumptionPricingDetail detail) += consumptionPricing(detail);

index(ConsumptionPricingDetail detail) += index(detail);

date(ConsumptionPricing pricing) += date(pricing);
time(ConsumptionPricing pricing) += time(pricing);

departmentStore(ConsumptionPricing pricing) += stock(consumption(pricing)) AS DepartmentStore;

supplier(ConsumptionPricing pricing) += legalEntityStock(consumption(pricing));

@defineDocumentAggregationPosted(consumption, consumptionPricing);
isPosted(ConsumptionPricing pricing) += isPosted(pricing);

@defineDocumentAggregationClosed(consumption, consumptionPricing);
isClosed(ConsumptionPricing pricing) += isClosed(pricing);

number 'Номер документа' (ConsumptionPricing consumptionPricing) = number(consumption(consumptionPricing));
number(ConsumptionPricing pricing) += number(pricing);
series 'Серия документа' (ConsumptionPricing consumptionPricing) = series(consumption(consumptionPricing));
series(ConsumptionPricing pricing) += series(pricing);
seriesNumber 'Серия/номер документа' (ConsumptionPricing consumptionPricing) = seriesNumber(consumption(consumptionPricing));


note(ConsumptionPricing pricing) += note(consumption(pricing));
currency (ConsumptionPricing pricing) += currency(consumption(pricing));
pricingCommittee(ConsumptionPricing pricing) += pricingCommittee(consumption(pricing));

dataFormedMan (ConsumptionPricing pricing) += dataFormedMan(consumption(pricing));
dataCheckedMan (ConsumptionPricing pricing) += dataCheckedMan(consumption(pricing));
dataLabeledMan (ConsumptionPricing pricing) += dataLabeledMan(consumption(pricing));
dataAccountantMan (ConsumptionPricing pricing) += dataAccountantMan(consumption(pricing));
dataHeadMan (ConsumptionPricing pricing) += dataHeadMan(consumption(pricing));  

operation(ConsumptionPricing pricing) += pricingOperation(consumption(pricing));

@defineDocumentDescription(consumptionPricing, ConsumptionPricingDetail, 'Акт расценки на основе производства');
description (ConsumptionPricing pricing) += description(pricing);

sku(ConsumptionPricingDetail pricingDetail) +=  sku(consumptionDetail(pricingDetail));
quantity(ConsumptionPricingDetail pricingDetail) += quantity(consumptionDetail(pricingDetail));
show[PricingDetail](ConsumptionPricingDetail d) + {  show(consumptionDetail(d)); }

//-------------------------- Ценовые характеристики------------------------------------------
@defineDocumentAggregationDetailProperty (consumption, consumptionPricing, supplierPrice, 'Цена входная');
price(ConsumptionPricingDetail pricingDetail) += supplierPrice(pricingDetail);
@defineDocumentAggregationDetailProperty (consumption, consumptionPricing, supplierSum, 'Сумма входная');
sum(ConsumptionPricingDetail pricingDetail) += supplierSum(pricingDetail);

@defineDocumentAggregationDetailProperty (consumption, consumptionPricing, retailPrice, 'Цена выходная');
retailPrice(ConsumptionPricingDetail pricingDetail) += retailPrice(pricingDetail);
@defineDocumentAggregationDetailProperty (consumption, consumptionPricing, retailSum, 'Сумма выходная');
retailSum(ConsumptionPricingDetail pricingDetail) += retailSum(pricingDetail);

@defineDocumentAggregationDetailProperty (consumption, consumptionPricing, retailMarkup, 'Надбавка');
retailMarkup(ConsumptionPricingDetail pricingDetail) += retailMarkup(pricingDetail);
@defineDocumentAggregationDetailProperty (consumption, consumptionPricing, retailMarkupSum, 'Сумма надбавки');
retailMarkupSum(ConsumptionPricingDetail pricingDetail) += retailMarkupSum(pricingDetail);

@defineDocumentAggregationDetailProperty (consumption, consumptionPricing, valueRetailVAT, 'НДС, %');      // пока только значение ставки, без самой шкалы.!!!!!
valueRetailVAT(ConsumptionPricingDetail pricingDetail) += valueRetailVAT(pricingDetail);
@defineDocumentAggregationDetailProperty (consumption, consumptionPricing, retailVATSum, 'Сумма НДС');
retailVATSum(ConsumptionPricingDetail pricingDetail) += retailVATSum(pricingDetail);

edit (ConsumptionPricingDetail d)+ {  edit(consumptionDetail(d)); }

edit (ConsumptionPricing p)+ {  edit(consumption(p)); }
//--
quantity (consumption, consumptionPricing) = GROUP SUM quantity(consumptionDetail(ConsumptionPricingDetail detail)) BY consumption(consumptionDetail(detail)), consumptionPricing(detail);

consumptions 'Документы производства' (ConsumptionPricing consumptionPricing) = GROUP
                                                CONCAT STRING[255](description(Consumption consumption)) IF quantity (consumption, consumptionPricing) , ', '
                                                ORDER consumption CHARWIDTH 30 MATERIALIZED;


// Помечаем, что этот акт расценки не меняет текущие цены и является обратным
skipChangeLedger(ConsumptionPricingDetail d) += d IS ConsumptionPricingDetail;
isReturn(ConsumptionPricing pricing) += pricing IS ConsumptionPricing;
