MODULE ProductionOrder;

REQUIRE Substitute, PriceListType, PriceListCalc, StockTax, ProductionOperation, SkuLedgerTax, StockMovement, PurchaseLedger;

NAMESPACE Production;

// ----------------  Заказ ------------------- //
CLASS Order 'Производственный заказ';
TABLE order(Order);
TABLE sessionOrder(Session,Order);

@defineExternalizable(order, STRING[100]);
@defineDocumentHeaderTime(Order);
@deriveDocumentHeaderTimePrefix(Order, );

is (Order o) = o IS Order;
    
@defineDocumentHeaderNote(Order);

@defineDocumentHeaderNumber(Order, BPSTRING[2]);

@defineNumeratedDefault(Order, 'Производственные заказы', 'ПЗ');

@defineDocumentHeaderCreated(Order);
@defineDocumentHeaderPosted(Order);
@defineDocumentHeaderClosed(Order);

@defineDocumentHeaderPriceListType (order, priceListType, , ' (потребность)');

@defineDocumentHeaderPriceListType (order, calcPriceListType, , ' (надбавка-изделие)');
@defineDocumentHeaderPriceListType (order, priceListType, PriceListType, products, ' (изделие)');

VATComponent 'Включает НДС' = DATA BOOLEAN (Order);
VATComponent(Order order) <- includeVAT(priceListType(order)) WHEN CHANGED(priceListType(order));

VATProduct 'Включает НДС' = DATA BOOLEAN (Order);
VATProduct(Order order) <- includeVAT[PriceListType](calcPriceListType(order)) OR includeVAT(productsPriceListType(order)) 
    WHEN CHANGED(calcPriceListType(order)) OR CHANGED(productsPriceListType(order));

backgroundVAT 'Цвет' (Order order) = RGB(255, 255, 224) IF order IS Order;
VAT (Order o) = VATProduct(o) OR VATComponent(o);

@defineDocumentHeaderLegalEntity(order, company, 'Компания');

@defineDocumentHeaderStock (order, stock, 'Склад компонент', components);
@defineDocumentHeaderStock (order, stock, 'Склад изделий', products);

INDEX componentsStock(Order o);
INDEX productsStock(Order o);

@defineDocumentHeaderDatePrefix (Order, from, ' действия с');
@defineDocumentHeaderDatePrefix (Order, to, ' действия по');
description 'Название документа' (Order o) =
    CONCAT ' ', 'Производственный заказ' IF (seriesNumber(o) OR  date(o)), '№ ' + seriesNumber(o), 'от ' + date(o) CHARWIDTH 30;

CONSTRAINT company(Order order) AND productsStock(order) AND NOT
in(company(order), productsStock(order))
    CHECKED BY productsStock[Order]
        MESSAGE 'Организация и склад изделий для производственного заказа не имеют связи';
        
CONSTRAINT company(Order order) AND componentsStock(order) AND NOT
in(company(order), componentsStock(order))
    CHECKED BY componentsStock[Order]
        MESSAGE 'Организация и склад компонент для производственного заказа не имеют связи';

//
calcBOMPrice 'Расчет цен от коэффициента' = DATA BOOLEAN (Order);
calcBOMPrice 'Расчет цен от коэффициента' = DATA BOOLEAN (Operation);

EXTEND FORM operation
    PROPERTIES(o) calcBOMPrice 
;
DESIGN operation {
    paramsContainer {
        MOVE PROPERTY(calcBOMPrice(o));
    }
}

keepSupplier 'Сохранять поставщика' = DATA BOOLEAN (Order);

// ---------------- Изделия ------------------- //

CLASS ProductDetail 'Строка изделия';
TABLE productDetail (ProductDetail);
TABLE sessionProductDetail (Session, ProductDetail);

@defineExternalizable(productDetail, STRING[100]);
@defineDocumentRelation (order, ProductDetail, );
@defineDocumentDetailIndex (order, ProductDetail);
@defineDocumentDetailActionsCustom (order, ProductDetail);
@defineDocumentDetailPosted (order, ProductDetail);
@defineDocumentDetailClosed (order, ProductDetail);
@defineDocumentClosedConstraint(Order);

@defineDocumentDetailTime (order, ProductDetail);

@defineDocumentDetailDescription(order, ProductDetail);

seriesNumber 'Серия/Номер' = seriesNumber(order(ProductDetail d)) IN id;
series 'Серия' = series(order(ProductDetail d));
number 'Номер' = number(order(ProductDetail d));

currencyProduct (Order o) = currency(productsStock(o)) MATERIALIZED;
currency (ProductDetail productDetail) = currencyProduct(order(productDetail));

@defineDocumentDetailStock (order, productDetail, stock, componentsStock, 'Склад компонент');
//@defineDocumentDetailStock (order, productDetail, stock, productsStock, 'Склад изделий');
    productsStock (ProductDetail idetail) = productsStock(order(idetail)) MATERIALIZED;
    nameProductsStock 'Склад изделий' (ProductDetail idetail) = name(productsStock(idetail)) CHARWIDTH 10;
    fullNameProductsStock 'Склад изделий' (ProductDetail idetail) = fullName(productsStock(idetail)) CHARWIDTH 10;    
    countryProductsStock (ProductDetail idetail) = country(productsStock(idetail));
    legalEntityProductsStock (ProductDetail idetail) = legalEntity(productsStock(idetail));
    nameLegalEntityProductsStock 'Компания (Склад изделий)' (ProductDetail idetail) = name(legalEntityProductsStock (idetail));
    fullNameLegalEntityProductsStock 'Компания (Склад изделий) полное наим-ие' (ProductDetail idetail) = fullName(legalEntityProductsStock (idetail));
// Sku
@defineDocumentDetailSkuCustom (productDetail, sku);

CONSTRAINT SETCHANGED (sku(ProductDetail d)) AND NOT isProductGroup(sku(d)) CHECKED BY sku[ProductDetail]
    MESSAGE 'В качестве изделия выбран товар, который не входит в группу: Готовые изделия';

product 'Изделие' = DATA Product (ProductDetail) INDEXED;
nameProduct 'Изделие' (ProductDetail productDetail) = name(product(productDetail)) IN id;
idProduct 'Код изделия' (ProductDetail d) = id(product(d));
BOM 'Спецификация' (ProductDetail d) = BOM(product(d)) MATERIALIZED;

INDEX BOM(ProductDetail d), order(d);
INDEX order(ProductDetail d), BOM(d);

supplier = DATA LegalEntity (ProductDetail);
nameSupplier 'Поставщик' (ProductDetail d) = name(supplier(d));

isNotProduct 'Разрешить проводить документ без изделия ' = DATA BOOLEAN (Operation);

EXTEND FORM operation PROPERTIES (o) isNotProduct;

DESIGN operation {
    constraintContainer {
        MOVE PROPERTY(isNotProduct(o));
    }
}

CONSTRAINT (SETCHANGED(product(ProductDetail d)) OR SETCHANGED(componentsStock(d))) AND 
           BOM(d) AND componentsStock(d) AND countStocks(BOM(d)) AND NOT in(BOM(d), componentsStock(d))
    CHECKED BY product[ProductDetail]
    MESSAGE 'Для строки изделия в производственном заказе выбрана спецификация, которая не действует для склада компонента.';


UOM = UOM(product(ProductDetail productDetail));
shortNameUOM 'Ед. изм.' (ProductDetail productDetail) = shortName(UOM(productDetail)) IN id;

CONSTRAINT product(ProductDetail d) AND NOT sku(d) = sku(product(d)) CHECKED BY product[ProductDetail]
    MESSAGE 'Sku изделия и строки изделия не соответствуют друг другу';
    
productsChange(ProductDetail d) {
    IF componentsStock(d) THEN {
        productSku() <- sku(d);
        DIALOG productsChange OBJECTS st = componentsStock(d), p = product(d) CHANGE;
    } ELSE {
        MESSAGE 'Не выбран склад компонент';   
    } 
    productSku() <- NULL;
}

    
expiryDate 'Годен до (дата)' = DATA DATE (ProductDetail);
expiryTime 'Годен до (время)' = DATA TIME (ProductDetail);
expiryDateTime 'Годен до' (ProductDetail d) = dateTimeToDateTime(expiryDate(d), expiryTime(d));
overManufactureDate = ABSTRACT DATE (ProductDetail);
calcManufactureDate (ProductDetail d) = OVERRIDE 
    overManufactureDate(d),
    (IF expiryMonth(sku(d)) 
        THEN sumMonth(expiryDate(d), -expiryMonth(sku(d)))
        ELSE sum(expiryDate(d), -expiryDays(sku(d))));
calcManufactureDateTime (ProductDetail d) = OVERRIDE
    toDateTime(overManufactureDate(d)),
    (IF hoursExpiryPack(sku(d))
        THEN (sumMinutes(expiryDateTime(d), -60*hoursExpiryPack(sku(d))))
        ELSE IF expiryMonth(sku(d))
            THEN dateTimeToDateTime(sumMonth(expiryDateTime(d), -expiryMonth(sku(d))), expiryTime(d))
            ELSE sumDay(expiryDateTime(d), -expiryDays(sku(d))));
     
manufactureDate 'Дата изготовления' = DATA DATE (ProductDetail);
manufactureTime 'Время изготовления' = DATA TIME (ProductDetail);
manufactureDateTime 'Дата изготовления' (ProductDetail d) = dateTimeToDateTime(manufactureDate(d), manufactureTime(d));
overExpiryDate = ABSTRACT DATE (ProductDetail);      
calcExpiryDate (ProductDetail d) = OVERRIDE 
    overExpiryDate(d),
    (IF expiryMonth(sku(d)) 
        THEN sumMonth(manufactureDate(d), expiryMonth(sku(d)))
        ELSE sum(manufactureDate(d), expiryDays(sku(d))));
calcExpiryDateTime (ProductDetail d) = OVERRIDE
    toDateTime(overExpiryDate(d)),
    (IF hoursExpiryPack(sku(d))
        THEN (sumMinutes(manufactureDateTime(d), 60*hoursExpiryPack(sku(d))))
        ELSE IF expiryMonth(sku(d))
            THEN dateTimeToDateTime(sumMonth(manufactureDateTime(d), expiryMonth(sku(d))), manufactureTime(d))
            ELSE sumDay(manufactureDateTime(d), expiryDays(sku(d))));
    
denyRepeatSkuOrder 'Запретить повтор изделий в производственном заказе' = DATA BOOLEAN ();

EXTEND FORM options 
    PROPERTIES denyRepeatSkuOrder();

DESIGN options {
    manufacturing{
        MOVE PROPERTY (denyRepeatSkuOrder());
    }
}

CONSTRAINT denyRepeatSkuOrder() AND [ GROUP SUM 1 BY sku(ProductDetail d), order(d)](Sku s, Order o) > 1 MESSAGE 'Изделие может быть включено в заказ только один раз';

// Кол-во
@defineDocumentDetailQuantityCustom (productDetail);
@defineDocumentHeaderQuantityCustomPrefix (order, productDetail, , ' (изделие)');

calcBOMPrice = calcBOMPrice(order(ProductDetail d)) MATERIALIZED;

@defineDocumentDetailQuantityCustomPrefix(productDetail, BOM, ' в спецификации'); //-- первичное свойство

BOMQuantity(ProductDetail d) <- quantity(product(d))
    WHEN CHANGED (product(d));

quantityBOM 'Кол-во в спецификации' = quantity(product(ProductDetail d)) MATERIALIZED;
quantityPrice 'Кол-во для расчета цены' = IF calcBOMPrice(ProductDetail d) THEN
                                                            quantityBOM(d) ELSE
                                                            quantity(d) MATERIALIZED;

quantityProductDetail 'Кол-во изделий в документе' (sku, order) =  GROUP SUM quantity(ProductDetail productDetail)
    BY sku(productDetail), order(productDetail); 
countProductDetail 'Кол-во строк изделий в документе' (sku, order) = 
    GROUP SUM 1 BY  sku(ProductDetail idetail), order(idetail);  
    
//Процент и коэффициент цены
pricePercent 'Удельный вес цены,%' = DATA NUMERIC[16,10] (ProductDetail);

isPricePercent 'Удельный вес цены,%' = DATA BOOLEAN (Order);
isPriceCoeff 'Коэффициент цены' = DATA BOOLEAN (Order);

isPricePercent 'Удельный вес цены,%' = DATA BOOLEAN (Operation);
isPriceCoeff 'Коэффициент цены' = DATA BOOLEAN (Operation);

EXTEND FORM operation
    PROPERTIES(o) isPricePercent, isPriceCoeff 
;
DESIGN operation {
    showContainer {
        MOVE PROPERTY(isPricePercent(o));
        MOVE PROPERTY(isPriceCoeff(o));
    }
}

// Цены компонент
@defineDocumentDetailPriceCustomPrefix (productDetail, components, ' компонентов');

VATComponent (ProductDetail d) = VATComponent(order(d));
VATProduct 'Включает НДС' (ProductDetail d) = VATProduct(order(d));
addVAT = ABSTRACT VALUE BOOLEAN (ProductDetail) MATERIALIZED;  
addVAT (ProductDetail d) += VATComponent(d) AND NOT VATProduct(d); 

calcPriceListType (ProductDetail productDetail) = calcPriceListType(order(productDetail)) MATERIALIZED;
productsPriceListType (ProductDetail productDetail) = productsPriceListType(order(productDetail)) MATERIALIZED;
markup 'Надбавка, %' = DATA NUMERIC[10,4] (ProductDetail);
valueVAT 'НДС, %' = DATA NUMERIC[10,5] (ProductDetail);

// коэффициент с надбавкой и НДС
multiplierCalc (ProductDetail d) = 
    ((100.00 (+) markup(d)) *
    (100.00 (+) (valueVAT(d) IF addVAT(d))) 
    / 10000) IF d IS ProductDetail MATERIALIZED;


// Цены изделий
@defineDocumentDetailPriceCustomPrefix (productDetail, , ' изделия');
costPrice 'Себестоимость изделия' = DATA NUMERIC[16,4] (ProductDetail);


sum 'Сумма изделия' = DATA NUMERIC[18,4] (ProductDetail);
calcProductSum = ABSTRACT VALUE NUMERIC[18,4] (ProductDetail);
calcProductSum(ProductDetail productDetail) += NUMERIC[18,4](round2(quantity(productDetail) * price(productDetail))); 
sum(ProductDetail productDetail) <- calcProductSum(productDetail)
    WHEN CHANGED (quantity(productDetail)) OR
         CHANGED (price(productDetail)) OR
         CHANGED (productsStock(productDetail));

sumProductDetail 'Сумма заказанных изделий' (order) = GROUP SUM sum(ProductDetail idetail) BY order(idetail) IN documentSum;

// ------------- Компоненты ----------- //
CLASS ComponentDetail 'Строка компонента';
TABLE componentDetail (ComponentDetail);
TABLE sessionComponentDetail (Session, ComponentDetail);

order = DATA Order (ComponentDetail) NONULL DELETE AGGR;

countComponentDetail 'Кол-во строк' (o) =
    GROUP SUM 1 BY order(ComponentDetail d) MATERIALIZED IN documentSum;

@defineDocumentDetailIndex (order, ComponentDetail);
@defineDocumentDetailActionsCustom (order, ComponentDetail);
@defineDocumentDetailPosted (order, ComponentDetail);
@defineDocumentDetailClosed (order, ComponentDetail);

@defineDocumentDetailNumber(order, ComponentDetail);

@defineDocumentDetailTime (order, ComponentDetail);
@defineDocumentDetailDatePrefix (order, ComponentDetail, from, ' действия с');
@defineDocumentDetailDatePrefix (order, ComponentDetail, to, ' действия по');

@defineDocumentDetailDescription(order, ComponentDetail);

currencyComponent (Order o) = currency(componentsStock(o)) MATERIALIZED;
currency (ComponentDetail componentDetail) = currencyComponent(order(componentDetail));

@defineDocumentDetailStock (order, componentDetail, stock, componentsStock, 'Склад компонент') ;
@defineDocumentDetailStock (order, componentDetail, stock, productsStock, 'Склад изделий');

// Sku
@defineDocumentDetailSkuCustomPrefix (componentDetail, Sku, brutto, ' (брутто)');
VAT(ComponentDetail componentDetail) = VATComponent(order(componentDetail)) MATERIALIZED;

component = DATA Component (ComponentDetail) INDEXED;
nameComponent 'Компонент' (ComponentDetail componentDetail) = name(component(componentDetail));
idComponent 'Код компонента' (ComponentDetail componentDetail) = id(component(componentDetail));

CONSTRAINT SETCHANGED (bruttoSku(ComponentDetail d)) AND NOT isComponentGroup(bruttoSku(d)) CHECKED  BY bruttoSku[ComponentDetail]
    MESSAGE 'В качестве компонента выбран товар, который не входит в группу: Сырье';
    
UOM = UOM(component(ComponentDetail componentDetail));
shortNameUOM 'Ед. изм.' (ComponentDetail componentDetail) = shortName(UOM(componentDetail));

skipBom = ABSTRACT VALUE BOOLEAN (Order);
CONSTRAINT (CHANGED(component(ComponentDetail d)) OR CHANGED (bruttoSku(d))) AND component(d) AND bruttoSku(d) AND NOT bruttoSku(d) == sku(component(d)) AND NOT skipBom(order(d))
    CHECKED BY component[ComponentDetail] MESSAGE 'Sku компонента и строки компонента не соответствуют друг другу';

product = DATA Product (ComponentDetail) INDEXED;
nameMaterial 'Изделие' (ComponentDetail componentDetail) = name(product(componentDetail));

CONSTRAINT product(ComponentDetail d) AND bruttoSku(d) AND NOT bruttoSku(d) == sku(product(d)) AND NOT skipBom(order(d))
    CHECKED BY product[ComponentDetail] MESSAGE 'Sku изделия и строки компонента не соответствуют друг другу';

// Кол-во
@defineDocumentDetailQuantityCustomPrefix (componentDetail, brutto, ' (брутто)');
@defineDocumentDetailQuantityCustomPrefix(componentDetail, BOM, ' в спецификации'); //-- первичное свойство

@defineDocumentDetailPriceCustomPrefix (componentDetail, , );
cost 'Себестоимость' = DATA NUMERIC[16,4] (ComponentDetail);

// Замены
@defineDocumentDetailSkuCustomPrefix (componentDetail, Sku, substitute, ' (замена)');

@defineDocumentDetailQuantityCustomPrefix (componentDetail, substitute, ' (замена)');

bruttoQuantityBOM 'Кол-во в спецификации' = bruttoQuantity(component(ComponentDetail d), date(d));

// Параметры компонент с учетом замен

sku (ComponentDetail componentDetail) = OVERRIDE substituteSku(componentDetail), bruttoSku(componentDetail) MATERIALIZED;
nameSku 'SKU' (ComponentDetail componentDetail) = name(sku(componentDetail));
idSku 'Код ' (ComponentDetail componentDetail) = id(sku(componentDetail));
idBarcodeSku 'Штрихкод' (ComponentDetail componentDetail) = idBarcode(sku(componentDetail));
shortNameUOMSku 'Ед. изм.' (ComponentDetail componentDetail) = shortNameUOM(sku(componentDetail));

quantity 'Кол-во' (ComponentDetail componentDetail) = OVERRIDE substituteQuantity(componentDetail), bruttoQuantity(componentDetail) MATERIALIZED;

calcBOMPrice (ComponentDetail d) = calcBOMPrice(order(d));

quantityPrice 'Кол-во для расчета цены' (ComponentDetail d) = IF calcBOMPrice(d) THEN
                                                                bruttoQuantityBOM(d) ELSE
                                                                quantity(d);

// Сумма
@defineDocumentDetailDataSum (component);
@deriveDocumentDetailSum(component, quantity);

sumComponentDetail 'Сумма заказанных компонент' (order) = GROUP SUM sum(ComponentDetail idetail) BY order(idetail) IN documentSum;

@defineDocumentHeaderQuantityCustomPrefix (order, componentDetail, , ' (компонент)');
quantityComponentDetail 'Кол-во (всего) (компонент)' (sku, order) = GROUP SUM quantity(ComponentDetail idetail) BY sku(idetail), order(idetail) IN documentSum MATERIALIZED;

//-- Партия для строки компонента

hideBatch = ABSTRACT VALUE BOOLEAN (ComponentDetail);
showBatch(ComponentDetail d) = d IS ComponentDetail AND NOT hideBatch(d);
 
batch = DATA Batch (ComponentDetail) INDEXED;
nameBatch 'Партия' (ComponentDetail d) = name(batch(d)) CHARWIDTH 20;

INDEX sku(ComponentDetail cd), order(cd), batch(cd);

FORM dialogBatchStockOrder 'Партии'
    OBJECTS st = Stock PANEL
    OBJECTS t = DATETIME PANEL
    OBJECTS sk = Sku PANEL
    PROPERTIES(sk) READONLY name
    
    OBJECTS bt = Batch
    PROPERTIES (bt) READONLY number, series, dateTime, nameSupplier, idBarcodeSku, id SHOWIF showIDs(), shippedQuantity, cost, expiryDate
    PROPERTIES  READONLY balanceB(bt, st, t)
    PROPERTIES  READONLY currentBalance(bt, st)
    PROPERTIES(bt, st, t) READONLY accountPriceA
    
    FILTERS skuLedger(bt, st) == sk
    ORDERS dateTime(bt)
    
    FILTERGROUP batch
        FILTER 'Партии с остатком до операции' balanceB(bt, st, t) > 0 'F11'
        FILTER 'Партии с текущим остатком' currentBalance(bt, st) > 0 'F9' DEFAULT
        FILTER 'Партии с остатком' currentBalance(bt, st) 'F8'
;


changeBatch(ComponentDetail d)  { 
    DIALOG dialogBatchStockOrder OBJECTS st = componentsStock(d),
                             t = dateTime(d),
                             sk = sku(d),
                             bt = batch(d) INPUT NULL NEWSESSION DO
        batch(d) <- bt;
}


CONSTRAINT sku(batch(ComponentDetail cd)) != sku(cd) CHECKED BY batch[ComponentDetail]
    MESSAGE 'Товар партии строки компонента должен соответствовать SKU строки строки компонента для производственного заказа';  

// ------------- Заполнение компонентов из спецификаций --------------- //

TABLE productOrder(Product, Order);
quantity 'Кол-во изделий в заказе' (product, order) = GROUP SUM quantity(ProductDetail productDetail)
    BY product(productDetail), order(productDetail) MATERIALIZED;

TABLE BOMOrder(BOM, Order);
quantityProducts 'Кол-во спецификаций' (BOM BOM, Order order) = [ GROUP MAX NUMERIC[19,8](quantity(Product product, order)) / quantity(product)
    BY BOM(product)](BOM) MATERIALIZED;
    
BOM = DATA BOM (ComponentDetail);
INDEX BOM(ComponentDetail cd), order(cd);
INDEX order(ComponentDetail d), BOM(d);

nameBOM 'Спецификация' = name(BOM(ComponentDetail d));    
fullNameBOM 'Спецификация (полное название)' = fullName(BOM(ComponentDetail d));    

CONSTRAINT (SETCHANGED(BOM(ComponentDetail d)) OR SETCHANGED(componentsStock(d))) AND 
           BOM(d) AND componentsStock(d) AND countStocks(BOM(d)) AND NOT in(BOM(d), componentsStock(d))
    CHECKED BY BOM[ComponentDetail]
    MESSAGE 'Для строки компонента в производственном заказе выбрана спецификация, которая не действует для склада компонента.';

CONSTRAINT (SETCHANGED(component(ComponentDetail d)) OR SETCHANGED(componentsStock(d))) AND
           component(d) AND componentsStock(d) AND countStocks(BOM(component(d))) AND NOT in(BOM(component(d)), componentsStock(d))
    CHECKED BY BOM[ComponentDetail]
    MESSAGE 'Для строки компонента в производственном заказе выбрана компонента, которая не действует для склада компонента.';

overCreate  ABSTRACT (ComponentDetail);

createComponents 'Заполнить компоненты из спецификации'(BOM BOM, Order order)  { 
    FOR BOM(Component component) == BOM DO {
        NEW d=ComponentDetail {
            order(d) <- order;
            component(d) <- component;
            bruttoQuantity(d) <- bruttoQuantity(component, date(order)) * quantityProducts(BOM,order);
            BOMQuantity(d) <- bruttoQuantity(component, date(order)); 
            
            BOM(d) <- BOM; 
            
            IF material(component) IS Sku THEN {
                bruttoSku(d) <- material(component);
            } ELSE {
                IF material(component) IS Product THEN {
                    product(d) <- material(component);
                    bruttoSku(d) <- sku[Product](material(component));
                }
            }
            overCreate(d);
        }
    }    
}

createComponents 'Заполнить компоненты из спецификации'(Order order)  { 

    FOR quantityProducts(BOM BOM, order) DO {
        createComponents(BOM, order);
    }

} TOOLBAR;

recBruttoQuantity 'Рекур.кол-во' (BOM BOM, Order order, Sku sku) = GROUP SUM quantityProducts(BOM, order) * recBruttoQuantity(BOM, sku, date(order));
recBOMQuantity 'Рекур.кол-во' (BOM BOM, Order order, Sku sku) = GROUP SUM recBruttoQuantity(BOM, sku, date(order));

productionCoeff = ABSTRACT NUMERIC[20,9] (ComponentDetail);
quantityCoeff(ComponentDetail d) = OVERRIDE productionCoeff(d), 1.0 IF d IS ComponentDetail MATERIALIZED; 
createRecComponents 'Заполнить из спецификации (рекурсивно)'(Order order)  { 

    FOR NUMERIC[91,46] q == recBruttoQuantity(BOM BOM, order, Sku sku) ORDER BOM NEW d = ComponentDetail DO {
        order(d) <- order;
        BOM(d) <- BOM;
        bruttoSku(d) <- sku;
        bruttoQuantity(d) <- q;
        BOMQuantity(d)  <- recBOMQuantity(BOM, order, sku);
    }
} TOOLBAR;

calcSkuBruttoQuantity (ComponentDetail d) = recBruttoQuantity(BOM(d), order(d), sku(d)) * quantityCoeff(d);
calcSkuBOMQuantity (ComponentDetail d) = recBOMQuantity(BOM(d), order(d), sku(d)) * quantityCoeff(d);

updateComponentsOrder 'Пересчитать кол-во для всех'(order)  { 
    bruttoQuantity(ComponentDetail d) <- calcSkuBruttoQuantity (d);
    BOMQuantity(ComponentDetail d)  <- calcSkuBOMQuantity(d);
} TOOLBAR;

// ------------- Заполнение изделий из спецификаций --------------- //

quantityComponents 'Кол-во спецификаций' (BOM BOM, Order order) =
    [ GROUP MAX NUMERIC[19,8](bruttoQuantity(ComponentDetail componentDetail)) / bruttoQuantity(component(componentDetail), date(componentDetail))
    BY BOM(component(componentDetail)), order(componentDetail)](BOM, order);

overCreateProducts  ABSTRACT LIST ( Order);
sortOrder = ABSTRACT  STRING[100](Product, Order);
createProducts 'Заполнить изделия из спецификации '(Order order)  { 
    FOR NUMERIC[35,19] q == quantityComponents(BOM(Product product), order) ORDER sortOrder(product, order) NEW d = ProductDetail DO {
        order(d) <- order;
        sku(d) <- sku(product);
        product(d) <- product;
        quantity(d) <- round3(quantity(product) * q);
        BOMQuantity(d) <- quantity(product);
    }
    IF keepSupplier(order) THEN {
        supplier(ProductDetail d) <- 
              OVERRIDE
                (GROUP MAX prevSupplier(batch(ComponentDetail cd)) IF order(cd) == order),
                (GROUP MAX prevSupplierLastOrderBatch(sku(ComponentDetail cd), componentsStock(order)) IF order(cd) == order)
        WHERE order(d) = order;
    }
    overCreateProducts(order);
} TOOLBAR;

overCreate  ABSTRACT (ComponentDetail, ComponentDetail);

expand 'Развернуть изделие'(ComponentDetail componentDetail)  { 

    FOR  BOM(Component component) == BOM(product(componentDetail))  DO {
        NEW d=ComponentDetail {
            order(d) <- order(componentDetail);
            component(d) <- component;
            bruttoQuantity(d) <- bruttoQuantity(component, date(order(componentDetail))) *
                bruttoQuantity(componentDetail) / quantity(product(componentDetail));    //ceil
            BOMQuantity(d) <- bruttoQuantity(component, date(order(componentDetail))) *
                BOMQuantity(componentDetail) / quantity(product(componentDetail));    //ceil
                                
            BOM(d) <- BOM(componentDetail);     

            IF material(component) IS Sku THEN {
                bruttoSku(d) <- material(component);
            } ELSE {
                IF material(component) IS Product THEN {
                    product(d) <- material(component);
                    bruttoSku(d) <- sku[Product](material(component));
                }
            }
            overCreate(d, componentDetail);
        }
    }
    DELETE componentDetail;
} TOOLBAR;

background 'Цвет'  = ABSTRACT CASE COLOR (ComponentDetail);
background (ComponentDetail cd) += WHEN product(cd) THEN  RGB(255,255,229);

recBruttoQuantity 'Рекур.кол-во' (BOM BOM, Order order, Component component) = GROUP SUM quantityProducts(BOM, order) * recBruttoQuantity(BOM, component, date(order));
recBOMQuantity 'Рекур.кол-во' (BOM BOM, Order order, Component component) = GROUP SUM recBruttoQuantity(BOM, component, date(order));

calcComponentBruttoQuantity (ComponentDetail d) = recBruttoQuantity(BOM(d), order(d), component(d)) * quantityCoeff(d);
calcComponentBOMQuantity (ComponentDetail d) = recBOMQuantity(BOM(d), order(d), component(d)) * quantityCoeff(d);

overCreateForRecComponents  ABSTRACT LIST (BOM, Order);
skipCreateForRecComponents = ABSTRACT VALUE BOOLEAN (BOM);

createForRecComponents 'Заполнить из спецификации (рекурсивно по компонентам)'(BOM BOM, Order order) { 
    FOR NUMERIC[91,46] q == recBruttoQuantity(BOM, order, Component component) IF material(component) IS Sku AND NOT skipCreateForRecComponents(BOM) ORDER BOM NEW d = ComponentDetail DO {
        order(d) <- order;
        BOM(d) <- BOM;
        bruttoSku(d) <- material(component);
        component(d) <- component;
        bruttoQuantity(d) <- q;
        BOMQuantity(d) <- recBOMQuantity(BOM, order, component);
    }
    overCreateForRecComponents(BOM, order);
}

createForRecComponents 'Заполнить из спецификации (рекурсивно по компонентам)'(Order order)  { 

    FOR quantityProducts(BOM BOM, order) DO {
        createForRecComponents(BOM,order);
    }
} TOOLBAR;

// ---------------- Подбор цен и замен для sku --------------------------- //

TABLE skuOrder(Sku, Order);
TABLE substituteSkuOrder(Sku, Order);                                                                   

// --- Основной компонент --- //
bruttoQuantity 'Количество брутто' (sku, order) = GROUP SUM bruttoQuantity(ComponentDetail componentDetail)
                                                                BY bruttoSku(componentDetail),
                                                                   order(componentDetail) MATERIALIZED;
             
bruttoNotSubstituteQuantity 'Количество без замены' (sku, order) = GROUP SUM bruttoQuantity(ComponentDetail componentDetail) 
    IF NOT substituteQuantity(componentDetail)
    BY bruttoSku(componentDetail),
       order(componentDetail) MATERIALIZED;                                                                     

bruttoSubstituteQuantity (sku, order) = GROUP SUM bruttoQuantity(ComponentDetail componentDetail) 
    IF substituteQuantity(componentDetail)
    BY bruttoSku(componentDetail),
       order(componentDetail) MATERIALIZED TABLE substituteSkuOrder;                                                                                                                                   
                                                                                                                                 
// цены по товару
costPriceListType = DATA LedgerPriceListType (Operation);
nameCostPriceListType 'Вид цен (c/c) потребность' (Operation o)= name(costPriceListType(o)) IN documentPrm CHARWIDTH 5;

costPriceListType = DATA LedgerPriceListType (Order) PREREAD;
nameCostPriceListType 'Вид цен (c/c) потребность' (Order o)= name(costPriceListType(o)) IN documentPrm CHARWIDTH 5;


dataBruttoPrice 'Цена' = DATA NUMERIC[16,4] (Sku, Order);
cost 'Себестоимость' = DATA NUMERIC[16,4] (Sku, Order);

WHEN LOCAL (CHANGED(priceListType(Order order)) OR CHANGED(componentsStock(order)) OR CHANGED(dateTime(order)) OR SET(quantityComponentDetail(Sku sku, order)))
             AND quantityComponentDetail(sku, order) AND NOT CHANGED(dataBruttoPrice(sku, order)) AND PriceListType pt == priceListType(order) NOINLINE (pt) DO
    dataBruttoPrice (sku, order) <- prevPriceB(pt,sku,componentsStock(order),dateTime(order));

calcCost 'Себестоимость' (Sku sku, Stock stock) = [ GROUP SUM cost(Batch b) * prevCurrentBalance(b, stock) BY prevSkuCurrentBalance(b, stock)](sku) /
    (prevCurrentBalance(sku, stock) IF prevCurrentBalance(sku, stock) != 0);   

calcCost 'Себестоимость' (Sku sku, Stock stock, Order order) = IF costPriceListType(order) 
    THEN prevPriceB[LedgerPriceListType,Sku,Stock,DATETIME](costPriceListType(order),sku, stock,dateTime(order))
    ELSE (calcCost(sku, stock) IF order IS Order);   


WHEN LOCAL (CHANGED(quantityComponentDetail(Sku sku, Order order)) OR CHANGED(componentsStock(order)))
             AND quantityComponentDetail(sku, order) AND NOT CHANGED(cost(sku, order)) AND NOT costPriceListType(order) DO
    cost (sku, order) <-  NUMERIC[16,4](calcCost(sku, componentsStock(order)));

WHEN LOCAL (CHANGED(quantityComponentDetail(Sku sku, Order order)) OR ((CHANGED(componentsStock(order)) OR CHANGED(dateTime(order))) AND NOT isPosted(order)) OR CHANGED(costPriceListType(order)))    
            AND quantityComponentDetail(sku, order) AND NOT CHANGED(cost(sku, order)) AND costPriceListType(order) DO
    cost (sku, order) <-  NUMERIC[16,4](prevPriceB[LedgerPriceListType,Sku,Stock,DATETIME](costPriceListType(order),sku, componentsStock(order),dateTime(order)));   
// --- Замена --- //
substitute = DATA Sku (Sku, Order) TABLE substituteSkuOrder;
nameSubstitute 'Замена' (Sku sku, Order order) = name(substitute(sku, order));

substituteQuantity 'Кол-во замены' = DATA NUMERIC[16,5] (Sku, Order) TABLE substituteSkuOrder;
overSubstituteQuantity 'Кол-во' = OVERRIDE substituteQuantity(Sku sku, Order order), bruttoQuantity(sku, order);
multiplier 'Коэффициент замены' = DATA NUMERIC[10,5] (Sku, Order) TABLE substituteSkuOrder;

//--
stockSubstitutesSku = DATA LOCAL Stock ();
nameStockSubstitutesSku 'Склад' = name(stockSubstitutesSku());

BOMSubstitutesSku = DATA LOCAL BOM ();
productsBOMSubstitutesSku 'Спецификация' = products(BOMSubstitutesSku());

multiplierSubstitutes 'Коэффициент' = DATA LOCAL NUMERIC[8,3] (Sku);

currentBalanceSkuSubstitutes 'Текущий остаток' (Sku sku) =  currentBalance(sku, stockSubstitutesSku());

substitutesPrice 'Цена' (Sku sku,Order order)= prevPriceB(priceListType(order), sku, stockSubstitutesSku(), dateTime(order));
showPriceSubstitutes (Order order) = stockSubstitutesSku() AND priceListType(order);

multiplierSubstituteTo 'Коэффициент' (Sku fromSku ,Sku toSku) =  multiplier(uniqueSubstituteFromTo(fromSku ,toSku));
changeMultiplierSubstituteFromTo(Sku fromSku, Sku toSku)  { 
    INPUT n = NUMERIC[8,3] DO
        IF n THEN {         
            IF uniqueSubstituteFromTo(fromSku, toSku) THEN {
                multiplier(Substitute substitut) <- n WHERE uniqueSubstituteFromTo(fromSku, toSku) == substitut;
            } ELSE {
                NEW sub = Substitute{
                    fromSku(sub) <- fromSku;
                    toSku(sub) <- toSku;
                    multiplier(sub) <- n;
                }        
            }
        } ELSE {
            IF uniqueSubstituteFromTo(fromSku, toSku) THEN {
                DELETE Substitute substitut  WHERE uniqueSubstituteFromTo(fromSku, toSku) == substitut;
            }    
        }        
}
backgroundSubstitutes 'Цвет' (Order order) = RGB(255,224,255) IF order IS Order;

filterubstituteFromTo (Sku s,Sku sk) =  IF BOMSubstitutesSku() 
    THEN use(uniqueSubstituteFromTo(s,sk),BOMSubstitutesSku())
    ELSE TRUE IF uniqueSubstituteFromTo(s,sk);


FORM substitutesSku 'Замены'
    PROPERTIES() nameStockSubstitutesSku, productsBOMSubstitutesSku
    OBJECTS o = Order PANEL
    OBJECTS s = Sku PANEL
    PROPERTIES(s) name
    
    TREE skuTree sg = SkuGroup PARENT parent(sg)
    PROPERTIES READONLY order(sg), skuGroupName = name(sg)
    FILTERGROUP inactive FILTER 'Активные' active(sg) 'F6' DEFAULT
    ORDERS order(sg)
    
    OBJECTS sk = Sku
    PROPERTIES(sk) READONLY name, idBarcode, shortNameUOM
    PROPERTIES     READONLY SHOWIF stockSubstitutesSku() currentBalanceSkuSubstitutes(sk)
    PROPERTIES     READONLY SHOWIF showPriceSubstitutes(o) substitutesPrice(sk,o)

    PROPERTIES(s,sk) multiplierSubstituteTo ON CHANGE changeMultiplierSubstituteFromTo(s,sk) BACKGROUND  backgroundSubstitutes(o)
    PROPERTIES() addSku DRAW sk
    PROPERTIES(sk) EDIT NEWSESSION, copy
    FILTERS isParent(sg, sk)
    ORDERS name(sk)

    FILTERGROUP filter1
        FILTER 'Товары с остатком' currentBalanceSkuSubstitutes(sk) AND stockSubstitutesSku() 'F10' DEFAULT
    FILTERGROUP filter2
        FILTER 'Доступные замены' filterubstituteFromTo (s,sk) 'F9' DEFAULT
    FILTERGROUP filter3
        FILTER 'Сырье' isComponentGroup(sk) 'F8' DEFAULT                         
;

DESIGN substitutesSku {
    BOX {
        size = (1200, 768);

        NEW topContainer {
            horizontal = TRUE;
            fill = 1;

            MOVE BOX(TREE skuTree) {
                caption = 'Группы SKU';
            }

            MOVE BOX(sk) {
                fill = 3;
            }
        }
        NEW headerContainer BEFORE topContainer {
            horizontal = TRUE;
            NEW stockContainer {
                caption = 'Склад';
                MOVE PROPERTY (nameStockSubstitutesSku());
            }
            MOVE BOX(s) {
                caption = 'Заменяемый товар';
                MOVE PROPERTY (name(s));                
            };
            NEW BOMContainer {
                caption = 'Спецификация';
                MOVE PROPERTY (productsBOMSubstitutesSku());
            }            
        }
        REMOVE BOX(o);        
        MOVE TOOLBARBOX;
    }
}

chooseSubstitute 'Выбрать замену'(Sku fromSku, Order order)   { 
    stockSubstitutesSku() <- NULL;
    BOMSubstitutesSku() <- NULL;
    stockSubstitutesSku() <- componentsStock(order) WHERE componentsStock(order);

    DIALOG substitutesSku OBJECTS o = order, s = fromSku, sk = substitute(fromSku, order) INPUT NULL DO {
        substitute(fromSku, order) <- sk;
        multiplier(fromSku, order) <- multiplierSubstituteTo(fromSku, sk);
    }
}


currentBalance'Текущий остаток' (Substitute substitute, Order order) = currentBalance(toSku(substitute), componentsStock(order));
substitutesPrice 'Цена' (Substitute substitute, Order order)= prevPriceB(priceListType(order), toSku(substitute), componentsStock(order), dateTime(order));

// Действие по заполнении замены через галочку
is 'Использовать замену' (Substitute substitute, Sku sku, Order order) = substitute(sku, order) == toSku(substitute);
change(Substitute substitute, Sku sku, Order order)  { 
    INPUT b = BOOLEAN DO
        IF b THEN {
            substitute(sku, order) <- toSku(substitute);
            multiplier(sku, order) <- multiplier(substitute);
        } ELSE {
            substitute(sku, order) <- NULL;
            multiplier(sku, order) <- NULL;
        }
}

// коэффициенты цен
calcQuantityComponentsProductDetailProduct 'Кол-во компонентов' = GROUP SUM quantityPrice(ProductDetail d) BY BOM(d), order(d) MATERIALIZED;
calcQuantityComponents 'Кол-во компонентов' = calcQuantityComponentsProductDetailProduct(BOM(ProductDetail detail), order(detail));
            
calcPriceCoeff 'Коэффициент цены' (ProductDetail productDetail) = NUMERIC[20,5](calcQuantityComponents(productDetail) * pricePercent(productDetail) 
    / (quantityPrice(productDetail) * 100.0));  
     
calcPricePercentNumeric '%' (ProductDetail productDetail, NUMERIC[8,5] num) = (num AS NUMERIC[8,5]) * quantityPrice(productDetail) * 100.0 
    / calcQuantityComponents(productDetail);     
    
// Sku с учетом замены
sku (Sku sku, Order order) = OVERRIDE substitute(sku,order), sku IF bruttoQuantity(sku, order) MATERIALIZED;

nameSku 'Итоговый sku' (Sku sku,Order order)= name(sku (sku,order));
idBarcodeSku 'Штрихкод' (Sku sku,Order order) = idBarcode(sku (sku, order));
shortNameUOMSku 'Ед. изм.' (Sku sku,Order order) = shortNameUOM(sku (sku, order));

sumOver=ABSTRACT NUMERIC[18,4](ComponentDetail);
sumCustom(ComponentDetail c) = OVERRIDE sumOver(c), sum(c);
sumComponentDetail 'Сумма' (BOM, sku, order) = GROUP SUM sum(ComponentDetail d) BY BOM(d), sku(d), order(d);

sumComponentDetail = GROUP SUM sum(ComponentDetail d) BY BOM(d), order(d);
sumComponentDetailCustom 'Сумма'  = GROUP SUM sumCustom(ComponentDetail d) BY BOM(d), order(d);

quantityComponentDetail = GROUP SUM quantity(ComponentDetail d) BY BOM(d), order(d);
BOMQuantityComponentDetail = GROUP SUM BOMQuantity(ComponentDetail d) BY BOM(d), order(d);

priceComponents (BOM b, Order o) = sumComponentDetailCustom(b, o) / quantityComponentDetail(b, o);  

priceComponents (ProductDetail d) = sumComponentDetailCustom(BOM(d), order(d)) / quantity(d);

calcPricePercent(ProductDetail d) =  IF calcBOMPrice(d) THEN
                                                        NUMERIC[16,5](calcPricePercentNumeric(d, price(d) /
                                                                      priceComponents(BOM(d), order(d))))
                                                     ELSE
                                                        100 * price(d) / priceComponents(d);


calcComponentsPrice 'Цена расчетная с/с' (ProductDetail d) = IF calcBOMPrice(d) THEN // считаем цены от цены спецификации * коэффициент (чтобы избежать проблем с округлением)
                                                                                    priceComponents(BOM(d), order(d)) * 
                                                                                    calcPriceCoeff(d)
                                                                             ELSE
                                                                                    priceComponents (d) // Цена компонентов за единицу 
                                                                                    * pricePercent(d) / 100.0; // удельная цена
                    
costSumComponents =  GROUP SUM quantity(ComponentDetail d) * cost(d) BY BOM(d), order(d);
costComponents (BOM b, Order o) = costSumComponents(b, o) / quantityComponentDetail(b, o);

calcCost 'Себестоимость расчетная' (ProductDetail d)= IF calcBOMPrice(d) THEN // считаем цены от цены спецификации * коэффициент (чтобы избежать проблем с округлением)
                                                                            costSumComponents(BOM(d), order(d)) /
                                                                            quantityComponentDetail(BOM(d), order(d)) *
                                                                            calcPriceCoeff(d)
                                                                      ELSE
                                                                            costSumComponents(BOM(d), order(d)) // Цена компонентов за единицу 
                                                                            / quantity(d)
                                                                            * pricePercent(d) / 100.0; // удельная цена

//calcCostProductDetail 'Себестоимость расчетная' (d)= bruttoCostSumComponentsBOMOrder(BOMProductDetail(d), orderProductDetail(d)) 
//                                                                      * pricePercentProductDetail(d) / 100.0 // удельная цена
//                                                                      / quantityProductDetail(d); // за единицу

//-- Подсчет цены изделия с учетом замен
//recPricePercentProductSkuOrder (product, sku, order) = recPricePercentProductSkuDate (product, sku, dateOrder(order));
roundPrice = ABSTRACT INTEGER (ProductDetail);     
calcPremiumPrice 'Цена расчетная (с надбавками)' (ProductDetail productDetail) = CASE
    WHEN roundPrice(productDetail)  THEN NUMERIC[16,4](round(componentsPrice(productDetail) * multiplierCalc(productDetail), roundPrice(productDetail)))
    WHEN roundCondition(calcPriceListType(productDetail), sku(productDetail)) THEN
        NUMERIC[16,4](round(componentsPrice(productDetail) * multiplierCalc(productDetail), roundCondition(calcPriceListType(productDetail), sku(productDetail))))
    ELSE
        NUMERIC[16,4](round(componentsPrice(productDetail) * multiplierCalc(productDetail), currency(productDetail)));
  
//calcPremiumPrice 'Цена расчетная (с надбавками)' (ProductDetail productDetail) =
//    IF roundCondition(calcPriceListType(productDetail), sku(productDetail)) THEN
//        NUMERIC[16,4](round(componentsPrice(productDetail) * multiplierCalc(productDetail),
//                                               roundCondition(calcPriceListType(productDetail), sku(productDetail))))
//    ELSE
//        NUMERIC[16,4](round(componentsPrice(productDetail) * multiplierCalc(productDetail),
//                                         currency(productDetail)));        
                                         
// Изменение надбавок при вводе пользователем процента

changeValueMarkup (ProductDetail detail)  { 
    IF calcPremiumPrice(detail) THEN {
        price(detail) <- calcPremiumPrice(detail);
    }
}

changeComponentsPrice (ProductDetail detail)  { 
    INPUT n = NUMERIC[16,4] DO {
        componentsPrice (detail) <- n;
        IF n THEN
            changeValueMarkup(detail);
    }
}

// Изменение коэффициентов и цен
overChangePriceCoeff  ABSTRACT LIST ( ProductDetail);
changePriceCoeff(ProductDetail detail)  { 
    INPUT n = NUMERIC[8,5] DO {        
        pricePercent(detail) <- NUMERIC[16,5](calcPricePercentNumeric(detail, n));
        componentsPrice(detail) <- NUMERIC[16,4](calcComponentsPrice(detail));
        costPrice(detail) <- NUMERIC[16,4](calcCost(detail));
        changeValueMarkup(detail);
        overChangePriceCoeff(detail);
    }
}
overChangePricePercent  ABSTRACT LIST ( ProductDetail);
changePricePercent(ProductDetail detail)  { 
    INPUT n = NUMERIC[16,5] DO {
        pricePercent(detail) <- n; 
        componentsPrice(detail) <- NUMERIC[16,4](calcComponentsPrice(detail));
        costPrice(detail) <- NUMERIC[16,4](calcCost(detail));
        changeValueMarkup(detail);
        overChangePricePercent(detail);
    }
}   


changeMarkup (ProductDetail detail)  { 
    INPUT n = NUMERIC[10,4] DO {
        markup (detail) <- n;
        IF n THEN
            changeValueMarkup(detail);
    }
}

calcMarkupIsVAT(ProductDetail d)  = [ round2(((X/Z*100/(100+Y))-1)*100)](
    price(d),
    calcComponentsPrice(d) IF calcComponentsPrice(d) != 0.0,
    valueVAT(d));
calcMarkup(ProductDetail d)  = [ round2((X/Y-1)*100)](
    price(d),
    calcComponentsPrice(d) IF calcComponentsPrice(d) != 0.0);    

notRecalculateMarkup = ABSTRACT BOOLEAN (Order);
notRecalculateMarkupOrder(ProductDetail detail) = notRecalculateMarkup(order(detail)); 

changeValueProductsPrice (ProductDetail detail)  { 
    IF addVAT(detail) THEN {
        markup(detail) <- calcMarkupIsVAT(detail);
        IF notRecalculateMarkupOrder(detail) THEN {
            pricePercent(detail) <- calcPricePercent(detail);
        }
    }
    IF NOT addVAT(detail) THEN {
        markup(detail) <- calcMarkup(detail);
        IF notRecalculateMarkupOrder(detail) THEN {
            pricePercent(detail) <- calcPricePercent(detail);
        }
    }
}

//пересчет цены изделия
                                                                                             
overChangeProductsPrice  ABSTRACT LIST ( ProductDetail);
changeProductsPrice (ProductDetail detail)  { 
    INPUT n = NUMERIC[16,4] DO {
        price (detail) <- n;
        IF notRecalculateMarkupOrder(detail) THEN {
            pricePercent(detail) <- NUMERIC[16,10](calcPricePercent(detail));
            componentsPrice(detail) <- NUMERIC[16,4](calcComponentsPrice(detail));
            costPrice(detail) <- NUMERIC[16,4](calcCost(detail)); 
            overChangeProductsPrice(detail);               
        } ELSE {
            changeValueProductsPrice(detail);    
        }   
    }
}

recordMarkup(ProductDetail detail)  { 
    IF calcPriceListType(detail) THEN {
        markup(detail) <- markup(calcPriceListType(detail), sku(detail));
        changeValueMarkup(detail);
    }
}

// расчет НДС
valueVAT 'НДС, %' = DATA NUMERIC[10,5] (Sku, Order);

WHEN LOCAL (CHANGED(componentsCountry(Order order)) OR
              CHANGED(date(order)) OR 
              CHANGED(VAT(order)) OR 
              SET(quantityComponentDetail(Sku sku, order)))
                 AND quantityComponentDetail(sku, order)
                 AND VAT(order) DO {                                      
    valueVAT(sku, order) <- valueVAT(sku, componentsCountry(order), date(order));
}
     
//calcPriceVATProductDetail 'Цена НДС' (d) = [ GROUP SUM bruttoSumComponentsBOMSkuOrder(b, s, o) * valueVATSkuOrder(s, o) / (100.0 + valueVATSkuOrder(s, o)) BY b, o] (BOMProductDetail(d), orderProductDetail(d)) 
//                                                            * (pricePercentProductDetail(d) / 100.0) // удельная цена
//                                                            / quantityProductDetail(d) // за единицу
//                                                            / coeffPercentProductDetail(d); 
//              
//calcValueVATProductDetail 'НДС, %' (productDetail)= [ 100*X/(Y-X)](
//    calcPriceVATProductDetail(productDetail), calcComponentsPriceProductDetail(productDetail));
//    
////--  если стоит галочка isVATOrder    
//calcPriceIsVATProductDetail 'Цена НДС' (d) = [ GROUP SUM bruttoSumComponentsBOMSkuOrder(b, s, o) * valueVATSkuOrder(s, o) / 100.0 BY b, o] (BOMProductDetail(d), orderProductDetail(d)) 
//                                                         * (pricePercentProductDetail(d) / 100.0) // удельная цена
//                                                         / quantityProductDetail(d) // за единицу
//                                                         / coeffPercentProductDetail(d);       
//   
//calcValueIsVATProductDetail 'НДС, %' (productDetail)= [ 100*X/Y](
//    calcPriceIsVATProductDetail(productDetail), calcComponentsPriceProductDetail(productDetail) IF calcComponentsPriceProductDetail(productDetail)!= 0);    
//

// todo : надо поддержать галочку Включает НДС (проблема в том, что для учетной цены определить включает она НДС или нет тяжело)

skip(d) = ABSTRACT BOOLEAN (ComponentDetail);

valueVAT(ComponentDetail d) = OVERRIDE valueVAT(batch(d)) IF (valueVAT(batch(d)) !=0.0), valueVAT(sku(d), order(d)) MATERIALIZED;
sumVAT (ComponentDetail d) = sum(d) * valueVAT(d) / (100.0 + valueVAT(d));
sumVATComponents (ProductDetail d) = [ GROUP SUM sumVAT(ComponentDetail cd) IF NOT skip(cd) BY BOM(cd), order(cd)](BOM(d), order(d)); 
sumVATComponentDetail = GROUP SUM sum(ComponentDetail d) IF NOT skip(d) BY BOM(d), order(d);                                                            
      
useVATItem 'НДС изделия из карточки' = DATA BOOLEAN (Operation);
EXTEND FORM operation PROPERTIES (o) useVATItem;

DESIGN operation {
    paramsContainer {
        MOVE PROPERTY(useVATItem(o));
    }
}
overCalcValueVAT = ABSTRACT NUMERIC[10,5](ProductDetail); 
calcValueVAT 'НДС, %' (ProductDetail d) = OVERRIDE  overCalcValueVAT(d),
                                                    (sumVATComponents(d) * 100.0 / (sumVATComponentDetail(BOM(d), order(d)) - sumVATComponents(d))), 
                                                    0.0;        
                                                     
// Расчет цен для изделий
overFillPrice  ABSTRACT LIST ( ProductDetail);
overFillPriceAfter  ABSTRACT LIST ( ProductDetail);
fillPriceExtra  ABSTRACT LIST ( ProductDetail);
usePriceExtra  = ABSTRACT BOOLEAN ( Order);

fillPrice 'Заполнить цены для изделий'(ProductDetail detail)  { 
    valueVAT(detail) <- calcValueVAT(detail);
    componentsPrice(detail) <- calcComponentsPrice(detail);
    costPrice(detail) <- calcCost(detail);
    overFillPrice(detail);
    IF productsPriceListType(detail) AND prevPriceB(productsPriceListType(detail),sku(detail),productsStock(detail),dateTime(detail))    THEN {
                                                                                              
        price(detail) <- prevPriceB(productsPriceListType(detail),sku(detail),productsStock(detail),dateTime(detail));  
        changeValueProductsPrice(detail);                                                                                
                                                                                         
    }
    IF calcPriceListType(detail) AND markup(calcPriceListType(detail), sku(detail)) AND NOT 
        (productsPriceListType(detail) AND prevPriceB(productsPriceListType(detail),sku(detail),productsStock(detail),dateTime(detail))) THEN {
        markup(detail) <- markup(calcPriceListType(detail), sku(detail));
        changeValueMarkup(detail);
    }
    overFillPriceAfter(detail);
} TOOLBAR;
fillPriceExtra  ABSTRACT LIST (Order);

fillPriceProducts 'Заполнить цены для изделий'(Order order)  {
    IF usePriceExtra(order) THEN {
        FOR order(ProductDetail detail) == order INLINE DO {
            fillPriceExtra(detail);                                                    
        }
    } ELSE 
        FOR order(ProductDetail detail) == order INLINE DO {
            fillPrice(detail);                                                    
        }
    fillPriceExtra(order);
} TOOLBAR;

//-- Замены для компонентов

substituteQuantityCalc = ABSTRACT CASE NUMERIC[16,5](ComponentDetail, Sku);
substituteQuantityCalc(ComponentDetail detail, Sku sk) += WHEN detail IS ComponentDetail AND sk IS Sku THEN NUMERIC[14,3](multiplierSubstituteTo(bruttoSku(detail), sk)* bruttoQuantity(detail));

chooseSubstitute 'Выбрать замену'(ComponentDetail detail)   { 
    stockSubstitutesSku() <- NULL;
    BOMSubstitutesSku()<- NULL;
    
    stockSubstitutesSku() <- componentsStock(detail) WHERE componentsStock(detail);
    BOMSubstitutesSku() <- BOM(detail) WHERE BOM(detail);

    DIALOG substitutesSku OBJECTS o= order(detail), s = bruttoSku(detail), sk = substituteSku(detail) INPUT NULL DO {
        substituteSku(detail) <- sk; 
        substituteQuantity(detail) <- substituteQuantityCalc(detail, sk);           
    }    
}

// ------------- Формы ----------- //

backgroundSubstitutes 'Цвет' (Sku sku, Order order) = RGB(255,224,255) IF substituteQuantity(sku, order);


resetSubstitute 'Сбросить все замены'(Order order)  { 
    FOR substitute(Sku sku, order) OR multiplier(sku, order) DO {
        substitute(sku, order) <- NULL;
        multiplier(sku, order) <- NULL;
        valueVAT(sku, order) <- NULL;
        substituteQuantity(sku, order) <- NULL;
    }
} TOOLBAR;

deleteComponents 'Очистить'(Order order)   { 
    deleteComponentDetail(order);
    resetSubstitute(order);
} TOOLBAR;

priceStock = DATA Stock(Order);
namePriceStock 'Склад' = name(priceStock(Order order));

calcCost 'Себестоимость' = calcCost(Sku sku, priceStock(Order order), order);

CONSTRAINT  priceStock(Order o) AND NOT isCompany(priceStock(o)) CHECKED BY priceStock[Order]    
        MESSAGE 'Склад для цен не является складом компании';
priceStock 'Цена' (Sku sku, Order order)= prevPriceB(priceListType(order), sku, priceStock(order), dateTime(order));                                                                                                                                                               

priceStock (Order order) <- componentsStock(order)
    WHEN CHANGED(componentsStock(order));
    
FORM multiplier 'Коэффициент'    
    OBJECTS nu = NUMERIC[8,3] PANEL
    PROPERTIES  val= VALUE (nu)
;
DESIGN multiplier {
    BOX(nu) {
        caption = '';
        PROPERTY(val) { caption = 'Введите коэффициент цены' ; font = 'bold 36'; } 
    }
} 

fillSubstitutePriceFromTo 'Использовать цену'(Order order, Sku sku, Sku skuSubstitute)  { 
    IF multiplierSubstituteTo(sku, skuSubstitute) THEN {
        dataBruttoPrice(sku, order) <- NUMERIC[16,4](multiplierSubstituteTo(sku, skuSubstitute)*priceStock(skuSubstitute,order));
        cost(sku, order) <- NUMERIC[16,4](multiplierSubstituteTo(sku, skuSubstitute)*calcCost(skuSubstitute,priceStock(order),order));
    } ELSE {
        DIALOG multiplier OBJECTS nu INPUT DO {
            dataBruttoPrice(sku, order) <- NUMERIC[16,4](nu*priceStock(skuSubstitute,order));
            cost(sku, order) <- NUMERIC[16,4](nu*calcCost(skuSubstitute,priceStock(order),order));
        }
    }        
} TOOLBAR;  

currentBalancePriceStock 'Текущий остаток' (Sku s, Order o) = currentBalance(s, priceStock(o));
prevCurrentBalancePriceStock 'Текущий остаток'(Sku s, Order o) = prevCurrentBalance(s, priceStock(o));

addBalancePriceStock = ABSTRACT NUMERIC[16,5] (Sku, Order);

prevBalancePriceStock 'Текущий остаток' (Sku s, Order o) = prevCurrentBalancePriceStock(s, o) (+) addBalancePriceStock(s, o); 
 
currentBalanceSkuPriceStockSku 'Остаток с уч. коэфф.'  (Order order, Sku fromSku, Sku toSku) = currentBalancePriceStock(toSku, order) / multiplierSubstituteTo(fromSku, toSku);

prevBalanceSkuPriceStockSku 'Остаток с уч. коэфф.' (Order order, Sku fromSku, Sku toSku) = prevBalancePriceStock(toSku, order) / multiplierSubstituteTo(fromSku, toSku);

//maxSubstitutePriceSkuOrder = GROUP MAX multiplierSubstituteFromToSku(sku, skuSubstitute)*priceStockSkuOrder(skuSubstitute,order) IF 
//    currentBalanceSkuPriceStockOrder(skuSubstitute,order) >0 AND (multiplierSubstituteFromToSku(sku, skuSubstitute)*priceStockSkuOrder(skuSubstitute,order)) 
//    BY sku, order; 
//minSubstitutePriceSkuOrder = GROUP MIN multiplierSubstituteFromToSku(sku, skuSubstitute)*priceStockSkuOrder(skuSubstitute,order) IF 
//    currentBalanceSkuPriceStockOrder(skuSubstitute,order) >0 AND (multiplierSubstituteFromToSku(sku, skuSubstitute)*priceStockSkuOrder(skuSubstitute,order)) 
//    BY sku, order;    
maxSubstituteSkuPrice (Sku sku, Order order) = GROUP 
    LAST Sku skuSubstitute
    ORDER multiplierSubstituteTo(sku, skuSubstitute)*priceStock(skuSubstitute,order), skuSubstitute     
    WHERE currentBalancePriceStock(skuSubstitute,order) >0 AND multiplierSubstituteTo(sku, skuSubstitute) AND priceStock(skuSubstitute,order) 
;    
minSubstituteSkuPrice (Sku sku, Order order) = GROUP 
    LAST Sku skuSubstitute
    ORDER DESC multiplierSubstituteTo(sku, skuSubstitute)*priceStock(skuSubstitute,order), skuSubstitute
    WHERE currentBalancePriceStock(skuSubstitute,order) >0 AND multiplierSubstituteTo(sku, skuSubstitute) AND priceStock(skuSubstitute,order) 
;          
         
fillSubstitutePriceMaxFrom 'Исп. max цену'(Order order, Sku sku)  { 
    LOCAL sku = Sku ();
    sku() <- NULL;
    sku() <- maxSubstituteSkuPrice(sku, order);
    
    dataBruttoPrice(sku, order) <- NUMERIC[16,4](multiplierSubstituteTo(sku, sku())*priceStock(sku(),order)) WHERE sku();     
    cost(sku, order) <- NUMERIC[16,4](calcCost(sku(),priceStock(order),order)) WHERE sku();   
};  
fillSubstitutePriceMinFrom 'Исп. min цену'(Order order, Sku sku)  { 
    LOCAL sku = Sku ();
    sku() <- NULL;
    sku() <- minSubstituteSkuPrice(sku, order);

    dataBruttoPrice(sku, order) <- NUMERIC[16,4](multiplierSubstituteTo(sku, sku())*priceStock(sku(),order)) WHERE sku();      
    cost(sku, order) <- NUMERIC[16,4](calcCost(sku(),priceStock(order),order)) WHERE sku();   
       
};   

fillSubstitutePriceMax 'Исп. max цену'(Order order)  { 
    FOR quantityComponentDetail(Sku sku,order) DO {
        fillSubstitutePriceMaxFrom(order,sku);
    }   
        
} TOOLBAR;  
fillSubstitutePriceMin 'Исп. min цену'(Order order)  { 
    FOR quantityComponentDetail(Sku sku,order) DO {
        fillSubstitutePriceMinFrom(order,sku);
    }       
} TOOLBAR;   
//--
maxSkuBalanceSubstitute (Sku sku, Order order) =
    GROUP
          LAST Sku skuSubstitute
          ORDER (currentBalancePriceStock(skuSubstitute,order) /(multiplierSubstituteTo(sku, skuSubstitute) IF multiplierSubstituteTo(sku, skuSubstitute)!=0)), skuSubstitute
          WHERE priceStock(skuSubstitute,order) AND currentBalancePriceStock(skuSubstitute,order) AND multiplierSubstituteTo(sku, skuSubstitute);

fillSubstitutePriceMaxBalanceFrom 'Исп. цену большего остатка'(Order order, Sku sku)  { 
    LOCAL sku = Sku();
    sku() <- NULL;
    sku() <- maxSkuBalanceSubstitute (sku, order);
    dataBruttoPrice(sku, order) <- NUMERIC[16,4](priceStock(sku(),order)*multiplierSubstituteTo(sku, sku())) WHERE sku();     
    cost(sku, order) <- NUMERIC[16,4](calcCost(sku(),priceStock(order),order)) WHERE sku();   
     
}; 
fillSubstitutePriceMaxBalance 'Исп. цену большего остатка'(Order order)  { 
    FOR quantityComponentDetail(Sku sku,order) DO {
        fillSubstitutePriceMaxBalanceFrom(order,sku);
    }        
} TOOLBAR; 
    
backgroundMarkup = ABSTRACT CASE COLOR (ProductDetail);  

  
  //toSkuSubstitute(substitute)
bruttoBalance 'Текущий остаток с учетом замен' (Sku sku,Order order) = currentBalance(sku, componentsStock(order)) (+) 
    [GROUP SUM NUMERIC[19,8](currentBalance(Substitute substitute, order)) / (multiplier(substitute) IF multiplier(substitute) != 0) 
        BY fromSku(substitute)](sku);  
 
bruttoBalanceToSku 'Текущий остаток с учетом замен' (Substitute su, Order order)= bruttoBalance(toSku(su), order); 

@defineDocumentDialogStock(order, company,  components, company, );

@defineDocumentDialogStock(order, company,  products, company, );

backgroundBalancePriceStock = ABSTRACT CASE COLOR (Sku, Order);  
backgroundBalancePriceStock(Sku s, Order o) += WHEN quantityComponentDetail(s,o) > prevBalancePriceStock(s,o) THEN RGB (255,156,156);
  
editSku 'Редактировать SKU' (ProductDetail d)  { NEWSESSION { edit(sku(d)); } }
editBruttoSku 'Редактировать SKU' (ComponentDetail d)  { NEWSESSION { edit(bruttoSku(d)); } }

showBOMQuantity 'Показывать количество в спецификации' = DATA BOOLEAN (Order);
showBOMQuantity= showBOMQuantity(order(ProductDetail pd));
showBOMQuantity= showBOMQuantity(order(ComponentDetail pd));

background = ABSTRACT CASE COLOR (ProductDetail);

useOwnChangeComponentsStock = ABSTRACT BOOLEAN(Order);
changeProductsStockCompanyCustom ABSTRACT (Order); 
changeProductsStockCompanyOver(Order o) {
    IF NOT useOwnChangeComponentsStock(o) THEN {
        changeProductsStockCompany(o);
    } ELSE {
        changeProductsStockCompanyCustom(o);
    }
}


FORM order 'Производственный заказ'

    OBJECTS o = Order PANEL
    PROPERTIES(o) isPosted, nameCompany, nameComponentsStock ON CHANGE changeComponentsStockCompany(o), 
                  nameProductsStock ON CHANGE changeProductsStockCompanyOver(o), nameNumerator, number, series,
                  date, time, fromDate, toDate, note, quantityProductDetail, sumProductDetail, 
                  quantityComponentDetail, sumComponentDetail, calcBOMPrice, isPricePercent, isPriceCoeff , keepSupplier
    PROPERTIES(o)   nameCalcPriceListType, nameProductsPriceListType, VATProduct, showBOMQuantity
    OBJECTS pd=ProductDetail
    PROPERTIES(pd) BACKGROUND background(pd) index, nameSku ON EDIT editSku(pd), idProduct SHOWIF showIDs(), nameProduct ON CHANGE productsChange(pd), shortNameUOM, nameSupplier
    PROPERTIES(pd) expiryDate, expiryTime, manufactureDate, manufactureTime, BOMQuantity READONLY SHOWIF showBOMQuantity(o), quantity,
                   calcComponentsPrice READONLY, componentsPrice ON CHANGE changeComponentsPrice(pd),
                   costPrice
    PROPERTIES(pd) markup ON CHANGE changeMarkup(pd) BACKGROUND backgroundMarkup(pd),
                   pricePercent SHOWIF isPricePercent(o) ON CHANGE changePricePercent(pd), 
                   calcPriceCoeff SHOWIF isPriceCoeff(o) ON CHANGE changePriceCoeff(pd),                   
                   price ON CHANGE changeProductsPrice(pd), sum
    PROPERTIES(pd) BACKGROUND backgroundVAT(o) SHOWIF VATProduct(o) valueVAT
    PROPERTIES(pd) newpd =NEW, deletepd=DELETE GRID
    PROPERTIES(o) DRAW pd createProducts, fillPriceProducts, deleteProductDetail

    FILTERS order(pd)==o

    OBJECTS cd = ComponentDetail
    PROPERTIES(cd) BACKGROUND background(cd) index, bruttoNameSku ON EDIT editBruttoSku(cd), nameBatch ON CHANGE changeBatch(cd) SHOWIF showBatch(cd),
                   nameMaterial, 
                   idComponent SHOWIF showIDs(), nameComponent,    
                   fullNameBOM, shortNameUOM READONLY,  BOMQuantity READONLY SHOWIF showBOMQuantity(o),bruttoQuantity ON CONTEXTMENU updateComponentsOrder(o)
    PROPERTIES(cd) BACKGROUND backgroundSubstitutes(o) substituteNameSku ON CHANGE chooseSubstitute(cd), substituteQuantity
    PROPERTIES(cd) cost, price
    PROPERTIES(cd) sum

    PROPERTIES(o) DRAW cd createComponents, createRecComponents, createForRecComponents
    PROPERTIES(cd) expand SHOWIF product(cd)
    PROPERTIES(cd) add=NEW, deletecd=DELETE GRID
    PROPERTIES(o) DRAW cd deleteComponents

    FILTERS order(cd)==o

    OBJECTS s = Sku
    PROPERTIES(s) READONLY name, idBarcode, shortNameUOM
    PROPERTIES(s,o) READONLY bruttoQuantity, bruttoBalance

    PROPERTIES(s,o) BACKGROUND backgroundSubstitutes(o) nameSubstitute ON CHANGE chooseSubstitute(s,o), 
                    multiplier, substituteQuantity 
    PROPERTIES(s,o) READONLY bruttoNotSubstituteQuantity
    FILTERS bruttoQuantity(s,o)

    PROPERTIES(o)  namePriceListType, nameCostPriceListType, VATComponent  BACKGROUND backgroundVAT(o)//, nameComponentsCalcPriceListTypeOrder

    OBJECTS su = Substitute
    PROPERTIES(su) READONLY nameToSku, multiplier
    PROPERTIES(su,s,o) is ON CHANGE change(su,s,o)
    PROPERTIES     READONLY currentBalance(su,o), bruttoBalanceToSku(su,o)
    FILTERS fromSku(su) == s
    FILTERGROUP filter3
        FILTER 'Сырье' isComponentGroup(toSku(su)) 'F10' DEFAULT 
    
    OBJECTS sk = Sku
    PROPERTIES(sk) READONLY name, idBarcode, shortNameUOM
        
    PROPERTIES(sk,o) quantityComponentDetail, prevBalancePriceStock BACKGROUND backgroundBalancePriceStock(sk,o), cost, dataBruttoPrice,  
                    valueVAT BACKGROUND backgroundVAT(o) SHOWIF VAT(o)
    FILTERS quantityComponentDetail(sk,o)    
        
    PROPERTIES namePriceStock(o)    
           
    OBJECTS sku = Sku
    PROPERTIES(sku) READONLY name, idBarcode, shortNameUOM
    PROPERTIES(sku,o) READONLY prevBalancePriceStock, calcCost, priceStock
    PROPERTIES(sk,sku) READONLY multiplierSubstituteTo  
    PROPERTIES READONLY currentBalanceSkuPriceStockSku(o, sk, sku), prevBalanceSkuPriceStockSku(o, sk, sku)
    
    PROPERTIES fillSubstitutePriceFromTo(o,sk,sku), fillSubstitutePriceMax(o) DRAW sk, fillSubstitutePriceMin(o) DRAW sk,
               fillSubstitutePriceMaxBalance(o) DRAW sk
        
    FILTERGROUP filter1
        FILTER 'Доступные замены' uniqueSubstituteFromTo(sk,sku) 'F9'     
    FILTERGROUP filter2
        FILTER 'С остатком' prevBalancePriceStock(sku,o) 'F8' DEFAULT                                                          

    EVENTS
        ON OK prePost(o)
    EDIT Order OBJECT o
;

DESIGN order {

    BOX {
        size = (1024, 768);
        NEW specificationBox BEFORE TOOLBARBOX{
            fill = 1;
            tabbed = TRUE;
            NEW row1 {
                caption = 'Изделия';
                NEW row111{
                    caption = 'Цена изделий';
                    horizontal = TRUE;
                    MOVE PROPERTY(nameCalcPriceListType(o));
                    MOVE PROPERTY(nameProductsPriceListType(o));
                    MOVE PROPERTY(VATProduct(o));
                }
                MOVE BOX(pd);
            }
            MOVE BOX(cd) { caption = 'Компоненты';}
            NEW row2 {
                caption = 'Замена';
                horizontal = TRUE;                    
                MOVE BOX(s) {fill = 2;}
                MOVE BOX(su);
            }
            NEW price {
                caption = 'Цены';
                horizontal = TRUE;
                NEW price1 {
                    fill = 1;
                    NEW price11{
                        caption = 'Цена компонент';
                        horizontal = TRUE;
                        MOVE PROPERTY(namePriceListType(o));
                        MOVE PROPERTY(VATComponent(o));
                        MOVE PROPERTY(nameCostPriceListType(o));
                    }
                    MOVE BOX(sk);  
                }                
                       
                NEW price2 {
                    fill = 1;
                    NEW price2a { 
                        fill = 1;
                        NEW price2a1{
                            caption = 'Фильтр складов для цен';
                            MOVE PROPERTY(namePriceStock(o)); 
                        }
                        MOVE BOX(sku);  
                    }
                    NEW price2b {
                        fill = 1;
                    }
                }  
            }
            NEW options {
                caption = 'Настройки';
                NEW options1 {
                    horizontal = TRUE;
                }
                NEW options2 {
                    caption = 'Дополнительные параметры';
                    lines = 4;
                    MOVE PROPERTY (calcBOMPrice(o));
                    MOVE PROPERTY (isPricePercent(o));
                    MOVE PROPERTY (isPriceCoeff(o));
                    MOVE PROPERTY (showBOMQuantity(o)); 
                    MOVE PROPERTY (keepSupplier(o)); 
                } 
            }
        }

        NEW headerBox BEFORE specificationBox {
            horizontal = TRUE;

            NEW headerRow1 {
                MOVE GROUP(documentHeader,o) {
                    lines = 1;
                    alignment = STRETCH;
                    horizontal = TRUE;
                    MOVE PROPERTY(isPosted(o)) { charWidth = 10; }
                    MOVE PROPERTY(nameNumerator(o));
                    MOVE PROPERTY(number(o));
                    MOVE PROPERTY(series(o));
                    MOVE PROPERTY(date(o));
                    MOVE PROPERTY(time(o));
                }
                NEW headerRow11 {
                    alignment = STRETCH;
                    horizontal = TRUE;
                    NEW headerRowC {
                        caption = 'Организация';
                        MOVE PROPERTY(nameCompany(o));
                    }
                    NEW headerRow111 {
                        caption = 'Склады';
                        horizontal = TRUE;
                        MOVE PROPERTY(nameComponentsStock(o));
                        MOVE PROPERTY(nameProductsStock(o));
                    }
                }
                NEW headerRow112 {
                    alignment = STRETCH;
                    horizontal = TRUE;
                }
                NEW headerRow12 {
                    alignment = STRETCH;
                    horizontal = TRUE;
                    MOVE GROUP(documentPrm,o) {
                        fill = 1;
                        lines = 1;
                        horizontal = TRUE;
                    }
                    NEW timeRow {
                        caption = 'Срок действия';
                        horizontal = TRUE;
                        MOVE PROPERTY(fromDate(o));
                        MOVE PROPERTY(toDate(o));
                    }
                }
                NEW headerRow3 {
                    alignment = STRETCH;
                    horizontal = TRUE;
                }
            }

            MOVE GROUP(documentSum,o) {
                lines = 1;
            }
        }

        PROPERTY(formOk()) {
            caption = 'Провести';
        }
        PROPERTY(sumProductDetail(o)) { charWidth = 13;}
    }
}

@addEventGenerateNumberOnForm(order, o, order);

//WHEN LOCAL FORMS order CHANGED(bruttoQuantitySkuOrder(sku,order)) OR CHANGED(multiplierSkuOrder(sku, order)) DO                                              
//    substituteQuantitySkuOrder(sku, order) <- bruttoQuantitySkuOrder(sku,order) * multiplierSkuOrder(sku, order);                              
//                   
//WHEN LOCAL FORMS order CHANGED(substituteSkuOrder(bruttoSkuComponentDetail(detail), orderComponentDetail(detail))) DO
//    substituteSkuComponentDetail (detail) <- substituteSkuOrder(bruttoSkuComponentDetail(detail), orderComponentDetail(detail));                    
//                    
//WHEN LOCAL FORMS order CHANGED(substituteQuantitySkuOrder(bruttoSkuComponentDetail(detail), orderComponentDetail(detail))) OR 
//    CHANGED(multiplierSkuOrder(bruttoSkuComponentDetail(detail), orderComponentDetail(detail))) DO 
//        substituteQuantityComponentDetail (detail) <- NUMERIC[14,3](multiplierSkuOrder(bruttoSkuComponentDetail(detail), orderComponentDetail(detail))* bruttoQuantityComponentDetail(detail));

useSubstitute 'Можно использовать замену' (ComponentDetail detail) = use(
    uniqueSubstituteFromTo(bruttoSku(detail), substitute(bruttoSku(detail), order(detail))), 
    BOM(detail));    
                
usePrevSubstitute 'Можно использовать замену' (ComponentDetail detail) = use(
    uniqueSubstituteFromTo(bruttoSku(detail), PREV(substitute(bruttoSku(detail), order(detail)))), 
    BOM(detail));                  

WHEN LOCAL FORMS order CHANGED(componentsStock(Order order)) DO {                                              
    priceStock (order) <- componentsStock(order);
}

WHEN LOCAL FORMS order CHANGED(bruttoSubstituteQuantity(Sku sku,Order order)) 
    OR CHANGED(multiplier(sku, order)) DO {                                              
        substituteQuantity(sku, order) <- bruttoSubstituteQuantity(sku,order) * multiplier(sku, order);                              
    }      
                   
WHEN LOCAL FORMS order 
    CHANGED(substitute(Sku s, Order o)) DO {
        substituteSku (ComponentDetail detail) <- substitute(s, o) WHERE bruttoSku(detail) == s AND order(detail) == o AND useSubstitute(detail); 
    }

substituteQuantityCalcForms = ABSTRACT CASE NUMERIC[16,5](ComponentDetail,Sku);

substituteQuantityCalcForms(ComponentDetail detail,Sku s) += WHEN detail IS ComponentDetail AND s IS Sku THEN  NUMERIC[14,3](multiplier(s, order(detail)) * bruttoQuantity(detail));
WHEN LOCAL FORMS order
    CHANGED(multiplier(Sku s, Order o)) DO {
        substituteQuantity (ComponentDetail detail) <- substituteQuantityCalcForms(detail,s) WHERE bruttoSku(detail) == s AND order(detail) == o AND useSubstitute(detail);
    }
//WHEN LOCAL FORMS order DROPPED (multiplier(bruttoSku(ComponentDetail detail), order(detail))) DO {
//        substituteSku (detail) <- NULL WHERE usePrevSubstitute(detail); 
//        substituteQuantity (detail) <- NULL WHERE usePrevSubstitute(detail);    
//    }   
 
calc(PriceListType pt, ComponentDetail detail) =  OVERRIDE prevPriceB(pt,batch(detail),componentsStock(order(detail)),dateTime(order(detail))), 
                                                              dataBruttoPrice(sku(detail), order(detail)) IF pt IS PriceListType;

calcPrice = ABSTRACT VALUE NUMERIC[16,4] (PriceListType, ComponentDetail);
calcPrice(PriceListType pt, ComponentDetail d) += NUMERIC[16,4](calc(pt,d)); 
changeComponentDetail = ABSTRACT VALUE BOOLEAN (ComponentDetail);
WHEN LOCAL FORMS order (CHANGED(dataBruttoPrice(sku(ComponentDetail detail), order(detail))) OR 
                          CHANGED(batch(detail)) OR 
                          CHANGED(componentsStock(order(detail))) OR 
                          CHANGED(dateTime(order(detail))) OR
                          changeComponentDetail(detail)) AND
                          PriceListType pt == priceListType(order(detail)) NOINLINE (pt) DO
    price (detail) <- calcPrice(pt, detail); 

additionalCost = ABSTRACT NUMERIC[16,4](ComponentDetail);         
calcCost = (OVERRIDE prevCost(batch(ComponentDetail detail)), cost(sku(detail), order(detail))); 

skipSetCost = ABSTRACT BOOLEAN (ComponentDetail);
WHEN LOCAL FORMS order (CHANGED(cost(sku(ComponentDetail detail), order(detail))) OR CHANGED(batch(detail))) AND NOT skipSetCost(detail) DO
    cost (detail) <- calcCost(detail);           
       
WHEN LOCAL FORMS order CHANGED(product(ProductDetail detail)) DO
    sku(detail) <- sku(product(detail));                 
              
countProducts (sku) = GROUP SUM 1 BY sku(Product p) MATERIALIZED ;
isActiveBOM (sku) = GROUP SUM 1 IF isActive(BOM(Product p)) BY sku(p);
//defaultProductSku (sku)= GROUP MIN product BY skuProduct(product);

countProducts (sku, Stock stock, DATE date) = GROUP SUM 1 IF isActive(BOM(Product p), date) AND in(BOM(p), stock) BY sku(p);
defaultProduct (sku, Stock stock, DATE date)= GROUP MIN Product p IF isActive(BOM(p), date) AND in(BOM(p), stock) BY sku(p);

WHEN LOCAL FORMS order CHANGED(sku(ProductDetail d)) AND NOT CHANGED(product(d)) AND countProducts(sku(d), componentsStock(d), date(d)) == 1 NOINLINE DO {
    product(d) <- defaultProduct(sku(d), componentsStock(d), date(d));
}     
                                                                     
countBOMsSku (material) = GROUP SUM 1 IF material(Component c) AS Sku BY material(c) MATERIALIZED;
isActiveBOMSku (material) = GROUP SUM 1 IF isActive(BOM(Component c)) AND material(c) AS Sku BY material(c);

EXTEND FORM BOMs
    FILTERGROUP prod 
        FILTER 'Активные' isActiveBOM(p1) 'F7' DEFAULT 
        FILTER 'Есть спецификации' countProducts(p1) 'F8'     
    
    FILTERGROUP comp 
        FILTER 'Активные' isActiveBOMSku(c2) 'F7' DEFAULT   
        FILTER 'Есть спецификации' countBOMsSku(c2) 'F8'                                                              
                                                  
    FILTERGROUP bom1 FILTER 'Активные' isActive(b1) 'F7' DEFAULT                                                     
    FILTERGROUP bom2 FILTER 'Активные' isActive(b2) 'F7' DEFAULT                                                     
;                                                               
countComponents (material, Stock stock, DATE date) = GROUP SUM 1 IF isActive(BOM(Component c), date) AND in(BOM(c),stock) BY material(c) AS Sku;
defaultComponents (material, Stock stock, DATE date)= GROUP MIN Component c IF isActive(BOM(c), date) AND in(BOM(c),stock) BY material(c) AS Sku;                                                                  
                                                                     
//WHEN LOCAL FORMS order CHANGED(bruttoSkuComponentDetail(d)) NOINLINE DO {
//    componentComponentDetail(d) <- defaultComponentsSku(bruttoSkuComponentDetail(d))
//        WHERE countComponentsSku(bruttoSkuComponentDetail(d)) == 1;
//}  todo: переделано, потому что не срабатывает событие по CHANGED(componentComponentDetail(d)), которое следует за ним.

WHEN LOCAL FORMS order CHANGED(bruttoSku(ComponentDetail d)) AND d IS ComponentDetail AND NOT CHANGED(component(d)) AND NOT CHANGED(BOM(d)) AND countComponents(bruttoSku(d), componentsStock(d), date(d)) == 1 NOINLINE DO {
    component(d) <- defaultComponents(bruttoSku(d), componentsStock(d), date(d));
    BOM(d) <- BOM(component(d));              
}
WHEN LOCAL FORMS order CHANGED(component(ComponentDetail d)) AND d IS ComponentDetail AND NOT CHANGED(BOM(d)) NOINLINE DO {
    BOM(d) <- BOM(component(d));    
    bruttoSku(d) <- sku(material(component(d)));       
}
 
WHEN LOCAL FORMS order CHANGED(product(ProductDetail d)) NOINLINE DO {
    pricePercent(d) <- pricePercent(product(d))
        WHERE pricePercent(product(d));
} 


WHEN LOCAL FORMS order (CHANGED(expiryDate(ProductDetail d)) OR CHANGED(sku(d)) OR CHANGED(expiryTime(d))) AND expiryDate(d) DO {
    IF expiryTime(d) THEN {
        manufactureDate(d) <- toDate(calcManufactureDateTime(d));
        manufactureTime(d) <- toTime(calcManufactureDateTime(d));
    } ELSE {
        manufactureDate(d) <- calcManufactureDate(d);
    }
}
WHEN LOCAL FORMS order (CHANGED(manufactureDate(ProductDetail d)) OR CHANGED(sku(d)) OR CHANGED(manufactureTime(d))) AND manufactureDate(d) DO {
    IF manufactureTime(d) THEN {
        expiryDate(d) <- toDate(calcExpiryDateTime(d));
        expiryTime(d) <- toTime(calcExpiryDateTime(d));
    } ELSE {
        expiryDate(d) <- calcExpiryDate(d);
    }
}

overShowEdit = ABSTRACT BOOLEAN (Order);
overShowDelete = ABSTRACT BOOLEAN (Order);

skipShowEdit = ABSTRACT BOOLEAN (Order);
skipShowDelete = ABSTRACT BOOLEAN (Order);

filterOrderDateFrom 'Дата с' = DATA LOCAL DATE ();
filterDateFrom (Order i) = date(i) >= filterOrderDateFrom() OR (i IS Order AND NOT filterOrderDateFrom());      

filterOrderDateTo 'Дата по' = DATA LOCAL DATE ();
filterDateTo (Order i) = date(i) <= filterOrderDateTo() OR (i IS Order AND NOT filterOrderDateTo());      
 
filterOrderComponentsStock  = DATA LOCAL Stock ();
nameFilterOrderComponentsStock 'Склад компонент' = name(filterOrderComponentsStock()) CHARWIDTH 15;          
filterComponentsStock (Order i) = componentsStock(i) == filterOrderComponentsStock() OR (i IS Order AND NOT filterOrderComponentsStock());    

filterOrderProductsStock  = DATA LOCAL Stock ();
nameFilterOrderProductsStock 'Склад изделий' = name(filterOrderProductsStock()) CHARWIDTH 15;          
filterProductsStock (Order i) = productsStock(i) == filterOrderProductsStock() OR (i IS Order AND NOT filterOrderProductsStock());      

filterOrderCustomUser  = DATA LOCAL CustomUser ();
nameFilterOrderCustomUser 'Создан пользователем' = name[Contact](filterOrderCustomUser()) CHARWIDTH 15;          
filterCustomUser (Order i) = createdUser(i) == filterOrderCustomUser() OR (i IS Order AND NOT filterOrderCustomUser());  

filterOrderComputer = DATA LOCAL Computer ();
nameFilterOrderComputer 'Создан на компьютере' = hostname(filterOrderComputer()) CHARWIDTH 15;          
filterComputer (Order i) = createdComputer(i) == filterOrderComputer() OR (i IS Order AND NOT filterOrderComputer());

CONSTRAINT filterOrderProductsStock() AND NOT isCompany(filterOrderProductsStock())
    CHECKED BY filterOrderProductsStock[] MESSAGE 'Склад изделий в фильтре для производственного заказа не является складом компании';
CONSTRAINT filterOrderComponentsStock() AND NOT isCompany(filterOrderComponentsStock())
    CHECKED BY filterOrderComponentsStock[] MESSAGE 'Склад компонент в фильтре для производственного заказа не является складом компании';

FORM orders 'Производственные заказы'

        PROPERTIES() filterOrderDateFrom, filterOrderDateTo, nameFilterOrderComponentsStock, nameFilterOrderProductsStock, 
                     nameFilterOrderCustomUser, nameFilterOrderComputer

    OBJECTS o = Order
    PROPERTIES(o) READONLYIF isReadonly() isClosed, isPosted, number, series, date, time, nameCompany,
                  nameComponentsStock, nameProductsStock,
                  fromDate, toDate
    PROPERTIES(o) READONLY quantityProductDetail, sumProductDetail, quantityComponentDetail, sumComponentDetail
    PROPERTIES(o) READONLYIF isReadonly() nameCalcPriceListType, namePriceListType, note

    PROPERTIES(o) NEWSESSION addo=NEW, editO = EDIT SHOWIF overShowEdit(o)
    PROPERTIES(o) close SHOWIF isOpened(o), open SHOWIF isClosed(o)      
    PROPERTIES(o) NEWSESSION deleteo=DELETE SHOWIF overShowDelete(o)
    PROPERTIES (o) READONLY PANEL createdNameUser, createdTime, createdHostnameComputer, 
                                        postedNameUser, postedTime, postedHostnameComputer

    OBJECTS pd=ProductDetail
    PROPERTIES(pd) READONLY index, nameSku, idProduct SHOWIF showIDs(), nameProduct, nameSupplier,
                   shortNameUOM, expiryDate, manufactureDate, BOMQuantity SHOWIF showBOMQuantity(o), quantity, 
                   calcComponentsPrice, componentsPrice, 
                   costPrice, markup, pricePercent SHOWIF isPricePercent(o), calcPriceCoeff SHOWIF isPriceCoeff(o),
                   price, sum 
    FILTERS order(pd)==o

    OBJECTS cd = ComponentDetail
    PROPERTIES(cd) READONLY BACKGROUND background(cd) index, bruttoNameSku, nameBatch SHOWIF showBatch(cd), 
                   idComponent SHOWIF showIDs(), nameComponent,
                   shortNameUOM, BOMQuantity SHOWIF showBOMQuantity(o), bruttoQuantity//, overCalcPriceComponentDetail 
    PROPERTIES(cd) READONLY BACKGROUND backgroundSubstitutes(o) substituteNameSku, substituteQuantity
    PROPERTIES(cd) READONLY cost, price
    PROPERTIES(cd) READONLY sum

    FILTERS order(cd)==o
    
    OBJECTS s = Sku
    PROPERTIES(s) READONLY name, idBarcode, shortNameUOM
    PROPERTIES(s,o) READONLY bruttoQuantity
    PROPERTIES(s,o) READONLY BACKGROUND backgroundSubstitutes(o) nameSubstitute ON CHANGE chooseSubstitute(s,o), multiplier, substituteQuantity 
    FILTERS bruttoQuantity(s,o)
    
    OBJECTS sk = Sku
    PROPERTIES(sk) READONLY name, idBarcode, shortNameUOM
        
    PROPERTIES(sk,o) READONLY quantityComponentDetail, cost, dataBruttoPrice, 
                    valueVAT BACKGROUND backgroundVAT(o) SHOWIF VAT(o)
    FILTERS quantityComponentDetail(sk,o)                
    FILTERS filterDateFrom(o), 
            filterDateTo(o),
            filterComponentsStock(o),
            filterProductsStock(o),
            filterCustomUser(o),
            filterComputer(o)
    LIST Order OBJECT o 
;
DESIGN orders {
    NEW documentContainer BEFORE TOOLBARBOX {
        fill = 1;

        NEW filtersBox {                       
            fill = 1;
            NEW topFilters {
                caption = 'Фильтры';
                NEW topFilters1 {
                    horizontal = TRUE; 
                    MOVE PROPERTY(filterOrderDateFrom());
                    MOVE PROPERTY(filterOrderDateTo());                            
                    MOVE PROPERTY(nameFilterOrderComponentsStock());   
                    MOVE PROPERTY(nameFilterOrderProductsStock());    
                    MOVE PROPERTY(nameFilterOrderCustomUser());
                    MOVE PROPERTY(nameFilterOrderComputer());                                                                                
                }
//                NEW topFilters2 {
//                    horizontal = TRUE; 
//                    MOVE PROPERTY(nameFilterOrderCustomUser());
//                    MOVE PROPERTY(nameFilterOrderComputer());                            
//                }                                                                                         
            }
            MOVE BOX(o) {
                fill = 1;
            }
        }

        NEW documentDetail {
            tabbed = TRUE;
            fill = 1;
            MOVE BOX(pd) {
                caption = 'Изделия';
            }
            MOVE BOX(cd) {
                caption = 'Компоненты';
            }
            MOVE BOX(s) {
                caption = 'Замены';
            }
            MOVE BOX(sk) {
                caption = 'Цены';
            }            
            NEW documentHistory {
                caption = 'История';

                MOVE GROUP(created,o);
                MOVE GROUP(posted,o);
            }
            
            NEW printTabContainer {
                caption = 'Печатные формы';
                NEW printTabScroll {
                    fill = 1;
                    height = 1;
                    width = 1;
                    NEW printTab {
                        fill = 1;
                        NEW printContainer {
                            fill = 1;
                            caption = 'Печать';
                        }
                    }
                }
            }            
            NEW actionContainer {
                caption = 'Действия';
                horizontal = TRUE;
                NEW createdContainer {
                    caption = 'Создание на основе';
                }
                NEW machineryContainer {
                    caption = 'Загрузка';
                }
            }
        }
    }
}
@extendFormEditable(orders);
@defineFilterIsOpened (order, orders, o);

EXTEND FORM orders FILTERS (accessCompany(currentUser(),productsStock(o)) OR NOT productsStock(o)) OR
                           (accessCompany(currentUser(),componentsStock(o)) OR NOT componentsStock(o))
;

isProduction = ABSTRACT CASE BOOLEAN (Order, LONG); 
EXTEND FORM orders
    OBJECTS dLog=DocumentLog GRID
    PROPERTIES(dLog) SHOWIF enableDocumentLog() READONLY numberDocument, seriesDocument, dateDocument, nameSupplierStock, nameCustomerStock, typeDocument,
                  hostnameComputer, userLogin, nameContact, dateTimeSession, nameTypeChange,
                  note
    PROPERTIES (dLog) openFile SHOWIF showFile(dLog)
    FILTERS isProduction(o, documentId(dLog))

    OBJECTS ddLog = DocumentDetailLog GRID
    PROPERTIES (ddLog) SHOWIF enableDocumentLog() READONLY index, idSku, nameSku, quantity,
                   price, nameUser, dateTime, note
    FILTERS isProduction(o, documentId(ddLog))
;

DESIGN orders {
    documentHistory { 
        NEW historyTabs {
             fill = 1;
             tabbed = TRUE;
             NEW historyLog{
                caption = 'По документу';
                MOVE BOX(dLog);
             }
             NEW detailLog{
                 caption = 'По строкам';
                 MOVE BOX(ddLog);
             }
        }
    }    
}   

NAVIGATOR {
    manufacturingDocuments {
        NEW orders;
    }
    manufacturingMasterData {
        NEW operations;
    }
}
FORM componentDetails 'Строка компонента'
    OBJECTS d = ComponentDetail
    PROPERTIES(d) READONLY index, nameSku, shortNameUOM,
                           description, quantity

    LIST ComponentDetail OBJECT d
;

FORM productDetails 'Строка изделия'
    OBJECTS d = ProductDetail
    PROPERTIES(d) READONLY index, nameSku, nameProduct, shortNameUOM, 
                  expiryDate, manufactureDate, description,
                  quantity, price, sum

    LIST ProductDetail OBJECT d
;

// ---------- Требование на сырье -------- //

FORM requestSkusProductOrder 'Требование на сырье по изделиям'

    OBJECTS o = Order PANEL SUBREPORT
    PROPERTIES(o) nameProductsLegalEntityStock, nameComponentsStock, nameProductsStock, number, series, seriesNumber,
                  date, time, fromDate, toDate
                  
    OBJECTS pd=ProductDetail
    PROPERTIES(pd) READONLY index, nameSku, idProduct, nameProduct, 
                   shortNameUOM, quantity, calcComponentsPrice, componentsPrice, 
                   costPrice, markup, pricePercent, calcPriceCoeff,
                   price, sum
    FILTERS order(pd)==o                  
                  
    OBJECTS cd = ComponentDetail
    PROPERTIES(cd) READONLY index, nameSku, nameComponent, shortNameUOMSku,
                   idBarcodeSku, quantity

    FILTERS order(cd)==o,
            BOM(cd) == BOM(pd)
;
printRequestSkusProduct'Требование на сырье по изделиям' (Order order)  { PRINT requestSkusProductOrder OBJECTS o = order; }  IMAGE 'print.png' IN print;

currentBalanceComponentsStock 'Текущий остаток' = currentBalance(Sku sku, componentsStock(Order order));
FORM requestSkusOrder 'Требование на сырье'

    OBJECTS o = Order PANEL SUBREPORT
    PROPERTIES(o) nameProductsLegalEntityStock, nameComponentsStock, nameProductsStock, number, series, seriesNumber,
                  date, time, fromDate, toDate
                  
    OBJECTS sk = Sku
    PROPERTIES(sk) READONLY name, idBarcode, shortNameUOM
        
    PROPERTIES(sk,o) READONLY quantityComponentDetail, bruttoBalance
    FILTERS quantityComponentDetail(sk,o)    
;
printRequestSkus 'Требование на сырье' (Order order)  { PRINT requestSkusOrder OBJECTS o = order; }  IMAGE 'print.png' IN print;
EXTEND FORM orders
    PROPERTIES(o)  printRequestSkus, printRequestSkusProduct
;
DESIGN orders {printTab { MOVE GROUP(print,o) {align = START;}}}
//------------------------------------------ Опеределение операции для order ------------------------------------//

operation = DATA Operation (Order) MATERIALIZED INDEXED;
nameOperation 'Операция' = name(operation(Order order));

operation (ProductDetail d) = operation(order(d));
nameOperation 'Операция' (ProductDetail d)= name(operation (d));

operation (ComponentDetail d) = operation(order(d));
nameOperation 'Операция' (ComponentDetail d)= name(operation (d));

@deriveDocumentOperationProperty(Order, showBOMQuantity);

@deriveDocumentOperationProperty(Order, costPriceListType);
//-- Партия для строки компонента
hideBatchComponent 'Не показывать партии' = DATA BOOLEAN (Operation);
EXTEND FORM operation
    PROPERTIES(o) hideBatchComponent
;
DESIGN operation {
    showContainer {
        MOVE PROPERTY(hideBatchComponent(o));
    }
}

overCalcValueVAT(ProductDetail d)+= valueVAT(sku(d),productsStock(d), date(d)) IF useVATItem(operation(d));

filterOrderOperation = DATA LOCAL Operation ();
nameFilterOrderOperation 'Операция' = name(filterOrderOperation()) CHARWIDTH 15;          
filterOperation (Order i) = operation(i) == filterOrderOperation() OR (i IS Order AND NOT filterOrderOperation());

EXTEND FORM orders
    PROPERTIES () nameFilterOrderOperation
    FILTERS filterOperation(o)
;
DESIGN orders {
    topFilters1 {
        horizontal = TRUE; 
        MOVE PROPERTY(nameFilterOrderOperation()) AFTER PROPERTY(filterOrderDateTo());                                                                           
    }
}


hideBatchComponent = hideBatchComponent(operation(Order o));
showBatchComponent(Order o) = o IS Order AND NOT hideBatchComponent(o); 
hideBatch (ComponentDetail d) += hideBatchComponent(operation(d));

DESIGN options {
    pane {        
        NEW productionOrders {
            caption = 'Производственный заказ';
        }
    }
}

@defineDocumentOperationConstraint(order, 'производственный заказ', Production);
@extendFormFilterRoleAccess(order, o, orders);


@defineDocumentOperationLegalEntity(order, company, 'Организация');
@deriveDocumentOperationLegalEntity(order, company, order);
CONSTRAINT company(Order order) AND NOT isCompany(company(order))
    CHECKED BY company[Order] MESSAGE 'Для производственного заказа выбрана организация, не являющаяся компанией';

overCopy  ABSTRACT LIST ( Order, Order);
overCopy  ABSTRACT LIST ( ProductDetail, ProductDetail);
copy 'Копировать'(Order order)  { 
	NEWSESSION {
	    NEW o = Order {
	        company(o) <- company(order);
	        componentsStock(o) <- componentsStock(order);
	        productsStock(o) <- productsStock(order);
	        fromDate(o) <- fromDate(order);
	        toDate(o) <- toDate(order);
	        productsPriceListType(o) <- productsPriceListType(order);
	        priceListType(o) <- priceListType(order);
	        VATProduct(o) <- VATProduct(order);
	        VATComponent(o) <- VATComponent(order);
	        note(o) <- note(order);
	        operation(o) <- operation(order);
	        
	        FOR order(ProductDetail productDetail) == order NEW p=ProductDetail DO {
	            order(p) <- o;
	            sku(p) <- sku(productDetail);
	            product(p) <- product(productDetail);
	            quantity(p) <- quantity(productDetail);
	            BOMQuantity(p) <- BOMQuantity(productDetail);	            
	            markup(p) <- markup(productDetail);
	            pricePercent(p) <- pricePercent(productDetail);
	            overCopy(p,productDetail);
	        }
	        FOR order(ComponentDetail componentDetail) == order NEW c=ComponentDetail DO {
	            order(c) <- o;
	            bruttoSku(c) <- bruttoSku(componentDetail);
	            substituteSku(c) <- substituteSku(componentDetail);
	            substituteQuantity(c) <- substituteQuantity(componentDetail);
	            product(c) <- product(componentDetail);
	            component(c) <- component(componentDetail);
	            bruttoQuantity(c) <- bruttoQuantity(componentDetail);
	//            BOMQuantityComponentDetail(c) <- BOMQuantityComponentDetail(componentDetail);
	            BOM(c) <- BOM(componentDetail);
	            overCreate(c,componentDetail);
	        }
	        FOR bruttoQuantity(Sku sku,order) DO {
	            dataBruttoPrice(sku,o) <- dataBruttoPrice(sku,order);
	            cost(sku,o) <- cost(sku,order);
	            substitute(sku,o) <- substitute(sku,order);
	            multiplier(sku,o) <- multiplier(sku,order);
	        }
	        overCopy(o,order);
	        SHOW order OBJECTS o = o DOCKED NOCANCEL;
	    }
	}
} TOOLBAR;

EXTEND FORM order
    PROPERTIES(o) nameOperation
;

DESIGN order{
    GROUP(documentHeader,o){
        NEW header1 {
            horizontal = TRUE; 
            MOVE PROPERTY(isPosted(o));
            MOVE PROPERTY(nameOperation(o));
        }
        NEW header2 {
            horizontal = TRUE; 
            MOVE PROPERTY(nameNumerator(o));   
            MOVE PROPERTY(number(o));  
            MOVE PROPERTY(series(o));  
            MOVE PROPERTY(date(o));  
            MOVE PROPERTY(time(o));  
        }        
    }
}
EXTEND FORM orders
    PROPERTIES(o) nameOperation AFTER nameProductsStock(o) READONLY, copy
;

@defineDocumentOperationStock(order, components, 'Склад компонент');
@deriveDocumentOperationStock(order, components, order);
@defineDocumentOperationStock(order, products, 'Склад изделий');
@deriveDocumentOperationStock(order, products, order);

@defineDocumentOperationRole(order);

@defineDocumentHeaderPriceListType (operation, calcPriceListType, , ' (надбавка-изделие)');
@deriveDocumentOperationProperty(Order, calcPriceListType);

@defineDocumentHeaderPriceListType (operation, priceListType, products, ' (изделие)');
overProductsPriceListType = ABSTRACT PriceListType (Order);
changedProductsPriceListType = ABSTRACT BOOLEAN (Order);
productsPriceListType (Order o) <- OVERRIDE overProductsPriceListType(o), productsPriceListType(operation(o))
        WHEN CHANGED(operation(o)) OR changedProductsPriceListType(o);

@defineDocumentHeaderPriceListType (operation, priceListType, , ' (потребность)');
@deriveDocumentOperationProperty(Order, priceListType);

notRecalculateMarkup 'Не пересчитывать наценку' = DATA BOOLEAN (Operation);
notRecalculateMarkup(Order order) += notRecalculateMarkup(operation(order));

EXTEND FORM operation
     PROPERTIES(o) nameCalcPriceListType, nameProductsPriceListType, namePriceListType, notRecalculateMarkup, nameCostPriceListType

 ;
DESIGN operation {
    paramsContainer {
        MOVE PROPERTY(nameCalcPriceListType(o));
        MOVE PROPERTY(nameProductsPriceListType(o));
        MOVE PROPERTY(namePriceListType(o));
        MOVE PROPERTY(nameCostPriceListType(o));
        MOVE PROPERTY(notRecalculateMarkup(o));
    }
}

@deriveDocumentOperationProperty(order, isPricePercent);
@deriveDocumentOperationProperty(order, isPriceCoeff);

@deriveDocumentOperationProperty(order, calcBOMPrice);

@deriveDocumentOperationProperty(order, keepSupplier);

CONSTRAINT isPosted(ComponentDetail d) AND isBatch(operation(d)) AND sku(d) AND NOT batch(d) 
    MESSAGE 'Для строки компонента в производственном заказе должна быть задана партия';

//-------------------- Подбор изделий -----------------//
productDetail (order,product) =  GROUP MAX ProductDetail productDetail
    BY order(productDetail), product(productDetail);

quantity 'Кол-во изделий в документе' (order,product) =  GROUP SUM quantity(ProductDetail productDetail)
    BY order(productDetail), product(productDetail);    
    
changeQuantity(Product product, Order order)  { 
    INPUT n = NUMERIC[16,5] DO
        IF productDetail(order,product) THEN {
            IF n THEN {
                quantity(ProductDetail detail) <- n WHERE detail == productDetail(order,product);
            } ELSE {
                DELETE ProductDetail detail WHERE detail == productDetail(order,product);
            }
        } ELSE {
            IF n THEN {
                NEW d = ProductDetail {
                    order(d) <- order;
                    product(d) <- product;
                    quantity (d) <- n;
                }
            }
        }
}

background = ABSTRACT CASE COLOR (Order, Product);  

EXTEND FORM order

    TREE skuTree g = SkuGroup PARENT parent(g)
    PROPERTIES READONLY order(g), name(g)
    ORDERS order(g), name(g)
    FILTERGROUP inactive FILTER 'Активные' active(g) 'F6' DEFAULT
    FILTERGROUP product FILTER 'Готовые изделия' filterProduct(g) 'shift F5' DEFAULT
    
    OBJECTS p=Product
    PROPERTIES(p) READONLY id SHOWIF showIDs()
    PROPERTIES(p) BACKGROUND background(o,p)  READONLY description, nameSku, shortNameUOM
    PROPERTIES(o,p) quantity ON CHANGE changeQuantity(p,o)
    FILTERGROUP inactiveBOM
        FILTER 'Текущие' isActive(BOM(p)) 'F7'            
        FILTER 'Активные' isActive(BOM(p)) OR (fromDate(BOM(p)) > currentDate()) 'F8' DEFAULT
        
    ORDERS nameSku(p)
    
    FILTERS                isParent(g, sku(p)),
                           active(sku(p)),
                           (in(BOM(p), componentsStock(o)) AND countStocks(BOM(p))) OR NOT countStocks(BOM(p))
;

DESIGN order{
    row1 {
        NEW tabContainer AFTER row111 {
            fill = 1;
            tabbed = TRUE;
            MOVE BOX(pd);
            NEW selectPane {
                caption = 'Подбор';
                fill = 1;
                horizontal = TRUE;
                MOVE BOX(TREE skuTree) { caption = 'Группы'; }                
                MOVE BOX(p);
            }
        
        }
    }
}

edit (ProductDetail d) + {  DIALOG order OBJECTS o = order(d), pd = d DOCKED; }

show 'Просмотреть' (ProductDetail d)  { 
	NEWSESSION {
	    SHOW order OBJECTS o = order(d), pd = d DOCKED READONLY ;
	}
}
//-------------------- Подбор компонентов -----------------//
componentDetailBrutto (order,bruttoSku) =  GROUP MAX ComponentDetail componentDetail
    BY order(componentDetail), bruttoSku(componentDetail);

bruttoQuantityBrutto 'Кол-во брутто компонентов в документе' (order,bruttoSku) =  GROUP SUM bruttoQuantity(ComponentDetail componentDetail)
    BY order(componentDetail), bruttoSku(componentDetail);    
    
changeBruttoQuantityBrutto(Sku bruttoSku, Order order)  { 
    INPUT n = NUMERIC[16,5] DO
        IF componentDetailBrutto(order,bruttoSku) THEN {
            IF n THEN {
                bruttoQuantity(ComponentDetail detail) <- n WHERE detail == componentDetailBrutto(order,bruttoSku);
            } ELSE {
                DELETE ComponentDetail detail WHERE detail == componentDetailBrutto(order,bruttoSku);
            }
        } ELSE {
            IF n THEN {
                NEW d = ComponentDetail {
                    order(d) <- order;
                    bruttoSku(d) <- bruttoSku;
                    bruttoQuantity (d) <- n;
                    overCreate(d);
                }
            }
        }
}

prevCurrentBalance 'Остаток' (Sku sku, Order o) = prevCurrentBalance(sku, componentsStock(o));

background = ABSTRACT CASE COLOR (Order, Sku); 

EXTEND FORM order

    TREE skuTree1 g1 = SkuGroup PARENT parent(g1)
    PROPERTIES READONLY order(g1), name(g1)
    ORDERS order(g1), name(g1)
    FILTERGROUP inactive1 FILTER 'Активные' active(g1) 'F6' DEFAULT
    FILTERGROUP component FILTER 'Сырье' filterComponent(g1) 'shift F5' DEFAULT

    
    OBJECTS p1=Sku
    PROPERTIES(p1) BACKGROUND background(o,p1) READONLY id SHOWIF showIDs()
    PROPERTIES(p1) BACKGROUND background(o,p1) READONLY name, shortNameUOM
    PROPERTIES(o,p1) bruttoQuantityBrutto ON CHANGE changeBruttoQuantityBrutto(p1,o)
    PROPERTIES(p1, o) prevCurrentBalance 

    ORDERS name(p1)
    
    FILTERS isParent(g1, p1),
            active(p1)    
            
    FILTERGROUP filter
        FILTER 'С остатком (скл. комп.)' prevCurrentBalance(p1, o) 'F10' DEFAULT
        FILTER 'В документе (брутто)' bruttoQuantityBrutto(o, p1) 'F9'            
            
;

DESIGN order{
    specificationBox {
        NEW tabContainerComponent BEFORE row2 {
            fill = 1;
            tabbed = TRUE;
            caption = 'Компоненты';
            MOVE BOX(cd);
            NEW selectPane1 {
                caption = 'Подбор';
                fill = 1;
                horizontal = TRUE;
                MOVE BOX(TREE skuTree1) { caption = 'Группы'; }                
                MOVE BOX(p1);
            }    
        }    
    }
}
balanceB 'Остаток (до)' (ProductDetail d) = prevBalanceB(sku(d), productsStock(d), dateTime(d));
    
EXTEND FORM order
    PROPERTIES (pd) READONLY BEFORE deletepd balanceB
;

@defineMovementSku(productDetail, productsStock); //-- показываем по нажатию правой клавиши движение товара
@defineMovementSku(componentDetail, componentsStock); //-- показываем по нажатию правой клавиши движение товара
@defineBalancesSku(productDetail); //-- показываем по нажатию правой клавиши остатки товара
@defineBalancesSku(componentDetail); //-- показываем по нажатию правой клавиши остатки товара

@defineBarcodeSku(productDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
@defineBarcodeSku(componentDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара 

@defineMovementPriceSku(productDetail, productsStock); //-- показываем по нажатию правой клавиши изменение цены товара
@defineMovementPriceSku(componentDetail, componentsStock); //-- показываем по нажатию правой клавиши  изменение цены товара

@defineInfoSku(productDetail); //-- показываем по нажатию правой клавиши информацию по товару
@defineInfoSku(componentDetail); //-- показываем по нажатию правой клавиши информацию по товару

showMovementBruttoSkuStock 'Показать движение товара по складу' (ComponentDetail componentDetail)  { 
    FOR s == sku(componentDetail) AND st == componentsStock(componentDetail) DO
    NEWSESSION SHOW movementSkuStock OBJECTS s = s, st = st; } 
ASON CONTEXTMENU bruttoNameSku[ComponentDetail];

showMovementBruttoSku 'Показать движение товара' (ComponentDetail componentDetail)  { 
    FOR s == sku(componentDetail) DO 
        NEWSESSION SHOW movementSku OBJECTS s = s; } 
ASON CONTEXTMENU bruttoNameSku[ComponentDetail];

showBalancesBruttoSkuStock 'Показать остатки товара' (ComponentDetail componentDetail)  { 
    FOR s == sku(componentDetail) DO
        NEWSESSION SHOW balancesSkuStock OBJECTS s = s; } 
ASON CONTEXTMENU bruttoNameSku[ComponentDetail];

showMovementPriceBruttoSkuStock 'Показать изменение цены товара по складу' (ComponentDetail componentDetail)  { 
    FOR s == sku(componentDetail) AND st == componentsStock(componentDetail) DO 
        NEWSESSION SHOW movementPriceSkuStock OBJECTS s = s, st = st; } 
ASON CONTEXTMENU bruttoNameSku[ComponentDetail];

showMovementPriceBruttoSkuStocks 'Показать изменение цены товара' (ComponentDetail componentDetail)  { 
    FOR s == sku(componentDetail) DO
        NEWSESSION SHOW movementPriceSkuStocks OBJECTS s = s; } 
ASON CONTEXTMENU bruttoNameSku[ComponentDetail];

showMovementSubstituteSkuStock 'Показать движение товара по складу' (ComponentDetail componentDetail)  { 
    FOR s == sku(componentDetail) AND st == componentsStock(componentDetail) DO
        NEWSESSION SHOW movementSkuStock OBJECTS s = s, st = st; } 
ASON CONTEXTMENU substituteNameSku[ComponentDetail];

showMovementSubstituteSku 'Показать движение товара' (ComponentDetail componentDetail)  { 
    FOR s == sku(componentDetail) DO
        NEWSESSION SHOW movementSku OBJECTS s = s; } 
ASON CONTEXTMENU substituteNameSku[ComponentDetail];

showBalancesSubstituteSkuStock 'Показать остатки товара' (ComponentDetail componentDetail)  { 
    FOR s == sku(componentDetail) DO
        NEWSESSION SHOW balancesSkuStock OBJECTS s = s; } 
ASON CONTEXTMENU substituteNameSku[ComponentDetail];

showMovementPriceSubstituteSkuStock 'Показать изменение цены товара по складу' (ComponentDetail componentDetail)  { 
    FOR s == sku(componentDetail) AND st == componentsStock(componentDetail) DO
        NEWSESSION SHOW movementPriceSkuStock OBJECTS s = s, st = st; } 
ASON CONTEXTMENU substituteNameSku[ComponentDetail];

showMovementPriceSubstituteSkuStocks 'Показать изменение цены товара' (ComponentDetail componentDetail)  { 
    FOR s == sku(componentDetail) DO
        NEWSESSION SHOW movementPriceSkuStocks OBJECTS s = s; } 
ASON CONTEXTMENU substituteNameSku[ComponentDetail];

@defineBalancesBatch(componentDetail); //-- показываем по нажатию правой клавиши остатки партии
@defineMovementBatch(componentDetail, componentsStock); //-- показываем по нажатию правой клавиши движение по партии

showBOM 'Показать спецификацию' (ProductDetail d)  { 
    FOR b == BOM(d) AND p == product(d) DO
        NEWSESSION SHOW BOM OBJECTS b = b, p = p READONLY ; } 
ASON CONTEXTMENU nameProduct[ProductDetail];
showEditBOM 'Редактировать спецификацию' (ProductDetail d)  { 
    FOR BOM b == BOM(d) AND Product p == product(d) DO {
        IF showEdit(b) THEN {
            NEWSESSION SHOW BOM OBJECTS b = b, p = p;
        } ELSE {
            NEWSESSION SHOW BOM OBJECTS b = b, p = p READONLY;
        }
    }
} 
ASON CONTEXTMENU nameProduct[ProductDetail];

showBOM 'Показать спецификацию' (ComponentDetail d)  { 
    FOR  b == BOM(d) AND c == component(d) DO
        NEWSESSION SHOW BOM OBJECTS b = b, c = c READONLY; } 
ASON CONTEXTMENU nameComponent[ComponentDetail];
showEditBOM 'Редактировать спецификацию' (ComponentDetail d)  {
    FOR BOM b == BOM(d) AND Component c == component(d) DO {
        IF showEdit(b) THEN {
            NEWSESSION SHOW BOM OBJECTS b = b, c = c;
        } ELSE {
            NEWSESSION SHOW BOM OBJECTS b = b, c = c READONLY;
        }
    }
} 
ASON CONTEXTMENU nameComponent[ComponentDetail];

showBOMName'Показать спецификацию' (ComponentDetail d)  { 
    FOR b == BOM(d) DO
        NEWSESSION SHOW BOM OBJECTS b = b READONLY; } 
ASON CONTEXTMENU fullNameBOM[ComponentDetail];
showEditBOMName'Редактировать спецификацию' (ComponentDetail d)  { 
    FOR BOM b == BOM(d) DO {
        IF showEdit(b) THEN {
            NEWSESSION SHOW BOM OBJECTS b = b;
        } ELSE {
            NEWSESSION SHOW BOM OBJECTS b = b READONLY;
        }
    }
}ASON CONTEXTMENU fullNameBOM[ComponentDetail];

@defineOperationChangesDocument(order, Order, preventChangesDocument, createdUser);

overShowEdit (Order i) += showEditDeleteUser(i) AND isOpened(i) AND NOT skipShowEdit(i);
overShowDelete (Order i) += showEditDeleteUser(i) AND isOpened(i) AND NOT skipShowDelete(i); 

//-- Допустимый процент отклонения учетной цены от цены изделия
fromComponentsPrice(ProductDetail pd) = componentsPrice(pd)*( 100.0 - percPrice(operation(pd)))/100.0;
toComponentsPrice(ProductDetail pd) = componentsPrice(pd)*( 100.0 + percPrice(operation(pd)))/100.0;

CONSTRAINT percPrice(operation(ProductDetail pd)) AND isPosted(pd) AND price(pd) AND componentsPrice(pd)
    AND NOT (price(pd) >= fromComponentsPrice(pd) AND price(pd) <= toComponentsPrice(pd))
        MESSAGE 'Внимание!!! Отклонение между ценой компонентов и ценой изделия не попадает в допустимый процент по цене.';


show 'Просмотреть' (Order o)  { 
	NEWSESSION {
	    SHOW order OBJECTS o = o DOCKED READONLY;
	}
}TOOLBAR;

showToShow (Order o) = o IS Order AND NOT overShowEdit(o);

EXTEND FORM orders
    PROPERTIES show(o) SHOWIF showToShow(o) BEFORE editO
;
countProductDetail = GROUP SUM 1 BY order(ProductDetail pd), BOM(pd);
countComponentDetail = GROUP SUM 1 BY order(ComponentDetail pd), BOM(pd);

CONSTRAINT (SET(isPosted(ProductDetail pd)) OR CHANGED(BOM(pd)) OR CHANGED(operation(pd))) 
    AND isComponents(operation(pd)) AND isPosted(pd)
    AND NOT countComponentDetail(order(pd), BOM(pd))
        MESSAGE 'Внимание!!! Для изделий должны быть компоненты.';
        
CONSTRAINT (SET(isPosted(ComponentDetail cd)) OR CHANGED(BOM(cd)) OR CHANGED(operation(cd))) 
    AND isComponents(operation(cd)) AND isPosted(cd)
    AND NOT countProductDetail(order(cd), BOM(cd))
        MESSAGE 'Внимание!!! Для компонентов должны быть изделия.';
        
CONSTRAINT SET(isPosted(ProductDetail d)) AND isPosted(d) AND NOT product(d) AND NOT isNotProduct(operation(d))
    MESSAGE 'Для строки изделия не заполнено поле Изделие';
        
CONSTRAINT ((SET (ProductDetail d IS ProductDetail) AND NOT supplier(d)) OR DROPPED (supplier(d))) 
    AND needSupplier(operation(d)) MESSAGE 'Для изделия не задан поставщик';
    
//-- Чтобы нельзы было удалить спецификации               
allowDeleteBOMs 'Разрешить удаление спецификацияй, по которым было производство' = DATA BOOLEAN ();

useProducts 'Было производство' = GROUP SUM 1 IF quantity(ProductDetail pd) BY BOM(pd);
     
//CONSTRAINT DROPPED(Component c IS Component) AND PREV(useProducts(BOM(c))) 
//    AND NOT allowDeleteBOMs()
//        MESSAGE 'Запрещено изменять спецификацию (BOM), по которой было производство';
//
//CONSTRAINT DROPPED(Product p IS Product) AND PREV(useProducts(BOM(p))) 
//    AND NOT allowDeleteBOMs()
//        MESSAGE 'Запрещено изменять спецификацию (BOM), по которой было производство';   
    
CONSTRAINT DROPPED(BOM b IS BOM) AND PREV(useProducts(b)) 
    AND NOT allowDeleteBOMs()
        MESSAGE 'Запрещено удалять спецификацию (BOM), по которой было производство'; 
        
EXTEND FORM options
    PROPERTIES () allowDeleteBOMs
;
DESIGN options{
    manufacturing{
        MOVE PROPERTY (allowDeleteBOMs());
    }
}