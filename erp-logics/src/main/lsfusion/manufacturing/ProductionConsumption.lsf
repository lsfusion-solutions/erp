MODULE  ProductionConsumption;

REQUIRE ProductionOrder, ProductionOutput, StockDocumentSkuLedger, StockMovement;

NAMESPACE Production;

// ---------------- Списание матириалов, производство ------------------- //

CLASS ABSTRACT Consumption 'Списание сырья' : Document;
CLASS ABSTRACT ConsumptionDetail 'Строка списания сырья' : DocumentDetail;

CLASS UserConsumption 'Списание сырья (польз.)': Consumption;
CLASS UserConsumptionDetail 'Строка списания сырья (польз.)' : ConsumptionDetail;

@defineDocumentInterface(consumption);
@deriveDocumentHeaderTimePrefix(UserConsumption, );

@defineDocumentInterfaceNumber(consumption, BPSTRING[2]);
@defineNumeratedDefault(UserConsumption, 'Списание сырья', 'СС');

@defineDocumentInterfaceDataStock(consumption, stock, 'Склад', );
@defineDocumentDialogStocks(userConsumption, stock, company, , );

CONSTRAINT stock(UserConsumption o) AND NOT  isCompany(stock(o))
    CHECKED BY stock[UserConsumption]
    MESSAGE 'Выбран склад, который не принадлежит компании';
    
@defineDocumentInterfacePosted(consumption);
@defineDocumentInterfaceClosed(consumption);
@defineDocumentClosedConstraint(UserConsumption);

@defineDocumentInterfaceDescription(consumption, 'Списание сырья');

@defineDocumentInterfaceCurrency(consumption);
@deriveDocumentCurrency(userConsumption, stock);
@defineDocumentInterfacePriceListType(consumption); // объявляем вид цены

@defineDocumentInterfaceDetailSku(consumption, sku);
// Для инвентаризации по партиям

@showDocumentInterfaceDetailBatch(consumption);
@defineDocumentInterfaceDetailBatch(consumption, batch);
changeBatch(UserConsumptionDetail detail)  { 
    DIALOG dialogBatchStockOut OBJECTS st = stock(detail),
                             t = dateTime(detail),
                             sk = sku(detail),
                             bt = batch(detail) INPUT NULL NEWSESSION DO
        batch(detail) <- bt;
}
replace(Sku s, Batch b) + {  sku(UserConsumptionDetail detail) <- s WHERE batch(detail) == b;}


    
@defineDocumentInterfaceDetailQuantity(consumption);

@defineDocumentInterfaceDetailPrice(consumption); // объявляем цену
priceListType(UserConsumptionDetail detail) <- priceListType(userConsumption(detail))
        WHEN CHANGED(priceListType(userConsumption(detail)));

@deriveDocumentDetailPriceBatchPriceListTypeCustom (userConsumptionDetail, stock);

// суммма
@defineDocumentInterfaceDetailDataSum(consumption);
@deriveDocumentDetailSum(userConsumption, quantity);

// кол-во в шапке документа
@defineDocumentInterfaceHeaderQuantity(consumption);
@defineDocumentHeaderSkuQuantity(consumption, sku);

@defineDocumentHeaderSkuQuantity(userConsumption, sku);
@defineDocumentInterfaceHeaderSum(consumption);

//@defineDocumentHeaderItemSum(userConsumption, , ) // так как MATERIALIZED надо пока
sumItemConsumptionDetail 'Сумма, товар' (consumption) =
    GROUP SUM sum(ConsumptionDetail idetail) IF isItem(sku(idetail))
        BY consumption(idetail) IN documentSum MATERIALIZED;
sumContainerConsumptionDetail 'Сумма, тара' (consumption) =
    GROUP SUM sum(ConsumptionDetail idetail) IF isContainer(sku(idetail))
        BY consumption(idetail) IN documentSum;
sumChargeConsumptionDetail 'Сумма услуг' (consumption) =
    GROUP SUM sum(ConsumptionDetail idetail) IF isCharge(sku(idetail))
        BY consumption(idetail) IN documentSum;
sumNotChargeConsumptionDetail 'Сумма кроме услуг' (consumption) =
    GROUP SUM sum(ConsumptionDetail idetail) IF isNotCharge(sku(idetail))
        BY consumption(idetail) IN documentSum;
sumNotItemConsumptionDetail 'Сумма кроме товара' (consumption) =
    GROUP SUM sum(ConsumptionDetail idetail) IF isNotItem(sku(idetail))
        BY consumption(idetail) IN documentSum;
sumNotContainerConsumptionDetail 'Сумма кроме тары' (consumption) =
    GROUP SUM sum(ConsumptionDetail idetail) IF isNotContainer(sku(idetail))
        BY consumption(idetail) IN documentSum;

@defineDocumentHeaderItemSum(userConsumption, , );

@defineAddDetailDialogSkuStock(userConsumption, sku, stock, dialogSku);
@defineAddDetailDialogBarcode(userConsumption, sku);

@implementDocument(consumption);

@implementDocumentForm(consumption, c, 'Списание сырья');

@implementDocumentBatch(consumption);

@implementDocumentBatchForm(c);

supplierStock(Consumption consumption) += stock(consumption);

//--  Связь накладной и поставки

//GROUP order 'Информация о заказе' : public;

componentDetail = ABSTRACT ComponentDetail (ConsumptionDetail) MATERIALIZED INDEXED;
componentDetail = DATA ComponentDetail (UserConsumptionDetail);
componentDetail(UserConsumptionDetail consumptionDetail) += componentDetail(consumptionDetail);

CONSTRAINT stock[ConsumptionDetail](UserConsumptionDetail detail) != componentsStock(componentDetail(detail)) OR
           sku[ConsumptionDetail](detail) != sku(componentDetail(detail))
    CHECKED BY componentDetail[UserConsumptionDetail]
        MESSAGE 'Склад сырья и товар в списании сырья и производственном заказе должны соответствовать друг другу';


descriptionIndexComponentDetail 'Строка компонента' (ConsumptionDetail detail) = descriptionIndex(componentDetail(detail));
descriptionIndexComponentDetail 'Строка компонента' (UserConsumptionDetail detail) = descriptionIndex(componentDetail(detail));

quantityConsumptionDetail (order, consumption) = GROUP SUM quantity(ConsumptionDetail consumptionDetail) BY order(componentDetail(consumptionDetail)), consumption(consumptionDetail);

orders 'Заказы' (Consumption consumption) = GROUP
                                                CONCAT STRING[255](description(Order order)) IF quantityConsumptionDetail(order, consumption) , ', '
                                                ORDER order IN order CHARWIDTH 30;

consumed 'Кол-во (списано)' (componentDetail) = GROUP SUM quantity(ConsumptionDetail consumptionDetail) IF isPosted(consumptionDetail)
                                                                   BY componentDetail(consumptionDetail) MATERIALIZED;

toConsume 'Не списано' (ComponentDetail componentDetail) = quantity (componentDetail) (-) consumed(componentDetail);

toConsumeComponentDetail 'Не списано по заказу' (order) =
    GROUP SUM toConsume(ComponentDetail componentDetail) IF toConsume(componentDetail) > 0
          BY order(componentDetail);

@defineDocumentDetailQuantityCustomPrefix (componentDetail, consumed, ' (списано)');
@defineDocumentDetailDataSumCustomPrefix (componentDetail, consumed, ' (списано)');

quantityRound 'Количество знаков для округления кол-ва списания' = DATA INTEGER (Operation);
EXTEND FORM operation

    PROPERTIES(o) quantityRound

;
DESIGN operation {
    propertyContainer{

        MOVE PROPERTY(quantityRound(o));
    }
}
extraQuantityRound = ABSTRACT INTEGER (ComponentDetail);
overQuantityRound (ComponentDetail cd) = OVERRIDE extraQuantityRound(cd), quantityRound(operation(cd)), 5 IF cd IS ComponentDetail;
    
consumedQuantity(ComponentDetail detail) <- quantity(detail) WHEN CHANGED(quantity(detail));

calcConsumedSum = ABSTRACT VALUE NUMERIC[18,4] (ComponentDetail);
calcConsumedSum(ComponentDetail componentDetail) += NUMERIC[18,4](round(consumedQuantity(componentDetail) * price(componentDetail), currency(componentDetail))); 
consumedSum (ComponentDetail componentDetail) <- calcConsumedSum(componentDetail)
                WHEN DO CHANGED(consumedQuantity(componentDetail)) OR CHANGED (price(componentDetail)) OR CHANGED(currency(componentDetail));

consumedSumComponentDetail 'Сумма списанных компонент' (order) = GROUP SUM consumedSum(ComponentDetail detail) BY order(detail) IN documentSum;
consumedSumComponentDetail 'Сумма списанных компонент' (order,BOM) = GROUP SUM consumedSum(ComponentDetail detail) BY order(detail), BOM(detail) IN documentSum;
consumedQuantityComponentDetail 'Кол-во списанных компонент' (order) = GROUP SUM consumedQuantity(ComponentDetail detail) BY order(detail) IN documentSum;
consumedQuantityComponentDetail 'Кол-во списанных компонент' (order, BOM) = GROUP SUM consumedQuantity(ComponentDetail detail) BY order(detail), BOM(detail) IN documentSum;

// Расчет количеств компонент для произведенных изделий
quantityOutput 'Кол-во изделий в заказе (произведенных)' (product, order) = GROUP SUM outputQuantity(ProductDetail productDetail)
    BY product(productDetail), order(productDetail);

quantityOutput 'Кол-во спецификаций (произведенных)' (BOM BOM, Order order) = [ GROUP MAX quantityOutput(Product product, order)/ quantity(product)
    BY BOM(product)](BOM) MATERIALIZED;

recBruttoQuantityOutput 'Кол-во для произ-го' (BOM BOM, Order order, Sku sku) = GROUP SUM quantityOutput(BOM, order) * recBruttoQuantity(BOM, sku, date(order));
recBruttoQuantityOutput 'Рекур.кол-во' (BOM BOM, Order order, Component component) = GROUP SUM quantityOutput(BOM, order) * recBruttoQuantity(BOM, component, date(order));

calcComponentConsumedQuantityOver = ABSTRACT NUMERIC[16,5](ComponentDetail);
calcComponentConsumedQuantity (ComponentDetail d) = OVERRIDE
    calcComponentConsumedQuantityOver(d),
    round((recBruttoQuantityOutput(BOM(d), order(d), component(d)) * quantityCoeff(d) * OVERRIDE multiplierSubstituteTo(bruttoSku(d), substituteSku(d)), 1.0), overQuantityRound(d));

calcSkuConsumedQuantityOver = ABSTRACT NUMERIC[16,5](ComponentDetail);
calcSkuConsumedQuantity (ComponentDetail d) = OVERRIDE
    calcSkuConsumedQuantityOver(d),
    round((recBruttoQuantityOutput(BOM(d), order(d), bruttoSku(d)) * quantityCoeff(d) * OVERRIDE multiplierSubstituteTo(bruttoSku(d), substituteSku(d)), 1.0), overQuantityRound(d));
    
createOutputComponent 'Заполнить списание'(Order order)  { 
    consumedQuantity(ComponentDetail d) <- calcComponentConsumedQuantity(d) WHERE order(d) == order AND component(d);
    consumedQuantity(ComponentDetail d) <- calcSkuConsumedQuantity(d) WHERE order(d) == order AND NOT component(d);
} TOOLBAR;

notChangeConsumedQuantity 'Не пересчитывать кол-во списано при изменении кол-во произведено' = DATA BOOLEAN (Operation) PREREAD;
EXTEND FORM operation PROPERTIES(o) notChangeConsumedQuantity;
DESIGN operation { paramsContainer { MOVE PROPERTY(notChangeConsumedQuantity(o)); }}

WHEN LOCAL FORMS order (CHANGED(substituteSku(ComponentDetail d)) OR CHANGED(quantityOutput(BOM(d), order(d)))) AND countProduct(BOM(d)) == 1 AND NOT CHANGED(consumedQuantity(d)) AND component(d) AND NOT notChangeConsumedQuantity(operation(d)) DO {
    consumedQuantity(d) <- calcComponentConsumedQuantity (d);
}

WHEN LOCAL FORMS order (CHANGED(substituteSku(ComponentDetail d)) OR CHANGED(quantityOutput(BOM(d), order(d)))) AND countProduct(BOM(d)) == 1 AND NOT CHANGED(consumedQuantity(d)) AND NOT component(d) AND NOT notChangeConsumedQuantity(operation(d)) DO {
    consumedQuantity(d) <- calcSkuConsumedQuantity (d);
}

backgroundConsumption 'Цвет' (Order order) = RGB(212, 255, 212) IF order IS Order;

EXTEND FORM componentDetails
    PROPERTIES(d) READONLY toConsume
;
DESIGN componentDetails {
    BOX {
        PROPERTY(toConsume(d)) { background = #FFFFCC; }
    }
}

// --- Создание списания на основе заказа ---------------- //

FORM consumptionOrders 'Производственные заказы'

    OBJECTS s = Stock PANEL
//    PROPERTIES (s) READONLY name

    OBJECTS o = Order
    PROPERTIES(o) READONLY isPosted, number, series, date, time, nameComponentsStock, nameProductsStock,
                  fromDate, toDate, quantityProductDetail, sumProductDetail, quantityComponentDetail,
                  nameCalcPriceListType, namePriceListType, note
    FILTERS isPosted(o),
            componentsStock(o) == s,
            toConsumeComponentDetail(o)

    OBJECTS pd=ProductDetail
    PROPERTIES(pd) READONLY index, nameSku, nameProduct, shortNameUOM, quantity,
                   calcComponentsPrice, componentsPrice, markup, price, sum
    FILTERS order(pd)==o

    OBJECTS cd = ComponentDetail
    PROPERTIES(cd) READONLY index, nameSku, nameComponent,
                   shortNameUOM, quantity

    PROPERTIES(cd) READONLY toConsume

    FILTERS order(cd)==o

;

DESIGN consumptionOrders {
    BOX {
        size = (1024, 768);
        NEW documentContainer BEFORE TOOLBARBOX {
            fill = 1;
            type = CONTAINERV;
            MOVE BOX(o);
            NEW documentDetail {
                fill = 1;
                type = TABBED;
                MOVE BOX(cd) {
                    caption = 'Компоненты';
                }
                MOVE BOX(pd) {
                    caption = 'Изделия';
                }
                NEW printTab {
                    caption = 'Печатные формы';
                    NEW printContainer {
                        caption = 'Печать';
                        type = CONTAINERV;
                    }
                }
            }
        }
        PROPERTY(toConsume(cd)) { background = #FFFFCC; }
    }
}

fillOrder 'Заполнить на основе производственного заказа'(UserConsumption userConsumption)   { 
    DIALOG consumptionOrders OBJECTS s = stock(userConsumption), o INPUT DO {
        FOR order(ComponentDetail componentDetail) == o NEW d = UserConsumptionDetail DO {
            userConsumption(d) <- userConsumption;
            componentDetail(d) <- componentDetail;
            sku(d) <- sku(componentDetail);
            quantity (d) <- toConsume(componentDetail);              // возможно надо quantityComponentDetail   ?
        }
    }
} IN order;

operation = ABSTRACT Operation(Consumption);

// Товарный отчет
@implementStockDocumentLedgerOutOver(Consumption, stock);
operation[StockDocumentLedger] (Consumption ledger) += operation(ledger);
typeStockDocumentLedger 'Тип процесса' (ledger) = ABSTRACT STRING[50] (Consumption) MATERIALIZED;
sumItemOutStockDocumentLedger 'Сумма расхода, товар' (ledger) = ABSTRACT NUMERIC[18,4] (Consumption) MATERIALIZED;

type(Consumption l) += OVERRIDE typeStockDocumentLedger(l), STRING[50]('Списание сырья (пр-во)') IF l IS Consumption;
sumItem (Consumption ledger) += OVERRIDE sumItemOutStockDocumentLedger(ledger), sumItemConsumptionDetail(ledger);
sumContainer (Consumption ledger) += sumContainerConsumptionDetail(ledger);
close[StockDocumentLedger](Consumption l) + {  close(l); }

//// Проводим по регистру
//@implementSkuLedgerOutFIFO(ConsumptionDetail, sku, stock){
//    EXTEND CLASS ConsumptionDetail : OutFIFOSkuLedger;
//    @implementSkuLedger(ConsumptionDetail, sku, stock){
//    dateTime[DataSkuLedger] (ConsumptionDetail ledger) += dateTime(ledger);
//    isPosted[DataSkuLedger] (ConsumptionDetail ledger) += isPosted(ledger);
//    isClosed[DataSkuLedger] (ConsumptionDetail ledger) += isClosed(ledger);
//    sku[DataSkuLedger] (ConsumptionDetail ledger) += sku(ledger);
//    stock[DataSkuLedger] (ConsumptionDetail ledger) += stock(ledger);
//    description[DataSkuLedger] (ConsumptionDetail ledger) += description(ledger);
//};
//};
//quantity[OutFIFOSkuLedger] (ConsumptionDetail ledger) += quantity(ledger);
//batch[SkuLedger](ConsumptionDetail ledger) += batch(ledger);
//@implementSkuLedgerOutFIFOBatchBalance(ConsumptionDetail, stock){
//    @implementSkuLedgerOutFIFOBatchBalancePostfix(ConsumptionDetail, stock, ){
//    changed(ConsumptionDetail ledger) += CHANGED(batch(ledger));
//};
//};
//sum[OutSkuLedger] (ConsumptionDetail ledger) += sum(ledger);
//stockDocumentLedger(ConsumptionDetail ledger) += consumption(ledger); 

// Создание агрегированного списания

@defineDocumentHeaderProperty (order, createConsumption, 'Создать документ списания сырья');
@defineDocumentDetailProperty (order, componentDetail, createConsumption, 'Создать документ списания сырья');

@defineOperationProperty(createConsumption, 'Создать документ списания сырья', createContainer);
@deriveDocumentOperationProperty(Order, createConsumption);

EXTEND FORM order
    PROPERTIES(o)  BACKGROUND backgroundConsumption(o) createConsumption
    PROPERTIES(o)  READONLY BACKGROUND backgroundConsumption(o) SHOWIF createConsumption(o) consumedSumComponentDetail
    PROPERTIES(cd) BEFORE deletecd BACKGROUND backgroundConsumption(o) SHOWIF createConsumption(o) consumedQuantity, consumedSum
    PROPERTIES(o)  DRAW cd createOutputComponent SHOWIF createConsumption(o)
;
DESIGN order {
    headerRow112 {
        NEW headerRow1121 {
            caption = 'Списание';
            MOVE PROPERTY(createConsumption(o));
        }
    }

    GROUP(documentSum,o) {
        MOVE PROPERTY(consumedSumComponentDetail(o)) AFTER PROPERTY(sumComponentDetail(o)) { charWidth = 13;}
    }
}

EXTEND FORM orders
            PROPERTIES(cd) BACKGROUND backgroundConsumption(o) SHOWIF createConsumption(o) READONLY consumedQuantity,
                           consumedSum
;

CLASS OrderConsumption 'Списание сырья на основе заказа' : Consumption;
CLASS OrderConsumptionDetail 'Строка списания сырья на основе заказа' : ConsumptionDetail;

@defineDocumentTables(orderConsumption);

@defineDocumentAggregationHeader(order, orderConsumption, createConsumption);
isProduction(Order o, LONG d) += WHEN d == LONG(orderConsumption(o)) THEN TRUE;

needToConsumptionDetail (ComponentDetail d) = createConsumption(d) AND consumedQuantity(d) >0;
orderConsumptionDetail = AGGR OrderConsumptionDetail WHERE needToConsumptionDetail(ComponentDetail componentDetail) MATERIALIZED INDEXED;

orderConsumption (OrderConsumptionDetail detail) = orderConsumption(order(componentDetail(detail)));
consumption(OrderConsumptionDetail detail) += orderConsumption(detail);
@defineDocumentDetailIndex(orderConsumption);

date 'Дата' (OrderConsumptionDetail orderConsumptionDetail) = date(componentDetail(orderConsumptionDetail));
time 'Время' (OrderConsumptionDetail orderConsumptionDetail) = time(componentDetail(orderConsumptionDetail));
dateTime 'Дата/время' (OrderConsumptionDetail orderConsumptionDetail) = date(componentDetail(orderConsumptionDetail));

date(OrderConsumption consumption) += date(consumption);
time(OrderConsumption consumption) += time(consumption);

stock(OrderConsumption consumption) += componentsStock(order(consumption));
isPosted(OrderConsumption consumption) += isPosted(order(consumption));
isClosed(OrderConsumption consumption) += isClosed(order(consumption));

consumptionNumber 'Номер' = ABSTRACT STRING[48] (Order);
consumptionSeries 'Серия' = ABSTRACT BPSTRING[2] (Order);

isDefaultNumber (Order o) = o IS Order AND NOT (consumptionNumber(o) OR consumptionSeries(o));

number 'Номер документа' (OrderConsumption orderConsumption) = OVERRIDE consumptionNumber(order(orderConsumption)), (number(order(orderConsumption)) IF isDefaultNumber(order(orderConsumption)));
number(OrderConsumption consumption) += number(consumption);

series 'Серия документа' (OrderConsumption orderConsumption) = OVERRIDE consumptionSeries(order(orderConsumption)), (series(order(orderConsumption)) IF isDefaultNumber(order(orderConsumption)));
series(OrderConsumption consumption) += series(consumption);

seriesNumber 'Серия/номер документа' (OrderConsumption orderConsumption) = seriesNumber(order(orderConsumption));

note(OrderConsumption consumption) += note(order(consumption));
currency (OrderConsumption consumption) += currencyComponent(order(consumption));

priceListType(OrderConsumption consumption) += priceListType(order(consumption));

@defineDocumentDescription(orderConsumption, OrderConsumptionDetail, 'Списание сырья на основе заказа');
description (OrderConsumption consumption) += description(consumption);


componentDetail (OrderConsumptionDetail consumptionDetail) += componentDetail(consumptionDetail);
sku(OrderConsumptionDetail consumptionDetail) +=  sku(componentDetail(consumptionDetail));
batch(OrderConsumptionDetail consumptionDetail) +=  batch(componentDetail(consumptionDetail));
quantity(OrderConsumptionDetail consumptionDetail) += consumedQuantity(componentDetail(consumptionDetail));

price(OrderConsumptionDetail consumptionDetail) += price(componentDetail(consumptionDetail));
sum(OrderConsumptionDetail consumptionDetail) += consumedSum(componentDetail(consumptionDetail));

edit(OrderConsumption consumption) + {  edit(order(consumption)); }
close(OrderConsumption consumption) + {  isClosed(Order o) <- TRUE WHERE o == order(consumption); }

operation(OrderConsumption output) += operation(order(output));
// --------------------------- Формы Списания ---------------------------------

FORM userConsumption 'Списание сырья'
    OBJECTS o = UserConsumption PANEL
    PROPERTIES (o) isPosted, nameStock ON CHANGE changeStockCompany(o), nameNumerator, number, series, date, time,
                   nameCurrency, namePriceListType, note,
                   countUserConsumptionDetail, quantityUserConsumptionDetail, sumUserConsumptionDetail,
                   fillOrder, orders READONLY

    OBJECTS d = UserConsumptionDetail
    PROPERTIES (d) index, idBarcodeSku, nameSku, shortNameUOMSku,
                   nameBatch ON CHANGE changeBatch(d), namePriceListType, 
                   quantity, price, sum,
                   descriptionIndexComponentDetail, NEW, deleted = DELETE GRID

    PROPERTIES(o) DRAW d fillDocument, addDetailDialogSkuStockUserConsumptionDetail,
                           addDetailInputBarcodeUserConsumptionDetail, deleteUserConsumptionDetail
    FILTERS userConsumption(d) == o

    EVENTS
        ON OK prePost(o)

    HINTTABLE LIST dateTime[UserConsumptionDetail], sku[UserConsumptionDetail], stock[UserConsumptionDetail],
                   priceListType[UserConsumptionDetail], currency[UserConsumptionDetail], price[UserConsumptionDetail]

    EDIT UserConsumption OBJECT o
;

DESIGN userConsumption {
    BOX {
        size = (1024, 768);
        NEW mainTabbed {
            type = TABBED;
            fill = 1;
            NEW documentBox {
                caption = 'Списание';
                fill = 1;
                type = CONTAINERV;       
                NEW headerBox {
                    type = CONTAINERH;
        
                    NEW headerRow1 {
                        type = CONTAINERV;
        
                        MOVE GROUP(documentHeader,o) {
                            columns = 1;
                            type = CONTAINERH;
                            MOVE PROPERTY(isPosted(o)) { charWidth = 10; }
                            MOVE PROPERTY(nameStock(o));
                            MOVE PROPERTY(nameNumerator(o));
                            MOVE PROPERTY(number(o));
                            MOVE PROPERTY(series(o));
                            MOVE PROPERTY(date(o));
                            MOVE PROPERTY(time(o));
                        }
                        NEW headerRow12 {
                            type = CONTAINERV;
                            MOVE GROUP(documentPrm,o) {
                                columns = 1;
                                type = CONTAINERH;
                            }
                            MOVE GROUP(order,o){
                                columns = 1;
                                type = CONTAINERH;
                            }
                        }
                    }       
                    MOVE GROUP(documentSum,o) {
                        columns = 1;
                    }
                }
                NEW specificationBox {
                    fill = 1;
                    MOVE BOX(d) {
                        caption = 'Спецификация';
                    }
                }
            }
        }
        MOVE TOOLBARBOX;    
        PROPERTY(formOk()) {
            caption = 'Провести';
        }
        PROPERTY(sumUserConsumptionDetail(o)) { charWidth = 13;}
    }
}

WHEN LOCAL FORMS userConsumption CHANGED(batch(UserConsumptionDetail detail)) DO {
    sku (detail)  <- sku(batch(detail)) WHERE batch(detail);
}
//WHEN LOCAL FORMS userConsumption 
//    CHANGED(skuUserConsumptionDetail(detail)) OR CHANGED(batchUserConsumptionDetail(detail)) OR CHANGED(stockUserConsumptionDetail(detail)) OR CHANGED (dateTimeUserConsumptionDetail(detail)) DO
//    priceUserConsumptionDetail (detail)  <- IF batchUserConsumptionDetail(detail)
//                    THEN priceBLedgerPriceListTypeBatchStockDateTime(SystemLedgerPriceListType.accountPriceListType, batchUserConsumptionDetail(detail), stockUserConsumptionDetail(detail), dateTimeUserConsumptionDetail(detail))
//                    ELSE priceBLedgerPriceListTypeSkuStockDateTime(SystemLedgerPriceListType.accountPriceListType, skuUserConsumptionDetail(detail), stockUserConsumptionDetail(detail), dateTimeUserConsumptionDetail(detail));
                    
edit(UserConsumptionDetail d) + {  edit(userConsumption(d)); }

edit(ComponentDetail d) + {  DIALOG order OBJECTS o = order(d), cd = d DOCKED; }

edit(OrderConsumptionDetail d) + {  edit(componentDetail(d)); }

show 'Просмотреть'  ABSTRACT LIST  ( ConsumptionDetail) TOOLBAR;
show(UserConsumptionDetail d)  { 
	NEWSESSION {
	    SHOW userConsumption OBJECTS o = userConsumption(d), d = d DOCKED READONLY ;
	}
}

show(UserConsumptionDetail d) + {  show(d); }
//show[SkuLedger](ConsumptionDetail batch) + {  show(batch); }
                       
show(ComponentDetail d)  { 
	NEWSESSION {
	    SHOW order OBJECTS o = order(d), cd = d DOCKED READONLY;
	}
}

show(OrderConsumptionDetail d) + {  show(componentDetail(d)); }




//-- SKU
@defineDocumentSkuStockPriceListTypeSystemLedger(userConsumption, );
@extendFormDocumentSkuStock(userConsumption, userConsumption, o, legalEntityStock, );

@defineDocumentBatchStockPriceListTypeSystemLedger(userConsumption, );
@extendFormDocumentBatchStock(userConsumption, userConsumption, o, legalEntityStock, );

@defineMovementSku(consumptionDetail, stock); //-- показываем по нажатию правой клавиши движение товара
@defineMovementSku(userConsumptionDetail, stock); //-- показываем по нажатию правой клавиши движение товара
@defineBalancesSku(consumptionDetail); //-- показываем по нажатию правой клавиши остатки товара
@defineBalancesSku(userConsumptionDetail); //-- показываем по нажатию правой клавиши остатки товара

@defineBarcodeSku(consumptionDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара
@defineBarcodeSku(userConsumptionDetail); //-- показываем по нажатию правой клавиши все штрихкоды для товара 

// История по правой кнопке
@defineBalancesBatch(consumptionDetail); //-- показываем по нажатию правой клавиши остатки партии
@defineBalancesBatch(userConsumptionDetail); //-- показываем по нажатию правой клавиши остатки партии
@defineMovementBatch(consumptionDetail, stock); //-- показываем по нажатию правой клавиши движение по партии
@defineMovementBatch(userConsumptionDetail, stock); //-- показываем по нажатию правой клавиши движение по партии

@defineInfoSku(consumptionDetail); //-- показываем по нажатию правой клавиши информацию по товару
@defineInfoSku(userConsumptionDetail); //-- показываем по нажатию правой клавиши информацию по товару

copy 'Копировать'(UserConsumption userConsumption)  { 
	NEWSESSION {
	    NEW o = UserConsumption {
	        stock(o) <- stock(userConsumption);
	        currency(o) <- currency(userConsumption);
	        priceListType(o) <- priceListType(userConsumption);
	        note(o) <- note(userConsumption);
	
	        FOR userConsumption(UserConsumptionDetail userConsumptionDetail) == userConsumption DO {
	            NEW d=UserConsumptionDetail {
	                userConsumption(d) <- o;
	                sku(d) <- sku(userConsumptionDetail);
	                quantity(d) <- quantity(userConsumptionDetail);
	                priceListType(d) <- priceListType(userConsumptionDetail);
	//                priceUserConsumptionDetail(d) <- priceUserConsumptionDetail(userConsumptionDetail);
	                componentDetail(d) <- componentDetail(userConsumptionDetail);
	            }
	        }
	        SHOW userConsumption OBJECTS o = o DOCKED NOCANCEL;
	    }
	}
} TOOLBAR;

EXTEND FORM userConsumption

    FILTERGROUP filter
        FILTER 'С остатком ' prevCurrentBalance(ks, st) 'F10' DEFAULT
        FILTER 'В документе ' quantity(ks, o, st) 'F9'
;

EXTEND FORM userConsumption

    FILTERGROUP filter3
        FILTER 'С остатком ' prevCurrentBalance(b, sto) 'F10' DEFAULT
        FILTER 'В документе ' quantity(b, o, sto) 'F9'
;


isUserOpened(UserConsumption o)=  isOpened[Consumption](o) AND is(o);
FORM consumptions 'Списания сырья'
    OBJECTS o = Consumption
    PROPERTIES (o) READONLYIF isReadonly() isClosed, isPosted, number, series, date, time,
                            nameStock, nameCurrency, namePriceListType
    PROPERTIES (o) READONLY countConsumptionDetail, quantityConsumptionDetail, sumConsumptionDetail, orders
    PROPERTIES (o) READONLYIF isReadonly() note

    PROPERTIES (o) READONLY PANEL createdNameUser, createdTime, createdHostnameComputer, 
                                        postedNameUser, postedTime, postedHostnameComputer

    PROPERTIES (o) NEWSESSION NEW[UserConsumption], EDIT SHOWIF isOpened(o), deleteo = DELETE SHOWIF isUserOpened(o)
    PROPERTIES (o) copy
    PROPERTIES (o) close[UserConsumption] SHOWIF isOpened[UserConsumption](o), open SHOWIF isClosed[UserConsumption](o)       

    OBJECTS d=ConsumptionDetail
    PROPERTIES (d) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku, nameBatch
    PROPERTIES (d) READONLY namePriceListType, quantity, price, sum,
                   descriptionIndexComponentDetail

    FILTERS consumption(d) == o
    LIST Consumption OBJECT o
;
@extendFormFilterAccessStock(Consumption, o, consumptions, stock, company);

DESIGN consumptions {
    NEW documentContainer BEFORE TOOLBARBOX {
        type = SPLITV;
        fill = 1;

        MOVE BOX(o);

        NEW documentDetail {
            type = TABBED;
            fill = 1 ;
            MOVE BOX(d) {
                caption = 'Спецификация';
            }
            NEW documentHistory {
                caption = 'История';

                MOVE GROUP(created,o);
                MOVE GROUP(posted,o);
            }
            NEW printTab {
                caption = 'Печатные формы';
                NEW printContainer {
                    caption = 'Печать';
                    type = CONTAINERV;
                }
            }
        }
    }
}
@extendFormEditable(consumptions);
@defineFilterIsOpened (consumption, consumptions, o);
@defineDocumentLogForm(consumptions, o);
NAVIGATOR {
    manufacturingDocuments {
        NEW consumptions;
    }
}

////////////-----------Создание док-та списания сырья на основе производственного заказа-----------------//////////////

requiredQuantitySubstitute 'Кол-во (всего) (компонент)' (order, sku) = GROUP SUM quantity(ComponentDetail idetail) BY order(idetail), sku(idetail);

balance = DATA LOCAL NUMERIC[16,3] (Sku);
left = DATA LOCAL NUMERIC[16,3] (Sku);

addUserConsumptionProduction 'Списание сырья'(Order order)   { 
	NEWSESSION {
	    balance(Sku sku) <-  NUMERIC[16,3](balanceB(sku, componentsStock(order), dateTime(order)));
	    left(Sku sku) <-  NUMERIC[16,3](requiredQuantitySubstitute(order, sku));
	
	    NEW o = UserConsumption {
	        stock(o) <- componentsStock(order);
	        priceListType(o) <- priceListType(order);
	        note(o) <- note(order);
	        
	        FOR left(Sku sku) > 0 DO {
	                
	            FOR balance(sku) > 0 NEW d = UserConsumptionDetail DO {
	                userConsumption(d) <- o;
	                sku(d) <- sku;
	                quantity(d) <- IF balance(sku) >= left(sku) THEN left(sku) ELSE balance(sku);
	                left(sku) <- left(sku) (-) quantity(d);
	                balance(sku) <- balance(sku) (-) quantity(d);  
	            }
	             
	            IF left(sku) > 0 THEN {
	                FOR fromSku(Substitute substitute) == sku AND toSku(substitute) == Sku s AND balance(s) > 0 ORDER balance(toSku(substitute))
	                    NEW d = UserConsumptionDetail DO {
	                    userConsumption(d) <- o;
	                    sku(d) <- s;
	                                               
	                    quantity(d) <- IF (balance(s)) >= (left(sku) * multiplier(substitute)) 
	                                                            THEN (left(sku) * multiplier(substitute)) ELSE balance(s);                        
	                    
	                    left(sku) <- left(sku) (-) (quantity(d) / multiplier(substitute) IF multiplier(substitute) != 0);                            
	                    
	                    balance(s) <- balance(s) (-) quantity(d);
	                    
	                    IF NOT (left(sku) > 0) THEN
	                        BREAK;
	                }                                              
	            }                                    
	        }
	
	        IF (GROUP SUM 1 IF left(Sku sku) > 0) THEN {
	            MESSAGE 'Внимание !!! Не хватает остатка для компонент : \n' + (GROUP CONCAT name(Sku sku) IF left(sku) > 0, '\n' ORDER name(sku));
	        }
	        
	        FOR left(Sku sku) NEW d = UserConsumptionDetail DO {
	            userConsumption(d) <- o;
	            sku(d) <- sku;
	            quantity(d) <- left(sku);
	        }
	        
	
	        SHOW userConsumption OBJECTS o = o DOCKED NOCANCEL;
	    }
	}
} TOOLBAR;

//bruttoQuantityUserConsumptionDetail 'Кол-во' = DATA NUMERIC[16,3] (UserConsumptionDetail); // по строке компонента
//
//addUserConsumptionProductionOrder 'Списание сырья' = (order) NEWSESSION{
//    balanceSessionSku(sku) <-  NULL;
//    
//    NEW o = UserConsumption {
//        priceListTypeUserConsumption(o) <- priceListTypeOrder(order);
//        stockUserConsumption(o) <- componentsStockOrder(order);
//        priceListTypeUserConsumption(o) <- priceListTypeOrder(order);
//        noteUserConsumption(o) <- noteOrder(order);
//        
//        balanceSessionSku(sku) <-  NUMERIC[16,3](balanceBSkuStockDateTime(sku, componentsStockOrder(order), dateTimeOrder(order))) WHERE balanceBSkuStockDateTime(sku, componentsStockOrder(order), dateTimeOrder(order));
//        
//        
//        
//        FOR orderComponentDetail(detail) == order DO {
//            LOCAL required = NUMERIC[16,3] ();
//            required() <- NULL;
//            required() <- bruttoQuantityComponentDetail(detail);
//        
//            IF required() > 0 THEN {                    
//                IF balanceSessionSku(skuComponentDetail(detail)) AND required() > 0 THEN { //
//                        NEW d = UserConsumptionDetail {                                 
//                            userConsumptionUserConsumptionDetail(d) <- o;
//                            componentDetailUserConsumptionDetail(d) <- detail;
//                            
//                            skuUserConsumptionDetail(d) <- skuComponentDetail(detail);
//                            quantityUserConsumptionDetail(d) <- IF balanceSessionSku(skuComponentDetail(detail)) >= required()  THEN required() ELSE balanceSessionSku(skuComponentDetail(detail));
//                            required() <- required() (-) quantityUserConsumptionDetail(d);
//                            balanceSessionSku(sk) <- balanceSessionSku(sk) (-) quantityUserConsumptionDetail(d) WHERE sk == skuComponentDetail(detail);  
//                            
//                            bruttoQuantityUserConsumptionDetail(d) <- quantityUserConsumptionDetail(d);
//                        }              
//                } 
//                FOR fromSkuSubstitute(substitute) == skuComponentDetail(detail) AND balanceSessionSku(toSkuSubstitute(substitute)) > 0  ORDER balanceSessionSku(toSkuSubstitute(substitute)) DO {
//                    IF required() >0 THEN {
//                        NEW d = UserConsumptionDetail {                    
//                            userConsumptionUserConsumptionDetail(d) <- o;
//                            skuUserConsumptionDetail(d) <- toSkuSubstitute(substitute);
//                            componentDetailUserConsumptionDetail(d) <- detail;
//                                                       
//                            quantityUserConsumptionDetail(d) <- IF (balanceSessionSku(toSkuSubstitute(substitute))) >= (required()* multiplierSubstitute(substitute)) 
//                                                                THEN (required()* multiplierSubstitute(substitute)) ELSE balanceSessionSku(toSkuSubstitute(substitute)) ;                        
//                            
//                            required() <- required() (-) (quantityUserConsumptionDetail(d) / multiplierSubstitute(substitute) IF multiplierSubstitute(substitute) != 0);                            
//                            
//                            balanceSessionSku(sk) <- (balanceSessionSku(sk) (-) quantityUserConsumptionDetail(d)) WHERE  sk == toSkuSubstitute(substitute);   
//                            
//                            bruttoQuantityUserConsumptionDetail(d) <- (quantityUserConsumptionDetail(d) / multiplierSubstitute(substitute) IF multiplierSubstitute(substitute) != 0);
//                        }    
//                    }                                              
//                }                                    
//            }
//        }   
//        FORM userConsumption OBJECTS o = o;
//    }
//} TOOLBAR;
//
//EXTEND FORM consumptions
//    PROPERTIES(d) GRID READONLY  bruttoQuantityUserConsumptionDetail
//;
//EXTEND FORM userConsumption
//    PROPERTIES(d) GRID bruttoQuantityUserConsumptionDetail
//;

EXTEND FORM orders
    PROPERTIES(o) addUserConsumptionProduction
;
DESIGN orders {
    createdContainer {
        MOVE PROPERTY(addUserConsumptionProduction(o)) { alignment = STRETCH; };
    }
}

//------------- Ограничение на равенство суммы компонентов по изделию ------------------//
equalRestriction 'Ограничение на равенство суммы компонентов по изделию' = DATA BOOLEAN (Operation);

showEqualRestriction (Operation o) = createConsumption(o) AND createOutput(o);
EXTEND FORM operation
    PROPERTIES(o) equalRestriction SHOWIF showEqualRestriction(o)
;

DESIGN operation {
    constraintContainer {
        MOVE PROPERTY(equalRestriction(o));
    }
}

equalRestriction 'Ограничение на равенство суммы компонентов по изделию' = DATA BOOLEAN (Order);

@deriveDocumentOperationProperty(Order, equalRestriction);

showEqualRestriction (Order order) = createConsumption(order) AND createOutput(order);

EXTEND FORM order
    PROPERTIES(o) equalRestriction SHOWIF showEqualRestriction(o)
;   
DESIGN order {
    options1 {
        NEW constraintContainer {
            caption = 'Ограничения';
            MOVE PROPERTY(equalRestriction(o));
        }
    }
}

consumedQuantityComponentDetail= GROUP SUM consumedQuantity(ComponentDetail cd) BY BOM(cd), order(cd);
outputQuantityProductDetail= GROUP SUM outputQuantity(ProductDetail pd) BY BOM(pd), order(pd);

outputProductsSumProductDetail 'Сумма изделий' (BOM, order) = GROUP SUM outputProductsSum(ProductDetail d) BY BOM(d), order(d);
consumedSumComponentDetail 'Сумма компонентов' (BOM, order) = GROUP SUM consumedSum(ComponentDetail d) BY BOM(d), order(d);

CONSTRAINT  createConsumption(Order order) AND createOutput(order) AND equalRestriction(order) 
    AND (outputProductsSumProductDetail(BOM BOM, order) != consumedSumComponentDetail(BOM, order))
    MESSAGE 'Сумма списания компонентов для изделия должна быть равной сумме произведенного изделия в производственном заказе'; 

banChangeBOMs 'Запретить изменения в спецификациях, по которым было производство' = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES ()banChangeBOMs
;
DESIGN options {
    manufacturing {
        MOVE PROPERTY (banChangeBOMs());
    }
}

isProducts 'Было производство' (BOM)  = GROUP SUM 1 IF consumedQuantity(ComponentDetail cd) BY BOM(cd);
                                                 
CONSTRAINT SET(Component c IS Component) AND isProducts(BOM(c)) 
    AND banChangeBOMs()
        MESSAGE 'Запрещено изменять спецификацию, по которой было производство';
    
CONSTRAINT SET(Product p IS Product) AND isProducts(BOM(p)) 
    AND banChangeBOMs()
        MESSAGE 'Запрещено изменять спецификацию, по которой было производство';   
     
CONSTRAINT DROPPED(Component c IS Component) AND isProducts(PREV(BOM(c))) 
    AND banChangeBOMs()
        MESSAGE 'Запрещено изменять спецификацию, по которой было производство';
    
CONSTRAINT DROPPED(Product p IS Product) AND isProducts(PREV(BOM(p))) 
    AND banChangeBOMs()
        MESSAGE 'Запрещено изменять спецификацию, по которой было производство';   
    
CONSTRAINT (CHANGED(material(Component c)) OR CHANGED(bruttoQuantity(c)) OR CHANGED(wastage(c))) 
    AND isProducts(BOM(c)) AND banChangeBOMs()
     MESSAGE 'Запрещено изменять спецификацию, по которой было производство';
    
CONSTRAINT (CHANGED(sku(Product p)) OR CHANGED(quantity(p)) OR CHANGED(pricePercent(p))) AND isProducts(BOM(p)) AND banChangeBOMs()
        MESSAGE 'Запрещено изменять спецификацию, по которой было производство';   
               
//-- Допустимые отклонения по цене и сумме для разруба

//fromOutputQuantity(Order order) = consumedQuantityComponentDetail(order)*( 100.0 - percQuantity(operation(order)))/100.0;
//toOutputQuantity(Order order) = consumedQuantityComponentDetail(order)*( 100.0 + percQuantity(operation(order)))/100.0;
//CONSTRAINT percQuantity(operation(Order o)) AND isPosted(o) AND outputQuantityProductDetail(o) AND consumedQuantityComponentDetail(o)
//    AND NOT (outputQuantityProductDetail(o) >=fromOutputQuantity(o) AND outputQuantityProductDetail(o) <=toOutputQuantity(o))
//        MESSAGE 'Внимание!!! Отклонение между компонентом и изделиями не попадает в допустимый процент по количеству.';
//fromOutputProductsSum(Order order) = consumedSumComponentDetail(order)*( 100.0 - percSum(operation(order)))/100.0;
//toOutputProductsSum(Order order) = consumedSumComponentDetail(order)*( 100.0 + percSum(operation(order)))/100.0;       
//CONSTRAINT percSum(operation(Order o)) AND isPosted(o) AND consumedSumComponentDetail(o) AND outputProductsSumProductDetail(o)
//    AND NOT (outputProductsSumProductDetail(o) >= fromOutputProductsSum(o) AND outputProductsSumProductDetail(o) <= toOutputProductsSum(o))
//        MESSAGE 'Внимание!!! Отклонение между компонентом и изделиями не попадает в допустимый процент по сумме.';
        
fromOutputQuantity(ProductDetail pd) = consumedQuantityComponentDetail(order(pd), BOM(pd))*(100.0 - percQuantity(operation(pd)))/100.0;
toOutputQuantity(ProductDetail pd) = consumedQuantityComponentDetail(order(pd), BOM(pd))*(100.0 + percQuantity(operation(pd)))/100.0;      
CONSTRAINT (SET(isPosted(ProductDetail pd)) OR CHANGED(outputQuantityProductDetail(order(pd), BOM(pd))) OR CHANGED(consumedQuantityComponentDetail(order(pd), BOM(pd))) OR CHANGED(operation(pd)))
    AND percQuantity(operation(pd)) AND isPosted(pd)
    AND NOT ((OVERRIDE outputQuantityProductDetail(order(pd),BOM(pd)), 0.0) >= (OVERRIDE fromOutputQuantity(pd), 0.0) AND (OVERRIDE outputQuantityProductDetail(order(pd),BOM(pd)), 0.0) <= (OVERRIDE toOutputQuantity(pd), 0.0))
        MESSAGE 'Внимание!!! Отклонение между компонентом и изделиями не попадает в допустимый процент по количеству.';
        
fromOutputProductsSum(ProductDetail pd) = consumedSumComponentDetail(order(pd), BOM(pd))*( 100.0 - percSum(operation(pd)))/100.0;
toOutputProductsSum(ProductDetail pd) = consumedSumComponentDetail(order(pd), BOM(pd))*( 100.0 + percSum(operation(pd)))/100.0;       
CONSTRAINT (SET(isPosted(ProductDetail pd)) OR CHANGED(consumedSumComponentDetail(order(pd), BOM(pd))) OR CHANGED(outputProductsSumProductDetail(order(pd), BOM(pd))) OR CHANGED(operation(pd))) 
    AND percSum(operation(pd)) AND isPosted(pd)
    AND NOT ((OVERRIDE outputProductsSumProductDetail(order(pd), BOM(pd)), 0.0) >= (OVERRIDE fromOutputProductsSum(pd), 0.0) AND (OVERRIDE outputProductsSumProductDetail(order(pd), BOM(pd)), 0.0) <= (OVERRIDE toOutputProductsSum(pd), 0.0))
        MESSAGE 'Внимание!!! Отклонение между компонентом и изделиями не попадает в допустимый процент по сумме.';
        
CONSTRAINT (SET(isPosted(Order order)) OR CHANGED(consumedSumComponentDetail(order)) OR CHANGED(outputProductsSumProductDetail(order)) OR CHANGED(operation(order)) ) 
    AND percSum(operation(order)) AND isPosted(order)
    AND consumedSumComponentDetail(order) AND NOT outputProductsSumProductDetail(order)
        MESSAGE 'Для заказа не задан список произведенных изделий';
              
CONSTRAINT (SET(isPosted(Order order)) OR CHANGED(consumedQuantityComponentDetail(order)) OR CHANGED(outputQuantityProductDetail(order)) OR CHANGED(operation(order)) )
    AND percQuantity(operation(order)) AND isPosted(order)
    AND consumedQuantityComponentDetail(order) AND NOT outputQuantityProductDetail(order)
        MESSAGE 'Для заказа не задан список произведенных изделий';         
        
fromOutputQuantity(Order o) = consumedQuantityComponentDetail(o)*(100.0 - orderPercQuantity(operation(o)))/100.0;
toOutputQuantity(Order o) = consumedQuantityComponentDetail(o)*(100.0 + orderPercQuantity(operation(o)))/100.0;      
  
CONSTRAINT (SET(isPosted(Order o)) OR CHANGED(outputQuantityProductDetail(o)) OR CHANGED(consumedQuantityComponentDetail(o)) OR CHANGED(operation(o)))
    AND orderPercQuantity(operation(o)) AND isPosted(o)
    AND NOT ((OVERRIDE outputQuantityProductDetail(o), 0.0) >= (OVERRIDE fromOutputQuantity(o), 0.0) AND (OVERRIDE outputQuantityProductDetail(o), 0.0) <= (OVERRIDE toOutputQuantity(o), 0.0))
        MESSAGE 'Внимание!!! Отклонение между компонентом и изделиями не попадает в допустимый процент по количеству. Весь заказ.';

fromOutputProductsSum(Order o) = consumedSumComponentDetail(o)*( 100.0 - orderPercSum(operation(o)))/100.0;
toOutputProductsSum(Order o) = consumedSumComponentDetail(o)*( 100.0 + orderPercSum(operation(o)))/100.0;    
                   
CONSTRAINT (SET(isPosted(Order o)) OR CHANGED(consumedSumComponentDetail(o)) OR CHANGED(outputProductsSumProductDetail(o)) OR CHANGED(operation(o))) 
    AND orderPercSum(operation(o)) AND isPosted(o)
    AND NOT ((OVERRIDE outputProductsSumProductDetail(o), 0.0) >= (OVERRIDE fromOutputProductsSum(o), 0.0) AND (OVERRIDE outputProductsSumProductDetail(o), 0.0) <= (OVERRIDE toOutputProductsSum(o), 0.0))
        MESSAGE 'Внимание!!! Отклонение между компонентом и изделиями не попадает в допустимый процент по сумме. Весь заказ.';        

consumedQuantityComponentDetail 'Кол-во (списано)' (Batch bt, Order o) = GROUP SUM consumedQuantity(ComponentDetail idetail) BY batch(idetail), order(idetail);
consumedQuantityComponentDetail 'Кол-во (списано)' (Sku s, Order o) = GROUP SUM consumedQuantity(ComponentDetail idetail) BY sku(idetail), order(idetail);

prevBalancePriceStock(Batch bt, Order o) = (prevCurrentBalance(bt, priceStock(o)) (+) (PREV(consumedQuantityComponentDetail(bt, o) IF isPosted(o) AND createConsumption(o))));
 

useBatchSkuAllFIFO 'Заполнить партии (ФИФО)'(Order o)   { 
    LOCAL balance = NUMERIC[16,5](Batch);
    LOCAL toOrder = NUMERIC[16,5](Batch,ComponentDetail);
    LOCAL toOrder = NUMERIC[16,5](ComponentDetail);    

    
    IF createConsumption(o) THEN {
        balance(Batch bt) <- prevBalancePriceStock(bt,o) WHERE consumedQuantityComponentDetail(sku(bt),o);
        toOrder(ComponentDetail cd) <- consumedQuantity(cd) WHERE order(cd)==o;
        
        FOR balance(Batch bt)  ORDER dateTime(bt), bt DO {
 
            toOrder (bt, ComponentDetail cd) <-  (PARTITION UNGROUP balance[Batch]
                                                                   LIMIT toOrder(cd)  IF  sku(cd) == sku(bt) AND toOrder(cd) AND order(cd)==o AND balance(bt) >= toOrder(cd)
                                                                   ORDER consumedQuantity(cd), cd
                                                                   BY bt)
                                                                   WHERE sku(cd) == sku(bt) AND toOrder(cd) AND order(cd)==o AND balance(bt) >= toOrder(cd); 
            toOrder(ComponentDetail cd) <- (toOrder(cd) (-) ( toOrder (bt, cd))) WHERE toOrder (bt, cd);
            
        }
        batch(ComponentDetail cd) <- (GROUP MIN Batch bt IF toOrder (bt, cd) == consumedQuantity(cd)) WHERE order(cd)==o;
        
    } ELSE {    
        balance(Batch bt) <- prevBalancePriceStock(bt,o) WHERE quantityComponentDetail(sku(bt),o);
        toOrder(ComponentDetail cd) <- quantity(cd) WHERE order(cd)==o;   
        
        FOR balance(Batch bt)  ORDER dateTime(bt), bt DO {
 
            toOrder (bt, ComponentDetail cd) <-  (PARTITION UNGROUP balance[Batch]
                                                                   LIMIT toOrder(cd) IF  sku(cd) == sku(bt) AND toOrder(cd) AND order(cd)==o AND balance(bt) >= toOrder(cd) 
                                                                   ORDER quantity(cd), cd
                                                                   BY bt)
                                                                   WHERE sku(cd) == sku(bt) AND toOrder(cd) AND order(cd)==o AND balance(bt) >= toOrder(cd); 
            toOrder(ComponentDetail cd) <- (toOrder(cd) (-) ( toOrder (bt, cd))) WHERE toOrder (bt, cd);
            
        } 
        batch(ComponentDetail cd) <- (GROUP MIN Batch bt IF toOrder (bt, cd) == quantity(cd)) WHERE order(cd)==o;            
    }        
}


EXTEND FORM order
    PROPERTIES useBatchSkuAllFIFO(o) TOOLBAR DRAW cd
;
show 'Просмотреть'  ABSTRACT MULTI ( Consumption) TOOLBAR;

show 'Просмотреть' (UserConsumption c)  { 
	NEWSESSION {
	    SHOW userConsumption OBJECTS o = c DOCKED READONLY ;
	}
} TOOLBAR;

show[Consumption](UserConsumption c) + {show(c);};
show[Consumption](OrderConsumption c) + {show(order(c));};