MODULE BOMNutrition;

REQUIRE BOM, ItemNutrition, ItemDescription;


// ------------------------------------------------------------------- //
GROUP nutrition 'Энергетическая ценность' : base;

showNutrition 'Отображать энергетическую ценность' = DATA BOOLEAN(BOM) IN documentPrm;

recipes 'Номер по сборнику рецептов' = DATA STRING[100] (BOM) IN documentPrm CHARWIDTH 5;
recipes 'Номер по сборнику рецептов' (Product product) = recipes(BOM(product));

// Энергетическая ценность компонент

META changeNutrition(object, skuProp, property)
    change###property(###object object)   { 
        INPUT n = NUMERIC[8,2] DO
            property(Item item) <- n WHERE item == skuProp(object);
    }
END

fats 'Жиры на 100г, г' = fats[Item](sku(Component c));
carbohydrates 'Углеводы 100г, г' = carbohydrates[Item](sku(Component c));
proteins 'Белки 100г, г' = proteins[Item](sku(Component c));
energy 'Энерг.ценность на 100г, ккал' = energy[Item](sku(Component c));

// Энергетическая ценность изделий

fats 'Жиры 100г, г' =  DATA NUMERIC[8,2](Product);
carbohydrates 'Углеводы 100г, г' = DATA NUMERIC[8,2](Product);
proteins 'Белки 100г, г' = DATA NUMERIC[8,2](Product);
energy 'Энерг.ценность на 100г, ккал' = DATA NUMERIC[8,2](Product);
productYield 'Выход' = DATA STRING[100] (Product) CHARWIDTH 20;

fatsProduct 'Жиры на 100г, г' (Component c) = IF material(c) IS Product THEN fats[Product](material(c)) ELSE fats[Item](sku(c));
carbohydratesProduct 'Углеводы 100г, г' (Component c) = IF material(c) IS Product THEN carbohydrates[Product](material(c)) ELSE carbohydrates[Item](sku(c));
proteinsProduct 'Белки 100г, г' (Component c) = IF material(c) IS Product THEN proteins[Product](material(c)) ELSE proteins[Item](sku(c));
energyProduct 'Энерг.ценность на 100г, ккал' (Component c) = IF material(c) IS Product THEN energy[Product](material(c)) ELSE energy[Item](sku(c));


@changeNutrition(component, sku, fats);
@changeNutrition(component, sku, carbohydrates);
@changeNutrition(component, sku, proteins);
@changeNutrition(component, sku, energy);

// Энергетическая ценность спецификации



//-- округление по (ТР ТС 022/2011)     
humidityParamsRound (NUMERIC[18,5] nu) = CASE 
    WHEN nu > 10.0 THEN NUMERIC[8,1](INTEGER (nu))
    WHEN nu >= 0.5 THEN NUMERIC[8,1](INTEGER(nu/0.5)*0.5)
    WHEN nu <0.5 THEN NUMERIC[8,1](floor(nu*10.0)/10.0);      
energyParamsRound (NUMERIC[18,5] nu) = CASE 
    WHEN nu > 100.0 THEN NUMERIC[8,1](INTEGER (nu/10.0)*10.0)
    WHEN nu > 5.0 THEN NUMERIC[8,1](INTEGER(nu/5.0)*5.0)
    WHEN nu > 1.0 THEN NUMERIC[8,1](INTEGER(nu))
    ELSE 1.0;  

fatsItem 'Жиры 100г, г (товар)' (Product p) = fats(sku(p));
carbohydratesItem 'Углеводы 100г, г (товар)' (Product p) = carbohydrates(sku(p));
proteinsItem 'Белки 100г, г (товар)' (Product p) = proteins(sku(p));
energyItem 'Энерг.ценность на 100г, ккал (товар)' (Product p) = energy(sku(p));

composition 'Состав' = DATA STRING[2550] (Product) CHARWIDTH 30;
components 'Компоненты' (Product product)= components(BOM(product));
composition(Product product) <- STRING[2550](components(product)) WHEN CHANGED(components(product));

changeComposition 'Записать в товар'(Product product)  { 
    FOR sku(product) == Sku item DO {
        composition[Item](item) <- STRING[1000](composition(product));
    }
} ASON CONTEXTMENU composition[Product];

description 'Описание' = DATA TEXT(Product);
changeDescription 'Записать в товар'(Product product)  { 
    FOR sku(product) == Sku item DO {
        description[Item](item) <- description(product);
    }
} ASON CONTEXTMENU description[Product];
fullDescription 'Описание (полное)' = DATA TEXT (Product);

//------------------------------- СТБ -------------------------------------//
CLASS StateStandart 'СТБ';
TABLE stateStandart (StateStandart);
  
name 'Наименование' = DATA ISTRING[100](StateStandart);
number 'Номер' = DATA BPSTRING[100](StateStandart);   
note 'Примечание' = DATA BPSTRING[250](StateStandart);  
@defineExternalizable(stateStandart, STRING[100]); 
stateStandartName = GROUP MAX StateStandart stateStandart BY name (stateStandart); 

FORM stateStandart 'СТБ'
    OBJECTS s=StateStandart PANEL
    PROPERTIES(s) id SHOWIF  showIDs(), name, number, note 
    EDIT StateStandart OBJECT s
;

DESIGN stateStandart {
    BOX {
        PROPERTY(name(s)){
            charWidth = 50;    
        }
    }       
}

FORM stateStandarts 'СТБ'
    OBJECTS s=StateStandart
    PROPERTIES(s) READONLY id SHOWIF showIDs(), name, number, note 
    PROPERTIES(s) NEWSESSION NEW, EDIT, DELETE
    ORDERS number(s)
    LIST StateStandart OBJECT s
;
DESIGN stateStandarts { BOX { size = (600, 400); } } 

stateStandart= DATA StateStandart (BOM);
numberStateStandart 'СТБ' (BOM BOM) = number(stateStandart(BOM));
nameStateStandart 'СТБ' (BOM BOM) = name(stateStandart(BOM));

numberStateStandart 'СТБ' (Product p) = numberStateStandart(BOM(p));
nameStateStandart 'СТБ' (Product p) = nameStateStandart(BOM(p));


backgroundFast (Product p) = IF (fats(p) OR fatsItem(p)) AND NOT fatsItem(p) == fats(p) THEN RGB(255,153,153) ELSE RGB(244,255,189);
backgroundCarbohydrates (Product p) = IF (carbohydrates(p) OR carbohydratesItem(p)) AND NOT carbohydratesItem(p) == carbohydrates(p) THEN RGB(255,153,153) ELSE RGB(244,255,189);
backgroundProteins (Product p) = IF (proteins(p) OR proteinsItem(p)) AND NOT proteinsItem(p) == proteins(p) THEN RGB(255,153,153) ELSE RGB(244,255,189);
backgroundEnergy (Product p) = IF (energy(p) OR energyItem(p)) AND NOT energyItem(p) == energy(p) THEN RGB(255,153,153) ELSE RGB(244,255,189);

// Расширяем формы
showNutritionBOM = ABSTRACT VALUE BOOLEAN (BOM);
showNutritionBOM(BOM b) += showNutrition(b);

fillDescriptionItem 'Заполнять описание в карточку товара из спецификации'  = DATA BOOLEAN ();

EXTEND FORM options
    PROPERTIES () fillDescriptionItem
;
DESIGN options{
    manufacturing{
        MOVE PROPERTY (fillDescriptionItem());
    }
}

description1 = ABSTRACT TEXT(Component);
description2 = ABSTRACT TEXT(Component);
descriptionOver 'Название' (Component c) = OVERRIDE description1(c), description2(c), TEXT (name(sku(c)));


descriptionCalc 'Описание' (BOM) = GROUP CONCAT descriptionOver(Component component) IF NOT isPack(component), ', '
                                       ORDER DESC overNettoNetWeight(component), component
                                       BY BOM(component);
                                       
fullDescriptionOver 'Описание (полное)' (Component c) = CONCAT ' ', '<b>'+(descriptionOver(c))+'</b>',
                                                                        TEXT('('+composition(sku(c))+')' ),
                                                                    ( ('('+(OVERRIDE description[Product](material(c)),description(sku(c)))+')' ) IF material(c) IS Product);   

    
fullDescriptionCalc 'Описание' (BOM) = GROUP CONCAT fullDescriptionOver(Component component) IF NOT isPack(component), ', '
                                       ORDER DESC overNettoNetWeight(component), component
                                       BY BOM(component);

useRecDescription 'В "Описание (полное)" использовать рекурсивное описание' = DATA BOOLEAN ();
EXTEND FORM options
    PROPERTIES () useRecDescription
;
DESIGN options{
    manufacturing{
        MOVE PROPERTY (useRecDescription());
    }
}

overDescCustom1(Component c) = CONCAT ' ', 
    '<b>'+(OVERRIDE description(sku(c)) IF NOT (material(c) IS Product), TEXT(name(sku(c))))+'</b>',
    (('('+TEXT('*'+TEXT(material(c))+'*')+')') IF material(c) IS Product); 
overDescConcatCustom(Product p) = GROUP CONCAT TEXT(OVERRIDE overDescCustom1(Component c)) IF BOM(p)==BOM(c) AND NOT isPack(c), ', ' ORDER DESC bruttoQuantity(c), c ;  
                                       
fillDescription 'Заполнить описание' (BOM BOM)  { 
    IF NOT useRecDescription() THEN {
        FOR BOM(Product p) == BOM DO {
            description(p) <-  descriptionCalc(BOM);   
            fullDescription(p) <-  TEXT('<b>'+'Состав: '+'</b>'+fullDescriptionCalc(BOM));
        }    
    } ELSE {
        FOR BOM(Product product)== BOM DO {
            LOCAL go = BOOLEAN (Product);
            LOCAL result = TEXT ();
            go(product)<- TRUE ;
            result() <- TEXT('*'+TEXT(product)+'*');
            WHILE (GROUP SUM 1 IF go(Product p)) DO {
                FOR go(Product p) DO {
                    result()<- replace(result(), TEXT('*'+TEXT(p)+'*'),overDescConcatCustom(p));
                    go(Product pp)<- TRUE WHERE [GROUP SUM 1 IF material(Component c) IS Product AND NOT isPack(c) AND BOM(c)==BOM(p) BY material(c)](pp) AND pp IS Product;
                    go(p)<- NULL;
                }
            }   
            fullDescription(product) <-TEXT('<b>'+'Состав: '+'</b>'+result());
 
        }
    }

} TOOLBAR;    
fillDescriptionItem 'Записать описание в карточку товара' (BOM BOM)  { 
    FOR BOM(Product p) == BOM DO {
        description(Item i) <-  description(p) WHERE sku(p)==i;   
    }
} TOOLBAR;


WHEN LOCAL FORMS BOM CHANGED(description(Product p)) AND fillDescriptionItem() DO {
    description(Item item)<- description(p) WHERE item == sku(p);
}
skipNutrition = ABSTRACT BOOLEAN (BOM);
showNutritionSkip(BOM b) = showNutrition(b) AND NOT skipNutrition(b);
EXTEND FORM BOM
    PROPERTIES(b) showNutrition
    PROPERTIES(b) recipes, numberStateStandart //SHOWIF showNutritionBOM(b)    
    
    OBJECTS pp = Product
    PROPERTIES(pp) index 
    PROPERTIES(pp) READONLY idBarcodeSku, id SHOWIF showIDs(), nameSku, shortNameUOM     
    
    PROPERTIES(pp) READONLY quantity, overNettoNetWeight, pricePercent, calcPriceCoeff 
    FILTERS       BOM(pp) == b
    PROPERTIES(pp) SHOWIF showNutrition(b) fats BACKGROUND backgroundFast(pp), carbohydrates BACKGROUND backgroundCarbohydrates(pp), 
                   proteins BACKGROUND backgroundProteins(pp), energy BACKGROUND backgroundEnergy(pp), composition, productYield
    PROPERTIES(pp) SHOWIF showNutrition(b) READONLY fatsItem, carbohydratesItem, proteinsItem, energyItem
                  
    OBJECTS cc = Component
    PROPERTIES(cc) READONLY BACKGROUND background(cc) index 
    PROPERTIES(cc) READONLY BACKGROUND background(cc) idBarcodeSku, id SHOWIF showIDs(), nameMaterial, shortNameUOM 
    PROPERTIES(cc) READONLY BACKGROUND background(cc) nettoQuantity, overNettoNetWeight, wastage, bruttoQuantity, overBruttoNetWeight
    ORDERS index(cc)
    FILTERS       BOM(cc) == b
                
    PROPERTIES(cc) SHOWIF showNutritionSkip(b) BACKGROUND background(cc) fats ON CHANGE changeFats(cc), carbohydrates ON CHANGE changeCarbohydrates(cc), 
                  proteins ON CHANGE changeProteins(cc), energy ON CHANGE changeEnergy(cc)
                  
    OBJECTS ppp = Product
    PROPERTIES(ppp) index 
    PROPERTIES(ppp) READONLY idBarcodeSku, id SHOWIF showIDs(), nameSku, shortNameUOM     
    
    PROPERTIES(ppp) READONLY quantity, overNettoNetWeight, pricePercent, calcPriceCoeff
    PROPERTIES (ppp) PANEL description , fullDescription
    PROPERTIES fillDescription(b) DRAW ppp, fillDescriptionItem(b) DRAW ppp SHOWIF (TRUE IF NOT fillDescriptionItem())
    FILTERS       BOM(ppp) == b
                  
    OBJECTS ccc = Component
    PROPERTIES(ccc) READONLY BACKGROUND background(ccc) index 
    PROPERTIES(ccc) READONLY BACKGROUND background(ccc) idBarcodeSku, id SHOWIF showIDs(), nameMaterial, shortNameUOM 
    PROPERTIES(ccc) READONLY BACKGROUND background(ccc) nettoQuantity, overNettoNetWeight, wastage, bruttoQuantity, overBruttoNetWeight
    PROPERTIES (ccc) READONLY descriptionOver, fullDescriptionOver
    ORDERS index(ccc)
    FILTERS       BOM(ccc) == b        
;

DESIGN BOM {
    specificationBox {
        NEW nutrition {
            showIf = showNutritionBOM(b);
            fill = 1;
            caption = 'Энерг. ценность / Влажность';
            horizontal = FALSE;
            MOVE BOX(pp);
            MOVE BOX (cc);
        }
        NEW description {
            fill = 1;
            caption = 'Описание';
            horizontal = FALSE;
            NEW descriptionPPP{
                fill = 1;
                horizontal = TRUE;
                MOVE BOX(ppp){fill = 2.5;}

                NEW descriptionPPP1{
                    fill = 1;
                    tabbed = TRUE;
                    NEW descriptionPPP11{
                        fill = 1;
                        caption = 'Описание';
                        MOVE PROPERTY (description(ppp)) {caption = ''; fill = 1;}                         
                    }
                    NEW descriptionPPP12{
                        fill = 1;
                        caption = 'Описание (полное)';
                        MOVE PROPERTY (fullDescription(ppp)) {caption = ''; fill = 1;}                     
                    }                    

                }
            }
            MOVE BOX (ccc);        
        }
    }
    kitchen {
        MOVE PROPERTY(showNutrition(b));
        MOVE PROPERTY(recipes(b));
        MOVE PROPERTY(numberStateStandart(b)); 
    }
}
EXTEND FORM BOMs
    PROPERTIES(b) READONLY BACKGROUND background(b) showNutrition
    PROPERTIES(p) SHOWIF showNutrition(b) READONLY fats, carbohydrates, proteins, energy, composition, productYield
    PROPERTIES(c) SHOWIF showNutrition(b) BACKGROUND background(c) READONLY fats, carbohydrates, proteins, energy
    
    PROPERTIES(p1)  fats, carbohydrates, proteins, energy
    PROPERTIES(c2)  fats, carbohydrates, proteins, energy
;
EXTEND FORM BOMsDialog
    PROPERTIES(b) READONLY BACKGROUND background(b) showNutrition
    PROPERTIES(p) SHOWIF showNutrition(b) READONLY fats, carbohydrates, proteins, energy, composition, productYield
    PROPERTIES(c) SHOWIF showNutrition(b) BACKGROUND background(c) READONLY fats, carbohydrates, proteins, energy
    
;

overCopy (BOM from, BOM to) + { 
    showNutrition(to) <- showNutrition(from);
    recipes(to) <- recipes(from);
    stateStandart(to) <- stateStandart(from);
}
overCopy (Product to, Product from) + { 
    fats(to) <- fats(from);
    carbohydrates(to) <- carbohydrates(from);
    proteins(to) <- proteins(from);
    energy(to) <- energy(from);  
    productYield(to) <- productYield(from);       
    composition(to) <- composition(from);
    description(to) <- description(from);  
    fullDescription(to) <- fullDescription(from);           
}

