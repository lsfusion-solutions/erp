MODULE ProductionOperation;

REQUIRE Operation, PriceListType;

NAMESPACE Production;

@defineOperation(' (производственный заказ)');

@defineOperationRole();

TABLE legalEntityOperation(LegalEntity, Operation);
TABLE legalEntityGroupOperation(LegalEntityGroup, Operation);

@defineOperationLegalEntity(company, , c, 'Организация');
@defineCountLegalEntityOperation(company, company);

TABLE stockOperation(Stock, Operation);
TABLE stockGroupOperation(StockGroup, Operation);

@defineOperationStock(components, stc, 'Склад компонент');
// Подсчет складов по умолчанию            
countComponentsStock (Operation operation) = GROUP 
    SUM 1 IF inComponents(Stock stock,operation) AND isCompany(stock);
defaultComponentsStock (Operation operation) = GROUP 
    MIN Stock stock IF inComponents(stock,operation) AND isCompany(stock);  

@defineOperationStock(products, stp, 'Склад изделий');
// Подсчет складов по умолчанию   
countProductsStock (Operation operation) = GROUP 
    SUM 1 IF inProducts(Stock stock,operation) AND isCompany(stock);
defaultProductsStock (Operation operation) = GROUP 
    MIN Stock stock IF inProducts(stock,operation) AND isCompany(stock);  

EXTEND FORM operation
    FILTERS countCompanyStock(stcg),
            isCompany(stc),
            countCompanyStock(stpg),
            inCompany(legalEntity(stp), o),
            inCompany(legalEntity(stc), o),                                      
            isCompany(stp),
            isCompany(c)
;
//countOperationSupplierCustomerSupplierStockCustomerStockUser 'Кол-во операций' (s, c, ss, cs, u) = 
//    GROUP SUM 1 IF inSupplierOperation(s, o) AND inSupplierStockOperation(ss, o)
//               AND inCustomerOperation(c, o) AND inCustomerStockOperation(cs, o) 
//               AND inUserOperation(u, o) BY s, c, ss, cs, u COMPLEX;   
//
//defaultOperationSupplierCustomerSupplierStockCustomerStockUser 'Операция по умолчанию' (s, c, ss, cs, u) = 
//    GROUP MAX o IF inSupplierOperation(s, o) AND inSupplierStockOperation(ss, o)
//               AND inCustomerOperation(c, o) AND inCustomerStockOperation(cs, o) 
//               AND inUserOperation(u, o) BY s, c, ss, cs, u COMPLEX;   


DESIGN operation{
    tabContainer {
        NEW createContainer {
            caption = 'Производные документы';
        }
        NEW showContainer {
            caption = 'Отображение свойств';     
        }
        NEW constraintContainer {
            caption = 'Ограничения';
        }
        NEW paramsContainer {
            caption = 'Параметры';
        }
    }
}

@defineOperationProperty(isBatch, 'Запретить оприходование производственных заказов без партий', BOOLEAN, constraintContainer);
@defineOperationProperty(banNegativeCuttingComponent, 'Запретить отрицательные остатки по компонентам', BOOLEAN, constraintContainer);

@defineOperationProperty(percQuantity, 'Допустимый процент отклонения по количеству для изделий в производственном заказе', NUMERIC[8,3], constraintContainer);
@defineOperationProperty(percSum, 'Допустимый процент отклонения по сумме для изделий в производственном заказе', NUMERIC[8,3], constraintContainer);

@defineOperationProperty(orderPercQuantity, 'Допустимый процент отклонения по количеству для всего производственного заказа', NUMERIC[8,3], constraintContainer);
@defineOperationProperty(orderPercSum, 'Допустимый процент отклонения по сумме для всего производственного заказа', NUMERIC[8,3], constraintContainer);

@defineOperationProperty(percPrice, 'Допустимый процент отклонения учетной цены от цены изделия', NUMERIC[8,3], constraintContainer);


@defineOperationProperty(showBOMQuantity, 'Показывать количество в спецификации', BOOLEAN, showContainer);

@defineOperationProperty(equalsBOMNettoNetWeight, 'Вес нетто компонентов должен быть равен весу нетто изделий в спецификации', BOOLEAN, constraintContainer);

@defineOperationProperty(isComponents, 'Для изделий должны быть компоненты и наоборот', BOOLEAN, constraintContainer);
@defineOperationProperty(keepSupplier, 'Сохранять поставщика', paramsContainer);
@defineOperationProperty(needSupplier, 'Должен быть задан поставщик', paramsContainer);