MODULE TurnoverBI;

REQUIRE BI, PurchaseLedger, SaleLedger, Item, Druid, ReportBI, DefaultLookupBI, ItemBrandGroup, SkuList;

NAMESPACE BI;


//Грузить остаток на начало
exportBalanceB 'Грузить остаток на начало' = DATA BOOLEAN () PREREAD;
useAccountPrice 'Использовать регистр с учетной ценой' = DATA BOOLEAN () PREREAD;

EXTEND FORM integrationData
    PROPERTIES DRAW dates exportBalanceB(), useAccountPrice()
;

overExportTurnover  ABSTRACT (DATE);
overExportTurnover = DATA LOCAL BOOLEAN ();

balance = DATA LOCAL NUMERIC[16,5] (Batch, Stock);
balanceB = DATA LOCAL NUMERIC[16,5] (Batch, Stock);

revertBalance = DATA LOCAL BOOLEAN ();
balanceR (Batch b, Stock st) = IF revertBalance() THEN balanceB(b, st) ELSE balance(b, st);
balanceRB (Batch b, Stock st) = IF revertBalance() THEN balance(b, st) ELSE balanceB(b, st);

balance = DATA LOCAL NUMERIC[16,5] (Sku, Stock);
sum = DATA LOCAL NUMERIC[18,4] (Sku, Stock);

accountPrice = DATA LOCAL NUMERIC[16,4] (Sku, Stock);
accountPriceB = DATA LOCAL NUMERIC[16,4] (Sku, Stock);

revertAccountPrice = DATA LOCAL BOOLEAN ();
accountPriceR (Sku sk, Stock st) = IF revertAccountPrice() THEN accountPriceB(sk, st) ELSE accountPrice(sk, st);
accountPriceRB (Sku sk, Stock st) = IF revertAccountPrice() THEN accountPrice(sk, st) ELSE accountPriceB(sk, st);

exportTurnover 'Выгрузить Оборачиваемость' (DATE dFrom, DATE dTo)  {
    CANCEL; // на всякий случай
    balance(Batch b, Stock st) <- balanceA(b, st, dTo);
    IF exportBalanceB() THEN
        balanceB(Batch b, Stock st) <- balance(b, st) (-) signedQuantity(b, st, dTo);
    balance(Sku s, Stock st) <- balanceA(s, st, dTo);

    logToFile('druid', 'Ended initial balance');
    
    IF useAccountPrice() THEN {
        accountPrice(Sku s, Stock st) <- accountPriceB(s, st, DATETIME(sum(dTo, 1))) WHERE balance(s, st) OR quantityPurchase(s, st, dTo) OR quantitySold(s, st, dTo);
        IF exportBalanceB() THEN
            accountPriceB(Sku s, Stock st) <- accountPriceB(s, st, DATETIME(dTo)) WHERE balance(s, st) OR quantityPurchase(s, st, dTo) OR quantitySold(s, st, dTo);
    } ELSE
        sum(Sku s, Stock st) <- sumA(s, st, dTo);

    LOCAL date = DATE ();
    date() <- dTo;
    
    WHILE date() >= dFrom DO {
        logToFile('druid', 'Started EXPORT ' + date() + ' - ' + (GROUP SUM 1 IF balance(Batch b, Stock st)));
        overExportTurnover(date());
        IF NOT overExportTurnover() THEN {
            IF exportBalanceB() THEN {
                EXPORT CSV ',' HEADER FROM dateTime = [FORMULA STRING[20] 'to_char(($1),\'MM/DD/YY\')'](date()),
                                    stock = Stock st, formatStock = parent(stockGroup(st)), legalEntityStock = legalEntity(st),
                                    sku = sku(Batch b), supplier = supplier(b), supplierStock = supplierStock(b), cost = DOUBLE(cost(b)), valueVAT = DOUBLE(valueVAT(b)), //rp = retailPricingPriceA(b, st, date()),
                                    price = DOUBLE(IF useAccountPrice() THEN accountPriceR(sku(b), st) ELSE (sum(sku(b), st) / balance(sku(b), st))),
                                    priceB = (OVERRIDE accountPriceRB(sku(b), st), accountPriceR(sku(b), st)),  
                                    UOM = UOM(sku(b)),
                                    balance = DOUBLE(balanceR(b, st)), balanceB = DOUBLE(balanceRB(b, st)),
                                    quantityPurchase = DOUBLE(OVERRIDE quantityPurchase(b, st, date()), 0), sumVATPurchase = DOUBLE(OVERRIDE sumVATPurchase(b, st, date()), 0), sumPurchase = DOUBLE(OVERRIDE sumPurchase(b, st, date()), 0), 
                                    quantitySold = DOUBLE(OVERRIDE quantitySold(b, st, date()), 0), sumVATSold = DOUBLE(OVERRIDE sumVATSold(b, st, date()), 0), sumSold = DOUBLE(OVERRIDE sumSold(b, st, date()), 0) 
                       WHERE balanceB(b, st) OR balance(b, st) OR quantityPurchase(b, st, date()) OR quantitySold(b, st, date()) OR sumSold(b, st, date());
            } ELSE {
                EXPORT CSV ',' HEADER FROM dateTime = [FORMULA STRING[20] 'to_char(($1),\'MM/DD/YY\')'](date()),
                                    stock = Stock st, formatStock = parent(stockGroup(st)), legalEntityStock = legalEntity(st),
                                    sku = sku(Batch b), supplier = supplier(b), supplierStock = supplierStock(b), cost = DOUBLE(cost(b)), valueVAT = DOUBLE(valueVAT(b)), //rp = retailPricingPriceA(b, st, date()),
                                    price = DOUBLE(IF useAccountPrice() THEN accountPrice(sku(b), st) ELSE (sum(sku(b), st) / balance(sku(b), st))), 
                                    UOM = UOM(sku(b)),
                                    balance = DOUBLE(balance(b, st)),
                                    quantityPurchase = DOUBLE(OVERRIDE quantityPurchase(b, st, date()), 0), sumVATPurchase = DOUBLE(OVERRIDE sumVATPurchase(b, st, date()), 0), sumPurchase = DOUBLE(OVERRIDE sumPurchase(b, st, date()), 0), 
                                    quantitySold = DOUBLE(OVERRIDE quantitySold(b, st, date()), 0), sumVATSold = DOUBLE(OVERRIDE sumVATSold(b, st, date()), 0), sumSold = DOUBLE(OVERRIDE sumSold(b, st, date()), 0) 
                       WHERE balance(b, st) OR quantityPurchase(b, st, date()) OR quantitySold(b, st, date()) OR sumSold(b, st, date());
                        
            }
        }
        logToFile('druid', 'Ended EXPORT ' + date());

        IF exportBalanceB() THEN 
            ingestBatch('turnover', 'turnoverB', date());
        ELSE ingestBatch('turnover', date());

        IF date() == dFrom THEN BREAK;
        
        balance(Sku s, Stock st) <- balance(s, st) (-) signedQuantity(s, st, date()) WHERE signedQuantity(s, st, date()); 
        IF exportBalanceB() THEN {
            IF revertBalance() THEN {
                revertBalance() <- NULL;
                balanceB(Batch b, Stock st) <- balanceB(b, st) (-) signedQuantity(b, st, date()) WHERE signedQuantity(b, st, date());
                balanceB(Batch b, Stock st) <- balanceB(b, st) (-) signedQuantity(b, st, subtract(date(),1)) WHERE signedQuantity(b, st, subtract(date(),1));
            } ELSE {
                balance(Batch b, Stock st) <- balance(b, st) (-) signedQuantity(b, st, date()) WHERE signedQuantity(b, st, date());
                balance(Batch b, Stock st) <- balance(b, st) (-) signedQuantity(b, st, subtract(date(),1)) WHERE signedQuantity(b, st, subtract(date(),1));
                revertBalance() <- TRUE;
            }
        } ELSE
            balance(Batch b, Stock st) <- balance(b, st) (-) signedQuantity(b, st, date()) WHERE signedQuantity(b, st, date()); 

        logToFile('druid', 'Ended recalculate balance ' + date());

        IF useAccountPrice() THEN 
            IF exportBalanceB() THEN {
                IF revertAccountPrice() THEN {
                    revertAccountPrice() <- NULL;
                    accountPriceB(Sku s, Stock st) <- accountPriceB(s, st, DATETIME(subtract(date(),1))) WHERE balance(s, st) OR quantity(s, st, subtract(date(), 1));
                } ELSE {
                    accountPrice(Sku s, Stock st) <- accountPriceB(s, st, DATETIME(subtract(date(),1))) WHERE balance(s, st) OR quantity(s, st, subtract(date(), 1));
                    revertAccountPrice() <- TRUE;
                }
            } ELSE
                accountPrice(Sku s, Stock st) <- accountPriceB(s, st, DATETIME(date())) WHERE balance(s, st) OR quantityPurchase(s, st, subtract(date(), 1)) OR quantitySold(s, st, subtract(date(), 1));
        ELSE
            sum(Sku s, Stock st) <- sum(s, st) (-) signedSum(s, st, date()) WHERE signedSum(s, st, date());
        date() <- subtract(date(), 1);
    }
    
    runKillTask('turnover', dFrom, dTo);
} CONFIRM;

EXTEND FORM integrationData
    PROPERTIES exportTurnover(druidFrom, druidTo)
;

//Использовать оборачиваемость по товарам
useTurnoverSkuBI 'Использовать по товарам' = DATA BOOLEAN ();

EXTEND FORM integrationData
    PROPERTIES useTurnoverSkuBI() DRAW dates
;


@defineReport(turnover, 'Оборачиваемость');

nameGroup4Turnover() = GROUP MAX nameGroupDBTurnover(INTEGER i) IF order(i) == 4;
exprGroup4Turnover() = GROUP MAX exprGroupDBTurnover(INTEGER i) IF order(i) == 4;
captionGroup4Turnover() = GROUP MAX captionGroupTurnover(INTEGER i) IF order(i) == 4;

nameGroup5Turnover() = GROUP MAX nameGroupDBTurnover(INTEGER i) IF order(i) == 5;
exprGroup5Turnover() = GROUP MAX exprGroupDBTurnover(INTEGER i) IF order(i) == 5;
captionGroup5Turnover() = GROUP MAX captionGroupTurnover(INTEGER i) IF order(i) == 5;

DESIGN turnoverReport {
    checkBoxContainer {
        NEW groupContainer {
            NEW line1 {
                horizontal = TRUE;
                NEW column1 {
                    NEW stockContainer {
                        caption = 'Склады';
                    }
                    NEW supplierContainer {
                        caption = 'Поставщики';
                    }
                }
                NEW timeContainer {
                    caption = 'Время';
                }
            } 
            NEW itemContainer {
                lines = 2;
                caption = 'Товары';
            }
        }
    }
}

@createGroupCount(turnover, stock, 'По складу', 1, 'stock', 'LOOKUP(stock,\'stock_name\')', 'Склад', stockContainer, 5);
@createGroupCount(turnover, supplier, 'По поставщику', 2, 'supplier', 'LOOKUP(supplier,\'legalEntity_name\')', 'Поставщик', supplierContainer, 5);
@createGroupCount(turnover, group1, 'По направлению', 3, 'LOOKUP(sku,\'sku_group1\')', 'LOOKUP(LOOKUP(sku,\'sku_group1\'),\'group_name\')', 'Направление', itemContainer, 5);
@createGroupCount(turnover, group2, 'По группе', 4, 'LOOKUP(sku,\'sku_group2\')', 'LOOKUP(LOOKUP(sku,\'sku_group2\'),\'group_name\')', 'Группа', itemContainer, 5);
@createGroupCount(turnover, group3, 'По подгруппе', 5, 'LOOKUP(sku,\'sku_group3\')', 'LOOKUP(LOOKUP(sku,\'sku_group3\'),\'group_name\')', 'Подгруппа', itemContainer, 5);
@createGroupCount(turnover, group4, 'По субгруппе', 6, 'LOOKUP(sku,\'sku_group4\')', 'LOOKUP(LOOKUP(sku,\'sku_group4\'),\'group_name\')', 'Субгруппа', itemContainer, 5);
@createGroupCount(turnover, group5, 'По виду', 21, 'LOOKUP(sku,\'sku_group5\')', 'LOOKUP(LOOKUP(sku,\'sku_group5\'),\'group_name\')', 'Вид', itemContainer, 5);
@createGroupCount(turnover, sku, 'По товару', 7, 'sku', 'LOOKUP(sku,\'sku_name\')', 'Товар', itemContainer, 5);
@createGroupCount(turnover, brand, 'По бренду', 8, 'LOOKUP(sku,\'sku_brand\')', 'LOOKUP(LOOKUP(sku,\'sku_brand\'),\'brand_name\')', 'Бренд', itemContainer, 5);
@createGroupCount(turnover, manufacturer, 'По производителю', 9, 'LOOKUP(sku,\'sku_manufacturer\')', 'LOOKUP(LOOKUP(sku,\'sku_manufacturer\'),\'manufacturer_name\')', 'Производитель', itemContainer, 5);
@createGroupCount(turnover, month, 'По месяцам', 10, 'TIME_FORMAT(__time,\'yyyy-MM\')', 'Месяц', timeContainer, 5);
@createGroupCount(turnover, week, 'По неделям', 11, 'TIME_FORMAT(__time,\'xxxx неделя ww\')', 'Неделя', timeContainer, 5);
@createGroupCount(turnover, day, 'По дням', 12, 'TIME_FORMAT(__time,\'yyyy-MM-dd\')', 'День', timeContainer, 5);
@createGroupCount(turnover, supplierStock, 'По складу поставщика', 13, 'supplierStock', 'LOOKUP(supplierStock,\'stock_name\')', 'Склад поставщика', supplierContainer, 5);
@createGroupCount(turnover, UOM, 'По единице измерения', 14, 'UOM', 'LOOKUP(UOM,\'UOM_name\')', 'Единица измерения', itemContainer, 5);
@createGroupCount(turnover, country, 'По стране', 15, 'LOOKUP(sku,\'sku_country\')', 'LOOKUP(LOOKUP(sku,\'sku_country\'),\'country_name\')', 'Страна', itemContainer, 5);

nameGroupsTurnover = CONCAT ', ', (OVERRIDE exprGroup1Turnover(), '\'\'') + ' AS nameGroup1',
                                           (OVERRIDE exprGroup2Turnover(), '\'\'') + ' AS nameGroup2',
                                           (OVERRIDE exprGroup3Turnover(), '\'\'') + ' AS nameGroup3',
                                           (OVERRIDE exprGroup4Turnover(), '\'\'') + ' AS nameGroup4',
                                           (OVERRIDE exprGroup5Turnover(), '\'\'') + ' AS nameGroup5',
                                           (IF gSkuTurnover() THEN 'LOOKUP(sku,\'sku_barcode\')' ELSE '\'\'') + ' AS barcodeSku';
groupsTurnover = CONCAT ', ', (OVERRIDE nameGroup1Turnover(), '\'\'') + ' AS group1',
                                        (OVERRIDE nameGroup2Turnover(), '\'\'') + ' AS group2',
                                        (OVERRIDE nameGroup3Turnover(), '\'\'') + ' AS group3',
                                        (OVERRIDE nameGroup4Turnover(), '\'\'') + ' AS group4',
                                        (OVERRIDE nameGroup5Turnover(), '\'\'') + ' AS group5';

//isTimeGroup() = gMonthTurnover() OR gWeekTurnover() OR gDayTurnover();
isTimeGroup = ABSTRACT CASE BOOLEAN ();
isTimeGroup() += WHEN gMonthTurnover() THEN TRUE;
isTimeGroup() += WHEN gWeekTurnover() THEN TRUE;
isTimeGroup() += WHEN gDayTurnover() THEN TRUE;

isTimeGroup = ABSTRACT CASE BOOLEAN (INTEGER);
isTimeGroup(INTEGER i) += WHEN i == 10 THEN TRUE;
isTimeGroup(INTEGER i) += WHEN i == 11 THEN TRUE;
isTimeGroup(INTEGER i) += WHEN i == 12 THEN TRUE;

isTimeGroup1() = TRUE IF (GROUP MAX INTEGER i IF order(i) == 1 AND isTimeGroup(i));
isTimeGroup2() = TRUE IF (GROUP MAX INTEGER i IF order(i) == 2 AND isTimeGroup(i));
isTimeGroup3() = TRUE IF (GROUP MAX INTEGER i IF order(i) == 3 AND isTimeGroup(i));
isTimeGroup4() = TRUE IF (GROUP MAX INTEGER i IF order(i) == 4 AND isTimeGroup(i));
isTimeGroup5() = TRUE IF (GROUP MAX INTEGER i IF order(i) == 5 AND isTimeGroup(i));
printSumGroup() = TRUE IF NOT isTimeGroup() OR NOT (isTimeGroup1() OR isTimeGroup2() OR isTimeGroup3() OR isTimeGroup4() OR isTimeGroup5());
printSumGroup1() = TRUE IF NOT isTimeGroup() OR NOT (isTimeGroup2() OR isTimeGroup3() OR isTimeGroup4() OR isTimeGroup5());
printSumGroup2() = TRUE IF NOT isTimeGroup() OR NOT (isTimeGroup3() OR isTimeGroup4() OR isTimeGroup5());
printSumGroup3() = TRUE IF NOT isTimeGroup() OR NOT (isTimeGroup4() OR isTimeGroup5());
printSumGroup4() = TRUE IF NOT isTimeGroup() OR NOT isTimeGroup5();
printSumSummary() = TRUE IF NOT isTimeGroup();

isSupplierGroup = ABSTRACT CASE BOOLEAN ();
isSupplierGroup() += WHEN gSupplierTurnover() THEN TRUE;
isSupplierGroup() += WHEN gSupplierStockTurnover() THEN TRUE;

nameGroup1Turnover = DATA LOCAL STRING[255] (INTEGER);
nameGroup2Turnover = DATA LOCAL STRING[255] (INTEGER);
nameGroup3Turnover = DATA LOCAL STRING[255] (INTEGER);
nameGroup4Turnover = DATA LOCAL STRING[255] (INTEGER);
nameGroup5Turnover = DATA LOCAL STRING[255] (INTEGER);
barcodeSku = DATA LOCAL STRING[15] (INTEGER);
group1Turnover = DATA LOCAL STRING[255] (INTEGER);
group2Turnover = DATA LOCAL STRING[255] (INTEGER);
group3Turnover = DATA LOCAL STRING[255] (INTEGER);
group4Turnover = DATA LOCAL STRING[255] (INTEGER);
group5Turnover = DATA LOCAL STRING[255] (INTEGER);

quantitySold 'Продано (кол-во)' = DATA LOCAL NUMERIC[16,5] (INTEGER);
costSumSold 'Продано (себестоимость)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
costSumVATSold 'Продано (себестоимость с НДС)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
markupSumSold 'Продано (надбавка, руб)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
percMarkupSumSold 'Продано (надбавка, %)' = DATA LOCAL NUMERIC[12,2] (INTEGER);
sumVATSold 'Продано (сумма НДС)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumSold 'Продано (сумма)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumPriceSold 'Продано (сумма учетная)' = DATA LOCAL NUMERIC[18,4] (INTEGER);

quantityPurchase 'Закуплено (кол-во)' = DATA LOCAL NUMERIC[16,5] (INTEGER);
sumMinusVATPurchase 'Закуплено (сумма без НДС)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumVATPurchase 'Закуплено (сумма НДС)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumPurchase 'Закуплено (сумма)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumPricePurchase 'Закуплено (сумма учетная)' = DATA LOCAL NUMERIC[18,4] (INTEGER);

costBalance 'Себестоимость' = DATA LOCAL NUMERIC[18,4] (INTEGER);
turnover 'Оборачиваемость' = DATA LOCAL NUMERIC[16,3] (INTEGER);
daysOnStock 'Дней на складе' = DATA LOCAL INTEGER (INTEGER);

balanceB 'Остаток (кол-во)' = DATA LOCAL NUMERIC[16,5] (INTEGER);
costBalanceB 'Остаток (себестоимость)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
VATSupplierB 'НДС поставщика' = DATA LOCAL NUMERIC[18,4] (INTEGER);
costVATBalanceB 'Остаток (себестоимость с НДС)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumBalanceB 'Остаток (сумма)' = DATA LOCAL NUMERIC[18,4] (INTEGER);

balanceA 'Остаток (кол-во)' = DATA LOCAL NUMERIC[16,5] (INTEGER);
costBalanceA 'Остаток (себестоимость)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
VATSupplierA 'НДС поставщика' = DATA LOCAL NUMERIC[18,4] (INTEGER);
costVATBalanceA 'Остаток (себестоимость с НДС)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumBalanceA 'Остаток (сумма)' = DATA LOCAL NUMERIC[18,4] (INTEGER);

countRowsTurnover 'Количество строк' () = GROUP SUM 1 IF nameGroup1Turnover(INTEGER i);

isBalanceB 'Остаток на начало' = DATA LOCAL BOOLEAN ();
isIn 'Поступление' = DATA LOCAL BOOLEAN ();
isOut 'Продажа' = DATA LOCAL BOOLEAN ();
isBalanceA 'Остаток на конец' = DATA LOCAL BOOLEAN ();

isQuantity 'Количество' = DATA LOCAL BOOLEAN ();
isCost 'Себестоимость' = DATA LOCAL BOOLEAN ();
isVATSupplier 'НДС поставщика' = DATA LOCAL BOOLEAN ();
isCostVAT 'Себестоимость с НДС' = DATA LOCAL BOOLEAN ();
isMarkup 'Надбавка' = DATA LOCAL BOOLEAN ();
overOverIsMarkup = ABSTRACT BOOLEAN();
overIsMarkup 'Надбавка' = OVERRIDE isMarkup(), overOverIsMarkup();

isSum 'Сумма' = DATA LOCAL BOOLEAN ();
isTurnover 'Оборачиваемость' = DATA LOCAL BOOLEAN ();
isDaysOnStock 'Дней на складе' = DATA LOCAL BOOLEAN ();

extraIsBalanceA 'Остаток на конец' = ABSTRACT BOOLEAN ();
extraIsQuantity 'Количество' = ABSTRACT BOOLEAN ();

overIsOut 'Продажа' = OVERRIDE isOut(), (overIsMarkup() OR isTurnover());
overIsBalanceA 'Остаток на конец' = OVERRIDE isBalanceA(), extraIsBalanceA();
overIsQuantity 'Количество' = OVERRIDE isQuantity(), extraIsQuantity();

overIsCost 'Себестоимость' = OVERRIDE isCost(), (overIsMarkup() OR isTurnover());

//------- Группы складов -------
dataInclude 'Вкл' = DATA LOCAL BOOLEAN (StockGroup);

levelParentInclude(StockGroup stockGroup) = GROUP MIN level(stockGroup, StockGroup parent) IF dataInclude(parent);    
nearestParentInclude(StockGroup stockGroup) = stockGroup(stockGroup, levelParentInclude(stockGroup));
nearestInclude(StockGroup stockGroup) = dataInclude(nearestParentInclude(stockGroup));

include 'Вкл' (StockGroup stockGroup) = OVERRIDE dataInclude(stockGroup), nearestInclude (stockGroup);

deleteIncludeStockGroups 'Сбросить отмеченные'()  { 
    dataInclude(StockGroup g) <- NULL;
};

nameIncludeStockGroups 'Группы складов (все)' ()= GROUP CONCAT TEXT(name(StockGroup stockGroup)) IF dataInclude(stockGroup), ', ' ORDER stockGroup CHARWIDTH 20;

//------- Склады -------
dataInclude 'Вкл' = DATA LOCAL BOOLEAN (Stock);

include 'Вкл' (Stock stock) = (OVERRIDE dataInclude(stock), include(stockGroup(stock))) IF isCompany(stock);

deleteIncludeStocks 'Сбросить отмеченные'()  { 
    dataInclude (Stock st) <- NULL;
};

nameIncludeStocks 'Склады (все)' ()= GROUP CONCAT TEXT(name(Stock stock)) IF dataInclude(stock), ', ' ORDER stock CHARWIDTH 20;
countIncludeStocks () = GROUP SUM 1 IF dataInclude(Stock stock);
indexIncludeStock (Stock stock) = PARTITION SUM 1 ORDER stock IF dataInclude(stock);

nameIncludeStockGroupsStock 'Группы складов, склады (все)' () = CONCAT '; ', nameIncludeStockGroups(), nameIncludeStocks() CHARWIDTH 20;

FORM dialogStockGroupsStock 'Склады'
    TREE stockTree a = BPSTRING[3], sg = StockGroup PARENT parent(sg)
    PROPERTIES READONLY VALUE(a), name(sg)
    PROPERTIES include(sg)
    ORDERS name(sg)
    PROPERTIES deleteIncludeStockGroups() DRAW sg TOOLBAR
    FILTERS stringEqualsAll(a)

    OBJECTS s = Stock
    PROPERTIES(s) READONLY id, name
    PROPERTIES (s) include
    ORDERS name(s)
    PROPERTIES deleteIncludeStocks() DRAW s TOOLBAR
    FILTERS isParent(sg, s) OR (s IS Stock AND NOT sg),
            isCompany(s),
            countCompanyStock(sg),
            accessCompany(currentUser(),s)

    FILTERGROUP inactiveStock FILTER 'Активный' active(s) 'ctrl F10' DEFAULT    
    FILTERGROUP select FILTER 'Отм.' include(s) 'F9'
;
DESIGN dialogStockGroupsStock {
    BOX {
        size = (1024, 768);
        NEW topContainer {
            horizontal = TRUE;
            fill = 1;
            MOVE BOX(TREE stockTree) {
                caption = 'Склады';
            }
            MOVE BOX(s) {
                fill = 1.5;
                GRID(s) {
                    defaultComponent = TRUE;
                }
                PROPERTY(name(s)){
                    charWidth = 35;
                }
            }
        }
        MOVE TOOLBARBOX;
    }
}

changeIncludeStockGroupsStock()  { 
    DIALOG dialogStockGroupsStock;
}

//------- Поставщики -------
include 'Вкл' = DATA LOCAL BOOLEAN (LegalEntity);

deleteIncludeLegalEntities 'Сбросить отмеченные'()  { 
    include(LegalEntity l) <- NULL;
};

nameIncludeLegalEntities 'Поставщики (все)' () = GROUP CONCAT TEXT((OVERRIDE name(LegalEntity le),'')) IF include(le), ', ' ORDER le CHARWIDTH 20;

FORM dialogLegalEntity 'Поставщики'
    OBJECTS le = LegalEntity
    PROPERTIES include(le)
    PROPERTIES(le) READONLY id, name, fullName
    ORDERS name(le)
    FILTERS isSupplier(le)
    FILTERGROUP inLegalEntity FILTER 'Отмеченные' include(le)
    PROPERTIES deleteIncludeLegalEntities() DRAW le TOOLBAR
;
DESIGN dialogLegalEntity {
    BOX { size = (1024, 768); }
}

changeIncludeLegalEntities()  { 
    DIALOG dialogLegalEntity OBJECTS le INPUT DO {
        IF NOT (GROUP SUM 1 IF include(LegalEntity l)) THEN
            include(le) <- TRUE;
    }
}

//------- Бренды -------
include 'Вкл' = DATA LOCAL BOOLEAN (Brand);

deleteIncludeBrands 'Сбросить отмеченные'()  { 
    include(Brand b) <- NULL;
};

nameIncludeBrands 'Бренд (все)' () = GROUP CONCAT TEXT((OVERRIDE name(Brand b),'')) IF include(b), ', ' ORDER b CHARWIDTH 20;

commaBrandId 'Список кодов' = DATA LOCAL ISTRING[4000]() CHARWIDTH 30 NOFLEX;

addCommaBrandId 'Добавить' ()  { 
    IF commaBrandId() THEN {
        include(Brand b) <- TRUE WHERE (GROUP SUM 1 IF isWordInCSV(id(b), replace(commaBrandId(),' ',',')));
        commaBrandId() <- NULL;
    }
}

FORM dialogBrand 'Бренды'

    TREE treeGroups g = BrandGroup PARENT parent(g)
    PROPERTIES READONLY name(g)
    
    OBJECTS b = Brand
    PROPERTIES PANEL commaBrandId(), addCommaBrandId()
    PROPERTIES include(b)
    PROPERTIES(b) READONLY id, name
    ORDERS name(b)
    FILTERS isParent(brandGroup(b), g) OR NOT brandGroup(b)
    FILTERGROUP inBrand FILTER 'Отмеченные' include(b)
    PROPERTIES deleteIncludeBrands() DRAW b TOOLBAR    
;
DESIGN dialogBrand {
    BOX { size = (1024, 768); }
    OBJECTS {
        horizontal = TRUE;
        MOVE BOX (TREE treeGroups) FIRST;
    }
}

changeIncludeBrands()  { 
    DIALOG dialogBrand OBJECTS b INPUT DO {
        IF NOT (GROUP SUM 1 IF include(Brand br)) THEN
            include(b) <- TRUE;
    }
}

//------- Производители -------
include 'Вкл' = DATA LOCAL BOOLEAN (Manufacturer);

deleteIncludeManufacturers 'Сбросить отмеченные'()  { 
    include(Manufacturer m) <- NULL;
};

nameIncludeManufacturers 'Производитель (все)' () = GROUP CONCAT TEXT((OVERRIDE name(Manufacturer m),'')) IF include(m), ', ' ORDER m CHARWIDTH 20;

commaManufacturerId 'Список кодов' = DATA LOCAL ISTRING[4000]() CHARWIDTH 30 NOFLEX;

addCommaManufacturerId 'Добавить' ()  { 
    IF commaManufacturerId() THEN {
        include(Manufacturer m) <- TRUE WHERE (GROUP SUM 1 IF isWordInCSV(id(m), replace(commaManufacturerId(),' ',',')));
        commaManufacturerId() <- NULL;
    }
}

FORM dialogManufacturer 'Производители'
    OBJECTS m = Manufacturer
    PROPERTIES PANEL commaManufacturerId(), addCommaManufacturerId()
    PROPERTIES include(m)
    PROPERTIES(m) READONLY id, name
    ORDERS name(m)
    FILTERGROUP inManufacturer FILTER 'Отмеченные' include(m)
    PROPERTIES deleteIncludeManufacturers() DRAW m TOOLBAR    
;
DESIGN dialogManufacturer {
    BOX { size = (1024, 768); }
}

changeIncludeManufacturers()  { 
    DIALOG dialogManufacturer OBJECTS m INPUT DO {
        IF NOT (GROUP SUM 1 IF include(Manufacturer mr)) THEN
            include(m) <- TRUE;
    }
}

//------- Страны -------
include 'Вкл' = DATA LOCAL BOOLEAN (Country);

deleteIncludeCountries 'Сбросить отмеченные'()  { 
    include(Country c) <- NULL;
};

nameIncludeCountries 'Страны (все)' () = GROUP CONCAT TEXT((OVERRIDE name(Country c),'')) IF include(c), ', ' ORDER c CHARWIDTH 20;

commaCountryId 'Список кодов' = DATA LOCAL ISTRING[4000]() CHARWIDTH 30 NOFLEX;

addCommaCountryId 'Добавить' ()  { 
    IF commaCountryId() THEN {
        include(Country c) <- TRUE WHERE (GROUP SUM 1 IF isWordInCSV(sid(c), replace(commaCountryId(),' ',',')));
        commaCountryId() <- NULL;
    }
}

FORM dialogCountry 'Страны'
    OBJECTS c = Country
    PROPERTIES PANEL commaCountryId(), addCommaCountryId()
    PROPERTIES include(c)
    PROPERTIES(c) READONLY sid, name
    ORDERS name(c)
    FILTERGROUP inCountry FILTER 'Отмеченные' include(c)
    PROPERTIES deleteIncludeCountries() DRAW c TOOLBAR    
;
DESIGN dialogCountry {
    BOX { size = (1024, 768); }
}

changeIncludeCountries()  { 
    DIALOG dialogCountry OBJECTS c INPUT DO {
        IF NOT (GROUP SUM 1 IF include(Country cr)) THEN
            include(c) <- TRUE;
    }
}


//------- Группы товаров -------
dataInclude 'Вкл' = DATA LOCAL BOOLEAN (SkuGroup);

levelParentInclude(SkuGroup skuGroup) = GROUP MIN level(skuGroup, SkuGroup parent) IF dataInclude(parent);    
nearestParentInclude(SkuGroup skuGroup) = skuGroup(skuGroup, levelParentInclude(skuGroup));
nearestInclude(SkuGroup skuGroup) = dataInclude(nearestParentInclude (skuGroup));

include 'Вкл' (SkuGroup skuGroup) = OVERRIDE dataInclude(skuGroup), nearestInclude(skuGroup);

deleteIncludeSkuGroups 'Сбросить отмеченные'()  { 
    dataInclude(SkuGroup g) <- NULL;
};

nameIncludeSkuGroups 'Группы товаров (все)' ()= GROUP CONCAT TEXT(name(SkuGroup skuGroup)) IF dataInclude(skuGroup), ', ' ORDER skuGroup CHARWIDTH 20;
nameIncludeSkuGroups1 'Направления (все)' = GROUP CONCAT TEXT('\''+ TEXT(SkuGroup skuGroup) +'\'') IF dataInclude(skuGroup) AND level(skuGroup) == 2, ', ' ORDER skuGroup CHARWIDTH 20;
nameIncludeSkuGroups2 'Группы (все)' = GROUP CONCAT TEXT('\''+ TEXT(SkuGroup skuGroup) +'\'') IF dataInclude(skuGroup) AND level(skuGroup) == 3, ', ' ORDER skuGroup CHARWIDTH 20;
nameIncludeSkuGroups3 'Подгруппы (все)' = GROUP CONCAT TEXT('\''+ TEXT(SkuGroup skuGroup) +'\'') IF dataInclude(skuGroup) AND level(skuGroup) == 4, ', ' ORDER skuGroup CHARWIDTH 20;
nameIncludeSkuGroups4 'Субгруппы (все)' = GROUP CONCAT TEXT('\''+ TEXT(SkuGroup skuGroup) +'\'') IF dataInclude(skuGroup) AND level(skuGroup) == 5, ', ' ORDER skuGroup CHARWIDTH 20;
nameIncludeSkuGroups5 'Виды (все)' = GROUP CONCAT TEXT('\''+ TEXT(SkuGroup skuGroup) +'\'') IF dataInclude(skuGroup) AND level(skuGroup) == 6, ', ' ORDER skuGroup CHARWIDTH 20;

//------- Товары -------
dataInclude 'Вкл' = DATA LOCAL BOOLEAN (Sku);

includeSkuGroup (Sku sku) = TRUE IF (GROUP MAX 1 IF include(SkuGroup g) AND isParent(g, sku));

include 'Вкл' (Sku sku) = OVERRIDE dataInclude(sku), includeSkuGroup(sku);

deleteIncludeSkus 'Сбросить отмеченные'()  { 
    dataInclude(Sku b) <- NULL;
};

nameIncludeSkus 'Товары (все)' = GROUP CONCAT replace(name(Sku sku), '\n', '') IF dataInclude(sku), ', ' ORDER sku CHARWIDTH 20;
nameIncludeBarcodes 'ШК (все)' = GROUP CONCAT TEXT(idBarcode(Sku sku)) IF dataInclude(sku), ',' ORDER sku CHARWIDTH 20;
countIncludeSkus () = GROUP SUM 1 IF dataInclude(Sku sku);
indexIncludeSku (Sku sku) = PARTITION SUM 1 ORDER sku IF dataInclude(sku);

commaBarcodeId 'Список ШК' = DATA LOCAL ISTRING[4000]() CHARWIDTH 30 NOFLEX;

addCommaBarcodeId 'Добавить' ()  { 
    IF commaBarcodeId() THEN {
        dataInclude(Sku sku) <- TRUE WHERE [GROUP SUM 1 IF isWordInCSV(id(Barcode barcode), replace(commaBarcodeId(),' ',',')) BY sku(barcode)](sku);
        commaBarcodeId() <- NULL;
    }
}

addSkuLists 'Отметить списки SKU' () {
    DIALOG dialogAddLists DO {
        FOR [GROUP SUM 1 IF in(list(ListDetail d)) BY sku(d)](Sku sk) DO {
            include(sk) <- TRUE;
        }
    }
    in(List l) <- NULL;
}

FORM dialogSku 'Товары'
    TREE skuTree sk = SkuGroup PARENT parent(sk)
    PROPERTIES READONLY order(sk), name(sk)
    PROPERTIES include(sk)
    ORDERS order(sk), name(sk)
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F6' DEFAULT   
    PROPERTIES deleteIncludeSkuGroups() DRAW sk TOOLBAR

    OBJECTS sku = Sku
    PROPERTIES() PANEL commaBarcodeId, addCommaBarcodeId, addSkuLists
    PROPERTIES include(sku)
    PROPERTIES(sku) READONLY idBarcode, name, shortNameUOM
    ORDERS name(sku)
    FILTERS isParent(sk,sku)
    FILTERGROUP inSku FILTER 'Отмеченные' include(sku)
    PROPERTIES deleteIncludeSkus() DRAW sku TOOLBAR
;
DESIGN dialogSku {
    BOX {
        size = (1024, 768);
        GROUP() {
            lines = 1;
            horizontal = TRUE;
        }
        NEW topContainer {
            horizontal = TRUE;
            fill = 1;
            MOVE BOX(TREE skuTree) {
                caption = 'Товары';
            }
            MOVE BOX(sku) {
                fill = 1.5;
                GRID(sku) {
                    defaultComponent = TRUE;
                }
            }
        }
        MOVE TOOLBARBOX;
    }
}

changeIncludeSkus()  { 
    DIALOG dialogSku;
}
changeIncludeBarcodes()  { 
    INPUT s = ISTRING[4000] DO {
        dataInclude(Sku sku) <- TRUE IF [GROUP SUM 1 IF isWordInCSV(id(Barcode barcode), replace(s,' ',',')) BY sku(barcode)](sku);
    }
}

filterGroups() = CONCAT ' OR', ' LOOKUP(sku,\'sku_group1\') IN (' + nameIncludeSkuGroups1() + ')',
                                       ' LOOKUP(sku,\'sku_group2\') IN (' + nameIncludeSkuGroups2() + ')',
                                       ' LOOKUP(sku,\'sku_group3\') IN (' + nameIncludeSkuGroups3() + ')',
                                       ' LOOKUP(sku,\'sku_group4\') IN (' + nameIncludeSkuGroups4() + ')',
                                       ' LOOKUP(sku,\'sku_group5\') IN (' + nameIncludeSkuGroups5() + ')';

extraFilter = ABSTRACT TEXT();

filter() = (OVERRIDE ' AND stock IN (' + (GROUP CONCAT TEXT('\''+ TEXT(Stock s) +'\'') IF (include(s) OR (NOT (GROUP SUM 1 IF include(Stock stock)) AND limitAccess(currentUser()))) AND accessCompany(currentUser(),s),',' ORDER s) + ')','')
                    + (OVERRIDE ' AND supplier IN (' + (GROUP CONCAT TEXT('\''+ TEXT(LegalEntity le) +'\'') IF include(le),',' ORDER le) + ')','')
                    + (OVERRIDE ' AND LOOKUP(sku,\'sku_brand\') IN (' + (GROUP CONCAT TEXT('\''+ TEXT(Brand b) +'\'') IF include(b),',' ORDER b) + ')','')
                    + (OVERRIDE ' AND LOOKUP(sku,\'sku_manufacturer\') IN (' + (GROUP CONCAT TEXT('\''+ TEXT(Manufacturer b) +'\'') IF include(b),',' ORDER b) + ')','')
                    + (OVERRIDE ' AND LOOKUP(sku,\'sku_country\') IN (' + (GROUP CONCAT TEXT('\''+ TEXT(Country c) +'\'') IF include(c),',' ORDER c) + ')','')
                    + (OVERRIDE ' AND (' + filterGroups() + ')','')
                    + (OVERRIDE ' AND sku IN (' + (GROUP CONCAT TEXT('\''+ TEXT(Sku sku) +'\'') IF dataInclude(sku),',' ORDER sku) + ')','')
                    + (OVERRIDE extraFilter(), '');
                    
values() = (IF overIsOut() AND overIsQuantity() THEN 'SUM(quantitySold) AS quantitySold, ' ELSE '')
                            + (IF overIsOut() AND overIsCost() THEN 'SUM(costSumSold) AS costSumSold, ' ELSE '')
                            + (IF overIsOut() AND isCostVAT() THEN 'SUM(costSumVATSold) AS costSumVATSold, ' ELSE '')
                            + (IF overIsOut() AND overIsMarkup() THEN 'SUM(sumSold)-SUM(sumVATSold)-SUM(costSumSold) AS markupSumSold, ' ELSE '')
                            + (IF overIsOut() AND overIsMarkup() THEN '(SUM(sumSold)-SUM(sumVATSold)-SUM(costSumSold))*100/SUM(costSumSold) AS percMarkupSumSold, ' ELSE '')
                            + (IF overIsOut() AND isSum() THEN 'SUM(sumVATSold) AS sumVATSold, ' ELSE '')
                            + (IF overIsOut() AND isSum() THEN 'SUM(sumSold) AS sumSold, ' ELSE '')
                            + (IF overIsOut() AND isSum() THEN 'SUM(sumPriceSold) AS sumPriceSold, ' ELSE '')
                            + (IF isIn() AND overIsQuantity() THEN 'SUM(quantityPurchase) AS quantityPurchase, ' ELSE '')
                            + (IF isIn() AND (isSum() OR overIsCost()) THEN 'SUM(sumPurchase)-SUM(sumVATPurchase) AS sumMinusVATPurchase, ' ELSE '')
                            + (IF isIn() AND (isSum() OR overIsCost()) THEN 'SUM(sumVATPurchase) AS sumVATPurchase, ' ELSE '')
                            + (IF isIn() AND (isSum() OR isCostVAT()) THEN 'SUM(sumPurchase) AS sumPurchase, ' ELSE '')
                            + (IF isIn() AND isSum() THEN 'SUM(sumPricePurchase) AS sumPricePurchase, ' ELSE '')
                            + (IF isTurnover() THEN 'SUM(costBalance)/COALESCE(SUM(costSumSold),0.0001) AS turnover, ' ELSE '')
                            + (IF isTurnover() THEN 'SUM(costBalance) AS costBalance, ' ELSE '')
                            + (IF isDaysOnStock() THEN 'COUNT(DISTINCT __time) AS daysOnStock, ' ELSE '');

overFillTurnoverReport  ABSTRACT LIST ( DATE, DATE);
overFillTurnoverReport = DATA LOCAL BOOLEAN ();

fillTurnoverReport (DATE dateFrom, DATE dateTo)  { 
    nameGroup1Turnover(INTEGER i) <- NULL;
    nameGroup2Turnover(INTEGER i) <- NULL;
    nameGroup3Turnover(INTEGER i) <- NULL;
    nameGroup4Turnover(INTEGER i) <- NULL;
    nameGroup5Turnover(INTEGER i) <- NULL;
    barcodeSku(INTEGER i) <- NULL;
    group1Turnover(INTEGER i) <- NULL;
    group2Turnover(INTEGER i) <- NULL;
    group3Turnover(INTEGER i) <- NULL;
    group4Turnover(INTEGER i) <- NULL;
    group5Turnover(INTEGER i) <- NULL;
    
    quantitySold(INTEGER i) <- NULL;
    costSumSold(INTEGER i) <- NULL;
    costSumVATSold(INTEGER i) <- NULL;
    markupSumSold(INTEGER i) <- NULL;
    percMarkupSumSold(INTEGER i) <- NULL;
    sumVATSold(INTEGER i) <- NULL;
    sumSold(INTEGER i) <- NULL;
    sumPriceSold(INTEGER i) <- NULL;
    
    quantityPurchase(INTEGER i) <- NULL;
    sumMinusVATPurchase(INTEGER i) <- NULL;
    sumVATPurchase(INTEGER i) <- NULL;
    sumPurchase(INTEGER i) <- NULL;
    sumPricePurchase(INTEGER i) <- NULL;
    
    costBalance(INTEGER i) <- NULL;
    turnover(INTEGER i) <- NULL;
    daysOnStock(INTEGER i) <- NULL;
    
    balanceB(INTEGER i) <- NULL;
    costBalanceB(INTEGER i) <- NULL;
    VATSupplierB(INTEGER i) <- NULL;
    costVATBalanceB(INTEGER i) <- NULL;
    sumBalanceB(INTEGER i) <- NULL;
    
    balanceA(INTEGER i) <- NULL;
    costBalanceA(INTEGER i) <- NULL;
    VATSupplierA(INTEGER i) <- NULL;
    costVATBalanceA(INTEGER i) <- NULL;
    sumBalanceA(INTEGER i) <- NULL;
    
    overFillTurnoverReport(dateFrom,dateTo);
    IF NOT overFillTurnoverReport() THEN {
        IF gDayTurnover() THEN {
            IF exportBalanceB() THEN {
                query(replace('SELECT ' + values() 
                     + (IF overIsBalanceA() AND overIsQuantity() THEN 'SUM(balance) AS balanceA, ' ELSE '')
                     + (IF overIsBalanceA() AND overIsCost() THEN 'SUM(costBalance) AS costBalanceA, ' ELSE '')
                     + (IF overIsBalanceA() AND isVATSupplier() THEN '(SUM(costVATBalance)-SUM(costBalance)) AS VATSupplierA, ' ELSE '')
                     + (IF overIsBalanceA() AND isCostVAT() THEN 'SUM(costVATBalance) AS costVATBalanceA, ' ELSE '')
                     + (IF overIsBalanceA() AND isSum() THEN 'SUM(sumBalance) AS sumBalanceA, ' ELSE '')
                     + (IF isBalanceB() AND overIsQuantity() THEN 'SUM(balanceB) AS balanceB, ' ELSE '')
                     + (IF isBalanceB() AND overIsCost() THEN 'SUM(costBalanceB) AS costBalanceB, ' ELSE '')
                     + (IF isBalanceB() AND isVATSupplier() THEN '(SUM(costVATBalanceB)-SUM(costBalanceB)) AS VATSupplierB, ' ELSE '')
                     + (IF isBalanceB() AND isCostVAT() THEN 'SUM(costVATBalanceB) AS costVATBalanceB, ' ELSE '')
                     + (IF isBalanceB() AND isSum() THEN 'SUM(sumBalanceB) AS sumBalanceB, ' ELSE '')
                     + nameGroupsTurnover() + ', ' + groupsTurnover()
                     + (IF useTurnoverSkuBI() AND NOT isSupplierGroup() AND NOT nameIncludeLegalEntities() THEN ' FROM turnoverSku' ELSE ' FROM turnover')
                     + ' WHERE __time BETWEEN TIME_PARSE(\'' + dateFrom + '\',\'yyyy-MM-dd\') AND TIME_PARSE(\'' + dateTo + '\',\'yyyy-MM-dd\')'
                     + filter()
                     + ' GROUP BY ' + (CONCAT ', ', nameGroup1Turnover(), nameGroup2Turnover(), nameGroup3Turnover(), nameGroup4Turnover(), nameGroup5Turnover())
                     + (OVERRIDE ' LIMIT ' + maxRowCount(),''),'"','\\"'));
                    
                IMPORT JSON FROM queryResult() TO nameGroup1Turnover = nameGroup1, nameGroup2Turnover = nameGroup2,
                                                  nameGroup3Turnover = nameGroup3, nameGroup4Turnover = nameGroup4, nameGroup5Turnover = nameGroup5,
                                                  group1Turnover = group1, group2Turnover = group2,
                                                  group3Turnover = group3, group4Turnover = group4, group5Turnover = group5,
                                                  quantitySold = quantitySold, costSumSold = costSumSold, costSumVATSold = costSumVATSold,
                                                  markupSumSold = markupSumSold, percMarkupSumSold = percMarkupSumSold,
                                                  sumVATSold = sumVATSold, sumSold = sumSold, sumPriceSold = sumPriceSold,
                                                  quantityPurchase = quantityPurchase, sumMinusVATPurchase = sumMinusVATPurchase,
                                                  sumVATPurchase = sumVATPurchase, sumPurchase = sumPurchase, sumPricePurchase = sumPricePurchase,
                                                  turnover = turnover, costBalance = costBalance, balanceA = balanceA, costBalanceA = costBalanceA,
                                                  VATSupplierA = VATSupplierA, costVATBalanceA = costVATBalanceA, sumBalanceA = sumBalanceA,
                                                  daysOnStock = daysOnStock, barcodeSku = barcodeSku, balanceB = balanceB, costBalanceB = costBalanceB,
                                                  VATSupplierB = VATSupplierB, costVATBalanceB = costVATBalanceB, sumBalanceB = sumBalanceB;
            } ELSE {
                query(replace('SELECT ' + values() 
                     + (IF overIsBalanceA() AND overIsQuantity() THEN 'SUM(balance) AS balanceA, ' ELSE '')
                     + (IF overIsBalanceA() AND overIsCost() THEN 'SUM(costBalance) AS costBalanceA, ' ELSE '')
                     + (IF overIsBalanceA() AND isVATSupplier() THEN '(SUM(costVATBalance)-SUM(costBalance)) AS VATSupplierA, ' ELSE '')
                     + (IF overIsBalanceA() AND isCostVAT() THEN 'SUM(costVATBalance) AS costVATBalanceA, ' ELSE '')
                     + (IF overIsBalanceA() AND isSum() THEN 'SUM(sumBalance) AS sumBalanceA, ' ELSE '')
                     + nameGroupsTurnover() + ', ' + groupsTurnover()
                     + (IF useTurnoverSkuBI() AND NOT isSupplierGroup() AND NOT nameIncludeLegalEntities() THEN ' FROM turnoverSku' ELSE ' FROM turnover')
                     + ' WHERE __time BETWEEN TIME_PARSE(\'' + dateFrom + '\',\'yyyy-MM-dd\') AND TIME_PARSE(\'' + dateTo + '\',\'yyyy-MM-dd\')'
                     + filter()
                     + ' GROUP BY ' + (CONCAT ', ', nameGroup1Turnover(), nameGroup2Turnover(), nameGroup3Turnover(), nameGroup4Turnover(), nameGroup5Turnover())
                     + (OVERRIDE ' LIMIT ' + maxRowCount(),''),'"','\\"'));
                    
                IMPORT JSON FROM queryResult() TO nameGroup1Turnover = nameGroup1, nameGroup2Turnover = nameGroup2, 
                                                  nameGroup3Turnover = nameGroup3, nameGroup4Turnover = nameGroup4, nameGroup5Turnover = nameGroup5,
                                                  group1Turnover = group1, group2Turnover = group2, 
                                                  group3Turnover = group3, group4Turnover = group4, group5Turnover = group5,
                                                  quantitySold = quantitySold, costSumSold = costSumSold, costSumVATSold = costSumVATSold,
                                                  markupSumSold = markupSumSold, percMarkupSumSold = percMarkupSumSold,
                                                  sumVATSold = sumVATSold, sumSold = sumSold, sumPriceSold = sumPriceSold,
                                                  quantityPurchase = quantityPurchase, sumMinusVATPurchase = sumMinusVATPurchase,
                                                  sumVATPurchase = sumVATPurchase, sumPurchase = sumPurchase, sumPricePurchase = sumPricePurchase,
                                                  turnover = turnover, costBalance = costBalance, balanceA = balanceA, costBalanceA = costBalanceA,
                                                  VATSupplierA = VATSupplierA, costVATBalanceA = costVATBalanceA, sumBalanceA = sumBalanceA,
                                                  daysOnStock = daysOnStock, barcodeSku = barcodeSku;
            }
        } ELSE {
            query(replace('SELECT ' + values() 
                 + nameGroupsTurnover() + ', ' + groupsTurnover()
                 + (IF useTurnoverSkuBI() AND NOT isSupplierGroup() AND NOT nameIncludeLegalEntities() THEN ' FROM turnoverSku' ELSE ' FROM turnover')
                 + ' WHERE __time BETWEEN TIME_PARSE(\'' + dateFrom + '\',\'yyyy-MM-dd\') AND TIME_PARSE(\'' + dateTo + '\',\'yyyy-MM-dd\')'
                 + filter()
                 + ' GROUP BY ' + (CONCAT ', ', nameGroup1Turnover(), nameGroup2Turnover(), nameGroup3Turnover(), nameGroup4Turnover(), nameGroup5Turnover())
                 + (OVERRIDE ' LIMIT ' + maxRowCount(),''),'"','\\"'));
                
            IMPORT JSON FROM queryResult() TO nameGroup1Turnover = nameGroup1, nameGroup2Turnover = nameGroup2, 
                                              nameGroup3Turnover = nameGroup3, nameGroup4Turnover = nameGroup4, nameGroup5Turnover = nameGroup5,
                                              group1Turnover = group1, group2Turnover = group2, 
                                              group3Turnover = group3, group4Turnover = group4, group5Turnover = group5,
                                              quantitySold = quantitySold, costSumSold = costSumSold, costSumVATSold = costSumVATSold,
                                              markupSumSold = markupSumSold, percMarkupSumSold = percMarkupSumSold,
                                              sumVATSold = sumVATSold, sumSold = sumSold, sumPriceSold = sumPriceSold,
                                              quantityPurchase = quantityPurchase, sumMinusVATPurchase = sumMinusVATPurchase,
                                              sumVATPurchase = sumVATPurchase, sumPurchase = sumPurchase, sumPricePurchase = sumPricePurchase,
                                              turnover = turnover, costBalance = costBalance, daysOnStock = daysOnStock, barcodeSku = barcodeSku;
            LOCAL localNameGroup1 = STRING[255] (INTEGER);
            LOCAL localNameGroup2 = STRING[255] (INTEGER);
            LOCAL localNameGroup3 = STRING[255] (INTEGER);
            LOCAL localNameGroup4 = STRING[255] (INTEGER);
            LOCAL localNameGroup5 = STRING[255] (INTEGER);            
            LOCAL localGroup1 = STRING[255] (INTEGER);
            LOCAL localGroup2 = STRING[255] (INTEGER);
            LOCAL localGroup3 = STRING[255] (INTEGER);
            LOCAL localGroup4 = STRING[255] (INTEGER);
            LOCAL localGroup5 = STRING[255] (INTEGER);
            LOCAL localBarcodeSku = STRING[15] (INTEGER);
            LOCAL localBalanceB = NUMERIC[16,5] (INTEGER);
            LOCAL localCostBalanceB = NUMERIC[18,4] (INTEGER);
            LOCAL localVATSupplierB = NUMERIC[18,4] (INTEGER);
            LOCAL localCostVATBalanceB = NUMERIC[18,4] (INTEGER);
            LOCAL localSumBalanceB = NUMERIC[18,4] (INTEGER);
            LOCAL localBalanceA = NUMERIC[16,5] (INTEGER);
            LOCAL localCostBalanceA = NUMERIC[18,4] (INTEGER);
            LOCAL localVATSupplierA = NUMERIC[18,4] (INTEGER);
            LOCAL localCostVATBalanceA = NUMERIC[18,4] (INTEGER);
            LOCAL localSumBalanceA = NUMERIC[18,4] (INTEGER);
            LOCAL localStatisticUOMBalanceB = NUMERIC[16,5] (INTEGER);
            LOCAL localStatisticUOMBalanceA = NUMERIC[16,5] (INTEGER);
            
            IF isBalanceB() AND NOT isTimeGroup() THEN {
                query(replace('SELECT '
                    + (IF isBalanceB() AND overIsQuantity() THEN 'SUM(balance) AS balanceB, ' ELSE '')
                    + (IF isBalanceB() AND overIsCost() THEN 'SUM(costBalance) AS costBalanceB, ' ELSE '')
                    + (IF isBalanceB() AND isVATSupplier() THEN 'SUM(costVATBalance)-SUM(costBalance) AS VATSupplierB, ' ELSE '')
                    + (IF isBalanceB() AND isCostVAT() THEN 'SUM(costVATBalance) AS costVATBalanceB, ' ELSE '')
                    + (IF isBalanceB() AND isSum() THEN 'SUM(sumBalance) AS sumBalanceB, ' ELSE '')
                    + nameGroupsTurnover() + ', ' + groupsTurnover()
                    + (IF useTurnoverSkuBI() AND NOT isSupplierGroup() AND NOT nameIncludeLegalEntities() THEN ' FROM turnoverSku' ELSE ' FROM turnover')
                    + ' WHERE __time = TIME_PARSE(\'' + sum(dateFrom,-1) + '\',\'yyyy-MM-dd\')'
                    + filter()
                    + ' GROUP BY ' + (CONCAT ', ', nameGroup1Turnover(), nameGroup2Turnover(), nameGroup3Turnover(), nameGroup4Turnover(), nameGroup5Turnover())
                    + (OVERRIDE ' LIMIT ' + maxRowCount(),''),'"','\\"'));
                    
                IMPORT JSON FROM queryResult() TO localNameGroup1 = nameGroup1, localNameGroup2 = nameGroup2, localNameGroup3 = nameGroup3, localNameGroup4 = nameGroup4, localNameGroup5 = nameGroup5,
                                                  localGroup1 = group1, localGroup2 = group2, localGroup3 = group3, localGroup4 = group4, localGroup5 = group5,
                                                  localBalanceB = balanceB, localStatisticUOMBalanceB = statisticUOMBalanceB, localCostBalanceB = costBalanceB,
                                                  localVATSupplierB = VATSupplierB, localCostVATBalanceB = costVATBalanceB, localSumBalanceB = sumBalanceB, localBarcodeSku = barcodeSku;
                
                FOR imported(INTEGER i) AND INTEGER number = [ GROUP LAST INTEGER n ORDER n BY group1Turnover(n), group2Turnover(n), group3Turnover(n), group4Turnover(n), group5Turnover(n), barcodeSku(n)](localGroup1(i), localGroup2(i), localGroup3(i), localGroup4(i), localGroup5(i), localBarcodeSku(i)) DO {
                    balanceB(number) <- localBalanceB(i);
                    costBalanceB(number) <- localCostBalanceB(i);
                    VATSupplierB(number) <- localVATSupplierB(i);
                    costVATBalanceB(number) <- localCostVATBalanceB(i);
                    sumBalanceB(number) <- localSumBalanceB(i);
                }
            }
            
            IF isBalanceB() AND exportBalanceB() AND isTimeGroup() THEN {                        
                query(replace('SELECT '
                    + (IF isBalanceB() AND overIsQuantity() THEN 'SUM(balanceB) AS balanceB, ' ELSE '')
                    + (IF isBalanceB() AND overIsCost() THEN 'SUM(costBalanceB) AS costBalanceB, ' ELSE '')
                    + (IF isBalanceB() AND isVATSupplier() THEN 'SUM(costVATBalanceB)-SUM(costBalanceB) AS VATSupplierB, ' ELSE '')
                    + (IF isBalanceB() AND isCostVAT() THEN 'SUM(costVATBalanceB) AS costVATBalanceB, ' ELSE '')
                    + (IF isBalanceB() AND isSum() THEN 'SUM(sumBalanceB) AS sumBalanceB, ' ELSE '')
                    + nameGroupsTurnover() + ', ' + groupsTurnover()
                    + (IF useTurnoverSkuBI() AND NOT isSupplierGroup() AND NOT nameIncludeLegalEntities() THEN ' FROM turnoverSku' ELSE ' FROM turnover')
                    + (IF isTimeGroup() THEN ' WHERE __time BETWEEN TIME_PARSE(\'' + dateFrom + '\',\'yyyy-MM-dd\') AND TIME_PARSE(\'' + dateTo + '\',\'yyyy-MM-dd\')')
                    + (IF gWeekTurnover() THEN ' AND (EXTRACT(WEEK FROM __time) <> EXTRACT(WEEK FROM TIMESTAMPADD(DAY, -1, __time)) OR __time = TIME_PARSE(\'' + dateFrom + '\',\'yyyy-MM-dd\'))' ELSE
                       IF gMonthTurnover() THEN ' AND (EXTRACT(MONTH FROM __time) <> EXTRACT(MONTH FROM TIMESTAMPADD(DAY, -1, __time)) OR __time = TIME_PARSE(\'' + dateFrom + '\',\'yyyy-MM-dd\'))' ELSE '')
                    + filter()
                    + ' GROUP BY ' + (CONCAT ', ', nameGroup1Turnover(), nameGroup2Turnover(), nameGroup3Turnover(), nameGroup4Turnover(), nameGroup5Turnover())
                    + (OVERRIDE ' LIMIT ' + maxRowCount(),''),'"','\\"'));
                    
                IMPORT JSON FROM queryResult() TO localNameGroup1 = nameGroup1, localNameGroup2 = nameGroup2, localNameGroup3 = nameGroup3, localNameGroup4 = nameGroup4, localNameGroup5 = nameGroup5,
                                                  localGroup1 = group1, localGroup2 = group2, localGroup3 = group3, localGroup4 = group4, localGroup5 = group5,
                                                  localBalanceB = balanceB, localStatisticUOMBalanceB = statisticUOMBalanceB, localCostBalanceB = costBalanceB,
                                                  localVATSupplierB = VATSupplierB, localCostVATBalanceB = costVATBalanceB, localSumBalanceB = sumBalanceB, localBarcodeSku = barcodeSku;
                
                FOR imported(INTEGER i) AND INTEGER number = [ GROUP LAST INTEGER n ORDER n BY group1Turnover(n), group2Turnover(n), group3Turnover(n), group4Turnover(n), group5Turnover(n), barcodeSku(n)](localGroup1(i), localGroup2(i), localGroup3(i), localGroup4(i), localGroup5(i), localBarcodeSku(i)) DO {
                    balanceB(number) <- localBalanceB(i);
                    costBalanceB(number) <- localCostBalanceB(i);
                    VATSupplierB(number) <- localVATSupplierB(i);
                    costVATBalanceB(number) <- localCostVATBalanceB(i);
                    sumBalanceB(number) <- localSumBalanceB(i);
                }
            }
            
            IF overIsBalanceA() THEN {                        
                query(replace('SELECT '
                    + (IF overIsBalanceA() AND overIsQuantity() THEN 'SUM(balance) AS balanceA, ' ELSE '')
                    + (IF overIsBalanceA() AND overIsCost() THEN 'SUM(costBalance) AS costBalanceA, ' ELSE '')
                    + (IF overIsBalanceA() AND isVATSupplier() THEN 'SUM(costVATBalance)-SUM(costBalance) AS VATSupplierA, ' ELSE '')
                    + (IF overIsBalanceA() AND isCostVAT() THEN 'SUM(costVATBalance) AS costVATBalanceA, ' ELSE '')
                    + (IF overIsBalanceA() AND isSum() THEN 'SUM(sumBalance) AS sumBalanceA, ' ELSE '')
                    + nameGroupsTurnover() + ', ' + groupsTurnover()
                    + (IF useTurnoverSkuBI() AND NOT isSupplierGroup() AND NOT nameIncludeLegalEntities() THEN ' FROM turnoverSku' ELSE ' FROM turnover')
                    + (IF isTimeGroup() THEN ' WHERE __time BETWEEN TIME_PARSE(\'' + dateFrom + '\',\'yyyy-MM-dd\') AND TIME_PARSE(\'' + dateTo + '\',\'yyyy-MM-dd\')' ELSE ' WHERE __time = TIME_PARSE(\'' + dateTo + '\',\'yyyy-MM-dd\')')
                    + (IF gWeekTurnover() THEN ' AND (EXTRACT(WEEK FROM __time) <> EXTRACT(WEEK FROM TIMESTAMPADD(DAY, 1, __time)) OR __time = TIME_PARSE(\'' + dateTo + '\',\'yyyy-MM-dd\'))' ELSE
                       IF gMonthTurnover() THEN ' AND (EXTRACT(MONTH FROM __time) <> EXTRACT(MONTH FROM TIMESTAMPADD(DAY, 1, __time)) OR __time = TIME_PARSE(\'' + dateTo + '\',\'yyyy-MM-dd\'))' ELSE '')
                    + filter()
                    + ' GROUP BY ' + (CONCAT ', ', nameGroup1Turnover(), nameGroup2Turnover(), nameGroup3Turnover(), nameGroup4Turnover(), nameGroup5Turnover())
                    + (OVERRIDE ' LIMIT ' + maxRowCount(),''),'"','\\"'));
                    
                IMPORT JSON FROM queryResult() TO localNameGroup1 = nameGroup1, localNameGroup2 = nameGroup2, localNameGroup3 = nameGroup3, localNameGroup4 = nameGroup4, localNameGroup5 = nameGroup5,
                                                  localGroup1 = group1, localGroup2 = group2, localGroup3 = group3, localGroup4 = group4, localGroup5 = group5,
                                                  localBalanceA = balanceA, localStatisticUOMBalanceA = statisticUOMBalanceA, localCostBalanceA = costBalanceA,
                                                  localVATSupplierA = VATSupplierA, localCostVATBalanceA = costVATBalanceA, localSumBalanceA = sumBalanceA, localBarcodeSku = barcodeSku;
                
                FOR imported(INTEGER i) AND INTEGER number = [ GROUP LAST INTEGER n ORDER n BY group1Turnover(n), group2Turnover(n), group3Turnover(n), group4Turnover(n), group5Turnover(n), barcodeSku(n)](localGroup1(i), localGroup2(i), localGroup3(i), localGroup4(i), localGroup5(i), localBarcodeSku(i)) DO {
                    balanceA(number) <- localBalanceA(i);
                    costBalanceA(number) <- localCostBalanceA(i);
                    VATSupplierA(number) <- localVATSupplierA(i);
                    costVATBalanceA(number) <- localCostVATBalanceA(i);
                    sumBalanceA(number) <- localSumBalanceA(i);
                }
            }
        }
    }
}

//----------------
nameIncludeStockGroupsStockReport () = IF countIncludeStocks() > 15 
    THEN CONCAT '; ', nameIncludeStockGroups(), ((GROUP CONCAT TEXT(name(Stock stock)) IF dataInclude(stock) AND indexIncludeStock(stock) <= 15, ', ' ORDER stock) + ' и еще ' + (countIncludeStocks() - 15))
    ELSE nameIncludeStockGroupsStock();
nameIncludeSkusReport () = IF countIncludeSkus() > 10 
    THEN ((GROUP CONCAT replace(name(Sku sku), '\n', '') IF dataInclude(sku) AND indexIncludeSku(sku) <= 10, ', ' ORDER sku) + ' и еще ' + (countIncludeSkus() - 10))
    ELSE nameIncludeSkus();

extraFilter = ABSTRACT CASE BOOLEAN (INTEGER);

FORM printTurnoverReport 'Оборачиваемость'
    OBJECTS df=DATE PANEL SUBREPORT
    PROPERTIES dateFrom = VALUE(df)
   
    OBJECTS dt=DATE PANEL
    PROPERTIES dateTo = VALUE(dt)
       
    PROPERTIES() countGroup, countRowsTurnover, maxRowCount, nameIncludeStockGroupsStockReport, nameIncludeLegalEntities, nameIncludeBrands, nameIncludeManufacturers, nameIncludeSkuGroups, nameIncludeSkusReport, 
                 printSumGroup, printSumGroup1, printSumGroup2, printSumGroup3, printSumGroup4, printSumSummary
    
    OBJECTS i = INTEGER
    PROPERTIES(i) READONLY nameGroup1Turnover, nameGroup2Turnover, nameGroup3Turnover, nameGroup4Turnover, nameGroup5Turnover, 
                           group1Turnover, group2Turnover, group3Turnover, group4Turnover, group5Turnover, barcodeSku SHOWIF gSkuTurnover()
    PROPERTIES(i) READONLY balanceB SHOWIF (isBalanceB() AND overIsQuantity()),
                           costBalanceB SHOWIF (isBalanceB() AND overIsCost()),
                           costVATBalanceB SHOWIF (isBalanceB() AND isCostVAT()),
                           sumBalanceB SHOWIF (isBalanceB() AND isSum())
    PROPERTIES(i) READONLY quantitySold SHOWIF (overIsOut() AND overIsQuantity()),
                           costSumSold SHOWIF (overIsOut() AND overIsCost()),
                           costSumVATSold SHOWIF (overIsOut() AND isCostVAT()),
                           markupSumSold SHOWIF (overIsOut() AND overIsMarkup()),
                           percMarkupSumSold SHOWIF (overIsOut() AND overIsMarkup()),
                           sumVATSold SHOWIF (overIsOut() AND isSum()),
                           sumSold SHOWIF (overIsOut() AND isSum()),
                           sumPriceSold SHOWIF (overIsOut() AND isSum())
    PROPERTIES(i) READONLY quantityPurchase SHOWIF (isIn() AND overIsQuantity()),
                           sumMinusVATPurchase SHOWIF (isIn() AND (isSum() OR overIsCost())),
                           sumVATPurchase SHOWIF (isIn() AND (isSum() OR isCostVAT())),
                           sumPurchase SHOWIF (isIn() AND (isSum() OR isCostVAT())),
                           sumPricePurchase SHOWIF (isIn() AND isSum())
    PROPERTIES(i) READONLY turnover SHOWIF isTurnover(),
                           costBalance SHOWIF isTurnover(),
                           daysOnStock SHOWIF isDaysOnStock()
    PROPERTIES(i) READONLY balanceA SHOWIF (overIsBalanceA() AND overIsQuantity()),
                           costBalanceA SHOWIF (overIsBalanceA() AND overIsCost()),
                           costVATBalanceA SHOWIF (overIsBalanceA() AND isCostVAT()),
                           sumBalanceA SHOWIF (overIsBalanceA() AND isSum())
    FILTERS nameGroup1Turnover(i) AND dt IS DATE AND df IS DATE,
            balanceB(i)!=0 OR quantitySold(i)!=0 OR balanceA(i)!=0 OR quantityPurchase(i)!=0 OR sumBalanceB(i)!=0 OR sumSold(i)!=0 OR sumBalanceA(i)!=0 OR sumPurchase(i)!=0 OR extraFilter(i)
            
    ORDERS nameGroup1Turnover(i), nameGroup2Turnover(i), nameGroup3Turnover(i), nameGroup4Turnover(i), nameGroup5Turnover(i), barcodeSku(i)
;

printTurnoverReportXLSX 'С группировкой (XLSX)' (DATE dateFrom, DATE dateTo)  { 
    IF countGroup() == 0 THEN {
        MESSAGE 'Не задана группировка';
        RETURN;
    }
    fillTurnoverReport(dateFrom, dateTo);
    PRINT printTurnoverReport OBJECTS df = dateFrom, dt = dateTo XLSX;
}  IMAGE 'print.png' IN print;

FORM printTurnoverReportTable 'Оборачиваемость'
    OBJECTS df=DATE PANEL SUBREPORT
    PROPERTIES dateFrom = VALUE(df)
   
    OBJECTS dt=DATE PANEL
    PROPERTIES dateTo = VALUE(dt)
       
    PROPERTIES() countGroup, countRowsTurnover, maxRowCount, nameIncludeStockGroupsStockReport, nameIncludeLegalEntities, nameIncludeBrands, nameIncludeManufacturers, nameIncludeSkuGroups, nameIncludeSkusReport,
                 captionGroup1Turnover, captionGroup2Turnover, captionGroup3Turnover, captionGroup4Turnover, captionGroup5Turnover
    
    OBJECTS i = INTEGER
    PROPERTIES(i) READONLY nameGroup1Turnover SHOWIF nameGroup1Turnover(),
                           nameGroup2Turnover SHOWIF nameGroup2Turnover(),
                           nameGroup3Turnover SHOWIF nameGroup3Turnover(),
                           nameGroup4Turnover SHOWIF nameGroup4Turnover(),
                           nameGroup5Turnover SHOWIF nameGroup5Turnover(),
                           barcodeSku SHOWIF gSkuTurnover()
    PROPERTIES(i) READONLY balanceB SHOWIF (isBalanceB() AND overIsQuantity()),
                           costBalanceB SHOWIF (isBalanceB() AND overIsCost()),
                           costVATBalanceB SHOWIF (isBalanceB() AND isCostVAT()),
                           sumBalanceB SHOWIF (isBalanceB() AND isSum())
    PROPERTIES(i) READONLY quantitySold SHOWIF (overIsOut() AND overIsQuantity()),
                           costSumSold SHOWIF (overIsOut() AND overIsCost()),
                           costSumVATSold SHOWIF (overIsOut() AND isCostVAT()),
                           markupSumSold SHOWIF (overIsOut() AND overIsMarkup()),
                           percMarkupSumSold SHOWIF (overIsOut() AND overIsMarkup()),
                           sumVATSold SHOWIF (overIsOut() AND isSum()),
                           sumSold SHOWIF (overIsOut() AND isSum()),
                           sumPriceSold SHOWIF (overIsOut() AND isSum())
    PROPERTIES(i) READONLY quantityPurchase SHOWIF (isIn() AND overIsQuantity()),
                           sumMinusVATPurchase SHOWIF (isIn() AND (isSum() OR overIsCost())),
                           sumVATPurchase SHOWIF (isIn() AND (isSum() OR isCostVAT())),
                           sumPurchase SHOWIF (isIn() AND (isSum() OR isCostVAT())),
                           sumPricePurchase SHOWIF (isIn() AND isSum())
    PROPERTIES(i) READONLY turnover SHOWIF isTurnover(),
                           costBalance SHOWIF isTurnover(),
                           daysOnStock SHOWIF isDaysOnStock()
    PROPERTIES(i) READONLY balanceA SHOWIF (overIsBalanceA() AND overIsQuantity()),
                           costBalanceA SHOWIF (overIsBalanceA() AND overIsCost()),
                           costVATBalanceA SHOWIF (overIsBalanceA() AND isCostVAT()),
                           sumBalanceA SHOWIF (overIsBalanceA() AND isSum())
    FILTERS nameGroup1Turnover(i) AND dt IS DATE AND df IS DATE,
            balanceB(i)!=0 OR quantitySold(i)!=0 OR balanceA(i)!=0 OR quantityPurchase(i)!=0 OR sumBalanceB(i)!=0 OR sumSold(i)!=0 OR sumBalanceA(i)!=0 OR sumPurchase(i)!=0 OR extraFilter(i)
            
    ORDERS nameGroup1Turnover(i), nameGroup2Turnover(i), nameGroup3Turnover(i), nameGroup4Turnover(i), nameGroup5Turnover(i), barcodeSku(i)
;

printTurnoverReportTableXLSX 'Без группировки (XLSX)' (DATE dateFrom, DATE dateTo)  { 
    IF countGroup() == 0 THEN {
        MESSAGE 'Не задана группировка';
        RETURN;
    }
    fillTurnoverReport(dateFrom, dateTo);
    PRINT printTurnoverReportTable OBJECTS df = dateFrom, dt = dateTo XLSX;
}  IMAGE 'print.png' IN print;

showGroup1 = GROUP SUM 1 IF level(SkuGroup skuGroup) == 2;
showGroup2 = GROUP SUM 1 IF level(SkuGroup skuGroup) == 3;
showGroup3 = GROUP SUM 1 IF level(SkuGroup skuGroup) == 4;
showGroup4 = GROUP SUM 1 IF level(SkuGroup skuGroup) == 5;
showGroup5 = GROUP SUM 1 IF level(SkuGroup skuGroup) == 6;
hideGroup1Turnover() += TRUE IF NOT showGroup1();
hideGroup2Turnover() += TRUE IF NOT showGroup2();
hideGroup3Turnover() += TRUE IF NOT showGroup3();
hideGroup4Turnover() += TRUE IF NOT showGroup4();
hideGroup5Turnover() += TRUE IF NOT showGroup5();

EXTEND FORM turnoverReport    
    PROPERTIES() isBalanceB, isIn, overIsOut, overIsBalanceA,
                 overIsQuantity, overIsCost, isCostVAT, overIsMarkup, isSum, isTurnover, isDaysOnStock
    
    PROPERTIES nameIncludeStockGroups() ON CHANGE changeIncludeStockGroupsStock()
    PROPERTIES nameIncludeStocks() ON CHANGE changeIncludeStockGroupsStock()
    PROPERTIES nameIncludeLegalEntities() ON CHANGE changeIncludeLegalEntities()
    PROPERTIES nameIncludeBrands() ON CHANGE changeIncludeBrands()
    PROPERTIES nameIncludeManufacturers() ON CHANGE changeIncludeManufacturers()
    PROPERTIES nameIncludeCountries() ON CHANGE changeIncludeCountries()
    PROPERTIES nameIncludeSkuGroups() ON CHANGE changeIncludeSkus()
    PROPERTIES nameIncludeSkus() ON CHANGE changeIncludeSkus()
    PROPERTIES nameIncludeBarcodes() ON CHANGE changeIncludeBarcodes()
    
    PROPERTIES(df,dt) printTurnoverReportXLSX, printTurnoverReportTableXLSX
;

DESIGN turnoverReport {
    filters {
        lines = 3;
        MOVE PROPERTY(nameIncludeStockGroups()) { panelCaptionVertical = TRUE; }
        MOVE PROPERTY(nameIncludeStocks()) { panelCaptionVertical = TRUE; }
        MOVE PROPERTY(nameIncludeLegalEntities()) { panelCaptionVertical = TRUE; }
        MOVE PROPERTY(nameIncludeBrands()) { panelCaptionVertical = TRUE; }
        MOVE PROPERTY(nameIncludeManufacturers()) { panelCaptionVertical = TRUE; }
        MOVE PROPERTY(nameIncludeCountries()) { panelCaptionVertical = TRUE; }
        MOVE PROPERTY(nameIncludeSkuGroups()) { panelCaptionVertical = TRUE; }
        MOVE PROPERTY(nameIncludeSkus()) { panelCaptionVertical = TRUE; }
        MOVE PROPERTY(nameIncludeBarcodes()) { panelCaptionVertical = TRUE; }
    }
    lhContainer {
        NEW col1 {
            MOVE PROPERTY(isBalanceB());
            MOVE PROPERTY(isIn());
            MOVE PROPERTY(overIsOut());
            MOVE PROPERTY(overIsBalanceA());
        }
        NEW col2 {
            MOVE PROPERTY(overIsQuantity());
            MOVE PROPERTY(overIsCost());
            MOVE PROPERTY(isCostVAT());
            MOVE PROPERTY(overIsMarkup());
            MOVE PROPERTY(isSum());
            MOVE PROPERTY(isTurnover());
            MOVE PROPERTY(isDaysOnStock());
        }
    }
    print {
        MOVE PROPERTY (printTurnoverReportXLSX(df,dt)) {fill = 1; valueSize = (-1,40);};
        MOVE PROPERTY (printTurnoverReportTableXLSX(df,dt)) {fill = 1; valueSize = (-1,40);};
    }
}

META defineSelectFromXls (in, class)
    set###in###class##Xls 'Отметка из xls' ()  { 
    
        LOCAL barcode = STRING[15](INTEGER);
        
        INPUT f = EXCELFILE DO {
            IMPORT XLS NOHEADER FROM f AS EXCELFILE TO barcode;
            
            FOR imported(INTEGER i) AND idBarcode(###class sk) ==  barcode(i) DO {
                in(sk) <- TRUE;             
            }
        }
    } ASON CONTEXTMENU in[###class];
    
END

@defineSelectFromXls(include, sku);

EXTEND FORM dialogSku PROPERTIES DRAW sku TOOLBAR setIncludeSkuXls();

@defineSelectFromXls(in, item);