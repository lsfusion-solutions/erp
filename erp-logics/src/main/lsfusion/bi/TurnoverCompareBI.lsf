MODULE TurnoverCompareBI;

REQUIRE TurnoverBI;

NAMESPACE BI;

compare 'Сравнить с' = DATA LOCAL BOOLEAN ();

EXTEND FORM turnoverReport
    OBJECTS dfc=DATE PANEL
    PROPERTIES dateFromCompare = VALUE(dfc) SHOWIF compare()

    OBJECTS dtc=DATE PANEL
    PROPERTIES dateToCompare = VALUE(dtc) SHOWIF compare()

    PROPERTIES compare()
;

DESIGN turnoverReport {
    dates {
        MOVE PROPERTY(compare());
        MOVE PROPERTY(dateFromCompare){caption = 'Дата (с)';}
        MOVE PROPERTY(dateToCompare){caption = 'Дата (по)';}
    }
}

barcodeSkuCompare = DATA LOCAL STRING[15] (INTEGER);

group1TurnoverCompare = DATA LOCAL STRING[255] (INTEGER);
group2TurnoverCompare = DATA LOCAL STRING[255] (INTEGER);
group3TurnoverCompare = DATA LOCAL STRING[255] (INTEGER);
group4TurnoverCompare = DATA LOCAL STRING[255] (INTEGER);
group5TurnoverCompare = DATA LOCAL STRING[255] (INTEGER);

quantitySoldCompare 'Продано (кол-во)' = DATA LOCAL NUMERIC[16,5] (INTEGER);
costSumSoldCompare 'Продано (себестоимость)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
costSumVATSoldCompare 'Продано (себестоимость с НДС)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
markupSumSoldCompare 'Продано (надбавка, руб)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
percMarkupSumSoldCompare 'Продано (надбавка, %)' = DATA LOCAL NUMERIC[12,2] (INTEGER);
sumVATSoldCompare 'Продано (сумма НДС)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumSoldCompare 'Продано (сумма)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumPriceSoldCompare 'Продано (сумма учетная)' = DATA LOCAL NUMERIC[18,4] (INTEGER);

quantityPurchaseCompare 'Закуплено (кол-во)' = DATA LOCAL NUMERIC[16,5] (INTEGER);
sumMinusVATPurchaseCompare 'Закуплено (сумма без НДС)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumVATPurchaseCompare 'Закуплено (сумма НДС)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumPurchaseCompare 'Закуплено (сумма)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumPricePurchaseCompare 'Закуплено (сумма учетная)' = DATA LOCAL NUMERIC[18,4] (INTEGER);

costBalanceCompare 'Себестоимость' = DATA LOCAL NUMERIC[18,4] (INTEGER);
turnoverCompare 'Оборачиваемость' = DATA LOCAL NUMERIC[16,3] (INTEGER);
daysOnStockCompare 'Дней на складе' = DATA LOCAL INTEGER (INTEGER);

balanceBCompare 'Остаток (кол-во)' = DATA LOCAL NUMERIC[16,5] (INTEGER);
costBalanceBCompare 'Остаток (себестоимость)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
VATSupplierBCompare 'НДС поставщика' = DATA LOCAL NUMERIC[18,4] (INTEGER);
costVATBalanceBCompare 'Остаток (себестоимость с НДС)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumBalanceBCompare 'Остаток (сумма)' = DATA LOCAL NUMERIC[18,4] (INTEGER);

balanceACompare 'Остаток (кол-во)' = DATA LOCAL NUMERIC[16,5] (INTEGER);
costBalanceACompare 'Остаток (себестоимость)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
VATSupplierACompare 'НДС поставщика' = DATA LOCAL NUMERIC[18,4] (INTEGER);
costVATBalanceACompare 'Остаток (себестоимость с НДС)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumBalanceACompare 'Остаток (сумма)' = DATA LOCAL NUMERIC[18,4] (INTEGER);

quantitySoldCompareEx 'Продано (кол-во)' = DATA LOCAL NUMERIC[16,5] (INTEGER);
costSumSoldCompareEx 'Продано (себестоимость)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
costSumVATSoldCompareEx 'Продано (себестоимость с НДС)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
markupSumSoldCompareEx 'Продано (надбавка, руб)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
percMarkupSumSoldCompareEx 'Продано (надбавка, %)' = DATA LOCAL NUMERIC[12,2] (INTEGER);
sumVATSoldCompareEx 'Продано (сумма НДС)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumSoldCompareEx 'Продано (сумма)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumPriceSoldCompareEx 'Продано (сумма учетная)' = DATA LOCAL NUMERIC[18,4] (INTEGER);

quantityPurchaseCompareEx 'Закуплено (кол-во)' = DATA LOCAL NUMERIC[16,5] (INTEGER);
sumMinusVATPurchaseCompareEx 'Закуплено (сумма без НДС)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumVATPurchaseCompareEx 'Закуплено (сумма НДС)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumPurchaseCompareEx 'Закуплено (сумма)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumPricePurchaseCompareEx 'Закуплено (сумма учетная)' = DATA LOCAL NUMERIC[18,4] (INTEGER);

costBalanceCompareEx 'Себестоимость' = DATA LOCAL NUMERIC[18,4] (INTEGER);
turnoverCompareEx 'Оборачиваемость' = DATA LOCAL NUMERIC[16,3] (INTEGER);
daysOnStockCompareEx 'Дней на складе' = DATA LOCAL INTEGER (INTEGER);

balanceBCompareEx 'Остаток (кол-во)' = DATA LOCAL NUMERIC[16,5] (INTEGER);
costBalanceBCompareEx 'Остаток (себестоимость)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
VATSupplierBCompareEx 'НДС поставщика' = DATA LOCAL NUMERIC[18,4] (INTEGER);
costVATBalanceBCompareEx 'Остаток (себестоимость с НДС)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumBalanceBCompareEx 'Остаток (сумма)' = DATA LOCAL NUMERIC[18,4] (INTEGER);

balanceACompareEx 'Остаток (кол-во)' = DATA LOCAL NUMERIC[16,5] (INTEGER);
costBalanceACompareEx 'Остаток (себестоимость)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
VATSupplierACompareEx 'НДС поставщика' = DATA LOCAL NUMERIC[18,4] (INTEGER);
costVATBalanceACompareEx 'Остаток (себестоимость с НДС)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumBalanceACompareEx 'Остаток (сумма)' = DATA LOCAL NUMERIC[18,4] (INTEGER);

FORM printTurnoverCompareReport 'Оборачиваемость'
    OBJECTS df=DATE PANEL SUBREPORT
    PROPERTIES dateFrom = VALUE(df)

    OBJECTS dt=DATE PANEL
    PROPERTIES dateTo = VALUE(dt)

    OBJECTS dfc=DATE PANEL
    PROPERTIES dateFromC = VALUE(dfc)

    OBJECTS dtc=DATE PANEL
    PROPERTIES dateToC = VALUE(dtc)
    PROPERTIES() countGroup, countRowsTurnover, maxRowCount, nameIncludeStockGroupsStockReport, nameIncludeLegalEntities, nameIncludeBrands, nameIncludeManufacturers, nameIncludeSkuGroups, nameIncludeSkusReport,
        printSumGroup, printSumGroup1, printSumGroup2, printSumGroup3, printSumGroup4, printSumSummary

    OBJECTS i = INTEGER
    PROPERTIES(i) READONLY nameGroup1Turnover, nameGroup2Turnover, nameGroup3Turnover, nameGroup4Turnover, nameGroup5Turnover,
        group1Turnover, group2Turnover, group3Turnover, group4Turnover, group5Turnover, barcodeSku SHOWIF gSkuTurnover()
    PROPERTIES(i) READONLY balanceB SHOWIF (isBalanceB() AND overIsQuantity()),
        costBalanceB SHOWIF (isBalanceB() AND overIsCost()),
        costVATBalanceB SHOWIF (isBalanceB() AND isCostVAT()),
        sumBalanceB SHOWIF (isBalanceB() AND isSum()),
        balanceBCompare SHOWIF (isBalanceB() AND overIsQuantity()),
        costBalanceBCompare SHOWIF (isBalanceB() AND overIsCost()),
        costVATBalanceBCompare SHOWIF (isBalanceB() AND isCostVAT()),
        sumBalanceBCompare SHOWIF (isBalanceB() AND isSum())
    PROPERTIES(i) READONLY quantitySold SHOWIF (overIsOut() AND overIsQuantity()),
        costSumSold SHOWIF (overIsOut() AND overIsCost()),
        costSumVATSold SHOWIF (overIsOut() AND isCostVAT()),
        markupSumSold SHOWIF (overIsOut() AND isMarkup()),
        percMarkupSumSold SHOWIF (overIsOut() AND isMarkup()),
        sumVATSold SHOWIF (overIsOut() AND isSum()),
        sumSold SHOWIF (overIsOut() AND isSum()),
        sumPriceSold SHOWIF (overIsOut() AND isSum()),
        quantitySoldCompare SHOWIF (overIsOut() AND overIsQuantity()),
        costSumSoldCompare SHOWIF (overIsOut() AND overIsCost()),
        costSumVATSoldCompare SHOWIF (overIsOut() AND isCostVAT()),
        markupSumSoldCompare SHOWIF (overIsOut() AND isMarkup()),
        percMarkupSumSoldCompare SHOWIF (overIsOut() AND isMarkup()),
        sumVATSoldCompare SHOWIF (overIsOut() AND isSum()),
        sumSoldCompare SHOWIF (overIsOut() AND isSum()),
        sumPriceSoldCompare SHOWIF (overIsOut() AND isSum())
    PROPERTIES(i) READONLY quantityPurchase SHOWIF (isIn() AND overIsQuantity()),
        sumMinusVATPurchase SHOWIF (isIn() AND (isSum() OR overIsCost())),
        sumVATPurchase SHOWIF (isIn() AND (isSum() OR isCostVAT())),
        sumPurchase SHOWIF (isIn() AND (isSum() OR isCostVAT())),
        sumPricePurchase SHOWIF (isIn() AND isSum()),
        quantityPurchaseCompare SHOWIF (isIn() AND overIsQuantity()),
        sumMinusVATPurchaseCompare SHOWIF (isIn() AND (isSum() OR overIsCost())),
        sumVATPurchaseCompare SHOWIF (isIn() AND (isSum() OR isCostVAT())),
        sumPurchaseCompare SHOWIF (isIn() AND (isSum() OR isCostVAT())),
        sumPricePurchaseCompare SHOWIF (isIn() AND isSum())
    PROPERTIES(i) READONLY turnover SHOWIF isTurnover(),
        costBalance SHOWIF isTurnover(),
        daysOnStock SHOWIF isDaysOnStock(),
        turnoverCompare SHOWIF isTurnover(),
        costBalanceCompare SHOWIF isTurnover(),
        daysOnStockCompare SHOWIF isDaysOnStock()
    PROPERTIES(i) READONLY balanceA SHOWIF (overIsBalanceA() AND overIsQuantity()),
        costBalanceA SHOWIF (overIsBalanceA() AND overIsCost()),
        costVATBalanceA SHOWIF (overIsBalanceA() AND isCostVAT()),
        sumBalanceA SHOWIF (overIsBalanceA() AND isSum()),
        balanceACompare SHOWIF (overIsBalanceA() AND overIsQuantity()),
        costBalanceACompare SHOWIF (overIsBalanceA() AND overIsCost()),
        costVATBalanceACompare SHOWIF (overIsBalanceA() AND isCostVAT()),
        sumBalanceACompare SHOWIF (overIsBalanceA() AND isSum())
    FILTERS nameGroup1Turnover(i) AND dt IS DATE AND df IS DATE AND dtc IS DATE AND dfc IS DATE,
        balanceB(i)!=0 OR quantitySold(i)!=0 OR balanceA(i)!=0 OR quantityPurchase(i)!=0 OR sumBalanceB(i)!=0 OR sumSold(i)!=0 OR sumBalanceA(i)!=0 OR sumPurchase(i)!=0 OR extraFilter(i) OR
            balanceBCompare(i)!=0 OR quantitySoldCompare(i)!=0 OR balanceACompare(i)!=0 OR quantityPurchaseCompare(i)!=0 OR sumBalanceBCompare(i)!=0 OR sumSoldCompare(i)!=0 OR sumBalanceACompare(i)!=0 OR sumPurchaseCompare(i)!=0

    ORDERS nameGroup1Turnover(i), nameGroup2Turnover(i), nameGroup3Turnover(i), nameGroup4Turnover(i), nameGroup5Turnover(i), barcodeSku(i)
;

fillTurnoverReportCompare (DATE dateFrom, DATE dateTo, DATE dateFromC, DATE dateToC)  {
    nameGroup1Turnover(INTEGER i) <- NULL;
    nameGroup2Turnover(INTEGER i) <- NULL;
    nameGroup3Turnover(INTEGER i) <- NULL;
    nameGroup4Turnover(INTEGER i) <- NULL;
    nameGroup5Turnover(INTEGER i) <- NULL;
    barcodeSku(INTEGER i) <- NULL;
    group1Turnover(INTEGER i) <- NULL;
    group2Turnover(INTEGER i) <- NULL;
    group3Turnover(INTEGER i) <- NULL;
    group4Turnover(INTEGER i) <- NULL;
    group5Turnover(INTEGER i) <- NULL;

    barcodeSkuCompare(INTEGER i) <- NULL;
    group1TurnoverCompare(INTEGER i) <- NULL;
    group2TurnoverCompare(INTEGER i) <- NULL;
    group3TurnoverCompare(INTEGER i) <- NULL;
    group4TurnoverCompare(INTEGER i) <- NULL;
    group5TurnoverCompare(INTEGER i) <- NULL;

    quantitySold(INTEGER i) <- NULL;
    costSumSold(INTEGER i) <- NULL;
    costSumVATSold(INTEGER i) <- NULL;
    markupSumSold(INTEGER i) <- NULL;
    percMarkupSumSold(INTEGER i) <- NULL;
    sumVATSold(INTEGER i) <- NULL;
    sumSold(INTEGER i) <- NULL;
    sumPriceSold(INTEGER i) <- NULL;

    quantityPurchase(INTEGER i) <- NULL;
    sumMinusVATPurchase(INTEGER i) <- NULL;
    sumVATPurchase(INTEGER i) <- NULL;
    sumPurchase(INTEGER i) <- NULL;
    sumPricePurchase(INTEGER i) <- NULL;

    costBalance(INTEGER i) <- NULL;
    turnover(INTEGER i) <- NULL;
    daysOnStock(INTEGER i) <- NULL;

    balanceB(INTEGER i) <- NULL;
    costBalanceB(INTEGER i) <- NULL;
    VATSupplierB(INTEGER i) <- NULL;
    costVATBalanceB(INTEGER i) <- NULL;
    sumBalanceB(INTEGER i) <- NULL;

    balanceA(INTEGER i) <- NULL;
    costBalanceA(INTEGER i) <- NULL;
    VATSupplierA(INTEGER i) <- NULL;
    costVATBalanceA(INTEGER i) <- NULL;
    sumBalanceA(INTEGER i) <- NULL;

    quantitySoldCompare(INTEGER i) <- NULL;
    costSumSoldCompare(INTEGER i) <- NULL;
    costSumVATSoldCompare(INTEGER i) <- NULL;
    markupSumSoldCompare(INTEGER i) <- NULL;
    percMarkupSumSoldCompare(INTEGER i) <- NULL;
    sumVATSoldCompare(INTEGER i) <- NULL;
    sumSoldCompare(INTEGER i) <- NULL;
    sumPriceSoldCompare(INTEGER i) <- NULL;

    quantityPurchaseCompare(INTEGER i) <- NULL;
    sumMinusVATPurchaseCompare(INTEGER i) <- NULL;
    sumVATPurchaseCompare(INTEGER i) <- NULL;
    sumPurchaseCompare(INTEGER i) <- NULL;
    sumPricePurchaseCompare(INTEGER i) <- NULL;

    costBalanceCompare(INTEGER i) <- NULL;
    turnoverCompare(INTEGER i) <- NULL;
    daysOnStockCompare(INTEGER i) <- NULL;

    balanceBCompare(INTEGER i) <- NULL;
    costBalanceBCompare(INTEGER i) <- NULL;
    VATSupplierBCompare(INTEGER i) <- NULL;
    costVATBalanceBCompare(INTEGER i) <- NULL;
    sumBalanceBCompare(INTEGER i) <- NULL;

    balanceACompare(INTEGER i) <- NULL;
    costBalanceACompare(INTEGER i) <- NULL;
    VATSupplierACompare(INTEGER i) <- NULL;
    costVATBalanceACompare(INTEGER i) <- NULL;
    sumBalanceACompare(INTEGER i) <- NULL;

    query(replace('SELECT ' + values()
        + nameGroupsTurnover() + ', ' + groupsTurnover()
        + (IF useTurnoverSkuBI() AND NOT isSupplierGroup() AND NOT nameIncludeLegalEntities() THEN ' FROM turnoverSku' ELSE ' FROM turnover')
        + ' WHERE __time BETWEEN TIME_PARSE(\'' + dateFrom + '\',\'yyyy-MM-dd\') AND TIME_PARSE(\'' + dateTo + '\',\'yyyy-MM-dd\')'
        + filter()
        + ' GROUP BY ' + (CONCAT ', ', nameGroup1Turnover(), nameGroup2Turnover(), nameGroup3Turnover(), nameGroup4Turnover(), nameGroup5Turnover())
        + (OVERRIDE ' LIMIT ' + maxRowCount(),''),'"','\\"'));

    IMPORT JSON FROM queryResult() TO nameGroup1Turnover = nameGroup1, nameGroup2Turnover = nameGroup2,
            nameGroup3Turnover = nameGroup3, nameGroup4Turnover = nameGroup4, nameGroup5Turnover = nameGroup5,
            group1Turnover = group1, group2Turnover = group2,
            group3Turnover = group3, group4Turnover = group4, group5Turnover = group5,
            quantitySold = quantitySold, costSumSold = costSumSold, costSumVATSold = costSumVATSold,
            markupSumSold = markupSumSold, percMarkupSumSold = percMarkupSumSold,
            sumVATSold = sumVATSold, sumSold = sumSold, sumPriceSold = sumPriceSold,
            quantityPurchase = quantityPurchase, sumMinusVATPurchase = sumMinusVATPurchase,
            sumVATPurchase = sumVATPurchase, sumPurchase = sumPurchase, sumPricePurchase = sumPricePurchase,
            turnover = turnover, costBalance = costBalance, daysOnStock = daysOnStock, barcodeSku = barcodeSku;

    query(replace('SELECT ' + values()
        + nameGroupsTurnover() + ', ' + groupsTurnover()
        + (IF useTurnoverSkuBI() AND NOT isSupplierGroup() AND NOT nameIncludeLegalEntities() THEN ' FROM turnoverSku' ELSE ' FROM turnover')
        + ' WHERE __time BETWEEN TIME_PARSE(\'' + dateFromC + '\',\'yyyy-MM-dd\') AND TIME_PARSE(\'' + dateToC + '\',\'yyyy-MM-dd\')'
        + filter()
        + ' GROUP BY ' + (CONCAT ', ', nameGroup1Turnover(), nameGroup2Turnover(), nameGroup3Turnover(), nameGroup4Turnover(), nameGroup5Turnover())
        + (OVERRIDE ' LIMIT ' + maxRowCount(),''),'"','\\"'));

    IMPORT JSON FROM queryResult() TO group1TurnoverCompare = group1, group2TurnoverCompare = group2,
            group3TurnoverCompare = group3, group4TurnoverCompare = group4, group5TurnoverCompare = group5,
            quantitySoldCompareEx = quantitySold, costSumSoldCompareEx = costSumSold, costSumVATSoldCompareEx = costSumVATSold,
            markupSumSoldCompareEx = markupSumSold, percMarkupSumSoldCompareEx = percMarkupSumSold,
            sumVATSoldCompareEx = sumVATSold, sumSoldCompareEx = sumSold, sumPriceSoldCompareEx = sumPriceSold,
            quantityPurchaseCompareEx = quantityPurchase, sumMinusVATPurchaseCompareEx = sumMinusVATPurchase,
            sumVATPurchaseCompareEx = sumVATPurchase, sumPurchaseCompareEx = sumPurchase, sumPricePurchaseCompareEx = sumPricePurchase,
            turnoverCompareEx = turnover, costBalanceCompareEx = costBalance, daysOnStockCompareEx = daysOnStock, barcodeSkuCompare = barcodeSku;

    FOR imported(INTEGER i) AND INTEGER number = [ GROUP LAST INTEGER n ORDER n BY group1Turnover(n), group2Turnover(n), group3Turnover(n), group4Turnover(n), group5Turnover(n), barcodeSku(n)](group1TurnoverCompare(i), group2TurnoverCompare(i), group3TurnoverCompare(i), group4TurnoverCompare(i), group5TurnoverCompare(i), barcodeSkuCompare(i)) DO {
        quantitySoldCompare(number) <- quantitySoldCompareEx(i);
        quantitySoldCompare(number) <- quantitySoldCompareEx(i);
        costSumSoldCompare(number) <- costSumSoldCompareEx(i);
        costSumVATSoldCompare(number) <- costSumVATSoldCompareEx(i);
        markupSumSoldCompare(number) <- markupSumSoldCompareEx(i);
        percMarkupSumSoldCompare(number) <- percMarkupSumSoldCompareEx(i);
        sumVATSoldCompare(number) <- sumVATSoldCompareEx(i);
        sumSoldCompare(number) <- sumSoldCompareEx(i);
        sumPriceSoldCompare(number) <- sumPriceSoldCompareEx(i);
        quantityPurchaseCompare(number) <- quantityPurchaseCompareEx(i);
        sumMinusVATPurchaseCompare(number) <- sumMinusVATPurchaseCompareEx(i);
        sumVATPurchaseCompare(number) <- sumVATPurchaseCompareEx(i);
        sumPurchaseCompare(number) <- sumPurchaseCompareEx(i);
        sumPricePurchaseCompare(number) <- sumPricePurchaseCompareEx(i);
        turnoverCompare(number) <- turnoverCompareEx(i);
        costBalanceCompare(number) <- costBalanceCompareEx(i);
        daysOnStockCompare(number) <- daysOnStockCompareEx(i);
    }

    LOCAL localNameGroup1 = STRING[255] (INTEGER);
    LOCAL localNameGroup2 = STRING[255] (INTEGER);
    LOCAL localNameGroup3 = STRING[255] (INTEGER);
    LOCAL localNameGroup4 = STRING[255] (INTEGER);
    LOCAL localNameGroup5 = STRING[255] (INTEGER);
    LOCAL localGroup1 = STRING[255] (INTEGER);
    LOCAL localGroup2 = STRING[255] (INTEGER);
    LOCAL localGroup3 = STRING[255] (INTEGER);
    LOCAL localGroup4 = STRING[255] (INTEGER);
    LOCAL localGroup5 = STRING[255] (INTEGER);
    LOCAL localBarcodeSku = STRING[15] (INTEGER);
    LOCAL localBalanceB = NUMERIC[16,5] (INTEGER);
    LOCAL localCostBalanceB = NUMERIC[18,4] (INTEGER);
    LOCAL localVATSupplierB = NUMERIC[18,4] (INTEGER);
    LOCAL localCostVATBalanceB = NUMERIC[18,4] (INTEGER);
    LOCAL localSumBalanceB = NUMERIC[18,4] (INTEGER);
    LOCAL localBalanceA = NUMERIC[16,5] (INTEGER);
    LOCAL localCostBalanceA = NUMERIC[18,4] (INTEGER);
    LOCAL localVATSupplierA = NUMERIC[18,4] (INTEGER);
    LOCAL localCostVATBalanceA = NUMERIC[18,4] (INTEGER);
    LOCAL localSumBalanceA = NUMERIC[18,4] (INTEGER);
    LOCAL localStatisticUOMBalanceB = NUMERIC[16,5] (INTEGER);
    LOCAL localStatisticUOMBalanceA = NUMERIC[16,5] (INTEGER);

    IF isBalanceB() AND NOT isTimeGroup() THEN {
        query(replace('SELECT '
            + (IF isBalanceB() AND overIsQuantity() THEN 'SUM(balance) AS balanceB, ' ELSE '')
            + (IF isBalanceB() AND overIsCost() THEN 'SUM(costBalance) AS costBalanceB, ' ELSE '')
            + (IF isBalanceB() AND isVATSupplier() THEN 'SUM(costVATBalance)-SUM(costBalance) AS VATSupplierB, ' ELSE '')
            + (IF isBalanceB() AND isCostVAT() THEN 'SUM(costVATBalance) AS costVATBalanceB, ' ELSE '')
            + (IF isBalanceB() AND isSum() THEN 'SUM(sumBalance) AS sumBalanceB, ' ELSE '')
            + nameGroupsTurnover() + ', ' + groupsTurnover()
            + (IF useTurnoverSkuBI() AND NOT isSupplierGroup() AND NOT nameIncludeLegalEntities() THEN ' FROM turnoverSku' ELSE ' FROM turnover')
            + ' WHERE __time = TIME_PARSE(\'' + sum(dateFrom,-1) + '\',\'yyyy-MM-dd\')'
            + filter()
            + ' GROUP BY ' + (CONCAT ', ', nameGroup1Turnover(), nameGroup2Turnover(), nameGroup3Turnover(), nameGroup4Turnover(), nameGroup5Turnover())
            + (OVERRIDE ' LIMIT ' + maxRowCount(),''),'"','\\"'));

        IMPORT JSON FROM queryResult() TO localNameGroup1 = nameGroup1, localNameGroup2 = nameGroup2, localNameGroup3 = nameGroup3, localNameGroup4 = nameGroup4, localNameGroup5 = nameGroup5,
                localGroup1 = group1, localGroup2 = group2, localGroup3 = group3, localGroup4 = group4, localGroup5 = group5,
                localBalanceB = balanceB, localStatisticUOMBalanceB = statisticUOMBalanceB, localCostBalanceB = costBalanceB,
                localVATSupplierB = VATSupplierB, localCostVATBalanceB = costVATBalanceB, localSumBalanceB = sumBalanceB, localBarcodeSku = barcodeSku;

        FOR imported(INTEGER i) AND INTEGER number = [ GROUP LAST INTEGER n ORDER n BY group1Turnover(n), group2Turnover(n), group3Turnover(n), group4Turnover(n), group5Turnover(n), barcodeSku(n)](localGroup1(i), localGroup2(i), localGroup3(i), localGroup4(i), localGroup5(i), localBarcodeSku(i)) DO {
            balanceB(number) <- localBalanceB(i);
            costBalanceB(number) <- localCostBalanceB(i);
            VATSupplierB(number) <- localVATSupplierB(i);
            costVATBalanceB(number) <- localCostVATBalanceB(i);
            sumBalanceB(number) <- localSumBalanceB(i);
        }
    }

    IF overIsBalanceA() THEN {
        query(replace('SELECT '
            + (IF overIsBalanceA() AND overIsQuantity() THEN 'SUM(balance) AS balanceA, ' ELSE '')
            + (IF overIsBalanceA() AND overIsCost() THEN 'SUM(costBalance) AS costBalanceA, ' ELSE '')
            + (IF overIsBalanceA() AND isVATSupplier() THEN 'SUM(costVATBalance)-SUM(costBalance) AS VATSupplierA, ' ELSE '')
            + (IF overIsBalanceA() AND isCostVAT() THEN 'SUM(costVATBalance) AS costVATBalanceA, ' ELSE '')
            + (IF overIsBalanceA() AND isSum() THEN 'SUM(sumBalance) AS sumBalanceA, ' ELSE '')
            + nameGroupsTurnover() + ', ' + groupsTurnover()
            + (IF useTurnoverSkuBI() AND NOT isSupplierGroup() AND NOT nameIncludeLegalEntities() THEN ' FROM turnoverSku' ELSE ' FROM turnover')
            + (IF isTimeGroup() THEN ' WHERE __time BETWEEN TIME_PARSE(\'' + dateFrom + '\',\'yyyy-MM-dd\') AND TIME_PARSE(\'' + dateTo + '\',\'yyyy-MM-dd\')' ELSE ' WHERE __time = TIME_PARSE(\'' + dateTo + '\',\'yyyy-MM-dd\')')
            + (IF gWeekTurnover() THEN ' AND (EXTRACT(WEEK FROM __time) <> EXTRACT(WEEK FROM TIMESTAMPADD(DAY, 1, __time)) OR __time = TIME_PARSE(\'' + dateTo + '\',\'yyyy-MM-dd\'))' ELSE
                    IF gMonthTurnover() THEN ' AND (EXTRACT(MONTH FROM __time) <> EXTRACT(MONTH FROM TIMESTAMPADD(DAY, 1, __time)) OR __time = TIME_PARSE(\'' + dateTo + '\',\'yyyy-MM-dd\'))' ELSE '')
            + filter()
            + ' GROUP BY ' + (CONCAT ', ', nameGroup1Turnover(), nameGroup2Turnover(), nameGroup3Turnover(), nameGroup4Turnover(), nameGroup5Turnover())
            + (OVERRIDE ' LIMIT ' + maxRowCount(),''),'"','\\"'));

        IMPORT JSON FROM queryResult() TO localNameGroup1 = nameGroup1, localNameGroup2 = nameGroup2, localNameGroup3 = nameGroup3, localNameGroup4 = nameGroup4, localNameGroup5 = nameGroup5,
                localGroup1 = group1, localGroup2 = group2, localGroup3 = group3, localGroup4 = group4, localGroup5 = group5,
                localBalanceA = balanceA, localStatisticUOMBalanceA = statisticUOMBalanceA, localCostBalanceA = costBalanceA,
                localVATSupplierA = VATSupplierA, localCostVATBalanceA = costVATBalanceA, localSumBalanceA = sumBalanceA, localBarcodeSku = barcodeSku;

        FOR imported(INTEGER i) AND INTEGER number = [ GROUP LAST INTEGER n ORDER n BY group1Turnover(n), group2Turnover(n), group3Turnover(n), group4Turnover(n), group5Turnover(n), barcodeSku(n)](localGroup1(i), localGroup2(i), localGroup3(i), localGroup4(i), localGroup5(i), localBarcodeSku(i)) DO {
            balanceA(number) <- localBalanceA(i);
            costBalanceA(number) <- localCostBalanceA(i);
            VATSupplierA(number) <- localVATSupplierA(i);
            costVATBalanceA(number) <- localCostVATBalanceA(i);
            sumBalanceA(number) <- localSumBalanceA(i);
        }
    }
    LOCAL localNameGroup1Compare = STRING[255] (INTEGER);
    LOCAL localNameGroup2Compare = STRING[255] (INTEGER);
    LOCAL localNameGroup3Compare = STRING[255] (INTEGER);
    LOCAL localNameGroup4Compare = STRING[255] (INTEGER);
    LOCAL localNameGroup5Compare = STRING[255] (INTEGER);
    LOCAL localGroup1Compare = STRING[255] (INTEGER);
    LOCAL localGroup2Compare = STRING[255] (INTEGER);
    LOCAL localGroup3Compare = STRING[255] (INTEGER);
    LOCAL localGroup4Compare = STRING[255] (INTEGER);
    LOCAL localGroup5Compare = STRING[255] (INTEGER);
    LOCAL localBarcodeSkuCompare = STRING[15] (INTEGER);
    LOCAL localBalanceBCompare = NUMERIC[16,5] (INTEGER);
    LOCAL localCostBalanceBCompare = NUMERIC[18,4] (INTEGER);
    LOCAL localVATSupplierBCompare = NUMERIC[18,4] (INTEGER);
    LOCAL localCostVATBalanceBCompare = NUMERIC[18,4] (INTEGER);
    LOCAL localSumBalanceBCompare = NUMERIC[18,4] (INTEGER);
    LOCAL localBalanceACompare = NUMERIC[16,5] (INTEGER);
    LOCAL localCostBalanceACompare = NUMERIC[18,4] (INTEGER);
    LOCAL localVATSupplierACompare = NUMERIC[18,4] (INTEGER);
    LOCAL localCostVATBalanceACompare = NUMERIC[18,4] (INTEGER);
    LOCAL localSumBalanceACompare = NUMERIC[18,4] (INTEGER);
    LOCAL localStatisticUOMBalanceBCompare = NUMERIC[16,5] (INTEGER);
    LOCAL localStatisticUOMBalanceACompare = NUMERIC[16,5] (INTEGER);
    IF isBalanceB() AND NOT isTimeGroup() THEN {
        query(replace('SELECT '
            + (IF isBalanceB() AND overIsQuantity() THEN 'SUM(balance) AS balanceB, ' ELSE '')
            + (IF isBalanceB() AND overIsCost() THEN 'SUM(costBalance) AS costBalanceB, ' ELSE '')
            + (IF isBalanceB() AND isVATSupplier() THEN 'SUM(costVATBalance)-SUM(costBalance) AS VATSupplierB, ' ELSE '')
            + (IF isBalanceB() AND isCostVAT() THEN 'SUM(costVATBalance) AS costVATBalanceB, ' ELSE '')
            + (IF isBalanceB() AND isSum() THEN 'SUM(sumBalance) AS sumBalanceB, ' ELSE '')
            + nameGroupsTurnover() + ', ' + groupsTurnover()
            + (IF useTurnoverSkuBI() AND NOT isSupplierGroup() AND NOT nameIncludeLegalEntities() THEN ' FROM turnoverSku' ELSE ' FROM turnover')
            + ' WHERE __time = TIME_PARSE(\'' + sum(dateFromC,-1) + '\',\'yyyy-MM-dd\')'
            + filter()
            + ' GROUP BY ' + (CONCAT ', ', nameGroup1Turnover(), nameGroup2Turnover(), nameGroup3Turnover(), nameGroup4Turnover(), nameGroup5Turnover())
            + (OVERRIDE ' LIMIT ' + maxRowCount(),''),'"','\\"'));

        IMPORT JSON FROM queryResult() TO localNameGroup1Compare = nameGroup1, localNameGroup2Compare = nameGroup2, localNameGroup3Compare = nameGroup3, localNameGroup4Compare = nameGroup4, localNameGroup5Compare = nameGroup5,
                localGroup1Compare = group1, localGroup2Compare = group2, localGroup3Compare = group3, localGroup4Compare = group4, localGroup5Compare = group5,
                localBalanceBCompare = balanceB, localStatisticUOMBalanceBCompare = statisticUOMBalanceB, localCostBalanceBCompare = costBalanceB,
                localVATSupplierBCompare = VATSupplierB, localCostVATBalanceBCompare = costVATBalanceB, localSumBalanceBCompare = sumBalanceB, localBarcodeSkuCompare = barcodeSku;

        FOR imported(INTEGER i) AND INTEGER number = [ GROUP LAST INTEGER n ORDER n BY group1Turnover(n), group2Turnover(n), group3Turnover(n), group4Turnover(n), group5Turnover(n), barcodeSku(n)](localGroup1(i), localGroup2(i), localGroup3(i), localGroup4(i), localGroup5(i), localBarcodeSku(i)) DO {
            balanceBCompare(number) <- localBalanceBCompare(i);
            costBalanceBCompare(number) <- localCostBalanceBCompare(i);
            VATSupplierBCompare(number) <- localVATSupplierBCompare(i);
            costVATBalanceBCompare(number) <- localCostVATBalanceBCompare(i);
            sumBalanceBCompare(number) <- localSumBalanceBCompare(i);
        }
    }

    IF overIsBalanceA() THEN {
        query(replace('SELECT '
            + (IF overIsBalanceA() AND overIsQuantity() THEN 'SUM(balance) AS balanceA, ' ELSE '')
            + (IF overIsBalanceA() AND overIsCost() THEN 'SUM(costBalance) AS costBalanceA, ' ELSE '')
            + (IF overIsBalanceA() AND isVATSupplier() THEN 'SUM(costVATBalance)-SUM(costBalance) AS VATSupplierA, ' ELSE '')
            + (IF overIsBalanceA() AND isCostVAT() THEN 'SUM(costVATBalance) AS costVATBalanceA, ' ELSE '')
            + (IF overIsBalanceA() AND isSum() THEN 'SUM(sumBalance) AS sumBalanceA, ' ELSE '')
            + nameGroupsTurnover() + ', ' + groupsTurnover()
            + (IF useTurnoverSkuBI() AND NOT isSupplierGroup() AND NOT nameIncludeLegalEntities() THEN ' FROM turnoverSku' ELSE ' FROM turnover')
            + (IF isTimeGroup() THEN ' WHERE __time BETWEEN TIME_PARSE(\'' + dateFromC + '\',\'yyyy-MM-dd\') AND TIME_PARSE(\'' + dateToC + '\',\'yyyy-MM-dd\')' ELSE ' WHERE __time = TIME_PARSE(\'' + dateToC + '\',\'yyyy-MM-dd\')')
            + (IF gWeekTurnover() THEN ' AND (EXTRACT(WEEK FROM __time) <> EXTRACT(WEEK FROM TIMESTAMPADD(DAY, 1, __time)) OR __time = TIME_PARSE(\'' + dateToC + '\',\'yyyy-MM-dd\'))' ELSE
                    IF gMonthTurnover() THEN ' AND (EXTRACT(MONTH FROM __time) <> EXTRACT(MONTH FROM TIMESTAMPADD(DAY, 1, __time)) OR __time = TIME_PARSE(\'' + dateToC + '\',\'yyyy-MM-dd\'))' ELSE '')
            + filter()
            + ' GROUP BY ' + (CONCAT ', ', nameGroup1Turnover(), nameGroup2Turnover(), nameGroup3Turnover(), nameGroup4Turnover(), nameGroup5Turnover())
            + (OVERRIDE ' LIMIT ' + maxRowCount(),''),'"','\\"'));

        IMPORT JSON FROM queryResult() TO localNameGroup1Compare = nameGroup1, localNameGroup2Compare = nameGroup2, localNameGroup3Compare = nameGroup3, localNameGroup4Compare = nameGroup4, localNameGroup5Compare = nameGroup5,
                localGroup1Compare = group1, localGroup2Compare = group2, localGroup3Compare = group3, localGroup4Compare = group4, localGroup5Compare = group5,
                localBalanceACompare = balanceA, localStatisticUOMBalanceACompare = statisticUOMBalanceA, localCostBalanceACompare = costBalanceA,
                localVATSupplierACompare = VATSupplierA, localCostVATBalanceACompare = costVATBalanceA, localSumBalanceACompare = sumBalanceA, localBarcodeSkuCompare = barcodeSku;

        FOR imported(INTEGER i) AND INTEGER number = [ GROUP LAST INTEGER n ORDER n BY group1Turnover(n), group2Turnover(n), group3Turnover(n), group4Turnover(n), group5Turnover(n), barcodeSku(n)](localGroup1(i), localGroup2(i), localGroup3(i), localGroup4(i), localGroup5(i), localBarcodeSku(i)) DO {
            balanceACompare(number) <- localBalanceACompare(i);
            costBalanceACompare(number) <- localCostBalanceACompare(i);
            VATSupplierACompare(number) <- localVATSupplierACompare(i);
            costVATBalanceACompare(number) <- localCostVATBalanceACompare(i);
            sumBalanceACompare(number) <- localSumBalanceACompare(i);
        }
    }

}

printTurnoverReportCompareXLSX 'Сравнение с группировкой (XLSX)' (DATE dateFrom, DATE dateTo, DATE dateFromC, DATE dateToC )  {
    IF countGroup() == 0 THEN {
        MESSAGE 'Не задана группировка';
        RETURN;
    }
    fillTurnoverReportCompare(dateFrom, dateTo, dateFromC, dateToC);
    PRINT printTurnoverCompareReport OBJECTS df = dateFrom, dt = dateTo, dfc = dateFromC, dtc = dateToC XLSX;
}  IMAGE 'print.png' IN print;

EXTEND FORM turnoverReport
    PROPERTIES(df,dt,dfc, dtc) printTurnoverReportCompareXLSX SHOWIF compare()
;

DESIGN turnoverReport{
    print {
        MOVE PROPERTY (printTurnoverReportCompareXLSX(df,dt,dfc,dtc)) {fill = 1; valueSize = (-1,40);};
    }
}