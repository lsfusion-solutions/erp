MODULE ReceiptBI;

REQUIRE BI, ZReport, GiftCard, Druid, ReportBI;

NAMESPACE BI;

loadLookups () + { 
    loadLookup('cashregister_npp', [ GROUP CONCAT TEXT('"' + TEXT(CashRegister r) + '":"' + escapeJSONValue(overNpp(r)) + '"'), ',' ORDER r]());
}

overExportReceipt  ABSTRACT (DATE);
overExportReceipt = DATA LOCAL BOOLEAN ();
overExportReceiptDetail  ABSTRACT (DATE);
overExportReceiptDetail = DATA LOCAL BOOLEAN ();

exportReceipt 'Выгрузить Чеки' (DATE dFrom, DATE dTo)  { 
    FOR iterate(DATE date, dFrom, dTo) DO {
        overExportReceipt(date);
        IF NOT overExportReceipt() THEN {
            EXPORT CSV ',' HEADER FROM dateTime = [FORMULA STRING[20] 'to_char(($1),\'MM/DD/YY HH24:MI:SS\')'](dateTime(Receipt r)),
                                departmentStore = departmentStore(r),
                                number = number(r), cashRegister = cashRegister(r), employee = employee(r),
                                sumReceiptDetail = sumReceiptDetail(r), discountSumReceiptDetail = discountSumReceiptDetail(r),
                                sumVATReceiptDetail = sumVATReceiptDetail(r), countReceiptDetail = countReceiptDetail(r),
                                quantityReceiptDetail = quantityReceiptDetail(r), sumCashPayment = sumCashPayment(r),
                                sumCardPayment = sumCardPayment(r), sumGiftCardPayment = sumGiftCardPayment(r),
                                sumReceiptDetailGiftCard = sumReceiptDetailGiftCard(r)
                WHERE date(r) == date AND isPosted(r);
        }        
        ingestBatch('receipt', date);
    }
    runKillTask('receipt', dFrom, dTo);
    FOR iterate(DATE date, dFrom, dTo) DO {
        overExportReceiptDetail(date);
        IF NOT overExportReceiptDetail() THEN {
            EXPORT CSV ',' HEADER FROM dateTime = [FORMULA STRING[20] 'to_char(($1),\'MM/DD/YY HH24:MI:SS\')'](dateTime(ReceiptDetail d)),
                                departmentStore = departmentStore(d),
                                cashRegister = cashRegister(receipt(d)), employee = employee(receipt(d)),
                                sku = sku(d),
                                discountPercent = discountPercent(d), receipt = receipt(d), 
                                quantity = signedQuantity(d), price = price(d), sum = signedSum(d), discountSum = signedDiscountSum(d),
                                sumVAT = signedSumVAT(d), weight = signedQuantity(d) * overNetWeight(sku(d))
                WHERE date(d) == date AND isPosted(d);
        }
        ingestBatch('receiptdetail', date);
    }
    runKillTask('receiptdetail', dFrom, dTo);
} CONFIRM;

EXTEND FORM integrationData
    PROPERTIES exportReceipt(druidFrom, druidTo)
;

@defineReport(receipt, 'Продажа (по чекам)');

@createGroup(receipt, departmentStore, 'По магазину', 1, 'departmentStore', 'LOOKUP(departmentStore,\'stock_name\')', 'Магазин', checkBoxContainer);
@createGroup(receipt, cashRegister, 'По кассе', 2, 'cashRegister', 'LOOKUP(cashRegister,\'cashregister_npp\')', 'Касса', checkBoxContainer);
@createGroup(receipt, employee, 'По кассиру', 3, 'employee', 'LOOKUP(employee,\'employee_name\')', 'Кассир', checkBoxContainer);
@createGroup(receipt, month, 'По месяцам', 4, 'TIME_FORMAT(__time,\'yyyy-MM\')', 'Месяц', checkBoxContainer);
@createGroup(receipt, week, 'По неделям', 5, 'TIME_FORMAT(__time,\'yyyy неделя ww\')', 'Неделя', checkBoxContainer);
@createGroup(receipt, day, 'По дням', 6, 'TIME_FORMAT(__time,\'yyyy-MM-dd\')', 'День', checkBoxContainer);

nameGroupsReceipt = CONCAT ', ', (OVERRIDE exprGroup1Receipt(), '\'\'') + ' AS nameGroup1',
                                           (OVERRIDE exprGroup2Receipt(), '\'\'') + ' AS nameGroup2',
                                           (OVERRIDE exprGroup3Receipt(), '\'\'') + ' AS nameGroup3';

nameGroup1Receipt = DATA LOCAL STRING[255] (INTEGER);
nameGroup2Receipt = DATA LOCAL STRING[255] (INTEGER);
nameGroup3Receipt = DATA LOCAL STRING[255] (INTEGER);

sumReceiptDetail 'Сумма' = DATA LOCAL NUMERIC[18,4] (INTEGER);
discountSumReceiptDetail 'Сумма скидки' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumVATReceiptDetail 'Сумма НДС' = DATA LOCAL NUMERIC[18,4] (INTEGER);
countReceiptDetail 'Кол-во строк' = DATA LOCAL INTEGER (INTEGER);
quantityReceiptDetail 'Кол-во' = DATA LOCAL NUMERIC[16,5] (INTEGER);
sumCashPayment 'Сумма продаж (наличные)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumCardPayment 'Сумма продаж (карточка)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumGiftCardPayment 'Сумма продаж (сертификат)' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumReceiptDetailGiftCard 'Сумма проданных сертификатов' = DATA LOCAL NUMERIC[18,4] (INTEGER);

countRowsReceipt 'Количество строк' () = GROUP SUM 1 IF nameGroup1Receipt(INTEGER i);

//------- Магазины -------
include 'Вкл' = DATA LOCAL BOOLEAN (DepartmentStore);

deleteIncludeDepartmentStores 'Сбросить отмеченные'()  { 
    include (DepartmentStore ds) <- NULL;
};

nameIncludeDepartmentStores 'Отделы магазина (все)' ()= GROUP CONCAT TEXT(name(DepartmentStore ds)) IF include(ds), ', ' ORDER ds CHARWIDTH 20;

FORM dialogDepartmentStores 'Магазины'
    OBJECTS s = DepartmentStore
    PROPERTIES(s) READONLY id, name
    PROPERTIES (s) include
    ORDERS name(s)
    PROPERTIES deleteIncludeDepartmentStores() DRAW s TOOLBAR

    FILTERGROUP inactiveStock FILTER 'Активный' active(s) 'ctrl F10' DEFAULT    
    FILTERGROUP select FILTER 'Отм.' include(s) 'F9'
;
DESIGN dialogDepartmentStores {
    BOX {
        size = (1024, 768);
        MOVE BOX(s) {
            fill = 1;
            GRID(s) {
                defaultComponent = TRUE;
            }
            PROPERTY(name(s)){
                charWidth = 35;
            }
        }
        MOVE TOOLBARBOX;
    }
}

changeIncludeDepartmentStores()  { 
    DIALOG dialogDepartmentStores;
}

overFillReceiptReport ABSTRACT LIST ( DATE, DATE);
overFillReceiptReport = DATA LOCAL BOOLEAN ();

fillReceiptReport (DATE dateFrom, DATE dateTo)  { 
    nameGroup1Receipt(INTEGER i) <- NULL;
    nameGroup2Receipt(INTEGER i) <- NULL;
    nameGroup3Receipt(INTEGER i) <- NULL;
    sumReceiptDetail(INTEGER i) <- NULL;
    discountSumReceiptDetail(INTEGER i) <- NULL;
    sumVATReceiptDetail(INTEGER i) <- NULL;
    countReceiptDetail(INTEGER i) <- NULL;
    quantityReceiptDetail(INTEGER i) <- NULL;
    sumCashPayment(INTEGER i) <- NULL;
    sumCardPayment(INTEGER i) <- NULL;
    sumGiftCardPayment(INTEGER i) <- NULL;
    sumReceiptDetailGiftCard(INTEGER i) <- NULL;
    
    overFillReceiptReport(dateFrom,dateTo);
    IF NOT overFillReceiptReport() THEN {
        query(replace('SELECT ' 
            + 'SUM(sumReceiptDetail) AS sumReceiptDetail, SUM(discountSumReceiptDetail) AS discountSumReceiptDetail, SUM(sumVATReceiptDetail) AS sumVATReceiptDetail, '
            + 'SUM(countReceiptDetail) AS countReceiptDetail, SUM(quantityReceiptDetail) AS quantityReceiptDetail, SUM(sumCashPayment) AS sumCashPayment, '
            + 'SUM(sumCardPayment) AS sumCardPayment, SUM(sumGiftCardPayment) AS sumGiftCardPayment, SUM(sumReceiptDetailGiftCard) AS sumReceiptDetailGiftCard, '
            + nameGroupsReceipt() + ' FROM receipt'
            + ' WHERE __time BETWEEN TIME_PARSE(\'' + dateFrom + ' 00:00:00' + '\',\'yyyy-MM-dd HH:mm:ss\') AND TIME_PARSE(\'' + dateTo + ' 23:59:59' + '\',\'yyyy-MM-dd HH:mm:ss\')'
            + (OVERRIDE ' AND departmentStore IN (' + (GROUP CONCAT TEXT('\''+ TEXT(DepartmentStore s) +'\'') IF include(s),',' ORDER s) + ')','')
            + ' GROUP BY ' + (CONCAT ', ', nameGroup1Receipt(), nameGroup2Receipt(), nameGroup3Receipt())
            + (OVERRIDE ' LIMIT ' + maxRowCount(),''),'"','\\"'));
        
        IMPORT JSON FROM queryResult() TO nameGroup1Receipt = nameGroup1, nameGroup2Receipt = nameGroup2, nameGroup3Receipt = nameGroup3, 
                                          sumReceiptDetail = sumReceiptDetail, discountSumReceiptDetail = discountSumReceiptDetail, sumVATReceiptDetail = sumVATReceiptDetail,
                                          countReceiptDetail = countReceiptDetail, quantityReceiptDetail = quantityReceiptDetail, sumCashPayment = sumCashPayment,
                                          sumCardPayment = sumCardPayment, sumGiftCardPayment = sumGiftCardPayment, sumReceiptDetailGiftCard = sumReceiptDetailGiftCard;
    }
}

FORM printReceiptReport 'Продажа (по чекам)'
    OBJECTS df=DATE PANEL SUBREPORT
    PROPERTIES dateFrom = VALUE(df)
   
    OBJECTS dt=DATE PANEL
    PROPERTIES dateTo = VALUE(dt)
       
    PROPERTIES() countGroup, countRowsReceipt, maxRowCount, nameIncludeDepartmentStores
    
    OBJECTS i = INTEGER
    PROPERTIES(i) READONLY nameGroup1Receipt, nameGroup2Receipt, nameGroup3Receipt
    PROPERTIES(i) READONLY sumReceiptDetail, discountSumReceiptDetail, sumVATReceiptDetail, countReceiptDetail, quantityReceiptDetail,
                           sumCashPayment, sumCardPayment, sumGiftCardPayment, sumReceiptDetailGiftCard
    FILTERS nameGroup1Receipt(i) AND dt IS DATE AND df IS DATE,
            sumReceiptDetail(i)
            
    ORDERS nameGroup1Receipt(i), nameGroup2Receipt(i), nameGroup3Receipt(i)
;

printReceiptReportXLSX 'С группировкой (XLSX)' (DATE dateFrom, DATE dateTo)  { 
    IF countGroup() == 0 THEN {
        MESSAGE 'Не задана группировка';
        RETURN;
    }
    fillReceiptReport(dateFrom, dateTo);
    PRINT printReceiptReport OBJECTS df = dateFrom, dt = dateTo XLSX;
}  IMAGE 'print.png' IN print;

FORM printReceiptReportTable 'Продажа (по чекам)'
    OBJECTS df=DATE PANEL SUBREPORT
    PROPERTIES dateFrom = VALUE(df)
   
    OBJECTS dt=DATE PANEL
    PROPERTIES dateTo = VALUE(dt)
       
    PROPERTIES() countGroup, countRowsReceipt, maxRowCount, captionGroup1Receipt, captionGroup2Receipt, captionGroup3Receipt,
                 nameIncludeDepartmentStores
    
    OBJECTS i = INTEGER
    PROPERTIES(i) READONLY nameGroup1Receipt, nameGroup2Receipt, nameGroup3Receipt
    PROPERTIES(i) READONLY sumReceiptDetail, discountSumReceiptDetail, sumVATReceiptDetail, countReceiptDetail, quantityReceiptDetail,
                           sumCashPayment, sumCardPayment, sumGiftCardPayment, sumReceiptDetailGiftCard
    FILTERS nameGroup1Receipt(i) AND dt IS DATE AND df IS DATE,
            sumReceiptDetail(i)
            
    ORDERS nameGroup1Receipt(i), nameGroup2Receipt(i), nameGroup3Receipt(i)
;

printReceiptReportTableXLSX 'Без группировки (XLSX)' (DATE dateFrom, DATE dateTo)  { 
    IF countGroup() == 0 THEN {
        MESSAGE 'Не задана группировка';
        RETURN;
    }
    fillReceiptReport(dateFrom, dateTo);
    PRINT printReceiptReportTable OBJECTS df = dateFrom, dt = dateTo XLSX;
}  IMAGE 'print.png' IN print;

EXTEND FORM receiptReport
    PROPERTIES nameIncludeDepartmentStores() ON CHANGE changeIncludeDepartmentStores()
          
    PROPERTIES(df,dt) printReceiptReportXLSX, printReceiptReportTableXLSX
;

DESIGN receiptReport {
    filters {
        MOVE PROPERTY(nameIncludeDepartmentStores());
    }
    print {
        MOVE PROPERTY (printReceiptReportXLSX(df,dt)) {fill = 1; valueSize = (-1,40);};
        MOVE PROPERTY (printReceiptReportTableXLSX(df,dt)) {fill = 1; valueSize = (-1,40);};
    }
}

@defineReport(receiptDetail, 'Продажа (по строкам чеков)');

@createGroup(receiptDetail, departmentStore, 'По магазину', 1, 'departmentStore', 'LOOKUP(departmentStore,\'stock_name\')', 'Магазин', checkBoxContainer);
@createGroup(receiptDetail, cashRegister, 'По кассе', 2, 'cashRegister', 'LOOKUP(cashRegister,\'cashregister_npp\')', 'Касса', checkBoxContainer);
@createGroup(receiptDetail, employee, 'По кассиру', 3, 'employee', 'LOOKUP(employee,\'employee_name\')', 'Кассир', checkBoxContainer);
@createGroup(receiptDetail, month, 'По месяцам', 4, 'TIME_FORMAT(__time,\'yyyy-MM\')', 'Месяц', checkBoxContainer);
@createGroup(receiptDetail, week, 'По неделям', 5, 'TIME_FORMAT(__time,\'yyyy неделя ww\')', 'Неделя', checkBoxContainer);
@createGroup(receiptDetail, day, 'По дням', 6, 'TIME_FORMAT(__time,\'yyyy-MM-dd\')', 'День', checkBoxContainer);
@createGroup(receiptDetail, sku, 'По товару', 7, 'sku', 'LOOKUP(sku,\'sku_name\')', 'Товар', checkBoxContainer);
@createGroup(receiptDetail, group1, 'По направлению', 8, 'LOOKUP(sku,\'sku_group1\')', 'LOOKUP(LOOKUP(sku,\'sku_group1\'),\'group_name\')', 'Направление', checkBoxContainer);
@createGroup(receiptDetail, group2, 'По группе', 9, 'LOOKUP(sku,\'sku_group2\')', 'LOOKUP(LOOKUP(sku,\'sku_group2\'),\'group_name\')', 'Группа', checkBoxContainer);
@createGroup(receiptDetail, group3, 'По подгруппе', 10, 'LOOKUP(sku,\'sku_group3\')', 'LOOKUP(LOOKUP(sku,\'sku_group3\'),\'group_name\')', 'Подгруппа', checkBoxContainer);
@createGroup(receiptDetail, group4, 'По субгруппе', 11, 'LOOKUP(sku,\'sku_group4\')', 'LOOKUP(LOOKUP(sku,\'sku_group4\'),\'group_name\')', 'Субгруппа', checkBoxContainer);

nameGroupsReceiptDetail = CONCAT ', ', (OVERRIDE exprGroup1ReceiptDetail(), '\'\'') + ' AS nameGroup1',
                                           (OVERRIDE exprGroup2ReceiptDetail(), '\'\'') + ' AS nameGroup2',
                                           (OVERRIDE exprGroup3ReceiptDetail(), '\'\'') + ' AS nameGroup3';

nameGroup1ReceiptDetail = DATA LOCAL STRING[255] (INTEGER);
nameGroup2ReceiptDetail = DATA LOCAL STRING[255] (INTEGER);
nameGroup3ReceiptDetail = DATA LOCAL STRING[255] (INTEGER);

sum 'Сумма' = DATA LOCAL NUMERIC[18,4] (INTEGER);
discountSum 'Сумма скидки' = DATA LOCAL NUMERIC[18,4] (INTEGER);
sumVAT 'Сумма НДС' = DATA LOCAL NUMERIC[18,4] (INTEGER);
quantity 'Кол-во' = DATA LOCAL NUMERIC[16,5] (INTEGER);

countRowsReceiptDetail 'Количество строк' () = GROUP SUM 1 IF nameGroup1ReceiptDetail(INTEGER i);

//------- Группы товаров -------
dataIncludeReceiptDetail 'Вкл' = DATA LOCAL BOOLEAN (SkuGroup);

levelParentIncludeReceiptDetail(SkuGroup skuGroup) = GROUP MIN level(skuGroup, SkuGroup parent) IF dataIncludeReceiptDetail(parent);    
nearestParentIncludeReceiptDetail(SkuGroup skuGroup) = skuGroup(skuGroup, levelParentIncludeReceiptDetail(skuGroup));
nearestIncludeReceiptDetail(SkuGroup skuGroup) = dataIncludeReceiptDetail(nearestParentIncludeReceiptDetail(skuGroup));

includeReceiptDetail 'Вкл' (SkuGroup skuGroup) = OVERRIDE dataIncludeReceiptDetail(skuGroup), nearestIncludeReceiptDetail(skuGroup);

deleteIncludeSkuGroupsReceiptDetail 'Сбросить отмеченные'()  { 
    dataIncludeReceiptDetail(SkuGroup g) <- NULL;
};

nameIncludeSkuGroupsReceiptDetail 'Группы товаров (все)' ()= GROUP CONCAT TEXT(name(SkuGroup skuGroup)) IF dataIncludeReceiptDetail(skuGroup), ', ' ORDER skuGroup CHARWIDTH 20;
nameIncludeSkuGroups1ReceiptDetail 'Направления (все)' = GROUP CONCAT TEXT('\''+ TEXT(SkuGroup skuGroup) +'\'') IF dataIncludeReceiptDetail(skuGroup) AND level(skuGroup) == 2, ', ' ORDER skuGroup CHARWIDTH 20;
nameIncludeSkuGroups2ReceiptDetail 'Группы (все)' = GROUP CONCAT TEXT('\''+ TEXT(SkuGroup skuGroup) +'\'') IF dataIncludeReceiptDetail(skuGroup) AND level(skuGroup) == 3, ', ' ORDER skuGroup CHARWIDTH 20;
nameIncludeSkuGroups3ReceiptDetail 'Подгруппы (все)' = GROUP CONCAT TEXT('\''+ TEXT(SkuGroup skuGroup) +'\'') IF dataIncludeReceiptDetail(skuGroup) AND level(skuGroup) == 4, ', ' ORDER skuGroup CHARWIDTH 20;
nameIncludeSkuGroups4ReceiptDetail 'Субгруппы (все)' = GROUP CONCAT TEXT('\''+ TEXT(SkuGroup skuGroup) +'\'') IF dataIncludeReceiptDetail(skuGroup) AND level(skuGroup) == 5, ', ' ORDER skuGroup CHARWIDTH 20;

//------- Товары -------
dataIncludeReceiptDetail 'Вкл' = DATA LOCAL BOOLEAN (Sku);

includeSkuGroupReceiptDetail (Sku sku) = TRUE IF (GROUP MAX 1 IF includeReceiptDetail(SkuGroup g) AND isParent(g, sku));

includeReceiptDetail 'Вкл' (Sku sku) = OVERRIDE dataIncludeReceiptDetail(sku), includeSkuGroupReceiptDetail(sku);

deleteIncludeSkusReceiptDetail 'Сбросить отмеченные'()  { 
    dataIncludeReceiptDetail(Sku b) <- NULL;
};

nameIncludeSkusReceiptDetail 'Товары (все)' = GROUP CONCAT replace(name(Sku sku), '\n', '') IF dataIncludeReceiptDetail(sku), ', ' ORDER sku CHARWIDTH 20;
nameIncludeBarcodesReceiptDetail 'ШК (все)' = GROUP CONCAT TEXT(idBarcode(Sku sku)) IF dataIncludeReceiptDetail(sku), ',' ORDER sku CHARWIDTH 20;

commaBarcodeIdReceiptDetail 'Список ШК' = DATA LOCAL ISTRING[4000]() CHARWIDTH 30 NOFLEX;

addCommaBarcodeIdReceiptDetail 'Добавить' ()  { 
    IF commaBarcodeIdReceiptDetail() THEN {
        dataIncludeReceiptDetail(Sku sku) <- TRUE WHERE [GROUP SUM 1 IF isWordInCSV(id(Barcode barcode), replace(commaBarcodeIdReceiptDetail(),' ',',')) BY sku(barcode)](sku);
        commaBarcodeIdReceiptDetail() <- NULL;
    }
}

FORM dialogSkuReceiptDetail 'Товары'
    TREE skuTree sk = SkuGroup PARENT parent(sk)
    PROPERTIES READONLY order(sk), name(sk)
    PROPERTIES includeReceiptDetail(sk)
    ORDERS order(sk), name(sk)
    FILTERGROUP inactive FILTER 'Активные' active(sk) 'F6' DEFAULT   
    PROPERTIES deleteIncludeSkuGroupsReceiptDetail() DRAW sk TOOLBAR

    OBJECTS sku = Sku
    PROPERTIES PANEL commaBarcodeIdReceiptDetail(), addCommaBarcodeIdReceiptDetail()
    PROPERTIES includeReceiptDetail(sku)
    PROPERTIES(sku) READONLY idBarcode, name, shortNameUOM
    ORDERS name(sku)
    FILTERS isParent(sk,sku)
    FILTERGROUP inSku FILTER 'Отмеченные' includeReceiptDetail(sku)
    PROPERTIES deleteIncludeSkusReceiptDetail() DRAW sku TOOLBAR
;
DESIGN dialogSkuReceiptDetail {
    BOX {
        size = (1024, 768);
        NEW topContainer {
            horizontal = TRUE;
            fill = 1;
            MOVE BOX(TREE skuTree) {
                caption = 'Склады';
            }
            MOVE BOX(sku) {
                fill = 1.5;
                GRID(sku) {
                    defaultComponent = TRUE;
                }
            }
        }
        MOVE TOOLBARBOX;
    }
}

changeIncludeSkusReceiptDetail()  { 
    DIALOG dialogSkuReceiptDetail;
}
changeIncludeBarcodesReceiptDetail()  { 
    INPUT s = ISTRING[4000] DO {
        dataIncludeReceiptDetail(Sku sku) <- TRUE IF [GROUP SUM 1 IF isWordInCSV(id(Barcode barcode), replace(s,' ',',')) BY sku(barcode)](sku);
    }
}

filterGroupsReceiptDetail() = CONCAT ' OR', ' LOOKUP(sku,\'sku_group1\') IN (' + nameIncludeSkuGroups1ReceiptDetail() + ')',
                                       ' LOOKUP(sku,\'sku_group2\') IN (' + nameIncludeSkuGroups2ReceiptDetail() + ')',
                                       ' LOOKUP(sku,\'sku_group3\') IN (' + nameIncludeSkuGroups3ReceiptDetail() + ')',
                                       ' LOOKUP(sku,\'sku_group4\') IN (' + nameIncludeSkuGroups4ReceiptDetail() + ')';

overFillReceiptDetailReport ABSTRACT LIST ( DATE, DATE);
overFillReceiptDetailReport = DATA LOCAL BOOLEAN ();

fillReceiptDetailReport (DATE dateFrom, DATE dateTo)  { 
    nameGroup1ReceiptDetail(INTEGER i) <- NULL;
    nameGroup2ReceiptDetail(INTEGER i) <- NULL;
    nameGroup3ReceiptDetail(INTEGER i) <- NULL;
    sum(INTEGER i) <- NULL;
    discountSum(INTEGER i) <- NULL;
    sumVAT(INTEGER i) <- NULL;
    quantity(INTEGER i) <- NULL;
    
    overFillReceiptDetailReport(dateFrom,dateTo);
    IF NOT overFillReceiptDetailReport() THEN {
        query(replace('SELECT ' 
            + 'SUM("sum") AS "sum", SUM(discountSum) AS discountSum, SUM(sumVAT) AS sumVAT, SUM(quantity) AS quantity, '
            + nameGroupsReceiptDetail() + ' FROM receiptdetail'
            + ' WHERE __time BETWEEN TIME_PARSE(\'' + dateFrom + ' 00:00:00' + '\',\'yyyy-MM-dd HH:mm:ss\') AND TIME_PARSE(\'' + dateTo + ' 23:59:59' + '\',\'yyyy-MM-dd HH:mm:ss\')'
            + (OVERRIDE ' AND departmentStore IN (' + (GROUP CONCAT TEXT('\''+ TEXT(DepartmentStore s) +'\'') IF include(s),',' ORDER s) + ')','')
            + (OVERRIDE ' AND (' + filterGroupsReceiptDetail() + ')','')
            + (OVERRIDE ' AND sku IN (' + (GROUP CONCAT TEXT('\''+ TEXT(Sku sku) +'\'') IF dataIncludeReceiptDetail(sku),',' ORDER sku) + ')','')
            + ' GROUP BY ' + (CONCAT ', ', nameGroup1ReceiptDetail(), nameGroup2ReceiptDetail(), nameGroup3ReceiptDetail())
            + (OVERRIDE ' LIMIT ' + maxRowCount(),''),'"','\\"'));
        
        IMPORT JSON FROM queryResult() TO nameGroup1ReceiptDetail = nameGroup1, nameGroup2ReceiptDetail = nameGroup2, nameGroup3ReceiptDetail = nameGroup3, 
                                          sum = sum, discountSum = discountSum, sumVAT = sumVAT, quantity = quantity;
    }
}

FORM printReceiptDetailReport 'Продажа (по строкам чеков)'
    OBJECTS df=DATE PANEL SUBREPORT
    PROPERTIES dateFrom = VALUE(df)
   
    OBJECTS dt=DATE PANEL
    PROPERTIES dateTo = VALUE(dt)
       
    PROPERTIES() countGroup, countRowsReceiptDetail, maxRowCount, nameIncludeDepartmentStores, nameIncludeSkuGroupsReceiptDetail, nameIncludeSkusReceiptDetail
    
    OBJECTS i = INTEGER
    PROPERTIES(i) READONLY nameGroup1ReceiptDetail, nameGroup2ReceiptDetail, nameGroup3ReceiptDetail
    PROPERTIES(i) READONLY sum, discountSum, sumVAT, quantity
    FILTERS nameGroup1ReceiptDetail(i) AND dt IS DATE AND df IS DATE,
            sum(i)
            
    ORDERS nameGroup1ReceiptDetail(i), nameGroup2ReceiptDetail(i), nameGroup3ReceiptDetail(i)
;

printReceiptDetailReportXLSX 'С группировкой (XLSX)' (DATE dateFrom, DATE dateTo)  { 
    IF countGroup() == 0 THEN {
        MESSAGE 'Не задана группировка';
        RETURN;
    }
    fillReceiptDetailReport(dateFrom, dateTo);
    PRINT printReceiptDetailReport OBJECTS df = dateFrom, dt = dateTo XLSX;
}  IMAGE 'print.png' IN print;

FORM printReceiptDetailReportTable 'Продажа (по строкам чеков)'
    OBJECTS df=DATE PANEL SUBREPORT
    PROPERTIES dateFrom = VALUE(df)
   
    OBJECTS dt=DATE PANEL
    PROPERTIES dateTo = VALUE(dt)
       
    PROPERTIES() countGroup, countRowsReceiptDetail, maxRowCount, captionGroup1ReceiptDetail, captionGroup2ReceiptDetail, captionGroup3ReceiptDetail,
                 nameIncludeDepartmentStores, nameIncludeSkuGroupsReceiptDetail, nameIncludeSkusReceiptDetail
    
    OBJECTS i = INTEGER
    PROPERTIES(i) READONLY nameGroup1ReceiptDetail, nameGroup2ReceiptDetail, nameGroup3ReceiptDetail
    PROPERTIES(i) READONLY sum, discountSum, sumVAT, quantity
    FILTERS nameGroup1ReceiptDetail(i) AND dt IS DATE AND df IS DATE,
            sum(i)
            
    ORDERS nameGroup1ReceiptDetail(i), nameGroup2ReceiptDetail(i), nameGroup3ReceiptDetail(i)
;

printReceiptDetailReportTableXLSX 'Без группировки (XLSX)' (DATE dateFrom, DATE dateTo)  { 
    IF countGroup() == 0 THEN {
        MESSAGE 'Не задана группировка';
        RETURN;
    }
    fillReceiptDetailReport(dateFrom, dateTo);
    PRINT printReceiptDetailReportTable OBJECTS df = dateFrom, dt = dateTo XLSX;
}  IMAGE 'print.png' IN print;


showGroup1ReceiptDetail = GROUP SUM 1 IF level(SkuGroup skuGroup) == 2;
showGroup2ReceiptDetail = GROUP SUM 1 IF level(SkuGroup skuGroup) == 3;
showGroup3ReceiptDetail = GROUP SUM 1 IF level(SkuGroup skuGroup) == 4;
showGroup4ReceiptDetail = GROUP SUM 1 IF level(SkuGroup skuGroup) == 5;
hideGroup1ReceiptDetail() += TRUE IF NOT showGroup1ReceiptDetail();
hideGroup2ReceiptDetail() += TRUE IF NOT showGroup2ReceiptDetail();
hideGroup3ReceiptDetail() += TRUE IF NOT showGroup3ReceiptDetail();
hideGroup4ReceiptDetail() += TRUE IF NOT showGroup4ReceiptDetail();

EXTEND FORM receiptDetailReport
    PROPERTIES nameIncludeDepartmentStores() ON CHANGE changeIncludeDepartmentStores(),
               nameIncludeSkuGroupsReceiptDetail() ON CHANGE changeIncludeSkusReceiptDetail(),
               nameIncludeSkusReceiptDetail() ON CHANGE changeIncludeSkusReceiptDetail(),
               nameIncludeBarcodesReceiptDetail() ON CHANGE changeIncludeBarcodesReceiptDetail()
          
    PROPERTIES(df,dt) printReceiptDetailReportXLSX, printReceiptDetailReportTableXLSX
;

DESIGN receiptDetailReport {
    filters {
        MOVE PROPERTY(nameIncludeDepartmentStores());
        MOVE PROPERTY(nameIncludeSkuGroupsReceiptDetail());
        MOVE PROPERTY(nameIncludeSkusReceiptDetail());
        MOVE PROPERTY(nameIncludeBarcodesReceiptDetail());
    }
    print {
        MOVE PROPERTY (printReceiptDetailReportXLSX(df,dt)) {fill = 1; valueSize = (-1,40);};
        MOVE PROPERTY (printReceiptDetailReportTableXLSX(df,dt)) {fill = 1; valueSize = (-1,40);};
    }
}