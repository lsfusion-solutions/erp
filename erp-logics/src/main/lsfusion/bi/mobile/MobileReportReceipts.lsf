MODULE MobileReportReceipts;

REQUIRE MobileReportSale, ZReport;

NAMESPACE MobileReport;

@defineStaticObject(customerRow, 'Покупатели');

EXTEND CLASS CustomerRow{
    sale 'Продажа',
    return 'Возврат'
}

showSaleReceipt = DATA LOCAL BOOLEAN ();
showReturnReceipt = DATA LOCAL BOOLEAN ();

switchRow ABSTRACT LIST (CustomerRow);

switchRow(CustomerRow r) +{
    IF r = CustomerRow.sale THEN {
        IF showSaleReceipt() THEN showSaleReceipt() <- NULL;
        ELSE showSaleReceipt() <- TRUE;
    }
}

switchRow(CustomerRow r) +{
    IF r = CustomerRow.return THEN {
        IF showReturnReceipt() THEN showReturnReceipt() <- NULL;
        ELSE showReturnReceipt() <- TRUE;
    }
}

orderReceipt (CustomerRow cr) = CASE
    WHEN cr = CustomerRow.sale THEN '1'
    WHEN cr = CustomerRow.return THEN '2'
;

qtySaleReceiptZReport '' (DepartmentStore d, INTERVAL[DATE] int) = countFiscalReceipt(d, from(int), to(int));
qtyReturnReceiptZReport '' (DepartmentStore d, INTERVAL[DATE] int) = countReturnReceipt(d, from(int), to(int));

measure '' (DepartmentStore ds, INTERVAL[DATE] iq, CustomerRow r) = CASE
    WHEN r = CustomerRow.sale AND showSaleReceipt() THEN qtySaleReceiptZReport(ds, iq)
    WHEN r = CustomerRow.return AND showReturnReceipt() THEN qtyReturnReceiptZReport (ds, iq)
;

totalSaleReceipt 'Продажа' (INTERVAL[DATE] int) = GROUP SUM qtySaleReceiptZReport(DepartmentStore ds, int) 
    IF in(ds);
totalReturnReceipt 'Возврат' (INTERVAL[DATE] int) = GROUP SUM qtyReturnReceiptZReport(DepartmentStore ds, int) 
    IF in(ds);

isMeasure(INTERVAL[DATE] id, CustomerRow cr) = GROUP MAX in(DepartmentStore ds) IF measure(ds, id, cr);
colorIndex (INTERVAL[DATE] id, CustomerRow cr) = PARTITION SUM 1 IF isMeasure(id, cr) ORDER orderReceipt(cr), id, cr BY id;
color (INTERVAL[DATE] id, CustomerRow cr) = pivotColor(colorIndex(id, cr) - 1);

EXTEND FORM mobileReport
    PROPERTIES totalSaleReceipt(intervalDate) PANEL, totalReturnReceipt(intervalDate) PANEL 
    OBJECTS customerBar = (dsr = DepartmentStore, cr = CustomerRow) PIVOT 'Horizontal Stacked Bar Chart' NOSETTINGS 
    PROPERTIES READONLY customerBarMobileName = id(dsr), orderReceipt(cr), measure(dsr, intervalDate, cr)
    PIVOT customerBar CONFIG 'customeBar' COLUMNS customerBarMobileName ROWS orderReceipt(cr) MEASURES measure(dsr, intervalDate, cr)
    FILTERS measure(dsr, intervalDate, cr), in(dsr)
    
    OBJECTS legendCr = CustomerRow
    PROPERTIES switchRow(legendCr) BACKGROUND color(intervalDate, legendCr) DRAW customerBar HEADER name(legendCr) COLUMNS (legendCr)
    EVENTS ON INIT { showSaleReceipt() <- TRUE; showReturnReceipt() <- TRUE; }
;


DESIGN mobileReport {
    OBJECTS {
        mobileTabbedPane {
            NEW customerBar{
                caption = 'Покупатели';
                NEW totalCustomer{
                    alignment = CENTER;
                    type = CONTAINERH;
                    MOVE PROPERTY (totalReturnReceipt(intervalDate)) { fontSize = 22;}
                    MOVE PROPERTY (totalSaleReceipt(intervalDate)) FIRST {fontSize = 22;}
                }
                MOVE BOX (customerBar) {REMOVE TOOLBARBOX(customerBar); caption = ''; } ;
            }
        }
    }
}

@addMenuReport(customer, ds, 'Покупатели', 'retail.png');

//средний чек
@defineStaticObject(averageRow, 'Средний чек');

EXTEND CLASS AverageRow{
    receipt 'Средний чек'
}

orderAverage (AverageRow r) = CASE
    WHEN r = AverageRow.receipt THEN '1'
;

measure '' (DepartmentStore ds, INTERVAL[DATE] iq, AverageRow r) = CASE
    WHEN r = AverageRow.receipt THEN round2(sumReceiptDetailZReport(ds, iq) / qtySaleReceiptZReport(ds, iq))
;


isMeasure(INTERVAL[DATE] id,  AverageRow r) = GROUP MAX in(DepartmentStore ds) IF measure(ds, id, r);
colorIndex (INTERVAL[DATE] id, AverageRow r) = PARTITION SUM 1 IF isMeasure(id, r) ORDER orderAverage(r), id, r BY id;
color (INTERVAL[DATE] id, AverageRow r) = pivotColor(colorIndex(id, r) - 1);


switchRow ABSTRACT LIST (AverageRow);


EXTEND FORM mobileReport
    OBJECTS averageBar = (dsar = DepartmentStore, ar = AverageRow) PIVOT 'Horizontal Stacked Bar Chart' NOSETTINGS 
    PROPERTIES READONLY averageBarMobileName = id(dsar), orderAverage(ar), measure(dsar, intervalDate, ar)
    PIVOT averageBar CONFIG 'averageReceipt' COLUMNS averageBarMobileName ROWS orderAverage(ar) MEASURES measure(dsar, intervalDate, ar)
    FILTERS measure(dsar, intervalDate, ar), in(dsar)
;

DESIGN mobileReport {
    OBJECTS {
        mobileTabbedPane {
            NEW averageBar{
                caption = 'Средний чек';
                MOVE BOX (averageBar) {REMOVE TOOLBARBOX(averageBar); caption = ''; } ;
            }
        }
    }
}

@addMenuReport(average, ds, 'Средний чек', 'retail.png');

//по типам оплат

@defineStaticObject(PaymentRow, 'Тип оплаты');

EXTEND CLASS PaymentRow{
    cash 'Наличные',
    card 'Карта' 
}

order (PaymentRow r) = CASE
    WHEN r = PaymentRow.cash THEN '1'
    WHEN r = PaymentRow.card THEN '2'
;


sumPositiveCardPaymentReport 'Сумма продажа (карточка)' (DepartmentStore s, DATE dateFrom, DATE dateTo)= GROUP SUM sumPositiveCardPayment(ZReport zReport) IF 
    date(zReport) >= (dateFrom AS DATE) AND date(zReport) <= (dateTo AS DATE) AND isPosted(zReport)
        AND departmentStore(zReport) = s;
sumPositiveCashPaymentReport 'Сумма продажа (наличные)' (DepartmentStore s, DATE dateFrom, DATE dateTo)= GROUP SUM sumPositiveCashPayment(ZReport zReport) IF 
    date(zReport) >= (dateFrom AS DATE) AND date(zReport) <= (dateTo AS DATE) AND isPosted(zReport)
        AND departmentStore(zReport) = s;

sumCashPayment (DepartmentStore ds, INTERVAL[DATE] iq) = sumPositiveCashPaymentReport(ds, from(iq), to(iq));
sumCardPayment (DepartmentStore ds, INTERVAL[DATE] iq) = sumPositiveCardPaymentReport(ds, from(iq), to(iq));

measure '' (DepartmentStore ds, INTERVAL[DATE] iq, PaymentRow r) = CASE
    WHEN r = PaymentRow.cash THEN sumCashPayment(ds, iq)
    WHEN r = PaymentRow.card THEN sumCardPayment(ds, iq)
;

isMeasure(INTERVAL[DATE] id,  PaymentRow r) = GROUP MAX in(DepartmentStore ds) IF measure(ds, id, r);
colorIndex (INTERVAL[DATE] id, PaymentRow r) = PARTITION SUM 1 IF isMeasure(id, r) ORDER order(r), id, r BY id;
color (INTERVAL[DATE] id, PaymentRow r) = pivotColor(colorIndex(id, r) - 1);

switchRow ABSTRACT LIST (PaymentRow);


EXTEND FORM mobileReport
    OBJECTS paymentBar = (dspay = DepartmentStore, pr = PaymentRow) PIVOT 'Horizontal Stacked Bar Chart' NOSETTINGS 
    PROPERTIES READONLY paymentBarMobileName = mobileName(dspay), order(pr), measure(dspay, intervalDate, pr)
    PIVOT paymentBar CONFIG 'paymentType' COLUMNS paymentBarMobileName ROWS order(pr) MEASURES measure(dspay, intervalDate, pr)
    FILTERS measure(dspay, intervalDate, pr), in(dspay)
;


DESIGN mobileReport {
    OBJECTS {
        mobileTabbedPane {
            NEW paymentBar{
                caption = 'Оплата';
                MOVE BOX (paymentBar) {REMOVE TOOLBARBOX(paymentBar); caption = ''; };
            }
        }
    }
}

