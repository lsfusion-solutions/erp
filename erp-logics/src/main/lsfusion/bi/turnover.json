{
  "type": "index",
  "spec": {
    "dataSchema": {
      "dataSource": "turnover",
      "parser": {
        "type": "string",
        "parseSpec": {
          "format": "csv",
          "timestampSpec": {
            "column": "dateTime",
            "format": "M/d/YY"
          },
          "dimensionsSpec": {
            "dimensions": [
              "stock",
              "formatStock",
              "sku",
              "supplier",
              "supplierStock",
              {
                "name": "cost",
                "type": "float"
              },
              {
                "name": "price",
                "type": "float"
              },
              {
                "name": "valueVAT",
                "type": "float"
              },
              "brand",
              "UOM"
            ]
          },
          "hasHeaderRow": true
        }
      },
      "metricsSpec": [
        {
          "type": "floatSum",
          "name": "balance",
          "fieldName": "balance",
          "expression": null
        },
        {
          "type": "javascript",
          "name": "costBalance",
          "fieldNames": [
            "balance",
            "cost"
          ],
          "fnAggregate": "function(current, a, b)      { return current + (a * b); }",
          "fnReset": "function()                   { return 0; }",
          "fnCombine": "function(partialA, partialB) { return partialA + partialB; }"
        },
        {
          "type": "javascript",
          "name": "sumBalance",
          "fieldNames": [
            "balance",
            "price"
          ],
          "fnAggregate": "function(current, a, b)      { return current + (a * b); }",
          "fnReset": "function()                   { return 0; }",
          "fnCombine": "function(partialA, partialB) { return partialA + partialB; }"
        },
        {
          "type": "javascript",
          "name": "costVATBalance",
          "fieldNames": [
            "balance",
            "cost",
            "valueVAT"
          ],
          "fnAggregate": "function(current, a, b, c)      { return current + (a * b * (1.0 + (c / 100.0))); }",
          "fnReset": "function()                   { return 0; }",
          "fnCombine": "function(partialA, partialB) { return partialA + partialB; }"
        },
        {
          "type": "floatSum",
          "name": "quantityPurchase",
          "fieldName": "quantityPurchase",
          "expression": null
        },
        {
          "type": "floatSum",
          "name": "sumVATPurchase",
          "fieldName": "sumVATPurchase",
          "expression": null
        },
        {
          "type": "floatSum",
          "name": "sumPurchase",
          "fieldName": "sumPurchase",
          "expression": null
        },
        {
          "type": "javascript",
          "name": "sumPricePurchase",
          "fieldNames": [
            "quantityPurchase",
            "price"
          ],
          "fnAggregate": "function(current, a, b)      { return current + (a * b); }",
          "fnReset": "function()                   { return 0; }",
          "fnCombine": "function(partialA, partialB) { return partialA + partialB; }"
        },
        {
          "type": "floatSum",
          "name": "quantitySold",
          "fieldName": "quantitySold",
          "expression": null
        },
        {
          "type": "javascript",
          "name": "costSumSold",
          "fieldNames": [
            "quantitySold",
            "cost"
          ],
          "fnAggregate": "function(current, a, b)      { return current + (a * b); }",
          "fnReset": "function()                   { return 0; }",
          "fnCombine": "function(partialA, partialB) { return partialA + partialB; }"
        },
        {
          "type": "javascript",
          "name": "costSumVATSold",
          "fieldNames": [
            "quantitySold",
            "cost",
            "valueVAT"
          ],
          "fnAggregate": "function(current, a, b, c)      { return current + (a * b * (1.0 + (c / 100.0))); }",
          "fnReset": "function()                   { return 0; }",
          "fnCombine": "function(partialA, partialB) { return partialA + partialB; }"
        },
        {
          "type": "floatSum",
          "name": "sumVATSold",
          "fieldName": "sumVATSold",
          "expression": null
        },
        {
          "type": "floatSum",
          "name": "sumSold",
          "fieldName": "sumSold",
          "expression": null
        },
        {
          "type": "javascript",
          "name": "sumPriceSold",
          "fieldNames": [
            "quantitySold",
            "price"
          ],
          "fnAggregate": "function(current, a, b)      { return current + (a * b); }",
          "fnReset": "function()                   { return 0; }",
          "fnCombine": "function(partialA, partialB) { return partialA + partialB; }"
        }
      ],
      "granularitySpec": {
        "type": "uniform",
        "segmentGranularity": "DAY",
        "queryGranularity": {
          "type": "none"
        },
        "rollup": false,
        "intervals": null
      },
      "transformSpec": {
        "filter": null,
        "transforms": []
      }
    },
    "ioConfig": {
      "type": "index",
      "firehose": {
        "type" : "local",
        "baseDir" : "<DIRECTORY>",
        "filter" : "<FILE>"
      },
      "appendToExisting": false
    },
    "tuningConfig": {
      "type": "index",
      "targetPartitionSize": 20000000,
      "maxRowsInMemory": 75000,
      "maxTotalRows": 20000000,
      "numShards": null,
      "indexSpec": {
        "bitmap": {
          "type": "concise"
        },
        "dimensionCompression": "lz4",
        "metricCompression": "lz4",
        "longEncoding": "longs"
      },
      "maxPendingPersists": 0,
      "buildV9Directly": true,
      "forceExtendableShardSpecs": true,
      "forceGuaranteedRollup": false,
      "reportParseExceptions": false,
      "pushTimeout": 0,
      "segmentWriteOutMediumFactory": null
    }
  }
}