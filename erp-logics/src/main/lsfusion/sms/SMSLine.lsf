MODULE SMSLine;

REQUIRE DiscountCard, LogTools;

@defineLogRotate(SMSLine, 5, weekly);

urlSMSLine 'SMSLine URL' = DATA STRING[255]();
urlSMSLineCallback 'URL для отправки статусов' = DATA STRING[255]();
usernameSMSLine 'Пользователь' = DATA STRING[255]();
passwordAPISMSLine 'Пароль для API' = DATA STRING[255]() ECHO;
getID = FORMULA LONG '$1';

EXTEND FORM integrationData
    PROPERTIES() urlSMSLine, urlSMSLineCallback, usernameSMSLine, passwordAPISMSLine
;

DESIGN integrationData {
    pane {
        NEW smsLine {
            caption = 'SMSLine';
            type = CONTAINERV;
            MOVE PROPERTY(urlSMSLine());
            MOVE PROPERTY(urlSMSLineCallback());
            MOVE PROPERTY(usernameSMSLine());
            MOVE PROPERTY(passwordAPISMSLine());
        }
    }
}

//------------------------- База абонентов ----------------------------------//
CLASS SubscriberBase 'База абонентов';
TABLE subscriberBase (SubscriberBase);

index 'Номер' (SubscriberBase b) = PARTITION SUM 1 ORDER b IF b IS SubscriberBase CHARWIDTH 4; 
name 'Название' = DATA ISTRING[255] (SubscriberBase);

TABLE subscriberBaseDiscountCard (SubscriberBase, DiscountCard);
in 'Вкл.' = DATA BOOLEAN (SubscriberBase, DiscountCard);

countSubscribers 'Абоненты' (SubscriberBase b) = GROUP SUM 1 IF in(b, DiscountCard d);

FORM subscriberBase 'База абонентов'
    OBJECTS b = SubscriberBase PANEL
    PROPERTIES(b) name
    
    OBJECTS d = DiscountCard
    PROPERTIES(b,d) in
    PROPERTIES(d) READONLY number, series, id SHOWIF showIDs(), phoneLegalEntity, nameLegalEntity, firstNameContact, lastNameContact
    FILTERGROUP include FILTER 'Включены' in(b,d) 'F9' 
    
    EDIT SubscriberBase OBJECT b
;

FORM subscriberBases 'Базы абонентов'
    OBJECTS b = SubscriberBase
    PROPERTIES(b) READONLY index, name, countSubscribers
    PROPERTIES(b) NEWSESSION NEW, EDIT, DELETE
    
    LIST SubscriberBase OBJECT b
;

NAVIGATOR {
    dashboardNavigator {
        NEW FOLDER smsLine 'СМС (SMSLine)' {
            NEW subscriberBases;
        }
    }
}

//------------------------- Черный список -----------------------------------//
inBlackList 'Вкл' = DATA BOOLEAN (DiscountCard);

isEditable 'Включить корректировку на форме' = DATA LOCAL NESTED BOOLEAN();
isReadOnly 'Только чтение' () = TRUE AND NOT isEditable();

FORM subscriberBlackList 'Черный список'
    PROPERTIES isEditable() TOOLBAR
    OBJECTS d = DiscountCard
    PROPERTIES(d) READONLYIF isReadOnly() inBlackList
    PROPERTIES(d) READONLY number, series, id SHOWIF showIDs(), phoneLegalEntity, nameLegalEntity, firstNameContact, lastNameContact
    FILTERGROUP include FILTER 'В черном списке' inBlackList(d) 'F9' DEFAULT
;

DESIGN subscriberBlackList {
    TOOLBARBOX {
        MOVE PROPERTY(isEditable()) BEFORE TOOLBARRIGHT;
    }
}

NAVIGATOR { 
    smsLine {
        NEW subscriberBlackList;
    }
}

//----------------------------------- Рассылка --------------------------------//
CLASS NumberService 'Номер сервиса';
TABLE numberService (NumberService);

name 'Наименование' = DATA STRING[20] (NumberService);

FORM numberService 'Номер сервиса'
    OBJECTS n = NumberService PANEL
    PROPERTIES(n) name
    
    EDIT NumberService OBJECT n
;

FORM numberServices 'Номера сервиса'
    OBJECTS n = NumberService
    PROPERTIES(n) READONLY name
    PROPERTIES(n) DELETE GRID
    PROPERTIES(n) NEWSESSION NEW, EDIT 
    
    LIST NumberService OBJECT n
;

CLASS CommunicationChannel 'Канал' {
    sms 'SMS',
    viber 'Viber',
    viber_t 'Viber (транзакц.)',
    viber_sms 'Viber + SMS',
    viber_t_sms 'Viber (транзакц.) + SMS'
}

TABLE communicationChannel (CommunicationChannel);
numberService1 'Номера сервиса 1' = DATA NumberService (CommunicationChannel);
nameNumberService1 'Номер сервиса 1' (CommunicationChannel c) = name(numberService1(c));
numberService2 'Номера сервиса 2' = DATA NumberService (CommunicationChannel);
nameNumberService2 'Номер сервиса 2' (CommunicationChannel c) = name(numberService2(c));

url (CommunicationChannel c) = CASE
    WHEN c == CommunicationChannel.sms THEN '/messages/bulk/sms'
    WHEN c == CommunicationChannel.viber THEN '/messages/bulk/viber'
    WHEN c == CommunicationChannel.viber_t THEN '/messages/bulk/viber'
    WHEN c == CommunicationChannel.viber_sms THEN '/messages/multi/single/viber_sms'
    WHEN c == CommunicationChannel.viber_t_sms THEN '/messages/multi/single/viber_sms';

FORM communicationChannel 'Канал'
    OBJECTS c = CommunicationChannel PANEL
    PROPERTIES(c) READONLY staticCaption
    PROPERTIES(c) nameNumberService1, nameNumberService2
    
    EDIT CommunicationChannel OBJECT c
;

FORM communicationChannels 'Каналы'
    OBJECTS c = CommunicationChannel
    PROPERTIES(c) READONLY staticCaption, nameNumberService1, nameNumberService2
    PROPERTIES(c) NEWSESSION NEW, EDIT 
    
    LIST CommunicationChannel OBJECT c
;


CLASS Dispatch 'Рассылка';
TABLE dispatch (Dispatch);

createdTime 'Время создания' = DATA DATETIME (Dispatch);
createdTime (Dispatch d) <- currentDateTime() WHEN SET(d IS Dispatch);

name 'Название' = DATA ISTRING[255] (Dispatch) NONULL CHARWIDTH 30;
communicationChannel 'Канал' = DATA CommunicationChannel (Dispatch) NONULL;
nameCommunicationChannel 'Канал' (Dispatch d) = staticCaption(communicationChannel(d)) CHARWIDTH 10;
//numberService 'Номер сервиса' = DATA NumberService (Dispatch) NONULL;
//nameNumberService 'Номер сервиса' (Dispatch d) = name(numberService(d));
//subscriberBase 'База абонентов' = DATA SubscriberBase (Dispatch) NONULL;
//nameSubscriberBase 'База абонентов' (Dispatch d) = name(subscriberBase(d));

isViber (Dispatch d) = communicationChannel(d) == CommunicationChannel.viber OR communicationChannel(d) == CommunicationChannel.viber_sms
    OR communicationChannel(d) == CommunicationChannel.viber_t OR communicationChannel(d) == CommunicationChannel.viber_t_sms;
isSMS (Dispatch d) = communicationChannel(d) == CommunicationChannel.sms OR communicationChannel(d) == CommunicationChannel.viber_sms
    OR communicationChannel(d) == CommunicationChannel.viber_t_sms;
isMulti (Dispatch d) = communicationChannel(d) == CommunicationChannel.viber_sms OR communicationChannel(d) == CommunicationChannel.viber_t_sms;


messageViber 'Текст сообщения Viber' = DATA TEXT (Dispatch);//DATA STRING[1000] (Dispatch);
lengthMessageViber 'К-во символов' (Dispatch d) = length (messageViber(d));
//CONSTRAINT SETCHANGED(messageViber(Dispatch d)) AND length(messageViber(d)) > 1000
//    MESSAGE (GROUP CONCAT 'Сообщение для Viber не должно превышать 1000 символов (сейчас ' + length(messageViber(Dispatch dd)) + ')' IF SETCHANGED(messageViber(dd)) AND length(messageViber(dd)) > 1000, '\n' ORDER dd);
CONSTRAINT isViber(Dispatch d) AND NOT messageViber(d)
    MESSAGE 'Не задан текст сообщения Viber';
messageSMS 'Текст сообщения SMS' = DATA TEXT (Dispatch);//DATA STRING[71] (Dispatch);
lengthMessageSMS 'К-во символов' (Dispatch d) = length (messageSMS(d));
//CONSTRAINT SETCHANGED(messageSMS(Dispatch d)) AND length(messageSMS(d)) > 142
//    MESSAGE (GROUP CONCAT 'Сообщение для SMS не должно превышать 142 символа (сейчас ' + length(messageSMS(Dispatch dd)) + ')' IF SETCHANGED(messageSMS(dd)) AND length(messageSMS(dd)) > 142, '\n' ORDER dd);
CONSTRAINT isSMS(Dispatch d) AND NOT messageSMS(d)
    MESSAGE 'Не задан текст сообщения SMS';

lifetime 'Срок жизни сообщения (сек)' = DATA INTEGER (Dispatch);
CONSTRAINT SETCHANGED(lifetime(Dispatch d)) AND NOT (lifetime(d) >= 120 AND lifetime(d) <= 86400)
    MESSAGE 'Срок жизни сообщения должен быть в диапазоне от 120 до 86400';
image 'Изображение (URL)' = DATA STRING[255] (Dispatch);

caption 'Заголовок' = DATA STRING[20] (Dispatch);
action 'Ссылка (URL)' = DATA STRING[255] (Dispatch);
CONSTRAINT caption(Dispatch d) AND NOT action(d)
    MESSAGE 'Не задана ссылка (URL) для кнопки';
CONSTRAINT action(Dispatch d) AND NOT caption(d)
    MESSAGE 'Не задан заголовок для кнопки';

date 'Дата' = DATA DATE (Dispatch) NONULL;
CONSTRAINT SETCHANGED(date(Dispatch d)) AND date(d) < currentDate()
    MESSAGE 'Дата проведения не должна быть раньше текущей даты';
timeFrom 'Время с' = DATA TIME (Dispatch) NONULL;
timeTo 'Время по' = DATA TIME (Dispatch) NONULL;
CONSTRAINT (SETCHANGED(timeTo(Dispatch d)) OR SETCHANGED (timeFrom(d)))  AND timeTo(d) < timeFrom(d)
    MESSAGE 'Неверный интервал времени проведения ';
CONSTRAINT SETCHANGED(timeFrom(Dispatch d)) AND timeFrom(d) < toTime(toDateTimeFormat('20000101090000','YYYYMMDDHH24MISS'))
    MESSAGE 'Можно использовать только диапазон 09:00:00 - 22:00:00';
CONSTRAINT SETCHANGED(timeTo(Dispatch d)) AND timeTo(d) > toTime(toDateTimeFormat('20000101220000','YYYYMMDDHH24MISS'))
    MESSAGE 'Можно использовать только диапазон 09:00:00 - 22:00:00';

isSend 'Отправлено' = DATA BOOLEAN (Dispatch);

TABLE dispatchDiscountCard (Dispatch, DiscountCard);

in 'Вкл.' = DATA BOOLEAN (Dispatch, DiscountCard);

fillFromSubscriberBase 'Заполнить по базе абонентов' (Dispatch d) {
    DIALOG subscriberBases OBJECTS b INPUT DO {
        in(d, DiscountCard c) <- in(b,c);
    }
} TOOLBAR;

FORM dispatch 'Рассылка'
    OBJECTS d = Dispatch PANEL
    PROPERTIES(d) isSend, name, nameCommunicationChannel, date, timeFrom, timeTo
    PROPERTIES(d) SHOWIF isViber(d) messageViber, lengthMessageViber READONLY, lifetime, image, caption, action
    PROPERTIES(d) SHOWIF isSMS(d) messageSMS, lengthMessageSMS READONLY
    
    OBJECTS c = DiscountCard
    PROPERTIES(d,c) in
    PROPERTIES(c) READONLY number, phoneLegalEntity, firstNameContact, lastNameContact, nameDiscountCardType, date
    PROPERTIES(d) DRAW c fillFromSubscriberBase
    FILTERGROUP include FILTER 'Включенные' in(d,c)
    
    EDIT Dispatch OBJECT d
;

DESIGN dispatch {
    GROUP(,d) {
        lines = 1;
        type = CONTAINERV;
        MOVE PROPERTY(isSend(d));
        MOVE PROPERTY(name(d));
        NEW types {
            type = CONTAINERH;
            MOVE PROPERTY(nameCommunicationChannel(d));
        }
        NEW date {
            type = CONTAINERH;
            caption = 'Дата проведения';
            MOVE PROPERTY(date(d));
            MOVE PROPERTY(timeFrom(d));
            MOVE PROPERTY(timeTo(d));
        }
        NEW data {
            type = CONTAINERV;
            NEW viber {
                type = CONTAINERV;
                caption = 'Viber';
                MOVE PROPERTY(messageViber(d));
                MOVE PROPERTY(lengthMessageViber(d));
                MOVE PROPERTY(lifetime(d));
                MOVE PROPERTY(image(d));
                MOVE PROPERTY(caption(d));
                MOVE PROPERTY(action(d));
            }
            NEW sms {
                caption = 'SMS';
                MOVE PROPERTY(messageSMS(d)) {
                    charWidth = 55;
                };
                MOVE PROPERTY(lengthMessageSMS(d));
                fill = 1;
            }
        }
    }
}

//--------------- Oшибки --------------
CLASS DispatchError 'Ошибка рассылки';
TABLE dispatchError (DispatchError);

code 'Код' = DATA STRING[100] (DispatchError);
message 'Ошибка' = DATA STRING[255] (DispatchError);
dateTime 'Время' = DATA DATETIME (DispatchError);

TABLE dispatchDispatchError (Dispatch, DispatchError);
in = DATA BOOLEAN (Dispatch, DispatchError);

//----------------- Статусы ----------------
state 'Код' = DATA STRING[100] (Dispatch, DiscountCard);
name 'Статус' = DATA STRING[255] (Dispatch, DiscountCard);
dateTime 'Время' = DATA DATETIME (Dispatch, DiscountCard);

communicationChannelFilter = DATA LOCAL NESTED CommunicationChannel ();
nameCommunicationChannelFilter 'Канал' () = staticCaption(communicationChannelFilter());
dateFromFilter 'Дата с' () = DATA LOCAL NESTED DATE ();
dateToFilter 'Дата по' () = DATA  LOCAL NESTED DATE ();
phoneFilter 'Телефон' = DATA LOCAL NESTED STRING[100] ();

FORM dispatches 'Рассылки'
    PROPERTIES() nameCommunicationChannelFilter, dateFromFilter, dateToFilter, phoneFilter

    OBJECTS d = Dispatch
    PROPERTIES(d) READONLYIF isReadonly() isSend, name, nameCommunicationChannel, createdTime, date, timeFrom, timeTo, lifetime, messageViber, messageSMS
    PROPERTIES(d) NEWSESSION NEW, EDIT, DELETE
    
    FILTERS communicationChannel(d) == communicationChannelFilter() OR NOT communicationChannelFilter(),
            date(d) >= dateFromFilter() OR NOT dateFromFilter(),
            date(d) <= dateToFilter() OR NOT dateToFilter(),
            (GROUP SUM 1 IF in(d, DiscountCard cc) AND phoneLegalEntity(cc) == phoneFilter()) OR NOT phoneFilter()
    
    OBJECTS c = DiscountCard
    PROPERTIES(c) READONLY phoneLegalEntity
    PROPERTIES(d,c) READONLY state, name, dateTime
    FILTERS in(d,c)
    
    OBJECTS e = DispatchError
    PROPERTIES(e) READONLY code, message, dateTime
    ORDERS dateTime(e) DESC
    FILTERS in(d,e)
    
    LIST Dispatch OBJECT d
;

DESIGN dispatches {
    PROPERTY(messageViber(d)) {valueHeight = 16;}
    PROPERTY(messageSMS(d)) {valueHeight = 16;}
    GROUP() {
        lines = 1;
        type = CONTAINERH;
    }
    OBJECTS {
        NEW tabs {
            type = TABBED;
            fill = 1;
            MOVE BOX(c) {
                caption = 'Статусы';
            }
            MOVE BOX(e) {
                caption = 'Ошибки';
            }
            NEW action {
                caption = 'Действия';
            }
        }
    }
}

EXTEND FORM dispatches
    PROPERTIES() System.isEditable
;
DESIGN dispatches {
    TOOLBARBOX {
        MOVE PROPERTY(isEditable()) BEFORE TOOLBARRIGHT;
    }
}

NAVIGATOR { 
    smsLine {
        NEW dispatches;
    }
}

overReplaceKeys = ABSTRACT TEXT (DiscountCard, TEXT);
replaceKeys (DiscountCard d, TEXT message) = replace(replace(replace((OVERRIDE overReplaceKeys(d,message),message),'[number]',(OVERRIDE seriesNumber(d),'')),'[firstname]',(OVERRIDE firstNameContact(d),'')),'[lastname]',(OVERRIDE lastNameContact(d),''));

textDispatch (Dispatch d) =
//    IF communicationChannel(d) == CommunicationChannel.viber_sms OR communicationChannel(d) == CommunicationChannel.viber_t_sms THEN 
//        TEXT(CONCAT '', '\{',
//                            '"messages": [',
//                                (OVERRIDE (GROUP CONCAT ('\{"msisdn": "' + phoneLegalEntity(DiscountCard c) + '",' + '"text": "' + replace(replaceKeys(c,messageViber(d)),'\n','\\n') + '",' + '"external_id": "' + LONG(d) + '_' + LONG(c) +'"\}') IF in(d,c),',' ORDER c),''),
//                            '],',
//                            '"channels": [\{',
//                                '"target": "' + nameNumberService1(communicationChannel(d)) + '",',
//                                //'"text": "' + replace((messageViber(d)),'\n','\\n') + '",',
//                                '"callback_url": "' + urlSMSLineCallback() + '",',
//                                '"options": \{',
//                                    (CONCAT ',', '"ttl": ' + lifetime(d), '"img": "' + image(d) + '"', '"caption": "' + caption(d) + '"', '"action": "' + action(d) + '"'),
//                                '\}',
//                            '\},\{"target": "' + nameNumberService2(communicationChannel(d)) + '"\}]',
//                         '\}')
//        TEXT(CONCAT '', '\{',
//                            '"messages": [',
//                                (OVERRIDE (GROUP CONCAT (CONCAT '',
//                                    '\{',
//                                        '"msisdn": "' + phoneLegalEntity(DiscountCard c) + '",',
//                                        '"external_id": "' + LONG(d) + '_' + LONG(c) +'",',
//                                        '"channels": [',
//                                            '\{',
//                                                '"target": "' + nameNumberService1(communicationChannel(d)) + '",',
//                                                '"text": "' + replace(replaceKeys(c,messageViber(d)),'\n','\\n') + '",',
//                                                '"callback_url": "' + urlSMSLineCallback() + '",',
//                                                '"options": \{',
//                                                    (CONCAT ',', '"ttl": ' + lifetime(d), '"img": "' + image(d) + '"', '"caption": "' + caption(d) + '"', '"action": "' + action(d) + '"'),
//                                                '\}',
//                                            '\},',
//                                            '\{',
//                                                '"target": "' + nameNumberService2(communicationChannel(d)) + '",',
//                                                '"text": "' + replace(replaceKeys(c,messageSMS(d)),'\n','\\n') + '",',
//                                                '"callback_url": "' + urlSMSLineCallback() + '"',
//                                            '\}',
//                                        ']',
//                                    '\}'
//                                ) IF in(d,c),',' ORDER c ),''),
//                            ']',
//                         '\}')
//    ELSE 
        TEXT(CONCAT '', '\{',
                            '"target": "' + nameNumberService1(communicationChannel(d)) + '",',
                            //'"text": "' + replace((IF isSMS(d) THEN messageSMS(d) ELSE messageViber(d)),'\n','\\n') + '",',
                            '"messages": [',
                                (OVERRIDE (GROUP CONCAT ('\{"msisdn": "' + phoneLegalEntity(DiscountCard c) + '",' + '"text": "' + replace(replaceKeys(c,(IF isSMS(d) THEN messageSMS(d) ELSE messageViber(d))),'\n','\\n') + '",' + '"external_id": "' + TEXT(d) + '_' + TEXT(c) +'"\}') IF in(d,c),',' ORDER c),''),
                            '],',
                            '"callback_url": "' + urlSMSLineCallback() + '",',
                            '"options": \{',
                                (CONCAT ',', '"ttl": ' + lifetime(d), '"img": "' + image(d) + '"', '"caption": "' + caption(d) + '"', '"action": "' + action(d) + '"'),
                            '\}',
                         '\}');

textDispatch (Dispatch d, DiscountCard c) =
    TEXT(CONCAT '', '\{',
                        '"msisdn": "' + phoneLegalEntity(c) + '",',
                        '"external_id": "' + TEXT(getID(d)) + '_' + TEXT(getID(c)) +'",',
                        '"callback_url": "' + urlSMSLineCallback() + '",',
                        '"channels": [',
                            '\{',
                                '"target": "' + nameNumberService1(communicationChannel(d)) + '",',
                                '"text": "' + replace(replaceKeys(c,messageViber(d)),'\n','\\n') + '",',
                                '"options": \{',
                                    (CONCAT ',', '"ttl": ' + lifetime(d), '"img": "' + image(d) + '"', '"caption": "' + caption(d) + '"', '"action": "' + action(d) + '"'),
                                '\}',
                            '\},',
                            '\{',
                                '"target": "' + nameNumberService2(communicationChannel(d)) + '",',
                                '"text": "' + replace(replaceKeys(c,messageSMS(d)),'\n','\\n') + '"',
                            '\}',
                        ']',
                    '\}');

GROUP error;
code = DATA LOCAL STRING[100]();
message = DATA LOCAL STRING[255]();

FORM importError
    PROPERTIES() IN error code, message
;

GROUP state;
external_id = DATA LOCAL STRING[255](INTEGER);
msisdn = DATA LOCAL STRING[100](INTEGER);
state = DATA LOCAL STRING[100](INTEGER);
name = DATA LOCAL STRING[255](INTEGER);
date_time = DATA LOCAL DATETIME(INTEGER);
code = DATA LOCAL STRING[100](INTEGER);
message = DATA LOCAL STRING[255](INTEGER);

FORM importMessages
    OBJECTS messages = INTEGER
    PROPERTIES(messages) external_id, msisdn
    PROPERTIES(messages) IN state state, name, date_time
    PROPERTIES(messages) IN error code, message
;

external_id = DATA LOCAL STRING[255]();
state = DATA LOCAL STRING[100]();
name = DATA LOCAL STRING[255]();
date_time = DATA LOCAL DATETIME();

FORM importMessage
    PROPERTIES() external_id
    PROPERTIES() IN state state, name, date_time
;

hashing (TEXT text, TEXT key, TEXT type1, TEXT type2) = FORMULA TEXT PG 'encode(hmac($1,$2,$3),$4)';

signature = DATA LOCAL NESTED TEXT();
createSignature 'Создать подпись' (Dispatch d) {
    signature() <- NULL;
    LOCAL text = TEXT ();
    text() <- replace(url(communicationChannel(d)),'/','') + textDispatch(d);
    signature() <- hashing(text(), TEXT(passwordAPISMSLine()), TEXT('sha256'), TEXT('hex'));
}

createSignature 'Создать подпись' (Dispatch d, DiscountCard c) {
    signature() <- NULL;
    LOCAL text = TEXT ();
    text() <- replace(url(communicationChannel(d)),'/','') + textDispatch(d,c);
    signature() <- hashing(text(), TEXT(passwordAPISMSLine()), TEXT('sha256'), TEXT('hex'));
}

httpHeaders(TEXT name) = CASE
    WHEN name == 'Authorization-User' THEN TEXT(usernameSMSLine())
    WHEN name == 'Authorization' THEN TEXT('Bearer ' + signature());

sendDispatch 'Отправить рассылку' (Dispatch d) {
    IF NOT isSend(d) THEN {
        LOCAL file = TEXT();
        LOCAL result = FILE();
        
            IF isMulti(d) THEN {
                isSend(d) <- TRUE;
                FOR in(d, DiscountCard c) AND phoneLegalEntity(c) DO {
                    TRY {
                        file() <- textDispatch(d,c);
                        stringToFile(file(),'UTF-8','json');
                        createSignature(d,c);
                        logToFile('SMSLine', 'POST:' + 'https://' + urlSMSLine() + '/v3' + url(communicationChannel(d)) + '\n' + file());
                        
                        EXTERNAL HTTP POST 'https://' + urlSMSLine() + '/v3' + url(communicationChannel(d)) HEADERS httpHeaders PARAMS resultFile() TO result;
                        logToFile('SMSLine', result());
                        
                        external_id(INTEGER i) <- NULL;
                        msisdn(INTEGER i) <- NULL;
                        state(INTEGER i) <- NULL;
                        name(INTEGER i) <- NULL;
                        date_time(INTEGER i) <- NULL;
                        code(INTEGER i) <- NULL;
                        message(INTEGER i) <- NULL;
                        
                        IMPORT importMessages JSON FROM result();
                        
                        IF code(0) AND message(0) THEN {
                            state(d,c) <- code(0);
                            name(d,c) <- message(0);
                            dateTime(d,c) <- currentDateTime();
                        }
                        FOR DiscountCard dc == [GROUP MAX DiscountCard cc IF phoneLegalEntity(cc) == msisdn(INTEGER j) AND in(d,cc) BY j](INTEGER i) DO {
                            state(d,dc) <- state(i);
                            name(d,dc) <- name(i);
                            dateTime(d,dc) <- date_time(i);
                        }
                    } CATCH {
                        code() <- NULL;
                        message() <- NULL;
                        
                        logToFile('SMSLine', messageCaughtException());
                        logToFile('SMSLine', result());
                        IMPORT importError JSON FROM result();
                        IF code() THEN NEW e = DispatchError {
                            state(d,c) <- code();
                            name(d,c) <- message();
                            dateTime(d,c) <- currentDateTime();
                            code(e) <- code();
                            message(e) <- message();
                            dateTime(e) <- currentDateTime();
                            in(d,e) <- TRUE;
                        }
                    }
                }
            } ELSE {
                TRY {
                    file() <- textDispatch(d);
                    stringToFile(file(),'UTF-8','json');
                    createSignature(d);
                    logToFile('SMSLine', 'POST:' + 'https://' + urlSMSLine() + '/v3' + url(communicationChannel(d)) + '\n' + file());
                    
                    EXTERNAL HTTP POST 'https://' + urlSMSLine() + '/v3' + url(communicationChannel(d)) HEADERS httpHeaders PARAMS resultFile() TO result;
                    logToFile('SMSLine', result());
                    
                    external_id(INTEGER i) <- NULL;
                    msisdn(INTEGER i) <- NULL;
                    state(INTEGER i) <- NULL;
                    name(INTEGER i) <- NULL;
                    date_time(INTEGER i) <- NULL;
                    code(INTEGER i) <- NULL;
                    message(INTEGER i) <- NULL;
                    
                    IMPORT importMessages JSON FROM result();
                    
                    IF code(0) AND message(0) THEN {
                        FOR in(d, DiscountCard c) DO {
                            state(d,c) <- code(0);
                            name(d,c) <- message(0);
                            dateTime(d,c) <- currentDateTime();
                        }
                    }
                    FOR DiscountCard dc == [GROUP MAX DiscountCard c IF phoneLegalEntity(c) == msisdn(INTEGER j) AND in(d,c) BY j](INTEGER i) DO {
                        state(d,dc) <- state(i);
                        name(d,dc) <- name(i);
                        dateTime(d,dc) <- date_time(i);
                    }
                    isSend(d) <- TRUE;
                } CATCH {
                    code() <- NULL;
                    message() <- NULL;
                    
                    logToFile('SMSLine', messageCaughtException());
                    logToFile('SMSLine', result());
                    IMPORT importError JSON FROM result();
                    IF code() THEN NEW e = DispatchError {
                        code(e) <- code();
                        message(e) <- message();
                        dateTime(e) <- currentDateTime();
                        in(d,e) <- TRUE;
                    }
                }
            }
        APPLY;  
    }
}

sendDispatch 'Отправить рассылки (по времени)' () {
    FOR NOT isSend(Dispatch d) AND date(d) == currentDate() AND currentTime() >= timeFrom(d) AND currentTime() <= timeTo(d) DO {
        sendDispatch(d);
    }
}

EXTEND FORM dispatches
    PROPERTIES(d) sendDispatch TOOLBAR SHOWIF NOT isSend(d)
    PROPERTIES sendDispatch() TOOLBAR DRAW d
;

getStatus (FILE file) {
    fileToString(file, 'UTF-8');
    logToFile('SMSLine', 'CALLBACK: ' + resultString());
    external_id() <- NULL;
    state() <- NULL;
    name() <- NULL;
    date_time() <- NULL;
    IMPORT importMessage JSON FROM file;
    FOR Dispatch dd IS Dispatch AND getID(dd) == LONG(getWord(external_id(),'_',1)) AND DiscountCard dc IS DiscountCard AND getID(dc) == LONG(getWord(external_id(),'_',2)) DO {
        state(dd,dc) <- state();
        name(dd,dc) <- name();
        dateTime(dd,dc) <- date_time();
    }
    APPLY NESTED(external_id[]);
    logToFile('SMSLine', 'END: ' + external_id());
}

//toDateFormat = FORMULA TEXT 'to_char(($1),($2))';
//
//getStatus 'Получить статусы' (DATE dFrom, DATE dTo) {
//   
//    LOCAL result = FILE();
//    EXTERNAL HTTP 'https://' + usernameSMSLine() + ':' + passwordAPISMSLine() + '@' + urlSMSLine() + '/log?start_date=' + toDateFormat(dFrom,'YYYY-MM-DD') + '&end_date=' + toDateFormat(dTo,'YYYY-MM-DD') TO result;
//    
//    LOCAL msisdn = STRING[12] (INTEGER);
//    LOCAL target = STRING[20] (INTEGER);
//    LOCAL text = TEXT (INTEGER);
//    LOCAL message_state = STRING[100] (INTEGER);
//    LOCAL dateTime = STRING[19] (INTEGER);
//    
//    IMPORT JSON FROM result() TO msisdn = msisdn, target = target, text = text, message_state = message_state, dateTime = dateTime;
//    
//    FOR imported(INTEGER i) AND phoneLegalEntity(DiscountCard dc) == msisdn(i) AND nameNumberService(Dispatch dd) == target(i) AND (messageSMS(dd) == text(i) OR messageViber(dd) == text(i)) DO {
//        state(dd,dc) <- message_state(i);
//        dateTime(dd,dc) <- toDateTimeFormat(dateTime(i),'YYY-MM-DD HH:MM:SS');
//    }
//    
//    open(result());
//}
//
//EXTEND FORM integrationData
//    OBJECTS dates = (dfs = DATE,dts = DATE) PANEL
//    PROPERTIES 'Дата с' = VALUE(dfs), 'Дата по' = VALUE(dts)
//    PROPERTIES(dfs,dts) getStatus
//;
//DESIGN integrationData {
//    smsLine {
//        MOVE BOX(dates);
//    }
//}

CLASS DispatchTemplate 'Шаблон рассылки';
TABLE dispatchTemplate (DispatchTemplate);

@defineExternalizable(dispatchTemplate, STRING[100]);

useTransaction 'Использовать транзакционный канал' = DATA BOOLEAN (DispatchTemplate);

messageViber 'Текст сообщения Viber' = DATA TEXT (DispatchTemplate);
lengthMessageViber 'К-во символов' (DispatchTemplate d) = length (messageViber(d));
//CONSTRAINT SETCHANGED(messageViber(DispatchTemplate d)) AND length(messageViber(d)) > 1000
//    MESSAGE (GROUP CONCAT 'Сообщение для Viber не должно превышать 1000 символов (сейчас ' + length(messageViber(DispatchTemplate dd)) + ')' IF SETCHANGED(messageViber(dd)) AND length(messageViber(dd)) > 1000, '\n' ORDER dd);
messageSMS 'Текст сообщения SMS' = DATA TEXT (DispatchTemplate);
lengthMessageSMS 'К-во символов' (DispatchTemplate d) = length (messageSMS(d));
//CONSTRAINT SETCHANGED(messageSMS(DispatchTemplate d)) AND length(messageSMS(d)) > 142
//    MESSAGE (GROUP CONCAT 'Сообщение для SMS не должно превышать 142 символа (сейчас ' + length(messageSMS(DispatchTemplate dd)) + ')' IF SETCHANGED(messageSMS(dd)) AND length(messageSMS(dd)) > 142, '\n' ORDER dd);

lifetime 'Срок жизни сообщения (сек)' = DATA INTEGER (DispatchTemplate);
CONSTRAINT SETCHANGED(lifetime(DispatchTemplate d)) AND NOT (lifetime(d) >= 120 AND lifetime(d) <= 86400)
    MESSAGE 'Срок жизни сообщения должен быть в диапазоне от 120 до 86400';
image 'Изображение (URL)' = DATA STRING[255] (DispatchTemplate);

caption 'Заголовок' = DATA STRING[20] (DispatchTemplate);
action 'Ссылка (URL)' = DATA STRING[255] (DispatchTemplate);
CONSTRAINT caption(DispatchTemplate d) AND NOT action(d)
    MESSAGE 'Не задана ссылка (URL) для кнопки';
CONSTRAINT action(DispatchTemplate d) AND NOT caption(d)
    MESSAGE 'Не задан заголовок для кнопки';

timeFrom 'Время с' = DATA TIME (DispatchTemplate);
timeTo 'Время по' = DATA TIME (DispatchTemplate);

FORM dispatchTemplate 'Шаблон рассылки'
    OBJECTS d = DispatchTemplate PANEL
    PROPERTIES(d) id, useTransaction
    PROPERTIES(d) messageViber, lengthMessageViber READONLY, lifetime, image, caption, action, timeFrom, timeTo
    PROPERTIES(d) messageSMS, lengthMessageSMS READONLY
    
    EDIT DispatchTemplate OBJECT d
;

DESIGN dispatchTemplate {
    GROUP(,d) {
        lines = 1;
        type = CONTAINERV;
        MOVE PROPERTY(id(d));
        MOVE PROPERTY(useTransaction(d));
        NEW time {
            type = CONTAINERH;
            caption = 'Время проведения';
            MOVE PROPERTY(timeFrom(d));
            MOVE PROPERTY(timeTo(d));
        }
        NEW viber {
            type = CONTAINERV;
            caption = 'Viber';
            MOVE PROPERTY(messageViber(d));
            MOVE PROPERTY(lengthMessageViber(d));
            MOVE PROPERTY(lifetime(d));
            MOVE PROPERTY(image(d));
            MOVE PROPERTY(caption(d));
            MOVE PROPERTY(action(d));
        }
        NEW sms {
            caption = 'SMS';
            MOVE PROPERTY(messageSMS(d)) {
                charWidth = 55;
            };
            MOVE PROPERTY(lengthMessageSMS(d));
            fill = 1;
        }
    }
}

FORM dispatchTemplates 'Шаблоны рассылки'
    OBJECTS d = DispatchTemplate
    PROPERTIES(d) READONLY id, useTransaction, messageViber, lifetime, image, caption, action, messageSMS, timeFrom, timeTo
    PROPERTIES(d) NEWSESSION NEW, EDIT, DELETE
    
    LIST DispatchTemplate OBJECT d
;
DESIGN dispatchTemplates {
    PROPERTY(messageViber(d)) {valueHeight = 16;}
    PROPERTY(messageSMS(d)) {valueHeight = 16;}
}

NAVIGATOR { 
    smsLine {
        NEW dispatchTemplates BEFORE dispatches;
    }
}