MODULE DatabaseTools;

REQUIRE Tools, Reflection, SQLUtils, LogTools;

NAMESPACE Tools;

@defineLogRotate(databaseTools, 5, weekly,'database-tools');

CLASS ABSTRACT DatabaseTable 'Tаблица';
EXTEND CLASS Table: DatabaseTable;

CLASS PgTable 'Системная таблица' : DatabaseTable;
TABLE pgTable(PgTable);
sid '{reflection.sid.table}' = DATA ISTRING[100] (PgTable);
sid '{reflection.sid.table}' (DatabaseTable t) = MULTI sid[Table](t), sid[PgTable](t);
table '{reflection.table}' = GROUP MAX DatabaseTable table BY sid (table);

dataSize 'Размер данных (МБ)' = DATA NUMERIC[15,3](Table);
dataSize 'Размер данных (МБ)' = DATA NUMERIC[15,3](PgTable);
dataSize 'Размер данных (МБ)' (DatabaseTable t) = MULTI dataSize[Table](t), dataSize[PgTable](t);

indexSize 'Размер индексов (МБ)' = DATA NUMERIC[15,3](Table);
indexSize 'Размер индексов (МБ)' = DATA NUMERIC[15,3](PgTable);
indexSize 'Размер индексов (МБ)' (DatabaseTable t) = MULTI indexSize[Table](t), indexSize[PgTable](t);

curDataSize 'Тек. размер данных (МБ)' = DATA LOCAL NESTED NUMERIC[15,3](DatabaseTable);
curIndexSize 'Тек. размер индексов (МБ)' = DATA LOCAL NESTED NUMERIC[15,3](DatabaseTable);
curRows 'Тек. количество записей' = DATA LOCAL NESTED LONG (Table);

deleteIndexes 'Удалять индексы при упаковке' = DATA BOOLEAN (Table);
large 'Большая таблица' = DATA BOOLEAN (Table);

CLASS Index 'Индекс';

table 'Таблица' = DATA Table (Index) NONULL DELETE INDEXED;
sidTable 'Таблица' (Index i) = sid(table(i)) CHARWIDTH 10;

name 'Наименование' = DATA STRING (Index);
index = GROUP AGGR Index x BY name(x);

tablespace 'Tablespace' = DATA STRING (Index);
definition 'Скрипт' = DATA STRING (Index);
isConstraint 'Constraint' = DATA BOOLEAN (Index);
indexSize 'Размер' = DATA LONG (Index);
indexScans 'Сканирований' = DATA LONG (Index);
indexReads 'Считано' = DATA LONG (Index);

relid 'OID индекса' = DATA LONG (Index);
indisvalid 'Активный' = DATA BOOLEAN (Index);

efficiency 'Эффективность' (Index i) = 100.0 * indexReads(i) / indexScans(i) / curRows(table(i));

getIndexes 'Получить список индексов'(Table t) {
    NEWSESSION {
        LOCAL is = BOOLEAN (Index);
        
        INTERNAL DB 'SELECT indexname, tablespace, indexdef, pg_get_constraintdef(c.oid), pg_relation_size(psai.indexrelid), psai.idx_scan, psai.idx_tup_read, ind.indexrelid, ind.indisvalid from pg_indexes i left join pg_constraint c ON i.indexname = c.conname left join pg_stat_all_indexes psai on i.indexname = psai.indexrelname left join pg_index ind on ind.indexrelid = psai.indexrelid WHERE tablename = $1' 
            PARAMS lower(sid(t))
            TO file;
            
        IMPORT TABLE FROM file() FIELDS STRING indexName, STRING tablespace NULL, STRING definition, STRING constraint, LONG indexSize, LONG indexScans, LONG indexReads, LONG relid, BOOLEAN indisvalid NULL DO {
            IF NOT index(indexName) THEN NEW i = Index {
                name(i) <- indexName;
            }
            FOR name(Index i) == indexName DO {
                table(i) <- t;
                tablespace(i) <- tablespace;
                definition(i) <- definition;
                isConstraint(i) <- TRUE IF constraint != '';
                indexSize(i) <- indexSize;
                indexScans(i) <- indexScans;
                indexReads(i) <- indexReads;
                relid(i) <- relid;
                indisvalid(i) <- indisvalid;
                is(i) <- TRUE;
            }
        }
        
        DELETE Index i WHERE table(i) == t AND NOT is(i);
        
        APPLY;
        
    }
}

invalidate 'Отключить' (Index i) {
    IF relid(i) > 0 THEN {
        INTERNAL DB 'UPDATE pg_index SET indisvalid = false WHERE indexrelid = $1' 
            PARAMS relid(i);
        getIndexes(table(i));
    }
}

validate 'Включить' (Index i) {
    IF relid(i) > 0 THEN {
        INTERNAL DB 'UPDATE pg_index SET indisvalid = true WHERE indexrelid = $1' 
            PARAMS relid(i);
        getIndexes(table(i));
    }
}

dropIndexes 'Удалить индексы' (Table t) {
    logToFile('database-tools', 'start - DROP INDEXES');
    runSQL(CONCAT '\n',
        ('ALTER TABLE ' + lower(sid(t)) + (GROUP CONCAT (' DROP CONSTRAINT ' + name(Index i)) IF isConstraint(i) AND table(i) == t, '\n' ORDER i) + ';'),
        (GROUP CONCAT ('DROP INDEX ' + name(Index i)) IF NOT isConstraint(i) AND table(i) == t, ';\n' ORDER i)
    );
}


dataCountTreads = DATA INTEGER ();
countTreads 'Количество потоков'() = OVERRIDE dataCountTreads(), 4;

createIndexes 'Создать индексы' (Table t) {
    NEWEXECUTOR 
        FOR table(Index i) == t DO 
            NEWTHREAD NEWSESSION NEWSQL {
                TRY {
                    logToFile('database-tools', 'start - ' + definition(i));
                    runSQL(definition(i)); 
                } CATCH {
                    logToFile('database-tools', (CONCAT '', 'error - ' + definition(i) + ': \n', messageCaughtException() ));
                }
                logToFile('database-tools', 'end - ' + definition(i) );
            } 
	THREADS countTreads();
    
    FOR isConstraint(Index i) AND table(i) == t DO {
        TRY {
            logToFile('database-tools', 'start - ADD CONSTRAINT  '+ name(i) );
            //пока полагаемся что у нас только PRIMARY KEY иначе нужно будет проверять что pg_get_constraintdef
            runSQL('ALTER TABLE ' + lower(sid(t)) + ' ADD CONSTRAINT ' + name(i) + ' PRIMARY KEY USING INDEX ' + name(i)); 
        } CATCH {
            logToFile('database-tools', (CONCAT '', 'error - ADD CONSTRAINT ' + name(i) + ': \n', messageCaughtException() ));
        }
        logToFile('database-tools', 'end - ADD CONSTRAINT  '+ name(i));
    } 
}

//REINDEX CONCURRENTLY вешает Lock virtualxid и ждет пока завершатся ВСЕ запросы в базе запущенные раньше этого момента
//https://www.postgresql.org/message-id/1878.1481823217%40sss.pgh.pa.us
//что может приводить к большому времени ожидания завершения опраци если есть длинные запросы
//поэтому на небольших индексах лучше на несколько секунд заблокировать все запросы к таблице чем REINDEX на долгое время
reindexConcurrentlySize 'REINDEX CONCURRENTLY свыше (МБ)' = DATA NUMERIC[15,3] ();

skipExceptions 'Пропускать ошибки' = DATA BOOLEAN ();
stopAfter 'Не запускать после' = DATA TIME();

runAndLogSQL(STRING command) {
    logToFile('database-tools', 'start - ' + command);
    IF skipExceptions() THEN {
        TRY {
            runSQL(command);
        } CATCH {
            logToFile('database-tools', (CONCAT '\n', messageCaughtException(), javaStackTraceCaughtException(), lsfStackTraceCaughtException()));
        }
    } ELSE 
        runSQL(command);
    logToFile('database-tools', 'end - ' + command);
}

reindex 'REINDEX' (Index i) {
    runAndLogSQL('REINDEX INDEX ' + (IF indexSize(i)/1024/1024.0 > reindexConcurrentlySize() THEN 'CONCURRENTLY ' ELSE '') + name(i));
}

reindex 'REINDEX' (Table t) {
    CASE WHEN deleteIndexes(t) THEN {
        getIndexes(t);
        dropIndexes(t);
        createIndexes(t);
    } WHEN large(t) THEN {
        getIndexes(t);
        FOR table(Index i) == t ORDER indexSize(i) DO {
            reindex(i);
        }
    } ELSE {
        runAndLogSQL('REINDEX TABLE ' + (IF indexSize(t) > reindexConcurrentlySize() THEN 'CONCURRENTLY ' ELSE '') + sid(t));
    }
    NEWSESSION {
        indexSize(t) <- [FORMULA NUMERIC[15,3] 'pg_indexes_size($1) /1024/1024.0'](lower(sid(t)));
        APPLY;
    }
} ASON CONTEXTMENU sid[DatabaseTable];

vacuumSysTab  ABSTRACT (INTEGER, STRING);
vacuumSysTab (INTEGER count, STRING table) + {
    TRY {
        runSQL('VACUUM FULL ' + table);
    } CATCH {
        IF count > 2 THEN {
            MESSAGE 'Error while vacuum table ' + table + '. See database-tools.log for details.' NOWAIT;
            logToFile('database-tools', CONCAT '\n', 'VACUUM SYSTEM TABLES ERROR:', messageCaughtException(), lsfStackTraceCaughtException(), javaStackTraceCaughtException());
            RETURN;
        } ELSE {
            vacuumSysTab(count + 1, table);
        }  
    }
}

vacuum 'VACUUM FULL' (DatabaseTable t) {
    IF deleteIndexes(t) THEN {
        getIndexes(t);
        dropIndexes(t);
    }
    IF t IS PgTable THEN {
        logToFile('database-tools', 'start - VACUUM SYS FULL ' + sid(t) );
        vacuumSysTab(0, sid(t));
        logToFile('database-tools', 'end - VACUUM SYS FULL ' + sid(t));
    } ELSE {
        runAndLogSQL('VACUUM FULL ' + sid(t));
    }
    IF deleteIndexes(t) THEN {
        createIndexes(t);
    }    
    NEWSESSION {
        dataSize(t) <- [FORMULA NUMERIC[15,3] 'pg_table_size($1) /1024/1024.0'](lower(sid(t)));
        indexSize(t) <- [FORMULA NUMERIC[15,3] 'pg_indexes_size($1) /1024/1024.0'](lower(sid(t)));
        APPLY;
    }
} ASON CONTEXTMENU sid[DatabaseTable];

loadCurSize 'Заполнить размеры таблиц'(){
    INTERNAL DB 'SELECT tablename, CAST(pg_table_size(tablename::regclass)/1024/1024.0 AS numeric(15,3)) AS t_size, ' +
             'CAST(pg_indexes_size(tablename::regclass) /1024/1024.0 AS numeric(15,3)) AS i_size FROM pg_tables WHERE schemaname = \'public\''
        TO file;
    
    IMPORT TABLE FROM file() FIELDS STRING[100] table, NUMERIC[15,3] t_size, NUMERIC[15,3] i_size DO {
        curDataSize(Table t) <- t_size WHERE lower(sid(t)) == table;
        curIndexSize(Table t) <- i_size WHERE lower(sid(t)) == table;
    }
}

loadSystemCurSize 'Заполнить размеры системных таблиц'(){

    IF NOT (GROUP SUM 1 IF PgTable t IS PgTable) THEN NEWSESSION {
        INTERNAL DB 'SELECT tablename FROM pg_tables WHERE schemaname = \'pg_catalog\''
            TO file;
            
        IMPORT TABLE FROM file() FIELDS STRING[100] table DO {
            IF NOT table(table) THEN {
                NEW t = PgTable {
                    sid(t) <- table;
                    curDataSize(t) <- 5000;
                    curIndexSize(t) <- 5000;
                }
            }
        }
        APPLY;
    }

    INTERNAL DB 'SELECT tablename, CAST(pg_table_size(tablename::regclass)/1024/1024.0 AS numeric(15,3)) AS t_size, ' +
             'CAST(pg_indexes_size(tablename::regclass) /1024/1024.0 AS numeric(15,3)) AS i_size FROM pg_tables WHERE schemaname = \'pg_catalog\''
        TO file;
    
    IMPORT TABLE FROM file() FIELDS STRING[100] table, NUMERIC[15,3] t_size, NUMERIC[15,3] i_size DO {
        curDataSize(PgTable t) <- t_size WHERE lower(sid(t)) == table;
        curIndexSize(PgTable t) <- i_size WHERE lower(sid(t)) == table;
    }
}

grow = [NUMERIC[12,3](OVERRIDE (((OVERRIDE A, 0.001)-(OVERRIDE B, 0.001))/(MAX B, 0.001)), 0.0)](a,b);
dataVacuumCoeff = DATA NUMERIC[5,2]();
vacuumCoeff 'Коэффициент роста' () = OVERRIDE dataVacuumCoeff(), 0.1;
dataVacuumSize = DATA NUMERIC[5,2]();
vacuumSize 'Минимальный размер (МБ)' () = OVERRIDE dataVacuumSize(), 1.0;

dataGrow(DatabaseTable t) = grow(curDataSize(t), dataSize(t));
needVacuum(DatabaseTable t) = dataGrow(t) > vacuumCoeff() AND curDataSize(t) + curIndexSize(t) > vacuumSize() AND NOT large(t);
backgroundData(DatabaseTable t) = IF needVacuum(t) THEN RGB (255, 80, 80) ELSE RGB (255, 179, 179);

indexGrow(DatabaseTable t) = grow(curIndexSize(t), indexSize(t));
needReindex(DatabaseTable t) = indexGrow(t) > vacuumCoeff() AND curDataSize(t) + curIndexSize(t) > vacuumSize();
backgroundIndex(DatabaseTable t) = IF needReindex(t) THEN RGB (255, 80, 169) ELSE RGB (255, 179, 217);

CLASS VacuumOrderType 'Сортировка'{
    totalSize 'По возрастанию размера',
    growSizeDesc 'По убыванию прироста'
};
TABLE vacuumOrderType (VacuumOrderType);

name 'Наименование' (VacuumOrderType o) = staticCaption(o) IF o IS VacuumOrderType CHARWIDTH 15;

FORM dialogVacuumOrderTypes 'Сортировка'
    OBJECTS o = VacuumOrderType
    PROPERTIES(o) READONLY name
    
    LIST VacuumOrderType OBJECT o
;
dataVacuumOrderType = DATA VacuumOrderType();
vacuumOrderType() = OVERRIDE dataVacuumOrderType(), VacuumOrderType.totalSize;
nameVacuumOrderType 'Сортировка'() = name(vacuumOrderType());

vacuumOrder(DatabaseTable t) = CASE 
    WHEN vacuumOrderType() == VacuumOrderType.totalSize THEN curDataSize(t) (+) curIndexSize(t)
    WHEN vacuumOrderType() == VacuumOrderType.growSizeDesc THEN (dataSize(t) (-) curDataSize(t)) (+) (indexSize(t) (-) curIndexSize(t))
    ;

smartVacuum 'Smart VACUUM'(BOOLEAN pgOnly) {
    logToFile('database-tools', 'Smart VACUUM - starting');
    
    IF NOT pgOnly THEN loadCurSize();
    loadSystemCurSize();

    EXPORT CSV '|' HEADER 
        FROM sid(DatabaseTable t), vacuumOrder(t), skipVacuum(t), dataSize(t), curDataSize(t), dataGrow(t), indexSize(t), curIndexSize(t), indexGrow(t)
        WHERE  (curDataSize(t) AND NOT curDataSize(t) >= dataSize(t)) OR (curIndexSize(t) AND NOT curIndexSize(t) >= indexSize(t)) TO file;
            
    IF file() THEN {
        logToFile('database-tools', 'Smart VACUUM - new stat for externaly shrinked tables:');
        logToFile('database-tools', file());
        NEWSESSION NESTED LOCAL {
            dataSize(DatabaseTable t) <- curDataSize(t) WHERE curDataSize(t) AND NOT curDataSize(t) >= dataSize(t);
            indexSize(DatabaseTable t) <- curIndexSize(t) WHERE curIndexSize(t) AND NOT curIndexSize(t) >= indexSize(t);
            APPLY NESTED LOCAL;
        }
    }
    
    EXPORT CSV '|' HEADER 
        FROM sid(DatabaseTable t), vacuumOrder(t), skipVacuum(t), dataSize(t), curDataSize(t), dataGrow(t), indexSize(t), curIndexSize(t), indexGrow(t)
        WHERE curDataSize(t) AND (needVacuum(t) OR needReindex(t)) ORDER vacuumOrder(t), t TO file;
    IF file() THEN {
        logToFile('database-tools', 'Smart VACUUM - plan for today:');
        logToFile('database-tools', file());
    }
    
    FOR curDataSize(DatabaseTable t)  AND NOT skipVacuum(t) AND (needVacuum(t) OR needReindex(t)) ORDER vacuumOrder(t), t DO {
        IF needVacuum(t) OR t IS PgTable THEN {
            vacuum(t);
        } ELSE {
            reindex(t);
        }
        IF currentTime() > stopAfter() AND currentTime() < 20:00 THEN {
            logToFile('database-tools', 'Stopped after deadline');
            BREAK;
        }
    }
    
    logToFile('database-tools', 'Smart VACUUM - ended');
}
smartVacuum 'Smart VACUUM'(){
    smartVacuum(NULL); 
} 

//статистика
CLASS StatisticGrowType 'Вид роста статистики'{
    proportional 'Пропорционально',
    fixed 'Не изменяется'
}
targetStatistic 'Фикс. количество записей' = DATA INTEGER (Table);

dataStatisticGrowType = DATA StatisticGrowType (TableKey);
statisticGrowType(TableKey tk) = OVERRIDE dataStatisticGrowType (tk), StatisticGrowType.proportional;
nameStatisticGrowType 'Вид роста статистики' (TableKey tk) = staticCaption(statisticGrowType(tk)) CHARWIDTH 20;

dataStatisticGrowType = DATA StatisticGrowType (TableColumn);
statisticGrowType(TableColumn tc) = OVERRIDE dataStatisticGrowType (tc), StatisticGrowType.proportional;
nameStatisticGrowType 'Вид роста статистики' (TableColumn tc) = staticCaption(statisticGrowType(tc)) CHARWIDTH 20;

recalculateStatsQ 'Пересчет статистики (быстрый)' (Table t) {
    NEWSESSION {
        
        LOCAL quantityTopNew  = INTEGER (TableKey);
        LOCAL quantityNew = INTEGER (TableKey);
        LOCAL quantityTopNew = INTEGER (TableColumn);
        LOCAL quantityNew = INTEGER (TableColumn);
        
        IF targetStatistic(t) THEN {
            curRows(t) <- targetStatistic(t);
        } ELSE {
            INTERNAL DB 'ANALYZE ' + lower(sid(t));
            
            curRows(t) <- [FORMULA INTEGER 'SELECT reltuples::BIGINT FROM pg_class WHERE relname =$1'](lower(sid(t)));
            
            INTERNAL DB 'SELECT attname, CAST (1.0-null_frac::numeric(11,10) AS numeric(11,10)) AS noNull, n_distinct::numeric(21,10),' +
                     'array_to_string(most_common_freqs, E\'|\') AS most_common_freqs, CASE WHEN n_distinct = null_frac - 1.0 THEN 1 END AS unique FROM pg_stats WHERE tablename =$1' PARAMS lower(sid(t))
                TO file;
            
            IMPORT TABLE FROM file() FIELDS STRING[100] attname, NUMERIC[11,10] noNull, NUMERIC[21,10] n_distinct, TEXT most_common_freqs, INTEGER unique DO {
                
                LOCAL freq = NUMERIC[11,10](INTEGER );
                freq(INTEGER i) <- NUMERIC[11,10](getWord(most_common_freqs, '|', i)) IF count(i, wordCount(most_common_freqs, '|'));
                
                FOR table(TableKey tk) == t AND lower(name(tk)) == attname DO {
                    quantityNew(tk) <- IF n_distinct >= 0 THEN n_distinct ELSE curRows(t) * -n_distinct;
                    quantityTopNew(tk) <- CASE WHEN (GROUP SUM 1 IF table(TableKey tkk) == t) == 1 OR unique == 1 //количество разновидностей значений == количеству строк
                                                    THEN curRows(t) * noNull 
                                               WHEN (GROUP SUM freq(INTEGER i)) >= noNull * 0.8 
                                                    THEN ((GROUP SUM 1 IF (PARTITION SUM freq( INTEGER i) ORDER i) < noNull * 0.8) (+) 1) / 0.8  ;
                }
                
                FOR table(TableColumn  tc) == t AND lower(sid(tc)) == attname AND NOT return(tc) == 'BOOLEAN' DO {
                    quantityNew(tc) <- IF n_distinct >= 0 THEN n_distinct ELSE curRows(t) * -n_distinct;
                    quantityTopNew(tc) <- CASE WHEN unique == 1 //количество разновидностей значений == количеству строк
                                                    THEN curRows(t) * noNull 
                                               WHEN (GROUP SUM freq(INTEGER i)) >= noNull * 0.8 
                                                    THEN ((GROUP SUM 1 IF (PARTITION SUM freq( INTEGER i) ORDER i) < noNull * 0.8) (+) 1) /0.8  ;
                }
                
                notNullQuantity(Property pt) <- curRows(t) * noNull WHERE tableSID(pt) == sid(t) AND lower(dbName(pt)) == attname;
            }
        }
            
        quantityNew(TableKey tk) <- IF statisticGrowType(tk) == StatisticGrowType.fixed THEN quantity(tk) ELSE NUMERIC[21,10](curRows(t)) / rows(t) * quantity(tk)
            WHERE table(tk) == t AND NOT quantityTopNew(tk);    
        quantityTopNew(TableKey tk) <- IF statisticGrowType(tk) == StatisticGrowType.fixed THEN quantityTop(tk) ELSE NUMERIC[21,10](curRows(t)) / rows(t) * quantityTop(tk)
            WHERE table(tk) == t AND NOT quantityTopNew(tk);
            
        quantityNew(TableColumn tc) <- IF statisticGrowType(tc) == StatisticGrowType.fixed THEN quantity(tc) ELSE NUMERIC[21,10](curRows(t)) / rows(t) * quantity(tc)
            WHERE table(tc) == t AND NOT quantityTopNew(tc) AND NOT return(tc) == 'BOOLEAN'; 
        quantityTopNew(TableColumn tc) <- IF statisticGrowType(tc) == StatisticGrowType.fixed THEN quantityTop(tc) ELSE NUMERIC[21,10](curRows(t)) / rows(t) * quantityTop(tc)
            WHERE table(tc) == t AND NOT quantityTopNew(tc) AND NOT return(tc) == 'BOOLEAN'; 
        
        quantity(TableKey tk) <- quantityNew(tk) WHERE table(tk) == t;
        quantityTop(TableKey tk) <- quantityTopNew(tk) WHERE table(tk) == t;
        
        FOR TableColumn tc = tableColumn(Property pt) AND table(tc) == t DO {
            quantity(pt) <- quantityNew(tc);
            quantityTop(pt) <- quantityTopNew(tc);
        }
            
        notNullQuantity(Property pt) <-  NUMERIC[21,10](curRows(t)) / rows(t) * notNullQuantity(pt)
             WHERE tableSID(pt) == sid(t) AND targetStatistic(t);
        
        rows(t) <- curRows(t);
        
        APPLY;
    }
} ASON CONTEXTMENU sid[DatabaseTable];

loadCurRows 'Заполнить количество записей'(){
    INTERNAL DB 'SELECT pc.relname, reltuples::BIGINT FROM pg_class pc JOIN pg_tables pt ON pc.relname=pt.tablename AND pt.schemaname = \'public\''
        TO file;
    
    IMPORT TABLE FROM file() FIELDS STRING[100] table, LONG size DO {
        curRows(Table t) <- size WHERE lower(sid(t)) == table;
    }
}

setSkipStatistic 'Исключить из пересчета статистики'() {
    loadCurRows();
    notRecalculateStats(Table t) <-  rows(t) > 100000000 OR curRows(t) == rows(t) OR max(curRows(t), rows(t))/min(curRows(t), rows(t)) < 2;
}

needStats(Table t) = max(curRows(t), rows(t))/(OVERRIDE min(curRows(t), rows(t)), 1) >= 5;
backgroundRows(Table t) = IF needStats(t) THEN RGB (51, 153, 51) ELSE RGB (198, 236, 198);

EXTEND FORM tools
    OBJECTS t =  DatabaseTable
    PROPERTIES (t) READONLY sid
    PROPERTIES (t) skipVacuum
    PROPERTIES (t) READONLY BACKGROUND backgroundData(t) dataSize, curDataSize
    PROPERTIES (t) READONLY BACKGROUND backgroundIndex(t) indexSize, curIndexSize, deleteIndexes CHANGEABLE, large CHANGEABLE 
    PROPERTIES (t) READONLY BACKGROUND backgroundRows(t) notRecalculateStats CHANGEABLE, rows, curRows, targetStatistic CHANGEABLE
    PROPERTIES (t) getIndexes TOOLBAR
    FILTERGROUP grow
        FILTER 'VACUUM' needVacuum(t)
        FILTER 'REINDEX' needReindex(t)
        FILTER 'Пересчет статистики' needStats(t)
        FILTER 'Любые' needVacuum(t) OR needReindex(t) OR needStats(t)
    
    FILTERGROUP system 
        FILTER 'Системные' t IS PgTable
        
    OBJECTS tk=TableKey
    PROPERTIES(tk) READONLY class, classSID, name, nameStatisticGrowType CHANGEABLE, quantity, quantityTop
    FILTERS table(tk)==t

    OBJECTS tc=TableColumn
    PROPERTIES(tc) READONLY sid, caption, return, nameStatisticGrowType CHANGEABLE, quantity, quantityTop, notNullQuantity , percentNotNull
    FILTERS table(tc)==t
    
    OBJECTS i=Index
    PROPERTIES(i)  READONLY name, definition, tablespace, isConstraint, indexSize, indexScans, indexReads, efficiency, relid, indisvalid, sidTable
    PROPERTIES(i)  TOOLBAR invalidate SHOWIF indisvalid(i), validate SHOWIF NOT indisvalid(i) , reindex
    FILTERGROUP index
        FILTER 'По таблице' table(i) = t DEFAULT
    
    PROPERTIES () loadCurSize, loadSystemCurSize, vacuumSize, vacuumCoeff, nameVacuumOrderType, smartVacuum, countTreads,
                  loadCurRows, setSkipStatistic,  reindexConcurrentlySize, skipExceptions, stopAfter
;

DESIGN tools{
    pane{
        NEW dbMain{
            caption = 'Таблицы';
            horizontal = TRUE;
            NEW dbLeft{
                NEW vacuum {
                    caption = 'Упаковка';
                    MOVE PROPERTY (loadCurSize());
                    MOVE PROPERTY (loadSystemCurSize());
                    MOVE PROPERTY (vacuumSize());
                    MOVE PROPERTY (vacuumCoeff());
                    MOVE PROPERTY (nameVacuumOrderType());
                    MOVE PROPERTY (countTreads());
                    MOVE PROPERTY (reindexConcurrentlySize());
                    MOVE PROPERTY (skipExceptions());
                    MOVE PROPERTY (stopAfter());
                    MOVE PROPERTY (smartVacuum());
                }
                NEW stats{
                    caption = 'Статистика';
                    MOVE PROPERTY (loadCurRows());
                    MOVE PROPERTY (setSkipStatistic());
                }
            }
            NEW dbRight{
                fill = 1;
                MOVE BOX (t);
                NEW dbColumns{
                    fill = 0.4;
                    tabbed = TRUE;
                    MOVE BOX (tc);
                    MOVE BOX (tk);
                    MOVE BOX (i);
                }
            }
        }
    }
}

WHEN LOCAL SET(ACTIVE TAB tools.dbMain) DO {
    loadCurSize();
    loadSystemCurSize();
    loadCurRows();
}

onStarted() +{
    // Автоматически VACUUM системных таблиц на запуске сервера
    IF NOT inDevMode() THEN {
        logToFile('database-tools','Started vacuuming system tables on start');
        smartVacuum(TRUE);
        logToFile('database-tools','Ended vacuuming system tables on start');
    }
}