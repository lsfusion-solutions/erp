MODULE PurchaseComplianceDetail;

REQUIRE PurchaseCompliance, ComplianceGroup, ComplianceType, PurchaseInvoiceCharge;

NAMESPACE Purchase;

// Тип сертификата
nameComplianceTypeCompliance 'Тип сертификата' (UserInvoiceDetail invoiceDetail) = nameComplianceType(compliance(invoiceDetail));

// Группы сертификации
complianceGroup = ABSTRACT ComplianceGroup(InvoiceDetail);
complianceGroup = DATA ComplianceGroup(UserInvoiceDetail);
complianceGroup(UserInvoiceDetail invoiceDetail) += complianceGroup(invoiceDetail);

nameComplianceGroup 'Группа сертификации' (InvoiceDetail invoiceDetail) = name(complianceGroup(invoiceDetail));
nameComplianceGroup 'Группа сертификации' (UserInvoiceDetail userInvoiceDetail) = name(complianceGroup(userInvoiceDetail));

complianceGroup(UserInvoiceDetail userInvoiceDetail) <-
    complianceGroup(country[InvoiceDetail](userInvoiceDetail), sku(userInvoiceDetail))
    WHEN CHANGED (country[InvoiceDetail](userInvoiceDetail)) OR
         CHANGED (sku(userInvoiceDetail));

setComplianceGroup 'Заполнить группы сертификации'(UserInvoice invoice)  { 
   FOR userInvoice(UserInvoiceDetail invoiceDetail) == invoice DO {
      complianceGroup(invoiceDetail) <- complianceGroup(country[InvoiceDetail](invoiceDetail), sku[InvoiceDetail](invoiceDetail));
   }
} TOOLBAR;

skipCheckComplianceGroup = ABSTRACT BOOLEAN ();

CONSTRAINT complianceGroup(UserInvoiceDetail detail) AND countComplianceGroup(dataCompliance(detail))
           AND NOT in(complianceGroup(detail), dataCompliance(detail)) AND NOT skipCheckComplianceGroup()
    CHECKED BY dataCompliance[UserInvoiceDetail] MESSAGE 'Сертификат должен соответствовать группе сертификации';

// сертификаты для групп сертификаций по всему инвойсу
TABLE userInvoiceComplianceGroup (UserInvoice, ComplianceGroup);

compliance = DATA Compliance(UserInvoice, ComplianceGroup);
descriptionCompliance 'Сертификат' (UserInvoice invoice, ComplianceGroup complianceGroup) = description(compliance(invoice, complianceGroup));
nameComplianceTypeCompliance 'Тип сертификата' (UserInvoice invoice, ComplianceGroup complianceGroup) = nameComplianceType(compliance(invoice, complianceGroup));

CONSTRAINT countComplianceGroup(compliance(UserInvoice invoice, ComplianceGroup group))
           AND NOT in(group, compliance(invoice, group)) AND NOT skipCheckComplianceGroup()
    CHECKED BY compliance[UserInvoice,ComplianceGroup] MESSAGE 'Сертификат должен соответствовать группе сертификации';

CONSTRAINT SETCHANGED(compliance(UserInvoice invoice, ComplianceGroup group))
    AND NOT in(group, compliance(invoice, group)) AND NOT skipCheckComplianceGroup()
    CHECKED BY compliance[UserInvoice, ComplianceGroup] 
    MESSAGE 'Сертификат должен соответствовать группе сертификации';

WHEN LOCAL FORMS userInvoice CHANGED(compliance(UserInvoice i, ComplianceGroup g)) DO
    dataCompliance(UserInvoiceDetail d) <- compliance(i, g)
        WHERE userInvoice(d) == i AND complianceGroup(d) == g;

WHEN LOCAL FORMS userInvoice CHANGED(complianceGroup(UserInvoiceDetail d)) AND compliance(userInvoice(d), complianceGroup(d)) DO
    dataCompliance(d) <- compliance(userInvoice(d), complianceGroup(d));

count 'Кол-во' (invoice, complianceGroup) =
    GROUP SUM 1 BY userInvoice(UserInvoiceDetail detail), complianceGroup(detail) MATERIALIZED;

// ------------------- Заполнение сертификата, если он один для группы --------------------- //

countComplianceForManufacturing 'Кол-во' (ComplianceGroup complianceGroup) =
    GROUP SUM 1 IF in(complianceGroup, Compliance compliance) AND complianceType(compliance) ==ComplianceType.forManufacturing;
defaultComplianceForManufacturing  (ComplianceGroup complianceGroup) =
    GROUP MIN Compliance compliance IF in(complianceGroup, compliance) AND complianceType(compliance) ==ComplianceType.forManufacturing;
    
fillCompliance 'Заполнить сертификаты (пр-во)'(UserInvoice invoice)   { 
    compliance(invoice,ComplianceGroup g) <-  defaultComplianceForManufacturing(g) 
        WHERE countComplianceForManufacturing(g) == 1;  

} TOOLBAR;

// ------------------------------- Затраты на сертификацию ----------------------------- //

compliancePrice 'Сертификация (ед.)' = ABSTRACT NUMERIC[16,4](InvoiceDetail);
compliancePrice 'Сертификация (ед.)' = DATA NUMERIC[16,4](UserInvoiceDetail);
compliancePrice(UserInvoiceDetail detail) += compliancePrice(detail);

complianceSum 'Сертификация сумма' = ABSTRACT NUMERIC[18,4](InvoiceDetail);
complianceSum 'Сертификация сумма' = DATA NUMERIC[18,4](UserInvoiceDetail);
complianceSum(UserInvoiceDetail detail) += complianceSum(detail);

complianceSum(UserInvoiceDetail d) <- quantity(d) * compliancePrice(d) WHEN CHANGED(quantity(d)) OR CHANGED(compliancePrice(d));

@defineDocumentInterfaceHeaderSumCustomPrefix (invoice, invoiceDetail, compliance, ' (сертификация) всего');
                                                                
certificateCostPrice[UserInvoiceDetail](UserInvoiceDetail invoiceDetail) += compliancePrice(invoiceDetail);
certificateCostSum[UserInvoiceDetail](UserInvoiceDetail invoiceDetail) += complianceSum(invoiceDetail);

complianceSumUserInvoiceDetail 'Сертификация' = GROUP SUM complianceSum(UserInvoiceDetail d)
                                                                BY compliance(d) CHARWIDTH 15 MATERIALIZED;
                                                                
overCopy[UserInvoiceDetail,UserInvoiceDetail](UserInvoiceDetail d, UserInvoiceDetail detail) + {       
    compliancePrice(d) <- compliancePrice(detail);
    complianceSum(d) <- complianceSum(detail);
}                                                                 

// ----------------------------- Расширение формы инвойсов под сертификацию ------------------------- //

showCompliance 'Сертификация' = ABSTRACT BOOLEAN(Invoice);
showCompliance 'Сертификация' = DATA BOOLEAN(UserInvoice) IN documentPrm;
showCompliance(UserInvoice invoice) += showCompliance(invoice);

EXTEND FORM userInvoice
    PROPERTIES(i) BACKGROUND backgroundCompliance() showCompliance
    PROPERTIES(d) BACKGROUND backgroundCompliance() SHOWIF showCompliance(i) BEFORE chargePercent(d)
                                                    complianceSum, compliancePrice

    OBJECTS cg = ComplianceGroup GRID
    PROPERTIES(cg) READONLY SHOWIF showCompliance(i)
                            name
    PROPERTIES(i, cg) SHOWIF showCompliance(i)
                            descriptionCompliance,
                            nameComplianceTypeCompliance READONLY 
    FILTERS count(i, cg)

    OBJECTS d2 = UserInvoiceDetail GRID
    PROPERTIES(d2) SHOWIF showCompliance(i)
                            index, nameSku, nameBatch, idBatch,
                            nameComplianceGroup, descriptionCompliance, nameComplianceTypeCompliance
    FILTERS userInvoice(d2) == i

//    пока нельзя включить, так как не будет прятаться вкладка Сертификация
//    FILTERGROUP groupFilters
//        FILTER 'Текущей группы' 'F10' complianceGroupUserInvoiceDetail(d2) == cg
//        FILTER 'Без группы' 'F9' NOT complianceGroupUserInvoiceDetail(d2)

    PROPERTIES(i) setComplianceGroup DRAW d2 SHOWIF showCompliance(i)
    PROPERTIES(i) fillCompliance DRAW cg SHOWIF showCompliance(i)
;

DESIGN userInvoice {
    headerExtraParams {
        NEW headerCompliance {
            caption = 'Сертификация';
            MOVE PROPERTY(showCompliance(i));
        }
    }

    specificationBox {
        NEW complianceContainer {
            caption = 'Сертификация';
            MOVE BOX(cg);
            MOVE BOX(d2);
        }
    }
}


EXTEND FORM invoices
    PROPERTIES(d) READONLY BACKGROUND backgroundCompliance() SHOWIF showCompliance(i) BEFORE chargePrice(d)
                                                nameComplianceGroup, compliancePrice
;

EXTEND FORM compliance
    PROPERTIES(id) BACKGROUND backgroundCompliance() nameComplianceGroup, compliancePrice, complianceSum
;

//-------------------------------------- Расписывание затрат по сертификату ----------------------------------------------//

sum 'Стоимость' = DATA NUMERIC[18,4](Compliance);
sumRound 'Стоимость (округление)' (Compliance c) = sum(c) (-) complianceSumUserInvoiceDetail(c);

calcComplianceSum 'Сертификация' (UserInvoiceDetail d) =
    PARTITION UNGROUP sum
              PROPORTION ROUND(2) sum(d)
              ORDER d
              BY compliance(d);

recalculatePriceInvoice 'Рассчитать расходы (за ед.)'(Compliance compliance)  { 
    complianceSum(UserInvoiceDetail d) <- NUMERIC[18,4](calcComplianceSum(d)) WHERE compliance(d) == compliance;
    compliancePrice(UserInvoiceDetail d) <- complianceSum(d) / quantity(d) WHERE compliance(d) == compliance;
} TOOLBAR;


EXTEND FORM compliance
    PROPERTIES(c) sum, sumRound READONLY
    PROPERTIES(c) recalculatePriceInvoice DRAW id
;

DESIGN compliance {
    documentParams {
        MOVE PROPERTY(sum(c));
        MOVE PROPERTY(sumRound(c));
    }
}

EXTEND FORM compliances
    PROPERTIES(c) READONLY sum AFTER nameComplianceType(c)
;

//-- Операция
@defineOperationProperty(showCompliance, 'Сертификация', commonContainer);
@deriveDocumentOperationProperty(UserInvoice, showCompliance);
