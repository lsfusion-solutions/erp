MODULE PurchaseDeclarationDetail;

REQUIRE PurchaseDeclaration, CustomsGroupItem;

NAMESPACE Purchase;

// ------------- Импортер -------------- //

legalEntity = DATA LegalEntity(Declaration);
nameLegalEntity 'Импортёр' (Declaration declaration) = name(legalEntity(declaration));
fullNameLegalEntity 'Полное имя импортера' (Declaration declaration) = fullName(legalEntity(declaration));
addressLegalEntity 'Адрес' (Declaration declaration) = address(legalEntity(declaration), date(declaration));

@defineDocumentLegalEntityAccess(Declaration, legalEntity, company);

CONSTRAINT legalEntity(Declaration declaration) AND NOT isCompany(legalEntity(declaration))
    CHECKED BY legalEntity[Declaration] MESSAGE 'Импортёр должен быть компанией';

// ------------- Таможенная зона -------------- //

customsZone = DATA CustomsZone(Declaration);
nameCustomsZone 'Таможенная зона' (Declaration declaration) = name(customsZone(declaration));
customsZone(Declaration d) <- customsZone(country(legalEntity(d))) WHEN CHANGED(legalEntity(d));

// ------- Валюты ------------ //

homeCurrency = DATA Currency(Declaration);
nameHomeCurrency 'Валюта декларации' (Declaration declaration) = name(homeCurrency(declaration));
homeCurrency(Declaration declaration) <- currency(legalEntity(declaration)) WHEN CHANGED(legalEntity(declaration));

currency = DATA Currency(Declaration);
nameCurrency 'Валюта накладных' (Declaration declaration) = name(currency(declaration));

currencyCustomsZone (Declaration declaration) = currency(customsZone(declaration));
nameCurrencyCustomsZone 'Валюта платежей' (Declaration declaration) = name(currencyCustomsZone(declaration));

// ------- Типы обмена и курсы ------------ //

typeExchange = DATA TypeExchange(Declaration);
nameTypeExchange 'Тип обмена' (Declaration declaration) = name(typeExchange(declaration));

typeExchange(Declaration d) <- defaultTypeExchange(customsZone(d)) WHEN CHANGED(customsZone(d));

CONSTRAINT currency(typeExchange(Declaration declaration)) != homeCurrency(declaration)
    CHECKED BY typeExchange[Declaration] MESSAGE 'Тип обмена должен соответствовать расчётной валюте';

rateExchange 'Курс накладных' = DATA NUMERIC[14,6](Declaration);
dataDateExchange  = DATA DATE(Declaration);
dateExchange 'Дата (курс накладных)'= OVERRIDE dataDateExchange(Declaration d), date(d);

dataDateExchange(Declaration declaration) <- date(declaration) WHEN CHANGED (date(declaration));

calcRateExchange 'Курс накладных' (Declaration declaration) = rateOn(typeExchange(declaration), currency(declaration), dateExchange(declaration));
rateExchange(Declaration declaration) <- calcRateExchange(declaration) WHEN CHANGED (dateExchange(declaration)) OR
                                                                                      CHANGED (typeExchange(declaration)) OR
                                                                                      CHANGED (currency(declaration));

rateExchangeCustomsZone 'Курс платежей' = DATA NUMERIC[14,6](Declaration);
calcRateExchangeCustomsZone 'Курс платежей' = rateOn(typeExchange(Declaration declaration), currencyCustomsZone(declaration), date(declaration));
rateExchangeCustomsZone(Declaration declaration) <- calcRateExchangeCustomsZone(declaration) WHEN CHANGED (date(declaration)) OR
                                                                                                            CHANGED (typeExchange(declaration)) OR
                                                                                                            CHANGED (customsZone(declaration));

// ------- Округления ------------ //
round 'Точность округления' = DATA INTEGER(Declaration);
round(Declaration d) <- defaultRound(homeCurrency(d)) WHEN CHANGED(homeCurrency(d));

EXTEND FORM declaration
    PROPERTIES(d) nameLegalEntity, nameCurrency, nameCustomsZone, nameHomeCurrency,
                  nameTypeExchange, round, dateExchange, rateExchange, nameCurrencyCustomsZone READONLY,
                  rateExchangeCustomsZone
;

DESIGN declaration {
    NEW params {
        alignment = STRETCH;
        horizontal = TRUE;
        NEW paramsColumn1 {
            fill = 1;
            NEW documentParams {
                alignment = STRETCH;
                caption = 'Параметры документа';
                lines = 2;
                MOVE PROPERTY(nameLegalEntity(d));
                MOVE PROPERTY(nameCustomsZone(d));
            }
            NEW extraParams {
                alignment = STRETCH;
                horizontal = TRUE;
                NEW currencyParams {
                    caption = 'Валюты и курсы';
                    NEW currencyParamsColumn1 {
                        horizontal = TRUE;                        
                        MOVE PROPERTY(nameHomeCurrency(d));
                        MOVE PROPERTY(nameTypeExchange(d));                                               
                    }
                    NEW currencyParamsColumn2 {
                        horizontal = TRUE;
                        MOVE PROPERTY(nameCurrency(d));                        
                        MOVE PROPERTY(rateExchange(d));
                        MOVE PROPERTY(dateExchange(d));
                    }
                    NEW currencyParamsColumn3 {
                        horizontal = TRUE;
                        MOVE PROPERTY(nameCurrencyCustomsZone(d));
                        MOVE PROPERTY(rateExchangeCustomsZone(d));
                    }                                        
                }
            }
        }
        NEW paramsColumn2 {
            lines = 1;
        }
        NEW roundParams {
            lines = 1;
            caption = 'Округление';
            MOVE PROPERTY(round(d));
        }
    }
    NEW detail {
        fill = 1;
        tabbed = TRUE;
        NEW invoices {
            caption = 'Накладные';
        }
        NEW declarationDetails {
            caption = 'Строки декларации';
        } 
    }
    MOVE TOOLBARBOX;
}

EXTEND FORM declarations
    PROPERTIES(d) READONLY nameLegalEntity, nameHomeCurrency, nameCurrency
;

// ---------------------------------- Накладные --------------------------------------------------------//

// свойства товаров
overNameCustoms = ABSTRACT ISTRING[255](UserInvoiceDetail);
nameCustoms 'Наименование (декл.)' (UserInvoiceDetail d) = OVERRIDE overNameCustoms(d), name(sku(d));

// страна производства
countrySku = country(sku(InvoiceDetail invoiceDetail));

countrySkuUser = country(sku(InvoiceDetail invoiceDetail));

sidOrigin2CountrySkuUser 'Код страны' (InvoiceDetail d) = sidOrigin2(countrySkuUser(d));

UOM(UserInvoiceDetail d) = UOM(sku(d));

// ТН ВЭД
customsGroup = ABSTRACT CustomsGroup(InvoiceDetail);
customsGroup = DATA CustomsGroup(UserInvoiceDetail);
customsGroup(UserInvoiceDetail d) += customsGroup(d);

codeCustomsGroup 'ТН ВЭД' (InvoiceDetail d) = code(customsGroup(d));
nameCustomsGroup 'Наименование ТН ВЭД' (InvoiceDetail d) =name(customsGroup(d));
canonicalNameCustomsGroup 'Полное намиенование ТН ВЭД' (InvoiceDetail d) =canonicalName(customsGroup(d));

codeCustomsGroup 'ТН ВЭД' (UserInvoiceDetail d) = code(customsGroup(d));
                                                                              
originalCustomsGroup 'Код ТНВЭД (ориг.)' (InvoiceDetail d) = originalCustomsGroup(sku(d));
originalCustomsGroup 'Код ТНВЭД (ориг.)' (UserInvoiceDetail d) = originalCustomsGroup(sku(d));

WHEN LOCAL FORMS userInvoice
    CHANGED(country(UserInvoiceDetail d)) OR CHANGED(sku(d)) DO
        customsGroup(d) <- customsGroup(country(d), sku(d));

// Льготы
VATCustomsException = ABSTRACT VATCustomsException(InvoiceDetail);
VATCustomsException = DATA VATCustomsException(UserInvoiceDetail);
VATCustomsException(UserInvoiceDetail d) += VATCustomsException(d);

nameVATCustomsException 'Льгота НДС' (InvoiceDetail d) = name(VATCustomsException(d)) CHARWIDTH 15;
nameVATCustomsException 'Льгота НДС' (UserInvoiceDetail d) = name(VATCustomsException(d)) CHARWIDTH 15;

WHEN LOCAL FORMS userInvoice
    CHANGED(country(UserInvoiceDetail d)) OR CHANGED(sku(d)) DO
        VATCustomsException(d) <- VATCustomsException(country(d), sku(d));

CONSTRAINT customsGroup(UserInvoiceDetail d) AND VATCustomsException(d) AND NOT customsGroup(VATCustomsException(d)) == customsGroup(d)
    CHECKED BY VATCustomsException[UserInvoiceDetail] MESSAGE 'Льгота НДС должна соответствовать ТН ВЭД';

setCustomsGroupUserInvoiceDetail 'Заполнить ТН ВЭД'(Declaration declaration)  { 
    FOR declaration(UserInvoiceDetail d) == declaration DO {
        customsGroup(d) <- customsGroup(country(d), sku(d));
        VATCustomsException(d) <- VATCustomsException(country(d), sku(d));
    }
}

// ------------ Таможенные платежи -----------

// Пошлина
dutyPrice 'Пошлина (ед.)' = ABSTRACT NUMERIC[20,8](InvoiceDetail);
dutyPrice 'Пошлина (ед.)' = DATA NUMERIC[20,8](UserInvoiceDetail);
dutyPrice(UserInvoiceDetail detail) += dutyPrice(detail);

dutySum 'Сумма (пошлина)' = ABSTRACT NUMERIC[18,4] (InvoiceDetail);
dutySum 'Сумма (пошлина)' = DATA NUMERIC[18,4] (UserInvoiceDetail);
dutySum[InvoiceDetail] (UserInvoiceDetail d) += dutySum(d);

dutySum(UserInvoiceDetail d) <- quantity(d) * dutyPrice(d) WHEN CHANGED(quantity(d)) OR CHANGED(dutyPrice(d));

@defineDocumentInterfaceHeaderSumCustomPrefix (invoice, invoiceDetail, duty, ' (пошлина) всего');

overCopy[UserInvoiceDetail,UserInvoiceDetail](UserInvoiceDetail d, UserInvoiceDetail detail) + {       
    dutyPrice(d) <- dutyPrice(detail);
    dutySum(d) <- dutySum(detail);
}  

// Сбор
registrationPrice 'Таможенный сбор (ед.)' = ABSTRACT NUMERIC[20,8](InvoiceDetail);
registrationPrice 'Таможенный сбор (ед.)' = DATA NUMERIC[20,8](UserInvoiceDetail);
registrationPrice(UserInvoiceDetail detail) += registrationPrice(detail);

registrationSum 'Таможенный сбор сумма' = ABSTRACT NUMERIC[18,4](InvoiceDetail);
registrationSum 'Таможенный сбор сумма' = DATA NUMERIC[18,4](UserInvoiceDetail);
registrationSum[InvoiceDetail](UserInvoiceDetail detail) += registrationSum(detail);

registrationSum(UserInvoiceDetail d) <- quantity(d) * registrationPrice(d) WHEN CHANGED(quantity(d)) OR CHANGED(registrationPrice(d));

@defineDocumentInterfaceHeaderSumCustomPrefix (invoice, invoiceDetail, registration, ' (таможенный сбор) всего');

overCopy[UserInvoiceDetail,UserInvoiceDetail](UserInvoiceDetail d, UserInvoiceDetail detail) + {       
    registrationPrice(d) <- registrationPrice(detail); 
    registrationSum(d) <- registrationSum(detail);      
} 

// Проводим по инвойсу
extraPrice = ABSTRACT NUMERIC[16,4] (UserInvoiceDetail);
extraSum = ABSTRACT NUMERIC[18,4] (UserInvoiceDetail);
customCostPrice[UserInvoiceDetail](UserInvoiceDetail invoiceDetail) += registrationPrice(invoiceDetail) (+) dutyPrice(invoiceDetail) (+) extraPrice(invoiceDetail);
customCostSum[UserInvoiceDetail](UserInvoiceDetail invoiceDetail) += registrationSum(invoiceDetail) (+) dutySum(invoiceDetail) (+) extraSum(invoiceDetail);
// НДС
VATPrice 'НДС (ед.)' = ABSTRACT NUMERIC[20,8](InvoiceDetail);
VATPrice 'НДС (ед.)' = DATA NUMERIC[20,8](UserInvoiceDetail);
VATPrice(UserInvoiceDetail detail) += VATPrice(detail);

customsVATSum 'НДС сумма' = ABSTRACT NUMERIC[18,4](InvoiceDetail);
customsVATSum 'НДС сумма' = DATA NUMERIC[18,4](UserInvoiceDetail);
customsVATSum(UserInvoiceDetail detail) += customsVATSum(detail);

customsVATSum(UserInvoiceDetail d) <- quantity(d) * VATPrice(d) WHEN CHANGED(quantity(d)) OR CHANGED(VATPrice(d));

@defineDocumentInterfaceHeaderSumCustomPrefix (invoice, invoiceDetail, customsVAT, ' НДС (входной) всего');

overCopy[UserInvoiceDetail,UserInvoiceDetail](UserInvoiceDetail d, UserInvoiceDetail detail) + {       
    VATPrice(d) <- VATPrice(detail);
    customsVATSum(d) <- customsVATSum(detail);      
} 

// -------------------------------- Расширение накладной свойствами декларации -------------------------- //

showDeclaration 'Таможенные платежи' = ABSTRACT BOOLEAN(Invoice);
showDeclaration 'Таможенные платежи' = DATA BOOLEAN(UserInvoice) IN documentPrm;
showDeclaration(UserInvoice invoice) += showDeclaration(invoice);

showCodeCustomsGroup 'Показывать код ТНВЭД' = ABSTRACT BOOLEAN(Invoice);
showCodeCustomsGroup 'Показывать код ТНВЭД' = DATA BOOLEAN(UserInvoice) IN documentPrm;
showCodeCustomsGroup(UserInvoice invoice) += showCodeCustomsGroup(invoice);

allowedChangeCustomsGroup 'Разрешено менять ТН ВЭД в карточке товара из формы Накладная (закупка)' = DATA BOOLEAN ();
EXTEND FORM options
    PROPERTIES () allowedChangeCustomsGroup 
;
DESIGN options {
    customs {
        MOVE PROPERTY(allowedChangeCustomsGroup()); 
    }    
}

changeCustomsGroup (UserInvoiceDetail d)  { 
    DIALOG customsGroups OBJECTS cz = customsZone((country(d))), dt = date(d), cg = customsGroup(d) CHANGE LIST code(cg) DO {
        customsGroup(Country country, Sku sku) <- cg WHERE country == country(d) AND sku == sku(d) AND allowedChangeCustomsGroup();
    }
}



EXTEND FORM userInvoice
    PROPERTIES(i) BACKGROUND backgroundCustoms() showDeclaration
    PROPERTIES(d) BACKGROUND backgroundCustoms() SHOWIF showDeclaration(i) BEFORE numberVAT(d)
        codeCustomsGroup ON CHANGE changeCustomsGroup(d), nameVATCustomsException, 
        dutyPrice, dutySum, registrationPrice, registrationSum, VATPrice, customsVATSum
;
DESIGN userInvoice {
    headerExtraParams {
        NEW headerCustoms {
            caption = 'Таможенные платежи';
            MOVE PROPERTY(showDeclaration(i));
        }
    }
}

EXTEND FORM invoices
    PROPERTIES(d) READONLY BACKGROUND backgroundCustoms() SHOWIF (showDeclaration(i) OR showCodeCustomsGroup(i)) BEFORE numberVAT(d) codeCustomsGroup
    PROPERTIES(d) READONLY BACKGROUND backgroundCustoms() SHOWIF showDeclaration(i) BEFORE numberVAT(d) 
        nameVATCustomsException, dutyPrice, dutySum, registrationPrice, registrationSum
;

// ------------------------------ Выбор накладных ---------------------------- //
in 'Вкл.' (Declaration declaration, UserInvoice invoice) = declaration(invoice) == declaration;

in 'Вкл.' (Declaration declaration, UserInvoiceDetail detail) = dataDeclaration(detail) == declaration;

FORM declarationInvoices 'Выбрать накладные'
    OBJECTS d=Declaration PANEL                           
    PROPERTIES(d) READONLY seriesNumber, nameLegalEntity, nameCurrency, dateTime

    OBJECTS i=UserInvoice
    PROPERTIES (d, i) in
    PROPERTIES (i) READONLY number, series, date, time, nameSupplier, nameCustomer
    FILTERS in(d, i) OR d IS Declaration AND NOT declaration(i)

    OBJECTS id=UserInvoiceDetail
    PROPERTIES(d, id) in
    PROPERTIES(id) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku, codeCustomsGroup,
                            quantity, price
    FILTERS userInvoice(id) == i,
            declaration(id)==d OR d IS Declaration AND NOT declaration(id)

    FILTERGROUP filtersCurrency
        FILTER 'Только с валютой декларации' currency(d) == currency(i) 'F10' DEFAULT

    FILTERGROUP filtersImporter
        FILTER 'Только импортёра декларации' legalEntity(d) == customer(i) 'F11' DEFAULT
;

DESIGN declarationInvoices {
    BOX {
        size = (1024, 768);
        NEW split {
            fill = 1;
            NEW header {
                fill = 1;
                MOVE BOX(d);
                MOVE BOX(i);
            }
            NEW pane {
                fill = 1;
                tabbed = TRUE;
                MOVE BOX(id);
            }
        }
        MOVE TOOLBARBOX;
    }
}

selectInvoices 'Выбрать накладные'(Declaration declaration)  { 
    SHOW declarationInvoices OBJECTS d=declaration ;
} TOOLBAR;

// --------- Подобранные накладные
in (invoice, declaration)= GROUP SUM 1 BY invoice(InvoiceDetail d), declaration(d);

invoices 'Накладные' (Declaration declaration) =
    GROUP
              CONCAT shortDescription(Invoice invoice) IF in (invoice, declaration) AND currency(invoice) == currency(declaration), ',' ORDER invoice CHARWIDTH 40;

backgroundVATCustomsException 'Цвет' (UserInvoiceDetail invoiceDetail) = backgroundVATCustomsException() IF countVATCustomsException(customsGroup(invoiceDetail)) > 0;

EXTEND FORM declaration
    PROPERTIES(d) invoices

    OBJECTS id=UserInvoiceDetail
    PROPERTIES(id) READONLY index, seriesNumber, idBarcodeSku, nameSku, shortNameUOMSku,
                   nameCustoms, nameCountrySku
    PROPERTIES(id) sumNetWeight, sumGrossWeight, codeCustomsGroup, nameVATCustomsException BACKGROUND backgroundVATCustomsException(id)
    PROPERTIES(id) READONLY quantity, price
    PROPERTIES(id) dutyPrice, dutySum, registrationPrice, registrationSum, VATPrice, customsVATSum

    PROPERTIES (d) selectInvoices DRAW id ,
                   setCustomsGroupUserInvoiceDetail DRAW id TOOLBAR
    FILTERS declaration(id) == d, currency(id) == currency(d)
;

DESIGN declaration {
    documentParams {
        MOVE PROPERTY(invoices(d));
    }

    invoices {
        MOVE BOX(id);
    }
}

EXTEND FORM declarations
    PROPERTIES(d) READONLY invoices
;

//------------------------------------------ Разбиение строк инвойсов -------------------------------------------------//

CLASS DeclarationInvoiceDetail 'Позиции декларации';
TABLE declarationInvoiceDetail(DeclarationInvoiceDetail);

declaration = DATA Declaration (DeclarationInvoiceDetail) NONULL DELETE;

declarationInvoiceDetail = DATA DeclarationInvoiceDetail (UserInvoiceDetail) INDEXED;
declarationDeclarationInvoiceDetail (UserInvoiceDetail detail) = declaration(declarationInvoiceDetail(detail));

//userInvoiceDetailDeclarationInvoiceDetail = DATA UserInvoiceDetail (DeclarationInvoiceDetail) NONULL DELETE;
//userInvoiceDeclarationInvoiceDetail (d) = userInvoiceUserInvoiceDetail(userInvoiceDetailDeclarationInvoiceDetail(d));  

nameCustoms 'Наименование' = DATA ISTRING[255] (DeclarationInvoiceDetail) IN id;

//UOMDeclarationInvoiceDetail 'Ед. изм.' (d) = UOMUserInvoiceDetail (userInvoiceDetailDeclarationInvoiceDetail(d)) MATERIALIZED;

UOM 'Ед. изм.' (d) = DATA UOM (DeclarationInvoiceDetail) MATERIALIZED;
shortNameUOM 'Ед. изм.' (DeclarationInvoiceDetail d) = shortName(UOM(d));

//countryDeclarationInvoiceDetail 'Страна' (d) = countrySkuUserInvoiceDetail (userInvoiceDetailDeclarationInvoiceDetail(d)) MATERIALIZED;
country 'Страна' (d) = DATA Country (DeclarationInvoiceDetail) MATERIALIZED;
nameCountry 'Страна' (DeclarationInvoiceDetail d) = name(country(d)) IN id;

sumNetWeight 'Вес нетто' (d) = DATA NUMERIC[9,3] (DeclarationInvoiceDetail); 
sumGrossWeight 'Вес брутто' (d) = DATA NUMERIC[9,3] (DeclarationInvoiceDetail);

customsGroup 'ТН ВЭД' (d) = DATA CustomsGroup (DeclarationInvoiceDetail);
codeCustomsGroup 'ТН ВЭД' (DeclarationInvoiceDetail d) = code(customsGroup(d)) IN id;

VATCustomsException 'Льгота НДС' = DATA VATCustomsException (DeclarationInvoiceDetail);
nameVATCustomsException 'Льгота НДС' (DeclarationInvoiceDetail d) = name(VATCustomsException(d));

description 'Описание' (DeclarationInvoiceDetail d) = CONCAT ',', nameCustoms(d), shortNameUOM(d), nameCountry(d), codeCustomsGroup(d) CHARWIDTH 20;
descriptionDeclarationInvoiceDetail 'Позиция декларации' (UserInvoiceDetail d) = description(declarationInvoiceDetail(d)); 
EXTEND FORM declaration
    PROPERTIES(id) descriptionDeclarationInvoiceDetail 
;
CONSTRAINT declaration(UserInvoiceDetail d) != declaration(declarationInvoiceDetail(d))
    CHECKED BY declarationInvoiceDetail[UserInvoiceDetail]
    MESSAGE 'Декларация позиции декларации должна соответствовать декларации строки накладной';

CONSTRAINT customsGroup(DeclarationInvoiceDetail d) AND VATCustomsException(d) 
           AND NOT customsGroup(VATCustomsException(d)) == customsGroup(d)
    CHECKED BY VATCustomsException[DeclarationInvoiceDetail] MESSAGE 'Льгота НДС должна соответствовать ТН ВЭД';

quantity 'Кол-во' = DATA NUMERIC[14,3](DeclarationInvoiceDetail);
price 'Цена' = DATA NUMERIC[16,4] (DeclarationInvoiceDetail);
sum 'Стоимость' (d) = DATA NUMERIC[18,4] (DeclarationInvoiceDetail); 
sum (DeclarationInvoiceDetail d) <- quantity(d) * price(d)
    WHEN CHANGED(quantity(d)) OR CHANGED(price(d));

sumDeclarationInvoiceDetail 'Сумма (по позициям декларации)' = GROUP SUM sum(DeclarationInvoiceDetail d)
                                                                               BY declaration(d) CHARWIDTH 15;

noneVATCustomsException(UserInvoiceDetail d) = OVERRIDE VATCustomsException(d), VATCustomsException.none;

notPrice 'Не учитывать цену в декларации' = DATA BOOLEAN (Brand);

EXTEND FORM brand
    PROPERTIES (t) notPrice
;

overridePriceUser(InvoiceDetail d) = OVERRIDE 1 IF notPrice(brand(sku(d))), price[UserInvoiceDetail](d);

indexDeclaration 'Кол-во' = GROUP MAX index(UserInvoiceDetail d)
                                           BY declaration(d),
                                              nameCustoms(d),
                                              UOM(d),
                                              customsGroup(d),
                                              noneVATCustomsException(d),
                                              countrySkuUser(d),
                                              overridePriceUser(d); 

quantityDeclaration 'Кол-во' = GROUP SUM quantity(UserInvoiceDetail d)
                                           BY declaration(d),
                                              nameCustoms(d),
                                              UOM(d),
                                              customsGroup(d),
                                              noneVATCustomsException(d),
                                              countrySkuUser(d),
                                              overridePriceUser(d); 

sumDeclaration 'Стоимость' = GROUP SUM sum(UserInvoiceDetail d)
                                           BY declaration(d),
                                              nameCustoms(d),
                                              UOM(d),
                                              customsGroup(d),
                                              noneVATCustomsException(d),
                                              countrySkuUser(d),
                                              overridePriceUser(d); 
                                              
countNotQuantity 'Кол-во строк' = GROUP SUM 1 IF NOT quantity(UserInvoiceDetail d)
    BY declaration(d);                                                                           
countNotSum 'Кол-во строк' = GROUP SUM 1 IF NOT sum(UserInvoiceDetail d)
    BY declaration(d);                                                                             
countNotName 'Кол-во строк' = GROUP SUM 1 IF NOT nameCustoms(UserInvoiceDetail d)
    BY declaration(d); 
countNotUOM 'Кол-во строк' = GROUP SUM 1 IF NOT UOM(UserInvoiceDetail d)
    BY declaration(d);  
countNotCustomsGroup 'Кол-во строк' = GROUP SUM 1 IF NOT customsGroup(UserInvoiceDetail d)
    BY declaration(d);                                                                                                                                                                                                                                       
countNotVATCustomsException 'Кол-во строк' = GROUP SUM 1 IF NOT noneVATCustomsException(UserInvoiceDetail d)
    BY declaration(d);  
countNotCountrySku 'Кол-во строк' = GROUP SUM 1 IF NOT countrySkuUser(UserInvoiceDetail d)
    BY declaration(d);  
countNotPrice 'Кол-во строк' = GROUP SUM 1 IF NOT price(UserInvoiceDetail d)
    BY declaration(d);  
    
filterUserInvoiceDetail = countNotName(Declaration declaration) OR
                                                countNotUOM(declaration) OR 
                                                countNotCustomsGroup(declaration) OR 
                                                countNotVATCustomsException(declaration) OR
                                                countNotCountrySku(declaration) OR
                                                countNotPrice(declaration) OR 
                                                countNotQuantity(declaration) OR 
                                                countNotSum(declaration);

    
overCreateDeclarationInvoiceDetail  ABSTRACT LIST ( Declaration);

// скрипт для проставления старых
//sumDeclarationInvoiceDetail(dd) <- sumGroupDeclaration(declarationDeclarationInvoiceDetail(dd), nameCustomsDeclarationInvoiceDetail(dd), UOMDeclarationInvoiceDetail(dd), customsGroupDeclarationInvoiceDetail(dd), VATCustomsExceptionDeclarationInvoiceDetail(dd), countryDeclarationInvoiceDetail(dd), priceDeclarationInvoiceDetail(dd));

indexDeclaration(UserInvoiceDetail d) = PARTITION SUM 1 ORDER invoice(d), index(d) BY declaration(d) IF currency(d) == currency(declaration(d));

createDeclarationInvoiceDetail 'Создать позиции'(Declaration declaration)  { 
    IF NOT filterUserInvoiceDetail(declaration) THEN {
        DELETE DeclarationInvoiceDetail d WHERE declaration(d) == declaration;
    
        LOCAL dNameCustoms = ISTRING[255] (UserInvoiceDetail);
        dNameCustoms(UserInvoiceDetail d) <- nameCustoms(d) WHERE declaration(d) == declaration;
    
        LOCAL dUOM = UOM (UserInvoiceDetail);
        dUOM(UserInvoiceDetail d) <- UOM(d) WHERE declaration(d) == declaration;
        
        LOCAL dCustomsGroup = CustomsGroup (UserInvoiceDetail);
        dCustomsGroup(UserInvoiceDetail d) <- customsGroup(d) WHERE declaration(d) == declaration;

        LOCAL dVATCustomsException = VATCustomsException (UserInvoiceDetail);
        dVATCustomsException(UserInvoiceDetail d) <- noneVATCustomsException(d) WHERE declaration(d) == declaration;

        LOCAL dCountry = Country (UserInvoiceDetail);
        dCountry(UserInvoiceDetail d) <- countrySkuUser(d) WHERE declaration(d) == declaration;

        LOCAL dPrice = NUMERIC[16,4] (UserInvoiceDetail);
        dPrice(UserInvoiceDetail d) <- overridePriceUser(d) WHERE declaration(d) == declaration;
        
        LOCAL quantity = NUMERIC[16,5] (ISTRING[255], UOM, CustomsGroup, VATCustomsException, Country, NUMERIC[16,4]);
        quantity(ISTRING[255] customsName, UOM UOM, CustomsGroup customsGroup, VATCustomsException customsException, Country country, NUMERIC[16,4] price) <- 
            [ GROUP SUM quantity(UserInvoiceDetail d) IF declaration(d) == declaration
                                           BY declaration(d),
                                              dNameCustoms(d),
                                              dUOM(d),
                                              dCustomsGroup(d),
                                              dVATCustomsException(d),
                                              dCountry(d),
                                              dPrice(d)](declaration, customsName, UOM, customsGroup, customsException, country, price);
                                               
        LOCAL sum = NUMERIC[18,4] (ISTRING[255], UOM, CustomsGroup, VATCustomsException, Country, NUMERIC[16,4]);
        sum(ISTRING[255] customsName, UOM UOM, CustomsGroup customsGroup, VATCustomsException customsException, Country country, NUMERIC[16,4] price) <- 
            [ GROUP SUM sum(UserInvoiceDetail d)
                                           BY declaration(d),
                                              dNameCustoms(d),
                                              dUOM(d),
                                              dCustomsGroup(d),
                                              dVATCustomsException(d),
                                              dCountry(d),
                                              dPrice(d)](declaration, customsName, UOM, customsGroup, customsException, country, price);

        LOCAL index = INTEGER (ISTRING[255], UOM, CustomsGroup, VATCustomsException, Country, NUMERIC[16,4]);
        index(ISTRING[255] customsName, UOM UOM, CustomsGroup customsGroup, VATCustomsException customsException, Country country, NUMERIC[16,4] price) <- 
            [ GROUP MAX indexDeclaration(UserInvoiceDetail d)
                                           BY declaration(d),
                                              dNameCustoms(d),
                                              dUOM(d),
                                              dCustomsGroup(d),
                                              dVATCustomsException(d),
                                              dCountry(d),
                                              dPrice(d)](declaration, customsName, UOM, customsGroup, customsException, country, price);
    
        FOR NUMERIC[16,5] quantity == quantity(ISTRING[255] customsName, UOM UOM, CustomsGroup customsGroup, VATCustomsException customsException, Country country, NUMERIC[16,4] price) AND
            NUMERIC[18,4] sum == sum(customsName, UOM, customsGroup, customsException, country, price) ORDER
            index(customsName, UOM, customsGroup, customsException, country, price) NEW dd=DeclarationInvoiceDetail DO {
            // Ключи
            declaration(dd) <- declaration;
            nameCustoms(dd) <- customsName;
            UOM(dd) <- UOM;
            customsGroup(dd) <- customsGroup;
            VATCustomsException(dd) <- IF customsException != VATCustomsException.none THEN customsException ELSE NULL;
            country(dd) <- country;
            //priceDeclarationInvoiceDetail(dd) <- price;
    
            // Значения
            quantity (dd) <- quantity;
            sum(dd) <- sum;
            price(dd) <- sum(dd)/quantity (dd);
    
            // связываем строки накладной и декларации
            declarationInvoiceDetail(UserInvoiceDetail id) <- dd WHERE
                declaration(id) == declaration AND
                dNameCustoms(id) == customsName AND
                dUOM(id) == UOM AND
                dCustomsGroup(id) == customsGroup AND
                dVATCustomsException(id) == customsException AND
                dCountry(id) == country AND
                dPrice(id) == price;
        }
    
        sumNetWeight(DeclarationInvoiceDetail dd) <- [ GROUP SUM sumNetWeight(UserInvoiceDetail d) BY declarationInvoiceDetail(d)](dd) WHERE declaration(dd) == declaration;
        sumGrossWeight(DeclarationInvoiceDetail dd) <- [ GROUP SUM sumGrossWeight(UserInvoiceDetail d) BY declarationInvoiceDetail(d)](dd) WHERE declaration(dd) == declaration;
        
        overCreateDeclarationInvoiceDetail(declaration);
    } ELSE {
        MESSAGE 'В декларации присутствуют строки накладной, у которых не задан: '+(CONCAT'; ',
            ('Наименование (декл.) - '+ countNotName(declaration)+'шт.'),
            ('Ед. изм. - '+ countNotUOM(declaration)+' шт.'),
            ('ТН ВЭД - '+ countNotCustomsGroup(declaration)+' шт.'),
            ('Льгота НДС - '+ countNotVATCustomsException(declaration)+' шт.'),
            ('Страна производства - '+ countNotCountrySku(declaration)+' шт.'),
            ('Цена - '+ countNotPrice(declaration)+' шт.'),
            ('Количество - '+ countNotQuantity(declaration)+' шт.'),
            ('Сумма - '+ countNotSum(declaration)+' шт.')
        );
    }
} TOOLBAR CONFIRM;


filterDeclaration = UserInvoiceDetail d IS UserInvoiceDetail AND NOT 
    (quantity(d) AND
    sum(d) AND 
    nameCustoms(d) AND 
    UOM(d) AND
    customsGroup(d) AND
    noneVATCustomsException(d) AND 
    countrySkuUser(d) AND 
    price(d)
    );

                                                
EXTEND FORM declaration
    OBJECTS di = DeclarationInvoiceDetail
    PROPERTIES(di) nameCustoms, shortNameUOM, nameCountry,                       
                   codeCustomsGroup, nameVATCustomsException,
                   quantity, price, 
                   NEW, DELETE  
    
    PROPERTIES(d) createDeclarationInvoiceDetail DRAW di 
    FILTERS declaration(di) == d
    
    FILTERGROUP notParams 
        FILTER 'Без параметров' filterDeclaration(id) 'F11' 
        FILTER 'Без наим. (декл.)' NOT nameCustoms(id) 'F10'
        FILTER 'Без ед. изм.' NOT UOM(id) 'F9'
        FILTER 'Без ТН ВЭД' NOT customsGroup(id) 'F8'
        FILTER 'Без льготы НДС' NOT noneVATCustomsException(id) 'F7'
        FILTER 'Без страны пр-ва' NOT countrySkuUser(id) 'F6'
        FILTER 'Без кол-ва' NOT quantity(id) 'F6'                
        FILTER 'Без цены' NOT price(id) 'ctrl F5'           
        FILTER 'Без суммы' NOT sum(id) 'shift F5'   
;
DESIGN declaration {
    declarationDetails {
        MOVE BOX(di);
    }
}

//------------------------------------------ Строки декларации -------------------------------------------------------//

CLASS DeclarationDetail 'Строка декларации';
TABLE declarationDetail(DeclarationDetail);

declaration = DATA Declaration(DeclarationDetail) NONULL DELETE;

@defineDocumentPosted(declaration);
@defineDocumentHeaderCount(declaration);

isExported 'Экспортирован' = DATA BOOLEAN (Declaration); 
isExported 'Экспортирован' (DeclarationDetail d) = isExported(declaration(d));

EXTEND FORM declaration
    PROPERTIES(d) isPosted, isExported
    EVENTS
        ON OK prePost(d)
;

DESIGN declaration {
    header {
       MOVE PROPERTY(isPosted(d)) FIRST;
       MOVE PROPERTY(isExported(d)) AFTER PROPERTY(isPosted(d));
    }
    PROPERTY(formOk()) {
        caption = 'Провести';
    }
}

// Свойства полученные от декларации
date 'Дата' (DeclarationDetail d) = date(declaration(d));

homeCurrency (DeclarationDetail d) = homeCurrency(declaration(d));

// Первичные свойства для строк деклараций
nameCustoms 'Наименование' = DATA ISTRING[255](DeclarationDetail);
extraName 'Дополнительная информация' = ABSTRACT STRING[617] (DeclarationDetail);

UOM = DATA UOM(DeclarationDetail);
idUOM 'Код ед. изм.' (DeclarationDetail declarationDetail) = id(UOM(declarationDetail));
shortNameUOM 'Ед. изм.' (DeclarationDetail declarationDetail) = shortName(UOM(declarationDetail));

customsGroup = DATA CustomsGroup(DeclarationDetail);
codeCustomsGroup 'ТН ВЭД' (DeclarationDetail declarationDetail) = code(customsGroup(declarationDetail)) CHARWIDTH 10 NOFLEX IN id;

country = DATA Country(DeclarationDetail);
nameCountry 'Страна' (DeclarationDetail declarationDetail) = name(country(declarationDetail));
sidCountry 'Код страны' (DeclarationDetail declarationDetail) = sid(country(declarationDetail));
sidOrigin2Country 'Код страны' (DeclarationDetail declarationDetail) = sidOrigin2(country(declarationDetail));

quantity 'Кол-во' = DATA NUMERIC[14,3](DeclarationDetail);
price 'Цена' = DATA NUMERIC[16,4] (DeclarationDetail);
sum 'Стоимость' (d) = DATA NUMERIC[18,4] (DeclarationDetail);
sum(DeclarationDetail d) <- price(d) * quantity(d)
    WHEN CHANGED(price(d)) OR CHANGED(quantity(d));

sumNetWeight 'Вес нетто' = DATA NUMERIC[9,3] (DeclarationDetail);
sumGrossWeight 'Вес брутто' = DATA NUMERIC[9,3] (DeclarationDetail);

sumNetWeightDeclarationDetail 'Вес нетто' (declaration)= GROUP SUM sumNetWeight(DeclarationDetail detail) 
    BY declaration(detail);
sumGrossWeightDeclarationDetail 'Вес брутто' (declaration)= GROUP SUM sumGrossWeight(DeclarationDetail detail) 
    BY declaration(detail);
    
netWeight 'Вес нетто (за ед.)' (DeclarationDetail d)= sumNetWeight(d)/(quantity(d) IF quantity(d)!=0.0); 
grossWeight 'Вес нетто (за ед.)' (DeclarationDetail d) = sumGrossWeight(d)/(quantity(d) IF quantity(d)!=0.0); 

// ------ Дополнительные расходы ----- //

// Доставка
deliverySum 'Тр. расходы' = DATA NUMERIC[16,4] (DeclarationDetail);

// Услуги
chargeSum 'Услуги' = DATA NUMERIC[16,4] (DeclarationDetail);

// Суммы в национальной валюте
homeSum 'Стоимость (декл.)' = DATA NUMERIC[18,4](DeclarationDetail) CHARWIDTH 12;
homePrice 'Цена (декл.)' (DeclarationDetail d) = homeSum(d) / quantity(d);

WHEN LOCAL FORMS declaration (CHANGED(sum(DeclarationDetail d)) OR CHANGED(rateExchange(declaration(d))) OR
                               CHANGED(deliverySum(d)) OR CHANGED(chargeSum(d))) AND NOT isExported(d) DO
    homeSum(d) <- round((sum(d) * rateExchange(declaration(d))) (+)
                                   deliverySum(d) (+) chargeSum(d), homeCurrency(d));

// -- Платежи

// Пошлина
percentDuty 'Пошлина, %' = DATA NUMERIC[14,3] (DeclarationDetail);
weightDuty 'Пошлина, (мин.)' = DATA NUMERIC[14,3] (DeclarationDetail);

WHEN LOCAL FORMS declaration (CHANGED(customsGroup(DeclarationDetail d)) OR CHANGED(date(d))) AND NOT isExported(d) DO {
    percentDuty(d) <- percentDuty(customsGroup(d), date(d));
    weightDuty(d) <- weightDuty(customsGroup(d), date(d));
}

dutySum 'Пошлина' = DATA NUMERIC[18,4] (DeclarationDetail) CHARWIDTH 12;

// НДС
VAT 'НДС' = DATA Range(DeclarationDetail);
numberVAT 'НДС, номер' (DeclarationDetail d) = number(VAT(d));
percentVAT 'НДС, %' (DeclarationDetail d) = valueRate(VAT(d), date(d));

CONSTRAINT country(legalEntity(declaration(DeclarationDetail declarationDetail))) != country(VAT(declarationDetail))
    CHECKED BY VAT[DeclarationDetail] MESSAGE 'Страна шкалы налога должна соответствовать стране импортёра';

VATCustomsException 'Льгота НДС' = DATA VATCustomsException(DeclarationDetail);
nameVATCustomsException 'Льгота НДС' (DeclarationDetail d) = name(VATCustomsException(d));

CONSTRAINT customsGroup(DeclarationDetail d) AND VATCustomsException(d) AND NOT customsGroup(VATCustomsException(d)) == customsGroup(d)
    CHECKED BY VATCustomsException[DeclarationDetail] MESSAGE 'Льгота НДС должна соответствовать ТН ВЭД';

WHEN LOCAL FORMS declaration (CHANGED(customsGroup(DeclarationDetail d)) OR CHANGED(VATCustomsException(d)) OR CHANGED(date(d))) AND NOT isExported(d) DO
    VAT(d) <- IF VATCustomsException(d) THEN
                                   range(VATCustomsException(d))
                               ELSE
                                   VAT(customsGroup(d), date(d));

VATSum 'НДС' = DATA NUMERIC[18,4] (DeclarationDetail) CHARWIDTH 12;

// Порядковый номер строки
userNumber 'Пользовательский номер' (declarationDetail) = DATA INTEGER (DeclarationDetail);

notOrderCustomsGroup 'Не сортировать по коду ТНВЭД строки декларации' = DATA BOOLEAN ();     

EXTEND FORM options
    PROPERTIES () notOrderCustomsGroup                                                                 
;  
DESIGN options {
    customs {
        MOVE PROPERTY(notOrderCustomsGroup()); 
    }
}

numberOrder (DeclarationDetail d) = ABSTRACT VALUE STRING[100] (DeclarationDetail);
numberOrder (DeclarationDetail d) += STRING[100](codeCustomsGroup(d) IF NOT notOrderCustomsGroup());
numberDefault 'Номер' (DeclarationDetail d) =
        PARTITION SUM 1 IF d IS DeclarationDetail AND NOT userNumber(d)
        ORDER numberOrder(d), d BY declaration(d);

number 'Номер' (DeclarationDetail declarationDetail) = OVERRIDE userNumber(declarationDetail), numberDefault(declarationDetail) CHARWIDTH 4 IN id;

fillExported (Declaration declaration)  { 
    isExported(declaration) <- TRUE;
    userNumber(DeclarationDetail d) <- number(d) WHERE declaration(d)== declaration;
}

maxNumberDeclarationDetail = GROUP MAX number(DeclarationDetail d) BY declaration(d);
maxNumber 'Макс. номер.'= maxNumberDeclarationDetail(declaration(DeclarationDetail d));

WHEN LOCAL FORMS declaration SET (DeclarationDetail d IS DeclarationDetail) IF isExported(d) AND  NOT userNumber(d) DO {
    userNumber(d) <- (maxNumberDeclarationDetail(declaration(d))) + 1;
}

changeNumber(DeclarationDetail d)  { 
    INPUT i = INTEGER DO {
        userNumber(d) <- i;
        IF isExported(declaration(d)) THEN {
            IF i > userNumber(d) THEN {
                userNumber(DeclarationDetail e) <- userNumber(e) - 1 
                    WHERE userNumber(e) > userNumber(d) AND 
                          userNumber(e) <= i AND
                          declaration(e) == declaration(d);         
            } ELSE {
                userNumber(DeclarationDetail e) <- userNumber(e) + 1 
                    WHERE userNumber(e) < userNumber(d) AND 
                          userNumber(e) >= i AND
                          declaration(e) == declaration(d);         
            }
        }
    }
}

    
// Делаем, чтобы номера были уникальными
declarationDetail (declaration, number) = GROUP AGGR DeclarationDetail d WHERE d IS DeclarationDetail BY declaration(d), number(d);

// Итоги по декларации

sumDeclarationDetail 'Стоимость' = GROUP SUM sum(DeclarationDetail declarationDetail)
                                                BY declaration(declarationDetail) CHARWIDTH 15 MATERIALIZED;

deliverySumDeclarationDetail 'Транспортные расходы' = GROUP SUM deliverySum(DeclarationDetail declarationDetail)
                                                                       BY declaration(declarationDetail) CHARWIDTH 15 MATERIALIZED;

chargeSumDeclarationDetail 'Услуги' = GROUP SUM chargeSum(DeclarationDetail declarationDetail)
                                                       BY declaration(declarationDetail) CHARWIDTH 15 MATERIALIZED;

homeSumDeclarationDetail 'Стоимость (декл.)' = GROUP SUM homeSum(DeclarationDetail declarationDetail)
                                                            BY declaration(declarationDetail) CHARWIDTH 15 MATERIALIZED;

dutySumDeclarationDetail 'Пошлина' (declaration) = GROUP SUM dutySum(DeclarationDetail declarationDetail)
                                                                    BY declaration(declarationDetail) CHARWIDTH 15 MATERIALIZED;
dataDutySum 'Пошлина' (declaration) = DATA NUMERIC[18,4] (Declaration) CHARWIDTH 15;                                                                 
dutySum 'Пошлина' (Declaration declaration)  =  OVERRIDE dataDutySum(declaration), dutySumDeclarationDetail(declaration);                                                                    
backgroundDutySum = RGB(222,222,222) IF dataDutySum(Declaration declaration);
changeDutySum(Declaration declaration)  { 
    INPUT n = NUMERIC[18,4] DO
        IF NOT n == dutySumDeclarationDetail(declaration) THEN {
            dataDutySum(declaration) <- n;    
        }
}

VATSumDeclarationDetail 'НДС' (declaration) = GROUP SUM VATSum(DeclarationDetail declarationDetail)
                                                                   BY declaration(declarationDetail) CHARWIDTH 15 MATERIALIZED;
dataVATSum 'НДС' (declaration) = DATA NUMERIC[18,4] (Declaration) CHARWIDTH 15;  
VATSum 'НДС' (Declaration declaration)  = OVERRIDE dataVATSum(declaration), VATSumDeclarationDetail(declaration);
backgroundVATSum = RGB(222,222,222) IF dataVATSum(Declaration declaration);
changeVATSum(Declaration declaration)  { 
    INPUT n = NUMERIC[18,4] DO
        IF NOT n == VATSumDeclarationDetail(declaration) THEN {
            dataVATSum(declaration) <- n;    
        }
}

//------------------------------------ Корректировка таможенной стоимости ---------------------------------------------//

CLASS DeclarationAdjustment 'КТС';
TABLE declarationAdjustment(DeclarationAdjustment);
TABLE declarationAdjustmentDeclarationDetail(DeclarationAdjustment, DeclarationDetail);

declaration = DATA Declaration(DeclarationAdjustment) NONULL DELETE;//

number 'Номер' (DeclarationAdjustment declarationAdjustment) = DATA INTEGER (DeclarationAdjustment);
declarationAdjustment (declarationAdjustment, number) = GROUP AGGR DeclarationAdjustment d BY declaration(d), number(d);

date 'Дата' = DATA DATE (DeclarationAdjustment);
name 'Наименование' = DATA ISTRING[150] (DeclarationAdjustment);
note 'Примечание' = DATA STRING[100](DeclarationAdjustment) CHARWIDTH 30;
homeSum 'Стоимость корр.' = DATA NUMERIC[18,4](DeclarationAdjustment, DeclarationDetail);
dutySum 'Пошлина корр.' = DATA NUMERIC[18,4](DeclarationAdjustment, DeclarationDetail);
VATSum 'НДС корр.' = DATA NUMERIC[18,4](DeclarationAdjustment, DeclarationDetail);

date (DeclarationAdjustment o) <- currentDate() WHEN SET(o IS DeclarationAdjustment);

defaultHomeDeclarationAdjustment (DeclarationDetail detail) = GROUP
    LAST DeclarationAdjustment adjustment
    ORDER date(adjustment), adjustment
    WHERE homeSum(adjustment, detail);

defaultDutyDeclarationAdjustment (DeclarationDetail detail) = GROUP
    LAST DeclarationAdjustment adjustment
    ORDER date(adjustment), adjustment
    WHERE dutySum(adjustment, detail);

defaultVATDeclarationAdjustment (DeclarationDetail detail) = GROUP
    LAST DeclarationAdjustment adjustment
    ORDER date(adjustment), adjustment
    WHERE VATSum(adjustment, detail);
    
homeSum 'Сумма корр.' (DeclarationAdjustment a) = GROUP SUM homeSum(a, DeclarationDetail dd);
dutySum 'Пошлина корр.' (DeclarationAdjustment a) = GROUP SUM dutySum(a, DeclarationDetail dd);
VATSum 'НДС корр.' (DeclarationAdjustment a) = GROUP SUM VATSum(a, DeclarationDetail dd);

homeSumToPay 'Сумма к доплате' (DeclarationAdjustment a, DeclarationDetail dd) =   homeSum(a,dd) - homeSum(dd);
dutySumToPay 'Пошлина к доплате' (DeclarationAdjustment a, DeclarationDetail dd) =   dutySum(a,dd) - dutySum(dd);
VATSumToPay 'НДС к доплате' (DeclarationAdjustment a, DeclarationDetail dd) =   VATSum(a,dd) - VATSum(dd);

homeSumToPay 'Сумма к доплате' (DeclarationAdjustment a)=  GROUP SUM homeSumToPay(a, DeclarationDetail dd);
dutySumToPay 'Пошлина к доплате' (DeclarationAdjustment a) = GROUP SUM dutySumToPay(a, DeclarationDetail dd);
VATSumToPay 'НДС к доплате' (DeclarationAdjustment a) = GROUP SUM VATSumToPay(a, DeclarationDetail dd);

changeHomeSum (DeclarationAdjustment a, DeclarationDetail d)  { 
    INPUT n = NUMERIC[18,4] DO 
        IF n THEN {
            IF NOT n == homeSumToPay(a,d) THEN {
                homeSum(a, d) <- n (+) homeSum(d);            
            }
        } ELSE
            homeSum(a,d)<- NULL;
}
changeDutySum (DeclarationAdjustment a, DeclarationDetail d)  { 
    INPUT n = NUMERIC[18,4] DO
        IF n THEN {
            IF NOT n == dutySumToPay(a,d) THEN {
                
                IF NOT homeSum(a,d) THEN {
                    homeSum(a,d) <- homeSum(d);
                }
                dutySum(a,d) <- n (+) dutySum(d);            
            }       
        } ELSE
            dutySum(a, d) <- NULL;
}
changeVATSum (DeclarationAdjustment a, DeclarationDetail d)  { 
    INPUT n = NUMERIC[18,4] DO
        IF n THEN {
            IF NOT n == VATSumToPay(a, d) THEN {            
                IF NOT homeSum(a, d) THEN {
                    homeSum(a, d) <- homeSum(d);
                } 
                VATSum(a, d) <- n (+) VATSum(d);
            }
        } ELSE
            VATSum(a, d) <- NULL;
}

adjustHomeSum 'Стоимость (корр.)' (DeclarationDetail d) = OVERRIDE homeSum(defaultHomeDeclarationAdjustment(d),d), homeSum(d);
adjustHomePrice 'Цена (корр.)' (DeclarationDetail d) = adjustHomeSum(d) / quantity(d);

adjustDutySum 'Пошлина (корр.)' (DeclarationDetail d) = OVERRIDE dutySum(defaultDutyDeclarationAdjustment(d),d), dutySum(d);
adjustDutySumDeclarationDetail 'Пошлина (корр.)' (declaration) = GROUP SUM adjustDutySum(DeclarationDetail declarationDetail)
                                                                    BY declaration(declarationDetail) CHARWIDTH 15 MATERIALIZED;

adjustDutySum 'Пошлина (корр.)' (Declaration d) = OVERRIDE dataDutySum(d), adjustDutySumDeclarationDetail(d); 

adjustVATSum 'Сумма НДС (корр.)'(DeclarationDetail d) = OVERRIDE VATSum(defaultVATDeclarationAdjustment(d),d), VATSum(d);
adjustVATPrice 'НДС за ед. (корр.)' (DeclarationDetail d) = adjustVATSum(d) / quantity(d);

adjustVATSumDeclarationDetail 'Пошлина (корр.)' (declaration) = GROUP SUM adjustVATSum(DeclarationDetail declarationDetail)
                                                                    BY declaration(declarationDetail) CHARWIDTH 15 MATERIALIZED;

adjustVATSum 'НДС (корр.)' (Declaration d) = OVERRIDE dataVATSum(d), adjustVATSumDeclarationDetail(d); 

// ---------------------------------------------------- Суммы расходов по документу -------------------------------- //

// Транспортные расходы
deliverySum 'Транспортные расходы' = DATA NUMERIC[18,4] (Declaration) CHARWIDTH 15;
deliverySumRound 'Транспортные расходы (округление)' (Declaration d) = deliverySum(d) (-) deliverySumDeclarationDetail(d);

// Услуги
chargeSum 'Услуги' = DATA NUMERIC[18,4] (Declaration) CHARWIDTH 15;
chargeSumRound 'Услуги (округление)' (Declaration d) = chargeSum(d) (-) chargeSumDeclarationDetail(d);

// Пошлина
dutySumUserInvoiceDetail 'Пошлина (по накладным)' (d) =
    GROUP SUM dutySum(UserInvoiceDetail ud) BY declaration(ud) CHARWIDTH 15;
dutySumRound 'Пошлина (округление)' (Declaration d) = adjustDutySum(d) (-) dutySumUserInvoiceDetail(d);

// Таможенный сбор
registrationSum 'Таможенный сбор' = DATA NUMERIC[18,4] (Declaration) CHARWIDTH 15;

// НДС
VATSumUserInvoiceDetail 'НДС (по накладным)' (d) =
    GROUP SUM quantity(UserInvoiceDetail ud) * VATPrice[InvoiceDetail](ud) BY declaration(ud) CHARWIDTH 15;
VATSumRound 'НДС (округление)' (Declaration d) = adjustVATSum(d) (-) VATSumUserInvoiceDetail(d);

registrationSumUserInvoiceDetail 'Таможенный сбор (по накладным)' (d) =
    GROUP SUM registrationSum(UserInvoiceDetail ud) BY declaration(ud) CHARWIDTH 15;
registrationSumRound 'Таможенный сбор (округление)' (Declaration d) = registrationSum(d) (-) registrationSumUserInvoiceDetail(d);

EXTEND FORM declaration
    PROPERTIES(d)          sumDeclarationDetail
    PROPERTIES(d)          deliverySum, chargeSum
    PROPERTIES(d) READONLY homeSumDeclarationDetail, dutySum BACKGROUND backgroundDutySum(d) CHANGEABLE ON CHANGE changeDutySum(d), adjustDutySum,
                           VATSum BACKGROUND backgroundVATSum(d) CHANGEABLE ON CHANGE changeVATSum(d), registrationSum CHANGEABLE

    PROPERTIES(d) READONLY deliverySumRound, chargeSumRound, dutySumRound, registrationSumRound
;

DESIGN declaration {
    paramsColumn2 {
        NEW sumParams {
            lines = 1;
            caption = 'Суммы документа';
            MOVE PROPERTY(sumDeclarationDetail(d));
            MOVE PROPERTY(deliverySum(d));
            MOVE PROPERTY(chargeSum(d));
            MOVE PROPERTY(homeSumDeclarationDetail(d));
            MOVE PROPERTY(dutySum(d));
            MOVE PROPERTY(adjustDutySum(d));
            MOVE PROPERTY(VATSum(d));
            MOVE PROPERTY(registrationSum(d));
        }
    }
    roundParams {
        MOVE PROPERTY(deliverySumRound(d));
        MOVE PROPERTY(chargeSumRound(d));
        MOVE PROPERTY(dutySumRound(d));
        MOVE PROPERTY(registrationSumRound(d));
    }
}

// ----------------------- Расчет суммы транспортных расходов -------------------------- //

coeffSumGrossWeight 'Удельный вес по весу брутто' = NUMERIC[22,8](sumGrossWeight(DeclarationDetail d)) / sumGrossWeightDeclarationDetail(declaration(d));

calcDeliverySum = Utils.round(deliverySum(declaration(DeclarationDetail d)) * coeffSumGrossWeight(d),
                                         round(declaration(d)));
WHEN LOCAL FORMS declaration CHANGED(calcDeliverySum(DeclarationDetail d)) AND NOT isExported(d) DO {
    deliverySum(d) <- calcDeliverySum(d);
} 

//WHEN LOCAL FORMS declaration CHANGED(sumGrossWeightDeclarationDetailDeclaration(declaration)) 
//    OR CHANGED(deliverySumDeclaration(declaration)) 
//    OR CHANGED(roundDeclaration(declaration)) AND NOT isExportedDeclaration(declaration) DO {
//    
//    deliverySumDeclarationDetail(d) <- calcDeliverySumDeclarationDetail(d) WHERE declarationDeclarationDetail(d)==declaration;
//    
//    IF deliverySumRoundDeclaration(declaration) THEN {
//        LOCAL int = INTEGER();
//        int() <-0;
//        FOR declarationDeclarationDetail(dd) == declaration  AND deliverySumDeclarationDetail(dd)  DO {
//            deliverySumDeclarationDetail(dd)<- round((deliverySumRoundDeclaration(declaration)  (+) deliverySumDeclarationDetail(dd)), roundDeclaration(declaration));
//            int()<- int() + 1;    
//            IF int() > 20 OR NOT deliverySumRoundDeclaration(declaration) THEN BREAK; // выход 
//        }    
//    }
//}

// ----------------------- Расчет суммы услуг -------------------------- //

coeffSum 'Удельный вес по стоимости' = NUMERIC[22,8](sum(DeclarationDetail d)) / sumDeclarationDetail(declaration(d));

calcChargeSum = Utils.round(chargeSum(declaration(DeclarationDetail d)) * coeffSum(d),
                                       round(declaration(d)));
WHEN LOCAL FORMS declaration CHANGED(calcChargeSum(DeclarationDetail d)) AND NOT isExported(d) DO {
    chargeSum(d) <- calcChargeSum(d);
} 

//WHEN LOCAL FORMS declaration CHANGED(sumDeclarationDetailDeclaration(declaration)) 
//    OR CHANGED(chargeSumDeclaration(declaration)) 
//    OR CHANGED(roundDeclaration(declaration)) AND NOT isExportedDeclaration(declaration) DO {
//    
//    chargeSumDeclarationDetail(d) <- calcChargeSumDeclarationDetail(d) WHERE declarationDeclarationDetail(d)==declaration;
//    
//    IF chargeSumRoundDeclaration(declaration) THEN {
//        LOCAL int = INTEGER();
//        int() <-0;
//        FOR declarationDeclarationDetail(dd) == declaration  AND chargeSumDeclarationDetail(dd)  DO {
//            chargeSumDeclarationDetail(dd)<- round((chargeSumRoundDeclaration(declaration)  (+) chargeSumDeclarationDetail(dd)), roundDeclaration(declaration));
//            int()<- int() + 1;    
//            IF int() > 20 OR NOT chargeSumRoundDeclaration(declaration) THEN BREAK; // выход 
//        }    
//    }
//}

// -------------------------------- Расчет таможенных пошлин -------------------------- //

calcSumPriceDuty 'Пошлина по стоимости' (DeclarationDetail declarationDetail) =
    homeSum(declarationDetail) * percentDuty(declarationDetail) / 100.0;

calcSumWeightDuty 'Пошлина, (мин.)' (DeclarationDetail declarationDetail) = sumNetWeight(declarationDetail) *
                                                                           weightDuty(declarationDetail) *
                                                                           rateExchangeCustomsZone(declaration(declarationDetail));

isWeightDuty (DeclarationDetail d) = calcSumWeightDuty(d) > calcSumPriceDuty(d);  

calcDutySum 'Пошлина' (DeclarationDetail d) = round((MAX calcSumWeightDuty(d),
                                                                     calcSumPriceDuty(d)),
                                                                homeCurrency(d)) CHARWIDTH 12;

WHEN LOCAL FORMS declaration CHANGED(calcDutySum(DeclarationDetail d)) AND NOT CHANGED(dutySum(d)) AND NOT isExported(d) DO
    dutySum(d) <- calcDutySum(d);

// -------------------------------- Расчет НДС -------------------------- //

extraSum = ABSTRACT NUMERIC[18,4] (DeclarationDetail);
baseVATSum(DeclarationDetail d) = homeSum(d) (+) dutySum(d) (+) extraSum(d); 

calcVATSum 'НДС' (DeclarationDetail d) =
    round(baseVATSum(d) *
                       percentVAT(d) / 100.0,
                       homeCurrency(d)) CHARWIDTH 12;

WHEN LOCAL FORMS declaration
    (CHANGED(homeSum(DeclarationDetail d)) OR CHANGED(dutySum(d)) OR CHANGED(extraSum(d)) OR
    CHANGED(VAT(d)) OR CHANGED(homeCurrency(d))) AND NOT CHANGED(VATSum(d)) AND NOT isExported(d) DO
    VATSum(d) <- calcVATSum(d);

// ------------------------------ Таможенный сбор ----------------------------- //

registrationSum 'Таможенный сбор (валют.)' (DeclarationDetail d) =
    registration(customsGroup(d), date(d));

maxRegistrationSum 'Таможенный сбор (валют.)' (d) =
    GROUP MAX registrationSum(DeclarationDetail dd) BY declaration(dd);

calcRegistrationSum 'Таможенный сбор' (Declaration d) = round(maxRegistrationSum(d) *
                                                                          rateExchangeCustomsZone(d),
                                                                          homeCurrency(d)) CHARWIDTH 12;

// -------------- Связь строк деклараций и строк накладных ---------------------- //

declarationInvoiceDetail = DATA DeclarationInvoiceDetail(DeclarationDetail);
in 'Вкл.' (DeclarationInvoiceDetail id, DeclarationDetail dd) = declarationInvoiceDetail(dd) == id;

countDeclarationDetail(did) = GROUP SUM 1 BY declarationInvoiceDetail(DeclarationDetail d);
countDeclarationInvoiceDetail(DeclarationDetail dd) = countDeclarationDetail(declarationInvoiceDetail(dd));

//declarationDetailDeclarationInvoiceDetail = DATA DeclarationDetail(DeclarationInvoiceDetail);
//inDeclarationInvoiceDetailDeclarationDetail 'Вкл.' (id, dd) = declarationDetailDeclarationInvoiceDetail(id) == dd;

in (DeclarationDetail d, UserInvoiceDetail i) = declarationInvoiceDetail(d) == declarationInvoiceDetail(i);
in (DeclarationDetail d, i) = GROUP SUM 1 IF in (d, UserInvoiceDetail ui) BY userInvoice(ui);

invoices 'Накладные' (DeclarationDetail d) =
    GROUP
              CONCAT seriesNumber[Invoice](UserInvoice i) IF in(d, i), ',' ORDER i CHARWIDTH 20;

dateInvoices 'Даты накладных' (DeclarationDetail d) =
    GROUP
              CONCAT toDateDDMMYY(date[Invoice](UserInvoice i)) IF in(d, i), ',' ORDER i CHARWIDTH 20;

nameSupplier 'Поставщики' (DeclarationDetail d) = 
    GROUP
              CONCAT nameSupplier[Invoice](UserInvoice i) IF in(d, i), ',' ORDER i CHARWIDTH 20;

// --------------------------------- Ограничение на строки декларации ----------------------------------- //

sumNetWeightDeclarationDetail (d) = GROUP SUM sumNetWeight(DeclarationDetail dd) BY declarationInvoiceDetail(dd); 
sumGrossWeightDeclarationDetail (d) = GROUP SUM sumGrossWeight(DeclarationDetail dd) BY declarationInvoiceDetail(dd);
sumDeclarationDetail (d) = GROUP SUM sum(DeclarationDetail dd) BY declarationInvoiceDetail(dd);

CONSTRAINT sumNetWeightDeclarationDetail(DeclarationInvoiceDetail d) != sumNetWeight(d) 
    MESSAGE 'Вес нетто строк деклараций не соответствует весу нетто позиции декларации'; 
CONSTRAINT sumGrossWeightDeclarationDetail(DeclarationInvoiceDetail d) != sumGrossWeight(d) 
    MESSAGE 'Вес брутто строк деклараций не соответствует весу брутто позиции декларации'; 
CONSTRAINT sumDeclarationDetail(DeclarationInvoiceDetail d) != sum(d) 
    MESSAGE 'Сумма строк деклараций не соответствует сумме позиции декларации'; 
    
    
backgroundSumNetWeight (DeclarationInvoiceDetail d) =  RGB(255,128,128) IF (sumNetWeightDeclarationDetail(d) != sumNetWeight(d)) OR (NOT sumNetWeightDeclarationDetail(d));  
backgroundSumGrossWeight (DeclarationInvoiceDetail d) =  RGB(255,128,128) IF (sumGrossWeightDeclarationDetail(d) != sumGrossWeight(d)) OR (NOT sumGrossWeightDeclarationDetail(d));  
backgroundSum (DeclarationInvoiceDetail d) =  RGB(255,128,128) IF (sumDeclarationDetail(d) != sum(d)) OR (NOT sumDeclarationDetail(d));  

EXTEND FORM declaration
    PROPERTIES(di) AFTER nameCountry(di) 
                   sumNetWeight BACKGROUND backgroundSumNetWeight(di), 
                   sumGrossWeight BACKGROUND backgroundSumGrossWeight(di) 
    PROPERTIES(di) AFTER price(di) sum BACKGROUND backgroundSum(di)

;

// -------------------------------------- Создание строк по позициям деклараций -------------------------- //

noneVATCustomsException(DeclarationInvoiceDetail d) = OVERRIDE VATCustomsException(d), VATCustomsException.none;

isSet = ABSTRACT BOOLEAN (DeclarationInvoiceDetail);
overSet  ABSTRACT LIST ( DeclarationInvoiceDetail);

overCreate  ABSTRACT LIST ( DeclarationDetail, DeclarationInvoiceDetail);

createDeclarationDetail 'Создать строки'(Declaration declaration)  { 
    DELETE DeclarationDetail d WHERE declaration(d) == declaration;
    FOR declaration(DeclarationInvoiceDetail did) == declaration ORDER did  DO {
        IF isSet(did) THEN {
            overSet(did);
        } ELSE {    
            FOR declaration(did) == declaration ORDER did NEW dd = DeclarationDetail DO {
                declaration(dd) <- declaration;
                declarationInvoiceDetail(dd) <- did;
                
                nameCustoms(dd) <- nameCustoms(did);
                UOM(dd) <- UOM(did); 
                country(dd) <- country(did); 
                
                sumNetWeight(dd) <- sumNetWeight (did);
                sumGrossWeight(dd) <- sumGrossWeight (did);
                
                customsGroup(dd) <- customsGroup (did);
                VATCustomsException(dd) <- VATCustomsException(did);
                
                quantity(dd) <- quantity(did);          
                price(dd) <- price(did);
                sum(dd) <- sum(did);          
                
                overCreate(dd, did);
            }         
        }
    }
    registrationSum(declaration) <- calcRegistrationSum(declaration);
} TOOLBAR CONFIRM;

WHEN LOCAL FORMS declaration CHANGED(rateExchangeCustomsZone(Declaration d)) OR CHANGED(homeCurrency(d)) DO
    registrationSum(d) <- calcRegistrationSum(d);

//------------------------------ Копирование строк --------------------// 
overCopy  ABSTRACT LIST ( DeclarationDetail, DeclarationDetail);

copy 'Копировать'(DeclarationDetail detail)  { 
    NEW d = DeclarationDetail {          
    
        declaration(d) <-  declaration(detail);
        declarationInvoiceDetail(d) <- declarationInvoiceDetail(detail);
        nameCustoms(d) <- nameCustoms(detail);
        UOM(d) <- UOM(detail);
        country(d) <- country(detail);
        sumNetWeight(d) <-  sumNetWeight(detail);
        sumGrossWeight(d) <-  sumGrossWeight(detail);
        customsGroup(d) <- customsGroup(detail);
        VATCustomsException(d) <- VATCustomsException(detail);
        quantity(d) <- quantity(detail);
        price(d) <- price(detail);
            
        overCopy(d, detail);                              
    }
} TOOLBAR;

backgroundVATCustomsException 'Цвет' (DeclarationDetail declarationDetail) = backgroundVATCustomsException() IF countVATCustomsException(customsGroup(declarationDetail)) > 0;

EXTEND FORM declaration
    OBJECTS dd=DeclarationDetail
    PROPERTIES(di, dd) in
    PROPERTIES(dd) number ON CHANGE changeNumber(dd), invoices READONLY, dateInvoices READONLY, nameCustoms, shortNameUOM,
                   nameCountry, sumNetWeight, sumGrossWeight,
                   codeCustomsGroup, nameVATCustomsException BACKGROUND backgroundVATCustomsException(dd),
                   quantity, price, sum, deliverySum, chargeSum, homeSum,
                   percentDuty, weightDuty, dutySum, 
                   numberVAT, percentVAT, VATSum, registrationSum READONLY,
                   NEW, deletedd = DELETE , copy 
    ORDERS number(dd)

    PROPERTIES (d) createDeclarationDetail DRAW dd 
    FILTERS declaration(dd) == d

    FILTERGROUP filters
        FILTER 'По позициям декларации' declarationInvoiceDetail(dd) == di 'F4' DEFAULT 
;

DESIGN declaration {
    declarationDetails {
        MOVE BOX(dd);
    }
}

EXTEND FORM declarations
    PROPERTIES(d) READONLY isPosted BEFORE number(d)
    PROPERTIES(d) READONLY sumDeclarationDetail, deliverySum, chargeSum,
                           homeSumDeclarationDetail, dutySumDeclarationDetail, VATSumDeclarationDetail, registrationSum

    OBJECTS dd=DeclarationDetail
    PROPERTIES(dd) READONLY number, nameCustoms, nameCountry, sumNetWeight,
                   codeCustomsGroup, quantity, price, sum,
                   deliverySum, chargeSum, homeSum,
                   percentDuty, weightDuty, dutySum,
                   numberVAT, percentVAT, VATSum

    FILTERS declaration(dd)==d
;

DESIGN declarations {
    MOVE TOOLBARBOX;
}

// Перенумерация
numerateDetails 'Перенумеровать' (DeclarationDetail d)  { 
    userNumber(DeclarationDetail dd) <- PARTITION SUM 1 IF dd IS DeclarationDetail
                          ORDER [ ORDER declaration.dd](dd), dd BY declaration(dd) WHERE declaration(dd) == declaration(d);
} ASON CONTEXTMENU number[DeclarationDetail];  

// -------------------------------- Расчет таможенных пошлин -------------------------- //        
        
calcSumPriceDuty 'Пошлина по стоимости' (DeclarationAdjustment adjustment, DeclarationDetail detail) =
    homeSum(adjustment, detail) * percentDuty(detail) / 100.0;

calcDutySum 'Пошлина' (DeclarationAdjustment a, DeclarationDetail d) = round((MAX calcSumWeightDuty(d) IF a IS DeclarationAdjustment,
                                                                     calcSumPriceDuty(a,d)),
                                                                homeCurrency(d)) CHARWIDTH 12;

WHEN LOCAL FORMS declaration (CHANGED(calcDutySum(DeclarationAdjustment a,DeclarationDetail d)) OR CHANGED (homeSum(a,d))) AND homeSum(a,d) AND NOT CHANGED(dutySum(a,d))  DO //AND NOT isExported(d)
    dutySum(a,d) <- calcDutySum(a,d);

//WHEN LOCAL FORMS declaration (CHANGED(dutySum(DeclarationAdjustment a,DeclarationDetail d))) AND NOT CHANGED(homeSum(a,d))  DO 
//    homeSum(a,d) <- homeSum(d);
    
// -------------------------------- Расчет НДС -------------------------- //

baseVATSum(DeclarationAdjustment a, DeclarationDetail d) = homeSum(a,d) (+) dutySum(a,d); 

calcVATSum 'НДС' (DeclarationAdjustment a, DeclarationDetail d) =
    round(baseVATSum(a,d) *
                       percentVAT(d) / 100.0,
                       homeCurrency(d)) CHARWIDTH 12;

WHEN LOCAL FORMS declaration
    (CHANGED(homeSum(DeclarationAdjustment a, DeclarationDetail d)) OR CHANGED(dutySum(a,d)) OR
    CHANGED(VAT(d)) OR CHANGED(homeCurrency(d))) AND homeSum(a,d) AND NOT CHANGED(VATSum(a,d)) DO //AND NOT isExported(d)
    VATSum(a,d) <- calcVATSum(a,d);    
    
    
//------------------------------------ Расчет расходов за единицу -----------------------------------------------------//

// Пошлина
//dutySum(d) = GROUP SUM dutySum(DeclarationDetail dd) BY declarationInvoiceDetail(dd);
dutySum(d) = GROUP SUM adjustDutySum(DeclarationDetail dd) BY declarationInvoiceDetail(dd) MATERIALIZED; 

calcDutySum (UserInvoiceDetail d) =
    PARTITION UNGROUP dutySum
              PROPORTION STRICT ROUND(2) sum(d)
              ORDER d
              BY declarationInvoiceDetail(d);

calcDataDutySum (UserInvoiceDetail d) =
    PARTITION UNGROUP dataDutySum
              PROPORTION STRICT ROUND(2) sum(d)
              ORDER d
              BY declarationDeclarationInvoiceDetail(d);

// Таможенный сбор

calcRegistrationSum 'Таможенный сбор' (UserInvoiceDetail d) =
    PARTITION UNGROUP registrationSum
              PROPORTION STRICT ROUND(2) sum(d)
              ORDER d
              BY declarationDeclarationInvoiceDetail(d);

// НДС
//VATSum(d) = GROUP SUM VATSum(DeclarationDetail dd) BY declarationInvoiceDetail(dd);
VATSum(d) = GROUP SUM adjustVATSum(DeclarationDetail dd) BY declarationInvoiceDetail(dd) MATERIALIZED; 

calcVATSum (UserInvoiceDetail d) =
    PARTITION UNGROUP VATSum
              PROPORTION STRICT ROUND(2) sum(d)
              ORDER d
              BY declarationInvoiceDetail(d);

calcVATPrice 'НДС (ед.)' (UserInvoiceDetail d) = Utils.round(calcVATSum(d) / quantity(d),
                                                           round(declaration(d)));                                                                                                                                                                   
calcDataVATSum (UserInvoiceDetail d) =
    PARTITION UNGROUP dataVATSum
              PROPORTION STRICT ROUND(2) sum(d)
              ORDER d
              BY declaration(d);
calcDataVATPrice 'НДС (ед.)' (UserInvoiceDetail d) = Utils.round(calcDataVATSum(d) / quantity(d),
                                                           round(declaration(d)));     

calcSumCustoms 'Рассчитывать пошлины на всю партию по сумме' = DATA BOOLEAN();
notPaintRounding 'Не расписывать округления сбора, НДС, пошлины' = DATA BOOLEAN ();     
                                                                 
EXTEND FORM options
    PROPERTIES () notPaintRounding, calcSumCustoms                                                                 
;  
DESIGN options {
    customs {
        MOVE PROPERTY(notPaintRounding()); 
        MOVE PROPERTY(calcSumCustoms()); 
    }
}
                                                                      
// Расчет расходов
recalculateDutyPriceInvoice 'Рассчитать пошлины (за ед.)'(Declaration declaration)  { 
   
    IF calcSumCustoms() THEN {
        IF NOT dataDutySum(declaration) THEN {
            dutySum(UserInvoiceDetail d) <- Utils.round(calcDutySum(d), round(declaration(d))) WHERE declaration(d) == declaration;
        } ELSE {
            dutySum(UserInvoiceDetail d) <- Utils.round(calcDataDutySum(d), round(declaration(d))) WHERE declaration(d) == declaration;          
        }
        dutyPrice(UserInvoiceDetail d) <- Utils.round(dutySum(d) / quantity(d), round(declaration(d))) WHERE declaration(d) == declaration;
    } ELSE { 
        IF NOT dataDutySum(declaration) THEN {
            dutyPrice(UserInvoiceDetail d) <- Utils.round(calcDutySum(d) / quantity(d), round(declaration(d))) WHERE declaration(d) == declaration;
        } ELSE {
            dutyPrice(UserInvoiceDetail d) <- Utils.round(calcDataDutySum(d) / quantity(d), round(declaration(d))) WHERE declaration(d) == declaration;   
        }
        IF dutySumRound(declaration) AND NOT notPaintRounding() THEN {
            LOCAL int = INTEGER();
            int() <-0;
            FOR UserInvoiceDetail d == [GROUP MAX UserInvoiceDetail ud IF dutyPrice(ud) BY declaration(ud), quantity(ud), dutyPrice(ud)](declaration, NUMERIC[16,5] quantity, NUMERIC[20,8] price) ORDER quantity, -price DO {
                dutyPrice(d) <- Utils.round(((dutySumRound(declaration) / quantity(d)) (+) dutyPrice(d)), round(declaration));
                int()<- int() + 1;    
                IF int() > 20 OR NOT dutySumRound(declaration) THEN BREAK; // выход
            }
        }
    }
    
} TOOLBAR;

recalculateRegistrationPriceInvoice 'Рассчитать сбор (за ед.)'(Declaration declaration)  { 
    
    IF calcSumCustoms() THEN {
        registrationSum(UserInvoiceDetail d) <- Utils.round(calcRegistrationSum(d), round(declaration(d))) WHERE declaration(d) == declaration;
        
        // устраняем отрицательные
        LOCAL negative = NUMERIC[18,4] ();
        negative () <- [ GROUP SUM registrationSum(UserInvoiceDetail d) IF registrationSum(d) < 0 BY declaration(d)](declaration);
        registrationSum(UserInvoiceDetail d) <- 0 WHERE declaration(d) == declaration AND registrationSum(d) < 0;
        registrationSum(UserInvoiceDetail d) <- registrationSum(d) (+) negative() WHERE d == [ GROUP LAST UserInvoiceDetail ud ORDER sum(ud), ud BY declaration(ud)](declaration); 
        
        registrationPrice(UserInvoiceDetail d) <- Utils.round(registrationSum(d) / quantity(d), round(declaration(d))) WHERE declaration(d) == declaration;
    } ELSE {    
        registrationPrice(UserInvoiceDetail d) <- Utils.round(calcRegistrationSum(d) / quantity(d), round(declaration(d))) WHERE declaration(d) == declaration;
        IF registrationSumRound(declaration) AND NOT notPaintRounding() THEN {
            LOCAL int = INTEGER();
            int() <-0;
            
            FOR UserInvoiceDetail d == [GROUP MAX UserInvoiceDetail ud IF registrationPrice(ud) BY declaration(ud), quantity(ud), registrationPrice(ud)](declaration, NUMERIC[16,5] quantity, NUMERIC[20,8] price) ORDER quantity, -price DO {
                registrationPrice(d)<- Utils.round(((registrationSumRound(declaration) / quantity(d)) (+) registrationPrice(d)), round(declaration));
                int()<- int() + 1;    
                IF int() > 20 OR NOT registrationSumRound(declaration) THEN BREAK; // выход
            }
        }
    }
    
} TOOLBAR;

recalculateVATPriceInvoice 'Рассчитать НДС (за ед.)'(Declaration declaration)  { 

    IF calcSumCustoms() THEN {
        IF NOT dataVATSum(declaration) THEN {
            customsVATSum(UserInvoiceDetail d) <- Utils.round(calcVATSum(d), round(declaration(d))) WHERE declaration(d) == declaration;    
        } ELSE {
            customsVATSum(UserInvoiceDetail d) <- Utils.round(calcDataVATSum(d), round(declaration(d))) WHERE declaration(d) == declaration;  
        }
        VATPrice(UserInvoiceDetail d) <- Utils.round(customsVATSum(d) / quantity(d), round(declaration(d))) WHERE declaration(d) == declaration;    
    } ELSE {
        IF NOT dataVATSum(declaration) THEN {
            VATPrice(UserInvoiceDetail d) <- Utils.round(calcVATSum(d) / quantity(d), round(declaration(d))) WHERE declaration(d) == declaration;    
        } ELSE {
            VATPrice(UserInvoiceDetail d) <- Utils.round(calcDataVATSum(d) / quantity(d), round(declaration(d))) WHERE declaration(d) == declaration;
        }
        IF VATSumRound(declaration) AND NOT notPaintRounding() THEN {
            LOCAL int = INTEGER();
            int() <-0;
            FOR UserInvoiceDetail d == [GROUP MAX UserInvoiceDetail ud IF VATPrice(ud) BY declaration(ud), quantity(ud), VATPrice(ud)](declaration, NUMERIC[16,5] quantity, NUMERIC[20,8] price) ORDER quantity, - price DO {
                VATPrice(d)<- Utils.round(((VATSumRound(declaration) / quantity(d)) (+) VATPrice(d)), round(declaration));
                int()<- int() + 1;    
                IF int() > 20 OR NOT VATSumRound(declaration) THEN BREAK; // выход
            }
        }
    }
} TOOLBAR;                                                                      

EXTEND FORM declaration
    PROPERTIES(d) recalculateDutyPriceInvoice DRAW id, recalculateRegistrationPriceInvoice DRAW id,
                  recalculateVATPriceInvoice DRAW id
;

//-- Операция
@defineOperationProperty(showDeclaration, 'Таможенные платежи', commonContainer);
@deriveDocumentOperationProperty(UserInvoice, showDeclaration);

@defineOperationProperty(showCodeCustomsGroup, 'Показывать код ТНВЭД', commonContainer);
@deriveDocumentOperationProperty(UserInvoice, showCodeCustomsGroup);


//-- Декларирование
overRecalculate ABSTRACT (Declaration);

createDeclarationDetailUser 'Рассчитать платежи' (Invoice userInvoice)  { 
    FOR in(userInvoice, Declaration declaration) DO {
        createDeclarationInvoiceDetail(declaration);
        createDeclarationDetail(declaration);
        FOR declaration(DeclarationDetail detail)== declaration DO {
            homeSum(detail) <- (sum(detail) * rateExchange(declaration(detail))) (+)
                                            deliverySum(detail) (+) chargeSum(detail);
            percentDuty(detail) <- percentDuty(customsGroup(detail), date(detail));
            weightDuty(detail) <- weightDuty(customsGroup(detail), date(detail));
            VAT(detail) <- IF VATCustomsException(detail) THEN
                                           range(VATCustomsException(detail))
                                       ELSE
                                           VAT(customsGroup(detail), date(detail));
            deliverySum(detail) <- calcDeliverySum(detail);
            chargeSum(detail) <- calcChargeSum(detail);
            dutySum(detail) <- calcDutySum(detail);
            VATSum(detail) <- calcVATSum(detail);                                                                                                                                           
                                                                                                                               
        }
        recalculateDutyPriceInvoice(declaration);
        recalculateRegistrationPriceInvoice(declaration);
        overRecalculate(declaration);
    }    
} TOOLBAR; 

useCustomDeclarationForm = ABSTRACT BOOLEAN ();
customDeclarationForm ABSTRACT (UserInvoice);

changeDeclaration(UserInvoice i) {
    IF NOT useCustomDeclarationForm() THEN {
        DIALOG declarations OBJECTS d = declaration(i) CHANGE;   
    } ELSE {
        customDeclarationForm(i);
    }
}

EXTEND FORM userInvoice
    OBJECTS d3 = UserInvoiceDetail GRID
    PROPERTIES(d3) SHOWIF showDeclaration(i) READONLY index, idBarcodeSku, nameSku, descriptionDeclaration, 
                   codeCustomsGroup ON CHANGE changeCustomsGroup(d) CHANGEABLE, nameVATCustomsException, price
    PROPERTIES(d3) SHOWIF showDeclaration(i) dutyPrice, registrationPrice, VATPrice                
    PROPERTIES(i) createDeclarationDetailUser DRAW d3 SHOWIF showDeclaration(i), descriptionDeclarationTabUserInvoice = descriptionDeclaration SHOWIF showDeclaration(i) ON CHANGE changeDeclaration(i)                     
    FILTERS userInvoice(d3) == i                   
                   
;

DESIGN userInvoice{
    specificationBox {
        headerExtraParams {
            headerCustoms {
                MOVE PROPERTY(showDeclaration(i));
            }
        }
        NEW declarationContainer {
            caption = 'Декларирование';
            MOVE PROPERTY(descriptionDeclarationTabUserInvoice);
            MOVE BOX(d3);
        }
    }
}

// --------------------------------------------- Дополнительные документы для декларации ---------------------------- //

CLASS CustomsDocument 'Дополнительные документы декларации';
TABLE customsDocument(CustomsDocument);

order 'Порядок' = DATA INTEGER (CustomsDocument);
id 'Код' = DATA STRING[20] (CustomsDocument);
name 'Наименование' = DATA STRING[150] (CustomsDocument);
date 'Дата' = DATA DATE (CustomsDocument);
sum 'Сумма' = DATA NUMERIC[18,4] (CustomsDocument);
declaration = DATA Declaration (CustomsDocument);

TABLE customsDocumentUserInvoice (CustomsDocument, UserInvoice);
in 'Вкл' = DATA BOOLEAN (CustomsDocument, UserInvoice);

editBackground 'Небесный'  = RGB(127,199,255) IF TRUE; 
payBackground 'Зеленого чая'  = RGB(204,255,204) IF TRUE;  

EXTEND FORM declaration
    OBJECTS cd = CustomsDocument
    PROPERTIES(cd) order, date, id, name, sum
    PROPERTIES(cd) NEW, deleted = DELETE 
    FILTERS declaration(cd) == d
    
    OBJECTS cdu = UserInvoice
    PROPERTIES in(cd, cdu)
    PROPERTIES(cdu) READONLY date, seriesNumber
    FILTERS in(cdu, d)
    
    OBJECTS a = DeclarationAdjustment
    PROPERTIES(a) date, name, note
    PROPERTIES (a)  BACKGROUND editBackground() homeSum, dutySum, VATSum    
    PROPERTIES(a) READONLY BACKGROUND payBackground() homeSumToPay, dutySumToPay, VATSumToPay
       
    PROPERTIES(a) NEW, DELETE  
    FILTERS declaration(a) == d
    
    OBJECTS ddd=DeclarationDetail
    PROPERTIES(ddd) READONLY number, nameCustoms, nameCountry, sumNetWeight,
                   codeCustomsGroup, quantity, price, sum,
                   deliverySum, chargeSum, homeSum,
                   percentDuty, weightDuty, dutySum,
                   numberVAT, percentVAT, VATSum
    PROPERTIES (a,ddd)  BACKGROUND editBackground() homeSum, dutySum, VATSum 
    PROPERTIES (a,ddd)  BACKGROUND payBackground() homeSumToPay ON CHANGE changeHomeSum(a,ddd), dutySumToPay ON CHANGE changeDutySum(a,ddd), VATSumToPay ON CHANGE changeVATSum(a,ddd)
    FILTERS declaration(ddd)==d    
;

DESIGN declaration {
    detail {
        NEW documents {
            horizontal = TRUE;
            caption = 'Дополнительные документы';
            MOVE BOX(cd) {
                fill = 3;
            }
            MOVE BOX(cdu);
        }
        NEW adjustment {
            caption = 'КТС';
            fill = 1;
            MOVE BOX(a);
            MOVE BOX(ddd){fill = 2;}
        }        
    }
}

// ---------------- Связь строки декларации и документов ---------------- //

in (DeclarationDetail dd, CustomsDocument cd) = GROUP
    SUM 1 IF 
    in(cd, UserInvoice ui) AND in(dd, ui) AND declaration(cd) == declaration(dd);  

// -------------------------- Дополнительные платежи для декларации ---------------------------- //

CLASS Payment 'Платеж' ;
TABLE payment (Payment);

@defineDocumentRelation(declaration, Payment, );
@defineDocumentDetailIndex(declaration, Payment);
@defineDocumentDetailActions(declaration, Payment);

name 'Наименование' = DATA ISTRING[50](Payment);

currency = DATA Currency (Payment);
nameCurrency 'Валюта' = name(currency(Payment p)) CHARWIDTH 15;
shortNameCurrency 'Валюта' = shortName(currency(Payment p)) CHARWIDTH 7;

sum 'Сумма' = DATA NUMERIC[18,4](Payment);

rateExchange 'Курс' = DATA NUMERIC[14,3](Payment);

rateSum 'Сумма (конверт.)'= sum(Payment p)*rateExchange(p); 

calcRateExchange 'Курс накладных' (Payment p) = rateOn(typeExchange(declaration(p)), currency(p), date(declaration(p)));
rateExchange(Payment p) <- calcRateExchange(p) WHEN CHANGED (date(declaration(p))) OR
                                                          CHANGED (typeExchange(declaration(p))) OR
                                                          CHANGED (currency(p));

isCharge 'Услуга' = DATA BOOLEAN (Payment);

sumIsCgargePayment 'Сумма платежей по услугам (конверт.)' (declaration) = GROUP SUM rateSum(Payment p) IF isCharge(p) BY declaration(p);
sumNotCgargePayment 'Сумма платежей не по услугам (конверт.)'(declaration) = GROUP SUM rateSum(Payment p) IF NOT isCharge(p) BY declaration(p);

WHEN LOCAL FORMS declaration
    CHANGED(sumIsCgargePayment(Declaration d)) DO
        chargeSum (d) <- NUMERIC[18,4](sumIsCgargePayment(d));

WHEN LOCAL FORMS declaration
    CHANGED(sumNotCgargePayment(Declaration d)) DO
        deliverySum (d) <- NUMERIC[18,4](sumNotCgargePayment(d));
        
EXTEND FORM declaration
    OBJECTS p = Payment
 
    PROPERTIES (p) index, name, nameCurrency, sum, rateExchange, rateSum READONLY, isCharge,
                   NEW, deleteid=DELETE 
    ORDERS index(p)

    PROPERTIES(d) DRAW p deletePayment
    FILTERS declaration(p) == d        
; 

DESIGN declaration {
    detail {
        NEW extraDocuments {
            caption = 'Дополнительные платежи';
            MOVE BOX(p);
        }
    }
}    
 
 