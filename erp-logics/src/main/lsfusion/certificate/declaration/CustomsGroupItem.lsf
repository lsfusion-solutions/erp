MODULE CustomsGroupItem;

REQUIRE CustomsGroup, Item, TaxItem; ///

NAMESPACE CustomsGroup;

customsGroup = DATA CustomsGroup(Country, Item);
codeCustomsGroup 'ТН ВЭД' (Country country, Item item) = code(customsGroup(country, item)) CHARWIDTH 10;
nameCustomsGroup 'Позиция ТН ВЭД' (Country country, Item item) = name(customsGroup(country, item)) CHARWIDTH 30;
canonicalNameCustomsGroup 'Позиция ТН ВЭД' (Country country, Item item) = canonicalName(customsGroup(country, item)) CHARWIDTH 30;
codeCustomsGroupDefaultCountry 'ТН ВЭД' (Item item) = code(customsGroup(defaultCountry(), item)) CHARWIDTH 10;
nameCustomsGroupDefaultCountry 'Позиция ТН ВЭД' (Item item) = name(customsGroup(defaultCountry(), item)) CHARWIDTH 10;
canonicalNameCustomsGroupDefaultCountry 'Позиция ТН ВЭД' (Item item) = canonicalName(customsGroup(defaultCountry(), item)) CHARWIDTH 10;

@defineStringItemAttribute(originalCustomsGroup, BPSTRING[12], 'Код ТНВЭД (ориг.)', itemOriginal);
@defineItemAttributeBatch (originalCustomsGroup, 'Код ТНВЭД (ориг.)');

VAT(Country country, Item item, DATE date) = VAT(customsGroup(country, item), date);

dataValueVAT 'НДС, %' (Country country, Item item, DATE date) = valueRate(VAT(country, item, date), date);

customsZoneDefaultCountry = customsZone(defaultCountry());

requestInputChangeCustomsCode 'Возможность ввода ТНВЭД по коду' = DATA BOOLEAN ();
EXTEND FORM options PROPERTIES() requestInputChangeCustomsCode;
DESIGN options { customs { MOVE PROPERTY(requestInputChangeCustomsCode()); } }

// Действие по изменению кода ТНВЭД через ручной ввод
changeCodeCustomsGroup(Country country, Item item)  { 
    IF requestInputChangeCustomsCode() THEN {
        INPUT s = BPSTRING[10] DO {
            IF customsGroup(rpad(s, 10, '0')) OR NOT s THEN {
                customsGroup(country, item) <- customsGroup(rpad(s, 10, '0')); 
            } ELSE {
                caption() <- caption(item);
                article() <- id(item);
                originalCustomsGroup() <- originalCustomsGroup(item);
                composition() <- composition(item);
                DIALOG customsGroups OBJECTS cz = customsZoneDefaultCountry(), cg = nearestCustomsGroup(s) INPUT NULL DO
                    customsGroup(country, item) <- cg;
            }
        }
    } ELSE {
        DIALOG customsGroups OBJECTS cz = customsZone(country), cg = customsGroup(country, item) CHANGE LIST code(cg);
    }
}

changeCustomsGroupDefaultCountry(Item item)  { 
    DIALOG customsGroups OBJECTS cz = customsZoneDefaultCountry(), cg = customsGroup(defaultCountry(), item) INPUT NULL LIST code(cg) DO 
        customsGroup(Country country, item) <- cg WHERE country == defaultCountry();
}

customsGroup(Country country, Item sku) += customsGroup(country, sku);

CONSTRAINT customsZone(customsGroup(Country country, Item item)) != customsZone(country) CHECKED BY customsGroup[Country,Item]
    MESSAGE 'Таможенная зона должна соответствовать стране';

VATCustomsException = DATA VATCustomsException(Country, Item);
nameVATCustomsException 'Льгота НДС' (Country country, Item item) = name(VATCustomsException(country, item)) CHARWIDTH 30;
nameVATCustomsExceptionDefaultCountry 'Льгота НДС' (Item item) = name(VATCustomsException(defaultCountry(), item)) CHARWIDTH 30;
dataValueVATCustomsException 'Льгота НДС, %' (Country country, Item item, DATE date) = dataValue(VATCustomsException(country, item), date) CHARWIDTH 6;

rangeVATCustomsException(Country country, Item item) = range(VATCustomsException(country, item));

changeCustomsExceptionDefaultCountry(Item item)  { 
    DIALOG VATCustomsExceptions OBJECTS vce = VATCustomsException(defaultCountry(), item) INPUT NULL LIST name(vce) DO
        VATCustomsException(Country country, item) <- vce WHERE country == defaultCountry();
}

VATCustomsException(Country country, Item sku) += VATCustomsException(country, sku);

CONSTRAINT customsGroup(Country country, Item item) AND VATCustomsException(country, item) AND NOT customsGroup(VATCustomsException(country, item)) == customsGroup(country, item)
    CHECKED BY VATCustomsException[Country,Item] MESSAGE 'Льгота должна соответствовать ТН ВЭД';

background 'Цвет' (Country country, Sku sku) = RGB(212, 255, 212) IF countVATCustomsException(customsGroup(country, sku)) > 0;

notCustomsGroupChangeItemVAT 'Не изменять НДС при изменинии ТНВЭД в карточке товара'  = DATA BOOLEAN ();
EXTEND FORM options
    PROPERTIES () notCustomsGroupChangeItemVAT
;
DESIGN options{
    customs{
        MOVE PROPERTY (notCustomsGroupChangeItemVAT());
    }
}

changeCustomsGroup(Country country, Item item, DATE date)  { 
    DIALOG customsGroups OBJECTS cg = customsGroup(country, item) INPUT NULL LIST code(cg) DO {
        customsGroup(country, item) <- cg;
        IF NOT customsGroup(VATCustomsException(country, item)) == cg THEN
            VATCustomsException(country, item) <- NULL;
            
        VAT(item, country) <- (IF VATCustomsException(country, item) THEN
                                            rangeVATCustomsException(country, item)
                                         ELSE
                                            VAT(country, item, date)) WHERE NOT notCustomsGroupChangeItemVAT();
    } 
}

changeVATCustomsException(Country country, Item item, DATE date)  { 
    DIALOG VATCustomsExceptions OBJECTS cg = customsGroup(country, item), vce = VATCustomsException(country, item) INPUT NULL LIST name(vce) DO {
        VATCustomsException(country, item) <- vce;
        VAT(item, country) <- IF vce IS VATCustomsException THEN
                                            rangeVATCustomsException(country, item)
                                         ELSE
                                            VAT(country, item, date);
    }
}


EXTEND FORM item
    PROPERTIES(c, i) codeCustomsGroup BEFORE numberVAT(i, c) ON CHANGE changeCustomsGroup(c, i, dtr),
                     nameVATCustomsException BEFORE numberVAT(i, c) ON CHANGE changeVATCustomsException(c, i, dtr) BACKGROUND background(c, i)
    PROPERTIES(i) codeCustomsGroupDefaultCountry ON CHANGE changeCustomsGroupDefaultCountry(i),
                  nameVATCustomsExceptionDefaultCountry ON CHANGE changeCustomsExceptionDefaultCountry(i)
;

DESIGN item {
    regionPrm {
//        NEW PROPERTY(originalCustomsGroupItem(i));
        MOVE PROPERTY(codeCustomsGroupDefaultCountry(i));
        MOVE PROPERTY(nameVATCustomsExceptionDefaultCountry(i));
    }
}

EXTEND FORM items
    PROPERTIES(i) READONLYIF isReadonly() codeCustomsGroupDefaultCountry ON CHANGE changeCustomsGroupDefaultCountry(i), canonicalNameCustomsGroupDefaultCountry
;

overCopy(Item s, Item d) + { 
    customsGroup(Country c,d) <- customsGroup(c,s) WHERE customsGroup(c,s);
    originalCustomsGroup(d) <- originalCustomsGroup(s); 
}

//----------------------- Переход на новый основной классификатор ---------------------------//
overReplaceToItemGroup(CustomGroup g, ItemGroup ng) + {
    userShowOriginalCustomsGroup(ng) <- userShowOriginalCustomsGroup(itemGroup(g));
}