MODULE ArticleCustomsDashboard;

REQUIRE ArticleTranslateDashboard, 
        CustomsGroupArticle, 
        ComplianceGroupArticle,
        ItemFashion;
        
NAMESPACE Item;

// Обработка статуса

completedCustoms 'Обработан' = DATA BOOLEAN (Item);
notCompletedCustoms 'Не обработан' (article) = GROUP SUM 1 IF Item i IS Item AND NOT completedCustoms(i) BY article(i) MATERIALIZED INDEXED;
completedCustoms 'Обработан' = Article a IS Article AND NOT notCompletedCustoms(a);

changeCompletedCustoms (Article article)  { 
    INPUT b = BOOLEAN DO
        completedCustoms(Item item) <- b WHERE article(item) == article; 
}

// Подсчет необработанных артикулов для групп
countNotCompletedCustomsArticles 'Не обработано (к-во)' (group) = GROUP SUM 1 IF completedTranslate(Article article) AND notCompletedCustoms(article) BY itemGroup(article);
recCountNotCompletedCustomsArticles 'Не обработано (к-во)' (ItemGroup parent) = GROUP SUM countNotCompletedCustomsArticles(ItemGroup child) IF isParent(child, parent);

// Не заполнены атрибуты
nullCustoms 'Без атрибутов' (Country country, Item item) =  item IS Item AND country IS Country AND NOT customsGroup(country, item) AND NOT completedCustoms(item);
nullCustoms 'Без атрибутов' (Country country, article) = GROUP SUM 1 IF Item item IS Item AND country IS Country AND NOT customsGroup(country, item) AND NOT completedCustoms(item) BY article(item);

// todo : workaround, так как нельзя в сессионных событиях обращаться к форме
dateArticleCustomsDashboard 'Дата' = DATA DATE (User);
dateArticleCustomsDashboard 'Дата' () = dateArticleCustomsDashboard(currentUser());
setDateArticleCustomsDashboard()  { dateArticleCustomsDashboard(User u) <- currentDate() WHERE u == currentUser(); }

changeDateArticleCustomsDashboard()  { 
    INPUT d = DATE DO
        dateArticleCustomsDashboard(User u) <- d WHERE u == currentUser();
}

filterCustomsInvoice= DATA LOCAL Purchase.Invoice ();
descriptionFilterCustomsInvoice 'Накладная' = description(filterCustomsInvoice());

FORM articleCustomsDashboard 'Заполнение ТНВЭД'

    PROPERTIES seriesNumberDateInvoicesCurrentUser() READONLY, selectPurchaseInvoicesCurrentUser()
    OBJECTS c=Country PANEL
    PROPERTIES(c) SELECTOR name

    PROPERTIES dateArticleCustomsDashboard() ON CHANGE changeDateArticleCustomsDashboard()

    TREE groupTree g=ItemGroup PARENT parent(g)
    PROPERTIES READONLY order(g),name(g), recCountNotCompletedCustomsArticles(g)
    ORDERS order(g), name(g)
    FILTERS active(g)
    FILTERGROUP notCustomsFilters
        FILTER 'Не обработан' recCountNotCompletedCustomsArticles(g) 'F6'

    OBJECTS a=Article
    PROPERTIES(a) READONLY nameBrand, id, canonicalNameItemGroup PANEL, 
                           originalCustomsGroup, caption, composition, nameUOM, nameCountry, netWeight, grossWeight, nameGender
    PROPERTIES(c, a) BACKGROUND hintEditableBackground() codeCustomsGroup ON CHANGE changeCodeCustomsGroup(c, a) ON CHANGEWYS changeWYSCodeCustomsGroup(c, a), nameCustomsGroup, nameComplianceGroup
    PROPERTIES                                           completedCustoms(a) ON CHANGE changeCompletedCustoms(a)
    PROPERTIES(a) NEWSESSION EDIT
    
    FILTERGROUP attributesFilters
        FILTER 'Без атрибутов' nullCustoms(c,a) 'F7'
        FILTER 'С атрибутами' NOT nullCustoms(c,a) 'F6' 
    FILTERGROUP groupFilters
        FILTER 'Переведены' completedTranslate(a) 'F10' DEFAULT

    FILTERS isParent(g, a)
//    FILTERGROUP groupFilters
//        FILTER 'По группам' 'F11' isParentGroupArticle(g, a) DEFAULT
//        FILTER 'Без групп' 'ctrl F11' captionArticle(a) IF NOT itemGroupArticle(a)

    FILTERGROUP translateFilters
        FILTER 'Не обработан' notCompletedCustoms(a) 'F9' DEFAULT
        FILTER 'Обработан' completedCustoms(a) 'F8'

    FILTERS quantityInvoiceDetail(a, currentUser()) OR (a IS Article AND NOT countInvoices(currentUser()))        

    OBJECTS i=Item
    PROPERTIES(i) READONLY descriptionDefaultPurchaseInvoice, idBarcode, idArticle, id, 
                           originalCaption, originalComposition, originalCustomsGroup, 
                           caption, composition, nameUOM, nameCountry, canonicalNameItemGroup, 
                           idItemGroup, nameColor, nameSize, nameGender, image PANEL
    PROPERTIES(i) originalSize READONLY
    ORDERS id(i)
    PROPERTIES BACKGROUND hintEditableBackground() codeCustomsGroup(c, i) ON CHANGE changeCodeCustomsGroup(c, i), nameCustomsGroup(c, i), nameComplianceGroup(c, i)
    PROPERTIES completedCustoms(i)
    PROPERTIES(i) NEWSESSION EDIT SHOWIF enableEditing(i)
    
    FILTERGROUP attributesFilters2
        FILTER 'Без атрибутов' nullCustoms(c,i) 'F7'       
        FILTER 'С атрибутами' NOT nullCustoms(c,i) 'F6'       
    FILTERGROUP itemFilters
        FILTER 'По артикулам' article(i) == a 'F4' DEFAULT
        FILTER 'По группам (не обработан)' isParent(g,i) AND completedTranslate(i) AND NOT completedCustoms(i) 'shift F4'
        FILTER 'По группам' isParent(g,i) 'ctrl F4'
        FILTER 'По артикулам/инвойсам' article(i) == a AND (quantityInvoiceDetail(i, currentUser()) OR (i IS Item AND NOT countInvoices(currentUser()))) 'shift F5'

    EVENTS 
        ON INIT setDateArticleCustomsDashboard()                
;

DESIGN articleCustomsDashboard {
    NEW header {
        horizontal = TRUE;
        NEW dataContainer {     
            caption = 'Дата';
            MOVE PROPERTY(dateArticleCustomsDashboard());
        }
        MOVE BOX(c);
        NEW filter {
            caption = 'Фильтр';
            horizontal = TRUE;
            MOVE PROPERTY(seriesNumberDateInvoicesCurrentUser());
            MOVE PROPERTY(selectPurchaseInvoicesCurrentUser());
        }        
    }

    NEW pane {
        horizontal = TRUE;
        fill = 1;
        NEW tree1{
            horizontal = FALSE;
            fill = 1;
            MOVE BOX(TREE groupTree) {fill = 2;}
            NEW imageBox1 {
                fill = 3;
                caption = 'Изображение';                     
                MOVE PROPERTY(image(i)) {                           
                    caption = '';
                    fill = 1;
                }
            }
        }
        NEW row211 {
            fill = 3;
            horizontal = FALSE;
            MOVE BOX(a) {
                defaultComponent = TRUE;
                fill = 2;
            }
            MOVE BOX(i);
        }
    }

    PROPERTY(id(a)) { charWidth = 6;}

    PROPERTY(id(i)) { charWidth = 6;}
    PROPERTY(composition(i)) { charWidth = 30;}
    PROPERTY(originalCustomsGroup(i)) { charWidth = 11;}
    PROPERTY(originalComposition(i)) { charWidth = 11;}
    PROPERTY(caption(i)) { charWidth = 20;}
    PROPERTY(originalCaption(i)) { charWidth = 20;}
    PROPERTY(composition(i)) { charWidth = 30;}
    PROPERTY(nameSize(i)) { charWidth = 3;}
    
    MOVE TOOLBARBOX;
}

// -- Проставляем страну по умолчанию
seekDefaultCountryArticleCustomsDashboard()  { 
    IF defaultCountry() THEN {
        SEEK articleCustomsDashboard.c = defaultCountry();
    }
}
EXTEND FORM articleCustomsDashboard
    EVENTS ON INIT seekDefaultCountryArticleCustomsDashboard()
;

completeArticleCustomsDashboard 'Подтвердить все'(Country country)  {   
    LOCAL k = INTEGER ();
    k() <- 0;
    
    FOR [ FILTER articleCustomsDashboard.a](Article article) AND nullCustoms(country, article) DO {   
        k() <- k() + 1;              
    }    
    IF k() > 0 THEN {
        MESSAGE 'Для артикула не задан ТН ВЭД ('+k()+' шт.)';
    } ELSE {
        FOR [ FILTER articleCustomsDashboard.a](Article article) DO {
            completedCustoms(Item item) <- TRUE WHERE article(item) == article;
        }
    }      
} TOOLBAR CONFIRM;

EXTEND FORM articleCustomsDashboard
    PROPERTIES(c) DRAW a completeArticleCustomsDashboard 
;

// ----------------------------- Заполнение атрибутов для товаров при изменении для товара ----------------- //

@defineOption(setCustomsGroupArticleCompleted, 'Изменять ТВЭД для обработанных товаров по артикулу', customs);
// ТНВЭД
WHEN LOCAL FORMS articleCustomsDashboard
    CHANGED(customsGroup(Country country, Article article)) DO {
        customsGroup (country, Item item) <- customsGroup(country, article) WHERE article(item) == article AND (setCustomsGroupArticleCompleted() OR NOT completedCustoms(item));
        VATCustomsException(country, Item item) <- NULL WHERE article(item) == article  AND (setCustomsGroupArticleCompleted() OR NOT completedCustoms(item));
    }

WHEN LOCAL FORMS articleCustomsDashboard
    CHANGED(customsGroup (Country country, Item item)) OR CHANGED(VATCustomsException(country, item)) DO {
        VAT(item, country) <- IF VATCustomsException(country, item) THEN
                                            rangeVATCustomsException(country, item)
                                         ELSE
                                            VAT(country, item, dateArticleCustomsDashboard());
    }

// Группы сертификации
WHEN LOCAL FORMS articleCustomsDashboard
    CHANGED(complianceGroup(Country country, Article article)) DO {
        complianceGroup (country, Item item) <- complianceGroup(country, article) WHERE article(item) == article AND NOT completedCustoms(item);
    }

// ------------------------- Автоматическое заполнение свойств --------------------------- //

// ----- ТНВЭД
count (customsGroup, Country country, caption, composition) = GROUP SUM 1
    BY customsGroup(country,Item item), caption(item),  composition(item);

defaultCustomsGroup (Country country, ISTRING[255] caption, STRING[255] composition) =
    GROUP
        LAST CustomsGroup customsGroup
        ORDER count(customsGroup, country, caption, composition), customsGroup
        WHERE count(customsGroup, country, caption, composition);

count (customsGroup, Country country, caption, composition, gender, originalCustomsGroup) = GROUP SUM 1
    BY customsGroup(country,Item item), caption(item),  composition(item), gender(item), originalCustomsGroup(item);

defaultCustomsGroup (Country country, ISTRING[255] caption, STRING[255] composition, Gender gender, BPSTRING[10] originalCustomsGroup) =
    GROUP
        LAST CustomsGroup customsGroup
        ORDER count(customsGroup, country, caption, composition, gender, originalCustomsGroup), customsGroup
        WHERE count(customsGroup, country, caption, composition, gender, originalCustomsGroup);

// Артикулы
fillDefaultCustomsGroup 'Заполнить ТН ВЭД по названию/составу'(Country country, Article article)  { 
    customsGroup(country,article) <- defaultCustomsGroup(
                                                            country,
                                                            caption(article),
                                                            composition(article))
        WHERE defaultCustomsGroup(country, caption(article), composition(article));

} ASON CONTEXTMENU codeCustomsGroup[Country,Article];

fillDefaultCustomsGroup 'Заполнить ТН ВЭД по названию/составу для всех'(Country country)  { 
   FOR [ FILTER articleCustomsDashboard.a](Article article) DO {
       fillDefaultCustomsGroup(country,article);
   }
} ASON CONTEXTMENU codeCustomsGroup[Country,Article];

fillOriginalCustomsGroup 'Заполнить ТН ВЭД по оригиналу ТНВЭД'(Country country, Article article)  { 
    customsGroup(country,article) <- customsGroup(rpad(originalCustomsGroup(article), 10, '0'))
        WHERE customsGroup(rpad(originalCustomsGroup(article), 10, '0'));

} ASON CONTEXTMENU codeCustomsGroup[Country,Article];

fillOriginalCustomsGroup 'Заполнить ТН ВЭД по оригиналу ТНВЭД для всех'(Country country)  { 
   FOR [ FILTER articleCustomsDashboard.a](Article article) DO {
       fillOriginalCustomsGroup(country,article);
   }
} ASON CONTEXTMENU codeCustomsGroup[Country,Article];


fillDefaultCustomsGroupGender 'Заполнить ТН ВЭД по названию/составу/полу/ТНВЭД'(Country country, Article article)  { 
    customsGroup(country,article) <- defaultCustomsGroup(
                                                            country,
                                                            caption(article),
                                                            composition(article),
                                                            gender(article),
                                                            originalCustomsGroup(article))                                                            
        WHERE defaultCustomsGroup(country, caption(article), composition(article), gender(article), originalCustomsGroup(article));

} ASON CONTEXTMENU codeCustomsGroup[Country,Article];

fillDefaultCustomsGroupArticleGender 'Заполнить ТН ВЭД по названию/составу/полу/ТНВЭД для всех'(Country country)  { 
    FOR [ FILTER articleCustomsDashboard.a](Article article) DO {
        fillDefaultCustomsGroupGender(country,article);
    }
} ASON CONTEXTMENU codeCustomsGroup[Country,Article];

fillDefaultCustomsGroupArticleGender 'Заполнить текущий ТН ВЭД по названию/составу/полу/ТНВЭД для всех'(Country country, Article article)  { 
    FOR [ FILTER articleCustomsDashboard.a](Article a1) AND country(article)==country(a1) AND caption(article)==caption(a1)
        AND composition(article)==composition(a1) AND gender(article)==gender(a1) AND originalCustomsGroup(article)==originalCustomsGroup(a1) DO {
        customsGroup(country,a1) <- customsGroup(country, article);
    }
} ASON CONTEXTMENU codeCustomsGroup[Country,Article];

// Товары
fillDefaultCustomsGroup 'Заполнить ТН ВЭД по названию/составу'(Country country, Item item)  { 
    customsGroup(country,item) <- defaultCustomsGroup(
                                                            country,
                                                            caption(item),
                                                            composition(item))                                                            
        WHERE defaultCustomsGroup(country, caption(item), composition(item));

} ASON CONTEXTMENU codeCustomsGroup[Country,Item];

fillDefaultCustomsGroupItem 'Заполнить ТН ВЭД по названию/составу/ТНВЭД для всех'(Country country)  { 
    FOR [ FILTER articleCustomsDashboard.i](Item item) DO {
        fillDefaultCustomsGroup(country,item);
    }
} ASON CONTEXTMENU codeCustomsGroup[Country,Item];

fillDefaultCustomsGroupGender 'Заполнить ТН ВЭД по названию/составу/полу/ТНВЭД'(Country country, Item item)  { 
    customsGroup(country,item) <- defaultCustomsGroup(
                                                            country,
                                                            caption(item),
                                                            composition(item),
                                                            gender(item),
                                                            originalCustomsGroup(item))                                                            
        WHERE defaultCustomsGroup(country, caption(item), composition(item), gender(item), originalCustomsGroup(item));

} ASON CONTEXTMENU codeCustomsGroup[Country,Item];

fillDefaultCustomsGroupItemGender 'Заполнить ТН ВЭД по названию/составу/полу/ТНВЭД для всех'(Country country)  { 
    FOR [ FILTER articleCustomsDashboard.i](Item item) DO {
        fillDefaultCustomsGroupGender(country,item);
    }
} ASON CONTEXTMENU codeCustomsGroup[Country,Item];

fillDefaultCustomsGroupItemGender 'Заполнить текущий ТН ВЭД по названию/составу/полу/ТНВЭД для всех'(Country country, Item item)  { 
    FOR [ FILTER articleCustomsDashboard.i](Item i1) AND country(item)==country(i1) AND caption(item)==caption(i1)
        AND composition(item)==composition(i1) AND gender(item)==gender(i1) AND originalCustomsGroup(item)==originalCustomsGroup(i1) DO {
        customsGroup(country,i1) <- customsGroup(country, item);
    }
} ASON CONTEXTMENU codeCustomsGroup[Country,Item];

// ----- Группы сертификации
count (complianceGroup, Country country, caption, composition) = GROUP SUM 1
    BY complianceGroup(country,Item item), caption(item),  composition(item);

defaultComplianceGroup (Country country, ISTRING[255] caption, STRING[255] composition) =
    GROUP
        LAST ComplianceGroup complianceGroup
        ORDER count(complianceGroup, country, caption, composition), complianceGroup
        WHERE count(complianceGroup, country, caption, composition);

// Артикулы
fillDefaultComplianceGroup 'Заполнить группу сертификации'(Country country, Article article)  { 
    complianceGroup(country,article) <- defaultComplianceGroup(
                                                            country,
                                                            caption(article),
                                                            composition(article))
        WHERE defaultComplianceGroup(country, caption(article), composition(article));

} ASON CONTEXTMENU nameComplianceGroup[Country,Article];

fillDefaultComplianceGroup 'Заполнить группу сертификации для всех'(Country country)  { 
   FOR [ FILTER articleCustomsDashboard.a](Article article) DO {
       fillDefaultComplianceGroup(country,article);
   }
} ASON CONTEXTMENU nameComplianceGroup[Country,Article];

// Товары
fillDefaultComplianceGroup 'Заполнить группу сертификации'(Country country, Item item)  { 
    complianceGroup(country,item) <- defaultComplianceGroup(
                                                            country,
                                                            caption(item),
                                                            composition(item))
        WHERE defaultComplianceGroup(country, caption(item), composition(item));
} ASON CONTEXTMENU nameComplianceGroup[Country,Item];

fillDefaultComplianceGroupItem 'Заполнить группу сертификации для всех'(Country country)  { 
    FOR [ FILTER articleCustomsDashboard.i](Item item) DO {
        fillDefaultComplianceGroup(country,item);
    }
} ASON CONTEXTMENU nameComplianceGroup[Country,Item];

NAVIGATOR {
    customsDashboardNavigator {
        NEW articleCustomsDashboard;
    }
}