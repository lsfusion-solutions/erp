MODULE CustomsGroupArticle;

REQUIRE CustomsGroupItem, ItemArticle, ItemTracking;

NAMESPACE CustomsGroup;

//-- ТН ВЭД
TABLE countryArticle(Country, Article);
customsGroup = DATA CustomsGroup(Country, Article);
codeCustomsGroup 'ТН ВЭД' (Country country, Article article) = code(customsGroup(country, article)) CHARWIDTH 10;
nameCustomsGroup 'Позиция ТН ВЭД' (Country country, Article article) = name(customsGroup(country, article)) CHARWIDTH 30;
codeCustomsGroupDefaultCountry 'ТН ВЭД' (Article article) = code(customsGroup(defaultCountry(), article)) CHARWIDTH 10;

originalCustomsGroup 'Код ТНВЭД (ориг.)' = DATA BPSTRING[12] (Article) IN base CHARWIDTH 10 NOFLEX;

dataExtraCode = DATA ExtraCode(Article);
extraCode (Article a) =  OVERRIDE dataExtraCode(a), extraCode(customsGroup(defaultCountry(), a));
idExtraCode '4х зн код' (Article a) = id(extraCode(a));

// Действие по изменению кода ТНВЭД через ручной ввод
changeCodeCustomsGroup(Country country, Article article)  { 
    IF requestInputChangeCustomsCode() THEN {
        INPUT s = BPSTRING[10] DO {
            IF customsGroup(rpad(s,10,'0')) OR NOT s THEN {
                customsGroup(country, article) <- customsGroup(rpad(s,10,'0')); 
            } ELSE {
                caption() <- caption(article);
                article() <- id(article);
                originalCustomsGroup() <- originalCustomsGroup(article);
                composition() <- composition(article);
                gender() <- nameGender(article);
                DIALOG customsGroups OBJECTS cz = customsZone(country), cg = nearestCustomsGroup(s) INPUT DO
                    customsGroup(country, article) <- cg;
            }
        }
    } ELSE {
        DIALOG customsGroups OBJECTS cz = customsZone(country), cg = customsGroup(country, article) CHANGE LIST code(cg);
    }
}

changeWYSCodeCustomsGroup(Country country, Article article)  { 
    INPUT s = BPSTRING[10] DO
        IF customsGroup(rpad(s, 10, '0')) OR NOT s THEN {
            customsGroup(country, article) <- customsGroup(rpad(s, 10, '0')); 
        } ELSE {
            caption() <- caption(article);
            article() <- id(article);
            originalCustomsGroup() <- originalCustomsGroup(article);
            composition() <- composition(article);
            gender() <- nameGender(article);
            DIALOG customsGroups OBJECTS cz = customsZone(country), cg = nearestCustomsGroup(s) INPUT DO
                customsGroup(country, article) <- cg;
        }
}

changeCustomsGroupDefaultCountry(Article article)  { 
    DIALOG customsGroups OBJECTS cz = customsZoneDefaultCountry(), cg = customsGroup(defaultCountry(), article) INPUT NULL LIST code(cg) DO
        customsGroup(Country country, article) <- cg WHERE country == defaultCountry();
}

CONSTRAINT customsZone(customsGroup(Country country, Article article)) != customsZone(country) CHECKED BY customsGroup[Country,Article]
    MESSAGE 'Таможенная зона должна соответствовать стране';

changeExtraCode(Article a){
    DIALOG extraCode OBJECTS ec INPUT NULL FILTERS (customsGroup(ec)==customsGroup(defaultCountry(), a) OR codeCustomsGroup(ec)==originalCustomsGroup(a)) DO {
        dataExtraCode(a) <- ec;
    }
}

EXTEND FORM article
    PROPERTIES(a)    originalCustomsGroup, idExtraCode ON CHANGE changeExtraCode(a),
                     codeCustomsGroupDefaultCountry  ON CHANGE changeCustomsGroupDefaultCountry(a)
    PROPERTIES(c, a) codeCustomsGroup
     
    PROPERTIES(i) BEFORE deletei codeCustomsGroupDefaultCountry ON CHANGE changeCustomsGroupDefaultCountry(i) 
;
DESIGN article  {
    regionPrm {
        MOVE PROPERTY(originalCustomsGroup(a));
        MOVE PROPERTY(codeCustomsGroupDefaultCountry(a));
        MOVE PROPERTY (idExtraCode(a));
    }
}

EXTEND FORM articles
    PROPERTIES(a) originalCustomsGroup
;

WHEN LOCAL FORMS article CHANGED(customsGroup(Country country, Article article)) DO         
    customsGroup(country, Item i) <- customsGroup(country, article) WHERE article(i) == article;      

WHEN LOCAL FORMS article SET(Item i IS Item) DO
    customsGroup(Country country, i) <- customsGroup(country, article(i));      
    

EXTEND FORM articles
    PROPERTIES(a)  READONLYIF isReadonly() BEFORE deletea  codeCustomsGroupDefaultCountry
;

WHEN LOCAL FORMS article SET(Item i IS Item) AND  dataExtraCode(article(i)) AND NOT dataExtraCode(i) DO
    dataExtraCode(i) <- dataExtraCode(article(i));

WHEN LOCAL FORMS article CHANGED(dataExtraCode(Article article))  DO
    dataExtraCode(Item i) <- dataExtraCode(article) WHERE article(i) == article;
