MODULE ArticleCustomsAttributesDashboard;

REQUIRE ArticleCustomsDashboard, ItemFashionCustomsGroup, ItemSizeMappingCustomsGroup, PurchaseDeclarationDashboard;

NAMESPACE Item;

completedCustomsAttributes 'Обработан' = DATA BOOLEAN (Item) INDEXED;

// Подсчет необработанных артикулов для групп
countNotCompletedCustomsAttributesArticles 'Не обработано (к-во)' (group) = GROUP SUM 1 IF completedTranslate(Item item) AND completedCustoms(item) 
                                                                                AND NOT completedCustomsAttributes(item) BY itemGroup(item);
recCountNotCompletedCustomsAttributesArticle 'Не обработано (к-во)' (ItemGroup parent) = GROUP SUM countNotCompletedCustomsAttributesArticles(ItemGroup child) IF isParent(child, parent);

// Льгты
countVATCustomsException 'Кол-во' (Country country, Item item) = countVATCustomsException(customsGroup(country, item));

backgroundSizeHeight 'Цвет' (Country country,Item item) = RGB(224, 224, 255) IF surelySizeHeight(customsGroup(country,item));
backgroundSizeChest 'Цвет' (Country country,Item item) = RGB(224, 224, 255) IF surelySizeChest(customsGroup(country,item));
backgroundSizeNeck 'Цвет' (Country country,Item item) = RGB(224, 224, 255) IF surelySizeNeck(customsGroup(country,item));
backgroundFootLength 'Цвет' (Country country,Item item) = RGB(224, 224, 255) IF surelyFootLength(customsGroup(country,item));
backgroundInsoleLength 'Цвет' (Country country,Item item) = RGB(224, 224, 255) IF surelyInsoleLength(customsGroup(country,item));
backgroundSizeHead 'Цвет' (Country country,Item item) = RGB(224, 224, 255) IF surelySizeHead(customsGroup(country,item));
backgroundSizeBrush 'Цвет' (Country country,Item item) = RGB(224, 224, 255) IF surelySizeBrush(customsGroup(country,item));
backgroundSizeHips 'Цвет' (Country country,Item item) = RGB(224, 224, 255) IF surelySizeHips(customsGroup(country,item));
backgroundSizeWaist 'Цвет' (Country country,Item item) = RGB(224, 224, 255) IF surelySizeWaist(customsGroup(country,item));

nullCustomsAttributes 'Без атрибутов' (Country country, Item item)= 
    ((surelySizeHeight(customsGroup(country,item)) AND NOT sizeHeightCustoms(item)) OR
     (surelySizeChest(customsGroup(country,item)) AND NOT sizeChestCustoms(item)) OR
     (surelySizeNeck(customsGroup(country,item)) AND NOT sizeNeckCustoms(item)) OR
     (surelyFootLength(customsGroup(country,item)) AND NOT footLengthCustoms(item)) OR
     (surelyInsoleLength(customsGroup(country,item)) AND NOT insoleLengthCustoms(item)) OR
     (surelySizeHead(customsGroup(country,item)) AND NOT sizeHeadCustoms(item)) OR
     (surelySizeBrush(customsGroup(country,item)) AND NOT sizeBrushCustoms(item)) OR
     (surelySizeHips(customsGroup(country,item)) AND NOT sizeHipsCustoms(item)) OR
     (surelySizeWaist(customsGroup(country,item)) AND NOT sizeWaistCustoms(item))) AND NOT completedCustomsAttributes(item);

backgroundCountVATCustomsException 'Цвет' (Country country,Sku item) = RGB(224, 224, 255) IF countVATCustomsException(customsGroup(country, item)) > 0;
    
// todo : workaround, так как нельзя в сессионных событиях обращаться к форме
dateArticleCustomsAttributesDashboard 'Дата' = DATA DATE (User);
dateArticleCustomsAttributesDashboard 'Дата' () = dateArticleCustomsAttributesDashboard(currentUser());
setDateArticleCustomsAttributesDashboard()  { dateArticleCustomsAttributesDashboard(User u) <- currentDate() WHERE u == currentUser(); }

changeDateArticleCustomsAttributesDashboard()  { 
    INPUT d = DATE DO
        dateArticleCustomsAttributesDashboard(User u) <- d WHERE u == currentUser();
}

// Выбор НДС
valueVATSessionDate 'НДС, %' (Item item, Country country) = valueVAT(item, country, dateArticleCustomsAttributesDashboard(currentUser())) CHARWIDTH 6;

filterCustomsAttributesInvoice= DATA LOCAL Purchase.Invoice ();
descriptionFilterCustomsAttributesInvoice 'Накладная' = description(filterCustomsAttributesInvoice());

FORM articleCustomsAttributesDashboard 'Заполнение НДС'

    PROPERTIES seriesNumberDateInvoicesCurrentUser() READONLY, selectPurchaseInvoicesCurrentUser()
    
    OBJECTS c=Country PANEL
    PROPERTIES(c) SELECTOR name

    PROPERTIES dateArticleCustomsAttributesDashboard() ON CHANGE changeDateArticleCustomsAttributesDashboard()

    TREE groupTree g=ItemGroup PARENT parent(g)
    PROPERTIES READONLY order(g), name(g), recCountNotCompletedCustomsAttributesArticle(g)
    ORDERS order(g), name(g)
    FILTERS active(g)
    FILTERGROUP notAttributesFilters
        FILTER 'Не обработан' recCountNotCompletedCustomsAttributesArticle(g) 'F6'

    OBJECTS i=Item
    PROPERTIES(i) READONLY nameBrand, descriptionDefaultPurchaseInvoice, idBarcode, idArticle, id, 
                   originalCaption, originalComposition, originalSize, originalCustomsGroup, 
                   caption, composition, nameUOM, nameColor, nameSize, idItemGroup
    PROPERTIES     READONLY codeCustomsGroup(c,i), nameCustomsGroup(c,i)
    
    PROPERTIES(i)    nameSizeHeightCustoms BACKGROUND backgroundSizeHeight(c,i), sizeChestCustoms BACKGROUND backgroundSizeChest(c,i),
                     sizeNeckCustoms BACKGROUND backgroundSizeNeck(c,i), footLengthCustoms BACKGROUND backgroundFootLength(c,i),
                     insoleLengthCustoms BACKGROUND backgroundInsoleLength(c,i),
                     sizeHeadCustoms BACKGROUND backgroundSizeHead(c,i), sizeBrushCustoms BACKGROUND backgroundSizeBrush(c,i),
                     sizeHipsCustoms BACKGROUND backgroundSizeHips(c,i), sizeWaistCustoms BACKGROUND backgroundSizeWaist(c,i),
                     image PANEL
    PROPERTIES(c, i) nameVATCustomsException BACKGROUND backgroundCountVATCustomsException(c, i)     
    PROPERTIES (i, c) numberVAT
    PROPERTIES (i, c) READONLY valueVATSessionDate
    PROPERTIES completedCustomsAttributes(i)
    PROPERTIES(i) NEWSESSION EDIT SHOWIF enableEditing(i)

    FILTERGROUP attributesFilters
        FILTER 'Без атрибутов' nullCustomsAttributes (c,i) 'F7'        
        FILTER 'С атрибутами' NOT nullCustomsAttributes (c,i) 'F6'        

    FILTERGROUP groupFilters
        FILTER 'Заполнен ТНВЭД' completedTranslate(i) AND completedCustoms(i) 'F10'  DEFAULT

    FILTERS isParent(g, i)

    FILTERGROUP articleFilters
        FILTER 'Не обработан' i IS Item AND NOT completedCustomsAttributes(i) 'F8' DEFAULT
        FILTER 'Обработан' completedCustomsAttributes(i) 'F9'        
        
    FILTERGROUP exceptionFilters
        FILTER 'С льготами' countVATCustomsException(c, i) > 0 'ctrl F5'

    FILTERS quantityInvoiceDetail(i, currentUser()) OR (i IS Item AND NOT countInvoices(currentUser()))        

    EVENTS 
        ON INIT setDateArticleCustomsAttributesDashboard()
;

DESIGN articleCustomsAttributesDashboard {

    NEW header {
        horizontal = TRUE;
        NEW dataContainer {     
            caption = 'Дата';
            MOVE PROPERTY(dateArticleCustomsAttributesDashboard());
        }
        MOVE BOX(c);
        NEW filter {
            caption = 'Фильтр';
            horizontal = TRUE;
            MOVE PROPERTY(seriesNumberDateInvoicesCurrentUser());
            MOVE PROPERTY(selectPurchaseInvoicesCurrentUser());
        }
    }
    
    NEW pane {
        fill = 1;
        horizontal = TRUE;
        NEW tree4{
            fill = 1;
            MOVE BOX(TREE groupTree) {fill = 2;}
            NEW imageBox4 {
                fill = 3;
                caption = 'Изображение';                     
                MOVE PROPERTY(image(i)) {                           
                    caption = '';
                    fill = 1;
                }
            }
        }
        MOVE BOX(i) {
            defaultComponent = TRUE;
            fill = 3;
        }
    }
    
    PROPERTY(nameSizeHeightCustoms(i)) {valueSize = ( 40, 17);}
    PROPERTY(sizeChestCustoms(i)) { valueSize = ( 40, 17);}
    PROPERTY(sizeNeckCustoms(i)) { valueSize = ( 40, 17);}
    PROPERTY(footLengthCustoms(i)) { valueSize = ( 40, 17);}
    PROPERTY(insoleLengthCustoms(i)) { valueSize = ( 40, 17);}
    PROPERTY(sizeHeadCustoms(i)) { valueSize = ( 40, 17);}
    PROPERTY(sizeBrushCustoms(i)) { valueSize = ( 40, 17);}
    PROPERTY(sizeHipsCustoms(i)) { valueSize = ( 40, 17);}
    PROPERTY(sizeWaistCustoms(i)) { valueSize = ( 40, 17);}
    PROPERTY(composition(i)) {valueSize = ( 150, 17);}

    PROPERTY(id(i)) { charWidth = 6;}
    PROPERTY(composition(i)) { charWidth = 30;}
    PROPERTY(originalCustomsGroup(i)) { charWidth = 11;}
    PROPERTY(originalComposition(i)) { charWidth = 11;}
    PROPERTY(caption(i)) { charWidth = 20;}
    PROPERTY(originalCaption(i)) { charWidth = 20;}
    PROPERTY(composition(i)) { charWidth = 30;}

    PROPERTY(nameSize(i)) { charWidth = 10;}

    MOVE TOOLBARBOX;
}

// -- Проставляем страну по умолчанию
seekDefaultCountryArticleCustomsAttributesDashboard()  { 
    IF defaultCountry() THEN {
        SEEK articleCustomsAttributesDashboard.c = defaultCountry();
    }
}
EXTEND FORM articleCustomsAttributesDashboard
    EVENTS ON INIT seekDefaultCountryArticleCustomsAttributesDashboard()
;


completeArticleCustomsAttributesDashboard 'Подтвердить все'(Country country)  {   
    LOCAL k = INTEGER ();
    k() <- 0;
    
    FOR [ FILTER articleCustomsAttributesDashboard.i](Item item) AND nullCustomsAttributes (country,item) DO{   
        k() <- k() + 1;              
    }    
    IF k() > 0 THEN {
        MESSAGE 'Для товара не заданы атрибуты ('+k()+' шт.)';
    } ELSE {
        FOR [ FILTER articleCustomsAttributesDashboard.i](Item item) DO {
            completedCustomsAttributes(item) <- TRUE;
        }
    }      
} TOOLBAR CONFIRM;

EXTEND FORM  articleCustomsAttributesDashboard
    PROPERTIES(c) DRAW i completeArticleCustomsAttributesDashboard 
;

NAVIGATOR {
    customsDashboardNavigator {
        NEW articleCustomsAttributesDashboard AFTER declarationDashboard;
    }
}

WHEN LOCAL FORMS articleCustomsAttributesDashboard
    CHANGED(customsGroup (Country country, Item item)) OR CHANGED(VATCustomsException(country, item)) DO {
        VAT(item, country) <- IF VATCustomsException(country, item) THEN
                                            rangeVATCustomsException(country, item)
                                         ELSE
                                            VAT(country, item, dateArticleCustomsAttributesDashboard());
    }

//-- Автоматическое заполнения льготы по НДС

lastWord = FORMULA PG 'CASE WHEN position(\'-\' in ($1)) > 0 THEN split_part(($1),\'-\',2) ELSE ($1) END', MS 'dbo.lastWord($1)';

defaultVATCustomsException (Country country, Item item, DATE date) =
    GROUP
          MAX VATCustomsException exception IF
              customsGroup(exception) == customsGroup(country, item) AND
              autoFill(exception) AND
              dateFrom(exception) <= date AND NOT
              dateTo(exception) < date AND NOT
              (surelySizeHeight(customsGroup(exception)) AND toInteger(lastWord(nameSizeHeightCustoms(item))) > limitSizeHeight(exception)) AND NOT
              (surelySizeChest(customsGroup(exception)) AND toInteger(lastWord(sizeChestCustoms(item))) > limitSizeChest(exception)) AND NOT
              (surelySizeNeck(customsGroup(exception)) AND toInteger(lastWord(sizeNeckCustoms(item))) > limitSizeNeck(exception)) AND NOT
              (surelyFootLength(customsGroup(exception)) AND toInteger(lastWord(footLengthCustoms(item))) > limitFootLength(exception)) AND NOT
              (surelyInsoleLength(customsGroup(exception)) AND toInteger(lastWord(insoleLengthCustoms(item))) > limitInsoleLength(exception)) AND NOT
              (surelySizeHead(customsGroup(exception)) AND toInteger(sizeHeadCustoms(item)) > limitSizeHead(exception)) AND NOT
              (surelySizeBrush(customsGroup(exception)) AND toInteger(sizeBrushCustoms(item)) > limitSizeBrush(exception)) AND NOT
              (surelySizeHips(customsGroup(exception)) AND toInteger(sizeHipsCustoms(item)) > limitSizeHips(exception)) AND NOT
              (surelySizeWaist(customsGroup(exception)) AND toInteger(sizeWaistCustoms(item)) > limitSizeWaist(exception));

fillDefaultVATCustomsException 'Рассчитать льготу'(Country country, Item item)  { 
    VATCustomsException(country, item) <- defaultVATCustomsException (country, item, dateArticleCustomsAttributesDashboard())
        WHERE defaultVATCustomsException (country, item, dateArticleCustomsAttributesDashboard());

} ASON CONTEXTMENU nameVATCustomsException[Country,Item];

fillDefaultVATCustomsException 'Рассчитать льготу для всех'(Country country)  { 
    FOR [ FILTER articleCustomsAttributesDashboard.i](Item item) DO {
        fillDefaultVATCustomsException(country, item);
    }
} ASON CONTEXTMENU nameVATCustomsException[Country,Item]; 

defaultShortVATCustomsException (Country country, Item item, DATE date) =
    GROUP
          MAX VATCustomsException exception IF
              customsGroup(exception) == customsGroup(country, item) AND              
              dateFrom(exception) <= date AND NOT
              dateTo(exception) < date;
countDefaultShortVATCustomsException (Country country, Item item, DATE date) =
    GROUP
          SUM 1 IF
              customsGroup(VATCustomsException exception) == customsGroup(country, item) AND              
              dateFrom(exception) <= date AND NOT
              dateTo(exception) < date;
          
fillDefaultShortVATCustomsException 'Установить льготу'(Country country, Item item)  { 
    VATCustomsException(country, item) <- defaultShortVATCustomsException (country, item, dateArticleCustomsAttributesDashboard())
        WHERE defaultShortVATCustomsException (country, item, dateArticleCustomsAttributesDashboard()) AND countDefaultShortVATCustomsException(country, item, dateArticleCustomsAttributesDashboard())==1;

} ASON CONTEXTMENU nameVATCustomsException[Country,Item];

fillDefaultShortVATCustomsException 'Установить льготу для всех'(Country country)  { 
    FOR [ FILTER articleCustomsAttributesDashboard.i](Item item) DO {
        fillDefaultShortVATCustomsException(country, item);
    }
} ASON CONTEXTMENU nameVATCustomsException[Country,Item];           
          
// -- Заполнение по матрице
inMapC ()  { 
    inMap(Item i) <- [ FILTER articleCustomsAttributesDashboard.i](i);
}

mapCustomsAttributesItem 'Заполнить атрибуты для всех по соответствию'()  { 
    inMapC();
    mapExSize();
    mapSizeHeightCustoms();
    mapSizeChestCustoms();
    mapSizeNeckCustoms();
    mapFootLengthCustoms();
    mapInsoleLengthCustoms();
    mapSizeHeadCustoms();
    mapSizeBrushCustoms();
    mapSizeHipsCustoms();
    mapSizeWaistCustoms();
} CONFIRM TOOLBAR;

EXTEND FORM articleCustomsAttributesDashboard
    PROPERTIES mapCustomsAttributesItem() DRAW i;

mapAllExSizeItem 'Заполнить размер (бел) для всех по соответствию'()  { 
    inMapC();
    mapExSize();
};

EXTEND FORM articleCustomsAttributesDashboard
    PROPERTIES (i) READONLY exSize BEFORE nameSizeHeightCustoms(i) ON CONTEXTMENU mapAllExSizeItem()
;

DESIGN articleCustomsAttributesDashboard {
    PROPERTY(exSize(i)) { charWidth = 3;} 
}

mapAllSizeHeightItem 'Заполнить рост для всех по соответствию'()  { 
    inMapC();
    mapSizeHeightCustoms();
} ASON CONTEXTMENU nameSizeHeightCustoms[Item];
mapAllSizeChestItem 'Заполнить обхват груди для всех по соответствию'()  { 
    inMapC();
    mapSizeChestCustoms();
} ASON CONTEXTMENU sizeChestCustoms[Item];
mapAllSizeNeckItem 'Заполнить обхват шеи для всех по соответствию'()  { 
    inMapC();   
    mapSizeNeckCustoms();
} ASON CONTEXTMENU sizeNeckCustoms[Item];
mapAllFootLengthItem 'Заполнить длину стопы для всех по соответствию'()  { 
    inMapC();
    mapFootLengthCustoms();
} ASON CONTEXTMENU footLengthCustoms[Item];
mapAllInsoleLengthItem 'Заполнить длину стельки для всех по соответствию'()  { 
    inMapC();
    mapInsoleLengthCustoms();
} ASON CONTEXTMENU insoleLengthCustoms[Item];
mapAllSizeHeadItem 'Заполнить обхват головы для всех по соответствию'()  { 
    inMapC();
    mapSizeHeadCustoms();
} ASON CONTEXTMENU sizeHeadCustoms[Item];
mapAllSizeBrushItem 'Заполнить обхват кисти для всех по соответствию'()  { 
    inMapC();
    mapSizeBrushCustoms();
} ASON CONTEXTMENU sizeBrushCustoms[Item];
mapAllSizeHipsItem 'Заполнить обхват бедер для всех по соответствию'()  { 
    inMapC();
    mapSizeHipsCustoms();
} ASON CONTEXTMENU sizeHipsCustoms[Item];
mapAllSizeWaistItem 'Заполнить обхват талии для всех по соответствию'()  { 
    inMapC();
    mapSizeWaistCustoms();
} ASON CONTEXTMENU sizeWaistCustoms[Item];