MODULE ArticleTranslateDashboard;

REQUIRE ImageArticle, Dashboard, CustomsGroupArticle, PurchaseInvoice;

NAMESPACE Item;

// Обработка статуса

completedTranslate 'Обработан' = DATA BOOLEAN (Item);
notCompletedTranslate 'Не обработан' (article) = GROUP SUM 1 IF Item i IS Item AND NOT completedTranslate(i) BY article(i) MATERIALIZED INDEXED;
completedTranslate 'Обработан' = Article a IS Article AND NOT notCompletedTranslate(a);
prevCompletedTranslate (Article article) = PREV(completedTranslate(article));

changeCompletedTranslate (Article article)  { 
    INPUT b = BOOLEAN DO
        completedTranslate(Item item) <- b WHERE article(item) == article;
}

// Не заполнены атрибуты
nullTranslate 'Без атрибутов' (Item item) = item IS Item AND NOT (caption(item) AND composition(item)) AND NOT completedTranslate(item);
nullTranslate 'Без атрибутов' (article) = GROUP SUM 1 IF Item item IS Item AND NOT (caption(item) AND composition(item)) AND NOT completedTranslate(item) BY article(item);

hintEditableBackground = RGB(224, 224, 255) IF TRUE;

TABLE invoiceUser (Purchase.Invoice, User);
inPurchase 'Вкл.' = DATA BOOLEAN  (Purchase.Invoice, User);
inPurchaseInvoices (User user) = GROUP SUM 1 IF inPurchase(Purchase.Invoice invoice, user);

seriesNumberDate 'Номер/дата накладной' (Purchase.Invoice o) = 
    CONCAT '', seriesNumber(o), 
               ' от ' +date(o) 
    ;  

seriesNumberDateInvoices 'Накладные' (User user) =  GROUP 
    CONCAT seriesNumberDate(Purchase.Invoice invoice) IF inPurchase(invoice, user), ', ' 
    ORDER date(invoice) 
    CHARWIDTH 30;
seriesNumberDateInvoicesCurrentUser 'Накладные' = seriesNumberDateInvoices(currentUser()) CHARWIDTH 30;

countInvoices 'Кол-во накладных' (User user)= GROUP SUM 1 IF inPurchase(Purchase.Invoice invoice, user) MATERIALIZED PREREAD;

FORM purchaseInvoices 'Выбрать накладные'
    OBJECTS u=User PANEL                           
//    PROPERTIES(u) READONLY seriesNumberDeclaration, nameLegalEntityDeclaration, nameCurrencyDeclaration, dateTimeDeclaration

    OBJECTS i=Purchase.Invoice
    PROPERTIES (i, u) inPurchase
    PROPERTIES (i) READONLY number, series, date, time, 
                   nameSupplier, nameCustomer, countInvoiceDetail,
                   quantityInvoiceDetail, sumInvoiceDetail
    FILTERS isOpened(i)
    ORDERS date(i) DESC
//    FILTERS inDeclarationUserInvoice(d, i) OR d IS Declaration AND NOT declarationUserInvoice(i)

    OBJECTS id=Purchase.InvoiceDetail
    PROPERTIES(id) READONLY index, idBarcodeSku, nameSku, shortNameUOMSku, 
                            quantity, price
    FILTERS invoice(id) == i

    FILTERGROUP filtersInvoiceInclude
        FILTER 'Только включенные' inPurchase(i, u) 'F10'

;

DESIGN purchaseInvoices {
    BOX {
        size = (1024, 768);
        REMOVE BOX(u);
        NEW tabContainer{
            tabbed = TRUE;
            fill = 1;
            NEW invoiceContainer {
                fill = 1;
                horizontal = FALSE;
                caption = 'Накладные';                
                NEW headerInvoiceContainer {
                    fill = 1;
                    horizontal = FALSE;                
                    MOVE BOX(i);
                }
                NEW paneInvoiceContainer {
                    tabbed = TRUE;
                    fill = 0.5;
                    MOVE BOX(id);
                }
            }            
        }
        MOVE TOOLBARBOX;
    }
}

selectPurchaseInvoices 'Выбрать накладные'(User user)  { 
    SHOW purchaseInvoices OBJECTS u=user ;
} TOOLBAR;
selectPurchaseInvoicesCurrentUser 'Выбрать накладные'  { selectPurchaseInvoices(currentUser()); }

quantityInvoiceDetail 'Кол-во товара в документе' (Sku sku, User user) = 
    GROUP
        SUM quantityInvoiceDetail(sku, Purchase.Invoice invoice) IF inPurchase(invoice, user);

quantityInvoiceDetail 'Кол-во товара в документе' (Article article, User user) =
    GROUP SUM quantity(Purchase.InvoiceDetail idetail) IF inPurchase(invoice(idetail), user)
          BY  article(sku(idetail));
        
defaultPurchaseInvoice (sku) =
    GROUP LAST invoice(Purchase.InvoiceDetail detail)
          ORDER date(detail), detail
          WHERE isPosted(detail) AND quantity(detail) 
                AND (inPurchase(invoice(detail), currentUser()) OR NOT inPurchaseInvoices(currentUser()))
                AND NOT isCompanySupplier(detail)
          BY sku(detail) COMPLEX;

descriptionDefaultPurchaseInvoice 'Последний инвойс' (Sku sku)= CONCAT ' ', seriesNumber(defaultPurchaseInvoice(sku)),
                                                                          'от ' + date(defaultPurchaseInvoice(sku)) CHARWIDTH 10;
// Подсчет непереведенных артикулов для групп
countNotCompletedTranslateArticles 'Не обработано (к-во)' (group) = 
    GROUP SUM 1 IF notCompletedTranslate(Article article)  AND ((inPurchaseInvoices(currentUser()) AND quantityInvoiceDetail(article, currentUser())) OR NOT inPurchaseInvoices(currentUser())) BY itemGroup(article);
recCountNotCompletedTranslateArticles 'Не обработано (к-во)' (ItemGroup parent) = GROUP SUM countNotCompletedTranslateArticles(ItemGroup child) IF isParent(child, parent);
        
dictionaryComposition = DATA Dictionary ();   
nameDictionaryComposition 'Словарь для состава' = name(dictionaryComposition());

dictionaryCaption = DATA Dictionary ();   
nameDictionaryCaption 'Словарь для наименования' = name(dictionaryCaption());   
                 
FORM articleTranslateDashboard 'Перевод'

    PROPERTIES seriesNumberDateInvoicesCurrentUser() READONLY, selectPurchaseInvoicesCurrentUser(), nameDictionaryCaption(),
               nameDictionaryComposition()

    TREE groupTree g=ItemGroup PARENT parent(g)
    PROPERTIES READONLY order(g), name(g), recCountNotCompletedTranslateArticles(g)
    ORDERS order(g), name(g)
    FILTERGROUP inactive FILTER 'Активные' active(g) 'F6' DEFAULT
    FILTERGROUP notTranslateFilters
        FILTER 'Не обработан' recCountNotCompletedTranslateArticles(g) 'F6'

    OBJECTS a=Article
    PROPERTIES(a) READONLY nameBrand, id, canonicalNameItemGroupPanel=canonicalNameItemGroup PANEL
    PROPERTIES(a) originalCaption, originalComposition, originalCustomsGroup 
    PROPERTIES(a) BACKGROUND hintEditableBackground() nameUOM, caption, nameGender, composition,
                                                      netWeight, grossWeight, nameCountry
    PROPERTIES(a) completedTranslate ON CHANGE changeCompletedTranslate(a)
    PROPERTIES(a) NEWSESSION EDIT
    PROPERTIES(a) PANEL searchImage, urlImage
    PROPERTIES uploadAllImagesArticle() DRAW a         

    FILTERGROUP attributesFilters
        FILTER 'Без атрибутов' nullTranslate(a) 'F7' 
        FILTER 'С атрибутами' NOT nullTranslate(a) 'F6' 

    FILTERS isParent(g, a) 
//    FILTERGROUP groupFilters
//        FILTER 'По группам' 'F11' isParentGroupArticle(g, a) DEFAULT
//        FILTER 'Без групп' 'ctrl F11' captionArticle(a) IF NOT itemGroupArticle(a)

    FILTERGROUP translateFilters
        FILTER 'Не обработан' notCompletedTranslate(a) 'F9' DEFAULT
        FILTER 'Обработан' completedTranslate(a) 'F8'

    FILTERS quantityInvoiceDetail(a, currentUser()) OR (a IS Article AND NOT countInvoices(currentUser()))

    OBJECTS i=Item
    PROPERTIES(i) READONLY descriptionDefaultPurchaseInvoice, idBarcode, id, originalCaptionGrid = originalCaption, 
                           originalCustomsGroup, nameColor, nameSize
    PROPERTIES(i) BACKGROUND hintEditableBackground() originalSize, nameUOM, caption, canonicalNameItemGroup, 
                             composition, netWeight, grossWeight, nameCountry,
                             image READONLY PANEL
    PROPERTIES(a)            loadImage 
    PROPERTIES(i) completedTranslate
    ORDERS id(i)
    PROPERTIES(i) NEWSESSION EDIT SHOWIF enableEditing(i)
    
    FILTERGROUP attributesFilters2
        FILTER 'Без атрибутов' nullTranslate(i) 'F7'
        FILTER 'С атрибутами' NOT nullTranslate(i) 'F6'
             
    FILTERGROUP itemFilters
        FILTER 'По артикулам' article(i) == a 'F4' DEFAULT
        FILTER 'По группам (не обработан)' isParent(g,i) AND NOT completedTranslate(i) 'shift F4'
        FILTER 'По группам' isParent(g,i) 'ctrl F4'
        FILTER 'По артикулам/инвойсам' article(i) == a AND (quantityInvoiceDetail(i, currentUser()) OR (i IS Item AND NOT countInvoices(currentUser()))) 'shift F5'
;
                                                                                                         
DESIGN articleTranslateDashboard {
    NEW top{
        horizontal = TRUE;
        NEW filter {
            caption = 'Фильтр';
            horizontal = TRUE;
            MOVE PROPERTY(seriesNumberDateInvoicesCurrentUser());
            MOVE PROPERTY(selectPurchaseInvoicesCurrentUser());
        }
        NEW dictionary {
            caption = 'Словари';
            horizontal = TRUE;
            MOVE PROPERTY(nameDictionaryCaption());
            MOVE PROPERTY(nameDictionaryComposition());        
        }
    }
    NEW pane {
        horizontal = TRUE;
        fill = 1;
        NEW tree {
            horizontal = FALSE;
            fill = 1;
            MOVE BOX(TREE groupTree) {fill = 2;}
            NEW imageBox {
                fill = 3;
                caption = 'Изображение';                     
                MOVE PROPERTY(image(i)) {                           
                    caption = '';
                    fill = 1;
                }
                MOVE PROPERTY(loadImage(a));
            }
        }
        NEW row11 {
            fill = 3;
            horizontal = FALSE;
            MOVE BOX(a) {
                defaultComponent = TRUE;
                fill = 2;
                NEW imageContainer{
                    horizontal = TRUE;
                    MOVE PROPERTY(searchImage(a));
                    MOVE PROPERTY(urlImage(a));
                    MOVE PROPERTY(uploadAllImagesArticle());
                }
            }
            MOVE BOX(i);
        }
    }

    PROPERTY(id(a)) { charWidth = 6;}
    PROPERTY(id(i)) { charWidth = 6;}
    PROPERTY(composition(i)) { charWidth = 30;}
    PROPERTY(originalCustomsGroup(i)) { charWidth = 11;}
    PROPERTY(caption(i)) { charWidth = 20;}
    PROPERTY(composition(i)) { charWidth = 30;}

    MOVE TOOLBARBOX;
}
      
WHEN LOCAL FORMS articleTranslateDashboard CHANGED(caption(article(Item i))) AND NOT CHANGED(caption(i)) DO         
    caption(i) <- caption(article(i));           
           
completeArticleTranslateDashboard 'Подтвердить все'()  {   
    LOCAL k = INTEGER ();
    k() <- 0;
    
    FOR [ FILTER articleTranslateDashboard.a](Article article) AND nullTranslate(article) DO{   
        k() <- k() + 1;              
    }    
    IF k() > 0 THEN {
        MESSAGE 'Для артикула не задано название или состав ('+k()+' шт.)';
    } ELSE {
        FOR [ FILTER articleTranslateDashboard.a](Article article) DO {
            completedTranslate(Item item) <- TRUE WHERE article(item) == article;
        }
    }      
} TOOLBAR CONFIRM;

EXTEND FORM  articleTranslateDashboard
    PROPERTIES() DRAW a completeArticleTranslateDashboard
;

// ------------------------- Автоматическое заполнение свойств --------------------------- //
countArticleCaption (string, original) = GROUP SUM 1 BY caption(Article article), originalCaption(article);
defaultCaptionArticleOriginalCaption (ISTRING[100] original) = GROUP 
                                                           LAST ISTRING[255] caption
                                                           ORDER countArticleCaption(caption, original), caption
                                                           WHERE countArticleCaption(caption, original);

fillDefaultCaption 'Перевести название'(Article article)  { 
    caption(article) <- defaultCaptionArticleOriginalCaption(originalCaption(article))
        WHERE defaultCaptionArticleOriginalCaption(originalCaption(article));
} ASON CONTEXTMENU caption[Article];

fillDefaultCaptionArticles 'Перевести для всех название'()  { 
    FOR [ FILTER articleTranslateDashboard.a](Article article) DO {
        fillDefaultCaption(article);
    }
} ASON CONTEXTMENU caption[Article];

  
translateCaption 'Перевести название по словарю'(Article article)  { 
    translate(dictionaryCaption(), originalCaption(article));
    caption(article) <- ISTRING[100](translationResult());
} ASON CONTEXTMENU caption[Article];  

translateCaptionArticles 'Перевести для всех название по словарю'()  { 
    FOR [ FILTER articleTranslateDashboard.a](Article article) DO {
        translateCaption(article);
    }
} ASON CONTEXTMENU caption[Article];
//--
translateComposition 'Перевести состав по словарю'(Article article)  { 
    translate(dictionaryComposition(), originalComposition(article));
    composition(article) <- STRING[255](translationResult());
} ASON CONTEXTMENU composition[Article];  

translateCompositionArticles 'Перевести для всех состав по словарю'()  { 
    FOR [ FILTER articleTranslateDashboard.a](Article article) DO {
        translateComposition(article);
    }
} ASON CONTEXTMENU composition[Article];

//--
countArticleComposition (string, original) = GROUP SUM 1 BY composition(Article article), originalComposition(article);
defaultCompositionArticleOriginal (STRING[255] original) = GROUP 
                                                                   LAST STRING[255] composition
                                                                   ORDER countArticleComposition(composition, original), composition
                                                                   WHERE countArticleComposition(composition, original);

fillDefaultComposition 'Перевести состав'(Article article)  { 
    composition(article) <- defaultCompositionArticleOriginal(originalComposition(article))
        WHERE defaultCompositionArticleOriginal(originalComposition(article));
} ASON CONTEXTMENU composition[Article];

fillDefaultCompositionArticles 'Перевести для всех состав'()  { 
   FOR [ FILTER articleTranslateDashboard.a](Article article) DO {
        fillDefaultComposition(article);
   }
} ASON CONTEXTMENU composition[Article];

NAVIGATOR {
    customsDashboardNavigator {
        NEW articleTranslateDashboard;
    }
}